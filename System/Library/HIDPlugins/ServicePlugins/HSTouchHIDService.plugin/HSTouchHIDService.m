void sub_57AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1) {
LABEL_10:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

void sub_5E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_5F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v11 = v10;

  _Unwind_Resume(a1);
}

void sub_6168(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_61E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_6248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_62FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_63B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t HSUtil::GetMonotonicTime(HSUtil *this)
{
  MonotonicMachTime = (HSUtil *)HSUtil::GetMonotonicMachTime(this);
  return HSUtil::NanosecondsFromMachTime(MonotonicMachTime);
}

uint64_t HSUtil::NanosecondsFromMachTime(HSUtil *this)
{
  MachTimebase = (unsigned int *)HSUtil::getMachTimebase(this);
  return (void)this * *MachTimebase / (uint64_t)MachTimebase[1];
}

void *HSUtil::getMachTimebase(HSUtil *this)
{
  predicate = (dispatch_once_t *)&HSUtil::getMachTimebase(void)::once;
  dispatch_block_t block = 0;
  objc_storeStrong(&block, &__block_literal_global_2);
  if (*predicate != -1) {
    dispatch_once(predicate, block);
  }
  objc_storeStrong(&block, 0);
  return &HSUtil::getMachTimebase(void)::timebase;
}

uint64_t HSUtil::GetMonotonicMachTime(HSUtil *this)
{
  return mach_absolute_time();
}

void sub_678C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_68D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_6C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_6F48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_7168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19, uint64_t a20,uint64_t a21,int a22,int a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id location)
{
  objc_storeStrong((id *)(v33 - 176), 0);
  _Unwind_Resume(a1);
}

void sub_7244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, char a13)
{
  objc_storeStrong((id *)(v13 - 24), 0);
  _Unwind_Resume(a1);
}

void HSUtil::ObjectLock::~ObjectLock(id *this)
{
}

{
  if (*(unsigned char *)this)
  {
    [this[1] unlock];
    *(unsigned char *)this = 0;
  }
}

uint64_t HSUtil::ObjectLock::ObjectLock(uint64_t a1, void *a2)
{
  uint64_t v5 = a1;
  id location = 0;
  objc_storeStrong(&location, a2);
  uint64_t v3 = v5;
  HSUtil::ObjectLock::ObjectLock(v5, location);
  objc_storeStrong(&location, 0);
  return v3;
}

{
  id v3;
  id v4;

  uint64_t v3 = a2;
  *(unsigned char *)a1 = 0;
  size_t v4 = v3;
  *(void *)(a1 + 8) = v4;
  [v4 lock];
  *(unsigned char *)a1 = 1;

  return a1;
}

void sub_7348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, _Unwind_Exception *exception_object)
{
  objc_storeStrong((id *)(v13 - 16), 0);
  _Unwind_Resume(a1);
}

void sub_73BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id HSUtil::DynamicCast<HSTGetDebugStateEvent>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_749C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id HSUtil::DynamicCast<HSTSetPropertyEvent>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_7514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id HSUtil::DynamicCast<HSTVendorEvent>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_758C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id HSUtil::DynamicCast<HSTHIDEvents>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_7604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id HSUtil::DynamicCast<HSTCopyEvent>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_767C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_7824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_7A4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id HSUtil::DynamicCast<HSTGetPropertyEvent>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_7ADC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_7C34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_7D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, id location)
{
}

id HSUtil::DynamicCast<HSTTimestampSyncEvent>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_7E1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_7F90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void setReport<HSTPipeline::FirmwareInterface::FeatureReport::HostEvent>(uint64_t a1)
{
  if (!a1)
  {
    size_t v4 = +[NSAssertionHandler currentHandler];
    uint64_t v5 = +[NSString stringWithUTF8String:"void setReport(MTDeviceRef, const T &) [T = HSTPipeline::FirmwareInterface::FeatureReport::HostEvent]"];
    [v4 handleFailureInFunction:v5, @"HSTFirmwareManager.mm", 200, @"Invalid parameter not satisfying: %@", @"device" file lineNumber description];

    v6 = +[NSAssertionHandler currentHandler];
    v7 = +[NSString stringWithUTF8String:"IOReturn HSTPipeline::FirmwareUtil::SetReport(MTDeviceRef _Nonnull, const T &) [T = HSTPipeline::FirmwareInterface::FeatureReport::HostEvent]"];
    [v6 handleFailureInFunction:v7, @"FirmwareUtil.h", 9, @"Invalid parameter not satisfying: %@", @"device" file lineNumber description];
  }
  mach_error_t v1 = MTDeviceSetReport();
  if (v1)
  {
    mach_error_t v2 = v1;
    uint64_t v3 = MTLoggingPlugin();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      mach_error_string(v2);
      setReport<HSTPipeline::FirmwareInterface::FeatureReport::HostNotificationControl>();
    }
  }
}

void sub_8138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MTLoggingPlugin()
{
  if (MTLoggingPlugin_onceToken != -1) {
    dispatch_once(&MTLoggingPlugin_onceToken, &__block_literal_global_0);
  }
  return MTLoggingPlugin___logObj;
}

void sub_82F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_83CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, _Unwind_Exception *exception_object)
{
  objc_storeStrong((id *)(v14 - 24), 0);
  _Unwind_Resume(a1);
}

void sub_84C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_8588(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_8638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id HSUtil::DynamicCast<HSTStuckTouchDetectorStateEvent>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_86B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id HSUtil::DynamicCast<HSTUSBChargingStateEvent>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_8728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id HSUtil::DynamicCast<HSTNotificationEvent>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_87A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id HSUtil::DynamicCast<HSTSetReportEvent>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_8818(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id HSUtil::DynamicCast<HSTResetEvent>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_8890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_8AB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_8BF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_8D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_8E4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_8EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t *HSUtil::CoderKey::New(HSUtil::CoderKey *this, const char *a2)
{
  __s = (char *)this;
  id v2 = (os_unfair_lock_s *)HSUtil::CoderKey::keyState(this);
  os_unfair_lock_lock(v2);
  uint64_t v3 = std::__hash_table<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,HSUtil::CoderKey const*>,HSUtil::CoderKey::KeyStringHash,HSUtil::CoderKey::KeyStringEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,HSUtil::CoderKey const*>,HSUtil::CoderKey::KeyStringEqual,HSUtil::CoderKey::KeyStringHash,true>,std::allocator<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>>::find<char const*>(&v2[8]._os_unfair_lock_opaque, (const char **)&__s);
  if (!v3) {
    operator new();
  }
  size_t v4 = v3[3];
  os_unfair_lock_unlock(v2);
  return v4;
}

void configureGestureParser(MTPListGestureConfig_ *a1, mt_StandardTrackpadSettings *a2)
{
  CFTypeRef obj = 0;
  v130 = objc_opt_new();
  v152[0] = @"Resolution_dpi";
  LODWORD(v2) = 1137180672;
  uint64_t v3 = +[NSNumber numberWithFloat:v2];
  v153[0] = v3;
  v152[1] = @"AccelThresh";
  LODWORD(v4) = 12.0;
  uint64_t v5 = +[NSNumber numberWithFloat:v4];
  v152[2] = @"AccelPower";
  v153[1] = v5;
  v153[2] = &off_149668;
  v6 = +[NSDictionary dictionaryWithObjects:v153 forKeys:v152 count:3];
  [v130 setObject:v6 forKeyedSubscript:@"Resting Accel Tracking"];

  v150[0] = @"Resolution_dpi";
  LODWORD(v7) = 1137180672;
  v8 = +[NSNumber numberWithFloat:v7];
  v151[0] = v8;
  v150[1] = @"AccelThresh";
  LODWORD(v9) = 12.0;
  v10 = +[NSNumber numberWithFloat:v9];
  v150[2] = @"AccelPower";
  v151[1] = v10;
  v151[2] = &off_1496B8;
  v11 = +[NSDictionary dictionaryWithObjects:v151 forKeys:v150 count:3];
  [v130 setObject:v11 forKeyedSubscript:@"Tracking"];

  v148[0] = @"Resolution_dpi";
  LODWORD(v12) = 1137180672;
  uint64_t v13 = +[NSNumber numberWithFloat:v12];
  v149[0] = v13;
  v148[1] = @"AccelThresh";
  LODWORD(v14) = 12.0;
  v15 = +[NSNumber numberWithFloat:v14];
  v149[1] = v15;
  v149[2] = &off_1496B8;
  v148[2] = @"AccelPower";
  v148[3] = @"CommitMultiplier";
  v149[3] = &off_149B08;
  v16 = +[NSDictionary dictionaryWithObjects:v149 forKeys:v148 count:4];
  [v130 setObject:v16 forKeyedSubscript:@"Scrolling"];

  v146[0] = @"Resolution_dpi";
  LODWORD(v17) = 1137180672;
  v18 = +[NSNumber numberWithFloat:v17];
  v147[1] = &off_149B18;
  v146[1] = @"CommitMultiplier";
  v146[2] = @"Acceleration";
  v147[0] = v18;
  v147[2] = @"System";
  v19 = +[NSDictionary dictionaryWithObjects:v147 forKeys:v146 count:3];
  [v130 setObject:v19 forKeyedSubscript:@"Zooming"];

  v144[0] = @"Resolution_mm";
  v144[1] = @"AccelThresh";
  v145[0] = &off_1496D0;
  v145[1] = &off_1496E8;
  v144[2] = @"AccelPower";
  v145[2] = &off_149678;
  v20 = +[NSDictionary dictionaryWithObjects:v145 forKeys:v144 count:3];
  [v130 setObject:v20 forKeyedSubscript:@"Command"];

  v139[0] = @"Resolution_mm";
  v139[1] = @"AccelThresh";
  *(void *)valuePtr = &off_149700;
  *(void *)&valuePtr[8] = &off_1496E8;
  v139[2] = @"AccelPower";
  v139[3] = @"FluidAnimationStartThreshold_mm";
  *(void *)&valuePtr[16] = &off_149688;
  v141 = (const char *)&off_149718;
  v139[4] = @"FluidSwipeCompleteThreshold_mm";
  v139[5] = @"FluidSwipeInertiaTime_s";
  v142 = &off_149730;
  v143 = &off_149698;
  v21 = +[NSDictionary dictionaryWithObjects:valuePtr forKeys:v139 count:6];
  [v130 setObject:v21 forKeyedSubscript:@"Swipe"];

  v137[0] = @"Resolution_mm";
  v137[1] = @"AccelThresh";
  v138[0] = &off_149748;
  v138[1] = &off_1496E8;
  v137[2] = @"AccelPower";
  v137[3] = @"FluidAnimationStartThreshold_mm";
  v138[2] = &off_149688;
  v138[3] = &off_1496D0;
  v137[4] = @"FluidSwipeCompleteThreshold_mm";
  v137[5] = @"FluidSwipeInertiaTime_s";
  v138[4] = &off_149760;
  v138[5] = &off_149698;
  v22 = +[NSDictionary dictionaryWithObjects:v138 forKeys:v137 count:6];
  [v130 setObject:v22 forKeyedSubscript:@"Polar Swipe"];

  v135[0] = @"Resolution_mm";
  v135[1] = @"AccelThresh";
  v136[0] = &off_1496D0;
  v136[1] = &off_1496E8;
  v135[2] = @"AccelPower";
  v135[3] = @"FluidAnimationStartThreshold_mm";
  v136[2] = &off_149688;
  v136[3] = &off_149718;
  v135[4] = @"FluidSwipeCompleteThreshold_mm";
  v135[5] = @"FluidSwipeInertiaTime_s";
  v136[4] = &off_149778;
  v136[5] = &off_1496A8;
  v23 = +[NSDictionary dictionaryWithObjects:v136 forKeys:v135 count:6];
  [v130 setObject:v23 forKeyedSubscript:@"Edge Swipe"];

  v133[0] = @"Resolution_mm";
  v133[1] = @"AccelThresh";
  v134[0] = &off_1496D0;
  v134[1] = &off_1496E8;
  v133[2] = @"AccelPower";
  v133[3] = @"FluidAnimationStartThreshold_mm";
  v134[2] = &off_149688;
  v134[3] = &off_1496D0;
  v133[4] = @"FluidSwipeCompleteThreshold_mm";
  v133[5] = @"FluidSwipeInertiaTime_s";
  v134[4] = &off_149778;
  v134[5] = &off_1496A8;
  v24 = +[NSDictionary dictionaryWithObjects:v134 forKeys:v133 count:6];
  [v130 setObject:v24 forKeyedSubscript:@"Edge Scroll"];

  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFMutableArrayRef v26 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  v27 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v26)
  {
    v28 = v27;
    if (v27)
    {
      CFDictionaryAddValue(v27, @"Gestures", v26);
      CFDictionaryAddValue(v28, @"Transitions", @"ToMoreFingers FromFewerFingers FromMoreFingers");
      CFDictionaryAddValue(Mutable, @"None", v28);
      CFRelease(v26);
      CFRelease(v28);
    }
  }
  v29 = (MTPListGestureConfig_ *)CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFMutableDictionaryRef v30 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v29)
  {
    v31 = v30;
    if (v30)
    {
      MTPListGestureConfig_::addGestureToArray(v29, (__CFArray *)@"Point", @"Translate", @"Tracking", @"Repetitive", 0, 0, 0, v115);
      CFDictionaryAddValue(v31, @"Gestures", v29);
      CFDictionaryAddValue(v31, @"Transitions", @"ToMoreFingers FromMoreFingers FromMoreWithSlightIntegrationDelay AccelOnlyIfSomeResting");
      CFDictionaryAddValue(Mutable, @"Point", v31);
      CFRelease(v29);
      CFRelease(v31);
    }
  }
  v32 = (MTPListGestureConfig_ *)CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFMutableDictionaryRef v33 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v32)
  {
    v34 = v33;
    if (v33)
    {
      MTPListGestureConfig_::addGestureToArray(v32, (__CFArray *)@"Point", @"Translate", @"Tracking", @"Repetitive", 0, 0, 0, v115);
      MTPListGestureConfig_::addGestureToArray(v32, (__CFArray *)@"Click", @"Tap", 0, 0, 0, 0, 0, v116);
      CFDictionaryAddValue(v34, @"Gestures", v32);
      CFDictionaryAddValue(v34, @"Transitions", @"ToMoreFingers FromMoreFingers FromMoreWithSlightIntegrationDelay AccelOnlyIfSomeResting");
      CFDictionaryAddValue(Mutable, @"Point & Click", v34);
      CFRelease(v32);
      CFRelease(v34);
    }
  }
  v35 = (MTPListGestureConfig_ *)CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFMutableDictionaryRef v36 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v35)
  {
    v37 = v36;
    if (v36)
    {
      MTPListGestureConfig_::addGestureToArray(v35, (__CFArray *)@"Point", @"Translate", @"Tracking", @"Repetitive", 0, 0, 0, v115);
      MTPListGestureConfig_::addGestureToArray(v35, (__CFArray *)@"Primary Down", @"Tap", 0, 0, 0, 0, 0, v117);
      CFDictionaryAddValue(v37, @"Gestures", v35);
      CFDictionaryAddValue(v37, @"Transitions", @"ToMoreFingers FromMoreFingers FromMoreWithSlightIntegrationDelay");
      CFDictionaryAddValue(Mutable, @"Point, Click & Drag", v37);
      CFRelease(v35);
      CFRelease(v37);
    }
  }
  v38 = (MTPListGestureConfig_ *)CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFMutableDictionaryRef v39 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v38)
  {
    v40 = v39;
    if (v39)
    {
      if (a2->tapClick)
      {
        if (!a2->zoomToggle) {
          MTPListGestureConfig_::addGestureToArray(v38, (__CFArray *)@"Click", @"Tap", 0, 0, 0, 0, 0, v115);
        }
        MTPListGestureConfig_::addGestureToArray(v38, (__CFArray *)@"Click", @"DroppedFingerTap", 0, 0, 0, 0, 0, v115);
      }
      if (a2->zoomToggle) {
        MTPListGestureConfig_::addGestureToArray(v38, (__CFArray *)@"Show Definition", @"Tap", 0, 0, 0, 0, 0, v115);
      }
      *(_DWORD *)valuePtr = 1138819072;
      CFStringRef v41 = (const __CFString *)CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, valuePtr);
      MTPListGestureConfig_::addGestureToArray(v38, (__CFArray *)@"Primary Down", @"Hold", 0, @"TimeHeld BeginSlide", 0, @"HoldTime", v41, v115);
      CFRelease(v41);
      MTPListGestureConfig_::addGestureToArray(v38, (__CFArray *)@"Drag", @"Translate", @"Scrolling", @"Momentum", 0, 0, 0, v118);
      MTPListGestureConfig_::addGestureToArray(v38, (__CFArray *)@"Primary Up", @"Lift", 0, 0, 0, 0, 0, v119);
      CFDictionaryAddValue(v40, @"Gestures", v38);
      CFDictionaryAddValue(v40, @"Transitions", @"ToFewerFingers FromFewerIfPause MultiFingerDrag ");
      CFDictionaryAddValue(Mutable, @"Drag & Click", v40);
      CFRelease(v38);
      CFRelease(v40);
    }
  }
  v42 = (MTPListGestureConfig_ *)CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFMutableDictionaryRef v43 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v42)
  {
    v44 = v43;
    if (v43)
    {
      MTPListGestureConfig_::addGestureToArray(v42, (__CFArray *)@"Scroll", @"Translate", @"Scrolling", @"Repetitive", 0, 0, 0, v115);
      CFDictionaryAddValue(v44, @"Gestures", v42);
      CFDictionaryAddValue(v44, @"Transitions", @"ToFewerFingers FromFewerIfPause");
      CFDictionaryAddValue(Mutable, @"Scroll", v44);
      CFRelease(v42);
      CFRelease(v44);
    }
  }
  v45 = (MTPListGestureConfig_ *)CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFMutableDictionaryRef v46 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v45)
  {
    v47 = v46;
    if (v46)
    {
      MTPListGestureConfig_::addGestureToArray(v45, (__CFArray *)@"Scroll", @"Translate", @"Scrolling", @"Repetitive", 0, 0, 0, v115);
      MTPListGestureConfig_::addGestureToArray(v45, (__CFArray *)@"Secondary Click", @"Tap", 0, 0, 0, 0, 0, v120);
      CFDictionaryAddValue(v47, @"Gestures", v45);
      CFDictionaryAddValue(v47, @"Transitions", @"ToFewerFingers FromFewerIfPause");
      CFDictionaryAddValue(Mutable, @"Scroll & Secondary Click", v47);
      CFRelease(v45);
      CFRelease(v47);
    }
  }
  v48 = (MTPListGestureConfig_ *)CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFMutableDictionaryRef v49 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v48)
  {
    v50 = v49;
    if (v49)
    {
      MTPListGestureConfig_::addGestureToArray(v48, (__CFArray *)@"Scroll", @"Translate", @"Scrolling", @"Repetitive", @"LockOnFirst", 0, 0, v115);
      MTPListGestureConfig_::addGestureToArray(v48, (__CFArray *)@"Orientation", @"Scale+Rotate", @"Zooming", @"Repetitive", @"LockOnFirst", 0, 0, v121);
      CFDictionaryAddValue(v50, @"Gestures", v48);
      CFDictionaryAddValue(v50, @"Transitions", @"ToFewerFingers FromFewerIfPause");
      CFDictionaryAddValue(Mutable, @"Scroll, Zoom & Rotate", v50);
      CFRelease(v48);
      CFRelease(v50);
    }
  }
  v51 = (MTPListGestureConfig_ *)CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFMutableDictionaryRef v52 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v51)
  {
    v53 = v52;
    if (v52)
    {
      MTPListGestureConfig_::addGestureToArray(v51, (__CFArray *)@"Orientation", @"Scale+Rotate", @"Zooming", @"Repetitive", 0, 0, 0, v115);
      CFDictionaryAddValue(v53, @"Gestures", v51);
      CFDictionaryAddValue(v53, @"Transitions", @"ToFewerFingers FromFewerFingers");
      CFDictionaryAddValue(Mutable, @"Zoom & Rotate", v53);
      CFRelease(v51);
      CFRelease(v53);
    }
  }
  v54 = (MTPListGestureConfig_ *)CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFMutableDictionaryRef v55 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v54)
  {
    v56 = v55;
    if (v55)
    {
      MTPListGestureConfig_::addGestureToArray(v54, (__CFArray *)@"Swipe Left", @"Left", @"Swipe", @"OncePerDirection OnlyIfAllMoving", 0, 0, 0, v115);
      MTPListGestureConfig_::addGestureToArray(v54, (__CFArray *)@"Swipe Right", @"Right", @"Swipe", @"OncePerDirection OnlyIfAllMoving", 0, 0, 0, v122);
      MTPListGestureConfig_::addGestureToArray(v54, (__CFArray *)@"Swipe Up", @"Up", @"Swipe", @"OncePerDirection OnlyIfAllMoving", 0, 0, 0, v123);
      MTPListGestureConfig_::addGestureToArray(v54, (__CFArray *)@"Swipe Down", @"Down", @"Swipe", @"OncePerDirection OnlyIfAllMoving", 0, 0, 0, v124);
      CFDictionaryAddValue(v56, @"Transitions", @"FromMoreFingers ToMoreFingers ToFewerAfterSlightDelay FromFewerFingers FromMoreWithSlightIntegrationDelay");
      CFDictionaryAddValue(v56, @"Gestures", v54);
      CFDictionaryAddValue(Mutable, @"Swipes", v56);
      CFRelease(v54);
      CFRelease(v56);
    }
  }
  v57 = (MTPListGestureConfig_ *)CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  MTPListGestureConfig_::addActionEventToDictionary(v57, (__CFDictionary *)@"Point", @"Mouse Point", 0, 0, v58);
  MTPListGestureConfig_::addActionEventToDictionary(v57, (__CFDictionary *)@"Drag", @"Mouse Drag", @"Button1", 0, v59);
  MTPListGestureConfig_::addActionEventToDictionary(v57, (__CFDictionary *)@"Click", @"Mouse Click", @"Button1", 0, v60);
  MTPListGestureConfig_::addActionEventToDictionary(v57, (__CFDictionary *)@"Double Click", @"Mouse Double Click", @"Button1", 0, v61);
  MTPListGestureConfig_::addActionEventToDictionary(v57, (__CFDictionary *)@"Primary Down", @"Mouse Down", @"Button1", 0, v62);
  MTPListGestureConfig_::addActionEventToDictionary(v57, (__CFDictionary *)@"Primary Up", @"Mouse Up", @"Button1", 0, v63);
  MTPListGestureConfig_::addActionEventToDictionary(v57, (__CFDictionary *)@"Secondary Click", @"Mouse Click", @"Button2", 0, v64);
  MTPListGestureConfig_::addActionEventToDictionary(v57, (__CFDictionary *)@"Scroll", @"Scroll", 0, 0, v65);
  MTPListGestureConfig_::addActionEventToDictionary(v57, (__CFDictionary *)@"Scroll To Edge", @"Scroll To Edge", 0, 0, v66);
  MTPListGestureConfig_::addActionEventToDictionary(v57, (__CFDictionary *)@"Orientation", @"Orientation", 0, 0, v67);
  MTPListGestureConfig_::addActionEventToDictionary(v57, (__CFDictionary *)@"Zoom Toggle", @"Zoom Toggle", 0, 0, v68);
  MTPListGestureConfig_::addActionEventToDictionary(v57, (__CFDictionary *)@"Gesture Started", @"Gesture Started", 0, 0, v69);
  MTPListGestureConfig_::addActionEventToDictionary(v57, (__CFDictionary *)@"Gesture Ended", @"Gesture Ended", 0, 0, v70);
  MTPListGestureConfig_::addActionEventToDictionary(v57, (__CFDictionary *)@"Fluid Navigation", @"Fluid Navigation", 0, 0, v71);
  MTPListGestureConfig_::addActionEventToDictionary(v57, (__CFDictionary *)@"Fluid Notification", @"Fluid Notification", 0, 0, v72);
  MTPListGestureConfig_::addActionEventToDictionary(v57, (__CFDictionary *)@"Fluid Notification Alt", @"Fluid Notification Alt", 0, 0, v73);
  MTPListGestureConfig_::addActionEventToDictionary(v57, (__CFDictionary *)@"Fluid Dock", @"Fluid Dock", 0, 0, v74);
  MTPListGestureConfig_::addActionEventToDictionary(v57, (__CFDictionary *)@"Show Definition", @"Show Definition", 0, 0, v75);
  MTPListGestureConfig_::addActionEventToDictionary(v57, (__CFDictionary *)@"Swipe Left", @"Swipe", 0, 0, v76);
  MTPListGestureConfig_::addActionEventToDictionary(v57, (__CFDictionary *)@"Swipe Right", @"Swipe", 0, 0, v77);
  MTPListGestureConfig_::addActionEventToDictionary(v57, (__CFDictionary *)@"Swipe Up", @"Swipe", 0, 0, v78);
  MTPListGestureConfig_::addActionEventToDictionary(v57, (__CFDictionary *)@"Swipe Down", @"Swipe", 0, 0, v79);
  v80 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v81 = CFDictionaryCreateMutable(kCFAllocatorDefault, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v82 = (MTPListGestureConfig_ *)CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  v83 = (MTPListGestureConfig_ *)CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFMutableDictionaryRef v84 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v83)
  {
    v86 = v84;
    if (v84)
    {
      if (a2->pointMomentum) {
        CFStringRef v87 = @"Momentum AccelOnlyIfSomeResting";
      }
      else {
        CFStringRef v87 = @"AccelOnlyIfSomeResting";
      }
      if (a2->dragging)
      {
        MTPListGestureConfig_::addGestureToArray(v83, (__CFArray *)@"Point", @"Translate", @"Resting Accel Tracking", v87, 0, 0, 0, v115);
        v88 = @"Primary Down";
      }
      else
      {
        if (!a2->tapClick)
        {
          if (a2->pointing) {
            MTPListGestureConfig_::addGestureToArray(v83, (__CFArray *)@"Point", @"Translate", @"Resting Accel Tracking", v87, 0, 0, 0, v115);
          }
          goto LABEL_47;
        }
        MTPListGestureConfig_::addGestureToArray(v83, (__CFArray *)@"Point", @"Translate", @"Resting Accel Tracking", v87, 0, 0, 0, v115);
        v88 = @"Click";
      }
      MTPListGestureConfig_::addGestureToArray(v83, (__CFArray *)v88, @"Tap", 0, 0, 0, 0, 0, v125);
LABEL_47:
      if (a2->symmetricZoomRotate) {
        MTPListGestureConfig_::addGestureToArray(v83, (__CFArray *)@"Click", @"DroppedFingerTap", 0, 0, 0, 0, 0, v115);
      }
      if (HIBYTE(a2->scrollAcceleration)) {
        MTPListGestureConfig_::addGestureToArray(v83, (__CFArray *)@"Zoom Toggle", @"DoubleTap", 0, 0, 0, 0, 0, v115);
      }
      CFDictionaryAddValue(v86, @"Gestures", v83);
      CFDictionaryAddValue(v86, @"Transitions", @"ToMoreIfPause FromRestingPoint FromMoreFingers FromMoreWithSlightIntegrationDelay");
      CFDictionaryAddValue(Mutable, @"1F Point, Click & Drag", v86);
      CFRelease(v83);
      CFRelease(v86);
    }
  }
  MTPListGestureConfig_::addChordMappingToArray(v82, (__CFArray *)@"1 Finger", @"1F Point, Click & Drag", v85);
  if (!a2->horizontalScrolling
    && !a2->verticalScrolling
    && !HIBYTE(a2->scrollAcceleration)
    && !a2->zoom
    && !a2->gestureScrollingEnabled
    && (!a2->tapClick || !a2->rightClick))
  {
    CFStringRef v92 = @"Resting 2F Point";
    createRestingSwipeOrDockCombo(Mutable, @"Resting 2F Point", 1, a2->symmetricZoomRotate, 0, 0, 0, 0, 0, 0, 0, a2->rotate, 0, a2);
    goto LABEL_101;
  }
  v89 = (MTPListGestureConfig_ *)CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFMutableDictionaryRef v90 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFStringRef v92 = @"Scroll, Zoom & Rotate, Secondary Click";
  if (v89)
  {
    v93 = v90;
    if (v90)
    {
      if (a2->gestureScrollingEnabled || a2->restingScroll)
      {
        CFStringRef v94 = @"IfWidelySeparatedFingers AccelOnlyIfSomeResting";
      }
      else
      {
        CFStringRef v94 = @"IfWidelySeparatedFingers AccelOnlyIfSomeResting";
        if (!HIBYTE(a2->scrollAcceleration) && !a2->zoom) {
          CFStringRef v94 = @"AccelOnlyIfSomeResting";
        }
      }
      MTPListGestureConfig_::addGestureToArray(v89, (__CFArray *)@"Point", @"Translate", @"Resting Accel Tracking", v94, @"LockOnFirst", 0, 0, v115);
      if (a2->horizontalScrolling)
      {
        if (a2->scrollMomentumEnabled) {
          CFStringRef v95 = @"Momentum";
        }
        else {
          CFStringRef v95 = @"Repetitive";
        }
        if (a2->verticalScrolling) {
          CFStringRef v96 = @"Translate";
        }
        else {
          CFStringRef v96 = @"Horizontal";
        }
      }
      else
      {
        if (!a2->verticalScrolling)
        {
LABEL_75:
          if (a2->horizontalScrolling || a2->verticalScrolling) {
            MTPListGestureConfig_::addGestureToArray(v89, (__CFArray *)@"Scroll", @"Hold", 0, @"MayBegin", 0, @"Category", @"TwoFingerScroll", v126);
          }
          if (a2->dockScale5F)
          {
            if (a2->notificationCenter2F) {
              CFStringRef v97 = @"Right";
            }
            else {
              CFStringRef v97 = @"Left";
            }
            MTPListGestureConfig_::addGestureToArray(v89, (__CFArray *)@"Fluid Notification", v97, @"Edge Swipe", @"OnlyIfAllMoving OnlyFromEdge", @"LockOnFirstUntilPause", @"Category", @"TwoFingerScroll", v126);
            MTPListGestureConfig_::addGestureToArray(v89, (__CFArray *)@"Fluid Notification", @"Horizontal", @"Edge Swipe", @"OnlyIfAllMoving", @"LockOnFirstUntilPause", @"Category", @"TwoFingerNotificationCenter", v127);
            if (a2->scrollMomentumEnabled) {
              CFStringRef v98 = @"Momentum";
            }
            else {
              CFStringRef v98 = @"Repetitive";
            }
            MTPListGestureConfig_::addGestureToArray(v89, (__CFArray *)@"Scroll", @"Vertical", @"Scrolling", v98, @"LockOnFirst", @"Category", @"TwoFingerNotificationCenter", v128);
          }
          if (a2->tapClick && a2->rightClick) {
            MTPListGestureConfig_::addGestureToArray(v89, (__CFArray *)@"Secondary Click", @"Tap", 0, 0, 0, 0, 0, v126);
          }
          if (HIBYTE(a2->scrollAcceleration))
          {
            if (a2->zoom) {
              CFStringRef v99 = @"Scale+Rotate";
            }
            else {
              CFStringRef v99 = @"Scale";
            }
          }
          else
          {
            if (!a2->zoom)
            {
LABEL_96:
              if (a2->rotate) {
                MTPListGestureConfig_::addGestureToArray(v89, (__CFArray *)@"Zoom Toggle", @"DoubleTap", 0, 0, 0, 0, 0, v126);
              }
              if (a2->symmetricZoomRotate) {
                MTPListGestureConfig_::addGestureToArray(v89, (__CFArray *)@"Click", @"DroppedFingerTap", 0, 0, 0, 0, 0, v126);
              }
              CFDictionaryAddValue(v93, @"Gestures", v89);
              CFDictionaryAddValue(v93, @"Transitions", @"ToMoreIfPause ToFewerAfterSlightDelay FromRestingPoint FromFewerFingers FromMoreFingers FromMoreWithSlightIntegrationDelay");
              CFDictionarySetValue(Mutable, @"Scroll, Zoom & Rotate, Secondary Click", v93);
              CFRelease(v89);
              CFRelease(v93);
              CFStringRef v92 = @"Scroll, Zoom & Rotate, Secondary Click";
              goto LABEL_101;
            }
            CFStringRef v99 = @"Rotate";
          }
          MTPListGestureConfig_::addGestureToArray(v89, (__CFArray *)@"Orientation", v99, @"Zooming", @"Repetitive", @"LockOnFirst", 0, 0, v126);
          goto LABEL_96;
        }
        if (a2->scrollMomentumEnabled) {
          CFStringRef v95 = @"Momentum";
        }
        else {
          CFStringRef v95 = @"Repetitive";
        }
        CFStringRef v96 = @"Vertical";
      }
      MTPListGestureConfig_::addGestureToArray(v89, (__CFArray *)@"Scroll", v96, @"Scrolling", v95, @"LockOnFirst", @"Category", @"TwoFingerScroll", v126);
      goto LABEL_75;
    }
  }
LABEL_101:
  MTPListGestureConfig_::addChordMappingToArray(v82, (__CFArray *)@"2 Fingers", v92, v91);
  if (a2->multiDragMomentum)
  {
    MTPListGestureConfig_::addChordMappingToArray(v82, (__CFArray *)@"3 Fingers", @"Drag & Click", v100);
    goto LABEL_127;
  }
  if (a2->navigationSwipe4F.h || a2->dockSwipe3F.v) {
    int v101 = 3;
  }
  else {
    int v101 = 0;
  }
  int surfaceOrientationMode_high = HIBYTE(a2->surfaceOrientationMode);
  if (!a2->supportsScrollMomentum)
  {
    int v103 = 0;
LABEL_125:
    int v104 = 0;
    goto LABEL_126;
  }
  if (!HIBYTE(a2->surfaceOrientationMode))
  {
    if (a2->navigationSwipe3F.v)
    {
      int v103 = 0;
    }
    else
    {
      BOOL v105 = a2->navigationSwipe4F.h || a2->dockSwipe3F.v;
      int v103 = !v105;
    }
    if (!a2->navigationSwipe3F.v)
    {
      BOOL v114 = a2->navigationSwipe4F.h || a2->dockSwipe3F.v;
      int surfaceOrientationMode_high = 0;
      int v104 = !v114;
      goto LABEL_126;
    }
    int surfaceOrientationMode_high = 0;
    goto LABEL_125;
  }
  int v103 = 0;
  int v104 = 0;
  int surfaceOrientationMode_high = 1;
LABEL_126:
  createRestingSwipeOrDockCombo(Mutable, @"Resting 3F Swipe", v101, a2->symmetricZoomRotate, v103, v104, a2->navigationSwipe3F.v, surfaceOrientationMode_high != 0, a2->dockSwipe3F.v, a2->navigationSwipe4F.h, 0, 0, a2->zoomToggle, a2);
  MTPListGestureConfig_::addChordMappingToArray(v82, (__CFArray *)@"3 Fingers", @"Resting 3F Swipe", v106);
LABEL_127:
  BOOL v = a2->dockSwipe4F.v;
  if (!a2->dockSwipe3F.h)
  {
    int v108 = 1;
    if (!a2->dockSwipe4F.v) {
      goto LABEL_131;
    }
    BOOL v = 1;
  }
  int v108 = 3;
LABEL_131:
  createRestingSwipeOrDockCombo(Mutable, @"Resting 4F Dock Operations", v108, a2->symmetricZoomRotate, a2->supportsScrollMomentum, a2->supportsScrollMomentum, a2->navigationSwipe4F.v, a2->navigationSwipe3F.h, v, a2->dockSwipe3F.h, a2->showDefinition, 0, 0, a2);
  MTPListGestureConfig_::addChordMappingToArray(v82, (__CFArray *)@"4 Fingers", @"Resting 4F Dock Operations", v109);
  createRestingSwipeOrDockCombo(Mutable, @"Resting T4F Dock Operations", v108, a2->symmetricZoomRotate, a2->supportsScrollMomentum, a2->supportsScrollMomentum, a2->navigationSwipe4F.v, a2->navigationSwipe3F.h, a2->dockSwipe4F.v, a2->dockSwipe3F.h, a2->dockScale4F, 0, 0, a2);
  MTPListGestureConfig_::addChordMappingToArray(v82, (__CFArray *)@"4 Fingers + Thumb", @"Resting T4F Dock Operations", v110);
  CFDictionaryAddValue(v81, @"Chords", v82);
  CFDictionaryAddValue(v80, @"Right", v81);
  MTGestureConfig_::clearAllChords((MTGestureConfig_ *)a1);
  MTPListGestureConfig_::setMotionSensitivitiesDictionary(a1, v130);
  MTPListGestureConfig_::setGestureSetsDictionary(a1, Mutable);
  MTPListGestureConfig_::setActionEventsDictionary(a1, v57);
  MTPListGestureConfig_::setChordMappingsDictionary(a1, v80);
  MTPListGestureConfig_::parseCreateGestureConfig(a1, (const __CFString **)&obj);
  CFRelease(Mutable);
  CFRelease(v57);
  CFRelease(v82);
  CFRelease(v81);
  CFRelease(v80);
  uint64_t ChordTableForHand = MTGestureConfig_::getChordTableForHand((uint64_t)a1, 1);
  if (ChordTableForHand)
  {
    if (a2->dockScale5F && a2->edgeNotificationSwipe2F)
    {
      v112 = MTLoggingPlugin();
      if (os_log_type_enabled(v112, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)valuePtr = 136315650;
        *(void *)&valuePtr[4] = "[Debug] ";
        *(_WORD *)&valuePtr[12] = 2080;
        *(void *)&valuePtr[14] = "";
        *(_WORD *)&valuePtr[22] = 2080;
        v141 = "configureGestureParser";
        int v113 = 32;
        _os_log_impl(&def_411C8, v112, OS_LOG_TYPE_DEBUG, "[HID] [MT] %s%s%s Enablng NC gestures!", valuePtr, 0x20u);
      }
      else
      {
        int v113 = 32;
      }
    }
    else
    {
      v112 = MTLoggingPlugin();
      if (os_log_type_enabled(v112, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)valuePtr = 136315650;
        *(void *)&valuePtr[4] = "[Debug] ";
        *(_WORD *)&valuePtr[12] = 2080;
        *(void *)&valuePtr[14] = "";
        *(_WORD *)&valuePtr[22] = 2080;
        v141 = "configureGestureParser";
        _os_log_impl(&def_411C8, v112, OS_LOG_TYPE_DEBUG, "[HID] [MT] %s%s%s Disabling NC gestures!", valuePtr, 0x20u);
      }
      int v113 = 128;
    }

    *(_DWORD *)(ChordTableForHand + 24) = *(_DWORD *)(ChordTableForHand + 24) & 0xFFFFFF5F | v113;
  }
  if (obj)
  {
    CFShow(obj);
    CFRelease(obj);
    CFTypeRef obj = 0;
  }
}

void sub_AE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void createRestingSwipeOrDockCombo(__CFDictionary *a1, const void *a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int8 a9, unsigned __int8 a10, char a11, char a12, unsigned __int8 a13, unsigned char *a14)
{
  Mutable = (MTPListGestureConfig_ *)CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFMutableDictionaryRef v17 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable) {
    BOOL v18 = v17 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (v18) {
    return;
  }
  v29 = a14;
  theDict = v17;
  if (a4) {
    MTPListGestureConfig_::addGestureToArray(Mutable, (__CFArray *)@"Click", @"DroppedFingerTap", 0, 0, 0, 0, 0, a14);
  }
  int v19 = a10;
  if ((a5 & 1) != 0 || a6)
  {
    if (v29[25]) {
      CFStringRef v20 = @"Momentum";
    }
    else {
      CFStringRef v20 = @"Repetitive";
    }
    MutableCopy = CFStringCreateMutableCopy(kCFAllocatorDefault, 256, v20);
    v22 = MutableCopy;
    int v23 = a9 | a10 | a8;
    if (a6)
    {
      CFStringAppend(MutableCopy, @" OnlyIfTwoMoving");
      if (((v23 | a5 ^ 1) & 1) == 0)
      {
        CFStringRef v24 = @" OnlyIfAllMoving";
LABEL_19:
        CFStringAppend(v22, v24);
      }
    }
    else if (v23)
    {
      CFStringRef v24 = @" OnlyIfSomeMoving";
      goto LABEL_19;
    }
    MTPListGestureConfig_::addGestureToArray(Mutable, (__CFArray *)@"Scroll", @"Translate", @"Scrolling", v22, @"LockOnFirst", 0, 0, v29);
    CFRelease(v22);
  }
  if (a7 && !a9)
  {
    MTPListGestureConfig_::addGestureToArray(Mutable, (__CFArray *)@"Fluid Navigation", @"Horizontal", @"Swipe", @" OnlyIfAllMoving", @"LockOnFirstUntilPause", 0, 0, v29);
    v25 = a2;
    int v26 = a3;
    int v27 = a13;
    if (!a8 || (a10 & 1) != 0) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  v25 = a2;
  int v26 = a3;
  int v27 = a13;
  if (a8 && (a10 & 1) == 0)
  {
LABEL_28:
    MTPListGestureConfig_::addGestureToArray(Mutable, (__CFArray *)@"Fluid Navigation", @"Vertical", @"Swipe", @" OnlyIfAllMoving", @"LockOnFirstUntilPause", 0, 0, v29);
LABEL_29:
    MTPListGestureConfig_::addGestureToArray(Mutable, (__CFArray *)@"Fluid Navigation", @"Tap", 0, 0, 0, 0, 0, v29);
  }
  if (a9)
  {
    MTPListGestureConfig_::addGestureToArray(Mutable, (__CFArray *)@"Fluid Dock", @"Horizontal", @"Swipe", @" OnlyIfAllMoving", @"LockOnFirstUntilPause", 0, 0, v29);
    if (!a10)
    {
LABEL_32:
      if (!a11) {
        goto LABEL_33;
      }
      goto LABEL_37;
    }
  }
  else if (!a10)
  {
    goto LABEL_32;
  }
  MTPListGestureConfig_::addGestureToArray(Mutable, (__CFArray *)@"Fluid Dock", @"Vertical", @"Swipe", @" OnlyIfAllMoving", @"LockOnFirstUntilPause", 0, 0, v29);
  if (!a11)
  {
LABEL_33:
    if (a9) {
      goto LABEL_44;
    }
    goto LABEL_38;
  }
LABEL_37:
  MTPListGestureConfig_::addGestureToArray(Mutable, (__CFArray *)@"Fluid Dock", @"Scale", @"Polar Swipe", @" OnlyIfAllMoving", @"LockOnFirstUntilPause", 0, 0, v29);
  int v19 = a10;
  MTPListGestureConfig_::addGestureToArray(Mutable, (__CFArray *)@"Fluid Dock", @"Rotate", @"Polar Swipe", @" OnlyIfAllMoving", @"LockOnFirstUntilPause", 0, 0, v30);
  if (a9) {
    goto LABEL_44;
  }
LABEL_38:
  if (!v19)
  {
    if (a12) {
      goto LABEL_45;
    }
    goto LABEL_40;
  }
LABEL_44:
  MTPListGestureConfig_::addGestureToArray(Mutable, (__CFArray *)@"Fluid Dock", @"Tap", 0, 0, 0, 0, 0, v29);
  if (a12)
  {
LABEL_45:
    MTPListGestureConfig_::addGestureToArray(Mutable, (__CFArray *)@"Zoom Toggle", @"DoubleTap", 0, 0, 0, 0, 0, v29);
    if (!v27) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
LABEL_40:
  if (v27) {
LABEL_41:
  }
    MTPListGestureConfig_::addGestureToArray(Mutable, (__CFArray *)@"Show Definition", @"Tap", 0, 0, 0, 0, 0, v29);
LABEL_42:
  if ((v26 - 1) > 2) {
    CFStringRef v28 = @"ToMoreFingers FromFewerFingers ToFewerFingers FromMoreFingers FromMoreWithSlightIntegrationDelay";
  }
  else {
    CFStringRef v28 = off_141008[v26 - 1];
  }
  CFDictionaryAddValue(theDict, @"Transitions", v28);
  CFDictionaryAddValue(theDict, @"Gestures", Mutable);
  CFDictionaryAddValue(a1, v25, theDict);
  CFRelease(Mutable);

  CFRelease(theDict);
}

void __clang_call_terminate(void *a1)
{
}

uint64_t **std::__hash_table<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,HSUtil::CoderKey const*>,HSUtil::CoderKey::KeyStringHash,HSUtil::CoderKey::KeyStringEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,HSUtil::CoderKey const*>,HSUtil::CoderKey::KeyStringEqual,HSUtil::CoderKey::KeyStringHash,true>,std::allocator<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>>::find<char const*>(void *a1, const char **a2)
{
  unint64_t v2 = 0xCBF29CE484222325;
  uint64_t v3 = *a2;
  char v4 = **a2;
  if (v4)
  {
    uint64_t v5 = (unsigned __int8 *)(v3 + 1);
    do
    {
      unint64_t v2 = (0x100000001B3 * v2) ^ v4;
      int v6 = *v5++;
      char v4 = v6;
    }
    while (v6);
  }
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v2;
    if (v2 >= *(void *)&v7) {
      unint64_t v10 = v2 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v2;
  }
  v11 = *(uint64_t ****)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  for (i = *v11; i; i = (uint64_t **)*i)
  {
    unint64_t v13 = (unint64_t)i[1];
    if (v13 == v2)
    {
      if (!strcmp((const char *)i[2], v3)) {
        return i;
      }
    }
    else
    {
      if (v9 > 1)
      {
        if (v13 >= *(void *)&v7) {
          v13 %= *(void *)&v7;
        }
      }
      else
      {
        v13 &= *(void *)&v7 - 1;
      }
      if (v13 != v10) {
        return 0;
      }
    }
  }
  return i;
}

void std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
}

void sub_B61C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  result = std::logic_error::logic_error(a1, a2);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<HSUtil::CoderKey const*>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  id v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void *std::__hash_table<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,HSUtil::CoderKey const*>,HSUtil::CoderKey::KeyStringHash,HSUtil::CoderKey::KeyStringEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,HSUtil::CoderKey const*>,HSUtil::CoderKey::KeyStringEqual,HSUtil::CoderKey::KeyStringHash,true>,std::allocator<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(uint64_t a1, const char **a2, uint64_t a3, void **a4)
{
  unint64_t v6 = 0xCBF29CE484222325;
  int8x8_t v7 = *a2;
  char v8 = **a2;
  if (v8)
  {
    unint64_t v9 = (unsigned __int8 *)(v7 + 1);
    do
    {
      unint64_t v6 = (0x100000001B3 * v6) ^ v8;
      int v10 = *v9++;
      char v8 = v10;
    }
    while (v10);
  }
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v14 = v6;
      if (v6 >= v11) {
        unint64_t v14 = v6 % v11;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v6;
    }
    v15 = *(void ***)(*(void *)a1 + 8 * v14);
    if (v15)
    {
      for (i = *v15; i; i = *(void **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v6)
        {
          if (!strcmp(*((const char **)i + 2), v7)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  }
  i = operator new(0x20uLL);
  *(void *)i = 0;
  *((void *)i + 1) = v6;
  *((void *)i + 2) = **a4;
  *((void *)i + 3) = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    BOOL v20 = 1;
    if (v11 >= 3) {
      BOOL v20 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v11);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,HSUtil::CoderKey const*>,HSUtil::CoderKey::KeyStringHash,HSUtil::CoderKey::KeyStringEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,HSUtil::CoderKey const*>,HSUtil::CoderKey::KeyStringEqual,HSUtil::CoderKey::KeyStringHash,true>,std::allocator<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>>::__rehash<true>(a1, v23);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v6 >= v11) {
        unint64_t v14 = v6 % v11;
      }
      else {
        unint64_t v14 = v6;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v6;
    }
  }
  uint64_t v24 = *(void *)a1;
  v25 = *(void **)(*(void *)a1 + 8 * v14);
  if (v25)
  {
    *(void *)i = *v25;
LABEL_41:
    void *v25 = i;
    goto LABEL_42;
  }
  *(void *)i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v24 + 8 * v14) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v26 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v26 >= v11) {
        v26 %= v11;
      }
    }
    else
    {
      v26 &= v11 - 1;
    }
    v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_B92C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,HSUtil::CoderKey const*>,HSUtil::CoderKey::KeyStringHash,HSUtil::CoderKey::KeyStringEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,HSUtil::CoderKey const*>,HSUtil::CoderKey::KeyStringEqual,HSUtil::CoderKey::KeyStringHash,true>,std::allocator<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,HSUtil::CoderKey const*>,HSUtil::CoderKey::KeyStringHash,HSUtil::CoderKey::KeyStringEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,HSUtil::CoderKey const*>,HSUtil::CoderKey::KeyStringEqual,HSUtil::CoderKey::KeyStringHash,true>,std::allocator<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,HSUtil::CoderKey const*>,HSUtil::CoderKey::KeyStringHash,HSUtil::CoderKey::KeyStringEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,HSUtil::CoderKey const*>,HSUtil::CoderKey::KeyStringEqual,HSUtil::CoderKey::KeyStringHash,true>,std::allocator<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            void *v7 = *v11;
            void *v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            unint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    int v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void __cxx_global_var_init()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_currentTimestamp", a2);
  }
}

void __cxx_global_var_init_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_previousTimestamp", a2);
  }
}

void __cxx_global_var_init_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)114,(char)101,(char)108,(char)101,(char)97,(char)115,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_release", a2);
  }
}

void __cxx_global_var_init_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)97,(char)99,(char)116,(char)105,(char)118,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_activation", a2);
  }
}

void __cxx_global_var_init_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)101,(char)97,(char)114,(char)108,(char)105,(char)101,(char)115,(char)116,(char)78,(char)111,(char)110,(char)68,(char)105,(char)118,(char)105,(char)110,(char)103,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_earliestNonDivingTimestamp", a2);
  }
}

void __cxx_global_var_init_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)100,(char)105,(char)118,(char)105,(char)110,(char)103,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)67,(char)104,(char)97,(char)110,(char)103,(char)101,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_divingButtonChangeTimestamp", a2);
  }
}

void __cxx_global_var_init_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)105,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_min", a2);
  }
}

void __cxx_global_var_init_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_max", a2);
  }
}

void __cxx_global_var_init_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)66,(char)114,(char)101,(char)97,(char)107,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerBreakTouch_max", a2);
  }
}

void __cxx_global_var_init_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)82,(char)101,(char)115,(char)101,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentReset", a2);
  }
}

void __cxx_global_var_init_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)65,(char)99,(char)116,(char)105,(char)118,(char)105,(char)116,(char)121>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentButtonActivity", a2);
  }
}

void __cxx_global_var_init_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_firstFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_firstFingerCleanStartInRange", a2);
  }
}

void __cxx_global_var_init_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerCleanStartInRange", a2);
  }
}

void __cxx_global_var_init_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_previousRecentFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_18(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)78,(char)111,(char)110,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)100,(char)111,(char)119,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentNonThumbTouchdown", a2);
  }
}

void __cxx_global_var_init_19(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_restingThumbTouchDown", a2);
  }
}

void __cxx_global_var_init_20(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)84,(char)119,(char)111,(char)79,(char)114,(char)77,(char)111,(char)114,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentTwoOrMoreFingersTouching", a2);
  }
}

void __cxx_global_var_init_21(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)118,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFiveFingersTouching", a2);
  }
}

void __cxx_global_var_init_22(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)76,(char)105,(char)102,(char)116,(char)111,(char)102,(char)102>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerLiftoff", a2);
  }
}

void __cxx_global_var_init_23(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)69,(char)110,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerEnd", a2);
  }
}

void __cxx_global_var_init_24(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentScrollZoom", a2);
  }
}

void __cxx_global_var_init_25(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)119,(char)105,(char)116,(char)99,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentChordSwitch", a2);
  }
}

void __cxx_global_var_init_26(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentChordSlide", a2);
  }
}

void __cxx_global_var_init_27(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109,(char)83,(char)108,(char)105,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentScrollZoomSlide", a2);
  }
}

void __cxx_global_var_init_28(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)108,(char)117,(char)105,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentFluidSlide", a2);
  }
}

void __cxx_global_var_init_29(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)101,(char)120,(char)99,(char)101,(char)115,(char)115,(char)84,(char)97,(char)112,(char)77,(char)111,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_excessTapMotion", a2);
  }
}

void __cxx_global_var_init_30(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)104,(char)97,(char)110,(char)100,(char)95,(char)99,(char)104,(char)111,(char)114,(char)100,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"righthand_chords", a2);
  }
}

void __cxx_global_var_init_31(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)110,(char)97,(char)98,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"enable", a2);
  }
}

void __cxx_global_var_init_32(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointing", a2);
  }
}

void __cxx_global_var_init_33(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClick", a2);
  }
}

void __cxx_global_var_init_34(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)103,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragging", a2);
  }
}

void __cxx_global_var_init_35(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)76,(char)111,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragLock", a2);
  }
}

void __cxx_global_var_init_36(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointMomentum", a2);
  }
}

void __cxx_global_var_init_37(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)117,(char)108,(char)116,(char)105,(char)68,(char)114,(char)97,(char)103,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"multiDragMomentum", a2);
  }
}

void __cxx_global_var_init_38(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClick", a2);
  }
}

void __cxx_global_var_init_39(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)116,(char)105,(char)99,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"verticalScrolling", a2);
  }
}

void __cxx_global_var_init_40(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)104,(char)111,(char)114,(char)105,(char)122,(char)111,(char)110,(char)116,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"horizontalScrolling", a2);
  }
}

void __cxx_global_var_init_41(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)103,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"gestureScrollingEnabled", a2);
  }
}

void __cxx_global_var_init_42(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)65,(char)99,(char)99,(char)101,(char)108,(char)101,(char)114,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollAcceleration", a2);
  }
}

void __cxx_global_var_init_43(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoom", a2);
  }
}

void __cxx_global_var_init_44(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rotate", a2);
  }
}

void __cxx_global_var_init_45(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109,(char)84,(char)111,(char)103,(char)103,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoomToggle", a2);
  }
}

void __cxx_global_var_init_46(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)104,(char)111,(char)119,(char)68,(char)101,(char)102,(char)105,(char)110,(char)105,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"showDefinition", a2);
  }
}

void __cxx_global_var_init_47(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)52,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale4F", a2);
  }
}

void __cxx_global_var_init_48(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)53,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale5F", a2);
  }
}

void __cxx_global_var_init_49(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)100,(char)103,(char)101,(char)78,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"edgeNotificationSwipe2F", a2);
  }
}

void __cxx_global_var_init_50(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)67,(char)101,(char)110,(char)116,(char)101,(char)114,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"notificationCenter2F", a2);
  }
}

void __cxx_global_var_init_51(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)108,(char)105,(char)112,(char)76,(char)101,(char)102,(char)116,(char)65,(char)110,(char)100,(char)82,(char)105,(char)103,(char)104,(char)116,(char)69,(char)100,(char)103,(char)101,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"flipLeftAndRightEdgeGestures", a2);
  }
}

void __cxx_global_var_init_52(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollMomentumEnabled", a2);
  }
}

void __cxx_global_var_init_53(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsScrollMomentum", a2);
  }
}

void __cxx_global_var_init_54(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"restingScroll", a2);
  }
}

void __cxx_global_var_init_55(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)101,(char)101,(char)110,(char)90,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"screenZoom", a2);
  }
}

void __cxx_global_var_init_56(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)121,(char)109,(char)109,(char)101,(char)116,(char)114,(char)105,(char)99,(char)90,(char)111,(char)111,(char)109,(char)82,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"symmetricZoomRotate", a2);
  }
}

void __cxx_global_var_init_57(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107,(char)87,(char)104,(char)105,(char)108,(char)101,(char)82,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClickWhileResting", a2);
  }
}

void __cxx_global_var_init_58(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)111,(char)114,(char)99,(char)101,(char)83,(char)117,(char)112,(char)112,(char)114,(char)101,(char)115,(char)115,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"forceSuppressed", a2);
  }
}

void __cxx_global_var_init_59(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)90,(char)111,(char)110,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClickZone", a2);
  }
}

void __cxx_global_var_init_60(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)105,(char)114,(char)115,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"firstClickThreshold", a2);
  }
}

void __cxx_global_var_init_61(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)101,(char)99,(char)111,(char)110,(char)100,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"secondClickThreshold", a2);
  }
}

void __cxx_global_var_init_62(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)116,(char)114,(char)101,(char)110,(char)103,(char)116,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuationStrength", a2);
  }
}

void __cxx_global_var_init_63(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)101,(char)68,(char)101,(char)116,(char)101,(char)110,(char)116,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuateDetents", a2);
  }
}

void __cxx_global_var_init_64(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientation", a2);
  }
}

void __cxx_global_var_init_65(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110,(char)77,(char)111,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientationMode", a2);
  }
}

void __cxx_global_var_init_66(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_67(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_68(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_69(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_70(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_71(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_72(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_73(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_h", a2);
  }
}

void sub_CE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  _Unwind_Resume(a1);
}

void sub_CFD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_D09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MouseBridge;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_D1F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_D27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_D45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_D544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_D5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_D644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_D728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_D7EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_D8F0(_Unwind_Exception *a1)
{
  unint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_D994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HSUtil::Encoder::encodeHSCodable(HSUtil::Encoder *a1, const CoderKey *a2, void *a3)
{
  id v5 = a3;
  if (!*(_DWORD *)a1)
  {
    id v8 = v5;
    HSUtil::Encoder::_encodeKey(a1, a2);
    id v5 = v8;
    if (!*(_DWORD *)a1)
    {
      unsigned __int8 v6 = [v8 hsEncode:a1];
      char v7 = *(_DWORD *)a1 ? 1 : v6;
      id v5 = v8;
      if ((v7 & 1) == 0) {
        *(_DWORD *)a1 = 10;
      }
    }
  }
}

void sub_DA30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_DA98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void HSUtil::Decoder::decodeHSCodable(uint64_t a1, const CoderKey *a2, void *a3)
{
  id v5 = a3;
  if (*(int *)a1 <= 4)
  {
    unint64_t v6 = *(void *)(a1 + 72);
    HSUtil::Decoder::_findKey((const CoderKey *)a1, &v6, a2);
    if (!*(_DWORD *)a1)
    {
      HSUtil::Decoder::_readHSCodable(a1, &v6, v5);
      if (*(_DWORD *)a1 == 3) {
        *(_DWORD *)a1 = 13;
      }
      else {
        *(void *)(a1 + 72) = v6;
      }
    }
  }
}

void sub_DB44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_DCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t *HSUtil::Decoder::decodeMap@<X0>(unint64_t *this@<X0>, uint64_t a2@<X8>)
{
  if (*(int *)this < 5)
  {
    uint64_t v3 = this;
    unint64_t v10 = this[9];
    *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v8 = v4;
    long long v9 = v4;
    long long v6 = v4;
    long long v7 = v4;
    long long v5 = v4;
    HSUtil::Decoder::_readMap((HSUtil::Decoder *)this, &v10, (uint64_t)&v5);
    if (*(_DWORD *)v3)
    {
      *(_DWORD *)a2 = 5;
      *(void *)(a2 + 8) = a2;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)(a2 + 64) = 0u;
    }
    else
    {
      v3[9] = v10;
      HSUtil::Decoder::Decoder(a2, (uint64_t)&v5);
    }
    if ((void)v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v7);
    }
    this = (unint64_t *)v6;
    *(void *)&long long v6 = 0;
    if (this)
    {
      std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::~__value_func[abi:ne180100](this);
      operator delete();
    }
  }
  else
  {
    *(_DWORD *)a2 = 5;
    *(void *)(a2 + 8) = a2;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
  }
  return this;
}

void sub_DDBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void HSUtil::Decoder::~Decoder(HSUtil::Decoder *this)
{
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::unique_ptr<HSUtil::Decoder::Callbacks>::reset[abi:ne180100]((void **)this + 2, 0);
}

{
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::unique_ptr<HSUtil::Decoder::Callbacks>::~unique_ptr[abi:ne180100]((void **)this + 2);
}

uint64_t (***HSUtil::Encoder::_encodeKey(HSUtil::Encoder *this, const CoderKey *a2))(void)
{
  result = (uint64_t (***)(void))HSUtil::Encoder::_markKeyEncoded(this, a2);
  if (!*(_DWORD *)this)
  {
    unsigned int var1 = a2->var1;
    if (var1 > 0x4F)
    {
      if (var1 > 0xFF)
      {
        if (HIWORD(var1))
        {
          return HSUtil::Encoder::_writeTokenValue32((unint64_t *)this, 0x8Fu, var1);
        }
        else
        {
          return HSUtil::Encoder::_writeTokenValue16((unint64_t *)this, 0x8Eu, var1);
        }
      }
      else
      {
        return HSUtil::Encoder::_writeTokenValue8((unint64_t *)this, 0x8Du, var1);
      }
    }
    else
    {
      unsigned __int8 __src = var1 - 112;
      return HSUtil::Encoder::_write(this, (unint64_t *)this + 17, &__src, 1uLL);
    }
  }
  return result;
}

unint64_t HSUtil::Encoder::_markKeyEncoded(HSUtil::Encoder *this, const CoderKey *a2)
{
  unint64_t result = a2->var1;
  uint64_t v4 = *((void *)this + 10);
  if (result >= (*((void *)this + 11) - v4) >> 4)
  {
    unsigned int v6 = flsll(result);
    int v7 = 1 << v6;
    if (v6 < 6) {
      int v7 = 64;
    }
    std::vector<HSUtil::Encoder::KeyState>::resize((uint64_t)this + 80, v7);
    unint64_t result = a2->var1;
    uint64_t v4 = *((void *)this + 10);
  }
  uint64_t v8 = v4 + 16 * result;
  if (*(_DWORD *)v8)
  {
    int v9 = 0;
  }
  else
  {
    uint64_t v10 = *((void *)this + 17);
    uint64_t v11 = *((void *)this + 13);
    if (__CFADD__(v11, v10))
    {
      int v9 = 14;
    }
    else
    {
      int v9 = 0;
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = v11 + v10;
      *((unsigned char *)this + 112) = 1;
    }
  }
  *(_DWORD *)this = v9;
  return result;
}

uint64_t (***HSUtil::Encoder::_writeTokenValue8(unint64_t *a1, unsigned __int8 a2, unsigned __int8 a3))(void)
{
  unsigned __int8 __src = a2;
  unsigned __int8 v6 = a3;
  uint64_t v4 = a1 + 17;
  unint64_t result = HSUtil::Encoder::_write((HSUtil::Encoder *)a1, a1 + 17, &__src, 1uLL);
  if (!*(_DWORD *)a1) {
    return HSUtil::Encoder::_write((HSUtil::Encoder *)a1, v4, &v6, 1uLL);
  }
  return result;
}

uint64_t (***HSUtil::Encoder::_writeTokenValue16(unint64_t *a1, unsigned __int8 a2, __int16 a3))(void)
{
  unsigned __int8 __src = a2;
  *(_WORD *)unsigned __int8 v6 = a3;
  uint64_t v4 = a1 + 17;
  unint64_t result = HSUtil::Encoder::_write((HSUtil::Encoder *)a1, a1 + 17, &__src, 1uLL);
  if (!*(_DWORD *)a1) {
    return HSUtil::Encoder::_write((HSUtil::Encoder *)a1, v4, v6, 2uLL);
  }
  return result;
}

uint64_t (***HSUtil::Encoder::_writeTokenValue32(unint64_t *a1, unsigned __int8 a2, int a3))(void)
{
  unsigned __int8 __src = a2;
  *(_DWORD *)unsigned __int8 v6 = a3;
  uint64_t v4 = a1 + 17;
  unint64_t result = HSUtil::Encoder::_write((HSUtil::Encoder *)a1, a1 + 17, &__src, 1uLL);
  if (!*(_DWORD *)a1) {
    return HSUtil::Encoder::_write((HSUtil::Encoder *)a1, v4, v6, 4uLL);
  }
  return result;
}

void std::vector<HSUtil::Encoder::KeyState>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<HSUtil::Encoder::KeyState>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<HSUtil::Encoder::KeyState>::__append(void **a1, unint64_t a2)
{
  unsigned __int8 v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  long long v5 = v6;
  int v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HSUtil::Encoder::KeyState>>(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    unint64_t v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    float v18 = (char *)*a1;
    unint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      unint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<HSUtil::Encoder::KeyState>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

uint64_t (***HSUtil::Encoder::_write(HSUtil::Encoder *this, unint64_t *a2, const unsigned __int8 *__src, size_t __n))(void)
{
  uint64_t v7 = *((void *)this + 15);
  unint64_t v8 = *a2;
  if (v7 && ((unint64_t v9 = *((void *)this + 16), v11 = v9 >= v8, v10 = v9 - v8, v11) ? (v11 = v10 >= __n) : (v11 = 0), v11))
  {
    unint64_t result = (uint64_t (***)(void))memcpy((void *)(v7 + v8), __src, __n);
  }
  else
  {
    unint64_t result = (uint64_t (***)(void))(***((uint64_t (****)(void, unint64_t, const unsigned __int8 *, size_t))this
                                                  + 5))(*((void *)this + 5), v8, __src, __n);
    if (result) {
      BOOL v14 = 0;
    }
    else {
      BOOL v14 = v13 == __n;
    }
    if (!v14) {
      goto LABEL_10;
    }
    unint64_t result = (uint64_t (***)(void))*((void *)this + 6);
    if (result)
    {
      unint64_t result = (uint64_t (***)(void))(**result)(result);
      *((void *)this + 15) = result;
      if (!result)
      {
LABEL_10:
        int v15 = 7;
        goto LABEL_18;
      }
      unint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**((void **)this + 6) + 16))(*((void *)this + 6));
      *((void *)this + 16) = result;
    }
  }
  if (__CFADD__(*a2, __n))
  {
    int v15 = 14;
  }
  else
  {
    int v15 = 0;
    *a2 += __n;
  }
LABEL_18:
  *(_DWORD *)this = v15;
  return result;
}

const CoderKey *HSUtil::Decoder::_findKey(const CoderKey *this, unint64_t *a2, const CoderKey *a3)
{
  unint64_t v6 = *a2;
  unint64_t result = HSUtil::Decoder::_findKey(this, a2, 0xFFFFFFFFFFFFFFFFLL, a3);
  if (LODWORD(this->var0) == 1)
  {
    *a2 = 0;
    return HSUtil::Decoder::_findKey(this, a2, v6, a3);
  }
  return result;
}

void HSUtil::Decoder::_readHSCodable(uint64_t a1, unint64_t *a2, void *a3)
{
  id v5 = a3;
  unint64_t v6 = *a2;
  unint64_t v7 = HSUtil::Decoder::_skipElement((HSUtil::Decoder *)a1, a2);
  if (!*(_DWORD *)a1)
  {
    unint64_t v8 = v7;
    HSUtil::Decoder::_loadKeyTableIfNeeded((HSUtil::Decoder *)a1, a2);
    if (!*(_DWORD *)a1)
    {
      v12[1] = *(void *)(a1 + 8);
      v12[0] = 0xAAAAAAAA00000000;
      uint64_t v10 = *(void *)(a1 + 24);
      unint64_t v9 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v13 = 0;
      uint64_t v14 = v10;
      int v15 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v16 = *(_OWORD *)(a1 + 40);
      unint64_t v17 = *(void *)(a1 + 56) + v6;
      unint64_t v18 = v8;
      uint64_t v19 = 0;
      if (([v5 hsDecode:v12] & 1) == 0) {
        *(_DWORD *)a1 = 10;
      }
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      BOOL v11 = v13;
      uint64_t v13 = 0;
      if (v11)
      {
        std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::~__value_func[abi:ne180100](v11);
        operator delete();
      }
    }
  }
}

void sub_E5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HSUtil::Decoder::~Decoder((HSUtil::Decoder *)&a9);

  _Unwind_Resume(a1);
}

const CoderKey *HSUtil::Decoder::_findKey(const CoderKey *this, unint64_t *a2, unint64_t a3, const CoderKey *a4)
{
  unint64_t v7 = (uint64_t **)this;
  while (1)
  {
    if (*a2 >= a3) {
      goto LABEL_9;
    }
    this = (const CoderKey *)HSUtil::Decoder::_readKey(v7, a2);
    int v8 = *(_DWORD *)v7;
    if (*(_DWORD *)v7) {
      break;
    }
    if (this == a4)
    {
      int v9 = 0;
      goto LABEL_12;
    }
    this = (const CoderKey *)HSUtil::Decoder::_skipElement((HSUtil::Decoder *)v7, a2);
    if (*(_DWORD *)v7)
    {
      int v9 = 13;
      goto LABEL_12;
    }
  }
  if (v8 != 2)
  {
    if (v8 != 3) {
      return this;
    }
LABEL_9:
    int v9 = 1;
    goto LABEL_12;
  }
  int v9 = 12;
LABEL_12:
  *(_DWORD *)unint64_t v7 = v9;
  return this;
}

unint64_t HSUtil::Decoder::_readKey(uint64_t **this, unint64_t *a2)
{
  int Token = HSUtil::Decoder::_readToken((HSUtil::Decoder *)this, a2);
  if (*(_DWORD *)this) {
    return 0;
  }
  switch(Token)
  {
    case 141:
      unsigned __int8 v11 = 0;
      HSUtil::Decoder::_read(this, a2, &v11, 1uLL);
      int v5 = *(_DWORD *)this;
      unsigned int v6 = v11;
      goto LABEL_8;
    case 142:
      unsigned __int16 v12 = 0;
      HSUtil::Decoder::_read(this, a2, &v12, 2uLL);
      int v5 = *(_DWORD *)this;
      unsigned int v6 = v12;
LABEL_8:
      if (v5) {
        return 0;
      }
      goto LABEL_12;
    case 143:
      unsigned int __dst = 0;
      HSUtil::Decoder::_read(this, a2, &__dst, 4uLL);
      int v5 = *(_DWORD *)this;
      unsigned int v6 = __dst;
      goto LABEL_8;
  }
  unsigned int v6 = Token - 144;
  if ((Token - 144) < 0x50)
  {
    *(_DWORD *)this = 0;
LABEL_12:
    int v8 = this[3];
    if (v8 && (uint64_t v9 = *v8, v6 < (unint64_t)((this[3][1] - v9) >> 3))) {
      unint64_t result = atomic_load((unint64_t *)(v9 + 8 * v6));
    }
    else {
      unint64_t result = 0;
    }
    if (result) {
      int v10 = 0;
    }
    else {
      int v10 = 11;
    }
    goto LABEL_20;
  }
  unint64_t result = 0;
  int v10 = 2;
LABEL_20:
  *(_DWORD *)this = v10;
  return result;
}

unint64_t HSUtil::Decoder::_skipElement(HSUtil::Decoder *this, unint64_t *a2)
{
  unint64_t v4 = *a2;
  int Token = HSUtil::Decoder::_readToken(this, a2);
  if (*(_DWORD *)this) {
    return 0;
  }
  if ((Token - 224) > 0xF)
  {
    unint64_t v9 = 0;
    switch(Token)
    {
      case 128:
      case 132:
      case 141:
        unint64_t v9 = 1;
        break;
      case 129:
      case 133:
      case 142:
        unint64_t v9 = 2;
        break;
      case 130:
      case 134:
      case 136:
      case 143:
        unint64_t v9 = 4;
        break;
      case 131:
      case 135:
      case 137:
        unint64_t v9 = 8;
        break;
      default:
        break;
    }
  }
  else
  {
    int v7 = 1 << (Token + 32);
    if ((v7 & 0xC924) != 0)
    {
      unsigned int v17 = 0;
      HSUtil::Decoder::_read(this, a2, &v17, 4uLL);
      int v8 = *(_DWORD *)this;
      if (*(_DWORD *)this) {
        unint64_t v9 = 0;
      }
      else {
        unint64_t v9 = v17;
      }
    }
    else
    {
      if ((v7 & 0x1249) != 0)
      {
        unsigned __int8 __dst = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 1uLL);
        int v8 = *(_DWORD *)this;
        unint64_t v9 = __dst;
      }
      else
      {
        unsigned __int16 v16 = 0;
        HSUtil::Decoder::_read(this, a2, &v16, 2uLL);
        int v8 = *(_DWORD *)this;
        unint64_t v9 = v16;
      }
      if (v8) {
        unint64_t v9 = 0;
      }
    }
    if (v8) {
      return 0;
    }
  }
  unint64_t v10 = *((void *)this + 8);
  BOOL v11 = v10 >= *a2;
  unint64_t v12 = v10 - *a2;
  if (!v11)
  {
    int v13 = 6;
LABEL_24:
    unint64_t result = 0;
    *(_DWORD *)this = v13;
    return result;
  }
  if (v12 < v9)
  {
    int v13 = 13;
    goto LABEL_24;
  }
  unint64_t v14 = *a2 + v9;
  *a2 = v14;
  *(_DWORD *)this = 0;
  return v14 - v4;
}

uint64_t HSUtil::Decoder::_readToken(HSUtil::Decoder *this, unint64_t *a2)
{
  unsigned __int8 __dst = 0;
  HSUtil::Decoder::_read(this, a2, &__dst, 1uLL);
  unsigned __int8 v3 = __dst;
  if (*(_DWORD *)this) {
    unsigned __int8 v3 = 0;
  }
  if (*(_DWORD *)this == 13)
  {
    unsigned __int8 v3 = 0;
    *(_DWORD *)this = 3;
  }
  return v3;
}

void *HSUtil::Decoder::_read(void *this, unint64_t *a2, void *__dst, size_t __n)
{
  uint64_t v4 = (uint64_t)this;
  uint64_t v5 = *a2;
  unint64_t v6 = this[8];
  BOOL v7 = v6 >= *a2;
  size_t v8 = v6 - *a2;
  if (!v7) {
    goto LABEL_2;
  }
  if (v8 < __n) {
    goto LABEL_10;
  }
  this = (void *)this[5];
  if (!this) {
    goto LABEL_10;
  }
  uint64_t v13 = *(void *)(v4 + 48);
  uint64_t v12 = *(void *)(v4 + 56);
  if (v13)
  {
    this = memcpy(__dst, (const void *)(v13 + v12 + v5), __n);
LABEL_7:
    int v9 = 0;
    *a2 += __n;
    goto LABEL_11;
  }
  this = (void *)(*(uint64_t (**)(void *, uint64_t, void *, size_t))*this)(this, v12 + v5, __dst, __n);
  if (!this)
  {
    if (v14 == __n) {
      goto LABEL_7;
    }
LABEL_10:
    int v9 = 13;
    goto LABEL_11;
  }
LABEL_2:
  int v9 = 6;
LABEL_11:
  *(_DWORD *)uint64_t v4 = v9;
  return this;
}

HSUtil::Decoder *HSUtil::Decoder::_loadKeyTableIfNeeded(HSUtil::Decoder *this, unint64_t *a2)
{
  if (*((HSUtil::Decoder **)this + 1) == this)
  {
    unsigned __int8 v3 = this;
    unint64_t v4 = *a2;
    this = (HSUtil::Decoder *)HSUtil::Decoder::_readToken(this, &v4);
    if (*(_DWORD *)v3 == 3)
    {
      *(_DWORD *)unsigned __int8 v3 = 0;
    }
    else if (!*(_DWORD *)v3 && this == 239)
    {
      return (HSUtil::Decoder *)HSUtil::Decoder::_loadKeyTable(v3, a2);
    }
  }
  return this;
}

void *HSUtil::Decoder::_loadKeyTable(HSUtil::Decoder *this, unint64_t *a2)
{
  if (*((HSUtil::Decoder **)this + 1) != this) {
    HSUtil::Decoder::_loadKeyTable();
  }
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v28 = v3;
  long long v29 = v3;
  long long v26 = v3;
  long long v27 = v3;
  long long v25 = v3;
  HSUtil::Decoder::_readKeyTable(this, a2, (uint64_t)&v25);
  if (!*(_DWORD *)this)
  {
    while (1)
    {
      unint64_t v4 = HSUtil::Decoder::decodeUInt((HSUtil::Decoder *)&v25);
      if (v25) {
        break;
      }
      unint64_t v5 = v4;
      if (v4 >= 0x10000)
      {
        int v16 = 15;
        goto LABEL_28;
      }
      unint64_t v6 = (uint64_t *)*((void *)this + 3);
      if (!v6 || (uint64_t v7 = *v6, v4 >= (v6[1] - *v6) >> 3))
      {
        size_t v8 = (std::__shared_weak_count *)*((void *)this + 4);
        uint64_t v23 = *((void *)this + 3);
        uint64_t v24 = v8;
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unsigned int v9 = flsll(v4);
        int v10 = 1 << v9;
        if (v9 < 6) {
          int v10 = 64;
        }
        HSUtil::Decoder::_newKeys(&v23, v10, (void ***)v19);
        long long v11 = v19[0];
        v19[0] = 0uLL;
        uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 4);
        *(_OWORD *)((char *)this + 24) = v11;
        if (v12)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
          if (*((void *)&v19[0] + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19[0] + 1));
          }
        }
        if (v24) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
        uint64_t v7 = **((void **)this + 3);
      }
      if (atomic_load((unint64_t *)(v7 + 8 * v5)))
      {
        HSUtil::Decoder::skipElement((unint64_t *)&v25);
        if (v25)
        {
          if (v25 == 3)
          {
            int v16 = 13;
LABEL_28:
            *(_DWORD *)this = v16;
            goto LABEL_29;
          }
LABEL_26:
          int v16 = 12;
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)BOOL v20 = v14;
        long long v21 = v14;
        v19[0] = v14;
        v19[1] = v14;
        HSUtil::Decoder::decodeString((HSUtil::Decoder *)&v25, (uint64_t)v19);
        if (v25)
        {
          if (v25 == 3) {
            int v18 = 13;
          }
          else {
            int v18 = 12;
          }
          *(_DWORD *)this = v18;
          HSUtil::Buffer::~Buffer((HSUtil::Buffer *)v19);
          goto LABEL_29;
        }
        atomic_store((unint64_t)HSUtil::CoderKey::New(v20[1], v15), (unint64_t *)(**((void **)this + 3) + 8 * v5));
        HSUtil::Buffer::~Buffer((HSUtil::Buffer *)v19);
      }
    }
    if (v25 == 3)
    {
      *(_DWORD *)this = 0;
      goto LABEL_29;
    }
    goto LABEL_26;
  }
LABEL_29:
  if ((void)v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v27);
  }
  unint64_t result = (void *)v26;
  *(void *)&long long v26 = 0;
  if (result)
  {
    std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::~__value_func[abi:ne180100](result);
    operator delete();
  }
  return result;
}

void sub_ED08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  HSUtil::Decoder::~Decoder((HSUtil::Decoder *)va);
  _Unwind_Resume(a1);
}

double HSUtil::Decoder::_readKeyTable@<D0>(HSUtil::Decoder *this@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int Token = HSUtil::Decoder::_readToken(this, a2);
  if (!*(_DWORD *)this)
  {
    if (Token == 239)
    {
      unsigned int __dst = 0;
      HSUtil::Decoder::_read(this, a2, &__dst, 4uLL);
      if (*(_DWORD *)this) {
        unint64_t v7 = 0;
      }
      else {
        unint64_t v7 = __dst;
      }
      if (*(_DWORD *)this) {
        goto LABEL_11;
      }
      uint64_t v8 = *a2;
      unint64_t v9 = *((void *)this + 8);
      BOOL v10 = v9 >= *a2;
      unint64_t v11 = v9 - *a2;
      if (v10)
      {
        if (v11 >= v7)
        {
          *a2 = v8 + v7;
          *(_DWORD *)this = 0;
          *(void *)&double result = HSUtil::Decoder::Decoder((HSUtil::Decoder *)a3, this, v8, v7).n128_u64[0];
          return result;
        }
        int v12 = 13;
      }
      else
      {
        int v12 = 6;
      }
    }
    else
    {
      int v12 = 2;
    }
    *(_DWORD *)this = v12;
  }
LABEL_11:
  *(_DWORD *)a3 = 5;
  *(void *)(a3 + 8) = a3;
  double result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  return result;
}

unint64_t HSUtil::Decoder::decodeUInt(HSUtil::Decoder *this)
{
  if (*(int *)this > 4) {
    return 0;
  }
  unint64_t v3 = *((void *)this + 9);
  unint64_t result = HSUtil::Decoder::_readUInt(this, &v3);
  if (*(_DWORD *)this) {
    return 0;
  }
  *((void *)this + 9) = v3;
  return result;
}

void *HSUtil::Decoder::_newKeys@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, void ***a3@<X8>)
{
  unint64_t v9 = a2;
  *a3 = (void **)0xAAAAAAAAAAAAAAAALL;
  a3[1] = (void **)0xAAAAAAAAAAAAAAAALL;
  unint64_t result = std::allocate_shared[abi:ne180100]<std::vector<std::atomic<HSUtil::CoderKey const*>>,std::allocator<std::vector<std::atomic<HSUtil::CoderKey const*>>>,unsigned long &,void>(&v9, a3);
  uint64_t v6 = *a1;
  if (*a1)
  {
    unint64_t v7 = *(const void **)v6;
    unint64_t v8 = (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3;
    if (v8 >= v9) {
      unint64_t v8 = v9;
    }
    return memcpy(**a3, v7, 8 * v8);
  }
  return result;
}

void HSUtil::Decoder::decodeString(HSUtil::Decoder *this@<X0>, uint64_t a2@<X8>)
{
  if (*(int *)this < 5)
  {
    unint64_t v7 = *((void *)this + 9);
    unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v5[2] = v4;
    v5[3] = v4;
    v5[0] = v4;
    v5[1] = v4;
    HSUtil::Decoder::_readString(this, &v7, (uint64_t)v5);
    if (*(_DWORD *)this)
    {
      *(void *)a2 = &off_1410A8;
      *(void *)(a2 + 8) = &off_141100;
      *(void *)(a2 + 16) = &off_141120;
      *(void *)(a2 + 24) = &off_141138;
      *(void *)(a2 + 32) = off_141150;
      *(void *)(a2 + 4objc_storeStrong(&location, 0) = 0;
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + 56) = 0;
      *(unsigned char *)(a2 + 64) &= 0xFCu;
    }
    else
    {
      *((void *)this + 9) = v7;
      HSUtil::Buffer::Buffer(a2, (uint64_t)v5);
    }
    HSUtil::Buffer::~Buffer((HSUtil::Buffer *)v5);
  }
  else
  {
    *(void *)a2 = &off_1410A8;
    *(void *)(a2 + 8) = &off_141100;
    *(void *)(a2 + 16) = &off_141120;
    *(void *)(a2 + 24) = &off_141138;
    *(void *)(a2 + 32) = off_141150;
    *(void *)(a2 + 4objc_storeStrong(&location, 0) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
    *(unsigned char *)(a2 + 64) &= 0xFCu;
  }
}

void sub_F0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t *HSUtil::Decoder::skipElement(unint64_t *this)
{
  if (*(int *)this <= 4)
  {
    id v1 = this;
    unint64_t v2 = this[9];
    this = (unint64_t *)HSUtil::Decoder::_skipElement((HSUtil::Decoder *)this, &v2);
    if (!*(_DWORD *)v1) {
      v1[9] = v2;
    }
  }
  return this;
}

unint64_t HSUtil::Decoder::_readUInt(HSUtil::Decoder *this, unint64_t *a2)
{
  LOBYTE(result) = HSUtil::Decoder::_readToken(this, a2);
  if (!*(_DWORD *)this)
  {
    switch((char)result)
    {
      case -128:
        LOBYTE(__dst) = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 1uLL);
        int v5 = *(_DWORD *)this;
        unint64_t v6 = __dst;
        goto LABEL_11;
      case -127:
        LOWORD(__dst) = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 2uLL);
        int v5 = *(_DWORD *)this;
        unint64_t v6 = (unsigned __int16)__dst;
        goto LABEL_11;
      case -126:
        LODWORD(__dst) = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 4uLL);
        int v5 = *(_DWORD *)this;
        if (*(_DWORD *)this) {
          unint64_t result = 0;
        }
        else {
          unint64_t result = __dst;
        }
        goto LABEL_14;
      case -125:
        unint64_t __dst = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 8uLL);
        int v5 = *(_DWORD *)this;
        unint64_t v6 = __dst;
LABEL_11:
        if (v5) {
          unint64_t result = 0;
        }
        else {
          unint64_t result = v6;
        }
        goto LABEL_14;
      case -124:
        LOBYTE(__dst) = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 1uLL);
        int v5 = *(_DWORD *)this;
        unsigned __int8 v7 = __dst;
        if (*(_DWORD *)this) {
          unsigned __int8 v7 = 0;
        }
        if ((v7 & 0x80) != 0) {
          goto LABEL_42;
        }
        unint64_t result = v7;
        goto LABEL_14;
      case -123:
        LOWORD(__dst) = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 2uLL);
        int v5 = *(_DWORD *)this;
        unsigned __int16 v8 = __dst;
        if (*(_DWORD *)this) {
          unsigned __int16 v8 = 0;
        }
        if ((v8 & 0x8000) != 0)
        {
          unint64_t result = 0;
          *(_DWORD *)this = 2;
          return result;
        }
        unint64_t result = v8;
LABEL_14:
        if (v5) {
          return 0;
        }
        return result;
      case -122:
        LODWORD(__dst) = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 4uLL);
        int v5 = *(_DWORD *)this;
        if (*(_DWORD *)this) {
          unint64_t result = 0;
        }
        else {
          unint64_t result = __dst;
        }
        if ((result & 0x80000000) != 0) {
          goto LABEL_42;
        }
        goto LABEL_14;
      case -121:
        unint64_t __dst = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 8uLL);
        int v5 = *(_DWORD *)this;
        if (*(_DWORD *)this) {
          unint64_t result = 0;
        }
        else {
          unint64_t result = __dst;
        }
        if ((result & 0x8000000000000000) != 0) {
          goto LABEL_42;
        }
        goto LABEL_14;
      case -120:
        LODWORD(__dst) = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 4uLL);
        int v5 = *(_DWORD *)this;
        float v9 = *(float *)&__dst;
        if (*(_DWORD *)this) {
          float v9 = 0.0;
        }
        if (v9 < 0.0) {
          goto LABEL_42;
        }
        unint64_t result = (unint64_t)v9;
        goto LABEL_14;
      case -119:
        unint64_t __dst = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 8uLL);
        int v5 = *(_DWORD *)this;
        double v10 = *(double *)&__dst;
        if (*(_DWORD *)this) {
          double v10 = 0.0;
        }
        if (v10 < 0.0) {
          goto LABEL_42;
        }
        unint64_t result = (unint64_t)v10;
        goto LABEL_14;
      default:
        if (((char)result & 0x80000000) == 0) {
          return result;
        }
LABEL_42:
        unint64_t result = 0;
        *(_DWORD *)this = 2;
        return result;
    }
  }
  return 0;
}

void *std::allocate_shared[abi:ne180100]<std::vector<std::atomic<HSUtil::CoderKey const*>>,std::allocator<std::vector<std::atomic<HSUtil::CoderKey const*>>>,unsigned long &,void>@<X0>(unint64_t *a1@<X1>, void *a2@<X8>)
{
  long long v4 = operator new(0x30uLL);
  unint64_t result = std::__shared_ptr_emplace<std::vector<std::atomic<HSUtil::CoderKey const*>>>::__shared_ptr_emplace[abi:ne180100]<unsigned long &,std::allocator<std::vector<std::atomic<HSUtil::CoderKey const*>>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_F424(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<std::vector<std::atomic<HSUtil::CoderKey const*>>>::__shared_ptr_emplace[abi:ne180100]<unsigned long &,std::allocator<std::vector<std::atomic<HSUtil::CoderKey const*>>>,0>(void *a1, unint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_141058;
  std::vector<std::atomic<HSUtil::CoderKey const*>>::vector(a1 + 3, *a2);
  return a1;
}

void sub_F484(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_141058;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_141058;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void std::__shared_ptr_emplace<std::vector<std::atomic<HSUtil::CoderKey const*>>>::__on_zero_shared(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void *std::vector<std::atomic<HSUtil::CoderKey const*>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::atomic<HSUtil::CoderKey const*>>::__vallocate[abi:ne180100](a1, a2);
    long long v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_F584(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::atomic<HSUtil::CoderKey const*>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
  }
  unint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HSUtil::CoderKey const*>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void HSUtil::Decoder::_readString(HSUtil::Decoder *this@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((void *)this + 6)) {
    HSUtil::Decoder::_readStringByRef(this, a2, a3);
  }
  else {
    HSUtil::Decoder::_readStringByCopy(this, a2, a3);
  }
}

uint64_t HSUtil::Buffer::read(HSUtil::Buffer *this, unint64_t a2, void *__dst, size_t a4)
{
  uint64_t v4 = *((void *)this + 5);
  if (!v4) {
    return 22;
  }
  unint64_t v5 = *((void *)this + 6);
  BOOL v6 = v5 >= a2;
  size_t v7 = v5 - a2;
  if (!v6) {
    return 34;
  }
  if (v7 >= a4) {
    size_t v9 = a4;
  }
  else {
    size_t v9 = v7;
  }
  memmove(__dst, (const void *)(v4 + a2), v9);
  return 0;
}

uint64_t HSUtil::Buffer::readLength(HSUtil::Buffer *this)
{
  if (*((void *)this + 5)) {
    return 0;
  }
  else {
    return 22;
  }
}

uint64_t HSUtil::Buffer::write(HSUtil::Buffer *this, uint64_t a2, const void *a3, size_t a4)
{
  if (*((void *)this + 5))
  {
    if (__CFADD__(a2, a4))
    {
      LODWORD(result) = 34;
    }
    else
    {
      size_t v8 = a4 + a2;
      LODWORD(result) = HSUtil::Buffer::_expandCapacity(this, a4 + a2);
      if (!result)
      {
        memmove((void *)(*((void *)this + 5) + a2), a3, a4);
        LODWORD(result) = 0;
        if (v8 > *((void *)this + 6)) {
          *((void *)this + 6) = v8;
        }
      }
    }
  }
  else
  {
    return &dword_14 + 2;
  }
  return result;
}

uint64_t HSUtil::Buffer::writeLength(HSUtil::Buffer *this, unint64_t a2)
{
  if (!*((void *)this + 5)) {
    return 22;
  }
  if (*((void *)this + 7) < a2) {
    HSUtil::Buffer::writeLength();
  }
  uint64_t result = 0;
  *((void *)this + 6) = a2;
  return result;
}

unint64_t HSUtil::Buffer::readFrom(HSUtil::Buffer *this, uint64_t a2, HSUtil::IO::Readable *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    if (__CFADD__(a2, a5))
    {
      unint64_t v5 = 0;
      LODWORD(v11) = 34;
    }
    else
    {
      LODWORD(v11) = HSUtil::Buffer::_expandCapacity(this, a5 + a2);
      if (v11)
      {
        unint64_t v5 = 0;
      }
      else
      {
        unint64_t v11 = (**(uint64_t (***)(HSUtil::IO::Readable *, uint64_t, uint64_t, uint64_t))a3)(a3, a4, *((void *)this + 5) + a2, a5);
        unint64_t v5 = HIDWORD(v11);
        if (!v11)
        {
          LODWORD(v11) = 0;
          if ((unint64_t)(v12 + a2) > *((void *)this + 6)) {
            *((void *)this + 6) = v12 + a2;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v11 = (unint64_t)&dword_14 + 2;
  }
  return v11 | (v5 << 32);
}

unint64_t HSUtil::Buffer::writeTo(HSUtil::Buffer *this, unint64_t a2, Writable *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    unint64_t v6 = *((void *)this + 6);
    BOOL v7 = v6 >= a2;
    unint64_t v8 = v6 - a2;
    if (v7)
    {
      if (v8 >= a5) {
        unint64_t v8 = a5;
      }
      uint64_t v11 = ((uint64_t (*)(Writable *, uint64_t, unint64_t, unint64_t))*a3->var0)(a3, a4, v5 + a2, v8);
      unint64_t v9 = v11 & 0xFFFFFFFF00000000;
      uint64_t v10 = v11;
    }
    else
    {
      unint64_t v9 = 0;
      uint64_t v10 = 34;
    }
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v10 = 22;
  }
  return v10 | v9;
}

uint64_t HSUtil::Buffer::memory(HSUtil::Buffer *this)
{
  return *((void *)this + 5);
}

uint64_t HSUtil::Buffer::memoryReadableLength(HSUtil::Buffer *this)
{
  if (*((void *)this + 5)) {
    return *((void *)this + 6);
  }
  else {
    return 0;
  }
}

uint64_t HSUtil::Buffer::memoryWritableLength(HSUtil::Buffer *this)
{
  if (*((void *)this + 5)) {
    return *((void *)this + 7);
  }
  else {
    return 0;
  }
}

uint64_t non-virtual thunk to'HSUtil::Buffer::write(HSUtil::Buffer *this, uint64_t a2, const void *a3, size_t a4)
{
  return HSUtil::Buffer::write((HSUtil::Buffer *)((char *)this - 8), a2, a3, a4);
}

uint64_t non-virtual thunk to'HSUtil::Buffer::writeLength(HSUtil::Buffer *this, unint64_t a2)
{
  return HSUtil::Buffer::writeLength((HSUtil::Buffer *)((char *)this - 8), a2);
}

unint64_t non-virtual thunk to'HSUtil::Buffer::readFrom(HSUtil::Buffer *this, uint64_t a2, HSUtil::IO::Readable *a3, uint64_t a4, uint64_t a5)
{
  return HSUtil::Buffer::readFrom((HSUtil::Buffer *)((char *)this - 16), a2, a3, a4, a5);
}

unint64_t non-virtual thunk to'HSUtil::Buffer::writeTo(HSUtil::Buffer *this, unint64_t a2, Writable *a3, uint64_t a4, unint64_t a5)
{
  return HSUtil::Buffer::writeTo((HSUtil::Buffer *)((char *)this - 24), a2, a3, a4, a5);
}

uint64_t non-virtual thunk to'HSUtil::Buffer::memory(HSUtil::Buffer *this)
{
  return *((void *)this + 1);
}

uint64_t non-virtual thunk to'HSUtil::Buffer::memoryReadableLength(HSUtil::Buffer *this)
{
  if (*((void *)this + 1)) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t non-virtual thunk to'HSUtil::Buffer::memoryWritableLength(HSUtil::Buffer *this)
{
  if (*((void *)this + 1)) {
    return *((void *)this + 3);
  }
  else {
    return 0;
  }
}

uint64_t HSUtil::Buffer::_expandCapacity(HSUtil::Buffer *this, unint64_t a2)
{
  if (*((void *)this + 7) >= a2) {
    return 0;
  }
  if (*((_UNKNOWN **)this + 5) == HSUtil::Buffer::_EmptyData) {
    unint64_t v3 = 0;
  }
  else {
    unint64_t v3 = (void *)*((void *)this + 5);
  }
  char v4 = *((unsigned char *)this + 64);
  uint64_t result = 1;
  if ((v3 == 0) | v4 & 1 && (v4 & 2) == 0)
  {
    unsigned int v6 = flsll(a2 - 1);
    uint64_t v7 = 1 << v6;
    if ((unint64_t)(1 << v6) <= 0x10) {
      uint64_t v7 = 16;
    }
    if (v6 > 0x3F) {
      size_t v8 = -1;
    }
    else {
      size_t v8 = v7;
    }
    unint64_t v9 = malloc_type_realloc(v3, v8, 0x89D545C7uLL);
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t result = 0;
      *((void *)this + 5) = v10;
      *((void *)this + 7) = v8;
      *((unsigned char *)this + 64) |= 1u;
    }
    else
    {
      return 12;
    }
  }
  return result;
}

unint64_t HSUtil::Decoder::_readStringByRef@<X0>(HSUtil::Decoder *this@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result = HSUtil::Decoder::_readStringLength(this, a2);
  if (*(_DWORD *)this) {
    goto LABEL_9;
  }
  unint64_t v7 = *a2;
  unint64_t v8 = *((void *)this + 8);
  BOOL v9 = v8 >= *a2;
  unint64_t v10 = v8 - *a2;
  if (!v9)
  {
    int v11 = 6;
LABEL_8:
    *(_DWORD *)this = v11;
LABEL_9:
    *(void *)a3 = &off_1410A8;
    *(void *)(a3 + 8) = &off_141100;
    *(void *)(a3 + 16) = &off_141120;
    *(void *)(a3 + 24) = &off_141138;
    *(void *)(a3 + 32) = off_141150;
    *(void *)(a3 + 4objc_storeStrong(&location, 0) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    *(unsigned char *)(a3 + 64) &= 0xFCu;
    return result;
  }
  if (v10 < result)
  {
    int v11 = 13;
    goto LABEL_8;
  }
  *a2 = v7 + result;
  *(_DWORD *)this = 0;
  uint64_t v12 = *((void *)this + 6) + *((void *)this + 7) + v7;
  if (*(unsigned char *)(result + v12 - 1))
  {
    int v11 = 12;
    goto LABEL_8;
  }

  return HSUtil::Buffer::Buffer(a3, v12, result);
}

void HSUtil::Decoder::_readStringByCopy(HSUtil::Decoder *this@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t StringLength = HSUtil::Decoder::_readStringLength(this, a2);
  if (*(_DWORD *)this)
  {
    *(void *)a3 = &off_1410A8;
    *(void *)(a3 + 8) = &off_141100;
    *(void *)(a3 + 16) = &off_141120;
    *(void *)(a3 + 24) = &off_141138;
    *(void *)(a3 + 32) = off_141150;
    *(void *)(a3 + 4objc_storeStrong(&location, 0) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    *(unsigned char *)(a3 + 64) &= 0xFCu;
    return;
  }
  size_t v7 = StringLength;
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)unint64_t __dst = v8;
  long long v11 = v8;
  v9[0] = v8;
  v9[1] = v8;
  HSUtil::Buffer::Buffer((HSUtil::Buffer *)v9, v7, v7);
  HSUtil::Decoder::_read(this, a2, __dst[1], v7);
  if (!*(_DWORD *)this)
  {
    if (!*((unsigned char *)__dst[1] + v7 - 1))
    {
      HSUtil::Buffer::Buffer(a3, (uint64_t)v9);
      goto LABEL_7;
    }
    *(_DWORD *)this = 12;
  }
  *(void *)a3 = &off_1410A8;
  *(void *)(a3 + 8) = &off_141100;
  *(void *)(a3 + 16) = &off_141120;
  *(void *)(a3 + 24) = &off_141138;
  *(void *)(a3 + 32) = off_141150;
  *(void *)(a3 + 4objc_storeStrong(&location, 0) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(unsigned char *)(a3 + 64) &= 0xFCu;
LABEL_7:
  HSUtil::Buffer::~Buffer((HSUtil::Buffer *)v9);
}

void sub_FE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t HSUtil::Decoder::_readStringLength(HSUtil::Decoder *this, unint64_t *a2)
{
  int Token = HSUtil::Decoder::_readToken(this, a2);
  if (!*(_DWORD *)this)
  {
    if (Token == 226)
    {
      unsigned int v11 = 0;
      HSUtil::Decoder::_read(this, a2, &v11, 4uLL);
      if (*(_DWORD *)this) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = v11;
      }
      if (*(_DWORD *)this) {
        return 0;
      }
    }
    else
    {
      if (Token == 225)
      {
        unsigned __int16 v10 = 0;
        HSUtil::Decoder::_read(this, a2, &v10, 2uLL);
        int v5 = *(_DWORD *)this;
        uint64_t v6 = v10;
      }
      else
      {
        if (Token != 224)
        {
          int v8 = 2;
          goto LABEL_20;
        }
        unsigned __int8 __dst = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 1uLL);
        int v5 = *(_DWORD *)this;
        uint64_t v6 = __dst;
      }
      if (v5) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = v6;
      }
      if (v5) {
        return 0;
      }
    }
    if (result) {
      return result;
    }
    int v8 = 12;
LABEL_20:
    uint64_t result = 0;
    *(_DWORD *)this = v8;
    return result;
  }
  return 0;
}

uint64_t HSUtil::Buffer::Buffer(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)uint64_t result = &off_1410A8;
  *(void *)(result + 8) = &off_141100;
  *(void *)(result + 16) = &off_141120;
  *(void *)(result + 24) = &off_141138;
  unint64_t v3 = HSUtil::Buffer::_EmptyData;
  *(void *)(result + 32) = off_141150;
  *(void *)(result + 4objc_storeStrong(&location, 0) = v3;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(unsigned char *)(result + 64) &= 0xFCu;
  if (!a2 && a3) {
    HSUtil::Buffer::Buffer();
  }
  if (a3)
  {
    *(void *)(result + 4objc_storeStrong(&location, 0) = a2;
    *(void *)(result + 48) = a3;
    *(void *)(result + 56) = a3;
  }
  return result;
}

HSUtil::Buffer *HSUtil::Buffer::Buffer(HSUtil::Buffer *this, size_t size, size_t a3)
{
  *(void *)this = &off_1410A8;
  *((void *)this + 1) = &off_141100;
  *((void *)this + 2) = &off_141120;
  *((void *)this + 3) = &off_141138;
  unint64_t v3 = HSUtil::Buffer::_EmptyData;
  *((void *)this + 4) = off_141150;
  *((void *)this + 5) = v3;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((unsigned char *)this + 64) &= 0xFCu;
  if (a3 > size) {
    HSUtil::Buffer::Buffer();
  }
  if (!size) {
    goto LABEL_5;
  }
  size_t v7 = malloc_type_malloc(size, 0x141EFFADuLL);
  *((void *)this + 5) = v7;
  if (v7)
  {
    *((unsigned char *)this + 64) |= 1u;
LABEL_5:
    *((void *)this + 6) = a3;
    *((void *)this + 7) = size;
  }
  return this;
}

__n128 HSUtil::Buffer::Buffer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1410A8;
  *(void *)(a1 + 8) = &off_141100;
  *(void *)(a1 + 16) = &off_141120;
  *(void *)(a1 + 24) = &off_141138;
  unint64_t v2 = HSUtil::Buffer::_EmptyData;
  *(void *)(a1 + 32) = off_141150;
  *(void *)(a1 + 4objc_storeStrong(&location, 0) = v2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) &= 0xFCu;
  __n128 result = *(__n128 *)(a2 + 40);
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  *(__n128 *)(a1 + 4objc_storeStrong(&location, 0) = result;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 4objc_storeStrong(&location, 0) = v2;
  *(unsigned char *)(a2 + 64) = 0;
  return result;
}

void HSUtil::Buffer::~Buffer(HSUtil::Buffer *this)
{
  *(void *)this = &off_1410A8;
  *((void *)this + 1) = &off_141100;
  *((void *)this + 2) = &off_141120;
  *((void *)this + 3) = &off_141138;
  *((void *)this + 4) = off_141150;
  if (*((unsigned char *)this + 64))
  {
    free(*((void **)this + 5));
    *((void *)this + 5) = 0;
  }
}

{
  HSUtil::Buffer::~Buffer(this);
}

__n128 HSUtil::Decoder::Decoder(HSUtil::Decoder *this, HSUtil::Decoder *a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)this = 0;
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)this + 2) = 0;
  uint64_t v4 = *((void *)a2 + 4);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)this + 4) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)((char *)a2 + 40);
  *(__n128 *)((char *)this + 4objc_storeStrong(&location, 0) = result;
  *((void *)this + 7) = *((void *)a2 + 7) + a3;
  *((void *)this + 8) = a4;
  *((void *)this + 9) = 0;
  return result;
}

uint64_t (***HSUtil::Encoder::_encodeMapStart(unint64_t *a1, int a2))(void)
{
  uint64_t v4 = (uint64_t)(a1 + 9);
  unint64_t v5 = a1[9];
  unint64_t v6 = a1[17];
  size_t v7 = (char *)a1[8];
  if ((unint64_t)v7 >= v5)
  {
    BOOL v9 = (void **)(a1 + 7);
    unsigned __int16 v10 = (char *)a1[7];
    uint64_t v11 = (v7 - v10) >> 4;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60) {
      std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v5 - (void)v10;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HSUtil::Encoder::KeyState>>(v4, v14);
      unsigned __int16 v10 = (char *)a1[7];
      size_t v7 = (char *)a1[8];
    }
    else
    {
      int v15 = 0;
    }
    int v16 = &v15[16 * v11];
    unsigned int v17 = &v15[16 * v14];
    *(void *)int v16 = v6;
    *((_DWORD *)v16 + 2) = a2;
    unint64_t v8 = (unint64_t)(v16 + 16);
    if (v7 != v10)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v7 - 1);
        v16 -= 16;
        v7 -= 16;
      }
      while (v7 != v10);
      unsigned __int16 v10 = (char *)*v9;
    }
    a1[7] = (unint64_t)v16;
    a1[8] = v8;
    a1[9] = (unint64_t)v17;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *(void *)size_t v7 = v6;
    *((_DWORD *)v7 + 2) = a2;
    unint64_t v8 = (unint64_t)(v7 + 16);
  }
  a1[8] = v8;
  switch(a2)
  {
    case 4:
      return HSUtil::Encoder::_writeTokenValue32(a1, 0xEBu, 0);
    case 2:
      return HSUtil::Encoder::_writeTokenValue16(a1, 0xEAu, 0);
    case 1:
      return HSUtil::Encoder::_writeTokenValue8(a1, 0xE9u, 0);
    default:
      abort();
  }
}

uint64_t (***HSUtil::Encoder::_encodeContainerStop(uint64_t (***this)(void)))(void)
{
  uint64_t v1 = (uint64_t)this;
  unint64_t v2 = this[8];
  uint64_t v3 = (uint64_t)*(v2 - 2);
  unint64_t v20 = v3 + 1;
  uint64_t v4 = *((unsigned int *)v2 - 2);
  unint64_t v5 = (unint64_t)this[17] + ~v3 - v4;
  if (v4 == 4)
  {
    if (v5 < 0xFFFFFFFF)
    {
      int v17 = ~v3 - v4 + *((_DWORD *)this + 34);
      unint64_t v6 = (unsigned __int8 *)&v17;
      size_t v7 = 4;
      goto LABEL_11;
    }
LABEL_9:
    *(_DWORD *)this = 9;
    return this;
  }
  if (v4 == 2)
  {
    if (v5 < 0xFFFF)
    {
      *(_WORD *)unsigned __int8 __src = ~(_WORD)v3 - v4 + *((_WORD *)this + 68);
      unint64_t v6 = __src;
      size_t v7 = 2;
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  if (v4 != 1) {
    abort();
  }
  if (v5 >= 0xFF) {
    goto LABEL_9;
  }
  char v19 = ~(_BYTE)v3 - v4 + *((unsigned char *)this + 136);
  unint64_t v6 = (unsigned __int8 *)&v19;
  size_t v7 = 1;
LABEL_11:
  this = HSUtil::Encoder::_write((HSUtil::Encoder *)this, &v20, v6, v7);
  if (!*(_DWORD *)v1)
  {
    uint64_t v8 = *(void *)(v1 + 56);
    uint64_t v9 = *(void *)(v1 + 64) - 16;
    *(void *)(v1 + 64) = v9;
    if (v9 == v8)
    {
      if (*(unsigned char *)(v1 + 112))
      {
        this = HSUtil::Encoder::_encodeKeyTableStart((HSUtil::Encoder *)v1);
        if (!*(_DWORD *)v1)
        {
          uint64_t v10 = *(void *)(v1 + 88) - *(void *)(v1 + 80);
          if (v10)
          {
            unint64_t v11 = 0;
            unint64_t v12 = 0;
            unint64_t v13 = v10 >> 4;
            while (1)
            {
              unint64_t v14 = (_DWORD *)(*(void *)(v1 + 80) + 16 * v11);
              if (*v14 == 1)
              {
                *unint64_t v14 = 2;
                uint64_t v15 = HSUtil::CoderKey::_KeyForKeyID(v12);
                if (!v15) {
                  HSUtil::Encoder::_encodeContainerStop();
                }
                int v16 = (const char **)v15;
                this = HSUtil::Encoder::_encodeUInt((HSUtil::Encoder *)v1, v11);
                if (*(_DWORD *)v1) {
                  break;
                }
                this = HSUtil::Encoder::_encodeString((HSUtil::Encoder *)v1, *v16);
                if (*(_DWORD *)v1) {
                  break;
                }
              }
              unint64_t v11 = (v12 + 1);
              unint64_t v12 = (HSUtil::CoderKey *)v11;
              if (v13 <= v11) {
                goto LABEL_23;
              }
            }
          }
          else
          {
LABEL_23:
            *(unsigned char *)(v1 + 112) = 0;
            return (uint64_t (***)(void))HSUtil::Encoder::_encodeContainerStop((HSUtil::Encoder *)v1);
          }
        }
      }
    }
  }
  return this;
}

uint64_t (***HSUtil::Encoder::_encodeKeyTableStart(HSUtil::Encoder *this))(void)
{
  unint64_t v2 = (char *)this + 72;
  unint64_t v3 = *((void *)this + 9);
  uint64_t v4 = *((void *)this + 17);
  unint64_t v5 = (char *)*((void *)this + 8);
  if ((unint64_t)v5 >= v3)
  {
    size_t v7 = (void **)((char *)this + 56);
    uint64_t v8 = (char *)*((void *)this + 7);
    uint64_t v9 = (v5 - v8) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v3 - (void)v8;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HSUtil::Encoder::KeyState>>((uint64_t)v2, v12);
      uint64_t v8 = (char *)*((void *)this + 7);
      unint64_t v5 = (char *)*((void *)this + 8);
    }
    else
    {
      unint64_t v13 = 0;
    }
    unint64_t v14 = &v13[16 * v9];
    uint64_t v15 = &v13[16 * v12];
    *(void *)unint64_t v14 = v4;
    *((_DWORD *)v14 + 2) = 4;
    unint64_t v6 = v14 + 16;
    if (v5 != v8)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v5 - 1);
        v14 -= 16;
        v5 -= 16;
      }
      while (v5 != v8);
      uint64_t v8 = (char *)*v7;
    }
    *((void *)this + 7) = v14;
    *((void *)this + 8) = v6;
    *((void *)this + 9) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(void *)unint64_t v5 = v4;
    *((_DWORD *)v5 + 2) = 4;
    unint64_t v6 = v5 + 16;
  }
  *((void *)this + 8) = v6;

  return HSUtil::Encoder::_writeTokenValue32((unint64_t *)this, 0xEFu, 0);
}

uint64_t HSUtil::CoderKey::_KeyForKeyID(HSUtil::CoderKey *this)
{
  unsigned int v1 = this;
  unint64_t v2 = (os_unfair_lock_s *)HSUtil::CoderKey::keyState(this);
  os_unfair_lock_lock(v2);
  uint64_t v3 = *(void *)&v2[2]._os_unfair_lock_opaque;
  if (v1 >= (unint64_t)((*(void *)&v2[4]._os_unfair_lock_opaque - v3) >> 3)) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *(void *)(v3 + 8 * v1);
  }
  os_unfair_lock_unlock(v2);
  return v4;
}

uint64_t (***HSUtil::Encoder::_encodeUInt(HSUtil::Encoder *this, unint64_t a2))(void)
{
  if (a2 > 0x7F)
  {
    if (a2 > 0xFF)
    {
      if (a2 >> 16)
      {
        if (HIDWORD(a2))
        {
          return HSUtil::Encoder::_writeTokenValue64((unint64_t *)this, 0x83u, a2);
        }
        else
        {
          return HSUtil::Encoder::_writeTokenValue32((unint64_t *)this, 0x82u, a2);
        }
      }
      else
      {
        return HSUtil::Encoder::_writeTokenValue16((unint64_t *)this, 0x81u, a2);
      }
    }
    else
    {
      return HSUtil::Encoder::_writeTokenValue8((unint64_t *)this, 0x80u, a2);
    }
  }
  else
  {
    uint64_t v6 = v2;
    uint64_t v7 = v3;
    unsigned __int8 v5 = a2;
    return HSUtil::Encoder::_write(this, (unint64_t *)this + 17, &v5, 1uLL);
  }
}

uint64_t (***HSUtil::Encoder::_encodeString(HSUtil::Encoder *this, const char *__s))(void)
{
  __n128 result = (uint64_t (***)(void))strlen(__s);
  if (result == (uint64_t (***)(void))-1)
  {
    *(_DWORD *)this = 14;
  }
  else
  {
    size_t v5 = (size_t)result + 1;
    if ((unint64_t)result > 0xFE)
    {
      if ((unint64_t)result > 0xFFFE) {
        __n128 result = HSUtil::Encoder::_writeTokenValue32((unint64_t *)this, 0xE2u, v5);
      }
      else {
        __n128 result = HSUtil::Encoder::_writeTokenValue16((unint64_t *)this, 0xE1u, v5);
      }
    }
    else
    {
      __n128 result = HSUtil::Encoder::_writeTokenValue8((unint64_t *)this, 0xE0u, v5);
    }
    if (!*(_DWORD *)this)
    {
      return HSUtil::Encoder::_write(this, (unint64_t *)this + 17, (const unsigned __int8 *)__s, v5);
    }
  }
  return result;
}

uint64_t (***HSUtil::Encoder::_writeTokenValue64(unint64_t *a1, unsigned __int8 a2, uint64_t a3))(void)
{
  unsigned __int8 __src = a2;
  *(void *)uint64_t v6 = a3;
  uint64_t v4 = a1 + 17;
  __n128 result = HSUtil::Encoder::_write((HSUtil::Encoder *)a1, a1 + 17, &__src, 1uLL);
  if (!*(_DWORD *)a1) {
    return HSUtil::Encoder::_write((HSUtil::Encoder *)a1, v4, v6, 8uLL);
  }
  return result;
}

double HSUtil::Decoder::_readMap@<D0>(HSUtil::Decoder *this@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int Token = HSUtil::Decoder::_readToken(this, a2);
  if (*(_DWORD *)this) {
    goto LABEL_22;
  }
  if (Token == 235)
  {
    unsigned int v18 = 0;
    HSUtil::Decoder::_read(this, a2, &v18, 4uLL);
    if (*(_DWORD *)this) {
      unint64_t v9 = 0;
    }
    else {
      unint64_t v9 = v18;
    }
    if (*(_DWORD *)this) {
      goto LABEL_22;
    }
  }
  else
  {
    if (Token == 234)
    {
      unsigned __int16 v17 = 0;
      HSUtil::Decoder::_read(this, a2, &v17, 2uLL);
      int v7 = *(_DWORD *)this;
      unint64_t v8 = v17;
    }
    else
    {
      if (Token != 233)
      {
        int v14 = 2;
        goto LABEL_21;
      }
      unsigned __int8 __dst = 0;
      HSUtil::Decoder::_read(this, a2, &__dst, 1uLL);
      int v7 = *(_DWORD *)this;
      unint64_t v8 = __dst;
    }
    if (v7) {
      unint64_t v9 = 0;
    }
    else {
      unint64_t v9 = v8;
    }
    if (v7) {
      goto LABEL_22;
    }
  }
  uint64_t v10 = *a2;
  unint64_t v11 = *((void *)this + 8);
  BOOL v12 = v11 >= *a2;
  unint64_t v13 = v11 - *a2;
  if (!v12)
  {
    int v14 = 6;
LABEL_21:
    *(_DWORD *)this = v14;
LABEL_22:
    *(_DWORD *)a3 = 5;
    *(void *)(a3 + 8) = a3;
    double result = 0.0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    return result;
  }
  if (v13 < v9)
  {
    int v14 = 13;
    goto LABEL_21;
  }
  *a2 = v10 + v9;
  *(_DWORD *)this = 0;
  HSUtil::Decoder::_loadKeyTableIfNeeded(this, a2);
  if (*(_DWORD *)this) {
    goto LABEL_22;
  }
  *(void *)&double result = HSUtil::Decoder::Decoder((HSUtil::Decoder *)a3, this, v10, v9).n128_u64[0];
  return result;
}

uint64_t HSUtil::Decoder::Decoder(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = a1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  HSUtil::Decoder::operator=(a1, a2);
  return a1;
}

{
  HSUtil::Decoder::Decoder(a1, a2);
  return a1;
}

void sub_10B84(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 32);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::unique_ptr<HSUtil::Decoder::Callbacks>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t HSUtil::Decoder::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4 == a2) {
    uint64_t v4 = a1;
  }
  *(void *)(a1 + 8) = v4;
  size_t v5 = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  std::unique_ptr<HSUtil::Decoder::Callbacks>::reset[abi:ne180100]((void **)(a1 + 16), v5);
  long long v6 = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  int v7 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = v6;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  *(_OWORD *)(a1 + 4objc_storeStrong(&location, 0) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

void *std::unique_ptr<HSUtil::Decoder::Callbacks>::reset[abi:ne180100](void **a1, void *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::~__value_func[abi:ne180100](result);
    operator delete();
  }
  return result;
}

void *std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

{
  std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::~__value_func[abi:ne180100](a1);
  return a1;
}

void __cxx_global_var_init_0()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void __cxx_global_var_init_15_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)104,(char)111,(char)114,(char)105,(char)122,(char)111,(char)110,(char)116,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"horizontalScrolling", a2);
  }
}

void __cxx_global_var_init_16_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)116,(char)105,(char)99,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"verticalScrolling", a2);
  }
}

void __cxx_global_var_init_17_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsGestureScrolling", a2);
  }
}

void __cxx_global_var_init_18_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)103,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"gestureScrollingEnabled", a2);
  }
}

void __cxx_global_var_init_19_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navSwipes2F", a2);
  }
}

void __cxx_global_var_init_20_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipes2F", a2);
  }
}

void __cxx_global_var_init_21_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)104,(char)111,(char)119,(char)68,(char)101,(char)102,(char)105,(char)110,(char)105,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"showDefinition", a2);
  }
}

void __cxx_global_var_init_22_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)105,(char)115,(char)115,(char)105,(char)111,(char)110,(char)67,(char)111,(char)110,(char)116,(char)114,(char)111,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"missionControl", a2);
  }
}

void __cxx_global_var_init_23_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsScrollMomentum", a2);
  }
}

void __cxx_global_var_init_24_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollMomentumEnabled", a2);
  }
}

void __cxx_global_var_init_25_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)110,(char)97,(char)98,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"enable", a2);
  }
}

void __cxx_global_var_init_26_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointing", a2);
  }
}

void __cxx_global_var_init_27_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClick", a2);
  }
}

void __cxx_global_var_init_28_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)103,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragging", a2);
  }
}

void __cxx_global_var_init_29_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)76,(char)111,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragLock", a2);
  }
}

void __cxx_global_var_init_30_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointMomentum", a2);
  }
}

void __cxx_global_var_init_31_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)117,(char)108,(char)116,(char)105,(char)68,(char)114,(char)97,(char)103,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"multiDragMomentum", a2);
  }
}

void __cxx_global_var_init_32_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClick", a2);
  }
}

void __cxx_global_var_init_33_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)65,(char)99,(char)99,(char)101,(char)108,(char)101,(char)114,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollAcceleration", a2);
  }
}

void __cxx_global_var_init_34_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoom", a2);
  }
}

void __cxx_global_var_init_35_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rotate", a2);
  }
}

void __cxx_global_var_init_36_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109,(char)84,(char)111,(char)103,(char)103,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoomToggle", a2);
  }
}

void __cxx_global_var_init_37_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)52,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale4F", a2);
  }
}

void __cxx_global_var_init_38_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)53,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale5F", a2);
  }
}

void __cxx_global_var_init_39_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)100,(char)103,(char)101,(char)78,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"edgeNotificationSwipe2F", a2);
  }
}

void __cxx_global_var_init_40_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)67,(char)101,(char)110,(char)116,(char)101,(char)114,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"notificationCenter2F", a2);
  }
}

void __cxx_global_var_init_41_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)108,(char)105,(char)112,(char)76,(char)101,(char)102,(char)116,(char)65,(char)110,(char)100,(char)82,(char)105,(char)103,(char)104,(char)116,(char)69,(char)100,(char)103,(char)101,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"flipLeftAndRightEdgeGestures", a2);
  }
}

void __cxx_global_var_init_42_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"restingScroll", a2);
  }
}

void __cxx_global_var_init_43_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)101,(char)101,(char)110,(char)90,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"screenZoom", a2);
  }
}

void __cxx_global_var_init_44_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)121,(char)109,(char)109,(char)101,(char)116,(char)114,(char)105,(char)99,(char)90,(char)111,(char)111,(char)109,(char)82,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"symmetricZoomRotate", a2);
  }
}

void __cxx_global_var_init_45_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107,(char)87,(char)104,(char)105,(char)108,(char)101,(char)82,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClickWhileResting", a2);
  }
}

void __cxx_global_var_init_46_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)111,(char)114,(char)99,(char)101,(char)83,(char)117,(char)112,(char)112,(char)114,(char)101,(char)115,(char)115,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"forceSuppressed", a2);
  }
}

void __cxx_global_var_init_47_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)90,(char)111,(char)110,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClickZone", a2);
  }
}

void __cxx_global_var_init_48_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)105,(char)114,(char)115,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"firstClickThreshold", a2);
  }
}

void __cxx_global_var_init_49_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)101,(char)99,(char)111,(char)110,(char)100,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"secondClickThreshold", a2);
  }
}

void __cxx_global_var_init_50_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)116,(char)114,(char)101,(char)110,(char)103,(char)116,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuationStrength", a2);
  }
}

void __cxx_global_var_init_51_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)101,(char)68,(char)101,(char)116,(char)101,(char)110,(char)116,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuateDetents", a2);
  }
}

void __cxx_global_var_init_52_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientation", a2);
  }
}

void __cxx_global_var_init_53_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110,(char)77,(char)111,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientationMode", a2);
  }
}

void __cxx_global_var_init_54_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_55_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_56_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_57_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_58_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_59_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_60_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_61_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_65_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)109,(char)83,(char)101,(char)116,(char)116,(char)105,(char)110,(char)103,(char)115,(char)77,(char)97,(char)110,(char)97,(char)103,(char)101,(char)114>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_mSettingsManager", a2);
  }
}

void sub_11AAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

HSUtil::Encoder *HSUtil::Encoder::encodeCodable<mt_StandardTrackpadSettings>(HSUtil::Encoder *result, const CoderKey *a2, mt_StandardTrackpadSettings *a3)
{
  if (!*(_DWORD *)result)
  {
    uint64_t v4 = result;
    double result = (HSUtil::Encoder *)HSUtil::Encoder::_encodeKey(result, a2);
    if (!*(_DWORD *)v4)
    {
      double result = (HSUtil::Encoder *)mt_StandardTrackpadSettings::encode(a3, v4);
      if (!*(_DWORD *)v4 && (result & 1) == 0) {
        *(_DWORD *)uint64_t v4 = 10;
      }
    }
  }
  return result;
}

HSUtil::Encoder *HSUtil::Encoder::encodeBool(HSUtil::Encoder *this, const CoderKey *a2, int a3)
{
  if (!*(_DWORD *)this)
  {
    uint64_t v4 = (unint64_t *)this;
    this = (HSUtil::Encoder *)HSUtil::Encoder::_encodeKey(this, a2);
    if (!*(_DWORD *)v4)
    {
      if (a3) {
        unsigned __int8 v5 = -117;
      }
      else {
        unsigned __int8 v5 = -118;
      }
      unsigned __int8 __src = v5;
      return (HSUtil::Encoder *)HSUtil::Encoder::_write((HSUtil::Encoder *)v4, v4 + 17, &__src, 1uLL);
    }
  }
  return this;
}

const CoderKey *HSUtil::Decoder::decodeCodable<mt_StandardTrackpadSettings>(const CoderKey *result, CoderKey *a2, mt_StandardTrackpadSettings *a3)
{
  if (SLODWORD(result->var0) <= 4)
  {
    uint64_t v4 = (uint64_t)result;
    unint64_t v5 = *(void *)&result[4].var1;
    double result = HSUtil::Decoder::_findKey(result, &v5, a2);
    if (!*(_DWORD *)v4)
    {
      double result = (const CoderKey *)HSUtil::Decoder::_readCodable<mt_StandardTrackpadSettings>(v4, &v5, a3);
      if (*(_DWORD *)v4 == 3) {
        *(_DWORD *)uint64_t v4 = 13;
      }
      else {
        *(void *)(v4 + 72) = v5;
      }
    }
  }
  return result;
}

uint64_t HSUtil::Decoder::decodeBool(HSUtil::Decoder *this, const CoderKey *a2)
{
  if (*(int *)this > 4) {
    return 0;
  }
  unint64_t v4 = *((void *)this + 9);
  HSUtil::Decoder::_findKey((const CoderKey *)this, &v4, a2);
  if (*(_DWORD *)this) {
    return 0;
  }
  uint64_t result = HSUtil::Decoder::_readBool(this, &v4);
  if (*(_DWORD *)this == 3)
  {
    uint64_t result = 0;
    *(_DWORD *)this = 13;
  }
  else
  {
    *((void *)this + 9) = v4;
  }
  return result;
}

void sub_11F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_12014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

HSUtil::Encoder *HSUtil::Encoder::encodeCodable<mt_StandardMouseSettings>(HSUtil::Encoder *result, const CoderKey *a2, mt_StandardMouseSettings *a3)
{
  if (!*(_DWORD *)result)
  {
    unint64_t v4 = result;
    uint64_t result = (HSUtil::Encoder *)HSUtil::Encoder::_encodeKey(result, a2);
    if (!*(_DWORD *)v4)
    {
      uint64_t result = (HSUtil::Encoder *)mt_StandardMouseSettings::encode(a3, v4);
      if (!*(_DWORD *)v4 && (result & 1) == 0) {
        *(_DWORD *)unint64_t v4 = 10;
      }
    }
  }
  return result;
}

const CoderKey *HSUtil::Decoder::decodeCodable<mt_StandardMouseSettings>(const CoderKey *result, CoderKey *a2, mt_StandardMouseSettings *a3)
{
  if (SLODWORD(result->var0) <= 4)
  {
    uint64_t v4 = (uint64_t)result;
    unint64_t v5 = *(void *)&result[4].var1;
    uint64_t result = HSUtil::Decoder::_findKey(result, &v5, a2);
    if (!*(_DWORD *)v4)
    {
      uint64_t result = (const CoderKey *)HSUtil::Decoder::_readCodable<mt_StandardMouseSettings>(v4, &v5, a3);
      if (*(_DWORD *)v4 == 3) {
        *(_DWORD *)uint64_t v4 = 13;
      }
      else {
        *(void *)(v4 + 72) = v5;
      }
    }
  }
  return result;
}

void sub_123FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_12490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

HSUtil::Encoder *HSUtil::Encoder::encodeInt(HSUtil::Encoder *this, const CoderKey *a2, unint64_t a3)
{
  if (!*(_DWORD *)this)
  {
    uint64_t v4 = this;
    this = (HSUtil::Encoder *)HSUtil::Encoder::_encodeKey(this, a2);
    if (!*(_DWORD *)v4)
    {
      return (HSUtil::Encoder *)HSUtil::Encoder::_encodeInt(v4, a3);
    }
  }
  return this;
}

HSUtil::Encoder *HSUtil::Encoder::encodeFloat(HSUtil::Encoder *this, const CoderKey *a2, float a3)
{
  if (!*(_DWORD *)this)
  {
    uint64_t v4 = (unint64_t *)this;
    this = (HSUtil::Encoder *)HSUtil::Encoder::_encodeKey(this, a2);
    if (!*(_DWORD *)v4)
    {
      return (HSUtil::Encoder *)HSUtil::Encoder::_writeTokenValue32(v4, 0x88u, SLODWORD(a3));
    }
  }
  return this;
}

uint64_t HSUtil::Decoder::decodeInt(HSUtil::Decoder *this, const CoderKey *a2)
{
  if (*(int *)this > 4) {
    return 0;
  }
  unint64_t v4 = *((void *)this + 9);
  HSUtil::Decoder::_findKey((const CoderKey *)this, &v4, a2);
  if (*(_DWORD *)this) {
    return 0;
  }
  uint64_t result = HSUtil::Decoder::_readInt(this, &v4);
  if (*(_DWORD *)this == 3)
  {
    uint64_t result = 0;
    *(_DWORD *)this = 13;
  }
  else
  {
    *((void *)this + 9) = v4;
  }
  return result;
}

float HSUtil::Decoder::decodeFloat(HSUtil::Decoder *this, const CoderKey *a2)
{
  float v2 = 0.0;
  if (*(int *)this <= 4)
  {
    unint64_t v6 = *((void *)this + 9);
    HSUtil::Decoder::_findKey((const CoderKey *)this, &v6, a2);
    if (!*(_DWORD *)this)
    {
      float v4 = HSUtil::Decoder::_readFloat(this, &v6);
      if (*(_DWORD *)this == 3)
      {
        *(_DWORD *)this = 13;
      }
      else
      {
        *((void *)this + 9) = v6;
        return v4;
      }
    }
  }
  return v2;
}

void sub_12A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_12AF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

HSUtil::Encoder *HSUtil::Encoder::encodeUInt(HSUtil::Encoder *this, const CoderKey *a2, unint64_t a3)
{
  if (!*(_DWORD *)this)
  {
    float v4 = this;
    this = (HSUtil::Encoder *)HSUtil::Encoder::_encodeKey(this, a2);
    if (!*(_DWORD *)v4)
    {
      return (HSUtil::Encoder *)HSUtil::Encoder::_encodeUInt(v4, a3);
    }
  }
  return this;
}

void HSUtil::Encoder::encodeNSString(HSUtil::Encoder *this, const CoderKey *a2, NSString *a3)
{
  unint64_t v5 = a3;
  if (!*(_DWORD *)this) {
    HSUtil::Encoder::_encodeKey(this, a2);
  }
  HSUtil::Encoder::encodeNSString(this, v5);
}

void sub_12C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

unint64_t HSUtil::Decoder::decodeUInt(HSUtil::Decoder *this, const CoderKey *a2)
{
  if (*(int *)this > 4) {
    return 0;
  }
  unint64_t v4 = *((void *)this + 9);
  HSUtil::Decoder::_findKey((const CoderKey *)this, &v4, a2);
  if (*(_DWORD *)this) {
    return 0;
  }
  unint64_t result = HSUtil::Decoder::_readUInt(this, &v4);
  if (*(_DWORD *)this == 3)
  {
    unint64_t result = 0;
    *(_DWORD *)this = 13;
  }
  else
  {
    *((void *)this + 9) = v4;
  }
  return result;
}

id HSUtil::Decoder::decodeNSString(HSUtil::Decoder *this, const CoderKey *a2)
{
  if (*(int *)this > 4
    || (unint64_t v7 = *((void *)this + 9), HSUtil::Decoder::_findKey((const CoderKey *)this, &v7, a2), *(_DWORD *)this))
  {
    id v3 = 0;
  }
  else
  {
    unint64_t v5 = HSUtil::Decoder::_readNSString(this, &v7);
    unint64_t v6 = v5;
    if (*(_DWORD *)this == 3)
    {
      id v3 = 0;
      *(_DWORD *)this = 13;
    }
    else
    {
      *((void *)this + 9) = v7;
      id v3 = v5;
    }
  }

  return v3;
}

void sub_13020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_130C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_13628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_136C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_13A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t HSUtil::Decoder::_readBool(HSUtil::Decoder *this, unint64_t *a2)
{
  int Token = HSUtil::Decoder::_readToken(this, a2);
  if (*(_DWORD *)this) {
    return 0;
  }
  if (Token == 138)
  {
    int v6 = 0;
    int v5 = 1;
  }
  else if (Token == 139)
  {
    int v5 = 1;
    int v6 = 1;
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
    *(_DWORD *)this = 2;
  }
  return v6 & v5;
}

uint64_t (***HSUtil::Encoder::_encodeInt(HSUtil::Encoder *this, unint64_t a2))(void)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    if (a2 < 0xFFFFFFFFFFFFFFF0)
    {
      if (a2 < 0xFFFFFFFFFFFFFF80)
      {
        if (a2 < 0xFFFFFFFFFFFF8000)
        {
          if (a2 < 0xFFFFFFFF80000000)
          {
            return HSUtil::Encoder::_writeTokenValue64((unint64_t *)this, 0x87u, a2);
          }
          else
          {
            return HSUtil::Encoder::_writeTokenValue32((unint64_t *)this, 0x86u, a2);
          }
        }
        else
        {
          return HSUtil::Encoder::_writeTokenValue16((unint64_t *)this, 0x85u, a2);
        }
      }
      else
      {
        return HSUtil::Encoder::_writeTokenValue8((unint64_t *)this, 0x84u, a2);
      }
    }
    else
    {
      uint64_t v6 = v2;
      uint64_t v7 = v3;
      unsigned __int8 v5 = a2;
      return HSUtil::Encoder::_write(this, (unint64_t *)this + 17, &v5, 1uLL);
    }
  }
  else
  {
    return HSUtil::Encoder::_encodeUInt(this, a2);
  }
}

uint64_t HSUtil::Decoder::_readInt(HSUtil::Decoder *this, unint64_t *a2)
{
  LOBYTE(result) = HSUtil::Decoder::_readToken(this, a2);
  if (*(_DWORD *)this) {
    return 0;
  }
  if (result - 240 >= 0x10)
  {
    switch((char)result)
    {
      case -128:
        LOBYTE(__dst) = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 1uLL);
        int v5 = *(_DWORD *)this;
        uint64_t v6 = __dst;
        goto LABEL_24;
      case -127:
        LOWORD(__dst) = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 2uLL);
        int v5 = *(_DWORD *)this;
        uint64_t v6 = (unsigned __int16)__dst;
        goto LABEL_24;
      case -126:
        LODWORD(__dst) = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 4uLL);
        int v5 = *(_DWORD *)this;
        if (*(_DWORD *)this) {
          uint64_t result = 0;
        }
        else {
          uint64_t result = __dst;
        }
        goto LABEL_27;
      case -125:
        uint64_t __dst = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 8uLL);
        int v5 = *(_DWORD *)this;
        if (*(_DWORD *)this) {
          uint64_t result = 0;
        }
        else {
          uint64_t result = __dst;
        }
        if (result < 0) {
          goto LABEL_43;
        }
        goto LABEL_27;
      case -124:
        LOBYTE(__dst) = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 1uLL);
        int v5 = *(_DWORD *)this;
        uint64_t v6 = (char)__dst;
        goto LABEL_24;
      case -123:
        LOWORD(__dst) = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 2uLL);
        int v5 = *(_DWORD *)this;
        uint64_t v6 = (__int16)__dst;
        goto LABEL_24;
      case -122:
        LODWORD(__dst) = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 4uLL);
        int v5 = *(_DWORD *)this;
        int v7 = __dst;
        if (*(_DWORD *)this) {
          int v7 = 0;
        }
        uint64_t result = v7;
        goto LABEL_27;
      case -121:
        uint64_t __dst = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 8uLL);
        int v5 = *(_DWORD *)this;
        uint64_t v6 = __dst;
LABEL_24:
        if (v5) {
          uint64_t result = 0;
        }
        else {
          uint64_t result = v6;
        }
        goto LABEL_27;
      case -120:
        LODWORD(__dst) = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 4uLL);
        int v5 = *(_DWORD *)this;
        float v10 = *(float *)&__dst;
        if (*(_DWORD *)this) {
          float v10 = 0.0;
        }
        if (v10 < -9.2234e18 || v10 > 9.2234e18) {
          goto LABEL_43;
        }
        uint64_t result = (uint64_t)v10;
        goto LABEL_27;
      case -119:
        uint64_t __dst = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 8uLL);
        int v5 = *(_DWORD *)this;
        double v8 = *(double *)&__dst;
        if (*(_DWORD *)this) {
          double v8 = 0.0;
        }
        if (v8 < -9.22337204e18 || v8 > 9.22337204e18) {
          goto LABEL_43;
        }
        uint64_t result = (uint64_t)v8;
LABEL_27:
        if (!v5) {
          return result;
        }
        return 0;
      default:
        if (((char)result & 0x80000000) == 0) {
          return result;
        }
LABEL_43:
        uint64_t result = 0;
        *(_DWORD *)this = 2;
        return result;
    }
  }
  return (char)result;
}

float HSUtil::Decoder::_readFloat(HSUtil::Decoder *this, unint64_t *a2)
{
  unsigned __int8 Token = HSUtil::Decoder::_readToken(this, a2);
  float v5 = 0.0;
  if (!*(_DWORD *)this)
  {
    switch(Token)
    {
      case 0x80u:
        LOBYTE(__dst) = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 1uLL);
        int v6 = *(_DWORD *)this;
        LOBYTE(v7) = LOBYTE(__dst);
        goto LABEL_7;
      case 0x81u:
        LOWORD(__dst) = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 2uLL);
        int v6 = *(_DWORD *)this;
        LOWORD(v7) = LOWORD(__dst);
LABEL_7:
        float v8 = (float)v7;
        goto LABEL_23;
      case 0x82u:
        LODWORD(__dst) = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 4uLL);
        int v9 = *(_DWORD *)this;
        unsigned int v10 = LODWORD(__dst);
        if (*(_DWORD *)this) {
          unsigned int v10 = 0;
        }
        float v11 = (float)v10;
        goto LABEL_18;
      case 0x83u:
        double __dst = 0.0;
        HSUtil::Decoder::_read(this, a2, &__dst, 8uLL);
        int v6 = *(_DWORD *)this;
        float v8 = (float)*(unint64_t *)&__dst;
        goto LABEL_23;
      case 0x84u:
        LOBYTE(__dst) = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 1uLL);
        int v6 = *(_DWORD *)this;
        int v12 = SLOBYTE(__dst);
        goto LABEL_14;
      case 0x85u:
        LOWORD(__dst) = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 2uLL);
        int v6 = *(_DWORD *)this;
        int v12 = SLOWORD(__dst);
LABEL_14:
        float v8 = (float)v12;
        goto LABEL_23;
      case 0x86u:
        LODWORD(__dst) = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 4uLL);
        int v9 = *(_DWORD *)this;
        int v13 = LODWORD(__dst);
        if (*(_DWORD *)this) {
          int v13 = 0;
        }
        float v11 = (float)v13;
LABEL_18:
        float v14 = v11;
        if (!v9) {
          goto LABEL_25;
        }
        return v5;
      case 0x87u:
        double __dst = 0.0;
        HSUtil::Decoder::_read(this, a2, &__dst, 8uLL);
        int v6 = *(_DWORD *)this;
        float v8 = (float)*(uint64_t *)&__dst;
        goto LABEL_23;
      case 0x88u:
        LODWORD(__dst) = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 4uLL);
        int v6 = *(_DWORD *)this;
        float v14 = *(float *)&__dst;
        goto LABEL_24;
      case 0x89u:
        double __dst = 0.0;
        HSUtil::Decoder::_read(this, a2, &__dst, 8uLL);
        int v6 = *(_DWORD *)this;
        float v8 = __dst;
LABEL_23:
        float v14 = v8;
LABEL_24:
        if (!v6) {
LABEL_25:
        }
          float v5 = v14;
        break;
      default:
        if ((char)Token < 0) {
          *(_DWORD *)this = 2;
        }
        else {
          float v5 = (float)Token;
        }
        break;
    }
  }
  return v5;
}

void HSUtil::Encoder::encodeNSString(HSUtil::Encoder *this, NSString *a2)
{
  uint64_t v3 = a2;
  unint64_t v4 = v3;
  if (v3)
  {
    float v5 = [(NSString *)v3 UTF8String];
    if (!*(_DWORD *)this) {
      HSUtil::Encoder::_encodeString(this, v5);
    }
  }
  else if (!*(_DWORD *)this)
  {
    unsigned __int8 __src = -116;
    HSUtil::Encoder::_write(this, (unint64_t *)this + 17, &__src, 1uLL);
  }
}

void sub_14130(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id HSUtil::Decoder::_readNSString(HSUtil::Decoder *this, unint64_t *a2)
{
  *(void *)&v11[0] = *a2;
  int Token = HSUtil::Decoder::_readToken(this, (unint64_t *)v11);
  if (*(_DWORD *)this)
  {
    id v5 = 0;
  }
  else if (Token == 140)
  {
    int v6 = HSUtil::Decoder::_readToken(this, a2);
    id v5 = 0;
    if (!*(_DWORD *)this && v6 != 140)
    {
      id v5 = 0;
      *(_DWORD *)this = 2;
    }
  }
  else
  {
    unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v12 = v7;
    long long v13 = v7;
    v11[0] = v7;
    v11[1] = v7;
    HSUtil::Decoder::_readStringByCopy(this, a2, (uint64_t)v11);
    if (*(_DWORD *)this)
    {
      id v5 = 0;
    }
    else
    {
      if (*((void *)&v12 + 1))
      {
        uint64_t v8 = v13;
        int v9 = HSUtil::Buffer::_releaseData((HSUtil::Buffer *)v11);
      }
      else
      {
        uint64_t v8 = 0;
        int v9 = 0;
      }
      id v5 = [objc_alloc((Class)NSString) initWithBytesNoCopy:v9 length:v8 - 1 encoding:4 freeWhenDone:1];
      if (!v5) {
        free(v9);
      }
    }
    HSUtil::Buffer::~Buffer((HSUtil::Buffer *)v11);
  }

  return v5;
}

void sub_14268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *HSUtil::Buffer::_releaseData(HSUtil::Buffer *this)
{
  uint64_t result = (void *)*((void *)this + 5);
  uint64_t v3 = HSUtil::Buffer::_EmptyData;
  if (result == HSUtil::Buffer::_EmptyData) {
    return 0;
  }
  if ((*((unsigned char *)this + 64) & 1) == 0) {
    HSUtil::Buffer::_releaseData();
  }
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 5) = v3;
  *((unsigned char *)this + 64) = 0;
  return result;
}

uint64_t mt_StandardTrackpadSettings::encode(mt_StandardTrackpadSettings *this, HSUtil::Encoder *a2)
{
  if (!*(_DWORD *)a2) {
    HSUtil::Encoder::_encodeMapStart((unint64_t *)a2, 4);
  }
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)101,(char)110,(char)97,(char)98,(char)108,(char)101>::Key, this->enable);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)105,(char)110,(char)103>::Key, this->pointing);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107>::Key, this->tapClick);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)103,(char)105,(char)110,(char)103>::Key, this->dragging);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)76,(char)111,(char)99,(char)107>::Key, this->dragLock);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key, this->pointMomentum);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)109,(char)117,(char)108,(char)116,(char)105,(char)68,(char)114,(char)97,(char)103,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key, this->multiDragMomentum);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107>::Key, this->rightClick);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)116,(char)105,(char)99,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key, this->verticalScrolling);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)104,(char)111,(char)114,(char)105,(char)122,(char)111,(char)110,(char)116,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key, this->horizontalScrolling);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)103,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key, this->gestureScrollingEnabled);
  HSUtil::Encoder::encodeUInt(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)65,(char)99,(char)99,(char)101,(char)108,(char)101,(char)114,(char)97,(char)116,(char)105,(char)111,(char)110>::Key, *(unsigned int *)(&this->gestureScrollingEnabled + 1));
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109>::Key, HIBYTE(this->scrollAcceleration));
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)114,(char)111,(char)116,(char)97,(char)116,(char)101>::Key, this->zoom);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109,(char)84,(char)111,(char)103,(char)103,(char)108,(char)101>::Key, this->rotate);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)115,(char)104,(char)111,(char)119,(char)68,(char)101,(char)102,(char)105,(char)110,(char)105,(char)116,(char)105,(char)111,(char)110>::Key, this->zoomToggle);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)52,(char)70>::Key, this->showDefinition);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)53,(char)70>::Key, this->dockScale4F);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)101,(char)100,(char)103,(char)101,(char)78,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)50,(char)70>::Key, this->dockScale5F);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)110,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)67,(char)101,(char)110,(char)116,(char)101,(char)114,(char)50,(char)70>::Key, this->edgeNotificationSwipe2F);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)102,(char)108,(char)105,(char)112,(char)76,(char)101,(char)102,(char)116,(char)65,(char)110,(char)100,(char)82,(char)105,(char)103,(char)104,(char)116,(char)69,(char)100,(char)103,(char)101,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)115>::Key, this->notificationCenter2F);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key, this->flipLeftAndRightEdgeGestures);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key, this->scrollMomentumEnabled);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108>::Key, this->supportsScrollMomentum);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)101,(char)101,(char)110,(char)90,(char)111,(char)111,(char)109>::Key, this->restingScroll);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)115,(char)121,(char)109,(char)109,(char)101,(char)116,(char)114,(char)105,(char)99,(char)90,(char)111,(char)111,(char)109,(char)82,(char)111,(char)116,(char)97,(char)116,(char)101>::Key, this->screenZoom);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107,(char)87,(char)104,(char)105,(char)108,(char)101,(char)82,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103>::Key, this->symmetricZoomRotate);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)102,(char)111,(char)114,(char)99,(char)101,(char)83,(char)117,(char)112,(char)112,(char)114,(char)101,(char)115,(char)115,(char)101,(char)100>::Key, this->tapClickWhileResting);
  HSUtil::Encoder::encodeUInt(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)90,(char)111,(char)110,(char)101>::Key, *(unsigned int *)&this->forceSuppressed);
  HSUtil::Encoder::encodeUInt(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)102,(char)105,(char)114,(char)115,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key, *(unsigned int *)((char *)&this->rightClickZone + 3));
  HSUtil::Encoder::encodeUInt(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)115,(char)101,(char)99,(char)111,(char)110,(char)100,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key, *(unsigned int *)((char *)&this->firstClickThreshold + 3));
  HSUtil::Encoder::encodeUInt(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)116,(char)114,(char)101,(char)110,(char)103,(char)116,(char)104>::Key, *(unsigned int *)((char *)&this->secondClickThreshold + 3));
  HSUtil::Encoder::encodeUInt(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)101,(char)68,(char)101,(char)116,(char)101,(char)110,(char)116,(char)115>::Key, *(unsigned int *)((char *)&this->actuationStrength + 3));
  HSUtil::Encoder::encodeInt(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110>::Key, *(unsigned int *)((char *)&this->actuateDetents + 3));
  HSUtil::Encoder::encodeInt(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110,(char)77,(char)111,(char)100,(char)101>::Key, *(unsigned int *)((char *)&this->surfaceOrientation + 3));
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key, HIBYTE(this->surfaceOrientationMode));
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key, this->navigationSwipe3F.v);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key, this->navigationSwipe3F.h);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key, this->navigationSwipe4F.v);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key, this->navigationSwipe4F.h);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key, this->dockSwipe3F.v);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key, this->dockSwipe3F.h);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key, this->dockSwipe4F.v);
  if (!*(_DWORD *)a2) {
    HSUtil::Encoder::_encodeContainerStop((uint64_t (***)(void))a2);
  }
  return 1;
}

void *HSUtil::Decoder::_readCodable<mt_StandardTrackpadSettings>(uint64_t a1, unint64_t *a2, mt_StandardTrackpadSettings *a3)
{
  unint64_t v6 = *a2;
  uint64_t result = (void *)HSUtil::Decoder::_skipElement((HSUtil::Decoder *)a1, a2);
  if (!*(_DWORD *)a1)
  {
    uint64_t v8 = result;
    uint64_t result = HSUtil::Decoder::_loadKeyTableIfNeeded((HSUtil::Decoder *)a1, a2);
    if (!*(_DWORD *)a1)
    {
      v11[1] = *(void *)(a1 + 8);
      v11[0] = 0xAAAAAAAA00000000;
      uint64_t v10 = *(void *)(a1 + 24);
      int v9 = *(std::__shared_weak_count **)(a1 + 32);
      long long v12 = 0;
      uint64_t v13 = v10;
      unint64_t v14 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v15 = *(_OWORD *)(a1 + 40);
      unint64_t v16 = *(void *)(a1 + 56) + v6;
      unsigned __int16 v17 = v8;
      uint64_t v18 = 0;
      if ((mt_StandardTrackpadSettings::decode(a3, (HSUtil::Decoder *)v11) & 1) == 0) {
        *(_DWORD *)a1 = 10;
      }
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      uint64_t result = v12;
      long long v12 = 0;
      if (result)
      {
        std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::~__value_func[abi:ne180100](result);
        operator delete();
      }
    }
  }
  return result;
}

void sub_14768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t mt_StandardTrackpadSettings::decode(mt_StandardTrackpadSettings *this, HSUtil::Decoder *a2)
{
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v10 = v3;
  long long v11 = v3;
  long long v8 = v3;
  long long v9 = v3;
  long long v7 = v3;
  HSUtil::Decoder::decodeMap((unint64_t *)a2, (uint64_t)&v7);
  if (v7)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardTrackpadSettings::decode();
    }
    goto LABEL_134;
  }
  this->enable = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)101,(char)110,(char)97,(char)98,(char)108,(char)101>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardTrackpadSettings::decode();
    }
    goto LABEL_134;
  }
  this->pointing = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)105,(char)110,(char)103>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardTrackpadSettings::decode();
    }
    goto LABEL_134;
  }
  this->tapClick = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardTrackpadSettings::decode();
    }
    goto LABEL_134;
  }
  this->dragging = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)103,(char)105,(char)110,(char)103>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardTrackpadSettings::decode();
    }
    goto LABEL_134;
  }
  this->dragLock = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)76,(char)111,(char)99,(char)107>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardTrackpadSettings::decode();
    }
    goto LABEL_134;
  }
  this->pointMomentum = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardTrackpadSettings::decode();
    }
    goto LABEL_134;
  }
  this->multiDragMomentum = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)109,(char)117,(char)108,(char)116,(char)105,(char)68,(char)114,(char)97,(char)103,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardTrackpadSettings::decode();
    }
    goto LABEL_134;
  }
  this->rightClick = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardTrackpadSettings::decode();
    }
    goto LABEL_134;
  }
  this->verticalScrolling = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)116,(char)105,(char)99,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardTrackpadSettings::decode();
    }
    goto LABEL_134;
  }
  this->horizontalScrolling = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)104,(char)111,(char)114,(char)105,(char)122,(char)111,(char)110,(char)116,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardTrackpadSettings::decode();
    }
    goto LABEL_134;
  }
  this->gestureScrollingEnabled = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)103,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardTrackpadSettings::decode();
    }
    goto LABEL_134;
  }
  *(_DWORD *)(&this->gestureScrollingEnabled + 1) = HSUtil::Decoder::decodeUInt((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)65,(char)99,(char)99,(char)101,(char)108,(char)101,(char)114,(char)97,(char)116,(char)105,(char)111,(char)110>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardTrackpadSettings::decode();
    }
    goto LABEL_134;
  }
  HIBYTE(this->scrollAcceleration) = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardTrackpadSettings::decode();
    }
    goto LABEL_134;
  }
  this->zoom = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)114,(char)111,(char)116,(char)97,(char)116,(char)101>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardTrackpadSettings::decode();
    }
    goto LABEL_134;
  }
  this->rotate = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109,(char)84,(char)111,(char)103,(char)103,(char)108,(char)101>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardTrackpadSettings::decode();
    }
    goto LABEL_134;
  }
  this->zoomToggle = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)115,(char)104,(char)111,(char)119,(char)68,(char)101,(char)102,(char)105,(char)110,(char)105,(char)116,(char)105,(char)111,(char)110>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardTrackpadSettings::decode();
    }
    goto LABEL_134;
  }
  this->showDefinition = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)52,(char)70>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardTrackpadSettings::decode();
    }
    goto LABEL_134;
  }
  this->dockScale4F = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)53,(char)70>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardTrackpadSettings::decode();
    }
    goto LABEL_134;
  }
  this->dockScale5F = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)101,(char)100,(char)103,(char)101,(char)78,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)50,(char)70>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardTrackpadSettings::decode();
    }
    goto LABEL_134;
  }
  this->edgeNotificationSwipe2F = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)110,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)67,(char)101,(char)110,(char)116,(char)101,(char)114,(char)50,(char)70>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardTrackpadSettings::decode();
    }
    goto LABEL_134;
  }
  this->notificationCenter2F = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)102,(char)108,(char)105,(char)112,(char)76,(char)101,(char)102,(char)116,(char)65,(char)110,(char)100,(char)82,(char)105,(char)103,(char)104,(char)116,(char)69,(char)100,(char)103,(char)101,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)115>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardTrackpadSettings::decode();
    }
    goto LABEL_134;
  }
  this->flipLeftAndRightEdgeGestures = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardTrackpadSettings::decode();
    }
    goto LABEL_134;
  }
  this->scrollMomentumEnabled = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardTrackpadSettings::decode();
    }
    goto LABEL_134;
  }
  this->supportsScrollMomentum = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardTrackpadSettings::decode();
    }
    goto LABEL_134;
  }
  this->restingScroll = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)101,(char)101,(char)110,(char)90,(char)111,(char)111,(char)109>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardTrackpadSettings::decode();
    }
    goto LABEL_134;
  }
  this->screenZoom = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)115,(char)121,(char)109,(char)109,(char)101,(char)116,(char)114,(char)105,(char)99,(char)90,(char)111,(char)111,(char)109,(char)82,(char)111,(char)116,(char)97,(char)116,(char)101>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardTrackpadSettings::decode();
    }
    goto LABEL_134;
  }
  this->symmetricZoomRotate = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107,(char)87,(char)104,(char)105,(char)108,(char)101,(char)82,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardTrackpadSettings::decode();
    }
    goto LABEL_134;
  }
  this->tapClickWhileResting = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)102,(char)111,(char)114,(char)99,(char)101,(char)83,(char)117,(char)112,(char)112,(char)114,(char)101,(char)115,(char)115,(char)101,(char)100>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardTrackpadSettings::decode();
    }
    goto LABEL_134;
  }
  HIBYTE(this->surfaceOrientationMode) = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_134;
    }
LABEL_105:
    mt_StandardTrackpadSettings::decode();
    goto LABEL_134;
  }
  this->navigationSwipe3F.BOOL v = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_134;
    }
    goto LABEL_105;
  }
  this->navigationSwipe3F.h = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_134;
    }
LABEL_109:
    mt_StandardTrackpadSettings::decode();
    goto LABEL_134;
  }
  this->navigationSwipe4F.BOOL v = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_134;
    }
    goto LABEL_109;
  }
  this->navigationSwipe4F.h = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_134;
    }
LABEL_113:
    mt_StandardTrackpadSettings::decode();
    goto LABEL_134;
  }
  this->dockSwipe3F.BOOL v = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_134;
    }
    goto LABEL_113;
  }
  this->dockSwipe3F.h = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_134;
    }
LABEL_117:
    mt_StandardTrackpadSettings::decode();
    goto LABEL_134;
  }
  this->dockSwipe4F.BOOL v = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_134;
    }
    goto LABEL_117;
  }
  *(unsigned int *)((char *)&this->actuateDetents + 3) = HSUtil::Decoder::decodeInt((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110>::Key);
  if (v7 >= 2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardTrackpadSettings::decode();
    }
  }
  else
  {
    *(int *)((char *)&this->surfaceOrientation + 3) = HSUtil::Decoder::decodeInt((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110,(char)77,(char)111,(char)100,(char)101>::Key);
    if (v7 >= 2)
    {
      memset(__b, 170, sizeof(__b));
      basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        mt_StandardTrackpadSettings::decode();
      }
    }
    else
    {
      *(_DWORD *)&this->forceSuppressed = HSUtil::Decoder::decodeUInt((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)90,(char)111,(char)110,(char)101>::Key);
      if (v7 >= 2)
      {
        memset(__b, 170, sizeof(__b));
        basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          mt_StandardTrackpadSettings::decode();
        }
      }
      else
      {
        *(unsigned int *)((char *)&this->rightClickZone + 3) = HSUtil::Decoder::decodeUInt((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)102,(char)105,(char)114,(char)115,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key);
        if (v7 >= 2)
        {
          memset(__b, 170, sizeof(__b));
          basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            mt_StandardTrackpadSettings::decode();
          }
        }
        else
        {
          *(unsigned int *)((char *)&this->firstClickThreshold + 3) = HSUtil::Decoder::decodeUInt((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)115,(char)101,(char)99,(char)111,(char)110,(char)100,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key);
          if (v7 >= 2)
          {
            memset(__b, 170, sizeof(__b));
            basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              mt_StandardTrackpadSettings::decode();
            }
          }
          else
          {
            *(unsigned int *)((char *)&this->secondClickThreshold + 3) = HSUtil::Decoder::decodeUInt((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)116,(char)114,(char)101,(char)110,(char)103,(char)116,(char)104>::Key);
            if (v7 >= 2)
            {
              memset(__b, 170, sizeof(__b));
              basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                mt_StandardTrackpadSettings::decode();
              }
            }
            else
            {
              *(unsigned int *)((char *)&this->actuationStrength + 3) = HSUtil::Decoder::decodeUInt((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)101,(char)68,(char)101,(char)116,(char)101,(char)110,(char)116,(char)115>::Key);
              if (v7 < 2)
              {
                uint64_t v4 = 1;
                goto LABEL_135;
              }
              memset(__b, 170, sizeof(__b));
              basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/TrackpadSettingsManager.h", __b);
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                mt_StandardTrackpadSettings::decode();
              }
            }
          }
        }
      }
    }
  }
LABEL_134:
  uint64_t v4 = 0;
LABEL_135:
  if ((void)v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v9);
  }
  id v5 = (void *)v8;
  *(void *)&long long v8 = 0;
  if (v5)
  {
    std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::~__value_func[abi:ne180100](v5);
    operator delete();
  }
  return v4;
}

void sub_15940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t mt_StandardMouseSettings::encode(mt_StandardMouseSettings *this, HSUtil::Encoder *a2)
{
  if (!*(_DWORD *)a2) {
    HSUtil::Encoder::_encodeMapStart((unint64_t *)a2, 4);
  }
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)104,(char)111,(char)114,(char)105,(char)122,(char)111,(char)110,(char)116,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key, this->horizontalScrolling);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)116,(char)105,(char)99,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key, this->verticalScrolling);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key, this->supportsGestureScrolling);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)103,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key, this->gestureScrollingEnabled);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key, this->navSwipes2F);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key, this->dockSwipes2F);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)115,(char)104,(char)111,(char)119,(char)68,(char)101,(char)102,(char)105,(char)110,(char)105,(char)116,(char)105,(char)111,(char)110>::Key, this->showDefinition);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)109,(char)105,(char)115,(char)115,(char)105,(char)111,(char)110,(char)67,(char)111,(char)110,(char)116,(char)114,(char)111,(char)108>::Key, this->missionControl);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key, this->supportsScrollMomentum);
  HSUtil::Encoder::encodeBool(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key, this->scrollMomentumEnabled);
  if (!*(_DWORD *)a2) {
    HSUtil::Encoder::_encodeContainerStop((uint64_t (***)(void))a2);
  }
  return 1;
}

void *HSUtil::Decoder::_readCodable<mt_StandardMouseSettings>(uint64_t a1, unint64_t *a2, mt_StandardMouseSettings *a3)
{
  unint64_t v6 = *a2;
  uint64_t result = (void *)HSUtil::Decoder::_skipElement((HSUtil::Decoder *)a1, a2);
  if (!*(_DWORD *)a1)
  {
    long long v8 = result;
    uint64_t result = HSUtil::Decoder::_loadKeyTableIfNeeded((HSUtil::Decoder *)a1, a2);
    if (!*(_DWORD *)a1)
    {
      v11[1] = *(void *)(a1 + 8);
      v11[0] = 0xAAAAAAAA00000000;
      uint64_t v10 = *(void *)(a1 + 24);
      long long v9 = *(std::__shared_weak_count **)(a1 + 32);
      long long v12 = 0;
      uint64_t v13 = v10;
      unint64_t v14 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v15 = *(_OWORD *)(a1 + 40);
      unint64_t v16 = *(void *)(a1 + 56) + v6;
      unsigned __int16 v17 = v8;
      uint64_t v18 = 0;
      if ((mt_StandardMouseSettings::decode(a3, (HSUtil::Decoder *)v11) & 1) == 0) {
        *(_DWORD *)a1 = 10;
      }
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      uint64_t result = v12;
      long long v12 = 0;
      if (result)
      {
        std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::~__value_func[abi:ne180100](result);
        operator delete();
      }
    }
  }
  return result;
}

void sub_15C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t mt_StandardMouseSettings::decode(mt_StandardMouseSettings *this, HSUtil::Decoder *a2)
{
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v10 = v3;
  long long v11 = v3;
  long long v8 = v3;
  long long v9 = v3;
  long long v7 = v3;
  HSUtil::Decoder::decodeMap((unint64_t *)a2, (uint64_t)&v7);
  if (v7)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/MouseSettingsManager.h", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      mt_StandardMouseSettings::decode();
    }
  }
  else
  {
    this->horizontalScrolling = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)104,(char)111,(char)114,(char)105,(char)122,(char)111,(char)110,(char)116,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key);
    if (v7 >= 2)
    {
      memset(__b, 170, sizeof(__b));
      basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/MouseSettingsManager.h", __b);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        mt_StandardMouseSettings::decode();
      }
    }
    else
    {
      this->verticalScrolling = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)116,(char)105,(char)99,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key);
      if (v7 >= 2)
      {
        memset(__b, 170, sizeof(__b));
        basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/MouseSettingsManager.h", __b);
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          mt_StandardMouseSettings::decode();
        }
      }
      else
      {
        this->supportsGestureScrolling = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key);
        if (v7 >= 2)
        {
          memset(__b, 170, sizeof(__b));
          basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/MouseSettingsManager.h", __b);
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            mt_StandardMouseSettings::decode();
          }
        }
        else
        {
          this->gestureScrollingEnabled = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)103,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key);
          if (v7 >= 2)
          {
            memset(__b, 170, sizeof(__b));
            basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/MouseSettingsManager.h", __b);
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              mt_StandardMouseSettings::decode();
            }
          }
          else
          {
            this->navSwipes2F = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key);
            if (v7 >= 2)
            {
              memset(__b, 170, sizeof(__b));
              basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/MouseSettingsManager.h", __b);
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                mt_StandardMouseSettings::decode();
              }
            }
            else
            {
              this->dockSwipes2F = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key);
              if (v7 >= 2)
              {
                memset(__b, 170, sizeof(__b));
                basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/MouseSettingsManager.h", __b);
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  mt_StandardMouseSettings::decode();
                }
              }
              else
              {
                this->showDefinition = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)115,(char)104,(char)111,(char)119,(char)68,(char)101,(char)102,(char)105,(char)110,(char)105,(char)116,(char)105,(char)111,(char)110>::Key);
                if (v7 >= 2)
                {
                  memset(__b, 170, sizeof(__b));
                  basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/MouseSettingsManager.h", __b);
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    mt_StandardMouseSettings::decode();
                  }
                }
                else
                {
                  this->missionControl = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)109,(char)105,(char)115,(char)115,(char)105,(char)111,(char)110,(char)67,(char)111,(char)110,(char)116,(char)114,(char)111,(char)108>::Key);
                  if (v7 >= 2)
                  {
                    memset(__b, 170, sizeof(__b));
                    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/MouseSettingsManager.h", __b);
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                      mt_StandardMouseSettings::decode();
                    }
                  }
                  else
                  {
                    this->supportsScrollMomentum = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key);
                    if (v7 >= 2)
                    {
                      memset(__b, 170, sizeof(__b));
                      basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/MouseSettingsManager.h", __b);
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        mt_StandardMouseSettings::decode();
                      }
                    }
                    else
                    {
                      this->scrollMomentumEnabled = HSUtil::Decoder::decodeBool((HSUtil::Decoder *)&v7, (const CoderKey *)HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key);
                      if (v7 < 2)
                      {
                        uint64_t v4 = 1;
                        goto LABEL_36;
                      }
                      memset(__b, 170, sizeof(__b));
                      basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/PreAlg/MouseSettingsManager.h", __b);
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        mt_StandardMouseSettings::decode();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v4 = 0;
LABEL_36:
  if ((void)v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v9);
  }
  id v5 = (void *)v8;
  *(void *)&long long v8 = 0;
  if (v5)
  {
    std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::~__value_func[abi:ne180100](v5);
    operator delete();
  }
  return v4;
}

void sub_16108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void OUTLINED_FUNCTION_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x2Au);
}

void __cxx_global_var_init_1()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void __cxx_global_var_init_9_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)110,(char)97,(char)98,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"enable", a2);
  }
}

void __cxx_global_var_init_10_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointing", a2);
  }
}

void __cxx_global_var_init_11_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClick", a2);
  }
}

void __cxx_global_var_init_12_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)103,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragging", a2);
  }
}

void __cxx_global_var_init_13_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)76,(char)111,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragLock", a2);
  }
}

void __cxx_global_var_init_14_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointMomentum", a2);
  }
}

void __cxx_global_var_init_15_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)117,(char)108,(char)116,(char)105,(char)68,(char)114,(char)97,(char)103,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"multiDragMomentum", a2);
  }
}

void __cxx_global_var_init_16_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClick", a2);
  }
}

void __cxx_global_var_init_17_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)116,(char)105,(char)99,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"verticalScrolling", a2);
  }
}

void __cxx_global_var_init_18_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)104,(char)111,(char)114,(char)105,(char)122,(char)111,(char)110,(char)116,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"horizontalScrolling", a2);
  }
}

void __cxx_global_var_init_19_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)103,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"gestureScrollingEnabled", a2);
  }
}

void __cxx_global_var_init_20_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)65,(char)99,(char)99,(char)101,(char)108,(char)101,(char)114,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollAcceleration", a2);
  }
}

void __cxx_global_var_init_21_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoom", a2);
  }
}

void __cxx_global_var_init_22_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rotate", a2);
  }
}

void __cxx_global_var_init_23_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109,(char)84,(char)111,(char)103,(char)103,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoomToggle", a2);
  }
}

void __cxx_global_var_init_24_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)104,(char)111,(char)119,(char)68,(char)101,(char)102,(char)105,(char)110,(char)105,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"showDefinition", a2);
  }
}

void __cxx_global_var_init_25_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)52,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale4F", a2);
  }
}

void __cxx_global_var_init_26_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)53,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale5F", a2);
  }
}

void __cxx_global_var_init_27_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)100,(char)103,(char)101,(char)78,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"edgeNotificationSwipe2F", a2);
  }
}

void __cxx_global_var_init_28_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)67,(char)101,(char)110,(char)116,(char)101,(char)114,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"notificationCenter2F", a2);
  }
}

void __cxx_global_var_init_29_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)108,(char)105,(char)112,(char)76,(char)101,(char)102,(char)116,(char)65,(char)110,(char)100,(char)82,(char)105,(char)103,(char)104,(char)116,(char)69,(char)100,(char)103,(char)101,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"flipLeftAndRightEdgeGestures", a2);
  }
}

void __cxx_global_var_init_30_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollMomentumEnabled", a2);
  }
}

void __cxx_global_var_init_31_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsScrollMomentum", a2);
  }
}

void __cxx_global_var_init_32_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"restingScroll", a2);
  }
}

void __cxx_global_var_init_33_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)101,(char)101,(char)110,(char)90,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"screenZoom", a2);
  }
}

void __cxx_global_var_init_34_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)121,(char)109,(char)109,(char)101,(char)116,(char)114,(char)105,(char)99,(char)90,(char)111,(char)111,(char)109,(char)82,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"symmetricZoomRotate", a2);
  }
}

void __cxx_global_var_init_35_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107,(char)87,(char)104,(char)105,(char)108,(char)101,(char)82,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClickWhileResting", a2);
  }
}

void __cxx_global_var_init_36_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)111,(char)114,(char)99,(char)101,(char)83,(char)117,(char)112,(char)112,(char)114,(char)101,(char)115,(char)115,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"forceSuppressed", a2);
  }
}

void __cxx_global_var_init_37_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)90,(char)111,(char)110,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClickZone", a2);
  }
}

void __cxx_global_var_init_38_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)105,(char)114,(char)115,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"firstClickThreshold", a2);
  }
}

void __cxx_global_var_init_39_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)101,(char)99,(char)111,(char)110,(char)100,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"secondClickThreshold", a2);
  }
}

void __cxx_global_var_init_40_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)116,(char)114,(char)101,(char)110,(char)103,(char)116,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuationStrength", a2);
  }
}

void __cxx_global_var_init_41_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)101,(char)68,(char)101,(char)116,(char)101,(char)110,(char)116,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuateDetents", a2);
  }
}

void __cxx_global_var_init_42_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientation", a2);
  }
}

void __cxx_global_var_init_43_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110,(char)77,(char)111,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientationMode", a2);
  }
}

void __cxx_global_var_init_44_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_45_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_46_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_47_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_48_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_49_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_50_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_51_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_52_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsGestureScrolling", a2);
  }
}

void __cxx_global_var_init_53_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navSwipes2F", a2);
  }
}

void __cxx_global_var_init_54_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipes2F", a2);
  }
}

void __cxx_global_var_init_55_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)105,(char)115,(char)115,(char)105,(char)111,(char)110,(char)67,(char)111,(char)110,(char)116,(char)114,(char)111,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"missionControl", a2);
  }
}

void __cxx_global_var_init_59_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)112,(char)83,(char)101,(char)116,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tpSetting", a2);
  }
}

void __cxx_global_var_init_60_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)101,(char)101,(char)100,(char)115,(char)70,(char)108,(char)117,(char)115,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"needsFlush", a2);
  }
}

void __cxx_global_var_init_61_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)72,(char)83,(char)84,(char)80,(char)83,(char)101,(char)116,(char)116,(char)105,(char)110,(char)103,(char)115,(char)69,(char)118,(char)101,(char)110,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"HSTPSettingsEvent", a2);
  }
}

void __cxx_global_var_init_127(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)83,(char)101,(char)116,(char)116,(char)105,(char)110,(char)103,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"mSettings", a2);
  }
}

void __cxx_global_var_init_128(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)72,(char)83,(char)77,(char)111,(char)117,(char)115,(char)101,(char)83,(char)101,(char)116,(char)116,(char)105,(char)110,(char)103,(char)115,(char)69,(char)118,(char)101,(char)110,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"HSMouseSettingsEvent", a2);
  }
}

void __cxx_global_var_init_136(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)119,(char)97,(char)118,(char)101,(char)102,(char)111,(char)114,(char)109,(char)73,(char)68>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"waveformID", a2);
  }
}

void __cxx_global_var_init_137(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)114,(char)101,(char)110,(char)103,(char)116,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"strength", a2);
  }
}

void __cxx_global_var_init_138(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)97,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scale", a2);
  }
}

void __cxx_global_var_init_139(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)68,(char)105,(char)108,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timeDilation", a2);
  }
}

void __cxx_global_var_init_140(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)72,(char)83,(char)84,(char)65,(char)99,(char)116,(char)117,(char)97,(char)116,(char)105,(char)111,(char)110,(char)69,(char)118,(char)101,(char)110,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"HSTActuationEvent", a2);
  }
}

void __cxx_global_var_init_152(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)107,(char)101,(char)121>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"key", a2);
  }
}

void __cxx_global_var_init_153(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)72,(char)83,(char)84,(char)105,(char)109,(char)101,(char)114,(char)69,(char)118,(char)101,(char)110,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"HSTimerEvent", a2);
  }
}

void __cxx_global_var_init_164(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)101,(char)113,(char)117,(char)101,(char)115,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"request", a2);
  }
}

void __cxx_global_var_init_165(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)98,(char)116,(char)121,(char)112,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"subtype", a2);
  }
}

void __cxx_global_var_init_166(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)101,(char)108,(char)116,(char)97,(char)46,(char)102,(char)105,(char)114,(char)115,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"delta.first", a2);
  }
}

void __cxx_global_var_init_167(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)101,(char)108,(char)116,(char)97,(char)46,(char)115,(char)101,(char)99,(char)111,(char)110,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"delta.second", a2);
  }
}

void __cxx_global_var_init_168(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragButtons", a2);
  }
}

void __cxx_global_var_init_169(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)108,(char)97,(char)115,(char)116,(char)70,(char)114,(char)97,(char)109,(char)101,(char)73,(char)110,(char)116,(char)101,(char)114,(char)118,(char)97,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"lastFrameInterval", a2);
  }
}

void __cxx_global_var_init_170(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)72,(char)83,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109,(char)82,(char)101,(char)113,(char)117,(char)101,(char)115,(char)116,(char)69,(char)118,(char)101,(char)110,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"HSMomentumRequestEvent", a2);
  }
}

void __cxx_global_var_init_199(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)72,(char)83,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109,(char)83,(char)116,(char)97,(char)116,(char)101,(char)69,(char)118,(char)101,(char)110,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"HSMomentumStateEvent", a2);
  }
}

void __cxx_global_var_init_2()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

HSTBackboardBridge *HSTPipeline::CreateSAPipeline(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v8 = a1;
  id v9 = a2;
  id v10 = a4;
  CFStringRef v65 = v8;
  CFStringRef v69 = v10;
  CFStringRef v74 = v9;
  if (v8)
  {
    if (v9) {
      goto LABEL_3;
    }
  }
  else
  {
    v54 = +[NSAssertionHandler currentHandler];
    CFMutableDictionaryRef v55 = +[NSString stringWithUTF8String:"HSStage *HSTPipeline::CreateSAPipeline(NSString *__strong, __strong dispatch_queue_t, MTDeviceRef, HSStage *__strong, NSUInteger)"];
    [v54 handleFailureInFunction:v55, @"HSTSAPipelineCreation.mm", 103, @"Invalid parameter not satisfying: %@", @"domain", 0 file lineNumber description];

    if (v74)
    {
LABEL_3:
      if (a3) {
        goto LABEL_4;
      }
LABEL_33:
      CFStringRef v58 = +[NSAssertionHandler currentHandler];
      CFStringRef v59 = +[NSString stringWithUTF8String:"HSStage *HSTPipeline::CreateSAPipeline(NSString *__strong, __strong dispatch_queue_t, MTDeviceRef, HSStage *__strong, NSUInteger)"];
      [v58 handleFailureInFunction:v59, @"HSTSAPipelineCreation.mm", 105, @"Invalid parameter not satisfying: %@", @"device" file lineNumber description];

      if (v10) {
        goto LABEL_5;
      }
      goto LABEL_34;
    }
  }
  v56 = +[NSAssertionHandler currentHandler];
  v57 = +[NSString stringWithUTF8String:"HSStage *HSTPipeline::CreateSAPipeline(NSString *__strong, __strong dispatch_queue_t, MTDeviceRef, HSStage *__strong, NSUInteger)"];
  [v56 handleFailureInFunction:v57, @"HSTSAPipelineCreation.mm", 104, @"Invalid parameter not satisfying: %@", @"queue" file lineNumber description];

  if (!a3) {
    goto LABEL_33;
  }
LABEL_4:
  if (v10) {
    goto LABEL_5;
  }
LABEL_34:
  CFStringRef v60 = +[NSAssertionHandler currentHandler];
  CFStringRef v61 = +[NSString stringWithUTF8String:"HSStage *HSTPipeline::CreateSAPipeline(NSString *__strong, __strong dispatch_queue_t, MTDeviceRef, HSStage *__strong, NSUInteger)"];
  [v60 handleFailureInFunction:v61, @"HSTSAPipelineCreation.mm", 106, @"Invalid parameter not satisfying: %@", @"eventDispatcher" file lineNumber description];

LABEL_5:
  uint64_t Service = MTDeviceGetService();
  long long v12 = (HSTPipeline *)Service;
  if (!Service)
  {
    memset(__b, 170, sizeof(__b));
    CFStringRef v63 = basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/HIDSensingTouch/HSTouchHIDService/HSTSAPipelineCreation.mm", (char *)__b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      HSTPipeline::CreateSAPipeline((uint64_t)v63);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "MTDeviceGetService returned IO_OBJECT_NULL");
  }
  CFProperty = (void *)IORegistryEntryCreateCFProperty(Service, @"Sensor Surface Descriptor", 0, 0);
  if (!CFProperty || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    CFStringRef v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v62, "couldn't find 'Sensor Surface Descriptor' data property");
    goto LABEL_40;
  }
  if ((unint64_t)[CFProperty length] <= 0xF)
  {
    CFStringRef v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v62, "'Sensor Surface Descriptor' property too short");
LABEL_40:
  }
  id v14 = CFProperty;
  long long v15 = (__int16 *)[v14 bytes];
  int v67 = v15[4];
  int v71 = v15[5];
  int v72 = v15[6];
  int v16 = v15[7];

  CFStringRef v70 = [[HSTBackboardBridge alloc] initWithQueue:v74];
  int v66 = v16;
  v78[0] = 0;
  MTDeviceCopyDeviceUsagePairs();
  memset(entryID, 0, 64);
  id v17 = 0;
  id v18 = [v17 countByEnumeratingWithState:entryID objects:__b count:16];
  if (v18)
  {
    uint64_t v19 = *(void *)entryID[2];
    while (2)
    {
      for (i = 0; i != v18; i = (char *)i + 1)
      {
        if (*(void *)entryID[2] != v19) {
          objc_enumerationMutation(v17);
        }
        long long v21 = *(void **)(entryID[1] + 8 * i);
        unint64_t v22 = [v21 objectForKeyedSubscript:@"DeviceUsagePage"];
        uint64_t v23 = [v21 objectForKeyedSubscript:@"DeviceUsage"];
        if ([v22 integerValue] == (char *)&dword_C + 1 && objc_msgSend(v23, "integerValue") == &stru_20)
        {

          entryID[0] = 0;
          IORegistryEntryGetRegistryEntryID((io_registry_entry_t)v12, entryID);
          LODWORD(v77) = 0;
          MTDeviceGetSensorSurfaceDimensions();
          *(void *)&__b[4] = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
          __b[2] = v25;
          __b[3] = v25;
          __b[0] = v25;
          __b[1] = v25;
          *(void *)&__b[0] = HSTPipeline::getUIntProperty(v12, @"VendorID", v26);
          *((void *)&__b[0] + 1) = HSTPipeline::getUIntProperty(v12, @"ProductID", v27);
          *(void *)&__b[1] = entryID[0];
          *((void *)&__b[1] + 1) = MTDeviceGetMinDigitizerPressureValue();
          *(void *)&__b[2] = MTDeviceGetAccurateMaxDigitizerPressureValue();
          *((void *)&__b[2] + 1) = MTDeviceGetExtendedMaxDigitizerPressureValue();
          *(void *)&__b[3] = MTDeviceGetMaxHoverHeightValue();
          BYTE8(__b[3]) = 0;
          *(int32x2_t *)((char *)&__b[3] + 12) = vmovn_s64(vcvtq_n_s64_f64(vdivq_f64(vcvtq_f64_u64((uint64x2_t)0), (float64x2_t)vdupq_n_s64(0x4059000000000000uLL)), 0x10uLL));
          CFStringRef v75 = [[HSTPencilVirtualService alloc] initWithConfig:__b withQueue:v74];
          goto LABEL_20;
        }
      }
      id v18 = [v17 countByEnumeratingWithState:entryID objects:__b count:16];
      if (v18) {
        continue;
      }
      break;
    }
  }

  CFStringRef v75 = 0;
LABEL_20:
  uint64_t v28 = (10 * v67);
  uint64_t v29 = (5 * v72);
  uint64_t v30 = (5 * v66);
  v78[0] = (v29 << 33) | v28;
  v78[1] = (10 * v71) | ((unint64_t)v30 << 33);
  unsigned int UIntProperty = HSTPipeline::getUIntProperty(v12, @"Sensor Columns", v24);
  v78[2] = UIntProperty | ((unint64_t)HSTPipeline::getUIntProperty(v12, @"Sensor Rows", v32) << 32);
  CFStringRef v73 = [[HSTFrameParser alloc] initWithConfig:v78];
  entryID[0] = a5;
  memset(&entryID[1], 170, 24);
  LODWORD(entryID[1]) = HSTPipeline::getUIntProperty(v12, @"Family ID", v33);
  entryID[1] = LODWORD(entryID[1]);
  v34 = (void *)IORegistryEntryCreateCFProperty((io_registry_entry_t)v12, @"SAHostFramework", kCFAllocatorDefault, 0);
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v35 = v34;
  }
  else {
    id v35 = 0;
  }

  entryID[2] = (uint64_t)v35;
  entryID[3] = a3;
  CFMutableDictionaryRef v36 = [[HSTSensingAlgs alloc] initWithConfig:entryID];
  v37 = [[HSTRecordingManager alloc] initWithPlaybackQueue:v74];
  v38 = &off_140DB0;
  if (v75) {
    v38 = off_140DA8;
  }
  id v39 = [objc_alloc(*v38) initWithDevice:a3];
  uint64_t v77 = 0x4D200000000;
  v40 = [[HSTTipOffsetFilter alloc] initWithConfig:&v77];
  __b[0] = xmmword_10FD40;
  __b[1] = xmmword_10FD50;
  __b[2] = xmmword_10FD60;
  *(void *)&__b[3] = 0x3D449BA63D83126FLL;
  DWORD2(__b[3]) = 1050656375;
  *(void *)((char *)&__b[3] + 12) = 0x13E00000320;
  CFStringRef v41 = [[HSTContactStabilizer alloc] initWithConfig:__b];
  uint64_t v76 = ((v30 << 33) - 0xA00000000 * v71) | (2 * v29 - v28);
  v42 = [[HSTHIDEventGenerator alloc] initWithConfig:&v76];
  CFMutableDictionaryRef v43 = objc_opt_new();
  v89 = v73;
  v44 = +[NSArray arrayWithObjects:&v89 count:1];
  [(HSStage *)v70 setConsumers:v44];

  if (v75)
  {
    v88 = v75;
    v45 = +[NSArray arrayWithObjects:&v88 count:1];
    [(HSStage *)v73 setConsumers:v45];

    CFStringRef v87 = v36;
    CFMutableDictionaryRef v46 = +[NSArray arrayWithObjects:&v87 count:1];
    [(HSStage *)v75 setConsumers:v46];
  }
  else
  {
    v86 = v36;
    CFMutableDictionaryRef v46 = +[NSArray arrayWithObjects:&v86 count:1];
    [(HSStage *)v73 setConsumers:v46];
  }

  v85[0] = v37;
  v85[1] = v39;
  v47 = +[NSArray arrayWithObjects:v85 count:2];
  [(HSStage *)v36 setConsumers:v47];

  CFMutableDictionaryRef v84 = v40;
  v48 = +[NSArray arrayWithObjects:&v84 count:1];
  [(HSRecordingPlaybackStage *)v37 setConsumers:v48];

  v83 = v41;
  CFMutableDictionaryRef v49 = +[NSArray arrayWithObjects:&v83 count:1];
  [(HSStage *)v40 setConsumers:v49];

  v82 = v42;
  v50 = +[NSArray arrayWithObjects:&v82 count:1];
  [(HSStage *)v41 setConsumers:v50];

  v81 = v43;
  v51 = +[NSArray arrayWithObjects:&v81 count:1];
  [(HSStage *)v42 setConsumers:v51];

  v80 = v69;
  CFMutableDictionaryRef v52 = +[NSArray arrayWithObjects:&v80 count:1];
  [v43 setConsumers:v52];

  return v70;
}

void sub_17FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

id HSTPipeline::getUIntProperty(HSTPipeline *this, const __CFString *a2, NSString *a3)
{
  CFProperty = (void *)IORegistryEntryCreateCFProperty((io_registry_entry_t)this, a2, 0, 0);
  if (CFProperty && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    id v4 = [CFProperty unsignedLongLongValue];
  }
  else {
    id v4 = 0;
  }

  return v4;
}

void sub_18218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_3()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void HSTPipeline::FirmwareUtil::SetReportWithData(HSTPipeline::FirmwareUtil *this, __MTDevice *a2, NSData *a3)
{
  id v4 = a2;
  if (!this)
  {
    id v9 = +[NSAssertionHandler currentHandler];
    id v10 = +[NSString stringWithUTF8String:"void HSTPipeline::FirmwareUtil::SetReportWithData(MTDeviceRef _Nonnull, NSData * _Nonnull __strong)"];
    [v9 handleFailureInFunction:v10, @"FirmwareUtil.mm", 10, @"Invalid parameter not satisfying: %@", @"device" file lineNumber description];
  }
  id v5 = v4;
  unint64_t v6 = (unsigned __int8 *)[(__MTDevice *)v5 bytes];
  [(__MTDevice *)v5 length];
  int v7 = MTDeviceSetReport();
  if (v7)
  {
    id v8 = MTLoggingPlugin();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      HSTPipeline::FirmwareUtil::SetReportWithData(v6, v7, v8);
    }
  }
}

void sub_18550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_187C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18A0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18ABC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18CB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18F8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_193BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id std::vector<HIDEvent * {__strong}>::push_back[abi:ne180100](char **a1, id *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  int v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = (v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)*a1;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v25 = v4;
    if (v13) {
      id v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HSUtil::CoderKey const*>>(v4, v13);
    }
    else {
      id v14 = 0;
    }
    long long v15 = &v14[8 * v10];
    int v16 = &v14[8 * v13];
    uint64_t v24 = v16;
    *(void *)long long v15 = *a2;
    id v9 = v15 + 8;
    v23.i64[1] = (uint64_t)(v15 + 8);
    id v18 = *a1;
    id v17 = a1[1];
    if (v17 == *a1)
    {
      int64x2_t v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *(void *)id v17 = 0;
        *((void *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      int64x2_t v20 = *(int64x2_t *)a1;
      id v9 = (char *)v23.i64[1];
      int v16 = v24;
    }
    *a1 = v15;
    a1[1] = v9;
    int64x2_t v23 = v20;
    long long v21 = a1[2];
    a1[2] = v16;
    uint64_t v24 = v21;
    uint64_t v22 = v20.i64[0];
    id result = (id)std::__split_buffer<HIDEvent * {__strong}>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    id result = *a2;
    *(void *)int v7 = result;
    id v9 = v7 + 8;
  }
  a1[1] = v9;
  return result;
}

void sub_19570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1988C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19A10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19BFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<HIDEvent * {__strong}>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void __cxx_global_var_init_4()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void sub_1A1FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A484(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A598(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A6E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A7EC(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A9E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_5()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void __cxx_global_var_init_15_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)110,(char)97,(char)98,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"enable", a2);
  }
}

void __cxx_global_var_init_16_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointing", a2);
  }
}

void __cxx_global_var_init_17_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClick", a2);
  }
}

void __cxx_global_var_init_18_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)103,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragging", a2);
  }
}

void __cxx_global_var_init_19_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)76,(char)111,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragLock", a2);
  }
}

void __cxx_global_var_init_20_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointMomentum", a2);
  }
}

void __cxx_global_var_init_21_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)117,(char)108,(char)116,(char)105,(char)68,(char)114,(char)97,(char)103,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"multiDragMomentum", a2);
  }
}

void __cxx_global_var_init_22_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClick", a2);
  }
}

void __cxx_global_var_init_23_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)116,(char)105,(char)99,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"verticalScrolling", a2);
  }
}

void __cxx_global_var_init_24_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)104,(char)111,(char)114,(char)105,(char)122,(char)111,(char)110,(char)116,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"horizontalScrolling", a2);
  }
}

void __cxx_global_var_init_25_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)103,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"gestureScrollingEnabled", a2);
  }
}

void __cxx_global_var_init_26_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)65,(char)99,(char)99,(char)101,(char)108,(char)101,(char)114,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollAcceleration", a2);
  }
}

void __cxx_global_var_init_27_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoom", a2);
  }
}

void __cxx_global_var_init_28_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rotate", a2);
  }
}

void __cxx_global_var_init_29_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109,(char)84,(char)111,(char)103,(char)103,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoomToggle", a2);
  }
}

void __cxx_global_var_init_30_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)104,(char)111,(char)119,(char)68,(char)101,(char)102,(char)105,(char)110,(char)105,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"showDefinition", a2);
  }
}

void __cxx_global_var_init_31_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)52,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale4F", a2);
  }
}

void __cxx_global_var_init_32_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)53,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale5F", a2);
  }
}

void __cxx_global_var_init_33_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)100,(char)103,(char)101,(char)78,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"edgeNotificationSwipe2F", a2);
  }
}

void __cxx_global_var_init_34_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)67,(char)101,(char)110,(char)116,(char)101,(char)114,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"notificationCenter2F", a2);
  }
}

void __cxx_global_var_init_35_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)108,(char)105,(char)112,(char)76,(char)101,(char)102,(char)116,(char)65,(char)110,(char)100,(char)82,(char)105,(char)103,(char)104,(char)116,(char)69,(char)100,(char)103,(char)101,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"flipLeftAndRightEdgeGestures", a2);
  }
}

void __cxx_global_var_init_36_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollMomentumEnabled", a2);
  }
}

void __cxx_global_var_init_37_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsScrollMomentum", a2);
  }
}

void __cxx_global_var_init_38_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"restingScroll", a2);
  }
}

void __cxx_global_var_init_39_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)101,(char)101,(char)110,(char)90,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"screenZoom", a2);
  }
}

void __cxx_global_var_init_40_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)121,(char)109,(char)109,(char)101,(char)116,(char)114,(char)105,(char)99,(char)90,(char)111,(char)111,(char)109,(char)82,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"symmetricZoomRotate", a2);
  }
}

void __cxx_global_var_init_41_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107,(char)87,(char)104,(char)105,(char)108,(char)101,(char)82,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClickWhileResting", a2);
  }
}

void __cxx_global_var_init_42_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)111,(char)114,(char)99,(char)101,(char)83,(char)117,(char)112,(char)112,(char)114,(char)101,(char)115,(char)115,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"forceSuppressed", a2);
  }
}

void __cxx_global_var_init_43_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)90,(char)111,(char)110,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClickZone", a2);
  }
}

void __cxx_global_var_init_44_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)105,(char)114,(char)115,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"firstClickThreshold", a2);
  }
}

void __cxx_global_var_init_45_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)101,(char)99,(char)111,(char)110,(char)100,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"secondClickThreshold", a2);
  }
}

void __cxx_global_var_init_46_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)116,(char)114,(char)101,(char)110,(char)103,(char)116,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuationStrength", a2);
  }
}

void __cxx_global_var_init_47_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)101,(char)68,(char)101,(char)116,(char)101,(char)110,(char)116,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuateDetents", a2);
  }
}

void __cxx_global_var_init_48_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientation", a2);
  }
}

void __cxx_global_var_init_49_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110,(char)77,(char)111,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientationMode", a2);
  }
}

void __cxx_global_var_init_50_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_51_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_52_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_53_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_54_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_55_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_56_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_57_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_58_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsGestureScrolling", a2);
  }
}

void __cxx_global_var_init_59_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navSwipes2F", a2);
  }
}

void __cxx_global_var_init_60_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipes2F", a2);
  }
}

void __cxx_global_var_init_61_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)105,(char)115,(char)115,(char)105,(char)111,(char)110,(char)67,(char)111,(char)110,(char)116,(char)114,(char)111,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"missionControl", a2);
  }
}

uint64_t PeppyIUnknown::QueryInterface(id **this, void *a2, CFUUIDBytes a3, void **a4)
{
  uint64_t v4 = *(void **)&a3.byte8;
  uint64_t v5 = *(void *)&a3.byte0;
  id v9 = **this;
  *(void *)&v17.byte0 = a2;
  *(void *)&v17.byte8 = v5;
  CFUUIDRef v10 = CFUUIDCreateFromUUIDBytes(0, v17);
  CFTypeRef v11 = CFAutorelease(v10);
  CFUUIDRef v12 = CFUUIDGetConstantUUIDWithBytes(0, 0xC2u, 0x44u, 0xE8u, 0x58u, 0x10u, 0x9Cu, 0x11u, 0xD4u, 0x91u, 0xD4u, 0, 0x50u, 0xE4u, 0xC6u, 0x42u, 0x6Fu);
  if (CFEqual(v11, v12))
  {
    id v13 = [v9 getPluginInterface];
  }
  else
  {
    CFUUIDRef v14 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0x6Fu, 0xE2u, 0x2Au, 0xBFu, 0x68u, 0xB9u, 0x11u, 0xDBu, 0xA7u, 0x1Fu, 0, 0x16u, 0xCBu, 0xC1u, 0x10u, 0xF7u);
    if (!CFEqual(v11, v14))
    {
      uint64_t v15 = 2147483652;
      goto LABEL_6;
    }
    id v13 = [v9 getServiceInterface];
  }
  *uint64_t v4 = v13;
  CFRetain(v9);
  uint64_t v15 = 0;
LABEL_6:

  return v15;
}

void sub_1B8AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t PeppyIUnknown::AddRef(id **this, void *a2)
{
  id v4 = **this;
  int v5 = CFGetRetainCount(v4);
  CFRetain(v4);

  return (v5 + 1);
}

void sub_1B920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t PeppyIUnknown::Release(id **this, void *a2)
{
  id v4 = **this;
  int v5 = CFGetRetainCount(v4);
  CFRelease(v4);

  return (v5 - 1);
}

void sub_1B994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id PeppyIUnknown::Probe(id **this, void *a2, const __CFDictionary *a3, uint64_t a4, int *a5)
{
  id v10 = [**this _probeWithService:a3 properties:a2 outScore:a4];
  return v10;
}

id PeppyIUnknown::Start(id **this, void *a2, const __CFDictionary *a3)
{
  id v7 = [**this _startWithService:a3 properties:a2];
  return v7;
}

id PeppyIUnknown::Stop(id **this, void *a2)
{
  id v4 = [**this _stop];
  return v4;
}

id PeppyIUnknown::open(id **this, void *a2)
{
  id v5 = [**this _openWithOptions:a2];
  return v5;
}

void PeppyIUnknown::close(id **this, void *a2)
{
  [**this _closeWithOptions:a2];
}

uint64_t PeppyIUnknown::copyProperty(id **this, void *a2, const __CFString *a3)
{
  uint64_t v6 = [**this _getPropertyForKey:a2];
  return v6;
}

id PeppyIUnknown::setProperty(id **this, void *a2, const __CFString *a3, const void *a4)
{
  id v8 = [**this _setProperty:a3 forKey:a2];
  return v8;
}

void PeppyIUnknown::setEventCallback(id **this, void *a2, void (*a3)(void *, void *, void *, __IOHIDEvent *, unsigned int), void *a4, void *a5)
{
  [**this _setEventCallback:a2 target:a3 refcon:a4];
}

void PeppyIUnknown::scheduleWithDispatchQueue(id **a1, uint64_t a2)
{
  [**a1 _scheduleWithDispatchQueue:a2];
}

void PeppyIUnknown::unscheduleFromDispatchQueue(id **a1, uint64_t a2)
{
  [**a1 _unscheduleWithDispatchQueue:a2];
}

id PeppyIUnknown::copyEvent(id **this, void *a2, uint64_t a3, __IOHIDEvent *a4)
{
  id v9 = [**this _copyEventWithType:a2 matching:a3 options:a4];
  return v9;
}

id PeppyIUnknown::setOutputEvent(id **this, void *a2, __IOHIDEvent *a3)
{
  id v6 = [**this _setOutputEvent:a2];
  return v6;
}

void sub_1BFB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C03C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C0A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C0F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C1A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C478(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

MTPListGestureConfig_ *createDefaultActionEventsDictionary(void)
{
  Mutable = (MTPListGestureConfig_ *)CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  MTPListGestureConfig_::addActionEventToDictionary(Mutable, (__CFDictionary *)@"Secondary Click", @"Mouse Click", @"Button2", 0, v1);
  MTPListGestureConfig_::addActionEventToDictionary(Mutable, (__CFDictionary *)@"Scroll", @"Scroll", 0, 0, v2);
  MTPListGestureConfig_::addActionEventToDictionary(Mutable, (__CFDictionary *)@"Scroll To Edge", @"Scroll To Edge", 0, 0, v3);
  MTPListGestureConfig_::addActionEventToDictionary(Mutable, (__CFDictionary *)@"Orientation", @"Orientation", 0, 0, v4);
  MTPListGestureConfig_::addActionEventToDictionary(Mutable, (__CFDictionary *)@"Zoom Toggle", @"Zoom Toggle", 0, 0, v5);
  MTPListGestureConfig_::addActionEventToDictionary(Mutable, (__CFDictionary *)@"Show Definition", @"Show Definition", 0, 0, v6);
  MTPListGestureConfig_::addActionEventToDictionary(Mutable, (__CFDictionary *)@"Fluid Navigation", @"Fluid Navigation", 0, 0, v7);
  MTPListGestureConfig_::addActionEventToDictionary(Mutable, (__CFDictionary *)@"Fluid Dock", @"Fluid Dock", 0, 0, v8);
  MTPListGestureConfig_::addActionEventToDictionary(Mutable, (__CFDictionary *)@"Fluid Notification", @"Fluid Notification", 0, 0, v9);
  MTPListGestureConfig_::addActionEventToDictionary(Mutable, (__CFDictionary *)@"Fluid Notification Alt", @"Fluid Notification Alt", 0, 0, v10);
  MTPListGestureConfig_::addActionEventToDictionary(Mutable, (__CFDictionary *)@"Swipe Left", @"Swipe", 0, 0, v11);
  MTPListGestureConfig_::addActionEventToDictionary(Mutable, (__CFDictionary *)@"Swipe Right", @"Swipe", 0, 0, v12);
  MTPListGestureConfig_::addActionEventToDictionary(Mutable, (__CFDictionary *)@"Swipe Up", @"Swipe", 0, 0, v13);
  MTPListGestureConfig_::addActionEventToDictionary(Mutable, (__CFDictionary *)@"Swipe Down", @"Swipe", 0, 0, v14);
  return Mutable;
}

void createMouseScrollSwipeTapCombo(__CFDictionary *a1, const __CFString *a2, int a3, int a4, int a5, int a6, int a7, int a8, BOOL a9)
{
  Mutable = (MTPListGestureConfig_ *)CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFMutableDictionaryRef v17 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  id v18 = v17;
  if (Mutable) {
    BOOL v19 = v17 == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    CFStringRef v29 = a2;
    int v20 = a3 | a4;
    int v21 = a8 | a9;
    if (v21) {
      CFStringRef v22 = @"WaitForQuick Momentum";
    }
    else {
      CFStringRef v22 = @"Momentum";
    }
    CFStringRef v23 = @"OncePerDirection";
    if (v20) {
      CFStringRef v23 = @"OncePerDirection OnlyIfAllMoving";
    }
    long long v27 = (__CFString *)v22;
    uint64_t v28 = (__CFString *)v23;
    if (a5)
    {
      MTPListGestureConfig_::addGestureToArray(Mutable, (__CFArray *)@"Zoom Toggle", @"DoubleTap", 0, 0, 0, 0, 0, v22);
      if (!a6)
      {
LABEL_18:
        if (!a7) {
          goto LABEL_19;
        }
        goto LABEL_37;
      }
    }
    else if (!a6)
    {
      goto LABEL_18;
    }
    MTPListGestureConfig_::addGestureToArray(Mutable, (__CFArray *)@"Show Definition", @"DoubleTap", 0, 0, 0, 0, 0, v27);
    if (!a7)
    {
LABEL_19:
      if (a4)
      {
LABEL_20:
        if ((a3 & a4) != 0) {
          CFStringRef v24 = @"Translate";
        }
        else {
          CFStringRef v24 = @"Vertical";
        }
        MTPListGestureConfig_::addGestureToArray(Mutable, (__CFArray *)@"Scroll", v24, @"Mouse Scrolling", v27, @"LockOnFirst", 0, 0, v27);
      }
LABEL_24:
      if (v21)
      {
        if (a9) {
          uint64_t v25 = @"Fluid Dock";
        }
        else {
          uint64_t v25 = @"Fluid Navigation";
        }
        MTPListGestureConfig_::addGestureToArray(Mutable, (__CFArray *)v25, @"Horizontal", @"Mouse Horizontal Swipe", v28, 0, 0, 0, v27);
      }
      if (v20 | v21 ^ 1) {
        CFStringRef v26 = @"ToMoreFingers ToFewerFingers FromFewerFingers FromMoreFingers";
      }
      else {
        CFStringRef v26 = @"ToMoreFingers";
      }
      CFDictionaryAddValue(v18, @"Transitions", v26);
      CFDictionaryAddValue(v18, @"Gestures", Mutable);
      CFDictionaryAddValue(a1, v29, v18);
LABEL_33:
      CFRelease(Mutable);
      if (!v18) {
        return;
      }
      goto LABEL_8;
    }
LABEL_37:
    MTPListGestureConfig_::addGestureToArray(Mutable, (__CFArray *)@"Fluid Dock", @"DoubleTap", 0, 0, 0, 0, 0, v27);
    if (a4) {
      goto LABEL_20;
    }
    goto LABEL_24;
  }
  if (Mutable) {
    goto LABEL_33;
  }
  if (!v17) {
    return;
  }
LABEL_8:

  CFRelease(v18);
}

void configureMouseGestureParser(MTPListGestureConfig_ *a1, const mt_StandardMouseSettings *a2)
{
  CFTypeRef obj = 0;
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  int v47 = 1035489772;
  int valuePtr = 1140457472;
  int v46 = 971419597;
  int v44 = 0;
  int v45 = 1097859072;
  CFNumberRef v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &valuePtr);
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &v45);
  CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &v44);
  CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &v46);
  CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &v47);
  CFStringRef v9 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFStringRef v10 = v9;
  if (v4) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    if (!v4)
    {
      if (!v5) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else
  {
    CFDictionaryRemoveAllValues(v9);
    CFDictionaryAddValue(v10, "Resolution_dpi", v4);
    CFDictionaryAddValue(v10, "AccelThresh", v5);
    CFDictionaryAddValue(v10, "AccelPower", v6);
    CFDictionaryAddValue(v10, "FrameDecay_mm", v7);
    CFDictionaryAddValue(v10, "CommitMultiplier", v8);
    CFDictionaryAddValue(Mutable, @"Mouse Scrolling", v10);
  }
  CFRelease(v4);
  if (v5) {
LABEL_8:
  }
    CFRelease(v5);
LABEL_9:
  if (v6) {
    CFRelease(v6);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v10) {
    CFRelease(v10);
  }
  int v45 = 1097859072;
  int v43 = 1087373312;
  int v44 = 1039516303;
  int v42 = 1079194419;
  int v40 = 1056964608;
  int v41 = 1106247680;
  CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &v43);
  CFNumberRef v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &v45);
  CFNumberRef v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &v44);
  CFNumberRef v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &v42);
  CFNumberRef v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &v41);
  CFNumberRef v17 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &v40);
  id v18 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  BOOL v19 = v18;
  if (v12 && v13 && v14)
  {
    CFDictionaryRemoveAllValues(v18);
    CFDictionaryAddValue(v19, "Resolution_mm", v12);
    CFDictionaryAddValue(v19, "AccelThresh", v13);
    CFDictionaryAddValue(v19, "AccelPower", v14);
    CFDictionaryAddValue(v19, "FluidAnimationStartThreshold_mm", v15);
    CFDictionaryAddValue(v19, "FluidSwipeCompleteThreshold_mm", v16);
    CFDictionaryAddValue(v19, "FluidSwipeInertiaTime_s", v17);
    CFDictionaryAddValue(Mutable, @"Mouse Vertical Swipe", v19);
  }
  else if (!v12)
  {
    goto LABEL_25;
  }
  CFRelease(v12);
LABEL_25:
  if (v13) {
    CFRelease(v13);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v19) {
    CFRelease(v19);
  }
  int v45 = 1097859072;
  int v43 = 1083179008;
  int v44 = 1041865114;
  CFNumberRef v20 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &v43);
  CFNumberRef v21 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &v45);
  CFNumberRef v22 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &v44);
  CFNumberRef v23 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &v42);
  CFNumberRef v24 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &v41);
  CFNumberRef v25 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &v40);
  CFStringRef v26 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  long long v27 = v26;
  if (v20 && v21 && v22 && v23 && v24 && v25)
  {
    CFDictionaryRemoveAllValues(v26);
    CFDictionaryAddValue(v27, "Resolution_mm", v20);
    CFDictionaryAddValue(v27, "AccelThresh", v21);
    CFDictionaryAddValue(v27, "AccelPower", v22);
    CFDictionaryAddValue(v27, "FluidAnimationStartThreshold_mm", v23);
    CFDictionaryAddValue(v27, "FluidSwipeCompleteThreshold_mm", v24);
    CFDictionaryAddValue(v27, "FluidSwipeInertiaTime_s", v25);
    CFDictionaryAddValue(Mutable, @"Mouse Horizontal Swipe", v27);
    CFRelease(v20);
    CFRelease(v21);
    CFRelease(v22);
    CFRelease(v23);
    CFRelease(v24);
    CFRelease(v25);
    CFRelease(v27);
  }
  else if (!v20)
  {
    goto LABEL_46;
  }
  CFRelease(v20);
LABEL_46:
  if (v21) {
    CFRelease(v21);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (v24) {
    CFRelease(v24);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v27) {
    CFRelease(v27);
  }
  uint64_t v28 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  DefaultActionEventsDictionary = createDefaultActionEventsDictionary();
  uint64_t v30 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v31 = CFDictionaryCreateMutable(kCFAllocatorDefault, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v32 = (MTPListGestureConfig_ *)CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  createMouseScrollSwipeTapCombo(v28, @"One Finger", a2->horizontalScrolling, a2->verticalScrolling, a2->zoomToggle, 0, 0, 0, 0);
  createMouseScrollSwipeTapCombo(v28, @"Two Fingers", a2->horizontalScrolling, a2->verticalScrolling, 0, 0, a2->missionControl, a2->navSwipes2F, a2->dockSwipes2F);
  createMouseScrollSwipeTapCombo(v28, @"Three Fingers", a2->horizontalScrolling, a2->verticalScrolling, 0, a2->showDefinition, 0, 0, 0);
  CFDictionaryAddValue(v31, @"LookupBySubset", @"TouchingFingers");
  MTPListGestureConfig_::addChordMappingToArray(v32, (__CFArray *)@"1 Finger", @"One Finger", v33);
  MTPListGestureConfig_::addChordMappingToArray(v32, (__CFArray *)@"2 Fingers", @"Two Fingers", v34);
  MTPListGestureConfig_::addChordMappingToArray(v32, (__CFArray *)@"3 Fingers", @"Three Fingers", v35);
  CFDictionaryAddValue(v31, @"Chords", v32);
  CFDictionaryAddValue(v30, @"Right", v31);
  MTGestureConfig_::clearAllChords((MTGestureConfig_ *)a1);
  MTPListGestureConfig_::setMotionSensitivitiesDictionary(a1, Mutable);
  MTPListGestureConfig_::setGestureSetsDictionary(a1, v28);
  MTPListGestureConfig_::setActionEventsDictionary(a1, DefaultActionEventsDictionary);
  MTPListGestureConfig_::setChordMappingsDictionary(a1, v30);
  MTPListGestureConfig_::parseCreateGestureConfig(a1, (const __CFString **)&obj);
  if (obj)
  {
    CFShow(obj);
    CFRelease(obj);
    CFTypeRef obj = 0;
  }
  CFMutableDictionaryRef v36 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  v37 = v36;
  if (a2->supportsGestureScrolling) {
    CFArrayAppendValue(v36, @"Scroll");
  }
  CFRelease(v37);
  CFRelease(Mutable);
  CFRelease(v28);
  CFRelease(DefaultActionEventsDictionary);
  CFRelease(v32);
  CFRelease(v31);
  CFRelease(v30);
}

void __cxx_global_var_init_6()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_currentTimestamp", a2);
  }
}

void __cxx_global_var_init_3_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_previousTimestamp", a2);
  }
}

void __cxx_global_var_init_4_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)114,(char)101,(char)108,(char)101,(char)97,(char)115,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_release", a2);
  }
}

void __cxx_global_var_init_5_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)97,(char)99,(char)116,(char)105,(char)118,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_activation", a2);
  }
}

void __cxx_global_var_init_6_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)101,(char)97,(char)114,(char)108,(char)105,(char)101,(char)115,(char)116,(char)78,(char)111,(char)110,(char)68,(char)105,(char)118,(char)105,(char)110,(char)103,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_earliestNonDivingTimestamp", a2);
  }
}

void __cxx_global_var_init_7_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)100,(char)105,(char)118,(char)105,(char)110,(char)103,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)67,(char)104,(char)97,(char)110,(char)103,(char)101,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_divingButtonChangeTimestamp", a2);
  }
}

void __cxx_global_var_init_8_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)105,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_min", a2);
  }
}

void __cxx_global_var_init_9_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_max", a2);
  }
}

void __cxx_global_var_init_10_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)66,(char)114,(char)101,(char)97,(char)107,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerBreakTouch_max", a2);
  }
}

void __cxx_global_var_init_11_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)82,(char)101,(char)115,(char)101,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentReset", a2);
  }
}

void __cxx_global_var_init_12_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)65,(char)99,(char)116,(char)105,(char)118,(char)105,(char)116,(char)121>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentButtonActivity", a2);
  }
}

void __cxx_global_var_init_13_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_firstFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_14_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_firstFingerCleanStartInRange", a2);
  }
}

void __cxx_global_var_init_15_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerCleanStartInRange", a2);
  }
}

void __cxx_global_var_init_16_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_17_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_previousRecentFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_18_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)78,(char)111,(char)110,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)100,(char)111,(char)119,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentNonThumbTouchdown", a2);
  }
}

void __cxx_global_var_init_19_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_restingThumbTouchDown", a2);
  }
}

void __cxx_global_var_init_20_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)84,(char)119,(char)111,(char)79,(char)114,(char)77,(char)111,(char)114,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentTwoOrMoreFingersTouching", a2);
  }
}

void __cxx_global_var_init_21_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)118,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFiveFingersTouching", a2);
  }
}

void __cxx_global_var_init_22_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)76,(char)105,(char)102,(char)116,(char)111,(char)102,(char)102>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerLiftoff", a2);
  }
}

void __cxx_global_var_init_23_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)69,(char)110,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerEnd", a2);
  }
}

void __cxx_global_var_init_24_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentScrollZoom", a2);
  }
}

void __cxx_global_var_init_25_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)119,(char)105,(char)116,(char)99,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentChordSwitch", a2);
  }
}

void __cxx_global_var_init_26_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentChordSlide", a2);
  }
}

void __cxx_global_var_init_27_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109,(char)83,(char)108,(char)105,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentScrollZoomSlide", a2);
  }
}

void __cxx_global_var_init_28_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)108,(char)117,(char)105,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentFluidSlide", a2);
  }
}

void __cxx_global_var_init_29_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)101,(char)120,(char)99,(char)101,(char)115,(char)115,(char)84,(char)97,(char)112,(char)77,(char)111,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_excessTapMotion", a2);
  }
}

void __cxx_global_var_init_30_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)104,(char)97,(char)110,(char)100,(char)95,(char)99,(char)104,(char)111,(char)114,(char)100,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"righthand_chords", a2);
  }
}

void __cxx_global_var_init_31_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)104,(char)111,(char)114,(char)105,(char)122,(char)111,(char)110,(char)116,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"horizontalScrolling", a2);
  }
}

void __cxx_global_var_init_32_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)116,(char)105,(char)99,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"verticalScrolling", a2);
  }
}

void __cxx_global_var_init_33_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsGestureScrolling", a2);
  }
}

void __cxx_global_var_init_34_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)103,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"gestureScrollingEnabled", a2);
  }
}

void __cxx_global_var_init_35_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navSwipes2F", a2);
  }
}

void __cxx_global_var_init_36_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipes2F", a2);
  }
}

void __cxx_global_var_init_37_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)104,(char)111,(char)119,(char)68,(char)101,(char)102,(char)105,(char)110,(char)105,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"showDefinition", a2);
  }
}

void __cxx_global_var_init_38_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)105,(char)115,(char)115,(char)105,(char)111,(char)110,(char)67,(char)111,(char)110,(char)116,(char)114,(char)111,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"missionControl", a2);
  }
}

void __cxx_global_var_init_39_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsScrollMomentum", a2);
  }
}

void __cxx_global_var_init_40_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollMomentumEnabled", a2);
  }
}

void sub_1DCD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)TrackpadAlgStage;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1E010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1E358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id HSUtil::DynamicCast<HSTPSettingsEvent>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_1E3F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id HSUtil::DynamicCast<HSMouseSettingsEvent>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_1E468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id HSUtil::DynamicCast<HSTimerEvent>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_1E4E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id HSUtil::DynamicCast<HSMomentumRequestEvent>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_1E558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id HSUtil::DynamicCast<HSMomentumStateEvent>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_1E5D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id HSUtil::DynamicCast<HSTSystemPowerEvent>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_1E648(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id HSUtil::DynamicCast<HSPointerFrame>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_1E6C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1E79C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1E948(_Unwind_Exception *a1)
{
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v5 - 72));

  _Unwind_Resume(a1);
}

void sub_1EA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1EBF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1EED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1F03C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1F0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1F178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1F20C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1F290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1F31C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1F434(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1F768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1F9A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1FAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_20028(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2056C(_Unwind_Exception *a1)
{
  CFNumberRef v4 = v3;

  _Unwind_Resume(a1);
}

void sub_2061C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void __cxx_global_var_init_7()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void __cxx_global_var_init_15_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_currentTimestamp", a2);
  }
}

void __cxx_global_var_init_16_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_previousTimestamp", a2);
  }
}

void __cxx_global_var_init_17_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)110,(char)97,(char)98,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"enable", a2);
  }
}

void __cxx_global_var_init_18_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointing", a2);
  }
}

void __cxx_global_var_init_19_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClick", a2);
  }
}

void __cxx_global_var_init_20_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)103,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragging", a2);
  }
}

void __cxx_global_var_init_21_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)76,(char)111,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragLock", a2);
  }
}

void __cxx_global_var_init_22_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointMomentum", a2);
  }
}

void __cxx_global_var_init_23_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)117,(char)108,(char)116,(char)105,(char)68,(char)114,(char)97,(char)103,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"multiDragMomentum", a2);
  }
}

void __cxx_global_var_init_24_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClick", a2);
  }
}

void __cxx_global_var_init_25_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)116,(char)105,(char)99,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"verticalScrolling", a2);
  }
}

void __cxx_global_var_init_26_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)104,(char)111,(char)114,(char)105,(char)122,(char)111,(char)110,(char)116,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"horizontalScrolling", a2);
  }
}

void __cxx_global_var_init_27_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)103,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"gestureScrollingEnabled", a2);
  }
}

void __cxx_global_var_init_28_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)65,(char)99,(char)99,(char)101,(char)108,(char)101,(char)114,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollAcceleration", a2);
  }
}

void __cxx_global_var_init_29_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoom", a2);
  }
}

void __cxx_global_var_init_30_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rotate", a2);
  }
}

void __cxx_global_var_init_31_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109,(char)84,(char)111,(char)103,(char)103,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoomToggle", a2);
  }
}

void __cxx_global_var_init_32_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)104,(char)111,(char)119,(char)68,(char)101,(char)102,(char)105,(char)110,(char)105,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"showDefinition", a2);
  }
}

void __cxx_global_var_init_33_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)52,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale4F", a2);
  }
}

void __cxx_global_var_init_34_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)53,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale5F", a2);
  }
}

void __cxx_global_var_init_35_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)100,(char)103,(char)101,(char)78,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"edgeNotificationSwipe2F", a2);
  }
}

void __cxx_global_var_init_36_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)67,(char)101,(char)110,(char)116,(char)101,(char)114,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"notificationCenter2F", a2);
  }
}

void __cxx_global_var_init_37_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)108,(char)105,(char)112,(char)76,(char)101,(char)102,(char)116,(char)65,(char)110,(char)100,(char)82,(char)105,(char)103,(char)104,(char)116,(char)69,(char)100,(char)103,(char)101,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"flipLeftAndRightEdgeGestures", a2);
  }
}

void __cxx_global_var_init_38_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollMomentumEnabled", a2);
  }
}

void __cxx_global_var_init_39_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsScrollMomentum", a2);
  }
}

void __cxx_global_var_init_40_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"restingScroll", a2);
  }
}

void __cxx_global_var_init_41_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)101,(char)101,(char)110,(char)90,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"screenZoom", a2);
  }
}

void __cxx_global_var_init_42_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)121,(char)109,(char)109,(char)101,(char)116,(char)114,(char)105,(char)99,(char)90,(char)111,(char)111,(char)109,(char)82,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"symmetricZoomRotate", a2);
  }
}

void __cxx_global_var_init_43_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107,(char)87,(char)104,(char)105,(char)108,(char)101,(char)82,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClickWhileResting", a2);
  }
}

void __cxx_global_var_init_44_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)111,(char)114,(char)99,(char)101,(char)83,(char)117,(char)112,(char)112,(char)114,(char)101,(char)115,(char)115,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"forceSuppressed", a2);
  }
}

void __cxx_global_var_init_45_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)90,(char)111,(char)110,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClickZone", a2);
  }
}

void __cxx_global_var_init_46_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)105,(char)114,(char)115,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"firstClickThreshold", a2);
  }
}

void __cxx_global_var_init_47_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)101,(char)99,(char)111,(char)110,(char)100,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"secondClickThreshold", a2);
  }
}

void __cxx_global_var_init_48_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)116,(char)114,(char)101,(char)110,(char)103,(char)116,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuationStrength", a2);
  }
}

void __cxx_global_var_init_49_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)101,(char)68,(char)101,(char)116,(char)101,(char)110,(char)116,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuateDetents", a2);
  }
}

void __cxx_global_var_init_50_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientation", a2);
  }
}

void __cxx_global_var_init_51_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110,(char)77,(char)111,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientationMode", a2);
  }
}

void __cxx_global_var_init_52_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_53_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_54_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_55_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_56_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_57_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_58_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_59_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_60_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsGestureScrolling", a2);
  }
}

void __cxx_global_var_init_61_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navSwipes2F", a2);
  }
}

void __cxx_global_var_init_62_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipes2F", a2);
  }
}

void __cxx_global_var_init_63_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)105,(char)115,(char)115,(char)105,(char)111,(char)110,(char)67,(char)111,(char)110,(char)116,(char)114,(char)111,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"missionControl", a2);
  }
}

void __cxx_global_var_init_70_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)108,(char)103,(char)83,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"algState", a2);
  }
}

void sub_21A9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)TrackpadHIDEventProcessor;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_21CB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21EE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void **a24)
{
  a24 = (void **)&a21;
  std::vector<HIDEvent * {__strong}>::__destroy_vector::operator()[abi:ne180100](&a24);

  _Unwind_Resume(a1);
}

void sub_22240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22498(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2255C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2271C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2286C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_229E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22AB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_23020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23168(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<HIDEvent * {__strong}>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  id v1 = *a1;
  id v2 = (char *)**a1;
  if (v2)
  {
    CFNumberRef v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        CFNumberRef v6 = (void *)*((void *)v4 - 1);
        v4 -= 8;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<HIDEvent * {__strong}>::__assign_with_size[abi:ne180100]<HIDEvent * {__strong}*,HIDEvent * {__strong}*>(uint64_t a1, void **a2, void **a3, unint64_t a4)
{
  CFNumberRef v6 = a2;
  CFNumberRef v8 = *(id **)a1;
  if (a4 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)
  {
    unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 3;
    if (v14 >= a4)
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HIDEvent * {__strong}*,HIDEvent * {__strong}*,HIDEvent * {__strong}*>((int)&v24, a2, a3, v8);
      uint64_t v20 = v19;
      uint64_t v21 = *(void *)(a1 + 8);
      if (v21 != v19)
      {
        do
        {
          CFNumberRef v22 = *(void **)(v21 - 8);
          v21 -= 8;
        }
        while (v21 != v20);
      }
      *(void *)(a1 + 8) = v20;
    }
    else
    {
      CFNumberRef v15 = &a2[v14];
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HIDEvent * {__strong}*,HIDEvent * {__strong}*,HIDEvent * {__strong}*>((int)&v23, a2, v15, v8);
      uint64_t v16 = *(void *)(a1 + 8);
      if (v15 != a3)
      {
        CFNumberRef v17 = *(void **)(a1 + 8);
        do
        {
          id v18 = *v15++;
          *v17++ = v18;
          v16 += 8;
        }
        while (v15 != a3);
      }
      *(void *)(a1 + 8) = v16;
    }
  }
  else
  {
    std::vector<HIDEvent * {__strong}>::__vdeallocate((void **)a1);
    if (a4 >> 61) {
      std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::atomic<HSUtil::CoderKey const*>>::__vallocate[abi:ne180100]((void *)a1, v11);
    CFNumberRef v12 = *(void **)(a1 + 8);
    while (v6 != a3)
    {
      CFNumberRef v13 = *v6++;
      *v12++ = v13;
    }
    *(void *)(a1 + 8) = v12;
  }
}

void std::vector<HIDEvent * {__strong}>::__vdeallocate(void **a1)
{
  id v1 = (char *)*a1;
  if (*a1)
  {
    CFStringRef v3 = (char *)a1[1];
    CFNumberRef v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 1);
        v3 -= 8;
      }
      while (v3 != v1);
      CFNumberRef v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HIDEvent * {__strong}*,HIDEvent * {__strong}*,HIDEvent * {__strong}*>(int a1, void **a2, void **a3, id *location)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      CFNumberRef v7 = *v5++;
      objc_storeStrong(location++, v7);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void __cxx_global_var_init_8()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void __cxx_global_var_init_9_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)110,(char)97,(char)98,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"enable", a2);
  }
}

void __cxx_global_var_init_10_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointing", a2);
  }
}

void __cxx_global_var_init_11_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClick", a2);
  }
}

void __cxx_global_var_init_12_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)103,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragging", a2);
  }
}

void __cxx_global_var_init_13_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)76,(char)111,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragLock", a2);
  }
}

void __cxx_global_var_init_14_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointMomentum", a2);
  }
}

void __cxx_global_var_init_15_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)117,(char)108,(char)116,(char)105,(char)68,(char)114,(char)97,(char)103,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"multiDragMomentum", a2);
  }
}

void __cxx_global_var_init_16_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClick", a2);
  }
}

void __cxx_global_var_init_17_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)116,(char)105,(char)99,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"verticalScrolling", a2);
  }
}

void __cxx_global_var_init_18_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)104,(char)111,(char)114,(char)105,(char)122,(char)111,(char)110,(char)116,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"horizontalScrolling", a2);
  }
}

void __cxx_global_var_init_19_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)103,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"gestureScrollingEnabled", a2);
  }
}

void __cxx_global_var_init_20_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)65,(char)99,(char)99,(char)101,(char)108,(char)101,(char)114,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollAcceleration", a2);
  }
}

void __cxx_global_var_init_21_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoom", a2);
  }
}

void __cxx_global_var_init_22_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rotate", a2);
  }
}

void __cxx_global_var_init_23_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109,(char)84,(char)111,(char)103,(char)103,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoomToggle", a2);
  }
}

void __cxx_global_var_init_24_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)104,(char)111,(char)119,(char)68,(char)101,(char)102,(char)105,(char)110,(char)105,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"showDefinition", a2);
  }
}

void __cxx_global_var_init_25_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)52,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale4F", a2);
  }
}

void __cxx_global_var_init_26_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)53,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale5F", a2);
  }
}

void __cxx_global_var_init_27_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)100,(char)103,(char)101,(char)78,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"edgeNotificationSwipe2F", a2);
  }
}

void __cxx_global_var_init_28_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)67,(char)101,(char)110,(char)116,(char)101,(char)114,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"notificationCenter2F", a2);
  }
}

void __cxx_global_var_init_29_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)108,(char)105,(char)112,(char)76,(char)101,(char)102,(char)116,(char)65,(char)110,(char)100,(char)82,(char)105,(char)103,(char)104,(char)116,(char)69,(char)100,(char)103,(char)101,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"flipLeftAndRightEdgeGestures", a2);
  }
}

void __cxx_global_var_init_30_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollMomentumEnabled", a2);
  }
}

void __cxx_global_var_init_31_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsScrollMomentum", a2);
  }
}

void __cxx_global_var_init_32_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"restingScroll", a2);
  }
}

void __cxx_global_var_init_33_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)101,(char)101,(char)110,(char)90,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"screenZoom", a2);
  }
}

void __cxx_global_var_init_34_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)121,(char)109,(char)109,(char)101,(char)116,(char)114,(char)105,(char)99,(char)90,(char)111,(char)111,(char)109,(char)82,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"symmetricZoomRotate", a2);
  }
}

void __cxx_global_var_init_35_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107,(char)87,(char)104,(char)105,(char)108,(char)101,(char)82,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClickWhileResting", a2);
  }
}

void __cxx_global_var_init_36_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)111,(char)114,(char)99,(char)101,(char)83,(char)117,(char)112,(char)112,(char)114,(char)101,(char)115,(char)115,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"forceSuppressed", a2);
  }
}

void __cxx_global_var_init_37_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)90,(char)111,(char)110,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClickZone", a2);
  }
}

void __cxx_global_var_init_38_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)105,(char)114,(char)115,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"firstClickThreshold", a2);
  }
}

void __cxx_global_var_init_39_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)101,(char)99,(char)111,(char)110,(char)100,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"secondClickThreshold", a2);
  }
}

void __cxx_global_var_init_40_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)116,(char)114,(char)101,(char)110,(char)103,(char)116,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuationStrength", a2);
  }
}

void __cxx_global_var_init_41_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)101,(char)68,(char)101,(char)116,(char)101,(char)110,(char)116,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuateDetents", a2);
  }
}

void __cxx_global_var_init_42_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientation", a2);
  }
}

void __cxx_global_var_init_43_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110,(char)77,(char)111,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientationMode", a2);
  }
}

void __cxx_global_var_init_44_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_45_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_46_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_47_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_48_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_49_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_50_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_51_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_52_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsGestureScrolling", a2);
  }
}

void __cxx_global_var_init_53_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navSwipes2F", a2);
  }
}

void __cxx_global_var_init_54_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipes2F", a2);
  }
}

void __cxx_global_var_init_55_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)105,(char)115,(char)115,(char)105,(char)111,(char)110,(char)67,(char)111,(char)110,(char)116,(char)114,(char)111,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"missionControl", a2);
  }
}

void sub_2432C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_243DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MouseSettingsManager;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_244BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_245EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24B04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void __cxx_global_var_init_9()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)104,(char)111,(char)114,(char)105,(char)122,(char)111,(char)110,(char)116,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"horizontalScrolling", a2);
  }
}

void __cxx_global_var_init_3_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)116,(char)105,(char)99,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"verticalScrolling", a2);
  }
}

void __cxx_global_var_init_4_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsGestureScrolling", a2);
  }
}

void __cxx_global_var_init_5_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)103,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"gestureScrollingEnabled", a2);
  }
}

void __cxx_global_var_init_6_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navSwipes2F", a2);
  }
}

void __cxx_global_var_init_7_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipes2F", a2);
  }
}

void __cxx_global_var_init_8_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)104,(char)111,(char)119,(char)68,(char)101,(char)102,(char)105,(char)110,(char)105,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"showDefinition", a2);
  }
}

void __cxx_global_var_init_9_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)105,(char)115,(char)115,(char)105,(char)111,(char)110,(char)67,(char)111,(char)110,(char)116,(char)114,(char)111,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"missionControl", a2);
  }
}

void __cxx_global_var_init_10_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsScrollMomentum", a2);
  }
}

void __cxx_global_var_init_11_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollMomentumEnabled", a2);
  }
}

void __cxx_global_var_init_12_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_13_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_14_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_15_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_16_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_17_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_18_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void __cxx_global_var_init_19_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)110,(char)97,(char)98,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"enable", a2);
  }
}

void __cxx_global_var_init_20_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointing", a2);
  }
}

void __cxx_global_var_init_21_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClick", a2);
  }
}

void __cxx_global_var_init_22_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)103,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragging", a2);
  }
}

void __cxx_global_var_init_23_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)76,(char)111,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragLock", a2);
  }
}

void __cxx_global_var_init_24_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointMomentum", a2);
  }
}

void __cxx_global_var_init_25_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)117,(char)108,(char)116,(char)105,(char)68,(char)114,(char)97,(char)103,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"multiDragMomentum", a2);
  }
}

void __cxx_global_var_init_26_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClick", a2);
  }
}

void __cxx_global_var_init_27_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)65,(char)99,(char)99,(char)101,(char)108,(char)101,(char)114,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollAcceleration", a2);
  }
}

void __cxx_global_var_init_28_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoom", a2);
  }
}

void __cxx_global_var_init_29_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rotate", a2);
  }
}

void __cxx_global_var_init_30_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109,(char)84,(char)111,(char)103,(char)103,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoomToggle", a2);
  }
}

void __cxx_global_var_init_31_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)52,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale4F", a2);
  }
}

void __cxx_global_var_init_32_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)53,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale5F", a2);
  }
}

void __cxx_global_var_init_33_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)100,(char)103,(char)101,(char)78,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"edgeNotificationSwipe2F", a2);
  }
}

void __cxx_global_var_init_34_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)67,(char)101,(char)110,(char)116,(char)101,(char)114,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"notificationCenter2F", a2);
  }
}

void __cxx_global_var_init_35_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)108,(char)105,(char)112,(char)76,(char)101,(char)102,(char)116,(char)65,(char)110,(char)100,(char)82,(char)105,(char)103,(char)104,(char)116,(char)69,(char)100,(char)103,(char)101,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"flipLeftAndRightEdgeGestures", a2);
  }
}

void __cxx_global_var_init_36_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"restingScroll", a2);
  }
}

void __cxx_global_var_init_37_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)101,(char)101,(char)110,(char)90,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"screenZoom", a2);
  }
}

void __cxx_global_var_init_38_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)121,(char)109,(char)109,(char)101,(char)116,(char)114,(char)105,(char)99,(char)90,(char)111,(char)111,(char)109,(char)82,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"symmetricZoomRotate", a2);
  }
}

void __cxx_global_var_init_39_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107,(char)87,(char)104,(char)105,(char)108,(char)101,(char)82,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClickWhileResting", a2);
  }
}

void __cxx_global_var_init_40_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)111,(char)114,(char)99,(char)101,(char)83,(char)117,(char)112,(char)112,(char)114,(char)101,(char)115,(char)115,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"forceSuppressed", a2);
  }
}

void __cxx_global_var_init_41_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)90,(char)111,(char)110,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClickZone", a2);
  }
}

void __cxx_global_var_init_42_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)105,(char)114,(char)115,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"firstClickThreshold", a2);
  }
}

void __cxx_global_var_init_43_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)101,(char)99,(char)111,(char)110,(char)100,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"secondClickThreshold", a2);
  }
}

void __cxx_global_var_init_44_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)116,(char)114,(char)101,(char)110,(char)103,(char)116,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuationStrength", a2);
  }
}

void __cxx_global_var_init_45_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)101,(char)68,(char)101,(char)116,(char)101,(char)110,(char)116,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuateDetents", a2);
  }
}

void __cxx_global_var_init_46_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientation", a2);
  }
}

void __cxx_global_var_init_47_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110,(char)77,(char)111,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientationMode", a2);
  }
}

void __cxx_global_var_init_48_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_49_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_50_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_51_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_52_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_53_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_54_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_55_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_59_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)109,(char)83,(char)101,(char)116,(char)116,(char)105,(char)110,(char)103,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_mSettings", a2);
  }
}

void sub_25BE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25D24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25DE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void setReport<HSTPipeline::FirmwareInterface::FeatureReport::HostNotificationControl>(uint64_t a1)
{
  if (!a1)
  {
    CFNumberRef v4 = +[NSAssertionHandler currentHandler];
    uint64_t v5 = +[NSString stringWithUTF8String:"void setReport(MTDeviceRef, const T &) [T = HSTPipeline::FirmwareInterface::FeatureReport::HostNotificationControl]"];
    [v4 handleFailureInFunction:v5, @"HSTFirmwareManager.mm", 200, @"Invalid parameter not satisfying: %@", @"device" file lineNumber description];

    CFNumberRef v6 = +[NSAssertionHandler currentHandler];
    CFNumberRef v7 = +[NSString stringWithUTF8String:"IOReturn HSTPipeline::FirmwareUtil::SetReport(MTDeviceRef _Nonnull, const T &) [T = HSTPipeline::FirmwareInterface::FeatureReport::HostNotificationControl]"];
    [v6 handleFailureInFunction:v7, @"FirmwareUtil.h", 9, @"Invalid parameter not satisfying: %@", @"device" file lineNumber description];
  }
  mach_error_t v1 = MTDeviceSetReport();
  if (v1)
  {
    mach_error_t v2 = v1;
    CFStringRef v3 = MTLoggingPlugin();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      mach_error_string(v2);
      setReport<HSTPipeline::FirmwareInterface::FeatureReport::HostNotificationControl>();
    }
  }
}

void sub_25F84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_26240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_262C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_26410(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_266C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t createEnabledInputsReport(__int16 a1, unsigned int a2)
{
  *(void *)&v6[1] = 589824;
  if ((a1 & 1) == 0)
  {
    __int16 v2 = 0;
    if ((a1 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_9:
    __int16 v3 = -32759;
    if ((a1 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (a2 >= 3) {
    __int16 v2 = -32359;
  }
  else {
    __int16 v2 = -32355;
  }
  *(_WORD *)&v6[1] = v2;
  if ((a1 & 2) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  v2 |= 0x202u;
  *(_WORD *)&v6[1] = v2;
  *(_WORD *)&unsigned __int8 v6[3] = 523;
  __int16 v3 = -32245;
  if ((a1 & 4) != 0) {
LABEL_10:
  }
    *(_WORD *)&unsigned __int8 v6[3] = v3;
LABEL_11:
  if ((a1 & 8) != 0)
  {
    v2 |= 1u;
    *(_WORD *)&v6[1] = v2;
    __int16 v4 = 1;
    *(_WORD *)&v6[5] = 1;
  }
  else
  {
    __int16 v4 = 0;
  }
  if ((a1 & 0x90) != 0)
  {
    v2 |= 0x1000u;
    *(_WORD *)&v6[1] = v2;
    v4 |= 0x1000u;
    *(_WORD *)&v6[5] = v4;
  }
  if ((a1 & 0x120) != 0)
  {
    v2 |= 0x2000u;
    *(_WORD *)&v6[1] = v2;
    v4 |= 0x2000u;
    *(_WORD *)&v6[5] = v4;
  }
  if ((a1 & 0x240) != 0)
  {
    v2 |= 0x4000u;
    *(_WORD *)&v6[1] = v2;
    v4 |= 0x4000u;
    *(_WORD *)&v6[5] = v4;
  }
  if ((a1 & 0x800) != 0)
  {
    v2 |= 0x800u;
    *(_WORD *)&v6[1] = v2;
    *(_WORD *)&v6[5] = v4 | 0x800;
  }
  if ((a1 & 0x400) != 0) {
    *(_WORD *)&v6[1] = v2 | 0x400;
  }
  return *(void *)v6;
}

void setReport<HSTPipeline::FirmwareInterface::FeatureReport::EnabledInputs::Awake>(uint64_t a1)
{
  if (!a1)
  {
    __int16 v4 = +[NSAssertionHandler currentHandler];
    uint64_t v5 = +[NSString stringWithUTF8String:"void setReport(MTDeviceRef, const T &) [T = HSTPipeline::FirmwareInterface::FeatureReport::EnabledInputs::Awake]"];
    [v4 handleFailureInFunction:v5, @"HSTFirmwareManager.mm", 200, @"Invalid parameter not satisfying: %@", @"device" file lineNumber description];

    CFNumberRef v6 = +[NSAssertionHandler currentHandler];
    CFNumberRef v7 = +[NSString stringWithUTF8String:"IOReturn HSTPipeline::FirmwareUtil::SetReport(MTDeviceRef _Nonnull, const T &) [T = HSTPipeline::FirmwareInterface::FeatureReport::EnabledInputs::Awake]"];
    [v6 handleFailureInFunction:v7, @"FirmwareUtil.h", 9, @"Invalid parameter not satisfying: %@", @"device" file lineNumber description];
  }
  mach_error_t v1 = MTDeviceSetReport();
  if (v1)
  {
    mach_error_t v2 = v1;
    __int16 v3 = MTLoggingPlugin();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      mach_error_string(v2);
      setReport<HSTPipeline::FirmwareInterface::FeatureReport::HostNotificationControl>();
    }
  }
}

void sub_26990(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void setReport<HSTPipeline::FirmwareInterface::FeatureReport::DataMode>(uint64_t a1)
{
  if (!a1)
  {
    __int16 v4 = +[NSAssertionHandler currentHandler];
    uint64_t v5 = +[NSString stringWithUTF8String:"void setReport(MTDeviceRef, const T &) [T = HSTPipeline::FirmwareInterface::FeatureReport::DataMode]"];
    [v4 handleFailureInFunction:v5, @"HSTFirmwareManager.mm", 200, @"Invalid parameter not satisfying: %@", @"device" file lineNumber description];

    CFNumberRef v6 = +[NSAssertionHandler currentHandler];
    CFNumberRef v7 = +[NSString stringWithUTF8String:"IOReturn HSTPipeline::FirmwareUtil::SetReport(MTDeviceRef _Nonnull, const T &) [T = HSTPipeline::FirmwareInterface::FeatureReport::DataMode]"];
    [v6 handleFailureInFunction:v7, @"FirmwareUtil.h", 9, @"Invalid parameter not satisfying: %@", @"device" file lineNumber description];
  }
  mach_error_t v1 = MTDeviceSetReport();
  if (v1)
  {
    mach_error_t v2 = v1;
    __int16 v3 = MTLoggingPlugin();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      mach_error_string(v2);
      setReport<HSTPipeline::FirmwareInterface::FeatureReport::HostNotificationControl>();
    }
  }
}

void sub_26C90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void setReport<HSTPipeline::FirmwareInterface::FeatureReport::HostInterruptMode>(uint64_t a1)
{
  if (!a1)
  {
    __int16 v4 = +[NSAssertionHandler currentHandler];
    uint64_t v5 = +[NSString stringWithUTF8String:"void setReport(MTDeviceRef, const T &) [T = HSTPipeline::FirmwareInterface::FeatureReport::HostInterruptMode]"];
    [v4 handleFailureInFunction:v5, @"HSTFirmwareManager.mm", 200, @"Invalid parameter not satisfying: %@", @"device" file lineNumber description];

    CFNumberRef v6 = +[NSAssertionHandler currentHandler];
    CFNumberRef v7 = +[NSString stringWithUTF8String:"IOReturn HSTPipeline::FirmwareUtil::SetReport(MTDeviceRef _Nonnull, const T &) [T = HSTPipeline::FirmwareInterface::FeatureReport::HostInterruptMode]"];
    [v6 handleFailureInFunction:v7, @"FirmwareUtil.h", 9, @"Invalid parameter not satisfying: %@", @"device" file lineNumber description];
  }
  mach_error_t v1 = MTDeviceSetReport();
  if (v1)
  {
    mach_error_t v2 = v1;
    __int16 v3 = MTLoggingPlugin();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      mach_error_string(v2);
      setReport<HSTPipeline::FirmwareInterface::FeatureReport::HostNotificationControl>();
    }
  }
}

void sub_26E48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_26ED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_27188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_27254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_27360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_27458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2757C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id HSUtil::DynamicCast<HSTProxClearedAfterOccludedWakeEvent>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_2761C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id HSUtil::DynamicCast<HSTExternalMessageEvent>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_27694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_27D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_27E84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_27F8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2815C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  HSUtil::ObjectLock::~ObjectLock((id *)va);
  _Unwind_Resume(a1);
}

void sub_284B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id getIntProperty(__MTDevice *a1, NSString *a2)
{
  id v2 = a2;
  io_registry_entry_t Service = MTDeviceGetService();
  CFProperty = (void *)IORegistryEntryCreateCFProperty(Service, v2, 0, 0);
  if (CFProperty && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    id v5 = [CFProperty longLongValue];
  }
  else {
    id v5 = 0;
  }

  return v5;
}

void sub_28560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void setReport<HSTPipeline::FirmwareInterface::FeatureReport::FaceDetectionMode>(uint64_t a1)
{
  if (!a1)
  {
    __int16 v4 = +[NSAssertionHandler currentHandler];
    id v5 = +[NSString stringWithUTF8String:"void setReport(MTDeviceRef, const T &) [T = HSTPipeline::FirmwareInterface::FeatureReport::FaceDetectionMode]"];
    [v4 handleFailureInFunction:v5, @"HSTFirmwareManager.mm", 200, @"Invalid parameter not satisfying: %@", @"device" file lineNumber description];

    CFNumberRef v6 = +[NSAssertionHandler currentHandler];
    CFNumberRef v7 = +[NSString stringWithUTF8String:"IOReturn HSTPipeline::FirmwareUtil::SetReport(MTDeviceRef _Nonnull, const T &) [T = HSTPipeline::FirmwareInterface::FeatureReport::FaceDetectionMode]"];
    [v6 handleFailureInFunction:v7, @"FirmwareUtil.h", 9, @"Invalid parameter not satisfying: %@", @"device" file lineNumber description];
  }
  mach_error_t v1 = MTDeviceSetReport();
  if (v1)
  {
    mach_error_t v2 = v1;
    __int16 v3 = MTLoggingPlugin();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      mach_error_string(v2);
      setReport<HSTPipeline::FirmwareInterface::FeatureReport::HostNotificationControl>();
    }
  }
}

void sub_2888C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_289E0(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_28B00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_28C34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_28E74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_29064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_291E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2941C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_297AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_29948(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_1_0(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(_DWORD *)(a3 + 4) = result;
  *(_WORD *)(a3 + 8) = 2082;
  *(void *)(a3 + 1objc_storeStrong(&location, 0) = a2;
  return result;
}

void OUTLINED_FUNCTION_3(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_error_impl(a1, a4, OS_LOG_TYPE_ERROR, a2, a3, 0x12u);
}

void __cxx_global_var_init_10()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_8_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_9_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_10_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_11_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_12_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_13_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_14_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void __cxx_global_var_init_21_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)119,(char)101,(char)114,(char)101,(char)100,(char)87,(char)104,(char)101,(char)110,(char)83,(char)99,(char)114,(char)101,(char)101,(char)110,(char)79,(char)102,(char)102>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"poweredWhenScreenOff", a2);
  }
}

void __cxx_global_var_init_22_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)111,(char)117,(char)99,(char)104,(char)77,(char)111,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"touchMode", a2);
  }
}

void __cxx_global_var_init_23_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)114,(char)101,(char)118,(char)84,(char)111,(char)117,(char)99,(char)104,(char)77,(char)111,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"prevTouchMode", a2);
  }
}

void __cxx_global_var_init_24_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)101,(char)101,(char)110,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"screenOrientation", a2);
  }
}

void __cxx_global_var_init_25_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)111,(char)99,(char)107,(char)104,(char)111,(char)108,(char)109,(char)83,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"stockholmState", a2);
  }
}

void __cxx_global_var_init_26_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)119,(char)105,(char)114,(char)101,(char)108,(char)101,(char)115,(char)115,(char)67,(char)104,(char)97,(char)114,(char)103,(char)105,(char)110,(char)103,(char)83,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"wirelessChargingState", a2);
  }
}

void __cxx_global_var_init_27_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)115,(char)98,(char)67,(char)104,(char)97,(char)114,(char)103,(char)105,(char)110,(char)103,(char)83,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"usbChargingState", a2);
  }
}

void __cxx_global_var_init_28_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)117,(char)99,(char)107,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)101,(char)116,(char)101,(char)99,(char)116,(char)111,(char)114,(char)83,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"stuckTouchDetectorState", a2);
  }
}

void __cxx_global_var_init_29_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)105,(char)109,(char)97,(char)103,(char)101,(char)115,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"imagesEnabled", a2);
  }
}

void __cxx_global_var_init_30_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)101,(char)112,(char)111,(char)114,(char)116,(char)65,(char)108,(char)119,(char)97,(char)121,(char)115,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"reportAlwaysEnabled", a2);
  }
}

void __cxx_global_var_init_181(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)119,(char)114,(char)105,(char)115,(char)116,(char)83,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"wristState", a2);
  }
}

void sub_2B4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,void *a27,void *a28)
{
  _Unwind_Resume(a1);
}

void sub_2B94C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2B9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_11()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void sub_2BF24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2BFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)TrackpadSettingsManager;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_2C2FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2C41C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2C5FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2C714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2C7E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2C8B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2D0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_2D2D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2D3C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2D56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2D75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void __cxx_global_var_init_12()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)110,(char)97,(char)98,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"enable", a2);
  }
}

void __cxx_global_var_init_3_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointing", a2);
  }
}

void __cxx_global_var_init_4_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClick", a2);
  }
}

void __cxx_global_var_init_5_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)103,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragging", a2);
  }
}

void __cxx_global_var_init_6_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)76,(char)111,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragLock", a2);
  }
}

void __cxx_global_var_init_7_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointMomentum", a2);
  }
}

void __cxx_global_var_init_8_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)117,(char)108,(char)116,(char)105,(char)68,(char)114,(char)97,(char)103,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"multiDragMomentum", a2);
  }
}

void __cxx_global_var_init_9_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClick", a2);
  }
}

void __cxx_global_var_init_10_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)116,(char)105,(char)99,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"verticalScrolling", a2);
  }
}

void __cxx_global_var_init_11_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)104,(char)111,(char)114,(char)105,(char)122,(char)111,(char)110,(char)116,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"horizontalScrolling", a2);
  }
}

void __cxx_global_var_init_12_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)103,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"gestureScrollingEnabled", a2);
  }
}

void __cxx_global_var_init_13_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)65,(char)99,(char)99,(char)101,(char)108,(char)101,(char)114,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollAcceleration", a2);
  }
}

void __cxx_global_var_init_14_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoom", a2);
  }
}

void __cxx_global_var_init_15_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rotate", a2);
  }
}

void __cxx_global_var_init_16_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109,(char)84,(char)111,(char)103,(char)103,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoomToggle", a2);
  }
}

void __cxx_global_var_init_17_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)104,(char)111,(char)119,(char)68,(char)101,(char)102,(char)105,(char)110,(char)105,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"showDefinition", a2);
  }
}

void __cxx_global_var_init_18_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)52,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale4F", a2);
  }
}

void __cxx_global_var_init_19_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)53,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale5F", a2);
  }
}

void __cxx_global_var_init_20_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)100,(char)103,(char)101,(char)78,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"edgeNotificationSwipe2F", a2);
  }
}

void __cxx_global_var_init_21_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)67,(char)101,(char)110,(char)116,(char)101,(char)114,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"notificationCenter2F", a2);
  }
}

void __cxx_global_var_init_22_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)108,(char)105,(char)112,(char)76,(char)101,(char)102,(char)116,(char)65,(char)110,(char)100,(char)82,(char)105,(char)103,(char)104,(char)116,(char)69,(char)100,(char)103,(char)101,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"flipLeftAndRightEdgeGestures", a2);
  }
}

void __cxx_global_var_init_23_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollMomentumEnabled", a2);
  }
}

void __cxx_global_var_init_24_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsScrollMomentum", a2);
  }
}

void __cxx_global_var_init_25_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"restingScroll", a2);
  }
}

void __cxx_global_var_init_26_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)101,(char)101,(char)110,(char)90,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"screenZoom", a2);
  }
}

void __cxx_global_var_init_27_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)121,(char)109,(char)109,(char)101,(char)116,(char)114,(char)105,(char)99,(char)90,(char)111,(char)111,(char)109,(char)82,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"symmetricZoomRotate", a2);
  }
}

void __cxx_global_var_init_28_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107,(char)87,(char)104,(char)105,(char)108,(char)101,(char)82,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClickWhileResting", a2);
  }
}

void __cxx_global_var_init_29_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)111,(char)114,(char)99,(char)101,(char)83,(char)117,(char)112,(char)112,(char)114,(char)101,(char)115,(char)115,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"forceSuppressed", a2);
  }
}

void __cxx_global_var_init_30_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)90,(char)111,(char)110,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClickZone", a2);
  }
}

void __cxx_global_var_init_31_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)105,(char)114,(char)115,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"firstClickThreshold", a2);
  }
}

void __cxx_global_var_init_32_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)101,(char)99,(char)111,(char)110,(char)100,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"secondClickThreshold", a2);
  }
}

void __cxx_global_var_init_33_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)116,(char)114,(char)101,(char)110,(char)103,(char)116,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuationStrength", a2);
  }
}

void __cxx_global_var_init_34_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)101,(char)68,(char)101,(char)116,(char)101,(char)110,(char)116,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuateDetents", a2);
  }
}

void __cxx_global_var_init_35_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientation", a2);
  }
}

void __cxx_global_var_init_36_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110,(char)77,(char)111,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientationMode", a2);
  }
}

void __cxx_global_var_init_37_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_38_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_39_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_40_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_41_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_42_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_43_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_44_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_45_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_46_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_47_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_48_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_49_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_50_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_51_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void __cxx_global_var_init_52_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)112,(char)83,(char)101,(char)116,(char)116,(char)105,(char)110,(char)103,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tpSettings", a2);
  }
}

void sub_2E4E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2E6B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2E75C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2E7D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2EACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2ECC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_13()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void __cxx_global_var_init_15_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)110,(char)97,(char)98,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"enable", a2);
  }
}

void __cxx_global_var_init_16_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointing", a2);
  }
}

void __cxx_global_var_init_17_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClick", a2);
  }
}

void __cxx_global_var_init_18_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)103,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragging", a2);
  }
}

void __cxx_global_var_init_19_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)76,(char)111,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragLock", a2);
  }
}

void __cxx_global_var_init_20_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointMomentum", a2);
  }
}

void __cxx_global_var_init_21_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)117,(char)108,(char)116,(char)105,(char)68,(char)114,(char)97,(char)103,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"multiDragMomentum", a2);
  }
}

void __cxx_global_var_init_22_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClick", a2);
  }
}

void __cxx_global_var_init_23_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)116,(char)105,(char)99,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"verticalScrolling", a2);
  }
}

void __cxx_global_var_init_24_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)104,(char)111,(char)114,(char)105,(char)122,(char)111,(char)110,(char)116,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"horizontalScrolling", a2);
  }
}

void __cxx_global_var_init_25_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)103,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"gestureScrollingEnabled", a2);
  }
}

void __cxx_global_var_init_26_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)65,(char)99,(char)99,(char)101,(char)108,(char)101,(char)114,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollAcceleration", a2);
  }
}

void __cxx_global_var_init_27_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoom", a2);
  }
}

void __cxx_global_var_init_28_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rotate", a2);
  }
}

void __cxx_global_var_init_29_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109,(char)84,(char)111,(char)103,(char)103,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoomToggle", a2);
  }
}

void __cxx_global_var_init_30_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)104,(char)111,(char)119,(char)68,(char)101,(char)102,(char)105,(char)110,(char)105,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"showDefinition", a2);
  }
}

void __cxx_global_var_init_31_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)52,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale4F", a2);
  }
}

void __cxx_global_var_init_32_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)53,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale5F", a2);
  }
}

void __cxx_global_var_init_33_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)100,(char)103,(char)101,(char)78,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"edgeNotificationSwipe2F", a2);
  }
}

void __cxx_global_var_init_34_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)67,(char)101,(char)110,(char)116,(char)101,(char)114,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"notificationCenter2F", a2);
  }
}

void __cxx_global_var_init_35_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)108,(char)105,(char)112,(char)76,(char)101,(char)102,(char)116,(char)65,(char)110,(char)100,(char)82,(char)105,(char)103,(char)104,(char)116,(char)69,(char)100,(char)103,(char)101,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"flipLeftAndRightEdgeGestures", a2);
  }
}

void __cxx_global_var_init_36_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollMomentumEnabled", a2);
  }
}

void __cxx_global_var_init_37_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsScrollMomentum", a2);
  }
}

void __cxx_global_var_init_38_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"restingScroll", a2);
  }
}

void __cxx_global_var_init_39_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)101,(char)101,(char)110,(char)90,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"screenZoom", a2);
  }
}

void __cxx_global_var_init_40_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)121,(char)109,(char)109,(char)101,(char)116,(char)114,(char)105,(char)99,(char)90,(char)111,(char)111,(char)109,(char)82,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"symmetricZoomRotate", a2);
  }
}

void __cxx_global_var_init_41_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107,(char)87,(char)104,(char)105,(char)108,(char)101,(char)82,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClickWhileResting", a2);
  }
}

void __cxx_global_var_init_42_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)111,(char)114,(char)99,(char)101,(char)83,(char)117,(char)112,(char)112,(char)114,(char)101,(char)115,(char)115,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"forceSuppressed", a2);
  }
}

void __cxx_global_var_init_43_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)90,(char)111,(char)110,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClickZone", a2);
  }
}

void __cxx_global_var_init_44_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)105,(char)114,(char)115,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"firstClickThreshold", a2);
  }
}

void __cxx_global_var_init_45_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)101,(char)99,(char)111,(char)110,(char)100,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"secondClickThreshold", a2);
  }
}

void __cxx_global_var_init_46_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)116,(char)114,(char)101,(char)110,(char)103,(char)116,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuationStrength", a2);
  }
}

void __cxx_global_var_init_47_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)101,(char)68,(char)101,(char)116,(char)101,(char)110,(char)116,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuateDetents", a2);
  }
}

void __cxx_global_var_init_48_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientation", a2);
  }
}

void __cxx_global_var_init_49_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110,(char)77,(char)111,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientationMode", a2);
  }
}

void __cxx_global_var_init_50_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_51_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_52_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_53_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_54_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_55_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_56_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_57_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_58_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsGestureScrolling", a2);
  }
}

void __cxx_global_var_init_59_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navSwipes2F", a2);
  }
}

void __cxx_global_var_init_60_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipes2F", a2);
  }
}

void __cxx_global_var_init_61_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)105,(char)115,(char)115,(char)105,(char)111,(char)110,(char)67,(char)111,(char)110,(char)116,(char)114,(char)111,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"missionControl", a2);
  }
}

void sub_2FB28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2FEB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_30028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)HSTouchHIDService;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

uint64_t HSUtil::SendRight::reset(uint64_t this)
{
  mach_port_name_t v1 = *(_DWORD *)(this + 8);
  if (v1 - 1 <= 0xFFFFFFFD)
  {
    uint64_t v2 = this;
    this = mach_port_deallocate(mach_task_self_, v1);
    if (this) {
      HSUtil::SendRight::reset();
    }
    *(_DWORD *)(v2 + 8) = 0;
  }
  return this;
}

void sub_307BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

void sub_308EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_309FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_30AB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_30BE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_30D10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_30E4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_3156C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id a36)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a36);
  _Unwind_Resume(a1);
}

id HSPipeline::FindStage<HSTRecordingManager>(void *a1)
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x3032000000;
  CFNumberRef v7 = __Block_byref_object_copy__446;
  CFNumberRef v8 = __Block_byref_object_dispose__447;
  id v9 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = ___ZN10HSPipeline9FindStageI19HSTRecordingManagerEEPT_P7HSStage_block_invoke;
  v3[3] = &unk_141590;
  v3[4] = &v4;
  HSPipeline::WalkStages(a1, v3);
  id v1 = (id)v5[5];
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_3173C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_318A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_31A28(_Unwind_Exception *exception_object)
{
}

void sub_31BCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_32020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_32490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  id v1 = (void **)(a1 + 48);
  std::vector<HIDEvent * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void sub_32730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_329F0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);

  if (a2 == 1)
  {
    id v9 = __cxa_begin_catch(a1);
    uint64_t v10 = *(NSObject **)(v4 + 24);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      [(HSTouchHIDService *)(uint64_t)v9 _handleSysdiagnoseStarted];
    }
    __cxa_end_catch();
    JUMPOUT(0x328E8);
  }

  HSUtil::File::~File((HSUtil::File *)va);
  _Unwind_Resume(a1);
}

HSUtil::File *HSUtil::File::File(HSUtil::File *this, int a2)
{
  v4[0] = &off_141448;
  v4[1] = &off_141478;
  int v5 = a2;
  HSUtil::File::File((uint64_t)this, (uint64_t)v4);
  HSUtil::FileDescriptor::~FileDescriptor((HSUtil::FileDescriptor *)v4);
  return this;
}

void sub_32B2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HSUtil::FileDescriptor::~FileDescriptor((HSUtil::FileDescriptor *)va);
  _Unwind_Resume(a1);
}

uint64_t HSUtil::File::flush(HSUtil::File *this)
{
  int v2 = HSUtil::FileDescriptor::fd((HSUtil::File *)((char *)this + 16));
  uint64_t result = ftruncate(v2, *((void *)this + 5));
  if (result) {
    *((unsigned char *)this + 48) = 0;
  }
  return result;
}

void HSAccessProvider::MoveFile(HSAccessProvider *this, NSString *a2, NSString *a3)
{
  uint64_t v4 = this;
  int v5 = a2;
  uint64_t v6 = v5;
  if (v4)
  {
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    CFNumberRef v12 = +[NSAssertionHandler currentHandler];
    CFNumberRef v13 = +[NSString stringWithUTF8String:"void HSAccessProvider::MoveFile(NSString *__strong, NSString *__strong)"];
    [v12 handleFailureInFunction:v13, @"HSAccessProvider.h", 60, @"Invalid parameter not satisfying: %@", @"srcPath" file lineNumber description];

    if (v6) {
      goto LABEL_3;
    }
  }
  unint64_t v14 = +[NSAssertionHandler currentHandler];
  CFNumberRef v15 = +[NSString stringWithUTF8String:"void HSAccessProvider::MoveFile(NSString *__strong, NSString *__strong)"];
  [v14 handleFailureInFunction:v15, @"HSAccessProvider.h", 61, @"Invalid parameter not satisfying: %@", @"dstPath" file lineNumber description];

LABEL_3:
  CFNumberRef v7 = xpc_connection_create("com.apple.hid.HIDSensingInternalSupport.HIDSensingAccessProvider", 0);
  CFNumberRef v8 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "xpc_connection_create returned null");
  }
  xpc_connection_set_event_handler(v7, &__block_literal_global_1);
  xpc_connection_activate(v8);
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_uint64(v9, "CommandKey", 2uLL);
  CFNumberRef v17 = v4;
  xpc_dictionary_set_string(v9, "SrcPathKey", (const char *)[(HSAccessProvider *)v17 UTF8String]);
  uint64_t v10 = v6;
  xpc_dictionary_set_string(v9, "DstPathKey", [(NSString *)v10 UTF8String]);
  xpc_object_t v11 = xpc_connection_send_message_with_reply_sync(v8, v9);
  HSAccessProvider::validateSendMessageReply(v11);
}

void sub_32DA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_32EB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_33074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_33348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id HSTouchHIDServiceFactory(uint64_t a1, const void *a2)
{
  CFUUIDRef v3 = CFUUIDGetConstantUUIDWithBytes(0, 5u, 0x16u, 0xB5u, 0x63u, 0xB1u, 0x5Bu, 0x11u, 0xDAu, 0x96u, 0xEBu, 0, 0x14u, 0x51u, 0x97u, 0x58u, 0xEFu);
  if (!CFEqual(a2, v3)) {
    return 0;
  }
  uint64_t v4 = objc_opt_new();
  CFRetain(v4);
  id v5 = [v4 getPluginInterface];

  return v5;
}

void sub_33580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t HSUtil::SendRight::SendRight(uint64_t a1, mach_port_name_t a2)
{
  kern_return_t v3;

  *(_DWORD *)(a1 + 8) = a2;
  *(void *)a1 = &off_141408;
  if (a2 - 1 <= 0xFFFFFFFD)
  {
    CFUUIDRef v3 = mach_port_mod_refs(mach_task_self_, a2, 0, 1);
    if (v3)
    {
      if (v3 != 17) {
        HSUtil::SendRight::SendRight();
      }
      if (mach_port_mod_refs(mach_task_self_, *(_DWORD *)(a1 + 8), 4u, 1)) {
        HSUtil::SendRight::SendRight();
      }
    }
  }
  return a1;
}

void HSUtil::SendRight::~SendRight(HSUtil::SendRight *this)
{
  *(void *)this = &off_141408;
  HSUtil::SendRight::reset((uint64_t)this);
}

{
  HSUtil::SendRight::~SendRight(this);
}

uint64_t HSUtil::FileDescriptor::read(HSUtil::FileDescriptor *this, uint64_t a2, void *a3, size_t a4)
{
  if ((*((_DWORD *)this + 4) & 0x80000000) != 0) {
    return 9;
  }
  if (a2) {
    return 45;
  }
  while (read(*((_DWORD *)this + 4), a3, a4) < 0)
  {
    if (*__error() != 4) {
      return *__error();
    }
  }
  return 0;
}

uint64_t HSUtil::FileDescriptor::readLength(HSUtil::FileDescriptor *this)
{
  return 45;
}

uint64_t HSUtil::FileDescriptor::write(HSUtil::FileDescriptor *this, uint64_t a2, const void *__buf, size_t __nbyte)
{
  if ((*((_DWORD *)this + 4) & 0x80000000) != 0) {
    return 9;
  }
  if (a2) {
    return 45;
  }
  while (write(*((_DWORD *)this + 4), __buf, __nbyte) < 0)
  {
    if (*__error() != 4) {
      return *__error();
    }
  }
  return 0;
}

uint64_t HSUtil::FileDescriptor::writeLength(HSUtil::FileDescriptor *this)
{
  return 45;
}

uint64_t non-virtual thunk to'HSUtil::FileDescriptor::write(HSUtil::FileDescriptor *this, uint64_t a2, const void *a3, size_t a4)
{
  return HSUtil::FileDescriptor::write((HSUtil::FileDescriptor *)((char *)this - 8), a2, a3, a4);
}

uint64_t non-virtual thunk to'HSUtil::FileDescriptor::writeLength(HSUtil::FileDescriptor *this)
{
  return 45;
}

uint64_t HSUtil::File::File(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1414D0;
  *(void *)(a1 + 8) = &off_141500;
  *(void *)(a1 + 16) = &off_141448;
  *(void *)(a1 + 24) = &off_141478;
  *(_DWORD *)(a1 + 32) = -1;
  *(void *)(a1 + 4objc_storeStrong(&location, 0) = 0;
  *(unsigned char *)(a1 + 48) = 1;
  HSUtil::File::_init(a1, a2);
  return a1;
}

void sub_33880(_Unwind_Exception *a1)
{
  HSUtil::FileDescriptor::~FileDescriptor(v1);
  _Unwind_Resume(a1);
}

uint64_t HSUtil::File::_init(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (HSUtil::FileDescriptor *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 32);
  if ((v5 & 0x80000000) == 0)
  {
    close(v5);
    *(_DWORD *)(a1 + 32) = -1;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = -1;
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v9.st_blksize = v6;
  *(timespec *)v9.st_qspare = v6;
  v9.st_birthtimespec = v6;
  *(timespec *)&v9.st_size = v6;
  v9.st_mtimespec = v6;
  v9.st_ctimespec = v6;
  *(timespec *)&v9.st_uid = v6;
  v9.st_atimespec = v6;
  *(timespec *)&v9.st_deBOOL v = v6;
  int v7 = HSUtil::FileDescriptor::fd(v4);
  uint64_t result = fstat(v7, &v9);
  if (result || v9.st_size < 0) {
    *(unsigned char *)(a1 + 48) = 0;
  }
  else {
    *(void *)(a1 + 4objc_storeStrong(&location, 0) = v9.st_size;
  }
  return result;
}

uint64_t HSUtil::File::read(HSUtil::File *this, unint64_t a2, void *a3, size_t a4)
{
  unint64_t v4 = *((void *)this + 5);
  BOOL v5 = v4 >= a2;
  size_t v6 = v4 - a2;
  if (!v5) {
    return 34;
  }
  if (v6 >= a4) {
    size_t v10 = a4;
  }
  else {
    size_t v10 = v6;
  }
  int v11 = HSUtil::FileDescriptor::fd((HSUtil::File *)((char *)this + 16));
  if (pread(v11, a3, v10, a2) < 0) {
    return *__error();
  }
  else {
    return 0;
  }
}

uint64_t HSUtil::File::readLength(HSUtil::File *this)
{
  return 0;
}

uint64_t HSUtil::File::write(HSUtil::File *this, off_t a2, const void *a3, size_t a4)
{
  if (__CFADD__(a2, a4)) {
    return 34;
  }
  int v9 = HSUtil::FileDescriptor::fd((HSUtil::File *)((char *)this + 16));
  if (pwrite(v9, a3, a4, a2) < 0) {
    return *__error();
  }
  uint64_t result = 0;
  if (a4 + a2 > *((void *)this + 5)) {
    *((void *)this + 5) = a4 + a2;
  }
  return result;
}

uint64_t HSUtil::File::writeLength(HSUtil::File *this, uint64_t a2)
{
  *((void *)this + 5) = a2;
  return 0;
}

uint64_t non-virtual thunk to'HSUtil::File::write(HSUtil::File *this, off_t a2, const void *a3, size_t a4)
{
  return HSUtil::File::write((HSUtil::File *)((char *)this - 8), a2, a3, a4);
}

uint64_t non-virtual thunk to'HSUtil::File::writeLength(HSUtil::File *this, uint64_t a2)
{
  *((void *)this + 4) = a2;
  return 0;
}

uint64_t HSUtil::FileDescriptor::fd(HSUtil::FileDescriptor *this)
{
  uint64_t result = *((unsigned int *)this + 4);
  if ((result & 0x80000000) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "attempt to access invalid file descriptor");
  }
  return result;
}

void sub_33AD8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void HSUtil::FileDescriptor::~FileDescriptor(HSUtil::FileDescriptor *this)
{
  *(void *)this = &off_141448;
  *((void *)this + 1) = &off_141478;
  int v2 = *((_DWORD *)this + 4);
  if ((v2 & 0x80000000) == 0)
  {
    close(v2);
    *((_DWORD *)this + 4) = -1;
  }
}

{
  HSUtil::FileDescriptor::~FileDescriptor(this);
}

void HSAccessProvider::validateSendMessageReply(void *a1)
{
  id v1 = a1;
  xpc_object_t object = v1;
  if (!v1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "xpc_connection_send_message_with_reply_sync returned null");
    goto LABEL_10;
  }
  if (xpc_get_type(v1) == (xpc_type_t)&_xpc_type_error)
  {
    CFUUIDRef v3 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v8, "xpc_connection_send_message_with_reply_sync failed: ");
    string = xpc_dictionary_get_string(object, _xpc_error_key_description);
    BOOL v5 = std::string::append(&v8, string);
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v3, &v9);
  }
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_dictionary)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "xpc_connection_send_message_with_reply_sync returned non-dictionary");
LABEL_10:
  }
}

void sub_33CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void HSUtil::File::~File(HSUtil::File *this)
{
  *(void *)this = &off_1414D0;
  *((void *)this + 1) = &off_141500;
  HSUtil::File::flush(this);
  HSUtil::FileDescriptor::~FileDescriptor((HSUtil::File *)((char *)this + 16));
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    long long v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    long long v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
}

void sub_33ED8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

uint64_t __Block_byref_object_copy__446(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4objc_storeStrong(&location, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4objc_storeStrong(&location, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__447(uint64_t a1)
{
}

BOOL ___ZN10HSPipeline9FindStageI19HSTRecordingManagerEEPT_P7HSStage_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }

  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  long long v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 4objc_storeStrong(&location, 0) = v4;

  BOOL v7 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) == 0;
  return v7;
}

void sub_33FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_1(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_3_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_6(uint64_t result, uint64_t a2, float a3)
{
  *(float *)a2 = a3;
  *(void *)(a2 + 4) = result;
  return result;
}

void OUTLINED_FUNCTION_8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_9(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void OUTLINED_FUNCTION_11(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

uint64_t OUTLINED_FUNCTION_13()
{
  return v0;
}

void OUTLINED_FUNCTION_14(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void __cxx_global_var_init_14()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void __cxx_global_var_init_15_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)110,(char)97,(char)98,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"enable", a2);
  }
}

void __cxx_global_var_init_16_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointing", a2);
  }
}

void __cxx_global_var_init_17_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClick", a2);
  }
}

void __cxx_global_var_init_18_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)103,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragging", a2);
  }
}

void __cxx_global_var_init_19_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)76,(char)111,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragLock", a2);
  }
}

void __cxx_global_var_init_20_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointMomentum", a2);
  }
}

void __cxx_global_var_init_21_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)117,(char)108,(char)116,(char)105,(char)68,(char)114,(char)97,(char)103,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"multiDragMomentum", a2);
  }
}

void __cxx_global_var_init_22_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClick", a2);
  }
}

void __cxx_global_var_init_23_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)116,(char)105,(char)99,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"verticalScrolling", a2);
  }
}

void __cxx_global_var_init_24_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)104,(char)111,(char)114,(char)105,(char)122,(char)111,(char)110,(char)116,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"horizontalScrolling", a2);
  }
}

void __cxx_global_var_init_25_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)103,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"gestureScrollingEnabled", a2);
  }
}

void __cxx_global_var_init_26_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)65,(char)99,(char)99,(char)101,(char)108,(char)101,(char)114,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollAcceleration", a2);
  }
}

void __cxx_global_var_init_27_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoom", a2);
  }
}

void __cxx_global_var_init_28_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rotate", a2);
  }
}

void __cxx_global_var_init_29_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109,(char)84,(char)111,(char)103,(char)103,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoomToggle", a2);
  }
}

void __cxx_global_var_init_30_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)104,(char)111,(char)119,(char)68,(char)101,(char)102,(char)105,(char)110,(char)105,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"showDefinition", a2);
  }
}

void __cxx_global_var_init_31_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)52,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale4F", a2);
  }
}

void __cxx_global_var_init_32_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)53,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale5F", a2);
  }
}

void __cxx_global_var_init_33_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)100,(char)103,(char)101,(char)78,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"edgeNotificationSwipe2F", a2);
  }
}

void __cxx_global_var_init_34_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)67,(char)101,(char)110,(char)116,(char)101,(char)114,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"notificationCenter2F", a2);
  }
}

void __cxx_global_var_init_35_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)108,(char)105,(char)112,(char)76,(char)101,(char)102,(char)116,(char)65,(char)110,(char)100,(char)82,(char)105,(char)103,(char)104,(char)116,(char)69,(char)100,(char)103,(char)101,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"flipLeftAndRightEdgeGestures", a2);
  }
}

void __cxx_global_var_init_36_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollMomentumEnabled", a2);
  }
}

void __cxx_global_var_init_37_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsScrollMomentum", a2);
  }
}

void __cxx_global_var_init_38_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"restingScroll", a2);
  }
}

void __cxx_global_var_init_39_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)101,(char)101,(char)110,(char)90,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"screenZoom", a2);
  }
}

void __cxx_global_var_init_40_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)121,(char)109,(char)109,(char)101,(char)116,(char)114,(char)105,(char)99,(char)90,(char)111,(char)111,(char)109,(char)82,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"symmetricZoomRotate", a2);
  }
}

void __cxx_global_var_init_41_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107,(char)87,(char)104,(char)105,(char)108,(char)101,(char)82,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClickWhileResting", a2);
  }
}

void __cxx_global_var_init_42_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)111,(char)114,(char)99,(char)101,(char)83,(char)117,(char)112,(char)112,(char)114,(char)101,(char)115,(char)115,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"forceSuppressed", a2);
  }
}

void __cxx_global_var_init_43_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)90,(char)111,(char)110,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClickZone", a2);
  }
}

void __cxx_global_var_init_44_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)105,(char)114,(char)115,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"firstClickThreshold", a2);
  }
}

void __cxx_global_var_init_45_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)101,(char)99,(char)111,(char)110,(char)100,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"secondClickThreshold", a2);
  }
}

void __cxx_global_var_init_46_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)116,(char)114,(char)101,(char)110,(char)103,(char)116,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuationStrength", a2);
  }
}

void __cxx_global_var_init_47_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)101,(char)68,(char)101,(char)116,(char)101,(char)110,(char)116,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuateDetents", a2);
  }
}

void __cxx_global_var_init_48_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientation", a2);
  }
}

void __cxx_global_var_init_49_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110,(char)77,(char)111,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientationMode", a2);
  }
}

void __cxx_global_var_init_50_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_51_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_52_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_53_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_54_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_55_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_56_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_57_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_58_4(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsGestureScrolling", a2);
  }
}

void __cxx_global_var_init_59_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navSwipes2F", a2);
  }
}

void __cxx_global_var_init_60_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipes2F", a2);
  }
}

void __cxx_global_var_init_61_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)105,(char)115,(char)115,(char)105,(char)111,(char)110,(char)67,(char)111,(char)110,(char)116,(char)114,(char)111,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"missionControl", a2);
  }
}

void sub_34F18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_35564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_356B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_3586C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_35950(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_35AE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_35C0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_35ED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_36198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_36314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_36444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_15()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void __cxx_global_var_init_9_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)110,(char)97,(char)98,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"enable", a2);
  }
}

void __cxx_global_var_init_10_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointing", a2);
  }
}

void __cxx_global_var_init_11_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClick", a2);
  }
}

void __cxx_global_var_init_12_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)103,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragging", a2);
  }
}

void __cxx_global_var_init_13_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)76,(char)111,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragLock", a2);
  }
}

void __cxx_global_var_init_14_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointMomentum", a2);
  }
}

void __cxx_global_var_init_15_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)117,(char)108,(char)116,(char)105,(char)68,(char)114,(char)97,(char)103,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"multiDragMomentum", a2);
  }
}

void __cxx_global_var_init_16_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClick", a2);
  }
}

void __cxx_global_var_init_17_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)116,(char)105,(char)99,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"verticalScrolling", a2);
  }
}

void __cxx_global_var_init_18_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)104,(char)111,(char)114,(char)105,(char)122,(char)111,(char)110,(char)116,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"horizontalScrolling", a2);
  }
}

void __cxx_global_var_init_19_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)103,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"gestureScrollingEnabled", a2);
  }
}

void __cxx_global_var_init_20_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)65,(char)99,(char)99,(char)101,(char)108,(char)101,(char)114,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollAcceleration", a2);
  }
}

void __cxx_global_var_init_21_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoom", a2);
  }
}

void __cxx_global_var_init_22_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rotate", a2);
  }
}

void __cxx_global_var_init_23_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109,(char)84,(char)111,(char)103,(char)103,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoomToggle", a2);
  }
}

void __cxx_global_var_init_24_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)104,(char)111,(char)119,(char)68,(char)101,(char)102,(char)105,(char)110,(char)105,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"showDefinition", a2);
  }
}

void __cxx_global_var_init_25_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)52,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale4F", a2);
  }
}

void __cxx_global_var_init_26_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)53,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale5F", a2);
  }
}

void __cxx_global_var_init_27_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)100,(char)103,(char)101,(char)78,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"edgeNotificationSwipe2F", a2);
  }
}

void __cxx_global_var_init_28_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)67,(char)101,(char)110,(char)116,(char)101,(char)114,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"notificationCenter2F", a2);
  }
}

void __cxx_global_var_init_29_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)108,(char)105,(char)112,(char)76,(char)101,(char)102,(char)116,(char)65,(char)110,(char)100,(char)82,(char)105,(char)103,(char)104,(char)116,(char)69,(char)100,(char)103,(char)101,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"flipLeftAndRightEdgeGestures", a2);
  }
}

void __cxx_global_var_init_30_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollMomentumEnabled", a2);
  }
}

void __cxx_global_var_init_31_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsScrollMomentum", a2);
  }
}

void __cxx_global_var_init_32_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"restingScroll", a2);
  }
}

void __cxx_global_var_init_33_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)101,(char)101,(char)110,(char)90,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"screenZoom", a2);
  }
}

void __cxx_global_var_init_34_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)121,(char)109,(char)109,(char)101,(char)116,(char)114,(char)105,(char)99,(char)90,(char)111,(char)111,(char)109,(char)82,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"symmetricZoomRotate", a2);
  }
}

void __cxx_global_var_init_35_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107,(char)87,(char)104,(char)105,(char)108,(char)101,(char)82,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClickWhileResting", a2);
  }
}

void __cxx_global_var_init_36_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)111,(char)114,(char)99,(char)101,(char)83,(char)117,(char)112,(char)112,(char)114,(char)101,(char)115,(char)115,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"forceSuppressed", a2);
  }
}

void __cxx_global_var_init_37_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)90,(char)111,(char)110,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClickZone", a2);
  }
}

void __cxx_global_var_init_38_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)105,(char)114,(char)115,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"firstClickThreshold", a2);
  }
}

void __cxx_global_var_init_39_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)101,(char)99,(char)111,(char)110,(char)100,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"secondClickThreshold", a2);
  }
}

void __cxx_global_var_init_40_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)116,(char)114,(char)101,(char)110,(char)103,(char)116,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuationStrength", a2);
  }
}

void __cxx_global_var_init_41_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)101,(char)68,(char)101,(char)116,(char)101,(char)110,(char)116,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuateDetents", a2);
  }
}

void __cxx_global_var_init_42_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientation", a2);
  }
}

void __cxx_global_var_init_43_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110,(char)77,(char)111,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientationMode", a2);
  }
}

void __cxx_global_var_init_44_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_45_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_46_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_47_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_48_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_49_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_50_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_51_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_52_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsGestureScrolling", a2);
  }
}

void __cxx_global_var_init_53_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navSwipes2F", a2);
  }
}

void __cxx_global_var_init_54_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipes2F", a2);
  }
}

void __cxx_global_var_init_55_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)105,(char)115,(char)115,(char)105,(char)111,(char)110,(char)67,(char)111,(char)110,(char)116,(char)114,(char)111,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"missionControl", a2);
  }
}

void HSTPipeline::CreateMousePipeline(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a4;
  if (v7)
  {
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    CFNumberRef v13 = +[NSAssertionHandler currentHandler];
    unint64_t v14 = +[NSString stringWithUTF8String:"HSStage *HSTPipeline::CreateMousePipeline(NSString *__strong, __strong dispatch_queue_t, MTDeviceRef, HSStage *__strong)"];
    [v13 handleFailureInFunction:v14, @"HSMousePipelineCreation.mm", 45, @"Invalid parameter not satisfying: %@", @"defaultsDomain" file lineNumber description];

    if (v8)
    {
LABEL_3:
      if (a3) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  CFNumberRef v15 = +[NSAssertionHandler currentHandler];
  uint64_t v16 = +[NSString stringWithUTF8String:"HSStage *HSTPipeline::CreateMousePipeline(NSString *__strong, __strong dispatch_queue_t, MTDeviceRef, HSStage *__strong)"];
  [v15 handleFailureInFunction:v16, @"HSMousePipelineCreation.mm", 46, @"Invalid parameter not satisfying: %@", @"queue" file lineNumber description];

  if (a3)
  {
LABEL_4:
    if (v9) {
      goto LABEL_5;
    }
LABEL_13:
    uint64_t v19 = +[NSAssertionHandler currentHandler];
    uint64_t v20 = +[NSString stringWithUTF8String:"HSStage *HSTPipeline::CreateMousePipeline(NSString *__strong, __strong dispatch_queue_t, MTDeviceRef, HSStage *__strong)"];
    [v19 handleFailureInFunction:v20, @"HSMousePipelineCreation.mm", 48, @"Invalid parameter not satisfying: %@", @"eventDispatcher" file lineNumber description];

LABEL_5:
    uint64_t ParserOptions = MTDeviceGetParserOptions();
    MTDeviceGetDeviceID();
    if (MTDeviceGetService())
    {
      uint64_t v22 = +[NSString stringWithFormat:@"%@.Preferences", v7];
      int v11 = [HSPreferenceStage alloc];
      CFNumberRef v12 = +[NSUserDefaults standardUserDefaults];
      [(HSPreferenceStage *)v11 initWithUserDefaults:v12 domain:v22];

      if (!v22)
      {
        memset(__b, 170, sizeof(__b));
        basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/HIDSensingTouch/HSTouchHIDService/HSMousePipelineCreation.mm", (char *)__b);
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          HSTPipeline::CreateMousePipeline();
        }
      }
      MTDeviceGetSensorSurfaceDimensions();
      [[[MouseBridge alloc] initWithDevice:a3 parserOptions:ParserOptions] setQueue:v8];
      operator new();
    }
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/HIDSensingTouch/HSTouchHIDService/HSMousePipelineCreation.mm", (char *)__b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      HSTPipeline::CreateMousePipeline();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "MTDeviceGetService returned IO_OBJECT_NULL");
  }
LABEL_12:
  CFNumberRef v17 = +[NSAssertionHandler currentHandler];
  id v18 = +[NSString stringWithUTF8String:"HSStage *HSTPipeline::CreateMousePipeline(NSString *__strong, __strong dispatch_queue_t, MTDeviceRef, HSStage *__strong)"];
  [v17 handleFailureInFunction:v18, @"HSMousePipelineCreation.mm", 47, @"Invalid parameter not satisfying: %@", @"device" file lineNumber description];

  if (v9) {
    goto LABEL_5;
  }
  goto LABEL_13;
}

void sub_378B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

id HSTPipeline::getIntProperty(HSTPipeline *this, const __CFString *a2, NSString *a3)
{
  CFProperty = (void *)IORegistryEntryCreateCFProperty((io_registry_entry_t)this, a2, 0, 0);
  if (CFProperty && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    id v4 = [CFProperty longLongValue];
  }
  else {
    id v4 = 0;
  }

  return v4;
}

{
  void *CFProperty;
  id v4;

  CFProperty = (void *)IORegistryEntryCreateCFProperty((io_registry_entry_t)this, a2, 0, 0);
  if (CFProperty && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    id v4 = [CFProperty longLongValue];
  }
  else {
    id v4 = 0;
  }

  return v4;
}

void sub_37AD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::shared_ptr<MTSurfaceDimensions_>::shared_ptr[abi:ne180100]<MTSurfaceDimensions_,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_37B4C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<MTSurfaceDimensions_>::shared_ptr[abi:ne180100]<MTSurfaceDimensions_,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<MTSurfaceDimensions_ *,std::shared_ptr<MTSurfaceDimensions_>::__shared_ptr_default_delete<MTSurfaceDimensions_,MTSurfaceDimensions_>,std::allocator<MTSurfaceDimensions_>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t std::__shared_ptr_pointer<MTSurfaceDimensions_ *,std::shared_ptr<MTSurfaceDimensions_>::__shared_ptr_default_delete<MTSurfaceDimensions_,MTSurfaceDimensions_>,std::allocator<MTSurfaceDimensions_>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MTSurfaceDimensions_ *,std::shared_ptr<MTSurfaceDimensions_>::__shared_ptr_default_delete<MTSurfaceDimensions_,MTSurfaceDimensions_>,std::allocator<MTSurfaceDimensions_>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void __cxx_global_var_init_16()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void __cxx_global_var_init_15_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)104,(char)111,(char)114,(char)105,(char)122,(char)111,(char)110,(char)116,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"horizontalScrolling", a2);
  }
}

void __cxx_global_var_init_16_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)116,(char)105,(char)99,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"verticalScrolling", a2);
  }
}

void __cxx_global_var_init_17_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsGestureScrolling", a2);
  }
}

void __cxx_global_var_init_18_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)103,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"gestureScrollingEnabled", a2);
  }
}

void __cxx_global_var_init_19_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navSwipes2F", a2);
  }
}

void __cxx_global_var_init_20_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipes2F", a2);
  }
}

void __cxx_global_var_init_21_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)104,(char)111,(char)119,(char)68,(char)101,(char)102,(char)105,(char)110,(char)105,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"showDefinition", a2);
  }
}

void __cxx_global_var_init_22_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)105,(char)115,(char)115,(char)105,(char)111,(char)110,(char)67,(char)111,(char)110,(char)116,(char)114,(char)111,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"missionControl", a2);
  }
}

void __cxx_global_var_init_23_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsScrollMomentum", a2);
  }
}

void __cxx_global_var_init_24_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollMomentumEnabled", a2);
  }
}

void __cxx_global_var_init_25_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_currentTimestamp", a2);
  }
}

void __cxx_global_var_init_26_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_previousTimestamp", a2);
  }
}

_UNKNOWN **HSTPipeline::RequestedTrackpadProperties(HSTPipeline *this)
{
  return &off_14A1A8;
}

void HSTPipeline::CreateTrackpadPipeline(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a4;
  if (v7)
  {
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v10 = +[NSAssertionHandler currentHandler];
    int v11 = +[NSString stringWithUTF8String:"HSStage *HSTPipeline::CreateTrackpadPipeline(NSString *__strong, __strong dispatch_queue_t, MTDeviceRef, HSStage *__strong)"];
    [v10 handleFailureInFunction:v11, @"HSTrackpadPipelineCreation.m", 89, @"Invalid parameter not satisfying: %@", @"defaultsDomain" file lineNumber description];

    if (v8)
    {
LABEL_3:
      if (a3) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  CFNumberRef v12 = +[NSAssertionHandler currentHandler];
  CFNumberRef v13 = +[NSString stringWithUTF8String:"HSStage *HSTPipeline::CreateTrackpadPipeline(NSString *__strong, __strong dispatch_queue_t, MTDeviceRef, HSStage *__strong)"];
  [v12 handleFailureInFunction:v13, @"HSTrackpadPipelineCreation.m", 90, @"Invalid parameter not satisfying: %@", @"queue" file lineNumber description];

  if (a3)
  {
LABEL_4:
    if (v9) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v16 = +[NSAssertionHandler currentHandler];
    CFNumberRef v17 = +[NSString stringWithUTF8String:"HSStage *HSTPipeline::CreateTrackpadPipeline(NSString *__strong, __strong dispatch_queue_t, MTDeviceRef, HSStage *__strong)"];
    [v16 handleFailureInFunction:v17, @"HSTrackpadPipelineCreation.m", 92, @"Invalid parameter not satisfying: %@", @"eventDispatcher" file lineNumber description];

LABEL_5:
    MTDeviceGetParserType();
    MTDeviceGetParserOptions();
    MTDeviceGetDeviceID();
    MTDeviceGetSensorSurfaceDimensions();
    operator new();
  }
LABEL_8:
  unint64_t v14 = +[NSAssertionHandler currentHandler];
  CFNumberRef v15 = +[NSString stringWithUTF8String:"HSStage *HSTPipeline::CreateTrackpadPipeline(NSString *__strong, __strong dispatch_queue_t, MTDeviceRef, HSStage *__strong)"];
  [v14 handleFailureInFunction:v15, @"HSTrackpadPipelineCreation.m", 91, @"Invalid parameter not satisfying: %@", @"device" file lineNumber description];

  if (v9) {
    goto LABEL_5;
  }
  goto LABEL_9;
}

void sub_38C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_38F04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_17()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void __cxx_global_var_init_15_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)110,(char)97,(char)98,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"enable", a2);
  }
}

void __cxx_global_var_init_16_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointing", a2);
  }
}

void __cxx_global_var_init_17_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClick", a2);
  }
}

void __cxx_global_var_init_18_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)103,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragging", a2);
  }
}

void __cxx_global_var_init_19_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)76,(char)111,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragLock", a2);
  }
}

void __cxx_global_var_init_20_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointMomentum", a2);
  }
}

void __cxx_global_var_init_21_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)117,(char)108,(char)116,(char)105,(char)68,(char)114,(char)97,(char)103,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"multiDragMomentum", a2);
  }
}

void __cxx_global_var_init_22_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClick", a2);
  }
}

void __cxx_global_var_init_23_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)116,(char)105,(char)99,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"verticalScrolling", a2);
  }
}

void __cxx_global_var_init_24_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)104,(char)111,(char)114,(char)105,(char)122,(char)111,(char)110,(char)116,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"horizontalScrolling", a2);
  }
}

void __cxx_global_var_init_25_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)103,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"gestureScrollingEnabled", a2);
  }
}

void __cxx_global_var_init_26_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)65,(char)99,(char)99,(char)101,(char)108,(char)101,(char)114,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollAcceleration", a2);
  }
}

void __cxx_global_var_init_27_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoom", a2);
  }
}

void __cxx_global_var_init_28_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rotate", a2);
  }
}

void __cxx_global_var_init_29_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109,(char)84,(char)111,(char)103,(char)103,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoomToggle", a2);
  }
}

void __cxx_global_var_init_30_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)104,(char)111,(char)119,(char)68,(char)101,(char)102,(char)105,(char)110,(char)105,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"showDefinition", a2);
  }
}

void __cxx_global_var_init_31_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)52,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale4F", a2);
  }
}

void __cxx_global_var_init_32_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)53,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale5F", a2);
  }
}

void __cxx_global_var_init_33_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)100,(char)103,(char)101,(char)78,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"edgeNotificationSwipe2F", a2);
  }
}

void __cxx_global_var_init_34_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)67,(char)101,(char)110,(char)116,(char)101,(char)114,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"notificationCenter2F", a2);
  }
}

void __cxx_global_var_init_35_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)108,(char)105,(char)112,(char)76,(char)101,(char)102,(char)116,(char)65,(char)110,(char)100,(char)82,(char)105,(char)103,(char)104,(char)116,(char)69,(char)100,(char)103,(char)101,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"flipLeftAndRightEdgeGestures", a2);
  }
}

void __cxx_global_var_init_36_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollMomentumEnabled", a2);
  }
}

void __cxx_global_var_init_37_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsScrollMomentum", a2);
  }
}

void __cxx_global_var_init_38_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"restingScroll", a2);
  }
}

void __cxx_global_var_init_39_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)101,(char)101,(char)110,(char)90,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"screenZoom", a2);
  }
}

void __cxx_global_var_init_40_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)121,(char)109,(char)109,(char)101,(char)116,(char)114,(char)105,(char)99,(char)90,(char)111,(char)111,(char)109,(char)82,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"symmetricZoomRotate", a2);
  }
}

void __cxx_global_var_init_41_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107,(char)87,(char)104,(char)105,(char)108,(char)101,(char)82,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClickWhileResting", a2);
  }
}

void __cxx_global_var_init_42_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)111,(char)114,(char)99,(char)101,(char)83,(char)117,(char)112,(char)112,(char)114,(char)101,(char)115,(char)115,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"forceSuppressed", a2);
  }
}

void __cxx_global_var_init_43_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)90,(char)111,(char)110,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClickZone", a2);
  }
}

void __cxx_global_var_init_44_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)105,(char)114,(char)115,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"firstClickThreshold", a2);
  }
}

void __cxx_global_var_init_45_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)101,(char)99,(char)111,(char)110,(char)100,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"secondClickThreshold", a2);
  }
}

void __cxx_global_var_init_46_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)116,(char)114,(char)101,(char)110,(char)103,(char)116,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuationStrength", a2);
  }
}

void __cxx_global_var_init_47_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)101,(char)68,(char)101,(char)116,(char)101,(char)110,(char)116,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuateDetents", a2);
  }
}

void __cxx_global_var_init_48_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientation", a2);
  }
}

void __cxx_global_var_init_49_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110,(char)77,(char)111,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientationMode", a2);
  }
}

void __cxx_global_var_init_50_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_51_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_52_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_53_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_54_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_55_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_56_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_57_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_58_5(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsGestureScrolling", a2);
  }
}

void __cxx_global_var_init_59_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navSwipes2F", a2);
  }
}

void __cxx_global_var_init_60_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipes2F", a2);
  }
}

void __cxx_global_var_init_61_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)105,(char)115,(char)115,(char)105,(char)111,(char)110,(char)67,(char)111,(char)110,(char)116,(char)114,(char)111,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"missionControl", a2);
  }
}

void __cxx_global_var_init_65_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_currentTimestamp", a2);
  }
}

void __cxx_global_var_init_66_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_previousTimestamp", a2);
  }
}

void sub_39D84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_39E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)TrackpadActuatorStage;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_3A158(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id HSUtil::DynamicCast<HSTHostStateEvent>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_3A20C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_3A2C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_3A400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_3A4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_3A56C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_3A6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_3A91C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_3AACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id actMatchedCallback(void *a1, const char *a2)
{
  return [a1 handleActMatching:a2];
}

void sub_3B1F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_18()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_18(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void __cxx_global_var_init_15_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)110,(char)97,(char)98,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"enable", a2);
  }
}

void __cxx_global_var_init_16_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointing", a2);
  }
}

void __cxx_global_var_init_17_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClick", a2);
  }
}

void __cxx_global_var_init_18_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)103,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragging", a2);
  }
}

void __cxx_global_var_init_19_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)76,(char)111,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragLock", a2);
  }
}

void __cxx_global_var_init_20_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointMomentum", a2);
  }
}

void __cxx_global_var_init_21_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)117,(char)108,(char)116,(char)105,(char)68,(char)114,(char)97,(char)103,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"multiDragMomentum", a2);
  }
}

void __cxx_global_var_init_22_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClick", a2);
  }
}

void __cxx_global_var_init_23_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)116,(char)105,(char)99,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"verticalScrolling", a2);
  }
}

void __cxx_global_var_init_24_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)104,(char)111,(char)114,(char)105,(char)122,(char)111,(char)110,(char)116,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"horizontalScrolling", a2);
  }
}

void __cxx_global_var_init_25_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)103,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"gestureScrollingEnabled", a2);
  }
}

void __cxx_global_var_init_26_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)65,(char)99,(char)99,(char)101,(char)108,(char)101,(char)114,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollAcceleration", a2);
  }
}

void __cxx_global_var_init_27_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoom", a2);
  }
}

void __cxx_global_var_init_28_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rotate", a2);
  }
}

void __cxx_global_var_init_29_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109,(char)84,(char)111,(char)103,(char)103,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoomToggle", a2);
  }
}

void __cxx_global_var_init_30_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)104,(char)111,(char)119,(char)68,(char)101,(char)102,(char)105,(char)110,(char)105,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"showDefinition", a2);
  }
}

void __cxx_global_var_init_31_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)52,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale4F", a2);
  }
}

void __cxx_global_var_init_32_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)53,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale5F", a2);
  }
}

void __cxx_global_var_init_33_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)100,(char)103,(char)101,(char)78,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"edgeNotificationSwipe2F", a2);
  }
}

void __cxx_global_var_init_34_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)67,(char)101,(char)110,(char)116,(char)101,(char)114,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"notificationCenter2F", a2);
  }
}

void __cxx_global_var_init_35_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)108,(char)105,(char)112,(char)76,(char)101,(char)102,(char)116,(char)65,(char)110,(char)100,(char)82,(char)105,(char)103,(char)104,(char)116,(char)69,(char)100,(char)103,(char)101,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"flipLeftAndRightEdgeGestures", a2);
  }
}

void __cxx_global_var_init_36_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollMomentumEnabled", a2);
  }
}

void __cxx_global_var_init_37_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsScrollMomentum", a2);
  }
}

void __cxx_global_var_init_38_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"restingScroll", a2);
  }
}

void __cxx_global_var_init_39_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)101,(char)101,(char)110,(char)90,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"screenZoom", a2);
  }
}

void __cxx_global_var_init_40_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)121,(char)109,(char)109,(char)101,(char)116,(char)114,(char)105,(char)99,(char)90,(char)111,(char)111,(char)109,(char)82,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"symmetricZoomRotate", a2);
  }
}

void __cxx_global_var_init_41_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107,(char)87,(char)104,(char)105,(char)108,(char)101,(char)82,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClickWhileResting", a2);
  }
}

void __cxx_global_var_init_42_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)111,(char)114,(char)99,(char)101,(char)83,(char)117,(char)112,(char)112,(char)114,(char)101,(char)115,(char)115,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"forceSuppressed", a2);
  }
}

void __cxx_global_var_init_43_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)90,(char)111,(char)110,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClickZone", a2);
  }
}

void __cxx_global_var_init_44_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)105,(char)114,(char)115,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"firstClickThreshold", a2);
  }
}

void __cxx_global_var_init_45_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)101,(char)99,(char)111,(char)110,(char)100,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"secondClickThreshold", a2);
  }
}

void __cxx_global_var_init_46_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)116,(char)114,(char)101,(char)110,(char)103,(char)116,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuationStrength", a2);
  }
}

void __cxx_global_var_init_47_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)101,(char)68,(char)101,(char)116,(char)101,(char)110,(char)116,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuateDetents", a2);
  }
}

void __cxx_global_var_init_48_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientation", a2);
  }
}

void __cxx_global_var_init_49_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110,(char)77,(char)111,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientationMode", a2);
  }
}

void __cxx_global_var_init_50_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_51_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_52_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_53_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_54_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_55_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_56_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_57_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_58_6(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsGestureScrolling", a2);
  }
}

void __cxx_global_var_init_59_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navSwipes2F", a2);
  }
}

void __cxx_global_var_init_60_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipes2F", a2);
  }
}

void __cxx_global_var_init_61_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)105,(char)115,(char)115,(char)105,(char)111,(char)110,(char)67,(char)111,(char)110,(char)116,(char)114,(char)111,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"missionControl", a2);
  }
}

void sub_3C0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  _Unwind_Resume(a1);
}

void sub_3C288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_3C34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)TrackpadBridge;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_3C4A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_3C52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_3C734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_3C81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_3C8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_3C91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_3CA20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_3CAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_3CC84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_3CECC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_3D1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  _Unwind_Resume(a1);
}

void sub_3D3AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_3D430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_3D4C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_3D61C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_3D6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_3D724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_3D89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void __cxx_global_var_init_19()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_18(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_18(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_18(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_18(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_18(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_18(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_19(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void __cxx_global_var_init_15_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)110,(char)97,(char)98,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"enable", a2);
  }
}

void __cxx_global_var_init_16_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointing", a2);
  }
}

void __cxx_global_var_init_17_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClick", a2);
  }
}

void __cxx_global_var_init_18_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)103,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragging", a2);
  }
}

void __cxx_global_var_init_19_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)76,(char)111,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragLock", a2);
  }
}

void __cxx_global_var_init_20_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointMomentum", a2);
  }
}

void __cxx_global_var_init_21_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)117,(char)108,(char)116,(char)105,(char)68,(char)114,(char)97,(char)103,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"multiDragMomentum", a2);
  }
}

void __cxx_global_var_init_22_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClick", a2);
  }
}

void __cxx_global_var_init_23_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)116,(char)105,(char)99,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"verticalScrolling", a2);
  }
}

void __cxx_global_var_init_24_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)104,(char)111,(char)114,(char)105,(char)122,(char)111,(char)110,(char)116,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"horizontalScrolling", a2);
  }
}

void __cxx_global_var_init_25_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)103,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"gestureScrollingEnabled", a2);
  }
}

void __cxx_global_var_init_26_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)65,(char)99,(char)99,(char)101,(char)108,(char)101,(char)114,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollAcceleration", a2);
  }
}

void __cxx_global_var_init_27_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoom", a2);
  }
}

void __cxx_global_var_init_28_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rotate", a2);
  }
}

void __cxx_global_var_init_29_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109,(char)84,(char)111,(char)103,(char)103,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoomToggle", a2);
  }
}

void __cxx_global_var_init_30_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)104,(char)111,(char)119,(char)68,(char)101,(char)102,(char)105,(char)110,(char)105,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"showDefinition", a2);
  }
}

void __cxx_global_var_init_31_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)52,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale4F", a2);
  }
}

void __cxx_global_var_init_32_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)53,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale5F", a2);
  }
}

void __cxx_global_var_init_33_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)100,(char)103,(char)101,(char)78,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"edgeNotificationSwipe2F", a2);
  }
}

void __cxx_global_var_init_34_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)67,(char)101,(char)110,(char)116,(char)101,(char)114,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"notificationCenter2F", a2);
  }
}

void __cxx_global_var_init_35_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)108,(char)105,(char)112,(char)76,(char)101,(char)102,(char)116,(char)65,(char)110,(char)100,(char)82,(char)105,(char)103,(char)104,(char)116,(char)69,(char)100,(char)103,(char)101,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"flipLeftAndRightEdgeGestures", a2);
  }
}

void __cxx_global_var_init_36_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollMomentumEnabled", a2);
  }
}

void __cxx_global_var_init_37_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsScrollMomentum", a2);
  }
}

void __cxx_global_var_init_38_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"restingScroll", a2);
  }
}

void __cxx_global_var_init_39_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)101,(char)101,(char)110,(char)90,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"screenZoom", a2);
  }
}

void __cxx_global_var_init_40_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)121,(char)109,(char)109,(char)101,(char)116,(char)114,(char)105,(char)99,(char)90,(char)111,(char)111,(char)109,(char)82,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"symmetricZoomRotate", a2);
  }
}

void __cxx_global_var_init_41_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107,(char)87,(char)104,(char)105,(char)108,(char)101,(char)82,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClickWhileResting", a2);
  }
}

void __cxx_global_var_init_42_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)111,(char)114,(char)99,(char)101,(char)83,(char)117,(char)112,(char)112,(char)114,(char)101,(char)115,(char)115,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"forceSuppressed", a2);
  }
}

void __cxx_global_var_init_43_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)90,(char)111,(char)110,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClickZone", a2);
  }
}

void __cxx_global_var_init_44_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)105,(char)114,(char)115,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"firstClickThreshold", a2);
  }
}

void __cxx_global_var_init_45_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)101,(char)99,(char)111,(char)110,(char)100,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"secondClickThreshold", a2);
  }
}

void __cxx_global_var_init_46_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)116,(char)114,(char)101,(char)110,(char)103,(char)116,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuationStrength", a2);
  }
}

void __cxx_global_var_init_47_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)101,(char)68,(char)101,(char)116,(char)101,(char)110,(char)116,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuateDetents", a2);
  }
}

void __cxx_global_var_init_48_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientation", a2);
  }
}

void __cxx_global_var_init_49_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110,(char)77,(char)111,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientationMode", a2);
  }
}

void __cxx_global_var_init_50_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_51_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_52_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_53_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_54_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_55_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_56_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_57_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_58_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsGestureScrolling", a2);
  }
}

void __cxx_global_var_init_59_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navSwipes2F", a2);
  }
}

void __cxx_global_var_init_60_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipes2F", a2);
  }
}

void __cxx_global_var_init_61_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)105,(char)115,(char)115,(char)105,(char)111,(char)110,(char)67,(char)111,(char)110,(char)116,(char)114,(char)111,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"missionControl", a2);
  }
}

void __cxx_global_var_init_65_2(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)112,(char)83,(char)101,(char)116,(char)116,(char)105,(char)110,(char)103,(char)115,(char)77,(char)97,(char)110,(char)97,(char)103,(char)101,(char)114>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tpSettingsManager", a2);
  }
}

void sub_3E8EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_3EDDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::vector<int>::iterator std::vector<int>::insert(std::vector<int> *this, std::vector<int>::const_iterator __position, std::vector<int>::size_type __n, std::vector<int>::const_reference __x)
{
  uint64_t i = (int *)__position.__i_;
  if (__n)
  {
    uint64_t v5 = (int *)__x;
    value = this->__end_cap_.__value_;
    p_end_cap = &this->__end_cap_;
    id v9 = value;
    int v11 = p_end_cap[-1].__value_;
    if (__n <= value - v11)
    {
      uint64_t v18 = (char *)v11 - (char *)__position.__i_;
      if (__n <= v11 - __position.__i_)
      {
        uint64_t v21 = p_end_cap[-1].__value_;
        std::vector<int>::size_type v20 = __n;
      }
      else
      {
        unint64_t v19 = 0;
        std::vector<int>::size_type v20 = v18 >> 2;
        uint64_t v21 = (int *)&v11[__n - (v18 >> 2)];
        do
        {
          v11[v19 / 4] = *__x;
          v19 += 4;
        }
        while (4 * __n - 4 * v20 != v19);
        this->__end_ = v21;
        if (v11 == __position.__i_) {
          return (std::vector<int>::iterator)i;
        }
      }
      uint64_t v22 = &__position.__i_[__n];
      char v23 = &v21[-__n];
      char v24 = v21;
      if (v23 < v11)
      {
        char v24 = v21;
        do
        {
          int v25 = *v23++;
          *v24++ = v25;
        }
        while (v23 < v11);
      }
      this->__end_ = v24;
      if (v21 != v22) {
        memmove(&v21[-(v21 - v22)], __position.__i_, (char *)v21 - (char *)v22);
      }
      if (i <= v5)
      {
        if (this->__end_ <= v5) {
          std::vector<int>::size_type v26 = 0;
        }
        else {
          std::vector<int>::size_type v26 = __n;
        }
        v5 += v26;
      }
      long long v27 = i;
      do
      {
        *v27++ = *v5;
        --v20;
      }
      while (v20);
    }
    else
    {
      std::vector<int>::pointer begin = this->__begin_;
      memset(&__p, 0, 32);
      unint64_t v13 = __n + v11 - begin;
      if (v13 >> 62) {
        std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = __position.__i_ - begin;
      uint64_t v15 = (char *)v9 - (char *)begin;
      if (v15 >> 1 > v13) {
        unint64_t v13 = v15 >> 1;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v13;
      }
      __p.__end_cap_.__value_ = (std::allocator<int> *)p_end_cap;
      if (v16) {
        CFNumberRef v17 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v16);
      }
      else {
        CFNumberRef v17 = 0;
      }
      uint64_t v28 = &v17[v14];
      __p.__first_ = v17;
      __p.__begin_ = v28;
      __p.__end_cap_.__value_ = &v17[v16];
      std::vector<int>::size_type v29 = 4 * __n;
      uint64_t v30 = &v28[__n];
      do
      {
        *v28++ = *v5;
        v29 -= 4;
      }
      while (v29);
      __p.__end_ = v30;
      uint64_t i = std::vector<int>::__swap_out_circular_buffer(this, &__p, i);
      if (__p.__end_ != __p.__begin_) {
        __p.__end_ = (std::__split_buffer<int>::pointer)((char *)__p.__end_
      }
                                                       + (((char *)__p.__begin_ - (char *)__p.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
      if (__p.__first_) {
        operator delete(__p.__first_);
      }
    }
  }
  return (std::vector<int>::iterator)i;
}

void sub_3FD98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::vector<int>::iterator std::vector<int>::insert(std::vector<int> *this, std::vector<int>::const_iterator __position, std::vector<int>::value_type *__x)
{
  uint64_t i = (int *)__position.__i_;
  end = this->__end_;
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  id v8 = value;
  if (end >= value)
  {
    std::vector<int>::pointer begin = this->__begin_;
    memset(&__p, 0, 32);
    unint64_t v15 = end - begin + 1;
    if (v15 >> 62) {
      std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = __position.__i_ - begin;
    uint64_t v17 = (char *)v8 - (char *)begin;
    if (v17 >> 1 > v15) {
      unint64_t v15 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v15;
    }
    __p.__end_cap_.__value_ = (std::allocator<int> *)p_end_cap;
    if (v18) {
      unint64_t v19 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v18);
    }
    else {
      unint64_t v19 = 0;
    }
    __p.__first_ = v19;
    __p.__begin_ = &v19[v16];
    __p.__end_ = __p.__begin_;
    __p.__end_cap_.__value_ = &v19[v18];
    std::__split_buffer<int>::push_back(&__p, __x);
    uint64_t i = std::vector<int>::__swap_out_circular_buffer(this, &__p, i);
    if (__p.__end_ != __p.__begin_) {
      __p.__end_ = (std::__split_buffer<int>::pointer)((char *)__p.__end_
    }
                                                     + (((char *)__p.__begin_ - (char *)__p.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__p.__first_) {
      operator delete(__p.__first_);
    }
  }
  else if (__position.__i_ == end)
  {
    *__position.__i_ = *__x;
    this->__end_ = (std::vector<int>::pointer)(__position.__i_ + 1);
  }
  else
  {
    std::__wrap_iter<const int *>::iterator_type v10 = __position.__i_ + 1;
    int v11 = end - 1;
    CFNumberRef v12 = (int *)end;
    while (v11 < end)
    {
      int v13 = *v11++;
      *v12++ = v13;
    }
    this->__end_ = v12;
    if (end != v10) {
      memmove((void *)&end[-(end - v10)], __position.__i_, (char *)end - (char *)v10);
    }
    int *i = *__x;
  }
  return (std::vector<int>::iterator)i;
}

void sub_3FF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::vector<int>>::__init_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int>*,std::vector<int>*,std::vector<int>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_406C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::vector<int>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int>*,std::vector<int>*,std::vector<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  int v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  unint64_t v9 = 0xAAAAAAAAAAAAAA00;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      void v4[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  LOBYTE(v9) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_40820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_40894(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      uint64_t v5 = *(void **)(v3 - 24);
      v3 -= 24;
      uint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 16) = v4;
        operator delete(v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

void std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<int>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<std::vector<int>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::vector<int>>::__vallocate[abi:ne180100]((void *)a1, v11);
    CFNumberRef v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int>*,std::vector<int>*,std::vector<int>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>((int)&v20, a2, v13, v9);
    CFNumberRef v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int>*,std::vector<int>*,std::vector<int>*>(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>((int)&v21, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    uint64_t v17 = *(void *)(a1 + 8);
    do
    {
      unint64_t v19 = *(void **)(v17 - 24);
      v17 -= 24;
      unint64_t v18 = v19;
      if (v19)
      {
        *(void *)(v16 - 16) = v18;
        operator delete(v18);
      }
      uint64_t v16 = v17;
    }
    while (v17 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_40BDC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_40BE4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<int>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::vector<int>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a4, *(char **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2);
      }
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    CFNumberRef v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  CFNumberRef v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    unint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  void *v12 = &v9[v17];
  return result;
}

uint64_t std::vector<std::vector<int>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  LOBYTE(v12) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<int>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<int>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void std::vector<int>::__throw_out_of_range[abi:ne180100]()
{
}

int *std::__introsort<std::_ClassicAlgPolicy,std::greater<int> &,int *,false>(int *result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = result;
LABEL_2:
  unint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          int v22 = *(a2 - 1);
          int v23 = *v11;
          if (v22 > *v11)
          {
            int *v11 = v22;
            *(a2 - 1) = v23;
          }
          break;
        case 3uLL:
          int v24 = v11[1];
          int v25 = *(a2 - 1);
          if (v24 <= v25) {
            int v26 = *(a2 - 1);
          }
          else {
            int v26 = v11[1];
          }
          if (v24 >= v25) {
            int v24 = *(a2 - 1);
          }
          *(a2 - 1) = v24;
          v11[1] = v26;
          int v27 = *(a2 - 1);
          if (v27 <= *v11) {
            int v28 = *v11;
          }
          else {
            int v28 = *(a2 - 1);
          }
          if (v27 >= *v11) {
            int v27 = *v11;
          }
          *(a2 - 1) = v27;
          int v30 = *v11;
          int v29 = v11[1];
          if (v28 <= v29) {
            int v30 = v11[1];
          }
          if (v28 < v29) {
            int v29 = v28;
          }
          int *v11 = v30;
          v11[1] = v29;
          break;
        case 4uLL:
          int v32 = v11[1];
          int v31 = v11[2];
          if (*v11 <= v31) {
            int v33 = v11[2];
          }
          else {
            int v33 = *v11;
          }
          if (*v11 < v31) {
            int v31 = *v11;
          }
          void v11[2] = v31;
          int *v11 = v33;
          int v34 = *(a2 - 1);
          if (v32 <= v34) {
            int v35 = *(a2 - 1);
          }
          else {
            int v35 = v32;
          }
          if (v32 < v34) {
            int v34 = v32;
          }
          *(a2 - 1) = v34;
          int v36 = *v11;
          if (*v11 <= v35) {
            int v37 = v35;
          }
          else {
            int v37 = *v11;
          }
          if (v36 >= v35) {
            int v36 = v35;
          }
          int *v11 = v37;
          v11[1] = v36;
          int v38 = v11[2];
          int v39 = *(a2 - 1);
          if (v38 <= v39) {
            int v40 = *(a2 - 1);
          }
          else {
            int v40 = v11[2];
          }
          if (v38 >= v39) {
            int v38 = *(a2 - 1);
          }
          *(a2 - 1) = v38;
          int v41 = v11[1];
          if (v41 <= v40) {
            int v42 = v40;
          }
          else {
            int v42 = v11[1];
          }
          if (v41 >= v40) {
            int v41 = v40;
          }
          v11[1] = v42;
          void v11[2] = v41;
          break;
        case 5uLL:
          int v43 = *v11;
          int v44 = v11[1];
          if (*v11 <= v44) {
            int v45 = v11[1];
          }
          else {
            int v45 = *v11;
          }
          if (v43 >= v44) {
            int v43 = v11[1];
          }
          int *v11 = v45;
          v11[1] = v43;
          int v46 = v11[3];
          int v47 = *(a2 - 1);
          if (v46 <= v47) {
            int v48 = *(a2 - 1);
          }
          else {
            int v48 = v11[3];
          }
          if (v46 >= v47) {
            int v46 = *(a2 - 1);
          }
          *(a2 - 1) = v46;
          void v11[3] = v48;
          int v49 = *(a2 - 1);
          int v50 = v11[2];
          if (v49 <= v50) {
            int v51 = v11[2];
          }
          else {
            int v51 = *(a2 - 1);
          }
          if (v49 >= v50) {
            int v49 = v11[2];
          }
          *(a2 - 1) = v49;
          int v53 = v11[2];
          int v52 = v11[3];
          int v54 = v11[1];
          if (v51 <= v52) {
            int v53 = v11[3];
          }
          if (v51 < v52) {
            int v52 = v51;
          }
          void v11[2] = v53;
          void v11[3] = v52;
          int v55 = *(a2 - 1);
          if (v54 <= v55) {
            int v56 = *(a2 - 1);
          }
          else {
            int v56 = v54;
          }
          if (v54 < v55) {
            int v55 = v54;
          }
          *(a2 - 1) = v55;
          int v57 = *v11;
          int v59 = v11[2];
          int v58 = v11[3];
          if (v58 <= *v11) {
            int v60 = *v11;
          }
          else {
            int v60 = v11[3];
          }
          if (v58 >= v57) {
            int v58 = *v11;
          }
          if (v60 <= v59) {
            int v57 = v11[2];
          }
          if (v60 < v59) {
            int v59 = v60;
          }
          if (v58 <= v56) {
            int v61 = v56;
          }
          else {
            int v61 = v58;
          }
          if (v58 >= v56) {
            int v58 = v56;
          }
          if (v61 <= v59) {
            int v56 = v59;
          }
          int *v11 = v57;
          v11[1] = v56;
          if (v61 >= v59) {
            int v62 = v59;
          }
          else {
            int v62 = v61;
          }
          void v11[2] = v62;
          void v11[3] = v58;
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *,int *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    size_t v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x201)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(v11, &v11[v15 >> 1], a2 - 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(v11 + 1, v17 - 1, a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(v11 + 2, &v11[v16 + 1], a2 - 3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(v17 - 1, v17, &v11[v16 + 1]);
      int v18 = *v11;
      int *v11 = *v17;
      *size_t v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(&v11[v15 >> 1], v11, a2 - 1);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*(v11 - 1) <= *v11)
    {
      uint64_t result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,int *,std::greater<int> &>(v11, a2);
      unint64_t v11 = result;
      goto LABEL_19;
    }
LABEL_14:
    unint64_t v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,int *,std::greater<int> &>(v11, a2);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(v11, v19);
    unint64_t v11 = v19 + 1;
    uint64_t result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(v19 + 1, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = (int *)std::__introsort<std::_ClassicAlgPolicy,std::greater<int> &,int *,false>(v10, v19, a3, -v13, a5 & 1);
      unint64_t v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  CFStringRef v63 = v11 + 1;
  BOOL v65 = v11 == a2 || v63 == a2;
  if (a5)
  {
    if (!v65)
    {
      uint64_t v66 = 0;
      int v67 = v11;
      do
      {
        int v69 = *v67;
        int v68 = v67[1];
        int v67 = v63;
        if (v68 > v69)
        {
          uint64_t v70 = v66;
          while (1)
          {
            *(int *)((char *)v11 + v70 + 4) = v69;
            if (!v70) {
              break;
            }
            int v69 = *(int *)((char *)v11 + v70 - 4);
            v70 -= 4;
            if (v68 <= v69)
            {
              int v71 = (int *)((char *)v11 + v70 + 4);
              goto LABEL_125;
            }
          }
          int v71 = v11;
LABEL_125:
          *int v71 = v68;
        }
        CFStringRef v63 = v67 + 1;
        v66 += 4;
      }
      while (v67 + 1 != a2);
    }
  }
  else if (!v65)
  {
    do
    {
      int v73 = *v10;
      int v72 = v10[1];
      uint64_t v10 = v63;
      if (v72 > v73)
      {
        do
        {
          *CFStringRef v63 = v73;
          int v73 = *(v63 - 2);
          --v63;
        }
        while (v72 > v73);
        *CFStringRef v63 = v72;
      }
      CFStringRef v63 = v10 + 1;
    }
    while (v10 + 1 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(int *a1, int *a2, int *a3)
{
  int v3 = *a2;
  int v4 = *a1;
  int v5 = *a3;
  if (*a2 > *a1)
  {
    if (v5 > v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 <= v4) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 > v3)
  {
    *a2 = v5;
    *a3 = v3;
    int v6 = *a1;
    if (*a2 <= *a1) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,int *,std::greater<int> &>(int *a1, int *a2)
{
  int v2 = *a1;
  if (*a1 <= *(a2 - 1))
  {
    int v5 = a1 + 1;
    do
    {
      int v3 = v5;
      if (v5 >= a2) {
        break;
      }
      ++v5;
    }
    while (v2 <= *v3);
  }
  else
  {
    int v3 = a1;
    do
    {
      int v4 = v3[1];
      ++v3;
    }
    while (v2 <= v4);
  }
  if (v3 < a2)
  {
    do
      int v6 = *--a2;
    while (v2 > v6);
  }
  if (v3 < a2)
  {
    int v7 = *v3;
    int v8 = *a2;
    do
    {
      int *v3 = v8;
      *a2 = v7;
      do
      {
        int v9 = v3[1];
        ++v3;
        int v7 = v9;
      }
      while (v2 <= v9);
      do
      {
        int v10 = *--a2;
        int v8 = v10;
      }
      while (v2 > v10);
    }
    while (v3 < a2);
  }
  if (v3 - 1 != a1) {
    *a1 = *(v3 - 1);
  }
  *(v3 - 1) = v2;
  return v3;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,int *,std::greater<int> &>(int *a1, int *a2)
{
  uint64_t v2 = 0;
  int v3 = *a1;
  do
    int v4 = a1[++v2];
  while (v4 > v3);
  int v5 = &a1[v2];
  int v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2) {
        break;
      }
      int v8 = *--a2;
    }
    while (v8 <= v3);
  }
  else
  {
    do
      int v7 = *--a2;
    while (v7 <= v3);
  }
  if (v5 < a2)
  {
    int v9 = *a2;
    int v10 = a2;
    unint64_t v11 = v5;
    do
    {
      int *v11 = v9;
      int *v10 = v4;
      do
      {
        int v12 = v11[1];
        ++v11;
        int v4 = v12;
      }
      while (v12 > v3);
      do
      {
        int v13 = *--v10;
        int v9 = v13;
      }
      while (v13 <= v3);
    }
    while (v11 < v10);
    int v6 = v11 - 1;
  }
  if (v6 != a1) {
    *a1 = *v6;
  }
  int *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(_DWORD *a1, int *a2)
{
  uint64_t v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      int v3 = *(a2 - 1);
      int v4 = *a1;
      if (v3 > *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      int v20 = a1[1];
      int v21 = *(a2 - 1);
      if (v20 <= v21) {
        int v22 = *(a2 - 1);
      }
      else {
        int v22 = a1[1];
      }
      if (v20 >= v21) {
        int v20 = *(a2 - 1);
      }
      *(a2 - 1) = v20;
      a1[1] = v22;
      int v23 = *(a2 - 1);
      if (v23 <= *a1) {
        int v24 = *a1;
      }
      else {
        int v24 = *(a2 - 1);
      }
      if (v23 >= *a1) {
        int v23 = *a1;
      }
      *(a2 - 1) = v23;
      int v26 = *a1;
      int v25 = a1[1];
      if (v24 <= v25) {
        int v26 = a1[1];
      }
      if (v24 < v25) {
        int v25 = v24;
      }
      *a1 = v26;
      a1[1] = v25;
      return 1;
    case 4:
      int v48 = a1[1];
      int v47 = a1[2];
      if (*a1 <= v47) {
        int v49 = a1[2];
      }
      else {
        int v49 = *a1;
      }
      if (*a1 < v47) {
        int v47 = *a1;
      }
      a1[2] = v47;
      *a1 = v49;
      int v50 = *(a2 - 1);
      if (v48 <= v50) {
        int v51 = *(a2 - 1);
      }
      else {
        int v51 = v48;
      }
      if (v48 < v50) {
        int v50 = v48;
      }
      *(a2 - 1) = v50;
      int v52 = *a1;
      if (*a1 <= v51) {
        int v53 = v51;
      }
      else {
        int v53 = *a1;
      }
      if (v52 >= v51) {
        int v52 = v51;
      }
      *a1 = v53;
      a1[1] = v52;
      int v54 = a1[2];
      int v55 = *(a2 - 1);
      if (v54 <= v55) {
        int v56 = *(a2 - 1);
      }
      else {
        int v56 = a1[2];
      }
      if (v54 >= v55) {
        int v54 = *(a2 - 1);
      }
      *(a2 - 1) = v54;
      int v57 = a1[1];
      if (v57 <= v56) {
        int v58 = v56;
      }
      else {
        int v58 = a1[1];
      }
      if (v57 >= v56) {
        int v57 = v56;
      }
      a1[1] = v58;
      a1[2] = v57;
      return 1;
    case 5:
      int v27 = *a1;
      int v28 = a1[1];
      if (*a1 <= v28) {
        int v29 = a1[1];
      }
      else {
        int v29 = *a1;
      }
      if (v27 >= v28) {
        int v27 = a1[1];
      }
      *a1 = v29;
      a1[1] = v27;
      int v30 = a1[3];
      int v31 = *(a2 - 1);
      if (v30 <= v31) {
        int v32 = *(a2 - 1);
      }
      else {
        int v32 = a1[3];
      }
      if (v30 >= v31) {
        int v30 = *(a2 - 1);
      }
      *(a2 - 1) = v30;
      a1[3] = v32;
      int v33 = *(a2 - 1);
      int v34 = a1[2];
      if (v33 <= v34) {
        int v35 = a1[2];
      }
      else {
        int v35 = *(a2 - 1);
      }
      if (v33 >= v34) {
        int v33 = a1[2];
      }
      *(a2 - 1) = v33;
      int v37 = a1[2];
      int v36 = a1[3];
      int v38 = a1[1];
      if (v35 <= v36) {
        int v37 = a1[3];
      }
      if (v35 < v36) {
        int v36 = v35;
      }
      a1[2] = v37;
      a1[3] = v36;
      int v39 = *(a2 - 1);
      if (v38 <= v39) {
        int v40 = *(a2 - 1);
      }
      else {
        int v40 = v38;
      }
      if (v38 < v39) {
        int v39 = v38;
      }
      *(a2 - 1) = v39;
      int v41 = *a1;
      int v43 = a1[2];
      int v42 = a1[3];
      if (v42 <= *a1) {
        int v44 = *a1;
      }
      else {
        int v44 = a1[3];
      }
      if (v42 >= v41) {
        int v42 = *a1;
      }
      if (v44 <= v43) {
        int v41 = a1[2];
      }
      if (v44 < v43) {
        int v43 = v44;
      }
      if (v42 <= v40) {
        int v45 = v40;
      }
      else {
        int v45 = v42;
      }
      if (v42 >= v40) {
        int v42 = v40;
      }
      if (v45 <= v43) {
        int v40 = v43;
      }
      *a1 = v41;
      a1[1] = v40;
      if (v45 >= v43) {
        int v46 = v43;
      }
      else {
        int v46 = v45;
      }
      a1[2] = v46;
      a1[3] = v42;
      return 1;
    default:
      int v6 = a1 + 2;
      int v5 = a1[2];
      int v8 = *a1;
      int v7 = a1[1];
      if (v7 <= v5) {
        int v9 = a1[2];
      }
      else {
        int v9 = a1[1];
      }
      if (v7 < v5) {
        int v5 = a1[1];
      }
      if (v5 <= v8) {
        int v10 = *a1;
      }
      else {
        int v10 = v5;
      }
      if (v5 >= v8) {
        int v5 = *a1;
      }
      int *v6 = v5;
      if (v10 <= v9) {
        int v11 = v9;
      }
      else {
        int v11 = v8;
      }
      if (v10 >= v9) {
        int v10 = v9;
      }
      *a1 = v11;
      a1[1] = v10;
      int v12 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v13 = 0;
      uint64_t v14 = 12;
      break;
  }
  while (1)
  {
    int v15 = *v12;
    int v16 = *v6;
    if (*v12 > v16)
    {
      uint64_t v17 = v14;
      while (1)
      {
        *(_DWORD *)((char *)a1 + v17) = v16;
        uint64_t v18 = v17 - 4;
        if (v17 == 4) {
          break;
        }
        int v16 = *(_DWORD *)((char *)a1 + v17 - 8);
        v17 -= 4;
        if (v15 <= v16)
        {
          unint64_t v19 = (_DWORD *)((char *)a1 + v18);
          goto LABEL_27;
        }
      }
      unint64_t v19 = a1;
LABEL_27:
      _DWORD *v19 = v15;
      if (++v13 == 8) {
        return v12 + 1 == a2;
      }
    }
    int v6 = v12;
    v14 += 4;
    if (++v12 == a2) {
      return 1;
    }
  }
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *,int *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    int v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    int v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        int v15 = *v14;
        if (*v14 > *a1)
        {
          *uint64_t v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      int v13 = a3;
    }
    if (v8 >= 5)
    {
      uint64_t v16 = (unint64_t)v8 >> 2;
      do
      {
        uint64_t v17 = 0;
        int v18 = *a1;
        unint64_t v19 = a1;
        do
        {
          int v20 = &v19[v17 + 1];
          uint64_t v21 = (2 * v17) | 1;
          uint64_t v17 = 2 * v17 + 2;
          if (v17 >= v16)
          {
            int v22 = *v20;
            uint64_t v17 = v21;
          }
          else
          {
            int v22 = *v20;
            int v23 = v20[1];
            if (*v20 >= v23) {
              int v22 = v20[1];
            }
            if (*v20 <= v23) {
              uint64_t v17 = v21;
            }
            else {
              ++v20;
            }
          }
          int *v19 = v22;
          unint64_t v19 = v20;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v20 == --v6)
        {
          int *v20 = v18;
        }
        else
        {
          int *v20 = *v6;
          int *v6 = v18;
          uint64_t v24 = (char *)v20 - (char *)a1 + 4;
          if (v24 >= 5)
          {
            unint64_t v25 = (((unint64_t)v24 >> 2) - 2) >> 1;
            int v26 = &a1[v25];
            int v27 = *v26;
            int v28 = *v20;
            if (*v26 > *v20)
            {
              do
              {
                int v29 = v26;
                int *v20 = v27;
                if (!v25) {
                  break;
                }
                unint64_t v25 = (v25 - 1) >> 1;
                int v26 = &a1[v25];
                int v27 = *v26;
                int v20 = v29;
              }
              while (*v26 > v28);
              int *v29 = v28;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = (v4 >> 1) + 1;
      uint64_t v8 = (int *)(result + 4 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 >= a3)
      {
        int v10 = *v8;
      }
      else
      {
        int v10 = *v8;
        int v11 = v8[1];
        if (*v8 >= v11) {
          int v10 = v8[1];
        }
        if (*v8 > v11)
        {
          ++v8;
          uint64_t v7 = v9;
        }
      }
      int v12 = *a4;
      if (v10 <= *a4)
      {
        do
        {
          int v13 = v8;
          *a4 = v10;
          if (v5 < v7) {
            break;
          }
          uint64_t v14 = (2 * v7) | 1;
          uint64_t v8 = (int *)(result + 4 * v14);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            int v10 = *v8;
            uint64_t v7 = v14;
          }
          else
          {
            int v10 = *v8;
            int v15 = v8[1];
            if (*v8 >= v15) {
              int v10 = v8[1];
            }
            if (*v8 <= v15) {
              uint64_t v7 = v14;
            }
            else {
              ++v8;
            }
          }
          a4 = v13;
        }
        while (v10 <= v12);
        int *v13 = v12;
      }
    }
  }
  return result;
}

std::vector<int>::pointer std::vector<int>::__swap_out_circular_buffer(std::vector<int> *this, std::__split_buffer<int> *__v, std::vector<int>::pointer __p)
{
  std::vector<int>::pointer begin = __v->__begin_;
  std::vector<int>::pointer v6 = this->__begin_;
  uint64_t v7 = begin;
  if (this->__begin_ != __p)
  {
    std::vector<int>::pointer v8 = __p;
    uint64_t v7 = __v->__begin_;
    do
    {
      int v9 = *--v8;
      *--uint64_t v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  end = this->__end_;
  std::__split_buffer<int>::pointer v11 = __v->__end_;
  int64_t v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    uint64_t v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<int>::pointer)((char *)v11 + v12);
  int v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  uint64_t v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

void std::__split_buffer<int>::push_back(std::__split_buffer<int> *this, std::__split_buffer<int>::value_type *__x)
{
  std::__split_buffer<int>::pointer end = this->__end_;
  if (end == this->__end_cap_.__value_)
  {
    std::__split_buffer<int>::pointer begin = this->__begin_;
    uint64_t v6 = (char *)begin - (char *)this->__first_;
    if (begin <= this->__first_)
    {
      if (end == this->__first_) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = ((char *)end - (char *)this->__first_) >> 1;
      }
      uint64_t v17 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this->__end_cap_.__value_, v16);
      unint64_t v19 = (int *)((char *)v17 + (v16 & 0xFFFFFFFFFFFFFFFCLL));
      std::__split_buffer<int>::pointer v20 = this->__begin_;
      std::__split_buffer<int>::pointer end = v19;
      uint64_t v21 = (char *)this->__end_ - (char *)v20;
      if (v21)
      {
        std::__split_buffer<int>::pointer end = (int *)((char *)v19 + (v21 & 0xFFFFFFFFFFFFFFFCLL));
        uint64_t v22 = 4 * (v21 >> 2);
        int v23 = (int *)((char *)v17 + (v16 & 0xFFFFFFFFFFFFFFFCLL));
        do
        {
          int v24 = *v20++;
          *v23++ = v24;
          v22 -= 4;
        }
        while (v22);
      }
      std::__split_buffer<int>::pointer first = this->__first_;
      this->__first_ = v17;
      this->__begin_ = v19;
      this->__end_ = end;
      this->__end_cap_.__value_ = &v17[v18];
      if (first)
      {
        operator delete(first);
        std::__split_buffer<int>::pointer end = this->__end_;
      }
    }
    else
    {
      uint64_t v7 = v6 >> 2;
      BOOL v8 = v6 >> 2 < -1;
      uint64_t v9 = (v6 >> 2) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      int v13 = &begin[-v12];
      int64_t v14 = (char *)end - (char *)begin;
      if (end != begin)
      {
        memmove(&begin[-v12], begin, (char *)end - (char *)begin);
        std::__split_buffer<int>::pointer end = this->__begin_;
      }
      int v15 = &end[v11];
      std::__split_buffer<int>::pointer end = (int *)((char *)v13 + v14);
      this->__begin_ = v15;
    }
  }
  int *end = *__x;
  this->__end_ = end + 1;
}

void __cxx_global_var_init_20()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_19(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_19(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_19(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_19(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_19(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_19(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_20(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void __cxx_global_var_init_9_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)110,(char)97,(char)98,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"enable", a2);
  }
}

void __cxx_global_var_init_10_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointing", a2);
  }
}

void __cxx_global_var_init_11_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClick", a2);
  }
}

void __cxx_global_var_init_12_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)103,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragging", a2);
  }
}

void __cxx_global_var_init_13_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)76,(char)111,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragLock", a2);
  }
}

void __cxx_global_var_init_14_7(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointMomentum", a2);
  }
}

void __cxx_global_var_init_15_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)117,(char)108,(char)116,(char)105,(char)68,(char)114,(char)97,(char)103,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"multiDragMomentum", a2);
  }
}

void __cxx_global_var_init_16_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClick", a2);
  }
}

void __cxx_global_var_init_17_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)116,(char)105,(char)99,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"verticalScrolling", a2);
  }
}

void __cxx_global_var_init_18_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)104,(char)111,(char)114,(char)105,(char)122,(char)111,(char)110,(char)116,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"horizontalScrolling", a2);
  }
}

void __cxx_global_var_init_19_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)103,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"gestureScrollingEnabled", a2);
  }
}

void __cxx_global_var_init_20_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)65,(char)99,(char)99,(char)101,(char)108,(char)101,(char)114,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollAcceleration", a2);
  }
}

void __cxx_global_var_init_21_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoom", a2);
  }
}

void __cxx_global_var_init_22_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rotate", a2);
  }
}

void __cxx_global_var_init_23_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109,(char)84,(char)111,(char)103,(char)103,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoomToggle", a2);
  }
}

void __cxx_global_var_init_24_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)104,(char)111,(char)119,(char)68,(char)101,(char)102,(char)105,(char)110,(char)105,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"showDefinition", a2);
  }
}

void __cxx_global_var_init_25_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)52,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale4F", a2);
  }
}

void __cxx_global_var_init_26_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)53,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale5F", a2);
  }
}

void __cxx_global_var_init_27_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)100,(char)103,(char)101,(char)78,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"edgeNotificationSwipe2F", a2);
  }
}

void __cxx_global_var_init_28_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)67,(char)101,(char)110,(char)116,(char)101,(char)114,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"notificationCenter2F", a2);
  }
}

void __cxx_global_var_init_29_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)108,(char)105,(char)112,(char)76,(char)101,(char)102,(char)116,(char)65,(char)110,(char)100,(char)82,(char)105,(char)103,(char)104,(char)116,(char)69,(char)100,(char)103,(char)101,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"flipLeftAndRightEdgeGestures", a2);
  }
}

void __cxx_global_var_init_30_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollMomentumEnabled", a2);
  }
}

void __cxx_global_var_init_31_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsScrollMomentum", a2);
  }
}

void __cxx_global_var_init_32_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"restingScroll", a2);
  }
}

void __cxx_global_var_init_33_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)101,(char)101,(char)110,(char)90,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"screenZoom", a2);
  }
}

void __cxx_global_var_init_34_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)121,(char)109,(char)109,(char)101,(char)116,(char)114,(char)105,(char)99,(char)90,(char)111,(char)111,(char)109,(char)82,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"symmetricZoomRotate", a2);
  }
}

void __cxx_global_var_init_35_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107,(char)87,(char)104,(char)105,(char)108,(char)101,(char)82,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClickWhileResting", a2);
  }
}

void __cxx_global_var_init_36_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)111,(char)114,(char)99,(char)101,(char)83,(char)117,(char)112,(char)112,(char)114,(char)101,(char)115,(char)115,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"forceSuppressed", a2);
  }
}

void __cxx_global_var_init_37_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)90,(char)111,(char)110,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClickZone", a2);
  }
}

void __cxx_global_var_init_38_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)105,(char)114,(char)115,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"firstClickThreshold", a2);
  }
}

void __cxx_global_var_init_39_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)101,(char)99,(char)111,(char)110,(char)100,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"secondClickThreshold", a2);
  }
}

void __cxx_global_var_init_40_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)116,(char)114,(char)101,(char)110,(char)103,(char)116,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuationStrength", a2);
  }
}

void __cxx_global_var_init_41_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)101,(char)68,(char)101,(char)116,(char)101,(char)110,(char)116,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuateDetents", a2);
  }
}

void __cxx_global_var_init_42_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientation", a2);
  }
}

void __cxx_global_var_init_43_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110,(char)77,(char)111,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientationMode", a2);
  }
}

void __cxx_global_var_init_44_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_45_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_46_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_47_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_48_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_49_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_50_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_51_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_52_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsGestureScrolling", a2);
  }
}

void __cxx_global_var_init_53_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navSwipes2F", a2);
  }
}

void __cxx_global_var_init_54_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipes2F", a2);
  }
}

void __cxx_global_var_init_55_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)105,(char)115,(char)115,(char)105,(char)111,(char)110,(char)67,(char)111,(char)110,(char)116,(char)114,(char)111,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"missionControl", a2);
  }
}

void sub_42BB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_42C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)TrackpadMomentumGeneratorStage;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_42DC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_42FEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_43180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_432A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_433F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_43524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_43634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_4383C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_43BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  _Unwind_Resume(a1);
}

void sub_43CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_43EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void sub_43FE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_4412C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_44288(_Unwind_Exception *a1)
{
  int v3 = v2;

  _Unwind_Resume(a1);
}

void sub_44310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_443D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_445EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_21()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_20(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_20(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_20(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_20(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_20(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_20(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_21(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void __cxx_global_var_init_9_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)110,(char)97,(char)98,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"enable", a2);
  }
}

void __cxx_global_var_init_10_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointing", a2);
  }
}

void __cxx_global_var_init_11_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClick", a2);
  }
}

void __cxx_global_var_init_12_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)103,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragging", a2);
  }
}

void __cxx_global_var_init_13_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)76,(char)111,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragLock", a2);
  }
}

void __cxx_global_var_init_14_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointMomentum", a2);
  }
}

void __cxx_global_var_init_15_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)117,(char)108,(char)116,(char)105,(char)68,(char)114,(char)97,(char)103,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"multiDragMomentum", a2);
  }
}

void __cxx_global_var_init_16_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClick", a2);
  }
}

void __cxx_global_var_init_17_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)116,(char)105,(char)99,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"verticalScrolling", a2);
  }
}

void __cxx_global_var_init_18_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)104,(char)111,(char)114,(char)105,(char)122,(char)111,(char)110,(char)116,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"horizontalScrolling", a2);
  }
}

void __cxx_global_var_init_19_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)103,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"gestureScrollingEnabled", a2);
  }
}

void __cxx_global_var_init_20_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)65,(char)99,(char)99,(char)101,(char)108,(char)101,(char)114,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollAcceleration", a2);
  }
}

void __cxx_global_var_init_21_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoom", a2);
  }
}

void __cxx_global_var_init_22_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rotate", a2);
  }
}

void __cxx_global_var_init_23_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109,(char)84,(char)111,(char)103,(char)103,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoomToggle", a2);
  }
}

void __cxx_global_var_init_24_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)104,(char)111,(char)119,(char)68,(char)101,(char)102,(char)105,(char)110,(char)105,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"showDefinition", a2);
  }
}

void __cxx_global_var_init_25_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)52,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale4F", a2);
  }
}

void __cxx_global_var_init_26_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)53,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale5F", a2);
  }
}

void __cxx_global_var_init_27_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)100,(char)103,(char)101,(char)78,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"edgeNotificationSwipe2F", a2);
  }
}

void __cxx_global_var_init_28_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)67,(char)101,(char)110,(char)116,(char)101,(char)114,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"notificationCenter2F", a2);
  }
}

void __cxx_global_var_init_29_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)108,(char)105,(char)112,(char)76,(char)101,(char)102,(char)116,(char)65,(char)110,(char)100,(char)82,(char)105,(char)103,(char)104,(char)116,(char)69,(char)100,(char)103,(char)101,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"flipLeftAndRightEdgeGestures", a2);
  }
}

void __cxx_global_var_init_30_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollMomentumEnabled", a2);
  }
}

void __cxx_global_var_init_31_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsScrollMomentum", a2);
  }
}

void __cxx_global_var_init_32_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"restingScroll", a2);
  }
}

void __cxx_global_var_init_33_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)101,(char)101,(char)110,(char)90,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"screenZoom", a2);
  }
}

void __cxx_global_var_init_34_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)121,(char)109,(char)109,(char)101,(char)116,(char)114,(char)105,(char)99,(char)90,(char)111,(char)111,(char)109,(char)82,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"symmetricZoomRotate", a2);
  }
}

void __cxx_global_var_init_35_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107,(char)87,(char)104,(char)105,(char)108,(char)101,(char)82,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClickWhileResting", a2);
  }
}

void __cxx_global_var_init_36_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)111,(char)114,(char)99,(char)101,(char)83,(char)117,(char)112,(char)112,(char)114,(char)101,(char)115,(char)115,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"forceSuppressed", a2);
  }
}

void __cxx_global_var_init_37_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)90,(char)111,(char)110,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClickZone", a2);
  }
}

void __cxx_global_var_init_38_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)105,(char)114,(char)115,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"firstClickThreshold", a2);
  }
}

void __cxx_global_var_init_39_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)101,(char)99,(char)111,(char)110,(char)100,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"secondClickThreshold", a2);
  }
}

void __cxx_global_var_init_40_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)116,(char)114,(char)101,(char)110,(char)103,(char)116,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuationStrength", a2);
  }
}

void __cxx_global_var_init_41_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)101,(char)68,(char)101,(char)116,(char)101,(char)110,(char)116,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuateDetents", a2);
  }
}

void __cxx_global_var_init_42_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientation", a2);
  }
}

void __cxx_global_var_init_43_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110,(char)77,(char)111,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientationMode", a2);
  }
}

void __cxx_global_var_init_44_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_45_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_46_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_47_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_48_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_49_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_50_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_51_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_52_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsGestureScrolling", a2);
  }
}

void __cxx_global_var_init_53_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navSwipes2F", a2);
  }
}

void __cxx_global_var_init_54_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipes2F", a2);
  }
}

void __cxx_global_var_init_55_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)105,(char)115,(char)115,(char)105,(char)111,(char)110,(char)67,(char)111,(char)110,(char)116,(char)114,(char)111,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"missionControl", a2);
  }
}

void sub_45540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_45630(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_457A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_45B88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_22()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_21(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_21(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_21(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_21(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_21(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_21(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_22(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void __cxx_global_var_init_15_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)110,(char)97,(char)98,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"enable", a2);
  }
}

void __cxx_global_var_init_16_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointing", a2);
  }
}

void __cxx_global_var_init_17_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClick", a2);
  }
}

void __cxx_global_var_init_18_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)103,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragging", a2);
  }
}

void __cxx_global_var_init_19_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)76,(char)111,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragLock", a2);
  }
}

void __cxx_global_var_init_20_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointMomentum", a2);
  }
}

void __cxx_global_var_init_21_18(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)117,(char)108,(char)116,(char)105,(char)68,(char)114,(char)97,(char)103,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"multiDragMomentum", a2);
  }
}

void __cxx_global_var_init_22_18(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClick", a2);
  }
}

void __cxx_global_var_init_23_18(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)116,(char)105,(char)99,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"verticalScrolling", a2);
  }
}

void __cxx_global_var_init_24_18(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)104,(char)111,(char)114,(char)105,(char)122,(char)111,(char)110,(char)116,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"horizontalScrolling", a2);
  }
}

void __cxx_global_var_init_25_18(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)103,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"gestureScrollingEnabled", a2);
  }
}

void __cxx_global_var_init_26_18(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)65,(char)99,(char)99,(char)101,(char)108,(char)101,(char)114,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollAcceleration", a2);
  }
}

void __cxx_global_var_init_27_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoom", a2);
  }
}

void __cxx_global_var_init_28_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rotate", a2);
  }
}

void __cxx_global_var_init_29_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109,(char)84,(char)111,(char)103,(char)103,(char)108,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoomToggle", a2);
  }
}

void __cxx_global_var_init_30_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)104,(char)111,(char)119,(char)68,(char)101,(char)102,(char)105,(char)110,(char)105,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"showDefinition", a2);
  }
}

void __cxx_global_var_init_31_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)52,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale4F", a2);
  }
}

void __cxx_global_var_init_32_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)53,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale5F", a2);
  }
}

void __cxx_global_var_init_33_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)100,(char)103,(char)101,(char)78,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"edgeNotificationSwipe2F", a2);
  }
}

void __cxx_global_var_init_34_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)67,(char)101,(char)110,(char)116,(char)101,(char)114,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"notificationCenter2F", a2);
  }
}

void __cxx_global_var_init_35_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)108,(char)105,(char)112,(char)76,(char)101,(char)102,(char)116,(char)65,(char)110,(char)100,(char)82,(char)105,(char)103,(char)104,(char)116,(char)69,(char)100,(char)103,(char)101,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"flipLeftAndRightEdgeGestures", a2);
  }
}

void __cxx_global_var_init_36_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollMomentumEnabled", a2);
  }
}

void __cxx_global_var_init_37_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsScrollMomentum", a2);
  }
}

void __cxx_global_var_init_38_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"restingScroll", a2);
  }
}

void __cxx_global_var_init_39_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)101,(char)101,(char)110,(char)90,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"screenZoom", a2);
  }
}

void __cxx_global_var_init_40_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)121,(char)109,(char)109,(char)101,(char)116,(char)114,(char)105,(char)99,(char)90,(char)111,(char)111,(char)109,(char)82,(char)111,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"symmetricZoomRotate", a2);
  }
}

void __cxx_global_var_init_41_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107,(char)87,(char)104,(char)105,(char)108,(char)101,(char)82,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClickWhileResting", a2);
  }
}

void __cxx_global_var_init_42_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)111,(char)114,(char)99,(char)101,(char)83,(char)117,(char)112,(char)112,(char)114,(char)101,(char)115,(char)115,(char)101,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"forceSuppressed", a2);
  }
}

void __cxx_global_var_init_43_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)90,(char)111,(char)110,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClickZone", a2);
  }
}

void __cxx_global_var_init_44_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)105,(char)114,(char)115,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"firstClickThreshold", a2);
  }
}

void __cxx_global_var_init_45_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)101,(char)99,(char)111,(char)110,(char)100,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"secondClickThreshold", a2);
  }
}

void __cxx_global_var_init_46_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)116,(char)114,(char)101,(char)110,(char)103,(char)116,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuationStrength", a2);
  }
}

void __cxx_global_var_init_47_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)101,(char)68,(char)101,(char)116,(char)101,(char)110,(char)116,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuateDetents", a2);
  }
}

void __cxx_global_var_init_48_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientation", a2);
  }
}

void __cxx_global_var_init_49_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110,(char)77,(char)111,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientationMode", a2);
  }
}

void __cxx_global_var_init_50_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_51_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_52_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_53_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_54_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_55_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_56_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_57_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_58_8(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsGestureScrolling", a2);
  }
}

void __cxx_global_var_init_59_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navSwipes2F", a2);
  }
}

void __cxx_global_var_init_60_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipes2F", a2);
  }
}

void __cxx_global_var_init_61_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)105,(char)115,(char)115,(char)105,(char)111,(char)110,(char)67,(char)111,(char)110,(char)116,(char)114,(char)111,(char)108>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"missionControl", a2);
  }
}

BOOL MTPreferencesGetAppBooleanValue(const __CFString *a1, const __CFString *a2, unsigned __int8 *a3)
{
  if (a3) {
    *a3 = 0;
  }
  BOOL v4 = 0;
  if (a1 && a2)
  {
    CFStringRef v5 = (const __CFString *)IOHIDPreferencesCopyDomain();
    if (v5)
    {
      CFStringRef v6 = v5;
      CFTypeID v7 = CFGetTypeID(v5);
      if (v7 == CFStringGetTypeID())
      {
        BOOL v4 = 1;
        if (CFStringCompare(v6, @"true", 1uLL) == kCFCompareEqualTo) {
          goto LABEL_19;
        }
        Boolean Value = 1;
        if (CFStringCompare(v6, @"YES", 1uLL) == kCFCompareEqualTo)
        {
          BOOL v4 = 1;
          if (!a3) {
            goto LABEL_23;
          }
          goto LABEL_22;
        }
        if (CFStringCompare(v6, @"false", 1uLL) == kCFCompareEqualTo
          || CFStringCompare(v6, @"NO", 1uLL) == kCFCompareEqualTo)
        {
          BOOL v4 = 0;
          goto LABEL_19;
        }
      }
      else if (v7 == CFNumberGetTypeID())
      {
        if (!CFNumberIsFloatType((CFNumberRef)v6))
        {
          int valuePtr = -1431655766;
          Boolean Value = CFNumberGetValue((CFNumberRef)v6, kCFNumberIntType, &valuePtr);
          BOOL v4 = valuePtr != 0;
          if (!a3) {
            goto LABEL_23;
          }
          goto LABEL_22;
        }
      }
      else if (v7 == CFBooleanGetTypeID())
      {
        BOOL v4 = v6 == (const __CFString *)kCFBooleanTrue;
LABEL_19:
        Boolean Value = 1;
        if (!a3) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
      BOOL v4 = 0;
      Boolean Value = 0;
      if (!a3)
      {
LABEL_23:
        CFRelease(v6);
        return v4;
      }
LABEL_22:
      *a3 = Value;
      goto LABEL_23;
    }
    return 0;
  }
  return v4;
}

void sub_46C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  a9.super_class = (Class)CoreAccessoryManager;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_46DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_471D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _dmMatchedCallback(void *a1, const char *a2)
{
  return [a1 handleDeviceManagementMatching:a2];
}

void sub_47530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_47950(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_47B04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_47F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_480B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_48178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_48284(_Unwind_Exception *a1)
{
  if (v2) {

  }
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_23()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_22(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_22(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_22(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_22(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_22(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_22(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_23(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

uint64_t MTChordTable_::MTChordTable_(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)a1 = off_141688;
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = 8654537;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 6objc_storeStrong(&location, 0) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 92) = 0u;
  *(_OWORD *)(a1 + 108) = 0u;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 14objc_storeStrong(&location, 0) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_OWORD *)(a1 + 204) = 0u;
  *(_OWORD *)(a1 + 22objc_storeStrong(&location, 0) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 252) = 0u;
  *(_DWORD *)(a1 + 364) = 0;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 268) = 0u;
  *(_OWORD *)(a1 + 284) = 0u;
  *(_OWORD *)(a1 + 30objc_storeStrong(&location, 0) = 0u;
  *(_OWORD *)(a1 + 316) = 0u;
  *(_OWORD *)(a1 + 332) = 0u;
  *(_OWORD *)(a1 + 348) = 0u;
  MTChordTable_::clearAllChordsInTable((MTChordTable_ *)a1);
  return a1;
}

void sub_485DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  for (uint64_t i = 344; i != 8; i -= 24)
  {
    a10 = (void **)(v10 + i);
    std::vector<MTChordGestureSet_>::__destroy_vector::operator()[abi:ne180100](&a10);
  }
  _Unwind_Resume(a1);
}

void MTChordTable_::clearAllChordsInTable(MTChordTable_ *this)
{
  (*(void (**)(MTChordTable_ *))(*(void *)this + 16))(this);
  for (uint64_t i = 0; i != 14; ++i)
  {
    int v3 = (char *)this + 24 * i;
    uint64_t v6 = *((void *)v3 + 5);
    CFStringRef v5 = v3 + 40;
    uint64_t v4 = v6;
    uint64_t v7 = *(v5 - 1);
    if (v6 != v7)
    {
      do
      {
        v4 -= 240;
        std::allocator<MTChordGestureSet_>::destroy[abi:ne180100]((uint64_t)this + 24 * i + 48, v4);
      }
      while (v4 != v7);
    }
    *CFStringRef v5 = v7;
  }
}

void MTChordTable_::~MTChordTable_(MTChordTable_ *this)
{
  *(void *)this = off_141688;
  for (uint64_t i = 344; i != 8; i -= 24)
  {
    int v3 = (void **)((char *)this + i);
    std::vector<MTChordGestureSet_>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

{
  uint64_t i;
  void **v3;

  *(void *)this = off_141688;
  for (uint64_t i = 344; i != 8; i -= 24)
  {
    int v3 = (void **)((char *)this + i);
    std::vector<MTChordGestureSet_>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

{
  uint64_t i;
  void **v3;

  *(void *)this = off_141688;
  for (uint64_t i = 344; i != 8; i -= 24)
  {
    int v3 = (void **)((char *)this + i);
    std::vector<MTChordGestureSet_>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  operator delete();
}

uint64_t MTChordTable_::getFingerMaskForLookup(MTChordTable_ *this, const MTHandStatistics_ *a2)
{
  int v2 = *((_DWORD *)this + 7);
  int v3 = (char *)a2 + 296;
  if (v2 == 2) {
    int v3 = (char *)a2 + 220;
  }
  if (v2 == 1) {
    uint64_t v4 = (unsigned __int16 *)((char *)a2 + 300);
  }
  else {
    uint64_t v4 = (unsigned __int16 *)v3;
  }
  return *v4;
}

char *MTChordTable_::getChordVectForCombo(MTChordTable_ *this, char a2)
{
  if ((a2 & 0x1F) == 0) {
    return (char *)this + 32;
  }
  v2.i64[0] = 0x100000001;
  v2.i64[1] = 0x100000001;
  int v3 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(a2), (uint32x4_t)xmmword_1110C0), v2));
  unsigned int v4 = v3 + 5;
  if ((a2 & 1) == 0) {
    unsigned int v4 = v3;
  }
  if (!v4) {
    return (char *)this + 32;
  }
  CFStringRef v5 = (char *)this + 24 * v4;
  uint64_t v7 = *((void *)v5 + 4);
  uint64_t v8 = *((void *)v5 + 5);
  uint64_t v6 = v5 + 32;
  uint64_t v9 = v8 - v7;
  if (!v9)
  {
LABEL_10:
    if (v4 - 5 <= 4)
    {
      int v15 = (char *)this + 24 * v4 - 96;
      uint64_t v16 = *((void *)v15 + 4);
      uint64_t v17 = *((void *)v15 + 5);
      uint64_t v6 = v15 + 32;
      uint64_t v18 = v17 - v16;
      if (v18)
      {
        uint64_t v19 = 0;
        unint64_t v20 = 0xEEEEEEEEEEEEEEEFLL * (v18 >> 4);
        unsigned int v21 = 1;
        while (1)
        {
          int v22 = *(_DWORD *)(v16 + 240 * v19 + 232);
          if (!v22 || (*((_DWORD *)this + 6) & v22) != 0) {
            break;
          }
          uint64_t v19 = v21;
          BOOL v14 = v20 > v21++;
          if (!v14) {
            return (char *)this + 32;
          }
        }
        return v6;
      }
    }
    return (char *)this + 32;
  }
  uint64_t v10 = 0;
  unint64_t v11 = 0xEEEEEEEEEEEEEEEFLL * (v9 >> 4);
  unsigned int v12 = 1;
  while (1)
  {
    int v13 = *(_DWORD *)(v7 + 240 * v10 + 232);
    if (!v13 || (*((_DWORD *)this + 6) & v13) != 0) {
      return v6;
    }
    uint64_t v10 = v12;
    BOOL v14 = v11 > v12++;
    if (!v14) {
      goto LABEL_10;
    }
  }
}

uint64_t MTChordTable_::hasTwoFingerOrientationEvents(MTChordTable_ *this)
{
  uint64_t v2 = *((void *)this + 10);
  uint64_t v1 = *((void *)this + 11);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 1;
  while (1)
  {
    uint64_t v6 = (MTChordGestureSet_ *)(v2 + 240 * v4);
    int v7 = *((_DWORD *)v6 + 58);
    if (v7 && (*((_DWORD *)this + 6) & v7) == 0) {
      goto LABEL_7;
    }
    if (MTChordGestureSet_::hasEnabledOrientationEvents(v6, this)) {
      return 1;
    }
    uint64_t v2 = *((void *)this + 10);
    uint64_t v1 = *((void *)this + 11);
LABEL_7:
    uint64_t v4 = v5;
    if (0xEEEEEEEEEEEEEEEFLL * ((v1 - v2) >> 4) <= v5++) {
      return 0;
    }
  }
}

uint64_t MTChordTable_::getMinThumbSpecificFingerCount(MTChordTable_ *this)
{
  uint64_t v2 = 6;
  while (1)
  {
    int v3 = (char *)this + 24 * v2;
    uint64_t v6 = *((void *)v3 + 4);
    unsigned int v5 = (uint64_t *)(v3 + 32);
    uint64_t v4 = v6;
    uint64_t v7 = v5[1];
    if (v7 != v6) {
      break;
    }
LABEL_9:
    if (++v2 == 10) {
      return 0;
    }
  }
  uint64_t v8 = 0;
  unsigned int v9 = 1;
  while (1)
  {
    uint64_t v10 = (MTChordGestureSet_ *)(v4 + 240 * v8);
    int v11 = *((_DWORD *)v10 + 58);
    if (v11 && (*((_DWORD *)this + 6) & v11) == 0) {
      goto LABEL_8;
    }
    if (!MTChordGestureSet_::isEmpty(v10)) {
      return (v2 - 4);
    }
    uint64_t v7 = v5[1];
    uint64_t v4 = *v5;
LABEL_8:
    uint64_t v8 = v9;
    if (0xEEEEEEEEEEEEEEEFLL * ((v7 - v4) >> 4) <= v9++) {
      goto LABEL_9;
    }
  }
}

uint64_t MTChordTable_::findMatchingChord(MTChordTable_ *this, char a2, int a3)
{
  ChordVectForCombo = MTChordTable_::getChordVectForCombo(this, a2);
  uint64_t v6 = *(void *)ChordVectForCombo;
  uint64_t v7 = *((void *)ChordVectForCombo + 1);
  uint64_t result = 0;
  uint64_t v9 = v7 - v6;
  if (v9)
  {
    unint64_t v10 = 0xEEEEEEEEEEEEEEEFLL * (v9 >> 4);
    float v11 = 3.4028e38;
    uint64_t v12 = 1;
    do
    {
      if (*(void *)(v6 + 160) == *(void *)(v6 + 168)) {
        int v13 = (*(unsigned __int16 *)(v6 + 120) >> 6) & 1;
      }
      else {
        int v13 = 0;
      }
      int v14 = *(_DWORD *)(v6 + 232);
      if (v14) {
        BOOL v15 = (*((_DWORD *)this + 6) & v14) != 0;
      }
      else {
        BOOL v15 = 1;
      }
      int v16 = !v15 | v13 ^ a3;
      if (v11 <= 0.0) {
        uint64_t v17 = result;
      }
      else {
        uint64_t v17 = v6;
      }
      if (v11 <= 0.0) {
        float v18 = v11;
      }
      else {
        float v18 = 0.0;
      }
      if (!v16)
      {
        uint64_t result = v17;
        float v11 = v18;
      }
      v6 += 240;
    }
    while (v10 > v12++);
  }
  return result;
}

MTChordGestureSet_ *MTChordTable_::copyChordIntoTable(MTChordTable_ *this, MTChordGestureSet_ *a2)
{
  unsigned int v2 = *((_DWORD *)a2 + 56);
  uint64_t v3 = *((void *)this + 2);
  *((_DWORD *)a2 + 51) = *((_DWORD *)this + 2);
  *((void *)a2 + 26) = v3;
  if (v2 <= 0xD)
  {
    uint64_t v4 = (char *)this + 24 * v2;
    uint64_t v6 = (MTChordGestureSet_ *)*((void *)v4 + 5);
    unint64_t v5 = *((void *)v4 + 6);
    uint64_t v7 = (uint64_t *)(v4 + 40);
    if ((unint64_t)v6 >= v5)
    {
      uint64_t v8 = std::vector<MTChordGestureSet_>::__push_back_slow_path<MTChordGestureSet_ const&>((uint64_t *)this + 3 * v2 + 4, a2);
    }
    else
    {
      MTChordGestureSet_::MTChordGestureSet_(v6, a2);
      uint64_t v8 = (uint64_t)v6 + 240;
      uint64_t *v7 = (uint64_t)v6 + 240;
    }
    uint64_t *v7 = v8;
    return (MTChordGestureSet_ *)(v8 - 240);
  }
  return a2;
}

void sub_48BCC(_Unwind_Exception *a1)
{
  void *v2 = v1;
  _Unwind_Resume(a1);
}

void std::vector<MTChordGestureSet_>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 240;
        std::allocator<MTChordGestureSet_>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<MTChordGestureSet_>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (void **)(a2 + 160);
  std::vector<MTSlideGesture_>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v3 = *(void **)(a2 + 128);
  if (v3)
  {
    *(void *)(a2 + 136) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a2 + 96);
  if (v4)
  {
    *(void *)(a2 + 104) = v4;
    operator delete(v4);
  }
  unint64_t v5 = *(void **)(a2 + 64);
  if (v5)
  {
    *(void *)(a2 + 72) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a2 + 32);
  if (v6)
  {
    *(void *)(a2 + 4objc_storeStrong(&location, 0) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v7;
    operator delete(v7);
  }
}

void std::vector<MTSlideGesture_>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unsigned int v2 = *a1;
  if (*v2)
  {
    std::vector<MTSlideGesture_>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<MTSlideGesture_>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 160);
      v4 -= 160;
      unint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 152) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t std::vector<MTChordGestureSet_>::__push_back_slow_path<MTChordGestureSet_ const&>(uint64_t *a1, const MTChordGestureSet_ *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x111111111111111) {
    std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xEEEEEEEEEEEEEEEFLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x88888888888888) {
    unint64_t v9 = 0x111111111111111;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTChordGestureSet_>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  int v13 = v10;
  int v14 = (MTChordGestureSet_ *)&v10[240 * v4];
  int v16 = &v10[240 * v9];
  MTChordGestureSet_::MTChordGestureSet_(v14, a2);
  BOOL v15 = (char *)v14 + 240;
  std::vector<MTChordGestureSet_>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<MTChordGestureSet_>::~__split_buffer(&v13);
  return v11;
}

void sub_48E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t std::vector<MTChordGestureSet_>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MTChordGestureSet_>,std::reverse_iterator<MTChordGestureSet_*>,std::reverse_iterator<MTChordGestureSet_*>,std::reverse_iterator<MTChordGestureSet_*>>((uint64_t)(a1 + 2), a1[1], (const MTChordGestureSet_ *)a1[1], *a1, (const MTChordGestureSet_ *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MTChordGestureSet_>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x111111111111112) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(240 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MTChordGestureSet_>,std::reverse_iterator<MTChordGestureSet_*>,std::reverse_iterator<MTChordGestureSet_*>,std::reverse_iterator<MTChordGestureSet_*>>(uint64_t a1, uint64_t a2, const MTChordGestureSet_ *a3, uint64_t a4, const MTChordGestureSet_ *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  unint64_t v13 = 0xAAAAAAAAAAAAAA00;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    unint64_t v9 = a3;
    do
    {
      unint64_t v9 = (const MTChordGestureSet_ *)((char *)v9 - 240);
      MTChordGestureSet_::MTChordGestureSet_((MTChordGestureSet_ *)(v7 - 240), v9);
      uint64_t v7 = *((void *)&v15 + 1) - 240;
      *((void *)&v15 + 1) -= 240;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  LOBYTE(v13) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTChordGestureSet_>,std::reverse_iterator<MTChordGestureSet_*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_4901C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTChordGestureSet_>,std::reverse_iterator<MTChordGestureSet_*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<MTChordGestureSet_>,std::reverse_iterator<MTChordGestureSet_*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<MTChordGestureSet_>,std::reverse_iterator<MTChordGestureSet_*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<MTChordGestureSet_>::destroy[abi:ne180100](v3, v1);
      v1 += 240;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<MTChordGestureSet_>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<MTChordGestureSet_>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 240;
    std::allocator<MTChordGestureSet_>::destroy[abi:ne180100](v4, i - 240);
  }
}

void __cxx_global_var_init_24()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_23(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_currentTimestamp", a2);
  }
}

void __cxx_global_var_init_3_23(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_previousTimestamp", a2);
  }
}

void __cxx_global_var_init_4_23(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)114,(char)101,(char)108,(char)101,(char)97,(char)115,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_release", a2);
  }
}

void __cxx_global_var_init_5_23(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)97,(char)99,(char)116,(char)105,(char)118,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_activation", a2);
  }
}

void __cxx_global_var_init_6_23(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)101,(char)97,(char)114,(char)108,(char)105,(char)101,(char)115,(char)116,(char)78,(char)111,(char)110,(char)68,(char)105,(char)118,(char)105,(char)110,(char)103,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_earliestNonDivingTimestamp", a2);
  }
}

void __cxx_global_var_init_7_23(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)100,(char)105,(char)118,(char)105,(char)110,(char)103,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)67,(char)104,(char)97,(char)110,(char)103,(char)101,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_divingButtonChangeTimestamp", a2);
  }
}

void __cxx_global_var_init_8_24(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)105,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_min", a2);
  }
}

void __cxx_global_var_init_9_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_max", a2);
  }
}

void __cxx_global_var_init_10_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)66,(char)114,(char)101,(char)97,(char)107,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerBreakTouch_max", a2);
  }
}

void __cxx_global_var_init_11_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)82,(char)101,(char)115,(char)101,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentReset", a2);
  }
}

void __cxx_global_var_init_12_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)65,(char)99,(char)116,(char)105,(char)118,(char)105,(char)116,(char)121>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentButtonActivity", a2);
  }
}

void __cxx_global_var_init_13_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_firstFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_14_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_firstFingerCleanStartInRange", a2);
  }
}

void __cxx_global_var_init_15_18(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerCleanStartInRange", a2);
  }
}

void __cxx_global_var_init_16_18(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_17_18(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_previousRecentFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_18_18(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)78,(char)111,(char)110,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)100,(char)111,(char)119,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentNonThumbTouchdown", a2);
  }
}

void __cxx_global_var_init_19_18(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_restingThumbTouchDown", a2);
  }
}

void __cxx_global_var_init_20_18(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)84,(char)119,(char)111,(char)79,(char)114,(char)77,(char)111,(char)114,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentTwoOrMoreFingersTouching", a2);
  }
}

void __cxx_global_var_init_21_19(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)118,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFiveFingersTouching", a2);
  }
}

void __cxx_global_var_init_22_19(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)76,(char)105,(char)102,(char)116,(char)111,(char)102,(char)102>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerLiftoff", a2);
  }
}

void __cxx_global_var_init_23_19(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)69,(char)110,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerEnd", a2);
  }
}

void __cxx_global_var_init_24_19(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentScrollZoom", a2);
  }
}

void __cxx_global_var_init_25_19(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)119,(char)105,(char)116,(char)99,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentChordSwitch", a2);
  }
}

void __cxx_global_var_init_26_19(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentChordSlide", a2);
  }
}

void __cxx_global_var_init_27_18(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109,(char)83,(char)108,(char)105,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentScrollZoomSlide", a2);
  }
}

void __cxx_global_var_init_28_18(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)108,(char)117,(char)105,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentFluidSlide", a2);
  }
}

void __cxx_global_var_init_29_18(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)101,(char)120,(char)99,(char)101,(char)115,(char)115,(char)84,(char)97,(char)112,(char)77,(char)111,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_excessTapMotion", a2);
  }
}

void __cxx_global_var_init_30_18(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)104,(char)97,(char)110,(char)100,(char)95,(char)99,(char)104,(char)111,(char)114,(char)100,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"righthand_chords", a2);
  }
}

uint64_t __MTForceConfigRegister()
{
  uint64_t result = _CFRuntimeRegisterClass();
  __kMTForceConfigTypeID = result;
  return result;
}

uint64_t MTForceConfigCreate(int a1, int a2)
{
  if (!__kMTForceConfigTypeID) {
    pthread_once(&__forceConfigTypeInit, (void (*)(void))__MTForceConfigRegister);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v6 = Instance;
  if (Instance)
  {
    *(_DWORD *)(Instance + 16) = 1;
    *(_DWORD *)(Instance + 2objc_storeStrong(&location, 0) = a2;
    *(_DWORD *)(Instance + 24) = a1;
    *(unsigned char *)(Instance + 28) = 0;
    *(void *)(Instance + 16objc_storeStrong(&location, 0) = 0;
    *(void *)(Instance + 168) = 0;
    _MTForceConfigGenerateDefaultParams(Instance, v5);
  }
  return v6;
}

double _MTForceConfigGenerateDefaultParams(uint64_t a1, __n128 a2)
{
  switch(*(_DWORD *)(a1 + 24))
  {
    case 1:
      *(unsigned char *)(a1 + 29) = 2;
      goto LABEL_5;
    case 2:
      *(unsigned char *)(a1 + 29) = 2;
      *(_OWORD *)(a1 + 32) = xmmword_1112A0;
      a2 = (__n128)xmmword_1112B0;
      goto LABEL_7;
    case 5:
    case 0x10:
      *(unsigned char *)(a1 + 29) = 3;
      *(_OWORD *)(a1 + 32) = xmmword_111270;
      *(void *)(a1 + 48) = 0x437F000043960000;
      *(_OWORD *)(a1 + 96) = xmmword_111280;
      a2.n128_u64[0] = 0x500000006;
      *(void *)(a1 + 112) = 0x500000006;
      return a2.n128_f64[0];
    case 0xA:
    case 0xC:
      *(_WORD *)(a1 + 28) = 513;
LABEL_5:
      *(_OWORD *)(a1 + 32) = xmmword_111270;
      a2 = (__n128)xmmword_111280;
LABEL_7:
      *(__n128 *)(a1 + 96) = a2;
      break;
    case 0xB:
      *(_WORD *)(a1 + 28) = 513;
      a2.n128_u64[0] = 0;
      *(_OWORD *)(a1 + 32) = xmmword_111290;
      *(void *)(a1 + 96) = 0;
      *(void *)(a1 + 104) = 0;
      break;
    case 0x11:
      *(unsigned char *)(a1 + 29) = 3;
      *(_OWORD *)(a1 + 32) = xmmword_111270;
      *(void *)(a1 + 48) = 0x437F000043960000;
      *(_OWORD *)(a1 + 96) = xmmword_111280;
      a2.n128_u64[0] = 0x500000006;
      *(void *)(a1 + 112) = 0x500000006;
      *(unsigned char *)(a1 + 169) = 1;
      break;
    default:
      return a2.n128_f64[0];
  }
  return a2.n128_f64[0];
}

uint64_t MTForceConfigGetBehavior(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t MTForceConfigGetNumStages(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 29);
}

uint64_t MTForceConfigIsContinuous(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 28);
}

uint64_t MTForceConfigGetActuationsForStage(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 8 * a2 + 96);
}

uint64_t MTForceConfigShouldSkipActivationForStage(uint64_t a1, unsigned int a2)
{
  return *(unsigned __int8 *)(a1 + a2 + 160);
}

uint64_t MTForceConfigShouldSkipReleaseForStage(uint64_t a1, unsigned int a2)
{
  return *(unsigned __int8 *)(a1 + a2 + 168);
}

float MTForceConfigGetThresholdsForStage(uint64_t a1, unsigned int a2)
{
  return *(float *)(a1 + 8 * a2 + 32);
}

double __MTForceConfigInit(_OWORD *a1)
{
  if (a1)
  {
    double result = 0.0;
    a1[9] = 0u;
    a1[10] = 0u;
    a1[7] = 0u;
    a1[8] = 0u;
    a1[5] = 0u;
    a1[6] = 0u;
    a1[3] = 0u;
    a1[4] = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
  }
  return result;
}

void MTPListGestureConfig_::MTPListGestureConfig_(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void MTPListGestureConfig_::~MTPListGestureConfig_(MTPListGestureConfig_ *this)
{
  *(void *)this = off_141728;
  uint64_t v2 = (const void *)*((void *)this + 10);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 1objc_storeStrong(&location, 0) = 0;
  }
  uint64_t v3 = (const void *)*((void *)this + 11);
  if (v3)
  {
    CFRelease(v3);
    *((void *)this + 11) = 0;
  }
  uint64_t v4 = (const void *)*((void *)this + 12);
  if (v4)
  {
    CFRelease(v4);
    *((void *)this + 12) = 0;
  }
  __n128 v5 = (const void *)*((void *)this + 13);
  if (v5)
  {
    CFRelease(v5);
    *((void *)this + 13) = 0;
  }
  uint64_t v6 = (const void *)*((void *)this + 14);
  if (v6)
  {
    CFRelease(v6);
    *((void *)this + 14) = 0;
  }

  MTGestureConfig_::~MTGestureConfig_((MTGestureConfig_ *)this);
}

{
  uint64_t vars8;

  MTPListGestureConfig_::~MTPListGestureConfig_(this);

  operator delete();
}

void MTPListGestureConfig_::setParseErrorString(MTPListGestureConfig_ *this, CFStringRef theString)
{
  CFStringRef v3 = (const __CFString *)*((void *)this + 14);
  if (v3 != theString)
  {
    if (v3) {
      CFRelease(v3);
    }
    *((void *)this + 14) = theString;
    if (theString)
    {
      CStringPtr = CFStringGetCStringPtr(theString, 0);
      printf("%s", CStringPtr);
    }
  }
}

CFComparisonResult MTPListGestureConfig_::eventTypeCFStringToCode(MTPListGestureConfig_ *this, CFStringRef theString1)
{
  if (!theString1) {
    return 0;
  }
  if (CFStringCompare(theString1, @"Mouse Point", 1uLL) == kCFCompareEqualTo) {
    return 68;
  }
  if (CFStringCompare(theString1, @"Mouse Down", 1uLL) == kCFCompareEqualTo) {
    return 65;
  }
  if (CFStringCompare(theString1, @"Mouse Up", 1uLL) == kCFCompareEqualTo) {
    return 66;
  }
  if (CFStringCompare(theString1, @"Mouse Click", 1uLL) == kCFCompareEqualTo) {
    return 67;
  }
  if (CFStringCompare(theString1, @"Mouse Double Click", 1uLL) == kCFCompareEqualTo) {
    return 72;
  }
  if (CFStringCompare(theString1, @"Mouse Drag", 1uLL) == kCFCompareEqualTo) {
    return 69;
  }
  if (CFStringCompare(theString1, @"Scroll", 1uLL) == kCFCompareEqualTo) {
    return 70;
  }
  if (CFStringCompare(theString1, @"Scroll To Edge", 1uLL) == kCFCompareEqualTo) {
    return 78;
  }
  if (CFStringCompare(theString1, @"Orientation", 1uLL) == kCFCompareEqualTo) {
    return 71;
  }
  if (CFStringCompare(theString1, @"Zoom Toggle", 1uLL) == kCFCompareEqualTo) {
    return 73;
  }
  if (CFStringCompare(theString1, @"Key Down", 1uLL) == kCFCompareEqualTo) {
    return 129;
  }
  if (CFStringCompare(theString1, @"Key Up", 1uLL) == kCFCompareEqualTo) {
    return 130;
  }
  if (CFStringCompare(theString1, @"Key Stroke", 1uLL) == kCFCompareEqualTo) {
    return 128;
  }
  if (CFStringCompare(theString1, @"Swipe", 1uLL) == kCFCompareEqualTo) {
    return 133;
  }
  if (CFStringCompare(theString1, @"Fluid Navigation", 1uLL) == kCFCompareEqualTo) {
    return 36;
  }
  if (CFStringCompare(theString1, @"Fluid Dock", 1uLL) == kCFCompareEqualTo) {
    return 37;
  }
  if (CFStringCompare(theString1, @"Fluid Notification", 1uLL) == kCFCompareEqualTo) {
    return 38;
  }
  if (CFStringCompare(theString1, @"Fluid Notification Alt", 1uLL) == kCFCompareEqualTo) {
    return 39;
  }
  if (CFStringCompare(theString1, @"Show Definition", 1uLL) == kCFCompareEqualTo) {
    return 140;
  }
  if (CFStringCompare(theString1, @"Key Consumer App", 1uLL) == kCFCompareEqualTo
    || CFStringCompare(theString1, @"Symbolic Hotkey", 1uLL) == kCFCompareEqualTo)
  {
    return 134;
  }
  if (CFStringCompare(theString1, @"System", 1uLL) == kCFCompareEqualTo) {
    return 135;
  }
  if (CFStringCompare(theString1, @"Gesture Ended", 1uLL) == kCFCompareEqualTo) {
    return 32;
  }
  if (CFStringCompare(theString1, @"Gesture Started", 1uLL) == kCFCompareEqualTo) {
    return 33;
  }
  CFComparisonResult result = CFStringCompare(theString1, @"Window Move", 1uLL);
  if (result)
  {
    CFStringCompare(theString1, @"Window Size", 1uLL);
    return 0;
  }
  return result;
}

uint64_t MTPListGestureConfig_::keyCodeCFStringToCode(MTPListGestureConfig_ *this, CFStringRef theString1)
{
  uint64_t v3 = 0;
  while (1)
  {
    CFStringRef v4 = (const __CFString *)gUSBKeyNames[v3];
    if (v4)
    {
      if (CFStringCompare(theString1, v4, 1uLL) == kCFCompareEqualTo) {
        break;
      }
    }
    if (++v3 == 256)
    {
      LOWORD(v3) = 0;
      return (unsigned __int16)v3;
    }
  }
  return (unsigned __int16)v3;
}

uint64_t MTPListGestureConfig_::modifiersCFStringToMask(MTPListGestureConfig_ *this, const __CFString *cf)
{
  if (!cf) {
    return 0;
  }
  CFTypeID v3 = CFGetTypeID(cf);
  if (v3 != CFStringGetTypeID()) {
    return 0;
  }
  if (CFStringFind(cf, @"Shift", 1uLL).location == -1) {
    unsigned int v4 = 0;
  }
  else {
    unsigned int v4 = 34;
  }
  if (CFStringFind(cf, @"Cmd", 1uLL).location != -1) {
    v4 |= 0x88u;
  }
  if (CFStringFind(cf, @"Alt", 1uLL).location != -1) {
    v4 |= 0x44u;
  }
  if (CFStringFind(cf, @"Ctrl", 1uLL).location != -1) {
    v4 |= 0x11u;
  }
  if (CFStringFind(cf, @"Button1", 1uLL).location != -1) {
    v4 |= 0x100u;
  }
  if (CFStringFind(cf, @"Button2", 1uLL).location != -1) {
    v4 |= 0x200u;
  }
  if (CFStringFind(cf, @"Button3", 1uLL).location != -1) {
    v4 |= 0x400u;
  }
  if (CFStringFind(cf, @"Button4", 1uLL).location != -1) {
    v4 |= 0x800u;
  }
  if (CFStringFind(cf, @"Button5", 1uLL).location != -1) {
    v4 |= 0x1000u;
  }
  if (CFStringFind(cf, @"Button6", 1uLL).location != -1) {
    v4 |= 0x2000u;
  }
  if (CFStringFind(cf, @"Button7", 1uLL).location == -1) {
    return v4;
  }
  else {
    return v4 | 0x4000;
  }
}

void MTPListGestureConfig_::parseCreateActionEvent(MTPListGestureConfig_ *a1, const __CFDictionary *cf, uint64_t a3)
{
  if (cf && (CFTypeID v6 = CFGetTypeID(cf), v6 == CFDictionaryGetTypeID()))
  {
    __int16 v31 = 0;
    int valuePtr = 0;
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(cf, @"EventType");
    if (Value
      && (CFStringRef v8 = Value,
          CFTypeID v9 = CFGetTypeID(Value),
          uint64_t v10 = (MTPListGestureConfig_ *)CFStringGetTypeID(),
          (MTPListGestureConfig_ *)v9 == v10))
    {
      int v11 = MTPListGestureConfig_::eventTypeCFStringToCode(v10, v8);
      if (v11)
      {
        __int16 v12 = v11;
        CFStringRef v13 = (const __CFString *)CFDictionaryGetValue(cf, @"Modifiers");
        if (!v13) {
          goto LABEL_19;
        }
        CFStringRef v14 = v13;
        CFTypeID v15 = CFGetTypeID(v13);
        TypeID = (MTPListGestureConfig_ *)CFStringGetTypeID();
        if ((MTPListGestureConfig_ *)v15 == TypeID)
        {
          int v17 = MTPListGestureConfig_::modifiersCFStringToMask(TypeID, v14);
          int valuePtr = v17;
        }
        else
        {
          CFTypeID v19 = CFGetTypeID(v14);
          if (v19 != CFNumberGetTypeID())
          {
LABEL_18:
            CFStringRef v20 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@ Modifier '%@' not recognized\n", @"ERROR in PListGestureParser:", v14);
            MTPListGestureConfig_::setParseErrorString(a1, v20);
LABEL_19:
            CFStringRef v21 = (const __CFString *)CFDictionaryGetValue(cf, @"KeyCode");
            if (v21)
            {
              CFStringRef v22 = v21;
              CFTypeID v23 = CFGetTypeID(v21);
              int v24 = (MTPListGestureConfig_ *)CFStringGetTypeID();
              if ((MTPListGestureConfig_ *)v23 == v24)
              {
                __int16 v25 = MTPListGestureConfig_::keyCodeCFStringToCode(v24, v22);
                __int16 v31 = v25;
LABEL_25:
                unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
                MTActionEvent_::MTActionEvent_((MTActionEvent_ *)&v29, v12, valuePtr, v25);
                unint64_t v27 = *(void *)(a3 + 8);
                if (v27 >= *(void *)(a3 + 16))
                {
                  uint64_t v28 = std::vector<MTActionEvent_>::__push_back_slow_path<MTActionEvent_ const&>(a3, (const MTActionEvent_ *)&v29);
                }
                else
                {
                  MTActionEvent_::MTActionEvent_(*(MTActionEvent_ **)(a3 + 8), (const MTActionEvent_ *)&v29);
                  uint64_t v28 = v27 + 8;
                  *(void *)(a3 + 8) = v27 + 8;
                }
                *(void *)(a3 + 8) = v28;
                return;
              }
              CFTypeID v26 = CFGetTypeID(v22);
              if (v26 == CFNumberGetTypeID())
              {
                CFNumberGetValue((CFNumberRef)v22, kCFNumberSInt16Type, &v31);
                __int16 v25 = v31;
                goto LABEL_25;
              }
            }
            __int16 v25 = 0;
            goto LABEL_25;
          }
          CFNumberGetValue((CFNumberRef)v14, kCFNumberSInt32Type, &valuePtr);
          int v17 = valuePtr;
        }
        if (v17) {
          goto LABEL_19;
        }
        goto LABEL_18;
      }
      CFStringRef v18 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@ Unknown or unsupported %@ '%@'\n", @"ERROR in PListGestureParser:", @"EventType", v8);
    }
    else
    {
      CFStringRef v18 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@ Action Event missing '%@' key\n", @"ERROR in PListGestureParser:", @"EventType");
    }
  }
  else
  {
    CFStringRef v18 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@ Action Event not a CFDictionary\n", @"ERROR in PListGestureParser:");
  }

  MTPListGestureConfig_::setParseErrorString(a1, v18);
}

void sub_4A49C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void MTPListGestureConfig_::lookupOrParseActionEvents(uint64_t a1, CFDictionaryRef theDict, void *a3)
{
  a3[1] = *a3;
  CFStringRef Value = CFDictionaryGetValue(theDict, @"Action");
  if (Value)
  {
    CFTypeID v6 = Value;
    CFTypeID v7 = CFGetTypeID(Value);
    if (v7 == CFStringGetTypeID())
    {
      CFArrayRef v8 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 104), v6);
      if (v8 && (CFArrayRef v9 = v8, v10 = CFGetTypeID(v8), v10 == CFArrayGetTypeID()))
      {
        CFIndex Count = CFArrayGetCount(v9);
        if (Count >= 1)
        {
          CFIndex v12 = Count;
          for (CFIndex i = 0; i != v12; ++i)
          {
            CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v9, i);
            MTPListGestureConfig_::parseCreateActionEvent((MTPListGestureConfig_ *)a1, ValueAtIndex, (uint64_t)a3);
          }
        }
      }
      else
      {
        CFStringRef v15 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@ Action '%@' has no event array\n", @"ERROR in PListGestureParser:", v6);
        MTPListGestureConfig_::setParseErrorString((MTPListGestureConfig_ *)a1, v15);
      }
    }
  }
}

uint64_t MTPListGestureConfig_::parseGestureMotionCode(MTPListGestureConfig_ *this, CFDictionaryRef theDict)
{
  if (!theDict
    || (CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"Motion")) == 0
    || (CFStringRef v4 = Value, v5 = CFGetTypeID(Value), v5 != CFStringGetTypeID()))
  {
    CFStringRef v7 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@ Gesture's '%@' key missing\n", @"ERROR in PListGestureParser:", @"Motion");
LABEL_32:
    MTPListGestureConfig_::setParseErrorString(this, v7);
    return 0;
  }
  if (CFStringCompare(v4, @"Tap", 1uLL) == kCFCompareEqualTo) {
    return 12288;
  }
  if (CFStringCompare(v4, @"DroppedFingerTap", 1uLL) == kCFCompareEqualTo) {
    return 24576;
  }
  if (CFStringCompare(v4, @"DoubleTap", 1uLL) == kCFCompareEqualTo) {
    return 28672;
  }
  if (CFStringCompare(v4, @"Hold", 1uLL) == kCFCompareEqualTo) {
    return 4096;
  }
  if (CFStringCompare(v4, @"Lift", 1uLL) == kCFCompareEqualTo) {
    return 0x2000;
  }
  if (CFStringCompare(v4, @"Translate", 1uLL) == kCFCompareEqualTo) {
    return 15;
  }
  if (CFStringCompare(v4, @"Horizontal", 1uLL) == kCFCompareEqualTo) {
    return 3;
  }
  if (CFStringCompare(v4, @"Vertical", 1uLL) == kCFCompareEqualTo) {
    return 12;
  }
  if (CFStringCompare(v4, @"Down", 1uLL) == kCFCompareEqualTo) {
    return 8;
  }
  if (CFStringCompare(v4, @"Up", 1uLL) == kCFCompareEqualTo) {
    return 4;
  }
  if (CFStringCompare(v4, @"Left", 1uLL) == kCFCompareEqualTo) {
    return 2;
  }
  uint64_t v6 = 1;
  if (CFStringCompare(v4, @"Right", 1uLL))
  {
    if (CFStringCompare(v4, @"LowerLeft", 1uLL) == kCFCompareEqualTo) {
      return 10;
    }
    if (CFStringCompare(v4, @"LowerRight", 1uLL) == kCFCompareEqualTo) {
      return 9;
    }
    if (CFStringCompare(v4, @"UpperLeft", 1uLL) == kCFCompareEqualTo) {
      return 6;
    }
    if (CFStringCompare(v4, @"UpperRight", 1uLL) == kCFCompareEqualTo) {
      return 5;
    }
    if (CFStringCompare(v4, @"Scale", 1uLL) == kCFCompareEqualTo) {
      return 48;
    }
    if (CFStringCompare(v4, @"Expand", 1uLL) == kCFCompareEqualTo) {
      return 16;
    }
    if (CFStringCompare(v4, @"Contract", 1uLL) == kCFCompareEqualTo) {
      return 32;
    }
    if (CFStringCompare(v4, @"Rotate", 1uLL) == kCFCompareEqualTo) {
      return 192;
    }
    if (CFStringCompare(v4, @"RotateLeft", 1uLL) == kCFCompareEqualTo) {
      return 64;
    }
    if (CFStringCompare(v4, @"RotateRight", 1uLL) == kCFCompareEqualTo) {
      return 128;
    }
    if (CFStringCompare(v4, @"Scale+Rotate", 1uLL) == kCFCompareEqualTo) {
      return 240;
    }
    if (CFStringCompare(v4, @"Translate+Scale", 1uLL) == kCFCompareEqualTo) {
      return 63;
    }
    if (CFStringCompare(v4, @"Translate+Rotate", 1uLL) == kCFCompareEqualTo) {
      return 207;
    }
    if (CFStringCompare(v4, @"Translate+Scale+Rotate", 1uLL) == kCFCompareEqualTo) {
      return 255;
    }
    CFStringRef v7 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@ Unrecognized gesture %@ '%@'\n", @"ERROR in PListGestureParser:", @"Motion", v4);
    goto LABEL_32;
  }
  return v6;
}

const __CFNumber *MTPListGestureConfig_::parseFloatValue(MTPListGestureConfig_ *this, CFDictionaryRef theDict, const __CFString *key, float *a4, const __CFString *a5)
{
  CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(theDict, key);
  if (result)
  {
    CFNumberRef v10 = result;
    CFTypeID v11 = CFGetTypeID(result);
    if (v11 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue(v10, kCFNumberFloat32Type, a4)) {
        return (const __CFNumber *)(&def_411C8 + 1);
      }
      CFStringRef v12 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@ Corrupt %@ value in %@\n", @"ERROR in PListGestureParser:", key, a5);
    }
    else
    {
      CFStringRef v12 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@ %@ value should be a number in %@\n", @"ERROR in PListGestureParser:", key, a5);
    }
    MTPListGestureConfig_::setParseErrorString(this, v12);
    return 0;
  }
  return result;
}

MTPListGestureConfig_ *MTPListGestureConfig_::parseMotionSensitivity(MTPListGestureConfig_ *result, const __CFDictionary *a2, uint64_t a3)
{
  if (a2)
  {
    CFTypeID v5 = result;
    uint64_t v22 = 0;
    float v21 = 0.0635;
    float v19 = 1.0;
    float v20 = 400.0;
    if (MTPListGestureConfig_::parseFloatValue(result, a2, @"Resolution_dpi", &v20, @"Motion Sensitivity"))
    {
      if (v20 != 0.0)
      {
        float v6 = 25.4 / v20;
        float v21 = v6;
      }
    }
    else if ((MTPListGestureConfig_::parseFloatValue(v5, a2, @"Resolution_mm", &v21, @"Motion Sensitivity") & 1) == 0)
    {
      puts("Missing resolution_dpi/mm key!");
      CFStringRef v7 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@ Missing %@ value for Motion Sensitivity\n", @"ERROR in PListGestureParser:", @"Resolution_mm");
      MTPListGestureConfig_::setParseErrorString(v5, v7);
    }
    MTPListGestureConfig_::parseFloatValue(v5, a2, @"CommitMultiplier", &v19, @"Motion Sensitivity");
    MTPListGestureConfig_::parseFloatValue(v5, a2, @"CommitMultiplier", &v19, @"Motion Sensitivity");
    MTPListGestureConfig_::parseFloatValue(v5, a2, @"AccelPower", (float *)&v22 + 1, @"Motion Sensitivity");
    MTPListGestureConfig_::parseFloatValue(v5, a2, @"AccelThresh", (float *)&v22, @"Motion Sensitivity");
    float v8 = v21;
    int v9 = v22;
    float v10 = v19;
    int v11 = HIDWORD(v22);
    float v18 = 0.0;
    int v12 = 0;
    if (MTPListGestureConfig_::parseFloatValue(v5, a2, @"FrameDecay_mm", &v18, @"Motion Sensitivity"))float v13 = v18; {
    else
    }
      float v13 = 0.0;
    uint64_t v17 = 0;
    float v16 = 0.01;
    CFNumberRef result = (MTPListGestureConfig_ *)MTPListGestureConfig_::parseFloatValue(v5, a2, @"FluidAnimationStartThreshold_mm", (float *)&v17 + 1, @"Motion Sensitivity");
    if (result
      && (CFNumberRef result = (MTPListGestureConfig_ *)MTPListGestureConfig_::parseFloatValue(v5, a2, @"FluidSwipeCompleteThreshold_mm", (float *)&v17, @"Motion Sensitivity"), result))
    {
      CFNumberRef result = (MTPListGestureConfig_ *)MTPListGestureConfig_::parseFloatValue(v5, a2, @"FluidSwipeInertiaTime_s", &v16, @"Motion Sensitivity");
      int v14 = 0;
      float v15 = 0.0;
      if (result)
      {
        int v12 = HIDWORD(v17);
        int v14 = v17;
        float v15 = v16;
      }
    }
    else
    {
      int v14 = 0;
      float v15 = 0.0;
    }
    *(float *)a3 = v8;
    *(float *)(a3 + 4) = v10;
    *(_DWORD *)(a3 + 8) = v9;
    *(_DWORD *)(a3 + 12) = v11;
    *(float *)(a3 + 16) = v13;
    *(_DWORD *)(a3 + 2objc_storeStrong(&location, 0) = v12;
    *(_DWORD *)(a3 + 24) = v14;
    *(float *)(a3 + 28) = v15;
  }
  return result;
}

const void *MTPListGestureConfig_::extractMotionSensitivity(uint64_t a1, CFDictionaryRef theDict, void *a3)
{
  *a3 = 0x3F80000000000000;
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  CFNumberRef result = CFDictionaryGetValue(theDict, @"Sensitivity");
  if (result)
  {
    float v6 = result;
    CFTypeID v7 = CFGetTypeID(result);
    if (v7 == CFStringGetTypeID())
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 96), v6);
      if (Value)
      {
        CFDictionaryRef v9 = Value;
        CFTypeID v10 = CFGetTypeID(Value);
        if (v10 == CFDictionaryGetTypeID())
        {
          int v11 = (MTPListGestureConfig_ *)a1;
          CFDictionaryRef v12 = v9;
LABEL_8:
          MTPListGestureConfig_::parseMotionSensitivity(v11, v12, (uint64_t)a3);
          return &def_411C8 + 1;
        }
      }
      CFStringRef v14 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@ Motion Sensitivity dictionary '%@' not found in library\n", @"ERROR in PListGestureParser:", v6);
      MTPListGestureConfig_::setParseErrorString((MTPListGestureConfig_ *)a1, v14);
    }
    else
    {
      CFTypeID v13 = CFGetTypeID(v6);
      if (v13 == CFDictionaryGetTypeID())
      {
        int v11 = (MTPListGestureConfig_ *)a1;
        CFDictionaryRef v12 = (const __CFDictionary *)v6;
        goto LABEL_8;
      }
    }
    return 0;
  }
  return result;
}

uint64_t MTPListGestureConfig_::extractGestureCategory(MTPListGestureConfig_ *this, CFDictionaryRef theDict)
{
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"Category");
  if (!Value) {
    return 0;
  }
  CFStringRef v4 = Value;
  CFTypeID v5 = CFGetTypeID(Value);
  if (v5 != CFStringGetTypeID()) {
    return 0;
  }
  uint64_t v6 = 1;
  if (CFStringCompare(v4, @"OneFingerPoint", 1uLL))
  {
    if (CFStringCompare(v4, @"FiveFingerPoint", 1uLL) == kCFCompareEqualTo) {
      return 2;
    }
    if (CFStringCompare(v4, @"TwoFingerDrag", 1uLL) == kCFCompareEqualTo) {
      return 4;
    }
    if (CFStringCompare(v4, @"AlreadyMouse", 1uLL) == kCFCompareEqualTo) {
      return 16;
    }
    if (CFStringCompare(v4, @"ScrollPan", 1uLL) == kCFCompareEqualTo) {
      return 64;
    }
    if (CFStringCompare(v4, @"TwoFingerScroll", 1uLL) == kCFCompareEqualTo) {
      return 128;
    }
    if (CFStringCompare(v4, @"TwoFingerNotificationCenter", 1uLL) == kCFCompareEqualTo) {
      return 32;
    }
    if (CFStringCompare(v4, @"TwoFingerNotificationCenterAlt", 1uLL) == kCFCompareEqualTo) {
      return 256;
    }
    CFStringRef v7 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@ Gesture Category '%@' not supported\n", @"ERROR in PListGestureParser:", v4);
    MTPListGestureConfig_::setParseErrorString(this, v7);
    return 0;
  }
  return v6;
}

void MTPListGestureConfig_::parseGesture(MTPListGestureConfig_ *a1, const __CFDictionary *a2, void **a3, long long *a4)
{
  if (a2)
  {
    uint64_t v70 = 0;
    int v71 = 0;
    uint64_t v72 = 0;
    MTPListGestureConfig_::lookupOrParseActionEvents((uint64_t)a1, a2, &v70);
    unsigned int v8 = MTPListGestureConfig_::parseGestureMotionCode(a1, a2);
    switch((unsigned __int16)(v8 >> 12) | (unsigned __int16)(16 * v8))
    {
      case 0:
        break;
      case 1:
        CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a2, @"Trigger");
        CFStringRef v10 = Value;
        if (Value && (CFTypeID v11 = CFGetTypeID(Value), v11 == CFStringGetTypeID()))
        {
          CFIndex location = CFStringFind(v10, @"BeginSlide", 1uLL).location;
          CFIndex v13 = CFStringFind(v10, @"MayBegin", 1uLL).location;
          CFIndex v14 = CFStringFind(v10, @"TimeHeld", 1uLL).location;
          if (location == -1) {
            __int16 v15 = 1;
          }
          else {
            __int16 v15 = 9;
          }
          if (v13 != -1) {
            v15 |= 0x100u;
          }
          if (v14 != -1) {
            v15 |= 4u;
          }
        }
        else
        {
          __int16 v15 = 1;
        }
        *((_WORD *)a3 + 6objc_storeStrong(&location, 0) = v15;
        CFNumberRef v42 = (const __CFNumber *)CFDictionaryGetValue(a2, @"HoldTime");
        CFNumberRef v43 = v42;
        if (v42 && (CFTypeID v44 = CFGetTypeID(v42), v44 == CFNumberGetTypeID()))
        {
          LOWORD(valuePtr[0]) = 0;
          CFNumberGetValue(v43, kCFNumberSInt16Type, valuePtr);
          __int16 v45 = valuePtr[0];
        }
        else
        {
          __int16 v45 = 350;
        }
        *((_WORD *)a3 + 61) = v45;
        int v46 = a3 + 12;
        if (a3 + 12 != (void **)&v70) {
          goto LABEL_83;
        }
        break;
      case 2:
        *((_WORD *)a3 + 76) = 2;
        CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(a2, @"StopTime");
        CFNumberRef v18 = v17;
        if (v17 && (CFTypeID v19 = CFGetTypeID(v17), v19 == CFNumberGetTypeID()))
        {
          LOWORD(valuePtr[0]) = 0;
          CFNumberGetValue(v18, kCFNumberSInt16Type, valuePtr);
          __int16 v20 = valuePtr[0];
        }
        else
        {
          __int16 v20 = 200;
        }
        *((_WORD *)a3 + 77) = v20;
        int v46 = a3 + 16;
        if (a3 + 16 != (void **)&v70) {
LABEL_83:
        }
          std::vector<MTActionEvent_>::__assign_with_size[abi:ne180100]<MTActionEvent_*,MTActionEvent_*>(v46, v70, v71, (v71 - v70) >> 3);
        break;
      case 3:
        *((_WORD *)a3 + 12) = 3;
        if (&v70 != (char **)a3) {
          goto LABEL_76;
        }
        break;
      case 6:
        *((_WORD *)a3 + 28) = 3;
        int v41 = a3 + 4;
        goto LABEL_75;
      case 7:
        *((_WORD *)a3 + 44) = 3;
        int v41 = a3 + 8;
LABEL_75:
        a3 = v41;
        if (v41 != (void **)&v70) {
LABEL_76:
        }
          std::vector<MTActionEvent_>::__assign_with_size[abi:ne180100]<MTActionEvent_*,MTActionEvent_*>(a3, v70, v71, (v71 - v70) >> 3);
        break;
      default:
        int v21 = v8;
        if (v8 == 128 || v8 == 32) {
          int v21 = v8 | 0x1000000;
        }
        char v22 = v8 - 1;
        float v23 = 0.0;
        float v24 = 0.0;
        if ((v8 - 1) <= 0xBu)
        {
          float v23 = flt_111398[v22];
          float v24 = flt_1113C8[v22];
        }
        CFStringRef v25 = (const __CFString *)CFDictionaryGetValue(a2, @"Trigger");
        CFStringRef v26 = v25;
        if (v25)
        {
          CFTypeID v27 = CFGetTypeID(v25);
          if (v27 == CFStringGetTypeID())
          {
            CFIndex v66 = CFStringFind(v26, @"OnceOnly", 1uLL).location;
            CFIndex v65 = CFStringFind(v26, @"OncePerDirection", 1uLL).location;
            CFIndex v64 = CFStringFind(v26, @"OnceIfQuick", 1uLL).location;
            CFIndex v63 = CFStringFind(v26, @"OnlyIfQuick", 1uLL).location;
            CFIndex v62 = CFStringFind(v26, @"OnlyFromEdge", 1uLL).location;
            CFIndex v61 = CFStringFind(v26, @"IfWidelySeparatedFingers", 1uLL).location;
            CFIndex v60 = CFStringFind(v26, @"OnlyIfAllMoving", 1uLL).location;
            CFIndex v59 = CFStringFind(v26, @"OnlyIfFourMoving", 1uLL).location;
            CFIndex v58 = CFStringFind(v26, @"OnlyIfSomeMoving", 1uLL).location;
            CFIndex v57 = CFStringFind(v26, @"OnlyIfTwoMoving", 1uLL).location;
            CFIndex v56 = CFStringFind(v26, @"OnlyIfOneMoving", 1uLL).location;
            CFIndex v55 = CFStringFind(v26, @"RequiresForce", 1uLL).location;
            CFIndex v54 = CFStringFind(v26, @"WaitForQuick", 1uLL).location;
            CFIndex v28 = CFStringFind(v26, @"ToggleAlongAxis", 1uLL).location;
            CFIndex v29 = CFStringFind(v26, @"Momentum", 1uLL).location;
            CFIndex v30 = CFStringFind(v26, @"LowCommitSensitivity", 1uLL).location;
            CFIndex v31 = CFStringFind(v26, @"AccelOnlyIfSomeResting", 1uLL).location;
            CFIndex v32 = CFStringFind(v26, @"Repetitive", 1uLL).location;
            unsigned int v33 = v21 | 0x1000;
            if (v66 == -1) {
              unsigned int v33 = v21;
            }
            if (v65 != -1) {
              v33 |= 0x2000u;
            }
            if (v64 != -1) {
              v33 |= 0x4000u;
            }
            if (v63 != -1) {
              v33 |= 0x4000000u;
            }
            if (v62 != -1) {
              v33 |= 0x200000u;
            }
            if (v61 != -1) {
              v33 |= 0x100u;
            }
            if (v60 != -1) {
              v33 |= 0x8000000u;
            }
            if (v59 != -1) {
              unsigned int v33 = v33 & 0xFFFFF1FF | 0x800;
            }
            if (v58 != -1) {
              v33 |= 0xE00u;
            }
            unsigned int v34 = v33 & 0xFFFFF1FF;
            if (v57 != -1) {
              unsigned int v33 = v33 & 0xFFFFF1FF | 0x400;
            }
            int v35 = v34 | 0x200;
            if (v56 != -1) {
              unsigned int v33 = v35;
            }
            if (v55 != -1) {
              v33 |= 0x80000000;
            }
            if (v54 != -1) {
              v33 |= 0x2000000u;
            }
            if (v28 != -1) {
              v33 |= 0x20000u;
            }
            if (v29 != -1) {
              v33 |= 0x400000u;
            }
            if (v30 != -1) {
              v33 |= 0x80000u;
            }
            if (v31 == -1) {
              int v21 = v33;
            }
            else {
              int v21 = v33 | 0x800000;
            }
            if (v32 == -1 && !v21)
            {
              CFStringRef v36 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@ Unknown Retriggering Option '%@'\n", @"ERROR in PListGestureParser:", v26);
              MTPListGestureConfig_::setParseErrorString(a1, v36);
              int v21 = 0;
            }
          }
        }
        CFStringRef v37 = (const __CFString *)CFDictionaryGetValue(a2, @"Locking");
        CFStringRef v38 = v37;
        if (v37)
        {
          CFTypeID v39 = CFGetTypeID(v37);
          if (v39 == CFStringGetTypeID())
          {
            if (CFStringCompare(v38, @"LockOnAxis", 1uLL))
            {
              if (CFStringCompare(v38, @"LockOnFirst", 1uLL))
              {
                if (CFStringCompare(v38, @"LockOnFirstUntilPause", 1uLL))
                {
                  if (CFStringCompare(v38, @"LockOnThrow", 1uLL))
                  {
                    if (CFStringCompare(v38, @"LockNever", 1uLL))
                    {
                      CFStringRef v40 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@ Unknown Trigger Stick Option '%@'\n", @"ERROR in PListGestureParser:", v38);
                      MTPListGestureConfig_::setParseErrorString(a1, v40);
                    }
                  }
                  else
                  {
                    v21 |= 0x400000u;
                  }
                }
                else
                {
                  v21 |= 0x40000u;
                }
              }
              else
              {
                v21 |= 0x8000u;
              }
            }
            else
            {
              v21 |= 0x10000u;
            }
          }
        }
        long long v47 = a4[1];
        long long v68 = *a4;
        long long v69 = v47;
        if ((MTPListGestureConfig_::extractMotionSensitivity((uint64_t)a1, a2, &v68) & 1) == 0)
        {
          long long v48 = a4[1];
          long long v68 = *a4;
          long long v69 = v48;
        }
        if (*(float *)&v68 == 0.0)
        {
          int v52 = CFDictionaryGetValue(a2, @"Action");
          CFStringRef v53 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@ No motion %@ for %@ gesture\n", @"ERROR in PListGestureParser:", @"Sensitivity", v52);
          MTPListGestureConfig_::setParseErrorString(a1, v53);
        }
        else
        {
          int GestureCategory = MTPListGestureConfig_::extractGestureCategory(a1, a2);
          valuePtr[8] = xmmword_111360;
          valuePtr[9] = unk_111370;
          valuePtr[2] = xmmword_111300;
          valuePtr[3] = unk_111310;
          valuePtr[4] = xmmword_111320;
          memset(&valuePtr[5], 255, 48);
          memset(valuePtr, 170, 32);
          MTSlideGesture_::MTSlideGesture_((uint64_t)valuePtr, v21, GestureCategory, &v68, (uint64_t *)&v70, v24, v23);
          int v50 = (char *)a3[21];
          if (v50 >= a3[22])
          {
            uint64_t v51 = std::vector<MTSlideGesture_>::__push_back_slow_path<MTSlideGesture_ const&>((uint64_t *)a3 + 20, (const MTSlideGesture_ *)valuePtr);
          }
          else
          {
            MTSlideGesture_::MTSlideGesture_((MTSlideGesture_ *)a3[21], (const MTSlideGesture_ *)valuePtr);
            uint64_t v51 = (uint64_t)(v50 + 160);
            a3[21] = v50 + 160;
          }
          a3[21] = (void *)v51;
          if (*(void *)&valuePtr[0])
          {
            *((void *)&valuePtr[0] + 1) = *(void *)&valuePtr[0];
            operator delete(*(void **)&valuePtr[0]);
          }
        }
        break;
    }
    if (v70)
    {
      int v71 = v70;
      operator delete(v70);
    }
  }
  else
  {
    CFStringRef v16 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@ NULL chord or gesture dictionary\n", @"ERROR in PListGestureParser:");
    MTPListGestureConfig_::setParseErrorString(a1, v16);
  }
}

void sub_4B898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  CFIndex v28 = *(void **)(v26 - 128);
  if (v28)
  {
    *(void *)(v26 - 12objc_storeStrong(&location, 0) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTPListGestureConfig_::extractChordTransitions(MTPListGestureConfig_ *this, CFDictionaryRef theDict)
{
  if (theDict)
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"Transitions");
    if (Value && (v3 = Value, CFTypeID v4 = CFGetTypeID(Value), v4 == CFStringGetTypeID()))
    {
      __int16 v5 = CFStringFind(v3, @"MultiFingerDrag", 1uLL).location != -1;
      if (CFStringFind(v3, @"FromFewerIfPause", 1uLL).location == -1) {
        __int16 v6 = v5 << 8;
      }
      else {
        __int16 v6 = ((v5 & 1) << 8) | 4;
      }
      if (CFStringFind(v3, @"ToFewerAfterSlightDelay", 1uLL).location != -1) {
        v6 |= 0x90u;
      }
      if (CFStringFind(v3, @"FromMoreWithSlightIntegrationDelay", 1uLL).location != -1) {
        v6 |= 0x1001u;
      }
      if (CFStringFind(v3, @"ToMoreFingers", 1uLL).location != -1) {
        v6 |= 0x20u;
      }
      if (CFStringFind(v3, @"ToMoreIfPause", 1uLL).location != -1) {
        v6 |= 0x40u;
      }
      unsigned __int16 v7 = v6 | (CFStringFind(v3, @"FromMoreFingers", 1uLL).location != -1);
      if (CFStringFind(v3, @"FromPausedPoint", 1uLL).location != -1) {
        v7 |= 0x800u;
      }
      if (CFStringFind(v3, @"FromRestingPoint", 1uLL).location != -1) {
        v7 |= 8u;
      }
      if (CFStringFind(v3, @"IsRestingPoint", 1uLL).location != -1) {
        v7 |= 0x80u;
      }
      if (CFStringFind(v3, @"ToFewerFingers", 1uLL).location != -1) {
        v7 |= 0x10u;
      }
      CFIndex location = CFStringFind(v3, @"FromFewerFingers", 1uLL).location;
      unsigned __int16 v9 = v7 | 2;
      if (location == -1) {
        return v7;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
  return v9;
}

void MTPListGestureConfig_::parseGestureSet(MTPListGestureConfig_ *this, const __CFString *a2, const __CFDictionary *cf, MTChordGestureSet_ *a4)
{
  if (cf && (CFTypeID v8 = CFGetTypeID(cf), v8 == CFDictionaryGetTypeID()))
  {
    long long v19 = 0x3F80000000000000uLL;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    MTPListGestureConfig_::extractMotionSensitivity((uint64_t)this, cf, &v19);
    int GestureCategory = (MTPListGestureConfig_ *)MTPListGestureConfig_::extractGestureCategory(this, cf);
    if (GestureCategory) {
      *((_DWORD *)a4 + 58) = GestureCategory;
    }
    *((_WORD *)a4 + 114) |= MTPListGestureConfig_::extractChordTransitions(GestureCategory, cf);
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(cf, @"Gestures");
    if (Value)
    {
      CFArrayRef v12 = Value;
      CFTypeID v13 = CFGetTypeID(Value);
      if (v13 == CFArrayGetTypeID())
      {
        CFIndex Count = CFArrayGetCount(v12);
        if (Count >= 1)
        {
          CFIndex v15 = Count;
          for (CFIndex i = 0; i != v15; ++i)
          {
            CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v12, i);
            MTPListGestureConfig_::parseGesture(this, ValueAtIndex, (void **)a4, &v19);
          }
        }
        return;
      }
    }
    CFStringRef v18 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@ No %@ array for gesture set '%@'\n", v11, @"ERROR in PListGestureParser:", @"Gestures", a2);
  }
  else
  {
    CFStringRef v18 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@ No dictionary for gesture set '%@'\n", a4, @"ERROR in PListGestureParser:", a2);
  }

  MTPListGestureConfig_::setParseErrorString(this, v18);
}

uint64_t MTPListGestureConfig_::parseChordSpecifier(MTPListGestureConfig_ *this, CFStringRef theString1)
{
  if (CFStringCompare(theString1, @"Pengrip", 1uLL) == kCFCompareEqualTo) {
    return 10;
  }
  if (CFStringCompare(theString1, @"Fist", 1uLL) == kCFCompareEqualTo) {
    return 12;
  }
  if (CFStringCompare(theString1, @"Palm", 1uLL) == kCFCompareEqualTo) {
    return 13;
  }
  uint64_t v3 = 1;
  if (CFStringCompare(theString1, @"1 Finger", 1uLL))
  {
    if (CFStringCompare(theString1, @"2 Fingers", 1uLL))
    {
      if (CFStringCompare(theString1, @"3 Fingers", 1uLL))
      {
        if (CFStringCompare(theString1, @"4 Fingers", 1uLL))
        {
          if (CFStringCompare(theString1, @"Thumb", 1uLL))
          {
            if (CFStringCompare(theString1, @"1 Finger + Thumb", 1uLL))
            {
              if (CFStringCompare(theString1, @"2 Fingers + Thumb", 1uLL))
              {
                if (CFStringCompare(theString1, @"3 Fingers + Thumb", 1uLL))
                {
                  if (CFStringCompare(theString1, @"4 Fingers + Thumb", 1uLL)) {
                    return 0;
                  }
                  else {
                    return 9;
                  }
                }
                else
                {
                  return 8;
                }
              }
              else
              {
                return 7;
              }
            }
            else
            {
              return 6;
            }
          }
          else
          {
            return 5;
          }
        }
        else
        {
          return 4;
        }
      }
      else
      {
        return 3;
      }
    }
    else
    {
      return 2;
    }
  }
  return v3;
}

void MTPListGestureConfig_::parseChordGestureSetAndCopyIntoTable(MTPListGestureConfig_ *this, CFTypeRef cf, const __CFString *a3)
{
  if (cf)
  {
    CFTypeID v6 = CFGetTypeID(cf);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (a3)
    {
      if (v6 == TypeID)
      {
        CFTypeID v8 = CFGetTypeID(a3);
        if (v8 == CFStringGetTypeID())
        {
          CFStringRef Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"Chord");
          if (Value && (CFStringRef v10 = Value, v11 = CFGetTypeID(Value), v11 == CFStringGetTypeID()))
          {
            int GestureCategory = (MTPListGestureConfig_ *)MTPListGestureConfig_::extractGestureCategory(this, (CFDictionaryRef)cf);
            uint64_t v13 = MTPListGestureConfig_::parseChordSpecifier(GestureCategory, v10);
            if (v13)
            {
              uint64_t v14 = v13;
              *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
              *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
              v38[3] = v15;
              v38[4] = v15;
              v38[1] = v15;
              v38[2] = v15;
              long long v37 = v15;
              v38[0] = v15;
              long long __p = v15;
              *(_OWORD *)unsigned int v34 = v15;
              long long v35 = v15;
              *(_OWORD *)CFIndex v32 = v15;
              long long v33 = v15;
              *(_OWORD *)CFIndex v30 = v15;
              long long v31 = v15;
              *(_OWORD *)CFIndex v28 = v15;
              long long v29 = v15;
              CStringPtr = CFStringGetCStringPtr(v10, 0);
              MTChordGestureSet_::MTChordGestureSet_(v28, v14, 0, GestureCategory, CStringPtr);
              CFNumberRef v17 = MTGestureConfig_::copyChordIntoHandTable((uint64_t)this, 1, (MTChordGestureSet_ *)v28);
              CFStringRef v18 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"Gesture Set");
              CFStringRef v19 = v18;
              if (v18 && (CFTypeID v20 = CFGetTypeID(v18), v20 == CFStringGetTypeID()))
              {
                CFDictionaryRef v21 = (const __CFDictionary *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 11), v19);
                CFDictionaryRef v22 = v21;
                if (v21 && (CFTypeID v23 = CFGetTypeID(v21), v23 == CFDictionaryGetTypeID()))
                {
                  MTPListGestureConfig_::parseGestureSet(this, v19, v22, v17);
                }
                else
                {
                  CFStringRef v26 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@ No dictionary for '%@' Gesture Set\n", @"ERROR in PListGestureParser:", v19);
                  MTPListGestureConfig_::setParseErrorString(this, v26);
                }
              }
              else
              {
                CFStringRef v25 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@ No Gesture Set for '%@' Chord\n", @"ERROR in PListGestureParser:", v10);
                MTPListGestureConfig_::setParseErrorString(this, v25);
              }
              CFTypeID v27 = (void **)v38;
              std::vector<MTSlideGesture_>::__destroy_vector::operator()[abi:ne180100](&v27);
              if ((void)__p)
              {
                *((void *)&__p + 1) = __p;
                operator delete((void *)__p);
              }
              if (v34[0])
              {
                v34[1] = v34[0];
                operator delete(v34[0]);
              }
              if (v32[0])
              {
                v32[1] = v32[0];
                operator delete(v32[0]);
              }
              if (v30[0])
              {
                v30[1] = v30[0];
                operator delete(v30[0]);
              }
              if (v28[0])
              {
                v28[1] = v28[0];
                operator delete(v28[0]);
              }
            }
          }
          else
          {
            CFStringRef v24 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@ Chord Dictionary Missing '%@' Key\n", @"ERROR in PListGestureParser:", @"Chord");
            MTPListGestureConfig_::setParseErrorString(this, v24);
          }
        }
      }
    }
  }
}

void sub_4C1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  MTChordGestureSet_::~MTChordGestureSet_((MTChordGestureSet_ *)va);
  _Unwind_Resume(a1);
}

void MTChordGestureSet_::~MTChordGestureSet_(MTChordGestureSet_ *this)
{
  unsigned __int16 v7 = (void **)((char *)this + 160);
  std::vector<MTSlideGesture_>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    *((void *)this + 17) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 12);
  if (v3)
  {
    *((void *)this + 13) = v3;
    operator delete(v3);
  }
  CFTypeID v4 = (void *)*((void *)this + 8);
  if (v4)
  {
    *((void *)this + 9) = v4;
    operator delete(v4);
  }
  __int16 v5 = (void *)*((void *)this + 4);
  if (v5)
  {
    *((void *)this + 5) = v5;
    operator delete(v5);
  }
  CFTypeID v6 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v6;
    operator delete(v6);
  }
}

void MTPListGestureConfig_::parseChordMappingsForHand(MTPListGestureConfig_ *this, const __CFString *cf, const __CFDictionary *a3)
{
  if (!cf
    || (CFTypeID v6 = CFGetTypeID(cf), v6 != CFStringGetTypeID())
    || CFStringCompare(cf, @"Right", 1uLL) && CFStringCompare(cf, @"Any", 1uLL))
  {
    CFStringRef v7 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@ '%@' Hand not recognized or supported\n", @"ERROR in PListGestureParser:", cf);
LABEL_6:
    MTPListGestureConfig_::setParseErrorString(this, v7);
    return;
  }
  if (!a3 || (CFTypeID v8 = CFGetTypeID(a3), v8 != CFDictionaryGetTypeID()))
  {
    CFStringRef v7 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@ Missing chord dictionary for '%@' Hand\n", @"ERROR in PListGestureParser:", cf);
    goto LABEL_6;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a3, @"Chords");
  if (Value && (CFArrayRef v10 = Value, v11 = CFGetTypeID(Value), v11 == CFArrayGetTypeID()))
  {
    CFIndex Count = CFArrayGetCount(v10);
    if (Count >= 1)
    {
      CFIndex v13 = Count;
      for (CFIndex i = 0; i != v13; ++i)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v10, i);
        MTPListGestureConfig_::parseChordGestureSetAndCopyIntoTable(this, ValueAtIndex, cf);
      }
    }
  }
  else
  {
    CFStringRef v16 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@ Could not find '%@' array for '%@' Hand\n", @"ERROR in PListGestureParser:", @"Chords", cf);
    MTPListGestureConfig_::setParseErrorString(this, v16);
  }
  CFStringRef v17 = (const __CFString *)CFDictionaryGetValue(a3, @"LookupBySubset");
  if (v17)
  {
    CFStringRef v18 = v17;
    CFTypeID v19 = CFGetTypeID(v17);
    if (v19 == CFStringGetTypeID())
    {
      uint64_t ChordTableForHand = MTGestureConfig_::getChordTableForHand((uint64_t)this, 1);
      if (ChordTableForHand)
      {
        uint64_t v21 = ChordTableForHand;
        if (CFStringCompare(v18, @"SyncedFingers", 1uLL) == kCFCompareEqualTo) {
          *(_DWORD *)(v21 + 28) = 0;
        }
        if (CFStringCompare(v18, @"TouchingFingers", 1uLL) == kCFCompareEqualTo) {
          *(_DWORD *)(v21 + 28) = 2;
        }
        if (CFStringCompare(v18, @"MovingFingers", 1uLL) == kCFCompareEqualTo) {
          *(_DWORD *)(v21 + 28) = 1;
        }
      }
    }
  }
}

void MTPListGestureConfig_::parseChordMappingPreferences(MTPListGestureConfig_ *this, CFTypeRef cf)
{
  if (cf)
  {
    CFTypeID v4 = CFGetTypeID(cf);
    if (v4 == CFDictionaryGetTypeID())
    {
      CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)cf);
      CFTypeID v6 = (const void **)malloc_type_malloc(8 * Count, 0x6004044C4A2DFuLL);
      CFStringRef v7 = (const void **)malloc_type_malloc(8 * Count, 0x6004044C4A2DFuLL);
      CFDictionaryGetKeysAndValues((CFDictionaryRef)cf, v6, v7);
      if (Count >= 1)
      {
        CFTypeID v8 = v6;
        unsigned __int16 v9 = (const __CFDictionary **)v7;
        do
        {
          CFStringRef v11 = (const __CFString *)*v8++;
          CFStringRef v10 = v11;
          CFDictionaryRef v12 = *v9++;
          MTPListGestureConfig_::parseChordMappingsForHand(this, v10, v12);
          --Count;
        }
        while (Count);
      }
      free(v6);
      free(v7);
    }
  }
}

void MTPListGestureConfig_::setChordMappingsDictionary(MTPListGestureConfig_ *this, CFTypeRef cf)
{
  CFTypeRef v3 = (CFTypeRef)*((void *)this + 10);
  if (v3 != cf)
  {
    if (v3)
    {
      CFRelease(v3);
      *((void *)this + 1objc_storeStrong(&location, 0) = 0;
    }
    if (cf)
    {
      *((void *)this + 1objc_storeStrong(&location, 0) = cf;
      CFRetain(cf);
    }
  }
}

void MTPListGestureConfig_::setGestureSetsDictionary(MTPListGestureConfig_ *this, CFTypeRef cf)
{
  CFTypeRef v3 = (CFTypeRef)*((void *)this + 11);
  if (v3 != cf)
  {
    if (v3)
    {
      CFRelease(v3);
      *((void *)this + 11) = 0;
    }
    if (cf)
    {
      *((void *)this + 11) = cf;
      CFRetain(cf);
    }
  }
}

void MTPListGestureConfig_::setMotionSensitivitiesDictionary(MTPListGestureConfig_ *this, CFTypeRef cf)
{
  CFTypeRef v3 = (CFTypeRef)*((void *)this + 12);
  if (v3 != cf)
  {
    if (v3)
    {
      CFRelease(v3);
      *((void *)this + 12) = 0;
    }
    if (cf)
    {
      *((void *)this + 12) = cf;
      CFRetain(cf);
    }
  }
}

void MTPListGestureConfig_::setActionEventsDictionary(MTPListGestureConfig_ *this, CFTypeRef cf)
{
  CFTypeRef v3 = (CFTypeRef)*((void *)this + 13);
  if (v3 != cf)
  {
    if (v3)
    {
      CFRelease(v3);
      *((void *)this + 13) = 0;
    }
    if (cf)
    {
      *((void *)this + 13) = cf;
      CFRetain(cf);
    }
  }
}

BOOL MTPListGestureConfig_::parseCreateGestureConfig(MTPListGestureConfig_ *this, const __CFString **a2)
{
  CFTypeID v4 = (const void *)*((void *)this + 14);
  if (v4)
  {
    CFRelease(v4);
    *((void *)this + 14) = 0;
  }
  __int16 v5 = (const void *)*((void *)this + 10);
  if (!v5 || (CFTypeID v6 = CFGetTypeID(v5), v6 != CFDictionaryGetTypeID()))
  {
    CFAllocatorRef v13 = kCFAllocatorDefault;
    uint64_t v14 = "PListGestureParser ABORT: Chord Mappings dictionary missing\n";
LABEL_16:
    CFStringRef v15 = CFStringCreateWithCString(v13, v14, 0);
    MTPListGestureConfig_::setParseErrorString(this, v15);
    goto LABEL_17;
  }
  CFStringRef v7 = (const void *)*((void *)this + 13);
  if (!v7 || (CFTypeID v8 = CFGetTypeID(v7), v8 != CFDictionaryGetTypeID()))
  {
    CFAllocatorRef v13 = kCFAllocatorDefault;
    uint64_t v14 = "PListGestureParser ABORT: Action Events dictionary missing\n";
    goto LABEL_16;
  }
  unsigned __int16 v9 = (const void *)*((void *)this + 12);
  if (!v9 || (CFTypeID v10 = CFGetTypeID(v9), v10 != CFDictionaryGetTypeID()))
  {
    CFAllocatorRef v13 = kCFAllocatorDefault;
    uint64_t v14 = "PListGestureParser ABORT: Motion Sensitivities dictionary missing\n";
    goto LABEL_16;
  }
  CFStringRef v11 = (const void *)*((void *)this + 11);
  if (!v11 || (CFTypeID v12 = CFGetTypeID(v11), v12 != CFDictionaryGetTypeID()))
  {
    CFAllocatorRef v13 = kCFAllocatorDefault;
    uint64_t v14 = "PListGestureParser ABORT: Gesture Sets dictionary missing\n";
    goto LABEL_16;
  }
  MTPListGestureConfig_::parseChordMappingPreferences(this, *((CFTypeRef *)this + 10));
LABEL_17:
  CFStringRef v16 = (const __CFString *)*((void *)this + 14);
  if (a2 && v16)
  {
    *a2 = v16;
    *((void *)this + 14) = 0;
  }
  return v16 == 0;
}

void MTPListGestureConfig_::addActionEventToDictionary(MTPListGestureConfig_ *this, __CFDictionary *a2, const __CFString *a3, const __CFString *a4, const __CFString *a5, const __CFString *a6)
{
  Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFTypeID v12 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryAddValue(v12, @"EventType", a3);
  if (a4) {
    CFDictionaryAddValue(v12, @"Modifiers", a4);
  }
  if (a5) {
    CFDictionaryAddValue(v12, @"KeyCode", a5);
  }
  CFArrayAppendValue(Mutable, v12);
  CFDictionaryAddValue((CFMutableDictionaryRef)this, a2, Mutable);
  CFRelease(Mutable);

  CFRelease(v12);
}

void MTPListGestureConfig_::addGestureToArray(MTPListGestureConfig_ *this, __CFArray *a2, const __CFString *a3, const __CFString *a4, const __CFString *a5, const __CFString *a6, const __CFString *a7, const __CFString *a8, const void *a9)
{
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryAddValue(Mutable, @"Action", a2);
  CFDictionaryAddValue(Mutable, @"Motion", a3);
  if (a4) {
    CFDictionaryAddValue(Mutable, @"Sensitivity", a4);
  }
  if (a5) {
    CFDictionaryAddValue(Mutable, @"Trigger", a5);
  }
  if (a6) {
    CFDictionaryAddValue(Mutable, @"Locking", a6);
  }
  if (a7 && a8) {
    CFDictionaryAddValue(Mutable, a7, a8);
  }
  CFArrayAppendValue((CFMutableArrayRef)this, Mutable);

  CFRelease(Mutable);
}

void MTPListGestureConfig_::addChordMappingToArray(MTPListGestureConfig_ *this, __CFArray *a2, const __CFString *a3, const __CFString *a4)
{
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryAddValue(Mutable, @"Chord", a2);
  CFDictionaryAddValue(Mutable, @"Gesture Set", a3);
  CFArrayAppendValue((CFMutableArrayRef)this, Mutable);

  CFRelease(Mutable);
}

HSUtil::Encoder *MTGestureConfig_::encodeToMap(MTChordCycling_ **this, HSUtil::Encoder *a2)
{
  return HSUtil::Encoder::encodeCodable<MTChordCycling_>(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)104,(char)97,(char)110,(char)100,(char)95,(char)99,(char)104,(char)111,(char)114,(char)100,(char)115>::Key, this[7]);
}

BOOL MTGestureConfig_::decodeFromMap(MTChordCycling_ **this, const CoderKey *a2)
{
  HSUtil::Decoder::decodeCodable<MTChordCycling_>(a2, (CoderKey *)HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)104,(char)97,(char)110,(char)100,(char)95,(char)99,(char)104,(char)111,(char)114,(char)100,(char)115>::Key, this[7]);
  int var0 = (int)a2->var0;
  if (LODWORD(a2->var0))
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/Gestures/MTGestureConfig_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTGestureConfig_::decodeFromMap();
    }
  }
  return var0 == 0;
}

void std::vector<MTActionEvent_>::__assign_with_size[abi:ne180100]<MTActionEvent_*,MTActionEvent_*>(void *a1, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  CFTypeID v6 = a2;
  uint64_t v8 = a1[2];
  unsigned __int16 v9 = (_DWORD *)*a1;
  if (a4 > (v8 - *a1) >> 3)
  {
    if (v9)
    {
      a1[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::atomic<HSUtil::CoderKey const*>>::__vallocate[abi:ne180100](a1, v11);
    CFAllocatorRef v13 = (_DWORD *)a1[1];
    CFTypeID v12 = (void **)(a1 + 1);
    unsigned __int16 v9 = v13;
    uint64_t v14 = (char *)v13;
    if (v6 != a3)
    {
      uint64_t v15 = 0;
      do
      {
        MTActionEvent_::MTActionEvent_((MTActionEvent_ *)&v9[v15], (const MTActionEvent_ *)&v6[v15]);
        v15 += 2;
      }
      while (&v6[v15] != a3);
      uint64_t v14 = (char *)&v9[v15];
    }
LABEL_23:
    int64_t v21 = v14 - (char *)v9;
    goto LABEL_28;
  }
  CFTypeID v12 = (void **)(a1 + 1);
  CFStringRef v16 = (unsigned char *)a1[1];
  unint64_t v17 = (v16 - (unsigned char *)v9) >> 3;
  if (v17 < a4)
  {
    CFStringRef v18 = &a2[2 * v17];
    if (v16 != (unsigned char *)v9)
    {
      uint64_t v19 = 8 * v17;
      do
      {
        MTActionEvent_::operator=(v9, v6);
        v6 += 2;
        v9 += 2;
        v19 -= 8;
      }
      while (v19);
      unsigned __int16 v9 = *v12;
    }
    uint64_t v14 = (char *)v9;
    if (v18 != a3)
    {
      uint64_t v20 = 0;
      do
      {
        MTActionEvent_::MTActionEvent_((MTActionEvent_ *)&v9[v20], (const MTActionEvent_ *)&v18[v20]);
        v20 += 2;
      }
      while (&v18[v20] != a3);
      uint64_t v14 = (char *)&v9[v20];
    }
    goto LABEL_23;
  }
  CFDictionaryRef v22 = (char *)*a1;
  if (a2 != a3)
  {
    CFTypeID v23 = (char *)*a1;
    do
    {
      MTActionEvent_::operator=(v23, v6);
      v6 += 2;
      v23 += 8;
      v22 += 8;
    }
    while (v6 != a3);
  }
  int64_t v21 = v22 - (char *)v9;
LABEL_28:
  __CFDictionary *v12 = (char *)v9 + v21;
}

void sub_4CDE4(_Unwind_Exception *a1)
{
  void *v1 = v2;
  _Unwind_Resume(a1);
}

HSUtil::Encoder *HSUtil::Encoder::encodeCodable<MTChordCycling_>(HSUtil::Encoder *result, const CoderKey *a2, MTChordCycling_ *a3)
{
  if (!*(_DWORD *)result)
  {
    CFTypeID v4 = result;
    CFNumberRef result = (HSUtil::Encoder *)HSUtil::Encoder::_encodeKey(result, a2);
    if (!*(_DWORD *)v4)
    {
      CFNumberRef result = (HSUtil::Encoder *)MTChordCycling_::encode(a3, v4);
      if (!*(_DWORD *)v4 && (result & 1) == 0) {
        *(_DWORD *)CFTypeID v4 = 10;
      }
    }
  }
  return result;
}

uint64_t MTChordCycling_::encode(MTChordCycling_ *this, HSUtil::Encoder *a2)
{
  if (!*(_DWORD *)a2) {
    HSUtil::Encoder::_encodeMapStart((unint64_t *)a2, 4);
  }
  (*(void (**)(MTChordCycling_ *, HSUtil::Encoder *))(*(void *)this + 64))(this, a2);
  if (!*(_DWORD *)a2) {
    HSUtil::Encoder::_encodeContainerStop((uint64_t (***)(void))a2);
  }
  return 1;
}

const CoderKey *HSUtil::Decoder::decodeCodable<MTChordCycling_>(const CoderKey *result, CoderKey *a2, MTChordCycling_ *a3)
{
  if (SLODWORD(result->var0) <= 4)
  {
    uint64_t v4 = (uint64_t)result;
    unint64_t v5 = *(void *)&result[4].var1;
    CFNumberRef result = HSUtil::Decoder::_findKey(result, &v5, a2);
    if (!*(_DWORD *)v4)
    {
      CFNumberRef result = (const CoderKey *)HSUtil::Decoder::_readCodable<MTChordCycling_>(v4, &v5, a3);
      if (*(_DWORD *)v4 == 3) {
        *(_DWORD *)uint64_t v4 = 13;
      }
      else {
        *(void *)(v4 + 72) = v5;
      }
    }
  }
  return result;
}

void *HSUtil::Decoder::_readCodable<MTChordCycling_>(uint64_t a1, unint64_t *a2, MTChordCycling_ *a3)
{
  unint64_t v6 = *a2;
  CFNumberRef result = (void *)HSUtil::Decoder::_skipElement((HSUtil::Decoder *)a1, a2);
  if (!*(_DWORD *)a1)
  {
    uint64_t v8 = result;
    CFNumberRef result = HSUtil::Decoder::_loadKeyTableIfNeeded((HSUtil::Decoder *)a1, a2);
    if (!*(_DWORD *)a1)
    {
      v11[1] = *(void *)(a1 + 8);
      v11[0] = 0xAAAAAAAA00000000;
      uint64_t v10 = *(void *)(a1 + 24);
      unsigned __int16 v9 = *(std::__shared_weak_count **)(a1 + 32);
      CFTypeID v12 = 0;
      uint64_t v13 = v10;
      uint64_t v14 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v15 = *(_OWORD *)(a1 + 40);
      unint64_t v16 = *(void *)(a1 + 56) + v6;
      unint64_t v17 = v8;
      uint64_t v18 = 0;
      if ((MTChordCycling_::decode(a3, (HSUtil::Decoder *)v11) & 1) == 0) {
        *(_DWORD *)a1 = 10;
      }
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      CFNumberRef result = v12;
      CFTypeID v12 = 0;
      if (result)
      {
        std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::~__value_func[abi:ne180100](result);
        operator delete();
      }
    }
  }
  return result;
}

void sub_4D038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MTChordCycling_::decode(MTChordCycling_ *this, HSUtil::Decoder *a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v11 = v4;
  long long v12 = v4;
  long long v9 = v4;
  long long v10 = v4;
  long long v8 = v4;
  HSUtil::Decoder::decodeMap((unint64_t *)a2, (uint64_t)&v8);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/Gestures/MTChordCycling_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTChordCycling_::decode();
    }
  }
  else
  {
    if ((*(uint64_t (**)(MTChordCycling_ *, long long *))(*(void *)this + 72))(this, &v8))
    {
      uint64_t v5 = 1;
      goto LABEL_9;
    }
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/Gestures/MTChordCycling_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTChordCycling_::decode();
    }
  }
  uint64_t v5 = 0;
LABEL_9:
  if ((void)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v10);
  }
  unint64_t v6 = (void *)v9;
  *(void *)&long long v9 = 0;
  if (v6)
  {
    std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::~__value_func[abi:ne180100](v6);
    operator delete();
  }
  return v5;
}

void sub_4D1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::vector<MTActionEvent_>::__push_back_slow_path<MTActionEvent_ const&>(uint64_t a1, const MTActionEvent_ *a2)
{
  CFTypeRef v3 = *(const MTActionEvent_ **)a1;
  uint64_t v4 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61) {
    std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16) - (void)v3;
  if (v8 >> 2 > v5) {
    unint64_t v5 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v16 = a1 + 16;
  if (v9) {
    long long v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HSUtil::CoderKey const*>>(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  __p[0] = v10;
  __p[1] = &v10[8 * v4];
  long long v15 = &v10[8 * v9];
  MTActionEvent_::MTActionEvent_((MTActionEvent_ *)__p[1], a2);
  uint64_t v14 = (char *)__p[1] + 8;
  std::vector<MTActionEvent_>::__swap_out_circular_buffer((const MTActionEvent_ **)a1, __p);
  uint64_t v11 = *(void *)(a1 + 8);
  if (v14 != __p[1]) {
    v14 += ((char *)__p[1] - (char *)v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  return v11;
}

void sub_4D2E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<MTActionEvent_>::__swap_out_circular_buffer(const MTActionEvent_ **a1, void *a2)
{
  unint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v6 = (const MTActionEvent_ *)a2[1];
  while (v4 != v5)
  {
    uint64_t v4 = (const MTActionEvent_ *)((char *)v4 - 8);
    MTActionEvent_::MTActionEvent_((const MTActionEvent_ *)((char *)v6 - 8), v4);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = (const MTActionEvent_ *)a2[2];
  a2[2] = v8;
  unint64_t v9 = a1[2];
  a1[2] = (const MTActionEvent_ *)a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t std::vector<MTSlideGesture_>::__push_back_slow_path<MTSlideGesture_ const&>(uint64_t *a1, const MTSlideGesture_ *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x199999999999999) {
    std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xCCCCCCCCCCCCCCLL) {
    unint64_t v9 = 0x199999999999999;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    long long v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTSlideGesture_>>(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = (MTSlideGesture_ *)&v10[160 * v4];
  uint64_t v16 = &v10[160 * v9];
  MTSlideGesture_::MTSlideGesture_(v14, a2);
  long long v15 = (char *)v14 + 160;
  std::vector<MTSlideGesture_>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<MTSlideGesture_>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_4D4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::vector<MTSlideGesture_>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MTSlideGesture_>,std::reverse_iterator<MTSlideGesture_*>,std::reverse_iterator<MTSlideGesture_*>,std::reverse_iterator<MTSlideGesture_*>>((uint64_t)(a1 + 2), a1[1], (const MTSlideGesture_ *)a1[1], *a1, (const MTSlideGesture_ *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MTSlideGesture_>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x19999999999999ALL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(160 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MTSlideGesture_>,std::reverse_iterator<MTSlideGesture_*>,std::reverse_iterator<MTSlideGesture_*>,std::reverse_iterator<MTSlideGesture_*>>(uint64_t a1, uint64_t a2, const MTSlideGesture_ *a3, uint64_t a4, const MTSlideGesture_ *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  unint64_t v13 = 0xAAAAAAAAAAAAAA00;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    unint64_t v9 = a3;
    do
    {
      unint64_t v9 = (const MTSlideGesture_ *)((char *)v9 - 160);
      MTSlideGesture_::MTSlideGesture_((MTSlideGesture_ *)(v7 - 160), v9);
      uint64_t v7 = *((void *)&v15 + 1) - 160;
      *((void *)&v15 + 1) -= 160;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  LOBYTE(v13) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTSlideGesture_>,std::reverse_iterator<MTSlideGesture_*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_4D624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTSlideGesture_>,std::reverse_iterator<MTSlideGesture_*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<MTSlideGesture_>,std::reverse_iterator<MTSlideGesture_*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<MTSlideGesture_>,std::reverse_iterator<MTSlideGesture_*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 160;
  }
}

uint64_t std::__split_buffer<MTSlideGesture_>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<MTSlideGesture_>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 160);
    *(void *)(a1 + 16) = v2 - 160;
    if (v5)
    {
      *(void *)(v2 - 152) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 160;
    }
  }
}

void __cxx_global_var_init_25()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_24(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_currentTimestamp", a2);
  }
}

void __cxx_global_var_init_3_24(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_previousTimestamp", a2);
  }
}

void __cxx_global_var_init_4_24(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)114,(char)101,(char)108,(char)101,(char)97,(char)115,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_release", a2);
  }
}

void __cxx_global_var_init_5_24(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)97,(char)99,(char)116,(char)105,(char)118,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_activation", a2);
  }
}

void __cxx_global_var_init_6_24(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)101,(char)97,(char)114,(char)108,(char)105,(char)101,(char)115,(char)116,(char)78,(char)111,(char)110,(char)68,(char)105,(char)118,(char)105,(char)110,(char)103,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_earliestNonDivingTimestamp", a2);
  }
}

void __cxx_global_var_init_7_24(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)100,(char)105,(char)118,(char)105,(char)110,(char)103,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)67,(char)104,(char)97,(char)110,(char)103,(char)101,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_divingButtonChangeTimestamp", a2);
  }
}

void __cxx_global_var_init_8_25(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)105,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_min", a2);
  }
}

void __cxx_global_var_init_9_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_max", a2);
  }
}

void __cxx_global_var_init_10_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)66,(char)114,(char)101,(char)97,(char)107,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerBreakTouch_max", a2);
  }
}

void __cxx_global_var_init_11_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)82,(char)101,(char)115,(char)101,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentReset", a2);
  }
}

void __cxx_global_var_init_12_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)65,(char)99,(char)116,(char)105,(char)118,(char)105,(char)116,(char)121>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentButtonActivity", a2);
  }
}

void __cxx_global_var_init_13_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_firstFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_14_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_firstFingerCleanStartInRange", a2);
  }
}

void __cxx_global_var_init_15_19(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerCleanStartInRange", a2);
  }
}

void __cxx_global_var_init_16_19(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_17_19(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_previousRecentFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_18_19(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)78,(char)111,(char)110,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)100,(char)111,(char)119,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentNonThumbTouchdown", a2);
  }
}

void __cxx_global_var_init_19_19(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_restingThumbTouchDown", a2);
  }
}

void __cxx_global_var_init_20_19(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)84,(char)119,(char)111,(char)79,(char)114,(char)77,(char)111,(char)114,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentTwoOrMoreFingersTouching", a2);
  }
}

void __cxx_global_var_init_21_20(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)118,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFiveFingersTouching", a2);
  }
}

void __cxx_global_var_init_22_20(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)76,(char)105,(char)102,(char)116,(char)111,(char)102,(char)102>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerLiftoff", a2);
  }
}

void __cxx_global_var_init_23_20(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)69,(char)110,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerEnd", a2);
  }
}

void __cxx_global_var_init_24_20(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentScrollZoom", a2);
  }
}

void __cxx_global_var_init_25_20(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)119,(char)105,(char)116,(char)99,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentChordSwitch", a2);
  }
}

void __cxx_global_var_init_26_20(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentChordSlide", a2);
  }
}

void __cxx_global_var_init_27_19(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109,(char)83,(char)108,(char)105,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentScrollZoomSlide", a2);
  }
}

void __cxx_global_var_init_28_19(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)108,(char)117,(char)105,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentFluidSlide", a2);
  }
}

void __cxx_global_var_init_29_19(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)101,(char)120,(char)99,(char)101,(char)115,(char)115,(char)84,(char)97,(char)112,(char)77,(char)111,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_excessTapMotion", a2);
  }
}

void __cxx_global_var_init_30_19(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)104,(char)97,(char)110,(char)100,(char)95,(char)99,(char)104,(char)111,(char)114,(char)100,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"righthand_chords", a2);
  }
}

void MTTapDragManager_::MTTapDragManager_(MTTapDragManager_ *this)
{
  *(void *)this = &off_141778;
  *((unsigned char *)this + 8) = 0;
  *(_WORD *)((char *)this + 9) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((_WORD *)this + 24) = 0;
  *((void *)this + 1objc_storeStrong(&location, 0) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 9) = 0;
  *(void *)((char *)this + 2objc_storeStrong(&location, 0) = 0;
  *(void *)((char *)this + 12) = 0;
  *((unsigned char *)this + 28) = 0;
}

uint64_t MTTapDragManager_::clearState(uint64_t this)
{
  *(unsigned char *)(this + 28) = 0;
  *(_DWORD *)(this + 12) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(_WORD *)(this + 9) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 4objc_storeStrong(&location, 0) = 0;
  *(_WORD *)(this + 48) = 0;
  *(void *)(this + 8objc_storeStrong(&location, 0) = 0;
  *(void *)(this + 88) = 0;
  *(void *)(this + 72) = 0;
  return this;
}

uint64_t MTTapDragManager_::setCycleState(uint64_t result, int a2)
{
  *(_DWORD *)(result + 24) = a2;
  return result;
}

uint64_t MTTapDragManager_::clearCycle(uint64_t this)
{
  *(unsigned char *)(this + 28) = 0;
  *(_DWORD *)(this + 12) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(unsigned char *)(this + 48) = 0;
  *(_WORD *)(this + 9) = 0;
  return this;
}

MTForceManagement_ *MTTapDragManager_::dragHandModifiers(MTTapDragManager_ *this)
{
  int v2 = *((_DWORD *)this + 6);
  if (v2 >= 2 && (v2 == 2 || *((unsigned char *)this + 28) == 0)) {
    return (MTForceManagement_ *)(&stru_B8 + 72);
  }
  uint64_t result = (MTForceManagement_ *)*((void *)this + 2);
  if (!result) {
    return result;
  }
  if (MTForceManagement_::whichForceButtonActivated(result) == 1) {
    return (MTForceManagement_ *)(&stru_B8 + 72);
  }
  uint64_t result = (MTForceManagement_ *)*((void *)this + 2);
  if (result)
  {
    if (MTForceManagement_::whichForceButtonActivated(result) == 2)
    {
      return (MTForceManagement_ *)(&stru_1F8 + 8);
    }
    else
    {
      uint64_t result = (MTForceManagement_ *)*((void *)this + 2);
      if (result) {
        return (MTForceManagement_ *)((MTForceManagement_::whichForceButtonActivated(result) == 4) << 10);
      }
    }
  }
  return result;
}

BOOL MTTapDragManager_::halfTapDragTimedOut(MTTapDragManager_ *this, double a2)
{
  int v4 = *((unsigned __int8 *)this + 28);
  uint64_t v5 = qword_158680;
  uint64_t v6 = qword_158690;
  if (((*(uint64_t (**)(MTTapDragManager_ *))(*(void *)this + 16))(this) & 0x100) == 0) {
    return 1;
  }
  if (v4) {
    double v8 = *(double *)&v6;
  }
  else {
    double v8 = *(double *)&v5;
  }
  double v9 = a2 - *((double *)this + 9);
  if (v9 >= a2 - *((double *)this + 10)) {
    double v9 = a2 - *((double *)this + 10);
  }
  return v9 > v8;
}

BOOL MTTapDragManager_::shouldSustainDrag(MTTapDragManager_ *this, double a2, int a3)
{
  if (*((unsigned char *)this + 9)) {
    return 0;
  }
  if (a3 - *((unsigned __int8 *)this + 48) > 0) {
    return 1;
  }
  int v6 = *((_DWORD *)this + 6);
  if (v6 < 2) {
    return !MTTapDragManager_::halfTapDragTimedOut(this, a2);
  }
  if (v6 > 3 || a2 - *((double *)this + 4) < *(double *)&gTimingPrefs_) {
    return 0;
  }
  return v6 >= 3
      && *((unsigned char *)this + 8)
      && ((**(uint64_t (***)(MTTapDragManager_ *))this)(this) & 1) != 0
      || !MTTapDragManager_::halfTapDragTimedOut(this, a2);
}

uint64_t MTTapDragManager_::sendWaitingClickAtHalfTimeout(MTTapDragManager_ *this, __IOHIDEvent *a2, double a3, int a4)
{
  if (!*((unsigned char *)this + 9))
  {
    double v8 = a3 - *((double *)this + 9);
    if (*((unsigned char *)this + 10))
    {
      if (v8 >= *(double *)&qword_158698 + *(double *)&qword_158670 * -2.0 && *((unsigned __int8 *)this + 48) == a4)
      {
        unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
        MTActionEvent_::MTActionEvent_((MTActionEvent_ *)&v10, 67, *((_DWORD *)this + 3), 0);
        uint64_t v5 = 1;
        (*(void (**)(MTTapDragManager_ *, unint64_t *, __IOHIDEvent *, void, void, char *, uint64_t, uint64_t, double))(*(void *)this + 24))(this, &v10, a2, 0, 0, (char *)this + 52, 12288, 1, a3);
        *((double *)this + 11) = a3;
        *((unsigned char *)this + 28) = 0;
        *((_DWORD *)this + 3) = 0;
        *((_DWORD *)this + 6) = 0;
        *((void *)this + 4) = 0;
        *((unsigned char *)this + 48) = 0;
        goto LABEL_3;
      }
    }
    else if (v8 >= *(double *)&qword_158678)
    {
      if (*((unsigned __int8 *)this + 48) == a4)
      {
        unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
        MTActionEvent_::MTActionEvent_((MTActionEvent_ *)&v10, 67, 256, 0);
        (*(void (**)(MTTapDragManager_ *, unint64_t *, __IOHIDEvent *, void, void, char *, uint64_t, uint64_t, double))(*(void *)this + 24))(this, &v10, a2, 0, 0, (char *)this + 52, 12288, 1, a3);
      }
      goto LABEL_2;
    }
    return 0;
  }
LABEL_2:
  *((unsigned char *)this + 28) = 0;
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 4) = 0;
  *((unsigned char *)this + 48) = 0;
  uint64_t v5 = 1;
LABEL_3:
  *(_WORD *)((char *)this + 9) = 0;
  return v5;
}

uint64_t MTTapDragManager_::sendPendingMultiFingerTap(MTTapDragManager_ *this, __IOHIDEvent *a2, const MTHandStatistics_ *a3, const MTHandMotion_ *a4, double a5, int a6)
{
  double v8 = *((double *)a3 + 1);
  if (*((int *)this + 6) <= 1)
  {
    BOOL v11 = *(double *)&qword_1586F8 > a5 || *((unsigned __int8 *)a3 + 195) > 1u;
    if (v11 || *((float *)a4 + 62) > *(float *)&dword_1586E8)
    {
      uint64_t v10 = 0;
LABEL_15:
      *((unsigned char *)this + 28) = 0;
      *((_DWORD *)this + 3) = 0;
      *((_DWORD *)this + 6) = 0;
      *((void *)this + 4) = 0;
      *((unsigned char *)this + 48) = 0;
      goto LABEL_16;
    }
  }
  if (*((unsigned char *)this + 10))
  {
    double v9 = v8 - *((double *)this + 9);
    if (v9 > *(double *)&qword_158698 + *(double *)&qword_158670 * 2.0)
    {
      *((unsigned char *)this + 28) = 0;
      *((_DWORD *)this + 3) = 0;
      *((_DWORD *)this + 6) = 0;
      *((void *)this + 4) = 0;
      *((unsigned char *)this + 48) = 0;
      uint64_t v10 = 1;
LABEL_16:
      *(_WORD *)((char *)this + 9) = 0;
      return v10;
    }
    if (!a6 || v9 > *(double *)&qword_158698)
    {
      unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
      MTActionEvent_::MTActionEvent_((MTActionEvent_ *)&v13, 67, *((_DWORD *)this + 3), 0);
      uint64_t v10 = 1;
      (*(void (**)(MTTapDragManager_ *, unint64_t *, __IOHIDEvent *, void, void, char *, uint64_t, uint64_t, double))(*(void *)this + 24))(this, &v13, a2, 0, 0, (char *)this + 52, 12288, 1, v8);
      *((double *)this + 11) = v8;
      goto LABEL_15;
    }
  }
  return 0;
}

double MTTapDragManager_::queueMultiFingerTapWaitingForDouble(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, int a5)
{
  *(_DWORD *)(a1 + 24) = 1;
  *(_OWORD *)(a1 + 52) = *a3;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 4objc_storeStrong(&location, 0) = result;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 211) + *(unsigned char *)(a2 + 186);
  *(unsigned char *)(a1 + 1objc_storeStrong(&location, 0) = 1;
  *(_DWORD *)(a1 + 12) = a5;
  return result;
}

uint64_t MTTapDragManager_::queueButtonClickEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 9) = 0;
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  MTActionEvent_::MTActionEvent_((MTActionEvent_ *)&v9, 67, 256, 0);
  return (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, void, void, uint64_t, uint64_t, uint64_t, double))(*(void *)a1 + 24))(a1, &v9, a4, 0, 0, a3, 12288, 1, *(double *)(a2 + 8));
}

double MTTapDragManager_::queueButtonPressEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)(a1 + 24) = 2;
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  MTActionEvent_::MTActionEvent_((MTActionEvent_ *)&v9, 65, 256, 0);
  (*(void (**)(uint64_t, unint64_t *, uint64_t, void, void, uint64_t, uint64_t, uint64_t, double))(*(void *)a1 + 24))(a1, &v9, a4, 0, 0, a3, 12288, 1, *(double *)(a2 + 8));
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 4objc_storeStrong(&location, 0) = result;
  return result;
}

uint64_t MTTapDragManager_::queueButtonReleaseEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  MTActionEvent_::MTActionEvent_((MTActionEvent_ *)&v9, 66, 256, 0);
  *(unsigned char *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 9) = 0;
  return (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, void, void, uint64_t, uint64_t, uint64_t, double))(*(void *)a1 + 24))(a1, &v9, a4, 0, 0, a3, 12288, 1, *(double *)(a2 + 8));
}

double MTTapDragManager_::handleTapsForDrag(MTTapDragManager_ *this, const MTHandStatistics_ *a2, const MTHandMotion_ *a3, __IOHIDEvent *a4)
{
  long long v9 = *(_OWORD *)((char *)a3 + 168);
  int v7 = *((_DWORD *)this + 6);
  if (v7 < 2)
  {
    if (*((double *)a2 + 1) - *((double *)this + 9) >= *(double *)&qword_158668)
    {
      *((_DWORD *)this + 6) = 1;
      *(_OWORD *)((char *)this + 52) = v9;
      *((void *)this + 5) = *((void *)a2 + 1);
      *((unsigned char *)this + 48) = *((unsigned char *)a2 + 211) + *((unsigned char *)a2 + 186);
      goto LABEL_7;
    }
  }
  else
  {
    MTTapDragManager_::queueButtonReleaseEvent((uint64_t)this, (uint64_t)a2, (uint64_t)&v9, (uint64_t)a4);
    if (v7 != 2) {
      goto LABEL_7;
    }
  }
  MTTapDragManager_::queueButtonClickEvent((uint64_t)this, (uint64_t)a2, (uint64_t)&v9, (uint64_t)a4);
LABEL_7:
  double result = *((double *)a2 + 1);
  *((double *)this + 9) = result;
  *((unsigned char *)this + 49) = 1;
  return result;
}

uint64_t MTTapDragManager_::handleImmediateTapDragRelease(uint64_t this, const MTHandStatistics_ *a2, const MTHandMotion_ *a3, __IOHIDEvent *a4)
{
  uint64_t v4 = this;
  if (*(int *)(this + 24) >= 2)
  {
    this = (**(uint64_t (***)(uint64_t))this)(this);
    if (this)
    {
      if (*(unsigned char *)(v4 + 9)) {
        this = MTTapDragManager_::queueButtonReleaseEvent(v4, (uint64_t)a2, (uint64_t)a3 + 168, (uint64_t)a4);
      }
    }
  }
  *(unsigned char *)(v4 + 9) = 0;
  return this;
}

uint64_t MTTapDragManager_::chk4dragCycling(MTTapDragManager_ *this, const MTHandStatistics_ *a2, const MTHandMotion_ *a3, __IOHIDEvent *a4, double a5)
{
  MTTapDragManager_::sendPendingMultiFingerTap(this, a4, a2, a3, a5, 1);
  int v9 = *((_DWORD *)this + 6);
  if (v9 == 1)
  {
    unsigned int v10 = *((unsigned __int8 *)a2 + 211) + *((unsigned __int8 *)a2 + 186);
    if (v10 <= *((unsigned __int8 *)a2 + 190) + *((unsigned __int8 *)a2 + 187)
      || v10 <= *((unsigned __int8 *)this + 48)
      || *((unsigned char *)this + 10))
    {
      MTTapDragManager_::sendWaitingClickAtHalfTimeout(this, a4, *((double *)a2 + 1), v10);
    }
    else
    {
      MTTapDragManager_::queueButtonPressEvent((uint64_t)this, (uint64_t)a2, (uint64_t)a3 + 168, (uint64_t)a4);
    }
    goto LABEL_20;
  }
  if (v9 >= 2 && (**(unsigned int (***)(MTTapDragManager_ *))this)(this))
  {
    if (!*((unsigned char *)this + 48) && *((unsigned __int8 *)a2 + 211) + *((unsigned __int8 *)a2 + 186) == 2) {
      *((unsigned char *)this + 48) = 1;
    }
    double v11 = *((double *)a2 + 1);
    double v12 = v11 - *((double *)a2 + 10);
    double v13 = v11 - *((double *)a2 + 16);
    if (v12 < v13 || v13 == 0.0)
    {
      if (v12 <= *(double *)&qword_158688 || v11 - *((double *)a3 + 20) <= *(double *)&qword_158688)
      {
        if (*((int *)this + 6) < 4) {
          goto LABEL_20;
        }
        int v14 = 3;
      }
      else
      {
        *((double *)this + 4) = v11;
        int v14 = 4;
      }
      *((_DWORD *)this + 6) = v14;
    }
  }
LABEL_20:

  return MTTapDragManager_::handleImmediateTapDragRelease((uint64_t)this, a2, a3, a4);
}

double MTTapDragManager_::sustainMultiFingerDrag(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 28) = 1;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 211) + *(unsigned char *)(a2 + 186);
  *(_DWORD *)(a1 + 24) = 3;
  (*(void (**)(uint64_t))(*(void *)a1 + 8))(a1);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 4objc_storeStrong(&location, 0) = result;
  *(double *)(a1 + 8objc_storeStrong(&location, 0) = result;
  return result;
}

uint64_t MTTapDragManager_::handleTapsForMultiFingerDrag(uint64_t this, const MTHandStatistics_ *a2, const MTHandMotion_ *a3, __IOHIDEvent *a4)
{
  if (*(int *)(this + 24) >= 3) {
    return MTTapDragManager_::queueButtonReleaseEvent(this, (uint64_t)a2, (uint64_t)a3 + 168, (uint64_t)a4);
  }
  return this;
}

void __cxx_global_var_init_26()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_25(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_currentTimestamp", a2);
  }
}

void __cxx_global_var_init_3_25(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_previousTimestamp", a2);
  }
}

void __cxx_global_var_init_4_25(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)114,(char)101,(char)108,(char)101,(char)97,(char)115,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_release", a2);
  }
}

void __cxx_global_var_init_5_25(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)97,(char)99,(char)116,(char)105,(char)118,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_activation", a2);
  }
}

void __cxx_global_var_init_6_25(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)101,(char)97,(char)114,(char)108,(char)105,(char)101,(char)115,(char)116,(char)78,(char)111,(char)110,(char)68,(char)105,(char)118,(char)105,(char)110,(char)103,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_earliestNonDivingTimestamp", a2);
  }
}

void __cxx_global_var_init_7_25(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)100,(char)105,(char)118,(char)105,(char)110,(char)103,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)67,(char)104,(char)97,(char)110,(char)103,(char)101,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_divingButtonChangeTimestamp", a2);
  }
}

void __cxx_global_var_init_8_26(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)105,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_min", a2);
  }
}

void __cxx_global_var_init_9_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_max", a2);
  }
}

void __cxx_global_var_init_10_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)66,(char)114,(char)101,(char)97,(char)107,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerBreakTouch_max", a2);
  }
}

void __cxx_global_var_init_11_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)82,(char)101,(char)115,(char)101,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentReset", a2);
  }
}

void __cxx_global_var_init_12_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)65,(char)99,(char)116,(char)105,(char)118,(char)105,(char)116,(char)121>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentButtonActivity", a2);
  }
}

void __cxx_global_var_init_13_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_firstFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_14_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_firstFingerCleanStartInRange", a2);
  }
}

void __cxx_global_var_init_15_20(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerCleanStartInRange", a2);
  }
}

void __cxx_global_var_init_16_20(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_17_20(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_previousRecentFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_18_20(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)78,(char)111,(char)110,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)100,(char)111,(char)119,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentNonThumbTouchdown", a2);
  }
}

void __cxx_global_var_init_19_20(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_restingThumbTouchDown", a2);
  }
}

void __cxx_global_var_init_20_20(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)84,(char)119,(char)111,(char)79,(char)114,(char)77,(char)111,(char)114,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentTwoOrMoreFingersTouching", a2);
  }
}

void __cxx_global_var_init_21_21(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)118,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFiveFingersTouching", a2);
  }
}

void __cxx_global_var_init_22_21(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)76,(char)105,(char)102,(char)116,(char)111,(char)102,(char)102>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerLiftoff", a2);
  }
}

void __cxx_global_var_init_23_21(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)69,(char)110,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerEnd", a2);
  }
}

void __cxx_global_var_init_24_21(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentScrollZoom", a2);
  }
}

void __cxx_global_var_init_25_21(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)119,(char)105,(char)116,(char)99,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentChordSwitch", a2);
  }
}

void __cxx_global_var_init_26_21(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentChordSlide", a2);
  }
}

void __cxx_global_var_init_27_20(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109,(char)83,(char)108,(char)105,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentScrollZoomSlide", a2);
  }
}

void __cxx_global_var_init_28_20(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)108,(char)117,(char)105,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentFluidSlide", a2);
  }
}

void __cxx_global_var_init_29_20(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)101,(char)120,(char)99,(char)101,(char)115,(char)115,(char)84,(char)97,(char)112,(char)77,(char)111,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_excessTapMotion", a2);
  }
}

void __cxx_global_var_init_30_20(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)104,(char)97,(char)110,(char)100,(char)95,(char)99,(char)104,(char)111,(char)114,(char)100,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"righthand_chords", a2);
  }
}

void MTChordIntegrating_::MTChordIntegrating_(MTChordIntegrating_ *this)
{
  MTChordGestureSet_::MTChordGestureSet_(this);
  MTChordIntegrating_::clearIntegrationState(v1);
}

void sub_4F160(_Unwind_Exception *a1)
{
  MTChordGestureSet_::~MTChordGestureSet_(v1);
  _Unwind_Resume(a1);
}

uint64_t MTChordIntegrating_::clearIntegrationState(MTChordIntegrating_ *this)
{
  *((void *)this + 34) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 3objc_storeStrong(&location, 0) = 0;
  *((_DWORD *)this + 66) = 0;
  *((_DWORD *)this + 7objc_storeStrong(&location, 0) = 1;
  *(_OWORD *)((char *)this + 284) = 0u;
  *(_OWORD *)((char *)this + 30objc_storeStrong(&location, 0) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  uint64_t v2 = *((void *)this + 20);
  if (*((void *)this + 21) != v2)
  {
    uint64_t v3 = 0;
    unsigned int v4 = 1;
    do
    {
      MTSlideGesture_::clearIntegrationState((MTSlideGesture_ *)(v2 + 160 * v3));
      uint64_t v3 = v4;
      uint64_t v2 = *((void *)this + 20);
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 21) - v2) >> 5) > v4++);
  }
  *((_DWORD *)this + 98) = 0;
  *(_OWORD *)((char *)this + 36objc_storeStrong(&location, 0) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((void *)this + 5objc_storeStrong(&location, 0) = 0;

  return MTChordIntegrating_::resetMostIntegrators((uint64_t)this, 0);
}

void MTChordIntegrating_::MTChordIntegrating_(MTChordIntegrating_ *this, const MTChordGestureSet_ *a2)
{
  MTChordGestureSet_::MTChordGestureSet_(this, a2);
  MTChordIntegrating_::clearIntegrationState(v2);
}

void sub_4F270(_Unwind_Exception *a1)
{
  MTChordGestureSet_::~MTChordGestureSet_(v1);
  _Unwind_Resume(a1);
}

MTChordIntegrating_ *MTChordIntegrating_::operator=(MTChordIntegrating_ *a1, uint64_t a2)
{
  if (a1 != (MTChordIntegrating_ *)a2)
  {
    MTChordGestureSet_::operator=((uint64_t)a1, a2);
    MTChordIntegrating_::clearIntegrationState(a1);
  }
  return a1;
}

void MTChordIntegrating_::nullify(void **this)
{
  MTChordGestureSet_::MTChordGestureSet_((MTChordGestureSet_ *)v3);
  if (v3 != this)
  {
    MTChordGestureSet_::operator=((uint64_t)this, (uint64_t)v3);
    MTChordIntegrating_::clearIntegrationState((MTChordIntegrating_ *)this);
  }
  uint64_t v2 = (void **)&v12;
  std::vector<MTSlideGesture_>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (__p)
  {
    double v11 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    int v9 = v8;
    operator delete(v8);
  }
  if (v6)
  {
    int v7 = v6;
    operator delete(v6);
  }
  if (v4)
  {
    uint64_t v5 = v4;
    operator delete(v4);
  }
  if (v3[0])
  {
    v3[1] = v3[0];
    operator delete(v3[0]);
  }
}

void sub_4F3AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

BOOL MTChordIntegrating_::hasChordStabilized(MTChordIntegrating_ *this, const MTHandStatistics_ *a2, const MTHandMotion_ *a3)
{
  if (*((unsigned char *)this + 264)) {
    return 1;
  }
  unsigned int v3 = *((unsigned __int8 *)a2 + 186);
  if (v3 == 5) {
    return 1;
  }
  BOOL v5 = *((unsigned __int8 *)a2 + 196) <= *((unsigned __int8 *)a2 + 195) && *((unsigned char *)a2 + 201) == 0;
  return v5
      && ((*((_WORD *)this + 114) & 0x100) == 0
       || sqrtf((float)(*((float *)a3 + 84) * *((float *)a3 + 84)) + (float)(*((float *)a3 + 83) * *((float *)a3 + 83))) <= 100.0)
      && *((double *)a2 + 1) - *((double *)a2 + 10) >= (double)v3 * 0.0100000007
      || *((double *)a2 + 1) - *((double *)a2 + 10) >= (double)v3 * 0.0200000014;
}

uint64_t MTChordIntegrating_::getActiveDegreesOfFreedomMask(MTChordIntegrating_ *this, const MTHandStatistics_ *a2, const MTChordCycling_ *a3)
{
  if (!*((unsigned char *)this + 264)) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 20);
  if (*((void *)this + 21) == v4) {
    return 0;
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  unsigned int v9 = 1;
  do
  {
    unsigned int v10 = (MTSlideGesture_ *)(v4 + 160 * v7);
    int v11 = *((_DWORD *)v10 + 7);
    if ((!v11 || (*((_DWORD *)a3 + 6) & v11) != 0)
      && (MTSlideGesture_::isLockedOutByTriggeredSlide(v10, a2, this, 1) & 1) == 0)
    {
      uint64_t v8 = MTSlideGesture_::getDegreesOfFreedomMask((uint64_t)v10) | v8;
    }
    uint64_t v7 = v9;
    uint64_t v4 = *((void *)this + 20);
  }
  while (0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 21) - v4) >> 5) > v9++);
  return v8;
}

double MTChordIntegrating_::beginChordIntegration(MTChordIntegrating_ *this, const MTHandStatistics_ *a2, const MTHandMotion_ *a3, __IOHIDEvent *a4, MTChordCycling_ *a5)
{
  MTChordIntegrating_::clearIntegrationState(this);
  double result = *((double *)a2 + 10);
  *((double *)this + 3objc_storeStrong(&location, 0) = result;
  return result;
}

void MTChordIntegrating_::endChordIntegration(MTChordIntegrating_ *this, MTHandStatistics_ *a2, const MTHandMotion_ *a3, __IOHIDEvent *a4, MTChordCycling_ *a5)
{
  if (*((_DWORD *)this + 56))
  {
    if (*((unsigned char *)this + 264))
    {
      MTChordIntegrating_::sendLiftSlideEvents(this, a2, (int)a3, (uint64_t)a3 + 168, a4, a5);
    }
    else if (*((unsigned char *)this + 266))
    {
      if (*((void *)this + 13) == *((void *)this + 12)) {
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      }
      (*(void (**)(void, void, __IOHIDEvent *, uint64_t, void, char *, uint64_t, double))(**((void **)a5 + 49) + 24))(*((void *)a5 + 49), *((void *)this + 12), a4, 32, 0, (char *)a3 + 168, 0x2000, *((double *)a2 + 1));
      *((unsigned char *)this + 266) = 0;
    }
    MTChordIntegrating_::clearIntegrationState(this);
    MTChordIntegrating_::nullify((void **)this);
  }
}

void MTChordIntegrating_::sendLiftSlideEvents(MTChordIntegrating_ *this, MTHandStatistics_ *a2, int a3, uint64_t a4, __IOHIDEvent *a5, MTChordCycling_ *a6)
{
  if (!*((unsigned char *)this + 264)) {
    return;
  }
  int v11 = *((_DWORD *)this + 54);
  if (v11 < 2)
  {
    char v16 = 0;
  }
  else
  {
    uint64_t v12 = (_WORD *)*((void *)this + 12);
    if (v12 == *((_WORD **)this + 13)
      || *v12 != 65
      || (double v13 = (void *)*((void *)this + 20),
          0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 21) - (void)v13) >> 5) > 2)
      || *v13 == v13[1]
      || *(_WORD *)*v13 != 69
      || ((uint64_t v14 = *((void *)this + 34)) == 0 ? (v15 = 0.0) : (v15 = *(double *)(v14 + 144)),
          *((double *)a2 + 1) - v15 >= *(double *)&qword_158688))
    {
      char v16 = 0;
    }
    else
    {
      MTDragManagerEventQueue_::stopMomentum((uint64_t)a6, (uint64_t)a5, 4);
      MTTapDragManager_::sustainMultiFingerDrag(*((void *)a6 + 49), (uint64_t)a2);
      if (!*((unsigned char *)this + 264)) {
        return;
      }
      char v16 = 1;
    }
    int v11 = *((_DWORD *)this + 54);
  }
  if (v11 == 1 && *(void *)this != *((void *)this + 1) && **(_WORD **)this == 65)
  {
    if (*((unsigned char *)a2 + 186))
    {
      unsigned int v17 = *((unsigned __int8 *)a2 + 211) + *((unsigned __int8 *)a2 + 186);
      if (v17 >= *((unsigned __int8 *)a2 + 190) + *((unsigned __int8 *)a2 + 187)) {
        goto LABEL_28;
      }
      uint64_t v18 = *((void *)a6 + 49);
      if (v17 > *(unsigned __int8 *)(v18 + 48)) {
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v18 = *((void *)a6 + 49);
    }
    double v19 = *((double *)a2 + 1);
    if (*(int *)(v18 + 24) <= 1) {
      double v19 = 0.0;
    }
    *(double *)(v18 + 8objc_storeStrong(&location, 0) = v19;
  }
LABEL_28:
  if ((v16 & 1) == 0)
  {
    uint64_t v20 = *((void *)this + 34);
    if (v20)
    {
      int64_t v21 = *(MTActionEvent_ **)v20;
      if (*(void *)v20 == *(void *)(v20 + 8)) {
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      }
      if (*(unsigned __int16 *)v21 - 35 > 4)
      {
        int v22 = MTActionEvent_::deriveGestureEndedType(v21);
        if (v22)
        {
          __int16 v23 = v22;
          CFStringRef v24 = (void *)*((void *)this + 34);
          if (*v24 != v24[1] && (*(_WORD *)*v24 & 0xFFFE) == 0x46) {
            (*(void (**)(void, double))(**((void **)a6 + 49) + 24))(*((void *)a6 + 49), *((double *)a2 + 1));
          }
          unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
          MTActionEvent_::MTActionEvent_((MTActionEvent_ *)&v26, v23, 0, 0);
          (*(void (**)(void, unint64_t *, __IOHIDEvent *, void, void, uint64_t, uint64_t, void, double))(**((void **)a6 + 49) + 24))(*((void *)a6 + 49), &v26, a5, 0, 0, a4, 0x2000, *((unsigned int *)this + 56), *((double *)a2 + 1));
        }
      }
      else
      {
        MTChordIntegrating_::possiblyStartFluidMomentum(this, a2, a5, a6);
      }
    }
    if (*((_WORD *)this + 76))
    {
      CFStringRef v25 = (_WORD *)*((void *)this + 16);
      if (v25 != *((_WORD **)this + 17))
      {
        if (*v25) {
          MTGesture::dispatchEvents((uint64_t *)this + 16, *((void *)a6 + 49), (uint64_t)a5, 16, 0, a4, 0x2000, *((unsigned int *)this + 56), *((double *)a2 + 1));
        }
      }
    }
  }
}

uint64_t MTChordIntegrating_::possiblyStartFluidMomentum(MTChordIntegrating_ *this, const MTHandStatistics_ *a2, __IOHIDEvent *a3, MTChordCycling_ *a4)
{
  uint64_t v5 = *((void *)this + 20);
  uint64_t v4 = *((void *)this + 21);
  if (v4 == v5)
  {
    char v9 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    char v9 = 0;
    unsigned int v10 = 1;
    do
    {
      int v11 = (uint64_t *)(v5 + 160 * v8);
      if (*((unsigned char *)v11 + 68))
      {
        float v12 = MTSlideGesture_::fluidSwipePercentage((MTSlideGesture_ *)(v5 + 160 * v8));
        int hasSufficientFluidMomentum = MTSlideGesture_::hasSufficientFluidMomentum((MTSlideGesture_ *)(v5 + 160 * v8), a2, v11 == *((uint64_t **)this + 34));
        uint64_t v14 = *v11;
        if (v11[1] == *v11) {
          std::vector<int>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v15 = *((void *)a4 + 49);
        if (hasSufficientFluidMomentum) {
          uint64_t v16 = 16;
        }
        else {
          uint64_t v16 = 32;
        }
        float v17 = MTSlideGesture_::fluidMomentumPercentage_s((MTSlideGesture_ *)(v5 + 160 * v8), v11 == *((uint64_t **)this + 34));
        v25[0] = MTSlideGesture_::fluidDOFPercentageDeltas((MTSlideGesture_ *)(v5 + 160 * v8));
        v25[1] = v18;
        v25[2] = v19;
        v25[3] = v20;
        (*(void (**)(uint64_t, uint64_t, __IOHIDEvent *, uint64_t, void, _DWORD *, void, float, float))(*(void *)v15 + 32))(v15, v14, a3, v16, 0, v25, *(unsigned __int8 *)(v5 + 160 * v8 + 32), v12, v17);
        uint64_t v5 = *((void *)this + 20);
        uint64_t v4 = *((void *)this + 21);
        char v9 = 1;
      }
      uint64_t v8 = v10;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 5) > v10++);
  }
  return v9 & 1;
}

uint64_t MTChordIntegrating_::commit2Chord(MTChordIntegrating_ *this, const MTHandStatistics_ *a2, const MTHandMotion_ *a3, MTDragManagerEventQueue_ *a4, __IOHIDEvent *a5, unsigned __int16 a6, double a7)
{
  *((unsigned char *)this + 264) = 1;
  *((void *)this + 32) = *((void *)a2 + 1);
  long long v18 = *(_OWORD *)((char *)a3 + 168);
  int v12 = *((_DWORD *)this + 54);
  if (v12 != 1)
  {
    if (v12 >= 2)
    {
      double v13 = (_WORD *)*((void *)this + 12);
      if (v13 != *((_WORD **)this + 13) && *v13 == 65)
      {
        uint64_t v14 = (void *)*((void *)this + 20);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 21) - (void)v14) >> 5) <= 2
          && *v14 != v14[1]
          && *(_WORD *)*v14 == 69)
        {
          a4->_from_multi_finger_drag = 1;
          goto LABEL_5;
        }
      }
    }
LABEL_13:
    MTTapDragManager_::sendPendingMultiFingerTap((MTTapDragManager_ *)a4, a5, a2, a3, a7, 0);
    MTTapDragManager_::clearCycle((uint64_t)a4);
    goto LABEL_14;
  }
  if (*(void *)this == *((void *)this + 1) || **(_WORD **)this != 65) {
    goto LABEL_13;
  }
  if (a4->_cycle_state == 2) {
LABEL_5:
  }
    MTTapDragManager_::setCycleState((uint64_t)a4, 3);
LABEL_14:
  uint64_t result = *((void *)this + 34);
  if (!result) {
    goto LABEL_23;
  }
  if (*((unsigned char *)this + 266))
  {
    if (*(void *)(result + 8) == *(void *)result) {
      goto LABEL_28;
    }
    if (**(_WORD **)result != 70)
    {
      if (*((void *)this + 13) == *((void *)this + 12)) {
        goto LABEL_28;
      }
      (*((void (**)(MTDragManagerEventQueue_ *, double))a4->_vptr$MTTapDragManager_ + 3))(a4, *((double *)a2 + 1));
      *((unsigned char *)this + 266) = 0;
      uint64_t result = *((void *)this + 34);
    }
  }
  if (*(void *)(result + 8) == *(void *)result) {
LABEL_28:
  }
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  uint64_t result = MTActionEvent_::deriveGestureStartedType(*(MTActionEvent_ **)result);
  if (result)
  {
    unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
    MTActionEvent_::MTActionEvent_((MTActionEvent_ *)&v17, result, 0, 0);
    uint64_t result = (*((uint64_t (**)(MTDragManagerEventQueue_ *, unint64_t *, __IOHIDEvent *, uint64_t, void, long long *, uint64_t, void, double))a4->_vptr$MTTapDragManager_
              + 3))(a4, &v17, a5, 2, 0, &v18, 4096, *((unsigned int *)this + 56), *((double *)a2 + 1));
  }
LABEL_23:
  if ((*((_WORD *)this + 60) & a6) != 0)
  {
    uint64_t v16 = (_WORD *)*((void *)this + 12);
    if (v16 != *((_WORD **)this + 13))
    {
      if (*v16) {
        return MTGesture::dispatchEvents((uint64_t *)this + 12, (uint64_t)a4, (uint64_t)a5, 2, 0, (uint64_t)&v18, 4096, *((unsigned int *)this + 56), *((double *)a2 + 1));
      }
    }
  }
  return result;
}

uint64_t MTChordIntegrating_::sendSlidePreamble(MTChordIntegrating_ *this, const MTHandStatistics_ *a2, const MTHandMotion_ *a3, MTDragManagerEventQueue_ *a4, __IOHIDEvent *a5, MTActionEvent_ **a6, unsigned __int16 a7, double a8)
{
  long long v26 = *(_OWORD *)((char *)a3 + 168);
  ++*((_DWORD *)this + 75);
  unsigned int v13 = *((unsigned __int8 *)a2 + 186);
  *((_DWORD *)this + 73) = v13;
  unsigned int v14 = *((_DWORD *)this + 74);
  if (!v14
    || (v14 < v13 ? (BOOL v15 = *((double *)a2 + 1) - *((double *)a2 + 10) <= *(double *)&qword_158640) : (BOOL v15 = 1),
        v15 ? (BOOL v16 = v13 > 1) : (BOOL v16 = 0),
        !v16))
  {
    *((_DWORD *)this + 74) = v13;
  }
  if (!*((unsigned char *)this + 264))
  {
    *((void *)this + 34) = a6;
    MTChordIntegrating_::commit2Chord(this, a2, a3, a4, a5, a7, a8);
    uint64_t result = 1;
    if (!a6) {
      return result;
    }
    goto LABEL_34;
  }
  unint64_t v17 = (MTActionEvent_ **)*((void *)this + 34);
  if (v17 == a6) {
    goto LABEL_17;
  }
  uint64_t result = 0;
  if (a6 && v17)
  {
    if (v17[1] == *v17) {
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    }
    int v19 = MTActionEvent_::deriveGestureStartedType(*v17);
    if (a6[1] != *a6)
    {
      if (v19 == MTActionEvent_::deriveGestureStartedType(*a6))
      {
LABEL_17:
        uint64_t result = 0;
        goto LABEL_31;
      }
      uint64_t v20 = *((void *)this + 34);
      if (*(void *)(v20 + 8) != *(void *)v20)
      {
        if (MTActionEvent_::deriveGestureEndedType(*(MTActionEvent_ **)v20))
        {
          unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
          uint64_t v21 = *((void *)this + 34);
          if (*(void *)(v21 + 8) == *(void *)v21) {
            goto LABEL_37;
          }
          __int16 v22 = MTActionEvent_::deriveGestureEndedType(*(MTActionEvent_ **)v21);
          MTActionEvent_::MTActionEvent_((MTActionEvent_ *)&v25, v22, 0, 0);
          (*((void (**)(MTDragManagerEventQueue_ *, unint64_t *, __IOHIDEvent *, uint64_t, void, long long *, uint64_t, void, double))a4->_vptr$MTTapDragManager_
           + 3))(a4, &v25, a5, 16, 0, &v26, 0x2000, *((unsigned int *)this + 56), *((double *)a2 + 1));
          __int16 v23 = (void *)*((void *)this + 34);
          if (*v23 != v23[1] && (*(_WORD *)*v23 & 0xFFFE) == 0x46) {
            (*((void (**)(MTDragManagerEventQueue_ *, double))a4->_vptr$MTTapDragManager_ + 3))(a4, *((double *)a2 + 1));
          }
        }
        if (a6[1] != *a6)
        {
          if (!MTActionEvent_::deriveGestureStartedType(*a6))
          {
LABEL_30:
            uint64_t result = 1;
            goto LABEL_31;
          }
          unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
          if (a6[1] != *a6)
          {
            __int16 v24 = MTActionEvent_::deriveGestureStartedType(*a6);
            MTActionEvent_::MTActionEvent_((MTActionEvent_ *)&v25, v24, 0, 0);
            (*((void (**)(MTDragManagerEventQueue_ *, unint64_t *, __IOHIDEvent *, uint64_t, void, long long *, uint64_t, void, double))a4->_vptr$MTTapDragManager_
             + 3))(a4, &v25, a5, 2, 0, &v26, 0x2000, *((unsigned int *)this + 56), *((double *)a2 + 1));
            goto LABEL_30;
          }
        }
      }
    }
LABEL_37:
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
LABEL_31:
  if (*((MTActionEvent_ ***)this + 34) != a6)
  {
    *((_DWORD *)this + 98) = 0;
    *(_OWORD *)((char *)this + 36objc_storeStrong(&location, 0) = 0u;
    *(_OWORD *)((char *)this + 376) = 0u;
    *(_OWORD *)((char *)this + 328) = 0u;
    *(_OWORD *)((char *)this + 344) = 0u;
    *(_OWORD *)((char *)this + 312) = 0u;
  }
  *((void *)this + 34) = a6;
  if (a6)
  {
LABEL_34:
    if (*((unsigned char *)this + 265)) {
      *((unsigned char *)this + 265) = 0;
    }
  }
  return result;
}

uint64_t MTChordIntegrating_::resetMostIntegrators(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 160);
  uint64_t v2 = *(void *)(result + 168);
  if (v2 != v3)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 1;
    do
    {
      if (v3 + 160 * v4 != a2)
      {
        uint64_t v6 = v3 + 160 * v4;
        *(_DWORD *)(v6 + 12objc_storeStrong(&location, 0) = 0;
        *(_OWORD *)(v6 + 8objc_storeStrong(&location, 0) = 0uLL;
        *(_OWORD *)(v6 + 96) = 0uLL;
        uint64_t v3 = *(void *)(result + 160);
        uint64_t v2 = *(void *)(result + 168);
      }
      uint64_t v4 = v5;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v2 - v3) >> 5) > v5++);
  }
  return result;
}

void MTChordIntegrating_::momentumFilterAlpha(MTChordIntegrating_ *this, const MTHandStatistics_ *a2, int a3)
{
  double v3 = (*((double *)a2 + 1) - *((double *)a2 + 2)) / 0.00800000038;
  if (a3)
  {
    exp2(v3 * -2.0);
    pow(0.800000012, v3);
  }
  else
  {
    pow(0.850000024, v3);
  }
}

double MTChordIntegrating_::decayMomentumFilters(MTChordIntegrating_ *this, const MTHandStatistics_ *a2)
{
  uint64_t v2 = *((void *)this + 34);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    if (result != *(double *)(v2 + 144))
    {
      int32x4_t v4 = 0uLL;
      *(void *)&double result = MTChordIntegrating_::updateMomentumMickeys((uint64_t)this, &v4, (uint64_t)a2).u64[0];
    }
  }
  return result;
}

float32x4_t MTChordIntegrating_::updateMomentumMickeys(uint64_t a1, int32x4_t *a2, uint64_t a3)
{
  uint64_t v6 = (float32x4_t *)(a1 + 360);
  uint64_t v7 = *(void *)(a1 + 272);
  if (v7 && *(double *)(a3 + 8) - *(double *)(v7 + 144) <= 0.100000001)
  {
    float v11 = *(float *)(a1 + 392);
    float v10 = *(float *)(a1 + 376);
    float v9 = *(float *)(a1 + 380);
    float v8 = *(float *)(a1 + 360);
    float v26 = *(float *)(a1 + 364);
  }
  else
  {
    *(_DWORD *)(a1 + 392) = 0;
    *(_OWORD *)(a1 + 36objc_storeStrong(&location, 0) = 0u;
    *(_OWORD *)(a1 + 376) = 0u;
    *(_OWORD *)(a1 + 328) = 0u;
    *(_OWORD *)(a1 + 344) = 0u;
    *(_OWORD *)(a1 + 312) = 0u;
    float v26 = 0.0;
    float v8 = 0.0;
    float v9 = 0.0;
    float v10 = 0.0;
    float v11 = 0.0;
  }
  *(int32x4_t *)(a1 + 328) = *a2;
  float v12 = hypot((double)a2->i32[0], (double)a2->i32[1]);
  long double v13 = (*(double *)(a3 + 8) - *(double *)(a3 + 16)) / 0.00800000038;
  float v14 = pow(dbl_111440[v11 < (float)(v12 + v12)], v13);
  *(float *)(a1 + 392) = (float)((float)(1.0 - v14) * v12) + (float)(v14 * v11);
  float v15 = hypotf(v10, v9);
  float v16 = pow(dbl_111450[v15 < (float)(v12 + v12)], v13);
  float v25 = v16;
  float v24 = 1.0 - v16;
  BOOL v17 = hypotf(v8, v26) < v12;
  MTChordIntegrating_::momentumFilterAlpha(v18, (const MTHandStatistics_ *)a3, v17);
  float32x4_t v20 = vcvtq_f32_s32(*a2);
  float32x4_t v21 = vmlaq_n_f32(vmulq_n_f32(v20, 1.0 - v19), *v6, v19);
  float32x4_t result = (float32x4_t)vbicq_s8((int8x16_t)v21, (int8x16_t)vcltzq_f32(vmulq_f32(v21, v20)));
  float32x4_t v23 = vmlaq_n_f32(vmulq_n_f32(v20, v24), v6[1], v25);
  float32x4_t *v6 = result;
  v6[1] = v23;
  return result;
}

uint64_t MTChordIntegrating_::switchingVerticalToHorizontal(int32x2_t *this, float a2, int a3)
{
  if (a3) {
    *(_OWORD *)this[43].i8 = *(_OWORD *)this[41].i8;
  }
  int v3 = this[43].i32[0];
  if (v3 < 0) {
    int v3 = -v3;
  }
  int v4 = this[43].i32[1];
  if (v4 < 0) {
    int v4 = -v4;
  }
  if (v3 >= (2 * v4))
  {
    unsigned __int8 v6 = 0;
  }
  else
  {
    int32x2_t v5 = vabs_s32(this[41]);
    unsigned __int8 v6 = vcgt_u32((uint32x2_t)v5, (uint32x2_t)vdup_lane_s32(v5, 1)).u8[0];
  }
  return v6 & 1;
}

uint64_t MTChordIntegrating_::markMomentumPause(MTChordIntegrating_ *this, const MTHandStatistics_ *a2)
{
  MTChordIntegrating_::markMomentumPause(this, a2, 3.0, (double *)this + 40);

  return MTChordIntegrating_::markMomentumPause(this, a2, 3.5, (double *)this + 39);
}

uint64_t MTChordIntegrating_::markMomentumPause(MTChordIntegrating_ *this, const MTHandStatistics_ *a2, float a3, double *a4)
{
  float v6 = *((float *)this + 98) * a3;
  if (v6 >= 1.0) {
    float v7 = v6;
  }
  else {
    float v7 = 1.0;
  }
  if ((float)((float)(*((float *)this + 91) * *((float *)this + 91))
             + (float)(*((float *)this + 90) * *((float *)this + 90))) <= v7)
    goto LABEL_10;
  int v9 = *((_DWORD *)this + 82);
  int v10 = *((_DWORD *)this + 83);
  float v11 = hypot((double)v9, (double)v10);
  float v12 = *((float *)this + 94);
  float v13 = *((float *)this + 95);
  float v14 = hypotf(v12, v13);
  uint64_t result = 0;
  BOOL v16 = (float)(v11 * v11) <= v7 || (float)(v14 * v14) <= v7;
  if (!v16 && (float)((float)((float)(v13 * (float)v10) + (float)(v12 * (float)v9)) / (float)(v14 * v11)) < -0.5)
  {
LABEL_10:
    *a4 = *((double *)a2 + 1);
    return 1;
  }
  return result;
}

BOOL MTChordIntegrating_::recentMomentumPause(MTChordIntegrating_ *this, const MTHandStatistics_ *a2, int a3)
{
  uint64_t v3 = 312;
  if (a3) {
    uint64_t v3 = 320;
  }
  double v4 = *((double *)a2 + 1) - *(double *)((char *)this + v3);
  int32x2_t v5 = &qword_158640;
  if (a3) {
    int32x2_t v5 = &qword_158648;
  }
  return v4 < *(double *)v5;
}

uint64_t MTChordIntegrating_::possiblyStartMomentum(MTChordIntegrating_ *this, const MTHandStatistics_ *a2, __IOHIDEvent *a3, MTChordCycling_ *a4, double a5)
{
  if (!*((unsigned char *)this + 264)) {
    return 0;
  }
  uint64_t v6 = *((void *)this + 34);
  if (!v6) {
    return 0;
  }
  if ((*(unsigned char *)(v6 + 34) & 0x40) == 0) {
    return 0;
  }
  float v7 = *(_WORD **)v6;
  if (*(void *)v6 == *(void *)(v6 + 8)) {
    return 0;
  }
  int v11 = (unsigned __int16)*v7;
  if (v11 == 69)
  {
    unsigned int v14 = *((unsigned __int8 *)a2 + 186);
    unsigned int v15 = *((unsigned __int8 *)a2 + 211) + v14;
    if (v15
      && (float)((float)(*((float *)this + 91) * *((float *)this + 91))
               + (float)(*((float *)this + 90) * *((float *)this + 90))) >= 25.0)
    {
      if (v15 != 1 || v14 <= *((unsigned __int8 *)a2 + 195))
      {
        MTDragManagerEventQueue_::startMomentum((uint64_t)a4, (uint64_t)a3, 4);
        goto LABEL_36;
      }
      MTDragManagerEventQueue_::stopMomentum((uint64_t)a4, (uint64_t)a3, 4);
      return 0;
    }
    goto LABEL_11;
  }
  if (v11 != 70
    || (v12 = *((float *)this + 90), float v13 = *((float *)this + 91),
                                     (float)((float)(v13 * v13) + (float)(v12 * v12)) < 25.0))
  {
LABEL_11:
    if (*v7 == 68
      && *((double *)a2 + 1) - *((double *)a4 + 155) > *(double *)&qword_158668
      && (float)((float)(*((float *)this + 91) * *((float *)this + 91))
               + (float)(*((float *)this + 90) * *((float *)this + 90))) >= 64.0)
    {
      MTDragManagerEventQueue_::startMomentum((uint64_t)a4, (uint64_t)a3, 2);
LABEL_36:
      MTAppendRelativeMouseEvent();
      return 1;
    }
    return 0;
  }
  int v16 = (int)(float)-v12;
  int v17 = (int)(float)-v13;
  if (v16 >= 0) {
    unsigned int v18 = (int)(float)-v12;
  }
  else {
    unsigned int v18 = -v16;
  }
  float v19 = (float)v18;
  if (v17 >= 0) {
    unsigned int v20 = v17;
  }
  else {
    unsigned int v20 = -v17;
  }
  if ((float)((float)v20 * 3.0) >= v19)
  {
    if ((float)(v19 * 3.0) < (float)v20) {
      int v16 = 0;
    }
  }
  else
  {
    int v17 = 0;
  }
  if ((float)((float)((float)v17 * (float)v17) + (float)((float)v16 * (float)v16)) < 25.0
    || *((double *)a2 + 1) - *((double *)this + 50) <= 0.05)
  {
    return 1;
  }
  uint64_t v21 = 1;
  MTAppendMomentumEnableEvent();
  MTAppendScrollEvent();
  if (*((unsigned char *)a4 + 1264)) {
    MTDragManagerEventQueue_::stopMomentum((uint64_t)a4, (uint64_t)a3, 1);
  }
  *((void *)this + 5objc_storeStrong(&location, 0) = *((void *)a2 + 1);
  *((_DWORD *)a4 + 317) = 1;
  *((unsigned char *)a4 + 1264) = 1;
  return v21;
}

uint64_t MTChordIntegrating_::clearMickeysSinceLastTouchdown(uint64_t this)
{
  *(_DWORD *)(this + 288) = 0;
  uint64_t v1 = *(void *)(this + 160);
  uint64_t v2 = *(void *)(this + 168) - v1;
  if (v2)
  {
    unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * (v2 >> 5);
    double v4 = (_DWORD *)(v1 + 112);
    unsigned int v5 = 1;
    do
    {
      *double v4 = 0;
      v4 += 40;
    }
    while (v3 > v5++);
  }
  return this;
}

BOOL MTChordIntegrating_::waitForFastShotVerification(MTChordIntegrating_ *this, const MTHandStatistics_ *a2, const MTHandMotion_ *a3)
{
  if (*((_DWORD *)this + 75) != 1) {
    return 0;
  }
  double v3 = *((double *)a2 + 1) - *((double *)a2 + 7);
  if (v3 < 0.135000005) {
    return 1;
  }
  if (v3 >= 0.230000004) {
    return 0;
  }
  if (!*((unsigned char *)a2 + 186)) {
    return 1;
  }
  return *((unsigned __int8 *)a2 + 191) > *((unsigned __int8 *)a2 + 186);
}

uint64_t MTChordIntegrating_::continueChordIntegration(MTChordIntegrating_ *this, const MTHandStatistics_ *a2, const MTHandMotion_ *a3, __IOHIDEvent *a4, MTChordCycling_ *a5, double a6, double a7, float a8)
{
  uint64_t v12 = *((void *)this + 34);
  if (v12) {
    double v13 = *(double *)(v12 + 144);
  }
  else {
    double v13 = 0.0;
  }
  uint64_t result = MTChordGestureSet_::chk4ChordPause(this, a2, a3, *((double *)a2 + 1) - v13, v13, a8);
  if (result)
  {
    double v15 = *((double *)a2 + 1);
    if (*((unsigned char *)this + 265))
    {
      double v16 = *((double *)this + 38);
    }
    else
    {
      *((double *)this + 38) = v15;
      double v16 = v15;
    }
    *((unsigned char *)this + 265) = 1;
    if (v15 - v16 > 0.120000005) {
      *((unsigned char *)this + 267) = 0;
    }
  }
  int v17 = *((_DWORD *)this + 58);
  if (v17 && (*((_DWORD *)a5 + 6) & v17) == 0) {
    goto LABEL_83;
  }
  double v18 = *((double *)a2 + 1);
  double v19 = *((double *)a5 + 155);
  if ((*((_WORD *)this + 60) & 0x100) != 0 && !*((unsigned char *)this + 266) && !*((unsigned char *)this + 264))
  {
    uint64_t result = *((void *)a5 + 49);
    if ((!*(unsigned char *)(result + 28) || *(int *)(result + 24) <= 2)
      && v18 - *((double *)this + 31) > *(double *)&qword_158650)
    {
      if (*((void *)this + 13) == *((void *)this + 12)) {
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, double))(*(void *)result + 24))(result, *((double *)a2 + 1));
      *((unsigned char *)this + 266) = 1;
    }
  }
  double v20 = v18 - v19;
  if (!*((unsigned char *)this + 264))
  {
    uint64_t result = MTChordIntegrating_::hasChordStabilized(this, a2, a3);
    if (result)
    {
      uint64_t result = MTChordGestureSet_::chk4ChordTimein(this, a2);
      if (result) {
        uint64_t result = MTChordIntegrating_::sendSlidePreamble(this, a2, a3, *((MTDragManagerEventQueue_ **)a5 + 49), a4, 0, 4u, v20);
      }
    }
  }
  uint64_t v21 = *((void *)this + 20);
  if (*((void *)this + 21) == v21) {
    goto LABEL_83;
  }
  int v52 = a4;
  uint64_t v53 = 0;
  uint64_t v22 = 0;
  CFIndex v55 = 0;
  uint64_t v23 = 0;
  CFIndex v57 = 0;
  int v56 = 0;
  int v24 = 0;
  float v25 = 0.0;
  unsigned int v26 = 1;
  CFTypeID v27 = a3;
  do
  {
    CFIndex v28 = (unsigned __int16 **)(v21 + 160 * v22);
    int v29 = *((_DWORD *)v28 + 7);
    if (!v29 || (*((_DWORD *)a5 + 6) & v29) != 0)
    {
      CFIndex v30 = (MTHandMotion_ *)v27;
      if (MTSlideGesture_::isBlocked((MTSlideGesture_ *)(v21 + 160 * v22), a2, v27, this, *((unsigned char *)a5 + 400)))
      {
        CFTypeID v27 = v30;
        goto LABEL_40;
      }
      float v31 = MTSlideGesture_::integrateGesture((MTSlideGesture_ *)(v21 + 160 * v22), a2, v30, *((const MTDragManagerEventQueue_ **)a5 + 49), this, *((double *)a2 + 1) - *((double *)a5 + 154));
      BOOL canPunishSomeMoving = MTSlideGesture_::canPunishSomeMoving((MTSlideGesture_ *)(v21 + 160 * v22), a2, this);
      BOOL v33 = v31 < v25;
      if (v31 >= v25) {
        float v25 = v31;
      }
      unsigned int v34 = v57;
      if (!v33) {
        unsigned int v34 = (MTSlideGesture_ *)(v21 + 160 * v22);
      }
      CFIndex v57 = v34;
      if (*v28 == v28[1] || **v28 - 35 > 4)
      {
        uint64_t v37 = v23;
        CFTypeID v27 = a3;
        CFIndex v28 = (unsigned __int16 **)v55;
      }
      else
      {
        CFTypeID v27 = a3;
        if (!v53 || (uint64_t v35 = v53, fabsf(*(float *)(v21 + 160 * v22 + 80)) > fabsf(*(float *)(v53 + 80)))) {
          uint64_t v35 = v21 + 160 * v22;
        }
        uint64_t v53 = v35;
        if (v23)
        {
          float v36 = fabsf(*(float *)(v21 + 160 * v22 + 92));
          if (v36 <= fabsf(*(float *)(v23 + 92)))
          {
            int v38 = v56;
            if (v55 && v36 <= fabsf(v55[23]))
            {
              uint64_t v37 = v23;
              CFIndex v28 = (unsigned __int16 **)v55;
            }
            else
            {
              uint64_t v37 = v23;
            }
            goto LABEL_39;
          }
          uint64_t v37 = v21 + 160 * v22;
          CFIndex v28 = (unsigned __int16 **)v23;
        }
        else
        {
          uint64_t v37 = v21 + 160 * v22;
          CFIndex v28 = 0;
        }
      }
      int v38 = v56;
LABEL_39:
      int v56 = v38 + canPunishSomeMoving;
      ++v24;
      uint64_t v23 = v37;
      CFIndex v55 = (float *)v28;
    }
LABEL_40:
    uint64_t v22 = v26;
    uint64_t v21 = *((void *)this + 20);
    uint64_t v39 = *((void *)this + 21);
    BOOL v40 = 0xCCCCCCCCCCCCCCCDLL * ((v39 - v21) >> 5) > v26++;
  }
  while (v40);
  BOOL v41 = 0;
  if (v23)
  {
    int v42 = v24;
    if (v53 == v23) {
      BOOL v41 = !v55 || (float)(fabsf(*(float *)(v23 + 92)) - *(float *)(v23 + 56)) > fabsf(v55[23]);
    }
  }
  else
  {
    int v42 = v24;
  }
  uint64_t result = MTChordIntegrating_::hasChordStabilized(this, a2, v27);
  if (!result || v42 < 1) {
    goto LABEL_83;
  }
  uint64_t result = *((void *)this + 34);
  if (!v23 || result) {
    goto LABEL_66;
  }
  if (v57 == (MTSlideGesture_ *)v23) {
    goto LABEL_62;
  }
  if (!v57) {
    goto LABEL_76;
  }
  if (*(void *)v57 == *((void *)v57 + 1) || **(unsigned __int16 **)v57 - 35 > 4)
  {
LABEL_66:
    if (v42 >= 2 && v56 >= 1 && v57)
    {
      if (v25 <= 0.2 && *((double *)a2 + 1) - *((double *)this + 31) <= *(double *)&qword_158658) {
        goto LABEL_83;
      }
      CFNumberRef v43 = (MTDragManagerEventQueue_ *)*((void *)a5 + 49);
      uint64_t result = (uint64_t)v57;
LABEL_70:
      uint64_t result = MTSlideGesture_::fireGesture(result, a2, a3, v43, v52, this, v20);
      goto LABEL_83;
    }
    if (result && *(void *)result != *(void *)(result + 8) && **(unsigned __int16 **)result - 35 <= 4)
    {
      CFNumberRef v43 = (MTDragManagerEventQueue_ *)*((void *)a5 + 49);
      if (v53) {
        uint64_t result = v53;
      }
      goto LABEL_70;
    }
LABEL_76:
    if (v39 != v21)
    {
      uint64_t v44 = 0;
      unsigned int v45 = 1;
      do
      {
        int v46 = (MTSlideGesture_ *)(v21 + 160 * v44);
        int v47 = *((_DWORD *)v46 + 7);
        if (!v47 || (*((_DWORD *)a5 + 6) & v47) != 0)
        {
          uint64_t result = MTSlideGesture_::isBlocked(v46, a2, a3, this, *((unsigned char *)a5 + 400));
          if ((result & 1) == 0) {
            uint64_t result = MTSlideGesture_::fireGesture((uint64_t)v46, a2, a3, *((MTDragManagerEventQueue_ **)a5 + 49), v52, this, v20);
          }
        }
        uint64_t v44 = v45;
        uint64_t v21 = *((void *)this + 20);
        BOOL v40 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 21) - v21) >> 5) > v45++;
      }
      while (v40);
    }
    goto LABEL_83;
  }
LABEL_62:
  if (v41)
  {
    CFNumberRef v43 = (MTDragManagerEventQueue_ *)*((void *)a5 + 49);
    uint64_t result = v23;
    goto LABEL_70;
  }
LABEL_83:
  double v48 = *((double *)a2 + 1);
  uint64_t v49 = *((void *)this + 34);
  if (v49)
  {
    double v50 = *(double *)(v49 + 144);
    if (v48 - v50 < v48 - *((double *)a5 + 154))
    {
      *((double *)a5 + 154) = v50;
      uint64_t v51 = *(_WORD **)v49;
      if (*(void *)v49 != *(void *)(v49 + 8))
      {
        if ((*v51 & 0xFFFE) == 0x46) {
          *((double *)a5 + 155) = v50;
        }
        if ((unsigned __int16)*v51 - 35 <= 4) {
          *((double *)a5 + 156) = v50;
        }
      }
    }
  }
  else if (v48 < v48 - *((double *)a5 + 154))
  {
    *((void *)a5 + 154) = 0;
  }
  return result;
}

void __cxx_global_var_init_27()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_26(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_currentTimestamp", a2);
  }
}

void __cxx_global_var_init_3_26(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_previousTimestamp", a2);
  }
}

void __cxx_global_var_init_4_26(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)114,(char)101,(char)108,(char)101,(char)97,(char)115,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_release", a2);
  }
}

void __cxx_global_var_init_5_26(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)97,(char)99,(char)116,(char)105,(char)118,(char)97,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_activation", a2);
  }
}

void __cxx_global_var_init_6_26(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)101,(char)97,(char)114,(char)108,(char)105,(char)101,(char)115,(char)116,(char)78,(char)111,(char)110,(char)68,(char)105,(char)118,(char)105,(char)110,(char)103,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_earliestNonDivingTimestamp", a2);
  }
}

void __cxx_global_var_init_7_26(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)100,(char)105,(char)118,(char)105,(char)110,(char)103,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)67,(char)104,(char)97,(char)110,(char)103,(char)101,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_divingButtonChangeTimestamp", a2);
  }
}

void __cxx_global_var_init_8_27(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)105,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_min", a2);
  }
}

void __cxx_global_var_init_9_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_max", a2);
  }
}

void __cxx_global_var_init_10_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)66,(char)114,(char)101,(char)97,(char)107,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerBreakTouch_max", a2);
  }
}

void __cxx_global_var_init_11_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)82,(char)101,(char)115,(char)101,(char)116>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentReset", a2);
  }
}

void __cxx_global_var_init_12_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)65,(char)99,(char)116,(char)105,(char)118,(char)105,(char)116,(char)121>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentButtonActivity", a2);
  }
}

void __cxx_global_var_init_13_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_firstFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_14_12(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_firstFingerCleanStartInRange", a2);
  }
}

void __cxx_global_var_init_15_21(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerCleanStartInRange", a2);
  }
}

void __cxx_global_var_init_16_21(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_17_21(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_previousRecentFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_18_21(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)78,(char)111,(char)110,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)100,(char)111,(char)119,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentNonThumbTouchdown", a2);
  }
}

void __cxx_global_var_init_19_21(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_restingThumbTouchDown", a2);
  }
}

void __cxx_global_var_init_20_21(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)84,(char)119,(char)111,(char)79,(char)114,(char)77,(char)111,(char)114,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentTwoOrMoreFingersTouching", a2);
  }
}

void __cxx_global_var_init_21_22(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)118,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFiveFingersTouching", a2);
  }
}

void __cxx_global_var_init_22_22(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)76,(char)105,(char)102,(char)116,(char)111,(char)102,(char)102>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerLiftoff", a2);
  }
}

void __cxx_global_var_init_23_22(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)69,(char)110,(char)100>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerEnd", a2);
  }
}

void __cxx_global_var_init_24_22(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentScrollZoom", a2);
  }
}

void __cxx_global_var_init_25_22(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)119,(char)105,(char)116,(char)99,(char)104>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentChordSwitch", a2);
  }
}

void __cxx_global_var_init_26_22(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentChordSlide", a2);
  }
}

void __cxx_global_var_init_27_21(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109,(char)83,(char)108,(char)105,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentScrollZoomSlide", a2);
  }
}

void __cxx_global_var_init_28_21(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)108,(char)117,(char)105,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentFluidSlide", a2);
  }
}

void __cxx_global_var_init_29_21(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)101,(char)120,(char)99,(char)101,(char)115,(char)115,(char)84,(char)97,(char)112,(char)77,(char)111,(char)116,(char)105,(char)111,(char)110>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_excessTapMotion", a2);
  }
}

void __cxx_global_var_init_30_21(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)104,(char)97,(char)110,(char)100,(char)95,(char)99,(char)104,(char)111,(char)114,(char)100,(char)115>::Key = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"righthand_chords", a2);
  }
}

uint64_t MTParserPath_::MTParserPath_(uint64_t a1, int a2, int a3)
{
  *(void *)a1 = off_1417C0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  MTForceFilter_::MTForceFilter_((MTForceFilter_ *)(a1 + 288));
  *(_OWORD *)(a1 + 24objc_storeStrong(&location, 0) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 16objc_storeStrong(&location, 0) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 8objc_storeStrong(&location, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  MTForceFilter_::clear(v4);
  *(void *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 28objc_storeStrong(&location, 0) = 0;
  *(void *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 56objc_storeStrong(&location, 0) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 40objc_storeStrong(&location, 0) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(void *)(a1 + 448) = 0;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 48objc_storeStrong(&location, 0) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_WORD *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 547) = 0;
  *(int32x2_t *)(a1 + 456) = vdup_n_s32(0x7FC00000u);
  return a1;
}

void sub_51638(_Unwind_Exception *a1)
{
  MTForceFilter_::~MTForceFilter_(v1);
  _Unwind_Resume(a1);
}

int32x2_t MTParserPath_::clear(MTParserPath_ *this)
{
  *(_OWORD *)&this[2].var3.int var0 = 0u;
  *(_OWORD *)&this[2].var3.var2 = 0u;
  *(_OWORD *)&this[1].var3.var14.y = 0u;
  *(_OWORD *)&this[2].int var0 = 0u;
  *(_OWORD *)&this[1].var3.var8 = 0u;
  *(_OWORD *)&this[1].var3.var12 = 0u;
  *(_OWORD *)&this[1].var3.var2 = 0u;
  *(_OWORD *)&this[1].var3.var6.x = 0u;
  *(_OWORD *)&this[1].int var0 = 0u;
  *(_OWORD *)&this[1].var3.int var0 = 0u;
  *(_OWORD *)&this->var3.var12 = 0u;
  *(_OWORD *)&this->var3.var14.y = 0u;
  *(_OWORD *)&this->var3.var6.x = 0u;
  *(_OWORD *)&this->var3.var8 = 0u;
  *(_OWORD *)&this->var3.int var0 = 0u;
  *(_OWORD *)&this->var3.var2 = 0u;
  MTForceFilter_::clear((MTForceFilter_ *)&this[2].var3.var8);
  this[2].var3.var6 = 0;
  this[2].var3.var7.x = 0.0;
  *(void *)&this[4].var4 = 0;
  LODWORD(this[5].varobjc_storeStrong(&location, 0) = 0;
  *(_OWORD *)&this[3].int var0 = 0u;
  *(_OWORD *)&this[3].var3.int var0 = 0u;
  *(_OWORD *)&this[3].var3.var2 = 0u;
  *(_OWORD *)&this[3].var3.var6.x = 0u;
  *(_OWORD *)&this[3].var3.var8 = 0u;
  *(_OWORD *)&this[3].var3.var12 = 0u;
  *(_OWORD *)&this[3].var3.var14.y = 0u;
  this[4].int var0 = 0;
  *(_OWORD *)&this[4].var3.int var0 = 0u;
  *(_OWORD *)&this[4].var3.var2 = 0u;
  *(_OWORD *)&this[4].var3.var6.x = 0u;
  *(_OWORD *)&this[4].var3.var8 = 0u;
  *(_OWORD *)&this[4].var3.var12 = 0u;
  LOWORD(this[4].var3.var14.y) = 0;
  *(float *)((char *)&this[4].var3.var14.y + 3) = 0.0;
  int32x2_t result = vdup_n_s32(0x7FC00000u);
  *(int32x2_t *)&this[4].unsigned int var1 = result;
  return result;
}

void MTParserPath_::~MTParserPath_(MTParserPath_ *this)
{
  this->int var0 = (void **)off_1417C0;
  MTForceFilter_::~MTForceFilter_((MTForceFilter_ *)&this[2].var3.var8);
}

{
  uint64_t vars8;

  this->int var0 = (void **)off_1417C0;
  MTForceFilter_::~MTForceFilter_((MTForceFilter_ *)&this[2].var3.var8);

  operator delete();
}

uint64_t MTParserPath_::updateCurPrevContactsWith(MTParserPath_ *this, _OWORD *a2, MTSurfaceDimensions_ *a3, float *a4, double a5)
{
  long long v9 = *(_OWORD *)&this->var3.var8;
  *(_OWORD *)&this[1].var3.var2 = *(_OWORD *)&this->var3.var6.x;
  *(_OWORD *)&this[1].var3.var6.x = v9;
  long long v10 = *(_OWORD *)&this->var3.var14.y;
  *(_OWORD *)&this[1].var3.var8 = *(_OWORD *)&this->var3.var12;
  *(_OWORD *)&this[1].var3.var12 = v10;
  long long v11 = *(_OWORD *)&this->var3.var2;
  *(_OWORD *)&this[1].int var0 = *(_OWORD *)&this->var3.var0;
  *(_OWORD *)&this[1].var3.int var0 = v11;
  long long v12 = a2[1];
  *(_OWORD *)&this->var3.int var0 = *a2;
  *(_OWORD *)&this->var3.var2 = v12;
  long long v13 = a2[5];
  long long v15 = a2[2];
  long long v14 = a2[3];
  *(_OWORD *)&this->var3.var12 = a2[4];
  *(_OWORD *)&this->var3.var14.y = v13;
  *(_OWORD *)&this->var3.var6.x = v15;
  *(_OWORD *)&this->var3.var8 = v14;
  if ((this->var1 - 1000) <= 0xBB7)
  {
    if (!HIDWORD(this[1].var3.var0))
    {
      double v16 = *(double *)&this->var3.var13;
      *(double *)&this[3].var3.var3 = v16;
      this[3].var3.unsigned int var1 = v16;
    }
    int var4 = this->var3.var4;
    if ((var4 - 2) > 3)
    {
      if (var4 != 13 && *((unsigned char *)&this[4].var3.var15 + 2)) {
        this->var3.int var4 = 14;
      }
    }
    else
    {
      *((unsigned char *)&this[4].var3.var15 + 2) = 0;
    }
  }
  if ((this->var3.var3 - 1) <= 2) {
    *(void ***)((char *)&this[3].var0 + 4) = (void **)this->var3.var13;
  }
  MTParserPath_::updatePathStageTimestamps(this, a5);
  MTParserPath_::updateTotalDiscountedDistance(this, v18);

  return MTParserPath_::updateZonesAndEdges((uint64_t)this, a3, a4, a5);
}

MTParserPath_ *MTParserPath_::rejectRestingThumbFromRestingHand(MTParserPath_ *this)
{
  int var4 = this->var3.var4;
  if ((var4 - 2) > 3)
  {
    if (var4 != 13 && *((unsigned char *)&this[4].var3.var15 + 2) != 0) {
      this->var3.int var4 = 14;
    }
  }
  else
  {
    *((unsigned char *)&this[4].var3.var15 + 2) = 0;
  }
  return this;
}

MTParserPath_ *MTParserPath_::updatePathStageTimestamps(MTParserPath_ *this, double a2)
{
  int var3 = this->var3.var3;
  if (var3 == 1)
  {
    *(double *)&this[1].var3.var14.y = a2;
LABEL_14:
    *(double *)&this[1].int var4 = a2;
    goto LABEL_15;
  }
  int var0_high = HIDWORD(this[1].var3.var0);
  if (var0_high == 7 || var0_high == 0) {
    *(double *)&this[1].var3.var14.y = a2;
  }
  if (var0_high) {
    BOOL v5 = var3 < var0_high;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_14;
  }
LABEL_15:
  int v6 = HIDWORD(this[1].var3.var0);
  if (var3 == 2)
  {
    if (v6 == 2) {
      return this;
    }
    p_unsigned int var1 = (double *)&this[2].var1;
    goto LABEL_30;
  }
  if (v6 == 2) {
    *(double *)&this[2].var3.int var0 = a2;
  }
  unsigned int v8 = v6 - 6;
  if ((var3 - 3) <= 2 && v8 <= 0xFFFFFFFC) {
    *(double *)&this[2].int var0 = a2;
  }
  if (var3 >= 5)
  {
    if (*(double *)&this[2].var0 >= this[2].var3.var1) {
      this[2].var3.unsigned int var1 = a2;
    }
    if (var3 == 7)
    {
      p_unsigned int var1 = (double *)&this[2].var3.var2;
LABEL_30:
      *p_unsigned int var1 = a2;
    }
  }
  return this;
}

MTParserPath_ *MTParserPath_::updateTotalDiscountedDistance(MTParserPath_ *this, double a2)
{
  if ((this->var1 - 1000) <= 0xBB7)
  {
    if ((HIDWORD(this[1].var3.var0) - 3) > 1 || (this->var3.var3 - 3) > 1)
    {
      this[3].var3.var5 = 0;
    }
    else
    {
      float32x2_t v2 = vsub_f32((float32x2_t)this->var3.var13, *(float32x2_t *)&this[1].var3.var9);
      float v3 = sqrtf(vaddv_f32(vmul_f32(v2, v2)));
      if (v3 > 0.14) {
        *(float *)&this[3].var3.var5 = (float)(v3 + -0.14) + *(float *)&this[3].var3.var5;
      }
    }
  }
  return this;
}

uint64_t MTParserPath_::updateZonesAndEdges(uint64_t a1, MTSurfaceDimensions_ *this, float *a3, double a4)
{
  v21.x = 1.0;
  v21.y = 1.0;
  float v8 = MTSurfaceDimensions_::convertSurfaceFractionToMillimeters(this, v21);
  float v10 = v9;
  float v11 = MTSurfaceDimensions_::convertSurfaceFractionToMillimeters(this, *(MTPoint *)(a1 + 48));
  float v13 = v12;
  uint64_t result = MTParserPath_::computeZonesAndEdgesMask(v11, v12, v8, v10, v14, a3);
  *(_DWORD *)(a1 + 272) = result;
  if (*(double *)(a1 + 248) == a4) {
    *(_DWORD *)(a1 + 28objc_storeStrong(&location, 0) = result;
  }
  int v16 = *(_DWORD *)(a1 + 36);
  if ((v16 - 1) <= 2)
  {
    if (v16 == 1 || (*(_DWORD *)(a1 + 132) - 1) >= 6)
    {
      *(_DWORD *)(a1 + 276) = result;
    }
    else
    {
      *(_DWORD *)(a1 + 276) |= result;
      float v17 = v11 + (float)(v11 - MTSurfaceDimensions_::convertPixelsToMillimeters(this, *(MTPoint *)(a1 + 144))) * -2.5;
      float v19 = v13 + (float)(v13 - v18) * -2.5;
      uint64_t result = MTParserPath_::computeZonesAndEdgesMask(v17, v19, v8, v10, v20, a3);
      *(_DWORD *)(a1 + 276) |= result;
    }
  }
  return result;
}

uint64_t MTParserPath_::computeZonesAndEdgesMask(float a1, float a2, float a3, float a4, uint64_t a5, float *a6)
{
  double v8 = a6[1];
  float v35 = a6[2];
  float v36 = a6[3];
  float v38 = a6[4];
  float v39 = a6[7];
  float v37 = a6[5];
  float v40 = a6[6];
  float v34 = a4 - a2;
  long double v9 = (float)(a4 - a2);
  long double v10 = a2;
  float v11 = a3 - a1;
  long double v12 = (float)(a3 - a1);
  double v33 = hypot(a2, a1);
  double v13 = hypot(v10, v12);
  double v14 = hypot(v9, a1);
  double v15 = hypot(v9, v12);
  BOOL v16 = v33 > v8;
  BOOL v17 = v13 > v8;
  if (a2 > v35)
  {
    BOOL v16 = 1;
    BOOL v17 = 1;
  }
  BOOL v18 = v14 > v8;
  BOOL v19 = v15 > v8;
  if (v34 > v35)
  {
    BOOL v18 = 1;
    BOOL v19 = 1;
  }
  if (v11 > v36)
  {
    BOOL v17 = 1;
    BOOL v19 = 1;
  }
  if (a1 > v36) {
    BOOL v16 = 1;
  }
  unsigned int v20 = !v16;
  if (a1 > v36) {
    BOOL v18 = 1;
  }
  if (!v17) {
    v20 |= 2u;
  }
  if (!v18) {
    v20 |= 4u;
  }
  if (!v19) {
    v20 |= 8u;
  }
  if (a1 < v37) {
    v20 |= 0x10u;
  }
  if (v11 < v37) {
    v20 |= 0x20u;
  }
  if (a2 < v38) {
    v20 |= 0x40u;
  }
  if (v34 < v38) {
    v20 |= 0x80u;
  }
  if (a1 < v39) {
    v20 |= 0x1000u;
  }
  if (v11 < v39) {
    v20 |= 0x2000u;
  }
  if (a2 < v40) {
    v20 |= 0x4000u;
  }
  if (v34 < v40) {
    v20 |= 0x8000u;
  }
  if (v33 < v8 && (v20 & 0x50) != 0) {
    v20 |= 0x100u;
  }
  if (v13 < v8 && (v20 & 0x60) != 0) {
    v20 |= 0x200u;
  }
  if (v14 < v8 && (v20 & 0x90) != 0) {
    v20 |= 0x400u;
  }
  if (v15 < v8 && (v20 & 0xA0) != 0) {
    v20 |= 0x800u;
  }
  float v25 = a4 / 3.0;
  BOOL v26 = v11 <= (float)(a3 / 3.0) || a1 <= (float)(a3 / 3.0);
  int v27 = v20 | 0x20000;
  if (v26) {
    int v27 = v20;
  }
  if (v34 > v25 && a2 > v25) {
    unsigned int v20 = v27;
  }
  float v29 = a4 * 0.25;
  BOOL v30 = v11 <= (float)(a3 * 0.25) || a1 <= (float)(a3 * 0.25);
  unsigned int v31 = v20 | 0x40000;
  if (v30) {
    unsigned int v31 = v20;
  }
  if (a2 <= v29) {
    unsigned int v31 = v20;
  }
  if (v34 > v29) {
    return v31;
  }
  else {
    return v20;
  }
}

float MTParserPath_::getAverageVelocity_mm_s(MTParserPath_ *this)
{
  float v1 = this->var5 * this->var5;
  float v2 = 0.5;
  float v3 = v1 * 0.5;
  if (v1 > 1.0) {
    float v3 = 0.5;
  }
  float v4 = this[1].var3.var14.x * this[1].var3.var14.x;
  if (v4 <= 1.0) {
    float v2 = v4 * 0.5;
  }
  return (float)(this[1].var3.var11 * v2) + (float)(v3 * this->var3.var14.x);
}

float MTParserPath_::updateHysteresisDragCenter_mm(float *a1, uint64_t a2)
{
  float v2 = a1[85];
  float v3 = a1[86];
  float v4 = a1[21];
  float v5 = *(float *)(a2 + 56);
  if ((float)(v4 - v2) <= v5)
  {
    if ((float)(v4 - v2) >= (float)-v5)
    {
      float v9 = a1[85];
      goto LABEL_10;
    }
    float v6 = (float)(int)(float)(v4 + v5);
    float v7 = -1.0;
  }
  else
  {
    float v6 = (float)(int)(float)(v4 - v5);
    float v7 = 1.0;
  }
  float v8 = v6 + v7;
  if (a1[45] == v6) {
    float v9 = v8;
  }
  else {
    float v9 = v6;
  }
  a1[85] = v9;
  float v5 = *(float *)(a2 + 56);
LABEL_10:
  float v10 = a1[22];
  if ((float)(v10 - v3) <= v5)
  {
    float v13 = v3;
    if ((float)(v10 - v3) >= (float)-v5) {
      return sqrtf((float)((float)(v3 - v13) * (float)(v3 - v13)) + (float)((float)(v2 - v9) * (float)(v2 - v9)));
    }
    float v11 = (float)(int)(float)(v10 + v5);
    float v12 = -1.0;
  }
  else
  {
    float v11 = (float)(int)(float)(v10 - v5);
    float v12 = 1.0;
  }
  float v13 = v11 + v12;
  if (a1[46] != v11) {
    float v13 = v11;
  }
  a1[86] = v13;
  return sqrtf((float)((float)(v3 - v13) * (float)(v3 - v13)) + (float)((float)(v2 - v9) * (float)(v2 - v9)));
}

BOOL MTParserPath_::wasFingerOrRestingContact(MTParserPath_ *this)
{
  return (LODWORD(this[1].var3.var1) - 1) < 5;
}

float MTParserPath_::getQuantizedMinorRadius_mm(MTParserPath_ *this)
{
  uint64_t v1 = 512;
  if (this[4].var3.var12 == 0.0) {
    uint64_t v1 = 80;
  }
  return *(float *)((char *)&this->var0 + v1);
}

float MTParserPath_::getQuantizedMajorRadius_mm(MTParserPath_ *this)
{
  uint64_t v1 = 516;
  if (this[4].var3.var12 == 0.0) {
    uint64_t v1 = 76;
  }
  return *(float *)((char *)&this->var0 + v1);
}

float MTParserPath_::getQuantizedRadiusAccuracy_mm(MTParserPath_ *this)
{
  return this[4].var3.var12;
}

BOOL MTParserPath_::wasFingerContact(MTParserPath_ *this)
{
  return ((this->var1 - 1000) > 0xBB7 || !BYTE2(this[4].var3.var14.y))
      && (LODWORD(this[1].var3.var1) - 1) < 5;
}

BOOL MTParserPath_::isFingerOrRestingContact(MTParserPath_ *this)
{
  uint64_t v1 = 40;
  if (this->var3.var3 == 7) {
    uint64_t v1 = 136;
  }
  return (*(_DWORD *)((char *)&this->var0 + v1) - 1) < 5;
}

BOOL MTParserPath_::isThumbAlongEdgeContact(MTParserPath_ *this)
{
  uint64_t v1 = 40;
  if (this->var3.var3 == 7) {
    uint64_t v1 = 136;
  }
  return *(_DWORD *)((char *)&this->var0 + v1) == 14;
}

uint64_t MTParserPath_::isStylusContact(MTParserPath_ *this)
{
  return (this->var3.var15 >> 12) & 1;
}

uint64_t MTParserPath_::wasStylusContact(MTParserPath_ *this)
{
  return (LOWORD(this[1].var3.var13.x) >> 12) & 1;
}

BOOL MTParserPath_::isThumbContact(MTParserPath_ *this)
{
  uint64_t v1 = 40;
  if (this->var3.var3 == 7) {
    uint64_t v1 = 136;
  }
  return *(_DWORD *)((char *)&this->var0 + v1) == 1;
}

BOOL MTParserPath_::isFingerContact(MTParserPath_ *this)
{
  if ((this->var1 - 1000) <= 0xBB7 && BYTE1(this[4].var3.var14.y)) {
    return 0;
  }
  uint64_t v2 = 40;
  if (this->var3.var3 == 7) {
    uint64_t v2 = 136;
  }
  return (*(_DWORD *)((char *)&this->var0 + v2) - 1) < 5;
}

BOOL MTParserPath_::isPalmContact(MTParserPath_ *this)
{
  uint64_t v1 = 40;
  if (this->var3.var3 == 7) {
    uint64_t v1 = 136;
  }
  return (*(_DWORD *)((char *)&this->var0 + v1) - 6) < 6;
}

BOOL MTParserPath_::isEdgeContact(MTParserPath_ *this)
{
  uint64_t v1 = 40;
  if (this->var3.var3 == 7) {
    uint64_t v1 = 136;
  }
  return (*(_DWORD *)((char *)&this->var0 + v1) - 12) < 3;
}

BOOL MTParserPath_::isUnidentifiedContact(MTParserPath_ *this)
{
  uint64_t v1 = 40;
  if (this->var3.var3 == 7) {
    uint64_t v1 = 136;
  }
  return *(_DWORD *)((char *)&this->var0 + v1) == 0;
}

uint64_t MTParserPath_::isValidEdgeStraddleClick(MTParserPath_ *this)
{
  float x = this[2].var3.var6.x;
  BOOL v2 = (LOWORD(x) & 0x3000) == 0;
  if ((LOWORD(x) & 0xC000) != 0) {
    BOOL v2 = 1;
  }
  uint64_t v3 = 40;
  if (this->var3.var3 == 7) {
    uint64_t v3 = 136;
  }
  int v4 = *(_DWORD *)((char *)&this->var0 + v3);
  if (v4 == 13)
  {
    int v5 = (LODWORD(x) >> 14) & 1;
    return v2 & v5;
  }
  if ((v4 - 12) <= 2)
  {
    int v5 = 1;
    return v2 & v5;
  }
  return 0;
}

uint64_t MTParserPath_::isValidClickSource(MTParserPath_ *this)
{
  int var3 = this->var3.var3;
  uint64_t v2 = 40;
  if (var3 == 7) {
    uint64_t v2 = 136;
  }
  int v3 = *(_DWORD *)((char *)&this->var0 + v2);
  if ((v3 - 1) < 5 || v3 == 14) {
    return (var3 - 3) < 2;
  }
  uint64_t result = MTParserPath_::isValidEdgeStraddleClick(this);
  if (result) {
    return (var3 - 3) < 2;
  }
  return result;
}

BOOL MTParserPath_::fingerLiftoffNearEdge(MTParserPath_ *this, MTSurfaceDimensions_ *a2, double a3)
{
  if ((this->var3.var3 - 3) < 2
    || (HIDWORD(this[1].var3.var0) - 3) > 1
    || (this->var1 - 1000) <= 0xBB7 && BYTE2(this[4].var3.var14.y)
    || (LODWORD(this[1].var3.var1) - 1) > 4)
  {
    return 0;
  }
  float v3 = (float)(this[4].var3.var6.y * 3.0) * a3 + 1.2;
  MTPoint v4 = (MTPoint)vcvt_f32_f64(vmlaq_n_f64(vcvtq_f64_f32(*(float32x2_t *)&this[1].var3.var2), vcvtq_f64_f32(*(float32x2_t *)&this[1].var3.var4), a3));
  float y = v4.y;
  return MTSurfaceDimensions_::minDistanceToEdge_mm(a2, v4, 1, 1) < v3;
}

uint64_t MTParserPath_::flushLiftoffAt(MTParserPath_ *this, double a2)
{
  long long v3 = *(_OWORD *)&this->var3.var8;
  *(_OWORD *)&this[1].var3.var2 = *(_OWORD *)&this->var3.var6.x;
  *(_OWORD *)&this[1].var3.var6.float x = v3;
  long long v4 = *(_OWORD *)&this->var3.var14.y;
  *(_OWORD *)&this[1].var3.var8 = *(_OWORD *)&this->var3.var12;
  *(_OWORD *)&this[1].var3.var12 = v4;
  long long v5 = *(_OWORD *)&this->var3.var2;
  *(_OWORD *)&this[1].int var0 = *(_OWORD *)&this->var3.var0;
  *(_OWORD *)&this[1].var3.int var0 = v5;
  this->var3.unsigned int var1 = a2;
  this->var3.int var3 = 7;
  *(void *)&this->int var4 = 0;
  this->var3.var15 = 0;
  *(void *)&this->var3.var8 = 0;
  MTParserPath_::updatePathStageTimestamps(this, a2);
  MTParserPath_::updateTotalDiscountedDistance(this, v6);

  return MTParserPath_::constructPathChangeEventMask(this);
}

uint64_t MTParserPath_::constructPathChangeEventMask(MTParserPath_ *this)
{
  float var8 = this->var3.var8;
  if (var8 > 0.0)
  {
    int var3 = this->var3.var3;
    if (var3 == 1) {
      goto LABEL_13;
    }
    if (this[1].var3.var6.x == 0.0) {
      goto LABEL_7;
    }
  }
  if (var8 == 0.0 && (this->var3.var3 == 7 || this[1].var3.var6.x > 0.0))
  {
LABEL_7:
    int var3 = 1;
  }
  else
  {
    int var3 = this->var3.var4;
    if (var3)
    {
      if (var3 == LODWORD(this[1].var3.var1) && this->var3.var5 == HIDWORD(this[1].var3.var1)) {
        int var3 = 0;
      }
      else {
        int var3 = 32;
      }
    }
  }
LABEL_13:
  unsigned __int16 var15 = this->var3.var15;
  unsigned int v5 = var3 & 0xFFFFD7FF | ((var15 & 1) << 11) & 0xDFFF | (((var15 >> 1) & 1) << 13);
  if ((var15 & 0x100) != 0) {
    int v6 = 134479872;
  }
  else {
    int v6 = 0x40000;
  }
  unsigned int v7 = v6 & 0xF8FFFFFF | ((((unsigned __int16)(var15 & 0x400) >> 10) & 1) << 25) & 0xFAFFFFFF | ((((unsigned __int16)(var15 & 0x200) >> 9) & 1) << 26) | ((((unsigned __int16)(var15 & 0x800) >> 11) & 1) << 24) | v5;
  if ((var15 & 4) != 0) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = v5;
  }
  int v9 = this->var3.var3;
  if (v9 < 3) {
    goto LABEL_29;
  }
  int var0_high = HIDWORD(this[1].var3.var0);
  if (var0_high < 3)
  {
    v8 |= 2u;
    if ((v9 - 3) > 1) {
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  if (v9 < 5)
  {
LABEL_27:
    if (var0_high > 4) {
      v8 |= 2u;
    }
    goto LABEL_29;
  }
  if (var0_high < 5) {
    v8 |= 2u;
  }
LABEL_29:
  if ((LOBYTE(this[3].var3.var0) || BYTE1(this[3].var3.var0))
    && (this[3].var3.var7.x != this[3].var3.var6.x || this[3].var3.var7.y != this[3].var3.var6.y))
  {
    v8 |= 4u;
    *(double *)&this[2].var3.int var4 = this->var3.var1;
  }
  if (BYTE3(this[3].var3.var0) && this->var3.var9 != this[1].var3.var6.y) {
    v8 |= 0x40u;
  }
  if ((this->var1 - 1000) <= 0xBB7 && BYTE1(this[4].var3.var14.y)) {
    v8 |= 0x200u;
  }
  uint64_t FlagsEventMaskBits = MTParserPath_::generateFlagsEventMaskBits((uint64_t)this, (uint64_t)&this->var3);
  int v12 = FlagsEventMaskBits;
  if (FlagsEventMaskBits == MTParserPath_::generateFlagsEventMaskBits(FlagsEventMaskBits, (uint64_t)&this[1]))uint64_t result = v12 | v8; {
  else
  }
    uint64_t result = v12 | v8 | 0x40;
  this[3].var2 = result;
  return result;
}

void MTParserPath_::detectSustainedHoverAtEdge(uint64_t a1, uint64_t a2, MTSurfaceDimensions_ *this)
{
  v18.float x = 4.0;
  v18.float y = 4.0;
  float v5 = MTSurfaceDimensions_::convertMillimetersToSurfaceFraction(this, v18);
  uint64_t v6 = 240;
  if (*(_DWORD *)(a1 + 36) == 2) {
    uint64_t v6 = 24;
  }
  double v7 = *(double *)(a1 + v6);
  float v8 = *(float *)(a1 + 48);
  float v9 = *(float *)(a1 + 76);
  float v10 = *(float *)(a2 + 40);
  BOOL v11 = v9 > v10 && (float)((float)(v9 - v10) / (float)(*(float *)(a2 + 44) - v10)) > 0.5;
  double v12 = v7 - *(double *)(a1 + 232);
  double v13 = v8;
  double v14 = fabs(v8);
  double v15 = fabs(v13 + -1.0);
  if (v14 < v15) {
    double v15 = v14;
  }
  float v16 = v15;
  BOOL v17 = v5 > v16;
  if (v12 <= 2.0) {
    BOOL v17 = 0;
  }
  *(unsigned char *)(a1 + 544) |= v17 && v11;
}

uint64_t MTParserPath_::computeZSignalInstability(uint64_t result, uint64_t a2, float *a3, int a4, double a5)
{
  float v6 = *(float *)(result + 64);
  float v7 = *(float *)(result + 160);
  if (v6 <= v7) {
    float v8 = *(float *)(result + 160);
  }
  else {
    float v8 = *(float *)(result + 64);
  }
  if (v8 > 0.0)
  {
    BOOL v11 = (float *)result;
    float v12 = fabsf((float)((float)(v6 - v7) * 100.0) / v8);
    if (a4) {
      float v13 = a3[4];
    }
    else {
      float v13 = 1.0;
    }
    float v14 = v13 * a3[2];
    double v15 = 0.0;
    if (v12 > v14)
    {
      float v16 = v13 * a3[3];
      double v15 = 1.0;
      if (v12 < v16) {
        double v15 = (float)((float)(v12 - v14) / (float)(v16 - v14));
      }
    }
    pow(v15, 1.5);
    float v17 = a5;
    float v18 = 0.0;
    if (v17 < 0.5) {
      float v18 = (float)(0.5 - v17) + (float)(0.5 - v17);
    }
    if (v17 > 0.0) {
      float v19 = v18;
    }
    else {
      float v19 = 1.0;
    }
    float v20 = (float)((float)(a3[7] + -1.0) * v19) + 1.0;
    float v22 = v11[19];
    float v21 = v11[20];
    float v23 = vabds_f32(v22, v11[43]);
    float v24 = vabds_f32(v21, v11[44]);
    if (v23 > v24) {
      float v24 = v23;
    }
    float v25 = v20 * a3[5];
    double v26 = 0.0;
    if (v24 > v25) {
      double v26 = (float)((float)(v24 - v25) / (float)((float)(v20 * a3[6]) - v25));
    }
    float v27 = pow(v26, 1.5);
    float v28 = v11[133];
    double v29 = 0.25;
    if (v28 >= v27)
    {
      double v29 = 0.5;
      if (v6 >= v11[134]) {
        double v29 = 0.75;
      }
    }
    float v30 = pow(v29, (*(double *)(a2 + 8) - *(double *)(a2 + 16)) / 0.00800000038);
    v11[133] = (float)((float)(1.0 - v30) * v27) + (float)(v30 * v28);
    return MTContact_getEllipseEccentricity();
  }
  return result;
}

void MTParserPath_::pullHysteresisCenterHidingUnstablePixelDeltasXY(float a1, float a2, float a3, float a4, uint64_t a5, float *a6, float *a7)
{
  float v7 = a6[1];
  float v8 = (float)(v7 * a3) * *a6;
  float v9 = (float)(v7 * a4) * *a6;
  float v10 = a7[1];
  float v11 = a1 - *a7;
  if (v11 < (float)-v8) {
    a1 = *a7 - v8;
  }
  if (v11 > v8) {
    a1 = *a7 + v8;
  }
  *a7 = a1;
  if ((float)(a2 - v10) <= v9)
  {
    if ((float)(a2 - v10) < (float)-v9) {
      a2 = v10 - v9;
    }
  }
  else
  {
    a2 = v9 + v10;
  }
  a7[1] = a2;
}

void MTParserPath_::pullHysteresisCenterCancelingEllipseTipMotion(float *a1, uint64_t a2, float *a3, MTSurfaceDimensions_ *this, float a5, int8x16_t a6, int8x16_t a7, float a8, int8x16_t a9, float a10)
{
  float v15 = *a3;
  *(float *)a7.i32 = *(float *)a7.i32 - *(float *)a9.i32;
  *(float *)v10.i32 = a8 - a10;
  if (*(unsigned char *)(a2 + 43))
  {
    *(float *)a7.i32 = *(float *)a7.i32 + a1[112];
    *(float *)v10.i32 = *(float *)v10.i32 + a1[113];
  }
  float v16 = a3[1];
  *(float *)a9.i32 = a5 - v15;
  int v17 = *(unsigned __int8 *)(a2 + 40);
  float v18 = fabsf(*(float *)a7.i32);
  if (!*(unsigned char *)(a2 + 40) || (float)(*(float *)a9.i32 * *(float *)a7.i32) < 0.0)
  {
    if (*(float *)a9.i32 <= v18)
    {
      if (*(float *)a9.i32 >= (float)-v18)
      {
        *a3 = a5;
        *(float *)a9.i32 = v18 - fabsf(*(float *)a9.i32);
        v20.i64[0] = 0x8000000080000000;
        v20.i64[1] = 0x8000000080000000;
        a9.i32[0] = vbslq_s8(v20, a9, a7).u32[0];
        goto LABEL_11;
      }
      float v19 = v15 - v18;
    }
    else
    {
      float v19 = v15 + v18;
    }
    *a3 = v19;
    a9.i32[0] = 0;
LABEL_11:
    a1[112] = *(float *)a9.i32;
  }
  float v21 = *(float *)a6.i32 - v16;
  int v22 = *(unsigned __int8 *)(a2 + 41);
  float v23 = fabsf(*(float *)v10.i32);
  if (*(unsigned char *)(a2 + 41) && (float)(v21 * *(float *)v10.i32) >= 0.0)
  {
    if (v21 != 0.0)
    {
      float v24 = *(float *)(a2 + 36);
      if (v24 >= (float)(*(float *)v10.i32 / v21)) {
        float v24 = *(float *)v10.i32 / v21;
      }
      a3[1] = v16 - (float)(v21 * v24);
    }
  }
  else
  {
    if (v21 <= v23)
    {
      if (v21 >= (float)-v23)
      {
        a3[1] = *(float *)a6.i32;
        *(float *)a6.i32 = v23 - fabsf(v21);
        v26.i64[0] = 0x8000000080000000;
        v26.i64[1] = 0x8000000080000000;
        *((_DWORD *)a1 + 113) = vbslq_s8(v26, a6, v10).u32[0];
        goto LABEL_24;
      }
      float v25 = v16 - v23;
    }
    else
    {
      float v25 = v16 + v23;
    }
    a3[1] = v25;
    a1[113] = 0.0;
  }
LABEL_24:
  float v27 = a1[22];
  float v28 = a1[94];
  if (!v17 || (float)(*(float *)a7.i32 * (float)(a1[21] - a1[93])) < 0.0)
  {
    __int32 v38 = v10.i32[0];
    float v29 = MTSurfaceDimensions_::convertPixelDeltaToMillimeters(this, v18, 0);
    v10.i32[0] = v38;
    float v30 = a1[21];
    float v31 = a1[93];
    float v32 = v30 - v31;
    if ((float)(v30 - v31) < (float)-v29) {
      float v30 = v31 - v29;
    }
    float v33 = v29 + v31;
    if (v32 > v29) {
      float v34 = v33;
    }
    else {
      float v34 = v30;
    }
    a1[93] = v34;
    int v22 = *(unsigned __int8 *)(a2 + 41);
  }
  if (!v22 || (float)(*(float *)v10.i32 * (float)(v27 - v28)) < 0.0)
  {
    float v35 = MTSurfaceDimensions_::convertPixelDeltaToMillimeters(this, v23, 1);
    float v36 = a1[22];
    float v37 = a1[94];
    if ((float)(v36 - v37) <= v35)
    {
      if ((float)(v36 - v37) < (float)-v35) {
        float v36 = v37 - v35;
      }
    }
    else
    {
      float v36 = v35 + v37;
    }
    a1[94] = v36;
  }
}

float MTParserPath_::pullHysteresisCenterCancelingEllipseTipMotionFromPressure(uint64_t a1, double a2, float a3, double a4, float a5, double a6, float a7, uint64_t a8, uint64_t a9)
{
  float v9 = *(float *)(a9 + 4);
  float v10 = a3 - v9;
  float v11 = vabds_f32(a5, a7);
  if ((float)(a5 - a7) < 0.0 && v10 > 0.0 || (float)(a5 - a7) > 0.0 && v10 < 0.0)
  {
    if (v11 <= *(float *)(a1 + 488)) {
      float v11 = *(float *)(a1 + 488);
    }
    if (v10 <= v11)
    {
      if (v10 >= (float)-v11)
      {
        *(float *)(a9 + 4) = a3;
        goto LABEL_13;
      }
      float v12 = -2.0;
    }
    else
    {
      float v12 = 2.0;
    }
    *(float *)(a9 + 4) = v9 + (float)(v11 * v12);
    MTParserPath_::pullHysteresisCenterCancelingEllipseTipMotionFromPressure(MTHMFingerTipOffsetParameters_ const&,MTPoint,MTPoint&,MTPoint,MTPoint,MTSurfaceDimensions_)::alpha = 1065353216;
  }
LABEL_13:
  float result = (float)(v11
                 * *(float *)&MTParserPath_::pullHysteresisCenterCancelingEllipseTipMotionFromPressure(MTHMFingerTipOffsetParameters_ const&,MTPoint,MTPoint&,MTPoint,MTPoint,MTSurfaceDimensions_)::alpha)
         + (1.0
          - *(float *)&MTParserPath_::pullHysteresisCenterCancelingEllipseTipMotionFromPressure(MTHMFingerTipOffsetParameters_ const&,MTPoint,MTPoint&,MTPoint,MTPoint,MTSurfaceDimensions_)::alpha)
         * *(float *)(a1 + 488);
  *(float *)(a1 + 488) = result;
  return result;
}

uint64_t MTParserPath_::applyAbsolutePixelHysteresis(MTParserPath_ *this, MTPoint a2, MTPoint *a3, MTPoint a4, float a5)
{
  float v5 = a2.x - a3->x;
  float v6 = -a5;
  if (v5 <= a5)
  {
    if (v5 >= v6)
    {
      int v10 = 0;
      goto LABEL_9;
    }
    float v7 = (float)(int)(float)(a2.x + a5);
    float v8 = -1.0;
  }
  else
  {
    float v7 = (float)(int)(float)(a2.x - a5);
    float v8 = 1.0;
  }
  float v9 = v7 + v8;
  if (a4.x == v7) {
    float v7 = v9;
  }
  a3->float x = v7;
  int v10 = 1;
LABEL_9:
  float v11 = a2.y - a3->y;
  if (v11 <= a5)
  {
    if (v11 >= v6)
    {
      int v15 = 0;
      return v10 | v15;
    }
    float v12 = (float)(int)(float)(a2.y + a5);
    float v13 = -1.0;
  }
  else
  {
    float v12 = (float)(int)(float)(a2.y - a5);
    float v13 = 1.0;
  }
  float v14 = v12 + v13;
  if (a4.y == v12) {
    float v12 = v14;
  }
  a3->float y = v12;
  int v15 = 1;
  return v10 | v15;
}

uint64_t MTParserPath_::applyAbsoluteForceHysteresis(float a1, float a2, uint64_t a3, float *a4, float *a5)
{
  float v5 = a5[30];
  float v6 = 0.0;
  if (v5 < a1)
  {
    float v7 = a5[31];
    float v6 = 1.0;
    if (v7 > a1) {
      float v6 = (float)(a1 - v5) / (float)(v7 - v5);
    }
  }
  float v8 = a5[28] + (float)((float)(a5[29] - a5[28]) * v6);
  float v9 = a1 - *a4;
  if (v9 <= v8)
  {
    if (v9 >= (float)-v8) {
      return 0;
    }
    float v10 = (float)(int)(float)(v8 + a1);
    float v11 = -1.0;
  }
  else
  {
    float v10 = (float)(int)(float)(a1 - v8);
    float v11 = 1.0;
  }
  float v12 = v10 + v11;
  if (v10 == a2) {
    float v10 = v12;
  }
  *a4 = v10;
  return 1;
}

void MTParserPath_::updateAngularHysteresisCenter(MTParserPath_ *this, float *a2, float a3, float a4)
{
  if (a4 >= 0.0)
  {
    double v6 = a4;
    double v7 = a3;
    double v8 = fmod(a3 - *(float *)&this->var0 + 3.14159265, 6.28318531);
    if (v8 < 0.0) {
      double v8 = v8 + 6.28318531;
    }
    float v9 = v8 + -3.14159265;
    if (v9 <= a4)
    {
      if (v9 >= (float)-a4) {
        return;
      }
      double v10 = v7 + v6;
    }
    else
    {
      double v10 = v7 - v6;
    }
    double v11 = fmod(v10 + 3.14159265, 6.28318531);
    if (v11 < 0.0) {
      double v11 = v11 + 6.28318531;
    }
    a3 = v11 + -3.14159265;
  }
  *(float *)&this->int var0 = a3;
}

void MTParserPath_::updateDampedVelocity(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  float v5 = *(float *)(a1 + 472);
  float v6 = *(float *)(a3 + 72);
  double v7 = *(double *)(a2 + 8) - *(double *)(a2 + 16);
  if (v7 > 0.025 || *(unsigned char *)(a3 + 101) && (*(_DWORD *)(a1 + 36) - 1) <= 2)
  {
    float v8 = *(float *)(a1 + 492) * 0.0;
    float v9 = *(float *)(a1 + 496) * 0.0;
  }
  else
  {
    float v8 = *(float *)(a1 + 492);
    if (*(_DWORD *)(a2 + 320))
    {
      float v8 = v8 * 0.5;
      float v9 = *(float *)(a1 + 496) * 0.5;
    }
    else
    {
      float v9 = *(float *)(a1 + 496);
    }
  }
  float v10 = v5 * a4;
  if (v10 >= v6) {
    float v11 = v10 - v6;
  }
  else {
    float v11 = 0.0;
  }
  float v12 = v11 / v5;
  if (v5 <= 0.0) {
    float v13 = 0.0;
  }
  else {
    float v13 = v12;
  }
  float v14 = exp2(v7 / -0.00800000038);
  float v15 = *(float *)(a1 + 96);
  float v16 = (float)((float)(1.0 - v14) * (float)(v13 * *(float *)(a1 + 92))) + (float)(v14 * v8);
  *(float *)(a1 + 492) = v16;
  float v17 = (float)((float)(1.0 - v14) * (float)(v13 * v15)) + (float)(v14 * v9);
  *(float *)(a1 + 496) = v17;
  *(float *)(a1 + 50objc_storeStrong(&location, 0) = hypotf(v16, v17);
}

float MTParserPath_::computeDivingButtonChangeInstability(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v3 = *(double *)(a2 + 8) - *(double *)(a2 + 392);
  float result = 1.0;
  if (v3 > 0.0)
  {
    float v5 = *(float *)(a3 + 88);
    float result = 0.0;
    if (v5 > v3) {
      float result = (float)(v5 - v3) / v5;
    }
  }
  int v6 = *(_DWORD *)(a1 + 32);
  if (*(unsigned char *)(a3 + 99))
  {
    int v7 = *(_DWORD *)(a2 + 400);
    BOOL v8 = v6 == v7;
    if (*(_DWORD *)(a2 + 372) == 1) {
      BOOL v8 = 0;
    }
    int v9 = *(unsigned __int8 *)(a2 + 360);
    if (v6 != v7) {
      BOOL v8 = 1;
    }
    BOOL v14 = v9 == 0;
    BOOL v10 = v9 == 0;
    uint64_t v11 = *(void *)(a2 + 344);
    double v12 = 0.5;
    double v13 = 0.25;
    if (!v14)
    {
      double v13 = 0.5;
      double v12 = 1.0;
    }
    BOOL v14 = v11 == 0;
    if (v11) {
      int v15 = v8;
    }
    else {
      int v15 = 1;
    }
    float v16 = v13 * result;
    if (!v14) {
      BOOL v8 = 1;
    }
    if (!v15) {
      float result = v16;
    }
    float v17 = v12 * result;
    if (!v8) {
      float result = v17;
    }
    if (v6 != v7) {
      return dbl_1114F0[v10] * result;
    }
  }
  else if (v6 != *(_DWORD *)(a2 + 376))
  {
    return result * 0.15;
  }
  return result;
}

void MTParserPath_::isStuckOnDivingRegion(MTParserPath_ *this, MTSurfaceDimensions_ **a2)
{
  if (this->var3.var2 == *((_DWORD *)a2 + 94)
    && *((_DWORD *)a2 + 91) == 1
    && !(*((_DWORD *)a2 + 93) - 1 + *((_DWORD *)a2 + 92)))
  {
    if (((int var4 = this->var3.var4, !*((_DWORD *)a2 + 102)) || *((int *)a2 + 103) <= 2)
      && (*((unsigned char *)a2 + 28) & 0x80) == 0
      || var4 == 1)
    {
      float v5 = this->var3.var13.x - *(float *)&this[3].var3.var3;
      float v6 = (float)(this->var3.var13.y - *(float *)&this[3].var3.var4)
         * (float)(this->var3.var13.y - *(float *)&this[3].var3.var4);
      v18.float x = this->var3.var6.x;
      v18.float y = 1.0 - this->var3.var6.y;
      MTSurfaceDimensions_::convertSurfaceFractionToMillimeters(a2[5], v18);
      float v8 = v7;
      float ThumbRestingOrPolarZoneHeight = MTPathStates_::getThumbRestingOrPolarZoneHeight((MTPathStates_ *)a2);
      float v10 = 1.0;
      if (v8 > 0.0)
      {
        float v10 = 0.0;
        if (v8 < ThumbRestingOrPolarZoneHeight) {
          float v10 = (float)(ThumbRestingOrPolarZoneHeight - v8) / ThumbRestingOrPolarZoneHeight;
        }
      }
      float v11 = 0.0;
      if (var4 == 1) {
        float v11 = 1.0;
      }
      float v12 = v10 * v11;
      float var11 = this->var3.var11;
      if (var11 <= 8.0)
      {
        if (v12 <= 0.0) {
          float v12 = 0.0;
        }
      }
      else if (var11 >= 13.0)
      {
        if (v12 <= 1.0) {
          float v12 = 1.0;
        }
      }
      else
      {
        float v14 = (float)(var11 + -8.0) / 5.0;
        if (v12 <= v14) {
          float v12 = v14;
        }
      }
      float v15 = (float)(v10 * 6.0) * v12;
      float v16 = v15 + 0.2;
      if (!*((unsigned char *)a2 + 360)) {
        float v16 = v15;
      }
      if (v16 > 0.0 && (float)(v6 + (float)(v5 * v5)) < (float)(v16 * v16)) {
        pow((float)(v16 * 0.5), 1.5);
      }
    }
  }
}

MTParserPath_ *MTParserPath_::setPathSpeedSymmetries(MTParserPath_ *this, float a2, float a3)
{
  this[4].int var4 = a2;
  this[4].var5 = a3;
  float v3 = fabsf(a2);
  if (v3 < a3) {
    float v3 = a3;
  }
  if (v3 < *(float *)&this[5].var0) {
    float v3 = *(float *)&this[5].var0;
  }
  *(float *)&this[5].int var0 = v3;
  return this;
}

double MTParserPath_::clearPathSpeedSymmetries(MTParserPath_ *this)
{
  double result = 0.0;
  *(void *)&this[4].int var4 = 0;
  LODWORD(this[5].varobjc_storeStrong(&location, 0) = 0;
  return result;
}

void MTParserPath_::measureInstability(uint64_t a1, uint64_t a2, uint64_t a3, float *a4)
{
  double v8 = *(double *)(a1 + 24) - *(double *)(a1 + 216);
  if ((*(_DWORD *)(a1 + 8) - 1000) >= 0xBB8)
  {
    float v10 = *(float *)(a1 + 76);
    double v14 = (*(double *)(a2 + 8) - *(double *)(a2 + 16)) / 0.00800000038;
    float v16 = 0.0;
  }
  else
  {
    float32x2_t v35 = *(float32x2_t *)(a1 + 84);
    float v9 = hypotf(v35.f32[0] - *(float *)(a1 + 360), v35.f32[1] - *(float *)(a1 + 364));
    if (v9 > *(float *)(a1 + 368)) {
      *(float *)(a1 + 368) = v9;
    }
    float v10 = *(float *)(a1 + 76);
    double v11 = 0.0;
    double v12 = 1.0;
    if (v10 < 16.0) {
      double v12 = (float)((float)(v10 + -8.0) * 0.125);
    }
    if (v10 > 8.0) {
      double v11 = v12;
    }
    float v13 = v11 * -0.1 + 0.9;
    double v14 = (*(double *)(a2 + 8) - *(double *)(a2 + 16)) / 0.00800000038;
    float v15 = pow(v13, v14);
    *(float32x2_t *)(a1 + 372) = vmla_n_f32(vmul_n_f32(v35, 1.0 - v15), *(float32x2_t *)(a1 + 372), v15);
    float v16 = 0.0;
    if ((*(unsigned char *)(a2 + 28) & 2) != 0) {
      float v16 = MTParserPath_::computeDivingButtonChangeInstability(a1, a2, a3);
    }
  }
  float v17 = dbl_111500[v8 > *(float *)(a3 + 92)];
  float v18 = pow(v17, v14);
  float v19 = 1.0;
  *(float *)(a1 + 536) = (float)(*(float *)(a1 + 64) * (float)(1.0 - v18)) + (float)(v18 * *(float *)(a1 + 536));
  float v20 = pow(0.949999988, v14);
  *(float *)(a1 + 54objc_storeStrong(&location, 0) = (float)((float)(1.0 - v20) * v10) + (float)(v20 * *(float *)(a1 + 540));
  MTParserPath_::computeZSignalInstability(a1, a2, (float *)a3, *(unsigned __int8 *)(a1 + 352), v8);
  float v22 = v21;
  float v23 = 0.0;
  if (!*(unsigned char *)(a1 + 352))
  {
    float v24 = v8;
    if (v24 <= 0.0)
    {
      float v26 = 0.2;
    }
    else
    {
      float v25 = *(float *)(a3 + 84);
      float v26 = 0.0;
      float v19 = 0.0;
      if (v25 > v24) {
        float v19 = (float)(v25 - v24) / v25;
      }
      float v27 = *(float *)(a3 + 88);
      if (v27 > v24) {
        float v26 = (float)((float)(v27 - v24) / v27) * 0.2;
      }
    }
    if (v19 <= v26) {
      float v23 = v26;
    }
    else {
      float v23 = v19;
    }
    float v28 = MTLoggingPlugin();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      int v34 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)buf = 67109888;
      int v37 = v34;
      __int16 v38 = 2048;
      double v39 = v22;
      __int16 v40 = 2048;
      double v41 = v23;
      __int16 v42 = 2048;
      double v43 = v8;
      _os_log_debug_impl(&def_411C8, v28, OS_LOG_TYPE_DEBUG, "\tDHML:  P%d Wating for slide, ZInstability=%f, TimeInstability=%f (from dtstart=%lfs)", buf, 0x26u);
    }
  }
  float v29 = 0.0;
  if ((*(_DWORD *)(a1 + 8) - 1000) <= 0xBB7)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) != 0 && !*(unsigned char *)(a1 + 354)) {
      MTParserPath_::isStuckOnDivingRegion((MTParserPath_ *)a1, (MTSurfaceDimensions_ **)a2);
    }
    if ((*(_DWORD *)(a2 + 24) - 1000) <= 0x3E7)
    {
      uint64_t v30 = 40;
      if (*(_DWORD *)(a1 + 36) == 7) {
        uint64_t v30 = 136;
      }
      if ((*(_DWORD *)(a1 + v30) | 4) == 5 && *(int *)(a2 + 372) >= 5 && !*(unsigned char *)(a1 + 352))
      {
        int v31 = MTPathStates_::numFingerSlidWhileEngaged((MTPathStates_ *)a2);
        float v29 = v31 >= 3 ? 0.0 : 0.3;
        if (v31 < 3) {
          float v16 = v16 + v16;
        }
      }
    }
    if (*(unsigned char *)(a3 + 100)
      && !*(unsigned char *)(a1 + 352)
      && *(int *)(a2 + 372) >= 5
      && (int)MTPathStates_::numFingerSlidWhileEngaged((MTPathStates_ *)a2) >= 3)
    {
      float v22 = v22 * 0.5;
      float v23 = v23 * 0.5;
    }
  }
  if (a4)
  {
    if (v22 <= v29) {
      float v32 = v29;
    }
    else {
      float v32 = v22;
    }
    if (v23 <= v16) {
      float v33 = v16;
    }
    else {
      float v33 = v23;
    }
    if (v32 <= v33) {
      float v32 = v33;
    }
    *a4 = v32;
  }
}

void MTParserPath_::filterContactForScreenUI(uint64_t a1, uint64_t x1_0, MTSurfaceDimensions_ *this, uint64_t a4, int *a5, int8x16_t a6, double a7, int8x16_t a8, int8x16_t a9)
{
  uint64_t v14 = a1 + 16;
  v77.float x = mthm_ComputeFingerEllipseTipOffset_mm(a5, this, (float32x2_t *)(a1 + 16), (float *)(a1 + 112), a6, a7, a8, a9);
  *(float *)&uint64_t v15 = MTSurfaceDimensions_::convertMillimetersToPixels(this, v77);
  v67.i64[0] = v15;
  float v68 = v16;
  if (*((unsigned char *)a5 + 52))
  {
    mthm_ComputeFingerEllipseTipOffsetFromPressure_mm((uint64_t)a5, (uint64_t)this, v14);
    float v17 = MTSurfaceDimensions_::convertMillimetersToPixels(this, v78);
    float v19 = v18;
  }
  else
  {
    float v19 = 0.0;
    float v17 = 0.0;
  }
  float v20 = MTSurfaceDimensions_::convertSurfaceFractionToPixels(this, *(MTPoint *)(a1 + 48));
  float v22 = v21;
  float v75 = 0.0;
  int v23 = *(_DWORD *)(a1 + 36);
  BOOL v24 = v23 < 3
     || !*(_DWORD *)(a1 + 132)
     || v23 >= 5 && *(unsigned char *)(a1 + 352)
     || v23 == 3 && *(unsigned char *)(a4 + 101) != 0;
  if (*(unsigned char *)(a4 + 98))
  {
    MTParserPath_::detectSustainedHoverAtEdge(a1, a4, this);
    BOOL v24 = (*(unsigned __int8 *)(a1 + 544) | v24) != 0;
  }
  *(void *)(a1 + 52objc_storeStrong(&location, 0) = *(void *)(a1 + 512);
  MTParserPath_::correctAndQuantizeRadius(a1, a4);
  int v29 = *(unsigned __int8 *)(a4 + 80);
  if (*(unsigned char *)(a4 + 80)) {
    int v29 = *(float *)(a1 + 56) == 0.0 && *(float *)(a1 + 60) == 0.0;
  }
  float v30 = *(float *)(a4 + 76);
  if (v30 <= 0.0 || (!*(unsigned char *)(a1 + 352) ? (int v31 = 1) : (int v31 = v24), ((v31 | v29) & 1) != 0))
  {
    BOOL v32 = 0;
  }
  else
  {
    double v27 = *(double *)(a1 + 264);
    *(double *)v26.i64 = *(double *)(a1 + 24) - v27;
    BOOL v32 = *(double *)v26.i64 > v30;
  }
  if (((v24 | v29) & 1) == 0 && !v32)
  {
    if (*(unsigned char *)(a4 + 97))
    {
      v28.i32[0] = *(_DWORD *)(a1 + 440);
      float v33 = *(float *)(a1 + 444);
      uint64_t v72 = off_141DA8;
      long long v73 = *(_OWORD *)((char *)this + 8);
      long long v74 = *(_OWORD *)((char *)this + 24);
      *(float *)v26.i32 = v22;
      MTParserPath_::pullHysteresisCenterCancelingEllipseTipMotion((float *)a1, (uint64_t)a5, (float *)(a1 + 400), (MTSurfaceDimensions_ *)&v72, v20, v26, v67, v68, v28, v33);
      MTSurfaceDimensions_::~MTSurfaceDimensions_((MTSurfaceDimensions_ *)&v72);
    }
    if (*((unsigned char *)a5 + 52))
    {
      v28.i32[0] = *(_DWORD *)(a1 + 476);
      float v34 = *(float *)(a1 + 480);
      long long v69 = off_141DA8;
      long long v35 = *(_OWORD *)((char *)this + 24);
      long long v70 = *(_OWORD *)((char *)this + 8);
      long long v71 = v35;
      *(float *)&long long v35 = v20;
      *(float *)&double v27 = v17;
      MTParserPath_::pullHysteresisCenterCancelingEllipseTipMotionFromPressure(a1, *(double *)&v35, v22, v27, v19, *(double *)v28.i64, v34, v25, a1 + 400);
      MTSurfaceDimensions_::~MTSurfaceDimensions_((MTSurfaceDimensions_ *)&v69);
    }
    MTParserPath_::measureInstability(a1, x1_0, a4, &v75);
    float v37 = v36;
    MTParserPath_::pullHysteresisCenterHidingUnstablePixelDeltasXY(v20, v22, v37, v37, v38, (float *)a4, (float *)(a1 + 400));
    float32x2_t v39 = *(float32x2_t *)(a1 + 400);
    v79.float x = v20;
    v79.float y = v22;
    uint64_t v41 = MTParserPath_::applyAbsolutePixelHysteresis(v40, v79, (MTPoint *)(a1 + 400), *(MTPoint *)(a1 + 144), *(float *)(a4 + 56));
    char v42 = *(unsigned char *)(a1 + 352) | v41;
    *(unsigned char *)(a1 + 352) = v42;
    if (*(unsigned char *)(a1 + 545)) {
      char v43 = 0;
    }
    else {
      char v43 = *(unsigned char *)(a1 + 354) | v41;
    }
    *(unsigned char *)(a1 + 354) = v43;
    *(unsigned char *)(a1 + 353) = v42;
    MTParserPath_::pullHysteresisCenterHidingUnstablePixelDeltasXY(v20, v22, v75, v75, v41, (float *)a4, (float *)(a1 + 408));
    v80.float x = v20;
    v80.float y = v22;
    uint64_t v47 = MTParserPath_::applyAbsolutePixelHysteresis(v46, v80, (MTPoint *)(a1 + 408), *(MTPoint *)(a1 + 144), *(float *)(a4 + 56));
    *(unsigned char *)(a1 + 353) |= v47;
    if (*((unsigned char *)a5 + 42))
    {
      float v48 = (float)(int)*(float *)(a1 + 416);
      float v49 = (float)(int)*(float *)(a1 + 420);
      MTParserPath_::pullHysteresisCenterHidingUnstablePixelDeltasXY(*(float *)v67.i32, v68, v37, v37, v47, (float *)a4, (float *)(a1 + 416));
      LODWORD(v81.x) = v67.i32[0];
      v81.float y = v68;
      v83.float x = v48;
      v83.float y = v49;
      uint64_t v47 = MTParserPath_::applyAbsolutePixelHysteresis(v50, v81, (MTPoint *)(a1 + 416), v83, *(float *)(a4 + 56));
    }
    float32x2_t v51 = *(float32x2_t *)(a1 + 400);
    float32x2_t v52 = vsub_f32(v51, v39);
    float32x2_t v53 = vadd_f32(v52, *(float32x2_t *)(a1 + 432));
    *(float32x2_t *)(a1 + 424) = v52;
    *(float32x2_t *)(a1 + 432) = v53;
    if (*(unsigned char *)(a1 + 352) || *(unsigned char *)(a1 + 353))
    {
      *(void *)(a1 + 392) = *(void *)(a1 + 384);
      *(float32x2_t *)(a1 + 384) = vcvt_f32_s32(vcvt_s32_f32(v51));
    }
    goto LABEL_72;
  }
  *(float *)(a1 + 40objc_storeStrong(&location, 0) = v20;
  *(float *)(a1 + 404) = v22;
  *(float *)(a1 + 408) = v20;
  *(float *)(a1 + 412) = v22;
  *(void *)(a1 + 392) = *(void *)(a1 + 384);
  *(float *)(a1 + 384) = (float)(int)v20;
  *(float *)(a1 + 388) = (float)(int)v22;
  if (*((unsigned char *)a5 + 42))
  {
    *(_DWORD *)(a1 + 416) = v67.i32[0];
    *(float *)(a1 + 42objc_storeStrong(&location, 0) = v68;
  }
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 536) = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(a1 + 54objc_storeStrong(&location, 0) = *(_DWORD *)(a1 + 76);
  unsigned int v44 = *(_DWORD *)(a1 + 8) - 1000;
  if (v44 <= 0xBB7)
  {
    uint64_t v45 = *(void *)(a1 + 84);
    *(void *)(a1 + 372) = v45;
    *(void *)(a1 + 36objc_storeStrong(&location, 0) = v45;
  }
  if (!*((unsigned char *)a5 + 43))
  {
LABEL_37:
    if (v24) {
      goto LABEL_38;
    }
    goto LABEL_53;
  }
  if ((v24 | v29) == 1)
  {
    *(void *)(a1 + 448) = 0;
    *(void *)(a1 + 484) = 0;
    goto LABEL_37;
  }
  *(float32x2_t *)(a1 + 448) = vadd_f32(*(float32x2_t *)(a1 + 448), vsub_f32((float32x2_t)__PAIR64__(LODWORD(v68), v67.u32[0]), *(float32x2_t *)(a1 + 440)));
  if (v24)
  {
LABEL_38:
    *(_WORD *)(a1 + 352) = 0;
    *(unsigned char *)(a1 + 354) = 0;
    if (v44 <= 0xBB7)
    {
      *(_DWORD *)(a1 + 368) = 0;
      *(_WORD *)(a1 + 548) = 0;
    }
    goto LABEL_62;
  }
LABEL_53:
  if (!v32) {
    goto LABEL_63;
  }
  if (v44 > 0xBB7)
  {
    *(_WORD *)(a1 + 352) = 0;
    *(unsigned char *)(a1 + 354) = 0;
  }
  else
  {
    uint64_t v55 = 40;
    if (*(_DWORD *)(a1 + 36) == 7) {
      uint64_t v55 = 136;
    }
    if (*(_DWORD *)(a1 + v55) == 1 && *(int *)(x1_0 + 412) >= 2 && *(int *)(x1_0 + 372) > 1) {
      goto LABEL_63;
    }
    *(_WORD *)(a1 + 352) = 0;
    *(unsigned char *)(a1 + 354) = 0;
    *(_DWORD *)(a1 + 368) = 0;
  }
LABEL_62:
  *(unsigned char *)(a1 + 545) = 0;
LABEL_63:
  if (*(int *)(a1 + 40) <= 5 && *(int *)(a1 + 136) < 6)
  {
    CFIndex v57 = MTLoggingPlugin();
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
    {
      int v58 = *(_DWORD *)(a1 + 32);
      uint64_t v59 = MTGetPathStageName();
      MTParserPath_::filterContactForScreenUI(v59, buf, v58, v57);
    }
  }
  else
  {
    int v56 = MTLoggingPlugin();
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG)) {
      MTParserPath_::filterContactForScreenUI(a1, (int *)(a1 + 40), v56);
    }
  }
  float v37 = 0.0;
LABEL_72:
  *(unsigned char *)(a1 + 355) = MTParserPath_::applyAbsoluteForceHysteresis(*(float *)(a1 + 68), *(float *)(a1 + 164), v47, (float *)(a1 + 356), (float *)a4);
  *(float *)(a1 + 68) = (float)(int)*(float *)(a1 + 356);
  *(_DWORD *)(a1 + 44objc_storeStrong(&location, 0) = v67.i32[0];
  *(float *)(a1 + 444) = v68;
  if (*((unsigned char *)a5 + 52))
  {
    *(float *)(a1 + 476) = v17;
    *(float *)(a1 + 48objc_storeStrong(&location, 0) = v19;
  }
  v82.float y = *(float *)(a1 + 60);
  *(float32x2_t *)(a1 + 48) = vcvt_f32_s32(vcvt_s32_f32(*(float32x2_t *)(a1 + 400)));
  v82.float x = *(float *)(a1 + 56);
  *(float *)(a1 + 56) = MTSurfaceDimensions_::convertSurfaceFractionVelocityToPixelsPerSecond(this, v82);
  *(_DWORD *)(a1 + 6objc_storeStrong(&location, 0) = v60;
  *(void *)(a1 + 464) = *(void *)(a1 + 56);
  *(float *)(a1 + 472) = hypotf(*(float *)(a1 + 92), *(float *)(a1 + 96));
  if (*(unsigned char *)(a4 + 101) && (*(_DWORD *)(a1 + 36) - 1) <= 2)
  {
    *(void *)(a1 + 464) = 0;
    *(_DWORD *)(a1 + 472) = 0;
  }
  float v61 = 1.0 - v37;
  if ((float)(1.0 - v37) < 0.0) {
    float v61 = 0.0;
  }
  MTParserPath_::updateDampedVelocity(a1, x1_0, a4, v61);
  float v63 = *(float *)(a4 + 64);
  if (v63 >= 0.0)
  {
    float v64 = v63 * 0.0174532925;
    MTParserPath_::updateAngularHysteresisCenter((MTParserPath_ *)(a1 + 456), v62, *(float *)(a1 + 104), v64);
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(a1 + 456);
  }
  float v65 = *(float *)(a4 + 68);
  if (v65 >= 0.0)
  {
    float v66 = v65 * 0.0174532925;
    MTParserPath_::updateAngularHysteresisCenter((MTParserPath_ *)(a1 + 460), v62, *(float *)(a1 + 72), v66);
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 460);
  }
}

void sub_53C68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void MTParserPath_::correctAndQuantizeRadius(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 102))
  {
    unsigned int v3 = *(_DWORD *)(a1 + 36) - 1;
    if (v3 <= 5 && (*(_DWORD *)(a1 + 132) - 1) >= 6)
    {
      _D1 = (float32x2_t)vrev64_s32(*(int32x2_t *)(a1 + 76));
    }
    else
    {
      __asm { FMOV            V2.2D, #0.5 }
      int8x16_t v9 = (int8x16_t)vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 76)), _Q2);
      _D1 = vcvt_f32_f64(vmlaq_f64((float64x2_t)vextq_s8(v9, v9, 8uLL), _Q2, vcvtq_f64_f32(*(float32x2_t *)(a1 + 504))));
    }
    *(float32x2_t *)(a1 + 504) = _D1;
    float v12 = 0.0;
    float v13 = 0.0;
    if (v3 <= 3)
    {
      _S0 = *(float *)(a2 + 104);
      __asm { FMLA            S3, S0, V1.S[1]; float }
      float v16 = fmaxf(_S3, 2.0);
      float v17 = vmlas_n_f32(*(float *)(a2 + 108), _S0, _D1.f32[0]);
      float v12 = _QuantizedRadius(fmaxf(v17, 2.0), *(float *)(a1 + 520), v17, _S3);
      float v13 = _QuantizedRadius(v16, *(float *)(a1 + 524), v18, v19);
    }
    *(float *)(a1 + 512) = v12;
    *(float *)(a1 + 516) = v13;
    float v11 = 1.0;
  }
  else
  {
    float v11 = 0.0;
  }
  *(float *)(a1 + 528) = v11;
}

float _QuantizedRadius(float a1, float a2, float a3, float a4)
{
  if (a1 == 0.0) {
    return 0.0;
  }
  if (a1 >= 2.0) {
    float v6 = a1;
  }
  else {
    float v6 = 2.0;
  }
  int v7 = (int)(float)((float)(v6 + -2.0) * 0.5);
  double v8 = fmodf(v6 + -2.0, 2.0);
  if (v6 <= a2 || v8 <= 1.334)
  {
    BOOL v10 = v6 < a2;
    if (v8 <= 0.666) {
      BOOL v10 = 0;
    }
    int v9 = v10 + v7;
  }
  else
  {
    int v9 = v7 + 1;
  }
  return (float)((float)v9 * 2.0) + 2.0;
}

BOOL MTParserPath_::stableAndMoved(MTParserPath_ *this)
{
  if (!LOBYTE(this[3].var3.var0) && !BYTE1(this[3].var3.var0)) {
    return 0;
  }
  if (this[3].var3.var7.x == this[3].var3.var6.x) {
    return this[3].var3.var7.y != this[3].var3.var6.y;
  }
  return 1;
}

uint64_t MTParserPath_::generateFlagsEventMaskBits(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int16 *)(a2 + 84);
  unsigned int v3 = v2 & 0xFE7;
  if ((v2 & 0x100) != 0) {
    int v4 = 134479872;
  }
  else {
    int v4 = 0x40000;
  }
  if (v3 >= 0x800) {
    int v5 = (v3 << 15) & 0x2000000 | ((((unsigned __int16)(v2 & 0xFE7) >> 9) & 1) << 26) | v4 | (v2 << 12) & 0x2000 | ((v2 & 1) << 11) | 0x1000000;
  }
  else {
    int v5 = (v3 << 15) & 0x2000000 | ((((unsigned __int16)(v2 & 0xFE7) >> 9) & 1) << 26) | v4 | (v2 << 12) & 0x2000 | ((v2 & 1) << 11);
  }
  if ((v2 & 4) == 0) {
    int v5 = (v2 << 12) & 0x2000 | ((v2 & 1) << 11);
  }
  return v5 | (v2 << 8) & 0xC000u;
}

void __cxx_global_var_init_28()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_27(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_currentTimestamp", a2);
  }
}

void __cxx_global_var_init_3_27(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_previousTimestamp", a2);
  }
}

void __cxx_global_var_init_4_27(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)114,(char)101,(char)108,(char)101,(char)97,(char)115,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_release", a2);
  }
}

void __cxx_global_var_init_5_27(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)97,(char)99,(char)116,(char)105,(char)118,(char)97,(char)116,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_activation", a2);
  }
}

void __cxx_global_var_init_6_27(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)101,(char)97,(char)114,(char)108,(char)105,(char)101,(char)115,(char)116,(char)78,(char)111,(char)110,(char)68,(char)105,(char)118,(char)105,(char)110,(char)103,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_earliestNonDivingTimestamp", a2);
  }
}

void __cxx_global_var_init_7_27(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)100,(char)105,(char)118,(char)105,(char)110,(char)103,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)67,(char)104,(char)97,(char)110,(char)103,(char)101,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_divingButtonChangeTimestamp", a2);
  }
}

void __cxx_global_var_init_8_28(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)105,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_min", a2);
  }
}

void __cxx_global_var_init_9_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_max", a2);
  }
}

void __cxx_global_var_init_10_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)66,(char)114,(char)101,(char)97,(char)107,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerBreakTouch_max", a2);
  }
}

uint64_t MTPathStates_::MTPathStates_(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, char a5, int a6)
{
  unsigned int v11 = a4;
  v12[0] = a3;
  *(void *)a1 = off_1417F0;
  *(_DWORD *)(a1 + 24) = a3;
  *(_DWORD *)(a1 + 28) = a4;
  *(unsigned char *)(a1 + 32) = a5;
  *(_DWORD *)(a1 + 36) = a6;
  *(void *)(a1 + 4objc_storeStrong(&location, 0) = a2;
  int v7 = (uint64_t *)(a1 + 280);
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 28objc_storeStrong(&location, 0) = 0;
  MTRestZoneIntegrator_::MTRestZoneIntegrator_(a1 + 512);
  std::vector<MTParserPath_>::reserve(v7, 0x20uLL);
  unint64_t v8 = *(void *)(a1 + 288);
  int v9 = 32;
  do
  {
    if (v8 >= *(void *)(a1 + 296))
    {
      unint64_t v8 = std::vector<MTParserPath_>::__emplace_back_slow_path<MTParserType const&,MTParserOptions const&>(v7, v12, &v11);
    }
    else
    {
      MTParserPath_::MTParserPath_(v8, v12[0], v11);
      v8 += 568;
      *(void *)(a1 + 288) = v8;
    }
    *(void *)(a1 + 288) = v8;
    --v9;
  }
  while (v9);
  MTPathStates_::clear((MTPathStates_ *)a1);
  MTPathStates_::initializeParams((MTPathStates_ *)a1);
  MTPathStates_::updateSurfaceDimensions((MTPathStates_ *)a1);
  *(void *)(a1 + 344) = 0;
  return a1;
}

void sub_54240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<MTParserPath_>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<MTParserPath_>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x193D4BB7E327A977 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x73615A240E6C2CLL) {
      std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<MTParserPath_>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 568 * v6;
    std::vector<MTParserPath_>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<MTParserPath_>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_54324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<MTParserPath_>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void MTPathStates_::clear(MTPathStates_ *this)
{
  uint64_t v2 = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  uint64_t v3 = 32;
  do
  {
    MTParserPath_::clear((MTParserPath_ *)(*((void *)this + 35) + v2));
    v2 += 568;
    --v3;
  }
  while (v3);
  *((_WORD *)this + 18objc_storeStrong(&location, 0) = 0;
  *((_DWORD *)this + 105) = 0;
  *((unsigned char *)this + 436) = 0;
  *((unsigned char *)this + 484) = 0;
  *((void *)this + 38) = 0;
  *((void *)this + 39) = 0;
  *(void *)((char *)this + 372) = 0;
  *(void *)((char *)this + 364) = 0;
  *((void *)this + 48) = 0;
  *((void *)this + 49) = 0;
  *((_DWORD *)this + 10objc_storeStrong(&location, 0) = 0;
  *((void *)this + 51) = 0;
  *((unsigned char *)this + 416) = 0;
  *((void *)this + 59) = 0;
  *(_OWORD *)((char *)this + 44objc_storeStrong(&location, 0) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *((_DWORD *)this + 12objc_storeStrong(&location, 0) = 0;
  *((void *)this + 62) = 0;
  *((void *)this + 63) = 0;
  *((void *)this + 61) = 0x7FF0000000000000;

  MTRestZoneIntegrator_::clear((float32x2_t *)this + 64);
}

double MTPathStates_::initializeParams(MTPathStates_ *this)
{
  MTParameterFactory_::initFingerTipOffsetParams((uint64_t)this + 180, *((_DWORD *)this + 6), *((_DWORD *)this + 7), *((unsigned __int8 *)this + 32));
  MTParameterFactory_::initPathFilterParams((uint64_t)this + 48, *((_DWORD *)this + 6), *((_DWORD *)this + 7), *((unsigned __int8 *)this + 32), *((MTSurfaceDimensions_ **)this + 5), *((_DWORD *)this + 9));
  MTParameterFactory_::initTouchZoneParams((uint64_t)this + 244, *((_DWORD *)this + 6), *((unsigned int *)this + 7), *((unsigned __int8 *)this + 32));

  return MTParameterFactory_::initForceFilterParams((MTPathStates_ *)((char *)this + 328));
}

float MTPathStates_::updateSurfaceDimensions(MTPathStates_ *this)
{
  v8.float x = 0.0;
  v8.float y = 0.0;
  MTSurfaceDimensions_::convertSurfaceFractionToMillimeters(*((MTSurfaceDimensions_ **)this + 5), v8);
  *((float *)this + 108) = v2;
  float v3 = v2 / 76.0;
  float v4 = sqrtf(v2 / 76.0);
  if (v3 < 1.0) {
    float v3 = v4;
  }
  *((float *)this + 107) = v3;
  *((float *)this + 106) = v3 * 12.0;
  uint64_t v5 = (MTSurfaceDimensions_ *)*((void *)this + 5);

  return MTParameterFactory_::updatePathFilterParamsWithNewSurfaceDimensions((uint64_t)this + 48, v5);
}

void MTPathStates_::~MTPathStates_(MTPathStates_ *this)
{
  *(void *)this = off_1417F0;
  MTRestZoneIntegrator_::~MTRestZoneIntegrator_((MTRestZoneIntegrator_ *)((char *)this + 512));
  float v2 = (void **)((char *)this + 280);
  std::vector<MTParserPath_>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;

  *(void *)this = off_1417F0;
  MTRestZoneIntegrator_::~MTRestZoneIntegrator_((MTRestZoneIntegrator_ *)((char *)this + 512));
  float v2 = (void **)((char *)this + 280);
  std::vector<MTParserPath_>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete();
}

void MTPathStates_::clearExistingPathLiftoffsAndMasks(MTPathStates_ *this)
{
  uint64_t v2 = 0;
  uint64_t v3 = *((void *)this + 35);
  uint64_t v4 = 32;
  do
  {
    if (*(_DWORD *)(v3 + v2 + 36) == 7)
    {
      MTParserPath_::clear((MTParserPath_ *)(v3 + v2));
      uint64_t v3 = *((void *)this + 35);
    }
    *(_DWORD *)(v3 + v2 + 348) = 0;
    v2 += 568;
    --v4;
  }
  while (v4);
}

void MTPathStates_::updateFastestFingerSpeed(MTPathStates_ *this)
{
  uint64_t v2 = (float *)((char *)this + 304);
  *((void *)this + 38) = 0;
  *((void *)this + 39) = 0;
  float v3 = 0.0;
  uint64_t v4 = 1;
  uint64_t v5 = 1068;
  float v6 = 0.0;
  float v7 = 0.0;
  float v8 = 0.0;
  float v9 = 0.0;
  float v10 = 0.0;
  do
  {
    uint64_t v11 = *((void *)this + 35);
    if (v4 == *(_DWORD *)(v11 + v5 - 468)
      && *(float *)(v11 + v5 - 436) > 0.0
      && MTParserPath_::isFingerContact((MTParserPath_ *)(v11 + v5 - 500))
      && (*(_DWORD *)(v11 + v5 - 464) - 3) <= 2)
    {
      float v13 = *(float *)(v11 + v5 - 4);
      float v12 = *(float *)(v11 + v5);
      float v14 = *(float *)(v11 + v5 - 8);
      float v6 = v6 + v12;
      float v3 = v3 + (float)(v12 * v12);
      float v9 = v9 + fabsf(v14);
      float v8 = v8 + fabsf(v13);
      float v7 = v7 + (float)(v14 * v14);
      float v10 = v10 + (float)(v13 * v13);
      float v15 = hypotf(*(float *)(v11 + v5 - 408), *(float *)(v11 + v5 - 404));
      if (v15 > *((float *)this + 79)) {
        *((float *)this + 79) = v15;
      }
    }
    ++v4;
    v5 += 568;
  }
  while (v4 != 32);
  if (v6 > 0.0) {
    float *v2 = v3 / v6;
  }
  if (v9 > 0.0) {
    *((float *)this + 77) = v7 / v9;
  }
  if (v8 > 0.0) {
    *((float *)this + 78) = v10 / v8;
  }
}

MTPathStates_ *MTPathStates_::expandAndFilterPackedContacts(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *(_DWORD *)(a1 + 32objc_storeStrong(&location, 0) = 0;
  if (a2)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v6 = *(void *)(a1 + 280);
      uint64_t v7 = a2;
      uint64_t v8 = a3;
      do
      {
        int v9 = *(_DWORD *)(v7 + 16);
        MTParserPath_::updateCurPrevContactsWith((MTParserPath_ *)(v6 + 568 * v9), (_OWORD *)v7, *(MTSurfaceDimensions_ **)(a1 + 40), (float *)(a1 + 244), *(double *)(a1 + 8));
        uint64_t v6 = *(void *)(a1 + 280);
        if (*(_DWORD *)(v6 + 568 * v9 + 36) == 1 || !*(_DWORD *)(v6 + 568 * v9 + 132)) {
          ++*(_DWORD *)(a1 + 320);
        }
        v7 += 96;
        --v8;
      }
      while (v8);
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, v3);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
  MTPathStates_::updateFastestFingerSpeed((MTPathStates_ *)a1);
  uint64_t result = MTPathStates_::forceFingerUniquenessAcrossHands((MTPathStates_ *)a1);
  if ((int)v3 >= 1)
  {
    uint64_t v3 = v3;
    uint64_t v11 = (int *)(a2 + 16);
    do
    {
      int v12 = *v11;
      v11 += 24;
      uint64_t result = (MTPathStates_ *)MTParserPath_::constructPathChangeEventMask((MTParserPath_ *)(*(void *)(a1 + 280)
                                                                                            + 568 * v12));
      --v3;
    }
    while (v3);
  }
  return result;
}

MTPathStates_ *MTPathStates_::forceFingerUniquenessAcrossHands(MTPathStates_ *this)
{
  uint64_t v1 = 0;
  memset(v12, 0, sizeof(v12));
  uint64_t v2 = *((void *)this + 35);
  do
  {
    if ((*(_DWORD *)(v2 + 568 * v1 + 36) - 1) <= 5)
    {
      uint64_t v3 = v2 + 568 * v1;
      unsigned int v6 = *(_DWORD *)(v3 + 40);
      uint64_t v5 = (unsigned int *)(v3 + 40);
      unsigned int v4 = v6;
      unsigned int v7 = v6 - 1;
      if (*((_DWORD *)v12 + (int)v6)) {
        BOOL v8 = v7 > 4;
      }
      else {
        BOOL v8 = 1;
      }
      if (!v8)
      {
        uint64_t v9 = (int)v4;
        int v10 = 1;
        while (v9 != 5)
        {
          int v11 = *((_DWORD *)v12 + v9++);
          --v10;
          if (!v11)
          {
            v4 -= v10;
            *uint64_t v5 = v4;
            break;
          }
        }
      }
      ++*((_DWORD *)v12 + v4);
    }
    ++v1;
  }
  while (v1 != 32);
  return this;
}

uint64_t MTPathStates_::unpackContactFrame(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  double v7 = *(double *)(a1 + 8);
  if (v7 > a4) {
    double v7 = 0.0;
  }
  *(double *)(a1 + 8) = a4;
  *(double *)(a1 + 16) = v7;
  MTPathStates_::clearExistingPathLiftoffsAndMasks((MTPathStates_ *)a1);
  if (a2) {
    MTPathStates_::expandAndFilterPackedContacts(a1, a2, a3);
  }

  return MTPathStates_::flushStuckContacts((MTPathStates_ *)a1);
}

uint64_t MTPathStates_::flushStuckContacts(MTPathStates_ *this)
{
  char v2 = 0;
  uint64_t v3 = 592;
  uint64_t v4 = 31;
  do
  {
    uint64_t v5 = *((void *)this + 35);
    if (MTContact_isActive())
    {
      double v6 = *((double *)this + 1);
      if (*(double *)(v5 + v3) != v6)
      {
        MTParserPath_::flushLiftoffAt((MTParserPath_ *)(*((void *)this + 35) + v3 - 24), v6);
        char v2 = 1;
      }
    }
    v3 += 568;
    --v4;
  }
  while (v4);
  return v2 & 1;
}

MTPathStates_ *MTPathStates_::setDivingButtonState(MTPathStates_ *this, int a2)
{
  if (*((unsigned __int8 *)this + 360) != a2)
  {
    *((void *)this + 49) = *((void *)this + 1);
    *((_DWORD *)this + 10objc_storeStrong(&location, 0) = *((_DWORD *)this + 94);
    *((unsigned char *)this + 416) = 0;
  }
  *((unsigned char *)this + 36objc_storeStrong(&location, 0) = a2;
  return this;
}

float MTPathStates_::getThumbRestingOrPolarZoneHeight(MTPathStates_ *this)
{
  return *((float *)this + 107) * 1.8 * *((float *)this + 106);
}

float MTPathStates_::restingTranslationCertainty(MTPathStates_ *this)
{
  if (*((unsigned char *)this + 360)) {
    return 1.0;
  }
  else {
    return MTRestZoneIntegrator_::translationDominance((MTRestZoneIntegrator_ *)((char *)this + 512), *((unsigned char *)this + 436) == 0);
  }
}

BOOL MTPathStates_::isContactOnDivingButton(uint64_t a1, float *a2, double a3)
{
  float v5 = a3;
  if (v5 == 0.0)
  {
    double v7 = 0.0;
  }
  else
  {
    float v6 = fabsf(v5);
    double v7 = 1.0;
    if (v6 < 0.2) {
      double v7 = (float)(v6 / 0.2);
    }
  }
  float v8 = *(float *)(a1 + 424);
  float v9 = a2[15];
  float v10 = 0.0;
  if (v9 > 8.0)
  {
    float v10 = 1.0;
    if (v9 < 18.0) {
      float v10 = (float)(v9 + -8.0) / 10.0;
    }
  }
  float v11 = pow(v7, 0.75);
  float v12 = (float)(v8 + v11) + (float)((float)(v11 + 6.0) * v10);
  v15.float x = a2[8];
  v15.float y = 1.0 - a2[9];
  MTSurfaceDimensions_::convertSurfaceFractionToMillimeters(*(MTSurfaceDimensions_ **)(a1 + 40), v15);
  return v13 < v12;
}

uint64_t MTPathStates_::countFingersOnDivingButton(MTPathStates_ *this)
{
  *((_DWORD *)this + 93) = 0;
  uint64_t v2 = 604;
  uint64_t v3 = 31;
  do
  {
    uint64_t v4 = *((void *)this + 35);
    if ((*(_DWORD *)(v4 + v2) - 3) <= 1
      && MTParserPath_::isFingerOrRestingContact((MTParserPath_ *)(v4 + v2 - 36)))
    {
      ++*((_DWORD *)this + 93);
    }
    v2 += 568;
    --v3;
  }
  while (v3);
  int v5 = 0;
  float v6 = 1000.0;
  uint64_t v7 = 1;
  uint64_t v8 = 936;
  float v9 = 1000.0;
  do
  {
    uint64_t v10 = *((void *)this + 35);
    BOOL v11 = *((void *)this + 43)
       && MTParserPath_::isValidClickSource((MTParserPath_ *)(v10 + v8 - 368))
       && v7 == *(_DWORD *)(*((void *)this + 43) + 264);
    float v12 = (_DWORD *)(v10 + v8 - 332);
    if ((*v12 - 3) > 1) {
      goto LABEL_26;
    }
    if (!MTParserPath_::isFingerOrRestingContact((MTParserPath_ *)(v10 + v8 - 368)))
    {
      if (!MTParserPath_::isEdgeContact((MTParserPath_ *)(v10 + v8 - 368))) {
        goto LABEL_26;
      }
      int v13 = *((int *)this + 93) < 2 || v11;
      if (v13 != 1) {
        goto LABEL_26;
      }
    }
    float v14 = *(float *)(v10 + v8 - 280);
    MTPoint v15 = (_DWORD *)(v10 + v8 - 328);
    if (*v12 == 7) {
      MTPoint v15 = (_DWORD *)(v10 + v8 - 232);
    }
    if (*v15 != 1) {
      float v14 = v14 + *(float *)(v10 + v8);
    }
    if (v14 < v9)
    {
      float v16 = v14;
      int v5 = v3;
      LODWORD(v3) = v7;
      goto LABEL_27;
    }
    if (v14 < v6)
    {
      float v16 = v9;
      float v9 = v14;
      int v5 = v7;
    }
    else
    {
LABEL_26:
      float v16 = v9;
      float v9 = v6;
    }
LABEL_27:
    ++v7;
    v8 += 568;
    float v6 = v9;
    float v9 = v16;
  }
  while (v7 != 32);
  *((_DWORD *)this + 94) = v3;
  *((_DWORD *)this + 92) = 0;
  *((_DWORD *)this + 91) = 0;
  if (v3)
  {
    double v17 = *((double *)this + 1);
    uint64_t v18 = *((void *)this + 35);
    double v19 = v17;
    if ((*(_DWORD *)(v18 + 568 * (int)v3 + 36) - 3) <= 1) {
      double v19 = *(double *)(v18 + 568 * (int)v3 + 224);
    }
    if (v5 && (*(_DWORD *)(v18 + 568 * v5 + 36) - 3) <= 1) {
      double v17 = *(double *)(v18 + 568 * v5 + 224);
    }
    float v20 = (unsigned int *)((char *)this + 364);
    if (MTPathStates_::isContactOnDivingButton((uint64_t)this, (float *)(v18 + 568 * (int)v3 + 16), v17 - v19))
    {
      ++*v20;
      if (MTParserPath_::isEdgeContact((MTParserPath_ *)(v18 + 568 * (int)v3))) {
        ++*((_DWORD *)this + 92);
      }
    }
    if (v5)
    {
      int v21 = *((_DWORD *)this + 91);
      if (v21 >= 1)
      {
        uint64_t v22 = *((void *)this + 35);
        int32x2_t v23 = vcgt_f32((float32x2_t)0x4198000041F00000, vabd_f32(*(float32x2_t *)(v18 + 568 * (int)v3 + 84), *(float32x2_t *)(v22 + 568 * v5 + 84)));
        if (v23.i32[1] & v23.i32[0])
        {
          unsigned int *v20 = v21 + 1;
          if (MTParserPath_::isEdgeContact((MTParserPath_ *)(v22 + 568 * v5))) {
            ++*((_DWORD *)this + 92);
          }
        }
      }
    }
    *((unsigned char *)this + 361) = 0;
    BOOL v24 = (float *)(v18 + 568 * (int)v3 + 88);
    uint64_t v25 = 656;
    uint64_t v26 = 1;
    while (1)
    {
      if (v3 == v26) {
        goto LABEL_48;
      }
      double v27 = (float *)(*((void *)this + 35) + v25);
      if ((*((_DWORD *)v27 - 13) - 3) > 1) {
        goto LABEL_48;
      }
      int8x16_t v28 = (MTParserPath_ *)(v27 - 22);
      float v29 = *v27;
      float v30 = *v24;
      if (!MTParserPath_::isPalmContact((MTParserPath_ *)(v27 - 22))) {
        break;
      }
      if (v29 < v30) {
        goto LABEL_47;
      }
LABEL_48:
      ++v26;
      v25 += 568;
      if (v26 == 32) {
        return *v20;
      }
    }
    if (!MTParserPath_::isEdgeContact(v28) || v29 >= v30) {
      goto LABEL_48;
    }
LABEL_47:
    *((unsigned char *)this + 361) = 1;
    goto LABEL_48;
  }
  return 0;
}

MTPathStates_ *MTPathStates_::updateDivingBoardDisplacements(MTPathStates_ *this)
{
  uint64_t v1 = this;
  *((void *)this + 48) = 0;
  uint64_t v2 = 1;
  uint64_t v3 = 792;
  do
  {
    uint64_t v4 = *((void *)v1 + 35);
    if ((*(_DWORD *)(v4 + v3 - 188) - 3) <= 1)
    {
      this = (MTPathStates_ *)MTParserPath_::isFingerContact((MTParserPath_ *)(v4 + v3 - 224));
      if (this)
      {
        if (v2 != *((_DWORD *)v1 + 94))
        {
          double v5 = *(double *)(v4 + v3);
          double v6 = *((double *)v1 + 48);
          if (v6 == 0.0 || v5 < v6) {
            *((double *)v1 + 48) = v5;
          }
        }
      }
    }
    ++v2;
    v3 += 568;
  }
  while (v2 != 32);
  return this;
}

void MTPathStates_::checkForRestingThumb(MTPathStates_ *this)
{
  int v2 = *((unsigned __int8 *)this + 436);
  *((unsigned char *)this + 436) = 0;
  MTPathStates_::updateDivingBoardDisplacements(this);
  MTRestZoneIntegrator_::integrateRestingZoneMotion((float32x2_t *)this + 64, this, *((_DWORD *)this + 93));
  unsigned int v3 = *((_DWORD *)this + 94);
  if ((int)v3 < 1) {
    return;
  }
  uint64_t v4 = *((void *)this + 35);
  uint64_t v5 = v4 + 568 * v3;
  double v6 = *(double *)(v5 + 224);
  int v7 = *(_DWORD *)(v5 + 36);
  uint64_t v8 = (int *)(v5 + 136);
  float v9 = (int *)(v5 + 40);
  if (v7 == 7) {
    float v9 = v8;
  }
  int v10 = *v9;
  double v11 = *((double *)this + 48);
  BOOL v12 = v11 > 0.0;
  float v13 = v11 - v6;
  float v14 = fabsf(v13);
  if (v11 <= 0.0) {
    float v14 = 0.0;
  }
  *((float *)this + 188) = v14;
  int v15 = *((_DWORD *)this + 102);
  if (v15 >= 1 && v10 == 1)
  {
    *((unsigned char *)this + 756) = *((_DWORD *)this + 93) >= v15;
  }
  else
  {
    *((unsigned char *)this + 756) = 0;
    if (v11 > 0.0 && v10 != 1)
    {
      char v17 = 0;
      BOOL v18 = 0;
      BOOL v12 = *((_DWORD *)this + 93) < 3;
      goto LABEL_23;
    }
    if (v10 != 1)
    {
      char v17 = 0;
      BOOL v18 = 0;
      goto LABEL_23;
    }
  }
  if (!*((unsigned char *)this + 404) && *((_DWORD *)this + 93) == 2)
  {
    char v16 = v11 <= 0.0;
    char v17 = 1;
LABEL_31:
    BOOL v22 = v12;
    goto LABEL_32;
  }
  if (MTRestZoneIntegrator_::shouldDoBiPolarIntegration((MTRestZoneIntegrator_ *)((char *)this + 512), v2 == 0))
  {
    BOOL v18 = 0;
  }
  else
  {
    MTSurfaceDimensions_::convertPixelsToMillimeters(*((MTSurfaceDimensions_ **)this + 5), *(MTPoint *)(v4 + 568 * v3 + 48));
    BOOL v18 = v20 < (float)(*((float *)this + 108) * flt_111528[*((unsigned char *)this + 361) == 0]);
  }
  char v17 = 1;
LABEL_23:
  char v16 = !v12;
  if (!v12 || v18) {
    goto LABEL_31;
  }
  char v16 = 0;
  BOOL v22 = *((_DWORD *)this + 91) == 1 && v10 != 1;
LABEL_32:
  if (*((unsigned char *)this + 360)) {
    BOOL v23 = v12;
  }
  else {
    BOOL v23 = 0;
  }
  if (*((unsigned char *)this + 416))
  {
    double v24 = *((double *)this + 1);
  }
  else
  {
    double v24 = *((double *)this + 1);
    if (v24 - *((double *)this + 49) < 0.1)
    {
      if (*((unsigned char *)this + 360)) {
        char v17 = 1;
      }
      if ((v17 & 1) == 0) {
        *(unsigned char *)(v4 + 568 * v3 + 548) = 0;
      }
      *((unsigned char *)this + 416) = 1;
    }
  }
  double v25 = *((double *)this + 48);
  if (v6 > v25) {
    double v25 = v6;
  }
  if (v24 - v25 == 0.0)
  {
    uint64_t v26 = v4 + 568 * v3;
    MTSurfaceDimensions_::convertPixelsToMillimeters(*((MTSurfaceDimensions_ **)this + 5), *(MTPoint *)(v26 + 48));
    *(unsigned char *)(v26 + 549) = v27 > (float)(*((float *)this + 108) * flt_111528[*((unsigned char *)this + 361) == 0]);
  }
  if (v22 && MTRestZoneIntegrator_::isLockedOnTranslate((MTRestZoneIntegrator_ *)((char *)this + 512)))
  {
    if (*(unsigned char *)(v4 + 568 * v3 + 549)) {
      char v28 = v23;
    }
    else {
      char v28 = 1;
    }
    if ((v28 & 1) == 0) {
      goto LABEL_58;
    }
    goto LABEL_55;
  }
  if (v23) {
LABEL_55:
  }
    *(unsigned char *)(v4 + 568 * v3 + 548) = 1;
  if (v22 && !*(unsigned char *)(v4 + 568 * v3 + 549)) {
    goto LABEL_65;
  }
LABEL_58:
  if (*((unsigned char *)this + 360))
  {
    if (!v12) {
      return;
    }
    goto LABEL_65;
  }
  if (*(unsigned char *)(v4 + 568 * v3 + 548)) {
    char v29 = v16;
  }
  else {
    char v29 = 1;
  }
  if ((v29 & 1) == 0)
  {
LABEL_65:
    if (*((int *)this + 93) < 5 || *((int *)this + 102) <= 0) {
      *((unsigned char *)this + 436) = 1;
    }
  }
}

uint64_t MTPathStates_::fixupCurledUnderThumbIdentity(MTPathStates_ *this)
{
  uint64_t v1 = 0;
  int v2 = 0;
  int v3 = 0;
  int v4 = 0;
  int v5 = 0;
  char v6 = 0;
  int v7 = 0;
  uint64_t v8 = *((void *)this + 35);
  float v9 = (float *)(v8 + 84);
  do
  {
    uint64_t result = (*((_DWORD *)v9 - 12) - 1);
    if (result <= 5)
    {
      uint64_t result = *((unsigned int *)v9 - 11);
      if ((result - 1) <= 4)
      {
        if (!v2 || *v9 < *(float *)(v8 + 568 * v2 + 84)) {
          int v2 = v1;
        }
        if (!v3 || *v9 > *(float *)(v8 + 568 * v3 + 84)) {
          int v3 = v1;
        }
        if (v4)
        {
          float v11 = v9[1];
          if (v11 >= *(float *)(v8 + 568 * v4 + 88))
          {
            if (!v5 || v11 < *(float *)(v8 + 568 * v5 + 88)) {
              int v5 = v1;
            }
            goto LABEL_18;
          }
          int v5 = v4;
        }
        else
        {
          int v5 = 0;
        }
        int v4 = v1;
LABEL_18:
        ++v7;
        uint64_t result = result == 1;
        v6 |= result;
      }
    }
    v9 += 142;
    ++v1;
  }
  while (v1 != 32);
  if (v4)
  {
    float v12 = *(float *)(v8 + 568 * v3 + 84) - *(float *)(v8 + 568 * v2 + 84);
    if (v12 > 19.0)
    {
      uint64_t v13 = v8 + 568 * v4;
      if (v4 == v2 || v4 == v3)
      {
        if (!((*(unsigned char *)(v13 + 547) == 0) | v6 & 1))
        {
          char v16 = (_DWORD *)(v8 + 568 * v4 + 40);
          goto LABEL_38;
        }
      }
      else
      {
        float v14 = (float)(v12 / (float)(v7 - 1)) + -7.0;
        if (v14 < 2.0) {
          float v14 = 2.0;
        }
        if (v14 > 16.0) {
          float v14 = 16.0;
        }
        if (*(unsigned char *)(v13 + 547) || *(float *)(v8 + 568 * v4 + 88) < (float)(*(float *)(v8 + 568 * v5 + 88) - v14))
        {
          *(unsigned char *)(v13 + 547) = 1;
          uint64_t v15 = v8 + 568 * v4;
          int v18 = *(_DWORD *)(v15 + 40);
          char v16 = (_DWORD *)(v15 + 40);
          int v17 = v18;
          if (v18 != 1)
          {
            uint64_t v19 = v8 + 568 * v2;
            int v22 = *(_DWORD *)(v19 + 40);
            float v20 = (_DWORD *)(v19 + 40);
            int v21 = v22;
            if ((v6 & 1) == 0 || v21 == 1 || *(_DWORD *)(v8 + 568 * v3 + 40) == 1)
            {
              uint64_t v23 = v8 + 568 * v3;
              int v25 = *(_DWORD *)(v23 + 40);
              double v24 = (_DWORD *)(v23 + 40);
              if (v21 >= v25) {
                _DWORD *v24 = v17;
              }
              else {
                _DWORD *v20 = v17;
              }
LABEL_38:
              _DWORD *v16 = 1;
            }
          }
        }
      }
    }
  }
  for (uint64_t i = 0; i != 32; ++i)
  {
    if ((*(_DWORD *)(v8 + 36) - 1) <= 5 && v4 != i)
    {
      int v27 = *(_DWORD *)(v8 + 40);
      if (v27 >= 1 && v27 <= 5) {
        *(unsigned char *)(v8 + 547) = 0;
      }
    }
    v8 += 568;
  }
  return result;
}

MTPathStates_ *MTPathStates_::checkForFingersInZones(MTPathStates_ *this)
{
  int v1 = *((unsigned __int8 *)this + 244);
  if (*((unsigned char *)this + 244))
  {
    int v1 = 0;
    int v2 = (_DWORD *)(*((void *)this + 35) + 604);
    uint64_t v3 = 31;
    do
    {
      if ((*v2 - 3) <= 1) {
        v1 |= v2[59];
      }
      v2 += 142;
      --v3;
    }
    while (v3);
  }
  *((_DWORD *)this + 81) = v1;
  if (*((int *)this + 91) >= 1) {
    *((_DWORD *)this + 81) = v1 | 0x10000;
  }
  return this;
}

double MTPathStates_::forwardFirmwareDistributedForces(MTPathStates_ *this)
{
  int v2 = 0;
  uint64_t v3 = (float *)*((void *)this + 35);
  *((void *)this + 44) = 0;
  int v4 = (float *)((char *)this + 328);
  uint64_t v5 = -31;
  uint64_t v6 = 856;
  do
  {
    uint64_t v7 = *((void *)this + 35);
    uint64_t v8 = (MTForceFilter_ *)(v7 + v6);
    if ((*(_DWORD *)(v7 + v6 - 252) - 1) > 5)
    {
      MTForceFilter_::clear(v8);
    }
    else
    {
      float v9 = *((float *)v8 - 55);
      *((float *)this + 88) = v9 + *((float *)this + 88);
      if (MTParserPath_::isValidClickSource((MTParserPath_ *)((char *)v8 - 288))) {
        *((float *)this + 89) = v9 + *((float *)this + 89);
      }
      uint64_t v10 = v7 + v6;
      float v11 = hypotf(*(float *)(v10 - 196), *(float *)(v10 - 192));
      MTForceFilter_::updateForceFilter(v10, v4, v9, v11, *((double *)this + 1) - *((double *)this + 2));
      ++v2;
    }
    v6 += 568;
  }
  while (!__CFADD__(v5++, 1));
  if (v2 <= 0)
  {
    return MTForceFilter_::clear((MTForceFilter_ *)(v3 + 72));
  }
  else
  {
    float v13 = *((float *)this + 89);
    float v14 = hypotf(v3[23], v3[24]);
    double v15 = *((double *)this + 1) - *((double *)this + 2);
    MTForceFilter_::updateForceFilter((uint64_t)(v3 + 72), v4, v13, v14, v15);
  }
  return result;
}

float MTPathStates_::sumOfLowpassPeakFingerSpeeds(MTPathStates_ *this)
{
  float v2 = 0.0;
  uint64_t v3 = 892;
  uint64_t v4 = 31;
  do
  {
    uint64_t v5 = *((void *)this + 35);
    if (MTParserPath_::isFingerContact((MTParserPath_ *)(v5 + v3 - 324))
      && (*(_DWORD *)(v5 + v3 - 288) - 3) <= 1)
    {
      float v2 = v2 + *(float *)(v5 + v3);
    }
    v3 += 568;
    --v4;
  }
  while (v4);
  return v2;
}

float MTPathStates_::getPrePixelatedPositionFromPostPixelatedPosition(MTPathStates_ *this, int a2)
{
  memcpy(__dst, &unk_111570, sizeof(__dst));
  uint64_t v4 = *((void *)this + 35);
  *(void *)double __dst = off_1417C0;
  uint64_t v5 = v4 + 568 * a2;
  memcpy(&__dst[8], (const void *)(v5 + 8), 0x114uLL);
  *(void *)&__dst[288] = off_1419C0;
  uint64_t v6 = *(void *)(v5 + 328);
  long long v7 = *(_OWORD *)(v5 + 312);
  *(_OWORD *)&__dst[296] = *(_OWORD *)(v5 + 296);
  *(_OWORD *)&__dst[312] = v7;
  *(void *)&__dst[328] = v6;
  long long v9 = *(_OWORD *)(v5 + 352);
  long long v8 = *(_OWORD *)(v5 + 368);
  *(_OWORD *)&__dst[336] = *(_OWORD *)(v5 + 336);
  *(_OWORD *)&__dst[352] = v9;
  *(_OWORD *)&__dst[368] = v8;
  long long v10 = *(_OWORD *)(v5 + 432);
  long long v12 = *(_OWORD *)(v5 + 384);
  long long v11 = *(_OWORD *)(v5 + 400);
  *(_OWORD *)&__dst[416] = *(_OWORD *)(v5 + 416);
  *(_OWORD *)&__dst[432] = v10;
  *(_OWORD *)&__dst[384] = v12;
  *(_OWORD *)&__dst[400] = v11;
  long long v13 = *(_OWORD *)(v5 + 496);
  long long v15 = *(_OWORD *)(v5 + 448);
  long long v14 = *(_OWORD *)(v5 + 464);
  *(_OWORD *)&__dst[480] = *(_OWORD *)(v5 + 480);
  *(_OWORD *)&__dst[496] = v13;
  *(_OWORD *)&__dst[448] = v15;
  *(_OWORD *)&__dst[464] = v14;
  long long v17 = *(_OWORD *)(v5 + 528);
  long long v16 = *(_OWORD *)(v5 + 544);
  long long v18 = *(_OWORD *)(v5 + 512);
  *(_DWORD *)&__dst[560] = *(_DWORD *)(v5 + 560);
  *(_OWORD *)&__dst[528] = v17;
  *(_OWORD *)&__dst[544] = v16;
  *(_OWORD *)&__dst[512] = v18;
  uint64_t v19 = *((void *)this + 5);
  uint64_t v23 = off_141DA8;
  long long v20 = *(_OWORD *)(v19 + 24);
  long long v24 = *(_OWORD *)(v19 + 8);
  long long v25 = v20;
  LODWORD(v2objc_storeStrong(&location, 0) = *(_DWORD *)&__dst[48];
  LODWORD(v17) = *(_DWORD *)&__dst[52];
  float v21 = MTSurfaceDimensions_::convertPixelsToSurfaceFraction((MTSurfaceDimensions_ *)&v23, *(MTPoint *)((char *)&v17 - 4));
  MTSurfaceDimensions_::~MTSurfaceDimensions_((MTSurfaceDimensions_ *)&v23);
  MTParserPath_::~MTParserPath_((MTParserPath_ *)__dst);
  return v21;
}

void sub_55908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, MTParserPath_ *a14)
{
}

MTPathStates_ *MTPathStates_::getMaxDisplacement_mm(MTPathStates_ *this)
{
  int v1 = (float *)(*((void *)this + 35) + 904);
  float v2 = 0.0;
  uint64_t v3 = 31;
  do
  {
    if (*v1 > v2) {
      float v2 = *v1;
    }
    v1 += 142;
    --v3;
  }
  while (v3);
  return this;
}

void MTPathStates_::updateDragDisplacements_mm(MTPathStates_ *this, int a2)
{
  uint64_t v4 = (char *)this + 48;
  uint64_t v5 = 904;
  uint64_t v6 = 31;
  do
  {
    long long v7 = (float *)(*((void *)this + 35) + v5);
    long long v8 = *((_OWORD *)v4 + 7);
    v14[6] = *((_OWORD *)v4 + 6);
    v14[7] = v8;
    int v15 = *((_DWORD *)v4 + 32);
    long long v9 = *((_OWORD *)v4 + 3);
    v14[2] = *((_OWORD *)v4 + 2);
    v14[3] = v9;
    long long v10 = *((_OWORD *)v4 + 5);
    v14[4] = *((_OWORD *)v4 + 4);
    v14[5] = v10;
    long long v11 = *((_OWORD *)v4 + 1);
    v14[0] = *(_OWORD *)v4;
    v14[1] = v11;
    float updated = MTParserPath_::updateHysteresisDragCenter_mm(v7 - 84, (uint64_t)v14);
    float v13 = 0.0;
    if (a2) {
      float v13 = updated + *v7;
    }
    float *v7 = v13;
    v5 += 568;
    --v6;
  }
  while (v6);
}

uint64_t MTPathStates_::tasksPrePixelatedPositions(MTPathStates_ *this)
{
  v2.n128_f64[0] = MTPathStates_::forwardFirmwareDistributedForces(this);
  if ((*((unsigned char *)this + 28) & 2) != 0)
  {
    MTPathStates_::checkForRestingThumbFromPalmRestingHand(this);
    MTPathStates_::checkForLonelyHighRestingThumb(this);
    MTPathStates_::fixupCurledUnderThumbIdentity(this);
    MTPathStates_::countFingersOnDivingButton(this);
  }
  uint64_t v3 = *(uint64_t (**)(MTPathStates_ *, __n128))(*(void *)this + 32);

  return v3(this, v2);
}

void MTPathStates_::checkForRestingThumbFromPalmRestingHand(MTPathStates_ *this)
{
  *((void *)this + 59) = *((void *)this + 58);
  __n128 v2 = (unsigned int *)((char *)this + 440);
  *((unsigned char *)this + 484) = 0;
  *(_OWORD *)((char *)this + 44objc_storeStrong(&location, 0) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 488) = xmmword_111550;
  uint64_t v3 = -31;
  uint64_t v4 = 1118;
  do
  {
    uint64_t v5 = *((void *)this + 35);
    uint64_t v6 = v5 + v4;
    if (*(_DWORD *)(v5 + v4 - 514))
    {
      long long v7 = (MTParserPath_ *)(v6 - 550);
      int v8 = *(_DWORD *)(v6 - 506);
      if (v8 == -1)
      {
        if (MTParserPath_::isPalmContact(v7))
        {
          ++*((_DWORD *)this + 114);
        }
        else if (MTParserPath_::isThumbContact(v7))
        {
          unsigned int *v2 = v3 + 32;
        }
        else if (*(unsigned char *)(v5 + v4))
        {
          *((_DWORD *)this + 112) = v3 + 32;
        }
        else if (MTParserPath_::isFingerContact(v7))
        {
          ++*((_DWORD *)this + 116);
        }
      }
      else if (v8 == 1)
      {
        if (MTParserPath_::isPalmContact(v7))
        {
          ++*((_DWORD *)this + 115);
        }
        else if (MTParserPath_::isThumbContact(v7))
        {
          *((_DWORD *)this + 111) = v3 + 32;
        }
        else if (*(unsigned char *)(v5 + v4))
        {
          *((_DWORD *)this + 113) = v3 + 32;
        }
        else if (MTParserPath_::isFingerContact(v7))
        {
          ++*((_DWORD *)this + 117);
        }
      }
    }
    v4 += 568;
  }
  while (!__CFADD__(v3++, 1));
  int v10 = *((_DWORD *)this + 117);
  if (v10 + *((_DWORD *)this + 116) >= 1)
  {
    uint64_t v11 = 816;
    uint64_t v12 = 31;
    do
    {
      uint64_t v13 = *((void *)this + 35);
      if (*(_DWORD *)(v13 + v11 - 212) && MTParserPath_::isFingerContact((MTParserPath_ *)(v13 + v11 - 248)))
      {
        double v14 = *(double *)(v13 + v11 - 24);
        double v15 = fmin(*((double *)this + 61), v14);
        double v16 = fmax(*((double *)this + 62), v14);
        *((double *)this + 61) = v15;
        *((double *)this + 62) = v16;
        *((double *)this + 63) = fmax(*((double *)this + 63), *(double *)(v13 + v11));
      }
      v11 += 568;
      --v12;
    }
    while (v12);
    if (*((_DWORD *)this + 111) || *v2) {
      *((unsigned char *)this + 484) = *((double *)this + 62) - *((double *)this + 61) < *(double *)&qword_158670;
    }
    int v10 = *((_DWORD *)this + 117);
  }
  if (!v10 && !*((_DWORD *)this + 116) && (*((int *)this + 118) >= 1 || *((int *)this + 119) > 0))
  {
    uint64_t v17 = 604;
    uint64_t v18 = 31;
    do
    {
      uint64_t v19 = *((void *)this + 35);
      if (*(_DWORD *)(v19 + v17)) {
        MTParserPath_::clearPathSpeedSymmetries((MTParserPath_ *)(v19 + v17 - 36));
      }
      v17 += 568;
      --v18;
    }
    while (v18);
    *((_DWORD *)this + 12objc_storeStrong(&location, 0) = 0;
  }
  int v20 = *((_DWORD *)this + 112);
  if ((v20 || *((_DWORD *)this + 113))
    && *((_DWORD *)this + 117) + *((_DWORD *)this + 116) >= 2
    && *((unsigned char *)this + 484)
    && (v20 && !*((_DWORD *)this + 114) || (int v20 = *((_DWORD *)this + 113)) != 0 && !*((_DWORD *)this + 115))
    && v20 >= 1)
  {
    uint64_t v21 = *((void *)this + 35);
    if (*(_DWORD *)(v21 + 568 * v20 + 36))
    {
      uint64_t v22 = v21 + 568 * v20;
      *(unsigned char *)(v22 + 55objc_storeStrong(&location, 0) = 0;
      MTParserPath_::clearPathSpeedSymmetries((MTParserPath_ *)v22);
    }
  }
  unsigned int v23 = *((_DWORD *)this + 111);
  unsigned int v24 = v23;
  if (!v23) {
    goto LABEL_68;
  }
  int v25 = *((_DWORD *)this + 115);
  if (v25 < 1 || *((_DWORD *)this + 117)) {
    goto LABEL_68;
  }
  if (*((int *)this + 116) <= 0 && !*v2) {
    return;
  }
  int v26 = *((_DWORD *)this + 114);
  if (v25 > v26)
  {
    uint64_t v27 = *((void *)this + 35);
    goto LABEL_62;
  }
  if (v25 != v26)
  {
LABEL_68:
    unsigned int v28 = *v2;
    goto LABEL_69;
  }
  uint64_t v27 = *((void *)this + 35);
  unsigned int v28 = *((_DWORD *)this + 110);
  if (*(float *)(v27 + 568 * (int)v23 + 88) > *(float *)(v27 + 568 * (int)v28 + 88))
  {
LABEL_62:
    unint64_t v29 = 0;
    float v30 = (BOOL *)(v27 + 1118);
    uint64x2_t v31 = (uint64x2_t)vdupq_n_s64(0x1FuLL);
    do
    {
      uint64x2_t v32 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v29), (int8x16_t)xmmword_111560);
      if (vmovn_s64((int64x2_t)vcgtq_u64(v31, v32)).u8[0]) {
        *float v30 = v23 - 1 == v29;
      }
      if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x1FuLL), v32)).i32[1]) {
        v30[568] = v23 - 2 == v29;
      }
      v29 += 2;
      v30 += 1136;
    }
    while (v29 != 32);
    goto LABEL_68;
  }
LABEL_69:
  if (v28)
  {
    int v33 = *((_DWORD *)this + 114);
    if (v33 >= 1 && !*((_DWORD *)this + 116) && (v23 || *((int *)this + 117) >= 1))
    {
      int v34 = *((_DWORD *)this + 115);
      if (v33 <= v34)
      {
        if (v33 != v34) {
          return;
        }
        uint64_t v35 = *((void *)this + 35);
        if (*(float *)(v35 + 568 * (int)v28 + 88) <= *(float *)(v35 + 568 * (int)v24 + 88)) {
          return;
        }
      }
      else
      {
        uint64_t v35 = *((void *)this + 35);
      }
      unint64_t v36 = 0;
      uint64_t v37 = v28 - 2;
      uint64_t v38 = v28 - 1;
      float32x2_t v39 = (BOOL *)(v35 + 1118);
      uint64x2_t v40 = (uint64x2_t)vdupq_n_s64(0x1FuLL);
      do
      {
        uint64x2_t v41 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v36), (int8x16_t)xmmword_111560);
        if (vmovn_s64((int64x2_t)vcgtq_u64(v40, v41)).u8[0]) {
          *float32x2_t v39 = v38 == v36;
        }
        if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x1FuLL), v41)).i32[1]) {
          v39[568] = v37 == v36;
        }
        v36 += 2;
        v39 += 1136;
      }
      while (v36 != 32);
    }
  }
}

void MTPathStates_::checkForLonelyHighRestingThumb(MTPathStates_ *this)
{
  unsigned int v1 = *((_DWORD *)this + 110);
  if (v1 && !*((_DWORD *)this + 114) && *((_DWORD *)this + 117) + *((_DWORD *)this + 116) == 1
    || (unsigned int v1 = *((_DWORD *)this + 111)) != 0
    && !*((_DWORD *)this + 115)
    && *((_DWORD *)this + 116) + *((_DWORD *)this + 117) == 1)
  {
    MTPathStates_::assignLonelyHighRestingThumb(this, v1);
  }
}

void MTPathStates_::tasksFilterAndPixelatePositions(uint64_t a1, uint64_t a2, int a3, int8x16_t a4, double a5, int8x16_t a6, int8x16_t a7)
{
  if (a3 >= 1)
  {
    uint64_t v8 = a1 + 48;
    long long v9 = (int *)(a1 + 180);
    int v10 = (int *)(a2 + 16);
    uint64_t v11 = a3;
    do
    {
      int v12 = *v10;
      v10 += 24;
      MTParserPath_::filterContactForScreenUI(*(void *)(a1 + 280) + 568 * v12, a1, *(MTSurfaceDimensions_ **)(a1 + 40), v8, v9, a4, a5, a6, a7);
      --v11;
    }
    while (v11);
  }
}

void MTPathStates_::assignLonelyHighRestingThumb(MTPathStates_ *this, unsigned int a2)
{
  uint64_t v4 = *((void *)this + 35);
  double v5 = *(double *)(v4 + 568 * (int)a2 + 224);
  uint64_t v6 = MTLoggingPlugin();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    double v7 = *((double *)this + 1);
    double v8 = v7 - v5;
    double v9 = *(float *)(v4 + 568 * (int)a2 + 380);
    if (*((unsigned char *)this + 484)) {
      int v10 = "Yes";
    }
    else {
      int v10 = "No";
    }
    double v11 = v7 - *((double *)this + 63);
    int v18 = 136317698;
    uint64_t v19 = "[Debug] ";
    __int16 v20 = 2080;
    uint64_t v21 = "";
    __int16 v22 = 2080;
    unsigned int v23 = "assignLonelyHighRestingThumb";
    __int16 v24 = 1024;
    unsigned int v25 = a2;
    __int16 v26 = 2048;
    double v27 = v8;
    __int16 v28 = 2048;
    uint64_t v29 = qword_158668;
    __int16 v30 = 2048;
    double v31 = v9;
    __int16 v32 = 2048;
    uint64_t v33 = 0x4000000000000000;
    __int16 v34 = 2080;
    uint64_t v35 = v10;
    __int16 v36 = 2048;
    double v37 = v11;
    __int16 v38 = 2048;
    uint64_t v39 = qword_158670;
    _os_log_impl(&def_411C8, v6, OS_LOG_TYPE_DEBUG, "[HID] [MT] %s%s%s [MTZoom] Thumb path P%d: Touch duration = %.3f sec (> %.3f sec for RT), Discounted distance = %.3f mm (< %.3f mm for RT), Thumb touched down with finger = %s (No for RT) , Time since last finger liftoff = %.3f sec (> %.3f sec for RT)", (uint8_t *)&v18, 0x6Cu);
  }

  double v12 = *((double *)this + 1);
  if (*(double *)&qword_158668 < v12 - v5
    && *(float *)(v4 + 568 * (int)a2 + 380) < 2.0
    && !*((unsigned char *)this + 484)
    && v12 - *((double *)this + 63) > *(double *)&qword_158670)
  {
    uint64_t v13 = MTLoggingPlugin();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      int v18 = 136315906;
      uint64_t v19 = "[Debug] ";
      __int16 v20 = 2080;
      uint64_t v21 = "";
      __int16 v22 = 2080;
      unsigned int v23 = "assignLonelyHighRestingThumb";
      __int16 v24 = 1024;
      unsigned int v25 = a2;
      _os_log_impl(&def_411C8, v13, OS_LOG_TYPE_DEBUG, "[HID] [MT] %s%s%s [MTZoom] Marking thumb path P%d as resting thumb", (uint8_t *)&v18, 0x26u);
    }

    unint64_t v14 = 0;
    double v15 = (BOOL *)(*((void *)this + 35) + 1118);
    uint64x2_t v16 = (uint64x2_t)vdupq_n_s64(0x1FuLL);
    do
    {
      uint64x2_t v17 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v14), (int8x16_t)xmmword_111560);
      if (vmovn_s64((int64x2_t)vcgtq_u64(v16, v17)).u8[0]) {
        BOOL *v15 = a2 - 1 == v14;
      }
      if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x1FuLL), v17)).i32[1]) {
        v15[568] = a2 - 2 == v14;
      }
      v14 += 2;
      v15 += 1136;
    }
    while (v14 != 32);
  }
}

void *MTPathStates_::tasksPostPixelatedPositions(MTPathStates_ *this)
{
  if ((*((unsigned char *)this + 28) & 2) != 0) {
    MTPathStates_::checkForRestingThumb(this);
  }
  uint64_t v2 = *((void *)this + 35) + 604;
  for (uint64_t i = 1; i != 32; ++i)
  {
    if (*(_DWORD *)v2)
    {
      if (*((unsigned char *)this + 436) && i == *((_DWORD *)this + 94))
      {
        *(unsigned char *)(v2 + 51objc_storeStrong(&location, 0) = *(unsigned char *)(v2 + 509);
        *(unsigned char *)(v2 + 509) = 1;
      }
      else
      {
        *(unsigned char *)(v2 + 51objc_storeStrong(&location, 0) = *(unsigned char *)(v2 + 509);
        *(unsigned char *)(v2 + 509) = 0;
      }
    }
    v2 += 568;
  }
  if (!*((_DWORD *)this + 117) && !*((_DWORD *)this + 116) || !*((_DWORD *)this + 115) && !*((_DWORD *)this + 114))
  {
    float v4 = fmax((float)((float)(MTPathStates_::getHighRestingThumbDisplacement(this).f32[0] + *((float *)this + 120)) + -0.14), 0.0);
    *((float *)this + 12objc_storeStrong(&location, 0) = v4;
    MTPathStates_::breakOutOfRestingThumbForLargeDiscountedDisplacement(this);
  }
  MTPathStates_::updateSpeedSymmetriesOfAllPaths(this);
  double result = MTPathStates_::breakOutOfRestingThumbBasedOnSymmetry(this);
  uint64_t v6 = 604;
  uint64_t v7 = 31;
  do
  {
    uint64_t v8 = *((void *)this + 35);
    if (*(_DWORD *)(v8 + v6)) {
      double result = MTParserPath_::rejectRestingThumbFromRestingHand((MTParserPath_ *)(v8 + v6 - 36));
    }
    v6 += 568;
    --v7;
  }
  while (v7);
  return result;
}

double MTPathStates_::breakOutOfRestingThumbForLargeDiscountedDisplacement(MTPathStates_ *this)
{
  int v2 = *((_DWORD *)this + 112);
  if (v2 || (int v2 = *((_DWORD *)this + 113)) != 0)
  {
    uint64_t v3 = *((void *)this + 35);
    float v4 = (MTParserPath_ *)(v3 + 568 * v2);
    if (!v4->var3.var3 || (LODWORD(result) = *((_DWORD *)this + 120), *(float *)&result > 8.0))
    {
      *(unsigned char *)(v3 + 568 * v2 + 55objc_storeStrong(&location, 0) = 0;
      return MTParserPath_::clearPathSpeedSymmetries(v4);
    }
  }
  return result;
}

void MTPathStates_::updateSpeedSymmetriesOfAllPaths(MTPathStates_ *this)
{
  uint64_t v2 = 1;
  uint64_t v3 = 632;
  do
  {
    uint64_t v4 = *((void *)this + 35);
    double v5 = (float *)(v4 + v3);
    if (v2 == *(_DWORD *)(v4 + v3 - 32) && *v5 > 0.0)
    {
      uint64_t v6 = (MTParserPath_ *)(v5 - 16);
      if ((MTParserPath_::isFingerOrRestingContact((MTParserPath_ *)(v5 - 16))
         || MTParserPath_::isThumbAlongEdgeContact(v6))
        && (*(_DWORD *)(v4 + v3 - 28) - 3) <= 1)
      {
        MTPathStates_::computePathAndFingerSpeedSymmetries(this, v2);
      }
    }
    uint64_t v7 = *((void *)this + 35) + v3;
    if ((*(_DWORD *)(v7 - 28) - 3) >= 2) {
      MTParserPath_::clearPathSpeedSymmetries((MTParserPath_ *)(v7 - 64));
    }
    ++v2;
    v3 += 568;
  }
  while (v2 != 32);
}

MTPathStates_ *MTPathStates_::breakOutOfRestingThumbBasedOnSymmetry(MTPathStates_ *this)
{
  uint64_t v1 = *((void *)this + 35) + 604;
  uint64_t v2 = 31;
  do
  {
    if (*(_DWORD *)v1)
    {
      if (*(unsigned char *)(v1 + 509))
      {
        float v3 = *(float *)(v1 + 516);
        if (v3 < *(float *)(v1 + 520)) {
          float v3 = *(float *)(v1 + 520);
        }
        if (v3 > 0.765 && !*((unsigned char *)this + 360))
        {
          *(unsigned char *)(v1 + 51objc_storeStrong(&location, 0) = *(unsigned char *)(v1 + 509);
          *(unsigned char *)(v1 + 509) = 0;
        }
      }
      if (*(unsigned char *)(v1 + 514))
      {
        if (*(float *)(v1 + 524) > 0.87) {
          *(unsigned char *)(v1 + 514) = 0;
        }
      }
    }
    v1 += 568;
    --v2;
  }
  while (v2);
  return this;
}

void MTPathStates_::computePathAndFingerSpeedSymmetries(MTPathStates_ *this, int a2)
{
  unint64_t v73 = 0;
  *(void *)long long v74 = 0;
  long long v71 = 0;
  uint64_t v72 = 0;
  float v4 = 0.0;
  uint64_t v5 = 1;
  long long __p = 0;
  long long v69 = 0;
  unint64_t v70 = 0;
  do
  {
    uint64_t v6 = *((void *)this + 35);
    uint64_t v7 = v6 + 568 * v5;
    int v9 = *(_DWORD *)(v7 + 32);
    uint64_t v8 = (_DWORD *)(v7 + 32);
    if (v5 == v9
      && *(float *)(v6 + 568 * v5 + 64) > 0.0
      && (MTParserPath_::isFingerOrRestingContact((MTParserPath_ *)(v6 + 568 * v5))
       || MTParserPath_::isThumbAlongEdgeContact((MTParserPath_ *)(v6 + 568 * v5)))
      && (*(_DWORD *)(v6 + 568 * v5 + 36) - 3) <= 1)
    {
      if (*v8 == a2)
      {
        uint64_t v10 = v6 + 568 * v5;
        float v4 = *(float *)(v10 + 500);
        *(void *)long long v74 = *(void *)(v10 + 492);
      }
      else
      {
        uint64_t v11 = v6 + 568 * v5;
        uint64_t v12 = *(void *)(v11 + 492);
        int v13 = *(_DWORD *)(v11 + 500);
        unint64_t v14 = v72;
        if ((unint64_t)v72 >= v73)
        {
          uint64x2_t v16 = v71;
          int64_t v17 = ((char *)v72 - (char *)v71) >> 3;
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 61) {
            std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v19 = v73 - (void)v71;
          if ((uint64_t)(v73 - (void)v71) >> 2 > v18) {
            unint64_t v18 = v19 >> 2;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          if (v20)
          {
            uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HSUtil::CoderKey const*>>((uint64_t)&v73, v20);
            uint64x2_t v16 = v71;
            unint64_t v14 = v72;
          }
          else
          {
            uint64_t v21 = 0;
          }
          __int16 v22 = (float *)&v21[8 * v17];
          *(void *)__int16 v22 = v12;
          double v15 = v22 + 2;
          if (v14 != v16)
          {
            do
            {
              uint64_t v23 = *((void *)v14 - 1);
              v14 -= 2;
              *((void *)v22 - 1) = v23;
              v22 -= 2;
            }
            while (v14 != v16);
            uint64x2_t v16 = v71;
          }
          long long v71 = v22;
          uint64_t v72 = v15;
          unint64_t v73 = (unint64_t)&v21[8 * v20];
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          *(void *)uint64_t v72 = v12;
          double v15 = v14 + 2;
        }
        uint64_t v72 = v15;
        __int16 v24 = v69;
        if ((unint64_t)v69 >= v70)
        {
          __int16 v26 = (float *)__p;
          int64_t v27 = ((char *)v69 - (unsigned char *)__p) >> 2;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62) {
            std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v29 = v70 - (void)__p;
          if ((uint64_t)(v70 - (void)__p) >> 1 > v28) {
            unint64_t v28 = v29 >> 1;
          }
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v28;
          }
          if (v30)
          {
            double v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v70, v30);
            __int16 v26 = (float *)__p;
            __int16 v24 = v69;
          }
          else
          {
            double v31 = 0;
          }
          __int16 v32 = (float *)&v31[4 * v27];
          *(_DWORD *)__int16 v32 = v13;
          unsigned int v25 = v32 + 1;
          while (v24 != v26)
          {
            int v33 = *((_DWORD *)v24-- - 1);
            *((_DWORD *)v32-- - 1) = v33;
          }
          long long __p = v32;
          long long v69 = v25;
          unint64_t v70 = (unint64_t)&v31[4 * v30];
          if (v26) {
            operator delete(v26);
          }
        }
        else
        {
          *(_DWORD *)long long v69 = v13;
          unsigned int v25 = v24 + 1;
        }
        long long v69 = v25;
      }
    }
    ++v5;
  }
  while (v5 != 32);
  unint64_t v34 = 126 - 2 * __clz(((char *)v69 - (unsigned char *)__p) >> 2);
  if (v69 == __p) {
    uint64_t v35 = 0;
  }
  else {
    uint64_t v35 = v34;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::greater<float> &,float *,false>((float *)__p, v69, (uint64_t)&__src, v35, 1);
  unint64_t v36 = 126 - 2 * __clz(((char *)v72 - (char *)v71) >> 3);
  if (v72 == v71) {
    uint64_t v37 = 0;
  }
  else {
    uint64_t v37 = v36;
  }
  std::__introsort<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *,false>((uint64_t)v71, v72, (uint64_t)&__src, v37, 1);
  unsigned __int8 __src = 0;
  float v66 = 0;
  uint64_t v67 = 0;
  std::vector<MTPoint>::__init_with_size[abi:ne180100]<MTPoint*,MTPoint*>(&__src, v71, (uint64_t)v72, ((char *)v72 - (char *)v71) >> 3);
  std::vector<MTPoint>::insert((uint64_t)&__src, (char *)__src, v74);
  int v60 = 0;
  uint64_t v61 = 0;
  uint64_t v59 = 0;
  std::vector<MTPoint>::__init_with_size[abi:ne180100]<MTPoint*,MTPoint*>(&v59, __src, (uint64_t)v66, (v66 - (unsigned char *)__src) >> 3);
  MTPathStates_::getCosineThetas((float **)&v59, &v62);
  __int16 v38 = v62;
  uint64_t v39 = v63;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  CFIndex v62 = 0;
  if (v59)
  {
    int v60 = v59;
    operator delete(v59);
  }
  float v40 = 0.0;
  float v41 = 0.0;
  if (v4 > 10.0)
  {
    int v56 = 0;
    CFIndex v57 = 0;
    uint64_t v58 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v56, __p, (uint64_t)v69, ((char *)v69 - (unsigned char *)__p) >> 2);
    float32x2_t v53 = 0;
    CFIndex v54 = 0;
    uint64_t v55 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v53, v38, v39, (v39 - (uint64_t)v38) >> 2);
    char v42 = v56;
    if (v57 != v56)
    {
      float v43 = sqrtf(v4 * *(float *)v56);
      float v44 = 1.0;
      if (v54 != v53) {
        float v44 = *(float *)v53;
      }
      float v40 = (float)(v43 / (float)((float)((float)(v4 + *(float *)v56) * 0.5) + 1.0)) * v44;
    }
    if (v53)
    {
      CFIndex v54 = v53;
      operator delete(v53);
      char v42 = v56;
    }
    if (v42)
    {
      CFIndex v57 = v42;
      operator delete(v42);
    }
    double v50 = 0;
    float32x2_t v51 = 0;
    uint64_t v52 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v50, __p, (uint64_t)v69, ((char *)v69 - (unsigned char *)__p) >> 2);
    uint64_t v47 = 0;
    float v48 = 0;
    uint64_t v49 = 0;
    uint64_t v45 = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v47, v38, v39, (v39 - (uint64_t)v38) >> 2);
    MTPathStates_::compute_3F_path_speed_symmetry(v4, (uint64_t)v45, &v50);
    float v41 = v46;
    if (v47)
    {
      float v48 = v47;
      operator delete(v47);
    }
    if (v50)
    {
      float32x2_t v51 = v50;
      operator delete(v50);
    }
  }
  MTParserPath_::setPathSpeedSymmetries((MTParserPath_ *)(*((void *)this + 35) + 568 * a2), v40, v41);
  if (__src)
  {
    float v66 = __src;
    operator delete(__src);
  }
  if (v38) {
    operator delete(v38);
  }
  if (__p)
  {
    long long v69 = (float *)__p;
    operator delete(__p);
  }
  if (v71)
  {
    uint64_t v72 = v71;
    operator delete(v71);
  }
}

void sub_56A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  if (a28) {
    operator delete(a28);
  }
  if (v32) {
    operator delete(v32);
  }
  if (a31) {
    operator delete(a31);
  }
  uint64_t v35 = *(void **)(v33 - 152);
  if (v35)
  {
    *(void *)(v33 - 144) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(exception_object);
}

float32x2_t MTPathStates_::getHighRestingThumbDisplacement(MTPathStates_ *this)
{
  int v1 = *((_DWORD *)this + 112);
  if (v1 || (int v1 = *((_DWORD *)this + 113)) != 0)
  {
    uint64_t v2 = *((void *)this + 35) + 568 * (int)(float)v1;
    float32x2_t v3 = vsub_f32(*(float32x2_t *)(v2 + 84), *(float32x2_t *)(v2 + 180));
    float32x2_t result = vmul_f32(v3, v3);
    result.f32[0] = sqrtf(vaddv_f32(result));
  }
  else
  {
    return 0;
  }
  return result;
}

char *std::vector<MTPoint>::insert(uint64_t a1, char *__src, char *a3)
{
  float32x2_t v3 = a3;
  float v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    int v13 = *(char **)a1;
    *(_OWORD *)long long __p = 0u;
    long long v27 = 0u;
    unint64_t v14 = ((v6 - v13) >> 3) + 1;
    if (v14 >> 61) {
      std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v28 = a1 + 16;
    if (v18) {
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HSUtil::CoderKey const*>>(a1 + 16, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    unint64_t v20 = &v19[8 * v16];
    __p[0] = v19;
    __p[1] = v20;
    *(void *)&long long v27 = v20;
    *((void *)&v27 + 1) = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HSUtil::CoderKey const*>>(v8, v22);
        unint64_t v20 = &v23[8 * (v22 >> 2)];
        __p[0] = v23;
        __p[1] = v20;
        *((void *)&v27 + 1) = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        __p[1] = v20;
      }
    }
    *(void *)unint64_t v20 = *(void *)v3;
    *(void *)&long long v27 = v20 + 8;
    float v4 = std::vector<MTPoint>::__swap_out_circular_buffer((void **)a1, (uint64_t)__p, v4);
    if ((void *)v27 != __p[1]) {
      *(void *)&long long v27 = v27 + (((unint64_t)__p[1] - v27 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    if (__p[0]) {
      operator delete(__p[0]);
    }
  }
  else if (__src == v6)
  {
    *(void *)unsigned __int8 __src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    int v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)float v4 = *(void *)v3;
  }
  return v4;
}

void sub_56D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MTPathStates_::getCosineThetas(float **a1@<X1>, float **a2@<X8>)
{
  a2[2] = 0;
  uint64_t v2 = a2 + 2;
  *a2 = 0;
  a2[1] = 0;
  float32x2_t v3 = *a1;
  float v4 = a1[1];
  if (*a1 != v4)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = v3;
      v3 += 2;
      if (v3 == v4)
      {
        uint64_t v16 = v7;
      }
      else
      {
        float v4 = v3;
        do
        {
          float v9 = *v8;
          float v10 = v8[1];
          float v11 = sqrtf((float)(v9 * v9) + (float)(v10 * v10));
          float v12 = 1.0;
          if (v11 > 0.0)
          {
            float v13 = *v4;
            float v14 = v4[1];
            float v15 = sqrtf((float)(v13 * v13) + (float)(v14 * v14));
            if (v15 > 0.0) {
              float v12 = (float)((float)(v10 * v14) + (float)(v9 * v13)) / (float)(v11 * v15);
            }
          }
          if ((unint64_t)v7 >= *v2)
          {
            uint64_t v17 = *a2;
            uint64_t v18 = v7 - *a2;
            unint64_t v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 62) {
              std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v20 = *v2 - (void)v17;
            if (v20 >> 1 > v19) {
              unint64_t v19 = v20 >> 1;
            }
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v21 = v19;
            }
            if (v21)
            {
              unint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v2, v21);
              uint64_t v17 = *a2;
              unint64_t v7 = a2[1];
            }
            else
            {
              unint64_t v22 = 0;
            }
            uint64_t v23 = (float *)&v22[4 * v18];
            float *v23 = v12;
            uint64_t v16 = v23 + 1;
            while (v7 != v17)
            {
              int v24 = *((_DWORD *)v7-- - 1);
              *((_DWORD *)v23-- - 1) = v24;
            }
            *a2 = v23;
            a2[1] = v16;
            a2[2] = (float *)&v22[4 * v21];
            if (v17) {
              operator delete(v17);
            }
          }
          else
          {
            float *v7 = v12;
            uint64_t v16 = v7 + 1;
          }
          a2[1] = v16;
          v4 += 2;
          unint64_t v7 = v16;
        }
        while (v4 != a1[1]);
      }
      unint64_t v7 = v16;
    }
    while (v3 != v4);
  }
}

void sub_56F10(_Unwind_Exception *exception_object)
{
  float32x2_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MTPathStates_::compute_3F_path_speed_symmetry(float a1, uint64_t a2, void *a3)
{
  if (a3[1] - *a3 >= 5uLL) {
    cbrtf((float)(*(float *)*a3 * a1) * *(float *)(*a3 + 4));
  }
}

float MTPathStates_::get_3F_IncludingThumbSpeedSymmetry(MTPathStates_ *this)
{
  uint64_t v2 = 1;
  for (uint64_t i = 1124; ; i += 568)
  {
    uint64_t v4 = *((void *)this + 35);
    if (v2 == *(_DWORD *)(v4 + i - 524)
      && *(float *)(v4 + i - 492) > 0.0
      && MTParserPath_::isThumbContact((MTParserPath_ *)(v4 + i - 556))
      && (*(_DWORD *)(v4 + i - 520) - 3) <= 1)
    {
      break;
    }
    if (++v2 == 32) {
      return 0.0;
    }
  }
  return *(float *)(v4 + i);
}

uint64_t MTPathStates_::calculateCentroidOfPaths(MTPathStates_ *this, MTPoint *a2, double a3)
{
  int v5 = 0;
  int v6 = 0;
  float32x2_t v7 = 0;
  uint64_t v8 = 1;
  uint64_t v9 = 984;
  int v10 = *((_DWORD *)this + 7) & 0x20;
  float32x2_t v11 = 0;
  do
  {
    uint64_t v12 = *((void *)this + 35);
    float v13 = (float32x2_t *)(v12 + v9);
    if (v8 == *(_DWORD *)(v12 + v9 - 384) && v13[-44].f32[0] > 0.0)
    {
      float32x2_t v14 = *v13;
      uint64_t v15 = v12 + v9;
      if (MTParserPath_::isFingerContact((MTParserPath_ *)(v12 + v9 - 416)) || v10)
      {
        ++v5;
        a3 = COERCE_DOUBLE(vadd_f32(v14, *(float32x2_t *)(v15 - 32)));
        float32x2_t v7 = vadd_f32(v7, *(float32x2_t *)&a3);
        if ((*(_DWORD *)(v15 - 380) - 3) <= 1)
        {
          ++v6;
          float32x2_t v11 = vadd_f32(v11, *(float32x2_t *)&a3);
        }
      }
    }
    ++v8;
    v9 += 568;
  }
  while (v8 != 32);
  if (v6 > 0)
  {
    if (!a2) {
      return 1;
    }
LABEL_11:
    *(float *)&a3 = (float)v6;
    *a2 = (MTPoint)vdiv_f32(v11, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0));
    return 1;
  }
  if (v5 >= 1)
  {
    int v6 = v5;
    float32x2_t v11 = v7;
    if (!a2) {
      return 1;
    }
    goto LABEL_11;
  }
  return 0;
}

uint64_t MTPathStates_::numFingerSlidWhileEngaged(MTPathStates_ *this)
{
  uint64_t result = 0;
  uint64_t v3 = *((void *)this + 35) + 604;
  uint64_t v4 = 31;
  do
  {
    if (*(_DWORD *)v3 == 7) {
      uint64_t v5 = 100;
    }
    else {
      uint64_t v5 = 4;
    }
    unsigned int v6 = *(_DWORD *)(v3 + v5) - 1;
    if ((*(_DWORD *)v3 - 3) <= 1 && v6 <= 4) {
      uint64_t result = result + *(unsigned __int8 *)(v3 + 316);
    }
    v3 += 568;
    --v4;
  }
  while (v4);
  return result;
}

HSUtil::Encoder *MTPathStates_::encodeToMap(MTPathStates_ *this, HSUtil::Encoder *a2)
{
  HSUtil::Encoder::encodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key, *((double *)this + 1));
  HSUtil::Encoder::encodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key, *((double *)this + 2));
  HSUtil::Encoder::encodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)95,(char)101,(char)97,(char)114,(char)108,(char)105,(char)101,(char)115,(char)116,(char)78,(char)111,(char)110,(char)68,(char)105,(char)118,(char)105,(char)110,(char)103,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key, *((double *)this + 48));
  HSUtil::Encoder::encodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)95,(char)100,(char)105,(char)118,(char)105,(char)110,(char)103,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)67,(char)104,(char)97,(char)110,(char)103,(char)101,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key, *((double *)this + 49));
  HSUtil::Encoder::encodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)105,(char)110>::Key, *((double *)this + 61));
  HSUtil::Encoder::encodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Key, *((double *)this + 62));
  uint64_t v4 = (const CoderKey *)HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)66,(char)114,(char)101,(char)97,(char)107,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Key;
  double v5 = *((double *)this + 63);

  return HSUtil::Encoder::encodeDouble(a2, v4, v5);
}

uint64_t MTPathStates_::decodeFromMap(MTPathStates_ *this, HSUtil::Decoder *a2)
{
  if ((MTTimeState_::decodeFromMap((MTTimeState_ *)this, a2) & 1) == 0)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/PathsNHands/MTPathStates_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTPathStates_::decodeFromMap();
    }
    return 0;
  }
  *((double *)this + 48) = HSUtil::Decoder::decodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)95,(char)101,(char)97,(char)114,(char)108,(char)105,(char)101,(char)115,(char)116,(char)78,(char)111,(char)110,(char)68,(char)105,(char)118,(char)105,(char)110,(char)103,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/PathsNHands/MTPathStates_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTPathStates_::decodeFromMap();
    }
    return 0;
  }
  *((double *)this + 49) = HSUtil::Decoder::decodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)95,(char)100,(char)105,(char)118,(char)105,(char)110,(char)103,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)67,(char)104,(char)97,(char)110,(char)103,(char)101,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/PathsNHands/MTPathStates_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTPathStates_::decodeFromMap();
    }
    return 0;
  }
  *((double *)this + 61) = HSUtil::Decoder::decodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)105,(char)110>::Key);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/PathsNHands/MTPathStates_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTPathStates_::decodeFromMap();
    }
    return 0;
  }
  *((double *)this + 62) = HSUtil::Decoder::decodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Key);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/PathsNHands/MTPathStates_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTPathStates_::decodeFromMap();
    }
    return 0;
  }
  *((double *)this + 63) = HSUtil::Decoder::decodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)66,(char)114,(char)101,(char)97,(char)107,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Key);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/PathsNHands/MTPathStates_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTPathStates_::decodeFromMap();
    }
    return 0;
  }
  return 1;
}

uint64_t MTTimeState_::decodeFromMap(MTTimeState_ *this, HSUtil::Decoder *a2)
{
  *((double *)this + 1) = HSUtil::Decoder::decodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/PathsNHands/MTSurfaceDimensions_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTTimeState_::decodeFromMap();
    }
    return 0;
  }
  *((double *)this + 2) = HSUtil::Decoder::decodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/PathsNHands/MTSurfaceDimensions_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTTimeState_::decodeFromMap();
    }
    return 0;
  }
  return 1;
}

HSUtil::Encoder *HSUtil::Encoder::encodeDouble(HSUtil::Encoder *this, const CoderKey *a2, double a3)
{
  if (!*(_DWORD *)this)
  {
    uint64_t v4 = (unint64_t *)this;
    this = (HSUtil::Encoder *)HSUtil::Encoder::_encodeKey(this, a2);
    if (!*(_DWORD *)v4)
    {
      return (HSUtil::Encoder *)HSUtil::Encoder::_writeTokenValue64(v4, 0x89u, *(uint64_t *)&a3);
    }
  }
  return this;
}

double HSUtil::Decoder::decodeDouble(HSUtil::Decoder *this, const CoderKey *a2)
{
  double v2 = 0.0;
  if (*(int *)this <= 4)
  {
    unint64_t v6 = *((void *)this + 9);
    HSUtil::Decoder::_findKey((const CoderKey *)this, &v6, a2);
    if (!*(_DWORD *)this)
    {
      double v4 = HSUtil::Decoder::_readDouble(this, &v6);
      if (*(_DWORD *)this == 3)
      {
        *(_DWORD *)this = 13;
      }
      else
      {
        *((void *)this + 9) = v6;
        return v4;
      }
    }
  }
  return v2;
}

double HSUtil::Decoder::_readDouble(HSUtil::Decoder *this, unint64_t *a2)
{
  unsigned __int8 Token = HSUtil::Decoder::_readToken(this, a2);
  double v5 = 0.0;
  if (!*(_DWORD *)this)
  {
    switch(Token)
    {
      case 0x80u:
        LOBYTE(__dst) = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 1uLL);
        int v6 = *(_DWORD *)this;
        LOBYTE(v7) = __dst;
        goto LABEL_11;
      case 0x81u:
        LOWORD(__dst) = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 2uLL);
        int v6 = *(_DWORD *)this;
        LOWORD(v7) = __dst;
        goto LABEL_11;
      case 0x82u:
        LODWORD(__dst) = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 4uLL);
        int v8 = *(_DWORD *)this;
        unsigned int v9 = __dst;
        if (*(_DWORD *)this) {
          unsigned int v9 = 0;
        }
        double v10 = (double)v9;
        goto LABEL_25;
      case 0x83u:
        uint64_t __dst = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 8uLL);
        int v6 = *(_DWORD *)this;
        unint64_t v7 = __dst;
LABEL_11:
        double v11 = (double)v7;
        goto LABEL_19;
      case 0x84u:
        LOBYTE(__dst) = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 1uLL);
        int v6 = *(_DWORD *)this;
        int v12 = (char)__dst;
        goto LABEL_14;
      case 0x85u:
        LOWORD(__dst) = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 2uLL);
        int v6 = *(_DWORD *)this;
        int v12 = (__int16)__dst;
LABEL_14:
        double v11 = (double)v12;
        goto LABEL_19;
      case 0x86u:
        LODWORD(__dst) = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 4uLL);
        int v8 = *(_DWORD *)this;
        int v13 = __dst;
        if (*(_DWORD *)this) {
          int v13 = 0;
        }
        double v10 = (double)v13;
        goto LABEL_25;
      case 0x87u:
        uint64_t __dst = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 8uLL);
        int v6 = *(_DWORD *)this;
        double v11 = (double)__dst;
LABEL_19:
        double v14 = v11;
        goto LABEL_20;
      case 0x88u:
        LODWORD(__dst) = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 4uLL);
        int v8 = *(_DWORD *)this;
        float v15 = *(float *)&__dst;
        if (*(_DWORD *)this) {
          float v15 = 0.0;
        }
        double v10 = v15;
LABEL_25:
        double v14 = v10;
        if (!v8) {
          goto LABEL_26;
        }
        return v5;
      case 0x89u:
        uint64_t __dst = 0;
        HSUtil::Decoder::_read(this, a2, &__dst, 8uLL);
        int v6 = *(_DWORD *)this;
        double v14 = *(double *)&__dst;
LABEL_20:
        if (!v6) {
LABEL_26:
        }
          double v5 = v14;
        break;
      default:
        if ((char)Token < 0) {
          *(_DWORD *)this = 2;
        }
        else {
          double v5 = (double)Token;
        }
        break;
    }
  }
  return v5;
}

void std::vector<MTParserPath_>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  double v2 = (void (***)(void))**a1;
  if (v2)
  {
    double v4 = (void (***)(void))v1[1];
    double v5 = **a1;
    if (v4 != v2)
    {
      int v6 = v4 - 71;
      unint64_t v7 = v4 - 71;
      do
      {
        (**v7)(v7);
        v6 -= 71;
        BOOL v8 = v7 == v2;
        v7 -= 71;
      }
      while (!v8);
      double v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::vector<MTParserPath_>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *result;
  uint64_t v5 = result[1];
  uint64_t v6 = a2[1];
  if (v5 == *result)
  {
    uint64_t v8 = a2[1];
  }
  else
  {
    uint64_t v7 = v6 - 568;
    do
    {
      uint64_t v8 = v6 - 568;
      *(void *)(v6 - 568) = off_1417C0;
      uint64_t result = (uint64_t *)memcpy((void *)(v6 - 560), (const void *)(v5 - 560), 0x114uLL);
      *(void *)(v6 - 28objc_storeStrong(&location, 0) = off_1419C0;
      uint64_t v9 = *(void *)(v5 - 240);
      long long v10 = *(_OWORD *)(v5 - 256);
      *(_OWORD *)(v6 - 272) = *(_OWORD *)(v5 - 272);
      *(_OWORD *)(v6 - 256) = v10;
      *(void *)(v6 - 24objc_storeStrong(&location, 0) = v9;
      long long v11 = *(_OWORD *)(v5 - 200);
      long long v12 = *(_OWORD *)(v5 - 232);
      *(_OWORD *)(v6 - 216) = *(_OWORD *)(v5 - 216);
      *(_OWORD *)(v6 - 232) = v12;
      *(_OWORD *)(v6 - 20objc_storeStrong(&location, 0) = v11;
      long long v13 = *(_OWORD *)(v5 - 168);
      long long v14 = *(_OWORD *)(v5 - 152);
      long long v15 = *(_OWORD *)(v5 - 136);
      *(_OWORD *)(v6 - 184) = *(_OWORD *)(v5 - 184);
      *(_OWORD *)(v6 - 136) = v15;
      *(_OWORD *)(v6 - 152) = v14;
      *(_OWORD *)(v6 - 168) = v13;
      long long v16 = *(_OWORD *)(v5 - 104);
      long long v17 = *(_OWORD *)(v5 - 88);
      long long v18 = *(_OWORD *)(v5 - 72);
      *(_OWORD *)(v6 - 12objc_storeStrong(&location, 0) = *(_OWORD *)(v5 - 120);
      *(_OWORD *)(v6 - 72) = v18;
      *(_OWORD *)(v6 - 88) = v17;
      *(_OWORD *)(v6 - 104) = v16;
      long long v19 = *(_OWORD *)(v5 - 40);
      long long v20 = *(_OWORD *)(v5 - 24);
      int v21 = *(_DWORD *)(v5 - 8);
      *(_OWORD *)(v6 - 56) = *(_OWORD *)(v5 - 56);
      *(_DWORD *)(v6 - 8) = v21;
      *(_OWORD *)(v6 - 24) = v20;
      *(_OWORD *)(v6 - 4objc_storeStrong(&location, 0) = v19;
      v7 -= 568;
      v5 -= 568;
      v6 -= 568;
    }
    while (v5 != v4);
  }
  a2[1] = v8;
  uint64_t v22 = *v3;
  uint64_t *v3 = v8;
  a2[1] = v22;
  uint64_t v23 = v3[1];
  v3[1] = a2[2];
  a2[2] = v23;
  uint64_t v24 = v3[2];
  v3[2] = a2[3];
  a2[3] = v24;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MTParserPath_>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x73615A240E6C2CLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(568 * a2);
}

uint64_t std::__split_buffer<MTParserPath_>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 568;
    (**(void (***)(void))(i - 568))();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<MTParserPath_>::__emplace_back_slow_path<MTParserType const&,MTParserOptions const&>(uint64_t *a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = 0x193D4BB7E327A977 * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x73615A240E6C2BLL) {
    std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0x193D4BB7E327A977 * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x39B0AD12073615) {
    unint64_t v11 = 0x73615A240E6C2BLL;
  }
  else {
    unint64_t v11 = v6;
  }
  long long v19 = a1 + 2;
  if (v11) {
    long long v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTParserPath_>>(v9, v11);
  }
  else {
    long long v12 = 0;
  }
  long long v15 = v12;
  long long v16 = &v12[568 * v5];
  long long v17 = v16;
  long long v18 = &v12[568 * v11];
  MTParserPath_::MTParserPath_(v16, *a2, *a3);
  long long v17 = v16 + 568;
  std::vector<MTParserPath_>::__swap_out_circular_buffer(a1, &v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<MTParserPath_>::~__split_buffer((uint64_t)&v15);
  return v13;
}

void sub_57E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float *std::__introsort<std::_ClassicAlgPolicy,std::greater<float> &,float *,false>(float *result, float *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10 = result;
LABEL_2:
  unint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    unint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          float v22 = *(a2 - 1);
          float v23 = *v11;
          if (v22 > *v11)
          {
            float *v11 = v22;
            *(a2 - 1) = v23;
          }
          break;
        case 3uLL:
          float v24 = v11[1];
          float v25 = *(a2 - 1);
          if (v24 <= v25) {
            int v26 = *((_DWORD *)a2 - 1);
          }
          else {
            int v26 = *((_DWORD *)v11 + 1);
          }
          if (v24 > v25) {
            float v24 = *(a2 - 1);
          }
          *(a2 - 1) = v24;
          *((_DWORD *)v11 + 1) = v26;
          float v27 = *(a2 - 1);
          if (v27 <= *v11) {
            float v28 = *v11;
          }
          else {
            float v28 = *(a2 - 1);
          }
          if (v27 > *v11) {
            float v27 = *v11;
          }
          *(a2 - 1) = v27;
          int v30 = *(_DWORD *)v11;
          float v29 = v11[1];
          if (v28 <= v29)
          {
            int v30 = *((_DWORD *)v11 + 1);
            float v29 = v28;
          }
          *(_DWORD *)unint64_t v11 = v30;
          v11[1] = v29;
          break;
        case 4uLL:
          float v32 = v11[1];
          float v31 = v11[2];
          if (*v11 <= v31) {
            int v33 = *((_DWORD *)v11 + 2);
          }
          else {
            int v33 = *(_DWORD *)v11;
          }
          if (*v11 <= v31) {
            float v31 = *v11;
          }
          void v11[2] = v31;
          *(_DWORD *)unint64_t v11 = v33;
          float v34 = *(a2 - 1);
          if (v32 <= v34) {
            float v35 = *(a2 - 1);
          }
          else {
            float v35 = v32;
          }
          if (v32 <= v34) {
            float v34 = v32;
          }
          *(a2 - 1) = v34;
          float v36 = *v11;
          if (*v11 <= v35) {
            float v37 = v35;
          }
          else {
            float v37 = *v11;
          }
          if (*v11 > v35) {
            float v36 = v35;
          }
          float *v11 = v37;
          v11[1] = v36;
          float v38 = v11[2];
          float v39 = *(a2 - 1);
          if (v38 <= v39) {
            float v40 = *(a2 - 1);
          }
          else {
            float v40 = v11[2];
          }
          if (v38 > v39) {
            float v38 = *(a2 - 1);
          }
          *(a2 - 1) = v38;
          float v41 = v11[1];
          if (v41 <= v40) {
            float v42 = v40;
          }
          else {
            float v42 = v11[1];
          }
          if (v41 > v40) {
            float v41 = v40;
          }
          v11[1] = v42;
          void v11[2] = v41;
          break;
        case 5uLL:
          int v43 = *(_DWORD *)v11;
          float v44 = v11[1];
          if (*v11 <= v44) {
            int v45 = *((_DWORD *)v11 + 1);
          }
          else {
            int v45 = *(_DWORD *)v11;
          }
          if (*v11 > v44) {
            int v43 = *((_DWORD *)v11 + 1);
          }
          *(_DWORD *)unint64_t v11 = v45;
          *((_DWORD *)v11 + 1) = v43;
          float v46 = v11[3];
          float v47 = *(a2 - 1);
          if (v46 <= v47) {
            int v48 = *((_DWORD *)a2 - 1);
          }
          else {
            int v48 = *((_DWORD *)v11 + 3);
          }
          if (v46 > v47) {
            float v46 = *(a2 - 1);
          }
          *(a2 - 1) = v46;
          *((_DWORD *)v11 + 3) = v48;
          float v49 = *(a2 - 1);
          float v50 = v11[2];
          if (v49 <= v50) {
            float v51 = v11[2];
          }
          else {
            float v51 = *(a2 - 1);
          }
          if (v49 > v50) {
            float v49 = v11[2];
          }
          *(a2 - 1) = v49;
          int v53 = *((_DWORD *)v11 + 2);
          float v52 = v11[3];
          float v54 = v11[1];
          if (v51 <= v52)
          {
            int v53 = *((_DWORD *)v11 + 3);
            float v52 = v51;
          }
          *((_DWORD *)v11 + 2) = v53;
          void v11[3] = v52;
          float v55 = *(a2 - 1);
          if (v54 <= v55) {
            float v56 = *(a2 - 1);
          }
          else {
            float v56 = v54;
          }
          if (v54 <= v55) {
            float v55 = v54;
          }
          *(a2 - 1) = v55;
          int v57 = *(_DWORD *)v11;
          float v59 = v11[2];
          float v58 = v11[3];
          if (v58 <= *v11) {
            float v60 = *v11;
          }
          else {
            float v60 = v11[3];
          }
          if (v58 > *v11) {
            float v58 = *v11;
          }
          if (v60 <= v59)
          {
            int v57 = *((_DWORD *)v11 + 2);
            float v59 = v60;
          }
          if (v58 <= v56) {
            float v61 = v56;
          }
          else {
            float v61 = v58;
          }
          if (v58 > v56) {
            float v58 = v56;
          }
          if (v61 <= v59) {
            float v56 = v59;
          }
          *(_DWORD *)unint64_t v11 = v57;
          v11[1] = v56;
          if (v61 <= v59) {
            float v62 = v61;
          }
          else {
            float v62 = v59;
          }
          void v11[2] = v62;
          void v11[3] = v58;
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *,float *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    long long v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x201)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v11, &v11[v15 >> 1], a2 - 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v11 + 1, v17 - 1, a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v11 + 2, &v11[v16 + 1], a2 - 3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v17 - 1, v17, &v11[v16 + 1]);
      float v18 = *v11;
      float *v11 = *v17;
      *long long v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(&v11[v15 >> 1], v11, a2 - 1);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*(v11 - 1) <= *v11)
    {
      uint64_t result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(v11, a2);
      unint64_t v11 = result;
      goto LABEL_19;
    }
LABEL_14:
    long long v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(v11, a2);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v11, v19);
    unint64_t v11 = v19 + 1;
    uint64_t result = (float *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v19 + 1, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = (float *)std::__introsort<std::_ClassicAlgPolicy,std::greater<float> &,float *,false>(v10, v19, a3, -v13, a5 & 1);
      unint64_t v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  uint64_t v63 = v11 + 1;
  BOOL v65 = v11 == a2 || v63 == a2;
  if (a5)
  {
    if (!v65)
    {
      uint64_t v66 = 0;
      uint64_t v67 = v11;
      do
      {
        float v69 = *v67;
        float v68 = v67[1];
        uint64_t v67 = v63;
        if (v68 > v69)
        {
          uint64_t v70 = v66;
          while (1)
          {
            *(float *)((char *)v11 + v70 + 4) = v69;
            if (!v70) {
              break;
            }
            float v69 = *(float *)((char *)v11 + v70 - 4);
            v70 -= 4;
            if (v68 <= v69)
            {
              long long v71 = (float *)((char *)v11 + v70 + 4);
              goto LABEL_119;
            }
          }
          long long v71 = v11;
LABEL_119:
          *long long v71 = v68;
        }
        uint64_t v63 = v67 + 1;
        v66 += 4;
      }
      while (v67 + 1 != a2);
    }
  }
  else if (!v65)
  {
    do
    {
      float v73 = *v10;
      float v72 = v10[1];
      unint64_t v10 = v63;
      if (v72 > v73)
      {
        long long v74 = v63;
        do
        {
          *long long v74 = v73;
          float v73 = *(v74 - 2);
          --v74;
        }
        while (v72 > v73);
        *long long v74 = v72;
      }
      ++v63;
    }
    while (v10 + 1 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(float *a1, float *a2, float *a3)
{
  float v3 = *a2;
  float v4 = *a1;
  float v5 = *a3;
  if (*a2 > *a1)
  {
    if (v5 > v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 <= v4) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 > v3)
  {
    *a2 = v5;
    *a3 = v3;
    float v6 = *a1;
    if (*a2 <= *a1) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

float *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(float *a1, float *a2)
{
  float v2 = *a1;
  if (*a1 <= *(a2 - 1))
  {
    float v5 = a1 + 1;
    do
    {
      float v3 = v5;
      if (v5 >= a2) {
        break;
      }
      ++v5;
    }
    while (v2 <= *v3);
  }
  else
  {
    float v3 = a1;
    do
    {
      float v4 = v3[1];
      ++v3;
    }
    while (v2 <= v4);
  }
  if (v3 < a2)
  {
    do
      float v6 = *--a2;
    while (v2 > v6);
  }
  if (v3 < a2)
  {
    float v7 = *v3;
    float v8 = *a2;
    do
    {
      float *v3 = v8;
      *a2 = v7;
      do
      {
        float v9 = v3[1];
        ++v3;
        float v7 = v9;
      }
      while (v2 <= v9);
      do
      {
        float v10 = *--a2;
        float v8 = v10;
      }
      while (v2 > v10);
    }
    while (v3 < a2);
  }
  if (v3 - 1 != a1) {
    *a1 = *(v3 - 1);
  }
  *(v3 - 1) = v2;
  return v3;
}

float *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(float *a1, float *a2)
{
  uint64_t v2 = 0;
  float v3 = *a1;
  do
    float v4 = a1[++v2];
  while (v4 > v3);
  float v5 = &a1[v2];
  float v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2) {
        break;
      }
      float v8 = *--a2;
    }
    while (v8 <= v3);
  }
  else
  {
    do
      float v7 = *--a2;
    while (v7 <= v3);
  }
  if (v5 < a2)
  {
    float v9 = *a2;
    float v10 = a2;
    unint64_t v11 = (unint64_t)v5;
    do
    {
      *(float *)unint64_t v11 = v9;
      float *v10 = v4;
      do
      {
        float v12 = *(float *)(v11 + 4);
        v11 += 4;
        float v4 = v12;
      }
      while (v12 > v3);
      do
      {
        float v13 = *--v10;
        float v9 = v13;
      }
      while (v13 <= v3);
    }
    while (v11 < (unint64_t)v10);
    float v6 = (float *)(v11 - 4);
  }
  if (v6 != a1) {
    *a1 = *v6;
  }
  float *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(float *a1, float *a2)
{
  BOOL v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      float v3 = *(a2 - 1);
      float v4 = *a1;
      if (v3 > *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      break;
    case 3:
      float v20 = a1[1];
      float v21 = *(a2 - 1);
      if (v20 <= v21) {
        int v22 = *((_DWORD *)a2 - 1);
      }
      else {
        int v22 = *((_DWORD *)a1 + 1);
      }
      if (v20 > v21) {
        float v20 = *(a2 - 1);
      }
      *(a2 - 1) = v20;
      *((_DWORD *)a1 + 1) = v22;
      float v23 = *(a2 - 1);
      if (v23 <= *a1) {
        float v24 = *a1;
      }
      else {
        float v24 = *(a2 - 1);
      }
      if (v23 > *a1) {
        float v23 = *a1;
      }
      *(a2 - 1) = v23;
      float v26 = *a1;
      float v25 = a1[1];
      if (v24 <= v25)
      {
        float v26 = a1[1];
        float v25 = v24;
      }
      *a1 = v26;
      a1[1] = v25;
      break;
    case 4:
      float v48 = a1[1];
      float v47 = a1[2];
      if (*a1 <= v47) {
        float v49 = a1[2];
      }
      else {
        float v49 = *a1;
      }
      if (*a1 <= v47) {
        float v47 = *a1;
      }
      a1[2] = v47;
      *a1 = v49;
      float v50 = *(a2 - 1);
      if (v48 <= v50) {
        float v51 = *(a2 - 1);
      }
      else {
        float v51 = v48;
      }
      if (v48 <= v50) {
        float v50 = v48;
      }
      *(a2 - 1) = v50;
      float v52 = *a1;
      if (*a1 <= v51) {
        float v53 = v51;
      }
      else {
        float v53 = *a1;
      }
      if (*a1 > v51) {
        float v52 = v51;
      }
      *a1 = v53;
      a1[1] = v52;
      float v54 = a1[2];
      float v55 = *(a2 - 1);
      if (v54 <= v55) {
        float v56 = *(a2 - 1);
      }
      else {
        float v56 = a1[2];
      }
      if (v54 > v55) {
        float v54 = *(a2 - 1);
      }
      *(a2 - 1) = v54;
      float v57 = a1[1];
      if (v57 <= v56) {
        float v58 = v56;
      }
      else {
        float v58 = a1[1];
      }
      if (v57 > v56) {
        float v57 = v56;
      }
      a1[1] = v58;
      a1[2] = v57;
      break;
    case 5:
      float v27 = *a1;
      float v28 = a1[1];
      if (*a1 <= v28) {
        float v29 = a1[1];
      }
      else {
        float v29 = *a1;
      }
      if (*a1 > v28) {
        float v27 = a1[1];
      }
      *a1 = v29;
      a1[1] = v27;
      float v30 = a1[3];
      float v31 = *(a2 - 1);
      if (v30 <= v31) {
        int v32 = *((_DWORD *)a2 - 1);
      }
      else {
        int v32 = *((_DWORD *)a1 + 3);
      }
      if (v30 > v31) {
        float v30 = *(a2 - 1);
      }
      *(a2 - 1) = v30;
      *((_DWORD *)a1 + 3) = v32;
      float v33 = *(a2 - 1);
      float v34 = a1[2];
      if (v33 <= v34) {
        float v35 = a1[2];
      }
      else {
        float v35 = *(a2 - 1);
      }
      if (v33 > v34) {
        float v33 = a1[2];
      }
      *(a2 - 1) = v33;
      int v37 = *((_DWORD *)a1 + 2);
      float v36 = a1[3];
      float v38 = a1[1];
      if (v35 <= v36)
      {
        int v37 = *((_DWORD *)a1 + 3);
        float v36 = v35;
      }
      *((_DWORD *)a1 + 2) = v37;
      a1[3] = v36;
      float v39 = *(a2 - 1);
      if (v38 <= v39) {
        float v40 = *(a2 - 1);
      }
      else {
        float v40 = v38;
      }
      if (v38 <= v39) {
        float v39 = v38;
      }
      *(a2 - 1) = v39;
      float v41 = *a1;
      float v43 = a1[2];
      float v42 = a1[3];
      if (v42 <= *a1) {
        float v44 = *a1;
      }
      else {
        float v44 = a1[3];
      }
      if (v42 > *a1) {
        float v42 = *a1;
      }
      if (v44 <= v43)
      {
        float v41 = a1[2];
        float v43 = v44;
      }
      if (v42 <= v40) {
        float v45 = v40;
      }
      else {
        float v45 = v42;
      }
      if (v42 > v40) {
        float v42 = v40;
      }
      if (v45 <= v43) {
        float v40 = v43;
      }
      *a1 = v41;
      a1[1] = v40;
      if (v45 <= v43) {
        float v46 = v45;
      }
      else {
        float v46 = v43;
      }
      a1[2] = v46;
      a1[3] = v42;
      break;
    default:
      float v5 = a1 + 2;
      float v6 = a1[2];
      float v8 = *a1;
      float v7 = a1[1];
      if (v7 <= v6) {
        float v9 = a1[2];
      }
      else {
        float v9 = a1[1];
      }
      if (v7 <= v6) {
        float v6 = a1[1];
      }
      if (v6 <= v8) {
        float v10 = *a1;
      }
      else {
        float v10 = v6;
      }
      if (v6 > v8) {
        float v6 = *a1;
      }
      *float v5 = v6;
      if (v10 <= v9) {
        float v11 = v9;
      }
      else {
        float v11 = v8;
      }
      if (v10 > v9) {
        float v10 = v9;
      }
      *a1 = v11;
      a1[1] = v10;
      float v12 = a1 + 3;
      if (a1 + 3 == a2)
      {
LABEL_29:
        BOOL v2 = 1;
      }
      else
      {
        int v13 = 0;
        uint64_t v14 = 12;
        while (1)
        {
          float v15 = *v12;
          float v16 = *v5;
          if (*v12 > *v5)
          {
            uint64_t v17 = v14;
            while (1)
            {
              *(float *)((char *)a1 + v17) = v16;
              uint64_t v18 = v17 - 4;
              if (v17 == 4) {
                break;
              }
              float v16 = *(float *)((char *)a1 + v17 - 8);
              v17 -= 4;
              if (v15 <= v16)
              {
                long long v19 = (float *)((char *)a1 + v18);
                goto LABEL_27;
              }
            }
            long long v19 = a1;
LABEL_27:
            float *v19 = v15;
            if (++v13 == 8) {
              break;
            }
          }
          float v5 = v12;
          v14 += 4;
          if (++v12 == a2) {
            goto LABEL_29;
          }
        }
        BOOL v2 = v12 + 1 == a2;
      }
      break;
  }
  return v2;
}

float *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *,float *>(float *a1, float *a2, float *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    float v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      float v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    int v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        float v15 = *v14;
        if (*v14 > *a1)
        {
          *uint64_t v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      int v13 = a3;
    }
    if (v8 >= 5)
    {
      uint64_t v16 = (unint64_t)v8 >> 2;
      do
      {
        uint64_t v17 = 0;
        float v18 = *a1;
        long long v19 = a1;
        do
        {
          float v20 = v19;
          v19 += v17 + 1;
          uint64_t v21 = 2 * v17;
          uint64_t v17 = (2 * v17) | 1;
          uint64_t v22 = v21 + 2;
          if (v22 < v16 && *v19 > v19[1])
          {
            ++v19;
            uint64_t v17 = v22;
          }
          float *v20 = *v19;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v19 == --v6)
        {
          float *v19 = v18;
        }
        else
        {
          float *v19 = *v6;
          float *v6 = v18;
          uint64_t v23 = (char *)v19 - (char *)a1 + 4;
          if (v23 >= 5)
          {
            unint64_t v24 = (((unint64_t)v23 >> 2) - 2) >> 1;
            float v25 = &a1[v24];
            float v26 = *v25;
            float v27 = *v19;
            if (*v25 > *v19)
            {
              do
              {
                float v28 = v25;
                float *v19 = v26;
                if (!v24) {
                  break;
                }
                unint64_t v24 = (v24 - 1) >> 1;
                float v25 = &a1[v24];
                float v26 = *v25;
                long long v19 = v28;
              }
              while (*v25 > v27);
              float *v28 = v27;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = (v4 >> 1) + 1;
      uint64_t v8 = (float *)(result + 4 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3 && *v8 > v8[1])
      {
        ++v8;
        uint64_t v7 = v9;
      }
      float v10 = *v8;
      float v11 = *a4;
      if (*v8 <= *a4)
      {
        do
        {
          float v12 = v8;
          *a4 = v10;
          if (v5 < v7) {
            break;
          }
          uint64_t v13 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          uint64_t v8 = (float *)(result + 4 * v7);
          uint64_t v14 = v13 + 2;
          if (v14 < a3 && *v8 > v8[1])
          {
            ++v8;
            uint64_t v7 = v14;
          }
          float v10 = *v8;
          a4 = v12;
        }
        while (*v8 <= v11);
        float *v12 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *,false>(uint64_t result, float *a2, uint64_t a3, uint64_t a4, char a5)
{
  float v10 = (float *)result;
LABEL_2:
  float v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    float v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          float v22 = *v11;
          float v23 = v11[1];
          if (sqrtf((float)(*(a2 - 1) * *(a2 - 1)) + (float)(*(a2 - 2) * *(a2 - 2))) > sqrtf((float)(v23 * v23)+ (float)(v22 * v22)))
          {
            *(void *)float v11 = *((void *)a2 - 1);
            *(a2 - 2) = v22;
            *(a2 - 1) = v23;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>(v11, v11 + 2, a2 - 2);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>(v11, v11 + 2, v11 + 4, (uint64_t)(a2 - 2));
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>(v11, v11 + 2, v11 + 4, v11 + 6, (uint64_t)(a2 - 2));
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *,MTPoint *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>(v11, &v11[2 * (v15 >> 1)], a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>(v11 + 2, v17 - 2, a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>(v11 + 4, &v11[2 * v16 + 2], a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>(v17 - 2, v17, &v11[2 * v16 + 2]);
      uint64_t v18 = *(void *)v11;
      *(void *)float v11 = *(void *)v17;
      *(void *)uint64_t v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>(&v11[2 * (v15 >> 1)], v11, a2 - 2);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (sqrtf((float)(*(v11 - 1) * *(v11 - 1)) + (float)(*(v11 - 2) * *(v11 - 2))) <= sqrtf((float)(v11[1] * v11[1])+ (float)(*v11 * *v11)))
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,MTPoint *,MTPointVelocityGreaterThan &>(v11, (unint64_t)a2);
      float v11 = (float *)result;
      goto LABEL_19;
    }
LABEL_14:
    long long v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,MTPoint *,MTPointVelocityGreaterThan &>(v11, (unint64_t)a2);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>(v11, v19);
    float v11 = v19 + 2;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>(v19 + 2, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *,false>(v10, v19, a3, -v13, a5 & 1);
      float v11 = v19 + 2;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>(v11, a2);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>(v11, a2);
  }
}

float *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>(float *result, float *a2)
{
  if (result != a2)
  {
    BOOL v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        float v5 = v4[2];
        float v6 = v4[3];
        float v7 = *v4;
        float v8 = v4[1];
        uint64_t v4 = v2;
        float v9 = sqrtf((float)(v6 * v6) + (float)(v5 * v5));
        if (v9 > sqrtf((float)(v8 * v8) + (float)(v7 * v7)))
        {
          uint64_t v10 = v3;
          while (1)
          {
            *(void *)((char *)result + v10 + 8) = *(void *)((char *)result + v10);
            if (!v10) {
              break;
            }
            float v11 = sqrtf((float)(*(float *)((char *)result + v10 - 4) * *(float *)((char *)result + v10 - 4))+ (float)(*(float *)((char *)result + v10 - 8) * *(float *)((char *)result + v10 - 8)));
            v10 -= 8;
            if (v9 <= v11)
            {
              uint64_t v12 = (float *)((char *)result + v10 + 8);
              goto LABEL_10;
            }
          }
          uint64_t v12 = result;
LABEL_10:
          float *v12 = v5;
          v12[1] = v6;
        }
        BOOL v2 = v4 + 2;
        v3 += 8;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

float *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>(float *result, float *a2)
{
  if (result != a2)
  {
    while (result + 2 != a2)
    {
      float v3 = result[2];
      float v4 = result[3];
      float v5 = *result;
      float v6 = result[1];
      BOOL v2 = result + 2;
      result += 2;
      float v7 = sqrtf((float)(v4 * v4) + (float)(v3 * v3));
      if (v7 > sqrtf((float)(v6 * v6) + (float)(v5 * v5)))
      {
        do
        {
          float v8 = v2;
          uint64_t v9 = *((void *)v2 - 1);
          v2 -= 2;
          *(void *)float v8 = v9;
        }
        while (v7 > sqrtf((float)(*(v8 - 3) * *(v8 - 3)) + (float)(*(v8 - 4) * *(v8 - 4))));
        float *v2 = v3;
        v2[1] = v4;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>(float *a1, float *a2, float *a3)
{
  float v3 = *a2;
  float v4 = a2[1];
  float v5 = sqrtf((float)(v4 * v4) + (float)(v3 * v3));
  float v7 = *a1;
  float v6 = a1[1];
  float v8 = sqrtf((float)(v6 * v6) + (float)(v7 * v7));
  float v9 = sqrtf((float)(a3[1] * a3[1]) + (float)(*a3 * *a3));
  if (v5 > v8)
  {
    if (v9 > v5)
    {
      *(void *)a1 = *(void *)a3;
      *a3 = v7;
      a3[1] = v6;
      return 1;
    }
    *(void *)a1 = *(void *)a2;
    *a2 = v7;
    a2[1] = v6;
    if (sqrtf((float)(a3[1] * a3[1]) + (float)(*a3 * *a3)) <= v8) {
      return 1;
    }
    *(void *)a2 = *(void *)a3;
    *a3 = v7;
    a3[1] = v6;
    return 2;
  }
  if (v9 > v5)
  {
    *(void *)a2 = *(void *)a3;
    *a3 = v3;
    a3[1] = v4;
    float v10 = *a1;
    float v11 = a1[1];
    if (sqrtf((float)(a2[1] * a2[1]) + (float)(*a2 * *a2)) <= sqrtf((float)(v11 * v11) + (float)(v10 * v10))) {
      return 1;
    }
    *(void *)a1 = *(void *)a2;
    *a2 = v10;
    a2[1] = v11;
    return 2;
  }
  return 0;
}

float *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,MTPoint *,MTPointVelocityGreaterThan &>(float *a1, unint64_t a2)
{
  float v2 = *a1;
  float v3 = a1[1];
  float v4 = sqrtf((float)(v3 * v3) + (float)(*a1 * *a1));
  if (v4 <= sqrtf((float)(*(float *)(a2 - 4) * *(float *)(a2 - 4)) + (float)(*(float *)(a2 - 8) * *(float *)(a2 - 8))))
  {
    float v8 = a1 + 2;
    do
    {
      float v5 = v8;
      if ((unint64_t)v8 >= a2) {
        break;
      }
      float v9 = sqrtf((float)(v8[1] * v8[1]) + (float)(*v8 * *v8));
      v8 += 2;
    }
    while (v4 <= v9);
  }
  else
  {
    float v5 = a1;
    do
    {
      float v6 = v5[2];
      float v7 = v5[3];
      v5 += 2;
    }
    while (v4 <= sqrtf((float)(v7 * v7) + (float)(v6 * v6)));
  }
  if ((unint64_t)v5 < a2)
  {
    do
    {
      float v10 = *(float *)(a2 - 8);
      float v11 = *(float *)(a2 - 4);
      a2 -= 8;
    }
    while (v4 > sqrtf((float)(v11 * v11) + (float)(v10 * v10)));
  }
  if ((unint64_t)v5 < a2)
  {
    float v12 = *v5;
    do
    {
      int v13 = *((_DWORD *)v5 + 1);
      *(void *)float v5 = *(void *)a2;
      *(float *)a2 = v12;
      *(_DWORD *)(a2 + 4) = v13;
      do
      {
        float v12 = v5[2];
        float v14 = v5[3];
        v5 += 2;
      }
      while (v4 <= sqrtf((float)(v14 * v14) + (float)(v12 * v12)));
      do
      {
        float v15 = *(float *)(a2 - 8);
        float v16 = *(float *)(a2 - 4);
        a2 -= 8;
      }
      while (v4 > sqrtf((float)(v16 * v16) + (float)(v15 * v15)));
    }
    while ((unint64_t)v5 < a2);
  }
  if (v5 - 2 != a1) {
    *(void *)a1 = *((void *)v5 - 1);
  }
  *(v5 - 2) = v2;
  *(v5 - 1) = v3;
  return v5;
}

float *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,MTPoint *,MTPointVelocityGreaterThan &>(float *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  float v3 = *a1;
  float v4 = a1[1];
  float v5 = sqrtf((float)(v4 * v4) + (float)(*a1 * *a1));
  do
  {
    float v6 = a1[v2 + 2];
    float v7 = sqrtf((float)(a1[v2 + 3] * a1[v2 + 3]) + (float)(v6 * v6));
    v2 += 2;
  }
  while (v7 > v5);
  float v8 = &a1[v2];
  if (v2 == 2)
  {
    do
    {
      if ((unint64_t)v8 >= a2) {
        break;
      }
      float v11 = *(float *)(a2 - 8);
      float v12 = *(float *)(a2 - 4);
      a2 -= 8;
    }
    while (sqrtf((float)(v12 * v12) + (float)(v11 * v11)) <= v5);
  }
  else
  {
    do
    {
      float v9 = *(float *)(a2 - 8);
      float v10 = *(float *)(a2 - 4);
      a2 -= 8;
    }
    while (sqrtf((float)(v10 * v10) + (float)(v9 * v9)) <= v5);
  }
  if ((unint64_t)v8 >= a2)
  {
    float v14 = &a1[v2];
  }
  else
  {
    unint64_t v13 = a2;
    float v14 = v8;
    do
    {
      int v15 = *((_DWORD *)v14 + 1);
      *(void *)float v14 = *(void *)v13;
      *(float *)unint64_t v13 = v6;
      *(_DWORD *)(v13 + 4) = v15;
      do
      {
        float v6 = v14[2];
        float v16 = v14[3];
        v14 += 2;
      }
      while (sqrtf((float)(v16 * v16) + (float)(v6 * v6)) > v5);
      do
      {
        float v17 = *(float *)(v13 - 8);
        float v18 = *(float *)(v13 - 4);
        v13 -= 8;
      }
      while (sqrtf((float)(v18 * v18) + (float)(v17 * v17)) <= v5);
    }
    while ((unint64_t)v14 < v13);
  }
  if (v14 - 2 != a1) {
    *(void *)a1 = *((void *)v14 - 1);
  }
  *(v14 - 2) = v3;
  *(v14 - 1) = v4;
  return v14 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>(float *a1, float *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = *a1;
      float v7 = a1[1];
      if (sqrtf((float)(*(a2 - 1) * *(a2 - 1)) + (float)(*(a2 - 2) * *(a2 - 2))) > sqrtf((float)(v7 * v7)+ (float)(v6 * v6)))
      {
        *(void *)a1 = *((void *)a2 - 1);
        *(a2 - 2) = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>(a1, a1 + 2, a1 + 4, (uint64_t)(a2 - 2));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>(a1, a1 + 2, a1 + 4, a1 + 6, (uint64_t)(a2 - 2));
      return 1;
    default:
      float v8 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>(a1, a1 + 2, a1 + 4);
      float v9 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    float v12 = *v9;
    float v13 = v9[1];
    float v14 = sqrtf((float)(v13 * v13) + (float)(v12 * v12));
    if (v14 > sqrtf((float)(v8[1] * v8[1]) + (float)(*v8 * *v8)))
    {
      uint64_t v15 = v10;
      while (1)
      {
        *(void *)((char *)a1 + v15 + 24) = *(void *)((char *)a1 + v15 + 16);
        if (v15 == -16) {
          break;
        }
        float v16 = sqrtf((float)(*(float *)((char *)a1 + v15 + 12) * *(float *)((char *)a1 + v15 + 12))+ (float)(*(float *)((char *)a1 + v15 + 8) * *(float *)((char *)a1 + v15 + 8)));
        v15 -= 8;
        if (v14 <= v16)
        {
          float v17 = (float *)((char *)a1 + v15 + 24);
          goto LABEL_12;
        }
      }
      float v17 = a1;
LABEL_12:
      *float v17 = v12;
      v17[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    float v8 = v9;
    v10 += 8;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>(float *a1, float *a2, float *a3, uint64_t a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>(a1, a2, a3);
  float v9 = *a3;
  float v10 = a3[1];
  if (sqrtf((float)(*(float *)(a4 + 4) * *(float *)(a4 + 4)) + (float)(*(float *)a4 * *(float *)a4)) > sqrtf((float)(v10 * v10) + (float)(v9 * v9)))
  {
    *(void *)a3 = *(void *)a4;
    *(float *)a4 = v9;
    *(float *)(a4 + 4) = v10;
    float v11 = *a2;
    float v12 = a2[1];
    if (sqrtf((float)(a3[1] * a3[1]) + (float)(*a3 * *a3)) > sqrtf((float)(v12 * v12) + (float)(v11 * v11)))
    {
      *(void *)a2 = *(void *)a3;
      *a3 = v11;
      a3[1] = v12;
      float v13 = *a1;
      float v14 = a1[1];
      if (sqrtf((float)(a2[1] * a2[1]) + (float)(*a2 * *a2)) > sqrtf((float)(v14 * v14) + (float)(v13 * v13)))
      {
        *(void *)a1 = *(void *)a2;
        *a2 = v13;
        a2[1] = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>(float *a1, float *a2, float *a3, float *a4, uint64_t a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>(a1, a2, a3, (uint64_t)a4);
  float v11 = *a4;
  float v12 = a4[1];
  if (sqrtf((float)(*(float *)(a5 + 4) * *(float *)(a5 + 4)) + (float)(*(float *)a5 * *(float *)a5)) > sqrtf((float)(v12 * v12) + (float)(v11 * v11)))
  {
    *(void *)a4 = *(void *)a5;
    *(float *)a5 = v11;
    *(float *)(a5 + 4) = v12;
    float v13 = *a3;
    float v14 = a3[1];
    if (sqrtf((float)(a4[1] * a4[1]) + (float)(*a4 * *a4)) > sqrtf((float)(v14 * v14) + (float)(v13 * v13)))
    {
      *(void *)a3 = *(void *)a4;
      *a4 = v13;
      a4[1] = v14;
      float v15 = *a2;
      float v16 = a2[1];
      if (sqrtf((float)(a3[1] * a3[1]) + (float)(*a3 * *a3)) > sqrtf((float)(v16 * v16) + (float)(v15 * v15)))
      {
        *(void *)a2 = *(void *)a3;
        *a3 = v15;
        a3[1] = v16;
        float v17 = *a1;
        float v18 = a1[1];
        if (sqrtf((float)(a2[1] * a2[1]) + (float)(*a2 * *a2)) > sqrtf((float)(v18 * v18) + (float)(v17 * v17)))
        {
          *(void *)a1 = *(void *)a2;
          *a2 = v17;
          a2[1] = v18;
        }
      }
    }
  }
  return result;
}

float *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *,MTPoint *>(float *a1, float *a2, float *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      float v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    float v13 = a2;
    if (a2 != a3)
    {
      float v14 = a2;
      do
      {
        float v15 = *v14;
        float v16 = v14[1];
        if (sqrtf((float)(v16 * v16) + (float)(v15 * v15)) > sqrtf((float)(a1[1] * a1[1]) + (float)(*a1 * *a1)))
        {
          *(void *)float v14 = *(void *)a1;
          *a1 = v15;
          a1[1] = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      float v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v17 = (unint64_t)v8 >> 3;
      float v18 = a2 - 2;
      do
      {
        float v20 = *a1;
        int v19 = *((_DWORD *)a1 + 1);
        BOOL v21 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>(a1, a4, v17);
        if (v18 == v21)
        {
          float *v21 = v20;
          *((_DWORD *)v21 + 1) = v19;
        }
        else
        {
          *(void *)BOOL v21 = *(void *)v18;
          float *v18 = v20;
          *((_DWORD *)v18 + 1) = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>((uint64_t)a1, (uint64_t)(v21 + 2), a4, ((char *)(v21 + 2) - (char *)a1) >> 3);
        }
        v18 -= 2;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (float *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3
        && sqrtf((float)(v8[1] * v8[1]) + (float)(*v8 * *v8)) > sqrtf((float)(v8[3] * v8[3]) + (float)(v8[2] * v8[2])))
      {
        v8 += 2;
        uint64_t v7 = v9;
      }
      float v10 = *a4;
      float v11 = a4[1];
      float v12 = sqrtf((float)(v11 * v11) + (float)(v10 * v10));
      if (sqrtf((float)(v8[1] * v8[1]) + (float)(*v8 * *v8)) <= v12)
      {
        do
        {
          float v13 = v8;
          *(void *)a4 = *(void *)v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v14 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          uint64_t v8 = (float *)(result + 8 * v7);
          uint64_t v15 = v14 + 2;
          if (v15 < a3
            && sqrtf((float)(v8[1] * v8[1]) + (float)(*v8 * *v8)) > sqrtf((float)(v8[3] * v8[3]) + (float)(v8[2] * v8[2])))
          {
            v8 += 2;
            uint64_t v7 = v15;
          }
          a4 = v13;
        }
        while (sqrtf((float)(v8[1] * v8[1]) + (float)(*v8 * *v8)) <= v12);
        float *v13 = v10;
        v13[1] = v11;
      }
    }
  }
  return result;
}

float *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>(float *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = result;
    result += 2 * v3 + 2;
    uint64_t v7 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v8 = v7 + 2;
    if (v8 < a3
      && sqrtf((float)(result[1] * result[1]) + (float)(*result * *result)) > sqrtf((float)(result[3] * result[3])+ (float)(result[2] * result[2])))
    {
      result += 2;
      uint64_t v3 = v8;
    }
    *(void *)uint64_t v6 = *(void *)result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MTPointVelocityGreaterThan &,MTPoint *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v5 = (float *)(result + 8 * v4);
    float v7 = *(float *)(a2 - 8);
    float v8 = *(float *)(a2 - 4);
    uint64_t v6 = (float *)(a2 - 8);
    float v9 = sqrtf((float)(v8 * v8) + (float)(v7 * v7));
    if (sqrtf((float)(v5[1] * v5[1]) + (float)(*v5 * *v5)) > v9)
    {
      do
      {
        float v10 = v5;
        *(void *)uint64_t v6 = *(void *)v5;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v5 = (float *)(result + 8 * v4);
        uint64_t v6 = v10;
      }
      while (sqrtf((float)(v5[1] * v5[1]) + (float)(*v5 * *v5)) > v9);
      float *v10 = v7;
      v10[1] = v8;
    }
  }
  return result;
}

void *std::vector<MTPoint>::__init_with_size[abi:ne180100]<MTPoint*,MTPoint*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<std::atomic<HSUtil::CoderKey const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_599B8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<MTPoint>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(char **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    size_t v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  float v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  float v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  uint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_59AFC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void __cxx_global_var_init_29()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_28(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_currentTimestamp", a2);
  }
}

void __cxx_global_var_init_3_28(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_previousTimestamp", a2);
  }
}

void __cxx_global_var_init_4_28(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)114,(char)101,(char)108,(char)101,(char)97,(char)115,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_release", a2);
  }
}

void __cxx_global_var_init_5_28(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)97,(char)99,(char)116,(char)105,(char)118,(char)97,(char)116,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_activation", a2);
  }
}

void __cxx_global_var_init_6_28(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)101,(char)97,(char)114,(char)108,(char)105,(char)101,(char)115,(char)116,(char)78,(char)111,(char)110,(char)68,(char)105,(char)118,(char)105,(char)110,(char)103,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_earliestNonDivingTimestamp", a2);
  }
}

void __cxx_global_var_init_7_28(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)100,(char)105,(char)118,(char)105,(char)110,(char)103,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)67,(char)104,(char)97,(char)110,(char)103,(char)101,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_divingButtonChangeTimestamp", a2);
  }
}

void __cxx_global_var_init_8_29(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)105,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_min", a2);
  }
}

void __cxx_global_var_init_9_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_max", a2);
  }
}

void __cxx_global_var_init_10_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)66,(char)114,(char)101,(char)97,(char)107,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerBreakTouch_max", a2);
  }
}

void __cxx_global_var_init_11_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)82,(char)101,(char)115,(char)101,(char)116>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentReset", a2);
  }
}

void __cxx_global_var_init_12_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)65,(char)99,(char)116,(char)105,(char)118,(char)105,(char)116,(char)121>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentButtonActivity", a2);
  }
}

void __cxx_global_var_init_13_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_firstFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_14_13(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_firstFingerCleanStartInRange", a2);
  }
}

void __cxx_global_var_init_15_22(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerCleanStartInRange", a2);
  }
}

void __cxx_global_var_init_16_22(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_17_22(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_previousRecentFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_18_22(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)78,(char)111,(char)110,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)100,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentNonThumbTouchdown", a2);
  }
}

void __cxx_global_var_init_19_22(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_restingThumbTouchDown", a2);
  }
}

void __cxx_global_var_init_20_22(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)84,(char)119,(char)111,(char)79,(char)114,(char)77,(char)111,(char)114,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentTwoOrMoreFingersTouching", a2);
  }
}

void __cxx_global_var_init_21_23(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)118,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFiveFingersTouching", a2);
  }
}

void __cxx_global_var_init_22_23(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)76,(char)105,(char)102,(char)116,(char)111,(char)102,(char)102>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerLiftoff", a2);
  }
}

void __cxx_global_var_init_23_23(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)69,(char)110,(char)100>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerEnd", a2);
  }
}

void __cxx_global_var_init_24_23(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentScrollZoom", a2);
  }
}

void __cxx_global_var_init_25_23(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)119,(char)105,(char)116,(char)99,(char)104>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentChordSwitch", a2);
  }
}

void __cxx_global_var_init_26_23(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentChordSlide", a2);
  }
}

void __cxx_global_var_init_27_22(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109,(char)83,(char)108,(char)105,(char)100,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentScrollZoomSlide", a2);
  }
}

void __cxx_global_var_init_28_22(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)108,(char)117,(char)105,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentFluidSlide", a2);
  }
}

void __cxx_global_var_init_29_22(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)101,(char)120,(char)99,(char)101,(char)115,(char)115,(char)84,(char)97,(char)112,(char)77,(char)111,(char)116,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_excessTapMotion", a2);
  }
}

void __cxx_global_var_init_30_22(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)104,(char)97,(char)110,(char)100,(char)95,(char)99,(char)104,(char)111,(char)114,(char)100,(char)115>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"righthand_chords", a2);
  }
}

MTFingerToPathMap_ *MTHandMotion_::MTHandMotion_(MTFingerToPathMap_ *a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  MTFingerToPathMap_::MTFingerToPathMap_(a1, 1);
  *(void *)uint64_t v12 = off_141868;
  *(void *)(v12 + 12objc_storeStrong(&location, 0) = a2;
  *(_DWORD *)(v12 + 128) = a3;
  *(_DWORD *)(v12 + 132) = a4;
  *(_DWORD *)(v12 + 38objc_storeStrong(&location, 0) = a5;
  *(void *)(v12 + 384) = a6;
  MTParameterFactory_::initMotionExtractionParams(v12 + 144);
  MTHandMotion_::clearHandMotion((MTHandMotion_ *)a1, 1);
  return a1;
}

void sub_5A2E4(_Unwind_Exception *a1)
{
  MTFingerToPathMap_::~MTFingerToPathMap_(v1);
  _Unwind_Resume(a1);
}

void MTHandMotion_::clear(MTHandMotion_ *this)
{
}

void MTHandMotion_::~MTHandMotion_(MTHandMotion_ *this)
{
  MTFingerToPathMap_::~MTFingerToPathMap_((MTFingerToPathMap_ *)this);

  operator delete();
}

void MTHandMotion_::clearHandMotion(MTHandMotion_ *this, int a2)
{
  char v2 = a2;
  if (a2)
  {
    *((_DWORD *)this + 6MTHandMotion_::clearHandMotion(this, 1) = 0;
    *((_DWORD *)this + 62) = 0;
    *((_OWORD *)this + 1objc_storeStrong(&location, 0) = 0u;
    *((_OWORD *)this + 1MTHandMotion_::clearHandMotion(this, 1) = 0u;
  }
  *((_DWORD *)this + 35) = 0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 6objc_storeStrong(&location, 0) = 0;
  *(_OWORD *)((char *)this + 284) = 0u;
  *(_OWORD *)((char *)this + 30objc_storeStrong(&location, 0) = 0u;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)((char *)this + 252) = _Q0;
  *((_DWORD *)this + 67) = 1065353216;
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)this + 34) = _Q0;
  *((unsigned char *)this + 28objc_storeStrong(&location, 0) = 0;
  *((_DWORD *)this + 29) = 0;
  *((unsigned char *)this + 376) = 0;
  *((void *)this + 46) = 0;
  MTFingerToPathMap_::clearFingerPathMappings((MTFingerToPathMap_ *)this);
  size_t v8 = MTLoggingPlugin();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
    MTHandMotion_::clearHandMotion(v2, v8);
  }
}

float MTHandMotion_::computeSeparation_mm(float *a1, uint64_t a2, uint64_t a3)
{
  float v3 = *(float *)(a3 + 68);
  float v4 = *(float *)(a3 + 72);
  float v5 = *(float *)(a2 + 68);
  float v6 = *(float *)(a2 + 72);
  float v7 = v4 - v6;
  float v8 = vabds_f32(v4, v6);
  a1[88] = v8;
  if (v8 > a1[89]) {
    a1[89] = v8;
  }
  float v9 = v3 - v5;
  a1[87] = sqrtf((float)(v7 * v7) + (float)(v9 * v9));
  float result = sqrtf((float)((float)(v7 * 0.5) * (float)(v7 * 0.5)) + (float)(v9 * v9));
  a1[90] = result;
  return result;
}

float MTHandMotion_::computeInnerOuterSpeedSymmetry(MTHandMotion_ *this, const MTParserPath_ *a2, const MTParserPath_ *a3)
{
  float y = a2[4].var3.var6.y;
  int var5 = a2[4].var3.var5;
  float x = a2[4].var3.var6.x;
  float v6 = sqrtf((float)(*(float *)&var5 * *(float *)&var5) + (float)(x * x));
  float v7 = 1.0;
  if (v6 > 0.0)
  {
    int v8 = a3[4].var3.var5;
    float v9 = a3[4].var3.var6.x;
    float v10 = sqrtf((float)(*(float *)&v8 * *(float *)&v8) + (float)(v9 * v9));
    if (v10 > 0.0) {
      float v7 = (float)((float)(x * v9) + (float)(*(float *)&var5 * *(float *)&v8)) / (float)(v6 * v10);
    }
  }
  float result = 0.0;
  if (y > 20.0)
  {
    float v12 = -1.0;
    if (v7 >= 0.0) {
      float v12 = 1.0;
    }
    BOOL v13 = v7 <= 0.5;
    float v14 = 1.5;
    if (v13) {
      float v14 = v12;
    }
    return (float)(sqrtf(y * a3[4].var3.var6.y) / (float)((float)((float)(y + a3[4].var3.var6.y) * 0.5) + 1.0)) * v14;
  }
  return result;
}

void MTHandMotion_::extractHandMotion(MTHandMotion_ *this, const MTPathStates_ *a2, MTParserPath_ *a3, const MTParserPath_ *a4, int a5)
{
  if (*((double *)a2 + 1) - *((double *)a2 + 2) == 0.0)
  {
    float v10 = MTLoggingPlugin();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *((void *)a2 + 1);
      MTAbsoluteTimeGetCurrent();
      *(_DWORD *)buf = 136316162;
      int v37 = "[Error] ";
      __int16 v38 = 2080;
      float v39 = "";
      __int16 v40 = 2080;
      float v41 = "extractHandMotion";
      __int16 v42 = 2048;
      uint64_t v43 = v11;
      __int16 v44 = 2048;
      uint64_t v45 = v12;
      _os_log_impl(&def_411C8, v10, OS_LOG_TYPE_ERROR, "[HID] [MT] %s%s%s Frame interval is zero! currentTimestamp = %g, currentHostTimestamp = %g", buf, 0x34u);
    }
  }
  float32x2_t v13 = *(float32x2_t *)&a3[3].var3.var12;
  int var2 = a3[3].var2;
  float32x2_t v15 = *(float32x2_t *)&a4[3].var3.var12;
  int v16 = a4[3].var2;
  *(void *)((char *)this + 348) = 0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_DWORD *)this + 9MTHandMotion_::clearHandMotion(this, 1) = *((_DWORD *)this + 90);
  *((_DWORD *)this + 9objc_storeStrong(&location, 0) = 0;
  int v17 = a3->var3.var2;
  if (v17)
  {
    *((float32x2_t *)this + 26) = vadd_f32((float32x2_t)a3[4].var3.var0, 0);
    *((float32x2_t *)this + 2MTHandMotion_::clearHandMotion(this, 1) = vadd_f32(v13, (float32x2_t)a3->var3.var6);
    if (a5)
    {
      if (LODWORD(a3[1].var3.var0) && (var2 & 4) != 0)
      {
        *((float *)this + 48) = a3[3].var3.var13.y + 0.0;
        *((float *)this + 49) = a3[3].var3.var14.x + 0.0;
      }
    }
  }
  int v18 = a4->var3.var2;
  if (v17 == v18 || !v18)
  {
    *((void *)this + 22) = 0;
    return;
  }
  float v19 = a4->var3.var6.x - a3->var3.var6.x;
  float v20 = a4->var3.var6.y - a3->var3.var6.y;
  float v21 = sqrtf((float)(v20 * v20) + (float)(v19 * v19));
  float v22 = atan2f(-v20, v19);
  float v23 = *(float *)&a3[4].var3.var0;
  float v24 = *((float *)&a3[4].var3.var0 + 1);
  int64_t var0 = a4[4].var3.var0;
  MTHandMotion_::computeSeparation_mm((float *)this, (uint64_t)&a3->var3, (uint64_t)&a4->var3);
  *((float *)this + 44) = v21;
  *((float *)this + 45) = v22;
  *((float32x2_t *)this + 2MTHandMotion_::clearHandMotion(this, 1) = vmul_f32(vadd_f32(*(float32x2_t *)((char *)this + 168), vadd_f32(v15, (float32x2_t)a4->var3.var6)), (float32x2_t)0x3F0000003F000000);
  v26.n128_u64[0] = (unint64_t)vmul_f32(vadd_f32((float32x2_t)var0, *(float32x2_t *)((char *)this + 208)), (float32x2_t)0x3F0000003F000000);
  *((void *)this + 26) = v26.n128_u64[0];
  unsigned int v27 = *((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20) == 1)
  {
    if (v27 != 1) {
      goto LABEL_18;
    }
  }
  else if (v27 != 1)
  {
    goto LABEL_22;
  }
  unsigned int v27 = *((_DWORD *)this + 20);
LABEL_18:
  if (v27 > 0xF) {
    int v28 = 0;
  }
  else {
    int v28 = *((_DWORD *)this + v27 + 2);
  }
  *((unsigned char *)this + 28objc_storeStrong(&location, 0) = MTHandMotion_::computeInnerOuterSpeedSymmetry(v25, (const MTParserPath_ *)(*((void *)a2 + 35) + 568 * *((int *)this + 3)), (const MTParserPath_ *)(*((void *)a2 + 35) + 568 * v28)) > 0.85;
LABEL_22:
  if (v21 > 0.0)
  {
    v26.n128_f32[0] = v20 / v21;
    *((float *)this + 54) = vmlas_n_f32(vmuls_lane_f32(v20 / v21, (float32x2_t)var0, 1), v19 / v21, *(float *)&var0)
                          - (float)((float)(v24 * (float)(v20 / v21)) + (float)(v23 * (float)(v19 / v21)));
    *((float *)this + 55) = vmlas_n_f32(-(float)(*((float *)&var0 + 1) * (float)(v19 / v21)), v20 / v21, *(float *)&var0)- (float)((float)(v23 * (float)(v20 / v21)) - (float)(v24 * (float)(v19 / v21)));
    if (a5
      && LODWORD(a4[1].var3.var0)
      && LODWORD(a3[1].var3.var0)
      && ((var2 | v16) & 4) != 0)
    {
      float v29 = *(float *)&a3[1].var3.var2 - *(float *)&a4[1].var3.var2;
      float v30 = *(float *)&a3[1].var3.var3 - *(float *)&a4[1].var3.var3;
      float v31 = sqrtf((float)(v30 * v30) + (float)(v29 * v29));
      float y = a3[3].var3.var13.y;
      float x = a3[3].var3.var14.x;
      float32x2_t v34 = *(float32x2_t *)&a4[3].var3.var13.y;
      *((float32x2_t *)this + 24) = vmul_f32(vadd_f32(v34, *(float32x2_t *)((char *)this + 192)), (float32x2_t)0x3F0000003F000000);
      v26.n128_f32[0] = vmlas_n_f32(-(float)(v34.f32[1] * (float)(v19 / v21)), v26.n128_f32[0], v34.f32[0])
                      - (float)((float)(y * v26.n128_f32[0]) - (float)(x * (float)(v19 / v21)));
      *((float *)this + 5objc_storeStrong(&location, 0) = v21 - v31;
      *((float *)this + 5MTHandMotion_::clearHandMotion(this, 1) = v26.n128_f32[0];
    }
    if ((a3->var3.var3 - 3) <= 1
      && (HIDWORD(a3[1].var3.var0) - 3) <= 1
      && MTParserPath_::isFingerContact(a3)
      && *((unsigned __int8 *)this + 101) >= 3u)
    {
      MTHandMotion_::combineCentralFingerScaleRotate(this, a2, a3);
    }
    if (*((unsigned char *)this + 138)
      || *((_DWORD *)this + 20) != 1 && *((_DWORD *)this + 22) != 1 && *((unsigned char *)this + 139)
      || *((unsigned __int8 *)this + 101) > 2u
      || *((unsigned char *)this + 376))
    {
      MTHandMotion_::extractFastestFingerTranslation(this, a2, v26);
    }
  }
}

void sub_5A910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

MTHandMotion_ *MTHandMotion_::combineCentralFingerScaleRotate(MTHandMotion_ *this, const MTPathStates_ *a2, const MTParserPath_ *a3)
{
  int v3 = *((_DWORD *)this + 20) + 1;
  if (v3 < *((_DWORD *)this + 22))
  {
    float v6 = this;
    int v7 = 0;
    float v8 = *(float *)&a3[4].var3.var0;
    float v9 = *((float *)&a3[4].var3.var0 + 1);
    float v10 = 0.0;
    float v11 = 0.0;
    do
    {
      if (v3 <= 0xF)
      {
        unsigned int v12 = *((_DWORD *)v6 + v3 + 2);
        if ((int)v12 >= 1)
        {
          uint64_t v13 = *((void *)a2 + 35);
          this = (MTHandMotion_ *)(v13 + 568 * v12);
          if ((*((_DWORD *)this + 9) - 3) <= 1
            && (*(_DWORD *)(v13 + 568 * v12 + 132) - 3) <= 1)
          {
            this = (MTHandMotion_ *)MTParserPath_::isFingerContact((MTParserPath_ *)this);
            if (this)
            {
              float v14 = (float *)(v13 + 568 * v12);
              float v15 = v14[12] - a3->var3.var6.x;
              float v16 = v14[13] - a3->var3.var6.y;
              float v17 = v14[36] - *(float *)&a3[1].var3.var2;
              float v18 = sqrtf((float)(v16 * v16) + (float)(v15 * v15));
              float v10 = v10
                  + (float)(v18
                          - sqrtf((float)((float)(v14[37] - *(float *)&a3[1].var3.var3)* (float)(v14[37] - *(float *)&a3[1].var3.var3))+ (float)(v17 * v17)));
              float v11 = v11
                  + (float)((float)((float)(v14[117] * (float)(v16 / v18)) + (float)(v14[116] * (float)(v15 / v18)))
                          - (float)((float)(v9 * (float)(v16 / v18)) + (float)(v8 * (float)(v15 / v18))));
              ++v7;
            }
          }
        }
      }
      ++v3;
    }
    while (v3 < *((_DWORD *)v6 + 22));
    if (v7 > 0)
    {
      float v19 = v10 / (float)v7;
      float v20 = v11 / (float)v7;
      float v21 = *((float *)v6 + 50);
      if (fabsf(v19) > fabsf(v21)) {
        *((float *)v6 + 5objc_storeStrong(&location, 0) = (float)(v19 + v21) * 0.5;
      }
      float v22 = *((float *)v6 + 54);
      if (fabsf(v20) > fabsf(v22)) {
        *((float *)v6 + 54) = (float)(v20 + v22) * 0.5;
      }
    }
  }
  return this;
}

MTHandMotion_ *MTHandMotion_::extractFastestFingerTranslation(MTHandMotion_ *this, const MTPathStates_ *a2, __n128 a3)
{
  float v4 = this;
  uint64_t v5 = 0;
  float v6 = (char *)this + 12;
  float32x2_t v7 = 0;
  a3.n128_u64[0] = 0;
  __n128 v17 = a3;
  float32x2_t v8 = 0;
  do
  {
    unsigned int v9 = *(_DWORD *)&v6[v5];
    if ((int)v9 >= 1)
    {
      uint64_t v10 = *((void *)a2 + 35);
      if ((*(_DWORD *)(v10 + 568 * v9 + 36) - 3) <= 1)
      {
        this = (MTHandMotion_ *)MTParserPath_::isFingerContact((MTParserPath_ *)(v10 + 568 * v9));
        if (this)
        {
          float v11 = (float32x2_t *)(v10 + 568 * v9);
          float v12 = v11[62].f32[1] + 0.5;
          int v13 = *((_DWORD *)v4 + 32);
          if (v13 >= 1000 && v5 == 16 && v13 <= 0x7CF)
          {
            float v14 = (float)(v12 * 0.5) * 0.5;
            if (*((unsigned __int8 *)v4 + 101) > 4u) {
              float v12 = v12 * 0.5;
            }
            else {
              float v14 = v11[62].f32[1] + 0.5;
            }
          }
          else
          {
            float v14 = v11[62].f32[1] + 0.5;
          }
          __n128 v15 = v17;
          v15.n128_f32[0] = v17.n128_f32[0] + v12;
          __n128 v17 = v15;
          float32x2_t v7 = vmla_n_f32(v7, v11[53], v14);
          float32x2_t v8 = vmla_n_f32(v8, v11[58], v14);
        }
      }
    }
    v5 += 4;
  }
  while (v5 != 20);
  if (v17.n128_f32[0] > 0.0)
  {
    float32x2_t v16 = (float32x2_t)vdup_lane_s32((int32x2_t)v17.n128_u64[0], 0);
    float32x2_t v7 = vdiv_f32(v7, v16);
    float32x2_t v8 = vdiv_f32(v8, v16);
  }
  *((float32x2_t *)v4 + 24) = v7;
  *((float32x2_t *)v4 + 26) = v8;
  return this;
}

float MTHandMotion_::getSpeedSymmetry(MTHandMotion_ *this, float a2, int a3)
{
  switch(a3)
  {
    case 1:
      float v4 = *((float *)this + 68);
      goto LABEL_9;
    case 2:
      float v4 = *((float *)this + 67);
      goto LABEL_9;
    case 4:
      float v4 = *((float *)this + 66);
      goto LABEL_9;
    case 7:
      return 1.0 - powf(*((float *)this + 65), a2);
    default:
      if ((*((_DWORD *)this + 32) - 1000) > 0x3E7) {
        float v4 = *((float *)this + 64);
      }
      else {
        float v4 = *((float *)this + 65);
      }
LABEL_9:
      return powf(v4, a2);
  }
}

uint64_t MTHandMotion_::fastest1FingerMask(MTHandMotion_ *this, const MTPathStates_ *a2, float *a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  float32x2_t v7 = (char *)this + 12;
  do
  {
    unsigned int v8 = *(_DWORD *)&v7[4 * v5];
    if ((int)v8 >= 1)
    {
      uint64_t v9 = *((void *)a2 + 35);
      if ((*(_DWORD *)(v9 + 568 * v8 + 36) - 3) <= 1
        && MTParserPath_::isFingerContact((MTParserPath_ *)(v9 + 568 * v8))
        && !*(unsigned char *)(v9 + 568 * v8 + 545))
      {
        float v10 = *(float *)(v9 + 568 * v8 + 500);
        if (v10 > *a3)
        {
          uint64_t v6 = (1 << v5);
          *a3 = v10;
        }
      }
    }
    ++v5;
  }
  while (v5 != 5);
  return v6;
}

uint64_t MTHandMotion_::fastest2FpairMask(MTHandMotion_ *this, const MTPathStates_ *a2)
{
  uint64_t v3 = 0;
  float v4 = (char *)this + 16;
  float v5 = 0.0;
  float v6 = 0.0;
  float v7 = 0.0;
  do
  {
    unsigned int v8 = *(_DWORD *)&v4[4 * v3];
    if ((int)v8 >= 1)
    {
      uint64_t v9 = *((void *)a2 + 35);
      if ((*(_DWORD *)(v9 + 568 * v8 + 36) - 3) <= 1)
      {
        MTParserPath_::isFingerContact((MTParserPath_ *)(v9 + 568 * v8));
        switch((int)v3)
        {
          case 0:
            float v7 = v7 + *(float *)(v9 + 568 * v8 + 500);
            break;
          case 1:
            float v10 = *(float *)(v9 + 568 * v8 + 500);
            float v7 = v7 + v10;
            goto LABEL_8;
          case 2:
            float v10 = *(float *)(v9 + 568 * v8 + 500);
            float v5 = v5 + v10;
LABEL_8:
            float v6 = v6 + v10;
            break;
          case 3:
            float v5 = v5 + *(float *)(v9 + 568 * v8 + 500);
            break;
          default:
            break;
        }
      }
    }
    ++v3;
  }
  while (v3 != 4);
  if (v5 <= v6 || v5 <= v7) {
    unsigned int v12 = 6;
  }
  else {
    unsigned int v12 = 24;
  }
  if (v6 <= v5 || v6 <= v7) {
    return v12;
  }
  else {
    return 12;
  }
}

void MTHandMotion_::computeSpeedSymmetry(MTHandMotion_ *this, const MTPathStates_ *a2, unsigned int a3, float a4, float a5)
{
  uint64_t v9 = 0;
  float v10 = (char *)this + 12;
  float v11 = 0.0;
  float v12 = 0.0;
  float v13 = 1.0;
  do
  {
    unsigned int v14 = *(_DWORD *)&v10[4 * v9];
    if ((int)v14 >= 1)
    {
      uint64_t v15 = *((void *)a2 + 35);
      uint64_t v16 = v15 + 568 * v14;
      if ((*(_DWORD *)(v16 + 36) - 3) <= 1)
      {
        float v17 = *(float *)(v16 + 500);
        if (MTParserPath_::isFingerContact((MTParserPath_ *)(v15 + 568 * v14)))
        {
          float v18 = v17 + 1.0;
          if ((a3 >> v9))
          {
            float v13 = v13 * v18;
            float v12 = v12 + v18;
            float v11 = v11 + 1.0;
          }
          else if (a4 > 0.0 && !*(unsigned char *)(v15 + 568 * v14 + 545) && v18 <= a4)
          {
            float v13 = v13 * powf(1.0 - (float)(v18 / a4), a5);
          }
        }
      }
    }
    ++v9;
  }
  while (v9 != 5);
  if (v11 > 0.0) {
    pow(v13, 1.0 / v11);
  }
}

void MTHandMotion_::computeSpeedSymmetries(MTHandMotion_ *this, const MTPathStates_ *a2, unsigned int a3)
{
  MTHandMotion_::computeSpeedSymmetry(this, a2, 0x1Fu, 0.0, 1.0);
  *((_DWORD *)this + 64) = v6;
  MTHandMotion_::computeSpeedSymmetry(this, a2, a3, 0.0, 1.0);
  *((_DWORD *)this + 65) = v7;
  float v14 = 0.0;
  unsigned __int16 v8 = MTHandMotion_::fastest1FingerMask(this, a2, &v14);
  float v9 = v14;
  MTHandMotion_::computeSpeedSymmetry(this, a2, v8, v14, 1.0);
  *((_DWORD *)this + 68) = v10;
  unsigned __int16 v11 = MTHandMotion_::fastest2FpairMask(this, a2);
  MTHandMotion_::computeSpeedSymmetry(this, a2, v11, v9, 2.0);
  *((_DWORD *)this + 67) = v12;
  MTHandMotion_::computeSpeedSymmetry(this, a2, 0x1Eu, v9, 2.0);
  *((_DWORD *)this + 66) = v13;
}

float MTHandMotion_::computeTrackpadDominanceWeights(MTHandMotion_ *this, float *a2, float *a3)
{
  if (!*((unsigned char *)this + 138)
    && ((float result = *((float *)this + 87), *((_DWORD *)this + 20) == 1)
     || *((_DWORD *)this + 22) == 1
     || !*((unsigned char *)this + 139))
    && (unsigned int v4 = *((unsigned __int8 *)this + 101), v4 <= 2))
  {
    *a2 = 0.45;
    *a3 = 0.45;
  }
  else
  {
    float result = *((float *)this + 90);
    unsigned int v4 = *((unsigned __int8 *)this + 101);
    *a2 = 0.45;
    *a3 = 0.45;
    if (v4 == 5) {
      goto LABEL_7;
    }
  }
  if (*((_DWORD *)this + 20) != 1 && *((_DWORD *)this + 22) != 1)
  {
    if (v4 >= 3)
    {
      int v5 = 1036831949;
      goto LABEL_17;
    }
    if (result <= 55.0)
    {
      if (result <= 35.0)
      {
LABEL_23:
        float result = *((float *)this + 58);
        if (result < 0.0)
        {
          float v7 = *((float *)this + 57);
          if (v7 > 0.0)
          {
            float v8 = fabsf(*((float *)this + 56)) + fabsf(*((float *)this + 59));
            float result = v7 - result;
            if (result > 0.0 && v8 < result)
            {
              float result = *a2 / (float)(2.0 - (float)((float)(v8 / result) * (float)(v8 / result)));
              *a2 = result;
            }
          }
        }
        return result;
      }
      float v6 = (float)((float)(result + -35.0) / 20.0) + 0.45;
    }
    else
    {
      float v6 = 1.45;
    }
    *a2 = v6;
    *a3 = v6;
    goto LABEL_23;
  }
  if (v4 < 4)
  {
    int v5 = 1075629261;
    goto LABEL_17;
  }
  if (!*((unsigned char *)this + 280))
  {
LABEL_7:
    int v5 = 1069128090;
LABEL_17:
    *(_DWORD *)a2 = v5;
    *(_DWORD *)a3 = v5;
  }
  return result;
}

void MTHandMotion_::clipMotionToDominantAxes(MTHandMotion_ *this, double a2, int a3)
{
  float v6 = 1.0 - exp(-a2 / *((float *)this + 36));
  if (*((unsigned char *)this + 138)
    || *((_DWORD *)this + 20) != 1 && *((_DWORD *)this + 22) != 1 && *((unsigned char *)this + 139)
    || (float v7 = 1.0, *((unsigned __int8 *)this + 101) >= 3u))
  {
    float v7 = *((float *)this + 64);
  }
  double v8 = 1.0 - v6;
  float32x2_t v9 = *(float32x2_t *)((char *)this + 208);
  float32x2_t v10 = *(float32x2_t *)((char *)this + 216);
  float64x2_t v11 = vmlaq_n_f64(vcvtq_f64_f32(vmul_n_f32(v9, v6)), vcvtq_f64_f32(*(float32x2_t *)((char *)this + 224)), v8);
  *((_DWORD *)this + 63) = 1065353216;
  float32x2_t v12 = vcvt_f32_f64(vmlaq_n_f64(vcvtq_f64_f32(vmul_n_f32(vmul_n_f32(v10, v7), v6)), vcvtq_f64_f32(*(float32x2_t *)((char *)this + 232)), v8));
  *((float32x2_t *)this + 28) = vcvt_f32_f64(v11);
  *((float32x2_t *)this + 29) = v12;
  float v13 = (float)(sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v9, v9).i32[1]), v9.f32[0], v9.f32[0])) * v6)
      + v8 * *((float *)this + 60);
  *((float *)this + 6objc_storeStrong(&location, 0) = v13;
  unsigned int v36 = 1065353216;
  unsigned int v37 = 1065353216;
  unsigned int v14 = *((_DWORD *)this + 32) - 2000;
  if (v14 > 0x3E7)
  {
    MTHandMotion_::computeTrackpadDominanceWeights(this, (float *)&v37, (float *)&v36);
    float32x2_t v15 = (float32x2_t)__PAIR64__(v36, v37);
  }
  else if (*((_DWORD *)this + 20) == 1 || *((_DWORD *)this + 22) == 1)
  {
    float32x2_t v15 = (float32x2_t)0x3FCCCCCD3FB33333;
  }
  else
  {
    float32x2_t v15 = (float32x2_t)0x3F99999A3F8CCCCDLL;
  }
  float32x2_t v16 = vmul_f32(vabs_f32(v12), v15);
  if (v16.f32[0] <= v16.f32[1]) {
    float v17 = v16.f32[1];
  }
  else {
    float v17 = v16.f32[0];
  }
  float v18 = (float *)((char *)this + 284);
  *(_OWORD *)((char *)this + 284) = *((_OWORD *)this + 14);
  if (!a3)
  {
    if (*((unsigned char *)this + 376)) {
      a3 = 3;
    }
    else {
      a3 = 0;
    }
  }
  if (v17 < v13)
  {
    if (v13 > 0.0) {
      *((float *)this + 63) = v17 / v13;
    }
    if (*((unsigned char *)this + 153)) {
      *(void *)((char *)this + 292) = 0;
    }
    if (!*((unsigned char *)this + 152)) {
      goto LABEL_49;
    }
    if ((a3 & 4) == 0) {
      *((_DWORD *)this + 5objc_storeStrong(&location, 0) = 0;
    }
    if ((a3 & 8) != 0) {
      goto LABEL_49;
    }
LABEL_43:
    *((_DWORD *)this + 5MTHandMotion_::clearHandMotion(this, 1) = 0;
    goto LABEL_49;
  }
  if (v17 > 0.0) {
    *((float *)this + 63) = v13 / v17;
  }
  int v19 = *((unsigned __int8 *)this + 153);
  if (*((unsigned char *)this + 153)) {
    *(void *)((char *)this + 284) = 0;
  }
  int v20 = *((unsigned __int8 *)this + 152);
  if ((a3 & 3) == 0 && *((unsigned char *)this + 152)) {
    *((void *)this + 24) = 0;
  }
  if (a3) {
    int v21 = 1;
  }
  else {
    int v21 = 2;
  }
  if (v16.f32[0] <= (float)(v16.f32[1] * (float)v21))
  {
    if (v16.f32[1] > (float)(v16.f32[0] * (float)v21))
    {
      if (v19) {
        *((_DWORD *)this + 73) = 0;
      }
      if (v20) {
        *((_DWORD *)this + 5objc_storeStrong(&location, 0) = 0;
      }
    }
  }
  else
  {
    if (v19) {
      *((_DWORD *)this + 74) = 0;
    }
    if (v20) {
      goto LABEL_43;
    }
  }
LABEL_49:
  float v22 = *v18;
  float v23 = fabsf(*v18);
  if (v14 <= 0x3E7)
  {
    float v24 = fabsf(*((float *)this + 72));
    if (v23 <= (float)(v24 * 2.4751))
    {
      if (v24 > (float)(v23 * 2.4751)) {
        *((_DWORD *)this + 48) = 0;
      }
    }
    else
    {
      *((_DWORD *)this + 49) = 0;
    }
    float v25 = fabsf(*((float *)this + 48));
    float v26 = fabsf(*((float *)this + 49));
    if (v25 <= (float)(v26 * 2.4751))
    {
      if (v26 > (float)(v25 * 2.4751)) {
        *((_DWORD *)this + 48) = 0;
      }
    }
    else
    {
      *((_DWORD *)this + 49) = 0;
    }
  }
  float v27 = *((float *)this + 37);
  float v28 = 0.0;
  BOOL v29 = v23 < v27;
  float v30 = 0.0;
  if (!v29)
  {
    if (v22 <= 0.0) {
      float v30 = v22 + v27;
    }
    else {
      float v30 = v22 - v27;
    }
  }
  *((float *)this + 7MTHandMotion_::clearHandMotion(this, 1) = v30;
  float v31 = *((float *)this + 72);
  if (fabsf(v31) >= v27)
  {
    if (v31 <= 0.0) {
      float v28 = v27 + v31;
    }
    else {
      float v28 = v31 - v27;
    }
  }
  *((float *)this + 72) = v28;
  float v32 = *((float *)this + 73);
  float v33 = 0.0;
  float v34 = 0.0;
  if (fabsf(v32) >= v27)
  {
    if (v32 <= 0.0) {
      float v34 = v27 + v32;
    }
    else {
      float v34 = v32 - v27;
    }
  }
  *((float *)this + 73) = v34;
  float v35 = *((float *)this + 74);
  if (fabsf(v35) >= v27)
  {
    if (v35 <= 0.0) {
      float v33 = v27 + v35;
    }
    else {
      float v33 = v35 - v27;
    }
  }
  *((float *)this + 74) = v33;
  MTHandMotion_::convertPixelDeltasTo_mm_s(this, a2);

  MTHandMotion_::convertPixelVelocitiesTo_mm_s(this);
}

void MTHandMotion_::convertPixelDeltasTo_mm_s(MTHandMotion_ *this, double a2)
{
  v8.float x = *((float *)this + 48);
  v8.float y = *((float *)this + 49);
  MTSurfaceDimensions_::convertPixelDeltasToMillimetersPerSecond(*((MTSurfaceDimensions_ **)this + 15), v8, a2);
  *((_DWORD *)this + 79) = v4;
  *((_DWORD *)this + 8objc_storeStrong(&location, 0) = v5;
  MTSurfaceDimensions_::convertPixelDeltaToMillimetersPerSecond(*((MTSurfaceDimensions_ **)this + 15), *((float *)this + 50), a2);
  *((_DWORD *)this + 8MTHandMotion_::clearHandMotion(this, 1) = v6;
  MTSurfaceDimensions_::convertPixelDeltaToMillimetersPerSecond(*((MTSurfaceDimensions_ **)this + 15), *((float *)this + 51), a2);
  *((_DWORD *)this + 82) = v7;
}

void MTHandMotion_::convertPixelVelocitiesTo_mm_s(MTHandMotion_ *this)
{
  *((float *)this + 83) = MTSurfaceDimensions_::convertPixelVelocityToMillimetersPerSecond(*((MTSurfaceDimensions_ **)this + 15), *((float *)this + 52));
  *((float *)this + 84) = MTSurfaceDimensions_::convertPixelVelocityToMillimetersPerSecond(*((MTSurfaceDimensions_ **)this + 15), *((float *)this + 53));
  *((float *)this + 85) = MTSurfaceDimensions_::convertPixelVelocityToMillimetersPerSecond(*((MTSurfaceDimensions_ **)this + 15), *((float *)this + 54));
  *((float *)this + 86) = MTSurfaceDimensions_::convertPixelVelocityToMillimetersPerSecond(*((MTSurfaceDimensions_ **)this + 15), *((float *)this + 55));
}

float32x2_t MTHandMotion_::updateFastestFingerSpeed(MTHandMotion_ *this, const MTPathStates_ *a2)
{
  double v4 = *((double *)a2 + 1) - *((double *)a2 + 2);
  float v5 = 0.0;
  if (v4 <= 0.025) {
    float v5 = *((float *)this + 92);
  }
  float v6 = *((float *)a2 + 76);
  long double v7 = v4 / 0.00800000038;
  float v8 = pow(dbl_111800[v6 > v5], v4 / 0.00800000038);
  *((float *)this + 92) = (float)(v6 * (float)(1.0 - v8)) + (float)(v8 * v5);
  long double v17 = exp2(-v7);
  LODWORD(v18) = *(void *)((char *)a2 + 316);
  long double v9 = pow(0.949999988, v7);
  v10.f64[0] = v17;
  v10.f64[1] = v9;
  float32x2_t result = vcvt_f32_f64(v10);
  __asm { FMOV            V2.2S, #1.0 }
  *(float32x2_t *)((char *)this + 244) = vmla_f32(vmul_n_f32(vsub_f32(_D2, result), v18), *(float32x2_t *)((char *)this + 244), result);
  return result;
}

uint64_t MTHandMotion_::makeCollectionEventMask(MTHandMotion_ *this, const MTPathStates_ *a2)
{
  char v2 = (_DWORD *)(*((void *)a2 + 35) + 604);
  uint64_t v3 = 31;
  do
  {
    int v4 = v2[78];
    if ((*v2 - 5) < 0xFFFFFFFE || (v2[78] & 4) == 0)
    {
      if ((v4 & 0x2000) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      *((_DWORD *)this + 35) |= 4u;
      if ((v4 & 0x2000) == 0)
      {
LABEL_8:
        if ((v4 & 0x800) == 0) {
          goto LABEL_9;
        }
        goto LABEL_13;
      }
    }
    *((_DWORD *)this + 35) |= 0x2000u;
    if ((v4 & 0x800) == 0)
    {
LABEL_9:
      if ((v4 & 0x40000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_14;
    }
LABEL_13:
    *((_DWORD *)this + 35) |= 0x800u;
    if ((v4 & 0x40000) == 0) {
      goto LABEL_16;
    }
LABEL_14:
    int v6 = v4 & 0x6000000 | v4 & 0x8000000 | *((_DWORD *)this + 35) | 0x40000;
    *((_DWORD *)this + 35) = v6;
    if ((v4 & 0x1000000) != 0) {
      *((_DWORD *)this + 35) = v6 | 0x1000000;
    }
LABEL_16:
    if ((v4 & 0x40) != 0) {
      *((_DWORD *)this + 35) |= 0x40u;
    }
    v2 += 142;
    --v3;
  }
  while (v3);
  return *((unsigned int *)this + 35);
}

uint64_t MTHandMotion_::processHandMotion(MTHandMotion_ *this, MTPathStates_ *a2, int a3, int a4, int a5, float a6, int a7, unsigned int a8)
{
  if ((*((_DWORD *)this + 32) - 1000) <= 0xBB7)
  {
    float v15 = MTPathStates_::restingTranslationCertainty(a2);
    *((float *)this + 93) = v15;
    if (!a7)
    {
      int v16 = *((unsigned __int8 *)a2 + 436);
      if (*((_DWORD *)a2 + 93) - v16 == 2)
      {
        float v17 = *((float *)this + 90);
        float v18 = 0.0;
        if (v17 > 40.0)
        {
          float v18 = 1.0;
          if (v17 < 50.0) {
            float v18 = (float)(v17 + -40.0) / 10.0;
          }
        }
        float v19 = v15 * v18;
        BOOL v21 = v18 >= 1.0 && v16 != 0;
        if (v19 > 0.9) {
          BOOL v21 = 1;
        }
      }
      else
      {
        BOOL v21 = 0;
      }
      *((unsigned char *)this + 376) = v21;
    }
  }
  MTFingerToPathMap_::updateFingerPathMappings((uint64_t)this, a2);
  if (a3 < 1)
  {
    MTHandMotion_::clearHandMotion(this, 0);
    uint64_t CollectionEventMask = 0;
    *((_DWORD *)this + 89) = 0;
  }
  else
  {
    *((_DWORD *)this + 35) = 0;
    MTHandMotion_::updateFastestFingerSpeed(this, a2);
    MTHandMotion_::computeSpeedSymmetries(this, a2, a8);
    *((float *)this + 69) = MTPathStates_::get_3F_IncludingThumbSpeedSymmetry(a2);
    if (a4 > a5)
    {
      *((void *)this + 28) = 0;
      *((void *)this + 29) = 0;
    }
    if (a4)
    {
      uint64_t InnermostTouchingPath = MTFingerToPathMap_::getInnermostTouchingPath((MTFingerToPathMap_ *)this, a2);
      OutermostTouchingPath = (const MTParserPath_ *)MTFingerToPathMap_::getOutermostTouchingPath((MTFingerToPathMap_ *)this, a2);
      float v24 = this;
      float v25 = a2;
      float v26 = (MTParserPath_ *)InnermostTouchingPath;
      int v27 = 1;
    }
    else
    {
      uint64_t InnermostInRangePath = MTFingerToPathMap_::getInnermostInRangePath((MTFingerToPathMap_ *)this, a2);
      OutermostTouchingPath = (const MTParserPath_ *)MTFingerToPathMap_::getOutermostInRangePath((MTFingerToPathMap_ *)this, a2);
      float v24 = this;
      float v25 = a2;
      float v26 = (MTParserPath_ *)InnermostInRangePath;
      int v27 = 0;
    }
    MTHandMotion_::extractHandMotion(v24, v25, v26, OutermostTouchingPath, v27);
    MTHandMotion_::clipMotionToDominantAxes(this, *((double *)a2 + 1) - *((double *)a2 + 2), a7);
    if (*((float *)this + 48) != 0.0
      || *((float *)this + 49) != 0.0
      || *((float *)this + 50) != 0.0
      || *((float *)this + 51) != 0.0)
    {
      *((void *)this + 2objc_storeStrong(&location, 0) = *((void *)a2 + 1);
    }
    uint64_t CollectionEventMask = MTHandMotion_::makeCollectionEventMask(this, a2);
    *((_DWORD *)this + 35) = CollectionEventMask;
  }
  MTPathStates_::calculateCentroidOfPaths(a2, (MTPoint *)this + 23, v28);
  return CollectionEventMask;
}

MTHandMotion_ *MTHandMotion_::storeFeedbackFromMouse(MTHandMotion_ *this, MTPoint a2)
{
  *((_DWORD *)this + 27) = LODWORD(a2.x);
  *((_DWORD *)this + 28) = LODWORD(a2.y);
  return this;
}

float MTHandMotion_::getMouseMotionFeedback(MTHandMotion_ *this, int a2)
{
  if (a2 == 1)
  {
    float v2 = *((float *)this + 27);
    float v3 = *((float *)this + 28) * 0.8;
    float v4 = *(float *)"333?";
    return v3 + (float)(v2 * v4);
  }
  if (!a2)
  {
    float v2 = *((float *)this + 27);
    float v3 = *((float *)this + 28) * 0.7;
    float v4 = 0.8;
    return v3 + (float)(v2 * v4);
  }
  return hypotf(*((float *)this + 27), *((float *)this + 28));
}

MTHandMotion_ *MTHandMotion_::storeFeedbackFromButton(MTHandMotion_ *this, float a2)
{
  *((float *)this + 29) = a2;
  return this;
}

float MTHandMotion_::getButtonMotionFeedback(MTHandMotion_ *this)
{
  return *((float *)this + 29);
}

void __cxx_global_var_init_30()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_29(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_currentTimestamp", a2);
  }
}

void __cxx_global_var_init_3_29(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_previousTimestamp", a2);
  }
}

void __cxx_global_var_init_4_29(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)114,(char)101,(char)108,(char)101,(char)97,(char)115,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_release", a2);
  }
}

void __cxx_global_var_init_5_29(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)97,(char)99,(char)116,(char)105,(char)118,(char)97,(char)116,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_activation", a2);
  }
}

void __cxx_global_var_init_6_29(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)101,(char)97,(char)114,(char)108,(char)105,(char)101,(char)115,(char)116,(char)78,(char)111,(char)110,(char)68,(char)105,(char)118,(char)105,(char)110,(char)103,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_earliestNonDivingTimestamp", a2);
  }
}

void __cxx_global_var_init_7_29(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)100,(char)105,(char)118,(char)105,(char)110,(char)103,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)67,(char)104,(char)97,(char)110,(char)103,(char)101,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_divingButtonChangeTimestamp", a2);
  }
}

void __cxx_global_var_init_8_30(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)105,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_min", a2);
  }
}

void __cxx_global_var_init_9_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_max", a2);
  }
}

void __cxx_global_var_init_10_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)66,(char)114,(char)101,(char)97,(char)107,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerBreakTouch_max", a2);
  }
}

void MTForceBehavior_::MTForceBehavior_(MTForceBehavior_ *this)
{
  this->int var4 = 0;
  *(void *)&this->int64_t var0 = 0;
  *(void *)((char *)&this->var1 + MTHandMotion_::clearHandMotion(this, 1) = 0;
  *(_OWORD *)&this->var5.int64_t var0 = 0u;
  *(_OWORD *)&this->var5.var2.int64_t var0 = 0u;
  *(_OWORD *)&this->var6.__end_ = 0u;
  *(_OWORD *)&this->var7.__begin_ = 0u;
  *(_OWORD *)&this->var7.__end_cap_.__value_ = 0u;
  *(_OWORD *)&this->var8.__end_ = 0u;
  *(_OWORD *)&this->var9.__begin_ = 0u;
  this->var9.__end_cap_.__value_ = 0;
}

void MTForceBehavior_::~MTForceBehavior_(MTForceBehavior_ *this)
{
  std::__split_buffer<int>::pointer begin = this->var9.__begin_;
  if (begin)
  {
    this->var9.__end_ = begin;
    operator delete(begin);
  }
  float v3 = this->var8.__begin_;
  if (v3)
  {
    this->var8.__end_ = v3;
    operator delete(v3);
  }
  float v4 = this->var7.__begin_;
  if (v4)
  {
    this->var7.__end_ = v4;
    operator delete(v4);
  }
  float v5 = this->var6.__begin_;
  if (v5)
  {
    this->var6.__end_ = v5;
    operator delete(v5);
  }
  int64_t var0 = this->var5.var0;
  if (var0)
  {
    this->var5.unsigned int var1 = var0;
    operator delete(var0);
  }
}

uint64_t MTForceBehavior_::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 24), *(char **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 96), *(char **)(a2 + 96), *(void *)(a2 + 104), (uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 120), *(char **)(a2 + 120), *(void *)(a2 + 128), (uint64_t)(*(void *)(a2 + 128) - *(void *)(a2 + 120)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 48), *(char **)(a2 + 48), *(void *)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 72), *(char **)(a2 + 72), *(void *)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2);
    *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  }
  return a1;
}

MTForceBehavior_ *MTForceBehavior_::forceSourceFingerCount(MTForceBehavior_ *this)
{
  uint64_t v1 = this;
  LODWORD(this) = 0;
  int var1 = v1->var1;
  unsigned int v3 = 16;
  do
  {
    if ((var1 & v3) != 0) {
      this = (MTForceBehavior_ *)(this + 1);
    }
    else {
      this = (MTForceBehavior_ *)this;
    }
    BOOL v4 = v3 >= 2;
    v3 >>= 1;
  }
  while (v4);
  return this;
}

uint64_t MTForceBehavior_::whichButtonBehavior(MTForceBehavior_ *this)
{
  int v1 = this->var0 - 1;
  if (v1 > 0x10) {
    return 0;
  }
  else {
    return dword_111820[v1];
  }
}

uint64_t MTForceBehavior_::resizeToNumStages(MTForceBehavior_ *this, unsigned int a2)
{
  uint64_t v4 = a2 - this->var4;
  std::vector<float>::resize((uint64_t)&this->var5, 2 * a2 - 2);
  std::vector<int>::resize((std::vector<int> *)&this->var8, a2);
  std::vector<int>::resize((std::vector<int> *)&this->var9, a2);
  this->int var4 = a2;
  return v4;
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

BOOL MTForceBehavior_::addStage(MTForceBehavior_ *a1, int a2, int a3, int a4, float a5, float a6)
{
  if ((int)MTForceBehavior_::resizeToNumStages(a1, a2 + 1) > 1) {
    return 0;
  }
  if (a2 >= 1)
  {
    int64_t var0 = a1->var5.var0;
    var0[2 * a2 - 1] = a5;
    var0[2 * a2 - 2] = a6;
  }
  BOOL result = MTForceBehavior_::isThresholdLadderMonotonic(&a1->var5.var0);
  if (result)
  {
    a1->var8.__begin_[a2] = a3;
    a1->var9.__begin_[a2] = a4;
    return 1;
  }
  return result;
}

BOOL MTForceBehavior_::isThresholdLadderMonotonic(void *a1)
{
  unint64_t v1 = a1[1] - *a1;
  if ((v1 & 4) != 0) {
    return 0;
  }
  uint64_t v2 = 0;
  int v3 = (v1 >> 2) - 1;
  uint64_t v4 = v3;
  uint64_t v5 = v3 & ~(v3 >> 31);
  do
  {
    uint64_t v6 = v2;
    if (v5 == v2) {
      break;
    }
    long double v7 = (float *)(*a1 + 4 * v2++);
  }
  while (*v7 <= v7[1]);
  return v6 >= v4;
}

BOOL MTForceBehavior_::addStage(MTForceBehavior_ *a1, int a2, uint64_t a3, float a4, float a5)
{
  return MTForceBehavior_::addStage(a1, a2, a3, SHIDWORD(a3), a4, a5);
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  long double v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    float v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      unsigned int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v4, v13);
      float v8 = *a1;
      long double v7 = a1[1];
    }
    else
    {
      unsigned int v14 = 0;
    }
    float v15 = &v14[4 * v11];
    int v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    float v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - MTHandMotion_::clearHandMotion(this, 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v5 = value;
  std::__split_buffer<int>::pointer end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<int>::pointer begin = this->__begin_;
    uint64_t v9 = (char *)end - (char *)this->__begin_;
    unint64_t v10 = __n + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      unsigned int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v13);
      std::vector<int>::pointer begin = this->__begin_;
      std::__split_buffer<int>::pointer end = this->__end_;
    }
    else
    {
      unsigned int v14 = 0;
    }
    float v15 = &v14[4 * v11];
    int v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    float v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      int v18 = *--end;
      *((_DWORD *)v15 - MTHandMotion_::clearHandMotion(this, 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void __cxx_global_var_init_31()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_30(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_currentTimestamp", a2);
  }
}

void __cxx_global_var_init_3_30(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_previousTimestamp", a2);
  }
}

void _GLOBAL__sub_I_MTForceBehavior__mm()
{
  dword_159238 = 0;
  MTForceBehavior_::Null = 0;
  *(uint64_t *)((char *)&MTForceBehavior_::Null + 5) = 0;
  unk_159240 = 0u;
  unk_159250 = 0u;
  unk_159260 = 0u;
  unk_159270 = 0u;
  unk_159280 = 0u;
  unk_159290 = 0u;
  unk_1592A0 = 0u;
  qword_1592B0 = 0;
  __cxa_atexit((void (*)(void *))MTForceBehavior_::~MTForceBehavior_, &MTForceBehavior_::Null, &def_411C8);
}

double MTHandStatistics_::clear(MTHandStatistics_ *this, int a2)
{
  if (a2)
  {
    *((unsigned char *)this + 203) = *((unsigned char *)this + 202);
    *((_WORD *)this + 77) = *((_WORD *)this + 76);
    *((_WORD *)this + 79) = *((_WORD *)this + 78);
    *((unsigned char *)this + 192) = *((unsigned char *)this + 191);
    *((unsigned char *)this + 187) = *((unsigned char *)this + 186);
    *((unsigned char *)this + 194) = *((unsigned char *)this + 193);
    *((unsigned char *)this + 189) = *((unsigned char *)this + 188);
    char v2 = *((unsigned char *)this + 298);
    *((unsigned char *)this + 299) = v2;
    *((unsigned char *)this + 303) = v2;
    *((unsigned char *)this + 19objc_storeStrong(&location, 0) = *((unsigned char *)this + 211);
    *((_DWORD *)this + 78) = *((_DWORD *)this + 77);
    uint64_t v3 = *((void *)this + 33);
    char v4 = *((unsigned char *)this + 316);
  }
  else
  {
    char v4 = 0;
    *(_WORD *)((char *)this + 305) = 0;
    *((_DWORD *)this + 5MTHandMotion_::clearHandMotion(this, 1) = 0;
    *((unsigned char *)this + 203) = 0;
    *((unsigned char *)this + 192) = 0;
    *((unsigned char *)this + 187) = 0;
    *((unsigned char *)this + 194) = 0;
    *(_WORD *)((char *)this + 189) = 0;
    *((_WORD *)this + 77) = 0;
    *((_WORD *)this + 79) = 0;
    *((unsigned char *)this + 299) = 0;
    *((unsigned char *)this + 303) = 0;
    *((_DWORD *)this + 78) = 0;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((void *)this + 18) = 0;
    *((_WORD *)this + 92) = 0;
    *((void *)this + 22) = 0;
    *(_DWORD *)((char *)this + 197) = 0;
    *(void *)((char *)this + 212) = 0;
    *((void *)this + 32) = 0;
    *((void *)this + 33) = 0;
    uint64_t v3 = 0;
    *((void *)this + 35) = 0;
    *((void *)this + 36) = 0;
  }
  *((void *)this + 34) = v3;
  *((unsigned char *)this + 317) = v4;
  *(_WORD *)((char *)this + 20MTHandMotion_::clearHandMotion(this, 1) = 0;
  *((unsigned char *)this + 19MTHandMotion_::clearHandMotion(this, 1) = 0;
  *((unsigned char *)this + 186) = 0;
  *((unsigned char *)this + 193) = 0;
  *((unsigned char *)this + 188) = 0;
  *((_DWORD *)this + 77) = 0;
  *(_WORD *)((char *)this + 195) = 0;
  *((_WORD *)this + 76) = 0;
  *((_WORD *)this + 78) = 0;
  *((_WORD *)this + 11objc_storeStrong(&location, 0) = 0;
  *((unsigned char *)this + 222) = 0;
  *(void *)&double result = 0xFFFFFFFFLL;
  *((_OWORD *)this + 14) = xmmword_111870;
  *((_DWORD *)this + 4objc_storeStrong(&location, 0) = 0;
  *((_DWORD *)this + 52) = 0;
  *((_DWORD *)this + 43) = 0;
  *((_WORD *)this + 148) = 0;
  *((_WORD *)this + 15objc_storeStrong(&location, 0) = 0;
  *((unsigned char *)this + 298) = 0;
  *((unsigned char *)this + 302) = 0;
  *((unsigned char *)this + 304) = 0;
  *((unsigned char *)this + 316) = 0;
  *((void *)this + 3MTHandMotion_::clearHandMotion(this, 1) = 0;
  *((_DWORD *)this + 6objc_storeStrong(&location, 0) = 0;
  return result;
}

uint64_t MTHandStatistics_::MTHandStatistics_(uint64_t a1, int a2, uint64_t a3, int a4, int a5)
{
  *(void *)a1 = off_1418A0;
  *(_DWORD *)(a1 + 24) = a2;
  *(_DWORD *)(a1 + 164) = a4;
  *(_DWORD *)(a1 + 168) = a5;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 4objc_storeStrong(&location, 0) = 0;
  MTHandStatistics_::clear((MTHandStatistics_ *)a1, 0);
  return a1;
}

void MTHandStatistics_::~MTHandStatistics_(MTHandStatistics_ *this)
{
  *(void *)this = off_1418A0;
  MTHandStatistics_::clear(this, 0);
}

{
  uint64_t vars8;

  *(void *)this = off_1418A0;
  MTHandStatistics_::clear(this, 0);

  operator delete();
}

MTHandStatistics_ *MTHandStatistics_::updateCumulativeMaxStats(MTHandStatistics_ *this)
{
  if (*((_DWORD *)this + 56) == -1) {
    *((_DWORD *)this + 56) = 0;
  }
  if (*((_DWORD *)this + 58) == -1) {
    *((_DWORD *)this + 58) = 0;
  }
  if (*((_DWORD *)this + 59) == -1) {
    *((_DWORD *)this + 59) = 0;
  }
  unsigned int v1 = *((unsigned __int8 *)this + 186);
  if (*((unsigned char *)this + 186))
  {
    if (v1 > *((unsigned __int8 *)this + 197)) {
      *((unsigned char *)this + 197) = v1;
    }
    unsigned int v2 = *((unsigned __int8 *)this + 195);
    if (v2 > *((unsigned __int8 *)this + 198)) {
      *((unsigned char *)this + 198) = v2;
    }
    if (v1 >= 2)
    {
      uint64_t v3 = *((void *)this + 1);
      *((void *)this + 14) = v3;
      if (v1 == 5) {
        *((void *)this + 15) = v3;
      }
    }
  }
  unsigned int v4 = *((unsigned __int8 *)this + 191);
  if (*((unsigned char *)this + 191))
  {
    if (v4 > *((unsigned __int8 *)this + 199)) {
      *((unsigned char *)this + 199) = v4;
    }
  }
  else if (!*((unsigned char *)this + 192))
  {
    *((unsigned char *)this + 197) = 0;
    *((_DWORD *)this + 5MTHandMotion_::clearHandMotion(this, 1) = 0;
    *((unsigned char *)this + 20objc_storeStrong(&location, 0) = *((unsigned char *)this + 199);
    *((unsigned char *)this + 199) = 0;
    *((void *)this + 8) = 0;
  }
  if (!*((unsigned char *)this + 195)) {
    *((unsigned char *)this + 198) = 0;
  }
  if (*((unsigned __int8 *)this + 298) != *((unsigned __int8 *)this + 299)) {
    *((void *)this + 35) = *((void *)this + 1);
  }
  double v5 = *((double *)this + 34);
  if (*((double *)this + 33) < v5) {
    *((double *)this + 33) = v5;
  }
  if (*((_WORD *)this + 107) == 2 && *((_WORD *)this + 110) == 7)
  {
    *((void *)this + 32) = 0;
    *(_DWORD *)((char *)this + 214) = 0;
    *((_WORD *)this + 109) = 0;
  }
  return this;
}

MTHandStatistics_ *MTHandStatistics_::updateStatsWithPath(MTHandStatistics_ *this, MTParserPath_ *a2, int a3, int a4)
{
  uint64_t v6 = this;
  if (a3)
  {
    ++*((unsigned char *)this + 202);
    if (MTParserPath_::isEdgeContact(a2)) {
      ++*((unsigned char *)v6 + 208);
    }
    if (MTParserPath_::isUnidentifiedContact(a2)) {
      ++*((unsigned char *)v6 + 209);
    }
    this = (MTHandStatistics_ *)MTParserPath_::wasFingerContact(a2);
    if (this)
    {
      this = (MTHandStatistics_ *)MTParserPath_::isPalmContact(a2);
      if (this) {
        ++*((unsigned char *)v6 + 210);
      }
    }
  }
  if (a4)
  {
    if (a2->var3.var3 == 7) {
      p_int var1 = (int *)&a2[1].var3.var1;
    }
    else {
      p_int var1 = &a2->var3.var4;
    }
    *((_WORD *)v6 + 110) |= 1 << (*p_var1 - 1);
  }
  return this;
}

uint64_t MTHandStatistics_::updateStatsWithFingerPath(uint64_t result, int a2, int a3, uint64_t a4, int a5, int a6, int a7, int a8, float a9, float a10, float a11, char a12, char a13, char a14)
{
  if (a5 && (a12 & 1) == 0)
  {
    ++*(unsigned char *)(result + 191);
    *(_WORD *)(result + 152) |= 1 << (a3 - 1);
    if (a3 != 1) {
      ++*(unsigned char *)(result + 196);
    }
    if (*(double *)(result + 64) == 0.0) {
      *(void *)(result + 64) = *(void *)a4;
    }
  }
  if (a6)
  {
    if (a12)
    {
      ++*(unsigned char *)(result + 211);
      if (a3 == 1) {
        *(void *)(result + 104) = *(void *)(a4 + 16);
      }
    }
    else
    {
      ++*(unsigned char *)(result + 186);
      if (*(float *)(result + 204) < a11) {
        *(float *)(result + 204) = a11;
      }
      if (a3 != 1)
      {
        ++*(unsigned char *)(result + 195);
        double v17 = *(double *)(a4 + 16);
        if (v17 > *(double *)(result + 96)) {
          *(double *)(result + 96) = v17;
        }
      }
    }
    if ((a7 & 1) != 0 {
      || (*(void *)(result + 88) = *(void *)(result + 80),
    }
          uint64_t v18 = *(void *)(a4 + 16),
          *(void *)(result + 72) = *(void *)a4,
          *(void *)(result + 8objc_storeStrong(&location, 0) = v18,
          *(_DWORD *)(result + 176) = a2,
          *(unsigned char *)(result + 187)))
    {
      if (a12) {
        return result;
      }
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
    }
    *(void *)(result + 56) = v18;
    if ((a12 & 1) == 0) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
    }
  }
  else
  {
    if (a7)
    {
      *(_WORD *)(result + 218) = 0;
      double v14 = *(double *)(result + 128);
      if (v14 < *(double *)(result + 80)) {
        *(_DWORD *)(result + 214) = 0;
      }
      double v15 = *(double *)(a4 + 40);
      if (v14 < v15)
      {
        *(double *)(result + 128) = v15;
        *(_DWORD *)(result + 18objc_storeStrong(&location, 0) = a2;
        *(unsigned char *)(result + 184) = a3 == 1;
        *(unsigned char *)(result + 185) = a14;
        *(void *)(result + 24objc_storeStrong(&location, 0) = *(void *)(result + 248);
        *(float *)(result + 248) = a9;
        *(float *)(result + 252) = a10;
      }
      ++*(_WORD *)(result + 216);
      if (a3 != 1 || *(unsigned char *)(result + 187) == 5) {
        ++*(_WORD *)(result + 214);
      }
    }
    if (a8)
    {
      double v16 = *(double *)(a4 + 48);
      if (*(double *)(result + 136) < v16) {
        *(double *)(result + 136) = v16;
      }
    }
  }
  return result;
}

uint64_t MTHandStatistics_::updateSubsetStatsWithFingerPath(uint64_t result, uint64_t a2, char a3, uint64_t a4, char a5, int a6, char a7)
{
  if ((a5 & 1) == 0)
  {
    __int16 v7 = *(_WORD *)(result + 218);
    if (!v7) {
      *(_WORD *)(result + 212) = *(unsigned __int8 *)(result + 190) + *(unsigned __int8 *)(result + 187);
    }
    *(_WORD *)(result + 218) = v7 + 1;
  }
  double v8 = *(double *)(a4 + 16);
  double v9 = *(double *)(result + 128);
  if (v8 > v9 && v8 < v9 + 0.02)
  {
    signed int v11 = 0;
    *(_DWORD *)(result + 214) = 0;
    *(_WORD *)(result + 218) = 0;
  }
  else
  {
    signed int v11 = *(unsigned __int16 *)(result + 218);
  }
  uint64_t v12 = (signed int *)&MTHandStatistics_::kMinClutchingSubsetSizeFrom4F;
  unsigned int v13 = v11 + *(unsigned __int16 *)(result + 212);
  if (v13 != 4) {
    uint64_t v12 = (signed int *)&MTHandStatistics_::kMinClutchingSubsetSizeFrom5F;
  }
  if (v8 <= v9
    || *(double *)(result + 256) >= v9
    || *(unsigned char *)(result + 299)
    && !*(unsigned char *)(result + 304)
    && ((signed int v14 = *v12, v15 = *(unsigned __int16 *)(result + 214), v14 <= (int)v15) ? (v16 = v14 <= v11) : (v16 = 0),
        v16 ? (BOOL v17 = v13 >= 4) : (BOOL v17 = 0),
        !v17 || (a7 & 1) != 0 || v15 <= 1 && *(unsigned char *)(result + 185)))
  {
    double v9 = *(double *)(result + 256);
    if ((*(_DWORD *)(result + 164) - 2000) <= 0x3E7 && v8 - v9 > 0.5)
    {
      double v9 = *(double *)(a4 + 8);
      *(double *)(result + 256) = v9;
    }
  }
  else
  {
    *(double *)(result + 256) = v9;
    *(unsigned char *)(result + 304) = 1;
  }
  if (v8 >= v9 || (*(_DWORD *)(result + 164) - 1000) <= 0x3E7)
  {
    ++*(unsigned char *)(result + 298);
    int v19 = 1 << (a3 - 1);
    *(_WORD *)(result + 296) |= v19;
    double v20 = *(double *)(result + 264);
    double v21 = *(double *)(a4 + 16);
    BOOL v22 = v20 <= v9 || v21 < v20;
    if (v22 || *(unsigned char *)(result + 304))
    {
      *(double *)(result + 264) = v21;
      *(unsigned char *)(result + 304) = 0;
    }
    if (a6)
    {
      ++*(unsigned char *)(result + 302);
      *(_WORD *)(result + 300) |= v19;
    }
  }
  return result;
}

MTHandStatistics_ *MTHandStatistics_::updateStatsWithNonFingerPath(MTHandStatistics_ *this, const MTParserPath_ *a2, int a3, int a4)
{
  int var3 = a2->var3.var3;
  p_int var1 = (int *)&a2[1].var3.var1;
  if (var3 != 7) {
    p_int var1 = &a2->var3.var4;
  }
  int v6 = *p_var1;
  if (v6 != 15)
  {
    if (var3 == 1)
    {
      ++*((unsigned char *)this + 201);
      if (!a3)
      {
LABEL_6:
        if (!a4) {
          return this;
        }
        goto LABEL_7;
      }
    }
    else if (!a3)
    {
      goto LABEL_6;
    }
    ++*((unsigned char *)this + 193);
    *((_WORD *)this + 78) |= 1 << (v6 - 1);
    if (!a4) {
      return this;
    }
LABEL_7:
    ++*((unsigned char *)this + 188);
  }
  return this;
}

uint64_t MTHandStatistics_::processHandState(MTHandStatistics_ *this, MTPathStates_ *a2, int a3, char a4)
{
  double v6 = *((double *)a2 + 1);
  double v7 = *((double *)this + 1);
  if (v7 > v6) {
    double v7 = 0.0;
  }
  *((double *)this + MTHandMotion_::clearHandMotion(this, 1) = v6;
  *((double *)this + 2) = v7;
  MTHandStatistics_::clear(this, 1);
  int v8 = *((_DWORD *)a2 + 94);
  float v39 = a2;
  uint64_t v9 = *((void *)a2 + 35);
  if (*(unsigned char *)(v9 + 568 * v8 + 545)) {
    BOOL v10 = *(unsigned char *)(v9 + 568 * v8 + 546) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  *((unsigned char *)this + 304) = v10;
  if (*((unsigned char *)this + 305)
    && *((unsigned __int8 *)this + 190) + *((unsigned __int8 *)this + 187) >= 4
    && *((unsigned __int8 *)this + 299) <= 2u)
  {
    *((void *)this + 32) = 0;
    *(_DWORD *)((char *)this + 214) = 0;
    *((_WORD *)this + 109) = 0;
  }
  *((_DWORD *)this + 4objc_storeStrong(&location, 0) = *((_DWORD *)a2 + 88);
  uint64_t v11 = *((void *)a2 + 43);
  if (v11) {
    LOBYTE(v1MTHandMotion_::clearHandMotion(this, 1) = *(unsigned char *)(v11 + 11) != 0;
  }
  *((unsigned char *)this + 222) = v11;
  uint64_t v12 = 1;
  uint64_t v13 = 1113;
  do
  {
    uint64_t v14 = *((void *)v39 + 35);
    uint64_t v15 = v14 + v13;
    BOOL v16 = (_DWORD *)(v14 + v13 - 513);
    BOOL v17 = (unsigned int *)(v14 + v13 - 509);
    unsigned int v18 = *v17;
    if (v12 == *v16 && (int)v18 >= 1)
    {
      double v20 = (MTParserPath_ *)(v15 - 545);
      unsigned int v21 = v18 - 3;
      (*(void (**)(MTHandStatistics_ *, uint64_t, BOOL, BOOL))(*(void *)this + 32))(this, v15 - 545, v18 < 7, v18 - 3 < 2);
      if (MTParserPath_::isFingerOrRestingContact((MTParserPath_ *)(v15 - 545))
        || MTParserPath_::isStylusContact((MTParserPath_ *)(v15 - 545)))
      {
        BOOL v22 = (unsigned char *)(v14 + v13);
        BOOL v38 = (*(_DWORD *)(v22 - 413) - 3) <= 1
           && MTParserPath_::wasFingerOrRestingContact((MTParserPath_ *)(v15 - 545));
        uint64_t v37 = v15 - 337;
        BOOL v23 = v18 < 7;
        BOOL v24 = v21 < 2;
        BOOL v25 = (float)((float)(*(float *)(v22 - 45) * 3.0) + 6.0) >= *((float *)v39 + 76);
        BOOL v26 = MTParserPath_::fingerLiftoffNearEdge(v20, *((MTSurfaceDimensions_ **)v39 + 5), *((double *)v39 + 1) - *((double *)v39 + 2));
        if (*v17 == 7) {
          BOOL v29 = (unsigned int *)(v22 - 409);
        }
        else {
          BOOL v29 = (unsigned int *)(v22 - 505);
        }
        v27.n128_u32[0] = *(_DWORD *)(v22 - 461);
        v28.n128_u32[0] = *(_DWORD *)(v22 - 457);
        HIBYTE(v34) = a4;
        BYTE2(v34) = v26;
        BYTE1(v34) = v25;
        LOBYTE(v34) = *v22;
        (*(void (**)(MTHandStatistics_ *, void, void, uint64_t, BOOL, BOOL, BOOL, BOOL, __n128, __n128, float, int))(*(void *)this + 40))(this, *v16, *v29, v37, v23, v24, v38, *(double *)(v22 - 321) >= *(double *)(v22 - 329), v27, v28, *(float *)(v22 - 437), v34);
        int8x8_t v30 = (int8x8_t)vrev64_s32(*(int32x2_t *)(v22 - 273));
        *((_DWORD *)this + 56) &= HIDWORD(*(void *)(v22 - 273));
        int8x8_t v31 = *(int8x8_t *)((char *)this + 228);
        LODWORD(v32) = vorr_s8(v31, v30).u32[0];
        HIDWORD(v32) = vand_s8(v31, v30).i32[1];
        *(void *)((char *)this + 228) = v32;
        *((_DWORD *)this + 59) &= *(_DWORD *)(v22 - 265);
      }
      else
      {
        (*(void (**)(MTHandStatistics_ *, uint64_t, BOOL, BOOL))(*(void *)this + 56))(this, v15 - 545, v18 < 7, v21 < 2);
      }
    }
    ++v12;
    v13 += 568;
  }
  while (v12 != 32);
  (*(void (**)(MTHandStatistics_ *))(*(void *)this + 64))(this);
  *((_DWORD *)this + 77) = *((_DWORD *)v39 + 81);
  if (*((unsigned char *)this + 209)) {
    *((unsigned char *)this + 316) = 1;
  }
  if (!*((unsigned char *)this + 202) && !*((unsigned char *)this + 203)) {
    return 0;
  }
  *((_DWORD *)this + 43) = MTHandStatistics_::makeCollectionEventMask(this, a3);
  return 1;
}

uint64_t MTHandStatistics_::makeCollectionEventMask(MTHandStatistics_ *this, int a2)
{
  int v2 = *((_DWORD *)this + 42);
  BOOL v3 = (v2 & 0x10) == 0 || *((unsigned __int8 *)this + 193) > *((unsigned __int8 *)this + 194);
  if (!*((unsigned char *)this + 186))
  {
    if (!*((unsigned char *)this + 187)) {
      goto LABEL_6;
    }
LABEL_9:
    unsigned int v4 = 2;
    if ((v2 & 0x20) != 0) {
      goto LABEL_21;
    }
    goto LABEL_10;
  }
  if (!*((unsigned char *)this + 187)) {
    goto LABEL_9;
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    if (*((unsigned char *)this + 189) && !*((unsigned char *)this + 188)) {
      unsigned int v4 = 2;
    }
    else {
      unsigned int v4 = 0;
    }
    goto LABEL_21;
  }
  unsigned int v4 = 0;
LABEL_10:
  if (!*((unsigned char *)this + 191) && *((unsigned char *)this + 192))
  {
    int v5 = v3 ? v4 | 0x80 : v4;
    if (*((unsigned __int8 *)this + 209) + *((unsigned __int8 *)this + 208) < *((unsigned __int8 *)this
                                                                                             + 202))
      unsigned int v4 = v5;
  }
LABEL_21:
  LODWORD(v6) = v4 | 0x80;
  if (a2) {
    uint64_t v6 = v6;
  }
  else {
    uint64_t v6 = v4;
  }
  int v7 = *((unsigned __int16 *)this + 76);
  int v8 = *((unsigned __int16 *)this + 77);
  if (*((_WORD *)this + 76))
  {
    if (!*((_WORD *)this + 77)) {
      goto LABEL_30;
    }
    if ((v2 & 0x20) == 0)
    {
      if (v7 == v8) {
        return v6;
      }
      return v6 | 0x20;
    }
  }
  else
  {
    if (*((_WORD *)this + 77)) {
      goto LABEL_30;
    }
    if ((v2 & 0x20) == 0) {
      return v6;
    }
    int v8 = 0;
  }
  if (*((_WORD *)this + 79))
  {
    if (*((_WORD *)this + 78)) {
      goto LABEL_31;
    }
  }
  else if (!*((_WORD *)this + 78))
  {
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v6 = v6 | 1;
LABEL_31:
  if (v7 != v8 || (v2 & 0x20) != 0 && *((unsigned __int16 *)this + 78) != *((unsigned __int16 *)this + 79)) {
    return v6 | 0x20;
  }
  return v6;
}

HSUtil::Encoder *MTHandStatistics_::encodeToMap(MTHandStatistics_ *this, HSUtil::Encoder *a2)
{
  HSUtil::Encoder::encodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key, *((double *)this + 1));
  HSUtil::Encoder::encodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key, *((double *)this + 2));
  HSUtil::Encoder::encodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)82,(char)101,(char)115,(char)101,(char)116>::Key, *((double *)this + 5));
  HSUtil::Encoder::encodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)65,(char)99,(char)116,(char)105,(char)118,(char)105,(char)116,(char)121>::Key, *((double *)this + 6));
  HSUtil::Encoder::encodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key, *((double *)this + 7));
  HSUtil::Encoder::encodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Key, *((double *)this + 8));
  HSUtil::Encoder::encodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Key, *((double *)this + 9));
  HSUtil::Encoder::encodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key, *((double *)this + 10));
  HSUtil::Encoder::encodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key, *((double *)this + 11));
  HSUtil::Encoder::encodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)78,(char)111,(char)110,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)100,(char)111,(char)119,(char)110>::Key, *((double *)this + 12));
  HSUtil::Encoder::encodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key, *((double *)this + 13));
  HSUtil::Encoder::encodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)84,(char)119,(char)111,(char)79,(char)114,(char)77,(char)111,(char)114,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Key, *((double *)this + 14));
  HSUtil::Encoder::encodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)118,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Key, *((double *)this + 15));
  HSUtil::Encoder::encodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)76,(char)105,(char)102,(char)116,(char)111,(char)102,(char)102>::Key, *((double *)this + 16));
  HSUtil::Encoder::encodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)69,(char)110,(char)100>::Key, *((double *)this + 17));
  unsigned int v4 = (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109>::Key;
  double v5 = *((double *)this + 18);

  return HSUtil::Encoder::encodeDouble(a2, v4, v5);
}

uint64_t MTHandStatistics_::decodeFromMap(MTHandStatistics_ *this, HSUtil::Decoder *a2)
{
  if ((MTTimeState_::decodeFromMap((MTTimeState_ *)this, a2) & 1) == 0)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/PathsNHands/MTHandStatistics_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTHandStatistics_::decodeFromMap();
    }
    return 0;
  }
  *((double *)this + 5) = HSUtil::Decoder::decodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)82,(char)101,(char)115,(char)101,(char)116>::Key);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/PathsNHands/MTHandStatistics_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTHandStatistics_::decodeFromMap();
    }
    return 0;
  }
  *((double *)this + 6) = HSUtil::Decoder::decodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)65,(char)99,(char)116,(char)105,(char)118,(char)105,(char)116,(char)121>::Key);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/PathsNHands/MTHandStatistics_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTHandStatistics_::decodeFromMap();
    }
    return 0;
  }
  *((double *)this + 7) = HSUtil::Decoder::decodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/PathsNHands/MTHandStatistics_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTHandStatistics_::decodeFromMap();
    }
    return 0;
  }
  *((double *)this + 8) = HSUtil::Decoder::decodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Key);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/PathsNHands/MTHandStatistics_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTHandStatistics_::decodeFromMap();
    }
    return 0;
  }
  *((double *)this + 9) = HSUtil::Decoder::decodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Key);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/PathsNHands/MTHandStatistics_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTHandStatistics_::decodeFromMap();
    }
    return 0;
  }
  *((double *)this + 1objc_storeStrong(&location, 0) = HSUtil::Decoder::decodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/PathsNHands/MTHandStatistics_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTHandStatistics_::decodeFromMap();
    }
    return 0;
  }
  *((double *)this + 1MTHandMotion_::clearHandMotion(this, 1) = HSUtil::Decoder::decodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/PathsNHands/MTHandStatistics_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTHandStatistics_::decodeFromMap();
    }
    return 0;
  }
  *((double *)this + 12) = HSUtil::Decoder::decodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)78,(char)111,(char)110,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)100,(char)111,(char)119,(char)110>::Key);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/PathsNHands/MTHandStatistics_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTHandStatistics_::decodeFromMap();
    }
    return 0;
  }
  *((double *)this + 13) = HSUtil::Decoder::decodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Key);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/PathsNHands/MTHandStatistics_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTHandStatistics_::decodeFromMap();
    }
    return 0;
  }
  *((double *)this + 14) = HSUtil::Decoder::decodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)84,(char)119,(char)111,(char)79,(char)114,(char)77,(char)111,(char)114,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Key);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/PathsNHands/MTHandStatistics_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTHandStatistics_::decodeFromMap();
    }
    return 0;
  }
  *((double *)this + 15) = HSUtil::Decoder::decodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)118,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Key);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/PathsNHands/MTHandStatistics_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTHandStatistics_::decodeFromMap();
    }
    return 0;
  }
  *((double *)this + 16) = HSUtil::Decoder::decodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)76,(char)105,(char)102,(char)116,(char)111,(char)102,(char)102>::Key);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/PathsNHands/MTHandStatistics_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTHandStatistics_::decodeFromMap();
    }
    return 0;
  }
  *((double *)this + 17) = HSUtil::Decoder::decodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)69,(char)110,(char)100>::Key);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/PathsNHands/MTHandStatistics_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTHandStatistics_::decodeFromMap();
    }
    return 0;
  }
  *((double *)this + 18) = HSUtil::Decoder::decodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109>::Key);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/PathsNHands/MTHandStatistics_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTHandStatistics_::decodeFromMap();
    }
    return 0;
  }
  return 1;
}

void __cxx_global_var_init_32()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_31(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_currentTimestamp", a2);
  }
}

void __cxx_global_var_init_3_31(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_previousTimestamp", a2);
  }
}

void __cxx_global_var_init_4_30(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)114,(char)101,(char)108,(char)101,(char)97,(char)115,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_release", a2);
  }
}

void __cxx_global_var_init_5_30(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)97,(char)99,(char)116,(char)105,(char)118,(char)97,(char)116,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_activation", a2);
  }
}

void __cxx_global_var_init_6_30(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)101,(char)97,(char)114,(char)108,(char)105,(char)101,(char)115,(char)116,(char)78,(char)111,(char)110,(char)68,(char)105,(char)118,(char)105,(char)110,(char)103,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_earliestNonDivingTimestamp", a2);
  }
}

void __cxx_global_var_init_7_30(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)100,(char)105,(char)118,(char)105,(char)110,(char)103,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)67,(char)104,(char)97,(char)110,(char)103,(char)101,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_divingButtonChangeTimestamp", a2);
  }
}

void __cxx_global_var_init_8_31(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)105,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_min", a2);
  }
}

void __cxx_global_var_init_9_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_max", a2);
  }
}

void __cxx_global_var_init_10_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)66,(char)114,(char)101,(char)97,(char)107,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerBreakTouch_max", a2);
  }
}

void __cxx_global_var_init_11_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)82,(char)101,(char)115,(char)101,(char)116>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentReset", a2);
  }
}

void __cxx_global_var_init_12_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)65,(char)99,(char)116,(char)105,(char)118,(char)105,(char)116,(char)121>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentButtonActivity", a2);
  }
}

void __cxx_global_var_init_13_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_firstFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_14_14(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_firstFingerCleanStartInRange", a2);
  }
}

void __cxx_global_var_init_15_23(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerCleanStartInRange", a2);
  }
}

void __cxx_global_var_init_16_23(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_17_23(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_previousRecentFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_18_23(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)78,(char)111,(char)110,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)100,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentNonThumbTouchdown", a2);
  }
}

void __cxx_global_var_init_19_23(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_restingThumbTouchDown", a2);
  }
}

void __cxx_global_var_init_20_23(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)84,(char)119,(char)111,(char)79,(char)114,(char)77,(char)111,(char)114,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentTwoOrMoreFingersTouching", a2);
  }
}

void __cxx_global_var_init_21_24(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)118,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFiveFingersTouching", a2);
  }
}

void __cxx_global_var_init_22_24(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)76,(char)105,(char)102,(char)116,(char)111,(char)102,(char)102>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerLiftoff", a2);
  }
}

void __cxx_global_var_init_23_24(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)69,(char)110,(char)100>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerEnd", a2);
  }
}

void __cxx_global_var_init_24_24(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentScrollZoom", a2);
  }
}

void MTActionEvent_::MTActionEvent_(MTActionEvent_ *this, __int16 a2, int a3, __int16 a4)
{
  *(_WORD *)this = a2;
  *((_WORD *)this + MTHandMotion_::clearHandMotion(this, 1) = a4;
  *((_DWORD *)this + MTHandMotion_::clearHandMotion(this, 1) = a3;
}

void MTActionEvent_::MTActionEvent_(MTActionEvent_ *this, const MTActionEvent_ *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  *((_DWORD *)this + MTHandMotion_::clearHandMotion(this, 1) = *((_DWORD *)a2 + 1);
}

_DWORD *MTActionEvent_::operator=(_DWORD *result, _DWORD *a2)
{
  if (result != a2)
  {
    void *result = *a2;
    result[1] = a2[1];
  }
  return result;
}

uint64_t MTActionEvent_::deriveGestureStartedType(MTActionEvent_ *this)
{
  if ((*(_WORD *)this & 0xFFFE) == 0x46) {
    return 33;
  }
  else {
    return 0;
  }
}

uint64_t MTActionEvent_::deriveGestureEndedType(MTActionEvent_ *this)
{
  return 32 * ((*(_WORD *)this & 0xFFFE) == 70);
}

void MTDragManagerEventQueue_::MTDragManagerEventQueue_(MTDragManagerEventQueue_ *this)
{
  MTTapDragManager_::MTTapDragManager_((MTTapDragManager_ *)this);
  *(void *)uint64_t v1 = off_141910;
  *(void *)(v1 + 104) = 0;
  *(_DWORD *)(v1 + 112) = 0;
}

MTDragManagerEventQueue_ *MTDragManagerEventQueue_::dispatchModifierUpdates(MTDragManagerEventQueue_ *this, __IOHIDEvent *a2, int a3, int a4, unsigned int a5, int a6)
{
  if (a5 <= 0xF)
  {
    unsigned int v7 = a5;
    uint64_t v11 = this;
    do
    {
      int v12 = 1 << v7;
      if (((1 << v7) & a3) != 0)
      {
        if (a4) {
          int v13 = v11->_modifiersPendingRelease & ~v12;
        }
        else {
          int v13 = v11->_modifiersPendingRelease | v12;
        }
        v11->_modifiersPendingRelease = v13;
        if (v7 > 7) {
          this = (MTDragManagerEventQueue_ *)MTAppendMouseButtonEvent();
        }
        else {
          this = (MTDragManagerEventQueue_ *)MTAppendModifierKeyEvent((uint64_t)a2, v12);
        }
      }
      v7 += a6;
    }
    while (v7 < 0x10);
  }
  return this;
}

MTDragManagerEventQueue_ *MTDragManagerEventQueue_::autoInsertModifierEvents(MTDragManagerEventQueue_ *this, __IOHIDEvent *a2, const MTActionEvent_ *a3, unsigned int a4)
{
  double v5 = this;
  if (!a3)
  {
    p_lastModifiersFromHand = &this->_lastModifiersFromHand;
    unsigned int modifiersFromLastStroke = this->_modifiersFromLastStroke;
    if (!((unsigned __int16)modifiersFromLastStroke | LOWORD(this->_lastModifiersFromHand))) {
      return this;
    }
    int v11 = 0;
    int v12 = (modifiersFromLastStroke | this->_lastModifiersFromHand) & ~a4;
    goto LABEL_15;
  }
  int v6 = *((_DWORD *)a3 + 1);
  int v7 = *(unsigned __int16 *)a3;
  if ((v7 - 129) <= 1)
  {
    unsigned int modifiersFromLastStroke = 0;
    int v9 = 1 << *((_WORD *)a3 + 1);
    if ((*((_WORD *)a3 + 1) & 0xFFF8) != 0xE0) {
      int v9 = 0;
    }
    if (v7 != 130) {
      goto LABEL_12;
    }
LABEL_10:
    int v13 = 0;
    unsigned int v14 = this->_modifiersFromLastStroke;
    unsigned int v15 = this->_modifiersPendingRelease & ~v9;
    this->_modifiersPendingRelease = v15;
    unsigned int modifiersFromLastStroke = v14 & ~v9;
    int v16 = ~v15;
    int v12 = v6;
    goto LABEL_13;
  }
  int v9 = 0;
  if (v7 == 66) {
    goto LABEL_10;
  }
  unsigned int modifiersFromLastStroke = *((_DWORD *)a3 + 1);
LABEL_12:
  unsigned int v17 = this->_modifiersFromLastStroke;
  unsigned int v18 = this->_modifiersPendingRelease | v9;
  this->_modifiersPendingRelease = v18;
  int v16 = ~v18;
  int v13 = v6 & ~v18;
  int v12 = v17 & ~(v9 | v6);
LABEL_13:
  int v11 = v16 & a4 | v13;
  if (!v9)
  {
    p_lastModifiersFromHand = &this->_lastModifiersFromHand;
    v12 |= this->_lastModifiersFromHand & ~(v6 | a4);
LABEL_15:
    unsigned int *p_lastModifiersFromHand = a4;
  }
  this->_unsigned int modifiersFromLastStroke = modifiersFromLastStroke & ~v12;
  if ((_WORD)v12) {
    this = MTDragManagerEventQueue_::dispatchModifierUpdates(this, a2, v12, 1, 0xFu, -1);
  }
  if ((_WORD)v11)
  {
    return MTDragManagerEventQueue_::dispatchModifierUpdates(v5, a2, v11, 0, 0, 1);
  }
  return this;
}

uint64_t MTDragManagerEventQueue_::dispatchFluid(MTDragManagerEventQueue_ *this, MTActionEvent_ *a2, __IOHIDEvent *a3, float a4, float a5)
{
  forceManagementP = this->_forceManagementP;
  if (!forceManagementP || !MTForceManagement_::whichForceButtonActivated(forceManagementP)) {
    MTDragManagerEventQueue_::autoInsertModifierEvents(this, a3, a2, 0);
  }
  int v12 = 27;
  int v13 = 16;
  switch(*(_WORD *)a2)
  {
    case '$':
      goto LABEL_7;
    case '%':
      int v12 = 23;
      break;
    case '&':
    case '\'':
      break;
    default:
      int v13 = 0;
LABEL_7:
      int v12 = v13;
      break;
  }
  *(float *)&double v11 = a4;

  return MTAppendFluidSwipeEvent(v11, a5, (uint64_t)a3, v12);
}

MTDragManagerEventQueue_ *MTDragManagerEventQueue_::dispatch(MTTapDragManager_ *a1, const MTActionEvent_ *a2, __IOHIDEvent *a3, int a4, int *a5, float *a6)
{
  unsigned int v12 = MTTapDragManager_::dragHandModifiers(a1);
  MTAppendChordMotionCodeToCollectionEvent();
  double result = MTDragManagerEventQueue_::autoInsertModifierEvents((MTDragManagerEventQueue_ *)a1, a3, a2, v12);
  int v16 = *(unsigned __int16 *)a2;
  if (v16 == 32)
  {
    return (MTDragManagerEventQueue_ *)MTAppendGestureEndedToCollectionEvent();
  }
  if (v16 == 33)
  {
    return (MTDragManagerEventQueue_ *)MTAppendGestureStartedToCollectionEvent();
  }
  if ((v16 - 35) <= 4)
  {
    int v17 = 27;
    int v18 = 16;
    switch(*(_WORD *)a2)
    {
      case '$':
        goto LABEL_24;
      case '%':
        int v17 = 23;
        break;
      case '&':
      case '\'':
        break;
      default:
        int v18 = 0;
LABEL_24:
        int v17 = v18;
        break;
    }
    return (MTDragManagerEventQueue_ *)MTAppendFluidSwipeEvent(0.0, 0.0, (uint64_t)a3, v17);
  }
  if ((v16 & 0x80) != 0)
  {
    switch(*(_WORD *)a2)
    {
      case 0x81:
      case 0x82:
        double result = (MTDragManagerEventQueue_ *)MTAppendKeyboardEvent();
        break;
      case 0x85:
        double result = (MTDragManagerEventQueue_ *)MTAppendSwipeEvent();
        break;
      case 0x86:
        return result;
      case 0x8C:
        double result = (MTDragManagerEventQueue_ *)MTAppendShowDefinitionEvent();
        break;
      default:
        double result = (MTDragManagerEventQueue_ *)MTAppendKeystrokeEvent();
        break;
    }
    return result;
  }
  if ((v16 & 0x40) == 0 || (v16 - 65) < 2) {
    return result;
  }
  switch(v16)
  {
    case 'I':
      return (MTDragManagerEventQueue_ *)MTAppendZoomToggleEvent();
    case 'H':
      unsigned __int16 v27 = *((_WORD *)a2 + 1);
      int v28 = *((_DWORD *)a1 + 27);
      __int16 v26 = 66;
      MTDragManagerEventQueue_::autoInsertModifierEvents((MTDragManagerEventQueue_ *)a1, a3, (const MTActionEvent_ *)&v26, v12);
      __int16 v26 = 65;
      MTDragManagerEventQueue_::autoInsertModifierEvents((MTDragManagerEventQueue_ *)a1, a3, (const MTActionEvent_ *)&v26, v12);
      __int16 v26 = 66;
      return MTDragManagerEventQueue_::autoInsertModifierEvents((MTDragManagerEventQueue_ *)a1, a3, (const MTActionEvent_ *)&v26, v12);
    case 'C':
      unsigned __int16 v27 = *((_WORD *)a2 + 1);
      int v28 = *((_DWORD *)a1 + 27);
      __int16 v26 = 66;
      return MTDragManagerEventQueue_::autoInsertModifierEvents((MTDragManagerEventQueue_ *)a1, a3, (const MTActionEvent_ *)&v26, v12);
  }
  if ((~v16 & 0x44) != 0) {
    return result;
  }
  if (!a5)
  {
    if (!a4) {
      return result;
    }
    if (v16 == 71)
    {
      *(float *)&double v14 = *a6;
      *(float *)&double v15 = a6[1];
      float v23 = a6[2];
      uint64_t v24 = (uint64_t)a3;
      int v25 = a4;
      int v19 = 0;
      int v20 = 0;
      int v21 = 0;
      int v22 = 0;
      goto LABEL_62;
    }
    if (v16 != 70) {
      return result;
    }
    goto LABEL_52;
  }
  switch(v16)
  {
    case 'F':
LABEL_52:
      return (MTDragManagerEventQueue_ *)MTAppendScrollEvent();
    case 'N':
      return (MTDragManagerEventQueue_ *)MTAppendBoundaryScrollEvent();
    case 'G':
      int v19 = a5[2];
      int v20 = a5[3];
      int v21 = *a5;
      int v22 = a5[1];
      *(float *)&double v14 = *a6;
      *(float *)&double v15 = a6[1];
      float v23 = a6[2];
      uint64_t v24 = (uint64_t)a3;
      int v25 = a4;
LABEL_62:
      return (MTDragManagerEventQueue_ *)MTAppendZoomRotateTranslateEvent(v14, v15, v23, v24, v25, v19, v20, v21, v22);
    default:
      return (MTDragManagerEventQueue_ *)MTAppendRelativeMouseEvent();
  }
}

uint64_t MTGesture::dispatchEvents(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v9 = *a1;
  if (a1[1] == *a1) {
    return 0;
  }
  uint64_t result = 0;
  unsigned int v20 = 0;
  do
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(*(void *)a2 + 24))(a2, v9 + 8 * result, a3, a4, a5, a6, a7, a8, a9);
    uint64_t v9 = *a1;
    uint64_t result = ++v20;
  }
  while (v20 < (unint64_t)((a1[1] - *a1) >> 3));
  return result;
}

MTDragManagerEventQueue_ *MTDragManagerEventQueue_::enableAutoReleaseOfMultiFingerDrag(MTDragManagerEventQueue_ *this)
{
  if ((this->_modifiersPendingRelease & 0x100) != 0) {
    this->_lastModifiersFromHand |= 0x100u;
  }
  return this;
}

uint64_t MTDragManagerEventQueue_::forceButtonChange(MTDragManagerEventQueue_ *this, __IOHIDEvent *a2)
{
  unsigned int v4 = MTTapDragManager_::dragHandModifiers((MTTapDragManager_ *)this);
  uint64_t v6 = 0;
  MTDragManagerEventQueue_::autoInsertModifierEvents(this, a2, (const MTActionEvent_ *)&v6, v4);
  uint64_t result = ((uint64_t (*)(MTDragManagerEventQueue_ *))*this->_vptr$MTTapDragManager_)(this);
  if (result)
  {
    if (this->_cycle_state >= 2) {
      this->_tap_drag_needs_immediate_release = 1;
    }
  }
  return result;
}

uint64_t MTDragManagerEventQueue_::serviceEventQueue(MTDragManagerEventQueue_ *this, __IOHIDEvent *a2, MTGestureConfig_ *a3, double a4, uint64_t a5)
{
  if (this->_cycle_state == 1) {
    return MTTapDragManager_::sendWaitingClickAtHalfTimeout((MTTapDragManager_ *)this, a2, a4, a5) ^ 1;
  }
  if (this->_modifiersPendingRelease
    && this->_modifiersFromLastStroke | this->_lastModifiersFromHand
    && ((*(uint64_t (**)(MTGestureConfig_ *, uint64_t, double))(*(void *)a3 + 16))(a3, a5, a4) & 1) == 0)
  {
    MTDragManagerEventQueue_::autoInsertModifierEvents(this, a2, 0, 0);
    if ((((uint64_t (*)(MTDragManagerEventQueue_ *))*this->_vptr$MTTapDragManager_)(this) & 1) == 0) {
      MTTapDragManager_::clearCycle((uint64_t)this);
    }
  }
  return this->_modifiersPendingRelease != 0;
}

uint64_t MTDragManagerEventQueue_::startMomentum(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a1 + 1268) = a3;
  *(unsigned char *)(a1 + 1264) = 1;
  return MTAppendMomentumEnableEvent();
}

uint64_t MTDragManagerEventQueue_::stopMomentum(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a1 + 1268) = a3;
  *(unsigned char *)(a1 + 1264) = 0;
  return MTAppendMomentumEnableEvent();
}

uint64_t MTDragManagerEventQueue_::isButton1Pending(MTDragManagerEventQueue_ *this)
{
  return BYTE1(this->_modifiersPendingRelease) & 1;
}

uint64_t MTDragManagerEventQueue_::getLastModifiersFromHand(MTDragManagerEventQueue_ *this)
{
  return this->_lastModifiersFromHand;
}

void __cxx_global_var_init_33()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_32(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_currentTimestamp", a2);
  }
}

void __cxx_global_var_init_3_32(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_previousTimestamp", a2);
  }
}

void __cxx_global_var_init_4_31(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)114,(char)101,(char)108,(char)101,(char)97,(char)115,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_release", a2);
  }
}

void __cxx_global_var_init_5_31(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)97,(char)99,(char)116,(char)105,(char)118,(char)97,(char)116,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_activation", a2);
  }
}

void __cxx_global_var_init_6_31(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)101,(char)97,(char)114,(char)108,(char)105,(char)101,(char)115,(char)116,(char)78,(char)111,(char)110,(char)68,(char)105,(char)118,(char)105,(char)110,(char)103,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_earliestNonDivingTimestamp", a2);
  }
}

void __cxx_global_var_init_7_31(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)100,(char)105,(char)118,(char)105,(char)110,(char)103,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)67,(char)104,(char)97,(char)110,(char)103,(char)101,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_divingButtonChangeTimestamp", a2);
  }
}

void __cxx_global_var_init_8_32(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)105,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_min", a2);
  }
}

void __cxx_global_var_init_9_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_max", a2);
  }
}

void __cxx_global_var_init_10_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)66,(char)114,(char)101,(char)97,(char)107,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerBreakTouch_max", a2);
  }
}

void __cxx_global_var_init_11_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)82,(char)101,(char)115,(char)101,(char)116>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentReset", a2);
  }
}

void __cxx_global_var_init_12_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)65,(char)99,(char)116,(char)105,(char)118,(char)105,(char)116,(char)121>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentButtonActivity", a2);
  }
}

void __cxx_global_var_init_13_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_firstFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_14_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_firstFingerCleanStartInRange", a2);
  }
}

void __cxx_global_var_init_15_24(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerCleanStartInRange", a2);
  }
}

void __cxx_global_var_init_16_24(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_17_24(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_previousRecentFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_18_24(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)78,(char)111,(char)110,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)100,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentNonThumbTouchdown", a2);
  }
}

void __cxx_global_var_init_19_24(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_restingThumbTouchDown", a2);
  }
}

void __cxx_global_var_init_20_24(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)84,(char)119,(char)111,(char)79,(char)114,(char)77,(char)111,(char)114,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentTwoOrMoreFingersTouching", a2);
  }
}

void __cxx_global_var_init_21_25(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)118,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFiveFingersTouching", a2);
  }
}

void __cxx_global_var_init_22_25(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)76,(char)105,(char)102,(char)116,(char)111,(char)102,(char)102>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerLiftoff", a2);
  }
}

void __cxx_global_var_init_23_25(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)69,(char)110,(char)100>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerEnd", a2);
  }
}

void __cxx_global_var_init_24_25(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentScrollZoom", a2);
  }
}

void __cxx_global_var_init_25_24(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)119,(char)105,(char)116,(char)99,(char)104>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentChordSwitch", a2);
  }
}

void __cxx_global_var_init_26_24(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentChordSlide", a2);
  }
}

void __cxx_global_var_init_27_23(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109,(char)83,(char)108,(char)105,(char)100,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentScrollZoomSlide", a2);
  }
}

void __cxx_global_var_init_28_23(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)108,(char)117,(char)105,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentFluidSlide", a2);
  }
}

void __cxx_global_var_init_29_23(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)101,(char)120,(char)99,(char)101,(char)115,(char)115,(char)84,(char)97,(char)112,(char)77,(char)111,(char)116,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_excessTapMotion", a2);
  }
}

void __cxx_global_var_init_30_23(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)104,(char)97,(char)110,(char)100,(char)95,(char)99,(char)104,(char)111,(char)114,(char)100,(char)115>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"righthand_chords", a2);
  }
}

void MTForceThresholding_::MTForceThresholding_(MTForceThresholding_ *this)
{
  *(void *)this = off_141960;
  MTForceBehavior_::MTForceBehavior_((MTForceBehavior_ *)((char *)this + 176));
  *((_DWORD *)this + 8objc_storeStrong(&location, 0) = 0;
  *((void *)this + 55) = 0;
  *((void *)this + 56) = 0;
  *((void *)this + 54) = 0;
  MTForceThresholding_::clear(this);
  MTParameterFactory_::initForceThresholdQualifiers((uint64_t)this + 8);
  MTParameterFactory_::initForceActuationQualifiers((uint64_t)this + 144);
  *((void *)this + 42) = 0x100000001;
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)this + 46) = _D0;
}

void sub_5F29C(_Unwind_Exception *a1)
{
  unsigned int v4 = v3;
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 44objc_storeStrong(&location, 0) = v6;
    operator delete(v6);
  }
  MTForceBehavior_::~MTForceBehavior_(v2);
  _Unwind_Resume(a1);
}

void MTForceThresholding_::MTForceThresholding_(MTForceThresholding_ *this, MTForceManagement_ *a2)
{
  MTForceThresholding_::MTForceThresholding_(this);
  *(void *)(v3 + 472) = a2;
}

void MTForceThresholding_::clear(MTForceThresholding_ *this)
{
  *((_DWORD *)this + 8MTHandMotion_::clearHandMotion(this, 1) = 0;
  *((void *)this + 4MTHandMotion_::clearHandMotion(this, 1) = 0;
  *((_DWORD *)this + 114) = 0;
  *((void *)this + 58) = 0;
  *((void *)this + 44) = 0;
  *((void *)this + 45) = 0;
  *((void *)this + 43) = 0;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *((void *)this + 55) = *((void *)this + 54);
  unint64_t v1 = *((unsigned int *)this + 48);
  if (v1) {
    std::vector<float>::resize((uint64_t)this + 432, v1);
  }
}

void MTForceThresholding_::~MTForceThresholding_(MTForceThresholding_ *this)
{
  *(void *)this = off_141960;
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)this + 46) = _D0;
  int v7 = (void *)*((void *)this + 54);
  if (v7)
  {
    *((void *)this + 55) = v7;
    operator delete(v7);
  }
  int v8 = (void *)*((void *)this + 37);
  if (v8)
  {
    *((void *)this + 38) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 34);
  if (v9)
  {
    *((void *)this + 35) = v9;
    operator delete(v9);
  }
  BOOL v10 = (void *)*((void *)this + 31);
  if (v10)
  {
    *((void *)this + 32) = v10;
    operator delete(v10);
  }
  double v11 = (void *)*((void *)this + 28);
  if (v11)
  {
    *((void *)this + 29) = v11;
    operator delete(v11);
  }
  unsigned int v12 = (void *)*((void *)this + 25);
  if (v12)
  {
    *((void *)this + 26) = v12;
    operator delete(v12);
  }
}

{
  uint64_t vars8;

  MTForceThresholding_::~MTForceThresholding_(this);

  operator delete();
}

void MTForceThresholding_::setForceBehavior(MTForceThresholding_ *this, const MTForceBehavior_ *a2, int a3)
{
  MTForceBehavior_::operator=((uint64_t)this + 176, (uint64_t)a2);
  *((_DWORD *)this + 8objc_storeStrong(&location, 0) = a3;

  MTForceThresholding_::clear(this);
}

float MTForceThresholding_::updateForceBehavior(MTForceThresholding_ *this, const MTForceBehavior_ *a2, int a3)
{
  MTForceBehavior_::operator=((uint64_t)this + 176, (uint64_t)a2);
  unint64_t v5 = *((unsigned int *)this + 48);
  if (v5 > (uint64_t)(*((void *)this + 55) - *((void *)this + 54)) >> 2)
  {
    std::vector<float>::resize((uint64_t)this + 432, v5);
    LODWORD(v5) = *((_DWORD *)this + 48);
  }
  if (*((_DWORD *)this + 81) >= v5)
  {
    *((_DWORD *)this + 8MTHandMotion_::clearHandMotion(this, 1) = v5 - 1;
    *((_DWORD *)this + 82) = v5 - 1;
  }
  *((_DWORD *)this + 8objc_storeStrong(&location, 0) = a3;
  float result = *((float *)this + 95);
  *((float *)this + 96) = result;
  return result;
}

uint64_t MTForceThresholding_::actuationWaveformID(MTForceThresholding_ *this)
{
  unsigned int v1 = *((_DWORD *)this + 81);
  int v2 = v1 - *((_DWORD *)this + 82);
  if (v2 >= 1)
  {
    uint64_t v3 = (char *)this + 272;
    return *(unsigned int *)(*(void *)v3 + 4 * v1);
  }
  if (v2 < 0)
  {
    uint64_t v3 = (char *)this + 296;
    unsigned int v1 = *((_DWORD *)this + 82);
    return *(unsigned int *)(*(void *)v3 + 4 * v1);
  }
  return 0;
}

__n128 MTForceThresholding_::setForceActuationQualifiers(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16objc_storeStrong(&location, 0) = v3;
  return result;
}

float MTForceThresholding_::getClickThresholdMultiplier(uint64_t a1, unsigned int a2)
{
  float result = 1.0;
  if (a2 <= 2) {
    return flt_111918[a2];
  }
  return result;
}

float MTForceThresholding_::basicThresholdForLevel(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0)
  {
    float result = 0.0;
LABEL_7:
    uint64_t v5 = *(int *)(a1 + 336);
    goto LABEL_8;
  }
  uint64_t v3 = *(void *)(a1 + 200);
  uint64_t v2 = *(void *)(a1 + 208);
  if ((int)((unint64_t)(v2 - v3) >> 2) <= (int)a2) {
    float result = *(float *)(v2 - 4) + *(float *)(v2 - 4);
  }
  else {
    float result = *(float *)(v3 + 4 * a2);
  }
  if (a2 <= 1) {
    goto LABEL_7;
  }
  if (a2 > 3) {
    return result;
  }
  uint64_t v5 = *(int *)(a1 + 340);
LABEL_8:
  float v6 = 1.0;
  if (v5 <= 2) {
    float v6 = flt_111918[v5];
  }
  return result * v6;
}

float MTForceThresholding_::adaptiveThresholdForLevel(uint64_t a1, unsigned int a2, float *a3, uint64_t a4)
{
  if ((a2 & 0x80000000) != 0) {
    return 0.0;
  }
  float v8 = *(float *)(a1 + 140);
  float v9 = MTForceThresholding_::basicThresholdForLevel(a1, a2);
  if (!*(unsigned char *)(a1 + 424))
  {
    unsigned int v10 = a2 + 2;
    float v11 = MTForceThresholding_::basicThresholdForLevel(a1, a2 + 2);
    float v12 = MTForceThresholding_::basicThresholdForLevel(a1, a2 - 2);
    float v13 = *(float *)(a1 + 136);
    uint64_t v14 = *(int *)(a1 + 340);
    float v15 = 1.0;
    if (v14 <= 2) {
      float v15 = flt_111918[v14];
    }
    float v16 = (float)(v13 * v15) + *(float *)(a1 + 364);
    float v17 = v11 - v9;
    float v18 = v9 - v12;
    unsigned int v19 = a2 & 0x80000001;
    if (a2 < 2 || v19 == 1)
    {
      if (v19 == 1)
      {
        int v22 = *(_DWORD *)(a1 + 324);
        if (v22 >= (int)((a2 + 1) >> 1))
        {
          float v25 = v9;
        }
        else
        {
          uint64_t v23 = (*(void *)(a1 + 208) - *(void *)(a1 + 200)) >> 2;
          if ((int)v23 >= -1) {
            int v24 = v23 + 1;
          }
          else {
            int v24 = v23 + 2;
          }
          float v25 = v16;
          if (v22 < v24 >> 1)
          {
            float v25 = v9;
            if (a2 >= 3)
            {
              float v25 = a3[2] + *(float *)(a1 + 456);
              if (v9 > v25) {
                float v25 = v9;
              }
            }
          }
        }
        float v31 = *(float *)(a1 + 392);
        float v32 = *(float *)(a1 + 116);
        float v33 = 1.0;
        if (v31 > v32)
        {
          float v34 = *(float *)(a1 + 120);
          float v33 = 0.0;
          if (v31 < v34) {
            float v33 = (float)(v34 - v31) / (float)(v34 - v32);
          }
        }
        float v30 = (float)((float)((float)(v17 * *(float *)(a1 + 8)) + v25) * (float)(1.0 - v33)) + (float)(v33 * v25);
        goto LABEL_32;
      }
    }
    else if ((signed int)(v10 >> 1) <= *(_DWORD *)(a1 + 324))
    {
      float v20 = *(float *)(*(void *)(a1 + 432) + 4 * (v10 >> 1));
      float v21 = 1.0;
      if (v20 > 300.0)
      {
        float v21 = 0.0;
        if (v20 < v13) {
          float v21 = (float)(v13 - v20) / (float)(v13 + -300.0);
        }
      }
      float v9 = v20 * (float)((float)((float)(1.0 - v21) * 0.625) + (float)(v21 * 0.85));
    }
    float v26 = *(float *)(a1 + 396);
    float v27 = *(float *)(a1 + 124);
    float v28 = 1.0;
    if (v26 > v27)
    {
      float v29 = *(float *)(a1 + 128);
      float v28 = 0.0;
      if (v26 < v29) {
        float v28 = (float)(v29 - v26) / (float)(v29 - v27);
      }
    }
    float v30 = (float)((float)(v9 - (float)(v18 * *(float *)(a1 + 12))) * (float)(1.0 - v28)) + (float)(v28 * v9);
LABEL_32:
    if ((*(unsigned char *)(a1 + 180) & 0x80) == 0)
    {
      float v35 = v17 * *(float *)(a1 + 20);
      float v36 = v18 * *(float *)(a1 + 24);
      float v37 = *(float *)(a4 + 64);
      float v38 = *(float *)(a1 + 108);
      float v39 = *(float *)(a1 + 112);
      BOOL v40 = v37 < v39;
      float v41 = (float)(v39 - v37) / (float)(v39 - v38);
      if (!v40) {
        float v41 = 0.0;
      }
      if (v37 > v38) {
        float v42 = v41;
      }
      else {
        float v42 = 1.0;
      }
      float v30 = (float)((float)(v35 + v30) * (float)(1.0 - v42)) + (float)(v42 * (float)(v30 - v36));
    }
    if (v30 >= v16) {
      float v9 = v16;
    }
    else {
      float v9 = v30;
    }
    if (v19 == 1 && *(_DWORD *)(a1 + 324) < (signed int)((a2 + 1) >> 1))
    {
      float v43 = a3[10];
      float v44 = a3[11];
      float v45 = v43 * *(float *)(a1 + 132);
      if (v45 >= (float)(*(float *)(a1 + 356) - v44)) {
        float v45 = *(float *)(a1 + 356) - v44;
      }
      float v46 = v43 - v44;
      if (v46 < 0.0) {
        float v46 = 0.0;
      }
      float v47 = (float)(v43 + v45) - v46;
      if (v9 <= v47) {
        float v9 = v47;
      }
    }
    if (*(float *)(a1 + 400) > *(float *)(a1 + 128)
      && v19 == 1
      && *(_DWORD *)(a1 + 176) != 16
      && *(_DWORD *)(a1 + 324) < (signed int)((a2 + 1) >> 1)
      && a2 > 2)
    {
      return v8 + v8;
    }
  }
  return v9;
}

float MTForceThresholding_::thresholdForNextRelease(MTForceThresholding_ *this, const MTForceFilter_ *a2, const MTParserPath_ *a3)
{
  int v6 = 2 * *((_DWORD *)this + 81);
  int v7 = (char *)this + 176;
  do
  {
    int v8 = v6;
    if (v6 < 3) {
      break;
    }
    BOOL v9 = MTForceBehavior_::skipReleaseStage((uint64_t)v7, (v6 - 1) >> 1);
    int v6 = v8 - 2;
  }
  while (v9);

  return MTForceThresholding_::adaptiveThresholdForLevel((uint64_t)this, v8 - 2, (float *)a2, (uint64_t)a3);
}

BOOL MTForceBehavior_::skipReleaseStage(uint64_t a1, int a2)
{
  int v6 = 0;
  int v7 = 0;
  uint64_t v8 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v6, *(const void **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 2);
  uint64_t v3 = v7;
  unsigned int v4 = v6;
  if (v6 != v7)
  {
    unsigned int v4 = v6;
    while (*v4 != a2)
    {
      if (++v4 == v7)
      {
        unsigned int v4 = v7;
        break;
      }
    }
  }
  if (v6)
  {
    int v7 = v6;
    operator delete(v6);
  }
  return v4 != v3;
}

float MTForceThresholding_::thresholdForNextActivation(MTForceThresholding_ *this, const MTForceFilter_ *a2, const MTParserPath_ *a3)
{
  int v6 = (char *)this + 176;
  int v7 = 2 * *((_DWORD *)this + 81) + 2;
  do
  {
    int v8 = v7;
    if (v7 >= (int)((*((void *)this + 26) - *((void *)this + 25)) >> 2)) {
      break;
    }
    BOOL v9 = MTForceBehavior_::skipActivationStage((uint64_t)v6, v7 / 2);
    int v7 = v8 + 2;
  }
  while (v9);

  return MTForceThresholding_::adaptiveThresholdForLevel((uint64_t)this, v8 - 1, (float *)a2, (uint64_t)a3);
}

BOOL MTForceBehavior_::skipActivationStage(uint64_t a1, int a2)
{
  int v6 = 0;
  int v7 = 0;
  uint64_t v8 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v6, *(const void **)(a1 + 48), *(void *)(a1 + 56), (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2);
  uint64_t v3 = v7;
  unsigned int v4 = v6;
  if (v6 != v7)
  {
    unsigned int v4 = v6;
    while (*v4 != a2)
    {
      if (++v4 == v7)
      {
        unsigned int v4 = v7;
        break;
      }
    }
  }
  if (v6)
  {
    int v7 = v6;
    operator delete(v6);
  }
  return v4 != v3;
}

float MTForceThresholding_::preReleaseProgress(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a1 + 352);
  float v3 = v2 * (float)(*(float *)(a1 + 56) + 1.0);
  float result = 0.0;
  if (v2 < v3 && *(int *)(a1 + 324) >= 1)
  {
    float v5 = *(float *)(a2 + 40);
    float result = 1.0;
    if (v5 > v2)
    {
      float result = 0.0;
      if (v5 < v3) {
        return (float)(v3 - v5) / (float)(v3 - v2);
      }
    }
  }
  return result;
}

float MTForceThresholding_::preActivationProgress(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a1 + 356);
  float v3 = v2 * (float)(1.0 - *(float *)(a1 + 60));
  float result = 0.0;
  if (v3 < v2)
  {
    uint64_t v5 = (*(void *)(a1 + 208) - *(void *)(a1 + 200)) >> 2;
    if ((int)v5 >= -1) {
      int v6 = v5 + 1;
    }
    else {
      int v6 = v5 + 2;
    }
    if (*(_DWORD *)(a1 + 324) < v6 >> 1 && v2 < *(float *)(a1 + 140))
    {
      float v7 = *(float *)(a2 + 40);
      if (v7 > v3)
      {
        float result = 1.0;
        if (v7 < v2) {
          return (float)(v7 - v3) / (float)(v2 - v3);
        }
      }
    }
  }
  return result;
}

float MTForceThresholding_::postActivationProgress(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a1 + 64);
  uint64_t v3 = *(unsigned int *)(a1 + 324);
  if (*(unsigned char *)(a1 + 188))
  {
    uint64_t v4 = (*(void *)(a1 + 208) - *(void *)(a1 + 200)) >> 2;
    int v5 = (int)v4 >= -1 ? v4 + 1 : (int)v4 + 2;
    if ((int)v3 >= v5 >> 1) {
      float v2 = *(float *)(a1 + 68);
    }
  }
  float v6 = *(float *)(*(void *)(a1 + 432) + 4 * v3);
  int v7 = *(_DWORD *)(a1 + 176);
  if (v7 == 12)
  {
    uint64_t v8 = *(int *)(a1 + 336);
    float v9 = 1.0;
    if (v8 <= 2) {
      float v9 = flt_111918[v8];
    }
    float v10 = *(float *)(a1 + 136) * v9;
  }
  else
  {
    float v11 = 1.0;
    if (v7 == 11)
    {
      uint64_t v12 = *(int *)(a1 + 336);
      if (v12 <= 2) {
        float v11 = flt_111918[v12];
      }
      float v10 = (float)(*(float *)(a1 + 136) * v11) * 0.5;
      float v6 = 0.0;
    }
    else
    {
      float v10 = (float)(v2 + 1.0) * v6;
    }
  }
  uint64_t v13 = (*(void *)(a1 + 208) - *(void *)(a1 + 200)) >> 2;
  if ((int)v13 >= -1) {
    int v14 = v13 + 1;
  }
  else {
    int v14 = v13 + 2;
  }
  if ((int)v3 < v14 >> 1 && v10 >= *(float *)(a1 + 356)) {
    float v10 = *(float *)(a1 + 356);
  }
  double v15 = 0.0;
  if ((int)v3 >= 1 && v6 < v10)
  {
    float v16 = *(float *)(a2 + 40);
    if (v16 > v6)
    {
      if (v16 >= v10) {
        double v15 = 3.14159265;
      }
      else {
        double v15 = (float)((float)(v16 - v6) / (float)(v10 - v6)) * 3.14159265;
      }
    }
  }
  return (1.0 - cos(v15)) * 0.5;
}

float MTForceThresholding_::rescaleForceAsLadderProgress(MTForceThresholding_ *this, const MTPathStates_ *a2)
{
  int v2 = *((_DWORD *)this + 80);
  uint64_t v3 = *((void *)a2 + 35);
  uint64_t v4 = (*((void *)this + 26) - *((void *)this + 25)) >> 2;
  if ((v4 & 0x80000000) != 0)
  {
    float v9 = 0.0;
    float v10 = 1.0;
    float v7 = 0.0;
LABEL_11:
    float v11 = (float)(*(float *)(v3 + 568 * v2 + 328) - v9) / (float)(v10 - v9);
    return v7 + v11;
  }
  float v6 = *(float *)(v3 + 568 * v2 + 328);
  float v7 = 0.0;
  signed int v8 = -1;
  do
  {
    float v9 = MTForceThresholding_::basicThresholdForLevel((uint64_t)this, v8);
    v8 += 2;
    float v10 = MTForceThresholding_::basicThresholdForLevel((uint64_t)this, v8);
    if (v6 < v9 || v6 < v10 || v8 >= (int)v4 && v6 > v10) {
      break;
    }
    float v7 = v7 + 1.0;
  }
  while (v8 < (int)v4);
  float v11 = 0.0;
  if (v10 > v9) {
    goto LABEL_11;
  }
  return v7 + v11;
}

uint64_t MTForceThresholding_::classifyForceLevelAdaptively(uint64_t a1, float *a2, uint64_t a3)
{
  unsigned int v6 = 0;
  uint64_t v7 = (*(void *)(a1 + 208) - *(void *)(a1 + 200)) >> 2;
  float v8 = a2[10];
  int v9 = v7 & ~((int)v7 >> 31);
  uint64_t v10 = (v9 - 1);
  while (v9 != v6)
  {
    float v11 = MTForceThresholding_::adaptiveThresholdForLevel(a1, v6++, a2, a3);
    if (v8 <= v11) {
      return v6 - 2;
    }
  }
  return v10;
}

uint64_t MTForceThresholding_::fingersMatchBehavior(MTForceThresholding_ *this, const MTPathStates_ *a2, int a3)
{
  unsigned int v6 = (MTForceBehavior_ *)((char *)this + 176);
  if (MTForceBehavior_::forceSourceFingerCount((MTForceBehavior_ *)((char *)this + 176)) == 2) {
    return *(_DWORD *)(*((void *)this + 59) + 576) == 2;
  }
  if (MTForceBehavior_::forceSourceFingerCount(v6) == 3) {
    return *(_DWORD *)(*((void *)this + 59) + 576) == 3;
  }
  int v9 = (MTParserPath_ *)(*((void *)a2 + 35) + 568 * a3);

  return MTParserPath_::isValidClickSource(v9);
}

void MTForceThresholding_::updateAccidentalClickPreventionOffsets(uint64_t a1, unsigned int a2, uint64_t a3, MTParserPath_ *this, uint64_t a5, double a6, float a7, float a8)
{
  uint64_t v14 = *(int *)(a1 + 340);
  float v15 = 1.0;
  if (v14 <= 2) {
    float v15 = flt_111918[v14];
  }
  if (v14) {
    double v16 = dbl_1118F0[v14 == 2];
  }
  else {
    double v16 = 0.9992;
  }
  float v17 = *(float *)(a1 + 88) + (v15 + -1.0) * 0.01;
  BOOL isThumbContact = MTParserPath_::isThumbContact(this);
  float v19 = v17 + 0.01;
  if (!isThumbContact) {
    float v19 = v17;
  }
  double v20 = pow(v19, (*(double *)(a5 + 8) - *(double *)(a5 + 16)) / 0.00800000038);
  float v21 = *(float *)(a1 + 92);
  if (*(float *)(a1 + 400) > *(float *)(a1 + 128))
  {
    float v22 = *(float *)(a3 + 8);
    float v23 = *(float *)(a1 + 100);
    float v24 = 0.0;
    if (v22 > v23)
    {
      float v25 = *(float *)(a1 + 104);
      BOOL v26 = v22 < v25;
      float v24 = (float)(v22 - v23) / (float)(v25 - v23);
      if (!v26) {
        float v24 = 1.0;
      }
    }
    float v21 = (float)(v21 * (float)(1.0 - v24)) + (float)(v24 * *(float *)(a1 + 96));
  }
  float v27 = *(float *)(a1 + 80);
  float v28 = *(float *)(a1 + 84);
  float v29 = a7 - (float)(*(float *)(a1 + 72) * v15);
  float v30 = a8 - (float)(*(float *)(a1 + 76) * v15);
  float v31 = fmaxf(v29, 0.0);
  if (v31 >= v27) {
    float v32 = *(float *)(a1 + 80);
  }
  else {
    float v32 = v31;
  }
  *(float *)(a1 + 364) = v32;
  if (v29 <= v30) {
    float v29 = v30;
  }
  float v33 = fmaxf(v29, 0.0);
  if (v33 >= v27) {
    float v34 = v27;
  }
  else {
    float v34 = v33;
  }
  *(float *)(a1 + 36objc_storeStrong(&location, 0) = v34;
  float v35 = MTForceThresholding_::basicThresholdForLevel(a1, 3u);
  if (a2 != 0 && a2 < 0xFFFFFFFE)
  {
    double v36 = *(double *)(a1 + 464) * (*(double *)(a1 + 464) * *(double *)(a1 + 464));
    *(double *)(a1 + 464) = v36;
    if (v36 <= 0.01)
    {
      float v38 = v20;
      float v37 = (float)((float)(1.0 - v38) * (float)((float)(v15 * v21) + v32)) + (float)(v38 * *(float *)(a1 + 456));
      goto LABEL_26;
    }
  }
  else
  {
    *(double *)(a1 + 464) = v16;
  }
  float v37 = v35 + (float)(v32 + (float)((float)(v15 * v28) + v34));
LABEL_26:
  *(float *)(a1 + 456) = v37;
}

void MTForceThresholding_::updateAdaptiveThresholdingParameters(uint64_t a1, int a2, MTPathStates_ *this, double a4, uint64_t a5)
{
  MTPathStates_::getMaxDisplacement_mm(this);
  *(float *)(a1 + 40objc_storeStrong(&location, 0) = v9;
  float v10 = *(float *)(a5 + 336);
  *(float *)(a1 + 404) = v10;
  int v11 = *(_DWORD *)(a1 + 324);
  if (*(_DWORD *)(a1 + 332) > v11 && v11 >= 1)
  {
    float v13 = *((double *)this + 1) - a4;
    float v14 = 0.0;
    if (v13 > 0.25)
    {
      float v14 = 1.0;
      if (v13 < 0.5) {
        float v14 = (float)(v13 + -0.25) * 4.0;
      }
    }
    float v10 = (float)(v9 * (float)(1.0 - v14)) + (float)(v14 * v10);
  }
  *(float *)(a1 + 396) = v10;
  *(float *)(a1 + 392) = MTPathStates_::sumOfLowpassPeakFingerSpeeds(this);
}

uint64_t MTForceThresholding_::analyzeForceAndStage(MTForceThresholding_ *this, MTPathStates_ *a2, int a3, const MTForceBehavior_ *a4, double a5, double a6, int a7, float a8, float a9)
{
  double v9 = a5;
  int v13 = *((_DWORD *)this + 81);
  int v14 = 2 * v13;
  unsigned int v15 = 2 * v13 - 1;
  int v16 = *((_DWORD *)this + 80);
  if (v13)
  {
    uint64_t v17 = *((void *)a2 + 35);
    LODWORD(a5) = *(_DWORD *)(v17 + 568 * a3 + 328);
    if (*(float *)&a5 <= *(float *)(v17 + 568 * v16 + 328))
    {
      int v38 = *((_DWORD *)this + 80);
    }
    else
    {
      int v16 = a3;
      int v38 = a3;
    }
  }
  else
  {
    int v38 = *((_DWORD *)this + 80);
    uint64_t v17 = *((void *)a2 + 35);
  }
  int v36 = v16;
  float v18 = (MTParserPath_ *)(v17 + 568 * v16);
  MTForceThresholding_::updateAccidentalClickPreventionOffsets((uint64_t)this, v14 - 1, (uint64_t)&v18[2].var3.var8, v18, (uint64_t)a2, a5, a8, a9);
  MTForceThresholding_::updateAdaptiveThresholdingParameters((uint64_t)this, v19, a2, v9, (uint64_t)v18);
  int v20 = MTForceThresholding_::classifyForceLevelAdaptively((uint64_t)this, &v18[2].var3.var8, (uint64_t)v18);
  int v21 = v20;
  float var4 = v18[2].var4;
  int v23 = *((_DWORD *)this + 44);
  *((float *)this + 95) = var4;
  if (a4->var0 == 11 && v23 == 11 && !*((_DWORD *)this + 81) && *((double *)a2 + 1) - v9 < *((float *)this + 12))
  {
    if (v20 <= 1) {
      int v24 = 1;
    }
    else {
      int v24 = v20;
    }
    if ((*(_DWORD *)(v17 + 568 * v36 + 36) - 3) >= 2) {
      int v21 = v20;
    }
    else {
      int v21 = v24;
    }
  }
  float v25 = *((float *)this + 96);
  if (vabds_f32(var4, v25) <= (float)(v25 * *((float *)this + 33)))
  {
    if (v25 != 0.0) {
      goto LABEL_40;
    }
  }
  else
  {
    *((_DWORD *)this + 96) = 0;
  }
  if (v21 >= (v14 | 1))
  {
    if (MTForceThresholding_::fingersMatchBehavior(this, a2, v38) && a7)
    {
      int v31 = v21 - ((v21 & 0x80000001) != 1);
      int v32 = v31 + 2;
      if (v31 >= -1) {
        int v32 = v31 + 1;
      }
      if (!MTForceBehavior_::skipActivationStage((uint64_t)this + 176, v32 >> 1)) {
        unsigned int v15 = v21 - ((v21 & 0x80000001) != 1);
      }
    }
  }
  else if (v21 <= v14 - 3)
  {
    int v26 = (v21 & 0x80000001) == 1 ? v21 : v21 + 1;
    float v27 = *((float *)this + 94);
    float v28 = *((float *)this + 97);
    if (v28 <= v27
      || (float v29 = *((float *)a2 + 88), (float)(v28 - v29) >= (float)((float)(v27 - var4) * *((float *)this + 9)))
      || v29 <= *((float *)this + 10))
    {
      if (v23 != 11 || *((int *)this + 81) < 1 || (*(_DWORD *)(v17 + 568 * v36 + 36) - 3) >= 2)
      {
        int v30 = v26 + 2;
        if (v26 >= -1) {
          int v30 = v26 + 1;
        }
        if (!MTForceBehavior_::skipReleaseStage((uint64_t)this + 176, v30 >> 1)) {
          unsigned int v15 = v26;
        }
      }
    }
  }
LABEL_40:
  int v33 = v15 + 2;
  if ((int)(v15 + 1) >= 0) {
    int v33 = v15 + 1;
  }
  uint64_t v34 = (v33 >> 1);
  if ((int)v34 < *((_DWORD *)this + 81)) {
    unsigned int v15 = v15 + 1 - ((v15 & 0x80000001) != 1);
  }
  *((float *)this + 86) = MTForceThresholding_::basicThresholdForLevel((uint64_t)this, v15);
  *((float *)this + 87) = MTForceThresholding_::adaptiveThresholdForLevel((uint64_t)this, v15, &v18[2].var3.var8, (uint64_t)v18);
  MTForceThresholding_::updateStage((uint64_t)this, v34, &v18[2].var3.var8, (uint64_t)v18, *((float *)a2 + 88), *((double *)a2 + 1));
  *((float *)this + 88) = MTForceThresholding_::thresholdForNextRelease(this, (const MTForceFilter_ *)&v18[2].var3.var8, v18);
  *((float *)this + 89) = MTForceThresholding_::thresholdForNextActivation(this, (const MTForceFilter_ *)&v18[2].var3.var8, v18);
  return v34;
}

void MTForceThresholding_::updateStage(uint64_t a1, int a2, float *a3, uint64_t a4, float a5, double a6)
{
  int v8 = *(_DWORD *)(a1 + 324);
  *(_DWORD *)(a1 + 328) = v8;
  *(_DWORD *)(a1 + 324) = a2;
  int v9 = *(_DWORD *)(a1 + 332);
  if (v9 < a2)
  {
    *(_DWORD *)(a1 + 332) = a2;
    float v10 = a3[10];
LABEL_3:
    *(float *)(a1 + 376) = v10;
    *(float *)(a1 + 388) = a5;
    *(double *)(a1 + 416) = a6;
    goto LABEL_6;
  }
  if (v9 == a2)
  {
    float v10 = a3[10];
    if (v10 > *(float *)(a1 + 376)) {
      goto LABEL_3;
    }
  }
LABEL_6:
  if (a2 >= 1 && !v8) {
    *(double *)(a1 + 408) = a6;
  }
  if (v8 != a2)
  {
    if (*(unsigned char *)(a1 + 172))
    {
      float v11 = *(float *)(a4 + 64) + -1.0;
      float v12 = 2.0;
      if (v11 < 2.0)
      {
        float v12 = 0.0;
        if (v11 >= 0.0) {
          float v12 = *(float *)(a4 + 64) + -1.0;
        }
      }
      *(float *)(a1 + 368) = (float)(MTForceFilter_::surgeToActuationStrength((uint64_t)a3, (float *)(a1 + 144))
                                   + (float)(*(float *)(a1 + 164) * v12))
                           * *(float *)(a1 + 168);
      *(float *)(a1 + 372) = (float)(*(float *)(a1 + 156) * v12) + 1.0;
      a2 = *(_DWORD *)(a1 + 324);
      int v8 = *(_DWORD *)(a1 + 328);
      if (a2 > v8)
      {
        double v13 = MTForceFilter_::surge_g_s((MTForceFilter_ *)a3);
        double v14 = *(float *)(a1 + 144);
        float v15 = MTForceFilter_::surgeToActuationStrength((uint64_t)a3, (float *)(a1 + 144));
        printf("Surge=%.2f/%.2f, SurgeAmplitude=%.2f + excess area=%.2f -> stageStrength=%.2f, stageDilation=%.2f\n", v13, v14, v15, v12, *(float *)(a1 + 368), *(float *)(a1 + 372));
        a2 = *(_DWORD *)(a1 + 324);
        int v8 = *(_DWORD *)(a1 + 328);
      }
    }
    else
    {
      __asm { FMOV            V0.2S, #1.0 }
      *(void *)(a1 + 368) = _D0;
    }
    *(_DWORD *)(a1 + 384) = 0;
    if (a2 <= v8)
    {
      if (a2 < v8)
      {
        int v23 = (void *)(*(void *)(a1 + 432) + 4 * a2 + 4);
        size_t v24 = 4 * (v8 + ~a2) + 4;
        bzero(v23, v24);
      }
    }
    else
    {
      uint64_t v21 = a2 - (uint64_t)v8;
      float v22 = (_DWORD *)(*(void *)(a1 + 432) + 4 * v8 + 4);
      do
      {
        *v22++ = *((_DWORD *)a3 + 10);
        --v21;
      }
      while (v21);
    }
  }
}

void __cxx_global_var_init_34()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_33(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_currentTimestamp", a2);
  }
}

void __cxx_global_var_init_3_33(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_previousTimestamp", a2);
  }
}

void __cxx_global_var_init_4_32(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)114,(char)101,(char)108,(char)101,(char)97,(char)115,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_release", a2);
  }
}

void __cxx_global_var_init_5_32(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)97,(char)99,(char)116,(char)105,(char)118,(char)97,(char)116,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_activation", a2);
  }
}

void __cxx_global_var_init_6_32(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)101,(char)97,(char)114,(char)108,(char)105,(char)101,(char)115,(char)116,(char)78,(char)111,(char)110,(char)68,(char)105,(char)118,(char)105,(char)110,(char)103,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_earliestNonDivingTimestamp", a2);
  }
}

void __cxx_global_var_init_7_32(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)100,(char)105,(char)118,(char)105,(char)110,(char)103,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)67,(char)104,(char)97,(char)110,(char)103,(char)101,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_divingButtonChangeTimestamp", a2);
  }
}

void __cxx_global_var_init_8_33(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)105,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_min", a2);
  }
}

void __cxx_global_var_init_9_18(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_max", a2);
  }
}

void __cxx_global_var_init_10_18(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)66,(char)114,(char)101,(char)97,(char)107,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerBreakTouch_max", a2);
  }
}

float mthm_ComputeFingerEllipseTipOffset_mm(int *a1, MTSurfaceDimensions_ *this, float32x2_t *a3, float *a4, int8x16_t a5, double a6, int8x16_t a7, int8x16_t a8)
{
  if (a1[1]) {
    int v11 = -1;
  }
  else {
    int v11 = 1;
  }
  if (!*((unsigned char *)a1 + 44) || a3[5].f32[0] == 0.0 && a3[5].f32[1] == 0.0)
  {
    float v13 = a3[7].f32[1];
    float v14 = a3[8].f32[0];
    float v15 = a3[7].f32[0];
  }
  else
  {
    a5.i32[0] = a3[7].i32[1];
    __int32 v16 = a1[12];
    a7.i32[0] = v16;
    float v13 = invertRadiusSmoothing(a5, a4[15], a7, a8);
    v17.i32[0] = a3[8].i32[0];
    v18.i32[0] = v16;
    float v14 = invertRadiusSmoothing(v17, a4[16], v18, v19);
    v20.i32[0] = a3[7].i32[0];
    v21.i32[0] = v16;
    float v15 = invertRadiusSmoothing(v20, a4[14], v21, v22);
  }
  int v23 = *a1;
  float v24 = (float)v11;
  float v25 = 0.0;
  switch(*a1)
  {
    case 0:
      goto LABEL_25;
    case 1:
      float v25 = -(float)(*((float *)a1 + 5) * v24);
      goto LABEL_19;
    case 2:
      float v15 = v15 + 3.14159265;
      float v25 = *((float *)a1 + 5) * v24;
      goto LABEL_19;
    case 3:
      if (v15 < 1.57079633)
      {
        float v26 = v15 + 3.14159265;
        float v15 = v26;
      }
      float v25 = -*((float *)a1 + 4);
      goto LABEL_19;
    case 4:
      if (v15 > 1.57079633)
      {
        float v27 = v15 + 3.14159265;
        float v15 = v27;
      }
      float v25 = *((float *)a1 + 4);
      goto LABEL_19;
    default:
      float v25 = 0.0;
LABEL_19:
      float v28 = *((float *)a1 + 8);
      if (v14 > v28) {
        float v28 = v14;
      }
      float v29 = *((float *)a1 + 6) + v28;
      if (v13 > v29)
      {
        float v30 = v13 - v29;
        if (v30 > *((float *)a1 + 7)) {
          float v30 = *((float *)a1 + 7);
        }
        float v31 = *((float *)a1 + 3) * v30;
        float v25 = v25 + (float)(v31 * __sincosf_stret(v15).__cosval);
      }
LABEL_25:
      int v32 = *((unsigned __int8 *)a1 + 40);
      __asm { FMOV            V1.2S, #1.0 }
      float32x2_t v38 = vminnm_f32(vmaxnm_f32(a3[4], 0), _D1);
      float32x2_t v39 = vminnm_f32(v38, vsub_f32(_D1, v38));
      _D1.i32[0] = v39.i32[1];
      float v40 = MTSurfaceDimensions_::convertSurfaceFractionToMillimeters(this, *(MTPoint *)((char *)&_D1 - 4));
      float v41 = *((float *)a1 + 15);
      if ((v23 - 1) > 1)
      {
        float v42 = 1.0;
        float v43 = *((float *)a1 + 14);
        if (v43 != 0.0) {
          float v42 = fmin((float)(v40 / v43), 1.0);
        }
      }
      else
      {
        float v42 = 1.0;
        if (v41 != 0.0) {
          float v42 = fmin((float)(v40 / v41), 1.0);
        }
      }
      float v44 = fabsf(v25);
      if (v32) {
        float v44 = v25;
      }
      return v44 * v42;
  }
}

float invertRadiusSmoothing(int8x16_t a1, float a2, int8x16_t a3, int8x16_t a4)
{
  if (a2 != 0.0)
  {
    *(float *)a4.i32 = (float)(*(float *)a1.i32 - a2) / a2;
    float v4 = fabsf(*(float *)a4.i32);
    double v5 = v4;
    if (*(float *)a3.i32 * 0.125 <= v4)
    {
      *(double *)a3.i64 = (float)(*(float *)a3.i32 + 1.0);
      if (*(double *)a3.i64 * 0.0625 <= v5)
      {
        if (*(double *)a3.i64 * 0.125 > v5)
        {
          *(float *)a1.i32 = (*(float *)a4.i32 / (*(double *)a3.i64 * 0.5) + 1.0) * a2;
          return *(float *)a1.i32;
        }
        a3.i32[0] = 0.25;
        if (v4 >= 0.25) {
          return *(float *)a1.i32;
        }
        a1.i64[0] = 0x8000000080000000;
        a1.i64[1] = 0x8000000080000000;
        *(float *)a1.i32 = *(float *)vbslq_s8(a1, a3, a4).i32 + 1.0;
      }
      else
      {
        a1.i32[0] = 0.125;
        v6.i64[0] = 0x8000000080000000;
        v6.i64[1] = 0x8000000080000000;
        *(float *)a1.i32 = *(float *)vbslq_s8(v6, a1, a4).i32 + 1.0;
      }
    }
    else
    {
      *(float *)a1.i32 = (float)(*(float *)a4.i32 / *(float *)a3.i32) + 1.0;
    }
    *(float *)a1.i32 = *(float *)a1.i32 * a2;
  }
  return *(float *)a1.i32;
}

void mthm_ComputeFingerEllipseTipOffsetFromPressure_mm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(float *)(a3 + 60) > (float)(*(float *)(a1 + 24) + *(float *)(a1 + 32))) {
    __sincosf_stret(*(float *)(a3 + 56));
  }
}

void __cxx_global_var_init_35()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_34(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_currentTimestamp", a2);
  }
}

void __cxx_global_var_init_3_34(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_previousTimestamp", a2);
  }
}

void MTFingerToPathMap_::MTFingerToPathMap_(MTFingerToPathMap_ *this, char a2)
{
  *(void *)this = off_141990;
  *((unsigned char *)this + 76) = a2;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 4objc_storeStrong(&location, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_WORD *)((char *)this + 103) = 0;
  *((void *)this + 1objc_storeStrong(&location, 0) = 0;
  *((void *)this + 1MTHandMotion_::clearHandMotion(this, 1) = 0;
  *(void *)((char *)this + 94) = 0;
}

double MTFingerToPathMap_::clearFingerPathMappings(MTFingerToPathMap_ *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 4objc_storeStrong(&location, 0) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_WORD *)((char *)this + 103) = 0;
  *((void *)this + 1objc_storeStrong(&location, 0) = 0;
  *((void *)this + 1MTHandMotion_::clearHandMotion(this, 1) = 0;
  *(void *)((char *)this + 94) = 0;
  return result;
}

void MTFingerToPathMap_::~MTFingerToPathMap_(MTFingerToPathMap_ *this)
{
}

uint64_t MTFingerToPathMap_::getInnermostTouchingPath(MTFingerToPathMap_ *this, const MTPathStates_ *a2)
{
  uint64_t v2 = *((unsigned int *)this + 20);
  if (v2 > 0xF) {
    int v3 = 0;
  }
  else {
    int v3 = *((_DWORD *)this + v2 + 2);
  }
  return *((void *)a2 + 35) + 568 * v3;
}

uint64_t MTFingerToPathMap_::getOutermostTouchingPath(MTFingerToPathMap_ *this, const MTPathStates_ *a2)
{
  uint64_t v2 = *((unsigned int *)this + 22);
  if (v2 > 0xF) {
    int v3 = 0;
  }
  else {
    int v3 = *((_DWORD *)this + v2 + 2);
  }
  return *((void *)a2 + 35) + 568 * v3;
}

uint64_t MTFingerToPathMap_::getInnermostInRangePath(MTFingerToPathMap_ *this, const MTPathStates_ *a2)
{
  uint64_t v2 = *((unsigned int *)this + 23);
  if (v2 > 0xF) {
    int v3 = 0;
  }
  else {
    int v3 = *((_DWORD *)this + v2 + 2);
  }
  return *((void *)a2 + 35) + 568 * v3;
}

uint64_t MTFingerToPathMap_::getOutermostInRangePath(MTFingerToPathMap_ *this, const MTPathStates_ *a2)
{
  uint64_t v2 = *((unsigned int *)this + 24);
  if (v2 > 0xF) {
    int v3 = 0;
  }
  else {
    int v3 = *((_DWORD *)this + v2 + 2);
  }
  return *((void *)a2 + 35) + 568 * v3;
}

uint64_t MTFingerToPathMap_::clearMaxFingersTouching(uint64_t this)
{
  *(unsigned char *)(this + 102) = 0;
  return this;
}

uint64_t MTFingerToPathMap_::updateFingerPathMappings(uint64_t this, const MTPathStates_ *a2)
{
  uint64_t v3 = this;
  *(_OWORD *)(this + 56) = 0u;
  *(_OWORD *)(this + 4objc_storeStrong(&location, 0) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  *(_OWORD *)(this + 8) = 0u;
  *(_WORD *)(this + 103) = 0;
  *(void *)(this + 8objc_storeStrong(&location, 0) = 0;
  *(void *)(this + 88) = 0;
  uint64_t v4 = 1;
  uint64_t v5 = 632;
  *(void *)(this + 94) = 0;
  do
  {
    uint64_t v6 = *((void *)a2 + 35);
    uint64_t v7 = (float *)(v6 + v5);
    if (v4 != *(_DWORD *)(v6 + v5 - 32) || *v7 <= 0.0) {
      goto LABEL_31;
    }
    uint64_t v8 = *(unsigned int *)(v6 + v5 - 24);
    if (v8 <= 0xF) {
      *(_DWORD *)(v3 + 4 * v8 + 8) = v4;
    }
    int v9 = (MTParserPath_ *)(v7 - 16);
    this = MTParserPath_::isPalmContact((MTParserPath_ *)(v7 - 16));
    if (this)
    {
      ++*(unsigned char *)(v3 + 104);
      goto LABEL_31;
    }
    this = MTParserPath_::isEdgeContact(v9);
    if (this)
    {
      ++*(unsigned char *)(v3 + 103);
      goto LABEL_31;
    }
    if (*(unsigned char *)(v3 + 76))
    {
      this = MTParserPath_::isFingerContact(v9);
      if (this) {
        goto LABEL_14;
      }
      if (*(unsigned char *)(v3 + 76)) {
        goto LABEL_31;
      }
    }
    this = MTParserPath_::isFingerOrRestingContact(v9);
    if (!this) {
      goto LABEL_31;
    }
LABEL_14:
    ++*(unsigned char *)(v3 + 100);
    int v10 = *(_DWORD *)(v3 + 92);
    if (!v10 || (int)v8 < v10) {
      *(_DWORD *)(v3 + 92) = v8;
    }
    int v11 = *(_DWORD *)(v3 + 96);
    if (!v11 || (int)v8 > v11) {
      *(_DWORD *)(v3 + 96) = v8;
    }
    if ((*(_DWORD *)(v6 + v5 - 28) - 3) <= 1)
    {
      ++*(unsigned char *)(v3 + 101);
      int v12 = *(_DWORD *)(v3 + 80);
      if (v12 && (int)v8 >= v12)
      {
        int v13 = *(_DWORD *)(v3 + 84);
        if (v13 && (int)v8 < v13)
        {
          *(_DWORD *)(v3 + 84) = v8;
          goto LABEL_27;
        }
      }
      else
      {
        *(_DWORD *)(v3 + 8objc_storeStrong(&location, 0) = v8;
        *(_DWORD *)(v3 + 84) = v12;
LABEL_27:
        *(_DWORD *)(v3 + 72) = *(_DWORD *)(v6 + v5 - 20);
      }
      int v14 = *(_DWORD *)(v3 + 88);
      if (!v14 || (int)v8 > v14)
      {
        *(_DWORD *)(v3 + 88) = v8;
        *(_DWORD *)(v3 + 72) = *(_DWORD *)(v6 + v5 - 20);
      }
    }
LABEL_31:
    ++v4;
    v5 += 568;
  }
  while (v4 != 32);
  char v15 = *(unsigned char *)(v3 + 101);
  if (*(unsigned __int8 *)(v3 + 102) <= (v15 - 1)) {
    *(unsigned char *)(v3 + 102) = v15;
  }
  return this;
}

void __cxx_global_var_init_36()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_35(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_currentTimestamp", a2);
  }
}

void __cxx_global_var_init_3_35(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_previousTimestamp", a2);
  }
}

void __cxx_global_var_init_4_33(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)114,(char)101,(char)108,(char)101,(char)97,(char)115,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_release", a2);
  }
}

void __cxx_global_var_init_5_33(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)97,(char)99,(char)116,(char)105,(char)118,(char)97,(char)116,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_activation", a2);
  }
}

void __cxx_global_var_init_6_33(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)101,(char)97,(char)114,(char)108,(char)105,(char)101,(char)115,(char)116,(char)78,(char)111,(char)110,(char)68,(char)105,(char)118,(char)105,(char)110,(char)103,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_earliestNonDivingTimestamp", a2);
  }
}

void __cxx_global_var_init_7_33(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)100,(char)105,(char)118,(char)105,(char)110,(char)103,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)67,(char)104,(char)97,(char)110,(char)103,(char)101,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_divingButtonChangeTimestamp", a2);
  }
}

void __cxx_global_var_init_8_34(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)105,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_min", a2);
  }
}

void __cxx_global_var_init_9_19(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_max", a2);
  }
}

void __cxx_global_var_init_10_19(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)66,(char)114,(char)101,(char)97,(char)107,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerBreakTouch_max", a2);
  }
}

uint64_t MTParameterFactory_::initFingerTipOffsetParams(uint64_t result, int a2, char a3, int a4)
{
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)double result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  if ((a2 - 2000) > 0x3E7)
  {
    if ((a2 - 1000) <= 0x3E7)
    {
      *(_DWORD *)double result = 1;
      *(_DWORD *)(result + 8) = 1077936128;
      uint64_t v5 = (_DWORD *)(result + 36);
      if (a3 < 0 || a4)
      {
        *(_OWORD *)(result + 12) = xmmword_111990;
        *(void *)(result + 28) = 0x4108000041200000;
        *uint64_t v5 = 0;
        *(_DWORD *)(result + 39) = 0;
        *(_WORD *)(result + 43) = 257;
        int v6 = 1053609165;
      }
      else
      {
        *(_OWORD *)(result + 12) = xmmword_111980;
        *(void *)(result + 28) = 0x40E0000041F00000;
        *uint64_t v5 = 0;
        *(_DWORD *)(result + 39) = 0;
        *(_WORD *)(result + 43) = 257;
        int v6 = 1057132380;
      }
      *(_DWORD *)(result + 48) = v6;
      goto LABEL_16;
    }
    if (a2 == 4)
    {
      *(_DWORD *)double result = 1;
      long long v7 = xmmword_111950;
    }
    else
    {
      if (a2 == 2)
      {
        *(_DWORD *)double result = 1;
        *(_OWORD *)(result + 8) = xmmword_111950;
        *(_OWORD *)(result + 24) = xmmword_111960;
        *(_DWORD *)(result + 4objc_storeStrong(&location, 0) = 65793;
        *(unsigned char *)(result + 44) = 0;
        *(unsigned char *)(result + 52) = 1;
        return result;
      }
      *(_DWORD *)double result = 1;
      long long v7 = xmmword_111970;
    }
    *(_OWORD *)(result + 8) = v7;
    long long v4 = xmmword_111960;
  }
  else
  {
    *(_DWORD *)double result = 1;
    *(_OWORD *)(result + 8) = xmmword_1119A0;
    long long v4 = xmmword_1119B0;
  }
  *(_OWORD *)(result + 24) = v4;
  *(_DWORD *)(result + 4objc_storeStrong(&location, 0) = 65793;
  *(unsigned char *)(result + 44) = 0;
LABEL_16:
  *(unsigned char *)(result + 52) = 0;
  return result;
}

double MTParameterFactory_::initForceFilterParams(_OWORD *a1)
{
  double result = 0.125000028;
  *a1 = xmmword_1119C0;
  return result;
}

double MTParameterFactory_::initForceThresholdQualifiers(uint64_t a1)
{
  *(void *)a1 = 0x3F4000003F000000;
  *(_OWORD *)(a1 + 12) = xmmword_1119D0;
  *(_OWORD *)(a1 + 28) = xmmword_1119E0;
  *(_OWORD *)(a1 + 44) = xmmword_1119F0;
  *(_OWORD *)(a1 + 6objc_storeStrong(&location, 0) = xmmword_111A00;
  *(_OWORD *)(a1 + 76) = xmmword_111A10;
  *(_OWORD *)(a1 + 92) = xmmword_111A20;
  *(_OWORD *)(a1 + 108) = xmmword_111A30;
  double result = 2.85924567e20;
  *(void *)(a1 + 124) = 0x442F00003E19999ALL;
  *(_DWORD *)(a1 + 132) = 1148846080;
  return result;
}

double MTParameterFactory_::initForceActuationQualifiers(uint64_t a1)
{
  *(unsigned char *)(a1 + 28) = 1;
  *(_OWORD *)a1 = xmmword_111A40;
  double result = 5.23869072e-11;
  *(void *)(a1 + 16) = 0x3DCCCCCD3F333333;
  *(_DWORD *)(a1 + 24) = 1065353216;
  return result;
}

void MTParameterFactory_::initPathFilterParams(uint64_t a1, unsigned int a2, char a3, int a4, MTSurfaceDimensions_ *this, unsigned int a6)
{
  unsigned int v6 = a6;
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 8objc_storeStrong(&location, 0) = 1;
  *(unsigned char *)(a1 + 102) = 0;
  *(_OWORD *)(a1 + 112) = xmmword_111A50;
  *(_OWORD *)(a1 + 64) = xmmword_111A60;
  if (a2 <= 0x3E7)
  {
    *(_DWORD *)(a1 + 4) = 1061997773;
    *(void *)(a1 + 56) = 0x3EA28F5C40000000;
    *(unsigned char *)(a1 + 96) = 1;
    *(_WORD *)(a1 + 8objc_storeStrong(&location, 0) = 256;
    *(unsigned char *)(a1 + 102) = 1;
    *(_OWORD *)(a1 + 112) = xmmword_111AA0;
    if (a2 == 4)
    {
      *(_OWORD *)(a1 + 56) = xmmword_111AB0;
      *(_DWORD *)(a1 + 4) = 0;
    }
    goto LABEL_6;
  }
  *(unsigned char *)(a1 + 8MTHandMotion_::clearHandMotion(this, 1) = 1;
  *(_DWORD *)(a1 + 4) = 1061997773;
  if (a2 - 3000 <= 0x3E7)
  {
    *(void *)(a1 + 56) = 0x3EA28F5C40000000;
    *(unsigned char *)(a1 + 96) = 1;
    *(unsigned char *)(a1 + 8objc_storeStrong(&location, 0) = 0;
    *(unsigned char *)(a1 + 102) = 1;
LABEL_6:
    BOOL v10 = a2 - 3000 < 0xFFFFFC18;
    unsigned int v11 = a2 - 2000;
    goto LABEL_7;
  }
  float v13 = 2.66;
  if (!a4) {
    float v13 = 2.0;
  }
  float v14 = 0.127;
  if (a4) {
    float v14 = 0.16891;
  }
  *(float *)(a1 + 56) = v13;
  *(float *)(a1 + 6objc_storeStrong(&location, 0) = v14;
  unsigned int v11 = a2 - 2000;
  if (a2 - 2000 < 0x3E8)
  {
    char v12 = 0;
    *(_DWORD *)(a1 + 6objc_storeStrong(&location, 0) = 1045435305;
    *(_DWORD *)(a1 + 72) = 0x40000000;
    *(_OWORD *)(a1 + 4) = xmmword_111A70;
    *(_OWORD *)(a1 + 2objc_storeStrong(&location, 0) = xmmword_111A80;
    *(_OWORD *)(a1 + 36) = xmmword_111A90;
    *(void *)(a1 + 52) = 0x4080000040266666;
    *(_DWORD *)(a1 + 92) = 1032000111;
    *(_WORD *)(a1 + 97) = 257;
    *(void *)(a1 + 84) = 0x3D75C2903CA3D70BLL;
    goto LABEL_18;
  }
  BOOL v10 = 1;
LABEL_7:
  *(_OWORD *)(a1 + 8) = xmmword_111AC0;
  *(_OWORD *)(a1 + 24) = xmmword_111AD0;
  *(_OWORD *)(a1 + 4objc_storeStrong(&location, 0) = xmmword_111AE0;
  *(void *)(a1 + 84) = 0x3E9FBE773D449BA6;
  *(_DWORD *)(a1 + 92) = 1032000111;
  *(unsigned char *)(a1 + 98) = 0;
  if (v11 > 0xFFFFFC17)
  {
    *(_DWORD *)(a1 + 76) = 1036831949;
    *(unsigned char *)(a1 + 97) = v10 & a4 ^ 1;
    char v12 = 1;
  }
  else if (v10)
  {
    char v12 = 0;
    *(unsigned char *)(a1 + 97) = 0;
  }
  else
  {
    char v12 = 0;
    *(unsigned char *)(a1 + 97) = 1;
  }
LABEL_18:
  *(unsigned char *)(a1 + 99) = v12;
  *(unsigned char *)(a1 + 10objc_storeStrong(&location, 0) = v12;
  *(unsigned char *)(a1 + 10MTHandMotion_::clearHandMotion(this, 1) = v12;
  if (a6 >= 5)
  {
    char v15 = MTLoggingPlugin();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315906;
      int8x16_t v17 = "[Error] ";
      __int16 v18 = 2080;
      int8x16_t v19 = "MTParameterFactory_::";
      __int16 v20 = 2080;
      int8x16_t v21 = "_InitRadiusCorrectionParams";
      __int16 v22 = 1024;
      unsigned int v23 = v6;
      _os_log_impl(&def_411C8, v15, OS_LOG_TYPE_ERROR, "[HID] [MT] %s%s%s invalid size ID (%u)", (uint8_t *)&v16, 0x26u);
    }

    unsigned int v6 = 0;
  }
  *(void *)(a1 + 104) = qword_111B9C[v6];
  MTParameterFactory_::updatePathFilterParamsWithNewSurfaceDimensions(a1, this);
  *(unsigned char *)(a1 + 128) = (a3 & 0x40) != 0;
}

float MTParameterFactory_::updatePathFilterParamsWithNewSurfaceDimensions(uint64_t a1, MTSurfaceDimensions_ *this)
{
  v5.float x = 1.0;
  v5.float y = 1.0;
  float v3 = fabsf(MTSurfaceDimensions_::convertMillimetersToPixels(this, v5));
  *(float *)a1 = v3;
  if (*(unsigned char *)(a1 + 81))
  {
    float result = v3 * *(float *)(a1 + 60);
    *(float *)(a1 + 56) = result;
  }
  else
  {
    float result = *(float *)(a1 + 56) / v3;
    *(float *)(a1 + 6objc_storeStrong(&location, 0) = result;
  }
  return result;
}

double MTParameterFactory_::initRestZoneBalanceParameters(uint64_t a1)
{
  *(_OWORD *)a1 = xmmword_111AF0;
  *(_OWORD *)(a1 + 16) = xmmword_111B00;
  double result = 5.23869071e-11;
  *(_OWORD *)(a1 + 32) = xmmword_111B10;
  *(_DWORD *)(a1 + 48) = -1082130432;
  return result;
}

double MTParameterFactory_::initMotionExtractionParams(uint64_t a1)
{
  double result = 512.000116;
  *(void *)a1 = 0x408000003CF5C290;
  *(_WORD *)(a1 + 8) = 257;
  return result;
}

uint64_t MTParameterFactory_::initChordCyclingParams(uint64_t result, int a2)
{
  *(void *)double result = 0x3CCCCCCD3F19999ALL;
  BOOL v2 = (a2 - 2000) < 0x3E8;
  float v3 = 10.0;
  *(unsigned char *)(result + 8) = v2;
  if ((a2 - 2000) < 0x3E8) {
    float v3 = 4.0;
  }
  *(unsigned char *)(result + 16) = v2;
  *(float *)(result + 12) = v3;
  return result;
}

double MTParameterFactory_::initTouchZoneParams(uint64_t a1, int a2, uint64_t a3, int a4)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if ((a2 - 1000) <= 0x3E7)
  {
    *(unsigned char *)a1 = 1;
    float v5 = 3.0;
    if (a4) {
      float v5 = 0.5;
    }
    float v6 = 18.0;
    if (a4) {
      float v6 = 6.0;
    }
    *(float *)(a1 + 2objc_storeStrong(&location, 0) = v5;
    *(float *)(a1 + 28) = v6;
    double result = 375809602.0;
    *(_OWORD *)(a1 + 4) = xmmword_111B20;
    *(_DWORD *)(a1 + 24) = 1094713344;
  }
  return result;
}

void __cxx_global_var_init_37()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_36(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_currentTimestamp", a2);
  }
}

void __cxx_global_var_init_3_36(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_previousTimestamp", a2);
  }
}

void MTChordGestureSet_::MTChordGestureSet_(MTChordGestureSet_ *this)
{
  *((_DWORD *)this + 58) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + MTHandMotion_::clearHandMotion(this, 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 1objc_storeStrong(&location, 0) = 0u;
  *(_OWORD *)((char *)this + 169) = 0u;
  *(void *)((char *)this + 204) = 0;
  *(void *)((char *)this + 22objc_storeStrong(&location, 0) = 0;
  *(void *)((char *)this + 212) = 0;
  *((_WORD *)this + 114) = 0;
}

uint64_t MTChordGestureSet_::MTChordGestureSet_(uint64_t a1, signed int a2, __int16 a3, int a4, char *__src)
{
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8objc_storeStrong(&location, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 16objc_storeStrong(&location, 0) = 0u;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 224) = a2;
  *(_WORD *)(a1 + 228) = a3;
  *(_DWORD *)(a1 + 232) = a4;
  if ((a2 - 1) <= 3)
  {
    *(_DWORD *)(a1 + 216) = a2;
    *(_DWORD *)(a1 + 22objc_storeStrong(&location, 0) = a2;
    goto LABEL_9;
  }
  if (a2 <= 9)
  {
    int32x2_t v6 = vadd_s32(vdup_n_s32(a2), (int32x2_t)0xFFFFFFFBFFFFFFFCLL);
LABEL_7:
    *(int32x2_t *)(a1 + 216) = v6;
    goto LABEL_9;
  }
  if (a2 <= 0xD)
  {
    int32x2_t v6 = (int32x2_t)0x400000005;
    goto LABEL_7;
  }
  *(void *)(a1 + 216) = 0;
LABEL_9:
  long long v7 = (char *)(a1 + 184);
  if (__src) {
    strncpy(v7, __src, 0x13uLL);
  }
  else {
    char *v7 = 0;
  }
  return a1;
}

void MTChordGestureSet_::MTChordGestureSet_(MTChordGestureSet_ *this, const MTChordGestureSet_ *a2)
{
  *(void *)this = 0;
  *((void *)this + MTHandMotion_::clearHandMotion(this, 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<MTActionEvent_>::__init_with_size[abi:ne180100]<MTActionEvent_*,MTActionEvent_*>(this, *(void *)a2, *((void *)a2 + 1), (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3);
  int v4 = *((_DWORD *)a2 + 6);
  int v5 = *((_DWORD *)a2 + 7);
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 6) = v4;
  *((_DWORD *)this + 7) = v5;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  std::vector<MTActionEvent_>::__init_with_size[abi:ne180100]<MTActionEvent_*,MTActionEvent_*>((void *)this + 4, *((void *)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
  int v6 = *((_DWORD *)a2 + 14);
  int v7 = *((_DWORD *)a2 + 15);
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 14) = v6;
  *((_DWORD *)this + 15) = v7;
  *((void *)this + 9) = 0;
  *((void *)this + 1objc_storeStrong(&location, 0) = 0;
  std::vector<MTActionEvent_>::__init_with_size[abi:ne180100]<MTActionEvent_*,MTActionEvent_*>((void *)this + 8, *((void *)a2 + 8), *((void *)a2 + 9), (uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 3);
  int v8 = *((_DWORD *)a2 + 22);
  int v9 = *((_DWORD *)a2 + 23);
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 22) = v8;
  *((_DWORD *)this + 23) = v9;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  std::vector<MTActionEvent_>::__init_with_size[abi:ne180100]<MTActionEvent_*,MTActionEvent_*>((void *)this + 12, *((void *)a2 + 12), *((void *)a2 + 13), (uint64_t)(*((void *)a2 + 13) - *((void *)a2 + 12)) >> 3);
  int v10 = *((_DWORD *)a2 + 30);
  int v11 = *((_DWORD *)a2 + 31);
  *((void *)this + 16) = 0;
  *((_DWORD *)this + 3objc_storeStrong(&location, 0) = v10;
  *((_DWORD *)this + 3MTHandMotion_::clearHandMotion(this, 1) = v11;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  std::vector<MTActionEvent_>::__init_with_size[abi:ne180100]<MTActionEvent_*,MTActionEvent_*>((void *)this + 16, *((void *)a2 + 16), *((void *)a2 + 17), (uint64_t)(*((void *)a2 + 17) - *((void *)a2 + 16)) >> 3);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((void *)this + 2objc_storeStrong(&location, 0) = 0;
  *((void *)this + 2MTHandMotion_::clearHandMotion(this, 1) = 0;
  *((void *)this + 22) = 0;
  *((_DWORD *)this + 5MTHandMotion_::clearHandMotion(this, 1) = *((_DWORD *)a2 + 51);
  *((void *)this + 26) = *((void *)a2 + 26);
  *((void *)this + 27) = *((void *)a2 + 27);
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  *((_WORD *)this + 114) = *((_WORD *)a2 + 114);
  *((_DWORD *)this + 58) = *((_DWORD *)a2 + 58);
  if (this != a2) {
    std::vector<MTSlideGesture_>::__assign_with_size[abi:ne180100]<MTSlideGesture_*,MTSlideGesture_*>((uint64_t)this + 160, *((MTSlideGesture_ **)a2 + 20), *((MTSlideGesture_ **)a2 + 21), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 21) - *((void *)a2 + 20)) >> 5));
  }
  strncpy((char *)this + 184, (const char *)a2 + 184, 0x13uLL);
}

void sub_61E18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<MTSlideGesture_>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  int v8 = *v6;
  if (*v6)
  {
    *(void *)(v2 + 136) = v8;
    operator delete(v8);
  }
  int v9 = *v5;
  if (*v5)
  {
    *(void *)(v2 + 104) = v9;
    operator delete(v9);
  }
  int v10 = *v4;
  if (*v4)
  {
    *(void *)(v2 + 72) = v10;
    operator delete(v10);
  }
  int v11 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 4objc_storeStrong(&location, 0) = v11;
    operator delete(v11);
  }
  char v12 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t MTChordGestureSet_::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
    *(_WORD *)(a1 + 228) = *(_WORD *)(a2 + 228);
    *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
    strncpy((char *)(a1 + 184), (const char *)(a2 + 184), 0x13uLL);
    MTGesture::operator=(a1, a2);
    MTGesture::operator=(a1 + 32, a2 + 32);
    MTGesture::operator=(a1 + 64, a2 + 64);
    MTGesture::operator=(a1 + 96, a2 + 96);
    MTGesture::operator=(a1 + 128, a2 + 128);
    std::vector<MTSlideGesture_>::__assign_with_size[abi:ne180100]<MTSlideGesture_*,MTSlideGesture_*>(a1 + 160, *(MTSlideGesture_ **)(a2 + 160), *(MTSlideGesture_ **)(a2 + 168), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 168) - *(void *)(a2 + 160)) >> 5));
  }
  return a1;
}

uint64_t MTGesture::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    std::vector<MTActionEvent_>::__assign_with_size[abi:ne180100]<MTActionEvent_*,MTActionEvent_*>((void *)a1, *(_DWORD **)a2, *(_DWORD **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  }
  return a1;
}

uint64_t MTChordGestureSet_::chordGestureSetEquals(MTChordGestureSet_ *this, const MTChordGestureSet_ *a2)
{
  if (!MTGesture::gestureEquals((uint64_t *)this, (uint64_t *)a2)
    || !MTGesture::gestureEquals((uint64_t *)this + 4, (uint64_t *)a2 + 4)
    || !MTGesture::gestureEquals((uint64_t *)this + 8, (uint64_t *)a2 + 8)
    || !MTGesture::gestureEquals((uint64_t *)this + 12, (uint64_t *)a2 + 12)
    || !MTGesture::gestureEquals((uint64_t *)this + 16, (uint64_t *)a2 + 16))
  {
    return 0;
  }

  return MTChordGestureSet_::chordSlidesEqual(this, a2);
}

uint64_t MTGesture::gestureEquals(uint64_t *a1, uint64_t *a2)
{
  if (*((unsigned __int16 *)a1 + 12) != *((unsigned __int16 *)a2 + 12)) {
    return 0;
  }
  if (*((unsigned __int16 *)a1 + 13) != *((unsigned __int16 *)a2 + 13)) {
    return 0;
  }
  if (*((_DWORD *)a1 + 7) != *((_DWORD *)a2 + 7)) {
    return 0;
  }
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 3;
  uint64_t v5 = *a2;
  if (v4 != (a2[1] - *a2) >> 3) {
    return 0;
  }
  if (v3 != v2)
  {
    uint64_t v6 = 0;
    unsigned int v7 = 1;
    uint64_t result = 1;
    while (*(unsigned __int16 *)(v2 + 8 * v6) == *(unsigned __int16 *)(v5 + 8 * v6))
    {
      uint64_t v9 = v2 + 8 * v6;
      uint64_t v10 = v5 + 8 * v6;
      if (*(unsigned __int16 *)(v9 + 2) != *(unsigned __int16 *)(v10 + 2)
        || *(_DWORD *)(v9 + 4) != *(_DWORD *)(v10 + 4))
      {
        break;
      }
      uint64_t v6 = v7;
      if (v4 <= v7++) {
        return result;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t MTChordGestureSet_::chordSlidesEqual(MTChordGestureSet_ *this, const MTChordGestureSet_ *a2)
{
  uint64_t v2 = *((void *)this + 20);
  uint64_t v3 = *((void *)this + 21);
  if (v3 - v2 != *((void *)a2 + 21) - *((void *)a2 + 20)) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  uint64_t v6 = 0;
  unsigned int v7 = 1;
  do
  {
    uint64_t result = MTSlideGesture_::slideEquals(v2 + 160 * v6, *((void *)a2 + 20) + 160 * v6);
    if ((result & 1) == 0) {
      break;
    }
    uint64_t v6 = v7;
    uint64_t v2 = *((void *)this + 20);
  }
  while (0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 21) - v2) >> 5) > v7++);
  return result;
}

uint64_t MTSlideGesture_::slideEquals(uint64_t a1, uint64_t a2)
{
  uint64_t result = MTGesture::gestureEquals((uint64_t *)a1, (uint64_t *)a2);
  if (result) {
    return *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
  }
        && *(float *)(a1 + 152) == *(float *)(a2 + 152)
        && *(float *)(a1 + 156) == *(float *)(a2 + 156)
        && *(float *)(a1 + 36) == *(float *)(a2 + 36)
        && *(float *)(a1 + 40) == *(float *)(a2 + 40)
        && *(float *)(a1 + 52) == *(float *)(a2 + 52)
        && *(float *)(a1 + 44) == *(float *)(a2 + 44)
        && *(float *)(a1 + 48) == *(float *)(a2 + 48)
        && *(float *)(a1 + 56) == *(float *)(a2 + 56)
        && *(float *)(a1 + 60) == *(float *)(a2 + 60)
        && *(float *)(a1 + 64) == *(float *)(a2 + 64);
  return result;
}

BOOL MTChordGestureSet_::isEmpty(MTChordGestureSet_ *this)
{
  uint64_t v1 = *((void *)this + 20);
  uint64_t v2 = *((void *)this + 21) - v1;
  if (v2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * (v2 >> 5);
    unsigned int v5 = 1;
    do
    {
      uint64_t v6 = v1 + 160 * v3;
      if (*(void *)v6 != *(void *)(v6 + 8))
      {
        if (**(_WORD **)v6) {
          return 0;
        }
      }
      uint64_t v3 = v5;
    }
    while (v4 > v5++);
  }
  if (*(void *)this != *((void *)this + 1) && **(_WORD **)this) {
    return 0;
  }
  int v8 = (_WORD *)*((void *)this + 4);
  if (v8 != *((_WORD **)this + 5))
  {
    if (*v8) {
      return 0;
    }
  }
  uint64_t v9 = (_WORD *)*((void *)this + 8);
  if (v9 != *((_WORD **)this + 9))
  {
    if (*v9) {
      return 0;
    }
  }
  uint64_t v10 = (_WORD *)*((void *)this + 12);
  if (v10 != *((_WORD **)this + 13))
  {
    if (*v10) {
      return 0;
    }
  }
  char v12 = (unsigned __int16 *)*((void *)this + 16);
  return v12 == *((unsigned __int16 **)this + 17) || *v12 == 0;
}

uint64_t MTChordGestureSet_::hasEnabledOrientationEvents(MTChordGestureSet_ *this, const MTChordTable_ *a2)
{
  uint64_t v2 = *((void *)this + 20);
  uint64_t v3 = *((void *)this + 21) - v2;
  if (!v3) {
    return 0;
  }
  uint64_t v4 = 0;
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * (v3 >> 5);
  for (unsigned int i = 1; ; ++i)
  {
    uint64_t v7 = v2 + 160 * v4;
    int v8 = *(_DWORD *)(v7 + 28);
    BOOL v9 = v8 && (*((_DWORD *)a2 + 6) & v8) == 0;
    if (!v9 && *(void *)v7 != *(void *)(v7 + 8) && **(_WORD **)v7 == 71) {
      break;
    }
    uint64_t v4 = i;
    if (v5 <= i) {
      return 0;
    }
  }
  return 1;
}

uint64_t MTChordGestureSet_::hasEnabledFluidNavigation(MTChordGestureSet_ *this, const MTChordTable_ *a2)
{
  uint64_t v2 = *((void *)this + 20);
  uint64_t v3 = *((void *)this + 21) - v2;
  if (!v3) {
    return 0;
  }
  uint64_t v4 = 0;
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * (v3 >> 5);
  for (unsigned int i = 1; ; ++i)
  {
    uint64_t v7 = v2 + 160 * v4;
    int v8 = *(_DWORD *)(v7 + 28);
    BOOL v9 = v8 && (*((_DWORD *)a2 + 6) & v8) == 0;
    if (!v9 && *(void *)v7 != *(void *)(v7 + 8) && **(_WORD **)v7 == 36) {
      break;
    }
    uint64_t v4 = i;
    if (v5 <= i) {
      return 0;
    }
  }
  return 1;
}

uint64_t MTChordGestureSet_::hasEnabledFluidDock(MTChordGestureSet_ *this, const MTChordTable_ *a2)
{
  uint64_t v2 = *((void *)this + 20);
  uint64_t v3 = *((void *)this + 21) - v2;
  if (!v3) {
    return 0;
  }
  uint64_t v4 = 0;
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * (v3 >> 5);
  for (unsigned int i = 1; ; ++i)
  {
    uint64_t v7 = v2 + 160 * v4;
    int v8 = *(_DWORD *)(v7 + 28);
    BOOL v9 = v8 && (*((_DWORD *)a2 + 6) & v8) == 0;
    if (!v9 && *(void *)v7 != *(void *)(v7 + 8) && **(_WORD **)v7 == 37) {
      break;
    }
    uint64_t v4 = i;
    if (v5 <= i) {
      return 0;
    }
  }
  return 1;
}

uint64_t MTChordGestureSet_::hasActiveEdgeSlide(MTChordGestureSet_ *this, const MTHandStatistics_ *a2, const MTChordCycling_ *a3)
{
  int v6 = *((_DWORD *)this + 58);
  if (v6 && (*((_DWORD *)a3 + 6) & v6) == 0) {
    return 0;
  }
  uint64_t v8 = *((void *)this + 20);
  uint64_t v7 = *((void *)this + 21);
  if (v7 == v8) {
    return 0;
  }
  uint64_t v9 = 0;
  unsigned int v10 = 1;
  while (1)
  {
    int v11 = (MTSlideGesture_ *)(v8 + 160 * v9);
    int v12 = *((_DWORD *)v11 + 7);
    if (v12 && (*((_DWORD *)a3 + 6) & v12) == 0) {
      goto LABEL_19;
    }
    MTChordIntegrating_::MTChordIntegrating_((MTChordIntegrating_ *)v17, this);
    char isActiveEdgeSlide = MTSlideGesture_::isActiveEdgeSlide(v11, a2, (const MTChordIntegrating_ *)v17);
    int v16 = (void **)&v26;
    std::vector<MTSlideGesture_>::__destroy_vector::operator()[abi:ne180100](&v16);
    if (__p)
    {
      float v25 = __p;
      operator delete(__p);
    }
    if (v22)
    {
      unsigned int v23 = v22;
      operator delete(v22);
    }
    if (v20)
    {
      int8x16_t v21 = v20;
      operator delete(v20);
    }
    if (v18)
    {
      int8x16_t v19 = v18;
      operator delete(v18);
    }
    if (v17[0])
    {
      v17[1] = v17[0];
      operator delete(v17[0]);
    }
    if (isActiveEdgeSlide) {
      return 1;
    }
    uint64_t v8 = *((void *)this + 20);
    uint64_t v7 = *((void *)this + 21);
LABEL_19:
    uint64_t v9 = v10;
    if (0xCCCCCCCCCCCCCCCDLL * ((v7 - v8) >> 5) <= v10++) {
      return 0;
    }
  }
}

void sub_62664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  MTChordGestureSet_::~MTChordGestureSet_((MTChordGestureSet_ *)va);
  _Unwind_Resume(a1);
}

BOOL MTChordGestureSet_::chk4ChordPause(MTChordGestureSet_ *this, const MTHandStatistics_ *a2, const MTHandMotion_ *a3, double a4, double a5, float a6)
{
  double v6 = *(double *)&qword_158668;
  LOWORD(a6) = *((_WORD *)this + 77);
  float v7 = (float)LODWORD(a6) * 0.001;
  if (v7 != 0.0) {
    double v6 = v7;
  }
  return v6 < a4 || *((double *)a2 + 1) - *((double *)a3 + 20) > v6;
}

BOOL MTChordGestureSet_::chk4ChordTimein(MTChordGestureSet_ *this, const MTHandStatistics_ *a2)
{
  if (*((unsigned __int8 *)a2 + 196) > *((unsigned __int8 *)a2 + 195)) {
    return 0;
  }
  if ((*((_WORD *)this + 60) & 4) == 0) {
    return 0;
  }
  int v2 = *((unsigned __int8 *)a2 + 186);
  if (v2 != *((unsigned __int8 *)a2 + 197)) {
    return 0;
  }
  if (*((_DWORD *)this + 54) != v2) {
    return 0;
  }
  double v3 = *((double *)a2 + 10);
  if ((*((_WORD *)this + 114) & 0x100) == 0 && v3 - *((double *)a2 + 33) > *(double *)&gTimingPrefs_) {
    return 0;
  }
  HIWORD(v5) = WORD1(qword_158668);
  double v6 = *(double *)&qword_158668 + *(double *)&gTimingPrefs_;
  LOWORD(v5) = *((_WORD *)this + 61);
  float v7 = (float)v5 * 0.001;
  if (v7 != 0.0) {
    double v6 = v7;
  }
  if (v3 <= *((double *)a2 + 16)) {
    double v3 = *((double *)a2 + 16);
  }
  return *((double *)a2 + 1) - v3 >= v6;
}

uint64_t MTChordGestureSet_::isChordReadyToIntegrate(MTChordGestureSet_ *this, const MTHandStatistics_ *a2, float32x4_t *a3)
{
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(a3[12])))) & 1) != 0
    || MTChordGestureSet_::chk4ChordTimein(this, a2))
  {
    return 1;
  }
  else
  {
    return HIBYTE(*((unsigned __int16 *)this + 60)) & 1;
  }
}

void std::vector<MTActionEvent_>::__init_with_size[abi:ne180100]<MTActionEvent_*,MTActionEvent_*>(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<std::atomic<HSUtil::CoderKey const*>>::__vallocate[abi:ne180100](a1, a4);
    uint64_t v7 = a1[1];
    if (a2 != a3)
    {
      uint64_t v8 = 0;
      do
      {
        MTActionEvent_::MTActionEvent_((MTActionEvent_ *)(v7 + v8), (const MTActionEvent_ *)(a2 + v8));
        v8 += 8;
      }
      while (a2 + v8 != a3);
      v7 += v8;
    }
    a1[1] = v7;
  }
}

void sub_62844(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<MTSlideGesture_>::__assign_with_size[abi:ne180100]<MTSlideGesture_*,MTSlideGesture_*>(uint64_t a1, MTSlideGesture_ *a2, MTSlideGesture_ *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void *)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5) < a4)
  {
    std::vector<MTSlideGesture_>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0x199999999999999) {
      std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x999999999999999ALL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
      unint64_t v11 = 0x199999999999999;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<MTSlideGesture_>::__vallocate[abi:ne180100]((void *)a1, v11);
    int v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MTSlideGesture_>,MTSlideGesture_*,MTSlideGesture_*,MTSlideGesture_*>(v8, a2, a3, *(MTSlideGesture_ **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 8) - v9) >> 5) < a4)
  {
    float v13 = (MTSlideGesture_ *)((char *)a2 + 32 * ((*(void *)(a1 + 8) - v9) >> 5));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,MTSlideGesture_ *,MTSlideGesture_ *,MTSlideGesture_ *,0>((uint64_t)a2, (uint64_t)v13, v9);
    int v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MTSlideGesture_>,MTSlideGesture_*,MTSlideGesture_*,MTSlideGesture_*>(v8, v13, a3, *(MTSlideGesture_ **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,MTSlideGesture_ *,MTSlideGesture_ *,MTSlideGesture_ *,0>((uint64_t)a2, (uint64_t)a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    uint64_t v17 = *(void *)(a1 + 8);
    do
    {
      int8x16_t v19 = *(void **)(v17 - 160);
      v17 -= 160;
      __int16 v18 = v19;
      if (v19)
      {
        *(void *)(v16 - 152) = v18;
        operator delete(v18);
      }
      uint64_t v16 = v17;
    }
    while (v17 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_629D8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_629E0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<MTSlideGesture_>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<MTSlideGesture_>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<MTSlideGesture_>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x19999999999999ALL) {
    std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTSlideGesture_>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[160 * v4];
  return result;
}

MTSlideGesture_ *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MTSlideGesture_>,MTSlideGesture_*,MTSlideGesture_*,MTSlideGesture_*>(uint64_t a1, MTSlideGesture_ *a2, MTSlideGesture_ *a3, MTSlideGesture_ *this)
{
  uint64_t v4 = this;
  unint64_t v10 = this;
  unint64_t v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  unint64_t v9 = 0xAAAAAAAAAAAAAA00;
  if (a2 != a3)
  {
    double v6 = a2;
    do
    {
      MTSlideGesture_::MTSlideGesture_(v4, v6);
      double v6 = (const MTSlideGesture_ *)((char *)v6 + 160);
      uint64_t v4 = (MTSlideGesture_ *)((char *)v11 + 160);
      unint64_t v11 = (MTSlideGesture_ *)((char *)v11 + 160);
    }
    while (v6 != a3);
  }
  LOBYTE(v9) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTSlideGesture_>,MTSlideGesture_*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_62B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTSlideGesture_>,MTSlideGesture_*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<MTSlideGesture_>,MTSlideGesture_*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<MTSlideGesture_>,MTSlideGesture_*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      unsigned int v5 = *(void **)(v3 - 160);
      v3 -= 160;
      uint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 152) = v4;
        operator delete(v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,MTSlideGesture_ *,MTSlideGesture_ *,MTSlideGesture_ *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      MTSlideGesture_::operator=(a3, v4);
      v4 += 160;
      a3 += 160;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void __cxx_global_var_init_38()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_37(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_currentTimestamp", a2);
  }
}

void __cxx_global_var_init_3_37(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_previousTimestamp", a2);
  }
}

void __cxx_global_var_init_4_34(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)114,(char)101,(char)108,(char)101,(char)97,(char)115,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_release", a2);
  }
}

void __cxx_global_var_init_5_34(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)97,(char)99,(char)116,(char)105,(char)118,(char)97,(char)116,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_activation", a2);
  }
}

void __cxx_global_var_init_6_34(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)101,(char)97,(char)114,(char)108,(char)105,(char)101,(char)115,(char)116,(char)78,(char)111,(char)110,(char)68,(char)105,(char)118,(char)105,(char)110,(char)103,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_earliestNonDivingTimestamp", a2);
  }
}

void __cxx_global_var_init_7_34(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)100,(char)105,(char)118,(char)105,(char)110,(char)103,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)67,(char)104,(char)97,(char)110,(char)103,(char)101,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_divingButtonChangeTimestamp", a2);
  }
}

void __cxx_global_var_init_8_35(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)105,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_min", a2);
  }
}

void __cxx_global_var_init_9_20(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_max", a2);
  }
}

void __cxx_global_var_init_10_20(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)66,(char)114,(char)101,(char)97,(char)107,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerBreakTouch_max", a2);
  }
}

void __cxx_global_var_init_11_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)82,(char)101,(char)115,(char)101,(char)116>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentReset", a2);
  }
}

void __cxx_global_var_init_12_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)65,(char)99,(char)116,(char)105,(char)118,(char)105,(char)116,(char)121>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentButtonActivity", a2);
  }
}

void __cxx_global_var_init_13_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_firstFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_14_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_firstFingerCleanStartInRange", a2);
  }
}

void __cxx_global_var_init_15_25(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerCleanStartInRange", a2);
  }
}

void __cxx_global_var_init_16_25(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_17_25(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_previousRecentFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_18_25(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)78,(char)111,(char)110,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)100,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentNonThumbTouchdown", a2);
  }
}

void __cxx_global_var_init_19_25(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_restingThumbTouchDown", a2);
  }
}

void __cxx_global_var_init_20_25(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)84,(char)119,(char)111,(char)79,(char)114,(char)77,(char)111,(char)114,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentTwoOrMoreFingersTouching", a2);
  }
}

void __cxx_global_var_init_21_26(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)118,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFiveFingersTouching", a2);
  }
}

void __cxx_global_var_init_22_26(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)76,(char)105,(char)102,(char)116,(char)111,(char)102,(char)102>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerLiftoff", a2);
  }
}

void __cxx_global_var_init_23_26(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)69,(char)110,(char)100>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerEnd", a2);
  }
}

void __cxx_global_var_init_24_26(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentScrollZoom", a2);
  }
}

void __cxx_global_var_init_25_25(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)119,(char)105,(char)116,(char)99,(char)104>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentChordSwitch", a2);
  }
}

void __cxx_global_var_init_26_25(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentChordSlide", a2);
  }
}

void __cxx_global_var_init_27_24(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109,(char)83,(char)108,(char)105,(char)100,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentScrollZoomSlide", a2);
  }
}

void __cxx_global_var_init_28_24(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)108,(char)117,(char)105,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentFluidSlide", a2);
  }
}

void __cxx_global_var_init_29_24(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)101,(char)120,(char)99,(char)101,(char)115,(char)115,(char)84,(char)97,(char)112,(char)77,(char)111,(char)116,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_excessTapMotion", a2);
  }
}

void __cxx_global_var_init_30_24(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)104,(char)97,(char)110,(char)100,(char)95,(char)99,(char)104,(char)111,(char)114,(char)100,(char)115>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"righthand_chords", a2);
  }
}

double MTSlideGesture_::clearIntegrationState(MTSlideGesture_ *this)
{
  *((unsigned char *)this + 68) = 0;
  *((void *)this + 18) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 3objc_storeStrong(&location, 0) = 0;
  return result;
}

uint64_t MTSlideGesture_::MTSlideGesture_(uint64_t a1, int a2, int a3, long long *a4, uint64_t *a5, float a6, float a7)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<MTActionEvent_>::__init_with_size[abi:ne180100]<MTActionEvent_*,MTActionEvent_*>((void *)a1, *a5, a5[1], (a5[1] - *a5) >> 3);
  *(_DWORD *)(a1 + 24) = 16;
  *(_DWORD *)(a1 + 28) = a3;
  *(_DWORD *)(a1 + 32) = a2;
  long long v13 = *a4;
  *(_OWORD *)(a1 + 52) = a4[1];
  *(_OWORD *)(a1 + 36) = v13;
  *(float *)(a1 + 152) = a6;
  *(float *)(a1 + 156) = a7;
  *(unsigned char *)(a1 + 68) = 0;
  *(void *)(a1 + 144) = 0;
  if ((a2 & 0x1000000) != 0) {
    int v14 = -1;
  }
  else {
    int v14 = 1;
  }
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12objc_storeStrong(&location, 0) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  if ((a2 & 3) != 0 || a7 > 0.0) {
    *(float *)(a1 + 124) = (float)v14;
  }
  if ((a2 & 0xC) != 0 || a7 > 0.0) {
    *(float *)(a1 + 128) = (float)v14;
  }
  if ((a2 & 0x30) != 0) {
    *(float *)(a1 + 132) = (float)v14;
  }
  if ((a2 & 0xC0) != 0) {
    *(float *)(a1 + 136) = (float)v14;
  }
  return a1;
}

{
  return MTSlideGesture_::MTSlideGesture_(a1, a2, a3, a4, a5, a6, a7);
}

void MTSlideGesture_::MTSlideGesture_(MTSlideGesture_ *this, const MTSlideGesture_ *a2)
{
  *(void *)this = 0;
  *((void *)this + MTHandMotion_::clearHandMotion(this, 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<MTActionEvent_>::__init_with_size[abi:ne180100]<MTActionEvent_*,MTActionEvent_*>(this, *(void *)a2, *((void *)a2 + 1), (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  long long v4 = *(_OWORD *)((char *)a2 + 36);
  *(_OWORD *)((char *)this + 52) = *(_OWORD *)((char *)a2 + 52);
  *(_OWORD *)((char *)this + 36) = v4;
  *((void *)this + 19) = *((void *)a2 + 19);
  if (this != a2) {
    std::vector<MTActionEvent_>::__assign_with_size[abi:ne180100]<MTActionEvent_*,MTActionEvent_*>(this, *(_DWORD **)a2, *((_DWORD **)a2 + 1), (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3);
  }
  *((unsigned char *)this + 68) = 0;
  *((void *)this + 18) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 3objc_storeStrong(&location, 0) = 0;
  for (uint64_t i = 124; i != 140; i += 4)
    *(_DWORD *)((char *)this + i) = *(_DWORD *)((char *)a2 + i);
}

void sub_63520(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTSlideGesture_::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    MTGesture::operator=(a1, a2);
    uint64_t v4 = 0;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    long long v5 = *(_OWORD *)(a2 + 36);
    *(_OWORD *)(a1 + 52) = *(_OWORD *)(a2 + 52);
    *(_OWORD *)(a1 + 36) = v5;
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(unsigned char *)(a1 + 68) = 0;
    *(void *)(a1 + 144) = 0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_DWORD *)(a1 + 12objc_storeStrong(&location, 0) = 0;
    do
    {
      *(_DWORD *)(a1 + 124 + v4) = *(_DWORD *)(a2 + 124 + v4);
      v4 += 4;
    }
    while (v4 != 16);
  }
  return a1;
}

uint64_t MTSlideGesture_::getDegreesOfFreedomMask(uint64_t this)
{
  uint64_t v1 = this;
  unint64_t v2 = 0;
  LODWORD(this) = 0;
  do
  {
    float v3 = *(float *)(v1 + 4 * v2 + 124);
    if (v3 == 0.0)
    {
      if (*(void *)v1 == *(void *)(v1 + 8)
        || **(_WORD **)v1 != 71
        || v2 > 1
        || (float v3 = 1.0, *(double *)(v1 + 144) <= 0.0))
      {
        float v3 = 0.0;
      }
    }
    int v4 = 1 << v2;
    if (v3 == 0.0) {
      int v4 = 0;
    }
    this = v4 | this;
    ++v2;
  }
  while (v2 != 4);
  return this;
}

uint64_t MTSlideGesture_::sendSlideKeys(MTActionEvent_ **this, const MTHandStatistics_ *a2, const MTHandMotion_ *a3, MTDragManagerEventQueue_ *a4, __IOHIDEvent *a5, MTChordIntegrating_ *a6, int a7, double a8)
{
  int v14 = *((unsigned __int8 *)a6 + 264);
  long long v22 = *(_OWORD *)((char *)a3 + 168);
  MTChordIntegrating_::sendSlidePreamble(a6, a2, a3, a4, a5, this, 8u, a8);
  double v15 = *((double *)a2 + 1);
  *((double *)this + 18) = v15;
  int v16 = *((_DWORD *)this + 8);
  if ((v16 & 0x23000) != 0)
  {
    if ((v16 & 0x20000) != 0)
    {
      int v18 = *((_DWORD *)a6 + 70);
      if (v18 < 0)
      {
        int8x16_t v19 = *this;
        if (*this != this[1] && *(_WORD *)v19 == 129)
        {
          unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
          MTActionEvent_::MTActionEvent_((MTActionEvent_ *)&v21, v19);
          LOWORD(v2MTHandMotion_::clearHandMotion(this, 1) = 130;
          *((_DWORD *)a6 + 7objc_storeStrong(&location, 0) = -*((_DWORD *)a6 + 70);
          (*((void (**)(MTDragManagerEventQueue_ *, unint64_t *, __IOHIDEvent *, void, void, long long *, void, void, double))a4->_vptr$MTTapDragManager_
           + 3))(a4, &v21, a5, 0, 0, &v22, *((unsigned __int8 *)this + 32), *((unsigned int *)a6 + 56), *((double *)a2 + 1));
          return 1;
        }
        *((unsigned char *)a6 + 267) = 1;
      }
      *((_DWORD *)a6 + 7objc_storeStrong(&location, 0) = -v18;
      goto LABEL_21;
    }
    if ((v16 & 0x2000) != 0)
    {
      if (*((_DWORD *)a6 + 71) != v16) {
        goto LABEL_21;
      }
      return 0;
    }
  }
  else
  {
    if (v14) {
      BOOL v17 = 1;
    }
    else {
      BOOL v17 = (this[4] & 0x4000) == 0;
    }
    if (v17 || v15 - *((double *)a6 + 30) >= *(double *)&qword_1586E0)
    {
      *((_DWORD *)a6 + 7MTHandMotion_::clearHandMotion(this, 1) = *((_DWORD *)this + 8);
      if (a7 >= 1)
      {
        a7 = (unsigned __int16)a7;
        goto LABEL_22;
      }
      return 0;
    }
  }
  *((unsigned char *)a6 + 267) = 1;
LABEL_21:
  *((_DWORD *)a6 + 7MTHandMotion_::clearHandMotion(this, 1) = v16;
  a7 = 1;
  do
  {
LABEL_22:
    uint64_t result = MTGesture::dispatchEvents((uint64_t *)this, (uint64_t)a4, (uint64_t)a5, 0, 0, (uint64_t)&v22, *((unsigned __int8 *)this + 32), *((unsigned int *)a6 + 56), *((double *)a2 + 1));
    --a7;
  }
  while (a7);
  return result;
}

uint64_t MTSlideGesture_::sendSlideMickeys(MTActionEvent_ **a1, uint64_t a2, uint64_t a3, MTDragManagerEventQueue_ *a4, __IOHIDEvent *a5, MTChordIntegrating_ *this, int32x4_t *a7, double a8)
{
  if (MTChordIntegrating_::sendSlidePreamble(this, (const MTHandStatistics_ *)a2, (const MTHandMotion_ *)a3, a4, a5, a1, 8u, a8))uint64_t v15 = 2; {
  else
  }
    uint64_t v15 = 8;
  long long v18 = *(_OWORD *)(a3 + 168);
  MTChordIntegrating_::updateMomentumMickeys((uint64_t)this, a7, a2);
  double v16 = *(double *)(a2 + 8);
  *((double *)a1 + 18) = v16;
  return MTGesture::dispatchEvents((uint64_t *)a1, (uint64_t)a4, (uint64_t)a5, v15, (uint64_t)a7, (uint64_t)&v18, *((unsigned __int8 *)a1 + 32), *((unsigned int *)this + 56), v16);
}

float MTSlideGesture_::cumulativeMotionMagnitude(MTSlideGesture_ *this)
{
  if (*(void *)this != *((void *)this + 1)
    && ((**(_WORD **)this & 0x80) != 0 || (int v1 = **(unsigned __int16 **)this, (v1 - 35) < 5) || v1 == 67))
  {
    return fabsf(*((float *)this + 22));
  }
  else
  {
    return (float)(hypotf(*((float *)this + 24), *((float *)this + 25)) + fabsf(*((float *)this + 26)))
         + fabsf(*((float *)this + 27));
  }
}

uint64_t MTSlideGesture_::decayAxisIntegrator(uint64_t this, const MTChordIntegrating_ *a2, double a3, float *a4, float a5)
{
  float v5 = *(float *)(this + 52);
  if (!*((unsigned char *)a2 + 264)) {
    float v5 = v5 * 1.7;
  }
  float v6 = a5 * 0.00282;
  float v7 = a3 * 0.3;
  if (v6 >= v7) {
    float v7 = v6;
  }
  float v8 = (float)(v7 + 1.0) * v5;
  if (v8 > 0.0)
  {
    float v9 = *a4;
    if (*a4 <= v8)
    {
      float v10 = 0.0;
      if (v9 < (float)-v8) {
        float v10 = v8 + v9;
      }
    }
    else
    {
      float v10 = v9 - v8;
    }
    *a4 = v10;
  }
  return this;
}

uint64_t MTSlideGesture_::integrateAxisMotion(uint64_t this, const MTHandStatistics_ *a2, MTHandMotion_ *a3, const MTDragManagerEventQueue_ *a4, const MTChordIntegrating_ *a5, double a6, int a7, float a8)
{
  double v8 = a6;
  uint64_t v10 = this;
  int v11 = *((_DWORD *)a3 + 32);
  uint64_t v12 = this + 4 * a7;
  if (!*((unsigned char *)a5 + 264))
  {
    if (v11 < 2000 || v11 > 0xBB7)
    {
      float v14 = *(float *)(this + 40);
    }
    else
    {
      if (*((double *)a2 + 1) - *((double *)a2 + 7) > a6) {
        goto LABEL_17;
      }
      double v8 = fmin(sqrt(a6), 5.0);
      float v13 = 7.50000048 / (v8 + 7.50000048);
      float v14 = *(float *)(this + 40) * v13;
      float v15 = *(float *)(v12 + 96);
      if ((float)(v15 * a8) < 0.0)
      {
        if (fabsf(a8) <= fabsf(v15))
        {
          float v14 = 1.0;
        }
        else
        {
          a8 = v15 + a8;
          *(_DWORD *)(v12 + 96) = 0;
        }
      }
    }
    if (a4->_from_multi_finger_drag && a4->_cycle_state >= 3 && *((_DWORD *)a5 + 54) == 1)
    {
      double v16 = (void *)*((void *)a5 + 20);
      if (*((void *)a5 + 21) - (void)v16 == 160 && *v16 != v16[1] && *(_WORD *)*v16 == 68) {
        float v14 = v14 * 0.06;
      }
    }
    a8 = a8
       * (float)(v14
               * (float)((float)((float)(*((float *)a3 + 63) * -1.4) + 1.0)
                       * (float)((float)(*((float *)a3 + 63) * -1.4) + 1.0)));
  }
LABEL_17:
  float v17 = *((float *)a3 + 93);
  if (!*((unsigned char *)a2 + 211)) {
    float v17 = 1.0;
  }
  float v19 = *(float *)(v12 + 96);
  long long v18 = (float *)(v12 + 96);
  float *v18 = v19 + (float)(a8 * v17);
  if ((v11 - 2000) <= 0x3E7)
  {
    float MouseMotionFeedback = MTHandMotion_::getMouseMotionFeedback(a3, a7);
    return MTSlideGesture_::decayAxisIntegrator(v10, a5, v8, v18, MouseMotionFeedback);
  }
  return this;
}

void MTSlideGesture_::suppressVelocityFromMouseFeeback(MTSlideGesture_ *this, int a2, MTHandMotion_ *a3, float a4)
{
}

float MTSlideGesture_::accelerateAxisMotion(MTSlideGesture_ *this, int a2, const MTHandStatistics_ *a3, MTHandMotion_ *a4, float a5, int a6)
{
  switch(a2)
  {
    case 0:
      int v11 = (float *)((char *)a4 + 316);
      goto LABEL_7;
    case 1:
      int v11 = (float *)((char *)a4 + 320);
      goto LABEL_7;
    case 2:
      int v11 = (float *)((char *)a4 + 324);
      goto LABEL_7;
    case 3:
      int v11 = (float *)((char *)a4 + 328);
LABEL_7:
      float v12 = *v11;
      break;
    default:
      float v12 = 0.0;
      break;
  }
  float v13 = *((float *)this + a2 + 31);
  if (v13 == 0.0)
  {
    if (*(void *)this == *((void *)this + 1)
      || **(_WORD **)this != 71
      || a2 > 1
      || (float v13 = 1.0, *((double *)this + 18) <= 0.0))
    {
      float v13 = 0.0;
    }
  }
  float v14 = (float)(v12 * v13) * a5;
  if ((*((_DWORD *)a4 + 32) - 2000) <= 0x3E7) {
    MTSlideGesture_::suppressVelocityFromMouseFeeback(this, a2, a4, v14);
  }
  float v15 = 0.0;
  if (v14 != 0.0)
  {
    float v15 = (*((double *)a3 + 1) - *((double *)a3 + 2)) * v14;
    if (a6)
    {
      if (a2 > 1) {
        float v16 = fabsf(v14);
      }
      else {
        float v16 = sqrtf((float)(*((float *)a4 + 84) * *((float *)a4 + 84)) + (float)(*((float *)a4 + 83)
      }
                                                                               * *((float *)a4 + 83)));
      float v17 = *((float *)this + 11);
      float v18 = 1.0;
      if (v17 < v16 && v17 > 0.0)
      {
        float v19 = *((float *)this + 12);
        if (v19 > 0.0) {
          float v18 = powf(v16 / v17, v19);
        }
      }
      return v18 * v15;
    }
  }
  return v15;
}

float MTSlideGesture_::increasingSigmoidFromTdiff(MTSlideGesture_ *this, double a2, double a3, int a4)
{
  float v4 = 0.0;
  if (a2 != 0.0)
  {
    float v4 = 1.0;
    if (a3 != 0.0)
    {
      float v5 = a3;
      float v6 = a2;
      if (a4 >= 2)
      {
        int v7 = a4 - 1;
        do
        {
          float v5 = v5 * a3;
          float v6 = v6 * a2;
          --v7;
        }
        while (v7);
      }
      float v8 = v6 / (float)(v6 + v5);
      float v4 = 1.0;
      if (v8 <= 1.0)
      {
        float v4 = v8;
        if (v8 < 0.0) {
          return 0.0;
        }
      }
    }
  }
  return v4;
}

BOOL MTSlideGesture_::canOverrideLockOn(MTSlideGesture_ *this, const MTSlideGesture_ *a2)
{
  unsigned int v3 = (*((_DWORD *)a2 + 8) >> 9) & 7;
  float v4 = *((float *)a2 + 28);
  if ((float)(v4 + MTSlideGesture_::cumulativeMotionMagnitude(a2)) >= 3.0 || v3 == 0) {
    return 0;
  }
  if (*(void *)this == *((void *)this + 1) || **(_WORD **)this != 133) {
    return v3 < ((*((_DWORD *)this + 8) >> 9) & 7u);
  }
  return 1;
}

BOOL MTSlideGesture_::canPunishSomeMoving(MTSlideGesture_ *this, const MTHandStatistics_ *a2, MTChordIntegrating_ *a3)
{
  if ((*((_DWORD *)this + 8) & 0x8000E00) == 0) {
    return 0;
  }
  if (!*((unsigned char *)a3 + 264)) {
    return 1;
  }
  float v4 = (MTSlideGesture_ *)*((void *)a3 + 34);
  if (!v4) {
    return 1;
  }
  if (*((double *)a2 + 1) - *((double *)a3 + 32) < *(double *)&qword_158660) {
    return 1;
  }
  if (v4 == this)
  {
    float v7 = *((float *)this + 28);
    if ((float)(v7 + MTSlideGesture_::cumulativeMotionMagnitude(this)) < 3.0
      && (*((_DWORD *)a3 + 54) < 4u || *(void *)this == *((void *)this + 1) || **(_WORD **)this != 70))
    {
      return 1;
    }
  }

  return MTSlideGesture_::canOverrideLockOn(this, v4);
}

float MTSlideGesture_::someMovingMultiplier(MTSlideGesture_ *this, const MTHandStatistics_ *a2, MTHandMotion_ *a3, MTChordIntegrating_ *a4)
{
  unsigned int v8 = *((_DWORD *)this + 8);
  SpeedSymmetrfloat y = 0.0;
  if ((v8 & 0x100) == 0 || *((unsigned char *)a3 + 376))
  {
    uint64_t v10 = *(_WORD **)this;
    int v11 = (_WORD *)*((void *)this + 1);
    if (*(_WORD **)this == v11
      || ((*v10 & 0xFFFE) == 0x46 ? (BOOL v12 = *((unsigned char *)a2 + 305) == 0) : (BOOL v12 = 1),
          v12 || *((unsigned __int8 *)a2 + 211) + *((unsigned __int8 *)a2 + 186) < 4))
    {
      BOOL canPunishSomeMoving = MTSlideGesture_::canPunishSomeMoving(this, a2, a4);
      SpeedSymmetrfloat y = 1.0;
      if (canPunishSomeMoving)
      {
        if ((v8 & 0x8000000) != 0)
        {
          float v14 = 0.8;
          if (v10 != v11 && *((_DWORD *)a4 + 54) == 2) {
            float v14 = flt_111C10[(unsigned __int16)(*v10 - 35) < 5u];
          }
          SpeedSymmetrfloat y = MTHandMotion_::getSpeedSymmetry(a3, v14, 0);
          unsigned int v8 = *((_DWORD *)this + 8);
        }
        if ((v8 & 0xE00) != 0)
        {
          float v15 = 0.9;
          if (*((_DWORD *)a4 + 54) == 3) {
            float v15 = 2.0;
          }
          float v16 = MTHandMotion_::getSpeedSymmetry(a3, v15, (v8 >> 9) & 7);
          if (SpeedSymmetry < v16 || SpeedSymmetry == 1.0) {
            SpeedSymmetrfloat y = v16;
          }
          unsigned int v8 = *((_DWORD *)this + 8);
        }
        if ((v8 & 0xE00) == 0x800 && *((unsigned char *)a2 + 186) == 5) {
          return SpeedSymmetry
        }
               * MTSlideGesture_::increasingSigmoidFromTdiff((MTSlideGesture_ *)canPunishSomeMoving, *((double *)a2 + 1) - *((double *)a2 + 10) - (*((double *)a2 + 1) - *((double *)a2 + 7)), *(double *)&qword_158650, 2);
      }
    }
  }
  return SpeedSymmetry;
}

float MTSlideGesture_::integrateManipulativeGesture(MTSlideGesture_ *this, const MTHandStatistics_ *a2, MTHandMotion_ *a3, const MTDragManagerEventQueue_ *a4, MTChordIntegrating_ *a5, double a6, float a7)
{
  float v14 = MTSlideGesture_::someMovingMultiplier(this, a2, a3, a5);
  for (unint64_t i = 0; i != 4; ++i)
  {
    if (*((float *)this + i + 31) != 0.0
      || *(void *)this != *((void *)this + 1) && **(_WORD **)this == 71 && i <= 1 && *((double *)this + 18) > 0.0)
    {
      if (*((unsigned char *)a5 + 264)) {
        int v16 = (*((unsigned char *)this + 34) & 0x80) == 0
      }
           || *((unsigned __int8 *)a2 + 302) <= (*((unsigned __int8 *)a2 + 186) >> 1);
      else {
        int v16 = 0;
      }
      float v17 = MTSlideGesture_::accelerateAxisMotion(this, i, a2, a3, a7, v16);
      MTSlideGesture_::integrateAxisMotion((uint64_t)this, a2, a3, a4, a5, a6, i, v14 * v17);
    }
  }
  float v18 = *((float *)this + 28);
  return v18 + MTSlideGesture_::cumulativeMotionMagnitude(this);
}

uint64_t MTSlideGesture_::fireManipulativeGesture(uint64_t this, const MTHandStatistics_ *a2, const MTHandMotion_ *a3, MTDragManagerEventQueue_ *a4, __IOHIDEvent *a5, MTChordIntegrating_ *a6, double a7)
{
  uint64_t v8 = this;
  uint64_t v9 = 0;
  int v10 = 0;
  v17.i64[0] = 0xAAAAAAAAAAAAAAAALL;
  v17.i64[1] = 0xAAAAAAAAAAAAAAAALL;
  float v11 = *(float *)(this + 36);
  do
  {
    float v12 = *(float *)(this + v9 * 4 + 96);
    int v13 = (int)(float)(v12 / v11);
    float v14 = v11 * (float)v13;
    *(float *)(this + v9 * 4 + 96) = v12 - v14;
    *(float *)(this + 112) = *(float *)(this + 112) + fabsf(v14);
    v17.i32[v9] = v13;
    if (v13 >= 0) {
      int v15 = (int)(float)(v12 / v11);
    }
    else {
      int v15 = -v13;
    }
    v10 += v15;
    ++v9;
  }
  while (v9 != 4);
  if ((*(unsigned char *)(this + 35) & 2) == 0
    || *((unsigned char *)a6 + 264)
    || (*((_DWORD *)a3 + 32) - 2000) <= 0x3E7
    && *((unsigned __int8 *)a2 + 298) < *((unsigned __int8 *)a2 + 186)
    || (int32x2_t v16 = vabs_s32(*(int32x2_t *)v17.i8),
        (vcgt_u32((uint32x2_t)v16, (uint32x2_t)vdup_lane_s32(v16, 1)).u8[0] & 1) == 0))
  {
    if (*(void *)this == *(void *)(this + 8) || **(_WORD **)this != 68 || !*((unsigned char *)a2 + 222))
    {
      if (v10)
      {
        this = MTSlideGesture_::sendSlideMickeys((MTActionEvent_ **)this, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, &v17, a7);
        if ((int)this >= 1)
        {
          this = MTChordIntegrating_::resetMostIntegrators((uint64_t)a6, v8);
          *((_DWORD *)a6 + 72) += v10;
        }
      }
    }
  }
  return this;
}

float MTSlideGesture_::integrateFluidGesture(MTSlideGesture_ *this, const MTHandStatistics_ *a2, MTHandMotion_ *a3, MTChordIntegrating_ *a4, float a5)
{
  float v10 = MTSlideGesture_::someMovingMultiplier(this, a2, a3, a4);
  *((_DWORD *)this + 2objc_storeStrong(&location, 0) = 0;
  if (*((float *)this + 39) <= 0.0)
  {
    float v13 = 0.0;
    for (uint64_t i = 33; i != 35; ++i)
    {
      if (*((float *)this + i) != 0.0)
      {
        float v16 = MTSlideGesture_::accelerateAxisMotion(this, i - 31, a2, a3, a5, 0);
        float v17 = MTSlideGesture_::accelerateAxisMotion(this, i - 31, a2, a3, a5, 1);
        float v13 = *((float *)this + 20) + (float)(v16 * v10);
        *((float *)this + 2objc_storeStrong(&location, 0) = v13;
        *((float *)this + 22) = *((float *)this + 22) + (float)(v17 * v10);
      }
    }
  }
  else
  {
    MTSlideGesture_::integrateMotionWithinArc(this, a2, a3, a5, 0);
    float v12 = v11;
    MTSlideGesture_::integrateMotionWithinArc(this, a2, a3, a5, 1);
    float v13 = *((float *)this + 20) + (float)(v12 * v10);
    *((float *)this + 2objc_storeStrong(&location, 0) = v13;
    *((float *)this + 22) = *((float *)this + 22) + (float)(v14 * v10);
  }
  *((float *)this + 23) = v13 + *((float *)this + 23);
  if (!*((unsigned char *)a4 + 264))
  {
    float MouseMotionFeedback = MTHandMotion_::getMouseMotionFeedback(a3, 0);
    MTSlideGesture_::decayAxisIntegrator((uint64_t)this, a4, 0.0, (float *)this + 23, MouseMotionFeedback);
    float v19 = MTHandMotion_::getMouseMotionFeedback(a3, 0);
    MTSlideGesture_::decayAxisIntegrator((uint64_t)this, a4, 0.0, (float *)this + 22, v19);
  }
  for (unint64_t j = 0; j != 4; ++j)
  {
    unint64_t v21 = (float *)((char *)this + 4 * j);
    if (v21[31] != 0.0
      || *(void *)this != *((void *)this + 1) && **(_WORD **)this == 71 && j <= 1 && *((double *)this + 18) > 0.0)
    {
      v21[24] = v10 * MTSlideGesture_::accelerateAxisMotion(this, j, a2, a3, a5, 0);
    }
  }
  float v22 = *((float *)this + 21);
  float v23 = *((float *)this + 23);
  BOOL v24 = (float)(v22 * v23) < 0.0;
  float v25 = fabsf(v23);
  float v26 = fabsf(v22);
  if (v24 || v25 > v26) {
    *((float *)this + 2MTHandMotion_::clearHandMotion(this, 1) = v23;
  }
  float v28 = (float)(*((float *)this + 20) / *((float *)this + 15)) / (*((double *)a2 + 1) - *((double *)a2 + 2));
  MTChordIntegrating_::momentumFilterAlpha(a4, a2, fabsf(*((float *)this + 30)) < fabsf(v28));
  *((float *)this + 3objc_storeStrong(&location, 0) = (float)((float)(1.0 - v29) * v28) + (float)(v29 * *((float *)this + 30));
  float v30 = *((float *)this + 28);
  return v30 + MTSlideGesture_::cumulativeMotionMagnitude(this);
}

void MTSlideGesture_::integrateMotionWithinArc(MTSlideGesture_ *this, const MTHandStatistics_ *a2, MTHandMotion_ *a3, float a4, int a5)
{
  float v9 = *((float *)this + 31);
  if (v9 == 0.0)
  {
    if (*(void *)this == *((void *)this + 1) || **(_WORD **)this != 71 || (float v9 = 1.0, *((double *)this + 18) <= 0.0)) {
      float v9 = 0.0;
    }
  }
  float v10 = *((float *)a3 + 79) * v9;
  float v11 = *((float *)this + 32);
  if (v11 == 0.0)
  {
    if (*(void *)this == *((void *)this + 1)
      || **(_WORD **)this != 71
      || (float v11 = 1.0, *((double *)this + 18) <= 0.0))
    {
      float v11 = 0.0;
    }
  }
  float v12 = (float)(*((float *)a3 + 80) * v11) * a4;
  float v13 = sqrtf((float)(*((float *)a3 + 84) * *((float *)a3 + 84)) + (float)(*((float *)a3 + 83) * *((float *)a3 + 83)));
  if ((*((_DWORD *)a3 + 32) - 2000) <= 0x3E7)
  {
    MTSlideGesture_::suppressVelocityFromMouseFeeback(this, 0, a3, v10 * a4);
    MTSlideGesture_::suppressVelocityFromMouseFeeback(v14, 0, a3, v12);
  }
  if (v13 != 0.0)
  {
    float v15 = atan2f(-*((float *)a3 + 84), *((float *)a3 + 83)) + (float)(a4 + -1.0) * 1.57079633;
    if (a5)
    {
      float v16 = *((float *)this + 11);
      if (v16 < v13 && v16 > 0.0)
      {
        float v17 = *((float *)this + 12);
        if (v17 > 0.0) {
          powf(v13 / v16, v17);
        }
      }
    }
    float v18 = *((float *)this + 38);
    float v19 = *((float *)this + 39);
    float v20 = cosf(v15 - v18);
    float v21 = cosf(v19 * 0.5);
    if (v20 > v21 || v20 < (float)-v21) {
      __sincosf_stret(v18);
    }
  }
}

uint64_t MTSlideGesture_::cumulativeSwipeToDiscreteDelta(MTSlideGesture_ *this)
{
  int v1 = *((_DWORD *)this + 18);
  if (!v1)
  {
    *((_DWORD *)this + 19) = 0;
    float v7 = *((float *)this + 22);
    float v8 = *((float *)this + 9);
    if (v7 <= v8)
    {
      if (v7 >= (float)-v8) {
        return 0;
      }
      uint64_t v5 = 0xFFFFFFFFLL;
    }
    else
    {
      uint64_t v5 = 1;
    }
    *((_DWORD *)this + 18) = v5;
    return v5;
  }
  float v2 = *((float *)this + 19);
  float v3 = *((float *)this + 22);
  float v4 = *((float *)this + 9);
  if (v1 < 1)
  {
    if (v2 >= (float)(v3 + v4)) {
      float v2 = v3 + v4;
    }
    *((float *)this + 19) = v2;
    if (v3 > v2)
    {
      uint64_t v5 = 1;
      *((_DWORD *)this + 18) = 1;
      float v6 = v3 - v4;
      goto LABEL_13;
    }
    return 0;
  }
  if (v2 <= (float)(v3 - v4)) {
    float v2 = v3 - v4;
  }
  *((float *)this + 19) = v2;
  if (v3 >= v2) {
    return 0;
  }
  uint64_t v5 = 0xFFFFFFFFLL;
  *((_DWORD *)this + 18) = -1;
  float v6 = v3 + v4;
LABEL_13:
  *((float *)this + 19) = v6;
  return v5;
}

float MTSlideGesture_::fluidSwipePercentage(MTSlideGesture_ *this)
{
  return *((float *)this + 23) / *((float *)this + 15);
}

float MTSlideGesture_::fluidMomentumPercentage_s(MTSlideGesture_ *this, int a2)
{
  float result = 0.0;
  if (a2) {
    return *((float *)this + 30);
  }
  return result;
}

uint64_t MTSlideGesture_::hasSufficientFluidMomentum(MTSlideGesture_ *this, const MTHandStatistics_ *a2, int a3)
{
  float v3 = *((float *)this + 15);
  float v4 = *(_WORD **)this;
  uint64_t v5 = (_WORD *)*((void *)this + 1);
  float v6 = 1.0;
  float v7 = 0.8;
  float v8 = *((float *)this + 23) / v3;
  if (*(_WORD **)this != v5 && (*v4 & 0xFFFE) == 0x26)
  {
    float v9 = 0.0;
    if (a3) {
      float v9 = *((float *)this + 30);
    }
    float v6 = 0.25;
    if ((float)(v8 * v9) >= 0.0) {
      float v6 = 1.0;
    }
    float v7 = 0.6;
  }
  float v10 = 0.0;
  if (a3) {
    float v10 = *((float *)this + 30);
  }
  BOOL v11 = v4 != v5 && (*v4 & 0xFFFE) == 38;
  float v12 = v8 + (float)((float)(v6 * *((float *)this + 16)) * v10);
  float v13 = fabsf(v12);
  float v14 = v7 * fabsf(*((float *)this + 21) / v3);
  int v15 = !v11;
  if (*((unsigned __int8 *)this + 32) - 1 > 1) {
    int v15 = 1;
  }
  BOOL v16 = (float)(v8 * v12) > 0.0 && v13 > 0.5;
  if (v13 < v14) {
    BOOL v16 = 0;
  }
  if (v12 >= 0.0) {
    int v15 = 1;
  }
  return v16 & v15;
}

float MTSlideGesture_::fluidDOFPercentageDeltas(MTSlideGesture_ *this)
{
  return *((float *)this + 24) / *((float *)this + 15);
}

uint64_t MTSlideGesture_::fireFluidGesture(uint64_t this, const MTHandStatistics_ *a2, const MTHandMotion_ *a3, MTDragManagerEventQueue_ *a4, __IOHIDEvent *a5, MTChordIntegrating_ *a6, double a7)
{
  uint64_t v13 = this;
  int v14 = *((unsigned __int8 *)a6 + 264);
  if (!*((unsigned char *)a6 + 264) || !*(unsigned char *)(this + 68))
  {
    float v15 = fabsf(*(float *)(this + 92));
    if (v15 <= *(float *)(this + 56)) {
      return this;
    }
    *(float *)(this + 112) = v15 + *(float *)(this + 112);
    *(_DWORD *)(this + 92) = *(_DWORD *)(this + 80);
    if (!v14) {
      MTChordIntegrating_::resetMostIntegrators((uint64_t)a6, this);
    }
  }
  this = MTChordIntegrating_::sendSlidePreamble(a6, a2, a3, a4, a5, (MTActionEvent_ **)v13, 8u, a7);
  if (*(float *)(v13 + 80) != 0.0)
  {
    float v16 = *(float *)(v13 + 92);
    float v17 = *(float *)(v13 + 60);
    MTSlideGesture_::cumulativeSwipeToDiscreteDelta((MTSlideGesture_ *)v13);
    *((_DWORD *)a6 + 7MTHandMotion_::clearHandMotion(this, 1) = *(unsigned __int8 *)(v13 + 32);
    *(void *)(v13 + 144) = *((void *)a2 + 1);
    if (*(void *)(v13 + 8) == *(void *)v13) {
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    }
    float v18 = (const float *)(v13 + 60);
    vld1q_dup_f32(v18);
    this = (*((uint64_t (**)(MTDragManagerEventQueue_ *, float, double))a4->_vptr$MTTapDragManager_ + 4))(a4, v16 / v17, 0.0);
    *(unsigned char *)(v13 + 68) = 1;
  }
  return this;
}

float MTSlideGesture_::integrateCommandGesture(MTSlideGesture_ *this, const MTHandStatistics_ *a2, MTHandMotion_ *a3, MTChordIntegrating_ *a4, float a5)
{
  float v10 = MTSlideGesture_::someMovingMultiplier(this, a2, a3, a4);
  if (*((float *)this + 39) <= 0.0)
  {
    for (unint64_t i = 0; i != 4; ++i)
    {
      if (*((float *)this + i + 31) != 0.0
        || *(void *)this != *((void *)this + 1) && **(_WORD **)this == 71 && i <= 1 && *((double *)this + 18) > 0.0)
      {
        *((float *)this + 22) = *((float *)this + 22)
                              + (float)(MTSlideGesture_::accelerateAxisMotion(this, i, a2, a3, a5, 1) * v10);
      }
    }
  }
  else
  {
    MTSlideGesture_::integrateMotionWithinArc(this, a2, a3, a5, 1);
    *((float *)this + 22) = *((float *)this + 22) + (float)(v11 * v10);
  }
  if ((*((_DWORD *)a3 + 32) - 2000) <= 0x3E7)
  {
    float MouseMotionFeedback = MTHandMotion_::getMouseMotionFeedback(a3, 0);
    MTSlideGesture_::decayAxisIntegrator((uint64_t)this, a4, 0.0, (float *)this + 22, MouseMotionFeedback);
  }
  if (*((float *)this + 22) < 0.0) {
    *((_DWORD *)this + 22) = 0;
  }
  float v13 = *((float *)this + 28);
  return v13 + MTSlideGesture_::cumulativeMotionMagnitude(this);
}

uint64_t MTSlideGesture_::fireCommandGesture(uint64_t this, const MTHandStatistics_ *a2, const MTHandMotion_ *a3, MTDragManagerEventQueue_ *a4, __IOHIDEvent *a5, MTChordIntegrating_ *a6, double a7)
{
  float v8 = *(float *)(this + 36);
  float v9 = *(float *)(this + 88);
  int v10 = (int)(float)(v9 / v8);
  if (v10 >= 1)
  {
    uint64_t v16 = this;
    if (*((unsigned char *)a6 + 264))
    {
      if ((*(unsigned char *)(this + 33) & 0x40) != 0)
      {
        this = MTChordIntegrating_::waitForFastShotVerification(a6, a2, a3);
        float v9 = *(float *)(v16 + 88);
        if (this)
        {
          if (v9 > 30.0) {
            *(_DWORD *)(v16 + 88) = 1106247680;
          }
          return this;
        }
      }
    }
    else
    {
      int v10 = 1;
    }
    *(float *)(v16 + 88) = v9 - (float)((float)v10 * v8);
    *(float *)(v16 + 112) = fabsf(v8 * (float)v10) + *(float *)(v16 + 112);
    this = MTSlideGesture_::sendSlideKeys((MTActionEvent_ **)v16, a2, a3, a4, a5, a6, (__int16)v10, a7);
    if ((int)this >= 1)
    {
      return MTChordIntegrating_::resetMostIntegrators((uint64_t)a6, v16);
    }
  }
  return this;
}

uint64_t MTSlideGesture_::isLockedOutByTriggeredSlide(MTSlideGesture_ *this, const MTHandStatistics_ *a2, const MTChordIntegrating_ *a3, char a4)
{
  uint64_t v5 = (const MTSlideGesture_ *)*((void *)a3 + 34);
  if (!v5) {
    return 0;
  }
  unsigned int v6 = *((_DWORD *)v5 + 8);
  if ((v6 & 0x1000) != 0) {
    return (uint64_t)&def_411C8 + 1;
  }
  if (v5 == this) {
    return 0;
  }
  if ((v6 & 0x2000) != 0 && (*((unsigned char *)this + 33) & 0x20) == 0) {
    return (uint64_t)&def_411C8 + 1;
  }
  if ((v6 & 0x8000) == 0
    && ((v6 & 0x40000) == 0 || *((unsigned char *)a3 + 265))
    && ((v6 & 0x20000) == 0 || (*((_DWORD *)a3 + 70) & 0x80000000) == 0))
  {
    if ((v6 & 0x10000) != 0
      && *((_DWORD *)this + 8) >> ((*((_DWORD *)this + 8) & 0x55) == 0) != *((_DWORD *)v5 + 8) >> ((*((_DWORD *)v5 + 8) & 0x55) == 0))
    {
      return (uint64_t)&def_411C8 + 1;
    }
    return 0;
  }
  if (a4) {
    return (uint64_t)&def_411C8 + 1;
  }
  if (MTSlideGesture_::canOverrideLockOn(this, v5)) {
    return 0;
  }
  uint64_t result = 1;
  if ((v6 & 0x8000000) == 0 && ((v6 >> 9) & 7) - 1 <= 2) {
    return *((double *)a2 + 1) - *((double *)a3 + 32) >= *(double *)&qword_158660;
  }
  return result;
}

uint64_t MTSlideGesture_::isActiveEdgeSlide(MTSlideGesture_ *this, const MTHandStatistics_ *a2, const MTChordIntegrating_ *a3)
{
  int v3 = *((_DWORD *)this + 8);
  if ((v3 & 0x200000) == 0) {
    return 0;
  }
  BOOL v4 = (*((_DWORD *)this + 8) & 3) == 0;
  unsigned int v5 = *((_DWORD *)a2 + 57);
  if ((v3 & 3) == 0) {
    unsigned int v5 = *((_DWORD *)a2 + 56);
  }
  double v6 = *((double *)a2 + 1) - *((double *)a3 + 31);
  if (v6 <= *(double *)&qword_158668) {
    BOOL v4 = 0;
  }
  if (*(void *)this == *((void *)this + 1)) {
    return 1;
  }
  int v7 = v3 & (v5 >> 4) & 0xF;
  int v8 = **(unsigned __int16 **)this;
  BOOL v9 = v6 > *(double *)&qword_158648 || v7 == 0;
  BOOL v10 = v9;
  if ((v8 != 78 || !v10)
    && (!(v3 & (*((_DWORD *)a2 + 56) >> 12) & 2 | v7) ? (char v11 = 1) : (char v11 = v4),
        (v8 & 0xFFFE) == 0x26 ? (BOOL v12 = *((void *)a3 + 34) == (void)this) : (BOOL v12 = 1),
        v12 || (v11 & 1) == 0))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

BOOL MTSlideGesture_::isBlocked(MTSlideGesture_ *this, const MTHandStatistics_ *a2, const MTHandMotion_ *a3, MTChordIntegrating_ *a4, char a5)
{
  int v8 = *((_DWORD *)this + 8);
  if (*((unsigned char *)a2 + 316))
  {
    unsigned int v9 = *((unsigned __int8 *)a2 + 186);
    if (*((unsigned char *)a2 + 317)) {
      BOOL v10 = 0;
    }
    else {
      BOOL v10 = v9 > 1;
    }
    if (v10) {
      return 1;
    }
  }
  else
  {
    unsigned int v9 = *((unsigned __int8 *)a2 + 186);
  }
  if (*(void *)this == *((void *)this + 1)) {
    return 1;
  }
  int v11 = **(unsigned __int16 **)this;
  if (!**(_WORD **)this || *((float *)this + 9) == 0.0 || (v8 & 0x100000) != 0 && !*((unsigned char *)a4 + 264)) {
    return 1;
  }
  if ((v8 & 0x4000000) != 0 && *((double *)a2 + 1) - *((double *)a4 + 31) >= *(double *)&qword_158658) {
    return 1;
  }
  if ((v8 & 0x200000) != 0)
  {
    if (MTSlideGesture_::isActiveEdgeSlide(this, a2, a4)) {
      goto LABEL_45;
    }
    return 1;
  }
  if (v11 == 70)
  {
    if (!*((unsigned char *)a4 + 264)
      && *((_DWORD *)a4 + 54) == 2
      && ((*((unsigned char *)a2 + 224) & 0xC0) != 0
       || *((unsigned char *)a3 + 136) && (*((unsigned char *)a2 + 228) & 0x20) != 0
       || *((unsigned char *)a3 + 137) && (*((unsigned char *)a2 + 228) & 0x10) != 0)
      && *((double *)a2 + 1) - *((double *)a4 + 31) < *(double *)&qword_158648)
    {
      return 1;
    }
  }
  else if (v11 == 68 {
         && !*((unsigned char *)a4 + 264)
  }
         && *((_DWORD *)a4 + 54) == 1
         && *((double *)a2 + 1) - *((double *)a4 + 31) < *(double *)&qword_158640)
  {
    if ((a5 & 1) != 0 || (v8 & 3) == 0)
    {
      if (*((unsigned char *)a3 + 136) && (*((unsigned char *)a2 + 224) & 0x20) != 0
        || *((unsigned char *)a3 + 137) && (*((unsigned char *)a2 + 224) & 0x10) != 0)
      {
        return 1;
      }
    }
    else if (*((unsigned char *)a3 + 136) && (*((unsigned char *)a2 + 229) & 0x20) != 0 {
           || *((unsigned char *)a3 + 137) && (*((unsigned char *)a2 + 229) & 0x10) != 0)
    }
    {
      return 1;
    }
  }
LABEL_45:
  if (*((unsigned char *)a4 + 267)
    || (*((_WORD *)a4 + 114) & 0x1000) != 0 && *((double *)a2 + 1) - *((double *)a2 + 16) < *(double *)&qword_158650
    || (MTSlideGesture_::isLockedOutByTriggeredSlide(this, a2, a4, 0) & 1) != 0)
  {
    return 1;
  }
  BOOL v15 = *((MTSlideGesture_ **)a4 + 34) != this && v8 < 0;
  float v13 = (double)v9 * 25.0;
  return *((float *)a2 + 40) < v13 && v15;
}

float MTSlideGesture_::integrateGesture(MTSlideGesture_ *this, const MTHandStatistics_ *a2, MTHandMotion_ *a3, const MTDragManagerEventQueue_ *a4, MTChordIntegrating_ *a5, double a6)
{
  float v12 = pow(0.939999998, (*((double *)a2 + 1) - *((double *)a2 + 2)) / 0.00800000038);
  *((float *)this + 28) = *((float *)this + 28) * v12;
  if (*(void *)this == *((void *)this + 1)) {
    goto LABEL_13;
  }
  int v13 = **(unsigned __int16 **)this;
  if (v13 == 67 || (v13 & 0x80) != 0)
  {
    float v15 = (float)*((int *)a5 + 70);
    return MTSlideGesture_::integrateCommandGesture(this, a2, a3, a5, v15);
  }
  if ((v13 - 35) > 4)
  {
LABEL_13:
    float v18 = (float)*((int *)a5 + 70);
    return MTSlideGesture_::integrateManipulativeGesture(this, a2, a3, a4, a5, a6, v18);
  }
  else
  {
    float v17 = (float)*((int *)a5 + 70);
    return MTSlideGesture_::integrateFluidGesture(this, a2, a3, a5, v17);
  }
}

uint64_t MTSlideGesture_::fireGesture(uint64_t this, const MTHandStatistics_ *a2, const MTHandMotion_ *a3, MTDragManagerEventQueue_ *a4, __IOHIDEvent *a5, MTChordIntegrating_ *a6, double a7)
{
  if (*(void *)this == *(void *)(this + 8)) {
    return MTSlideGesture_::fireManipulativeGesture(this, a2, a3, a4, a5, a6, a7);
  }
  int v7 = **(unsigned __int16 **)this;
  if (v7 == 67 || (v7 & 0x80) != 0) {
    return MTSlideGesture_::fireCommandGesture(this, a2, a3, a4, a5, a6, a7);
  }
  if ((v7 - 35) > 4) {
    return MTSlideGesture_::fireManipulativeGesture(this, a2, a3, a4, a5, a6, a7);
  }
  else {
    return MTSlideGesture_::fireFluidGesture(this, a2, a3, a4, a5, a6, a7);
  }
}

void __cxx_global_var_init_39()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_38(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_currentTimestamp", a2);
  }
}

void __cxx_global_var_init_3_38(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_previousTimestamp", a2);
  }
}

void __cxx_global_var_init_4_35(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)114,(char)101,(char)108,(char)101,(char)97,(char)115,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_release", a2);
  }
}

void __cxx_global_var_init_5_35(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)97,(char)99,(char)116,(char)105,(char)118,(char)97,(char)116,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_activation", a2);
  }
}

void __cxx_global_var_init_6_35(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)101,(char)97,(char)114,(char)108,(char)105,(char)101,(char)115,(char)116,(char)78,(char)111,(char)110,(char)68,(char)105,(char)118,(char)105,(char)110,(char)103,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_earliestNonDivingTimestamp", a2);
  }
}

void __cxx_global_var_init_7_35(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)100,(char)105,(char)118,(char)105,(char)110,(char)103,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)67,(char)104,(char)97,(char)110,(char)103,(char)101,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_divingButtonChangeTimestamp", a2);
  }
}

void __cxx_global_var_init_8_36(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)105,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_min", a2);
  }
}

void __cxx_global_var_init_9_21(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_max", a2);
  }
}

void __cxx_global_var_init_10_21(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)66,(char)114,(char)101,(char)97,(char)107,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerBreakTouch_max", a2);
  }
}

void __cxx_global_var_init_11_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)82,(char)101,(char)115,(char)101,(char)116>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentReset", a2);
  }
}

void __cxx_global_var_init_12_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)65,(char)99,(char)116,(char)105,(char)118,(char)105,(char)116,(char)121>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentButtonActivity", a2);
  }
}

void __cxx_global_var_init_13_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_firstFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_14_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_firstFingerCleanStartInRange", a2);
  }
}

void __cxx_global_var_init_15_26(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerCleanStartInRange", a2);
  }
}

void __cxx_global_var_init_16_26(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_17_26(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_previousRecentFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_18_26(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)78,(char)111,(char)110,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)100,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentNonThumbTouchdown", a2);
  }
}

void __cxx_global_var_init_19_26(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_restingThumbTouchDown", a2);
  }
}

void __cxx_global_var_init_20_26(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)84,(char)119,(char)111,(char)79,(char)114,(char)77,(char)111,(char)114,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentTwoOrMoreFingersTouching", a2);
  }
}

void __cxx_global_var_init_21_27(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)118,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFiveFingersTouching", a2);
  }
}

void __cxx_global_var_init_22_27(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)76,(char)105,(char)102,(char)116,(char)111,(char)102,(char)102>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerLiftoff", a2);
  }
}

void __cxx_global_var_init_23_27(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)69,(char)110,(char)100>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerEnd", a2);
  }
}

void __cxx_global_var_init_24_27(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentScrollZoom", a2);
  }
}

void __cxx_global_var_init_25_26(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)119,(char)105,(char)116,(char)99,(char)104>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentChordSwitch", a2);
  }
}

void __cxx_global_var_init_26_26(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentChordSlide", a2);
  }
}

void __cxx_global_var_init_27_25(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109,(char)83,(char)108,(char)105,(char)100,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentScrollZoomSlide", a2);
  }
}

void __cxx_global_var_init_28_25(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)108,(char)117,(char)105,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentFluidSlide", a2);
  }
}

void __cxx_global_var_init_29_25(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)101,(char)120,(char)99,(char)101,(char)115,(char)115,(char)84,(char)97,(char)112,(char)77,(char)111,(char)116,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_excessTapMotion", a2);
  }
}

void __cxx_global_var_init_30_25(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)104,(char)97,(char)110,(char)100,(char)95,(char)99,(char)104,(char)111,(char)114,(char)100,(char)115>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"righthand_chords", a2);
  }
}

double MTForceFilter_::clear(MTForceFilter_ *this)
{
  *((void *)this + MTHandMotion_::clearHandMotion(this, 1) = 0x3F75C28F00000000;
  double result = 0.0;
  *((_OWORD *)this + MTHandMotion_::clearHandMotion(this, 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  return result;
}

void MTForceFilter_::MTForceFilter_(MTForceFilter_ *this)
{
  *(void *)this = off_1419C0;
  *((void *)this + MTHandMotion_::clearHandMotion(this, 1) = 0x3F75C28F00000000;
  *((_OWORD *)this + MTHandMotion_::clearHandMotion(this, 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
}

void MTForceFilter_::~MTForceFilter_(MTForceFilter_ *this)
{
}

float MTForceFilter_::surgeToActuationStrength(uint64_t a1, float *a2)
{
  float v2 = *a2;
  float v3 = powf(fabsf(*(float *)(a1 + 24)), 1.2);
  return (float)(v3 / (float)(v3 + powf(fabsf(v2), 1.2))) + 0.1;
}

float MTForceFilter_::surge_g_s(MTForceFilter_ *this)
{
  return *((float *)this + 6);
}

void MTForceFilter_::updateForceFilter(uint64_t a1, float *a2, float a3, float a4, double a5)
{
  if (a5 <= 0.04) {
    double v6 = a5;
  }
  else {
    double v6 = 0.04;
  }
  float v7 = *(float *)(a1 + 16);
  *(float *)(a1 + 16) = a3;
  *(float *)(a1 + 2objc_storeStrong(&location, 0) = v7;
  int v8 = *(_DWORD *)(a1 + 28);
  float v9 = (float)(a3 - v7) / v6;
  *(float *)(a1 + 28) = v9;
  *(_DWORD *)(a1 + 32) = v8;
  if (a3 == 0.0 || a5 > 0.04)
  {
    float v11 = *(float *)(a1 + 24);
    float v13 = 0.0;
  }
  else
  {
    float v10 = fabsf(v9);
    float v11 = *(float *)(a1 + 24);
    float v12 = fabsf(v11);
    if (v10 <= v12) {
      float v10 = v12;
    }
    float v13 = (float)(1.0 - (float)(v10 / (float)(v10 + 1500.0))) * 0.9;
  }
  *(float *)(a1 + 24) = (float)((float)(1.0 - v13) * v9) + (float)(v13 * v11);
  float v14 = *(float *)(a1 + 36);
  if (v14 >= a4) {
    float v15 = (float)(a4 * 0.15) + (float)(v14 * 0.85);
  }
  else {
    float v15 = (float)(a4 * 0.75) + (float)(v14 * 0.25);
  }
  *(float *)(a1 + 36) = v15;
  MTForceFilter_::updateHystereticForce(a1, a2, a3);
  float v16 = *(float *)(a1 + 40);
  float v17 = *(float *)(a1 + 8);
  float v18 = v16;
  if (v16 > v17) {
    float v18 = (float)(v16 * (float)(1.0 - *(float *)(a1 + 12))) + (float)(*(float *)(a1 + 12) * v17);
  }
  *(float *)(a1 + 8) = v18;
}

float MTForceFilter_::updateHystereticForce(uint64_t a1, float *a2, float a3)
{
  float v3 = a2[1];
  float v4 = *a2 * a3;
  if (v4 < v3) {
    float v4 = a2[1];
  }
  float v5 = a2[2];
  if (v4 <= v5) {
    float v5 = v4;
  }
  float v6 = *(float *)(a1 + 40);
  if ((float)(v6 + v5) >= a3)
  {
    if (v3 >= a3)
    {
      float v7 = a3 + a3;
    }
    else
    {
      float v7 = *(float *)(a1 + 40);
      if ((float)(v6 - v5) > a3) {
        float v7 = v5 + a3;
      }
    }
  }
  else
  {
    float v7 = a3 - v5;
  }
  float result = (float)(v7 * (float)(1.0 - a2[3])) + (float)(a2[3] * v6);
  *(float *)(a1 + 4objc_storeStrong(&location, 0) = result;
  *(float *)(a1 + 44) = v6;
  return result;
}

void __cxx_global_var_init_40()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_39(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_currentTimestamp", a2);
  }
}

void __cxx_global_var_init_3_39(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_previousTimestamp", a2);
  }
}

void *MTChordCyclingTrackpad_::MTChordCyclingTrackpad_(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5, int a6)
{
  float result = (void *)MTChordCycling_::MTChordCycling_(a1, a2, a3, a4, a5, a6);
  void *result = off_1419F0;
  return result;
}

uint64_t MTChordCyclingTrackpad_::chk4newTapChord(MTChordCyclingTrackpad_ *this, const MTHandStatistics_ *a2, const MTHandMotion_ *a3, MTChordGestureSet_ *a4)
{
  if (a4
    && *((double *)a2 + 10) > *((double *)a2 + 16)
    && (*(unsigned int (**)(MTChordCyclingTrackpad_ *, const MTHandStatistics_ *))(*(void *)this + 48))(this, a2))
  {
    int v8 = *((_DWORD *)this + 260);
    unsigned int v9 = *((_DWORD *)a4 + 54);
    if ((!v8 || (v9 >= *((_DWORD *)this + 258) || v9 < *((unsigned __int8 *)a2 + 186)) && *((_DWORD *)a4 + 56) != v8)
      && (v9 != 2 || *((_DWORD *)a4 + 55) != 2 || *((unsigned char *)a2 + 195) != 1))
    {
      (*(void (**)(MTChordCyclingTrackpad_ *, const MTHandStatistics_ *, const MTHandMotion_ *, MTChordGestureSet_ *))(*(void *)this + 88))(this, a2, a3, a4);
    }
  }
  float v10 = *(uint64_t (**)(MTChordCyclingTrackpad_ *, const MTHandStatistics_ *, const MTHandMotion_ *))(*(void *)this + 96);

  return v10(this, a2, a3);
}

void MTChordCyclingTrackpad_::handleChordTaps(MTChordCyclingTrackpad_ *this, const MTHandStatistics_ *a2, const MTHandMotion_ *a3, __IOHIDEvent *a4, char a5, uint64_t a6)
{
  if (*((_DWORD *)this + 260)
    && (*(unsigned int (**)(MTChordCyclingTrackpad_ *))(*(void *)this + 48))(this)
    && ((a6 & 1) != 0
     || *((_DWORD *)this + 258) < 2u
     || (*(unsigned int (**)(MTChordCyclingTrackpad_ *, const MTHandStatistics_ *))(*(void *)this + 56))(this, a2)))
  {
    if ((*(unsigned int (**)(MTChordCyclingTrackpad_ *, const MTHandStatistics_ *, const MTHandMotion_ *, uint64_t))(*(void *)this + 112))(this, a2, a3, a6))
    {
      int v12 = *((_DWORD *)this + 262);
      if (!v12 || (*((_DWORD *)this + 6) & v12) != 0)
      {
        int v13 = *((_DWORD *)this + 259);
        if ((a6 & 1) != 0 || v13 < 2)
        {
          if (v13 == 1)
          {
            float v16 = (_WORD *)*((void *)this + 110);
            if (v16 != *((_WORD **)this + 111)
              && *v16
              && vabdd_f64(*((double *)a2 + 12), *((double *)a2 + 13)) < *(double *)&qword_1586C0
              && *((unsigned __int8 *)a2 + 211) + *((unsigned __int8 *)a2 + 186) <= 1
              && (a6 & 1) == 0)
            {
              (*(void (**)(MTChordCyclingTrackpad_ *, const MTHandStatistics_ *, char *, __IOHIDEvent *))(*(void *)this + 120))(this, a2, (char *)a3 + 168, a4);
              goto LABEL_47;
            }
          }
          if (a6 && *((double *)a2 + 10) - *((double *)a2 + 11) <= 0.09) {
            return;
          }
        }
        else
        {
          float v14 = (_WORD *)*((void *)this + 110);
          float v15 = (_WORD *)*((void *)this + 111);
          if (v14 != v15 && *v14) {
            goto LABEL_13;
          }
          float v17 = (_WORD *)*((void *)this + 102);
          if (v17 != *((_WORD **)this + 103) && *v17)
          {
            if (v14 != v15 && *v14)
            {
LABEL_13:
              (*(void (**)(MTChordCyclingTrackpad_ *, const MTHandStatistics_ *, char *, __IOHIDEvent *))(*(void *)this + 128))(this, a2, (char *)a3 + 168, a4);
              goto LABEL_49;
            }
            uint64_t v18 = *((void *)this + 49);
            if (*(unsigned char *)(v18 + 28) && *(int *)(v18 + 24) >= 3)
            {
              MTTapDragManager_::handleTapsForMultiFingerDrag(*((void *)this + 49), a2, a3, a4);
              goto LABEL_49;
            }
            goto LABEL_46;
          }
        }
        uint64_t v19 = *((void *)this + 102);
        if (v19 == *((void *)this + 103)
          || !*(_WORD *)v19
          || a6 && (a5 & 1) == 0 && (*(unsigned char *)(v19 + 5) & 1) == 0)
        {
          if (!a6
            || (float v20 = (_WORD *)*((void *)this + 106), v20 == *((_WORD **)this + 107))
            || !*v20
            || v12 && (*((_DWORD *)this + 6) & v12) == 0)
          {
LABEL_49:
            MTChordIntegrating_::nullify((void **)this + 102);
            return;
          }
          MTGesture::dispatchEvents((uint64_t *)this + 106, *((void *)this + 49), (uint64_t)a4, 0, 0, (uint64_t)a3 + 168, 24576, *((unsigned int *)this + 260), *((double *)a2 + 1));
          uint64_t v21 = *((void *)this + 49);
          *(void *)(v21 + 72) = *((void *)a2 + 1);
          LOBYTE(v22) = 1;
LABEL_48:
          *(unsigned char *)(v21 + 49) = v22;
          goto LABEL_49;
        }
        float v23 = (MTTapDragManager_ *)*((void *)this + 49);
        if (*((_DWORD *)this + 258) != 1 || *(_WORD *)v19 != 65)
        {
          MTTapDragManager_::clearCycle((uint64_t)v23);
          uint64_t v18 = *((void *)this + 49);
LABEL_46:
          MTGesture::dispatchEvents((uint64_t *)this + 102, v18, (uint64_t)a4, 0, 0, (uint64_t)a3 + 168, 12288, *((unsigned int *)this + 260), *((double *)a2 + 1));
          goto LABEL_47;
        }
        MTTapDragManager_::handleTapsForDrag(v23, a2, a3, a4);
LABEL_47:
        uint64_t v21 = *((void *)this + 49);
        int v22 = *((_DWORD *)this + 258);
        *(void *)(v21 + 72) = *((void *)a2 + 1);
        goto LABEL_48;
      }
    }
  }
}

uint64_t MTChordCyclingTrackpad_::possiblyStopChordMomentum(MTChordCyclingTrackpad_ *this, const MTHandStatistics_ *a2, const MTHandMotion_ *a3, __IOHIDEvent *a4)
{
  MTChordCycling_::possiblyStopChordMomentum((uint64_t)this, a2, a3, a4);
  int v8 = (MTTapDragManager_ *)*((void *)this + 49);
  double v9 = *((double *)a2 + 1) - *((double *)this + 155);

  return MTTapDragManager_::chk4dragCycling(v8, a2, a3, a4, v9);
}

void MTChordCyclingTrackpad_::chk4chordCycling(int32x2_t *this, MTHandStatistics_ *a2, float32x4_t *a3, __IOHIDEvent *a4)
{
  if (*((unsigned __int8 *)a2 + 211) + *((unsigned __int8 *)a2 + 186) > *((unsigned __int8 *)a2 + 190)
                                                                                     + *((unsigned __int8 *)a2 + 187)
    && this[79].i32[0])
  {
    MTChordIntegrating_::clearMickeysSinceLastTouchdown((uint64_t)&this[51]);
  }
  (*(void (**)(int32x2_t *, MTHandStatistics_ *, __IOHIDEvent *))(*(void *)this + 152))(this, a2, a4);
  if (*((unsigned char *)a2 + 210))
  {
    __int32 v8 = this[79].i32[0];
    if (v8 && this[78].i32[0] == 1 || this[130].i32[0] && this[129].i32[0] == 1) {
      *(void *)(*(void *)&this[49] + 8objc_storeStrong(&location, 0) = *((void *)a2 + 1);
    }
    if (v8)
    {
      double v9 = (void *)this[85];
      if (v9)
      {
        if (*v9 != v9[1] && *(_WORD *)*v9 == 37 && this[84].i8[0])
        {
          unsigned int v10 = *((unsigned __int8 *)a2 + 186);
          if ((*((unsigned char *)a2 + 168) & 0x20) != 0) {
            v10 += *((unsigned __int8 *)a2 + 188);
          }
          if (v10 >= *((unsigned __int8 *)a2 + 187) && v10 > 2) {
            return;
          }
        }
      }
    }
  }
  if (!*((unsigned char *)a2 + 298) && (*((unsigned char *)a2 + 186) != 1 || *((unsigned char *)a2 + 195) == 0))
  {
LABEL_25:
    (*(void (**)(int32x2_t *, MTHandStatistics_ *, float32x4_t *, __IOHIDEvent *))(*(void *)this + 104))(this, a2, a3, a4);
    int v12 = *(void (**)(int32x2_t *, MTHandStatistics_ *, float32x4_t *, __IOHIDEvent *))(*(void *)this
                                                                                                 + 160);
    v12(this, a2, a3, a4);
    return;
  }
  int32x2_t v13 = this[49];
  if (*(unsigned char *)(*(void *)&v13 + 28))
  {
    int v14 = *((unsigned __int8 *)a2 + 186);
    int v15 = *((unsigned __int8 *)a2 + 187);
    if (*(int *)(*(void *)&v13 + 24) >= 3)
    {
      int v16 = *((unsigned __int8 *)a2 + 211);
      int v17 = *((unsigned __int8 *)a2 + 190);
      unsigned int v18 = v17 + v15;
      goto LABEL_34;
    }
  }
  else
  {
    int v14 = *((unsigned __int8 *)a2 + 186);
    int v15 = *((unsigned __int8 *)a2 + 187);
  }
  int v16 = *((unsigned __int8 *)a2 + 211);
  int v17 = *((unsigned __int8 *)a2 + 190);
  unsigned int v18 = v17 + v15;
  if (v16 + v14 < v18 && v16 + v14 <= *(unsigned __int8 *)(*(void *)&v13 + 48))
  {
    (*(void (**)(int32x2_t *, MTHandStatistics_ *, float32x4_t *, __IOHIDEvent *))(*(void *)this + 104))(this, a2, a3, a4);
    goto LABEL_45;
  }
LABEL_34:
  unsigned int v19 = v16 + v14;
  if (v19 >= v18 || !this[130].i32[0]) {
    goto LABEL_45;
  }
  if (v19 != 1 || (uint64_t v20 = 0, v21 = 1, !v17) && *((unsigned char *)a2 + 195))
  {
    if ((this[130].i16[2] & 0x100) == 0)
    {
      int v22 = (_WORD *)this[106];
      if (v22 == *(_WORD **)&this[107] || !*v22) {
        goto LABEL_45;
      }
    }
    uint64_t v21 = 0;
    uint64_t v20 = 1;
  }
  (*(void (**)(int32x2_t *, MTHandStatistics_ *, float32x4_t *, __IOHIDEvent *, uint64_t, uint64_t))(*(void *)this + 136))(this, a2, a3, a4, v21, v20);
LABEL_45:
  (*(void (**)(int32x2_t *, MTHandStatistics_ *, float32x4_t *, __IOHIDEvent *))(*(void *)this + 160))(this, a2, a3, a4);
  char v23 = (*(uint64_t (**)(int32x2_t *, MTHandStatistics_ *))(*(void *)this + 24))(this, a2);
  uint64_t MatchingChord = MTChordTable_::findMatchingChord((MTChordTable_ *)this, v23, 0);
  (*(void (**)(int32x2_t *, MTHandStatistics_ *, float32x4_t *, uint64_t))(*(void *)this + 144))(this, a2, a3, MatchingChord);
  float v25 = a3[17].f32[1];
  if (MatchingChord && (*(_WORD *)(MatchingChord + 228) & 0x100) != 0)
  {
    if ((*((_WORD *)a2 + 148) & 1) != 0 && v25 <= 0.765) {
      return;
    }
    if (*(_DWORD *)(MatchingChord + 220) < *((unsigned __int8 *)a2 + 198)
      && *((unsigned __int8 *)a2 + 186) == *((unsigned __int8 *)a2 + 298))
    {
      if (!this[79].i32[0] || this[84].i8[0] || *((double *)a2 + 1) - *((double *)a2 + 7) <= *(double *)&qword_158640) {
        return;
      }
      int v33 = (MTChordIntegrating_ *)&this[51];
      goto LABEL_103;
    }
  }
  if ((this[79].i16[2] & 0x100) != 0 && !this[84].i8[0] && (*((_WORD *)a2 + 148) & 1) != 0 && v25 <= 0.765)
  {
    int v33 = (MTChordIntegrating_ *)&this[51];
LABEL_103:
    MTChordIntegrating_::endChordIntegration(v33, a2, (const MTHandMotion_ *)a3, a4, (MTChordCycling_ *)this);
    return;
  }
  if (!this[79].i32[0])
  {
    if (!MatchingChord
      || !MTChordGestureSet_::isChordReadyToIntegrate((MTChordGestureSet_ *)MatchingChord, a2, a3))
    {
      return;
    }
    goto LABEL_154;
  }
  MTChordIntegrating_::markMomentumPause((MTChordIntegrating_ *)&this[51], a2);
  if (*((double *)a2 + 1) - *((double *)a2 + 36) <= *((double *)a2 + 1) - *((double *)a2 + 2)
    && MatchingChord
    && *((unsigned __int8 *)a2 + 211) + *((unsigned __int8 *)a2 + 186) >= 4)
  {
    uint64_t v34 = (unsigned __int16 **)this[85];
    if (!v34 || *v34 == v34[1] || **v34 - 35 >= 5) {
      goto LABEL_154;
    }
  }
  else if (!MatchingChord)
  {
    return;
  }
  if (*(_DWORD *)(MatchingChord + 224) == this[79].i32[0]
    && (MTChordGestureSet_::chordGestureSetEquals((MTChordGestureSet_ *)MatchingChord, (const MTChordGestureSet_ *)&this[51]) & 1) != 0)
  {
    return;
  }
  int32x2_t v26 = this[49];
  if (*(int *)(*(void *)&v26 + 24) >= 2)
  {
    if ((***(unint64_t (****)(int32x2_t))&v26)(v26))
    {
      int32x2_t v27 = this[49];
      if (!*(unsigned char *)(*(void *)&v27 + 28) || *(int *)(*(void *)&v27 + 24) < 3) {
        return;
      }
    }
  }
  int v28 = *(_DWORD *)(MatchingChord + 216);
  unsigned int v29 = this[78].u32[0];
  if (v28 < v29)
  {
    float v30 = (MTSlideGesture_ *)this[85];
    if (v30)
    {
      if (*(void *)v30 == *((void *)v30 + 1) || (**(_WORD **)v30 & 0xFFFE) != 0x26) {
        goto LABEL_65;
      }
      if (!MTSlideGesture_::isFluidFullyTriggered(v30)) {
        goto LABEL_66;
      }
      float v30 = (MTSlideGesture_ *)this[85];
      if (v30)
      {
LABEL_65:
        if (*(void *)v30 == *((void *)v30 + 1) || (**(_WORD **)v30 & 0xFFFE) != 0x26) {
          goto LABEL_68;
        }
LABEL_66:
        if (*((unsigned char *)a2 + 298)
          && *((unsigned __int8 *)a2 + 211) + *((unsigned __int8 *)a2 + 186) >= *((unsigned __int8 *)a2
                                                                                              + 190)
                                                                                            + *((unsigned __int8 *)a2 + 187))
        {
          goto LABEL_68;
        }
        goto LABEL_25;
      }
    }
LABEL_68:
    if (this[84].i8[0]
      && ((this[79].i16[2] & 0x80) == 0
       || (MTChordIntegrating_::hasPartiallyTriggeredFluidNotificationOrNotificationAlt((MTChordIntegrating_ *)&this[51]) & 1) != 0
       || ((*(_WORD *)(MatchingChord + 228) & 8) == 0 || *((unsigned char *)a2 + 211))
       && *(_DWORD *)(MatchingChord + 216) >= (int)*((unsigned __int8 *)a2 + 186)))
    {
      if ((this[79].i16[2] & 0x10) == 0) {
        return;
      }
      if ((*(_WORD *)(MatchingChord + 228) & 1) == 0) {
        return;
      }
      float v31 = (void *)this[85];
      if (v31)
      {
        if (*v31 != v31[1] && *(_WORD *)*v31 == 37)
        {
          unsigned int v32 = *((unsigned __int8 *)a2 + 186);
          if (v32 <= *((unsigned __int8 *)a2 + 195) || *((unsigned __int8 *)a2 + 211) + v32 != 1) {
            return;
          }
        }
      }
      if (MTChordIntegrating_::hasPartiallyTriggeredFluidNotificationOrNotificationAlt((MTChordIntegrating_ *)&this[51])) {
        return;
      }
      if ((this[79].i16[2] & 0x80) == 0)
      {
        if ((this[79].i16[2] & 0x100) != 0)
        {
          if (*(_DWORD *)(MatchingChord + 216) != 1
            || *((unsigned __int8 *)a2 + 211) + *((unsigned __int8 *)a2 + 186) != 1
            || this[158].i8[0] && this[158].i32[1] == 4)
          {
            return;
          }
        }
        else if (*((double *)a2 + 1) - *((double *)a2 + 16) <= *(double *)&gTimingPrefs_ * 0.5)
        {
          return;
        }
      }
    }
LABEL_154:
    float v49 = *(void (**)(int32x2_t *, MTHandStatistics_ *, float32x4_t *, __IOHIDEvent *, uint64_t))(*(void *)this + 80);
    v49(this, a2, a3, a4, MatchingChord);
    return;
  }
  int v36 = this[88].i32[0] <= v29 + 1 || v28 < *((unsigned __int8 *)a2 + 186);
  BOOL v37 = MTChordIntegrating_::recentMomentumPause((MTChordIntegrating_ *)&this[51], a2, HIBYTE(*(unsigned __int16 *)(MatchingChord + 228)) & 1);
  if (*(_DWORD *)(MatchingChord + 216) < 3u) {
    int hasEnabledFluidNavigation = 0;
  }
  else {
    int hasEnabledFluidNavigation = MTChordGestureSet_::hasEnabledFluidNavigation((MTChordGestureSet_ *)MatchingChord, (const MTChordTable_ *)this);
  }
  if (!v36) {
    goto LABEL_140;
  }
  if ((*(_WORD *)(MatchingChord + 228) & 0x100) != 0
    && (float32x2_t v39 = (void *)this[85]) != 0
    && *v39 != v39[1]
    && (*(_WORD *)*v39 & 0xFFFE) == 0x46
    || (v40 = *((double *)a2 + 1), double v41 = v40 - *((double *)a2 + 35), v41 >= *(double *)&qword_158640))
  {
    int v36 = 0;
    goto LABEL_140;
  }
  if ((hasEnabledFluidNavigation & 1) == 0)
  {
    double v44 = v40 - *((double *)a2 + 10);
    int v36 = v44 > 0.0;
    char v45 = v44 <= 0.0 || v37;
    if (v45) {
      goto LABEL_140;
    }
    if (a3[12].f32[2] == 0.0)
    {
      int v36 = a3[12].f32[3] != 0.0;
      goto LABEL_140;
    }
LABEL_139:
    int v36 = 1;
    goto LABEL_140;
  }
  char v42 = a3[12].f32[2] != 0.0 || v37;
  if (v42) {
    goto LABEL_139;
  }
  float v43 = a3[12].f32[3];
  int v36 = v43 != 0.0;
  if (v43 == 0.0 && ((hasEnabledFluidNavigation ^ 1) & 1) == 0) {
    int v36 = MTChordIntegrating_::switchingVerticalToHorizontal(this + 51, 20.0, v41 == 0.0);
  }
LABEL_140:
  if (!this[84].i8[0]) {
    goto LABEL_154;
  }
  if (*((double *)a2 + 1) - *((double *)a2 + 33) < *(double *)&qword_158640)
  {
    if ((*(_WORD *)(MatchingChord + 228) & 0x100) == 0
      && !MTChordGestureSet_::hasEnabledFluidDock((MTChordGestureSet_ *)MatchingChord, (const MTChordTable_ *)this))
    {
      goto LABEL_154;
    }
    if (*(_DWORD *)(MatchingChord + 216) != 3) {
      goto LABEL_154;
    }
    float v46 = (void *)this[85];
    if (!v46 || *v46 == v46[1] || (*(_WORD *)*v46 & 0xFFFE) != 0x46) {
      goto LABEL_154;
    }
  }
  __int16 v47 = this[79].i16[2];
  if ((v47 & 0x20) != 0
    || (v47 & 0x40) != 0
    && ((v36 & 1) != 0
     || MTChordGestureSet_::hasActiveEdgeSlide((MTChordGestureSet_ *)MatchingChord, a2, (const MTChordCycling_ *)this)))
  {
    unsigned int v48 = *(unsigned __int16 *)(MatchingChord + 228);
    if ((v48 & 2) != 0) {
      goto LABEL_154;
    }
    if (v36 & (v48 >> 2)) {
      goto LABEL_154;
    }
    if ((v36 & (v48 >> 11)) == 1)
    {
      float v50 = (void *)this[85];
      if (v50)
      {
        if (*v50 != v50[1] && *(_WORD *)*v50 == 68 && this[78].i32[0] == 1) {
          goto LABEL_154;
        }
      }
    }
  }
}

MTSlideGesture_ *MTChordIntegrating_::hasPartiallyTriggeredFluidNotificationOrNotificationAlt(MTChordIntegrating_ *this)
{
  float result = (MTSlideGesture_ *)*((void *)this + 34);
  if (result)
  {
    if (*(void *)result == *((void *)result + 1) || (**(_WORD **)result & 0xFFFE) != 0x26) {
      return 0;
    }
    else {
      return (MTSlideGesture_ *)!MTSlideGesture_::isFluidFullyTriggered(result);
    }
  }
  return result;
}

void MTChordCyclingTrackpad_::~MTChordCyclingTrackpad_(MTChordCyclingTrackpad_ *this)
{
  MTChordCycling_::~MTChordCycling_(this);

  operator delete();
}

HSUtil::Encoder *MTChordCycling_::encodeToMap(MTChordCycling_ *this, HSUtil::Encoder *a2)
{
  HSUtil::Encoder::encodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)119,(char)105,(char)116,(char)99,(char)104>::Key, *((double *)this + 153));
  HSUtil::Encoder::encodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Key, *((double *)this + 154));
  HSUtil::Encoder::encodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109,(char)83,(char)108,(char)105,(char)100,(char)101>::Key, *((double *)this + 155));
  HSUtil::Encoder::encodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)108,(char)117,(char)105,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Key, *((double *)this + 156));
  float v4 = (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)101,(char)120,(char)99,(char)101,(char)115,(char)115,(char)84,(char)97,(char)112,(char)77,(char)111,(char)116,(char)105,(char)111,(char)110>::Key;
  double v5 = *((double *)this + 157);

  return HSUtil::Encoder::encodeDouble(a2, v4, v5);
}

uint64_t MTChordCycling_::decodeFromMap(MTChordCycling_ *this, HSUtil::Decoder *a2)
{
  *((double *)this + 153) = HSUtil::Decoder::decodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)119,(char)105,(char)116,(char)99,(char)104>::Key);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/Gestures/MTChordCycling_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTChordCycling_::decodeFromMap();
    }
    return 0;
  }
  *((double *)this + 154) = HSUtil::Decoder::decodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Key);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/Gestures/MTChordCycling_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTChordCycling_::decodeFromMap();
    }
    return 0;
  }
  *((double *)this + 155) = HSUtil::Decoder::decodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109,(char)83,(char)108,(char)105,(char)100,(char)101>::Key);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/Gestures/MTChordCycling_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTChordCycling_::decodeFromMap();
    }
    return 0;
  }
  *((double *)this + 156) = HSUtil::Decoder::decodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)108,(char)117,(char)105,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Key);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/Gestures/MTChordCycling_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTChordCycling_::decodeFromMap();
    }
    return 0;
  }
  *((double *)this + 157) = HSUtil::Decoder::decodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)95,(char)101,(char)120,(char)99,(char)101,(char)115,(char)115,(char)84,(char)97,(char)112,(char)77,(char)111,(char)116,(char)105,(char)111,(char)110>::Key);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/Gestures/MTChordCycling_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTChordCycling_::decodeFromMap();
    }
    return 0;
  }
  return 1;
}

BOOL MTSlideGesture_::isFluidFullyTriggered(MTSlideGesture_ *this)
{
  if (*(void *)this == *((void *)this + 1) || **(unsigned __int16 **)this - 35 > 4) {
    return 0;
  }
  if (MTSlideGesture_::fluidSwipePercentage(this) <= 1.0) {
    return MTSlideGesture_::fluidSwipePercentage(this) < -1.0;
  }
  return 1;
}

void MTChordCycling_::~MTChordCycling_(MTChordCycling_ *this)
{
  *(void *)this = off_141AC8;
  int v12 = (void **)((char *)this + 976);
  std::vector<MTSlideGesture_>::__destroy_vector::operator()[abi:ne180100](&v12);
  float v2 = (void *)*((void *)this + 118);
  if (v2)
  {
    *((void *)this + 119) = v2;
    operator delete(v2);
  }
  float v3 = (void *)*((void *)this + 114);
  if (v3)
  {
    *((void *)this + 115) = v3;
    operator delete(v3);
  }
  float v4 = (void *)*((void *)this + 110);
  if (v4)
  {
    *((void *)this + 11MTHandMotion_::clearHandMotion(this, 1) = v4;
    operator delete(v4);
  }
  double v5 = (void *)*((void *)this + 106);
  if (v5)
  {
    *((void *)this + 107) = v5;
    operator delete(v5);
  }
  float v6 = (void *)*((void *)this + 102);
  if (v6)
  {
    *((void *)this + 103) = v6;
    operator delete(v6);
  }
  int v12 = (void **)((char *)this + 568);
  std::vector<MTSlideGesture_>::__destroy_vector::operator()[abi:ne180100](&v12);
  float v7 = (void *)*((void *)this + 67);
  if (v7)
  {
    *((void *)this + 68) = v7;
    operator delete(v7);
  }
  __int32 v8 = (void *)*((void *)this + 63);
  if (v8)
  {
    *((void *)this + 64) = v8;
    operator delete(v8);
  }
  double v9 = (void *)*((void *)this + 59);
  if (v9)
  {
    *((void *)this + 6objc_storeStrong(&location, 0) = v9;
    operator delete(v9);
  }
  unsigned int v10 = (void *)*((void *)this + 55);
  if (v10)
  {
    *((void *)this + 56) = v10;
    operator delete(v10);
  }
  float v11 = (void *)*((void *)this + 51);
  if (v11)
  {
    *((void *)this + 52) = v11;
    operator delete(v11);
  }
  MTChordTable_::~MTChordTable_(this);
}

{
  uint64_t vars8;

  MTChordCycling_::~MTChordCycling_(this);

  operator delete();
}

void __cxx_global_var_init_41()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_40(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_currentTimestamp", a2);
  }
}

void __cxx_global_var_init_3_40(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_previousTimestamp", a2);
  }
}

void __cxx_global_var_init_4_36(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)114,(char)101,(char)108,(char)101,(char)97,(char)115,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_release", a2);
  }
}

void __cxx_global_var_init_5_36(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)97,(char)99,(char)116,(char)105,(char)118,(char)97,(char)116,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_activation", a2);
  }
}

void __cxx_global_var_init_6_36(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)101,(char)97,(char)114,(char)108,(char)105,(char)101,(char)115,(char)116,(char)78,(char)111,(char)110,(char)68,(char)105,(char)118,(char)105,(char)110,(char)103,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_earliestNonDivingTimestamp", a2);
  }
}

void __cxx_global_var_init_7_36(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)100,(char)105,(char)118,(char)105,(char)110,(char)103,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)67,(char)104,(char)97,(char)110,(char)103,(char)101,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_divingButtonChangeTimestamp", a2);
  }
}

void __cxx_global_var_init_8_37(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)105,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_min", a2);
  }
}

void __cxx_global_var_init_9_22(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_max", a2);
  }
}

void __cxx_global_var_init_10_22(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)66,(char)114,(char)101,(char)97,(char)107,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerBreakTouch_max", a2);
  }
}

void __cxx_global_var_init_11_18(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)82,(char)101,(char)115,(char)101,(char)116>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentReset", a2);
  }
}

void __cxx_global_var_init_12_18(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)65,(char)99,(char)116,(char)105,(char)118,(char)105,(char)116,(char)121>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentButtonActivity", a2);
  }
}

void __cxx_global_var_init_13_18(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_firstFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_14_18(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_firstFingerCleanStartInRange", a2);
  }
}

void __cxx_global_var_init_15_27(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerCleanStartInRange", a2);
  }
}

void __cxx_global_var_init_16_27(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_17_27(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_previousRecentFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_18_27(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)78,(char)111,(char)110,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)100,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentNonThumbTouchdown", a2);
  }
}

void __cxx_global_var_init_19_27(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_restingThumbTouchDown", a2);
  }
}

void __cxx_global_var_init_20_27(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)84,(char)119,(char)111,(char)79,(char)114,(char)77,(char)111,(char)114,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentTwoOrMoreFingersTouching", a2);
  }
}

void __cxx_global_var_init_21_28(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)118,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFiveFingersTouching", a2);
  }
}

void __cxx_global_var_init_22_28(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)76,(char)105,(char)102,(char)116,(char)111,(char)102,(char)102>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerLiftoff", a2);
  }
}

void __cxx_global_var_init_23_28(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)69,(char)110,(char)100>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerEnd", a2);
  }
}

void __cxx_global_var_init_24_28(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentScrollZoom", a2);
  }
}

void __cxx_global_var_init_25_27(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)119,(char)105,(char)116,(char)99,(char)104>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentChordSwitch", a2);
  }
}

void __cxx_global_var_init_26_27(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentChordSlide", a2);
  }
}

void __cxx_global_var_init_27_26(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109,(char)83,(char)108,(char)105,(char)100,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentScrollZoomSlide", a2);
  }
}

void __cxx_global_var_init_28_26(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)108,(char)117,(char)105,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentFluidSlide", a2);
  }
}

void __cxx_global_var_init_29_26(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)101,(char)120,(char)99,(char)101,(char)115,(char)115,(char)84,(char)97,(char)112,(char)77,(char)111,(char)116,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_excessTapMotion", a2);
  }
}

void __cxx_global_var_init_30_26(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)104,(char)97,(char)110,(char)100,(char)95,(char)99,(char)104,(char)111,(char)114,(char)100,(char)115>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"righthand_chords", a2);
  }
}

uint64_t MTChordCycling_::MTChordCycling_(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5, int a6)
{
  uint64_t v10 = MTChordTable_::MTChordTable_(a1, a2, a3);
  *(void *)uint64_t v10 = off_141AC8;
  *(void *)(v10 + 392) = a4;
  *(unsigned char *)(v10 + 40objc_storeStrong(&location, 0) = a5;
  MTChordIntegrating_::MTChordIntegrating_((MTChordIntegrating_ *)(v10 + 408));
  MTChordIntegrating_::MTChordIntegrating_((MTChordIntegrating_ *)(a1 + 816));
  MTParameterFactory_::initChordCyclingParams(a1 + 368, a6);
  MTFingerToPathMap_::~MTFingerToPathMap_((MTFingerToPathMap_ *)(a1 + 388));
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  return a1;
}

void sub_679D0(_Unwind_Exception *a1)
{
  MTChordGestureSet_::~MTChordGestureSet_(v2);
  MTChordTable_::~MTChordTable_(v1);
  _Unwind_Resume(a1);
}

uint64_t MTChordCycling_::clearChordCyclingState(MTChordCycling_ *this)
{
  MTChordIntegrating_::nullify((void **)this + 51);
  MTChordIntegrating_::nullify((void **)this + 102);
  *((void *)this + 157) = 0;
  *(_OWORD *)((char *)this + 1224) = 0u;
  *(_OWORD *)((char *)this + 124objc_storeStrong(&location, 0) = 0u;
  MTTapDragManager_::clearState(*((void *)this + 49));

  return MTChordTable_::clearChordCyclingState(this);
}

uint64_t MTChordCycling_::getCommittedFingerCount(MTChordCycling_ *this)
{
  if (*((unsigned char *)this + 672)) {
    return *((unsigned int *)this + 156);
  }
  else {
    return 0;
  }
}

BOOL MTChordCycling_::hasTriggeredFluidDock(MTChordCycling_ *this)
{
  return *((unsigned char *)this + 672)
      && (int v1 = (unsigned __int16 **)*((void *)this + 85)) != 0
      && *v1 != v1[1]
      && **v1 == 37;
}

double MTChordCycling_::selectSlideChord(MTChordCycling_ *this, MTHandStatistics_ *a2, const MTHandMotion_ *a3, __IOHIDEvent *a4, MTChordGestureSet_ *a5)
{
  uint64_t v10 = (MTChordCycling_ *)((char *)this + 408);
  MTChordIntegrating_::endChordIntegration((MTChordCycling_ *)((char *)this + 408), a2, a3, a4, this);
  if (a5)
  {
    MTChordIntegrating_::operator=(v10, (uint64_t)a5);
    *((void *)this + 153) = *((void *)a2 + 1);
    MTChordIntegrating_::beginChordIntegration(v10, a2, a3, a4, this);
    double result = *((double *)a2 + 1);
    *((double *)this + 82) = result;
  }
  return result;
}

double MTChordCycling_::selectTapChord(MTChordCycling_ *this, const MTHandStatistics_ *a2, const MTHandMotion_ *a3, MTChordGestureSet_ *a4)
{
  if (a4)
  {
    *((void *)this + 153) = *((void *)a2 + 1);
    MTChordIntegrating_::operator=((MTChordCycling_ *)((char *)this + 816), (uint64_t)a4);
    double result = *((double *)a2 + 1);
    *((double *)this + 133) = result;
  }
  return result;
}

void MTChordCycling_::handleChordLiftoff(MTChordCycling_ *this, MTHandStatistics_ *a2, const MTHandMotion_ *a3, __IOHIDEvent *a4)
{
  if (*((_DWORD *)this + 260))
  {
    uint64_t v8 = *((void *)this + 49);
    BOOL v9 = *(int *)(v8 + 24) >= 2 && *(unsigned __int8 *)(v8 + 48) > 1u
      || *((unsigned __int8 *)a2 + 211) + *((unsigned __int8 *)a2 + 186) == 1;
    (*(void (**)(MTChordCycling_ *, MTHandStatistics_ *, const MTHandMotion_ *, __IOHIDEvent *, BOOL, void))(*(void *)this + 136))(this, a2, a3, a4, v9, 0);
    MTChordIntegrating_::endChordIntegration((MTChordCycling_ *)((char *)this + 816), a2, a3, a4, this);
  }
  if (*((_DWORD *)this + 158))
  {
    MTChordIntegrating_::endChordIntegration((MTChordCycling_ *)((char *)this + 408), a2, a3, a4, this);
  }
}

BOOL MTChordCycling_::touchdownSinceTapOrExcessMotion(MTChordCycling_ *this, const MTHandStatistics_ *a2)
{
  double v2 = *((double *)a2 + 10);
  double v3 = *((double *)a2 + 1);
  double v4 = v3 - v2;
  uint64_t v5 = *((void *)this + 49);
  double v6 = v3 - *(double *)(v5 + 72);
  double v7 = v3 - *(double *)(v5 + 80);
  if (v6 < v7) {
    double v7 = v6;
  }
  return v4 < v7 && v2 > *((double *)this + 157);
}

BOOL MTChordCycling_::subsetSinceTapOrExcessMotion(MTChordCycling_ *this, const MTHandStatistics_ *a2)
{
  double v2 = *((double *)a2 + 33);
  double v3 = *((double *)a2 + 1);
  double v4 = v3 - v2;
  uint64_t v5 = *((void *)this + 49);
  double v6 = v3 - *(double *)(v5 + 72);
  double v7 = v3 - *(double *)(v5 + 80);
  if (v6 < v7) {
    double v7 = v6;
  }
  return v4 < v7 && v2 > *((double *)this + 157);
}

void MTChordCycling_::chk4excessTapMotion(MTChordCycling_ *this, const MTHandStatistics_ *a2, const MTHandMotion_ *a3)
{
  if (*((_DWORD *)this + 260) && *((_DWORD *)this + 158) && *((unsigned char *)this + 672))
  {
    double v3 = (unsigned __int16 **)*((void *)this + 85);
    if (v3 && *v3 != v3[1])
    {
      if ((**v3 & 0x80) != 0) {
        goto LABEL_20;
      }
      unsigned int v4 = **v3 - 35;
      BOOL v5 = v4 > 0x2B;
      uint64_t v6 = (1 << v4) & 0x8010000001FLL;
      if (!v5 && v6 != 0) {
        goto LABEL_20;
      }
    }
    int v8 = dword_1586A0 >= 0 ? dword_1586A0 : dword_1586A0 + 1;
    int v9 = v8 >> 1;
    int v10 = *((unsigned __int8 *)a2 + 186) >= 2u ? v9 : dword_1586A0;
    if (*((_DWORD *)this + 174) >= v10)
    {
LABEL_20:
      *((void *)this + 157) = *((void *)a2 + 1);
      MTChordIntegrating_::nullify((void **)this + 102);
    }
  }
}

uint64_t MTChordCycling_::chk4newTapChord(MTChordCycling_ *this, const MTHandStatistics_ *a2, const MTHandMotion_ *a3, MTChordGestureSet_ *a4)
{
  if (a4
    && *((double *)a2 + 10) > *((double *)a2 + 16)
    && (*(unsigned int (**)(MTChordCycling_ *, const MTHandStatistics_ *))(*(void *)this + 48))(this, a2))
  {
    int v8 = *((_DWORD *)this + 260);
    if (!v8
      || ((unsigned int v9 = *((_DWORD *)a4 + 54), v9 >= *((_DWORD *)this + 258)) || v9 < *((unsigned __int8 *)a2 + 186))
      && *((_DWORD *)a4 + 56) != v8)
    {
      (*(void (**)(MTChordCycling_ *, const MTHandStatistics_ *, const MTHandMotion_ *, MTChordGestureSet_ *))(*(void *)this + 88))(this, a2, a3, a4);
    }
  }
  int v10 = *(uint64_t (**)(MTChordCycling_ *, const MTHandStatistics_ *, const MTHandMotion_ *))(*(void *)this + 96);

  return v10(this, a2, a3);
}

BOOL MTChordCycling_::tapHasValidTimingAndStrength(MTChordCycling_ *this, const MTHandStatistics_ *a2, const MTHandMotion_ *a3, char a4)
{
  if (*((float *)a2 + 51) <= *((float *)this + 92)) {
    return 0;
  }
  double v5 = *((double *)a2 + 10);
  double v6 = *((double *)a2 + 1);
  if (v6 - v5 >= *(double *)&qword_158668
    || v5 - *((double *)a2 + 9) >= *(double *)&qword_158668 * 0.5
    || (a4 & 1) == 0 && v6 - *((double *)a2 + 33) >= *(double *)&qword_158668)
  {
    return 0;
  }
  if (*((unsigned char *)a2 + 186) && *((unsigned char *)a2 + 185)) {
    return 0;
  }
  if (v6 - v5 <= *(double *)&qword_158670 && *((unsigned char *)this + 400)) {
    return 0;
  }
  MTAbsoluteTimeGetCurrent();
  if (v9 - *((double *)a2 + 5) < *(double *)&qword_158668) {
    return 0;
  }
  MTAbsoluteTimeGetCurrent();
  if (v10 - *((double *)a2 + 6) < *(double *)&qword_158668) {
    return 0;
  }
  if (*((_DWORD *)this + 158))
  {
    if (*((_DWORD *)this + 173)) {
      return 0;
    }
    float v11 = (void *)*((void *)this + 85);
    if (v11)
    {
      if (*v11 != v11[1] && *(_WORD *)*v11 == 70) {
        return 0;
      }
    }
  }
  return (*((_DWORD *)a2 + 44) == *((_DWORD *)a2 + 45) || *((unsigned __int16 *)a2 + 108) >= 2u)
      && (!(*((unsigned __int8 *)a2 + 211) + *((unsigned __int8 *)a2 + 186)) || !*((unsigned char *)a2 + 184))
      && *((float *)a3 + 61) <= *(float *)&dword_1586E8;
}

void MTChordCycling_::processDoubleTap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 392);
  double v5 = *(double *)(a2 + 8);
  double v6 = *(double *)(v4 + 72);
  double v7 = v5 - v6;
  if (v5 - v6 < *(double *)&qword_158698 && v6 > *(double *)(v4 + 88))
  {
    int v9 = *(unsigned __int8 *)(v4 + 49);
    if (*(_DWORD *)(a1 + 1032) == v9
      && (hypotf(*(float *)(a2 + 248) - *(float *)(a2 + 240), *(float *)(a2 + 252) - *(float *)(a2 + 244)) < *(float *)(a1 + 380)
       || vabdd_f64(*(double *)(a2 + 96), *(double *)(a2 + 104)) < *(double *)&qword_1586C0)
      && (!*(unsigned char *)(a1 + 376) || v7 >= v5 - *(double *)(a2 + 136)))
    {
      if (!*(unsigned char *)(a1 + 384)
        || (v9 == *(unsigned __int8 *)(a2 + 199) ? (BOOL v13 = v9 == *(unsigned __int8 *)(a2 + 200)) : (BOOL v13 = 0), v13))
      {
        MTGesture::dispatchEvents((uint64_t *)(a1 + 880), v4, a4, 0, 0, a3, 28672, *(unsigned int *)(a1 + 1040), v5);
        uint64_t v14 = *(void *)(a1 + 392);
        *(void *)(v14 + 88) = *(void *)(a2 + 8);
        MTTapDragManager_::clearCycle(v14);
      }
    }
  }
}

void MTChordCycling_::processMultiFingerDoubleTap(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 392);
  double v7 = *(double *)(a2 + 8);
  double v8 = *(double *)(v6 + 72);
  if (v7 - v8 < *(double *)&qword_158698
    && v8 > *(double *)(v6 + 88)
    && (int v9 = *(unsigned __int8 *)(v6 + 49), *(_DWORD *)(a1 + 1032) == v9)
    && (!*(unsigned char *)(a1 + 376) || v7 - v8 >= v7 - *(double *)(a2 + 136))
    && (!*(unsigned char *)(a1 + 384)
     || (v9 == *(unsigned __int8 *)(a2 + 199) ? (BOOL v10 = v9 == *(unsigned __int8 *)(a2 + 200)) : (BOOL v10 = 0), v10)))
  {
    MTGesture::dispatchEvents((uint64_t *)(a1 + 880), v6, a4, 0, 0, (uint64_t)a3, 28672, *(unsigned int *)(a1 + 1040), v7);
    uint64_t v14 = *(void *)(a1 + 392);
    *(void *)(v14 + 88) = *(void *)(a2 + 8);
    MTTapDragManager_::clearCycle(v14);
  }
  else if (*(int *)(a1 + 1036) >= 2)
  {
    uint64_t v11 = *(void *)(a1 + 816);
    if (v11 != *(void *)(a1 + 824))
    {
      if (*(_WORD *)v11)
      {
        int v12 = *(_WORD **)(a1 + 880);
        if (v12 != *(_WORD **)(a1 + 888))
        {
          if (*v12)
          {
            if (*(_WORD *)v11 == 67)
            {
              int v13 = *(_DWORD *)(v11 + 4);
              if (v13 == 1024 || v13 == 512) {
                MTTapDragManager_::queueMultiFingerTapWaitingForDouble(*(void *)(a1 + 392), a2, a3, a4, v13);
              }
            }
          }
        }
      }
    }
  }
  uint64_t v15 = *(void *)(a1 + 392);
  int v16 = *(_DWORD *)(a1 + 1032);
  *(void *)(v15 + 72) = *(void *)(a2 + 8);
  *(unsigned char *)(v15 + 49) = v16;

  MTChordIntegrating_::nullify((void **)(a1 + 816));
}

void MTChordCycling_::handleChordTaps(MTChordCycling_ *this, const MTHandStatistics_ *a2, const MTHandMotion_ *a3, __IOHIDEvent *a4, BOOL a5, uint64_t a6)
{
  if (!*((_DWORD *)this + 260)) {
    return;
  }
  if (!(*(unsigned int (**)(MTChordCycling_ *))(*(void *)this + 48))(this)) {
    return;
  }
  if (!(*(unsigned int (**)(MTChordCycling_ *, const MTHandStatistics_ *, const MTHandMotion_ *, uint64_t))(*(void *)this + 112))(this, a2, a3, a6))return; {
  int v11 = *((_DWORD *)this + 262);
  }
  if (v11)
  {
    if ((*((_DWORD *)this + 6) & v11) == 0) {
      return;
    }
  }
  int v12 = (_WORD *)*((void *)this + 102);
  if (v12 == *((_WORD **)this + 103)) {
    goto LABEL_11;
  }
  int v13 = 0;
  if (!*v12 || (a6 & 1) != 0) {
    goto LABEL_12;
  }
  if (*((unsigned __int8 *)a2 + 211) + *((unsigned __int8 *)a2 + 186))
  {
LABEL_11:
    int v13 = 0;
  }
  else
  {
    MTGesture::dispatchEvents((uint64_t *)this + 102, *((void *)this + 49), (uint64_t)a4, 0, 0, (uint64_t)a3 + 168, 12288, *((unsigned int *)this + 260), *((double *)a2 + 1));
    int v13 = 1;
  }
LABEL_12:
  if (*((_DWORD *)this + 259) == 1)
  {
    uint64_t v14 = (_WORD *)*((void *)this + 110);
    if (v14 != *((_WORD **)this + 111)
      && *v14
      && (a6 & 1) == 0
      && *((unsigned __int8 *)a2 + 211) + *((unsigned __int8 *)a2 + 186) <= 1)
    {
      (*(void (**)(MTChordCycling_ *, const MTHandStatistics_ *, char *, __IOHIDEvent *))(*(void *)this + 120))(this, a2, (char *)a3 + 168, a4);
      int v13 = 1;
    }
  }
  if (a6 && *((double *)a2 + 10) - *((double *)a2 + 11) <= 0.09
    || *((int *)this + 259) < 2
    || (uint64_t v15 = (_WORD *)*((void *)this + 110), v15 == *((_WORD **)this + 111))
    || !*v15
    || *((float *)a3 + 89) >= 21.0
    || (double v16 = *((double *)a2 + 1),
        double v17 = v16 - *((double *)a2 + 8),
        v17 >= *(double *)&qword_158668 + *(double *)&qword_1586C8)
    || (double v18 = v16 - *((double *)a2 + 7), v17 - v18 >= *(double *)&qword_1586C8)
    || v18 - (v16 - *((double *)a2 + 10)) >= *(double *)&qword_1586C8)
  {
    if (!v13) {
      return;
    }
  }
  else
  {
    (*(void (**)(MTChordCycling_ *, const MTHandStatistics_ *, char *, __IOHIDEvent *))(*(void *)this
                                                                                                 + 128))(this, a2, (char *)a3 + 168, a4);
  }
  if (*((_DWORD *)this + 260))
  {
    uint64_t v19 = *((void *)this + 49);
    int v20 = *((_DWORD *)this + 258);
    *(void *)(v19 + 72) = *((void *)a2 + 1);
    *(unsigned char *)(v19 + 49) = v20;
    MTChordIntegrating_::nullify((void **)this + 102);
  }
}

_DWORD *MTChordCycling_::possiblyStartChordMomentum(_DWORD *this, const MTHandStatistics_ *a2, __IOHIDEvent *a3)
{
  if (*((unsigned __int8 *)a2 + 211) + *((unsigned __int8 *)a2 + 186) < *((unsigned __int8 *)a2 + 190)
                                                                                     + *((unsigned __int8 *)a2 + 187))
  {
    if (this[158]) {
      return (_DWORD *)MTChordIntegrating_::possiblyStartMomentum((MTChordIntegrating_ *)(this + 102), a2, a3, (MTChordCycling_ *)this, *((double *)a2 + 1));
    }
  }
  return this;
}

uint64_t MTChordCycling_::possiblyStopChordMomentum(uint64_t this, const MTHandStatistics_ *a2, const MTHandMotion_ *a3, __IOHIDEvent *a4)
{
  if (*(unsigned char *)(this + 1264)
    && *((unsigned __int8 *)a2 + 211) + *((unsigned __int8 *)a2 + 186) > *((unsigned __int8 *)a2 + 190)
                                                                                     + *((unsigned __int8 *)a2 + 187))
  {
    int v4 = *(_DWORD *)(this + 1268);
    if (*(_DWORD *)(this + 1276) == v4)
    {
      if (*(unsigned char *)(this + 1272)) {
        *(void *)(*(void *)(this + 392) + 8objc_storeStrong(&location, 0) = *((void *)a2 + 1);
      }
    }
    return MTDragManagerEventQueue_::stopMomentum(this, (uint64_t)a4, v4);
  }
  return this;
}

uint64_t MTChordCycling_::chk4chordCycling(MTChordCycling_ *this, const MTHandStatistics_ *a2, float32x4_t *a3, __IOHIDEvent *a4)
{
  if (*((unsigned __int8 *)a2 + 211) + *((unsigned __int8 *)a2 + 186) > *((unsigned __int8 *)a2 + 190)
                                                                                     + *((unsigned __int8 *)a2 + 187)
    && *((_DWORD *)this + 158))
  {
    MTChordIntegrating_::clearMickeysSinceLastTouchdown((uint64_t)this + 408);
  }
  (*(void (**)(MTChordCycling_ *, const MTHandStatistics_ *, float32x4_t *, __IOHIDEvent *))(*(void *)this + 160))(this, a2, a3, a4);
  (*(void (**)(MTChordCycling_ *, const MTHandStatistics_ *, __IOHIDEvent *))(*(void *)this + 152))(this, a2, a4);
  uint64_t v8 = *(void *)this;
  if (!(*((unsigned __int8 *)a2 + 298) | *((unsigned __int8 *)a2 + 186)))
  {
    int v9 = *(uint64_t (**)(MTChordCycling_ *, const MTHandStatistics_ *, float32x4_t *, __IOHIDEvent *))(v8 + 104);
    return v9(this, a2, a3, a4);
  }
  char v11 = (*(uint64_t (**)(MTChordCycling_ *, const MTHandStatistics_ *))(v8 + 24))(this, a2);
  uint64_t MatchingChord = MTChordTable_::findMatchingChord(this, v11, 0);
  uint64_t result = (*(uint64_t (**)(MTChordCycling_ *, const MTHandStatistics_ *, float32x4_t *, uint64_t))(*(void *)this + 144))(this, a2, a3, MatchingChord);
  int v13 = *((_DWORD *)this + 158);
  if (v13)
  {
    if (!MatchingChord) {
      return result;
    }
    if (*(_DWORD *)(MatchingChord + 224) == v13)
    {
      uint64_t result = MTChordGestureSet_::chordGestureSetEquals((MTChordGestureSet_ *)MatchingChord, (MTChordCycling_ *)((char *)this + 408));
      if (result) {
        return result;
      }
    }
    if (*(_DWORD *)(MatchingChord + 216) >= *((_DWORD *)this + 156))
    {
      if (*((unsigned char *)this + 672)
        && ((*((_WORD *)this + 318) & 0x20) == 0
         || ((*(_WORD *)(MatchingChord + 228) & 2) == 0
          || (*((_DWORD *)a2 + 41) - 3000) >= 0xFFFFFC18
          && *((_DWORD *)this + 7) != 2
          && *((unsigned __int8 *)a2 + 298) != *((unsigned __int8 *)a2 + 302))
         && *((double *)a2 + 1) - *((double *)a2 + 7) >= 0.09))
      {
        return result;
      }
    }
    else if (*((unsigned char *)this + 672) {
           || (*((_DWORD *)a2 + 41) - 3000) >= 0xFFFFFC18 && *((_DWORD *)this + 7) != 2)
    }
    {
      __int16 v14 = *((_WORD *)this + 318);
      if ((v14 & 0x10) == 0
        || (*(_WORD *)(MatchingChord + 228) & 1) == 0
        || (v14 & 0x80) == 0 && *((double *)a2 + 1) - *((double *)a2 + 16) <= *(double *)&gTimingPrefs_ * 0.5)
      {
        return result;
      }
      uint64_t v15 = (unsigned __int16 **)*((void *)this + 85);
      if (v15)
      {
        if (*v15 != v15[1] && **v15 - 35 < 5) {
          return result;
        }
      }
    }
  }
  else
  {
    if (!MatchingChord) {
      return result;
    }
    uint64_t result = MTChordGestureSet_::isChordReadyToIntegrate((MTChordGestureSet_ *)MatchingChord, a2, a3);
    if (!result) {
      return result;
    }
  }
  double v16 = *(uint64_t (**)(MTChordCycling_ *, const MTHandStatistics_ *, float32x4_t *, __IOHIDEvent *, uint64_t))(*(void *)this + 80);

  return v16(this, a2, a3, a4, MatchingChord);
}

double MTChordCycling_::parseHandGesturesCreateHIDEvents(MTChordCycling_ *this, const MTHandStatistics_ *a2, const MTHandMotion_ *a3, __IOHIDEvent *a4)
{
  (*(void (**)(MTChordCycling_ *))(*(void *)this + 168))(this);
  if (*((_DWORD *)this + 158))
  {
    MTChordIntegrating_::continueChordIntegration((MTChordCycling_ *)((char *)this + 408), a2, a3, a4, this, result, v9, v10);
    return MTChordIntegrating_::decayMomentumFilters((MTChordCycling_ *)((char *)this + 408), a2);
  }
  return result;
}

uint64_t MTChordCycling_::shouldBlockClicks(MTChordCycling_ *this, const MTHandStatistics_ *a2, const MTHandMotion_ *a3)
{
  float v3 = *((float *)a3 + 62);
  double v4 = 0.0;
  if (v3 > 1.0)
  {
    double v4 = 0.5;
    if (v3 < 100.0) {
      double v4 = (float)((float)(v3 + -1.0) / 99.0) * 0.5;
    }
  }
  double v5 = *((double *)a2 + 1);
  int v6 = *((_DWORD *)this + 158);
  if (!v6) {
    goto LABEL_12;
  }
  double v7 = (unsigned __int16 **)*((void *)this + 85);
  if (!v7)
  {
    int v6 = 0;
    goto LABEL_13;
  }
  int v6 = *v7 != v7[1] && **v7 == 69;
  if (*v7 == v7[1]) {
LABEL_12:
  }
    LODWORD(v7) = 0;
  else {
    LODWORD(v7) = **v7 == 71;
  }
LABEL_13:
  unsigned int v8 = v6 | v7;
  if (v5 - *((double *)this + 155) <= v4) {
    unsigned int v8 = 1;
  }
  if (v5 - *((double *)this + 156) <= v4) {
    return 1;
  }
  else {
    return v8;
  }
}

void __cxx_global_var_init_42()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_41(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_currentTimestamp", a2);
  }
}

void __cxx_global_var_init_3_41(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_previousTimestamp", a2);
  }
}

void __cxx_global_var_init_4_37(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)114,(char)101,(char)108,(char)101,(char)97,(char)115,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_release", a2);
  }
}

void __cxx_global_var_init_5_37(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)97,(char)99,(char)116,(char)105,(char)118,(char)97,(char)116,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_activation", a2);
  }
}

void __cxx_global_var_init_6_37(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)101,(char)97,(char)114,(char)108,(char)105,(char)101,(char)115,(char)116,(char)78,(char)111,(char)110,(char)68,(char)105,(char)118,(char)105,(char)110,(char)103,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_earliestNonDivingTimestamp", a2);
  }
}

void __cxx_global_var_init_7_37(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)100,(char)105,(char)118,(char)105,(char)110,(char)103,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)67,(char)104,(char)97,(char)110,(char)103,(char)101,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_divingButtonChangeTimestamp", a2);
  }
}

void __cxx_global_var_init_8_38(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)105,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_min", a2);
  }
}

void __cxx_global_var_init_9_23(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_max", a2);
  }
}

void __cxx_global_var_init_10_23(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)66,(char)114,(char)101,(char)97,(char)107,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerBreakTouch_max", a2);
  }
}

void __cxx_global_var_init_11_19(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)82,(char)101,(char)115,(char)101,(char)116>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentReset", a2);
  }
}

void __cxx_global_var_init_12_19(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)65,(char)99,(char)116,(char)105,(char)118,(char)105,(char)116,(char)121>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentButtonActivity", a2);
  }
}

void __cxx_global_var_init_13_19(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_firstFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_14_19(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_firstFingerCleanStartInRange", a2);
  }
}

void __cxx_global_var_init_15_28(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerCleanStartInRange", a2);
  }
}

void __cxx_global_var_init_16_28(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_17_28(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_previousRecentFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_18_28(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)78,(char)111,(char)110,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)100,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentNonThumbTouchdown", a2);
  }
}

void __cxx_global_var_init_19_28(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_restingThumbTouchDown", a2);
  }
}

void __cxx_global_var_init_20_28(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)84,(char)119,(char)111,(char)79,(char)114,(char)77,(char)111,(char)114,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentTwoOrMoreFingersTouching", a2);
  }
}

void __cxx_global_var_init_21_29(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)118,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFiveFingersTouching", a2);
  }
}

void __cxx_global_var_init_22_29(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)76,(char)105,(char)102,(char)116,(char)111,(char)102,(char)102>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerLiftoff", a2);
  }
}

void __cxx_global_var_init_23_29(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)69,(char)110,(char)100>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerEnd", a2);
  }
}

void __cxx_global_var_init_24_29(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentScrollZoom", a2);
  }
}

void __cxx_global_var_init_25_28(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)119,(char)105,(char)116,(char)99,(char)104>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentChordSwitch", a2);
  }
}

void __cxx_global_var_init_26_28(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentChordSlide", a2);
  }
}

void __cxx_global_var_init_27_27(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109,(char)83,(char)108,(char)105,(char)100,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentScrollZoomSlide", a2);
  }
}

void __cxx_global_var_init_28_27(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)108,(char)117,(char)105,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentFluidSlide", a2);
  }
}

void __cxx_global_var_init_29_27(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)101,(char)120,(char)99,(char)101,(char)115,(char)115,(char)84,(char)97,(char)112,(char)77,(char)111,(char)116,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_excessTapMotion", a2);
  }
}

void __cxx_global_var_init_30_27(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)104,(char)97,(char)110,(char)100,(char)95,(char)99,(char)104,(char)111,(char)114,(char)100,(char)115>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"righthand_chords", a2);
  }
}

double mtgp_InitUSBKeyNames()
{
  gUSBKeyNames = @"NULL";
  unk_1592C0 = @"ErrorRollOver";
  qword_1592C8 = @"POSTFail";
  unk_1592D0 = @"ErrorUndefined";
  qword_1592D8 = @"A";
  unk_1592E0 = @"B";
  qword_1592E8 = @"C";
  unk_1592F0 = @"D";
  qword_1592F8 = @"E";
  unk_159300 = @"F";
  qword_159308 = @"G";
  unk_159310 = @"H";
  qword_159318 = @"I";
  unk_159320 = @"J";
  qword_159328 = @"K";
  unk_159330 = @"L";
  qword_159338 = @"M";
  unk_159340 = @"N";
  qword_159348 = @"O";
  unk_159350 = @"P";
  qword_159358 = @"Q";
  unk_159360 = @"R";
  qword_159368 = @"S";
  unk_159370 = @"T";
  qword_159378 = @"U";
  unk_159380 = @"V";
  qword_159388 = @"W";
  unk_159390 = @"X";
  qword_159398 = @"Y";
  unk_1593A0 = @"Z";
  qword_1593A8 = @"1";
  unk_1593B0 = @"2";
  qword_1593B8 = @"3";
  unk_1593C0 = @"4";
  qword_1593C8 = @"5";
  unk_1593D0 = @"6";
  qword_1593D8 = @"7";
  unk_1593E0 = @"8";
  qword_1593E8 = @"9";
  unk_1593F0 = @"0";
  qword_1593F8 = @"Enter";
  unk_159400 = @"Escape";
  qword_159408 = @"BackSpace";
  unk_159410 = @"Tab";
  qword_159418 = @"Space";
  unk_159420 = @"-";
  qword_159428 = @"=";
  unk_159430 = @"[";
  qword_159438 = @"]";
  unk_159440 = @"\\"";
  qword_159448 = @"#";
  unk_159450 = @";";
  qword_159458 = @"'";
  qword_159468 = @",";
  unk_159470 = @".";
  qword_159478 = @"/";
  unk_159480 = @"CapsLock";
  qword_159488 = @"F1";
  unk_159490 = @"F2";
  qword_159498 = @"F3";
  unk_1594A0 = @"F4";
  qword_1594A8 = @"F5";
  unk_1594B0 = @"F6";
  qword_1594B8 = @"F7";
  qword_1594C0 = @"F8";
  qword_1594C8 = @"F9";
  qword_1594D0 = @"F10";
  qword_1594D8 = @"F11";
  qword_1594E0 = @"F12";
  qword_1594E8 = @"PrintScreen";
  qword_1594F0 = @"ScrollLock";
  qword_1594F8 = @"Pause";
  qword_159500 = @"Insert";
  qword_159508 = @"Home";
  qword_159510 = @"PageUp";
  qword_159518 = @"Delete";
  qword_159520 = @"End";
  qword_159528 = @"PageDown";
  qword_159530 = @"Right";
  qword_159538 = @"Left";
  qword_159540 = @"Down";
  qword_159548 = @"Up";
  qword_159550 = @"NumLock";
  qword_159558 = @"Numpad/";
  qword_159560 = @"Numpad*";
  qword_159568 = @"Numpad-";
  qword_159570 = @"Numpad+";
  qword_159578 = @"NumpadEnter";
  qword_159580 = @"Numpad1";
  qword_159588 = @"Numpad2";
  qword_159590 = @"Numpad3";
  qword_159598 = @"Numpad4";
  qword_1595A0 = @"Numpad5";
  qword_1595A8 = @"Numpad6";
  qword_1595B0 = @"Numpad7";
  qword_1595B8 = @"Numpad8";
  qword_1595C0 = @"Numpad9";
  qword_1595C8 = @"Numpad0";
  qword_1595D0 = @"Numpad.";
  qword_1595D8 = @"NonUS\\|";
  qword_1595E0 = @"Application";
  qword_1595E8 = @"Power";
  qword_1595F0 = @"Keypad=";
  qword_1595F8 = @"F13";
  qword_159600 = @"F14";
  qword_159608 = @"F15";
  qword_159610 = @"F16";
  qword_159618 = @"F17";
  qword_159620 = @"F18";
  qword_159628 = @"F19";
  qword_159630 = @"F20";
  qword_159638 = @"F21";
  qword_159640 = @"F22";
  qword_159648 = @"F23";
  qword_159650 = @"F24";
  qword_159658 = @"Execute";
  qword_159660 = @"Help";
  qword_159668 = @"Menu";
  qword_159670 = @"Select";
  qword_159678 = @"Stop";
  qword_159680 = @"Again";
  qword_159688 = @"Undo";
  qword_159690 = @"Cut";
  qword_159698 = @"Copy";
  qword_1596A0 = @"Paste";
  qword_1596A8 = @"Find";
  qword_1596B0 = @"Mute";
  qword_1596B8 = @"VolumeUp";
  qword_1596C0 = @"VolumeDown";
  qword_1596C8 = @"LockingCapsLock";
  qword_1596D0 = @"LockingNumLock";
  qword_1596D8 = @"LockingScrollLock";
  qword_1596E0 = @"Keypad,";
  qword_1596E8 = @"Keypad=";
  qword_1596F0 = @"International1";
  qword_1596F8 = @"International2";
  qword_159700 = @"International3";
  qword_159708 = @"International4";
  qword_159710 = @"International5";
  qword_159718 = @"International6";
  qword_159720 = @"International7";
  qword_159728 = @"International8";
  qword_159730 = @"International9";
  qword_159738 = @"LANG1";
  qword_159740 = @"LANG2";
  qword_159748 = @"LANG3";
  qword_159750 = @"LANG4";
  qword_159758 = @"LANG5";
  qword_159760 = @"LANG6";
  qword_159768 = @"LANG7";
  qword_159770 = @"LANG8";
  qword_159778 = @"LANG9";
  qword_159780 = @"AlternateErase";
  qword_159788 = @"SysReq_Attention";
  qword_159790 = @"Cancel";
  qword_159798 = @"Clear";
  qword_1597A0 = @"Prior";
  qword_1597A8 = @"Return";
  qword_1597B0 = @"Separator";
  qword_1597B8 = @"Out";
  qword_1597C0 = @"Oper";
  qword_1597C8 = @"Clear_Again";
  qword_1597D0 = @"CrSel_Props";
  qword_1597D8 = @"ExSel";
  qword_1599B0 = 0;
  double result = 0.0;
  xmmword_159990 = 0u;
  unk_1599A0 = 0u;
  xmmword_159970 = 0u;
  unk_159980 = 0u;
  xmmword_159950 = 0u;
  unk_159960 = 0u;
  xmmword_159930 = 0u;
  unk_159940 = 0u;
  xmmword_159910 = 0u;
  unk_159920 = 0u;
  xmmword_1598F0 = 0u;
  unk_159900 = 0u;
  xmmword_1598D0 = 0u;
  unk_1598E0 = 0u;
  xmmword_1598B0 = 0u;
  unk_1598C0 = 0u;
  xmmword_159890 = 0u;
  unk_1598A0 = 0u;
  xmmword_159870 = 0u;
  unk_159880 = 0u;
  xmmword_159850 = 0u;
  unk_159860 = 0u;
  xmmword_159830 = 0u;
  unk_159840 = 0u;
  xmmword_159810 = 0u;
  unk_159820 = 0u;
  xmmword_1597F0 = 0u;
  unk_159800 = 0u;
  xmmword_1597E0 = 0u;
  qword_1599B8 = @"LeftCtrl";
  qword_1599C0 = @"LeftShift";
  qword_1599C8 = @"LeftAlt";
  qword_1599D0 = @"LeftGUI";
  qword_1599D8 = @"RightCtrl";
  qword_1599E0 = @"RightShift";
  qword_1599E8 = @"RightAlt";
  qword_1599F0 = @"RightGUI";
  xmmword_1599F8 = 0u;
  xmmword_159A08 = 0u;
  xmmword_159A18 = 0u;
  xmmword_159A28 = 0u;
  xmmword_159A38 = 0u;
  xmmword_159A48 = 0u;
  xmmword_159A58 = 0u;
  xmmword_159A68 = 0u;
  xmmword_159A78 = 0u;
  xmmword_159A88 = 0u;
  xmmword_159A98 = 0u;
  xmmword_159AA8 = 0u;
  return result;
}

BOOL MTChordCycling_::slideGestureOngoing(MTChordCycling_ *this, double a2)
{
  return *((_DWORD *)this + 158) && *((unsigned char *)this + 672) && *((unsigned char *)this + 675) == 0;
}

BOOL MTGestureConfig_::slideOrDragOngoing(MTGestureConfig_ *this, double a2, int a3)
{
  uint64_t v6 = *((void *)this + 7);
  if (v6 && ((*(uint64_t (**)(uint64_t, double))(*(void *)v6 + 40))(v6, a2) & 1) != 0) {
    return 1;
  }
  unsigned int v8 = (MTTapDragManager_ *)*((void *)this + 9);

  return MTTapDragManager_::shouldSustainDrag(v8, a2, a3);
}

MTChordGestureSet_ *MTGestureConfig_::copyChordIntoHandTable(uint64_t a1, int a2, MTChordGestureSet_ *a3)
{
  if (a2 == 1 && (float v3 = *(MTChordTable_ **)(a1 + 56)) != 0) {
    return MTChordTable_::copyChordIntoTable(v3, a3);
  }
  else {
    return a3;
  }
}

uint64_t MTGestureConfig_::getChordTableForHand(uint64_t a1, int a2)
{
  if (a2 == 1) {
    return *(void *)(a1 + 56);
  }
  else {
    return 0;
  }
}

void MTGestureConfig_::~MTGestureConfig_(MTGestureConfig_ *this)
{
  *(void *)this = off_141BA0;
  double v2 = (MTChordTable_ *)*((void *)this + 7);
  if (v2)
  {
    MTChordTable_::clearAllChordsInTable(v2);
    uint64_t v3 = *((void *)this + 7);
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      *((void *)this + 7) = 0;
    }
  }
  uint64_t v4 = *((void *)this + 8);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *((void *)this + 8) = 0;
  }
  std::__tree<std::__value_type<std::string,std::vector<MTActionEvent_>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<MTActionEvent_>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<MTActionEvent_>>>>::destroy((uint64_t)this + 32, *((void **)this + 5));
  std::__tree<std::__value_type<std::string,MTGestureMotionParams>,std::__map_value_compare<std::string,std::__value_type<std::string,MTGestureMotionParams>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTGestureMotionParams>>>::destroy((uint64_t)this + 8, *((char **)this + 2));
}

{
  uint64_t vars8;

  MTGestureConfig_::~MTGestureConfig_(this);

  operator delete();
}

void MTGestureConfig_::clearAllChords(MTGestureConfig_ *this)
{
  int v1 = (MTChordTable_ *)*((void *)this + 7);
  if (v1) {
    MTChordTable_::clearAllChordsInTable(v1);
  }
}

void MTGestureConfig_::MTGestureConfig_(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  a1[2] = 0;
  a1[1] = a1 + 2;
  *a1 = off_141BA0;
  a1[3] = 0;
  a1[5] = 0;
  a1[4] = a1 + 5;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = a5;
  mtgp_InitUSBKeyNames();
  if ((a2 - 1000) <= 0x3E7) {
    operator new();
  }
  if ((a2 - 2000) <= 0x3E7) {
    operator new();
  }
  operator new();
}

void sub_69DCC()
{
}

void std::__tree<std::__value_type<std::string,MTGestureMotionParams>,std::__map_value_compare<std::string,std::__value_type<std::string,MTGestureMotionParams>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTGestureMotionParams>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,MTGestureMotionParams>,std::__map_value_compare<std::string,std::__value_type<std::string,MTGestureMotionParams>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTGestureMotionParams>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,MTGestureMotionParams>,std::__map_value_compare<std::string,std::__value_type<std::string,MTGestureMotionParams>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTGestureMotionParams>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::string,std::vector<MTActionEvent_>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<MTActionEvent_>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<MTActionEvent_>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<MTActionEvent_>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<MTActionEvent_>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<MTActionEvent_>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<MTActionEvent_>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<MTActionEvent_>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<MTActionEvent_>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<MTActionEvent_>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<MTActionEvent_>>,0>(uint64_t a1)
{
  double v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void __cxx_global_var_init_43()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_42(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_currentTimestamp", a2);
  }
}

void __cxx_global_var_init_3_42(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_previousTimestamp", a2);
  }
}

void __cxx_global_var_init_4_38(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)114,(char)101,(char)108,(char)101,(char)97,(char)115,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_release", a2);
  }
}

void __cxx_global_var_init_5_38(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)97,(char)99,(char)116,(char)105,(char)118,(char)97,(char)116,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_activation", a2);
  }
}

void __cxx_global_var_init_6_38(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)101,(char)97,(char)114,(char)108,(char)105,(char)101,(char)115,(char)116,(char)78,(char)111,(char)110,(char)68,(char)105,(char)118,(char)105,(char)110,(char)103,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_earliestNonDivingTimestamp", a2);
  }
}

void __cxx_global_var_init_7_38(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)100,(char)105,(char)118,(char)105,(char)110,(char)103,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)67,(char)104,(char)97,(char)110,(char)103,(char)101,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_divingButtonChangeTimestamp", a2);
  }
}

void __cxx_global_var_init_8_39(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)105,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_min", a2);
  }
}

void __cxx_global_var_init_9_24(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_max", a2);
  }
}

void __cxx_global_var_init_10_24(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)66,(char)114,(char)101,(char)97,(char)107,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerBreakTouch_max", a2);
  }
}

void __cxx_global_var_init_11_20(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)82,(char)101,(char)115,(char)101,(char)116>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentReset", a2);
  }
}

void __cxx_global_var_init_12_20(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)65,(char)99,(char)116,(char)105,(char)118,(char)105,(char)116,(char)121>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentButtonActivity", a2);
  }
}

void __cxx_global_var_init_13_20(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_firstFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_14_20(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_firstFingerCleanStartInRange", a2);
  }
}

void __cxx_global_var_init_15_29(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerCleanStartInRange", a2);
  }
}

void __cxx_global_var_init_16_29(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_17_29(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_previousRecentFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_18_29(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)78,(char)111,(char)110,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)100,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentNonThumbTouchdown", a2);
  }
}

void __cxx_global_var_init_19_29(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_restingThumbTouchDown", a2);
  }
}

void __cxx_global_var_init_20_29(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)84,(char)119,(char)111,(char)79,(char)114,(char)77,(char)111,(char)114,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentTwoOrMoreFingersTouching", a2);
  }
}

void __cxx_global_var_init_21_30(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)118,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFiveFingersTouching", a2);
  }
}

void __cxx_global_var_init_22_30(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)76,(char)105,(char)102,(char)116,(char)111,(char)102,(char)102>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerLiftoff", a2);
  }
}

void __cxx_global_var_init_23_30(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)69,(char)110,(char)100>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerEnd", a2);
  }
}

void __cxx_global_var_init_24_30(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentScrollZoom", a2);
  }
}

void __cxx_global_var_init_25_29(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)119,(char)105,(char)116,(char)99,(char)104>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentChordSwitch", a2);
  }
}

void __cxx_global_var_init_26_29(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentChordSlide", a2);
  }
}

void __cxx_global_var_init_27_28(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109,(char)83,(char)108,(char)105,(char)100,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentScrollZoomSlide", a2);
  }
}

void __cxx_global_var_init_28_28(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)108,(char)117,(char)105,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentFluidSlide", a2);
  }
}

void __cxx_global_var_init_29_28(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)101,(char)120,(char)99,(char)101,(char)115,(char)115,(char)84,(char)97,(char)112,(char)77,(char)111,(char)116,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_excessTapMotion", a2);
  }
}

void __cxx_global_var_init_30_28(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)104,(char)97,(char)110,(char)100,(char)95,(char)99,(char)104,(char)111,(char)114,(char)100,(char)115>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"righthand_chords", a2);
  }
}

void sub_6A8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_6A9BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MTTrackpadUberAlg;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_6B8D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_6BD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_6BF64(_Unwind_Exception *a1)
{
  MTForceBehavior_::~MTForceBehavior_(v1);
  _Unwind_Resume(a1);
}

void MTForceBehavior_::addSkippedActivationStage(void *a1, int a2)
{
  uint64_t v4 = (uint64_t)(a1 + 8);
  unint64_t v5 = a1[8];
  uint64_t v6 = (char *)a1[7];
  if ((unint64_t)v6 >= v5)
  {
    unsigned int v8 = (char *)a1[6];
    uint64_t v9 = (v6 - v8) >> 2;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = v5 - (void)v8;
    unint64_t v11 = (uint64_t)(v5 - (void)v8) >> 1;
    if (v11 <= v9 + 1) {
      unint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12)
    {
      int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v4, v12);
      unsigned int v8 = (char *)a1[6];
      uint64_t v6 = (char *)a1[7];
    }
    else
    {
      int v13 = 0;
    }
    __int16 v14 = &v13[4 * v9];
    uint64_t v15 = &v13[4 * v12];
    *(_DWORD *)__int16 v14 = a2;
    double v7 = v14 + 4;
    while (v6 != v8)
    {
      int v16 = *((_DWORD *)v6 - 1);
      v6 -= 4;
      *((_DWORD *)v14 - MTHandMotion_::clearHandMotion(this, 1) = v16;
      v14 -= 4;
    }
    a1[6] = v14;
    a1[7] = v7;
    a1[8] = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v6 = a2;
    double v7 = v6 + 4;
  }
  a1[7] = v7;
}

void MTForceBehavior_::addSkippedReleaseStage(void *a1, int a2)
{
  uint64_t v4 = (uint64_t)(a1 + 11);
  unint64_t v5 = a1[11];
  uint64_t v6 = (char *)a1[10];
  if ((unint64_t)v6 >= v5)
  {
    unsigned int v8 = (char *)a1[9];
    uint64_t v9 = (v6 - v8) >> 2;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = v5 - (void)v8;
    unint64_t v11 = (uint64_t)(v5 - (void)v8) >> 1;
    if (v11 <= v9 + 1) {
      unint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12)
    {
      int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v4, v12);
      unsigned int v8 = (char *)a1[9];
      uint64_t v6 = (char *)a1[10];
    }
    else
    {
      int v13 = 0;
    }
    __int16 v14 = &v13[4 * v9];
    uint64_t v15 = &v13[4 * v12];
    *(_DWORD *)__int16 v14 = a2;
    double v7 = v14 + 4;
    while (v6 != v8)
    {
      int v16 = *((_DWORD *)v6 - 1);
      v6 -= 4;
      *((_DWORD *)v14 - MTHandMotion_::clearHandMotion(this, 1) = v16;
      v14 -= 4;
    }
    a1[9] = v14;
    a1[10] = v7;
    a1[11] = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v6 = a2;
    double v7 = v6 + 4;
  }
  a1[10] = v7;
}

void sub_6C5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, MTForceBehavior_ *a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_6C820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

HSUtil::Encoder *HSUtil::Encoder::encodeCodable<MTHandStatistics_>(HSUtil::Encoder *result, const CoderKey *a2, MTHandStatistics_ *a3)
{
  if (!*(_DWORD *)result)
  {
    uint64_t v4 = result;
    double result = (HSUtil::Encoder *)HSUtil::Encoder::_encodeKey(result, a2);
    if (!*(_DWORD *)v4)
    {
      double result = (HSUtil::Encoder *)MTHandStatistics_::encode(a3, v4);
      if (!*(_DWORD *)v4 && (result & 1) == 0) {
        *(_DWORD *)uint64_t v4 = 10;
      }
    }
  }
  return result;
}

HSUtil::Encoder *HSUtil::Encoder::encodeCodable<MTForceManagement_>(HSUtil::Encoder *result, const CoderKey *a2, MTForceManagement_ *a3)
{
  if (!*(_DWORD *)result)
  {
    uint64_t v4 = result;
    double result = (HSUtil::Encoder *)HSUtil::Encoder::_encodeKey(result, a2);
    if (!*(_DWORD *)v4)
    {
      double result = (HSUtil::Encoder *)MTForceManagement_::encode(a3, v4);
      if (!*(_DWORD *)v4 && (result & 1) == 0) {
        *(_DWORD *)uint64_t v4 = 10;
      }
    }
  }
  return result;
}

HSUtil::Encoder *HSUtil::Encoder::encodeCodable<MTPListGestureConfig_>(HSUtil::Encoder *result, const CoderKey *a2, MTGestureConfig_ *a3)
{
  if (!*(_DWORD *)result)
  {
    uint64_t v4 = result;
    double result = (HSUtil::Encoder *)HSUtil::Encoder::_encodeKey(result, a2);
    if (!*(_DWORD *)v4)
    {
      double result = (HSUtil::Encoder *)MTGestureConfig_::encode(a3, v4);
      if (!*(_DWORD *)v4 && (result & 1) == 0) {
        *(_DWORD *)uint64_t v4 = 10;
      }
    }
  }
  return result;
}

void sub_6CC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

const CoderKey *HSUtil::Decoder::decodeCodable<MTHandStatistics_>(const CoderKey *result, CoderKey *a2, MTHandStatistics_ *a3)
{
  if (SLODWORD(result->var0) <= 4)
  {
    uint64_t v4 = (uint64_t)result;
    unint64_t v5 = *(void *)&result[4].var1;
    double result = HSUtil::Decoder::_findKey(result, &v5, a2);
    if (!*(_DWORD *)v4)
    {
      double result = (const CoderKey *)HSUtil::Decoder::_readCodable<MTHandStatistics_>(v4, &v5, a3);
      if (*(_DWORD *)v4 == 3) {
        *(_DWORD *)uint64_t v4 = 13;
      }
      else {
        *(void *)(v4 + 72) = v5;
      }
    }
  }
  return result;
}

const CoderKey *HSUtil::Decoder::decodeCodable<MTPathStates_>(const CoderKey *result, CoderKey *a2, MTPathStates_ *a3)
{
  if (SLODWORD(result->var0) <= 4)
  {
    uint64_t v4 = (uint64_t)result;
    unint64_t v5 = *(void *)&result[4].var1;
    double result = HSUtil::Decoder::_findKey(result, &v5, a2);
    if (!*(_DWORD *)v4)
    {
      double result = (const CoderKey *)HSUtil::Decoder::_readCodable<MTPathStates_>(v4, &v5, a3);
      if (*(_DWORD *)v4 == 3) {
        *(_DWORD *)uint64_t v4 = 13;
      }
      else {
        *(void *)(v4 + 72) = v5;
      }
    }
  }
  return result;
}

const CoderKey *HSUtil::Decoder::decodeCodable<MTForceManagement_>(const CoderKey *result, CoderKey *a2, MTForceManagement_ *a3)
{
  if (SLODWORD(result->var0) <= 4)
  {
    uint64_t v4 = (uint64_t)result;
    unint64_t v5 = *(void *)&result[4].var1;
    double result = HSUtil::Decoder::_findKey(result, &v5, a2);
    if (!*(_DWORD *)v4)
    {
      double result = (const CoderKey *)HSUtil::Decoder::_readCodable<MTForceManagement_>(v4, &v5, a3);
      if (*(_DWORD *)v4 == 3) {
        *(_DWORD *)uint64_t v4 = 13;
      }
      else {
        *(void *)(v4 + 72) = v5;
      }
    }
  }
  return result;
}

const CoderKey *HSUtil::Decoder::decodeCodable<MTPListGestureConfig_>(const CoderKey *result, CoderKey *a2, MTGestureConfig_ *a3)
{
  if (SLODWORD(result->var0) <= 4)
  {
    uint64_t v4 = (uint64_t)result;
    unint64_t v5 = *(void *)&result[4].var1;
    double result = HSUtil::Decoder::_findKey(result, &v5, a2);
    if (!*(_DWORD *)v4)
    {
      double result = (const CoderKey *)HSUtil::Decoder::_readCodable<MTPListGestureConfig_>(v4, &v5, a3);
      if (*(_DWORD *)v4 == 3) {
        *(_DWORD *)uint64_t v4 = 13;
      }
      else {
        *(void *)(v4 + 72) = v5;
      }
    }
  }
  return result;
}

void *std::allocate_shared[abi:ne180100]<MTPathStates_,std::allocator<MTPathStates_>,MTSurfaceDimensions_ &,MTParserType &,MTParserOptions &,BOOL &,int,void>@<X0>(uint64_t a1@<X1>, unsigned int *a2@<X2>, unsigned int *a3@<X3>, unsigned __int8 *a4@<X4>, unsigned int *a5@<X5>, void *a6@<X8>)
{
  unint64_t v12 = operator new(0x360uLL);
  double result = std::__shared_ptr_emplace<MTPathStates_>::__shared_ptr_emplace[abi:ne180100]<MTSurfaceDimensions_ &,MTParserType &,MTParserOptions &,BOOL &,int,std::allocator<MTPathStates_>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_6D004(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<MTPathStates_>::__shared_ptr_emplace[abi:ne180100]<MTSurfaceDimensions_ &,MTParserType &,MTParserOptions &,BOOL &,int,std::allocator<MTPathStates_>,0>(void *a1, uint64_t a2, unsigned int *a3, unsigned int *a4, unsigned __int8 *a5, unsigned int *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_141BE8;
  MTPathStates_::MTPathStates_(a1 + 3, a2, *a3, *a4, *a5, *a6);
  return a1;
}

void sub_6D070(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MTPathStates_>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_141BE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MTPathStates_>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_141BE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t std::__shared_ptr_emplace<MTPathStates_>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void *std::allocate_shared[abi:ne180100]<MTHandStatistics_,std::allocator<MTHandStatistics_>,MTHandIdentity,char *,MTParserType &,MTParserOptions &,void>@<X0>(int *a1@<X1>, uint64_t *a2@<X2>, int *a3@<X3>, int *a4@<X4>, void *a5@<X8>)
{
  unint64_t v10 = operator new(0x158uLL);
  double result = std::__shared_ptr_emplace<MTHandStatistics_>::__shared_ptr_emplace[abi:ne180100]<MTHandIdentity,char *,MTParserType &,MTParserOptions &,std::allocator<MTHandStatistics_>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_6D188(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<MTHandStatistics_>::__shared_ptr_emplace[abi:ne180100]<MTHandIdentity,char *,MTParserType &,MTParserOptions &,std::allocator<MTHandStatistics_>,0>(void *a1, int *a2, uint64_t *a3, int *a4, int *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_141C38;
  MTHandStatistics_::MTHandStatistics_((uint64_t)(a1 + 3), *a2, *a3, *a4, *a5);
  return a1;
}

void sub_6D1F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MTHandStatistics_>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_141C38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MTHandStatistics_>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_141C38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t std::__shared_ptr_emplace<MTHandStatistics_>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void *std::allocate_shared[abi:ne180100]<MTHandMotion_,std::allocator<MTHandMotion_>,MTSurfaceDimensions_ &,MTParserType &,MTParserOptions &,MTHandIdentity,char const(&)[6],void>@<X0>(uint64_t a1@<X1>, unsigned int *a2@<X2>, unsigned int *a3@<X3>, unsigned int *a4@<X4>, void *a5@<X8>)
{
  unint64_t v10 = operator new(0x1A0uLL);
  double result = std::__shared_ptr_emplace<MTHandMotion_>::__shared_ptr_emplace[abi:ne180100]<MTSurfaceDimensions_ &,MTParserType &,MTParserOptions &,MTHandIdentity,char const(&)[6],std::allocator<MTHandMotion_>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_6D31C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<MTHandMotion_>::__shared_ptr_emplace[abi:ne180100]<MTSurfaceDimensions_ &,MTParserType &,MTParserOptions &,MTHandIdentity,char const(&)[6],std::allocator<MTHandMotion_>,0>(void *a1, uint64_t a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_141C88;
  MTHandMotion_::MTHandMotion_(a1 + 3, a2, *a3, *a4, *a5);
  return a1;
}

void sub_6D384(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MTHandMotion_>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_141C88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MTHandMotion_>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_141C88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t std::__shared_ptr_emplace<MTHandMotion_>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocate_shared[abi:ne180100]<MTPListGestureConfig_,std::allocator<MTPListGestureConfig_>,MTParserType &,MTParserOptions &,BOOL &,MTDragManagerEventQueue_ &,void>(uint64_t a1, int *a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v9 = operator new(0x90uLL);
  std::__shared_ptr_emplace<MTPListGestureConfig_>::__shared_ptr_emplace[abi:ne180100]<MTParserType &,MTParserOptions &,BOOL &,MTDragManagerEventQueue_ &,std::allocator<MTPListGestureConfig_>,0>(v9, a2, a3, a4, a5);
}

void sub_6D49C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MTPListGestureConfig_>::__shared_ptr_emplace[abi:ne180100]<MTParserType &,MTParserOptions &,BOOL &,MTDragManagerEventQueue_ &,std::allocator<MTPListGestureConfig_>,0>(void *a1, int *a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_141CD8;
  MTPListGestureConfig_::MTPListGestureConfig_(a1 + 3, *a2, *a3, *a4, a5);
}

void sub_6D504(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MTPListGestureConfig_>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_141CD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MTPListGestureConfig_>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_141CD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t std::__shared_ptr_emplace<MTPListGestureConfig_>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<MTForceManagement_,std::allocator<MTForceManagement_>,MTSurfaceDimensions_ &,MTParserType &,MTParserOptions &,BOOL &,void({block_pointer} {__strong}&)(int,MTClickStrength,float,float),void>@<X0>(uint64_t a1@<X1>, unsigned int *a2@<X2>, unsigned int *a3@<X3>, unsigned __int8 *a4@<X4>, void **a5@<X5>, void *a6@<X8>)
{
  unint64_t v12 = operator new(0x288uLL);
  double result = std::__shared_ptr_emplace<MTForceManagement_>::__shared_ptr_emplace[abi:ne180100]<MTSurfaceDimensions_ &,MTParserType &,MTParserOptions &,BOOL &,void({block_pointer} {__strong}&)(int,MTClickStrength,float,float),std::allocator<MTForceManagement_>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_6D62C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<MTForceManagement_>::__shared_ptr_emplace[abi:ne180100]<MTSurfaceDimensions_ &,MTParserType &,MTParserOptions &,BOOL &,void({block_pointer} {__strong}&)(int,MTClickStrength,float,float),std::allocator<MTForceManagement_>,0>(void *a1, uint64_t a2, unsigned int *a3, unsigned int *a4, unsigned __int8 *a5, void **a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_141D28;
  MTForceManagement_::MTForceManagement_((uint64_t)(a1 + 3), a2, *a3, *a4, *a5, *a6);
  return a1;
}

void sub_6D698(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MTForceManagement_>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_141D28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MTForceManagement_>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_141D28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void std::__shared_ptr_emplace<MTForceManagement_>::__on_zero_shared(uint64_t a1)
{
}

void MTForceManagement_::~MTForceManagement_(MTForceManagement_ *this)
{
  *(void *)this = off_141D78;

  MTForceClickHistory_::~MTForceClickHistory_((MTForceClickHistory_ *)((char *)this + 520));
  double v7 = (void **)((char *)this + 472);
  std::vector<MTForceThresholding_>::__destroy_vector::operator()[abi:ne180100](&v7);
  double v7 = (void **)((char *)this + 272);
  std::vector<std::vector<MTForceBehavior_>>::__destroy_vector::operator()[abi:ne180100](&v7);
  double v2 = (void *)*((void *)this + 20);
  if (v2)
  {
    *((void *)this + 2MTHandMotion_::clearHandMotion(this, 1) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 17);
  if (v3)
  {
    *((void *)this + 18) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 14);
  if (v4)
  {
    *((void *)this + 15) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 11);
  if (v5)
  {
    *((void *)this + 12) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 8);
  if (v6)
  {
    *((void *)this + 9) = v6;
    operator delete(v6);
  }
}

HSUtil::Encoder *MTForceManagement_::encodeToMap(MTForceManagement_ *this, HSUtil::Encoder *a2)
{
  HSUtil::Encoder::encodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)114,(char)101,(char)108,(char)101,(char)97,(char)115,(char)101>::Key, *((double *)this + 3));
  uint64_t v4 = (const CoderKey *)HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)97,(char)99,(char)116,(char)105,(char)118,(char)97,(char)116,(char)105,(char)111,(char)110>::Key;
  double v5 = *((double *)this + 4);

  return HSUtil::Encoder::encodeDouble(a2, v4, v5);
}

uint64_t MTForceManagement_::decodeFromMap(MTForceManagement_ *this, HSUtil::Decoder *a2)
{
  *((double *)this + 3) = HSUtil::Decoder::decodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)114,(char)101,(char)108,(char)101,(char)97,(char)115,(char)101>::Key);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/Force/MTForceManagement_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTForceManagement_::decodeFromMap();
    }
    return 0;
  }
  *((double *)this + 4) = HSUtil::Decoder::decodeDouble(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)97,(char)99,(char)116,(char)105,(char)118,(char)97,(char)116,(char)105,(char)111,(char)110>::Key);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/Force/MTForceManagement_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTForceManagement_::decodeFromMap();
    }
    return 0;
  }
  return 1;
}

void std::vector<MTForceThresholding_>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v1 = *a1;
  double v2 = (void (***)(void))**a1;
  if (v2)
  {
    uint64_t v4 = (void (***)(void))v1[1];
    double v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 60;
      double v7 = v4 - 60;
      do
      {
        (**v7)(v7);
        v6 -= 60;
        BOOL v8 = v7 == v2;
        v7 -= 60;
      }
      while (!v8);
      double v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<MTForceBehavior_>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v1 = *a1;
  double v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    double v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<MTForceBehavior_>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      double v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<MTForceBehavior_>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v1 = *a1;
  double v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    double v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 18;
        std::allocator<MTForceBehavior_>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      double v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<MTForceBehavior_>::destroy[abi:ne180100](uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[15];
  if (v3)
  {
    a2[16] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a2[12];
  if (v4)
  {
    a2[13] = v4;
    operator delete(v4);
  }
  double v5 = (void *)a2[9];
  if (v5)
  {
    a2[10] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a2[6];
  if (v6)
  {
    a2[7] = v6;
    operator delete(v6);
  }
  double v7 = (void *)a2[3];
  if (v7)
  {
    a2[4] = v7;
    operator delete(v7);
  }
}

uint64_t MTHandStatistics_::encode(MTHandStatistics_ *this, HSUtil::Encoder *a2)
{
  if (!*(_DWORD *)a2) {
    HSUtil::Encoder::_encodeMapStart((unint64_t *)a2, 4);
  }
  (**(void (***)(MTHandStatistics_ *, HSUtil::Encoder *))this)(this, a2);
  if (!*(_DWORD *)a2) {
    HSUtil::Encoder::_encodeContainerStop((uint64_t (***)(void))a2);
  }
  return 1;
}

uint64_t MTForceManagement_::encode(MTForceManagement_ *this, HSUtil::Encoder *a2)
{
  if (!*(_DWORD *)a2) {
    HSUtil::Encoder::_encodeMapStart((unint64_t *)a2, 4);
  }
  (**(void (***)(MTForceManagement_ *, HSUtil::Encoder *))this)(this, a2);
  if (!*(_DWORD *)a2) {
    HSUtil::Encoder::_encodeContainerStop((uint64_t (***)(void))a2);
  }
  return 1;
}

uint64_t MTGestureConfig_::encode(MTGestureConfig_ *this, HSUtil::Encoder *a2)
{
  if (!*(_DWORD *)a2) {
    HSUtil::Encoder::_encodeMapStart((unint64_t *)a2, 4);
  }
  (*(void (**)(MTGestureConfig_ *, HSUtil::Encoder *))(*(void *)this + 24))(this, a2);
  if (!*(_DWORD *)a2) {
    HSUtil::Encoder::_encodeContainerStop((uint64_t (***)(void))a2);
  }
  return 1;
}

void *HSUtil::Decoder::_readCodable<MTHandStatistics_>(uint64_t a1, unint64_t *a2, MTHandStatistics_ *a3)
{
  unint64_t v6 = *a2;
  double result = (void *)HSUtil::Decoder::_skipElement((HSUtil::Decoder *)a1, a2);
  if (!*(_DWORD *)a1)
  {
    BOOL v8 = result;
    double result = HSUtil::Decoder::_loadKeyTableIfNeeded((HSUtil::Decoder *)a1, a2);
    if (!*(_DWORD *)a1)
    {
      v11[1] = *(void *)(a1 + 8);
      v11[0] = 0xAAAAAAAA00000000;
      uint64_t v10 = *(void *)(a1 + 24);
      uint64_t v9 = *(std::__shared_weak_count **)(a1 + 32);
      unint64_t v12 = 0;
      uint64_t v13 = v10;
      __int16 v14 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v15 = *(_OWORD *)(a1 + 40);
      unint64_t v16 = *(void *)(a1 + 56) + v6;
      double v17 = v8;
      uint64_t v18 = 0;
      if ((MTHandStatistics_::decode(a3, (HSUtil::Decoder *)v11) & 1) == 0) {
        *(_DWORD *)a1 = 10;
      }
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      double result = v12;
      unint64_t v12 = 0;
      if (result)
      {
        std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::~__value_func[abi:ne180100](result);
        operator delete();
      }
    }
  }
  return result;
}

void sub_6DE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MTHandStatistics_::decode(MTHandStatistics_ *this, HSUtil::Decoder *a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + MTHandMotion_::clearHandMotion(this, 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v11 = v4;
  long long v12 = v4;
  long long v9 = v4;
  long long v10 = v4;
  long long v8 = v4;
  HSUtil::Decoder::decodeMap((unint64_t *)a2, (uint64_t)&v8);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/PathsNHands/MTHandStatistics_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTHandStatistics_::decode();
    }
  }
  else
  {
    if ((*(uint64_t (**)(MTHandStatistics_ *, long long *))(*(void *)this + 8))(this, &v8))
    {
      uint64_t v5 = 1;
      goto LABEL_9;
    }
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/PathsNHands/MTHandStatistics_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTHandStatistics_::decode();
    }
  }
  uint64_t v5 = 0;
LABEL_9:
  if ((void)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v10);
  }
  unint64_t v6 = (void *)v9;
  *(void *)&long long v9 = 0;
  if (v6)
  {
    std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::~__value_func[abi:ne180100](v6);
    operator delete();
  }
  return v5;
}

void sub_6DFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *HSUtil::Decoder::_readCodable<MTPathStates_>(uint64_t a1, unint64_t *a2, MTPathStates_ *a3)
{
  unint64_t v6 = *a2;
  double result = (void *)HSUtil::Decoder::_skipElement((HSUtil::Decoder *)a1, a2);
  if (!*(_DWORD *)a1)
  {
    long long v8 = result;
    double result = HSUtil::Decoder::_loadKeyTableIfNeeded((HSUtil::Decoder *)a1, a2);
    if (!*(_DWORD *)a1)
    {
      v11[1] = *(void *)(a1 + 8);
      v11[0] = 0xAAAAAAAA00000000;
      uint64_t v10 = *(void *)(a1 + 24);
      long long v9 = *(std::__shared_weak_count **)(a1 + 32);
      long long v12 = 0;
      uint64_t v13 = v10;
      __int16 v14 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v15 = *(_OWORD *)(a1 + 40);
      unint64_t v16 = *(void *)(a1 + 56) + v6;
      double v17 = v8;
      uint64_t v18 = 0;
      if ((MTPathStates_::decode(a3, (HSUtil::Decoder *)v11) & 1) == 0) {
        *(_DWORD *)a1 = 10;
      }
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      double result = v12;
      long long v12 = 0;
      if (result)
      {
        std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::~__value_func[abi:ne180100](result);
        operator delete();
      }
    }
  }
  return result;
}

void sub_6E0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MTPathStates_::decode(MTPathStates_ *this, HSUtil::Decoder *a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + MTHandMotion_::clearHandMotion(this, 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v11 = v4;
  long long v12 = v4;
  long long v9 = v4;
  long long v10 = v4;
  long long v8 = v4;
  HSUtil::Decoder::decodeMap((unint64_t *)a2, (uint64_t)&v8);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/PathsNHands/MTPathStates_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTPathStates_::decode();
    }
  }
  else
  {
    if ((*(uint64_t (**)(MTPathStates_ *, long long *))(*(void *)this + 8))(this, &v8))
    {
      uint64_t v5 = 1;
      goto LABEL_9;
    }
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/PathsNHands/MTPathStates_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTPathStates_::decode();
    }
  }
  uint64_t v5 = 0;
LABEL_9:
  if ((void)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v10);
  }
  unint64_t v6 = (void *)v9;
  *(void *)&long long v9 = 0;
  if (v6)
  {
    std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::~__value_func[abi:ne180100](v6);
    operator delete();
  }
  return v5;
}

void sub_6E258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *HSUtil::Decoder::_readCodable<MTForceManagement_>(uint64_t a1, unint64_t *a2, MTForceManagement_ *a3)
{
  unint64_t v6 = *a2;
  double result = (void *)HSUtil::Decoder::_skipElement((HSUtil::Decoder *)a1, a2);
  if (!*(_DWORD *)a1)
  {
    long long v8 = result;
    double result = HSUtil::Decoder::_loadKeyTableIfNeeded((HSUtil::Decoder *)a1, a2);
    if (!*(_DWORD *)a1)
    {
      v11[1] = *(void *)(a1 + 8);
      v11[0] = 0xAAAAAAAA00000000;
      uint64_t v10 = *(void *)(a1 + 24);
      long long v9 = *(std::__shared_weak_count **)(a1 + 32);
      long long v12 = 0;
      uint64_t v13 = v10;
      __int16 v14 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v15 = *(_OWORD *)(a1 + 40);
      unint64_t v16 = *(void *)(a1 + 56) + v6;
      double v17 = v8;
      uint64_t v18 = 0;
      if ((MTForceManagement_::decode(a3, (HSUtil::Decoder *)v11) & 1) == 0) {
        *(_DWORD *)a1 = 10;
      }
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      double result = v12;
      long long v12 = 0;
      if (result)
      {
        std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::~__value_func[abi:ne180100](result);
        operator delete();
      }
    }
  }
  return result;
}

void sub_6E370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MTForceManagement_::decode(MTForceManagement_ *this, HSUtil::Decoder *a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + MTHandMotion_::clearHandMotion(this, 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v11 = v4;
  long long v12 = v4;
  long long v9 = v4;
  long long v10 = v4;
  long long v8 = v4;
  HSUtil::Decoder::decodeMap((unint64_t *)a2, (uint64_t)&v8);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/Force/MTForceManagement_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTForceManagement_::decode();
    }
  }
  else
  {
    if ((*(uint64_t (**)(MTForceManagement_ *, long long *))(*(void *)this + 8))(this, &v8))
    {
      uint64_t v5 = 1;
      goto LABEL_9;
    }
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/Force/MTForceManagement_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTForceManagement_::decode();
    }
  }
  uint64_t v5 = 0;
LABEL_9:
  if ((void)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v10);
  }
  unint64_t v6 = (void *)v9;
  *(void *)&long long v9 = 0;
  if (v6)
  {
    std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::~__value_func[abi:ne180100](v6);
    operator delete();
  }
  return v5;
}

void sub_6E4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *HSUtil::Decoder::_readCodable<MTPListGestureConfig_>(uint64_t a1, unint64_t *a2, MTGestureConfig_ *a3)
{
  unint64_t v6 = *a2;
  double result = (void *)HSUtil::Decoder::_skipElement((HSUtil::Decoder *)a1, a2);
  if (!*(_DWORD *)a1)
  {
    long long v8 = result;
    double result = HSUtil::Decoder::_loadKeyTableIfNeeded((HSUtil::Decoder *)a1, a2);
    if (!*(_DWORD *)a1)
    {
      v11[1] = *(void *)(a1 + 8);
      v11[0] = 0xAAAAAAAA00000000;
      uint64_t v10 = *(void *)(a1 + 24);
      long long v9 = *(std::__shared_weak_count **)(a1 + 32);
      long long v12 = 0;
      uint64_t v13 = v10;
      __int16 v14 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v15 = *(_OWORD *)(a1 + 40);
      unint64_t v16 = *(void *)(a1 + 56) + v6;
      double v17 = v8;
      uint64_t v18 = 0;
      if ((MTGestureConfig_::decode(a3, (HSUtil::Decoder *)v11) & 1) == 0) {
        *(_DWORD *)a1 = 10;
      }
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      double result = v12;
      long long v12 = 0;
      if (result)
      {
        std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::~__value_func[abi:ne180100](result);
        operator delete();
      }
    }
  }
  return result;
}

void sub_6E614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MTGestureConfig_::decode(MTGestureConfig_ *this, HSUtil::Decoder *a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + MTHandMotion_::clearHandMotion(this, 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v11 = v4;
  long long v12 = v4;
  long long v9 = v4;
  long long v10 = v4;
  long long v8 = v4;
  HSUtil::Decoder::decodeMap((unint64_t *)a2, (uint64_t)&v8);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/Gestures/MTGestureConfig_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTGestureConfig_::decode();
    }
  }
  else
  {
    if ((*(uint64_t (**)(MTGestureConfig_ *, long long *))(*(void *)this + 32))(this, &v8))
    {
      uint64_t v5 = 1;
      goto LABEL_9;
    }
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/MT2TPHIDService/HSTrackpad/Alg/Parser/Gestures/MTGestureConfig_.hpp", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      MTGestureConfig_::decode();
    }
  }
  uint64_t v5 = 0;
LABEL_9:
  if ((void)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v10);
  }
  unint64_t v6 = (void *)v9;
  *(void *)&long long v9 = 0;
  if (v6)
  {
    std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::~__value_func[abi:ne180100](v6);
    operator delete();
  }
  return v5;
}

void sub_6E7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void __cxx_global_var_init_44()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_43(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_43(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_39(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_39(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_39(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_39(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_40(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void __cxx_global_var_init_15_30(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_currentTimestamp", a2);
  }
}

void __cxx_global_var_init_16_30(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_previousTimestamp", a2);
  }
}

void __cxx_global_var_init_17_30(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)110,(char)97,(char)98,(char)108,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"enable", a2);
  }
}

void __cxx_global_var_init_18_30(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)105,(char)110,(char)103>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointing", a2);
  }
}

void __cxx_global_var_init_19_30(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClick", a2);
  }
}

void __cxx_global_var_init_20_30(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)103,(char)105,(char)110,(char)103>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragging", a2);
  }
}

void __cxx_global_var_init_21_31(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)114,(char)97,(char)103,(char)76,(char)111,(char)99,(char)107>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dragLock", a2);
  }
}

void __cxx_global_var_init_22_31(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)111,(char)105,(char)110,(char)116,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"pointMomentum", a2);
  }
}

void __cxx_global_var_init_23_31(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)117,(char)108,(char)116,(char)105,(char)68,(char)114,(char)97,(char)103,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"multiDragMomentum", a2);
  }
}

void __cxx_global_var_init_24_31(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClick", a2);
  }
}

void __cxx_global_var_init_25_30(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)116,(char)105,(char)99,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"verticalScrolling", a2);
  }
}

void __cxx_global_var_init_26_30(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)104,(char)111,(char)114,(char)105,(char)122,(char)111,(char)110,(char)116,(char)97,(char)108,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"horizontalScrolling", a2);
  }
}

void __cxx_global_var_init_27_29(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)103,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"gestureScrollingEnabled", a2);
  }
}

void __cxx_global_var_init_28_29(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)65,(char)99,(char)99,(char)101,(char)108,(char)101,(char)114,(char)97,(char)116,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollAcceleration", a2);
  }
}

void __cxx_global_var_init_29_29(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoom", a2);
  }
}

void __cxx_global_var_init_30_29(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)111,(char)116,(char)97,(char)116,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rotate", a2);
  }
}

void __cxx_global_var_init_31_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)122,(char)111,(char)111,(char)109,(char)84,(char)111,(char)103,(char)103,(char)108,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"zoomToggle", a2);
  }
}

void __cxx_global_var_init_32_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)104,(char)111,(char)119,(char)68,(char)101,(char)102,(char)105,(char)110,(char)105,(char)116,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"showDefinition", a2);
  }
}

void __cxx_global_var_init_33_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)52,(char)70>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale4F", a2);
  }
}

void __cxx_global_var_init_34_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)99,(char)97,(char)108,(char)101,(char)53,(char)70>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockScale5F", a2);
  }
}

void __cxx_global_var_init_35_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)100,(char)103,(char)101,(char)78,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)50,(char)70>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"edgeNotificationSwipe2F", a2);
  }
}

void __cxx_global_var_init_36_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)111,(char)116,(char)105,(char)102,(char)105,(char)99,(char)97,(char)116,(char)105,(char)111,(char)110,(char)67,(char)101,(char)110,(char)116,(char)101,(char)114,(char)50,(char)70>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"notificationCenter2F", a2);
  }
}

void __cxx_global_var_init_37_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)108,(char)105,(char)112,(char)76,(char)101,(char)102,(char)116,(char)65,(char)110,(char)100,(char)82,(char)105,(char)103,(char)104,(char)116,(char)69,(char)100,(char)103,(char)101,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)115>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"flipLeftAndRightEdgeGestures", a2);
  }
}

void __cxx_global_var_init_38_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109,(char)69,(char)110,(char)97,(char)98,(char)108,(char)101,(char)100>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"scrollMomentumEnabled", a2);
  }
}

void __cxx_global_var_init_39_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)77,(char)111,(char)109,(char)101,(char)110,(char)116,(char)117,(char)109>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsScrollMomentum", a2);
  }
}

void __cxx_global_var_init_40_17(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"restingScroll", a2);
  }
}

void __cxx_global_var_init_41_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)101,(char)101,(char)110,(char)90,(char)111,(char)111,(char)109>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"screenZoom", a2);
  }
}

void __cxx_global_var_init_42_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)121,(char)109,(char)109,(char)101,(char)116,(char)114,(char)105,(char)99,(char)90,(char)111,(char)111,(char)109,(char)82,(char)111,(char)116,(char)97,(char)116,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"symmetricZoomRotate", a2);
  }
}

void __cxx_global_var_init_43_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)97,(char)112,(char)67,(char)108,(char)105,(char)99,(char)107,(char)87,(char)104,(char)105,(char)108,(char)101,(char)82,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"tapClickWhileResting", a2);
  }
}

void __cxx_global_var_init_44_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)111,(char)114,(char)99,(char)101,(char)83,(char)117,(char)112,(char)112,(char)114,(char)101,(char)115,(char)115,(char)101,(char)100>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"forceSuppressed", a2);
  }
}

void __cxx_global_var_init_45_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)90,(char)111,(char)110,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"rightClickZone", a2);
  }
}

void __cxx_global_var_init_46_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)105,(char)114,(char)115,(char)116,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"firstClickThreshold", a2);
  }
}

void __cxx_global_var_init_47_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)101,(char)99,(char)111,(char)110,(char)100,(char)67,(char)108,(char)105,(char)99,(char)107,(char)84,(char)104,(char)114,(char)101,(char)115,(char)104,(char)111,(char)108,(char)100>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"secondClickThreshold", a2);
  }
}

void __cxx_global_var_init_48_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)116,(char)114,(char)101,(char)110,(char)103,(char)116,(char)104>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuationStrength", a2);
  }
}

void __cxx_global_var_init_49_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)116,(char)117,(char)97,(char)116,(char)101,(char)68,(char)101,(char)116,(char)101,(char)110,(char)116,(char)115>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"actuateDetents", a2);
  }
}

void __cxx_global_var_init_50_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientation", a2);
  }
}

void __cxx_global_var_init_51_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110,(char)77,(char)111,(char)100,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceOrientationMode", a2);
  }
}

void __cxx_global_var_init_52_16(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_53_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_54_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_55_15(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)105,(char)103,(char)97,(char)116,(char)105,(char)111,(char)110,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navigationSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_56_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)118>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_v", a2);
  }
}

void __cxx_global_var_init_57_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)51,(char)70,(char)95,(char)104>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe3F_h", a2);
  }
}

void __cxx_global_var_init_58_9(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)118>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_v", a2);
  }
}

void __cxx_global_var_init_59_11(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)52,(char)70,(char)95,(char)104>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipe4F_h", a2);
  }
}

void __cxx_global_var_init_60_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)112,(char)112,(char)111,(char)114,(char)116,(char)115,(char)71,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)105,(char)110,(char)103>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"supportsGestureScrolling", a2);
  }
}

void __cxx_global_var_init_61_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)110,(char)97,(char)118,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"navSwipes2F", a2);
  }
}

void __cxx_global_var_init_62_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)111,(char)99,(char)107,(char)83,(char)119,(char)105,(char)112,(char)101,(char)115,(char)50,(char)70>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"dockSwipes2F", a2);
  }
}

void __cxx_global_var_init_63_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)105,(char)115,(char)115,(char)105,(char)111,(char)110,(char)67,(char)111,(char)110,(char)116,(char)114,(char)111,(char)108>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"missionControl", a2);
  }
}

void __cxx_global_var_init_64_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)114,(char)101,(char)108,(char)101,(char)97,(char)115,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_release", a2);
  }
}

void __cxx_global_var_init_65_3(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)97,(char)99,(char)116,(char)105,(char)118,(char)97,(char)116,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_activation", a2);
  }
}

void __cxx_global_var_init_66_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)101,(char)97,(char)114,(char)108,(char)105,(char)101,(char)115,(char)116,(char)78,(char)111,(char)110,(char)68,(char)105,(char)118,(char)105,(char)110,(char)103,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_earliestNonDivingTimestamp", a2);
  }
}

void __cxx_global_var_init_67_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)100,(char)105,(char)118,(char)105,(char)110,(char)103,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)67,(char)104,(char)97,(char)110,(char)103,(char)101,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_divingButtonChangeTimestamp", a2);
  }
}

void __cxx_global_var_init_68_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)105,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_min", a2);
  }
}

void __cxx_global_var_init_69_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_max", a2);
  }
}

void __cxx_global_var_init_70_1(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)66,(char)114,(char)101,(char)97,(char)107,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerBreakTouch_max", a2);
  }
}

void __cxx_global_var_init_71_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)82,(char)101,(char)115,(char)101,(char)116>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentReset", a2);
  }
}

void __cxx_global_var_init_72_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)65,(char)99,(char)116,(char)105,(char)118,(char)105,(char)116,(char)121>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentButtonActivity", a2);
  }
}

void __cxx_global_var_init_73_0(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_firstFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_74(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)102,(char)105,(char)114,(char)115,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_firstFingerCleanStartInRange", a2);
  }
}

void __cxx_global_var_init_75(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)67,(char)108,(char)101,(char)97,(char)110,(char)83,(char)116,(char)97,(char)114,(char)116,(char)73,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerCleanStartInRange", a2);
  }
}

void __cxx_global_var_init_76(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_77(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_previousRecentFingerTouchDown", a2);
  }
}

void __cxx_global_var_init_78(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)78,(char)111,(char)110,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)100,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentNonThumbTouchdown", a2);
  }
}

void __cxx_global_var_init_79(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)115,(char)116,(char)105,(char)110,(char)103,(char)84,(char)104,(char)117,(char)109,(char)98,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)111,(char)119,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_restingThumbTouchDown", a2);
  }
}

void __cxx_global_var_init_80(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)84,(char)119,(char)111,(char)79,(char)114,(char)77,(char)111,(char)114,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentTwoOrMoreFingersTouching", a2);
  }
}

void __cxx_global_var_init_81(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)118,(char)101,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)115,(char)84,(char)111,(char)117,(char)99,(char)104,(char)105,(char)110,(char)103>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFiveFingersTouching", a2);
  }
}

void __cxx_global_var_init_82(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)76,(char)105,(char)102,(char)116,(char)111,(char)102,(char)102>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerLiftoff", a2);
  }
}

void __cxx_global_var_init_83(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)105,(char)110,(char)103,(char)101,(char)114,(char)69,(char)110,(char)100>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentFingerEnd", a2);
  }
}

void __cxx_global_var_init_84(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)114,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_recentScrollZoom", a2);
  }
}

void __cxx_global_var_init_85(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)119,(char)105,(char)116,(char)99,(char)104>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentChordSwitch", a2);
  }
}

void __cxx_global_var_init_86(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)67,(char)104,(char)111,(char)114,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentChordSlide", a2);
  }
}

void __cxx_global_var_init_87(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)83,(char)99,(char)114,(char)111,(char)108,(char)108,(char)90,(char)111,(char)111,(char)109,(char)83,(char)108,(char)105,(char)100,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentScrollZoomSlide", a2);
  }
}

void __cxx_global_var_init_88(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)109,(char)111,(char)115,(char)116,(char)82,(char)101,(char)99,(char)101,(char)110,(char)116,(char)70,(char)108,(char)117,(char)105,(char)100,(char)83,(char)108,(char)105,(char)100,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_mostRecentFluidSlide", a2);
  }
}

void __cxx_global_var_init_89(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)95,(char)101,(char)120,(char)99,(char)101,(char)115,(char)115,(char)84,(char)97,(char)112,(char)77,(char)111,(char)116,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"t_excessTapMotion", a2);
  }
}

void __cxx_global_var_init_90(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)114,(char)105,(char)103,(char)104,(char)116,(char)104,(char)97,(char)110,(char)100,(char)95,(char)99,(char)104,(char)111,(char)114,(char)100,(char)115>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"righthand_chords", a2);
  }
}

void __cxx_global_var_init_94(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)116,(char)72,(char)97,(char)110,(char)100,(char)83,(char)116,(char)97,(char)116,(char)115>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"mtHandStats", a2);
  }
}

void __cxx_global_var_init_95(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)116,(char)80,(char)97,(char)116,(char)104,(char)83,(char)116,(char)97,(char)116,(char)101,(char)115>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"mtPathStates", a2);
  }
}

void __cxx_global_var_init_96(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)102,(char)111,(char)114,(char)99,(char)101,(char)77,(char)97,(char)110,(char)97,(char)103,(char)101,(char)109,(char)101,(char)110,(char)116>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"forceManagement", a2);
  }
}

void __cxx_global_var_init_97(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)103,(char)101,(char)115,(char)116,(char)117,(char)114,(char)101,(char)67,(char)111,(char)110,(char)102,(char)105,(char)103>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"gestureConfig", a2);
  }
}

float MTSurfaceDimensions_::MTSurfaceDimensions_(uint64_t a1, float result, float a3, float a4, float a5, float a6, float a7)
{
  *(void *)a1 = off_141DA8;
  *(float *)(a1 + 8) = result;
  *(float *)(a1 + 12) = a3;
  *(float *)(a1 + 16) = a4;
  *(float *)(a1 + 2objc_storeStrong(&location, 0) = a5;
  *(float *)(a1 + 32) = a6;
  *(float *)(a1 + 36) = a7;
  if (a6 > 0.0 && a7 > 0.0)
  {
    double result = a4 / a6;
    *(float *)(a1 + 24) = a4 / a6;
    *(float *)(a1 + 28) = a5 / a7;
  }
  return result;
}

void MTSurfaceDimensions_::~MTSurfaceDimensions_(MTSurfaceDimensions_ *this)
{
}

float MTSurfaceDimensions_::minDistanceToEdge_mm(MTSurfaceDimensions_ *this, MTPoint a2, int a3, int a4)
{
  float x = a2.x;
  float v6 = *((float *)this + 4);
  float v5 = *((float *)this + 5);
  if (v6 <= v5) {
    float result = *((float *)this + 5);
  }
  else {
    float result = *((float *)this + 4);
  }
  if (!a3)
  {
    if (!a4) {
      return result;
    }
    goto LABEL_12;
  }
  float v8 = x / *((float *)this + 6);
  float v9 = (1.0 - v8) * v6;
  if (result > v9) {
    float result = (1.0 - v8) * v6;
  }
  float v10 = v6 * v8;
  if (v10 < result) {
    float result = v10;
  }
  if (a4)
  {
LABEL_12:
    float v11 = a2.y / *((float *)this + 7);
    if ((float)(v5 * v11) < result) {
      float result = v5 * v11;
    }
    float v12 = (1.0 - v11) * v5;
    if (result > v12) {
      return v12;
    }
  }
  return result;
}

float MTSurfaceDimensions_::convertPixelsToSurfaceFraction(MTSurfaceDimensions_ *this, MTPoint a2)
{
  return a2.x / *((float *)this + 6);
}

float MTSurfaceDimensions_::convertPixelDeltaToMillimeters(MTSurfaceDimensions_ *this, float a2, int a3)
{
  uint64_t v3 = 32;
  if (a3) {
    uint64_t v3 = 36;
  }
  return *(float *)((char *)this + v3) * a2;
}

float MTSurfaceDimensions_::convertPixelVelocityToMillimetersPerSecond(MTSurfaceDimensions_ *this, float a2)
{
  return (float)((float)(*((float *)this + 8) + *((float *)this + 9)) * a2) * 0.5;
}

void MTSurfaceDimensions_::convertPixelDeltaToMillimetersPerSecond(MTSurfaceDimensions_ *this, float a2, double a3)
{
  if (a3 == 0.0)
  {
    long long v4 = MTLoggingPlugin();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315906;
      float v6 = "[Error] ";
      __int16 v7 = 2080;
      float v8 = "";
      __int16 v9 = 2080;
      float v10 = "convertPixelDeltaToMillimetersPerSecond";
      __int16 v11 = 2048;
      double v12 = a3;
      _os_log_impl(&def_411C8, v4, OS_LOG_TYPE_ERROR, "[HID] [MT] %s%s%s Unexpected frame interval %g, setting velocity to 0.0", (uint8_t *)&v5, 0x2Au);
    }
  }
}

void MTSurfaceDimensions_::convertPixelDeltasToMillimetersPerSecond(MTSurfaceDimensions_ *this, MTPoint a2, double a3)
{
  if (a3 == 0.0)
  {
    long long v4 = MTLoggingPlugin();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315906;
      float v6 = "[Error] ";
      __int16 v7 = 2080;
      float v8 = "";
      __int16 v9 = 2080;
      float v10 = "convertPixelDeltasToMillimetersPerSecond";
      __int16 v11 = 2048;
      double v12 = a3;
      _os_log_impl(&def_411C8, v4, OS_LOG_TYPE_ERROR, "[HID] [MT] %s%s%s Unexpected frame interval %g, setting velocity to 0.0", (uint8_t *)&v5, 0x2Au);
    }
  }
}

float MTSurfaceDimensions_::convertPixelsToMillimeters(MTSurfaceDimensions_ *this, MTPoint a2)
{
  return a2.x * *((float *)this + 8);
}

float MTSurfaceDimensions_::convertMillimetersToPixels(MTSurfaceDimensions_ *this, MTPoint a2)
{
  return a2.x * (float)(*((float *)this + 6) / *((float *)this + 4));
}

float MTSurfaceDimensions_::convertMillimetersToSurfaceFraction(MTSurfaceDimensions_ *this, MTPoint a2)
{
  return a2.x / *((float *)this + 4);
}

float MTSurfaceDimensions_::convertSurfaceFractionToPixels(MTSurfaceDimensions_ *this, MTPoint a2)
{
  return a2.x * *((float *)this + 6);
}

float MTSurfaceDimensions_::convertSurfaceFractionToMillimeters(MTSurfaceDimensions_ *this, MTPoint a2)
{
  return a2.x * *((float *)this + 4);
}

float MTSurfaceDimensions_::convertSurfaceFractionVelocityToPixelsPerSecond(MTSurfaceDimensions_ *this, MTPoint a2)
{
  return a2.x * *((float *)this + 6);
}

void __cxx_global_var_init_45()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_44(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_currentTimestamp", a2);
  }
}

void __cxx_global_var_init_3_44(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_previousTimestamp", a2);
  }
}

void MTRestZoneIntegrator_::clear(float32x2_t *this)
{
}

void MTRestZoneIntegrator_::clearMotion(float32x2_t *this, int a2)
{
  char v2 = a2;
  if (a2)
  {
    MTRestZoneIntegrator_::clearThumbFingerEnvelope(this);
    this[29].i32[1] = 0;
  }
  this[33] = 0;
  this[34] = 0;
  this[37].i32[1] = 0;
  this[27] = 0;
  *(_OWORD *)this[20].f32 = 0u;
  *(_OWORD *)this[22].f32 = 0u;
  MTFingerToPathMap_::clearFingerPathMappings((MTFingerToPathMap_ *)this);
  long long v4 = MTLoggingPlugin();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    MTRestZoneIntegrator_::clearMotion(v2, v4);
  }
}

MTFingerToPathMap_ *MTRestZoneIntegrator_::MTRestZoneIntegrator_(MTFingerToPathMap_ *a1, uint64_t a2, __int32 a3, __int32 a4)
{
  MTFingerToPathMap_::MTFingerToPathMap_(a1, 0);
  float32x2_t *v8 = (float32x2_t)off_141DD8;
  v8[31] = (float32x2_t)a2;
  v8[32].i32[0] = a3;
  v8[32].i32[1] = a4;
  MTRestZoneIntegrator_::clearMotion(v8, 1);
  MTParameterFactory_::initRestZoneBalanceParameters((uint64_t)a1 + 108);
  return a1;
}

void sub_7024C(_Unwind_Exception *a1)
{
  MTFingerToPathMap_::~MTFingerToPathMap_(v1);
  _Unwind_Resume(a1);
}

void MTRestZoneIntegrator_::~MTRestZoneIntegrator_(MTRestZoneIntegrator_ *this)
{
  MTFingerToPathMap_::~MTFingerToPathMap_(this);

  operator delete();
}

uint64_t MTRestZoneIntegrator_::clearThumbFingerEnvelope(float32x2_t *this)
{
  if (this[12].u8[6] <= 3u) {
    this[29].f32[1] = MTRestZoneIntegrator_::calcResidualBalance(this);
  }
  this[29].i32[0] = 0;
  this[28] = 0;
  this[30].i32[0] = 0;
  this[25] = 0;
  this[26] = 0;
  this[24] = 0;

  return MTFingerToPathMap_::clearMaxFingersTouching((uint64_t)this);
}

float MTRestZoneIntegrator_::calcResidualBalance(float32x2_t *this)
{
  float32x2_t v1 = vsqrt_f32(vadd_f32(this[28], this[28]));
  float result = (float)((float)(vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v1, 1), v1).f32[0]
                         - (float)(this[15].f32[0] * sqrtf(this[27].f32[0])))
                 - (float)(this[15].f32[1] * sqrtf(this[27].f32[1])))
         - (float)(this[16].f32[0] * sqrtf(this[30].f32[0]));
  if (result <= 0.0)
  {
    if (result <= this[19].f32[1]) {
      return this[19].f32[1];
    }
  }
  else if (result >= this[17].f32[0])
  {
    return this[17].f32[0];
  }
  return result;
}

void MTRestZoneIntegrator_::translationSimilarityDotProduct(MTRestZoneIntegrator_ *this, MTPoint a2, MTPoint a3)
{
  float y = a3.y;
  float x = a3.x;
  hypotf(a2.x, a2.y);
  hypotf(x, y);
}

uint64_t MTRestZoneIntegrator_::extractMotionDeltas(MTRestZoneIntegrator_ *this, const MTPathStates_ *a2, MTParserPath_ *a3, MTParserPath_ *a4, unsigned __int8 a5)
{
  BOOL v10 = MTParserPath_::stableAndMoved(a3);
  uint64_t result = MTParserPath_::stableAndMoved(a4);
  *((_DWORD *)this + 76) = 1065353216;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  int var2 = a3->var3.var2;
  char v13 = a5 ^ 1;
  float v14 = 0.0;
  float v15 = 0.0;
  float v16 = 0.0;
  if (var2 && ((a5 ^ 1) & 1) == 0 && LODWORD(a3[1].var3.var0) && v10)
  {
    float v16 = a3[3].var3.var13.y + 0.0;
    *((float *)this + 66) = v16;
    float v15 = a3[3].var3.var14.x + 0.0;
    *((float *)this + 67) = v15;
  }
  int v17 = a4->var3.var2;
  if (var2 != v17 && v17 != 0)
  {
    float v19 = a4->var3.var6.x - a3->var3.var6.x;
    float v20 = a4->var3.var6.y - a3->var3.var6.y;
    float v21 = sqrtf((float)(v20 * v20) + (float)(v19 * v19));
    float v22 = 0.0;
    if (v21 > 0.0)
    {
      float v23 = v19 / v21;
      float v24 = v20 / v21;
      v35.float x = v19 / v21;
      v35.float y = v20 / v21;
      if (!LODWORD(a4[1].var3.var0)) {
        char v13 = 1;
      }
      if ((v13 & 1) == 0 && LODWORD(a3[1].var3.var0))
      {
        float y = a4[3].var3.var13.y;
        float x = a4[3].var3.var14.x;
        float v27 = a3[3].var3.var13.y;
        float v28 = a3[3].var3.var14.x;
        if ((v10 | result) == 1)
        {
          *((float *)this + 66) = (float)(y + v16) * 0.5;
          *((float *)this + 67) = (float)(x + v15) * 0.5;
          *((float *)this + 68) = (float)((float)((float)(x * v24) + (float)(y * v23))
                                        - (float)((float)(v28 * v24) + (float)(v27 * v23)))
                                * 0.5;
          *((float *)this + 69) = (float)((float)((float)(y * v24) - (float)(x * v23))
                                        - (float)((float)(v27 * v24) - (float)(v28 * v23)))
                                * 0.5;
        }
        MTRestZoneIntegrator_::translationSimilarityDotProduct((MTRestZoneIntegrator_ *)result, *(MTPoint *)&v27, *(MTPoint *)&y);
        float v22 = v29;
        if ((a3->var3.var3 - 3) <= 1
          && (HIDWORD(a3[1].var3.var0) - 3) <= 1
          && MTParserPath_::isFingerOrRestingContact(a3))
        {
          MTRestZoneIntegrator_::combineCentralFingerScaleRotate((uint64_t)this, a2, a3, &v35);
        }
      }
    }
    MTContact_getEllipseEccentricity();
    float v31 = v30;
    uint64_t result = MTContact_getEllipseEccentricity();
    float v33 = v31 / v32;
    *((float *)this + 76) = v33;
    if (v22 > 0.0)
    {
      double v34 = v33;
      if (v34 < 1.2) {
        float v14 = ((1.2 - v34) * 2.0 + 0.5) * v22;
      }
    }
  }
  *((float *)this + 75) = v14;
  return result;
}

uint64_t MTRestZoneIntegrator_::combineCentralFingerScaleRotate(uint64_t this, const MTPathStates_ *a2, const MTParserPath_ *a3, const MTPoint *a4)
{
  int v4 = *(_DWORD *)(this + 80) + 1;
  if (v4 < *(_DWORD *)(this + 88))
  {
    uint64_t v8 = this;
    int v9 = 0;
    float v10 = 0.0;
    do
    {
      if (v4 <= 0xF)
      {
        unsigned int v11 = *(_DWORD *)(v8 + 4 * v4 + 8);
        if ((int)v11 >= 1)
        {
          uint64_t v12 = *((void *)a2 + 35);
          this = v12 + 568 * v11;
          if ((*(_DWORD *)(this + 36) - 3) <= 1
            && (*(_DWORD *)(v12 + 568 * v11 + 132) - 3) <= 1)
          {
            this = MTParserPath_::isFingerContact((MTParserPath_ *)this);
            if (this)
            {
              float v10 = v10
                  + (float)((float)((float)(*(float *)(v12 + 568 * v11 + 428) * a4->y)
                                  + (float)(*(float *)(v12 + 568 * v11 + 424) * a4->x))
                          - (float)((float)(a3[3].var3.var14.x * a4->y) + (float)(a3[3].var3.var13.y * a4->x)));
              ++v9;
            }
          }
        }
      }
      ++v4;
    }
    while (v4 < *(_DWORD *)(v8 + 88));
    if (v9 > 0)
    {
      float v13 = v10 / (float)v9;
      float v14 = *(float *)(v8 + 272);
      if (fabsf(v13) > fabsf(v14)) {
        *(float *)(v8 + 272) = (float)(v13 + v14) * 0.5;
      }
    }
  }
  return this;
}

void MTRestZoneIntegrator_::computeSpeedSimilarity(MTRestZoneIntegrator_ *this, const MTPathStates_ *a2)
{
  float v4 = 0.0;
  float v5 = 3.4028e38;
  for (uint64_t i = 12; i != 32; i += 4)
  {
    int v7 = *(_DWORD *)((char *)this + i);
    if (v7 >= 1)
    {
      uint64_t v8 = (MTParserPath_ *)(*((void *)a2 + 35) + 568 * v7);
      if ((v8->var3.var3 - 3) <= 1 && MTParserPath_::isFingerOrRestingContact(v8))
      {
        float AverageVelocity_mm_s = MTParserPath_::getAverageVelocity_mm_s(v8);
        float v11 = hypotf(AverageVelocity_mm_s, v10);
        if (v11 < v5) {
          float v5 = v11;
        }
        if (v11 > v4) {
          float v4 = v11;
        }
      }
    }
  }
}

float32x2_t MTRestZoneIntegrator_::decayMotionEnvelope(uint64_t a1, float32x2_t *a2, float32x2_t *a3, float *a4, float *a5, float *a6, float a7)
{
  float v12 = 1.0 - expf((float)-a7 / *(float *)(a1 + 132));
  *(double *)&uint64_t v13 = (float)(v12 * 0.0);
  double v14 = 1.0 - v12;
  float v15 = *(double *)&v13 + v14 * *a4;
  *a4 = v15;
  float v16 = *(double *)&v13 + v14 * *a6;
  *a6 = v16;
  float v17 = *(double *)&v13 + v14 * *a5;
  *a5 = v17;
  float64x2_t v18 = (float64x2_t)vdupq_lane_s64(v13, 0);
  *(float32x4_t *)a2->f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_n_f64(v18, vcvtq_f64_f32(*a2), v14)), vmlaq_n_f64(v18, vcvt_hight_f64_f32(*(float32x4_t *)a2->f32), v14));
  float32x2_t result = vcvt_f32_f64(vmlaq_n_f64(v18, vcvtq_f64_f32(*a3), v14));
  *a3 = result;
  return result;
}

void MTRestZoneIntegrator_::accumulateMotionEnvelope(uint64_t a1, float32x2_t *a2, float32x2_t *a3, float *a4, float *a5, float *a6, float a7)
{
  float v13 = 0.25;
  if (!*(unsigned char *)(a1 + 244)) {
    float v13 = 0.4;
  }
  a2[1] = vmla_n_f32(a2[1], vmul_f32(vmul_n_f32(*(float32x2_t *)(a1 + 108), powf(*(float *)(a1 + 296), v13)), *(float32x2_t *)(a1 + 288)), a7);
  float32_t v14 = a2->f32[0] + (float)(*(float *)(a1 + 280) * a7);
  float32_t v15 = a2->f32[1] + (float)(*(float *)(a1 + 284) * a7);
  a2->f32[0] = v14;
  a2->f32[1] = v15;
  *a3 = vmla_n_f32(*a3, vmul_n_f32(vadd_f32(*(float32x2_t *)(a1 + 280), *(float32x2_t *)(a1 + 280)), a7), *(float *)(a1 + 300));
  float v16 = sqrtf((float)(v15 * v15) + (float)(v14 * v14));
  if (*a4 > v16) {
    float v16 = *a4;
  }
  *a4 = v16;
  float v17 = *a5;
  float v18 = sqrtf((float)(a3->f32[1] * a3->f32[1]) + (float)(a3->f32[0] * a3->f32[0]));
  if (*a5 <= v18) {
    float v17 = v18;
  }
  *a5 = v17;
  float v19 = *a6;
  float v20 = fabsf(a2[1].f32[1]);
  float v21 = fabsf(a2[1].f32[0]);
  if (v20 <= v21)
  {
    if (v19 <= v21) {
      float v19 = v21;
    }
  }
  else if (v19 <= v20)
  {
    float v19 = v20;
  }
  *a6 = v19;
}

float MTRestZoneIntegrator_::adaptivePolarBalance(MTRestZoneIntegrator_ *this)
{
  float v1 = -(float)(*((float *)this + 32) * sqrtf(*((float *)this + 60)));
  if (*((unsigned char *)this + 244) || *((unsigned __int8 *)this + 101) >= 4u)
  {
    float32x2_t v2 = vsqrt_f32(vadd_f32(*(float32x2_t *)((char *)this + 228), *(float32x2_t *)((char *)this + 228)));
    if (v2.f32[0] <= v2.f32[1]) {
      v2.f32[0] = v2.f32[1];
    }
    float v3 = v2.f32[0] - sqrtf(*((float *)this + 56) + *((float *)this + 56));
    if (v3 <= 0.0) {
      float v3 = -0.0;
    }
    return (float)(v1 + v3) + (float)(*((float *)this + 35) * 2.0);
  }
  else
  {
    float32x2_t v5 = vsqrt_f32(vadd_f32(*(float32x2_t *)((char *)this + 228), *(float32x2_t *)((char *)this + 228)));
    if (v5.f32[0] <= v5.f32[1]) {
      v5.f32[0] = v5.f32[1];
    }
    return (float)((float)((float)(v1 + (float)(v5.f32[0] - sqrtf(*((float *)this + 56) + *((float *)this + 56))))
                         + (float)(*((float *)this + 29) * *((float *)this + 59)))
                 - (float)(*((float *)this + 30) * sqrtf(*((float *)this + 54))))
         - (float)(*((float *)this + 31) * sqrtf(*((float *)this + 55)));
  }
}

BOOL MTRestZoneIntegrator_::isLockedOnTranslate(MTRestZoneIntegrator_ *this)
{
  float32x2_t v2 = vsqrt_f32(vadd_f32(*(float32x2_t *)((char *)this + 228), *(float32x2_t *)((char *)this + 228)));
  if (v2.f32[0] <= v2.f32[1]) {
    v2.f32[0] = v2.f32[1];
  }
  float v3 = *((float *)this + 39);
  return (float)(v2.f32[0] - sqrtf(*((float *)this + 56) + *((float *)this + 56))) < v3
      && MTRestZoneIntegrator_::adaptivePolarBalance(this) < v3
      || MTRestZoneIntegrator_::adaptivePolarBalance(this) < (float)(v3 + v3);
}

BOOL MTRestZoneIntegrator_::isLockedOnPolarSymmetric(MTRestZoneIntegrator_ *this)
{
  float32x2_t v2 = vsqrt_f32(vadd_f32(*(float32x2_t *)((char *)this + 228), *(float32x2_t *)((char *)this + 228)));
  if (v2.f32[0] <= v2.f32[1]) {
    v2.f32[0] = v2.f32[1];
  }
  float v3 = *((float *)this + 34);
  return (float)(v2.f32[0] - sqrtf(*((float *)this + 56) + *((float *)this + 56))) > v3
      && MTRestZoneIntegrator_::adaptivePolarBalance(this) > v3
      || MTRestZoneIntegrator_::adaptivePolarBalance(this) > (float)(v3 + v3);
}

BOOL MTRestZoneIntegrator_::shouldDoBiPolarIntegration(MTRestZoneIntegrator_ *this, char a2)
{
  float v2 = 0.0;
  if ((a2 & 1) == 0) {
    float v2 = *((float *)this + 35);
  }
  return MTRestZoneIntegrator_::adaptivePolarBalance(this) > v2;
}

float MTRestZoneIntegrator_::translationDominance(MTRestZoneIntegrator_ *this, char a2)
{
  float v3 = 0.0;
  float v4 = 0.0;
  if ((a2 & 1) == 0) {
    float v4 = *((float *)this + 35);
  }
  float v5 = MTRestZoneIntegrator_::adaptivePolarBalance(this);
  if (v5 <= v4)
  {
    float v6 = *((float *)this + 38);
    float v3 = 1.0;
    if (v5 >= v6)
    {
      float v3 = *((float *)this + 36);
      float v7 = *((float *)this + 37);
      if (v5 <= v7) {
        return (1.0 - v3) * (float)(v7 - v5) / (float)(v7 - v6) + v3;
      }
    }
  }
  return v3;
}

void MTRestZoneIntegrator_::weighDominantMotions(float32x2_t *this, double a2)
{
  MTRestZoneIntegrator_::convertPixelDeltasTo_mm_s((MTRestZoneIntegrator_ *)this, a2);
  if (!MTRestZoneIntegrator_::isLockedOnPolarSymmetric((MTRestZoneIntegrator_ *)this)
    && !MTRestZoneIntegrator_::isLockedOnTranslate((MTRestZoneIntegrator_ *)this))
  {
    int v11 = -1;
    float32x2_t v10 = (float32x2_t)-1;
    int v9 = -1;
    __int32 v4 = this[10].i32[0];
    if (v4 == this[11].i32[0])
    {
      if (v4 == 1)
      {
        float v6 = this + 22;
        float v7 = (float *)&this[27] + 1;
      }
      else
      {
        float v6 = this + 20;
        float v7 = (float *)&this[27];
      }
      float v5 = a2;
      MTRestZoneIntegrator_::accumulateMotionEnvelope((uint64_t)this, v6, &v10, v7, (float *)&v9, (float *)&v11, v5);
    }
    else
    {
      float v8 = a2;
      MTRestZoneIntegrator_::decayMotionEnvelope((uint64_t)this, this + 24, this + 26, (float *)&this[28], (float *)&this[29], (float *)&this[28] + 1, v8);
      MTRestZoneIntegrator_::accumulateMotionEnvelope((uint64_t)this, this + 24, this + 26, (float *)&this[28], (float *)&this[29], (float *)&this[28] + 1, v8);
      MTRestZoneIntegrator_::decayMotionEnvelope((uint64_t)this, this + 20, &v10, (float *)&this[27], (float *)&v9, (float *)&v11, v8);
      MTRestZoneIntegrator_::decayMotionEnvelope((uint64_t)this, this + 22, &v10, (float *)&this[27] + 1, (float *)&v9, (float *)&v11, v8);
    }
  }
}

void MTRestZoneIntegrator_::convertPixelDeltasTo_mm_s(MTRestZoneIntegrator_ *this, double a2)
{
  MTSurfaceDimensions_::convertPixelDeltasToMillimetersPerSecond(*((MTSurfaceDimensions_ **)this + 31), *(MTPoint *)((char *)this + 264), a2);
  *((_DWORD *)this + 7objc_storeStrong(&location, 0) = v4;
  *((_DWORD *)this + 7MTRestZoneIntegrator_::clearMotion(this, 1) = v5;
  MTSurfaceDimensions_::convertPixelDeltaToMillimetersPerSecond(*((MTSurfaceDimensions_ **)this + 31), *((float *)this + 68), a2);
  *((_DWORD *)this + 72) = v6;
  MTSurfaceDimensions_::convertPixelDeltaToMillimetersPerSecond(*((MTSurfaceDimensions_ **)this + 31), *((float *)this + 69), a2);
  *((_DWORD *)this + 73) = v7;
}

void MTRestZoneIntegrator_::integrateRestingZoneMotion(float32x2_t *this, const MTPathStates_ *a2, int a3)
{
  if (a3 <= 1 && this[12].u8[5] >= 2u) {
    MTRestZoneIntegrator_::clearThumbFingerEnvelope(this);
  }
  MTFingerToPathMap_::updateFingerPathMappings((uint64_t)this, a2);
  if (this[11].i32[1])
  {
    MTRestZoneIntegrator_::computeSpeedSimilarity((MTRestZoneIntegrator_ *)this, a2);
    this[37].i32[0] = v6;
    if (a3)
    {
      uint64_t InnermostTouchingPath = MTFingerToPathMap_::getInnermostTouchingPath((MTFingerToPathMap_ *)this, a2);
      OutermostTouchingPath = (MTParserPath_ *)MTFingerToPathMap_::getOutermostTouchingPath((MTFingerToPathMap_ *)this, a2);
      int v9 = (MTRestZoneIntegrator_ *)this;
      float32x2_t v10 = a2;
      int v11 = (MTParserPath_ *)InnermostTouchingPath;
      unsigned __int8 v12 = 1;
    }
    else
    {
      uint64_t InnermostInRangePath = MTFingerToPathMap_::getInnermostInRangePath((MTFingerToPathMap_ *)this, a2);
      OutermostTouchingPath = (MTParserPath_ *)MTFingerToPathMap_::getOutermostInRangePath((MTFingerToPathMap_ *)this, a2);
      int v9 = (MTRestZoneIntegrator_ *)this;
      float32x2_t v10 = a2;
      int v11 = (MTParserPath_ *)InnermostInRangePath;
      unsigned __int8 v12 = 0;
    }
    MTRestZoneIntegrator_::extractMotionDeltas(v9, v10, v11, OutermostTouchingPath, v12);
    double v14 = *((double *)a2 + 1) - *((double *)a2 + 2);
    MTRestZoneIntegrator_::weighDominantMotions(this, v14);
  }
  else
  {
    MTRestZoneIntegrator_::clearMotion(this, 0);
  }
}

void __cxx_global_var_init_46()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_45(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_currentTimestamp", a2);
  }
}

void __cxx_global_var_init_3_45(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_previousTimestamp", a2);
  }
}

void __cxx_global_var_init_4_40(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)114,(char)101,(char)108,(char)101,(char)97,(char)115,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_release", a2);
  }
}

void __cxx_global_var_init_5_40(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)97,(char)99,(char)116,(char)105,(char)118,(char)97,(char)116,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_activation", a2);
  }
}

void __cxx_global_var_init_6_40(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)101,(char)97,(char)114,(char)108,(char)105,(char)101,(char)115,(char)116,(char)78,(char)111,(char)110,(char)68,(char)105,(char)118,(char)105,(char)110,(char)103,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_earliestNonDivingTimestamp", a2);
  }
}

void __cxx_global_var_init_7_40(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)100,(char)105,(char)118,(char)105,(char)110,(char)103,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)67,(char)104,(char)97,(char)110,(char)103,(char)101,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_divingButtonChangeTimestamp", a2);
  }
}

void __cxx_global_var_init_8_41(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)105,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_min", a2);
  }
}

void __cxx_global_var_init_9_25(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_max", a2);
  }
}

void __cxx_global_var_init_10_25(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)66,(char)114,(char)101,(char)97,(char)107,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerBreakTouch_max", a2);
  }
}

MTForceBehavior_ *MTForceBehavior_Configuration::addDefaultBehavior(MTForceBehavior_Configuration *this, MTForceBehavior_ *a2)
{
  unsigned int v4 = MTForceBehavior_::forceSourceFingerCount(a2);
  uint64_t v5 = *(void *)this + 24 * v4;
  int v7 = *(MTForceBehavior_ **)(v5 + 8);
  unint64_t v6 = *(void *)(v5 + 16);
  float v8 = (MTForceBehavior_ **)(v5 + 8);
  if ((unint64_t)v7 >= v6)
  {
    float32x2_t result = (MTForceBehavior_ *)std::vector<MTForceBehavior_>::__push_back_slow_path<MTForceBehavior_ const&>((uint64_t *)(*(void *)this + 24 * v4), a2);
  }
  else
  {
    MTForceBehavior_::MTForceBehavior_(v7, a2);
    float32x2_t result = v7 + 1;
    MTParserPath_ *v8 = v7 + 1;
  }
  MTParserPath_ *v8 = result;
  result[-1].int var2 = 1;
  *((unsigned char *)this + 24) = 1;
  return result;
}

void sub_712B4(_Unwind_Exception *a1)
{
  void *v2 = v1;
  _Unwind_Resume(a1);
}

MTForceBehavior_ *MTForceBehavior_Configuration::pushBehavior(MTForceBehavior_Configuration *this, MTForceBehavior_ *a2)
{
  unsigned int v4 = MTForceBehavior_::forceSourceFingerCount(a2);
  uint64_t v5 = *(void *)this + 24 * v4;
  int v7 = *(MTForceBehavior_ **)(v5 + 8);
  unint64_t v6 = *(void *)(v5 + 16);
  float v8 = (MTForceBehavior_ **)(v5 + 8);
  if ((unint64_t)v7 >= v6)
  {
    float32x2_t result = (MTForceBehavior_ *)std::vector<MTForceBehavior_>::__push_back_slow_path<MTForceBehavior_ const&>((uint64_t *)(*(void *)this + 24 * v4), a2);
  }
  else
  {
    MTForceBehavior_::MTForceBehavior_(v7, a2);
    float32x2_t result = v7 + 1;
    MTParserPath_ *v8 = v7 + 1;
  }
  MTParserPath_ *v8 = result;
  *((unsigned char *)this + 24) = 1;
  return result;
}

void sub_71340(_Unwind_Exception *a1)
{
  void *v2 = v1;
  _Unwind_Resume(a1);
}

void MTForceBehavior_Configuration::clearBehaviors(MTForceBehavior_Configuration *this)
{
  for (uint64_t i = 0; i != 6; ++i)
  {
    float v3 = (uint64_t *)(*(void *)this + 24 * i);
    uint64_t v4 = *v3;
    uint64_t v7 = v3[1];
    unint64_t v6 = v3 + 1;
    uint64_t v5 = v7;
    if (v4 != v7)
    {
      uint64_t v8 = *(void *)this + 24 * i + 16;
      do
      {
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,MTForceBehavior_ *,MTForceBehavior_ *,MTForceBehavior_ *,0>(v4 + 144, v5, v4);
        uint64_t v5 = v9;
        for (unint64_t j = (void *)*v6; j != (void *)v5; std::allocator<MTForceBehavior_>::destroy[abi:ne180100](v8, j))
          j -= 18;
        uint64_t *v6 = v5;
      }
      while (v4 != v5);
    }
  }
  *((unsigned char *)this + 24) = 1;
}

void MTForceBehavior_Configuration::clearNonDefaultBehaviors(MTForceBehavior_Configuration *this)
{
  for (uint64_t i = 0; i != 6; ++i)
  {
    float v3 = (uint64_t *)(*(void *)this + 24 * i);
    uint64_t v4 = *v3;
    uint64_t v7 = v3[1];
    unint64_t v6 = v3 + 1;
    uint64_t v5 = v7;
    if (v4 != v7)
    {
      uint64_t v8 = *(void *)this + 24 * i + 16;
      do
      {
        if (*(_DWORD *)(v4 + 8) == 1)
        {
          v4 += 144;
        }
        else
        {
          std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,MTForceBehavior_ *,MTForceBehavior_ *,MTForceBehavior_ *,0>(v4 + 144, v5, v4);
          uint64_t v5 = v9;
          for (unint64_t j = (void *)*v6; j != (void *)v5; std::allocator<MTForceBehavior_>::destroy[abi:ne180100](v8, j))
            j -= 18;
          uint64_t *v6 = v5;
        }
      }
      while (v4 != v5);
    }
  }
  *((unsigned char *)this + 24) = 1;
}

uint64_t *MTForceBehavior_Configuration::firstFingerBehavior(MTForceBehavior_Configuration *this)
{
  uint64_t v1 = *(void *)this;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3) < 2) {
    return &MTForceBehavior_::Null;
  }
  uint64_t v4 = v1 + 24;
  float v2 = *(uint64_t **)(v1 + 24);
  float v3 = *(uint64_t **)(v4 + 8);
  if (v3 == v2) {
    return &MTForceBehavior_::Null;
  }
  uint64_t v5 = 0;
  for (float32x2_t result = v3 - 18; ; result -= 18)
  {
    int v7 = *((_DWORD *)result + 2);
    uint64_t v8 = 1;
    if (v7 != 2 && (v5 & (v7 != 1)) == 0)
    {
      uint64_t v8 = v5;
      if ((*((unsigned char *)result + 4) & 0x20) != 0) {
        break;
      }
    }
    uint64_t v5 = v8;
    if (result == v2) {
      return &MTForceBehavior_::Null;
    }
  }
  return result;
}

uint64_t *MTForceBehavior_Configuration::secondFingerBehavior(MTForceBehavior_Configuration *this)
{
  uint64_t v1 = *(void *)this;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3) < 2) {
    return &MTForceBehavior_::Null;
  }
  uint64_t v4 = v1 + 24;
  float v2 = *(uint64_t **)(v1 + 24);
  float v3 = *(uint64_t **)(v4 + 8);
  if (v3 == v2) {
    return &MTForceBehavior_::Null;
  }
  uint64_t v5 = 0;
  for (float32x2_t result = v3 - 18; ; result -= 18)
  {
    int v7 = *((_DWORD *)result + 2);
    uint64_t v8 = 1;
    if (v7 != 2 && (v5 & (v7 != 1)) == 0)
    {
      uint64_t v8 = v5;
      if ((*((unsigned char *)result + 4) & 0x40) != 0) {
        break;
      }
    }
    uint64_t v5 = v8;
    if (result == v2) {
      return &MTForceBehavior_::Null;
    }
  }
  return result;
}

uint64_t *MTForceBehavior_Configuration::collectiveBehavior(MTForceBehavior_Configuration *this, int a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3) <= a2) {
    return &MTForceBehavior_::Null;
  }
  uint64_t v4 = (uint64_t **)(*(void *)this + 24 * a2);
  float v2 = *v4;
  float v3 = v4[1];
  if (v3 == *v4) {
    return &MTForceBehavior_::Null;
  }
  uint64_t v5 = 0;
  for (float32x2_t result = v3 - 18; ; result -= 18)
  {
    int v7 = *((_DWORD *)result + 2);
    uint64_t v8 = 1;
    if (v7 != 2 && (v5 & (v7 != 1)) == 0)
    {
      uint64_t v8 = v5;
      if ((*((unsigned char *)result + 4) & 0x80) != 0) {
        break;
      }
    }
    uint64_t v5 = v8;
    if (result == v2) {
      return &MTForceBehavior_::Null;
    }
  }
  return result;
}

void MTForceClickHistory_::MTForceClickHistory_(MTForceClickHistory_ *this, float a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 4objc_storeStrong(&location, 0) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  MTForceClickHistory_::initHistory(this, a2);
}

void sub_716CC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = (void *)v1[4];
  if (v4)
  {
    v1[5] = v4;
    operator delete(v4);
  }
  uint64_t v5 = *v2;
  if (*v2)
  {
    v1[2] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void MTForceClickHistory_::initHistory(MTForceClickHistory_ *this, float a2)
{
  int v3 = 0;
  uint64_t v4 = (void **)((char *)this + 8);
  *((void *)this + 2) = *((void *)this + 1);
  uint64_t v5 = (void **)((char *)this + 32);
  *((void *)this + 5) = *((void *)this + 4);
  *(void *)this = 0;
  float v6 = a2 * 550.0;
  float v7 = a2 * 350.0;
  uint64_t v8 = (char *)this + 24;
  uint64_t v9 = (char *)this + 48;
  do
  {
    int v11 = (float *)*((void *)this + 2);
    unint64_t v10 = *((void *)this + 3);
    if ((unint64_t)v11 >= v10)
    {
      float v13 = (float *)*v4;
      uint64_t v14 = ((char *)v11 - (unsigned char *)*v4) >> 2;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 62) {
        std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v16 = v10 - (void)v13;
      if (v16 >> 1 > v15) {
        unint64_t v15 = v16 >> 1;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        float v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v8, v17);
        float v13 = (float *)*((void *)this + 1);
        int v11 = (float *)*((void *)this + 2);
      }
      else
      {
        float v18 = 0;
      }
      float v19 = (float *)&v18[4 * v14];
      float *v19 = v6;
      unsigned __int8 v12 = v19 + 1;
      while (v11 != v13)
      {
        int v20 = *((_DWORD *)v11-- - 1);
        *((_DWORD *)v19-- - MTRestZoneIntegrator_::clearMotion(this, 1) = v20;
      }
      *((void *)this + MTRestZoneIntegrator_::clearMotion(this, 1) = v19;
      *((void *)this + 2) = v12;
      *((void *)this + 3) = &v18[4 * v17];
      if (v13) {
        operator delete(v13);
      }
    }
    else
    {
      float *v11 = v6;
      unsigned __int8 v12 = v11 + 1;
    }
    *((void *)this + 2) = v12;
    float v22 = (float *)*((void *)this + 5);
    unint64_t v21 = *((void *)this + 6);
    if ((unint64_t)v22 >= v21)
    {
      float v24 = (float *)*v5;
      uint64_t v25 = ((char *)v22 - (unsigned char *)*v5) >> 2;
      unint64_t v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 62) {
        std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v27 = v21 - (void)v24;
      if (v27 >> 1 > v26) {
        unint64_t v26 = v27 >> 1;
      }
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v26;
      }
      if (v28)
      {
        float v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v9, v28);
        float v24 = (float *)*((void *)this + 4);
        float v22 = (float *)*((void *)this + 5);
      }
      else
      {
        float v29 = 0;
      }
      float v30 = (float *)&v29[4 * v25];
      *float v30 = v7;
      float v23 = v30 + 1;
      while (v22 != v24)
      {
        int v31 = *((_DWORD *)v22-- - 1);
        *((_DWORD *)v30-- - MTRestZoneIntegrator_::clearMotion(this, 1) = v31;
      }
      *((void *)this + 4) = v30;
      *((void *)this + 5) = v23;
      *((void *)this + 6) = &v29[4 * v28];
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      float *v22 = v7;
      float v23 = v22 + 1;
    }
    *((void *)this + 5) = v23;
    ++v3;
  }
  while (v3 != 3);
  *(float *)this = v6;
  *((float *)this + MTRestZoneIntegrator_::clearMotion(this, 1) = v7;
}

void MTForceClickHistory_::~MTForceClickHistory_(MTForceClickHistory_ *this)
{
  float v2 = (void *)*((void *)this + 1);
  *((void *)this + 2) = v2;
  int v3 = (void *)*((void *)this + 4);
  *((void *)this + 5) = v3;
  *(void *)this = 0;
  if (v3)
  {
    operator delete(v3);
    float v2 = (void *)*((void *)this + 1);
  }
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

float MTForceClickHistory_::updateForceArray(float a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(float **)a3;
  float v6 = *(float **)(a3 + 8);
  unint64_t v7 = (unint64_t)v6 - *(void *)a3;
  if (v7 >= 0x75)
  {
    uint64_t v8 = *(float **)a3;
    do
    {
      int64_t v9 = (char *)v6 - (char *)(v5 + 1);
      if (v6 != v5 + 1)
      {
        memmove(v5, v5 + 1, (char *)v6 - (char *)(v5 + 1));
        uint64_t v8 = *(float **)a3;
      }
      --v6;
      *(void *)(a3 + 8) = (char *)v5 + v9;
      unint64_t v7 = (char *)v5 + v9 - (char *)v8;
      uint64_t v5 = v8;
    }
    while (v7 > 0x74);
    uint64_t v5 = v8;
  }
  unint64_t v10 = *(void *)(a3 + 16);
  if ((unint64_t)v6 >= v10)
  {
    unint64_t v12 = v7 >> 2;
    uint64_t v13 = v10 - (void)v5;
    if (v13 >> 1 <= (v7 >> 2) + 1) {
      uint64_t v14 = v12 + 1;
    }
    else {
      uint64_t v14 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a3 + 16, v15);
    unint64_t v17 = *(float **)a3;
    float v18 = *(float **)(a3 + 8);
    uint64_t v5 = (float *)&v16[4 * v12];
    int v20 = &v16[4 * v19];
    *uint64_t v5 = a1;
    uint64_t v11 = (uint64_t)(v5 + 1);
    while (v18 != v17)
    {
      int v21 = *((_DWORD *)v18-- - 1);
      *((_DWORD *)v5-- - MTRestZoneIntegrator_::clearMotion(this, 1) = v21;
    }
    *(void *)a3 = v5;
    *(void *)(a3 + 8) = v11;
    *(void *)(a3 + 16) = v20;
    if (v17)
    {
      operator delete(v17);
      uint64_t v5 = *(float **)a3;
    }
  }
  else
  {
    float *v6 = a1;
    uint64_t v11 = (uint64_t)(v6 + 1);
  }
  *(void *)(a3 + 8) = v11;
  float v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v24, v5, v11, (v11 - (uint64_t)v5) >> 2);
  char v27 = -86;
  std::__sort<std::__less<float,float> &,float *>();
  if ((unint64_t)((char *)v25 - (char *)v24) >= 9)
  {
    float v22 = (float)((float)(v24[(int)((unint64_t)((char *)v25 - (char *)v24) >> 2) / 2 - 1]
                        + v24[(int)((unint64_t)((char *)v25 - (char *)v24) >> 2) / 2])
                + v24[(int)((unint64_t)((char *)v25 - (char *)v24) >> 2) / 2 + 1])
        / 3.0;
LABEL_23:
    uint64_t v25 = v24;
    operator delete(v24);
    return v22;
  }
  float v22 = 0.0;
  if (v24) {
    goto LABEL_23;
  }
  return v22;
}

void sub_71AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTForceManagement_::MTForceManagement_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v7 = a6;
  *(void *)a1 = off_141D78;
  MTForceBehavior_::MTForceBehavior_((MTForceBehavior_ *)(a1 + 40));
  std::vector<std::vector<MTForceBehavior_>>::vector((void *)(a1 + 272), 6uLL);
  *(void *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 40objc_storeStrong(&location, 0) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 32objc_storeStrong(&location, 0) = 0u;
  MTForceThresholding_::MTForceThresholding_((MTForceThresholding_ *)v9, (MTForceManagement_ *)a1);
  std::vector<MTForceThresholding_>::vector((void *)(a1 + 472), 0x20uLL, (const MTForceThresholding_ *)v9);
  MTForceThresholding_::~MTForceThresholding_((MTForceThresholding_ *)v9);
  *(void *)(a1 + 512) = 0x100000001;
  MTForceClickHistory_::MTForceClickHistory_((MTForceClickHistory_ *)(a1 + 520), 1.0);
  *(unsigned char *)(a1 + 604) = 1;
  *(_DWORD *)(a1 + 605) = 0;
  *(void *)(a1 + 616) = objc_retainBlock(v7);
  MTParameterFactory_::initForceThresholdQualifiers(a1 + 304);
  MTParameterFactory_::initForceActuationQualifiers(a1 + 440);
  MTForceManagement_::clearState((MTForceManagement_ *)a1, 0);

  return a1;
}

{
  return MTForceManagement_::MTForceManagement_(a1, a2, a3, a4, 0, a6);
}

void sub_71C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<MTForceThresholding_>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::vector<std::vector<MTForceBehavior_>>::__destroy_vector::operator()[abi:ne180100](&a9);
  MTForceBehavior_::~MTForceBehavior_(v10);

  _Unwind_Resume(a1);
}

void MTForceManagement_::setDisableClickWaveformAdaptation(MTForceManagement_ *this, char a2)
{
  int v3 = (char *)this + 440;
  *((unsigned char *)this + 468) = a2 ^ 1;
  uint64_t v4 = 480;
  uint64_t v5 = 31;
  do
  {
    MTForceThresholding_::setForceActuationQualifiers(*((void *)this + 59) + v4, (uint64_t)v3);
    v4 += 480;
    --v5;
  }
  while (v5);
}

MTForceManagement_ *MTForceManagement_::setDisableForceThresholdAdaptation(MTForceManagement_ *this, char a2)
{
  float v2 = (unsigned char *)(*((void *)this + 59) + 904);
  uint64_t v3 = 31;
  do
  {
    unsigned char *v2 = a2;
    v2 += 480;
    --v3;
  }
  while (v3);
  return this;
}

void MTForceManagement_::setFirstStageClickPreference(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 512) != a2)
  {
    float ClickThresholdMultiplier = MTForceThresholding_::getClickThresholdMultiplier(*(void *)(a1 + 472), a2);
    MTForceClickHistory_::initHistory((MTForceClickHistory_ *)(a1 + 520), ClickThresholdMultiplier);
  }
  *(_DWORD *)(a1 + 512) = a2;
  uint64_t v5 = *(void *)(a1 + 472) + 336;
  uint64_t v6 = -15360;
  do
  {
    *(_DWORD *)(v5 + v6 + 1536objc_storeStrong(&location, 0) = a2;
    v6 += 480;
  }
  while (v6);
}

uint64_t MTForceManagement_::setSecondStageClickPreference(uint64_t result, int a2)
{
  *(_DWORD *)(result + 516) = a2;
  uint64_t v2 = *(void *)(result + 472) + 340;
  uint64_t v3 = -15360;
  do
  {
    *(_DWORD *)(v2 + v3 + 1536objc_storeStrong(&location, 0) = a2;
    v3 += 480;
  }
  while (v3);
  return result;
}

uint64_t MTForceManagement_::whichForceButtonActivated(MTForceManagement_ *this)
{
  if (*((unsigned char *)this + 8)
    && (int v1 = *((_DWORD *)this + 66), v2 = *((void *)this + 59), *(int *)(v2 + 480 * v1 + 324) >= 1))
  {
    return MTForceBehavior_::whichButtonBehavior((MTForceBehavior_ *)(v2 + 480 * v1 + 176));
  }
  else
  {
    return 0;
  }
}

BOOL MTForceManagement_::isForceButtonActivated(MTForceManagement_ *this)
{
  return (int)MTForceManagement_::whichForceButtonActivated(this) > 0;
}

double MTForceManagement_::constructForceEvent@<D0>(MTForceManagement_ *this@<X0>, const MTPathStates_ *a2@<X3>, int a3@<W1>, int a4@<W2>, uint64_t a5@<X8>)
{
  uint64_t v8 = *((void *)this + 59);
  uint64_t v9 = v8 + 480 * a3;
  unint64_t v10 = (_DWORD *)(v9 + 324);
  *(void *)((char *)this + 228) = *(void *)(v9 + 324);
  uint64_t v11 = *((void *)a2 + 35);
  unint64_t v12 = (const MTForceFilter_ *)(v11 + 568 * a4 + 288);
  uint64_t v13 = (const MTParserPath_ *)(v11 + 568 * a3);
  float v14 = MTForceThresholding_::preReleaseProgress(v9, (uint64_t)v12);
  float v15 = MTForceThresholding_::preActivationProgress(v9, (uint64_t)v12);
  float v16 = MTForceThresholding_::postActivationProgress(v9, (uint64_t)v12);
  int v17 = *((_DWORD *)this + 57);
  float v18 = 0.0;
  if (v17 == *((_DWORD *)this + 58) && *(_DWORD *)(v9 + 176) != 11) {
    float v18 = *((float *)this + 87);
  }
  float v46 = (MTForceBehavior_ *)(v9 + 176);
  float v19 = (float)(v14 * (float)(1.0 - v18)) + (float)(v18 * *((float *)this + 63));
  int v20 = (_DWORD *)(v9 + 328);
  float v21 = (float)(v15 * (float)(1.0 - v18)) + (float)(v18 * *((float *)this + 64));
  *((float *)this + 63) = v19;
  *((float *)this + 64) = v21;
  float v22 = (float)(v16 * (float)(1.0 - v18)) + (float)(v18 * *((float *)this + 65));
  *((float *)this + 65) = v22;
  int v23 = *((_DWORD *)this + 46);
  BOOL v24 = v23 == 8 || v23 == 2;
  if (v24) {
    int v25 = 16;
  }
  else {
    int v25 = 0;
  }
  if (v24) {
    int v26 = 8;
  }
  else {
    int v26 = 2;
  }
  if (v17 <= 0) {
    int v27 = v25;
  }
  else {
    int v27 = v26;
  }
  *((_DWORD *)this + 46) = v27;
  float v28 = *((float *)this + 109);
  float Release = MTForceThresholding_::thresholdForNextRelease((MTForceThresholding_ *)v9, v12, v13);
  float Activation = MTForceThresholding_::thresholdForNextActivation((MTForceThresholding_ *)v9, v12, v13);
  unint64_t v31 = *((unsigned int *)this + 57);
  uint64_t v32 = *(void *)(v8 + 480 * a3 + 432);
  float v33 = 0.0;
  if (v31 < (*(void *)(v8 + 480 * a3 + 440) - v32) >> 2) {
    float v33 = *(float *)(v32 + 4 * v31);
  }
  if (*v10 == *v20)
  {
    int v34 = 0;
  }
  else if ((int)v31 > *((_DWORD *)this + 58))
  {
    int v34 = 1;
  }
  else
  {
    int v34 = 2;
  }
  double v35 = (float)(Activation / v28);
  if ((v31 + 1) >= *(_DWORD *)(v8 + 480 * a3 + 192)) {
    double v36 = 1.0;
  }
  else {
    double v36 = v35;
  }
  if ((int)v31 >= 1) {
    double v37 = (float)(Release / v28);
  }
  else {
    double v37 = 0.0;
  }
  double v38 = (float)(v33 / v28);
  float v39 = v21 - v19;
  int var0 = v46->var0;
  unsigned int v41 = MTForceBehavior_::forceSourceFingerCount(v46);
  int v42 = *((_DWORD *)this + 57);
  if ((int)v31 <= 0) {
    double v43 = 0.0;
  }
  else {
    double v43 = v38;
  }
  double v44 = fmax(fmin((float)(*(float *)(v8 + 480 * a3 + 380) / *(float *)(v8 + 480 * a3 + 140)), 1.0), 0.0);
  *(_DWORD *)a5 = v27;
  *(_DWORD *)(a5 + 4) = var0;
  *(_DWORD *)(a5 + 8) = v41;
  *(float *)(a5 + 12) = v39;
  *(_DWORD *)(a5 + 16) = v42;
  *(float *)(a5 + 2objc_storeStrong(&location, 0) = v22;
  *(float *)&double v44 = v44;
  *(_DWORD *)(a5 + 24) = v42;
  *(_DWORD *)(a5 + 28) = v34;
  *(double *)(a5 + 32) = v36;
  *(double *)(a5 + 4objc_storeStrong(&location, 0) = v43;
  double result = *(float *)&v44;
  *(double *)(a5 + 48) = v37;
  *(double *)(a5 + 56) = *(float *)&v44;
  *(void *)(a5 + 64) = 0;
  return result;
}

void MTForceManagement_::updateStatusVariablesFromForceEvent(uint64_t a1, int a2, int *a3, MTPathStates_ *this)
{
  int v6 = *a3;
  int v5 = a3[1];
  int v7 = a3[2];
  int v8 = a3[4];
  uint64_t v9 = *(void *)(a1 + 472);
  uint64_t v10 = v9 + 480 * a2;
  *(void *)&long long v11 = *(void *)(v10 + 344);
  *((void *)&v11 + MTRestZoneIntegrator_::clearMotion(this, 1) = *(void *)(v10 + 360);
  *(_OWORD *)(a1 + 236) = v11;
  if (v6 == 2) {
    *(_DWORD *)(a1 + 22objc_storeStrong(&location, 0) = *(_DWORD *)(a1 + 188);
  }
  if (v8)
  {
    uint64_t v12 = v9 + 480 * a2;
    *(_DWORD *)(a1 + 188) = *(_DWORD *)(v12 + 332);
    *(_DWORD *)(a1 + 192) = *(_DWORD *)(v12 + 376);
    *(double *)(a1 + 20objc_storeStrong(&location, 0) = *(double *)(v12 + 416) - *(double *)(v12 + 408);
    *(_DWORD *)(a1 + 216) = *(_DWORD *)(v12 + 400);
  }
  if (*(_DWORD *)(a1 + 228) == 1 && !*(_DWORD *)(a1 + 232))
  {
    *(float *)(a1 + 208) = MTPathStates_::getPrePixelatedPositionFromPostPixelatedPosition(this, a2);
    *(_DWORD *)(a1 + 212) = v13;
  }
  if (v6 == 16)
  {
    if (*(float *)(a1 + 216) <= *(float *)(a1 + 424))
    {
      if (*(_DWORD *)(a1 + 188) == 1 && *(_DWORD *)(a1 + 220) == 1 && v7 == 1) {
        *(float *)(a1 + 524) = MTForceClickHistory_::updateForceArray(*(float *)(a1 + 192), a1, a1 + 552);
      }
    }
    else
    {
      *(float *)(a1 + 52objc_storeStrong(&location, 0) = MTForceClickHistory_::updateForceArray(*(float *)(a1 + 192), a1, a1 + 528);
    }
  }
  BOOL v15 = v5 == 11 && v8 != 0;
  *(unsigned char *)(a1 + 1MTRestZoneIntegrator_::clearMotion(this, 1) = v15;
}

void MTForceManagement_::appendForceStageEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (_os_feature_enabled_impl())
  {
    mach_absolute_time();
    uint64_t ForceStageEvent = IOHIDEventCreateForceStageEvent();
  }
  else
  {
    LODWORD(v5) = 0;
    uint64_t ForceStageEvent = +[HIDEvent vendorDefinedEvent:usagePage:usage:version:data:length:options:](HIDEvent, "vendorDefinedEvent:usagePage:usage:version:data:length:options:", mach_absolute_time(), 65280, 17, 1, a3, 48, v5, 0);
  }
  id v6 = (id)ForceStageEvent;
  if (ForceStageEvent) {
    IOHIDEventAppendEvent();
  }
}

void sub_72284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void MTForceManagement_::appendThresholdInfo()
{
  IOHIDEventGetTimeStamp();
  uint64_t VendorDefinedEvent = IOHIDEventCreateVendorDefinedEvent();
  if (VendorDefinedEvent)
  {
    int v1 = (const void *)VendorDefinedEvent;
    IOHIDEventAppendEvent();
    CFRelease(v1);
  }
}

void MTForceManagement_::appendClickInfo()
{
  IOHIDEventGetTimeStamp();
  uint64_t VendorDefinedEvent = IOHIDEventCreateVendorDefinedEvent();
  if (VendorDefinedEvent)
  {
    int v1 = (const void *)VendorDefinedEvent;
    IOHIDEventAppendEvent();
    CFRelease(v1);
  }
}

BOOL MTForceManagement_::actuateForceAndHIDEvents(MTForceManagement_ *this, MTPathStates_ *a2, __IOHIDEvent *a3, char a4)
{
  if (*((unsigned char *)this + 606))
  {
    if ((a4 & 1) == 0) {
      MTForceManagement_::actuateOnStageChanges(this, a2);
    }
    if (*((unsigned char *)this + 8))
    {
      unsigned int v7 = *((_DWORD *)this + 66);
      if (v7) {
        goto LABEL_6;
      }
    }
    else
    {
      unsigned int v7 = MTForceManagement_::strongestProgressPathID(this, a2, 0);
      if (*((_DWORD *)this + 66))
      {
LABEL_6:
        int v8 = MTForceManagement_::strongestForcePathID(this, a2, 0);
        if ((v7 & 0x80000000) != 0) {
          return *((unsigned __int8 *)this + 9) != *((unsigned __int8 *)this + 10);
        }
        goto LABEL_13;
      }
    }
    int v8 = 0;
    if ((v7 & 0x80000000) != 0) {
      return *((unsigned __int8 *)this + 9) != *((unsigned __int8 *)this + 10);
    }
LABEL_13:
    *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v11 + MTRestZoneIntegrator_::clearMotion(this, 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v19.var8.__end_cap_.__value_ = v11;
    *(_OWORD *)&v19.var9.__end_ = v11;
    *(_OWORD *)&v19.var7.__end_ = v11;
    *(_OWORD *)&v19.var8.__begin_ = v11;
    *(_OWORD *)&v19.var6.__begin_ = v11;
    *(_OWORD *)&v19.var6.__end_cap_.__value_ = v11;
    *(_OWORD *)&v19.float var4 = v11;
    *(_OWORD *)&v19.var5.int var1 = v11;
    *(_OWORD *)&v19.int var0 = v11;
    MTForceBehavior_::MTForceBehavior_(&v19, (const MTForceBehavior_ *)(*((void *)this + 59) + 480 * v7 + 176));
    memset(&v18[1], 255, 40);
    long long v17 = xmmword_1120D0;
    v18[0] = unk_1120E0;
    MTForceManagement_::constructForceEvent(this, a2, v7, v8, (uint64_t)&v17);
    v15[2] = v18[1];
    v15[3] = v18[2];
    uint64_t v16 = *(void *)&v18[3];
    v15[0] = v17;
    v15[1] = v18[0];
    MTForceManagement_::updateStatusVariablesFromForceEvent((uint64_t)this, v7, (int *)v15, a2);
    if (!*((unsigned char *)this + 607) || (int v13 = *((_DWORD *)this + 145), v13 == 8) || v13 == 2)
    {
      v14[0] = *(_OWORD *)((char *)v18 + 8);
      v14[1] = *(_OWORD *)((char *)&v18[1] + 8);
      v14[2] = *(_OWORD *)((char *)&v18[2] + 8);
      MTForceManagement_::appendForceStageEvent(v12, (uint64_t)a3, (uint64_t)v14);
    }
    if (*((unsigned char *)this + 224))
    {
      if (*((_DWORD *)this + 57) != *((_DWORD *)this + 58)) {
        MTForceManagement_::appendThresholdInfo();
      }
      if (v17 == 16) {
        MTForceManagement_::appendClickInfo();
      }
    }
    if (v19.var9.__begin_)
    {
      v19.var9.__end_ = v19.var9.__begin_;
      operator delete(v19.var9.__begin_);
    }
    if (v19.var8.__begin_)
    {
      v19.var8.__end_ = v19.var8.__begin_;
      operator delete(v19.var8.__begin_);
    }
    if (v19.var7.__begin_)
    {
      v19.var7.__end_ = v19.var7.__begin_;
      operator delete(v19.var7.__begin_);
    }
    if (v19.var6.__begin_)
    {
      v19.var6.__end_ = v19.var6.__begin_;
      operator delete(v19.var6.__begin_);
    }
    if (v19.var5.var0)
    {
      v19.var5.int var1 = v19.var5.var0;
      operator delete(v19.var5.var0);
    }
    return *((unsigned __int8 *)this + 9) != *((unsigned __int8 *)this + 10);
  }
  uint64_t v9 = MTLoggingPlugin();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
    MTForceManagement_::actuateForceAndHIDEvents(v9);
  }

  return 0;
}

void sub_72684(_Unwind_Exception *a1)
{
  MTForceBehavior_::~MTForceBehavior_((MTForceBehavior_ *)(v1 - 192));
  _Unwind_Resume(a1);
}

MTForceManagement_ *MTForceManagement_::actuateOnStageChanges(MTForceManagement_ *this, const MTPathStates_ *a2)
{
  *((unsigned char *)this + 1objc_storeStrong(&location, 0) = *((unsigned char *)this + 9);
  double result = (MTForceManagement_ *)MTForceManagement_::whichForceButtonActivated(this);
  *((unsigned char *)this + 9) = result != 0;
  if (*((unsigned char *)this + 8))
  {
    int v5 = *((_DWORD *)this + 66);
    uint64_t v6 = *((void *)this + 59);
    uint64_t v7 = v6 + 480 * v5;
    int v8 = *(_DWORD *)(v7 + 324);
    int v9 = *(_DWORD *)(v7 + 328);
    if (v8 != v9)
    {
      int v10 = *((unsigned __int8 *)this + 12);
      double v11 = *((double *)a2 + 1);
      float v12 = *((float *)this + 4);
      *((unsigned char *)this + 12) = v8 < v9;
      if (v8 >= v9)
      {
        *((double *)this + 4) = v11;
        return MTForceManagement_::actuateThresholderPath(this, v5);
      }
      else
      {
        *((double *)this + 3) = v11;
        double result = (MTForceManagement_ *)MTForceBehavior_::operator=((uint64_t)this + 40, v6 + 480 * v5 + 176);
        if (!v10 || (float v13 = v11 - v12, v13 > 0.2))
        {
          MTForceManagement_::actuateThresholderPath(this, *((_DWORD *)this + 66));
          double result = (MTForceManagement_ *)MTForceThresholding_::actuationWaveformID((MTForceThresholding_ *)(*((void *)this + 59) + 480 * *((int *)this + 66)));
          if (result)
          {
            float v14 = *((double *)a2 + 1);
            *((float *)this + 4) = v14;
          }
        }
      }
    }
  }
  return result;
}

uint64_t MTForceManagement_::strongestProgressPathID(MTForceManagement_ *this, const MTPathStates_ *a2, int a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  int v8 = 0;
  float v9 = 0.0;
  uint64_t v10 = 0xFFFFFFFFLL;
  do
  {
    double v11 = (MTForceThresholding_ *)(*((void *)this + 59) + v6);
    if (*((_DWORD *)v11 + 44)
      && MTForceThresholding_::fingersMatchBehavior(v11, a2, v7)
      && (!a3 || v7 && v7 != *((_DWORD *)this + 66)))
    {
      float v12 = (MTForceThresholding_ *)(*((void *)this + 59) + v6);
      int v13 = (*((_DWORD *)v12 + 45) >> 7) & 1;
      float v14 = MTForceThresholding_::rescaleForceAsLadderProgress(v12, a2);
      BOOL v15 = v14 <= 0.0 || v13 <= v8;
      if (!v15 || (v14 > v9 ? (BOOL v16 = v13 < v8) : (BOOL v16 = 1), !v16))
      {
        float v9 = v14;
        uint64_t v10 = v7;
        int v8 = v13;
      }
    }
    ++v7;
    v6 += 480;
  }
  while (v7 != 32);
  return v10;
}

uint64_t MTForceManagement_::strongestForcePathID(MTForceManagement_ *this, const MTPathStates_ *a2, int a3)
{
  uint64_t v6 = 0;
  float v7 = 0.0;
  uint64_t v8 = 1;
  uint64_t v9 = 480;
  uint64_t v10 = 896;
  do
  {
    if (MTForceThresholding_::fingersMatchBehavior((MTForceThresholding_ *)(*((void *)this + 59) + v9), a2, v8)&& (!a3 || v8 != *((_DWORD *)this + 66)))
    {
      uint64_t v11 = *((void *)a2 + 35);
      if (*(float *)(v11 + v10) <= v7)
      {
        uint64_t v6 = v6;
      }
      else
      {
        float v7 = *(float *)(v11 + v10);
        uint64_t v6 = v8;
      }
    }
    ++v8;
    v9 += 480;
    v10 += 568;
  }
  while (v8 != 32);
  return v6;
}

MTForceManagement_ *MTForceManagement_::actuateThresholderPath(MTForceManagement_ *this, int a2)
{
  uint64_t v2 = this;
  uint64_t v3 = *((void *)this + 59);
  if (a2) {
    uint64_t v4 = 500;
  }
  else {
    uint64_t v4 = 496;
  }
  if (a2) {
    uint64_t v5 = 508;
  }
  else {
    uint64_t v5 = 504;
  }
  if (*((unsigned char *)this + 468) && !*(_DWORD *)(v3 + 480 * a2 + 328) && *(int *)(v3 + 480 * a2 + 324) >= 1)
  {
    float v6 = *((float *)this + 114);
    double v7 = (float)(*(float *)((char *)this + v4) - v6);
    double v8 = v6;
    *(float *)&double v7 = v7 / (1.0 - v8);
    uint64_t v9 = v3 + 480 * a2;
    *(float *)&double v7 = (float)(*((float *)this + 111) * *(float *)&v7)
                  + (1.0 - *((float *)this + 111)) * *(float *)(v9 + 368);
    *(float *)&double v7 = v8 + (1.0 - v8) * *(float *)&v7;
    *(_DWORD *)((char *)this + v4) = LODWORD(v7);
    *(float *)&double v7 = (float)(*((float *)this + 112) * *(float *)((char *)this + v5))
                  + (1.0 - *((float *)this + 112)) * *(float *)(v9 + 372);
    *(_DWORD *)((char *)this + v5) = LODWORD(v7);
  }
  uint64_t v10 = *((void *)this + 77);
  if (v10)
  {
    uint64_t v11 = 516;
    if (*(int *)(v3 + 480 * a2 + 324) < 2) {
      uint64_t v11 = 512;
    }
    uint64_t v12 = *(unsigned int *)((char *)this + v11);
    uint64_t v13 = MTForceThresholding_::actuationWaveformID((MTForceThresholding_ *)(v3 + 480 * a2));
    v14.n128_u32[0] = *(_DWORD *)((char *)v2 + v4);
    v15.n128_u32[0] = *(_DWORD *)((char *)v2 + v5);
    BOOL v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128, __n128))(v10 + 16);
    return (MTForceManagement_ *)v16(v10, v13, v12, v14, v15);
  }
  return this;
}

MTForceManagement_ *MTForceManagement_::clearState(MTForceManagement_ *this, char a2)
{
  uint64_t v2 = this;
  if ((a2 & 1) != 0 || !*((unsigned char *)this + 8) || !*((unsigned char *)this + 608))
  {
    *(_WORD *)((char *)this + 9) = 0;
    MTForceManagement_::primeBasicBehaviors(this, 0);
    __asm { FMOV            V0.4S, #1.0 }
    *((_OWORD *)v2 + 3MTRestZoneIntegrator_::clearMotion(this, 1) = _Q0;
    *((unsigned char *)v2 + 12) = 0;
    *((_DWORD *)v2 + 4) = 0;
    *((void *)v2 + 3) = 0;
    *((void *)v2 + 4) = 0;
    MTForceBehavior_::operator=((uint64_t)v2 + 40, (uint64_t)&MTForceBehavior_::Null);
    *((_DWORD *)v2 + 48) = 0;
    *((unsigned char *)v2 + 1MTRestZoneIntegrator_::clearMotion(this, 1) = 0;
    *((void *)v2 + 23) = 0;
    *((void *)v2 + 26) = 0;
    *((void *)v2 + 27) = 0;
    *((void *)v2 + 25) = 0;
    *((unsigned char *)v2 + 224) = 0;
    *(_OWORD *)((char *)v2 + 228) = 0u;
    *(_OWORD *)((char *)v2 + 244) = 0u;
    *((_DWORD *)v2 + 65) = 0;
    *((unsigned char *)v2 + 468) = CFPreferencesGetAppBooleanValue(@"DisableClickWaveformAdaptation", @"com.apple.MultitouchSupport", 0) == 0;
    uint64_t v8 = 31;
    uint64_t v9 = 480;
    do
    {
      MTForceThresholding_::setForceActuationQualifiers(*((void *)v2 + 59) + v9, (uint64_t)v2 + 440);
      v9 += 480;
      --v8;
    }
    while (v8);
    this = (MTForceManagement_ *)CFPreferencesGetAppBooleanValue(@"DisableForceThresholdAdaptation", @"com.apple.MultitouchSupport", 0);
    uint64_t v10 = (BOOL *)(*((void *)v2 + 59) + 904);
    uint64_t v11 = 31;
    do
    {
      BOOL *v10 = this != 0;
      v10 += 480;
      --v11;
    }
    while (v11);
  }
  return this;
}

void MTForceManagement_::primeBasicBehaviors(MTForceManagement_ *this, int a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  *((unsigned char *)this + 8) = 0;
  *((_DWORD *)this + 66) = 0;
  do
  {
    MTForceThresholding_::setForceBehavior((MTForceThresholding_ *)(*((void *)this + 59) + v4), (const MTForceBehavior_ *)&MTForceBehavior_::Null, v5++);
    v4 += 480;
  }
  while (v5 != 32);
  float v6 = MTForceBehavior_Configuration::collectiveBehavior((MTForceBehavior_Configuration *)((char *)this + 272), a2);
  MTForceThresholding_::setForceBehavior(*((MTForceThresholding_ **)this + 59), (const MTForceBehavior_ *)v6, 0);
  FingerBehavior = MTForceBehavior_Configuration::firstFingerBehavior((MTForceBehavior_Configuration *)((char *)this + 272));
  uint64_t v8 = -31;
  uint64_t v9 = 480;
  do
  {
    MTForceThresholding_::setForceBehavior((MTForceThresholding_ *)(*((void *)this + 59) + v9), (const MTForceBehavior_ *)FingerBehavior, v8 + 32);
    v9 += 480;
  }
  while (!__CFADD__(v8++, 1));
  *((unsigned char *)this + 296) = 0;
}

void MTForceManagement_::analyzeAndManageStrongestForces(MTForceManagement_ *this, MTPathStates_ *a2)
{
  if (*((unsigned char *)this + 8))
  {
    MTForceManagement_::managePostActivation(this, a2);
  }
  else
  {
    MTForceManagement_::primeBasicBehaviors(this, *((_DWORD *)this + 144));
    MTForceManagement_::managePreActivation(this, a2);
  }
}

void MTForceManagement_::managePreActivation(MTForceManagement_ *this, MTPathStates_ *a2)
{
  MTForceManagement_::analyzeDistributedForces(this, a2);
  unsigned int v4 = MTForceManagement_::strongestProgressPathID(this, a2, 0);
  if ((v4 & 0x80000000) == 0)
  {
    uint64_t v5 = *((void *)this + 59);
    if (*(int *)(v5 + 480 * v4 + 324) >= 1
      && !*(_DWORD *)(v5 + 480 * v4 + 328)
      && *((double *)a2 + 1) - *((double *)this + 3) > *((float *)this + 85))
    {
      MTForceManagement_::lockBehaviorsOnActivatedFinger(this, v4);
    }
  }
}

void MTForceManagement_::managePostActivation(MTForceManagement_ *this, MTPathStates_ *a2)
{
  if (*(_DWORD *)(*((void *)this + 59) + 480 * *((int *)this + 66) + 324))
  {
    MTForceManagement_::analyzeDistributedForces(this, a2);
  }
  else
  {
    MTForceManagement_::primeBasicBehaviors(this, *((_DWORD *)this + 144));
    MTForceManagement_::managePreActivation(this, a2);
  }
}

MTForceThresholding_ *MTForceManagement_::analyzeDistributedForces(MTForceManagement_ *this, MTPathStates_ *a2)
{
  int v4 = MTForceManagement_::strongestForcePathID(this, a2, 0);
  uint64_t v5 = 0;
  float v6 = *((float *)this + 130);
  float v7 = *((float *)this + 131);
  uint64_t v8 = 32;
  do
  {
    double result = (MTForceThresholding_ *)(*((void *)this + 59) + v5);
    if (*((_DWORD *)result + 44)) {
      double result = (MTForceThresholding_ *)MTForceThresholding_::analyzeForceAndStage(result, a2, v4, (const MTForceBehavior_ *)((char *)this + 40), *((double *)this + 3), *((double *)this + 4), *((unsigned __int8 *)this + 604), v7, v6);
    }
    v5 += 480;
    --v8;
  }
  while (v8);
  return result;
}

void MTForceManagement_::lockBehaviorsOnActivatedFinger(MTForceManagement_ *this, unsigned int a2)
{
  *((unsigned char *)this + 8) = 1;
  *((_DWORD *)this + 66) = a2;
  if (a2)
  {
    MTForceThresholding_::setForceBehavior(*((MTForceThresholding_ **)this + 59), (const MTForceBehavior_ *)&MTForceBehavior_::Null, 0);
    int v4 = MTForceBehavior_Configuration::secondFingerBehavior((MTForceBehavior_Configuration *)((char *)this + 272));
    uint64_t v5 = 480;
    uint64_t v6 = 480 * a2;
    int v7 = 1;
    uint64_t v8 = 14880;
    do
    {
      if (v6 != v5) {
        MTForceThresholding_::setForceBehavior((MTForceThresholding_ *)(*((void *)this + 59) + v5), (const MTForceBehavior_ *)v4, v7);
      }
      ++v7;
      v5 += 480;
      v8 -= 480;
    }
    while (v8);
  }
  else
  {
    uint64_t v9 = -31;
    uint64_t v10 = 480;
    do
    {
      MTForceThresholding_::setForceBehavior((MTForceThresholding_ *)(*((void *)this + 59) + v10), (const MTForceBehavior_ *)&MTForceBehavior_::Null, v9 + 32);
      v10 += 480;
    }
    while (!__CFADD__(v9++, 1));
  }
}

float MTForceManagement_::setOverrideBehavior(MTForceManagement_ *this, MTForceBehavior_ *a2)
{
  unsigned int v4 = MTForceBehavior_::forceSourceFingerCount((MTForceBehavior_ *)(*((void *)this + 59)
                                                                                 + 480 * *((int *)this + 66)
                                                                                 + 176));
  if (v4 == MTForceBehavior_::forceSourceFingerCount(a2) && *((unsigned char *)this + 8) && a2->var0)
  {
    int v6 = *((_DWORD *)this + 66);
    int v7 = (MTForceThresholding_ *)(*((void *)this + 59) + 480 * v6);
    return MTForceThresholding_::updateForceBehavior(v7, a2, v6);
  }
  return result;
}

void MTForceBehavior_::MTForceBehavior_(MTForceBehavior_ *this, const MTForceBehavior_ *a2)
{
  long long v4 = *(_OWORD *)&a2->var0;
  this->float var4 = a2->var4;
  *(_OWORD *)&this->int var0 = v4;
  this->var5.int var0 = 0;
  this->var5.int var1 = 0;
  this->var5.var2.int var0 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&this->var5.var0, a2->var5.var0, (uint64_t)a2->var5.var1, a2->var5.var1 - a2->var5.var0);
  this->var6.__begin_ = 0;
  this->var6.__end_ = 0;
  this->var6.__end_cap_.__value_ = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this->var6.__begin_, a2->var6.__begin_, (uint64_t)a2->var6.__end_, a2->var6.__end_ - a2->var6.__begin_);
  this->var7.__begin_ = 0;
  this->var7.__end_ = 0;
  this->var7.__end_cap_.__value_ = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this->var7.__begin_, a2->var7.__begin_, (uint64_t)a2->var7.__end_, a2->var7.__end_ - a2->var7.__begin_);
  this->var8.__begin_ = 0;
  this->var8.__end_ = 0;
  this->var8.__end_cap_.__value_ = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this->var8.__begin_, a2->var8.__begin_, (uint64_t)a2->var8.__end_, a2->var8.__end_ - a2->var8.__begin_);
  this->var9.__begin_ = 0;
  this->var9.__end_ = 0;
  this->var9.__end_cap_.__value_ = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this->var9.__begin_, a2->var9.__begin_, (uint64_t)a2->var9.__end_, a2->var9.__end_ - a2->var9.__begin_);
}

void sub_7316C(_Unwind_Exception *exception_object)
{
  int v7 = *v5;
  if (*v5)
  {
    v1[13] = v7;
    operator delete(v7);
  }
  uint64_t v8 = *v4;
  if (*v4)
  {
    v1[10] = v8;
    operator delete(v8);
  }
  uint64_t v9 = *v3;
  if (*v3)
  {
    v1[7] = v9;
    operator delete(v9);
  }
  uint64_t v10 = *v2;
  if (*v2)
  {
    v1[4] = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::vector<MTForceBehavior_>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](a1, a2);
    long long v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_73264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::vector<MTForceBehavior_>::__push_back_slow_path<MTForceBehavior_ const&>(uint64_t *a1, const MTForceBehavior_ *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1C71C71C71C71C7) {
    std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xE38E38E38E38E3) {
    unint64_t v9 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTForceBehavior_>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  __n128 v14 = (MTForceBehavior_ *)&v10[144 * v4];
  BOOL v16 = &v10[144 * v9];
  MTForceBehavior_::MTForceBehavior_(v14, a2);
  __n128 v15 = v14 + 1;
  std::vector<MTForceBehavior_>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<MTForceBehavior_>::~__split_buffer(&v13);
  return v11;
}

void sub_7338C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t std::vector<MTForceBehavior_>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MTForceBehavior_>,std::reverse_iterator<MTForceBehavior_*>,std::reverse_iterator<MTForceBehavior_*>,std::reverse_iterator<MTForceBehavior_*>>((uint64_t)(a1 + 2), a1[1], (const MTForceBehavior_ *)a1[1], *a1, (const MTForceBehavior_ *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MTForceBehavior_>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(144 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MTForceBehavior_>,std::reverse_iterator<MTForceBehavior_*>,std::reverse_iterator<MTForceBehavior_*>,std::reverse_iterator<MTForceBehavior_*>>(uint64_t a1, uint64_t a2, const MTForceBehavior_ *a3, uint64_t a4, const MTForceBehavior_ *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + MTRestZoneIntegrator_::clearMotion(this, 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  unint64_t v13 = 0xAAAAAAAAAAAAAA00;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    unint64_t v9 = a3;
    do
    {
      MTForceBehavior_::MTForceBehavior_((MTForceBehavior_ *)(v7 - 144), --v9);
      uint64_t v7 = *((void *)&v15 + 1) - 144;
      *((void *)&v15 + 1) -= 144;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  LOBYTE(v13) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTForceBehavior_>,std::reverse_iterator<MTForceBehavior_*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_73510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTForceBehavior_>,std::reverse_iterator<MTForceBehavior_*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<MTForceBehavior_>,std::reverse_iterator<MTForceBehavior_*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<MTForceBehavior_>,std::reverse_iterator<MTForceBehavior_*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void **)(a1[2] + 8);
  uint64_t v2 = *(void **)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<MTForceBehavior_>::destroy[abi:ne180100](v3, v1);
      v1 += 18;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<MTForceBehavior_>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<MTForceBehavior_>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 144;
    std::allocator<MTForceBehavior_>::destroy[abi:ne180100](v4, (void *)(i - 144));
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,MTForceBehavior_ *,MTForceBehavior_ *,MTForceBehavior_ *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      MTForceBehavior_::operator=(a3, v4);
      v4 += 144;
      a3 += 144;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void *std::vector<MTForceThresholding_>::vector(void *a1, unint64_t a2, const MTForceThresholding_ *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<MTForceThresholding_>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (MTForceThresholding_ *)a1[1];
    uint64_t v7 = 480 * a2;
    uint64_t v8 = (char *)v6 + 480 * a2;
    do
    {
      MTForceThresholding_::MTForceThresholding_(v6, a3);
      uint64_t v6 = (MTForceThresholding_ *)((char *)v6 + 480);
      v7 -= 480;
    }
    while (v7);
    a1[1] = v8;
  }
  return a1;
}

void sub_7371C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<MTForceThresholding_>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x88888888888889) {
    std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTForceThresholding_>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[480 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MTForceThresholding_>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x88888888888889) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(480 * a2);
}

void MTForceThresholding_::MTForceThresholding_(MTForceThresholding_ *this, const MTForceThresholding_ *a2)
{
  *(void *)this = off_141960;
  long long v4 = *(_OWORD *)((char *)a2 + 8);
  long long v5 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 4objc_storeStrong(&location, 0) = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)((char *)this + 24) = v5;
  *(_OWORD *)((char *)this + 8) = v4;
  long long v6 = *(_OWORD *)((char *)a2 + 56);
  long long v7 = *(_OWORD *)((char *)a2 + 72);
  long long v8 = *(_OWORD *)((char *)a2 + 88);
  *(_OWORD *)((char *)this + 104) = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)this + 88) = v8;
  *(_OWORD *)((char *)this + 72) = v7;
  *(_OWORD *)((char *)this + 56) = v6;
  long long v9 = *(_OWORD *)((char *)a2 + 120);
  long long v10 = *(_OWORD *)((char *)a2 + 136);
  long long v11 = *(_OWORD *)((char *)a2 + 152);
  *((void *)this + 2MTRestZoneIntegrator_::clearMotion(this, 1) = *((void *)a2 + 21);
  *(_OWORD *)((char *)this + 152) = v11;
  *(_OWORD *)((char *)this + 136) = v10;
  *(_OWORD *)((char *)this + 12objc_storeStrong(&location, 0) = v9;
  MTForceBehavior_::MTForceBehavior_((MTForceBehavior_ *)((char *)this + 176), (const MTForceBehavior_ *)((char *)a2 + 176));
  long long v12 = *((_OWORD *)a2 + 20);
  long long v13 = *((_OWORD *)a2 + 22);
  *((_OWORD *)this + 2MTRestZoneIntegrator_::clearMotion(this, 1) = *((_OWORD *)a2 + 21);
  *((_OWORD *)this + 22) = v13;
  *((_OWORD *)this + 2objc_storeStrong(&location, 0) = v12;
  long long v14 = *((_OWORD *)a2 + 23);
  long long v15 = *((_OWORD *)a2 + 24);
  long long v16 = *((_OWORD *)a2 + 25);
  *(_OWORD *)((char *)this + 409) = *(_OWORD *)((char *)a2 + 409);
  *((_OWORD *)this + 24) = v15;
  *((_OWORD *)this + 25) = v16;
  *((_OWORD *)this + 23) = v14;
  *((void *)this + 55) = 0;
  *((void *)this + 56) = 0;
  *((void *)this + 54) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)this + 54, *((const void **)a2 + 54), *((void *)a2 + 55), (uint64_t)(*((void *)a2 + 55) - *((void *)a2 + 54)) >> 2);
  long long v17 = *(_OWORD *)((char *)a2 + 456);
  *((void *)this + 59) = *((void *)a2 + 59);
  *(_OWORD *)((char *)this + 456) = v17;
}

void sub_738E4(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)v1[37];
  if (v3)
  {
    v1[38] = v3;
    operator delete(v3);
  }
  MTForceThresholding_::MTForceThresholding_(v1);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_47()
{
  {
    HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_46(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)99,(char)117,(char)114,(char)114,(char)101,(char)110,(char)116,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_currentTimestamp", a2);
  }
}

void __cxx_global_var_init_3_46(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)112,(char)114,(char)101,(char)118,(char)105,(char)111,(char)117,(char)115,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_previousTimestamp", a2);
  }
}

void __cxx_global_var_init_4_41(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)114,(char)101,(char)108,(char)101,(char)97,(char)115,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_release", a2);
  }
}

void __cxx_global_var_init_5_41(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)108,(char)97,(char)115,(char)116,(char)95,(char)97,(char)99,(char)116,(char)105,(char)118,(char)97,(char)116,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_tlast_activation", a2);
  }
}

void __cxx_global_var_init_6_41(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)101,(char)97,(char)114,(char)108,(char)105,(char)101,(char)115,(char)116,(char)78,(char)111,(char)110,(char)68,(char)105,(char)118,(char)105,(char)110,(char)103,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_earliestNonDivingTimestamp", a2);
  }
}

void __cxx_global_var_init_7_41(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)100,(char)105,(char)118,(char)105,(char)110,(char)103,(char)66,(char)117,(char)116,(char)116,(char)111,(char)110,(char)67,(char)104,(char)97,(char)110,(char)103,(char)101,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_divingButtonChangeTimestamp", a2);
  }
}

void __cxx_global_var_init_8_42(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)105,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_min", a2);
  }
}

void __cxx_global_var_init_9_26(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)77,(char)97,(char)107,(char)101,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerMakeTouch_max", a2);
  }
}

void __cxx_global_var_init_10_26(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)95,(char)116,(char)95,(char)102,(char)105,(char)110,(char)103,(char)101,(char)114,(char)66,(char)114,(char)101,(char)97,(char)107,(char)84,(char)111,(char)117,(char)99,(char)104,(char)95,(char)109,(char)97,(char)120>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"_t_fingerBreakTouch_max", a2);
  }
}

uint64_t MTAppendGestureStartedToCollectionEvent()
{
  return 0;
}

uint64_t MTAppendGestureEndedToCollectionEvent()
{
  return 0;
}

uint64_t MTAppendChordMotionCodeToCollectionEvent()
{
  return 0;
}

uint64_t MTAppendRelativeMouseEvent()
{
  mach_absolute_time();
  uint64_t MouseEvent = IOHIDEventCreateMouseEvent();
  if (MouseEvent)
  {
    uint64_t v1 = (const void *)MouseEvent;
    IOHIDEventAppendEvent();
    CFRelease(v1);
  }
  return 0;
}

uint64_t MTAppendMouseButtonEvent()
{
  mach_absolute_time();
  uint64_t ButtonEvent = IOHIDEventCreateButtonEvent();
  if (ButtonEvent)
  {
    uint64_t v1 = (const void *)ButtonEvent;
    IOHIDEventAppendEvent();
    CFRelease(v1);
  }
  return 0;
}

uint64_t MTAppendVelocityEvent()
{
  mach_absolute_time();
  uint64_t VelocityEvent = IOHIDEventCreateVelocityEvent();
  if (VelocityEvent)
  {
    uint64_t v1 = (const void *)VelocityEvent;
    IOHIDEventAppendEvent();
    CFRelease(v1);
  }
  return 0;
}

uint64_t MTAppendFluidSwipeEvent(double a1, float a2, uint64_t a3, int a4)
{
  switch(a4)
  {
    case 27:
      mach_absolute_time();
      uint64_t FluidTouchGestureEvent = IOHIDEventCreateFluidTouchGestureEvent();
      break;
    case 23:
      mach_absolute_time();
      uint64_t FluidTouchGestureEvent = IOHIDEventCreateDockSwipeEvent();
      break;
    case 16:
      mach_absolute_time();
      uint64_t FluidTouchGestureEvent = IOHIDEventCreateNavigationSwipeEvent();
      break;
    default:
      return 0;
  }
  long long v6 = (const void *)FluidTouchGestureEvent;
  if (FluidTouchGestureEvent)
  {
    IOHIDEventSetPhase();
    if (a2 != 0.0) {
      MTAppendVelocityEvent();
    }
    IOHIDEventAppendEvent();
    CFRelease(v6);
  }
  return 0;
}

uint64_t MTAppendSwipeEvent()
{
  mach_absolute_time();
  uint64_t SwipeEvent = IOHIDEventCreateSwipeEvent();
  if (SwipeEvent)
  {
    uint64_t v1 = (const void *)SwipeEvent;
    IOHIDEventAppendEvent();
    CFRelease(v1);
  }
  return 0;
}

uint64_t MTAppendKeyboardEvent()
{
  mach_absolute_time();
  uint64_t KeyboardEvent = IOHIDEventCreateKeyboardEvent();
  if (KeyboardEvent)
  {
    uint64_t v1 = (const void *)KeyboardEvent;
    IOHIDEventAppendEvent();
    CFRelease(v1);
  }
  return 0;
}

uint64_t MTAppendKeystrokeEvent()
{
  return 0;
}

uint64_t MTAppendModifierKeyEvent(uint64_t a1, char a2)
{
  if ((a2 & 2) != 0)
  {
    MTAppendKeyboardEvent();
    if ((a2 & 1) == 0)
    {
LABEL_3:
      if ((a2 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      MTAppendKeyboardEvent();
      if ((a2 & 8) == 0) {
        return 0;
      }
      goto LABEL_5;
    }
  }
  else if ((a2 & 1) == 0)
  {
    goto LABEL_3;
  }
  MTAppendKeyboardEvent();
  if ((a2 & 4) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((a2 & 8) != 0) {
LABEL_5:
  }
    MTAppendKeyboardEvent();
  return 0;
}

uint64_t MTAppendZoomToggleEvent()
{
  mach_absolute_time();
  uint64_t ZoomToggleEvent = IOHIDEventCreateZoomToggleEvent();
  if (ZoomToggleEvent)
  {
    uint64_t v1 = (const void *)ZoomToggleEvent;
    IOHIDEventAppendEvent();
    CFRelease(v1);
  }
  return 0;
}

uint64_t MTAppendShowDefinitionEvent()
{
  mach_absolute_time();
  uint64_t SymbolicHotKeyEvent = IOHIDEventCreateSymbolicHotKeyEvent();
  if (SymbolicHotKeyEvent)
  {
    uint64_t v1 = (const void *)SymbolicHotKeyEvent;
    IOHIDEventSetPhase();
    IOHIDEventAppendEvent();
    CFRelease(v1);
  }
  return 0;
}

uint64_t MTAppendBoundaryScrollEvent()
{
  mach_absolute_time();
  uint64_t BoundaryScrollEvent = IOHIDEventCreateBoundaryScrollEvent();
  if (BoundaryScrollEvent)
  {
    uint64_t v1 = (const void *)BoundaryScrollEvent;
    IOHIDEventAppendEvent();
    CFRelease(v1);
  }
  return 0;
}

uint64_t MTAppendScrollEvent()
{
  mach_absolute_time();
  uint64_t ScrollEvent = IOHIDEventCreateScrollEvent();
  if (ScrollEvent)
  {
    uint64_t v1 = (const void *)ScrollEvent;
    IOHIDEventSetPhase();
    IOHIDEventAppendEvent();
    CFRelease(v1);
  }
  return 0;
}

uint64_t MTAppendMomentumEnableEvent()
{
  mach_absolute_time();
  uint64_t VendorDefinedEvent = IOHIDEventCreateVendorDefinedEvent();
  if (VendorDefinedEvent)
  {
    uint64_t v1 = (const void *)VendorDefinedEvent;
    IOHIDEventAppendEvent();
    CFRelease(v1);
  }
  return 0;
}

uint64_t MTAppendZoomRotateTranslateEvent(double a1, double a2, float a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  if (a3 <= 0.0)
  {
    BOOL v9 = a5 == 16 || a5 == 32;
    goto LABEL_13;
  }
  BOOL v9 = a5 == 16 || a5 == 32;
  if ((float)((float)a7 / a3) == 0.0)
  {
LABEL_13:
    if (MTAppendZoomRotateTranslateEvent_rotate_in_progress) {
      int v10 = v9;
    }
    else {
      int v10 = 0;
    }
    if (!a6) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
  int v10 = 1;
  if (!a6)
  {
LABEL_7:
    if (MTAppendZoomRotateTranslateEvent_zoom_in_progress) {
      int v11 = v9;
    }
    else {
      int v11 = 0;
    }
    goto LABEL_18;
  }
LABEL_17:
  int v11 = 1;
LABEL_18:
  if (a9 | a8)
  {
    int v12 = 1;
  }
  else if (MTAppendZoomRotateTranslateEvent_translate_in_progress)
  {
    int v12 = v9;
  }
  else
  {
    int v12 = 0;
  }
  if (v10)
  {
    mach_absolute_time();
    uint64_t RotationEvent = IOHIDEventCreateRotationEvent();
    if (RotationEvent)
    {
      long long v14 = (const void *)RotationEvent;
      IOHIDEventSetPhase();
      IOHIDEventAppendEvent();
      CFRelease(v14);
      MTAppendZoomRotateTranslateEvent_rotate_in_progress = !v9;
    }
  }
  if (v11)
  {
    mach_absolute_time();
    uint64_t ScaleEvent = IOHIDEventCreateScaleEvent();
    if (ScaleEvent)
    {
      long long v16 = (const void *)ScaleEvent;
      IOHIDEventSetPhase();
      IOHIDEventAppendEvent();
      CFRelease(v16);
      MTAppendZoomRotateTranslateEvent_zoom_in_progress = !v9;
    }
  }
  if (v12)
  {
    mach_absolute_time();
    uint64_t TranslationEvent = IOHIDEventCreateTranslationEvent();
    if (TranslationEvent)
    {
      float v18 = (const void *)TranslationEvent;
      IOHIDEventSetPhase();
      IOHIDEventAppendEvent();
      CFRelease(v18);
      MTAppendZoomRotateTranslateEvent_translate_in_progress = !v9;
    }
  }
  return 0;
}

void HSPipeline::WalkStages(void *a1, void *a2)
{
  id location = 0;
  objc_storeStrong(&location, a1);
  id v4 = 0;
  objc_storeStrong(&v4, a2);
  std::unordered_set<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::unordered_set[abi:ne180100]((uint64_t)v3);
  _walkStages((uint64_t)v3, location, v4);
  std::unordered_set<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::~unordered_set[abi:ne180100]((uint64_t)v3);
  objc_storeStrong(&v4, 0);
  objc_storeStrong(&location, 0);
}

void sub_74914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, _Unwind_Exception *exception_object, char a17)
{
  std::unordered_set<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::~unordered_set[abi:ne180100]((uint64_t)&a17);
  objc_storeStrong((id *)(v17 - 16), 0);
  objc_storeStrong((id *)(v17 - 8), 0);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::unordered_set[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::__hash_table(a1);
  return a1;
}

uint64_t _walkStages(uint64_t a1, void *a2, void *a3)
{
  uint64_t v22 = a1;
  id location = 0;
  objc_storeStrong(&location, a2);
  id v20 = 0;
  objc_storeStrong(&v20, a3);
  uint64_t v19 = std::unordered_set<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::find[abi:ne180100](v22, &location);
  uint64_t v18 = std::unordered_set<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::end[abi:ne180100](v22);
  if (std::operator!=[abi:ne180100](&v19, &v18))
  {
    char v23 = 1;
    int v17 = 1;
  }
  else
  {
    uint64_t v15 = std::unordered_set<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::insert[abi:ne180100](v22, &location);
    uint64_t v16 = v3;
    char v14 = 0;
    char v14 = (*((uint64_t (**)(id, id))v20 + 2))(v20, location) & 1;
    if (v14)
    {
      memset(__b, 0, sizeof(__b));
      id v9 = [location consumers];
      id v10 = [v9 countByEnumeratingWithState:__b objects:v24 count:16];
      if (v10)
      {
        uint64_t v6 = *(void *)__b[2];
        uint64_t v7 = 0;
        id v8 = v10;
        while (1)
        {
          uint64_t v5 = v7;
          if (*(void *)__b[2] != v6) {
            objc_enumerationMutation(v9);
          }
          id v13 = *(id *)(__b[1] + 8 * v7);
          char v14 = _walkStages(v22, v13, v20) & 1;
          if (v14)
          {
            int v17 = 0;
          }
          else
          {
            char v23 = 0;
            int v17 = 1;
          }
          objc_storeStrong(&v13, 0);
          if (v17) {
            break;
          }
          ++v7;
          if (v5 + 1 >= (unint64_t)v8)
          {
            uint64_t v7 = 0;
            id v8 = [v9 countByEnumeratingWithState:__b objects:v24 count:16];
            if (!v8) {
              goto LABEL_15;
            }
          }
        }
      }
      else
      {
LABEL_15:
        int v17 = 0;
      }

      if (!v17)
      {
        char v23 = 1;
        int v17 = 1;
      }
    }
    else
    {
      char v23 = 0;
      int v17 = 1;
    }
  }
  objc_storeStrong(&v20, 0);
  objc_storeStrong(&location, 0);
  return v23 & 1;
}

void sub_74DA8()
{
  _Unwind_Resume(v0);
}

uint64_t std::unordered_set<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::~unordered_set[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::~__hash_table(a1);
  return a1;
}

uint64_t std::__constrain_hash[abi:ne180100](unint64_t a1, unint64_t a2)
{
  if ((a2 & (a2 - 1)) == 0) {
    return a1 & (a2 - 1);
  }
  if (a1 >= a2) {
    return a1 % a2;
  }
  else {
    return a1;
  }
}

void std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]()
{
}

uint64_t std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100](uint64_t a1)
{
  return a1 + 16;
}

void std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]()
{
}

uint64_t std::vector<HSUtil::CoderKey const*>::capacity[abi:ne180100](void *a1)
{
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  return (*v1 - *a1) / 8;
}

void *std::max[abi:ne180100]<unsigned long>(void *a1, void *a2)
{
  return std::max[abi:ne180100]<unsigned long,std::__less<void,void>>(a1, a2);
}

void *std::min[abi:ne180100]<unsigned long>(void *a1, void *a2)
{
  return std::min[abi:ne180100]<unsigned long,std::__less<void,void>>(a1, a2);
}

uint64_t std::numeric_limits<long>::max[abi:ne180100]()
{
  return std::__libcpp_numeric_limits<long,true>::max[abi:ne180100]();
}

void *std::min[abi:ne180100]<unsigned long,std::__less<void,void>>(void *a1, void *a2)
{
  if (std::__less<void,void>::operator()[abi:ne180100]<unsigned long,unsigned long>((uint64_t)&v6, a2, a1)) {
    return a2;
  }
  else {
    return a1;
  }
}

BOOL std::__less<void,void>::operator()[abi:ne180100]<unsigned long,unsigned long>(uint64_t a1, void *a2, void *a3)
{
  return *a2 < *a3;
}

uint64_t std::__libcpp_numeric_limits<long,true>::max[abi:ne180100]()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

void *std::max[abi:ne180100]<unsigned long,std::__less<void,void>>(void *a1, void *a2)
{
  if (std::__less<void,void>::operator()[abi:ne180100]<unsigned long,unsigned long>((uint64_t)&v6, a1, a2)) {
    return a2;
  }
  else {
    return a1;
  }
}

void *std::__compressed_pair_elem<HSUtil::CoderKey const**,0,false>::__compressed_pair_elem[abi:ne180100]<decltype(nullptr),void>(void *result)
{
  char *result = 0;
  return result;
}

void *std::__libcpp_allocate[abi:ne180100](size_t a1, std::align_val_t a2)
{
  if (std::__is_overaligned_for_new[abi:ne180100](a2)) {
    return std::__libcpp_operator_new[abi:ne180100]<unsigned long,std::align_val_t>(a1, a2);
  }
  else {
    return std::__libcpp_operator_new[abi:ne180100]<unsigned long>(a1);
  }
}

BOOL std::__is_overaligned_for_new[abi:ne180100](unint64_t a1)
{
  return a1 > 0x10;
}

void *std::__libcpp_operator_new[abi:ne180100]<unsigned long,std::align_val_t>(size_t a1, std::align_val_t a2)
{
  return operator new(a1, a2);
}

void *std::__libcpp_operator_new[abi:ne180100]<unsigned long>(size_t a1)
{
  return operator new(a1);
}

void std::allocator_traits<std::allocator<HSUtil::CoderKey const*>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::allocator_traits<std::allocator<HSUtil::CoderKey const*>>::destroy[abi:ne180100]<HSUtil::CoderKey const*,void>()
{
}

void std::allocator<HSUtil::CoderKey const*>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::__libcpp_deallocate[abi:ne180100](void *a1, uint64_t a2, std::align_val_t a3)
{
  if (std::__is_overaligned_for_new[abi:ne180100](a3)) {
    std::__do_deallocate_handle_size[abi:ne180100]<std::align_val_t>(a1, a2, a3);
  }
  else {
    std::__do_deallocate_handle_size[abi:ne180100]<>(a1);
  }
}

void std::__do_deallocate_handle_size[abi:ne180100]<std::align_val_t>(void *a1, uint64_t a2, std::align_val_t a3)
{
}

void std::__do_deallocate_handle_size[abi:ne180100]<>(void *a1)
{
}

void std::__libcpp_operator_delete[abi:ne180100]<void *,std::align_val_t>(void *a1, std::align_val_t a2)
{
}

void std::__libcpp_operator_delete[abi:ne180100]<void *>(void *a1)
{
}

void std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]()
{
}

BOOL std::__is_hash_power2[abi:ne180100](unint64_t a1)
{
  BOOL v2 = 0;
  if (a1 > 2) {
    return (a1 & (a1 - 1)) == 0;
  }
  return v2;
}

float std::__math::ceil[abi:ne180100](float a1)
{
  return ceilf(a1);
}

void std::__hash_key_value_types<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>::__get_ptr[abi:ne180100]()
{
}

uint64_t std::__next_hash_pow2[abi:ne180100](unint64_t a1)
{
  if (a1 >= 2) {
    return 1 << (64 - std::__libcpp_clz[abi:ne180100](a1 - 1));
  }
  else {
    return a1;
  }
}

void std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]()
{
}

void std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  uint64_t v4 = v2;
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  std::allocator_traits<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>::deallocate[abi:ne180100](v4, a2, *v3);
}

void std::allocator_traits<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

unint64_t std::__libcpp_clz[abi:ne180100](unint64_t a1)
{
  return __clz(a1);
}

void std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>>>::destroy[abi:ne180100]<std::pair<char const* const,HSUtil::CoderKey const*>,void,void>()
{
}

uint64_t std::__destroy_at[abi:ne180100]<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>,0>(uint64_t a1)
{
  return std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::~__hash_node[abi:ne180100](a1);
}

void std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

uint64_t std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::~__hash_node[abi:ne180100](uint64_t a1)
{
  return a1;
}

void std::allocator<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

BOOL std::operator!=[abi:ne180100](void *a1, void *a2)
{
  return !std::operator==[abi:ne180100](a1, a2);
}

{
  return std::operator!=[abi:ne180100](a1, a2);
}

uint64_t std::unordered_set<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::find[abi:ne180100](uint64_t a1, void **a2)
{
  v3[2] = a1;
  v3[1] = a2;
  v3[0] = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::find<HSStage * {__strong}>(a1, a2);
  std::__hash_const_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_const_iterator[abi:ne180100](&v4, v3);
  return v4;
}

uint64_t std::unordered_set<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::end[abi:ne180100](uint64_t a1)
{
  v2[1] = a1;
  v2[0] = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::end();
  std::__hash_const_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_const_iterator[abi:ne180100](&v3, v2);
  return v3;
}

uint64_t std::unordered_set<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::insert[abi:ne180100](uint64_t a1, id *a2)
{
  v4[3] = a1;
  void v4[2] = a2;
  v4[0] = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::__insert_unique[abi:ne180100](a1, a2);
  v4[1] = v2;
  std::pair<std::__hash_const_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL>::pair[abi:ne180100]<std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL,0>((uint64_t)&v5, (uint64_t)v4);
  return v5;
}

BOOL std::operator==[abi:ne180100](void *a1, void *a2)
{
  return *a1 == *a2;
}

{
  return std::operator==[abi:ne180100](a1, a2);
}

uint64_t std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::find<HSStage * {__strong}>(uint64_t a1, void **a2)
{
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  unint64_t v16 = HSUtil::ObjectHasher::operator()(v2, *a2);
  unint64_t v15 = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::bucket_count[abi:ne180100]();
  if (v15)
  {
    uint64_t v14 = std::__constrain_hash[abi:ne180100](v16, v15);
    int v12 = *(void ***)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v14);
    if (v12)
    {
      for (uint64_t i = *v12; ; uint64_t i = (void *)*i)
      {
        BOOL v10 = 0;
        if (i)
        {
          BOOL v9 = 1;
          if (std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i) != v16)
          {
            unint64_t v3 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i);
            BOOL v9 = std::__constrain_hash[abi:ne180100](v3, v15) == v14;
          }
          BOOL v10 = v9;
        }
        if (!v10) {
          break;
        }
        if (std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i) == v16)
        {
          std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
          uint64_t v8 = v4;
          std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
          char v6 = (void *)std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100](v5);
          if (std::equal_to<HSStage * {__strong}>::operator()[abi:ne180100](v8, v6, a2))
          {
            std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](&v18, (uint64_t)i);
            return v18;
          }
        }
      }
    }
  }
  return std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::end();
}

void *std::__hash_const_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_const_iterator[abi:ne180100](void *a1, void *a2)
{
  return a1;
}

void std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]()
{
}

uint64_t HSUtil::ObjectHasher::operator()(void *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  uint64_t v3 = std::hash<unsigned long>::operator()[abi:ne180100]((uint64_t)&v4, (uint64_t)location[0]);
  objc_storeStrong(location, 0);
  return v3;
}

uint64_t std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::bucket_count[abi:ne180100]()
{
  return std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
}

uint64_t std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  return *v2 + 8 * a2;
}

uint64_t std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100](uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]()
{
}

BOOL std::equal_to<HSStage * {__strong}>::operator()[abi:ne180100](uint64_t a1, void *a2, void *a3)
{
  return *a2 == *a3;
}

void *std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](void *a1, uint64_t a2)
{
  return a1;
}

uint64_t std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::end()
{
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](&v1, 0);
  return v1;
}

uint64_t std::hash<unsigned long>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return a2;
}

void std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::get_deleter[abi:ne180100]()
{
}

uint64_t std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]()
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  return *(void *)v0;
}

void *std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](void *result, uint64_t a2)
{
  char *result = a2;
  return result;
}

void *std::__hash_const_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_const_iterator[abi:ne180100](void *result, void *a2)
{
  char *result = *a2;
  return result;
}

uint64_t std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::__insert_unique[abi:ne180100](uint64_t a1, id *a2)
{
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  return std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::__emplace_unique_key_args<HSStage * {__strong},HSStage * const {__strong}&>(a1, v2, a2);
}

uint64_t std::pair<std::__hash_const_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL>::pair[abi:ne180100]<std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL,0>(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t result;

  std::__hash_const_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_const_iterator[abi:ne180100]((void *)a1, (void *)a2);
  uint64_t result = a1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8) & 1;
  return result;
}

uint64_t std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::__emplace_unique_key_args<HSStage * {__strong},HSStage * const {__strong}&>(uint64_t a1, void **a2, id *a3)
{
  uint64_t v44 = a1;
  double v43 = a2;
  int v42 = a3;
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  uint64_t v41 = HSUtil::ObjectHasher::operator()(v3, *v43);
  unint64_t v40 = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::bucket_count[abi:ne180100]();
  char v39 = 0;
  if (v40)
  {
    uint64_t v37 = std::__constrain_hash[abi:ne180100](v41, v40);
    uint64_t i = *(uint64_t **)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v37);
    if (i)
    {
      for (uint64_t i = (uint64_t *)*i; ; uint64_t i = (uint64_t *)*i)
      {
        BOOL v30 = 0;
        if (i)
        {
          BOOL v29 = 1;
          if (std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i) != v41)
          {
            unint64_t v4 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i);
            BOOL v29 = std::__constrain_hash[abi:ne180100](v4, v40) == v37;
          }
          BOOL v30 = v29;
        }
        if (!v30) {
          break;
        }
        if (std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i) == v41)
        {
          std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
          uint64_t v28 = v5;
          std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
          uint64_t v7 = (void *)std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100](v6);
          if (std::equal_to<HSStage * {__strong}>::operator()[abi:ne180100](v28, v7, v43)) {
            goto LABEL_21;
          }
        }
      }
    }
  }
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::__construct_node_hash<HSStage * const {__strong}&>(a1, v41, v42, (uint64_t)v36);
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  float v27 = (float)(unint64_t)(*v8 + 1);
  float v26 = (float)v40;
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
  if (v27 > (float)(v26 * *v9) || !v40)
  {
    unint64_t v23 = 2 * v40;
    unint64_t v35 = v23 + !std::__is_hash_power2[abi:ne180100](v40);
    std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
    float v24 = (float)(unint64_t)(*v10 + 1);
    std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
    unint64_t v34 = (unint64_t)std::__math::ceil[abi:ne180100](v24 / *v11);
    int v25 = std::max[abi:ne180100]<unsigned long>(&v35, &v34);
    std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::__rehash_unique[abi:ne180100](a1, *v25);
    unint64_t v40 = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::bucket_count[abi:ne180100]();
    uint64_t v37 = std::__constrain_hash[abi:ne180100](v41, v40);
  }
  float v33 = *(uint64_t **)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v37);
  if (v33)
  {
    uint64_t v20 = *v33;
    *(void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]() = v20;
    *float v33 = std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  }
  else
  {
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    float v33 = v12;
    uint64_t v22 = *v12;
    *(void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]() = v22;
    std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    *float v33 = v13;
    *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v37) = v33;
    if (*(void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]())
    {
      std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
      std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
      uint64_t v21 = v14;
      unint64_t v15 = (uint64_t *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
      unint64_t v16 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100](*v15);
      uint64_t v17 = std::__constrain_hash[abi:ne180100](v16, v40);
      *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v17) = v21;
    }
  }
  uint64_t i = (uint64_t *)std::unique_ptr<std::__hash_node<HSStage * {__strong},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::release[abi:ne180100]();
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  ++*v18;
  char v39 = 1;
  std::unique_ptr<std::__hash_node<HSStage * {__strong},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)v36);
LABEL_21:
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](&v32, (uint64_t)i);
  std::pair<std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL>::pair[abi:ne180100]<std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL &,0>((uint64_t)&v45, &v32, &v39);
  return v45;
}

void std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::__construct_node_hash<HSStage * const {__strong}&>(uint64_t a1@<X0>, uint64_t a2@<X1>, id *a3@<X2>, uint64_t a4@<X8>)
{
  v17[2] = a4;
  v17[1] = a1;
  v17[0] = a2;
  unint64_t v16 = a3;
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v15 = v4;
  char v14 = 0;
  BOOL v9 = std::allocator_traits<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::allocate[abi:ne180100](v4, 1uLL);
  std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::__hash_node_destructor[abi:ne180100]((uint64_t)&v13, v15, 0);
  std::unique_ptr<std::__hash_node<HSStage * {__strong},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::unique_ptr[abi:ne180100]<true,void>(a4, (uint64_t)v9, &v13);
  int v11 = (void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  uint64_t v12 = 0;
  std::__construct_at[abi:ne180100]<std::__hash_node<HSStage * {__strong},void *>,decltype(nullptr),unsigned long &,std::__hash_node<HSStage * {__strong},void *>*>(v11, (uint64_t)&v12, v17);
  uint64_t v8 = v15;
  uint64_t v5 = std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100](v5);
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  std::allocator_traits<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::construct[abi:ne180100]<HSStage * {__strong},HSStage * const {__strong}&,void>(v8, v6, v16);
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::get_deleter[abi:ne180100]();
  *(unsigned char *)(v7 + 8) = 1;
}

void std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::__rehash_unique[abi:ne180100](uint64_t a1, unint64_t a2)
{
}

uint64_t std::unique_ptr<std::__hash_node<HSStage * {__strong},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::release[abi:ne180100]()
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  uint64_t v3 = *v0;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v1 = 0;
  return v3;
}

uint64_t std::unique_ptr<std::__hash_node<HSStage * {__strong},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<std::__hash_node<HSStage * {__strong},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::reset[abi:ne180100](a1, 0);
  return a1;
}

uint64_t std::pair<std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL>::pair[abi:ne180100]<std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL &,0>(uint64_t a1, void *a2, unsigned char *a3)
{
  return a1;
}

void *std::allocator_traits<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  return std::allocator<std::__hash_node<HSStage * {__strong},void *>>::allocate[abi:ne180100](a1, a2);
}

uint64_t std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::__hash_node_destructor[abi:ne180100](uint64_t a1, uint64_t a2, char a3)
{
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<HSStage * {__strong},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::unique_ptr[abi:ne180100]<true,void>(uint64_t a1, uint64_t a2, __n128 *a3)
{
  return a1;
}

{
  void v5[2];

  v5[1] = a1;
  v5[0] = a2;
  std::__compressed_pair<std::__hash_node<HSStage * {__strong},void *> *,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::__compressed_pair[abi:ne180100]<std::__hash_node<HSStage * {__strong},void *> *&,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>(a1, v5, a3);
  return a1;
}

void *std::__construct_at[abi:ne180100]<std::__hash_node<HSStage * {__strong},void *>,decltype(nullptr),unsigned long &,std::__hash_node<HSStage * {__strong},void *>*>(void *a1, uint64_t a2, uint64_t *a3)
{
  return a1;
}

id std::allocator_traits<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::construct[abi:ne180100]<HSStage * {__strong},HSStage * const {__strong}&,void>(uint64_t a1, void *a2, id *a3)
{
  return std::allocator<std::__hash_node<HSStage * {__strong},void *>>::construct[abi:ne180100]<HSStage * {__strong},HSStage * const {__strong}&>(a1, a2, a3);
}

void *std::allocator<std::__hash_node<HSStage * {__strong},void *>>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 > std::allocator_traits<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::max_size[abi:ne180100]<std::allocator<std::__hash_node<HSStage * {__strong},void *>>,void>()) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return std::__libcpp_allocate[abi:ne180100](24 * a2, (std::align_val_t)8uLL);
}

uint64_t std::allocator_traits<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::max_size[abi:ne180100]<std::allocator<std::__hash_node<HSStage * {__strong},void *>>,void>()
{
  return std::allocator<std::__hash_node<HSStage * {__strong},void *>>::max_size[abi:ne180100]();
}

uint64_t std::allocator<std::__hash_node<HSStage * {__strong},void *>>::max_size[abi:ne180100]()
{
  return 0xAAAAAAAAAAAAAAALL;
}

uint64_t std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::__hash_node_destructor[abi:ne180100](uint64_t result, uint64_t a2, char a3)
{
  *(void *)uint64_t result = a2;
  *(unsigned char *)(result + 8) = a3 & 1;
  return result;
}

uint64_t std::__compressed_pair<std::__hash_node<HSStage * {__strong},void *> *,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::__compressed_pair[abi:ne180100]<std::__hash_node<HSStage * {__strong},void *> *&,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>(uint64_t a1, void *a2, __n128 *a3)
{
  return a1;
}

{
  std::__hash_const_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_const_iterator[abi:ne180100]((void *)a1, a2);
  std::__compressed_pair_elem<std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>,1,false>::__compressed_pair_elem[abi:ne180100]<std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>,void>((__n128 *)(a1 + 8), a3);
  return a1;
}

__n128 std::__compressed_pair_elem<std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>,1,false>::__compressed_pair_elem[abi:ne180100]<std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>,void>(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *std::__hash_node<HSStage * {__strong},void *>::__hash_node[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  void *result;

  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](a1, a2);
  __n128 result = a1;
  a1[1] = a3;
  return result;
}

id std::allocator<std::__hash_node<HSStage * {__strong},void *>>::construct[abi:ne180100]<HSStage * {__strong},HSStage * const {__strong}&>(uint64_t a1, void *a2, id *a3)
{
  id result = *a3;
  *a2 = result;
  return result;
}

void std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::__rehash<true>(uint64_t a1, unint64_t a2)
{
  v14[1] = a1;
  v14[0] = a2;
  if (a2 == 1)
  {
    v14[0] = 2;
  }
  else if ((v14[0] & (v14[0] - 1)) != 0)
  {
    v14[0] = std::__next_prime(v14[0]);
  }
  unint64_t v13 = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::bucket_count[abi:ne180100]();
  if (v14[0] <= v13)
  {
    if (v14[0] < v13)
    {
      if (std::__is_hash_power2[abi:ne180100](v13))
      {
        std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
        float v9 = (float)*v2;
        std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
        float v4 = std::__math::ceil[abi:ne180100](v9 / *v3);
        size_t prime = std::__next_hash_pow2[abi:ne180100]((unint64_t)v4);
      }
      else
      {
        std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
        float v8 = (float)*v5;
        std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
        float v7 = std::__math::ceil[abi:ne180100](v8 / *v6);
        size_t prime = std::__next_prime((unint64_t)v7);
      }
      size_t v12 = prime;
      v14[0] = *std::max[abi:ne180100]<unsigned long>(v14, &v12);
      if (v14[0] < v13) {
        std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::__do_rehash<true>(a1, v14[0]);
      }
    }
  }
  else
  {
    std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::__do_rehash<true>(a1, v14[0]);
  }
}

void std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::get_deleter[abi:ne180100]();
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  if (a2)
  {
    float v7 = std::allocator_traits<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::allocate[abi:ne180100](v2, a2);
    std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::reset[abi:ne180100]<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> **,0>(a1, (uint64_t)v7);
  }
  else
  {
    std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::reset[abi:ne180100]<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> **,0>(a1, 0);
  }
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::get_deleter[abi:ne180100]();
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  unint64_t *v3 = a2;
  if (a2)
  {
    for (unint64_t i = 0; i < a2; ++i)
      *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, i) = 0;
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    char v14 = v4;
    size_t v12 = *v4;
    if (*v4)
    {
      unint64_t v5 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)v12);
      uint64_t v10 = std::__constrain_hash[abi:ne180100](v5, a2);
      *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v1objc_storeStrong(&location, 0) = v14;
      uint64_t v9 = v10;
      uint64_t v15 = v12;
      for (unint64_t j = *v12; j; unint64_t j = *v15)
      {
        unint64_t v6 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)j);
        uint64_t v11 = std::__constrain_hash[abi:ne180100](v6, a2);
        if (v11 == v9)
        {
          uint64_t v15 = (void **)j;
        }
        else if (*(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v11))
        {
          uint64_t *v15 = (void *)*j;
          *unint64_t j = **(void **)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v11);
          **(void **)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v1MTRestZoneIntegrator_::clearMotion(this, 1) = j;
        }
        else
        {
          *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v1MTRestZoneIntegrator_::clearMotion(this, 1) = v15;
          uint64_t v15 = (void **)j;
          uint64_t v9 = v11;
        }
      }
    }
  }
}

void std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::reset[abi:ne180100]<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> **,0>(uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  unint64_t v5 = *v2;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::operator()[abi:ne180100](v4, v5);
  }
}

void *std::allocator_traits<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  return std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>::allocate[abi:ne180100](a1, a2);
}

void std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  uint64_t v4 = v2;
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  std::allocator_traits<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::deallocate[abi:ne180100](v4, a2, *v3);
}

void std::allocator_traits<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void *std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 > std::allocator_traits<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::max_size[abi:ne180100]<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>,void>()) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return std::__libcpp_allocate[abi:ne180100](8 * a2, (std::align_val_t)8uLL);
}

uint64_t std::allocator_traits<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::max_size[abi:ne180100]<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>,void>()
{
  return std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>::max_size[abi:ne180100]();
}

uint64_t std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>::max_size[abi:ne180100]()
{
  return 0x1FFFFFFFFFFFFFFFLL;
}

void std::unique_ptr<std::__hash_node<HSStage * {__strong},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  unint64_t v5 = *v2;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::operator()[abi:ne180100](v4, v5);
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = *(void *)a1;
    std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100]((uint64_t)a2);
    std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
    std::allocator_traits<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::destroy[abi:ne180100]<HSStage * {__strong},void,void>(v3, v2);
    std::__destroy_at[abi:ne180100]<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>,0>((uint64_t)a2);
  }
  if (a2) {
    std::allocator_traits<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::deallocate[abi:ne180100](*(void *)a1, a2, 1);
  }
}

void std::allocator_traits<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::destroy[abi:ne180100]<HSStage * {__strong},void,void>(uint64_t a1, id *a2)
{
}

void std::allocator_traits<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::__destroy_at[abi:ne180100]<HSStage * {__strong},0>(id *a1)
{
}

void std::allocator<std::__hash_node<HSStage * {__strong},void *>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

uint64_t std::pair<std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL>::pair[abi:ne180100]<std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL &,0>(uint64_t result, void *a2, unsigned char *a3)
{
  *(void *)id result = *a2;
  *(unsigned char *)(result + 8) = *a3 & 1;
  return result;
}

uint64_t std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::__hash_table(uint64_t a1)
{
  return a1;
}

{
  float v3;
  int v4;
  uint64_t v5;

  unint64_t v5 = a1;
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::unique_ptr[abi:ne180100]<true,void>((void *)a1);
  std::__compressed_pair<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>>::__compressed_pair[abi:ne180100]<true,void>((void *)(a1 + 16));
  uint64_t v4 = 0;
  std::__compressed_pair<unsigned long,HSUtil::ObjectHasher>::__compressed_pair[abi:ne180100]<int,std::__default_init_tag>((void *)(a1 + 24), &v4);
  uint64_t v3 = 1.0;
  std::__compressed_pair<float,std::equal_to<HSStage * {__strong}>>::__compressed_pair[abi:ne180100]<float,std::__default_init_tag>((_DWORD *)(a1 + 32), &v3);
  return a1;
}

void *std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::unique_ptr[abi:ne180100]<true,void>(void *a1)
{
  return a1;
}

{
  std::__compressed_pair<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::__compressed_pair[abi:ne180100]<std::__value_init_tag,std::__value_init_tag>(a1);
  return a1;
}

void *std::__compressed_pair<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>>::__compressed_pair[abi:ne180100]<true,void>(void *a1)
{
  return a1;
}

{
  std::__compressed_pair_elem<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>,0,false>::__compressed_pair_elem[abi:ne180100](a1);
  std::__compressed_pair_elem<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>,1,true>::__compressed_pair_elem[abi:ne180100]((uint64_t)a1);
  return a1;
}

void *std::__compressed_pair<unsigned long,HSUtil::ObjectHasher>::__compressed_pair[abi:ne180100]<int,std::__default_init_tag>(void *a1, int *a2)
{
  return a1;
}

{
  std::__compressed_pair_elem<unsigned long,0,false>::__compressed_pair_elem[abi:ne180100]<int,void>(a1, a2);
  std::__compressed_pair_elem<HSUtil::ObjectHasher,1,true>::__compressed_pair_elem[abi:ne180100]();
  return a1;
}

_DWORD *std::__compressed_pair<float,std::equal_to<HSStage * {__strong}>>::__compressed_pair[abi:ne180100]<float,std::__default_init_tag>(_DWORD *a1, float *a2)
{
  return a1;
}

{
  std::__compressed_pair_elem<float,0,false>::__compressed_pair_elem[abi:ne180100]<float,void>(a1, a2);
  std::__compressed_pair_elem<HSUtil::ObjectHasher,1,true>::__compressed_pair_elem[abi:ne180100]();
  return a1;
}

void *std::__compressed_pair<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::__compressed_pair[abi:ne180100]<std::__value_init_tag,std::__value_init_tag>(void *a1)
{
  return a1;
}

{
  std::__compressed_pair_elem<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> **,0,false>::__compressed_pair_elem[abi:ne180100](a1);
  std::__compressed_pair_elem<std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>,1,false>::__compressed_pair_elem[abi:ne180100](a1 + 1);
  return a1;
}

void *std::__compressed_pair_elem<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> **,0,false>::__compressed_pair_elem[abi:ne180100](void *result)
{
  char *result = 0;
  return result;
}

void *std::__compressed_pair_elem<std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>,1,false>::__compressed_pair_elem[abi:ne180100](void *a1)
{
  return a1;
}

void *std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::__bucket_list_deallocator[abi:ne180100](void *a1)
{
  return a1;
}

{
  int v3;
  void *v4;

  uint64_t v4 = a1;
  uint64_t v3 = 0;
  std::__compressed_pair<unsigned long,std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::__compressed_pair[abi:ne180100]<int,std::__default_init_tag>(a1, &v3);
  return a1;
}

void *std::__compressed_pair<unsigned long,std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::__compressed_pair[abi:ne180100]<int,std::__default_init_tag>(void *a1, int *a2)
{
  return a1;
}

{
  std::__compressed_pair_elem<unsigned long,0,false>::__compressed_pair_elem[abi:ne180100]<int,void>(a1, a2);
  std::__compressed_pair_elem<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>,1,true>::__compressed_pair_elem[abi:ne180100]((uint64_t)a1);
  return a1;
}

void *std::__compressed_pair_elem<unsigned long,0,false>::__compressed_pair_elem[abi:ne180100]<int,void>(void *result, int *a2)
{
  char *result = *a2;
  return result;
}

uint64_t std::__compressed_pair_elem<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>,1,true>::__compressed_pair_elem[abi:ne180100](uint64_t a1)
{
  return a1;
}

void *std::__compressed_pair_elem<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>,0,false>::__compressed_pair_elem[abi:ne180100](void *a1)
{
  return a1;
}

void *std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash_node_base[abi:ne180100](void *a1)
{
  return a1;
}

void *std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash_node_base[abi:ne180100](void *result)
{
  char *result = 0;
  return result;
}

float std::__compressed_pair_elem<float,0,false>::__compressed_pair_elem[abi:ne180100]<float,void>(_DWORD *a1, float *a2)
{
  float result = *a2;
  *a1 = *(_DWORD *)a2;
  return result;
}

uint64_t std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::~__hash_table(uint64_t a1)
{
  return a1;
}

{
  void **v1;

  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::__deallocate_node(a1, *v1);
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::~unique_ptr[abi:ne180100](a1);
  return a1;
}

void std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::__deallocate_node(uint64_t a1, void *a2)
{
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v7 = v2;
  while (a2)
  {
    unint64_t v6 = (void *)*a2;
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    unint64_t v5 = (void *)v3;
    std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100](v3);
    std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
    std::allocator_traits<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::destroy[abi:ne180100]<HSStage * {__strong},void,void>(v7, v4);
    std::__destroy_at[abi:ne180100]<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>,0>((uint64_t)v5);
    std::allocator_traits<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::deallocate[abi:ne180100](v7, v5, 1);
    a2 = v6;
  }
}

uint64_t std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::reset[abi:ne180100]();
  return a1;
}

void std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::reset[abi:ne180100]()
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  uint64_t v3 = *v0;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v1 = 0;
  if (v3)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::operator()[abi:ne180100](v2, v3);
  }
}

void __cxx_global_var_init_48()
{
  {
    {
      HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
    }
  }
}

void __cxx_global_var_init_2_47(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_47(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_42(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_42(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_42(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_42(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_43(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

unsigned char *__os_log_helper_16_0_0(unsigned char *result)
{
  char *result = 0;
  result[1] = 0;
  return result;
}

void sub_77FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, _Unwind_Exception *exception_object, char a15)
{
  objc_storeStrong((id *)(v15 - 24), 0);
  _Unwind_Resume(a1);
}

void sub_78080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, id a13)
{
}

void sub_780FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, id a13)
{
}

BOOL HSUtil::Encoder::encodeNull(HSUtil::Encoder *this)
{
  BOOL result = HSUtil::Coder::ok(this);
  if (result)
  {
    HSUtil::Encoder::_encodeNull(this);
    return HSUtil::Coder::ok(this);
  }
  return result;
}

void sub_78338(uint64_t a1, int a2)
{
  *(void *)(v2 - 32) = a1;
  *(_DWORD *)(v2 - 36) = a2;
  objc_destroyWeak((id *)(v2 - 64));
  HSUtil::ObjectLock::~ObjectLock((id *)(v2 - 56));
  objc_storeStrong((id *)(v2 - 24), 0);
  _Unwind_Resume(*(_Unwind_Exception **)(v2 - 32));
}

uint64_t std::unordered_set<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::insert[abi:ne180100](uint64_t a1, id *a2)
{
  v4[3] = a1;
  void v4[2] = a2;
  v4[0] = std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::__insert_unique[abi:ne180100](a1, a2);
  v4[1] = v2;
  std::pair<std::__hash_const_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL>::pair[abi:ne180100]<std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL,0>((uint64_t)&v5, (uint64_t)v4);
  return v5;
}

void sub_7852C(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, id a16)
{
  *(void *)(v16 - 32) = a1;
  *(_DWORD *)(v16 - 36) = a2;
  objc_destroyWeak(&location);
  HSUtil::ObjectLock::~ObjectLock(&a16);
  objc_storeStrong((id *)(v16 - 24), 0);
  _Unwind_Resume(*(_Unwind_Exception **)(v16 - 32));
}

uint64_t std::unordered_set<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::erase[abi:ne180100](uint64_t a1, id *a2)
{
  return std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::__erase_unique<objc_object  {objcproto15HSStageObserver}*>(a1, a2);
}

uint64_t std::unordered_set<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::unordered_set(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  unint64_t v2;
  uint64_t v5;
  void *v6;

  std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::__hash_table(a1, a2);
  uint64_t v2 = std::unordered_set<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::bucket_count[abi:ne180100]();
  std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::__rehash_unique[abi:ne180100](a1, v2);
  unint64_t v6 = (void *)std::unordered_set<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::begin[abi:ne180100]();
  uint64_t v5 = std::unordered_set<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::end[abi:ne180100]();
  std::unordered_set<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::insert<std::__hash_const_iterator<std::__hash_node<objc_object  {objcproto15HSStageObserver}*,void *> *>>(a1, v6, v5);
  return a1;
}

id HSUtil::ObjectLock::unlock(id *this)
{
  id result = [this[1] unlock];
  *(unsigned char *)this = 0;
  return result;
}

uint64_t std::unordered_set<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::begin[abi:ne180100](uint64_t a1)
{
  v2[1] = a1;
  v2[0] = std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::begin();
  std::__hash_const_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_const_iterator[abi:ne180100](&v3, v2);
  return v3;
}

uint64_t std::__hash_const_iterator<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>::operator*[abi:ne180100]()
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  return std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100](v0);
}

void **std::__hash_const_iterator<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>::operator++[abi:ne180100](void **result)
{
  char *result = (void *)**result;
  return result;
}

uint64_t std::unordered_set<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::~unordered_set[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::~__hash_table(a1);
  return a1;
}

uint64_t std::unordered_set<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::erase[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  v3[2] = a2;
  v3[1] = a1;
  v3[0] = std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::erase(a1, a2);
  std::__hash_const_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_const_iterator[abi:ne180100](&v4, v3);
  return v4;
}

void *std::__hash_const_iterator<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>::operator++[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  std::__hash_const_iterator<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>::operator++[abi:ne180100](a1);
  return v2;
}

void $_0::~$_0(id *this)
{
}

{
  std::unordered_set<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::~unordered_set[abi:ne180100]((uint64_t)(this + 9));
  objc_storeStrong(this + 8, 0);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)this);
}

{
  $_0::~$_0(this);
}

{
  objc_storeStrong(this, 0);
}

{
  $_0::~$_0(this);
}

{
  $_0::$_1::~$_1(($_0::$_1 *)(this + 1));
  objc_storeStrong(this, 0);
}

{
  $_0::~$_0(this);
}

{
  objc_storeStrong(this + 5, 0);
  objc_storeStrong(this + 4, 0);
  objc_storeStrong(this + 3, 0);
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)(this + 1));
}

{
  $_0::~$_0(this);
}

{
  objc_storeStrong(this + 14, 0);
  std::map<int,std::shared_ptr<Client>>::~map[abi:ne180100]((uint64_t)(this + 11));
  std::map<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak},HSUtil::ObjectLess<NSString>,std::allocator<std::pair<NSString * const {__strong},objc_object  {objcproto22HSServiceDirectoryable}*>>>::~map[abi:ne180100]((uint64_t)(this + 8));
  std::mutex::~mutex((std::mutex *)this);
}

{
  $_0::~$_0(this);
}

{
  objc_storeStrong(this + 10, 0);
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)(this + 8));
  std::mutex::~mutex((std::mutex *)this);
}

void $_0::$_0($_0 *this)
{
}

{
  std::recursive_mutex::recursive_mutex((std::recursive_mutex *)this);
  *((void *)this + 8) = 0;
  std::unordered_set<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::unordered_set[abi:ne180100]((uint64_t)this + 72);
}

{
  $_0::$_0(this);
}

{
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](this);
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100]((void *)this + 2);
  *((void *)this + 4) = 0;
  *((unsigned char *)this + 4objc_storeStrong(&location, 0) = 0;
  std::vector<std::unique_ptr<EncoderState>>::vector[abi:ne180100]((void *)this + 6);
  *((void *)this + 9) = 0;
}

{
  $_0::$_0(this);
}

{
  *(void *)this = 0;
  $_0::$_1::$_1(($_0 *)((char *)this + 8));
}

{
  $_0::$_0(this);
}

{
  *(void *)this = 0;
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100]((void *)this + 1);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
}

{
  $_0::$_0(this);
}

{
  std::mutex::mutex[abi:ne180100](this);
  std::map<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak},HSUtil::ObjectLess<NSString>,std::allocator<std::pair<NSString * const {__strong},objc_object  {objcproto22HSServiceDirectoryable}*>>>::map[abi:ne180100]((uint64_t)this + 64);
  std::map<int,std::shared_ptr<Client>>::map[abi:ne180100]((uint64_t)this + 88);
  *((void *)this + 14) = 0;
}

{
  $_0::$_0(this);
}

{
  std::mutex::mutex[abi:ne180100](this);
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100]((void *)this + 8);
  *((void *)this + 1objc_storeStrong(&location, 0) = 0;
}

BOOL HSUtil::Coder::ok(HSUtil::Coder *this)
{
  return *(_DWORD *)this == 0;
}

BOOL HSUtil::Encoder::_encodeNull(HSUtil::Encoder *this)
{
  return HSUtil::Coder::ok(this);
}

BOOL HSUtil::Encoder::_writeByte(HSUtil::Encoder *this, unsigned __int8 a2)
{
  uint64_t v5 = this;
  unsigned __int8 v4 = a2;
  HSUtil::Encoder::_write(this, &v4, 1uLL);
  return HSUtil::Coder::ok(this);
}

BOOL HSUtil::Encoder::_write(HSUtil::Encoder *this, const unsigned __int8 *a2, size_t a3)
{
  return HSUtil::Coder::ok(this);
}

uint64_t std::unordered_set<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::unordered_set[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::__hash_table(a1);
  return a1;
}

uint64_t std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::__hash_table(uint64_t a1)
{
  return a1;
}

{
  float v3;
  int v4;
  uint64_t v5;

  uint64_t v5 = a1;
  std::unique_ptr<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>>>>::unique_ptr[abi:ne180100]<true,void>((void *)a1);
  std::__compressed_pair<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>>::__compressed_pair[abi:ne180100]<true,void>((void *)(a1 + 16));
  unsigned __int8 v4 = 0;
  std::__compressed_pair<unsigned long,HSUtil::ObjectHasher>::__compressed_pair[abi:ne180100]<int,std::__default_init_tag>((void *)(a1 + 24), &v4);
  uint64_t v3 = 1.0;
  std::__compressed_pair<float,std::equal_to<HSStage * {__strong}>>::__compressed_pair[abi:ne180100]<float,std::__default_init_tag>((_DWORD *)(a1 + 32), &v3);
  return a1;
}

void *std::unique_ptr<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>>>>::unique_ptr[abi:ne180100]<true,void>(void *a1)
{
  return a1;
}

{
  std::__compressed_pair<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>>>>::__compressed_pair[abi:ne180100]<std::__value_init_tag,std::__compressed_pair<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>>>>::__compressed_pair[abi:ne180100]>(a1);
  return a1;
}

void *std::__compressed_pair<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>>>>::__compressed_pair[abi:ne180100]<std::__value_init_tag,std::__compressed_pair<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>>>>::__compressed_pair[abi:ne180100]>(void *a1)
{
  return a1;
}

{
  std::__compressed_pair_elem<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> **,0,false>::__compressed_pair_elem[abi:ne180100](a1);
  std::__compressed_pair_elem<std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *>>,1,false>::__compressed_pair_elem[abi:ne180100](a1 + 1);
  return a1;
}

void *std::__compressed_pair_elem<std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *>>,1,false>::__compressed_pair_elem[abi:ne180100](void *a1)
{
  return a1;
}

void *std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *>>::__bucket_list_deallocator[abi:ne180100](void *a1)
{
  return a1;
}

{
  int v3;
  void *v4;

  unsigned __int8 v4 = a1;
  uint64_t v3 = 0;
  std::__compressed_pair<unsigned long,std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::__compressed_pair[abi:ne180100]<int,std::__default_init_tag>(a1, &v3);
  return a1;
}

uint64_t std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::__insert_unique[abi:ne180100](uint64_t a1, id *a2)
{
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  return std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::__emplace_unique_key_args<objc_object  {objcproto15HSStageObserver}*,objc_object  {objcproto15HSStageObserver} const {__weak}&>(a1, v2, a2);
}

uint64_t std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::__emplace_unique_key_args<objc_object  {objcproto15HSStageObserver}*,objc_object  {objcproto15HSStageObserver} const {__weak}&>(uint64_t a1, id *a2, id *a3)
{
  uint64_t v47 = a1;
  float v46 = a2;
  uint64_t v45 = a3;
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  uint64_t v32 = v3;
  id WeakRetained = objc_loadWeakRetained(v46);
  uint64_t v34 = HSUtil::ObjectHasher::operator()(v32, WeakRetained);

  unint64_t v44 = v34;
  unint64_t v43 = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::bucket_count[abi:ne180100]();
  char v42 = 0;
  if (v43)
  {
    uint64_t v40 = std::__constrain_hash[abi:ne180100](v44, v43);
    unint64_t i = *(uint64_t **)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v40);
    if (i)
    {
      for (unint64_t i = (uint64_t *)*i; ; unint64_t i = (uint64_t *)*i)
      {
        BOOL v30 = 0;
        if (i)
        {
          BOOL v29 = 1;
          if (std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i) != v44)
          {
            unint64_t v4 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i);
            BOOL v29 = std::__constrain_hash[abi:ne180100](v4, v43) == v40;
          }
          BOOL v30 = v29;
        }
        if (!v30) {
          break;
        }
        if (std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i) == v44)
        {
          std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
          uint64_t v28 = v5;
          std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
          uint64_t v7 = (id *)std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100](v6);
          if (std::equal_to<objc_object  {objcproto15HSStageObserver}* {__weak}>::operator()[abi:ne180100](v28, v7, v46))
          {
            goto LABEL_21;
          }
        }
      }
    }
  }
  std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::__construct_node_hash<objc_object  {objcproto15HSStageObserver} const {__weak}&>(a1, v44, v45, (uint64_t)v39);
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  float v27 = (float)(unint64_t)(*v8 + 1);
  float v26 = (float)v43;
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
  if (v27 > (float)(v26 * *v9) || !v43)
  {
    unint64_t v23 = 2 * v43;
    unint64_t v38 = v23 + !std::__is_hash_power2[abi:ne180100](v43);
    std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
    float v24 = (float)(unint64_t)(*v10 + 1);
    std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
    unint64_t v37 = (unint64_t)std::__math::ceil[abi:ne180100](v24 / *v11);
    int v25 = std::max[abi:ne180100]<unsigned long>(&v38, &v37);
    std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::__rehash_unique[abi:ne180100](a1, *v25);
    unint64_t v43 = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::bucket_count[abi:ne180100]();
    uint64_t v40 = std::__constrain_hash[abi:ne180100](v44, v43);
  }
  double v36 = *(uint64_t **)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v40);
  if (v36)
  {
    uint64_t v20 = *v36;
    *(void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]() = v20;
    *double v36 = std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  }
  else
  {
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    double v36 = v12;
    uint64_t v22 = *v12;
    *(void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]() = v22;
    std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    *double v36 = v13;
    *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v4objc_storeStrong(&location, 0) = v36;
    if (*(void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]())
    {
      std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
      std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
      uint64_t v21 = v14;
      uint64_t v15 = (uint64_t *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
      unint64_t v16 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100](*v15);
      uint64_t v17 = std::__constrain_hash[abi:ne180100](v16, v43);
      *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v17) = v21;
    }
  }
  unint64_t i = (uint64_t *)std::unique_ptr<std::__hash_node<HSStage * {__strong},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::release[abi:ne180100]();
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  ++*v18;
  char v42 = 1;
  std::unique_ptr<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *>,std::__hash_node_destructor<std::allocator<void *>>>::~unique_ptr[abi:ne180100]((uint64_t)v39);
LABEL_21:
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](&v35, (uint64_t)i);
  std::pair<std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL>::pair[abi:ne180100]<std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL &,0>((uint64_t)&v48, &v35, &v42);
  return v48;
}

BOOL std::equal_to<objc_object  {objcproto15HSStageObserver}* {__weak}>::operator()[abi:ne180100](uint64_t a1, id *a2, id *a3)
{
  id WeakRetained = objc_loadWeakRetained(a2);
  id v3 = objc_loadWeakRetained(a3);
  BOOL v6 = WeakRetained == v3;

  return v6;
}

void std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::__construct_node_hash<objc_object  {objcproto15HSStageObserver} const {__weak}&>(uint64_t a1@<X0>, uint64_t a2@<X1>, id *a3@<X2>, uint64_t a4@<X8>)
{
  v17[2] = a4;
  v17[1] = a1;
  v17[0] = a2;
  unint64_t v16 = a3;
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v15 = v4;
  char v14 = 0;
  uint64_t v9 = std::allocator_traits<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::allocate[abi:ne180100](v4, 1uLL);
  std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::__hash_node_destructor[abi:ne180100]((uint64_t)&v13, v15, 0);
  std::unique_ptr<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *>,std::__hash_node_destructor<std::allocator<void *>>>::unique_ptr[abi:ne180100]<true,void>(a4, (uint64_t)v9, &v13);
  uint64_t v11 = (void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  uint64_t v12 = 0;
  std::__construct_at[abi:ne180100]<std::__hash_node<HSStage * {__strong},void *>,decltype(nullptr),unsigned long &,std::__hash_node<HSStage * {__strong},void *>*>(v11, (uint64_t)&v12, v17);
  uint64_t v8 = v15;
  uint64_t v5 = std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100](v5);
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  std::allocator_traits<std::allocator<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *>>>::construct[abi:ne180100]<objc_object  {objcproto15HSStageObserver}*,objc_object  {objcproto15HSStageObserver} const {__weak}&,void>(v8, v6, v16);
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::get_deleter[abi:ne180100]();
  *(unsigned char *)(v7 + 8) = 1;
}

void std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::__rehash_unique[abi:ne180100](uint64_t a1, unint64_t a2)
{
}

uint64_t std::unique_ptr<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *>,std::__hash_node_destructor<std::allocator<void *>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *>,std::__hash_node_destructor<std::allocator<void *>>>::reset[abi:ne180100](a1, 0);
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *>,std::__hash_node_destructor<std::allocator<void *>>>::unique_ptr[abi:ne180100]<true,void>(uint64_t a1, uint64_t a2, __n128 *a3)
{
  return a1;
}

{
  void v5[2];

  v5[1] = a1;
  v5[0] = a2;
  std::__compressed_pair<std::__hash_node<HSStage * {__strong},void *> *,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::__compressed_pair[abi:ne180100]<std::__hash_node<HSStage * {__strong},void *> *&,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>(a1, v5, a3);
  return a1;
}

void std::allocator_traits<std::allocator<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *>>>::construct[abi:ne180100]<objc_object  {objcproto15HSStageObserver}*,objc_object  {objcproto15HSStageObserver} const {__weak}&,void>(uint64_t a1, id *a2, id *a3)
{
}

void std::allocator<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *>>::construct[abi:ne180100]<objc_object  {objcproto15HSStageObserver}*,objc_object  {objcproto15HSStageObserver} const {__weak}&>(uint64_t a1, id *a2, id *a3)
{
}

void std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::__rehash<true>(uint64_t a1, unint64_t a2)
{
  v14[1] = a1;
  v14[0] = a2;
  if (a2 == 1)
  {
    v14[0] = 2;
  }
  else if ((v14[0] & (v14[0] - 1)) != 0)
  {
    v14[0] = std::__next_prime(v14[0]);
  }
  unint64_t v13 = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::bucket_count[abi:ne180100]();
  if (v14[0] <= v13)
  {
    if (v14[0] < v13)
    {
      if (std::__is_hash_power2[abi:ne180100](v13))
      {
        std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
        float v9 = (float)*v2;
        std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
        float v4 = std::__math::ceil[abi:ne180100](v9 / *v3);
        size_t prime = std::__next_hash_pow2[abi:ne180100]((unint64_t)v4);
      }
      else
      {
        std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
        float v8 = (float)*v5;
        std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
        float v7 = std::__math::ceil[abi:ne180100](v8 / *v6);
        size_t prime = std::__next_prime((unint64_t)v7);
      }
      size_t v12 = prime;
      v14[0] = *std::max[abi:ne180100]<unsigned long>(v14, &v12);
      if (v14[0] < v13) {
        std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::__do_rehash<true>(a1, v14[0]);
      }
    }
  }
  else
  {
    std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::__do_rehash<true>(a1, v14[0]);
  }
}

void std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::get_deleter[abi:ne180100]();
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  if (a2)
  {
    float v7 = std::allocator_traits<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::allocate[abi:ne180100](v2, a2);
    std::unique_ptr<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>>>>::reset[abi:ne180100]<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>*,0>(a1, (uint64_t)v7);
  }
  else
  {
    std::unique_ptr<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>>>>::reset[abi:ne180100]<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>*,0>(a1, 0);
  }
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::get_deleter[abi:ne180100]();
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  unint64_t *v3 = a2;
  if (a2)
  {
    for (unint64_t i = 0; i < a2; ++i)
      *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, i) = 0;
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    char v14 = v4;
    size_t v12 = *v4;
    if (*v4)
    {
      unint64_t v5 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)v12);
      uint64_t v10 = std::__constrain_hash[abi:ne180100](v5, a2);
      *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v1objc_storeStrong(&location, 0) = v14;
      uint64_t v9 = v10;
      uint64_t v15 = v12;
      for (unint64_t j = *v12; j; unint64_t j = *v15)
      {
        unint64_t v6 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)j);
        uint64_t v11 = std::__constrain_hash[abi:ne180100](v6, a2);
        if (v11 == v9)
        {
          uint64_t v15 = (void **)j;
        }
        else if (*(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v11))
        {
          uint64_t *v15 = (void *)*j;
          *unint64_t j = **(void **)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v11);
          **(void **)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v1MTRestZoneIntegrator_::clearMotion(this, 1) = j;
        }
        else
        {
          *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v1MTRestZoneIntegrator_::clearMotion(this, 1) = v15;
          uint64_t v15 = (void **)j;
          uint64_t v9 = v11;
        }
      }
    }
  }
}

void std::unique_ptr<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>>>>::reset[abi:ne180100]<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>*,0>(uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  unint64_t v5 = *v2;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *>>::operator()[abi:ne180100](v4, v5);
  }
}

void std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *>>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  uint64_t v4 = v2;
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  std::allocator_traits<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *>>::deallocate[abi:ne180100](v4, a2, *v3);
}

void std::allocator_traits<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::unique_ptr<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *>,std::__hash_node_destructor<std::allocator<void *>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  unint64_t v5 = *v2;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__hash_node_destructor<std::allocator<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *>>>::operator()[abi:ne180100](v4, v5);
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *>>>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = *(void *)a1;
    std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100]((uint64_t)a2);
    std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
    std::allocator_traits<std::allocator<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *>>>::destroy[abi:ne180100]<objc_object  {objcproto15HSStageObserver}*,void,void>(v3, v2);
    std::__destroy_at[abi:ne180100]<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>,0>((uint64_t)a2);
  }
  if (a2) {
    std::allocator_traits<std::allocator<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *>>>::deallocate[abi:ne180100](*(void *)a1, a2, 1);
  }
}

void std::allocator_traits<std::allocator<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *>>>::destroy[abi:ne180100]<objc_object  {objcproto15HSStageObserver}*,void,void>(uint64_t a1, id *a2)
{
}

void std::allocator_traits<std::allocator<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *>>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::__destroy_at[abi:ne180100]<objc_object  {objcproto15HSStageObserver}* {__weak},0>(id *a1)
{
}

void std::allocator<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

uint64_t std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::__erase_unique<objc_object  {objcproto15HSStageObserver}*>(uint64_t a1, id *a2)
{
  v6[2] = a1;
  v6[1] = a2;
  v6[0] = std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::find<objc_object  {objcproto15HSStageObserver}*>(a1, a2);
  uint64_t v5 = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::end();
  if (std::operator==[abi:ne180100](v6, &v5)) {
    return 0;
  }
  std::__hash_const_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_const_iterator[abi:ne180100](&v4, v6);
  std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::erase(a1, v4);
  return 1;
}

uint64_t std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::find<objc_object  {objcproto15HSStageObserver}*>(uint64_t a1, id *a2)
{
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  uint64_t v11 = v2;
  id WeakRetained = objc_loadWeakRetained(a2);
  unint64_t v13 = HSUtil::ObjectHasher::operator()(v11, WeakRetained);

  unint64_t v18 = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::bucket_count[abi:ne180100]();
  if (v18)
  {
    uint64_t v17 = std::__constrain_hash[abi:ne180100](v13, v18);
    uint64_t v15 = *(void ***)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v17);
    if (v15)
    {
      for (unint64_t i = *v15; ; unint64_t i = (void *)*i)
      {
        BOOL v10 = 0;
        if (i)
        {
          BOOL v9 = 1;
          if (std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i) != v13)
          {
            unint64_t v3 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i);
            BOOL v9 = std::__constrain_hash[abi:ne180100](v3, v18) == v17;
          }
          BOOL v10 = v9;
        }
        if (!v10) {
          break;
        }
        if (std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i) == v13)
        {
          std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
          uint64_t v8 = v4;
          std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
          unint64_t v6 = (id *)std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100](v5);
          if (std::equal_to<objc_object  {objcproto15HSStageObserver}* {__weak}>::operator()[abi:ne180100](v8, v6, a2))
          {
            std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](&v20, (uint64_t)i);
            return v20;
          }
        }
      }
    }
  }
  return std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::end();
}

void *std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::erase(uint64_t a1, uint64_t *a2)
{
  float v7 = a2;
  uint64_t v6 = a1;
  uint64_t v5 = a2;
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](&v8, (uint64_t)a2);
  std::__hash_const_iterator<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>::operator++[abi:ne180100](&v8);
  std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::remove(a1, v7, (uint64_t)v4);
  std::unique_ptr<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *>,std::__hash_node_destructor<std::allocator<void *>>>::~unique_ptr[abi:ne180100]((uint64_t)v4);
  return v8;
}

uint64_t std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::remove@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v23 = a3;
  uint64_t v22 = a2;
  uint64_t v21 = a1;
  uint64_t v20 = a2;
  unint64_t v19 = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::bucket_count[abi:ne180100]();
  unint64_t v3 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)v20);
  uint64_t v18 = std::__constrain_hash[abi:ne180100](v3, v19);
  for (unint64_t i = *(uint64_t **)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v18); (uint64_t *)*i != v20; unint64_t i = (uint64_t *)*i)
    ;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  if (i == v4
    || (unint64_t v5 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i),
        std::__constrain_hash[abi:ne180100](v5, v19) != v18))
  {
    if (!*v20
      || (unint64_t v6 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100](*v20),
          std::__constrain_hash[abi:ne180100](v6, v19) != v18))
    {
      *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v18) = 0;
    }
  }
  if (*v20)
  {
    unint64_t v7 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100](*v20);
    uint64_t v16 = std::__constrain_hash[abi:ne180100](v7, v19);
    if (v16 != v18) {
      *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v16) = i;
    }
  }
  uint64_t *i = *v20;
  uint64_t *v20 = 0;
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  --*v8;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  uint64_t v12 = v9;
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::__hash_node_destructor[abi:ne180100]((uint64_t)&v15, v10, 1);
  return std::unique_ptr<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *>,std::__hash_node_destructor<std::allocator<void *>>>::unique_ptr[abi:ne180100]<true,void>(a3, v12, &v15);
}

void sub_7A444(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(v10 - 24) = a1;
  *(_DWORD *)(v10 - 28) = a2;
  std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::~__hash_table(a10);
  _Unwind_Resume(*(_Unwind_Exception **)(v10 - 24));
}

uint64_t std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::__hash_table(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t result;
  int v4[6];
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v8 = a1;
  unint64_t v7 = a2;
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::get_deleter[abi:ne180100]();
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  std::vector<HSUtil::CoderKey const*>::__annotate_delete[abi:ne180100]();
  std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *>>::__bucket_list_deallocator[abi:ne180100](&v6, (uint64_t)&v5, 0);
  std::unique_ptr<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>>>>::unique_ptr[abi:ne180100]<true,void>((void *)a1, 0, &v6);
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  std::vector<HSUtil::CoderKey const*>::__annotate_delete[abi:ne180100]();
  std::__compressed_pair<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>>::__compressed_pair[abi:ne180100]<std::__default_init_tag,std::allocator>((void *)(a1 + 16));
  v4[0] = 0;
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  std::__compressed_pair<unsigned long,HSUtil::ObjectHasher>::__compressed_pair[abi:ne180100]<int,HSUtil::ObjectHasher const&>((void *)(a1 + 24), v4);
  id result = a1;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(v7 + 32);
  return result;
}

uint64_t std::unordered_set<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::bucket_count[abi:ne180100]()
{
  return std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::bucket_count[abi:ne180100]();
}

BOOL std::unordered_set<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::insert<std::__hash_const_iterator<std::__hash_node<objc_object  {objcproto15HSStageObserver}*,void *> *>>(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v7 = a2;
  uint64_t v6 = a3;
  while (1)
  {
    BOOL result = std::operator!=[abi:ne180100](&v7, &v6);
    if (!result) {
      break;
    }
    uint64_t v4 = (id *)std::__hash_const_iterator<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>::operator*[abi:ne180100]();
    std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::__insert_unique[abi:ne180100](a1, v4);
    std::__hash_const_iterator<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>::operator++[abi:ne180100](&v7);
  }
  return result;
}

uint64_t std::unordered_set<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::begin[abi:ne180100]()
{
  return std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::begin();
}

uint64_t std::unordered_set<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::end[abi:ne180100]()
{
  return std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::end();
}

uint64_t std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::~__hash_table(uint64_t a1)
{
  return a1;
}

{
  void **v1;

  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::__deallocate_node(a1, *v1);
  std::unique_ptr<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>>>>::~unique_ptr[abi:ne180100](a1);
  return a1;
}

void sub_7A698(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 - 4objc_storeStrong(&location, 0) = a1;
  *(_DWORD *)(v12 - 44) = a2;
  std::unique_ptr<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>>>>::~unique_ptr[abi:ne180100](a12);
  _Unwind_Resume(*(_Unwind_Exception **)(v12 - 40));
}

void *std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *>>::__bucket_list_deallocator[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  void v5[3];

  v5[2] = a1;
  v5[1] = a2;
  v5[0] = a3;
  std::__compressed_pair<unsigned long,std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *>>::__compressed_pair[abi:ne180100]<unsigned long &,std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> * const&>(a1, v5);
  return a1;
}

void *std::unique_ptr<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>>>>::unique_ptr[abi:ne180100]<true,void>(void *a1, uint64_t a2, void *a3)
{
  return a1;
}

{
  void v5[4];

  v5[3] = a1;
  v5[2] = a2;
  v5[1] = a3;
  v5[0] = 0;
  std::__compressed_pair<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>>>>::__compressed_pair[abi:ne180100]<decltype(nullptr),std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>>>(a1, (uint64_t)v5, a3);
  return a1;
}

void *std::__compressed_pair<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>>::__compressed_pair[abi:ne180100]<std::__default_init_tag,std::allocator>(void *a1)
{
  return a1;
}

{
  std::__compressed_pair_elem<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>,0,false>::__compressed_pair_elem[abi:ne180100](a1);
  std::__compressed_pair_elem<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *>,1,true>::__compressed_pair_elem[abi:ne180100]<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> * const&,void>();
  return a1;
}

void *std::__compressed_pair<unsigned long,HSUtil::ObjectHasher>::__compressed_pair[abi:ne180100]<int,HSUtil::ObjectHasher const&>(void *a1, int *a2)
{
  return a1;
}

{
  std::__compressed_pair_elem<unsigned long,0,false>::__compressed_pair_elem[abi:ne180100]<int,void>(a1, a2);
  std::__compressed_pair_elem<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *>,1,true>::__compressed_pair_elem[abi:ne180100]<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> * const&,void>();
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>>>>::reset[abi:ne180100]();
  return a1;
}

void *std::__compressed_pair<unsigned long,std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *>>::__compressed_pair[abi:ne180100]<unsigned long &,std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> * const&>(void *a1, void *a2)
{
  return a1;
}

{
  std::__hash_const_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_const_iterator[abi:ne180100](a1, a2);
  std::__compressed_pair_elem<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *>,1,true>::__compressed_pair_elem[abi:ne180100]<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> * const&,void>();
  return a1;
}

void *std::__compressed_pair<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>>>>::__compressed_pair[abi:ne180100]<decltype(nullptr),std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>>>(void *a1, uint64_t a2, void *a3)
{
  return a1;
}

{
  std::__compressed_pair_elem<HSUtil::CoderKey const**,0,false>::__compressed_pair_elem[abi:ne180100]<decltype(nullptr),void>(a1);
  std::__compressed_pair_elem<std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *>>,1,false>::__compressed_pair_elem[abi:ne180100]<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *>,void>(a1 + 1, a3);
  return a1;
}

void *std::__compressed_pair_elem<std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *>>,1,false>::__compressed_pair_elem[abi:ne180100]<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *>,void>(void *a1, void *a2)
{
  return a1;
}

void *std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *>>::__bucket_list_deallocator[abi:ne180100](void *a1, void *a2)
{
  return a1;
}

{
  void *v2;
  void *v3;
  void *result;

  *a1 = *a2;
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  unint64_t v3 = v2;
  BOOL result = a1;
  void *v3 = 0;
  return result;
}

void std::unique_ptr<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *>>>>::reset[abi:ne180100]()
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  unint64_t v3 = *v0;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v1 = 0;
  if (v3)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *>>::operator()[abi:ne180100](v2, v3);
  }
}

uint64_t std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::begin()
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](&v2, *v0);
  return v2;
}

void std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::__deallocate_node(uint64_t a1, void *a2)
{
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v7 = v2;
  while (a2)
  {
    uint64_t v6 = (void *)*a2;
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    unint64_t v5 = (void *)v3;
    std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100](v3);
    std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
    std::allocator_traits<std::allocator<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *>>>::destroy[abi:ne180100]<objc_object  {objcproto15HSStageObserver}*,void,void>(v7, v4);
    std::__destroy_at[abi:ne180100]<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>,0>((uint64_t)v5);
    std::allocator_traits<std::allocator<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *>>>::deallocate[abi:ne180100](v7, v5, 1);
    a2 = v6;
  }
}

void __cxx_global_var_init_49()
{
  {
    {
      HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
    }
  }
}

void __cxx_global_var_init_2_48(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_48(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_43(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_43(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_43(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_43(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_44(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void sub_7B1D8()
{
  _Unwind_Resume(v0);
}

HSUtil::EncoderBuf *HSUtil::EncoderBuf::EncoderBuf(HSUtil::EncoderBuf *this)
{
  return this;
}

{
  HSUtil::Encoder::Encoder(this);
  HSUtil::Buffer::Buffer((HSUtil::EncoderBuf *)((char *)this + 144));
  HSUtil::Encoder::setWritable(this, (HSUtil::EncoderBuf *)((char *)this + 152));
  return this;
}

void HSUtil::Encoder::encodeHSCodable(HSUtil::Coder *a1, void *a2)
{
  uint64_t v4 = a1;
  id location = 0;
  objc_storeStrong(&location, a2);
  uint64_t v2 = v4;
  if (HSUtil::Coder::ok(v4))
  {
    HSUtil::Encoder::_encodeHSCodable(v2, location);
    HSUtil::Coder::ok(v2);
  }
  objc_storeStrong(&location, 0);
}

uint64_t HSUtil::EncoderBuf::buffer(HSUtil::EncoderBuf *this)
{
  uint64_t v4 = this;
  if (HSUtil::Coder::ok(this)) {
    HSUtil::Encoder::flush(this);
  }
  if (!HSUtil::Coder::ok(this))
  {
    HSUtil::Buffer::Buffer((uint64_t)v3);
    HSUtil::Buffer::operator=((uint64_t)this + 144, (uint64_t)v3);
    HSUtil::Buffer::~Buffer((HSUtil::Buffer *)v3);
  }
  return (uint64_t)this + 144;
}

BOOL HSUtil::Buffer::operator BOOL(HSUtil::Buffer *a1)
{
  return HSUtil::Buffer::valid(a1);
}

uint64_t __os_log_helper_16_2_4_8_32_8_32_8_0_8_32(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(unsigned char *)BOOL result = 2;
  *(unsigned char *)(result + MTRestZoneIntegrator_::clearMotion(this, 1) = 4;
  *(unsigned char *)(result + 2) = 32;
  *(unsigned char *)(result + 3) = 8;
  *(void *)(result + 4) = a2;
  *(unsigned char *)(result + 12) = 32;
  *(unsigned char *)(result + 13) = 8;
  *(void *)(result + 14) = a3;
  *(unsigned char *)(result + 22) = 0;
  *(unsigned char *)(result + 23) = 8;
  *(void *)(result + 24) = a4;
  *(unsigned char *)(result + 32) = 32;
  *(unsigned char *)(result + 33) = 8;
  *(void *)(result + 34) = a5;
  return result;
}

NSData *HSUtil::Buffer::getNSData(HSUtil::Buffer *a1)
{
  if (HSUtil::Buffer::valid(a1))
  {
    uint64_t v4 = *((void *)a1 + 6);
    uint64_t v3 = HSUtil::Buffer::_releaseData(a1);
    unint64_t v5 = +[NSData dataWithBytesNoCopy:v3 length:v4 freeWhenDone:v3 != 0];
  }
  else
  {
    unint64_t v5 = 0;
  }

  return v5;
}

{
  NSData *v3;
  uint64_t vars8;

  if (HSUtil::Buffer::valid(a1)) {
    uint64_t v3 = +[NSData dataWithBytes:*((void *)a1 + 5) length:*((void *)a1 + 6)];
  }
  else {
    uint64_t v3 = 0;
  }

  return v3;
}

void HSUtil::EncoderBuf::~EncoderBuf(HSUtil::EncoderBuf *this)
{
}

{
  HSUtil::Buffer::~Buffer((HSUtil::EncoderBuf *)((char *)this + 144));
  HSUtil::Encoder::~Encoder(this);
}

void sub_7B754()
{
  _Unwind_Resume(v0);
}

uint64_t HSUtil::Buffer::Buffer(uint64_t a1, void *a2)
{
  uint64_t v6 = a1;
  id location = 0;
  objc_storeStrong(&location, a2);
  uint64_t v3 = v6;
  id v4 = [location bytes];
  HSUtil::Buffer::Buffer(v3, (uint64_t)v4, (uint64_t)[location length]);
  objc_storeStrong(&location, 0);
  return v3;
}

{
  uint64_t v3;
  id v4;
  id location;
  uint64_t v6;

  uint64_t v6 = a1;
  id location = 0;
  objc_storeStrong(&location, a2);
  uint64_t v3 = v6;
  id v4 = [location bytes];
  HSUtil::Buffer::Buffer(v3, v4, (size_t)[location length]);
  objc_storeStrong(&location, 0);
  return v3;
}

void sub_7B7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, _Unwind_Exception *exception_object)
{
  objc_storeStrong((id *)(v15 - 24), 0);
  _Unwind_Resume(a1);
}

uint64_t HSUtil::DecoderBuf::DecoderBuf(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  HSUtil::Decoder::Decoder((HSUtil::Decoder *)a1);
  HSUtil::Buffer::Buffer(a1 + 80, a2);
  HSUtil::Decoder::setReadable((HSUtil::Decoder *)a1, (HSUtil::IO::Readable *)(a1 + 80));
  return a1;
}

void HSUtil::Decoder::decodeHSCodable(HSUtil::Coder *a1, void *a2)
{
  uint64_t v6 = a1;
  id location = 0;
  objc_storeStrong(&location, a2);
  uint64_t v2 = v6;
  if (HSUtil::Coder::fatalError(v6))
  {
    int v4 = 1;
  }
  else
  {
    unint64_t v3 = 0;
    unint64_t v3 = *((void *)v2 + 9);
    HSUtil::Decoder::_readHSCodable((uint64_t)v2, &v3, location);
    if (HSUtil::Coder::ok(v2))
    {
      *((void *)v2 + 9) = v3;
      int v4 = 0;
    }
    else
    {
      int v4 = 1;
    }
  }
  objc_storeStrong(&location, 0);
}

void HSUtil::DecoderBuf::~DecoderBuf(HSUtil::DecoderBuf *this)
{
}

{
  HSUtil::Buffer::~Buffer((HSUtil::DecoderBuf *)((char *)this + 80));
  HSUtil::Decoder::~Decoder(this);
}

void sub_7BD7C()
{
  _Unwind_Resume(v0);
}

id HSUtil::Decoder::decodeObject(HSUtil::Decoder *this)
{
  v5[1] = (unint64_t)this;
  if (HSUtil::Coder::fatalError(this))
  {
    id v6 = 0;
  }
  else
  {
    v5[0] = 0;
    v5[0] = *((void *)this + 9);
    id location = HSUtil::Decoder::_readObject(this, v5);
    if (HSUtil::Coder::ok(this))
    {
      *((void *)this + 9) = v5[0];
      id v6 = location;
    }
    else
    {
      id v6 = 0;
    }
    objc_storeStrong(&location, 0);
  }
  uint64_t v1 = v6;

  return v1;
}

void sub_7C1EC()
{
  _Unwind_Resume(v0);
}

void HSUtil::Encoder::encodeObject(HSUtil::Encoder *this, objc_object *a2)
{
  uint64_t v8 = this;
  id location = 0;
  objc_storeStrong(&location, a2);
  unint64_t v3 = v8;
  char v5 = 0;
  BOOL v4 = 1;
  if (location)
  {
    uint64_t v2 = (NSNull *)location;
    id v6 = +[NSNull null];
    char v5 = 1;
    BOOL v4 = v2 == v6;
  }
  if (v5) {

  }
  if (v4)
  {
    HSUtil::Encoder::encodeNull(v3);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      HSUtil::Encoder::encodeNSNumber(v3, (NSNumber *)location);
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        HSUtil::Encoder::encodeNSString(v3, (NSString *)location);
      }
      else
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          HSUtil::Encoder::encodeNSData(v3, (NSData *)location);
        }
        else
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            HSUtil::Encoder::encodeNSDictionary(v3, (NSDictionary *)location);
          }
          else
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              HSUtil::Encoder::encodeNSArray(v3, (NSArray *)location);
            }
            else {
              HSUtil::Encoder::encodeObjectWithCallback(v3, (objc_object *)location);
            }
          }
        }
      }
    }
  }
  objc_storeStrong(&location, 0);
}

void sub_7C528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, HSUtil::Encoder *a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

HSUtil::Encoder *HSUtil::Encoder::Encoder(HSUtil::Encoder *this)
{
  HSUtil::Coder::Coder(this);
  HSUtil::Encoder::Callbacks::Callbacks((HSUtil::Encoder *)((char *)this + 8));
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  std::vector<HSUtil::Encoder::ContainerRecord>::vector[abi:ne180100]((void *)this + 7);
  HSUtil::Encoder::{unnamed type#1}::Encoder((uint64_t)this + 80);
  BOOL result = this;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  return result;
}

{
  HSUtil::Encoder::Encoder(this);
  return this;
}

HSUtil::Buffer *HSUtil::Buffer::Buffer(HSUtil::Buffer *this)
{
  return this;
}

{
  HSUtil::IO::Readable::Readable(this);
  HSUtil::IO::Writable::Writable((void *)this + 1);
  HSUtil::IO::ReadableFrom::ReadableFrom((void *)this + 2);
  HSUtil::IO::WritableTo::WritableTo((void *)this + 3);
  HSUtil::IO::Memoryable::Memoryable((void *)this + 4);
  *(void *)this = &off_1410A8;
  *((void *)this + MTRestZoneIntegrator_::clearMotion(this, 1) = &off_141100;
  *((void *)this + 2) = &off_141120;
  *((void *)this + 3) = &off_141138;
  *((void *)this + 4) = off_141150;
  HSUtil::Buffer::{unnamed type#1}::Buffer((uint64_t)this + 40);
  return this;
}

uint64_t *HSUtil::Encoder::setWritable(HSUtil::Encoder *this, HSUtil::IO::Writable *a2)
{
  BOOL result = (uint64_t *)HSUtil::Coder::fatalError(this);
  if ((result & 1) == 0)
  {
    *((void *)this + 5) = a2;
    lpsrc = (void *)*((void *)this + 5);
    if (lpsrc) {
    else
    }
      unint64_t v3 = 0;
    *((void *)this + 6) = v3;
    return HSUtil::Encoder::reset(this);
  }
  return result;
}

void HSUtil::Encoder::~Encoder(HSUtil::Encoder *this)
{
}

{
  HSUtil::Encoder::~Encoder(this);
}

_DWORD *HSUtil::Coder::Coder(_DWORD *this)
{
  *this = 0;
  return this;
}

HSUtil::Encoder::Callbacks *HSUtil::Encoder::Callbacks::Callbacks(HSUtil::Encoder::Callbacks *this)
{
  return this;
}

{
  std::function<BOOL ()(HSUtil::Encoder &,objc_object *)>::function<BOOL (*)(HSUtil::Encoder &,objc_object *),void>(this, (uint64_t)HSUtil::Encoder::EncodeObject);
  return this;
}

void *std::vector<HSUtil::Encoder::ContainerRecord>::vector[abi:ne180100](void *a1)
{
  return a1;
}

{
  *a1 = 0;
  a1[1] = 0;
  std::__compressed_pair<HSUtil::Encoder::ContainerRecord *>::__compressed_pair[abi:ne180100]<decltype(nullptr),std::__default_init_tag>(a1 + 2);
  return a1;
}

uint64_t HSUtil::Encoder::{unnamed type#1}::Encoder(uint64_t a1)
{
  return a1;
}

{
  uint64_t result;

  std::vector<HSUtil::Encoder::KeyState>::vector[abi:ne180100]((void *)a1);
  BOOL result = a1;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  return result;
}

uint64_t HSUtil::Encoder::EncodeObject(HSUtil::Encoder *this, HSUtil::Encoder *a2, objc_object *a3)
{
  uint64_t v7 = this;
  id location = 0;
  objc_storeStrong(&location, a2);
  HSUtil::Encoder::encodeObjectStart(v7, (const CoderKey *)HSUtil::Coder::_ObjectType, 4u);
  char v5 = v7;
  BOOL v4 = (CoderKey *)[(id)objc_opt_class() hsClassName];
  HSUtil::Encoder::encodeKey(v5, v4);
  HSUtil::Encoder::encodeHSCodable(v7, location);
  HSUtil::Encoder::encodeObjectStop(v7);
  objc_storeStrong(&location, 0);
  return 1;
}

void sub_7C8B4(uint64_t a1, int a2)
{
  *(void *)(v2 - 24) = a1;
  *(_DWORD *)(v2 - 28) = a2;
  objc_storeStrong((id *)(v2 - 16), 0);
  _Unwind_Resume(*(_Unwind_Exception **)(v2 - 24));
}

void *std::function<BOOL ()(HSUtil::Encoder &,objc_object *)>::function<BOOL (*)(HSUtil::Encoder &,objc_object *),void>(void *a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t v4[2];

  v4[1] = (uint64_t)a1;
  v4[0] = a2;
  std::__function::__value_func<BOOL ()(HSUtil::Encoder &,objc_object *)>::__value_func[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *),0>(a1, v4);
  return a1;
}

BOOL HSUtil::Encoder::encodeObjectStart(HSUtil::Coder *a1, const CoderKey *a2, unsigned __int32 a3)
{
  BOOL result = HSUtil::Coder::ok(a1);
  if (result)
  {
    HSUtil::Encoder::_encodeObjectStart(a1, a3);
    BOOL result = HSUtil::Coder::ok(a1);
    if (result)
    {
      HSUtil::Encoder::_encodeKey(a1, a2);
      return HSUtil::Coder::ok(a1);
    }
  }
  return result;
}

BOOL HSUtil::Encoder::encodeKey(HSUtil::Encoder *this, const CoderKey *a2)
{
  BOOL result = HSUtil::Coder::ok(this);
  if (result)
  {
    HSUtil::Encoder::_encodeKey(this, a2);
    return HSUtil::Coder::ok(this);
  }
  return result;
}

BOOL HSUtil::Encoder::encodeObjectStop(HSUtil::Encoder *this)
{
  BOOL result = HSUtil::Coder::ok(this);
  if (result)
  {
    HSUtil::Encoder::_encodeContainerStop((uint64_t (***)(void))this);
    return HSUtil::Coder::ok(this);
  }
  return result;
}

BOOL HSUtil::Encoder::_encodeObjectStart(void *a1, unsigned __int32 a2)
{
  id v6 = a1;
  unsigned __int32 v5 = a2;
  v4.n128_u64[0] = a1[17];
  v4.n128_u32[2] = a2;
  std::vector<HSUtil::Encoder::ContainerRecord>::push_back[abi:ne180100](a1 + 7, &v4);
  switch(v5)
  {
    case 1u:
      HSUtil::Encoder::_writeTokenValue8(a1, 0xECu, 0);
      break;
    case 2u:
      HSUtil::Encoder::_writeTokenValue16(a1, 0xEDu, 0);
      break;
    case 4u:
      HSUtil::Encoder::_writeTokenValue32(a1, 0xEEu, 0);
      break;
    default:
      abort();
  }
  return HSUtil::Coder::ok((HSUtil::Coder *)a1);
}

uint64_t std::vector<HSUtil::Encoder::ContainerRecord>::push_back[abi:ne180100](uint64_t *a1, __n128 *a2)
{
  unint64_t v5 = a1[1];
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  if (v5 >= *v2)
  {
    uint64_t result = std::vector<HSUtil::Encoder::ContainerRecord>::__push_back_slow_path<HSUtil::Encoder::ContainerRecord>(a1, a2);
    uint64_t v6 = result;
  }
  else
  {
    uint64_t result = (uint64_t)std::vector<HSUtil::Encoder::ContainerRecord>::__construct_one_at_end[abi:ne180100]<HSUtil::Encoder::ContainerRecord>((uint64_t)a1, a2);
    uint64_t v6 = v5 + 16;
  }
  a1[1] = v6;
  return result;
}

void *std::vector<HSUtil::Encoder::ContainerRecord>::__construct_one_at_end[abi:ne180100]<HSUtil::Encoder::ContainerRecord>(uint64_t a1, __n128 *a2)
{
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  std::vector<HSUtil::Encoder::ContainerRecord>::_ConstructTransaction::_ConstructTransaction[abi:ne180100](&v6, a1, 1);
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v5 = v2;
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  std::allocator_traits<std::allocator<HSUtil::Encoder::ContainerRecord>>::construct[abi:ne180100]<HSUtil::Encoder::ContainerRecord,HSUtil::Encoder::ContainerRecord,void>(v5, v3, v8);
  v7 += 16;
  return std::vector<HSUtil::Encoder::ContainerRecord>::_ConstructTransaction::~_ConstructTransaction[abi:ne180100](&v6);
}

void sub_7CC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, _Unwind_Exception *exception_object, uint64_t a15)
{
}

uint64_t std::vector<HSUtil::Encoder::ContainerRecord>::__push_back_slow_path<HSUtil::Encoder::ContainerRecord>(uint64_t *a1, __n128 *a2)
{
  uint64_t v15 = a1;
  char v14 = a2;
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v13 = v2;
  uint64_t v3 = std::vector<HSUtil::Encoder::ContainerRecord>::size[abi:ne180100](a1);
  unint64_t v9 = std::vector<HSUtil::Encoder::ContainerRecord>::__recommend[abi:ne180100](a1, v3 + 1);
  uint64_t v4 = std::vector<HSUtil::Encoder::ContainerRecord>::size[abi:ne180100](a1);
  std::__split_buffer<HSUtil::Encoder::ContainerRecord>::__split_buffer(v11, v9, v4, v13);
  uint64_t v10 = v13;
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  std::allocator_traits<std::allocator<HSUtil::Encoder::ContainerRecord>>::construct[abi:ne180100]<HSUtil::Encoder::ContainerRecord,HSUtil::Encoder::ContainerRecord,void>(v10, v5, v14);
  v12 += 16;
  std::vector<HSUtil::Encoder::ContainerRecord>::__swap_out_circular_buffer(a1, v11);
  uint64_t v7 = a1[1];
  std::__split_buffer<HSUtil::Encoder::ContainerRecord>::~__split_buffer(v11);
  return v7;
}

void sub_7CD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, _Unwind_Exception *exception_object, void *a16)
{
}

void *std::vector<HSUtil::Encoder::ContainerRecord>::_ConstructTransaction::_ConstructTransaction[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

double std::allocator_traits<std::allocator<HSUtil::Encoder::ContainerRecord>>::construct[abi:ne180100]<HSUtil::Encoder::ContainerRecord,HSUtil::Encoder::ContainerRecord,void>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  *(void *)&double result = std::allocator<HSUtil::Encoder::ContainerRecord>::construct[abi:ne180100]<HSUtil::Encoder::ContainerRecord,HSUtil::Encoder::ContainerRecord>(a1, a2, a3).n128_u64[0];
  return result;
}

void *std::vector<HSUtil::Encoder::ContainerRecord>::_ConstructTransaction::~_ConstructTransaction[abi:ne180100](void *a1)
{
  return a1;
}

void *std::vector<HSUtil::Encoder::ContainerRecord>::_ConstructTransaction::_ConstructTransaction[abi:ne180100](void *result, uint64_t a2, uint64_t a3)
{
  uint64_t *result = a2;
  result[1] = *(void *)(a2 + 8);
  result[2] = *(void *)(a2 + 8) + 16 * a3;
  return result;
}

__n128 std::allocator<HSUtil::Encoder::ContainerRecord>::construct[abi:ne180100]<HSUtil::Encoder::ContainerRecord,HSUtil::Encoder::ContainerRecord>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void *std::vector<HSUtil::Encoder::ContainerRecord>::_ConstructTransaction::~_ConstructTransaction[abi:ne180100](void *result)
{
  *(void *)(*result + 8) = result[1];
  return result;
}

unint64_t std::vector<HSUtil::Encoder::ContainerRecord>::__recommend[abi:ne180100](void *a1, uint64_t a2)
{
  v7[1] = a1;
  v7[0] = a2;
  unint64_t v6 = std::vector<HSUtil::Encoder::ContainerRecord>::max_size((uint64_t)a1);
  if (v7[0] > v6) {
    std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v5 = std::vector<HSUtil::Encoder::ContainerRecord>::capacity[abi:ne180100](a1);
  if (v5 >= v6 / 2) {
    return v6;
  }
  uint64_t v4 = 2 * v5;
  return *std::max[abi:ne180100]<unsigned long>(&v4, v7);
}

uint64_t std::vector<HSUtil::Encoder::ContainerRecord>::size[abi:ne180100](void *a1)
{
  return (a1[1] - *a1) / 16;
}

void **std::__split_buffer<HSUtil::Encoder::ContainerRecord>::__split_buffer(void **a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1;
}

{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v9;
  void v11[2];
  uint64_t v12;
  unint64_t v13;
  void **v14;
  void **v15;

  char v14 = a1;
  uint64_t v13 = a2;
  uint64_t v12 = a3;
  v11[1] = a4;
  uint64_t v15 = a1;
  v11[0] = 0;
  std::__compressed_pair<HSUtil::Encoder::ContainerRecord *>::__compressed_pair[abi:ne180100]<decltype(nullptr),std::allocator<HSUtil::Encoder::ContainerRecord> &>(a1 + 3, (uint64_t)v11, a4);
  if (v13)
  {
    uint64_t v4 = std::__split_buffer<HSUtil::Encoder::ContainerRecord>::__alloc[abi:ne180100]((uint64_t)a1);
    *a1 = std::__allocate_at_least[abi:ne180100]<std::allocator<HSUtil::Encoder::KeyState>>(v4, v13);
    uint64_t v13 = v5;
  }
  else
  {
    *a1 = 0;
  }
  unint64_t v6 = (uint64_t)*a1 + 16 * v12;
  a1[2] = (void *)v6;
  a1[1] = (void *)v6;
  unint64_t v9 = (unint64_t)*a1 + 16 * v13;
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  HSUtil::Encoder *v7 = v9;
  return v15;
}

void std::vector<HSUtil::Encoder::ContainerRecord>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v15 = a1;
  char v14 = a2;
  std::vector<HSUtil::CoderKey const*>::__annotate_delete[abi:ne180100]();
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v7 = v2;
  std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>::reverse_iterator[abi:ne180100](v12, a1[1]);
  std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>::reverse_iterator[abi:ne180100](v11, *a1);
  std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>::reverse_iterator[abi:ne180100](v10, v14[1]);
  v13[0] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HSUtil::Encoder::ContainerRecord>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord*>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord*>,HSUtil::Encoder::ContainerRecord,void>(v7, v12[0], v12[1], v11[0], v11[1], v10[0], v10[1]);
  v13[1] = v3;
  uint64_t v4 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)v13);
  v14[1] = v4;
  std::swap[abi:ne180100]<HSUtil::Encoder::ContainerRecord *>(a1, v14 + 1);
  std::swap[abi:ne180100]<HSUtil::Encoder::ContainerRecord *>(a1 + 1, v14 + 2);
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v8 = v5;
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  std::swap[abi:ne180100]<HSUtil::Encoder::ContainerRecord *>(v8, v6);
  *char v14 = v14[1];
  std::vector<HSUtil::Encoder::ContainerRecord>::size[abi:ne180100](a1);
  std::allocator<HSUtil::CoderKey const*>::destroy[abi:ne180100]();
}

void **std::__split_buffer<HSUtil::Encoder::ContainerRecord>::~__split_buffer(void **a1)
{
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  std::__split_buffer<HSUtil::Encoder::ContainerRecord>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
  {
    uint64_t v2 = std::__split_buffer<HSUtil::Encoder::ContainerRecord>::__alloc[abi:ne180100]((uint64_t)a1);
    uint64_t v3 = *a1;
    uint64_t v4 = std::__split_buffer<HSUtil::Encoder::ContainerRecord>::capacity[abi:ne180100](a1);
    std::allocator_traits<std::allocator<HSUtil::Encoder::ContainerRecord>>::deallocate[abi:ne180100](v2, v3, v4);
  }
  return a1;
}

uint64_t std::vector<HSUtil::Encoder::ContainerRecord>::max_size(uint64_t a1)
{
  v3[1] = a1;
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  v3[0] = std::allocator_traits<std::allocator<HSUtil::Encoder::ContainerRecord>>::max_size[abi:ne180100]<std::allocator<HSUtil::Encoder::ContainerRecord>,void>();
  uint64_t v2 = std::numeric_limits<long>::max[abi:ne180100]();
  return *std::min[abi:ne180100]<unsigned long>(v3, &v2);
}

uint64_t std::vector<HSUtil::Encoder::ContainerRecord>::capacity[abi:ne180100](void *a1)
{
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  return (*v1 - *a1) / 16;
}

uint64_t std::allocator_traits<std::allocator<HSUtil::Encoder::ContainerRecord>>::max_size[abi:ne180100]<std::allocator<HSUtil::Encoder::ContainerRecord>,void>()
{
  return std::allocator<HSUtil::Encoder::ContainerRecord>::max_size[abi:ne180100]();
}

uint64_t std::allocator<HSUtil::Encoder::ContainerRecord>::max_size[abi:ne180100]()
{
  return 0xFFFFFFFFFFFFFFFLL;
}

void *std::__compressed_pair<HSUtil::Encoder::ContainerRecord *>::__compressed_pair[abi:ne180100]<decltype(nullptr),std::allocator<HSUtil::Encoder::ContainerRecord> &>(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  std::__compressed_pair_elem<HSUtil::CoderKey const**,0,false>::__compressed_pair_elem[abi:ne180100]<decltype(nullptr),void>(a1);
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](a1 + 1, a3);
  return a1;
}

uint64_t std::__split_buffer<HSUtil::Encoder::ContainerRecord>::__alloc[abi:ne180100](uint64_t a1)
{
  return std::__compressed_pair<HSUtil::Encoder::ContainerRecord *>::second[abi:ne180100](a1 + 24);
}

uint64_t std::__compressed_pair<HSUtil::Encoder::ContainerRecord *>::second[abi:ne180100](uint64_t a1)
{
  return std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100](a1 + 8);
}

uint64_t std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100](uint64_t a1)
{
  return *(void *)a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HSUtil::Encoder::ContainerRecord>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord*>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord*>,HSUtil::Encoder::ContainerRecord,void>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return std::move[abi:ne180100]<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>>(a2, a3, a4, a5, a6, a7);
}

void *std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>::reverse_iterator[abi:ne180100](void *a1, uint64_t a2)
{
  return a1;
}

uint64_t *std::swap[abi:ne180100]<HSUtil::Encoder::ContainerRecord *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t *result = *a2;
  *a2 = v2;
  return result;
}

uint64_t std::move[abi:ne180100]<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>>(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v13 = a1;
  unint64_t v14 = a2;
  uint64_t v11 = a3;
  uint64_t v12 = a4;
  uint64_t v9 = a5;
  uint64_t v10 = a6;
  std::__move[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>>(a1, a2, a3, a4, a5, a6, &v7);
  return v8;
}

_OWORD *std::__move[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>>@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X8>)
{
  return std::__dispatch_copy_or_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>>(a1, a2, a3, a4, a5, a6, a7);
}

_OWORD *std::__dispatch_copy_or_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>>@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X8>)
{
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,0>(a1, a2, a3, a4, a5, a6, a7);
}

_OWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,0>@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X8>)
{
  v26.n128_u64[0] = a1;
  v26.n128_u64[1] = a2;
  *(void *)&long long v25 = a3;
  *((void *)&v25 + MTRestZoneIntegrator_::clearMotion(this, 1) = a4;
  *(void *)&long long v24 = a5;
  *((void *)&v24 + MTRestZoneIntegrator_::clearMotion(this, 1) = a6;
  __n128 v22 = v26;
  long long v21 = v25;
  std::__unwrap_range[abi:ne180100]<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>>(a1, a2, a3, a4, v23);
  long long v18 = v23[0];
  long long v17 = v23[1];
  v14[1] = v24;
  std::__unwrap_iter[abi:ne180100]<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::__unwrap_iter_impl<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,false>,0>();
  unint64_t v15 = v7;
  unint64_t v16 = v8;
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>>(v18, *((uint64_t *)&v18 + 1), v17, *((uint64_t *)&v17 + 1), v7, v8, &v19);
  void v13[2] = v26;
  v13[1] = v19;
  *(void *)&v14[0] = std::__rewrap_range[abi:ne180100]<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>>(v26.n128_i64[0], v26.n128_i64[1], v19.n128_i64[0]);
  *((void *)&v14[0] + MTRestZoneIntegrator_::clearMotion(this, 1) = v9;
  v13[0].n128_u64[0] = std::__rewrap_iter[abi:ne180100]<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::__unwrap_iter_impl<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,false>>(v24, *((uint64_t *)&v24 + 1), v20);
  v13[0].n128_u64[1] = v10;
  return std::make_pair[abi:ne180100]<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>>(v14, v13, a7);
}

_OWORD *std::__unwrap_range[abi:ne180100]<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>>@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  v15.n128_u64[0] = a1;
  v15.n128_u64[1] = a2;
  uint64_t v13 = a3;
  uint64_t v14 = a4;
  v11[1] = v15;
  std::__unwrap_iter[abi:ne180100]<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::__unwrap_iter_impl<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,false>,0>();
  *(void *)&long long v12 = v5;
  *((void *)&v12 + MTRestZoneIntegrator_::clearMotion(this, 1) = v6;
  std::__unwrap_iter[abi:ne180100]<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::__unwrap_iter_impl<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,false>,0>();
  v11[0].n128_u64[0] = v7;
  v11[0].n128_u64[1] = v8;
  return std::make_pair[abi:ne180100]<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>>(&v12, v11, a5);
}

_OWORD *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, unint64_t a5@<X5>, unint64_t a6@<X6>, _OWORD *a7@<X8>)
{
  *(void *)&long long v12 = a1;
  *((void *)&v12 + MTRestZoneIntegrator_::clearMotion(this, 1) = a2;
  v11[0] = a3;
  v11[1] = a4;
  v10.n128_u64[0] = a5;
  v10.n128_u64[1] = a6;
  while (std::operator!=[abi:ne180100]<HSUtil::Encoder::ContainerRecord *,HSUtil::Encoder::ContainerRecord *>((uint64_t)&v12, (uint64_t)v11))
  {
    unint64_t v8 = (_OWORD *)std::_IterOps<std::_ClassicAlgPolicy>::__iter_move[abi:ne180100]<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *> &,0>((MTFingerToPathMap_ *)&v12);
    *(_OWORD *)std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>::operator*[abi:ne180100]((uint64_t)&v1objc_storeStrong(&location, 0) = *v8;
    std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>::operator++[abi:ne180100]((uint64_t)&v12);
    std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>::operator++[abi:ne180100]((uint64_t)&v10);
  }
  return std::make_pair[abi:ne180100]<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>>(&v12, &v10, a7);
}

void std::__unwrap_iter[abi:ne180100]<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::__unwrap_iter_impl<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,false>,0>()
{
}

_OWORD *std::make_pair[abi:ne180100]<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>>@<X0>(_OWORD *a1@<X0>, __n128 *a2@<X1>, _OWORD *a3@<X8>)
{
  return std::pair<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>>::pair[abi:ne180100]<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,0>(a3, a1, a2);
}

uint64_t std::__rewrap_range[abi:ne180100]<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__rewrap_iter[abi:ne180100]<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::__unwrap_iter_impl<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,false>>(a1, a2, a3);
}

uint64_t std::__rewrap_iter[abi:ne180100]<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::__unwrap_iter_impl<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,false>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__unwrap_iter_impl<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,false>::__rewrap[abi:ne180100](a1, a2, a3);
}

BOOL std::operator!=[abi:ne180100]<HSUtil::Encoder::ContainerRecord *,HSUtil::Encoder::ContainerRecord *>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100](a1);
  return v3 != std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100](a2);
}

uint64_t std::_IterOps<std::_ClassicAlgPolicy>::__iter_move[abi:ne180100]<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *> &,0>(MTFingerToPathMap_ *a1)
{
  return std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>::operator*[abi:ne180100]((uint64_t)a1);
}

uint64_t std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>::operator*[abi:ne180100](uint64_t a1)
{
  return *(void *)(a1 + 8) - 16;
}

uint64_t std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>::operator++[abi:ne180100](uint64_t result)
{
  *(void *)(result + 8) -= 16;
  return result;
}

_OWORD *std::pair<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>>::pair[abi:ne180100]<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,0>(_OWORD *a1, _OWORD *a2, __n128 *a3)
{
  return a1;
}

__n128 std::pair<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>>::pair[abi:ne180100]<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,0>(_OWORD *a1, _OWORD *a2, __n128 *a3)
{
  *a1 = *a2;
  __n128 result = *a3;
  a1[1] = *a3;
  return result;
}

uint64_t std::__unwrap_iter_impl<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,false>::__rewrap[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void *std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>::reverse_iterator[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t *result = a2;
  result[1] = a2;
  return result;
}

void std::__split_buffer<HSUtil::Encoder::ContainerRecord>::clear[abi:ne180100](uint64_t a1)
{
}

void std::allocator_traits<std::allocator<HSUtil::Encoder::ContainerRecord>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

uint64_t std::__split_buffer<HSUtil::Encoder::ContainerRecord>::capacity[abi:ne180100](void *a1)
{
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  return (*v1 - *a1) / 16;
}

void std::__split_buffer<HSUtil::Encoder::ContainerRecord>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
}

{
  while (a2 != *(void *)(a1 + 16))
  {
    std::__split_buffer<HSUtil::Encoder::ContainerRecord>::__alloc[abi:ne180100](a1);
    *(void *)(a1 + 16) -= 16;
    std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
    std::allocator_traits<std::allocator<HSUtil::CoderKey const*>>::destroy[abi:ne180100]<HSUtil::CoderKey const*,void>();
  }
}

void std::allocator<HSUtil::Encoder::ContainerRecord>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

uint64_t std::vector<HSUtil::Encoder::KeyState>::operator[][abi:ne180100](void *a1, uint64_t a2)
{
  return *a1 + 16 * a2;
}

void std::allocator_traits<std::allocator<HSUtil::Encoder::KeyState>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::allocator<HSUtil::Encoder::KeyState>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::vector<HSUtil::Encoder::KeyState>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); a2 != i; i -= 16)
  {
    std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
    std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
    std::allocator_traits<std::allocator<HSUtil::CoderKey const*>>::destroy[abi:ne180100]<HSUtil::CoderKey const*,void>();
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t std::vector<HSUtil::Encoder::ContainerRecord>::back[abi:ne180100](uint64_t a1)
{
  return *(void *)(a1 + 8) - 16;
}

void std::vector<HSUtil::Encoder::ContainerRecord>::pop_back(void *a1)
{
}

void std::vector<HSUtil::Encoder::ContainerRecord>::__destruct_at_end[abi:ne180100](void *a1, uint64_t a2)
{
}

void std::vector<HSUtil::Encoder::ContainerRecord>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); a2 != i; i -= 16)
  {
    std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
    std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
    std::allocator_traits<std::allocator<HSUtil::CoderKey const*>>::destroy[abi:ne180100]<HSUtil::CoderKey const*,void>();
  }
  *(void *)(a1 + 8) = a2;
}

void *std::__function::__value_func<BOOL ()(HSUtil::Encoder &,objc_object *)>::__value_func[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *),0>(void *a1, uint64_t *a2)
{
  unint64_t v7 = a1;
  uint64_t v6 = a2;
  std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>::allocator[abi:ne180100]((uint64_t)&v5);
  std::__function::__value_func<BOOL ()(HSUtil::Encoder &,objc_object *)>::__value_func[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>>(a1, a2, (uint64_t)&v5);
  return a1;
}

uint64_t std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>::allocator[abi:ne180100](uint64_t a1)
{
  return a1;
}

void *std::__function::__value_func<BOOL ()(HSUtil::Encoder &,objc_object *)>::__value_func[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>>(void *a1, uint64_t *a2, uint64_t a3)
{
  return a1;
}

{
  uint64_t v4;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  void *v10;
  void *v11;

  __n128 v10 = a1;
  uint64_t v9 = a2;
  unint64_t v8 = a3;
  uint64_t v11 = a1;
  a1[3] = 0;
  if (std::__function::__not_null[abi:ne180100]<BOOL ()(HSUtil::Encoder &,objc_object *)>(*v9))
  {
    std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v7);
    uint64_t v4 = (uint64_t)v9;
    std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v6);
    std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>::__func[abi:ne180100](a1, v4, (uint64_t)&v6);
    a1[3] = a1;
  }
  return v11;
}

BOOL std::__function::__not_null[abi:ne180100]<BOOL ()(HSUtil::Encoder &,objc_object *)>(uint64_t a1)
{
  return a1 != 0;
}

uint64_t std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>(uint64_t a1)
{
  return a1;
}

{
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  return a1;
}

void *std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>::__func[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  std::__function::__base<BOOL ()(HSUtil::Encoder &,objc_object *)>::__base[abi:ne180100](a1);
  *a1 = off_141E10;
  std::__function::__alloc_func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>::__alloc_func[abi:ne180100](a1 + 1, a2, a3);
  return a1;
}

{
  std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>::__func[abi:ne180100](a1, a2, a3);
  return a1;
}

{
  std::__function::__base<BOOL ()(HSUtil::Encoder &,objc_object *)>::__base[abi:ne180100](a1);
  *a1 = off_141E10;
  std::__function::__alloc_func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>::__alloc_func[abi:ne180100](a1 + 1, a2, a3);
  return a1;
}

{
  std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>::__func[abi:ne180100](a1, a2, a3);
  return a1;
}

{
  std::__function::__base<BOOL ()(HSUtil::Encoder &,objc_object *)>::__base[abi:ne180100](a1);
  *a1 = off_141E10;
  std::__function::__alloc_func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>::__alloc_func[abi:ne180100](a1 + 1, a2, a3);
  return a1;
}

void sub_7E28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

void *std::__function::__base<BOOL ()(HSUtil::Encoder &,objc_object *)>::__base[abi:ne180100](void *result)
{
  uint64_t *result = off_141E90;
  return result;
}

void *std::__function::__alloc_func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>::__alloc_func[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  uint64_t v5;
  uint64_t v6;

  uint64_t v6 = std::forward_as_tuple[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>(a2);
  char v5 = std::forward_as_tuple[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>(a3);
  std::__compressed_pair<BOOL (*)(HSUtil::Encoder &,objc_object *)>::__compressed_pair[abi:ne180100]<BOOL (*&&)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>&&>(a1, v6, v5);
  return a1;
}

uint64_t std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>::~__func(uint64_t a1)
{
}

uint64_t std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>::__clone(uint64_t a1)
{
  uint64_t v11 = a1;
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v10);
  uint64_t v4 = std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocate[abi:ne180100]((uint64_t)&v10, 1uLL);
  std::__allocator_destructor<std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>>::__allocator_destructor[abi:ne180100](&v8, (uint64_t)&v10, 1);
  std::unique_ptr<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>,std::__allocator_destructor<std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>>>::unique_ptr[abi:ne180100]<true,void>((uint64_t)v9, (uint64_t)v4, &v8);
  char v5 = (void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  uint64_t v6 = v1;
  std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)v7);
  std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>::__func[abi:ne180100](v5, v6, (uint64_t)v7);
  uint64_t v3 = std::unique_ptr<std::__hash_node<HSStage * {__strong},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::release[abi:ne180100]();
  std::unique_ptr<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>,std::__allocator_destructor<std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>>>::~unique_ptr[abi:ne180100]((uint64_t)v9);
  return v3;
}

void sub_7E478(uint64_t a1, int a2)
{
  *(void *)(v2 - 64) = a1;
  *(_DWORD *)(v2 - 68) = a2;
  std::unique_ptr<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>,std::__allocator_destructor<std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>>>::~unique_ptr[abi:ne180100](v2 - 40);
  _Unwind_Resume(*(_Unwind_Exception **)(v2 - 64));
}

void *std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  uint64_t v5 = v2;
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  return std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>::__func[abi:ne180100](a2, v5, v3);
}

void std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>::destroy()
{
}

void std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>::destroy_deallocate(void *a1)
{
  uint64_t v3 = a1;
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v2);
  std::vector<HSUtil::CoderKey const*>::__annotate_delete[abi:ne180100]();
  std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::deallocate[abi:ne180100]((uint64_t)&v2, a1, 1);
}

uint64_t std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>::operator()(uint64_t a1, uint64_t a2, void *a3)
{
  return std::__function::__alloc_func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>::operator()[abi:ne180100](a1 + 8, a2, a3) & 1;
}

uint64_t std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>::target(uint64_t a1, uint64_t a2)
{
    return 0;
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  return v2;
}

_UNKNOWN **std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>::target_type()
{
}

void std::__function::__base<BOOL ()(HSUtil::Encoder &,objc_object *)>::~__base()
{
}

{
  __break(1u);
}

uint64_t std::forward_as_tuple[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>(uint64_t a1)
{
  std::tuple<BOOL (*&&)(HSUtil::Encoder &,objc_object *)>::tuple[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *),0>(&v2, a1);
  return v2;
}

void *std::__compressed_pair<BOOL (*)(HSUtil::Encoder &,objc_object *)>::__compressed_pair[abi:ne180100]<BOOL (*&&)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>&&>(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  std::__compressed_pair_elem<BOOL (*)(HSUtil::Encoder &,objc_object *),0,false>::__compressed_pair_elem[abi:ne180100]<BOOL (*&&)(HSUtil::Encoder &,objc_object *),0ul>(a1, a2);
  std::__compressed_pair_elem<std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,1,true>::__compressed_pair_elem[abi:ne180100]<std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>&&,0ul>((uint64_t)a1, a3);
  return a1;
}

void *std::tuple<BOOL (*&&)(HSUtil::Encoder &,objc_object *)>::tuple[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *),0>(void *a1, uint64_t a2)
{
  return a1;
}

{
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0EEEEJOPFbRN6HSUtil7EncoderEP11objc_objectEEEC1B8ne180100IJLm0EEJSA_EJEJEJS9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(a1, a2);
  return a1;
}

void *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0EEEEJOPFbRN6HSUtil7EncoderEP11objc_objectEEEC1B8ne180100IJLm0EEJSA_EJEJEJS9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(void *a1, uint64_t a2)
{
  return a1;
}

void *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0EEEEJOPFbRN6HSUtil7EncoderEP11objc_objectEEEC2B8ne180100IJLm0EEJSA_EJEJEJS9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(void *a1, uint64_t a2)
{
  return a1;
}

void *std::__compressed_pair_elem<BOOL (*)(HSUtil::Encoder &,objc_object *),0,false>::__compressed_pair_elem[abi:ne180100]<BOOL (*&&)(HSUtil::Encoder &,objc_object *),0ul>(void *a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v2 = (void *)std::get[abi:ne180100]<0ul,BOOL (*&&)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v5);
  __n128 result = a1;
  *a1 = *v2;
  return result;
}

uint64_t std::__compressed_pair_elem<std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,1,true>::__compressed_pair_elem[abi:ne180100]<std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>&&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  std::get[abi:ne180100]<0ul,BOOL (*&&)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v4);
  return a1;
}

uint64_t std::get[abi:ne180100]<0ul,BOOL (*&&)(HSUtil::Encoder &,objc_object *)>(uint64_t a1)
{
  return std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100](a1);
}

void *std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 > std::allocator_traits<std::allocator<HSUtil::Encoder::ContainerRecord>>::max_size[abi:ne180100]<std::allocator<HSUtil::Encoder::ContainerRecord>,void>()) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return std::__libcpp_allocate[abi:ne180100](16 * a2, (std::align_val_t)8uLL);
}

void *std::__allocator_destructor<std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>>::__allocator_destructor[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t std::unique_ptr<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>,std::__allocator_destructor<std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>>>::unique_ptr[abi:ne180100]<true,void>(uint64_t a1, uint64_t a2, __n128 *a3)
{
  return a1;
}

{
  void v5[2];

  v5[1] = a1;
  v5[0] = a2;
  std::__compressed_pair<std::__hash_node<HSStage * {__strong},void *> *,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::__compressed_pair[abi:ne180100]<std::__hash_node<HSStage * {__strong},void *> *&,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>(a1, v5, a3);
  return a1;
}

uint64_t std::unique_ptr<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>,std::__allocator_destructor<std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>,std::__allocator_destructor<std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>>>::reset[abi:ne180100](a1, 0);
  return a1;
}

void *std::__allocator_destructor<std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>>::__allocator_destructor[abi:ne180100](void *result, uint64_t a2, uint64_t a3)
{
  void *result = a2;
  result[1] = a3;
  return result;
}

void sub_7EB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

void std::unique_ptr<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>,std::__allocator_destructor<std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  uint64_t v5 = *v2;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__allocator_destructor<std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>>::operator()[abi:ne180100](v4, v5);
  }
}

void std::__allocator_destructor<std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>>::operator()[abi:ne180100](uint64_t *a1, void *a2)
{
}

void std::allocator_traits<std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void sub_7ED78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

uint64_t std::__function::__alloc_func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, void *a3)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  return std::__invoke_void_return_wrapper<BOOL,false>::__call[abi:ne180100]<BOOL (*&)(HSUtil::Encoder &,objc_object *),HSUtil::Encoder &,objc_object * {__strong}>(v3, a2, a3) & 1;
}

uint64_t std::__invoke_void_return_wrapper<BOOL,false>::__call[abi:ne180100]<BOOL (*&)(HSUtil::Encoder &,objc_object *),HSUtil::Encoder &,objc_object * {__strong}>(uint64_t (**a1)(uint64_t, void), uint64_t a2, void *a3)
{
  return std::__invoke[abi:ne180100]<BOOL (*&)(HSUtil::Encoder &,objc_object *),HSUtil::Encoder &,objc_object * {__strong}>(a1, a2, a3) & 1;
}

uint64_t std::__invoke[abi:ne180100]<BOOL (*&)(HSUtil::Encoder &,objc_object *),HSUtil::Encoder &,objc_object * {__strong}>(uint64_t (**a1)(uint64_t, void), uint64_t a2, void *a3)
{
  return (*a1)(a2, *a3) & 1;
}

void *std::__compressed_pair<HSUtil::Encoder::ContainerRecord *>::__compressed_pair[abi:ne180100]<decltype(nullptr),std::__default_init_tag>(void *a1)
{
  return a1;
}

{
  std::__compressed_pair_elem<HSUtil::CoderKey const**,0,false>::__compressed_pair_elem[abi:ne180100]<decltype(nullptr),void>(a1);
  std::__compressed_pair_elem<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>,1,true>::__compressed_pair_elem[abi:ne180100]((uint64_t)a1);
  return a1;
}

void *std::vector<HSUtil::Encoder::KeyState>::vector[abi:ne180100](void *a1)
{
  return a1;
}

{
  *a1 = 0;
  a1[1] = 0;
  std::__compressed_pair<HSUtil::Encoder::ContainerRecord *>::__compressed_pair[abi:ne180100]<decltype(nullptr),std::__default_init_tag>(a1 + 2);
  return a1;
}

void *HSUtil::IO::Readable::Readable(void *this)
{
  *this = &off_141F18;
  return this;
}

void *HSUtil::IO::Writable::Writable(void *this)
{
  *this = &off_141F38;
  return this;
}

void *HSUtil::IO::ReadableFrom::ReadableFrom(void *this)
{
  *this = &off_141F58;
  return this;
}

void *HSUtil::IO::WritableTo::WritableTo(void *this)
{
  *this = &off_141F70;
  return this;
}

void *HSUtil::IO::Memoryable::Memoryable(void *this)
{
  *this = &off_141F88;
  return this;
}

uint64_t HSUtil::Buffer::{unnamed type#1}::Buffer(uint64_t a1)
{
  return a1;
}

uint64_t HSUtil::Buffer::{unnamed type#1}::Buffer(uint64_t result)
{
  *(void *)__n128 result = HSUtil::Buffer::_EmptyData;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(unsigned char *)(result + 24) &= ~1u;
  *(unsigned char *)(result + 24) &= ~2u;
  return result;
}

BOOL HSUtil::Buffer::valid(HSUtil::Buffer *this)
{
  return *((void *)this + 5) != 0;
}

HSUtil::IO::Result *HSUtil::IO::Result::Result(HSUtil::IO::Result *this, int a2)
{
  return this;
}

HSUtil::IO::Result *HSUtil::IO::Result::Result(HSUtil::IO::Result *this, uint64_t a2)
{
  return this;
}

uint64_t HSUtil::IO::Result::Result(uint64_t this, int a2)
{
  *(_DWORD *)this = a2;
  *(void *)(this + 8) = 0;
  return this;
}

uint64_t HSUtil::IO::Result::Result(uint64_t this, uint64_t a2)
{
  *(_DWORD *)this = 0;
  *(void *)(this + 8) = a2;
  return this;
}

BOOL HSUtil::Coder::fatalError(HSUtil::Coder *this)
{
  return *(_DWORD *)this >= 5;
}

uint64_t *HSUtil::Encoder::reset(HSUtil::Encoder *this)
{
  uint64_t v5 = this;
  std::vector<HSUtil::Encoder::ContainerRecord>::clear[abi:ne180100]((uint64_t *)this + 7);
  std::vector<HSUtil::Encoder::KeyState>::vector[abi:ne180100](v3);
  void v3[3] = 0;
  char v4 = 0;
  HSUtil::Encoder::{unnamed type#1}::operator=((uint64_t)this + 80, (uint64_t)v3);
  __n128 result = HSUtil::Encoder::{unnamed type#1}::~Encoder(v3);
  *((void *)this + 1std::vector<HSUtil::Encoder::ContainerRecord>::~vector[abi:ne180100]((uint64_t *)this + 7) = 0;
  *(_DWORD *)this = 0;
  return result;
}

void std::vector<HSUtil::Encoder::ContainerRecord>::clear[abi:ne180100](uint64_t *a1)
{
}

uint64_t HSUtil::Encoder::{unnamed type#1}::operator=(uint64_t a1, uint64_t a2)
{
  std::vector<HSUtil::Encoder::KeyState>::operator=[abi:ne180100]((uint64_t *)a1, (uint64_t *)a2);
  uint64_t result = a1;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return result;
}

uint64_t *HSUtil::Encoder::{unnamed type#1}::~Encoder(uint64_t *a1)
{
  return a1;
}

{
  std::vector<HSUtil::Encoder::KeyState>::~vector[abi:ne180100](a1);
  return a1;
}

void std::vector<HSUtil::Encoder::ContainerRecord>::__clear[abi:ne180100](uint64_t *a1)
{
}

uint64_t *std::vector<HSUtil::Encoder::KeyState>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  return a1;
}

void std::vector<HSUtil::Encoder::KeyState>::__move_assign(uint64_t *a1, uint64_t *a2)
{
  std::vector<HSUtil::Encoder::KeyState>::__vdeallocate(a1);
  std::vector<HSUtil::Encoder::KeyState>::__move_assign_alloc[abi:ne180100]();
  *a1 = *a2;
  a1[1] = a2[1];
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v6 = *v2;
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  void *v3 = v6;
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  *char v4 = 0;
  a2[1] = 0;
  *a2 = 0;
}

void std::vector<HSUtil::Encoder::KeyState>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<HSUtil::Encoder::KeyState>::clear[abi:ne180100](a1);
    std::vector<HSUtil::CoderKey const*>::__annotate_delete[abi:ne180100]();
    std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
    uint64_t v5 = v1;
    char v4 = (void *)*a1;
    uint64_t v2 = std::vector<HSUtil::Encoder::ContainerRecord>::capacity[abi:ne180100](a1);
    std::allocator_traits<std::allocator<HSUtil::Encoder::KeyState>>::deallocate[abi:ne180100](v5, v4, v2);
    std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
    void *v3 = 0;
    a1[1] = 0;
    *a1 = 0;
  }
}

void std::vector<HSUtil::Encoder::KeyState>::__move_assign_alloc[abi:ne180100]()
{
}

{
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
}

void std::vector<HSUtil::Encoder::KeyState>::clear[abi:ne180100](uint64_t *a1)
{
}

void std::vector<HSUtil::Encoder::KeyState>::__clear[abi:ne180100](uint64_t *a1)
{
}

uint64_t *std::vector<HSUtil::Encoder::KeyState>::~vector[abi:ne180100](uint64_t *a1)
{
  return a1;
}

{
  uint64_t *v3[2];

  v3[1] = a1;
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](v3, (uint64_t)a1);
  std::vector<HSUtil::Encoder::KeyState>::__destroy_vector::operator()[abi:ne180100](v3);
  return a1;
}

void std::vector<HSUtil::Encoder::KeyState>::__destroy_vector::operator()[abi:ne180100](uint64_t **a1)
{
  if (**a1)
  {
    std::vector<HSUtil::Encoder::KeyState>::__clear[abi:ne180100](*a1);
    std::vector<HSUtil::CoderKey const*>::__annotate_delete[abi:ne180100]();
    std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
    uint64_t v4 = v1;
    uint64_t v3 = (void *)**a1;
    uint64_t v2 = std::vector<HSUtil::Encoder::ContainerRecord>::capacity[abi:ne180100](*a1);
    std::allocator_traits<std::allocator<HSUtil::Encoder::KeyState>>::deallocate[abi:ne180100](v4, v3, v2);
  }
}

uint64_t *std::vector<HSUtil::Encoder::ContainerRecord>::~vector[abi:ne180100](uint64_t *a1)
{
  return a1;
}

{
  uint64_t *v3[2];

  v3[1] = a1;
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](v3, (uint64_t)a1);
  std::vector<HSUtil::Encoder::ContainerRecord>::__destroy_vector::operator()[abi:ne180100](v3);
  return a1;
}

void HSUtil::Encoder::Callbacks::~Callbacks(HSUtil::Encoder::Callbacks *this)
{
}

{
  std::function<BOOL ()(HSUtil::Encoder &,objc_object *)>::~function((uint64_t)this);
}

void std::vector<HSUtil::Encoder::ContainerRecord>::__destroy_vector::operator()[abi:ne180100](uint64_t **a1)
{
  if (**a1)
  {
    std::vector<HSUtil::Encoder::ContainerRecord>::__clear[abi:ne180100](*a1);
    std::vector<HSUtil::CoderKey const*>::__annotate_delete[abi:ne180100]();
    std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
    uint64_t v4 = v1;
    uint64_t v3 = (void *)**a1;
    uint64_t v2 = std::vector<HSUtil::Encoder::ContainerRecord>::capacity[abi:ne180100](*a1);
    std::allocator_traits<std::allocator<HSUtil::Encoder::ContainerRecord>>::deallocate[abi:ne180100](v4, v3, v2);
  }
}

uint64_t std::function<BOOL ()(HSUtil::Encoder &,objc_object *)>::~function(uint64_t a1)
{
  return a1;
}

{
  std::__function::__value_func<BOOL ()(HSUtil::Encoder &,objc_object *)>::~__value_func[abi:ne180100](a1);
  return a1;
}

uint64_t std::__function::__value_func<BOOL ()(HSUtil::Encoder &,objc_object *)>::~__value_func[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  if (*(void *)(a1 + 24) == a1)
  {
    (*(void (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24));
  }
  else if (*(void *)(a1 + 24))
  {
    (*(void (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
  }
  return a1;
}

void HSUtil::Encoder::_encodeHSCodable(HSUtil::Coder *a1, void *a2)
{
  uint64_t v5 = a1;
  id location = 0;
  objc_storeStrong(&location, a2);
  uint64_t v2 = v5;
  char v3 = objc_msgSend(location, "hsEncode:") & 1;
  if (HSUtil::Coder::ok(v2) && (v3 & 1) == 0) {
    *(_DWORD *)uint64_t v2 = 10;
  }
  objc_storeStrong(&location, 0);
}

BOOL HSUtil::Encoder::flush(HSUtil::Encoder *this)
{
  BOOL result = HSUtil::Coder::ok(this);
  if (result)
  {
    HSUtil::Encoder::_setWritableLength(this, *((void *)this + 17));
    BOOL result = HSUtil::Coder::ok(this);
    if (result) {
      *(_DWORD *)this = 0;
    }
  }
  return result;
}

uint64_t HSUtil::Buffer::Buffer(uint64_t a1)
{
  return a1;
}

{
  uint64_t result;

  HSUtil::IO::Readable::Readable((void *)a1);
  HSUtil::IO::Writable::Writable((void *)(a1 + 8));
  HSUtil::IO::ReadableFrom::ReadableFrom((void *)(a1 + 16));
  HSUtil::IO::WritableTo::WritableTo((void *)(a1 + 24));
  HSUtil::IO::Memoryable::Memoryable((void *)(a1 + 32));
  BOOL result = a1;
  *(void *)a1 = &off_1410A8;
  *(void *)(a1 + 8) = &off_141100;
  *(void *)(a1 + 16) = &off_141120;
  *(void *)(a1 + 24) = &off_141138;
  *(void *)(a1 + 32) = off_141150;
  *(void *)(a1 + 4objc_storeStrong(&location, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) &= ~1u;
  *(unsigned char *)(a1 + 64) &= ~2u;
  return result;
}

__n128 HSUtil::Buffer::operator=(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 64)) {
    free(*(void **)(a1 + 40));
  }
  *(_OWORD *)(a1 + 4objc_storeStrong(&location, 0) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  *(_OWORD *)uint64_t v4 = (unint64_t)HSUtil::Buffer::_EmptyData;
  *(void *)&v4[16] = 0;
  unsigned char v4[24] = v5 & 0xFC;
  *(_OWORD *)(a2 + 4objc_storeStrong(&location, 0) = (unint64_t)HSUtil::Buffer::_EmptyData;
  __n128 result = *(__n128 *)&v4[9];
  *(_OWORD *)(a2 + 49) = *(_OWORD *)&v4[9];
  return result;
}

BOOL HSUtil::Encoder::_setWritableLength(HSUtil::Encoder *this, uint64_t a2)
{
  v5[3] = this;
  unint64_t v5[2] = a2;
  v5[0] = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 5) + 8))(*((void *)this + 5), a2);
  v5[1] = v2;
  BOOL result = HSUtil::Coder::ok((HSUtil::Coder *)v5);
  if (result)
  {
    *((void *)this + 15) = 0;
    *((void *)this + 16) = 0;
    *(_DWORD *)this = 0;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

uint64_t HSUtil::Buffer::Buffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

void sub_7FFD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, HSUtil::Decoder *a10, int a11, int a12, _Unwind_Exception *exception_object)
{
}

HSUtil::Decoder *HSUtil::Decoder::Decoder(HSUtil::Decoder *this)
{
  HSUtil::Coder::Coder(this);
  *((void *)this + MTRestZoneIntegrator_::clearMotion(this, 1) = this;
  std::unique_ptr<HSUtil::Decoder::Callbacks>::unique_ptr[abi:ne180100]<true,void>((void *)this + 2);
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100]((void *)this + 3);
  BOOL result = this;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + std::vector<HSUtil::Encoder::ContainerRecord>::~vector[abi:ne180100]((uint64_t *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  return result;
}

{
  HSUtil::Decoder::Decoder(this);
  return this;
}

uint64_t HSUtil::Buffer::Buffer(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t HSUtil::Decoder::setReadable(HSUtil::Decoder *this, HSUtil::IO::Readable *a2)
{
  uint64_t v11 = this;
  char v10 = a2;
  uint64_t result = HSUtil::Coder::fatalError(this);
  if ((result & 1) == 0)
  {
    if (!HSUtil::Decoder::_isMaster(this))
    {
      HSUtil::Decoder::_copyCallbacks(&v9);
      std::unique_ptr<HSUtil::Decoder::Callbacks>::operator=[abi:ne180100]((void **)this + 2);
      std::unique_ptr<HSUtil::Decoder::Callbacks>::~unique_ptr[abi:ne180100](&v9);
      HSUtil::Decoder::_copyKeys((void *)this + 3, v8);
      std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::operator=[abi:ne180100]((uint64_t *)this + 3, v8);
      std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v8);
      *((void *)this + MTRestZoneIntegrator_::clearMotion(this, 1) = this;
    }
    *((void *)this + 5) = v10;
    *((void *)this + 6) = 0;
    *((void *)this + std::vector<HSUtil::Encoder::ContainerRecord>::~vector[abi:ne180100]((uint64_t *)this + 7) = 0;
    uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 5) + 8))(*((void *)this + 5));
    uint64_t v7 = v3;
    uint64_t result = HSUtil::Coder::ok((HSUtil::Coder *)&v6);
    if (result)
    {
      *((void *)this + 8) = v7;
      *((void *)this + 9) = 0;
      if (v10)
      {
        uint64_t v4 = result;
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (v4)
      {
        *((void *)this + 6) = (**(uint64_t (***)(uint64_t))v4)(v4);
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
        *((void *)this + 8) = result;
      }
      *(_DWORD *)this = 0;
    }
    else
    {
      *(_DWORD *)this = 6;
    }
  }
  return result;
}

void *std::unique_ptr<HSUtil::Decoder::Callbacks>::unique_ptr[abi:ne180100]<true,void>(void *a1)
{
  return a1;
}

{
  std::__compressed_pair<HSUtil::Decoder::Callbacks *,std::default_delete<HSUtil::Decoder::Callbacks>>::__compressed_pair[abi:ne180100]<std::__value_init_tag,std::__value_init_tag>(a1);
  return a1;
}

{
  std::unique_ptr<HSUtil::Decoder::Callbacks>::unique_ptr[abi:ne180100]<true,void>(a1);
  return a1;
}

{
  std::__compressed_pair<HSUtil::Decoder::Callbacks *,std::default_delete<HSUtil::Decoder::Callbacks>>::__compressed_pair[abi:ne180100]<std::__value_init_tag,std::__value_init_tag>(a1);
  return a1;
}

void *std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](void *a1)
{
  return a1;
}

{
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](a1);
  return a1;
}

void *std::__compressed_pair<HSUtil::Decoder::Callbacks *,std::default_delete<HSUtil::Decoder::Callbacks>>::__compressed_pair[abi:ne180100]<std::__value_init_tag,std::__value_init_tag>(void *a1)
{
  return a1;
}

{
  std::__compressed_pair_elem<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> **,0,false>::__compressed_pair_elem[abi:ne180100](a1);
  std::__compressed_pair_elem<HSUtil::ObjectHasher,1,true>::__compressed_pair_elem[abi:ne180100]();
  return a1;
}

void *std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](void *result)
{
  HSUtil::Decoder *result = 0;
  result[1] = 0;
  return result;
}

{
  HSUtil::Decoder *result = 0;
  result[1] = 0;
  return result;
}

BOOL HSUtil::Decoder::_isMaster(HSUtil::Decoder *this)
{
  return *((void *)this + 1) == (void)this;
}

void *HSUtil::Decoder::_copyCallbacks@<X0>(void *a1@<X8>)
{
  if (std::unique_ptr<HSUtil::Decoder::Callbacks>::operator BOOL[abi:ne180100]())
  {
    std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
    std::make_unique[abi:ne180100]<HSUtil::Decoder::Callbacks,HSUtil::Decoder::Callbacks&>();
  }
  return std::unique_ptr<HSUtil::Decoder::Callbacks>::unique_ptr[abi:ne180100]<true,void>(a1);
}

void **std::unique_ptr<HSUtil::Decoder::Callbacks>::operator=[abi:ne180100](void **a1)
{
  uint64_t v1 = (void *)std::unique_ptr<std::__hash_node<HSStage * {__strong},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::release[abi:ne180100]();
  std::unique_ptr<HSUtil::Decoder::Callbacks>::reset[abi:ne180100](a1, v1);
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  return a1;
}

void **std::unique_ptr<HSUtil::Decoder::Callbacks>::~unique_ptr[abi:ne180100](void **a1)
{
  return a1;
}

{
  std::unique_ptr<HSUtil::Decoder::Callbacks>::reset[abi:ne180100](a1, 0);
  return a1;
}

void *HSUtil::Decoder::_copyKeys@<X0>(void *a1@<X0>, void ***a2@<X8>)
{
  __n128 v8 = a2;
  uint64_t v7 = a1;
  if (!std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::operator BOOL[abi:ne180100]((uint64_t)a1)) {
    return std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](a2);
  }
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](v6, v7);
  uint64_t v3 = (void *)std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)v7);
  unint64_t v4 = std::vector<std::atomic<HSUtil::CoderKey const*>>::size[abi:ne180100](v3);
  HSUtil::Decoder::_newKeys(v6, v4, a2);
  return (void *)std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v6);
}

uint64_t *std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::operator=[abi:ne180100](uint64_t *a1, void *a2)
{
  v4[3] = (uint64_t)a1;
  void v4[2] = (uint64_t)a2;
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](v4, a2);
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::swap[abi:ne180100](v4, a1);
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v4);
  return a1;
}

uint64_t std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  if (*(void *)(a1 + 8)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(a1 + 8));
  }
  return a1;
}

BOOL std::unique_ptr<HSUtil::Decoder::Callbacks>::operator BOOL[abi:ne180100]()
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  return *v0 != 0;
}

void std::make_unique[abi:ne180100]<HSUtil::Decoder::Callbacks,HSUtil::Decoder::Callbacks&>()
{
}

void sub_80768(uint64_t a1, int a2)
{
  *(void *)(v2 - 24) = a1;
  *(_DWORD *)(v2 - 28) = a2;
  operator delete();
}

HSUtil::Decoder::Callbacks *HSUtil::Decoder::Callbacks::Callbacks(HSUtil::Decoder::Callbacks *this, const HSUtil::Decoder::Callbacks *a2)
{
  return this;
}

{
  std::function<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::function((uint64_t)this, (uint64_t)a2);
  return this;
}

void *std::unique_ptr<HSUtil::Decoder::Callbacks>::unique_ptr[abi:ne180100]<true,void>(void *a1, uint64_t a2)
{
  return a1;
}

{
  void v4[2];

  v4[1] = a1;
  v4[0] = a2;
  std::__compressed_pair<HSUtil::Decoder::Callbacks *,std::default_delete<HSUtil::Decoder::Callbacks>>::__compressed_pair[abi:ne180100]<HSUtil::Decoder::Callbacks *&,std::__value_init_tag>(a1, v4);
  return a1;
}

uint64_t std::function<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::function(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::__value_func[abi:ne180100](a1, a2);
  return a1;
}

uint64_t std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t v2;

  if (*(void *)(a2 + 24))
  {
    if (*(void *)(a2 + 24) == a2)
    {
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      *(void *)(a1 + 24) = v2;
      (*(void (**)(void, void))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), *(void *)(a1 + 24));
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 16))(*(void *)(a2 + 24));
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__compressed_pair<HSUtil::Decoder::Callbacks *,std::default_delete<HSUtil::Decoder::Callbacks>>::__compressed_pair[abi:ne180100]<HSUtil::Decoder::Callbacks *&,std::__value_init_tag>(void *a1, void *a2)
{
  return a1;
}

{
  std::__hash_const_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_const_iterator[abi:ne180100](a1, a2);
  std::__compressed_pair_elem<HSUtil::ObjectHasher,1,true>::__compressed_pair_elem[abi:ne180100]();
  return a1;
}

void HSUtil::Decoder::Callbacks::~Callbacks(HSUtil::Decoder::Callbacks *this)
{
}

{
  std::function<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::~function(this);
}

void *std::function<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::~function(void *a1)
{
  return a1;
}

{
  std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::~__value_func[abi:ne180100](a1);
  return a1;
}

BOOL std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::operator BOOL[abi:ne180100](uint64_t a1)
{
  return std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100](a1) != 0;
}

void *std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](void *a1, void *a2)
{
  return a1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  if (a1[1]) {
    std::__shared_weak_count::__add_shared[abi:ne180100](a1[1]);
  }
  return a1;
}

{
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](a1, a2);
  return a1;
}

uint64_t std::vector<std::atomic<HSUtil::CoderKey const*>>::size[abi:ne180100](void *a1)
{
  return (a1[1] - *a1) / 8;
}

uint64_t std::__shared_weak_count::__shared_weak_count[abi:ne180100](uint64_t a1, void (__cdecl **a2)(std::__shared_count *__hidden this))
{
  std::__shared_count::__shared_count[abi:ne180100]((void (__cdecl ***)(std::__shared_count *__hidden))a1, a2);
  uint64_t result = a1;
  *(void *)(a1 + 16) = a2;
  return result;
}

void (__cdecl ***std::__shared_count::__shared_count[abi:ne180100](void (__cdecl ***result)(std::__shared_count *__hidden this), void (__cdecl **a2)(std::__shared_count *__hidden this)))(std::__shared_count *__hidden this)
{
  result[1] = a2;
  return result;
}

unint64_t std::__shared_weak_count::__add_shared[abi:ne180100](uint64_t a1)
{
  return std::__shared_count::__add_shared[abi:ne180100](a1);
}

unint64_t std::__shared_count::__add_shared[abi:ne180100](uint64_t a1)
{
  return std::__libcpp_atomic_refcount_increment[abi:ne180100]<long>((atomic_ullong *)(a1 + 8));
}

unint64_t std::__libcpp_atomic_refcount_increment[abi:ne180100]<long>(atomic_ullong *a1)
{
  return atomic_fetch_add_explicit(a1, 1uLL, memory_order_relaxed) + 1;
}

uint64_t *std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::swap[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  return std::swap[abi:ne180100]<HSUtil::Encoder::ContainerRecord *>(a1 + 1, a2 + 1);
}

void *std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](void *result, void *a2)
{
  HSUtil::Decoder *result = *a2;
  result[1] = a2[1];
  *a2 = 0;
  a2[1] = 0;
  return result;
}

HSUtil::Decoder *HSUtil::Decoder::Decoder(HSUtil::Decoder *this, HSUtil::Decoder *a2, uint64_t a3, uint64_t a4)
{
  return this;
}

uint64_t HSUtil::Decoder::_readValue8(HSUtil::Decoder *this, unint64_t *a2)
{
  uint64_t v6 = this;
  char v5 = a2;
  unsigned __int8 __dst = 0;
  HSUtil::Decoder::_read(this, a2, &__dst, 1uLL);
  if (HSUtil::Coder::ok(this)) {
    return __dst;
  }
  else {
    return 0;
  }
}

uint64_t HSUtil::Decoder::_readValue16(HSUtil::Decoder *this, unint64_t *a2)
{
  uint64_t v6 = this;
  char v5 = a2;
  unsigned __int16 __dst = 0;
  HSUtil::Decoder::_read(this, a2, &__dst, 2uLL);
  if (HSUtil::Coder::ok(this)) {
    return __dst;
  }
  else {
    return 0;
  }
}

uint64_t HSUtil::Decoder::_readValue32(HSUtil::Decoder *this, unint64_t *a2)
{
  uint64_t v6 = this;
  char v5 = a2;
  unsigned int __dst = 0;
  HSUtil::Decoder::_read(this, a2, &__dst, 4uLL);
  if (HSUtil::Coder::ok(this)) {
    return __dst;
  }
  else {
    return 0;
  }
}

uint64_t HSUtil::Decoder::_skip(uint64_t this, unint64_t *a2, unint64_t a3)
{
  if (*a2 <= *(void *)(this + 64))
  {
    if (a3 <= *(void *)(this + 64) - *a2)
    {
      *a2 += a3;
      *(_DWORD *)this = 0;
    }
    else
    {
      *(_DWORD *)this = 13;
    }
  }
  else
  {
    *(_DWORD *)this = 6;
  }
  return this;
}

uint64_t HSUtil::Decoder::_tokenAtOffset(HSUtil::Decoder *this, unint64_t a2)
{
  v5[1] = (unint64_t)this;
  v5[0] = a2;
  unsigned __int8 Token = HSUtil::Decoder::_readToken(this, v5);
  if (HSUtil::Coder::ok(this)) {
    return Token;
  }
  else {
    return 0;
  }
}

uint64_t HSUtil::Buffer::data(HSUtil::Buffer *this)
{
  if (HSUtil::Buffer::valid(this)) {
    return *((void *)this + 5);
  }
  else {
    return 0;
  }
}

uint64_t HSUtil::Decoder::Decoder(uint64_t a1)
{
  return a1;
}

{
  uint64_t result;

  HSUtil::Coder::Coder((_DWORD *)a1);
  *(void *)(a1 + 8) = a1;
  std::unique_ptr<HSUtil::Decoder::Callbacks>::unique_ptr[abi:ne180100]<true,void>((void *)(a1 + 16));
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100]((void *)(a1 + 24));
  uint64_t result = a1;
  *(void *)(a1 + 4objc_storeStrong(&location, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  return result;
}

_DWORD *HSUtil::Coder::Coder(_DWORD *result)
{
  HSUtil::Decoder *result = 5;
  return result;
}

HSUtil::Decoder::Val32 *HSUtil::Decoder::Val32::Val32(HSUtil::Decoder::Val32 *this)
{
  return this;
}

uint64_t HSUtil::Decoder::_readValue64(HSUtil::Decoder *this, unint64_t *a2)
{
  __dst[2] = this;
  __dst[1] = a2;
  __dst[0] = 0;
  HSUtil::Decoder::_read(this, a2, __dst, 8uLL);
  if (HSUtil::Coder::ok(this)) {
    return __dst[0];
  }
  else {
    return 0;
  }
}

HSUtil::Buffer *HSUtil::Buffer::Buffer(HSUtil::Buffer *this, size_t a2, size_t a3)
{
  return this;
}

id HSUtil::Decoder::_readObject(HSUtil::Decoder *this, unint64_t *a2)
{
  unint64_t v31 = this;
  BOOL v30 = a2;
  Elementunsigned __int8 Token = 0;
  Elementunsigned __int8 Token = HSUtil::Decoder::_getElementToken(this, *a2);
  if (HSUtil::Coder::ok(this))
  {
    id location = 0;
    if (ElementToken <= 0x80u)
    {
      uint64_t v3 = ElementToken - 128;
      char v2 = 0;
    }
    else
    {
      uint64_t v3 = ElementToken - 128;
      char v2 = 1;
    }
    if ((v2 & 1) == 0)
    {
      switch(v3)
      {
        case 0:
        case 1:
        case 2:
        case 3:
          goto LABEL_8;
        case 4:
        case 5:
        case 6:
        case 7:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
          uint64_t v6 = +[NSNumber numberWithLongLong:HSUtil::Decoder::_readIntStrict(this, v30)];
          id v7 = location;
          id location = v6;

          goto LABEL_21;
        case 8:
          LODWORD(v8) = HSUtil::Decoder::_readFloatStrict(this, v30);
          uint64_t v9 = +[NSNumber numberWithFloat:v8];
          id v10 = location;
          id location = v9;

          goto LABEL_21;
        case 9:
          uint64_t v11 = +[NSNumber numberWithDouble:HSUtil::Decoder::_readDoubleStrict(this, v30)];
          id v12 = location;
          id location = v11;

          goto LABEL_21;
        case 10:
        case 11:
          uint64_t v13 = +[NSNumber numberWithBool:HSUtil::Decoder::_readBool(this, v30) & 1];
          id v14 = location;
          id location = v13;

          goto LABEL_21;
        case 12:
          HSUtil::Decoder::_readNull(this, v30);
          objc_storeStrong(&location, 0);
          goto LABEL_21;
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 111:
          break;
        case 96:
        case 97:
        case 98:
          id v15 = HSUtil::Decoder::_readNSString(this, v30);
          id v16 = location;
          id location = v15;

          goto LABEL_21;
        case 99:
        case 100:
        case 101:
          long long v17 = HSUtil::Decoder::_readNSData(this, v30);
          id v18 = location;
          id location = v17;

          goto LABEL_21;
        case 102:
        case 103:
        case 104:
          id v19 = HSUtil::Decoder::_readNSArray(this, v30);
          id v20 = location;
          id location = v19;

          goto LABEL_21;
        case 105:
        case 106:
        case 107:
          id v21 = HSUtil::Decoder::_readNSDictionary(this, v30);
          id v22 = location;
          id location = v21;

          goto LABEL_21;
        case 108:
        case 109:
        case 110:
          id v23 = HSUtil::Decoder::_readObjectWithCallback(this, v30);
          id v24 = location;
          id location = v23;

          goto LABEL_21;
        default:
          JUMPOUT(0);
      }
    }
    if (ElementToken <= 0x7Fu)
    {
LABEL_8:
      unint64_t v4 = +[NSNumber numberWithUnsignedLongLong:HSUtil::Decoder::_readUIntStrict(this, v30)];
      id v5 = location;
      id location = v4;
    }
    else
    {
      *(_DWORD *)this = 2;
    }
LABEL_21:
    if (HSUtil::Coder::ok(this)) {
      id v32 = location;
    }
    else {
      id v32 = 0;
    }
    objc_storeStrong(&location, 0);
  }
  else
  {
    id v32 = 0;
  }
  long long v25 = v32;

  return v25;
}

uint64_t HSUtil::Decoder::_getElementToken(HSUtil::Decoder *this, unint64_t a2)
{
  v3[1] = (unint64_t)this;
  v3[0] = a2;
  return HSUtil::Decoder::_readToken(this, v3);
}

uint64_t HSUtil::Decoder::_readUIntStrict(HSUtil::Decoder *this, unint64_t *a2)
{
  uint64_t v9 = this;
  double v8 = a2;
  unsigned __int8 Token = HSUtil::Decoder::_readToken(this, a2);
  if (!HSUtil::Coder::ok(this)) {
    return 0;
  }
  std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash_node_base[abi:ne180100](&Value8);
  if (Token <= 0x80u)
  {
    uint64_t v3 = Token - 128;
    char v2 = 0;
  }
  else
  {
    uint64_t v3 = Token - 128;
    char v2 = 1;
  }
  if (v2)
  {
    if (Token <= 0x7Fu) {
      uint64_t Value8 = Token;
    }
    else {
      *(_DWORD *)this = 2;
    }
  }
  else
  {
    switch(v3)
    {
      case 0:
        uint64_t Value8 = HSUtil::Decoder::_readValue8(this, v8);
        break;
      case 1:
        uint64_t Value8 = (unsigned __int16)HSUtil::Decoder::_readValue16(this, v8);
        break;
      case 2:
        uint64_t Value8 = HSUtil::Decoder::_readValue32(this, v8);
        break;
      case 3:
        uint64_t Value8 = HSUtil::Decoder::_readValue64(this, v8);
        break;
      case 4:
        uint64_t Value8 = (char)HSUtil::Decoder::_readValue8(this, v8);
        if (Value8 < 0) {
          *(_DWORD *)this = 2;
        }
        break;
      case 5:
        uint64_t Value8 = (__int16)HSUtil::Decoder::_readValue16(this, v8);
        if (Value8 < 0) {
          *(_DWORD *)this = 2;
        }
        break;
      case 6:
        uint64_t Value8 = (int)HSUtil::Decoder::_readValue32(this, v8);
        if (Value8 < 0) {
          *(_DWORD *)this = 2;
        }
        break;
      case 7:
        uint64_t Value8 = HSUtil::Decoder::_readValue64(this, v8);
        if (Value8 < 0) {
          *(_DWORD *)this = 2;
        }
        break;
      default:
        JUMPOUT(0);
    }
  }
  if (HSUtil::Coder::ok(this)) {
    return Value8;
  }
  else {
    return 0;
  }
}

unint64_t HSUtil::Decoder::_readIntStrict(HSUtil::Decoder *this, unint64_t *a2)
{
  uint64_t v9 = this;
  double v8 = a2;
  unsigned __int8 Token = HSUtil::Decoder::_readToken(this, a2);
  if (!HSUtil::Coder::ok(this)) {
    return 0;
  }
  std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash_node_base[abi:ne180100](&Value8);
  if (Token <= 0x80u)
  {
    uint64_t v3 = Token - 128;
    char v2 = 0;
  }
  else
  {
    uint64_t v3 = Token - 128;
    char v2 = 1;
  }
  if ((v2 & 1) == 0)
  {
    switch(v3)
    {
      case 0:
        unint64_t Value8 = HSUtil::Decoder::_readValue8(this, v8);
        goto LABEL_21;
      case 1:
        unint64_t Value8 = (unsigned __int16)HSUtil::Decoder::_readValue16(this, v8);
        goto LABEL_21;
      case 2:
        unint64_t Value8 = HSUtil::Decoder::_readValue32(this, v8);
        goto LABEL_21;
      case 3:
        unint64_t Value8 = HSUtil::Decoder::_readValue64(this, v8);
        if (Value8 > 0x7FFFFFFFFFFFFFFFLL) {
          *(_DWORD *)this = 2;
        }
        goto LABEL_21;
      case 4:
        unint64_t Value8 = (char)HSUtil::Decoder::_readValue8(this, v8);
        goto LABEL_21;
      case 5:
        unint64_t Value8 = (__int16)HSUtil::Decoder::_readValue16(this, v8);
        goto LABEL_21;
      case 6:
        unint64_t Value8 = (int)HSUtil::Decoder::_readValue32(this, v8);
        goto LABEL_21;
      case 7:
        unint64_t Value8 = HSUtil::Decoder::_readValue64(this, v8);
        goto LABEL_21;
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
        break;
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
        unint64_t Value8 = (char)Token;
        goto LABEL_21;
      default:
        JUMPOUT(0);
    }
  }
  if (Token <= 0x7Fu) {
    unint64_t Value8 = Token;
  }
  else {
    *(_DWORD *)this = 2;
  }
LABEL_21:
  if (HSUtil::Coder::ok(this)) {
    return Value8;
  }
  else {
    return 0;
  }
}

float HSUtil::Decoder::_readFloatStrict(HSUtil::Decoder *this, unint64_t *a2)
{
  id v7 = this;
  uint64_t v6 = a2;
  unsigned __int8 Token = HSUtil::Decoder::_readToken(this, a2);
  if (!HSUtil::Coder::ok(this)) {
    return 0.0;
  }
  HSUtil::Decoder::Val32::Val32((HSUtil::Decoder::Val32 *)&v4);
  if (Token == 136) {
    LODWORD(v4) = HSUtil::Decoder::_readValue32(this, v6);
  }
  else {
    *(_DWORD *)this = 2;
  }
  if (HSUtil::Coder::ok(this)) {
    return v4;
  }
  else {
    return 0.0;
  }
}

double HSUtil::Decoder::_readDoubleStrict(HSUtil::Decoder *this, unint64_t *a2)
{
  double v8 = this;
  id v7 = a2;
  unsigned __int8 Token = HSUtil::Decoder::_readToken(this, a2);
  if (!HSUtil::Coder::ok(this)) {
    return 0.0;
  }
  HSUtil::Decoder::Val32::Val32((HSUtil::Decoder::Val32 *)&v5);
  std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash_node_base[abi:ne180100](&v4);
  if (Token == 136)
  {
    float v5 = COERCE_FLOAT(HSUtil::Decoder::_readValue32(this, v7));
    double v4 = v5;
  }
  else if (Token == 137)
  {
    double v4 = COERCE_DOUBLE(HSUtil::Decoder::_readValue64(this, v7));
  }
  else
  {
    *(_DWORD *)this = 2;
  }
  if (HSUtil::Coder::ok(this)) {
    return v4;
  }
  else {
    return 0.0;
  }
}

BOOL HSUtil::Decoder::_readNull(HSUtil::Decoder *this, unint64_t *a2)
{
  unsigned __int8 Token = HSUtil::Decoder::_readToken(this, a2);
  BOOL result = HSUtil::Coder::ok(this);
  if (result)
  {
    if (Token == 140) {
      return HSUtil::Coder::ok(this);
    }
    else {
      *(_DWORD *)this = 2;
    }
  }
  return result;
}

NSData *HSUtil::Decoder::_readNSData(HSUtil::Decoder *this, unint64_t *a2)
{
  double v8 = this;
  id v7 = a2;
  unsigned __int8 v6 = 0;
  unsigned __int8 v6 = HSUtil::Decoder::_tokenAtOffset(this, *a2);
  if (HSUtil::Coder::ok(this))
  {
    if (v6 == 140)
    {
      HSUtil::Decoder::_readNull(this, v7);
      uint64_t v9 = 0;
    }
    else
    {
      HSUtil::Decoder::_readDataByCopy(this, v7, (uint64_t)v5);
      if (HSUtil::Coder::ok(this)) {
        uint64_t v9 = HSUtil::Buffer::getNSData((HSUtil::Buffer *)v5);
      }
      else {
        uint64_t v9 = 0;
      }
      HSUtil::Buffer::~Buffer((HSUtil::Buffer *)v5);
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  char v2 = v9;

  return v2;
}

id HSUtil::Decoder::_readNSArray(HSUtil::Decoder *this, unint64_t *a2)
{
  id v14 = this;
  uint64_t v13 = a2;
  unsigned __int8 v12 = 0;
  unsigned __int8 v12 = HSUtil::Decoder::_tokenAtOffset(this, *a2);
  if (HSUtil::Coder::ok(this))
  {
    if (v12 == 140)
    {
      HSUtil::Decoder::_readNull(this, v13);
      id v15 = 0;
    }
    else
    {
      HSUtil::Decoder::_readArray(this, v13, (HSUtil::Decoder *)v11);
      if (HSUtil::Coder::ok(this))
      {
        id v9 = (id)objc_opt_new();
        unint64_t v8 = 0;
        do
        {
          id location = (id)HSUtil::Decoder::_readObject((HSUtil::Decoder *)v11, &v8);
          *(_DWORD *)this = v11[0];
          if (HSUtil::Coder::end(this))
          {
            *(_DWORD *)this = 0;
            int v10 = 2;
          }
          else if (HSUtil::Coder::ok(this))
          {
            if (!location)
            {
              char v2 = +[NSNull null];
              id v3 = location;
              id location = v2;
            }
            [v9 addObject:location];
            int v10 = 0;
          }
          else
          {
            id v15 = 0;
            int v10 = 1;
          }
          objc_storeStrong(&location, 0);
        }
        while (!v10);
        if (v10 == 2)
        {
          id v15 = v9;
          int v10 = 1;
        }
        objc_storeStrong(&v9, 0);
      }
      else
      {
        id v15 = 0;
        int v10 = 1;
      }
      HSUtil::Decoder::~Decoder((HSUtil::Decoder *)v11);
    }
  }
  else
  {
    id v15 = 0;
  }
  double v4 = v15;

  return v4;
}

id HSUtil::Decoder::_readNSDictionary(HSUtil::Decoder *this, unint64_t *a2)
{
  id v18 = this;
  long long v17 = a2;
  unsigned __int8 v16 = 0;
  unsigned __int8 v16 = HSUtil::Decoder::_tokenAtOffset(this, *a2);
  if (HSUtil::Coder::ok(this))
  {
    if (v16 == 140)
    {
      HSUtil::Decoder::_readNull(this, v17);
      id v19 = 0;
    }
    else
    {
      HSUtil::Decoder::_readMap(this, v17, (uint64_t)v15);
      if (HSUtil::Coder::ok(this))
      {
        id v13 = (id)objc_opt_new();
        unint64_t v12 = 0;
        while (1)
        {
          uint64_t v11 = 0;
          uint64_t v11 = (void *)HSUtil::Decoder::_readKey(v15, &v12);
          *(_DWORD *)this = v15[0];
          if (HSUtil::Coder::end(this))
          {
            *(_DWORD *)this = 0;
            id v19 = v13;
            int v14 = 1;
            goto LABEL_20;
          }
          if (!HSUtil::Coder::ok(this)) {
            break;
          }
          id location = (id)HSUtil::Decoder::_readObject((HSUtil::Decoder *)v15, &v12);
          *(_DWORD *)this = v15[0];
          if (HSUtil::Coder::end(this)) {
            *(_DWORD *)this = 13;
          }
          if (HSUtil::Coder::ok(this))
          {
            if (!location)
            {
              char v2 = +[NSNull null];
              id v3 = location;
              id location = v2;
            }
            id v7 = location;
            id v8 = v13;
            unsigned __int8 v6 = +[NSString stringWithUTF8String:*v11];
            objc_msgSend(v8, "setObject:forKeyedSubscript:", v7);

            int v14 = 0;
          }
          else
          {
            id v19 = 0;
            int v14 = 1;
          }
          objc_storeStrong(&location, 0);
          if (v14) {
            goto LABEL_20;
          }
        }
        id v19 = 0;
        int v14 = 1;
LABEL_20:
        objc_storeStrong(&v13, 0);
      }
      else
      {
        id v19 = 0;
        int v14 = 1;
      }
      HSUtil::Decoder::~Decoder((HSUtil::Decoder *)v15);
    }
  }
  else
  {
    id v19 = 0;
  }
  double v4 = v19;

  return v4;
}

id HSUtil::Decoder::_readObjectWithCallback(HSUtil::Decoder *this, unint64_t *a2)
{
  id v13 = this;
  unint64_t v12 = a2;
  unsigned __int8 Token = HSUtil::Decoder::_readToken(this, a2);
  if (HSUtil::Coder::ok(this))
  {
    unint64_t Value8 = 0;
    switch(Token)
    {
      case 0xECu:
        unint64_t Value8 = HSUtil::Decoder::_readValue8(this, v12);
        break;
      case 0xEDu:
        unint64_t Value8 = (unsigned __int16)HSUtil::Decoder::_readValue16(this, v12);
        break;
      case 0xEEu:
        unint64_t Value8 = HSUtil::Decoder::_readValue32(this, v12);
        break;
      default:
        *(_DWORD *)this = 2;
        break;
    }
    if (HSUtil::Coder::ok(this))
    {
      unint64_t v9 = 0;
      unint64_t v9 = *v12;
      HSUtil::Decoder::_skip((uint64_t)this, v12, Value8);
      if (HSUtil::Coder::ok(this))
      {
        HSUtil::Decoder::_loadKeyTableIfNeeded(this, v12);
        if (HSUtil::Coder::ok(this))
        {
          unint64_t v8 = v9;
          id v7 = (const CoderKey *)HSUtil::Decoder::_readKey((uint64_t **)this, &v8);
          if (*(_DWORD *)this)
          {
            if (*(_DWORD *)this != 11) {
              *(_DWORD *)this = 12;
            }
            id v14 = 0;
          }
          else
          {
            unint64_t v6 = v8 - v9;
            if (Value8 >= v8 - v9)
            {
              HSUtil::Decoder::Decoder((HSUtil::Decoder *)v5, this, v8, Value8 - v6);
              id v14 = HSUtil::Decoder::_decodeObjectWithCallback(this, (HSUtil::Decoder *)v5, v7);
              HSUtil::Decoder::~Decoder((HSUtil::Decoder *)v5);
            }
            else
            {
              *(_DWORD *)this = 12;
              id v14 = 0;
            }
          }
        }
        else
        {
          id v14 = 0;
        }
      }
      else
      {
        id v14 = 0;
      }
    }
    else
    {
      id v14 = 0;
    }
  }
  else
  {
    id v14 = 0;
  }
  char v2 = v14;

  return v2;
}

uint64_t HSUtil::Buffer::length(HSUtil::Buffer *this)
{
  if (HSUtil::Buffer::valid(this)) {
    return *((void *)this + 6);
  }
  else {
    return 0;
  }
}

void HSUtil::Decoder::_readDataByCopy(HSUtil::Decoder *this@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v11 = a3;
  int v10 = this;
  unint64_t v9 = a2;
  size_t DataLength = HSUtil::Decoder::_readDataLength(this, a2);
  if (HSUtil::Coder::ok(this))
  {
    HSUtil::Buffer::Buffer((HSUtil::Buffer *)v7, DataLength, DataLength);
    double v4 = v9;
    id v3 = (void *)HSUtil::Buffer::data((HSUtil::Buffer *)v7);
    HSUtil::Decoder::_read(this, v4, v3, DataLength);
    if (HSUtil::Coder::ok(this)) {
      HSUtil::Buffer::Buffer(a3, (uint64_t)v7);
    }
    else {
      HSUtil::Buffer::Buffer(a3);
    }
    HSUtil::Buffer::~Buffer((HSUtil::Buffer *)v7);
  }
  else
  {
    HSUtil::Buffer::Buffer(a3);
  }
}

uint64_t HSUtil::Decoder::_readDataLength(HSUtil::Decoder *this, unint64_t *a2)
{
  unsigned __int8 Token = HSUtil::Decoder::_readToken(this, a2);
  if (!HSUtil::Coder::ok(this)) {
    return 0;
  }
  uint64_t Value8 = 0;
  switch(Token)
  {
    case 0xE3u:
      uint64_t Value8 = HSUtil::Decoder::_readValue8(this, a2);
      break;
    case 0xE4u:
      uint64_t Value8 = (unsigned __int16)HSUtil::Decoder::_readValue16(this, a2);
      break;
    case 0xE5u:
      uint64_t Value8 = HSUtil::Decoder::_readValue32(this, a2);
      break;
    default:
      *(_DWORD *)this = 2;
      break;
  }
  if (HSUtil::Coder::ok(this)) {
    return Value8;
  }
  else {
    return 0;
  }
}

HSUtil::Decoder *HSUtil::Decoder::_readArray@<X0>(HSUtil::Decoder *this@<X0>, unint64_t *a2@<X1>, HSUtil::Decoder *a3@<X8>)
{
  unsigned __int8 Token = HSUtil::Decoder::_readToken(this, a2);
  if (HSUtil::Coder::ok(this)
    && ((unint64_t Value8 = 0, Token == 230)
      ? (unint64_t Value8 = HSUtil::Decoder::_readValue8(this, a2))
      : Token == 231
      ? (unint64_t Value8 = (unsigned __int16)HSUtil::Decoder::_readValue16(this, a2))
      : Token == 232
      ? (unint64_t Value8 = HSUtil::Decoder::_readValue32(this, a2))
      : (*(_DWORD *)this = 2),
        HSUtil::Coder::ok(this)
     && (uint64_t v6 = *a2, HSUtil::Decoder::_skip((uint64_t)this, a2, Value8), HSUtil::Coder::ok(this))
     && (HSUtil::Decoder::_loadKeyTableIfNeeded(this, a2), HSUtil::Coder::ok(this))))
  {
    return HSUtil::Decoder::Decoder(a3, this, v6, Value8);
  }
  else
  {
    return (HSUtil::Decoder *)HSUtil::Decoder::Decoder((uint64_t)a3);
  }
}

BOOL HSUtil::Coder::end(HSUtil::Coder *this)
{
  return *(_DWORD *)this == 3;
}

id HSUtil::Decoder::_decodeObjectWithCallback(HSUtil::Decoder *this, HSUtil::Decoder *a2, const CoderKey *a3)
{
  uint64_t v11 = this;
  int v10 = a2;
  unint64_t v9 = a3;
  uint64_t v8 = *((void *)this + 1) + 16;
  if (std::unique_ptr<HSUtil::Decoder::Callbacks>::operator BOOL[abi:ne180100]())
  {
    uint64_t v7 = std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
    if (std::function<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::operator BOOL[abi:ne180100](v7))
    {
      id location = (id)std::function<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::operator()(v7, (uint64_t)v10, (uint64_t)v9);
      if (location)
      {
        if (location == HSUtil::Decoder::DecodeObjectNil) {
          objc_storeStrong(&location, 0);
        }
        id v12 = location;
      }
      else
      {
        *(_DWORD *)this = 10;
        id v12 = 0;
      }
      objc_storeStrong(&location, 0);
    }
    else
    {
      *(_DWORD *)this = 10;
      id v12 = 0;
    }
  }
  else
  {
    *(_DWORD *)this = 10;
    id v12 = 0;
  }
  id v3 = v12;

  return v3;
}

BOOL std::function<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::operator BOOL[abi:ne180100](uint64_t a1)
{
  return std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::operator BOOL[abi:ne180100](a1);
}

uint64_t std::function<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::operator()[abi:ne180100](a1, a2, a3);
}

BOOL std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::operator BOOL[abi:ne180100](uint64_t a1)
{
  return *(void *)(a1 + 24) != 0;
}

uint64_t std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a1 + 24)) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 48))(*(void *)(a1 + 24), a2, a3);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = (void (__cdecl ***)(std::exception *__hidden))__cxa_allocate_exception(8uLL);
  std::runtime_error *exception = 0;
  std::bad_function_call::bad_function_call[abi:ne180100](exception);
}

void (__cdecl ***std::bad_function_call::bad_function_call[abi:ne180100](void (__cdecl ***a1)(std::exception *__hidden this)))(std::exception *__hidden this)
{
  return a1;
}

{
  void (__cdecl ***result)(std::exception *__hidden);

  std::exception::exception[abi:ne180100](a1);
  BOOL result = a1;
  *a1 = (void (__cdecl **)(std::exception *__hidden))off_141FC8;
  return result;
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
}

{
  std::bad_function_call::~bad_function_call(this);
  operator delete();
}

{
  std::exception::~exception(this);
}

void (__cdecl ***std::exception::exception[abi:ne180100](void (__cdecl ***result)(std::exception *__hidden this)))(std::exception *__hidden this)
{
  return result;
}

void HSUtil::Encoder::encodeNSNumber(HSUtil::Encoder *this, NSNumber *a2)
{
  uint64_t v7 = this;
  id location = 0;
  objc_storeStrong(&location, a2);
  double v4 = v7;
  if (location)
  {
    {
      HSUtil::Encoder::encodeNSNumber(NSNumber *)::BOOLCFTypeID TypeID = CFBooleanGetTypeID();
    }
    if (CFGetTypeID(location) == HSUtil::Encoder::encodeNSNumber(NSNumber *)::BOOLTypeID)
    {
      HSUtil::Encoder::encodeBool(v4, [location BOOLValue] & 1);
    }
    else
    {
      float v5 = (const char *)[location objCType];
      if (!strcmp(v5, "f"))
      {
        [location floatValue];
        HSUtil::Encoder::encodeFloat(v4, v2);
      }
      else if (!strcmp(v5, "d"))
      {
        [location doubleValue];
        HSUtil::Encoder::encodeDouble(v4, v3);
      }
      else if (!strcmp(v5, "Q"))
      {
        HSUtil::Encoder::encodeUInt(v4, (unint64_t)[location unsignedLongLongValue]);
      }
      else
      {
        HSUtil::Encoder::encodeInt(v4, (unint64_t)[location longLongValue]);
      }
    }
  }
  else
  {
    HSUtil::Encoder::encodeNull(v7);
  }
  objc_storeStrong(&location, 0);
}

void HSUtil::Encoder::encodeNSData(HSUtil::Encoder *this, NSData *a2)
{
  float v5 = this;
  id location = 0;
  objc_storeStrong(&location, a2);
  double v3 = v5;
  if (location)
  {
    float v2 = (unsigned __int8 *)[location bytes];
    HSUtil::Encoder::encodeData(v3, v2, (size_t)[location length]);
  }
  else
  {
    HSUtil::Encoder::encodeNull(v5);
  }
  objc_storeStrong(&location, 0);
}

void HSUtil::Encoder::encodeNSDictionary(HSUtil::Encoder *this, NSDictionary *a2)
{
  long long v17 = this;
  id location = 0;
  objc_storeStrong(&location, a2);
  id v12 = v17;
  if (location)
  {
    HSUtil::Encoder::encodeMapStart(v17, 4);
    memset(__b, 0, sizeof(__b));
    id obj = location;
    id v11 = [obj countByEnumeratingWithState:__b objects:v18 count:16];
    if (v11)
    {
      uint64_t v7 = *(void *)__b[2];
      uint64_t v8 = 0;
      id v9 = v11;
      while (1)
      {
        uint64_t v6 = v8;
        if (*(void *)__b[2] != v7) {
          objc_enumerationMutation(obj);
        }
        id v14 = *(id *)(__b[1] + 8 * v8);
        float v5 = (HSUtil::CoderKey *)[v14 UTF8String];
        double v3 = HSUtil::CoderKey::New(v5, v2);
        HSUtil::Encoder::encodeKey(v12, (const CoderKey *)v3);
        double v4 = (objc_object *)[location objectForKeyedSubscript:v14];
        HSUtil::Encoder::encodeObject(v12, v4);

        objc_storeStrong(&v14, 0);
        ++v8;
        if (v6 + 1 >= (unint64_t)v9)
        {
          uint64_t v8 = 0;
          id v9 = [obj countByEnumeratingWithState:__b objects:v18 count:16];
          if (!v9) {
            break;
          }
        }
      }
    }

    HSUtil::Encoder::encodeObjectStop(v12);
    int v15 = 0;
  }
  else
  {
    HSUtil::Encoder::encodeNull(v17);
    int v15 = 1;
  }
  objc_storeStrong(&location, 0);
}

void sub_83CEC(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23)
{
  *(void *)(v23 - 176) = a1;
  *(_DWORD *)(v23 - 18objc_storeStrong(&location, 0) = a2;

  objc_storeStrong((id *)(v23 - 168), 0);
  JUMPOUT(0x83D78);
}

void sub_83D70()
{
  _Unwind_Resume(v0);
}

void HSUtil::Encoder::encodeNSArray(HSUtil::Encoder *this, NSArray *a2)
{
  id v13 = this;
  id location = 0;
  objc_storeStrong(&location, a2);
  uint64_t v8 = v13;
  if (location)
  {
    HSUtil::Encoder::encodeArrayStart(v13, 4u);
    memset(__b, 0, sizeof(__b));
    id obj = location;
    id v7 = [obj countByEnumeratingWithState:__b objects:v14 count:16];
    if (v7)
    {
      uint64_t v3 = *(void *)__b[2];
      uint64_t v4 = 0;
      id v5 = v7;
      while (1)
      {
        uint64_t v2 = v4;
        if (*(void *)__b[2] != v3) {
          objc_enumerationMutation(obj);
        }
        id v10 = *(id *)(__b[1] + 8 * v4);
        HSUtil::Encoder::encodeObject(v8, (objc_object *)v10);
        objc_storeStrong(&v10, 0);
        ++v4;
        if (v2 + 1 >= (unint64_t)v5)
        {
          uint64_t v4 = 0;
          id v5 = [obj countByEnumeratingWithState:__b objects:v14 count:16];
          if (!v5) {
            break;
          }
        }
      }
    }

    HSUtil::Encoder::encodeObjectStop(v8);
    int v11 = 0;
  }
  else
  {
    HSUtil::Encoder::encodeNull(v13);
    int v11 = 1;
  }
  objc_storeStrong(&location, 0);
}

void sub_83FC8(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id location)
{
  *(void *)(v31 - 176) = a1;
  *(_DWORD *)(v31 - 18objc_storeStrong(&location, 0) = a2;

  objc_storeStrong((id *)(v31 - 168), 0);
  JUMPOUT(0x84030);
}

void sub_84028()
{
  _Unwind_Resume(v0);
}

void HSUtil::Encoder::encodeObjectWithCallback(HSUtil::Encoder *this, objc_object *a2)
{
  uint64_t v4 = this;
  id location = 0;
  objc_storeStrong(&location, a2);
  uint64_t v2 = v4;
  if (HSUtil::Coder::ok(v4))
  {
    HSUtil::Encoder::_encodeObjectWithCallback(v2, (objc_object *)location);
    HSUtil::Coder::ok(v2);
  }
  objc_storeStrong(&location, 0);
}

BOOL HSUtil::Encoder::encodeBool(HSUtil::Encoder *this, char a2)
{
  char v4 = a2 & 1;
  BOOL result = HSUtil::Coder::ok(this);
  if (result)
  {
    HSUtil::Encoder::_encodeBool(this, v4 & 1);
    return HSUtil::Coder::ok(this);
  }
  return result;
}

BOOL HSUtil::Encoder::encodeFloat(HSUtil::Encoder *this, float a2)
{
  BOOL result = HSUtil::Coder::ok(this);
  if (result)
  {
    HSUtil::Encoder::_encodeFloat(this, a2);
    return HSUtil::Coder::ok(this);
  }
  return result;
}

BOOL HSUtil::Encoder::encodeDouble(HSUtil::Encoder *this, double a2)
{
  BOOL result = HSUtil::Coder::ok(this);
  if (result)
  {
    HSUtil::Encoder::_encodeDouble(this, a2);
    return HSUtil::Coder::ok(this);
  }
  return result;
}

BOOL HSUtil::Encoder::encodeUInt(HSUtil::Encoder *this, unint64_t a2)
{
  BOOL result = HSUtil::Coder::ok(this);
  if (result)
  {
    HSUtil::Encoder::_encodeUInt(this, a2);
    return HSUtil::Coder::ok(this);
  }
  return result;
}

BOOL HSUtil::Encoder::encodeInt(HSUtil::Encoder *this, unint64_t a2)
{
  BOOL result = HSUtil::Coder::ok(this);
  if (result)
  {
    HSUtil::Encoder::_encodeInt(this, a2);
    return HSUtil::Coder::ok(this);
  }
  return result;
}

BOOL HSUtil::Encoder::_encodeBool(HSUtil::Encoder *this, char a2)
{
  if (a2) {
    unsigned __int8 v2 = -117;
  }
  else {
    unsigned __int8 v2 = -118;
  }
  HSUtil::Encoder::_writeByte(this, v2);
  return HSUtil::Coder::ok(this);
}

BOOL HSUtil::Encoder::_encodeFloat(HSUtil::Encoder *this, float a2)
{
  return HSUtil::Coder::ok(this);
}

BOOL HSUtil::Encoder::_encodeDouble(HSUtil::Encoder *this, double a2)
{
  return HSUtil::Coder::ok(this);
}

BOOL HSUtil::Encoder::encodeString(HSUtil::Encoder *this, const char *a2)
{
  BOOL result = HSUtil::Coder::ok(this);
  if (result)
  {
    HSUtil::Encoder::_encodeString(this, a2);
    return HSUtil::Coder::ok(this);
  }
  return result;
}

BOOL HSUtil::Encoder::encodeData(HSUtil::Encoder *this, const unsigned __int8 *a2, size_t a3)
{
  BOOL result = HSUtil::Coder::ok(this);
  if (result)
  {
    HSUtil::Encoder::_encodeData(this, a2, a3);
    return HSUtil::Coder::ok(this);
  }
  return result;
}

BOOL HSUtil::Encoder::_encodeData(HSUtil::Encoder *this, const unsigned __int8 *a2, size_t a3)
{
  if (a3 > 0xFF)
  {
    if (a3 >= 0x10000) {
      HSUtil::Encoder::_writeTokenValue32((unint64_t *)this, 0xE5u, a3);
    }
    else {
      HSUtil::Encoder::_writeTokenValue16((unint64_t *)this, 0xE4u, a3);
    }
  }
  else
  {
    HSUtil::Encoder::_writeTokenValue8((unint64_t *)this, 0xE3u, a3);
  }
  BOOL result = HSUtil::Coder::ok(this);
  if (result)
  {
    HSUtil::Encoder::_write(this, a2, a3);
    return HSUtil::Coder::ok(this);
  }
  return result;
}

BOOL HSUtil::Encoder::encodeMapStart(HSUtil::Coder *a1, int a2)
{
  BOOL result = HSUtil::Coder::ok(a1);
  if (result)
  {
    HSUtil::Encoder::_encodeMapStart((unint64_t *)a1, a2);
    return HSUtil::Coder::ok(a1);
  }
  return result;
}

BOOL HSUtil::Encoder::encodeArrayStart(HSUtil::Coder *a1, unsigned __int32 a2)
{
  BOOL result = HSUtil::Coder::ok(a1);
  if (result)
  {
    HSUtil::Encoder::_encodeArrayStart(a1, a2);
    return HSUtil::Coder::ok(a1);
  }
  return result;
}

BOOL HSUtil::Encoder::_encodeArrayStart(void *a1, unsigned __int32 a2)
{
  uint64_t v6 = a1;
  unsigned __int32 v5 = a2;
  v4.n128_u64[0] = a1[17];
  v4.n128_u32[2] = a2;
  std::vector<HSUtil::Encoder::ContainerRecord>::push_back[abi:ne180100](a1 + 7, &v4);
  switch(v5)
  {
    case 1u:
      HSUtil::Encoder::_writeTokenValue8(a1, 0xE6u, 0);
      break;
    case 2u:
      HSUtil::Encoder::_writeTokenValue16(a1, 0xE7u, 0);
      break;
    case 4u:
      HSUtil::Encoder::_writeTokenValue32(a1, 0xE8u, 0);
      break;
    default:
      abort();
  }
  return HSUtil::Coder::ok((HSUtil::Coder *)a1);
}

void HSUtil::Encoder::_encodeObjectWithCallback(HSUtil::Encoder *this, objc_object *a2)
{
  unsigned __int32 v5 = this;
  id location = 0;
  objc_storeStrong(&location, a2);
  unsigned __int8 v2 = v5;
  char v3 = std::function<BOOL ()(HSUtil::Encoder &,objc_object *)>::operator()((uint64_t)v5 + 8, (uint64_t)v5, location) & 1;
  if (HSUtil::Coder::ok(v2) && (v3 & 1) == 0) {
    *(_DWORD *)unsigned __int8 v2 = 10;
  }
  objc_storeStrong(&location, 0);
}

uint64_t std::function<BOOL ()(HSUtil::Encoder &,objc_object *)>::operator()(uint64_t a1, uint64_t a2, id obj)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  char v4 = std::__function::__value_func<BOOL ()(HSUtil::Encoder &,objc_object *)>::operator()[abi:ne180100](v7, v6, (uint64_t)&location);
  objc_storeStrong(&location, 0);
  return v4 & 1;
}

void sub_8482C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, id location)
{
}

uint64_t std::__function::__value_func<BOOL ()(HSUtil::Encoder &,objc_object *)>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a1 + 24)) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 48))(*(void *)(a1 + 24), a2, a3) & 1;
}

void __cxx_global_var_init_50()
{
  {
    {
      HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
    }
  }
}

void __cxx_global_var_init_2_49(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_49(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_44(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_44(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_44(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_44(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_45(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void sub_84C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, _Unwind_Exception *exception_object)
{
  objc_storeStrong((id *)(v14 - 24), 0);
  _Unwind_Resume(a1);
}

NSNumber *HSProxySynth::HSStageProxy_decodeStateFromData_call1<BOOL>(void *a1, void *a2)
{
  id location = 0;
  objc_storeStrong(&location, a1);
  id v8 = 0;
  objc_storeStrong(&v8, a2);
  id v7 = location;
  id v5 = [v8 objectAtIndexedSubscript:0];
  id v4 = HSProxySynth::Unbox<NSData * {__strong}>(v5);
  char v3 = HSProxySynth::Box<BOOL>(objc_msgSend(v7, "decodeStateFromData:") & 1);

  objc_storeStrong(&v8, 0);
  objc_storeStrong(&location, 0);

  return v3;
}

void sub_84D78(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj, uint64_t a11, uint64_t a12, uint64_t a13, id a14, uint64_t a15, id a16)
{
  *(void *)(v16 - 24) = a1;
  *(_DWORD *)(v16 - 28) = a2;
  objc_storeStrong((id *)(v16 - 16), 0);
  objc_storeStrong((id *)(v16 - 8), 0);
  _Unwind_Resume(*(_Unwind_Exception **)(v16 - 24));
}

void sub_84F3C(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, id a12, uint64_t a13, uint64_t a14, id a15)
{
  *(void *)(v15 - 56) = a1;
  *(_DWORD *)(v15 - 6objc_storeStrong(&location, 0) = a2;
  objc_storeStrong((id *)(v15 - 40), 0);
  _Unwind_Resume(*(_Unwind_Exception **)(v15 - 56));
}

id HSProxySynth::Box<NSData * {__strong}>(id obj)
{
  id location = 0;
  objc_storeStrong(&location, obj);
  id v2 = HSProxySynth::_Unbox<objc_object * {__strong}>(location);
  objc_storeStrong(&location, 0);

  return v2;
}

void sub_85048(uint64_t a1, int a2)
{
  *(void *)(v2 - 16) = a1;
  *(_DWORD *)(v2 - 2objc_storeStrong(&location, 0) = a2;
  objc_storeStrong((id *)(v2 - 8), 0);
  _Unwind_Resume(*(_Unwind_Exception **)(v2 - 16));
}

uint64_t HSProxySynth::Unbox<BOOL>(id obj)
{
  id location = 0;
  objc_storeStrong(&location, obj);
  char v2 = HSProxySynth::_Unbox<BOOL>(location);
  objc_storeStrong(&location, 0);
  return v2 & 1;
}

void sub_850BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  objc_storeStrong((id *)(v12 - 8), 0);
  _Unwind_Resume(a1);
}

void sub_85440()
{
  _Unwind_Resume(v0);
}

HSUtil::Decoder *HSUtil::Decoder::Decoder(HSUtil::Decoder *this, HSUtil::IO::Readable *a2)
{
  return this;
}

{
  HSUtil::Coder::Coder(this);
  *((void *)this + MTRestZoneIntegrator_::clearMotion(this, 1) = this;
  std::unique_ptr<HSUtil::Decoder::Callbacks>::unique_ptr[abi:ne180100]<true,void>((void *)this + 2);
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100]((void *)this + 3);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + std::vector<HSUtil::Encoder::ContainerRecord>::~vector[abi:ne180100]((uint64_t *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  HSUtil::Decoder::setReadable(this, a2);
  return this;
}

void HSUtil::Decoder::decodeElement(HSUtil::Decoder *this@<X0>, uint64_t a2@<X8>)
{
  v5[3] = a2;
  unint64_t v5[2] = (unint64_t)this;
  if (HSUtil::Coder::fatalError(this))
  {
    HSUtil::Decoder::Decoder(a2);
  }
  else
  {
    v5[0] = 0;
    v5[0] = *((void *)this + 9);
    HSUtil::Decoder::_readElement(this, v5, (HSUtil::Decoder *)v4);
    if (HSUtil::Coder::ok(this))
    {
      *((void *)this + 9) = v5[0];
      HSUtil::Decoder::Decoder(a2, (uint64_t)v4);
    }
    else
    {
      HSUtil::Decoder::Decoder(a2);
    }
    HSUtil::Decoder::~Decoder((HSUtil::Decoder *)v4);
  }
}

BOOL HSUtil::Encoder::encodeDecoder(HSUtil::Encoder *this, HSUtil::Decoder *a2)
{
  BOOL result = HSUtil::Coder::ok(this);
  if (result)
  {
    HSUtil::Encoder::_encodeDecoder(this, a2);
    return HSUtil::Coder::ok(this);
  }
  return result;
}

void sub_85850()
{
  _Unwind_Resume(v0);
}

void sub_858B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, int a11, int a12, _Unwind_Exception *exception_object)
{
}

void sub_85934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, int a11, int a12, _Unwind_Exception *exception_object)
{
}

void sub_85AC4(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id a15)
{
  *(void *)(v15 - 24) = a1;
  *(_DWORD *)(v15 - 28) = a2;

  _Unwind_Resume(*(_Unwind_Exception **)(v15 - 24));
}

void sub_85B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, _Unwind_Exception *exception_object)
{
}

HSUtil::Decoder *HSUtil::Decoder::_readElement@<X0>(HSUtil::Decoder *this@<X0>, unint64_t *a2@<X1>, HSUtil::Decoder *a3@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = HSUtil::Decoder::_skipElement(this, a2);
  if (HSUtil::Coder::ok(this) && (HSUtil::Decoder::_loadKeyTableIfNeeded(this, a2), HSUtil::Coder::ok(this))) {
    return HSUtil::Decoder::Decoder(a3, this, v7, v6);
  }
  else {
    return (HSUtil::Decoder *)HSUtil::Decoder::Decoder((uint64_t)a3);
  }
}

void HSUtil::Encoder::_encodeDecoder(HSUtil::Encoder *this, HSUtil::Decoder *a2)
{
  float v27 = this;
  __n128 v26 = a2;
  while (1)
  {
    Elementunsigned __int8 Token = 0;
    Elementunsigned __int8 Token = HSUtil::Decoder::getElementToken(v26);
    if (HSUtil::Coder::end(v26)) {
      break;
    }
    *(_DWORD *)this = *(_DWORD *)v26;
    if (!HSUtil::Coder::ok(this)) {
      break;
    }
    if (ElementToken <= 0x80u)
    {
      uint64_t v3 = ElementToken - 128;
      char v2 = 0;
    }
    else
    {
      uint64_t v3 = ElementToken - 128;
      char v2 = 1;
    }
    if ((v2 & 1) == 0)
    {
      switch(v3)
      {
        case 0:
        case 1:
        case 2:
        case 3:
          goto LABEL_9;
        case 4:
        case 5:
        case 6:
        case 7:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
          unint64_t v23 = 0;
          unint64_t v23 = HSUtil::Decoder::decodeIntStrict(v26);
          *(_DWORD *)this = *(_DWORD *)v26;
          if (HSUtil::Coder::ok(this))
          {
            HSUtil::Encoder::_encodeInt(this, v23);
            if (HSUtil::Coder::ok(this)) {
              continue;
            }
          }
          return;
        case 8:
          float v22 = 0.0;
          float v22 = HSUtil::Decoder::decodeFloatStrict(v26);
          *(_DWORD *)this = *(_DWORD *)v26;
          if (HSUtil::Coder::ok(this))
          {
            HSUtil::Encoder::_encodeFloat(this, v22);
            if (HSUtil::Coder::ok(this)) {
              continue;
            }
          }
          return;
        case 9:
          double v21 = 0.0;
          double v21 = HSUtil::Decoder::decodeDoubleStrict(v26);
          *(_DWORD *)this = *(_DWORD *)v26;
          if (HSUtil::Coder::ok(this))
          {
            HSUtil::Encoder::_encodeDouble(this, v21);
            if (HSUtil::Coder::ok(this)) {
              continue;
            }
          }
          return;
        case 10:
        case 11:
          char v20 = 0;
          char v20 = HSUtil::Decoder::decodeBool(v26) & 1;
          *(_DWORD *)this = *(_DWORD *)v26;
          if (HSUtil::Coder::ok(this))
          {
            HSUtil::Encoder::_encodeBool(this, v20 & 1);
            if (HSUtil::Coder::ok(this)) {
              continue;
            }
          }
          return;
        case 12:
          HSUtil::Decoder::decodeNull(v26);
          *(_DWORD *)this = *(_DWORD *)v26;
          if (HSUtil::Coder::ok(this))
          {
            HSUtil::Encoder::_encodeNull(this);
            if (HSUtil::Coder::ok(this)) {
              continue;
            }
          }
          return;
        case 13:
        case 14:
        case 15:
          goto LABEL_29;
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 111:
          break;
        case 96:
        case 97:
        case 98:
          HSUtil::Decoder::decodeStringByRef(v26, (uint64_t)v18);
          *(_DWORD *)this = *(_DWORD *)v26;
          if (*(_DWORD *)this)
          {
            if (*(_DWORD *)this != 4)
            {
              int v17 = 1;
              goto LABEL_45;
            }
            HSUtil::Decoder::decodeStringReadable(v26, (HSUtil::Decoder::DataReadable *)v16);
            *(_DWORD *)this = *(_DWORD *)v26;
            if (!HSUtil::Coder::ok(this))
            {
              int v17 = 1;
              goto LABEL_45;
            }
            HSUtil::Encoder::_encodeString(this, (HSUtil::Decoder::DataReadable *)v16);
            if (!HSUtil::Coder::ok(this))
            {
              int v17 = 1;
              goto LABEL_45;
            }
          }
          else
          {
            id v4 = (const char *)HSUtil::Buffer::data((HSUtil::Buffer *)v18);
            HSUtil::Encoder::_encodeString(this, v4);
            if (!HSUtil::Coder::ok(this))
            {
              int v17 = 1;
              goto LABEL_45;
            }
          }
          int v17 = 4;
LABEL_45:
          HSUtil::Buffer::~Buffer((HSUtil::Buffer *)v18);
          if (v17 != 1) {
            continue;
          }
          return;
        case 99:
        case 100:
        case 101:
          HSUtil::Decoder::decodeDataByRef(v26, (uint64_t)v15);
          *(_DWORD *)this = *(_DWORD *)v26;
          if (*(_DWORD *)this)
          {
            if (*(_DWORD *)this != 4)
            {
              int v17 = 1;
              goto LABEL_58;
            }
            HSUtil::Decoder::decodeDataReadable(v26, (HSUtil::Decoder::DataReadable *)v14);
            *(_DWORD *)this = *(_DWORD *)v26;
            if (!HSUtil::Coder::ok(this))
            {
              int v17 = 1;
              goto LABEL_58;
            }
            HSUtil::Encoder::_encodeData(this, (HSUtil::Decoder::DataReadable *)v14);
            if (!HSUtil::Coder::ok(this))
            {
              int v17 = 1;
              goto LABEL_58;
            }
          }
          else
          {
            id v8 = (unsigned __int8 *)HSUtil::Buffer::data((HSUtil::Buffer *)v15);
            size_t v9 = HSUtil::Buffer::length((HSUtil::Buffer *)v15);
            HSUtil::Encoder::_encodeData(this, v8, v9);
            if (!HSUtil::Coder::ok(this))
            {
              int v17 = 1;
              goto LABEL_58;
            }
          }
          int v17 = 4;
LABEL_58:
          HSUtil::Buffer::~Buffer((HSUtil::Buffer *)v15);
          if (v17 != 1) {
            continue;
          }
          return;
        case 102:
        case 103:
        case 104:
          unsigned __int32 v5 = HSUtil::Encoder::_SizeFromToken(ElementToken);
          HSUtil::Encoder::_encodeArrayStart(this, v5);
          if (HSUtil::Coder::ok(this))
          {
            HSUtil::Decoder::decodeArray(v26, (uint64_t)v13);
            *(_DWORD *)this = *(_DWORD *)v26;
            if (HSUtil::Coder::ok(this))
            {
              HSUtil::Encoder::_encodeDecoder(this, (HSUtil::Decoder *)v13);
              if (HSUtil::Coder::ok(this))
              {
                HSUtil::Encoder::_encodeContainerStop((uint64_t (***)(void))this);
                int v17 = HSUtil::Coder::ok(this) ? 4 : 1;
              }
              else
              {
                int v17 = 1;
              }
            }
            else
            {
              int v17 = 1;
            }
            HSUtil::Decoder::~Decoder((HSUtil::Decoder *)v13);
            if (v17 != 1) {
              continue;
            }
          }
          return;
        case 105:
        case 106:
        case 107:
          int v6 = HSUtil::Encoder::_SizeFromToken(ElementToken);
          HSUtil::Encoder::_encodeMapStart((unint64_t *)this, v6);
          if (HSUtil::Coder::ok(this))
          {
            HSUtil::Decoder::decodeMap((unint64_t *)v26, (uint64_t)v12);
            *(_DWORD *)this = *(_DWORD *)v26;
            if (HSUtil::Coder::ok(this))
            {
              HSUtil::Encoder::_encodeDecoder(this, (HSUtil::Decoder *)v12);
              if (HSUtil::Coder::ok(this))
              {
                HSUtil::Encoder::_encodeContainerStop((uint64_t (***)(void))this);
                int v17 = HSUtil::Coder::ok(this) ? 4 : 1;
              }
              else
              {
                int v17 = 1;
              }
            }
            else
            {
              int v17 = 1;
            }
            HSUtil::Decoder::~Decoder((HSUtil::Decoder *)v12);
            if (v17 != 1) {
              continue;
            }
          }
          return;
        case 108:
        case 109:
        case 110:
          unsigned __int32 v7 = HSUtil::Encoder::_SizeFromToken(ElementToken);
          HSUtil::Encoder::_encodeObjectStart(this, v7);
          if (!HSUtil::Coder::ok(this)) {
            return;
          }
          HSUtil::Decoder::decodeContainer(v26, (uint64_t)v11);
          *(_DWORD *)this = *(_DWORD *)v26;
          if (HSUtil::Coder::ok(this))
          {
            HSUtil::Encoder::_encodeDecoder(this, (HSUtil::Decoder *)v11);
            if (HSUtil::Coder::ok(this))
            {
              HSUtil::Encoder::_encodeContainerStop((uint64_t (***)(void))this);
              int v17 = HSUtil::Coder::ok(this) ? 4 : 1;
            }
            else
            {
              int v17 = 1;
            }
          }
          else
          {
            int v17 = 1;
          }
          HSUtil::Decoder::~Decoder((HSUtil::Decoder *)v11);
          if (v17 == 1) {
            return;
          }
          continue;
        default:
          JUMPOUT(0);
      }
    }
    if (ElementToken - 144 <= 0x4F)
    {
LABEL_29:
      id v19 = 0;
      id v19 = (const CoderKey *)HSUtil::Decoder::decodeKey(v26);
      *(_DWORD *)this = *(_DWORD *)v26;
      if (!HSUtil::Coder::ok(this)) {
        return;
      }
      HSUtil::Encoder::_encodeKey(this, v19);
      if (!HSUtil::Coder::ok(this)) {
        return;
      }
    }
    else
    {
      if (ElementToken > 0x7Fu)
      {
        *(_DWORD *)this = 12;
        return;
      }
LABEL_9:
      unint64_t v24 = 0;
      unint64_t v24 = HSUtil::Decoder::decodeUIntStrict(v26);
      *(_DWORD *)this = *(_DWORD *)v26;
      if (!HSUtil::Coder::ok(this)) {
        return;
      }
      HSUtil::Encoder::_encodeUInt(this, v24);
      if (!HSUtil::Coder::ok(this)) {
        return;
      }
    }
  }
}

uint64_t HSUtil::Decoder::getElementToken(HSUtil::Decoder *this)
{
  v4[1] = (unint64_t)this;
  if (HSUtil::Coder::fatalError(this))
  {
    return 0;
  }
  else
  {
    v4[0] = 0;
    v4[0] = *((void *)this + 9);
    unsigned __int8 Token = HSUtil::Decoder::_readToken(this, v4);
    if (HSUtil::Coder::ok(this)) {
      return Token;
    }
    else {
      return 0;
    }
  }
}

uint64_t HSUtil::Decoder::decodeUIntStrict(HSUtil::Decoder *this)
{
  v4[1] = (unint64_t)this;
  if (HSUtil::Coder::fatalError(this)) {
    return 0;
  }
  v4[0] = 0;
  v4[0] = *((void *)this + 9);
  uint64_t UIntStrict = HSUtil::Decoder::_readUIntStrict(this, v4);
  if (!HSUtil::Coder::ok(this)) {
    return 0;
  }
  *((void *)this + 9) = v4[0];
  return UIntStrict;
}

unint64_t HSUtil::Decoder::decodeIntStrict(HSUtil::Decoder *this)
{
  v4[1] = (unint64_t)this;
  if (HSUtil::Coder::fatalError(this)) {
    return 0;
  }
  v4[0] = 0;
  v4[0] = *((void *)this + 9);
  unint64_t IntStrict = HSUtil::Decoder::_readIntStrict(this, v4);
  if (!HSUtil::Coder::ok(this)) {
    return 0;
  }
  *((void *)this + 9) = v4[0];
  return IntStrict;
}

float HSUtil::Decoder::decodeFloatStrict(HSUtil::Decoder *this)
{
  v4[1] = (unint64_t)this;
  if (HSUtil::Coder::fatalError(this)) {
    return 0.0;
  }
  v4[0] = 0;
  v4[0] = *((void *)this + 9);
  float FloatStrict = HSUtil::Decoder::_readFloatStrict(this, v4);
  if (!HSUtil::Coder::ok(this)) {
    return 0.0;
  }
  *((void *)this + 9) = v4[0];
  return FloatStrict;
}

double HSUtil::Decoder::decodeDoubleStrict(HSUtil::Decoder *this)
{
  v4[1] = (unint64_t)this;
  if (HSUtil::Coder::fatalError(this)) {
    return 0.0;
  }
  v4[0] = 0;
  v4[0] = *((void *)this + 9);
  double DoubleStrict = HSUtil::Decoder::_readDoubleStrict(this, v4);
  if (!HSUtil::Coder::ok(this)) {
    return 0.0;
  }
  *((void *)this + 9) = v4[0];
  return DoubleStrict;
}

uint64_t HSUtil::Decoder::decodeBool(HSUtil::Decoder *this)
{
  v4[1] = (unint64_t)this;
  if (HSUtil::Coder::fatalError(this))
  {
    char v5 = 0;
  }
  else
  {
    v4[0] = 0;
    v4[0] = *((void *)this + 9);
    char v3 = HSUtil::Decoder::_readBool(this, v4) & 1;
    if (HSUtil::Coder::ok(this))
    {
      *((void *)this + 9) = v4[0];
      char v5 = v3 & 1;
    }
    else
    {
      char v5 = 0;
    }
  }
  return v5 & 1;
}

BOOL HSUtil::Decoder::decodeNull(HSUtil::Decoder *this)
{
  v3[1] = (unint64_t)this;
  BOOL result = HSUtil::Coder::fatalError(this);
  if (!result)
  {
    v3[0] = 0;
    v3[0] = *((void *)this + 9);
    HSUtil::Decoder::_readNull(this, v3);
    BOOL result = HSUtil::Coder::ok(this);
    if (result) {
      *((void *)this + 9) = v3[0];
    }
  }
  return result;
}

unint64_t HSUtil::Decoder::decodeKey(HSUtil::Decoder *this)
{
  v4[1] = (unint64_t)this;
  if (HSUtil::Coder::fatalError(this)) {
    return 0;
  }
  v4[0] = 0;
  v4[0] = *((void *)this + 9);
  Kefloat y = HSUtil::Decoder::_readKey((uint64_t **)this, v4);
  if (!HSUtil::Coder::ok(this)) {
    return 0;
  }
  *((void *)this + 9) = v4[0];
  return Key;
}

void HSUtil::Decoder::decodeStringByRef(HSUtil::Decoder *this@<X0>, uint64_t a2@<X8>)
{
  v5[3] = a2;
  unint64_t v5[2] = (unint64_t)this;
  if (HSUtil::Coder::fatalError(this))
  {
    HSUtil::Buffer::Buffer(a2);
  }
  else
  {
    v5[0] = 0;
    v5[0] = *((void *)this + 9);
    HSUtil::Decoder::_readStringByRefIfSupported(this, v5, (uint64_t)v4);
    if (HSUtil::Coder::ok(this))
    {
      *((void *)this + 9) = v5[0];
      HSUtil::Buffer::Buffer(a2, (uint64_t)v4);
    }
    else
    {
      HSUtil::Buffer::Buffer(a2);
    }
    HSUtil::Buffer::~Buffer((HSUtil::Buffer *)v4);
  }
}

HSUtil::Decoder::DataReadable *HSUtil::Decoder::decodeStringReadable@<X0>(HSUtil::Decoder *this@<X0>, HSUtil::Decoder::DataReadable *a2@<X8>)
{
  uint64_t v6[2] = (unint64_t)a2;
  v6[1] = (unint64_t)this;
  if (HSUtil::Coder::fatalError(this)) {
    return HSUtil::Decoder::DataReadable::DataReadable(a2);
  }
  v6[0] = 0;
  v6[0] = *((void *)this + 9);
  HSUtil::Decoder::_readStringReadable(this, v6, (HSUtil::Decoder::DataReadable *)v5);
  if (!HSUtil::Coder::ok(this)) {
    return HSUtil::Decoder::DataReadable::DataReadable(a2);
  }
  *((void *)this + 9) = v6[0];
  return (HSUtil::Decoder::DataReadable *)HSUtil::Decoder::DataReadable::DataReadable((uint64_t)a2, (uint64_t)v5);
}

BOOL HSUtil::Encoder::_encodeString(HSUtil::Encoder *this, HSUtil::Decoder::DataReadable *a2)
{
  id v8 = this;
  unsigned __int32 v7 = a2;
  uint64_t v5 = (*(uint64_t (**)(HSUtil::Decoder::DataReadable *))(*(void *)a2 + 8))(a2);
  unint64_t v6 = v2;
  BOOL result = HSUtil::Coder::ok((HSUtil::Coder *)&v5);
  if (result)
  {
    if (v6 > 0xFF)
    {
      if (v6 >= 0x10000) {
        HSUtil::Encoder::_writeTokenValue32((unint64_t *)this, 0xE2u, v6);
      }
      else {
        HSUtil::Encoder::_writeTokenValue16((unint64_t *)this, 0xE1u, v6);
      }
    }
    else
    {
      HSUtil::Encoder::_writeTokenValue8((unint64_t *)this, 0xE0u, v6);
    }
    BOOL result = HSUtil::Coder::ok(this);
    if (result)
    {
      HSUtil::Encoder::_copy((HSUtil::IOUtil **)this, v7);
      return HSUtil::Coder::ok(this);
    }
  }
  else
  {
    *(_DWORD *)this = 6;
  }
  return result;
}

void HSUtil::Decoder::decodeDataByRef(HSUtil::Decoder *this@<X0>, uint64_t a2@<X8>)
{
  v5[3] = a2;
  unint64_t v5[2] = (unint64_t)this;
  if (HSUtil::Coder::fatalError(this))
  {
    HSUtil::Buffer::Buffer(a2);
  }
  else
  {
    v5[0] = 0;
    v5[0] = *((void *)this + 9);
    HSUtil::Decoder::_readDataByRefIfSupported(this, v5, (uint64_t)v4);
    if (HSUtil::Coder::ok(this))
    {
      *((void *)this + 9) = v5[0];
      HSUtil::Buffer::Buffer(a2, (uint64_t)v4);
    }
    else
    {
      HSUtil::Buffer::Buffer(a2);
    }
    HSUtil::Buffer::~Buffer((HSUtil::Buffer *)v4);
  }
}

HSUtil::Decoder::DataReadable *HSUtil::Decoder::decodeDataReadable@<X0>(HSUtil::Decoder *this@<X0>, HSUtil::Decoder::DataReadable *a2@<X8>)
{
  uint64_t v6[2] = (unint64_t)a2;
  v6[1] = (unint64_t)this;
  if (HSUtil::Coder::fatalError(this)) {
    return HSUtil::Decoder::DataReadable::DataReadable(a2);
  }
  v6[0] = 0;
  v6[0] = *((void *)this + 9);
  HSUtil::Decoder::_readDataReadable(this, v6, (HSUtil::Decoder::DataReadable *)v5);
  if (!HSUtil::Coder::ok(this)) {
    return HSUtil::Decoder::DataReadable::DataReadable(a2);
  }
  *((void *)this + 9) = v6[0];
  return (HSUtil::Decoder::DataReadable *)HSUtil::Decoder::DataReadable::DataReadable((uint64_t)a2, (uint64_t)v5);
}

BOOL HSUtil::Encoder::_encodeData(HSUtil::Encoder *this, HSUtil::Decoder::DataReadable *a2)
{
  id v8 = this;
  unsigned __int32 v7 = a2;
  uint64_t v5 = (*(uint64_t (**)(HSUtil::Decoder::DataReadable *))(*(void *)a2 + 8))(a2);
  unint64_t v6 = v2;
  BOOL result = HSUtil::Coder::ok((HSUtil::Coder *)&v5);
  if (result)
  {
    if (v6 > 0xFF)
    {
      if (v6 >= 0x10000) {
        HSUtil::Encoder::_writeTokenValue32((unint64_t *)this, 0xE5u, v6);
      }
      else {
        HSUtil::Encoder::_writeTokenValue16((unint64_t *)this, 0xE4u, v6);
      }
    }
    else
    {
      HSUtil::Encoder::_writeTokenValue8((unint64_t *)this, 0xE3u, v6);
    }
    BOOL result = HSUtil::Coder::ok(this);
    if (result)
    {
      HSUtil::Encoder::_copy((HSUtil::IOUtil **)this, v7);
      return HSUtil::Coder::ok(this);
    }
  }
  else
  {
    *(_DWORD *)this = 6;
  }
  return result;
}

uint64_t HSUtil::Encoder::_SizeFromToken(unsigned __int8 a1)
{
  switch(a1)
  {
    case 0xE6u:
      return 1;
    case 0xE7u:
      return 2;
    case 0xE8u:
      return 4;
    case 0xE9u:
      return 1;
    case 0xEAu:
      return 2;
    case 0xEBu:
      return 4;
  }
  if (a1 != 236)
  {
    if (a1 != 237)
    {
      if (a1 != 238) {
        abort();
      }
      return 4;
    }
    return 2;
  }
  return 1;
}

void HSUtil::Decoder::decodeArray(HSUtil::Decoder *this@<X0>, uint64_t a2@<X8>)
{
  v5[3] = a2;
  unint64_t v5[2] = (unint64_t)this;
  if (HSUtil::Coder::fatalError(this))
  {
    HSUtil::Decoder::Decoder(a2);
  }
  else
  {
    v5[0] = 0;
    v5[0] = *((void *)this + 9);
    HSUtil::Decoder::_readArray(this, v5, (HSUtil::Decoder *)v4);
    if (HSUtil::Coder::ok(this))
    {
      *((void *)this + 9) = v5[0];
      HSUtil::Decoder::Decoder(a2, (uint64_t)v4);
    }
    else
    {
      HSUtil::Decoder::Decoder(a2);
    }
    HSUtil::Decoder::~Decoder((HSUtil::Decoder *)v4);
  }
}

void HSUtil::Decoder::decodeContainer(HSUtil::Decoder *this@<X0>, uint64_t a2@<X8>)
{
  v5[3] = a2;
  unint64_t v5[2] = (unint64_t)this;
  if (HSUtil::Coder::fatalError(this))
  {
    HSUtil::Decoder::Decoder(a2);
  }
  else
  {
    v5[0] = 0;
    v5[0] = *((void *)this + 9);
    HSUtil::Decoder::_readContainer(this, v5, (HSUtil::Decoder *)v4);
    if (HSUtil::Coder::ok(this))
    {
      *((void *)this + 9) = v5[0];
      HSUtil::Decoder::Decoder(a2, (uint64_t)v4);
    }
    else
    {
      HSUtil::Decoder::Decoder(a2);
    }
    HSUtil::Decoder::~Decoder((HSUtil::Decoder *)v4);
  }
}

unint64_t HSUtil::Decoder::_readStringByRefIfSupported@<X0>(HSUtil::Decoder *this@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((void *)this + 6)) {
    return HSUtil::Decoder::_readStringByRef(this, a2, a3);
  }
  *(_DWORD *)this = 4;
  return HSUtil::Buffer::Buffer(a3);
}

HSUtil::Decoder::DataReadable *HSUtil::Decoder::DataReadable::DataReadable(HSUtil::Decoder::DataReadable *this)
{
  return this;
}

{
  HSUtil::Decoder::DataReadable *result;

  HSUtil::IO::Readable::Readable(this);
  BOOL result = this;
  *(void *)this = &off_141FF0;
  *((void *)this + MTRestZoneIntegrator_::clearMotion(this, 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  return result;
}

HSUtil::Decoder::DataReadable *HSUtil::Decoder::_readStringReadable@<X0>(HSUtil::Decoder *this@<X0>, unint64_t *a2@<X1>, HSUtil::Decoder::DataReadable *a3@<X8>)
{
  int v11 = a3;
  id v10 = this;
  size_t v9 = a2;
  unint64_t StringLength = HSUtil::Decoder::_readStringLength(this, a2);
  if (!HSUtil::Coder::ok(this)) {
    return HSUtil::Decoder::DataReadable::DataReadable(a3);
  }
  unint64_t v7 = 0;
  unint64_t v7 = *v9;
  HSUtil::Decoder::_skip((uint64_t)this, v9, StringLength - 1);
  if (!HSUtil::Coder::ok(this)) {
    return HSUtil::Decoder::DataReadable::DataReadable(a3);
  }
  char __dst = 0;
  HSUtil::Decoder::_read(this, v9, &__dst, 1uLL);
  if (!HSUtil::Coder::ok(this)) {
    return HSUtil::Decoder::DataReadable::DataReadable(a3);
  }
  if (!__dst) {
    return HSUtil::Decoder::DataReadable::DataReadable(a3, this, v7, StringLength);
  }
  *(_DWORD *)this = 12;
  return HSUtil::Decoder::DataReadable::DataReadable(a3);
}

uint64_t HSUtil::Decoder::DataReadable::DataReadable(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t HSUtil::Decoder::DataReadable::read(HSUtil::Decoder::DataReadable *this, unint64_t a2, void *a3, size_t a4)
{
  size_t __n = a4;
  if (*((void *)this + 1))
  {
    if (a2 <= *((void *)this + 4))
    {
      if (a4 > *((void *)this + 4) - a2) {
        size_t __n = *((void *)this + 4) - a2;
      }
      if (*((void *)this + 2))
      {
        memcpy(a3, (const void *)(*((void *)this + 2) + *((void *)this + 3) + a2), __n);
        HSUtil::IO::Result::Result((HSUtil::IO::Result *)v7, __n);
      }
      else
      {
        v7[0] = (***((uint64_t (****)(void, uint64_t, void *, size_t))this + 1))(*((void *)this + 1), *((void *)this + 3) + a2, a3, __n);
        v7[1] = v4;
      }
    }
    else
    {
      HSUtil::IO::Result::Result((HSUtil::IO::Result *)v7, 34);
    }
  }
  else
  {
    HSUtil::IO::Result::Result((HSUtil::IO::Result *)v7, 45);
  }
  return v7[0];
}

uint64_t HSUtil::Decoder::DataReadable::readLength(HSUtil::Decoder::DataReadable *this)
{
  HSUtil::IO::Result::Result((HSUtil::IO::Result *)&v2, *((void *)this + 4));
  return v2;
}

HSUtil::Decoder::DataReadable *HSUtil::Decoder::DataReadable::DataReadable(HSUtil::Decoder::DataReadable *this, HSUtil::Decoder *a2, uint64_t a3, uint64_t a4)
{
  return this;
}

{
  HSUtil::Decoder::DataReadable *result;

  HSUtil::IO::Readable::Readable(this);
  BOOL result = this;
  *(void *)this = &off_141FF0;
  *((void *)this + MTRestZoneIntegrator_::clearMotion(this, 1) = *((void *)a2 + 5);
  *((void *)this + 2) = *((void *)a2 + 6);
  *((void *)this + 3) = *((void *)a2 + 7) + a3;
  *((void *)this + 4) = a4;
  return result;
}

__n128 HSUtil::Decoder::DataReadable::DataReadable(uint64_t a1, uint64_t a2)
{
  HSUtil::IO::Readable::Readable((void *)a1);
  *(void *)a1 = &off_141FF0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 24) = result;
  return result;
}

void *HSUtil::IO::Readable::Readable(void *result)
{
  HSUtil::Decoder *result = &off_141F18;
  return result;
}

BOOL HSUtil::Encoder::_copy(HSUtil::IOUtil **this, HSUtil::Decoder::DataReadable *a2)
{
  id v10 = this;
  size_t v9 = a2;
  *(void *)&long long v8 = (*(uint64_t (**)(HSUtil::Decoder::DataReadable *))(*(void *)a2 + 8))(a2);
  *((void *)&v8 + MTRestZoneIntegrator_::clearMotion(this, 1) = v2;
  BOOL result = HSUtil::Coder::ok((HSUtil::Coder *)&v8);
  if (result)
  {
    unint64_t v7 = *((void *)&v8 + 1);
    *(void *)&long long v6 = HSUtil::IOUtil::Copy(this[5], this[17], v9, 0, *((unint64_t *)&v8 + 1));
    *((void *)&v6 + MTRestZoneIntegrator_::clearMotion(this, 1) = v4;
    long long v8 = v6;
    BOOL result = HSUtil::Coder::ok((HSUtil::Coder *)&v8);
    if (result && *((void *)&v8 + 1) == v7)
    {
      if (v7 <= -1 - (uint64_t)this[17])
      {
        this[17] = (HSUtil::IOUtil *)((char *)this[17] + v7);
        *(_DWORD *)this = 0;
      }
      else
      {
        *(_DWORD *)this = 14;
      }
    }
    else
    {
      *(_DWORD *)this = 7;
    }
  }
  else
  {
    *(_DWORD *)this = 6;
  }
  return result;
}

uint64_t HSUtil::IOUtil::Copy(HSUtil::IOUtil *this, HSUtil::IO::Writable *a2, HSUtil::IO::Readable *a3, HSUtil::IO::Readable *a4, unint64_t a5)
{
  unint64_t v43 = this;
  char v42 = a2;
  uint64_t v41 = a3;
  uint64_t v40 = a4;
  unint64_t v39 = a5;
  unint64_t v38 = 0;
  if (this) {
  else
  }
    int v17 = 0;
  unint64_t v38 = v17;
  if (v17)
  {
    *(void *)&long long v44 = (**v38)(v38, v42, v41, v40, v39);
    *((void *)&v44 + MTRestZoneIntegrator_::clearMotion(this, 1) = v5;
  }
  else
  {
    unint64_t v37 = 0;
    if (v41) {
    else
    }
      uint64_t v16 = 0;
    unint64_t v37 = v16;
    if (v16)
    {
      *(void *)&long long v44 = (**v37)(v37, v40, v43, v42, v39);
      *((void *)&v44 + MTRestZoneIntegrator_::clearMotion(this, 1) = v6;
    }
    else
    {
      uint64_t v36 = 0x8000;
      HSUtil::Buffer::Buffer((HSUtil::Buffer *)v35, 0x8000uLL, 0);
      if (HSUtil::Buffer::operator BOOL((HSUtil::Buffer *)v35))
      {
        unint64_t v33 = v39;
        unint64_t v32 = 0;
        while (1)
        {
          if (!v33)
          {
LABEL_36:
            HSUtil::IO::Result::Result((HSUtil::IO::Result *)&v44, v32);
            int v34 = 1;
            goto LABEL_37;
          }
          unint64_t v31 = 0;
          if (v33 <= 0x8000) {
            uint64_t v15 = v33;
          }
          else {
            uint64_t v15 = 0x8000;
          }
          unint64_t v31 = v15;
          *(void *)&long long v14 = HSUtil::Buffer::readFrom((HSUtil::Buffer *)v35, 0, v41, (uint64_t)v40, v15);
          *((void *)&v14 + MTRestZoneIntegrator_::clearMotion(this, 1) = v7;
          long long v30 = v14;
          if (!HSUtil::Coder::ok((HSUtil::Coder *)&v30))
          {
            long long v44 = v30;
            int v34 = 1;
            goto LABEL_37;
          }
          uint64_t v12 = v43;
          int v11 = v42;
          uint64_t v8 = HSUtil::Buffer::data((HSUtil::Buffer *)v35);
          *(void *)&long long v13 = (**(uint64_t (***)(HSUtil::IOUtil *, HSUtil::IO::Writable *, uint64_t, void))v12)(v12, v11, v8, *((void *)&v30 + 1));
          *((void *)&v13 + MTRestZoneIntegrator_::clearMotion(this, 1) = v9;
          long long v29 = v13;
          if (!HSUtil::Coder::ok((HSUtil::Coder *)&v29))
          {
            long long v44 = v29;
            int v34 = 1;
            goto LABEL_37;
          }
          BOOL v28 = *((void *)&v29 + 1) <= -1 - v32;
          if (*((void *)&v29 + 1) > -1 - v32)
          {
            float v27 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingUtil/HSIOUtil.h", v50);
            os_log_t oslog = &_os_log_default;
            os_log_type_t type = OS_LOG_TYPE_ERROR;
            if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
            {
              __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v49, (uint64_t)"IO::Result HSUtil::IOUtil::Copy(Writable &, size_t, Readable &, size_t, size_t)", (uint64_t)v27, 77, (uint64_t)"wr.len <= SIZE_MAX-copiedLen");
              _os_log_error_impl(&def_411C8, oslog, type, "Assertion failed (%s @ %s:%ju): %s", v49, 0x2Au);
            }
            objc_storeStrong((id *)&oslog, 0);
            HSUtil::IO::Result::Result((HSUtil::IO::Result *)&v44, 0);
            int v34 = 1;
            goto LABEL_37;
          }
          BOOL v24 = *((void *)&v29 + 1) <= (unint64_t)(-1 - (void)v40);
          if (*((void *)&v29 + 1) > (unint64_t)(-1 - (void)v40))
          {
            unint64_t v23 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingUtil/HSIOUtil.h", v48);
            os_log_t v22 = &_os_log_default;
            os_log_type_t v21 = OS_LOG_TYPE_ERROR;
            if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
            {
              __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v47, (uint64_t)"IO::Result HSUtil::IOUtil::Copy(Writable &, size_t, Readable &, size_t, size_t)", (uint64_t)v23, 78, (uint64_t)"wr.len <= SIZE_MAX-roff");
              _os_log_error_impl(&def_411C8, v22, v21, "Assertion failed (%s @ %s:%ju): %s", v47, 0x2Au);
            }
            objc_storeStrong((id *)&v22, 0);
            HSUtil::IO::Result::Result((HSUtil::IO::Result *)&v44, 0);
            int v34 = 1;
            goto LABEL_37;
          }
          BOOL v20 = *((void *)&v29 + 1) <= (unint64_t)(-1 - (void)v42);
          if (*((void *)&v29 + 1) > (unint64_t)(-1 - (void)v42)) {
            break;
          }
          v33 -= *((void *)&v29 + 1);
          v32 += *((void *)&v29 + 1);
          uint64_t v40 = (HSUtil::IO::Readable *)((char *)v40 + *((void *)&v29 + 1));
          char v42 = (HSUtil::IO::Writable *)((char *)v42 + *((void *)&v29 + 1));
          if (*((void *)&v30 + 1) < v31 || *((void *)&v29 + 1) < *((void *)&v30 + 1)) {
            goto LABEL_36;
          }
        }
        id v19 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingUtil/HSIOUtil.h", v46);
        os_log_t v18 = &_os_log_default;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v45, (uint64_t)"IO::Result HSUtil::IOUtil::Copy(Writable &, size_t, Readable &, size_t, size_t)", (uint64_t)v19, 79, (uint64_t)"wr.len <= SIZE_MAX-woff");
          _os_log_error_impl(&def_411C8, v18, OS_LOG_TYPE_ERROR, "Assertion failed (%s @ %s:%ju): %s", v45, 0x2Au);
        }
        objc_storeStrong((id *)&v18, 0);
        HSUtil::IO::Result::Result((HSUtil::IO::Result *)&v44, 0);
        int v34 = 1;
      }
      else
      {
        HSUtil::IO::Result::Result((HSUtil::IO::Result *)&v44, 12);
        int v34 = 1;
      }
LABEL_37:
      HSUtil::Buffer::~Buffer((HSUtil::Buffer *)v35);
    }
  }
  return v44;
}

void sub_88380()
{
  _Unwind_Resume(v0);
}

uint64_t HSUtil::Decoder::_readDataByRefIfSupported@<X0>(HSUtil::Decoder *this@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((void *)this + 6)) {
    return HSUtil::Decoder::_readDataByRef(this, a2, a3);
  }
  *(_DWORD *)this = 4;
  return HSUtil::Buffer::Buffer(a3);
}

uint64_t HSUtil::Decoder::_readDataByRef@<X0>(HSUtil::Decoder *this@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t DataLength = HSUtil::Decoder::_readDataLength(this, a2);
  if (HSUtil::Coder::ok(this)
    && (unint64_t v6 = *a2, HSUtil::Decoder::_skip((uint64_t)this, a2, DataLength), HSUtil::Coder::ok(this)))
  {
    return HSUtil::Buffer::Buffer(a3, *((void *)this + 6) + *((void *)this + 7) + v6, DataLength);
  }
  else
  {
    return HSUtil::Buffer::Buffer(a3);
  }
}

HSUtil::Decoder::DataReadable *HSUtil::Decoder::_readDataReadable@<X0>(HSUtil::Decoder *this@<X0>, unint64_t *a2@<X1>, HSUtil::Decoder::DataReadable *a3@<X8>)
{
  uint64_t DataLength = HSUtil::Decoder::_readDataLength(this, a2);
  if (HSUtil::Coder::ok(this)
    && (uint64_t v6 = *a2, HSUtil::Decoder::_skip((uint64_t)this, a2, DataLength), HSUtil::Coder::ok(this)))
  {
    return HSUtil::Decoder::DataReadable::DataReadable(a3, this, v6, DataLength);
  }
  else
  {
    return HSUtil::Decoder::DataReadable::DataReadable(a3);
  }
}

HSUtil::Decoder *HSUtil::Decoder::_readContainer@<X0>(HSUtil::Decoder *this@<X0>, unint64_t *a2@<X1>, HSUtil::Decoder *a3@<X8>)
{
  unsigned __int8 Token = HSUtil::Decoder::_readToken(this, a2);
  if (!HSUtil::Coder::ok(this)) {
    return (HSUtil::Decoder *)HSUtil::Decoder::Decoder((uint64_t)a3);
  }
  unint64_t Value32 = 0;
  switch(Token)
  {
    case 0xE6u:
      goto LABEL_13;
    case 0xE7u:
      goto LABEL_14;
    case 0xE8u:
LABEL_15:
      unint64_t Value32 = HSUtil::Decoder::_readValue32(this, a2);
      goto LABEL_16;
    case 0xE9u:
LABEL_13:
      unint64_t Value32 = HSUtil::Decoder::_readValue8(this, a2);
      goto LABEL_16;
    case 0xEAu:
LABEL_14:
      unint64_t Value32 = (unsigned __int16)HSUtil::Decoder::_readValue16(this, a2);
      goto LABEL_16;
    case 0xEBu:
      goto LABEL_15;
    case 0xECu:
      goto LABEL_13;
    case 0xEDu:
      goto LABEL_14;
    case 0xEEu:
      goto LABEL_15;
  }
  *(_DWORD *)this = 2;
LABEL_16:
  if (!HSUtil::Coder::ok(this)) {
    return (HSUtil::Decoder *)HSUtil::Decoder::Decoder((uint64_t)a3);
  }
  uint64_t v6 = *a2;
  HSUtil::Decoder::_skip((uint64_t)this, a2, Value32);
  if (!HSUtil::Coder::ok(this)) {
    return (HSUtil::Decoder *)HSUtil::Decoder::Decoder((uint64_t)a3);
  }
  HSUtil::Decoder::_loadKeyTableIfNeeded(this, a2);
  if (!HSUtil::Coder::ok(this)) {
    return (HSUtil::Decoder *)HSUtil::Decoder::Decoder((uint64_t)a3);
  }
  return HSUtil::Decoder::Decoder(a3, this, v6, Value32);
}

NSNumber *HSProxySynth::Box<BOOL>(char a1)
{
  return HSProxySynth::_Box((HSProxySynth *)(a1 & 1));
}

id HSProxySynth::Unbox<NSData * {__strong}>(id obj)
{
  id location = 0;
  objc_storeStrong(&location, obj);
  id v2 = HSProxySynth::_Unbox<objc_object * {__strong}>(location);
  objc_storeStrong(&location, 0);

  return v2;
}

void sub_88840(uint64_t a1, int a2)
{
  *(void *)(v2 - 16) = a1;
  *(_DWORD *)(v2 - 2objc_storeStrong(&location, 0) = a2;
  objc_storeStrong((id *)(v2 - 8), 0);
  _Unwind_Resume(*(_Unwind_Exception **)(v2 - 16));
}

NSNumber *HSProxySynth::_Box(HSProxySynth *this)
{
  return +[NSNumber numberWithBool:this & 1];
}

{
  return +[NSNumber numberWithInt:this];
}

{
  return +[NSNumber numberWithUnsignedLong:this];
}

id HSProxySynth::_Unbox<objc_object * {__strong}>(id obj)
{
  id location = 0;
  objc_storeStrong(&location, obj);
  id v2 = location;
  objc_storeStrong(&location, 0);

  return v2;
}

uint64_t HSProxySynth::_Unbox<BOOL>(id obj)
{
  id location = 0;
  objc_storeStrong(&location, obj);
  unsigned __int8 v2 = [location BOOLValue];
  objc_storeStrong(&location, 0);
  return v2 & 1;
}

void sub_8895C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  objc_storeStrong((id *)(v12 - 8), 0);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_51()
{
  {
    {
      HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
    }
  }
}

void __cxx_global_var_init_2_50(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_50(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_45(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_45(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_45(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_45(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_46(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void sub_89378()
{
  _Unwind_Resume(v0);
}

BOOL HSUtil::FileDescriptor::operator BOOL(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) >= 0;
}

void sub_89B78()
{
  _Unwind_Resume(v0);
}

void sub_89BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, int a11, int a12, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void sub_89C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, int a11, int a12, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void HSObjectServerConfig::~HSObjectServerConfig(HSObjectServerConfig *this)
{
}

{
  objc_storeStrong(&this->var3, 0);
  objc_storeStrong(&this->var2, 0);
  objc_storeStrong(&this->var1, 0);
  objc_destroyWeak(&this->var0);
}

void collectStages(NSMutableSet *a1, HSStage *a2)
{
  id location = 0;
  objc_storeStrong(&location, a1);
  id v12 = 0;
  objc_storeStrong(&v12, a2);
  if ([location containsObject:v12])
  {
    int v11 = 1;
  }
  else
  {
    [location addObject:v12];
    memset(__b, 0, sizeof(__b));
    id v6 = [v12 consumers];
    id v7 = [v6 countByEnumeratingWithState:__b objects:v14 count:16];
    if (v7)
    {
      uint64_t v3 = *(void *)__b[2];
      uint64_t v4 = 0;
      id v5 = v7;
      while (1)
      {
        uint64_t v2 = v4;
        if (*(void *)__b[2] != v3) {
          objc_enumerationMutation(v6);
        }
        id v10 = *(id *)(__b[1] + 8 * v4);
        collectStages((NSMutableSet *)location, (HSStage *)v10);
        objc_storeStrong(&v10, 0);
        ++v4;
        if (v2 + 1 >= (unint64_t)v5)
        {
          uint64_t v4 = 0;
          id v5 = [v6 countByEnumeratingWithState:__b objects:v14 count:16];
          if (!v5) {
            break;
          }
        }
      }
    }

    int v11 = 0;
  }
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&location, 0);
}

void sub_8A164(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id location)
{
  *(void *)(v33 - 176) = a1;
  *(_DWORD *)(v33 - 18objc_storeStrong(&location, 0) = a2;

  objc_storeStrong((id *)(v33 - 168), 0);
  objc_storeStrong((id *)(v33 - 160), 0);
  JUMPOUT(0x8A1DCLL);
}

void sub_8A1D4()
{
  _Unwind_Resume(v0);
}

id filterProxyStages(id obj)
{
  id location = 0;
  objc_storeStrong(&location, obj);
  id v11 = (id)objc_opt_new();
  memset(__b, 0, sizeof(__b));
  id obja = location;
  id v8 = [obja countByEnumeratingWithState:__b objects:v13 count:16];
  if (v8)
  {
    uint64_t v4 = *(void *)__b[2];
    uint64_t v5 = 0;
    id v6 = v8;
    while (1)
    {
      uint64_t v3 = v5;
      if (*(void *)__b[2] != v4) {
        objc_enumerationMutation(obja);
      }
      id v10 = *(id *)(__b[1] + 8 * v5);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        [v11 addObject:v10];
      }
      objc_storeStrong(&v10, 0);
      ++v5;
      if (v3 + 1 >= (unint64_t)v6)
      {
        uint64_t v5 = 0;
        id v6 = [obja countByEnumeratingWithState:__b objects:v13 count:16];
        if (!v6) {
          break;
        }
      }
    }
  }

  id v2 = v11;
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&location, 0);

  return v2;
}

void sub_8A50C()
{
  _Unwind_Resume(v0);
}

void sub_8A7A4(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, id a12, id a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id location)
{
  *(void *)(v36 - 20objc_storeStrong(&location, 0) = a1;
  *(_DWORD *)(v36 - 204) = a2;
  HSUtil::ObjectLock::~ObjectLock((id *)(v36 - 184));
  _Unwind_Resume(*(_Unwind_Exception **)(v36 - 200));
}

id filterDeadProxyStages(id obj)
{
  id location = 0;
  objc_storeStrong(&location, obj);
  id v11 = (id)objc_opt_new();
  memset(__b, 0, sizeof(__b));
  id obja = location;
  id v8 = [obja countByEnumeratingWithState:__b objects:v13 count:16];
  if (v8)
  {
    uint64_t v4 = *(void *)__b[2];
    uint64_t v5 = 0;
    id v6 = v8;
    while (1)
    {
      uint64_t v3 = v5;
      if (*(void *)__b[2] != v4) {
        objc_enumerationMutation(obja);
      }
      id v10 = *(id *)(__b[1] + 8 * v5);
      objc_opt_class();
      if (objc_opt_isKindOfClass() & 1) == 0 || ([v10 hsProxyAlive]) {
        [v11 addObject:v10];
      }
      objc_storeStrong(&v10, 0);
      ++v5;
      if (v3 + 1 >= (unint64_t)v6)
      {
        uint64_t v5 = 0;
        id v6 = [obja countByEnumeratingWithState:__b objects:v13 count:16];
        if (!v6) {
          break;
        }
      }
    }
  }

  id v2 = v11;
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&location, 0);

  return v2;
}

void sub_8ABCC()
{
  _Unwind_Resume(v0);
}

void sub_8AC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, _Unwind_Exception *exception_object)
{
  HSUtil::ObjectLock::~ObjectLock((id *)(v15 - 32));
  _Unwind_Resume(a1);
}

void sub_8ADC4(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  *(void *)(v10 - 48) = a1;
  *(_DWORD *)(v10 - 52) = a2;
  objc_storeStrong((id *)(v10 - 32), 0);
  _Unwind_Resume(*(_Unwind_Exception **)(v10 - 48));
}

uint64_t HSUtil::FileDescriptor::reset(uint64_t this)
{
  uint64_t v1 = this;
  if (*(int *)(this + 16) >= 0)
  {
    this = close(*(_DWORD *)(this + 16));
    *(_DWORD *)(v1 + 16) = -1;
  }
  return this;
}

void __cxx_global_var_init_52()
{
  {
    {
      HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
    }
  }
}

void __cxx_global_var_init_2_51(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_51(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_46(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_46(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_46(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_46(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_47(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void sub_8B640(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, objc_super a13)
{
  *(void *)(v13 - 4objc_storeStrong(&location, 0) = a1;
  *(_DWORD *)(v13 - 44) = a2;
  a13.receiver = *(id *)(v13 - 8);
  a13.super_class = (Class)HSObjectServer;
  objc_msgSendSuper2(&a13, "dealloc");
  _Unwind_Resume(*(_Unwind_Exception **)(v13 - 40));
}

void sub_8B9A4()
{
  _Unwind_Resume(v0);
}

void HSMapper::New(uint64_t a1@<X0>, void *a2@<X1>, NSObject *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v12 = a4;
  *(void *)id v11 = a1;
  id location = 0;
  objc_storeStrong(&location, a2);
  oslog[1] = a3;
  oslog[0] = (os_log_t)&_os_log_default;
  os_log_type_t type = OS_LOG_TYPE_DEBUG;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEBUG))
  {
    log = oslog[0];
    os_log_type_t v5 = type;
    __os_log_helper_16_0_0(v7);
    _os_log_debug_impl(&def_411C8, log, v5, "HSMapper::New", v7, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  operator new();
}

void sub_8BD48()
{
  _Unwind_Resume(v0);
}

uint64_t std::set<std::shared_ptr<HSMapper>>::insert[abi:ne180100](uint64_t a1, void *a2)
{
  v4[3] = a1;
  unint64_t v4[2] = a2;
  v4[0] = std::__tree<std::shared_ptr<HSMapper>>::__insert_unique[abi:ne180100](a1, a2);
  v4[1] = v2;
  std::pair<std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>>,BOOL>::pair[abi:ne180100]<std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>,BOOL,0>((uint64_t)&v5, (uint64_t)v4);
  return v5;
}

void HSMapper::Config::~Config(id *this)
{
}

{
  std::function<void ()(std::shared_ptr<HSMapper>)>::~function((uint64_t)(this + 2));
  objc_destroyWeak(this);
}

void *std::set<std::shared_ptr<HSMapper>>::set[abi:ne180100](void *a1, void *a2)
{
  return a1;
}

{
  std::__tree<std::shared_ptr<HSMapper>>::__tree(a1, a2);
  return a1;
}

uint64_t std::set<std::shared_ptr<HSMapper>>::begin[abi:ne180100]()
{
  uint64_t v1 = std::__tree<std::shared_ptr<HSMapper>>::begin[abi:ne180100]();
  std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>>::__hash_map_iterator[abi:ne180100](&v2, v1);
  return v2;
}

uint64_t std::set<std::shared_ptr<HSMapper>>::end[abi:ne180100]()
{
  uint64_t v1 = std::__tree<std::shared_ptr<HSMapper>>::end[abi:ne180100]();
  std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>>::__hash_map_iterator[abi:ne180100](&v2, v1);
  return v2;
}

uint64_t std::__tree_const_iterator<std::shared_ptr<HSMapper>,std::__tree_node<std::shared_ptr<HSMapper>,void *> *,long>::operator*[abi:ne180100](uint64_t a1)
{
  return std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100](a1)
       + 32;
}

uint64_t HSMapper::close(HSMapper *this)
{
  uint64_t v1 = (HSUtil::Connection *)std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)this + 16);
  return HSUtil::Connection::close(v1);
}

uint64_t *std::__tree_const_iterator<std::shared_ptr<HSMapper>,std::__tree_node<std::shared_ptr<HSMapper>,void *> *,long>::operator++[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = std::__tree_next_iter[abi:ne180100]<std::__tree_end_node<std::__tree_node_base<void *> *> *,std::__tree_node_base<void *> *>(*a1);
  BOOL result = a1;
  *a1 = (uint64_t)v1;
  return result;
}

uint64_t std::set<std::shared_ptr<HSMapper>>::~set[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::__tree<std::shared_ptr<HSMapper>>::~__tree(a1);
  return a1;
}

uint64_t std::set<std::shared_ptr<HSMapper>>::erase[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return std::__tree<std::shared_ptr<HSMapper>>::__erase_unique<std::shared_ptr<HSMapper>>(a1, a2);
}

void $_1::~$_1(std::mutex *this)
{
}

{
  std::set<std::shared_ptr<HSMapper>>::~set[abi:ne180100]((uint64_t)&this[1]);
  std::mutex::~mutex(this);
}

void $_1::$_1($_1 *this)
{
}

{
  std::mutex::mutex[abi:ne180100](this);
  std::set<std::shared_ptr<HSMapper>>::set[abi:ne180100]((uint64_t)this + 64);
}

{
  $_1::$_1(this);
}

{
  std::unordered_set<HSStage  {objcproto15HSPreferencable}* {__weak},HSUtil::ObjectHasher,std::equal_to<HSStage  {objcproto15HSPreferencable}* {__weak}>,std::allocator<HSStage  {objcproto15HSPreferencable}* {__weak}>>::unordered_set[abi:ne180100]((uint64_t)this + 8);
}

void sub_8C724()
{
  _Unwind_Resume(v0);
}

uint64_t HSObjectClientConfig::operator=(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)a1, *(id *)a2);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8) & 1;
  id v2 = objc_retainBlock(*(id *)(a2 + 16));
  uint64_t v3 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v2;

  return a1;
}

void sub_8C8B4(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, objc_super a13)
{
  *(void *)(v13 - 4objc_storeStrong(&location, 0) = a1;
  *(_DWORD *)(v13 - 44) = a2;
  a13.receiver = *(id *)(v13 - 8);
  a13.super_class = (Class)HSObjectClient;
  objc_msgSendSuper2(&a13, "dealloc");
  _Unwind_Resume(*(_Unwind_Exception **)(v13 - 40));
}

id HSMapper::send(HSMapper *this, void *a2, objc_selector *a3, id obj, objc_object *a5, objc_object *a6)
{
  unint64_t v39 = this;
  unint64_t v38 = a2;
  unint64_t v37 = a3;
  id location = 0;
  objc_storeStrong(&location, obj);
  id v35 = 0;
  objc_storeStrong(&v35, a5);
  id v34 = 0;
  objc_storeStrong(&v34, a6);
  uint64_t v10 = v39;
  v33[0] = v38;
  v33[1] = v37;
  v33[2] = location;
  v33[3] = v35;
  v33[4] = v34;
  HSMapper::_popEncoderBuf(v10, &v32);
  unint64_t v31 = (HSUtil::Coder *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  v29.n128_u64[0] = (unint64_t)v10;
  v29.n128_u64[1] = (unint64_t)&v32;
  HSUtil::Defer<HSMapper::_messageHandler(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)::{lambda(void)#1}>(&v29, &v30);
  HSUtil::Encoder::encodeCodable<Message>(v31, (Message *)v33);
  BOOL v28 = (HSUtil::Buffer *)HSUtil::EncoderBuf::buffer(v31);
  if (HSUtil::Buffer::operator BOOL(v28))
  {
    if (*((unsigned char *)v10 + 40))
    {
      id v6 = (HSUtil::Connection *)std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)v10 + 16);
      HSUtil::Connection::sendAsync(v6, v28);
      id v40 = 0;
      int v23 = 1;
    }
    else
    {
      id v7 = (HSUtil::Connection *)std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)v10 + 16);
      HSUtil::Connection::send(v7, v28, (uint64_t)v22);
      if (HSUtil::Buffer::operator BOOL((HSUtil::Buffer *)v22))
      {
        Message::Message((Message *)v17);
        BOOL v16 = HSMapper::_decodeMessage((uint64_t)v10, (HSUtil::IO::Readable *)v22, (Message *)v17);
        BOOL v15 = v16;
        if (v16)
        {
          id v40 = v17[2];
          int v23 = 1;
        }
        else
        {
          long long v14 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRemoteObject.mm", v42);
          os_log_t v13 = &_os_log_default;
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v41, (uint64_t)"id HSMapper::send(ObjectID, SEL, __strong id, __strong id, __strong id)", (uint64_t)v14, 217, (uint64_t)"br");
            _os_log_error_impl(&def_411C8, v13, OS_LOG_TYPE_ERROR, "Assertion failed (%s @ %s:%ju): %s", v41, 0x2Au);
          }
          objc_storeStrong((id *)&v13, 0);
          id v40 = 0;
          int v23 = 1;
        }
        Message::~Message(v17);
      }
      else
      {
        BOOL v20 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRemoteObject.mm", v44);
        os_log_t oslog = &_os_log_default;
        os_log_type_t v18 = OS_LOG_TYPE_ERROR;
        if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v43, (uint64_t)"id HSMapper::send(ObjectID, SEL, __strong id, __strong id, __strong id)", (uint64_t)v20, 212, (uint64_t)"encodedReply");
          _os_log_error_impl(&def_411C8, oslog, v18, "Assertion failed (%s @ %s:%ju): %s", v43, 0x2Au);
        }
        objc_storeStrong((id *)&oslog, 0);
        id v40 = 0;
        int v23 = 1;
      }
      HSUtil::Buffer::~Buffer((HSUtil::Buffer *)v22);
    }
  }
  else
  {
    __n128 v26 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRemoteObject.mm", v46);
    id v25 = &_os_log_default;
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)v25, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v45, (uint64_t)"id HSMapper::send(ObjectID, SEL, __strong id, __strong id, __strong id)", (uint64_t)v26, 201, (uint64_t)"buf");
      _os_log_error_impl(&def_411C8, (os_log_t)v25, type, "Assertion failed (%s @ %s:%ju): %s", v45, 0x2Au);
    }
    objc_storeStrong(&v25, 0);
    id v40 = 0;
    int v23 = 1;
  }
  HSUtil::DeferredFn<HSMapper::send(unsigned long long,objc_selector *,objc_object *,objc_object *,objc_object *)::{lambda(void)#1}>::~DeferredFn((uint64_t *)&v30);
  std::unique_ptr<HSUtil::EncoderBuf>::~unique_ptr[abi:ne180100]((uint64_t)&v32);
  Message::~Message(v33);
  objc_storeStrong(&v34, 0);
  objc_storeStrong(&v35, 0);
  objc_storeStrong(&location, 0);
  id v8 = v40;

  return v8;
}

void sub_8CFE0()
{
  _Unwind_Resume(v0);
}

void HSObjectClientConfig::~HSObjectClientConfig(HSObjectClientConfig *this)
{
}

{
  objc_storeStrong(&this->connectionClosed, 0);
  objc_storeStrong((id *)&this->handlerQueue, 0);
}

void HSObjectClientConfig::HSObjectClientConfig(HSObjectClientConfig *this)
{
}

{
  this->handlerQueue = 0;
  this->async = 0;
  this->connectionClosed = 0;
}

void sub_8D3D8()
{
  _Unwind_Resume(v0);
}

void sub_8D634()
{
  _Unwind_Resume(v0);
}

void sub_8D8DC()
{
  _Unwind_Resume(v0);
}

void sub_8DB70()
{
  _Unwind_Resume(v0);
}

void *getProxyFn(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = a1;
    char v1 = 1;
  }
  else
  {
    uint64_t v2 = 0;
    char v1 = 0;
  }
  if (v1) {
    abort();
  }
  switch(v2)
  {
    case 0:
      uint64_t v4 = proxyFn0;
      break;
    case 1:
      uint64_t v4 = proxyFn1;
      break;
    case 2:
      uint64_t v4 = proxyFn2;
      break;
    case 3:
      uint64_t v4 = proxyFn3;
      break;
    default:
      JUMPOUT(0);
  }
  return v4;
}

std::__shared_weak_count *std::weak_ptr<HSMapper>::lock@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  BOOL result = (std::__shared_weak_count *)std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](a2);
  if (*(void *)(a1 + 8))
  {
    BOOL result = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 8));
    uint64_t v3 = result;
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  }
  a2[1] = v3;
  if (a2[1]) {
    *a2 = *(void *)a1;
  }
  return result;
}

BOOL HSMapper::alive(HSMapper *this)
{
  char v1 = (HSUtil::Connection *)std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)this + 16);
  return HSUtil::Connection::status(v1) == 1;
}

uint64_t HSMapper::async(HSMapper *this)
{
  return *((unsigned char *)this + 40) & 1;
}

id proxyFn1(HSProxy *a1, objc_selector *a2, objc_object *a3)
{
  id location = 0;
  objc_storeStrong(&location, a1);
  uint64_t v10 = a2;
  id v9 = 0;
  objc_storeStrong(&v9, a3);
  std::weak_ptr<HSMapper>::lock((uint64_t)location + 16, v8);
  if (std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::operator BOOL[abi:ne180100]((uint64_t)v8))
  {
    uint64_t v3 = (HSMapper *)std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)v8);
    id v12 = HSMapper::send(v3, *((void **)location + 1), v10, v9, 0, 0);
  }
  else
  {
    id v12 = 0;
  }
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v8);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(&location, 0);
  uint64_t v4 = v12;

  return v4;
}

uint64_t std::weak_ptr<HSMapper>::~weak_ptr(uint64_t a1)
{
  return a1;
}

void HSMapper::HSMapper(HSMapper *this)
{
}

{
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](this);
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100]((void *)this + 2);
  HSMapper::Config::Config((HSMapper::Config *)((char *)this + 32));
  HSMapper::Maps::Maps((HSMapper::Maps *)((char *)this + 80));
  HSMapper::{unnamed type#1}::HSMapper((void *)this + 27);
  HSMapper::{unnamed type#2}::HSMapper((void *)this + 38);
}

void std::shared_ptr<HSMapper>::shared_ptr[abi:ne180100]<HSMapper,void>(uint64_t *a1, uint64_t a2)
{
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  uint64_t v4 = a1;
  uint64_t v3 = a2;
  *a1 = a2;
  std::unique_ptr<HSMapper>::unique_ptr[abi:ne180100]<true,void>(&v2, v3);
  operator new();
}

void HSMapper::_init(uint64_t *a1, void *a2, void *a3, id obj, void *a5)
{
  uint64_t v10 = a1;
  id location[2] = a2;
  location[1] = a3;
  location[0] = 0;
  objc_storeStrong(location, obj);
  v8[6] = a5;
  uint64_t v5 = (HSMapper *)v10;
  std::weak_ptr<HSMapper>::operator=(v10, a2);
  HSMapper::Config::operator=((uint64_t)v5 + 32, (uint64_t)a5);
  std::weak_ptr<HSMapper>::weak_ptr<HSMapper,0>(v8, v5);
  HSMapper::_createConnectionConfig(v8, location[0], *((unsigned char *)v5 + 40) & 1, v11);
  HSUtil::Connection::New();
}

void sub_8E99C()
{
  _Unwind_Resume(v0);
}

void *std::weak_ptr<HSMapper>::weak_ptr<HSMapper,0>(void *a1, void *a2)
{
  return a1;
}

void sub_8EA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

HSMapper::Config *HSMapper::Config::Config(HSMapper::Config *this)
{
  return this;
}

{
  *(void *)this = 0;
  *((unsigned char *)this + 8) = 0;
  std::function<void ()(std::shared_ptr<HSMapper>)>::function[abi:ne180100]((uint64_t)this + 16);
  return this;
}

HSMapper::Maps *HSMapper::Maps::Maps(HSMapper::Maps *this)
{
  return this;
}

{
  HSMapper::Maps *result;

  *(void *)this = 0;
  std::unordered_map<unsigned long long,objc_object * {__strong}>::unordered_map[abi:ne180100]((uint64_t)this + 8);
  std::unordered_map<objc_object * {__strong},unsigned long long,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,std::allocator<std::pair<objc_object * const {__strong},unsigned long long>>>::unordered_map[abi:ne180100]((uint64_t)this + 48);
  std::unordered_map<unsigned long long,HSProxy * {__strong}>::unordered_map[abi:ne180100]((uint64_t)this + 88);
  BOOL result = this;
  *((_DWORD *)this + 32) = 0;
  return result;
}

void *HSMapper::{unnamed type#1}::HSMapper(void *a1)
{
  return a1;
}

{
  std::mutex::mutex[abi:ne180100](a1);
  std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::vector[abi:ne180100](a1 + 8);
  return a1;
}

void *HSMapper::{unnamed type#2}::HSMapper(void *a1)
{
  return a1;
}

{
  std::mutex::mutex[abi:ne180100](a1);
  HSUtil::Decoder::Decoder((HSUtil::Decoder *)(a1 + 8));
  return a1;
}

std::mutex *HSMapper::{unnamed type#1}::~HSMapper(std::mutex *a1)
{
  return a1;
}

{
  std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::~vector[abi:ne180100](&a1[1].__m_.__sig);
  std::mutex::~mutex(a1);
  return a1;
}

void HSMapper::Maps::~Maps(HSMapper::Maps *this)
{
}

{
  std::unordered_map<unsigned long long,HSProxy * {__strong}>::~unordered_map[abi:ne180100]((uint64_t)this + 88);
  std::unordered_map<objc_object * {__strong},unsigned long long,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,std::allocator<std::pair<objc_object * const {__strong},unsigned long long>>>::~unordered_map[abi:ne180100]((uint64_t)this + 48);
  std::unordered_map<unsigned long long,objc_object * {__strong}>::~unordered_map[abi:ne180100]((uint64_t)this + 8);
}

uint64_t std::function<void ()(std::shared_ptr<HSMapper>)>::function[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::__function::__value_func<void ()(std::shared_ptr<HSMapper>)>::__value_func[abi:ne180100](a1);
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::shared_ptr<HSMapper>)>::__value_func[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::shared_ptr<HSMapper>)>::__value_func[abi:ne180100](uint64_t result)
{
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t std::unordered_map<unsigned long long,objc_object * {__strong}>::unordered_map[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__hash_table(a1);
  return a1;
}

uint64_t std::unordered_map<objc_object * {__strong},unsigned long long,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,std::allocator<std::pair<objc_object * const {__strong},unsigned long long>>>::unordered_map[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::__hash_table<std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::__unordered_map_hasher<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,true>,std::__unordered_map_equal<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::equal_to<objc_object * {__strong}>,HSUtil::ObjectHasher,true>,std::allocator<std::__hash_value_type<objc_object * {__strong},unsigned long long>>>::__hash_table(a1);
  return a1;
}

uint64_t std::unordered_map<unsigned long long,HSProxy * {__strong}>::unordered_map[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::__hash_table<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>>>::__hash_table(a1);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__hash_table(uint64_t a1)
{
  return a1;
}

{
  float v3;
  int v4;
  uint64_t v5;

  uint64_t v5 = a1;
  std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> *>>>::unique_ptr[abi:ne180100]<true,void>((void *)a1);
  std::__compressed_pair<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>>::__compressed_pair[abi:ne180100]<true,void>((void *)(a1 + 16));
  uint64_t v4 = 0;
  std::__compressed_pair<unsigned long,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>>::__compressed_pair[abi:ne180100]<int,std::__default_init_tag>((void *)(a1 + 24), &v4);
  uint64_t v3 = 1.0;
  std::__compressed_pair<float,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>>::__compressed_pair[abi:ne180100]<float,std::__default_init_tag>((_DWORD *)(a1 + 32), &v3);
  return a1;
}

void *std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> *>>>::unique_ptr[abi:ne180100]<true,void>(void *a1)
{
  return a1;
}

{
  std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> *>>>::__compressed_pair[abi:ne180100]<std::__value_init_tag,std::__value_init_tag>(a1);
  return a1;
}

void *std::__compressed_pair<unsigned long,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>>::__compressed_pair[abi:ne180100]<int,std::__default_init_tag>(void *a1, int *a2)
{
  return a1;
}

{
  std::__compressed_pair_elem<unsigned long,0,false>::__compressed_pair_elem[abi:ne180100]<int,void>(a1, a2);
  std::__compressed_pair_elem<std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,1,true>::__compressed_pair_elem[abi:ne180100]((uint64_t)a1);
  return a1;
}

_DWORD *std::__compressed_pair<float,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>>::__compressed_pair[abi:ne180100]<float,std::__default_init_tag>(_DWORD *a1, float *a2)
{
  return a1;
}

{
  std::__compressed_pair_elem<float,0,false>::__compressed_pair_elem[abi:ne180100]<float,void>(a1, a2);
  std::__compressed_pair_elem<std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,1,true>::__compressed_pair_elem[abi:ne180100]((uint64_t)a1);
  return a1;
}

void *std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> *>>>::__compressed_pair[abi:ne180100]<std::__value_init_tag,std::__value_init_tag>(void *a1)
{
  return a1;
}

{
  std::__compressed_pair_elem<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> **,0,false>::__compressed_pair_elem[abi:ne180100](a1);
  std::__compressed_pair_elem<std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> *>>,1,false>::__compressed_pair_elem[abi:ne180100](a1 + 1);
  return a1;
}

void *std::__compressed_pair_elem<std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> *>>,1,false>::__compressed_pair_elem[abi:ne180100](void *a1)
{
  return a1;
}

void *std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> *>>::__bucket_list_deallocator[abi:ne180100](void *a1)
{
  return a1;
}

{
  int v3;
  void *v4;

  uint64_t v4 = a1;
  uint64_t v3 = 0;
  std::__compressed_pair<unsigned long,std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::__compressed_pair[abi:ne180100]<int,std::__default_init_tag>(a1, &v3);
  return a1;
}

uint64_t std::__compressed_pair_elem<std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,1,true>::__compressed_pair_elem[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::__unordered_map_hasher<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,true>,std::__unordered_map_equal<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::equal_to<objc_object * {__strong}>,HSUtil::ObjectHasher,true>,std::allocator<std::__hash_value_type<objc_object * {__strong},unsigned long long>>>::__hash_table(uint64_t a1)
{
  return a1;
}

{
  float v3;
  int v4;
  uint64_t v5;

  uint64_t v5 = a1;
  std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> *>>>::unique_ptr[abi:ne180100]<true,void>((void *)a1);
  std::__compressed_pair<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>>::__compressed_pair[abi:ne180100]<true,void>((void *)(a1 + 16));
  uint64_t v4 = 0;
  std::__compressed_pair<unsigned long,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>>::__compressed_pair[abi:ne180100]<int,std::__default_init_tag>((void *)(a1 + 24), &v4);
  uint64_t v3 = 1.0;
  std::__compressed_pair<float,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>>::__compressed_pair[abi:ne180100]<float,std::__default_init_tag>((_DWORD *)(a1 + 32), &v3);
  return a1;
}

void *std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> *>>>::unique_ptr[abi:ne180100]<true,void>(void *a1)
{
  return a1;
}

{
  std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> *>>>::__compressed_pair[abi:ne180100]<std::__value_init_tag,std::__value_init_tag>(a1);
  return a1;
}

void *std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> *>>>::__compressed_pair[abi:ne180100]<std::__value_init_tag,std::__value_init_tag>(void *a1)
{
  return a1;
}

{
  std::__compressed_pair_elem<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> **,0,false>::__compressed_pair_elem[abi:ne180100](a1);
  std::__compressed_pair_elem<std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> *>>,1,false>::__compressed_pair_elem[abi:ne180100](a1 + 1);
  return a1;
}

void *std::__compressed_pair_elem<std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> *>>,1,false>::__compressed_pair_elem[abi:ne180100](void *a1)
{
  return a1;
}

void *std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> *>>::__bucket_list_deallocator[abi:ne180100](void *a1)
{
  return a1;
}

{
  int v3;
  void *v4;

  uint64_t v4 = a1;
  uint64_t v3 = 0;
  std::__compressed_pair<unsigned long,std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::__compressed_pair[abi:ne180100]<int,std::__default_init_tag>(a1, &v3);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>>>::__hash_table(uint64_t a1)
{
  return a1;
}

{
  float v3;
  int v4;
  uint64_t v5;

  uint64_t v5 = a1;
  std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> *>>>::unique_ptr[abi:ne180100]<true,void>((void *)a1);
  std::__compressed_pair<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>>::__compressed_pair[abi:ne180100]<true,void>((void *)(a1 + 16));
  uint64_t v4 = 0;
  std::__compressed_pair<unsigned long,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>>::__compressed_pair[abi:ne180100]<int,std::__default_init_tag>((void *)(a1 + 24), &v4);
  uint64_t v3 = 1.0;
  std::__compressed_pair<float,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>>::__compressed_pair[abi:ne180100]<float,std::__default_init_tag>((_DWORD *)(a1 + 32), &v3);
  return a1;
}

void *std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> *>>>::unique_ptr[abi:ne180100]<true,void>(void *a1)
{
  return a1;
}

{
  std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> *>>>::__compressed_pair[abi:ne180100]<std::__value_init_tag,std::__value_init_tag>(a1);
  return a1;
}

void *std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> *>>>::__compressed_pair[abi:ne180100]<std::__value_init_tag,std::__value_init_tag>(void *a1)
{
  return a1;
}

{
  std::__compressed_pair_elem<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> **,0,false>::__compressed_pair_elem[abi:ne180100](a1);
  std::__compressed_pair_elem<std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> *>>,1,false>::__compressed_pair_elem[abi:ne180100](a1 + 1);
  return a1;
}

void *std::__compressed_pair_elem<std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> *>>,1,false>::__compressed_pair_elem[abi:ne180100](void *a1)
{
  return a1;
}

void *std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> *>>::__bucket_list_deallocator[abi:ne180100](void *a1)
{
  return a1;
}

{
  int v3;
  void *v4;

  uint64_t v4 = a1;
  uint64_t v3 = 0;
  std::__compressed_pair<unsigned long,std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::__compressed_pair[abi:ne180100]<int,std::__default_init_tag>(a1, &v3);
  return a1;
}

void *std::mutex::mutex[abi:ne180100](void *a1)
{
  return a1;
}

{
  *a1 = 850045863;
  memset(a1 + 1, 0, 0x38uLL);
  return a1;
}

void *std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::vector[abi:ne180100](void *a1)
{
  return a1;
}

{
  *a1 = 0;
  a1[1] = 0;
  std::__compressed_pair<HSUtil::Encoder::ContainerRecord *>::__compressed_pair[abi:ne180100]<decltype(nullptr),std::__default_init_tag>(a1 + 2);
  return a1;
}

void sub_8F7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

uint64_t *std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::~vector[abi:ne180100](uint64_t *a1)
{
  return a1;
}

{
  uint64_t *v3[2];

  v3[1] = a1;
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](v3, (uint64_t)a1);
  std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::__destroy_vector::operator()[abi:ne180100](v3);
  return a1;
}

void std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::__destroy_vector::operator()[abi:ne180100](uint64_t **a1)
{
  if (**a1)
  {
    std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::__clear[abi:ne180100](*a1);
    std::vector<HSUtil::CoderKey const*>::__annotate_delete[abi:ne180100]();
    std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
    uint64_t v4 = v1;
    uint64_t v3 = (void *)**a1;
    uint64_t v2 = std::vector<HSUtil::CoderKey const*>::capacity[abi:ne180100](*a1);
    std::allocator_traits<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>>::deallocate[abi:ne180100](v4, v3, v2);
  }
}

uint64_t std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::__clear[abi:ne180100](uint64_t *a1)
{
  return std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1);
}

void std::allocator_traits<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

uint64_t std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v5 = result;
  for (uint64_t i = *(void *)(result + 8); a2 != i; i -= 8)
  {
    std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
    uint64_t v4 = v2;
    std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
    BOOL result = std::allocator_traits<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>>::destroy[abi:ne180100]<std::unique_ptr<HSUtil::EncoderBuf>,void>(v4, v3);
  }
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t std::allocator_traits<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>>::destroy[abi:ne180100]<std::unique_ptr<HSUtil::EncoderBuf>,void>(uint64_t a1, uint64_t a2)
{
  return std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>::destroy[abi:ne180100](a1, a2);
}

uint64_t std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return std::unique_ptr<HSUtil::EncoderBuf>::~unique_ptr[abi:ne180100](a2);
}

uint64_t std::unique_ptr<HSUtil::EncoderBuf>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<HSUtil::EncoderBuf>::reset[abi:ne180100](a1, 0);
  return a1;
}

void std::unique_ptr<HSUtil::EncoderBuf>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  uint64_t v5 = *v2;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    std::default_delete<HSUtil::EncoderBuf>::operator()[abi:ne180100](v4, v5);
  }
}

void std::default_delete<HSUtil::EncoderBuf>::operator()[abi:ne180100](uint64_t a1, HSUtil::EncoderBuf *a2)
{
  if (a2)
  {
    HSUtil::EncoderBuf::~EncoderBuf(a2);
    operator delete();
  }
}

void std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

uint64_t std::unordered_map<unsigned long long,HSProxy * {__strong}>::~unordered_map[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::__hash_table<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>>>::~__hash_table(a1);
  return a1;
}

uint64_t std::unordered_map<objc_object * {__strong},unsigned long long,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,std::allocator<std::pair<objc_object * const {__strong},unsigned long long>>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::__hash_table<std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::__unordered_map_hasher<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,true>,std::__unordered_map_equal<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::equal_to<objc_object * {__strong}>,HSUtil::ObjectHasher,true>,std::allocator<std::__hash_value_type<objc_object * {__strong},unsigned long long>>>::~__hash_table(a1);
  return a1;
}

uint64_t std::unordered_map<unsigned long long,objc_object * {__strong}>::~unordered_map[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::~__hash_table(a1);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>>>::~__hash_table(uint64_t a1)
{
  return a1;
}

{
  void **v1;

  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  std::__hash_table<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>>>::__deallocate_node(a1, *v1);
  std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> *>>>::~unique_ptr[abi:ne180100](a1);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>>>::__deallocate_node(uint64_t a1, void *a2)
{
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v7 = v2;
  while (a2)
  {
    id v6 = (void *)*a2;
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    uint64_t v5 = (void *)v3;
    std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100](v3);
    std::__hash_key_value_types<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>::__get_ptr[abi:ne180100]();
    std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *>>>::destroy[abi:ne180100]<std::pair<unsigned long long const,HSProxy * {__strong}>,void,void>(v7, v4);
    std::__destroy_at[abi:ne180100]<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>,0>((uint64_t)v5);
    std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *>>>::deallocate[abi:ne180100](v7, v5, 1);
    a2 = v6;
  }
}

uint64_t std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> *>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> *>>>::reset[abi:ne180100]();
  return a1;
}

uint64_t std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *>>>::destroy[abi:ne180100]<std::pair<unsigned long long const,HSProxy * {__strong}>,void,void>(uint64_t a1, uint64_t a2)
{
  return std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,HSProxy * {__strong}>,0>(a2);
}

void std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *>>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,HSProxy * {__strong}>,0>(uint64_t a1)
{
  return std::pair<unsigned long long const,HSProxy * {__strong}>::~pair(a1);
}

uint64_t std::pair<unsigned long long const,HSProxy * {__strong}>::~pair(uint64_t a1)
{
  return a1;
}

{
  objc_storeStrong((id *)(a1 + 8), 0);
  return a1;
}

void std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> *>>>::reset[abi:ne180100]()
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  uint64_t v3 = *v0;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v1 = 0;
  if (v3)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> *>>::operator()[abi:ne180100](v2, v3);
  }
}

void std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> *>>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  uint64_t v4 = v2;
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  std::allocator_traits<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> *>>::deallocate[abi:ne180100](v4, a2, *v3);
}

void std::allocator_traits<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> *>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> *>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

uint64_t std::__hash_table<std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::__unordered_map_hasher<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,true>,std::__unordered_map_equal<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::equal_to<objc_object * {__strong}>,HSUtil::ObjectHasher,true>,std::allocator<std::__hash_value_type<objc_object * {__strong},unsigned long long>>>::~__hash_table(uint64_t a1)
{
  return a1;
}

{
  void **v1;

  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  std::__hash_table<std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::__unordered_map_hasher<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,true>,std::__unordered_map_equal<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::equal_to<objc_object * {__strong}>,HSUtil::ObjectHasher,true>,std::allocator<std::__hash_value_type<objc_object * {__strong},unsigned long long>>>::__deallocate_node(a1, *v1);
  std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> *>>>::~unique_ptr[abi:ne180100](a1);
  return a1;
}

void std::__hash_table<std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::__unordered_map_hasher<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,true>,std::__unordered_map_equal<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::equal_to<objc_object * {__strong}>,HSUtil::ObjectHasher,true>,std::allocator<std::__hash_value_type<objc_object * {__strong},unsigned long long>>>::__deallocate_node(uint64_t a1, void *a2)
{
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v7 = v2;
  while (a2)
  {
    id v6 = (void *)*a2;
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    uint64_t v5 = (void *)v3;
    std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100](v3);
    std::__hash_key_value_types<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>::__get_ptr[abi:ne180100]();
    std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *>>>::destroy[abi:ne180100]<std::pair<objc_object * const {__strong},unsigned long long>,void,void>(v7, v4);
    std::__destroy_at[abi:ne180100]<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>,0>((uint64_t)v5);
    std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *>>>::deallocate[abi:ne180100](v7, v5, 1);
    a2 = v6;
  }
}

uint64_t std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> *>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> *>>>::reset[abi:ne180100]();
  return a1;
}

void std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *>>>::destroy[abi:ne180100]<std::pair<objc_object * const {__strong},unsigned long long>,void,void>(uint64_t a1, id *a2)
{
}

void std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *>>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::__destroy_at[abi:ne180100]<std::pair<objc_object * const {__strong},unsigned long long>,0>(id *a1)
{
}

void std::allocator<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> *>>>::reset[abi:ne180100]()
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  uint64_t v3 = *v0;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v1 = 0;
  if (v3)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> *>>::operator()[abi:ne180100](v2, v3);
  }
}

void std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> *>>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  uint64_t v4 = v2;
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  std::allocator_traits<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> *>>::deallocate[abi:ne180100](v4, a2, *v3);
}

void std::allocator_traits<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> *>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> *>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::~__hash_table(uint64_t a1)
{
  return a1;
}

{
  void **v1;

  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__deallocate_node(a1, *v1);
  std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> *>>>::~unique_ptr[abi:ne180100](a1);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__deallocate_node(uint64_t a1, void *a2)
{
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v7 = v2;
  while (a2)
  {
    id v6 = (void *)*a2;
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    uint64_t v5 = (void *)v3;
    std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100](v3);
    std::__hash_key_value_types<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>::__get_ptr[abi:ne180100]();
    std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *>>>::destroy[abi:ne180100]<std::pair<unsigned long long const,HSProxy * {__strong}>,void,void>(v7, v4);
    std::__destroy_at[abi:ne180100]<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>,0>((uint64_t)v5);
    std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::deallocate[abi:ne180100](v7, v5, 1);
    a2 = v6;
  }
}

uint64_t std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> *>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> *>>>::reset[abi:ne180100]();
  return a1;
}

void std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> *>>>::reset[abi:ne180100]()
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  uint64_t v3 = *v0;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v1 = 0;
  if (v3)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> *>>::operator()[abi:ne180100](v2, v3);
  }
}

void std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> *>>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  uint64_t v4 = v2;
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  std::allocator_traits<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> *>>::deallocate[abi:ne180100](v4, a2, *v3);
}

void std::allocator_traits<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> *>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> *>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void sub_9098C(uint64_t a1, int a2)
{
  *(void *)(v2 - 32) = a1;
  *(_DWORD *)(v2 - 36) = a2;
  std::unique_ptr<HSMapper>::~unique_ptr[abi:ne180100](v2 - 24);
  _Unwind_Resume(*(_Unwind_Exception **)(v2 - 32));
}

void *std::unique_ptr<HSMapper>::unique_ptr[abi:ne180100]<true,void>(void *a1, uint64_t a2)
{
  return a1;
}

{
  void v4[2];

  v4[1] = a1;
  v4[0] = a2;
  std::__compressed_pair<HSUtil::Decoder::Callbacks *,std::default_delete<HSUtil::Decoder::Callbacks>>::__compressed_pair[abi:ne180100]<HSUtil::Decoder::Callbacks *&,std::__value_init_tag>(a1, v4);
  return a1;
}

void *std::__shared_ptr_pointer<HSMapper *,std::shared_ptr<HSMapper>::__shared_ptr_default_delete<HSMapper,HSMapper>,std::allocator<HSMapper>>::__shared_ptr_pointer[abi:ne180100](void *a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t v4;
  void v5[2];

  v5[1] = a1;
  v5[0] = a2;
  std::__shared_weak_count::__shared_weak_count[abi:ne180100]((uint64_t)a1, 0);
  *a1 = off_142028;
  std::__compressed_pair<unsigned long,std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *>>::__compressed_pair[abi:ne180100]<unsigned long &,std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> * const&>(&v4, v5);
  std::__compressed_pair<unsigned long,std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *>>::__compressed_pair[abi:ne180100]<unsigned long &,std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> * const&>(a1 + 3, &v4);
  return a1;
}

uint64_t std::unique_ptr<HSMapper>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<HSMapper>::reset[abi:ne180100](a1, 0);
  return a1;
}

void sub_90B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, uint64_t a10, int a11, int a12, _Unwind_Exception *exception_object)
{
}

std::__shared_weak_count *std::__shared_ptr_pointer<HSMapper *,std::shared_ptr<HSMapper>::__shared_ptr_default_delete<HSMapper,HSMapper>,std::allocator<HSMapper>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  return a1;
}

{
  std::__shared_weak_count::~__shared_weak_count(a1);
  return a1;
}

void std::__shared_ptr_pointer<HSMapper *,std::shared_ptr<HSMapper>::__shared_ptr_default_delete<HSMapper,HSMapper>,std::allocator<HSMapper>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
}

void std::__shared_ptr_pointer<HSMapper *,std::shared_ptr<HSMapper>::__shared_ptr_default_delete<HSMapper,HSMapper>,std::allocator<HSMapper>>::__on_zero_shared()
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  uint64_t v2 = v0;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  std::default_delete<HSMapper>::operator()[abi:ne180100](v2, *v1);
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
}

uint64_t std::__shared_ptr_pointer<HSMapper *,std::shared_ptr<HSMapper>::__shared_ptr_default_delete<HSMapper,HSMapper>,std::allocator<HSMapper>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  return v2;
}

void std::__shared_ptr_pointer<HSMapper *,std::shared_ptr<HSMapper>::__shared_ptr_default_delete<HSMapper,HSMapper>,std::allocator<HSMapper>>::__on_zero_shared_weak(uint64_t a1)
{
  uint64_t v3 = a1;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v2);
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  std::allocator<std::__shared_ptr_pointer<HSMapper *,std::shared_ptr<HSMapper>::__shared_ptr_default_delete<HSMapper,HSMapper>,std::allocator<HSMapper>>>::deallocate[abi:ne180100]((uint64_t)&v2, v1, 1);
}

void std::default_delete<HSMapper>::operator()[abi:ne180100](uint64_t a1, HSMapper *a2)
{
  if (a2)
  {
    HSMapper::~HSMapper(a2);
    operator delete();
  }
}

void HSMapper::~HSMapper(HSMapper *this)
{
}

{
  NSObject *log;
  os_log_type_t type;
  uint8_t v4[7];
  char v5;
  id location[3];

  location[1] = this;
  id location[2] = this;
  location[0] = &_os_log_default;
  uint64_t v5 = 2;
  if (os_log_type_enabled((os_log_t)location[0], OS_LOG_TYPE_DEBUG))
  {
    log = location[0];
    os_log_type_t type = v5;
    __os_log_helper_16_0_0(v4);
    _os_log_debug_impl(&def_411C8, log, type, "~HSMapper", v4, 2u);
  }
  objc_storeStrong(location, 0);
  HSMapper::{unnamed type#2}::~HSMapper((std::mutex *)((char *)this + 304));
  HSMapper::{unnamed type#1}::~HSMapper((std::mutex *)((char *)this + 216));
  HSMapper::Maps::~Maps((HSMapper::Maps *)((char *)this + 80));
  HSMapper::Config::~Config((id *)this + 4);
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  std::weak_ptr<HSMapper>::~weak_ptr((uint64_t)this);
}

std::mutex *HSMapper::{unnamed type#2}::~HSMapper(std::mutex *a1)
{
  return a1;
}

{
  HSUtil::Decoder::~Decoder((HSUtil::Decoder *)&a1[1]);
  std::mutex::~mutex(a1);
  return a1;
}

void std::allocator<std::__shared_ptr_pointer<HSMapper *,std::shared_ptr<HSMapper>::__shared_ptr_default_delete<HSMapper,HSMapper>,std::allocator<HSMapper>>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::unique_ptr<HSMapper>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  uint64_t v5 = *v2;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    std::default_delete<HSMapper>::operator()[abi:ne180100](v4, v5);
  }
}

uint64_t *std::weak_ptr<HSMapper>::operator=(uint64_t *a1, void *a2)
{
  v4[3] = (uint64_t)a1;
  unint64_t v4[2] = (uint64_t)a2;
  std::weak_ptr<HSMapper>::weak_ptr<HSMapper,0>(v4, a2);
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::swap[abi:ne180100](v4, a1);
  std::weak_ptr<HSMapper>::~weak_ptr((uint64_t)v4);
  return a1;
}

uint64_t HSMapper::Config::operator=(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)a2);
  objc_storeWeak((id *)a1, WeakRetained);

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8) & 1;
  std::function<void ()(std::shared_ptr<HSMapper>)>::operator=(a1 + 16, a2 + 16);
  return a1;
}

void HSUtil::Connection::New()
{
}

void HSMapper::_createConnectionConfig(void *a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  id location[2] = a4;
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  char v16 = a3 & 1;
  *a4 = (uint64_t)location[0];
  std::weak_ptr<HSMapper>::weak_ptr<HSMapper,0>(v15, a1);
  std::function<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::function<HSMapper::_createConnectionConfig(std::weak_ptr<std::function<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::function>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&)#1},void>(a4 + 1, (uint64_t)v15);
  std::weak_ptr<HSMapper>::weak_ptr<HSMapper,0>(v14, a1);
  std::function<void ()(std::shared_ptr<HSUtil::Connection>)>::function<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},void>(a4 + 5, (uint64_t)v14);
  if (v16)
  {
    int v12 = 1;
    std::chrono::duration<long long,std::ratio<1l,1l>>::duration[abi:ne180100]<int,0>(&v13, &v12);
  }
  else
  {
    int v10 = -1;
    std::chrono::duration<long long,std::ratio<1l,1l>>::duration[abi:ne180100]<int,0>(&v11, &v10);
    std::chrono::duration<long long,std::ratio<1l,1000l>>::duration[abi:ne180100]<long long,std::ratio<1l,1l>,0>(&v13, (uint64_t)&v11);
  }
  std::chrono::duration<long long,std::ratio<1l,1000l>>::duration[abi:ne180100]<long long,std::ratio<1l,1l>,0>(a4 + 9, (uint64_t)&v13);
  if (v16)
  {
    int v8 = 3;
    std::chrono::duration<long long,std::ratio<1l,1l>>::duration[abi:ne180100]<int,0>(&v9, &v8);
  }
  else
  {
    int v7 = -1;
    std::chrono::duration<long long,std::ratio<1l,1l>>::duration[abi:ne180100]<int,0>(&v9, &v7);
  }
  std::chrono::duration<long long,std::ratio<1l,1000000l>>::duration[abi:ne180100]<long long,std::ratio<1l,1l>,0>(a4 + 10, (uint64_t)&v9);
  HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}::~shared_ptr((uint64_t)v14);
  HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}::~shared_ptr((uint64_t)v15);
  objc_storeStrong(location, 0);
}

void sub_91418(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id *location, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  *(void *)(v21 - 56) = a1;
  *(_DWORD *)(v21 - 6objc_storeStrong(&location, 0) = a2;
  HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}::~shared_ptr(v21 - 48);
  if (a20) {
    objc_storeStrong(location, 0);
  }
  objc_storeStrong((id *)(v21 - 24), 0);
  _Unwind_Resume(*(_Unwind_Exception **)(v21 - 56));
}

void HSUtil::Connection::Config::~Config(id *this)
{
}

{
  std::function<void ()(std::shared_ptr<HSUtil::Connection>)>::~function((uint64_t)(this + 5));
  std::function<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::~function((uint64_t)(this + 1));
  objc_storeStrong(this, 0);
}

uint64_t HSMapper::_idForObject(HSMapper *this, objc_object *a2)
{
  uint64_t v13 = this;
  id location = 0;
  objc_storeStrong(&location, a2);
  id v6 = v13;
  std::unique_lock<HSMapper::Maps>::unique_lock[abi:ne180100]((uint64_t)v11, (uint64_t)v13 + 80);
  uint64_t v10 = std::unordered_map<objc_object * {__strong},unsigned long long,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,std::allocator<std::pair<objc_object * const {__strong},unsigned long long>>>::find[abi:ne180100]((uint64_t)v6 + 128, &location);
  uint64_t v9 = std::unordered_map<unsigned long long,objc_object * {__strong}>::end[abi:ne180100]();
  if (std::operator!=[abi:ne180100](&v10, &v9))
  {
    std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>>::operator->[abi:ne180100]();
    uint64_t v14 = *(void *)(v2 + 8);
    int v8 = 1;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v7 = (*((void *)v6 + 10))++;
    std::unordered_map<unsigned long long,objc_object * {__strong}>::emplace[abi:ne180100]<unsigned long long &,objc_object * {__strong}&>((uint64_t)v6 + 88, &v7, &location);
    if ((v3 & 1) == 0) {
      __assert_rtn("_idForObject", "HSRemoteObject.mm", 415, "br");
    }
    std::unordered_map<objc_object * {__strong},unsigned long long,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,std::allocator<std::pair<objc_object * const {__strong},unsigned long long>>>::emplace[abi:ne180100]<objc_object * {__strong}&,unsigned long long &>((uint64_t)v6 + 128, &location, &v7);
    if ((v4 & 1) == 0) {
      __assert_rtn("_idForObject", "HSRemoteObject.mm", 417, "br");
    }
    uint64_t v14 = v7;
    int v8 = 1;
  }
  std::unique_lock<HSMapper::Maps>::~unique_lock[abi:ne180100]((uint64_t)v11);
  objc_storeStrong(&location, 0);
  return v14;
}

uint64_t HSUtil::Decoder::setCallbacks(HSUtil::Decoder *this, const HSUtil::Decoder::Callbacks *a2)
{
  uint64_t result = HSUtil::Coder::fatalError(this);
  if ((result & 1) == 0)
  {
    if (!std::unique_ptr<HSUtil::Decoder::Callbacks>::operator BOOL[abi:ne180100]()) {
      std::make_unique[abi:ne180100]<HSUtil::Decoder::Callbacks,HSUtil::Decoder::Callbacks const&>();
    }
    uint64_t v3 = std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
    return HSUtil::Decoder::Callbacks::operator=(v3, (uint64_t)a2);
  }
  return result;
}

void *std::function<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::function<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},void>(void *a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t v4;

  char v4 = a2;
  std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::__value_func[abi:ne180100]<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},0>(a1, (uint64_t)&v4);
  return a1;
}

void HSUtil::Connection::start(HSUtil::Connection *this)
{
  if (*((_DWORD *)this + 56)) {
    __assert_rtn("start", "HSConnection.h", 71, "_state.status == Status::Idle");
  }
  *((_DWORD *)this + 56) = 1;
  _ZNSt3__16threadC1IZN6HSUtil10Connection5startEvEUlvE_JEvEEOT_DpOT0_();
}

void sub_918A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, _Unwind_Exception *exception_object)
{
  std::thread::~thread((std::thread *)(v14 - 16));
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(std::shared_ptr<HSMapper>)>::operator=(uint64_t a1, uint64_t a2)
{
  std::function<void ()(std::shared_ptr<HSMapper>)>::function((uint64_t)v4, a2);
  std::function<void ()(std::shared_ptr<HSMapper>)>::swap((uint64_t)v4, a1);
  std::function<void ()(std::shared_ptr<HSMapper>)>::~function((uint64_t)v4);
  return a1;
}

uint64_t std::function<void ()(std::shared_ptr<HSMapper>)>::function(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  std::__function::__value_func<void ()(std::shared_ptr<HSMapper>)>::__value_func[abi:ne180100](a1, a2);
  return a1;
}

void std::function<void ()(std::shared_ptr<HSMapper>)>::swap(uint64_t a1, uint64_t a2)
{
}

uint64_t std::function<void ()(std::shared_ptr<HSMapper>)>::~function(uint64_t a1)
{
  return a1;
}

{
  std::__function::__value_func<void ()(std::shared_ptr<HSMapper>)>::~__value_func[abi:ne180100](a1);
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::shared_ptr<HSMapper>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t v2;

  if (*(void *)(a2 + 24))
  {
    if (*(void *)(a2 + 24) == a2)
    {
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      *(void *)(a1 + 24) = v2;
      (*(void (**)(void, void))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), *(void *)(a1 + 24));
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 16))(*(void *)(a2 + 24));
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::__function::__value_func<void ()(std::shared_ptr<HSMapper>)>::swap[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    if (*(void *)(a1 + 24) == a1 && *(void *)(a2 + 24) == a2)
    {
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      uint64_t v15 = v2;
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24), v2);
      (*(void (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24));
      *(void *)(a1 + 24) = 0;
      uint64_t v13 = *(void *)(a2 + 24);
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 24))(v13, v3);
      (*(void (**)(void))(**(void **)(a2 + 24) + 32))(*(void *)(a2 + 24));
      *(void *)(a2 + 24) = 0;
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      *(void *)(a1 + 24) = v4;
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 24))(v15, v5);
      (*(void (**)(uint64_t))(*(void *)v15 + 32))(v15);
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      *(void *)(a2 + 24) = v6;
    }
    else if (*(void *)(a1 + 24) == a1)
    {
      uint64_t v12 = *(void *)(a1 + 24);
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 24))(v12, v7);
      (*(void (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24));
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      *(void *)(a2 + 24) = v8;
    }
    else if (*(void *)(a2 + 24) == a2)
    {
      uint64_t v11 = *(void *)(a2 + 24);
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 24))(v11, v9);
      (*(void (**)(void))(**(void **)(a2 + 24) + 32))(*(void *)(a2 + 24));
      *(void *)(a2 + 24) = *(void *)(a1 + 24);
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      *(void *)(a1 + 24) = v10;
    }
    else
    {
      std::swap[abi:ne180100]<HSUtil::Encoder::ContainerRecord *>((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
    }
  }
}

void sub_91F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(std::shared_ptr<HSMapper>)>::~__value_func[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  if (*(void *)(a1 + 24) == a1)
  {
    (*(void (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24));
  }
  else if (*(void *)(a1 + 24))
  {
    (*(void (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
  }
  return a1;
}

HSUtil::Connection *HSUtil::Connection::Connection(HSUtil::Connection *this)
{
  return this;
}

{
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](this);
  HSUtil::Connection::Config::Config((HSUtil::Connection *)((char *)this + 16));
  *((void *)this + 13) = 0;
  HSUtil::Connection::{unnamed type#1}::Connection((uint64_t)this + 112);
  HSUtil::Connection::{unnamed type#2}::Connection((void *)this + 34);
  HSUtil::Connection::Mailbox::Mailbox((HSUtil::Connection *)((char *)this + 352));
  HSUtil::Connection::Mailbox::Mailbox((HSUtil::Connection *)((char *)this + 560));
  return this;
}

void std::shared_ptr<HSUtil::Connection>::shared_ptr[abi:ne180100]<HSUtil::Connection,void>(uint64_t *a1, uint64_t a2)
{
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  uint64_t v4 = a1;
  uint64_t v3 = a2;
  *a1 = a2;
  std::unique_ptr<HSUtil::Connection>::unique_ptr[abi:ne180100]<true,void>(&v2, v3);
  operator new();
}

uint64_t HSUtil::Connection::_init(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v25 = a1;
  BOOL v24 = a2;
  uint64_t v23 = a3;
  os_log_t v22 = a4;
  if (!*a4) {
    __assert_rtn("_init", "HSConnection.h", 209, "config.handlerQueue");
  }
  if (!std::function<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::operator BOOL[abi:ne180100]((uint64_t)(v22 + 1))) {
    __assert_rtn("_init", "HSConnection.h", 210, "config.messageHandler");
  }
  std::weak_ptr<HSMapper>::operator=((uint64_t *)a1, a2);
  HSUtil::Connection::Config::operator=(a1 + 16, (uint64_t)v22);
  id location = 0;
  int relative_priority_ptr = 0;
  dispatch_qos_class_t qos_class = QOS_CLASS_UNSPECIFIED;
  dispatch_qos_class_t qos_class = dispatch_queue_get_qos_class(*(dispatch_queue_t *)(a1 + 16), &relative_priority_ptr);
  if (qos_class)
  {
    uint64_t v4 = dispatch_queue_attr_make_with_qos_class((dispatch_queue_attr_t)location, qos_class, relative_priority_ptr);
    id v5 = location;
    id location = v4;
  }
  dispatch_queue_t v6 = dispatch_queue_create("Connection._asyncSendQueue", (dispatch_queue_attr_t)location);
  uint64_t v7 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = v6;

  char v18 = 0;
  char v15 = 0;
  char v16 = 1;
  int v13 = -1;
  std::chrono::duration<long long,std::ratio<1l,1l>>::duration[abi:ne180100]<int,0>(&v14, &v13);
  std::chrono::duration<long long,std::ratio<1l,1000000l>>::duration[abi:ne180100]<long long,std::ratio<1l,1l>,0>(v17, (uint64_t)&v14);
  v17[1] = *(void *)(a1 + 88);
  char v18 = HSUtil::ConfigureSocket() & 1;
  if (v18)
  {
    std::make_shared[abi:ne180100]<HSUtil::FileDescriptor,HSUtil::FileDescriptor,void>(v23, v11);
    std::mutex::lock((std::mutex *)(a1 + 112));
    std::shared_ptr<HSUtil::FileDescriptor>::operator=[abi:ne180100]((uint64_t *)(a1 + 232), v11);
    std::mutex::unlock((std::mutex *)(a1 + 112));
    std::mutex::lock((std::mutex *)(a1 + 272));
    std::shared_ptr<HSUtil::FileDescriptor>::operator=[abi:ne180100]((uint64_t *)(a1 + 336), v11);
    std::mutex::unlock((std::mutex *)(a1 + 272));
    char v26 = 1;
    int v12 = 1;
    std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v11);
  }
  else
  {
    char v26 = 0;
    int v12 = 1;
  }
  objc_storeStrong(&location, 0);
  return v26 & 1;
}

void sub_92434(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, HSUtil::Connection::Mailbox *a12, uint64_t a13)
{
  *(void *)(v13 - std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a9 + 16) = a1;
  *(_DWORD *)(v13 - 2objc_storeStrong(&location, 0) = a2;
  std::weak_ptr<HSMapper>::~weak_ptr(a13);
  _Unwind_Resume(*(_Unwind_Exception **)(v13 - 16));
}

HSUtil::Connection::Config *HSUtil::Connection::Config::Config(HSUtil::Connection::Config *this)
{
  return this;
}

{
  int v3;
  void v4[3];
  int v5;
  void v6[2];

  v6[1] = this;
  *(void *)this = 0;
  std::function<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::function[abi:ne180100]((uint64_t)this + 8);
  std::function<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::function[abi:ne180100]((uint64_t)this + 40);
  id v5 = -1;
  std::chrono::duration<long long,std::ratio<1l,1l>>::duration[abi:ne180100]<int,0>(v6, &v5);
  std::chrono::duration<long long,std::ratio<1l,1000000l>>::duration[abi:ne180100]<long long,std::ratio<1l,1l>,0>((uint64_t *)this + 9, (uint64_t)v6);
  uint64_t v3 = -1;
  std::chrono::duration<long long,std::ratio<1l,1l>>::duration[abi:ne180100]<int,0>(v4, &v3);
  std::chrono::duration<long long,std::ratio<1l,1000000l>>::duration[abi:ne180100]<long long,std::ratio<1l,1l>,0>((uint64_t *)this + 10, (uint64_t)v4);
  return this;
}

uint64_t HSUtil::Connection::{unnamed type#1}::Connection(uint64_t a1)
{
  return a1;
}

{
  uint64_t result;

  std::mutex::mutex[abi:ne180100]((void *)a1);
  std::condition_variable::condition_variable[abi:ne180100]((void *)(a1 + 64));
  *(_DWORD *)(a1 + 112) = 0;
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100]((void *)(a1 + 120));
  uint64_t result = a1;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  return result;
}

void *HSUtil::Connection::{unnamed type#2}::Connection(void *a1)
{
  return a1;
}

{
  std::mutex::mutex[abi:ne180100](a1);
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](a1 + 8);
  return a1;
}

HSUtil::Connection::Mailbox *HSUtil::Connection::Mailbox::Mailbox(HSUtil::Connection::Mailbox *this)
{
  return this;
}

{
  std::mutex::mutex[abi:ne180100](this);
  std::condition_variable::condition_variable[abi:ne180100]((void *)this + 8);
  *((unsigned char *)this + 112) = 0;
  *((unsigned char *)this + 113) = 0;
  *((void *)this + 15) = 0;
  HSUtil::Connection::Mailbox::{unnamed type#1}::Mailbox((uint64_t)this + 128);
  return this;
}

void HSUtil::Connection::Mailbox::~Mailbox(HSUtil::Connection::Mailbox *this)
{
}

{
  HSUtil::Connection::Mailbox::{unnamed type#1}::~Mailbox((uint64_t)this + 128);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 64));
  std::mutex::~mutex((std::mutex *)this);
}

std::mutex *HSUtil::Connection::{unnamed type#2}::~Connection(std::mutex *a1)
{
  return a1;
}

{
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)&a1[1]);
  std::mutex::~mutex(a1);
  return a1;
}

uint64_t HSUtil::Connection::{unnamed type#1}::~Connection(uint64_t a1)
{
  return a1;
}

{
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a1 + 120);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 64));
  std::mutex::~mutex((std::mutex *)a1);
  return a1;
}

void sub_926A4(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location)
{
  *(void *)(v11 - 32) = a1;
  *(_DWORD *)(v11 - 36) = a2;
  std::function<void ()(std::shared_ptr<HSUtil::Connection>)>::~function((uint64_t)(location + 5));
  std::function<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::~function((uint64_t)(location + 1));
  objc_storeStrong(location, 0);
  _Unwind_Resume(*(_Unwind_Exception **)(v11 - 32));
}

uint64_t std::function<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::function[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::__function::__value_func<void ()(std::shared_ptr<HSMapper>)>::__value_func[abi:ne180100](a1);
  return a1;
}

void *std::chrono::duration<long long,std::ratio<1l,1l>>::duration[abi:ne180100]<int,0>(void *a1, int *a2)
{
  return a1;
}

uint64_t *std::chrono::duration<long long,std::ratio<1l,1000000l>>::duration[abi:ne180100]<long long,std::ratio<1l,1l>,0>(uint64_t *a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t v2;
  uint64_t *result;
  void v5[3];

  unint64_t v5[2] = a1;
  v5[1] = a2;
  v5[0] = std::chrono::duration_cast[abi:ne180100]<std::chrono::duration<long long,std::ratio<1l,1000000l>>,long long,std::ratio<1l,1l>,0>(a2);
  uint64_t v2 = std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)v5);
  uint64_t result = a1;
  *a1 = v2;
  return result;
}

uint64_t std::function<void ()(std::shared_ptr<HSUtil::Connection>)>::~function(uint64_t a1)
{
  return a1;
}

{
  std::__function::__value_func<void ()(std::shared_ptr<HSUtil::Connection>)>::~__value_func[abi:ne180100](a1);
  return a1;
}

uint64_t std::function<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::~function(uint64_t a1)
{
  return a1;
}

{
  std::__function::__value_func<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::~__value_func[abi:ne180100](a1);
  return a1;
}

uint64_t std::chrono::duration_cast[abi:ne180100]<std::chrono::duration<long long,std::ratio<1l,1000000l>>,long long,std::ratio<1l,1l>,0>(uint64_t a1)
{
  uint64_t v3 = a1;
  return std::chrono::__duration_cast<std::chrono::duration<long long,std::ratio<1l,1l>>,std::chrono::duration<long long,std::ratio<1l,1000000l>>,std::ratio<1000000l,1l>,false,true>::operator()[abi:ne180100]((uint64_t)&v2, a1);
}

uint64_t std::chrono::__duration_cast<std::chrono::duration<long long,std::ratio<1l,1l>>,std::chrono::duration<long long,std::ratio<1l,1000000l>>,std::ratio<1000000l,1l>,false,true>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v3[2] = a1;
  v3[1] = a2;
  v3[0] = 1000000
        * std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100](a2);
  std::__hash_const_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_const_iterator[abi:ne180100](&v4, v3);
  return v4;
}

uint64_t std::__function::__value_func<void ()(std::shared_ptr<HSUtil::Connection>)>::~__value_func[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  if (*(void *)(a1 + 24) == a1)
  {
    (*(void (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24));
  }
  else if (*(void *)(a1 + 24))
  {
    (*(void (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
  }
  return a1;
}

uint64_t std::__function::__value_func<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::~__value_func[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  if (*(void *)(a1 + 24) == a1)
  {
    (*(void (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24));
  }
  else if (*(void *)(a1 + 24))
  {
    (*(void (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
  }
  return a1;
}

void *std::condition_variable::condition_variable[abi:ne180100](void *a1)
{
  return a1;
}

{
  *a1 = 1018212795;
  memset(a1 + 1, 0, 0x28uLL);
  return a1;
}

void sub_92C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

uint64_t HSUtil::Connection::Mailbox::{unnamed type#1}::Mailbox(uint64_t a1)
{
  return a1;
}

{
  HSUtil::Buffer::Buffer((HSUtil::Buffer *)(a1 + 8));
  return a1;
}

uint64_t HSUtil::Connection::Mailbox::{unnamed type#1}::~Mailbox(uint64_t a1)
{
  return a1;
}

{
  HSUtil::Buffer::~Buffer((HSUtil::Buffer *)(a1 + 8));
  return a1;
}

void sub_92F24(uint64_t a1, int a2)
{
  *(void *)(v2 - 32) = a1;
  *(_DWORD *)(v2 - 36) = a2;
  std::unique_ptr<HSUtil::Connection>::~unique_ptr[abi:ne180100](v2 - 24);
  _Unwind_Resume(*(_Unwind_Exception **)(v2 - 32));
}

void *std::unique_ptr<HSUtil::Connection>::unique_ptr[abi:ne180100]<true,void>(void *a1, uint64_t a2)
{
  return a1;
}

{
  void v4[2];

  v4[1] = a1;
  v4[0] = a2;
  std::__compressed_pair<HSUtil::Decoder::Callbacks *,std::default_delete<HSUtil::Decoder::Callbacks>>::__compressed_pair[abi:ne180100]<HSUtil::Decoder::Callbacks *&,std::__value_init_tag>(a1, v4);
  return a1;
}

void *std::__shared_ptr_pointer<HSUtil::Connection *,std::shared_ptr<HSUtil::Connection>::__shared_ptr_default_delete<HSUtil::Connection,HSUtil::Connection>,std::allocator<HSUtil::Connection>>::__shared_ptr_pointer[abi:ne180100](void *a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t v4;
  void v5[2];

  v5[1] = a1;
  v5[0] = a2;
  std::__shared_weak_count::__shared_weak_count[abi:ne180100]((uint64_t)a1, 0);
  *a1 = off_1420A0;
  std::__compressed_pair<unsigned long,std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *>>::__compressed_pair[abi:ne180100]<unsigned long &,std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> * const&>(&v4, v5);
  std::__compressed_pair<unsigned long,std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *>>::__compressed_pair[abi:ne180100]<unsigned long &,std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> * const&>(a1 + 3, &v4);
  return a1;
}

uint64_t std::unique_ptr<HSUtil::Connection>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<HSUtil::Connection>::reset[abi:ne180100](a1, 0);
  return a1;
}

void sub_930E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, uint64_t a10, int a11, int a12, _Unwind_Exception *exception_object)
{
}

std::__shared_weak_count *std::__shared_ptr_pointer<HSUtil::Connection *,std::shared_ptr<HSUtil::Connection>::__shared_ptr_default_delete<HSUtil::Connection,HSUtil::Connection>,std::allocator<HSUtil::Connection>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  return a1;
}

void std::__shared_ptr_pointer<HSUtil::Connection *,std::shared_ptr<HSUtil::Connection>::__shared_ptr_default_delete<HSUtil::Connection,HSUtil::Connection>,std::allocator<HSUtil::Connection>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
}

void std::__shared_ptr_pointer<HSUtil::Connection *,std::shared_ptr<HSUtil::Connection>::__shared_ptr_default_delete<HSUtil::Connection,HSUtil::Connection>,std::allocator<HSUtil::Connection>>::__on_zero_shared()
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  uint64_t v2 = v0;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  std::default_delete<HSUtil::Connection>::operator()[abi:ne180100](v2, *v1);
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
}

uint64_t std::__shared_ptr_pointer<HSUtil::Connection *,std::shared_ptr<HSUtil::Connection>::__shared_ptr_default_delete<HSUtil::Connection,HSUtil::Connection>,std::allocator<HSUtil::Connection>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  return v2;
}

void std::__shared_ptr_pointer<HSUtil::Connection *,std::shared_ptr<HSUtil::Connection>::__shared_ptr_default_delete<HSUtil::Connection,HSUtil::Connection>,std::allocator<HSUtil::Connection>>::__on_zero_shared_weak(uint64_t a1)
{
  uint64_t v3 = a1;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v2);
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  std::allocator<std::__shared_ptr_pointer<HSUtil::Connection *,std::shared_ptr<HSUtil::Connection>::__shared_ptr_default_delete<HSUtil::Connection,HSUtil::Connection>,std::allocator<HSUtil::Connection>>>::deallocate[abi:ne180100]((uint64_t)&v2, v1, 1);
}

void std::default_delete<HSUtil::Connection>::operator()[abi:ne180100](uint64_t a1, HSUtil::Connection *a2)
{
  if (a2)
  {
    HSUtil::Connection::~Connection(a2);
    operator delete();
  }
}

void HSUtil::Connection::~Connection(HSUtil::Connection *this)
{
}

{
  HSUtil::Connection::close(this);
  HSUtil::Connection::Mailbox::~Mailbox((HSUtil::Connection *)((char *)this + 560));
  HSUtil::Connection::Mailbox::~Mailbox((HSUtil::Connection *)((char *)this + 352));
  HSUtil::Connection::{unnamed type#2}::~Connection((std::mutex *)((char *)this + 272));
  HSUtil::Connection::{unnamed type#1}::~Connection((uint64_t)this + 112);
  objc_storeStrong((id *)this + 13, 0);
  HSUtil::Connection::Config::~Config((id *)this + 2);
  std::weak_ptr<HSMapper>::~weak_ptr((uint64_t)this);
}

uint64_t HSUtil::Connection::close(HSUtil::Connection *this)
{
  return HSUtil::Connection::_close((uint64_t)this, 2, 1);
}

uint64_t HSUtil::Connection::_close(uint64_t a1, int a2, char a3)
{
  uint64_t v22 = a1;
  int v21 = a2;
  char v20 = a3 & 1;
  if (!a2) {
    __assert_rtn("_close", "HSConnection.h", 244, "status != Status::Idle");
  }
  if (v21 == 1) {
    __assert_rtn("_close", "HSConnection.h", 245, "status != Status::Active");
  }
  char v19 = 0;
  std::unique_lock<std::mutex>::unique_lock[abi:ne180100]((uint64_t)&__lk, a1 + 112);
  if (*(_DWORD *)(a1 + 224) <= 1u)
  {
    uint64_t v3 = (HSUtil::FileDescriptor *)std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100](a1 + 232);
    int v7 = HSUtil::FileDescriptor::fd(v3);
    shutdown(v7, 2);
    *(_DWORD *)(a1 + 224) = v21;
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 176));
    char v19 = 1;
  }
  std::unique_lock<std::mutex>::unlock(&__lk);
  std::mutex::lock((std::mutex *)(a1 + 352));
  *(unsigned char *)(a1 + 464) = 1;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 416));
  std::mutex::unlock((std::mutex *)(a1 + 352));
  std::mutex::lock((std::mutex *)(a1 + 560));
  *(unsigned char *)(a1 + 672) = 1;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 624));
  std::mutex::unlock((std::mutex *)(a1 + 560));
  std::mutex::lock((std::mutex *)(a1 + 272));
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](v17);
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::operator=[abi:ne180100]((uint64_t *)(a1 + 336), v17);
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v17);
  std::mutex::unlock((std::mutex *)(a1 + 272));
  std::unique_lock<std::mutex>::lock(&__lk);
  while (1)
  {
    char v6 = 0;
    if (v20) {
      char v6 = *(unsigned char *)(a1 + 264) ^ 1;
    }
    if ((v6 & 1) == 0) {
      break;
    }
    std::condition_variable::wait((std::condition_variable *)(a1 + 176), &__lk);
  }
  if (std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::operator BOOL[abi:ne180100](a1 + 232))
  {
    if (!std::shared_ptr<HSUtil::FileDescriptor>::unique[abi:ne180100](a1 + 232)) {
      __assert_rtn("_close", "HSConnection.h", 284, "_state.socket.unique()");
    }
    std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](v16);
    std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::operator=[abi:ne180100]((uint64_t *)(a1 + 232), v16);
    std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v16);
  }
  std::unique_lock<std::mutex>::unlock(&__lk);
  if ((v19 & 1) != 0
    && std::function<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::operator BOOL[abi:ne180100](a1 + 56))
  {
    std::weak_ptr<HSMapper>::weak_ptr<HSMapper,0>(v15, (void *)a1);
    queue = *(NSObject **)(a1 + 16);
    uint64_t v9 = _NSConcreteStackBlock;
    int v10 = -973078528;
    int v11 = 0;
    int v12 = ___ZN6HSUtil10Connection6_closeENS0_6StatusEb_block_invoke;
    uint64_t v13 = &__block_descriptor_48_ea8_32c44_ZTSNSt3__18weak_ptrIN6HSUtil10ConnectionEEE_e5_v8__0l;
    std::weak_ptr<HSMapper>::weak_ptr<HSMapper,0>(v14, v15);
    dispatch_async(queue, &v9);
    std::weak_ptr<HSMapper>::~weak_ptr((uint64_t)v14);
    std::weak_ptr<HSMapper>::~weak_ptr((uint64_t)v15);
  }
  return std::unique_lock<std::mutex>::~unique_lock[abi:ne180100]((uint64_t)&__lk);
}

uint64_t std::unique_lock<std::mutex>::unique_lock[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 1;
  std::mutex::lock(*(std::mutex **)a1);
  return a1;
}

void std::unique_lock<std::mutex>::unlock(std::unique_lock<std::mutex> *this)
{
  if (!this->__owns_) {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
  }
  std::mutex::unlock(this->__m_);
  this->__owns_ = 0;
}

void std::unique_lock<std::mutex>::lock(std::unique_lock<std::mutex> *this)
{
  if (!this->__m_) {
    std::__throw_system_error(1, "unique_lock::lock: references null mutex");
  }
  if (this->__owns_) {
    std::__throw_system_error(11, "unique_lock::lock: already locked");
  }
  std::mutex::lock(this->__m_);
  this->__owns_ = 1;
}

BOOL std::shared_ptr<HSUtil::FileDescriptor>::unique[abi:ne180100](uint64_t a1)
{
  return std::shared_ptr<HSUtil::FileDescriptor>::use_count[abi:ne180100](a1) == 1;
}

uint64_t ___ZN6HSUtil10Connection6_closeENS0_6StatusEb_block_invoke(uint64_t a1)
{
  v4[3] = a1;
  unint64_t v4[2] = a1;
  std::weak_ptr<HSMapper>::lock(a1 + 32, v4);
  if (std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::operator BOOL[abi:ne180100]((uint64_t)v4))
  {
    uint64_t v2 = std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)v4)
       + 56;
    std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](v3, v4);
    std::function<void ()(std::shared_ptr<HSUtil::Connection>)>::operator()(v2, (uint64_t)v3);
    std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v3);
  }
  return std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v4);
}

uint64_t std::function<void ()(std::shared_ptr<HSUtil::Connection>)>::operator()(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(std::shared_ptr<HSUtil::Connection>)>::operator()[abi:ne180100](a1, a2);
}

void *__copy_helper_block_ea8_32c44_ZTSNSt3__18weak_ptrIN6HSUtil10ConnectionEEE(uint64_t a1, uint64_t a2)
{
  return std::weak_ptr<HSMapper>::weak_ptr<HSMapper,0>((void *)(a1 + 32), (void *)(a2 + 32));
}

uint64_t __destroy_helper_block_ea8_32c44_ZTSNSt3__18weak_ptrIN6HSUtil10ConnectionEEE(uint64_t a1)
{
  return std::weak_ptr<HSMapper>::~weak_ptr(a1 + 32);
}

uint64_t std::unique_lock<std::mutex>::~unique_lock[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  if (*(unsigned char *)(a1 + 8)) {
    std::mutex::unlock(*(std::mutex **)a1);
  }
  return a1;
}

uint64_t std::shared_ptr<HSUtil::FileDescriptor>::use_count[abi:ne180100](uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    return std::__shared_weak_count::use_count[abi:ne180100](*(void *)(a1 + 8));
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_weak_count::use_count[abi:ne180100](uint64_t a1)
{
  return std::__shared_count::use_count[abi:ne180100](a1);
}

uint64_t std::__shared_count::use_count[abi:ne180100](uint64_t a1)
{
  return std::__libcpp_relaxed_load[abi:ne180100]<long>(a1 + 8) + 1;
}

uint64_t std::__libcpp_relaxed_load[abi:ne180100]<long>(uint64_t a1)
{
  return *(void *)a1;
}

void *std::weak_ptr<HSUtil::Connection>::weak_ptr(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  if (a1[1]) {
    std::__shared_weak_count::__add_weak[abi:ne180100](a1[1]);
  }
  return a1;
}

unint64_t std::__shared_weak_count::__add_weak[abi:ne180100](uint64_t a1)
{
  return std::__libcpp_atomic_refcount_increment[abi:ne180100]<long>((atomic_ullong *)(a1 + 16));
}

uint64_t std::__function::__value_func<void ()(std::shared_ptr<HSUtil::Connection>)>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 24)) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 48))(*(void *)(a1 + 24), a2);
}

void std::allocator<std::__shared_ptr_pointer<HSUtil::Connection *,std::shared_ptr<HSUtil::Connection>::__shared_ptr_default_delete<HSUtil::Connection,HSUtil::Connection>,std::allocator<HSUtil::Connection>>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::unique_ptr<HSUtil::Connection>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  id v5 = *v2;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    std::default_delete<HSUtil::Connection>::operator()[abi:ne180100](v4, v5);
  }
}

__n128 HSUtil::Connection::Config::operator=(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)a1, *(id *)a2);
  std::function<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::operator=(a1 + 8, a2 + 8);
  std::function<void ()(std::shared_ptr<HSUtil::Connection>)>::operator=(a1 + 40, a2 + 40);
  __n128 result = *(__n128 *)(a2 + 72);
  *(__n128 *)(a1 + 72) = result;
  return result;
}

uint64_t std::make_shared[abi:ne180100]<HSUtil::FileDescriptor,HSUtil::FileDescriptor,void>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  char v6 = a2;
  uint64_t v5 = a1;
  std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>::allocator[abi:ne180100]((uint64_t)&v4);
  return std::allocate_shared[abi:ne180100]<HSUtil::FileDescriptor,std::allocator<HSUtil::FileDescriptor>,HSUtil::FileDescriptor,void>((uint64_t)&v4, v5, a2);
}

uint64_t *std::shared_ptr<HSUtil::FileDescriptor>::operator=[abi:ne180100](uint64_t *a1, void *a2)
{
  v4[3] = (uint64_t)a1;
  unint64_t v4[2] = (uint64_t)a2;
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](v4, a2);
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::swap[abi:ne180100](v4, a1);
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v4);
  return a1;
}

uint64_t std::function<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::operator=(uint64_t a1, uint64_t a2)
{
  std::function<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::function((uint64_t)v4, a2);
  std::function<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::swap((uint64_t)v4, a1);
  std::function<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::~function((uint64_t)v4);
  return a1;
}

uint64_t std::function<void ()(std::shared_ptr<HSUtil::Connection>)>::operator=(uint64_t a1, uint64_t a2)
{
  std::function<void ()(std::shared_ptr<HSUtil::Connection>)>::function((uint64_t)v4, a2);
  std::function<void ()(std::shared_ptr<HSUtil::Connection>)>::swap((uint64_t)v4, a1);
  std::function<void ()(std::shared_ptr<HSUtil::Connection>)>::~function((uint64_t)v4);
  return a1;
}

uint64_t std::function<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::function(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  std::__function::__value_func<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::__value_func[abi:ne180100](a1, a2);
  return a1;
}

void std::function<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::swap(uint64_t a1, uint64_t a2)
{
}

uint64_t std::__function::__value_func<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t v2;

  if (*(void *)(a2 + 24))
  {
    if (*(void *)(a2 + 24) == a2)
    {
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      *(void *)(a1 + 24) = v2;
      (*(void (**)(void, void))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), *(void *)(a1 + 24));
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 16))(*(void *)(a2 + 24));
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::__function::__value_func<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::swap[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    if (*(void *)(a1 + 24) == a1 && *(void *)(a2 + 24) == a2)
    {
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      uint64_t v15 = v2;
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24), v2);
      (*(void (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24));
      *(void *)(a1 + 24) = 0;
      uint64_t v13 = *(void *)(a2 + 24);
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 24))(v13, v3);
      (*(void (**)(void))(**(void **)(a2 + 24) + 32))(*(void *)(a2 + 24));
      *(void *)(a2 + 24) = 0;
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      *(void *)(a1 + 24) = v4;
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 24))(v15, v5);
      (*(void (**)(uint64_t))(*(void *)v15 + 32))(v15);
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      *(void *)(a2 + 24) = v6;
    }
    else if (*(void *)(a1 + 24) == a1)
    {
      uint64_t v12 = *(void *)(a1 + 24);
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 24))(v12, v7);
      (*(void (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24));
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      *(void *)(a2 + 24) = v8;
    }
    else if (*(void *)(a2 + 24) == a2)
    {
      uint64_t v11 = *(void *)(a2 + 24);
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 24))(v11, v9);
      (*(void (**)(void))(**(void **)(a2 + 24) + 32))(*(void *)(a2 + 24));
      *(void *)(a2 + 24) = *(void *)(a1 + 24);
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      *(void *)(a1 + 24) = v10;
    }
    else
    {
      std::swap[abi:ne180100]<HSUtil::Encoder::ContainerRecord *>((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
    }
  }
}

void sub_945AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(std::shared_ptr<HSUtil::Connection>)>::function(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  std::__function::__value_func<void ()(std::shared_ptr<HSUtil::Connection>)>::__value_func[abi:ne180100](a1, a2);
  return a1;
}

void std::function<void ()(std::shared_ptr<HSUtil::Connection>)>::swap(uint64_t a1, uint64_t a2)
{
}

uint64_t std::__function::__value_func<void ()(std::shared_ptr<HSUtil::Connection>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t v2;

  if (*(void *)(a2 + 24))
  {
    if (*(void *)(a2 + 24) == a2)
    {
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      *(void *)(a1 + 24) = v2;
      (*(void (**)(void, void))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), *(void *)(a1 + 24));
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 16))(*(void *)(a2 + 24));
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::__function::__value_func<void ()(std::shared_ptr<HSUtil::Connection>)>::swap[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    if (*(void *)(a1 + 24) == a1 && *(void *)(a2 + 24) == a2)
    {
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      uint64_t v15 = v2;
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24), v2);
      (*(void (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24));
      *(void *)(a1 + 24) = 0;
      uint64_t v13 = *(void *)(a2 + 24);
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 24))(v13, v3);
      (*(void (**)(void))(**(void **)(a2 + 24) + 32))(*(void *)(a2 + 24));
      *(void *)(a2 + 24) = 0;
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      *(void *)(a1 + 24) = v4;
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 24))(v15, v5);
      (*(void (**)(uint64_t))(*(void *)v15 + 32))(v15);
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      *(void *)(a2 + 24) = v6;
    }
    else if (*(void *)(a1 + 24) == a1)
    {
      uint64_t v12 = *(void *)(a1 + 24);
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 24))(v12, v7);
      (*(void (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24));
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      *(void *)(a2 + 24) = v8;
    }
    else if (*(void *)(a2 + 24) == a2)
    {
      uint64_t v11 = *(void *)(a2 + 24);
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 24))(v11, v9);
      (*(void (**)(void))(**(void **)(a2 + 24) + 32))(*(void *)(a2 + 24));
      *(void *)(a2 + 24) = *(void *)(a1 + 24);
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      *(void *)(a1 + 24) = v10;
    }
    else
    {
      std::swap[abi:ne180100]<HSUtil::Encoder::ContainerRecord *>((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
    }
  }
}

void sub_94B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<HSUtil::FileDescriptor,std::allocator<HSUtil::FileDescriptor>,HSUtil::FileDescriptor,void>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v11 = a3;
  uint64_t v10 = a1;
  uint64_t v9 = a2;
  std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__allocation_guard[abi:ne180100]<std::allocator<HSUtil::FileDescriptor>>((uint64_t)v8, 1);
  uint64_t v3 = (void *)std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v8);
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__shared_ptr_emplace[abi:ne180100]<HSUtil::FileDescriptor,std::allocator<HSUtil::FileDescriptor>,0>(v3, v9);
  uint64_t v7 = std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__release_ptr[abi:ne180100]((uint64_t)v8);
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::shared_ptr<HSUtil::FileDescriptor>::__create_with_control_block[abi:ne180100]<HSUtil::FileDescriptor,std::__shared_ptr_emplace<HSUtil::FileDescriptor>>(v4, v7, a3);
  return std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::~__allocation_guard[abi:ne180100]((uint64_t)v8);
}

void sub_94C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, _Unwind_Exception *exception_object)
{
  std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::~__allocation_guard[abi:ne180100](v16 - 48);
  _Unwind_Resume(a1);
}

uint64_t std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__allocation_guard[abi:ne180100]<std::allocator<HSUtil::FileDescriptor>>(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  void *v2;
  uint64_t result;

  std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>(a1);
  *(void *)(a1 + 8) = a2;
  uint64_t v2 = std::allocator_traits<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::allocate[abi:ne180100](a1, *(void *)(a1 + 8));
  __n128 result = a1;
  *(void *)(a1 + std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a9 + 16) = v2;
  return result;
}

uint64_t std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100](uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void *std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__shared_ptr_emplace[abi:ne180100]<HSUtil::FileDescriptor,std::allocator<HSUtil::FileDescriptor>,0>(void *a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t v2;
  unsigned char v5[13];
  uint64_t v6;
  void *v7;

  uint64_t v7 = a1;
  uint64_t v6 = a2;
  std::__shared_weak_count::__shared_weak_count[abi:ne180100]((uint64_t)a1, 0);
  *a1 = off_142148;
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::_Storage::_Storage[abi:ne180100]((uint64_t)(a1 + 3));
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::allocator_traits<std::allocator<HSUtil::FileDescriptor>>::construct[abi:ne180100]<HSUtil::FileDescriptor,HSUtil::FileDescriptor,void>((uint64_t)v5, v2, v6);
  return a1;
}

uint64_t std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__release_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a9 + 16) = 0;
  return v2;
}

void std::shared_ptr<HSUtil::FileDescriptor>::__create_with_control_block[abi:ne180100]<HSUtil::FileDescriptor,std::__shared_ptr_emplace<HSUtil::FileDescriptor>>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  std::vector<HSUtil::CoderKey const*>::__annotate_delete[abi:ne180100]();
}

void std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]()
{
}

uint64_t std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::~__allocation_guard[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__destroy[abi:ne180100](a1);
  return a1;
}

void *std::allocator_traits<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  return std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>::allocate[abi:ne180100](a1, a2);
}

void *std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 > std::allocator_traits<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::max_size[abi:ne180100]<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>,void>()) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return std::__libcpp_allocate[abi:ne180100](48 * a2, (std::align_val_t)8uLL);
}

uint64_t std::allocator_traits<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::max_size[abi:ne180100]<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>,void>()
{
  return std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>::max_size[abi:ne180100]();
}

uint64_t std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>::max_size[abi:ne180100]()
{
  return 0x555555555555555;
}

void sub_94F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

uint64_t std::__shared_ptr_emplace<HSUtil::FileDescriptor>::_Storage::_Storage[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::_Storage::__get_alloc[abi:ne180100]();
  return a1;
}

uint64_t std::allocator_traits<std::allocator<HSUtil::FileDescriptor>>::construct[abi:ne180100]<HSUtil::FileDescriptor,HSUtil::FileDescriptor,void>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::allocator<HSUtil::FileDescriptor>::construct[abi:ne180100]<HSUtil::FileDescriptor,HSUtil::FileDescriptor>(a1, a2, a3);
}

uint64_t std::__shared_ptr_emplace<HSUtil::FileDescriptor>::_Storage::~_Storage[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::_Storage::__get_alloc[abi:ne180100]();
  return a1;
}

std::__shared_weak_count *std::__shared_ptr_emplace<HSUtil::FileDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  return a1;
}

{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_142148;
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::_Storage::~_Storage[abi:ne180100]((uint64_t)&a1[1]);
  std::__shared_weak_count::~__shared_weak_count(a1);
  return a1;
}

void std::__shared_ptr_emplace<HSUtil::FileDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
}

void std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__on_zero_shared_weak(uint64_t a1)
{
  uint64_t v4 = a1;
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v3);
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::_Storage::~_Storage[abi:ne180100](a1 + 24);
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  std::allocator_traits<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::deallocate[abi:ne180100]((uint64_t)&v3, v1, 1);
}

void std::__shared_ptr_emplace<HSUtil::FileDescriptor>::_Storage::__get_alloc[abi:ne180100]()
{
}

uint64_t std::allocator<HSUtil::FileDescriptor>::construct[abi:ne180100]<HSUtil::FileDescriptor,HSUtil::FileDescriptor>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HSUtil::FileDescriptor::FileDescriptor(a2, a3);
}

uint64_t HSUtil::FileDescriptor::FileDescriptor(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  HSUtil::IO::Readable::Readable((void *)a1);
  HSUtil::IO::Writable::Writable((void *)(a1 + 8));
  *(void *)a1 = &off_141448;
  *(void *)(a1 + 8) = &off_141478;
  *(_DWORD *)(a1 + std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a9 + 16) = -1;
  HSUtil::FileDescriptor::operator=(a1, a2);
  return a1;
}

uint64_t HSUtil::FileDescriptor::operator=(uint64_t a1, uint64_t a2)
{
  HSUtil::FileDescriptor::reset(a1);
  uint64_t result = a1;
  *(_DWORD *)(a1 + std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a9 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a9 + 16) = -1;
  return result;
}

void std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__on_zero_shared_impl[abi:ne180100]<std::allocator<HSUtil::FileDescriptor>,0>(uint64_t a1)
{
  uint64_t v3 = a1;
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::allocator_traits<std::allocator<HSUtil::FileDescriptor>>::destroy[abi:ne180100]<HSUtil::FileDescriptor,void>((uint64_t)&v2, v1);
}

void std::allocator_traits<std::allocator<HSUtil::FileDescriptor>>::destroy[abi:ne180100]<HSUtil::FileDescriptor,void>(uint64_t a1, HSUtil::FileDescriptor *a2)
{
}

void std::allocator<HSUtil::FileDescriptor>::destroy[abi:ne180100](uint64_t a1, HSUtil::FileDescriptor *a2)
{
}

void std::allocator_traits<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__destroy[abi:ne180100](uint64_t a1)
{
  if (*(void *)(a1 + 16)) {
    std::allocator_traits<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::deallocate[abi:ne180100](a1, *(void **)(a1 + 16), *(void *)(a1 + 8));
  }
}

uint64_t std::weak_ptr<HSUtil::Connection>::~weak_ptr(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)(a1 + 8));
  }
  return a1;
}

void *std::function<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::function<HSMapper::_createConnectionConfig(std::weak_ptr<std::function<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::function>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&)#1},void>(void *a1, uint64_t a2)
{
  return a1;
}

{
  std::__function::__value_func<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::__value_func[abi:ne180100]<HSMapper::_createConnectionConfig(std::weak_ptr<std::__function::__value_func<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::__value_func[abi:ne180100]>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&)#1},0>(a1, a2);
  return a1;
}

void *std::function<void ()(std::shared_ptr<HSUtil::Connection>)>::function<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},void>(void *a1, uint64_t a2)
{
  return a1;
}

{
  std::__function::__value_func<void ()(std::shared_ptr<HSUtil::Connection>)>::__value_func[abi:ne180100]<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},0>(a1, a2);
  return a1;
}

uint64_t *std::chrono::duration<long long,std::ratio<1l,1000l>>::duration[abi:ne180100]<long long,std::ratio<1l,1l>,0>(uint64_t *a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t v2;
  uint64_t *result;
  void v5[3];

  unint64_t v5[2] = a1;
  v5[1] = a2;
  v5[0] = std::chrono::duration_cast[abi:ne180100]<std::chrono::duration<long long,std::ratio<1l,1000l>>,long long,std::ratio<1l,1l>,0>(a2);
  char v2 = std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)v5);
  uint64_t result = a1;
  *a1 = v2;
  return result;
}

uint64_t HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}::~shared_ptr(uint64_t a1)
{
  return a1;
}

{
  std::weak_ptr<HSMapper>::~weak_ptr(a1);
  return a1;
}

void *std::__function::__value_func<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::__value_func[abi:ne180100]<HSMapper::_createConnectionConfig(std::weak_ptr<std::__function::__value_func<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::__value_func[abi:ne180100]>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&)#1},0>(void *a1, uint64_t a2)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>::allocator[abi:ne180100]((uint64_t)&v5);
  std::__function::__value_func<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::__value_func[abi:ne180100]<HSMapper::_createConnectionConfig(std::weak_ptr<std::__function::__value_func<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::__value_func[abi:ne180100]>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&)#1},std::allocator<NSObject  {objcproto17OS_dispatch_queue}*>>(a1, a2, (uint64_t)&v5);
  return a1;
}

void *std::__function::__value_func<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::__value_func[abi:ne180100]<HSMapper::_createConnectionConfig(std::weak_ptr<std::__function::__value_func<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::__value_func[abi:ne180100]>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&)#1},std::allocator<NSObject  {objcproto17OS_dispatch_queue}*>>(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  uint64_t v4;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  uint64_t v10 = a1;
  uint64_t v9 = a2;
  uint64_t v8 = a3;
  uint64_t v11 = a1;
  a1[3] = 0;
  if (std::__function::__not_null[abi:ne180100]<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1}>())
  {
    std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v7);
    uint64_t v4 = v9;
    std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v6);
    std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::__func[abi:ne180100](a1, v4, (uint64_t)&v6);
    a1[3] = a1;
  }
  return v11;
}

uint64_t std::__function::__not_null[abi:ne180100]<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1}>()
{
  return 1;
}

void *std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::__func[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  std::__function::__base<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::__base[abi:ne180100](a1);
  *a1 = off_142198;
  std::__function::__alloc_func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::__alloc_func[abi:ne180100](a1 + 1, a2, a3);
  return a1;
}

{
  std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::__func[abi:ne180100](a1, a2, a3);
  return a1;
}

{
  std::__function::__base<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::__base[abi:ne180100](a1);
  *a1 = off_142198;
  std::__function::__alloc_func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::__alloc_func[abi:ne180100](a1 + 1, a2, a3);
  return a1;
}

{
  std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::__func[abi:ne180100](a1, a2, a3);
  return a1;
}

{
  std::__function::__base<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::__base[abi:ne180100](a1);
  *a1 = off_142198;
  std::__function::__alloc_func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::__alloc_func[abi:ne180100](a1 + 1, a2, a3);
  return a1;
}

void sub_958B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

void *std::__function::__base<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::__base[abi:ne180100](void *result)
{
  std::__shared_weak_count *result = off_142218;
  return result;
}

void *std::__function::__alloc_func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::__alloc_func[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  uint64_t v5;
  uint64_t v6;

  uint64_t v6 = std::forward_as_tuple[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>(a2);
  char v5 = std::forward_as_tuple[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>(a3);
  std::__compressed_pair<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>>::__compressed_pair[abi:ne180100]<HSUtil::Buffer &&&&,std::allocator&&>(a1, v6, v5);
  return a1;
}

{
  std::__function::__alloc_func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::__alloc_func[abi:ne180100](a1, a2, a3);
  return a1;
}

{
  uint64_t v5;
  uint64_t v6;

  uint64_t v6 = std::forward_as_tuple[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>(a2);
  char v5 = std::forward_as_tuple[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>(a3);
  std::__compressed_pair<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>>::__compressed_pair[abi:ne180100]<HSUtil::Buffer && const&,std::allocator&&>(a1, v6, v5);
  return a1;
}

{
  std::__function::__alloc_func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::__alloc_func[abi:ne180100](a1, a2, a3);
  return a1;
}

{
  uint64_t v5;
  uint64_t v6;

  uint64_t v6 = std::forward_as_tuple[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>(a2);
  char v5 = std::forward_as_tuple[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>(a3);
  std::__compressed_pair<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>>::__compressed_pair[abi:ne180100]<HSUtil::Buffer && const&,std::allocator const&>(a1, v6, v5);
  return a1;
}

void *std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::~__func(void *a1)
{
  return a1;
}

{
  *a1 = off_142198;
  std::__function::__alloc_func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::~__alloc_func((uint64_t)(a1 + 1));
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  return a1;
}

void std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::~__func(void *a1)
{
}

uint64_t std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::__clone(uint64_t a1)
{
  uint64_t v11 = a1;
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v10);
  uint64_t v4 = std::allocator<std::__hash_node<HSStage * {__strong},void *>>::allocate[abi:ne180100]((uint64_t)&v10, 1uLL);
  std::__allocator_destructor<std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>>::__allocator_destructor[abi:ne180100](&v8, (uint64_t)&v10, 1);
  std::unique_ptr<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>,std::__allocator_destructor<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1}<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>>>::unique_ptr[abi:ne180100]<true,void>((uint64_t)v9, (uint64_t)v4, &v8);
  char v5 = (void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  uint64_t v6 = v1;
  std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)v7);
  std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::__func[abi:ne180100](v5, v6, (uint64_t)v7);
  uint64_t v3 = std::unique_ptr<std::__hash_node<HSStage * {__strong},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::release[abi:ne180100]();
  std::unique_ptr<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>,std::__allocator_destructor<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1}<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>>>::~unique_ptr[abi:ne180100]((uint64_t)v9);
  return v3;
}

void sub_95AA4(uint64_t a1, int a2)
{
  *(void *)(v2 - 64) = a1;
  *(_DWORD *)(v2 - 68) = a2;
  std::unique_ptr<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>,std::__allocator_destructor<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1}<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>>>::~unique_ptr[abi:ne180100](v2 - 40);
  _Unwind_Resume(*(_Unwind_Exception **)(v2 - 64));
}

void *std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::__clone(uint64_t a1, void *a2)
{
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  uint64_t v5 = v2;
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  return std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::__func[abi:ne180100](a2, v5, v3);
}

uint64_t std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::destroy_deallocate(void *a1)
{
  uint64_t v3 = a1;
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v2);
  std::__function::__alloc_func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  std::allocator<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>>::deallocate[abi:ne180100]((uint64_t)&v2, a1, 1);
}

uint64_t std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::operator()@<X0>(void *a1@<X1>, HSUtil::IO::Readable *a2@<X2>, HSUtil::Buffer *a3@<X8>)
{
  return std::__function::__alloc_func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::operator()[abi:ne180100](a1, a2, a3);
}

uint64_t std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::target(uint64_t a1, uint64_t a2)
{
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  return v2;
}

_UNKNOWN **std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::target_type()
{
}

void std::__function::__base<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::~__base()
{
}

{
  __break(1u);
}

void *std::__compressed_pair<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>>::__compressed_pair[abi:ne180100]<HSUtil::Buffer &&&&,std::allocator&&>(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  std::__compressed_pair_elem<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<HSUtil::Buffer &&&&,0ul>(a1, a2);
  std::__compressed_pair_elem<std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,1,true>::__compressed_pair_elem[abi:ne180100]<std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>&&,0ul>((uint64_t)a1, a3);
  return a1;
}

void sub_95D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

void *std::__compressed_pair_elem<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<HSUtil::Buffer &&&&,0ul>(void *a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v2 = (void *)std::get[abi:ne180100]<0ul,BOOL (*&&)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v5);
  HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1}::Buffer(a1, v2);
  return a1;
}

uint64_t std::__compressed_pair_elem<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},0,false>::~__compressed_pair_elem(uint64_t a1)
{
  return a1;
}

void *HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1}::Buffer(void *a1, void *a2)
{
  return a1;
}

{
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](a1, a2);
  return a1;
}

{
  HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1}::Buffer(a1, a2);
  return a1;
}

{
  std::weak_ptr<HSMapper>::weak_ptr<HSMapper,0>(a1, a2);
  return a1;
}

uint64_t std::__function::__alloc_func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::~__alloc_func(uint64_t a1)
{
  return a1;
}

{
  std::__compressed_pair<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>>::~__compressed_pair(a1);
  return a1;
}

uint64_t std::__compressed_pair<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>>::~__compressed_pair(uint64_t a1)
{
  return a1;
}

{
  std::__compressed_pair_elem<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},0,false>::~__compressed_pair_elem(a1);
  return a1;
}

uint64_t std::unique_ptr<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>,std::__allocator_destructor<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1}<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>>>::unique_ptr[abi:ne180100]<true,void>(uint64_t a1, uint64_t a2, __n128 *a3)
{
  return a1;
}

{
  void v5[2];

  v5[1] = a1;
  v5[0] = a2;
  std::__compressed_pair<std::__hash_node<HSStage * {__strong},void *> *,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::__compressed_pair[abi:ne180100]<std::__hash_node<HSStage * {__strong},void *> *&,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>(a1, v5, a3);
  return a1;
}

uint64_t std::unique_ptr<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>,std::__allocator_destructor<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1}<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>,std::__allocator_destructor<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1}<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>>>::reset[abi:ne180100](a1, 0);
  return a1;
}

void sub_96118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

void *std::__compressed_pair<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>>::__compressed_pair[abi:ne180100]<HSUtil::Buffer && const&,std::allocator&&>(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  std::__compressed_pair_elem<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<HSUtil::Buffer && const&,0ul>(a1, a2);
  std::__compressed_pair_elem<std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,1,true>::__compressed_pair_elem[abi:ne180100]<std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>&&,0ul>((uint64_t)a1, a3);
  return a1;
}

void *std::__compressed_pair_elem<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<HSUtil::Buffer && const&,0ul>(void *a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v2 = (void *)std::get[abi:ne180100]<0ul,BOOL (*&&)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v5);
  HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1}::Buffer(a1, v2);
  return a1;
}

void std::unique_ptr<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>,std::__allocator_destructor<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1}<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  uint64_t v5 = *v2;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__allocator_destructor<std::allocator<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>>>::operator()[abi:ne180100](v4, v5);
  }
}

void std::__allocator_destructor<std::allocator<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>>>::operator()[abi:ne180100](uint64_t *a1, void *a2)
{
}

void std::allocator_traits<std::allocator<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::allocator<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void sub_96544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

void *std::__compressed_pair<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>>::__compressed_pair[abi:ne180100]<HSUtil::Buffer && const&,std::allocator const&>(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  std::__compressed_pair_elem<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<HSUtil::Buffer && const&,0ul>(a1, a2);
  std::__compressed_pair_elem<std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,1,true>::__compressed_pair_elem[abi:ne180100]<std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>&&,0ul>((uint64_t)a1, a3);
  return a1;
}

void sub_966A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

uint64_t std::__function::__alloc_func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::destroy[abi:ne180100](uint64_t a1)
{
  return std::__compressed_pair<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>>::~__compressed_pair(a1);
}

uint64_t std::__function::__alloc_func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::operator()[abi:ne180100]@<X0>(void *a1@<X1>, HSUtil::IO::Readable *a2@<X2>, HSUtil::Buffer *a3@<X8>)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  return std::__invoke_void_return_wrapper<HSUtil::Buffer,false>::__call[abi:ne180100]<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)#1} &,std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer>(v3, a1, a2, a3);
}

uint64_t std::__invoke_void_return_wrapper<HSUtil::Buffer,false>::__call[abi:ne180100]<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)#1} &,std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, HSUtil::IO::Readable *a3@<X2>, HSUtil::Buffer *a4@<X8>)
{
  return std::__invoke[abi:ne180100]<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1} &,std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer>(a1, a2, a3, a4);
}

uint64_t std::__invoke[abi:ne180100]<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1} &,std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, HSUtil::IO::Readable *a3@<X2>, HSUtil::Buffer *a4@<X8>)
{
  uint64_t v11 = a4;
  uint64_t v10 = a1;
  uint64_t v9 = a2;
  __n128 v8 = a3;
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](v7, a2);
  HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1}::operator()(a1, v7, v8, a4);
  return std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v7);
}

void sub_967E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, _Unwind_Exception *exception_object, char a16)
{
}

uint64_t HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1}::operator()@<X0>(uint64_t a1@<X0>, void *a2@<X1>, HSUtil::IO::Readable *a3@<X2>, HSUtil::Buffer *a4@<X8>)
{
  uint64_t v14 = a4;
  uint64_t v13 = a1;
  uint64_t v12 = a2;
  uint64_t v11 = a3;
  std::weak_ptr<HSMapper>::lock(a1, v10);
  if (std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::operator BOOL[abi:ne180100]((uint64_t)v10))
  {
    uint64_t v5 = (HSMapper *)std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)v10);
    std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](v8, a2);
    HSMapper::_messageHandler(v5, (uint64_t)v8, v11, a4);
    std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v8);
  }
  else
  {
    HSUtil::Buffer::Buffer(a4);
  }
  int v9 = 1;
  return std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v10);
}

void HSMapper::_messageHandler(HSMapper *a1@<X0>, uint64_t a2@<X1>, HSUtil::IO::Readable *a3@<X2>, HSUtil::Buffer *a4@<X8>)
{
  unint64_t v39 = a4;
  unint64_t v38 = a1;
  uint64_t v37 = a2;
  uint64_t v36 = a3;
  Message::Message((Message *)&v31);
  if (HSMapper::_decodeMessage((uint64_t)a1, v36, (Message *)&v31))
  {
    Message::Message((Message *)v24);
    id v23 = HSMapper::_objectForID(a1, v31);
    if (v23)
    {
      cls = (objc_class *)objc_opt_class();
      Method InstanceMethod = class_getInstanceMethod(cls, v32);
      if (!InstanceMethod)
      {
        id v21 = &_os_log_default;
        char v20 = 16;
        if (os_log_type_enabled((os_log_t)v21, OS_LOG_TYPE_ERROR))
        {
          uint64_t v6 = v21;
          os_log_type_t v7 = v20;
          __os_log_helper_16_0_0(v19);
          _os_log_error_impl(&def_411C8, v6, v7, "class_getInstanceMethod returned nil", v19, 2u);
        }
        objc_storeStrong(&v21, 0);
        HSUtil::Buffer::Buffer(a4);
        int v26 = 1;
LABEL_19:
        objc_storeStrong(&v23, 0);
        Message::~Message(v24);
        goto LABEL_20;
      }
      method_getReturnType(InstanceMethod, dst, 8uLL);
      if (dst[0] == asc_12739A[0])
      {
        id v4 = objc_msgSend(v23, v32, v33, v34, v35);
        uint64_t v5 = v25;
        id v25 = v4;
      }
      else
      {
        objc_msgSend(v23, v32, v33, v34, v35);
      }
    }
    HSMapper::_popEncoderBuf(a1, &v18);
    int v17 = (HSUtil::EncoderBuf *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
    v15.n128_u64[0] = (unint64_t)a1;
    v15.n128_u64[1] = (unint64_t)&v18;
    HSUtil::Defer<HSMapper::_messageHandler(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)::{lambda(void)#1}>(&v15, &v16);
    HSUtil::Encoder::encodeCodable<Message>(v17, (Message *)v24);
    uint64_t v14 = (HSUtil::Buffer *)HSUtil::EncoderBuf::buffer(v17);
    if (HSUtil::Buffer::operator BOOL(v14))
    {
      HSUtil::Buffer::slice<HSUtil::Buffer::CopyType>(v14, 0, (uint64_t)a4);
      int v26 = 1;
    }
    else
    {
      os_log_t oslog = &_os_log_default;
      if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_0_1_4_0((uint64_t)v40, *(_DWORD *)v17);
        _os_log_error_impl(&def_411C8, oslog, OS_LOG_TYPE_ERROR, "Failed to encode message: %d", v40, 8u);
      }
      objc_storeStrong((id *)&oslog, 0);
      HSUtil::Buffer::Buffer(a4);
      int v26 = 1;
    }
    HSUtil::DeferredFn<HSMapper::_messageHandler(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)::{lambda(void)#1}>::~DeferredFn((uint64_t *)&v16);
    std::unique_ptr<HSUtil::EncoderBuf>::~unique_ptr[abi:ne180100]((uint64_t)&v18);
    goto LABEL_19;
  }
  id location = &_os_log_default;
  char v28 = 16;
  if (os_log_type_enabled((os_log_t)location, OS_LOG_TYPE_ERROR))
  {
    log = location;
    os_log_type_t type = v28;
    __os_log_helper_16_0_0(v27);
    _os_log_error_impl(&def_411C8, log, type, "_decodeMessage failed", v27, 2u);
  }
  objc_storeStrong(&location, 0);
  HSUtil::Buffer::Buffer(a4);
  int v26 = 1;
LABEL_20:
  Message::~Message((id *)&v31);
}

void sub_96E84()
{
  _Unwind_Resume(v0);
}

void Message::Message(Message *this)
{
}

{
  *(void *)this = 0;
  *((void *)this + MTRestZoneIntegrator_::clearMotion(this, 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
}

BOOL HSMapper::_decodeMessage(uint64_t a1, HSUtil::IO::Readable *a2, Message *a3)
{
  uint64_t v10 = a1;
  int v9 = a2;
  __n128 v8 = a3;
  std::unique_lock<std::mutex>::unique_lock[abi:ne180100]((uint64_t)&v7, a1 + 304);
  HSUtil::Decoder::setReadable((HSUtil::Decoder *)(a1 + 368), v9);
  if (HSUtil::Coder::ok((HSUtil::Coder *)(a1 + 368)))
  {
    HSUtil::Decoder::decodeElement((HSUtil::Decoder *)(a1 + 368), (uint64_t)v5);
    if (HSUtil::Coder::ok((HSUtil::Coder *)(a1 + 368)))
    {
      std::unique_lock<std::mutex>::unlock(&v7);
      HSUtil::Decoder::decodeCodable<Message>((HSUtil::Coder *)v5, v8);
      BOOL v11 = HSUtil::Coder::ok((HSUtil::Coder *)v5);
    }
    else
    {
      BOOL v11 = 0;
    }
    int v6 = 1;
    HSUtil::Decoder::~Decoder((HSUtil::Decoder *)v5);
  }
  else
  {
    BOOL v11 = 0;
    int v6 = 1;
  }
  std::unique_lock<std::mutex>::~unique_lock[abi:ne180100]((uint64_t)&v7);
  return v11;
}

id HSMapper::_objectForID(HSMapper *this, uint64_t a2)
{
  v9[1] = (uint64_t)this;
  v9[0] = a2;
  std::unique_lock<HSMapper::Maps>::unique_lock[abi:ne180100]((uint64_t)v8, (uint64_t)this + 80);
  uint64_t v7 = std::unordered_map<unsigned long long,objc_object * {__strong}>::find[abi:ne180100]((uint64_t)this + 88, v9);
  uint64_t v6 = std::unordered_map<unsigned long long,objc_object * {__strong}>::end[abi:ne180100]();
  if (std::operator==[abi:ne180100](&v7, &v6))
  {
    id v10 = 0;
  }
  else
  {
    std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>>::operator->[abi:ne180100]();
    id v10 = *(id *)(v2 + 8);
  }
  std::unique_lock<HSMapper::Maps>::~unique_lock[abi:ne180100]((uint64_t)v8);
  uint64_t v3 = v10;

  return v3;
}

uint64_t HSMapper::_popEncoderBuf@<X0>(HSMapper *this@<X0>, void *a2@<X8>)
{
  int v9 = a2;
  __n128 v8 = this;
  std::unique_lock<std::mutex>::unique_lock[abi:ne180100]((uint64_t)&v7, (uint64_t)this + 216);
  if (std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::empty[abi:ne180100]((void *)this + 35))
  {
    std::unique_lock<std::mutex>::unlock(&v7);
    std::make_unique[abi:ne180100]<HSUtil::EncoderBuf>();
  }
  uint64_t v2 = std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::back[abi:ne180100]((uint64_t)this + 280);
  std::unique_ptr<HSUtil::EncoderBuf>::unique_ptr[abi:ne180100](a2, v2);
  std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::pop_back((void *)this + 35);
  uint64_t v3 = (HSUtil::Encoder *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  HSUtil::Encoder::clear(v3);
  return std::unique_lock<std::mutex>::~unique_lock[abi:ne180100]((uint64_t)&v7);
}

void sub_97394()
{
  _Unwind_Resume(v0);
}

__n128 *HSUtil::Defer<HSMapper::_messageHandler(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)::{lambda(void)#1}>@<X0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  return HSUtil::DeferredFn<HSMapper::_messageHandler(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)::{lambda(void)#1}>::DeferredFn(a2, a1);
}

BOOL HSUtil::Encoder::encodeCodable<Message>(HSUtil::Coder *a1, Message *a2)
{
  BOOL result = HSUtil::Coder::ok(a1);
  if (result)
  {
    HSUtil::Encoder::_encodeCodable<Message>(a1, a2);
    return HSUtil::Coder::ok(a1);
  }
  return result;
}

uint64_t __os_log_helper_16_0_1_4_0(uint64_t result, int a2)
{
  *(unsigned char *)BOOL result = 0;
  *(unsigned char *)(result + MTRestZoneIntegrator_::clearMotion(this, 1) = 1;
  *(unsigned char *)(result + 2) = 0;
  *(unsigned char *)(result + 3) = 4;
  *(_DWORD *)(result + 4) = a2;
  return result;
}

uint64_t HSUtil::Buffer::slice<HSUtil::Buffer::CopyType>@<X0>(HSUtil::Buffer *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!HSUtil::Buffer::valid(a1)) {
    return HSUtil::Buffer::Buffer(a3);
  }
  if (a2 > *((void *)a1 + 6)) {
    __assert_rtn("slice", "HSBuffer.h", 163, "offset <= _state.len");
  }
  return HSUtil::Buffer::Buffer(a3, (const void *)(*((void *)a1 + 5) + a2), *((void *)a1 + 6) - a2);
}

uint64_t *HSUtil::DeferredFn<HSMapper::_messageHandler(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)::{lambda(void)#1}>::~DeferredFn(uint64_t *a1)
{
  return a1;
}

{
  HSMapper::_messageHandler(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)::{lambda(void)#1}::operator()(a1);
  return a1;
}

void Message::~Message(id *this)
{
}

{
  objc_storeStrong(this + 4, 0);
  objc_storeStrong(this + 3, 0);
  objc_storeStrong(this + 2, 0);
}

BOOL HSUtil::Decoder::decodeCodable<Message>(HSUtil::Coder *a1, Message *a2)
{
  uint64_t v6 = a1;
  uint64_t v5 = a2;
  BOOL result = HSUtil::Coder::fatalError(a1);
  if (!result)
  {
    unint64_t v4 = 0;
    unint64_t v4 = *((void *)a1 + 9);
    HSUtil::Decoder::_readCodable<Message>(a1, &v4, v5);
    BOOL result = HSUtil::Coder::ok(a1);
    if (result) {
      *((void *)a1 + 9) = v4;
    }
  }
  return result;
}

void HSUtil::Decoder::_readCodable<Message>(HSUtil::Decoder *a1, unint64_t *a2, Message *a3)
{
  int v9 = a1;
  __n128 v8 = a2;
  std::unique_lock<std::mutex> v7 = a3;
  unint64_t v6 = 0;
  unint64_t v6 = *a2;
  unint64_t v5 = HSUtil::Decoder::_skipElement(a1, a2);
  if (HSUtil::Coder::ok(a1))
  {
    HSUtil::Decoder::_loadKeyTableIfNeeded(a1, v8);
    if (HSUtil::Coder::ok(a1))
    {
      HSUtil::Decoder::Decoder((HSUtil::Decoder *)v4, a1, v6, v5);
      if ((Message::decode(v7, (HSUtil::Decoder *)v4) & 1) == 0) {
        *(_DWORD *)a1 = 10;
      }
      HSUtil::Decoder::~Decoder((HSUtil::Decoder *)v4);
    }
  }
}

uint64_t Message::decode(Message *this, HSUtil::Decoder *a2)
{
  uint64_t v35 = __chkstk_darwin(this, a2);
  uint64_t v34 = v2;
  __n128 v15 = (void *)v35;
  HSUtil::Decoder::decodeArray(v2, (uint64_t)v33);
  if (HSUtil::Coder::ok(v34))
  {
    void *v15 = HSUtil::Decoder::decodeUInt((HSUtil::Decoder *)v33);
    if (HSUtil::Coder::ok((HSUtil::Coder *)v33))
    {
      HSUtil::Decoder::decodeString((HSUtil::Decoder *)v33, (uint64_t)v23);
      if (HSUtil::Coder::ok((HSUtil::Coder *)v33))
      {
        if (!*(unsigned char *)HSUtil::Buffer::data((HSUtil::Buffer *)v23)
          || (uint64_t v3 = (const char *)HSUtil::Buffer::data((HSUtil::Buffer *)v23),
              v15[1] = sel_registerName(v3),
              BOOL v18 = 0,
              BOOL v18 = v15[1] != 0))
        {
          id v4 = HSUtil::Decoder::decodeObject((HSUtil::Decoder *)v33);
          unint64_t v5 = (void *)v15[2];
          void v15[2] = v4;

          if (HSUtil::Coder::ok((HSUtil::Coder *)v33)
            && (id v8 = HSUtil::Decoder::decodeObject((HSUtil::Decoder *)v33),
                int v9 = (void *)v15[3],
                v15[3] = v8,
                v9,
                HSUtil::Coder::ok((HSUtil::Coder *)v33)))
          {
            id v10 = HSUtil::Decoder::decodeObject((HSUtil::Decoder *)v33);
            BOOL v11 = (void *)v15[4];
            _OWORD v15[4] = v10;

            if (HSUtil::Coder::ok((HSUtil::Coder *)v33))
            {
              char v36 = 1;
            }
            else
            {
              uint64_t v12 = (HSUtil::Decoder *)HSUtil::Buffer::data((HSUtil::Buffer *)v23);
              Message::PrintDecodeArgError((Message *)v33, v12, v13);
              char v36 = 0;
            }
            int v28 = 1;
          }
          else
          {
            unint64_t v6 = (HSUtil::Decoder *)HSUtil::Buffer::data((HSUtil::Buffer *)v23);
            Message::PrintDecodeArgError((Message *)v33, v6, v7);
            char v36 = 0;
            int v28 = 1;
          }
        }
        else
        {
          int v17 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRemoteObject.mm", v38);
          os_log_t v16 = &_os_log_default;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v37, (uint64_t)"BOOL Message::decode(Decoder &)", (uint64_t)v17, 128, (uint64_t)"sel");
            _os_log_error_impl(&def_411C8, v16, OS_LOG_TYPE_ERROR, "Assertion failed (%s @ %s:%ju): %s", v37, 0x2Au);
          }
          objc_storeStrong((id *)&v16, 0);
          char v36 = 0;
          int v28 = 1;
        }
      }
      else
      {
        id v21 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRemoteObject.mm", v40);
        os_log_t oslog = &_os_log_default;
        os_log_type_t v19 = OS_LOG_TYPE_ERROR;
        if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v39, (uint64_t)"BOOL Message::decode(Decoder &)", (uint64_t)v21, 124, (uint64_t)"array");
          _os_log_error_impl(&def_411C8, oslog, v19, "Assertion failed (%s @ %s:%ju): %s", v39, 0x2Au);
        }
        objc_storeStrong((id *)&oslog, 0);
        char v36 = 0;
        int v28 = 1;
      }
      HSUtil::Buffer::~Buffer((HSUtil::Buffer *)v23);
    }
    else
    {
      int v26 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRemoteObject.mm", v42);
      id v25 = &_os_log_default;
      os_log_type_t v24 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)v25, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v41, (uint64_t)"BOOL Message::decode(Decoder &)", (uint64_t)v26, 121, (uint64_t)"array");
        _os_log_error_impl(&def_411C8, (os_log_t)v25, v24, "Assertion failed (%s @ %s:%ju): %s", v41, 0x2Au);
      }
      objc_storeStrong(&v25, 0);
      char v36 = 0;
      int v28 = 1;
    }
  }
  else
  {
    uint64_t v31 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRemoteObject.mm", v44);
    id location = &_os_log_default;
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)location, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v43, (uint64_t)"BOOL Message::decode(Decoder &)", (uint64_t)v31, 118, (uint64_t)"coder");
      _os_log_error_impl(&def_411C8, (os_log_t)location, type, "Assertion failed (%s @ %s:%ju): %s", v43, 0x2Au);
    }
    objc_storeStrong(&location, 0);
    char v36 = 0;
    int v28 = 1;
  }
  HSUtil::Decoder::~Decoder((HSUtil::Decoder *)v33);
  return v36 & 1;
}

void sub_97EB4()
{
  _Unwind_Resume(v0);
}

void Message::PrintDecodeArgError(Message *this, HSUtil::Decoder *a2, const char *a3)
{
  BOOL v11 = this;
  id v10 = a2;
  *(_DWORD *)this = 0;
  std::string::basic_string[abi:ne180100]<0>(&v9, "<failed to get encoded data>");
  HSUtil::Decoder::decodeElement(v11, (uint64_t)v8);
  if (HSUtil::Coder::ok(v11))
  {
    HSUtil::EncoderBuf::EncoderBuf((HSUtil::EncoderBuf *)v13);
    HSUtil::Encoder::encodeDecoder((HSUtil::Encoder *)v13, (HSUtil::Decoder *)v8);
    std::unique_lock<std::mutex> v7 = (HSUtil *)HSUtil::EncoderBuf::buffer((HSUtil::EncoderBuf *)v13);
    if (HSUtil::Buffer::operator BOOL(v7))
    {
      HSUtil::HexStringFromBuffer(v7, (uint64_t)&v6);
      std::string::operator=[abi:ne180100]((uint64_t)&v9, (uint64_t)&v6);
      std::string::~string(&v6);
    }
    HSUtil::EncoderBuf::~EncoderBuf((HSUtil::EncoderBuf *)v13);
  }
  os_log_t oslog = &_os_log_default;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = (uint64_t)v10;
    std::string::c_str[abi:ne180100]();
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v12, v4, v3);
    _os_log_error_impl(&def_411C8, oslog, OS_LOG_TYPE_ERROR, "failed to decode object for HSRemoteObject message:\n  message: -%s\n  encoded data: %s", v12, 0x16u);
  }
  objc_storeStrong((id *)&oslog, 0);
  HSUtil::Decoder::~Decoder((HSUtil::Decoder *)v8);
  std::string::~string(&v9);
}

void sub_98100()
{
  _Unwind_Resume(v0);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *a2)
{
  return a1;
}

void *HSUtil::HexStringFromBuffer@<X0>(HSUtil *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v10 = a2;
  std::string v9 = this;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  for (unint64_t i = 0; i < HSUtil::Buffer::length(v9); ++i)
  {
    int v6 = *(unsigned __int8 *)(HSUtil::Buffer::data(v9) + i);
    BOOL v3 = i != HSUtil::Buffer::length(v9) - 1;
    uint64_t v4 = " ";
    if (!v3) {
      uint64_t v4 = "";
    }
    snprintf(__str, 8uLL, "%02x%s", v6, v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>((uint64_t)v8, __str);
  }
  std::ostringstream::str[abi:ne180100]();
  return std::ostringstream::~ostringstream(v8);
}

void sub_982A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::string::operator=[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return a1;
}

void std::string::c_str[abi:ne180100]()
{
}

uint64_t __os_log_helper_16_2_2_8_32_8_32(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)BOOL result = 2;
  *(unsigned char *)(result + MTRestZoneIntegrator_::clearMotion(this, 1) = 2;
  *(unsigned char *)(result + 2) = 32;
  *(unsigned char *)(result + 3) = 8;
  *(void *)(result + 4) = a2;
  *(unsigned char *)(result + 12) = 32;
  *(unsigned char *)(result + 13) = 8;
  *(void *)(result + 14) = a3;
  return result;
}

uint64_t std::__compressed_pair<std::string::__rep>::__compressed_pair[abi:ne180100]<std::__default_init_tag,std::__default_init_tag>(uint64_t a1)
{
  return a1;
}

{
  std::__compressed_pair_elem<HSUtil::ObjectHasher,1,true>::__compressed_pair_elem[abi:ne180100]();
  std::__compressed_pair_elem<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>,1,true>::__compressed_pair_elem[abi:ne180100](a1);
  return a1;
}

size_t std::char_traits<char>::length[abi:ne180100](const char *a1)
{
  return std::__constexpr_strlen[abi:ne180100](a1);
}

size_t std::__constexpr_strlen[abi:ne180100](const char *a1)
{
  return strlen(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  return a1;
}

void sub_98540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

uint64_t std::operator<<[abi:ne180100]<std::char_traits<char>>(uint64_t a1, const char *a2)
{
  size_t v2 = std::char_traits<char>::length[abi:ne180100](a2);
  uint64_t result = a1;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)a2, v2);
  return result;
}

uint64_t std::ostringstream::str[abi:ne180100]()
{
  return std::stringbuf::str();
}

void *std::ostringstream::~ostringstream(void *a1)
{
  return a1;
}

void (__cdecl ***std::ios::basic_ios[abi:ne180100](void (__cdecl ***a1)(std::ios_base *__hidden this)))(std::ios_base *__hidden this)
{
  std::ios_base::ios_base[abi:ne180100](a1);
  uint64_t result = a1;
  return result;
}

void *std::ostream::basic_ostream[abi:ne180100](void *a1, void *a2, void *a3)
{
  *a1 = *a2;
  *(void *)((char *)a1 + *(void *)(*a1 - 24)) = a2[1];
  std::ios::init[abi:ne180100]((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), a3);
  return a1;
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, int a2)
{
  return a1;
}

{
  uint64_t result;

  std::streambuf::basic_streambuf();
  std::string::basic_string[abi:ne180100]((void *)(a1 + 64));
  uint64_t result = a1;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = a2;
  return result;
}

void (__cdecl ***std::ios_base::ios_base[abi:ne180100](void (__cdecl ***result)(std::ios_base *__hidden this)))(std::ios_base *__hidden this)
{
  return result;
}

uint64_t std::ios::init[abi:ne180100](std::ios_base *a1, void *a2)
{
  std::ios_base::init(a1, a2);
  a1[1].__vftable = 0;
  uint64_t result = std::char_traits<char>::eof[abi:ne180100]();
  a1[1].__fmtflags_ = result;
  return result;
}

uint64_t std::char_traits<char>::eof[abi:ne180100]()
{
  return 0xFFFFFFFFLL;
}

void *std::string::basic_string[abi:ne180100](void *a1)
{
  return a1;
}

{
  std::__compressed_pair<std::string::__rep>::__compressed_pair[abi:ne180100]<std::__value_init_tag,std::__default_init_tag>(a1);
  std::allocator<HSUtil::CoderKey const*>::destroy[abi:ne180100]();
  return a1;
}

void *std::__compressed_pair<std::string::__rep>::__compressed_pair[abi:ne180100]<std::__value_init_tag,std::__default_init_tag>(void *a1)
{
  return a1;
}

{
  std::__compressed_pair_elem<std::string::__rep,0,false>::__compressed_pair_elem[abi:ne180100](a1);
  std::__compressed_pair_elem<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>,1,true>::__compressed_pair_elem[abi:ne180100]((uint64_t)a1);
  return a1;
}

void *std::__compressed_pair_elem<std::string::__rep,0,false>::__compressed_pair_elem[abi:ne180100](void *result)
{
  std::__shared_weak_count *result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = a2;
  uint64_t v11 = a3;
  std::ostream::sentry::sentry();
  if (std::ostream::sentry::operator BOOL[abi:ne180100](v10))
  {
    std::ostreambuf_iterator<char>::ostreambuf_iterator[abi:ne180100](&v8, v13);
    uint64_t v7 = v12;
    if ((std::ios_base::flags[abi:ne180100]((uint64_t)v13 + *(void *)(*v13 - 24)) & 0xB0) == 0x20) {
      uint64_t v6 = v12 + v11;
    }
    else {
      uint64_t v6 = v12;
    }
    uint64_t v3 = v12 + v11;
    uint64_t v4 = (const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24));
    std::string::value_type v5 = std::ios::fill[abi:ne180100](v4);
    uint64_t v9 = std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v8, v7, v6, v3, (uint64_t)v4, v5);
    if (std::ostreambuf_iterator<char>::failed[abi:ne180100](&v9)) {
      std::ios::setstate[abi:ne180100]((std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)), 5);
    }
  }
  std::ostream::sentry::~sentry();
}

void sub_98BE4(uint64_t a1, int a2)
{
  *(void *)(v2 - 48) = a1;
  *(_DWORD *)(v2 - 52) = a2;
  __cxa_end_catch();
  _Unwind_Resume(*(_Unwind_Exception **)(v2 - 48));
}

uint64_t std::ostream::sentry::operator BOOL[abi:ne180100](unsigned char *a1)
{
  return *a1 & 1;
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, std::string::value_type a6)
{
  uint64_t v21 = a1;
  uint64_t v20 = a2;
  uint64_t v19 = a3;
  uint64_t v18 = a4;
  uint64_t v17 = a5;
  std::string::value_type v16 = a6;
  if (!a1) {
    return 0;
  }
  uint64_t v15 = v18 - v20;
  uint64_t v14 = std::ios_base::width[abi:ne180100](v17);
  if (v14 <= v18 - v20) {
    uint64_t v14 = 0;
  }
  else {
    v14 -= v15;
  }
  uint64_t v13 = v19 - v20;
  if (v19 - v20 > 0 && std::streambuf::sputn[abi:ne180100](v21, v20, v13) != v13) {
    return 0;
  }
  if (v14 <= 0) {
    goto LABEL_14;
  }
  std::string::basic_string[abi:ne180100](&v12, v14, v16);
  uint64_t v9 = v21;
  std::string::data[abi:ne180100]();
  uint64_t v10 = std::streambuf::sputn[abi:ne180100](v9, v6, v14);
  if (v10 == v14)
  {
    int v11 = 0;
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    int v11 = 1;
  }
  std::string::~string(&v12);
  if (!v11)
  {
LABEL_14:
    uint64_t v13 = v18 - v19;
    if (v18 - v19 <= 0 || (uint64_t v7 = std::streambuf::sputn[abi:ne180100](v21, v19, v13), v7 == v13))
    {
      std::ios_base::width[abi:ne180100](v17, 0);
      return v21;
    }
    else
    {
      uint64_t v21 = 0;
      return 0;
    }
  }
  return v22;
}

uint64_t *std::ostreambuf_iterator<char>::ostreambuf_iterator[abi:ne180100](uint64_t *a1, void *a2)
{
  return a1;
}

{
  uint64_t *result;
  uint64_t v4;

  uint64_t v4 = std::ios::rdbuf[abi:ne180100]((uint64_t)a2 + *(void *)(*a2 - 24));
  uint64_t result = a1;
  *a1 = v4;
  return result;
}

uint64_t std::ios_base::flags[abi:ne180100](uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t std::ios::fill[abi:ne180100](const std::ios_base *a1)
{
  int v1 = std::char_traits<char>::eof[abi:ne180100]();
  if (std::char_traits<char>::eq_int_type[abi:ne180100](v1, a1[1].__fmtflags_)) {
    a1[1].__fmtflags_ = (char)std::ios::widen[abi:ne180100](a1, 32);
  }
  return (char)a1[1].__fmtflags_;
}

BOOL std::ostreambuf_iterator<char>::failed[abi:ne180100](void *a1)
{
  return *a1 == 0;
}

void std::ios::setstate[abi:ne180100](std::ios_base *a1, int a2)
{
}

uint64_t std::ios_base::width[abi:ne180100](uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t std::streambuf::sputn[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(a1, a2, a3);
}

std::string *std::string::basic_string[abi:ne180100](std::string *a1, std::string::size_type a2, std::string::value_type a3)
{
  return a1;
}

{
  std::__compressed_pair<std::string::__rep>::__compressed_pair[abi:ne180100]<std::__default_init_tag,std::__default_init_tag>((uint64_t)a1);
  std::string::__init(a1, a2, a3);
  return a1;
}

void std::string::data[abi:ne180100]()
{
}

uint64_t std::ios_base::width[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = a2;
  return v3;
}

uint64_t std::string::__get_pointer[abi:ne180100]()
{
  if (std::string::__is_long[abi:ne180100]()) {
    return std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  }
  std::string::__get_short_pointer[abi:ne180100]();
  return v0;
}

BOOL std::string::__is_long[abi:ne180100]()
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  return *(char *)(v0 + 23) < 0;
}

void std::string::__get_short_pointer[abi:ne180100]()
{
}

uint64_t std::ios::rdbuf[abi:ne180100](uint64_t a1)
{
  return std::ios_base::rdbuf[abi:ne180100](a1);
}

uint64_t std::ios_base::rdbuf[abi:ne180100](uint64_t a1)
{
  return *(void *)(a1 + 40);
}

BOOL std::char_traits<char>::eq_int_type[abi:ne180100](int a1, int a2)
{
  return a1 == a2;
}

uint64_t std::ios::widen[abi:ne180100](const std::ios_base *a1, char a2)
{
  uint64_t v7 = a1;
  char v6 = a2;
  std::ios_base::getloc(a1);
  uint64_t v4 = std::use_facet[abi:ne180100]<std::ctype<char>>(&v5);
  char v3 = std::ctype<char>::widen[abi:ne180100]((uint64_t)v4, v6);
  std::locale::~locale(&v5);
  return v3;
}

void sub_992C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, _Unwind_Exception *exception_object)
{
  std::locale::~locale((std::locale *)(v14 - 24));
  _Unwind_Resume(a1);
}

const std::locale::facet *std::use_facet[abi:ne180100]<std::ctype<char>>(const std::locale *a1)
{
  return std::locale::use_facet(a1, &std::ctype<char>::id);
}

uint64_t std::ctype<char>::widen[abi:ne180100](uint64_t a1, char a2)
{
  return (*(char (**)(uint64_t, void))(*(void *)a1 + 56))(a1, a2);
}

void std::ios_base::setstate[abi:ne180100](std::ios_base *a1, int a2)
{
}

void *std::ostringstream::~ostringstream(void *a1, void *a2)
{
  *a1 = *a2;
  *(void *)((char *)a1 + *(void *)(*a1 - 24)) = a2[3];
  std::stringbuf::~stringbuf((uint64_t)(a1 + 1));
  std::ostream::~ostream();
  return a1;
}

uint64_t std::stringbuf::~stringbuf(uint64_t a1)
{
  return a1;
}

{
  std::string::~string((std::string *)(a1 + 64));
  std::streambuf::~streambuf();
  return a1;
}

void std::string::__move_assign[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v14 = a1;
  uint64_t v13 = a2;
  std::vector<HSUtil::CoderKey const*>::__annotate_delete[abi:ne180100]();
  if (std::string::__is_long[abi:ne180100]())
  {
    std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
    uint64_t v9 = v2;
    uint64_t v8 = (void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
    uint64_t v3 = std::string::__get_long_cap[abi:ne180100]();
    std::allocator_traits<std::allocator<char>>::deallocate[abi:ne180100](v9, v8, v3);
  }
  uint64_t v12 = std::string::size[abi:ne180100]();
  v11[1] = !std::string::__is_long[abi:ne180100]();
  std::string::__move_assign_alloc[abi:ne180100]();
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  uint64_t v7 = v4;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  *(_OWORD *)uint64_t v5 = *(_OWORD *)v7;
  *(void *)(v5 + std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a9 + 16) = *(void *)(v7 + 16);
  std::string::__set_short_size[abi:ne180100](v13, 0);
  std::string::__get_short_pointer[abi:ne180100]();
  v11[0] = 0;
  std::char_traits<char>::assign[abi:ne180100](v6, v11);
  std::allocator<HSUtil::CoderKey const*>::destroy[abi:ne180100]();
  if (!std::string::__is_long[abi:ne180100]() && v13 != a1)
  {
    std::string::__get_short_size[abi:ne180100]();
    std::allocator<HSUtil::CoderKey const*>::destroy[abi:ne180100]();
  }
}

void std::allocator_traits<std::allocator<char>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

uint64_t std::string::__get_long_cap[abi:ne180100]()
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  return *(void *)(v0 + 16) & 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t std::string::size[abi:ne180100]()
{
  if (std::string::__is_long[abi:ne180100]()) {
    return std::string::__get_long_size[abi:ne180100]();
  }
  else {
    return std::string::__get_short_size[abi:ne180100]();
  }
}

void std::string::__move_assign_alloc[abi:ne180100]()
{
}

{
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
}

void std::string::__set_short_size[abi:ne180100](uint64_t a1, char a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  *(unsigned char *)(v2 + 23) = *(unsigned char *)(v2 + 23) & 0x80 | a2 & 0x7F;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  *(unsigned char *)(v3 + 23) &= ~0x80u;
}

unsigned char *std::char_traits<char>::assign[abi:ne180100](unsigned char *result, unsigned char *a2)
{
  std::__shared_weak_count *result = *a2;
  return result;
}

uint64_t std::string::__get_short_size[abi:ne180100]()
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  return *(unsigned char *)(v0 + 23) & 0x7F;
}

void std::allocator<char>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

uint64_t std::string::__get_long_size[abi:ne180100]()
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  return *(void *)(v0 + 8);
}

uint64_t std::unique_lock<HSMapper::Maps>::unique_lock[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 1;
  HSMapper::Maps::lock(*(os_unfair_lock_s **)a1);
  return a1;
}

uint64_t std::unordered_map<unsigned long long,objc_object * {__strong}>::find[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(a1, a2);
  std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>>::__hash_map_iterator[abi:ne180100](&v4, v3);
  return v4;
}

uint64_t std::unordered_map<unsigned long long,objc_object * {__strong}>::end[abi:ne180100]()
{
  uint64_t v1 = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::end();
  std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>>::__hash_map_iterator[abi:ne180100](&v2, v1);
  return v2;
}

void std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>>::operator->[abi:ne180100]()
{
}

uint64_t std::unique_lock<HSMapper::Maps>::~unique_lock[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  if (*(unsigned char *)(a1 + 8)) {
    HSMapper::Maps::unlock(*(os_unfair_lock_s **)a1);
  }
  return a1;
}

void HSMapper::Maps::lock(os_unfair_lock_s *this)
{
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  unint64_t v16 = std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>::operator()[abi:ne180100](v2, a2);
  unint64_t v15 = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::bucket_count[abi:ne180100]();
  if (v15)
  {
    uint64_t v14 = std::__constrain_hash[abi:ne180100](v16, v15);
    uint64_t v12 = *(void ***)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v14);
    if (v12)
    {
      for (unint64_t i = *v12; ; unint64_t i = (void *)*i)
      {
        BOOL v10 = 0;
        if (i)
        {
          BOOL v9 = 1;
          if (std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i) != v16)
          {
            unint64_t v3 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i);
            BOOL v9 = std::__constrain_hash[abi:ne180100](v3, v15) == v14;
          }
          BOOL v10 = v9;
        }
        if (!v10) {
          break;
        }
        if (std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i) == v16)
        {
          std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
          uint64_t v8 = v4;
          std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
          uint64_t v6 = std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100](v5);
          if (std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>::operator()[abi:ne180100](v8, v6, a2))
          {
            std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](&v18, (uint64_t)i);
            return v18;
          }
        }
      }
    }
  }
  return std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::end();
}

void *std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>>::__hash_map_iterator[abi:ne180100](void *a1, uint64_t a2)
{
  return a1;
}

uint64_t std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  return std::__scalar_hash<unsigned long long,1ul>::operator()[abi:ne180100](a1, *a2);
}

BOOL std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, void *a3)
{
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  return std::equal_to<HSStage * {__strong}>::operator()[abi:ne180100](a1, v3, a3);
}

uint64_t std::__scalar_hash<unsigned long long,1ul>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return a2;
}

void *std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>>::__hash_map_iterator[abi:ne180100](void *result, uint64_t a2)
{
  std::__shared_weak_count *result = a2;
  return result;
}

void std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>::operator->[abi:ne180100]()
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100](v0);
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
}

void HSMapper::Maps::unlock(os_unfair_lock_s *this)
{
}

BOOL std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::empty[abi:ne180100](void *a1)
{
  return *a1 == a1[1];
}

uint64_t std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::back[abi:ne180100](uint64_t a1)
{
  return *(void *)(a1 + 8) - 8;
}

void *std::unique_ptr<HSUtil::EncoderBuf>::unique_ptr[abi:ne180100](void *a1, uint64_t a2)
{
  return a1;
}

{
  void v4[3];

  unint64_t v4[2] = a1;
  v4[1] = a2;
  v4[0] = std::unique_ptr<std::__hash_node<HSStage * {__strong},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::release[abi:ne180100]();
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  std::__compressed_pair<unsigned long,std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *>>::__compressed_pair[abi:ne180100]<unsigned long &,std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> * const&>(a1, v4);
  return a1;
}

void std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::pop_back(void *a1)
{
}

void HSUtil::Encoder::clear(HSUtil::Encoder *this)
{
  if (HSUtil::Coder::ok(this))
  {
    std::vector<HSUtil::Encoder::ContainerRecord>::clear[abi:ne180100]((uint64_t *)this + 7);
    if (*((void *)this + 17) <= (unint64_t)(-1 - *((void *)this + 13)))
    {
      *((void *)this + 13) += *((void *)this + 17);
      *((void *)this + 1std::vector<HSUtil::Encoder::ContainerRecord>::~vector[abi:ne180100]((uint64_t *)this + 7) = 0;
      *(_DWORD *)this = 0;
    }
    else
    {
      *(_DWORD *)this = 14;
    }
  }
}

void std::make_unique[abi:ne180100]<HSUtil::EncoderBuf>()
{
}

void sub_99FC0(uint64_t a1, int a2)
{
  *(void *)(v2 - std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a9 + 16) = a1;
  *(_DWORD *)(v2 - 2objc_storeStrong(&location, 0) = a2;
  operator delete();
}

uint64_t HSUtil::Encoder::setCallbacks(HSUtil::Encoder *this, const HSUtil::Encoder::Callbacks *a2)
{
  uint64_t result = HSUtil::Coder::fatalError(this);
  if ((result & 1) == 0) {
    return HSUtil::Encoder::Callbacks::operator=((uint64_t)this + 8, (uint64_t)a2);
  }
  return result;
}

void *std::function<BOOL ()(HSUtil::Encoder &,objc_object *)>::function<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},void>(void *a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t v4;

  uint64_t v4 = a2;
  std::__function::__value_func<BOOL ()(HSUtil::Encoder &,objc_object *)>::__value_func[abi:ne180100]<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},0>(a1, (uint64_t)&v4);
  return a1;
}

void std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::__destruct_at_end[abi:ne180100](void *a1, uint64_t a2)
{
}

void *std::unique_ptr<HSUtil::EncoderBuf>::unique_ptr[abi:ne180100]<true,void>(void *a1, uint64_t a2)
{
  return a1;
}

{
  void v4[2];

  v4[1] = a1;
  v4[0] = a2;
  std::__compressed_pair<HSUtil::Decoder::Callbacks *,std::default_delete<HSUtil::Decoder::Callbacks>>::__compressed_pair[abi:ne180100]<HSUtil::Decoder::Callbacks *&,std::__value_init_tag>(a1, v4);
  return a1;
}

uint64_t HSUtil::Encoder::Callbacks::operator=(uint64_t a1, uint64_t a2)
{
  std::function<BOOL ()(HSUtil::Encoder &,objc_object *)>::operator=(a1, a2);
  return a1;
}

uint64_t std::function<BOOL ()(HSUtil::Encoder &,objc_object *)>::operator=(uint64_t a1, uint64_t a2)
{
  std::function<BOOL ()(HSUtil::Encoder &,objc_object *)>::function((uint64_t)v4, a2);
  std::function<BOOL ()(HSUtil::Encoder &,objc_object *)>::swap((uint64_t)v4, a1);
  std::function<BOOL ()(HSUtil::Encoder &,objc_object *)>::~function((uint64_t)v4);
  return a1;
}

uint64_t std::function<BOOL ()(HSUtil::Encoder &,objc_object *)>::function(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  std::__function::__value_func<BOOL ()(HSUtil::Encoder &,objc_object *)>::__value_func[abi:ne180100](a1, a2);
  return a1;
}

void std::function<BOOL ()(HSUtil::Encoder &,objc_object *)>::swap(uint64_t a1, uint64_t a2)
{
}

uint64_t std::__function::__value_func<BOOL ()(HSUtil::Encoder &,objc_object *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t v2;

  if (*(void *)(a2 + 24))
  {
    if (*(void *)(a2 + 24) == a2)
    {
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      *(void *)(a1 + 24) = v2;
      (*(void (**)(void, void))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), *(void *)(a1 + 24));
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 16))(*(void *)(a2 + 24));
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::__function::__value_func<BOOL ()(HSUtil::Encoder &,objc_object *)>::swap[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    if (*(void *)(a1 + 24) == a1 && *(void *)(a2 + 24) == a2)
    {
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      uint64_t v15 = v2;
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24), v2);
      (*(void (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24));
      *(void *)(a1 + 24) = 0;
      uint64_t v13 = *(void *)(a2 + 24);
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 24))(v13, v3);
      (*(void (**)(void))(**(void **)(a2 + 24) + 32))(*(void *)(a2 + 24));
      *(void *)(a2 + 24) = 0;
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      *(void *)(a1 + 24) = v4;
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 24))(v15, v5);
      (*(void (**)(uint64_t))(*(void *)v15 + 32))(v15);
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      *(void *)(a2 + 24) = v6;
    }
    else if (*(void *)(a1 + 24) == a1)
    {
      uint64_t v12 = *(void *)(a1 + 24);
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 24))(v12, v7);
      (*(void (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24));
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      *(void *)(a2 + 24) = v8;
    }
    else if (*(void *)(a2 + 24) == a2)
    {
      uint64_t v11 = *(void *)(a2 + 24);
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 24))(v11, v9);
      (*(void (**)(void))(**(void **)(a2 + 24) + 32))(*(void *)(a2 + 24));
      *(void *)(a2 + 24) = *(void *)(a1 + 24);
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      *(void *)(a1 + 24) = v10;
    }
    else
    {
      std::swap[abi:ne180100]<HSUtil::Encoder::ContainerRecord *>((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
    }
  }
}

void sub_9A7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(HSUtil::Encoder &,objc_object *)>::__value_func[abi:ne180100]<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},0>(void *a1, uint64_t a2)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>::allocator[abi:ne180100]((uint64_t)&v5);
  std::__function::__value_func<BOOL ()(HSUtil::Encoder &,objc_object *)>::__value_func[abi:ne180100]<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>>(a1, a2, (uint64_t)&v5);
  return a1;
}

void *std::__function::__value_func<BOOL ()(HSUtil::Encoder &,objc_object *)>::__value_func[abi:ne180100]<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>>(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  uint64_t v4;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  uint64_t v10 = a1;
  uint64_t v9 = a2;
  uint64_t v8 = a3;
  uint64_t v11 = a1;
  a1[3] = 0;
  if (std::__function::__not_null[abi:ne180100]<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1}>())
  {
    std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v7);
    uint64_t v4 = v9;
    std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v6);
    std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>::__func[abi:ne180100](a1, v4, (uint64_t)&v6);
    a1[3] = a1;
  }
  return v11;
}

void *std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>::__func[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  std::__function::__base<BOOL ()(HSUtil::Encoder &,objc_object *)>::__base[abi:ne180100](a1);
  *a1 = off_142270;
  std::__function::__alloc_func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>::__alloc_func[abi:ne180100](a1 + 1, a2, a3);
  return a1;
}

{
  std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>::__func[abi:ne180100](a1, a2, a3);
  return a1;
}

{
  std::__function::__base<BOOL ()(HSUtil::Encoder &,objc_object *)>::__base[abi:ne180100](a1);
  *a1 = off_142270;
  std::__function::__alloc_func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>::__alloc_func[abi:ne180100](a1 + 1, a2, a3);
  return a1;
}

{
  std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>::__func[abi:ne180100](a1, a2, a3);
  return a1;
}

{
  std::__function::__base<BOOL ()(HSUtil::Encoder &,objc_object *)>::__base[abi:ne180100](a1);
  *a1 = off_142270;
  std::__function::__alloc_func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>::__alloc_func[abi:ne180100](a1 + 1, a2, a3);
  return a1;
}

void sub_9AA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

uint64_t std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>::~__func(uint64_t a1)
{
}

uint64_t std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>::__clone(uint64_t a1)
{
  uint64_t v11 = a1;
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v10);
  uint64_t v4 = std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocate[abi:ne180100]((uint64_t)&v10, 1uLL);
  std::__allocator_destructor<std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>>::__allocator_destructor[abi:ne180100](&v8, (uint64_t)&v10, 1);
  std::unique_ptr<std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>,std::__allocator_destructor<std::allocator<std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>>>>::unique_ptr[abi:ne180100]<true,void>((uint64_t)v9, (uint64_t)v4, &v8);
  char v5 = (void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  uint64_t v6 = v1;
  std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)v7);
  std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>::__func[abi:ne180100](v5, v6, (uint64_t)v7);
  uint64_t v3 = std::unique_ptr<std::__hash_node<HSStage * {__strong},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::release[abi:ne180100]();
  std::unique_ptr<std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>,std::__allocator_destructor<std::allocator<std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>>>>::~unique_ptr[abi:ne180100]((uint64_t)v9);
  return v3;
}

void sub_9ABB0(uint64_t a1, int a2)
{
  *(void *)(v2 - 64) = a1;
  *(_DWORD *)(v2 - 68) = a2;
  std::unique_ptr<std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>,std::__allocator_destructor<std::allocator<std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>>>>::~unique_ptr[abi:ne180100](v2 - 40);
  _Unwind_Resume(*(_Unwind_Exception **)(v2 - 64));
}

void *std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  uint64_t v5 = v2;
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  return std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>::__func[abi:ne180100](a2, v5, v3);
}

void std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>::destroy()
{
}

void std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>::destroy_deallocate(void *a1)
{
  uint64_t v3 = a1;
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v2);
  std::vector<HSUtil::CoderKey const*>::__annotate_delete[abi:ne180100]();
  std::allocator<std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::deallocate[abi:ne180100]((uint64_t)&v2, a1, 1);
}

uint64_t std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>::operator()(uint64_t a1, HSUtil::Encoder *a2, id *a3)
{
  return std::__function::__alloc_func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>::operator()[abi:ne180100](a1 + 8, a2, a3) & 1;
}

uint64_t std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>::target(uint64_t a1, uint64_t a2)
{
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  return v2;
}

_UNKNOWN **std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>::target_type()
{
}

uint64_t std::unique_ptr<std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>,std::__allocator_destructor<std::allocator<std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>>>>::unique_ptr[abi:ne180100]<true,void>(uint64_t a1, uint64_t a2, __n128 *a3)
{
  return a1;
}

{
  void v5[2];

  v5[1] = a1;
  v5[0] = a2;
  std::__compressed_pair<std::__hash_node<HSStage * {__strong},void *> *,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::__compressed_pair[abi:ne180100]<std::__hash_node<HSStage * {__strong},void *> *&,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>(a1, v5, a3);
  return a1;
}

uint64_t std::unique_ptr<std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>,std::__allocator_destructor<std::allocator<std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>,std::__allocator_destructor<std::allocator<std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>>>>::reset[abi:ne180100](a1, 0);
  return a1;
}

void sub_9AEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

void std::unique_ptr<std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>,std::__allocator_destructor<std::allocator<std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  uint64_t v5 = *v2;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__allocator_destructor<std::allocator<std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>>>::operator()[abi:ne180100](v4, v5);
  }
}

void std::__allocator_destructor<std::allocator<std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>>>::operator()[abi:ne180100](uint64_t *a1, void *a2)
{
}

void std::allocator_traits<std::allocator<std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::allocator<std::__function::__func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void sub_9B114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

uint64_t std::__function::__alloc_func<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1},std::allocator<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}>,BOOL ()(HSUtil::Encoder &,objc_object *)>::operator()[abi:ne180100](uint64_t a1, HSUtil::Encoder *a2, id *a3)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  return std::__invoke_void_return_wrapper<BOOL,false>::__call[abi:ne180100]<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1} &,HSUtil::Encoder &,objc_object * {__strong}>(v3, a2, a3) & 1;
}

uint64_t std::__invoke_void_return_wrapper<BOOL,false>::__call[abi:ne180100]<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1} &,HSUtil::Encoder &,objc_object * {__strong}>(HSMapper **a1, HSUtil::Encoder *a2, id *a3)
{
  return std::__invoke[abi:ne180100]<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1} &,HSUtil::Encoder &,objc_object * {__strong}>(a1, a2, a3) & 1;
}

uint64_t std::__invoke[abi:ne180100]<HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1} &,HSUtil::Encoder &,objc_object * {__strong}>(HSMapper **a1, HSUtil::Encoder *a2, id *a3)
{
  return HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}::operator()(a1, a2, *a3) & 1;
}

uint64_t HSMapper::_popEncoderBuf(void)::{lambda(HSUtil::Encoder &,objc_object *)#1}::operator()(HSMapper **a1, HSUtil::Encoder *a2, id obj)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  char v4 = HSMapper::_encodeObject(*v7, v6, location);
  objc_storeStrong(&location, 0);
  return v4 & 1;
}

void sub_9B25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, id location)
{
}

uint64_t HSMapper::_encodeObject(HSMapper *this, HSUtil::Encoder *a2, id obj)
{
  uint64_t v20 = this;
  uint64_t v19 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  char v10 = v20;
  objc_opt_class();
  if (objc_opt_respondsToSelector())
  {
    char v16 = 0;
    objc_opt_class();
    BOOL v9 = 0;
    if (objc_opt_isKindOfClass())
    {
      std::weak_ptr<HSMapper>::lock((uint64_t)location + 16, v17);
      char v16 = 1;
      BOOL v9 = std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)v17) == (void)v10;
    }
    if (v16) {
      std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v17);
    }
    if (v9)
    {
      uint64_t v15 = (LocalObject *)HSMapper::_idForProxy(v10, (HSProxy *)location);
      uint64_t v7 = v19;
      Type = (const CoderKey *)LocalObject::GetType(v15);
      HSUtil::Encoder::encodeObjectStart(v7, Type, 4u);
      HSUtil::Encoder::encodeCodable<LocalObject>(v19, (LocalObject *)&v15);
      HSUtil::Encoder::encodeObjectStop(v19);
      char v21 = 1;
      int v14 = 1;
    }
    else
    {
      id v13 = [(id)objc_opt_class() hsProxyClass];
      if (v13)
      {
        id v11 = v13;
        uint64_t v12 = (RemoteObject *)HSMapper::_idForObject(v10, (objc_object *)location);
        uint64_t v5 = v19;
        uint64_t v6 = (const CoderKey *)RemoteObject::GetType(v12);
        HSUtil::Encoder::encodeObjectStart(v5, v6, 4u);
        HSUtil::Encoder::encodeCodable<RemoteObject>(v19, (RemoteObject *)&v11);
        HSUtil::Encoder::encodeObjectStop(v19);
        char v21 = 1;
      }
      else
      {
        char v21 = 0;
      }
      int v14 = 1;
    }
  }
  else
  {
    char v21 = HSUtil::Encoder::EncodeObject(v19, (HSUtil::Encoder *)location, v3) & 1;
    int v14 = 1;
  }
  objc_storeStrong(&location, 0);
  return v21 & 1;
}

uint64_t HSMapper::_idForProxy(HSMapper *this, HSProxy *a2)
{
  location[1] = this;
  location[0] = 0;
  objc_storeStrong(location, a2);
  uint64_t v3 = *((void *)location[0] + 1);
  objc_storeStrong(location, 0);
  return v3;
}

uint64_t LocalObject::GetType(LocalObject *this)
{
  {
    LocalObject::GetType(void)::os_log_type_t type = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSRemoteObject.LocalObject", v1);
  }
  return LocalObject::GetType(void)::type;
}

BOOL HSUtil::Encoder::encodeCodable<LocalObject>(HSUtil::Coder *a1, LocalObject *a2)
{
  BOOL result = HSUtil::Coder::ok(a1);
  if (result)
  {
    HSUtil::Encoder::_encodeCodable<LocalObject>(a1, a2);
    return HSUtil::Coder::ok(a1);
  }
  return result;
}

uint64_t RemoteObject::GetType(RemoteObject *this)
{
  {
    RemoteObject::GetType(void)::os_log_type_t type = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSRemoteObject.RemoteObject", v1);
  }
  return RemoteObject::GetType(void)::type;
}

BOOL HSUtil::Encoder::encodeCodable<RemoteObject>(HSUtil::Coder *a1, RemoteObject *a2)
{
  BOOL result = HSUtil::Coder::ok(a1);
  if (result)
  {
    HSUtil::Encoder::_encodeCodable<RemoteObject>(a1, a2);
    return HSUtil::Coder::ok(a1);
  }
  return result;
}

BOOL HSUtil::Encoder::_encodeCodable<LocalObject>(HSUtil::Encoder *a1, LocalObject *a2)
{
  char v4 = LocalObject::encode(a2, a1) & 1;
  BOOL result = HSUtil::Coder::ok(a1);
  if (result && (v4 & 1) == 0) {
    *(_DWORD *)a1 = 10;
  }
  return result;
}

uint64_t LocalObject::encode(LocalObject *this, HSUtil::Encoder *a2)
{
  return 1;
}

BOOL HSUtil::Encoder::_encodeCodable<RemoteObject>(HSUtil::Encoder *a1, RemoteObject *a2)
{
  char v4 = RemoteObject::encode(a2, a1) & 1;
  BOOL result = HSUtil::Coder::ok(a1);
  if (result && (v4 & 1) == 0) {
    *(_DWORD *)a1 = 10;
  }
  return result;
}

uint64_t RemoteObject::encode(RemoteObject *this, HSUtil::Encoder *a2)
{
  HSUtil::Encoder::encodeArrayStart(a2, 1u);
  Name = class_getName(*(Class *)this);
  HSUtil::Encoder::encodeString(a2, Name);
  HSUtil::Encoder::encodeUInt(a2, *((void *)this + 1));
  HSUtil::Encoder::encodeObjectStop(a2);
  return 1;
}

__n128 *HSUtil::DeferredFn<HSMapper::_messageHandler(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)::{lambda(void)#1}>::DeferredFn(__n128 *a1, __n128 *a2)
{
  return a1;
}

BOOL HSUtil::Encoder::_encodeCodable<Message>(HSUtil::Encoder *a1, Message *a2)
{
  char v4 = Message::encode(a2, a1) & 1;
  BOOL result = HSUtil::Coder::ok(a1);
  if (result && (v4 & 1) == 0) {
    *(_DWORD *)a1 = 10;
  }
  return result;
}

uint64_t Message::encode(Message *this, HSUtil::Encoder *a2)
{
  HSUtil::Encoder::encodeArrayStart(a2, 4u);
  HSUtil::Encoder::encodeUInt(a2, *(void *)this);
  if (*((void *)this + 1))
  {
    Name = sel_getName(*((SEL *)this + 1));
    HSUtil::Encoder::encodeString(a2, Name);
  }
  else
  {
    HSUtil::Encoder::encodeString(a2, "");
  }
  HSUtil::Encoder::encodeObject(a2, *((objc_object **)this + 2));
  HSUtil::Encoder::encodeObject(a2, *((objc_object **)this + 3));
  HSUtil::Encoder::encodeObject(a2, *((objc_object **)this + 4));
  HSUtil::Encoder::encodeObjectStop(a2);
  return 1;
}

uint64_t HSUtil::Buffer::Buffer(uint64_t a1, const void *a2, size_t a3)
{
  if (HSUtil::Buffer::valid((HSUtil::Buffer *)a1))
  {
    memmove(*(void **)(a1 + 40), a2, a3);
    *(void *)(a1 + 48) = a3;
  }
  return a1;
}

uint64_t HSMapper::_messageHandler(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)::{lambda(void)#1}::operator()(uint64_t *a1)
{
  v3[1] = a1;
  uint64_t v2 = *a1;
  std::unique_ptr<HSUtil::EncoderBuf>::unique_ptr[abi:ne180100](v3, a1[1]);
  HSMapper::_pushEncoderBuf(v2, (uint64_t)v3);
  return std::unique_ptr<HSUtil::EncoderBuf>::~unique_ptr[abi:ne180100]((uint64_t)v3);
}

void sub_9BBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, _Unwind_Exception *exception_object)
{
  std::unique_ptr<HSUtil::EncoderBuf>::~unique_ptr[abi:ne180100](v13 - 16);
  _Unwind_Resume(a1);
}

uint64_t HSMapper::_pushEncoderBuf(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  std::unique_lock<std::mutex>::unique_lock[abi:ne180100]((uint64_t)v5, a1 + 216);
  std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::push_back[abi:ne180100]((uint64_t *)(a1 + 280), a2);
  return std::unique_lock<std::mutex>::~unique_lock[abi:ne180100]((uint64_t)v5);
}

void sub_9BC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, _Unwind_Exception *exception_object, char a14)
{
}

uint64_t std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v5 = a1[1];
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  if (v5 >= *v2)
  {
    uint64_t result = std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::__push_back_slow_path<std::unique_ptr<HSUtil::EncoderBuf>>(a1, a2);
    uint64_t v6 = result;
  }
  else
  {
    uint64_t result = (uint64_t)std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::__construct_one_at_end[abi:ne180100]<std::unique_ptr<HSUtil::EncoderBuf>>((uint64_t)a1, a2);
    uint64_t v6 = v5 + 8;
  }
  a1[1] = v6;
  return result;
}

void *std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::__construct_one_at_end[abi:ne180100]<std::unique_ptr<HSUtil::EncoderBuf>>(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::_ConstructTransaction::_ConstructTransaction[abi:ne180100](&v6, a1, 1);
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v5 = v2;
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  std::allocator_traits<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>>::construct[abi:ne180100]<std::unique_ptr<HSUtil::EncoderBuf>,std::unique_ptr<HSUtil::EncoderBuf>,void>(v5, v3, v8);
  v7 += 8;
  return std::vector<HSUtil::Encoder::ContainerRecord>::_ConstructTransaction::~_ConstructTransaction[abi:ne180100](&v6);
}

void sub_9BD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, _Unwind_Exception *exception_object, uint64_t a15)
{
}

uint64_t std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::__push_back_slow_path<std::unique_ptr<HSUtil::EncoderBuf>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v15 = a1;
  uint64_t v14 = a2;
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v13 = v2;
  uint64_t v3 = std::vector<std::atomic<HSUtil::CoderKey const*>>::size[abi:ne180100](a1);
  unint64_t v9 = std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::__recommend[abi:ne180100](a1, v3 + 1);
  uint64_t v4 = std::vector<std::atomic<HSUtil::CoderKey const*>>::size[abi:ne180100](a1);
  std::__split_buffer<std::unique_ptr<HSUtil::EncoderBuf>>::__split_buffer(v11, v9, v4, v13);
  uint64_t v10 = v13;
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  std::allocator_traits<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>>::construct[abi:ne180100]<std::unique_ptr<HSUtil::EncoderBuf>,std::unique_ptr<HSUtil::EncoderBuf>,void>(v10, v5, v14);
  v12 += 8;
  std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::__swap_out_circular_buffer(a1, v11);
  uint64_t v7 = a1[1];
  std::__split_buffer<std::unique_ptr<HSUtil::EncoderBuf>>::~__split_buffer(v11);
  return v7;
}

void sub_9BE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, _Unwind_Exception *exception_object, void *a16)
{
}

void *std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::_ConstructTransaction::_ConstructTransaction[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

void *std::allocator_traits<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>>::construct[abi:ne180100]<std::unique_ptr<HSUtil::EncoderBuf>,std::unique_ptr<HSUtil::EncoderBuf>,void>(uint64_t a1, void *a2, uint64_t a3)
{
  return std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>::construct[abi:ne180100]<std::unique_ptr<HSUtil::EncoderBuf>,std::unique_ptr<HSUtil::EncoderBuf>>(a1, a2, a3);
}

void *std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::_ConstructTransaction::_ConstructTransaction[abi:ne180100](void *result, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *result = a2;
  result[1] = *(void *)(a2 + 8);
  result[2] = *(void *)(a2 + 8) + 8 * a3;
  return result;
}

void *std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>::construct[abi:ne180100]<std::unique_ptr<HSUtil::EncoderBuf>,std::unique_ptr<HSUtil::EncoderBuf>>(uint64_t a1, void *a2, uint64_t a3)
{
  return std::unique_ptr<HSUtil::EncoderBuf>::unique_ptr[abi:ne180100](a2, a3);
}

unint64_t std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::__recommend[abi:ne180100](void *a1, uint64_t a2)
{
  v7[1] = a1;
  v7[0] = a2;
  unint64_t v6 = std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::max_size((uint64_t)a1);
  if (v7[0] > v6) {
    std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v5 = std::vector<HSUtil::CoderKey const*>::capacity[abi:ne180100](a1);
  if (v5 >= v6 / 2) {
    return v6;
  }
  uint64_t v4 = 2 * v5;
  return *std::max[abi:ne180100]<unsigned long>(&v4, v7);
}

void **std::__split_buffer<std::unique_ptr<HSUtil::EncoderBuf>>::__split_buffer(void **a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1;
}

{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v9;
  void v11[2];
  uint64_t v12;
  unint64_t v13;
  void **v14;
  void **v15;

  uint64_t v14 = a1;
  uint64_t v13 = a2;
  uint64_t v12 = a3;
  v11[1] = a4;
  uint64_t v15 = a1;
  v11[0] = 0;
  std::__compressed_pair<HSUtil::Encoder::ContainerRecord *>::__compressed_pair[abi:ne180100]<decltype(nullptr),std::allocator<HSUtil::Encoder::ContainerRecord> &>(a1 + 3, (uint64_t)v11, a4);
  if (v13)
  {
    uint64_t v4 = std::__split_buffer<HSUtil::Encoder::ContainerRecord>::__alloc[abi:ne180100]((uint64_t)a1);
    *a1 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>>(v4, v13);
    uint64_t v13 = v5;
  }
  else
  {
    *a1 = 0;
  }
  unint64_t v6 = (uint64_t)*a1 + 8 * v12;
  a1[2] = (void *)v6;
  a1[1] = (void *)v6;
  unint64_t v9 = (unint64_t)*a1 + 8 * v13;
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  HSUtil::Coder *v7 = v9;
  return v15;
}

void std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v15 = a1;
  uint64_t v14 = a2;
  std::vector<HSUtil::CoderKey const*>::__annotate_delete[abi:ne180100]();
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v7 = v2;
  std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>::reverse_iterator[abi:ne180100](v12, a1[1]);
  std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>::reverse_iterator[abi:ne180100](v11, *a1);
  std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>::reverse_iterator[abi:ne180100](v10, v14[1]);
  v13[0] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>>(v7, v12[0], v12[1], v11[0], v11[1], v10[0], v10[1]);
  v13[1] = v3;
  uint64_t v4 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)v13);
  v14[1] = v4;
  std::swap[abi:ne180100]<HSUtil::Encoder::ContainerRecord *>(a1, v14 + 1);
  std::swap[abi:ne180100]<HSUtil::Encoder::ContainerRecord *>(a1 + 1, v14 + 2);
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v8 = v5;
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  std::swap[abi:ne180100]<HSUtil::Encoder::ContainerRecord *>(v8, v6);
  *uint64_t v14 = v14[1];
  std::vector<std::atomic<HSUtil::CoderKey const*>>::size[abi:ne180100](a1);
  std::allocator<HSUtil::CoderKey const*>::destroy[abi:ne180100]();
}

void **std::__split_buffer<std::unique_ptr<HSUtil::EncoderBuf>>::~__split_buffer(void **a1)
{
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  std::__split_buffer<std::unique_ptr<HSUtil::EncoderBuf>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
  {
    uint64_t v2 = std::__split_buffer<HSUtil::Encoder::ContainerRecord>::__alloc[abi:ne180100]((uint64_t)a1);
    uint64_t v3 = *a1;
    uint64_t v4 = std::__split_buffer<std::unique_ptr<HSUtil::EncoderBuf>>::capacity[abi:ne180100](a1);
    std::allocator_traits<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>>::deallocate[abi:ne180100](v2, v3, v4);
  }
  return a1;
}

uint64_t std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::max_size(uint64_t a1)
{
  v3[1] = a1;
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  v3[0] = std::allocator_traits<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::max_size[abi:ne180100]<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>,void>();
  uint64_t v2 = std::numeric_limits<long>::max[abi:ne180100]();
  return *std::min[abi:ne180100]<unsigned long>(v3, &v2);
}

void std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>>(uint64_t a1, unint64_t a2)
{
  return std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>::allocate[abi:ne180100](a1, a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v18[0] = a2;
  v18[1] = a3;
  v17[0] = a4;
  v17[1] = a5;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + MTRestZoneIntegrator_::clearMotion(this, 1) = a7;
  uint64_t v15 = a1;
  long long v14 = v16;
  std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>>::_AllocatorDestroyRangeReverse[abi:ne180100](&v12, a1, (uint64_t)&v14, (uint64_t)&v16);
  std::__make_exception_guard[abi:ne180100]<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>>>(&v12, v13);
  while (std::operator!=[abi:ne180100]<HSUtil::Encoder::ContainerRecord *,HSUtil::Encoder::ContainerRecord *>((uint64_t)v18, (uint64_t)v17))
  {
    uint64_t v9 = v15;
    std::__to_address[abi:ne180100]<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>,void>((uint64_t)&v16);
    uint64_t v10 = v7;
    uint64_t v11 = std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>::operator*[abi:ne180100]((uint64_t)v18);
    std::allocator_traits<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>>::construct[abi:ne180100]<std::unique_ptr<HSUtil::EncoderBuf>,std::unique_ptr<HSUtil::EncoderBuf>,void>(v9, v10, v11);
    std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>::operator++[abi:ne180100]((uint64_t)v18);
    std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>::operator++[abi:ne180100]((uint64_t)&v16);
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>>>::__complete[abi:ne180100]((uint64_t)v13);
  long long v19 = v16;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v19;
}

__n128 *std::__make_exception_guard[abi:ne180100]<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>>>@<X0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v6 = a2;
  unint64_t v5 = a1;
  __n128 v3 = *a1;
  unint64_t v4 = a1[1].n128_u64[0];
  return std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>>>::__exception_guard_exceptions[abi:ne180100](a2, &v3);
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>>::_AllocatorDestroyRangeReverse[abi:ne180100](void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1;
}

void std::__to_address[abi:ne180100]<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>,void>(uint64_t a1)
{
}

uint64_t std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>::operator*[abi:ne180100](uint64_t a1)
{
  return *(void *)(a1 + 8) - 8;
}

uint64_t std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>::operator++[abi:ne180100](uint64_t result)
{
  *(void *)(result + 8) -= 8;
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>>>::__complete[abi:ne180100](uint64_t result)
{
  *(unsigned char *)(result + 24) = 1;
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

__n128 *std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>>>::__exception_guard_exceptions[abi:ne180100](__n128 *a1, __n128 *a2)
{
  return a1;
}

__n128 std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>>>::__exception_guard_exceptions[abi:ne180100](__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a1[1].n128_u8[8] = 0;
  return result;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>>::_AllocatorDestroyRangeReverse[abi:ne180100](void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

void std::__to_address_helper<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>,void>::__call[abi:ne180100](uint64_t a1)
{
}

uint64_t std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>::operator->[abi:ne180100](uint64_t a1)
{
  return std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>::operator*[abi:ne180100](a1);
}

BOOL std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v3 = *(void *)a1;
  std::reverse_iterator<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>>::reverse_iterator[abi:ne180100]((uint64_t)v5, **(void **)(a1 + 16), *(void *)(*(void *)(a1 + 16) + 8));
  std::reverse_iterator<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>>::reverse_iterator[abi:ne180100]((uint64_t)v4, **(void **)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 8));
  return std::__allocator_destroy[abi:ne180100]<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>>>(v3, (uint64_t)v5, (uint64_t)v4);
}

BOOL std::__allocator_destroy[abi:ne180100]<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  while (1)
  {
    BOOL result = std::operator!=[abi:ne180100]<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>>(a2, a3);
    if (!result) {
      break;
    }
    std::__to_address[abi:ne180100]<std::reverse_iterator<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>>,void>(a2);
    std::allocator_traits<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>>::destroy[abi:ne180100]<std::unique_ptr<HSUtil::EncoderBuf>,void>(a1, v4);
    std::reverse_iterator<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>>::operator++[abi:ne180100](a2);
  }
  return result;
}

uint64_t std::reverse_iterator<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>>::reverse_iterator[abi:ne180100](uint64_t a1, unint64_t a2, unint64_t a3)
{
  return a1;
}

BOOL std::operator!=[abi:ne180100]<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>>(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a1;
  uint64_t v7 = a2;
  v6[0] = std::reverse_iterator<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>>::base[abi:ne180100](a1);
  v6[1] = v2;
  v5[0] = std::reverse_iterator<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>>::base[abi:ne180100](v7);
  v5[1] = v3;
  return std::operator!=[abi:ne180100]<HSUtil::Encoder::ContainerRecord *,HSUtil::Encoder::ContainerRecord *>((uint64_t)v6, (uint64_t)v5);
}

void std::__to_address[abi:ne180100]<std::reverse_iterator<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>>,void>(uint64_t a1)
{
}

uint64_t std::reverse_iterator<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>>::operator++[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t std::reverse_iterator<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>>::base[abi:ne180100](uint64_t a1)
{
  return *(void *)(a1 + 24);
}

void std::__to_address_helper<std::reverse_iterator<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>>,void>::__call[abi:ne180100](uint64_t a1)
{
}

uint64_t std::reverse_iterator<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>>::operator->[abi:ne180100](uint64_t a1)
{
  return std::reverse_iterator<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>>::operator*[abi:ne180100](a1);
}

uint64_t std::reverse_iterator<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>>::operator*[abi:ne180100](uint64_t a1)
{
  uint64_t v4 = a1;
  long long v3 = *(_OWORD *)(a1 + 24);
  uint64_t v1 = std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>::operator--[abi:ne180100]((uint64_t)&v3);
  return std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>::operator*[abi:ne180100](v1);
}

uint64_t std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>::operator--[abi:ne180100](uint64_t result)
{
  *(void *)(result + 8) += 8;
  return result;
}

__n128 std::reverse_iterator<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>>::reverse_iterator[abi:ne180100](uint64_t a1, unint64_t a2, unint64_t a3)
{
  v4.n128_u64[0] = a2;
  v4.n128_u64[1] = a3;
  *(__n128 *)(a1 + 8) = v4;
  __n128 result = v4;
  *(__n128 *)(a1 + 24) = v4;
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<HSUtil::EncoderBuf>>::clear[abi:ne180100](uint64_t a1)
{
  return std::__split_buffer<std::unique_ptr<HSUtil::EncoderBuf>>::__destruct_at_end[abi:ne180100](a1, *(void *)(a1 + 8));
}

uint64_t std::__split_buffer<std::unique_ptr<HSUtil::EncoderBuf>>::capacity[abi:ne180100](void *a1)
{
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  return (*v1 - *a1) / 8;
}

uint64_t std::__split_buffer<std::unique_ptr<HSUtil::EncoderBuf>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return std::__split_buffer<std::unique_ptr<HSUtil::EncoderBuf>>::__destruct_at_end[abi:ne180100](a1, a2);
}

uint64_t std::__split_buffer<std::unique_ptr<HSUtil::EncoderBuf>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v4 = result;
  while (a2 != *(void *)(v4 + 16))
  {
    uint64_t v3 = std::__split_buffer<HSUtil::Encoder::ContainerRecord>::__alloc[abi:ne180100](v4);
    *(void *)(v4 + 16) -= 8;
    std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
    __n128 result = std::allocator_traits<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>>::destroy[abi:ne180100]<std::unique_ptr<HSUtil::EncoderBuf>,void>(v3, v2);
  }
  return result;
}

void *std::__function::__value_func<void ()(std::shared_ptr<HSUtil::Connection>)>::__value_func[abi:ne180100]<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},0>(void *a1, uint64_t a2)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>::allocator[abi:ne180100]((uint64_t)&v5);
  std::__function::__value_func<void ()(std::shared_ptr<HSUtil::Connection>)>::__value_func[abi:ne180100]<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>>(a1, a2, (uint64_t)&v5);
  return a1;
}

void *std::__function::__value_func<void ()(std::shared_ptr<HSUtil::Connection>)>::__value_func[abi:ne180100]<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>>(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  uint64_t v4;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  uint64_t v10 = a1;
  uint64_t v9 = a2;
  uint64_t v8 = a3;
  uint64_t v11 = a1;
  a1[3] = 0;
  if (std::__function::__not_null[abi:ne180100]<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1}>())
  {
    std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v7);
    uint64_t v4 = v9;
    std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v6);
    std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>::__func[abi:ne180100](a1, v4, (uint64_t)&v6);
    a1[3] = a1;
  }
  return v11;
}

void *std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>::__func[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  std::__function::__base<void ()(std::shared_ptr<HSUtil::Connection>)>::__base[abi:ne180100](a1);
  *a1 = off_142300;
  std::__function::__alloc_func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>::__alloc_func[abi:ne180100](a1 + 1, a2, a3);
  return a1;
}

{
  std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>::__func[abi:ne180100](a1, a2, a3);
  return a1;
}

{
  std::__function::__base<void ()(std::shared_ptr<HSUtil::Connection>)>::__base[abi:ne180100](a1);
  *a1 = off_142300;
  std::__function::__alloc_func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::__alloc_func[abi:ne180100](a1 + 1, a2, a3);
  return a1;
}

{
  std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>::__func[abi:ne180100](a1, a2, a3);
  return a1;
}

{
  std::__function::__base<void ()(std::shared_ptr<HSUtil::Connection>)>::__base[abi:ne180100](a1);
  *a1 = off_142300;
  std::__function::__alloc_func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>::__alloc_func[abi:ne180100](a1 + 1, a2, a3);
  return a1;
}

void sub_9CE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

void *std::__function::__base<void ()(std::shared_ptr<HSUtil::Connection>)>::__base[abi:ne180100](void *result)
{
  std::__shared_weak_count *result = off_142380;
  return result;
}

void *std::__function::__alloc_func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>::__alloc_func[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  uint64_t v5;
  uint64_t v6;

  uint64_t v6 = std::forward_as_tuple[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>(a2);
  char v5 = std::forward_as_tuple[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>(a3);
  std::__compressed_pair<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>>::__compressed_pair[abi:ne180100]<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}&&,std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>&&>(a1, v6, v5);
  return a1;
}

{
  std::__function::__alloc_func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>::__alloc_func[abi:ne180100](a1, a2, a3);
  return a1;
}

{
  uint64_t v5;
  uint64_t v6;

  uint64_t v6 = std::forward_as_tuple[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>(a2);
  char v5 = std::forward_as_tuple[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>(a3);
  std::__compressed_pair<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>>::__compressed_pair[abi:ne180100]<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1} const&,std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}> const&>(a1, v6, v5);
  return a1;
}

void *std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>::~__func(void *a1)
{
  return a1;
}

{
  *a1 = off_142300;
  std::__function::__alloc_func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::~__alloc_func((uint64_t)(a1 + 1));
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  return a1;
}

void std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>::~__func(void *a1)
{
}

uint64_t std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>::__clone(uint64_t a1)
{
  uint64_t v11 = a1;
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v10);
  uint64_t v4 = std::allocator<std::__hash_node<HSStage * {__strong},void *>>::allocate[abi:ne180100]((uint64_t)&v10, 1uLL);
  std::__allocator_destructor<std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>>::__allocator_destructor[abi:ne180100](&v8, (uint64_t)&v10, 1);
  std::unique_ptr<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>,std::__allocator_destructor<std::allocator<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>>>>::unique_ptr[abi:ne180100]<true,void>((uint64_t)v9, (uint64_t)v4, &v8);
  char v5 = (void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  uint64_t v6 = v1;
  std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)v7);
  std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>::__func[abi:ne180100](v5, v6, (uint64_t)v7);
  uint64_t v3 = std::unique_ptr<std::__hash_node<HSStage * {__strong},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::release[abi:ne180100]();
  std::unique_ptr<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>,std::__allocator_destructor<std::allocator<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>>>>::~unique_ptr[abi:ne180100]((uint64_t)v9);
  return v3;
}

void sub_9D060(uint64_t a1, int a2)
{
  *(void *)(v2 - 64) = a1;
  *(_DWORD *)(v2 - 68) = a2;
  std::unique_ptr<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>,std::__allocator_destructor<std::allocator<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>>>>::~unique_ptr[abi:ne180100](v2 - 40);
  _Unwind_Resume(*(_Unwind_Exception **)(v2 - 64));
}

void *std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>::__clone(uint64_t a1, void *a2)
{
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  uint64_t v5 = v2;
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  return std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>::__func[abi:ne180100](a2, v5, v3);
}

uint64_t std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>::destroy_deallocate(void *a1)
{
  uint64_t v3 = a1;
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v2);
  std::__function::__alloc_func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},std::allocator<HSUtil::Buffer &&>,HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  std::allocator<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>>::deallocate[abi:ne180100]((uint64_t)&v2, a1, 1);
}

uint64_t std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>::operator()(uint64_t a1, void *a2)
{
  return std::__function::__alloc_func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>::operator()[abi:ne180100](a1 + 8, a2);
}

uint64_t std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>::target(uint64_t a1, uint64_t a2)
{
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  return v2;
}

_UNKNOWN **std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>::target_type()
{
}

void std::__function::__base<void ()(std::shared_ptr<HSUtil::Connection>)>::~__base()
{
}

{
  __break(1u);
}

void *std::__compressed_pair<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>>::__compressed_pair[abi:ne180100]<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}&&,std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>&&>(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  std::__compressed_pair_elem<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<HSUtil::Buffer &&&&,0ul>(a1, a2);
  std::__compressed_pair_elem<std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,1,true>::__compressed_pair_elem[abi:ne180100]<std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>&&,0ul>((uint64_t)a1, a3);
  return a1;
}

void sub_9D330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

uint64_t std::unique_ptr<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>,std::__allocator_destructor<std::allocator<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>>>>::unique_ptr[abi:ne180100]<true,void>(uint64_t a1, uint64_t a2, __n128 *a3)
{
  return a1;
}

{
  void v5[2];

  v5[1] = a1;
  v5[0] = a2;
  std::__compressed_pair<std::__hash_node<HSStage * {__strong},void *> *,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::__compressed_pair[abi:ne180100]<std::__hash_node<HSStage * {__strong},void *> *&,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>(a1, v5, a3);
  return a1;
}

uint64_t std::unique_ptr<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>,std::__allocator_destructor<std::allocator<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>,std::__allocator_destructor<std::allocator<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>>>>::reset[abi:ne180100](a1, 0);
  return a1;
}

void sub_9D51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

void std::unique_ptr<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>,std::__allocator_destructor<std::allocator<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  uint64_t v5 = *v2;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__allocator_destructor<std::allocator<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>>>::operator()[abi:ne180100](v4, v5);
  }
}

void std::__allocator_destructor<std::allocator<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>>>::operator()[abi:ne180100](uint64_t *a1, void *a2)
{
}

void std::allocator_traits<std::allocator<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::allocator<std::__function::__func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void sub_9D758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

void *std::__compressed_pair<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>>::__compressed_pair[abi:ne180100]<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1} const&,std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}> const&>(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  std::__compressed_pair_elem<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<HSUtil::Buffer && const&,0ul>(a1, a2);
  std::__compressed_pair_elem<std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,1,true>::__compressed_pair_elem[abi:ne180100]<std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>&&,0ul>((uint64_t)a1, a3);
  return a1;
}

void sub_9D8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

uint64_t std::__function::__alloc_func<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1},std::allocator<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}>,void ()(std::shared_ptr<HSUtil::Connection>)>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1} &,std::shared_ptr<HSUtil::Connection>>(v2, a2);
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1} &,std::shared_ptr<HSUtil::Connection>>(uint64_t a1, void *a2)
{
  return std::__invoke[abi:ne180100]<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1} &,std::shared_ptr<HSUtil::Connection>>(a1, a2);
}

uint64_t std::__invoke[abi:ne180100]<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1} &,std::shared_ptr<HSUtil::Connection>>(uint64_t a1, void *a2)
{
  v4[3] = a1;
  unint64_t v4[2] = a2;
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](v4, a2);
  HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}::operator()(a1, v4);
  return std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v4);
}

void sub_9D994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, _Unwind_Exception *exception_object, char a14)
{
}

uint64_t HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>)#1}::operator()(uint64_t a1, void *a2)
{
  v7[3] = a1;
  void v7[2] = a2;
  std::weak_ptr<HSMapper>::lock(a1, v7);
  if (std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::operator BOOL[abi:ne180100]((uint64_t)v7))
  {
    uint64_t v3 = std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)v7);
    std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](v5, a2);
    HSMapper::_statusHandler(v3, (uint64_t)v5);
    std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v5);
    int v6 = 0;
  }
  else
  {
    int v6 = 1;
  }
  return std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v7);
}

void sub_9DA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, _Unwind_Exception *exception_object, char a17)
{
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](v17 - 32);
  _Unwind_Resume(a1);
}

uint64_t HSMapper::_statusHandler(uint64_t a1, uint64_t a2)
{
  v5[3] = a1;
  void v5[2] = a2;
  uint64_t v2 = (HSUtil::Connection *)std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100](a2);
  uint64_t result = HSUtil::Connection::status(v2);
  if (result != 1)
  {
    std::weak_ptr<HSMapper>::lock(a1, v5);
    std::function<void ()(std::shared_ptr<HSMapper>)>::operator()(a1 + 48, (uint64_t)v5);
    return std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v5);
  }
  return result;
}

uint64_t HSUtil::Connection::status(HSUtil::Connection *this)
{
  v4[1] = (std::mutex *)this;
  std::lock_guard<std::mutex>::lock_guard[abi:ne180100](v4, (std::mutex *)((char *)this + 112));
  unsigned int v3 = *((_DWORD *)this + 56);
  std::lock_guard<std::mutex>::~lock_guard[abi:ne180100](v4);
  return v3;
}

uint64_t std::function<void ()(std::shared_ptr<HSMapper>)>::operator()(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(std::shared_ptr<HSMapper>)>::operator()[abi:ne180100](a1, a2);
}

std::mutex **std::lock_guard<std::mutex>::lock_guard[abi:ne180100](std::mutex **a1, std::mutex *a2)
{
  return a1;
}

{
  *a1 = a2;
  std::mutex::lock(*a1);
  return a1;
}

std::mutex **std::lock_guard<std::mutex>::~lock_guard[abi:ne180100](std::mutex **a1)
{
  return a1;
}

{
  std::mutex::unlock(*a1);
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::shared_ptr<HSMapper>)>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 24)) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 48))(*(void *)(a1 + 24), a2);
}

uint64_t std::chrono::duration_cast[abi:ne180100]<std::chrono::duration<long long,std::ratio<1l,1000l>>,long long,std::ratio<1l,1l>,0>(uint64_t a1)
{
  uint64_t v3 = a1;
  return std::chrono::__duration_cast<std::chrono::duration<long long,std::ratio<1l,1l>>,std::chrono::duration<long long,std::ratio<1l,1000l>>,std::ratio<1000l,1l>,false,true>::operator()[abi:ne180100]((uint64_t)&v2, a1);
}

uint64_t std::chrono::__duration_cast<std::chrono::duration<long long,std::ratio<1l,1l>>,std::chrono::duration<long long,std::ratio<1l,1000l>>,std::ratio<1000l,1l>,false,true>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void v3[2] = a1;
  v3[1] = a2;
  v3[0] = 1000
        * std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100](a2);
  std::__hash_const_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_const_iterator[abi:ne180100](&v4, v3);
  return v4;
}

uint64_t std::unordered_map<objc_object * {__strong},unsigned long long,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,std::allocator<std::pair<objc_object * const {__strong},unsigned long long>>>::find[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v3 = std::__hash_table<std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::__unordered_map_hasher<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,true>,std::__unordered_map_equal<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::equal_to<objc_object * {__strong}>,HSUtil::ObjectHasher,true>,std::allocator<std::__hash_value_type<objc_object * {__strong},unsigned long long>>>::find<objc_object * {__strong}>(a1, a2);
  std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>>::__hash_map_iterator[abi:ne180100](&v4, v3);
  return v4;
}

uint64_t std::unordered_map<unsigned long long,objc_object * {__strong}>::emplace[abi:ne180100]<unsigned long long &,objc_object * {__strong}&>(uint64_t a1, uint64_t *a2, id *a3)
{
  void v5[4] = a1;
  v5[3] = a2;
  void v5[2] = a3;
  v5[0] = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique[abi:ne180100]<unsigned long long &,objc_object * {__strong}&,0>(a1, a2, a3);
  v5[1] = v3;
  std::pair<std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>>,BOOL>::pair[abi:ne180100]<std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>,BOOL,0>((uint64_t)&v6, (uint64_t)v5);
  return v6;
}

uint64_t std::unordered_map<objc_object * {__strong},unsigned long long,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,std::allocator<std::pair<objc_object * const {__strong},unsigned long long>>>::emplace[abi:ne180100]<objc_object * {__strong}&,unsigned long long &>(uint64_t a1, void **a2, void *a3)
{
  void v5[4] = a1;
  v5[3] = a2;
  void v5[2] = a3;
  v5[0] = std::__hash_table<std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::__unordered_map_hasher<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,true>,std::__unordered_map_equal<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::equal_to<objc_object * {__strong}>,HSUtil::ObjectHasher,true>,std::allocator<std::__hash_value_type<objc_object * {__strong},unsigned long long>>>::__emplace_unique[abi:ne180100]<objc_object * {__strong}&,unsigned long long &,0>(a1, a2, a3);
  v5[1] = v3;
  std::pair<std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>>,BOOL>::pair[abi:ne180100]<std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>,BOOL,0>((uint64_t)&v6, (uint64_t)v5);
  return v6;
}

uint64_t std::__hash_table<std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::__unordered_map_hasher<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,true>,std::__unordered_map_equal<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::equal_to<objc_object * {__strong}>,HSUtil::ObjectHasher,true>,std::allocator<std::__hash_value_type<objc_object * {__strong},unsigned long long>>>::find<objc_object * {__strong}>(uint64_t a1, void **a2)
{
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  unint64_t v16 = std::__unordered_map_hasher<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,true>::operator()[abi:ne180100](v2, a2);
  unint64_t v15 = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::bucket_count[abi:ne180100]();
  if (v15)
  {
    uint64_t v14 = std::__constrain_hash[abi:ne180100](v16, v15);
    __n128 v12 = *(void ***)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v14);
    if (v12)
    {
      for (unint64_t i = *v12; ; unint64_t i = (void *)*i)
      {
        BOOL v10 = 0;
        if (i)
        {
          BOOL v9 = 1;
          if (std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i) != v16)
          {
            unint64_t v3 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i);
            BOOL v9 = std::__constrain_hash[abi:ne180100](v3, v15) == v14;
          }
          BOOL v10 = v9;
        }
        if (!v10) {
          break;
        }
        if (std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i) == v16)
        {
          std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
          uint64_t v8 = v4;
          std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
          uint64_t v6 = std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100](v5);
          if (std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>::operator()[abi:ne180100](v8, v6, a2))
          {
            std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](&v18, (uint64_t)i);
            return v18;
          }
        }
      }
    }
  }
  return std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::end();
}

uint64_t std::__unordered_map_hasher<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,true>::operator()[abi:ne180100](void *a1, void **a2)
{
  return HSUtil::ObjectHasher::operator()(a1, *a2);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique[abi:ne180100]<unsigned long long &,objc_object * {__strong}&,0>(uint64_t a1, uint64_t *a2, id *a3)
{
  return std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,objc_object * {__strong}&>(a1, a2, a2, a3);
}

uint64_t std::pair<std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>>,BOOL>::pair[abi:ne180100]<std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>,BOOL,0>(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t result;

  std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>>::__hash_map_iterator[abi:ne180100]((void *)a1, *(void *)a2);
  uint64_t result = a1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8) & 1;
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,objc_object * {__strong}&>(uint64_t a1, uint64_t *a2, void *a3, id *a4)
{
  uint64_t v46 = a1;
  uint64_t v45 = a2;
  long long v44 = a3;
  unint64_t v43 = a4;
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  uint64_t v42 = std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>::operator()[abi:ne180100](v4, v45);
  unint64_t v41 = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::bucket_count[abi:ne180100]();
  char v40 = 0;
  if (v41)
  {
    uint64_t v38 = std::__constrain_hash[abi:ne180100](v42, v41);
    unint64_t i = *(uint64_t **)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v38);
    if (i)
    {
      for (unint64_t i = (uint64_t *)*i; ; unint64_t i = (uint64_t *)*i)
      {
        BOOL v31 = 0;
        if (i)
        {
          BOOL v30 = 1;
          if (std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i) != v42)
          {
            unint64_t v5 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i);
            BOOL v30 = std::__constrain_hash[abi:ne180100](v5, v41) == v38;
          }
          BOOL v31 = v30;
        }
        if (!v31) {
          break;
        }
        if (std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i) == v42)
        {
          std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
          uint64_t v29 = v6;
          std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
          uint64_t v8 = std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100](v7);
          if (std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>::operator()[abi:ne180100](v29, v8, v45))
          {
            goto LABEL_21;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__construct_node_hash<unsigned long long &,objc_object * {__strong}&>(a1, v42, v44, v43, (uint64_t)v37);
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  float v28 = (float)(unint64_t)(*v9 + 1);
  float v27 = (float)v41;
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
  if (v28 > (float)(v27 * *v10) || !v41)
  {
    unint64_t v24 = 2 * v41;
    unint64_t v36 = v24 + !std::__is_hash_power2[abi:ne180100](v41);
    std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
    float v25 = (float)(unint64_t)(*v11 + 1);
    std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
    unint64_t v35 = (unint64_t)std::__math::ceil[abi:ne180100](v25 / *v12);
    int v26 = std::max[abi:ne180100]<unsigned long>(&v36, &v35);
    std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__rehash_unique[abi:ne180100](a1, *v26);
    unint64_t v41 = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::bucket_count[abi:ne180100]();
    uint64_t v38 = std::__constrain_hash[abi:ne180100](v42, v41);
  }
  uint64_t v34 = *(uint64_t **)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v38);
  if (v34)
  {
    uint64_t v21 = *v34;
    *(void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]() = v21;
    uint64_t *v34 = std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  }
  else
  {
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    uint64_t v34 = v13;
    uint64_t v23 = *v13;
    *(void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]() = v23;
    std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    uint64_t *v34 = v14;
    *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v38) = v34;
    if (*(void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]())
    {
      std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
      std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
      uint64_t v22 = v15;
      unint64_t v16 = (uint64_t *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
      unint64_t v17 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100](*v16);
      uint64_t v18 = std::__constrain_hash[abi:ne180100](v17, v41);
      *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v18) = v22;
    }
  }
  unint64_t i = (uint64_t *)std::unique_ptr<std::__hash_node<HSStage * {__strong},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::release[abi:ne180100]();
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  ++*v19;
  char v40 = 1;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)v37);
LABEL_21:
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](&v33, (uint64_t)i);
  std::pair<std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL>::pair[abi:ne180100]<std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL &,0>((uint64_t)&v47, &v33, &v40);
  return v47;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__construct_node_hash<unsigned long long &,objc_object * {__strong}&>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, id *a4@<X3>, uint64_t a5@<X8>)
{
  _OWORD v19[2] = a5;
  v19[1] = a1;
  v19[0] = a2;
  uint64_t v18 = a3;
  unint64_t v17 = a4;
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v16 = v5;
  char v15 = 0;
  BOOL v10 = std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::allocate[abi:ne180100](v5, 1uLL);
  std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::__hash_node_destructor[abi:ne180100]((uint64_t)&v14, v16, 0);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>>::unique_ptr[abi:ne180100]<true,void>(a5, (uint64_t)v10, &v14);
  __n128 v12 = (void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  uint64_t v13 = 0;
  std::__construct_at[abi:ne180100]<std::__hash_node<HSStage * {__strong},void *>,decltype(nullptr),unsigned long &,std::__hash_node<HSStage * {__strong},void *>*>(v12, (uint64_t)&v13, v19);
  uint64_t v9 = v16;
  uint64_t v6 = std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100](v6);
  std::__hash_key_value_types<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>::__get_ptr[abi:ne180100]();
  std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::construct[abi:ne180100]<std::pair<unsigned long long const,objc_object * {__strong}>,unsigned long long &,objc_object * {__strong}&,void>(v9, v7, v18, v17);
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::get_deleter[abi:ne180100]();
  *(unsigned char *)(v8 + 8) = 1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__rehash_unique[abi:ne180100](uint64_t a1, unint64_t a2)
{
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>>::reset[abi:ne180100](a1, 0);
  return a1;
}

void *std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  return std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>::allocate[abi:ne180100](a1, a2);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>>::unique_ptr[abi:ne180100]<true,void>(uint64_t a1, uint64_t a2, __n128 *a3)
{
  return a1;
}

{
  void v5[2];

  v5[1] = a1;
  v5[0] = a2;
  std::__compressed_pair<std::__hash_node<HSStage * {__strong},void *> *,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::__compressed_pair[abi:ne180100]<std::__hash_node<HSStage * {__strong},void *> *&,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>(a1, v5, a3);
  return a1;
}

void *std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::construct[abi:ne180100]<std::pair<unsigned long long const,objc_object * {__strong}>,unsigned long long &,objc_object * {__strong}&,void>(uint64_t a1, void *a2, void *a3, id *a4)
{
  return std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>::construct[abi:ne180100]<std::pair<unsigned long long const,objc_object * {__strong}>,unsigned long long &,objc_object * {__strong}&>(a1, a2, a3, a4);
}

void *std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 > std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::max_size[abi:ne180100]<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>,void>()) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return std::__libcpp_allocate[abi:ne180100](32 * a2, (std::align_val_t)8uLL);
}

uint64_t std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::max_size[abi:ne180100]<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>,void>()
{
  return std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>::max_size[abi:ne180100]();
}

uint64_t std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>::max_size[abi:ne180100]()
{
  return 0x7FFFFFFFFFFFFFFLL;
}

void *std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>::construct[abi:ne180100]<std::pair<unsigned long long const,objc_object * {__strong}>,unsigned long long &,objc_object * {__strong}&>(uint64_t a1, void *a2, void *a3, id *a4)
{
  return std::pair<unsigned long long const,objc_object * {__strong}>::pair[abi:ne180100]<unsigned long long &,objc_object * {__strong}&,0>(a2, a3, a4);
}

void *std::pair<unsigned long long const,objc_object * {__strong}>::pair[abi:ne180100]<unsigned long long &,objc_object * {__strong}&,0>(void *a1, void *a2, id *a3)
{
  return a1;
}

{
  id v3;
  void *result;

  *a1 = *a2;
  unint64_t v3 = *a3;
  uint64_t result = a1;
  a1[1] = v3;
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__rehash<true>(uint64_t a1, unint64_t a2)
{
  v14[1] = a1;
  v14[0] = a2;
  if (a2 == 1)
  {
    v14[0] = 2;
  }
  else if ((v14[0] & (v14[0] - 1)) != 0)
  {
    v14[0] = std::__next_prime(v14[0]);
  }
  unint64_t v13 = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::bucket_count[abi:ne180100]();
  if (v14[0] <= v13)
  {
    if (v14[0] < v13)
    {
      if (std::__is_hash_power2[abi:ne180100](v13))
      {
        std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
        float v9 = (float)*v2;
        std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
        float v4 = std::__math::ceil[abi:ne180100](v9 / *v3);
        size_t prime = std::__next_hash_pow2[abi:ne180100]((unint64_t)v4);
      }
      else
      {
        std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
        float v8 = (float)*v5;
        std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
        float v7 = std::__math::ceil[abi:ne180100](v8 / *v6);
        size_t prime = std::__next_prime((unint64_t)v7);
      }
      size_t v12 = prime;
      v14[0] = *std::max[abi:ne180100]<unsigned long>(v14, &v12);
      if (v14[0] < v13) {
        std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__do_rehash<true>(a1, v14[0]);
      }
    }
  }
  else
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__do_rehash<true>(a1, v14[0]);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::get_deleter[abi:ne180100]();
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  if (a2)
  {
    float v7 = std::allocator_traits<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::allocate[abi:ne180100](v2, a2);
    std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> *>>>::reset[abi:ne180100]<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> **,0>(a1, (uint64_t)v7);
  }
  else
  {
    std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> *>>>::reset[abi:ne180100]<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> **,0>(a1, 0);
  }
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::get_deleter[abi:ne180100]();
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  unint64_t *v3 = a2;
  if (a2)
  {
    for (unint64_t i = 0; i < a2; ++i)
      *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, i) = 0;
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    __n128 v14 = v4;
    size_t v12 = *v4;
    if (*v4)
    {
      unint64_t v5 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)v12);
      uint64_t v10 = std::__constrain_hash[abi:ne180100](v5, a2);
      *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v1objc_storeStrong(&location, 0) = v14;
      uint64_t v9 = v10;
      char v15 = v12;
      for (unint64_t j = *v12; j; unint64_t j = *v15)
      {
        unint64_t v6 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)j);
        uint64_t v11 = std::__constrain_hash[abi:ne180100](v6, a2);
        if (v11 == v9)
        {
          char v15 = (void **)j;
        }
        else if (*(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v11))
        {
          uint64_t *v15 = (void *)*j;
          *unint64_t j = **(void **)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v11);
          **(void **)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v1MTRestZoneIntegrator_::clearMotion(this, 1) = j;
        }
        else
        {
          *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v1MTRestZoneIntegrator_::clearMotion(this, 1) = v15;
          char v15 = (void **)j;
          uint64_t v9 = v11;
        }
      }
    }
  }
}

void std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> *>>>::reset[abi:ne180100]<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> **,0>(uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  unint64_t v5 = *v2;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *> *>>::operator()[abi:ne180100](v4, v5);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  unint64_t v5 = *v2;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::operator()[abi:ne180100](v4, v5);
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = *(void *)a1;
    std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100]((uint64_t)a2);
    std::__hash_key_value_types<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>::__get_ptr[abi:ne180100]();
    std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *>>>::destroy[abi:ne180100]<std::pair<unsigned long long const,HSProxy * {__strong}>,void,void>(v3, v2);
    std::__destroy_at[abi:ne180100]<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>,0>((uint64_t)a2);
  }
  if (a2) {
    std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::deallocate[abi:ne180100](*(void *)a1, a2, 1);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::__unordered_map_hasher<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,true>,std::__unordered_map_equal<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::equal_to<objc_object * {__strong}>,HSUtil::ObjectHasher,true>,std::allocator<std::__hash_value_type<objc_object * {__strong},unsigned long long>>>::__emplace_unique[abi:ne180100]<objc_object * {__strong}&,unsigned long long &,0>(uint64_t a1, void **a2, void *a3)
{
  return std::__hash_table<std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::__unordered_map_hasher<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,true>,std::__unordered_map_equal<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::equal_to<objc_object * {__strong}>,HSUtil::ObjectHasher,true>,std::allocator<std::__hash_value_type<objc_object * {__strong},unsigned long long>>>::__emplace_unique_key_args<objc_object * {__strong},objc_object * {__strong}&,unsigned long long &>(a1, a2, a2, a3);
}

uint64_t std::__hash_table<std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::__unordered_map_hasher<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,true>,std::__unordered_map_equal<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::equal_to<objc_object * {__strong}>,HSUtil::ObjectHasher,true>,std::allocator<std::__hash_value_type<objc_object * {__strong},unsigned long long>>>::__emplace_unique_key_args<objc_object * {__strong},objc_object * {__strong}&,unsigned long long &>(uint64_t a1, void **a2, id *a3, void *a4)
{
  uint64_t v46 = a1;
  uint64_t v45 = a2;
  long long v44 = a3;
  unint64_t v43 = a4;
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  uint64_t v42 = std::__unordered_map_hasher<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,true>::operator()[abi:ne180100](v4, v45);
  unint64_t v41 = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::bucket_count[abi:ne180100]();
  char v40 = 0;
  if (v41)
  {
    uint64_t v38 = std::__constrain_hash[abi:ne180100](v42, v41);
    unint64_t i = *(uint64_t **)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v38);
    if (i)
    {
      for (unint64_t i = (uint64_t *)*i; ; unint64_t i = (uint64_t *)*i)
      {
        BOOL v31 = 0;
        if (i)
        {
          BOOL v30 = 1;
          if (std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i) != v42)
          {
            unint64_t v5 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i);
            BOOL v30 = std::__constrain_hash[abi:ne180100](v5, v41) == v38;
          }
          BOOL v31 = v30;
        }
        if (!v31) {
          break;
        }
        if (std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i) == v42)
        {
          std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
          uint64_t v29 = v6;
          std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
          uint64_t v8 = std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100](v7);
          if (std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>::operator()[abi:ne180100](v29, v8, v45))
          {
            goto LABEL_21;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::__unordered_map_hasher<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,true>,std::__unordered_map_equal<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::equal_to<objc_object * {__strong}>,HSUtil::ObjectHasher,true>,std::allocator<std::__hash_value_type<objc_object * {__strong},unsigned long long>>>::__construct_node_hash<objc_object * {__strong}&,unsigned long long &>(a1, v42, v44, v43, (uint64_t)v37);
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  float v28 = (float)(unint64_t)(*v9 + 1);
  float v27 = (float)v41;
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
  if (v28 > (float)(v27 * *v10) || !v41)
  {
    unint64_t v24 = 2 * v41;
    unint64_t v36 = v24 + !std::__is_hash_power2[abi:ne180100](v41);
    std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
    float v25 = (float)(unint64_t)(*v11 + 1);
    std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
    unint64_t v35 = (unint64_t)std::__math::ceil[abi:ne180100](v25 / *v12);
    int v26 = std::max[abi:ne180100]<unsigned long>(&v36, &v35);
    std::__hash_table<std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::__unordered_map_hasher<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,true>,std::__unordered_map_equal<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::equal_to<objc_object * {__strong}>,HSUtil::ObjectHasher,true>,std::allocator<std::__hash_value_type<objc_object * {__strong},unsigned long long>>>::__rehash_unique[abi:ne180100](a1, *v26);
    unint64_t v41 = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::bucket_count[abi:ne180100]();
    uint64_t v38 = std::__constrain_hash[abi:ne180100](v42, v41);
  }
  uint64_t v34 = *(uint64_t **)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v38);
  if (v34)
  {
    uint64_t v21 = *v34;
    *(void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]() = v21;
    uint64_t *v34 = std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  }
  else
  {
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    uint64_t v34 = v13;
    uint64_t v23 = *v13;
    *(void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]() = v23;
    std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    uint64_t *v34 = v14;
    *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v38) = v34;
    if (*(void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]())
    {
      std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
      std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
      uint64_t v22 = v15;
      uint64_t v16 = (uint64_t *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
      unint64_t v17 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100](*v16);
      uint64_t v18 = std::__constrain_hash[abi:ne180100](v17, v41);
      *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v18) = v22;
    }
  }
  unint64_t i = (uint64_t *)std::unique_ptr<std::__hash_node<HSStage * {__strong},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::release[abi:ne180100]();
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  ++*v19;
  char v40 = 1;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)v37);
LABEL_21:
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](&v33, (uint64_t)i);
  std::pair<std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL>::pair[abi:ne180100]<std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL &,0>((uint64_t)&v47, &v33, &v40);
  return v47;
}

void std::__hash_table<std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::__unordered_map_hasher<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,true>,std::__unordered_map_equal<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::equal_to<objc_object * {__strong}>,HSUtil::ObjectHasher,true>,std::allocator<std::__hash_value_type<objc_object * {__strong},unsigned long long>>>::__construct_node_hash<objc_object * {__strong}&,unsigned long long &>(uint64_t a1@<X0>, uint64_t a2@<X1>, id *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  _OWORD v19[2] = a5;
  v19[1] = a1;
  v19[0] = a2;
  uint64_t v18 = a3;
  unint64_t v17 = a4;
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v16 = v5;
  char v15 = 0;
  uint64_t v10 = std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::allocate[abi:ne180100](v5, 1uLL);
  std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::__hash_node_destructor[abi:ne180100]((uint64_t)&v14, v16, 0);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *>>>>::unique_ptr[abi:ne180100]<true,void>(a5, (uint64_t)v10, &v14);
  size_t v12 = (void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  uint64_t v13 = 0;
  std::__construct_at[abi:ne180100]<std::__hash_node<HSStage * {__strong},void *>,decltype(nullptr),unsigned long &,std::__hash_node<HSStage * {__strong},void *>*>(v12, (uint64_t)&v13, v19);
  uint64_t v9 = v16;
  uint64_t v6 = std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100](v6);
  std::__hash_key_value_types<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>::__get_ptr[abi:ne180100]();
  std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *>>>::construct[abi:ne180100]<std::pair<objc_object * const {__strong},unsigned long long>,objc_object * {__strong}&,unsigned long long &,void>(v9, v7, v18, v17);
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::get_deleter[abi:ne180100]();
  *(unsigned char *)(v8 + 8) = 1;
}

void std::__hash_table<std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::__unordered_map_hasher<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,true>,std::__unordered_map_equal<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::equal_to<objc_object * {__strong}>,HSUtil::ObjectHasher,true>,std::allocator<std::__hash_value_type<objc_object * {__strong},unsigned long long>>>::__rehash_unique[abi:ne180100](uint64_t a1, unint64_t a2)
{
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *>>>>::reset[abi:ne180100](a1, 0);
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *>>>>::unique_ptr[abi:ne180100]<true,void>(uint64_t a1, uint64_t a2, __n128 *a3)
{
  return a1;
}

{
  void v5[2];

  v5[1] = a1;
  v5[0] = a2;
  std::__compressed_pair<std::__hash_node<HSStage * {__strong},void *> *,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::__compressed_pair[abi:ne180100]<std::__hash_node<HSStage * {__strong},void *> *&,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>(a1, v5, a3);
  return a1;
}

void *std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *>>>::construct[abi:ne180100]<std::pair<objc_object * const {__strong},unsigned long long>,objc_object * {__strong}&,unsigned long long &,void>(uint64_t a1, void *a2, id *a3, void *a4)
{
  return std::allocator<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *>>::construct[abi:ne180100]<std::pair<objc_object * const {__strong},unsigned long long>,objc_object * {__strong}&,unsigned long long &>(a1, a2, a3, a4);
}

void *std::allocator<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *>>::construct[abi:ne180100]<std::pair<objc_object * const {__strong},unsigned long long>,objc_object * {__strong}&,unsigned long long &>(uint64_t a1, void *a2, id *a3, void *a4)
{
  return std::pair<objc_object * const {__strong},unsigned long long>::pair[abi:ne180100]<objc_object * {__strong}&,unsigned long long &,0>(a2, a3, a4);
}

void *std::pair<objc_object * const {__strong},unsigned long long>::pair[abi:ne180100]<objc_object * {__strong}&,unsigned long long &,0>(void *a1, id *a2, void *a3)
{
  return a1;
}

{
  id v3;
  void *result;

  uint64_t v3 = *a2;
  uint64_t result = a1;
  *a1 = v3;
  a1[1] = *a3;
  return result;
}

void std::__hash_table<std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::__unordered_map_hasher<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,true>,std::__unordered_map_equal<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::equal_to<objc_object * {__strong}>,HSUtil::ObjectHasher,true>,std::allocator<std::__hash_value_type<objc_object * {__strong},unsigned long long>>>::__rehash<true>(uint64_t a1, unint64_t a2)
{
  v14[1] = a1;
  v14[0] = a2;
  if (a2 == 1)
  {
    v14[0] = 2;
  }
  else if ((v14[0] & (v14[0] - 1)) != 0)
  {
    v14[0] = std::__next_prime(v14[0]);
  }
  unint64_t v13 = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::bucket_count[abi:ne180100]();
  if (v14[0] <= v13)
  {
    if (v14[0] < v13)
    {
      if (std::__is_hash_power2[abi:ne180100](v13))
      {
        std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
        float v9 = (float)*v2;
        std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
        float v4 = std::__math::ceil[abi:ne180100](v9 / *v3);
        size_t prime = std::__next_hash_pow2[abi:ne180100]((unint64_t)v4);
      }
      else
      {
        std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
        float v8 = (float)*v5;
        std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
        float v7 = std::__math::ceil[abi:ne180100](v8 / *v6);
        size_t prime = std::__next_prime((unint64_t)v7);
      }
      size_t v12 = prime;
      v14[0] = *std::max[abi:ne180100]<unsigned long>(v14, &v12);
      if (v14[0] < v13) {
        std::__hash_table<std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::__unordered_map_hasher<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,true>,std::__unordered_map_equal<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::equal_to<objc_object * {__strong}>,HSUtil::ObjectHasher,true>,std::allocator<std::__hash_value_type<objc_object * {__strong},unsigned long long>>>::__do_rehash<true>(a1, v14[0]);
      }
    }
  }
  else
  {
    std::__hash_table<std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::__unordered_map_hasher<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,true>,std::__unordered_map_equal<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::equal_to<objc_object * {__strong}>,HSUtil::ObjectHasher,true>,std::allocator<std::__hash_value_type<objc_object * {__strong},unsigned long long>>>::__do_rehash<true>(a1, v14[0]);
  }
}

void std::__hash_table<std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::__unordered_map_hasher<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,HSUtil::ObjectHasher,std::equal_to<objc_object * {__strong}>,true>,std::__unordered_map_equal<objc_object * {__strong},std::__hash_value_type<objc_object * {__strong},unsigned long long>,std::equal_to<objc_object * {__strong}>,HSUtil::ObjectHasher,true>,std::allocator<std::__hash_value_type<objc_object * {__strong},unsigned long long>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::get_deleter[abi:ne180100]();
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  if (a2)
  {
    float v7 = std::allocator_traits<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::allocate[abi:ne180100](v2, a2);
    std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> *>>>::reset[abi:ne180100]<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> **,0>(a1, (uint64_t)v7);
  }
  else
  {
    std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> *>>>::reset[abi:ne180100]<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> **,0>(a1, 0);
  }
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::get_deleter[abi:ne180100]();
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  unint64_t *v3 = a2;
  if (a2)
  {
    for (unint64_t i = 0; i < a2; ++i)
      *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, i) = 0;
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    __n128 v14 = v4;
    size_t v12 = *v4;
    if (*v4)
    {
      unint64_t v5 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)v12);
      uint64_t v10 = std::__constrain_hash[abi:ne180100](v5, a2);
      *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v1objc_storeStrong(&location, 0) = v14;
      uint64_t v9 = v10;
      char v15 = v12;
      for (unint64_t j = *v12; j; unint64_t j = *v15)
      {
        unint64_t v6 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)j);
        uint64_t v11 = std::__constrain_hash[abi:ne180100](v6, a2);
        if (v11 == v9)
        {
          char v15 = (void **)j;
        }
        else if (*(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v11))
        {
          uint64_t *v15 = (void *)*j;
          *unint64_t j = **(void **)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v11);
          **(void **)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v1MTRestZoneIntegrator_::clearMotion(this, 1) = j;
        }
        else
        {
          *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v1MTRestZoneIntegrator_::clearMotion(this, 1) = v15;
          char v15 = (void **)j;
          uint64_t v9 = v11;
        }
      }
    }
  }
}

void std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> *>>>::reset[abi:ne180100]<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> **,0>(uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  unint64_t v5 = *v2;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *> *> *>>::operator()[abi:ne180100](v4, v5);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  unint64_t v5 = *v2;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *>>>::operator()[abi:ne180100](v4, v5);
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = *(void *)a1;
    std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100]((uint64_t)a2);
    std::__hash_key_value_types<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>::__get_ptr[abi:ne180100]();
    std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *>>>::destroy[abi:ne180100]<std::pair<objc_object * const {__strong},unsigned long long>,void,void>(v3, v2);
    std::__destroy_at[abi:ne180100]<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>,0>((uint64_t)a2);
  }
  if (a2) {
    std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<objc_object * {__strong},unsigned long long>,void *>>>::deallocate[abi:ne180100](*(void *)a1, a2, 1);
  }
}

void std::make_unique[abi:ne180100]<HSUtil::Decoder::Callbacks,HSUtil::Decoder::Callbacks const&>()
{
}

void sub_9FF84(uint64_t a1, int a2)
{
  *(void *)(v2 - 24) = a1;
  *(_DWORD *)(v2 - 28) = a2;
  operator delete();
}

uint64_t HSUtil::Decoder::Callbacks::operator=(uint64_t a1, uint64_t a2)
{
  std::function<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::operator=(a1, a2);
  return a1;
}

uint64_t std::function<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::operator=(uint64_t a1, uint64_t a2)
{
  std::function<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::function((uint64_t)v4, a2);
  std::function<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::swap((uint64_t)v4, a1);
  std::function<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::~function(v4);
  return a1;
}

void std::function<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::swap(uint64_t a1, uint64_t a2)
{
}

void std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::swap[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    if (*(void *)(a1 + 24) == a1 && *(void *)(a2 + 24) == a2)
    {
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      uint64_t v15 = v2;
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24), v2);
      (*(void (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24));
      *(void *)(a1 + 24) = 0;
      uint64_t v13 = *(void *)(a2 + 24);
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 24))(v13, v3);
      (*(void (**)(void))(**(void **)(a2 + 24) + 32))(*(void *)(a2 + 24));
      *(void *)(a2 + 24) = 0;
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      *(void *)(a1 + 24) = v4;
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 24))(v15, v5);
      (*(void (**)(uint64_t))(*(void *)v15 + 32))(v15);
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      *(void *)(a2 + 24) = v6;
    }
    else if (*(void *)(a1 + 24) == a1)
    {
      uint64_t v12 = *(void *)(a1 + 24);
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 24))(v12, v7);
      (*(void (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24));
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      *(void *)(a2 + 24) = v8;
    }
    else if (*(void *)(a2 + 24) == a2)
    {
      uint64_t v11 = *(void *)(a2 + 24);
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 24))(v11, v9);
      (*(void (**)(void))(**(void **)(a2 + 24) + 32))(*(void *)(a2 + 24));
      *(void *)(a2 + 24) = *(void *)(a1 + 24);
      std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
      *(void *)(a1 + 24) = v10;
    }
    else
    {
      std::swap[abi:ne180100]<HSUtil::Encoder::ContainerRecord *>((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
    }
  }
}

void sub_A045C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::__value_func[abi:ne180100]<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},0>(void *a1, uint64_t a2)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>::allocator[abi:ne180100]((uint64_t)&v5);
  std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::__value_func[abi:ne180100]<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSMapper::Config const&>>(a1, a2, (uint64_t)&v5);
  return a1;
}

void *std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::__value_func[abi:ne180100]<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSMapper::Config const&>>(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  uint64_t v4;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  uint64_t v10 = a1;
  uint64_t v9 = a2;
  uint64_t v8 = a3;
  uint64_t v11 = a1;
  a1[3] = 0;
  if (std::__function::__not_null[abi:ne180100]<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1}>())
  {
    std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v7);
    uint64_t v4 = v9;
    std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v6);
    std::__function::__func<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSUtil::CoderKey const&>,objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>::__func[abi:ne180100](a1, v4, (uint64_t)&v6);
    a1[3] = a1;
  }
  return v11;
}

void *std::__function::__func<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSUtil::CoderKey const&>,objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>::__func[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  std::__function::__base<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::__base[abi:ne180100](a1);
  *a1 = off_1423E8;
  std::__function::__alloc_func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>::__alloc_func[abi:ne180100](a1 + 1, a2, a3);
  return a1;
}

{
  std::__function::__func<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSUtil::CoderKey const&>,objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>::__func[abi:ne180100](a1, a2, a3);
  return a1;
}

{
  std::__function::__base<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::__base[abi:ne180100](a1);
  *a1 = off_1423E8;
  std::__function::__alloc_func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>::__alloc_func[abi:ne180100](a1 + 1, a2, a3);
  return a1;
}

{
  std::__function::__func<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSUtil::CoderKey const&>,objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>::__func[abi:ne180100](a1, a2, a3);
  return a1;
}

{
  std::__function::__base<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::__base[abi:ne180100](a1);
  *a1 = off_1423E8;
  std::__function::__alloc_func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>::__alloc_func[abi:ne180100](a1 + 1, a2, a3);
  return a1;
}

void sub_A069C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

void *std::__function::__base<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::__base[abi:ne180100](void *result)
{
  std::__shared_weak_count *result = off_142468;
  return result;
}

uint64_t std::__function::__func<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSUtil::CoderKey const&>,objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSUtil::CoderKey const&>,objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>::~__func(uint64_t a1)
{
}

uint64_t std::__function::__func<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSUtil::CoderKey const&>,objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>::__clone(uint64_t a1)
{
  uint64_t v11 = a1;
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v10);
  uint64_t v4 = std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocate[abi:ne180100]((uint64_t)&v10, 1uLL);
  std::__allocator_destructor<std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>>::__allocator_destructor[abi:ne180100](&v8, (uint64_t)&v10, 1);
  std::unique_ptr<std::__function::__func<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSUtil::CoderKey const&>,objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>,std::__allocator_destructor<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1}<objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>>>::unique_ptr[abi:ne180100]<true,void>((uint64_t)v9, (uint64_t)v4, &v8);
  char v5 = (void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  uint64_t v6 = v1;
  std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)v7);
  std::__function::__func<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSUtil::CoderKey const&>,objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>::__func[abi:ne180100](v5, v6, (uint64_t)v7);
  uint64_t v3 = std::unique_ptr<std::__hash_node<HSStage * {__strong},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::release[abi:ne180100]();
  std::unique_ptr<std::__function::__func<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSUtil::CoderKey const&>,objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>,std::__allocator_destructor<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1}<objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>>>::~unique_ptr[abi:ne180100]((uint64_t)v9);
  return v3;
}

void sub_A0848(uint64_t a1, int a2)
{
  *(void *)(v2 - 64) = a1;
  *(_DWORD *)(v2 - 68) = a2;
  std::unique_ptr<std::__function::__func<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSUtil::CoderKey const&>,objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>,std::__allocator_destructor<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1}<objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>>>::~unique_ptr[abi:ne180100](v2 - 40);
  _Unwind_Resume(*(_Unwind_Exception **)(v2 - 64));
}

void *std::__function::__func<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSUtil::CoderKey const&>,objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>::__clone(uint64_t a1, void *a2)
{
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  uint64_t v5 = v2;
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  return std::__function::__func<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSUtil::CoderKey const&>,objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>::__func[abi:ne180100](a2, v5, v3);
}

void std::__function::__func<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSUtil::CoderKey const&>,objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>::destroy()
{
}

void std::__function::__func<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSUtil::CoderKey const&>,objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>::destroy_deallocate(void *a1)
{
  uint64_t v3 = a1;
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v2);
  std::vector<HSUtil::CoderKey const*>::__annotate_delete[abi:ne180100]();
  std::allocator<std::__function::__func<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSUtil::CoderKey const&>,objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>>::deallocate[abi:ne180100]((uint64_t)&v2, a1, 1);
}

__CFString *std::__function::__func<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSUtil::CoderKey const&>,objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>::operator()(uint64_t a1, HSUtil::Decoder *a2, const HSUtil::CoderKey *a3)
{
  return std::__function::__alloc_func<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSUtil::CoderKey const&>,objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>::operator()[abi:ne180100](a1 + 8, a2, a3);
}

uint64_t std::__function::__func<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSUtil::CoderKey const&>,objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>::target(uint64_t a1, uint64_t a2)
{
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  return v2;
}

_UNKNOWN **std::__function::__func<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSUtil::CoderKey const&>,objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>::target_type()
{
}

void std::__function::__base<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::~__base()
{
}

{
  __break(1u);
}

uint64_t std::unique_ptr<std::__function::__func<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSUtil::CoderKey const&>,objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>,std::__allocator_destructor<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1}<objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>>>::unique_ptr[abi:ne180100]<true,void>(uint64_t a1, uint64_t a2, __n128 *a3)
{
  return a1;
}

{
  void v5[2];

  v5[1] = a1;
  v5[0] = a2;
  std::__compressed_pair<std::__hash_node<HSStage * {__strong},void *> *,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::__compressed_pair[abi:ne180100]<std::__hash_node<HSStage * {__strong},void *> *&,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>(a1, v5, a3);
  return a1;
}

uint64_t std::unique_ptr<std::__function::__func<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSUtil::CoderKey const&>,objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>,std::__allocator_destructor<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1}<objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<std::__function::__func<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSUtil::CoderKey const&>,objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>,std::__allocator_destructor<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1}<objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>>>::reset[abi:ne180100](a1, 0);
  return a1;
}

void sub_A0B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

void std::unique_ptr<std::__function::__func<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSUtil::CoderKey const&>,objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>,std::__allocator_destructor<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1}<objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  uint64_t v5 = *v2;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__allocator_destructor<std::allocator<std::__function::__func<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSUtil::CoderKey const&>,objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>>>::operator()[abi:ne180100](v4, v5);
  }
}

void std::__allocator_destructor<std::allocator<std::__function::__func<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSUtil::CoderKey const&>,objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>>>::operator()[abi:ne180100](uint64_t *a1, void *a2)
{
}

void std::allocator_traits<std::allocator<std::__function::__func<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSUtil::CoderKey const&>,objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::allocator<std::__function::__func<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSUtil::CoderKey const&>,objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void sub_A0DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

__CFString *std::__function::__alloc_func<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1},std::allocator<HSUtil::CoderKey const&>,objc_object * ()(HSUtil::Decoder,HSUtil::CoderKey const)>::operator()[abi:ne180100](uint64_t a1, HSUtil::Decoder *a2, const HSUtil::CoderKey *a3)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  return std::__invoke_void_return_wrapper<objc_object * {__strong},false>::__call[abi:ne180100]<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1} &,HSUtil::Decoder,HSUtil::CoderKey const>(v3, a2, a3);
}

__CFString *std::__invoke_void_return_wrapper<objc_object * {__strong},false>::__call[abi:ne180100]<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1} &,HSUtil::Decoder,HSUtil::CoderKey const>(HSMapper **a1, HSUtil::Decoder *a2, const HSUtil::CoderKey *a3)
{
  return std::__invoke[abi:ne180100]<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1} &,HSUtil::Decoder,HSUtil::CoderKey const>(a1, a2, a3);
}

__CFString *std::__invoke[abi:ne180100]<HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1} &,HSUtil::Decoder,HSUtil::CoderKey const>(HSMapper **a1, HSUtil::Decoder *a2, const HSUtil::CoderKey *a3)
{
  return HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1}::operator()(a1, a2, a3);
}

__CFString *HSMapper::_init(std::weak_ptr<HSMapper>,HSUtil::FileDescriptor &&,NSObject  {objcproto17OS_dispatch_queue}*,HSMapper::Config const&)::{lambda(HSUtil::Decoder &,HSUtil::CoderKey const&)#1}::operator()(HSMapper **a1, HSUtil::Decoder *a2, const HSUtil::CoderKey *a3)
{
  return HSMapper::_decodeObject(*a1, a2, a3);
}

__CFString *HSMapper::_decodeObject(HSMapper *this, HSUtil::Decoder *a2, const HSUtil::CoderKey *a3)
{
  unint64_t v24 = this;
  uint64_t v23 = a2;
  uint64_t v22 = a3;
  uint64_t v3 = LocalObject::GetType((LocalObject *)this);
  BOOL v4 = HSUtil::CoderKey::operator==((uint64_t)a3, v3);
  if (v4)
  {
    std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash_node_base[abi:ne180100](&v21);
    HSUtil::Decoder::decodeCodable<LocalObject>(v23, (LocalObject *)&v21);
    if (HSUtil::Coder::ok(v23))
    {
      id location = HSMapper::_objectForID(this, v21);
      if (location) {
        float v25 = (__CFString *)location;
      }
      else {
        float v25 = HSUtil::Decoder::DecodeObjectNil;
      }
      int v15 = 1;
      objc_storeStrong(&location, 0);
    }
    else
    {
      long long v19 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRemoteObject.mm", v29);
      os_log_t oslog = &_os_log_default;
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v28, (uint64_t)"id HSMapper::_decodeObject(Decoder &, const CoderKey &)", (uint64_t)v19, 380, (uint64_t)"coder");
        _os_log_error_impl(&def_411C8, oslog, type, "Assertion failed (%s @ %s:%ju): %s", v28, 0x2Au);
      }
      objc_storeStrong((id *)&oslog, 0);
      float v25 = 0;
    }
  }
  else
  {
    uint64_t v5 = RemoteObject::GetType((RemoteObject *)v4);
    if (HSUtil::CoderKey::operator==((uint64_t)v22, v5))
    {
      std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](v14);
      HSUtil::Decoder::decodeCodable<RemoteObject>(v23, (RemoteObject *)v14);
      if (HSUtil::Coder::ok(v23))
      {
        float v25 = (__CFString *)HSMapper::_proxyForID(this, v14[0], (uint64_t)v14[1]);
      }
      else
      {
        uint64_t v12 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRemoteObject.mm", v27);
        os_log_t v11 = &_os_log_default;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v26, (uint64_t)"id HSMapper::_decodeObject(Decoder &, const CoderKey &)", (uint64_t)v12, 390, (uint64_t)"coder");
          _os_log_error_impl(&def_411C8, v11, OS_LOG_TYPE_ERROR, "Assertion failed (%s @ %s:%ju): %s", v26, 0x2Au);
        }
        objc_storeStrong((id *)&v11, 0);
        float v25 = 0;
      }
    }
    else
    {
      float v25 = (__CFString *)HSUtil::Decoder::DecodeObject(v23, v22, v6);
    }
  }
  uint64_t v7 = v25;

  return v7;
}

BOOL HSUtil::CoderKey::operator==(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL HSUtil::Decoder::decodeCodable<LocalObject>(HSUtil::Coder *a1, LocalObject *a2)
{
  uint64_t v6 = a1;
  uint64_t v5 = a2;
  BOOL result = HSUtil::Coder::fatalError(a1);
  if (!result)
  {
    unint64_t v4 = 0;
    unint64_t v4 = *((void *)a1 + 9);
    HSUtil::Decoder::_readCodable<LocalObject>(a1, &v4, v5);
    BOOL result = HSUtil::Coder::ok(a1);
    if (result) {
      *((void *)a1 + 9) = v4;
    }
  }
  return result;
}

BOOL HSUtil::Decoder::decodeCodable<RemoteObject>(HSUtil::Coder *a1, RemoteObject *a2)
{
  uint64_t v6 = a1;
  uint64_t v5 = a2;
  BOOL result = HSUtil::Coder::fatalError(a1);
  if (!result)
  {
    unint64_t v4 = 0;
    unint64_t v4 = *((void *)a1 + 9);
    HSUtil::Decoder::_readCodable<RemoteObject>(a1, &v4, v5);
    BOOL result = HSUtil::Coder::ok(a1);
    if (result) {
      *((void *)a1 + 9) = v4;
    }
  }
  return result;
}

id HSMapper::_proxyForID(HSMapper *this, objc_class *a2, uint64_t a3)
{
  uint64_t v11[2] = this;
  v11[1] = a2;
  v11[0] = a3;
  std::unique_lock<HSMapper::Maps>::unique_lock[abi:ne180100]((uint64_t)v10, (uint64_t)this + 80);
  uint64_t v9 = (id *)std::unordered_map<unsigned long long,HSProxy * {__strong}>::operator[]((MTFingerToPathMap_ *)((char *)this + 168), (MTFingerToPathMap_ *)v11);
  if (*v9)
  {
    id v12 = *v9;
    int v8 = 1;
  }
  else
  {
    id obj = (id)objc_opt_new();
    *((void *)obj + MTRestZoneIntegrator_::clearMotion(this, 1) = v11[0];
    std::weak_ptr<HSMapper>::lock((uint64_t)this, v6);
    std::weak_ptr<HSMapper>::operator=((uint64_t *)obj + 2, v6);
    std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v6);
    objc_storeStrong(v9, obj);
    id v12 = obj;
    int v8 = 1;
    objc_storeStrong(&obj, 0);
  }
  std::unique_lock<HSMapper::Maps>::~unique_lock[abi:ne180100]((uint64_t)v10);
  uint64_t v3 = v12;

  return v3;
}

id HSUtil::Decoder::DecodeObject(HSUtil::Decoder *this, HSUtil::Decoder *a2, const HSUtil::CoderKey *a3)
{
  uint64_t v9 = this;
  int v8 = a2;
  if (HSUtil::CoderKey::operator!=<HSUtil::CoderKey>((uint64_t)a2, HSUtil::Coder::_ObjectType))
  {
    id v10 = 0;
  }
  else
  {
    uint64_t v7 = (const char **)HSUtil::Decoder::decodeKey(v9);
    if (HSUtil::Coder::ok(v9))
    {
      Class Class = 0;
      Class Class = objc_getClass(*v7);
      id location = (id)objc_opt_new();
      if (location)
      {
        HSUtil::Decoder::decodeHSCodable(v9, location);
        if (HSUtil::Coder::ok(v9)) {
          id v10 = location;
        }
        else {
          id v10 = 0;
        }
      }
      else
      {
        id v10 = 0;
      }
      objc_storeStrong(&location, 0);
    }
    else
    {
      id v10 = 0;
    }
  }
  uint64_t v3 = v10;

  return v3;
}

void HSUtil::Decoder::_readCodable<LocalObject>(HSUtil::Decoder *a1, unint64_t *a2, LocalObject *a3)
{
  uint64_t v9 = a1;
  int v8 = a2;
  uint64_t v7 = a3;
  unint64_t v6 = 0;
  unint64_t v6 = *a2;
  unint64_t v5 = HSUtil::Decoder::_skipElement(a1, a2);
  if (HSUtil::Coder::ok(a1))
  {
    HSUtil::Decoder::_loadKeyTableIfNeeded(a1, v8);
    if (HSUtil::Coder::ok(a1))
    {
      HSUtil::Decoder::Decoder((HSUtil::Decoder *)v4, a1, v6, v5);
      if (!LocalObject::decode(v7, (HSUtil::Decoder *)v4)) {
        *(_DWORD *)a1 = 10;
      }
      HSUtil::Decoder::~Decoder((HSUtil::Decoder *)v4);
    }
  }
}

BOOL LocalObject::decode(LocalObject *this, HSUtil::Decoder *a2)
{
  *(void *)this = HSUtil::Decoder::decodeUInt(a2);
  return HSUtil::Coder::ok(a2);
}

void HSUtil::Decoder::_readCodable<RemoteObject>(HSUtil::Decoder *a1, unint64_t *a2, RemoteObject *a3)
{
  uint64_t v9 = a1;
  int v8 = a2;
  uint64_t v7 = a3;
  unint64_t v6 = 0;
  unint64_t v6 = *a2;
  unint64_t v5 = HSUtil::Decoder::_skipElement(a1, a2);
  if (HSUtil::Coder::ok(a1))
  {
    HSUtil::Decoder::_loadKeyTableIfNeeded(a1, v8);
    if (HSUtil::Coder::ok(a1))
    {
      HSUtil::Decoder::Decoder((HSUtil::Decoder *)v4, a1, v6, v5);
      if ((RemoteObject::decode(v7, (HSUtil::Decoder *)v4) & 1) == 0) {
        *(_DWORD *)a1 = 10;
      }
      HSUtil::Decoder::~Decoder((HSUtil::Decoder *)v4);
    }
  }
}

uint64_t RemoteObject::decode(RemoteObject *this, HSUtil::Decoder *a2)
{
  uint64_t v28 = __chkstk_darwin(this, a2);
  float v27 = v2;
  unint64_t v6 = (void *)v28;
  HSUtil::Decoder::decodeArray(v2, (uint64_t)v26);
  if (HSUtil::Coder::ok(v27))
  {
    HSUtil::Decoder::decodeString((HSUtil::Decoder *)v26, (uint64_t)v20);
    if (HSUtil::Coder::ok((HSUtil::Coder *)v26))
    {
      uint64_t v3 = (const char *)HSUtil::Buffer::data((HSUtil::Buffer *)v20);
      void *v6 = objc_getClass(v3);
      BOOL v15 = 0;
      BOOL v15 = *v6 != 0;
      if (v15)
      {
        v6[1] = HSUtil::Decoder::decodeUInt((HSUtil::Decoder *)v26);
        if (HSUtil::Coder::ok((HSUtil::Coder *)v26))
        {
          char v29 = 1;
          int v21 = 1;
        }
        else
        {
          int v8 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRemoteObject.mm", v31);
          os_log_t v7 = &_os_log_default;
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          {
            __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v30, (uint64_t)"BOOL RemoteObject::decode(Decoder &)", (uint64_t)v8, 63, (uint64_t)"array");
            _os_log_error_impl(&def_411C8, v7, OS_LOG_TYPE_ERROR, "Assertion failed (%s @ %s:%ju): %s", v30, 0x2Au);
          }
          objc_storeStrong((id *)&v7, 0);
          char v29 = 0;
          int v21 = 1;
        }
      }
      else
      {
        __n128 v14 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRemoteObject.mm", v34);
        os_log_t v13 = &_os_log_default;
        os_log_type_t v12 = OS_LOG_TYPE_ERROR;
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v33, (uint64_t)"BOOL RemoteObject::decode(Decoder &)", (uint64_t)v14, 60, (uint64_t)"proxyClass");
          _os_log_error_impl(&def_411C8, v13, v12, "Assertion failed (%s @ %s:%ju): %s", v33, 0x2Au);
        }
        objc_storeStrong((id *)&v13, 0);
        os_log_t v11 = &_os_log_default;
        os_log_type_t v10 = OS_LOG_TYPE_ERROR;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          uint64_t v4 = HSUtil::Buffer::data((HSUtil::Buffer *)v20);
          __os_log_helper_16_2_1_8_32((uint64_t)v32, v4);
          _os_log_error_impl(&def_411C8, v11, v10, "Can't get class : %s", v32, 0xCu);
        }
        objc_storeStrong((id *)&v11, 0);
        char v29 = 0;
        int v21 = 1;
      }
    }
    else
    {
      uint64_t v18 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRemoteObject.mm", v36);
      os_log_t oslog = &_os_log_default;
      os_log_type_t v16 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v35, (uint64_t)"BOOL RemoteObject::decode(Decoder &)", (uint64_t)v18, 55, (uint64_t)"array");
        _os_log_error_impl(&def_411C8, oslog, v16, "Assertion failed (%s @ %s:%ju): %s", v35, 0x2Au);
      }
      objc_storeStrong((id *)&oslog, 0);
      char v29 = 0;
      int v21 = 1;
    }
    HSUtil::Buffer::~Buffer((HSUtil::Buffer *)v20);
  }
  else
  {
    unint64_t v24 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRemoteObject.mm", v38);
    id location = &_os_log_default;
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)location, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v37, (uint64_t)"BOOL RemoteObject::decode(Decoder &)", (uint64_t)v24, 52, (uint64_t)"coder");
      _os_log_error_impl(&def_411C8, (os_log_t)location, type, "Assertion failed (%s @ %s:%ju): %s", v37, 0x2Au);
    }
    objc_storeStrong(&location, 0);
    char v29 = 0;
    int v21 = 1;
  }
  HSUtil::Decoder::~Decoder((HSUtil::Decoder *)v26);
  return v29 & 1;
}

void sub_A1EBC()
{
  _Unwind_Resume(v0);
}

uint64_t __os_log_helper_16_2_1_8_32(uint64_t result, uint64_t a2)
{
  *(unsigned char *)BOOL result = 2;
  *(unsigned char *)(result + MTRestZoneIntegrator_::clearMotion(this, 1) = 1;
  *(unsigned char *)(result + 2) = 32;
  *(unsigned char *)(result + 3) = 8;
  *(void *)(result + 4) = a2;
  return result;
}

uint64_t std::unordered_map<unsigned long long,HSProxy * {__strong}>::operator[](MTFingerToPathMap_ *a1, MTFingerToPathMap_ *a2)
{
  v8[4] = a1;
  void v8[3] = a2;
  v8[0] = (MTFingerToPathMap_ *)std::forward_as_tuple[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)a2);
  MTFingerToPathMap_::~MTFingerToPathMap_(v8[0]);
  v8[1] = (MTFingerToPathMap_ *)std::__hash_table<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (uint64_t *)a2, (uint64_t)&std::piecewise_construct, (uint64_t *)v8, (uint64_t)&v7);
  void v8[2] = v2;
  std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>::operator->[abi:ne180100]();
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  return v3 + 8;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v48 = a1;
  uint64_t v47 = a2;
  uint64_t v46 = a3;
  uint64_t v45 = a4;
  uint64_t v44 = a5;
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  uint64_t v43 = std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>::operator()[abi:ne180100](v5, v47);
  unint64_t v42 = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::bucket_count[abi:ne180100]();
  char v41 = 0;
  if (v42)
  {
    uint64_t v39 = std::__constrain_hash[abi:ne180100](v43, v42);
    unint64_t i = *(uint64_t **)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v39);
    if (i)
    {
      for (unint64_t i = (uint64_t *)*i; ; unint64_t i = (uint64_t *)*i)
      {
        BOOL v32 = 0;
        if (i)
        {
          BOOL v31 = 1;
          if (std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i) != v43)
          {
            unint64_t v6 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i);
            BOOL v31 = std::__constrain_hash[abi:ne180100](v6, v42) == v39;
          }
          BOOL v32 = v31;
        }
        if (!v32) {
          break;
        }
        if (std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i) == v43)
        {
          std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
          uint64_t v30 = v7;
          std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
          uint64_t v9 = std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100](v8);
          if (std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>::operator()[abi:ne180100](v30, v9, v47))
          {
            goto LABEL_21;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1, v43, v46, v45, v44, (uint64_t)v38);
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  float v29 = (float)(unint64_t)(*v10 + 1);
  float v28 = (float)v42;
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
  if (v29 > (float)(v28 * *v11) || !v42)
  {
    unint64_t v25 = 2 * v42;
    unint64_t v37 = v25 + !std::__is_hash_power2[abi:ne180100](v42);
    std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
    float v26 = (float)(unint64_t)(*v12 + 1);
    std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
    unint64_t v36 = (unint64_t)std::__math::ceil[abi:ne180100](v26 / *v13);
    float v27 = std::max[abi:ne180100]<unsigned long>(&v37, &v36);
    std::__hash_table<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>>>::__rehash_unique[abi:ne180100](a1, *v27);
    unint64_t v42 = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::bucket_count[abi:ne180100]();
    uint64_t v39 = std::__constrain_hash[abi:ne180100](v43, v42);
  }
  unint64_t v35 = *(uint64_t **)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v39);
  if (v35)
  {
    uint64_t v22 = *v35;
    *(void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]() = v22;
    uint64_t *v35 = std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  }
  else
  {
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    unint64_t v35 = v14;
    uint64_t v24 = *v14;
    *(void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]() = v24;
    std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    uint64_t *v35 = v15;
    *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v39) = v35;
    if (*(void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]())
    {
      std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
      std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
      uint64_t v23 = v16;
      unint64_t v17 = (uint64_t *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
      unint64_t v18 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100](*v17);
      uint64_t v19 = std::__constrain_hash[abi:ne180100](v18, v42);
      *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v19) = v23;
    }
  }
  unint64_t i = (uint64_t *)std::unique_ptr<std::__hash_node<HSStage * {__strong},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::release[abi:ne180100]();
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  ++*v20;
  char v41 = 1;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)v38);
LABEL_21:
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](&v34, (uint64_t)i);
  std::pair<std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL>::pair[abi:ne180100]<std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL &,0>((uint64_t)&v49, &v34, &v41);
  return v49;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v21[2] = a6;
  v21[1] = a1;
  v21[0] = a2;
  uint64_t v20 = a3;
  uint64_t v19 = a4;
  uint64_t v18 = a5;
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v17 = v6;
  char v16 = 0;
  os_log_t v11 = std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::allocate[abi:ne180100](v6, 1uLL);
  std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::__hash_node_destructor[abi:ne180100]((uint64_t)&v15, v17, 0);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *>>>>::unique_ptr[abi:ne180100]<true,void>(a6, (uint64_t)v11, &v15);
  os_log_t v13 = (void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  uint64_t v14 = 0;
  std::__construct_at[abi:ne180100]<std::__hash_node<HSStage * {__strong},void *>,decltype(nullptr),unsigned long &,std::__hash_node<HSStage * {__strong},void *>*>(v13, (uint64_t)&v14, v21);
  uint64_t v10 = v17;
  uint64_t v7 = std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100](v7);
  std::__hash_key_value_types<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>::__get_ptr[abi:ne180100]();
  std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *>>>::construct[abi:ne180100]<std::pair<unsigned long long const,HSProxy * {__strong}>,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>,void>(v10, v8, v20, v19);
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::get_deleter[abi:ne180100]();
  *(unsigned char *)(v9 + 8) = 1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>>>::__rehash_unique[abi:ne180100](uint64_t a1, unint64_t a2)
{
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *>>>>::reset[abi:ne180100](a1, 0);
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *>>>>::unique_ptr[abi:ne180100]<true,void>(uint64_t a1, uint64_t a2, __n128 *a3)
{
  return a1;
}

{
  void v5[2];

  v5[1] = a1;
  v5[0] = a2;
  std::__compressed_pair<std::__hash_node<HSStage * {__strong},void *> *,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::__compressed_pair[abi:ne180100]<std::__hash_node<HSStage * {__strong},void *> *&,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>(a1, v5, a3);
  return a1;
}

void *std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *>>>::construct[abi:ne180100]<std::pair<unsigned long long const,HSProxy * {__strong}>,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>,void>(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  return std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *>>::construct[abi:ne180100]<std::pair<unsigned long long const,HSProxy * {__strong}>,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1, a2, a3, a4);
}

void *std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *>>::construct[abi:ne180100]<std::pair<unsigned long long const,HSProxy * {__strong}>,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  return std::pair<unsigned long long const,HSProxy * {__strong}>::pair[abi:ne180100]<unsigned long long const&>(a2, *a4);
}

void *std::pair<unsigned long long const,HSProxy * {__strong}>::pair[abi:ne180100]<unsigned long long const&>(void *a1, uint64_t a2)
{
  uint64_t v4 = a2;
  _ZNSt3__14pairIKyU8__strongP7HSProxyEC1B8ne180100IJRS1_EJEJLm0EEJEEENS_21piecewise_construct_tERNS_5tupleIJDpT_EEERNS9_IJDpT0_EEENS_15__tuple_indicesIJXspT1_EEEENSI_IJXspT2_EEEE(a1, (uint64_t)&v4);
  return a1;
}

void *_ZNSt3__14pairIKyU8__strongP7HSProxyEC1B8ne180100IJRS1_EJEJLm0EEJEEENS_21piecewise_construct_tERNS_5tupleIJDpT_EEERNS9_IJDpT0_EEENS_15__tuple_indicesIJXspT1_EEEENSI_IJXspT2_EEEE(void *a1, uint64_t a2)
{
  return a1;
}

void *_ZNSt3__14pairIKyU8__strongP7HSProxyEC2B8ne180100IJRS1_EJEJLm0EEJEEENS_21piecewise_construct_tERNS_5tupleIJDpT_EEERNS9_IJDpT0_EEENS_15__tuple_indicesIJXspT1_EEEENSI_IJXspT2_EEEE(void *a1, uint64_t a2)
{
  uint64_t v2 = (void *)std::get[abi:ne180100]<0ul,BOOL (*&&)(HSUtil::Encoder &,objc_object *)>(a2);
  BOOL result = a1;
  *a1 = *v2;
  a1[1] = 0;
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>>>::__rehash<true>(uint64_t a1, unint64_t a2)
{
  v14[1] = a1;
  v14[0] = a2;
  if (a2 == 1)
  {
    v14[0] = 2;
  }
  else if ((v14[0] & (v14[0] - 1)) != 0)
  {
    v14[0] = std::__next_prime(v14[0]);
  }
  unint64_t v13 = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::bucket_count[abi:ne180100]();
  if (v14[0] <= v13)
  {
    if (v14[0] < v13)
    {
      if (std::__is_hash_power2[abi:ne180100](v13))
      {
        std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
        float v9 = (float)*v2;
        std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
        float v4 = std::__math::ceil[abi:ne180100](v9 / *v3);
        size_t prime = std::__next_hash_pow2[abi:ne180100]((unint64_t)v4);
      }
      else
      {
        std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
        float v8 = (float)*v5;
        std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
        float v7 = std::__math::ceil[abi:ne180100](v8 / *v6);
        size_t prime = std::__next_prime((unint64_t)v7);
      }
      size_t v12 = prime;
      v14[0] = *std::max[abi:ne180100]<unsigned long>(v14, &v12);
      if (v14[0] < v13) {
        std::__hash_table<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>>>::__do_rehash<true>(a1, v14[0]);
      }
    }
  }
  else
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>>>::__do_rehash<true>(a1, v14[0]);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::get_deleter[abi:ne180100]();
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  if (a2)
  {
    float v7 = std::allocator_traits<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::allocate[abi:ne180100](v2, a2);
    std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> *>>>::reset[abi:ne180100]<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> **,0>(a1, (uint64_t)v7);
  }
  else
  {
    std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> *>>>::reset[abi:ne180100]<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> **,0>(a1, 0);
  }
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::get_deleter[abi:ne180100]();
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  unint64_t *v3 = a2;
  if (a2)
  {
    for (unint64_t i = 0; i < a2; ++i)
      *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, i) = 0;
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    uint64_t v14 = v4;
    size_t v12 = *v4;
    if (*v4)
    {
      unint64_t v5 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)v12);
      uint64_t v10 = std::__constrain_hash[abi:ne180100](v5, a2);
      *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v1objc_storeStrong(&location, 0) = v14;
      uint64_t v9 = v10;
      __n128 v15 = v12;
      for (unint64_t j = *v12; j; unint64_t j = *v15)
      {
        unint64_t v6 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)j);
        uint64_t v11 = std::__constrain_hash[abi:ne180100](v6, a2);
        if (v11 == v9)
        {
          __n128 v15 = (void **)j;
        }
        else if (*(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v11))
        {
          uint64_t *v15 = (void *)*j;
          *unint64_t j = **(void **)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v11);
          **(void **)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v1MTRestZoneIntegrator_::clearMotion(this, 1) = j;
        }
        else
        {
          *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v1MTRestZoneIntegrator_::clearMotion(this, 1) = v15;
          __n128 v15 = (void **)j;
          uint64_t v9 = v11;
        }
      }
    }
  }
}

void std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> *>>>::reset[abi:ne180100]<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> **,0>(uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  unint64_t v5 = *v2;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *> *> *>>::operator()[abi:ne180100](v4, v5);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  unint64_t v5 = *v2;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *>>>::operator()[abi:ne180100](v4, v5);
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = *(void *)a1;
    std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100]((uint64_t)a2);
    std::__hash_key_value_types<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>::__get_ptr[abi:ne180100]();
    std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *>>>::destroy[abi:ne180100]<std::pair<unsigned long long const,HSProxy * {__strong}>,void,void>(v3, v2);
    std::__destroy_at[abi:ne180100]<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>,0>((uint64_t)a2);
  }
  if (a2) {
    std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,HSProxy * {__strong}>,void *>>>::deallocate[abi:ne180100](*(void *)a1, a2, 1);
  }
}

BOOL HSUtil::CoderKey::operator!=<HSUtil::CoderKey>(uint64_t a1, uint64_t a2)
{
  return !HSUtil::CoderKey::operator==(a1, a2);
}

void _ZNSt3__16threadC1IZN6HSUtil10Connection5startEvEUlvE_JEvEEOT_DpOT0_()
{
}

void _ZNSt3__16threadC2IZN6HSUtil10Connection5startEvEUlvE_JEvEEOT_DpOT0_()
{
}

void *std::unique_ptr<std::__thread_struct>::unique_ptr[abi:ne180100]<true,void>(void *a1, uint64_t a2)
{
  return a1;
}

{
  void v4[2];

  v4[1] = a1;
  v4[0] = a2;
  std::__compressed_pair<HSUtil::Decoder::Callbacks *,std::default_delete<HSUtil::Decoder::Callbacks>>::__compressed_pair[abi:ne180100]<HSUtil::Decoder::Callbacks *&,std::__value_init_tag>(a1, v4);
  return a1;
}

void *std::tuple<std::unique_ptr<std::__thread_struct>,HSUtil::Connection::start(void)::{lambda(void)#1}>::tuple[abi:ne180100]<std::unique_ptr<std::__thread_struct>,HSUtil::Connection::start(void)::{lambda(void)#1},0>(void *a1, uint64_t a2, void *a3)
{
  return a1;
}

{
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS4_EEEEZN6HSUtil10Connection5startEvEUlvE_EEC1B8ne180100IJLm0ELm1EEJS7_SA_EJEJEJS7_SA_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(a1, a2, a3);
  return a1;
}

void *std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,HSUtil::Connection::start(void)::{lambda(void)#1}>>::unique_ptr[abi:ne180100]<true,void>(void *a1, uint64_t a2)
{
  return a1;
}

{
  void v4[2];

  v4[1] = a1;
  v4[0] = a2;
  std::__compressed_pair<HSUtil::Decoder::Callbacks *,std::default_delete<HSUtil::Decoder::Callbacks>>::__compressed_pair[abi:ne180100]<HSUtil::Decoder::Callbacks *&,std::__value_init_tag>(a1, v4);
  return a1;
}

uint64_t std::__libcpp_thread_create[abi:ne180100](pthread_t *a1, void *(__cdecl *a2)(void *), void *a3)
{
  return pthread_create(a1, 0, a2, a3);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,HSUtil::Connection::start(void)::{lambda(void)#1}>>(uint64_t a1)
{
  v4[1] = a1;
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,HSUtil::Connection::start(void)::{lambda(void)#1}>>::unique_ptr[abi:ne180100]<true,void>(v4, a1);
  uint64_t v3 = std::__thread_local_data();
  std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  uint64_t v1 = (std::__thread_struct *)std::unique_ptr<std::__hash_node<HSStage * {__strong},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::release[abi:ne180100]();
  std::__thread_specific_ptr<std::__thread_struct>::set_pointer(v3, v1);
  std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  _ZNSt3__116__thread_executeB8ne180100INS_10unique_ptrINS_15__thread_structENS_14default_deleteIS2_EEEEZN6HSUtil10Connection5startEvEUlvE_JEJEEEvRNS_5tupleIJT_T0_DpT1_EEENS_15__tuple_indicesIJXspT2_EEEE();
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,HSUtil::Connection::start(void)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100]((uint64_t)v4);
  return 0;
}

void sub_A315C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, _Unwind_Exception *exception_object)
{
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,HSUtil::Connection::start(void)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](v13 - 16);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,HSUtil::Connection::start(void)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,HSUtil::Connection::start(void)::{lambda(void)#1}>>::reset[abi:ne180100](a1, 0);
  return a1;
}

uint64_t std::unique_ptr<std::__thread_struct>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](a1, 0);
  return a1;
}

void *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS4_EEEEZN6HSUtil10Connection5startEvEUlvE_EEC1B8ne180100IJLm0ELm1EEJS7_SA_EJEJEJS7_SA_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(void *a1, uint64_t a2, void *a3)
{
  return a1;
}

void *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS4_EEEEZN6HSUtil10Connection5startEvEUlvE_EEC2B8ne180100IJLm0ELm1EEJS7_SA_EJEJEJS7_SA_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(void *a1, uint64_t a2, void *a3)
{
  return a1;
}

void *std::__tuple_leaf<0ul,std::unique_ptr<std::__thread_struct>,false>::__tuple_leaf[abi:ne180100]<std::unique_ptr<std::__thread_struct>,void>(void *a1, uint64_t a2)
{
  return a1;
}

void *std::unique_ptr<std::__thread_struct>::unique_ptr[abi:ne180100](void *a1, uint64_t a2)
{
  return a1;
}

{
  void v4[3];

  void v4[2] = a1;
  v4[1] = a2;
  v4[0] = std::unique_ptr<std::__hash_node<HSStage * {__strong},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::release[abi:ne180100]();
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  std::__compressed_pair<unsigned long,std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *>>::__compressed_pair[abi:ne180100]<unsigned long &,std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> * const&>(a1, v4);
  return a1;
}

void std::__thread_specific_ptr<std::__thread_struct>::set_pointer(std::__thread_specific_ptr<std::__thread_struct> *this, std::__thread_specific_ptr<std::__thread_struct>::pointer __p)
{
}

uint64_t *_ZNSt3__116__thread_executeB8ne180100INS_10unique_ptrINS_15__thread_structENS_14default_deleteIS2_EEEEZN6HSUtil10Connection5startEvEUlvE_JEJEEEvRNS_5tupleIJT_T0_DpT1_EEENS_15__tuple_indicesIJXspT2_EEEE()
{
  std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
  return std::__invoke[abi:ne180100]<HSUtil::Connection::start(void)::{lambda(void)#1}>(v0);
}

uint64_t std::__libcpp_tls_set[abi:ne180100](pthread_key_t a1, const void *a2)
{
  return pthread_setspecific(a1, a2);
}

uint64_t *std::__invoke[abi:ne180100]<HSUtil::Connection::start(void)::{lambda(void)#1}>(HSUtil::Connection **a1)
{
  return HSUtil::Connection::start(void)::{lambda(void)#1}::operator()(a1);
}

uint64_t *HSUtil::Connection::start(void)::{lambda(void)#1}::operator()(HSUtil::Connection **a1)
{
  return HSUtil::Connection::_readThread(*a1);
}

uint64_t *HSUtil::Connection::_readThread(HSUtil::Connection *this)
{
  v12[1] = (uint64_t)this;
  uint64_t v11 = this;
  HSUtil::Defer<HSUtil::Connection::_readThread(void)::{lambda(void)#1}>(&v11, v12);
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](v10);
  std::unique_lock<std::mutex>::unique_lock[abi:ne180100]((uint64_t)&v9, (uint64_t)this + 112);
  if (*((_DWORD *)this + 56) == 1)
  {
    std::shared_ptr<HSUtil::FileDescriptor>::operator=[abi:ne180100](v10, (void *)this + 29);
    std::unique_lock<std::mutex>::unlock(&v9);
    uint64_t v1 = (HSUtil::FileDescriptor *)std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)v10);
    for (unsigned int i = HSUtil::FileDescriptor::fd(v1); ; HSUtil::Connection::_handleMessage((uint64_t)this, i, &v5))
    {
      HSUtil::Connection::_readFromDescriptor((_DWORD *)i, (uint64_t)&v5, (unsigned __int8 *)&dword_4 + 2);
      __int16 v13 = v5;
      unsigned int v14 = v6;
      if (v6 > 0x4000000uLL) {
        break;
      }
    }
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 5;
  }
  int v8 = 1;
  std::unique_lock<std::mutex>::~unique_lock[abi:ne180100]((uint64_t)&v9);
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v10);
  return HSUtil::DeferredFn<HSUtil::Connection::_readThread(void)::{lambda(void)#1}>::~DeferredFn(v12);
}

void sub_A36EC()
{
  __cxa_end_catch();
  HSUtil::DeferredFn<HSUtil::Connection::_readThread(void)::{lambda(void)#1}>::~DeferredFn((uint64_t *)(v0 - 24));
  _Unwind_Resume(v1);
}

void *HSUtil::Defer<HSUtil::Connection::_readThread(void)::{lambda(void)#1}>@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return std::__hash_const_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_const_iterator[abi:ne180100](a2, a1);
}

_DWORD *HSUtil::Connection::_readFromDescriptor(_DWORD *this, uint64_t a2, unsigned __int8 *a3)
{
  int v9 = (int)this;
  for (unint64_t i = 0; i < (unint64_t)a3; i += v5)
  {
    do
    {
      this = (_DWORD *)read(v9, (void *)(a2 + i), (size_t)&a3[-i]);
      uint64_t v5 = (uint64_t)this;
      BOOL v4 = 0;
      if (this == (_DWORD *)-1)
      {
        this = __error();
        BOOL v4 = *this == 4;
      }
    }
    while (v4);
    if (v5 <= 0)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 3;
    }
  }
  return this;
}

void HSUtil::Connection::_handleMessage(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v27 = a1;
  unsigned int v26 = a2;
  unint64_t v25 = a3;
  HSUtil::Buffer::Buffer((HSUtil::Buffer *)v24, *(unsigned int *)((char *)a3 + 2), *(unsigned int *)((char *)a3 + 2));
  if (!HSUtil::Buffer::operator BOOL((HSUtil::Buffer *)v24))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 8;
  }
  unsigned int v12 = v26;
  uint64_t v4 = HSUtil::Buffer::data((HSUtil::Buffer *)v24);
  HSUtil::Connection::_readFromDescriptor((_DWORD *)v12, v4, (unsigned __int8 *)*(unsigned int *)((char *)v25 + 2));
  if (*(_WORD *)v25)
  {
    std::unique_lock<std::mutex>::unique_lock[abi:ne180100]((uint64_t)v23, a1 + 352);
    if (*(unsigned char *)(a1 + 464))
    {
      int v22 = 1;
    }
    else
    {
      if (!*(void *)(a1 + 472))
      {
        uint64_t v5 = __cxa_allocate_exception(4uLL);
        *uint64_t v5 = 6;
      }
      if (*(unsigned char *)(a1 + 465))
      {
        unsigned int v6 = __cxa_allocate_exception(4uLL);
        _DWORD *v6 = 6;
      }
      float v7 = v25;
      *(_DWORD *)(a1 + 48objc_storeStrong(&location, 0) = *v25;
      *(_WORD *)(a1 + 484) = *((_WORD *)v7 + 2);
      HSUtil::Buffer::operator=(a1 + 488, (uint64_t)v24);
      *(unsigned char *)(a1 + 465) = 1;
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 416));
      int v22 = 0;
    }
    std::unique_lock<std::mutex>::~unique_lock[abi:ne180100]((uint64_t)v23);
    if (!v22) {
LABEL_24:
    }
      int v22 = 0;
  }
  else
  {
    std::unique_lock<std::mutex>::unique_lock[abi:ne180100]((uint64_t)&v21, a1 + 560);
    if (*(unsigned char *)(a1 + 672))
    {
      int v22 = 1;
    }
    else
    {
      if (*(unsigned char *)(a1 + 673))
      {
        int v8 = __cxa_allocate_exception(4uLL);
        _DWORD *v8 = 6;
      }
      int v9 = v25;
      *(_DWORD *)(a1 + 688) = *v25;
      *(_WORD *)(a1 + 692) = *((_WORD *)v9 + 2);
      HSUtil::Buffer::operator=(a1 + 696, (uint64_t)v24);
      *(unsigned char *)(a1 + 673) = 1;
      if (*(void *)(a1 + 680))
      {
        std::condition_variable::notify_one((std::condition_variable *)(a1 + 624));
      }
      else
      {
        if ((*(_WORD *)v25 & 2) != 0)
        {
          uint64_t v10 = __cxa_allocate_exception(4uLL);
          _DWORD *v10 = 6;
        }
        std::unique_lock<std::mutex>::unlock(&v21);
        std::weak_ptr<HSMapper>::weak_ptr<HSMapper,0>(v20, (void *)a1);
        queue = *(NSObject **)(a1 + 16);
        unsigned int v14 = _NSConcreteStackBlock;
        int v15 = -973078528;
        int v16 = 0;
        uint64_t v17 = ___ZN6HSUtil10Connection14_handleMessageEiRKNS0_6HeaderE_block_invoke;
        uint64_t v18 = &__block_descriptor_48_ea8_32c44_ZTSNSt3__18weak_ptrIN6HSUtil10ConnectionEEE_e5_v8__0l;
        std::weak_ptr<HSMapper>::weak_ptr<HSMapper,0>(v19, v20);
        dispatch_async(queue, &v14);
        std::weak_ptr<HSMapper>::~weak_ptr((uint64_t)v19);
        std::weak_ptr<HSMapper>::~weak_ptr((uint64_t)v20);
      }
      int v22 = 0;
    }
    std::unique_lock<std::mutex>::~unique_lock[abi:ne180100]((uint64_t)&v21);
    if (!v22) {
      goto LABEL_24;
    }
  }
  HSUtil::Buffer::~Buffer((HSUtil::Buffer *)v24);
}

uint64_t *HSUtil::DeferredFn<HSUtil::Connection::_readThread(void)::{lambda(void)#1}>::~DeferredFn(uint64_t *a1)
{
  return a1;
}

{
  HSUtil::Connection::_readThread(void)::{lambda(void)#1}::operator()(a1);
  return a1;
}

uint64_t ___ZN6HSUtil10Connection14_handleMessageEiRKNS0_6HeaderE_block_invoke(uint64_t a1)
{
  void v3[3] = a1;
  void v3[2] = a1;
  std::weak_ptr<HSMapper>::lock(a1 + 32, v3);
  if (std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::operator BOOL[abi:ne180100]((uint64_t)v3))
  {
    uint64_t v1 = (dispatch_queue_t *)std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)v3);
    HSUtil::Connection::_handleInitialMessage(v1);
  }
  return std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v3);
}

uint64_t HSUtil::Connection::_handleInitialMessage(dispatch_queue_t *this)
{
  uint64_t v11 = this;
  dispatch_assert_queue_V2(this[2]);
  std::unique_lock<std::mutex>::unique_lock[abi:ne180100]((uint64_t)&v10, (uint64_t)(this + 70));
  if ((_BYTE)this[84])
  {
    int v9 = 1;
  }
  else
  {
    if ((*((unsigned char *)this + 673) & 1) == 0) {
      __assert_rtn("_handleInitialMessage", "HSConnection.h", 419, "_reply.messageReady");
    }
    HSUtil::Buffer::Buffer((uint64_t)v8, (uint64_t)(this + 87));
    *((unsigned char *)this + 673) = 0;
    std::unique_lock<std::mutex>::unlock(&v10);
    std::unique_lock<std::mutex>::unique_lock[abi:ne180100]((uint64_t)&v7, (uint64_t)(this + 14));
    if (*((_DWORD *)this + 56) == 1)
    {
      if (this[32]) {
        __assert_rtn("_handleInitialMessage", "HSConnection.h", 433, "!_state.replyThread");
      }
      this[32] = (dispatch_queue_t)pthread_self();
      std::unique_lock<std::mutex>::unlock(&v7);
      std::weak_ptr<HSMapper>::lock((uint64_t)this, v5);
      std::function<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::operator()((uint64_t)(this + 3), (uint64_t)v5, (uint64_t)v8);
      std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v5);
      if (!HSUtil::Buffer::operator BOOL((HSUtil::Buffer *)v6))
      {
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = 7;
      }
      HSUtil::Connection::_sendMessage((HSUtil::Connection *)this, (const HSUtil::Buffer *)v6, (HSUtil::Connection::Mailbox *)(this + 70), 3, (HSUtil::Buffer *)v4);
      HSUtil::Buffer::~Buffer((HSUtil::Buffer *)v4);
      std::unique_lock<std::mutex>::lock(&v7);
      if (*((_DWORD *)this + 56) == 1)
      {
        this[32] = 0;
        std::unique_lock<std::mutex>::unlock(&v7);
        int v9 = 0;
      }
      else
      {
        int v9 = 1;
      }
      HSUtil::Buffer::~Buffer((HSUtil::Buffer *)v6);
    }
    else
    {
      int v9 = 1;
    }
    std::unique_lock<std::mutex>::~unique_lock[abi:ne180100]((uint64_t)&v7);
    HSUtil::Buffer::~Buffer((HSUtil::Buffer *)v8);
  }
  return std::unique_lock<std::mutex>::~unique_lock[abi:ne180100]((uint64_t)&v10);
}

void sub_A40A0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  *a12 = a1;
  *(_DWORD *)(v12 - 52) = a2;
  __cxa_end_catch();
  _Unwind_Resume(*v13);
}

uint64_t std::function<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__function::__value_func<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::operator()[abi:ne180100](a1, a2, a3);
}

uint64_t HSUtil::Connection::_sendMessage@<X0>(HSUtil::Connection *this@<X0>, const HSUtil::Buffer *a2@<X1>, HSUtil::Connection::Mailbox *a3@<X3>, __int16 a4@<W2>, HSUtil::Buffer *a5@<X8>)
{
  uint64_t v39 = a5;
  uint64_t v38 = this;
  unint64_t v37 = a2;
  __int16 v36 = a4;
  unint64_t v35 = a3;
  unint64_t v20 = HSUtil::Buffer::length(a2);
  if (v20 > std::numeric_limits<unsigned int>::max[abi:ne180100]())
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 5;
  }
  __int16 v40 = v36;
  __int16 v33 = v36;
  int v41 = HSUtil::Buffer::length(v37);
  int v34 = v41;
  BOOL v32 = (v36 & 2) == 0;
  if ((v36 & 2) == 0)
  {
    std::unique_lock<std::mutex>::unique_lock[abi:ne180100]((uint64_t)&v31, (uint64_t)v35);
    if (*((unsigned char *)v35 + 112))
    {
      unsigned int v6 = __cxa_allocate_exception(4uLL);
      _DWORD *v6 = 2;
    }
    if (*((unsigned char *)v35 + 113)) {
      __assert_rtn("_sendMessage", "HSConnection.h", 521, "!mailbox.messageReady");
    }
    ++*((void *)v35 + 15);
    std::unique_lock<std::mutex>::unlock(&v31);
    std::unique_lock<std::mutex>::~unique_lock[abi:ne180100]((uint64_t)&v31);
  }
  std::unique_lock<std::mutex>::unique_lock[abi:ne180100]((uint64_t)&v30, (uint64_t)this + 272);
  if (!std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::operator BOOL[abi:ne180100]((uint64_t)this + 336))
  {
    std::unique_lock<std::mutex> v7 = __cxa_allocate_exception(4uLL);
    _DWORD *v7 = 2;
  }
  int v8 = (HSUtil::FileDescriptor *)std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)this + 336);
  unsigned int v17 = HSUtil::FileDescriptor::fd(v8);
  HSUtil::Connection::_writeToDescriptor((_DWORD *)v17, (uint64_t)&v33, (const unsigned __int8 *)&dword_4 + 2);
  int v9 = (HSUtil::FileDescriptor *)std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)this + 336);
  unsigned int v16 = HSUtil::FileDescriptor::fd(v9);
  uint64_t v15 = HSUtil::Buffer::data(v37);
  std::unique_lock<std::mutex> v10 = (const unsigned __int8 *)HSUtil::Buffer::length(v37);
  HSUtil::Connection::_writeToDescriptor((_DWORD *)v16, v15, v10);
  std::unique_lock<std::mutex>::unlock(&v30);
  if (v32)
  {
    do
    {
      std::unique_lock<std::mutex>::unique_lock[abi:ne180100]((uint64_t)&__lk, (uint64_t)v35);
      while (1)
      {
        if (*((unsigned char *)v35 + 112))
        {
          uint64_t v11 = __cxa_allocate_exception(4uLL);
          _DWORD *v11 = 2;
        }
        if (*((unsigned char *)v35 + 113)) {
          break;
        }
        if (std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)this + 96) < 0)
        {
          std::condition_variable::wait((std::condition_variable *)((char *)v35 + 64), &__lk);
        }
        else
        {
          BOOL v27 = 0;
          BOOL v27 = std::condition_variable::wait_for<long long,std::ratio<1l,1000000l>>((std::condition_variable *)((char *)v35 + 64), &__lk, (uint64_t *)this + 12);
          if (v27)
          {
            uint64_t v12 = __cxa_allocate_exception(4uLL);
            _DWORD *v12 = 4;
          }
        }
      }
      int v25 = *((_DWORD *)v35 + 32);
      __int16 v26 = *((_WORD *)v35 + 66);
      char v24 = 0;
      HSUtil::Buffer::Buffer((uint64_t)a5, (uint64_t)v35 + 136);
      *((unsigned char *)v35 + 113) = 0;
      if ((v25 & 2) != 0)
      {
        if (!*((void *)v35 + 15)) {
          __assert_rtn("_sendMessage", "HSConnection.h", 571, "mailbox.waiterCount > 0");
        }
        --*((void *)v35 + 15);
        char v24 = 1;
        int v29 = 1;
      }
      else
      {
        std::unique_lock<std::mutex>::unlock(&__lk);
        std::weak_ptr<HSMapper>::lock((uint64_t)this, v22);
        std::function<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::operator()((uint64_t)this + 24, (uint64_t)v22, (uint64_t)a5);
        std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v22);
        if (!HSUtil::Buffer::operator BOOL((HSUtil::Buffer *)v23))
        {
          __int16 v13 = __cxa_allocate_exception(4uLL);
          _DWORD *v13 = 7;
        }
        HSUtil::Connection::_sendMessage(v21, this, (const HSUtil::Buffer *)v23, v36 | 2, v35);
        HSUtil::Buffer::~Buffer((HSUtil::Buffer *)v21);
        HSUtil::Buffer::~Buffer((HSUtil::Buffer *)v23);
        int v29 = 0;
      }
      if ((v24 & 1) == 0) {
        HSUtil::Buffer::~Buffer(a5);
      }
      std::unique_lock<std::mutex>::~unique_lock[abi:ne180100]((uint64_t)&__lk);
    }
    while (!v29);
  }
  else
  {
    HSUtil::Buffer::Buffer(a5);
    int v29 = 1;
  }
  return std::unique_lock<std::mutex>::~unique_lock[abi:ne180100]((uint64_t)&v30);
}

uint64_t std::__function::__value_func<HSUtil::Buffer ()(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer&&)>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a1 + 24)) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 48))(*(void *)(a1 + 24), a2, a3);
}

uint64_t std::numeric_limits<unsigned int>::max[abi:ne180100]()
{
  return std::char_traits<char>::eof[abi:ne180100]();
}

_DWORD *HSUtil::Connection::_writeToDescriptor(_DWORD *this, uint64_t a2, const unsigned __int8 *a3)
{
  int v11 = (int)this;
  for (unint64_t i = 0; i < (unint64_t)a3; i += v7)
  {
    do
    {
      this = (_DWORD *)write(v11, (const void *)(a2 + i), (size_t)&a3[-i]);
      uint64_t v7 = (uint64_t)this;
      BOOL v6 = 0;
      if (this == (_DWORD *)-1)
      {
        this = __error();
        BOOL v6 = *this == 4;
      }
    }
    while (v6);
    if (!v7)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 3;
    }
    if (v7 < 0)
    {
      if (*__error() == 35)
      {
        uint64_t v4 = __cxa_allocate_exception(4uLL);
        *uint64_t v4 = 4;
      }
      uint64_t v5 = __cxa_allocate_exception(4uLL);
      *uint64_t v5 = 3;
    }
  }
  return this;
}

BOOL std::condition_variable::wait_for<long long,std::ratio<1l,1000000l>>(std::condition_variable *a1, std::unique_lock<std::mutex> *a2, uint64_t *a3)
{
  float v28 = a1;
  BOOL v27 = a2;
  __int16 v26 = a3;
  uint64_t v25 = std::chrono::duration<long long,std::ratio<1l,1000000l>>::zero[abi:ne180100]();
  if (std::chrono::operator<=[abi:ne180100]<long long,std::ratio<1l,1000000l>,long long,std::ratio<1l,1000000l>>((uint64_t)a3, (uint64_t)&v25))
  {
    return 1;
  }
  else
  {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v20 = std::chrono::system_clock::now().__d_.__rep_;
    uint64_t v21 = std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>::time_since_epoch[abi:ne180100]((uint64_t)&v20);
    uint64_t v22 = std::__safe_nanosecond_cast[abi:ne180100]<long long,std::ratio<1l,1000000l>,0>(v21);
    uint64_t v23 = std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)&v22);
    uint64_t v17 = *v26;
    uint64_t v18 = std::__safe_nanosecond_cast[abi:ne180100]<long long,std::ratio<1l,1000000l>,0>(v17);
    uint64_t v19 = std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)&v18);
    uint64_t v8 = v23;
    if (v8 <= std::numeric_limits<long>::max[abi:ne180100]() - v19)
    {
      BOOL v6 = v27;
      uint64_t v13 = v23 + v19;
      std::__hash_const_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_const_iterator[abi:ne180100](&v14, &v13);
      std::__hash_const_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_const_iterator[abi:ne180100](&v15, &v14);
      v4.__d_.__rep_ = v15.__d_.__rep_;
      std::condition_variable::__do_timed_wait(a1, v6, v4);
    }
    else
    {
      std::unique_lock<std::mutex> __lk = v27;
      v16.__d_.__rep_ = std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>::max[abi:ne180100]();
      v3.__d_.__rep_ = v16.__d_.__rep_;
      std::condition_variable::__do_timed_wait(a1, __lk, v3);
    }
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11 = std::chrono::steady_clock::now().__d_.__rep_;
    uint64_t v12 = std::chrono::operator-[abi:ne180100]<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>((uint64_t)&v11, (uint64_t)&rep);
    return !std::chrono::operator<[abi:ne180100]<long long,std::ratio<1l,1000000000l>,long long,std::ratio<1l,1000000l>>(&v12, (uint64_t)v26);
  }
}

BOOL std::chrono::operator<=[abi:ne180100]<long long,std::ratio<1l,1000000l>,long long,std::ratio<1l,1000000l>>(uint64_t a1, uint64_t a2)
{
  return !std::chrono::operator<[abi:ne180100]<long long,std::ratio<1l,1000000l>,long long,std::ratio<1l,1000000l>>(a2, a1);
}

uint64_t std::chrono::duration<long long,std::ratio<1l,1000000l>>::zero[abi:ne180100]()
{
  uint64_t v1 = std::chrono::duration_values<long long>::zero[abi:ne180100]();
  std::__hash_const_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_const_iterator[abi:ne180100](&v2, &v1);
  return v2;
}

uint64_t std::__safe_nanosecond_cast[abi:ne180100]<long long,std::ratio<1l,1000000l>,0>(uint64_t a1)
{
  uint64_t v7 = a1;
  if (std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)&v7))
  {
    uint64_t v5 = std::numeric_limits<long>::max[abi:ne180100]();
    if (std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)&v7) <= 0
      || std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)&v7) <= v5 / 1000)
    {
      int64_t v4 = std::numeric_limits<long long>::min[abi:ne180100]();
      if (std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)&v7) >= 0
        || std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)&v7) >= v4 / 1000)
      {
        uint64_t v3 = 1000
           * std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)&v7);
        if (v3)
        {
          std::__hash_const_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_const_iterator[abi:ne180100](&v8, &v3);
        }
        else
        {
          int v2 = 1;
          std::chrono::duration<long long,std::ratio<1l,1l>>::duration[abi:ne180100]<int,0>(&v8, &v2);
        }
      }
      else
      {
        return std::chrono::duration<long long,std::ratio<1l,1000000000l>>::min[abi:ne180100]();
      }
    }
    else
    {
      return std::chrono::duration<long long,std::ratio<1l,1000000000l>>::max[abi:ne180100]();
    }
  }
  else
  {
    int v6 = 0;
    std::chrono::duration<long long,std::ratio<1l,1l>>::duration[abi:ne180100]<int,0>(&v8, &v6);
  }
  return v8;
}

uint64_t std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>::time_since_epoch[abi:ne180100](uint64_t a1)
{
  return *(void *)a1;
}

uint64_t std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>::max[abi:ne180100]()
{
  uint64_t v1 = std::chrono::duration<long long,std::ratio<1l,1000000000l>>::max[abi:ne180100]();
  std::__hash_const_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_const_iterator[abi:ne180100](&v2, &v1);
  return v2;
}

BOOL std::chrono::operator<[abi:ne180100]<long long,std::ratio<1l,1000000000l>,long long,std::ratio<1l,1000000l>>(void *a1, uint64_t a2)
{
  uint64_t v5 = a1;
  uint64_t v4 = a2;
  return std::chrono::__duration_lt<std::chrono::duration<long long,std::ratio<1l,1000000000l>>,std::chrono::duration<long long,std::ratio<1l,1000000l>>>::operator()[abi:ne180100]((uint64_t)&v3, a1, a2);
}

uint64_t std::chrono::operator-[abi:ne180100]<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a1;
  uint64_t v5 = a2;
  uint64_t v4 = std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>::time_since_epoch[abi:ne180100](a1);
  uint64_t v3 = std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>::time_since_epoch[abi:ne180100](v5);
  return std::chrono::operator-[abi:ne180100]<long long,std::ratio<1l,1000000000l>,long long,std::ratio<1l,1000000000l>>(&v4, &v3);
}

BOOL std::chrono::operator<[abi:ne180100]<long long,std::ratio<1l,1000000l>,long long,std::ratio<1l,1000000l>>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1;
  uint64_t v4 = a2;
  return std::chrono::__duration_lt<std::chrono::duration<long long,std::ratio<1l,1000000l>>,std::chrono::duration<long long,std::ratio<1l,1000000l>>>::operator()[abi:ne180100]((uint64_t)&v3, a1, a2);
}

BOOL std::chrono::__duration_lt<std::chrono::duration<long long,std::ratio<1l,1000000l>>,std::chrono::duration<long long,std::ratio<1l,1000000l>>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100](a2);
  return v4 < std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100](a3);
}

uint64_t std::chrono::duration_values<long long>::zero[abi:ne180100]()
{
  return 0;
}

uint64_t std::chrono::duration<long long,std::ratio<1l,1000000000l>>::max[abi:ne180100]()
{
  uint64_t v1 = std::chrono::duration_values<long long>::max[abi:ne180100]();
  std::__hash_const_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_const_iterator[abi:ne180100](&v2, &v1);
  return v2;
}

unint64_t std::numeric_limits<long long>::min[abi:ne180100]()
{
  return std::__libcpp_numeric_limits<long long,true>::min[abi:ne180100]();
}

uint64_t std::chrono::duration<long long,std::ratio<1l,1000000000l>>::min[abi:ne180100]()
{
  unint64_t v1 = std::chrono::duration_values<long long>::min[abi:ne180100]();
  std::__hash_const_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_const_iterator[abi:ne180100](&v2, &v1);
  return v2;
}

uint64_t std::chrono::duration_values<long long>::max[abi:ne180100]()
{
  return std::numeric_limits<long>::max[abi:ne180100]();
}

unint64_t std::__libcpp_numeric_limits<long long,true>::min[abi:ne180100]()
{
  return 0x8000000000000000;
}

unint64_t std::chrono::duration_values<long long>::min[abi:ne180100]()
{
  return std::numeric_limits<long long>::lowest[abi:ne180100]();
}

unint64_t std::numeric_limits<long long>::lowest[abi:ne180100]()
{
  return std::numeric_limits<long long>::min[abi:ne180100]();
}

BOOL std::chrono::__duration_lt<std::chrono::duration<long long,std::ratio<1l,1000000000l>>,std::chrono::duration<long long,std::ratio<1l,1000000l>>>::operator()[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  uint64_t v7 = a3;
  uint64_t v6 = *a2;
  uint64_t v4 = std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)&v6);
  std::chrono::duration<long long,std::ratio<1l,1000l>>::duration[abi:ne180100]<long long,std::ratio<1l,1l>,0>(&v5, v7);
  return v4 < std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)&v5);
}

uint64_t std::chrono::operator-[abi:ne180100]<long long,std::ratio<1l,1000000000l>,long long,std::ratio<1l,1000000000l>>(void *a1, uint64_t *a2)
{
  uint64_t v8 = a1;
  uint64_t v7 = a2;
  uint64_t v5 = *a1;
  uint64_t v3 = std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)&v5);
  uint64_t v4 = *v7;
  uint64_t v6 = v3
     - std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)&v4);
  std::__hash_const_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_const_iterator[abi:ne180100](&v9, &v6);
  return v9;
}

void HSUtil::Connection::_readThread(void)::{lambda(void)#1}::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  std::mutex::lock((std::mutex *)(*a1 + 112));
  *(unsigned char *)(v1 + 264) = 1;
  std::condition_variable::notify_all((std::condition_variable *)(v1 + 176));
  std::mutex::unlock((std::mutex *)(v1 + 112));
}

void std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,HSUtil::Connection::start(void)::{lambda(void)#1}>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  uint64_t v5 = *v2;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,HSUtil::Connection::start(void)::{lambda(void)#1}>>::operator()[abi:ne180100](v4, v5);
  }
}

void std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,HSUtil::Connection::start(void)::{lambda(void)#1}>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::tuple<std::unique_ptr<std::__thread_struct>,HSUtil::Connection::start(void)::{lambda(void)#1}>::~tuple(a2);
    operator delete();
  }
}

uint64_t std::tuple<std::unique_ptr<std::__thread_struct>,HSUtil::Connection::start(void)::{lambda(void)#1}>::~tuple(uint64_t a1)
{
  return a1;
}

{
  std::__tuple_impl<std::__tuple_indices<0ul,1ul>,std::unique_ptr<std::__thread_struct>,HSUtil::Connection::start(void)::{lambda(void)#1}>::~__tuple_impl(a1);
  return a1;
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul>,std::unique_ptr<std::__thread_struct>,HSUtil::Connection::start(void)::{lambda(void)#1}>::~__tuple_impl(uint64_t a1)
{
  return a1;
}

{
  std::__tuple_leaf<0ul,std::unique_ptr<std::__thread_struct>,false>::~__tuple_leaf(a1);
  return a1;
}

uint64_t std::__tuple_leaf<0ul,std::unique_ptr<std::__thread_struct>,false>::~__tuple_leaf(uint64_t a1)
{
  return a1;
}

void std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  uint64_t v5 = *v2;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    std::default_delete<std::__thread_struct>::operator()[abi:ne180100](v4, v5);
  }
}

void std::default_delete<std::__thread_struct>::operator()[abi:ne180100](uint64_t a1, std::__thread_struct *a2)
{
  if (a2)
  {
    std::__thread_struct::~__thread_struct(a2);
    operator delete();
  }
}

uint64_t std::set<std::shared_ptr<HSMapper>>::set[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  char v3;
  uint64_t v4;

  uint64_t v4 = a1;
  std::__tree<std::shared_ptr<HSMapper>>::__tree(a1, (uint64_t)&v3);
  return a1;
}

uint64_t std::__tree<std::shared_ptr<HSMapper>>::__tree(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t result;
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;

  std::unique_lock<std::mutex> v10 = a1;
  uint64_t v9 = a2;
  std::__compressed_pair<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>>::__compressed_pair[abi:ne180100]<true,void>((void *)(a1 + 8));
  uint64_t v8 = 0;
  std::__compressed_pair<unsigned long,HSUtil::ObjectHasher>::__compressed_pair[abi:ne180100]<int,HSUtil::ObjectHasher const&>((void *)(a1 + 16), &v8);
  std::__tree<std::shared_ptr<HSMapper>>::__end_node[abi:ne180100]();
  uint64_t v6 = v2;
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  uint64_t v4 = v3;
  BOOL result = a1;
  *uint64_t v4 = v6;
  return result;
}

void std::__tree<std::shared_ptr<HSMapper>>::__end_node[abi:ne180100]()
{
}

void HSUtil::Connection::sendAsync(HSUtil::Connection *this, const HSUtil::Buffer *a2)
{
  v18[10] = this;
  v18[9] = a2;
  v12[0] = 0;
  v12[1] = v12;
  int v13 = 301989888;
  int v14 = 120;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v15 = __Block_byref_object_copy__0;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v16 = __Block_byref_object_dispose__0;
  uint64_t v17 = "";
  HSUtil::Buffer::slice<HSUtil::Buffer::CopyType>(a2, 0, (uint64_t)v18);
  std::weak_ptr<HSMapper>::weak_ptr<HSMapper,0>(v11, this);
  queue = *((void *)this + 13);
  uint64_t v4 = _NSConcreteStackBlock;
  int v5 = -973078528;
  int v6 = 0;
  uint64_t v7 = ___ZN6HSUtil10Connection9sendAsyncERKNS_6BufferE_block_invoke;
  uint64_t v8 = &unk_1424D8;
  std::weak_ptr<HSMapper>::weak_ptr<HSMapper,0>(v10, v11);
  uint64_t v9 = v12;
  dispatch_async(queue, &v4);
  std::weak_ptr<HSMapper>::~weak_ptr((uint64_t)v10);
  std::weak_ptr<HSMapper>::~weak_ptr((uint64_t)v11);
  _Block_object_dispose(v12, 8);
  HSUtil::Buffer::~Buffer((HSUtil::Buffer *)v18);
}

uint64_t HSUtil::Connection::send@<X0>(HSUtil::Connection *this@<X0>, const HSUtil::Buffer *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = a3;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v16 = this;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v15 = a2;
  pthread_t v14 = 0;
  pthread_t v14 = pthread_self();
  char v13 = 0;
  char v12 = 0;
  std::unique_lock<std::mutex>::unique_lock[abi:ne180100]((uint64_t)&__lk, (uint64_t)this + 112);
  if (*((_DWORD *)this + 56) == 1)
  {
    if (*((pthread_t *)this + 32) == v14)
    {
      char v13 = 1;
    }
    else
    {
      while (*((pthread_t *)this + 31) != v14)
      {
        if (!*((void *)this + 31))
        {
          *((void *)this + 3MTRestZoneIntegrator_::clearMotion(this, 1) = v14;
          char v12 = 1;
          break;
        }
        std::condition_variable::wait((std::condition_variable *)((char *)this + 176), &__lk);
        if (*((_DWORD *)this + 56) != 1) {
          goto LABEL_2;
        }
      }
    }
    std::unique_lock<std::mutex>::unlock(&__lk);
    HSUtil::Buffer::Buffer((HSUtil::Buffer *)v9);
    __int16 v8 = (v13 & 1) != 0;
    if (v13) {
      uint64_t v4 = (HSUtil::Connection *)((char *)this + 560);
    }
    else {
      uint64_t v4 = (HSUtil::Connection *)((char *)this + 352);
    }
    HSUtil::Connection::_sendMessage(this, v15, v4, (v13 & 1) != 0, (HSUtil::Buffer *)v7);
    HSUtil::Buffer::operator=((uint64_t)v9, (uint64_t)v7);
    HSUtil::Buffer::~Buffer((HSUtil::Buffer *)v7);
    if (v12)
    {
      std::unique_lock<std::mutex>::lock(&__lk);
      if (*((_DWORD *)this + 56) != 1)
      {
        HSUtil::Buffer::Buffer(a3);
        int v10 = 1;
LABEL_18:
        HSUtil::Buffer::~Buffer((HSUtil::Buffer *)v9);
        return std::unique_lock<std::mutex>::~unique_lock[abi:ne180100]((uint64_t)&__lk);
      }
      *((void *)this + 3MTRestZoneIntegrator_::clearMotion(this, 1) = 0;
      std::condition_variable::notify_one((std::condition_variable *)((char *)this + 176));
      std::unique_lock<std::mutex>::unlock(&__lk);
    }
    HSUtil::Buffer::Buffer(a3, (uint64_t)v9);
    int v10 = 1;
    goto LABEL_18;
  }
LABEL_2:
  HSUtil::Buffer::Buffer(a3);
  int v10 = 1;
  return std::unique_lock<std::mutex>::~unique_lock[abi:ne180100]((uint64_t)&__lk);
}

uint64_t *HSUtil::DeferredFn<HSMapper::send(unsigned long long,objc_selector *,objc_object *,objc_object *,objc_object *)::{lambda(void)#1}>::~DeferredFn(uint64_t *a1)
{
  return a1;
}

{
  HSMapper::send(unsigned long long,objc_selector *,objc_object *,objc_object *,objc_object *)::{lambda(void)#1}::operator()(a1);
  return a1;
}

uint64_t __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
  return HSUtil::Buffer::Buffer(a1 + 48, a2 + 48);
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

uint64_t ___ZN6HSUtil10Connection9sendAsyncERKNS_6BufferE_block_invoke(uint64_t a1)
{
  v5[3] = a1;
  void v5[2] = a1;
  std::weak_ptr<HSMapper>::lock(a1 + 40, v5);
  if (std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::operator BOOL[abi:ne180100]((uint64_t)v5))
  {
    uint64_t v1 = (HSUtil::Connection *)std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)v5);
    HSUtil::Connection::send(v1, (const HSUtil::Buffer *)(*(void *)(*(void *)(a1 + 32) + 8) + 48), (uint64_t)v4);
    HSUtil::Buffer::~Buffer((HSUtil::Buffer *)v4);
  }
  return std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v5);
}

void *__copy_helper_block_ea8_40c44_ZTSNSt3__18weak_ptrIN6HSUtil10ConnectionEEE(uint64_t a1, uint64_t a2)
{
  return std::weak_ptr<HSMapper>::weak_ptr<HSMapper,0>((void *)(a1 + 40), (void *)(a2 + 40));
}

uint64_t __destroy_helper_block_ea8_40c44_ZTSNSt3__18weak_ptrIN6HSUtil10ConnectionEEE(uint64_t a1)
{
  return std::weak_ptr<HSMapper>::~weak_ptr(a1 + 40);
}

uint64_t HSMapper::send(unsigned long long,objc_selector *,objc_object *,objc_object *,objc_object *)::{lambda(void)#1}::operator()(uint64_t *a1)
{
  v3[1] = a1;
  uint64_t v2 = *a1;
  std::unique_ptr<HSUtil::EncoderBuf>::unique_ptr[abi:ne180100](v3, a1[1]);
  HSMapper::_pushEncoderBuf(v2, (uint64_t)v3);
  return std::unique_ptr<HSUtil::EncoderBuf>::~unique_ptr[abi:ne180100]((uint64_t)v3);
}

void sub_A5C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, _Unwind_Exception *exception_object)
{
  std::unique_ptr<HSUtil::EncoderBuf>::~unique_ptr[abi:ne180100](v13 - 16);
  _Unwind_Resume(a1);
}

id proxyFn0(HSProxy *a1, objc_selector *a2)
{
  id location = 0;
  objc_storeStrong(&location, a1);
  uint64_t v7 = a2;
  std::weak_ptr<HSMapper>::lock((uint64_t)location + 16, v6);
  if (std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::operator BOOL[abi:ne180100]((uint64_t)v6))
  {
    uint64_t v2 = (HSMapper *)std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)v6);
    id v9 = HSMapper::send(v2, *((void **)location + 1), v7, 0, 0, 0);
  }
  else
  {
    id v9 = 0;
  }
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v6);
  objc_storeStrong(&location, 0);
  uint64_t v3 = v9;

  return v3;
}

id proxyFn2(HSProxy *a1, objc_selector *a2, objc_object *a3, objc_object *a4)
{
  id location = 0;
  objc_storeStrong(&location, a1);
  uint64_t v13 = a2;
  id v12 = 0;
  objc_storeStrong(&v12, a3);
  id v11 = 0;
  objc_storeStrong(&v11, a4);
  std::weak_ptr<HSMapper>::lock((uint64_t)location + 16, v10);
  if (std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::operator BOOL[abi:ne180100]((uint64_t)v10))
  {
    uint64_t v4 = (HSMapper *)std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)v10);
    id v15 = HSMapper::send(v4, *((void **)location + 1), v13, v12, (objc_object *)v11, 0);
  }
  else
  {
    id v15 = 0;
  }
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v10);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&location, 0);
  int v5 = v15;

  return v5;
}

id proxyFn3(HSProxy *a1, objc_selector *a2, objc_object *a3, objc_object *a4, objc_object *a5)
{
  id location = 0;
  objc_storeStrong(&location, a1);
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v16 = a2;
  id v15 = 0;
  objc_storeStrong(&v15, a3);
  id v14 = 0;
  objc_storeStrong(&v14, a4);
  id v13 = 0;
  objc_storeStrong(&v13, a5);
  std::weak_ptr<HSMapper>::lock((uint64_t)location + 16, v12);
  if (std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::operator BOOL[abi:ne180100]((uint64_t)v12))
  {
    int v5 = (HSMapper *)std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)v12);
    id v18 = HSMapper::send(v5, *((void **)location + 1), v16, v15, (objc_object *)v14, (objc_object *)v13);
  }
  else
  {
    id v18 = 0;
  }
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v12);
  objc_storeStrong(&v13, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(&v15, 0);
  objc_storeStrong(&location, 0);
  int v6 = v18;

  return v6;
}

void sub_A6178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, uint64_t a10, int a11, int a12, _Unwind_Exception *exception_object)
{
}

uint64_t std::__function::__value_func<void ()(std::shared_ptr<HSMapper>)>::__value_func[abi:ne180100]<-[HSObjectServer addClient:config:]::$_0,0>(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>::allocator[abi:ne180100]((uint64_t)&v5);
  std::__function::__value_func<void ()(std::shared_ptr<HSMapper>)>::__value_func[abi:ne180100]<-[HSObjectServer addClient:config:]::$_0,std::allocator<-[HSObjectServer addClient:config:]::$_0>>(a1, a2, (uint64_t)&v5);
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::shared_ptr<HSMapper>)>::__value_func[abi:ne180100]<-[HSObjectServer addClient:config:]::$_0,std::allocator<-[HSObjectServer addClient:config:]::$_0>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  uint64_t v4;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  int v10 = a1;
  id v9 = a2;
  __int16 v8 = a3;
  id v11 = a1;
  *(void *)(a1 + 24) = 0;
  if (std::__function::__not_null[abi:ne180100]<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1}>())
  {
    std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v7);
    uint64_t v4 = v9;
    std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v6);
    std::__function::__func<-[HSObjectServer addClient:config:]::$_0,std::allocator<-[HSObjectServer addClient:config:]::$_0>,void ()(std::shared_ptr<HSMapper>)>::__func[abi:ne180100](a1, v4, (uint64_t)&v6);
    *(void *)(a1 + 24) = a1;
  }
  return v11;
}

void sub_A63A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

void *std::__function::__base<void ()(std::shared_ptr<HSMapper>)>::__base[abi:ne180100](void *result)
{
  void *result = off_142598;
  return result;
}

void sub_A6594(uint64_t a1, int a2)
{
  *(void *)(v2 - 64) = a1;
  *(_DWORD *)(v2 - 68) = a2;
  std::unique_ptr<std::__function::__func<-[HSObjectServer addClient:config:]::$_0,std::allocator<-[HSObjectServer addClient:config:]::$_0>,void ()(std::shared_ptr<HSMapper>)>,std::__allocator_destructor<std::allocator<std::__function::__func<-[HSObjectServer addClient:config:]::$_0,std::allocator<-[HSObjectServer addClient:config:]::$_0>,void ()(std::shared_ptr<HSMapper>)>>>>::~unique_ptr[abi:ne180100](v2 - 40);
  _Unwind_Resume(*(_Unwind_Exception **)(v2 - 64));
}

void std::__function::__base<void ()(std::shared_ptr<HSMapper>)>::~__base()
{
}

{
  __break(1u);
}

void sub_A6864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

void sub_A6BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

void sub_A7000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

void sub_A7160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<-[HSObjectServer addClient:config:]::$_0 &,std::shared_ptr<HSMapper>>(id *a1, void *a2)
{
  return std::__invoke[abi:ne180100]<-[HSObjectServer addClient:config:]::$_0 &,std::shared_ptr<HSMapper>>(a1, a2);
}

uint64_t std::__invoke[abi:ne180100]<-[HSObjectServer addClient:config:]::$_0 &,std::shared_ptr<HSMapper>>(id *a1, void *a2)
{
  v4[3] = a1;
  void v4[2] = a2;
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](v4, a2);
  -[HSObjectServer addClient:config:]::$_0::operator()(a1, v4);
  return std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v4);
}

void sub_A7264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, _Unwind_Exception *exception_object, char a14)
{
}

void sub_A72EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, int a13, int a14, _Unwind_Exception *exception_object)
{
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](v15 - 32);

  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::shared_ptr<HSMapper>>::__insert_unique[abi:ne180100](uint64_t a1, void *a2)
{
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  return std::__tree<std::shared_ptr<HSMapper>>::__emplace_unique_key_args<std::shared_ptr<HSMapper>,std::shared_ptr<HSMapper> const&>(a1, v2, a2);
}

uint64_t std::__tree<std::shared_ptr<HSMapper>>::__emplace_unique_key_args<std::shared_ptr<HSMapper>,std::shared_ptr<HSMapper> const&>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v16 = a1;
  uint64_t v15 = a2;
  id v14 = a3;
  id v12 = std::__tree<std::shared_ptr<HSMapper>>::__find_equal<std::shared_ptr<HSMapper>>(a1, (uint64_t)&v13, a2);
  uint64_t v11 = *v12;
  char v10 = 0;
  if (!*v12)
  {
    std::__tree<std::shared_ptr<HSMapper>>::__construct_node<std::shared_ptr<HSMapper> const&>(a1, v14, (uint64_t)v9);
    uint64_t v5 = v13;
    uint64_t v6 = v12;
    uint64_t v3 = (void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
    std::__tree<std::shared_ptr<HSMapper>>::__insert_node_at(a1, v5, v6, v3);
    uint64_t v11 = std::unique_ptr<std::__hash_node<HSStage * {__strong},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::release[abi:ne180100]();
    char v10 = 1;
    std::unique_ptr<std::__tree_node<std::shared_ptr<HSMapper>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<HSMapper>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)v9);
  }
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](&v8, v11);
  std::pair<std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL>::pair[abi:ne180100]<std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL &,0>((uint64_t)&v17, &v8, &v10);
  return v17;
}

void *std::__tree<std::shared_ptr<HSMapper>>::__find_equal<std::shared_ptr<HSMapper>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v9 = (void *)std::__tree<std::shared_ptr<HSMapper>>::__root[abi:ne180100]();
  std::__tree<std::shared_ptr<HSMapper>>::__root_ptr[abi:ne180100]();
  uint64_t v8 = v3;
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
        if (!std::less<std::shared_ptr<HSMapper>>::operator()[abi:ne180100](v4, a3, (uint64_t)(v9 + 4))) {
          break;
        }
        if (!*v9)
        {
          *(void *)a2 = v9;
          return *(void **)a2;
        }
        uint64_t v8 = v9;
        id v9 = (void *)*v9;
      }
      std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
      if (!std::less<std::shared_ptr<HSMapper>>::operator()[abi:ne180100](v5, (uint64_t)(v9 + 4), a3)) {
        break;
      }
      if (!v9[1])
      {
        *(void *)a2 = v9;
        return v9 + 1;
      }
      uint64_t v8 = v9 + 1;
      id v9 = (void *)v9[1];
    }
    *(void *)a2 = v9;
    return v8;
  }
  else
  {
    std::__tree<std::shared_ptr<HSMapper>>::__end_node[abi:ne180100]();
    *(void *)a2 = v6;
    return *(void **)a2;
  }
}

void std::__tree<std::shared_ptr<HSMapper>>::__construct_node<std::shared_ptr<HSMapper> const&>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v14 = a3;
  uint64_t v13 = a1;
  id v12 = a2;
  std::__tree<std::shared_ptr<HSMapper>>::__node_alloc[abi:ne180100]();
  uint64_t v11 = v3;
  char v10 = 0;
  uint64_t v6 = std::allocator_traits<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::allocate[abi:ne180100](v3, 1uLL);
  std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::__hash_node_destructor[abi:ne180100]((uint64_t)&v9, v11, 0);
  std::unique_ptr<std::__tree_node<std::shared_ptr<HSMapper>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<HSMapper>,void *>>>>::unique_ptr[abi:ne180100]<true,void>(a3, (uint64_t)v6, &v9);
  uint64_t v8 = v11;
  std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  std::allocator_traits<std::allocator<std::__tree_node<std::shared_ptr<HSMapper>,void *>>>::construct[abi:ne180100]<std::shared_ptr<HSMapper>,std::shared_ptr<HSMapper> const&,void>(v8, v4, v12);
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::get_deleter[abi:ne180100]();
  *(unsigned char *)(v5 + 8) = 1;
}

void std::__tree<std::shared_ptr<HSMapper>>::__insert_node_at(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = (uint64_t)a4;
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  if (**v4)
  {
    std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
    uint64_t v9 = **v5;
    std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
    void *v6 = v9;
  }
  std::__tree<std::shared_ptr<HSMapper>>::__end_node[abi:ne180100]();
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*v7, *a3);
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  ++*v8;
}

uint64_t std::unique_ptr<std::__tree_node<std::shared_ptr<HSMapper>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<HSMapper>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<std::__tree_node<std::shared_ptr<HSMapper>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<HSMapper>,void *>>>>::reset[abi:ne180100](a1, 0);
  return a1;
}

uint64_t std::__tree<std::shared_ptr<HSMapper>>::__root[abi:ne180100]()
{
  std::__tree<std::shared_ptr<HSMapper>>::__end_node[abi:ne180100]();
  return *(void *)v0;
}

void std::__tree<std::shared_ptr<HSMapper>>::__root_ptr[abi:ne180100]()
{
}

BOOL std::less<std::shared_ptr<HSMapper>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::operator<[abi:ne180100]<HSMapper,HSMapper>(a2, a3);
}

BOOL std::operator<[abi:ne180100]<HSMapper,HSMapper>(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  uint64_t v4 = std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100](a1);
  uint64_t v3 = std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100](v6);
  return std::__less<void,void>::operator()[abi:ne180100]<unsigned long,unsigned long>((uint64_t)&v5, &v4, &v3);
}

void std::__tree<std::shared_ptr<HSMapper>>::__node_alloc[abi:ne180100]()
{
}

uint64_t std::unique_ptr<std::__tree_node<std::shared_ptr<HSMapper>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<HSMapper>,void *>>>>::unique_ptr[abi:ne180100]<true,void>(uint64_t a1, uint64_t a2, __n128 *a3)
{
  return a1;
}

{
  void v5[2];

  v5[1] = a1;
  v5[0] = a2;
  std::__compressed_pair<std::__hash_node<HSStage * {__strong},void *> *,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::__compressed_pair[abi:ne180100]<std::__hash_node<HSStage * {__strong},void *> *&,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>(a1, v5, a3);
  return a1;
}

void *std::allocator_traits<std::allocator<std::__tree_node<std::shared_ptr<HSMapper>,void *>>>::construct[abi:ne180100]<std::shared_ptr<HSMapper>,std::shared_ptr<HSMapper> const&,void>(uint64_t a1, void *a2, void *a3)
{
  return std::allocator<std::__tree_node<std::shared_ptr<HSMapper>,void *>>::construct[abi:ne180100]<std::shared_ptr<HSMapper>,std::shared_ptr<HSMapper> const&>(a1, a2, a3);
}

void *std::allocator<std::__tree_node<std::shared_ptr<HSMapper>,void *>>::construct[abi:ne180100]<std::shared_ptr<HSMapper>,std::shared_ptr<HSMapper> const&>(uint64_t a1, void *a2, void *a3)
{
  return std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](a2, a3);
}

uint64_t std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t result, uint64_t a2)
{
  uint64_t v14 = (uint64_t *)result;
  uint64_t v11 = (uint64_t *)a2;
  *(unsigned char *)(a2 + 24) = a2 == result;
  while (1)
  {
    char v8 = 0;
    if (v11 != v14)
    {
      BOOL result = std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v11);
      char v8 = *(unsigned char *)(result + 24) ^ 1;
    }
    if ((v8 & 1) == 0) {
      break;
    }
    uint64_t v7 = std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v11);
    if (std::__tree_is_left_child[abi:ne180100]<std::__tree_node_base<void *> *>(v7))
    {
      uint64_t v6 = std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v11);
      uint64_t v10 = *(void *)(std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100](v6)
                      + 8);
      if (!v10 || (*(unsigned char *)(v10 + 24) & 1) != 0)
      {
        if (!std::__tree_is_left_child[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t)v11))
        {
          uint64_t v11 = (uint64_t *)std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v11);
          std::__tree_left_rotate[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t)v11);
        }
        uint64_t v4 = std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v11);
        *(unsigned char *)(v4 + 24) = 1;
        uint64_t v12 = std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100](v4);
        *(unsigned char *)(v12 + 24) = 0;
        return std::__tree_right_rotate[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v12);
      }
      uint64_t v5 = std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v11);
      *(unsigned char *)(v5 + 24) = 1;
      BOOL result = std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100](v5);
      uint64_t v11 = (uint64_t *)result;
      *(unsigned char *)(result + 24) = result == (void)v14;
      *(unsigned char *)(v10 + 24) = 1;
    }
    else
    {
      uint64_t v9 = **(void **)(std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v11)
                       + 16);
      if (!v9 || (*(unsigned char *)(v9 + 24) & 1) != 0)
      {
        if (std::__tree_is_left_child[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t)v11))
        {
          uint64_t v11 = (uint64_t *)std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v11);
          std::__tree_right_rotate[abi:ne180100]<std::__tree_node_base<void *> *>(v11);
        }
        uint64_t v2 = std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v11);
        *(unsigned char *)(v2 + 24) = 1;
        uint64_t v13 = std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100](v2);
        *(unsigned char *)(v13 + 24) = 0;
        return std::__tree_left_rotate[abi:ne180100]<std::__tree_node_base<void *> *>(v13);
      }
      uint64_t v3 = std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v11);
      *(unsigned char *)(v3 + 24) = 1;
      BOOL result = std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100](v3);
      uint64_t v11 = (uint64_t *)result;
      *(unsigned char *)(result + 24) = result == (void)v14;
      *(unsigned char *)(v9 + 24) = 1;
    }
  }
  return result;
}

BOOL std::__tree_is_left_child[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t a1)
{
  return a1 == **(void **)(a1 + 16);
}

uint64_t std::__tree_left_rotate[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  *(void *)(a1 + 8) = *v2;
  if (*(void *)(a1 + 8)) {
    std::__tree_node_base<void *>::__set_parent[abi:ne180100](*(void *)(a1 + 8), a1);
  }
  void v2[2] = *(void *)(a1 + 16);
  if (std::__tree_is_left_child[abi:ne180100]<std::__tree_node_base<void *> *>(a1)) {
    **(void **)(a1 + std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a9 + 16) = v2;
  }
  else {
    *(void *)(std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100](a1)
  }
              + 8) = v2;
  uint64_t *v2 = a1;
  return std::__tree_node_base<void *>::__set_parent[abi:ne180100](a1, (uint64_t)v2);
}

uint64_t std::__tree_right_rotate[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = *(void *)(*a1 + 8);
  if (*a1) {
    std::__tree_node_base<void *>::__set_parent[abi:ne180100](*a1, (uint64_t)a1);
  }
  *(void *)(v2 + std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a9 + 16) = a1[2];
  if (std::__tree_is_left_child[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t)a1)) {
    *(void *)a1[2] = v2;
  }
  else {
    *(void *)(std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)a1)
  }
              + 8) = v2;
  *(void *)(v2 + 8) = a1;
  return std::__tree_node_base<void *>::__set_parent[abi:ne180100]((uint64_t)a1, v2);
}

uint64_t std::__tree_node_base<void *>::__set_parent[abi:ne180100](uint64_t result, uint64_t a2)
{
  *(void *)(result + std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a9 + 16) = a2;
  return result;
}

void std::unique_ptr<std::__tree_node<std::shared_ptr<HSMapper>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<HSMapper>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  uint64_t v5 = *v2;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<HSMapper>,void *>>>::operator()[abi:ne180100](v4, v5);
  }
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<HSMapper>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = *(void *)a1;
    std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
    std::allocator_traits<std::allocator<std::__tree_node<std::shared_ptr<HSMapper>,void *>>>::destroy[abi:ne180100]<std::shared_ptr<HSMapper>,void,void>(v3, v2);
  }
  if (a2) {
    std::allocator_traits<std::allocator<std::__tree_node<std::shared_ptr<HSMapper>,void *>>>::deallocate[abi:ne180100](*(void *)a1, a2, 1);
  }
}

uint64_t std::allocator_traits<std::allocator<std::__tree_node<std::shared_ptr<HSMapper>,void *>>>::destroy[abi:ne180100]<std::shared_ptr<HSMapper>,void,void>(uint64_t a1, uint64_t a2)
{
  return std::__destroy_at[abi:ne180100]<std::shared_ptr<HSMapper>,0>(a2);
}

void std::allocator_traits<std::allocator<std::__tree_node<std::shared_ptr<HSMapper>,void *>>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

uint64_t std::__destroy_at[abi:ne180100]<std::shared_ptr<HSMapper>,0>(uint64_t a1)
{
  return std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a1);
}

void std::allocator<std::__tree_node<std::shared_ptr<HSMapper>,void *>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void *std::__tree<std::shared_ptr<HSMapper>>::__tree(void *a1, void *a2)
{
  return a1;
}

{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  if (*v2)
  {
    std::__tree<std::shared_ptr<HSMapper>>::__end_node[abi:ne180100]();
    uint64_t v12 = v5;
    std::__tree<std::shared_ptr<HSMapper>>::__end_node[abi:ne180100]();
    *(void *)(*(void *)v6 + std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a9 + 16) = v12;
    std::__tree<std::shared_ptr<HSMapper>>::__end_node[abi:ne180100]();
    uint64_t v13 = v7;
    std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
    void *v8 = v13;
    std::__tree<std::shared_ptr<HSMapper>>::__end_node[abi:ne180100]();
    *uint64_t v9 = 0;
    std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
    const unsigned __int8 *v10 = 0;
  }
  else
  {
    std::__tree<std::shared_ptr<HSMapper>>::__end_node[abi:ne180100]();
    uint64_t v14 = v3;
    std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
    *uint64_t v4 = v14;
  }
  return a1;
}

uint64_t std::__tree<std::shared_ptr<HSMapper>>::~__tree(uint64_t a1)
{
  return a1;
}

{
  void *v1;

  uint64_t v1 = (void *)std::__tree<std::shared_ptr<HSMapper>>::__root[abi:ne180100]();
  std::__tree<std::shared_ptr<HSMapper>>::destroy(a1, v1);
  return a1;
}

void std::__tree<std::shared_ptr<HSMapper>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::shared_ptr<HSMapper>>::destroy(a1, *a2);
    std::__tree<std::shared_ptr<HSMapper>>::destroy(a1, a2[1]);
    std::__tree<std::shared_ptr<HSMapper>>::__node_alloc[abi:ne180100]();
    uint64_t v6 = v2;
    uint64_t v4 = v2;
    std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
    std::allocator_traits<std::allocator<std::__tree_node<std::shared_ptr<HSMapper>,void *>>>::destroy[abi:ne180100]<std::shared_ptr<HSMapper>,void,void>(v4, v3);
    std::allocator_traits<std::allocator<std::__tree_node<std::shared_ptr<HSMapper>,void *>>>::deallocate[abi:ne180100](v6, a2, 1);
  }
}

uint64_t std::__tree<std::shared_ptr<HSMapper>>::begin[abi:ne180100]()
{
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](&v2, *v0);
  return v2;
}

uint64_t std::__tree<std::shared_ptr<HSMapper>>::end[abi:ne180100]()
{
  std::__tree<std::shared_ptr<HSMapper>>::__end_node[abi:ne180100]();
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](&v2, v0);
  return v2;
}

void *std::__tree_next_iter[abi:ne180100]<std::__tree_end_node<std::__tree_node_base<void *> *> *,std::__tree_node_base<void *> *>(uint64_t a1)
{
  uint64_t v3 = a1;
  if (*(void *)(a1 + 8)) {
    return std::__tree_min[abi:ne180100]<std::__tree_node_base<void *> *>(*(void **)(a1 + 8));
  }
  for (BOOL i = std::__tree_is_left_child[abi:ne180100]<std::__tree_node_base<void *> *>(a1);
        !i;
        BOOL i = std::__tree_is_left_child[abi:ne180100]<std::__tree_node_base<void *> *>(v3))
  {
    uint64_t v3 = std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100](v3);
  }
  return *(void **)(v3 + 16);
}

void *std::__tree_min[abi:ne180100]<std::__tree_node_base<void *> *>(void *a1)
{
  while (*a1)
    a1 = (void *)*a1;
  return a1;
}

uint64_t std::__tree<std::shared_ptr<HSMapper>>::__erase_unique<std::shared_ptr<HSMapper>>(uint64_t a1, uint64_t a2)
{
  void v6[2] = a1;
  v6[1] = a2;
  v6[0] = std::__tree<std::shared_ptr<HSMapper>>::find<std::shared_ptr<HSMapper>>(a1, a2);
  uint64_t v5 = std::__tree<std::shared_ptr<HSMapper>>::end[abi:ne180100]();
  if (std::operator==[abi:ne180100](v6, &v5)) {
    return 0;
  }
  std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>>::__hash_map_iterator[abi:ne180100](&v4, v6[0]);
  std::__tree<std::shared_ptr<HSMapper>>::erase(a1, v4);
  return 1;
}

uint64_t std::__tree<std::shared_ptr<HSMapper>>::find<std::shared_ptr<HSMapper>>(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = a1;
  uint64_t v14 = a2;
  uint64_t v9 = (void *)std::__tree<std::shared_ptr<HSMapper>>::__root[abi:ne180100]();
  std::__tree<std::shared_ptr<HSMapper>>::__end_node[abi:ne180100]();
  uint64_t v13 = std::__tree<std::shared_ptr<HSMapper>>::__lower_bound<std::shared_ptr<HSMapper>>(a1, a2, v9, v2);
  uint64_t v12 = std::__tree<std::shared_ptr<HSMapper>>::end[abi:ne180100]();
  LOBYTE(v1MTRestZoneIntegrator_::clearMotion(this, 1) = 0;
  if (std::operator!=[abi:ne180100](&v13, &v12))
  {
    std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
    uint64_t v7 = v3;
    uint64_t v6 = v14;
    uint64_t v4 = std::__tree_const_iterator<std::shared_ptr<HSMapper>,std::__tree_node<std::shared_ptr<HSMapper>,void *> *,long>::operator*[abi:ne180100]((uint64_t)&v13);
    BOOL v11 = !std::less<std::shared_ptr<HSMapper>>::operator()[abi:ne180100](v7, v6, v4);
  }
  if (v11) {
    return v13;
  }
  else {
    return std::__tree<std::shared_ptr<HSMapper>>::end[abi:ne180100]();
  }
}

uint64_t std::__tree<std::shared_ptr<HSMapper>>::erase(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a2;
  char v8 = (void *)std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)&v9);
  uint64_t v10 = std::__tree<std::shared_ptr<HSMapper>>::__remove_node_pointer(a1, (uint64_t)v8);
  std::__tree<std::shared_ptr<HSMapper>>::__node_alloc[abi:ne180100]();
  uint64_t v7 = v2;
  uint64_t v6 = v2;
  std::__tree_const_iterator<std::shared_ptr<HSMapper>,std::__tree_node<std::shared_ptr<HSMapper>,void *> *,long>::operator*[abi:ne180100]((uint64_t)&v9);
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  std::allocator_traits<std::allocator<std::__tree_node<std::shared_ptr<HSMapper>,void *>>>::destroy[abi:ne180100]<std::shared_ptr<HSMapper>,void,void>(v6, v3);
  std::allocator_traits<std::allocator<std::__tree_node<std::shared_ptr<HSMapper>,void *>>>::deallocate[abi:ne180100](v7, v8, 1);
  return v10;
}

uint64_t std::__tree<std::shared_ptr<HSMapper>>::__lower_bound<std::shared_ptr<HSMapper>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  while (a3)
  {
    std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
    if (std::less<std::shared_ptr<HSMapper>>::operator()[abi:ne180100](v4, (uint64_t)(a3 + 4), a2))
    {
      a3 = (void *)a3[1];
    }
    else
    {
      a4 = (uint64_t)a3;
      a3 = (void *)*a3;
    }
  }
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](&v9, a4);
  return v9;
}

uint64_t std::__tree<std::shared_ptr<HSMapper>>::__remove_node_pointer(uint64_t a1, uint64_t a2)
{
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](&v9, a2);
  std::__tree_const_iterator<std::shared_ptr<HSMapper>,std::__tree_node<std::shared_ptr<HSMapper>,void *> *,long>::operator++[abi:ne180100](&v9);
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  if (*v2 == a2)
  {
    uint64_t v7 = v9;
    std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
    uint64_t *v3 = v7;
  }
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  --*v4;
  std::__tree<std::shared_ptr<HSMapper>>::__end_node[abi:ne180100]();
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(*v5, a2);
  return v9;
}

uint64_t std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *a1, uint64_t a2)
{
  if (*(void *)a2 && *(void *)(a2 + 8)) {
    BOOL v11 = std::__tree_next[abi:ne180100]<std::__tree_node_base<void *> *>(a2);
  }
  else {
    BOOL v11 = (uint64_t *)a2;
  }
  if (*v11) {
    uint64_t v10 = *v11;
  }
  else {
    uint64_t v10 = v11[1];
  }
  uint64_t v13 = 0;
  if (v10) {
    *(void *)(v10 + std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a9 + 16) = v11[2];
  }
  uint64_t result = std::__tree_is_left_child[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t)v11);
  if (result)
  {
    *(void *)uint64_t v11[2] = v10;
    if (v11 == a1)
    {
      a1 = (uint64_t *)v10;
    }
    else
    {
      uint64_t result = std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v11);
      uint64_t v13 = *(uint64_t **)(result + 8);
    }
  }
  else
  {
    uint64_t result = std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v11);
    *(void *)(result + 8) = v10;
    uint64_t v13 = *(uint64_t **)v11[2];
  }
  char v12 = v11[3] & 1;
  if (v11 != (uint64_t *)a2)
  {
    uint64_t v11[2] = *(void *)(a2 + 16);
    if (std::__tree_is_left_child[abi:ne180100]<std::__tree_node_base<void *> *>(a2)) {
      *(void *)uint64_t v11[2] = v11;
    }
    else {
      *(void *)(std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v11)
    }
                + 8) = v11;
    uint64_t *v11 = *(void *)a2;
    uint64_t result = std::__tree_node_base<void *>::__set_parent[abi:ne180100](*v11, (uint64_t)v11);
    v11[1] = *(void *)(a2 + 8);
    if (v11[1]) {
      uint64_t result = std::__tree_node_base<void *>::__set_parent[abi:ne180100](v11[1], (uint64_t)v11);
    }
    *((unsigned char *)v11 + 24) = *(unsigned char *)(a2 + 24) & 1;
    if (a1 == (uint64_t *)a2) {
      a1 = v11;
    }
  }
  if ((v12 & 1) != 0 && a1)
  {
    if (v10)
    {
      *(unsigned char *)(v10 + 24) = 1;
    }
    else
    {
      for (BOOL i = std::__tree_is_left_child[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t)v13);
            ;
            BOOL i = std::__tree_is_left_child[abi:ne180100]<std::__tree_node_base<void *> *>(v8))
      {
        while (!i)
        {
          if ((v13[3] & 1) == 0)
          {
            *((unsigned char *)v13 + 24) = 1;
            *(unsigned char *)(std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v13)
                     + 24) = 0;
            uint64_t v4 = std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v13);
            std::__tree_left_rotate[abi:ne180100]<std::__tree_node_base<void *> *>(v4);
            if (a1 == (uint64_t *)*v13) {
              a1 = v13;
            }
            uint64_t v13 = *(uint64_t **)(*v13 + 8);
          }
          if (*v13 && (*(unsigned char *)(*v13 + 24) & 1) == 0 || v13[1] && (*(unsigned char *)(v13[1] + 24) & 1) == 0)
          {
            if (!v13[1] || (*(unsigned char *)(v13[1] + 24) & 1) != 0)
            {
              *(unsigned char *)(*v13 + 24) = 1;
              *((unsigned char *)v13 + 24) = 0;
              std::__tree_right_rotate[abi:ne180100]<std::__tree_node_base<void *> *>(v13);
              uint64_t v13 = (uint64_t *)std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v13);
            }
            *((unsigned char *)v13 + 24) = *(unsigned char *)(std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v13)
                                            + 24) & 1;
            *(unsigned char *)(std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v13)
                     + 24) = 1;
            *(unsigned char *)(v13[1] + 24) = 1;
            uint64_t v5 = std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v13);
            return std::__tree_left_rotate[abi:ne180100]<std::__tree_node_base<void *> *>(v5);
          }
          *((unsigned char *)v13 + 24) = 0;
          uint64_t result = std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v13);
          uint64_t v14 = result;
          if ((uint64_t *)result == a1 || (*(unsigned char *)(result + 24) & 1) == 0)
          {
            *(unsigned char *)(result + 24) = 1;
            return result;
          }
          if (std::__tree_is_left_child[abi:ne180100]<std::__tree_node_base<void *> *>(result)) {
            uint64_t v9 = *(void *)(std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100](v14)
          }
                           + 8);
          else {
            uint64_t v9 = **(void **)(v14 + 16);
          }
          uint64_t v13 = (uint64_t *)v9;
          BOOL i = std::__tree_is_left_child[abi:ne180100]<std::__tree_node_base<void *> *>(v9);
        }
        if ((v13[3] & 1) == 0)
        {
          *((unsigned char *)v13 + 24) = 1;
          *(unsigned char *)(std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v13)
                   + 24) = 0;
          uint64_t v6 = (uint64_t *)std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v13);
          std::__tree_right_rotate[abi:ne180100]<std::__tree_node_base<void *> *>(v6);
          if (a1 == (uint64_t *)v13[1]) {
            a1 = v13;
          }
          uint64_t v13 = *(uint64_t **)v13[1];
        }
        if (*v13 && (*(unsigned char *)(*v13 + 24) & 1) == 0 || v13[1] && (*(unsigned char *)(v13[1] + 24) & 1) == 0) {
          break;
        }
        *((unsigned char *)v13 + 24) = 0;
        uint64_t result = std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v13);
        uint64_t v15 = result;
        if ((*(unsigned char *)(result + 24) & 1) == 0 || (uint64_t *)result == a1)
        {
          *(unsigned char *)(result + 24) = 1;
          return result;
        }
        if (std::__tree_is_left_child[abi:ne180100]<std::__tree_node_base<void *> *>(result)) {
          uint64_t v8 = *(void *)(std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100](v15)
        }
                         + 8);
        else {
          uint64_t v8 = **(void **)(v15 + 16);
        }
        uint64_t v13 = (uint64_t *)v8;
      }
      if (!*v13 || (*(unsigned char *)(*v13 + 24) & 1) != 0)
      {
        *(unsigned char *)(v13[1] + 24) = 1;
        *((unsigned char *)v13 + 24) = 0;
        std::__tree_left_rotate[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t)v13);
        uint64_t v13 = (uint64_t *)std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v13);
      }
      *((unsigned char *)v13 + 24) = *(unsigned char *)(std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v13)
                                      + 24) & 1;
      *(unsigned char *)(std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v13)
               + 24) = 1;
      *(unsigned char *)(*v13 + 24) = 1;
      uint64_t v7 = (uint64_t *)std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v13);
      return std::__tree_right_rotate[abi:ne180100]<std::__tree_node_base<void *> *>(v7);
    }
  }
  return result;
}

void *std::__tree_next[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t a1)
{
  uint64_t v3 = a1;
  if (*(void *)(a1 + 8)) {
    return std::__tree_min[abi:ne180100]<std::__tree_node_base<void *> *>(*(void **)(a1 + 8));
  }
  for (BOOL i = std::__tree_is_left_child[abi:ne180100]<std::__tree_node_base<void *> *>(a1);
        !i;
        BOOL i = std::__tree_is_left_child[abi:ne180100]<std::__tree_node_base<void *> *>(v3))
  {
    uint64_t v3 = std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100](v3);
  }
  return (void *)std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100](v3);
}

void sub_A90B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, uint64_t a10, int a11, int a12, _Unwind_Exception *exception_object)
{
}

uint64_t std::__function::__value_func<void ()(std::shared_ptr<HSMapper>)>::__value_func[abi:ne180100]<-[HSObjectClient initWithSocket:config:]::$_2,0>(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>::allocator[abi:ne180100]((uint64_t)&v5);
  std::__function::__value_func<void ()(std::shared_ptr<HSMapper>)>::__value_func[abi:ne180100]<-[HSObjectClient initWithSocket:config:]::$_2,std::allocator<-[HSObjectClient initWithSocket:config:]::$_2>>(a1, a2, (uint64_t)&v5);
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::shared_ptr<HSMapper>)>::__value_func[abi:ne180100]<-[HSObjectClient initWithSocket:config:]::$_2,std::allocator<-[HSObjectClient initWithSocket:config:]::$_2>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  uint64_t v4;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  uint64_t v10 = a1;
  uint64_t v9 = a2;
  uint64_t v8 = a3;
  BOOL v11 = a1;
  *(void *)(a1 + 24) = 0;
  if (std::__function::__not_null[abi:ne180100]<HSMapper::_createConnectionConfig(std::weak_ptr<HSMapper>,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::{lambda(std::shared_ptr<HSUtil::Connection>,HSUtil::Buffer &&)#1}>())
  {
    std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v7);
    uint64_t v4 = v9;
    std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v6);
    std::__function::__func<-[HSObjectClient initWithSocket:config:]::$_2,std::allocator<-[HSObjectClient initWithSocket:config:]::$_2>,void ()(std::shared_ptr<HSMapper>)>::__func[abi:ne180100](a1, v4, (uint64_t)&v6);
    *(void *)(a1 + 24) = a1;
  }
  return v11;
}

void sub_A92B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

void sub_A946C(uint64_t a1, int a2)
{
  *(void *)(v2 - 64) = a1;
  *(_DWORD *)(v2 - 68) = a2;
  std::unique_ptr<std::__function::__func<-[HSObjectClient initWithSocket:config:]::$_2,std::allocator<-[HSObjectClient initWithSocket:config:]::$_2>,void ()(std::shared_ptr<HSMapper>)>,std::__allocator_destructor<std::allocator<std::__function::__func<-[HSObjectClient initWithSocket:config:]::$_2,std::allocator<-[HSObjectClient initWithSocket:config:]::$_2>,void ()(std::shared_ptr<HSMapper>)>>>>::~unique_ptr[abi:ne180100](v2 - 40);
  _Unwind_Resume(*(_Unwind_Exception **)(v2 - 64));
}

void sub_A971C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

void sub_A98AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

void sub_A9AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

void sub_A9C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<-[HSObjectClient initWithSocket:config:]::$_2 &,std::shared_ptr<HSMapper>>(id *a1, void *a2)
{
  return std::__invoke[abi:ne180100]<-[HSObjectClient initWithSocket:config:]::$_2 &,std::shared_ptr<HSMapper>>(a1, a2);
}

uint64_t std::__invoke[abi:ne180100]<-[HSObjectClient initWithSocket:config:]::$_2 &,std::shared_ptr<HSMapper>>(id *a1, void *a2)
{
  v4[3] = a1;
  void v4[2] = a2;
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](v4, a2);
  -[HSObjectClient initWithSocket:config:]::$_2::operator()(a1, v4);
  return std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v4);
}

void sub_A9D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, _Unwind_Exception *exception_object, char a14)
{
}

void sub_A9DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, int a13, int a14, _Unwind_Exception *exception_object)
{
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](v15 - 32);

  _Unwind_Resume(a1);
}

void __cxx_global_var_init_53()
{
  {
    {
      HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
    }
  }
}

void sub_AA324()
{
  _Unwind_Resume(v0);
}

void sub_AA388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, int a11, int a12, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void sub_AA808()
{
  _Unwind_Resume(v0);
}

void sub_AAD78()
{
  _Unwind_Resume(v0);
}

void __cxx_global_var_init_54()
{
  {
    {
      HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
    }
  }
}

void __cxx_global_var_init_2_52(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_52(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_47(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_47(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_47(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_47(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_48(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void __cxx_global_var_init_55()
{
  {
    {
      HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
    }
  }
}

void sub_AB4E4(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  *(void *)(v9 - 24) = a1;
  *(_DWORD *)(v9 - 28) = a2;
  a9.receiver = *(id *)(v9 - 8);
  a9.super_class = (Class)HSRecordingStage;
  objc_msgSendSuper2(&a9, "dealloc");
  _Unwind_Resume(*(_Unwind_Exception **)(v9 - 24));
}

uint64_t _ZNSt3__111make_sharedB8ne180100IN6HSUtil6BufferEJEvEENS_10shared_ptrIT_EEDpOT0_@<X0>(void *a1@<X8>)
{
  uint64_t v4 = a1;
  std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>::allocator[abi:ne180100]((uint64_t)&v3);
  return _ZNSt3__115allocate_sharedB8ne180100IN6HSUtil6BufferENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((uint64_t)&v3, a1);
}

uint64_t *std::shared_ptr<HSUtil::IO::Writable>::operator=[abi:ne180100]<HSUtil::Buffer,void>(uint64_t *a1, void *a2)
{
  v4[3] = (uint64_t)a1;
  void v4[2] = (uint64_t)a2;
  std::shared_ptr<HSUtil::IO::Writable>::shared_ptr[abi:ne180100]<HSUtil::Buffer,void>(v4, a2);
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::swap[abi:ne180100](v4, a1);
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v4);
  return a1;
}

void *std::dynamic_pointer_cast[abi:ne180100]<HSUtil::IO::Readable,HSUtil::IO::Writable>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  lpsrc = (void *)std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100](a1);
  if (lpsrc) {
  else
  }
    char v3 = 0;
  if (v3) {
    return std::shared_ptr<HSUtil::IO::Readable>::shared_ptr[abi:ne180100]<HSUtil::IO::Writable>(a2, a1, (uint64_t)v3);
  }
  else {
    return std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](a2);
  }
}

void sub_ABA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, _Unwind_Exception *exception_object, id a14)
{
}

void sub_ABA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, _Unwind_Exception *exception_object, id a14)
{
}

void sub_ABD10()
{
  _Unwind_Resume(v0);
}

void sub_ABF1C()
{
  _Unwind_Resume(v0);
}

uint64_t std::vector<std::unique_ptr<EncoderState>>::operator[][abi:ne180100](void *a1, uint64_t a2)
{
  return *a1 + 8 * a2;
}

uint64_t *EncoderState::reset(EncoderState *this)
{
  return HSUtil::Encoder::reset((EncoderState *)((char *)this + 16));
}

void sub_AC508(uint64_t a1, int a2)
{
  *(void *)(v2 - 8objc_storeStrong(&location, 0) = a1;
  *(_DWORD *)(v2 - 84) = a2;
  __cxa_end_catch();
  JUMPOUT(0xAC570);
}

void sub_AC52C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(v2);
}

void sub_AC568()
{
  _Unwind_Resume(v0);
}

void std::vector<std::unique_ptr<EncoderState>>::clear[abi:ne180100](uint64_t *a1)
{
}

uint64_t std::vector<std::unique_ptr<EncoderState>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v5 = a1[1];
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  if (v5 >= *v2)
  {
    uint64_t result = std::vector<std::unique_ptr<EncoderState>>::__push_back_slow_path<std::unique_ptr<EncoderState>>(a1, a2);
    uint64_t v6 = result;
  }
  else
  {
    uint64_t result = (uint64_t)std::vector<std::unique_ptr<EncoderState>>::__construct_one_at_end[abi:ne180100]<std::unique_ptr<EncoderState>>((uint64_t)a1, a2);
    uint64_t v6 = v5 + 8;
  }
  a1[1] = v6;
  return result;
}

void newEncoderState(HSUtil::IO::Writable *a1)
{
  if (a1) {
  else
  }
    uint64_t v1 = 0;
  if (v1) {
    std::make_unique[abi:ne180100]<EncoderStateMemoryable,HSUtil::IO::Writable &>();
  }
  std::make_unique[abi:ne180100]<EncoderState,HSUtil::IO::Writable &>();
}

{
  void *v1;

  if (a1) {
  else
  }
    uint64_t v1 = 0;
  if (v1) {
    std::make_unique[abi:ne180100]<EncoderStateMemoryable,HSUtil::IO::Writable &,unsigned long &,unsigned long &>();
  }
  std::make_unique[abi:ne180100]<EncoderState,HSUtil::IO::Writable &,unsigned long &,unsigned long &>();
}

uint64_t std::unique_ptr<EncoderState>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

void sub_AD1BC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  *(void *)(a45 + 96) = a1;
  *(_DWORD *)(a45 + 92) = a2;
  __cxa_end_catch();
  JUMPOUT(0xAD22CLL);
}

void sub_AD1E8(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(v2);
}

void sub_AD224()
{
  _Unwind_Resume(v0);
}

uint64_t std::vector<std::unique_ptr<EncoderState>>::begin[abi:ne180100](uint64_t *a1)
{
  return std::vector<std::unique_ptr<EncoderState>>::__make_iter[abi:ne180100]((uint64_t)a1, *a1);
}

uint64_t std::vector<std::unique_ptr<EncoderState>>::end[abi:ne180100](uint64_t a1)
{
  return std::vector<std::unique_ptr<EncoderState>>::__make_iter[abi:ne180100](a1, *(void *)(a1 + 8));
}

BOOL std::operator!=[abi:ne180100]<std::unique_ptr<EncoderState> *>(uint64_t a1, uint64_t a2)
{
  return !std::operator==[abi:ne180100]<std::unique_ptr<EncoderState> *>(a1, a2);
}

uint64_t EncoderState::base(EncoderState *this)
{
  return *((void *)this + 22);
}

uint64_t EncoderState::length(EncoderState *this)
{
  return *((void *)this + 23);
}

void *std::__wrap_iter<std::unique_ptr<EncoderState> *>::operator++[abi:ne180100](void *result)
{
  *result += 8;
  return result;
}

uint64_t HSUtil::IOUtil::Rotate(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  v46[0] = a1;
  v46[1] = a2;
  uint64_t v45 = a3;
  unint64_t v44 = a4;
  uint64_t v43 = (HSUtil::IO::Readable *)std::get[abi:ne180100]<0ul,BOOL (*&&)(HSUtil::Encoder &,objc_object *)>((uint64_t)v46);
  unint64_t v42 = (Writable *)std::__compressed_pair<HSUtil::Encoder::ContainerRecord *>::second[abi:ne180100]((uint64_t)v46);
  if (v45 != std::numeric_limits<long long>::min[abi:ne180100]())
  {
    char v37 = v45 > 0;
    unint64_t v36 = 0;
    if (v45 <= 0) {
      unint64_t v19 = -v45;
    }
    else {
      unint64_t v19 = v45;
    }
    unint64_t v36 = v19 % v44;
    if (v19 % v44 > v44 / 2)
    {
      unint64_t v36 = v44 - v36;
      char v37 = (v37 ^ 1) & 1;
    }
    if (v36)
    {
      uint64_t v35 = 0x8000;
      HSUtil::Buffer::Buffer((HSUtil::Buffer *)v34, 0x8000uLL, 0);
      if (HSUtil::Buffer::operator BOOL((HSUtil::Buffer *)v34))
      {
        unint64_t v28 = v36;
        if (v37)
        {
          while (v28)
          {
            BOOL v27 = 0;
            if (v28 <= 0x8000) {
              id v18 = (HSUtil::IO::Writable *)v28;
            }
            else {
              id v18 = (HSUtil::IO::Writable *)&loc_8000;
            }
            BOOL v27 = v18;
            unint64_t v26 = v44 - (void)v18;
            *(void *)&long long v17 = HSUtil::Buffer::readFrom((HSUtil::Buffer *)v34, 0, v43, v44 - (void)v18, (uint64_t)v18);
            *((void *)&v17 + MTRestZoneIntegrator_::clearMotion(this, 1) = v4;
            long long v25 = v17;
            if (!HSUtil::Coder::ok((HSUtil::Coder *)&v25))
            {
              long long v47 = v25;
              int v29 = 1;
              goto LABEL_51;
            }
            if (*((HSUtil::IO::Writable **)&v25 + 1) != v27) {
              goto LABEL_31;
            }
            *(void *)&long long v16 = HSUtil::IOUtil::Copy((HSUtil::IOUtil *)v42, v27, v43, 0, v26);
            *((void *)&v16 + MTRestZoneIntegrator_::clearMotion(this, 1) = v5;
            long long v24 = v16;
            long long v25 = v16;
            if (!HSUtil::Coder::ok((HSUtil::Coder *)&v25))
            {
              long long v47 = v25;
              int v29 = 1;
              goto LABEL_51;
            }
            if (*((void *)&v25 + 1) != v26) {
              goto LABEL_31;
            }
            *(void *)&long long v15 = HSUtil::Buffer::writeTo((HSUtil::Buffer *)v34, 0, v42, 0, (unint64_t)v27);
            *((void *)&v15 + MTRestZoneIntegrator_::clearMotion(this, 1) = v6;
            long long v23 = v15;
            long long v25 = v15;
            if (!HSUtil::Coder::ok((HSUtil::Coder *)&v25))
            {
              long long v47 = v25;
              int v29 = 1;
              goto LABEL_51;
            }
            if (*((HSUtil::IO::Writable **)&v25 + 1) != v27)
            {
LABEL_31:
              HSUtil::IO::Result::Result((HSUtil::IO::Result *)&v47, 5);
              int v29 = 1;
              goto LABEL_51;
            }
            v28 -= (unint64_t)v27;
          }
        }
        else
        {
          while (v28)
          {
            uint64_t v22 = 0;
            if (v28 <= 0x8000) {
              uint64_t v14 = (HSUtil::IO::Readable *)v28;
            }
            else {
              uint64_t v14 = (HSUtil::IO::Readable *)&loc_8000;
            }
            uint64_t v22 = v14;
            unint64_t v21 = v44 - (void)v14;
            *(void *)&long long v13 = HSUtil::Buffer::readFrom((HSUtil::Buffer *)v34, 0, v43, 0, (uint64_t)v14);
            *((void *)&v13 + MTRestZoneIntegrator_::clearMotion(this, 1) = v7;
            long long v20 = v13;
            if (!HSUtil::Coder::ok((HSUtil::Coder *)&v20))
            {
              long long v47 = v20;
              int v29 = 1;
              goto LABEL_51;
            }
            if (*((HSUtil::IO::Readable **)&v20 + 1) != v22) {
              goto LABEL_48;
            }
            *(void *)&long long v12 = HSUtil::IOUtil::Copy((HSUtil::IOUtil *)v42, 0, v43, v22, v21);
            *((void *)&v12 + MTRestZoneIntegrator_::clearMotion(this, 1) = v8;
            long long v20 = v12;
            if (!HSUtil::Coder::ok((HSUtil::Coder *)&v20))
            {
              long long v47 = v20;
              int v29 = 1;
              goto LABEL_51;
            }
            if (*((void *)&v20 + 1) != v21) {
              goto LABEL_48;
            }
            *(void *)&long long v11 = HSUtil::Buffer::writeTo((HSUtil::Buffer *)v34, 0, v42, v21, (unint64_t)v22);
            *((void *)&v11 + MTRestZoneIntegrator_::clearMotion(this, 1) = v9;
            long long v20 = v11;
            if (!HSUtil::Coder::ok((HSUtil::Coder *)&v20))
            {
              long long v47 = v20;
              int v29 = 1;
              goto LABEL_51;
            }
            if (*((HSUtil::IO::Readable **)&v20 + 1) != v22)
            {
LABEL_48:
              HSUtil::IO::Result::Result((HSUtil::IO::Result *)&v47, 5);
              int v29 = 1;
              goto LABEL_51;
            }
            v28 -= (unint64_t)v22;
          }
        }
        HSUtil::IO::Result::Result((HSUtil::IO::Result *)&v47, 0);
        int v29 = 1;
      }
      else
      {
        BOOL v32 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingUtil/HSIOUtil.h", v49);
        os_log_t v31 = &_os_log_default;
        os_log_type_t v30 = OS_LOG_TYPE_ERROR;
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v48, (uint64_t)"IO::Result HSUtil::IOUtil::Rotate(ConformsTo<IO::Readable, IO::Writable>, ssize_t, size_t)", (uint64_t)v32, 120, (uint64_t)"tmp");
          _os_log_error_impl(&def_411C8, v31, v30, "Assertion failed (%s @ %s:%ju): %s", v48, 0x2Au);
        }
        objc_storeStrong((id *)&v31, 0);
        HSUtil::IO::Result::Result((HSUtil::IO::Result *)&v47, 12);
        int v29 = 1;
      }
LABEL_51:
      HSUtil::Buffer::~Buffer((HSUtil::Buffer *)v34);
    }
    else
    {
      HSUtil::IO::Result::Result((HSUtil::IO::Result *)&v47, 0);
    }
  }
  else
  {
    __int16 v40 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingUtil/HSIOUtil.h", v51);
    os_log_t oslog = &_os_log_default;
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v50, (uint64_t)"IO::Result HSUtil::IOUtil::Rotate(ConformsTo<IO::Readable, IO::Writable>, ssize_t, size_t)", (uint64_t)v40, 101, (uint64_t)"delta!=std::numeric_limits<ssize_t>::min()");
      _os_log_error_impl(&def_411C8, oslog, type, "Assertion failed (%s @ %s:%ju): %s", v50, 0x2Au);
    }
    objc_storeStrong((id *)&oslog, 0);
    HSUtil::IO::Result::Result((HSUtil::IO::Result *)&v47, 34);
  }
  return v47;
}

void sub_ADC70()
{
  _Unwind_Resume(v0);
}

void *HSUtil::ConformsTo<HSUtil::IO::Readable,HSUtil::IO::Writable>::ConformsTo(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](a1, a2);
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](a1 + 1, a3);
  return a1;
}

void sub_AE53C()
{
}

void sub_AE560(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(v2);
}

void sub_AE598()
{
  _Unwind_Resume(v0);
}

HSRecordingTypes::StateFrame *HSRecordingTypes::StateFrame::StateFrame(HSRecordingTypes::StateFrame *this, HSStage *a2)
{
  uint64_t v5 = this;
  id location = 0;
  objc_storeStrong(&location, a2);
  char v3 = v5;
  HSRecordingTypes::StateFrame::StateFrame(v5, (HSStage *)location);
  objc_storeStrong(&location, 0);
  return v3;
}

{
  HSRecordingTypes::StateFrame *v3;
  id location;
  HSRecordingTypes::StateFrame *v5;

  uint64_t v5 = this;
  id location = 0;
  objc_storeStrong(&location, a2);
  char v3 = v5;
  HSRecordingTypes::Frame::Frame((uint64_t)v5, 2);
  *(void *)char v3 = off_142870;
  std::unordered_map<std::string,HSStage * {__strong}>::unordered_map[abi:ne180100]((uint64_t)v3 + 32);
  HSRecordingTypes::populateStageMap((HSRecordingTypes::StateFrame *)((char *)v3 + 32), location);
  objc_storeStrong(&location, 0);
  return v3;
}

void sub_AE5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, _Unwind_Exception *exception_object)
{
  objc_storeStrong((id *)(v13 - 16), 0);
  _Unwind_Resume(a1);
}

void HSRecordingTypes::StateFrame::~StateFrame(HSRecordingTypes::StateFrame *this)
{
}

{
  *(void *)this = off_142870;
  std::unordered_map<std::string,HSStage * {__strong}>::~unordered_map[abi:ne180100]((uint64_t)this + 32);
}

void sub_AE8E8(uint64_t a1, int a2)
{
  *(void *)(v2 - 104) = a1;
  *(_DWORD *)(v2 - 108) = a2;
  __cxa_end_catch();
  objc_storeStrong((id *)(v2 - 56), 0);
  JUMPOUT(0xAE968);
}

void sub_AE930(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(v2);
}

void sub_AE960()
{
  _Unwind_Resume(v0);
}

HSRecordingTypes::ConsumeFrame *HSRecordingTypes::ConsumeFrame::ConsumeFrame(HSRecordingTypes::ConsumeFrame *this, objc_object *a2)
{
  uint64_t v5 = this;
  id location = 0;
  objc_storeStrong(&location, a2);
  char v3 = v5;
  HSRecordingTypes::ConsumeFrame::ConsumeFrame(v5);
  objc_storeStrong((id *)v3 + 4, location);
  objc_storeStrong(&location, 0);
  return v3;
}

void sub_AE9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, _Unwind_Exception *exception_object)
{
  objc_storeStrong((id *)(v13 - 16), 0);
  _Unwind_Resume(a1);
}

void HSRecordingTypes::ConsumeFrame::~ConsumeFrame(id *this)
{
}

{
  objc_storeStrong(this + 4, 0);
}

HSRecordingTypes::HeaderFrame *HSRecordingTypes::HeaderFrame::HeaderFrame(HSRecordingTypes::HeaderFrame *this)
{
  return this;
}

{
  os_log_t oslog;
  char *v4;
  BOOL v5;
  tm *v6;
  tm v7;
  time_t v8;
  HSRecordingTypes::HeaderFrame *v9;
  HSRecordingTypes::HeaderFrame *v10;
  uint8_t v11[56];
  char v12[1024];

  uint64_t v9 = this;
  uint64_t v10 = this;
  HSRecordingTypes::Frame::Frame((uint64_t)this, 1);
  *(void *)this = off_142910;
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 1objc_storeStrong(&location, 0) = 0;
  uint64_t v8 = 0;
  uint64_t v8 = time(0);
  uint64_t v6 = localtime_r(&v8, &v7);
  uint64_t v5 = v6 != 0;
  if (v6)
  {
    *((_DWORD *)this + 1objc_storeStrong(&location, 0) = v7.tm_gmtoff;
  }
  else
  {
    uint64_t v4 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRecordingTypes.h", v12);
    os_log_t oslog = &_os_log_default;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v11, (uint64_t)"HSRecordingTypes::HeaderFrame::HeaderFrame()", (uint64_t)v4, 86, (uint64_t)"tr");
      _os_log_error_impl(&def_411C8, oslog, OS_LOG_TYPE_ERROR, "Assertion failed (%s @ %s:%ju): %s", v11, 0x2Au);
    }
    objc_storeStrong((id *)&oslog, 0);
  }
  return v10;
}

BOOL HSUtil::Encoder::encodeCodable<HSRecordingTypes::Frame>(HSUtil::Coder *a1, HSRecordingTypes::Frame *a2)
{
  BOOL result = HSUtil::Coder::ok(a1);
  if (result)
  {
    HSUtil::Encoder::_encodeCodable<HSRecordingTypes::Frame>(a1, a2);
    return HSUtil::Coder::ok(a1);
  }
  return result;
}

void $_0::~$_0($_0 *this)
{
}

{
  std::vector<std::unique_ptr<EncoderState>>::~vector[abi:ne180100]((uint64_t *)this + 6);
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void std::make_unique[abi:ne180100]<EncoderStateMemoryable,HSUtil::IO::Writable &>()
{
}

void sub_AF04C(uint64_t a1, int a2)
{
  *(void *)(v2 - 24) = a1;
  *(_DWORD *)(v2 - 28) = a2;
  operator delete();
}

void *std::unique_ptr<EncoderState>::unique_ptr[abi:ne180100]<EncoderStateMemoryable,std::default_delete<EncoderStateMemoryable>,void,void>(void *a1, uint64_t a2)
{
  return a1;
}

{
  void v4[3];

  void v4[2] = a1;
  v4[1] = a2;
  v4[0] = std::unique_ptr<std::__hash_node<HSStage * {__strong},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::release[abi:ne180100]();
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  std::__compressed_pair<EncoderState *,std::default_delete<EncoderState>>::__compressed_pair[abi:ne180100]<EncoderStateMemoryable *,std::default_delete<EncoderStateMemoryable>>(a1, v4);
  return a1;
}

void std::make_unique[abi:ne180100]<EncoderState,HSUtil::IO::Writable &>()
{
}

void sub_AF10C(uint64_t a1, int a2)
{
  *(void *)(v2 - 24) = a1;
  *(_DWORD *)(v2 - 28) = a2;
  operator delete();
}

void EncoderStateMemoryable::EncoderStateMemoryable(EncoderStateMemoryable *this, HSUtil::IO::Writable *a2)
{
}

{
  void *v3;

  EncoderState::EncoderState(this, a2);
  HSUtil::IO::Memoryable::Memoryable((void *)this + 26);
  HSUtil::IO::WritableTo::WritableTo((void *)this + 27);
  *(void *)this = &off_1426D0;
  *((void *)this + MTRestZoneIntegrator_::clearMotion(this, 1) = &off_142730;
  *((void *)this + 26) = off_142750;
  *((void *)this + 2std::vector<HSUtil::Encoder::ContainerRecord>::~vector[abi:ne180100]((uint64_t *)this + 7) = &off_142778;
  if (!v3) {
    __cxa_bad_cast();
  }
  *((void *)this + 28) = v3;
}

void *std::unique_ptr<EncoderStateMemoryable>::unique_ptr[abi:ne180100]<true,void>(void *a1, uint64_t a2)
{
  return a1;
}

{
  void v4[2];

  v4[1] = a1;
  v4[0] = a2;
  std::__compressed_pair<HSUtil::Decoder::Callbacks *,std::default_delete<HSUtil::Decoder::Callbacks>>::__compressed_pair[abi:ne180100]<HSUtil::Decoder::Callbacks *&,std::__value_init_tag>(a1, v4);
  return a1;
}

void sub_AF2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, EncoderState *a9, uint64_t a10, int a11, int a12, _Unwind_Exception *exception_object)
{
}

void EncoderState::EncoderState(EncoderState *this, HSUtil::IO::Writable *a2)
{
  *((unsigned char *)this + 20objc_storeStrong(&location, 0) = 1;
}

{
  EncoderState::EncoderState(this, a2, 0, -1);
  *((unsigned char *)this + 20objc_storeStrong(&location, 0) = 1;
}

void EncoderState::~EncoderState(EncoderState *this)
{
  *(void *)this = &off_142810;
  *((void *)this + MTRestZoneIntegrator_::clearMotion(this, 1) = &off_142850;
  HSUtil::Encoder::~Encoder((EncoderState *)((char *)this + 16));
}

{
  EncoderState::~EncoderState(this);
}

{
  EncoderState::~EncoderState(this);
  operator delete();
}

uint64_t EncoderState::read(EncoderState *this, unint64_t a2, void *a3, unint64_t a4)
{
  unint64_t v6 = a4;
  if (*((void *)this + 21))
  {
    if (a2 <= *((void *)this + 23))
    {
      if (a4 > *((void *)this + 23) - a2) {
        unint64_t v6 = *((void *)this + 23) - a2;
      }
      v7[0] = (***((uint64_t (****)(void, uint64_t, void *, uint64_t))this + 21))(*((void *)this + 21), *((void *)this + 22) + a2, a3, v6);
      v7[1] = v4;
    }
    else
    {
      HSUtil::IO::Result::Result((HSUtil::IO::Result *)v7, 34);
    }
  }
  else
  {
    HSUtil::IO::Result::Result((HSUtil::IO::Result *)v7, 45);
  }
  return v7[0];
}

uint64_t EncoderState::readLength(EncoderState *this)
{
  HSUtil::IO::Result::Result((HSUtil::IO::Result *)&v2, *((void *)this + 23));
  return v2;
}

void EncoderStateMemoryable::~EncoderStateMemoryable(EncoderStateMemoryable *this)
{
}

{
  EncoderStateMemoryable::~EncoderStateMemoryable(this);
  operator delete();
}

{
  EncoderState::~EncoderState(this);
}

uint64_t EncoderState::write(EncoderState *this, unint64_t a2, const void *a3, unint64_t a4)
{
  long long v11 = this;
  unint64_t v10 = a2;
  uint64_t v9 = a3;
  unint64_t v8 = a4;
  if (a2 > *((void *)this + 24) || v8 > *((void *)this + 24) - v10)
  {
    HSUtil::IO::Result::Result((HSUtil::IO::Result *)&v12, 34);
  }
  else
  {
    *(void *)&long long v7 = (***((uint64_t (****)(void, uint64_t, const void *, unint64_t))this + 20))(*((void *)this + 20), *((void *)this + 22) + v10, v9, v8);
    *((void *)&v7 + MTRestZoneIntegrator_::clearMotion(this, 1) = v4;
    if (HSUtil::Coder::ok((HSUtil::Coder *)&v7))
    {
      if (*((void *)&v7 + 1) == v8)
      {
        if (v10 + v8 > *((void *)this + 23)) {
          *((void *)this + 23) = v10 + v8;
        }
        HSUtil::IO::Result::Result((HSUtil::IO::Result *)&v12, v8);
      }
      else
      {
        HSUtil::IO::Result::Result((HSUtil::IO::Result *)&v12, 5);
      }
    }
    else
    {
      return v7;
    }
  }
  return v12;
}

uint64_t EncoderState::writeLength(EncoderState *this, unint64_t a2)
{
  if (a2 > *((void *)this + 24))
  {
    uint64_t v5 = +[NSAssertionHandler currentHandler];
    uint64_t v4 = +[NSString stringWithUTF8String:"virtual IO::Result EncoderState::writeLength(size_t)"];
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v5, "handleFailureInFunction:file:lineNumber:description:", @"len <= _cap");
  }
  *((void *)this + 23) = a2;
  if (*((unsigned char *)this + 200))
  {
    v8[0] = (*(uint64_t (**)(void, void))(**((void **)this + 20) + 8))(*((void *)this + 20), *((void *)this + 23));
    v8[1] = v2;
  }
  else
  {
    HSUtil::IO::Result::Result((HSUtil::IO::Result *)v8, 0);
  }
  return v8[0];
}

uint64_t EncoderStateMemoryable::memory(EncoderStateMemoryable *this)
{
  uint64_t v3 = (***((uint64_t (****)(void))this + 28))(*((void *)this + 28));
  if (v3) {
    return v3 + *((void *)this + 22);
  }
  else {
    return 0;
  }
}

unint64_t EncoderStateMemoryable::memoryReadableLength(EncoderStateMemoryable *this)
{
  unint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 28) + 8))(*((void *)this + 28));
  if (v4 < *((void *)this + 22)) {
    return 0;
  }
  if (v4 - *((void *)this + 22) >= *((void *)this + 23)) {
    return *((void *)this + 23);
  }
  else {
    return v4 - *((void *)this + 22);
  }
}

unint64_t EncoderStateMemoryable::memoryWritableLength(EncoderStateMemoryable *this)
{
  unint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 28) + 16))(*((void *)this + 28));
  if (v4 < *((void *)this + 22)) {
    return 0;
  }
  if (v4 - *((void *)this + 22) >= *((void *)this + 24)) {
    return *((void *)this + 24);
  }
  else {
    return v4 - *((void *)this + 22);
  }
}

uint64_t EncoderStateMemoryable::writeTo(EncoderStateMemoryable *this, unint64_t a2, HSUtil::IO::Writable *a3, uint64_t a4, unint64_t a5)
{
  long long v16 = this;
  unint64_t v15 = a2;
  uint64_t v14 = a3;
  uint64_t v13 = a4;
  unint64_t v12 = a5;
  uint64_t v11 = 0;
  uint64_t v11 = (*(uint64_t (**)(EncoderStateMemoryable *))(*(void *)this + 48))(this);
  if (v11)
  {
    unint64_t v10 = 0;
    unint64_t v10 = (*(uint64_t (**)(EncoderStateMemoryable *))(*(void *)this + 56))(this);
    if (v15 <= v10)
    {
      unint64_t v9 = v10 - v15;
      if (v12 > v10 - v15) {
        unint64_t v12 = v9;
      }
      *(void *)&long long v8 = (**(uint64_t (***)(HSUtil::IO::Writable *, uint64_t, uint64_t, unint64_t))v14)(v14, v13, v11 + v15, v12);
      *((void *)&v8 + MTRestZoneIntegrator_::clearMotion(this, 1) = v5;
      if (HSUtil::Coder::ok((HSUtil::Coder *)&v8))
      {
        if (*((void *)&v8 + 1) == v12) {
          HSUtil::IO::Result::Result((HSUtil::IO::Result *)&v17, v12);
        }
        else {
          HSUtil::IO::Result::Result((HSUtil::IO::Result *)&v17, 5);
        }
      }
      else
      {
        return v8;
      }
    }
    else
    {
      HSUtil::IO::Result::Result((HSUtil::IO::Result *)&v17, 34);
    }
  }
  else
  {
    HSUtil::IO::Result::Result((HSUtil::IO::Result *)&v17, 12);
  }
  return v17;
}

uint64_t non-virtual thunk to'EncoderState::write(EncoderState *this, unint64_t a2, const void *a3, unint64_t a4)
{
  return EncoderState::write((EncoderState *)((char *)this - 8), a2, a3, a4);
}

uint64_t non-virtual thunk to'EncoderState::writeLength(EncoderState *this, unint64_t a2)
{
  return EncoderState::writeLength((EncoderState *)((char *)this - 8), a2);
}

uint64_t non-virtual thunk to'EncoderStateMemoryable::memory(EncoderStateMemoryable *this)
{
  return EncoderStateMemoryable::memory((EncoderStateMemoryable *)((char *)this - 208));
}

unint64_t non-virtual thunk to'EncoderStateMemoryable::memoryReadableLength(EncoderStateMemoryable *this)
{
  return EncoderStateMemoryable::memoryReadableLength((EncoderStateMemoryable *)((char *)this - 208));
}

unint64_t non-virtual thunk to'EncoderStateMemoryable::memoryWritableLength(EncoderStateMemoryable *this)
{
  return EncoderStateMemoryable::memoryWritableLength((EncoderStateMemoryable *)((char *)this - 208));
}

uint64_t non-virtual thunk to'EncoderStateMemoryable::writeTo(EncoderStateMemoryable *this, unint64_t a2, HSUtil::IO::Writable *a3, uint64_t a4, unint64_t a5)
{
  return EncoderStateMemoryable::writeTo((EncoderStateMemoryable *)((char *)this - 216), a2, a3, a4, a5);
}

void EncoderState::EncoderState(EncoderState *this, HSUtil::IO::Writable *a2, uint64_t a3, uint64_t a4)
{
  HSUtil::IO::Readable::Readable(this);
  HSUtil::IO::Writable::Writable((void *)this + 1);
  *(void *)this = &off_142810;
  *((void *)this + MTRestZoneIntegrator_::clearMotion(this, 1) = &off_142850;
  HSUtil::Encoder::Encoder((EncoderState *)((char *)this + 16));
  *((void *)this + 2objc_storeStrong(&location, 0) = a2;
  if (a2) {
  else
  }
    unint64_t v4 = 0;
  *((void *)this + 2MTRestZoneIntegrator_::clearMotion(this, 1) = v4;
  *((void *)this + 22) = a3;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = a4;
  *((unsigned char *)this + 20objc_storeStrong(&location, 0) = 0;
  HSUtil::Encoder::setWritable((EncoderState *)((char *)this + 16), (EncoderState *)((char *)this + 8));
}

{
  EncoderState::EncoderState(this, a2, a3, a4);
}

void sub_AFF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, _Unwind_Exception *exception_object)
{
}

void *std::__compressed_pair<EncoderState *,std::default_delete<EncoderState>>::__compressed_pair[abi:ne180100]<EncoderStateMemoryable *,std::default_delete<EncoderStateMemoryable>>(void *a1, void *a2)
{
  return a1;
}

{
  std::__hash_const_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_const_iterator[abi:ne180100](a1, a2);
  std::__compressed_pair_elem<std::default_delete<EncoderState>,1,true>::__compressed_pair_elem[abi:ne180100]<std::default_delete<EncoderStateMemoryable>,void>((uint64_t)a1);
  return a1;
}

uint64_t std::__compressed_pair_elem<std::default_delete<EncoderState>,1,true>::__compressed_pair_elem[abi:ne180100]<std::default_delete<EncoderStateMemoryable>,void>(uint64_t a1)
{
  return a1;
}

uint64_t std::unique_ptr<EncoderStateMemoryable>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

void std::unique_ptr<EncoderStateMemoryable>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  uint64_t v5 = *v2;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    std::default_delete<EncoderStateMemoryable>::operator()[abi:ne180100](v4, v5);
  }
}

uint64_t std::default_delete<EncoderStateMemoryable>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  }
  return result;
}

void *std::unique_ptr<EncoderState>::unique_ptr[abi:ne180100]<true,void>(void *a1, uint64_t a2)
{
  return a1;
}

{
  void v4[2];

  v4[1] = a1;
  v4[0] = a2;
  std::__compressed_pair<HSUtil::Decoder::Callbacks *,std::default_delete<HSUtil::Decoder::Callbacks>>::__compressed_pair[abi:ne180100]<HSUtil::Decoder::Callbacks *&,std::__value_init_tag>(a1, v4);
  return a1;
}

void std::make_unique[abi:ne180100]<EncoderStateMemoryable,HSUtil::IO::Writable &,unsigned long &,unsigned long &>()
{
}

void sub_B0480(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, _Unwind_Exception *exception_object)
{
}

void std::make_unique[abi:ne180100]<EncoderState,HSUtil::IO::Writable &,unsigned long &,unsigned long &>()
{
}

void sub_B0528(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, _Unwind_Exception *exception_object)
{
}

void EncoderStateMemoryable::EncoderStateMemoryable(EncoderStateMemoryable *this, HSUtil::IO::Writable *a2, uint64_t a3, uint64_t a4)
{
}

{
  void *v5;

  EncoderState::EncoderState(this, a2, a3, a4);
  HSUtil::IO::Memoryable::Memoryable((void *)this + 26);
  HSUtil::IO::WritableTo::WritableTo((void *)this + 27);
  *(void *)this = &off_1426D0;
  *((void *)this + MTRestZoneIntegrator_::clearMotion(this, 1) = &off_142730;
  *((void *)this + 26) = off_142750;
  *((void *)this + 2std::vector<HSUtil::Encoder::ContainerRecord>::~vector[abi:ne180100]((uint64_t *)this + 7) = &off_142778;
  if (!v5) {
    __cxa_bad_cast();
  }
  *((void *)this + 28) = v5;
}

void sub_B06EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, EncoderState *a9, uint64_t a10, int a11, int a12, _Unwind_Exception *exception_object)
{
}

BOOL std::operator==[abi:ne180100]<std::unique_ptr<EncoderState> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100](a1);
  return v3 == std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100](a2);
}

void sub_B07F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, _Unwind_Exception *exception_object)
{
  objc_storeStrong((id *)(v13 - 16), 0);
  _Unwind_Resume(a1);
}

uint64_t HSRecordingTypes::Frame::Frame(uint64_t result, char a2)
{
  *(void *)uint64_t result = off_1428B8;
  *(unsigned char *)(result + 8) = a2;
  *(void *)(result + std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a9 + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t std::unordered_map<std::string,HSStage * {__strong}>::unordered_map[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::__hash_table<std::__hash_value_type<std::string,HSStage * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,HSStage * {__strong}>>>::__hash_table(a1);
  return a1;
}

void HSRecordingTypes::populateStageMap(MTFingerToPathMap_ *a1, void *a2)
{
  id v18 = a1;
  id location = 0;
  objc_storeStrong(&location, a2);
  id v10 = [location name];
  std::string::basic_string[abi:ne180100]<0>(&v16, (char *)[v10 UTF8String]);

  uint64_t v15 = std::unordered_map<std::string,HSStage * {__strong}>::find[abi:ne180100]((uint64_t)v18);
  uint64_t v14 = std::unordered_map<unsigned long long,objc_object * {__strong}>::end[abi:ne180100]();
  if (std::operator!=[abi:ne180100](&v15, &v14))
  {
    int v13 = 1;
  }
  else
  {
    id obj = location;
    unint64_t v9 = (id *)std::unordered_map<std::string,HSStage * {__strong}>::operator[](v18, (MTFingerToPathMap_ *)&v16);
    objc_storeStrong(v9, obj);
    memset(__b, 0, sizeof(__b));
    id v6 = [location consumers];
    id v7 = [v6 countByEnumeratingWithState:__b objects:v19 count:16];
    if (v7)
    {
      uint64_t v3 = *(void *)__b[2];
      uint64_t v4 = 0;
      id v5 = v7;
      while (1)
      {
        uint64_t v2 = v4;
        if (*(void *)__b[2] != v3) {
          objc_enumerationMutation(v6);
        }
        id v12 = *(id *)(__b[1] + 8 * v4);
        HSRecordingTypes::populateStageMap(v18, v12);
        objc_storeStrong(&v12, 0);
        ++v4;
        if (v2 + 1 >= (unint64_t)v5)
        {
          uint64_t v4 = 0;
          id v5 = [v6 countByEnumeratingWithState:__b objects:v19 count:16];
          if (!v5) {
            break;
          }
        }
      }
    }

    int v13 = 0;
  }
  std::string::~string(&v16);
  objc_storeStrong(&location, 0);
}

void sub_B0BE0(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,id location)
{
  *(void *)(v39 - 20objc_storeStrong(&location, 0) = a1;
  *(_DWORD *)(v39 - 204) = a2;

  std::string::~string((std::string *)(v39 - 192));
  objc_storeStrong((id *)(v39 - 168), 0);
  JUMPOUT(0xB0C54);
}

void sub_B0C4C()
{
  _Unwind_Resume(v0);
}

uint64_t std::unordered_map<std::string,HSStage * {__strong}>::~unordered_map[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::__hash_table<std::__hash_value_type<std::string,HSStage * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,HSStage * {__strong}>>>::~__hash_table(a1);
  return a1;
}

std::string *HSRecordingTypes::StateFrame::encodeToMap(HSRecordingTypes::StateFrame *this, HSUtil::Encoder *a2)
{
  unint64_t v26 = this;
  long long v25 = a2;
  HSRecordingTypes::Frame::encodeToMap(this, a2);
  HSUtil::Encoder::encodeMapStart(v25, (const CoderKey *)HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Key, 4);
  v24[1] = (void *)((char *)this + 32);
  v24[0] = (void *)std::unordered_map<std::string,HSStage * {__strong}>::begin[abi:ne180100]();
  uint64_t v23 = std::unordered_map<unsigned long long,objc_object * {__strong}>::end[abi:ne180100]();
  while (std::operator!=[abi:ne180100](v24, &v23))
  {
    std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *>>::operator*[abi:ne180100]();
    std::pair<std::string const,HSStage * {__strong}>::pair[abi:ne180100](&v21, v2);
    BOOL v20 = 0;
    BOOL v20 = HSUtil::Coder::ok(v25);
    if (v20)
    {
      unint64_t v15 = 0;
      unint64_t v15 = HSUtil::Encoder::offset(v25);
      long long v8 = v25;
      std::string::c_str[abi:ne180100]();
      id v5 = HSUtil::CoderKey::New(v3, v4);
      HSUtil::Encoder::encodeHSCodable(v8, (const CoderKey *)v5, v22);
      BOOL v14 = 0;
      BOOL v14 = HSUtil::Coder::ok(v25);
      if (!v14)
      {
        int v13 = 0;
        int v13 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRecordingTypes.h", v28);
        os_log_t v12 = &_os_log_default;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          id v7 = v12;
          __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v27, (uint64_t)"virtual void HSRecordingTypes::StateFrame::encodeToMap(Encoder &) const", (uint64_t)v13, 144, (uint64_t)"coder");
          _os_log_error_impl(&def_411C8, v7, OS_LOG_TYPE_ERROR, "Assertion failed (%s @ %s:%ju): %s", v27, 0x2Au);
        }
        objc_storeStrong((id *)&v12, 0);
      }
      if (!HSUtil::Coder::ok(v25)) {
        HSUtil::Encoder::revert((uint64_t)v25, v15);
      }
      int v16 = 0;
    }
    else
    {
      unint64_t v19 = 0;
      unint64_t v19 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRecordingTypes.h", v30);
      os_log_t oslog = &_os_log_default;
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
      {
        log = oslog;
        os_log_type_t v10 = type;
        __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v29, (uint64_t)"virtual void HSRecordingTypes::StateFrame::encodeToMap(Encoder &) const", (uint64_t)v19, 140, (uint64_t)"coder");
        _os_log_error_impl(&def_411C8, log, v10, "Assertion failed (%s @ %s:%ju): %s", v29, 0x2Au);
      }
      objc_storeStrong((id *)&oslog, 0);
      int v16 = 1;
    }
    uint64_t result = std::pair<std::string const,HSStage * {__strong}>::~pair(&v21);
    if (v16) {
      return result;
    }
    std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *>>::operator++[abi:ne180100](v24);
  }
  return (std::string *)HSUtil::Encoder::encodeObjectStop(v25);
}

void sub_B108C()
{
  _Unwind_Resume(v0);
}

uint64_t HSRecordingTypes::StateFrame::decodeFromMap(HSRecordingTypes::StateFrame *this, HSUtil::Decoder *a2)
{
  uint64_t v45 = (HSRecordingTypes::Frame *)__chkstk_darwin(this, a2);
  unint64_t v44 = v2;
  int v13 = v45;
  char v43 = HSRecordingTypes::Frame::decodeFromMap(v45, (HSUtil::Decoder *)v2) & 1;
  char v42 = v43;
  if (v43)
  {
    HSUtil::Decoder::decodeMap(v44, (const CoderKey *)HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Key, (uint64_t)v38);
    if (HSUtil::Coder::ok((HSUtil::Coder *)v44))
    {
      while (1)
      {
        BOOL v32 = 0;
        BOOL v32 = (char **)HSUtil::Decoder::decodeKey((HSUtil::Decoder *)v38);
        if (HSUtil::Coder::end((HSUtil::Coder *)v38))
        {
          char v46 = 1;
          int v33 = 1;
          goto LABEL_33;
        }
        BOOL v31 = 0;
        BOOL v31 = HSUtil::Coder::ok((HSUtil::Coder *)v38);
        if (!v31) {
          break;
        }
        std::string::basic_string[abi:ne180100]<0>(&v27, *v32);
        uint64_t v26 = std::unordered_map<std::string,HSStage * {__strong}>::find[abi:ne180100]((uint64_t)v13 + 32);
        uint64_t v25 = std::unordered_map<unsigned long long,objc_object * {__strong}>::end[abi:ne180100]();
        if (std::operator==[abi:ne180100](&v26, &v25))
        {
          HSUtil::Decoder::decodeElement((HSUtil::Decoder *)v38, (uint64_t)v24);
          HSUtil::Decoder::~Decoder((HSUtil::Decoder *)v24);
          BOOL v23 = 0;
          BOOL v23 = HSUtil::Coder::ok((HSUtil::Coder *)v38);
          if (v23)
          {
            os_log_t v19 = &_os_log_default;
            os_log_type_t v18 = OS_LOG_TYPE_ERROR;
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              id v7 = v19;
              os_log_type_t v8 = v18;
              std::string::c_str[abi:ne180100]();
              __os_log_helper_16_2_1_8_32((uint64_t)v49, v3);
              _os_log_error_impl(&def_411C8, v7, v8, "No stage for state: %s", v49, 0xCu);
            }
            objc_storeStrong((id *)&v19, 0);
            int v33 = 3;
          }
          else
          {
            uint64_t v22 = 0;
            uint64_t v22 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRecordingTypes.h", v51);
            os_log_t oslog = &_os_log_default;
            os_log_type_t v20 = OS_LOG_TYPE_ERROR;
            if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
            {
              unint64_t v9 = oslog;
              os_log_type_t v10 = v20;
              __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v50, (uint64_t)"virtual BOOL HSRecordingTypes::StateFrame::decodeFromMap(Decoder &)", (uint64_t)v22, 170, (uint64_t)"submap");
              _os_log_error_impl(&def_411C8, v9, v10, "Assertion failed (%s @ %s:%ju): %s", v50, 0x2Au);
            }
            objc_storeStrong((id *)&oslog, 0);
            char v46 = 0;
            int v33 = 1;
          }
        }
        else
        {
          std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>>::operator->[abi:ne180100]();
          id v17 = *(id *)(v4 + 24);
          HSUtil::Decoder::decodeHSCodable((HSUtil::Coder *)v38, v17);
          BOOL v16 = 0;
          BOOL v16 = HSUtil::Coder::ok((HSUtil::Coder *)v38);
          if (v16)
          {
            int v33 = 0;
          }
          else
          {
            unint64_t v15 = 0;
            unint64_t v15 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRecordingTypes.h", v48);
            os_log_t v14 = &_os_log_default;
            if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
            {
              id v6 = v14;
              __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v47, (uint64_t)"virtual BOOL HSRecordingTypes::StateFrame::decodeFromMap(Decoder &)", (uint64_t)v15, 178, (uint64_t)"submap");
              _os_log_error_impl(&def_411C8, v6, OS_LOG_TYPE_ERROR, "Assertion failed (%s @ %s:%ju): %s", v47, 0x2Au);
            }
            objc_storeStrong((id *)&v14, 0);
            char v46 = 0;
            int v33 = 1;
          }
          objc_storeStrong(&v17, 0);
        }
        std::string::~string(&v27);
        if (v33 && v33 != 3) {
          goto LABEL_33;
        }
      }
      os_log_type_t v30 = 0;
      os_log_type_t v30 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRecordingTypes.h", v53);
      id v29 = &_os_log_default;
      os_log_type_t v28 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)v29, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = v29;
        os_log_type_t v12 = v28;
        __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v52, (uint64_t)"virtual BOOL HSRecordingTypes::StateFrame::decodeFromMap(Decoder &)", (uint64_t)v30, 162, (uint64_t)"submap");
        _os_log_error_impl(&def_411C8, v11, v12, "Assertion failed (%s @ %s:%ju): %s", v52, 0x2Au);
      }
      objc_storeStrong(&v29, 0);
      char v46 = 0;
      int v33 = 1;
    }
    else
    {
      unint64_t v36 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRecordingTypes.h", v55);
      id v35 = &_os_log_default;
      os_log_type_t v34 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)v35, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v54, (uint64_t)"virtual BOOL HSRecordingTypes::StateFrame::decodeFromMap(Decoder &)", (uint64_t)v36, 157, (uint64_t)"coder");
        _os_log_error_impl(&def_411C8, (os_log_t)v35, v34, "Assertion failed (%s @ %s:%ju): %s", v54, 0x2Au);
      }
      objc_storeStrong(&v35, 0);
      char v46 = 0;
      int v33 = 1;
    }
LABEL_33:
    HSUtil::Decoder::~Decoder((HSUtil::Decoder *)v38);
  }
  else
  {
    int v41 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRecordingTypes.h", v57);
    id location = &_os_log_default;
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)location, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v56, (uint64_t)"virtual BOOL HSRecordingTypes::StateFrame::decodeFromMap(Decoder &)", (uint64_t)v41, 153, (uint64_t)"br");
      _os_log_error_impl(&def_411C8, (os_log_t)location, type, "Assertion failed (%s @ %s:%ju): %s", v56, 0x2Au);
    }
    objc_storeStrong(&location, 0);
    char v46 = 0;
  }
  return v46 & 1;
}

void sub_B1984()
{
  _Unwind_Resume(v0);
}

HSUtil::Encoder *HSRecordingTypes::Frame::encodeToMap(HSRecordingTypes::Frame *this, HSUtil::Encoder *a2)
{
  MonotonicTime = (HSUtil *)HSUtil::GetMonotonicTime(this);
  __darwin_time_t UnixTime = HSUtil::GetUnixTime(MonotonicTime);
  HSUtil::Encoder::encodeUInt(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Key, *((unsigned __int8 *)this + 8));
  HSUtil::Encoder::encodeUInt(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key, (unint64_t)MonotonicTime);
  return HSUtil::Encoder::encodeUInt(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key, UnixTime);
}

uint64_t HSRecordingTypes::Frame::decodeFromMap(HSRecordingTypes::Frame *this, HSUtil::Decoder *a2)
{
  BOOL v16 = this;
  unint64_t v15 = a2;
  *((unsigned char *)this + 8) = HSUtil::Decoder::decodeUInt(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Key);
  if (HSUtil::Coder::ok(v15))
  {
    *((void *)this + 2) = HSUtil::Decoder::decodeUInt(v15, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key);
    if (HSUtil::Coder::ok(v15))
    {
      *((void *)this + 3) = HSUtil::Decoder::decodeUInt(v15, (const CoderKey *)HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Key);
      if (HSUtil::Coder::ok(v15))
      {
        char v17 = 1;
      }
      else
      {
        id v5 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRecordingTypes.h", v19);
        os_log_t v4 = &_os_log_default;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v18, (uint64_t)"virtual BOOL HSRecordingTypes::Frame::decodeFromMap(Decoder &)", (uint64_t)v5, 56, (uint64_t)"coder");
          _os_log_error_impl(&def_411C8, v4, OS_LOG_TYPE_ERROR, "Assertion failed (%s @ %s:%ju): %s", v18, 0x2Au);
        }
        objc_storeStrong((id *)&v4, 0);
        char v17 = 0;
      }
    }
    else
    {
      unint64_t v9 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRecordingTypes.h", v21);
      os_log_t v8 = &_os_log_default;
      os_log_type_t v7 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v20, (uint64_t)"virtual BOOL HSRecordingTypes::Frame::decodeFromMap(Decoder &)", (uint64_t)v9, 52, (uint64_t)"coder");
        _os_log_error_impl(&def_411C8, v8, v7, "Assertion failed (%s @ %s:%ju): %s", v20, 0x2Au);
      }
      objc_storeStrong((id *)&v8, 0);
      char v17 = 0;
    }
  }
  else
  {
    int v13 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRecordingTypes.h", v23);
    os_log_t oslog = &_os_log_default;
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v22, (uint64_t)"virtual BOOL HSRecordingTypes::Frame::decodeFromMap(Decoder &)", (uint64_t)v13, 48, (uint64_t)"coder");
      _os_log_error_impl(&def_411C8, oslog, type, "Assertion failed (%s @ %s:%ju): %s", v22, 0x2Au);
    }
    objc_storeStrong((id *)&oslog, 0);
    char v17 = 0;
  }
  return v17 & 1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,HSStage * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,HSStage * {__strong}>>>::__hash_table(uint64_t a1)
{
  return a1;
}

{
  float v3;
  int v4;
  uint64_t v5;

  id v5 = a1;
  std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> *>>>::unique_ptr[abi:ne180100]<true,void>((void *)a1);
  std::__compressed_pair<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>>::__compressed_pair[abi:ne180100]<true,void>((void *)(a1 + 16));
  os_log_t v4 = 0;
  std::__compressed_pair<unsigned long,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>>::__compressed_pair[abi:ne180100]<int,std::__default_init_tag>((void *)(a1 + 24), &v4);
  uint64_t v3 = 1.0;
  std::__compressed_pair<float,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>>::__compressed_pair[abi:ne180100]<float,std::__default_init_tag>((_DWORD *)(a1 + 32), &v3);
  return a1;
}

void *std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> *>>>::unique_ptr[abi:ne180100]<true,void>(void *a1)
{
  return a1;
}

{
  std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> *>>>::__compressed_pair[abi:ne180100]<std::__value_init_tag,std::__value_init_tag>(a1);
  return a1;
}

void *std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> *>>>::__compressed_pair[abi:ne180100]<std::__value_init_tag,std::__value_init_tag>(void *a1)
{
  return a1;
}

{
  std::__compressed_pair_elem<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> **,0,false>::__compressed_pair_elem[abi:ne180100](a1);
  std::__compressed_pair_elem<std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> *>>,1,false>::__compressed_pair_elem[abi:ne180100](a1 + 1);
  return a1;
}

void *std::__compressed_pair_elem<std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> *>>,1,false>::__compressed_pair_elem[abi:ne180100](void *a1)
{
  return a1;
}

void *std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> *>>::__bucket_list_deallocator[abi:ne180100](void *a1)
{
  return a1;
}

{
  int v3;
  void *v4;

  os_log_t v4 = a1;
  uint64_t v3 = 0;
  std::__compressed_pair<unsigned long,std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::__compressed_pair[abi:ne180100]<int,std::__default_init_tag>(a1, &v3);
  return a1;
}

uint64_t std::unordered_map<std::string,HSStage * {__strong}>::find[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,HSStage * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,HSStage * {__strong}>>>::find<std::string>(a1);
  std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>>::__hash_map_iterator[abi:ne180100](&v3, v2);
  return v3;
}

uint64_t std::unordered_map<std::string,HSStage * {__strong}>::operator[](MTFingerToPathMap_ *a1, MTFingerToPathMap_ *a2)
{
  v8[4] = a1;
  void v8[3] = a2;
  v8[0] = (MTFingerToPathMap_ *)std::forward_as_tuple[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)a2);
  MTFingerToPathMap_::~MTFingerToPathMap_(v8[0]);
  v8[1] = (MTFingerToPathMap_ *)std::__hash_table<std::__hash_value_type<std::string,HSStage * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,HSStage * {__strong}>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, (uint64_t)a2, (uint64_t)&std::piecewise_construct, (uint64_t *)v8, (uint64_t)&v7);
  void v8[2] = v2;
  std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>::operator->[abi:ne180100]();
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  return v3 + 24;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,HSStage * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,HSStage * {__strong}>>>::find<std::string>(uint64_t a1)
{
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  unint64_t v11 = std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>::operator()[abi:ne180100]();
  unint64_t v10 = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::bucket_count[abi:ne180100]();
  if (v10)
  {
    uint64_t v9 = std::__constrain_hash[abi:ne180100](v11, v10);
    char v7 = *(void ***)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v9);
    if (v7)
    {
      for (BOOL i = *v7; ; BOOL i = (void *)*i)
      {
        BOOL v5 = 0;
        if (i)
        {
          BOOL v4 = 1;
          if (std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i) != v11)
          {
            unint64_t v1 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i);
            BOOL v4 = std::__constrain_hash[abi:ne180100](v1, v10) == v9;
          }
          BOOL v5 = v4;
        }
        if (!v5) {
          break;
        }
        if (std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i) == v11)
        {
          std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
          std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
          std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100](v2);
          if (std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>::operator()[abi:ne180100]())
          {
            std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](&v12, (uint64_t)i);
            return v12;
          }
        }
      }
    }
  }
  return std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::end();
}

unint64_t std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>::operator()[abi:ne180100]()
{
  return std::__string_hash<char>::operator()[abi:ne180100]();
}

BOOL std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>::operator()[abi:ne180100]()
{
  return std::equal_to<std::string>::operator()[abi:ne180100]();
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100]()
{
  std::string::data[abi:ne180100]();
  BOOL v5 = v0;
  std::string::data[abi:ne180100]();
  uint64_t v4 = v1;
  uint64_t v2 = std::string::size[abi:ne180100]();
  return std::__do_string_hash[abi:ne180100]<char const*>(v5, v4 + v2);
}

unint64_t std::__do_string_hash[abi:ne180100]<char const*>(unsigned int *a1, uint64_t a2)
{
  BOOL v5 = a1;
  uint64_t v4 = a2;
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v3, a1, a2 - (void)a1);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, unsigned int *a2, unint64_t a3)
{
  uint64_t v37 = a1;
  unint64_t v36 = a2;
  unint64_t v35 = a3;
  os_log_type_t v34 = a2;
  if (a3 > 0x20)
  {
    if (v35 > 0x40)
    {
      unint64_t v33 = std::__libcpp_relaxed_load[abi:ne180100]<long>((uint64_t)v34 + v35 - 40);
      uint64_t v23 = std::__libcpp_relaxed_load[abi:ne180100]<long>((uint64_t)v34 + v35 - 16);
      uint64_t v32 = v23 + std::__libcpp_relaxed_load[abi:ne180100]<long>((uint64_t)v34 + v35 - 56);
      uint64_t v24 = std::__libcpp_relaxed_load[abi:ne180100]<long>((uint64_t)v34 + v35 - 48) + v35;
      uint64_t v3 = std::__libcpp_relaxed_load[abi:ne180100]<long>((uint64_t)v34 + v35 - 24);
      unint64_t v31 = std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_16[abi:ne180100](v24, v3);
      uint64_t v29 = std::__murmur2_or_cityhash<unsigned long,64ul>::__weak_hash_len_32_with_seeds[abi:ne180100]((uint64_t)v34 + v35 - 64, v35, v31);
      uint64_t v30 = v4;
      uint64_t v27 = std::__murmur2_or_cityhash<unsigned long,64ul>::__weak_hash_len_32_with_seeds[abi:ne180100]((uint64_t)v34 + v35 - 32, v32 - 0x4B6D499041670D8DLL, v33);
      uint64_t v28 = v5;
      unint64_t v33 = 0xB492B66FBE98F273 * v33 + std::__libcpp_relaxed_load[abi:ne180100]<long>((uint64_t)v34);
      unint64_t v35 = (v35 - 1) & 0xFFFFFFFFFFFFFFC0;
      do
      {
        uint64_t v17 = v33 + v32 + v29;
        uint64_t v6 = std::__libcpp_relaxed_load[abi:ne180100]<long>((uint64_t)(v34 + 2));
        unint64_t v33 = 0xB492B66FBE98F273
            * std::__murmur2_or_cityhash<unsigned long,64ul>::__rotate[abi:ne180100](v17 + v6, 37);
        uint64_t v18 = v32 + v30;
        uint64_t v7 = std::__libcpp_relaxed_load[abi:ne180100]<long>((uint64_t)(v34 + 12));
        uint64_t v32 = 0xB492B66FBE98F273
            * std::__murmur2_or_cityhash<unsigned long,64ul>::__rotate[abi:ne180100](v18 + v7, 42);
        v33 ^= v28;
        uint64_t v19 = v29;
        uint64_t v8 = std::__libcpp_relaxed_load[abi:ne180100]<long>((uint64_t)(v34 + 10));
        v32 += v19 + v8;
        unint64_t v31 = 0xB492B66FBE98F273
            * std::__murmur2_or_cityhash<unsigned long,64ul>::__rotate[abi:ne180100](v31 + v27, 33);
        v26[0] = std::__murmur2_or_cityhash<unsigned long,64ul>::__weak_hash_len_32_with_seeds[abi:ne180100]((uint64_t)v34, 0xB492B66FBE98F273 * v30, v33 + v27);
        v26[1] = v9;
        std::pair<unsigned long,unsigned long>::operator=[abi:ne180100](&v29, v26);
        uint64_t v22 = v34 + 8;
        uint64_t v21 = v31 + v28;
        unint64_t v20 = v32;
        uint64_t v10 = std::__libcpp_relaxed_load[abi:ne180100]<long>((uint64_t)(v34 + 4));
        v25[0] = std::__murmur2_or_cityhash<unsigned long,64ul>::__weak_hash_len_32_with_seeds[abi:ne180100]((uint64_t)v22, v21, v20 + v10);
        v25[1] = v11;
        std::pair<unsigned long,unsigned long>::operator=[abi:ne180100](&v27, v25);
        std::swap[abi:ne180100]<HSUtil::Encoder::ContainerRecord *>((uint64_t *)&v31, (uint64_t *)&v33);
        v34 += 16;
        v35 -= 64;
      }
      while (v35);
      unint64_t v15 = std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_16[abi:ne180100](v29, v27);
      unint64_t v12 = std::__murmur2_or_cityhash<unsigned long,64ul>::__shift_mix[abi:ne180100](v32);
      uint64_t v16 = v15 - 0x4B6D499041670D8DLL * v12 + v31;
      unint64_t v13 = std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_16[abi:ne180100](v30, v28);
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_16[abi:ne180100](v16, v13 + v33);
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100]((uint64_t)v34, v35);
    }
  }
  else if (v35 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100]((uint64_t)v34, v35);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](v34, v35);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](unsigned int *a1, unint64_t a2)
{
  if (a2 <= 8)
  {
    if (a2 < 4)
    {
      if (a2) {
        return 0x9AE16A3B2F90404FLL
      }
             * std::__murmur2_or_cityhash<unsigned long,64ul>::__shift_mix[abi:ne180100]((0x9AE16A3B2F90404FLL
                                                                                        * (*(unsigned __int8 *)a1
                                                                                         + (*((unsigned __int8 *)a1
                                                                                            + (a2 >> 1)) << 8))) ^ (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))));
      else {
        return 0x9AE16A3B2F90404FLL;
      }
    }
    else
    {
      int v5 = std::__loadword[abi:ne180100]<unsigned int>(a1);
      unsigned int v3 = std::__loadword[abi:ne180100]<unsigned int>((unsigned int *)((char *)a1 + a2 - 4));
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_16[abi:ne180100](a2 + (8 * v5), v3);
    }
  }
  else
  {
    uint64_t v7 = std::__libcpp_relaxed_load[abi:ne180100]<long>((uint64_t)a1);
    uint64_t v6 = std::__libcpp_relaxed_load[abi:ne180100]<long>((uint64_t)a1 + a2 - 8);
    uint64_t v2 = std::__murmur2_or_cityhash<unsigned long,64ul>::__rotate_by_at_least_1[abi:ne180100](v6 + a2, a2);
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_16[abi:ne180100](v7, v2) ^ v6;
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v9 = 0xB492B66FBE98F273 * std::__libcpp_relaxed_load[abi:ne180100]<long>(a1);
  uint64_t v8 = std::__libcpp_relaxed_load[abi:ne180100]<long>(a1 + 8);
  uint64_t v7 = 0x9AE16A3B2F90404FLL * std::__libcpp_relaxed_load[abi:ne180100]<long>(a1 + a2 - 8);
  unint64_t v6 = 0xC3A5C85C97CB3127 * std::__libcpp_relaxed_load[abi:ne180100]<long>(a1 + a2 - 16);
  uint64_t v4 = std::__murmur2_or_cityhash<unsigned long,64ul>::__rotate[abi:ne180100](v9 - v8, 43);
  uint64_t v5 = v4 + std::__murmur2_or_cityhash<unsigned long,64ul>::__rotate[abi:ne180100](v7, 30) + v6;
  uint64_t v2 = std::__murmur2_or_cityhash<unsigned long,64ul>::__rotate[abi:ne180100](v8 ^ 0xC949D7C7509E6557, 20);
  return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_16[abi:ne180100](v5, v9 + v2 - v7 + a2);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v21 = std::__libcpp_relaxed_load[abi:ne180100]<long>(a1 + 24);
  uint64_t v4 = std::__libcpp_relaxed_load[abi:ne180100]<long>(a1);
  uint64_t v15 = v4 - 0x3C5A37A36834CED9 * (a2 + std::__libcpp_relaxed_load[abi:ne180100]<long>(a1 + a2 - 16));
  uint64_t v13 = std::__murmur2_or_cityhash<unsigned long,64ul>::__rotate[abi:ne180100](v15 + v21, 52);
  uint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::__rotate[abi:ne180100](v15, 37);
  uint64_t v16 = v15 + std::__libcpp_relaxed_load[abi:ne180100]<long>(a1 + 8);
  uint64_t v10 = v9 + std::__murmur2_or_cityhash<unsigned long,64ul>::__rotate[abi:ne180100](v16, 7);
  uint64_t v17 = v16 + std::__libcpp_relaxed_load[abi:ne180100]<long>(a1 + 16);
  uint64_t v8 = v17 + v21;
  uint64_t v7 = v13 + std::__murmur2_or_cityhash<unsigned long,64ul>::__rotate[abi:ne180100](v17, 31) + v10;
  uint64_t v5 = std::__libcpp_relaxed_load[abi:ne180100]<long>(a1 + 16);
  uint64_t v18 = v5 + std::__libcpp_relaxed_load[abi:ne180100]<long>(a1 + a2 - 32);
  uint64_t v22 = v21 + std::__libcpp_relaxed_load[abi:ne180100]<long>(a1 + a2 - 8);
  uint64_t v14 = std::__murmur2_or_cityhash<unsigned long,64ul>::__rotate[abi:ne180100](v18 + v22, 52);
  uint64_t v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::__rotate[abi:ne180100](v18, 37);
  uint64_t v19 = v18 + std::__libcpp_relaxed_load[abi:ne180100]<long>(a1 + a2 - 24);
  uint64_t v12 = v11 + std::__murmur2_or_cityhash<unsigned long,64ul>::__rotate[abi:ne180100](v19, 7);
  uint64_t v20 = v19 + std::__libcpp_relaxed_load[abi:ne180100]<long>(a1 + a2 - 16);
  uint64_t v2 = std::__murmur2_or_cityhash<unsigned long,64ul>::__rotate[abi:ne180100](v20, 31);
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::__shift_mix[abi:ne180100](0x9AE16A3B2F90404FLL
                                                                               * (v8 + v14 + v2 + v12) - 0x3C5A37A36834CED9 * (v20 + v22 + v7));
  return 0x9AE16A3B2F90404FLL
       * std::__murmur2_or_cityhash<unsigned long,64ul>::__shift_mix[abi:ne180100](0xC3A5C85C97CB3127 * v6 + v7);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_16[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (a2 ^ (0x9DDFEA08EB382D69 * (a1 ^ a2)) ^ ((0x9DDFEA08EB382D69 * (a1 ^ a2)) >> 47))) ^ ((0x9DDFEA08EB382D69 * (a2 ^ (0x9DDFEA08EB382D69 * (a1 ^ a2)) ^ ((0x9DDFEA08EB382D69 * (a1 ^ a2)) >> 47))) >> 47));
}

uint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__weak_hash_len_32_with_seeds[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = std::__libcpp_relaxed_load[abi:ne180100]<long>(a1);
  uint64_t v5 = std::__libcpp_relaxed_load[abi:ne180100]<long>(a1 + 8);
  uint64_t v6 = std::__libcpp_relaxed_load[abi:ne180100]<long>(a1 + 16);
  uint64_t v3 = std::__libcpp_relaxed_load[abi:ne180100]<long>(a1 + 24);
  return std::__murmur2_or_cityhash<unsigned long,64ul>::__weak_hash_len_32_with_seeds[abi:ne180100](v7, v5, v6, v3, a2, a3);
}

uint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__rotate[abi:ne180100](uint64_t a1, int a2)
{
  if (a2) {
    return __ROR8__(a1, a2);
  }
  else {
    return a1;
  }
}

void *std::pair<unsigned long,unsigned long>::operator=[abi:ne180100](void *result, void *a2)
{
  std::string *result = *a2;
  result[1] = a2[1];
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__shift_mix[abi:ne180100](unint64_t a1)
{
  return a1 ^ (a1 >> 47);
}

uint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__rotate_by_at_least_1[abi:ne180100](uint64_t a1, char a2)
{
  return __ROR8__(a1, a2);
}

uint64_t std::__loadword[abi:ne180100]<unsigned int>(unsigned int *a1)
{
  return *a1;
}

uint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__weak_hash_len_32_with_seeds[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = a1;
  uint64_t v14 = a2;
  uint64_t v13 = a3;
  uint64_t v12 = a4;
  uint64_t v11 = a5 + a1;
  uint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::__rotate[abi:ne180100](a6 + a5 + a1 + a4, 21);
  uint64_t v9 = v11;
  v11 += v14 + v13;
  v10 += std::__murmur2_or_cityhash<unsigned long,64ul>::__rotate[abi:ne180100](v11, 44);
  uint64_t v8 = v11 + v12;
  uint64_t v7 = v10 + v9;
  std::pair<unsigned long,unsigned long>::pair[abi:ne180100]<unsigned long,unsigned long,0>(&v16, &v8, &v7);
  return v16;
}

void *std::pair<unsigned long,unsigned long>::pair[abi:ne180100]<unsigned long,unsigned long,0>(void *a1, void *a2, void *a3)
{
  return a1;
}

void *std::pair<unsigned long,unsigned long>::pair[abi:ne180100]<unsigned long,unsigned long,0>(void *result, void *a2, void *a3)
{
  std::string *result = *a2;
  result[1] = *a3;
  return result;
}

BOOL std::equal_to<std::string>::operator()[abi:ne180100]()
{
  return std::operator==[abi:ne180100]<std::allocator<char>>();
}

BOOL std::operator==[abi:ne180100]<std::allocator<char>>()
{
  size_t v5 = std::string::size[abi:ne180100]();
  if (v5 == std::string::size[abi:ne180100]())
  {
    std::string::data[abi:ne180100]();
    uint64_t v4 = v0;
    std::string::data[abi:ne180100]();
    uint64_t v3 = v1;
    if (std::string::__is_long[abi:ne180100]())
    {
      return std::char_traits<char>::compare[abi:ne180100](v4, v3, v5) == 0;
    }
    else
    {
      while (v5)
      {
        if (*v4 != *v3) {
          return 0;
        }
        --v5;
        ++v4;
        ++v3;
      }
      return 1;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t std::char_traits<char>::compare[abi:ne180100](const void *a1, const void *a2, size_t a3)
{
  return memcmp(a1, a2, a3);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,HSStage * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,HSStage * {__strong}>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v44 = a1;
  uint64_t v43 = a2;
  uint64_t v42 = a3;
  int v41 = a4;
  uint64_t v40 = a5;
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  unint64_t v39 = std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>::operator()[abi:ne180100]();
  unint64_t v38 = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::bucket_count[abi:ne180100]();
  char v37 = 0;
  if (v38)
  {
    uint64_t v35 = std::__constrain_hash[abi:ne180100](v39, v38);
    BOOL i = *(uint64_t **)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v35);
    if (i)
    {
      for (BOOL i = (uint64_t *)*i; ; BOOL i = (uint64_t *)*i)
      {
        BOOL v28 = 0;
        if (i)
        {
          BOOL v27 = 1;
          if (std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i) != v39)
          {
            unint64_t v5 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i);
            BOOL v27 = std::__constrain_hash[abi:ne180100](v5, v38) == v35;
          }
          BOOL v28 = v27;
        }
        if (!v28) {
          break;
        }
        if (std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i) == v39)
        {
          std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
          std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
          std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100](v6);
          if (std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>::operator()[abi:ne180100]()) {
            goto LABEL_21;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,HSStage * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,HSStage * {__strong}>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v39, v42, v41, v40, (uint64_t)v34);
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  float v26 = (float)(unint64_t)(*v7 + 1);
  float v25 = (float)v38;
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
  if (v26 > (float)(v25 * *v8) || !v38)
  {
    unint64_t v22 = 2 * v38;
    unint64_t v33 = v22 + !std::__is_hash_power2[abi:ne180100](v38);
    std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
    float v23 = (float)(unint64_t)(*v9 + 1);
    std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
    unint64_t v32 = (unint64_t)std::__math::ceil[abi:ne180100](v23 / *v10);
    uint64_t v24 = std::max[abi:ne180100]<unsigned long>(&v33, &v32);
    std::__hash_table<std::__hash_value_type<std::string,HSStage * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,HSStage * {__strong}>>>::__rehash_unique[abi:ne180100](a1, *v24);
    unint64_t v38 = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::bucket_count[abi:ne180100]();
    uint64_t v35 = std::__constrain_hash[abi:ne180100](v39, v38);
  }
  unint64_t v31 = *(uint64_t **)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v35);
  if (v31)
  {
    uint64_t v19 = *v31;
    *(void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]() = v19;
    uint64_t *v31 = std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  }
  else
  {
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    unint64_t v31 = v11;
    uint64_t v21 = *v11;
    *(void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]() = v21;
    std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    uint64_t *v31 = v12;
    *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v35) = v31;
    if (*(void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]())
    {
      std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
      std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
      uint64_t v20 = v13;
      uint64_t v14 = (uint64_t *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
      unint64_t v15 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100](*v14);
      uint64_t v16 = std::__constrain_hash[abi:ne180100](v15, v38);
      *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, vstd::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a9 + 16) = v20;
    }
  }
  BOOL i = (uint64_t *)std::unique_ptr<std::__hash_node<HSStage * {__strong},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::release[abi:ne180100]();
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  ++*v17;
  char v37 = 1;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)v34);
LABEL_21:
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](&v30, (uint64_t)i);
  std::pair<std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL>::pair[abi:ne180100]<std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL &,0>((uint64_t)&v45, &v30, &v37);
  return v45;
}

void std::__hash_table<std::__hash_value_type<std::string,HSStage * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,HSStage * {__strong}>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v21[2] = a6;
  v21[1] = a1;
  v21[0] = a2;
  uint64_t v20 = a3;
  uint64_t v19 = a4;
  uint64_t v18 = a5;
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v17 = v6;
  char v16 = 0;
  uint64_t v11 = std::allocator_traits<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::allocate[abi:ne180100](v6, 1uLL);
  std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::__hash_node_destructor[abi:ne180100]((uint64_t)&v15, v17, 0);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *>>>>::unique_ptr[abi:ne180100]<true,void>(a6, (uint64_t)v11, &v15);
  uint64_t v13 = (void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  uint64_t v14 = 0;
  std::__construct_at[abi:ne180100]<std::__hash_node<HSStage * {__strong},void *>,decltype(nullptr),unsigned long &,std::__hash_node<HSStage * {__strong},void *>*>(v13, (uint64_t)&v14, v21);
  uint64_t v10 = v17;
  uint64_t v7 = std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100](v7);
  std::__hash_key_value_types<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>::__get_ptr[abi:ne180100]();
  std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *>>>::construct[abi:ne180100]<std::pair<std::string const,HSStage * {__strong}>,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>,void>(v10, v8, v20, v19);
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::get_deleter[abi:ne180100]();
  *(unsigned char *)(v9 + 8) = 1;
}

void std::__hash_table<std::__hash_value_type<std::string,HSStage * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,HSStage * {__strong}>>>::__rehash_unique[abi:ne180100](uint64_t a1, unint64_t a2)
{
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *>>>>::reset[abi:ne180100](a1, 0);
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *>>>>::unique_ptr[abi:ne180100]<true,void>(uint64_t a1, uint64_t a2, __n128 *a3)
{
  return a1;
}

{
  void v5[2];

  v5[1] = a1;
  v5[0] = a2;
  std::__compressed_pair<std::__hash_node<HSStage * {__strong},void *> *,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::__compressed_pair[abi:ne180100]<std::__hash_node<HSStage * {__strong},void *> *&,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>(a1, v5, a3);
  return a1;
}

std::string *std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *>>>::construct[abi:ne180100]<std::pair<std::string const,HSStage * {__strong}>,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>,void>(uint64_t a1, std::string *a2, uint64_t a3, uint64_t *a4)
{
  return std::allocator<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *>>::construct[abi:ne180100]<std::pair<std::string const,HSStage * {__strong}>,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, a2, a3, a4);
}

std::string *std::allocator<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *>>::construct[abi:ne180100]<std::pair<std::string const,HSStage * {__strong}>,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, std::string *a2, uint64_t a3, uint64_t *a4)
{
  return std::pair<std::string const,HSStage * {__strong}>::pair[abi:ne180100]<std::string const&>(a2, *a4);
}

std::string *std::pair<std::string const,HSStage * {__strong}>::pair[abi:ne180100]<std::string const&>(std::string *a1, uint64_t a2)
{
  uint64_t v4 = a2;
  _ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEU8__strongP7HSStageEC1B8ne180100IJRS7_EJEJLm0EEJEEENS_21piecewise_construct_tERNS_5tupleIJDpT_EEERNSF_IJDpT0_EEENS_15__tuple_indicesIJXspT1_EEEENSO_IJXspT2_EEEE(a1, (uint64_t)&v4);
  return a1;
}

std::string *_ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEU8__strongP7HSStageEC1B8ne180100IJRS7_EJEJLm0EEJEEENS_21piecewise_construct_tERNS_5tupleIJDpT_EEERNSF_IJDpT0_EEENS_15__tuple_indicesIJXspT1_EEEENSO_IJXspT2_EEEE(std::string *a1, uint64_t a2)
{
  return a1;
}

std::string *_ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEU8__strongP7HSStageEC2B8ne180100IJRS7_EJEJLm0EEJEEENS_21piecewise_construct_tERNS_5tupleIJDpT_EEERNSF_IJDpT0_EEENS_15__tuple_indicesIJXspT1_EEEENSO_IJXspT2_EEEE(std::string *a1, uint64_t a2)
{
  uint64_t v2 = (const std::string *)std::get[abi:ne180100]<0ul,BOOL (*&&)(HSUtil::Encoder &,objc_object *)>(a2);
  std::string::basic_string(a1, v2);
  uint64_t result = a1;
  a1[1].__r_.__value_.__r.__words[0] = 0;
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,HSStage * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,HSStage * {__strong}>>>::__rehash<true>(uint64_t a1, unint64_t a2)
{
  v14[1] = a1;
  v14[0] = a2;
  if (a2 == 1)
  {
    v14[0] = 2;
  }
  else if ((v14[0] & (v14[0] - 1)) != 0)
  {
    v14[0] = std::__next_prime(v14[0]);
  }
  unint64_t v13 = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::bucket_count[abi:ne180100]();
  if (v14[0] <= v13)
  {
    if (v14[0] < v13)
    {
      if (std::__is_hash_power2[abi:ne180100](v13))
      {
        std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
        float v9 = (float)*v2;
        std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
        float v4 = std::__math::ceil[abi:ne180100](v9 / *v3);
        size_t prime = std::__next_hash_pow2[abi:ne180100]((unint64_t)v4);
      }
      else
      {
        std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
        float v8 = (float)*v5;
        std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
        float v7 = std::__math::ceil[abi:ne180100](v8 / *v6);
        size_t prime = std::__next_prime((unint64_t)v7);
      }
      size_t v12 = prime;
      v14[0] = *std::max[abi:ne180100]<unsigned long>(v14, &v12);
      if (v14[0] < v13) {
        std::__hash_table<std::__hash_value_type<std::string,HSStage * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,HSStage * {__strong}>>>::__do_rehash<true>(a1, v14[0]);
      }
    }
  }
  else
  {
    std::__hash_table<std::__hash_value_type<std::string,HSStage * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,HSStage * {__strong}>>>::__do_rehash<true>(a1, v14[0]);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,HSStage * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,HSStage * {__strong}>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::get_deleter[abi:ne180100]();
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  if (a2)
  {
    float v7 = std::allocator_traits<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::allocate[abi:ne180100](v2, a2);
    std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> *>>>::reset[abi:ne180100]<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> **,0>(a1, (uint64_t)v7);
  }
  else
  {
    std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> *>>>::reset[abi:ne180100]<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> **,0>(a1, 0);
  }
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::get_deleter[abi:ne180100]();
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  unint64_t *v3 = a2;
  if (a2)
  {
    for (unint64_t i = 0; i < a2; ++i)
      *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, i) = 0;
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    uint64_t v14 = v4;
    size_t v12 = *v4;
    if (*v4)
    {
      unint64_t v5 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)v12);
      uint64_t v10 = std::__constrain_hash[abi:ne180100](v5, a2);
      *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v1objc_storeStrong(&location, 0) = v14;
      uint64_t v9 = v10;
      __n128 v15 = v12;
      for (unint64_t j = *v12; j; unint64_t j = *v15)
      {
        unint64_t v6 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)j);
        uint64_t v11 = std::__constrain_hash[abi:ne180100](v6, a2);
        if (v11 == v9)
        {
          __n128 v15 = (void **)j;
        }
        else if (*(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v11))
        {
          HSUtil::Coder *v15 = (void *)*j;
          *unint64_t j = **(void **)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v11);
          **(void **)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v1MTRestZoneIntegrator_::clearMotion(this, 1) = j;
        }
        else
        {
          *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v1MTRestZoneIntegrator_::clearMotion(this, 1) = v15;
          __n128 v15 = (void **)j;
          uint64_t v9 = v11;
        }
      }
    }
  }
}

void std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> *>>>::reset[abi:ne180100]<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> **,0>(uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  unint64_t v5 = *v2;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> *>>::operator()[abi:ne180100](v4, v5);
  }
}

void std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> *>>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  uint64_t v4 = v2;
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  std::allocator_traits<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> *>>::deallocate[abi:ne180100](v4, a2, *v3);
}

void std::allocator_traits<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> *>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> *>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  unint64_t v5 = *v2;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *>>>::operator()[abi:ne180100](v4, v5);
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = *(void *)a1;
    std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100]((uint64_t)a2);
    std::__hash_key_value_types<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>::__get_ptr[abi:ne180100]();
    std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *>>>::destroy[abi:ne180100]<std::pair<std::string const,HSStage * {__strong}>,void,void>(v3, v2);
    std::__destroy_at[abi:ne180100]<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>,0>((uint64_t)a2);
  }
  if (a2) {
    std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *>>>::deallocate[abi:ne180100](*(void *)a1, a2, 1);
  }
}

std::string *std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *>>>::destroy[abi:ne180100]<std::pair<std::string const,HSStage * {__strong}>,void,void>(uint64_t a1, std::string *a2)
{
  return std::__destroy_at[abi:ne180100]<std::pair<std::string const,HSStage * {__strong}>,0>(a2);
}

void std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *>>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

std::string *std::__destroy_at[abi:ne180100]<std::pair<std::string const,HSStage * {__strong}>,0>(std::string *a1)
{
  return std::pair<std::string const,HSStage * {__strong}>::~pair(a1);
}

std::string *std::pair<std::string const,HSStage * {__strong}>::~pair(std::string *a1)
{
  return a1;
}

{
  objc_storeStrong((id *)&a1[1].__r_.__value_.__l.__data_, 0);
  std::string::~string(a1);
  return a1;
}

void std::allocator<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,HSStage * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,HSStage * {__strong}>>>::~__hash_table(uint64_t a1)
{
  return a1;
}

{
  void **v1;

  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  std::__hash_table<std::__hash_value_type<std::string,HSStage * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,HSStage * {__strong}>>>::__deallocate_node(a1, *v1);
  std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> *>>>::~unique_ptr[abi:ne180100](a1);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,HSStage * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,HSStage * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,HSStage * {__strong}>>>::__deallocate_node(uint64_t a1, void *a2)
{
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v7 = v2;
  while (a2)
  {
    unint64_t v6 = (void *)*a2;
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    unint64_t v5 = (void *)v3;
    std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100](v3);
    std::__hash_key_value_types<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>::__get_ptr[abi:ne180100]();
    std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *>>>::destroy[abi:ne180100]<std::pair<std::string const,HSStage * {__strong}>,void,void>(v7, v4);
    std::__destroy_at[abi:ne180100]<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>,0>((uint64_t)v5);
    std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *>>>::deallocate[abi:ne180100](v7, v5, 1);
    a2 = v6;
  }
}

uint64_t std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> *>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> *>>>::reset[abi:ne180100]();
  return a1;
}

void std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> *>>>::reset[abi:ne180100]()
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  uint64_t v3 = *v0;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v1 = 0;
  if (v3)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *> *>>::operator()[abi:ne180100](v2, v3);
  }
}

BOOL HSUtil::Encoder::encodeMapStart(HSUtil::Coder *a1, const CoderKey *a2, int a3)
{
  BOOL result = HSUtil::Coder::ok(a1);
  if (result)
  {
    HSUtil::Encoder::_encodeKey(a1, a2);
    BOOL result = HSUtil::Coder::ok(a1);
    if (result)
    {
      HSUtil::Encoder::_encodeMapStart((unint64_t *)a1, a3);
      return HSUtil::Coder::ok(a1);
    }
  }
  return result;
}

uint64_t std::unordered_map<std::string,HSStage * {__strong}>::begin[abi:ne180100]()
{
  uint64_t v1 = std::__hash_table<objc_object  {objcproto15HSStageObserver}* {__weak},HSUtil::ObjectHasher,std::equal_to<objc_object  {objcproto15HSStageObserver}*>,std::allocator<objc_object  {objcproto15HSStageObserver}*>>::begin();
  std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>>::__hash_map_iterator[abi:ne180100](&v2, v1);
  return v2;
}

void std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *>>::operator*[abi:ne180100]()
{
}

std::string *std::pair<std::string const,HSStage * {__strong}>::pair[abi:ne180100](std::string *a1, const std::string *a2)
{
  return a1;
}

{
  char *v2;
  std::string *result;

  std::string::basic_string(a1, a2);
  uint64_t v2 = a2[1].__r_.__value_.__l.__data_;
  BOOL result = a1;
  a1[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v2;
  return result;
}

uint64_t HSUtil::Encoder::offset(HSUtil::Encoder *this)
{
  return *((void *)this + 17);
}

uint64_t HSUtil::Encoder::revert(uint64_t this, unint64_t a2)
{
  uint64_t v2 = this;
  if (a2 <= -1 - *(void *)(this + 104))
  {
    unint64_t v6 = *(void *)(this + 104) + a2;
    while (!std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::empty[abi:ne180100]((void *)(v2 + 56))
         && *(void *)std::vector<HSUtil::Encoder::ContainerRecord>::back[abi:ne180100](v2 + 56) >= a2)
      std::vector<HSUtil::Encoder::ContainerRecord>::pop_back((void *)(v2 + 56));
    *(unsigned char *)(v2 + 112) = 0;
    this = std::vector<HSUtil::Encoder::ContainerRecord>::size[abi:ne180100]((void *)(v2 + 80));
    unint64_t v5 = this;
    for (unsigned int i = 0; i < v5; ++i)
    {
      this = std::vector<HSUtil::Encoder::KeyState>::operator[][abi:ne180100]((void *)(v2 + 80), i);
      if (*(_DWORD *)this)
      {
        if (*(void *)(std::vector<HSUtil::Encoder::KeyState>::operator[][abi:ne180100]((void *)(v2 + 80), i) + 8) < v6)
        {
          this = std::vector<HSUtil::Encoder::KeyState>::operator[][abi:ne180100]((void *)(v2 + 80), i);
          if (*(_DWORD *)this == 1) {
            *(unsigned char *)(v2 + 112) = 1;
          }
        }
        else
        {
          LODWORD(v3) = 0;
          this = std::vector<HSUtil::Encoder::KeyState>::operator[][abi:ne180100]((void *)(v2 + 80), i);
          *(_OWORD *)this = v3;
        }
      }
    }
    *(void *)(v2 + 136) = a2;
    *(_DWORD *)uint64_t v2 = 0;
  }
  else
  {
    *(_DWORD *)this = 14;
  }
  return this;
}

void **std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,HSStage * {__strong}>,void *> *>>::operator++[abi:ne180100](void **a1)
{
  return a1;
}

void HSUtil::Decoder::decodeMap(CoderKey *this@<X0>, const CoderKey *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v9 = a3;
  float v8 = this;
  uint64_t v7 = a2;
  if (HSUtil::Coder::fatalError((HSUtil::Coder *)this))
  {
    HSUtil::Decoder::Decoder(a3);
  }
  else
  {
    v6[0] = 0;
    v6[0] = *(void *)&this[4].var1;
    HSUtil::Decoder::_findKey(this, v6, v7);
    if (HSUtil::Coder::ok((HSUtil::Coder *)this))
    {
      HSUtil::Decoder::_readMap((HSUtil::Decoder *)this, v6, (uint64_t)v5);
      if (HSUtil::Coder::end((HSUtil::Coder *)this))
      {
        LODWORD(this->varobjc_storeStrong(&location, 0) = 13;
        HSUtil::Decoder::Decoder(a3);
      }
      else
      {
        *(void *)&this[4].int var1 = v6[0];
        HSUtil::Decoder::Decoder(a3, (uint64_t)v5);
      }
      HSUtil::Decoder::~Decoder((HSUtil::Decoder *)v5);
    }
    else
    {
      HSUtil::Decoder::Decoder(a3);
    }
  }
}

HSRecordingTypes::ConsumeFrame *HSRecordingTypes::ConsumeFrame::ConsumeFrame(HSRecordingTypes::ConsumeFrame *this)
{
  return this;
}

{
  HSRecordingTypes::ConsumeFrame *result;

  HSRecordingTypes::Frame::Frame((uint64_t)this, 3);
  BOOL result = this;
  *(void *)this = off_1428D8;
  *((void *)this + 4) = 0;
  return result;
}

void HSRecordingTypes::ConsumeFrame::encodeToMap(id *this, HSUtil::Encoder *a2)
{
}

uint64_t HSRecordingTypes::ConsumeFrame::decodeFromMap(HSRecordingTypes::ConsumeFrame *this, HSUtil::Decoder *a2)
{
  __n128 v15 = this;
  uint64_t v14 = a2;
  char v13 = HSRecordingTypes::Frame::decodeFromMap(this, a2) & 1;
  char v12 = v13;
  if (v13)
  {
    id v2 = HSUtil::Decoder::decodeObject(v14, (const CoderKey *)HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Key);
    unint64_t v3 = (void *)*((void *)this + 4);
    *((void *)this + 4) = v2;

    if (HSUtil::Coder::ok(v14))
    {
      char v16 = 1;
    }
    else
    {
      uint64_t v7 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRecordingTypes.h", v18);
      os_log_t v6 = &_os_log_default;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v17, (uint64_t)"virtual BOOL HSRecordingTypes::ConsumeFrame::decodeFromMap(Decoder &)", (uint64_t)v7, 205, (uint64_t)"coder");
        _os_log_error_impl(&def_411C8, v6, OS_LOG_TYPE_ERROR, "Assertion failed (%s @ %s:%ju): %s", v17, 0x2Au);
      }
      objc_storeStrong((id *)&v6, 0);
      char v16 = 0;
    }
  }
  else
  {
    uint64_t v11 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRecordingTypes.h", v20);
    os_log_t oslog = &_os_log_default;
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v19, (uint64_t)"virtual BOOL HSRecordingTypes::ConsumeFrame::decodeFromMap(Decoder &)", (uint64_t)v11, 201, (uint64_t)"br");
      _os_log_error_impl(&def_411C8, oslog, type, "Assertion failed (%s @ %s:%ju): %s", v19, 0x2Au);
    }
    objc_storeStrong((id *)&oslog, 0);
    char v16 = 0;
  }
  return v16 & 1;
}

void HSUtil::Encoder::encodeObject(HSUtil::Encoder *this, const CoderKey *a2, id obj)
{
  os_log_t v6 = this;
  unint64_t v5 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  unint64_t v3 = v6;
  HSUtil::Encoder::encodeKey(v6, v5);
  HSUtil::Encoder::encodeObject(v3, (objc_object *)location);
  objc_storeStrong(&location, 0);
}

void sub_B4E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, id location)
{
}

id HSUtil::Decoder::decodeObject(HSUtil::Decoder *this, const CoderKey *a2)
{
  float v8 = this;
  uint64_t v7 = a2;
  if (HSUtil::Coder::fatalError(this))
  {
    id v9 = 0;
  }
  else
  {
    unint64_t v6 = 0;
    unint64_t v6 = *((void *)this + 9);
    HSUtil::Decoder::_findKey((const CoderKey *)this, &v6, v7);
    if (HSUtil::Coder::ok(this))
    {
      id location = HSUtil::Decoder::_readObject(this, &v6);
      if (HSUtil::Coder::end(this))
      {
        *(_DWORD *)this = 13;
        id v9 = 0;
      }
      else
      {
        *((void *)this + 9) = v6;
        id v9 = location;
      }
      objc_storeStrong(&location, 0);
    }
    else
    {
      id v9 = 0;
    }
  }
  id v2 = v9;

  return v2;
}

HSUtil::Encoder *HSRecordingTypes::HeaderFrame::encodeToMap(HSRecordingTypes::HeaderFrame *this, HSUtil::Encoder *a2)
{
  return HSUtil::Encoder::encodeInt(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Key, *((int *)this + 10));
}

uint64_t HSRecordingTypes::HeaderFrame::decodeFromMap(HSRecordingTypes::HeaderFrame *this, HSUtil::Decoder *a2)
{
  unint64_t v22 = (HSRecordingTypes::Frame *)__chkstk_darwin(this, a2);
  uint64_t v21 = v2;
  uint64_t v4 = v22;
  char v20 = HSRecordingTypes::Frame::decodeFromMap(v22, v2) & 1;
  char v19 = v20;
  if (v20)
  {
    *((void *)v22 + 4) = HSUtil::Decoder::decodeUInt(v21, (const CoderKey *)HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Key);
    if (HSUtil::Coder::ok(v21))
    {
      BOOL v11 = 0;
      BOOL v11 = *((void *)v4 + 4) == 0;
      if (v11)
      {
        *((_DWORD *)v4 + 1objc_storeStrong(&location, 0) = HSUtil::Decoder::decodeInt(v21, (const CoderKey *)HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Key);
        if (HSUtil::Coder::ok(v21))
        {
          char v23 = 1;
        }
        else
        {
          unint64_t v6 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRecordingTypes.h", v25);
          os_log_t v5 = &_os_log_default;
          if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
          {
            __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v24, (uint64_t)"virtual BOOL HSRecordingTypes::HeaderFrame::decodeFromMap(Decoder &)", (uint64_t)v6, 106, (uint64_t)"coder");
            _os_log_error_impl(&def_411C8, v5, OS_LOG_TYPE_ERROR, "Assertion failed (%s @ %s:%ju): %s", v24, 0x2Au);
          }
          objc_storeStrong((id *)&v5, 0);
          char v23 = 0;
        }
      }
      else
      {
        uint64_t v10 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRecordingTypes.h", v27);
        os_log_t v9 = &_os_log_default;
        os_log_type_t v8 = OS_LOG_TYPE_ERROR;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v26, (uint64_t)"virtual BOOL HSRecordingTypes::HeaderFrame::decodeFromMap(Decoder &)", (uint64_t)v10, 103, (uint64_t)"version <= Version");
          _os_log_error_impl(&def_411C8, v9, v8, "Assertion failed (%s @ %s:%ju): %s", v26, 0x2Au);
        }
        objc_storeStrong((id *)&v9, 0);
        char v23 = 0;
      }
    }
    else
    {
      uint64_t v14 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRecordingTypes.h", v29);
      os_log_t v13 = &_os_log_default;
      os_log_type_t v12 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v28, (uint64_t)"virtual BOOL HSRecordingTypes::HeaderFrame::decodeFromMap(Decoder &)", (uint64_t)v14, 101, (uint64_t)"coder");
        _os_log_error_impl(&def_411C8, v13, v12, "Assertion failed (%s @ %s:%ju): %s", v28, 0x2Au);
      }
      objc_storeStrong((id *)&v13, 0);
      char v23 = 0;
    }
  }
  else
  {
    uint64_t v18 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRecordingTypes.h", v31);
    os_log_t oslog = &_os_log_default;
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v30, (uint64_t)"virtual BOOL HSRecordingTypes::HeaderFrame::decodeFromMap(Decoder &)", (uint64_t)v18, 98, (uint64_t)"br");
      _os_log_error_impl(&def_411C8, oslog, type, "Assertion failed (%s @ %s:%ju): %s", v30, 0x2Au);
    }
    objc_storeStrong((id *)&oslog, 0);
    char v23 = 0;
  }
  return v23 & 1;
}

uint64_t *std::vector<std::unique_ptr<EncoderState>>::~vector[abi:ne180100](uint64_t *a1)
{
  return a1;
}

{
  uint64_t *v3[2];

  v3[1] = a1;
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](v3, (uint64_t)a1);
  std::vector<std::unique_ptr<EncoderState>>::__destroy_vector::operator()[abi:ne180100](v3);
  return a1;
}

void std::vector<std::unique_ptr<EncoderState>>::__destroy_vector::operator()[abi:ne180100](uint64_t **a1)
{
  if (**a1)
  {
    std::vector<std::unique_ptr<EncoderState>>::__clear[abi:ne180100](*a1);
    std::vector<HSUtil::CoderKey const*>::__annotate_delete[abi:ne180100]();
    std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
    uint64_t v4 = v1;
    unint64_t v3 = (void *)**a1;
    uint64_t v2 = std::vector<HSUtil::CoderKey const*>::capacity[abi:ne180100](*a1);
    std::allocator_traits<std::allocator<std::unique_ptr<EncoderState>>>::deallocate[abi:ne180100](v4, v3, v2);
  }
}

uint64_t std::vector<std::unique_ptr<EncoderState>>::__clear[abi:ne180100](uint64_t *a1)
{
  return std::vector<std::unique_ptr<EncoderState>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1);
}

void std::allocator_traits<std::allocator<std::unique_ptr<EncoderState>>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

uint64_t std::vector<std::unique_ptr<EncoderState>>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v5 = result;
  for (uint64_t i = *(void *)(result + 8); a2 != i; i -= 8)
  {
    std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
    uint64_t v4 = v2;
    std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
    BOOL result = std::allocator_traits<std::allocator<std::unique_ptr<EncoderState>>>::destroy[abi:ne180100]<std::unique_ptr<EncoderState>,void>(v4, v3);
  }
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t std::allocator_traits<std::allocator<std::unique_ptr<EncoderState>>>::destroy[abi:ne180100]<std::unique_ptr<EncoderState>,void>(uint64_t a1, uint64_t a2)
{
  return std::allocator<std::unique_ptr<EncoderState>>::destroy[abi:ne180100](a1, a2);
}

uint64_t std::allocator<std::unique_ptr<EncoderState>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return std::unique_ptr<EncoderState>::~unique_ptr[abi:ne180100](a2);
}

void std::allocator<std::unique_ptr<EncoderState>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void *std::vector<std::unique_ptr<EncoderState>>::vector[abi:ne180100](void *a1)
{
  return a1;
}

{
  *a1 = 0;
  a1[1] = 0;
  std::__compressed_pair<HSUtil::Encoder::ContainerRecord *>::__compressed_pair[abi:ne180100]<decltype(nullptr),std::__default_init_tag>(a1 + 2);
  return a1;
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN6HSUtil6BufferENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  os_log_t v9 = a2;
  uint64_t v8 = a1;
  std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::Buffer>>>::__allocation_guard[abi:ne180100]<std::allocator<HSUtil::Buffer>>((uint64_t)v7, 1);
  uint64_t v2 = (void *)std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v7);
  _ZNSt3__120__shared_ptr_emplaceIN6HSUtil6BufferENS_9allocatorIS2_EEEC1B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  uint64_t v6 = std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__release_ptr[abi:ne180100]((uint64_t)v7);
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::shared_ptr<HSUtil::FileDescriptor>::__create_with_control_block[abi:ne180100]<HSUtil::FileDescriptor,std::__shared_ptr_emplace<HSUtil::FileDescriptor>>(v3, v6, a2);
  return std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::Buffer>>>::~__allocation_guard[abi:ne180100]((uint64_t)v7);
}

void sub_B5ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, _Unwind_Exception *exception_object)
{
  std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::Buffer>>>::~__allocation_guard[abi:ne180100](v15 - 40);
  _Unwind_Resume(a1);
}

uint64_t std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::Buffer>>>::__allocation_guard[abi:ne180100]<std::allocator<HSUtil::Buffer>>(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  void *v2;
  uint64_t result;

  std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>(a1);
  *(void *)(a1 + 8) = a2;
  uint64_t v2 = std::allocator_traits<std::allocator<std::__shared_ptr_emplace<HSUtil::Buffer>>>::allocate[abi:ne180100](a1, *(void *)(a1 + 8));
  BOOL result = a1;
  *(void *)(a1 + std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a9 + 16) = v2;
  return result;
}

void *_ZNSt3__120__shared_ptr_emplaceIN6HSUtil6BufferENS_9allocatorIS2_EEEC1B8ne180100IJES4_Li0EEES4_DpOT_(void *a1)
{
  return a1;
}

uint64_t std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::Buffer>>>::~__allocation_guard[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::Buffer>>>::__destroy[abi:ne180100](a1);
  return a1;
}

void *std::allocator_traits<std::allocator<std::__shared_ptr_emplace<HSUtil::Buffer>>>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  return std::allocator<std::__shared_ptr_emplace<HSUtil::Buffer>>::allocate[abi:ne180100](a1, a2);
}

void *std::allocator<std::__shared_ptr_emplace<HSUtil::Buffer>>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 > std::allocator_traits<std::allocator<std::__shared_ptr_emplace<HSUtil::Buffer>>>::max_size[abi:ne180100]<std::allocator<std::__shared_ptr_emplace<HSUtil::Buffer>>,void>()) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return std::__libcpp_allocate[abi:ne180100](96 * a2, (std::align_val_t)8uLL);
}

uint64_t std::allocator_traits<std::allocator<std::__shared_ptr_emplace<HSUtil::Buffer>>>::max_size[abi:ne180100]<std::allocator<std::__shared_ptr_emplace<HSUtil::Buffer>>,void>()
{
  return std::allocator<std::__shared_ptr_emplace<HSUtil::Buffer>>::max_size[abi:ne180100]();
}

uint64_t std::allocator<std::__shared_ptr_emplace<HSUtil::Buffer>>::max_size[abi:ne180100]()
{
  return 0x2AAAAAAAAAAAAAALL;
}

void *_ZNSt3__120__shared_ptr_emplaceIN6HSUtil6BufferENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(void *a1)
{
  uint64_t v5 = a1;
  std::__shared_weak_count::__shared_weak_count[abi:ne180100]((uint64_t)a1, 0);
  *a1 = off_142948;
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::_Storage::_Storage[abi:ne180100]((uint64_t)(a1 + 3));
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  _ZNSt3__116allocator_traitsINS_9allocatorIN6HSUtil6BufferEEEE9constructB8ne180100IS3_JEvEEvRS4_PT_DpOT0_((uint64_t)v4, v1);
  return a1;
}

void sub_B5D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, int a11, int a12, _Unwind_Exception *exception_object)
{
}

HSUtil::Buffer *_ZNSt3__116allocator_traitsINS_9allocatorIN6HSUtil6BufferEEEE9constructB8ne180100IS3_JEvEEvRS4_PT_DpOT0_(uint64_t a1, HSUtil::Buffer *a2)
{
  return std::allocator<HSUtil::Buffer>::construct[abi:ne180100]<HSUtil::Buffer>(a1, a2);
}

std::__shared_weak_count *std::__shared_ptr_emplace<HSUtil::Buffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  return a1;
}

{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_142948;
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::_Storage::~_Storage[abi:ne180100]((uint64_t)&a1[1]);
  std::__shared_weak_count::~__shared_weak_count(a1);
  return a1;
}

void std::__shared_ptr_emplace<HSUtil::Buffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
}

void std::__shared_ptr_emplace<HSUtil::Buffer>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<HSUtil::Buffer>::__on_zero_shared_weak(uint64_t a1)
{
  uint64_t v4 = a1;
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v3);
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::_Storage::~_Storage[abi:ne180100](a1 + 24);
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  std::allocator_traits<std::allocator<std::__shared_ptr_emplace<HSUtil::Buffer>>>::deallocate[abi:ne180100]((uint64_t)&v3, v1, 1);
}

HSUtil::Buffer *std::allocator<HSUtil::Buffer>::construct[abi:ne180100]<HSUtil::Buffer>(uint64_t a1, HSUtil::Buffer *a2)
{
  return HSUtil::Buffer::Buffer(a2);
}

void std::__shared_ptr_emplace<HSUtil::Buffer>::__on_zero_shared_impl[abi:ne180100]<std::allocator<HSUtil::Buffer>,0>(uint64_t a1)
{
  uint64_t v3 = a1;
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::allocator_traits<std::allocator<HSUtil::Buffer>>::destroy[abi:ne180100]<HSUtil::Buffer,void>((uint64_t)&v2, v1);
}

void std::allocator_traits<std::allocator<HSUtil::Buffer>>::destroy[abi:ne180100]<HSUtil::Buffer,void>(uint64_t a1, HSUtil::Buffer *a2)
{
}

void std::allocator<HSUtil::Buffer>::destroy[abi:ne180100](uint64_t a1, HSUtil::Buffer *a2)
{
}

void std::allocator_traits<std::allocator<std::__shared_ptr_emplace<HSUtil::Buffer>>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::allocator<std::__shared_ptr_emplace<HSUtil::Buffer>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::Buffer>>>::__destroy[abi:ne180100](uint64_t a1)
{
  if (*(void *)(a1 + 16)) {
    std::allocator_traits<std::allocator<std::__shared_ptr_emplace<HSUtil::Buffer>>>::deallocate[abi:ne180100](a1, *(void **)(a1 + 16), *(void *)(a1 + 8));
  }
}

uint64_t *std::shared_ptr<HSUtil::IO::Writable>::shared_ptr[abi:ne180100]<HSUtil::Buffer,void>(uint64_t *a1, void *a2)
{
  return a1;
}

{
  std::shared_ptr<HSUtil::IO::Writable>::shared_ptr[abi:ne180100]<HSUtil::Buffer,void>(a1, a2);
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = 0;
  if (*a2) {
    uint64_t v3 = *a2 + 8;
  }
  *a1 = v3;
  a1[1] = a2[1];
  if (a1[1]) {
    std::__shared_weak_count::__add_shared[abi:ne180100](a1[1]);
  }
  return a1;
}

uint64_t *std::shared_ptr<HSUtil::IO::Writable>::shared_ptr[abi:ne180100]<HSUtil::Buffer,void>(uint64_t *result, void *a2)
{
  uint64_t v2 = 0;
  if (*a2) {
    uint64_t v2 = *a2 + 8;
  }
  std::string *result = v2;
  result[1] = a2[1];
  *a2 = 0;
  a2[1] = 0;
  return result;
}

void *std::shared_ptr<HSUtil::IO::Readable>::shared_ptr[abi:ne180100]<HSUtil::IO::Writable>(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  *a1 = a3;
  a1[1] = *(void *)(a2 + 8);
  if (a1[1]) {
    std::__shared_weak_count::__add_shared[abi:ne180100](a1[1]);
  }
  return a1;
}

void *std::vector<std::unique_ptr<EncoderState>>::__construct_one_at_end[abi:ne180100]<std::unique_ptr<EncoderState>>(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::_ConstructTransaction::_ConstructTransaction[abi:ne180100](&v6, a1, 1);
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v5 = v2;
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  std::allocator_traits<std::allocator<std::unique_ptr<EncoderState>>>::construct[abi:ne180100]<std::unique_ptr<EncoderState>,std::unique_ptr<EncoderState>,void>(v5, v3, v8);
  v7 += 8;
  return std::vector<HSUtil::Encoder::ContainerRecord>::_ConstructTransaction::~_ConstructTransaction[abi:ne180100](&v6);
}

void sub_B6298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, _Unwind_Exception *exception_object, uint64_t a15)
{
}

uint64_t std::vector<std::unique_ptr<EncoderState>>::__push_back_slow_path<std::unique_ptr<EncoderState>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v15 = a1;
  uint64_t v14 = a2;
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v13 = v2;
  uint64_t v3 = std::vector<std::atomic<HSUtil::CoderKey const*>>::size[abi:ne180100](a1);
  unint64_t v9 = std::vector<std::unique_ptr<EncoderState>>::__recommend[abi:ne180100](a1, v3 + 1);
  uint64_t v4 = std::vector<std::atomic<HSUtil::CoderKey const*>>::size[abi:ne180100](a1);
  std::__split_buffer<std::unique_ptr<HSUtil::EncoderBuf>>::__split_buffer(v11, v9, v4, v13);
  uint64_t v10 = v13;
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  std::allocator_traits<std::allocator<std::unique_ptr<EncoderState>>>::construct[abi:ne180100]<std::unique_ptr<EncoderState>,std::unique_ptr<EncoderState>,void>(v10, v5, v14);
  v12 += 8;
  std::vector<std::unique_ptr<EncoderState>>::__swap_out_circular_buffer(a1, v11);
  uint64_t v7 = a1[1];
  std::__split_buffer<std::unique_ptr<EncoderState>>::~__split_buffer(v11);
  return v7;
}

void sub_B6384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, _Unwind_Exception *exception_object, void *a16)
{
}

void *std::allocator_traits<std::allocator<std::unique_ptr<EncoderState>>>::construct[abi:ne180100]<std::unique_ptr<EncoderState>,std::unique_ptr<EncoderState>,void>(uint64_t a1, void *a2, uint64_t a3)
{
  return std::allocator<std::unique_ptr<EncoderState>>::construct[abi:ne180100]<std::unique_ptr<EncoderState>,std::unique_ptr<EncoderState>>(a1, a2, a3);
}

void *std::allocator<std::unique_ptr<EncoderState>>::construct[abi:ne180100]<std::unique_ptr<EncoderState>,std::unique_ptr<EncoderState>>(uint64_t a1, void *a2, uint64_t a3)
{
  return std::unique_ptr<EncoderState>::unique_ptr[abi:ne180100](a2, a3);
}

void *std::unique_ptr<EncoderState>::unique_ptr[abi:ne180100](void *a1, uint64_t a2)
{
  return a1;
}

{
  void v4[3];

  void v4[2] = a1;
  v4[1] = a2;
  v4[0] = std::unique_ptr<std::__hash_node<HSStage * {__strong},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::release[abi:ne180100]();
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  std::__compressed_pair<unsigned long,std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *>>::__compressed_pair[abi:ne180100]<unsigned long &,std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> * const&>(a1, v4);
  return a1;
}

unint64_t std::vector<std::unique_ptr<EncoderState>>::__recommend[abi:ne180100](void *a1, uint64_t a2)
{
  v7[1] = a1;
  v7[0] = a2;
  unint64_t v6 = std::vector<std::unique_ptr<EncoderState>>::max_size((uint64_t)a1);
  if (v7[0] > v6) {
    std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v5 = std::vector<HSUtil::CoderKey const*>::capacity[abi:ne180100](a1);
  if (v5 >= v6 / 2) {
    return v6;
  }
  uint64_t v4 = 2 * v5;
  return *std::max[abi:ne180100]<unsigned long>(&v4, v7);
}

void std::vector<std::unique_ptr<EncoderState>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v15 = a1;
  uint64_t v14 = a2;
  std::vector<HSUtil::CoderKey const*>::__annotate_delete[abi:ne180100]();
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v7 = v2;
  std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>::reverse_iterator[abi:ne180100](v12, a1[1]);
  std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>::reverse_iterator[abi:ne180100](v11, *a1);
  std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>::reverse_iterator[abi:ne180100](v10, v14[1]);
  v13[0] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<EncoderState>>,std::reverse_iterator<std::unique_ptr<EncoderState>*>,std::reverse_iterator<std::unique_ptr<EncoderState>*>,std::reverse_iterator<std::unique_ptr<EncoderState>*>>(v7, v12[0], v12[1], v11[0], v11[1], v10[0], v10[1]);
  v13[1] = v3;
  uint64_t v4 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)v13);
  v14[1] = v4;
  std::swap[abi:ne180100]<HSUtil::Encoder::ContainerRecord *>(a1, v14 + 1);
  std::swap[abi:ne180100]<HSUtil::Encoder::ContainerRecord *>(a1 + 1, v14 + 2);
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v8 = v5;
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  std::swap[abi:ne180100]<HSUtil::Encoder::ContainerRecord *>(v8, v6);
  *uint64_t v14 = v14[1];
  std::vector<std::atomic<HSUtil::CoderKey const*>>::size[abi:ne180100](a1);
  std::allocator<HSUtil::CoderKey const*>::destroy[abi:ne180100]();
}

void **std::__split_buffer<std::unique_ptr<EncoderState>>::~__split_buffer(void **a1)
{
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  std::__split_buffer<std::unique_ptr<EncoderState>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
  {
    uint64_t v2 = std::__split_buffer<HSUtil::Encoder::ContainerRecord>::__alloc[abi:ne180100]((uint64_t)a1);
    uint64_t v3 = *a1;
    uint64_t v4 = std::__split_buffer<std::unique_ptr<HSUtil::EncoderBuf>>::capacity[abi:ne180100](a1);
    std::allocator_traits<std::allocator<std::unique_ptr<EncoderState>>>::deallocate[abi:ne180100](v2, v3, v4);
  }
  return a1;
}

uint64_t std::vector<std::unique_ptr<EncoderState>>::max_size(uint64_t a1)
{
  v3[1] = a1;
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  v3[0] = std::allocator_traits<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::max_size[abi:ne180100]<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>,void>();
  uint64_t v2 = std::numeric_limits<long>::max[abi:ne180100]();
  return *std::min[abi:ne180100]<unsigned long>(v3, &v2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<EncoderState>>,std::reverse_iterator<std::unique_ptr<EncoderState>*>,std::reverse_iterator<std::unique_ptr<EncoderState>*>,std::reverse_iterator<std::unique_ptr<EncoderState>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v18[0] = a2;
  v18[1] = a3;
  v17[0] = a4;
  v17[1] = a5;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + MTRestZoneIntegrator_::clearMotion(this, 1) = a7;
  uint64_t v15 = a1;
  long long v14 = v16;
  std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>>::_AllocatorDestroyRangeReverse[abi:ne180100](&v12, a1, (uint64_t)&v14, (uint64_t)&v16);
  std::__make_exception_guard[abi:ne180100]<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>>>(&v12, v13);
  while (std::operator!=[abi:ne180100]<HSUtil::Encoder::ContainerRecord *,HSUtil::Encoder::ContainerRecord *>((uint64_t)v18, (uint64_t)v17))
  {
    uint64_t v9 = v15;
    std::__to_address[abi:ne180100]<std::reverse_iterator<std::unique_ptr<EncoderState> *>,void>((uint64_t)&v16);
    uint64_t v10 = v7;
    uint64_t v11 = std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>::operator*[abi:ne180100]((uint64_t)v18);
    std::allocator_traits<std::allocator<std::unique_ptr<EncoderState>>>::construct[abi:ne180100]<std::unique_ptr<EncoderState>,std::unique_ptr<EncoderState>,void>(v9, v10, v11);
    std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>::operator++[abi:ne180100]((uint64_t)v18);
    std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>::operator++[abi:ne180100]((uint64_t)&v16);
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>>>::__complete[abi:ne180100]((uint64_t)v13);
  long long v19 = v16;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<EncoderState>>,std::reverse_iterator<std::unique_ptr<EncoderState>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v19;
}

void std::__to_address[abi:ne180100]<std::reverse_iterator<std::unique_ptr<EncoderState> *>,void>(uint64_t a1)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<EncoderState>>,std::reverse_iterator<std::unique_ptr<EncoderState>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<EncoderState>>,std::reverse_iterator<std::unique_ptr<EncoderState>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__to_address_helper<std::reverse_iterator<std::unique_ptr<EncoderState> *>,void>::__call[abi:ne180100](uint64_t a1)
{
}

BOOL std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<EncoderState>>,std::reverse_iterator<std::unique_ptr<EncoderState>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v3 = *(void *)a1;
  std::reverse_iterator<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>>::reverse_iterator[abi:ne180100]((uint64_t)v5, **(void **)(a1 + 16), *(void *)(*(void *)(a1 + 16) + 8));
  std::reverse_iterator<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>>::reverse_iterator[abi:ne180100]((uint64_t)v4, **(void **)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 8));
  return std::__allocator_destroy[abi:ne180100]<std::allocator<std::unique_ptr<EncoderState>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<EncoderState>*>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<EncoderState>*>>>(v3, (uint64_t)v5, (uint64_t)v4);
}

BOOL std::__allocator_destroy[abi:ne180100]<std::allocator<std::unique_ptr<EncoderState>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<EncoderState>*>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<EncoderState>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  while (1)
  {
    BOOL result = std::operator!=[abi:ne180100]<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>>(a2, a3);
    if (!result) {
      break;
    }
    std::__to_address[abi:ne180100]<std::reverse_iterator<std::reverse_iterator<std::unique_ptr<EncoderState> *>>,void>(a2);
    std::allocator_traits<std::allocator<std::unique_ptr<EncoderState>>>::destroy[abi:ne180100]<std::unique_ptr<EncoderState>,void>(a1, v4);
    std::reverse_iterator<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>>::operator++[abi:ne180100](a2);
  }
  return result;
}

void std::__to_address[abi:ne180100]<std::reverse_iterator<std::reverse_iterator<std::unique_ptr<EncoderState> *>>,void>(uint64_t a1)
{
}

void std::__to_address_helper<std::reverse_iterator<std::reverse_iterator<std::unique_ptr<EncoderState> *>>,void>::__call[abi:ne180100](uint64_t a1)
{
}

uint64_t std::__split_buffer<std::unique_ptr<EncoderState>>::clear[abi:ne180100](uint64_t a1)
{
  return std::__split_buffer<std::unique_ptr<EncoderState>>::__destruct_at_end[abi:ne180100](a1, *(void *)(a1 + 8));
}

uint64_t std::__split_buffer<std::unique_ptr<EncoderState>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return std::__split_buffer<std::unique_ptr<EncoderState>>::__destruct_at_end[abi:ne180100](a1, a2);
}

uint64_t std::__split_buffer<std::unique_ptr<EncoderState>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v4 = result;
  while (a2 != *(void *)(v4 + 16))
  {
    uint64_t v3 = std::__split_buffer<HSUtil::Encoder::ContainerRecord>::__alloc[abi:ne180100](v4);
    *(void *)(v4 + 16) -= 8;
    std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
    BOOL result = std::allocator_traits<std::allocator<std::unique_ptr<EncoderState>>>::destroy[abi:ne180100]<std::unique_ptr<EncoderState>,void>(v3, v2);
  }
  return result;
}

uint64_t std::vector<std::unique_ptr<EncoderState>>::__make_iter[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](&v3, a2);
  return v3;
}

void sub_B6F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, _Unwind_Exception *exception_object, uint64_t a15)
{
}

void sub_B701C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, _Unwind_Exception *exception_object, void *a16)
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<-[HSRecordingStage _stopRecording]::Region>>(uint64_t a1, unint64_t a2)
{
  return std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocate[abi:ne180100](a1, a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<-[HSRecordingStage _stopRecording]::Region>,std::reverse_iterator<-[HSRecordingStage _stopRecording]::Region*>,std::reverse_iterator<-[HSRecordingStage _stopRecording]::Region*>,-[HSRecordingStage _stopRecording]::Region,void>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return std::move[abi:ne180100]<std::reverse_iterator<-[HSRecordingStage _stopRecording]::Region *>,std::reverse_iterator<[(HSRecordingStage *)a2 _stopRecording];
}

uint64_t std::move[abi:ne180100]<std::reverse_iterator<-[HSRecordingStage _stopRecording]::Region *>,std::reverse_iterator<-[HSRecordingStage _stopRecording]::Region *>>(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v13 = a1;
  unint64_t v14 = a2;
  uint64_t v11 = a3;
  uint64_t v12 = a4;
  uint64_t v9 = a5;
  uint64_t v10 = a6;
  std::__move[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<-[HSRecordingStage _stopRecording]::Region *>,std::reverse_iterator<-[HSRecordingStage _stopRecording]::Region *>,std::reverse_iterator<[(HSRecordingStage *)a1 _stopRecording];
  return v8;
}

_OWORD *std::__move[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<-[HSRecordingStage _stopRecording]::Region *>,std::reverse_iterator<-[HSRecordingStage _stopRecording]::Region *>,std::reverse_iterator<-[HSRecordingStage _stopRecording]::Region *>>@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X8>)
{
  return std::__dispatch_copy_or_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial,std::reverse_iterator<-[HSRecordingStage _stopRecording]::Region *>,std::reverse_iterator<-[HSRecordingStage _stopRecording]::Region *>,std::reverse_iterator<[(HSRecordingStage *)a1 _stopRecording];
}

_OWORD *std::__dispatch_copy_or_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial,std::reverse_iterator<-[HSRecordingStage _stopRecording]::Region *>,std::reverse_iterator<-[HSRecordingStage _stopRecording]::Region *>,std::reverse_iterator<-[HSRecordingStage _stopRecording]::Region *>>@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X8>)
{
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::reverse_iterator<-[HSRecordingStage _stopRecording]::Region *>,std::reverse_iterator<-[HSRecordingStage _stopRecording]::Region *>,std::reverse_iterator<[(HSRecordingStage *)a1 _stopRecording];
}

_OWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::reverse_iterator<-[HSRecordingStage _stopRecording]::Region *>,std::reverse_iterator<-[HSRecordingStage _stopRecording]::Region *>,std::reverse_iterator<-[HSRecordingStage _stopRecording]::Region *>,0>@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X8>)
{
  v26.n128_u64[0] = a1;
  v26.n128_u64[1] = a2;
  *(void *)&long long v25 = a3;
  *((void *)&v25 + MTRestZoneIntegrator_::clearMotion(this, 1) = a4;
  *(void *)&long long v24 = a5;
  *((void *)&v24 + MTRestZoneIntegrator_::clearMotion(this, 1) = a6;
  __n128 v22 = v26;
  long long v21 = v25;
  std::__unwrap_range[abi:ne180100]<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>>(a1, a2, a3, a4, v23);
  long long v18 = v23[0];
  long long v17 = v23[1];
  v14[1] = v24;
  std::__unwrap_iter[abi:ne180100]<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::__unwrap_iter_impl<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,false>,0>();
  unint64_t v15 = v7;
  unint64_t v16 = v8;
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>>(v18, *((uint64_t *)&v18 + 1), v17, *((uint64_t *)&v17 + 1), v7, v8, &v19);
  __n128 v13[2] = v26;
  v13[1] = v19;
  *(void *)&v14[0] = std::__rewrap_range[abi:ne180100]<std::reverse_iterator<-[HSRecordingStage _stopRecording]::Region *>,std::reverse_iterator<[(HSRecordingStage *)v26.n128_i64[0] _stopRecording];
  *((void *)&v14[0] + MTRestZoneIntegrator_::clearMotion(this, 1) = v9;
  v13[0].n128_u64[0] = std::__rewrap_iter[abi:ne180100]<std::reverse_iterator<-[HSRecordingStage _stopRecording]::Region *>,std::reverse_iterator<-[HSRecordingStage _stopRecording]::Region *>,std::__unwrap_iter_impl<std::reverse_iterator<[(HSRecordingStage *)v24 _stopRecording];
  v13[0].n128_u64[1] = v10;
  return std::make_pair[abi:ne180100]<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>>(v14, v13, a7);
}

uint64_t std::__rewrap_range[abi:ne180100]<std::reverse_iterator<-[HSRecordingStage _stopRecording]::Region *>,std::reverse_iterator<-[HSRecordingStage _stopRecording]::Region *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__rewrap_iter[abi:ne180100]<std::reverse_iterator<-[HSRecordingStage _stopRecording]::Region *>,std::reverse_iterator<-[HSRecordingStage _stopRecording]::Region *>,std::__unwrap_iter_impl<std::reverse_iterator<[(HSRecordingStage *)a1 _stopRecording];
}

uint64_t std::__rewrap_iter[abi:ne180100]<std::reverse_iterator<-[HSRecordingStage _stopRecording]::Region *>,std::reverse_iterator<-[HSRecordingStage _stopRecording]::Region *>,std::__unwrap_iter_impl<std::reverse_iterator<-[HSRecordingStage _stopRecording]::Region *>,false>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__unwrap_iter_impl<std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>,false>::__rewrap[abi:ne180100](a1, a2, a3);
}

BOOL HSUtil::Encoder::_encodeCodable<HSRecordingTypes::Frame>(HSUtil::Encoder *a1, HSRecordingTypes::Frame *a2)
{
  char v4 = HSRecordingTypes::Frame::encode(a2, a1) & 1;
  BOOL result = HSUtil::Coder::ok(a1);
  if (result && (v4 & 1) == 0) {
    *(_DWORD *)a1 = 10;
  }
  return result;
}

uint64_t HSRecordingTypes::Frame::encode(HSRecordingTypes::Frame *this, HSUtil::Encoder *a2)
{
  return 1;
}

{
  return HSRecordingTypes::Frame::encode(this, a2);
}

void __cxx_global_var_init_56()
{
  {
    {
      HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
    }
  }
}

void __cxx_global_var_init_2_53(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_53(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_48(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_48(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_48(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_48(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_49(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void sub_B8210()
{
  _Unwind_Resume(v0);
}

uint64_t std::vector<objc_object * {__strong}>::push_back[abi:ne180100](uint64_t *a1, id *a2)
{
  unint64_t v5 = a1[1];
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  if (v5 >= *v2)
  {
    uint64_t result = std::vector<objc_object * {__strong}>::__push_back_slow_path<objc_object * const {__strong}&>(a1, a2);
    uint64_t v6 = result;
  }
  else
  {
    uint64_t result = (uint64_t)std::vector<objc_object * {__strong}>::__construct_one_at_end[abi:ne180100]<objc_object * const {__strong}&>((uint64_t)a1, a2);
    uint64_t v6 = v5 + 8;
  }
  a1[1] = v6;
  return result;
}

uint64_t *std::vector<objc_object * {__strong}>::~vector[abi:ne180100](uint64_t *a1)
{
  return a1;
}

{
  uint64_t *v3[2];

  v3[1] = a1;
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](v3, (uint64_t)a1);
  std::vector<objc_object * {__strong}>::__destroy_vector::operator()[abi:ne180100](v3);
  return a1;
}

void *std::vector<objc_object * {__strong}>::vector[abi:ne180100](void *a1)
{
  return a1;
}

{
  *a1 = 0;
  a1[1] = 0;
  std::__compressed_pair<HSUtil::Encoder::ContainerRecord *>::__compressed_pair[abi:ne180100]<decltype(nullptr),std::__default_init_tag>(a1 + 2);
  return a1;
}

void sub_B83E8(uint64_t a1, int a2)
{
  *(void *)(v2 - 24) = a1;
  *(_DWORD *)(v2 - 28) = a2;
  objc_storeStrong((id *)(v2 - 8), 0);
  _Unwind_Resume(*(_Unwind_Exception **)(v2 - 24));
}

void sub_B88A8()
{
  _Unwind_Resume(v0);
}

NSObject *createPausedTimer(void *a1, void *a2)
{
  id location = 0;
  objc_storeStrong(&location, a1);
  id v6 = 0;
  objc_storeStrong(&v6, a2);
  unint64_t v5 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 1uLL, (dispatch_queue_t)location);
  dispatch_source_set_event_handler(v5, v6);
  dispatch_source_set_timer(v5, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  dispatch_activate(v5);
  char v4 = v5;
  objc_storeStrong((id *)&v5, 0);
  objc_storeStrong(&v6, 0);
  objc_storeStrong(&location, 0);

  return v4;
}

void sub_B89EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, int a11, int a12, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void sub_B8AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, id a13)
{
}

void sub_B8B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, _Unwind_Exception *exception_object, char a16)
{
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  HSUtil::ObjectLock::~ObjectLock((id *)(v16 - 32));
  _Unwind_Resume(a1);
}

float getPlaybackProgress(Playback *a1)
{
  Frames = (void *)HSRecordingTypes::PlaybackDecoder::getFrames((HSRecordingTypes::PlaybackDecoder *)a1);
  if (std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::empty[abi:ne180100](Frames)) {
    return 0.0;
  }
  if (Playback::done(a1)) {
    return 1.0;
  }
  uint64_t Duration = HSRecordingTypes::PlaybackDecoder::getDuration((HSRecordingTypes::PlaybackDecoder *)a1);
  if (Duration) {
    return (float)Playback::getTime(a1) / (float)Duration;
  }
  else {
    return 0.0;
  }
}

void sub_B9258()
{
  _Unwind_Resume(v0);
}

double std::__math::fmax[abi:ne180100]<int,double,0>(int a1, double a2)
{
  return std::__math::fmax[abi:ne180100]<int>((double)a1, a2);
}

double std::__math::fmin[abi:ne180100]<int,float,0>(int a1, float a2)
{
  return std::__math::fmin[abi:ne180100]<int>((double)a1, a2);
}

PlayFrame *Playback::resetTime(Playback *this, int64_t a2)
{
  this->_time = a2;
  uint64_t result = (PlayFrame *)HSRecordingTypes::PlaybackDecoder::findFrame((HSRecordingTypes::PlaybackDecoder *)this, this->_time);
  this->_nextFrame.__i_ = result;
  return result;
}

uint64_t HSRecordingTypes::PlaybackDecoder::getDuration(HSRecordingTypes::PlaybackDecoder *this)
{
  if (std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::empty[abi:ne180100]((void *)this + 12)) {
    return 0;
  }
  else {
    return *(void *)(std::vector<HSRecordingTypes::PlayFrame>::back[abi:ne180100]((uint64_t)this + 96) + 16) + 1;
  }
}

{
  return HSRecordingTypes::PlaybackDecoder::getDuration(this);
}

PlayFrame *findNextConsumeFrame(Playback *a1)
{
  for (uint64_t i = Playback::getNextFrame(a1)->__i_;
        !HSRecordingTypes::PlaybackDecoder::iteratorEnd((uint64_t)a1, (uint64_t)&i)
     && *(unsigned char *)(std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)&i)
                 + 8) != 3;
  return i;
}

BOOL HSRecordingTypes::PlaybackDecoder::iteratorEnd(uint64_t a1, uint64_t a2)
{
  void v4[2] = a1;
  v4[1] = a2;
  v4[0] = std::vector<std::unique_ptr<EncoderState>>::end[abi:ne180100](a1 + 96);
  return std::operator==[abi:ne180100]<std::unique_ptr<EncoderState> *>(a2, (uint64_t)v4);
}

{
  return HSRecordingTypes::PlaybackDecoder::iteratorEnd(a1, a2);
}

uint64_t *decodeConsumeFrameDatas@<X0>(HSUtil::Coder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  v20[1] = (uint64_t)a4;
  v20[0] = a2;
  __n128 v19 = a1;
  uint64_t v18 = a3;
  if (HSRecordingTypes::PlaybackDecoder::iteratorEnd((uint64_t)a1, (uint64_t)v20))
  {
    unint64_t v7 = +[NSAssertionHandler currentHandler];
    id v6 = +[NSString stringWithUTF8String:"optional<std::vector<id>> decodeConsumeFrameDatas(Playback &, Playback::FrameIterator, HSUtil::Nanoseconds)"];
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v7, "handleFailureInFunction:file:lineNumber:description:", @"!playback.iteratorEnd(iter)");
  }
  uint64_t v17 = std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)v20);
  std::vector<objc_object * {__strong}>::vector[abi:ne180100](v16);
  while (!HSRecordingTypes::PlaybackDecoder::iteratorEnd((uint64_t)v19, (uint64_t)v20))
  {
    unint64_t v15 = (HSRecordingTypes::PlayFrame *)std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)v20);
    v14[1] = (id)std::__wrap_iter<HSRecordingTypes::PlayFrame const*>::operator++[abi:ne180100](v20);
    if (*((void *)v15 + 2) - *(void *)(v17 + 16) >= v18) {
      break;
    }
    if (*((unsigned char *)v15 + 8) == 3)
    {
      HSRecordingTypes::ConsumeFrame::ConsumeFrame((HSRecordingTypes::ConsumeFrame *)v13);
      HSRecordingTypes::PlaybackDecoder::decodeFrame(v19, v15, (HSRecordingTypes::Frame *)v13);
      BOOL v12 = 0;
      BOOL v12 = HSUtil::Coder::ok(v19);
      if (v12)
      {
        std::vector<objc_object * {__strong}>::push_back[abi:ne180100](v16, v14);
        int v9 = 0;
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t v11 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSPlaybackStage.mm", v22);
        os_log_t oslog = &_os_log_default;
        if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
        {
          log = oslog;
          __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v21, (uint64_t)"optional<std::vector<id>> decodeConsumeFrameDatas(Playback &, Playback::FrameIterator, HSUtil::Nanoseconds)", (uint64_t)v11, 212, (uint64_t)"playback");
          _os_log_error_impl(&def_411C8, log, OS_LOG_TYPE_ERROR, "Assertion failed (%s @ %s:%ju): %s", v21, 0x2Au);
        }
        objc_storeStrong((id *)&oslog, 0);
        std::optional<std::vector<objc_object * {__strong}>>::optional[abi:ne180100](a4);
        int v9 = 1;
      }
      HSRecordingTypes::ConsumeFrame::~ConsumeFrame(v13);
      if (v9) {
        return std::vector<objc_object * {__strong}>::~vector[abi:ne180100](v16);
      }
    }
  }
  std::optional<std::vector<objc_object * {__strong}>>::optional[abi:ne180100]<std::vector<objc_object * {__strong}>,0>((uint64_t)a4, v16);
  return std::vector<objc_object * {__strong}>::~vector[abi:ne180100](v16);
}

void sub_B9844()
{
  _Unwind_Resume(v0);
}

uint64_t std::optional<std::vector<objc_object * {__strong}>>::operator BOOL[abi:ne180100](uint64_t a1)
{
  return std::__optional_storage_base<std::vector<objc_object * {__strong}>,false>::has_value[abi:ne180100](a1) & 1;
}

uint64_t *std::vector<objc_object * {__strong}>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t std::optional<std::vector<objc_object * {__strong}>>::~optional(uint64_t a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<std::vector<objc_object * {__strong}>,false>::~__optional_move_assign_base(a1);
  return a1;
}

void sub_B9A2C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  *(void *)(v9 - os_unfair_lock_unlock(this + 32) = a1;
  *(_DWORD *)(v9 - 36) = a2;
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  HSUtil::ObjectLock::~ObjectLock((id *)(v9 - 56));
  _Unwind_Resume(*(_Unwind_Exception **)(v9 - 32));
}

void sub_B9BBC(uint64_t a1, int a2)
{
  *(void *)(v2 - os_unfair_lock_unlock(this + 32) = a1;
  *(_DWORD *)(v2 - 36) = a2;
  HSUtil::ObjectLock::~ObjectLock((id *)(v2 - 56));
  objc_storeStrong((id *)(v2 - 24), 0);
  _Unwind_Resume(*(_Unwind_Exception **)(v2 - 32));
}

uint64_t std::make_shared[abi:ne180100]<HSUtil::Buffer,HSUtil::Buffer::CopyType const&,NSData * {__strong}&,void>@<X0>(uint64_t a1@<X0>, void **a2@<X1>, void *a3@<X8>)
{
  unint64_t v8 = a3;
  uint64_t v7 = a1;
  id v6 = a2;
  std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>::allocator[abi:ne180100]((uint64_t)&v5);
  return std::allocate_shared[abi:ne180100]<HSUtil::Buffer,std::allocator<HSUtil::Buffer>,HSUtil::Buffer::CopyType const&,NSData * {__strong}&,void>((uint64_t)&v5, v7, v6, a3);
}

void sub_B9F14()
{
  _Unwind_Resume(v0);
}

void *HSRecordingTypes::PlaybackDecoder::getSource@<X0>(HSRecordingTypes::PlaybackDecoder *this@<X0>, void *a2@<X8>)
{
  return std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](a2, (void *)this + 10);
}

{
  return HSRecordingTypes::PlaybackDecoder::getSource(this, a2);
}

void HSUtil::IOUtil::ReadAll(HSUtil::IOUtil *this@<X0>, HSUtil::IO::Readable *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v11 = a3;
  unint64_t v10 = this;
  uint64_t v9 = a2;
  *(void *)&long long v8 = (*(uint64_t (**)(HSUtil::IOUtil *))(*(void *)this + 8))(this);
  *((void *)&v8 + MTRestZoneIntegrator_::clearMotion(this, 1) = v3;
  if (HSUtil::Coder::ok((HSUtil::Coder *)&v8) && (unint64_t)v9 <= *((void *)&v8 + 1))
  {
    HSUtil::Buffer::Buffer((HSUtil::Buffer *)v7);
    *(void *)&long long v5 = HSUtil::Buffer::readFrom((HSUtil::Buffer *)v7, 0, v10, (uint64_t)v9, *((void *)&v8 + 1) - (void)v9);
    *((void *)&v5 + MTRestZoneIntegrator_::clearMotion(this, 1) = v4;
    long long v8 = v5;
    if (HSUtil::Coder::ok((HSUtil::Coder *)&v8)) {
      HSUtil::Buffer::Buffer(a3, (uint64_t)v7);
    }
    else {
      HSUtil::Buffer::Buffer(a3);
    }
    HSUtil::Buffer::~Buffer((HSUtil::Buffer *)v7);
  }
  else
  {
    HSUtil::Buffer::Buffer(a3);
  }
}

BOOL Playback::done(Playback *this)
{
  return HSRecordingTypes::PlaybackDecoder::iteratorEnd((uint64_t)this, (uint64_t)&this->_nextFrame);
}

uint64_t Playback::getTime(Playback *this)
{
  return this->_time;
}

void Playback::Playback(Playback *this)
{
}

{
  HSRecordingTypes::PlaybackDecoder::PlaybackDecoder((HSRecordingTypes::PlaybackDecoder *)this);
  std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash_node_base[abi:ne180100](&this->_nextFrame.__i_);
  Playback::resetTime(this, 0);
}

__n128 $_0::$_1::operator=(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2 & 1;
  Playback::operator=(a1 + 8, a2 + 8);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  __n128 result = *(__n128 *)(a2 + 160);
  *(__n128 *)(a1 + 16objc_storeStrong(&location, 0) = result;
  return result;
}

void $_0::$_1::~$_1($_0::$_1 *this)
{
}

{
  Playback::~Playback((Playback *)((char *)this + 8));
}

Playback *Playback::Playback(Playback *a1, void *a2)
{
  return a1;
}

{
  void v4[4];

  void v4[3] = a1;
  void v4[2] = a2;
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](v4, a2);
  HSRecordingTypes::PlaybackDecoder::PlaybackDecoder((uint64_t *)&a1->status, v4);
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v4);
  std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash_node_base[abi:ne180100](&a1->_nextFrame.__i_);
  Playback::resetTime(a1, 0);
  return a1;
}

__n128 Playback::operator=(uint64_t a1, uint64_t a2)
{
  HSRecordingTypes::PlaybackDecoder::operator=(a1, a2);
  __n128 result = *(__n128 *)(a2 + 120);
  *(__n128 *)(a1 + 12objc_storeStrong(&location, 0) = result;
  return result;
}

void Playback::~Playback(Playback *this)
{
}

{
  HSRecordingTypes::PlaybackDecoder::~PlaybackDecoder((HSRecordingTypes::PlaybackDecoder *)this);
}

Playback *Playback::advanceTime(Playback *this, int64_t a2)
{
  if (a2 < this->_time) {
    __assert_rtn("advanceTime", "HSPlaybackStage.mm", 51, "t >= _time");
  }
  this->_time = a2;
  return this;
}

void HSRecordingTypes::PlaybackDecoder::decodeFrame(HSRecordingTypes::PlaybackDecoder *this, const HSRecordingTypes::PlayFrame *a2, HSRecordingTypes::Frame *a3)
{
  uint64_t v17 = this;
  uint64_t v16 = a2;
  unint64_t v15 = a3;
  if (!HSUtil::Coder::fatalError(this))
  {
    HSUtil::Decoder::setOffset(this, *((void *)v16 + 4));
    if (HSUtil::Coder::ok(this))
    {
      HSUtil::Decoder::decodeCodable<HSRecordingTypes::Frame>(this, v15);
      if (!HSUtil::Coder::ok(this))
      {
        long long v5 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRecordingTypes.h", v19);
        os_log_t v4 = &_os_log_default;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v18, (uint64_t)"void HSRecordingTypes::PlaybackDecoder::decodeFrame(const PlayFrame &, Frame &)", (uint64_t)v5, 285, (uint64_t)"ok()");
          _os_log_error_impl(&def_411C8, v4, OS_LOG_TYPE_ERROR, "Assertion failed (%s @ %s:%ju): %s", v18, 0x2Au);
        }
        objc_storeStrong((id *)&v4, 0);
      }
    }
    else
    {
      uint64_t v9 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRecordingTypes.h", v21);
      os_log_t v8 = &_os_log_default;
      os_log_type_t v7 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v20, (uint64_t)"void HSRecordingTypes::PlaybackDecoder::decodeFrame(const PlayFrame &, Frame &)", (uint64_t)v9, 281, (uint64_t)"ok()");
        _os_log_error_impl(&def_411C8, v8, v7, "Assertion failed (%s @ %s:%ju): %s", v20, 0x2Au);
      }
      objc_storeStrong((id *)&v8, 0);
    }
  }
  else
  {
    unint64_t v13 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRecordingTypes.h", v23);
    os_log_t oslog = &_os_log_default;
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v22, (uint64_t)"void HSRecordingTypes::PlaybackDecoder::decodeFrame(const PlayFrame &, Frame &)", (uint64_t)v13, 277, (uint64_t)"!fatalError()");
      _os_log_error_impl(&def_411C8, oslog, type, "Assertion failed (%s @ %s:%ju): %s", v22, 0x2Au);
    }
    objc_storeStrong((id *)&oslog, 0);
  }
}

{
  HSRecordingTypes::PlaybackDecoder::decodeFrame(this, a2, a3);
}

void sub_BADE8()
{
  _Unwind_Resume(v0);
}

void sub_BB17C()
{
  _Unwind_Resume(v0);
}

uint64_t HSRecordingTypes::PlaybackDecoder::getFrames(HSRecordingTypes::PlaybackDecoder *this)
{
  return (uint64_t)this + 96;
}

{
  return HSRecordingTypes::PlaybackDecoder::getFrames(this);
}

__wrap_iter<const HSRecordingTypes::PlayFrame *> *Playback::getNextFrame(Playback *this)
{
  return &this->_nextFrame;
}

BOOL Playback::shouldPlayFrame(Playback *this, const PlayFrame *a2)
{
  return this->_time >= a2->var2;
}

uint64_t std::__wrap_iter<HSRecordingTypes::PlayFrame const*>::operator++[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  std::__wrap_iter<HSRecordingTypes::PlayFrame *>::operator++[abi:ne180100](a1);
  return v2;
}

void std::__wrap_iter<HSRecordingTypes::PlayFrame const*>::operator->[abi:ne180100]()
{
}

uint64_t HSRecordingTypes::PlaybackDecoder::findFrame(HSRecordingTypes::PlaybackDecoder *this, uint64_t a2)
{
  v7[1] = (uint64_t)this;
  v7[0] = a2;
  uint64_t v5 = std::vector<std::unique_ptr<EncoderState>>::begin[abi:ne180100]((uint64_t *)this + 12);
  uint64_t v4 = std::vector<std::unique_ptr<EncoderState>>::end[abi:ne180100]((uint64_t)this + 96);
  uint64_t v6 = std::lower_bound[abi:ne180100]<std::__wrap_iter<HSRecordingTypes::PlayFrame *>,long long,HSRecordingTypes::PlaybackDecoder::findFrame(long long)::{lambda(HSRecordingTypes::PlayFrame const&,long long)#1}>(v5, v4, v7);
  std::__wrap_iter<HSRecordingTypes::PlayFrame const*>::__wrap_iter[abi:ne180100]<HSRecordingTypes::PlayFrame*,0>(&v8, (uint64_t)&v6);
  return v8;
}

{
  return HSRecordingTypes::PlaybackDecoder::findFrame(this, a2);
}

uint64_t std::lower_bound[abi:ne180100]<std::__wrap_iter<HSRecordingTypes::PlayFrame *>,long long,HSRecordingTypes::PlaybackDecoder::findFrame(long long)::{lambda(HSRecordingTypes::PlayFrame const&,long long)#1}>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v8 = a1;
  uint64_t v7 = a2;
  uint64_t v5 = a3;
  char v4 = 0;
  return std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<HSRecordingTypes::PlayFrame *>,std::__wrap_iter<HSRecordingTypes::PlayFrame *>,long long,std::__identity,HSRecordingTypes::PlaybackDecoder::findFrame(long long)::{lambda(HSRecordingTypes::PlayFrame const&,long long)#1}>(a1, a2, a3, (uint64_t)&v6, (uint64_t)&v4);
}

uint64_t *std::__wrap_iter<HSRecordingTypes::PlayFrame const*>::__wrap_iter[abi:ne180100]<HSRecordingTypes::PlayFrame*,0>(uint64_t *a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t v2;
  uint64_t *result;

  uint64_t v2 = std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100](a2);
  __n128 result = a1;
  *a1 = v2;
  return result;
}

uint64_t std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<HSRecordingTypes::PlayFrame *>,std::__wrap_iter<HSRecordingTypes::PlayFrame *>,long long,std::__identity,HSRecordingTypes::PlaybackDecoder::findFrame(long long)::{lambda(HSRecordingTypes::PlayFrame const&,long long)#1}>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = a1;
  uint64_t v18 = a2;
  uint64_t v17 = a3;
  uint64_t v16 = a4;
  uint64_t v15 = a5;
  uint64_t v13 = a1;
  uint64_t v12 = a2;
  unint64_t v14 = std::_IterOps<std::_ClassicAlgPolicy>::distance[abi:ne180100]<std::__wrap_iter<HSRecordingTypes::PlayFrame *>>(a1, a2);
  while (v14)
  {
    unint64_t v11 = std::__half_positive[abi:ne180100]<long,0>(v14);
    uint64_t v10 = v19;
    std::_IterOps<std::_ClassicAlgPolicy>::advance[abi:ne180100]<std::__wrap_iter<HSRecordingTypes::PlayFrame *>,long>(&v10);
    uint64_t v9 = v16;
    uint64_t v8 = v15;
    uint64_t v5 = std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)&v10);
    uint64_t v6 = std::__invoke[abi:ne180100]<std::__identity &,HSRecordingTypes::PlayFrame &>(v8, v5);
    if (std::__invoke[abi:ne180100]<HSRecordingTypes::PlaybackDecoder::findFrame(long long)::{lambda(HSRecordingTypes::PlayFrame const&,long long)#1} &,HSRecordingTypes::PlayFrame&,long long const&>(v9, v6, v17))
    {
      uint64_t v19 = *std::__wrap_iter<HSRecordingTypes::PlayFrame *>::operator++[abi:ne180100](&v10);
      v14 -= v11 + 1;
    }
    else
    {
      unint64_t v14 = v11;
    }
  }
  return v19;
}

uint64_t std::_IterOps<std::_ClassicAlgPolicy>::distance[abi:ne180100]<std::__wrap_iter<HSRecordingTypes::PlayFrame *>>(uint64_t a1, uint64_t a2)
{
  return std::distance[abi:ne180100]<std::__wrap_iter<HSRecordingTypes::PlayFrame *>>(a1, a2);
}

unint64_t std::__half_positive[abi:ne180100]<long,0>(unint64_t a1)
{
  return a1 / 2;
}

void *std::_IterOps<std::_ClassicAlgPolicy>::advance[abi:ne180100]<std::__wrap_iter<HSRecordingTypes::PlayFrame *>,long>(void *a1)
{
  return std::advance[abi:ne180100]<std::__wrap_iter<HSRecordingTypes::PlayFrame *>,long,long,void>(a1);
}

BOOL std::__invoke[abi:ne180100]<HSRecordingTypes::PlaybackDecoder::findFrame(long long)::{lambda(HSRecordingTypes::PlayFrame const&,long long)#1} &,HSRecordingTypes::PlayFrame&,long long const&>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return HSRecordingTypes::PlaybackDecoder::findFrame(long long)::{lambda(HSRecordingTypes::PlayFrame const&,long long)#1}::operator()(a1, a2, *a3);
}

uint64_t std::__invoke[abi:ne180100]<std::__identity &,HSRecordingTypes::PlayFrame &>(uint64_t a1, uint64_t a2)
{
  return std::hash<unsigned long>::operator()[abi:ne180100](a1, a2);
}

void *std::__wrap_iter<HSRecordingTypes::PlayFrame *>::operator++[abi:ne180100](void *result)
{
  *result += 40;
  return result;
}

uint64_t std::distance[abi:ne180100]<std::__wrap_iter<HSRecordingTypes::PlayFrame *>>(uint64_t a1, uint64_t a2)
{
  return std::__distance[abi:ne180100]<std::__wrap_iter<HSRecordingTypes::PlayFrame *>>(a1, a2);
}

uint64_t std::__distance[abi:ne180100]<std::__wrap_iter<HSRecordingTypes::PlayFrame *>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  uint64_t v3 = a2;
  return std::operator-[abi:ne180100]<HSRecordingTypes::PlayFrame *,HSRecordingTypes::PlayFrame *>((uint64_t)&v3, (uint64_t)&v4);
}

uint64_t std::operator-[abi:ne180100]<HSRecordingTypes::PlayFrame *,HSRecordingTypes::PlayFrame *>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100](a1);
  return (v3
        - std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100](a2))
       / 40;
}

void *std::advance[abi:ne180100]<std::__wrap_iter<HSRecordingTypes::PlayFrame *>,long,long,void>(void *a1)
{
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  return std::__advance[abi:ne180100]<std::__wrap_iter<HSRecordingTypes::PlayFrame *>>(a1, v1);
}

void *std::__advance[abi:ne180100]<std::__wrap_iter<HSRecordingTypes::PlayFrame *>>(void *a1, uint64_t a2)
{
  return std::__wrap_iter<HSRecordingTypes::PlayFrame *>::operator+=[abi:ne180100](a1, a2);
}

void *std::__wrap_iter<HSRecordingTypes::PlayFrame *>::operator+=[abi:ne180100](void *result, uint64_t a2)
{
  *result += 40 * a2;
  return result;
}

BOOL HSRecordingTypes::PlaybackDecoder::findFrame(long long)::{lambda(HSRecordingTypes::PlayFrame const&,long long)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(void *)(a2 + 16) < a3;
}

{
  return HSRecordingTypes::PlaybackDecoder::findFrame(long long)::{lambda(HSRecordingTypes::PlayFrame const&,long long)#1}::operator()(a1, a2, a3);
}

uint64_t std::vector<HSRecordingTypes::PlayFrame>::back[abi:ne180100](uint64_t a1)
{
  return *(void *)(a1 + 8) - 40;
}

unsigned char *std::optional<std::vector<objc_object * {__strong}>>::optional[abi:ne180100](unsigned char *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<std::vector<objc_object * {__strong}>,false>::__optional_move_assign_base[abi:ne180100](a1);
  return a1;
}

uint64_t std::optional<std::vector<objc_object * {__strong}>>::optional[abi:ne180100]<std::vector<objc_object * {__strong}>,0>(uint64_t a1, void *a2)
{
  return a1;
}

{
  _ZNSt3__127__optional_move_assign_baseINS_6vectorIU8__strongP11objc_objectNS_9allocatorIS4_EEEELb0EECI2NS_24__optional_destruct_baseIS7_Lb0EEEIJS7_EEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

unsigned char *std::__optional_move_assign_base<std::vector<objc_object * {__strong}>,false>::__optional_move_assign_base[abi:ne180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_assign_base<std::vector<objc_object * {__strong}>,false>::__optional_copy_assign_base[abi:ne180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_move_base<std::vector<objc_object * {__strong}>,false>::__optional_move_base[abi:ne180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_base<std::vector<objc_object * {__strong}>,false>::__optional_copy_base[abi:ne180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_storage_base<std::vector<objc_object * {__strong}>,false>::__optional_storage_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_destruct_base<std::vector<objc_object * {__strong}>,false>::__optional_destruct_base[abi:ne180100](unsigned char *result)
{
  PlayFrame *result = 0;
  result[24] = 0;
  return result;
}

uint64_t _ZNSt3__127__optional_move_assign_baseINS_6vectorIU8__strongP11objc_objectNS_9allocatorIS4_EEEELb0EECI2NS_24__optional_destruct_baseIS7_Lb0EEEIJS7_EEENS_10in_place_tEDpOT_(uint64_t a1, void *a2)
{
  return a1;
}

uint64_t _ZNSt3__127__optional_copy_assign_baseINS_6vectorIU8__strongP11objc_objectNS_9allocatorIS4_EEEELb0EECI2NS_24__optional_destruct_baseIS7_Lb0EEEIJS7_EEENS_10in_place_tEDpOT_(uint64_t a1, void *a2)
{
  return a1;
}

uint64_t _ZNSt3__120__optional_move_baseINS_6vectorIU8__strongP11objc_objectNS_9allocatorIS4_EEEELb0EECI2NS_24__optional_destruct_baseIS7_Lb0EEEIJS7_EEENS_10in_place_tEDpOT_(uint64_t a1, void *a2)
{
  return a1;
}

uint64_t _ZNSt3__120__optional_copy_baseINS_6vectorIU8__strongP11objc_objectNS_9allocatorIS4_EEEELb0EECI2NS_24__optional_destruct_baseIS7_Lb0EEEIJS7_EEENS_10in_place_tEDpOT_(uint64_t a1, void *a2)
{
  return a1;
}

uint64_t _ZNSt3__123__optional_storage_baseINS_6vectorIU8__strongP11objc_objectNS_9allocatorIS4_EEEELb0EECI2NS_24__optional_destruct_baseIS7_Lb0EEEIJS7_EEENS_10in_place_tEDpOT_(uint64_t a1, void *a2)
{
  return a1;
}

uint64_t std::__optional_destruct_base<std::vector<objc_object * {__strong}>,false>::__optional_destruct_base[abi:ne180100]<std::vector<objc_object * {__strong}>>(uint64_t a1, void *a2)
{
  std::vector<objc_object * {__strong}>::vector[abi:ne180100]((void *)a1, a2);
  uint64_t result = a1;
  *(unsigned char *)(a1 + 24) = 1;
  return result;
}

void *std::vector<objc_object * {__strong}>::vector[abi:ne180100](void *a1, void *a2)
{
  return a1;
}

{
  uint64_t *v2;
  void *v3;
  void *v4;
  void *v5;
  void *result;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  std::__compressed_pair<objc_object * {__strong}*>::__compressed_pair[abi:ne180100]<decltype(nullptr),std::allocator<objc_object * {__strong}>>(a1 + 2);
  *a1 = *a2;
  a1[1] = a2[1];
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v7 = *v2;
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  void *v3 = v7;
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v5 = v4;
  uint64_t result = a1;
  *uint64_t v5 = 0;
  a2[1] = 0;
  *a2 = 0;
  return result;
}

void *std::__compressed_pair<objc_object * {__strong}*>::__compressed_pair[abi:ne180100]<decltype(nullptr),std::allocator<objc_object * {__strong}>>(void *a1)
{
  return a1;
}

{
  std::__compressed_pair_elem<HSUtil::CoderKey const**,0,false>::__compressed_pair_elem[abi:ne180100]<decltype(nullptr),void>(a1);
  std::__compressed_pair_elem<std::allocator<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> *>,1,true>::__compressed_pair_elem[abi:ne180100]<std::__hash_node_base<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *> *> * const&,void>();
  return a1;
}

uint64_t std::__optional_storage_base<std::vector<objc_object * {__strong}>,false>::has_value[abi:ne180100](uint64_t a1)
{
  return *(unsigned char *)(a1 + 24) & 1;
}

uint64_t std::__optional_move_assign_base<std::vector<objc_object * {__strong}>,false>::~__optional_move_assign_base(uint64_t a1)
{
  return a1;
}

uint64_t std::__optional_copy_assign_base<std::vector<objc_object * {__strong}>,false>::~__optional_copy_assign_base(uint64_t a1)
{
  return a1;
}

uint64_t std::__optional_move_base<std::vector<objc_object * {__strong}>,false>::~__optional_move_base(uint64_t a1)
{
  return a1;
}

uint64_t std::__optional_copy_base<std::vector<objc_object * {__strong}>,false>::~__optional_copy_base(uint64_t a1)
{
  return a1;
}

uint64_t std::__optional_storage_base<std::vector<objc_object * {__strong}>,false>::~__optional_storage_base(uint64_t a1)
{
  return a1;
}

uint64_t std::__optional_destruct_base<std::vector<objc_object * {__strong}>,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24)) {
    std::vector<objc_object * {__strong}>::~vector[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void sub_BC23C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, HSRecordingTypes::PlaybackDecoder *a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

HSRecordingTypes::PlaybackDecoder *HSRecordingTypes::PlaybackDecoder::PlaybackDecoder(HSRecordingTypes::PlaybackDecoder *this)
{
  return this;
}

void HSRecordingTypes::PlaybackDecoder::~PlaybackDecoder(HSRecordingTypes::PlaybackDecoder *this)
{
}

void *std::vector<HSRecordingTypes::PlayFrame>::vector[abi:ne180100](void *a1)
{
  return a1;
}

{
  *a1 = 0;
  a1[1] = 0;
  std::__compressed_pair<HSUtil::Encoder::ContainerRecord *>::__compressed_pair[abi:ne180100]<decltype(nullptr),std::__default_init_tag>(a1 + 2);
  return a1;
}

uint64_t *std::vector<HSRecordingTypes::PlayFrame>::~vector[abi:ne180100](uint64_t *a1)
{
  return a1;
}

{
  uint64_t *v3[2];

  v3[1] = a1;
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](v3, (uint64_t)a1);
  std::vector<HSRecordingTypes::PlayFrame>::__destroy_vector::operator()[abi:ne180100](v3);
  return a1;
}

void std::vector<HSRecordingTypes::PlayFrame>::__destroy_vector::operator()[abi:ne180100](uint64_t **a1)
{
  if (**a1)
  {
    std::vector<HSRecordingTypes::PlayFrame>::__clear[abi:ne180100](*a1);
    std::vector<HSUtil::CoderKey const*>::__annotate_delete[abi:ne180100]();
    std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
    uint64_t v4 = v1;
    uint64_t v3 = (void *)**a1;
    uint64_t v2 = std::vector<HSRecordingTypes::PlayFrame>::capacity[abi:ne180100](*a1);
    std::allocator_traits<std::allocator<HSRecordingTypes::PlayFrame>>::deallocate[abi:ne180100](v4, v3, v2);
  }
}

void std::vector<HSRecordingTypes::PlayFrame>::__clear[abi:ne180100](uint64_t *a1)
{
}

void std::allocator_traits<std::allocator<HSRecordingTypes::PlayFrame>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

uint64_t std::vector<HSRecordingTypes::PlayFrame>::capacity[abi:ne180100](void *a1)
{
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  return (*v1 - *a1) / 40;
}

void std::vector<HSRecordingTypes::PlayFrame>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); a2 != i; i -= 40)
  {
    std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
    std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
    std::allocator_traits<std::allocator<HSUtil::CoderKey const*>>::destroy[abi:ne180100]<HSUtil::CoderKey const*,void>();
  }
  *(void *)(a1 + 8) = a2;
}

void std::allocator<HSRecordingTypes::PlayFrame>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void sub_BC6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, HSRecordingTypes::PlaybackDecoder *a9, uint64_t a10, int a11, int a12, _Unwind_Exception *exception_object, char a14)
{
}

uint64_t *HSRecordingTypes::PlaybackDecoder::PlaybackDecoder(uint64_t *a1, void *a2)
{
  BOOL v28 = (HSUtil::Decoder *)a1;
  BOOL v27 = a2;
  uint64_t v29 = a1;
  HSUtil::Decoder::Decoder((HSUtil::Decoder *)a1);
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](a1 + 10, a2);
  std::vector<HSRecordingTypes::PlayFrame>::vector[abi:ne180100](a1 + 12);
  uint64_t v2 = (HSUtil::IO::Readable *)std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)(a1 + 10));
  HSUtil::Decoder::setReadable((HSUtil::Decoder *)a1, v2);
  std::function<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::function<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),void>(v34, (uint64_t)HSUtil::Decoder::DecodeObject);
  HSUtil::Decoder::setCallbacks((HSUtil::Decoder *)a1, (const HSUtil::Decoder::Callbacks *)v34);
  HSUtil::Decoder::Callbacks::~Callbacks((HSUtil::Decoder::Callbacks *)v34);
  std::optional<long long>::optional[abi:ne180100](&v25);
  int64_t var2 = 0;
  while (1)
  {
    uint64_t v23 = 0;
    uint64_t v23 = HSUtil::Decoder::offset((HSUtil::Decoder *)a1);
    HSRecordingTypes::PlayFrame::PlayFrame((HSRecordingTypes::PlayFrame *)&v21);
    HSUtil::Decoder::decodeCodable<HSRecordingTypes::PlayFrame>((HSUtil::Coder *)a1, (HSRecordingTypes::Frame *)&v21);
    if (HSUtil::Coder::end((HSUtil::Coder *)a1))
    {
      *(_DWORD *)a1 = 0;
      return v29;
    }
    BOOL v20 = 0;
    BOOL v20 = HSUtil::Coder::ok((HSUtil::Coder *)a1);
    if (!v20)
    {
      uint64_t v19 = 0;
      uint64_t v19 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRecordingTypes.h", v33);
      os_log_t oslog = &_os_log_default;
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
      {
        log = oslog;
        os_log_type_t v8 = type;
        __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v32, (uint64_t)"HSRecordingTypes::PlaybackDecoder::PlaybackDecoder(HSRecordingSource)", (uint64_t)v19, 235, (uint64_t)"ok()");
        _os_log_error_impl(&def_411C8, log, v8, "Assertion failed (%s @ %s:%ju): %s", v32, 0x2Au);
      }
      objc_storeStrong((id *)&oslog, 0);
      return v29;
    }
    BOOL v16 = v21.var2 >= var2;
    if (v21.var2 < var2) {
      break;
    }
    int64_t var2 = v21.var2;
    if ((std::optional<long long>::operator BOOL[abi:ne180100]((uint64_t)&v25) & 1) == 0)
    {
      std::optional<long long>::optional[abi:ne180100]<long long &,0>((uint64_t)&v11, &v21.var2);
      uint64_t v25 = v11;
      char v26 = v12;
    }
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    v21.var2 -= *v3;
    uint64_t v22 = v23;
    std::vector<HSRecordingTypes::PlayFrame>::push_back[abi:ne180100](a1 + 12, &v21);
  }
  uint64_t v15 = 0;
  uint64_t v15 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRecordingTypes.h", v31);
  os_log_t v14 = &_os_log_default;
  os_log_type_t v13 = OS_LOG_TYPE_ERROR;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = v14;
    os_log_type_t v6 = v13;
    __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v30, (uint64_t)"HSRecordingTypes::PlaybackDecoder::PlaybackDecoder(HSRecordingSource)", (uint64_t)v15, 238, (uint64_t)"frame.timestamp>=previousFrameTime");
    _os_log_error_impl(&def_411C8, v5, v6, "Assertion failed (%s @ %s:%ju): %s", v30, 0x2Au);
  }
  objc_storeStrong((id *)&v14, 0);
  *(_DWORD *)a1 = 12;
  return v29;
}

void sub_BCB08()
{
  _Unwind_Resume(v0);
}

void *std::function<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::function<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),void>(void *a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t v4[2];

  v4[1] = (uint64_t)a1;
  v4[0] = a2;
  std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::__value_func[abi:ne180100]<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),0>(a1, v4);
  return a1;
}

unsigned char *std::optional<long long>::optional[abi:ne180100](unsigned char *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<long long,true>::__optional_move_assign_base(a1);
  return a1;
}

uint64_t HSUtil::Decoder::offset(HSUtil::Decoder *this)
{
  return *((void *)this + 9);
}

HSRecordingTypes::PlayFrame *HSRecordingTypes::PlayFrame::PlayFrame(HSRecordingTypes::PlayFrame *this)
{
  return this;
}

{
  HSRecordingTypes::PlayFrame *result;

  HSRecordingTypes::Frame::Frame((uint64_t)this, 0);
  uint64_t result = this;
  *(void *)this = off_142A38;
  *((void *)this + 4) = 0;
  return result;
}

BOOL HSUtil::Decoder::decodeCodable<HSRecordingTypes::PlayFrame>(HSUtil::Coder *a1, HSRecordingTypes::Frame *a2)
{
  os_log_type_t v6 = a1;
  uint64_t v5 = a2;
  BOOL result = HSUtil::Coder::fatalError(a1);
  if (!result)
  {
    unint64_t v4 = 0;
    unint64_t v4 = *((void *)a1 + 9);
    HSUtil::Decoder::_readCodable<HSRecordingTypes::PlayFrame>(a1, &v4, v5);
    BOOL result = HSUtil::Coder::ok(a1);
    if (result) {
      *((void *)a1 + 9) = v4;
    }
  }
  return result;
}

uint64_t std::optional<long long>::operator BOOL[abi:ne180100](uint64_t a1)
{
  return std::__optional_storage_base<long long,false>::has_value[abi:ne180100](a1) & 1;
}

uint64_t std::optional<long long>::optional[abi:ne180100]<long long &,0>(uint64_t a1, void *a2)
{
  return a1;
}

{
  _ZNSt3__127__optional_move_assign_baseIxLb1EECI2NS_24__optional_destruct_baseIxLb1EEEIJRxEEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

uint64_t std::vector<HSRecordingTypes::PlayFrame>::push_back[abi:ne180100](uint64_t *a1, const Frame *a2)
{
  unint64_t v5 = a1[1];
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  if (v5 >= *v2)
  {
    uint64_t result = std::vector<HSRecordingTypes::PlayFrame>::__push_back_slow_path<HSRecordingTypes::PlayFrame const&>(a1, a2);
    uint64_t v6 = result;
  }
  else
  {
    uint64_t result = (uint64_t)std::vector<HSRecordingTypes::PlayFrame>::__construct_one_at_end[abi:ne180100]<HSRecordingTypes::PlayFrame const&>((uint64_t)a1, a2);
    uint64_t v6 = v5 + 40;
  }
  a1[1] = v6;
  return result;
}

void *std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::__value_func[abi:ne180100]<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),0>(void *a1, uint64_t *a2)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>::allocator[abi:ne180100]((uint64_t)&v5);
  std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::__value_func[abi:ne180100]<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>>(a1, a2, (uint64_t)&v5);
  return a1;
}

void *std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::__value_func[abi:ne180100]<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>>(void *a1, uint64_t *a2, uint64_t a3)
{
  return a1;
}

{
  uint64_t v4;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  void *v10;
  void *v11;

  uint64_t v10 = a1;
  uint64_t v9 = a2;
  os_log_type_t v8 = a3;
  uint64_t v11 = a1;
  a1[3] = 0;
  if (std::__function::__not_null[abi:ne180100]<BOOL ()(HSUtil::Encoder &,objc_object *)>(*v9))
  {
    std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v7);
    unint64_t v4 = (uint64_t)v9;
    std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v6);
    std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::__func[abi:ne180100](a1, v4, (uint64_t)&v6);
    a1[3] = a1;
  }
  return v11;
}

void *std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::__func[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  std::__function::__base<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::__base[abi:ne180100](a1);
  *a1 = off_142998;
  std::__function::__alloc_func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>::__alloc_func[abi:ne180100](a1 + 1, a2, a3);
  return a1;
}

{
  std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::__func[abi:ne180100](a1, a2, a3);
  return a1;
}

{
  std::__function::__base<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::__base[abi:ne180100](a1);
  *a1 = off_142998;
  std::__function::__alloc_func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>::__alloc_func[abi:ne180100](a1 + 1, a2, a3);
  return a1;
}

{
  std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::__func[abi:ne180100](a1, a2, a3);
  return a1;
}

{
  std::__function::__base<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::__base[abi:ne180100](a1);
  *a1 = off_142998;
  std::__function::__alloc_func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>::__alloc_func[abi:ne180100](a1 + 1, a2, a3);
  return a1;
}

void sub_BCF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

uint64_t std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::~__func(uint64_t a1)
{
}

uint64_t std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::__clone(uint64_t a1)
{
  uint64_t v11 = a1;
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v10);
  unint64_t v4 = std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocate[abi:ne180100]((uint64_t)&v10, 1uLL);
  std::__allocator_destructor<std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>>::__allocator_destructor[abi:ne180100](&v8, (uint64_t)&v10, 1);
  std::unique_ptr<std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>,std::__allocator_destructor<std::allocator<std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>>>>::unique_ptr[abi:ne180100]<true,void>((uint64_t)v9, (uint64_t)v4, &v8);
  char v5 = (void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  uint64_t v6 = v1;
  std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)v7);
  std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::__func[abi:ne180100](v5, v6, (uint64_t)v7);
  uint64_t v3 = std::unique_ptr<std::__hash_node<HSStage * {__strong},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::release[abi:ne180100]();
  std::unique_ptr<std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>,std::__allocator_destructor<std::allocator<std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>>>>::~unique_ptr[abi:ne180100]((uint64_t)v9);
  return v3;
}

void sub_BD0D4(uint64_t a1, int a2)
{
  *(void *)(v2 - 64) = a1;
  *(_DWORD *)(v2 - 68) = a2;
  std::unique_ptr<std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>,std::__allocator_destructor<std::allocator<std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>>>>::~unique_ptr[abi:ne180100](v2 - 40);
  _Unwind_Resume(*(_Unwind_Exception **)(v2 - 64));
}

void *std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::__clone(uint64_t a1, void *a2)
{
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  uint64_t v5 = v2;
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  return std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::__func[abi:ne180100](a2, v5, v3);
}

void std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::destroy()
{
}

void std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::destroy_deallocate(void *a1)
{
  uint64_t v3 = a1;
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v2);
  std::vector<HSUtil::CoderKey const*>::__annotate_delete[abi:ne180100]();
  std::allocator<std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>>::deallocate[abi:ne180100]((uint64_t)&v2, a1, 1);
}

uint64_t std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__function::__alloc_func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::operator()[abi:ne180100](a1 + 8, a2, a3);
}

uint64_t std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::target(uint64_t a1, uint64_t a2)
{
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  return v2;
}

_UNKNOWN **std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::target_type()
{
}

uint64_t std::unique_ptr<std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>,std::__allocator_destructor<std::allocator<std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>>>>::unique_ptr[abi:ne180100]<true,void>(uint64_t a1, uint64_t a2, __n128 *a3)
{
  return a1;
}

{
  void v5[2];

  v5[1] = a1;
  v5[0] = a2;
  std::__compressed_pair<std::__hash_node<HSStage * {__strong},void *> *,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::__compressed_pair[abi:ne180100]<std::__hash_node<HSStage * {__strong},void *> *&,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>(a1, v5, a3);
  return a1;
}

uint64_t std::unique_ptr<std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>,std::__allocator_destructor<std::allocator<std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>,std::__allocator_destructor<std::allocator<std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>>>>::reset[abi:ne180100](a1, 0);
  return a1;
}

void sub_BD3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

void std::unique_ptr<std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>,std::__allocator_destructor<std::allocator<std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  uint64_t v5 = *v2;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__allocator_destructor<std::allocator<std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>>>::operator()[abi:ne180100](v4, v5);
  }
}

void std::__allocator_destructor<std::allocator<std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>>>::operator()[abi:ne180100](uint64_t *a1, void *a2)
{
}

void std::allocator_traits<std::allocator<std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::allocator<std::__function::__func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void sub_BD634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

uint64_t std::__function::__alloc_func<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&),std::allocator<objc_object * (*)(HSUtil::Decoder &,HSUtil::CoderKey const&)>,objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  return std::__invoke_void_return_wrapper<objc_object * {__strong},false>::__call[abi:ne180100]<objc_object * (*&)(HSUtil::Decoder &,HSUtil::CoderKey const&),HSUtil::Decoder &,HSUtil::CoderKey const&>(v3, a2, a3);
}

uint64_t std::__invoke_void_return_wrapper<objc_object * {__strong},false>::__call[abi:ne180100]<objc_object * (*&)(HSUtil::Decoder &,HSUtil::CoderKey const&),HSUtil::Decoder &,HSUtil::CoderKey const&>(uint64_t (**a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return std::__invoke[abi:ne180100]<objc_object * (*&)(HSUtil::Decoder &,HSUtil::CoderKey const&),HSUtil::Decoder &,HSUtil::CoderKey const&>(a1, a2, a3);
}

uint64_t std::__invoke[abi:ne180100]<objc_object * (*&)(HSUtil::Decoder &,HSUtil::CoderKey const&),HSUtil::Decoder &,HSUtil::CoderKey const&>(uint64_t (**a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return (*a1)(a2, a3);
}

unsigned char *std::__optional_move_assign_base<long long,true>::__optional_move_assign_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_assign_base<long long,true>::__optional_copy_assign_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_move_base<long long,true>::__optional_move_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_base<long long,true>::__optional_copy_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_storage_base<long long,false>::__optional_storage_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_destruct_base<long long,true>::__optional_destruct_base[abi:ne180100](unsigned char *result)
{
  PlayFrame *result = 0;
  result[8] = 0;
  return result;
}

void HSUtil::Decoder::_readCodable<HSRecordingTypes::PlayFrame>(HSUtil::Decoder *a1, unint64_t *a2, HSRecordingTypes::Frame *a3)
{
  uint64_t v9 = a1;
  __n128 v8 = a2;
  uint64_t v7 = a3;
  unint64_t v6 = 0;
  unint64_t v6 = *a2;
  unint64_t v5 = HSUtil::Decoder::_skipElement(a1, a2);
  if (HSUtil::Coder::ok(a1))
  {
    HSUtil::Decoder::_loadKeyTableIfNeeded(a1, v8);
    if (HSUtil::Coder::ok(a1))
    {
      HSUtil::Decoder::Decoder((HSUtil::Decoder *)v4, a1, v6, v5);
      if ((HSRecordingTypes::Frame::decode(v7, (HSUtil::Decoder *)v4) & 1) == 0) {
        *(_DWORD *)a1 = 10;
      }
      HSUtil::Decoder::~Decoder((HSUtil::Decoder *)v4);
    }
  }
}

uint64_t HSRecordingTypes::Frame::decode(HSRecordingTypes::Frame *this, HSUtil::Decoder *a2)
{
  uint64_t v15 = this;
  os_log_t v14 = a2;
  HSUtil::Decoder::decodeMap((unint64_t *)a2, (uint64_t)v13);
  if (HSUtil::Coder::ok(v14))
  {
    char v7 = 0;
    char v7 = (*(uint64_t (**)(HSRecordingTypes::Frame *, unsigned char *))(*(void *)this + 8))(this, v13) & 1;
    char v6 = v7;
    if (v7)
    {
      char v16 = 1;
      int v8 = 1;
    }
    else
    {
      unint64_t v5 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRecordingTypes.h", v18);
      os_log_t v4 = &_os_log_default;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v17, (uint64_t)"BOOL HSRecordingTypes::Frame::decode(Decoder &)", (uint64_t)v5, 72, (uint64_t)"br");
        _os_log_error_impl(&def_411C8, v4, OS_LOG_TYPE_ERROR, "Assertion failed (%s @ %s:%ju): %s", v17, 0x2Au);
      }
      objc_storeStrong((id *)&v4, 0);
      char v16 = 0;
      int v8 = 1;
    }
  }
  else
  {
    uint64_t v11 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRecordingTypes.h", v20);
    os_log_t oslog = &_os_log_default;
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v19, (uint64_t)"BOOL HSRecordingTypes::Frame::decode(Decoder &)", (uint64_t)v11, 70, (uint64_t)"coder");
      _os_log_error_impl(&def_411C8, oslog, type, "Assertion failed (%s @ %s:%ju): %s", v19, 0x2Au);
    }
    objc_storeStrong((id *)&oslog, 0);
    char v16 = 0;
    int v8 = 1;
  }
  HSUtil::Decoder::~Decoder((HSUtil::Decoder *)v13);
  return v16 & 1;
}

{
  return HSRecordingTypes::Frame::decode(this, a2);
}

void sub_BDCE8()
{
  _Unwind_Resume(v0);
}

uint64_t std::__optional_storage_base<long long,false>::has_value[abi:ne180100](uint64_t a1)
{
  return *(unsigned char *)(a1 + 8) & 1;
}

uint64_t _ZNSt3__127__optional_move_assign_baseIxLb1EECI2NS_24__optional_destruct_baseIxLb1EEEIJRxEEENS_10in_place_tEDpOT_(uint64_t a1, void *a2)
{
  return a1;
}

uint64_t _ZNSt3__127__optional_copy_assign_baseIxLb1EECI2NS_24__optional_destruct_baseIxLb1EEEIJRxEEENS_10in_place_tEDpOT_(uint64_t a1, void *a2)
{
  return a1;
}

uint64_t _ZNSt3__120__optional_move_baseIxLb1EECI2NS_24__optional_destruct_baseIxLb1EEEIJRxEEENS_10in_place_tEDpOT_(uint64_t a1, void *a2)
{
  return a1;
}

uint64_t _ZNSt3__120__optional_copy_baseIxLb1EECI2NS_24__optional_destruct_baseIxLb1EEEIJRxEEENS_10in_place_tEDpOT_(uint64_t a1, void *a2)
{
  return a1;
}

uint64_t _ZNSt3__123__optional_storage_baseIxLb0EECI2NS_24__optional_destruct_baseIxLb1EEEIJRxEEENS_10in_place_tEDpOT_(uint64_t a1, void *a2)
{
  return a1;
}

uint64_t std::__optional_destruct_base<long long,true>::__optional_destruct_base[abi:ne180100]<long long &>(uint64_t result, void *a2)
{
  *(void *)uint64_t result = *a2;
  *(unsigned char *)(result + 8) = 1;
  return result;
}

void *std::vector<HSRecordingTypes::PlayFrame>::__construct_one_at_end[abi:ne180100]<HSRecordingTypes::PlayFrame const&>(uint64_t a1, const Frame *a2)
{
  uint64_t v9 = a1;
  int v8 = a2;
  std::vector<HSRecordingTypes::PlayFrame>::_ConstructTransaction::_ConstructTransaction[abi:ne180100](&v6, a1, 1);
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v5 = v2;
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  std::allocator_traits<std::allocator<HSRecordingTypes::PlayFrame>>::construct[abi:ne180100]<HSRecordingTypes::PlayFrame,HSRecordingTypes::PlayFrame const&,void>(v5, v3, v8);
  v7 += 40;
  return std::vector<HSUtil::Encoder::ContainerRecord>::_ConstructTransaction::~_ConstructTransaction[abi:ne180100](&v6);
}

void sub_BDF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, _Unwind_Exception *exception_object, uint64_t a15)
{
}

uint64_t std::vector<HSRecordingTypes::PlayFrame>::__push_back_slow_path<HSRecordingTypes::PlayFrame const&>(uint64_t *a1, const Frame *a2)
{
  uint64_t v15 = a1;
  os_log_t v14 = a2;
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v13 = v2;
  uint64_t v3 = std::vector<HSRecordingTypes::PlayFrame>::size[abi:ne180100](a1);
  unint64_t v9 = std::vector<HSRecordingTypes::PlayFrame>::__recommend[abi:ne180100](a1, v3 + 1);
  uint64_t v4 = std::vector<HSRecordingTypes::PlayFrame>::size[abi:ne180100](a1);
  std::__split_buffer<HSRecordingTypes::PlayFrame>::__split_buffer(v11, v9, v4, v13);
  uint64_t v10 = v13;
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  std::allocator_traits<std::allocator<HSRecordingTypes::PlayFrame>>::construct[abi:ne180100]<HSRecordingTypes::PlayFrame,HSRecordingTypes::PlayFrame const&,void>(v10, v5, v14);
  v12 += 40;
  std::vector<HSRecordingTypes::PlayFrame>::__swap_out_circular_buffer(a1, v11);
  uint64_t v7 = a1[1];
  std::__split_buffer<HSRecordingTypes::PlayFrame>::~__split_buffer(v11);
  return v7;
}

void sub_BDFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, _Unwind_Exception *exception_object, void *a16)
{
}

void *std::vector<HSRecordingTypes::PlayFrame>::_ConstructTransaction::_ConstructTransaction[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

HSRecordingTypes::PlayFrame *std::allocator_traits<std::allocator<HSRecordingTypes::PlayFrame>>::construct[abi:ne180100]<HSRecordingTypes::PlayFrame,HSRecordingTypes::PlayFrame const&,void>(uint64_t a1, HSRecordingTypes::PlayFrame *a2, const Frame *a3)
{
  return std::allocator<HSRecordingTypes::PlayFrame>::construct[abi:ne180100]<HSRecordingTypes::PlayFrame,HSRecordingTypes::PlayFrame const&>(a1, a2, a3);
}

void *std::vector<HSRecordingTypes::PlayFrame>::_ConstructTransaction::_ConstructTransaction[abi:ne180100](void *result, uint64_t a2, uint64_t a3)
{
  PlayFrame *result = a2;
  result[1] = *(void *)(a2 + 8);
  result[2] = *(void *)(a2 + 8) + 40 * a3;
  return result;
}

HSRecordingTypes::PlayFrame *std::allocator<HSRecordingTypes::PlayFrame>::construct[abi:ne180100]<HSRecordingTypes::PlayFrame,HSRecordingTypes::PlayFrame const&>(uint64_t a1, HSRecordingTypes::PlayFrame *a2, const Frame *a3)
{
  return HSRecordingTypes::PlayFrame::PlayFrame(a2, a3);
}

HSRecordingTypes::PlayFrame *HSRecordingTypes::PlayFrame::PlayFrame(HSRecordingTypes::PlayFrame *this, const Frame *a2)
{
  return this;
}

{
  HSRecordingTypes::PlayFrame *result;

  HSRecordingTypes::Frame::Frame(this, a2);
  uint64_t result = this;
  *(void *)this = off_142A38;
  *((void *)this + 4) = a2[1].var0;
  return result;
}

__n128 HSRecordingTypes::Frame::Frame(HSRecordingTypes::Frame *this, const Frame *a2)
{
  *(void *)this = off_1428B8;
  __n128 result = *(__n128 *)&a2->var1;
  *(__n128 *)((char *)this + 8) = result;
  *((void *)this + 3) = a2->var3;
  return result;
}

unint64_t std::vector<HSRecordingTypes::PlayFrame>::__recommend[abi:ne180100](void *a1, uint64_t a2)
{
  v7[1] = a1;
  v7[0] = a2;
  unint64_t v6 = std::vector<HSRecordingTypes::PlayFrame>::max_size((uint64_t)a1);
  if (v7[0] > v6) {
    std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v5 = std::vector<HSRecordingTypes::PlayFrame>::capacity[abi:ne180100](a1);
  if (v5 >= v6 / 2) {
    return v6;
  }
  uint64_t v4 = 2 * v5;
  return *std::max[abi:ne180100]<unsigned long>(&v4, v7);
}

uint64_t std::vector<HSRecordingTypes::PlayFrame>::size[abi:ne180100](void *a1)
{
  return (a1[1] - *a1) / 40;
}

void **std::__split_buffer<HSRecordingTypes::PlayFrame>::__split_buffer(void **a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1;
}

{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v9;
  void v11[2];
  uint64_t v12;
  unint64_t v13;
  void **v14;
  void **v15;

  os_log_t v14 = a1;
  uint64_t v13 = a2;
  uint64_t v12 = a3;
  v11[1] = a4;
  uint64_t v15 = a1;
  v11[0] = 0;
  std::__compressed_pair<HSUtil::Encoder::ContainerRecord *>::__compressed_pair[abi:ne180100]<decltype(nullptr),std::allocator<HSUtil::Encoder::ContainerRecord> &>(a1 + 3, (uint64_t)v11, a4);
  if (v13)
  {
    uint64_t v4 = std::__split_buffer<HSUtil::Encoder::ContainerRecord>::__alloc[abi:ne180100]((uint64_t)a1);
    *a1 = std::__allocate_at_least[abi:ne180100]<std::allocator<HSRecordingTypes::PlayFrame>>(v4, v13);
    uint64_t v13 = v5;
  }
  else
  {
    *a1 = 0;
  }
  unint64_t v6 = (uint64_t)*a1 + 40 * v12;
  a1[2] = (void *)v6;
  a1[1] = (void *)v6;
  unint64_t v9 = (unint64_t)*a1 + 40 * v13;
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  HSRecordingTypes::Frame *v7 = v9;
  return v15;
}

void std::vector<HSRecordingTypes::PlayFrame>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v15 = a1;
  os_log_t v14 = a2;
  std::vector<HSUtil::CoderKey const*>::__annotate_delete[abi:ne180100]();
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v7 = v2;
  std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>::reverse_iterator[abi:ne180100](v12, a1[1]);
  std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>::reverse_iterator[abi:ne180100](v11, *a1);
  std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>::reverse_iterator[abi:ne180100](v10, v14[1]);
  v13[0] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HSRecordingTypes::PlayFrame>,std::reverse_iterator<HSRecordingTypes::PlayFrame*>,std::reverse_iterator<HSRecordingTypes::PlayFrame*>,std::reverse_iterator<HSRecordingTypes::PlayFrame*>>(v7, v12[0], v12[1], v11[0], v11[1], v10[0], v10[1]);
  v13[1] = v3;
  uint64_t v4 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)v13);
  v14[1] = v4;
  std::swap[abi:ne180100]<HSUtil::Encoder::ContainerRecord *>(a1, v14 + 1);
  std::swap[abi:ne180100]<HSUtil::Encoder::ContainerRecord *>(a1 + 1, v14 + 2);
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  int v8 = v5;
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  std::swap[abi:ne180100]<HSUtil::Encoder::ContainerRecord *>(v8, v6);
  *os_log_t v14 = v14[1];
  std::vector<HSRecordingTypes::PlayFrame>::size[abi:ne180100](a1);
  std::allocator<HSUtil::CoderKey const*>::destroy[abi:ne180100]();
}

void **std::__split_buffer<HSRecordingTypes::PlayFrame>::~__split_buffer(void **a1)
{
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  std::__split_buffer<HSRecordingTypes::PlayFrame>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
  {
    uint64_t v2 = std::__split_buffer<HSUtil::Encoder::ContainerRecord>::__alloc[abi:ne180100]((uint64_t)a1);
    uint64_t v3 = *a1;
    uint64_t v4 = std::__split_buffer<HSRecordingTypes::PlayFrame>::capacity[abi:ne180100](a1);
    std::allocator_traits<std::allocator<HSRecordingTypes::PlayFrame>>::deallocate[abi:ne180100](v2, v3, v4);
  }
  return a1;
}

uint64_t std::vector<HSRecordingTypes::PlayFrame>::max_size(uint64_t a1)
{
  v3[1] = a1;
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  v3[0] = std::allocator_traits<std::allocator<HSRecordingTypes::PlayFrame>>::max_size[abi:ne180100]<std::allocator<HSRecordingTypes::PlayFrame>,void>();
  uint64_t v2 = std::numeric_limits<long>::max[abi:ne180100]();
  return *std::min[abi:ne180100]<unsigned long>(v3, &v2);
}

uint64_t std::allocator_traits<std::allocator<HSRecordingTypes::PlayFrame>>::max_size[abi:ne180100]<std::allocator<HSRecordingTypes::PlayFrame>,void>()
{
  return std::allocator<HSRecordingTypes::PlayFrame>::max_size[abi:ne180100]();
}

uint64_t std::allocator<HSRecordingTypes::PlayFrame>::max_size[abi:ne180100]()
{
  return 0x666666666666666;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<HSRecordingTypes::PlayFrame>>(uint64_t a1, unint64_t a2)
{
  return std::allocator<HSRecordingTypes::PlayFrame>::allocate[abi:ne180100](a1, a2);
}

void *std::allocator<HSRecordingTypes::PlayFrame>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 > std::allocator_traits<std::allocator<HSRecordingTypes::PlayFrame>>::max_size[abi:ne180100]<std::allocator<HSRecordingTypes::PlayFrame>,void>()) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return std::__libcpp_allocate[abi:ne180100](40 * a2, (std::align_val_t)8uLL);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HSRecordingTypes::PlayFrame>,std::reverse_iterator<HSRecordingTypes::PlayFrame*>,std::reverse_iterator<HSRecordingTypes::PlayFrame*>,std::reverse_iterator<HSRecordingTypes::PlayFrame*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v18[0] = a2;
  v18[1] = a3;
  v17[0] = a4;
  v17[1] = a5;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + MTRestZoneIntegrator_::clearMotion(this, 1) = a7;
  uint64_t v15 = a1;
  long long v14 = v16;
  std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>>::_AllocatorDestroyRangeReverse[abi:ne180100](&v12, a1, (uint64_t)&v14, (uint64_t)&v16);
  std::__make_exception_guard[abi:ne180100]<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>>>(&v12, v13);
  while (std::operator!=[abi:ne180100]<HSUtil::Encoder::ContainerRecord *,HSUtil::Encoder::ContainerRecord *>((uint64_t)v18, (uint64_t)v17))
  {
    uint64_t v9 = v15;
    std::__to_address[abi:ne180100]<std::reverse_iterator<HSRecordingTypes::PlayFrame *>,void>((uint64_t)&v16);
    uint64_t v10 = v7;
    uint64_t v11 = (const Frame *)std::reverse_iterator<HSRecordingTypes::PlayFrame *>::operator*[abi:ne180100]((uint64_t)v18);
    std::allocator_traits<std::allocator<HSRecordingTypes::PlayFrame>>::construct[abi:ne180100]<HSRecordingTypes::PlayFrame,HSRecordingTypes::PlayFrame const&,void>(v9, v10, v11);
    std::reverse_iterator<HSRecordingTypes::PlayFrame *>::operator++[abi:ne180100]((uint64_t)v18);
    std::reverse_iterator<HSRecordingTypes::PlayFrame *>::operator++[abi:ne180100]((uint64_t)&v16);
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>>>::__complete[abi:ne180100]((uint64_t)v13);
  long long v19 = v16;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HSRecordingTypes::PlayFrame>,std::reverse_iterator<HSRecordingTypes::PlayFrame*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v19;
}

void std::__to_address[abi:ne180100]<std::reverse_iterator<HSRecordingTypes::PlayFrame *>,void>(uint64_t a1)
{
}

uint64_t std::reverse_iterator<HSRecordingTypes::PlayFrame *>::operator*[abi:ne180100](uint64_t a1)
{
  return *(void *)(a1 + 8) - 40;
}

uint64_t std::reverse_iterator<HSRecordingTypes::PlayFrame *>::operator++[abi:ne180100](uint64_t result)
{
  *(void *)(result + 8) -= 40;
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HSRecordingTypes::PlayFrame>,std::reverse_iterator<HSRecordingTypes::PlayFrame*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    std::_AllocatorDestroyRangeReverse<std::allocator<HSRecordingTypes::PlayFrame>,std::reverse_iterator<HSRecordingTypes::PlayFrame*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__to_address_helper<std::reverse_iterator<HSRecordingTypes::PlayFrame *>,void>::__call[abi:ne180100](uint64_t a1)
{
}

uint64_t std::reverse_iterator<HSRecordingTypes::PlayFrame *>::operator->[abi:ne180100](uint64_t a1)
{
  return std::reverse_iterator<HSRecordingTypes::PlayFrame *>::operator*[abi:ne180100](a1);
}

BOOL std::_AllocatorDestroyRangeReverse<std::allocator<HSRecordingTypes::PlayFrame>,std::reverse_iterator<HSRecordingTypes::PlayFrame*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v3 = *(void *)a1;
  std::reverse_iterator<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>>::reverse_iterator[abi:ne180100]((uint64_t)v5, **(void **)(a1 + 16), *(void *)(*(void *)(a1 + 16) + 8));
  std::reverse_iterator<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>>::reverse_iterator[abi:ne180100]((uint64_t)v4, **(void **)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 8));
  return std::__allocator_destroy[abi:ne180100]<std::allocator<HSRecordingTypes::PlayFrame>,std::reverse_iterator<std::reverse_iterator<HSRecordingTypes::PlayFrame*>>,std::reverse_iterator<std::reverse_iterator<HSRecordingTypes::PlayFrame*>>>(v3, (uint64_t)v5, (uint64_t)v4);
}

BOOL std::__allocator_destroy[abi:ne180100]<std::allocator<HSRecordingTypes::PlayFrame>,std::reverse_iterator<std::reverse_iterator<HSRecordingTypes::PlayFrame*>>,std::reverse_iterator<std::reverse_iterator<HSRecordingTypes::PlayFrame*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  while (1)
  {
    BOOL result = std::operator!=[abi:ne180100]<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>>(a2, a3);
    if (!result) {
      break;
    }
    std::__to_address[abi:ne180100]<std::reverse_iterator<std::reverse_iterator<HSRecordingTypes::PlayFrame *>>,void>(a2);
    std::allocator_traits<std::allocator<HSUtil::CoderKey const*>>::destroy[abi:ne180100]<HSUtil::CoderKey const*,void>();
    std::reverse_iterator<std::reverse_iterator<HSRecordingTypes::PlayFrame *>>::operator++[abi:ne180100](a2);
  }
  return result;
}

void std::__to_address[abi:ne180100]<std::reverse_iterator<std::reverse_iterator<HSRecordingTypes::PlayFrame *>>,void>(uint64_t a1)
{
}

uint64_t std::reverse_iterator<std::reverse_iterator<HSRecordingTypes::PlayFrame *>>::operator++[abi:ne180100](uint64_t a1)
{
  return a1;
}

void std::__to_address_helper<std::reverse_iterator<std::reverse_iterator<HSRecordingTypes::PlayFrame *>>,void>::__call[abi:ne180100](uint64_t a1)
{
}

uint64_t std::reverse_iterator<std::reverse_iterator<HSRecordingTypes::PlayFrame *>>::operator->[abi:ne180100](uint64_t a1)
{
  return std::reverse_iterator<std::reverse_iterator<HSRecordingTypes::PlayFrame *>>::operator*[abi:ne180100](a1);
}

uint64_t std::reverse_iterator<std::reverse_iterator<HSRecordingTypes::PlayFrame *>>::operator*[abi:ne180100](uint64_t a1)
{
  uint64_t v4 = a1;
  long long v3 = *(_OWORD *)(a1 + 24);
  uint64_t v1 = std::reverse_iterator<HSRecordingTypes::PlayFrame *>::operator--[abi:ne180100]((uint64_t)&v3);
  return std::reverse_iterator<HSRecordingTypes::PlayFrame *>::operator*[abi:ne180100](v1);
}

uint64_t std::reverse_iterator<HSRecordingTypes::PlayFrame *>::operator--[abi:ne180100](uint64_t result)
{
  *(void *)(result + 8) += 40;
  return result;
}

void std::__split_buffer<HSRecordingTypes::PlayFrame>::clear[abi:ne180100](uint64_t a1)
{
}

uint64_t std::__split_buffer<HSRecordingTypes::PlayFrame>::capacity[abi:ne180100](void *a1)
{
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  return (*v1 - *a1) / 40;
}

void std::__split_buffer<HSRecordingTypes::PlayFrame>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
}

{
  while (a2 != *(void *)(a1 + 16))
  {
    std::__split_buffer<HSUtil::Encoder::ContainerRecord>::__alloc[abi:ne180100](a1);
    *(void *)(a1 + 16) -= 40;
    std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
    std::allocator_traits<std::allocator<HSUtil::CoderKey const*>>::destroy[abi:ne180100]<HSUtil::CoderKey const*,void>();
  }
}

uint64_t HSRecordingTypes::PlaybackDecoder::operator=(uint64_t a1, uint64_t a2)
{
  HSUtil::Decoder::operator=(a1, a2);
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::operator=[abi:ne180100]((uint64_t *)(a1 + 80), (void *)(a2 + 80));
  std::vector<HSRecordingTypes::PlayFrame>::operator=[abi:ne180100]((uint64_t *)(a1 + 96), (uint64_t *)(a2 + 96));
  return a1;
}

{
  return HSRecordingTypes::PlaybackDecoder::operator=(a1, a2);
}

uint64_t *std::vector<HSRecordingTypes::PlayFrame>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  return a1;
}

void std::vector<HSRecordingTypes::PlayFrame>::__move_assign(uint64_t *a1, uint64_t *a2)
{
  std::vector<HSRecordingTypes::PlayFrame>::__vdeallocate(a1);
  std::vector<HSUtil::Encoder::KeyState>::__move_assign_alloc[abi:ne180100]();
  *a1 = *a2;
  a1[1] = a2[1];
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v6 = *v2;
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  void *v3 = v6;
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  *uint64_t v4 = 0;
  a2[1] = 0;
  *a2 = 0;
}

void std::vector<HSRecordingTypes::PlayFrame>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<HSRecordingTypes::PlayFrame>::clear[abi:ne180100](a1);
    std::vector<HSUtil::CoderKey const*>::__annotate_delete[abi:ne180100]();
    std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
    uint64_t v5 = v1;
    uint64_t v4 = (void *)*a1;
    uint64_t v2 = std::vector<HSRecordingTypes::PlayFrame>::capacity[abi:ne180100](a1);
    std::allocator_traits<std::allocator<HSRecordingTypes::PlayFrame>>::deallocate[abi:ne180100](v5, v4, v2);
    std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
    void *v3 = 0;
    a1[1] = 0;
    *a1 = 0;
  }
}

void std::vector<HSRecordingTypes::PlayFrame>::clear[abi:ne180100](uint64_t *a1)
{
}

BOOL HSUtil::Decoder::setOffset(HSUtil::Decoder *this, unint64_t a2)
{
  BOOL result = HSUtil::Coder::fatalError(this);
  if (!result)
  {
    if (a2 > *((void *)this + 8)) {
      __assert_rtn("setOffset", "HSCoder.h", 526, "off <= _len");
    }
    *((void *)this + 9) = a2;
    *(_DWORD *)this = 0;
  }
  return result;
}

BOOL HSUtil::Decoder::decodeCodable<HSRecordingTypes::Frame>(HSUtil::Coder *a1, HSRecordingTypes::Frame *a2)
{
  uint64_t v6 = a1;
  uint64_t v5 = a2;
  BOOL result = HSUtil::Coder::fatalError(a1);
  if (!result)
  {
    unint64_t v4 = 0;
    unint64_t v4 = *((void *)a1 + 9);
    HSUtil::Decoder::_readCodable<HSRecordingTypes::Frame>(a1, &v4, v5);
    BOOL result = HSUtil::Coder::ok(a1);
    if (result) {
      *((void *)a1 + 9) = v4;
    }
  }
  return result;
}

void HSUtil::Decoder::_readCodable<HSRecordingTypes::Frame>(HSUtil::Decoder *a1, unint64_t *a2, HSRecordingTypes::Frame *a3)
{
  uint64_t v9 = a1;
  int v8 = a2;
  uint64_t v7 = a3;
  unint64_t v6 = 0;
  unint64_t v6 = *a2;
  unint64_t v5 = HSUtil::Decoder::_skipElement(a1, a2);
  if (HSUtil::Coder::ok(a1))
  {
    HSUtil::Decoder::_loadKeyTableIfNeeded(a1, v8);
    if (HSUtil::Coder::ok(a1))
    {
      HSUtil::Decoder::Decoder((HSUtil::Decoder *)v4, a1, v6, v5);
      if ((HSRecordingTypes::Frame::decode(v7, (HSUtil::Decoder *)v4) & 1) == 0) {
        *(_DWORD *)a1 = 10;
      }
      HSUtil::Decoder::~Decoder((HSUtil::Decoder *)v4);
    }
  }
}

void sub_BF1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, int a10, int a11, _Unwind_Exception *exception_object)
{
}

$_0::$_1 *$_0::$_1::$_1($_0::$_1 *this)
{
  return this;
}

{
  $_0::$_1 *result;

  *(unsigned char *)this = 0;
  Playback::Playback((Playback *)((char *)this + 8));
  BOOL result = this;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 2objc_storeStrong(location, 0) = 0;
  *((void *)this + 2MTRestZoneIntegrator_::clearMotion(this, 1) = 0;
  return result;
}

void *std::vector<objc_object * {__strong}>::__construct_one_at_end[abi:ne180100]<objc_object * const {__strong}&>(uint64_t a1, id *a2)
{
  uint64_t v9 = a1;
  int v8 = a2;
  std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::_ConstructTransaction::_ConstructTransaction[abi:ne180100](&v6, a1, 1);
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v5 = v2;
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  std::allocator_traits<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::construct[abi:ne180100]<HSStage * {__strong},HSStage * const {__strong}&,void>(v5, v3, v8);
  v7 += 8;
  return std::vector<HSUtil::Encoder::ContainerRecord>::_ConstructTransaction::~_ConstructTransaction[abi:ne180100](&v6);
}

void sub_BF304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, _Unwind_Exception *exception_object, uint64_t a15)
{
}

uint64_t std::vector<objc_object * {__strong}>::__push_back_slow_path<objc_object * const {__strong}&>(uint64_t *a1, id *a2)
{
  uint64_t v15 = a1;
  long long v14 = a2;
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v13 = v2;
  uint64_t v3 = std::vector<std::atomic<HSUtil::CoderKey const*>>::size[abi:ne180100](a1);
  unint64_t v9 = std::vector<objc_object * {__strong}>::__recommend[abi:ne180100](a1, v3 + 1);
  uint64_t v4 = std::vector<std::atomic<HSUtil::CoderKey const*>>::size[abi:ne180100](a1);
  std::__split_buffer<std::unique_ptr<HSUtil::EncoderBuf>>::__split_buffer(v11, v9, v4, v13);
  uint64_t v10 = v13;
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  std::allocator_traits<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::construct[abi:ne180100]<HSStage * {__strong},HSStage * const {__strong}&,void>(v10, v5, v14);
  v12 += 8;
  std::vector<objc_object * {__strong}>::__swap_out_circular_buffer(a1, v11);
  uint64_t v7 = a1[1];
  std::__split_buffer<objc_object * {__strong}>::~__split_buffer(v11);
  return v7;
}

void sub_BF3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, _Unwind_Exception *exception_object, void *a16)
{
}

unint64_t std::vector<objc_object * {__strong}>::__recommend[abi:ne180100](void *a1, uint64_t a2)
{
  v7[1] = a1;
  v7[0] = a2;
  unint64_t v6 = std::vector<objc_object * {__strong}>::max_size((uint64_t)a1);
  if (v7[0] > v6) {
    std::vector<std::unique_ptr<HSUtil::EncoderBuf>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v5 = std::vector<HSUtil::CoderKey const*>::capacity[abi:ne180100](a1);
  if (v5 >= v6 / 2) {
    return v6;
  }
  uint64_t v4 = 2 * v5;
  return *std::max[abi:ne180100]<unsigned long>(&v4, v7);
}

void std::vector<objc_object * {__strong}>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v15 = a1;
  long long v14 = a2;
  std::vector<HSUtil::CoderKey const*>::__annotate_delete[abi:ne180100]();
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v7 = v2;
  std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>::reverse_iterator[abi:ne180100](v12, a1[1]);
  std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>::reverse_iterator[abi:ne180100](v11, *a1);
  std::reverse_iterator<HSUtil::Encoder::ContainerRecord *>::reverse_iterator[abi:ne180100](v10, v14[1]);
  v13[0] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<objc_object * {__strong}>,std::reverse_iterator<objc_object * {__strong}*>,std::reverse_iterator<objc_object * {__strong}*>,std::reverse_iterator<objc_object * {__strong}*>>(v7, v12[0], v12[1], v11[0], v11[1], v10[0], v10[1]);
  v13[1] = v3;
  uint64_t v4 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)v13);
  v14[1] = v4;
  std::swap[abi:ne180100]<HSUtil::Encoder::ContainerRecord *>(a1, v14 + 1);
  std::swap[abi:ne180100]<HSUtil::Encoder::ContainerRecord *>(a1 + 1, v14 + 2);
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  int v8 = v5;
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  std::swap[abi:ne180100]<HSUtil::Encoder::ContainerRecord *>(v8, v6);
  *long long v14 = v14[1];
  std::vector<std::atomic<HSUtil::CoderKey const*>>::size[abi:ne180100](a1);
  std::allocator<HSUtil::CoderKey const*>::destroy[abi:ne180100]();
}

void **std::__split_buffer<objc_object * {__strong}>::~__split_buffer(void **a1)
{
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  std::__split_buffer<objc_object * {__strong}>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
  {
    uint64_t v2 = std::__split_buffer<HSUtil::Encoder::ContainerRecord>::__alloc[abi:ne180100]((uint64_t)a1);
    uint64_t v3 = *a1;
    uint64_t v4 = std::__split_buffer<std::unique_ptr<HSUtil::EncoderBuf>>::capacity[abi:ne180100](a1);
    std::allocator_traits<std::allocator<objc_object * {__strong}>>::deallocate[abi:ne180100](v2, v3, v4);
  }
  return a1;
}

uint64_t std::vector<objc_object * {__strong}>::max_size(uint64_t a1)
{
  v3[1] = a1;
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  v3[0] = std::allocator_traits<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::max_size[abi:ne180100]<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>,void>();
  uint64_t v2 = std::numeric_limits<long>::max[abi:ne180100]();
  return *std::min[abi:ne180100]<unsigned long>(v3, &v2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<objc_object * {__strong}>,std::reverse_iterator<objc_object * {__strong}*>,std::reverse_iterator<objc_object * {__strong}*>,std::reverse_iterator<objc_object * {__strong}*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v18[0] = a2;
  v18[1] = a3;
  v17[0] = a4;
  v17[1] = a5;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + MTRestZoneIntegrator_::clearMotion(this, 1) = a7;
  uint64_t v15 = a1;
  long long v14 = v16;
  std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>>::_AllocatorDestroyRangeReverse[abi:ne180100](&v12, a1, (uint64_t)&v14, (uint64_t)&v16);
  std::__make_exception_guard[abi:ne180100]<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>>>(&v12, v13);
  while (std::operator!=[abi:ne180100]<HSUtil::Encoder::ContainerRecord *,HSUtil::Encoder::ContainerRecord *>((uint64_t)v18, (uint64_t)v17))
  {
    uint64_t v9 = v15;
    std::__to_address[abi:ne180100]<std::reverse_iterator<objc_object * {__strong}*>,void>((uint64_t)&v16);
    uint64_t v10 = v7;
    uint64_t v11 = (uint64_t *)std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>::operator*[abi:ne180100]((uint64_t)v18);
    std::allocator_traits<std::allocator<objc_object * {__strong}>>::construct[abi:ne180100]<objc_object * {__strong},objc_object * {__strong},void>(v9, v10, v11);
    std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>::operator++[abi:ne180100]((uint64_t)v18);
    std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>::operator++[abi:ne180100]((uint64_t)&v16);
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<HSUtil::EncoderBuf>>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf>*>>>::__complete[abi:ne180100]((uint64_t)v13);
  long long v19 = v16;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<objc_object * {__strong}>,std::reverse_iterator<objc_object * {__strong}*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v19;
}

void std::allocator_traits<std::allocator<objc_object * {__strong}>>::construct[abi:ne180100]<objc_object * {__strong},objc_object * {__strong},void>(uint64_t a1, void *a2, uint64_t *a3)
{
}

void std::__to_address[abi:ne180100]<std::reverse_iterator<objc_object * {__strong}*>,void>(uint64_t a1)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<objc_object * {__strong}>,std::reverse_iterator<objc_object * {__strong}*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    std::_AllocatorDestroyRangeReverse<std::allocator<objc_object * {__strong}>,std::reverse_iterator<objc_object * {__strong}*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::allocator<objc_object * {__strong}>::construct[abi:ne180100]<objc_object * {__strong},objc_object * {__strong}>(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void std::__to_address_helper<std::reverse_iterator<objc_object * {__strong}*>,void>::__call[abi:ne180100](uint64_t a1)
{
}

BOOL std::_AllocatorDestroyRangeReverse<std::allocator<objc_object * {__strong}>,std::reverse_iterator<objc_object * {__strong}*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v3 = *(void *)a1;
  std::reverse_iterator<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>>::reverse_iterator[abi:ne180100]((uint64_t)v5, **(void **)(a1 + 16), *(void *)(*(void *)(a1 + 16) + 8));
  std::reverse_iterator<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>>::reverse_iterator[abi:ne180100]((uint64_t)v4, **(void **)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 8));
  return std::__allocator_destroy[abi:ne180100]<std::allocator<objc_object * {__strong}>,std::reverse_iterator<std::reverse_iterator<objc_object * {__strong}*>>,std::reverse_iterator<std::reverse_iterator<objc_object * {__strong}*>>>(v3, (uint64_t)v5, (uint64_t)v4);
}

BOOL std::__allocator_destroy[abi:ne180100]<std::allocator<objc_object * {__strong}>,std::reverse_iterator<std::reverse_iterator<objc_object * {__strong}*>>,std::reverse_iterator<std::reverse_iterator<objc_object * {__strong}*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  while (1)
  {
    BOOL result = std::operator!=[abi:ne180100]<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>,std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>>(a2, a3);
    if (!result) {
      break;
    }
    std::__to_address[abi:ne180100]<std::reverse_iterator<std::reverse_iterator<objc_object * {__strong}*>>,void>(a2);
    std::allocator_traits<std::allocator<objc_object * {__strong}>>::destroy[abi:ne180100]<objc_object * {__strong},void>(a1, v4);
    std::reverse_iterator<std::reverse_iterator<std::unique_ptr<HSUtil::EncoderBuf> *>>::operator++[abi:ne180100](a2);
  }
  return result;
}

void std::allocator_traits<std::allocator<objc_object * {__strong}>>::destroy[abi:ne180100]<objc_object * {__strong},void>(uint64_t a1, id *a2)
{
}

void std::__to_address[abi:ne180100]<std::reverse_iterator<std::reverse_iterator<objc_object * {__strong}*>>,void>(uint64_t a1)
{
}

void std::allocator<objc_object * {__strong}>::destroy[abi:ne180100](uint64_t a1, id *a2)
{
}

void std::__to_address_helper<std::reverse_iterator<std::reverse_iterator<objc_object * {__strong}*>>,void>::__call[abi:ne180100](uint64_t a1)
{
}

void std::__split_buffer<objc_object * {__strong}>::clear[abi:ne180100](uint64_t a1)
{
}

void std::allocator_traits<std::allocator<objc_object * {__strong}>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::__split_buffer<objc_object * {__strong}>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
}

{
  id *v2;
  uint64_t v3;

  while (a2 != *(void *)(a1 + 16))
  {
    uint64_t v3 = std::__split_buffer<HSUtil::Encoder::ContainerRecord>::__alloc[abi:ne180100](a1);
    *(void *)(a1 + 16) -= 8;
    std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
    std::allocator_traits<std::allocator<objc_object * {__strong}>>::destroy[abi:ne180100]<objc_object * {__strong},void>(v3, v2);
  }
}

void std::allocator<objc_object * {__strong}>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::vector<objc_object * {__strong}>::__destroy_vector::operator()[abi:ne180100](uint64_t **a1)
{
  if (**a1)
  {
    std::vector<objc_object * {__strong}>::__clear[abi:ne180100](*a1);
    std::vector<HSUtil::CoderKey const*>::__annotate_delete[abi:ne180100]();
    std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
    uint64_t v4 = v1;
    uint64_t v3 = (void *)**a1;
    uint64_t v2 = std::vector<HSUtil::CoderKey const*>::capacity[abi:ne180100](*a1);
    std::allocator_traits<std::allocator<objc_object * {__strong}>>::deallocate[abi:ne180100](v4, v3, v2);
  }
}

void std::vector<objc_object * {__strong}>::__clear[abi:ne180100](uint64_t *a1)
{
}

void std::vector<objc_object * {__strong}>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); a2 != i; i -= 8)
  {
    std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
    uint64_t v4 = v2;
    std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
    std::allocator_traits<std::allocator<objc_object * {__strong}>>::destroy[abi:ne180100]<objc_object * {__strong},void>(v4, v3);
  }
  *(void *)(a1 + 8) = a2;
}

double std::__math::fmin[abi:ne180100]<int>(double a1, double a2)
{
  return fmin(a1, a2);
}

double std::__math::fmax[abi:ne180100]<int>(double a1, double a2)
{
  return fmax(a1, a2);
}

void std::vector<objc_object * {__strong}>::__move_assign(uint64_t *a1, uint64_t *a2)
{
  std::vector<objc_object * {__strong}>::__vdeallocate(a1);
  std::vector<HSUtil::Encoder::KeyState>::__move_assign_alloc[abi:ne180100]();
  *a1 = *a2;
  a1[1] = a2[1];
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v6 = *v2;
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  void *v3 = v6;
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  *uint64_t v4 = 0;
  a2[1] = 0;
  *a2 = 0;
}

void std::vector<objc_object * {__strong}>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<objc_object * {__strong}>::clear[abi:ne180100](a1);
    std::vector<HSUtil::CoderKey const*>::__annotate_delete[abi:ne180100]();
    std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
    uint64_t v5 = v1;
    uint64_t v4 = (void *)*a1;
    uint64_t v2 = std::vector<HSUtil::CoderKey const*>::capacity[abi:ne180100](a1);
    std::allocator_traits<std::allocator<objc_object * {__strong}>>::deallocate[abi:ne180100](v5, v4, v2);
    std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
    void *v3 = 0;
    a1[1] = 0;
    *a1 = 0;
  }
}

void std::vector<objc_object * {__strong}>::clear[abi:ne180100](uint64_t *a1)
{
}

uint64_t std::allocate_shared[abi:ne180100]<HSUtil::Buffer,std::allocator<HSUtil::Buffer>,HSUtil::Buffer::CopyType const&,NSData * {__strong}&,void>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, void *a4@<X8>)
{
  uint64_t v13 = a4;
  uint64_t v12 = a1;
  uint64_t v11 = a2;
  uint64_t v10 = a3;
  std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::Buffer>>>::__allocation_guard[abi:ne180100]<std::allocator<HSUtil::Buffer>>((uint64_t)v9, 1);
  uint64_t v4 = (void *)std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v9);
  std::__shared_ptr_emplace<HSUtil::Buffer>::__shared_ptr_emplace[abi:ne180100]<HSUtil::Buffer::CopyType const&,NSData * {__strong}&,std::allocator<HSUtil::Buffer>,0>(v4, v11, v10);
  uint64_t v8 = std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__release_ptr[abi:ne180100]((uint64_t)v9);
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::shared_ptr<HSUtil::FileDescriptor>::__create_with_control_block[abi:ne180100]<HSUtil::FileDescriptor,std::__shared_ptr_emplace<HSUtil::FileDescriptor>>(v5, v8, a4);
  return std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::Buffer>>>::~__allocation_guard[abi:ne180100]((uint64_t)v9);
}

void sub_C00EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, _Unwind_Exception *exception_object, uint64_t a16, char a17)
{
}

void *std::__shared_ptr_emplace<HSUtil::Buffer>::__shared_ptr_emplace[abi:ne180100]<HSUtil::Buffer::CopyType const&,NSData * {__strong}&,std::allocator<HSUtil::Buffer>,0>(void *a1, uint64_t a2, void **a3)
{
  return a1;
}

{
  uint64_t v3;
  unsigned char v6[13];
  void **v7;
  uint64_t v8;
  void *v9;

  uint64_t v9 = a1;
  uint64_t v8 = a2;
  uint64_t v7 = a3;
  std::__shared_weak_count::__shared_weak_count[abi:ne180100]((uint64_t)a1, 0);
  *a1 = off_142948;
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::_Storage::_Storage[abi:ne180100]((uint64_t)(a1 + 3));
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::allocator_traits<std::allocator<HSUtil::Buffer>>::construct[abi:ne180100]<HSUtil::Buffer,HSUtil::Buffer::CopyType const&,NSData * {__strong}&,void>((uint64_t)v6, v3, v8, v7);
  return a1;
}

void sub_C01E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, int a11, int a12, _Unwind_Exception *exception_object)
{
}

uint64_t std::allocator_traits<std::allocator<HSUtil::Buffer>>::construct[abi:ne180100]<HSUtil::Buffer,HSUtil::Buffer::CopyType const&,NSData * {__strong}&,void>(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  return std::allocator<HSUtil::Buffer>::construct[abi:ne180100]<HSUtil::Buffer,HSUtil::Buffer::CopyType const&,NSData * {__strong}&>(a1, a2, a3, a4);
}

uint64_t std::allocator<HSUtil::Buffer>::construct[abi:ne180100]<HSUtil::Buffer,HSUtil::Buffer::CopyType const&,NSData * {__strong}&>(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  return HSUtil::Buffer::Buffer(a2, *a4);
}

void sub_C0324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, _Unwind_Exception *exception_object)
{
  objc_storeStrong((id *)(v15 - 24), 0);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_57()
{
  {
    {
      HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
    }
  }
}

void __cxx_global_var_init_2_54(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_54(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_49(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_49(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_49(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_49(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_50(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void __cxx_global_var_init_9_27(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)72,(char)83,(char)80,(char)108,(char)97,(char)121,(char)98,(char)97,(char)99,(char)107,(char)83,(char)116,(char)97,(char)103,(char)101,(char)80,(char)114,(char)111,(char)103,(char)114,(char)101,(char)115,(char)115,(char)69,(char)118,(char)101,(char)110,(char)116>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"HSPlaybackStageProgressEvent", a2);
  }
}

void sub_C06CC(uint64_t a1, int a2)
{
  *(void *)(v2 - 24) = a1;
  *(_DWORD *)(v2 - 28) = a2;
  objc_storeStrong((id *)(v2 - 8), 0);
  _Unwind_Resume(*(_Unwind_Exception **)(v2 - 24));
}

void sub_C09F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, int a11, int a12, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void sub_C0CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, _Unwind_Exception *exception_object, id a14)
{
}

void sub_C10A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, _Unwind_Exception *exception_object, id a14)
{
}

void sub_C112C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, id a13)
{
}

void sub_C1240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, char a13)
{
  objc_storeStrong((id *)(v13 - 24), 0);
  _Unwind_Resume(a1);
}

void sub_C13FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, id a13)
{
}

void sub_C14EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, _Unwind_Exception *exception_object, char a15)
{
  objc_storeStrong((id *)(v15 - 24), 0);
  _Unwind_Resume(a1);
}

void sub_C1668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, _Unwind_Exception *exception_object)
{
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](v17 - 48);
  _Unwind_Resume(a1);
}

uint64_t createRecordingBuffer@<X0>(size_t a1@<X0>, void *a2@<X8>)
{
  v15[1] = (size_t)a2;
  v15[0] = a1;
  if (!a1) {
    return _ZNSt3__111make_sharedB8ne180100IN6HSUtil6BufferEJEvEENS_10shared_ptrIT_EEDpOT0_(a2);
  }
  do
  {
    std::make_shared[abi:ne180100]<HSUtil::Buffer,HSUtil::Buffer::FixedType const&,unsigned long &,void>((uint64_t)&HSUtil::Buffer::Fixed, v15, v14);
    uint64_t v3 = (HSUtil::Buffer *)std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)v14);
    if (HSUtil::Buffer::valid(v3))
    {
      std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](a2, v14);
      int v13 = 1;
    }
    else
    {
      os_log_t oslog = &_os_log_default;
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
      {
        log = oslog;
        os_log_type_t v6 = type;
        __os_log_helper_16_0_1_8_0((uint64_t)v18, v15[0]);
        _os_log_error_impl(&def_411C8, log, v6, "Failed to allocate buffer with size 0x%zx", v18, 0xCu);
      }
      objc_storeStrong((id *)&oslog, 0);
      v15[0] /= 2uLL;
      BOOL v10 = v15[0] != 0;
      if (v15[0])
      {
        int v13 = 0;
      }
      else
      {
        uint64_t v9 = 0;
        uint64_t v9 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingPipeline/HSRecordingPlaybackStage.mm", v17);
        os_log_t v8 = &_os_log_default;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v4 = v8;
          __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v16, (uint64_t)"std::shared_ptr<Buffer> createRecordingBuffer(size_t)", (uint64_t)v9, 209, (uint64_t)"cap");
          _os_log_error_impl(&def_411C8, v4, OS_LOG_TYPE_ERROR, "Assertion failed (%s @ %s:%ju): %s", v16, 0x2Au);
        }
        objc_storeStrong((id *)&v8, 0);
        std::make_shared[abi:ne180100]<HSUtil::Buffer,HSUtil::Buffer::InvalidType const&,void>((uint64_t)&HSUtil::Buffer::Invalid, a2);
        int v13 = 1;
      }
    }
    uint64_t result = std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v14);
  }
  while (!v13);
  return result;
}

void sub_C1964()
{
  _Unwind_Resume(v0);
}

uint64_t std::make_shared[abi:ne180100]<HSUtil::Buffer,HSUtil::Buffer::FixedType const&,unsigned long &,void>@<X0>(uint64_t a1@<X0>, size_t *a2@<X1>, void *a3@<X8>)
{
  os_log_t v8 = a3;
  uint64_t v7 = a1;
  os_log_type_t v6 = a2;
  std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>::allocator[abi:ne180100]((uint64_t)&v5);
  return std::allocate_shared[abi:ne180100]<HSUtil::Buffer,std::allocator<HSUtil::Buffer>,HSUtil::Buffer::FixedType const&,unsigned long &,void>((uint64_t)&v5, v7, v6, a3);
}

uint64_t __os_log_helper_16_0_1_8_0(uint64_t result, uint64_t a2)
{
  *(unsigned char *)uint64_t result = 0;
  *(unsigned char *)(result + MTRestZoneIntegrator_::clearMotion(this, 1) = 1;
  *(unsigned char *)(result + 2) = 0;
  *(unsigned char *)(result + 3) = 8;
  *(void *)(result + 4) = a2;
  return result;
}

uint64_t std::make_shared[abi:ne180100]<HSUtil::Buffer,HSUtil::Buffer::InvalidType const&,void>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  os_log_type_t v6 = a2;
  uint64_t v5 = a1;
  std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>::allocator[abi:ne180100]((uint64_t)&v4);
  return std::allocate_shared[abi:ne180100]<HSUtil::Buffer,std::allocator<HSUtil::Buffer>,HSUtil::Buffer::InvalidType const&,void>((uint64_t)&v4, v5, a2);
}

void sub_C1C28(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  *(void *)(v12 - 88) = a1;
  *(_DWORD *)(v12 - 92) = a2;
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0xC1C54);
}

void sub_C1C4C()
{
  _Unwind_Resume(v0);
}

uint64_t HSUtil::Buffer::capacity(HSUtil::Buffer *this)
{
  if (HSUtil::Buffer::valid(this)) {
    return *((void *)this + 7);
  }
  else {
    return 0;
  }
}

uint64_t std::allocate_shared[abi:ne180100]<HSUtil::Buffer,std::allocator<HSUtil::Buffer>,HSUtil::Buffer::FixedType const&,unsigned long &,void>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, size_t *a3@<X2>, void *a4@<X8>)
{
  int v13 = a4;
  uint64_t v12 = a1;
  uint64_t v11 = a2;
  BOOL v10 = a3;
  std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::Buffer>>>::__allocation_guard[abi:ne180100]<std::allocator<HSUtil::Buffer>>((uint64_t)v9, 1);
  char v4 = (void *)std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v9);
  std::__shared_ptr_emplace<HSUtil::Buffer>::__shared_ptr_emplace[abi:ne180100]<HSUtil::Buffer::FixedType const&,unsigned long &,std::allocator<HSUtil::Buffer>,0>(v4, v11, v10);
  uint64_t v8 = std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__release_ptr[abi:ne180100]((uint64_t)v9);
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::shared_ptr<HSUtil::FileDescriptor>::__create_with_control_block[abi:ne180100]<HSUtil::FileDescriptor,std::__shared_ptr_emplace<HSUtil::FileDescriptor>>(v5, v8, a4);
  return std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::Buffer>>>::~__allocation_guard[abi:ne180100]((uint64_t)v9);
}

void sub_C20DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, _Unwind_Exception *exception_object, uint64_t a16, char a17)
{
}

void *std::__shared_ptr_emplace<HSUtil::Buffer>::__shared_ptr_emplace[abi:ne180100]<HSUtil::Buffer::FixedType const&,unsigned long &,std::allocator<HSUtil::Buffer>,0>(void *a1, uint64_t a2, size_t *a3)
{
  return a1;
}

{
  HSUtil::Buffer *v3;
  unsigned char v6[13];
  size_t *v7;
  uint64_t v8;
  void *v9;

  uint64_t v9 = a1;
  uint64_t v8 = a2;
  uint64_t v7 = a3;
  std::__shared_weak_count::__shared_weak_count[abi:ne180100]((uint64_t)a1, 0);
  *a1 = off_142948;
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::_Storage::_Storage[abi:ne180100]((uint64_t)(a1 + 3));
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::allocator_traits<std::allocator<HSUtil::Buffer>>::construct[abi:ne180100]<HSUtil::Buffer,HSUtil::Buffer::FixedType const&,unsigned long &,void>((uint64_t)v6, v3, v8, v7);
  return a1;
}

void sub_C21D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, int a11, int a12, _Unwind_Exception *exception_object)
{
}

HSUtil::Buffer *std::allocator_traits<std::allocator<HSUtil::Buffer>>::construct[abi:ne180100]<HSUtil::Buffer,HSUtil::Buffer::FixedType const&,unsigned long &,void>(uint64_t a1, HSUtil::Buffer *a2, uint64_t a3, size_t *a4)
{
  return std::allocator<HSUtil::Buffer>::construct[abi:ne180100]<HSUtil::Buffer,HSUtil::Buffer::FixedType const&,unsigned long &>(a1, a2, a3, a4);
}

HSUtil::Buffer *std::allocator<HSUtil::Buffer>::construct[abi:ne180100]<HSUtil::Buffer,HSUtil::Buffer::FixedType const&,unsigned long &>(uint64_t a1, HSUtil::Buffer *a2, uint64_t a3, size_t *a4)
{
  return HSUtil::Buffer::Buffer(a2, *a4);
}

HSUtil::Buffer *HSUtil::Buffer::Buffer(HSUtil::Buffer *a1, size_t a2)
{
  if (HSUtil::Buffer::valid(a1)) {
    *((unsigned char *)a1 + 64) = *((unsigned char *)a1 + 64) & 0xFD | 2;
  }
  return a1;
}

uint64_t std::allocate_shared[abi:ne180100]<HSUtil::Buffer,std::allocator<HSUtil::Buffer>,HSUtil::Buffer::InvalidType const&,void>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v11 = a3;
  uint64_t v10 = a1;
  uint64_t v9 = a2;
  std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::Buffer>>>::__allocation_guard[abi:ne180100]<std::allocator<HSUtil::Buffer>>((uint64_t)v8, 1);
  uint64_t v3 = (void *)std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v8);
  std::__shared_ptr_emplace<HSUtil::Buffer>::__shared_ptr_emplace[abi:ne180100]<HSUtil::Buffer::InvalidType const&,std::allocator<HSUtil::Buffer>,0>(v3, v9);
  uint64_t v7 = std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__release_ptr[abi:ne180100]((uint64_t)v8);
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::shared_ptr<HSUtil::FileDescriptor>::__create_with_control_block[abi:ne180100]<HSUtil::FileDescriptor,std::__shared_ptr_emplace<HSUtil::FileDescriptor>>(v4, v7, a3);
  return std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::Buffer>>>::~__allocation_guard[abi:ne180100]((uint64_t)v8);
}

void sub_C237C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, _Unwind_Exception *exception_object)
{
  std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::Buffer>>>::~__allocation_guard[abi:ne180100](v16 - 48);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<HSUtil::Buffer>::__shared_ptr_emplace[abi:ne180100]<HSUtil::Buffer::InvalidType const&,std::allocator<HSUtil::Buffer>,0>(void *a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t v2;
  unsigned char v5[13];
  uint64_t v6;
  void *v7;

  uint64_t v7 = a1;
  os_log_type_t v6 = a2;
  std::__shared_weak_count::__shared_weak_count[abi:ne180100]((uint64_t)a1, 0);
  *a1 = off_142948;
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::_Storage::_Storage[abi:ne180100]((uint64_t)(a1 + 3));
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::allocator_traits<std::allocator<HSUtil::Buffer>>::construct[abi:ne180100]<HSUtil::Buffer,HSUtil::Buffer::InvalidType const&,void>((uint64_t)v5, v2);
  return a1;
}

void sub_C2464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

uint64_t std::allocator_traits<std::allocator<HSUtil::Buffer>>::construct[abi:ne180100]<HSUtil::Buffer,HSUtil::Buffer::InvalidType const&,void>(uint64_t a1, uint64_t a2)
{
  return std::allocator<HSUtil::Buffer>::construct[abi:ne180100]<HSUtil::Buffer,HSUtil::Buffer::InvalidType const&>(a1, a2);
}

uint64_t std::allocator<HSUtil::Buffer>::construct[abi:ne180100]<HSUtil::Buffer,HSUtil::Buffer::InvalidType const&>(uint64_t a1, uint64_t a2)
{
  return HSUtil::Buffer::Buffer(a2);
}

void __cxx_global_var_init_58()
{
  {
    {
      HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
    }
  }
}

void __cxx_global_var_init_2_55(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_55(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_50(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_50(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_50(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_50(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_51(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

NSNumber *HSProxySynth::HSRecordingPlaybackStageProxy_0mode_call0<HSRecordingPlaybackStageMode>(id obj)
{
  id location = 0;
  objc_storeStrong(&location, obj);
  uint64_t v2 = HSProxySynth::Box<HSRecordingPlaybackStageMode>([location mode]);
  objc_storeStrong(&location, 0);

  return v2;
}

void sub_C28A8(uint64_t a1, int a2)
{
  *(void *)(v2 - std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a9 + 16) = a1;
  *(_DWORD *)(v2 - 2objc_storeStrong(location, 0) = a2;
  objc_storeStrong((id *)(v2 - 8), 0);
  _Unwind_Resume(*(_Unwind_Exception **)(v2 - 16));
}

void sub_C2928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, id location)
{
}

uint64_t HSProxySynth::Unbox<HSRecordingPlaybackStageMode>(id obj)
{
  id location = 0;
  objc_storeStrong(&location, obj);
  unsigned int v2 = HSProxySynth::_Unbox<int>(location);
  objc_storeStrong(&location, 0);
  return v2;
}

void sub_C2998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  objc_storeStrong((id *)(v12 - 8), 0);
  _Unwind_Resume(a1);
}

void sub_C2A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, _Unwind_Exception *exception_object)
{
  objc_storeStrong((id *)(v14 - 24), 0);
  _Unwind_Resume(a1);
}

uint64_t HSProxySynth::HSRecordingPlaybackStageProxy_setMode_call1<void>(void *a1, void *a2)
{
  id location = 0;
  objc_storeStrong(&location, a1);
  id v6 = 0;
  objc_storeStrong(&v6, a2);
  id v5 = location;
  id v3 = [v6 objectAtIndexedSubscript:0];
  [v5 setMode:HSProxySynth::Unbox<HSRecordingPlaybackStageMode>(v3)];

  objc_storeStrong(&v6, 0);
  objc_storeStrong(&location, 0);
  return 0;
}

void sub_C2B1C(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj, uint64_t a11, id a12)
{
  *(void *)(v12 - 24) = a1;
  *(_DWORD *)(v12 - 28) = a2;
  objc_storeStrong((id *)(v12 - 16), 0);
  objc_storeStrong((id *)(v12 - 8), 0);
  _Unwind_Resume(*(_Unwind_Exception **)(v12 - 24));
}

void sub_C2C70(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, id a11, uint64_t a12, uint64_t a13, id a14)
{
  *(void *)(v14 - 48) = a1;
  *(_DWORD *)(v14 - 52) = a2;

  _Unwind_Resume(*(_Unwind_Exception **)(v14 - 48));
}

NSNumber *HSProxySynth::Box<HSRecordingPlaybackStageMode>(unsigned int a1)
{
  return HSProxySynth::_Box((HSProxySynth *)a1);
}

void sub_C2D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, _Unwind_Exception *exception_object)
{
  objc_storeStrong((id *)(v14 - 24), 0);
  _Unwind_Resume(a1);
}

uint64_t HSProxySynth::HSRecordingPlaybackStageProxy_recordingSetMaxSize_call1<void>(void *a1, void *a2)
{
  id location = 0;
  objc_storeStrong(&location, a1);
  id v6 = 0;
  objc_storeStrong(&v6, a2);
  id v5 = location;
  id v3 = [v6 objectAtIndexedSubscript:0];
  [v5 recordingSetMaxSize:HSProxySynth::Unbox<unsigned long>(v3)];

  objc_storeStrong(&v6, 0);
  objc_storeStrong(&location, 0);
  return 0;
}

void sub_C2E54(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj, uint64_t a11, id a12)
{
  *(void *)(v12 - 24) = a1;
  *(_DWORD *)(v12 - 28) = a2;
  objc_storeStrong((id *)(v12 - 16), 0);
  objc_storeStrong((id *)(v12 - 8), 0);
  _Unwind_Resume(*(_Unwind_Exception **)(v12 - 24));
}

void sub_C2FA8(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, id a11, uint64_t a12, uint64_t a13, id a14)
{
  *(void *)(v14 - 48) = a1;
  *(_DWORD *)(v14 - 52) = a2;

  _Unwind_Resume(*(_Unwind_Exception **)(v14 - 48));
}

NSNumber *HSProxySynth::Box<unsigned long>(HSProxySynth *a1)
{
  return HSProxySynth::_Box(a1);
}

NSNumber *HSProxySynth::HSRecordingPlaybackStageProxy_0recordingSize_call0<unsigned long>(id obj)
{
  id location = 0;
  objc_storeStrong(&location, obj);
  unsigned int v2 = HSProxySynth::Box<unsigned long>((HSProxySynth *)[location recordingSize]);
  objc_storeStrong(&location, 0);

  return v2;
}

void sub_C30D8(uint64_t a1, int a2)
{
  *(void *)(v2 - std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a9 + 16) = a1;
  *(_DWORD *)(v2 - 2objc_storeStrong(&location, 0) = a2;
  objc_storeStrong((id *)(v2 - 8), 0);
  _Unwind_Resume(*(_Unwind_Exception **)(v2 - 16));
}

void sub_C3158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, id location)
{
}

id HSProxySynth::Unbox<unsigned long>(id obj)
{
  id location = 0;
  objc_storeStrong(&location, obj);
  id v2 = HSProxySynth::_Unbox<unsigned long>(location);
  objc_storeStrong(&location, 0);
  return v2;
}

void sub_C31C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  objc_storeStrong((id *)(v12 - 8), 0);
  _Unwind_Resume(a1);
}

NSNumber *HSProxySynth::HSRecordingPlaybackStageProxy_0playbackProgress_call0<float>(id obj)
{
  id location = 0;
  objc_storeStrong(&location, obj);
  uint64_t v1 = (HSProxySynth *)[location playbackProgress];
  uint64_t v4 = HSProxySynth::Box<float>(v1, v2);
  objc_storeStrong(&location, 0);

  return v4;
}

void sub_C3298(uint64_t a1, int a2)
{
  *(void *)(v2 - std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a9 + 16) = a1;
  *(_DWORD *)(v2 - 2objc_storeStrong(&location, 0) = a2;
  objc_storeStrong((id *)(v2 - 8), 0);
  _Unwind_Resume(*(_Unwind_Exception **)(v2 - 16));
}

void sub_C3318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, id location)
{
}

float HSProxySynth::Unbox<float>(id obj)
{
  id location = 0;
  objc_storeStrong(&location, obj);
  float v2 = HSProxySynth::_Unbox<float>(location);
  objc_storeStrong(&location, 0);
  return v2;
}

void sub_C3388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  objc_storeStrong((id *)(v12 - 8), 0);
  _Unwind_Resume(a1);
}

void sub_C3428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, _Unwind_Exception *exception_object)
{
  objc_storeStrong((id *)(v14 - 24), 0);
  _Unwind_Resume(a1);
}

uint64_t HSProxySynth::HSRecordingPlaybackStageProxy_playbackSetProgressdispatchEvent_call2<void>(void *a1, void *a2)
{
  id location = 0;
  objc_storeStrong(&location, a1);
  id v10 = 0;
  objc_storeStrong(&v10, a2);
  id v9 = location;
  id v6 = [v10 objectAtIndexedSubscript:0];
  float v7 = HSProxySynth::Unbox<float>(v6);
  id v4 = [v10 objectAtIndexedSubscript:1];
  char v5 = HSProxySynth::Unbox<BOOL>(v4);
  *(float *)&double v2 = v7;
  [v9 playbackSetProgress:v5 & 1 dispatchEvent:v2];

  objc_storeStrong(&v10, 0);
  objc_storeStrong(&location, 0);
  return 0;
}

void sub_C3550(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj, uint64_t a10, id a11, uint64_t a12, uint64_t a13, id a14)
{
  *(void *)(v14 - 24) = a1;
  *(_DWORD *)(v14 - 28) = a2;
  objc_storeStrong((id *)(v14 - 16), 0);
  objc_storeStrong((id *)(v14 - 8), 0);
  _Unwind_Resume(*(_Unwind_Exception **)(v14 - 24));
}

void sub_C3700(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, id a10, uint64_t a11, uint64_t a12, id a13, uint64_t a14, id a15)
{
  *(void *)(v15 - 56) = a1;
  *(_DWORD *)(v15 - 6objc_storeStrong(&location, 0) = a2;

  _Unwind_Resume(*(_Unwind_Exception **)(v15 - 56));
}

NSNumber *HSProxySynth::Box<float>(HSProxySynth *a1, double a2)
{
  return HSProxySynth::_Box(a1, a2);
}

uint64_t HSProxySynth::_Unbox<int>(id obj)
{
  id location = 0;
  objc_storeStrong(&location, obj);
  unsigned int v2 = [location intValue];
  objc_storeStrong(&location, 0);
  return v2;
}

void sub_C37F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  objc_storeStrong((id *)(v12 - 8), 0);
  _Unwind_Resume(a1);
}

id HSProxySynth::_Unbox<unsigned long>(id obj)
{
  id location = 0;
  objc_storeStrong(&location, obj);
  id v2 = [location unsignedLongValue];
  objc_storeStrong(&location, 0);
  return v2;
}

void sub_C38C8(uint64_t a1, int a2)
{
  *(void *)(v2 - std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a9 + 16) = a1;
  *(_DWORD *)(v2 - 2objc_storeStrong(&location, 0) = a2;
  objc_storeStrong((id *)(v2 - 8), 0);
  _Unwind_Resume(*(_Unwind_Exception **)(v2 - 16));
}

float HSProxySynth::_Unbox<float>(id obj)
{
  id location = 0;
  objc_storeStrong(&location, obj);
  [location floatValue];
  float v3 = v1;
  objc_storeStrong(&location, 0);
  return v3;
}

void sub_C393C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  objc_storeStrong((id *)(v12 - 8), 0);
  _Unwind_Resume(a1);
}

NSNumber *HSProxySynth::_Box(HSProxySynth *this, double a2)
{
  return +[NSNumber numberWithFloat:a2];
}

void __cxx_global_var_init_59()
{
  {
    {
      HSUtil::Coder::_ObjectType = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
    }
  }
}

void sub_C3E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, _Unwind_Exception *exception_object, id a14)
{
}

void std::unordered_set<HSStage  {objcproto15HSPreferencable}* {__weak},HSUtil::ObjectHasher,std::equal_to<HSStage  {objcproto15HSPreferencable}* {__weak}>,std::allocator<HSStage  {objcproto15HSPreferencable}* {__weak}>>::clear[abi:ne180100](uint64_t a1)
{
}

void collectStages(uint64_t a1, void *a2)
{
  uint64_t v15 = a1;
  id location = 0;
  objc_storeStrong(&location, a2);
  uint64_t v13 = std::unordered_set<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::find[abi:ne180100](v15, &location);
  uint64_t v12 = std::unordered_set<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::end[abi:ne180100](v15);
  if (std::operator!=[abi:ne180100](&v13, &v12))
  {
    int v11 = 1;
  }
  else
  {
    v10[1] = (id)std::unordered_set<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::insert[abi:ne180100](v15, &location);
    uint64_t v10[2] = v2;
    memset(__b, 0, sizeof(__b));
    id obj = [location consumers];
    id v8 = [obj countByEnumeratingWithState:__b objects:v16 count:16];
    if (v8)
    {
      uint64_t v4 = *(void *)__b[2];
      uint64_t v5 = 0;
      id v6 = v8;
      while (1)
      {
        uint64_t v3 = v5;
        if (*(void *)__b[2] != v4) {
          objc_enumerationMutation(obj);
        }
        v10[0] = *(id *)(__b[1] + 8 * v5);
        collectStages(v15, v10[0]);
        objc_storeStrong(v10, 0);
        ++v5;
        if (v3 + 1 >= (unint64_t)v6)
        {
          uint64_t v5 = 0;
          id v6 = [obj countByEnumeratingWithState:__b objects:v16 count:16];
          if (!v6) {
            break;
          }
        }
      }
    }

    int v11 = 0;
  }
  objc_storeStrong(&location, 0);
}

void sub_C43A8(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id location)
{
  *(void *)(v34 - 184) = a1;
  *(_DWORD *)(v34 - 188) = a2;

  objc_storeStrong((id *)(v34 - 168), 0);
  JUMPOUT(0xC4410);
}

void sub_C4408()
{
  _Unwind_Resume(v0);
}

uint64_t std::unordered_set<HSStage  {objcproto15HSPreferencable}* {__weak},HSUtil::ObjectHasher,std::equal_to<HSStage  {objcproto15HSPreferencable}* {__weak}>,std::allocator<HSStage  {objcproto15HSPreferencable}* {__weak}>>::insert[abi:ne180100](uint64_t a1, id *a2)
{
  void v4[3] = a1;
  void v4[2] = a2;
  v4[0] = std::__hash_table<HSStage  {objcproto15HSPreferencable}* {__weak},HSUtil::ObjectHasher,std::equal_to<HSStage  {objcproto15HSPreferencable}* {__weak}>,std::allocator<HSStage  {objcproto15HSPreferencable}* {__weak}>>::__insert_unique[abi:ne180100](a1, a2);
  v4[1] = v2;
  std::pair<std::__hash_const_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL>::pair[abi:ne180100]<std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL,0>((uint64_t)&v5, (uint64_t)v4);
  return v5;
}

void sub_C4F5C()
{
  _Unwind_Resume(v0);
}

void sub_C596C()
{
  _Unwind_Resume(v0);
}

void $_1::~$_1($_1 *this)
{
}

{
  std::unordered_set<HSStage  {objcproto15HSPreferencable}* {__weak},HSUtil::ObjectHasher,std::equal_to<HSStage  {objcproto15HSPreferencable}* {__weak}>,std::allocator<HSStage  {objcproto15HSPreferencable}* {__weak}>>::~unordered_set[abi:ne180100]((uint64_t)this + 8);
}

void sub_C6470()
{
  _Unwind_Resume(v0);
}

id HSUtil::Decoder::decodeNSString(HSUtil::Decoder *this)
{
  v5[1] = (unint64_t)this;
  if (HSUtil::Coder::fatalError(this))
  {
    id v6 = 0;
  }
  else
  {
    v5[0] = 0;
    v5[0] = *((void *)this + 9);
    id location = HSUtil::Decoder::_readNSString(this, v5);
    if (HSUtil::Coder::ok(this))
    {
      *((void *)this + 9) = v5[0];
      id v6 = location;
    }
    else
    {
      id v6 = 0;
    }
    objc_storeStrong(&location, 0);
  }
  float v1 = v6;

  return v1;
}

uint64_t HSUtil::Decoder::getElementType(HSUtil::Decoder *this)
{
  v4[1] = (unint64_t)this;
  if (HSUtil::Coder::fatalError(this))
  {
    return 0;
  }
  else
  {
    v4[0] = 0;
    v4[0] = *((void *)this + 9);
    unsigned __int8 Type = HSUtil::Decoder::_readType(this, v4);
    if (HSUtil::Coder::ok(this)) {
      return Type;
    }
    else {
      return 0;
    }
  }
}

uint64_t std::unordered_set<HSStage  {objcproto15HSPreferencable}* {__weak},HSUtil::ObjectHasher,std::equal_to<HSStage  {objcproto15HSPreferencable}* {__weak}>,std::allocator<HSStage  {objcproto15HSPreferencable}* {__weak}>>::~unordered_set[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::__hash_table<HSStage  {objcproto15HSPreferencable}* {__weak},HSUtil::ObjectHasher,std::equal_to<HSStage  {objcproto15HSPreferencable}* {__weak}>,std::allocator<HSStage  {objcproto15HSPreferencable}* {__weak}>>::~__hash_table(a1);
  return a1;
}

uint64_t std::__hash_table<HSStage  {objcproto15HSPreferencable}* {__weak},HSUtil::ObjectHasher,std::equal_to<HSStage  {objcproto15HSPreferencable}* {__weak}>,std::allocator<HSStage  {objcproto15HSPreferencable}* {__weak}>>::~__hash_table(uint64_t a1)
{
  return a1;
}

{
  void **v1;

  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  std::__hash_table<HSStage  {objcproto15HSPreferencable}* {__weak},HSUtil::ObjectHasher,std::equal_to<HSStage  {objcproto15HSPreferencable}* {__weak}>,std::allocator<HSStage  {objcproto15HSPreferencable}* {__weak}>>::__deallocate_node(a1, *v1);
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> *>>>::~unique_ptr[abi:ne180100](a1);
  return a1;
}

void std::__hash_table<HSStage  {objcproto15HSPreferencable}* {__weak},HSUtil::ObjectHasher,std::equal_to<HSStage  {objcproto15HSPreferencable}* {__weak}>,std::allocator<HSStage  {objcproto15HSPreferencable}* {__weak}>>::__deallocate_node(uint64_t a1, void *a2)
{
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v7 = v2;
  while (a2)
  {
    id v6 = (void *)*a2;
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    uint64_t v5 = (void *)v3;
    std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100](v3);
    std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
    std::allocator_traits<std::allocator<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *>>>::destroy[abi:ne180100]<objc_object  {objcproto15HSStageObserver}*,void,void>(v7, v4);
    std::__destroy_at[abi:ne180100]<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>,0>((uint64_t)v5);
    std::allocator_traits<std::allocator<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *>>>::deallocate[abi:ne180100](v7, v5, 1);
    a2 = v6;
  }
}

uint64_t std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> *>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> *>>>::reset[abi:ne180100]();
  return a1;
}

void std::allocator_traits<std::allocator<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *>>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::allocator<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> *>>>::reset[abi:ne180100]()
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  uint64_t v3 = *v0;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v1 = 0;
  if (v3)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> *>>::operator()[abi:ne180100](v2, v3);
  }
}

void std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> *>>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  uint64_t v4 = v2;
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  std::allocator_traits<std::allocator<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> *>>::deallocate[abi:ne180100](v4, a2, *v3);
}

void std::allocator_traits<std::allocator<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> *>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::allocator<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> *>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

uint64_t std::unordered_set<HSStage  {objcproto15HSPreferencable}* {__weak},HSUtil::ObjectHasher,std::equal_to<HSStage  {objcproto15HSPreferencable}* {__weak}>,std::allocator<HSStage  {objcproto15HSPreferencable}* {__weak}>>::unordered_set[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::__hash_table<HSStage  {objcproto15HSPreferencable}* {__weak},HSUtil::ObjectHasher,std::equal_to<HSStage  {objcproto15HSPreferencable}* {__weak}>,std::allocator<HSStage  {objcproto15HSPreferencable}* {__weak}>>::__hash_table(a1);
  return a1;
}

uint64_t std::__hash_table<HSStage  {objcproto15HSPreferencable}* {__weak},HSUtil::ObjectHasher,std::equal_to<HSStage  {objcproto15HSPreferencable}* {__weak}>,std::allocator<HSStage  {objcproto15HSPreferencable}* {__weak}>>::__hash_table(uint64_t a1)
{
  return a1;
}

{
  float v3;
  int v4;
  uint64_t v5;

  uint64_t v5 = a1;
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> *>>>::unique_ptr[abi:ne180100]<true,void>((void *)a1);
  std::__compressed_pair<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>>::__compressed_pair[abi:ne180100]<true,void>((void *)(a1 + 16));
  uint64_t v4 = 0;
  std::__compressed_pair<unsigned long,HSUtil::ObjectHasher>::__compressed_pair[abi:ne180100]<int,std::__default_init_tag>((void *)(a1 + 24), &v4);
  uint64_t v3 = 1.0;
  std::__compressed_pair<float,std::equal_to<HSStage * {__strong}>>::__compressed_pair[abi:ne180100]<float,std::__default_init_tag>((_DWORD *)(a1 + 32), &v3);
  return a1;
}

void *std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> *>>>::unique_ptr[abi:ne180100]<true,void>(void *a1)
{
  return a1;
}

{
  std::__compressed_pair<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> *>>>::__compressed_pair[abi:ne180100]<std::__value_init_tag,std::__value_init_tag>(a1);
  return a1;
}

void *std::__compressed_pair<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> *>>>::__compressed_pair[abi:ne180100]<std::__value_init_tag,std::__value_init_tag>(void *a1)
{
  return a1;
}

{
  std::__compressed_pair_elem<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> **,0,false>::__compressed_pair_elem[abi:ne180100](a1);
  std::__compressed_pair_elem<std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> *>>,1,false>::__compressed_pair_elem[abi:ne180100](a1 + 1);
  return a1;
}

void *std::__compressed_pair_elem<std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> *>>,1,false>::__compressed_pair_elem[abi:ne180100](void *a1)
{
  return a1;
}

void *std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> *>>::__bucket_list_deallocator[abi:ne180100](void *a1)
{
  return a1;
}

{
  int v3;
  void *v4;

  uint64_t v4 = a1;
  uint64_t v3 = 0;
  std::__compressed_pair<unsigned long,std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::__compressed_pair[abi:ne180100]<int,std::__default_init_tag>(a1, &v3);
  return a1;
}

uint64_t HSUtil::Decoder::_readType(HSUtil::Decoder *this, unint64_t *a2)
{
  unsigned __int8 Token = HSUtil::Decoder::_readToken(this, a2);
  if (HSUtil::Coder::ok(this))
  {
    if (Token <= 0x80u)
    {
      uint64_t v3 = Token - 128;
      char v2 = 0;
    }
    else
    {
      uint64_t v3 = Token - 128;
      char v2 = 1;
    }
    if ((v2 & 1) == 0)
    {
      switch(v3)
      {
        case 0:
        case 1:
        case 2:
        case 3:
          return 0;
        case 4:
        case 5:
        case 6:
        case 7:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
          return -124;
        case 8:
        case 9:
          return -120;
        case 10:
        case 11:
          return -118;
        case 12:
          return -116;
        case 13:
        case 14:
        case 15:
          return -115;
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
          break;
        case 96:
        case 97:
        case 98:
          return -32;
        case 99:
        case 100:
        case 101:
          return -29;
        case 102:
        case 103:
        case 104:
          return -26;
        case 105:
        case 106:
        case 107:
          return -23;
        case 108:
        case 109:
        case 110:
          return -20;
        case 111:
          return -17;
        default:
          JUMPOUT(0);
      }
    }
    if (Token - 144 <= 0x4F)
    {
      return -115;
    }
    else if (Token <= 0x7Fu)
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
  return v7;
}

void std::__hash_table<HSStage  {objcproto15HSPreferencable}* {__weak},HSUtil::ObjectHasher,std::equal_to<HSStage  {objcproto15HSPreferencable}* {__weak}>,std::allocator<HSStage  {objcproto15HSPreferencable}* {__weak}>>::clear(uint64_t a1)
{
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  if (*v1)
  {
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    std::__hash_table<HSStage  {objcproto15HSPreferencable}* {__weak},HSUtil::ObjectHasher,std::equal_to<HSStage  {objcproto15HSPreferencable}* {__weak}>,std::allocator<HSStage  {objcproto15HSPreferencable}* {__weak}>>::__deallocate_node(a1, *v2);
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    void *v3 = 0;
    unint64_t v7 = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::bucket_count[abi:ne180100]();
    for (unint64_t i = 0; i < v7; ++i)
      *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, i) = 0;
    std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
    *uint64_t v4 = 0;
  }
}

uint64_t std::__hash_table<HSStage  {objcproto15HSPreferencable}* {__weak},HSUtil::ObjectHasher,std::equal_to<HSStage  {objcproto15HSPreferencable}* {__weak}>,std::allocator<HSStage  {objcproto15HSPreferencable}* {__weak}>>::__insert_unique[abi:ne180100](uint64_t a1, id *a2)
{
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  return std::__hash_table<HSStage  {objcproto15HSPreferencable}* {__weak},HSUtil::ObjectHasher,std::equal_to<HSStage  {objcproto15HSPreferencable}* {__weak}>,std::allocator<HSStage  {objcproto15HSPreferencable}* {__weak}>>::__emplace_unique_key_args<HSStage  {objcproto15HSPreferencable}* {__weak},HSStage  {objcproto15HSPreferencable}* {__weak}>(a1, v2, a2);
}

uint64_t std::__hash_table<HSStage  {objcproto15HSPreferencable}* {__weak},HSUtil::ObjectHasher,std::equal_to<HSStage  {objcproto15HSPreferencable}* {__weak}>,std::allocator<HSStage  {objcproto15HSPreferencable}* {__weak}>>::__emplace_unique_key_args<HSStage  {objcproto15HSPreferencable}* {__weak},HSStage  {objcproto15HSPreferencable}* {__weak}>(uint64_t a1, id *a2, id *a3)
{
  uint64_t v47 = a1;
  char v46 = a2;
  uint64_t v45 = a3;
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  unint64_t v31 = v3;
  id WeakRetained = objc_loadWeakRetained(v46);
  uint64_t v33 = HSUtil::ObjectHasher::operator()(v31, WeakRetained);

  unint64_t v44 = v33;
  unint64_t v43 = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::bucket_count[abi:ne180100]();
  char v42 = 0;
  if (v43)
  {
    uint64_t v40 = std::__constrain_hash[abi:ne180100](v44, v43);
    unint64_t i = *(uint64_t **)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v40);
    if (i)
    {
      for (unint64_t i = (uint64_t *)*i; ; unint64_t i = (uint64_t *)*i)
      {
        BOOL v30 = 0;
        if (i)
        {
          BOOL v29 = 1;
          if (std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i) != v44)
          {
            unint64_t v4 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i);
            BOOL v29 = std::__constrain_hash[abi:ne180100](v4, v43) == v40;
          }
          BOOL v30 = v29;
        }
        if (!v30) {
          break;
        }
        if (std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)i) == v44)
        {
          std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
          uint64_t v28 = v5;
          std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
          unint64_t v7 = (id *)std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100](v6);
          if (std::equal_to<objc_object  {objcproto15HSStageObserver}* {__weak}>::operator()[abi:ne180100](v28, v7, v46))
          {
            goto LABEL_21;
          }
        }
      }
    }
  }
  std::__hash_table<HSStage  {objcproto15HSPreferencable}* {__weak},HSUtil::ObjectHasher,std::equal_to<HSStage  {objcproto15HSPreferencable}* {__weak}>,std::allocator<HSStage  {objcproto15HSPreferencable}* {__weak}>>::__construct_node_hash<HSStage  {objcproto15HSPreferencable}* {__weak}>(a1, v44, v45, (uint64_t)v39);
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  float v27 = (float)(unint64_t)(*v8 + 1);
  float v26 = (float)v43;
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
  if (v27 > (float)(v26 * *v9) || !v43)
  {
    unint64_t v23 = 2 * v43;
    unint64_t v38 = v23 + !std::__is_hash_power2[abi:ne180100](v43);
    std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
    float v24 = (float)(unint64_t)(*v10 + 1);
    std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
    unint64_t v37 = (unint64_t)std::__math::ceil[abi:ne180100](v24 / *v11);
    uint64_t v25 = std::max[abi:ne180100]<unsigned long>(&v38, &v37);
    std::__hash_table<HSStage  {objcproto15HSPreferencable}* {__weak},HSUtil::ObjectHasher,std::equal_to<HSStage  {objcproto15HSPreferencable}* {__weak}>,std::allocator<HSStage  {objcproto15HSPreferencable}* {__weak}>>::__rehash_unique[abi:ne180100](a1, *v25);
    unint64_t v43 = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::bucket_count[abi:ne180100]();
    uint64_t v40 = std::__constrain_hash[abi:ne180100](v44, v43);
  }
  unint64_t v36 = *(uint64_t **)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v40);
  if (v36)
  {
    uint64_t v20 = *v36;
    *(void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]() = v20;
    *unint64_t v36 = std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  }
  else
  {
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    unint64_t v36 = v12;
    uint64_t v22 = *v12;
    *(void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]() = v22;
    std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    *unint64_t v36 = v13;
    *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v4objc_storeStrong(&location, 0) = v36;
    if (*(void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]())
    {
      std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
      std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
      uint64_t v21 = v14;
      uint64_t v15 = (uint64_t *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
      unint64_t v16 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100](*v15);
      uint64_t v17 = std::__constrain_hash[abi:ne180100](v16, v43);
      *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v1std::vector<HSUtil::Encoder::ContainerRecord>::~vector[abi:ne180100]((uint64_t *)this + 7) = v21;
    }
  }
  unint64_t i = (uint64_t *)std::unique_ptr<std::__hash_node<HSStage * {__strong},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::release[abi:ne180100]();
  std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
  ++*v18;
  char v42 = 1;
  std::unique_ptr<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)v39);
LABEL_21:
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](&v35, (uint64_t)i);
  std::pair<std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL>::pair[abi:ne180100]<std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL &,0>((uint64_t)&v48, &v35, &v42);
  return v48;
}

void std::__hash_table<HSStage  {objcproto15HSPreferencable}* {__weak},HSUtil::ObjectHasher,std::equal_to<HSStage  {objcproto15HSPreferencable}* {__weak}>,std::allocator<HSStage  {objcproto15HSPreferencable}* {__weak}>>::__construct_node_hash<HSStage  {objcproto15HSPreferencable}* {__weak}>(uint64_t a1@<X0>, uint64_t a2@<X1>, id *a3@<X2>, uint64_t a4@<X8>)
{
  void v17[2] = a4;
  v17[1] = a1;
  v17[0] = a2;
  unint64_t v16 = a3;
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v15 = v4;
  char v14 = 0;
  id v9 = std::allocator_traits<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::allocate[abi:ne180100](v4, 1uLL);
  std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::__hash_node_destructor[abi:ne180100]((uint64_t)&v13, v15, 0);
  std::unique_ptr<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *>>>>::unique_ptr[abi:ne180100]<true,void>(a4, (uint64_t)v9, &v13);
  int v11 = (void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  uint64_t v12 = 0;
  std::__construct_at[abi:ne180100]<std::__hash_node<HSStage * {__strong},void *>,decltype(nullptr),unsigned long &,std::__hash_node<HSStage * {__strong},void *>*>(v11, (uint64_t)&v12, v17);
  uint64_t v8 = v15;
  uint64_t v5 = std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100](v5);
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  std::allocator_traits<std::allocator<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *>>>::construct[abi:ne180100]<HSStage  {objcproto15HSPreferencable}* {__weak},HSStage  {objcproto15HSPreferencable}* {__weak},void>(v8, v6, v16);
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::get_deleter[abi:ne180100]();
  *(unsigned char *)(v7 + 8) = 1;
}

void std::__hash_table<HSStage  {objcproto15HSPreferencable}* {__weak},HSUtil::ObjectHasher,std::equal_to<HSStage  {objcproto15HSPreferencable}* {__weak}>,std::allocator<HSStage  {objcproto15HSPreferencable}* {__weak}>>::__rehash_unique[abi:ne180100](uint64_t a1, unint64_t a2)
{
}

uint64_t std::unique_ptr<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *>>>>::reset[abi:ne180100](a1, 0);
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *>>>>::unique_ptr[abi:ne180100]<true,void>(uint64_t a1, uint64_t a2, __n128 *a3)
{
  return a1;
}

{
  void v5[2];

  v5[1] = a1;
  v5[0] = a2;
  std::__compressed_pair<std::__hash_node<HSStage * {__strong},void *> *,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::__compressed_pair[abi:ne180100]<std::__hash_node<HSStage * {__strong},void *> *&,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>(a1, v5, a3);
  return a1;
}

void std::allocator_traits<std::allocator<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *>>>::construct[abi:ne180100]<HSStage  {objcproto15HSPreferencable}* {__weak},HSStage  {objcproto15HSPreferencable}* {__weak},void>(uint64_t a1, id *a2, id *a3)
{
}

void std::allocator<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *>>::construct[abi:ne180100]<HSStage  {objcproto15HSPreferencable}* {__weak},HSStage  {objcproto15HSPreferencable}* {__weak}>(uint64_t a1, id *a2, id *a3)
{
}

void std::__hash_table<HSStage  {objcproto15HSPreferencable}* {__weak},HSUtil::ObjectHasher,std::equal_to<HSStage  {objcproto15HSPreferencable}* {__weak}>,std::allocator<HSStage  {objcproto15HSPreferencable}* {__weak}>>::__rehash<true>(uint64_t a1, unint64_t a2)
{
  v14[1] = a1;
  v14[0] = a2;
  if (a2 == 1)
  {
    v14[0] = 2;
  }
  else if ((v14[0] & (v14[0] - 1)) != 0)
  {
    v14[0] = std::__next_prime(v14[0]);
  }
  unint64_t v13 = std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::bucket_count[abi:ne180100]();
  if (v14[0] <= v13)
  {
    if (v14[0] < v13)
    {
      if (std::__is_hash_power2[abi:ne180100](v13))
      {
        std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
        float v9 = (float)*v2;
        std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
        float v4 = std::__math::ceil[abi:ne180100](v9 / *v3);
        size_t prime = std::__next_hash_pow2[abi:ne180100]((unint64_t)v4);
      }
      else
      {
        std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::hash_function[abi:ne180100]();
        float v8 = (float)*v5;
        std::__hash_table<HSStage * {__strong},HSUtil::ObjectHasher,std::equal_to<HSStage * {__strong}>,std::allocator<HSStage * {__strong}>>::key_eq[abi:ne180100]();
        float v7 = std::__math::ceil[abi:ne180100](v8 / *v6);
        size_t prime = std::__next_prime((unint64_t)v7);
      }
      size_t v12 = prime;
      v14[0] = *std::max[abi:ne180100]<unsigned long>(v14, &v12);
      if (v14[0] < v13) {
        std::__hash_table<HSStage  {objcproto15HSPreferencable}* {__weak},HSUtil::ObjectHasher,std::equal_to<HSStage  {objcproto15HSPreferencable}* {__weak}>,std::allocator<HSStage  {objcproto15HSPreferencable}* {__weak}>>::__do_rehash<true>(a1, v14[0]);
      }
    }
  }
  else
  {
    std::__hash_table<HSStage  {objcproto15HSPreferencable}* {__weak},HSUtil::ObjectHasher,std::equal_to<HSStage  {objcproto15HSPreferencable}* {__weak}>,std::allocator<HSStage  {objcproto15HSPreferencable}* {__weak}>>::__do_rehash<true>(a1, v14[0]);
  }
}

void std::__hash_table<HSStage  {objcproto15HSPreferencable}* {__weak},HSUtil::ObjectHasher,std::equal_to<HSStage  {objcproto15HSPreferencable}* {__weak}>,std::allocator<HSStage  {objcproto15HSPreferencable}* {__weak}>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::get_deleter[abi:ne180100]();
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  if (a2)
  {
    float v7 = std::allocator_traits<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::allocate[abi:ne180100](v2, a2);
    std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> *>>>::reset[abi:ne180100]<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> **,0>(a1, (uint64_t)v7);
  }
  else
  {
    std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> *>>>::reset[abi:ne180100]<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> **,0>(a1, 0);
  }
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::get_deleter[abi:ne180100]();
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  unint64_t *v3 = a2;
  if (a2)
  {
    for (unint64_t i = 0; i < a2; ++i)
      *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, i) = 0;
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    char v14 = v4;
    size_t v12 = *v4;
    if (*v4)
    {
      unint64_t v5 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)v12);
      uint64_t v10 = std::__constrain_hash[abi:ne180100](v5, a2);
      *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v1objc_storeStrong(&location, 0) = v14;
      uint64_t v9 = v10;
      uint64_t v15 = v12;
      for (unint64_t j = *v12; j; unint64_t j = *v15)
      {
        unint64_t v6 = std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>::__hash[abi:ne180100]((uint64_t)j);
        uint64_t v11 = std::__constrain_hash[abi:ne180100](v6, a2);
        if (v11 == v9)
        {
          uint64_t v15 = (void **)j;
        }
        else if (*(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v11))
        {
          uint64_t *v15 = (void *)*j;
          *unint64_t j = **(void **)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v11);
          **(void **)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v1MTRestZoneIntegrator_::clearMotion(this, 1) = j;
        }
        else
        {
          *(void *)std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::operator[][abi:ne180100](a1, v1MTRestZoneIntegrator_::clearMotion(this, 1) = v15;
          uint64_t v15 = (void **)j;
          uint64_t v9 = v11;
        }
      }
    }
  }
}

void std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> *>>>::reset[abi:ne180100]<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> **,0>(uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  unint64_t v5 = *v2;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *> *> *>>::operator()[abi:ne180100](v4, v5);
  }
}

void std::unique_ptr<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  unint64_t v5 = *v2;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *>>>::operator()[abi:ne180100](v4, v5);
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *>>>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = *(void *)a1;
    std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100]((uint64_t)a2);
    std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
    std::allocator_traits<std::allocator<std::__hash_node<objc_object  {objcproto15HSStageObserver}* {__weak},void *>>>::destroy[abi:ne180100]<objc_object  {objcproto15HSStageObserver}*,void,void>(v3, v2);
    std::__destroy_at[abi:ne180100]<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>,0>((uint64_t)a2);
  }
  if (a2) {
    std::allocator_traits<std::allocator<std::__hash_node<HSStage  {objcproto15HSPreferencable}* {__weak},void *>>>::deallocate[abi:ne180100](*(void *)a1, a2, 1);
  }
}

void __cxx_global_var_init_60()
{
  {
    {
      HSUtil::Coder::_Objectunsigned __int8 Type = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
    }
  }
}

void __cxx_global_var_init_2_56(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_56(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_51(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_51(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_51(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_51(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_52(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void __cxx_global_var_init_58_10(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)72,(char)83,(char)80,(char)114,(char)101,(char)102,(char)101,(char)114,(char)101,(char)110,(char)99,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"HSPreference", a2);
  }
}

void sub_C8354(uint64_t a1, int a2)
{
  uint64_t v4 = *(void **)(v2 - 48);
  *(void *)(v2 - 24) = a1;
  *(_DWORD *)(v2 - 28) = a2;

  _Unwind_Resume(*(_Unwind_Exception **)(v2 - 24));
}

void sub_C8AF4()
{
  _Unwind_Resume(v0);
}

BOOL HSUtil::PortRight::operator BOOL(uint64_t a1)
{
  BOOL v2 = 0;
  if (*(_DWORD *)(a1 + 8)) {
    return *(_DWORD *)(a1 + 8) != -1;
  }
  return v2;
}

{
  return HSUtil::PortRight::operator BOOL(a1);
}

HSUtil::SendRight *HSUtil::SendRight::SendRight(HSUtil::SendRight *this)
{
  return this;
}

{
  HSUtil::SendRight *result;

  HSUtil::PortRight::PortRight((uint64_t)this);
  uint64_t result = this;
  *(void *)this = &off_141408;
  return result;
}

void sub_C9448(uint64_t a1, int a2)
{
  *(void *)(v2 - os_unfair_lock_unlock(this + 32) = a1;
  *(_DWORD *)(v2 - 36) = a2;
  std::unique_lock<std::mutex>::~unique_lock[abi:ne180100](v2 - 56);
  objc_storeStrong((id *)(v2 - 24), 0);
  _Unwind_Resume(*(_Unwind_Exception **)(v2 - 32));
}

uint64_t std::map<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak},HSUtil::ObjectLess<NSString>,std::allocator<std::pair<NSString * const {__strong},objc_object  {objcproto22HSServiceDirectoryable}*>>>::insert[abi:ne180100](uint64_t a1, id *a2)
{
  void v4[3] = a1;
  unint64_t v4[2] = a2;
  v4[0] = std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak},HSUtil::ObjectLess<NSString>,true>,std::allocator<objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>>::__insert_unique[abi:ne180100](a1, a2);
  v4[1] = v2;
  std::pair<std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>>,BOOL>::pair[abi:ne180100]<std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>,BOOL,0>((uint64_t)&v5, (uint64_t)v4);
  return v5;
}

uint64_t std::pair<NSString * const {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>::pair[abi:ne180100]<NSString * {__strong},objc_object {__strong}&,0>(uint64_t a1, uint64_t *a2, id *a3)
{
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *a2;
  *a2 = 0;
  *(void *)a1 = v3;
  objc_initWeak((id *)(a1 + 8), *a3);
  return a1;
}

id *std::pair<NSString * const {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>::~pair(id *a1)
{
  return a1;
}

{
  objc_destroyWeak(a1 + 1);
  objc_storeStrong(a1, 0);
  return a1;
}

uint64_t std::get[abi:ne180100]<1ul,std::__map_iterator<std::__tree_iterator<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,std::__tree_node<objc_object  {objcproto22HSServiceDirectoryable}* {__weak},void *> *,long>>,BOOL>(uint64_t a1)
{
  return std::__get_pair<1ul>::get[abi:ne180100]<std::__map_iterator<std::__tree_iterator<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,std::__tree_node<objc_object  {objcproto22HSServiceDirectoryable}* {__weak},void *> *,long>>,BOOL>(a1);
}

void sub_C992C()
{
  _Unwind_Resume(v0);
}

uint64_t std::map<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak},HSUtil::ObjectLess<NSString>,std::allocator<std::pair<NSString * const {__strong},objc_object  {objcproto22HSServiceDirectoryable}*>>>::find[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak},HSUtil::ObjectLess<NSString>,true>,std::allocator<objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>>::find<NSString * {__strong}>(a1, a2);
  std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>>::__hash_map_iterator[abi:ne180100](&v4, v3);
  return v4;
}

void std::__map_iterator<std::__tree_iterator<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,std::__tree_node<objc_object  {objcproto22HSServiceDirectoryable}* {__weak},void *> *,long>>::operator->[abi:ne180100](uint64_t a1)
{
}

void sub_C9A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, char a13)
{
}

void sub_C9D6C()
{
  _Unwind_Resume(v0);
}

void sub_C9DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, int a12, int a13, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void sub_CA3D4()
{
  _Unwind_Resume(v0);
}

uint64_t std::make_shared[abi:ne180100]<Client,Client,void>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v6 = a2;
  uint64_t v5 = a1;
  std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>::allocator[abi:ne180100]((uint64_t)&v4);
  return std::allocate_shared[abi:ne180100]<Client,std::allocator<Client>,Client,void>((uint64_t)&v4, v5, a2);
}

void Client::~Client(Client *this)
{
}

{
  HSUtil::Buffer::~Buffer((HSUtil::Buffer *)((char *)this + 32));
  objc_storeStrong((id *)this + 3, 0);
  HSUtil::FileDescriptor::~FileDescriptor((HSUtil::FileDescriptor *)this);
}

void *__copy_helper_block_ea8_40c30_ZTSNSt3__18weak_ptrI6ClientEE(uint64_t a1, uint64_t a2)
{
  return std::weak_ptr<HSMapper>::weak_ptr<HSMapper,0>((void *)(a1 + 40), (void *)(a2 + 40));
}

uint64_t __destroy_helper_block_ea8_40c30_ZTSNSt3__18weak_ptrI6ClientEE(uint64_t a1)
{
  return std::weak_ptr<HSMapper>::~weak_ptr(a1 + 40);
}

uint64_t std::map<int,std::shared_ptr<Client>>::insert[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void v4[3] = a1;
  unint64_t v4[2] = a2;
  v4[0] = std::__tree<std::__value_type<int,std::shared_ptr<Client>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<Client>>>>::__insert_unique[abi:ne180100](a1, a2);
  v4[1] = v2;
  std::pair<std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>>,BOOL>::pair[abi:ne180100]<std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>,BOOL,0>((uint64_t)&v5, (uint64_t)v4);
  return v5;
}

uint64_t std::pair<int const,std::shared_ptr<Client>>::pair[abi:ne180100]<int,std::shared_ptr<Client>&,0>(uint64_t a1, _DWORD *a2, void *a3)
{
  return a1;
}

{
  *(_DWORD *)a1 = *a2;
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100]((void *)(a1 + 8), a3);
  return a1;
}

uint64_t std::pair<int const,std::shared_ptr<Client>>::~pair(uint64_t a1)
{
  return a1;
}

{
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a1 + 8);
  return a1;
}

uint64_t std::map<int,std::shared_ptr<Client>>::erase[abi:ne180100](uint64_t a1, _DWORD *a2)
{
  return std::__tree<std::__value_type<int,std::shared_ptr<Client>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<Client>>>>::__erase_unique<int>(a1, a2);
}

void sub_CAC84()
{
  _Unwind_Resume(v0);
}

HSUtil::FileDescriptor *HSUtil::FileDescriptor::FileDescriptor(HSUtil::FileDescriptor *this, int a2)
{
  return this;
}

{
  HSUtil::FileDescriptor *result;

  HSUtil::IO::Readable::Readable(this);
  HSUtil::IO::Writable::Writable((void *)this + 1);
  uint64_t result = this;
  *(void *)this = &off_141448;
  *((void *)this + MTRestZoneIntegrator_::clearMotion(this, 1) = &off_141478;
  *((_DWORD *)this + 4) = a2;
  return result;
}

void *HSUtil::SendRight::SendRight(void *a1, int a2)
{
  return a1;
}

{
  void *result;

  HSUtil::PortRight::PortRight((uint64_t)a1, a2);
  uint64_t result = a1;
  *a1 = &off_141408;
  return result;
}

void sub_CB450(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  *(void *)(v46 - 1std::vector<HSRecordingTypes::PlayFrame>::~vector[abi:ne180100]((uint64_t *)this + 12) = a1;
  *(_DWORD *)(v46 - 1std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a9 + 16) = a2;
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)&a46);
  __cxa_end_catch();
  std::unique_lock<std::mutex>::~unique_lock[abi:ne180100](v46 - 96);
  JUMPOUT(0xCB4D0);
}

void sub_CB498(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(v2);
}

void sub_CB4C8()
{
  _Unwind_Resume(v0);
}

uint64_t HSUtil::Buffer::slice<HSUtil::Buffer::RefType>@<X0>(HSUtil::Buffer *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!HSUtil::Buffer::valid(a1)) {
    return HSUtil::Buffer::Buffer(a3);
  }
  if (a2 > *((void *)a1 + 6)) {
    __assert_rtn("slice", "HSBuffer.h", 163, "offset <= _state.len");
  }
  return HSUtil::Buffer::Buffer(a3, *((void *)a1 + 5) + a2, *((void *)a1 + 6) - a2);
}

BOOL HSUtil::Buffer::setLength(HSUtil::Buffer *this, unint64_t a2)
{
  BOOL result = HSUtil::Buffer::valid(this);
  if (result)
  {
    if (a2 > *((void *)this + 7)) {
      __assert_rtn("setLength", "HSBuffer.h", 123, "len <= _state.cap");
    }
    *((void *)this + 6) = a2;
  }
  return result;
}

void sub_CBFA0()
{
  _Unwind_Resume(v0);
}

void std::__map_iterator<std::__tree_iterator<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,std::__tree_node<objc_object  {objcproto22HSServiceDirectoryable}* {__weak},void *> *,long>>::operator*[abi:ne180100](uint64_t a1)
{
}

uint64_t std::pair<NSString * const {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>::pair[abi:ne180100](uint64_t a1, id *a2)
{
  return a1;
}

{
  *(void *)a1 = *a2;
  objc_copyWeak((id *)(a1 + 8), a2 + 1);
  return a1;
}

{
  std::pair<NSString * const {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>::pair[abi:ne180100](a1, a2);
  return a1;
}

{
  *(void *)a1 = *a2;
  objc_moveWeak((id *)(a1 + 8), a2 + 1);
  return a1;
}

uint64_t *std::__map_iterator<std::__tree_iterator<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,std::__tree_node<objc_object  {objcproto22HSServiceDirectoryable}* {__weak},void *> *,long>>::operator++[abi:ne180100](uint64_t *a1)
{
  return a1;
}

uint64_t sendMessage(HSUtil::FileDescriptor *a1, HSUtil::EncoderBuf *a2)
{
  unint64_t v23 = a1;
  uint64_t v22 = a2;
  uint64_t v21 = (HSUtil::Buffer *)HSUtil::EncoderBuf::buffer(a2);
  if (!HSUtil::Buffer::operator BOOL(v21))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "encode message failed");
  }
  int v20 = 0;
  int v24 = HSUtil::Buffer::length(v21);
  int v20 = v24;
  *(void *)&long long v19 = (*(uint64_t (**)(HSUtil::FileDescriptor *, void, int *, uint64_t))(*(void *)v23 + 16))(v23, 0, &v20, 4);
  *((void *)&v19 + MTRestZoneIntegrator_::clearMotion(this, 1) = v2;
  if (!HSUtil::Coder::ok((HSUtil::Coder *)&v19))
  {
    unint64_t v16 = (std::system_error *)__cxa_allocate_exception(0x20uLL);
    __eBOOL v = v19;
    uint64_t v3 = std::system_category();
    std::system_error::system_error(v16, __ev, v3, "msgLenBuf.writeTo() failed");
  }
  if (*((void *)&v19 + 1) != 4)
  {
    char v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "failed to write entire message length");
  }
  unint64_t v13 = v21;
  size_t v12 = (char *)v23 + 8;
  uint64_t v4 = HSUtil::Buffer::length(v21);
  *(void *)&long long v18 = (*(uint64_t (**)(HSUtil::Buffer *, void, char *, void, uint64_t))(*(void *)v13 + 40))(v13, 0, v12, 0, v4);
  *((void *)&v18 + MTRestZoneIntegrator_::clearMotion(this, 1) = v5;
  long long v19 = v18;
  if (!HSUtil::Coder::ok((HSUtil::Coder *)&v19))
  {
    uint64_t v11 = (std::system_error *)__cxa_allocate_exception(0x20uLL);
    int v10 = v19;
    unint64_t v6 = std::system_category();
    std::system_error::system_error(v11, v10, v6, "reply.writeTo() failed");
  }
  uint64_t v9 = *((void *)&v19 + 1);
  uint64_t result = HSUtil::Buffer::length(v21);
  if (v9 != result)
  {
    float v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v8, "failed to write entire reply");
  }
  return result;
}

id HSUtil::Decoder::decodeNSDictionary(HSUtil::Decoder *this)
{
  v5[1] = (unint64_t)this;
  if (HSUtil::Coder::fatalError(this))
  {
    id v6 = 0;
  }
  else
  {
    v5[0] = 0;
    v5[0] = *((void *)this + 9);
    id location = HSUtil::Decoder::_readNSDictionary(this, v5);
    if (HSUtil::Coder::ok(this))
    {
      *((void *)this + 9) = v5[0];
      id v6 = location;
    }
    else
    {
      id v6 = 0;
    }
    objc_storeStrong(&location, 0);
  }
  float v1 = v6;

  return v1;
}

void *__copy_helper_block_ea8_48c33_ZTSNSt3__110shared_ptrI6ClientEE(uint64_t a1, uint64_t a2)
{
  return std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100]((void *)(a1 + 48), (void *)(a2 + 48));
}

uint64_t __destroy_helper_block_ea8_48c33_ZTSNSt3__110shared_ptrI6ClientEE(uint64_t a1)
{
  return std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a1 + 48);
}

void sub_CCAB4()
{
  _Unwind_Resume(v0);
}

uint64_t HSUtil::PortRight::port(HSUtil::PortRight *this)
{
  if (!HSUtil::PortRight::operator BOOL((uint64_t)this))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "attempt to access invalid mach port");
  }
  return *((unsigned int *)this + 2);
}

{
  return HSUtil::PortRight::port(this);
}

void sub_CD2BC(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(v2);
}

void sub_CD2F8()
{
  _Unwind_Resume(v0);
}

void receiveMessage(HSUtil::FileDescriptor *a1@<X0>, HSUtil::Coder *a2@<X8>)
{
  unint64_t v13 = a2;
  size_t v12 = a1;
  unsigned int v11 = 0;
  *(void *)&long long v10 = (**(uint64_t (***)(HSUtil::FileDescriptor *, void, unsigned int *, uint64_t))a1)(a1, 0, &v11, 4);
  *((void *)&v10 + MTRestZoneIntegrator_::clearMotion(this, 1) = v2;
  if (!HSUtil::Coder::ok((HSUtil::Coder *)&v10) || *((void *)&v10 + 1) != 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "socket.read failed");
  }
  unsigned int v14 = v11;
  HSUtil::Buffer::Buffer((HSUtil::Buffer *)v9);
  *(void *)&long long v6 = HSUtil::Buffer::readFrom((HSUtil::Buffer *)v9, 0, v12, 0, v11);
  *((void *)&v6 + MTRestZoneIntegrator_::clearMotion(this, 1) = v3;
  long long v10 = v6;
  if (!HSUtil::Coder::ok((HSUtil::Coder *)&v10) || *((void *)&v10 + 1) != v11)
  {
    uint64_t v5 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v5, "msg.readFrom failed");
  }
  HSUtil::DecoderBuf::DecoderBuf((uint64_t)a2, (uint64_t)v9);
  if (!HSUtil::Coder::ok(a2))
  {
    uint64_t v4 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v4, "failed to create DecoderBuf from message");
  }
  HSUtil::Buffer::~Buffer((HSUtil::Buffer *)v9);
}

void sub_CD988()
{
  __cxa_end_catch();
  objc_storeStrong(&v0, 0);
  objc_storeStrong(&v1, 0);
  JUMPOUT(0xCDA08);
}

void sub_CD9D0(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(v2);
}

void sub_CDA00()
{
  _Unwind_Resume(v0);
}

HSUtil::FileDescriptor *HSUtil::FileDescriptor::FileDescriptor(HSUtil::FileDescriptor *this)
{
  return this;
}

{
  HSUtil::FileDescriptor *result;

  HSUtil::IO::Readable::Readable(this);
  HSUtil::IO::Writable::Writable((void *)this + 1);
  uint64_t result = this;
  *(void *)this = &off_141448;
  *((void *)this + MTRestZoneIntegrator_::clearMotion(this, 1) = &off_141478;
  *((_DWORD *)this + 4) = -1;
  return result;
}

uint64_t HSUtil::PortRight::PortRight(uint64_t this)
{
  *(void *)this = &off_142B08;
  *(_DWORD *)(this + 8) = 0;
  return this;
}

uint64_t std::__get_pair<1ul>::get[abi:ne180100]<std::__map_iterator<std::__tree_iterator<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,std::__tree_node<objc_object  {objcproto22HSServiceDirectoryable}* {__weak},void *> *,long>>,BOOL>(uint64_t a1)
{
  return a1 + 8;
}

uint64_t HSUtil::PortRight::PortRight(uint64_t this, int a2)
{
  *(void *)this = &off_142B08;
  *(_DWORD *)(this + 8) = a2;
  return this;
}

uint64_t std::map<int,std::shared_ptr<Client>>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::__tree<std::__value_type<int,std::shared_ptr<Client>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<Client>>>>::~__tree(a1);
  return a1;
}

uint64_t std::map<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak},HSUtil::ObjectLess<NSString>,std::allocator<std::pair<NSString * const {__strong},objc_object  {objcproto22HSServiceDirectoryable}*>>>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak},HSUtil::ObjectLess<NSString>,true>,std::allocator<objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>>::~__tree(a1);
  return a1;
}

uint64_t std::__tree<std::__value_type<int,std::shared_ptr<Client>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<Client>>>>::~__tree(uint64_t a1)
{
  return a1;
}

{
  void *v1;

  id v1 = (void *)std::__tree<std::shared_ptr<HSMapper>>::__root[abi:ne180100]();
  std::__tree<std::__value_type<int,std::shared_ptr<Client>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<Client>>>>::destroy(a1, v1);
  return a1;
}

void std::__tree<std::__value_type<int,std::shared_ptr<Client>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<Client>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::shared_ptr<Client>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<Client>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,std::shared_ptr<Client>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<Client>>>>::destroy(a1, a2[1]);
    std::__tree<std::shared_ptr<HSMapper>>::__node_alloc[abi:ne180100]();
    uint64_t v6 = v2;
    uint64_t v4 = v2;
    std::__hash_key_value_types<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>::__get_ptr[abi:ne180100]();
    std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>>::destroy[abi:ne180100]<std::pair<int const,std::shared_ptr<Client>>,void,void>(v4, v3);
    std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>>::deallocate[abi:ne180100](v6, a2, 1);
  }
}

uint64_t std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>>::destroy[abi:ne180100]<std::pair<int const,std::shared_ptr<Client>>,void,void>(uint64_t a1, uint64_t a2)
{
  return std::__destroy_at[abi:ne180100]<std::pair<int const,std::shared_ptr<Client>>,0>(a2);
}

void std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<int const,std::shared_ptr<Client>>,0>(uint64_t a1)
{
  return std::pair<int const,std::shared_ptr<Client>>::~pair(a1);
}

void std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

uint64_t std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak},HSUtil::ObjectLess<NSString>,true>,std::allocator<objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>>::~__tree(uint64_t a1)
{
  return a1;
}

{
  void *v1;

  id v1 = (void *)std::__tree<std::shared_ptr<HSMapper>>::__root[abi:ne180100]();
  std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak},HSUtil::ObjectLess<NSString>,true>,std::allocator<objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>>::destroy(a1, v1);
  return a1;
}

void std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak},HSUtil::ObjectLess<NSString>,true>,std::allocator<objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak},HSUtil::ObjectLess<NSString>,true>,std::allocator<objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>>::destroy(a1, *a2);
    std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak},HSUtil::ObjectLess<NSString>,true>,std::allocator<objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>>::destroy(a1, a2[1]);
    std::__tree<std::shared_ptr<HSMapper>>::__node_alloc[abi:ne180100]();
    uint64_t v6 = v2;
    uint64_t v4 = v2;
    std::__hash_key_value_types<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>::__get_ptr[abi:ne180100]();
    std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,void *>>>::destroy[abi:ne180100]<std::pair<NSString * const {__strong},objc_object  {objcproto22HSServiceDirectoryable}*>,void,void>(v4, v3);
    std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,void *>>>::deallocate[abi:ne180100](v6, a2, 1);
  }
}

id *std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,void *>>>::destroy[abi:ne180100]<std::pair<NSString * const {__strong},objc_object  {objcproto22HSServiceDirectoryable}*>,void,void>(uint64_t a1, id *a2)
{
  return std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,0>(a2);
}

void std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,void *>>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

id *std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,0>(id *a1)
{
  return std::pair<NSString * const {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>::~pair(a1);
}

void std::allocator<std::__tree_node<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,void *>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

uint64_t std::map<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak},HSUtil::ObjectLess<NSString>,std::allocator<std::pair<NSString * const {__strong},objc_object  {objcproto22HSServiceDirectoryable}*>>>::map[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  char v3;
  uint64_t v4;

  uint64_t v4 = a1;
  std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,HSUtil::ObjectLess<NSString>,true>::__map_value_compare[abi:ne180100]((uint64_t)&v3);
  std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak},HSUtil::ObjectLess<NSString>,true>,std::allocator<objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>>::__tree(a1, (uint64_t)&v3);
  return a1;
}

uint64_t std::map<int,std::shared_ptr<Client>>::map[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  char v3;
  uint64_t v4;

  uint64_t v4 = a1;
  std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,HSUtil::ObjectLess<NSString>,true>::__map_value_compare[abi:ne180100]((uint64_t)&v3);
  std::__tree<std::__value_type<int,std::shared_ptr<Client>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<Client>>>>::__tree(a1, (uint64_t)&v3);
  return a1;
}

uint64_t std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,HSUtil::ObjectLess<NSString>,true>::__map_value_compare[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak},HSUtil::ObjectLess<NSString>,true>,std::allocator<objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>>::__tree(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t result;
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;

  long long v10 = a1;
  uint64_t v9 = a2;
  std::__compressed_pair<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>>::__compressed_pair[abi:ne180100]<true,void>((void *)(a1 + 8));
  float v8 = 0;
  std::__compressed_pair<unsigned long,HSUtil::ObjectHasher>::__compressed_pair[abi:ne180100]<int,HSUtil::ObjectHasher const&>((void *)(a1 + 16), &v8);
  std::__tree<std::shared_ptr<HSMapper>>::__end_node[abi:ne180100]();
  uint64_t v6 = v2;
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  uint64_t v4 = v3;
  uint64_t result = a1;
  *uint64_t v4 = v6;
  return result;
}

uint64_t std::__tree<std::__value_type<int,std::shared_ptr<Client>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<Client>>>>::__tree(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t result;
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;

  long long v10 = a1;
  uint64_t v9 = a2;
  std::__compressed_pair<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>>::__compressed_pair[abi:ne180100]<true,void>((void *)(a1 + 8));
  float v8 = 0;
  std::__compressed_pair<unsigned long,HSUtil::ObjectHasher>::__compressed_pair[abi:ne180100]<int,HSUtil::ObjectHasher const&>((void *)(a1 + 16), &v8);
  std::__tree<std::shared_ptr<HSMapper>>::__end_node[abi:ne180100]();
  uint64_t v6 = v2;
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  uint64_t v4 = v3;
  uint64_t result = a1;
  *uint64_t v4 = v6;
  return result;
}

uint64_t std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak},HSUtil::ObjectLess<NSString>,true>,std::allocator<objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>>::__insert_unique[abi:ne180100](uint64_t a1, id *a2)
{
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  return std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak},HSUtil::ObjectLess<NSString>,true>,std::allocator<objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>>::__emplace_unique_key_args<NSString * {__strong},std::pair<NSString * const {__strong},objc_object  {objcproto22HSServiceDirectoryable}*>>(a1, v2, a2);
}

uint64_t std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak},HSUtil::ObjectLess<NSString>,true>,std::allocator<objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>>::__emplace_unique_key_args<NSString * {__strong},std::pair<NSString * const {__strong},objc_object  {objcproto22HSServiceDirectoryable}*>>(uint64_t a1, void **a2, id *a3)
{
  uint64_t v16 = a1;
  uint64_t v15 = a2;
  unsigned int v14 = a3;
  size_t v12 = std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak},HSUtil::ObjectLess<NSString>,true>,std::allocator<objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>>::__find_equal<NSString * {__strong}>(a1, (uint64_t)&v13, a2);
  uint64_t v11 = *v12;
  char v10 = 0;
  if (!*v12)
  {
    std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak},HSUtil::ObjectLess<NSString>,true>,std::allocator<objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>>::__construct_node<std::pair<NSString * const {__strong},objc_object  {objcproto22HSServiceDirectoryable}*>>(a1, v14, (uint64_t)v9);
    uint64_t v5 = v13;
    uint64_t v6 = v12;
    uint64_t v3 = (void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
    std::__tree<std::shared_ptr<HSMapper>>::__insert_node_at(a1, v5, v6, v3);
    uint64_t v11 = std::unique_ptr<std::__hash_node<HSStage * {__strong},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::release[abi:ne180100]();
    char v10 = 1;
    std::unique_ptr<std::__tree_node<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,void *>,std::__tree_node_destructor<std::allocator<void *>>>::~unique_ptr[abi:ne180100]((uint64_t)v9);
  }
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](&v8, v11);
  std::pair<std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL>::pair[abi:ne180100]<std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL &,0>((uint64_t)&v17, &v8, &v10);
  return v17;
}

void *std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak},HSUtil::ObjectLess<NSString>,true>,std::allocator<objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>>::__find_equal<NSString * {__strong}>(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v9 = (void *)std::__tree<std::shared_ptr<HSMapper>>::__root[abi:ne180100]();
  std::__tree<std::shared_ptr<HSMapper>>::__root_ptr[abi:ne180100]();
  uint64_t v8 = v3;
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
        if (!std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,HSUtil::ObjectLess<NSString>,true>::operator()[abi:ne180100](v4, a3))break; {
        if (!*v9)
        }
        {
          *(void *)a2 = v9;
          return *(void **)a2;
        }
        uint64_t v8 = v9;
        uint64_t v9 = (void *)*v9;
      }
      std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
      if (!std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,HSUtil::ObjectLess<NSString>,true>::operator()[abi:ne180100](v5, (uint64_t)(v9 + 4), a3))break; {
      if (!v9[1])
      }
      {
        *(void *)a2 = v9;
        return v9 + 1;
      }
      uint64_t v8 = v9 + 1;
      uint64_t v9 = (void *)v9[1];
    }
    *(void *)a2 = v9;
    return v8;
  }
  else
  {
    std::__tree<std::shared_ptr<HSMapper>>::__end_node[abi:ne180100]();
    *(void *)a2 = v6;
    return *(void **)a2;
  }
}

void std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak},HSUtil::ObjectLess<NSString>,true>,std::allocator<objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>>::__construct_node<std::pair<NSString * const {__strong},objc_object  {objcproto22HSServiceDirectoryable}*>>(uint64_t a1@<X0>, id *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v14 = a3;
  uint64_t v13 = a1;
  size_t v12 = a2;
  std::__tree<std::shared_ptr<HSMapper>>::__node_alloc[abi:ne180100]();
  uint64_t v11 = v3;
  char v10 = 0;
  uint64_t v6 = std::allocator_traits<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::allocate[abi:ne180100](v3, 1uLL);
  std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::__hash_node_destructor[abi:ne180100]((uint64_t)&v9, v11, 0);
  std::unique_ptr<std::__tree_node<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,void *>,std::__tree_node_destructor<std::allocator<void *>>>::unique_ptr[abi:ne180100]<true,void>(a3, (uint64_t)v6, &v9);
  uint64_t v8 = v11;
  std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  std::__hash_key_value_types<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>::__get_ptr[abi:ne180100]();
  std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,void *>>>::construct[abi:ne180100]<std::pair<NSString * const {__strong},objc_object  {objcproto22HSServiceDirectoryable}*>,NSString * const,void>(v8, v4, v12);
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::get_deleter[abi:ne180100]();
  *(unsigned char *)(v5 + 8) = 1;
}

uint64_t std::unique_ptr<std::__tree_node<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,void *>,std::__tree_node_destructor<std::allocator<void *>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<std::__tree_node<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,void *>,std::__tree_node_destructor<std::allocator<void *>>>::reset[abi:ne180100](a1, 0);
  return a1;
}

BOOL std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,HSUtil::ObjectLess<NSString>,true>::operator()[abi:ne180100](void *a1, void **a2)
{
  uint64_t v4 = *a2;
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  return HSUtil::ObjectLess<NSString>::operator()(a1, v4, *v2);
}

BOOL std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,HSUtil::ObjectLess<NSString>,true>::operator()[abi:ne180100](void *a1, uint64_t a2, void **a3)
{
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  return HSUtil::ObjectLess<NSString>::operator()(a1, *v3, *a3);
}

BOOL HSUtil::ObjectLess<NSString>::operator()(void *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v6 = 0;
  objc_storeStrong(&v6, a3);
  BOOL v4 = [location[0] compare:v6] == (id)-1;
  objc_storeStrong(&v6, 0);
  objc_storeStrong(location, 0);
  return v4;
}

void sub_CEBB8(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  *(void *)(v10 - os_unfair_lock_unlock(this + 32) = a1;
  *(_DWORD *)(v10 - 36) = a2;
  objc_storeStrong((id *)(v10 - 24), 0);
  objc_storeStrong((id *)(v10 - 16), 0);
  _Unwind_Resume(*(_Unwind_Exception **)(v10 - 32));
}

uint64_t std::unique_ptr<std::__tree_node<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,void *>,std::__tree_node_destructor<std::allocator<void *>>>::unique_ptr[abi:ne180100]<true,void>(uint64_t a1, uint64_t a2, __n128 *a3)
{
  return a1;
}

{
  void v5[2];

  v5[1] = a1;
  v5[0] = a2;
  std::__compressed_pair<std::__hash_node<HSStage * {__strong},void *> *,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::__compressed_pair[abi:ne180100]<std::__hash_node<HSStage * {__strong},void *> *&,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>(a1, v5, a3);
  return a1;
}

uint64_t std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,void *>>>::construct[abi:ne180100]<std::pair<NSString * const {__strong},objc_object  {objcproto22HSServiceDirectoryable}*>,NSString * const,void>(uint64_t a1, uint64_t a2, id *a3)
{
  return std::allocator<std::__tree_node<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,void *>>::construct[abi:ne180100]<std::pair<NSString * const {__strong},objc_object  {objcproto22HSServiceDirectoryable}*>,NSString * const>(a1, a2, a3);
}

uint64_t std::allocator<std::__tree_node<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,void *>>::construct[abi:ne180100]<std::pair<NSString * const {__strong},objc_object  {objcproto22HSServiceDirectoryable}*>,NSString * const>(uint64_t a1, uint64_t a2, id *a3)
{
  return std::pair<NSString * const {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>::pair[abi:ne180100](a2, a3);
}

void std::unique_ptr<std::__tree_node<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,void *>,std::__tree_node_destructor<std::allocator<void *>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  uint64_t v5 = *v2;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,void *>>>::operator()[abi:ne180100](v4, v5);
  }
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = *(void *)a1;
    std::__hash_key_value_types<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>::__get_ptr[abi:ne180100]();
    std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,void *>>>::destroy[abi:ne180100]<std::pair<NSString * const {__strong},objc_object  {objcproto22HSServiceDirectoryable}*>,void,void>(v3, v2);
  }
  if (a2) {
    std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,void *>>>::deallocate[abi:ne180100](*(void *)a1, a2, 1);
  }
}

uint64_t std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak},HSUtil::ObjectLess<NSString>,true>,std::allocator<objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>>::find<NSString * {__strong}>(uint64_t a1, void **a2)
{
  uint64_t v14 = a1;
  uint64_t v13 = a2;
  uint64_t v8 = (void *)std::__tree<std::shared_ptr<HSMapper>>::__root[abi:ne180100]();
  std::__tree<std::shared_ptr<HSMapper>>::__end_node[abi:ne180100]();
  uint64_t v12 = std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak},HSUtil::ObjectLess<NSString>,true>,std::allocator<objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>>::__lower_bound<NSString * {__strong}>(a1, a2, v8, v2);
  uint64_t v11 = std::__tree<std::shared_ptr<HSMapper>>::end[abi:ne180100]();
  LOBYTE(v1objc_storeStrong(&location, 0) = 0;
  if (std::operator!=[abi:ne180100](&v12, &v11))
  {
    std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
    id v6 = v3;
    uint64_t v5 = v13;
    std::__tree_const_iterator<std::shared_ptr<HSMapper>,std::__tree_node<std::shared_ptr<HSMapper>,void *> *,long>::operator*[abi:ne180100]((uint64_t)&v12);
    BOOL v10 = !std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,HSUtil::ObjectLess<NSString>,true>::operator()[abi:ne180100](v6, v5);
  }
  if (v10) {
    return v12;
  }
  else {
    return std::__tree<std::shared_ptr<HSMapper>>::end[abi:ne180100]();
  }
}

uint64_t std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak},HSUtil::ObjectLess<NSString>,true>,std::allocator<objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>>::__lower_bound<NSString * {__strong}>(uint64_t a1, void **a2, void *a3, uint64_t a4)
{
  while (a3)
  {
    std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
    if (std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,HSUtil::ObjectLess<NSString>,true>::operator()[abi:ne180100](v4, (uint64_t)(a3 + 4), a2))
    {
      a3 = (void *)a3[1];
    }
    else
    {
      a4 = (uint64_t)a3;
      a3 = (void *)*a3;
    }
  }
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](&v9, a4);
  return v9;
}

void std::__tree_iterator<std::__value_type<NSString * {__strong},objc_object  {objcproto22HSServiceDirectoryable}* {__weak}>,std::__tree_node<objc_object  {objcproto22HSServiceDirectoryable}* {__weak},void *> *,long>::operator->[abi:ne180100](uint64_t a1)
{
}

uint64_t std::allocate_shared[abi:ne180100]<Client,std::allocator<Client>,Client,void>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v11 = a3;
  uint64_t v10 = a1;
  uint64_t v9 = a2;
  std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<Client>>>::__allocation_guard[abi:ne180100]<std::allocator<Client>>((uint64_t)v8, 1);
  uint64_t v3 = (void *)std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v8);
  std::__shared_ptr_emplace<Client>::__shared_ptr_emplace[abi:ne180100]<Client,std::allocator<Client>,0>(v3, v9);
  uint64_t v7 = std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__release_ptr[abi:ne180100]((uint64_t)v8);
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::shared_ptr<HSUtil::FileDescriptor>::__create_with_control_block[abi:ne180100]<HSUtil::FileDescriptor,std::__shared_ptr_emplace<HSUtil::FileDescriptor>>(v4, v7, a3);
  return std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<Client>>>::~__allocation_guard[abi:ne180100]((uint64_t)v8);
}

void sub_CF10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, _Unwind_Exception *exception_object)
{
  std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<Client>>>::~__allocation_guard[abi:ne180100](v16 - 48);
  _Unwind_Resume(a1);
}

uint64_t std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<Client>>>::__allocation_guard[abi:ne180100]<std::allocator<Client>>(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  void *v2;
  uint64_t result;

  std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>(a1);
  *(void *)(a1 + 8) = a2;
  uint64_t v2 = std::allocator_traits<std::allocator<std::__shared_ptr_emplace<Client>>>::allocate[abi:ne180100](a1, *(void *)(a1 + 8));
  uint64_t result = a1;
  *(void *)(a1 + std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a9 + 16) = v2;
  return result;
}

void *std::__shared_ptr_emplace<Client>::__shared_ptr_emplace[abi:ne180100]<Client,std::allocator<Client>,0>(void *a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t v2;
  unsigned char v5[13];
  uint64_t v6;
  void *v7;

  uint64_t v7 = a1;
  id v6 = a2;
  std::__shared_weak_count::__shared_weak_count[abi:ne180100]((uint64_t)a1, 0);
  *a1 = off_142B20;
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::_Storage::_Storage[abi:ne180100]((uint64_t)(a1 + 3));
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::allocator_traits<std::allocator<Client>>::construct[abi:ne180100]<Client,Client,void>((uint64_t)v5, v2, v6);
  return a1;
}

uint64_t std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<Client>>>::~__allocation_guard[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<Client>>>::__destroy[abi:ne180100](a1);
  return a1;
}

void *std::allocator_traits<std::allocator<std::__shared_ptr_emplace<Client>>>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  return std::allocator<std::__shared_ptr_emplace<Client>>::allocate[abi:ne180100](a1, a2);
}

void *std::allocator<std::__shared_ptr_emplace<Client>>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 > std::allocator_traits<std::allocator<std::__shared_ptr_emplace<Client>>>::max_size[abi:ne180100]<std::allocator<std::__shared_ptr_emplace<Client>>,void>()) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return std::__libcpp_allocate[abi:ne180100](a2 << 7, (std::align_val_t)8uLL);
}

uint64_t std::allocator_traits<std::allocator<std::__shared_ptr_emplace<Client>>>::max_size[abi:ne180100]<std::allocator<std::__shared_ptr_emplace<Client>>,void>()
{
  return std::allocator<std::__shared_ptr_emplace<Client>>::max_size[abi:ne180100]();
}

uint64_t std::allocator<std::__shared_ptr_emplace<Client>>::max_size[abi:ne180100]()
{
  return 0x1FFFFFFFFFFFFFFLL;
}

void sub_CF378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

uint64_t std::allocator_traits<std::allocator<Client>>::construct[abi:ne180100]<Client,Client,void>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::allocator<Client>::construct[abi:ne180100]<Client,Client>(a1, a2, a3);
}

std::__shared_weak_count *std::__shared_ptr_emplace<Client>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  return a1;
}

{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_142B20;
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::_Storage::~_Storage[abi:ne180100]((uint64_t)&a1[1]);
  std::__shared_weak_count::~__shared_weak_count(a1);
  return a1;
}

void std::__shared_ptr_emplace<Client>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
}

void std::__shared_ptr_emplace<Client>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Client>::__on_zero_shared_weak(uint64_t a1)
{
  uint64_t v4 = a1;
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v3);
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::_Storage::~_Storage[abi:ne180100](a1 + 24);
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  std::allocator_traits<std::allocator<std::__shared_ptr_emplace<Client>>>::deallocate[abi:ne180100]((uint64_t)&v3, v1, 1);
}

uint64_t std::allocator<Client>::construct[abi:ne180100]<Client,Client>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Client::Client(a2, a3);
}

uint64_t Client::Client(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t v2;

  HSUtil::FileDescriptor::FileDescriptor(a1, a2);
  uint64_t v2 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(a1 + 24) = v2;
  HSUtil::Buffer::Buffer(a1 + 32, a2 + 32);
  return a1;
}

void sub_CF5B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *a10, int a11, int a12, _Unwind_Exception *exception_object)
{
}

void std::__shared_ptr_emplace<Client>::__on_zero_shared_impl[abi:ne180100]<std::allocator<Client>,0>(uint64_t a1)
{
  uint64_t v3 = a1;
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::allocator_traits<std::allocator<Client>>::destroy[abi:ne180100]<Client,void>((uint64_t)&v2, v1);
}

void std::allocator_traits<std::allocator<Client>>::destroy[abi:ne180100]<Client,void>(uint64_t a1, Client *a2)
{
}

void std::allocator<Client>::destroy[abi:ne180100](uint64_t a1, Client *a2)
{
}

void std::allocator_traits<std::allocator<std::__shared_ptr_emplace<Client>>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::allocator<std::__shared_ptr_emplace<Client>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<Client>>>::__destroy[abi:ne180100](uint64_t a1)
{
  if (*(void *)(a1 + 16)) {
    std::allocator_traits<std::allocator<std::__shared_ptr_emplace<Client>>>::deallocate[abi:ne180100](a1, *(void **)(a1 + 16), *(void *)(a1 + 8));
  }
}

uint64_t std::__tree<std::__value_type<int,std::shared_ptr<Client>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<Client>>>>::__insert_unique[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  return std::__tree<std::__value_type<int,std::shared_ptr<Client>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<Client>>>>::__emplace_unique_key_args<int,std::pair<int const,std::shared_ptr<Client>>>(a1, v2, a2);
}

uint64_t std::__tree<std::__value_type<int,std::shared_ptr<Client>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<Client>>>>::__emplace_unique_key_args<int,std::pair<int const,std::shared_ptr<Client>>>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v16 = a1;
  uint64_t v15 = a2;
  uint64_t v14 = a3;
  uint64_t v12 = std::__tree<std::__value_type<int,std::shared_ptr<Client>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<Client>>>>::__find_equal<int>(a1, (uint64_t)&v13, a2);
  uint64_t v11 = *v12;
  char v10 = 0;
  if (!*v12)
  {
    std::__tree<std::__value_type<int,std::shared_ptr<Client>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<Client>>>>::__construct_node<std::pair<int const,std::shared_ptr<Client>>>(a1, v14, (uint64_t)v9);
    uint64_t v5 = v13;
    id v6 = v12;
    uint64_t v3 = (void *)std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
    std::__tree<std::shared_ptr<HSMapper>>::__insert_node_at(a1, v5, v6, v3);
    uint64_t v11 = std::unique_ptr<std::__hash_node<HSStage * {__strong},void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::release[abi:ne180100]();
    char v10 = 1;
    std::unique_ptr<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)v9);
  }
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](&v8, v11);
  std::pair<std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL>::pair[abi:ne180100]<std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>,BOOL &,0>((uint64_t)&v17, &v8, &v10);
  return v17;
}

void *std::__tree<std::__value_type<int,std::shared_ptr<Client>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<Client>>>>::__find_equal<int>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v9 = (void *)std::__tree<std::shared_ptr<HSMapper>>::__root[abi:ne180100]();
  std::__tree<std::shared_ptr<HSMapper>>::__root_ptr[abi:ne180100]();
  uint64_t v8 = v3;
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
        if (!std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>::operator()[abi:ne180100](v4, a3))break; {
        if (!*v9)
        }
        {
          *(void *)a2 = v9;
          return *(void **)a2;
        }
        uint64_t v8 = v9;
        uint64_t v9 = (void *)*v9;
      }
      std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
      if (!std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>::operator()[abi:ne180100](v5, (uint64_t)(v9 + 4), a3))break; {
      if (!v9[1])
      }
      {
        *(void *)a2 = v9;
        return v9 + 1;
      }
      uint64_t v8 = v9 + 1;
      uint64_t v9 = (void *)v9[1];
    }
    *(void *)a2 = v9;
    return v8;
  }
  else
  {
    std::__tree<std::shared_ptr<HSMapper>>::__end_node[abi:ne180100]();
    *(void *)a2 = v6;
    return *(void **)a2;
  }
}

void std::__tree<std::__value_type<int,std::shared_ptr<Client>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<Client>>>>::__construct_node<std::pair<int const,std::shared_ptr<Client>>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v14 = a3;
  uint64_t v13 = a1;
  uint64_t v12 = a2;
  std::__tree<std::shared_ptr<HSMapper>>::__node_alloc[abi:ne180100]();
  uint64_t v11 = v3;
  char v10 = 0;
  uint64_t v6 = std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>>::allocate[abi:ne180100](v3, 1uLL);
  std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>::__hash_node_destructor[abi:ne180100]((uint64_t)&v9, v11, 0);
  std::unique_ptr<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>>>::unique_ptr[abi:ne180100]<true,void>(a3, (uint64_t)v6, &v9);
  uint64_t v8 = v11;
  std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::size[abi:ne180100]();
  std::__hash_key_value_types<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>::__get_ptr[abi:ne180100]();
  std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>>::construct[abi:ne180100]<std::pair<int const,std::shared_ptr<Client>>,std::pair<int const,std::shared_ptr<Client>>,void>(v8, v4, v12);
  std::unique_ptr<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>>::get_deleter[abi:ne180100]();
  *(unsigned char *)(v5 + 8) = 1;
}

uint64_t std::unique_ptr<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>>>::reset[abi:ne180100](a1, 0);
  return a1;
}

BOOL std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>::operator()[abi:ne180100](uint64_t a1, _DWORD *a2)
{
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  return std::less<int>::operator()[abi:ne180100](a1, a2, v2);
}

BOOL std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, _DWORD *a3)
{
  std::__hash_value_type<char const*,HSUtil::CoderKey const*>::__get_value[abi:ne180100]();
  return std::less<int>::operator()[abi:ne180100](a1, v3, a3);
}

BOOL std::less<int>::operator()[abi:ne180100](uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return *a2 < *a3;
}

void *std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  return std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>::allocate[abi:ne180100](a1, a2);
}

uint64_t std::unique_ptr<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>>>::unique_ptr[abi:ne180100]<true,void>(uint64_t a1, uint64_t a2, __n128 *a3)
{
  return a1;
}

{
  void v5[2];

  v5[1] = a1;
  v5[0] = a2;
  std::__compressed_pair<std::__hash_node<HSStage * {__strong},void *> *,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>::__compressed_pair[abi:ne180100]<std::__hash_node<HSStage * {__strong},void *> *&,std::__hash_node_destructor<std::allocator<std::__hash_node<HSStage * {__strong},void *>>>>(a1, v5, a3);
  return a1;
}

uint64_t std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>>::construct[abi:ne180100]<std::pair<int const,std::shared_ptr<Client>>,std::pair<int const,std::shared_ptr<Client>>,void>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>::construct[abi:ne180100]<std::pair<int const,std::shared_ptr<Client>>,std::pair<int const,std::shared_ptr<Client>>>(a1, a2, a3);
}

void *std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 > std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>>::max_size[abi:ne180100]<std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>,void>()) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return std::__libcpp_allocate[abi:ne180100](56 * a2, (std::align_val_t)8uLL);
}

uint64_t std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>>::max_size[abi:ne180100]<std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>,void>()
{
  return std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>::max_size[abi:ne180100]();
}

uint64_t std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>::max_size[abi:ne180100]()
{
  return 0x492492492492492;
}

uint64_t std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>::construct[abi:ne180100]<std::pair<int const,std::shared_ptr<Client>>,std::pair<int const,std::shared_ptr<Client>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::pair<int const,std::shared_ptr<Client>>::pair[abi:ne180100](a2, a3);
}

uint64_t std::pair<int const,std::shared_ptr<Client>>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100]((void *)(a1 + 8), (void *)(a2 + 8));
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  uint64_t v5 = *v2;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v3 = a2;
  if (v5)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>>::operator()[abi:ne180100](v4, v5);
  }
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = *(void *)a1;
    std::__hash_key_value_types<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>::__get_ptr[abi:ne180100]();
    std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>>::destroy[abi:ne180100]<std::pair<int const,std::shared_ptr<Client>>,void,void>(v3, v2);
  }
  if (a2) {
    std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>>::deallocate[abi:ne180100](*(void *)a1, a2, 1);
  }
}

uint64_t std::__tree<std::__value_type<int,std::shared_ptr<Client>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<Client>>>>::__erase_unique<int>(uint64_t a1, _DWORD *a2)
{
  unint64_t v6[2] = a1;
  v6[1] = (uint64_t)a2;
  v6[0] = std::__tree<std::__value_type<int,std::shared_ptr<Client>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<Client>>>>::find<int>(a1, a2);
  uint64_t v5 = std::__tree<std::shared_ptr<HSMapper>>::end[abi:ne180100]();
  if (std::operator==[abi:ne180100](v6, &v5)) {
    return 0;
  }
  std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *> *>>::__hash_map_iterator[abi:ne180100](&v4, v6[0]);
  std::__tree<std::__value_type<int,std::shared_ptr<Client>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<Client>>>>::erase(a1, v4);
  return 1;
}

uint64_t std::__tree<std::__value_type<int,std::shared_ptr<Client>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<Client>>>>::find<int>(uint64_t a1, _DWORD *a2)
{
  uint64_t v14 = a1;
  uint64_t v13 = a2;
  uint64_t v8 = (void *)std::__tree<std::shared_ptr<HSMapper>>::__root[abi:ne180100]();
  std::__tree<std::shared_ptr<HSMapper>>::__end_node[abi:ne180100]();
  uint64_t v12 = std::__tree<std::__value_type<int,std::shared_ptr<Client>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<Client>>>>::__lower_bound<int>(a1, a2, v8, v2);
  uint64_t v11 = std::__tree<std::shared_ptr<HSMapper>>::end[abi:ne180100]();
  LOBYTE(v1objc_storeStrong(&location, 0) = 0;
  if (std::operator!=[abi:ne180100](&v12, &v11))
  {
    std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
    uint64_t v6 = v3;
    uint64_t v5 = v13;
    std::__tree_const_iterator<std::shared_ptr<HSMapper>,std::__tree_node<std::shared_ptr<HSMapper>,void *> *,long>::operator*[abi:ne180100]((uint64_t)&v12);
    BOOL v10 = !std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>::operator()[abi:ne180100](v6, v5);
  }
  if (v10) {
    return v12;
  }
  else {
    return std::__tree<std::shared_ptr<HSMapper>>::end[abi:ne180100]();
  }
}

uint64_t std::__tree<std::__value_type<int,std::shared_ptr<Client>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<Client>>>>::erase(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v8 = (void *)std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)&v9);
  uint64_t v10 = std::__tree<std::__value_type<int,std::shared_ptr<Client>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<Client>>>>::__remove_node_pointer(a1, (uint64_t)v8);
  std::__tree<std::shared_ptr<HSMapper>>::__node_alloc[abi:ne180100]();
  uint64_t v7 = v2;
  uint64_t v6 = v2;
  std::__tree_const_iterator<std::shared_ptr<HSMapper>,std::__tree_node<std::shared_ptr<HSMapper>,void *> *,long>::operator*[abi:ne180100]((uint64_t)&v9);
  std::__hash_key_value_types<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>::__get_ptr[abi:ne180100]();
  std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>>::destroy[abi:ne180100]<std::pair<int const,std::shared_ptr<Client>>,void,void>(v6, v3);
  std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<Client>>,void *>>>::deallocate[abi:ne180100](v7, v8, 1);
  return v10;
}

uint64_t std::__tree<std::__value_type<int,std::shared_ptr<Client>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<Client>>>>::__lower_bound<int>(uint64_t a1, _DWORD *a2, void *a3, uint64_t a4)
{
  while (a3)
  {
    std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
    if (std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>::operator()[abi:ne180100](v4, (uint64_t)(a3 + 4), a2))
    {
      a3 = (void *)a3[1];
    }
    else
    {
      a4 = (uint64_t)a3;
      a3 = (void *)*a3;
    }
  }
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](&v9, a4);
  return v9;
}

uint64_t std::__tree<std::__value_type<int,std::shared_ptr<Client>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<Client>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<Client>>>>::__remove_node_pointer(uint64_t a1, uint64_t a2)
{
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](&v9, a2);
  std::__tree_const_iterator<std::shared_ptr<HSMapper>,std::__tree_node<std::shared_ptr<HSMapper>,void *> *,long>::operator++[abi:ne180100](&v9);
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  if (*v2 == a2)
  {
    uint64_t v7 = v9;
    std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
    uint64_t *v3 = v7;
  }
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  --*v4;
  std::__tree<std::shared_ptr<HSMapper>>::__end_node[abi:ne180100]();
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(*v5, a2);
  return v9;
}

void __cxx_global_var_init_61()
{
  {
    {
      HSUtil::Coder::_Objectunsigned __int8 Type = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
    }
  }
}

void __cxx_global_var_init_2_57(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_57(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_52(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_52(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_52(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_52(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_53(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void sub_D12B0()
{
  _Unwind_Resume(v0);
}

HSUtil::PortRight *HSUtil::ReceiveRight::ReceiveRight(HSUtil::PortRight *a1)
{
  return a1;
}

{
  os_log_t oslog;
  char *v4;
  BOOL v5;
  kern_return_t v6;
  mach_port_name_t name;
  HSUtil::PortRight *v8;
  HSUtil::PortRight *v9;
  uint8_t v10[56];
  char v11[1024];

  uint64_t v8 = a1;
  uint64_t v9 = a1;
  HSUtil::PortRight::PortRight((uint64_t)a1);
  *(void *)a1 = &off_142B98;
  name = 0;
  uint64_t v6 = mach_port_allocate(mach_task_self_, 1u, &name);
  uint64_t v5 = v6 == 0;
  if (v6)
  {
    uint64_t v4 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingUtil/HSPortRight.h", v11);
    os_log_t oslog = &_os_log_default;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v10, (uint64_t)"HSUtil::ReceiveRight::ReceiveRight(MakeType)", (uint64_t)v4, 69, (uint64_t)"kr==KERN_SUCCESS");
      _os_log_error_impl(&def_411C8, oslog, OS_LOG_TYPE_ERROR, "Assertion failed (%s @ %s:%ju): %s", v10, 0x2Au);
    }
    objc_storeStrong((id *)&oslog, 0);
  }
  else
  {
    *((_DWORD *)a1 + 2) = name;
  }
  return v9;
}

void *HSUtil::ReceiveRight::ReceiveRight(void *a1, int a2)
{
  return a1;
}

{
  void *result;

  HSUtil::PortRight::PortRight((uint64_t)a1, a2);
  uint64_t result = a1;
  *a1 = &off_142B98;
  return result;
}

void HSUtil::ReceiveRight::~ReceiveRight(HSUtil::ReceiveRight *this)
{
}

{
  *(void *)this = &off_142B98;
  (**(void (***)(HSUtil::ReceiveRight *))this)(this);
}

uint64_t HSUtil::SendRight::operator=(uint64_t a1, uint64_t a2)
{
  HSUtil::PortRight::operator=(a1, a2);
  return a1;
}

{
  return HSUtil::SendRight::operator=(a1, a2);
}

void *HSUtil::SendRight::SendRight(void *a1, uint64_t a2)
{
  return a1;
}

{
  HSUtil::PortRight::PortRight((uint64_t)a1);
  *a1 = &off_141408;
  HSUtil::SendRight::operator=((uint64_t)a1, a2);
  return a1;
}

void sub_D1B2C()
{
  _Unwind_Resume(v0);
}

uint64_t std::make_shared[abi:ne180100]<HSUtil::ReceiveRight,HSUtil::ReceiveRight,void>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v6 = a2;
  uint64_t v5 = a1;
  std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>::allocator[abi:ne180100]((uint64_t)&v4);
  return std::allocate_shared[abi:ne180100]<HSUtil::ReceiveRight,std::allocator<HSUtil::ReceiveRight>,HSUtil::ReceiveRight,void>((uint64_t)&v4, v5, a2);
}

void sub_D1BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, int a11, int a12, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  return std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100]((void *)(a1 + 48), (void *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__1(uint64_t a1)
{
  return std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a1 + 48);
}

uint64_t std::shared_ptr<HSUtil::ReceiveRight>::reset[abi:ne180100](uint64_t *a1)
{
  void v3[2] = (uint64_t)a1;
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100](v3);
  std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::swap[abi:ne180100](v3, a1);
  return std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100]((uint64_t)v3);
}

void sub_D1D28(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  *(void *)(v9 - 24) = a1;
  *(_DWORD *)(v9 - 28) = a2;
  a9.receiver = *(id *)(v9 - 8);
  a9.super_class = (Class)HSMachPortListener;
  objc_msgSendSuper2(&a9, "dealloc");
  _Unwind_Resume(*(_Unwind_Exception **)(v9 - 24));
}

void sub_D2628()
{
  _Unwind_Resume(v0);
}

uint64_t HSUtil::ReceiveRight::reset(HSUtil::ReceiveRight *this)
{
  uint64_t result = HSUtil::PortRight::operator BOOL((uint64_t)this);
  if (result)
  {
    uint64_t result = mach_port_mod_refs(mach_task_self_, *((_DWORD *)this + 2), 1u, -1);
    if (result) {
      __assert_rtn("reset", "HSPortRight.h", 80, "kr == KERN_SUCCESS");
    }
    *((_DWORD *)this + 2) = 0;
  }
  return result;
}

uint64_t HSUtil::PortRight::operator=(uint64_t a1, uint64_t a2)
{
  (**(void (***)(uint64_t))a1)(a1);
  uint64_t result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  return result;
}

{
  return HSUtil::PortRight::operator=(a1, a2);
}

uint64_t std::allocate_shared[abi:ne180100]<HSUtil::ReceiveRight,std::allocator<HSUtil::ReceiveRight>,HSUtil::ReceiveRight,void>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v11 = a3;
  uint64_t v10 = a1;
  uint64_t v9 = a2;
  std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::ReceiveRight>>>::__allocation_guard[abi:ne180100]<std::allocator<HSUtil::ReceiveRight>>((uint64_t)v8, 1);
  uint64_t v3 = (void *)std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__get[abi:ne180100]((uint64_t)v8);
  std::__shared_ptr_emplace<HSUtil::ReceiveRight>::__shared_ptr_emplace[abi:ne180100]<HSUtil::ReceiveRight,std::allocator<HSUtil::ReceiveRight>,0>(v3, v9);
  uint64_t v7 = std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::FileDescriptor>>>::__release_ptr[abi:ne180100]((uint64_t)v8);
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::shared_ptr<HSUtil::FileDescriptor>::__create_with_control_block[abi:ne180100]<HSUtil::FileDescriptor,std::__shared_ptr_emplace<HSUtil::FileDescriptor>>(v4, v7, a3);
  return std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::ReceiveRight>>>::~__allocation_guard[abi:ne180100]((uint64_t)v8);
}

void sub_D2C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, _Unwind_Exception *exception_object)
{
  std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::ReceiveRight>>>::~__allocation_guard[abi:ne180100](v16 - 48);
  _Unwind_Resume(a1);
}

uint64_t std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::ReceiveRight>>>::__allocation_guard[abi:ne180100]<std::allocator<HSUtil::ReceiveRight>>(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  void *v2;
  uint64_t result;

  std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>(a1);
  *(void *)(a1 + 8) = a2;
  uint64_t v2 = std::allocator_traits<std::allocator<std::__shared_ptr_emplace<HSUtil::ReceiveRight>>>::allocate[abi:ne180100](a1, *(void *)(a1 + 8));
  uint64_t result = a1;
  *(void *)(a1 + std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a9 + 16) = v2;
  return result;
}

void *std::__shared_ptr_emplace<HSUtil::ReceiveRight>::__shared_ptr_emplace[abi:ne180100]<HSUtil::ReceiveRight,std::allocator<HSUtil::ReceiveRight>,0>(void *a1, uint64_t a2)
{
  return a1;
}

{
  void *v2;
  unsigned char v5[13];
  uint64_t v6;
  void *v7;

  uint64_t v7 = a1;
  uint64_t v6 = a2;
  std::__shared_weak_count::__shared_weak_count[abi:ne180100]((uint64_t)a1, 0);
  *a1 = off_142BC8;
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::_Storage::_Storage[abi:ne180100]((uint64_t)(a1 + 3));
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::allocator_traits<std::allocator<HSUtil::ReceiveRight>>::construct[abi:ne180100]<HSUtil::ReceiveRight,HSUtil::ReceiveRight,void>((uint64_t)v5, v2, v6);
  return a1;
}

uint64_t std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::ReceiveRight>>>::~__allocation_guard[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::ReceiveRight>>>::__destroy[abi:ne180100](a1);
  return a1;
}

void *std::allocator_traits<std::allocator<std::__shared_ptr_emplace<HSUtil::ReceiveRight>>>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  return std::allocator<HSRecordingTypes::PlayFrame>::allocate[abi:ne180100](a1, a2);
}

void sub_D2E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

void *std::allocator_traits<std::allocator<HSUtil::ReceiveRight>>::construct[abi:ne180100]<HSUtil::ReceiveRight,HSUtil::ReceiveRight,void>(uint64_t a1, void *a2, uint64_t a3)
{
  return std::allocator<HSUtil::ReceiveRight>::construct[abi:ne180100]<HSUtil::ReceiveRight,HSUtil::ReceiveRight>(a1, a2, a3);
}

std::__shared_weak_count *std::__shared_ptr_emplace<HSUtil::ReceiveRight>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  return a1;
}

{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_142BC8;
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::_Storage::~_Storage[abi:ne180100]((uint64_t)&a1[1]);
  std::__shared_weak_count::~__shared_weak_count(a1);
  return a1;
}

void std::__shared_ptr_emplace<HSUtil::ReceiveRight>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
}

void std::__shared_ptr_emplace<HSUtil::ReceiveRight>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<HSUtil::ReceiveRight>::__on_zero_shared_weak(uint64_t a1)
{
  uint64_t v4 = a1;
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::allocator<std::__function::__func<BOOL (*)(HSUtil::Encoder &,objc_object *),std::allocator<BOOL (*)(HSUtil::Encoder &,objc_object *)>,BOOL ()(HSUtil::Encoder &,objc_object *)>>::allocator[abi:ne180100]<BOOL (*)(HSUtil::Encoder &,objc_object *)>((uint64_t)&v3);
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::_Storage::~_Storage[abi:ne180100](a1 + 24);
  std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
  std::allocator_traits<std::allocator<std::__shared_ptr_emplace<HSUtil::ReceiveRight>>>::deallocate[abi:ne180100]((uint64_t)&v3, v1, 1);
}

void *std::allocator<HSUtil::ReceiveRight>::construct[abi:ne180100]<HSUtil::ReceiveRight,HSUtil::ReceiveRight>(uint64_t a1, void *a2, uint64_t a3)
{
  return HSUtil::ReceiveRight::ReceiveRight(a2, a3);
}

void *HSUtil::ReceiveRight::ReceiveRight(void *a1, uint64_t a2)
{
  return a1;
}

{
  HSUtil::PortRight::PortRight((uint64_t)a1);
  *a1 = &off_142B98;
  HSUtil::ReceiveRight::operator=((uint64_t)a1, a2);
  return a1;
}

uint64_t HSUtil::ReceiveRight::operator=(uint64_t a1, uint64_t a2)
{
  HSUtil::PortRight::operator=(a1, a2);
  return a1;
}

{
  return HSUtil::ReceiveRight::operator=(a1, a2);
}

void std::__shared_ptr_emplace<HSUtil::ReceiveRight>::__on_zero_shared_impl[abi:ne180100]<std::allocator<HSUtil::ReceiveRight>,0>(uint64_t a1)
{
  uint64_t v3 = a1;
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::__shared_ptr_emplace<HSUtil::FileDescriptor>::__get_elem[abi:ne180100]();
  std::allocator_traits<std::allocator<HSUtil::ReceiveRight>>::destroy[abi:ne180100]<HSUtil::ReceiveRight,void>((uint64_t)&v2, v1);
}

void std::allocator_traits<std::allocator<HSUtil::ReceiveRight>>::destroy[abi:ne180100]<HSUtil::ReceiveRight,void>(uint64_t a1, HSUtil::ReceiveRight *a2)
{
}

void std::allocator<HSUtil::ReceiveRight>::destroy[abi:ne180100](uint64_t a1, HSUtil::ReceiveRight *a2)
{
}

void std::allocator_traits<std::allocator<std::__shared_ptr_emplace<HSUtil::ReceiveRight>>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::allocator<std::__shared_ptr_emplace<HSUtil::ReceiveRight>>::deallocate[abi:ne180100](uint64_t a1, void *a2, uint64_t a3)
{
}

void std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<HSUtil::ReceiveRight>>>::__destroy[abi:ne180100](uint64_t a1)
{
  if (*(void *)(a1 + 16)) {
    std::allocator_traits<std::allocator<std::__shared_ptr_emplace<HSUtil::ReceiveRight>>>::deallocate[abi:ne180100](a1, *(void **)(a1 + 16), *(void *)(a1 + 8));
  }
}

void __cxx_global_var_init_62()
{
  {
    {
      HSUtil::Coder::_Objectunsigned __int8 Type = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
    }
  }
}

void __cxx_global_var_init_2_58(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_58(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_53(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_53(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_53(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_53(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_54(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void sub_D3E3C()
{
  _Unwind_Resume(v0);
}

void sub_D3E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, int a11, int a12, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  return std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::shared_ptr[abi:ne180100]((void *)(a1 + 48), (void *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__2(uint64_t a1)
{
  return std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a1 + 48);
}

void sub_D3FAC(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  *(void *)(v9 - 24) = a1;
  *(_DWORD *)(v9 - 28) = a2;
  a9.receiver = *(id *)(v9 - 8);
  a9.super_class = (Class)HSSocketListener;
  objc_msgSendSuper2(&a9, "dealloc");
  _Unwind_Resume(*(_Unwind_Exception **)(v9 - 24));
}

void sub_D4348(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,int a29,uint64_t a30)
{
  a30 = a1;
  a29 = a2;
  HSUtil::FileDescriptor::~FileDescriptor((HSUtil::FileDescriptor *)&a22);
  std::unique_lock<std::mutex>::~unique_lock[abi:ne180100]((uint64_t)&v30);
  JUMPOUT(0xD4380);
}

void sub_D4378()
{
  _Unwind_Resume(v0);
}

void __cxx_global_var_init_63()
{
  {
    {
      HSUtil::Coder::_Objectunsigned __int8 Type = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
    }
  }
}

void __cxx_global_var_init_2_59(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_59(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_54(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_54(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_54(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_54(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_55(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void HSUtil::CreateServerSocket(HSUtil *this, const char *a2)
{
  char v2 = (const char *)__chkstk_darwin(this, a2);
  uint64_t v8 = v3;
  uint64_t v34 = v3;
  uint64_t v33 = v2;
  unsigned __int16 v32 = v4;
  if (!v2) {
    __assert_rtn("CreateServerSocket", "HSSocket.mm", 11, "addr");
  }
  if (!v32) {
    __assert_rtn("CreateServerSocket", "HSSocket.mm", 12, "port > 0");
  }
  *(void *)&v45.sa_len = 512;
  *(void *)&v45.sa_data[6] = 0;
  *(_WORD *)v45.sa_data = _OSSwapInt16(v32);
  *(_DWORD *)&v45.sa_data[2] = 0;
  *(void *)&v45.sa_data[6] = 0;
  int v31 = inet_pton(2, v33, &v45.sa_data[2]);
  BOOL v30 = v31 == 1;
  if (v31 == 1)
  {
    int v31 = socket(2, 1, 6);
    BOOL v26 = v31 >= 0;
    if (v31 >= 0)
    {
      HSUtil::FileDescriptor::FileDescriptor((HSUtil::FileDescriptor *)v22, v31);
      int v21 = 1;
      int v7 = HSUtil::FileDescriptor::fd((HSUtil::FileDescriptor *)v22);
      int v31 = setsockopt(v7, 0xFFFF, 512, &v21, 4u);
      BOOL v20 = v31 == 0;
      if (v31)
      {
        long long v19 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingUtil/HSSocket.mm", v40);
        os_log_t oslog = &_os_log_default;
        os_log_type_t v17 = OS_LOG_TYPE_ERROR;
        if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v39, (uint64_t)"FileDescriptor HSUtil::CreateServerSocket(const char *, uint16_t)", (uint64_t)v19, 35, (uint64_t)"!ir");
          _os_log_error_impl(&def_411C8, oslog, v17, "Assertion failed (%s @ %s:%ju): %s", v39, 0x2Au);
        }
        objc_storeStrong((id *)&oslog, 0);
        HSUtil::FileDescriptor::FileDescriptor(v8);
        int v16 = 1;
      }
      else
      {
        int v6 = HSUtil::FileDescriptor::fd((HSUtil::FileDescriptor *)v22);
        int v31 = bind(v6, &v45, 0x10u);
        BOOL v15 = v31 == 0;
        if (v31)
        {
          uint64_t v14 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingUtil/HSSocket.mm", v38);
          os_log_t v13 = &_os_log_default;
          os_log_type_t v12 = OS_LOG_TYPE_ERROR;
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v37, (uint64_t)"FileDescriptor HSUtil::CreateServerSocket(const char *, uint16_t)", (uint64_t)v14, 39, (uint64_t)"!ir");
            _os_log_error_impl(&def_411C8, v13, v12, "Assertion failed (%s @ %s:%ju): %s", v37, 0x2Au);
          }
          objc_storeStrong((id *)&v13, 0);
          HSUtil::FileDescriptor::FileDescriptor(v8);
          int v16 = 1;
        }
        else
        {
          int v5 = HSUtil::FileDescriptor::fd((HSUtil::FileDescriptor *)v22);
          int v31 = listen(v5, 20);
          BOOL v11 = v31 == 0;
          if (v31)
          {
            uint64_t v10 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingUtil/HSSocket.mm", v36);
            os_log_t v9 = &_os_log_default;
            if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
            {
              __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v35, (uint64_t)"FileDescriptor HSUtil::CreateServerSocket(const char *, uint16_t)", (uint64_t)v10, 42, (uint64_t)"!ir");
              _os_log_error_impl(&def_411C8, v9, OS_LOG_TYPE_ERROR, "Assertion failed (%s @ %s:%ju): %s", v35, 0x2Au);
            }
            objc_storeStrong((id *)&v9, 0);
            HSUtil::FileDescriptor::FileDescriptor(v8);
            int v16 = 1;
          }
          else
          {
            HSUtil::FileDescriptor::FileDescriptor((uint64_t)v8, (uint64_t)v22);
            int v16 = 1;
          }
        }
      }
      HSUtil::FileDescriptor::~FileDescriptor((HSUtil::FileDescriptor *)v22);
    }
    else
    {
      uint64_t v25 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingUtil/HSSocket.mm", v42);
      id v24 = &_os_log_default;
      os_log_type_t v23 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)v24, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v41, (uint64_t)"FileDescriptor HSUtil::CreateServerSocket(const char *, uint16_t)", (uint64_t)v25, 27, (uint64_t)"ir>=0");
        _os_log_error_impl(&def_411C8, (os_log_t)v24, v23, "Assertion failed (%s @ %s:%ju): %s", v41, 0x2Au);
      }
      objc_storeStrong(&v24, 0);
      HSUtil::FileDescriptor::FileDescriptor(v8);
    }
  }
  else
  {
    BOOL v29 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingUtil/HSSocket.mm", v44);
    id location = &_os_log_default;
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)location, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v43, (uint64_t)"FileDescriptor HSUtil::CreateServerSocket(const char *, uint16_t)", (uint64_t)v29, 21, (uint64_t)"ir==1");
      _os_log_error_impl(&def_411C8, (os_log_t)location, type, "Assertion failed (%s @ %s:%ju): %s", v43, 0x2Au);
    }
    objc_storeStrong(&location, 0);
    HSUtil::FileDescriptor::FileDescriptor(v8);
  }
}

void sub_D4EBC()
{
  _Unwind_Resume(v0);
}

uint64_t _OSSwapInt16(unsigned __int16 a1)
{
  return (unsigned __int16)(((int)a1 >> 8) | (a1 << 8));
}

void HSUtil::CreateClientSocket(HSUtil *this@<X0>, const char *a2@<X1>, HSUtil::FileDescriptor *a3@<X8>)
{
  uint64_t v22 = a3;
  int v21 = (char *)this;
  unsigned __int16 v20 = (unsigned __int16)a2;
  if (!this) {
    __assert_rtn("CreateClientSocket", "HSSocket.mm", 48, "addr");
  }
  if (!v20) {
    __assert_rtn("CreateClientSocket", "HSSocket.mm", 49, "port > 0");
  }
  *(_WORD *)&v29.sa_len = 512;
  *(_WORD *)v29.sa_data = _OSSwapInt16(v20);
  *(_DWORD *)&v29.sa_data[2] = 0;
  *(void *)&v29.sa_data[6] = 0;
  int v19 = inet_pton(2, v21, &v29.sa_data[2]);
  BOOL v18 = v19 == 1;
  if (v19 == 1)
  {
    int v19 = socket(2, 1, 6);
    BOOL v14 = v19 >= 0;
    if (v19 >= 0)
    {
      HSUtil::FileDescriptor::FileDescriptor((HSUtil::FileDescriptor *)v10, v19);
      do
      {
        int v5 = HSUtil::FileDescriptor::fd((HSUtil::FileDescriptor *)v10);
        printf("connect(%d)\n", v5);
        int v4 = HSUtil::FileDescriptor::fd((HSUtil::FileDescriptor *)v10);
        int v19 = connect(v4, &v29, 0x10u);
        BOOL v3 = 0;
        if (v19 == -1) {
          BOOL v3 = *__error() == 4;
        }
      }
      while (v3);
      BOOL v9 = v19 == 0;
      if (v19)
      {
        uint64_t v8 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingUtil/HSSocket.mm", v24);
        os_log_t v7 = &_os_log_default;
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v23, (uint64_t)"FileDescriptor HSUtil::CreateClientSocket(const char *, uint16_t)", (uint64_t)v8, 69, (uint64_t)"!ir");
          _os_log_error_impl(&def_411C8, v7, OS_LOG_TYPE_ERROR, "Assertion failed (%s @ %s:%ju): %s", v23, 0x2Au);
        }
        objc_storeStrong((id *)&v7, 0);
        HSUtil::FileDescriptor::FileDescriptor(a3);
      }
      else
      {
        HSUtil::FileDescriptor::FileDescriptor((uint64_t)a3, (uint64_t)v10);
      }
      HSUtil::FileDescriptor::~FileDescriptor((HSUtil::FileDescriptor *)v10);
    }
    else
    {
      os_log_t v13 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingUtil/HSSocket.mm", v26);
      os_log_t v12 = &_os_log_default;
      os_log_type_t v11 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v25, (uint64_t)"FileDescriptor HSUtil::CreateClientSocket(const char *, uint16_t)", (uint64_t)v13, 62, (uint64_t)"ir>=0");
        _os_log_error_impl(&def_411C8, v12, v11, "Assertion failed (%s @ %s:%ju): %s", v25, 0x2Au);
      }
      objc_storeStrong((id *)&v12, 0);
      HSUtil::FileDescriptor::FileDescriptor(a3);
    }
  }
  else
  {
    os_log_type_t v17 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingUtil/HSSocket.mm", v28);
    os_log_t oslog = &_os_log_default;
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v27, (uint64_t)"FileDescriptor HSUtil::CreateClientSocket(const char *, uint16_t)", (uint64_t)v17, 58, (uint64_t)"ir==1");
      _os_log_error_impl(&def_411C8, oslog, type, "Assertion failed (%s @ %s:%ju): %s", v27, 0x2Au);
    }
    objc_storeStrong((id *)&oslog, 0);
    HSUtil::FileDescriptor::FileDescriptor(a3);
  }
}

void sub_D5470()
{
  _Unwind_Resume(v0);
}

uint64_t HSUtil::ConfigureSocket()
{
  id v0 = (HSUtil::FileDescriptor *)__chkstk_darwin();
  os_log_type_t v11 = v1;
  unint64_t v44 = v0;
  unint64_t v43 = v1;
  int v42 = 0;
  int v42 = (*v1 ^ 1) & 1;
  int v2 = HSUtil::FileDescriptor::fd(v0);
  int v41 = setsockopt(v2, 0xFFFF, 4130, &v42, 4u);
  BOOL v40 = v41 == 0;
  if (v41)
  {
    unint64_t v39 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingUtil/HSSocket.mm", v55);
    id location = &_os_log_default;
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)location, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v54, (uint64_t)"BOOL HSUtil::ConfigureSocket(const FileDescriptor &, SocketConfig)", (uint64_t)v39, 86, (uint64_t)"!ir");
      _os_log_error_impl(&def_411C8, (os_log_t)location, type, "Assertion failed (%s @ %s:%ju): %s", v54, 0x2Au);
    }
    objc_storeStrong(&location, 0);
    char v45 = 0;
  }
  else
  {
    int v3 = HSUtil::FileDescriptor::fd(v44);
    int v36 = fcntl(v3, 3, 0);
    BOOL v35 = v36 != -1;
    if (v36 == -1)
    {
      uint64_t v34 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingUtil/HSSocket.mm", v53);
      id v33 = &_os_log_default;
      os_log_type_t v32 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)v33, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v52, (uint64_t)"BOOL HSUtil::ConfigureSocket(const FileDescriptor &, SocketConfig)", (uint64_t)v34, 92, (uint64_t)"flags != -1");
        _os_log_error_impl(&def_411C8, (os_log_t)v33, v32, "Assertion failed (%s @ %s:%ju): %s", v52, 0x2Au);
      }
      objc_storeStrong(&v33, 0);
      char v45 = 0;
    }
    else
    {
      if (v11[1]) {
        unsigned int v10 = v36 & 0xFFFFFFFB;
      }
      else {
        unsigned int v10 = v36 | 4;
      }
      int v36 = v10;
      int v4 = HSUtil::FileDescriptor::fd(v44);
      int v31 = fcntl(v4, 4, v10);
      BOOL v30 = v31 == 0;
      if (v31)
      {
        sockaddr v29 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingUtil/HSSocket.mm", v51);
        os_log_t oslog = &_os_log_default;
        os_log_type_t v27 = OS_LOG_TYPE_ERROR;
        if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v50, (uint64_t)"BOOL HSUtil::ConfigureSocket(const FileDescriptor &, SocketConfig)", (uint64_t)v29, 96, (uint64_t)"!ir");
          _os_log_error_impl(&def_411C8, oslog, v27, "Assertion failed (%s @ %s:%ju): %s", v50, 0x2Au);
        }
        objc_storeStrong((id *)&oslog, 0);
        char v45 = 0;
      }
      else
      {
        unint64_t Timeval = 0;
        uint64_t v26 = 0;
        uint64_t v24 = *((void *)v11 + 1);
        unint64_t Timeval = HSUtil::_getTimeval(v24);
        uint64_t v26 = v5;
        int v6 = HSUtil::FileDescriptor::fd(v44);
        int v23 = setsockopt(v6, 0xFFFF, 4102, &Timeval, 0x10u);
        BOOL v22 = v23 == 0;
        if (v23)
        {
          int v21 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingUtil/HSSocket.mm", v49);
          os_log_t v20 = &_os_log_default;
          os_log_type_t v19 = OS_LOG_TYPE_ERROR;
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v48, (uint64_t)"BOOL HSUtil::ConfigureSocket(const FileDescriptor &, SocketConfig)", (uint64_t)v21, 103, (uint64_t)"!ir");
            _os_log_error_impl(&def_411C8, v20, v19, "Assertion failed (%s @ %s:%ju): %s", v48, 0x2Au);
          }
          objc_storeStrong((id *)&v20, 0);
          char v45 = 0;
        }
        else
        {
          unint64_t v17 = 0;
          uint64_t v18 = 0;
          uint64_t v16 = *((void *)v11 + 2);
          unint64_t v17 = HSUtil::_getTimeval(v16);
          uint64_t v18 = v7;
          int v8 = HSUtil::FileDescriptor::fd(v44);
          int v15 = setsockopt(v8, 0xFFFF, 4101, &v17, 0x10u);
          BOOL v14 = v15 == 0;
          if (v15)
          {
            os_log_t v13 = basename_r("/Library/Caches/com.apple.xbs/Sources/HIDSensingPipeline/HIDSensingUtil/HSSocket.mm", v47);
            os_log_t v12 = &_os_log_default;
            if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
            {
              __os_log_helper_16_2_4_8_32_8_32_8_0_8_32((uint64_t)v46, (uint64_t)"BOOL HSUtil::ConfigureSocket(const FileDescriptor &, SocketConfig)", (uint64_t)v13, 110, (uint64_t)"!ir");
              _os_log_error_impl(&def_411C8, v12, OS_LOG_TYPE_ERROR, "Assertion failed (%s @ %s:%ju): %s", v46, 0x2Au);
            }
            objc_storeStrong((id *)&v12, 0);
            char v45 = 0;
          }
          else
          {
            char v45 = 1;
          }
        }
      }
    }
  }
  return v45 & 1;
}

unint64_t HSUtil::_getTimeval(uint64_t a1)
{
  uint64_t v2 = a1;
  if (std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)&v2) >= 0)
  {
    if (std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)&v2))
    {
      unint64_t v3 = std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)&v2)
         / 0xF4240uLL;
      LODWORD(v4) = std::__compressed_pair_elem<std::allocator<HSUtil::Encoder::ContainerRecord> &,1,false>::__get[abi:ne180100]((uint64_t)&v2)
                  % 0xF4240uLL;
    }
    else
    {
      unint64_t v3 = 0;
      LODWORD(v4) = 1;
    }
  }
  else
  {
    unint64_t v3 = 0;
    LODWORD(v4) = 0;
  }
  return v3;
}

void *HSUtil::CoderKey::keyState(HSUtil::CoderKey *this)
{
  {
    HSUtil::CoderKey::KeyState::KeyState((HSUtil::CoderKey::KeyState *)&HSUtil::CoderKey::keyState(void)::keyState);
    __cxa_atexit((void (*)(void *))HSUtil::CoderKey::KeyState::~KeyState, &HSUtil::CoderKey::keyState(void)::keyState, &def_411C8);
  }
  return &HSUtil::CoderKey::keyState(void)::keyState;
}

HSUtil::CoderKey::KeyState *HSUtil::CoderKey::KeyState::KeyState(HSUtil::CoderKey::KeyState *this)
{
  return this;
}

{
  std::vector<HSUtil::CoderKey const*>::vector[abi:ne180100]((void *)this + 1);
  std::unordered_map<char const*,HSUtil::CoderKey const*,HSUtil::CoderKey::KeyStringHash,HSUtil::CoderKey::KeyStringEqual,std::allocator<std::pair<char const* const,HSUtil::CoderKey const*>>>::unordered_map[abi:ne180100]((uint64_t)this + 32);
  return this;
}

void HSUtil::CoderKey::KeyState::~KeyState(HSUtil::CoderKey::KeyState *this)
{
}

{
  std::unordered_map<char const*,HSUtil::CoderKey const*,HSUtil::CoderKey::KeyStringHash,HSUtil::CoderKey::KeyStringEqual,std::allocator<std::pair<char const* const,HSUtil::CoderKey const*>>>::~unordered_map[abi:ne180100]((uint64_t)this + 32);
  std::vector<HSUtil::CoderKey const*>::~vector[abi:ne180100]((uint64_t *)this + 1);
}

void *std::vector<HSUtil::CoderKey const*>::vector[abi:ne180100](void *a1)
{
  return a1;
}

{
  *a1 = 0;
  a1[1] = 0;
  std::__compressed_pair<HSUtil::Encoder::ContainerRecord *>::__compressed_pair[abi:ne180100]<decltype(nullptr),std::__default_init_tag>(a1 + 2);
  return a1;
}

uint64_t std::unordered_map<char const*,HSUtil::CoderKey const*,HSUtil::CoderKey::KeyStringHash,HSUtil::CoderKey::KeyStringEqual,std::allocator<std::pair<char const* const,HSUtil::CoderKey const*>>>::unordered_map[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::__hash_table<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,HSUtil::CoderKey const*>,HSUtil::CoderKey::KeyStringHash,HSUtil::CoderKey::KeyStringEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,HSUtil::CoderKey const*>,HSUtil::CoderKey::KeyStringEqual,HSUtil::CoderKey::KeyStringHash,true>,std::allocator<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>>::__hash_table(a1);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,HSUtil::CoderKey const*>,HSUtil::CoderKey::KeyStringHash,HSUtil::CoderKey::KeyStringEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,HSUtil::CoderKey const*>,HSUtil::CoderKey::KeyStringEqual,HSUtil::CoderKey::KeyStringHash,true>,std::allocator<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>>::__hash_table(uint64_t a1)
{
  return a1;
}

{
  float v3;
  int v4;
  uint64_t v5;

  uint64_t v5 = a1;
  std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::unique_ptr[abi:ne180100]<true,void>((void *)a1);
  std::__compressed_pair<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *>>::__compressed_pair[abi:ne180100]<true,void>((void *)(a1 + 16));
  uint64_t v4 = 0;
  std::__compressed_pair<unsigned long,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>>::__compressed_pair[abi:ne180100]<int,std::__default_init_tag>((void *)(a1 + 24), &v4);
  unint64_t v3 = 1.0;
  std::__compressed_pair<float,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>>::__compressed_pair[abi:ne180100]<float,std::__default_init_tag>((_DWORD *)(a1 + 32), &v3);
  return a1;
}

void *std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::unique_ptr[abi:ne180100]<true,void>(void *a1)
{
  return a1;
}

{
  std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::__compressed_pair[abi:ne180100]<std::__value_init_tag,std::__value_init_tag>(a1);
  return a1;
}

void *std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::__compressed_pair[abi:ne180100]<std::__value_init_tag,std::__value_init_tag>(void *a1)
{
  return a1;
}

{
  std::__compressed_pair_elem<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> **,0,false>::__compressed_pair_elem[abi:ne180100](a1);
  std::__compressed_pair_elem<std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>,1,false>::__compressed_pair_elem[abi:ne180100](a1 + 1);
  return a1;
}

void *std::__compressed_pair_elem<std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>,1,false>::__compressed_pair_elem[abi:ne180100](void *a1)
{
  return a1;
}

void *std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>::__bucket_list_deallocator[abi:ne180100](void *a1)
{
  return a1;
}

{
  int v3;
  void *v4;

  uint64_t v4 = a1;
  unint64_t v3 = 0;
  std::__compressed_pair<unsigned long,std::allocator<std::__hash_node_base<std::__hash_node<HSStage * {__strong},void *> *> *>>::__compressed_pair[abi:ne180100]<int,std::__default_init_tag>(a1, &v3);
  return a1;
}

uint64_t std::unordered_map<char const*,HSUtil::CoderKey const*,HSUtil::CoderKey::KeyStringHash,HSUtil::CoderKey::KeyStringEqual,std::allocator<std::pair<char const* const,HSUtil::CoderKey const*>>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::__hash_table<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,HSUtil::CoderKey const*>,HSUtil::CoderKey::KeyStringHash,HSUtil::CoderKey::KeyStringEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,HSUtil::CoderKey const*>,HSUtil::CoderKey::KeyStringEqual,HSUtil::CoderKey::KeyStringHash,true>,std::allocator<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>>::~__hash_table(a1);
  return a1;
}

uint64_t *std::vector<HSUtil::CoderKey const*>::~vector[abi:ne180100](uint64_t *a1)
{
  return a1;
}

{
  uint64_t *v3[2];

  v3[1] = a1;
  std::__hash_iterator<std::__hash_node<HSStage * {__strong},void *> *>::__hash_iterator[abi:ne180100](v3, (uint64_t)a1);
  std::vector<HSUtil::CoderKey const*>::__destroy_vector::operator()[abi:ne180100](v3);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,HSUtil::CoderKey const*>,HSUtil::CoderKey::KeyStringHash,HSUtil::CoderKey::KeyStringEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,HSUtil::CoderKey const*>,HSUtil::CoderKey::KeyStringEqual,HSUtil::CoderKey::KeyStringHash,true>,std::allocator<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>>::~__hash_table(uint64_t a1)
{
  return a1;
}

{
  void **v1;

  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  std::__hash_table<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,HSUtil::CoderKey const*>,HSUtil::CoderKey::KeyStringHash,HSUtil::CoderKey::KeyStringEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,HSUtil::CoderKey const*>,HSUtil::CoderKey::KeyStringEqual,HSUtil::CoderKey::KeyStringHash,true>,std::allocator<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>>::__deallocate_node(a1, *v1);
  std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::~unique_ptr[abi:ne180100](a1);
  return a1;
}

void std::__hash_table<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,HSUtil::CoderKey const*>,HSUtil::CoderKey::KeyStringHash,HSUtil::CoderKey::KeyStringEqual,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,HSUtil::CoderKey const*>,HSUtil::CoderKey::KeyStringEqual,HSUtil::CoderKey::KeyStringHash,true>,std::allocator<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>>::__deallocate_node(uint64_t a1, void *a2)
{
  std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
  uint64_t v6 = v2;
  while (a2)
  {
    uint64_t v5 = (void *)*a2;
    std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
    uint64_t v4 = (void *)v3;
    std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>::__get_value[abi:ne180100](v3);
    std::__hash_key_value_types<std::__hash_value_type<char const*,HSUtil::CoderKey const*>>::__get_ptr[abi:ne180100]();
    std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>>>::destroy[abi:ne180100]<std::pair<char const* const,HSUtil::CoderKey const*>,void,void>();
    std::__destroy_at[abi:ne180100]<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>,0>((uint64_t)v4);
    std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *>>>::deallocate[abi:ne180100](v6, v4, 1);
    a2 = v5;
  }
}

uint64_t std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::reset[abi:ne180100]();
  return a1;
}

void std::unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *[],std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::reset[abi:ne180100]()
{
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  uint64_t v3 = *v0;
  std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *>::__upcast[abi:ne180100]();
  void *v1 = 0;
  if (v3)
  {
    std::__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> **,std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>>::second[abi:ne180100]();
    std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char const*,HSUtil::CoderKey const*>,void *> *> *>>::operator()[abi:ne180100](v2, v3);
  }
}

void std::vector<HSUtil::CoderKey const*>::__destroy_vector::operator()[abi:ne180100](uint64_t **a1)
{
  if (**a1)
  {
    std::vector<HSUtil::CoderKey const*>::__clear[abi:ne180100](*a1);
    std::vector<HSUtil::CoderKey const*>::__annotate_delete[abi:ne180100]();
    std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
    uint64_t v4 = v1;
    uint64_t v3 = (void *)**a1;
    uint64_t v2 = std::vector<HSUtil::CoderKey const*>::capacity[abi:ne180100](*a1);
    std::allocator_traits<std::allocator<HSUtil::CoderKey const*>>::deallocate[abi:ne180100](v4, v3, v2);
  }
}

void std::vector<HSUtil::CoderKey const*>::__clear[abi:ne180100](uint64_t *a1)
{
}

void std::vector<HSUtil::CoderKey const*>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); a2 != i; i -= 8)
  {
    std::vector<HSUtil::CoderKey const*>::__alloc[abi:ne180100]();
    std::__compressed_pair_elem<unsigned long,0,false>::__get[abi:ne180100]();
    std::allocator_traits<std::allocator<HSUtil::CoderKey const*>>::destroy[abi:ne180100]<HSUtil::CoderKey const*,void>();
  }
  *(void *)(a1 + 8) = a2;
}

void __cxx_global_var_init_64()
{
  {
    {
      HSUtil::Coder::_Objectunsigned __int8 Type = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
    }
  }
}

uint64_t HSUtil::MachTimeFromNanoseconds(HSUtil *this)
{
  MachTimebase = (unsigned int *)HSUtil::getMachTimebase(this);
  return (void)this * MachTimebase[1] / (uint64_t)*MachTimebase;
}

__darwin_time_t HSUtil::GetUnixTime(HSUtil *this)
{
  gettimeofday(&v2, 0);
  return 1000000 * v2.tv_sec + v2.tv_usec;
}

void ___ZN6HSUtilL15getMachTimebaseEv_block_invoke(id a1)
{
}

void sub_D6940(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void HSAccessProvider::RegisterServer(HSAccessProvider *this, const HSUtil::SendRight *a2, const char *a3)
{
  uint64_t v5 = xpc_connection_create("com.apple.hid.HIDSensingInternalSupport.HIDSensingAccessProvider", 0);
  connection = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "xpc_connection_create returned null");
  }
  xpc_connection_set_event_handler(v5, &__block_literal_global_92);
  xpc_connection_activate(connection);
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_uint64(v6, "CommandKey", 4uLL);
  HSUtil::PortRight::port(this);
  xpc_dictionary_set_mach_send();
  xpc_dictionary_set_string(v6, "ServerNameKey", (const char *)a2);
  xpc_object_t v7 = xpc_connection_send_message_with_reply_sync(connection, v6);
  HSAccessProvider::validateSendMessageReply(v7);
}

void sub_D6B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  __cxa_free_exception(v10);

  _Unwind_Resume(a1);
}

void sub_D6CD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_D6D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  unsigned int v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)HSTServerStage;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_D6E6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_D6F38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_D7160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, id a15)
{
  HSUtil::FileDescriptor::~FileDescriptor((HSUtil::FileDescriptor *)&a9);
  if (a2 == 1)
  {
    os_log_t v20 = __cxa_begin_catch(a1);
    int v21 = MTLoggingPlugin();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      -[HSTServerStage setPreferenceValue:forKey:]((uint64_t)v20);
    }

    __cxa_end_catch();
    JUMPOUT(0xD7078);
  }
  HSUtil::FileDescriptor::~FileDescriptor((HSUtil::FileDescriptor *)&a12);

  HSUtil::ObjectLock::~ObjectLock(&a15);
  _Unwind_Resume(a1);
}

void HSAccessProvider::CreateServerSocket(HSAccessProvider *this@<X0>, NSString *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3 = a2;
  uint64_t v5 = this;
  if (!v5)
  {
    os_log_type_t v11 = +[NSAssertionHandler currentHandler];
    os_log_t v12 = +[NSString stringWithUTF8String:"HSUtil::FileDescriptor HSAccessProvider::CreateServerSocket(NSString *__strong, uint16_t)"];
    [v11 handleFailureInFunction:v12, @"HSAccessProvider.h", 37, @"Invalid parameter not satisfying: %@", @"address" file lineNumber description];
  }
  xpc_object_t v6 = xpc_connection_create("com.apple.hid.HIDSensingInternalSupport.HIDSensingAccessProvider", 0);
  xpc_object_t v7 = v6;
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "xpc_connection_create returned null");
  }
  xpc_connection_set_event_handler(v6, &__block_literal_global_112);
  xpc_connection_activate(v7);
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_uint64(v8, "CommandKey", 1uLL);
  int v15 = v5;
  xpc_dictionary_set_string(v8, "AddressKey", (const char *)[(HSAccessProvider *)v15 UTF8String]);
  xpc_dictionary_set_uint64(v8, "PortKey", v3);
  xpc_object_t v9 = xpc_connection_send_message_with_reply_sync(v7, v8);
  HSAccessProvider::validateSendMessageReply(v9);
  int v10 = xpc_dictionary_dup_fd(v9, "DescriptorKey");
  if (v10 < 0)
  {
    BOOL v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "xpc_dictionary_dup_fd failed");
  }
  *(void *)a3 = &off_141448;
  *(void *)(a3 + 8) = &off_141478;
  *(_DWORD *)(a3 + std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a9 + 16) = v10;
}

void sub_D745C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

HSUtil::Encoder *HSUtil::Encoder::encodeString(HSUtil::Encoder *this, const CoderKey *a2, const char *a3)
{
  if (!*(_DWORD *)this)
  {
    uint64_t v4 = this;
    this = (HSUtil::Encoder *)HSUtil::Encoder::_encodeKey(this, a2);
    if (!*(_DWORD *)v4)
    {
      return (HSUtil::Encoder *)HSUtil::Encoder::_encodeString(v4, a3);
    }
  }
  return this;
}

uint64_t HSUtil::SendRight::SendRight(uint64_t a1, uint64_t a2)
{
  mach_port_name_t v3 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 8) = v3;
  *(void *)a1 = &off_141408;
  if (v3 - 1 <= 0xFFFFFFFD && mach_port_insert_right(mach_task_self_, v3, v3, 0x14u)) {
    HSUtil::SendRight::SendRight();
  }
  return a1;
}

void OUTLINED_FUNCTION_3_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void __cxx_global_var_init_65()
{
  {
    HSUtil::Coder::_Objectunsigned __int8 Type = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_60(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_60(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_55(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_55(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_55(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_55(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_56(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void __cxx_global_var_init_9_28(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)114,(char)111,(char)106,(char)101,(char)99,(char)116,(char)86,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"projectVersion", a2);
  }
}

uint64_t contactDensityFromRadii(int a1, int a2, int a3)
{
  return (__int16)(400
                               * a1
                               / ((int)fmax((double)(int)sqrt(fmax((double)a2, 600.0) * (double)(int)fmax((double)a3, 600.0)), 600.0)- 430));
}

void sub_D7EDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<HSTPipeline::Contact>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 6;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + (a2 << 6);
    }
  }
  else
  {
    std::vector<HSTPipeline::Contact>::__append((void **)a1, a2 - v2);
  }
}

void sub_D85D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_D8BD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_D91A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_D9354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_D9420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_D99F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_D9B44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_D9C54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_DA2A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_DA6E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned char *HSTFrameParserTypes::ReportCast<HSTPipeline::FirmwareInterface::InputReport::DriverNotificationHeader>(void *a1)
{
  id v1 = a1;
  unint64_t v2 = [v1 bytes];
  if ((unint64_t)[v1 length] >= 2)
  {
    if (*v2 != 64) {
      unint64_t v2 = 0;
    }
  }
  else
  {
    unint64_t v2 = 0;
  }

  return v2;
}

void sub_DA79C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned char *HSTFrameParserTypes::ReportCast<HSTPipeline::FirmwareInterface::InputReport::DriverNotification>(void *a1)
{
  id v1 = a1;
  unint64_t v2 = [v1 bytes];
  if ((unint64_t)[v1 length] >= 3)
  {
    if (*v2 != 64) {
      unint64_t v2 = 0;
    }
  }
  else
  {
    unint64_t v2 = 0;
  }

  return v2;
}

void sub_DA808(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_DA9F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_DAB8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned char *HSTFrameParserTypes::ReportCast<HSTPipeline::FirmwareInterface::InputReport::TimestampSync>(void *a1)
{
  id v1 = a1;
  unint64_t v2 = [v1 bytes];
  if ((unint64_t)[v1 length] >= 0x14)
  {
    if (*v2 != 82) {
      unint64_t v2 = 0;
    }
  }
  else
  {
    unint64_t v2 = 0;
  }

  return v2;
}

void sub_DAC1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_DACE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_DAEE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

HSUtil::Encoder *HSUtil::Encoder::encodeCodable<HSTPipeline::SurfaceCoordinates>(HSUtil::Encoder *result, const CoderKey *a2, HSTPipeline::SurfaceCoordinates *a3)
{
  if (!*(_DWORD *)result)
  {
    uint64_t v4 = result;
    uint64_t result = (HSUtil::Encoder *)HSUtil::Encoder::_encodeKey(result, a2);
    if (!*(_DWORD *)v4)
    {
      uint64_t result = (HSUtil::Encoder *)HSTPipeline::SurfaceCoordinates::encode(a3, v4);
      if (!*(_DWORD *)v4 && (result & 1) == 0) {
        *(_DWORD *)uint64_t v4 = 10;
      }
    }
  }
  return result;
}

HSUtil::Encoder *HSUtil::Encoder::encodeCodable<HSTPipeline::SensorSize>(HSUtil::Encoder *result, const CoderKey *a2, HSTPipeline::SensorSize *a3)
{
  if (!*(_DWORD *)result)
  {
    uint64_t v4 = result;
    uint64_t result = (HSUtil::Encoder *)HSUtil::Encoder::_encodeKey(result, a2);
    if (!*(_DWORD *)v4)
    {
      uint64_t result = (HSUtil::Encoder *)HSTPipeline::SensorSize::encode(a3, v4);
      if (!*(_DWORD *)v4 && (result & 1) == 0) {
        *(_DWORD *)uint64_t v4 = 10;
      }
    }
  }
  return result;
}

void sub_DB2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

const CoderKey *HSUtil::Decoder::decodeCodable<HSTPipeline::SurfaceCoordinates>(const CoderKey *result, CoderKey *a2, HSTPipeline::SurfaceCoordinates *a3)
{
  if (SLODWORD(result->var0) <= 4)
  {
    uint64_t v4 = (uint64_t)result;
    unint64_t v5 = *(void *)&result[4].var1;
    uint64_t result = HSUtil::Decoder::_findKey(result, &v5, a2);
    if (!*(_DWORD *)v4)
    {
      uint64_t result = (const CoderKey *)HSUtil::Decoder::_readCodable<HSTPipeline::SurfaceCoordinates>(v4, &v5, a3);
      if (*(_DWORD *)v4 == 3) {
        *(_DWORD *)uint64_t v4 = 13;
      }
      else {
        *(void *)(v4 + 72) = v5;
      }
    }
  }
  return result;
}

const CoderKey *HSUtil::Decoder::decodeCodable<HSTPipeline::SensorSize>(const CoderKey *result, CoderKey *a2, HSTPipeline::SensorSize *a3)
{
  if (SLODWORD(result->var0) <= 4)
  {
    uint64_t v4 = (uint64_t)result;
    unint64_t v5 = *(void *)&result[4].var1;
    uint64_t result = HSUtil::Decoder::_findKey(result, &v5, a2);
    if (!*(_DWORD *)v4)
    {
      uint64_t result = (const CoderKey *)HSUtil::Decoder::_readCodable<HSTPipeline::SensorSize>(v4, &v5, a3);
      if (*(_DWORD *)v4 == 3) {
        *(_DWORD *)uint64_t v4 = 13;
      }
      else {
        *(void *)(v4 + 72) = v5;
      }
    }
  }
  return result;
}

void std::vector<HSTPipeline::Contact>::__append(void **a1, unint64_t a2)
{
  xpc_object_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  xpc_object_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 6)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), a2 << 6);
      v7 += 64 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 6);
    if (v9 >> 58) {
      std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 6;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 5 > v9) {
      unint64_t v9 = v11 >> 5;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      os_log_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HSTPipeline::Contact>>(v4, v12);
    }
    else {
      os_log_t v13 = 0;
    }
    BOOL v14 = &v13[64 * v10];
    int v15 = &v13[64 * v12];
    bzero(v14, a2 << 6);
    uint64_t v16 = &v14[64 * a2];
    uint64_t v18 = (char *)*a1;
    unint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        long long v19 = *((_OWORD *)v17 - 4);
        long long v20 = *((_OWORD *)v17 - 3);
        long long v21 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - MTRestZoneIntegrator_::clearMotion(this, 1) = v21;
        *((_OWORD *)v14 - 4) = v19;
        *((_OWORD *)v14 - 3) = v20;
        v14 -= 64;
        v17 -= 64;
      }
      while (v17 != v18);
      unint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<HSTPipeline::Contact>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 6);
}

char *std::vector<HSTPipeline::Contact>::__assign_with_size[abi:ne180100]<HSTPipeline::Contact*,HSTPipeline::Contact*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  xpc_object_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 6)
  {
    if (v9)
    {
      *((void *)result + MTRestZoneIntegrator_::clearMotion(this, 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 >> 58) {
      std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    if (v8 >> 5 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<HSTPipeline::Contact>::__vallocate[abi:ne180100](v7, v11);
    os_log_t v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      long long v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v12 = (void **)(result + 8);
  BOOL v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 6;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[64 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    long long v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  void *v12 = &v9[v17];
  return result;
}

char *std::vector<HSTPipeline::Contact>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::vector<HSUtil::CoderKey const*>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HSTPipeline::Contact>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

void *HSUtil::Decoder::_readCodable<HSTPipeline::SurfaceCoordinates>(uint64_t a1, unint64_t *a2, HSTPipeline::SurfaceCoordinates *a3)
{
  unint64_t v6 = *a2;
  uint64_t result = (void *)HSUtil::Decoder::_skipElement((HSUtil::Decoder *)a1, a2);
  if (!*(_DWORD *)a1)
  {
    uint64_t v8 = result;
    uint64_t result = HSUtil::Decoder::_loadKeyTableIfNeeded((HSUtil::Decoder *)a1, a2);
    if (!*(_DWORD *)a1)
    {
      v11[1] = *(void *)(a1 + 8);
      v11[0] = 0xAAAAAAAA00000000;
      uint64_t v10 = *(void *)(a1 + 24);
      unint64_t v9 = *(std::__shared_weak_count **)(a1 + 32);
      unint64_t v12 = 0;
      uint64_t v13 = v10;
      BOOL v14 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v15 = *(_OWORD *)(a1 + 40);
      unint64_t v16 = *(void *)(a1 + 56) + v6;
      size_t v17 = v8;
      uint64_t v18 = 0;
      if ((HSTPipeline::SurfaceCoordinates::decode(a3, (HSUtil::Decoder *)v11) & 1) == 0) {
        *(_DWORD *)a1 = 10;
      }
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      uint64_t result = v12;
      unint64_t v12 = 0;
      if (result)
      {
        std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::~__value_func[abi:ne180100](result);
        operator delete();
      }
    }
  }
  return result;
}

void sub_DB7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *HSUtil::Decoder::_readCodable<HSTPipeline::SensorSize>(uint64_t a1, unint64_t *a2, HSTPipeline::SensorSize *a3)
{
  unint64_t v6 = *a2;
  uint64_t result = (void *)HSUtil::Decoder::_skipElement((HSUtil::Decoder *)a1, a2);
  if (!*(_DWORD *)a1)
  {
    uint64_t v8 = result;
    uint64_t result = HSUtil::Decoder::_loadKeyTableIfNeeded((HSUtil::Decoder *)a1, a2);
    if (!*(_DWORD *)a1)
    {
      v11[1] = *(void *)(a1 + 8);
      v11[0] = 0xAAAAAAAA00000000;
      uint64_t v10 = *(void *)(a1 + 24);
      unint64_t v9 = *(std::__shared_weak_count **)(a1 + 32);
      unint64_t v12 = 0;
      uint64_t v13 = v10;
      BOOL v14 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v15 = *(_OWORD *)(a1 + 40);
      unint64_t v16 = *(void *)(a1 + 56) + v6;
      size_t v17 = v8;
      uint64_t v18 = 0;
      if ((HSTPipeline::SensorSize::decode(a3, (HSUtil::Decoder *)v11) & 1) == 0) {
        *(_DWORD *)a1 = 10;
      }
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      uint64_t result = v12;
      unint64_t v12 = 0;
      if (result)
      {
        std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::~__value_func[abi:ne180100](result);
        operator delete();
      }
    }
  }
  return result;
}

void sub_DB8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void __cxx_global_var_init_66()
{
  {
    HSUtil::Coder::_Objectunsigned __int8 Type = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_61(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_61(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_56(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_56(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_56(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_56(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_57(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void __cxx_global_var_init_15_31(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)117,(char)114,(char)102,(char)97,(char)99,(char)101,(char)67,(char)111,(char)111,(char)114,(char)100,(char)105,(char)110,(char)97,(char)116,(char)101,(char)115>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"surfaceCoordinates", a2);
  }
}

void __cxx_global_var_init_16_31(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)101,(char)110,(char)115,(char)111,(char)114,(char)83,(char)105,(char)122,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"sensorSize", a2);
  }
}

void __cxx_global_var_init_17_31(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)105,(char)110,(char)82,(char)97,(char)110,(char)103,(char)101,(char)67,(char)111,(char)110,(char)116,(char)97,(char)99,(char)116,(char)115>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"inRangeContacts", a2);
  }
}

void sub_DBD9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_DBF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_DBFF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)HSTPencilVirtualService;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_DC4CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_DC5C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_DC638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_DCAEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_DCCBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_DCD50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_DCEE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_DD06C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_DD124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__3(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
  id v1 = (void **)(a1 + 48);
  std::vector<HIDEvent * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void sub_DD3C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_DD67C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_DD7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_DD97C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_DDB2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_67()
{
  {
    HSUtil::Coder::_Objectunsigned __int8 Type = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_62(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_62(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_57(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_57(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_57(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_57(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_58(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void __cxx_global_var_init_15_32(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)110,(char)100,(char)111,(char)114,(char)73,(char)68>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"vendorID", a2);
  }
}

void __cxx_global_var_init_16_32(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)112,(char)114,(char)111,(char)100,(char)117,(char)99,(char)116,(char)73,(char)68>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"productID", a2);
  }
}

void __cxx_global_var_init_17_32(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)111,(char)119,(char)110,(char)101,(char)114,(char)82,(char)101,(char)103,(char)105,(char)115,(char)116,(char)114,(char)121,(char)73,(char)68>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"ownerRegistryID", a2);
  }
}

void __cxx_global_var_init_18_31(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)105,(char)110,(char)70,(char)111,(char)114,(char)99,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"minForce", a2);
  }
}

void __cxx_global_var_init_19_31(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)97,(char)99,(char)99,(char)117,(char)114,(char)97,(char)116,(char)101,(char)77,(char)97,(char)120,(char)70,(char)111,(char)114,(char)99,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"accurateMaxForce", a2);
  }
}

void __cxx_global_var_init_20_31(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)101,(char)120,(char)116,(char)101,(char)110,(char)100,(char)101,(char)100,(char)77,(char)97,(char)120,(char)70,(char)111,(char)114,(char)99,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"extendedMaxForce", a2);
  }
}

void __cxx_global_var_init_21_32(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)97,(char)120,(char)72,(char)111,(char)118,(char)101,(char)114,(char)72,(char)101,(char)105,(char)103,(char)104,(char)116>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"maxHoverHeight", a2);
  }
}

void __cxx_global_var_init_22_32(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)104,(char)111,(char)118,(char)101,(char)114,(char)68,(char)105,(char)115,(char)97,(char)98,(char)108,(char)101,(char)100>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"hoverDisabled", a2);
  }
}

void __cxx_global_var_init_23_32(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)119,(char)105,(char)100,(char)116,(char)104,(char)77,(char)109>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"widthMm", a2);
  }
}

void __cxx_global_var_init_24_32(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)104,(char)101,(char)105,(char)103,(char)104,(char)116,(char)77,(char)109>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"heightMm", a2);
  }
}

void sub_DE488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_DE5D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_DE7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_DE958(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_68()
{
  {
    HSUtil::Coder::_Objectunsigned __int8 Type = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void sub_DEAD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_DEBA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_DEC7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_DEE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

void HSUtil::Decoder::decodeData(HSUtil::Decoder *this@<X0>, uint64_t a2@<X8>)
{
  if (*(int *)this < 5)
  {
    unint64_t v7 = *((void *)this + 9);
    unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v4 + MTRestZoneIntegrator_::clearMotion(this, 1) = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v5[2] = v4;
    v5[3] = v4;
    v5[0] = v4;
    v5[1] = v4;
    HSUtil::Decoder::_readData(this, &v7, (uint64_t)v5);
    if (*(_DWORD *)this)
    {
      *(void *)a2 = &off_1410A8;
      *(void *)(a2 + 8) = &off_141100;
      *(void *)(a2 + std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a9 + 16) = &off_141120;
      *(void *)(a2 + 24) = &off_141138;
      *(void *)(a2 + os_unfair_lock_unlock(this + 32) = off_141150;
      *(void *)(a2 + 4objc_storeStrong(&location, 0) = 0;
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + 56) = 0;
      *(unsigned char *)(a2 + 64) &= 0xFCu;
    }
    else
    {
      *((void *)this + 9) = v7;
      HSUtil::Buffer::Buffer(a2, (uint64_t)v5);
    }
    HSUtil::Buffer::~Buffer((HSUtil::Buffer *)v5);
  }
  else
  {
    *(void *)a2 = &off_1410A8;
    *(void *)(a2 + 8) = &off_141100;
    *(void *)(a2 + std::shared_ptr<std::vector<std::atomic<HSUtil::CoderKey const*>>>::~shared_ptr[abi:ne180100](a9 + 16) = &off_141120;
    *(void *)(a2 + 24) = &off_141138;
    *(void *)(a2 + os_unfair_lock_unlock(this + 32) = off_141150;
    *(void *)(a2 + 4objc_storeStrong(&location, 0) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
    *(unsigned char *)(a2 + 64) &= 0xFCu;
  }
}

void sub_DF08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void HSUtil::Decoder::_readData(HSUtil::Decoder *this@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((void *)this + 6)) {
    HSUtil::Decoder::_readDataByRef(this, a2, a3);
  }
  else {
    HSUtil::Decoder::_readDataByCopy(this, a2, a3);
  }
}

void __cxx_global_var_init_69()
{
  {
    HSUtil::Coder::_Objectunsigned __int8 Type = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_63(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)72,(char)83,(char)84,(char)72,(char)73,(char)68,(char)69,(char)118,(char)101,(char)110,(char)116,(char)115>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"HSTHIDEvents", a2);
  }
}

void sub_DF7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id location)
{
  _Unwind_Resume(a1);
}

void sub_DF8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_DF944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)HSTBackboardBridge;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_DFA70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_DFB2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_DFBE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_DFC98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_DFD48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_DFE68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_DFEFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_E00F4(_Unwind_Exception *a1)
{
  unint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_E05E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  HSUtil::Decoder::~Decoder((HSUtil::Decoder *)va);
  _Unwind_Resume(a1);
}

id getBool(NSDictionary *a1, NSString *a2)
{
  id v2 = [(NSDictionary *)a1 objectForKeyedSubscript:a2];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }

  id v4 = [v3 BOOLValue];
  return v4;
}

void sub_E06FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_70()
{
  {
    HSUtil::Coder::_Objectunsigned __int8 Type = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"com.apple.hid.HSCoder.ObjectType", v0);
  }
}

void __cxx_global_var_init_2_64(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)121,(char)112,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"type", a2);
  }
}

void __cxx_global_var_init_3_63(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"timestamp", a2);
  }
}

void __cxx_global_var_init_4_58(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)110,(char)105,(char)120,(char)84,(char)105,(char)109,(char)101,(char)115,(char)116,(char)97,(char)109,(char)112>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"unixTimestamp", a2);
  }
}

void __cxx_global_var_init_5_58(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)118,(char)101,(char)114,(char)115,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"version", a2);
  }
}

void __cxx_global_var_init_6_58(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)117,(char)116,(char)99,(char)79,(char)102,(char)102,(char)115,(char)101,(char)116>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"utcOffset", a2);
  }
}

void __cxx_global_var_init_7_58(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)116,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"state", a2);
  }
}

void __cxx_global_var_init_8_59(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)100,(char)97,(char)116,(char)97>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"data", a2);
  }
}

void __cxx_global_var_init_15_33(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)111,(char)117,(char)99,(char)104,(char)77,(char)111,(char)100,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"touchMode", a2);
  }
}

void __cxx_global_var_init_16_33(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)99,(char)114,(char)101,(char)101,(char)110,(char)79,(char)114,(char)105,(char)101,(char)110,(char)116,(char)97,(char)116,(char)105,(char)111,(char)110>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"screenOrientation", a2);
  }
}

void __cxx_global_var_init_17_33(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)109,(char)111,(char)116,(char)105,(char)111,(char)110,(char)83,(char)116,(char)97,(char)116,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"motionState", a2);
  }
}

void __cxx_global_var_init_18_32(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)116,(char)111,(char)117,(char)99,(char)104,(char)72,(char)97,(char)110,(char)100>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"touchHand", a2);
  }
}

void __cxx_global_var_init_19_32(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)119,(char)114,(char)105,(char)115,(char)116,(char)83,(char)116,(char)97,(char)116,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"wristState", a2);
  }
}

void __cxx_global_var_init_20_32(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)111,(char)99,(char)107,(char)104,(char)111,(char)108,(char)109,(char)83,(char)116,(char)97,(char)116,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"stockholmState", a2);
  }
}

void __cxx_global_var_init_21_33(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)119,(char)105,(char)114,(char)101,(char)108,(char)101,(char)115,(char)115,(char)67,(char)104,(char)97,(char)114,(char)103,(char)105,(char)110,(char)103,(char)83,(char)116,(char)97,(char)116,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"wirelessChargingState", a2);
  }
}

void __cxx_global_var_init_22_33(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)117,(char)99,(char)107,(char)84,(char)111,(char)117,(char)99,(char)104,(char)68,(char)101,(char)116,(char)101,(char)99,(char)116,(char)111,(char)114,(char)83,(char)116,(char)97,(char)116,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"stuckTouchDetectorState", a2);
  }
}

void __cxx_global_var_init_23_33(uint64_t a1, const char *a2)
{
  {
    HSUtil::CoderKey::Literal<(char)115,(char)116,(char)117,(char)99,(char)107,(char)116,(char)111,(char)117,(char)99,(char)104,(char)68,(char)101,(char)116,(char)101,(char)99,(char)116,(char)111,(char)114,(char)83,(char)116,(char)97,(char)116,(char)101>::Kefloat y = (uint64_t)HSUtil::CoderKey::New((HSUtil::CoderKey *)"stucktouchDetectorState", a2);
  }
}

uint64_t HSTPipeline::Contact::encode(HSTPipeline::Contact *this, HSUtil::Encoder *a2)
{
  if (!*(_DWORD *)a2) {
    HSUtil::Encoder::_encodeMapStart((unint64_t *)a2, 1);
  }
  HSUtil::Encoder::encodeUInt(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)99,(char)111,(char)110,(char)116,(char)97,(char)99,(char)116,(char)73,(char)68>::Key, *(unsigned __int8 *)this);
  HSUtil::Encoder::encodeUInt(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)103,(char)101>::Key, *((unsigned __int8 *)this + 1));
  HSUtil::Encoder::encodeUInt(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)102,(char)105,(char)110,(char)103,(char)101,(char)114>::Key, *((unsigned __int8 *)this + 2));
  HSUtil::Encoder::encodeInt(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)104,(char)97,(char)110,(char)100>::Key, *((char *)this + 3));
  HSUtil::Encoder::encodeUInt(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)102,(char)108,(char)97,(char)103,(char)115>::Key, *((void *)this + 1));
  HSUtil::Encoder::encodeCodable<HSTPipeline::Position const>(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)112,(char)111,(char)115,(char)105,(char)116,(char)105,(char)111,(char)110>::Key, (HSTPipeline::Contact *)((char *)this + 16));
  HSUtil::Encoder::encodeCodable<HSTPipeline::Position const>(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)118,(char)101,(char)108,(char)111,(char)99,(char)105,(char)116,(char)121>::Key, (HSTPipeline::Contact *)((char *)this + 28));
  HSUtil::Encoder::encodeInt(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)102,(char)111,(char)114,(char)99,(char)101>::Key, *((int *)this + 9));
  HSUtil::Encoder::encodeUInt(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)109,(char)97,(char)106,(char)111,(char)114,(char)82,(char)97,(char)100,(char)105,(char)117,(char)115>::Key, *((int *)this + 10));
  HSUtil::Encoder::encodeUInt(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)109,(char)105,(char)110,(char)111,(char)114,(char)82,(char)97,(char)100,(char)105,(char)117,(char)115>::Key, *((int *)this + 11));
  HSUtil::Encoder::encodeFloat(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)97,(char)122,(char)105,(char)109,(char)117,(char)116,(char)104>::Key, *((float *)this + 12));
  HSUtil::Encoder::encodeFloat(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)122,(char)115,(char)105,(char)103,(char)110,(char)97,(char)108>::Key, *((float *)this + 13));
  HSUtil::Encoder::encodeFloat(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)122,(char)100,(char)101,(char)110,(char)115,(char)105,(char)116,(char)121>::Key, *((float *)this + 14));
  HSUtil::Encoder::encodeFloat(a2, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)105,(char)108,(char)116>::Key, *((float *)this + 15));
  if (!*(_DWORD *)a2) {
    HSUtil::Encoder::_encodeContainerStop((uint64_t (***)(void))a2);
  }
  return 1;
}

HSUtil::Encoder *HSUtil::Encoder::encodeCodable<HSTPipeline::Position const>(HSUtil::Encoder *result, const CoderKey *a2, HSTPipeline::Position *a3)
{
  if (!*(_DWORD *)result)
  {
    id v4 = result;
    __n128 result = (HSUtil::Encoder *)HSUtil::Encoder::_encodeKey(result, a2);
    if (!*(_DWORD *)v4)
    {
      __n128 result = (HSUtil::Encoder *)HSTPipeline::Position::encode(a3, v4);
      if (!*(_DWORD *)v4 && (result & 1) == 0) {
        *(_DWORD *)id v4 = 10;
      }
    }
  }
  return result;
}

uint64_t HSTPipeline::Contact::decode(HSTPipeline::Contact *this, HSUtil::Decoder *a2)
{
  v4.int var0 = (char *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&v4.int var1 = 0xAAAAAAAAAAAAAAAALL;
  CoderKey v11 = v4;
  CoderKey v12 = v4;
  CoderKey v9 = v4;
  CoderKey v10 = v4;
  CoderKey v8 = v4;
  HSUtil::Decoder::decodeMap((unint64_t *)a2, (uint64_t)&v8);
  if (*(_DWORD *)a2)
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/HIDSensingTouch/HSTPipeline/Contact.mm", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      HSTPipeline::Contact::decode();
    }
LABEL_46:
    uint64_t v5 = 0;
    goto LABEL_47;
  }
  *(unsigned char *)this = HSUtil::Decoder::decodeUInt((HSUtil::Decoder *)&v8, (const CoderKey *)HSUtil::CoderKey::Literal<(char)99,(char)111,(char)110,(char)116,(char)97,(char)99,(char)116,(char)73,(char)68>::Key);
  if (LODWORD(v8.var0))
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/HIDSensingTouch/HSTPipeline/Contact.mm", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      HSTPipeline::Contact::decode();
    }
    goto LABEL_46;
  }
  *((unsigned char *)this + MTRestZoneIntegrator_::clearMotion(this, 1) = HSUtil::Decoder::decodeUInt((HSUtil::Decoder *)&v8, (const CoderKey *)HSUtil::CoderKey::Literal<(char)115,(char)116,(char)97,(char)103,(char)101>::Key);
  if (LODWORD(v8.var0))
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/HIDSensingTouch/HSTPipeline/Contact.mm", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      HSTPipeline::Contact::decode();
    }
    goto LABEL_46;
  }
  *((unsigned char *)this + 2) = HSUtil::Decoder::decodeUInt((HSUtil::Decoder *)&v8, (const CoderKey *)HSUtil::CoderKey::Literal<(char)102,(char)105,(char)110,(char)103,(char)101,(char)114>::Key);
  if (LODWORD(v8.var0))
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/HIDSensingTouch/HSTPipeline/Contact.mm", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      HSTPipeline::Contact::decode();
    }
    goto LABEL_46;
  }
  *((unsigned char *)this + 3) = HSUtil::Decoder::decodeInt((HSUtil::Decoder *)&v8, (const CoderKey *)HSUtil::CoderKey::Literal<(char)104,(char)97,(char)110,(char)100>::Key);
  if (LODWORD(v8.var0))
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/HIDSensingTouch/HSTPipeline/Contact.mm", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      HSTPipeline::Contact::decode();
    }
    goto LABEL_46;
  }
  *((void *)this + MTRestZoneIntegrator_::clearMotion(this, 1) = HSUtil::Decoder::decodeInt((HSUtil::Decoder *)&v8, (const CoderKey *)HSUtil::CoderKey::Literal<(char)102,(char)108,(char)97,(char)103,(char)115>::Key);
  if (LODWORD(v8.var0))
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/HIDSensingTouch/HSTPipeline/Contact.mm", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      HSTPipeline::Contact::decode();
    }
    goto LABEL_46;
  }
  HSUtil::Decoder::decodeCodable<HSTPipeline::Position>(&v8, (CoderKey *)HSUtil::CoderKey::Literal<(char)112,(char)111,(char)115,(char)105,(char)116,(char)105,(char)111,(char)110>::Key, (HSTPipeline::Contact *)((char *)this + 16));
  if (LODWORD(v8.var0))
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/HIDSensingTouch/HSTPipeline/Contact.mm", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      HSTPipeline::Contact::decode();
    }
    goto LABEL_46;
  }
  HSUtil::Decoder::decodeCodable<HSTPipeline::Velocity>(&v8, (CoderKey *)HSUtil::CoderKey::Literal<(char)118,(char)101,(char)108,(char)111,(char)99,(char)105,(char)116,(char)121>::Key, (HSTPipeline::Contact *)((char *)this + 28));
  if (LODWORD(v8.var0))
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/HIDSensingTouch/HSTPipeline/Contact.mm", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      HSTPipeline::Contact::decode();
    }
    goto LABEL_46;
  }
  *((_DWORD *)this + 9) = HSUtil::Decoder::decodeInt((HSUtil::Decoder *)&v8, (const CoderKey *)HSUtil::CoderKey::Literal<(char)102,(char)111,(char)114,(char)99,(char)101>::Key);
  if (LODWORD(v8.var0))
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/HIDSensingTouch/HSTPipeline/Contact.mm", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      HSTPipeline::Contact::decode();
    }
    goto LABEL_46;
  }
  *((_DWORD *)this + 1objc_storeStrong(&location, 0) = HSUtil::Decoder::decodeUInt((HSUtil::Decoder *)&v8, (const CoderKey *)HSUtil::CoderKey::Literal<(char)109,(char)97,(char)106,(char)111,(char)114,(char)82,(char)97,(char)100,(char)105,(char)117,(char)115>::Key);
  if (LODWORD(v8.var0))
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/HIDSensingTouch/HSTPipeline/Contact.mm", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      HSTPipeline::Contact::decode();
    }
    goto LABEL_46;
  }
  *((_DWORD *)this + 1MTRestZoneIntegrator_::clearMotion(this, 1) = HSUtil::Decoder::decodeUInt((HSUtil::Decoder *)&v8, (const CoderKey *)HSUtil::CoderKey::Literal<(char)109,(char)105,(char)110,(char)111,(char)114,(char)82,(char)97,(char)100,(char)105,(char)117,(char)115>::Key);
  if (LODWORD(v8.var0))
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/HIDSensingTouch/HSTPipeline/Contact.mm", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      HSTPipeline::Contact::decode();
    }
    goto LABEL_46;
  }
  *((float *)this + std::vector<HSRecordingTypes::PlayFrame>::~vector[abi:ne180100]((uint64_t *)this + 12) = HSUtil::Decoder::decodeFloat((HSUtil::Decoder *)&v8, (const CoderKey *)HSUtil::CoderKey::Literal<(char)97,(char)122,(char)105,(char)109,(char)117,(char)116,(char)104>::Key);
  if (LODWORD(v8.var0))
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/HIDSensingTouch/HSTPipeline/Contact.mm", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      HSTPipeline::Contact::decode();
    }
    goto LABEL_46;
  }
  *((float *)this + 13) = HSUtil::Decoder::decodeFloat((HSUtil::Decoder *)&v8, (const CoderKey *)HSUtil::CoderKey::Literal<(char)122,(char)115,(char)105,(char)103,(char)110,(char)97,(char)108>::Key);
  if (LODWORD(v8.var0))
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/HIDSensingTouch/HSTPipeline/Contact.mm", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      HSTPipeline::Contact::decode();
    }
    goto LABEL_46;
  }
  *((float *)this + 14) = HSUtil::Decoder::decodeFloat((HSUtil::Decoder *)&v8, (const CoderKey *)HSUtil::CoderKey::Literal<(char)122,(char)100,(char)101,(char)110,(char)115,(char)105,(char)116,(char)121>::Key);
  if (LODWORD(v8.var0))
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/HIDSensingTouch/HSTPipeline/Contact.mm", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      HSTPipeline::Contact::decode();
    }
    goto LABEL_46;
  }
  *((float *)this + 15) = HSUtil::Decoder::decodeFloat((HSUtil::Decoder *)&v8, (const CoderKey *)HSUtil::CoderKey::Literal<(char)116,(char)105,(char)108,(char)116>::Key);
  if (LODWORD(v8.var0))
  {
    memset(__b, 170, sizeof(__b));
    basename_r("/Library/Caches/com.apple.xbs/Sources/Multitouch/HIDSensingTouch/HSTPipeline/Contact.mm", __b);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      HSTPipeline::Contact::decode();
    }
    goto LABEL_46;
  }
  uint64_t v5 = 1;
LABEL_47:
  if (v10.var0) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v10.var0);
  }
  int var0 = v9.var0;
  v9.int var0 = 0;
  if (var0)
  {
    std::__function::__value_func<objc_object * ()(HSUtil::Decoder &,HSUtil::CoderKey const&)>::~__value_func[abi:ne180100](var0);
    operator delete();
  }
  return v5;
}