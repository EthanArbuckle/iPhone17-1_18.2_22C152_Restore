uint64_t outlined init with take of LinkDialogIdProvider(long long *a1, uint64_t a2)
{
  long long v2;
  long long v3;

  v2 = *a1;
  v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t LinkSuggestionsOwnerDefinition.getSourceGenerator()@<X0>(uint64_t *a1@<X8>)
{
  outlined init with copy of LinkClient(v1 + 16, (uint64_t)v6);
  uint64_t v3 = type metadata accessor for LinkSuggestionsGenerator();
  uint64_t v4 = swift_allocObject();
  outlined init with take of LinkDialogIdProvider(v6, v4 + 16);
  a1[3] = v3;
  uint64_t result = lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator(&lazy protocol witness table cache variable for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator, 255, (void (*)(uint64_t))type metadata accessor for LinkSuggestionsGenerator);
  a1[4] = result;
  *a1 = v4;
  return result;
}

uint64_t LinkSuggestionsOwnerDefinition.getTargetOwnerDefinition()@<X0>(uint64_t *a1@<X8>)
{
  outlined init with copy of LinkClient(v1 + 16, (uint64_t)v8);
  outlined init with copy of LinkClient(v1 + 56, (uint64_t)v7);
  uint64_t v3 = type metadata accessor for LinkSuggestionsTargetOwnerDefinition();
  uint64_t v4 = swift_allocObject();
  outlined init with take of LinkDialogIdProvider(v8, v4 + 16);
  outlined init with take of LinkDialogIdProvider(v7, v4 + 56);
  a1[3] = v3;
  uint64_t result = lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator((unint64_t *)&lazy protocol witness table cache variable for type LinkSuggestionsTargetOwnerDefinition and conformance LinkSuggestionsTargetOwnerDefinition, v5, (void (*)(uint64_t))type metadata accessor for LinkSuggestionsTargetOwnerDefinition);
  a1[4] = result;
  *a1 = v4;
  return result;
}

uint64_t LinkSuggestionsOwnerDefinition.__allocating_init(linkClient:dialogIdProvider:)(long long *a1, long long *a2)
{
  uint64_t v4 = swift_allocObject();
  outlined init with take of LinkDialogIdProvider(a1, v4 + 16);
  outlined init with take of LinkDialogIdProvider(a2, v4 + 56);
  return v4;
}

uint64_t LinkSuggestionsOwnerDefinition.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return v0;
}

uint64_t protocol witness for OwnerDefinition.getSourceGenerator() in conformance LinkSuggestionsOwnerDefinition@<X0>(uint64_t *a1@<X8>)
{
  return LinkSuggestionsOwnerDefinition.getSourceGenerator()(a1);
}

uint64_t protocol witness for OwnerDefinition.getTargetOwnerDefinition() in conformance LinkSuggestionsOwnerDefinition@<X0>(uint64_t *a1@<X8>)
{
  return LinkSuggestionsOwnerDefinition.getTargetOwnerDefinition()(a1);
}

uint64_t protocol witness for OwnerProvider.getOwner() in conformance LinkSuggestionsOwnerDefinition()
{
  return LinkSuggestionsTargetOwnerDefinition.getOwner()();
}

uint64_t protocol witness for Wrappable.getRoot() in conformance LinkSuggestionsOwnerDefinition()
{
  return Wrappable.getRoot()();
}

uint64_t LinkSuggestionsOwnerDefinition.init(linkClient:dialogIdProvider:)(long long *a1, long long *a2)
{
  outlined init with take of LinkDialogIdProvider(a1, v2 + 16);
  outlined init with take of LinkDialogIdProvider(a2, v2 + 56);
  return v2;
}

uint64_t LinkSuggestionsTargetOwnerDefinition.getSuggestionsRepo()@<X0>(uint64_t *a1@<X8>)
{
  outlined init with copy of LinkClient(v1 + 56, (uint64_t)v6);
  uint64_t v3 = type metadata accessor for LinkSuggestionsRepository();
  uint64_t v4 = swift_allocObject();
  outlined init with take of LinkDialogIdProvider(v6, v4 + 16);
  a1[3] = v3;
  uint64_t result = lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator(&lazy protocol witness table cache variable for type LinkSuggestionsRepository and conformance LinkSuggestionsRepository, 255, (void (*)(uint64_t))type metadata accessor for LinkSuggestionsRepository);
  a1[4] = result;
  *a1 = v4;
  return result;
}

uint64_t LinkSuggestionsTargetOwnerDefinition.getSuggestionsResolvers()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Resolver>);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_47FC0;
  outlined init with copy of LinkClient(v0 + 16, (uint64_t)v5);
  uint64_t v2 = type metadata accessor for LinkActionResolver();
  swift_allocObject();
  uint64_t v3 = LinkActionResolver.init(linkClient:)(v5);
  *(void *)(v1 + 56) = v2;
  *(void *)(v1 + 64) = lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator(&lazy protocol witness table cache variable for type LinkActionResolver and conformance LinkActionResolver, 255, (void (*)(uint64_t))type metadata accessor for LinkActionResolver);
  *(void *)(v1 + 32) = v3;
  return v1;
}

uint64_t LinkSuggestionsTargetOwnerDefinition.getSuggestionsFilter()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for NoOpSuggestionFilter();
  uint64_t result = static NoOpSuggestionFilter.Instance.getter();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for NoOpSuggestionFilter;
  *a1 = result;
  return result;
}

uint64_t LinkSuggestionsOwnerDefinition.getOwner()@<X0>(uint64_t *a1@<X8>)
{
  if (one-time initialization token for linkOwner != -1) {
    swift_once();
  }
  uint64_t v2 = static LinkSuggestionsOwners.linkOwner;
  a1[3] = type metadata accessor for DefaultOwner();
  a1[4] = lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator((unint64_t *)&lazy protocol witness table cache variable for type DefaultOwner and conformance DefaultOwner, 255, (void (*)(uint64_t))&type metadata accessor for DefaultOwner);
  *a1 = v2;
  return swift_retain();
}

uint64_t LinkSuggestionsOwnerDefinition.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return _swift_deallocClassInstance(v0, 96, 7);
}

uint64_t protocol witness for TargetOwnerDefinition.getSuggestionsRepo() in conformance LinkSuggestionsTargetOwnerDefinition@<X0>(uint64_t *a1@<X8>)
{
  return LinkSuggestionsTargetOwnerDefinition.getSuggestionsRepo()(a1);
}

uint64_t protocol witness for TargetOwnerDefinition.getSuggestionsResolvers() in conformance LinkSuggestionsTargetOwnerDefinition()
{
  return LinkSuggestionsTargetOwnerDefinition.getSuggestionsResolvers()();
}

uint64_t protocol witness for TargetOwnerDefinition.getSuggestionsFilter() in conformance LinkSuggestionsTargetOwnerDefinition@<X0>(uint64_t *a1@<X8>)
{
  return LinkSuggestionsTargetOwnerDefinition.getSuggestionsFilter()(a1);
}

uint64_t outlined init with copy of LinkClient(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for LinkSuggestionsTargetOwnerDefinition()
{
  return self;
}

uint64_t lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t variable initialization expression of LinkSuggestionConfigurator.suggestionId()
{
  if (one-time initialization token for suggestionIdentifier != -1) {
    swift_once();
  }
  uint64_t v0 = static LinkSuggestionsRepository.suggestionIdentifier;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t variable initialization expression of DefaultToolClient.toolSessionSetupTask()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin();
  uint64_t v1 = (char *)v8 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload((uint64_t)v1, 1, 1, v2);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  if (__swift_getEnumTagSinglePayload((uint64_t)v1, 1, v2) == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v1);
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
    if (*(void *)(v3 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v5 = v6;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ToolExecutionSession);
  if (v5 | v4)
  {
    v8[0] = 0;
    v8[1] = 0;
    long long v8[2] = v4;
    v8[3] = v5;
  }
  return swift_task_create();
}

uint64_t default argument 3 of LinkClientResolver.getAppIntentAction(from:for:withParameters:andSalientEntities:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RetrievedContext]);
  return Dictionary.init(dictionaryLiteral:)();
}

unint64_t variable initialization expression of MetaDataSourcedAppIntentResolver.resolverTypeOperand()
{
  return OUTLINED_FUNCTION_1(23);
}

uint64_t default argument 1 of MetaDataSourcedAppIntentResolver.init(linkClient:toolClient:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for DefaultToolClient();
  swift_allocObject();
  uint64_t result = DefaultToolClient.init()();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DefaultToolClient;
  *a1 = result;
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t specialized == infix<A>(_:_:)()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = OUTLINED_FUNCTION_0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  uint64_t v3 = LinkSuggestionsOwners.rawValue.getter(a1);
  uint64_t v5 = v4;
  if (v3 == LinkSuggestionsOwners.rawValue.getter(a2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = OUTLINED_FUNCTION_0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t variable initialization expression of DefaultLinkClient.fullUODSupportedLocales()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_47FD0;
  *(void *)(inited + 32) = 0x53552D6E65;
  *(void *)(inited + 40) = 0xE500000000000000;
  *(void *)(inited + 48) = 0x42472D6E65;
  *(void *)(inited + 56) = 0xE500000000000000;
  *(void *)(inited + 64) = 0x41432D6E65;
  *(void *)(inited + 72) = 0xE500000000000000;
  *(void *)(inited + 80) = 0x55412D6E65;
  *(void *)(inited + 88) = 0xE500000000000000;
  *(void *)(inited + 96) = 0x4E432D687ALL;
  *(void *)(inited + 104) = 0xE500000000000000;
  *(void *)(inited + 112) = 0x4B482D687ALL;
  *(void *)(inited + 120) = 0xE500000000000000;
  *(void *)(inited + 128) = 0x504A2D616ALL;
  *(void *)(inited + 136) = 0xE500000000000000;
  *(void *)(inited + 144) = 0x52462D7266;
  *(void *)(inited + 152) = 0xE500000000000000;
  *(void *)(inited + 160) = 0x45442D6564;
  *(void *)(inited + 168) = 0xE500000000000000;
  *(void *)(inited + 176) = 0x53452D7365;
  *(void *)(inited + 184) = 0xE500000000000000;
  *(void *)(inited + 192) = 0x584D2D7365;
  *(void *)(inited + 200) = 0xE500000000000000;
  *(void *)(inited + 208) = 0x53552D7365;
  *(void *)(inited + 216) = 0xE500000000000000;
  *(void *)(inited + 224) = 0x4E492D6E65;
  *(void *)(inited + 232) = 0xE500000000000000;
  return specialized Set.init(_nonEmptyArrayLiteral:)(inited);
}

unint64_t variable initialization expression of AppIntentCandidateSuggestionConfigurator.suggestionId()
{
  return OUTLINED_FUNCTION_1(19);
}

uint64_t variable initialization expression of LinkViewProvider.invocationActionProvider()
{
  type metadata accessor for LinkInvocationActionProvider();
  return swift_allocObject();
}

uint64_t __swift_storeEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_4684()
{
  swift_unknownObjectRelease();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in variable initialization expression of DefaultToolClient.toolSessionSetupTask()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for closure #1 in variable initialization expression of DefaultToolClient.toolSessionSetupTask;
  return closure #1 in variable initialization expression of DefaultToolClient.toolSessionSetupTask();
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t __swift_getEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t variable initialization expression of AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver.resolverTypeOperand()
{
  return OUTLINED_FUNCTION_1(25);
}

unint64_t variable initialization expression of AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver.resolverTypeOperand()
{
  return OUTLINED_FUNCTION_1(26);
}

uint64_t variable initialization expression of AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.configuratorPerBundleIdentifier()
{
  return 0;
}

id variable initialization expression of AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.lock()
{
  id v0 = objc_allocWithZone((Class)NSLock);
  return [v0 init];
}

unint64_t variable initialization expression of AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator.suggestionId()
{
  return OUTLINED_FUNCTION_1(22);
}

id variable initialization expression of LinkRegistryObserver.notificationCenter()
{
  id v0 = [self defaultCenter];
  return v0;
}

uint64_t protocol witness for SetAlgebra.init() in conformance NSMatchingOptions@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = variable initialization expression of AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.configuratorPerBundleIdentifier();
  *a1 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance LNExamplePhraseKind@<X0>(uint64_t a1@<X1>, Swift::OpaquePointer a2@<X2>, unint64_t *a3@<X8>)
{
  uint64_t v5 = *v3;
  unint64_t result = (unint64_t)ToolParamSummary.init(toolPhrase:paramValues:)(*(Swift::String *)(&a1 - 1), a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance LNSuggestedActionDialogParameterKey()
{
  return specialized _SwiftNewtypeWrapper<>.hashValue.getter(*v0, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LNSuggestedActionDialogParameterKey()
{
  return specialized _SwiftNewtypeWrapper<>.hash(into:)();
}

uint64_t specialized _SwiftNewtypeWrapper<>.hash(into:)()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LNSuggestedActionDialogParameterKey()
{
  return specialized _SwiftNewtypeWrapper<>._rawHashValue(seed:)();
}

Swift::Int specialized _SwiftNewtypeWrapper<>._rawHashValue(seed:)()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_2();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance LNSuggestedActionDialogParameterKey()
{
  return specialized _SwiftNewtypeWrapper<>.hashValue.getter(*v0, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t specialized _SwiftNewtypeWrapper<>.hashValue.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = a2(v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance LNSuggestedActionDialogParameterKey(uint64_t a1, id *a2)
{
  return specialized static _SwiftNewtypeWrapper<>._forceBridgeFromObjectiveC(_:result:)(a1, a2);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance LNSuggestedActionDialogParameterKey(uint64_t a1, id *a2)
{
  return specialized static _SwiftNewtypeWrapper<>._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2) & 1;
}

NSString protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance LNSystemProtocolIdentifier@<X0>(void *a1@<X8>)
{
  NSString result = specialized static _SwiftNewtypeWrapper<>._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LNSuggestedActionDialogParameterKey()
{
  return specialized == infix<A>(_:_:)();
}

void *protocol witness for OptionSet.init(rawValue:) in conformance NSMatchingOptions@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance LNSuggestedActionDialogParameterKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = LNSuggestedActionDialogParameterKey.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LNSuggestedActionDialogParameterKey@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance LNSuggestedActionDialogParameterKey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator((unint64_t *)&lazy protocol witness table cache variable for type LNSuggestedActionDialogParameterKey and conformance LNSuggestedActionDialogParameterKey, 255, type metadata accessor for LNSuggestedActionDialogParameterKey);
  uint64_t v3 = lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator(&lazy protocol witness table cache variable for type LNSuggestedActionDialogParameterKey and conformance LNSuggestedActionDialogParameterKey, 255, type metadata accessor for LNSuggestedActionDialogParameterKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance LNSystemProtocolIdentifier(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator(&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, 255, type metadata accessor for LNSystemProtocolIdentifier);
  uint64_t v3 = lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator(&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, 255, type metadata accessor for LNSystemProtocolIdentifier);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptySetSingleton;
    goto LABEL_25;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v3 = (unsigned char *)result;
  uint64_t v24 = *(void *)(a1 + 16);
  if (!v24)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    return (uint64_t)v3;
  }
  unint64_t v4 = 0;
  uint64_t v5 = result + 56;
  while (v4 < *(void *)(a1 + 16))
  {
    uint64_t v6 = (uint64_t *)(a1 + 32 + 16 * v4);
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v9 = -1 << v3[32];
    unint64_t v10 = result & ~v9;
    unint64_t v11 = v10 >> 6;
    uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
    uint64_t v13 = 1 << v10;
    if (((1 << v10) & v12) != 0)
    {
      uint64_t v14 = *((void *)v3 + 6);
      v15 = (void *)(v14 + 16 * v10);
      BOOL v16 = *v15 == v8 && v15[1] == v7;
      if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
LABEL_11:
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_22;
      }
      uint64_t v17 = ~v9;
      while (1)
      {
        unint64_t v10 = (v10 + 1) & v17;
        unint64_t v11 = v10 >> 6;
        uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
        uint64_t v13 = 1 << v10;
        if ((v12 & (1 << v10)) == 0) {
          break;
        }
        v18 = (void *)(v14 + 16 * v10);
        if (*v18 != v8 || v18[1] != v7)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_11;
      }
    }
    *(void *)(v5 + 8 * v11) = v13 | v12;
    v20 = (void *)(*((void *)v3 + 6) + 16 * v10);
    void *v20 = v8;
    v20[1] = v7;
    uint64_t v21 = *((void *)v3 + 2);
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_27;
    }
    *((void *)v3 + 2) = v23;
LABEL_22:
    if (++v4 == v24) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t base witness table accessor for OwnerProvider in LinkSuggestionsOwnerDefinition(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator(&lazy protocol witness table cache variable for type LinkSuggestionsOwnerDefinition and conformance LinkSuggestionsOwnerDefinition, a2, (void (*)(uint64_t))type metadata accessor for LinkSuggestionsOwnerDefinition);
}

uint64_t type metadata accessor for LinkSuggestionsOwnerDefinition()
{
  return self;
}

uint64_t base witness table accessor for Wrappable in LinkSuggestionsOwnerDefinition(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator(&lazy protocol witness table cache variable for type LinkSuggestionsOwnerDefinition and conformance LinkSuggestionsOwnerDefinition, a2, (void (*)(uint64_t))type metadata accessor for LinkSuggestionsOwnerDefinition);
}

uint64_t base witness table accessor for OwnerProvider in LinkSuggestionsTargetOwnerDefinition(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator(&lazy protocol witness table cache variable for type LinkSuggestionsTargetOwnerDefinition and conformance LinkSuggestionsTargetOwnerDefinition, a2, (void (*)(uint64_t))type metadata accessor for LinkSuggestionsTargetOwnerDefinition);
}

void type metadata accessor for LNSystemProtocolIdentifier(uint64_t a1)
{
}

void type metadata accessor for LNSuggestedActionDialogParameterKey(uint64_t a1)
{
}

void type metadata accessor for LNSystemProtocolIdentifier(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t base witness table accessor for RawRepresentable in LNSuggestedActionDialogParameterKey()
{
  return lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator(&lazy protocol witness table cache variable for type LNSuggestedActionDialogParameterKey and conformance LNSuggestedActionDialogParameterKey, 255, type metadata accessor for LNSuggestedActionDialogParameterKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in LNSuggestedActionDialogParameterKey()
{
  return lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator(&lazy protocol witness table cache variable for type LNSuggestedActionDialogParameterKey and conformance LNSuggestedActionDialogParameterKey, 255, type metadata accessor for LNSuggestedActionDialogParameterKey);
}

uint64_t base witness table accessor for RawRepresentable in LNSystemProtocolIdentifier()
{
  return lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator(&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, 255, type metadata accessor for LNSystemProtocolIdentifier);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in LNSystemProtocolIdentifier()
{
  return lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator(&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, 255, type metadata accessor for LNSystemProtocolIdentifier);
}

uint64_t base witness table accessor for Equatable in LNSystemProtocolIdentifier()
{
  return lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator(&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, 255, type metadata accessor for LNSystemProtocolIdentifier);
}

uint64_t base witness table accessor for Equatable in LNSuggestedActionDialogParameterKey()
{
  return lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator(&lazy protocol witness table cache variable for type LNSuggestedActionDialogParameterKey and conformance LNSuggestedActionDialogParameterKey, 255, type metadata accessor for LNSuggestedActionDialogParameterKey);
}

uint64_t specialized static _SwiftNewtypeWrapper<>._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t specialized static _SwiftNewtypeWrapper<>._conditionallyBridgeFromObjectiveC(_:result:)(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

NSString specialized static _SwiftNewtypeWrapper<>._unconditionallyBridgeFromObjectiveC(_:)()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t OUTLINED_FUNCTION_0()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

unint64_t OUTLINED_FUNCTION_1(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t OUTLINED_FUNCTION_2()
{
  return Hasher.init(_seed:)();
}

uint64_t OnRequestAppIntents.__allocating_init(linkClient:)(long long *a1)
{
  uint64_t v2 = swift_allocObject();
  outlined init with take of LinkDialogIdProvider(a1, v2 + 16);
  return v2;
}

uint64_t AppIntentsDialogProvider.init(linkClient:)(long long *a1)
{
  outlined init with take of LinkDialogIdProvider(a1, v1 + 16);
  return v1;
}

uint64_t LinkSuggestionsGenerator.generateCandidateSuggestions(interaction:environment:factory:)()
{
  return LinkSuggestionsGenerator.generateCandidateSuggestions(interaction:environment:factory:)(*(uint64_t (**)(uint64_t))(v0 + 8), v0, (uint64_t)&_swiftEmptyArrayStorage);
}

uint64_t LinkSuggestionsGenerator.generateCandidateSuggestions(interaction:environment:factory:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t LinkSuggestionsGenerator.getSubscriptions()()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 2;
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  uint64_t v6 = &_swiftEmptyArrayStorage;
  if (v5) {
    uint64_t v7 = (void *)v5;
  }
  else {
    uint64_t v7 = &_swiftEmptyArrayStorage;
  }
  uint64_t v8 = v7[2];
  if (v8)
  {
    v42 = v0;
    v43 = v0 + 2;
    v51 = (char *)&_swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    type metadata accessor for Signal();
    uint64_t v9 = (char *)&_swiftEmptyArrayStorage;
    uint64_t v10 = type metadata accessor for CoreSignalTypes();
    uint64_t v45 = lazy protocol witness table accessor for type CoreSignalTypes and conformance CoreSignalTypes(&lazy protocol witness table cache variable for type CoreSignalTypes and conformance CoreSignalTypes, 255, (void (*)(uint64_t))&type metadata accessor for CoreSignalTypes);
    unsigned int v44 = enum case for CoreSignalTypes.app(_:);
    uint64_t v46 = v10;
    unint64_t v11 = (char *)(v7 + 5);
    do
    {
      uint64_t v49 = v46;
      uint64_t v50 = v45;
      uint64_t v12 = __swift_allocate_boxed_opaque_existential_1(&v47);
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v46 - 8) + 104))(v12, v44, v46);
      swift_bridgeObjectRetain_n();
      uint64_t v13 = v6;
      uint64_t v14 = Signal.__allocating_init(signalType:signalValue:fallbackSignals:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CandidateSuggestionConfigurator>);
      uint64_t v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_47FC0;
      uint64_t v16 = type metadata accessor for LinkSuggestionConfigurator();
      uint64_t v18 = swift_allocObject();
      if (one-time initialization token for suggestionIdentifier != -1) {
        swift_once();
      }
      uint64_t v19 = unk_5FAB0;
      *(void *)(v18 + 16) = static LinkSuggestionsRepository.suggestionIdentifier;
      *(void *)(v18 + 24) = v19;
      *(void *)(v15 + 56) = v16;
      *(void *)(v15 + 64) = lazy protocol witness table accessor for type CoreSignalTypes and conformance CoreSignalTypes(&lazy protocol witness table cache variable for type LinkSuggestionConfigurator and conformance LinkSuggestionConfigurator, v17, (void (*)(uint64_t))type metadata accessor for LinkSuggestionConfigurator);
      *(void *)(v15 + 32) = v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v51 = v9;
      unint64_t v20 = *((void *)v9 + 2);
      if (v20 >= *((void *)v9 + 3) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v9 = v51;
      }
      v11 += 16;
      *((void *)v9 + 2) = v20 + 1;
      uint64_t v21 = &v9[16 * v20];
      *((void *)v21 + 4) = v14;
      *((void *)v21 + 5) = v15;
      --v8;
      uint64_t v6 = v13;
    }
    while (v8);
    swift_bridgeObjectRelease();
    uint64_t v1 = v42;
    uint64_t v2 = v43;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = (char *)&_swiftEmptyArrayStorage;
  }
  BOOL v22 = specialized Dictionary.init<A>(_:uniquingKeysWith:)((uint64_t)v9);
  uint64_t v23 = v1[5];
  uint64_t v24 = v1[6];
  __swift_project_boxed_opaque_existential_1(v2, v23);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
  if (one-time initialization token for linkSuggestions != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Logger.linkSuggestions);
  swift_bridgeObjectRetain_n();
  v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc();
    v51 = (char *)swift_slowAlloc();
    *(_DWORD *)v29 = 136315138;
    if (v25) {
      uint64_t v30 = *(void *)(v25 + 16);
    }
    else {
      uint64_t v30 = 0;
    }
    uint64_t v47 = v30;
    BOOL v48 = v25 == 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
    uint64_t v31 = String.init<A>(describing:)();
    uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, (uint64_t *)&v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v27, v28, "Found %s link apps", v29, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_10();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  type metadata accessor for Signal();
  uint64_t v33 = static Signal.HomeScreen.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CandidateSuggestionConfigurator>);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_47FC0;
  if (v25) {
    uint64_t v35 = v25;
  }
  else {
    uint64_t v35 = (uint64_t)v6;
  }
  uint64_t v36 = type metadata accessor for LinkHomeScreenSuggestionConfigurator();
  uint64_t v37 = swift_allocObject();
  LinkHomeScreenSuggestionConfigurator.init(_:)(v35);
  *(void *)(v34 + 56) = v36;
  *(void *)(v34 + 64) = lazy protocol witness table accessor for type CoreSignalTypes and conformance CoreSignalTypes(&lazy protocol witness table cache variable for type LinkHomeScreenSuggestionConfigurator and conformance LinkHomeScreenSuggestionConfigurator, v38, (void (*)(uint64_t))type metadata accessor for LinkHomeScreenSuggestionConfigurator);
  *(void *)(v34 + 32) = v37;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v47 = (uint64_t)v22;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v34, v33, isUniquelyReferenced_nonNull_native);
  uint64_t v40 = v47;
  swift_release();
  swift_bridgeObjectRelease();
  return v40;
}

uint64_t LinkSuggestionConfigurator.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  if (one-time initialization token for suggestionIdentifier != -1) {
    swift_once();
  }
  uint64_t v1 = unk_5FAB0;
  *(void *)(v0 + 16) = static LinkSuggestionsRepository.suggestionIdentifier;
  *(void *)(v0 + 24) = v1;
  swift_bridgeObjectRetain();
  return v0;
}

void *specialized Dictionary.init<A>(_:uniquingKeysWith:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Signal, [CandidateSuggestionConfigurator]>);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v6 = v3;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, 1, &v6);
  uint64_t v4 = v6;
  if (v1) {
    swift_release();
  }
  return v4;
}

uint64_t LinkHomeScreenSuggestionConfigurator.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  LinkHomeScreenSuggestionConfigurator.init(_:)(a1);
  return v2;
}

uint64_t CATLinkDialogCallback.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return v0;
}

uint64_t OnRequestAppIntents.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return _swift_deallocClassInstance(v0, 56, 7);
}

uint64_t protocol witness for SignalSubscriber.getSubscriptions() in conformance LinkSuggestionsGenerator()
{
  return LinkSuggestionsGenerator.getSubscriptions()();
}

uint64_t protocol witness for SignalSubscriber.getConfiguratorProvider() in conformance LinkSuggestionsGenerator()
{
  return SignalSubscriber.getConfiguratorProvider()();
}

uint64_t protocol witness for SignalSubscriber.getAsyncSubscriptions() in conformance LinkSuggestionsGenerator(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for SignalSubscriber.getAsyncLookupSubscriptions() in conformance LinkSuggestionsGenerator;
  return SignalSubscriber.getAsyncSubscriptions()(a1, a2);
}

uint64_t protocol witness for SignalSubscriber.getAsyncLookupSubscriptions() in conformance LinkSuggestionsGenerator(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for SignalSubscriber.getAsyncLookupSubscriptions() in conformance LinkSuggestionsGenerator;
  return SignalSubscriber.getAsyncLookupSubscriptions()(a1, a2);
}

uint64_t protocol witness for InternalGenerator.generateCandidateSuggestions(interaction:environment:factory:) in conformance LinkSuggestionsGenerator()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for InternalGenerator.generateCandidateSuggestions(interaction:environment:factory:) in conformance LinkSuggestionsGenerator;
  return LinkSuggestionsGenerator.generateCandidateSuggestions(interaction:environment:factory:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_8();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_12();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(v2);
}

uint64_t AppIntentCandidateSuggestionConfigurator.appBundleId.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LinkSuggestionConfigurator.updateContext(context:signal:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return OUTLINED_FUNCTION_7((uint64_t)LinkSuggestionConfigurator.updateContext(context:signal:));
}

uint64_t LinkSuggestionConfigurator.updateContext(context:signal:)()
{
  OUTLINED_FUNCTION_8();
  uint64_t v1 = EnvironmentAwareSignal.activeSignal.getter();
  uint64_t v2 = LinkSuggestedActionsRequest.init(signal:)(v1);
  *(void *)(v0 + 32) = v4;
  if (v4)
  {
    uint64_t v5 = *(void **)(v0 + 16);
    *(_WORD *)(v0 + 72) = v3;
    *(void *)(v0 + 40) = v2;
    *(void *)(v0 + 48) = *v5;
    *(void *)(v0 + 56) = v5[1];
    *(void *)(v0 + 64) = swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
    OUTLINED_FUNCTION_20();
    return _swift_task_switch(v6, v7, v8);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return v9();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  SiriLinkSuggestionsPlugin::LinkSuggestedActionsRequest v4;

  OUTLINED_FUNCTION_8();
  v4.bundleIdentifier._countAndFlagsBits = *(void *)(v0 + 40);
  *(_WORD *)&v4.onScreen = *(_WORD *)(v0 + 72) & 0x101;
  v4.bundleIdentifier._object = *(void **)(v0 + 32);
  Context.addSuggestedActionsRequest(_:)(v4);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_14();
  return v1();
}

uint64_t LinkSuggestedActionsRequest.init(signal:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SignalContext?);
  uint64_t v2 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v33 = &v31[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  uint64_t v5 = &v31[-v4];
  uint64_t v6 = type metadata accessor for CoreSignalTypes();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v31[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CoreSignalTypes?, CoreSignalTypes?));
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  uint64_t v13 = &v31[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CoreSignalTypes?);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = &v31[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = __chkstk_darwin(v15);
  unint64_t v20 = &v31[-v19];
  __chkstk_darwin(v18);
  BOOL v22 = &v31[-v21];
  uint64_t v34 = a1;
  Signal.signalType.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SignalType);
  int v23 = swift_dynamicCast();
  __swift_storeEnumTagSinglePayload((uint64_t)v22, v23 ^ 1u, 1, v6);
  (*(void (**)(unsigned char *, void, uint64_t))(v7 + 104))(v20, enum case for CoreSignalTypes.app(_:), v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, v6);
  uint64_t v24 = (uint64_t)&v13[*(int *)(v11 + 56)];
  outlined init with copy of CoreSignalTypes?((uint64_t)v22, (uint64_t)v13);
  outlined init with copy of CoreSignalTypes?((uint64_t)v20, v24);
  OUTLINED_FUNCTION_19((uint64_t)v13);
  if (v25)
  {
    outlined destroy of CoreSignalTypes?((uint64_t)v20, &demangling cache variable for type metadata for CoreSignalTypes?);
    OUTLINED_FUNCTION_19(v24);
    if (v25)
    {
      outlined destroy of CoreSignalTypes?((uint64_t)v13, &demangling cache variable for type metadata for CoreSignalTypes?);
      outlined destroy of CoreSignalTypes?((uint64_t)v22, &demangling cache variable for type metadata for CoreSignalTypes?);
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  outlined init with copy of CoreSignalTypes?((uint64_t)v13, (uint64_t)v17);
  OUTLINED_FUNCTION_19(v24);
  if (v25)
  {
    outlined destroy of CoreSignalTypes?((uint64_t)v20, &demangling cache variable for type metadata for CoreSignalTypes?);
    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v17, v6);
LABEL_9:
    outlined destroy of CoreSignalTypes?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for (CoreSignalTypes?, CoreSignalTypes?));
    outlined destroy of CoreSignalTypes?((uint64_t)v22, &demangling cache variable for type metadata for CoreSignalTypes?);
LABEL_10:
    swift_release();
    return 0;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 32))(v9, v24, v6);
  lazy protocol witness table accessor for type CoreSignalTypes and conformance CoreSignalTypes(&lazy protocol witness table cache variable for type CoreSignalTypes and conformance CoreSignalTypes, 255, (void (*)(uint64_t))&type metadata accessor for CoreSignalTypes);
  int v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  v27 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
  v27(v9, v6);
  outlined destroy of CoreSignalTypes?((uint64_t)v20, &demangling cache variable for type metadata for CoreSignalTypes?);
  v27(v17, v6);
  outlined destroy of CoreSignalTypes?((uint64_t)v13, &demangling cache variable for type metadata for CoreSignalTypes?);
  outlined destroy of CoreSignalTypes?((uint64_t)v22, &demangling cache variable for type metadata for CoreSignalTypes?);
  if ((v32 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_12:
  uint64_t v26 = Signal.signalValue.getter();
  Signal.context.getter();
  uint64_t v28 = type metadata accessor for SignalContext();
  if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v28) == 1)
  {
    outlined destroy of CoreSignalTypes?((uint64_t)v5, &demangling cache variable for type metadata for SignalContext?);
  }
  else
  {
    SignalContext.onScreen.getter();
    (*(void (**)(unsigned char *, uint64_t))(*(void *)(v28 - 8) + 8))(v5, v28);
  }
  uint64_t v29 = (uint64_t)v33;
  Signal.context.getter();
  if (__swift_getEnumTagSinglePayload(v29, 1, v28) == 1)
  {
    swift_release();
    outlined destroy of CoreSignalTypes?(v29, &demangling cache variable for type metadata for SignalContext?);
  }
  else
  {
    SignalContext.explicitRequest.getter();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(v29, v28);
  }
  return v26;
}

Swift::Void __swiftcall Context.addSuggestedActionsRequest(_:)(SiriLinkSuggestionsPlugin::LinkSuggestedActionsRequest a1)
{
  __int16 v1 = *(_WORD *)&a1.onScreen;
  object = a1.bundleIdentifier._object;
  uint64_t countAndFlagsBits = a1.bundleIdentifier._countAndFlagsBits;
  uint64_t v4 = Context.getSuggestedActionsRequests()();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7[0] = v4;
  specialized _NativeSet.update(with:isUnique:)(countAndFlagsBits, (uint64_t)object, v1 & 0x101, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7[3] = &type metadata for LinkSuggestionsOwners;
  v7[4] = lazy protocol witness table accessor for type LinkSuggestionsOwners and conformance LinkSuggestionsOwners();
  LOBYTE(v7[0]) = 0;
  v6[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<LinkSuggestedActionsRequest>);
  v6[0] = v4;
  Context.setParam(for:key:value:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

uint64_t LinkSuggestionConfigurator.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t LinkSuggestionConfigurator.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t LinkSuggestionConfigurator.init()()
{
  if (one-time initialization token for suggestionIdentifier != -1) {
    swift_once();
  }
  uint64_t v1 = unk_5FAB0;
  *(void *)(v0 + 16) = static LinkSuggestionsRepository.suggestionIdentifier;
  *(void *)(v0 + 24) = v1;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t protocol witness for CandidateSuggestionConfigurator.suggestionId.getter in conformance LinkSuggestionConfigurator()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for CandidateSuggestionConfigurator.updateContext(context:signal:) in conformance LinkSuggestionConfigurator(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for CandidateSuggestionConfigurator.updateContext(context:signal:) in conformance LinkSuggestionConfigurator;
  return LinkSuggestionConfigurator.updateContext(context:signal:)(a1, a2);
}

uint64_t protocol witness for CandidateSuggestionConfigurator.updateContext(context:signal:) in conformance LinkSuggestionConfigurator()
{
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_12();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return v3();
}

uint64_t protocol witness for CandidateSuggestionConfigurator.isValid(signal:) in conformance LinkSuggestionConfigurator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for InternalGenerator.generateCandidateSuggestions(interaction:environment:factory:) in conformance LinkSuggestionsGenerator;
  return CandidateSuggestionConfigurator.isValid(signal:)(a1, a2, a3);
}

uint64_t LinkHomeScreenSuggestionConfigurator.linkAppBundleIds.getter()
{
  return swift_bridgeObjectRetain();
}

void *LinkHomeScreenSuggestionConfigurator.init(_:)(uint64_t a1)
{
  if (one-time initialization token for suggestionIdentifier != -1) {
    swift_once();
  }
  uint64_t v3 = unk_5FAB0;
  v1[2] = static LinkSuggestionsRepository.suggestionIdentifier;
  v1[3] = v3;
  v1[4] = a1;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LinkHomeScreenSuggestionConfigurator.updateContext(context:signal:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_7((uint64_t)LinkHomeScreenSuggestionConfigurator.updateContext(context:signal:));
}

uint64_t LinkHomeScreenSuggestionConfigurator.updateContext(context:signal:)()
{
  uint64_t v1 = *(void **)(v0[3] + 32);
  v0[4] = v1;
  uint64_t v2 = v1[2];
  v0[5] = v2;
  if (!v2)
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_13();
    __asm { BRAA            X1, X16 }
  }
  v0[6] = 0;
  v0[7] = v1[4];
  v0[8] = v1[5];
  uint64_t v3 = one-time initialization token for linkSuggestions;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.linkSuggestions);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (_DWORD *)swift_slowAlloc();
    swift_slowAlloc();
    *uint64_t v7 = 138412290;
    id v8 = objc_allocWithZone((Class)LNSuggestionsRequest);
    swift_bridgeObjectRetain();
    NSString v9 = String._bridgeToObjectiveC()();
    uint64_t v10 = swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_22(v10, "initWithBundleIdentifier:onScreen:explicitRequest:");

    OUTLINED_FUNCTION_18();
    OUTLINED_FUNCTION_21(&dword_0, v11, v12, "Adding homescreen request %@");
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_10();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v0[11] = OUTLINED_FUNCTION_9();
  dispatch thunk of Actor.unownedExecutor.getter();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_13();
  return _swift_task_switch(v15, v16, v17);
}

{
  uint64_t v0;
  uint64_t v2;
  SiriLinkSuggestionsPlugin::LinkSuggestedActionsRequest v3;

  OUTLINED_FUNCTION_8();
  v3.bundleIdentifier._uint64_t countAndFlagsBits = *(void *)(v0 + 56);
  v3.bundleIdentifier._object = *(void **)(v0 + 64);
  *(_WORD *)&v3.onScreen = 0;
  Context.addSuggestedActionsRequest(_:)(v3);
  swift_bridgeObjectRelease();
  return _swift_task_switch(LinkHomeScreenSuggestionConfigurator.updateContext(context:signal:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _DWORD *v9;
  id v10;
  NSString v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  uint64_t v1 = v0[6] + 1;
  if (v1 == v0[5])
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_13();
    __asm { BRAA            X1, X16 }
  }
  v0[6] = v1;
  uint64_t v4 = v0[4] + 16 * v1;
  v0[7] = *(void *)(v4 + 32);
  v0[8] = *(void *)(v4 + 40);
  uint64_t v5 = one-time initialization token for linkSuggestions;
  swift_bridgeObjectRetain();
  if (v5 != -1) {
    swift_once();
  }
  os_log_type_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.linkSuggestions);
  swift_bridgeObjectRetain_n();
  uint64_t v7 = Logger.logObject.getter();
  id v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    NSString v9 = (_DWORD *)swift_slowAlloc();
    swift_slowAlloc();
    *NSString v9 = 138412290;
    uint64_t v10 = objc_allocWithZone((Class)LNSuggestionsRequest);
    swift_bridgeObjectRetain();
    uint64_t v11 = String._bridgeToObjectiveC()();
    uint64_t v12 = swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_22(v12, "initWithBundleIdentifier:onScreen:explicitRequest:");

    OUTLINED_FUNCTION_18();
    OUTLINED_FUNCTION_21(&dword_0, v13, v14, "Adding homescreen request %@");
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_10();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v0[11] = OUTLINED_FUNCTION_9();
  dispatch thunk of Actor.unownedExecutor.getter();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_13();
  return _swift_task_switch(v15, v16, v17);
}

uint64_t LinkHomeScreenSuggestionConfigurator.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t LinkHomeScreenSuggestionConfigurator.__deallocating_deinit()
{
  LinkHomeScreenSuggestionConfigurator.deinit();
  return _swift_deallocClassInstance(v0, 40, 7);
}

uint64_t protocol witness for CandidateSuggestionConfigurator.updateContext(context:signal:) in conformance LinkHomeScreenSuggestionConfigurator(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for CandidateSuggestionConfigurator.updateContext(context:signal:) in conformance LinkHomeScreenSuggestionConfigurator;
  return LinkHomeScreenSuggestionConfigurator.updateContext(context:signal:)(a1);
}

uint64_t protocol witness for CandidateSuggestionConfigurator.isValid(signal:) in conformance LinkHomeScreenSuggestionConfigurator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for SignalSubscriber.getAsyncLookupSubscriptions() in conformance LinkSuggestionsGenerator;
  return CandidateSuggestionConfigurator.isValid(signal:)(a1, a2, a3);
}

void *Context.getSuggestedActionsRequests()()
{
  v1[3] = &type metadata for LinkSuggestionsOwners;
  v1[4] = lazy protocol witness table accessor for type LinkSuggestionsOwners and conformance LinkSuggestionsOwners();
  LOBYTE(v1[0]) = 0;
  Context.getParam(for:key:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<LinkSuggestedActionsRequest>);
    if (swift_dynamicCast()) {
      return (void *)v1[0];
    }
  }
  else
  {
    outlined destroy of CoreSignalTypes?((uint64_t)v2, &demangling cache variable for type metadata for Any?);
  }
  return &_swiftEmptySetSingleton;
}

void *ContextConstants.suggestedActionsRequest.unsafeMutableAddressor()
{
  return &static ContextConstants.suggestedActionsRequest;
}

unint64_t static ContextConstants.suggestedActionsRequest.getter()
{
  return 0xD000000000000017;
}

id LNSuggestionsRequest.__allocating_init(bundleIdentifier:onScreen:explicitRequest:)(uint64_t a1, uint64_t a2, char a3, char a4)
{
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [v6 initWithBundleIdentifier:v7 onScreen:a3 & 1 explicitRequest:a4 & 1];

  return v8;
}

uint64_t serialize(_:at:)(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)()
{
  OUTLINED_FUNCTION_20();
  return v0();
}

void *specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  if (a1 < 0)
  {
    OUTLINED_FUNCTION_17();
    uint64_t result = (void *)OUTLINED_FUNCTION_16();
    __break(1u);
  }
  else if (a1)
  {
    uint64_t result = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    result[2] = a1;
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  if (a1 < 0)
  {
    OUTLINED_FUNCTION_17();
    uint64_t result = OUTLINED_FUNCTION_16();
    __break(1u);
  }
  else if (a1)
  {
    type metadata accessor for LNAutoShortcut();
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((char *)&dword_10 + (result & 0xFFFFFFFFFFFFFF8)) = a1;
  }
  else
  {
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = (uint64_t)_StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

void *_StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((unsigned char *)v2 + v4 + 32) = 0;
  return v2;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v2 = String.UTF8View._foreignCount()();
    if (v2) {
      goto LABEL_6;
    }
    return &_swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    Swift::Int v2 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_6:
  unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

unsigned char **closure #1 in OSLogArguments.append(_:)(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4 = *result;
  *unint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  unint64_t v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  int64_t v8 = *a2;
  if (*a2)
  {
    *int64_t v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {
  }
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  for (i = (uint64_t *)(a1 + 40); ; i += 2)
  {
    uint64_t v9 = *(i - 1);
    uint64_t v8 = *i;
    uint64_t v10 = (void *)*a3;
    swift_retain();
    swift_bridgeObjectRetain();
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
    uint64_t v13 = v10[2];
    BOOL v14 = (v11 & 1) == 0;
    if (__OFADD__(v13, v14)) {
      break;
    }
    char v15 = v11;
    if (v10[3] >= v13 + v14)
    {
      if ((a2 & 1) == 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Signal, [CandidateSuggestionConfigurator]>);
        _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)();
      unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
      if ((v15 & 1) != (v17 & 1)) {
        goto LABEL_18;
      }
      unint64_t v12 = v16;
    }
    uint64_t v18 = (void *)*a3;
    if (v15)
    {
      swift_release();
      uint64_t v19 = v18[7];
      swift_bridgeObjectRelease();
      *(void *)(v19 + 8 * v12) = v8;
    }
    else
    {
      v18[(v12 >> 6) + 8] |= 1 << v12;
      *(void *)(v18[6] + 8 * v12) = v9;
      *(void *)(v18[7] + 8 * v12) = v8;
      uint64_t v20 = v18[2];
      BOOL v21 = __OFADD__(v20, 1);
      uint64_t v22 = v20 + 1;
      if (v21) {
        goto LABEL_17;
      }
      v18[2] = v22;
    }
    a2 = 1;
    if (!--v4)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  type metadata accessor for Signal();
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  char v14;
  unint64_t v15;
  char v16;
  void *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t result;
  Swift::String v22;
  Swift::String v23;

  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return swift_bridgeObjectRelease();
  }
  for (i = (uint64_t *)(swift_bridgeObjectRetain() + 40); ; i += 2)
  {
    uint64_t v8 = *(i - 1);
    uint64_t v7 = *i;
    uint64_t v9 = (void *)*a3;
    swift_retain();
    swift_bridgeObjectRetain();
    char v11 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
    unint64_t v12 = v9[2];
    uint64_t v13 = (v10 & 1) == 0;
    if (__OFADD__(v12, v13))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      type metadata accessor for Signal();
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_20;
    }
    BOOL v14 = v10;
    if (v9[3] < v12 + v13) {
      break;
    }
    if (a2)
    {
      if (v10) {
        goto LABEL_14;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Signal, [CandidateSuggestionConfigurator]>);
      _NativeDictionary.copy()();
      if (v14) {
        goto LABEL_14;
      }
    }
LABEL_10:
    char v17 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    *(void *)(v17[6] + 8 * v11) = v8;
    *(void *)(v17[7] + 8 * v11) = v7;
    uint64_t v18 = v17[2];
    uint64_t v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (v19) {
      goto LABEL_18;
    }
    v17[2] = v20;
    a2 = 1;
    if (!--v3) {
      return swift_bridgeObjectRelease_n();
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)();
  char v15 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
  if ((v14 & 1) != (v16 & 1)) {
    goto LABEL_19;
  }
  char v11 = v15;
  if ((v14 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  swift_allocError();
  swift_willThrow();
  swift_errorRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return swift_errorRelease();
  }
LABEL_20:
  _StringGuts.grow(_:)(30);
  v22._object = (void *)0x800000000004AD40;
  v22._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v22);
  type metadata accessor for Signal();
  _print_unlocked<A, B>(_:_:)();
  v23._uint64_t countAndFlagsBits = 39;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  void *v17;
  uint64_t *v18;
  _OWORD *v19;
  long long v20;
  long long v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  Swift::String v27;
  Swift::String v28;
  long long v30;
  long long v31;
  long long v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  long long v37;
  long long v38;
  long long v39;
  uint64_t v40;

  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return swift_bridgeObjectRelease();
  }
  char v5 = a1 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)(v5, (uint64_t)&v35, &demangling cache variable for type metadata for (String, ActionParameter));
    unint64_t v6 = v35;
    uint64_t v7 = v36;
    uint64_t v33 = v35;
    uint64_t v34 = v36;
    uint64_t v30 = v37;
    uint64_t v31 = v38;
    int v32 = v39;
    uint64_t v8 = (void *)*a3;
    uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
    char v11 = v8[2];
    unint64_t v12 = (v9 & 1) == 0;
    uint64_t v13 = v11 + v12;
    if (__OFADD__(v11, v12))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_20;
    }
    BOOL v14 = v9;
    if (v8[3] < v13) {
      break;
    }
    if (a2)
    {
      if (v9) {
        goto LABEL_14;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, ActionParameter>);
      _NativeDictionary.copy()();
      if (v14) {
        goto LABEL_14;
      }
    }
LABEL_10:
    char v17 = (void *)*a3;
    *(void *)(*a3 + 8 * (v10 >> 6) + 64) |= 1 << v10;
    uint64_t v18 = (uint64_t *)(v17[6] + 16 * v10);
    void *v18 = v6;
    v18[1] = v7;
    uint64_t v19 = (_OWORD *)(v17[7] + 48 * v10);
    uint64_t v20 = v30;
    BOOL v21 = v32;
    v19[1] = v31;
    v19[2] = v21;
    *uint64_t v19 = v20;
    uint64_t v22 = v17[2];
    int v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_18;
    }
    v17[2] = v24;
    v5 += 64;
    a2 = 1;
    if (!--v3) {
      return swift_bridgeObjectRelease_n();
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a2 & 1);
  char v15 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
  if ((v14 & 1) != (v16 & 1)) {
    goto LABEL_19;
  }
  uint64_t v10 = v15;
  if ((v14 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  char v25 = swift_allocError();
  swift_willThrow();
  uint64_t v40 = v25;
  swift_errorRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    outlined destroy of ActionParameter((uint64_t)&v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
LABEL_20:
  _StringGuts.grow(_:)(30);
  v27._object = (void *)0x800000000004AD40;
  v27._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v27);
  _print_unlocked<A, B>(_:_:)();
  v28._uint64_t countAndFlagsBits = 39;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v3;
  char *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  void *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t result;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  char v29;

  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return swift_bridgeObjectRelease();
  }
  for (i = (char *)(swift_bridgeObjectRetain() + 65); ; i += 40)
  {
    unint64_t v6 = *(void *)(i - 33);
    uint64_t v7 = *(void *)(i - 25);
    uint64_t v28 = *(void *)(i - 17);
    uint64_t v8 = *(void *)(i - 9);
    uint64_t v29 = *i;
    uint64_t v9 = *(i - 1);
    uint64_t v10 = (void *)*a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    uint64_t v13 = v10[2];
    BOOL v14 = (v11 & 1) == 0;
    char v15 = v13 + v14;
    if (__OFADD__(v13, v14))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_20;
    }
    unint64_t v16 = v11;
    if (v10[3] < v15) {
      break;
    }
    if (a2)
    {
      if (v11) {
        goto LABEL_14;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, LinkSuggestedActionsRequest>);
      _NativeDictionary.copy()();
      if (v16) {
        goto LABEL_14;
      }
    }
LABEL_10:
    uint64_t v19 = (void *)*a3;
    *(void *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    uint64_t v20 = (uint64_t *)(v19[6] + 16 * v12);
    unsigned char *v20 = v6;
    v20[1] = v7;
    BOOL v21 = v19[7] + 24 * v12;
    *(void *)BOOL v21 = v28;
    *(void *)(v21 + 8) = v8;
    *(unsigned char *)(v21 + 16) = v9;
    *(unsigned char *)(v21 + 17) = v29;
    uint64_t v22 = v19[2];
    int v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_18;
    }
    v19[2] = v24;
    a2 = 1;
    if (!--v3) {
      return swift_bridgeObjectRelease_n();
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a2 & 1);
  char v17 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
  if ((v16 & 1) != (v18 & 1)) {
    goto LABEL_19;
  }
  unint64_t v12 = v17;
  if ((v16 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  swift_allocError();
  swift_willThrow();
  swift_errorRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return swift_errorRelease();
  }
LABEL_20:
  _StringGuts.grow(_:)(30);
  v26._object = (void *)0x800000000004AD40;
  v26._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v26);
  _print_unlocked<A, B>(_:_:)();
  v27._uint64_t countAndFlagsBits = 39;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  void *v26;
  uint64_t *v27;
  void *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t result;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v37 = v3;
  uint64_t v38 = swift_bridgeObjectRetain();
  unint64_t v6 = (uint64_t *)(v38 + 56);
  while (1)
  {
    uint64_t v8 = *(v6 - 3);
    uint64_t v7 = *(v6 - 2);
    uint64_t v10 = *(v6 - 1);
    uint64_t v9 = *v6;
    char v11 = (void *)*a3;
    swift_bridgeObjectRetain();
    v39 = v9;
    swift_bridgeObjectRetain();
    uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
    uint64_t v20 = v11[2];
    BOOL v21 = (v12 & 1) == 0;
    uint64_t v22 = v20 + v21;
    if (__OFADD__(v20, v21))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_20;
    }
    int v23 = v12;
    if (v11[3] < v22) {
      break;
    }
    if (a2)
    {
      if (v12) {
        goto LABEL_14;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
      _NativeDictionary.copy()();
      if (v23) {
        goto LABEL_14;
      }
    }
LABEL_10:
    uint64_t v26 = (void *)*a3;
    *(void *)(*a3 + 8 * (v19 >> 6) + 64) |= 1 << v19;
    v27 = (uint64_t *)(v26[6] + 16 * v19);
    NSObject *v27 = v8;
    v27[1] = v7;
    uint64_t v28 = (void *)(v26[7] + 16 * v19);
    *uint64_t v28 = v10;
    v28[1] = v39;
    uint64_t v29 = v26[2];
    uint64_t v30 = __OFADD__(v29, 1);
    uint64_t v31 = v29 + 1;
    if (v30) {
      goto LABEL_18;
    }
    v6 += 4;
    v26[2] = v31;
    a2 = 1;
    if (!--v4) {
      return swift_bridgeObjectRelease_n();
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, a2 & 1, v13, v14, v15, v16, v17, v18, v35, v36, v37, v38, v9, SBYTE4(v9));
  uint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
  if ((v23 & 1) != (v25 & 1)) {
    goto LABEL_19;
  }
  uint64_t v19 = v24;
  if ((v23 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  swift_allocError();
  swift_willThrow();
  swift_errorRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return swift_errorRelease();
  }
LABEL_20:
  _StringGuts.grow(_:)(30);
  v33._object = (void *)0x800000000004AD40;
  v33._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v33);
  _print_unlocked<A, B>(_:_:)();
  v34._uint64_t countAndFlagsBits = 39;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  void *v18;
  void *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t result;
  Swift::String v24;
  Swift::String v25;

  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return swift_bridgeObjectRelease();
  }
  char v5 = (uint64_t *)(swift_bridgeObjectRetain() + 48);
  while (1)
  {
    unint64_t v6 = *(v5 - 1);
    uint64_t v7 = *v5;
    uint64_t v8 = (void *)*a3;
    uint64_t v9 = (id)*(v5 - 2);
    swift_bridgeObjectRetain();
    char v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9);
    unint64_t v12 = v8[2];
    uint64_t v13 = (v10 & 1) == 0;
    BOOL v14 = v12 + v13;
    if (__OFADD__(v12, v13))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      type metadata accessor for LNSuggestedActionDialogParameterKey(0);
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_20;
    }
    char v15 = v10;
    if (v8[3] < v14) {
      break;
    }
    if (a2)
    {
      if (v10) {
        goto LABEL_14;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<LNSuggestedActionDialogParameterKey, String>);
      _NativeDictionary.copy()();
      if (v15) {
        goto LABEL_14;
      }
    }
LABEL_10:
    uint64_t v18 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    *(void *)(v18[6] + 8 * v11) = v9;
    uint64_t v19 = (void *)(v18[7] + 16 * v11);
    *uint64_t v19 = v6;
    v19[1] = v7;
    uint64_t v20 = v18[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_18;
    }
    v5 += 3;
    v18[2] = v22;
    a2 = 1;
    if (!--v3) {
      return swift_bridgeObjectRelease_n();
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a2 & 1);
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9);
  if ((v15 & 1) != (v17 & 1)) {
    goto LABEL_19;
  }
  char v11 = v16;
  if ((v15 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  swift_allocError();
  swift_willThrow();
  swift_errorRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return swift_errorRelease();
  }
LABEL_20:
  _StringGuts.grow(_:)(30);
  v24._object = (void *)0x800000000004AD40;
  v24._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v24);
  type metadata accessor for LNSuggestedActionDialogParameterKey(0);
  _print_unlocked<A, B>(_:_:)();
  v25._uint64_t countAndFlagsBits = 39;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t result;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;

  uint64_t v4 = v3;
  unint64_t v6 = *(void *)(a1 + 16);
  if (!v6) {
    return swift_bridgeObjectRelease();
  }
  v61 = v4;
  swift_bridgeObjectRetain();
  v60 = a1;
  uint64_t v9 = (uint64_t *)(a1 + 48);
  v62 = a3;
  while (1)
  {
    v63 = v6;
    char v11 = *(v9 - 2);
    uint64_t v10 = *(v9 - 1);
    unint64_t v12 = *v9;
    uint64_t v13 = (void *)*a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    BOOL v21 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
    uint64_t v22 = v13[2];
    int v23 = (v14 & 1) == 0;
    uint64_t v24 = v22 + v23;
    if (__OFADD__(v22, v23)) {
      break;
    }
    char v25 = v14;
    if (v13[3] >= v24)
    {
      if ((a2 & 1) == 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [RetrievedContext]>);
        _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, a2 & 1, v15, v16, v17, v18, v19, v20, v57, v58, v59, v60, v61, SBYTE4(v61));
      uint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
      if ((v25 & 1) != (v27 & 1)) {
        goto LABEL_40;
      }
      BOOL v21 = v26;
    }
    uint64_t v28 = (void *)*a3;
    if (v25)
    {
      uint64_t v29 = *(void *)(v28[7] + 8 * v21);
      uint64_t v30 = *(void *)(v12 + 16);
      uint64_t v31 = *(void *)(v29 + 16);
      int v32 = v31 + v30;
      if (__OFADD__(v31, v30)) {
        goto LABEL_36;
      }
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || v32 > *(void *)(v29 + 24) >> 1)
      {
        if (v31 <= v32) {
          uint64_t v37 = v31 + v30;
        }
        else {
          uint64_t v37 = v31;
        }
        uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v37, 1, v29, v34, v35, v36);
      }
      a3 = v62;
      if (*(void *)(v12 + 16))
      {
        uint64_t v38 = *(void *)(v29 + 16);
        v39 = (*(void *)(v29 + 24) >> 1) - v38;
        uint64_t v40 = *(void *)(type metadata accessor for RetrievedContext() - 8);
        v41 = *(void *)(v40 + 72);
        if (v39 < v30) {
          goto LABEL_38;
        }
        v42 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
        v43 = v29 + v42 + v41 * v38;
        unsigned int v44 = v12 + v42;
        uint64_t v45 = v41 * v30;
        uint64_t v46 = v43 + v45;
        uint64_t v47 = v44 + v45;
        BOOL v48 = v44 >= v46 || v43 >= v47;
        a3 = v62;
        if (!v48) {
          goto LABEL_41;
        }
        swift_arrayInitWithCopy();
        if (v30)
        {
          uint64_t v49 = *(void *)(v29 + 16);
          uint64_t v50 = __OFADD__(v49, v30);
          v51 = v49 + v30;
          if (v50) {
            goto LABEL_39;
          }
          *(void *)(v29 + 16) = v51;
        }
      }
      else if (v30)
      {
        goto LABEL_37;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v55 = v28[7];
      swift_bridgeObjectRelease();
      *(void *)(v55 + 8 * v21) = v29;
    }
    else
    {
      v28[(v21 >> 6) + 8] |= 1 << v21;
      v52 = (uint64_t *)(v28[6] + 16 * v21);
      *v52 = v11;
      v52[1] = v10;
      *(void *)(v28[7] + 8 * v21) = v12;
      v53 = v28[2];
      uint64_t v50 = __OFADD__(v53, 1);
      v54 = v53 + 1;
      if (v50) {
        goto LABEL_35;
      }
      v28[2] = v54;
    }
    v9 += 3;
    a2 = 1;
    --v6;
    if (v63 == 1)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_41:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  void *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  id v36;
  void *v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void *v54;
  NSObject *log;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;

  uint64_t v4 = v3;
  unint64_t v6 = *(void *)(a1 + 16);
  if (!v6) {
    return swift_bridgeObjectRelease();
  }
  v51 = v4;
  swift_bridgeObjectRetain();
  uint64_t v50 = (void *)a1;
  uint64_t v9 = (void **)(a1 + 48);
  v53 = 136315138;
  v52 = (char *)&type metadata for Any + 8;
  while (1)
  {
    v58 = v6;
    char v11 = (uint64_t)*(v9 - 2);
    uint64_t v10 = (uint64_t)*(v9 - 1);
    unint64_t v12 = *v9;
    uint64_t v13 = (void *)*a3;
    swift_bridgeObjectRetain();
    BOOL v14 = v12;
    uint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
    int v23 = v13[2];
    uint64_t v24 = (v15 & 1) == 0;
    char v25 = v23 + v24;
    if (__OFADD__(v23, v24)) {
      break;
    }
    uint64_t v26 = v15;
    v57 = v14;
    if (v13[3] >= v25)
    {
      if ((a2 & 1) == 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, LNActionMetadata>);
        _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, a2 & 1, v16, v17, v18, v19, v20, v21, v49, v50, v51, (uint64_t)v52, v53, SBYTE4(v53));
      v27 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
      if ((v26 & 1) != (v28 & 1)) {
        goto LABEL_22;
      }
      uint64_t v22 = v27;
    }
    uint64_t v29 = (void *)*a3;
    if (v26)
    {
      uint64_t v30 = one-time initialization token for appIntentsSuggestions;
      uint64_t v31 = *(id *)(v29[7] + 8 * v22);
      if (v30 != -1) {
        swift_once();
      }
      int v32 = type metadata accessor for Logger();
      __swift_project_value_buffer(v32, (uint64_t)static Logger.appIntentsSuggestions);
      uint64_t v33 = v31;
      uint64_t v34 = Logger.logObject.getter();
      uint64_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        v56 = swift_slowAlloc();
        v59 = swift_slowAlloc();
        *(_DWORD *)v56 = v53;
        uint64_t v36 = [v33 identifier];
        v54 = v33;
        uint64_t v37 = a3;
        uint64_t v38 = v36;
        v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        log = v34;
        v41 = v40;

        a3 = v37;
        *(void *)(v56 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, &v59);

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, log, v35, "Unexpected duplicate app intent identifier in map: %s. Returning first instance encountered", (uint8_t *)v56, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_bridgeObjectRelease();

        v42 = v29[7];
        *(void *)(v42 + 8 * v22) = v54;
      }
      else
      {
        swift_bridgeObjectRelease();

        uint64_t v47 = v29[7];
        *(void *)(v47 + 8 * v22) = v33;
      }
    }
    else
    {
      v29[(v22 >> 6) + 8] |= 1 << v22;
      v43 = (uint64_t *)(v29[6] + 16 * v22);
      void *v43 = v11;
      v43[1] = v10;
      *(void *)(v29[7] + 8 * v22) = v57;
      unsigned int v44 = v29[2];
      uint64_t v45 = __OFADD__(v44, 1);
      uint64_t v46 = v44 + 1;
      if (v45) {
        goto LABEL_21;
      }
      v29[2] = v46;
    }
    v9 += 3;
    a2 = 1;
    unint64_t v6 = v58 - 1;
    if (v58 == 1)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v5;
  unint64_t *i;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  void *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unsigned char v37[5];
  uint64_t v38;

  uint64_t v36 = a3;
  char v5 = *(void *)(a1 + 16);
  if (!v5) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v35 = v3;
  swift_bridgeObjectRetain();
  uint64_t v34 = a1;
  for (i = (unint64_t *)(a1 + 48); ; i += 3)
  {
    uint64_t v9 = *(i - 2);
    uint64_t v8 = *(i - 1);
    uint64_t v10 = *i;
    char v11 = (void *)*v36;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
    uint64_t v20 = v11[2];
    BOOL v21 = (v12 & 1) == 0;
    uint64_t v22 = v20 + v21;
    if (__OFADD__(v20, v21)) {
      break;
    }
    int v23 = v12;
    if (v11[3] >= v22)
    {
      if ((a2 & 1) == 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [LNAutoShortcut]>);
        _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, a2 & 1, v13, v14, v15, v16, v17, v18, v33, v34, v35, (uint64_t)v36, *(int *)v37, v37[4]);
      uint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
      if ((v23 & 1) != (v25 & 1)) {
        goto LABEL_18;
      }
      uint64_t v19 = v24;
    }
    uint64_t v26 = (void *)*v36;
    if (v23)
    {
      uint64_t v38 = *(void *)(v26[7] + 8 * v19);
      swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v10);
      swift_bridgeObjectRelease();
      v27 = v26[7];
      swift_bridgeObjectRelease();
      *(void *)(v27 + 8 * v19) = v38;
    }
    else
    {
      v26[(v19 >> 6) + 8] |= 1 << v19;
      uint64_t v28 = (uint64_t *)(v26[6] + 16 * v19);
      *uint64_t v28 = v9;
      v28[1] = v8;
      *(void *)(v26[7] + 8 * v19) = v10;
      uint64_t v29 = v26[2];
      uint64_t v30 = __OFADD__(v29, 1);
      uint64_t v31 = v29 + 1;
      if (v30) {
        goto LABEL_17;
      }
      v26[2] = v31;
    }
    a2 = 1;
    if (!--v5)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v14 = v9;
  char v15 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Signal, [CandidateSuggestionConfigurator]>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13)) {
    goto LABEL_5;
  }
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_11:
    type metadata accessor for Signal();
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v16;
LABEL_5:
  uint64_t v18 = *v4;
  if (v15)
  {
    uint64_t v19 = v18[7];
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v19 + 8 * v14) = a1;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a1, v18);
    return swift_retain();
  }
  return result;
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(char a1, char a2, char a3)
{
  uint64_t v4 = (void **)v3;
  char v7 = a2 & 1;
  uint64_t v8 = (void *)*v3;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2 & 1);
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v14 = v9;
  char v15 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<SiriLinkSuggestionsFeatureFlags, Bool>);
  unint64_t result = _NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13);
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_11:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
LABEL_5:
  uint64_t v18 = *v4;
  if (v15)
  {
    *(unsigned char *)(v18[7] + v14) = a1 & 1;
  }
  else
  {
    return specialized _NativeDictionary._insert(at:key:value:)(v14, v7, a1 & 1, v18);
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(void *)(a4[6] + 8 * result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, char a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a4[6] + result) = a2 & 1;
  *(unsigned char *)(a4[7] + result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

void specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t type metadata accessor for LinkSuggestionConfigurator()
{
  return self;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t type metadata accessor for LinkHomeScreenSuggestionConfigurator()
{
  return self;
}

uint64_t outlined init with copy of CoreSignalTypes?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CoreSignalTypes?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3)
{
  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3)
{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<VersionedInvocation>, (uint64_t (*)(void))&type metadata accessor for VersionedInvocation, (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.initialize(from:count:));
  *uint64_t v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<InvocationType>, (uint64_t (*)(void))&type metadata accessor for InvocationType, (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.initialize(from:count:));
  *uint64_t v3 = v4;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t *v9;
  void *v10;
  size_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_1_0();
  if (v6)
  {
    OUTLINED_FUNCTION_2_0();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_11();
      if (v7)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3();
    }
  }
  OUTLINED_FUNCTION_5();
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(v9);
    char v10 = (void *)swift_allocObject();
    uint64_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v4;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  BOOL v12 = OUTLINED_FUNCTION_4();
  if (v3)
  {
    v2(v12);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v12);
  }
  swift_release();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;

  OUTLINED_FUNCTION_1_0();
  if (v5)
  {
    OUTLINED_FUNCTION_2_0();
    if (v6 != v7)
    {
      OUTLINED_FUNCTION_11();
      if (v6)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3();
    }
  }
  OUTLINED_FUNCTION_5();
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(v8);
    unint64_t v9 = (void *)OUTLINED_FUNCTION_15();
    OUTLINED_FUNCTION_6(v9);
  }
  char v10 = OUTLINED_FUNCTION_4();
  if (v3)
  {
    v2(v10);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v10);
  }
  swift_release();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;

  OUTLINED_FUNCTION_1_0();
  if (v5)
  {
    OUTLINED_FUNCTION_2_0();
    if (v6 != v7)
    {
      OUTLINED_FUNCTION_11();
      if (v6)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3();
    }
  }
  OUTLINED_FUNCTION_5();
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(v8);
    unint64_t v9 = (void *)OUTLINED_FUNCTION_15();
    OUTLINED_FUNCTION_6(v9);
  }
  char v10 = OUTLINED_FUNCTION_4();
  if (v3)
  {
    v2(v10);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v10);
  }
  swift_release();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t *v9;
  void *v10;
  size_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_1_0();
  if (v6)
  {
    OUTLINED_FUNCTION_2_0();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_11();
      if (v7)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3();
    }
  }
  OUTLINED_FUNCTION_5();
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(v9);
    char v10 = (void *)swift_allocObject();
    uint64_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v4;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 32);
  }
  BOOL v12 = OUTLINED_FUNCTION_4();
  if (v3)
  {
    v2(v12);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v12);
  }
  swift_release();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;

  OUTLINED_FUNCTION_1_0();
  if (v5)
  {
    OUTLINED_FUNCTION_2_0();
    if (v6 != v7)
    {
      OUTLINED_FUNCTION_11();
      if (v6)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3();
    }
  }
  OUTLINED_FUNCTION_5();
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(v8);
    unint64_t v9 = (void *)OUTLINED_FUNCTION_15();
    OUTLINED_FUNCTION_6(v9);
  }
  char v10 = OUTLINED_FUNCTION_4();
  if (v3)
  {
    v2(v10);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v10);
  }
  swift_release();
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, SiriSuggestions.DisplayRepresentable)>);
    char v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    char v10 = (char *)_swiftEmptyArrayStorage;
  }
  BOOL v12 = (char *)(a4 + 32);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v12, v8, v10 + 32);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((uint64_t)v12, v8);
  }
  swift_release();
  return v10;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), void (*a7)(uint64_t, uint64_t, char *), void (*a8)(uint64_t, uint64_t, char *))
{
  if (a3)
  {
    OUTLINED_FUNCTION_2_0();
    if (v14 != v15)
    {
      OUTLINED_FUNCTION_11();
      if (v14)
      {
LABEL_24:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3();
    }
  }
  else
  {
    uint64_t v13 = a2;
  }
  uint64_t v16 = *(void *)(a4 + 16);
  if (v13 <= v16) {
    uint64_t v17 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v17 = v13;
  }
  if (!v17)
  {
    BOOL v21 = &_swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v18 = *(void *)(a6(0) - 8);
  uint64_t v19 = *(void *)(v18 + 72);
  unint64_t v20 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  BOOL v21 = (void *)swift_allocObject();
  size_t v22 = _swift_stdlib_malloc_size(v21);
  if (!v19)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v22 - v20 == 0x8000000000000000 && v19 == -1) {
    goto LABEL_23;
  }
  v21[2] = v16;
  v21[3] = 2 * ((uint64_t)(v22 - v20) / v19);
LABEL_18:
  uint64_t v24 = *(void *)(a6(0) - 8);
  unint64_t v25 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  uint64_t v26 = (char *)v21 + v25;
  uint64_t v27 = a4 + v25;
  if (a1)
  {
    a7(v27, v16, v26);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    a8(v27, v16, v26);
  }
  swift_release();
}

uint64_t specialized _NativeSet.update(with:isUnique:)(uint64_t a1, uint64_t a2, __int16 a3, char a4)
{
  char v5 = v4;
  int v51 = a3 & 1;
  int v52 = a3 & 0x100;
  uint64_t v9 = *v4;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    char v50 = a4;
    uint64_t v13 = ~v11;
    uint64_t v14 = *(void *)(v9 + 48);
    while (1)
    {
      uint64_t v15 = v14 + 24 * v12;
      int v16 = *(unsigned __int8 *)(v15 + 16);
      int v17 = *(unsigned __int8 *)(v15 + 17);
      if (*(void *)v15 == a1 && *(void *)(v15 + 8) == a2)
      {
        if ((((v51 != 0) ^ v16) & 1) == 0 && (v52 != 0) == v17)
        {
LABEL_17:
          uint64_t v20 = 0;
          int v19 = 1;
          char v5 = v4;
          a4 = v50;
          goto LABEL_18;
        }
      }
      else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 {
             && (((v51 != 0) ^ v16) & 1) == 0
      }
             && (((v52 != 0) ^ v17) & 1) == 0)
      {
        goto LABEL_17;
      }
      unint64_t v12 = (v12 + 1) & v13;
      if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        int v19 = 0;
        char v5 = v4;
        a4 = v50;
        goto LABEL_16;
      }
    }
  }
  int v19 = 0;
LABEL_16:
  uint64_t v20 = 1;
LABEL_18:
  uint64_t v21 = *(void *)(v9 + 16);
  uint64_t v22 = v21 + v20;
  if (__OFADD__(v21, v20))
  {
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  uint64_t v23 = *(void *)(v9 + 24);
  if (v23 >= v22 && (a4 & 1) != 0)
  {
    if (v19)
    {
LABEL_22:
      uint64_t v24 = 24 * v12;
      goto LABEL_48;
    }
    goto LABEL_27;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v23 >= v22)
    {
      specialized _NativeSet.copy()();
      if (v19) {
        goto LABEL_22;
      }
LABEL_27:
      unint64_t v25 = v12 >> 6;
      uint64_t v26 = 1 << v12;
LABEL_44:
      uint64_t v42 = *v5;
      *(void *)(*v5 + 8 * v25 + 56) |= v26;
      uint64_t v43 = *(void *)(v42 + 48) + 24 * v12;
      *(void *)uint64_t v43 = a1;
      *(void *)(v43 + 8) = a2;
      *(unsigned char *)(v43 + 16) = v51;
      *(unsigned char *)(v43 + 17) = BYTE1(v52);
      uint64_t v44 = *(void *)(v42 + 16);
      BOOL v45 = __OFADD__(v44, 1);
      uint64_t v46 = v44 + 1;
      if (!v45)
      {
        uint64_t result = 0;
        *(void *)(v42 + 16) = v46;
        return result;
      }
      goto LABEL_50;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v27 = *v5;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v28 = Hasher._finalize()();
  uint64_t v29 = -1 << *(unsigned char *)(v27 + 32);
  unint64_t v12 = v28 & ~v29;
  uint64_t v30 = v27 + 56;
  unint64_t v25 = v12 >> 6;
  uint64_t v26 = 1 << v12;
  if (((1 << v12) & *(void *)(v27 + 56 + 8 * (v12 >> 6))) == 0)
  {
    if (v19)
    {
LABEL_51:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    goto LABEL_44;
  }
  char v49 = v19;
  uint64_t v31 = ~v29;
  uint64_t v32 = *(void *)(v27 + 48);
  while (1)
  {
    uint64_t v33 = v32 + 24 * v12;
    int v34 = *(unsigned __int8 *)(v33 + 16);
    int v35 = *(unsigned __int8 *)(v33 + 17);
    if (*(void *)v33 != a1 || *(void *)(v33 + 8) != a2) {
      break;
    }
    BOOL v41 = v52 != 0;
    if ((((v51 != 0) ^ v34) & 1) == 0) {
      goto LABEL_39;
    }
LABEL_40:
    unint64_t v12 = (v12 + 1) & v31;
    unint64_t v25 = v12 >> 6;
    uint64_t v26 = 1 << v12;
    if ((*(void *)(v30 + 8 * (v12 >> 6)) & (1 << v12)) == 0)
    {
      if ((v49 & 1) == 0) {
        goto LABEL_44;
      }
      goto LABEL_51;
    }
  }
  uint64_t v37 = v30;
  uint64_t v38 = a1;
  uint64_t v39 = v32;
  char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v32 = v39;
  a1 = v38;
  uint64_t v30 = v37;
  if (v40 & 1) == 0 || (((v51 != 0) ^ v34)) {
    goto LABEL_40;
  }
  BOOL v41 = v52 != 0;
LABEL_39:
  if ((v41 ^ v35)) {
    goto LABEL_40;
  }
  if ((v49 & 1) == 0) {
    goto LABEL_51;
  }
  uint64_t v24 = 24 * v12;
LABEL_48:
  uint64_t v48 = *(void *)(*v5 + 48) + v24;
  uint64_t result = *(void *)v48;
  *(void *)uint64_t v48 = a1;
  *(void *)(v48 + 8) = a2;
  *(unsigned char *)(v48 + 16) = v51;
  *(unsigned char *)(v48 + 17) = BYTE1(v52);
  return result;
}

unint64_t lazy protocol witness table accessor for type LinkSuggestionsOwners and conformance LinkSuggestionsOwners()
{
  unint64_t result = lazy protocol witness table cache variable for type LinkSuggestionsOwners and conformance LinkSuggestionsOwners;
  if (!lazy protocol witness table cache variable for type LinkSuggestionsOwners and conformance LinkSuggestionsOwners)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkSuggestionsOwners and conformance LinkSuggestionsOwners);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LinkSuggestionsOwners and conformance LinkSuggestionsOwners;
  if (!lazy protocol witness table cache variable for type LinkSuggestionsOwners and conformance LinkSuggestionsOwners)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkSuggestionsOwners and conformance LinkSuggestionsOwners);
  }
  return result;
}

uint64_t outlined destroy of CoreSignalTypes?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t base witness table accessor for InternalGenerator in LinkSuggestionsGenerator(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CoreSignalTypes and conformance CoreSignalTypes(&lazy protocol witness table cache variable for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator, a2, (void (*)(uint64_t))type metadata accessor for LinkSuggestionsGenerator);
}

uint64_t type metadata accessor for LinkSuggestionsGenerator()
{
  return self;
}

uint64_t base witness table accessor for Wrappable in LinkSuggestionsGenerator(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CoreSignalTypes and conformance CoreSignalTypes(&lazy protocol witness table cache variable for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator, a2, (void (*)(uint64_t))type metadata accessor for LinkSuggestionsGenerator);
}

uint64_t lazy protocol witness table accessor for type CoreSignalTypes and conformance CoreSignalTypes(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ContextConstants()
{
  return &type metadata for ContextConstants;
}

unint64_t type metadata accessor for LNAutoShortcut()
{
  unint64_t result = lazy cache variable for type metadata for LNAutoShortcut;
  if (!lazy cache variable for type metadata for LNAutoShortcut)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LNAutoShortcut);
  }
  return result;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t OUTLINED_FUNCTION_4()
{
  return v0 + 32;
}

size_t OUTLINED_FUNCTION_6(void *a1)
{
  size_t result = _swift_stdlib_malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

uint64_t OUTLINED_FUNCTION_7(uint64_t a1)
{
  return _swift_task_switch(a1, 0, 0);
}

uint64_t OUTLINED_FUNCTION_9()
{
  uint64_t v2 = (void *)v0[2];
  v0[9] = *v2;
  v0[10] = v2[1];
  return swift_getObjectType();
}

uint64_t OUTLINED_FUNCTION_10()
{
  return swift_slowDealloc();
}

uint64_t OUTLINED_FUNCTION_14()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_15()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_16()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_18()
{
  *(void *)(v0 + 4) = v2;
  *uint64_t v1 = v2;
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_19(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

void OUTLINED_FUNCTION_21(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

id OUTLINED_FUNCTION_22(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2, 0, 0);
}

uint64_t ToolParamSummary.toolPhrase.getter(uint64_t a1)
{
  return a1;
}

uint64_t ToolParamSummary.paramValues.getter()
{
  return swift_bridgeObjectRetain();
}

BOOL static DialogType.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void DialogType.hash(into:)(uint64_t a1, char a2)
{
}

uint64_t ToolParamSummary.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x617268506C6F6F74 && a2 == 0xEA00000000006573;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C61566D61726170 && a2 == 0xEB00000000736575)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t ToolParamSummary.CodingKeys.init(intValue:)()
{
  return 2;
}

Swift::Int DialogType.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t LinkSuggestedAction.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t ToolParamSummary.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x6C61566D61726170;
  }
  else {
    return 0x617268506C6F6F74;
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ToolParamSummary.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static DialogType.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ToolParamSummary.CodingKeys()
{
  return DialogType.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance ToolParamSummary.CodingKeys(uint64_t a1)
{
  DialogType.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ToolParamSummary.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ToolParamSummary.CodingKeys()
{
  return ToolParamSummary.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ToolParamSummary.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = ToolParamSummary.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance ToolParamSummary.CodingKeys()
{
  return LinkSuggestedAction.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance ToolParamSummary.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = ToolParamSummary.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolParamSummary.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolParamSummary.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ToolParamSummary.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ToolParamSummary.CodingKeys>);
  OUTLINED_FUNCTION_4_0();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_14_0();
  uint64_t v9 = v8 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

unint64_t lazy protocol witness table accessor for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t ToolParamSummary.init(from:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ToolParamSummary.CodingKeys>);
  OUTLINED_FUNCTION_4_0();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_14_0();
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    uint64_t v4 = KeyedDecodingContainer.decode(_:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v6 = OUTLINED_FUNCTION_9_0();
    v7(v6);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v4;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ToolParamSummary@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = ToolParamSummary.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ToolParamSummary(void *a1)
{
  return ToolParamSummary.encode(to:)(a1);
}

uint64_t one-time initialization function for appIntentSuggestionsSignposter()
{
  uint64_t v0 = type metadata accessor for OSSignposter();
  __swift_allocate_value_buffer(v0, static DefaultToolClient.appIntentSuggestionsSignposter);
  __swift_project_value_buffer(v0, (uint64_t)static DefaultToolClient.appIntentSuggestionsSignposter);
  return OSSignposter.init(subsystem:category:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for OSSignposter();
  __swift_allocate_value_buffer(v0, static DefaultLinkClient.appIntentSuggestionsSignposter);
  __swift_project_value_buffer(v0, (uint64_t)static DefaultLinkClient.appIntentSuggestionsSignposter);
  return OSSignposter.init(subsystem:category:)();
}

uint64_t DefaultToolClient.appIntentSuggestionsSignposter.unsafeMutableAddressor()
{
  if (one-time initialization token for appIntentSuggestionsSignposter != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for OSSignposter();
  return __swift_project_value_buffer(v0, (uint64_t)static DefaultToolClient.appIntentSuggestionsSignposter);
}

uint64_t static DefaultToolClient.appIntentSuggestionsSignposter.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for appIntentSuggestionsSignposter != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for OSSignposter();
  __swift_project_value_buffer(v2, (uint64_t)static DefaultToolClient.appIntentSuggestionsSignposter);
  OUTLINED_FUNCTION_23();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 16);
  return v4(a1);
}

uint64_t closure #1 in variable initialization expression of DefaultToolClient.toolSessionSetupTask()
{
  OUTLINED_FUNCTION_8();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in variable initialization expression of DefaultToolClient.toolSessionSetupTask;
  return static ToolExecutor.start()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_20_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_12();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v8 = *(uint64_t (**)(void))(v6 + 8);
    return v8();
  }
  else
  {
    *(void *)(v5 + 32) = v3;
    OUTLINED_FUNCTION_11_0();
    return _swift_task_switch(v10, v11, v12);
  }
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_8();
  uint64_t v1 = v0[4];
  uint64_t v2 = (void *)v0[2];
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  *uint64_t v2 = v1;
  v2[1] = OpaqueTypeConformance2;
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t DefaultToolClient.fetchParamSummary(toolId:parameterValuesByKey:)()
{
  OUTLINED_FUNCTION_8();
  v1[9] = v2;
  v1[10] = v0;
  v1[7] = v3;
  v1[8] = v4;
  uint64_t v5 = type metadata accessor for OSSignpostError();
  v1[11] = v5;
  OUTLINED_FUNCTION_0_1(v5);
  v1[12] = v6;
  v1[13] = OUTLINED_FUNCTION_8_0();
  v1[14] = swift_task_alloc();
  v1[15] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ToolInvocationSummary.ParameterSummary.Value();
  v1[16] = v7;
  OUTLINED_FUNCTION_0_1(v7);
  v1[17] = v8;
  v1[18] = OUTLINED_FUNCTION_13_0();
  uint64_t v9 = type metadata accessor for ToolInvocationSummary.ParameterSummary();
  v1[19] = v9;
  OUTLINED_FUNCTION_0_1(v9);
  v1[20] = v10;
  v1[21] = OUTLINED_FUNCTION_13_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: ToolInvocationSummary.ParameterSummary)?);
  v1[22] = OUTLINED_FUNCTION_8_0();
  v1[23] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for ToolInvocationSummary();
  v1[24] = v11;
  OUTLINED_FUNCTION_0_1(v11);
  v1[25] = v12;
  v1[26] = OUTLINED_FUNCTION_8_0();
  v1[27] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for OSSignpostID();
  v1[28] = v13;
  OUTLINED_FUNCTION_0_1(v13);
  v1[29] = v14;
  v1[30] = OUTLINED_FUNCTION_8_0();
  v1[31] = swift_task_alloc();
  v1[32] = swift_task_alloc();
  v1[33] = swift_task_alloc();
  v1[34] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for OSSignposter();
  v1[35] = v15;
  OUTLINED_FUNCTION_0_1(v15);
  v1[36] = v16;
  v1[37] = OUTLINED_FUNCTION_13_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ToolInvocation?);
  v1[38] = OUTLINED_FUNCTION_13_0();
  uint64_t v17 = type metadata accessor for ToolInvocation();
  v1[39] = v17;
  OUTLINED_FUNCTION_0_1(v17);
  v1[40] = v18;
  v1[41] = OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_11_0();
  return _swift_task_switch(v19, v20, v21);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_signpost_type_t v11;
  uint8_t *v12;
  os_signpost_id_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  uint64_t v1 = v0[9];
  swift_bridgeObjectRetain();
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v1);
  ToolInvocation.init(localToolId:parameterValuesByKey:)();
  uint64_t v3 = v0[40];
  uint64_t v2 = v0[41];
  uint64_t v5 = v0[38];
  uint64_t v4 = v0[39];
  __swift_storeEnumTagSinglePayload(v5, 0, 1, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v5, v4);
  if (one-time initialization token for appIntentSuggestionsSignposter != -1) {
    swift_once();
  }
  uint64_t v7 = v0[36];
  uint64_t v6 = v0[37];
  uint64_t v8 = v0[35];
  uint64_t v9 = __swift_project_value_buffer(v8, (uint64_t)static DefaultToolClient.appIntentSuggestionsSignposter);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v9, v8);
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  uint64_t v10 = OSSignposter.logHandle.getter();
  uint64_t v11 = static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v12 = (uint8_t *)OUTLINED_FUNCTION_16_0();
    *(_WORD *)uint64_t v12 = 0;
    uint64_t v13 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v10, v11, v13, "fetchToolInvocationSummary", "", v12, 2u);
    swift_slowDealloc();
  }
  uint64_t v14 = v0[33];
  uint64_t v15 = v0[34];
  uint64_t v16 = v0[28];
  uint64_t v17 = v0[29];
  uint64_t v18 = v0[10];

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v14, v15, v16);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  v0[42] = OSSignpostIntervalState.init(id:isOpen:)();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v0[43] = v19;
  v0[44] = (v17 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v19(v15, v16);
  uint64_t v20 = *(void *)(v18 + 16);
  uint64_t v21 = (void *)swift_task_alloc();
  v0[45] = v21;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ToolExecutionSession);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *uint64_t v21 = v0;
  v21[1] = DefaultToolClient.fetchParamSummary(toolId:parameterValuesByKey:);
  return Task.value.getter(v0 + 2, v20, v22, v23, &protocol self-conformance witness table for Error);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_12();
  *uint64_t v5 = v4;
  v3[46] = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_0();
    return _swift_task_switch(v6, v7, v8);
  }
  else
  {
    uint64_t v9 = v3[3];
    v3[47] = v3[2];
    ObjectType = swift_getObjectType();
    uint64_t v11 = (void *)swift_task_alloc();
    v3[48] = v11;
    *uint64_t v11 = v4;
    v11[1] = DefaultToolClient.fetchParamSummary(toolId:parameterValuesByKey:);
    uint64_t v12 = v3[41];
    uint64_t v13 = v3[27];
    return dispatch thunk of ToolExecutionSession.fetchToolInvocationSummary(for:)(v13, v12, ObjectType, v9);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_12();
  *uint64_t v3 = v2;
  *(void *)(v4 + 392) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t);
  uint64_t v55;
  uint64_t v56;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  char v59;
  uint64_t v60;
  BOOL v61;
  Swift::Int v62;
  unint64_t v63;
  char v64;
  void *v65;
  char v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_signpost_type_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  void (*v83)(void);
  uint8_t *v84;
  os_signpost_id_t v85;
  NSObject *v86;
  void (*v87)(uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(uint64_t, uint64_t, void *);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (**v98)(uint64_t, uint64_t);
  void (**v99)(uint64_t, uint64_t, uint64_t);
  void (*v100)(uint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  int64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t (**v109)(uint64_t, uint64_t);
  void (**v110)(uint64_t, char *, uint64_t);
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  void *v117;
  uint64_t v118;

  v117 = v0;
  swift_unknownObjectRelease();
  uint64_t v1 = ToolInvocationSummary.formatString.getter();
  v101 = v2;
  v102 = v1;
  if (one-time initialization token for appIntentsSuggestions != -1) {
LABEL_53:
  }
    swift_once();
  uint64_t v3 = v0[26];
  uint64_t v4 = v0[27];
  uint64_t v5 = v0[24];
  uint64_t v6 = v0[25];
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.appIntentsSuggestions);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v4, v5);
  uint64_t v8 = Logger.logObject.getter();
  uint64_t v9 = static os_log_type_t.debug.getter();
  uint64_t v10 = os_log_type_enabled(v8, v9);
  uint64_t v12 = v0[25];
  uint64_t v11 = v0[26];
  if (v10)
  {
    v111 = v0[24];
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    v116 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    ToolInvocationSummary.parameterSummaries.getter();
    uint64_t v14 = Dictionary.description.getter();
    uint64_t v16 = v15;
    swift_bridgeObjectRelease();
    v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, (uint64_t *)&v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v100 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v100(v11, v111);
    _os_log_impl(&dword_0, v8, v9, "toolInvocationSummary.parameterSummaries - %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    OUTLINED_FUNCTION_5_0();
  }
  else
  {
    v100 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v100(v0[26], v0[24]);
  }

  v114 = v0[23];
  v107 = v0[22];
  uint64_t v17 = v0[20];
  uint64_t v18 = v0[17];
  uint64_t v19 = ToolInvocationSummary.parameterSummaries.getter();
  uint64_t v20 = 0;
  v104 = v19 + 64;
  uint64_t v21 = -1;
  uint64_t v22 = -1 << *(unsigned char *)(v19 + 32);
  if (-v22 < 64) {
    uint64_t v21 = ~(-1 << -(char)v22);
  }
  uint64_t v23 = v21 & *(void *)(v19 + 64);
  v109 = (uint64_t (**)(uint64_t, uint64_t))(v17 + 88);
  v110 = (void (**)(uint64_t, char *, uint64_t))(v17 + 32);
  v112 = enum case for ToolInvocationSummary.ParameterSummary.value(_:);
  v106 = v17;
  v99 = (void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32);
  v98 = (void (**)(uint64_t, uint64_t))(v18 + 8);
  v105 = (unint64_t)(63 - v22) >> 6;
  v103 = &_swiftEmptyDictionarySingleton;
  uint64_t v24 = (uint64_t *)&demangling cache variable for type metadata for (key: String, value: ToolInvocationSummary.ParameterSummary);
  v108 = v19;
  v95 = v19 + 104;
  while (1)
  {
    if (v23)
    {
      unint64_t v25 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      uint64_t v26 = v20;
      uint64_t v27 = v25 | (v20 << 6);
LABEL_10:
      Swift::Int v28 = (char *)v0[22];
      uint64_t v29 = v0[19];
      uint64_t v30 = (void *)(*(void *)(v108 + 48) + 16 * v27);
      uint64_t v31 = v30[1];
      *(void *)Swift::Int v28 = *v30;
      *(void *)(v107 + 8) = v31;
      uint64_t v32 = *(void *)(v108 + 56) + *(void *)(v106 + 72) * v27;
      uint64_t v33 = v24;
      int v34 = __swift_instantiateConcreteTypeFromMangledName(v24);
      (*(void (**)(char *, unint64_t, uint64_t))(v106 + 16))(&v28[*(int *)(v34 + 48)], v32, v29);
      int v35 = v34;
      uint64_t v24 = v33;
      __swift_storeEnumTagSinglePayload((uint64_t)v28, 0, 1, v35);
      swift_bridgeObjectRetain();
      uint64_t v20 = v26;
      goto LABEL_17;
    }
    uint64_t v26 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_53;
    }
    if (v26 >= v105)
    {
      uint64_t v37 = v20;
    }
    else
    {
      uint64_t v36 = *(void *)(v104 + 8 * v26);
      if (v36) {
        goto LABEL_14;
      }
      uint64_t v37 = v20 + 1;
      if (v20 + 2 < v105)
      {
        uint64_t v36 = *(void *)(v104 + 8 * (v20 + 2));
        if (v36)
        {
          uint64_t v26 = v20 + 2;
LABEL_14:
          uint64_t v23 = (v36 - 1) & v36;
          uint64_t v27 = __clz(__rbit64(v36)) + (v26 << 6);
          goto LABEL_10;
        }
        uint64_t v37 = v20 + 2;
        if (v20 + 3 < v105)
        {
          uint64_t v36 = *(void *)(v104 + 8 * (v20 + 3));
          if (v36)
          {
            uint64_t v26 = v20 + 3;
            goto LABEL_14;
          }
          uint64_t v26 = v20 + 4;
          uint64_t v37 = v20 + 3;
          if (v20 + 4 < v105)
          {
            uint64_t v36 = *(void *)(v104 + 8 * v26);
            if (v36) {
              goto LABEL_14;
            }
            while (v20 + 5 < v105)
            {
              uint64_t v36 = *(void *)(v95 + 8 * v20++);
              if (v36)
              {
                uint64_t v26 = v20 + 4;
                goto LABEL_14;
              }
            }
            uint64_t v37 = v105 - 1;
          }
        }
      }
    }
    uint64_t v38 = v0[22];
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(v24);
    __swift_storeEnumTagSinglePayload(v38, 1, 1, v39);
    uint64_t v23 = 0;
    uint64_t v20 = v37;
LABEL_17:
    char v40 = v0[23];
    outlined init with take of (key: String, value: ToolInvocationSummary.ParameterSummary)?(v0[22], v40, &demangling cache variable for type metadata for (key: String, value: ToolInvocationSummary.ParameterSummary)?);
    BOOL v41 = __swift_instantiateConcreteTypeFromMangledName(v24);
    if (__swift_getEnumTagSinglePayload(v40, 1, v41) == 1) {
      break;
    }
    uint64_t v42 = (uint64_t *)v0[23];
    uint64_t v43 = v0[21];
    uint64_t v44 = v0[19];
    BOOL v45 = *v42;
    uint64_t v46 = *(void *)(v114 + 8);
    (*v110)(v43, (char *)v42 + *(int *)(v41 + 48), v44);
    uint64_t v47 = (*v109)(v43, v44);
    uint64_t v48 = v0[21];
    if (v47 == v112)
    {
      int v51 = v0[18];
      int v52 = v0[16];
      v53 = OUTLINED_FUNCTION_17_0();
      v54(v53);
      (*v99)(v51, v48, v52);
      v55 = ToolInvocationSummary.ParameterSummary.Value.localizedLabel.getter();
      v96 = v56;
      v97 = v55;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v116 = v103;
      uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v45, v46);
      v60 = v103[2];
      v61 = (v59 & 1) == 0;
      v62 = v60 + v61;
      if (__OFADD__(v60, v61))
      {
        __break(1u);
LABEL_55:
        __break(1u);
        return result;
      }
      v63 = result;
      v64 = v59;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
      uint64_t result = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v62);
      v65 = v116;
      uint64_t v24 = (uint64_t *)&demangling cache variable for type metadata for (key: String, value: ToolInvocationSummary.ParameterSummary);
      if (result)
      {
        uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v45, v46);
        if ((v64 & 1) != (v66 & 1))
        {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        v63 = result;
      }
      v103 = v65;
      if (v64)
      {
        v67 = (uint64_t *)(v65[7] + 16 * v63);
        swift_bridgeObjectRelease();
        *v67 = v97;
        v67[1] = v96;
      }
      else
      {
        v65[(v63 >> 6) + 8] |= 1 << v63;
        v68 = (uint64_t *)(v65[6] + 16 * v63);
        *v68 = v45;
        v68[1] = v46;
        v69 = (uint64_t *)(v65[7] + 16 * v63);
        *v69 = v97;
        v69[1] = v96;
        v70 = v65[2];
        v71 = __OFADD__(v70, 1);
        v72 = v70 + 1;
        if (v71) {
          goto LABEL_55;
        }
        v65[2] = v72;
        swift_bridgeObjectRetain();
      }
      v73 = v0[18];
      v74 = v0[16];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*v98)(v73, v74);
    }
    else
    {
      swift_bridgeObjectRelease();
      char v49 = OUTLINED_FUNCTION_17_0();
      v50(v49);
    }
  }
  v75 = v0[27];
  v76 = v0[24];
  swift_release();
  v100(v75, v76);
  v77 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  v78 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    v79 = v0[15];
    v80 = v0[11];
    v81 = v0[12];
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v81 + 88))(v79, v80) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v82 = "[Error] Interval already ended";
    }
    else
    {
      OUTLINED_FUNCTION_10_0();
      v83();
      v82 = "";
    }
    v84 = (uint8_t *)OUTLINED_FUNCTION_16_0();
    *(_WORD *)v84 = 0;
    v85 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v77, v78, v85, "fetchToolInvocationSummary", v82, v84, 2u);
    OUTLINED_FUNCTION_5_0();
  }
  v86 = v77;
  v87 = (void (*)(uint64_t, uint64_t))v0[43];
  v88 = v0[40];
  v113 = v0[39];
  v115 = v0[41];
  v89 = v0[36];
  v90 = v0[37];
  v91 = v0[35];
  v92 = v0[32];
  v93 = v0[28];

  v87(v92, v93);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v90, v91);
  (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v115, v113);
  OUTLINED_FUNCTION_7_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v94 = (uint64_t (*)(uint64_t, uint64_t, void *))v0[1];
  return v94(v102, v101, v103);
}

{
  void *v0;
  uint64_t v1;
  os_signpost_type_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  int v5;
  uint64_t v6;
  void (*v7)(void);
  os_signpost_id_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t (*v17)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  uint64_t v2 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v3 = OUTLINED_FUNCTION_15_0();
    uint64_t v5 = v4(v3);
    uint64_t v6 = v0[31];
    if (v5 != enum case for OSSignpostError.doubleEnd(_:))
    {
      OUTLINED_FUNCTION_10_0();
      v7();
    }
    *(_WORD *)OUTLINED_FUNCTION_16_0() = 0;
    uint64_t v8 = OSSignpostID.rawValue.getter();
    OUTLINED_FUNCTION_19_0(&dword_0, v9, v2, v8, "fetchToolInvocationSummary");
    OUTLINED_FUNCTION_5_0();
    uint64_t v19 = v6;
  }
  else
  {
    uint64_t v19 = v0[31];
  }
  uint64_t v10 = (void (*)(uint64_t, uint64_t))v0[43];
  uint64_t v11 = v0[41];
  uint64_t v12 = v0[40];
  uint64_t v13 = v0[37];
  uint64_t v20 = v0[39];
  uint64_t v15 = v0[35];
  uint64_t v14 = v0[36];
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_2_1(v16);
  v10(v19, v1);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v20);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

{
  void *v0;
  uint64_t v1;
  os_signpost_type_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  int v5;
  uint64_t v6;
  void (*v7)(void);
  os_signpost_id_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t (*v17)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  swift_unknownObjectRelease();
  OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  uint64_t v2 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v3 = OUTLINED_FUNCTION_15_0();
    uint64_t v5 = v4(v3);
    uint64_t v6 = v0[30];
    if (v5 != enum case for OSSignpostError.doubleEnd(_:))
    {
      OUTLINED_FUNCTION_10_0();
      v7();
    }
    *(_WORD *)OUTLINED_FUNCTION_16_0() = 0;
    uint64_t v8 = OSSignpostID.rawValue.getter();
    OUTLINED_FUNCTION_19_0(&dword_0, v9, v2, v8, "fetchToolInvocationSummary");
    OUTLINED_FUNCTION_5_0();
    uint64_t v19 = v6;
  }
  else
  {
    uint64_t v19 = v0[30];
  }
  uint64_t v10 = (void (*)(uint64_t, uint64_t))v0[43];
  uint64_t v11 = v0[41];
  uint64_t v12 = v0[40];
  uint64_t v13 = v0[37];
  uint64_t v20 = v0[39];
  uint64_t v15 = v0[35];
  uint64_t v14 = v0[36];
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_2_1(v16);
  v10(v19, v1);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v20);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

unint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: TypedValue));
  uint64_t v2 = __chkstk_darwin(v48);
  uint64_t v46 = (uint64_t *)((char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v41 - v4;
  uint64_t v49 = a1;
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, TypedValueAsyncResolvable>);
    uint64_t v6 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v6 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v7 = *(void *)(v49 + 64);
  uint64_t v44 = v49 + 64;
  uint64_t v8 = -1 << *(unsigned char *)(v49 + 32);
  if (-v8 < 64) {
    uint64_t v9 = ~(-1 << -(char)v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & v7;
  uint64_t v41 = -1 << *(unsigned char *)(v49 + 32);
  int64_t v43 = (unint64_t)(63 - v8) >> 6;
  uint64_t v47 = (long long *)v51;
  BOOL v45 = (long long *)&v53;
  uint64_t v42 = v6 + 8;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v50 = 0;
  while (1)
  {
    while (1)
    {
      if (v10)
      {
        unint64_t v12 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v13 = v12 | (v50 << 6);
      }
      else
      {
        int64_t v14 = v50 + 1;
        if (__OFADD__(v50, 1)) {
          goto LABEL_34;
        }
        if (v14 >= v43)
        {
LABEL_31:
          outlined consume of [String : String].Iterator._Variant();
          return (unint64_t)v6;
        }
        unint64_t v15 = *(void *)(v44 + 8 * v14);
        int64_t v16 = v50 + 1;
        if (!v15)
        {
          int64_t v16 = v50 + 2;
          if (v50 + 2 >= v43) {
            goto LABEL_31;
          }
          unint64_t v15 = *(void *)(v44 + 8 * v16);
          if (!v15)
          {
            int64_t v16 = v50 + 3;
            if (v50 + 3 >= v43) {
              goto LABEL_31;
            }
            unint64_t v15 = *(void *)(v44 + 8 * v16);
            if (!v15)
            {
              int64_t v16 = v50 + 4;
              if (v50 + 4 >= v43) {
                goto LABEL_31;
              }
              unint64_t v15 = *(void *)(v44 + 8 * v16);
              if (!v15)
              {
                int64_t v17 = v50 + 5;
                if (v50 + 5 >= v43) {
                  goto LABEL_31;
                }
                unint64_t v15 = *(void *)(v44 + 8 * v17);
                if (!v15)
                {
                  while (1)
                  {
                    int64_t v16 = v17 + 1;
                    if (__OFADD__(v17, 1)) {
                      goto LABEL_35;
                    }
                    if (v16 >= v43) {
                      goto LABEL_31;
                    }
                    unint64_t v15 = *(void *)(v44 + 8 * v16);
                    ++v17;
                    if (v15) {
                      goto LABEL_25;
                    }
                  }
                }
                int64_t v16 = v50 + 5;
              }
            }
          }
        }
LABEL_25:
        unint64_t v10 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
        int64_t v50 = v16;
      }
      uint64_t v18 = *(void *)(v49 + 56);
      uint64_t v19 = (uint64_t *)(*(void *)(v49 + 48) + 16 * v13);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      uint64_t v22 = type metadata accessor for TypedValue();
      uint64_t v23 = *(void *)(v22 - 8);
      uint64_t v24 = v18 + *(void *)(v23 + 72) * v13;
      uint64_t v25 = v48;
      (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(&v5[*(int *)(v48 + 48)], v24, v22);
      *(void *)uint64_t v5 = v20;
      *((void *)v5 + 1) = v21;
      uint64_t v26 = v46;
      outlined init with take of (key: String, value: ToolInvocationSummary.ParameterSummary)?((uint64_t)v5, (uint64_t)v46, &demangling cache variable for type metadata for (key: String, value: TypedValue));
      uint64_t v27 = (char *)v26 + *(int *)(v25 + 48);
      uint64_t v29 = *v26;
      uint64_t v28 = v26[1];
      v51[3] = v22;
      v51[4] = &protocol witness table for TypedValue;
      uint64_t v30 = v47;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v47);
      (*(void (**)(uint64_t *, char *, uint64_t))(v23 + 32))(boxed_opaque_existential_1, v27, v22);
      uint64_t v32 = v45;
      outlined init with take of LinkDialogIdProvider(v30, (uint64_t)v45);
      outlined init with take of LinkDialogIdProvider(v32, (uint64_t)v54);
      outlined init with take of LinkDialogIdProvider(v54, (uint64_t)&v52);
      swift_bridgeObjectRetain();
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
      unint64_t v33 = result;
      if ((v34 & 1) == 0) {
        break;
      }
      int v35 = (uint64_t *)(v6[6] + 16 * result);
      swift_bridgeObjectRelease();
      *int v35 = v29;
      v35[1] = v28;
      uint64_t v36 = v6[7] + 40 * v33;
      __swift_destroy_boxed_opaque_existential_1(v36);
      unint64_t result = outlined init with take of LinkDialogIdProvider(&v52, v36);
    }
    if (v6[2] >= v6[3]) {
      break;
    }
    *(void *)((char *)v42 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v37 = (uint64_t *)(v6[6] + 16 * result);
    *uint64_t v37 = v29;
    v37[1] = v28;
    unint64_t result = outlined init with take of LinkDialogIdProvider(&v52, v6[7] + 40 * result);
    uint64_t v38 = v6[2];
    BOOL v39 = __OFADD__(v38, 1);
    uint64_t v40 = v38 + 1;
    if (v39) {
      goto LABEL_33;
    }
    long long v6[2] = v40;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

void specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v2 = a1;
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Encodable>);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v45 = v2 + 64;
  OUTLINED_FUNCTION_3_0();
  uint64_t v44 = v4;
  uint64_t v5 = (long long *)v48;
  uint64_t v6 = (long long *)&v50;
  swift_bridgeObjectRetain();
  uint64_t v46 = 0;
  uint64_t v7 = &type metadata for String;
  uint64_t v8 = &protocol witness table for String;
  while (1)
  {
    while (1)
    {
      if (v1)
      {
        OUTLINED_FUNCTION_29();
        uint64_t v47 = v1;
        uint64_t v10 = v9 | (v46 << 6);
      }
      else
      {
        uint64_t v11 = v46 + 1;
        if (__OFADD__(v46, 1)) {
          goto LABEL_34;
        }
        if (v11 >= v44)
        {
LABEL_31:
          outlined consume of [String : String].Iterator._Variant();
          return;
        }
        if (!*(void *)(v45 + 8 * v11))
        {
          OUTLINED_FUNCTION_28();
          if (v12 == v13) {
            goto LABEL_31;
          }
          OUTLINED_FUNCTION_26();
          if (!v14)
          {
            OUTLINED_FUNCTION_28();
            if (v12 == v13) {
              goto LABEL_31;
            }
            OUTLINED_FUNCTION_26();
            if (!v15)
            {
              OUTLINED_FUNCTION_28();
              if (v12 == v13) {
                goto LABEL_31;
              }
              OUTLINED_FUNCTION_26();
              if (!v17)
              {
                uint64_t v18 = v16 + 4;
                if (v18 >= v44) {
                  goto LABEL_31;
                }
                if (!*(void *)(v45 + 8 * v18))
                {
                  while (!__OFADD__(v18, 1))
                  {
                    OUTLINED_FUNCTION_28();
                    if (v12 == v13) {
                      goto LABEL_31;
                    }
                    OUTLINED_FUNCTION_26();
                    uint64_t v18 = v19 + 1;
                    if (v20) {
                      goto LABEL_25;
                    }
                  }
                  goto LABEL_35;
                }
              }
            }
          }
        }
LABEL_25:
        OUTLINED_FUNCTION_25();
        uint64_t v46 = v21;
        uint64_t v47 = v22;
        uint64_t v10 = v23 + (v21 << 6);
      }
      uint64_t v24 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v10);
      uint64_t v26 = *v24;
      uint64_t v25 = v24[1];
      uint64_t v27 = (uint64_t *)(*(void *)(v2 + 56) + 16 * v10);
      uint64_t v28 = *v27;
      uint64_t v29 = v27[1];
      v48[3] = v7;
      v48[4] = v8;
      v48[0] = v28;
      v48[1] = v29;
      outlined init with take of LinkDialogIdProvider(v5, (uint64_t)v6);
      outlined init with take of LinkDialogIdProvider(v6, (uint64_t)v51);
      outlined init with take of LinkDialogIdProvider(v51, (uint64_t)&v49);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v25);
      unint64_t v31 = v30;
      if ((v32 & 1) == 0) {
        break;
      }
      unint64_t v33 = v6;
      uint64_t v34 = v2;
      int v35 = v8;
      uint64_t v36 = v7;
      uint64_t v37 = v5;
      uint64_t v38 = (uint64_t *)(v3[6] + 16 * v30);
      swift_bridgeObjectRelease();
      *uint64_t v38 = v26;
      v38[1] = v25;
      uint64_t v5 = v37;
      uint64_t v7 = v36;
      uint64_t v8 = v35;
      uint64_t v2 = v34;
      uint64_t v6 = v33;
      uint64_t v39 = v3[7] + 40 * v31;
      __swift_destroy_boxed_opaque_existential_1(v39);
      outlined init with take of LinkDialogIdProvider(&v49, v39);
      uint64_t v1 = v47;
    }
    if (v3[2] >= v3[3]) {
      break;
    }
    OUTLINED_FUNCTION_18_0((v30 >> 3) & 0x1FFFFFFFFFFFFFF8);
    uint64_t v41 = (uint64_t *)(v40 + 16 * v31);
    *uint64_t v41 = v26;
    v41[1] = v25;
    outlined init with take of LinkDialogIdProvider(&v49, v3[7] + 40 * v31);
    uint64_t v42 = v3[2];
    BOOL v13 = __OFADD__(v42, 1);
    uint64_t v43 = v42 + 1;
    if (v13) {
      goto LABEL_33;
    }
    v3[2] = v43;
    uint64_t v1 = v47;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  char *v33;
  uint64_t *v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  long long v47;
  uint64_t v48;
  _OWORD v49[2];

  uint64_t v2 = a1;
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v41 = v2 + 64;
  OUTLINED_FUNCTION_3_0();
  uint64_t v40 = v4;
  uint64_t v5 = &v46;
  uint64_t v6 = &v48;
  swift_bridgeObjectRetain();
  uint64_t v7 = 0;
  uint64_t v8 = (char *)&type metadata for Any + 8;
  uint64_t v9 = &type metadata for String;
  while (1)
  {
    while (1)
    {
      if (v1)
      {
        OUTLINED_FUNCTION_29();
        uint64_t v43 = v1;
        uint64_t v11 = v10 | (v7 << 6);
      }
      else
      {
        char v12 = v7 + 1;
        if (__OFADD__(v7, 1)) {
          goto LABEL_34;
        }
        if (v12 >= v40)
        {
LABEL_31:
          outlined consume of [String : String].Iterator._Variant();
          return;
        }
        if (!*(void *)(v41 + 8 * v12))
        {
          OUTLINED_FUNCTION_27();
          if (v13 == v14) {
            goto LABEL_31;
          }
          OUTLINED_FUNCTION_22_0();
          if (!v15)
          {
            OUTLINED_FUNCTION_27();
            if (v13 == v14) {
              goto LABEL_31;
            }
            OUTLINED_FUNCTION_22_0();
            if (!v16)
            {
              OUTLINED_FUNCTION_27();
              if (v13 == v14) {
                goto LABEL_31;
              }
              OUTLINED_FUNCTION_22_0();
              if (!v18)
              {
                uint64_t v19 = v17 + 4;
                if (v19 >= v40) {
                  goto LABEL_31;
                }
                if (!*(void *)(v41 + 8 * v19))
                {
                  while (!__OFADD__(v19, 1))
                  {
                    OUTLINED_FUNCTION_27();
                    if (v13 == v14) {
                      goto LABEL_31;
                    }
                    OUTLINED_FUNCTION_22_0();
                    uint64_t v19 = v20 + 1;
                    if (v21) {
                      goto LABEL_25;
                    }
                  }
                  goto LABEL_35;
                }
              }
            }
          }
        }
LABEL_25:
        OUTLINED_FUNCTION_25();
        uint64_t v43 = v22;
        uint64_t v11 = v24 + (v23 << 6);
        uint64_t v7 = v23;
      }
      uint64_t v25 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v11);
      uint64_t v44 = *v25;
      uint64_t v45 = v25[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      outlined init with take of Any(v5, v6);
      outlined init with take of Any(v6, v49);
      outlined init with take of Any(v49, &v47);
      uint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v44, v45);
      uint64_t v27 = v26;
      if ((v28 & 1) == 0) {
        break;
      }
      uint64_t v42 = v7;
      uint64_t v29 = v6;
      unint64_t v30 = v5;
      unint64_t v31 = v2;
      char v32 = v9;
      unint64_t v33 = v8;
      uint64_t v34 = (uint64_t *)(v3[6] + 16 * v26);
      swift_bridgeObjectRelease();
      *uint64_t v34 = v44;
      v34[1] = v45;
      uint64_t v8 = v33;
      uint64_t v9 = v32;
      uint64_t v2 = v31;
      uint64_t v5 = v30;
      uint64_t v6 = v29;
      uint64_t v7 = v42;
      int v35 = (_OWORD *)(v3[7] + 32 * v27);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
      outlined init with take of Any(&v47, v35);
      uint64_t v1 = v43;
    }
    if (v3[2] >= v3[3]) {
      break;
    }
    OUTLINED_FUNCTION_18_0((v26 >> 3) & 0x1FFFFFFFFFFFFFF8);
    uint64_t v37 = (uint64_t *)(v36 + 16 * v27);
    *uint64_t v37 = v44;
    v37[1] = v45;
    outlined init with take of Any(&v47, (_OWORD *)(v3[7] + 32 * v27));
    uint64_t v38 = v3[2];
    uint64_t v14 = __OFADD__(v38, 1);
    uint64_t v39 = v38 + 1;
    if (v14) {
      goto LABEL_33;
    }
    v3[2] = v39;
    uint64_t v1 = v43;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
}

uint64_t DefaultToolClient.deinit()
{
  swift_release();
  return v0;
}

uint64_t DefaultToolClient.__deallocating_deinit()
{
  swift_release();
  return _swift_deallocClassInstance(v0, 24, 7);
}

uint64_t DefaultToolClient.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  DefaultToolClient.init()();
  return v0;
}

uint64_t DefaultToolClient.init()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin();
  OUTLINED_FUNCTION_14_0();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload(v4, 1, 1, v5);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  if (__swift_getEnumTagSinglePayload(v4, 1, v5) == 1)
  {
    outlined destroy of ToolInvocation?(v4, &demangling cache variable for type metadata for TaskPriority?);
  }
  else
  {
    TaskPriority.rawValue.getter();
    OUTLINED_FUNCTION_23();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v4, v5);
    if (*(void *)(v6 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      dispatch thunk of Actor.unownedExecutor.getter();
      swift_unknownObjectRelease();
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ToolExecutionSession);
  *(void *)(v1 + 16) = swift_task_create();
  return v1;
}

uint64_t protocol witness for ToolClient.fetchParamSummary(toolId:parameterValuesByKey:) in conformance DefaultToolClient()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for ToolClient.fetchParamSummary(toolId:parameterValuesByKey:) in conformance DefaultToolClient;
  return DefaultToolClient.fetchParamSummary(toolId:parameterValuesByKey:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  OUTLINED_FUNCTION_20_0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_0_0();
  uint64_t v8 = *v1;
  OUTLINED_FUNCTION_12();
  *uint64_t v9 = v8;
  uint64_t v10 = swift_task_dealloc();
  BOOL v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 8);
  if (!v0)
  {
    uint64_t v10 = v7;
    uint64_t v11 = v5;
    char v12 = v3;
  }
  return v13(v10, v11, v12);
}

uint64_t closure #1 in _globalStringTablePointerOfStaticString(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result) {
    *a2 = result;
  }
  else {
    __break(1u);
  }
  return result;
}

void closure #1 in osSignpostWithoutMessage(log:name:id:type:state:formatString:)(uint8_t *a1, uint32_t a2, NSObject *a3, os_signpost_type_t a4, uint64_t a5, const char *a6, const char *a7)
{
  os_signpost_id_t v13 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_0, a3, a4, v13, a6, a7, a1, a2);
}

uint64_t static AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors.__derived_enum_equals(_:_:)()
{
  return 1;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_21_0();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;

  type metadata accessor for Signal();
  lazy protocol witness table accessor for type Signal and conformance Signal(&lazy protocol witness table cache variable for type Signal and conformance Signal);
  Swift::Int v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(char a1)
{
  char v2 = a1 & 1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  Swift::Int v3 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v2, v3);
}

uint64_t sub_CC48()
{
  swift_unknownObjectRelease();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t _s25SiriLinkSuggestionsPlugin17DefaultToolClientC20toolSessionSetupTask33_4798BCE20D0F3642FE2DAC187424D220LLScTy0F3Kit0f9ExecutionI0_ps5Error_pGvpfiAfG_pyYaKcfU_TA_0()
{
  OUTLINED_FUNCTION_20_0();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = _s25SiriLinkSuggestionsPlugin17DefaultToolClientC20toolSessionSetupTask33_4798BCE20D0F3642FE2DAC187424D220LLScTy0F3Kit0f9ExecutionI0_ps5Error_pGvpfiAfG_pyYaKcfU_TATQ0__0;
  return closure #1 in variable initialization expression of DefaultToolClient.toolSessionSetupTask();
}

uint64_t _s25SiriLinkSuggestionsPlugin17DefaultToolClientC20toolSessionSetupTask33_4798BCE20D0F3642FE2DAC187424D220LLScTy0F3Kit0f9ExecutionI0_ps5Error_pGvpfiAfG_pyYaKcfU_TATQ0__0()
{
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_12();
  *char v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t outlined destroy of ToolInvocation?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_23();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t destroy for ToolParamSummary()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for ToolParamSummary(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ToolParamSummary(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ToolParamSummary(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolParamSummary(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolParamSummary(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolParamSummary()
{
  return &type metadata for ToolParamSummary;
}

uint64_t type metadata accessor for DefaultToolClient()
{
  return self;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ToolParamSummary.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ToolParamSummary.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xD1A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for ToolParamSummary.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for ToolParamSummary.CodingKeys(unsigned char *result, char a2)
{
  *__n128 result = a2 & 1;
  return result;
}

void *type metadata accessor for ToolParamSummary.CodingKeys()
{
  return &unk_559A8;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        os_signpost_id_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    unint64_t v5 = ~v3;
    type metadata accessor for Signal();
    lazy protocol witness table accessor for type Signal and conformance Signal(&lazy protocol witness table cache variable for type Signal and conformance Signal);
    do
    {
      if (dispatch thunk of static Equatable.== infix(_:_:)()) {
        break;
      }
      uint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(char a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (((((a1 & 1) == 0) ^ *(unsigned __int8 *)(v7 + result)) & 1) == 0)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if ((((a1 & 1) == 0) ^ *(unsigned char *)(v7 + result))) {
          break;
        }
      }
    }
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Signal and conformance Signal(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Signal();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t outlined init with take of (key: String, value: ToolInvocationSummary.ParameterSummary)?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_23();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t OUTLINED_FUNCTION_0_1(uint64_t a1)
{
  return a1 - 8;
}

void OUTLINED_FUNCTION_2_1(void *a1@<X8>)
{
  uint64_t v4 = v1[15];
  *(void *)(v2 - 104) = v1[18];
  *(void *)(v2 - 96) = v4;
  uint64_t v5 = v1[13];
  *(void *)(v2 - 88) = v1[14];
  *(void *)(v2 - 80) = v5;
}

uint64_t OUTLINED_FUNCTION_5_0()
{
  return swift_slowDealloc();
}

uint64_t OUTLINED_FUNCTION_7_0()
{
  return *(void *)(v0 + 328);
}

uint64_t OUTLINED_FUNCTION_8_0()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_9_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_0()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_15_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_16_0()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_17_0()
{
  return v0;
}

void OUTLINED_FUNCTION_18_0(uint64_t a1@<X8>)
{
  *(void *)(v2 + a1) |= v1;
}

void OUTLINED_FUNCTION_19_0(void *a1, uint64_t a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5)
{
  _os_signpost_emit_with_name_impl(a1, v7, a3, a4, a5, v5, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_21_0()
{
  return Hasher.init(_seed:)();
}

uint64_t LinkInvocationActionProvider.getInvocationAction(dialogProperties:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v4 = dispatch thunk of DialogProperties.getParameters()();
  specialized Dictionary.subscript.getter(0xD00000000000001FLL, 0x800000000004AC40, v4, v16);
  swift_bridgeObjectRelease();
  if (v17)
  {
    if (swift_dynamicCast())
    {
      v18[0] = v15[0];
      v18[1] = v15[1];
      v18[2] = v15[2];
      LinkInvocationActionProvider.invocationPayload(for:)((uint64_t *)v18);
      if (one-time initialization token for suggestionIdentifier != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for DirectInvocationAction();
      swift_allocObject();
      swift_bridgeObjectRetain();
      uint64_t v12 = DirectInvocationAction.init(siriKitIdentifier:payload:suggestionId:)();
      a2[3] = v14;
      a2[4] = lazy protocol witness table accessor for type UtteranceAction and conformance UtteranceAction(&lazy protocol witness table cache variable for type DirectInvocationAction and conformance DirectInvocationAction, (void (*)(uint64_t))&type metadata accessor for DirectInvocationAction);
      uint64_t result = outlined release of LinkSuggestedAction((uint64_t)v18);
      goto LABEL_14;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v16);
  }
  if (one-time initialization token for linkSuggestions != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.linkSuggestions);
  outlined init with copy of LinkClient((uint64_t)a1, (uint64_t)v18);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    v16[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    outlined init with copy of LinkClient((uint64_t)v18, (uint64_t)v15);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DialogProperties);
    uint64_t v9 = String.init<A>(describing:)();
    *(void *)&v15[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    _os_log_impl(&dword_0, v6, v7, "LinkInvocationActionProvider Link action retrieval failed: %s", v8, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_10();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  }

  uint64_t v11 = type metadata accessor for UtteranceAction();
  uint64_t v12 = UtteranceAction.__allocating_init()();
  a2[3] = v11;
  uint64_t result = lazy protocol witness table accessor for type UtteranceAction and conformance UtteranceAction(&lazy protocol witness table cache variable for type UtteranceAction and conformance UtteranceAction, (void (*)(uint64_t))&type metadata accessor for UtteranceAction);
  a2[4] = result;
LABEL_14:
  *a2 = v12;
  return result;
}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v7 & 1) != 0))
  {
    uint64_t v8 = *(void *)(a3 + 56) + 32 * v6;
    outlined init with copy of Any(v8, (uint64_t)a4);
  }
  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v5 & 1) == 0) {
    return 0;
  }
  unint64_t v6 = *(void **)(*(void *)(a3 + 56) + 8 * v4);
  id v7 = v6;
  return v6;
}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v7 & 1) != 0))
  {
    outlined init with copy of LinkClient(*(void *)(a3 + 56) + 40 * v6, a4);
  }
  else
  {
    *(void *)(a4 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v3 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;

  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v5 & 1) == 0) {
    return 0;
  }
  unint64_t v6 = *(void *)(*(void *)(a3 + 56) + 16 * v4);
  swift_bridgeObjectRetain();
  return v6;
}

{
  char v3;

  if (*(void *)(a3 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v3 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 0;
  }
}

uint64_t specialized Dictionary.subscript.getter(char a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1 & 1), (v4 & 1) != 0)) {
    return *(unsigned __int8 *)(*(void *)(a2 + 56) + v3);
  }
  else {
    return 2;
  }
}

uint64_t *LinkInvocationActionProvider.invocationPayload(for:)(uint64_t *a1)
{
  uint64_t v2 = self;
  uint64_t v3 = a1[3];
  id v26 = 0;
  id v4 = [v2 archivedDataWithRootObject:v3 requiringSecureCoding:1 error:&v26];
  id v5 = v26;
  if (v4)
  {
    uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;

    uint64_t v9 = a1[4];
    id v26 = 0;
    id v10 = [v2 archivedDataWithRootObject:v9 requiringSecureCoding:1 error:&v26];
    id v11 = v26;
    if (v10)
    {
      uint64_t v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Decodable & Encodable)>);
      uint64_t inited = swift_initStackObject();
      *(void *)(inited + 32) = 0xD000000000000010;
      *(void *)(inited + 40) = 0x800000000004ACF0;
      *(_OWORD *)(inited + 16) = xmmword_488A0;
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 80) = &protocol witness table for String;
      uint64_t v16 = *a1;
      uint64_t v15 = a1[1];
      *(void *)(inited + 88) = &protocol witness table for String;
      *(void *)(inited + 48) = v16;
      *(void *)(inited + 56) = v15;
      uint64_t v17 = one-time initialization token for ArchivedAction;
      swift_bridgeObjectRetain();
      if (v17 != -1) {
        swift_once();
      }
      uint64_t v18 = unk_5FB50;
      *(void *)(inited + 96) = static SiriLinkSuggestionsConstants.PayloadKeys.ArchivedAction;
      *(void *)(inited + 104) = v18;
      *(void *)(inited + 136) = &type metadata for Data;
      unint64_t v19 = lazy protocol witness table accessor for type Data and conformance Data();
      *(void *)(inited + 144) = v19;
      unint64_t v20 = lazy protocol witness table accessor for type Data and conformance Data();
      *(void *)(inited + 152) = v20;
      *(void *)(inited + 112) = v6;
      *(void *)(inited + 120) = v8;
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v6, v8);
      if (one-time initialization token for SystemProtocol != -1) {
        swift_once();
      }
      uint64_t v21 = unk_5FB60;
      *(void *)(inited + 160) = static SiriLinkSuggestionsConstants.PayloadKeys.SystemProtocol;
      *(void *)(inited + 168) = v21;
      *(void *)(inited + 200) = &type metadata for Data;
      *(void *)(inited + 208) = v19;
      *(void *)(inited + 216) = v20;
      *(void *)(inited + 176) = v25;
      *(void *)(inited + 184) = v13;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decodable & Encodable);
      a1 = (uint64_t *)Dictionary.init(dictionaryLiteral:)();
      outlined consume of Data._Representation(v6, v8);
    }
    else
    {
      uint64_t v23 = v11;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      outlined consume of Data._Representation(v6, v8);
    }
  }
  else
  {
    uint64_t v22 = v5;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return a1;
}

uint64_t LinkSuggestionsOwnerDefinitionFactory.deinit()
{
  return v0;
}

uint64_t LinkSuggestionsOwnerDefinitionFactory.__deallocating_deinit()
{
  return _swift_deallocClassInstance(v0, 16, 7);
}

uint64_t LinkSuggestionsOwnerDefinitionFactory.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t protocol witness for InvocationActionProvider.getInvocationAction(dialogProperties:) in conformance LinkInvocationActionProvider@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return LinkInvocationActionProvider.getInvocationAction(dialogProperties:)(a1, a2);
}

uint64_t outlined release of LinkSuggestedAction(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  uint64_t v3 = *(void **)(a1 + 32);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return a1;
}

uint64_t lazy protocol witness table accessor for type UtteranceAction and conformance UtteranceAction(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for LinkInvocationActionProvider()
{
  return self;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo25LNActionParameterMetadataCG_AG_18SiriSuggestionsKit0gH0O20DisplayRepresentable_pSgts5NeverOTg5(void (*a1)(_OWORD *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  if (a3 >> 62) {
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8));
  while (v6)
  {
    uint64_t v18 = &_swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    if (v6 < 0)
    {
      __break(1u);
      return;
    }
    uint64_t v7 = 0;
    unint64_t v8 = v18;
    while (v6 != v7)
    {
      if ((a3 & 0xC000000000000001) != 0) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v9 = *(id *)(a3 + 8 * v7 + 32);
      }
      id v10 = v9;
      id v16 = v9;
      a1(v17, &v16);
      if (v4)
      {
        swift_release();

        return;
      }
      uint64_t v4 = 0;

      uint64_t v18 = v8;
      unint64_t v11 = v8[2];
      if (v11 >= v8[3] >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        unint64_t v8 = v18;
      }
      ++v7;
      long long v8[2] = v11 + 1;
      uint64_t v12 = &v8[6 * v11];
      long long v13 = v17[0];
      long long v14 = v17[2];
      void v12[3] = v17[1];
      v12[4] = v14;
      v12[2] = v13;
      if (v6 == v7) {
        return;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
}

void *LinkClientResolver.getMetaData(for:for:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a5 + 16))(v23, a4, a5);
  uint64_t v8 = v24;
  uint64_t v9 = v25;
  __swift_project_boxed_opaque_existential_1(v23, v24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_47FC0;
  id v22 = a1;
  id v11 = [a1 identifier];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  long long v14 = v13;

  *(void *)(v10 + 32) = v12;
  *(void *)(v10 + 40) = v14;
  uint64_t v15 = v26;
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 40))(a2, a3, v10, v8, v9);
  swift_bridgeObjectRelease();
  if (!v15)
  {
    id v17 = [v22 identifier];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;

    long long v14 = specialized Dictionary.subscript.getter(v18, v20, v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  return v14;
}

uint64_t LinkClientResolver.getAppIntentAction(from:for:withParameters:andSalientEntities:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[11] = a7;
  v8[12] = v7;
  v8[9] = a5;
  v8[10] = a6;
  v8[7] = a1;
  v8[8] = a4;
  return _swift_task_switch(LinkClientResolver.getAppIntentAction(from:for:withParameters:andSalientEntities:), 0, 0);
}

uint64_t LinkClientResolver.getAppIntentAction(from:for:withParameters:andSalientEntities:)()
{
  id v1 = [*(id *)(v0 + 56) identifier];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  *(void *)(v0 + 104) = v2;
  *(void *)(v0 + 112) = v4;
  id v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v5;
  *id v5 = v0;
  v5[1] = LinkClientResolver.getAppIntentAction(from:for:withParameters:andSalientEntities:);
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v7 = *(void *)(v0 + 72);
  uint64_t v8 = *(void *)(v0 + 80);
  uint64_t v10 = *(void *)(v0 + 56);
  uint64_t v9 = *(void *)(v0 + 64);
  return LinkClientResolver.getParameters(for:withParameters:andSalientEntities:)(v10, v9, v7, v8, v6);
}

{
  void *v0;
  os_log_type_t v1;
  uint64_t v2;
  os_log_type_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;

  uint64_t v26 = v0;
  if (v0[16])
  {
    if (one-time initialization token for appIntentsSuggestions != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Logger.appIntentsSuggestions);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v4 = Logger.logObject.getter();
    id v5 = static os_log_type_t.info.getter();
    uint64_t v6 = OUTLINED_FUNCTION_42(v5);
    uint64_t v7 = v0[14];
    if (v6)
    {
      uint64_t v24 = v0[13];
      uint64_t v8 = OUTLINED_FUNCTION_57();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v9 = Dictionary.description.getter();
      id v11 = v10;
      swift_bridgeObjectRelease();
      v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v7, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_68();
      _os_log_impl(&dword_0, v4, v3, "Got parameters: %s for %s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_10();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_67();
    }

    uint64_t v19 = v0[16];
    uint64_t v20 = v0[13];
    uint64_t v21 = v0[14];
  }
  else
  {
    if (one-time initialization token for appIntentsSuggestions != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.appIntentsSuggestions);
    swift_bridgeObjectRetain();
    long long v13 = Logger.logObject.getter();
    long long v14 = static os_log_type_t.error.getter();
    uint64_t v15 = OUTLINED_FUNCTION_42(v14);
    uint64_t v16 = v0[14];
    if (v15)
    {
      id v17 = v0[13];
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = OUTLINED_FUNCTION_64();
      *(_DWORD *)uint64_t v18 = 136315138;
      swift_bridgeObjectRetain();
      v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v16, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v13, v1, "Not all mandatory parameters for: %s could be determined", v18, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_10();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v19 = 0;
  }
  id v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  return v22(v20, v21, v19);
}

{
  void *v0;
  os_log_type_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t (*v10)(void, void, void);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;

  long long v14 = v0;
  if (one-time initialization token for appIntentsSuggestions != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.appIntentsSuggestions);
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.error.getter();
  id v5 = OUTLINED_FUNCTION_42(v4);
  uint64_t v6 = v0[14];
  if (v5)
  {
    uint64_t v12 = v0[13];
    uint64_t v7 = OUTLINED_FUNCTION_57();
    uint64_t v8 = (void *)swift_slowAlloc();
    long long v13 = OUTLINED_FUNCTION_64();
    *(_DWORD *)uint64_t v7 = 138412546;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v7 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v6, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v3, v1, "Unable to fetch parameter info: %@ for: %s", (uint8_t *)v7, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_10();
    swift_arrayDestroy();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_10();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v10 = (uint64_t (*)(void, void, void))v0[1];
  return v10(0, 0, 0);
}

uint64_t LinkClientResolver.getAppIntentAction(from:for:withParameters:andSalientEntities:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 128) = a1;
  *(void *)(v3 + 136) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = LinkClientResolver.getAppIntentAction(from:for:withParameters:andSalientEntities:);
  }
  else {
    uint64_t v4 = LinkClientResolver.getAppIntentAction(from:for:withParameters:andSalientEntities:);
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t LinkClientResolver.getParameters(for:withParameters:andSalientEntities:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[89] = v5;
  v6[88] = a5;
  v6[87] = a4;
  v6[86] = a3;
  v6[85] = a2;
  v6[84] = a1;
  uint64_t v7 = type metadata accessor for Logger();
  v6[90] = v7;
  OUTLINED_FUNCTION_0_1(v7);
  v6[91] = v8;
  v6[92] = swift_task_alloc();
  return _swift_task_switch(LinkClientResolver.getParameters(for:withParameters:andSalientEntities:), 0, 0);
}

uint64_t LinkClientResolver.getParameters(for:withParameters:andSalientEntities:)()
{
  uint64_t v104 = v0;
  uint64_t v1 = (void **)(v0 + 640);
  uint64_t v2 = *(void *)(v0 + 712);
  long long v91 = *(_OWORD *)(v0 + 696);
  long long v95 = *(_OWORD *)(v0 + 680);
  id v3 = [*(id *)(v0 + 672) parameters];
  type metadata accessor for LNActionParameterMetadata(0, &lazy cache variable for type metadata for LNActionParameterMetadata);
  uint64_t v4 = (long long *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v5 = swift_task_alloc();
  *(_OWORD *)(v5 + 16) = v91;
  *(void *)(v5 + 32) = v2;
  *(_OWORD *)(v5 + 40) = v95;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo25LNActionParameterMetadataCG_AG_18SiriSuggestionsKit0gH0O20DisplayRepresentable_pSgts5NeverOTg5((void (*)(_OWORD *__return_ptr, id *))partial apply for closure #1 in LinkClientResolver.getParameters(for:withParameters:andSalientEntities:), v5, (unint64_t)v4);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v8 = &_swiftEmptyArrayStorage;
  v99 = &_swiftEmptyArrayStorage;
  unint64_t v9 = *(void *)(v7 + 16);
  swift_bridgeObjectRetain();
  uint64_t v94 = v0;
  unint64_t v96 = v9;
  uint64_t v92 = v7;
  if (v9)
  {
    unint64_t v9 = 0;
    uint64_t v4 = (long long *)(v0 + 80);
    uint64_t v10 = v7 + 32;
    uint64_t v84 = v0 + 136;
    uint64_t v11 = v0 + 88;
    os_log_t log = (os_log_t)(v0 + 184);
    uint64_t v89 = v0 + 176;
    uint64_t v12 = &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?);
    while (v9 < *(void *)(v7 + 16))
    {
      outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)(v10, (uint64_t)v4, &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
      long long v13 = *(void **)(v94 + 80);
      *(void *)(v94 + 128) = v13;
      outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)(v11, v84, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
      uint64_t v1 = (void **)[v13 isOptional];
      outlined destroy of SiriSuggestions.DisplayRepresentable?(v84, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
      long long v14 = *(void **)(v94 + 80);
      *(void *)(v94 + 176) = v14;
      outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)(v11, (uint64_t)log, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
      uint64_t v15 = *(void *)(v94 + 208);
      id v16 = v14;
      outlined destroy of SiriSuggestions.DisplayRepresentable?(v89, &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
      if ((v1 & 1) != 0 || v15)
      {
        outlined destroy of SiriSuggestions.DisplayRepresentable?((uint64_t)v4, &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
      }
      else
      {
        long long v17 = v4[1];
        long long v100 = *v4;
        long long v101 = v17;
        long long v102 = v4[2];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_46();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v8 = v99;
        }
        unint64_t v18 = v8[2];
        if (v18 >= v8[3] >> 1)
        {
          uint64_t v1 = (void **)&v99;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v8 = v99;
        }
        long long v8[2] = v18 + 1;
        uint64_t v19 = &v8[6 * v18];
        long long v20 = v100;
        long long v21 = v102;
        v19[3] = v101;
        v19[4] = v21;
        v19[2] = v20;
      }
      ++v9;
      v10 += 48;
      uint64_t v7 = v92;
      if (v96 == v9) {
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_56;
  }
LABEL_13:
  swift_bridgeObjectRelease();
  if (v8[2])
  {
    uint64_t v89 = (uint64_t)v8;
    swift_bridgeObjectRelease();
    uint64_t v12 = (uint64_t *)v94;
    if (one-time initialization token for appIntentsSuggestions == -1)
    {
LABEL_15:
      OUTLINED_FUNCTION_62();
      uint64_t v22 = __swift_project_value_buffer(v7, (uint64_t)static Logger.appIntentsSuggestions);
      uint64_t v24 = *(void (**)(void **, uint64_t, uint64_t))(v9 + 16);
      unint64_t v23 = v9 + 16;
      v24(v1, v22, v7);
      uint64_t v25 = v4;
      swift_retain();
      uint64_t v26 = Logger.logObject.getter();
      uint64_t v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v26, (os_log_type_t)v27))
      {
        os_log_type_t v83 = v27;
        loga = v26;
        uint64_t v28 = (void *)v12[84];
        uint64_t v29 = OUTLINED_FUNCTION_57();
        uint64_t v98 = swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 136315394;
        id v30 = [v28 identifier];
        uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v33 = v32;

        v12[82] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, &v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        v85 = (uint8_t *)v29;
        *(_WORD *)(v29 + 12) = 2080;
        uint64_t v34 = *(void *)(v89 + 16);
        int v35 = &_swiftEmptyArrayStorage;
        if (v34)
        {
          uint64_t v36 = (void **)(v12 + 34);
          v99 = &_swiftEmptyArrayStorage;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v37 = v89 + 32;
          uint64_t v97 = (uint64_t)(v12 + 41);
          uint64_t v93 = (uint64_t)(v12 + 35);
          uint64_t v38 = (void **)(v12 + 40);
          do
          {
            outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)(v37, (uint64_t)v36, &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
            *(void *)&long long v100 = 0;
            *((void *)&v100 + 1) = 0xE000000000000000;
            uint64_t v39 = *v36;
            *uint64_t v38 = *v36;
            outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)(v93, v97, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
            uint64_t v40 = outlined bridged method (ob) of @objc LNActionParameterMetadata.name.getter(v39);
            if (v41) {
              uint64_t v42 = v40;
            }
            else {
              uint64_t v42 = 0x656D616E5F6F6E3CLL;
            }
            if (v41) {
              uint64_t v43 = v41;
            }
            else {
              uint64_t v43 = (void *)0xE90000000000003ELL;
            }
            outlined destroy of SiriSuggestions.DisplayRepresentable?(v97, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
            v44._uint64_t countAndFlagsBits = v42;
            v44._object = v43;
            String.append(_:)(v44);
            swift_bridgeObjectRelease();
            long long v45 = v100;
            outlined destroy of SiriSuggestions.DisplayRepresentable?((uint64_t)v36, &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
            int v35 = v99;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              OUTLINED_FUNCTION_46();
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              int v35 = v99;
            }
            unint64_t v46 = v35[2];
            if (v46 >= v35[3] >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              int v35 = v99;
            }
            v35[2] = v46 + 1;
            *(_OWORD *)&v35[2 * v46 + 4] = v45;
            v37 += 48;
            --v34;
          }
          while (v34);
        }
        uint64_t v12 = (uint64_t *)v94;
        uint64_t v70 = *(void *)(v94 + 736);
        uint64_t v71 = *(void *)(v94 + 728);
        uint64_t v72 = *(void *)(v94 + 720);
        *(void *)(v94 + 648) = v35;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [String] and conformance [A]();
        uint64_t v73 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v75 = v74;
        swift_bridgeObjectRelease();
        *(void *)(v94 + 664) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v75, &v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_0, loga, v83, "We have not been able to set all mandatory parameters for action %s. Missing parameters:\n %s", v85, 0x16u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_10();
        OUTLINED_FUNCTION_10();

        (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v70, v72);
      }
      else
      {
        OUTLINED_FUNCTION_62();

        swift_release_n();
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v27, v7);
      }
      v76 = 0;
      goto LABEL_52;
    }
LABEL_56:
    swift_once();
    goto LABEL_15;
  }
  swift_release();
  uint64_t v12 = (uint64_t *)v94;
  if (v96)
  {
    uint64_t v47 = (long long *)(v94 + 16);
    uint64_t v48 = v94 + 464;
    long long v49 = (long long *)(v94 + 600);
    uint64_t v50 = v7 + 32;
    uint64_t v82 = v94 + 472;
    uint64_t v51 = v94 + 424;
    os_log_t logb = (os_log_t)(v94 + 376);
    v90 = (void *)(v94 + 224);
    uint64_t v80 = v94 + 560;
    uint64_t v79 = v94 + 520;
    swift_bridgeObjectRetain();
    long long v52 = &_swiftEmptyArrayStorage;
    uint64_t v81 = v94 + 232;
    do
    {
      outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)(v50, v48, &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
      uint64_t v53 = (void *)v12[58];
      v12[52] = (uint64_t)v53;
      outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)(v82, v51, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
      outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)(v82, (uint64_t)v49, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
      if (v12[78])
      {
        outlined init with take of LinkDialogIdProvider(v49, v80);
        *(void *)(v94 + 368) = v53;
        outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)(v51, (uint64_t)logb, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
        id v54 = v53;
        uint64_t v55 = outlined bridged method (ob) of @objc LNActionParameterMetadata.name.getter(v54);
        uint64_t v57 = v56;
        void *v90 = v54;
        outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)(v51, v81, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
        if (v57)
        {
          *(void *)(v94 + 16) = v55;
          *(void *)(v94 + 24) = v57;
          outlined init with copy of LinkClient(v80, v94 + 32);
          *(void *)(v94 + 512) = v54;
          outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)(v81, v79, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
          *(void *)(v94 + 72) = v54;
          id v58 = v54;
          swift_bridgeObjectRetain();
          outlined destroy of SiriSuggestions.DisplayRepresentable?(v79, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
          swift_bridgeObjectRelease();
        }
        else
        {
          *(_OWORD *)(v94 + 48) = 0u;
          *(_OWORD *)(v94 + 64) = 0u;
          *uint64_t v47 = 0u;
          *(_OWORD *)(v94 + 32) = 0u;
          id v60 = v54;
        }
        outlined destroy of SiriSuggestions.DisplayRepresentable?((uint64_t)v90, &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
        outlined destroy of SiriSuggestions.DisplayRepresentable?((uint64_t)logb, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
        __swift_destroy_boxed_opaque_existential_1(v80);
        long long v49 = (long long *)(v94 + 600);
        uint64_t v48 = v94 + 464;
        uint64_t v51 = v94 + 424;
        uint64_t v12 = (uint64_t *)v94;
      }
      else
      {
        *(_OWORD *)(v94 + 48) = 0u;
        *(_OWORD *)(v94 + 64) = 0u;
        *uint64_t v47 = 0u;
        *(_OWORD *)(v94 + 32) = 0u;
        id v59 = v53;
      }
      outlined destroy of SiriSuggestions.DisplayRepresentable?(v94 + 416, &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
      outlined destroy of SiriSuggestions.DisplayRepresentable?(v48, &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
      if (v12[3])
      {
        long long v61 = *(_OWORD *)(v94 + 32);
        long long v100 = *v47;
        long long v101 = v61;
        long long v62 = *(_OWORD *)(v94 + 64);
        long long v102 = *(_OWORD *)(v94 + 48);
        long long v103 = v62;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          long long v52 = v68;
        }
        unint64_t v63 = v52[2];
        if (v63 >= v52[3] >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          long long v52 = v69;
        }
        v52[2] = v63 + 1;
        v64 = &v52[8 * v63];
        long long v65 = v100;
        long long v66 = v101;
        long long v67 = v103;
        v64[4] = v102;
        v64[5] = v67;
        v64[2] = v65;
        v64[3] = v66;
      }
      else
      {
        outlined destroy of SiriSuggestions.DisplayRepresentable?((uint64_t)v47, &demangling cache variable for type metadata for (String, ActionParameter)?);
      }
      v50 += 48;
      --v96;
    }
    while (v96);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    long long v52 = &_swiftEmptyArrayStorage;
  }
  v76 = specialized Dictionary.init<A>(uniqueKeysWithValues:)((uint64_t)v52, &demangling cache variable for type metadata for _DictionaryStorage<String, ActionParameter>, (void (*)(uint64_t, uint64_t, void **))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
LABEL_52:
  swift_task_dealloc();
  v77 = (uint64_t (*)(void *))v12[1];
  return v77(v76);
}

void closure #1 in LinkClientResolver.getParameters(for:withParameters:andSalientEntities:)(void **a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void **a4@<X8>)
{
  uint64_t v5 = *a1;
  *a4 = *a1;
  LinkClientResolver.getParameter(for:withParameters:andSalientEntities:)(v5, a2, a3, (uint64_t)(a4 + 1));
}

void LinkClientResolver.getParameter(for:withParameters:andSalientEntities:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v78 = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RetrievedContext?);
  __chkstk_darwin(v8 - 8);
  OUTLINED_FUNCTION_50();
  unint64_t v9 = type metadata accessor for RetrievedContext();
  OUTLINED_FUNCTION_4_0();
  uint64_t v11 = v10;
  uint64_t v13 = __chkstk_darwin(v12);
  unint64_t v74 = (char *)v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  v76 = (char *)v65 - v16;
  __chkstk_darwin(v15);
  unint64_t v18 = (char *)v65 - v17;
  id v19 = [a1 name];
  uint64_t v75 = v11;
  if (v19)
  {
    long long v20 = v19;
    uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v21;
  }
  else
  {
    uint64_t v77 = 0;
    uint64_t v22 = 0;
  }
  unint64_t v23 = [a1 valueType];
  if (!v22)
  {
    if (one-time initialization token for appIntentsSuggestions != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.appIntentsSuggestions);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl(&dword_0, v25, v26, "Unknown parameter name", v27, 2u);
      OUTLINED_FUNCTION_10();
      uint64_t v28 = v23;
    }
    else
    {
      uint64_t v28 = v25;
      uint64_t v25 = v23;
    }

    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.getter(v77, v22, a2, (uint64_t)&v79);
  swift_bridgeObjectRelease();
  if (v80)
  {
    swift_bridgeObjectRelease();

    outlined init with take of LinkDialogIdProvider(&v79, (uint64_t)v81);
    outlined init with take of LinkDialogIdProvider(v81, v78);
    return;
  }
  outlined destroy of SiriSuggestions.DisplayRepresentable?((uint64_t)&v79, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
  id v29 = [v23 description];
  uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v31 = v30;

  if (one-time initialization token for appIntentsSuggestions != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  uint64_t v33 = __swift_project_value_buffer(v32, (uint64_t)static Logger.appIntentsSuggestions);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v71 = v33;
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  uint64_t v72 = v34;
  LODWORD(v68) = v35;
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = OUTLINED_FUNCTION_64();
    uint64_t v66 = swift_slowAlloc();
    *(void *)&v81[0] = v66;
    *(_DWORD *)uint64_t v36 = 136315650;
    v69 = v18;
    swift_bridgeObjectRetain();
    uint64_t v37 = OUTLINED_FUNCTION_44();
    OUTLINED_FUNCTION_43(v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_68();
    os_log_t v67 = v9;
    *(_WORD *)(v36 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v38 = v73;
    *(void *)&long long v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v31, (uint64_t *)v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v36 + 22) = 2080;
    v65[1] = v36 + 24;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RetrievedContext]);
    uint64_t v39 = Dictionary.Keys.description.getter();
    uint64_t v70 = v23;
    uint64_t v40 = v39;
    unint64_t v42 = v41;
    swift_bridgeObjectRelease();
    unint64_t v18 = v69;
    *(void *)&long long v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, (uint64_t *)v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    unint64_t v9 = v67;
    swift_bridgeObjectRelease();
    uint64_t v43 = v72;
    _os_log_impl(&dword_0, v72, (os_log_type_t)v68, "determining parater - %s paramType - %s from andSalientEntities Keys - %s", (uint8_t *)v36, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_10();

    unint64_t v23 = v70;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_67();
    uint64_t v38 = v73;
  }
  swift_bridgeObjectRetain();
  uint64_t v45 = specialized Dictionary.subscript.getter(v38, v31, a3);
  swift_bridgeObjectRelease();
  uint64_t v46 = v38;
  if (!v45)
  {
LABEL_23:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v25, v47))
    {

      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_67();

      goto LABEL_18;
    }
    uint64_t v48 = OUTLINED_FUNCTION_57();
    *(void *)&v81[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v48 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)&long long v79 = OUTLINED_FUNCTION_44();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_68();
    *(_WORD *)(v48 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)&long long v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v31, (uint64_t *)v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v25, v47, "No parameter available to set for %s, of type: %s", (uint8_t *)v48, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_10();

LABEL_17:
LABEL_18:
    Swift::String v44 = (_OWORD *)v78;
    *(void *)(v78 + 32) = 0;
    *Swift::String v44 = 0u;
    v44[1] = 0u;
    return;
  }
  *(void *)&v81[0] = v45;
  specialized MutableCollection<>.shuffle<A>(using:)();
  specialized Collection.first.getter(*(uint64_t *)&v81[0], v4);
  swift_release();
  if (__swift_getEnumTagSinglePayload(v4, 1, (uint64_t)v9) == 1)
  {
    outlined destroy of SiriSuggestions.DisplayRepresentable?(v4, &demangling cache variable for type metadata for RetrievedContext?);
    goto LABEL_23;
  }
  uint64_t v70 = v23;
  uint64_t v49 = v75;
  uint64_t v72 = *(NSObject **)(v75 + 32);
  ((void (*)(char *, uint64_t, NSObject *))v72)(v18, v4, v9);
  uint64_t v50 = *(void (**)(char *))(v49 + 16);
  uint64_t v51 = v76;
  v69 = v18;
  v50(v76);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  long long v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.debug.getter();
  LODWORD(v71) = v53;
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v54 = OUTLINED_FUNCTION_64();
    os_log_t v67 = v52;
    uint64_t v55 = v54;
    uint64_t v68 = swift_slowAlloc();
    *(void *)&v81[0] = v68;
    *(_DWORD *)uint64_t v55 = 136315650;
    swift_bridgeObjectRetain();
    uint64_t v56 = OUTLINED_FUNCTION_44();
    OUTLINED_FUNCTION_43(v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_68();
    *(_WORD *)(v55 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v31, (uint64_t *)v81);
    OUTLINED_FUNCTION_59(v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v55 + 22) = 2080;
    id v58 = v76;
    ((void (*)(char *, char *, NSObject *))v50)(v74, v76, v9);
    uint64_t v59 = String.init<A>(describing:)();
    uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, (uint64_t *)v81);
    OUTLINED_FUNCTION_59(v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, NSObject *))(v49 + 8))(v58, v9);
    os_log_t v62 = v67;
    _os_log_impl(&dword_0, v67, (os_log_type_t)v71, "Setting parameter %s, of type: %s to %s using salient entities", (uint8_t *)v55, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_10();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_67();
    (*(void (**)(char *, NSObject *))(v49 + 8))(v51, v9);
  }
  unint64_t v63 = (uint64_t *)v78;
  *(void *)(v78 + 24) = v9;
  v63[4] = _s18SiriSuggestionsKit6SignalCACSHAAWlTm_0(&lazy protocol witness table cache variable for type RetrievedContext and conformance RetrievedContext, (void (*)(uint64_t))&type metadata accessor for RetrievedContext);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v63);
  ((void (*)(uint64_t *, char *, NSObject *))v72)(boxed_opaque_existential_1, v69, v9);
}

void *specialized Dictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1)
{
  return specialized Dictionary.init<A>(uniqueKeysWithValues:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, ActionParameter>, (void (*)(uint64_t, uint64_t, void **))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
}

{
  return specialized Dictionary.init<A>(uniqueKeysWithValues:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, LinkSuggestedActionsRequest>, (void (*)(uint64_t, uint64_t, void **))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
}

{
  return specialized Dictionary.init<A>(uniqueKeysWithValues:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, String>, (void (*)(uint64_t, uint64_t, void **))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
}

{
  return specialized Dictionary.init<A>(uniqueKeysWithValues:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<LNSuggestedActionDialogParameterKey, String>, (void (*)(uint64_t, uint64_t, void **))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
}

{
  return specialized Dictionary.init<A>(uniqueKeysWithValues:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<Signal, [CandidateSuggestionConfigurator]>, (void (*)(uint64_t, uint64_t, void **))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
}

void *specialized Dictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t, void **))
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(a2);
    uint64_t v4 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v7 = v4;
  uint64_t v5 = swift_bridgeObjectRetain();
  a3(v5, 1, &v7);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t RetrievedContext.getDisplay(for:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TypedValue?);
  __chkstk_darwin(v1 - 8);
  OUTLINED_FUNCTION_50();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation?);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  RetrievedContext.typedValue.getter();
  uint64_t v5 = type metadata accessor for TypedValue();
  if (__swift_getEnumTagSinglePayload(v0, 1, v5) == 1)
  {
    uint64_t v6 = &demangling cache variable for type metadata for TypedValue?;
    uint64_t v7 = v0;
  }
  else
  {
    TypedValue.displayRepresentation.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0, v5);
    uint64_t v8 = type metadata accessor for DisplayRepresentation();
    if (__swift_getEnumTagSinglePayload((uint64_t)v4, 1, v8) != 1)
    {
      uint64_t v9 = DisplayRepresentation.title.getter();
      (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v4, v8);
      return v9;
    }
    uint64_t v6 = &demangling cache variable for type metadata for DisplayRepresentation?;
    uint64_t v7 = (uint64_t)v4;
  }
  outlined destroy of SiriSuggestions.DisplayRepresentable?(v7, v6);
  return 0;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(void (*a1)(void))
{
  a1();
  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(uint64_t (*a1)(void))
{
  return a1();
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  OUTLINED_FUNCTION_55();
  if (v3)
  {
    OUTLINED_FUNCTION_2_0();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_11();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3();
    }
  }
  OUTLINED_FUNCTION_29_0();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, ActionParameter)>);
    uint64_t v6 = (void *)swift_allocObject();
    size_t v7 = _swift_stdlib_malloc_size(v6);
    long long v6[2] = v1;
    v6[3] = 2 * ((uint64_t)(v7 - 32) / 64);
  }
  if (v0)
  {
    uint64_t v8 = (char *)OUTLINED_FUNCTION_53();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v8, v9, v10);
    OUTLINED_FUNCTION_31();
  }
  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_27_0();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v11, v12, v13, v14);
  }
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  void *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_55();
  if (v2)
  {
    OUTLINED_FUNCTION_2_0();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_11();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3();
    }
  }
  OUTLINED_FUNCTION_29_0();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AppIntentDetails>);
    char v5 = (void *)OUTLINED_FUNCTION_36();
    OUTLINED_FUNCTION_20_1(v5);
  }
  if (v0)
  {
    uint64_t v6 = (char *)OUTLINED_FUNCTION_53();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v7, v8);
    OUTLINED_FUNCTION_31();
  }
  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_27_0();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v9, v10, v11, v12);
  }
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  void *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_55();
  if (v2)
  {
    OUTLINED_FUNCTION_2_0();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_11();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3();
    }
  }
  OUTLINED_FUNCTION_29_0();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LinkSuggestedAction>);
    char v5 = (void *)OUTLINED_FUNCTION_36();
    OUTLINED_FUNCTION_20_1(v5);
  }
  if (v0)
  {
    uint64_t v6 = (char *)OUTLINED_FUNCTION_53();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v7, v8);
    OUTLINED_FUNCTION_31();
  }
  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_27_0();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v9, v10, v11, v12);
  }
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  void *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_55();
  if (v2)
  {
    OUTLINED_FUNCTION_2_0();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_11();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3();
    }
  }
  OUTLINED_FUNCTION_29_0();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OwnerDefinition>);
    char v5 = (void *)OUTLINED_FUNCTION_36();
    OUTLINED_FUNCTION_20_1(v5);
  }
  if (v0)
  {
    uint64_t v6 = (char *)OUTLINED_FUNCTION_53();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v7, v8);
    OUTLINED_FUNCTION_31();
  }
  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_27_0();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v9, v10, v11, v12);
  }
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  void *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_55();
  if (v2)
  {
    OUTLINED_FUNCTION_2_0();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_11();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3();
    }
  }
  OUTLINED_FUNCTION_29_0();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase>);
    char v5 = (void *)OUTLINED_FUNCTION_36();
    OUTLINED_FUNCTION_20_1(v5);
  }
  if (v0)
  {
    uint64_t v6 = (char *)OUTLINED_FUNCTION_53();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v7, v8);
    OUTLINED_FUNCTION_31();
  }
  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_27_0();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v9, v10, v11, v12);
  }
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [RetrievedContext])>, &demangling cache variable for type metadata for (String, [RetrievedContext]));
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [LNAutoShortcut])>, &demangling cache variable for type metadata for (String, [LNAutoShortcut]));
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(Signal, [CandidateSuggestionConfigurator])>, (void (*)(void, uint64_t, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, uint64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return OUTLINED_FUNCTION_38(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RetrievedContext>, (uint64_t (*)(void))&type metadata accessor for RetrievedContext, a7, (void (*)(void))&type metadata accessor for RetrievedContext);
}

{
  return OUTLINED_FUNCTION_38(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<VersionedInvocation>, (uint64_t (*)(void))&type metadata accessor for VersionedInvocation, a7, (void (*)(void))&type metadata accessor for VersionedInvocation);
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    OUTLINED_FUNCTION_2_0();
    if (v10 != v11)
    {
      OUTLINED_FUNCTION_11();
      if (v10)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3();
    }
  }
  else
  {
    uint64_t v9 = a2;
  }
  uint64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (v13)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v14 = (char *)swift_allocObject();
    size_t v15 = _swift_stdlib_malloc_size(v14);
    *((void *)v14 + 2) = v12;
    *((void *)v14 + 3) = 2 * ((uint64_t)(v15 - 32) / 24);
  }
  else
  {
    uint64_t v14 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v16 = v14 + 32;
  if (a1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v12, v16);
    OUTLINED_FUNCTION_31();
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v12, (unint64_t)v16, a4, a6);
  }
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void), void (*a8)(void))
{
  if (a3)
  {
    OUTLINED_FUNCTION_2_0();
    if (v14 != v15)
    {
      OUTLINED_FUNCTION_11();
      if (v14)
      {
        __break(1u);
        goto LABEL_23;
      }
      OUTLINED_FUNCTION_3();
    }
  }
  else
  {
    uint64_t v13 = a2;
  }
  uint64_t v16 = *(void *)(a4 + 16);
  if (v13 <= v16) {
    uint64_t v17 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v17 = v13;
  }
  if (!v17)
  {
    unint64_t v23 = &_swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v18 = a6(0);
  OUTLINED_FUNCTION_0_1(v18);
  uint64_t v20 = *(void *)(v19 + 72);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (void *)swift_allocObject();
  size_t v24 = _swift_stdlib_malloc_size(v23);
  if (!v20 || (v24 - v22 == 0x8000000000000000 ? (BOOL v25 = v20 == -1) : (BOOL v25 = 0), v25))
  {
LABEL_23:
    OUTLINED_FUNCTION_0_2();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v23[2] = v16;
  void v23[3] = 2 * ((uint64_t)(v24 - v22) / v20);
LABEL_18:
  uint64_t v26 = *(void *)(a6(0) - 8);
  unint64_t v27 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  unint64_t v28 = (unint64_t)v23 + v27;
  if (a1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4 + v27, v16, v28, a8);
    OUTLINED_FUNCTION_31();
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v16, v28, a4, a7);
  }
  return (uint64_t)v23;
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(void, uint64_t, void *, uint64_t), void (*a7)(uint64_t, uint64_t, void *))
{
  if (a3)
  {
    OUTLINED_FUNCTION_2_0();
    if (v12 != v13)
    {
      OUTLINED_FUNCTION_11();
      if (v12)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3();
    }
  }
  else
  {
    uint64_t v11 = a2;
  }
  uint64_t v14 = *(void *)(a4 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (v15)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v16 = (void *)swift_allocObject();
    size_t v17 = _swift_stdlib_malloc_size(v16);
    v16[2] = v14;
    uint64_t v16[3] = 2 * ((uint64_t)(v17 - 32) / 16);
  }
  else
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
  }
  uint64_t v18 = v16 + 4;
  if (a1)
  {
    a7(a4 + 32, v14, v18);
    OUTLINED_FUNCTION_31();
  }
  else
  {
    a6(0, v14, v18, a4);
  }
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, ActionParameter));
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Signal, [CandidateSuggestionConfigurator]));
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OwnerDefinition);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_4_1();
    goto LABEL_11;
  }
  unint64_t v6 = a4 + 24 * a1 + 32;
  unint64_t v7 = a3 + 24 * v5;
  if (v6 >= v7 || v6 + 24 * v5 <= a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    swift_arrayInitWithCopy();
    swift_bridgeObjectRelease();
    return v7;
  }
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_3_1();
LABEL_11:
  uint64_t result = OUTLINED_FUNCTION_5_1();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_4_1();
    goto LABEL_11;
  }
  uint64_t v9 = *(void *)(a5(0) - 8);
  uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  uint64_t v11 = *(void *)(v9 + 72);
  unint64_t v12 = v10 + v11 * a1;
  unint64_t v13 = a3 + v11 * v5;
  if (v12 >= v13 || v12 + v11 * v5 <= a3)
  {
    swift_arrayInitWithCopy();
    swift_bridgeObjectRelease();
    return v13;
  }
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_3_1();
LABEL_11:
  uint64_t result = OUTLINED_FUNCTION_5_1();
  __break(1u);
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    uint64_t result = (char *)OUTLINED_FUNCTION_2_2();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_1(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    uint64_t result = (char *)OUTLINED_FUNCTION_2_2();
    __break(1u);
  }
  else if (a3 != result || &result[48 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_1(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    uint64_t result = (char *)OUTLINED_FUNCTION_2_2();
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_1(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    uint64_t result = (char *)OUTLINED_FUNCTION_2_2();
    __break(1u);
  }
  else if (a3 != result || &result[56 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_1(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    uint64_t result = (char *)OUTLINED_FUNCTION_2_2();
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_1(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    uint64_t result = (char *)OUTLINED_FUNCTION_2_2();
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_1(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    uint64_t result = (char *)OUTLINED_FUNCTION_2_2();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_1(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    uint64_t result = (char *)OUTLINED_FUNCTION_2_2();
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_1(a3, result);
  }
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[64 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, a2 << 6);
  }
  return __src;
}

{
  uint64_t v3;

  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[40 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 40 * a2);
  }
  return __src;
}

{
  if (__dst != __src || &__src[16 * a2] <= __dst) {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

void specialized UnsafeMutablePointer.moveInitialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, (void (*)(void))&type metadata accessor for VersionedInvocation);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, (void (*)(void))&type metadata accessor for InvocationType);
}

void specialized UnsafeMutablePointer.moveInitialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void))
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    uint64_t v9 = OUTLINED_FUNCTION_2_2();
    __break(1u);
_swift_arrayInitWithTakeBackToFront:
    _swift_arrayInitWithTakeBackToFront(v9);
    return;
  }
  if (a3 < a1 || (a4(0), OUTLINED_FUNCTION_35(), a1 + *(void *)(v8 + 72) * a2 <= a3))
  {
    a4(0);
    uint64_t v10 = OUTLINED_FUNCTION_56();
    _swift_arrayInitWithTakeFrontToBack(v10);
  }
  else if (a3 != a1)
  {
    uint64_t v9 = OUTLINED_FUNCTION_56();
    goto _swift_arrayInitWithTakeBackToFront;
  }
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_4_1();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_5_1();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_30();
  if (v4 + 16 * v3 > v2 && v2 + 16 * v3 > v4)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_3_1();
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Signal, [CandidateSuggestionConfigurator]));
  OUTLINED_FUNCTION_6_0();
  return swift_arrayInitWithCopy();
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  BOOL v6;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_4_1();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_5_1();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_33();
  if (!v5 & v4) {
    unint64_t v6 = v3 > v2;
  }
  else {
    unint64_t v6 = 0;
  }
  if (v6)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_3_1();
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, LNActionMetadata));
  OUTLINED_FUNCTION_6_0();
  return swift_arrayInitWithCopy();
}

{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_4_1();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_5_1();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_30();
  if (v4 + 56 * v3 > v2 && v2 + 56 * v3 > v4)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_3_1();
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, SiriSuggestions.DisplayRepresentable));
  OUTLINED_FUNCTION_6_0();
  return swift_arrayInitWithCopy();
}

{
  unint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  BOOL v6;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_4_1();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_5_1();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_33();
  if (!v5 & v4) {
    unint64_t v6 = v3 > v2;
  }
  else {
    unint64_t v6 = 0;
  }
  if (v6)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_3_1();
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, LinkSuggestedActionsRequest));
  OUTLINED_FUNCTION_6_0();
  return swift_arrayInitWithCopy();
}

{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_4_1();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_5_1();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_30();
  if (v4 + 8 * v3 > v2 && v2 + 8 * v3 > v4)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_3_1();
    goto LABEL_11;
  }
  type metadata accessor for LNActionParameterMetadata(0, (unint64_t *)&lazy cache variable for type metadata for LNAutoShortcut);
  OUTLINED_FUNCTION_6_0();
  return swift_arrayInitWithCopy();
}

{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_4_1();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_5_1();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_30();
  if (v4 + 32 * v3 > v2 && v2 + 32 * v3 > v4)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_3_1();
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
  OUTLINED_FUNCTION_6_0();
  return swift_arrayInitWithCopy();
}

{
  unint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  BOOL v6;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_4_1();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_5_1();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_33();
  if (!v5 & v4) {
    unint64_t v6 = v3 > v2;
  }
  else {
    unint64_t v6 = 0;
  }
  if (v6)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_3_1();
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (LNSuggestedActionDialogParameterKey, String));
  OUTLINED_FUNCTION_6_0();
  return swift_arrayInitWithCopy();
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  void (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_4_1();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_5_1();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_30();
  v5(0);
  OUTLINED_FUNCTION_35();
  unint64_t v7 = *(void *)(v6 + 72) * v2;
  uint64_t v8 = v3 + v7;
  uint64_t v9 = v4 + v7;
  if (v8 > v4 && v9 > v3)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_3_1();
    goto LABEL_11;
  }
  OUTLINED_FUNCTION_6_0();
  return swift_arrayInitWithCopy();
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  char v5;
  char v6;
  BOOL v7;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_4_1();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_5_1();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_33();
  if (!v6 & v5) {
    unint64_t v7 = v4 > v2;
  }
  else {
    unint64_t v7 = 0;
  }
  if (v7)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_3_1();
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(v3);
  OUTLINED_FUNCTION_6_0();
  return swift_arrayInitWithCopy();
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_4_1();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_5_1();
    __break(1u);
    return result;
  }
  if (a3 + 16 * a2 > a1 && a1 + 16 * a2 > a3)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_3_1();
    goto LABEL_11;
  }
  return swift_arrayInitWithCopy();
}

{
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_4_1();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_5_1();
    __break(1u);
    return result;
  }
  if (a3 + 48 * a2 > a1 && a1 + 48 * a2 > a3)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_3_1();
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
  OUTLINED_FUNCTION_6_0();
  return swift_arrayInitWithCopy();
}

{
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_4_1();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_5_1();
    __break(1u);
    return result;
  }
  if (a3 + 48 * a2 > a1 && a1 + 48 * a2 > a3)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_3_1();
    goto LABEL_11;
  }
  return swift_arrayInitWithCopy();
}

{
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_4_1();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_5_1();
    __break(1u);
    return result;
  }
  if (a3 + 32 * a2 > a1 && a1 + 32 * a2 > a3)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_3_1();
    goto LABEL_11;
  }
  return swift_arrayInitWithCopy();
}

void partial apply for closure #1 in LinkClientResolver.getParameters(for:withParameters:andSalientEntities:)(void **a1@<X0>, void **a2@<X8>)
{
  closure #1 in LinkClientResolver.getParameters(for:withParameters:andSalientEntities:)(a1, *(void *)(v2 + 40), *(void *)(v2 + 48), a2);
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)()
{
  OUTLINED_FUNCTION_8_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Signal, [CandidateSuggestionConfigurator]>);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_40();
  if (v3)
  {
    OUTLINED_FUNCTION_24_0();
    unint64_t v6 = v5 & v4;
    OUTLINED_FUNCTION_54();
    uint64_t v7 = v2 + 64;
    swift_retain();
    uint64_t v8 = 0;
    if (!v6) {
      goto LABEL_4;
    }
LABEL_3:
    unint64_t v9 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = v19 + (v8 << 6))
    {
      uint64_t v20 = *(void *)(v1[6] + 8 * i);
      uint64_t v21 = *(void *)(v1[7] + 8 * i);
      if ((v35 & 1) == 0)
      {
        swift_retain();
        swift_bridgeObjectRetain();
      }
      char v0 = (void *)type metadata accessor for Signal();
      _s18SiriSuggestionsKit6SignalCACSHAAWlTm_0(&lazy protocol witness table cache variable for type Signal and conformance Signal, (void (*)(uint64_t))&type metadata accessor for Signal);
      dispatch thunk of Hashable._rawHashValue(seed:)();
      OUTLINED_FUNCTION_28_0();
      if (((v24 << v23) & ~*(void *)(v7 + 8 * v22)) == 0)
      {
        OUTLINED_FUNCTION_10_1();
        while (1)
        {
          OUTLINED_FUNCTION_34();
          if (v28)
          {
            if (v25) {
              break;
            }
          }
          if (v26 == v27) {
            uint64_t v26 = 0;
          }
          if (*(void *)(v7 + 8 * v26) != -1)
          {
            OUTLINED_FUNCTION_9_1();
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_11_1();
LABEL_30:
      OUTLINED_FUNCTION_61();
      *(void *)(v7 + v29) |= v30;
      *(void *)(*(void *)(v2 + 48) + 8 * v31) = v20;
      *(void *)(*(void *)(v2 + 56) + 8 * v31) = v21;
      OUTLINED_FUNCTION_17_1();
      if (v6) {
        goto LABEL_3;
      }
LABEL_4:
      if (__OFADD__(v8, 1)) {
        goto LABEL_40;
      }
      OUTLINED_FUNCTION_65();
      if (v13 == v14) {
        break;
      }
      uint64_t v8 = v11;
      if (!*(void *)(v34 + 8 * v11))
      {
        uint64_t v8 = v11 + 1;
        if (v11 + 1 >= v12) {
          goto LABEL_32;
        }
        if (!*(void *)(v34 + 8 * v8))
        {
          OUTLINED_FUNCTION_37();
          if (v13 == v14)
          {
LABEL_32:
            swift_release();
            char v0 = v33;
            goto LABEL_33;
          }
          if (!*(void *)(v34 + 8 * v15))
          {
            while (1)
            {
              uint64_t v8 = v15 + 1;
              if (__OFADD__(v15, 1)) {
                goto LABEL_41;
              }
              if (v8 >= v16) {
                goto LABEL_32;
              }
              ++v15;
              if (*(void *)(v34 + 8 * v8)) {
                goto LABEL_17;
              }
            }
          }
          uint64_t v8 = v15;
        }
      }
LABEL_17:
      OUTLINED_FUNCTION_48();
      unint64_t v6 = v18 & v17;
    }
    swift_release();
    OUTLINED_FUNCTION_58();
LABEL_33:
    if (v35)
    {
      OUTLINED_FUNCTION_14_1();
      if (v13 != v14) {
        OUTLINED_FUNCTION_26_0(v32);
      }
      else {
        OUTLINED_FUNCTION_19_1(v32);
      }
      v1[2] = 0;
    }
  }
  swift_release();
  *char v0 = v2;
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  long long *v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  long long v26[2];

  OUTLINED_FUNCTION_8_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, SiriSuggestions.DisplayRepresentable>);
  static _DictionaryStorage.resize(original:capacity:move:)();
  OUTLINED_FUNCTION_40();
  if (v3)
  {
    OUTLINED_FUNCTION_25_0();
    unint64_t v6 = v5 & v4;
    OUTLINED_FUNCTION_66();
    char v23 = v0;
    uint64_t v24 = v7;
    swift_retain();
    uint64_t v8 = 0;
    if (!v6) {
      goto LABEL_4;
    }
LABEL_3:
    OUTLINED_FUNCTION_60();
    while (1)
    {
      OUTLINED_FUNCTION_47();
      uint64_t v16 = (long long *)(v15 + 40 * v14);
      if (v2)
      {
        outlined init with take of LinkDialogIdProvider(v16, (uint64_t)v26);
      }
      else
      {
        outlined init with copy of LinkClient((uint64_t)v16, (uint64_t)v26);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      Hasher._finalize()();
      OUTLINED_FUNCTION_18_1();
      if (v17)
      {
        OUTLINED_FUNCTION_10_1();
        while (1)
        {
          OUTLINED_FUNCTION_34();
          if (v17)
          {
            if (v19) {
              break;
            }
          }
          OUTLINED_FUNCTION_45();
          if (!v17)
          {
            OUTLINED_FUNCTION_9_1();
            goto LABEL_28;
          }
        }
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_11_1();
LABEL_28:
      OUTLINED_FUNCTION_7_1(v18);
      outlined init with take of LinkDialogIdProvider(v26, v21 + 40 * v20);
      OUTLINED_FUNCTION_17_1();
      if (v6) {
        goto LABEL_3;
      }
LABEL_4:
      unint64_t v9 = v8 + 1;
      if (__OFADD__(v8, 1)) {
        goto LABEL_37;
      }
      if (v9 >= v24) {
        goto LABEL_30;
      }
      ++v8;
      if (!*(void *)(v25 + 8 * v9))
      {
        uint64_t v8 = v9 + 1;
        if (v9 + 1 >= v24) {
          goto LABEL_30;
        }
        if (!*(void *)(v25 + 8 * v8))
        {
          OUTLINED_FUNCTION_37();
          if (v12 == v13)
          {
LABEL_30:
            swift_release();
            char v0 = v23;
            if (v2)
            {
              OUTLINED_FUNCTION_14_1();
              if (v12 != v13) {
                OUTLINED_FUNCTION_26_0(v22);
              }
              else {
                OUTLINED_FUNCTION_19_1(v22);
              }
              *(void *)(v1 + 16) = 0;
            }
            break;
          }
          if (!*(void *)(v25 + 8 * v10))
          {
            while (1)
            {
              uint64_t v8 = v10 + 1;
              if (__OFADD__(v10, 1)) {
                goto LABEL_38;
              }
              if (v8 >= v11) {
                goto LABEL_30;
              }
              ++v10;
              if (*(void *)(v25 + 8 * v8)) {
                goto LABEL_16;
              }
            }
          }
          uint64_t v8 = v10;
        }
      }
LABEL_16:
      OUTLINED_FUNCTION_63();
    }
  }
  swift_release();
  *char v0 = v2;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ActionParameter>);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  if (!v10) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v13 << 6))
  {
    uint64_t v20 = (uint64_t *)(*(void *)(v5 + 48) + 16 * i);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    char v23 = (long long *)(*(void *)(v5 + 56) + 48 * i);
    if (v42)
    {
      long long v24 = *v23;
      long long v25 = v23[2];
      long long v44 = v23[1];
      long long v45 = v25;
      long long v43 = v24;
    }
    else
    {
      outlined init with copy of ActionParameter((uint64_t)v23, (uint64_t)&v43);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) == 0)
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v26) >> 6;
      while (++v28 != v31 || (v30 & 1) == 0)
      {
        BOOL v32 = v28 == v31;
        if (v28 == v31) {
          unint64_t v28 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v11 + 8 * v28);
        if (v33 != -1)
        {
          unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    unint64_t v29 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_31:
    *(void *)(v11 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    uint64_t v34 = (void *)(*(void *)(v7 + 48) + 16 * v29);
    *uint64_t v34 = v22;
    v34[1] = v21;
    char v35 = (_OWORD *)(*(void *)(v7 + 56) + 48 * v29);
    long long v36 = v43;
    long long v37 = v45;
    v35[1] = v44;
    v35[2] = v37;
    *char v35 = v36;
    ++*(void *)(v7 + 16);
    if (v10) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_42;
    }
    if (v16 >= v40)
    {
      swift_release();
      uint64_t v3 = v39;
      uint64_t v17 = (void *)(v5 + 64);
      goto LABEL_35;
    }
    uint64_t v17 = (void *)(v5 + 64);
    unint64_t v18 = *(void *)(v41 + 8 * v16);
    ++v13;
    if (!v18)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v18 = *(void *)(v41 + 8 * v13);
      if (!v18) {
        break;
      }
    }
LABEL_18:
    unint64_t v10 = (v18 - 1) & v18;
  }
  int64_t v19 = v16 + 2;
  if (v19 < v40)
  {
    unint64_t v18 = *(void *)(v41 + 8 * v19);
    if (!v18)
    {
      while (1)
      {
        int64_t v13 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          goto LABEL_43;
        }
        if (v13 >= v40) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v41 + 8 * v13);
        ++v19;
        if (v18) {
          goto LABEL_18;
        }
      }
    }
    int64_t v13 = v19;
    goto LABEL_18;
  }
LABEL_33:
  swift_release();
  uint64_t v3 = v39;
LABEL_35:
  if (v42)
  {
    uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
    if (v38 >= 64) {
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v38 + 63) >> 6, v17);
    }
    else {
      *uint64_t v17 = -1 << v38;
    }
    *(void *)(v5 + 16) = 0;
  }
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  void *v38;
  uint64_t v39;
  char v40;
  char v41;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, LinkSuggestedActionsRequest>);
  int64_t v40 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v38 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    long long v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v39 = v5;
    if (!v10) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      int64_t v19 = (uint64_t *)(*(void *)(v5 + 48) + 16 * i);
      uint64_t v21 = *v19;
      uint64_t v20 = v19[1];
      uint64_t v22 = *(void *)(v5 + 56) + 24 * i;
      char v23 = *(void *)v22;
      long long v24 = *(void *)(v22 + 8);
      long long v25 = *(unsigned char *)(v22 + 16);
      uint64_t v41 = *(unsigned char *)(v22 + 17);
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) == 0)
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v26) >> 6;
        while (++v28 != v31 || (v30 & 1) == 0)
        {
          BOOL v32 = v28 == v31;
          if (v28 == v31) {
            unint64_t v28 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v28);
          if (v33 != -1)
          {
            unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      unint64_t v29 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v11 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
      uint64_t v34 = (void *)(*(void *)(v7 + 48) + 16 * v29);
      *uint64_t v34 = v21;
      v34[1] = v20;
      char v35 = *(void *)(v7 + 56) + 24 * v29;
      *(void *)char v35 = v23;
      *(void *)(v35 + 8) = v24;
      *(unsigned char *)(v35 + 16) = v25;
      *(unsigned char *)(v35 + 17) = v41;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v39;
      if (v10) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v16 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_39;
      }
      if (v16 >= v37) {
        goto LABEL_32;
      }
      uint64_t v17 = v38[v16];
      ++v13;
      if (!v17)
      {
        int64_t v13 = v16 + 1;
        if (v16 + 1 >= v37) {
          goto LABEL_32;
        }
        uint64_t v17 = v38[v13];
        if (!v17)
        {
          unint64_t v18 = v16 + 2;
          if (v18 >= v37)
          {
LABEL_32:
            swift_release();
            uint64_t v3 = v2;
            if (v40)
            {
              long long v36 = 1 << *(unsigned char *)(v5 + 32);
              if (v36 >= 64) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v36 + 63) >> 6, v38);
              }
              else {
                *uint64_t v38 = -1 << v36;
              }
              *(void *)(v5 + 16) = 0;
            }
            break;
          }
          uint64_t v17 = v38[v18];
          if (!v17)
          {
            while (1)
            {
              int64_t v13 = v18 + 1;
              if (__OFADD__(v18, 1)) {
                goto LABEL_40;
              }
              if (v13 >= v37) {
                goto LABEL_32;
              }
              uint64_t v17 = v38[v13];
              ++v18;
              if (v17) {
                goto LABEL_18;
              }
            }
          }
          int64_t v13 = v18;
        }
      }
LABEL_18:
      unint64_t v10 = (v17 - 1) & v17;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  void *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  uint64_t v38;
  char v39;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<LNSuggestedActionDialogParameterKey, String>);
  uint64_t v39 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    char v35 = v2;
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    long long v37 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    long long v36 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v5;
    if (!v10) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      int64_t v19 = *(void **)(*(void *)(v5 + 48) + 8 * i);
      uint64_t v20 = (uint64_t *)(*(void *)(v5 + 56) + 16 * i);
      uint64_t v21 = *v20;
      uint64_t v22 = v20[1];
      if ((v39 & 1) == 0)
      {
        char v23 = v19;
        swift_bridgeObjectRetain();
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      String.hash(into:)();
      long long v24 = Hasher._finalize()();
      uint64_t result = swift_bridgeObjectRelease();
      long long v25 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v26 = v24 & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) == 0)
      {
        unint64_t v29 = 0;
        char v30 = (unint64_t)(63 - v25) >> 6;
        while (++v27 != v30 || (v29 & 1) == 0)
        {
          unint64_t v31 = v27 == v30;
          if (v27 == v30) {
            unint64_t v27 = 0;
          }
          v29 |= v31;
          BOOL v32 = *(void *)(v11 + 8 * v27);
          if (v32 != -1)
          {
            unint64_t v28 = __clz(__rbit64(~v32)) + (v27 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      unint64_t v28 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v11 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
      *(void *)(*(void *)(v7 + 48) + 8 * v28) = v19;
      uint64_t v33 = (void *)(*(void *)(v7 + 56) + 16 * v28);
      *uint64_t v33 = v21;
      v33[1] = v22;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v38;
      if (v10) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v16 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_39;
      }
      if (v16 >= v36) {
        goto LABEL_32;
      }
      uint64_t v17 = v37[v16];
      ++v13;
      if (!v17)
      {
        int64_t v13 = v16 + 1;
        if (v16 + 1 >= v36) {
          goto LABEL_32;
        }
        uint64_t v17 = v37[v13];
        if (!v17)
        {
          unint64_t v18 = v16 + 2;
          if (v18 >= v36)
          {
LABEL_32:
            swift_release();
            uint64_t v3 = v35;
            if (v39)
            {
              uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
              if (v34 >= 64) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v34 + 63) >> 6, v37);
              }
              else {
                *long long v37 = -1 << v34;
              }
              *(void *)(v5 + 16) = 0;
            }
            break;
          }
          uint64_t v17 = v37[v18];
          if (!v17)
          {
            while (1)
            {
              int64_t v13 = v18 + 1;
              if (__OFADD__(v18, 1)) {
                goto LABEL_40;
              }
              if (v13 >= v36) {
                goto LABEL_32;
              }
              uint64_t v17 = v37[v13];
              ++v18;
              if (v17) {
                goto LABEL_18;
              }
            }
          }
          int64_t v13 = v18;
        }
      }
LABEL_18:
      unint64_t v10 = (v17 - 1) & v17;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, int a13, char a14)
{
  OUTLINED_FUNCTION_51();
  OUTLINED_FUNCTION_8_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_40();
  if (v17)
  {
    OUTLINED_FUNCTION_24_0();
    uint64_t v20 = v19 & v18;
    OUTLINED_FUNCTION_54();
    uint64_t v21 = v16 + 64;
    swift_retain();
    uint64_t v22 = 0;
    if (!v20) {
      goto LABEL_4;
    }
LABEL_3:
    OUTLINED_FUNCTION_41();
    while (1)
    {
      uint64_t v30 = *(void *)(v15 + 56) + 16 * v23;
      unint64_t v14 = *(void **)v30;
      uint64_t v31 = *(void *)(v30 + 8);
      if ((a14 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      Hasher._finalize()();
      OUTLINED_FUNCTION_28_0();
      if (((v34 << v33) & ~*(void *)(v21 + 8 * v32)) == 0)
      {
        OUTLINED_FUNCTION_10_1();
        while (1)
        {
          OUTLINED_FUNCTION_34();
          if (v39)
          {
            if (v36) {
              break;
            }
          }
          if (v37 == v38) {
            uint64_t v37 = 0;
          }
          if (*(void *)(v21 + 8 * v37) != -1)
          {
            OUTLINED_FUNCTION_9_1();
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_11_1();
LABEL_30:
      OUTLINED_FUNCTION_21_1(v35);
      char v42 = (void *)(v41 + 16 * v40);
      void *v42 = v14;
      v42[1] = v31;
      OUTLINED_FUNCTION_17_1();
      if (v20) {
        goto LABEL_3;
      }
LABEL_4:
      if (__OFADD__(v22, 1)) {
        goto LABEL_40;
      }
      OUTLINED_FUNCTION_65();
      if (v26 == v27) {
        break;
      }
      uint64_t v22 = v24;
      if (!*(void *)(a12 + 8 * v24))
      {
        uint64_t v22 = v24 + 1;
        if (v24 + 1 >= v25) {
          goto LABEL_32;
        }
        if (!*(void *)(a12 + 8 * v22))
        {
          OUTLINED_FUNCTION_37();
          if (v26 == v27)
          {
LABEL_32:
            swift_release();
            unint64_t v14 = a10;
            goto LABEL_33;
          }
          if (!*(void *)(a12 + 8 * v28))
          {
            while (1)
            {
              uint64_t v22 = v28 + 1;
              if (__OFADD__(v28, 1)) {
                goto LABEL_41;
              }
              if (v22 >= v29) {
                goto LABEL_32;
              }
              ++v28;
              if (*(void *)(a12 + 8 * v22)) {
                goto LABEL_17;
              }
            }
          }
          uint64_t v22 = v28;
        }
      }
LABEL_17:
      OUTLINED_FUNCTION_49();
    }
    swift_release();
    OUTLINED_FUNCTION_58();
LABEL_33:
    if (a14)
    {
      OUTLINED_FUNCTION_14_1();
      if (v26 != v27) {
        OUTLINED_FUNCTION_26_0(v43);
      }
      else {
        OUTLINED_FUNCTION_19_1(v43);
      }
      *(void *)(v15 + 16) = 0;
    }
  }
  swift_release();
  *unint64_t v14 = v16;
  OUTLINED_FUNCTION_52();
}

{
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  OUTLINED_FUNCTION_51();
  OUTLINED_FUNCTION_8_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, LNActionMetadata>);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_40();
  if (v17)
  {
    OUTLINED_FUNCTION_39();
    if (v18 < 64) {
      uint64_t v20 = ~(-1 << v18);
    }
    else {
      uint64_t v20 = -1;
    }
    uint64_t v21 = v20 & v19;
    OUTLINED_FUNCTION_54();
    swift_retain();
    uint64_t v22 = 0;
    if (!v21) {
      goto LABEL_7;
    }
LABEL_6:
    OUTLINED_FUNCTION_60();
    while (1)
    {
      OUTLINED_FUNCTION_47();
      unint64_t v14 = *(void **)(v30 + 8 * v29);
      if ((a14 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v31 = v14;
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      Hasher._finalize()();
      OUTLINED_FUNCTION_18_1();
      if (v32)
      {
        OUTLINED_FUNCTION_10_1();
        while (1)
        {
          OUTLINED_FUNCTION_34();
          if (v32)
          {
            if (v34) {
              break;
            }
          }
          OUTLINED_FUNCTION_45();
          if (!v32)
          {
            OUTLINED_FUNCTION_9_1();
            goto LABEL_31;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_11_1();
LABEL_31:
      OUTLINED_FUNCTION_7_1(v33);
      *(void *)(v36 + 8 * v35) = v14;
      OUTLINED_FUNCTION_17_1();
      if (v21) {
        goto LABEL_6;
      }
LABEL_7:
      if (__OFADD__(v22, 1)) {
        goto LABEL_41;
      }
      OUTLINED_FUNCTION_65();
      if (v25 == v26) {
        break;
      }
      uint64_t v22 = v23;
      if (!*(void *)(a12 + 8 * v23))
      {
        uint64_t v22 = v23 + 1;
        if (v23 + 1 >= v24) {
          goto LABEL_33;
        }
        if (!*(void *)(a12 + 8 * v22))
        {
          OUTLINED_FUNCTION_37();
          if (v25 == v26)
          {
LABEL_33:
            swift_release();
            unint64_t v14 = a10;
            goto LABEL_34;
          }
          if (!*(void *)(a12 + 8 * v27))
          {
            while (1)
            {
              uint64_t v22 = v27 + 1;
              if (__OFADD__(v27, 1)) {
                goto LABEL_42;
              }
              if (v22 >= v28) {
                goto LABEL_33;
              }
              ++v27;
              if (*(void *)(a12 + 8 * v22)) {
                goto LABEL_20;
              }
            }
          }
          uint64_t v22 = v27;
        }
      }
LABEL_20:
      OUTLINED_FUNCTION_63();
    }
    swift_release();
    OUTLINED_FUNCTION_58();
LABEL_34:
    if (a14)
    {
      OUTLINED_FUNCTION_14_1();
      if (v25 != v26) {
        OUTLINED_FUNCTION_26_0(v37);
      }
      else {
        OUTLINED_FUNCTION_19_1(v37);
      }
      *(void *)(v15 + 16) = 0;
    }
  }
  swift_release();
  *unint64_t v14 = v16;
  OUTLINED_FUNCTION_52();
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v57 = type metadata accessor for TypedValue();
  OUTLINED_FUNCTION_4_0();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v56 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, TypedValue>);
  int v55 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (!*(void *)(v9 + 16)) {
    goto LABEL_42;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v12 = *(void *)(v9 + 64);
  long long v52 = (void *)(v9 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  OUTLINED_FUNCTION_66();
  uint64_t v50 = v2;
  uint64_t v51 = v15;
  os_log_type_t v53 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v54 = v6;
  uint64_t v16 = (void (**)(char *, uint64_t, uint64_t))(v6 + 32);
  uint64_t v17 = v10 + 64;
  swift_retain();
  uint64_t v18 = 0;
  if (!v14) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v19 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (unint64_t i = v19 | (v18 << 6); ; unint64_t i = v29 + (v18 << 6))
  {
    uint64_t v30 = *(void *)(v9 + 56);
    uint64_t v31 = v9;
    uint64_t v32 = (uint64_t *)(*(void *)(v9 + 48) + 16 * i);
    uint64_t v33 = *v32;
    uint64_t v34 = v32[1];
    uint64_t v35 = *(void *)(v54 + 72);
    uint64_t v36 = v30 + v35 * i;
    if (v55)
    {
      (*v16)(v56, v36, v57);
    }
    else
    {
      (*v53)(v56, v36, v57);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    Hasher._finalize()();
    OUTLINED_FUNCTION_28_0();
    if (((v39 << v38) & ~*(void *)(v17 + 8 * v37)) == 0)
    {
      OUTLINED_FUNCTION_10_1();
      while (1)
      {
        OUTLINED_FUNCTION_34();
        if (v43)
        {
          if (v40) {
            break;
          }
        }
        if (v41 == v42) {
          uint64_t v41 = 0;
        }
        if (*(void *)(v17 + 8 * v41) != -1)
        {
          OUTLINED_FUNCTION_9_1();
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    OUTLINED_FUNCTION_11_1();
LABEL_33:
    OUTLINED_FUNCTION_61();
    *(void *)(v17 + v44) |= v45;
    os_log_type_t v47 = (void *)(*(void *)(v10 + 48) + 16 * v46);
    *os_log_type_t v47 = v33;
    v47[1] = v34;
    (*v16)((char *)(*(void *)(v10 + 56) + v35 * v46), (uint64_t)v56, v57);
    OUTLINED_FUNCTION_17_1();
    uint64_t v9 = v31;
    if (v14) {
      goto LABEL_6;
    }
LABEL_7:
    uint64_t v21 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      goto LABEL_44;
    }
    if (v21 >= v51)
    {
      swift_release();
      uint64_t v3 = v50;
      uint64_t v22 = v52;
      goto LABEL_37;
    }
    uint64_t v22 = v52;
    ++v18;
    if (!v52[v21])
    {
      uint64_t v18 = v21 + 1;
      if (v21 + 1 >= v51) {
        goto LABEL_35;
      }
      if (!v52[v18]) {
        break;
      }
    }
LABEL_19:
    OUTLINED_FUNCTION_48();
    unint64_t v14 = v28 & v27;
  }
  OUTLINED_FUNCTION_37();
  if (v25 != v26)
  {
    if (!v22[v23])
    {
      while (1)
      {
        uint64_t v18 = v23 + 1;
        if (__OFADD__(v23, 1)) {
          goto LABEL_45;
        }
        if (v18 >= v24) {
          goto LABEL_35;
        }
        ++v23;
        if (v22[v18]) {
          goto LABEL_19;
        }
      }
    }
    uint64_t v18 = v23;
    goto LABEL_19;
  }
LABEL_35:
  swift_release();
  uint64_t v3 = v50;
LABEL_37:
  if (v55)
  {
    uint64_t v48 = 1 << *(unsigned char *)(v9 + 32);
    if (v48 >= 64) {
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v48 + 63) >> 6, v22);
    }
    else {
      *uint64_t v22 = -1 << v48;
    }
    *(void *)(v9 + 16) = 0;
  }
LABEL_42:
  swift_release();
  *uint64_t v3 = v10;
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, char a14)
{
}

{
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t)&demangling cache variable for type metadata for _DictionaryStorage<String, [LNAutoShortcut]>, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_51();
  OUTLINED_FUNCTION_8_1();
  __swift_instantiateConcreteTypeFromMangledName(v17);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_40();
  if (v18)
  {
    uint64_t v42 = v14;
    OUTLINED_FUNCTION_39();
    unint64_t v14 = -1;
    if (v19 < 64) {
      uint64_t v21 = ~(-1 << v19);
    }
    else {
      uint64_t v21 = -1;
    }
    uint64_t v22 = v21 & v20;
    OUTLINED_FUNCTION_66();
    uint64_t v23 = v16 + 64;
    swift_retain();
    uint64_t v24 = 0;
    if (!v22) {
      goto LABEL_7;
    }
LABEL_6:
    OUTLINED_FUNCTION_41();
    while (1)
    {
      uint64_t v32 = *(void *)(*(void *)(v15 + 56) + 8 * v25);
      if ((a14 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t v33 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v16 + 32));
      if (((-1 << v33) & ~*(void *)(v23 + 8 * (v33 >> 6))) == 0)
      {
        OUTLINED_FUNCTION_10_1();
        while (1)
        {
          OUTLINED_FUNCTION_34();
          if (v38)
          {
            if (v35) {
              break;
            }
          }
          if (v36 == v37) {
            uint64_t v36 = 0;
          }
          if (*(void *)(v23 + 8 * v36) != -1)
          {
            OUTLINED_FUNCTION_9_1();
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_11_1();
LABEL_33:
      OUTLINED_FUNCTION_21_1(v34);
      *(void *)(v40 + 8 * v39) = v32;
      OUTLINED_FUNCTION_17_1();
      if (v22) {
        goto LABEL_6;
      }
LABEL_7:
      if (__OFADD__(v24, 1)) {
        goto LABEL_43;
      }
      OUTLINED_FUNCTION_65();
      if (v28 == v29) {
        break;
      }
      uint64_t v24 = v26;
      if (!*(void *)(a12 + 8 * v26))
      {
        uint64_t v24 = v26 + 1;
        if (v26 + 1 >= v27) {
          goto LABEL_35;
        }
        if (!*(void *)(a12 + 8 * v24))
        {
          OUTLINED_FUNCTION_37();
          if (v28 == v29)
          {
LABEL_35:
            swift_release();
            unint64_t v14 = v42;
            goto LABEL_36;
          }
          if (!*(void *)(a12 + 8 * v30))
          {
            while (1)
            {
              uint64_t v24 = v30 + 1;
              if (__OFADD__(v30, 1)) {
                goto LABEL_44;
              }
              if (v24 >= v31) {
                goto LABEL_35;
              }
              ++v30;
              if (*(void *)(a12 + 8 * v24)) {
                goto LABEL_20;
              }
            }
          }
          uint64_t v24 = v30;
        }
      }
LABEL_20:
      OUTLINED_FUNCTION_49();
    }
    swift_release();
    OUTLINED_FUNCTION_58();
LABEL_36:
    if (a14)
    {
      OUTLINED_FUNCTION_14_1();
      if (v28 != v29) {
        OUTLINED_FUNCTION_26_0(v41);
      }
      else {
        OUTLINED_FUNCTION_19_1(v41);
      }
      *(void *)(v15 + 16) = 0;
    }
  }
  swift_release();
  *(void *)unint64_t v14 = v16;
  OUTLINED_FUNCTION_52();
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  static _DictionaryStorage.resize(original:capacity:move:)();
  OUTLINED_FUNCTION_40();
  if (v7)
  {
    OUTLINED_FUNCTION_25_0();
    uint64_t v10 = v9 & v8;
    OUTLINED_FUNCTION_66();
    uint64_t v28 = v11;
    swift_retain();
    uint64_t v12 = 0;
    if (!v10) {
      goto LABEL_4;
    }
LABEL_3:
    for (v10 &= v10 - 1; ; uint64_t v10 = v16 & v15)
    {
      OUTLINED_FUNCTION_47();
      unint64_t v19 = (_OWORD *)(v18 + 32 * v17);
      if (a2)
      {
        outlined init with take of Any(v19, v30);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v19, (uint64_t)v30);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      Hasher._finalize()();
      OUTLINED_FUNCTION_18_1();
      if (v20)
      {
        OUTLINED_FUNCTION_10_1();
        while (1)
        {
          OUTLINED_FUNCTION_34();
          if (v20)
          {
            if (v22) {
              break;
            }
          }
          OUTLINED_FUNCTION_45();
          if (!v20)
          {
            OUTLINED_FUNCTION_9_1();
            goto LABEL_27;
          }
        }
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_11_1();
LABEL_27:
      OUTLINED_FUNCTION_7_1(v21);
      outlined init with take of Any(v30, (_OWORD *)(v24 + 32 * v23));
      OUTLINED_FUNCTION_17_1();
      if (v10) {
        goto LABEL_3;
      }
LABEL_4:
      uint64_t v13 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        goto LABEL_36;
      }
      if (v13 >= v28) {
        goto LABEL_29;
      }
      ++v12;
      if (!v29[v13])
      {
        uint64_t v12 = v13 + 1;
        if (v13 + 1 >= v28) {
          goto LABEL_29;
        }
        if (!v29[v12])
        {
          uint64_t v14 = v13 + 2;
          if (v14 >= v28)
          {
LABEL_29:
            swift_release();
            uint64_t v4 = v2;
            if (a2)
            {
              OUTLINED_FUNCTION_14_1();
              if (v26 != v27) {
                void *v29 = -1 << v25;
              }
              else {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v25 + 63) >> 6, v29);
              }
              *(void *)(v6 + 16) = 0;
            }
            break;
          }
          if (!v29[v14])
          {
            while (1)
            {
              uint64_t v12 = v14 + 1;
              if (__OFADD__(v14, 1)) {
                goto LABEL_37;
              }
              if (v12 >= v28) {
                goto LABEL_29;
              }
              ++v14;
              if (v29[v12]) {
                goto LABEL_15;
              }
            }
          }
          uint64_t v12 = v14;
        }
      }
LABEL_15:
      OUTLINED_FUNCTION_48();
    }
  }
  swift_release();
  *uint64_t v4 = v3;
}

uint64_t specialized UnsafeMutablePointer.assign(repeating:count:)(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

uint64_t outlined bridged method (ob) of @objc LNActionParameterMetadata.name.getter(void *a1)
{
  id v2 = [a1 name];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t type metadata accessor for LNActionParameterMetadata(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t outlined destroy of SiriSuggestions.DisplayRepresentable?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_35();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t _s18SiriSuggestionsKit6SignalCACSHAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_35();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of ActionParameter(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of ActionParameter(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *OUTLINED_FUNCTION_1_1@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t OUTLINED_FUNCTION_2_2()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_5_1()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_6_0()
{
  return v0;
}

void OUTLINED_FUNCTION_7_1(unint64_t a1@<X8>)
{
  *(void *)(v4 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
  uint64_t v5 = (void *)(*(void *)(v1 + 48) + 16 * a1);
  *uint64_t v5 = v3;
  v5[1] = v2;
}

uint64_t OUTLINED_FUNCTION_12_0()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

void OUTLINED_FUNCTION_17_1()
{
  ++*(void *)(v0 + 16);
}

uint64_t OUTLINED_FUNCTION_19_1@<X0>(uint64_t a1@<X8>)
{
  return specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(a1 + 63) >> 6, v1);
}

size_t OUTLINED_FUNCTION_20_1(void *a1)
{
  size_t result = _swift_stdlib_malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

void OUTLINED_FUNCTION_21_1(unint64_t a1@<X8>)
{
  *(void *)(v2 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
  uint64_t v5 = (void *)(*(void *)(v1 + 48) + 16 * a1);
  *uint64_t v5 = v4;
  v5[1] = v3;
}

void OUTLINED_FUNCTION_26_0(char a1@<W8>)
{
  *uint64_t v1 = -1 << a1;
}

uint64_t OUTLINED_FUNCTION_27_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_31()
{
  *(void *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_36()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_38(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t a7, void (*a8)(void))
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, a5, a6, a6, a8);
}

BOOL OUTLINED_FUNCTION_42(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_43(uint64_t a1)
{
  *(void *)(v1 - 168) = a1;
  return v1 - 168;
}

uint64_t OUTLINED_FUNCTION_44()
{
  uint64_t v3 = *(void *)(v1 - 184);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v0, (uint64_t *)(v1 - 128));
}

uint64_t OUTLINED_FUNCTION_46()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_53()
{
  return v0 + 32;
}

uint64_t OUTLINED_FUNCTION_56()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_57()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_59(uint64_t a1)
{
  *(void *)(v1 - 168) = a1;
  return v1 - 168;
}

uint64_t OUTLINED_FUNCTION_64()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_67()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_68()
{
  return swift_bridgeObjectRelease_n();
}

void *specialized Dictionary.init<A>(_:uniquingKeysWith:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t, void **))
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(a2);
    OUTLINED_FUNCTION_57_0();
    uint64_t v6 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v6 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v9 = v6;
  a3(a1, 1, &v9);
  uint64_t v7 = v9;
  if (v3) {
    swift_release();
  }
  return v7;
}

{
  uint64_t v3;
  void *v6;
  void *v7;
  void *v9;

  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(a2);
    uint64_t v6 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v6 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v9 = v6;
  a3(a1, 1, &v9);
  uint64_t v7 = v9;
  if (v3) {
    swift_release();
  }
  return v7;
}

uint64_t specialized LinkClientResolver.getAppIntentAction(from:for:withParameters:andSalientEntities:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[9] = a5;
  v6[10] = v5;
  v6[7] = a1;
  v6[8] = a4;
  return _swift_task_switch(specialized LinkClientResolver.getAppIntentAction(from:for:withParameters:andSalientEntities:), 0, 0);
}

uint64_t specialized LinkClientResolver.getAppIntentAction(from:for:withParameters:andSalientEntities:)()
{
  OUTLINED_FUNCTION_20_0();
  id v1 = [*(id *)(v0 + 56) identifier];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  *(void *)(v0 + 88) = v2;
  *(void *)(v0 + 96) = v4;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized LinkClientResolver.getParameters(for:withParameters:andSalientEntities:)
                                                          + async function pointer to specialized LinkClientResolver.getParameters(for:withParameters:andSalientEntities:));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v5;
  *uint64_t v5 = v0;
  v5[1] = specialized LinkClientResolver.getAppIntentAction(from:for:withParameters:andSalientEntities:);
  uint64_t v6 = *(void *)(v0 + 72);
  uint64_t v8 = *(void *)(v0 + 56);
  uint64_t v7 = *(void *)(v0 + 64);
  return v10(v8, v7, v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_9_2();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 112) = v4;
  *(void *)(v2 + 120) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  os_log_type_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;

  char v27 = v0;
  if (v0[14])
  {
    if (one-time initialization token for appIntentsSuggestions != -1) {
      swift_once();
    }
    id v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.appIntentsSuggestions);
    swift_bridgeObjectRetain_n();
    OUTLINED_FUNCTION_24_1();
    uint64_t v2 = (void *)Logger.logObject.getter();
    uint64_t v3 = static os_log_type_t.info.getter();
    uint64_t v4 = OUTLINED_FUNCTION_42(v3);
    uint64_t v5 = v0[12];
    if (v4)
    {
      uint64_t v25 = v0[11];
      uint64_t v6 = OUTLINED_FUNCTION_57();
      char v26 = OUTLINED_FUNCTION_23_0();
      *(_DWORD *)uint64_t v6 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v7 = Dictionary.description.getter();
      uint64_t v9 = v8;
      swift_bridgeObjectRelease();
      v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_12_1();
      *(_WORD *)(v6 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v5, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_45_0(&dword_0, v10, v11, "Got parameters: %s for %s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_10();
    }
    else
    {
      OUTLINED_FUNCTION_12_1();
      OUTLINED_FUNCTION_67();
    }

    char v20 = v0[14];
    unint64_t v21 = v0[11];
    char v22 = v0[12];
  }
  else
  {
    if (one-time initialization token for appIntentsSuggestions != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.appIntentsSuggestions);
    swift_bridgeObjectRetain();
    uint64_t v13 = Logger.logObject.getter();
    uint64_t v14 = static os_log_type_t.error.getter();
    uint64_t v15 = OUTLINED_FUNCTION_42(v14);
    uint64_t v16 = v0[12];
    if (v15)
    {
      uint64_t v17 = v0[11];
      uint64_t v18 = (_DWORD *)OUTLINED_FUNCTION_8_2();
      char v26 = OUTLINED_FUNCTION_64();
      void *v18 = 136315138;
      swift_bridgeObjectRetain();
      v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v16, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_13_1(&dword_0, v13, v19, "Not all mandatory parameters for: %s could be determined");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_10();
    }
    else
    {
      OUTLINED_FUNCTION_27_1();
    }

    OUTLINED_FUNCTION_11_0();
  }
  uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  return v23(v21, v22, v20);
}

{
  void *v0;
  os_log_type_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;

  uint64_t v14 = v0;
  if (one-time initialization token for appIntentsSuggestions != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.appIntentsSuggestions);
  swift_errorRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.error.getter();
  uint64_t v5 = OUTLINED_FUNCTION_42(v4);
  uint64_t v6 = v0[12];
  if (v5)
  {
    uint64_t v12 = v0[11];
    uint64_t v7 = OUTLINED_FUNCTION_57();
    uint64_t v8 = (void *)swift_slowAlloc();
    uint64_t v13 = OUTLINED_FUNCTION_64();
    *(_DWORD *)uint64_t v7 = 138412546;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v7 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v6, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v3, v1, "Unable to fetch parameter info: %@ for: %s", (uint8_t *)v7, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_10();
    swift_arrayDestroy();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_10();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    OUTLINED_FUNCTION_27_1();
  }
  OUTLINED_FUNCTION_11_0();
  return v10();
}

uint64_t specialized LinkClientResolver.getParameters(for:withParameters:andSalientEntities:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[87] = a3;
  v4[86] = a2;
  v4[85] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  v4[88] = v5;
  v4[89] = *(void *)(v5 - 8);
  v4[90] = swift_task_alloc();
  v4[80] = v3;
  return _swift_task_switch(specialized LinkClientResolver.getParameters(for:withParameters:andSalientEntities:), 0, 0);
}

uint64_t specialized LinkClientResolver.getParameters(for:withParameters:andSalientEntities:)()
{
  uint64_t v128 = v0;
  id v1 = (void *)(v0 + 664);
  long long v119 = *(_OWORD *)(v0 + 688);
  id v2 = [*(id *)(v0 + 680) parameters];
  type metadata accessor for LNActionParameterMetadata(0, &lazy cache variable for type metadata for LNActionParameterMetadata);
  OUTLINED_FUNCTION_57_0();
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v4 = swift_task_alloc();
  *(void *)(v4 + 16) = v0 + 640;
  *(_OWORD *)(v4 + 24) = v119;
  uint64_t v106 = v0 + 664;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo25LNActionParameterMetadataCG_AG_18SiriSuggestionsKit0gH0O20DisplayRepresentable_pSgts5NeverOTg5((void (*)(_OWORD *__return_ptr, id *))partial apply for specialized closure #1 in LinkClientResolver.getParameters(for:withParameters:andSalientEntities:), v4, v3);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v7 = &_swiftEmptyArrayStorage;
  v123 = &_swiftEmptyArrayStorage;
  unint64_t v8 = *(void *)(v6 + 16);
  swift_bridgeObjectRetain();
  uint64_t v116 = v6;
  v118 = (void *)v0;
  unint64_t v120 = v8;
  if (v8)
  {
    unint64_t v8 = 0;
    uint64_t v9 = (long long *)(v0 + 128);
    uint64_t v10 = v6 + 32;
    uint64_t v108 = v0 + 184;
    uint64_t v11 = v0 + 136;
    uint64_t v111 = v0 + 232;
    uint64_t v114 = v0 + 224;
    uint64_t v12 = &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?);
    while (v8 < *(void *)(v6 + 16))
    {
      outlined init with copy of IntentType?(v10, (uint64_t)v9, &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
      uint64_t v13 = (void *)v118[16];
      v118[22] = v13;
      outlined init with copy of IntentType?(v11, v108, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
      uint64_t v4 = (uint64_t)[v13 isOptional];
      outlined destroy of AppIdDetails?(v108, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
      id v1 = (void *)v118[16];
      v118[28] = v1;
      outlined init with copy of IntentType?(v11, v111, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
      uint64_t v14 = v118[32];
      id v15 = v1;
      outlined destroy of AppIdDetails?(v114, &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
      if ((v4 & 1) != 0 || v14)
      {
        outlined destroy of AppIdDetails?((uint64_t)v9, &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
      }
      else
      {
        long long v16 = v9[1];
        long long v124 = *v9;
        long long v125 = v16;
        long long v126 = v9[2];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_36_0();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v7 = v123;
        }
        unint64_t v17 = v7[2];
        id v1 = (void *)(v17 + 1);
        if (v17 >= v7[3] >> 1)
        {
          uint64_t v4 = (uint64_t)&v123;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v7 = v123;
        }
        long long v7[2] = v1;
        uint64_t v18 = &v7[6 * v17];
        long long v19 = v124;
        long long v20 = v126;
        v18[3] = v125;
        _OWORD v18[4] = v20;
        v18[2] = v19;
      }
      ++v8;
      v10 += 48;
      uint64_t v6 = v116;
      if (v120 == v8) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_55:
    swift_once();
LABEL_15:
    OUTLINED_FUNCTION_49_0();
    uint64_t v21 = __swift_project_value_buffer(v6, (uint64_t)static Logger.appIntentsSuggestions);
    uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    unint64_t v22 = v8 + 16;
    v23(v4, v21, v6);
    id v24 = v1;
    swift_retain();
    uint64_t v25 = Logger.logObject.getter();
    uint64_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, (os_log_type_t)v26))
    {
      os_log_type_t v109 = v26;
      char v27 = (void *)v12[85];
      uint64_t v28 = OUTLINED_FUNCTION_57();
      uint64_t v122 = OUTLINED_FUNCTION_23_0();
      *(_DWORD *)uint64_t v28 = 136315394;
      id v29 = [v27 identifier];
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v32 = v31;

      v12[82] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, &v122);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      v112 = (uint8_t *)v28;
      *(_WORD *)(v28 + 12) = 2080;
      uint64_t v33 = *(void *)(v114 + 16);
      uint64_t v34 = &_swiftEmptyArrayStorage;
      if (v33)
      {
        v107 = v25;
        uint64_t v35 = (void **)(v12 + 40);
        v123 = &_swiftEmptyArrayStorage;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v36 = v114 + 32;
        uint64_t v121 = (uint64_t)(v12 + 47);
        uint64_t v117 = (uint64_t)(v12 + 41);
        uint64_t v37 = (void **)(v12 + 46);
        do
        {
          outlined init with copy of IntentType?(v36, (uint64_t)v35, &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
          *(void *)&long long v124 = 0;
          *((void *)&v124 + 1) = 0xE000000000000000;
          char v38 = *v35;
          *uint64_t v37 = *v35;
          outlined init with copy of IntentType?(v117, v121, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
          uint64_t v39 = outlined bridged method (ob) of @objc LNActionParameterMetadata.name.getter(v38);
          if (v40) {
            uint64_t v41 = v39;
          }
          else {
            uint64_t v41 = 0x656D616E5F6F6E3CLL;
          }
          if (v40) {
            uint64_t v42 = v40;
          }
          else {
            uint64_t v42 = (void *)0xE90000000000003ELL;
          }
          outlined destroy of AppIdDetails?(v121, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
          v43._uint64_t countAndFlagsBits = v41;
          v43._object = v42;
          String.append(_:)(v43);
          swift_bridgeObjectRelease();
          long long v44 = v124;
          outlined destroy of AppIdDetails?((uint64_t)v35, &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
          uint64_t v34 = v123;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            OUTLINED_FUNCTION_36_0();
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v34 = v123;
          }
          unint64_t v45 = v34[2];
          if (v45 >= v34[3] >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v34 = v123;
          }
          v34[2] = v45 + 1;
          *(_OWORD *)&v34[2 * v45 + 4] = v44;
          v36 += 48;
          --v33;
        }
        while (v33);
        uint64_t v25 = v107;
      }
      uint64_t v87 = v118[90];
      uint64_t v88 = v118[89];
      uint64_t v89 = v118[88];
      v118[81] = v34;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v90 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v92 = v91;
      swift_bridgeObjectRelease();
      v118[84] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v92, &v122);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_0, v25, v109, "We have not been able to set all mandatory parameters for action %s. Missing parameters:\n %s", v112, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_10();

      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v87, v89);
    }
    else
    {
      OUTLINED_FUNCTION_49_0();

      swift_release_n();
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v26, v6);
    }
    goto LABEL_51;
  }
LABEL_13:
  swift_bridgeObjectRelease();
  if (v7[2])
  {
    uint64_t v114 = (uint64_t)v7;
    swift_bridgeObjectRelease();
    uint64_t v12 = v118;
    if (one-time initialization token for appIntentsSuggestions == -1) {
      goto LABEL_15;
    }
    goto LABEL_55;
  }
  swift_release();
  uint64_t v46 = v118;
  if (v120)
  {
    v113 = v118 + 10;
    v115 = (long long *)(v118 + 2);
    uint64_t v47 = (uint64_t)(v118 + 64);
    uint64_t v48 = (long long *)(v118 + 70);
    uint64_t v102 = (uint64_t)(v118 + 75);
    long long v103 = v118 + 34;
    uint64_t v49 = v6 + 32;
    uint64_t v104 = (uint64_t)(v118 + 65);
    uint64_t v105 = (uint64_t)(v118 + 52);
    uint64_t v50 = (uint64_t)(v118 + 53);
    uint64_t v110 = (uint64_t)(v118 + 35);
    uint64_t v98 = (uint64_t)(v118 + 4);
    uint64_t v99 = (uint64_t)(v118 + 11);
    uint64_t v97 = (uint64_t)(v118 + 59);
    swift_bridgeObjectRetain();
    uint64_t v51 = &_swiftEmptyArrayStorage;
    uint64_t v100 = (uint64_t)(v118 + 70);
    uint64_t v101 = (uint64_t)(v118 + 64);
    do
    {
      outlined init with copy of IntentType?(v49, v47, &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
      long long v52 = (void *)v46[64];
      v46[52] = v52;
      outlined init with copy of IntentType?(v104, v50, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
      uint64_t v53 = outlined init with copy of IntentType?(v104, (uint64_t)v48, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
      if (v46[73])
      {
        uint64_t v106 = (uint64_t)v51;
        uint64_t v61 = v102;
        outlined init with take of LinkDialogIdProvider(v48, v102);
        *long long v103 = v52;
        outlined init with copy of IntentType?(v50, v110, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
        id v62 = v52;
        uint64_t v63 = outlined bridged method (ob) of @objc LNActionParameterMetadata.name.getter(v62);
        uint64_t v65 = v64;
        void *v113 = v62;
        uint64_t v66 = outlined init with copy of IntentType?(v50, v99, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
        if (v65)
        {
          v118[2] = v63;
          v118[3] = v65;
          _s25SiriLinkSuggestionsPlugin0B6Client_pWOcTm_0(v102, v98);
          v118[58] = v62;
          outlined init with copy of IntentType?(v99, v97, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
          v118[9] = v62;
          id v74 = v62;
          swift_bridgeObjectRetain();
          outlined destroy of AppIdDetails?(v97, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
          swift_bridgeObjectRelease();
        }
        else
        {
          OUTLINED_FUNCTION_48_0(v66, v67, v68, v69, v70, v71, v72, v73, v96, v97, v98, v99, v100, v101, v102, (uint64_t)v103, v104, v105, v106,
            v110,
            (uint64_t)v113,
            v115);
          id v76 = v62;
        }
        outlined destroy of AppIdDetails?((uint64_t)v113, &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
        outlined destroy of AppIdDetails?(v110, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
        __swift_destroy_boxed_opaque_existential_1(v61);
        uint64_t v48 = (long long *)v100;
        uint64_t v47 = v101;
        uint64_t v46 = v118;
        uint64_t v51 = (void *)v106;
      }
      else
      {
        OUTLINED_FUNCTION_48_0(v53, v54, v55, v56, v57, v58, v59, v60, v96, v97, v98, v99, v100, v101, v102, (uint64_t)v103, v104, v105, v106,
          v110,
          (uint64_t)v113,
          v115);
        id v75 = v52;
      }
      outlined destroy of AppIdDetails?(v105, &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
      outlined destroy of AppIdDetails?(v47, &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
      if (v46[3])
      {
        long long v77 = v115[1];
        long long v124 = *v115;
        long long v125 = v77;
        long long v78 = v115[3];
        long long v126 = v115[2];
        long long v127 = v78;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v51 = v85;
        }
        unint64_t v80 = v51[2];
        unint64_t v79 = v51[3];
        if (v80 >= v79 >> 1)
        {
          OUTLINED_FUNCTION_51_0(v79);
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v51 = v86;
        }
        v51[2] = v80 + 1;
        uint64_t v81 = &v51[8 * v80];
        long long v82 = v124;
        long long v83 = v125;
        long long v84 = v127;
        v81[4] = v126;
        v81[5] = v84;
        v81[2] = v82;
        long long v81[3] = v83;
      }
      else
      {
        outlined destroy of AppIdDetails?((uint64_t)v115, &demangling cache variable for type metadata for (String, ActionParameter)?);
      }
      v49 += 48;
      --v120;
    }
    while (v120);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v51 = &_swiftEmptyArrayStorage;
  }
  specialized Dictionary.init<A>(uniqueKeysWithValues:)((uint64_t)v51);
LABEL_51:
  swift_task_dealloc();
  uint64_t v93 = OUTLINED_FUNCTION_53_0();
  return v94(v93);
}

void specialized closure #1 in LinkClientResolver.getParameters(for:withParameters:andSalientEntities:)(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  *a4 = a1;
  specialized LinkClientResolver.getParameter(for:withParameters:andSalientEntities:)(a1, a2, a3, (uint64_t)(a4 + 1));
}

void specialized LinkClientResolver.getParameter(for:withParameters:andSalientEntities:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v73 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RetrievedContext?);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for RetrievedContext();
  Class isa = v10[-1].isa;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v69 = (char *)v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v71 = (char *)v60 - v15;
  __chkstk_darwin(v14);
  unint64_t v17 = (char *)v60 - v16;
  id v18 = [a1 name];
  Class v70 = isa;
  if (v18)
  {
    long long v19 = v18;
    uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;
  }
  else
  {
    uint64_t v72 = 0;
    uint64_t v21 = 0;
  }
  unint64_t v22 = [a1 valueType];
  if (!v21)
  {
    if (one-time initialization token for appIntentsSuggestions != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.appIntentsSuggestions);
    id v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl(&dword_0, v24, v25, "Unknown parameter name", v26, 2u);
      swift_slowDealloc();
      char v27 = v22;
    }
    else
    {
      char v27 = v24;
      id v24 = v22;
    }

    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.getter(v72, v21, a2, (uint64_t)&v74);
  swift_bridgeObjectRelease();
  if (v75)
  {
    swift_bridgeObjectRelease();

    outlined init with take of LinkDialogIdProvider(&v74, (uint64_t)v76);
    outlined init with take of LinkDialogIdProvider(v76, v73);
    return;
  }
  outlined destroy of AppIdDetails?((uint64_t)&v74, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
  id v28 = [v22 description];
  uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v30 = v29;

  if (one-time initialization token for appIntentsSuggestions != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  uint64_t v32 = __swift_project_value_buffer(v31, (uint64_t)static Logger.appIntentsSuggestions);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v66 = v32;
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  uint64_t v67 = v33;
  LODWORD(v63) = v34;
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = swift_slowAlloc();
    uint64_t v61 = swift_slowAlloc();
    *(void *)&v76[0] = v61;
    *(_DWORD *)uint64_t v35 = 136315650;
    uint64_t v64 = v17;
    swift_bridgeObjectRetain();
    *(void *)&long long v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v21, (uint64_t *)v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_log_t v62 = v10;
    *(_WORD *)(v35 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v36 = v68;
    *(void *)&long long v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v30, (uint64_t *)v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v35 + 22) = 2080;
    v60[1] = v35 + 24;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RetrievedContext]);
    uint64_t v37 = Dictionary.Keys.description.getter();
    uint64_t v65 = v22;
    uint64_t v38 = v37;
    unint64_t v40 = v39;
    swift_bridgeObjectRelease();
    unint64_t v17 = v64;
    *(void *)&long long v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, (uint64_t *)v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v10 = v62;
    swift_bridgeObjectRelease();
    uint64_t v41 = v67;
    _os_log_impl(&dword_0, v67, (os_log_type_t)v63, "determining parater - %s paramType - %s from andSalientEntities Keys - %s", (uint8_t *)v35, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v22 = v65;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t v36 = v68;
  }
  swift_bridgeObjectRetain();
  uint64_t v43 = specialized Dictionary.subscript.getter(v36, v30, a3);
  swift_bridgeObjectRelease();
  uint64_t v44 = v36;
  if (!v43)
  {
LABEL_23:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v24 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v24, v45))
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      goto LABEL_18;
    }
    uint64_t v46 = swift_slowAlloc();
    *(void *)&v76[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v46 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)&long long v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v21, (uint64_t *)v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v46 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)&long long v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v30, (uint64_t *)v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v24, v45, "No parameter available to set for %s, of type: %s", (uint8_t *)v46, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

LABEL_17:
LABEL_18:
    uint64_t v42 = (_OWORD *)v73;
    *(void *)(v73 + 32) = 0;
    _OWORD *v42 = 0u;
    v42[1] = 0u;
    return;
  }
  *(void *)&v76[0] = v43;
  specialized MutableCollection<>.shuffle<A>(using:)();
  specialized Collection.first.getter(*(uint64_t *)&v76[0], (uint64_t)v9);
  swift_release();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, (uint64_t)v10) == 1)
  {
    outlined destroy of AppIdDetails?((uint64_t)v9, &demangling cache variable for type metadata for RetrievedContext?);
    goto LABEL_23;
  }
  uint64_t v65 = v22;
  Class v47 = v70;
  uint64_t v67 = *((void *)v70 + 4);
  ((void (*)(char *, char *, NSObject *))v67)(v17, v9, v10);
  uint64_t v48 = (void (*)(char *))*((void *)v47 + 2);
  uint64_t v49 = v71;
  uint64_t v64 = v17;
  v48(v71);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.debug.getter();
  LODWORD(v66) = v51;
  if (os_log_type_enabled(v50, v51))
  {
    uint64_t v52 = swift_slowAlloc();
    os_log_t v62 = v50;
    uint64_t v53 = v52;
    uint64_t v63 = swift_slowAlloc();
    *(void *)&v76[0] = v63;
    *(_DWORD *)uint64_t v53 = 136315650;
    swift_bridgeObjectRetain();
    *(void *)&long long v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v21, (uint64_t *)v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v53 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)&long long v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v30, (uint64_t *)v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v53 + 22) = 2080;
    uint64_t v54 = v71;
    ((void (*)(char *, char *, NSObject *))v48)(v69, v71, v10);
    uint64_t v55 = String.init<A>(describing:)();
    *(void *)&long long v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, (uint64_t *)v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*((void (**)(char *, NSObject *))v47 + 1))(v54, v10);
    os_log_t v57 = v62;
    _os_log_impl(&dword_0, v62, (os_log_type_t)v66, "Setting parameter %s, of type: %s to %s using salient entities", (uint8_t *)v53, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*((void (**)(char *, NSObject *))v47 + 1))(v49, v10);
  }
  uint64_t v58 = (uint64_t *)v73;
  *(void *)(v73 + 24) = v10;
  v58[4] = lazy protocol witness table accessor for type MetaDataSourcedAppIntentResolver and conformance MetaDataSourcedAppIntentResolver(&lazy protocol witness table cache variable for type RetrievedContext and conformance RetrievedContext, 255, (void (*)(uint64_t))&type metadata accessor for RetrievedContext);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v58);
  ((void (*)(uint64_t *, char *, NSObject *))v67)(boxed_opaque_existential_1, v64, v10);
}

void specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  specialized _NativeDictionary.makeIterator()(v28);
  uint64_t v22 = v28[1];
  int64_t v6 = v28[3];
  unint64_t v7 = v28[4];
  int64_t v23 = (unint64_t)(v28[2] + 64) >> 6;
  uint64_t v24 = v28[0];
  swift_bridgeObjectRetain();
  uint64_t v8 = &_swiftEmptyArrayStorage;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v6 << 6);
      goto LABEL_15;
    }
    int64_t v11 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      break;
    }
    if (v11 >= v23) {
      goto LABEL_29;
    }
    unint64_t v12 = *(void *)(v22 + 8 * v11);
    if (!v12)
    {
      int64_t v13 = v6 + 2;
      if (v6 + 2 >= v23) {
        goto LABEL_29;
      }
      unint64_t v12 = *(void *)(v22 + 8 * v13);
      if (v12) {
        goto LABEL_13;
      }
      int64_t v13 = v6 + 3;
      if (v6 + 3 >= v23) {
        goto LABEL_29;
      }
      unint64_t v12 = *(void *)(v22 + 8 * v13);
      if (v12) {
        goto LABEL_13;
      }
      int64_t v13 = v6 + 4;
      if (v6 + 4 >= v23) {
        goto LABEL_29;
      }
      unint64_t v12 = *(void *)(v22 + 8 * v13);
      if (v12)
      {
LABEL_13:
        int64_t v11 = v13;
      }
      else
      {
        int64_t v11 = v6 + 5;
        if (v6 + 5 >= v23) {
          goto LABEL_29;
        }
        unint64_t v12 = *(void *)(v22 + 8 * v11);
        if (!v12)
        {
          int64_t v19 = v6 + 6;
          while (v19 < v23)
          {
            unint64_t v12 = *(void *)(v22 + 8 * v19++);
            if (v12)
            {
              int64_t v11 = v19 - 1;
              goto LABEL_14;
            }
          }
LABEL_29:
          swift_bridgeObjectRelease();
          swift_release();
          return;
        }
      }
    }
LABEL_14:
    unint64_t v7 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v11 << 6);
    int64_t v6 = v11;
LABEL_15:
    unint64_t v29 = *(void **)(*(void *)(v24 + 56) + 8 * v10);
    uint64_t v14 = v29;
    closure #2 in MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:)(&v29, a2, a3, &v26);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();

      return;
    }

    if ((void)v27)
    {
      long long v25 = v27;
      uint64_t v15 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v8 = v20;
      }
      unint64_t v16 = v8[2];
      long long v17 = v25;
      if (v16 >= v8[3] >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        long long v17 = v25;
        uint64_t v8 = v21;
      }
      long long v8[2] = v16 + 1;
      id v18 = (char *)&v8[3 * v16];
      *((void *)v18 + 4) = v15;
      *(_OWORD *)(v18 + 40) = v17;
    }
  }
  __break(1u);
}

uint64_t MetaDataSourcedAppIntentResolver.linkClient.getter@<X0>(uint64_t a1@<X8>)
{
  return _s25SiriLinkSuggestionsPlugin0B6Client_pWOcTm_0(v1 + 16, a1);
}

uint64_t MetaDataSourcedAppIntentResolver.toolClient.getter@<X0>(uint64_t a1@<X8>)
{
  return _s25SiriLinkSuggestionsPlugin0B6Client_pWOcTm_0(v1 + 56, a1);
}

uint64_t MetaDataSourcedAppIntentResolver.resolverTypeOperand.getter()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetaDataSourcedAppIntentResolver.__allocating_init(linkClient:toolClient:)(long long *a1, long long *a2)
{
  uint64_t v4 = swift_allocObject();
  MetaDataSourcedAppIntentResolver.init(linkClient:toolClient:)(a1, a2);
  return v4;
}

uint64_t MetaDataSourcedAppIntentResolver.init(linkClient:toolClient:)(long long *a1, long long *a2)
{
  *(void *)(v2 + 96) = 0xD000000000000017;
  *(void *)(v2 + 104) = 0x800000000004A590;
  outlined init with take of LinkDialogIdProvider(a1, v2 + 16);
  outlined init with take of LinkDialogIdProvider(a2, v2 + 56);
  return v2;
}

uint64_t static MetaDataSourcedAppIntentResolver.disruptsUserFlow(appIntentDetails:environmentSnapshot:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  __swift_project_boxed_opaque_existential_1(a4, a4[3]);
  valid = (void *)EnvironmentSnapshot.getValidOpenAppIds()();
  uint64_t v8 = valid;
  uint64_t v9 = valid[2];
  if (!v9) {
    goto LABEL_17;
  }
  BOOL v10 = valid[4] == a1 && valid[5] == a2;
  if (v10 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
LABEL_7:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (v9 == 1)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return ([a3 openAppWhenRun] & 1) != 0;
  }
  unint64_t v12 = v8 + 7;
  uint64_t v13 = 1;
  while (1)
  {
    uint64_t v14 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (*(v12 - 1) == a1 && *v12 == a2) {
      goto LABEL_7;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      goto LABEL_7;
    }
    v12 += 2;
    ++v13;
    if (v14 == v9) {
      goto LABEL_17;
    }
  }
  __break(1u);
  return result;
}

uint64_t MetaDataSourcedAppIntentResolver.getSuggestionDialogFromTool(toolId:parametersToolValue:siriLocale:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[8] = a3;
  v4[9] = v3;
  v4[6] = a1;
  v4[7] = a2;
  return OUTLINED_FUNCTION_7((uint64_t)MetaDataSourcedAppIntentResolver.getSuggestionDialogFromTool(toolId:parametersToolValue:siriLocale:));
}

uint64_t MetaDataSourcedAppIntentResolver.getSuggestionDialogFromTool(toolId:parametersToolValue:siriLocale:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_37_0();
  a21 = v23;
  a22 = v24;
  a20 = v22;
  if (one-time initialization token for appIntentsSuggestions != -1) {
    swift_once();
  }
  uint64_t v25 = v22[7];
  uint64_t v26 = type metadata accessor for Logger();
  v22[10] = __swift_project_value_buffer(v26, (uint64_t)static Logger.appIntentsSuggestions);
  OUTLINED_FUNCTION_32();
  swift_bridgeObjectRetain_n();
  long long v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  BOOL v29 = OUTLINED_FUNCTION_10_2(v28);
  unint64_t v30 = v22[7];
  if (v29)
  {
    uint64_t v31 = v22[6];
    uint64_t v32 = OUTLINED_FUNCTION_57();
    a11 = OUTLINED_FUNCTION_23_0();
    *(_DWORD *)uint64_t v32 = 136315394;
    swift_bridgeObjectRetain();
    v22[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v30, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v32 + 12) = 2080;
    type metadata accessor for TypedValue();
    swift_bridgeObjectRetain();
    uint64_t v33 = Dictionary.description.getter();
    unint64_t v35 = v34;
    swift_bridgeObjectRelease();
    v22[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_25_1();
    _os_log_impl(&dword_0, v27, (os_log_type_t)v25, "Fetching parameter summary for tool - %s with parametersToolValue - %s", (uint8_t *)v32, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_10();
  }
  else
  {
    OUTLINED_FUNCTION_29_1();
    OUTLINED_FUNCTION_25_1();
  }

  uint64_t v36 = (void *)v22[9];
  uint64_t v37 = v36[11];
  OUTLINED_FUNCTION_52_0(v36 + 7, v36[10]);
  uint64_t v48 = *(void *)(v37 + 8) + **(int **)(v37 + 8);
  uint64_t v38 = (void *)swift_task_alloc();
  v22[11] = v38;
  *uint64_t v38 = v22;
  v38[1] = MetaDataSourcedAppIntentResolver.getSuggestionDialogFromTool(toolId:parametersToolValue:siriLocale:);
  OUTLINED_FUNCTION_16_1();
  return v45(v39, v40, v41, v42, v43, v44, v45, v46, v48, v37 + 8, a11, a12, a13, a14);
}

{
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  OUTLINED_FUNCTION_37_0();
  a21 = v23;
  a22 = v24;
  a20 = v22;
  uint64_t v25 = v22[13];
  if (v25)
  {
    uint64_t v26 = v22[14];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    long long v27 = (void *)Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_42(v28))
    {
      BOOL v29 = v22[12];
      unint64_t v30 = OUTLINED_FUNCTION_57();
      a10 = OUTLINED_FUNCTION_23_0();
      a11 = a10;
      *(_DWORD *)unint64_t v30 = 136315394;
      swift_bridgeObjectRetain();
      v22[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v25, &a11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_12_1();
      *(_WORD *)(v30 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v31 = Dictionary.description.getter();
      uint64_t v33 = v32;
      swift_bridgeObjectRelease();
      v22[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, &a11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_19_2();
      OUTLINED_FUNCTION_12_1();
      OUTLINED_FUNCTION_45_0(&dword_0, v34, v35, "tool parameter summary - phrase template - %s and params - %s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_10();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    static PhraseUtils.getHydratedPhrase(phraseTemplate:parameters:)((void **)v22[12], v25, v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v36 = (void *)Logger.logObject.getter();
    uint64_t v37 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_10_2(v37))
    {
      *(_WORD *)OUTLINED_FUNCTION_16_0() = 0;
      OUTLINED_FUNCTION_43_0(&dword_0, v38, v39, "failed to Create toolInvocation");
      OUTLINED_FUNCTION_10();
    }
  }
  OUTLINED_FUNCTION_55_0();
  OUTLINED_FUNCTION_16_1();
  return v43(v40, v41, v42, v43, v44, v45, v46, v47, a9, a10, a11, a12, a13, a14);
}

uint64_t MetaDataSourcedAppIntentResolver.getSuggestionDialogFromTool(toolId:parametersToolValue:siriLocale:)()
{
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_9_2();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  v2[12] = v4;
  v2[13] = v5;
  v2[14] = v6;
  swift_task_dealloc();
  if (v0) {
    swift_errorRelease();
  }
  OUTLINED_FUNCTION_11_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void, void);
  uint64_t v6;

  OUTLINED_FUNCTION_20_0();
  uint64_t v0 = (void *)Logger.logObject.getter();
  uint64_t v1 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_10_2(v1))
  {
    *(_WORD *)OUTLINED_FUNCTION_16_0() = 0;
    OUTLINED_FUNCTION_43_0(&dword_0, v2, v3, "failed to Create toolInvocation");
    OUTLINED_FUNCTION_10();
  }

  OUTLINED_FUNCTION_55_0();
  return v4(0, 0);
}

void MetaDataSourcedAppIntentResolver.getSuggestionDialogFromAssistantIntentPhrase(appIntentAction:details:siriLocale:)()
{
  OUTLINED_FUNCTION_28_1();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  unint64_t v75 = v6;
  uint64_t v71 = v7;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_4_0();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_14_0();
  uint64_t v18 = v17 - v16;
  id v19 = [v5 identifier];
  uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v21 = v20;

  if (one-time initialization token for appIntentsSuggestions != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.appIntentsSuggestions);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  uint64_t v74 = v3;
  v23(v18, v3, v12);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  int v26 = v25;
  uint64_t v73 = v9;
  if (os_log_type_enabled(v24, v25))
  {
    Class v70 = v1;
    uint64_t v27 = OUTLINED_FUNCTION_64();
    uint64_t v69 = swift_slowAlloc();
    v77[0] = v69;
    *(_DWORD *)uint64_t v27 = 136315650;
    uint64_t v65 = v14;
    uint64_t v66 = v12;
    uint64_t v63 = v18;
    uint64_t v64 = v11;
    int v68 = v26;
    unint64_t v28 = v21;
    os_log_t v67 = v24;
    swift_bridgeObjectRetain();
    uint64_t v29 = v71;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v75, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v27 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v21, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v30 = swift_bridgeObjectRelease_n();
    *(_WORD *)(v27 + 22) = 2080;
    uint64_t v62 = v27 + 24;
    __chkstk_darwin(v30);
    *(&v62 - 2) = v63;
    specialized _NativeDictionary.mapValues<A>(_:)((void (*)(void *__return_ptr, unsigned char *))partial apply for closure #1 in implicit closure #3 in MetaDataSourcedAppIntentResolver.getSuggestionDialogFromAssistantIntentPhrase(appIntentAction:details:siriLocale:), (uint64_t)(&v62 - 4), v9);
    uint64_t v31 = Dictionary.description.getter();
    unint64_t v33 = v32;
    swift_release();
    uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    uint64_t v34 = v72;
    OUTLINED_FUNCTION_17_2();
    v36(v35);
    os_log_t v37 = v67;
    _os_log_impl(&dword_0, v67, (os_log_type_t)v68, "Fetching assistant intent phrase - for bundleIdentifier %s and actionIdentifier - %s appIntentAction.parameters - %s", (uint8_t *)v27, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_10();
    uint64_t v1 = v70;
    OUTLINED_FUNCTION_10();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_67();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v18, v12);

    uint64_t v29 = v71;
    uint64_t v34 = v72;
    unint64_t v28 = v21;
  }
  uint64_t v38 = v1[5];
  uint64_t v39 = v1[6];
  OUTLINED_FUNCTION_52_0(v1 + 2, v38);
  uint64_t v40 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v39 + 64))(v29, v75, v34, v28, v38, v39);
  swift_bridgeObjectRelease();
  uint64_t v71 = v40;
  uint64_t v41 = *(void *)(v40 + 16);
  if (v41)
  {
    uint64_t v72 = 0;
    unint64_t v75 = 0;
    uint64_t v42 = (uint64_t *)(v71 + 40);
    uint64_t v43 = -1;
    while (1)
    {
      uint64_t v44 = *(v42 - 1);
      uint64_t v45 = *v42;
      uint64_t v46 = one-time initialization token for variableNameRegex;
      swift_bridgeObjectRetain();
      if (v46 != -1) {
        swift_once();
      }
      Class v47 = (void *)static PhraseUtils.variableNameRegex;
      OUTLINED_FUNCTION_47_0();
      NSString v48 = String._bridgeToObjectiveC()();
      if ((v45 & 0x1000000000000000) != 0)
      {
        OUTLINED_FUNCTION_47_0();
        Swift::Int v49 = String.UTF16View._foreignCount()();
      }
      else
      {
        Swift::Int v49 = String.UTF16View._nativeGetOffset(for:)();
      }
      id v50 = objc_msgSend(v47, "matchesInString:options:range:", v48, 0, 0, v49, v62);

      type metadata accessor for LNActionParameterMetadata(0, (unint64_t *)&lazy cache variable for type metadata for NSTextCheckingResult);
      unint64_t v51 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      swift_bridgeObjectRetain();
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo20NSTextCheckingResultCG_SSs5NeverOTg5095_s25SiriLinkSuggestionsPlugin11PhraseUtilsO16getVariableNames14phraseTemplateSaySSGSS_tFZSSSo20deF6CXEfU_SSTf1cn_n(v51, v44, v45);
      uint64_t v53 = v52;
      uint64_t v54 = swift_bridgeObjectRelease();
      uint64_t v55 = *(void *)(v53 + 16);
      if (v43 >= v55) {
        break;
      }
      __chkstk_darwin(v54);
      *(&v62 - 2) = v74;
      uint64_t v56 = specialized Dictionary.compactMapValues<A>(_:)((void (*)(uint64_t *__return_ptr, _OWORD *))partial apply for closure #1 in static PhraseUtils.getHydratedPhrase(phraseTemplate:parameters:locale:));
      os_log_t v57 = (void **)OUTLINED_FUNCTION_47_0();
      uint64_t v59 = static PhraseUtils.getHydratedPhrase(phraseTemplate:parameters:)(v57, v58, v56);
      unint64_t v61 = v60;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v61)
      {
        uint64_t v43 = v55;
        uint64_t v72 = v59;
        unint64_t v75 = v61;
LABEL_16:
        swift_bridgeObjectRelease();
      }
      v42 += 2;
      if (!--v41) {
        goto LABEL_21;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v72 = 0;
  unint64_t v75 = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_35_0();
}

uint64_t closure #1 in implicit closure #3 in MetaDataSourcedAppIntentResolver.getSuggestionDialogFromAssistantIntentPhrase(appIntentAction:details:siriLocale:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  outlined init with copy of IntentType?(a1, (uint64_t)v7, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
  if (!v8)
  {
    outlined destroy of AppIdDetails?((uint64_t)v7, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
LABEL_5:
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v5 = 0xE400000000000000;
    uint64_t v3 = 1819047278;
    goto LABEL_6;
  }
  __swift_project_boxed_opaque_existential_1(v7, v8);
  uint64_t v3 = dispatch thunk of SiriSuggestions.DisplayRepresentable.getDisplay(for:)();
  unint64_t v5 = v4;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  if (!v5) {
    goto LABEL_5;
  }
LABEL_6:
  *a2 = v3;
  a2[1] = v5;
  return result;
}

uint64_t MetaDataSourcedAppIntentResolver.getSuggestionDialog(appIntentAction:details:siriLocale:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[10] = a7;
  v8[11] = v7;
  v8[8] = a5;
  v8[9] = a6;
  v8[6] = a3;
  v8[7] = a4;
  void v8[4] = a1;
  v8[5] = a2;
  return OUTLINED_FUNCTION_7((uint64_t)MetaDataSourcedAppIntentResolver.getSuggestionDialog(appIntentAction:details:siriLocale:));
}

uint64_t MetaDataSourcedAppIntentResolver.getSuggestionDialog(appIntentAction:details:siriLocale:)()
{
  uint64_t v24 = v0;
  uint64_t v1 = specialized Dictionary.compactMapValues<A>(_:)();
  v0[12] = v1;
  if (one-time initialization token for appIntentsSuggestions != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.appIntentsSuggestions);
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_24_1();
  swift_bridgeObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = OUTLINED_FUNCTION_57();
    uint64_t v22 = OUTLINED_FUNCTION_23_0();
    *(_DWORD *)uint64_t v5 = 136315394;
    type metadata accessor for TypedValue();
    swift_bridgeObjectRetain();
    uint64_t v6 = Dictionary.description.getter();
    unint64_t v8 = v7;
    swift_bridgeObjectRelease();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_19_2();
    *(_WORD *)(v5 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v9 = Dictionary.description.getter();
    unint64_t v11 = v10;
    swift_bridgeObjectRelease();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_25_1();
    _os_log_impl(&dword_0, v3, v4, "toolParameterValues count - %s and appIntentAction.parameters - %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_10();
  }
  else
  {
    OUTLINED_FUNCTION_19_2();
    OUTLINED_FUNCTION_27_1();
    OUTLINED_FUNCTION_25_1();
  }

  if (*(void *)(v1 + 16) == *(void *)(v0[6] + 16))
  {
    uint64_t v12 = v0[8];
    uint64_t v14 = v0[4];
    uint64_t v13 = (void *)v0[5];
    uint64_t v22 = v0[7];
    uint64_t v23 = v12;
    swift_bridgeObjectRetain();
    v15._uint64_t countAndFlagsBits = 46;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    swift_bridgeObjectRetain();
    v16._uint64_t countAndFlagsBits = v14;
    v16._object = v13;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    uint64_t v18 = v22;
    uint64_t v17 = v23;
    v0[13] = v23;
    id v19 = (void *)swift_task_alloc();
    v0[14] = v19;
    *id v19 = v0;
    v19[1] = MetaDataSourcedAppIntentResolver.getSuggestionDialog(appIntentAction:details:siriLocale:);
    return MetaDataSourcedAppIntentResolver.getSuggestionDialogFromTool(toolId:parametersToolValue:siriLocale:)(v18, v17, v1);
  }
  else
  {
    swift_bridgeObjectRelease();
    MetaDataSourcedAppIntentResolver.getSuggestionDialogFromAssistantIntentPhrase(appIntentAction:details:siriLocale:)();
    OUTLINED_FUNCTION_55_0();
    return v21();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v9;

  OUTLINED_FUNCTION_20_0();
  uint64_t v2 = v1;
  os_log_type_t v4 = v3;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = *v0;
  OUTLINED_FUNCTION_12();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_55_0();
  return v7(v4, v2);
}

uint64_t specialized Dictionary.compactMapValues<A>(_:)(void (*a1)(uint64_t *__return_ptr, _OWORD *))
{
  void (*v42)(uint64_t *__return_ptr, _OWORD *);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  long long v47;
  _OWORD v48[3];
  long long v49;
  _OWORD v50[3];
  long long v51;
  _OWORD v52[3];
  void *v53;
  void v54[2];
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _OWORD *v58;

  uint64_t v42 = a1;
  uint64_t v2 = &_swiftEmptyDictionarySingleton;
  uint64_t v53 = &_swiftEmptyDictionarySingleton;
  specialized _NativeDictionary.makeIterator()(v54);
  uint64_t v43 = v54[0];
  uint64_t v3 = v56;
  unint64_t v4 = v57;
  uint64_t v38 = v55;
  uint64_t v39 = (void *)((unint64_t)(v55 + 64) >> 6);
  uint64_t v40 = v54[1];
  uint64_t v41 = v52;
  uint64_t v58 = v50;
  uint64_t result = swift_bridgeObjectRetain();
  if (!v4) {
    goto LABEL_3;
  }
LABEL_2:
  uint64_t v6 = (v4 - 1) & v4;
  unint64_t v7 = __clz(__rbit64(v4)) | (v3 << 6);
  for (i = v3; ; unint64_t v7 = __clz(__rbit64(v9)) + (i << 6))
  {
    uint64_t v13 = (uint64_t *)(*(void *)(v43 + 48) + 16 * v7);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    outlined init with copy of ActionParameter(*(void *)(v43 + 56) + 48 * v7, (uint64_t)v41);
    *(void *)&unint64_t v51 = v15;
    *((void *)&v51 + 1) = v14;
    Swift::Int v49 = v51;
    v50[0] = v52[0];
    v50[1] = v52[1];
    v50[2] = v52[2];
    swift_bridgeObjectRetain();
    v42(&v45, v58);
    if (v1)
    {
      outlined destroy of AppIdDetails?((uint64_t)&v49, &demangling cache variable for type metadata for (key: String, value: ActionParameter));
      swift_release();
LABEL_41:
      outlined consume of [String : String].Iterator._Variant();
      return (uint64_t)v2;
    }
    uint64_t v22 = v46;
    if (!v46)
    {
      outlined destroy of AppIdDetails?((uint64_t)&v49, &demangling cache variable for type metadata for (key: String, value: ActionParameter));
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_32;
    }
    uint64_t v44 = v45;
    long long v23 = v49;
    Class v47 = v49;
    long long v24 = v58[1];
    v48[0] = *v58;
    v48[1] = v24;
    v48[2] = v58[2];
    unint64_t v25 = v2[2];
    if (v2[3] <= v25)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25 + 1, 1, v16, v17, v18, v19, v20, v21, v38, v39, v40, (uint64_t)v41, (int)v42, SBYTE4(v42));
      uint64_t v2 = v53;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    int v26 = (char *)(v2 + 8);
    uint64_t v27 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~v2[(v28 >> 6) + 8]) == 0) {
      break;
    }
    unint64_t v30 = __clz(__rbit64((-1 << v28) & ~v2[(v28 >> 6) + 8])) | v28 & 0x7FFFFFFFFFFFFFC0;
LABEL_31:
    *(void *)&v26[(v30 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v30;
    *(_OWORD *)(v2[6] + 16 * v30) = v23;
    uint64_t v35 = (void *)(v2[7] + 16 * v30);
    *uint64_t v35 = v44;
    v35[1] = v22;
    ++v2[2];
    uint64_t result = outlined destroy of ActionParameter((uint64_t)v48);
LABEL_32:
    uint64_t v3 = i;
    unint64_t v4 = v6;
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    uint64_t i = v3 + 1;
    if (__OFADD__(v3, 1)) {
      goto LABEL_43;
    }
    if (i >= (uint64_t)v39) {
      goto LABEL_41;
    }
    unint64_t v9 = *(void *)(v40 + 8 * i);
    if (!v9)
    {
      OUTLINED_FUNCTION_41_0();
      if (v10 == v11) {
        goto LABEL_41;
      }
      OUTLINED_FUNCTION_40_0();
      if (v9) {
        goto LABEL_15;
      }
      OUTLINED_FUNCTION_41_0();
      if (v10 == v11) {
        goto LABEL_41;
      }
      OUTLINED_FUNCTION_40_0();
      if (v9) {
        goto LABEL_15;
      }
      OUTLINED_FUNCTION_41_0();
      if (v10 == v11) {
        goto LABEL_41;
      }
      OUTLINED_FUNCTION_40_0();
      if (v9)
      {
LABEL_15:
        uint64_t i = v12;
      }
      else
      {
        uint64_t i = v3 + 5;
        if (v3 + 5 >= (uint64_t)v39) {
          goto LABEL_41;
        }
        unint64_t v9 = *(void *)(v40 + 8 * i);
        if (!v9)
        {
          while (1)
          {
            OUTLINED_FUNCTION_41_0();
            if (v10 == v11) {
              goto LABEL_41;
            }
            OUTLINED_FUNCTION_40_0();
            uint64_t v37 = v36 + 1;
            if (v9)
            {
              uint64_t i = v37 - 1;
              break;
            }
          }
        }
      }
    }
    uint64_t v6 = (v9 - 1) & v9;
  }
  char v31 = 0;
  unint64_t v32 = (unint64_t)(63 - v27) >> 6;
  while (++v29 != v32 || (v31 & 1) == 0)
  {
    BOOL v33 = v29 == v32;
    if (v29 == v32) {
      unint64_t v29 = 0;
    }
    v31 |= v33;
    uint64_t v34 = *(void *)&v26[8 * v29];
    if (v34 != -1)
    {
      unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
      goto LABEL_31;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.compactMapValues<A>(_:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TypedValue?);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v39 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for TypedValue();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v46 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v43 = (char *)&v39 - v7;
  uint64_t v58 = &_swiftEmptyDictionarySingleton;
  specialized _NativeDictionary.makeIterator()(v59);
  uint64_t v8 = v59[0];
  uint64_t v47 = v59[1];
  int64_t v63 = v61;
  unint64_t v9 = v62;
  uint64_t v39 = v60;
  int64_t v48 = (unint64_t)(v60 + 64) >> 6;
  Swift::Int v49 = v57;
  id v50 = v55;
  uint64_t v41 = v4;
  uint64_t v44 = &v53;
  uint64_t v45 = (void (**)(char *, char *, uint64_t))(v4 + 32);
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v42 = v3;
  for (i = v8; ; uint64_t v8 = i)
  {
    while (1)
    {
      if (v9)
      {
        unint64_t v11 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v12 = v11 | (v63 << 6);
      }
      else
      {
        int64_t v13 = v63 + 1;
        if (__OFADD__(v63, 1)) {
          goto LABEL_38;
        }
        if (v13 >= v48) {
          goto LABEL_36;
        }
        unint64_t v14 = *(void *)(v47 + 8 * v13);
        int64_t v15 = v63 + 1;
        if (!v14)
        {
          int64_t v15 = v63 + 2;
          if (v63 + 2 >= v48) {
            goto LABEL_36;
          }
          unint64_t v14 = *(void *)(v47 + 8 * v15);
          if (!v14)
          {
            int64_t v15 = v63 + 3;
            if (v63 + 3 >= v48) {
              goto LABEL_36;
            }
            unint64_t v14 = *(void *)(v47 + 8 * v15);
            if (!v14)
            {
              int64_t v15 = v63 + 4;
              if (v63 + 4 >= v48) {
                goto LABEL_36;
              }
              unint64_t v14 = *(void *)(v47 + 8 * v15);
              if (!v14)
              {
                int64_t v15 = v63 + 5;
                if (v63 + 5 >= v48) {
                  goto LABEL_36;
                }
                unint64_t v14 = *(void *)(v47 + 8 * v15);
                if (!v14)
                {
                  int64_t v16 = v63 + 6;
                  while (v16 < v48)
                  {
                    unint64_t v14 = *(void *)(v47 + 8 * v16++);
                    if (v14)
                    {
                      int64_t v15 = v16 - 1;
                      goto LABEL_19;
                    }
                  }
LABEL_36:
                  outlined consume of [String : String].Iterator._Variant();
                  return (uint64_t)v58;
                }
              }
            }
          }
        }
LABEL_19:
        unint64_t v9 = (v14 - 1) & v14;
        unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
        int64_t v63 = v15;
      }
      uint64_t v17 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v12);
      uint64_t v19 = *v17;
      uint64_t v18 = v17[1];
      outlined init with copy of ActionParameter(*(void *)(v8 + 56) + 48 * v12, (uint64_t)v49);
      *(void *)&long long v56 = v19;
      *((void *)&v56 + 1) = v18;
      long long v54 = v56;
      v55[0] = v57[0];
      v55[1] = v57[1];
      v55[2] = v57[2];
      outlined init with copy of IntentType?((uint64_t)v50, (uint64_t)v51, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
      uint64_t v20 = v51[3];
      swift_bridgeObjectRetain();
      if (v20) {
        break;
      }
      outlined destroy of AppIdDetails?((uint64_t)v51, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
      __swift_storeEnumTagSinglePayload((uint64_t)v2, 1, 1, v3);
LABEL_27:
      outlined destroy of AppIdDetails?((uint64_t)&v54, &demangling cache variable for type metadata for (key: String, value: ActionParameter));
      uint64_t result = outlined destroy of AppIdDetails?((uint64_t)v2, &demangling cache variable for type metadata for TypedValue?);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable);
    int v21 = swift_dynamicCast();
    __swift_storeEnumTagSinglePayload((uint64_t)v2, v21 ^ 1u, 1, v3);
    if (__swift_getEnumTagSinglePayload((uint64_t)v2, 1, v3) == 1) {
      goto LABEL_27;
    }
    uint64_t v22 = *v45;
    long long v23 = v43;
    (*v45)(v43, v2, v3);
    long long v24 = v54;
    long long v52 = v54;
    uint64_t v25 = (uint64_t)v50;
    long long v26 = v50[1];
    uint64_t v27 = (uint64_t)v44;
    *(_OWORD *)uint64_t v44 = *v50;
    *(_OWORD *)(v27 + 16) = v26;
    *(_OWORD *)(v27 + 32) = *(_OWORD *)(v25 + 32);
    v22(v46, v23, v3);
    unint64_t v28 = v58;
    unint64_t v29 = v58[2];
    if (v58[3] <= v29)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v29 + 1, 1);
      unint64_t v28 = v58;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v30 = v28 + 8;
    uint64_t v31 = -1 << *((unsigned char *)v28 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~v28[(v32 >> 6) + 8]) == 0) {
      break;
    }
    unint64_t v34 = __clz(__rbit64((-1 << v32) & ~v28[(v32 >> 6) + 8])) | v32 & 0x7FFFFFFFFFFFFFC0;
LABEL_35:
    *(void *)((char *)v30 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v34;
    *(_OWORD *)(v28[6] + 16 * v34) = v24;
    uint64_t v3 = v42;
    v22((char *)(v28[7] + *(void *)(v41 + 72) * v34), v46, v42);
    ++v28[2];
    uint64_t result = outlined destroy of ActionParameter((uint64_t)v44);
  }
  char v35 = 0;
  unint64_t v36 = (unint64_t)(63 - v31) >> 6;
  while (++v33 != v36 || (v35 & 1) == 0)
  {
    BOOL v37 = v33 == v36;
    if (v33 == v36) {
      unint64_t v33 = 0;
    }
    v35 |= v37;
    uint64_t v38 = v30[v33];
    if (v38 != -1)
    {
      unint64_t v34 = __clz(__rbit64(~v38)) + (v33 << 6);
      goto LABEL_35;
    }
  }
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:)()
{
  OUTLINED_FUNCTION_8();
  v1[39] = v2;
  v1[40] = v0;
  v1[38] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeoutBehaviour<AppIntentDetails, Any>?);
  OUTLINED_FUNCTION_54_0(v4);
  v1[41] = OUTLINED_FUNCTION_13_0();
  uint64_t v5 = type metadata accessor for AppIntentFilter.AppIntentParameter();
  v1[42] = v5;
  OUTLINED_FUNCTION_0_1(v5);
  v1[43] = v6;
  v1[44] = OUTLINED_FUNCTION_13_0();
  uint64_t v7 = type metadata accessor for Locale();
  v1[45] = v7;
  OUTLINED_FUNCTION_0_1(v7);
  v1[46] = v8;
  v1[47] = OUTLINED_FUNCTION_13_0();
  uint64_t v9 = type metadata accessor for Logger();
  v1[48] = v9;
  OUTLINED_FUNCTION_0_1(v9);
  v1[49] = v10;
  v1[50] = OUTLINED_FUNCTION_13_0();
  uint64_t v11 = type metadata accessor for AppIntentFilter();
  v1[51] = v11;
  OUTLINED_FUNCTION_0_1(v11);
  v1[52] = v12;
  v1[53] = OUTLINED_FUNCTION_13_0();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentType?);
  OUTLINED_FUNCTION_54_0(v13);
  v1[54] = swift_task_alloc();
  v1[55] = swift_task_alloc();
  v1[56] = swift_task_alloc();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppIdDetails?);
  OUTLINED_FUNCTION_54_0(v14);
  v1[57] = OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_11_0();
  return _swift_task_switch(v15, v16, v17);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_20_0();
  *(void *)(v0 + 464) = OUTLINED_FUNCTION_14_2(*(void **)(v0 + 304));
  *(void *)(v0 + 472) = v1;
  *(void *)(v0 + 480) = swift_getObjectType();
  dispatch thunk of Actor.unownedExecutor.getter();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_20();
  return _swift_task_switch(v2, v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_8();
  Context.getAppId()();
  swift_unknownObjectRelease();
  OUTLINED_FUNCTION_11_0();
  return _swift_task_switch(v0, v1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_20_0();
  uint64_t v1 = *(void *)(v0 + 456);
  uint64_t v2 = type metadata accessor for AppIdDetails();
  if (__swift_getEnumTagSinglePayload(v1, 1, v2) == 1)
  {
    outlined destroy of AppIdDetails?(v1, &demangling cache variable for type metadata for AppIdDetails?);
    uint64_t v3 = 0;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v3 = AppIdDetails.appId.getter();
    uint64_t v4 = v5;
    OUTLINED_FUNCTION_23();
    uint64_t v6 = OUTLINED_FUNCTION_56_0();
    v7(v6);
  }
  *(void *)(v0 + 488) = v3;
  *(void *)(v0 + 496) = v4;
  *(void *)(v0 + 504) = OUTLINED_FUNCTION_14_2(*(void **)(v0 + 304));
  *(void *)(v0 + 512) = v8;
  *(void *)(v0 + 520) = swift_getObjectType();
  dispatch thunk of Actor.unownedExecutor.getter();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_20();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_8();
  Context.getIntentType()();
  swift_unknownObjectRelease();
  OUTLINED_FUNCTION_11_0();
  return _swift_task_switch(v0, v1, v2);
}

{
  void *v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, char *);
  char *v33;
  uint64_t v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void (*v41)(void);
  uint64_t v42;
  Swift::String v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(void);
  void *v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  os_log_type_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(void *);
  void *v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  uint8_t *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  void *v107;
  uint64_t v108;
  os_log_type_t v109;
  uint8_t *v110;
  void *v111;
  uint64_t v112;
  void *v113;
  unint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t, char *);
  void *v117;
  NSObject *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;

  long long v127 = v0;
  uint64_t v1 = v0;
  v0[28] = 0;
  uint64_t v2 = v0 + 28;
  uint64_t v4 = v0[55];
  uint64_t v3 = v0[56];
  v0[29] = 0;
  outlined init with copy of IntentType?(v3, v4, &demangling cache variable for type metadata for IntentType?);
  uint64_t v5 = type metadata accessor for IntentType();
  if (__swift_getEnumTagSinglePayload(v4, 1, v5) != 1)
  {
    uint64_t v6 = v0[54];
    outlined init with copy of IntentType?(v0[55], v6, &demangling cache variable for type metadata for IntentType?);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 88))(v6, v5);
    if (v8 == enum case for IntentType.appIntent(_:))
    {
      uint64_t v9 = v1[54];
LABEL_5:
      uint64_t v11 = v1[52];
      uint64_t v10 = v1[53];
      uint64_t v12 = v1[51];
      (*(void (**)(uint64_t, uint64_t))(v7 + 96))(v9, v5);
      uint64_t v13 = OUTLINED_FUNCTION_56_0();
      v14(v13);
      v1[28] = AppIntentFilter.appId.getter();
      v1[29] = v15;
      uint64_t v16 = AppIntentFilter.intentIdentifier.getter();
      uint64_t v114 = v17;
      uint64_t v18 = (void *)AppIntentFilter.parameters.getter();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      goto LABEL_8;
    }
    uint64_t v9 = v1[54];
    if (v8 == enum case for IntentType.appIntentV2(_:)) {
      goto LABEL_5;
    }
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1[54], v5);
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = 0;
  uint64_t v114 = 0;
  *uint64_t v2 = 0;
  v2[1] = 0;
  uint64_t v18 = &_swiftEmptyArrayStorage;
LABEL_8:
  v112 = v16;
  outlined destroy of AppIdDetails?(v1[55], &demangling cache variable for type metadata for IntentType?);
  if (one-time initialization token for appIntentsSuggestions != -1) {
    swift_once();
  }
  uint64_t v20 = v1[49];
  uint64_t v19 = v1[50];
  __swift_project_value_buffer(v1[48], (uint64_t)static Logger.appIntentsSuggestions);
  (*(void (**)(uint64_t))(v20 + 16))(v19);
  swift_bridgeObjectRetain_n();
  OUTLINED_FUNCTION_24_1();
  int v21 = Logger.logObject.getter();
  uint64_t v22 = static os_log_type_t.debug.getter();
  long long v119 = v1;
  v113 = v18;
  if (os_log_type_enabled(v21, v22))
  {
    os_log_type_t v109 = v22;
    v118 = v21;
    long long v23 = OUTLINED_FUNCTION_64();
    v123 = swift_slowAlloc();
    *(_DWORD *)long long v23 = 136315650;
    swift_beginAccess();
    long long v24 = v1[29];
    if (v24) {
      uint64_t v25 = v1[28];
    }
    else {
      uint64_t v25 = 7104878;
    }
    if (v24) {
      long long v26 = v1[29];
    }
    else {
      long long v26 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    v1[34] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2080;
    if (v114) {
      uint64_t v27 = v112;
    }
    else {
      uint64_t v27 = 7104878;
    }
    if (v114) {
      unint64_t v28 = v114;
    }
    else {
      unint64_t v28 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    v1[35] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_27_1();
    uint64_t v110 = (uint8_t *)v23;
    *(_WORD *)(v23 + 22) = 2080;
    unint64_t v29 = v1;
    unint64_t v30 = v113[2];
    uint64_t v111 = v2;
    if (v30)
    {
      uint64_t v117 = v2 - 16;
      uint64_t v31 = v29[43];
      long long v124 = &_swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      unint64_t v32 = *(void (**)(uint64_t, char *))(v31 + 16);
      v31 += 16;
      unint64_t v33 = (char *)v113 + ((*(unsigned __int8 *)(v31 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 64));
      v115 = *(void *)(v31 + 56);
      uint64_t v116 = v32;
      do
      {
        v116(v119[44], v33);
        long long v125 = AppIntentFilter.AppIntentParameter.name.getter();
        long long v126 = v34;
        swift_bridgeObjectRetain();
        v35._uint64_t countAndFlagsBits = 32;
        v35._object = (void *)0xE100000000000000;
        String.append(_:)(v35);
        swift_bridgeObjectRelease();
        unint64_t v36 = v125;
        BOOL v37 = v126;
        AppIntentFilter.AppIntentParameter.value.getter();
        OUTLINED_FUNCTION_52_0(v117, v119[15]);
        static Locale.current.getter();
        uint64_t v38 = dispatch thunk of SiriSuggestions.DisplayRepresentable.getDisplay(for:)();
        uint64_t v40 = v39;
        OUTLINED_FUNCTION_17_2();
        v41();
        if (v40) {
          uint64_t v42 = v38;
        }
        else {
          uint64_t v42 = 1819047278;
        }
        if (!v40) {
          uint64_t v40 = (void *)0xE400000000000000;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v117);
        long long v125 = v36;
        long long v126 = v37;
        swift_bridgeObjectRetain();
        v43._uint64_t countAndFlagsBits = v42;
        v43._object = v40;
        String.append(_:)(v43);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v45 = v125;
        uint64_t v44 = v126;
        OUTLINED_FUNCTION_17_2();
        v46();
        uint64_t v47 = v124;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v47 = v124;
        }
        Swift::Int v49 = v47[2];
        int64_t v48 = v47[3];
        int v21 = v118;
        if (v49 >= v48 >> 1)
        {
          OUTLINED_FUNCTION_51_0(v48);
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v47 = v124;
        }
        v47[2] = v49 + 1;
        id v50 = (char *)&v47[2 * v49];
        *((void *)v50 + 4) = v45;
        *((void *)v50 + 5) = v44;
        v33 += v115;
        --v30;
      }
      while (v30);
      swift_bridgeObjectRelease();
    }
    uint64_t v1 = v119;
    uint64_t v55 = v119[49];
    uint64_t v122 = v119[50];
    uint64_t v53 = v119[48];
    long long v56 = Array.description.getter();
    uint64_t v58 = v57;
    swift_bridgeObjectRelease();
    v119[37] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v58, &v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_30_0();
    _os_log_impl(&dword_0, v21, v109, "MetaDataSourcedAppIntentResolver resolveParameter called with - appIdToUse - %s, intentIdentifierToUse - %s, parameters - %s", v110, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_10();

    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v122, v53);
    uint64_t v2 = v111;
  }
  else
  {
    uint64_t v53 = v1[49];
    unint64_t v51 = v1[50];
    long long v52 = v1[48];
    OUTLINED_FUNCTION_27_1();
    OUTLINED_FUNCTION_12_1();

    long long v54 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
    LOBYTE(v53) = v53 + 8;
    v54(v51, v52);
  }
  swift_beginAccess();
  uint64_t v59 = v1[29];
  if (v59)
  {
    uint64_t v60 = v1[28];
    swift_bridgeObjectRelease();
LABEL_44:
    swift_bridgeObjectRetain();
    uint64_t v66 = v114;
    if (v114)
    {
      OUTLINED_FUNCTION_24_1();
      swift_bridgeObjectRetain_n();
      os_log_t v67 = Logger.logObject.getter();
      int v68 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_10_2(v68))
      {
        uint64_t v69 = OUTLINED_FUNCTION_57();
        long long v125 = OUTLINED_FUNCTION_23_0();
        *(_DWORD *)uint64_t v69 = 136315394;
        swift_bridgeObjectRetain();
        v2[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v59, &v125);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v69 + 12) = 2080;
        swift_bridgeObjectRetain();
        Class v70 = v112;
        v2[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v112, v114, &v125);
        uint64_t v66 = v114;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_0, v67, (os_log_type_t)v53, "Obtaining app intents details for appId: %s and %s", (uint8_t *)v69, 0x16u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_10();
        uint64_t v1 = v119;
        OUTLINED_FUNCTION_10();
      }
      else
      {
        OUTLINED_FUNCTION_67();
        OUTLINED_FUNCTION_12_1();

        Class v70 = v112;
      }
      unint64_t v75 = (void *)v1[40];
      uint64_t v76 = v75[5];
      long long v77 = v75[6];
      OUTLINED_FUNCTION_52_0(v75 + 2, v76);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      long long v78 = swift_allocObject();
      *(_OWORD *)(v78 + 16) = xmmword_47FC0;
      *(void *)(v78 + 32) = v70;
      *(void *)(v78 + 40) = v66;
      unint64_t v79 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v77 + 40))(v60, v59, v78, v76, v77);
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v120 = v60;
      swift_bridgeObjectRetain_n();
      uint64_t v71 = Logger.logObject.getter();
      uint64_t v72 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v71, v72))
      {
        uint64_t v73 = (uint8_t *)OUTLINED_FUNCTION_8_2();
        long long v125 = OUTLINED_FUNCTION_64();
        *(_DWORD *)uint64_t v73 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v74 = v120;
        v2[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v120, v59, &v125);
        uint64_t v1 = v119;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_0, v71, v72, "Obtaining app intents details for appId: %s", v73, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_10();
        OUTLINED_FUNCTION_10();
      }
      else
      {
        OUTLINED_FUNCTION_67();

        uint64_t v74 = v120;
      }
      unint64_t v80 = (void *)v1[40];
      long long v82 = v80[5];
      uint64_t v81 = v80[6];
      OUTLINED_FUNCTION_52_0(v80 + 2, v82);
      unint64_t v79 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v81 + 48))(v74, v59, v82, v81);
      uint64_t v60 = v74;
    }
    uint64_t v90 = v2 - 26;
    unint64_t v91 = v1[39];
    swift_bridgeObjectRetain();
    specialized Sequence.compactMap<A>(_:)(v79, v60, v59);
    uint64_t v121 = v92;
    v1[66] = v92;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s25SiriLinkSuggestionsPlugin0B6Client_pWOcTm_0(v91, (uint64_t)(v2 - 26));
    uint64_t v93 = Logger.logObject.getter();
    uint64_t v94 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v93, v94))
    {
      long long v95 = (uint8_t *)OUTLINED_FUNCTION_8_2();
      long long v125 = OUTLINED_FUNCTION_64();
      *(_DWORD *)long long v95 = 136315138;
      OUTLINED_FUNCTION_52_0(v90, v119[5]);
      dispatch thunk of EnvironmentSnapshot.salientEntities.getter();
      type metadata accessor for SalientEntity();
      OUTLINED_FUNCTION_57_0();
      uint64_t v96 = Array.description.getter();
      uint64_t v98 = v97;
      swift_bridgeObjectRelease();
      v119[33] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v96, v98, &v125);
      uint64_t v1 = v119;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
      _os_log_impl(&dword_0, v93, v94, "environment.salientEntities - %s", v95, 0xCu);
      OUTLINED_FUNCTION_18_2();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_10();
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
    }

    uint64_t v99 = v1[40];
    uint64_t v100 = v1[41];
    uint64_t v102 = v1[38];
    uint64_t v101 = (void *)v1[39];
    OUTLINED_FUNCTION_52_0(v101, v101[3]);
    dispatch thunk of EnvironmentSnapshot.salientEntities.getter();
    Array<A>.getRetrievedContext()();
    swift_bridgeObjectRelease();
    Array<A>.indexByType()();
    uint64_t v104 = v103;
    swift_bridgeObjectRelease();
    uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeoutBehaviour<AppIntentDetails, Any>);
    __swift_storeEnumTagSinglePayload(v100, 1, 1, v105);
    _s25SiriLinkSuggestionsPlugin0B6Client_pWOcTm_0((uint64_t)v101, (uint64_t)(v1 + 17));
    _s25SiriLinkSuggestionsPlugin0B6Client_pWOcTm_0(v102, (uint64_t)(v1 + 7));
    uint64_t v106 = (void *)swift_allocObject();
    v1[67] = (uint64_t)v106;
    v106[2] = v99;
    v106[3] = v113;
    v106[4] = v104;
    outlined init with take of LinkDialogIdProvider((long long *)(v1 + 17), (uint64_t)(v106 + 5));
    outlined init with take of LinkDialogIdProvider((long long *)(v1 + 7), (uint64_t)(v106 + 10));
    swift_retain();
    v107 = (void *)swift_task_alloc();
    v1[68] = (uint64_t)v107;
    NSObject *v107 = v1;
    v107[1] = MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:);
    uint64_t v108 = v1[41];
    return static AsyncAwaitUtils.run<A, B>(elements:timeoutBehaviour:execute:)(v121, v108, &async function pointer to partial apply for closure #3 in MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:), v106, &type metadata for AppIntentDetails, (char *)&type metadata for Any + 8);
  }
  uint64_t v61 = (void *)Logger.logObject.getter();
  unint64_t v62 = static os_log_type_t.info.getter();
  if (OUTLINED_FUNCTION_10_2(v62))
  {
    *(_WORD *)OUTLINED_FUNCTION_16_0() = 0;
    OUTLINED_FUNCTION_44_0(&dword_0, v63, v64, "No explicit appId set on IntentType. Using the appId assign to the context instead");
    OUTLINED_FUNCTION_10();
  }
  uint64_t v53 = v1[61];
  uint64_t v65 = v1[62];

  v1[28] = v53;
  v1[29] = v65;
  swift_bridgeObjectRelease();
  if (v65)
  {
    uint64_t v60 = v1[61];
    uint64_t v59 = v1[62];
    goto LABEL_44;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v83 = (void *)Logger.logObject.getter();
  long long v84 = static os_log_type_t.info.getter();
  if (OUTLINED_FUNCTION_10_2(v84))
  {
    *(_WORD *)OUTLINED_FUNCTION_16_0() = 0;
    OUTLINED_FUNCTION_44_0(&dword_0, v85, v86, "No intent type specified on context with an appId. No direction for what app intent to fetch. Skipping app intents");
    OUTLINED_FUNCTION_10();
  }
  uint64_t v87 = v1[56];

  outlined destroy of AppIdDetails?(v87, &demangling cache variable for type metadata for IntentType?);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v88 = (uint64_t (*)(void *))v1[1];
  return v88(&_swiftEmptyArrayStorage);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_9_2();
  *uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v3 + 328);
  uint64_t v5 = *v0;
  OUTLINED_FUNCTION_12();
  *uint64_t v6 = v5;
  *(void *)(v8 + 552) = v7;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of AppIdDetails?(v4, &demangling cache variable for type metadata for TimeoutBehaviour<AppIntentDetails, Any>?);
  OUTLINED_FUNCTION_11_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  outlined destroy of AppIdDetails?(v0[56], &demangling cache variable for type metadata for IntentType?);
  swift_bridgeObjectRelease();
  uint64_t v1 = v0[69];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  return v2(v1);
}

uint64_t closure #2 in MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:)@<X0>(void **a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = *a1;
  if (one-time initialization token for appIntentsSuggestions != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.appIntentsSuggestions);
  id v9 = v7;
  swift_bridgeObjectRetain_n();
  id v10 = v9;
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315650;
    unint64_t v29 = a4;
    os_log_t log = v11;
    id v14 = [v10 identifier];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v17 = v16;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    os_log_type_t type = v12;
    *(_WORD *)(v13 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 22) = 2080;
    id v18 = v10;
    id v19 = [v18 description];
    uint64_t v20 = a2;
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v23 = v22;

    uint64_t v24 = v21;
    a2 = v20;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v23, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a4 = v29;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, log, type, "Got actions %s for: %s. Details: %s", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  *a4 = a2;
  a4[1] = a3;
  a4[2] = (uint64_t)v10;
  id v25 = v10;
  return swift_bridgeObjectRetain();
}

void Array<A>.indexByType()()
{
  OUTLINED_FUNCTION_28_1();
  uint64_t v1 = v0;
  uint64_t v67 = type metadata accessor for TypeIdentifier();
  OUTLINED_FUNCTION_4_0();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_39_0();
  uint64_t v66 = v5;
  uint64_t v6 = type metadata accessor for TypedValue();
  OUTLINED_FUNCTION_4_0();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_39_0();
  uint64_t v65 = v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TypedValue?);
  uint64_t v12 = OUTLINED_FUNCTION_54_0(v11);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  unint64_t v17 = (char *)v53 - v16;
  uint64_t v18 = type metadata accessor for RetrievedContext();
  OUTLINED_FUNCTION_4_0();
  uint64_t v20 = v19;
  __chkstk_darwin(v21);
  OUTLINED_FUNCTION_14_0();
  uint64_t v24 = v23 - v22;
  uint64_t v25 = *(void *)(v1 + 16);
  if (v25)
  {
    uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
    uint64_t v26 = v20 + 16;
    uint64_t v28 = *(unsigned __int8 *)(v26 + 64);
    uint64_t v29 = (v28 + 32) & ~v28;
    uint64_t v30 = v1;
    uint64_t v31 = v1 + v29;
    uint64_t v59 = (void (**)(uint64_t, char *, uint64_t))(v8 + 32);
    uint64_t v60 = v29;
    uint64_t v58 = v3 + 8;
    uint64_t v32 = *(void *)(v26 + 56);
    uint64_t v56 = v28 | 7;
    uint64_t v57 = v32 + v29;
    uint64_t v55 = v8 + 8;
    unint64_t v33 = v27;
    uint64_t v70 = v26 - 8;
    uint64_t v71 = v32;
    v53[1] = v30;
    swift_bridgeObjectRetain();
    uint64_t v72 = &_swiftEmptyArrayStorage;
    long long v54 = xmmword_47FC0;
    uint64_t v63 = v26;
    uint64_t v64 = v15;
    uint64_t v61 = v17;
    unint64_t v62 = v27;
    do
    {
      v33(v24, v31, v18);
      RetrievedContext.typedValue.getter();
      outlined init with copy of IntentType?((uint64_t)v17, (uint64_t)v15, &demangling cache variable for type metadata for TypedValue?);
      if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v6) == 1)
      {
        outlined destroy of AppIdDetails?((uint64_t)v17, &demangling cache variable for type metadata for TypedValue?);
        OUTLINED_FUNCTION_17_2();
        v34();
      }
      else
      {
        (*v59)(v65, v15, v6);
        TypedValue.typeIdentifier.getter();
        uint64_t v35 = TypeIdentifier.debugDescription.getter();
        uint64_t v68 = v36;
        uint64_t v69 = v35;
        OUTLINED_FUNCTION_17_2();
        v37();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RetrievedContext>);
        uint64_t v38 = v6;
        uint64_t v39 = swift_allocObject();
        *(_OWORD *)(v39 + 16) = v54;
        v33(v39 + v60, v24, v18);
        unint64_t v17 = v61;
        uint64_t v40 = v38;
        OUTLINED_FUNCTION_17_2();
        v41();
        outlined destroy of AppIdDetails?((uint64_t)v17, &demangling cache variable for type metadata for TypedValue?);
        OUTLINED_FUNCTION_17_2();
        v42();
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v43 = v72;
        }
        else
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v72[2] + 1, 1, (uint64_t)v72);
          uint64_t v43 = v48;
        }
        unint64_t v45 = v43[2];
        unint64_t v44 = v43[3];
        unint64_t v33 = v62;
        if (v45 >= v44 >> 1)
        {
          char v49 = OUTLINED_FUNCTION_51_0(v44);
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v49, v45 + 1, 1, v50);
          uint64_t v43 = v51;
        }
        v43[2] = v45 + 1;
        uint64_t v72 = v43;
        uint64_t v46 = &v43[3 * v45];
        uint64_t v47 = v68;
        v46[4] = v69;
        v46[5] = v47;
        v46[6] = v39;
        uint64_t v6 = v40;
        uint64_t v15 = v64;
      }
      v31 += v71;
      --v25;
    }
    while (v25);
    swift_bridgeObjectRelease();
    long long v52 = v72;
  }
  else
  {
    long long v52 = &_swiftEmptyArrayStorage;
  }
  specialized Dictionary.init<A>(_:uniquingKeysWith:)((uint64_t)v52, &demangling cache variable for type metadata for _DictionaryStorage<String, [RetrievedContext]>, (void (*)(uint64_t, uint64_t, void **))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
  OUTLINED_FUNCTION_35_0();
}

uint64_t closure #3 in MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 264) = a5;
  *(void *)(v6 + 272) = a6;
  *(void *)(v6 + 248) = a3;
  *(void *)(v6 + 256) = a4;
  *(void *)(v6 + 240) = a2;
  uint64_t v8 = type metadata accessor for Locale();
  *(void *)(v6 + 280) = v8;
  *(void *)(v6 + 288) = *(void *)(v8 - 8);
  uint64_t v9 = swift_task_alloc();
  uint64_t v10 = *a1;
  *(void *)(v6 + 296) = v9;
  *(void *)(v6 + 304) = v10;
  *(_OWORD *)(v6 + 312) = *(_OWORD *)(a1 + 1);
  return _swift_task_switch(closure #3 in MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:), 0, 0);
}

uint64_t closure #3 in MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:)()
{
  id v1 = [*(id *)(v0 + 320) identifier];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  *(void *)(v0 + 328) = v2;
  *(void *)(v0 + 336) = v4;
  Array<A>.indexByName()();
  uint64_t v6 = v5;
  *(void *)(v0 + 344) = v5;
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized LinkClientResolver.getAppIntentAction(from:for:withParameters:andSalientEntities:)
                                                                            + async function pointer to specialized LinkClientResolver.getAppIntentAction(from:for:withParameters:andSalientEntities:));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 352) = v7;
  *uint64_t v7 = v0;
  v7[1] = closure #3 in MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:);
  uint64_t v8 = *(void *)(v0 + 312);
  uint64_t v9 = *(void *)(v0 + 320);
  uint64_t v10 = *(void *)(v0 + 304);
  uint64_t v11 = *(void *)(v0 + 256);
  return v13(v9, v10, v8, v6, v11);
}

{
  uint64_t *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_9_2();
  *uint64_t v2 = v1;
  v1[20] = v0;
  v1[21] = v3;
  v1[22] = v4;
  v1[23] = v5;
  uint64_t v6 = *v0;
  OUTLINED_FUNCTION_12();
  *uint64_t v7 = v6;
  *(void *)(v10 + 360) = v8;
  *(void *)(v10 + 368) = v9;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_0_0();
  id v1 = *v0;
  OUTLINED_FUNCTION_12();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  long long *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v26;
  id v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint8_t *v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  os_log_type_t type;
  NSObject *log;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  uint64_t v56 = v0;
  id v1 = (long long *)(v0 + 120);
  uint64_t v2 = *(void **)(v0 + 264);
  if (*(void *)(v0 + 144))
  {
    uint64_t v4 = *(void *)(v0 + 288);
    uint64_t v3 = *(void *)(v0 + 296);
    uint64_t v53 = *(void *)(v0 + 280);
    outlined init with take of LinkDialogIdProvider(v1, v0 + 80);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 80), *(void *)(v0 + 104));
    __swift_project_boxed_opaque_existential_1(v2, v2[3]);
    OUTLINED_FUNCTION_47_0();
    dispatch thunk of EnvironmentSnapshot.siriLocale.getter();
    uint64_t v5 = dispatch thunk of SiriSuggestions.DisplayRepresentable.getDisplay(for:)();
    uint64_t v7 = v6;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v53);
    if (v7) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 1819047278;
    }
    if (v7) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = 0xE400000000000000;
    }
    __swift_destroy_boxed_opaque_existential_1(v0 + 80);
    uint64_t v10 = one-time initialization token for appIntentsSuggestions;
    uint64_t v11 = *(id *)(v0 + 320);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v10 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.appIntentsSuggestions);
    swift_bridgeObjectRetain();
    uint64_t v13 = Logger.logObject.getter();
    uint64_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)OUTLINED_FUNCTION_8_2();
      uint64_t v55 = OUTLINED_FUNCTION_64();
      *(_DWORD *)uint64_t v15 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 216) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v13, v14, "dialog =%s", v15, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_10();
    }
    else
    {
      OUTLINED_FUNCTION_12_1();
    }

    uint64_t v26 = *(void **)(v0 + 320);
    swift_bridgeObjectRetain_n();
    OUTLINED_FUNCTION_32();
    swift_bridgeObjectRetain_n();
    uint64_t v27 = v26;
    OUTLINED_FUNCTION_24_1();
    uint64_t v28 = v27;
    uint64_t v29 = Logger.logObject.getter();
    uint64_t v30 = static os_log_type_t.debug.getter();
    uint64_t v31 = os_log_type_enabled(v29, v30);
    unint64_t v33 = *(void *)(v0 + 368);
    uint64_t v32 = *(void *)(v0 + 376);
    if (v31)
    {
      os_log_t log = v29;
      unint64_t v34 = *(void *)(v0 + 360);
      uint64_t v35 = *(void *)(v0 + 312);
      uint64_t v36 = *(void **)(v0 + 320);
      os_log_type_t type = v30;
      BOOL v37 = *(void *)(v0 + 304);
      long long v54 = v8;
      uint64_t v38 = (uint8_t *)OUTLINED_FUNCTION_8_2();
      uint64_t v55 = OUTLINED_FUNCTION_64();
      OUTLINED_FUNCTION_31_0(4.8149e-34);
      *(void *)(v0 + 16) = v34;
      *(void *)(v0 + 24) = v33;
      *(void *)(v0 + 32) = v32;
      *(void *)(v0 + 40) = v37;
      *(void *)(v0 + 48) = v35;
      *(void *)(v0 + 56) = v36;
      *(void *)(v0 + 64) = v54;
      *(void *)(v0 + 72) = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v39 = v36;
      swift_bridgeObjectRetain();
      uint64_t v40 = String.init<A>(describing:)();
      *(void *)(v0 + 208) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_29_1();
      OUTLINED_FUNCTION_30_0();
      OUTLINED_FUNCTION_25_1();

      OUTLINED_FUNCTION_12_1();
      _os_log_impl(&dword_0, log, type, "Return suggestionAppIntent =%s", v38, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_10();
      uint64_t v8 = v54;
      OUTLINED_FUNCTION_10();
    }
    else
    {
      uint64_t v42 = *(void **)(v0 + 320);
      swift_bridgeObjectRelease_n();

      OUTLINED_FUNCTION_12_1();
      OUTLINED_FUNCTION_30_0();
      OUTLINED_FUNCTION_29_1();
    }
    uint64_t v43 = *(void *)(v0 + 360);
    unint64_t v45 = *(void *)(v0 + 312);
    unint64_t v44 = *(void **)(v0 + 320);
    uint64_t v46 = *(void *)(v0 + 304);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v47 = swift_allocObject();
    *(_OWORD *)(v47 + 16) = xmmword_47FC0;
    *(void *)(v47 + 56) = &type metadata for SuggestionAppIntent;
    int64_t v48 = swift_allocObject();
    *(void *)(v47 + 32) = v48;
    *(void *)(v48 + 16) = v43;
    *(_OWORD *)(v48 + 24) = *(_OWORD *)(v0 + 368);
    *(void *)(v48 + 40) = v46;
    *(void *)(v48 + 48) = v45;
    *(void *)(v48 + 56) = v44;
    *(void *)(v48 + 64) = v8;
    *(void *)(v48 + 72) = v9;

    swift_task_dealloc();
    OUTLINED_FUNCTION_53_0();
    OUTLINED_FUNCTION_33_0();
    __asm { BRAA            X2, X16 }
  }
  outlined destroy of AppIdDetails?((uint64_t)v1, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  dispatch thunk of EnvironmentSnapshot.siriLocale.getter();
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v0 + 392) = v16;
  *uint64_t v16 = v0;
  v16[1] = closure #3 in MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:);
  OUTLINED_FUNCTION_33_0();
  return MetaDataSourcedAppIntentResolver.getSuggestionDialog(appIntentAction:details:siriLocale:)(v17, v18, v19, v20, v21, v22, v23);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_9_2();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_12();
  *uint64_t v4 = v3;
  *(void *)(v7 + 400) = v5;
  *(void *)(v7 + 408) = v6;
  swift_task_dealloc();
  uint64_t v8 = OUTLINED_FUNCTION_56_0();
  v9(v8);
  OUTLINED_FUNCTION_11_0();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t closure #3 in MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_37_0();
  a21 = v23;
  a22 = v24;
  a20 = v22;
  if (!v22[46])
  {
    if (one-time initialization token for appIntentsSuggestions != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    __swift_project_value_buffer(v43, (uint64_t)static Logger.appIntentsSuggestions);
    swift_bridgeObjectRetain();
    unint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    BOOL v46 = os_log_type_enabled(v44, v45);
    unint64_t v47 = v22[42];
    if (v46)
    {
      uint64_t v48 = v22[41];
      char v49 = (uint8_t *)OUTLINED_FUNCTION_8_2();
      a11 = OUTLINED_FUNCTION_64();
      *(_DWORD *)char v49 = 136315138;
      swift_bridgeObjectRetain();
      v22[25] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v47, &a11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v44, v45, "Siri App Intent could not be determined. Skipping appIntent: %s", v49, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_10();
    }
    else
    {
      OUTLINED_FUNCTION_25_1();
    }

    uint64_t v36 = v22[40];
    goto LABEL_17;
  }
  uint64_t v25 = v22[23];
  uint64_t v27 = v22[39];
  uint64_t v26 = (void *)v22[40];
  uint64_t v28 = v22[38];
  uint64_t v29 = (void *)v22[33];
  swift_bridgeObjectRelease();
  v22[47] = v25;
  type metadata accessor for MetaDataSourcedAppIntentResolver();
  if (static MetaDataSourcedAppIntentResolver.disruptsUserFlow(appIntentDetails:environmentSnapshot:)(v28, v27, v26, v29))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for appIntentsSuggestions != -1) {
      swift_once();
    }
    uint64_t v30 = (void *)v22[40];
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Logger.appIntentsSuggestions);
    id v32 = v30;
    unint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    BOOL v35 = OUTLINED_FUNCTION_42(v34);
    uint64_t v36 = v22[40];
    if (v35)
    {
      a10 = v22 + 29;
      BOOL v37 = (_DWORD *)OUTLINED_FUNCTION_8_2();
      a11 = OUTLINED_FUNCTION_64();
      *BOOL v37 = 136315138;
      a9 = v37 + 1;
      id v38 = [v36 identifier];
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v41 = v40;

      v22[29] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, &a11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      OUTLINED_FUNCTION_13_1(&dword_0, v33, v42, "Not suggesting %s since it disrupts users flow");
      OUTLINED_FUNCTION_18_2();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_10();
    }
    else
    {

      uint64_t v36 = v33;
    }
LABEL_17:

    swift_task_dealloc();
    OUTLINED_FUNCTION_16_1();
    return v57(v55, v56, v57, v58, v59, v60, v61, v62, a9, a10, a11, a12, a13, a14);
  }
  uint64_t v50 = (void *)swift_task_alloc();
  v22[48] = v50;
  *uint64_t v50 = v22;
  v50[1] = closure #3 in MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:);
  OUTLINED_FUNCTION_16_1();
  return MetaDataSourcedAppIntentResolver.getDialogOverride(_:)(v51, v52);
}

void closure #3 in MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:)()
{
  unint64_t v1 = *(void *)(v0 + 408);
  if (v1)
  {
    p_name = &stru_58FF8.name;
    if (one-time initialization token for appIntentsSuggestions != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.appIntentsSuggestions);
    OUTLINED_FUNCTION_32();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_42(v5))
    {
      uint64_t v6 = *(void *)(v0 + 400);
      uint64_t v7 = (_DWORD *)OUTLINED_FUNCTION_8_2();
      uint64_t v55 = OUTLINED_FUNCTION_64();
      *uint64_t v7 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 224) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v1, &v55);
      p_name = (char **)(&stru_58FF8 + 8);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_13_1(&dword_0, v4, v8, "computedDialog=%s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_10();
    }
    else
    {
      OUTLINED_FUNCTION_19_2();
    }

    uint64_t v54 = *(void *)(v0 + 400);
    uint64_t v22 = p_name[478];
    id v23 = *(id *)(v0 + 320);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v22 != (char *)-1) {
      swift_once();
    }
    __swift_project_value_buffer(v3, (uint64_t)static Logger.appIntentsSuggestions);
    swift_bridgeObjectRetain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (_DWORD *)OUTLINED_FUNCTION_8_2();
      uint64_t v55 = OUTLINED_FUNCTION_64();
      *uint64_t v26 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 216) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v1, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_13_1(&dword_0, v24, v27, "dialog =%s");
      OUTLINED_FUNCTION_18_2();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_10();
    }
    else
    {
      OUTLINED_FUNCTION_19_2();
    }

    uint64_t v28 = *(void **)(v0 + 320);
    swift_bridgeObjectRetain_n();
    OUTLINED_FUNCTION_24_1();
    swift_bridgeObjectRetain_n();
    id v29 = v28;
    OUTLINED_FUNCTION_32();
    id v30 = v29;
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.debug.getter();
    BOOL v33 = os_log_type_enabled(v31, v32);
    uint64_t v35 = *(void *)(v0 + 368);
    uint64_t v34 = *(void *)(v0 + 376);
    if (v33)
    {
      uint64_t v36 = *(void *)(v0 + 360);
      os_log_t log = v31;
      uint64_t v37 = *(void *)(v0 + 312);
      id v38 = *(void **)(v0 + 320);
      os_log_type_t type = v32;
      uint64_t v39 = *(void *)(v0 + 304);
      unint64_t v40 = (uint8_t *)OUTLINED_FUNCTION_8_2();
      uint64_t v55 = OUTLINED_FUNCTION_64();
      OUTLINED_FUNCTION_31_0(4.8149e-34);
      *(void *)(v0 + 16) = v36;
      *(void *)(v0 + 24) = v35;
      *(void *)(v0 + 32) = v34;
      *(void *)(v0 + 40) = v39;
      *(void *)(v0 + 48) = v37;
      *(void *)(v0 + 56) = v38;
      *(void *)(v0 + 64) = v54;
      *(void *)(v0 + 72) = v1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v41 = v38;
      swift_bridgeObjectRetain();
      uint64_t v42 = String.init<A>(describing:)();
      *(void *)(v0 + 208) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_29_1();
      OUTLINED_FUNCTION_30_0();
      OUTLINED_FUNCTION_12_1();

      OUTLINED_FUNCTION_19_2();
      _os_log_impl(&dword_0, log, type, "Return suggestionAppIntent =%s", v40, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_10();
    }
    else
    {
      unint64_t v44 = *(void **)(v0 + 320);
      swift_bridgeObjectRelease_n();

      OUTLINED_FUNCTION_19_2();
      OUTLINED_FUNCTION_30_0();
      OUTLINED_FUNCTION_29_1();
    }
    uint64_t v45 = *(void *)(v0 + 360);
    uint64_t v46 = *(void *)(v0 + 312);
    uint64_t v15 = *(NSObject **)(v0 + 320);
    uint64_t v47 = *(void *)(v0 + 304);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v48 = swift_allocObject();
    *(_OWORD *)(v48 + 16) = xmmword_47FC0;
    *(void *)(v48 + 56) = &type metadata for SuggestionAppIntent;
    uint64_t v49 = swift_allocObject();
    *(void *)(v48 + 32) = v49;
    *(void *)(v49 + 16) = v45;
    *(_OWORD *)(v49 + 24) = *(_OWORD *)(v0 + 368);
    *(void *)(v49 + 40) = v47;
    *(void *)(v49 + 48) = v46;
    *(void *)(v49 + 56) = v15;
    *(void *)(v49 + 64) = v54;
    *(void *)(v49 + 72) = v1;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for appIntentsSuggestions != -1) {
      swift_once();
    }
    uint64_t v9 = *(void **)(v0 + 320);
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.appIntentsSuggestions);
    id v11 = v9;
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    uint64_t v15 = *(NSObject **)(v0 + 320);
    if (v14)
    {
      uint64_t v16 = (_DWORD *)OUTLINED_FUNCTION_8_2();
      uint64_t v55 = OUTLINED_FUNCTION_64();
      *uint64_t v16 = 136315138;
      id v17 = [v15 identifier];
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v20 = v19;

      *(void *)(v0 + 192) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      OUTLINED_FUNCTION_13_1(&dword_0, v12, v21, "Not suggesting %s since dialog cannot be determined");
      OUTLINED_FUNCTION_18_2();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_10();
    }
    else
    {

      uint64_t v15 = v12;
    }
  }

  swift_task_dealloc();
  OUTLINED_FUNCTION_33_0();
  __asm { BRAA            X2, X16 }
}

void Array<A>.indexByName()()
{
  OUTLINED_FUNCTION_28_1();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AppIntentFilter.AppIntentParameter();
  OUTLINED_FUNCTION_4_0();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_14_0();
  uint64_t v8 = v7 - v6;
  int64_t v9 = *(void *)(v1 + 16);
  if (v9)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
    id v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    uint64_t v10 = v4 + 16;
    uint64_t v12 = v1 + ((*(unsigned __int8 *)(v10 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 64));
    uint64_t v18 = *(void *)(v10 + 56);
    unint64_t v19 = v11;
    do
    {
      v19(v8, v12, v2);
      *(void *)&long long v20 = AppIntentFilter.AppIntentParameter.name.getter();
      *((void *)&v20 + 1) = v13;
      AppIntentFilter.AppIntentParameter.value.getter();
      (*(void (**)(uint64_t, uint64_t))(v10 - 8))(v8, v2);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v15 = _swiftEmptyArrayStorage[2];
      unint64_t v14 = _swiftEmptyArrayStorage[3];
      if (v15 >= v14 >> 1)
      {
        BOOL v17 = OUTLINED_FUNCTION_51_0(v14);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)v17, v15 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v15 + 1;
      uint64_t v16 = &_swiftEmptyArrayStorage[7 * v15];
      v16[10] = v23;
      *((_OWORD *)v16 + 3) = v21;
      *((_OWORD *)v16 + 4) = v22;
      *((_OWORD *)v16 + 2) = v20;
      v12 += v18;
      --v9;
    }
    while (v9);
  }
  specialized Dictionary.init<A>(_:uniquingKeysWith:)((uint64_t)_swiftEmptyArrayStorage, &demangling cache variable for type metadata for _DictionaryStorage<String, SiriSuggestions.DisplayRepresentable>, (void (*)(uint64_t, uint64_t, void **))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
  OUTLINED_FUNCTION_35_0();
}

uint64_t MetaDataSourcedAppIntentResolver.getDialogOverride(_:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = a2;
  return _swift_task_switch(MetaDataSourcedAppIntentResolver.getDialogOverride(_:), 0, 0);
}

uint64_t MetaDataSourcedAppIntentResolver.getDialogOverride(_:)()
{
  OUTLINED_FUNCTION_20_0();
  *(void *)(v0 + 144) = OUTLINED_FUNCTION_14_2(*(void **)(v0 + 136));
  *(void *)(v0 + 152) = v1;
  *(void *)(v0 + 160) = swift_getObjectType();
  *(void *)(v0 + 168) = dispatch thunk of CandidateSuggestion.context.getter();
  *(void *)(v0 + 176) = v2;
  *(void *)(v0 + 184) = swift_getObjectType();
  dispatch thunk of Actor.unownedExecutor.getter();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_20();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_8();
  Context.getTargetOwner()();
  swift_unknownObjectRelease();
  OUTLINED_FUNCTION_11_0();
  return _swift_task_switch(v0, v1, v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  v0[10] = v1;
  v0[11] = *(void *)(v2 + 8);
  __swift_allocate_boxed_opaque_existential_1(v0 + 7);
  OUTLINED_FUNCTION_23();
  (*(void (**)(void))(v3 + 16))();
  dispatch thunk of Actor.unownedExecutor.getter();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_20();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_20_0();
  Context.getParam(for:key:)();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  OUTLINED_FUNCTION_11_0();
  return _swift_task_switch(v1, v2, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_8();
  uint64_t v1 = v0[16];
  if (v0[15])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable);
    OUTLINED_FUNCTION_56_0();
    if ((swift_dynamicCast() & 1) == 0)
    {
      uint64_t v2 = v0[16];
      *(void *)(v2 + 32) = 0;
      *(_OWORD *)uint64_t v2 = 0u;
      *(_OWORD *)(v2 + 16) = 0u;
    }
  }
  else
  {
    outlined destroy of AppIdDetails?((uint64_t)(v0 + 12), &demangling cache variable for type metadata for Any?);
    *(_OWORD *)uint64_t v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(void *)(v1 + 32) = 0;
  }
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t MetaDataSourcedAppIntentResolver.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MetaDataSourcedAppIntentResolver.__deallocating_deinit()
{
  MetaDataSourcedAppIntentResolver.deinit();
  return _swift_deallocClassInstance(v0, 112, 7);
}

uint64_t protocol witness for LinkClientResolver.linkClient.getter in conformance MetaDataSourcedAppIntentResolver@<X0>(uint64_t a1@<X8>)
{
  return _s25SiriLinkSuggestionsPlugin0B6Client_pWOcTm_0(*v1 + 16, a1);
}

uint64_t protocol witness for InternalResolver.resolverTypeOperand.getter in conformance MetaDataSourcedAppIntentResolver()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for InternalResolver.resolveParameter(parameter:suggestion:interaction:environment:) in conformance MetaDataSourcedAppIntentResolver()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for InternalGenerator.generateCandidateSuggestions(interaction:environment:factory:) in conformance LinkSuggestionsGenerator;
  return MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:)();
}

uint64_t partial apply for closure #1 in static PhraseUtils.getHydratedPhrase(phraseTemplate:parameters:locale:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in static PhraseUtils.getHydratedPhrase(phraseTemplate:parameters:locale:)(a1, a2);
}

uint64_t partial apply for closure #1 in implicit closure #3 in MetaDataSourcedAppIntentResolver.getSuggestionDialogFromAssistantIntentPhrase(appIntentAction:details:siriLocale:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in implicit closure #3 in MetaDataSourcedAppIntentResolver.getSuggestionDialogFromAssistantIntentPhrase(appIntentAction:details:siriLocale:)(a1, a2);
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v28 = (long long *)&v27;
  uint64_t v6 = a1 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of IntentType?(v6, (uint64_t)v26, &demangling cache variable for type metadata for (String, SiriSuggestions.DisplayRepresentable));
    uint64_t v7 = v26[0];
    uint64_t v8 = v26[1];
    outlined init with take of LinkDialogIdProvider(v28, (uint64_t)v25);
    uint64_t v9 = *a3;
    unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
    uint64_t v12 = *(void *)(v9 + 16);
    BOOL v13 = (v10 & 1) == 0;
    if (__OFADD__(v12, v13)) {
      break;
    }
    char v14 = v10;
    if (*(void *)(v9 + 24) >= v12 + v13)
    {
      if (a2)
      {
        if (v10) {
          goto LABEL_10;
        }
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, SiriSuggestions.DisplayRepresentable>);
        _NativeDictionary.copy()();
        if (v14) {
          goto LABEL_10;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)();
      unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
      if ((v14 & 1) != (v16 & 1)) {
        goto LABEL_20;
      }
      unint64_t v11 = v15;
      if (v14)
      {
LABEL_10:
        _s25SiriLinkSuggestionsPlugin0B6Client_pWOcTm_0((uint64_t)v25, (uint64_t)v24);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
        swift_bridgeObjectRelease();
        uint64_t v17 = *(void *)(*a3 + 56) + 40 * v11;
        __swift_destroy_boxed_opaque_existential_1(v17);
        outlined init with take of LinkDialogIdProvider(v24, v17);
        goto LABEL_14;
      }
    }
    uint64_t v18 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    unint64_t v19 = (uint64_t *)(v18[6] + 16 * v11);
    *unint64_t v19 = v7;
    v19[1] = v8;
    outlined init with take of LinkDialogIdProvider(v25, v18[7] + 40 * v11);
    uint64_t v20 = v18[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_19;
    }
    v18[2] = v22;
LABEL_14:
    v6 += 56;
    a2 = 1;
    if (!--v3) {
      return swift_bridgeObjectRelease_n();
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized MutableCollection<>.shuffle<A>(using:)()
{
  OUTLINED_FUNCTION_28_1();
  uint64_t v1 = type metadata accessor for RetrievedContext();
  OUTLINED_FUNCTION_4_0();
  uint64_t v31 = v2;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v35 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v34 = (char *)&v27 - v6;
  uint64_t v7 = *v0;
  unint64_t v8 = *(void *)(*v0 + 16);
  unint64_t v9 = v8 - 2;
  if (v8 < 2)
  {
LABEL_19:
    OUTLINED_FUNCTION_35_0();
  }
  else
  {
    unint64_t v10 = 0;
    unint64_t v28 = v8 - 2;
    id v29 = v0;
    id v30 = (void (**)(unint64_t, char *, uint64_t))(v31 + 40);
    while (1)
    {
      unint64_t v36 = 0;
      swift_stdlib_random();
      uint64_t v11 = (v36 * (unsigned __int128)v8) >> 64;
      if (v8 > v36 * v8)
      {
        unint64_t v12 = -(uint64_t)v8 % v8;
        if (v12 > v36 * v8)
        {
          do
          {
            unint64_t v36 = 0;
            swift_stdlib_random();
          }
          while (v12 > v36 * v8);
          uint64_t v11 = (v36 * (unsigned __int128)v8) >> 64;
        }
      }
      unint64_t v13 = v10 + v11;
      if (__OFADD__(v10, v11)) {
        break;
      }
      if (v10 != v13)
      {
        unint64_t v14 = *(void *)(v7 + 16);
        if (v10 >= v14) {
          goto LABEL_21;
        }
        uint64_t v15 = v1;
        unint64_t v33 = (*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
        unint64_t v16 = v7 + v33;
        uint64_t v17 = *(void *)(v31 + 72);
        uint64_t v32 = v17 * v10;
        uint64_t v18 = *(void (**)(char *, unint64_t, uint64_t))(v31 + 16);
        v18(v34, v7 + v33 + v17 * v10, v15);
        if (v13 >= v14) {
          goto LABEL_22;
        }
        uint64_t v19 = v17 * v13;
        v18(v35, v16 + v17 * v13, v15);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        BOOL v21 = v29;
        uint64_t *v29 = v7;
        uint64_t v1 = v15;
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v22 = v30;
          uint64_t v23 = v7;
        }
        else
        {
          specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v7);
          *BOOL v21 = v23;
          uint64_t v22 = v30;
        }
        unint64_t v24 = v33;
        if (v10 >= *(void *)(v23 + 16)) {
          goto LABEL_23;
        }
        os_log_type_t v25 = *v22;
        (*v22)(v23 + v33 + v32, v35, v1);
        if (v13 >= *(void *)(*v21 + 16)) {
          goto LABEL_24;
        }
        v25(*v21 + v24 + v19, v34, v1);
        uint64_t v7 = *v21;
        unint64_t v9 = v28;
      }
      --v8;
      if (v10++ == v9) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(void (*a1)(void *__return_ptr, unsigned char *), uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = (void *)result;
  int64_t v7 = 0;
  uint64_t v33 = a3;
  uint64_t v10 = *(void *)(a3 + 64);
  uint64_t v9 = a3 + 64;
  uint64_t v8 = v10;
  uint64_t v11 = 1 << *(unsigned char *)(v9 - 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v8;
  uint64_t v28 = v9;
  int64_t v29 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v14 = result + 64;
  if ((v12 & v8) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v7 << 6))
  {
    uint64_t v20 = (uint64_t *)(*(void *)(v33 + 48) + 16 * i);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    outlined init with copy of ActionParameter(*(void *)(v33 + 56) + 48 * i, (uint64_t)v32);
    swift_bridgeObjectRetain();
    a1(v31, v32);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of ActionParameter((uint64_t)v32);
      return (uint64_t)v6;
    }
    uint64_t result = outlined destroy of ActionParameter((uint64_t)v32);
    *(void *)(v14 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v23 = (void *)(v6[6] + 16 * i);
    *uint64_t v23 = v21;
    v23[1] = v22;
    unint64_t v24 = (void *)(v6[7] + 16 * i);
    uint64_t v25 = v31[1];
    *unint64_t v24 = v31[0];
    v24[1] = v25;
    uint64_t v26 = v6[2];
    BOOL v17 = __OFADD__(v26, 1);
    uint64_t v27 = v26 + 1;
    if (v17)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    long long v6[2] = v27;
    if (v13) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v17 = __OFADD__(v7++, 1);
    if (v17) {
      goto LABEL_25;
    }
    if (v7 >= v29) {
      return (uint64_t)v6;
    }
    unint64_t v18 = *(void *)(v28 + 8 * v7);
    if (!v18) {
      break;
    }
LABEL_13:
    unint64_t v13 = (v18 - 1) & v18;
  }
  int64_t v19 = v7 + 1;
  if (v7 + 1 >= v29) {
    return (uint64_t)v6;
  }
  unint64_t v18 = *(void *)(v28 + 8 * v19);
  if (v18) {
    goto LABEL_12;
  }
  int64_t v19 = v7 + 2;
  if (v7 + 2 >= v29) {
    return (uint64_t)v6;
  }
  unint64_t v18 = *(void *)(v28 + 8 * v19);
  if (v18)
  {
LABEL_12:
    int64_t v7 = v19;
    goto LABEL_13;
  }
  while (1)
  {
    int64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v7 >= v29) {
      return (uint64_t)v6;
    }
    unint64_t v18 = *(void *)(v28 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_13;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1DD18()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  return _swift_deallocObject(v0, 120, 7);
}

uint64_t partial apply for closure #3 in MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:)(uint64_t *a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  int64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *int64_t v7 = v2;
  v7[1] = partial apply for closure #3 in MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:);
  return closure #3 in MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:)(a1, v4, v5, v6, (uint64_t)(v1 + 5), (uint64_t)(v1 + 10));
}

uint64_t partial apply for closure #3 in MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:)()
{
  OUTLINED_FUNCTION_8();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_12();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(v2);
}

uint64_t instantiation function for generic protocol witness table for MetaDataSourcedAppIntentResolver(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type MetaDataSourcedAppIntentResolver and conformance MetaDataSourcedAppIntentResolver(&lazy protocol witness table cache variable for type MetaDataSourcedAppIntentResolver and conformance MetaDataSourcedAppIntentResolver, a2, (void (*)(uint64_t))type metadata accessor for MetaDataSourcedAppIntentResolver);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for MetaDataSourcedAppIntentResolver()
{
  return self;
}

uint64_t base witness table accessor for InternalResolver in MetaDataSourcedAppIntentResolver(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type MetaDataSourcedAppIntentResolver and conformance MetaDataSourcedAppIntentResolver(&lazy protocol witness table cache variable for type MetaDataSourcedAppIntentResolver and conformance MetaDataSourcedAppIntentResolver, a2, (void (*)(uint64_t))type metadata accessor for MetaDataSourcedAppIntentResolver);
}

uint64_t base witness table accessor for Wrappable in MetaDataSourcedAppIntentResolver(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type MetaDataSourcedAppIntentResolver and conformance MetaDataSourcedAppIntentResolver(&lazy protocol witness table cache variable for type MetaDataSourcedAppIntentResolver and conformance MetaDataSourcedAppIntentResolver, a2, (void (*)(uint64_t))type metadata accessor for MetaDataSourcedAppIntentResolver);
}

uint64_t _s25SiriLinkSuggestionsPlugin0B6Client_pWOcTm_0(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  OUTLINED_FUNCTION_23();
  (*v3)(a2);
  return a2;
}

uint64_t sub_1E070()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 80, 7);
}

void specialized closure #1 in LinkClientResolver.getParameters(for:withParameters:andSalientEntities:)(void **a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
}

void partial apply for specialized closure #1 in LinkClientResolver.getParameters(for:withParameters:andSalientEntities:)(void **a1@<X0>, void *a2@<X8>)
{
  specialized closure #1 in LinkClientResolver.getParameters(for:withParameters:andSalientEntities:)(a1, *(void *)(v2 + 24), *(void *)(v2 + 32), a2);
}

uint64_t outlined init with copy of IntentType?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_23();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t lazy protocol witness table accessor for type MetaDataSourcedAppIntentResolver and conformance MetaDataSourcedAppIntentResolver(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    OUTLINED_FUNCTION_57_0();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of AppIdDetails?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_17_2();
  v3();
  return a1;
}

uint64_t OUTLINED_FUNCTION_8_2()
{
  return swift_slowAlloc();
}

BOOL OUTLINED_FUNCTION_10_2(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_12_1()
{
  return swift_bridgeObjectRelease_n();
}

void OUTLINED_FUNCTION_13_1(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v5, a4, v4, 0xCu);
}

uint64_t OUTLINED_FUNCTION_14_2(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  return dispatch thunk of CandidateSuggestion.context.getter();
}

uint64_t OUTLINED_FUNCTION_18_2()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_19_2()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_23_0()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_24_1()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t OUTLINED_FUNCTION_25_1()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_27_1()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_29_1()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_30_0()
{
  return swift_bridgeObjectRelease_n();
}

void OUTLINED_FUNCTION_31_0(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t OUTLINED_FUNCTION_32()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t OUTLINED_FUNCTION_36_0()
{
  return 0;
}

void OUTLINED_FUNCTION_43_0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

void OUTLINED_FUNCTION_44_0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

void OUTLINED_FUNCTION_45_0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 0x16u);
}

uint64_t OUTLINED_FUNCTION_47_0()
{
  return v0;
}

double OUTLINED_FUNCTION_48_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_OWORD *a22)
{
  double result = 0.0;
  a22[2] = 0u;
  a22[3] = 0u;
  *a22 = 0u;
  a22[1] = 0u;
  return result;
}

BOOL OUTLINED_FUNCTION_51_0@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void *OUTLINED_FUNCTION_52_0(void *a1, uint64_t a2)
{
  return __swift_project_boxed_opaque_existential_1(a1, a2);
}

uint64_t OUTLINED_FUNCTION_53_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_54_0(uint64_t a1)
{
  return a1 - 8;
}

uint64_t OUTLINED_FUNCTION_56_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_57_0()
{
  return v0;
}

uint64_t LinkSuggestionsOwners.getOwner()@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  if (a1)
  {
    if (a1 == 1)
    {
      if (one-time initialization token for appIntentsOwner != -1) {
        swift_once();
      }
      uint64_t v3 = &static LinkSuggestionsOwners.appIntentsOwner;
    }
    else
    {
      if (one-time initialization token for autoshortcutsOwner != -1) {
        swift_once();
      }
      uint64_t v3 = &static LinkSuggestionsOwners.autoshortcutsOwner;
    }
  }
  else
  {
    if (one-time initialization token for linkOwner != -1) {
      swift_once();
    }
    uint64_t v3 = &static LinkSuggestionsOwners.linkOwner;
  }
  uint64_t v4 = *v3;
  a2[3] = type metadata accessor for DefaultOwner();
  a2[4] = lazy protocol witness table accessor for type DefaultOwner and conformance DefaultOwner((unint64_t *)&lazy protocol witness table cache variable for type DefaultOwner and conformance DefaultOwner, (void (*)(uint64_t))&type metadata accessor for DefaultOwner);
  *a2 = v4;
  return swift_retain();
}

uint64_t one-time initialization function for linkOwner(uint64_t a1)
{
  return one-time initialization function for linkOwner(a1, &enum case for CoreSuggestionGroups.app(_:), 1802398060, 0xE400000000000000, &static LinkSuggestionsOwners.linkOwner);
}

uint64_t one-time initialization function for appIntentsOwner(uint64_t a1)
{
  return one-time initialization function for linkOwner(a1, &enum case for CoreSuggestionGroups.app(_:), 0x6E65746E49707061, 0xEA00000000007374, &static LinkSuggestionsOwners.appIntentsOwner);
}

uint64_t one-time initialization function for linkOwner(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7 = type metadata accessor for CoreSuggestionGroups();
  v10[3] = v7;
  v10[4] = lazy protocol witness table accessor for type DefaultOwner and conformance DefaultOwner(&lazy protocol witness table cache variable for type CoreSuggestionGroups and conformance CoreSuggestionGroups, (void (*)(uint64_t))&type metadata accessor for CoreSuggestionGroups);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v10);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v7 - 8) + 104))(boxed_opaque_existential_1, *a2, v7);
  type metadata accessor for DefaultOwner();
  swift_allocObject();
  uint64_t result = DefaultOwner.init(group:identifier:)();
  *a5 = result;
  return result;
}

uint64_t one-time initialization function for autoshortcutsOwner(uint64_t a1)
{
  return one-time initialization function for linkOwner(a1, &enum case for CoreSuggestionGroups.thirdParty(_:), 0x726F68736F747561, 0xED00007374756374, &static LinkSuggestionsOwners.autoshortcutsOwner);
}

SiriLinkSuggestionsPlugin::LinkSuggestionsOwners_optional __swiftcall LinkSuggestionsOwners.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of LinkSuggestionsOwners.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return (SiriLinkSuggestionsPlugin::LinkSuggestionsOwners_optional)3;
  }
  else {
    return (SiriLinkSuggestionsPlugin::LinkSuggestionsOwners_optional)v3;
  }
}

uint64_t LinkSuggestionsOwners.rawValue.getter(char a1)
{
  return *(void *)&aLink_2[8 * a1];
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LinkSuggestionsOwners(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LinkSuggestionsOwners()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

Swift::Int specialized RawRepresentable<>.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LinkSuggestionsOwners(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  LinkSuggestionsOwners.rawValue.getter(a2);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LinkSuggestionsOwners(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, char a2)
{
  return Hasher._finalize()();
}

SiriLinkSuggestionsPlugin::LinkSuggestionsOwners_optional protocol witness for RawRepresentable.init(rawValue:) in conformance LinkSuggestionsOwners@<W0>(Swift::String *a1@<X0>, SiriLinkSuggestionsPlugin::LinkSuggestionsOwners_optional *a2@<X8>)
{
  result.value = LinkSuggestionsOwners.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance LinkSuggestionsOwners@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = LinkSuggestionsOwners.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for OwnerProvider.getOwner() in conformance LinkSuggestionsOwners@<X0>(uint64_t *a1@<X8>)
{
  return LinkSuggestionsOwners.getOwner()(*v1, a1);
}

Swift::String __swiftcall LinkGroups.getName()()
{
  uint64_t v0 = 1802398060;
  uint64_t v1 = (void *)0xE400000000000000;
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

void AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors.hash(into:)()
{
}

uint64_t LinkGroups.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 1802398060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

Swift::Int LinkGroups.CodingKeys.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t LinkGroups.LinkCodingKeys.init(stringValue:)()
{
  return 1;
}

uint64_t LinkGroups.LinkCodingKeys.stringValue.getter()
{
  return 0;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LinkGroups.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance LinkGroups.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = LinkGroups.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LinkGroups.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LinkGroups.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance LinkGroups.LinkCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = LinkGroups.LinkCodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance LinkGroups.LinkCodingKeys()
{
  return LinkSuggestedAction.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance LinkGroups.LinkCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = static AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors.__derived_enum_equals(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LinkGroups.LinkCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LinkGroups.LinkCodingKeys and conformance LinkGroups.LinkCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LinkGroups.LinkCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LinkGroups.LinkCodingKeys and conformance LinkGroups.LinkCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t LinkGroups.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<LinkGroups.LinkCodingKeys>);
  OUTLINED_FUNCTION_4_0();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_14_0();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<LinkGroups.CodingKeys>);
  OUTLINED_FUNCTION_4_0();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_14_0();
  uint64_t v15 = v14 - v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  lazy protocol witness table accessor for type LinkGroups.LinkCodingKeys and conformance LinkGroups.LinkCodingKeys();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v8, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v15, v9);
}

unint64_t lazy protocol witness table accessor for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LinkGroups.LinkCodingKeys and conformance LinkGroups.LinkCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type LinkGroups.LinkCodingKeys and conformance LinkGroups.LinkCodingKeys;
  if (!lazy protocol witness table cache variable for type LinkGroups.LinkCodingKeys and conformance LinkGroups.LinkCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkGroups.LinkCodingKeys and conformance LinkGroups.LinkCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LinkGroups.LinkCodingKeys and conformance LinkGroups.LinkCodingKeys;
  if (!lazy protocol witness table cache variable for type LinkGroups.LinkCodingKeys and conformance LinkGroups.LinkCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkGroups.LinkCodingKeys and conformance LinkGroups.LinkCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LinkGroups.LinkCodingKeys and conformance LinkGroups.LinkCodingKeys;
  if (!lazy protocol witness table cache variable for type LinkGroups.LinkCodingKeys and conformance LinkGroups.LinkCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkGroups.LinkCodingKeys and conformance LinkGroups.LinkCodingKeys);
  }
  return result;
}

Swift::Int LinkGroups.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t LinkGroups.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<LinkGroups.LinkCodingKeys>);
  OUTLINED_FUNCTION_4_0();
  uint64_t v27 = v4;
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_14_0();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<LinkGroups.CodingKeys>);
  OUTLINED_FUNCTION_4_0();
  uint64_t v28 = v10;
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_14_0();
  uint64_t v14 = v13 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    goto LABEL_6;
  }
  uint64_t v26 = v14;
  uint64_t v15 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v16 = *(void *)(v15 + 16);
  if (!v16
    || (specialized ArraySlice.subscript.getter(1, v16, v15, v15 + 32, 0, (2 * v16) | 1),
        uint64_t v18 = v17,
        unint64_t v20 = v19,
        swift_bridgeObjectRelease(),
        v18 != v20 >> 1))
  {
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v23 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v23 = &type metadata for LinkGroups;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v23, enum case for DecodingError.typeMismatch(_:), v21);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v9);
LABEL_6:
    uint64_t v25 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v25);
  }
  lazy protocol witness table accessor for type LinkGroups.LinkCodingKeys and conformance LinkGroups.LinkCodingKeys();
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v8, v3);
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v14, v9);
  uint64_t v25 = (uint64_t)a1;
  return __swift_destroy_boxed_opaque_existential_1(v25);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LinkGroups(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type LinkGroups and conformance LinkGroups();
  return static SuggestionGroup.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LinkGroups(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type LinkGroups and conformance LinkGroups();
  return SuggestionGroup.hash(into:)(a1, a2, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LinkGroups()
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type LinkGroups and conformance LinkGroups()
{
  unint64_t result = lazy protocol witness table cache variable for type LinkGroups and conformance LinkGroups;
  if (!lazy protocol witness table cache variable for type LinkGroups and conformance LinkGroups)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkGroups and conformance LinkGroups);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LinkGroups and conformance LinkGroups;
  if (!lazy protocol witness table cache variable for type LinkGroups and conformance LinkGroups)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkGroups and conformance LinkGroups);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LinkGroups and conformance LinkGroups;
  if (!lazy protocol witness table cache variable for type LinkGroups and conformance LinkGroups)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkGroups and conformance LinkGroups);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LinkGroups and conformance LinkGroups;
  if (!lazy protocol witness table cache variable for type LinkGroups and conformance LinkGroups)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkGroups and conformance LinkGroups);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LinkGroups and conformance LinkGroups;
  if (!lazy protocol witness table cache variable for type LinkGroups and conformance LinkGroups)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkGroups and conformance LinkGroups);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance LinkGroups(void *a1)
{
  return LinkGroups.init(from:)(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance LinkGroups(void *a1)
{
  return LinkGroups.encode(to:)(a1);
}

uint64_t specialized ArraySlice.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((uint64_t)(a6 >> 1) < result || (uint64_t)(a6 >> 1) < a2) {
    goto LABEL_10;
  }
  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((a2 & 0x8000000000000000) == 0) {
    return swift_unknownObjectRetain();
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for LinkSuggestionsOwners(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for LinkSuggestionsOwners(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1F73CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for LinkSuggestionsOwners(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for LinkSuggestionsOwners()
{
  return &type metadata for LinkSuggestionsOwners;
}

uint64_t getEnumTag for LinkGroups()
{
  return 0;
}

ValueMetadata *type metadata accessor for LinkGroups()
{
  return &type metadata for LinkGroups;
}

uint64_t getEnumTagSinglePayload for LinkGroups(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for LinkGroups(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1F88CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for LinkGroups.CodingKeys()
{
  return &unk_55BC0;
}

void *type metadata accessor for LinkGroups.LinkCodingKeys()
{
  return &unk_55BE0;
}

uint64_t lazy protocol witness table accessor for type DefaultOwner and conformance DefaultOwner(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *LinkSuggestionsRepository.suggestionIdentifier.unsafeMutableAddressor()
{
  if (one-time initialization token for suggestionIdentifier != -1) {
    swift_once();
  }
  return &static LinkSuggestionsRepository.suggestionIdentifier;
}

void *LinkSuggestionsRepository.resolvedAction.unsafeMutableAddressor()
{
  return &static LinkSuggestionsRepository.resolvedAction;
}

void one-time initialization function for suggestionIdentifier()
{
  static LinkSuggestionsRepository.suggestionIdentifier = 0x6775735F6B6E696CLL;
  unk_5FAB0 = 0xEF6E6F6974736567;
}

uint64_t static LinkSuggestionsRepository.suggestionIdentifier.getter()
{
  if (one-time initialization token for suggestionIdentifier != -1) {
    swift_once();
  }
  uint64_t v0 = static LinkSuggestionsRepository.suggestionIdentifier;
  swift_bridgeObjectRetain();
  return v0;
}

unint64_t static LinkSuggestionsRepository.resolvedAction.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t LinkSuggestionsRepository.getPooledSuggestions()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Any, Any?>);
  __chkstk_darwin(v1 - 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SuggestionDetails>);
  type metadata accessor for SuggestionDetails();
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_47FC0;
  if (one-time initialization token for suggestionIdentifier != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, ResolvableParameter)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_47FC0;
  *(void *)(inited + 32) = 0xD00000000000001FLL;
  *(void *)(inited + 40) = 0x800000000004AC40;
  type metadata accessor for ResolvableParameter();
  uint64_t v4 = one-time initialization token for typeIdentifier;
  swift_bridgeObjectRetain();
  if (v4 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  static SuggestionTransformers.passthroughParameterForLogging()();
  *(void *)(inited + 48) = ResolvableParameter.__allocating_init(typeIdentifier:required:loggingKeyTransformer:)();
  Dictionary.init(dictionaryLiteral:)();
  outlined init with copy of LinkClient(v0 + 16, (uint64_t)&v8);
  uint64_t v5 = type metadata accessor for LinkViewProvider();
  uint64_t v6 = swift_allocObject();
  type metadata accessor for LinkInvocationActionProvider();
  *(void *)(v6 + 56) = swift_allocObject();
  outlined init with take of LinkDialogIdProvider(&v8, v6 + 16);
  uint64_t v9 = v5;
  uint64_t v10 = lazy protocol witness table accessor for type LinkViewProvider and conformance LinkViewProvider(&lazy protocol witness table cache variable for type LinkViewProvider and conformance LinkViewProvider, 255, (void (*)(uint64_t))type metadata accessor for LinkViewProvider);
  *(void *)&long long v8 = v6;
  type metadata accessor for LinkLoggingActionKeyMapper();
  swift_allocObject();
  lazy protocol witness table accessor for type LinkViewProvider and conformance LinkViewProvider(&lazy protocol witness table cache variable for type LinkLoggingActionKeyMapper and conformance LinkLoggingActionKeyMapper, 255, (void (*)(uint64_t))type metadata accessor for LinkLoggingActionKeyMapper);
  SuggestionDetails.init(suggestionId:resolverParams:description:viewProvider:actionIdKeyMapper:filter:)();
  return v2;
}

uint64_t protocol witness for InternalSuggestionsRepository.getPooledSuggestions() in conformance LinkSuggestionsRepository()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t protocol witness for InternalSuggestionsRepository.getAsyncPooledSuggestions() in conformance LinkSuggestionsRepository(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for InternalSuggestionsRepository.getAsyncPooledSuggestions() in conformance LinkSuggestionsRepository;
  return InternalSuggestionsRepository.getAsyncPooledSuggestions()(a1, a2);
}

uint64_t protocol witness for InternalSuggestionsRepository.getAsyncPooledSuggestions() in conformance LinkSuggestionsRepository(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  int v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t protocol witness for OwnerProvider.getOwner() in conformance LinkSuggestionsRepository(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return SuggestionsRepository.getOwner()(a1, WitnessTable);
}

uint64_t base witness table accessor for InternalSuggestionsRepository in LinkSuggestionsRepository(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type LinkViewProvider and conformance LinkViewProvider(&lazy protocol witness table cache variable for type LinkSuggestionsRepository and conformance LinkSuggestionsRepository, a2, (void (*)(uint64_t))type metadata accessor for LinkSuggestionsRepository);
}

uint64_t type metadata accessor for LinkSuggestionsRepository()
{
  return self;
}

uint64_t base witness table accessor for OwnerProvider in LinkSuggestionsRepository(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type LinkViewProvider and conformance LinkViewProvider(&lazy protocol witness table cache variable for type LinkSuggestionsRepository and conformance LinkSuggestionsRepository, a2, (void (*)(uint64_t))type metadata accessor for LinkSuggestionsRepository);
}

uint64_t lazy protocol witness table accessor for type LinkViewProvider and conformance LinkViewProvider(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo20NSTextCheckingResultCG_SSs5NeverOTg5095_s25SiriLinkSuggestionsPlugin11PhraseUtilsO16getVariableNames14phraseTemplateSaySSGSS_tFZSSSo20deF6CXEfU_SSTf1cn_n(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v6 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  if (v6)
  {
    while (1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      if (v6 < 0) {
        break;
      }
      uint64_t v18 = v6;
      uint64_t v7 = 0;
      while (v6 != v7)
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v8 = *(id *)(a1 + 8 * v7 + 32);
        }
        uint64_t v9 = v8;
        [v8 rangeAtIndex:1];
        Range<>.init(_:in:)();
        if (v10) {
          goto LABEL_18;
        }
        uint64_t v11 = a2;
        uint64_t v12 = a3;
        String.subscript.getter();
        uint64_t v13 = static String._fromSubstring(_:)();
        uint64_t v15 = v14;

        swift_bridgeObjectRelease();
        unint64_t v16 = _swiftEmptyArrayStorage[2];
        if (v16 >= _swiftEmptyArrayStorage[3] >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        ++v7;
        _swiftEmptyArrayStorage[2] = v16 + 1;
        uint64_t v17 = (char *)&_swiftEmptyArrayStorage[2 * v16];
        *((void *)v17 + 4) = v13;
        *((void *)v17 + 5) = v15;
        uint64_t v6 = v18;
        a3 = v12;
        a2 = v11;
        if (v18 == v7) {
          goto LABEL_13;
        }
      }
      __break(1u);
LABEL_15:
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v6) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
  }
}

uint64_t static PhraseUtils.getHydratedPhrase(phraseTemplate:parameters:)(void **a1, uint64_t a2, uint64_t a3)
{
  if (one-time initialization token for variableNameRegex != -1) {
LABEL_27:
  }
    swift_once();
  uint64_t v6 = (void *)static PhraseUtils.variableNameRegex;
  OUTLINED_FUNCTION_1_2();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_1_2();
  uint64_t v8 = String.UTF16View.count.getter();
  swift_bridgeObjectRelease();
  id v9 = objc_msgSend(v6, "matchesInString:options:range:", v7, 0, 0, v8);

  type metadata accessor for NSTextCheckingResult();
  unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo20NSTextCheckingResultCG_SSs5NeverOTg5095_s25SiriLinkSuggestionsPlugin11PhraseUtilsO16getVariableNames14phraseTemplateSaySSGSS_tFZSSSo20deF6CXEfU_SSTf1cn_n(v10, (uint64_t)a1, a2);
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  if (one-time initialization token for appIntentsSuggestions != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.appIntentsSuggestions);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    v44[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v17 = OUTLINED_FUNCTION_1_2();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v16 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v20 = Dictionary.description.getter();
    uint64_t v21 = a2;
    uint64_t v22 = a1;
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v24, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    a1 = v22;
    a2 = v21;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v14, v15, "Hydrating phraseTemplate - %s with parameters - %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_10();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = v12[2];
  if (!v25)
  {
    swift_bridgeObjectRetain();
LABEL_17:
    swift_bridgeObjectRelease();
    return OUTLINED_FUNCTION_1_2();
  }
  uint64_t v26 = v12[4];
  uint64_t v27 = (void *)v12[5];
  uint64_t v42 = v26;
  if (*(void *)(a3 + 16))
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, (uint64_t)v27);
    if (v29)
    {
      uint64_t v43 = a2;
      a2 = (uint64_t)a1;
      uint64_t v30 = 0;
      a1 = (void **)(v12 + 7);
      uint64_t v31 = v26;
      while (1)
      {
        uint64_t v32 = a3;
        a3 = *(void *)(*(void *)(a3 + 56) + 16 * v28);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v44[0] = a2;
        v44[1] = v43;
        v33._uint64_t countAndFlagsBits = v31;
        v33._object = v27;
        String.append(_:)(v33);
        swift_bridgeObjectRelease();
        v34._uint64_t countAndFlagsBits = 125;
        v34._object = (void *)0xE100000000000000;
        String.append(_:)(v34);
        lazy protocol witness table accessor for type String and conformance String();
        a2 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        uint64_t v36 = v35;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v43 = v36;
        if (v25 - 1 == v30) {
          goto LABEL_17;
        }
        if ((unint64_t)++v30 >= v12[2])
        {
          __break(1u);
          goto LABEL_27;
        }
        uint64_t v31 = (uint64_t)*(a1 - 1);
        uint64_t v27 = *a1;
        if (!*(void *)(v32 + 16))
        {
          uint64_t v42 = (uint64_t)*(a1 - 1);
          swift_bridgeObjectRetain();
          goto LABEL_22;
        }
        a3 = v32;
        a1 += 2;
        swift_bridgeObjectRetain_n();
        unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v31, (uint64_t)v27);
        if ((v37 & 1) == 0)
        {
          uint64_t v42 = v31;
          swift_bridgeObjectRelease();
          goto LABEL_22;
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  id v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v38, v39))
  {
    unint64_t v40 = (uint8_t *)swift_slowAlloc();
    v44[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v40 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, (unint64_t)v27, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v38, v39, "display representable cannot be obtained for variable - %s ", v40, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_10();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return OUTLINED_FUNCTION_1_2();
}

uint64_t static PhraseUtils.getVariableNames(phraseTemplate:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for variableNameRegex != -1) {
    swift_once();
  }
  uint64_t v4 = (void *)static PhraseUtils.variableNameRegex;
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRetain();
  uint64_t v6 = String.UTF16View.count.getter();
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(v4, "matchesInString:options:range:", v5, 0, 0, v6);

  type metadata accessor for NSTextCheckingResult();
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo20NSTextCheckingResultCG_SSs5NeverOTg5095_s25SiriLinkSuggestionsPlugin11PhraseUtilsO16getVariableNames14phraseTemplateSaySSGSS_tFZSSSo20deF6CXEfU_SSTf1cn_n(v8, a1, a2);
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t static PhraseUtils.getHydratedPhrase(phraseTemplate:parameters:locale:)(void **a1, uint64_t a2)
{
  uint64_t v4 = specialized Dictionary.compactMapValues<A>(_:)((void (*)(uint64_t *__return_ptr, _OWORD *))partial apply for closure #1 in static PhraseUtils.getHydratedPhrase(phraseTemplate:parameters:locale:));
  uint64_t v5 = static PhraseUtils.getHydratedPhrase(phraseTemplate:parameters:)(a1, a2, v4);
  swift_bridgeObjectRelease();
  return v5;
}

id one-time initialization function for variableNameRegex()
{
  id v0 = objc_allocWithZone((Class)NSRegularExpression);
  id result = @nonobjc NSRegularExpression.init(pattern:options:)(0x2B775C287B5C245CLL, 0xEB000000007D5C29, 0);
  static PhraseUtils.variableNameRegex = (uint64_t)result;
  return result;
}

uint64_t closure #1 in static PhraseUtils.getHydratedPhrase(phraseTemplate:parameters:locale:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  outlined init with copy of SiriSuggestions.DisplayRepresentable?(a1, (uint64_t)v7);
  uint64_t v3 = v8;
  if (v8)
  {
    __swift_project_boxed_opaque_existential_1(v7, v8);
    uint64_t v4 = dispatch thunk of SiriSuggestions.DisplayRepresentable.getDisplay(for:)();
    uint64_t v3 = v5;
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  else
  {
    uint64_t result = outlined destroy of SiriSuggestions.DisplayRepresentable?((uint64_t)v7);
    uint64_t v4 = 0;
  }
  *a2 = v4;
  a2[1] = v3;
  return result;
}

id @nonobjc NSRegularExpression.init(pattern:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = 0;
  id v6 = [v3 initWithPattern:v5 options:a3 error:&v10];

  if (v6)
  {
    id v7 = v10;
  }
  else
  {
    id v8 = v10;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

unint64_t type metadata accessor for NSTextCheckingResult()
{
  unint64_t result = lazy cache variable for type metadata for NSTextCheckingResult;
  if (!lazy cache variable for type metadata for NSTextCheckingResult)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSTextCheckingResult);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

ValueMetadata *type metadata accessor for PhraseUtils()
{
  return &type metadata for PhraseUtils;
}

uint64_t outlined init with copy of SiriSuggestions.DisplayRepresentable?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SiriSuggestions.DisplayRepresentable?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_1_2()
{
  return v0;
}

void one-time initialization function for forceEnabled()
{
  static SiriLinkSuggestionsFeatureFlags.forceEnabled = (uint64_t)&_swiftEmptyDictionarySingleton;
}

uint64_t *SiriLinkSuggestionsFeatureFlags.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  return &static SiriLinkSuggestionsFeatureFlags.forceEnabled;
}

uint64_t static SiriLinkSuggestionsFeatureFlags.forceEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static SiriLinkSuggestionsFeatureFlags.forceEnabled.setter(uint64_t a1)
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  static SiriLinkSuggestionsFeatureFlags.forceEnabled = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static SiriLinkSuggestionsFeatureFlags.forceEnabled.modify())()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static SiriLinkSuggestionsFeatureFlags.forceEnabled.modify;
}

const char *SiriLinkSuggestionsFeatureFlags.domain.getter()
{
  return "SiriLinkSuggestions";
}

const char *SiriLinkSuggestionsFeatureFlags.feature.getter(char a1)
{
  if (a1) {
    return "appIntents";
  }
  else {
    return "link";
  }
}

uint64_t static SiriLinkSuggestionsFeatureFlags.isLinkEnabled.getter()
{
  return SiriLinkSuggestionsFeatureFlags.isEnabled.getter(0);
}

uint64_t SiriLinkSuggestionsFeatureFlags.isEnabled.getter(char a1)
{
  char v1 = a1 & 1;
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v2 = static SiriLinkSuggestionsFeatureFlags.forceEnabled;
  if (*(void *)(static SiriLinkSuggestionsFeatureFlags.forceEnabled + 16)
    && (unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(v1), (v4 & 1) != 0))
  {
    char v5 = *(unsigned char *)(*(void *)(v2 + 56) + v3);
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    id v8 = &type metadata for SiriLinkSuggestionsFeatureFlags;
    unint64_t v9 = lazy protocol witness table accessor for type SiriLinkSuggestionsFeatureFlags and conformance SiriLinkSuggestionsFeatureFlags();
    v7[0] = v1;
    char v5 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  return v5 & 1;
}

uint64_t static SiriLinkSuggestionsFeatureFlags.isAppIntentsEnabled.getter()
{
  if (SiriLinkSuggestionsFeatureFlags.isEnabled.getter(1)) {
    return AFDeviceSupportsSystemAssistantExperience();
  }
  else {
    return 0;
  }
}

uint64_t SiriLinkSuggestionsFeatureFlags.withForcedEnabled<A>(_:block:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  *(unsigned char *)(v5 + 105) = a5;
  *(void *)(v5 + 72) = a3;
  *(void *)(v5 + 80) = a4;
  *(unsigned char *)(v5 + 104) = a2;
  *(void *)(v5 + 64) = a1;
  return _swift_task_switch(SiriLinkSuggestionsFeatureFlags.withForcedEnabled<A>(_:block:), 0, 0);
}

uint64_t SiriLinkSuggestionsFeatureFlags.withForcedEnabled<A>(_:block:)()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  char v1 = *(int **)(v0 + 72);
  char v2 = *(unsigned char *)(v0 + 104);
  char v3 = *(unsigned char *)(v0 + 105) & 1;
  swift_beginAccess();
  *(unsigned char *)(v0 + 106) = specialized Dictionary.subscript.getter(v3, static SiriLinkSuggestionsFeatureFlags.forceEnabled);
  swift_endAccess();
  swift_beginAccess();
  specialized Dictionary._Variant.setValue(_:forKey:)(v2, v3);
  swift_endAccess();
  id v7 = (uint64_t (*)(uint64_t))((char *)v1 + *v1);
  char v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v4;
  *char v4 = v0;
  v4[1] = SiriLinkSuggestionsFeatureFlags.withForcedEnabled<A>(_:block:);
  uint64_t v5 = *(void *)(v0 + 64);
  return v7(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    char v2 = SiriLinkSuggestionsFeatureFlags.withForcedEnabled<A>(_:block:);
  }
  else {
    char v2 = SiriLinkSuggestionsFeatureFlags.withForcedEnabled<A>(_:block:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  SiriLinkSuggestionsFeatureFlags.updateForceEnabledFlags(oldFF:)(*(unsigned char *)(v0 + 106), *(unsigned char *)(v0 + 105) & 1);
  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  SiriLinkSuggestionsFeatureFlags.updateForceEnabledFlags(oldFF:)(*(unsigned char *)(v0 + 106), *(unsigned char *)(v0 + 105) & 1);
  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t SiriLinkSuggestionsFeatureFlags.updateForceEnabledFlags(oldFF:)(char a1, char a2)
{
  char v3 = a2 & 1;
  if (a1 == 2)
  {
    if (one-time initialization token for forceEnabled != -1) {
      swift_once();
    }
    swift_beginAccess();
    specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if (v4)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v9 = static SiriLinkSuggestionsFeatureFlags.forceEnabled;
      uint64_t v6 = static SiriLinkSuggestionsFeatureFlags.forceEnabled;
      static SiriLinkSuggestionsFeatureFlags.forceEnabled = 0x8000000000000000;
      Swift::Int v7 = *(void *)(v6 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<SiriLinkSuggestionsFeatureFlags, Bool>);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v7);
      lazy protocol witness table accessor for type SiriLinkSuggestionsFeatureFlags and conformance SiriLinkSuggestionsFeatureFlags();
      _NativeDictionary._delete(at:)();
      static SiriLinkSuggestionsFeatureFlags.forceEnabled = v9;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    if (one-time initialization token for forceEnabled != -1) {
      swift_once();
    }
    swift_beginAccess();
    specialized Dictionary._Variant.setValue(_:forKey:)(a1 & 1, v3);
  }
  return swift_endAccess();
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance SiriLinkSuggestionsFeatureFlags()
{
  return SiriLinkSuggestionsFeatureFlags.feature.getter(*v0);
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(char a1, char a2)
{
  char v4 = a2 & 1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  *char v2 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, v4, isUniquelyReferenced_nonNull_native);
  *char v2 = v7;
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type SiriLinkSuggestionsFeatureFlags and conformance SiriLinkSuggestionsFeatureFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkSuggestionsFeatureFlags and conformance SiriLinkSuggestionsFeatureFlags;
  if (!lazy protocol witness table cache variable for type SiriLinkSuggestionsFeatureFlags and conformance SiriLinkSuggestionsFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkSuggestionsFeatureFlags and conformance SiriLinkSuggestionsFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkSuggestionsFeatureFlags and conformance SiriLinkSuggestionsFeatureFlags;
  if (!lazy protocol witness table cache variable for type SiriLinkSuggestionsFeatureFlags and conformance SiriLinkSuggestionsFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkSuggestionsFeatureFlags and conformance SiriLinkSuggestionsFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkSuggestionsFeatureFlags and conformance SiriLinkSuggestionsFeatureFlags;
  if (!lazy protocol witness table cache variable for type SiriLinkSuggestionsFeatureFlags and conformance SiriLinkSuggestionsFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkSuggestionsFeatureFlags and conformance SiriLinkSuggestionsFeatureFlags);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SiriLinkSuggestionsFeatureFlags(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x21A84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriLinkSuggestionsFeatureFlags()
{
  return &type metadata for SiriLinkSuggestionsFeatureFlags;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_So32LNFullyQualifiedActionIdentifierCs5NeverOTg5052_s25SiriLinkSuggestionsPlugin07DefaultB6ClientC17getf87Metadata19forBundleIdentifier04withH11IdentifiersSDySSSo08LNActionI0CGSS_SaySSGtKFSo016D20QualifiedhL0CSSXEfU_SSTf1cn_n(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = a1 + 40;
    do
    {
      objc_allocWithZone((Class)LNFullyQualifiedActionIdentifier);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      @nonobjc LNFullyQualifiedActionIdentifier.init(actionIdentifier:bundleIdentifier:)();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v3 += 16;
      --v1;
    }
    while (v1);
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay25SiriLinkSuggestionsPlugin0E23SuggestedActionsRequestVG_So013LNSuggestionsJ0Cs5NeverOTg504_s25def29Plugin07DefaultB6ClientC19geth38Actions3forSayAA0bH6ActionVGSayAA0bhI7j10VG_tFSo013K58L0CAJcfu0_33_453d8a4a6e74da537e2f1aa14de2db16AjMTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    type metadata accessor for LNActionParameterMetadata(0, (unint64_t *)&lazy cache variable for type metadata for LNSuggestionsRequest);
    unsigned int v4 = (char *)(a1 + 49);
    do
    {
      uint64_t v5 = *(void *)(v4 - 17);
      uint64_t v6 = *(void *)(v4 - 9);
      char v7 = *(v4 - 1);
      char v8 = *v4;
      v4 += 24;
      swift_bridgeObjectRetain();
      LNSuggestionsRequest.__allocating_init(bundleIdentifier:onScreen:explicitRequest:)(v5, v6, v7, v8);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo17LNSuggestedActionCG_25SiriLinkSuggestionsPlugin0g9SuggestedE0Vs5NeverOTg504_s25fgh29Plugin07DefaultB6ClientC19getj20Actions3forSayAA0bH6e29VGSayAA0bhI7RequestVG_tFAHSS_s5So011D19K0CGtXEfU0_AgMXEfU_AI0gj7ActionsY0VTf1cn_n(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  LODWORD(v4) = a4;
  unint64_t v6 = a1;
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v7 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  if (v7)
  {
    while (1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      if (v7 < 0) {
        break;
      }
      uint64_t v8 = 0;
      unint64_t v18 = v6 & 0xC000000000000001;
      unint64_t v19 = v6;
      unsigned int v16 = (v4 >> 8) & 1;
      char v17 = v4 & 1;
      while (v7 != v8)
      {
        if (v18) {
          id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v9 = *(id *)(v6 + 8 * v8 + 32);
        }
        id v10 = v9;
        swift_bridgeObjectRetain();
        id v4 = [v10 action];
        id v11 = [v10 systemProtocol];
        uint64_t v12 = outlined bridged method (pb) of @objc LNSuggestedAction.dialogParameters.getter(v10);
        if (!v12)
        {
          type metadata accessor for LNSuggestedActionDialogParameterKey(0);
          lazy protocol witness table accessor for type LNSuggestedActionDialogParameterKey and conformance LNSuggestedActionDialogParameterKey();
          uint64_t v12 = Dictionary.init(dictionaryLiteral:)();
        }
        uint64_t v13 = v12;

        unint64_t v14 = _swiftEmptyArrayStorage[2];
        if (v14 >= _swiftEmptyArrayStorage[3] >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        ++v8;
        _swiftEmptyArrayStorage[2] = v14 + 1;
        os_log_type_t v15 = &_swiftEmptyArrayStorage[6 * v14];
        unint64_t v6 = v19;
        v15[4] = a2;
        v15[5] = a3;
        *((unsigned char *)v15 + 48) = v17;
        *((unsigned char *)v15 + 49) = v16;
        v15[7] = v4;
        v15[8] = v11;
        v15[9] = v13;
        if (v7 == v8) {
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_16:
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v7) {
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
  }
}

void *specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (a1 >> 62) {
    goto LABEL_23;
  }
  uint64_t v7 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  if (v7)
  {
    while (1)
    {
      unint64_t v8 = 0;
      uint64_t v17 = v4;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_7:
        id v10 = v9;
        unint64_t v11 = v8 + 1;
        if (__OFADD__(v8, 1)) {
          goto LABEL_22;
        }
        uint64_t v4 = (uint64_t)[v9 parentIdentifier];
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v14 = v13;

        if (v12 == a2 && v14 == a3)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v4 & 1) == 0) {
            goto LABEL_16;
          }
        }
        if (!objc_msgSend(v10, "kind", v17))
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          uint64_t v4 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          goto LABEL_18;
        }
LABEL_16:

LABEL_18:
        ++v8;
        if (v11 == v7) {
          goto LABEL_24;
        }
      }
      if (v8 < *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8))) {
        break;
      }
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      if (!v7) {
        goto LABEL_24;
      }
    }
    id v9 = *(id *)(a1 + 8 * v8 + 32);
    goto LABEL_7;
  }
LABEL_24:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    uint64_t v5 = _swiftEmptyArrayStorage;
    unint64_t v6 = &_s10Foundation12NotificationV36_unconditionallyBridgeFromObjectiveCyACSo14NSNotificationCSgFZ_ptr;
    do
    {
      uint64_t v7 = *(v4 - 1);
      uint64_t v8 = *v4;
      id v9 = objc_allocWithZone((Class)v6[490]);
      swift_bridgeObjectRetain_n();
      id v10 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(v7, v8, 0);
      if (v2)
      {
        swift_errorRelease();
        swift_bridgeObjectRelease();
        uint64_t v2 = 0;
      }
      else
      {
        unint64_t v11 = v10;
        if (v10)
        {
          id v12 = [self sharedInstance];
          NSString v13 = String._bridgeToObjectiveC()();
          uint64_t v22 = (uint64_t)v5;
          id v14 = [v12 autoShortcutsForApplicationRecord:v11 localeIdentifier:v13];

          type metadata accessor for LNActionParameterMetadata(0, (unint64_t *)&lazy cache variable for type metadata for LNAutoShortcut);
          uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v5 = (void *)v22;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v22 + 16) + 1, 1, v22);
            uint64_t v5 = v19;
          }
          unint64_t v17 = v5[2];
          unint64_t v16 = v5[3];
          if (v17 >= v16 >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1, (uint64_t)v5);
            uint64_t v5 = v20;
          }
          long long v5[2] = v17 + 1;
          unint64_t v18 = &v5[3 * v17];
          _OWORD v18[4] = v7;
          v18[5] = v8;
          v18[6] = v15;
          unint64_t v6 = &_s10Foundation12NotificationV36_unconditionallyBridgeFromObjectiveCyACSo14NSNotificationCSgFZ_ptr;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return v5;
}

uint64_t DefaultLinkClient.appIntentSuggestionsSignposter.unsafeMutableAddressor()
{
  if (one-time initialization token for appIntentSuggestionsSignposter != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for OSSignposter();
  return __swift_project_value_buffer(v0, (uint64_t)static DefaultLinkClient.appIntentSuggestionsSignposter);
}

uint64_t static DefaultLinkClient.appIntentSuggestionsSignposter.getter()
{
  if (one-time initialization token for appIntentSuggestionsSignposter != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for OSSignposter();
  __swift_project_value_buffer(v0, (uint64_t)static DefaultLinkClient.appIntentSuggestionsSignposter);
  uint64_t v1 = OUTLINED_FUNCTION_39_1();
  return v2(v1);
}

uint64_t DefaultLinkClient.__allocating_init(metadataProvider:suggestionsProvider:registryObserver:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  DefaultLinkClient.init(metadataProvider:suggestionsProvider:registryObserver:)(a1, a2, a3);
  return v6;
}

void *DefaultLinkClient.init(metadataProvider:suggestionsProvider:registryObserver:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_47FD0;
  *(void *)(inited + 32) = 0x53552D6E65;
  *(void *)(inited + 40) = 0xE500000000000000;
  *(void *)(inited + 48) = 0x42472D6E65;
  *(void *)(inited + 56) = 0xE500000000000000;
  *(void *)(inited + 64) = 0x41432D6E65;
  *(void *)(inited + 72) = 0xE500000000000000;
  *(void *)(inited + 80) = 0x55412D6E65;
  *(void *)(inited + 88) = 0xE500000000000000;
  *(void *)(inited + 96) = 0x4E432D687ALL;
  *(void *)(inited + 104) = 0xE500000000000000;
  *(void *)(inited + 112) = 0x4B482D687ALL;
  *(void *)(inited + 120) = 0xE500000000000000;
  *(void *)(inited + 128) = 0x504A2D616ALL;
  *(void *)(inited + 136) = 0xE500000000000000;
  *(void *)(inited + 144) = 0x52462D7266;
  *(void *)(inited + 152) = 0xE500000000000000;
  *(void *)(inited + 160) = 0x45442D6564;
  *(void *)(inited + 168) = 0xE500000000000000;
  *(void *)(inited + 176) = 0x53452D7365;
  *(void *)(inited + 184) = 0xE500000000000000;
  *(void *)(inited + 192) = 0x584D2D7365;
  *(void *)(inited + 200) = 0xE500000000000000;
  *(void *)(inited + 208) = 0x53552D7365;
  *(void *)(inited + 216) = 0xE500000000000000;
  *(void *)(inited + 224) = 0x4E492D6E65;
  *(void *)(inited + 232) = 0xE500000000000000;
  uint64_t v8 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  v3[5] = v8;
  return v3;
}

Swift::OpaquePointer_optional __swiftcall DefaultLinkClient.getLinkEnabledBundleIdentifiers()()
{
  if (one-time initialization token for linkSuggestions != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.linkSuggestions);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_32_0(v5);
    _os_log_impl(&dword_0, v3, v4, "Fetching Link-enabled bundles", v1, 2u);
    OUTLINED_FUNCTION_10();
  }

  uint64_t v6 = *(void **)(v0 + 16);
  id v30 = 0;
  id v7 = [v6 bundlesWithError:&v30];
  id v8 = v30;
  if (v7)
  {
    id v9 = v7;
    uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v11 = v8;

    swift_bridgeObjectRetain_n();
    id v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      id v14 = (_DWORD *)OUTLINED_FUNCTION_8_2();
      id v30 = (id)OUTLINED_FUNCTION_64();
      *id v14 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v15 = Array.description.getter();
      unint64_t v17 = v16;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, (uint64_t *)&v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_36_1(&dword_0, v18, v19, "Fetched Link-enabled bundles: %s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_10();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    id v21 = v30;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      unint64_t v24 = (_DWORD *)OUTLINED_FUNCTION_8_2();
      id v30 = (id)OUTLINED_FUNCTION_64();
      *unint64_t v24 = 136315138;
      swift_errorRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v25 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, (uint64_t *)&v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      OUTLINED_FUNCTION_36_1(&dword_0, v27, v28, "Error fetching bundles: %s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_10();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v10 = 0;
  }
  char v29 = (void *)v10;
  result.value._rawValue = v29;
  result.is_nil = v20;
  return result;
}

void DefaultLinkClient.getSuggestedActions(for:)()
{
  OUTLINED_FUNCTION_28_1();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  if (one-time initialization token for linkSuggestions != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.linkSuggestions);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)OUTLINED_FUNCTION_8_2();
    *(void *)&long long v51 = OUTLINED_FUNCTION_64();
    *(_DWORD *)id v7 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v8 = Array.description.getter();
    unint64_t v10 = v9;
    swift_bridgeObjectRelease();
    uint64_t v11 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, (uint64_t *)&v51);
    OUTLINED_FUNCTION_42_0(v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v1 = v0;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v5, v6, "Retrieving suggested actions for requests: %s", v7, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_10();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v12 = *(void **)(v1 + 24);
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay25SiriLinkSuggestionsPlugin0E23SuggestedActionsRequestVG_So013LNSuggestionsJ0Cs5NeverOTg504_s25def29Plugin07DefaultB6ClientC19geth38Actions3forSayAA0bH6ActionVGSayAA0bhI7j10VG_tFSo013K58L0CAJcfu0_33_453d8a4a6e74da537e2f1aa14de2db16AjMTf3nnnpk_nTf1cn_n(v3);
  type metadata accessor for LNActionParameterMetadata(0, (unint64_t *)&lazy cache variable for type metadata for LNSuggestionsRequest);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(void *)&long long v51 = 0;
  id v14 = [v12 suggestedActionsForSuggestionsRequests:isa error:&v51];

  id v15 = (id)v51;
  if (v14)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LNSuggestedAction]);
    uint64_t v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v17 = *(void *)(v3 + 16);
    uint64_t v18 = _swiftEmptyArrayStorage;
    if (v17)
    {
      uint64_t v49 = v16;
      *(void *)&long long v51 = _swiftEmptyArrayStorage;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v18 = (void *)v51;
      uint64_t v19 = (char *)(v3 + 49);
      do
      {
        uint64_t v20 = *(void *)(v19 - 17);
        uint64_t v21 = *(void *)(v19 - 9);
        char v22 = *(v19 - 1);
        char v50 = *v19;
        *(void *)&long long v51 = v18;
        unint64_t v23 = v18[2];
        unint64_t v24 = v18[3];
        swift_bridgeObjectRetain_n();
        if (v23 >= v24 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v18 = (void *)v51;
        }
        v19 += 24;
        v18[2] = v23 + 1;
        uint64_t v25 = &v18[5 * v23];
        v25[4] = v20;
        v25[5] = v21;
        v25[6] = v20;
        v25[7] = v21;
        *((unsigned char *)v25 + 64) = v22;
        *((unsigned char *)v25 + 65) = v50;
        --v17;
      }
      while (v17);
      uint64_t v16 = v49;
    }
    specialized Dictionary.init<A>(uniqueKeysWithValues:)((uint64_t)v18);
    swift_bridgeObjectRetain_n();
    unint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)OUTLINED_FUNCTION_8_2();
      *(void *)&long long v51 = OUTLINED_FUNCTION_64();
      *(_DWORD *)uint64_t v28 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v29 = Dictionary.description.getter();
      unint64_t v31 = v30;
      swift_bridgeObjectRelease();
      uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, (uint64_t *)&v51);
      OUTLINED_FUNCTION_42_0(v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v26, v27, "Found suggested actions: %s", v28, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_10();
    }
    else
    {

      uint64_t v33 = swift_bridgeObjectRelease_n();
    }
    __chkstk_darwin(v33);
    uint64_t v40 = specialized Sequence.flatMap<A>(_:)(v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #2 in DefaultLinkClient.getSuggestedActions(for:));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v41 = *(void *)(v40 + 16);
    if (v41)
    {
      type metadata accessor for DefaultLinkDialogIdProvider(0);
      uint64_t v42 = (long long *)(v40 + 32);
      do
      {
        long long v43 = *v42;
        long long v44 = v42[2];
        long long v52 = v42[1];
        long long v53 = v44;
        long long v51 = v43;
        outlined retain of LinkSuggestedAction((uint64_t)&v51);
        if (static DefaultLinkDialogIdProvider.canDialog(action:)((uint64_t)&v51))
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          unint64_t v45 = _swiftEmptyArrayStorage[2];
          if (v45 >= _swiftEmptyArrayStorage[3] >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          _swiftEmptyArrayStorage[2] = v45 + 1;
          uint64_t v46 = &_swiftEmptyArrayStorage[6 * v45];
          long long v47 = v51;
          long long v48 = v53;
          v46[3] = v52;
          v46[4] = v48;
          v46[2] = v47;
        }
        else
        {
          outlined release of LinkSuggestedAction((uint64_t)&v51);
        }
        v42 += 3;
        --v41;
      }
      while (v41);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    Swift::String v34 = v15;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      char v37 = (uint8_t *)OUTLINED_FUNCTION_8_2();
      *(void *)&long long v51 = OUTLINED_FUNCTION_64();
      *(_DWORD *)char v37 = 136315138;
      swift_errorRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v38 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, (uint64_t *)&v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl(&dword_0, v35, v36, "Error fetching suggested actions: %s", v37, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_10();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRelease();
  }
  OUTLINED_FUNCTION_35_0();
}

void *closure #2 in DefaultLinkClient.getSuggestedActions(for:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (!*(void *)(a4 + 16)) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v10 = *(void *)(a4 + 56) + 24 * v8;
  uint64_t v11 = *(void *)v10;
  uint64_t v12 = *(void *)(v10 + 8);
  int v13 = *(unsigned __int8 *)(v10 + 16);
  int v14 = *(unsigned __int8 *)(v10 + 17);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease();
  if (v14) {
    int v15 = 256;
  }
  else {
    int v15 = 0;
  }
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo17LNSuggestedActionCG_25SiriLinkSuggestionsPlugin0g9SuggestedE0Vs5NeverOTg504_s25fgh29Plugin07DefaultB6ClientC19getj20Actions3forSayAA0bH6e29VGSayAA0bhI7RequestVG_tFAHSS_s5So011D19K0CGtXEfU0_AgMXEfU_AI0gj7ActionsY0VTf1cn_n(a3, v11, v12, v15 | v13);
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  return (void *)v17;
}

uint64_t specialized Sequence.flatMap<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  unint64_t v30 = a2;
  specialized _NativeDictionary.makeIterator()(a1, v29);
  uint64_t v2 = v29[0];
  int64_t v3 = v29[3];
  unint64_t v4 = v29[4];
  uint64_t v27 = v29[1];
  int64_t v28 = (unint64_t)(v29[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v5 = _swiftEmptyArrayStorage;
  if (!v4) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v6 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  unint64_t v7 = v6 | (v3 << 6);
  while (1)
  {
    uint64_t v12 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v7);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    uint64_t v15 = *(void *)(*(void *)(v2 + 56) + 8 * v7);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v16 = v30(v13, v14, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v17 = *(void *)(v16 + 16);
    uint64_t v18 = v5[2];
    if (__OFADD__(v18, v17)) {
      break;
    }
    if (!swift_isUniquelyReferenced_nonNull_native() || v18 + v17 > v5[3] >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v5 = v19;
    }
    if (*(void *)(v16 + 16))
    {
      uint64_t v20 = v5[2];
      if ((v5[3] >> 1) - v20 < v17) {
        goto LABEL_39;
      }
      unint64_t v21 = (unint64_t)&v5[6 * v20 + 4];
      if (v16 + 32 < v21 + 48 * v17 && v21 < v16 + 32 + 48 * v17) {
        goto LABEL_42;
      }
      swift_arrayInitWithCopy();
      if (v17)
      {
        uint64_t v23 = v5[2];
        BOOL v24 = __OFADD__(v23, v17);
        uint64_t v25 = v23 + v17;
        if (v24) {
          goto LABEL_40;
        }
        long long v5[2] = v25;
      }
    }
    else if (v17)
    {
      goto LABEL_38;
    }
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v8 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      goto LABEL_41;
    }
    if (v8 >= v28) {
      goto LABEL_36;
    }
    unint64_t v9 = *(void *)(v27 + 8 * v8);
    int64_t v10 = v3 + 1;
    if (!v9)
    {
      int64_t v10 = v3 + 2;
      if (v3 + 2 >= v28) {
        goto LABEL_36;
      }
      unint64_t v9 = *(void *)(v27 + 8 * v10);
      if (!v9)
      {
        int64_t v10 = v3 + 3;
        if (v3 + 3 >= v28) {
          goto LABEL_36;
        }
        unint64_t v9 = *(void *)(v27 + 8 * v10);
        if (!v9)
        {
          int64_t v10 = v3 + 4;
          if (v3 + 4 >= v28) {
            goto LABEL_36;
          }
          unint64_t v9 = *(void *)(v27 + 8 * v10);
          if (!v9)
          {
            int64_t v10 = v3 + 5;
            if (v3 + 5 >= v28) {
              goto LABEL_36;
            }
            unint64_t v9 = *(void *)(v27 + 8 * v10);
            if (!v9)
            {
              int64_t v11 = v3 + 6;
              while (v11 < v28)
              {
                unint64_t v9 = *(void *)(v27 + 8 * v11++);
                if (v9)
                {
                  int64_t v10 = v11 - 1;
                  goto LABEL_18;
                }
              }
LABEL_36:
              swift_release();
              return (uint64_t)v5;
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v4 = (v9 - 1) & v9;
    unint64_t v7 = __clz(__rbit64(v9)) + (v10 << 6);
    int64_t v3 = v10;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::OpaquePointer_optional __swiftcall DefaultLinkClient.getAutoShortcutsByBundleIdentifier()()
{
  OUTLINED_FUNCTION_28_1();
  uint64_t v71 = v0;
  type metadata accessor for OSSignpostError();
  OUTLINED_FUNCTION_4_0();
  uint64_t v69 = v2;
  uint64_t v70 = v1;
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_3_2();
  uint64_t v68 = v3;
  OUTLINED_FUNCTION_2_3();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_26_1();
  v65[1] = v5;
  OUTLINED_FUNCTION_2_3();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_19_3();
  void v65[2] = v7;
  uint64_t v8 = type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_4_0();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_3_2();
  uint64_t v72 = v12;
  OUTLINED_FUNCTION_2_3();
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_26_1();
  v65[3] = v14;
  OUTLINED_FUNCTION_2_3();
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_26_1();
  v65[4] = v16;
  OUTLINED_FUNCTION_2_3();
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_15_1();
  __chkstk_darwin(v18);
  uint64_t v19 = type metadata accessor for OSSignposter();
  OUTLINED_FUNCTION_4_0();
  uint64_t v73 = v20;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for appIntentSuggestionsSignposter != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v19, (uint64_t)static DefaultLinkClient.appIntentSuggestionsSignposter);
  OUTLINED_FUNCTION_11_2();
  v24();
  static OSSignpostID.exclusive.getter();
  uint64_t v25 = OSSignposter.logHandle.getter();
  os_signpost_type_t v26 = static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v27 = (uint8_t *)OUTLINED_FUNCTION_16_0();
    uint64_t v67 = v23;
    uint64_t v28 = v19;
    uint64_t v29 = v10;
    uint64_t v30 = v8;
    unint64_t v31 = v27;
    *(_WORD *)uint64_t v27 = 0;
    os_signpost_id_t v32 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v25, v26, v32, "getAutoShortcutsByBundleIdentifier", "", v31, 2u);
    uint64_t v8 = v30;
    uint64_t v10 = v29;
    uint64_t v19 = v28;
    uint64_t v23 = v67;
    OUTLINED_FUNCTION_10();
  }

  OUTLINED_FUNCTION_11_2();
  v33();
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  OSSignpostIntervalState.init(id:isOpen:)();
  Swift::String v34 = *(void (**)(void))(v10 + 8);
  OUTLINED_FUNCTION_18_3();
  v34();
  id v35 = [self sharedPreferences];
  uint64_t v36 = outlined bridged method (ob) of @objc AFPreferences.languageCode()(v35);
  if (v37)
  {
    uint64_t v38 = v71;
    if (DefaultLinkClient.isSupportedDeviceAndLocale(siriLanguage:)(v36, v37))
    {
      uint64_t v66 = v34;
      uint64_t v67 = (char *)v8;
      uint64_t v72 = v19;
      unint64_t v39 = (unint64_t)DefaultLinkClient.getLinkEnabledBundleIdentifiers()();
      if (v39)
      {
        uint64_t v40 = v39;
        swift_bridgeObjectRetain();
        specialized Sequence.compactMap<A>(_:)(v40);
        OUTLINED_FUNCTION_27_2();
        swift_bridgeObjectRelease();
        specialized Dictionary.init<A>(_:uniquingKeysWith:)(v38, &demangling cache variable for type metadata for _DictionaryStorage<String, [LNAutoShortcut]>, (void (*)(uint64_t, uint64_t, void **))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
        uint64_t v41 = OSSignposter.logHandle.getter();
        OSSignpostIntervalState.signpostID.getter();
        os_signpost_type_t v42 = static os_signpost_type_t.end.getter();
        if (OS_os_log.signpostsEnabled.getter())
        {
          swift_retain();
          checkForErrorAndConsumeState(state:)();
          swift_release();
          OUTLINED_FUNCTION_4_2();
          if (v43() == enum case for OSSignpostError.doubleEnd(_:))
          {
            long long v44 = "[Error] Interval already ended";
          }
          else
          {
            OUTLINED_FUNCTION_5_2();
            v57();
            long long v44 = "";
          }
          uint64_t v58 = (_WORD *)OUTLINED_FUNCTION_16_0();
          OUTLINED_FUNCTION_25_2(v58);
          os_signpost_id_t v59 = OSSignpostID.rawValue.getter();
          OUTLINED_FUNCTION_29_2(&dword_0, v41, v42, v59, "getAutoShortcutsByBundleIdentifier", v44);
          OUTLINED_FUNCTION_10();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v41 = OSSignposter.logHandle.getter();
        OSSignpostIntervalState.signpostID.getter();
        os_signpost_type_t v53 = static os_signpost_type_t.end.getter();
        if (OS_os_log.signpostsEnabled.getter())
        {
          uint64_t v54 = v23;
          swift_retain();
          checkForErrorAndConsumeState(state:)();
          swift_release();
          OUTLINED_FUNCTION_4_2();
          if (v55() == enum case for OSSignpostError.doubleEnd(_:))
          {
            uint64_t v56 = "[Error] Interval already ended";
          }
          else
          {
            OUTLINED_FUNCTION_5_2();
            v60();
            uint64_t v56 = "";
          }
          uint64_t v61 = (_WORD *)OUTLINED_FUNCTION_16_0();
          OUTLINED_FUNCTION_25_2(v61);
          os_signpost_id_t v62 = OSSignpostID.rawValue.getter();
          OUTLINED_FUNCTION_29_2(&dword_0, v41, v53, v62, "getAutoShortcutsByBundleIdentifier", v56);
          OUTLINED_FUNCTION_10();
          uint64_t v23 = v54;
        }
      }

      Swift::String v34 = v66;
      uint64_t v19 = v72;
      goto LABEL_27;
    }
    swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LNAutoShortcut]);
  uint64_t v71 = Dictionary.init(dictionaryLiteral:)();
  unint64_t v45 = v23;
  uint64_t v46 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v47 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v66 = v34;
    uint64_t v67 = (char *)v8;
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    OUTLINED_FUNCTION_4_2();
    if (v48() == enum case for OSSignpostError.doubleEnd(_:))
    {
      uint64_t v49 = "[Error] Interval already ended";
    }
    else
    {
      OUTLINED_FUNCTION_5_2();
      v50();
      uint64_t v49 = "";
    }
    long long v51 = (_WORD *)OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_25_2(v51);
    os_signpost_id_t v52 = OSSignpostID.rawValue.getter();
    OUTLINED_FUNCTION_29_2(&dword_0, v46, v47, v52, "getAutoShortcutsByBundleIdentifier", v49);
    OUTLINED_FUNCTION_10();
    Swift::String v34 = v66;
  }

  uint64_t v23 = v45;
LABEL_27:
  OUTLINED_FUNCTION_18_3();
  v34();
  swift_release();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v23, v19);
  OUTLINED_FUNCTION_35_0();
  result.value._rawValue = v63;
  result.is_nil = v64;
  return result;
}

uint64_t DefaultLinkClient.isSupportedDeviceAndLocale(siriLanguage:)(uint64_t a1, uint64_t a2)
{
  if (!AFShouldRunAsrOnServerForUOD())
  {
    specialized Set.contains(_:)(a1, a2, *(void *)(v2 + 40));
    if ((v10 & 1) == 0 || !AFDeviceSupportsFullSiriUOD())
    {
      if (one-time initialization token for linkSuggestions != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      __swift_project_value_buffer(v13, (uint64_t)static Logger.linkSuggestions);
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v6, v14))
      {
        uint64_t v12 = 0;
        goto LABEL_20;
      }
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_0, v6, v14, "Device/locale not supported by hybrid or UOD, not donating App Shortcut phrases for SiriHelp", v15, 2u);
      uint64_t v12 = 0;
      goto LABEL_17;
    }
    if (one-time initialization token for linkSuggestions != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.linkSuggestions);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      uint64_t v9 = "Device/locale supported by full UOD, donating App Shortcut phrases for SiriHelp";
      goto LABEL_12;
    }
LABEL_18:
    uint64_t v12 = 1;
    goto LABEL_20;
  }
  if (one-time initialization token for linkSuggestions != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.linkSuggestions);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v6, v7)) {
    goto LABEL_18;
  }
  uint64_t v8 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v8 = 0;
  uint64_t v9 = "Device/locale supported by hybrid, donating App Shortcut phrases for SiriHelp";
LABEL_12:
  _os_log_impl(&dword_0, v6, v7, v9, v8, 2u);
  uint64_t v12 = 1;
LABEL_17:
  swift_slowDealloc();
LABEL_20:

  return v12;
}

void DefaultLinkClient.getAutoShortcutsFor(bundleIdentifier:)()
{
  OUTLINED_FUNCTION_28_1();
  uint64_t v80 = v0;
  uint64_t v81 = v2;
  unint64_t v4 = v3;
  type metadata accessor for OSSignpostError();
  OUTLINED_FUNCTION_4_0();
  uint64_t v78 = v6;
  uint64_t v79 = v5;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = &v71[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_19_3();
  uint64_t v74 = v10;
  uint64_t v11 = type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_4_0();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_3_2();
  v86 = v15;
  OUTLINED_FUNCTION_2_3();
  __chkstk_darwin(v16);
  unint64_t v75 = &v71[-v17];
  OUTLINED_FUNCTION_2_3();
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v21 = &v71[-v20];
  __chkstk_darwin(v19);
  OUTLINED_FUNCTION_37_1();
  uint64_t v22 = type metadata accessor for OSSignposter();
  OUTLINED_FUNCTION_4_0();
  uint64_t v24 = v23;
  __chkstk_darwin(v25);
  uint64_t v27 = &v71[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (one-time initialization token for appIntentSuggestionsSignposter != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v22, (uint64_t)static DefaultLinkClient.appIntentSuggestionsSignposter);
  uint64_t v82 = v24;
  uint64_t v83 = v22;
  OUTLINED_FUNCTION_11_2();
  v28();
  swift_bridgeObjectRetain_n();
  static OSSignpostID.exclusive.getter();
  long long v84 = v27;
  uint64_t v29 = OSSignposter.logHandle.getter();
  int v30 = static os_signpost_type_t.begin.getter();
  char v31 = OS_os_log.signpostsEnabled.getter();
  unint64_t v76 = v4;
  long long v77 = v9;
  if (v31)
  {
    os_signpost_id_t v32 = *(void (**)(void))(v13 + 16);
    int v72 = v30;
    OUTLINED_FUNCTION_11_2();
    v32();
    uint64_t v33 = OUTLINED_FUNCTION_8_2();
    uint64_t v73 = v11;
    Swift::String v34 = (uint8_t *)v33;
    uint64_t v35 = OUTLINED_FUNCTION_64();
    uint64_t v85 = v13;
    uint64_t v88 = v35;
    *(_DWORD *)Swift::String v34 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v4, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_signpost_id_t v36 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v29, (os_signpost_type_t)v72, v36, "getAutoShortcutsForBundle", "BundleId: %s", v34, 0xCu);
    swift_arrayDestroy();
    uint64_t v13 = v85;
    OUTLINED_FUNCTION_10();
    uint64_t v11 = v73;
    OUTLINED_FUNCTION_10();

    OUTLINED_FUNCTION_10_3();
    v37();
  }
  else
  {
    OUTLINED_FUNCTION_30_0();

    os_signpost_id_t v32 = *(void (**)(void))(v13 + 16);
  }
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v32)(v21, v1, v11);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  OSSignpostIntervalState.init(id:isOpen:)();
  uint64_t v40 = *(void (**)(unsigned char *, uint64_t))(v13 + 8);
  uint64_t v38 = v13 + 8;
  unint64_t v39 = v40;
  v40(v1, v11);
  id v41 = [self sharedPreferences];
  uint64_t v42 = outlined bridged method (ob) of @objc AFPreferences.languageCode()(v41);
  if (!v43) {
    goto LABEL_13;
  }
  if ((DefaultLinkClient.isSupportedDeviceAndLocale(siriLanguage:)(v42, v43) & 1) == 0
    || (id v44 = objc_allocWithZone((Class)LSApplicationRecord),
        uint64_t v45 = v76,
        swift_bridgeObjectRetain(),
        (id v46 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(v81, v45, 0)) == 0))
  {
    swift_bridgeObjectRelease();
LABEL_13:
    os_signpost_id_t v52 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    static os_signpost_type_t.end.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0) {
      goto LABEL_20;
    }
    swift_retain();
    uint64_t v56 = v77;
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v58 = v78;
    uint64_t v57 = v79;
    OUTLINED_FUNCTION_4_2();
    int v60 = v59();
    uint64_t v85 = v38;
    if (v60 == enum case for OSSignpostError.doubleEnd(_:))
    {
      uint64_t v61 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v58 + 8))(v56, v57);
      uint64_t v61 = "";
    }
    os_signpost_id_t v62 = (_WORD *)OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_25_2(v62);
    OSSignpostID.rawValue.getter();
    OUTLINED_FUNCTION_16_2();
    OUTLINED_FUNCTION_29_2(&dword_0, v52, v63, v64, "getAutoShortcutsForBundle", v61);
    goto LABEL_19;
  }
  uint64_t v85 = v38;
  id v47 = [self sharedInstance];
  NSString v48 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v49 = (void *)OUTLINED_FUNCTION_39_1();
  id v51 = [v49 v50];

  type metadata accessor for LNActionParameterMetadata(0, (unint64_t *)&lazy cache variable for type metadata for LNAutoShortcut);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  os_signpost_id_t v52 = OSSignposter.logHandle.getter();
  os_signpost_type_t v53 = v75;
  OSSignpostIntervalState.signpostID.getter();
  static os_signpost_type_t.end.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
    v86 = v53;
    goto LABEL_20;
  }
  swift_retain();
  checkForErrorAndConsumeState(state:)();
  swift_release();
  OUTLINED_FUNCTION_4_2();
  if (v54() == enum case for OSSignpostError.doubleEnd(_:))
  {
    uint64_t v55 = "[Error] Interval already ended";
  }
  else
  {
    OUTLINED_FUNCTION_5_2();
    v66();
    uint64_t v55 = "";
  }
  uint64_t v67 = (_WORD *)OUTLINED_FUNCTION_16_0();
  OUTLINED_FUNCTION_25_2(v67);
  uint64_t v68 = v75;
  OSSignpostID.rawValue.getter();
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_29_2(&dword_0, v52, v69, v70, "getAutoShortcutsForBundle", v55);
  v86 = v68;
LABEL_19:
  OUTLINED_FUNCTION_10();
LABEL_20:

  v39(v86, v11);
  swift_release();
  OUTLINED_FUNCTION_18_3();
  v65();
  OUTLINED_FUNCTION_35_0();
}

uint64_t DefaultLinkClient.getActionMetadata(forBundleIdentifier:withActionIdentifiers:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v92 = a1;
  type metadata accessor for OSSignpostError();
  OUTLINED_FUNCTION_4_0();
  uint64_t v84 = v7;
  uint64_t v85 = v6;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_3_2();
  uint64_t v81 = v8;
  OUTLINED_FUNCTION_2_3();
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_19_3();
  uint64_t v82 = v10;
  uint64_t v11 = type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_4_0();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  uint64_t v83 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_2_3();
  __chkstk_darwin(v16);
  v86 = (char *)&v76 - v17;
  OUTLINED_FUNCTION_2_3();
  __chkstk_darwin(v18);
  uint64_t v87 = (char *)&v76 - v19;
  OUTLINED_FUNCTION_2_3();
  __chkstk_darwin(v20);
  OUTLINED_FUNCTION_26_1();
  uint64_t v22 = v21;
  OUTLINED_FUNCTION_2_3();
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v76 - v24;
  uint64_t v26 = type metadata accessor for OSSignposter();
  OUTLINED_FUNCTION_4_0();
  uint64_t v28 = v27;
  __chkstk_darwin(v29);
  OUTLINED_FUNCTION_9_3();
  if (one-time initialization token for appIntentSuggestionsSignposter != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v26, (uint64_t)static DefaultLinkClient.appIntentSuggestionsSignposter);
  uint64_t v89 = v28;
  uint64_t v90 = v26;
  OUTLINED_FUNCTION_11_2();
  v30();
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  OUTLINED_FUNCTION_40_1();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v95 = v3;
  char v31 = OSSignposter.logHandle.getter();
  int v32 = static os_signpost_type_t.begin.getter();
  char v33 = OS_os_log.signpostsEnabled.getter();
  uint64_t v93 = v11;
  uint64_t v91 = a3;
  if (v33)
  {
    int v78 = v32;
    Swift::String v34 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    uint64_t v79 = v22;
    uint64_t v80 = v34;
    v34(v22, v25, v11);
    uint64_t v35 = swift_slowAlloc();
    long long v77 = (void *)swift_slowAlloc();
    id v98 = v77;
    *(_DWORD *)uint64_t v35 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, a2, (uint64_t *)&v98);
    OUTLINED_FUNCTION_21_2(v36);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v35 + 12) = 2080;
    uint64_t v97 = a3;
    swift_bridgeObjectRetain();
    uint64_t v37 = v94;
    specialized MutableCollection<>.sort(by:)(&v97);
    uint64_t v96 = v13;
    uint64_t v94 = v37;
    if (v37)
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_release();
      __break(1u);
      return result;
    }
    uint64_t v38 = Array.description.getter();
    unint64_t v40 = v39;
    swift_release();
    uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, (uint64_t *)&v98);
    OUTLINED_FUNCTION_21_2(v41);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    os_signpost_id_t v42 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v31, (os_signpost_type_t)v78, v42, "getActionMetadata", "BundleId: %s, actionIdentifier - %s", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_10();

    uint64_t v13 = v96;
    uint64_t v43 = v93;
    OUTLINED_FUNCTION_10_3();
    v44();
    v80(v87, v25, v43);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_40_1();
    swift_bridgeObjectRelease_n();

    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v87, v25, v11);
  }
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  OSSignpostIntervalState.init(id:isOpen:)();
  uint64_t v45 = *(void (**)(void))(v13 + 8);
  uint64_t v96 = v13 + 8;
  OUTLINED_FUNCTION_18_3();
  v45();
  swift_bridgeObjectRetain();
  uint64_t v46 = v92;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_So32LNFullyQualifiedActionIdentifierCs5NeverOTg5052_s25SiriLinkSuggestionsPlugin07DefaultB6ClientC17getf87Metadata19forBundleIdentifier04withH11IdentifiersSDySSSo08LNActionI0CGSS_SaySSGtKFSo016D20QualifiedhL0CSSXEfU_SSTf1cn_n(v91);
  id v47 = *(void **)(v88 + 16);
  type metadata accessor for LNActionParameterMetadata(0, &lazy cache variable for type metadata for LNFullyQualifiedActionIdentifier);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v98 = 0;
  id v49 = [v47 actionsWithFullyQualifiedIdentifiers:isa error:&v98];

  id v50 = v98;
  if (v49)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : LNActionMetadata]);
    uint64_t v51 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    id v52 = v50;

    swift_bridgeObjectRetain();
    os_signpost_type_t v53 = specialized Dictionary.subscript.getter(v46, a2, v51);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v53) {
      os_signpost_type_t v53 = &_swiftEmptyDictionarySingleton;
    }
    uint64_t v54 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    os_signpost_type_t v55 = static os_signpost_type_t.end.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      swift_retain();
      uint64_t v56 = v82;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v58 = v84;
      uint64_t v57 = v85;
      OUTLINED_FUNCTION_4_2();
      if (v59() == enum case for OSSignpostError.doubleEnd(_:))
      {
        int v60 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v56, v57);
        int v60 = "";
      }
      os_signpost_id_t v64 = (uint8_t *)OUTLINED_FUNCTION_16_0();
      *(_WORD *)os_signpost_id_t v64 = 0;
      os_signpost_id_t v65 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_0, v54, v55, v65, "getActionMetadata", v60, v64, 2u);
      OUTLINED_FUNCTION_10();
    }

    OUTLINED_FUNCTION_10_3();
    v45();
    swift_release();
    uint64_t v66 = OUTLINED_FUNCTION_7_2();
    v67(v66);
  }
  else
  {
    id v61 = v98;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    os_signpost_type_t v53 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    static os_signpost_type_t.end.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      OUTLINED_FUNCTION_4_2();
      if (v62() == enum case for OSSignpostError.doubleEnd(_:))
      {
        os_signpost_type_t v63 = "[Error] Interval already ended";
      }
      else
      {
        uint64_t v68 = OUTLINED_FUNCTION_30_1();
        v69(v68);
        os_signpost_type_t v63 = "";
      }
      os_signpost_id_t v70 = (uint8_t *)OUTLINED_FUNCTION_16_0();
      *(_WORD *)os_signpost_id_t v70 = 0;
      OSSignpostID.rawValue.getter();
      OUTLINED_FUNCTION_16_2();
      _os_signpost_emit_with_name_impl(&dword_0, v53, v71, v72, "getActionMetadata", v63, v70, 2u);
      OUTLINED_FUNCTION_10();
    }

    OUTLINED_FUNCTION_10_3();
    v45();
    swift_release();
    uint64_t v73 = OUTLINED_FUNCTION_7_2();
    v74(v73);
  }
  return (uint64_t)v53;
}

NSObject *DefaultLinkClient.getActionMetadata(forBundleIdentifier:)(unint64_t a1, unint64_t a2)
{
  unint64_t v98 = a1;
  type metadata accessor for OSSignpostError();
  OUTLINED_FUNCTION_4_0();
  uint64_t v89 = v7;
  uint64_t v90 = v6;
  __chkstk_darwin(v6);
  uint64_t v85 = (uint8_t *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_2_3();
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_19_3();
  uint64_t v87 = v10;
  uint64_t v11 = type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_4_0();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_3_2();
  uint64_t v88 = v15;
  OUTLINED_FUNCTION_2_3();
  __chkstk_darwin(v16);
  OUTLINED_FUNCTION_15_1();
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_26_1();
  uint64_t v94 = v18;
  OUTLINED_FUNCTION_2_3();
  __chkstk_darwin(v19);
  OUTLINED_FUNCTION_37_1();
  uint64_t v20 = type metadata accessor for OSSignposter();
  OUTLINED_FUNCTION_4_0();
  uint64_t v22 = v21;
  __chkstk_darwin(v23);
  OUTLINED_FUNCTION_9_3();
  if (one-time initialization token for appIntentSuggestionsSignposter != -1) {
    swift_once();
  }
  uint64_t v91 = v4;
  __swift_project_value_buffer(v20, (uint64_t)static DefaultLinkClient.appIntentSuggestionsSignposter);
  uint64_t v92 = v22;
  OUTLINED_FUNCTION_11_2();
  v24();
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  swift_bridgeObjectRetain_n();
  uint64_t v96 = v2;
  uint64_t v25 = OSSignposter.logHandle.getter();
  int v26 = static os_signpost_type_t.begin.getter();
  char v27 = OS_os_log.signpostsEnabled.getter();
  uint64_t v97 = v11;
  uint64_t v93 = v20;
  if (v27)
  {
    uint64_t v84 = *(void (**)(void (*)(void, void), uint64_t, uint64_t))(v13 + 16);
    uint64_t v28 = v94;
    OUTLINED_FUNCTION_11_2();
    v29();
    os_log_t v83 = v25;
    HIDWORD(v82) = v26;
    uint64_t v30 = swift_slowAlloc();
    uint64_t v86 = v3;
    char v31 = (uint8_t *)v30;
    uint64_t v100 = (void *)swift_slowAlloc();
    *(_DWORD *)char v31 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v99 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, a2, (uint64_t *)&v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_signpost_id_t v32 = OSSignpostID.rawValue.getter();
    os_log_t v33 = v83;
    _os_signpost_emit_with_name_impl(&dword_0, v83, BYTE4(v82), v32, "getActionMetadata", "BundleId: %s", v31, 0xCu);
    swift_arrayDestroy();
    uint64_t v11 = v97;
    OUTLINED_FUNCTION_10();
    uint64_t v3 = v86;
    OUTLINED_FUNCTION_10();

    OUTLINED_FUNCTION_10_3();
    v34();
    v84(v28, v3, v11);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    (*(void (**)(void (*)(void, void), uint64_t, uint64_t))(v13 + 16))(v94, v3, v11);
  }
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v35 = OSSignpostIntervalState.init(id:isOpen:)();
  uint64_t v37 = *(void (**)(void, void))(v13 + 8);
  uint64_t v36 = v13 + 8;
  uint64_t v94 = v37;
  v37(v3, v11);
  NSString v38 = String._bridgeToObjectiveC()();
  uint64_t v100 = 0;
  unint64_t v39 = (void *)OUTLINED_FUNCTION_39_1();
  id v41 = [v39 v40];

  id v42 = v100;
  if (v41)
  {
    uint64_t v95 = v35;
    type metadata accessor for LNActionParameterMetadata(0, &lazy cache variable for type metadata for LNActionMetadata);
    unint64_t v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v44 = v42;

    if (v43 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v45 = *(void *)((char *)&dword_10 + (v43 & 0xFFFFFFFFFFFFFF8));
    }
    uint64_t v86 = v36;
    if (v45)
    {
      uint64_t v100 = _swiftEmptyArrayStorage;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      if (v45 < 0) {
        __break(1u);
      }
      uint64_t v46 = 0;
      id v47 = v100;
      unint64_t v98 = v43 & 0xC000000000000001;
      unint64_t v48 = v43;
      do
      {
        if (v98) {
          id v49 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v49 = *(id *)(v43 + 8 * v46 + 32);
        }
        id v50 = v49;
        id v51 = [v49 identifier];
        uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v54 = v53;

        uint64_t v100 = v47;
        unint64_t v55 = v47[2];
        if (v55 >= v47[3] >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          id v47 = v100;
        }
        ++v46;
        v47[2] = v55 + 1;
        uint64_t v56 = &v47[3 * v55];
        v56[4] = v52;
        v56[5] = v54;
        v56[6] = v50;
        unint64_t v43 = v48;
      }
      while (v45 != v46);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      id v47 = _swiftEmptyArrayStorage;
    }
    uint64_t v58 = specialized Dictionary.init<A>(_:uniquingKeysWith:)((uint64_t)v47, &demangling cache variable for type metadata for _DictionaryStorage<String, LNActionMetadata>, (void (*)(uint64_t, uint64_t, void **))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
    os_signpost_id_t v64 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    static os_signpost_type_t.end.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      swift_retain();
      os_signpost_id_t v65 = v87;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      OUTLINED_FUNCTION_4_2();
      if (v66() == enum case for OSSignpostError.doubleEnd(_:))
      {
        uint64_t v67 = "[Error] Interval already ended";
      }
      else
      {
        OUTLINED_FUNCTION_5_2();
        v68();
        uint64_t v67 = "";
      }
      os_signpost_type_t v69 = (_WORD *)OUTLINED_FUNCTION_16_0();
      OUTLINED_FUNCTION_32_0(v69);
      OSSignpostID.rawValue.getter();
      OUTLINED_FUNCTION_16_2();
      _os_signpost_emit_with_name_impl(&dword_0, v64, v70, v71, "getActionMetadata", v67, v65, 2u);
      OUTLINED_FUNCTION_10();
    }

    OUTLINED_FUNCTION_10_3();
    v72();
    swift_release();
    uint64_t v73 = OUTLINED_FUNCTION_7_2();
    v74(v73);
  }
  else
  {
    uint64_t v57 = v100;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v58 = OSSignposter.logHandle.getter();
    uint64_t v59 = v88;
    OSSignpostIntervalState.signpostID.getter();
    static os_signpost_type_t.end.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      swift_retain();
      int v60 = v85;
      checkForErrorAndConsumeState(state:)();
      id v61 = v60;
      swift_release();
      OUTLINED_FUNCTION_4_2();
      if (v62() == enum case for OSSignpostError.doubleEnd(_:))
      {
        os_signpost_type_t v63 = "[Error] Interval already ended";
      }
      else
      {
        OUTLINED_FUNCTION_5_2();
        v75();
        os_signpost_type_t v63 = "";
      }
      uint64_t v76 = (_WORD *)OUTLINED_FUNCTION_16_0();
      OUTLINED_FUNCTION_32_0(v76);
      OSSignpostID.rawValue.getter();
      OUTLINED_FUNCTION_16_2();
      _os_signpost_emit_with_name_impl(&dword_0, v58, v77, v78, "getActionMetadata", v63, v61, 2u);
      OUTLINED_FUNCTION_10();
    }

    v94(v59, v97);
    swift_release();
    uint64_t v79 = OUTLINED_FUNCTION_7_2();
    v80(v79);
  }
  return v58;
}

uint64_t DefaultLinkClient.getActionState(bundleIdentifier:actionIdentifiers:metadataForPolicy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 128) = a3;
  *(void *)(v4 + 136) = a4;
  return _swift_task_switch(DefaultLinkClient.getActionState(bundleIdentifier:actionIdentifiers:metadataForPolicy:), 0, 0);
}

uint64_t DefaultLinkClient.getActionState(bundleIdentifier:actionIdentifiers:metadataForPolicy:)()
{
  id v1 = [self policyWithActionMetadata:v0[17]];
  v0[10] = 0;
  id v2 = [v1 connectionWithError:v0 + 10];
  v0[18] = v2;

  uint64_t v3 = (void *)v0[10];
  if (v2)
  {
    id v4 = v3;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    v0[19] = isa;
    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = DefaultLinkClient.getActionState(bundleIdentifier:actionIdentifiers:metadataForPolicy:);
    uint64_t v6 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSDictionary?, @unowned NSError?) -> () with result type [String : NSNumber];
    v0[13] = &block_descriptor;
    v0[14] = v6;
    [v2 fetchStateForAppIntentIdentifiers:isa completionHandler:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    id v7 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  OUTLINED_FUNCTION_0_0();
  id v1 = *(void *)(v0 + 48);
  *(void *)(v2 + 160) = v1;
  if (v1) {
    uint64_t v3 = DefaultLinkClient.getActionState(bundleIdentifier:actionIdentifiers:metadataForPolicy:);
  }
  else {
    uint64_t v3 = DefaultLinkClient.getActionState(bundleIdentifier:actionIdentifiers:metadataForPolicy:);
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t (*v4)(void *);
  uint64_t v6;

  id v2 = (void *)v0[18];
  id v1 = (void *)v0[19];
  uint64_t v3 = specialized _NativeDictionary.mapValues<A>(_:)(v0[15]);

  swift_bridgeObjectRelease();
  id v4 = (uint64_t (*)(void *))v0[1];
  return v4(v3);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  id v1 = (void *)v0[19];
  id v2 = (void *)v0[18];
  swift_willThrow();

  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t specialized _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v4 = swift_allocError();
  *uint64_t v5 = a2;
  return _swift_continuation_throwingResumeWithError(a1, v4);
}

uint64_t specialized _resumeUnsafeThrowingContinuation<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  **(void **)(*(void *)(a1 + 64) + 40) = a2;
  return _swift_continuation_throwingResume();
}

void DefaultLinkClient.getExamplePhraseTemplates(bundleIdentifier:actionIdentifier:)()
{
  OUTLINED_FUNCTION_28_1();
  unint64_t v111 = v0;
  uint64_t v3 = v2;
  uint64_t v114 = v4;
  uint64_t v115 = v5;
  unint64_t v7 = v6;
  uint64_t v105 = type metadata accessor for OSSignpostError();
  OUTLINED_FUNCTION_4_0();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_3_2();
  uint64_t v102 = v11;
  OUTLINED_FUNCTION_2_3();
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_19_3();
  uint64_t v101 = v13;
  uint64_t v14 = type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_4_0();
  uint64_t v16 = v15;
  __chkstk_darwin(v17);
  long long v103 = &v99[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  OUTLINED_FUNCTION_2_3();
  __chkstk_darwin(v19);
  uint64_t v106 = &v99[-v20];
  OUTLINED_FUNCTION_2_3();
  __chkstk_darwin(v21);
  OUTLINED_FUNCTION_15_1();
  __chkstk_darwin(v22);
  uint64_t v24 = &v99[-v23];
  uint64_t v25 = type metadata accessor for OSSignposter();
  OUTLINED_FUNCTION_4_0();
  uint64_t v27 = v26;
  __chkstk_darwin(v28);
  OUTLINED_FUNCTION_9_3();
  if (one-time initialization token for appIntentSuggestionsSignposter != -1) {
    swift_once();
  }
  uint64_t v104 = v9;
  __swift_project_value_buffer(v25, (uint64_t)static DefaultLinkClient.appIntentSuggestionsSignposter);
  uint64_t v109 = v25;
  uint64_t v110 = v27;
  OUTLINED_FUNCTION_11_2();
  v29();
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  unint64_t v112 = v0;
  uint64_t v30 = OSSignposter.logHandle.getter();
  int v31 = static os_signpost_type_t.begin.getter();
  char v32 = OS_os_log.signpostsEnabled.getter();
  uint64_t v113 = v14;
  if (v32)
  {
    v107 = *(void (**)(uint64_t, unsigned char *, uint64_t))(v16 + 16);
    int v100 = v31;
    unint64_t v33 = (v16 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    OUTLINED_FUNCTION_11_2();
    v34();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v36 = (void *)swift_slowAlloc();
    uint64_t v116 = v16;
    v118[0] = v36;
    *(_DWORD *)uint64_t v35 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v108 = (uint64_t)v24;
    uint64_t v117 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v114, v7, (uint64_t *)v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v35 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v117 = OUTLINED_FUNCTION_22_1();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v37 = v3;
    uint64_t v24 = (unsigned char *)v108;
    swift_bridgeObjectRelease_n();
    os_signpost_id_t v38 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v30, (os_signpost_type_t)v100, v38, "getExamplePhraseTemplates", "BundleId: %s, actionIdentifier - %s", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy();
    uint64_t v16 = v116;
    OUTLINED_FUNCTION_10();
    uint64_t v14 = v113;
    OUTLINED_FUNCTION_10();

    OUTLINED_FUNCTION_10_3();
    v39();
    v107(v1, v24, v14);
  }
  else
  {
    uint64_t v37 = v3;
    OUTLINED_FUNCTION_30_0();
    OUTLINED_FUNCTION_43_1();

    unint64_t v33 = (v16 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v16 + 16))(v1, v24, v14);
  }
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v108 = OSSignpostIntervalState.init(id:isOpen:)();
  SEL v40 = *(void (**)(unsigned char *, uint64_t))(v16 + 8);
  uint64_t v116 = v16 + 8;
  v40(v24, v14);
  unint64_t v111 = v7;
  NSString v41 = String._bridgeToObjectiveC()();
  v118[0] = 0;
  id v42 = (void *)OUTLINED_FUNCTION_39_1();
  id v44 = [v42 v43];

  id v45 = v118[0];
  if (v44)
  {
    type metadata accessor for LNActionParameterMetadata(0, &lazy cache variable for type metadata for LNExamplePhraseDescription);
    unint64_t v46 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v47 = v45;

    swift_bridgeObjectRetain();
    unint64_t v48 = (unint64_t)specialized _ArrayProtocol.filter(_:)(v46, v115, v37);
    unint64_t v49 = v48;
    if (v48 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v50 = *(void *)((char *)&dword_10 + (v48 & 0xFFFFFFFFFFFFFF8));
      swift_bridgeObjectRetain();
    }
    v107 = (void (*)(uint64_t, unsigned char *, uint64_t))v40;
    if (!v50)
    {
LABEL_26:
      swift_bridgeObjectRelease_n();
      uint64_t v70 = swift_bridgeObjectRetain();
      specialized Set.init<A>(_:)(v70);
      specialized _copyCollectionToContiguousArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (one-time initialization token for appIntentsSuggestions != -1) {
        swift_once();
      }
      uint64_t v71 = type metadata accessor for Logger();
      __swift_project_value_buffer(v71, (uint64_t)static Logger.appIntentsSuggestions);
      unint64_t v72 = v111;
      OUTLINED_FUNCTION_40_1();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v73 = Logger.logObject.getter();
      os_log_type_t v74 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v73, v74))
      {
        uint64_t v75 = OUTLINED_FUNCTION_64();
        v118[0] = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v75 = 136315650;
        swift_bridgeObjectRetain();
        uint64_t v117 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v114, v72, (uint64_t *)v118);
        OUTLINED_FUNCTION_20_2();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v75 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v117 = OUTLINED_FUNCTION_22_1();
        OUTLINED_FUNCTION_20_2();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v75 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v76 = Array.description.getter();
        unint64_t v78 = v77;
        swift_bridgeObjectRelease();
        uint64_t v117 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v78, (uint64_t *)v118);
        OUTLINED_FUNCTION_20_2();
        OUTLINED_FUNCTION_43_1();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, v73, v74, "bundleIdentifier - %s with action identifier - %s got examplePhraseTemplates - %s", (uint8_t *)v75, 0x20u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_10();
        OUTLINED_FUNCTION_10();
      }
      else
      {

        OUTLINED_FUNCTION_43_1();
        OUTLINED_FUNCTION_30_0();
        OUTLINED_FUNCTION_40_1();
        swift_bridgeObjectRelease_n();
      }
      uint64_t v79 = v109;
      unint64_t v33 = v112;
      uint64_t v80 = OSSignposter.logHandle.getter();
      OSSignpostIntervalState.signpostID.getter();
      static os_signpost_type_t.end.getter();
      if (OS_os_log.signpostsEnabled.getter())
      {
        swift_retain();
        checkForErrorAndConsumeState(state:)();
        swift_release();
        uint64_t v81 = v104;
        OUTLINED_FUNCTION_4_2();
        if (v82() == enum case for OSSignpostError.doubleEnd(_:))
        {
          os_log_t v83 = "[Error] Interval already ended";
        }
        else
        {
          uint64_t v90 = OUTLINED_FUNCTION_30_1();
          v91(v90);
          os_log_t v83 = "";
        }
        uint64_t v92 = (_WORD *)OUTLINED_FUNCTION_16_0();
        OUTLINED_FUNCTION_32_0(v92);
        OSSignpostID.rawValue.getter();
        OUTLINED_FUNCTION_16_2();
        _os_signpost_emit_with_name_impl(&dword_0, v80, v93, v94, "getExamplePhraseTemplates", v83, v81, 2u);
        OUTLINED_FUNCTION_10();
        unint64_t v33 = v112;
      }

      OUTLINED_FUNCTION_10_3();
      v95();
      goto LABEL_44;
    }
    if (v50 >= 1)
    {
      uint64_t v51 = 0;
      uint64_t v52 = _swiftEmptyArrayStorage;
      do
      {
        if ((v49 & 0xC000000000000001) != 0) {
          id v53 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v53 = *(id *)(v49 + 8 * v51 + 32);
        }
        uint64_t v54 = v53;
        uint64_t v55 = outlined bridged method (pb) of @objc LNExamplePhraseDescription.phraseTemplate.getter(v53);
        uint64_t v57 = v56;

        if (v57)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52[2] + 1, 1, (uint64_t)v52);
            uint64_t v52 = v61;
          }
          unint64_t v59 = v52[2];
          unint64_t v58 = v52[3];
          if (v59 >= v58 >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v59 + 1, 1, (uint64_t)v52);
            uint64_t v52 = v62;
          }
          v52[2] = v59 + 1;
          int v60 = &v52[2 * v59];
          v60[4] = v55;
          v60[5] = v57;
        }
        ++v51;
      }
      while (v50 != v51);
      goto LABEL_26;
    }
    __break(1u);
    goto LABEL_47;
  }
  id v63 = v118[0];
  _convertNSErrorToError(_:)();

  swift_willThrow();
  unint64_t v33 = v112;
  if (one-time initialization token for appIntentsSuggestions != -1) {
LABEL_47:
  }
    swift_once();
  uint64_t v64 = type metadata accessor for Logger();
  __swift_project_value_buffer(v64, (uint64_t)static Logger.appIntentsSuggestions);
  unint64_t v65 = v111;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v66 = Logger.logObject.getter();
  os_log_type_t v67 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v66, v67))
  {
    uint64_t v68 = swift_slowAlloc();
    os_signpost_type_t v69 = (void *)swift_slowAlloc();
    v107 = (void (*)(uint64_t, unsigned char *, uint64_t))v40;
    v118[0] = v69;
    *(_DWORD *)uint64_t v68 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v117 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v114, v65, (uint64_t *)v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v68 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v117 = OUTLINED_FUNCTION_22_1();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v66, v67, "error attempting to get phrase templates for bundleIdentifier - %s and actionIdentifier - %s", (uint8_t *)v68, 0x16u);
    swift_arrayDestroy();
    SEL v40 = (void (*)(unsigned char *, uint64_t))v107;
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_10();
  }
  else
  {

    OUTLINED_FUNCTION_30_0();
    OUTLINED_FUNCTION_43_1();
  }
  swift_errorRelease();
  uint64_t v84 = v102;
  uint64_t v85 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v86 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v87 = v40;
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    OUTLINED_FUNCTION_4_2();
    if (v88() == enum case for OSSignpostError.doubleEnd(_:))
    {
      uint64_t v89 = "[Error] Interval already ended";
    }
    else
    {
      OUTLINED_FUNCTION_18_3();
      v96();
      uint64_t v89 = "";
    }
    uint64_t v97 = (_WORD *)OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_32_0(v97);
    os_signpost_id_t v98 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v85, v86, v98, "getExamplePhraseTemplates", v89, v84, 2u);
    OUTLINED_FUNCTION_10();
    SEL v40 = v87;
  }

  OUTLINED_FUNCTION_10_3();
  ((void (*)(void))v40)();
  uint64_t v79 = v109;
LABEL_44:
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v110 + 8))(v33, v79);
  OUTLINED_FUNCTION_35_0();
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v9 = Set.init(minimumCapacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v8, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v9;
  }
  else
  {
    OUTLINED_FUNCTION_27_2();
  }
  return v1;
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_27_2();
  }
  type metadata accessor for LNActionParameterMetadata(0, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
  lazy protocol witness table accessor for type LNSystemProtocol and conformance NSObject();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v4 = result;
  uint64_t v9 = result;
  if (!v2)
  {
    uint64_t v5 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
    if (v5) {
      goto LABEL_5;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return v4;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v5) {
    goto LABEL_13;
  }
LABEL_5:
  if (v5 >= 1)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v7 = *(id *)(a1 + 8 * i + 32);
      }
      specialized Set._Variant.insert(_:)((uint64_t *)&v8, v7);
    }
    swift_bridgeObjectRelease();
    return v9;
  }
  __break(1u);
  return result;
}

uint64_t DefaultLinkClient.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t DefaultLinkClient.__deallocating_deinit()
{
  DefaultLinkClient.deinit();
  return _swift_deallocClassInstance(v0, 48, 7);
}

unint64_t protocol witness for LinkClient.getLinkEnabledBundleIdentifiers() in conformance DefaultLinkClient()
{
  return (unint64_t)DefaultLinkClient.getLinkEnabledBundleIdentifiers()();
}

void protocol witness for LinkClient.getSuggestedActions(for:) in conformance DefaultLinkClient()
{
}

unint64_t protocol witness for LinkClient.getAutoShortcutsByBundleIdentifier() in conformance DefaultLinkClient()
{
  return (unint64_t)DefaultLinkClient.getAutoShortcutsByBundleIdentifier()();
}

void protocol witness for LinkClient.getAutoShortcutsFor(bundleIdentifier:) in conformance DefaultLinkClient()
{
}

uint64_t protocol witness for LinkClient.getActionMetadata(forBundleIdentifier:withActionIdentifiers:) in conformance DefaultLinkClient(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return DefaultLinkClient.getActionMetadata(forBundleIdentifier:withActionIdentifiers:)(a1, a2, a3);
}

NSObject *protocol witness for LinkClient.getActionMetadata(forBundleIdentifier:) in conformance DefaultLinkClient(unint64_t a1, unint64_t a2)
{
  return DefaultLinkClient.getActionMetadata(forBundleIdentifier:)(a1, a2);
}

uint64_t protocol witness for LinkClient.getActionState(bundleIdentifier:actionIdentifiers:metadataForPolicy:) in conformance DefaultLinkClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v7;
  *id v7 = v4;
  v7[1] = protocol witness for LinkClient.getActionState(bundleIdentifier:actionIdentifiers:metadataForPolicy:) in conformance DefaultLinkClient;
  return DefaultLinkClient.getActionState(bundleIdentifier:actionIdentifiers:metadataForPolicy:)((uint64_t)v7, v8, a3, a4);
}

uint64_t protocol witness for LinkClient.getActionState(bundleIdentifier:actionIdentifiers:metadataForPolicy:) in conformance DefaultLinkClient(uint64_t a1)
{
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

void protocol witness for LinkClient.getExamplePhraseTemplates(bundleIdentifier:actionIdentifier:) in conformance DefaultLinkClient()
{
}

id @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(uint64_t a1, uint64_t a2, char a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = 0;
  id v6 = [v3 initWithBundleIdentifier:v5 allowPlaceholder:a3 & 1 error:&v10];

  if (v6)
  {
    id v7 = v10;
  }
  else
  {
    id v8 = v10;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

id @nonobjc LNFullyQualifiedActionIdentifier.init(actionIdentifier:bundleIdentifier:)()
{
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v0 initWithActionIdentifier:v1 bundleIdentifier:v2];

  return v3;
}

void specialized _copyCollectionToContiguousArray<A>(_:)()
{
  OUTLINED_FUNCTION_23_1();
  if (*(void *)(v0 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    NSString v1 = (const void *)swift_allocObject();
    size_t v2 = _swift_stdlib_malloc_size(v1);
    OUTLINED_FUNCTION_33_1(2 * ((uint64_t)(v2 - 32) / 16));
    specialized Sequence._copySequenceContents(initializing:)(v3, v4, v5, v6);
    OUTLINED_FUNCTION_24_2();
    OUTLINED_FUNCTION_8_3();
    if (!v7) {
      __break(1u);
    }
  }
  OUTLINED_FUNCTION_31_1();
}

{
  uint64_t v0;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  OUTLINED_FUNCTION_23_1();
  if (*(void *)(v0 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    NSString v1 = (const void *)swift_allocObject();
    _swift_stdlib_malloc_size(v1);
    OUTLINED_FUNCTION_34_0();
    OUTLINED_FUNCTION_33_1(v2);
    specialized Sequence._copySequenceContents(initializing:)(v3, v4, v5, v6);
    OUTLINED_FUNCTION_24_2();
    OUTLINED_FUNCTION_8_3();
    if (!v7) {
      __break(1u);
    }
  }
  OUTLINED_FUNCTION_31_1();
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  OUTLINED_FUNCTION_23_1();
  a25 = v26;
  a26 = v28;
  uint64_t v29 = *(void *)(v27 + 16);
  if (v29)
  {
    uint64_t v30 = v27;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LinkSuggestedActionsRequest>);
    int v31 = (void *)swift_allocObject();
    size_t v32 = _swift_stdlib_malloc_size(v31);
    void v31[2] = v29;
    v31[3] = 2 * ((uint64_t)(v32 - 32) / 24);
    specialized Sequence._copySequenceContents(initializing:)((uint64_t)&a10, (uint64_t)(v31 + 4), v29, v30);
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_8_3();
    if (!v33) {
      __break(1u);
    }
  }
  OUTLINED_FUNCTION_31_1();
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = _swiftEmptyArrayStorage;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v3 = (void *)swift_allocObject();
      _swift_stdlib_malloc_size(v3);
      OUTLINED_FUNCTION_34_0();
      v3[2] = v2;
      v3[3] = v4;
    }
    swift_bridgeObjectRetain();
    specialized Array._copyContents(initializing:)((uint64_t)(v3 + 4), v2, v1);
    uint64_t v1 = v5;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_8:
    if (v1 < 0) {
      uint64_t v2 = v1;
    }
    else {
      uint64_t v2 = v1 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_27_2();
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v3;
}

void *specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Bool>);
  uint64_t result = (void *)static _DictionaryStorage.copy(original:)();
  uint64_t v3 = result;
  int64_t v4 = 0;
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v24 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & v5;
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  id v10 = (char *)(result + 8);
  if ((v7 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v11 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    uint64_t v19 = *(void **)(*(void *)(a1 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    uint64_t result = [v19 BOOLValue];
    *(void *)&v10[(i >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << i;
    uint64_t v20 = (void *)(v3[6] + 16 * i);
    void *v20 = v18;
    v20[1] = v17;
    *(unsigned char *)(v3[7] + i) = (_BYTE)result;
    uint64_t v21 = v3[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v23;
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_24;
    }
    if (v13 >= v9) {
      return v3;
    }
    unint64_t v14 = *(void *)(v24 + 8 * v13);
    ++v4;
    if (!v14)
    {
      int64_t v4 = v13 + 1;
      if (v13 + 1 >= v9) {
        return v3;
      }
      unint64_t v14 = *(void *)(v24 + 8 * v4);
      if (!v14)
      {
        int64_t v4 = v13 + 2;
        if (v13 + 2 >= v9) {
          return v3;
        }
        unint64_t v14 = *(void *)(v24 + 8 * v4);
        if (!v14) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v8 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v9) {
    return v3;
  }
  unint64_t v14 = *(void *)(v24 + 8 * v15);
  if (v14)
  {
    int64_t v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v9) {
      return v3;
    }
    unint64_t v14 = *(void *)(v24 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.makeIterator()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1 << -(char)v3);
  }
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

void *partial apply for closure #2 in DefaultLinkClient.getSuggestedActions(for:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return closure #2 in DefaultLinkClient.getSuggestedActions(for:)(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t outlined retain of LinkSuggestedAction(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  uint64_t v3 = *(void **)(a1 + 32);
  swift_bridgeObjectRetain();
  id v4 = v2;
  id v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    uint64_t v2 = v3;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  uint64_t result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v2;
  return result;
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3) {
        return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
      }
      return result;
    }
    goto LABEL_144;
  }
  uint64_t v5 = result;
  uint64_t result = (uint64_t)specialized static Array._allocateUninitialized(_:)(v3 / 2);
  uint64_t v95 = result;
  uint64_t v96 = v3;
  uint64_t v97 = v6;
  os_signpost_type_t v93 = a1;
  if (v3 <= 0)
  {
    os_signpost_id_t v98 = (char *)_swiftEmptyArrayStorage;
    unint64_t v31 = _swiftEmptyArrayStorage[2];
LABEL_110:
    if (v31 < 2)
    {
LABEL_121:
      uint64_t result = swift_bridgeObjectRelease();
      if (v3 >= -1)
      {
        *(void *)(v95 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      goto LABEL_149;
    }
    uint64_t v85 = *v93;
    while (1)
    {
      unint64_t v86 = v31 - 2;
      if (v31 < 2) {
        break;
      }
      if (!v85) {
        goto LABEL_153;
      }
      uint64_t v87 = v98;
      uint64_t v88 = *(void *)&v98[16 * v86 + 32];
      uint64_t v89 = *(void *)&v98[16 * v31 + 24];
      uint64_t result = specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v85 + 16 * v88), (char *)(v85 + 16 * *(void *)&v98[16 * v31 + 16]), v85 + 16 * v89, v97);
      if (v1) {
        goto LABEL_106;
      }
      if (v89 < v88) {
        goto LABEL_139;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v98);
        uint64_t v87 = (char *)result;
      }
      if (v86 >= *((void *)v87 + 2)) {
        goto LABEL_140;
      }
      uint64_t v90 = &v87[16 * v86 + 32];
      *(void *)uint64_t v90 = v88;
      *((void *)v90 + 1) = v89;
      unint64_t v91 = *((void *)v87 + 2);
      if (v31 > v91) {
        goto LABEL_141;
      }
      uint64_t result = (uint64_t)memmove(&v87[16 * v31 + 16], &v87[16 * v31 + 32], 16 * (v91 - v31));
      os_signpost_id_t v98 = v87;
      *((void *)v87 + 2) = v91 - 1;
      unint64_t v31 = v91 - 1;
      Swift::Int v3 = v96;
      if (v91 <= 2) {
        goto LABEL_121;
      }
    }
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
    return result;
  }
  uint64_t v94 = v5;
  Swift::Int v7 = 0;
  uint64_t v8 = *a1;
  uint64_t v92 = *a1 + 8;
  os_signpost_id_t v98 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    Swift::Int v9 = v7++;
    if (v7 >= v3) {
      goto LABEL_32;
    }
    id v10 = (uint64_t *)(v8 + 16 * v7);
    uint64_t result = *v10;
    uint64_t v11 = v10[1];
    uint64_t v12 = (void *)(v8 + 16 * v9);
    if (result == *v12 && v11 == v12[1])
    {
      Swift::Int v15 = v9 + 2;
      if (v9 + 2 >= v3) {
        goto LABEL_31;
      }
      int v14 = 0;
LABEL_13:
      uint64_t v16 = (void *)(v92 + 16 * v15);
      do
      {
        uint64_t result = *(v16 - 1);
        uint64_t v17 = (void *)(v8 + 16 * v7);
        if (result == *v17 && *v16 == v17[1])
        {
          if (v14) {
            goto LABEL_24;
          }
        }
        else
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((v14 ^ result)) {
            goto LABEL_23;
          }
        }
        v16 += 2;
        Swift::Int v19 = v15 + 1;
        Swift::Int v7 = v15;
        Swift::Int v15 = v19;
      }
      while (v19 < v3);
      Swift::Int v15 = v19;
      goto LABEL_23;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    int v14 = result;
    Swift::Int v15 = v9 + 2;
    if (v9 + 2 < v3) {
      goto LABEL_13;
    }
LABEL_23:
    Swift::Int v7 = v15;
    if ((v14 & 1) == 0) {
      goto LABEL_32;
    }
LABEL_24:
    if (v15 < v9) {
      goto LABEL_148;
    }
    if (v9 < v15)
    {
      uint64_t v20 = 16 * v15;
      uint64_t v21 = 16 * v9;
      Swift::Int v22 = v15;
      Swift::Int v23 = v9;
      do
      {
        if (v23 != --v22)
        {
          if (!v8) {
            goto LABEL_152;
          }
          uint64_t v24 = v8 + v20;
          uint64_t v25 = *(void *)(v8 + v21);
          uint64_t v26 = *(void *)(v8 + v21 + 8);
          *(_OWORD *)(v8 + v21) = *(_OWORD *)(v8 + v20 - 16);
          *(void *)(v24 - 16) = v25;
          *(void *)(v24 - 8) = v26;
        }
        ++v23;
        v20 -= 16;
        v21 += 16;
      }
      while (v23 < v22);
    }
LABEL_31:
    Swift::Int v7 = v15;
LABEL_32:
    if (v7 >= v3) {
      goto LABEL_41;
    }
    if (__OFSUB__(v7, v9)) {
      goto LABEL_143;
    }
    if (v7 - v9 >= v94) {
      goto LABEL_41;
    }
    if (__OFADD__(v9, v94)) {
      goto LABEL_146;
    }
    if (v9 + v94 >= v3) {
      Swift::Int v27 = v3;
    }
    else {
      Swift::Int v27 = v9 + v94;
    }
    if (v27 < v9) {
      goto LABEL_147;
    }
    if (v7 == v27)
    {
LABEL_41:
      uint64_t v28 = v98;
    }
    else
    {
      uint64_t v79 = (uint64_t *)(v8 + 16 * v7);
      uint64_t v28 = v98;
      do
      {
        uint64_t v80 = (uint64_t *)(v8 + 16 * v7);
        uint64_t result = *v80;
        uint64_t v81 = v80[1];
        Swift::Int v82 = v9;
        os_log_t v83 = v79;
        do
        {
          if (result == *(v83 - 2) && v81 == *(v83 - 1)) {
            break;
          }
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            break;
          }
          if (!v8) {
            goto LABEL_150;
          }
          uint64_t result = *v83;
          uint64_t v81 = v83[1];
          *(_OWORD *)os_log_t v83 = *((_OWORD *)v83 - 1);
          *(v83 - 1) = v81;
          *(v83 - 2) = result;
          v83 -= 2;
          ++v82;
        }
        while (v7 != v82);
        ++v7;
        v79 += 2;
      }
      while (v7 != v27);
      Swift::Int v7 = v27;
    }
    if (v7 < v9) {
      goto LABEL_142;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v28 + 2) + 1, 1, v28);
      uint64_t v28 = (char *)result;
    }
    unint64_t v30 = *((void *)v28 + 2);
    unint64_t v29 = *((void *)v28 + 3);
    unint64_t v31 = v30 + 1;
    if (v30 >= v29 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1, v28);
      uint64_t v28 = (char *)result;
    }
    *((void *)v28 + 2) = v31;
    size_t v32 = v28 + 32;
    char v33 = (Swift::Int *)&v28[16 * v30 + 32];
    *char v33 = v9;
    v33[1] = v7;
    os_signpost_id_t v98 = v28;
    if (v30) {
      break;
    }
    unint64_t v31 = 1;
LABEL_90:
    Swift::Int v3 = v96;
    if (v7 >= v96) {
      goto LABEL_110;
    }
  }
  while (1)
  {
    unint64_t v34 = v31 - 1;
    if (v31 >= 4)
    {
      unint64_t v39 = &v32[2 * v31];
      uint64_t v40 = *(v39 - 8);
      uint64_t v41 = *(v39 - 7);
      BOOL v45 = __OFSUB__(v41, v40);
      uint64_t v42 = v41 - v40;
      if (v45) {
        goto LABEL_127;
      }
      uint64_t v44 = *(v39 - 6);
      uint64_t v43 = *(v39 - 5);
      BOOL v45 = __OFSUB__(v43, v44);
      uint64_t v37 = v43 - v44;
      char v38 = v45;
      if (v45) {
        goto LABEL_128;
      }
      unint64_t v46 = v31 - 2;
      id v47 = &v32[2 * v31 - 4];
      uint64_t v49 = *v47;
      uint64_t v48 = v47[1];
      BOOL v45 = __OFSUB__(v48, v49);
      uint64_t v50 = v48 - v49;
      if (v45) {
        goto LABEL_129;
      }
      BOOL v45 = __OFADD__(v37, v50);
      uint64_t v51 = v37 + v50;
      if (v45) {
        goto LABEL_131;
      }
      if (v51 >= v42)
      {
        os_signpost_type_t v69 = &v32[2 * v34];
        uint64_t v71 = *v69;
        uint64_t v70 = v69[1];
        BOOL v45 = __OFSUB__(v70, v71);
        uint64_t v72 = v70 - v71;
        if (v45) {
          goto LABEL_137;
        }
        BOOL v62 = v37 < v72;
        goto LABEL_79;
      }
    }
    else
    {
      if (v31 != 3)
      {
        uint64_t v63 = *((void *)v28 + 4);
        uint64_t v64 = *((void *)v28 + 5);
        BOOL v45 = __OFSUB__(v64, v63);
        uint64_t v56 = v64 - v63;
        char v57 = v45;
        goto LABEL_73;
      }
      uint64_t v36 = *((void *)v28 + 4);
      uint64_t v35 = *((void *)v28 + 5);
      BOOL v45 = __OFSUB__(v35, v36);
      uint64_t v37 = v35 - v36;
      char v38 = v45;
    }
    if (v38) {
      goto LABEL_130;
    }
    unint64_t v46 = v31 - 2;
    uint64_t v52 = &v32[2 * v31 - 4];
    uint64_t v54 = *v52;
    uint64_t v53 = v52[1];
    BOOL v55 = __OFSUB__(v53, v54);
    uint64_t v56 = v53 - v54;
    char v57 = v55;
    if (v55) {
      goto LABEL_132;
    }
    unint64_t v58 = &v32[2 * v34];
    uint64_t v60 = *v58;
    uint64_t v59 = v58[1];
    BOOL v45 = __OFSUB__(v59, v60);
    uint64_t v61 = v59 - v60;
    if (v45) {
      goto LABEL_134;
    }
    if (__OFADD__(v56, v61)) {
      goto LABEL_136;
    }
    if (v56 + v61 >= v37)
    {
      BOOL v62 = v37 < v61;
LABEL_79:
      if (v62) {
        unint64_t v34 = v46;
      }
      goto LABEL_81;
    }
LABEL_73:
    if (v57) {
      goto LABEL_133;
    }
    unint64_t v65 = &v32[2 * v34];
    uint64_t v67 = *v65;
    uint64_t v66 = v65[1];
    BOOL v45 = __OFSUB__(v66, v67);
    uint64_t v68 = v66 - v67;
    if (v45) {
      goto LABEL_135;
    }
    if (v68 < v56) {
      goto LABEL_90;
    }
LABEL_81:
    unint64_t v73 = v34 - 1;
    if (v34 - 1 >= v31)
    {
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
    if (!v8) {
      goto LABEL_151;
    }
    os_log_type_t v74 = &v32[2 * v73];
    uint64_t v75 = *v74;
    uint64_t v76 = &v32[2 * v34];
    uint64_t v77 = v76[1];
    uint64_t result = specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v8 + 16 * *v74), (char *)(v8 + 16 * *v76), v8 + 16 * v77, v97);
    if (v1) {
      break;
    }
    if (v77 < v75) {
      goto LABEL_124;
    }
    if (v34 > *((void *)v98 + 2)) {
      goto LABEL_125;
    }
    *os_log_type_t v74 = v75;
    v32[2 * v73 + 1] = v77;
    unint64_t v78 = *((void *)v98 + 2);
    if (v34 >= v78) {
      goto LABEL_126;
    }
    uint64_t v28 = v98;
    unint64_t v31 = v78 - 1;
    uint64_t result = (uint64_t)memmove(&v32[2 * v34], v76 + 2, 16 * (v78 - 1 - v34));
    *((void *)v98 + 2) = v78 - 1;
    if (v78 <= 2) {
      goto LABEL_90;
    }
  }
LABEL_106:
  uint64_t result = swift_bridgeObjectRelease();
  if (v96 < -1) {
    goto LABEL_145;
  }
  *(void *)(v95 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
    while (2)
    {
      Swift::Int v9 = (uint64_t *)(v7 + 16 * v4);
      uint64_t result = *v9;
      uint64_t v10 = v9[1];
      uint64_t v11 = v6;
      uint64_t v12 = (uint64_t *)v8;
      do
      {
        if (result == *(v12 - 2) && v10 == *(v12 - 1)) {
          break;
        }
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          break;
        }
        if (!v7)
        {
          __break(1u);
          return result;
        }
        uint64_t result = *v12;
        uint64_t v10 = v12[1];
        *(_OWORD *)uint64_t v12 = *((_OWORD *)v12 - 1);
        *(v12 - 1) = v10;
        *(v12 - 2) = result;
        v12 -= 2;
        ++v11;
      }
      while (v4 != v11);
      ++v4;
      v8 += 16;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 16;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 16;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (void)a2) / 16, a4);
    unint64_t v12 = (unint64_t)&v4[16 * v11];
    if (v7 >= v6 || v10 < 16) {
      goto LABEL_47;
    }
    uint64_t v18 = (char *)(a3 - 16);
    while (1)
    {
      Swift::Int v19 = v18 + 16;
      uint64_t v20 = (char *)(v12 - 16);
      BOOL v21 = *(void *)(v12 - 16) == *((void *)v6 - 2) && *(void *)(v12 - 8) == *((void *)v6 - 1);
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        BOOL v23 = v19 != (char *)v12 || (unint64_t)v18 >= v12;
        v12 -= 16;
        if (!v23) {
          goto LABEL_43;
        }
      }
      else
      {
        BOOL v22 = v19 != v6 || v18 >= v6;
        uint64_t v20 = v6 - 16;
        v6 -= 16;
        if (!v22) {
          goto LABEL_43;
        }
      }
      *(_OWORD *)uint64_t v18 = *(_OWORD *)v20;
LABEL_43:
      v18 -= 16;
      if (v6 <= v7 || v12 <= (unint64_t)v4) {
        goto LABEL_47;
      }
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (a2 - a1) / 16, a4);
  unint64_t v12 = (unint64_t)&v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      BOOL v14 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
      if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      Swift::Int v15 = v4;
      BOOL v14 = v7 == v4;
      v4 += 16;
      if (!v14) {
        goto LABEL_15;
      }
LABEL_16:
      v7 += 16;
      if ((unint64_t)v4 >= v12 || (unint64_t)v6 >= a3) {
        goto LABEL_21;
      }
    }
    Swift::Int v15 = v6;
    BOOL v14 = v7 == v6;
    v6 += 16;
    if (v14) {
      goto LABEL_16;
    }
LABEL_15:
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v15;
    goto LABEL_16;
  }
LABEL_21:
  uint64_t v6 = v7;
LABEL_47:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, (uint64_t)(v12 - (void)v4) / 16, v6);
  return 1;
}

uint64_t outlined bridged method (ob) of @objc AFPreferences.languageCode()(void *a1)
{
  id v2 = [a1 languageCode];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined bridged method (pb) of @objc LNExamplePhraseDescription.phraseTemplate.getter(void *a1)
{
  id v1 = [a1 phraseTemplate];
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t type metadata accessor for DefaultLinkClient()
{
  return self;
}

uint64_t specialized Array._copyContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v7 = a3;
    }
    else {
      uint64_t v7 = a3 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = OUTLINED_FUNCTION_27_2();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8));
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          lazy protocol witness table accessor for type [LNAutoShortcut] and conformance [A]();
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LNAutoShortcut]);
            uint64_t v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            id v12 = *v11;
            ((void (*)(void *, void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_19;
      }
    }
    else
    {
      if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8)) <= a2)
      {
        specialized UnsafeMutablePointer.initialize(from:count:)((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8)));
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_19:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    long long v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    long long v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    *uint64_t v11 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    if (v13 == v10)
    {
      swift_retain();
      goto LABEL_38;
    }
    ++v11;
    uint64_t result = swift_retain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_39:
    *uint64_t v5 = a4;
    v5[1] = v6;
    long long v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v24 = -1 << *(unsigned char *)(a4 + 32);
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void *)(a4 + 48) + 24 * v16;
    uint64_t v22 = *(void *)v20;
    uint64_t v21 = *(void *)(v20 + 8);
    char v23 = *(unsigned char *)(v20 + 16);
    LOBYTE(v20) = *(unsigned char *)(v20 + 17);
    *(void *)uint64_t v11 = v22;
    *(void *)(v11 + 8) = v21;
    *(unsigned char *)(v11 + 16) = v23;
    *(unsigned char *)(v11 + 17) = v20;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 24;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        unint64_t v9 = 0;
        int64_t v12 = v17;
      }
      else
      {
        unint64_t v18 = *(void *)(v6 + 8 * v12);
        if (v18) {
          goto LABEL_14;
        }
        int64_t v19 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          int64_t v17 = v19;
          goto LABEL_18;
        }
        int64_t v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          unint64_t v18 = *(void *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            int64_t v17 = v12;
            goto LABEL_18;
          }
          int64_t v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            unint64_t v9 = 0;
            goto LABEL_37;
          }
          unint64_t v18 = *(void *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              int64_t v17 = v19 + 1;
              if (__OFADD__(v19, 1)) {
                goto LABEL_42;
              }
              if (v17 >= v14)
              {
                unint64_t v9 = 0;
                int64_t v12 = v14 - 1;
                goto LABEL_37;
              }
              unint64_t v18 = *(void *)(v6 + 8 * v17);
              ++v19;
              if (v18) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v9 = 0;
        int64_t v12 = v17 + 2;
      }
LABEL_37:
      uint64_t v10 = v13;
LABEL_38:
      uint64_t v7 = v24;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type [LNAutoShortcut] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [LNAutoShortcut] and conformance [A];
  if (!lazy protocol witness table cache variable for type [LNAutoShortcut] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [LNAutoShortcut]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [LNAutoShortcut] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LNSystemProtocol and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type LNSystemProtocol and conformance NSObject;
  if (!lazy protocol witness table cache variable for type LNSystemProtocol and conformance NSObject)
  {
    type metadata accessor for LNActionParameterMetadata(255, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LNSystemProtocol and conformance NSObject);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LNSuggestedActionDialogParameterKey and conformance LNSuggestedActionDialogParameterKey()
{
  unint64_t result = lazy protocol witness table cache variable for type LNSuggestedActionDialogParameterKey and conformance LNSuggestedActionDialogParameterKey;
  if (!lazy protocol witness table cache variable for type LNSuggestedActionDialogParameterKey and conformance LNSuggestedActionDialogParameterKey)
  {
    type metadata accessor for LNSuggestedActionDialogParameterKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LNSuggestedActionDialogParameterKey and conformance LNSuggestedActionDialogParameterKey);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_7_2()
{
  return *(void *)(v0 - 136);
}

uint64_t OUTLINED_FUNCTION_8_3()
{
  return outlined consume of [String : String].Iterator._Variant();
}

uint64_t OUTLINED_FUNCTION_20_2()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_21_2(uint64_t a1)
{
  *(void *)(v1 - 120) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_22_1()
{
  uint64_t v3 = *(void *)(v1 - 136);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v0, (uint64_t *)(v1 - 104));
}

uint64_t OUTLINED_FUNCTION_24_2()
{
  return swift_bridgeObjectRetain();
}

_WORD *OUTLINED_FUNCTION_25_2(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_27_2()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_29_2(void *a1, NSObject *a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5, const char *a6)
{
  _os_signpost_emit_with_name_impl(a1, a2, a3, a4, a5, a6, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_30_1()
{
  return v0;
}

_WORD *OUTLINED_FUNCTION_32_0(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

void OUTLINED_FUNCTION_33_1(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = a1;
}

void OUTLINED_FUNCTION_36_1(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_37_1()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_39_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_40_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_42_0(uint64_t a1)
{
  *(void *)(v1 - 168) = a1;
  return v1 - 168;
}

uint64_t OUTLINED_FUNCTION_43_1()
{
  return swift_bridgeObjectRelease_n();
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDyS2SG_So35LNSuggestedActionDialogParameterKeya_SSts5NeverOTg509_sS2SSo35defg37KeyaSSIgggoo_SS3key_SS5valuetAB_SSts5i164OIegnrzr_TR042_s25SiriLinkSuggestionsPlugin0B15Suggestedb37V7request6action14systemProtocol19rawc129ParametersAcA0bE14ActionsRequestV_So8LNActionCSo08LNSystemJ0CSDyk66SGtc33_A45247CBCD3FCD1A5B59037132DD4F4ELlfcSo011LNSuggestedfL12D19M25_SStSS_SStXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v3 = specialized Dictionary.startIndex.getter(a1);
    if ((v3 & 0x8000000000000000) == 0)
    {
      unint64_t v5 = v3;
      if (v3 < 1 << *(unsigned char *)(a1 + 32))
      {
        uint64_t v6 = a1 + 64;
        while ((*(void *)(v6 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
        {
          if (v4 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_18;
          }
          uint64_t v13 = v1;
          int v14 = v4;
          uint64_t v7 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v5);
          uint64_t v8 = v7[1];
          uint64_t v15 = *v7;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          NSString v9 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          unint64_t v10 = _swiftEmptyArrayStorage[2];
          if (v10 >= _swiftEmptyArrayStorage[3] >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          _swiftEmptyArrayStorage[2] = v10 + 1;
          uint64_t v11 = &_swiftEmptyArrayStorage[3 * v10];
          v11[4] = v9;
          v11[5] = v15;
          v11[6] = v8;
          if ((uint64_t)v5 >= -(-1 << *(unsigned char *)(a1 + 32))) {
            goto LABEL_19;
          }
          uint64_t v6 = a1 + 64;
          if ((*(void *)(a1 + 64 + 8 * (v5 >> 6)) & (1 << v5)) == 0) {
            goto LABEL_20;
          }
          if (v14 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_21;
          }
          uint64_t v12 = _HashTable.occupiedBucket(after:)();
          --v1;
          if (v13 == 1) {
            return;
          }
          unint64_t v5 = v12;
          if ((v12 & 0x8000000000000000) == 0)
          {
            int v4 = *(_DWORD *)(a1 + 36);
            if (v12 < 1 << *(unsigned char *)(a1 + 32)) {
              continue;
            }
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
    }
LABEL_22:
    __break(1u);
  }
}

void LinkSuggestedAction.init(request:suggestedAction:)(id a1@<X3>, uint64_t a2@<X0>, uint64_t a3@<X1>, __int16 a4@<W2>, uint64_t a5@<X8>)
{
  id v10 = [a1 action];
  id v11 = [a1 systemProtocol];
  uint64_t v12 = outlined bridged method (pb) of @objc LNSuggestedAction.dialogParameters.getter(a1);
  if (!v12)
  {
    type metadata accessor for LNSuggestedActionDialogParameterKey(0);
    lazy protocol witness table accessor for type LNSuggestedActionDialogParameterKey and conformance LNSuggestedActionDialogParameterKey();
    uint64_t v12 = Dictionary.init(dictionaryLiteral:)();
  }
  uint64_t v13 = v12;

  *(void *)a5 = a2;
  *(void *)(a5 + 8) = a3;
  *(unsigned char *)(a5 + 16) = a4 & 1;
  *(unsigned char *)(a5 + 17) = HIBYTE(a4) & 1;
  *(void *)(a5 + 24) = v10;
  *(void *)(a5 + 32) = v11;
  *(void *)(a5 + 40) = v13;
}

uint64_t LinkSuggestedAction.request.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

id LinkSuggestedAction.action.getter()
{
  return *(id *)(v0 + 24);
}

id LinkSuggestedAction.systemProtocol.getter()
{
  return *(id *)(v0 + 32);
}

uint64_t LinkSuggestedAction.dialogParameters.getter()
{
  return swift_bridgeObjectRetain();
}

void *LinkSuggestedAction.rawDialogParmaters.getter()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySo35LNSuggestedActionDialogParameterKeyaSSG_SS_SSts5NeverOTg506_sSo35defg38KeyaS3SIgggoo_AB3key_SS5valuetSS_SSts5i85OIegnrzr_TR042_s25SiriLinkSuggestionsPlugin0B15Suggestedb6V18rawc44ParmatersSDyS2SGvgq26_SStSo011LNSuggestedfH12d5L18_V5XEfU_Tf3nnnpf_nTf1cn_n(v0);
  uint64_t v2 = v1;
  swift_bridgeObjectRelease();
  return specialized Dictionary.init<A>(uniqueKeysWithValues:)(v2);
}

uint64_t LinkSuggestedAction.iconSystemImageName.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  if (!*(void *)(v1 + 16)) {
    return 0;
  }
  id v2 = LNSuggestedActionDialogParameterKeyIconSystemImageName;
  unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v2);
  if (v4)
  {
    uint64_t v5 = *(void *)(*(void *)(v1 + 56) + 16 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t protocol witness for Error._domain.getter in conformance LinkSuggestedAction.CodingError()
{
  return Error._domain.getter();
}

uint64_t protocol witness for Error._code.getter in conformance LinkSuggestedAction.CodingError()
{
  return Error._code.getter();
}

uint64_t protocol witness for Error._userInfo.getter in conformance LinkSuggestedAction.CodingError()
{
  return Error._userInfo.getter();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance LinkSuggestedAction.CodingError()
{
  return Error._getEmbeddedNSError()();
}

BOOL static LinkSuggestedAction.CodingKeys.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void LinkSuggestedAction.CodingKeys.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

SiriLinkSuggestionsPlugin::LinkSuggestedAction::CodingKeys_optional __swiftcall LinkSuggestedAction.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  object = stringValue._object;
  BOOL v2 = stringValue._countAndFlagsBits == 0x74736575716572 && stringValue._object == (void *)0xE700000000000000;
  if (v2 || (uint64_t countAndFlagsBits = stringValue._countAndFlagsBits, (OUTLINED_FUNCTION_2_4() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v5 = countAndFlagsBits == 0x6E6F69746361 && object == (void *)0xE600000000000000;
    if (v5 || (OUTLINED_FUNCTION_2_4() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return (SiriLinkSuggestionsPlugin::LinkSuggestedAction::CodingKeys_optional)1;
    }
    else
    {
      BOOL v6 = countAndFlagsBits == 0x72506D6574737973 && object == (void *)0xEE006C6F636F746FLL;
      if (v6 || (OUTLINED_FUNCTION_2_4() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return (SiriLinkSuggestionsPlugin::LinkSuggestedAction::CodingKeys_optional)2;
      }
      else if (countAndFlagsBits == 0xD000000000000010 && object == (void *)0x800000000004B0F0)
      {
        swift_bridgeObjectRelease();
        return (SiriLinkSuggestionsPlugin::LinkSuggestedAction::CodingKeys_optional)3;
      }
      else
      {
        char v7 = OUTLINED_FUNCTION_2_4();
        swift_bridgeObjectRelease();
        if (v7) {
          return (SiriLinkSuggestionsPlugin::LinkSuggestedAction::CodingKeys_optional)3;
        }
        else {
          return (SiriLinkSuggestionsPlugin::LinkSuggestedAction::CodingKeys_optional)4;
        }
      }
    }
  }
}

SiriLinkSuggestionsPlugin::LinkSuggestedAction::CodingKeys_optional __swiftcall LinkSuggestedAction.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (SiriLinkSuggestionsPlugin::LinkSuggestedAction::CodingKeys_optional)4;
}

Swift::Int LinkSuggestedAction.CodingKeys.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

unint64_t LinkSuggestedAction.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E6F69746361;
      break;
    case 2:
      unint64_t result = 0x72506D6574737973;
      break;
    case 3:
      return result;
    default:
      unint64_t result = 0x74736575716572;
      break;
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance LinkSuggestedAction.CodingKeys(char *a1, char *a2)
{
  return static LinkSuggestedAction.CodingKeys.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LinkSuggestedAction.CodingKeys()
{
  return LinkSuggestedAction.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance LinkSuggestedAction.CodingKeys(uint64_t a1)
{
  LinkSuggestedAction.CodingKeys.hash(into:)(a1, *v1);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance LinkSuggestedAction.CodingKeys()
{
  return LinkSuggestedAction.CodingKeys.stringValue.getter(*v0);
}

SiriLinkSuggestionsPlugin::LinkSuggestedAction::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance LinkSuggestedAction.CodingKeys@<W0>(uint64_t a1@<X0>, SiriLinkSuggestionsPlugin::LinkSuggestedAction::CodingKeys_optional *a2@<X8>)
{
  result.value = LinkSuggestedAction.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance LinkSuggestedAction.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LinkSuggestedAction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LinkSuggestedAction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t LinkSuggestedAction.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<LinkSuggestedAction.CodingKeys>);
  OUTLINED_FUNCTION_4_0();
  __chkstk_darwin(v5);
  char v7 = (uint64_t *)((char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = a1[3];
  unint64_t v34 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v8);
  unint64_t v9 = lazy protocol witness table accessor for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  }
  size_t v32 = a2;
  unint64_t v33 = v9;
  char v40 = 0;
  lazy protocol witness table accessor for type LinkSuggestedActionsRequest and conformance LinkSuggestedActionsRequest();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v10 = v35;
  uint64_t v11 = v36;
  int v12 = v37;
  int v13 = v38;
  int v14 = specialized static LinkSuggestedAction.decode<A, B>(type:from:key:)(v7, 1, (unint64_t *)&lazy cache variable for type metadata for LNAction);
  int v30 = v13;
  uint64_t v31 = v11;
  int v39 = v12;
  uint64_t v15 = specialized static LinkSuggestedAction.decode<A, B>(type:from:key:)(v7, 2, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
  uint64_t v29 = v10;
  LOBYTE(v35) = 3;
  uint64_t v16 = static CodableWrapper.decodeDictionary<A, B>(forType:forKey:container:)();
  uint64_t v17 = v31;
  uint64_t v18 = v16;
  int64_t v19 = v14;
  uint64_t v20 = v15;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDyS2SG_So35LNSuggestedActionDialogParameterKeya_SSts5NeverOTg509_sS2SSo35defg37KeyaSSIgggoo_SS3key_SS5valuetAB_SSts5i164OIegnrzr_TR042_s25SiriLinkSuggestionsPlugin0B15Suggestedb37V7request6action14systemProtocol19rawc129ParametersAcA0bE14ActionsRequestV_So8LNActionCSo08LNSystemJ0CSDyk66SGtc33_A45247CBCD3FCD1A5B59037132DD4F4ELlfcSo011LNSuggestedfL12D19M25_SStSS_SStXEfU_Tf3nnnpf_nTf1cn_n(v18);
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  char v23 = specialized Dictionary.init<A>(uniqueKeysWithValues:)(v22);

  uint64_t v24 = v20;
  uint64_t v25 = OUTLINED_FUNCTION_0_3();
  v26(v25);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  uint64_t v28 = v32;
  *size_t v32 = v29;
  v28[1] = v17;
  *((unsigned char *)v28 + 16) = v39;
  *((unsigned char *)v28 + 17) = v30;
  v28[3] = v19;
  v28[4] = v24;
  void v28[5] = v23;
  return result;
}

uint64_t *specialized static LinkSuggestedAction.decode<A, B>(type:from:key:)(uint64_t *a1, char a2, unint64_t *a3)
{
  uint64_t v6 = type metadata accessor for LNActionParameterMetadata(0, a3);
  char v13 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<LinkSuggestedAction.CodingKeys>);
  lazy protocol witness table accessor for type Data and conformance Data();
  char v7 = a1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (!v3)
  {
    type metadata accessor for LNActionParameterMetadata(0, &lazy cache variable for type metadata for NSKeyedUnarchiver);
    uint64_t v8 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
    char v7 = (uint64_t *)v8;
    if (!v8)
    {
      lazy protocol witness table accessor for type LinkSuggestedAction.CodingError and conformance LinkSuggestedAction.CodingError();
      swift_allocError();
      char v7 = v10;
      *uint64_t v10 = v6;
      v10[4] = (uint64_t)&type metadata for LinkSuggestedAction.CodingKeys;
      uint64_t v10[5] = lazy protocol witness table accessor for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys();
      *((unsigned char *)v7 + 8) = v13;
      swift_willThrow();
    }
    outlined consume of Data._Representation(v11, v12);
  }
  return v7;
}

uint64_t LinkSuggestedAction.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<LinkSuggestedAction.CodingKeys>);
  OUTLINED_FUNCTION_4_0();
  __chkstk_darwin(v5);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  lazy protocol witness table accessor for type LinkSuggestedActionsRequest and conformance LinkSuggestedActionsRequest();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v2)
  {
    uint64_t v8 = OUTLINED_FUNCTION_3_3();
    return v9(v8);
  }
  else
  {
    id v6 = *(id *)(v3 + 24);
    specialized static LinkSuggestedAction.encode<A, B>(_:into:key:)((uint64_t)v6);

    id v7 = *(id *)(v3 + 32);
    specialized static LinkSuggestedAction.encode<A, B>(_:into:key:)((uint64_t)v7);

    uint64_t v10 = swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySo35LNSuggestedActionDialogParameterKeyaSSG_SS_SSts5NeverOTg506_sSo35defg38KeyaS3SIgggoo_AB3key_SS5valuetSS_SSts5i85OIegnrzr_TR042_s25SiriLinkSuggestionsPlugin0B15Suggestedb6V18rawc44ParmatersSDyS2SGvgq26_SStSo011LNSuggestedfH12d5L18_V5XEfU_Tf3nnnpf_nTf1cn_n(v10);
    uint64_t v12 = v11;
    swift_bridgeObjectRelease();
    char v13 = specialized Dictionary.init<A>(uniqueKeysWithValues:)(v12);
    specialized _dictionaryUpCast<A, B, C, D>(_:)((uint64_t)v13);
    swift_bridgeObjectRelease();
    static CodableWrapper.encodeDictionary<A>(to:forKey:instance:)();
    uint64_t v14 = OUTLINED_FUNCTION_3_3();
    v15(v14);
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized static LinkSuggestedAction.encode<A, B>(_:into:key:)(uint64_t a1)
{
  v8[0] = 0;
  id v1 = [self archivedDataWithRootObject:a1 requiringSecureCoding:1 error:v8];
  id v2 = v8[0];
  if (v1)
  {
    uint64_t v3 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;

    v8[0] = v3;
    v8[1] = v5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<LinkSuggestedAction.CodingKeys>);
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    return outlined consume of Data._Representation((uint64_t)v3, (unint64_t)v5);
  }
  else
  {
    id v7 = v2;
    _convertNSErrorToError(_:)();

    return swift_willThrow();
  }
}

double protocol witness for Decodable.init(from:) in conformance LinkSuggestedAction@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  LinkSuggestedAction.init(from:)(a1, v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance LinkSuggestedAction(void *a1)
{
  return LinkSuggestedAction.encode(to:)(a1);
}

uint64_t outlined bridged method (pb) of @objc LNSuggestedAction.dialogParameters.getter(void *a1)
{
  id v1 = [a1 dialogParameters];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  type metadata accessor for LNSuggestedActionDialogParameterKey(0);
  lazy protocol witness table accessor for type LNSuggestedActionDialogParameterKey and conformance LNSuggestedActionDialogParameterKey();
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t lazy protocol witness table accessor for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LinkSuggestedActionsRequest and conformance LinkSuggestedActionsRequest()
{
  unint64_t result = lazy protocol witness table cache variable for type LinkSuggestedActionsRequest and conformance LinkSuggestedActionsRequest;
  if (!lazy protocol witness table cache variable for type LinkSuggestedActionsRequest and conformance LinkSuggestedActionsRequest)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkSuggestedActionsRequest and conformance LinkSuggestedActionsRequest);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LinkSuggestedActionsRequest and conformance LinkSuggestedActionsRequest;
  if (!lazy protocol witness table cache variable for type LinkSuggestedActionsRequest and conformance LinkSuggestedActionsRequest)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkSuggestedActionsRequest and conformance LinkSuggestedActionsRequest);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LinkSuggestedActionsRequest and conformance LinkSuggestedActionsRequest;
  if (!lazy protocol witness table cache variable for type LinkSuggestedActionsRequest and conformance LinkSuggestedActionsRequest)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkSuggestedActionsRequest and conformance LinkSuggestedActionsRequest);
  }
  return result;
}

uint64_t destroy for LinkSuggestedAction(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LinkSuggestedAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  char v4 = *(void **)(a2 + 24);
  long long v5 = *(void **)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  id v6 = v4;
  id v7 = v5;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LinkSuggestedAction(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  char v4 = *(void **)(a2 + 24);
  long long v5 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v4;
  id v6 = v4;

  id v7 = *(void **)(a2 + 32);
  uint64_t v8 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v7;
  id v9 = v7;

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for LinkSuggestedAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);

  long long v5 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkSuggestedAction(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkSuggestedAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for LinkSuggestedAction()
{
}

uint64_t initializeBufferWithCopyOfBuffer for LinkSuggestedAction.CodingError(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for LinkSuggestedAction.CodingError(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1 + 8);
}

uint64_t initializeWithCopy for LinkSuggestedAction.CodingError(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a1 + 8, a2 + 8);
  return a1;
}

void *assignWithCopy for LinkSuggestedAction.CodingError(void *a1, void *a2)
{
  *a1 = *a2;
  __swift_assign_boxed_opaque_existential_1(a1 + 1, a2 + 1);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    long long v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        __n128 result = (uint64_t *)swift_release();
        *long long v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *__n128 result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *long long v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for LinkSuggestedAction.CodingError(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkSuggestedAction.CodingError(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkSuggestedAction.CodingError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for LinkSuggestedAction.CodingError()
{
}

uint64_t getEnumTagSinglePayload for LinkSuggestedAction.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for LinkSuggestedAction.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2A8B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

void type metadata accessor for LinkSuggestedAction.CodingKeys()
{
}

unint64_t lazy protocol witness table accessor for type LinkSuggestedAction.CodingError and conformance LinkSuggestedAction.CodingError()
{
  unint64_t result = lazy protocol witness table cache variable for type LinkSuggestedAction.CodingError and conformance LinkSuggestedAction.CodingError;
  if (!lazy protocol witness table cache variable for type LinkSuggestedAction.CodingError and conformance LinkSuggestedAction.CodingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkSuggestedAction.CodingError and conformance LinkSuggestedAction.CodingError);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_2_4()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_3_3()
{
  return v0;
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized Collection.first.getter(a1, (uint64_t (*)(void))&type metadata accessor for RetrievedContext, a2);
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = a2(0);
  if (v4)
  {
    OUTLINED_FUNCTION_23();
    OUTLINED_FUNCTION_18_4();
    v6();
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 1;
  }
  return __swift_storeEnumTagSinglePayload(a3, v7, 1, v5);
}

void *specialized Collection.first.getter(uint64_t a1)
{
  unint64_t result = (void *)specialized Dictionary.startIndex.getter(a1);
  if (v4) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == (void *)(1 << *(unsigned char *)(a1 + 32))) {
    return 0;
  }
  else {
    return specialized Dictionary.subscript.getter(&v5, (uint64_t)result, v3, 0, a1);
  }
}

void *AppIntentsSuggestionsOwnerDefinitionFactory.Constants.appIntentResolverIdentifier.unsafeMutableAddressor()
{
  return &static AppIntentsSuggestionsOwnerDefinitionFactory.Constants.appIntentResolverIdentifier;
}

void *AppIntentsSuggestionsOwnerDefinitionFactory.Constants.appIntentSuggestionId.unsafeMutableAddressor()
{
  return &static AppIntentsSuggestionsOwnerDefinitionFactory.Constants.appIntentSuggestionId;
}

void one-time initialization function for appIdParameterName()
{
  static AppIntentsSuggestionsOwnerDefinitionFactory.Constants.appIdParameterName = 0x6E65746E49707061;
  unk_5FAE0 = 0xEF64497070615F74;
}

uint64_t *AppIntentsSuggestionsOwnerDefinitionFactory.Constants.appIdParameterName.unsafeMutableAddressor()
{
  if (one-time initialization token for appIdParameterName != -1) {
    swift_once();
  }
  return &static AppIntentsSuggestionsOwnerDefinitionFactory.Constants.appIdParameterName;
}

uint64_t static AppIntentsSuggestionsOwnerDefinitionFactory.Constants.appIdParameterName.getter()
{
  if (one-time initialization token for appIdParameterName != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_25_3();
}

void *AppIntentsSuggestionsOwnerDefinitionFactory.Constants.appIdResolverIdentifier.unsafeMutableAddressor()
{
  return &static AppIntentsSuggestionsOwnerDefinitionFactory.Constants.appIdResolverIdentifier;
}

unint64_t static AppIntentsSuggestionsOwnerDefinitionFactory.Constants.appIdResolverIdentifier.getter()
{
  return OUTLINED_FUNCTION_1(22);
}

void *AppIntentsSuggestionsOwnerDefinitionFactory.Constants.appIntentParameterName.unsafeMutableAddressor()
{
  return &static AppIntentsSuggestionsOwnerDefinitionFactory.Constants.appIntentParameterName;
}

unint64_t static AppIntentsSuggestionsOwnerDefinitionFactory.Constants.appIntentParameterName.getter()
{
  return OUTLINED_FUNCTION_8_4();
}

void *AppIntentsSuggestionsOwnerDefinitionFactory.Constants.contextCandidateAppDetailsKey.unsafeMutableAddressor()
{
  return &static AppIntentsSuggestionsOwnerDefinitionFactory.Constants.contextCandidateAppDetailsKey;
}

unint64_t static AppIntentsSuggestionsOwnerDefinitionFactory.Constants.contextCandidateAppDetailsKey.getter()
{
  return OUTLINED_FUNCTION_8_4();
}

uint64_t static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:)()
{
  OUTLINED_FUNCTION_24_3();
  uint64_t v2 = v1;
  char v4 = v3;
  uint64_t v6 = v5[3];
  uint64_t v7 = v5[4];
  uint64_t v8 = __swift_project_boxed_opaque_existential_1(v5, v6);
  uint64_t v9 = v4[3];
  uint64_t v10 = v4[4];
  uint64_t v11 = __swift_project_boxed_opaque_existential_1(v4, v9);
  uint64_t v12 = OUTLINED_FUNCTION_6_1();
  char v13 = (void *)OUTLINED_FUNCTION_21_3(v12);
  *char v13 = v14;
  v13[1] = static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:);
  return v16(v8, v11, v2, v0, v6, v9, v7, v10);
}

uint64_t static AppIntentsSuggestionsOwnerDefinitionFactory.getDialogProvider(linkClient:)(uint64_t a1)
{
  _s25SiriLinkSuggestionsPlugin0B6Client_pWOcTm_0(a1, (uint64_t)v3);
  type metadata accessor for AppIntentsDialogProvider();
  uint64_t v1 = OUTLINED_FUNCTION_19_4();
  outlined init with take of LinkDialogIdProvider(v3, v1 + 16);
  return v1;
}

void static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)()
{
  OUTLINED_FUNCTION_24_3();
  uint64_t v1 = v0;
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  uint64_t v3 = swift_task_alloc();
  char v4 = (void *)OUTLINED_FUNCTION_21_3(v3);
  *char v4 = v5;
  v4[1] = static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:);
  OUTLINED_FUNCTION_20_3();
  __asm { BR              X8 }
}

uint64_t static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)()
{
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_9_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = OUTLINED_FUNCTION_13_2();
  return v4(v3);
}

uint64_t closure #1 in static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return _swift_task_switch(closure #1 in static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:), 0, 0);
}

uint64_t closure #1 in static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)()
{
  OUTLINED_FUNCTION_8();
  static AppIntentsSuggestionsOwnerDefinitionFactory.handleDialog(dialogProperties:dialogProvider:)(*(void **)(v0 + 24), *(void *)(v0 + 32), *(uint64_t **)(v0 + 16));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t static AppIntentsSuggestionsOwnerDefinitionFactory.handleDialog(dialogProperties:dialogProvider:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v71 = type metadata accessor for BehaviorAfterSpeaking();
  OUTLINED_FUNCTION_1_3();
  uint64_t v70 = v6;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_39_0();
  uint64_t v72 = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingSection?);
  __chkstk_darwin(v9 - 8);
  OUTLINED_FUNCTION_39_0();
  uint64_t v65 = v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingText?);
  __chkstk_darwin(v11 - 8);
  char v13 = (char *)v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = type metadata accessor for TemplatingText();
  OUTLINED_FUNCTION_1_3();
  uint64_t v63 = v14;
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_39_0();
  uint64_t v66 = v16;
  uint64_t v17 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_1_3();
  uint64_t v19 = v18;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  OUTLINED_FUNCTION_25_3();
  DialogProperties.appIntentAction.getter(v23);
  uint64_t v68 = v77[4];
  id v69 = (id)v77[5];
  uint64_t v24 = v77[7];
  uint64_t result = outlined init with take of SuggestionAppIntent?((uint64_t)v77, (uint64_t)v78);
  if (!v79)
  {
    a3[3] = (uint64_t)&type metadata for String;
    *a3 = 0;
    a3[1] = 0xE000000000000000;
    return result;
  }
  v61[1] = v24;
  uint64_t v64 = a3;
  id v62 = v80;
  type metadata accessor for ViewContext();
  uint64_t v76 = ViewContext.__allocating_init()();
  (*(void (**)(uint64_t *__return_ptr, uint64_t *))(*(void *)a2 + 104))(v73, &v76);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DialogCallback);
  p_name = (char **)(&stru_58FF8 + 8);
  if (!swift_dynamicCast())
  {
    uint64_t v75 = 0;
    memset(v74, 0, sizeof(v74));
    outlined destroy of ToolInvocation?((uint64_t)v74, &demangling cache variable for type metadata for AppIntentDialogCallback?);
LABEL_10:
    if (p_name[478] != (char *)-1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.appIntentsSuggestions);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    id v33 = v69;
    swift_bridgeObjectRetain_n();
    id v34 = v33;
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      unsigned __int8 v37 = (uint8_t *)swift_slowAlloc();
      *(void *)&v74[0] = swift_slowAlloc();
      *(_DWORD *)unsigned __int8 v37 = 136315138;
      id v38 = [v62 identifier];
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v41 = v40;

      uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, (uint64_t *)v74);
      OUTLINED_FUNCTION_2_5(v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of SuggestionAppIntent?(v77, (void (*)(void, void, void, void, void, void, void, void))outlined consume of SuggestionAppIntent?);
      outlined release of SuggestionAppIntent?(v77, (void (*)(void, void, void, void, void, void, void, void))outlined consume of SuggestionAppIntent?);
      _os_log_impl(&dword_0, v35, v36, "Unable to get text from app intent for: %s", v37, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_10();
    }
    else
    {
      outlined release of SuggestionAppIntent?(v77, (void (*)(void, void, void, void, void, void, void, void))outlined consume of SuggestionAppIntent?);
      outlined release of SuggestionAppIntent?(v77, (void (*)(void, void, void, void, void, void, void, void))outlined consume of SuggestionAppIntent?);
    }

    uint64_t v31 = _swiftEmptyArrayStorage;
    goto LABEL_16;
  }
  static Locale.current.getter();
  uint64_t v27 = AppIntentDialogCallback.getText(dialogProperties:siriLocale:)(a1);
  unint64_t v29 = v28;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v17);
  outlined destroy of AppIntentDialogCallback((uint64_t)v74);
  uint64_t v30 = HIBYTE(v29) & 0xF;
  if ((v29 & 0x2000000000000000) == 0) {
    uint64_t v30 = v27 & 0xFFFFFFFFFFFFLL;
  }
  if (!v30)
  {
    swift_bridgeObjectRelease();
    p_name = &stru_58FF8.name;
    goto LABEL_10;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TemplatingSection>);
  type metadata accessor for TemplatingSection();
  uint64_t v31 = (void *)swift_allocObject();
  *((_OWORD *)v31 + 1) = xmmword_47FC0;
  TemplatingText.init(text:speakableTextOverride:)();
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 1, 1, v67);
  TemplatingSection.init(id:content:caption:spokenOnly:)();
LABEL_16:
  uint64_t v43 = v64;
  if (one-time initialization token for appIntentsSuggestions != -1) {
    swift_once();
  }
  uint64_t v44 = type metadata accessor for Logger();
  __swift_project_value_buffer(v44, (uint64_t)static Logger.appIntentsSuggestions);
  outlined release of SuggestionAppIntent?(v77, (void (*)(void, void, void, void, void, void, void, void))outlined copy of SuggestionAppIntent?);
  swift_bridgeObjectRetain();
  outlined release of SuggestionAppIntent?(v77, (void (*)(void, void, void, void, void, void, void, void))outlined copy of SuggestionAppIntent?);
  swift_bridgeObjectRetain();
  BOOL v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v47 = swift_slowAlloc();
    *(void *)&v74[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v47 = 136315394;
    id v48 = [v62 identifier];
    uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v51 = v50;

    uint64_t v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v51, (uint64_t *)v74);
    OUTLINED_FUNCTION_2_5(v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined release of SuggestionAppIntent?(v77, (void (*)(void, void, void, void, void, void, void, void))outlined consume of SuggestionAppIntent?);
    outlined release of SuggestionAppIntent?(v77, (void (*)(void, void, void, void, void, void, void, void))outlined consume of SuggestionAppIntent?);
    *(_WORD *)(v47 + 12) = 2080;
    uint64_t v53 = v65;
    specialized Collection.first.getter((uint64_t)v31, (uint64_t (*)(void))&type metadata accessor for TemplatingSection, v65);
    uint64_t v54 = type metadata accessor for TemplatingSection();
    if (__swift_getEnumTagSinglePayload(v53, 1, v54) == 1)
    {
      outlined destroy of ToolInvocation?(v53, &demangling cache variable for type metadata for TemplatingSection?);
      uint64_t v55 = 0;
      unint64_t v56 = 0xE000000000000000;
    }
    else
    {
      uint64_t v57 = v66;
      TemplatingSection.content.getter();
      OUTLINED_FUNCTION_23();
      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v53, v54);
      uint64_t v55 = TemplatingText.text.getter();
      unint64_t v56 = v59;
      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v57, v67);
    }
    uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, (uint64_t *)v74);
    OUTLINED_FUNCTION_2_5(v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v45, v46, "Using dialog for %s as: %s", (uint8_t *)v47, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_10();
  }
  else
  {
    outlined release of SuggestionAppIntent?(v77, (void (*)(void, void, void, void, void, void, void, void))outlined consume of SuggestionAppIntent?);
    outlined release of SuggestionAppIntent?(v77, (void (*)(void, void, void, void, void, void, void, void))outlined consume of SuggestionAppIntent?);

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(uint64_t, void, uint64_t))(v70 + 104))(v72, enum case for BehaviorAfterSpeaking.defaultBehavior(_:), v71);
  v43[3] = type metadata accessor for TemplatingResult();
  __swift_allocate_boxed_opaque_existential_1(v43);
  TemplatingResult.init(templateIdentifier:sections:behaviorAfterSpeaking:)();
  outlined release of SuggestionAppIntent?(v77, (void (*)(void, void, void, void, void, void, void, void))outlined consume of SuggestionAppIntent?);
  return swift_release();
}

uint64_t closure #2 in static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&long long v67 = a4;
  uint64_t v70 = type metadata accessor for VersionedInvocation();
  uint64_t v72 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v71 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for InvocationType();
  uint64_t v7 = *(void *)(v74 - 8);
  uint64_t v8 = __chkstk_darwin(v74);
  id v69 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v73 = (char *)&v58 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v68 = (char *)&v58 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v58 - v15;
  __chkstk_darwin(v14);
  uint64_t v63 = (char *)&v58 - v17;
  uint64_t v18 = type metadata accessor for IntentType();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(char **)(a1 + 40);
  long long v65 = *(_OWORD *)(a1 + 24);
  uint64_t v66 = (uint64_t (**)(unint64_t, char *, uint64_t))__swift_project_boxed_opaque_existential_1((void *)a1, v65);
  static AppIntentsSuggestionsOwnerDefinitionFactory.getAppIntentResolvers(linkClient:toolClient:)(a3, v67);
  static Resolvers.unionResolvers(type:resolvers:)();
  swift_bridgeObjectRelease();
  static AppIntentsSuggestionsOwnerDefinitionFactory.createIntentParameter()();
  long long v79 = v65;
  uint64_t v80 = v22;
  __swift_allocate_boxed_opaque_existential_1(v78);
  SuggestionDetailsBuilder.parameter(parameterName:resolver:resolveParam:)();
  swift_release();
  outlined destroy of ToolInvocation?((uint64_t)v75, &demangling cache variable for type metadata for Resolver?);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v78);
  uint64_t v23 = *(char **)(a1 + 40);
  long long v67 = *(_OWORD *)(a1 + 24);
  __swift_project_boxed_opaque_existential_1((void *)a1, v67);
  static AppIntentFilter.builder()();
  dispatch thunk of AppIntentFilter.Builder.build()();
  swift_release();
  (*(void (**)(char *, void, uint64_t))(v19 + 104))(v21, enum case for IntentType.appIntent(_:), v18);
  long long v79 = v67;
  uint64_t v80 = v23;
  __swift_allocate_boxed_opaque_existential_1(v78);
  dispatch thunk of SuggestionDetailsBuilder.intentIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v78);
  uint64_t result = static InvocationType.allCases.getter();
  uint64_t v25 = result;
  uint64_t v26 = _swiftEmptyArrayStorage;
  v78[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v27 = *(void *)(result + 16);
  uint64_t v62 = v7;
  *(void *)&long long v67 = v27;
  if (v27)
  {
    uint64_t v59 = a1;
    unint64_t v28 = 0;
    *(void *)&long long v65 = v7 + 88;
    LODWORD(v64) = enum case for InvocationType.assistantTurn(_:);
    uint64_t v61 = (uint64_t (**)(char *, uint64_t))(v7 + 8);
    uint64_t v60 = (void (**)(char *, uint64_t))(v7 + 96);
    uint64_t v66 = (uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32);
    uint64_t v29 = v74;
    uint64_t v30 = v63;
    while (v28 < *(void *)(v25 + 16))
    {
      unint64_t v31 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v32 = *(void *)(v7 + 72);
      id v33 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
      v33(v30, v25 + v31 + v32 * v28, v29);
      v33(v16, (unint64_t)v30, v29);
      int v34 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v16, v29);
      if (v34 == v64)
      {
        (*v60)(v16, v29);
        uint64_t v35 = v30;
        os_log_type_t v36 = &v16[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (state: AssistantTurnState, modality: InvocationModality))
                          + 48)];
        uint64_t v37 = type metadata accessor for InvocationModality();
        (*(void (**)(char *, uint64_t))(*(void *)(v37 - 8) + 8))(v36, v37);
        uint64_t v38 = type metadata accessor for AssistantTurnState();
        (*(void (**)(char *, uint64_t))(*(void *)(v38 - 8) + 8))(v16, v38);
        uint64_t v39 = *v66;
        (*v66)((unint64_t)v68, v35, v29);
        uint64_t v40 = v78[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v40 + 16) + 1, 1);
          uint64_t v40 = v78[0];
        }
        unint64_t v42 = *(void *)(v40 + 16);
        unint64_t v41 = *(void *)(v40 + 24);
        if (v42 >= v41 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1);
          uint64_t v40 = v78[0];
        }
        *(void *)(v40 + 16) = v42 + 1;
        uint64_t v29 = v74;
        uint64_t result = v39(v40 + v31 + v42 * v32, v68, v74);
        v78[0] = v40;
        uint64_t v7 = v62;
        uint64_t v30 = v63;
      }
      else
      {
        uint64_t v43 = *v61;
        (*v61)(v16, v29);
        uint64_t result = v43(v30, v29);
      }
      if ((void)v67 == ++v28)
      {
        uint64_t v44 = (void (**)(char *, uint64_t))v78[0];
        a1 = v59;
        uint64_t v26 = _swiftEmptyArrayStorage;
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v44 = (void (**)(char *, uint64_t))_swiftEmptyArrayStorage;
LABEL_14:
    swift_bridgeObjectRelease();
    outlined init with copy of SiriHelpSuggestionDetailsBuilderExtension & SuggestionDetailsBuilder(a1, (uint64_t)v78);
    BOOL v45 = v80;
    long long v64 = v79;
    os_log_type_t v46 = (uint64_t (**)(char *, uint64_t))v79;
    uint64_t v47 = __swift_project_boxed_opaque_existential_1(v78, v79);
    uint64_t v48 = (uint64_t)v44[2];
    *(void *)&long long v65 = v47;
    if (v48)
    {
      uint64_t v61 = v46;
      uint64_t v63 = v45;
      v75[0] = (uint64_t)_swiftEmptyArrayStorage;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48, 0);
      uint64_t v49 = v7 + 16;
      uint64_t v68 = *(char **)(v7 + 16);
      unint64_t v50 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v60 = v44;
      unint64_t v51 = (char *)v44 + v50;
      *(void *)&long long v67 = *(void *)(v49 + 56);
      uint64_t v66 = (uint64_t (**)(unint64_t, char *, uint64_t))(v72 + 32);
      do
      {
        uint64_t v53 = v73;
        uint64_t v52 = v74;
        uint64_t v54 = v68;
        ((void (*)(char *, char *, uint64_t))v68)(v73, v51, v74);
        ((void (*)(char *, char *, uint64_t))v54)(v69, v53, v52);
        VersionedInvocation.init(invocationType:versions:)();
        (*(void (**)(char *, uint64_t))(v49 - 8))(v53, v52);
        uint64_t v26 = (void *)v75[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1);
          uint64_t v26 = (void *)v75[0];
        }
        unint64_t v56 = v26[2];
        unint64_t v55 = v26[3];
        if (v56 >= v55 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v56 + 1, 1);
          uint64_t v26 = (void *)v75[0];
        }
        void v26[2] = v56 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v72 + 32))((unint64_t)v26+ ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80))+ *(void *)(v72 + 72) * v56, v71, v70);
        v75[0] = (uint64_t)v26;
        v51 += v67;
        --v48;
      }
      while (v48);
      swift_release();
      uint64_t v7 = v62;
      BOOL v45 = v63;
    }
    else
    {
      swift_release();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<VersionedInvocation>);
    uint64_t v57 = swift_allocObject();
    *(_OWORD *)(v57 + 16) = xmmword_47FC0;
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v73, enum case for InvocationType.siriHelp(_:), v74);
    VersionedInvocation.init(invocationType:versions:)();
    v75[0] = (uint64_t)v26;
    specialized Array.append<A>(contentsOf:)(v57);
    long long v76 = v64;
    uint64_t v77 = v45;
    __swift_allocate_boxed_opaque_existential_1(v75);
    dispatch thunk of SuggestionDetailsBuilder.validForInvocationTypes(_:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v78);
  }
  return result;
}

uint64_t static AppIntentsSuggestionsOwnerDefinitionFactory.getAppIntentResolvers(linkClient:toolClient:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Resolver>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_47FC0;
  _s25SiriLinkSuggestionsPlugin0B6Client_pWOcTm_0(a1, (uint64_t)v9);
  _s25SiriLinkSuggestionsPlugin0B6Client_pWOcTm_0(a2, (uint64_t)v8);
  uint64_t v5 = type metadata accessor for MetaDataSourcedAppIntentResolver();
  swift_allocObject();
  uint64_t v6 = MetaDataSourcedAppIntentResolver.init(linkClient:toolClient:)(v9, v8);
  *(void *)(v4 + 56) = v5;
  *(void *)(v4 + 64) = _s25SiriLinkSuggestionsPlugin32MetaDataSourcedAppIntentResolverCAC0aC3Kit0J0AAWlTm_0(&lazy protocol witness table cache variable for type MetaDataSourcedAppIntentResolver and conformance MetaDataSourcedAppIntentResolver, (void (*)(uint64_t))type metadata accessor for MetaDataSourcedAppIntentResolver);
  *(void *)(v4 + 32) = v6;
  return v4;
}

uint64_t static AppIntentsSuggestionsOwnerDefinitionFactory.createIntentParameter()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Intent, IntentParameter>);
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Any, Any?>);
  __chkstk_darwin(v2 - 8);
  *(void *)(swift_allocObject() + 16) = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  Transformer.init(transform:)();
  type metadata accessor for Intent();
  type metadata accessor for IntentParameter();
  Transformer.init(transform:)();
  type metadata accessor for ResolvableParameter();
  swift_allocObject();
  return ResolvableParameter.init(typeIdentifier:required:loggingKeyTransformer:intentTransformer:)();
}

uint64_t closure #1 in static AppIntentsSuggestionsOwnerDefinitionFactory.createIntentParameter()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a1, (uint64_t)&v38);
  if (swift_dynamicCast())
  {
    v40[0] = v34;
    v40[1] = v35;
    v40[2] = v36;
    v40[3] = v37;
    uint64_t v9 = *((void *)&v35 + 1);
    uint64_t v10 = (void *)v36;
    id v11 = [*((id *)&v36 + 1) identifier];
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;

    *(void *)&long long v34 = v12;
    *((void *)&v34 + 1) = v14;
    v15._uint64_t countAndFlagsBits = 95;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    swift_bridgeObjectRetain();
    v16._uint64_t countAndFlagsBits = v9;
    v16._object = v10;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._uint64_t countAndFlagsBits = 95;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    v18._uint64_t countAndFlagsBits = static AppIntentsSuggestionsOwnerDefinitionFactory.getParameterLoggingId(_:)((uint64_t)v40);
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    long long v19 = v34;
    *(void *)(a2 + 24) = &type metadata for String;
    uint64_t result = outlined release of SuggestionAppIntent((uint64_t)v40);
    *(_OWORD *)a2 = v19;
  }
  else
  {
    if (one-time initialization token for appIntentsSuggestions != -1) {
      swift_once();
    }
    uint64_t v21 = __swift_project_value_buffer(v5, (uint64_t)static Logger.appIntentsSuggestions);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v21, v5);
    outlined init with copy of Any(a1, (uint64_t)v40);
    uint64_t v22 = Logger.logObject.getter();
    int v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, (os_log_type_t)v23))
    {
      int v30 = v23;
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      uint64_t v33 = v29;
      *(_DWORD *)uint64_t v24 = 136315138;
      outlined init with copy of Any((uint64_t)v40, (uint64_t)&v34);
      outlined init with copy of Any?((uint64_t)&v34, (uint64_t)&v38, &demangling cache variable for type metadata for Any?);
      uint64_t v41 = v2;
      if (v39)
      {
        outlined init with take of Any(&v38, v32);
        outlined init with copy of Any((uint64_t)v32, (uint64_t)v31);
        uint64_t v25 = String.init<A>(describing:)();
        unint64_t v27 = v26;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
        outlined destroy of ToolInvocation?((uint64_t)&v34, &demangling cache variable for type metadata for Any?);
      }
      else
      {
        outlined destroy of ToolInvocation?((uint64_t)&v34, &demangling cache variable for type metadata for Any?);
        unint64_t v27 = 0xE300000000000000;
        uint64_t v25 = 7104878;
      }
      *(void *)&long long v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
      _os_log_impl(&dword_0, v22, (os_log_type_t)v30, "Unable to get parameter of type AppIntentAction. found value of type: %s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);

      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t static AppIntentsSuggestionsOwnerDefinitionFactory.getParameterLoggingId(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v28 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v4 = specialized Dictionary.startIndex.getter(v1);
    uint64_t v6 = v5;
    char v8 = v7 & 1;
    uint64_t v21 = v1;
    do
    {
      uint64_t v9 = v8 & 1;
      v25[0] = specialized Dictionary.subscript.getter((uint64_t)v26, v4, v6, v9, v1);
      v25[1] = v10;
      *(void *)&long long v23 = v25[0];
      *((void *)&v23 + 1) = v10;
      outlined init with copy of ActionParameter((uint64_t)v26, (uint64_t)v24);
      v22[0] = v23;
      v22[1] = v24[0];
      v22[2] = v24[1];
      v22[3] = v24[2];
      swift_bridgeObjectRetain();
      outlined destroy of ToolInvocation?((uint64_t)v25, &demangling cache variable for type metadata for (key: String, value: ActionParameter));
      closure #1 in static AppIntentsSuggestionsOwnerDefinitionFactory.getParameterLoggingId(_:)((uint64_t *)v22, v27);
      outlined destroy of ToolInvocation?((uint64_t)v22, &demangling cache variable for type metadata for (key: String, value: ActionParameter));
      uint64_t v11 = v27[0];
      uint64_t v12 = v27[1];
      uint64_t v3 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v3 = v28;
      }
      unint64_t v13 = v3[2];
      if (v13 >= v3[3] >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v3 = v28;
      }
      long long v3[2] = v13 + 1;
      uint64_t v14 = &v3[2 * v13];
      v14[4] = v11;
      v14[5] = v12;
      uint64_t v1 = v21;
      uint64_t v15 = specialized _NativeDictionary.index(after:)(v4, v6, v9, v21);
      uint64_t v17 = v16;
      char v8 = v18 & 1;
      outlined consume of [String : ActionParameter].Index._Variant(v4, v6, v9);
      uint64_t v4 = v15;
      uint64_t v6 = v17;
      --v2;
    }
    while (v2);
    outlined consume of [String : ActionParameter].Index._Variant(v15, v17, v8);
    swift_bridgeObjectRelease();
  }
  v25[0] = (uint64_t)v3;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(v25);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v19 = BidirectionalCollection<>.joined(separator:)();
  swift_release();
  return v19;
}

uint64_t closure #2 in static AppIntentsSuggestionsOwnerDefinitionFactory.createIntentParameter()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Intent();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  char v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v27 = a1;
  v11((char *)&v26 - v9, a1, v4);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t))(v5 + 88);
  if (v12(v10, v4) == enum case for Intent.appIntentV2(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    uint64_t v13 = *(void *)v10;
    swift_bridgeObjectRelease();
    a2[3] = type metadata accessor for LNAction();
    *a2 = v13;
    uint64_t v14 = enum case for IntentParameter.context(_:);
    uint64_t v15 = type metadata accessor for IntentParameter();
    return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(a2, v14, v15);
  }
  else
  {
    unint64_t v26 = a2;
    uint64_t v17 = v10;
    char v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v17, v4);
    v11(v8, v27, v4);
    if (v12(v8, v4) == enum case for Intent.appIntent(_:))
    {
      (*(void (**)(char *, uint64_t))(v5 + 96))(v8, v4);
      uint64_t v19 = *(void *)v8;
      swift_bridgeObjectRelease();
      unint64_t v20 = type metadata accessor for LNAction();
      uint64_t v21 = v26;
      v26[3] = v20;
      *uint64_t v21 = v19;
      uint64_t v22 = enum case for IntentParameter.context(_:);
      uint64_t v23 = type metadata accessor for IntentParameter();
      return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 104))(v21, v22, v23);
    }
    else
    {
      v18(v8, v4);
      uint64_t v24 = enum case for IntentParameter.ignore(_:);
      uint64_t v25 = type metadata accessor for IntentParameter();
      return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 104))(v26, v24, v25);
    }
  }
}

uint64_t closure #1 in static AppIntentsSuggestionsOwnerDefinitionFactory.getParameterLoggingId(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1[1];
  uint64_t v16 = *a1;
  uint64_t v17 = v4;
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = 61;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  uint64_t v13 = v16;
  uint64_t v14 = v4;
  outlined init with copy of ActionParameter((uint64_t)(a1 + 2), (uint64_t)v15);
  outlined init with copy of Any?((uint64_t)v15, (uint64_t)v12, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
  outlined destroy of ActionParameter((uint64_t)v15);
  outlined init with copy of Any?((uint64_t)v12, (uint64_t)v11, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
  if (v11[3])
  {
    outlined destroy of ToolInvocation?((uint64_t)v11, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
    outlined destroy of ToolInvocation?((uint64_t)v12, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
    unint64_t v6 = 0xE300000000000000;
    uint64_t v7 = 7628147;
  }
  else
  {
    outlined destroy of ToolInvocation?((uint64_t)v12, &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
    unint64_t v6 = 0xE600000000000000;
    uint64_t v7 = 0x7465732D6F6ELL;
  }
  unint64_t v8 = v6;
  String.append(_:)(*(Swift::String *)&v7);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v10 = v17;
  *a2 = v16;
  a2[1] = v10;
  return result;
}

uint64_t static AppIntentsSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:)(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  return _swift_task_switch(static AppIntentsSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:), 0, 0);
}

uint64_t static AppIntentsSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:)()
{
  if (one-time initialization token for appIntentsOwner != -1) {
    swift_once();
  }
  uint64_t v1 = (int *)v0[7];
  uint64_t v2 = static LinkSuggestionsOwners.appIntentsOwner;
  v0[5] = type metadata accessor for DefaultOwner();
  v0[6] = _s25SiriLinkSuggestionsPlugin32MetaDataSourcedAppIntentResolverCAC0aC3Kit0J0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DefaultOwner and conformance DefaultOwner, (void (*)(uint64_t))&type metadata accessor for DefaultOwner);
  v0[2] = v2;
  Swift::String v5 = (uint64_t (*)(void *))((char *)v1 + *v1);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[10] = v3;
  *uint64_t v3 = v0;
  v3[1] = static AppIntentsSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:);
  return v5(v0 + 2);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_9_2();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 16;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 88) = v4;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1(v3);
  return _swift_task_switch(static AppIntentsSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:), 0, 0);
}

{
  void *v0;
  uint64_t refreshed;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  refreshed = dispatch thunk of SuggestionOwnerDefinitionBuilder.getRefreshService()();
  uint64_t v3 = v2;
  v0[12] = refreshed;
  uint64_t v4 = [objc_allocWithZone((Class)LNMetadataProvider) init];
  Swift::String v5 = [objc_allocWithZone((Class)LNSuggestionsProvider) init];
  type metadata accessor for LinkRegistryObserver();
  swift_allocObject();
  uint64_t v6 = swift_unknownObjectRetain();
  uint64_t v7 = LinkRegistryObserver.init(refreshableService:)(v6, v3);
  type metadata accessor for DefaultLinkClient();
  swift_allocObject();
  v0[13] = DefaultLinkClient.init(metadataProvider:suggestionsProvider:registryObserver:)((uint64_t)v4, (uint64_t)v5, v7);
  type metadata accessor for DefaultToolClient();
  swift_allocObject();
  v0[14] = DefaultToolClient.init()();
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:)
                                                                   + async function pointer to specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:));
  swift_retain();
  unint64_t v8 = (void *)swift_task_alloc();
  v0[15] = v8;
  *unint64_t v8 = v0;
  v8[1] = static AppIntentsSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:);
  uint64_t v9 = OUTLINED_FUNCTION_25_3();
  return v14(v9, v10, v11, v12);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_9_2();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_9_2();
  *uint64_t v4 = v3;
  *(void *)(v6 + 128) = v5;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(static AppIntentsSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_20_0();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 128);
  return v1(v2);
}

uint64_t DialogProperties.appIntentAction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = dispatch thunk of DialogProperties.getParameters()();
  specialized Dictionary.subscript.getter(0xD000000000000010, 0x800000000004B130, v2, &v16);
  swift_bridgeObjectRelease();
  if (!v17)
  {
    uint64_t result = outlined destroy of ToolInvocation?((uint64_t)&v16, &demangling cache variable for type metadata for Any?);
    goto LABEL_5;
  }
  uint64_t result = swift_dynamicCast();
  if (!result)
  {
LABEL_5:
    uint64_t v4 = 0;
    uint64_t v6 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    long long v5 = 0uLL;
    long long v7 = 0uLL;
    goto LABEL_6;
  }
  uint64_t v4 = v10;
  long long v5 = v11;
  uint64_t v6 = v12;
  long long v7 = v13;
  uint64_t v8 = v14;
  uint64_t v9 = v15;
LABEL_6:
  *(void *)a1 = v4;
  *(_OWORD *)(a1 + 8) = v5;
  *(void *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 32) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  return result;
}

uint64_t protocol witness for static OwnerDefinitionFactory.createOwnerDefinitions() in conformance AppIntentsSuggestionsOwnerDefinitionFactory()
{
  return static OwnerDefinitionFactory.createOwnerDefinitions()(v0);
}

uint64_t protocol witness for static OwnerDefinitionFactory.createOwnerDefinitions(builderFactory:) in conformance AppIntentsSuggestionsOwnerDefinitionFactory(uint64_t a1, uint64_t a2)
{
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *long long v5 = v2;
  v5[1] = static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:);
  return static AppIntentsSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:)(a1, a2);
}

void *Context.getAppIntentDetails()()
{
  if (one-time initialization token for appIntentsOwner != -1) {
    swift_once();
  }
  uint64_t v0 = static LinkSuggestionsOwners.appIntentsOwner;
  uint64_t v1 = type metadata accessor for DefaultOwner();
  v6[3] = v1;
  uint64_t v2 = _s25SiriLinkSuggestionsPlugin32MetaDataSourcedAppIntentResolverCAC0aC3Kit0J0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DefaultOwner and conformance DefaultOwner, (void (*)(uint64_t))&type metadata accessor for DefaultOwner);
  void v6[4] = v2;
  v6[0] = v0;
  __swift_project_boxed_opaque_existential_1(v6, v1);
  v5[3] = v1;
  v5[4] = *(void *)(v2 + 8);
  __swift_allocate_boxed_opaque_existential_1(v5);
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_18_4();
  v3();
  swift_retain();
  Context.getParam(for:key:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  if (v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AppIntentDetails]);
    if (swift_dynamicCast()) {
      return (void *)v6[0];
    }
  }
  else
  {
    outlined destroy of ToolInvocation?((uint64_t)v7, &demangling cache variable for type metadata for Any?);
  }
  return _swiftEmptyArrayStorage;
}

Swift::Void __swiftcall Context.setAppIntentDetails(_:)(Swift::OpaquePointer a1)
{
  if (one-time initialization token for appIntentsOwner != -1) {
    swift_once();
  }
  uint64_t v2 = static LinkSuggestionsOwners.appIntentsOwner;
  uint64_t v3 = type metadata accessor for DefaultOwner();
  v8[3] = v3;
  uint64_t v4 = _s25SiriLinkSuggestionsPlugin32MetaDataSourcedAppIntentResolverCAC0aC3Kit0J0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DefaultOwner and conformance DefaultOwner, (void (*)(uint64_t))&type metadata accessor for DefaultOwner);
  void v8[4] = v4;
  v8[0] = v2;
  __swift_project_boxed_opaque_existential_1(v8, v3);
  void v7[3] = v3;
  v7[4] = *(void *)(v4 + 8);
  __swift_allocate_boxed_opaque_existential_1(v7);
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_18_4();
  v5();
  v6[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AppIntentDetails]);
  v6[0] = a1._rawValue;
  swift_retain();
  swift_bridgeObjectRetain();
  Context.setParam(for:key:value:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t specialized _NativeDictionary.index(after:)(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || -(-1 << *(unsigned char *)(a4 + 32)) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 64 + (((unint64_t)result >> 3) & 0x1FFFFFFFFFFFFFF8)) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    return _HashTable.occupiedBucket(after:)();
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v5 = *(void *)(*(void *)(a5 + 48) + 16 * a2);
    outlined init with copy of ActionParameter(*(void *)(a5 + 56) + 48 * a2, result);
    swift_bridgeObjectRetain();
    return v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

void *specialized Dictionary.subscript.getter(void *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v5 = *(void *)(*(void *)(a5 + 48) + 16 * a2);
    unsigned int v6 = *(void **)(*(void *)(a5 + 56) + 8 * a2);
    *uint64_t result = v6;
    swift_bridgeObjectRetain();
    id v7 = v6;
    return (void *)v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[13] = a3;
  v4[14] = a4;
  v4[12] = a2;
  v4[5] = type metadata accessor for DefaultLinkClient();
  v4[6] = &protocol witness table for DefaultLinkClient;
  v4[2] = a1;
  swift_retain();
  swift_retain();
  return _swift_task_switch(specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:), 0, 0);
}

uint64_t specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:)()
{
  OUTLINED_FUNCTION_20_0();
  _s25SiriLinkSuggestionsPlugin0B6Client_pWOcTm_0(v0 + 16, v0 + 56);
  type metadata accessor for AppIntentsDialogProvider();
  uint64_t v1 = OUTLINED_FUNCTION_19_4();
  *(void *)(v0 + 120) = v1;
  outlined init with take of LinkDialogIdProvider((long long *)(v0 + 56), v1 + 16);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_6_1();
  *(void *)(v0 + 128) = v3;
  *uint64_t v3 = v0;
  v3[1] = specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 96);
  return v8(v2, v6, v4, v1, v5);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v9;

  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_9_2();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 16;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_9_2();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v3);
  swift_release();
  uint64_t v6 = OUTLINED_FUNCTION_13_2();
  return v7(v6);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_9_2();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 16;
  uint64_t v5 = v4[19];
  uint64_t v6 = v4[18];
  uint64_t v7 = v4[15];
  uint64_t v8 = *v0;
  OUTLINED_FUNCTION_9_2();
  *uint64_t v9 = v8;
  swift_task_dealloc();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_task_dealloc();
  uint64_t v10 = OUTLINED_FUNCTION_13_2();
  return v11(v10);
}

uint64_t specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[16] = a7;
  v8[17] = a8;
  v8[14] = a5;
  v8[15] = a6;
  v8[12] = a3;
  v8[13] = a4;
  OUTLINED_FUNCTION_1_3();
  uint64_t v14 = v13;
  v8[18] = v13;
  uint64_t v15 = swift_task_alloc();
  v8[19] = v15;
  void v8[5] = a5;
  v8[6] = a7;
  v8[20] = (uint64_t)__swift_allocate_boxed_opaque_existential_1(v8 + 2);
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_18_4();
  v16();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v15, a2, a6);
  return _swift_task_switch(specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:), 0, 0);
}

void specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:)()
{
  OUTLINED_FUNCTION_20_0();
  _s25SiriLinkSuggestionsPlugin0B6Client_pWOcTm_0(v0 + 16, v0 + 56);
  type metadata accessor for AppIntentsDialogProvider();
  uint64_t v1 = OUTLINED_FUNCTION_19_4();
  *(void *)(v0 + 168) = v1;
  outlined init with take of LinkDialogIdProvider((long long *)(v0 + 56), v1 + 16);
  uint64_t v2 = (void *)OUTLINED_FUNCTION_6_1();
  *(void *)(v0 + 176) = v2;
  *uint64_t v2 = v0;
  v2[1] = specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:);
  __asm { BR              X8 }
}

uint64_t specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[23] = a4;
  v5[24] = a5;
  v5[22] = a3;
  uint64_t v8 = type metadata accessor for DialogDetails();
  v5[25] = v8;
  v5[26] = *(void *)(v8 - 8);
  v5[27] = swift_task_alloc();
  uint64_t v5[5] = type metadata accessor for DefaultLinkClient();
  v5[6] = &protocol witness table for DefaultLinkClient;
  long long v5[2] = a1;
  v5[10] = type metadata accessor for DefaultToolClient();
  v5[11] = &protocol witness table for DefaultToolClient;
  v5[7] = a2;
  swift_retain();
  swift_retain();
  return _swift_task_switch(specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:), 0, 0);
}

void specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)()
{
  OUTLINED_FUNCTION_24_3();
  OUTLINED_FUNCTION_5_3();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v1;
  *(void *)(v5 + 24) = v2;
  *uint64_t v0 = &async function pointer to partial apply for closure #1 in static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:);
  v0[1] = v5;
  uint64_t v6 = OUTLINED_FUNCTION_10_4();
  v7(v6);
  uint64_t v8 = (void *)swift_task_alloc();
  uint64_t v9 = OUTLINED_FUNCTION_14_3(v8);
  OUTLINED_FUNCTION_12_2(v9, 0x800000000004A5B0, v10, (uint64_t)partial apply for closure #2 in static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:));
  swift_task_dealloc();
  uint64_t v11 = OUTLINED_FUNCTION_16_3();
  v12(v11);
  _s25SiriLinkSuggestionsPlugin0B6Client_pWOcTm_0(v4, (uint64_t)v18);
  uint64_t v13 = type metadata accessor for OnRequestAppIntents();
  uint64_t v14 = OUTLINED_FUNCTION_19_4();
  outlined init with take of LinkDialogIdProvider(v18, v14 + 16);
  *(void *)(v3 + 120) = v13;
  uint64_t v15 = _s25SiriLinkSuggestionsPlugin32MetaDataSourcedAppIntentResolverCAC0aC3Kit0J0AAWlTm_0(&lazy protocol witness table cache variable for type OnRequestAppIntents and conformance OnRequestAppIntents, (void (*)(uint64_t))type metadata accessor for OnRequestAppIntents);
  OUTLINED_FUNCTION_22_2(v15);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OwnerDefinition>);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_47FC0;
  dispatch thunk of SuggestionOwnerDefinitionBuilder.build()();
  __swift_destroy_boxed_opaque_existential_1(v4);
  __swift_destroy_boxed_opaque_existential_1(v2);
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_3();
  __asm { BRAA            X2, X16 }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  long long *v18;

  OUTLINED_FUNCTION_24_3();
  OUTLINED_FUNCTION_5_3();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v1;
  *(void *)(v5 + 24) = v2;
  *uint64_t v0 = &closure #1 in static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)partial apply;
  v0[1] = v5;
  uint64_t v6 = OUTLINED_FUNCTION_10_4();
  v7(v6);
  uint64_t v8 = (void *)swift_task_alloc();
  uint64_t v9 = OUTLINED_FUNCTION_14_3(v8);
  OUTLINED_FUNCTION_12_2(v9, 0x800000000004A5B0, v10, (uint64_t)closure #2 in static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)partial apply);
  swift_task_dealloc();
  uint64_t v11 = OUTLINED_FUNCTION_16_3();
  v12(v11);
  _s25SiriLinkSuggestionsPlugin0B6Client_pWOcTm_0(v4, (uint64_t)v18);
  uint64_t v13 = type metadata accessor for OnRequestAppIntents();
  uint64_t v14 = OUTLINED_FUNCTION_19_4();
  outlined init with take of LinkDialogIdProvider(v18, v14 + 16);
  *(void *)(v3 + 120) = v13;
  uint64_t v15 = _s25SiriLinkSuggestionsPlugin32MetaDataSourcedAppIntentResolverCAC0aC3Kit0J0AAWlTm_0(&lazy protocol witness table cache variable for type OnRequestAppIntents and conformance OnRequestAppIntents, (void (*)(uint64_t))type metadata accessor for OnRequestAppIntents);
  OUTLINED_FUNCTION_22_2(v15);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OwnerDefinition>);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_47FC0;
  dispatch thunk of SuggestionOwnerDefinitionBuilder.build()();
  __swift_destroy_boxed_opaque_existential_1(v4);
  __swift_destroy_boxed_opaque_existential_1(v2);
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_3();
  __asm { BRAA            X2, X16 }
}

uint64_t specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[23] = a4;
  v8[24] = a5;
  v8[22] = a3;
  uint64_t v14 = type metadata accessor for DialogDetails();
  v8[25] = v14;
  v8[26] = *(void *)(v14 - 8);
  v8[27] = swift_task_alloc();
  void v8[5] = a6;
  v8[6] = a8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v8 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 16))(boxed_opaque_existential_1, a1, a6);
  v8[10] = a7;
  v8[11] = v19;
  long long v16 = __swift_allocate_boxed_opaque_existential_1(v8 + 7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 16))(v16, a2, a7);
  return _swift_task_switch(specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:), 0, 0);
}

uint64_t outlined init with take of SuggestionAppIntent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SuggestionAppIntent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined consume of SuggestionAppIntent?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return swift_bridgeObjectRelease();
  }
  return result;
}

void *outlined release of SuggestionAppIntent?(void *a1, void (*a2)(void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t outlined copy of SuggestionAppIntent?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v7 = a6;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined destroy of AppIntentDialogCallback(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for AppIntentsSuggestionsOwnerDefinitionFactory()
{
  return self;
}

ValueMetadata *type metadata accessor for AppIntentsSuggestionsOwnerDefinitionFactory.Constants()
{
  return &type metadata for AppIntentsSuggestionsOwnerDefinitionFactory.Constants;
}

uint64_t sub_2EAD4()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)()
{
  OUTLINED_FUNCTION_20_0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_21_3(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:);
  uint64_t v3 = OUTLINED_FUNCTION_17_3();
  return closure #1 in static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)(v3, v4, v5, v6);
}

uint64_t partial apply for closure #2 in static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)(uint64_t a1)
{
  return closure #2 in static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t _s25SiriLinkSuggestionsPlugin32MetaDataSourcedAppIntentResolverCAC0aC3Kit0J0AAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of SiriHelpSuggestionDetailsBuilderExtension & SuggestionDetailsBuilder(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_2EC60()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for closure #1 in static AppIntentsSuggestionsOwnerDefinitionFactory.createIntentParameter()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in static AppIntentsSuggestionsOwnerDefinitionFactory.createIntentParameter()(a1, a2);
}

unint64_t type metadata accessor for LNAction()
{
  unint64_t result = lazy cache variable for type metadata for LNAction;
  if (!lazy cache variable for type metadata for LNAction)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LNAction);
  }
  return result;
}

uint64_t outlined release of SuggestionAppIntent(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_25_3();
  OUTLINED_FUNCTION_18_4();
  v4();
  return a2;
}

uint64_t closure #1 in static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)partial apply()
{
  OUTLINED_FUNCTION_20_0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_21_3(v0);
  *uint64_t v1 = v2;
  v1[1] = closure #1 in static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)partial apply;
  uint64_t v3 = OUTLINED_FUNCTION_17_3();
  return closure #1 in static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)(v3, v4, v5, v6);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_9_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t OUTLINED_FUNCTION_2_5(uint64_t a1)
{
  *(void *)(v1 - 312) = a1;
  return v1 - 312;
}

uint64_t OUTLINED_FUNCTION_6_1()
{
  return swift_task_alloc();
}

unint64_t OUTLINED_FUNCTION_8_4()
{
  return 0xD000000000000010;
}

uint64_t OUTLINED_FUNCTION_10_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_12_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return dispatch thunk of SuggestionOwnerDefinitionBuilder.add(suggestionId:dialogDetails:builder:)(0xD000000000000013, a2, v4, a4, v5);
}

uint64_t OUTLINED_FUNCTION_13_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_14_3(void *a1)
{
  a1[2] = v1;
  a1[3] = v2;
  a1[4] = v3;
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_16_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_17_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_19_4()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_21_3(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_22_2(uint64_t a1)
{
  *(void *)(v1 + 128) = a1;
  *(void *)(v1 + 96) = v2;
  return dispatch thunk of SuggestionOwnerDefinitionBuilder.withConfiguratorProvider(_:)(v1 + 96);
}

uint64_t OUTLINED_FUNCTION_25_3()
{
  return v0;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySo35LNSuggestedActionDialogParameterKeyaSSG_SS_SSts5NeverOTg506_sSo35defg38KeyaS3SIgggoo_AB3key_SS5valuetSS_SSts5i85OIegnrzr_TR042_s25SiriLinkSuggestionsPlugin0B15Suggestedb6V18rawc44ParmatersSDyS2SGvgq26_SStSo011LNSuggestedfH12d5L18_V5XEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v3 = specialized Dictionary.startIndex.getter(a1);
    if ((v3 & 0x8000000000000000) == 0)
    {
      unint64_t v5 = v3;
      if (v3 < 1 << *(unsigned char *)(a1 + 32))
      {
        int v6 = v4;
        uint64_t v7 = a1 + 64;
        while ((*(void *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
        {
          if (v6 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_18;
          }
          uint64_t v16 = v1;
          uint64_t v8 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v5);
          uint64_t v9 = v8[1];
          uint64_t v19 = *v8;
          uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v17 = v11;
          uint64_t v18 = v10;
          unint64_t v13 = _swiftEmptyArrayStorage[2];
          unint64_t v12 = _swiftEmptyArrayStorage[3];
          swift_bridgeObjectRetain();
          if (v13 >= v12 >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          _swiftEmptyArrayStorage[2] = v13 + 1;
          uint64_t v14 = &_swiftEmptyArrayStorage[4 * v13];
          v14[4] = v18;
          v14[5] = v17;
          v14[6] = v19;
          v14[7] = v9;
          if ((uint64_t)v5 >= -(-1 << *(unsigned char *)(a1 + 32))) {
            goto LABEL_19;
          }
          uint64_t v7 = a1 + 64;
          if ((*(void *)(a1 + 64 + 8 * (v5 >> 6)) & (1 << v5)) == 0) {
            goto LABEL_20;
          }
          if (v6 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_21;
          }
          uint64_t v15 = _HashTable.occupiedBucket(after:)();
          --v1;
          if (v16 == 1) {
            return;
          }
          unint64_t v5 = v15;
          if ((v15 & 0x8000000000000000) == 0)
          {
            int v6 = *(_DWORD *)(a1 + 36);
            if (v15 < 1 << *(unsigned char *)(a1 + 32)) {
              continue;
            }
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
    }
LABEL_22:
    __break(1u);
  }
}

uint64_t static DefaultLinkDialogIdProvider.canDialog(action:)(uint64_t a1)
{
  if (one-time initialization token for supportedSystemProtocols != -1) {
    swift_once();
  }
  uint64_t v2 = static DefaultLinkDialogIdProvider.supportedSystemProtocols;
  id v3 = *(id *)(a1 + 32);
  LOBYTE(v2) = specialized Set.contains(_:)(v3, v2);

  if (v2)
  {
    if (static DefaultLinkDialogIdProvider.validDialogParameters(for:)(a1)) {
      return 1;
    }
    if (one-time initialization token for linkSuggestions != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.linkSuggestions);
    outlined retain of LinkSuggestedAction(a1);
    outlined retain of LinkSuggestedAction(a1);
    outlined retain of LinkSuggestedAction(a1);
    outlined retain of LinkSuggestedAction(a1);
    int v6 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315394;
      id v16 = [v3 identifier];
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v19 = v18;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of LinkSuggestedAction(a1);
      outlined release of LinkSuggestedAction(a1);
      *(_WORD *)(v15 + 12) = 2080;
      uint64_t v20 = swift_bridgeObjectRetain();
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySo35LNSuggestedActionDialogParameterKeyaSSG_SS_SSts5NeverOTg506_sSo35defg38KeyaS3SIgggoo_AB3key_SS5valuetSS_SSts5i85OIegnrzr_TR042_s25SiriLinkSuggestionsPlugin0B15Suggestedb6V18rawc44ParmatersSDyS2SGvgq26_SStSo011LNSuggestedfH12d5L18_V5XEfU_Tf3nnnpf_nTf1cn_n(v20);
      uint64_t v22 = v21;
      swift_bridgeObjectRelease();
      specialized Dictionary.init<A>(uniqueKeysWithValues:)(v22);
      uint64_t v23 = Dictionary.description.getter();
      unint64_t v25 = v24;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of LinkSuggestedAction(a1);
      outlined release of LinkSuggestedAction(a1);
      _os_log_impl(&dword_0, v6, v14, "Invalid dialog parameters in canDialog for protocol: %s, parameters: %s", (uint8_t *)v15, 0x16u);
      goto LABEL_14;
    }
    outlined release of LinkSuggestedAction(a1);
    outlined release of LinkSuggestedAction(a1);
LABEL_16:
    outlined release of LinkSuggestedAction(a1);
    outlined release of LinkSuggestedAction(a1);
    goto LABEL_17;
  }
  if (one-time initialization token for linkSuggestions != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.linkSuggestions);
  outlined retain of LinkSuggestedAction(a1);
  outlined retain of LinkSuggestedAction(a1);
  int v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v6, v7)) {
    goto LABEL_16;
  }
  uint64_t v8 = (uint8_t *)swift_slowAlloc();
  uint64_t v26 = swift_slowAlloc();
  *(_DWORD *)uint64_t v8 = 136315138;
  id v9 = [v3 identifier];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v12 = v11;

  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v26);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined release of LinkSuggestedAction(a1);
  outlined release of LinkSuggestedAction(a1);
  _os_log_impl(&dword_0, v6, v7, "Unknown system protocol in canDialog: %s", v8, 0xCu);
LABEL_14:
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();
LABEL_17:

  return 0;
}

uint64_t specialized Set.contains(_:)(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) != 0)
  {
    id v3 = a1;
    char v4 = __CocoaSet.contains(_:)();

    return v4 & 1;
  }
  if (!*(void *)(a2 + 16)
    || (Swift::Int v6 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40)),
        uint64_t v7 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v8 = v6 & ~v7,
        uint64_t v9 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0))
  {
LABEL_11:
    char v12 = 0;
    return v12 & 1;
  }
  type metadata accessor for LNSystemProtocol();
  id v10 = *(id *)(*(void *)(a2 + 48) + 8 * v8);
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    uint64_t v13 = ~v7;
    unint64_t v14 = (v8 + 1) & v13;
    if ((*(void *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      do
      {
        id v15 = *(id *)(*(void *)(a2 + 48) + 8 * v14);
        char v12 = static NSObject.== infix(_:_:)();

        if (v12) {
          break;
        }
        unint64_t v14 = (v14 + 1) & v13;
      }
      while (((*(void *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
      return v12 & 1;
    }
    goto LABEL_11;
  }
  char v12 = 1;
  return v12 & 1;
}

void specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    Swift::Int v8 = v6 & ~v7;
    OUTLINED_FUNCTION_1_4();
    if (v9)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      char v11 = (void *)(v10 + 16 * v8);
      if ((*v11 != a1 || v11[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v13 = ~v7;
        uint64_t v14 = (v8 + 1) & v13;
        OUTLINED_FUNCTION_1_4();
        if (v15)
        {
          do
          {
            id v16 = (void *)(v10 + 16 * v14);
            if (*v16 == a1 && v16[1] == a2) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
            uint64_t v14 = (v14 + 1) & v13;
            OUTLINED_FUNCTION_1_4();
          }
          while ((v18 & 1) != 0);
        }
      }
    }
  }
}

uint64_t DialogDetails.dialogId.getter()
{
  return OUTLINED_FUNCTION_25_3();
}

uint64_t DialogDetails.dialogType.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t DialogDetails.getTemplateLocation()()
{
  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_35();
  uint64_t v0 = OUTLINED_FUNCTION_25_3();
  return v1(v0);
}

uint64_t DialogDetails.sectionIdentifier.getter()
{
  if (*(unsigned char *)(v0 + 24)) {
    return 0x7470697263736564;
  }
  else {
    return 0x6974736567677573;
  }
}

Swift::String __swiftcall DialogType.getSectionId()()
{
  BOOL v1 = (v0 & 1) == 0;
  if (v0) {
    uint64_t v2 = 0x7470697263736564;
  }
  else {
    uint64_t v2 = 0x6974736567677573;
  }
  if (v1) {
    id v3 = (void *)0xEA00000000006E6FLL;
  }
  else {
    id v3 = (void *)0xEB000000006E6F69;
  }
  result._object = v3;
  result._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t DialogDetails.init(dialogId:dialogParams:dialogType:templateLocation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(unsigned char *)(a6 + 24) = a4 & 1;
  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_35();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
  return v10(a6, a5, v8);
}

uint64_t protocol witness for DialogProperties.globals.getter in conformance DialogDetails()
{
  return DialogProperties.globals.getter();
}

uint64_t protocol witness for CATDialogProvider.isSpeakable.getter in conformance DialogDetails(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type DialogDetails and conformance DialogDetails(&lazy protocol witness table cache variable for type DialogDetails and conformance DialogDetails);
  return DialogIdProvider.isSpeakable.getter(a1, v2);
}

uint64_t one-time initialization function for supportedSystemProtocols()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_493B0;
  BOOL v1 = self;
  *(void *)(inited + 32) = [v1 openEntitySystemProtocol];
  *(void *)(inited + 40) = [v1 cancelProtocol];
  *(void *)(inited + 48) = [v1 createEntitySystemProtocol];
  *(void *)(inited + 56) = [v1 searchSystemProtocol];
  *(void *)(inited + 64) = [v1 closeEntityProtocol];
  *(void *)(inited + 72) = [v1 navigateSequentiallyProtocol];
  *(void *)(inited + 80) = [v1 changeBinarySettingSystemProtocol];
  specialized Array._endMutation()();
  uint64_t result = specialized Set.init<A>(_:)(inited);
  static DefaultLinkDialogIdProvider.supportedSystemProtocols = result;
  return result;
}

uint64_t *DefaultLinkDialogIdProvider.supportedSystemProtocols.unsafeMutableAddressor()
{
  if (one-time initialization token for supportedSystemProtocols != -1) {
    swift_once();
  }
  return &static DefaultLinkDialogIdProvider.supportedSystemProtocols;
}

uint64_t static DefaultLinkDialogIdProvider.supportedSystemProtocols.getter()
{
  if (one-time initialization token for supportedSystemProtocols != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

uint64_t DefaultLinkDialogIdProvider.__allocating_init(templateDir:)()
{
  uint64_t v0 = swift_allocObject();
  type metadata accessor for URL();
  OUTLINED_FUNCTION_35();
  uint64_t v1 = OUTLINED_FUNCTION_5_4();
  v2(v1);
  return v0;
}

uint64_t DefaultLinkDialogIdProvider.init(templateDir:)()
{
  type metadata accessor for URL();
  OUTLINED_FUNCTION_35();
  uint64_t v1 = OUTLINED_FUNCTION_5_4();
  v2(v1);
  return v0;
}

uint64_t static DefaultLinkDialogIdProvider.validDialogParameters(for:)(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = self;
  id v4 = v2;
  id v5 = [v3 openEntitySystemProtocol];
  type metadata accessor for LNSystemProtocol();
  char v6 = static NSObject.== infix(_:_:)();

  if (v6) {
    goto LABEL_15;
  }
  id v4 = v4;
  id v7 = [v3 cancelProtocol];
  char v8 = static NSObject.== infix(_:_:)();

  if (v8) {
    goto LABEL_15;
  }
  id v9 = v4;
  id v10 = [v3 createEntitySystemProtocol];
  char v11 = static NSObject.== infix(_:_:)();

  if (v11)
  {

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LNSuggestedActionDialogParameterKey>);
    uint64_t v12 = swift_allocObject();
    uint64_t v13 = v12;
    *(_OWORD *)(v12 + 16) = xmmword_47FC0;
    uint64_t v14 = (void **)&LNSuggestedActionDialogParameterKeyEntityType;
    goto LABEL_5;
  }
  id v4 = v9;
  id v22 = [v3 searchSystemProtocol];
  char v23 = static NSObject.== infix(_:_:)();

  if (v23) {
    goto LABEL_15;
  }
  id v24 = v4;
  id v25 = [v3 closeEntityProtocol];
  char v26 = static NSObject.== infix(_:_:)();

  if (v26)
  {

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LNSuggestedActionDialogParameterKey>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_493C0;
    uint64_t v28 = (void *)LNSuggestedActionDialogParameterKeyEntityType;
    uint64_t v29 = (void *)LNSuggestedActionDialogParameterKeyEntityName;
    *(void *)(inited + 32) = LNSuggestedActionDialogParameterKeyEntityType;
    *(void *)(inited + 40) = v29;
    uint64_t v30 = *(void *)(a1 + 40);
    uint64_t v53 = v30;
    uint64_t v31 = *(void *)(v30 + 16);
    id v32 = v28;
    id v33 = v29;
    swift_bridgeObjectRetain();
    if (v31)
    {
      id v34 = v32;
      outlined retain of [LNSuggestedActionDialogParameterKey : String]((uint64_t)&v53);
      specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v34);
      char v36 = v35;
      outlined release of [LNSuggestedActionDialogParameterKey : String]((uint64_t)&v53);

      if (v36)
      {
        swift_bridgeObjectRelease();
        char v21 = 1;
LABEL_22:
        swift_setDeallocating();
        specialized _ContiguousArrayStorage.__deallocating_deinit();
        return v21 & 1;
      }
      if (*(void *)(v30 + 16))
      {
        unint64_t v42 = *(void **)(inited + 40);
        outlined retain of [LNSuggestedActionDialogParameterKey : String]((uint64_t)&v53);
        id v43 = v42;
        specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v43);
        char v21 = v44;
        outlined release of [LNSuggestedActionDialogParameterKey : String]((uint64_t)&v53);
        swift_bridgeObjectRelease();

        goto LABEL_22;
      }
    }
    swift_bridgeObjectRelease();
    char v21 = 0;
    goto LABEL_22;
  }
  id v4 = v24;
  id v37 = [v3 navigateSequentiallyProtocol];
  char v38 = static NSObject.== infix(_:_:)();

  if (v38)
  {
LABEL_15:

    char v21 = 1;
    return v21 & 1;
  }
  id v40 = [v3 changeBinarySettingSystemProtocol];
  char v41 = static NSObject.== infix(_:_:)();

  if ((v41 & 1) == 0)
  {
    if (one-time initialization token for linkSuggestions != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    __swift_project_value_buffer(v45, (uint64_t)static Logger.linkSuggestions);
    outlined retain of LinkSuggestedAction(a1);
    outlined retain of LinkSuggestedAction(a1);
    os_log_type_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      *(_DWORD *)uint64_t v48 = 136315138;
      id v49 = [v4 identifier];
      uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v52 = v51;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v52, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of LinkSuggestedAction(a1);
      outlined release of LinkSuggestedAction(a1);
      _os_log_impl(&dword_0, v46, v47, "Unknown system protocol in validDialogParameters: %s", v48, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      outlined release of LinkSuggestedAction(a1);
      outlined release of LinkSuggestedAction(a1);
    }

    goto LABEL_13;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LNSuggestedActionDialogParameterKey>);
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = v12;
  *(_OWORD *)(v12 + 16) = xmmword_47FC0;
  uint64_t v14 = (void **)&LNSuggestedActionDialogParameterKeyEntityName;
LABEL_5:
  char v15 = *v14;
  *(void *)(v12 + 32) = v15;
  id v16 = v15;
  uint64_t v53 = *(void *)(a1 + 40);
  uint64_t v17 = *(void **)(v13 + 32);
  uint64_t v18 = *(void *)(v53 + 16);
  swift_bridgeObjectRetain();
  if (!v18)
  {
    swift_bridgeObjectRelease_n();
LABEL_13:
    char v21 = 0;
    return v21 & 1;
  }
  id v19 = v17;
  outlined retain of [LNSuggestedActionDialogParameterKey : String]((uint64_t)&v53);
  specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v19);
  char v21 = v20;
  outlined release of [LNSuggestedActionDialogParameterKey : String]((uint64_t)&v53);

  swift_bridgeObjectRelease_n();
  return v21 & 1;
}

uint64_t DefaultLinkDialogIdProvider.getDialogId(linkAction:dialogType:)@<X0>(long long *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v7 = DefaultLinkDialogIdProvider.dialogId(for:)((uint64_t)a1);
  if (v8)
  {
    unint64_t v9 = v7;
    uint64_t v10 = v8;
    char v11 = a2 & 1;
    uint64_t v12 = DefaultLinkDialogIdProvider.extractDialogParam(linkAction:)(a1);
    uint64_t v13 = v3 + OBJC_IVAR____TtC25SiriLinkSuggestionsPlugin27DefaultLinkDialogIdProvider_templateDir;
    uint64_t v14 = type metadata accessor for DialogDetails(0);
    uint64_t v15 = a3 + *(int *)(v14 + 28);
    type metadata accessor for URL();
    OUTLINED_FUNCTION_35();
    (*(void (**)(uint64_t, uint64_t))(v16 + 16))(v15, v13);
    *(void *)a3 = v9;
    *(void *)(a3 + 8) = v10;
    *(void *)(a3 + 16) = v12;
    *(unsigned char *)(a3 + 24) = v11;
    uint64_t v17 = a3;
    uint64_t v18 = 0;
    uint64_t v19 = v14;
  }
  else
  {
    uint64_t v19 = type metadata accessor for DialogDetails(0);
    uint64_t v17 = a3;
    uint64_t v18 = 1;
  }
  return __swift_storeEnumTagSinglePayload(v17, v18, 1, v19);
}

unint64_t DefaultLinkDialogIdProvider.dialogId(for:)(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = self;
  id v4 = v2;
  id v5 = [v3 openEntitySystemProtocol];
  type metadata accessor for LNSystemProtocol();
  char v6 = static NSObject.== infix(_:_:)();

  if (v6)
  {

    return 0xD000000000000010;
  }
  id v8 = v4;
  id v9 = [v3 cancelProtocol];
  char v10 = static NSObject.== infix(_:_:)();

  if (v10) {
    goto LABEL_7;
  }
  id v8 = v8;
  id v11 = [v3 createEntitySystemProtocol];
  char v12 = static NSObject.== infix(_:_:)();

  if ((v12 & 1) != 0
    || (id v8 = v8,
        id v13 = [v3 searchSystemProtocol],
        char v14 = static NSObject.== infix(_:_:)(),
        v8,
        v13,
        (v14 & 1) != 0))
  {
LABEL_7:
    unint64_t v7 = 0xD000000000000012;

    return v7;
  }
  id v15 = v8;
  id v16 = [v3 closeEntityProtocol];
  char v17 = static NSObject.== infix(_:_:)();

  if (v17)
  {

    return 0xD000000000000011;
  }
  id v19 = v15;
  id v20 = [v3 navigateSequentiallyProtocol];
  char v21 = static NSObject.== infix(_:_:)();

  if (v21)
  {

    uint64_t v22 = swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySo35LNSuggestedActionDialogParameterKeyaSSG_SS_SSts5NeverOTg506_sSo35defg38KeyaS3SIgggoo_AB3key_SS5valuetSS_SSts5i85OIegnrzr_TR042_s25SiriLinkSuggestionsPlugin0B15Suggestedb6V18rawc44ParmatersSDyS2SGvgq26_SStSo011LNSuggestedfH12d5L18_V5XEfU_Tf3nnnpf_nTf1cn_n(v22);
    uint64_t v24 = v23;
    swift_bridgeObjectRelease();
    id v25 = specialized Dictionary.init<A>(uniqueKeysWithValues:)(v24);
    uint64_t v26 = specialized Dictionary.subscript.getter(0x6F69746365726964, 0xE90000000000006ELL, (uint64_t)v25);
    uint64_t v28 = v27;
    swift_bridgeObjectRelease();
    unint64_t v29 = DefaultLinkDialogIdProvider.navigateSequentiallyDialogId(for:)(v26, v28);
LABEL_15:
    unint64_t v7 = v29;
    swift_bridgeObjectRelease();
    return v7;
  }
  id v30 = [v3 changeBinarySettingSystemProtocol];
  char v31 = static NSObject.== infix(_:_:)();

  if (v31)
  {
    uint64_t v32 = swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySo35LNSuggestedActionDialogParameterKeyaSSG_SS_SSts5NeverOTg506_sSo35defg38KeyaS3SIgggoo_AB3key_SS5valuetSS_SSts5i85OIegnrzr_TR042_s25SiriLinkSuggestionsPlugin0B15Suggestedb6V18rawc44ParmatersSDyS2SGvgq26_SStSo011LNSuggestedfH12d5L18_V5XEfU_Tf3nnnpf_nTf1cn_n(v32);
    uint64_t v34 = v33;
    swift_bridgeObjectRelease();
    char v35 = specialized Dictionary.init<A>(uniqueKeysWithValues:)(v34);
    uint64_t v36 = specialized Dictionary.subscript.getter(0x704F65676E616863, 0xEF6E6F6974617265, (uint64_t)v35);
    uint64_t v38 = v37;
    swift_bridgeObjectRelease();
    unint64_t v29 = DefaultLinkDialogIdProvider.changeBinarySettingDialogId(for:)(v36, v38);
    goto LABEL_15;
  }
  if (one-time initialization token for linkSuggestions != -1) {
    swift_once();
  }
  uint64_t v39 = type metadata accessor for Logger();
  __swift_project_value_buffer(v39, (uint64_t)static Logger.linkSuggestions);
  outlined retain of LinkSuggestedAction(a1);
  outlined retain of LinkSuggestedAction(a1);
  id v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v41))
  {
    unint64_t v42 = (uint8_t *)swift_slowAlloc();
    uint64_t v47 = swift_slowAlloc();
    *(_DWORD *)unint64_t v42 = 136315138;
    id v43 = [v19 identifier];
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v46 = v45;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined release of LinkSuggestedAction(a1);
    outlined release of LinkSuggestedAction(a1);
    _os_log_impl(&dword_0, v40, v41, "Unknown system protocol in dialogId: %s", v42, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    outlined release of LinkSuggestedAction(a1);
    outlined release of LinkSuggestedAction(a1);
  }

  return 0;
}

uint64_t DefaultLinkDialogIdProvider.extractDialogParam(linkAction:)(long long *a1)
{
  long long v18 = *a1;
  __int16 v19 = *((_WORD *)a1 + 8);
  long long v1 = v18;
  uint64_t v2 = (void *)static SAAppInfoFactory.createAppInfo(appIdentifier:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  uint64_t v4 = inited;
  *(_OWORD *)(inited + 16) = xmmword_488A0;
  *(void *)(inited + 32) = 0xD000000000000013;
  *(void *)(inited + 40) = 0x800000000004B230;
  *(_OWORD *)(inited + 48) = v1;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = 0x656D614E707061;
  *(void *)(inited + 88) = 0xE700000000000000;
  if (!v2)
  {
    unint64_t v7 = (uint64_t *)(inited + 96);
    *(void *)(inited + 120) = &type metadata for String;
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  outlined retain of LinkSuggestedActionsRequest((uint64_t)&v18);
  uint64_t v5 = outlined bridged method (ob) of @objc SAAppInfo.displayAppName.getter(v2);
  unint64_t v7 = (uint64_t *)(v4 + 96);
  *(void *)(v4 + 120) = &type metadata for String;
  if (!v6)
  {
LABEL_5:
    *unint64_t v7 = 0;
    unint64_t v6 = 0xE000000000000000;
    goto LABEL_6;
  }
  *unint64_t v7 = v5;
LABEL_6:
  *(void *)(v4 + 104) = v6;
  *(void *)(v4 + 128) = 0xD000000000000013;
  *(void *)(v4 + 136) = 0x800000000004B250;
  BOOL v8 = ((v19 | HIBYTE(v19)) & 1) == 0;
  *(void *)(v4 + 168) = &type metadata for Bool;
  *(unsigned char *)(v4 + 144) = v8;
  uint64_t v9 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v10 = swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySo35LNSuggestedActionDialogParameterKeyaSSG_SS_SSts5NeverOTg506_sSo35defg38KeyaS3SIgggoo_AB3key_SS5valuetSS_SSts5i85OIegnrzr_TR042_s25SiriLinkSuggestionsPlugin0B15Suggestedb6V18rawc44ParmatersSDyS2SGvgq26_SStSo011LNSuggestedfH12d5L18_V5XEfU_Tf3nnnpf_nTf1cn_n(v10);
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  id v13 = specialized Dictionary.init<A>(uniqueKeysWithValues:)(v12);
  specialized _dictionaryUpCast<A, B, C, D>(_:)((uint64_t)v13);
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = specialized Dictionary.merging(_:uniquingKeysWith:)(v15, v9);

  return v16;
}

uint64_t specialized Dictionary.merging(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = a2;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

unint64_t DefaultLinkDialogIdProvider.navigateSequentiallyDialogId(for:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0xD000000000000010;
  if (a2)
  {
    BOOL v5 = a1 == 1954047342 && a2 == 0xE400000000000000;
    if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return v4;
    }
    BOOL v6 = a1 == 0x73756F6976657270 && a2 == 0xE800000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 0xD000000000000014;
    }
  }
  if (one-time initialization token for linkSuggestions != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.linkSuggestions);
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    uint64_t v11 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v8, v9, "Unknown direction in navigateSequentiallyDialogId: %s", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_493C0;
  *(void *)(inited + 32) = 0xD000000000000010;
  *(void *)(inited + 40) = 0x800000000004B310;
  *(void *)(inited + 48) = 0xD000000000000014;
  *(void *)(inited + 56) = 0x800000000004B330;
  unint64_t v4 = specialized Collection.randomElement<A>(using:)(inited, inited);
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  return v4;
}

unint64_t DefaultLinkDialogIdProvider.changeBinarySettingDialogId(for:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0xD000000000000012;
  if (!a2) {
    goto LABEL_18;
  }
  BOOL v5 = a1 == 0x656C62616E65 && a2 == 0xE600000000000000;
  if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    BOOL v6 = a1 == 0x656C6261736964 && a2 == 0xE700000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 0xD000000000000013;
    }
    BOOL v7 = a1 == 0x656C67676F74 && a2 == 0xE600000000000000;
    if (!v7 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
LABEL_18:
      if (one-time initialization token for linkSuggestions != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)static Logger.linkSuggestions);
      swift_bridgeObjectRetain_n();
      os_log_type_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        uint64_t v16 = swift_slowAlloc();
        *(_DWORD *)uint64_t v11 = 136315138;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
        uint64_t v12 = String.init<A>(describing:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, v9, v10, "Unknown changeOperation in changeBinarySettingDialogId: %s", v11, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_488A0;
      *(void *)(inited + 32) = 0xD000000000000012;
      *(void *)(inited + 40) = 0x800000000004B350;
      *(void *)(inited + 48) = 0xD000000000000013;
      *(void *)(inited + 56) = 0x800000000004B370;
      *(void *)(inited + 64) = 0xD000000000000012;
      *(void *)(inited + 72) = 0x800000000004B390;
      unint64_t v4 = specialized Collection.randomElement<A>(using:)(inited, inited);
      swift_setDeallocating();
      specialized _ContiguousArrayStorage.__deallocating_deinit();
    }
  }
  return v4;
}

uint64_t DefaultLinkDialogIdProvider.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC25SiriLinkSuggestionsPlugin27DefaultLinkDialogIdProvider_templateDir;
  type metadata accessor for URL();
  OUTLINED_FUNCTION_35();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  return v0;
}

uint64_t DefaultLinkDialogIdProvider.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC25SiriLinkSuggestionsPlugin27DefaultLinkDialogIdProvider_templateDir;
  type metadata accessor for URL();
  OUTLINED_FUNCTION_35();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return _swift_deallocClassInstance(v0, v3, v4);
}

uint64_t protocol witness for LinkDialogIdProvider.getDialogId(linkAction:dialogType:) in conformance DefaultLinkDialogIdProvider@<X0>(long long *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  return DefaultLinkDialogIdProvider.getDialogId(linkAction:dialogType:)(a1, a2 & 1, a3);
}

uint64_t specialized _ContiguousArrayStorage.__deallocating_deinit()
{
  type metadata accessor for LNSuggestedActionDialogParameterKey(0);
  swift_arrayDestroy();
  return _swift_deallocClassInstance(v0, 32, 7);
}

{
  uint64_t v0;
  uint64_t vars8;

  swift_arrayDestroy();
  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for DialogDetails(uint64_t a1)
{
  return type metadata accessor for DialogDetails(a1, (uint64_t *)&type metadata singleton initialization cache for DialogDetails);
}

uint64_t base witness table accessor for CATDialogProvider in DialogDetails()
{
  return lazy protocol witness table accessor for type DialogDetails and conformance DialogDetails(&lazy protocol witness table cache variable for type DialogDetails and conformance DialogDetails);
}

uint64_t base witness table accessor for DialogProvider in DialogDetails()
{
  return lazy protocol witness table accessor for type DialogDetails and conformance DialogDetails(&lazy protocol witness table cache variable for type DialogDetails and conformance DialogDetails);
}

uint64_t lazy protocol witness table accessor for type DialogDetails and conformance DialogDetails(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for DialogDetails(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DialogType and conformance DialogType()
{
  unint64_t result = lazy protocol witness table cache variable for type DialogType and conformance DialogType;
  if (!lazy protocol witness table cache variable for type DialogType and conformance DialogType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DialogType and conformance DialogType);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for DialogDetails(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = a2[2];
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for URL();
    os_log_type_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for DialogDetails(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for DialogDetails(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for DialogDetails(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for DialogDetails(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for DialogDetails(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for DialogDetails(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_319A0);
}

uint64_t sub_319A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = a1 + *(int *)(a3 + 28);
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for DialogDetails(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_31A3C);
}

uint64_t sub_31A3C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = v5 + *(int *)(a4 + 28);
    return __swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for DialogDetails()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DialogType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x31C38);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DialogType()
{
  return &type metadata for DialogType;
}

uint64_t ObjC metadata update function for DefaultLinkDialogIdProvider()
{
  return type metadata accessor for DefaultLinkDialogIdProvider(0);
}

uint64_t type metadata accessor for DefaultLinkDialogIdProvider(uint64_t a1)
{
  return type metadata accessor for DialogDetails(a1, (uint64_t *)&type metadata singleton initialization cache for DefaultLinkDialogIdProvider);
}

uint64_t type metadata accessor for DialogDetails(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for DefaultLinkDialogIdProvider()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  specialized LazyMapSequence.makeIterator()(a1, a2, a3, &v29);
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()(&v27);
  uint64_t v7 = *((void *)&v27 + 1);
  if (!*((void *)&v27 + 1))
  {
LABEL_14:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [String : String].Iterator._Variant();
    return swift_release();
  }
  while (1)
  {
    uint64_t v8 = v27;
    outlined init with take of Any(&v28, v26);
    uint64_t v9 = *a5;
    unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
    uint64_t v12 = *(void *)(v9 + 16);
    BOOL v13 = (v10 & 1) == 0;
    uint64_t v14 = v12 + v13;
    if (__OFADD__(v12, v13)) {
      break;
    }
    char v15 = v10;
    if (*(void *)(v9 + 24) >= v14)
    {
      if (a4)
      {
        if (v10) {
          goto LABEL_9;
        }
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
        _NativeDictionary.copy()();
        if (v15) {
          goto LABEL_9;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a4 & 1);
      unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
      if ((v15 & 1) != (v17 & 1)) {
        goto LABEL_17;
      }
      unint64_t v11 = v16;
      if (v15)
      {
LABEL_9:
        outlined init with copy of Any((uint64_t)v26, (uint64_t)v25);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
        swift_bridgeObjectRelease();
        long long v18 = (_OWORD *)(*(void *)(*a5 + 56) + 32 * v11);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
        outlined init with take of Any(v25, v18);
        goto LABEL_13;
      }
    }
    __int16 v19 = (void *)*a5;
    *(void *)(*a5 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    id v20 = (uint64_t *)(v19[6] + 16 * v11);
    uint64_t *v20 = v8;
    v20[1] = v7;
    outlined init with take of Any(v26, (_OWORD *)(v19[7] + 32 * v11));
    uint64_t v21 = v19[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_16;
    }
    v19[2] = v23;
LABEL_13:
    specialized LazyMapSequence.Iterator.next()(&v27);
    uint64_t v7 = *((void *)&v27 + 1);
    a4 = 1;
    if (!*((void *)&v27 + 1)) {
      goto LABEL_14;
    }
  }
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)((uint64_t)(a2 + 2), *a1, a1[1], (uint64_t)(a1 + 2));
  *a2 = result;
  a2[1] = v4;
  return result;
}

unint64_t specialized Collection.randomElement<A>(using:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  unint64_t result = specialized RandomNumberGenerator.next<A>(upperBound:)(*(void *)(a2 + 16));
  if (result < v2)
  {
    uint64_t v5 = *(void *)(a2 + 16 * result + 32);
    swift_bridgeObjectRetain();
    return v5;
  }
  __break(1u);
  return result;
}

unint64_t specialized RandomNumberGenerator.next<A>(upperBound:)(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    swift_stdlib_random();
    unint64_t result = (0 * (unsigned __int128)v1) >> 64;
    if (-(uint64_t)v1 % v1)
    {
      while (1)
        swift_stdlib_random();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t outlined bridged method (ob) of @objc SAAppInfo.displayAppName.getter(void *a1)
{
  id v2 = [a1 displayAppName];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined retain of LinkSuggestedActionsRequest(uint64_t a1)
{
  return a1;
}

uint64_t specialized LazyMapSequence.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  *a4 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64) {
    uint64_t v8 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v8 = -1;
  }
  a4[3] = 0;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    unint64_t v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(void *)&long long v23 = v13;
    *((void *)&v23 + 1) = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    unint64_t v16 = *(void *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      uint64_t v9 = (v16 - 1) & v16;
      unint64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
      int64_t v7 = v14;
      goto LABEL_3;
    }
    int64_t v17 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        int64_t v14 = v17;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        unint64_t v16 = *(void *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          int64_t v14 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v17 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          unint64_t v16 = *(void *)(v4 + 8 * v17);
          if (v16) {
            goto LABEL_10;
          }
          int64_t v14 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            unint64_t v16 = *(void *)(v4 + 8 * v14);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v7 = v15 - 1;
            int64_t v18 = v5 + 6;
            while (v18 < v15)
            {
              unint64_t v16 = *(void *)(v4 + 8 * v18++);
              if (v16)
              {
                int64_t v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  memset(v24, 0, sizeof(v24));
  long long v23 = 0u;
LABEL_23:
  *unint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  __int16 v19 = (void (*)(_OWORD *))v1[5];
  uint64_t result = outlined init with take of (key: String, value: Any)?((uint64_t)&v23, (uint64_t)v22);
  if (*((void *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return outlined destroy of (key: String, value: Any)((uint64_t)v21);
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

uint64_t outlined init with take of (key: String, value: Any)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Any)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of (key: String, value: Any)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Any));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t type metadata accessor for LNSystemProtocol()
{
  unint64_t result = lazy cache variable for type metadata for LNSystemProtocol;
  if (!lazy cache variable for type metadata for LNSystemProtocol)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2_6()
{
  type metadata accessor for DialogDetails(0);
  return type metadata accessor for URL();
}

uint64_t OUTLINED_FUNCTION_3_4()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_5_4()
{
  return v0;
}

uint64_t AppIntentsDialogProvider.__allocating_init(linkClient:)(long long *a1)
{
  OUTLINED_FUNCTION_4_4();
  uint64_t v2 = swift_allocObject();
  outlined init with take of LinkDialogIdProvider(a1, v2 + 16);
  return v2;
}

uint64_t AppIntentDialogCallback.getText(dialogProperties:siriLocale:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  DialogProperties.appIntentAction.getter((uint64_t)v7);
  outlined init with take of SuggestionAppIntent?((uint64_t)v7, (uint64_t)v8);
  if (v9)
  {
    uint64_t v1 = v10;
    swift_bridgeObjectRetain();
    outlined release of SuggestionAppIntent?((uint64_t)v7);
  }
  else
  {
    if (one-time initialization token for appIntentsSuggestions != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.appIntentsSuggestions);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      int64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v5 = 0;
      _os_log_impl(&dword_0, v3, v4, "Unable to find appIntentAction parameter", v5, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  return v1;
}

uint64_t AppIntentDialogCallback.init(linkClient:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with take of LinkDialogIdProvider(a1, a2);
}

void *AppIntentsDialogProvider.appIntentDialogDetails.unsafeMutableAddressor()
{
  return &static AppIntentsDialogProvider.appIntentDialogDetails;
}

unint64_t static AppIntentsDialogProvider.appIntentDialogDetails.getter()
{
  return 0xD000000000000016;
}

uint64_t AppIntentsDialogProvider.getSpokenDialogCallback(context:)@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = (uint64_t)&type metadata for AppIntentDialogCallback;
  a1[4] = lazy protocol witness table accessor for type AppIntentDialogCallback and conformance AppIntentDialogCallback();
  uint64_t v3 = swift_allocObject();
  *a1 = v3;
  return outlined init with copy of AppIntentDialogCallback(v1 + 16, v3 + 16);
}

double AppIntentsDialogProvider.getDescriptionCallback(context:)@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t AppIntentsDialogProvider.deinit()
{
  outlined destroy of AppIntentDialogCallback(v0 + 16);
  return v0;
}

uint64_t AppIntentsDialogProvider.__deallocating_deinit()
{
  outlined destroy of AppIntentDialogCallback(v0 + 16);
  uint64_t v1 = OUTLINED_FUNCTION_4_4();
  return _swift_deallocClassInstance(v1, v2, v3);
}

uint64_t protocol witness for DialogCallbacksProvider.getSpokenDialogCallback(context:) in conformance AppIntentsDialogProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t protocol witness for DialogCallbacksProvider.getDisplayedDialogCallback(context:) in conformance AppIntentsDialogProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t protocol witness for DialogCallbacksProvider.getDescriptionCallback(context:) in conformance AppIntentsDialogProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t protocol witness for DialogCallbacksProvider.getPreambleOverrideCallback(context:deliveryVehicle:) in conformance AppIntentsDialogProvider()
{
  return DialogCallbacksProvider.getPreambleOverrideCallback(context:deliveryVehicle:)();
}

uint64_t AppIntentDialogCallback.getText(dialog:dialogProperties:environment:viewContext:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[3] = a3;
  v4[4] = v3;
  v4[2] = a2;
  uint64_t v5 = type metadata accessor for Locale();
  v4[5] = v5;
  v4[6] = *(void *)(v5 - 8);
  v4[7] = swift_task_alloc();
  return _swift_task_switch(AppIntentDialogCallback.getText(dialog:dialogProperties:environment:viewContext:), 0, 0);
}

uint64_t AppIntentDialogCallback.getText(dialog:dialogProperties:environment:viewContext:)()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 40);
  os_log_type_t v4 = *(void **)(v0 + 16);
  __swift_project_boxed_opaque_existential_1(*(void **)(v0 + 24), *(void *)(*(void *)(v0 + 24) + 24));
  dispatch thunk of EnvironmentSnapshot.siriLocale.getter();
  uint64_t v5 = AppIntentDialogCallback.getText(dialogProperties:siriLocale:)(v4);
  uint64_t v7 = v6;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v8(v5, v7);
}

uint64_t protocol witness for DialogCallback.getText(dialog:dialogProperties:environment:) in conformance AppIntentDialogCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *unint64_t v11 = v5;
  v11[1] = protocol witness for DialogCallback.getText(dialog:dialogProperties:environment:) in conformance AppIntentDialogCallback;
  return DialogCallback.getText(dialog:dialogProperties:environment:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for DialogCallback.getText(dialog:dialogProperties:environment:viewContext:) in conformance AppIntentDialogCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for DialogCallback.getText(dialog:dialogProperties:environment:viewContext:) in conformance AppIntentDialogCallback;
  return AppIntentDialogCallback.getText(dialog:dialogProperties:environment:viewContext:)((uint64_t)v6, a2, a3);
}

uint64_t protocol witness for DialogCallback.getText(dialog:dialogProperties:environment:viewContext:) in conformance AppIntentDialogCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *v3;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
  if (!v2)
  {
    uint64_t v6 = a1;
    uint64_t v7 = a2;
  }
  return v8(v6, v7);
}

void LNAction.getNonNilParameterSet()()
{
  v12[2] = (Swift::Int)&_swiftEmptySetSingleton;
  id v1 = [v0 parameters];
  type metadata accessor for LNActionParameterMetadata(0, &lazy cache variable for type metadata for LNProperty);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8));
    if (v3) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_14;
  }
LABEL_3:
  if (v3 < 1)
  {
    __break(1u);
  }
  else
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v5 = *(id *)(v2 + 8 * i + 32);
      }
      uint64_t v6 = v5;
      id v7 = [v5 value];

      if (v7)
      {
        id v8 = [v6 identifier];
        Swift::Int v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::Int v11 = v10;

        specialized Set._Variant.insert(_:)(v12, v9, v11);
        swift_bridgeObjectRelease();
      }
      else
      {
      }
    }
    swift_bridgeObjectRelease();
  }
}

uint64_t outlined release of SuggestionAppIntent?(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type AppIntentDialogCallback and conformance AppIntentDialogCallback()
{
  unint64_t result = lazy protocol witness table cache variable for type AppIntentDialogCallback and conformance AppIntentDialogCallback;
  if (!lazy protocol witness table cache variable for type AppIntentDialogCallback and conformance AppIntentDialogCallback)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppIntentDialogCallback and conformance AppIntentDialogCallback);
  }
  return result;
}

uint64_t sub_32EF8()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = OUTLINED_FUNCTION_4_4();
  return _swift_deallocObject(v1, v2, v3);
}

uint64_t outlined init with copy of AppIntentDialogCallback(uint64_t a1, uint64_t a2)
{
  return a2;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LNSystemProtocol>);
  uint64_t v2 = static _SetStorage.convert(_:capacity:)();
  uint64_t v14 = v2;
  __CocoaSet.makeIterator()();
  if (!__CocoaSet.Iterator.next()())
  {
LABEL_16:
    swift_release();
    return v2;
  }
  type metadata accessor for LNActionParameterMetadata(0, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
  while (1)
  {
    swift_dynamicCast();
    uint64_t v2 = v14;
    if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
    {
      specialized _NativeSet.resize(capacity:)();
      uint64_t v2 = v14;
    }
    Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
    uint64_t v4 = v2 + 56;
    uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v6 = result & ~v5;
    unint64_t v7 = v6 >> 6;
    if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) == 0) {
      break;
    }
    unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
LABEL_15:
    *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
    ++*(void *)(v2 + 16);
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_16;
    }
  }
  char v9 = 0;
  unint64_t v10 = (unint64_t)(63 - v5) >> 6;
  while (++v7 != v10 || (v9 & 1) == 0)
  {
    BOOL v11 = v7 == v10;
    if (v7 == v10) {
      unint64_t v7 = 0;
    }
    v9 |= v11;
    uint64_t v12 = *(void *)(v4 + 8 * v7);
    if (v12 != -1)
    {
      unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

void specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = (void *)*v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LinkSuggestedActionsRequest>);
  uint64_t v2 = static _SetStorage.resize(original:capacity:move:)();
  if (v1[2])
  {
    OUTLINED_FUNCTION_3_5();
    uint64_t v32 = v1 + 7;
    OUTLINED_FUNCTION_10_5();
    unint64_t v5 = v4 & v3;
    int64_t v31 = (unint64_t)(v6 + 63) >> 6;
    swift_retain();
    int64_t v7 = 0;
    uint64_t v8 = 24;
    if (!v5) {
      goto LABEL_4;
    }
LABEL_3:
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    for (unint64_t i = v9 | (v7 << 6); ; unint64_t i = v15 + (v7 << 6))
    {
      unint64_t v16 = v1;
      uint64_t v17 = v1[6] + i * v8;
      uint64_t v18 = *(void *)v17;
      uint64_t v19 = *(void *)(v17 + 8);
      char v20 = *(unsigned char *)(v17 + 16);
      char v21 = *(unsigned char *)(v17 + 17);
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._finalize()();
      OUTLINED_FUNCTION_1_5();
      if (v22)
      {
        OUTLINED_FUNCTION_10_1();
        while (++v25 != v26 || (v24 & 1) == 0)
        {
          BOOL v27 = v25 == v26;
          if (v25 == v26) {
            uint64_t v25 = 0;
          }
          v24 |= v27;
          if (*(void *)(v2 + 56 + 8 * v25) != -1)
          {
            OUTLINED_FUNCTION_9_1();
            goto LABEL_27;
          }
        }
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_11_1();
LABEL_27:
      OUTLINED_FUNCTION_0_4(v23);
      uint64_t v8 = 24;
      uint64_t v29 = *(void *)(v2 + 48) + 24 * v28;
      *(void *)uint64_t v29 = v18;
      *(void *)(v29 + 8) = v19;
      *(unsigned char *)(v29 + 16) = v20;
      *(unsigned char *)(v29 + 17) = v21;
      ++*(void *)(v2 + 16);
      uint64_t v1 = v16;
      if (v5) {
        goto LABEL_3;
      }
LABEL_4:
      int64_t v11 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        goto LABEL_35;
      }
      if (v11 >= v31) {
        goto LABEL_29;
      }
      ++v7;
      if (!v32[v11])
      {
        int64_t v7 = v11 + 1;
        if (v11 + 1 >= v31) {
          goto LABEL_29;
        }
        if (!v32[v7])
        {
          int64_t v7 = v11 + 2;
          if (v11 + 2 >= v31) {
            goto LABEL_29;
          }
          if (!v32[v7])
          {
            int64_t v12 = v11 + 3;
            if (v12 >= v31)
            {
LABEL_29:
              swift_release();
              OUTLINED_FUNCTION_3_5();
              if (v30 > 63) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v30 + 63) >> 6, v32);
              }
              else {
                *uint64_t v32 = -1 << v30;
              }
              v1[2] = 0;
              break;
            }
            if (!v32[v12])
            {
              while (1)
              {
                int64_t v7 = v12 + 1;
                if (__OFADD__(v12, 1)) {
                  goto LABEL_36;
                }
                if (v7 >= v31) {
                  goto LABEL_29;
                }
                ++v12;
                if (v32[v7]) {
                  goto LABEL_17;
                }
              }
            }
            int64_t v7 = v12;
          }
        }
      }
LABEL_17:
      OUTLINED_FUNCTION_2_7();
      unint64_t v5 = v14 & v13;
    }
  }
  swift_release();
  *uint64_t v0 = v2;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
    {
      uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          BOOL v26 = v22 == v25;
          if (v22 == v25) {
            unint64_t v22 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v9 + 8 * v22);
          if (v27 != -1)
          {
            unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      uint64_t v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
      *uint64_t v28 = v18;
      v28[1] = v19;
      ++*(void *)(v4 + 16);
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v14 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_38;
      }
      if (v14 >= v8) {
        goto LABEL_32;
      }
      unint64_t v15 = v30[v14];
      ++v11;
      if (!v15)
      {
        int64_t v11 = v14 + 1;
        if (v14 + 1 >= v8) {
          goto LABEL_32;
        }
        unint64_t v15 = v30[v11];
        if (!v15)
        {
          int64_t v11 = v14 + 2;
          if (v14 + 2 >= v8) {
            goto LABEL_32;
          }
          unint64_t v15 = v30[v11];
          if (!v15)
          {
            int64_t v16 = v14 + 3;
            if (v16 >= v8)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v0;
              uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
              if (v29 > 63) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v29 + 63) >> 6, v30);
              }
              else {
                *uint64_t v30 = -1 << v29;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                int64_t v11 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_39;
                }
                if (v11 >= v8) {
                  goto LABEL_32;
                }
                unint64_t v15 = v30[v11];
                ++v16;
                if (v15) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v11 = v16;
          }
        }
      }
LABEL_20:
      unint64_t v7 = (v15 - 1) & v15;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LNSystemProtocol>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v28 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      unint64_t v7 = ~(-1 << v5);
    }
    else {
      unint64_t v7 = -1;
    }
    int64_t v8 = v7 & *(void *)(v2 + 56);
    uint64_t v9 = (unint64_t)(v5 + 63) >> 6;
    unint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    unint64_t v12 = 0;
    if (!v8) {
      goto LABEL_7;
    }
LABEL_6:
    uint64_t v13 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
    {
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * i);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      uint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6))) == 0)
      {
        unint64_t v23 = 0;
        char v24 = (unint64_t)(63 - v19) >> 6;
        while (++v21 != v24 || (v23 & 1) == 0)
        {
          unint64_t v25 = v21 == v24;
          if (v21 == v24) {
            unint64_t v21 = 0;
          }
          v23 |= v25;
          BOOL v26 = *(void *)(v10 + 8 * v21);
          if (v26 != -1)
          {
            unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v10 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      *(void *)(*(void *)(v4 + 48) + 8 * v22) = v18;
      ++*(void *)(v4 + 16);
      if (v8) {
        goto LABEL_6;
      }
LABEL_7:
      unint64_t v15 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        goto LABEL_38;
      }
      if (v15 >= v9) {
        goto LABEL_32;
      }
      int64_t v16 = v6[v15];
      ++v12;
      if (!v16)
      {
        unint64_t v12 = v15 + 1;
        if (v15 + 1 >= v9) {
          goto LABEL_32;
        }
        int64_t v16 = v6[v12];
        if (!v16)
        {
          unint64_t v12 = v15 + 2;
          if (v15 + 2 >= v9) {
            goto LABEL_32;
          }
          int64_t v16 = v6[v12];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= v9)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v28;
              uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
              if (v27 > 63) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v27 + 63) >> 6, (void *)(v2 + 56));
              }
              else {
                *uint64_t v6 = -1 << v27;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            int64_t v16 = v6[v17];
            if (!v16)
            {
              while (1)
              {
                unint64_t v12 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_39;
                }
                if (v12 >= v9) {
                  goto LABEL_32;
                }
                int64_t v16 = v6[v12];
                ++v17;
                if (v16) {
                  goto LABEL_20;
                }
              }
            }
            unint64_t v12 = v17;
          }
        }
      }
LABEL_20:
      int64_t v8 = (v16 - 1) & v16;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

void specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LinkSuggestedActionsRequest>);
  uint64_t v2 = (void *)*v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  if (!v2[2])
  {
LABEL_28:
    swift_release();
    *uint64_t v1 = v3;
    return;
  }
  OUTLINED_FUNCTION_3_5();
  uint64_t v5 = v2 + 7;
  unint64_t v7 = (unint64_t)(v6 + 63) >> 6;
  if ((void *)v3 != v2 || v4 >= &v2[v7 + 7]) {
    memmove(v4, v2 + 7, 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v3 + 16) = v2[2];
  OUTLINED_FUNCTION_3_5();
  uint64_t v11 = v2[7];
  uint64_t v12 = -1;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = v21 + (v9 << 6))
  {
    uint64_t v22 = 3 * i;
    uint64_t v23 = v2[6] + 8 * v22;
    uint64_t v25 = *(void *)v23;
    uint64_t v24 = *(void *)(v23 + 8);
    char v26 = *(unsigned char *)(v23 + 16);
    LOBYTE(v23) = *(unsigned char *)(v23 + 17);
    uint64_t v27 = *(void *)(v3 + 48) + 8 * v22;
    *(void *)uint64_t v27 = v25;
    *(void *)(v27 + 8) = v24;
    *(unsigned char *)(v27 + 16) = v26;
    *(unsigned char *)(v27 + 17) = v23;
    swift_bridgeObjectRetain();
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    ++v9;
    if (!v5[v17])
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      if (!v5[v9])
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        if (!v5[v9]) {
          break;
        }
      }
    }
LABEL_25:
    OUTLINED_FUNCTION_2_7();
    unint64_t v13 = v20 & v19;
  }
  int64_t v18 = v17 + 3;
  if (v18 >= v14) {
    goto LABEL_28;
  }
  if (v5[v18])
  {
    int64_t v9 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    ++v18;
    if (v5[v9]) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
}

void *specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = (void *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + 16 * i);
    *uint64_t v22 = *v20;
    v22[1] = v21;
    unint64_t result = (void *)swift_bridgeObjectRetain();
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v13 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LNSystemProtocol>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    *(void *)(*(void *)(v4 + 48) + 8 * i) = v20;
    id result = v20;
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v13 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LinkSuggestedActionsRequest>);
  uint64_t v2 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(void *)(v1 + 16))
  {
    swift_release();
LABEL_31:
    *uint64_t v0 = v2;
    return;
  }
  OUTLINED_FUNCTION_3_5();
  uint64_t v29 = v1 + 56;
  OUTLINED_FUNCTION_10_5();
  unint64_t v5 = v4 & v3;
  int64_t v30 = (unint64_t)(v6 + 63) >> 6;
  swift_retain();
  int64_t v7 = 0;
  uint64_t v8 = 24;
  if (!v5) {
    goto LABEL_4;
  }
LABEL_3:
  unint64_t v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v9 | (v7 << 6); ; unint64_t i = v15 + (v7 << 6))
  {
    uint64_t v16 = *(void *)(v1 + 48) + i * v8;
    uint64_t v17 = *(void *)v16;
    uint64_t v18 = *(void *)(v16 + 8);
    char v19 = *(unsigned char *)(v16 + 16);
    char v20 = *(unsigned char *)(v16 + 17);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain_n();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Hasher._finalize()();
    OUTLINED_FUNCTION_1_5();
    if (v21)
    {
      OUTLINED_FUNCTION_10_1();
      while (++v24 != v25 || (v23 & 1) == 0)
      {
        BOOL v26 = v24 == v25;
        if (v24 == v25) {
          uint64_t v24 = 0;
        }
        v23 |= v26;
        if (*(void *)(v2 + 56 + 8 * v24) != -1)
        {
          OUTLINED_FUNCTION_9_1();
          goto LABEL_27;
        }
      }
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    OUTLINED_FUNCTION_11_1();
LABEL_27:
    OUTLINED_FUNCTION_0_4(v22);
    uint64_t v8 = 24;
    uint64_t v28 = *(void *)(v2 + 48) + 24 * v27;
    *(void *)uint64_t v28 = v17;
    *(void *)(v28 + 8) = v18;
    *(unsigned char *)(v28 + 16) = v19;
    *(unsigned char *)(v28 + 17) = v20;
    ++*(void *)(v2 + 16);
    if (v5) {
      goto LABEL_3;
    }
LABEL_4:
    int64_t v11 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      goto LABEL_33;
    }
    if (v11 >= v30) {
      goto LABEL_29;
    }
    ++v7;
    if (!*(void *)(v29 + 8 * v11))
    {
      int64_t v7 = v11 + 1;
      if (v11 + 1 >= v30) {
        goto LABEL_29;
      }
      if (!*(void *)(v29 + 8 * v7))
      {
        int64_t v7 = v11 + 2;
        if (v11 + 2 >= v30) {
          goto LABEL_29;
        }
        if (!*(void *)(v29 + 8 * v7)) {
          break;
        }
      }
    }
LABEL_17:
    OUTLINED_FUNCTION_2_7();
    unint64_t v5 = v14 & v13;
  }
  int64_t v12 = v11 + 3;
  if (v12 >= v30)
  {
LABEL_29:
    swift_release_n();
    goto LABEL_31;
  }
  if (*(void *)(v29 + 8 * v12))
  {
    int64_t v7 = v12;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v7 >= v30) {
      goto LABEL_29;
    }
    ++v12;
    if (*(void *)(v29 + 8 * v7)) {
      goto LABEL_17;
    }
  }
LABEL_34:
  __break(1u);
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v9 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
    *uint64_t v28 = v18;
    v28[1] = v19;
    ++*(void *)(v4 + 16);
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v11);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::Int v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LNSystemProtocol>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v28 = v0;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  uint64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  unint64_t v12 = 0;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  uint64_t v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    uint64_t v18 = *(void *)(v4 + 40);
    uint64_t v19 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    uint64_t result = NSObject._rawHashValue(seed:)(v18);
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v10 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v10 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(void *)(*(void *)(v4 + 48) + 8 * v23) = v19;
    ++*(void *)(v4 + 16);
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    unint64_t v15 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_36;
    }
    if (v15 >= v9) {
      goto LABEL_32;
    }
    int64_t v16 = *(void *)(v6 + 8 * v15);
    ++v12;
    if (!v16)
    {
      unint64_t v12 = v15 + 1;
      if (v15 + 1 >= v9) {
        goto LABEL_32;
      }
      int64_t v16 = *(void *)(v6 + 8 * v12);
      if (!v16)
      {
        unint64_t v12 = v15 + 2;
        if (v15 + 2 >= v9) {
          goto LABEL_32;
        }
        int64_t v16 = *(void *)(v6 + 8 * v12);
        if (!v16) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v16 - 1) & v16;
  }
  uint64_t v17 = v15 + 3;
  if (v17 >= v9)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v28;
    goto LABEL_34;
  }
  int64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    unint64_t v12 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    unint64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_32;
    }
    int64_t v16 = *(void *)(v6 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  OUTLINED_FUNCTION_1_4();
  if (v11)
  {
    uint64_t v12 = *(void *)(v7 + 48);
    uint64_t v13 = (void *)(v12 + 16 * v10);
    BOOL v14 = *v13 == a2 && v13[1] == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v15 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      OUTLINED_FUNCTION_1_4();
      if ((v19 & 1) == 0) {
        break;
      }
      uint64_t v20 = (void *)(v12 + 16 * v10);
      BOOL v21 = *v20 == a2 && v20[1] == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  OUTLINED_FUNCTION_5_5();
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v23;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t type metadata accessor for AppIntentsDialogProvider()
{
  return self;
}

uint64_t initializeWithCopy for AppIntentDialogCallback(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for AppIntentDialogCallback(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AppIntentDialogCallback(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppIntentDialogCallback(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppIntentDialogCallback(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppIntentDialogCallback()
{
  return &type metadata for AppIntentDialogCallback;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, void *a2)
{
  long long v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for LNActionParameterMetadata(0, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v24 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    int64_t v30 = (void *)v24;
    if (*(void *)(v24 + 24) <= *(void *)(v24 + 16))
    {
      id v28 = v8;
      specialized _NativeSet.resize(capacity:)();
      unint64_t v25 = v30;
    }
    else
    {
      unint64_t v25 = (void *)v24;
      id v26 = v8;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v8, v25);
    *long long v3 = (uint64_t)v25;
  }
  else
  {
    Swift::Int v10 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v11 = NSObject._rawHashValue(seed:)(v10);
    uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v13 = v11 & ~v12;
    OUTLINED_FUNCTION_7_3();
    if (v14)
    {
      type metadata accessor for LNActionParameterMetadata(0, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v13);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        BOOL v21 = *(void **)(*(void *)(*v3 + 48) + 8 * v13);
        *a1 = (uint64_t)v21;
        id v22 = v21;
        return 0;
      }
      uint64_t v17 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v17;
        OUTLINED_FUNCTION_7_3();
        if ((v18 & 1) == 0) {
          break;
        }
        id v19 = *(id *)(*(void *)(v6 + 48) + 8 * v13);
        char v20 = static NSObject.== infix(_:_:)();

        if (v20) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    OUTLINED_FUNCTION_5_5();
    id v8 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v13, isUniquelyReferenced_nonNull_native);
    *long long v3 = v29;
  }
  swift_bridgeObjectRelease();
  *a1 = (uint64_t)v8;
  return 1;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    id v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        char v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  BOOL v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *BOOL v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for LNActionParameterMetadata(0, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
    id v11 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
    char v12 = static NSObject.== infix(_:_:)();

    if (v12)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
        char v15 = static NSObject.== infix(_:_:)();

        if (v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = a1;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
}

void OUTLINED_FUNCTION_0_4(unint64_t a1@<X8>)
{
  *(void *)(v1 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
}

uint64_t OUTLINED_FUNCTION_4_4()
{
  return v0;
}

void OUTLINED_FUNCTION_5_5()
{
  *uint64_t v0 = 0x8000000000000000;
}

void *specialized Sequence.compactMap<A>(_:)(unint64_t a1)
{
  unint64_t v2 = a1;
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v20 = v2 & 0xC000000000000001;
    BOOL v21 = _swiftEmptyArrayStorage;
    uint64_t v4 = 4;
    unint64_t v19 = v2;
    while (1)
    {
      if (v20)
      {
        uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v5 = *(void *)(v2 + 8 * v4);
        swift_retain();
      }
      uint64_t v6 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      uint64_t v7 = OnRequestAppIntents.getAppIntentsForSignal(_:)(v5);
      if (v1)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (void *)swift_release();
      }
      uint64_t v9 = v7;
      uint64_t v10 = v8;
      swift_release();
      if (v9)
      {
        id v11 = v21;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, (uint64_t)v21);
          id v11 = v16;
        }
        char v12 = v11;
        unint64_t v13 = v11[2];
        BOOL v21 = v12;
        unint64_t v14 = v12[3];
        if (v13 >= v14 >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v13 + 1, 1, (uint64_t)v21);
          BOOL v21 = v17;
        }
        v21[2] = v13 + 1;
        char v15 = &v21[2 * v13];
        v15[4] = v9;
        v15[5] = v10;
        unint64_t v2 = v19;
      }
      ++v4;
      if (v6 == v3)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return v21;
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
  swift_release();
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t OnRequestAppIntents.getAppIntentsForSignal(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CoreSignalTypes();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v35[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CoreSignalTypes?, CoreSignalTypes?));
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  uint64_t v9 = &v35[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CoreSignalTypes?);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  unint64_t v13 = &v35[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = &v35[-v15];
  __chkstk_darwin(v14);
  BOOL v18 = &v35[-v17];
  uint64_t v37 = a1;
  Signal.signalType.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SignalType);
  int v19 = swift_dynamicCast();
  __swift_storeEnumTagSinglePayload((uint64_t)v18, v19 ^ 1u, 1, v2);
  (*(void (**)(unsigned char *, void, uint64_t))(v3 + 104))(v16, enum case for CoreSignalTypes.app(_:), v2);
  __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v2);
  uint64_t v20 = (uint64_t)&v9[*(int *)(v7 + 56)];
  outlined init with copy of CoreSignalTypes?((uint64_t)v18, (uint64_t)v9);
  outlined init with copy of CoreSignalTypes?((uint64_t)v16, v20);
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v2) != 1)
  {
    outlined init with copy of CoreSignalTypes?((uint64_t)v9, (uint64_t)v13);
    if (__swift_getEnumTagSinglePayload(v20, 1, v2) != 1)
    {
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 32))(v5, v20, v2);
      _s18SiriSuggestionsKit6SignalCACSHAAWlTm_1(&lazy protocol witness table cache variable for type CoreSignalTypes and conformance CoreSignalTypes, 255, (void (*)(uint64_t))&type metadata accessor for CoreSignalTypes);
      int v36 = dispatch thunk of static Equatable.== infix(_:_:)();
      BOOL v21 = *(void (**)(unsigned char *, uint64_t))(v3 + 8);
      v21(v5, v2);
      outlined destroy of CoreSignalTypes?((uint64_t)v16, &demangling cache variable for type metadata for CoreSignalTypes?);
      v21(v13, v2);
      outlined destroy of CoreSignalTypes?((uint64_t)v9, &demangling cache variable for type metadata for CoreSignalTypes?);
      outlined destroy of CoreSignalTypes?((uint64_t)v18, &demangling cache variable for type metadata for CoreSignalTypes?);
      if (v36) {
        goto LABEL_8;
      }
      return 0;
    }
    outlined destroy of CoreSignalTypes?((uint64_t)v16, &demangling cache variable for type metadata for CoreSignalTypes?);
    (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v13, v2);
LABEL_6:
    outlined destroy of CoreSignalTypes?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for (CoreSignalTypes?, CoreSignalTypes?));
    outlined destroy of CoreSignalTypes?((uint64_t)v18, &demangling cache variable for type metadata for CoreSignalTypes?);
    return 0;
  }
  outlined destroy of CoreSignalTypes?((uint64_t)v16, &demangling cache variable for type metadata for CoreSignalTypes?);
  if (__swift_getEnumTagSinglePayload(v20, 1, v2) != 1) {
    goto LABEL_6;
  }
  outlined destroy of CoreSignalTypes?((uint64_t)v9, &demangling cache variable for type metadata for CoreSignalTypes?);
  outlined destroy of CoreSignalTypes?((uint64_t)v18, &demangling cache variable for type metadata for CoreSignalTypes?);
LABEL_8:
  uint64_t v22 = v37;
  uint64_t v23 = Signal.signalValue.getter();
  unint64_t v25 = v24;
  if (one-time initialization token for appIntentsSuggestions != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Logger.appIntentsSuggestions);
  swift_bridgeObjectRetain_n();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    v38[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 136315138;
    uint64_t v22 = v37;
    swift_bridgeObjectRetain();
    v38[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v27, v28, "Getting app specific AppIntent suggestions for %s", v29, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CandidateSuggestionConfigurator>);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_47FC0;
  uint64_t v31 = type metadata accessor for AppIntentCandidateSuggestionConfigurator();
  uint64_t v32 = (void *)swift_allocObject();
  v32[4] = 0xD000000000000013;
  v32[5] = 0x800000000004A5B0;
  _OWORD v32[2] = v23;
  v32[3] = v25;
  *(void *)(v30 + 56) = v31;
  *(void *)(v30 + 64) = _s18SiriSuggestionsKit6SignalCACSHAAWlTm_1(&lazy protocol witness table cache variable for type AppIntentCandidateSuggestionConfigurator and conformance AppIntentCandidateSuggestionConfigurator, v33, (void (*)(uint64_t))type metadata accessor for AppIntentCandidateSuggestionConfigurator);
  *(void *)(v30 + 32) = v32;
  swift_retain();
  return v22;
}

void *AppIntentCandidateSuggestionConfigurator.__allocating_init(appBundleId:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0xD000000000000013;
  result[5] = 0x800000000004A5B0;
  result[2] = a1;
  result[3] = a2;
  return result;
}

void *OnRequestAppIntents.getConfigurators(for:)(unint64_t a1)
{
  if (one-time initialization token for appIntentsSuggestions != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.appIntentsSuggestions);
  swift_bridgeObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    type metadata accessor for Signal();
    swift_bridgeObjectRetain();
    uint64_t v6 = Array.description.getter();
    unint64_t v8 = v7;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v3, v4, "Determining valid app intents for signals: %s", v5, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_10();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_retain();
  uint64_t v9 = specialized Sequence.compactMap<A>(_:)(a1);
  return specialized Dictionary.init<A>(uniqueKeysWithValues:)((uint64_t)v9);
}

void *protocol witness for ConfiguratorProvider.getConfigurators(for:) in conformance OnRequestAppIntents(unint64_t a1)
{
  return OnRequestAppIntents.getConfigurators(for:)(a1);
}

uint64_t AppIntentCandidateSuggestionConfigurator.suggestionId.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

void *AppIntentCandidateSuggestionConfigurator.init(appBundleId:)(uint64_t a1, uint64_t a2)
{
  v2[4] = 0xD000000000000013;
  v2[5] = 0x800000000004A5B0;
  v2[2] = a1;
  v2[3] = a2;
  return v2;
}

uint64_t AppIntentCandidateSuggestionConfigurator.updateContext(context:signal:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for Party();
  v2[4] = v3;
  OUTLINED_FUNCTION_0_1(v3);
  v2[5] = v4;
  v2[6] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for IntentType();
  v2[7] = v5;
  OUTLINED_FUNCTION_0_1(v5);
  v2[8] = v6;
  v2[9] = swift_task_alloc();
  return _swift_task_switch(AppIntentCandidateSuggestionConfigurator.updateContext(context:signal:), 0, 0);
}

uint64_t AppIntentCandidateSuggestionConfigurator.updateContext(context:signal:)()
{
  if (one-time initialization token for appIntentsSuggestions != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.appIntentsSuggestions);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "Updating app intent context", v4, 2u);
    OUTLINED_FUNCTION_10();
  }
  uint64_t v6 = v0[8];
  uint64_t v5 = v0[9];
  uint64_t v7 = v0[7];
  uint64_t v8 = v0[2];
  uint64_t v9 = v0[3];

  uint64_t v10 = *(void *)(v8 + 8);
  uint64_t ObjectType = swift_getObjectType();
  static AppIntentFilter.builder()();
  v0[10] = *(void *)(v9 + 16);
  v0[11] = *(void *)(v9 + 24);
  dispatch thunk of AppIntentFilter.Builder.withAppId(_:)();
  swift_release();
  dispatch thunk of AppIntentFilter.Builder.build()();
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for IntentType.appIntent(_:), v7);
  uint64_t v12 = (void *)swift_task_alloc();
  v0[12] = v12;
  *uint64_t v12 = v0;
  v12[1] = AppIntentCandidateSuggestionConfigurator.updateContext(context:signal:);
  uint64_t v13 = v0[9];
  return Context.setIntentType(_:)(v13, ObjectType, v10);
}

{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = v1[9];
  os_log_type_t v3 = v1[8];
  uint64_t v4 = v1[7];
  uint64_t v5 = *v0;
  OUTLINED_FUNCTION_12();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return _swift_task_switch(AppIntentCandidateSuggestionConfigurator.updateContext(context:signal:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = v0[6];
  uint64_t v2 = (void *)v0[2];
  v0[13] = *v2;
  v0[14] = v2[1];
  v0[15] = swift_getObjectType();
  default argument 1 of Context.setAppId(_:party:)(v1);
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(AppIntentCandidateSuggestionConfigurator.updateContext(context:signal:), v4, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  os_log_type_t v3 = v0[4];
  Context.setAppId(_:party:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t default argument 1 of Context.setAppId(_:party:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for Party.unknown(_:);
  uint64_t v3 = type metadata accessor for Party();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);
  return v4(a1, v2, v3);
}

uint64_t AppIntentCandidateSuggestionConfigurator.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AppIntentCandidateSuggestionConfigurator.__deallocating_deinit()
{
  AppIntentCandidateSuggestionConfigurator.deinit();
  return _swift_deallocClassInstance(v0, 48, 7);
}

uint64_t protocol witness for CandidateSuggestionConfigurator.suggestionId.getter in conformance AppIntentCandidateSuggestionConfigurator()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for CandidateSuggestionConfigurator.updateContext(context:signal:) in conformance AppIntentCandidateSuggestionConfigurator(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for CandidateSuggestionConfigurator.updateContext(context:signal:) in conformance AppIntentCandidateSuggestionConfigurator;
  return AppIntentCandidateSuggestionConfigurator.updateContext(context:signal:)(a1);
}

uint64_t protocol witness for CandidateSuggestionConfigurator.updateContext(context:signal:) in conformance AppIntentCandidateSuggestionConfigurator()
{
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_12();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t protocol witness for CandidateSuggestionConfigurator.isValid(signal:) in conformance AppIntentCandidateSuggestionConfigurator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for CandidateSuggestionConfigurator.isValid(signal:) in conformance AppIntentCandidateSuggestionConfigurator;
  return CandidateSuggestionConfigurator.isValid(signal:)(a1, a2, a3);
}

uint64_t protocol witness for CandidateSuggestionConfigurator.isValid(signal:) in conformance AppIntentCandidateSuggestionConfigurator(uint64_t a1)
{
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = *v1;
  OUTLINED_FUNCTION_12();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(a1);
}

uint64_t type metadata accessor for OnRequestAppIntents()
{
  return self;
}

uint64_t type metadata accessor for AppIntentCandidateSuggestionConfigurator()
{
  return self;
}

uint64_t _s18SiriSuggestionsKit6SignalCACSHAAWlTm_1(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t Logger.linkSuggestions.unsafeMutableAddressor()
{
  return Logger.linkSuggestions.unsafeMutableAddressor(&one-time initialization token for linkSuggestions, (uint64_t)static Logger.linkSuggestions);
}

void *Logger.siriLinkFlowSubsystem.unsafeMutableAddressor()
{
  return &static Logger.siriLinkFlowSubsystem;
}

void *Logger.appIntentsSuggestionsCategory.unsafeMutableAddressor()
{
  return &static Logger.appIntentsSuggestionsCategory;
}

uint64_t Logger.appIntentsSuggestions.unsafeMutableAddressor()
{
  return Logger.linkSuggestions.unsafeMutableAddressor(&one-time initialization token for appIntentsSuggestions, (uint64_t)static Logger.appIntentsSuggestions);
}

unint64_t static Logger.siriLinkFlowSubsystem.getter()
{
  return OUTLINED_FUNCTION_1(27);
}

void *Logger.linkSuggestionsCategory.unsafeMutableAddressor()
{
  return &static Logger.linkSuggestionsCategory;
}

unint64_t static Logger.linkSuggestionsCategory.getter()
{
  return OUTLINED_FUNCTION_1(19);
}

void *Logger.autoshortcutsSuggestionsCategory.unsafeMutableAddressor()
{
  return &static Logger.autoshortcutsSuggestionsCategory;
}

unint64_t static Logger.autoshortcutsSuggestionsCategory.getter()
{
  return OUTLINED_FUNCTION_1(28);
}

unint64_t static Logger.appIntentsSuggestionsCategory.getter()
{
  return OUTLINED_FUNCTION_1(25);
}

uint64_t one-time initialization function for linkSuggestions(uint64_t a1)
{
  return OUTLINED_FUNCTION_0_5(a1, static Logger.linkSuggestions);
}

uint64_t static Logger.linkSuggestions.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.linkSuggestions.getter(&one-time initialization token for linkSuggestions, (uint64_t)static Logger.linkSuggestions, a1);
}

uint64_t one-time initialization function for autoshortcutsSuggestions(uint64_t a1)
{
  return OUTLINED_FUNCTION_0_5(a1, static Logger.autoshortcutsSuggestions);
}

uint64_t Logger.autoshortcutsSuggestions.unsafeMutableAddressor()
{
  return Logger.linkSuggestions.unsafeMutableAddressor(&one-time initialization token for autoshortcutsSuggestions, (uint64_t)static Logger.autoshortcutsSuggestions);
}

uint64_t Logger.linkSuggestions.unsafeMutableAddressor(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t static Logger.autoshortcutsSuggestions.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.linkSuggestions.getter(&one-time initialization token for autoshortcutsSuggestions, (uint64_t)static Logger.autoshortcutsSuggestions, a1);
}

uint64_t one-time initialization function for appIntentsSuggestions(uint64_t a1)
{
  return OUTLINED_FUNCTION_0_5(a1, static Logger.appIntentsSuggestions);
}

uint64_t one-time initialization function for linkSuggestions(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t static Logger.appIntentsSuggestions.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.linkSuggestions.getter(&one-time initialization token for appIntentsSuggestions, (uint64_t)static Logger.appIntentsSuggestions, a1);
}

uint64_t static Logger.linkSuggestions.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

ValueMetadata *type metadata accessor for Logger()
{
  return &type metadata for Logger;
}

uint64_t OUTLINED_FUNCTION_0_5(uint64_t a1, uint64_t *a2)
{
  return one-time initialization function for linkSuggestions(a1, a2);
}

uint64_t ActionParameter.init(displayRepresentable:metaData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = outlined init with take of SiriSuggestions.DisplayRepresentable?(a1, a3);
  *(void *)(a3 + 40) = a2;
  return result;
}

uint64_t outlined init with take of SiriSuggestions.DisplayRepresentable?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t SuggestionAppIntent.init(appIntentAction:details:dialog:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  return result;
}

uint64_t SuggestionAppIntent.appIntentAction.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SuggestionAppIntent.details.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void **)(v0 + 40);
  swift_bridgeObjectRetain();
  id v3 = v2;
  return v1;
}

uint64_t SuggestionAppIntent.dialog.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t static AppIntentDetails.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v5 = a1 == a4 && a2 == a5;
  if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  type metadata accessor for NSObject();
  return static NSObject.== infix(_:_:)() & 1;
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

void AppIntentDetails.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  id v5 = a4;
  NSObject.hash(into:)();
}

Swift::Int AppIntentDetails.hashValue.getter(uint64_t a1, uint64_t a2, void *a3)
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  id v4 = a3;
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AppIntentDetails(uint64_t *a1, uint64_t *a2)
{
  return static AppIntentDetails.__derived_struct_equals(_:_:)(*a1, a1[1], a1[2], *a2, a2[1]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AppIntentDetails()
{
  return AppIntentDetails.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(void **)(v0 + 16));
}

void protocol witness for Hashable.hash(into:) in conformance AppIntentDetails(uint64_t a1)
{
  AppIntentDetails.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(void **)(v1 + 16));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AppIntentDetails()
{
  uint64_t v1 = *(void **)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  id v2 = v1;
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t ActionParameter.displayRepresentable.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SiriSuggestions.DisplayRepresentable?(v1, a1);
}

id ActionParameter.metaData.getter()
{
  return *(id *)(v0 + 40);
}

unint64_t lazy protocol witness table accessor for type AppIntentDetails and conformance AppIntentDetails()
{
  unint64_t result = lazy protocol witness table cache variable for type AppIntentDetails and conformance AppIntentDetails;
  if (!lazy protocol witness table cache variable for type AppIntentDetails and conformance AppIntentDetails)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppIntentDetails and conformance AppIntentDetails);
  }
  return result;
}

uint64_t destroy for SuggestionAppIntent(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for SuggestionAppIntent(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  id v5 = (void *)a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v7 = v5;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SuggestionAppIntent(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[5];
  id v5 = (void *)a1[5];
  a1[5] = v4;
  id v6 = v4;

  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SuggestionAppIntent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  long long v4 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);

  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SuggestionAppIntent(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SuggestionAppIntent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for SuggestionAppIntent()
{
}

void destroy for AppIntentDetails(uint64_t a1)
{
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void **)(a1 + 16);
}

uint64_t initializeBufferWithCopyOfBuffer for AppIntentDetails(void *a1, void *a2)
{
  OUTLINED_FUNCTION_1_6(a1, a2);
  id v4 = v3;
  return v2;
}

void *assignWithCopy for AppIntentDetails(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v4 = (void *)a2[2];
  uint64_t v5 = (void *)a1[2];
  a1[2] = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for AppIntentDetails(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  id v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

void type metadata accessor for AppIntentDetails()
{
}

uint64_t initializeBufferWithCopyOfBuffer for AppIntentAction(void *a1, void *a2)
{
  OUTLINED_FUNCTION_1_6(a1, a2);
  swift_bridgeObjectRetain();
  return v2;
}

void type metadata accessor for AppIntentAction()
{
}

void destroy for ActionParameter(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  uint64_t v2 = *(void **)(a1 + 40);
}

uint64_t initializeWithCopy for ActionParameter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  id v7 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v7;
  id v8 = v7;
  return a1;
}

uint64_t assignWithCopy for ActionParameter(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  if (!*(void *)(a1 + 24))
  {
    if (v4)
    {
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
      goto LABEL_8;
    }
LABEL_7:
    long long v5 = *a2;
    long long v6 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
LABEL_8:
  id v7 = (void *)*((void *)a2 + 5);
  id v8 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for ActionParameter(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  long long v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;

  return a1;
}

uint64_t getEnumTagSinglePayload for ActionParameter(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 40);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ActionParameter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for ActionParameter()
{
}

uint64_t OUTLINED_FUNCTION_1_6(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  return swift_bridgeObjectRetain();
}

uint64_t LinkLoggingActionKeyMapper.map(suggestion:resolvedParams:)(uint64_t a1, uint64_t a2)
{
  specialized Dictionary.subscript.getter(0xD00000000000001FLL, 0x800000000004AC40, a2, &v10);
  if (!v11)
  {
    outlined destroy of Any?((uint64_t)&v10);
    goto LABEL_7;
  }
  if (!swift_dynamicCast())
  {
LABEL_7:
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v8 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    goto LABEL_8;
  }
  uint64_t v2 = v12;
  uint64_t v3 = v13;
  uint64_t v4 = v15;
  uint64_t v5 = v16;
  uint64_t v6 = v17;
  uint64_t v7 = 256;
  if (!BYTE1(v14)) {
    uint64_t v7 = 0;
  }
  uint64_t v8 = v7 | v14;
LABEL_8:
  uint64_t v12 = v2;
  uint64_t v13 = v3;
  uint64_t v14 = v8;
  uint64_t v15 = v4;
  uint64_t v16 = v5;
  uint64_t v17 = v6;
  LinkLoggingActionKeyMapper.mappedParamaters(for:)(&v12);
  Action.init(actionId:params:)();
  return outlined consume of LinkSuggestedAction?(v2, v3, v8, v4, v5);
}

uint64_t LinkLoggingActionKeyMapper.mappedParamaters(for:)(void *a1)
{
  outlined init with take of LinkSuggestedAction?((uint64_t)a1, (uint64_t)&v10);
  if (!*((void *)&v10 + 1)) {
    return Dictionary.init(dictionaryLiteral:)();
  }
  long long v13 = v10;
  uint64_t v2 = v12;
  uint64_t v14 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_493C0;
  *(void *)(inited + 32) = 0xD000000000000010;
  *(void *)(inited + 40) = 0x800000000004ACF0;
  __int16 v16 = v14;
  long long v15 = v13;
  *(_OWORD *)(inited + 48) = v13;
  *(void *)(inited + 64) = 0xD000000000000010;
  *(void *)(inited + 72) = 0x800000000004B580;
  outlined retain of LinkSuggestedAction?(a1, (void (*)(void, void, void, void, void, void))outlined copy of LinkSuggestedAction?);
  outlined retain of LinkSuggestedActionsRequest((uint64_t)&v15);
  id v4 = [v2 identifier];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  *(void *)(inited + 80) = v5;
  *(void *)(inited + 88) = v7;
  uint64_t v8 = Dictionary.init(dictionaryLiteral:)();
  outlined retain of LinkSuggestedAction?(a1, (void (*)(void, void, void, void, void, void))outlined consume of LinkSuggestedAction?);
  return v8;
}

uint64_t outlined consume of LinkSuggestedAction?(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  if (a2)
  {
    swift_bridgeObjectRelease();

    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t protocol witness for ActionKeyMapper.map(suggestion:resolvedParams:associatedAppId:) in conformance LinkLoggingActionKeyMapper()
{
  return ActionKeyMapper.map(suggestion:resolvedParams:associatedAppId:)();
}

uint64_t protocol witness for ActionKeyMapper.map(suggestion:resolvedParams:) in conformance LinkLoggingActionKeyMapper(uint64_t a1, uint64_t a2)
{
  return LinkLoggingActionKeyMapper.map(suggestion:resolvedParams:)(a1, a2);
}

uint64_t type metadata accessor for LinkLoggingActionKeyMapper()
{
  return self;
}

uint64_t outlined init with take of LinkSuggestedAction?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LinkSuggestedAction?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of LinkSuggestedAction?(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    id v7 = a4;
    id v8 = a5;
    return swift_bridgeObjectRetain();
  }
  return result;
}

void *outlined retain of LinkSuggestedAction?(void *a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

uint64_t LinkViewProvider.__allocating_init(dialogIdProvider:)(long long *a1)
{
  uint64_t v2 = swift_allocObject();
  type metadata accessor for LinkInvocationActionProvider();
  *(void *)(v2 + 56) = swift_allocObject();
  outlined init with take of LinkDialogIdProvider(a1, v2 + 16);
  return v2;
}

uint64_t LinkViewProvider.init(dialogIdProvider:)(long long *a1)
{
  type metadata accessor for LinkInvocationActionProvider();
  *(void *)(v1 + 56) = swift_allocObject();
  outlined init with take of LinkDialogIdProvider(a1, v1 + 16);
  return v1;
}

uint64_t LinkViewProvider.getInvocationActionProvider(context:)@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 56);
  a1[3] = type metadata accessor for LinkInvocationActionProvider();
  a1[4] = lazy protocol witness table accessor for type LinkInvocationActionProvider and conformance LinkInvocationActionProvider(&lazy protocol witness table cache variable for type LinkInvocationActionProvider and conformance LinkInvocationActionProvider, 255, (void (*)(uint64_t))type metadata accessor for LinkInvocationActionProvider);
  *a1 = v3;
  return swift_retain();
}

uint64_t CATLinkDialogCallback.__allocating_init(dialogIdProvider:dialogType:)(long long *a1, char a2)
{
  char v3 = a2 & 1;
  uint64_t v4 = swift_allocObject();
  outlined init with take of LinkDialogIdProvider(a1, v4 + 16);
  *(unsigned char *)(v4 + 56) = v3;
  return v4;
}

uint64_t type metadata accessor for CATLinkDialogCallback()
{
  return self;
}

uint64_t LinkViewProvider.getSpokenDialogCallback(context:)@<X0>(uint64_t *a1@<X8>)
{
  outlined init with copy of LinkClient(v1 + 16, (uint64_t)v7);
  uint64_t v3 = type metadata accessor for CATLinkDialogCallback();
  uint64_t v4 = swift_allocObject();
  outlined init with take of LinkDialogIdProvider(v7, v4 + 16);
  *(unsigned char *)(v4 + 56) = 0;
  a1[3] = v3;
  uint64_t result = lazy protocol witness table accessor for type LinkInvocationActionProvider and conformance LinkInvocationActionProvider(&lazy protocol witness table cache variable for type CATLinkDialogCallback and conformance CATLinkDialogCallback, v5, (void (*)(uint64_t))type metadata accessor for CATLinkDialogCallback);
  a1[4] = result;
  *a1 = v4;
  return result;
}

uint64_t LinkViewProvider.getDescriptionCallback(context:)@<X0>(uint64_t *a1@<X8>)
{
  outlined init with copy of LinkClient(v1 + 16, (uint64_t)v7);
  uint64_t v3 = type metadata accessor for CATLinkDialogCallback();
  uint64_t v4 = swift_allocObject();
  outlined init with take of LinkDialogIdProvider(v7, v4 + 16);
  *(unsigned char *)(v4 + 56) = 1;
  a1[3] = v3;
  uint64_t result = lazy protocol witness table accessor for type LinkInvocationActionProvider and conformance LinkInvocationActionProvider(&lazy protocol witness table cache variable for type CATLinkDialogCallback and conformance CATLinkDialogCallback, v5, (void (*)(uint64_t))type metadata accessor for CATLinkDialogCallback);
  a1[4] = result;
  *a1 = v4;
  return result;
}

uint64_t LinkViewProvider.getAssets(context:suggestion:)(uint64_t a1, void *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (uint64_t *)((char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t v6 = dispatch thunk of CandidateSuggestion.params.getter();
  specialized Dictionary.subscript.getter(0xD00000000000001FLL, 0x800000000004AC40, v6, &v23);
  swift_bridgeObjectRelease();
  if (!v24)
  {
    outlined destroy of SiriSuggestions.DisplayRepresentable?((uint64_t)&v23, &demangling cache variable for type metadata for Any?);
    goto LABEL_6;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_6:
    uint64_t v16 = type metadata accessor for Image();
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 1, 1, v16);
    return Assets.init(icon:)();
  }
  v25[0] = v22[0];
  v25[1] = v22[1];
  _OWORD v25[2] = v22[2];
  uint64_t v7 = LinkSuggestedAction.iconSystemImageName.getter();
  if (v8)
  {
    uint64_t v9 = v7;
    uint64_t v10 = v8;
    uint64_t v11 = (uint64_t)v5
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (name: String, tintColor: Color?))
                 + 48);
    *uint64_t v5 = v9;
    v5[1] = v10;
    uint64_t v12 = type metadata accessor for Color();
    __swift_storeEnumTagSinglePayload(v11, 1, 1, v12);
    uint64_t v13 = enum case for Image.symbol(_:);
    uint64_t v14 = type metadata accessor for Image();
    OUTLINED_FUNCTION_35();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 104))(v5, v13, v14);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v14);
  }
  else
  {
    uint64_t v18 = *((void *)&v25[0] + 1);
    *uint64_t v5 = *(void *)&v25[0];
    v5[1] = v18;
    uint64_t v19 = enum case for Image.appIcon(_:);
    uint64_t v20 = type metadata accessor for Image();
    OUTLINED_FUNCTION_35();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v21 + 104))(v5, v19, v20);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v20);
    swift_bridgeObjectRetain();
  }
  Assets.init(icon:)();
  return outlined release of LinkSuggestedAction((uint64_t)v25);
}

uint64_t LinkViewProvider.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  return v0;
}

uint64_t LinkViewProvider.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  return _swift_deallocClassInstance(v0, 64, 7);
}

uint64_t protocol witness for ViewProvider.getInvocationActionProvider(context:) in conformance LinkViewProvider@<X0>(void *a1@<X8>)
{
  return LinkViewProvider.getInvocationActionProvider(context:)(a1);
}

uint64_t protocol witness for DialogCallbacksProvider.getDisplayedDialogCallback(context:) in conformance LinkViewProvider()
{
  return LinkViewProvider.getDisplayedDialogCallback(context:)();
}

uint64_t protocol witness for DialogCallbacksProvider.getDescriptionCallback(context:) in conformance LinkViewProvider@<X0>(uint64_t *a1@<X8>)
{
  return LinkViewProvider.getDescriptionCallback(context:)(a1);
}

uint64_t protocol witness for AssetProvider.getAssets(context:suggestion:) in conformance LinkViewProvider(uint64_t a1, void *a2)
{
  return LinkViewProvider.getAssets(context:suggestion:)(a1, a2);
}

uint64_t CATLinkDialogCallback.init(dialogIdProvider:dialogType:)(long long *a1, char a2)
{
  char v3 = a2 & 1;
  outlined init with take of LinkDialogIdProvider(a1, v2 + 16);
  *(unsigned char *)(v2 + 56) = v3;
  return v2;
}

uint64_t CATLinkDialogCallback.getText(dialog:dialogProperties:environment:viewContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[43] = a4;
  v5[44] = v4;
  v5[41] = a2;
  v5[42] = a3;
  v5[40] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DialogDetails?);
  v5[45] = swift_task_alloc();
  v5[46] = type metadata accessor for DialogDetails(0);
  v5[47] = swift_task_alloc();
  return _swift_task_switch(CATLinkDialogCallback.getText(dialog:dialogProperties:environment:viewContext:), 0, 0);
}

uint64_t CATLinkDialogCallback.getText(dialog:dialogProperties:environment:viewContext:)()
{
  uint64_t v40 = v0;
  __swift_project_boxed_opaque_existential_1(*(void **)(v0 + 328), *(void *)(*(void *)(v0 + 328) + 24));
  uint64_t v1 = dispatch thunk of DialogProperties.getParameters()();
  specialized Dictionary.subscript.getter(0xD00000000000001FLL, 0x800000000004AC40, v1, (_OWORD *)(v0 + 272));
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 296))
  {
    outlined destroy of SiriSuggestions.DisplayRepresentable?(v0 + 272, &demangling cache variable for type metadata for Any?);
    goto LABEL_9;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    if (one-time initialization token for linkSuggestions != -1) {
      swift_once();
    }
    uint64_t v18 = *(void *)(v0 + 328);
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.linkSuggestions);
    outlined init with copy of LinkClient(v18, v0 + 112);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (_DWORD *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      *uint64_t v22 = 136315138;
      outlined init with copy of LinkClient(v0 + 112, v0 + 152);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DialogProperties);
      uint64_t v23 = String.init<A>(describing:)();
      *(void *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(v0 + 112);
      OUTLINED_FUNCTION_21(&dword_0, v25, v26, "CATLinkDialogCallback Link action retrieval failed: %s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_10();
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1(v0 + 112);
    }

    goto LABEL_15;
  }
  uint64_t v3 = *(void *)(v0 + 360);
  uint64_t v2 = *(void *)(v0 + 368);
  uint64_t v4 = *(void *)(v0 + 352);
  long long v5 = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 32) = v5;
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 96);
  uint64_t v6 = *(void *)(v4 + 40);
  uint64_t v7 = *(void *)(v4 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v4 + 16), v6);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 8))(v0 + 16, *(unsigned __int8 *)(v4 + 56), v6, v7);
  if (__swift_getEnumTagSinglePayload(v3, 1, v2) == 1)
  {
    outlined destroy of SiriSuggestions.DisplayRepresentable?(*(void *)(v0 + 360), &demangling cache variable for type metadata for DialogDetails?);
    if (one-time initialization token for linkSuggestions != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.linkSuggestions);
    outlined retain of LinkSuggestedAction(v0 + 16);
    outlined retain of LinkSuggestedAction(v0 + 16);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (_DWORD *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      *uint64_t v11 = 136315138;
      id v12 = [*(id *)(v0 + 40) identifier];
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v15 = v14;

      *(void *)(v0 + 304) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of LinkSuggestedAction(v0 + 16);
      outlined release of LinkSuggestedAction(v0 + 16);
      OUTLINED_FUNCTION_21(&dword_0, v16, v17, "CATLinkDialogCallback Dialog details retrieval failed: %s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_10();
    }
    else
    {
      outlined release of LinkSuggestedAction(v0 + 16);
      outlined release of LinkSuggestedAction(v0 + 16);
    }

    outlined release of LinkSuggestedAction(v0 + 16);
LABEL_15:
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v27 = *(uint64_t (**)(void, unint64_t))(v0 + 8);
    return v27(0, 0xE000000000000000);
  }
  uint64_t v30 = *(void *)(v0 + 368);
  uint64_t v29 = *(void *)(v0 + 376);
  uint64_t v31 = *(void **)(v0 + 320);
  outlined init with take of DialogDetails(*(void *)(v0 + 360), v29);
  uint64_t v32 = v31[3];
  uint64_t v33 = v31[4];
  __swift_project_boxed_opaque_existential_1(v31, v32);
  *(void *)(v0 + 256) = v30;
  *(void *)(v0 + 264) = lazy protocol witness table accessor for type LinkInvocationActionProvider and conformance LinkInvocationActionProvider(&lazy protocol witness table cache variable for type DialogDetails and conformance DialogDetails, 255, (void (*)(uint64_t))type metadata accessor for DialogDetails);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 232));
  outlined init with copy of DialogDetails(v29, (uint64_t)boxed_opaque_existential_1);
  *(void *)(v0 + 216) = v30;
  *(void *)(v0 + 224) = lazy protocol witness table accessor for type LinkInvocationActionProvider and conformance LinkInvocationActionProvider(&lazy protocol witness table cache variable for type DialogDetails and conformance DialogDetails, 255, (void (*)(uint64_t))type metadata accessor for DialogDetails);
  char v35 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 192));
  outlined init with copy of DialogDetails(v29, (uint64_t)v35);
  int v36 = (void *)swift_task_alloc();
  *(void *)(v0 + 384) = v36;
  *int v36 = v0;
  v36[1] = CATLinkDialogCallback.getText(dialog:dialogProperties:environment:viewContext:);
  uint64_t v37 = *(void *)(v0 + 336);
  uint64_t v38 = *(void *)(v0 + 344);
  return dispatch thunk of DialogService.templateDialog(propertyProvider:dialogProperties:environment:viewContext:)(v0 + 232, v0 + 192, v37, v38, v32, v33);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  OUTLINED_FUNCTION_20_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_0_0();
  uint64_t v6 = v5;
  *(void *)(v5 + 392) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = CATLinkDialogCallback.getText(dialog:dialogProperties:environment:viewContext:);
  }
  else
  {
    *(void *)(v6 + 400) = v2;
    *(void *)(v6 + 408) = v4;
    __swift_destroy_boxed_opaque_existential_1(v6 + 192);
    __swift_destroy_boxed_opaque_existential_1(v6 + 232);
    uint64_t v7 = CATLinkDialogCallback.getText(dialog:dialogProperties:environment:viewContext:);
  }
  return _swift_task_switch(v7, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_20_0();
  uint64_t v1 = v0[47];
  outlined release of LinkSuggestedAction((uint64_t)(v0 + 2));
  outlined destroy of DialogDetails(v1);
  uint64_t v2 = v0[50];
  uint64_t v3 = v0[51];
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v4(v3, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_20_0();
  uint64_t v1 = *(void *)(v0 + 376);
  outlined release of LinkSuggestedAction(v0 + 16);
  outlined destroy of DialogDetails(v1);
  __swift_destroy_boxed_opaque_existential_1(v0 + 192);
  __swift_destroy_boxed_opaque_existential_1(v0 + 232);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t CATLinkDialogCallback.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return _swift_deallocClassInstance(v0, 57, 7);
}

uint64_t protocol witness for DialogCallback.getText(dialog:dialogProperties:environment:) in conformance CATLinkDialogCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = protocol witness for DialogCallback.getText(dialog:dialogProperties:environment:) in conformance CATLinkDialogCallback;
  return DialogCallback.getText(dialog:dialogProperties:environment:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for DialogCallback.getText(dialog:dialogProperties:environment:viewContext:) in conformance CATLinkDialogCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for DialogCallback.getText(dialog:dialogProperties:environment:viewContext:) in conformance CATLinkDialogCallback;
  return CATLinkDialogCallback.getText(dialog:dialogProperties:environment:viewContext:)(a1, a2, a3, a4);
}

uint64_t protocol witness for DialogCallback.getText(dialog:dialogProperties:environment:viewContext:) in conformance CATLinkDialogCallback()
{
  OUTLINED_FUNCTION_20_0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_0_0();
  uint64_t v10 = *v1;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
  if (!v0)
  {
    uint64_t v6 = v5;
    uint64_t v7 = v3;
  }
  return v8(v6, v7);
}

uint64_t outlined init with take of DialogDetails(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DialogDetails(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of DialogDetails(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DialogDetails(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DialogDetails(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DialogDetails(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t base witness table accessor for AssetProvider in LinkViewProvider(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type LinkInvocationActionProvider and conformance LinkInvocationActionProvider(&lazy protocol witness table cache variable for type LinkViewProvider and conformance LinkViewProvider, a2, (void (*)(uint64_t))type metadata accessor for LinkViewProvider);
}

uint64_t type metadata accessor for LinkViewProvider()
{
  return self;
}

uint64_t base witness table accessor for DialogCallbacksProvider in LinkViewProvider(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type LinkInvocationActionProvider and conformance LinkInvocationActionProvider(&lazy protocol witness table cache variable for type LinkViewProvider and conformance LinkViewProvider, a2, (void (*)(uint64_t))type metadata accessor for LinkViewProvider);
}

uint64_t lazy protocol witness table accessor for type LinkInvocationActionProvider and conformance LinkInvocationActionProvider(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t LinkActionResolver.__allocating_init(linkClient:)(long long *a1)
{
  uint64_t v2 = swift_allocObject();
  LinkActionResolver.init(linkClient:)(a1);
  return v2;
}

uint64_t *LinkActionResolver.typeIdentifier.unsafeMutableAddressor()
{
  if (one-time initialization token for typeIdentifier != -1) {
    swift_once();
  }
  return &static LinkActionResolver.typeIdentifier;
}

void one-time initialization function for typeIdentifier()
{
  unk_5FB47 = -18;
}

uint64_t static LinkActionResolver.typeIdentifier.getter()
{
  if (one-time initialization token for typeIdentifier != -1) {
    swift_once();
  }
  uint64_t v0 = static LinkActionResolver.typeIdentifier;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t LinkActionResolver.init(linkClient:)(long long *a1)
{
  if (one-time initialization token for typeIdentifier != -1) {
    swift_once();
  }
  uint64_t v3 = unk_5FB40;
  *(void *)(v1 + 16) = static LinkActionResolver.typeIdentifier;
  *(void *)(v1 + 24) = v3;
  outlined init with take of LinkDialogIdProvider(a1, v1 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LinkActionResolver.resolveParameter(parameter:suggestion:interaction:environment:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 16) = a2;
  *(void *)(v3 + 24) = v2;
  return _swift_task_switch(LinkActionResolver.resolveParameter(parameter:suggestion:interaction:environment:), 0, 0);
}

uint64_t LinkActionResolver.resolveParameter(parameter:suggestion:interaction:environment:)()
{
  __swift_project_boxed_opaque_existential_1(*(void **)(v0 + 16), *(void *)(*(void *)(v0 + 16) + 24));
  *(void *)(v0 + 32) = dispatch thunk of CandidateSuggestion.context.getter();
  *(void *)(v0 + 40) = v1;
  *(void *)(v0 + 48) = swift_getObjectType();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(LinkActionResolver.resolveParameter(parameter:suggestion:interaction:environment:), v3, v2);
}

{
  uint64_t v0;
  uint64_t v2;

  *(void *)(v0 + 56) = Context.getSuggestedActionsRequests()();
  swift_unknownObjectRelease();
  return _swift_task_switch(LinkActionResolver.resolveParameter(parameter:suggestion:interaction:environment:), 0, 0);
}

#error "3905C: call analysis failed (funcsize=56)"

void *specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    id v12 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = a1 + 40;
    do
    {
      uint64_t v5 = *(void **)(v4 + 16);
      uint64_t v6 = *(void **)(v4 + 24);
      swift_bridgeObjectRetain();
      id v7 = v5;
      id v8 = v6;
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v12;
      }
      unint64_t v9 = v2[2];
      if (v9 >= v2[3] >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v12;
      }
      v2[2] = v9 + 1;
      outlined init with take of Any(&v11, &v2[4 * v9 + 4]);
      v4 += 48;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  uint64_t v1;
  void *v2;
  void **v4;
  void *v5;
  id v6;
  unint64_t v7;
  long long v9;
  void *v10;

  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = (void **)(a1 + 64);
    do
    {
      uint64_t v5 = *v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v6 = v5;
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v10;
      }
      id v7 = v2[2];
      if (v7 >= v2[3] >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v10;
      }
      v2[2] = v7 + 1;
      outlined init with take of Any(&v9, &v2[4 * v7 + 4]);
      v4 += 5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void specialized _arrayForceCast<A, B>(_:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  }
  if (v2)
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    if (v2 < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v3 = 0;
      uint64_t v4 = v17;
      do
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v5 = *(void *)(a1 + 8 * v3 + 32);
          swift_retain();
        }
        uint64_t v6 = type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator();
        uint64_t v15 = v6;
        uint64_t v7 = lazy protocol witness table accessor for type LinkActionResolver and conformance LinkActionResolver(&lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator, 255, (void (*)(uint64_t))type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator);
        uint64_t v16 = v7;
        uint64_t v17 = v4;
        v14[0] = v5;
        unint64_t v8 = v4[2];
        if (v8 >= v4[3] >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v6 = v15;
          uint64_t v9 = v16;
        }
        else
        {
          uint64_t v9 = v7;
        }
        ++v3;
        uint64_t v10 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, v6);
        __chkstk_darwin(v10);
        id v12 = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v13 + 16))(v12);
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, (uint64_t)v12, (uint64_t *)&v17, v6, v9);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
        uint64_t v4 = v17;
      }
      while (v2 != v3);
    }
  }
}

uint64_t LinkActionResolver.deinit()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  return v0;
}

uint64_t LinkActionResolver.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  return _swift_deallocClassInstance(v0, 72, 7);
}

uint64_t protocol witness for InternalResolver.resolveParameter(parameter:suggestion:interaction:environment:) in conformance LinkActionResolver(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for InternalSuggestionsRepository.getAsyncPooledSuggestions() in conformance LinkSuggestionsRepository;
  return LinkActionResolver.resolveParameter(parameter:suggestion:interaction:environment:)((uint64_t)v4, a2);
}

uint64_t base witness table accessor for InternalResolver in LinkActionResolver(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type LinkActionResolver and conformance LinkActionResolver(&lazy protocol witness table cache variable for type LinkActionResolver and conformance LinkActionResolver, a2, (void (*)(uint64_t))type metadata accessor for LinkActionResolver);
}

uint64_t type metadata accessor for LinkActionResolver()
{
  return self;
}

uint64_t base witness table accessor for Wrappable in LinkActionResolver(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type LinkActionResolver and conformance LinkActionResolver(&lazy protocol witness table cache variable for type LinkActionResolver and conformance LinkActionResolver, a2, (void (*)(uint64_t))type metadata accessor for LinkActionResolver);
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return outlined init with take of LinkDialogIdProvider(&v12, v10 + 40 * a1 + 32);
}

uint64_t lazy protocol witness table accessor for type LinkActionResolver and conformance LinkActionResolver(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

void *SiriLinkSuggestionsConstants.RunSuggestedLinkDirectInvocation.unsafeMutableAddressor()
{
  return &static SiriLinkSuggestionsConstants.RunSuggestedLinkDirectInvocation;
}

void *SiriLinkSuggestionsConstants.PayloadKeys.BundleIdentifier.unsafeMutableAddressor()
{
  return &static SiriLinkSuggestionsConstants.PayloadKeys.BundleIdentifier;
}

uint64_t *SiriLinkSuggestionsConstants.PayloadKeys.ArchivedAction.unsafeMutableAddressor()
{
  if (one-time initialization token for ArchivedAction != -1) {
    swift_once();
  }
  return &static SiriLinkSuggestionsConstants.PayloadKeys.ArchivedAction;
}

uint64_t *SiriLinkSuggestionsConstants.PayloadKeys.SystemProtocol.unsafeMutableAddressor()
{
  if (one-time initialization token for SystemProtocol != -1) {
    swift_once();
  }
  return &static SiriLinkSuggestionsConstants.PayloadKeys.SystemProtocol;
}

void *SiriLinkSuggestionsConstants.IntentActionIdentifier.unsafeMutableAddressor()
{
  return &static SiriLinkSuggestionsConstants.IntentActionIdentifier;
}

void *SiriLinkSuggestionsConstants.MappedParameterKeys.BundleIdentifier.unsafeMutableAddressor()
{
  return &static SiriLinkSuggestionsConstants.MappedParameterKeys.BundleIdentifier;
}

void *SiriLinkSuggestionsConstants.MappedParameterKeys.ActionIdentifier.unsafeMutableAddressor()
{
  return &static SiriLinkSuggestionsConstants.MappedParameterKeys.ActionIdentifier;
}

unint64_t static SiriLinkSuggestionsConstants.RunSuggestedLinkDirectInvocation.getter()
{
  return 0xD000000000000047;
}

unint64_t static SiriLinkSuggestionsConstants.IntentActionIdentifier.getter()
{
  return 0xD000000000000012;
}

unint64_t static SiriLinkSuggestionsConstants.MappedParameterKeys.BundleIdentifier.getter()
{
  return OUTLINED_FUNCTION_8_4();
}

void one-time initialization function for ArchivedAction()
{
}

uint64_t static SiriLinkSuggestionsConstants.PayloadKeys.ArchivedAction.getter()
{
  return static SiriLinkSuggestionsConstants.PayloadKeys.ArchivedAction.getter(&one-time initialization token for ArchivedAction, &static SiriLinkSuggestionsConstants.PayloadKeys.ArchivedAction);
}

void one-time initialization function for SystemProtocol()
{
}

uint64_t static SiriLinkSuggestionsConstants.PayloadKeys.SystemProtocol.getter()
{
  return static SiriLinkSuggestionsConstants.PayloadKeys.ArchivedAction.getter(&one-time initialization token for SystemProtocol, &static SiriLinkSuggestionsConstants.PayloadKeys.SystemProtocol);
}

uint64_t static SiriLinkSuggestionsConstants.PayloadKeys.ArchivedAction.getter(void *a1, uint64_t *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

unint64_t static SiriLinkSuggestionsConstants.MappedParameterKeys.ActionIdentifier.getter()
{
  return OUTLINED_FUNCTION_8_4();
}

void type metadata accessor for SiriLinkSuggestionsConstants()
{
}

void type metadata accessor for SiriLinkSuggestionsConstants.PayloadKeys()
{
}

void type metadata accessor for SiriLinkSuggestionsConstants.MappedParameterKeys()
{
}

void OUTLINED_FUNCTION_2_8(void *a1@<X8>)
{
  *a1 = v1;
  a1[1] = v2 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  }
  if ((unint64_t)*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((char *)&dword_10 + (*v1 & 0xFFFFFFFFFFFFFF8));
  }
  if (__OFADD__(v4, v3))
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v5 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v5;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
    {
      uint64_t v7 = v5 & 0xFFFFFFFFFFFFFF8;
      if (v4 + v3 <= *(void *)((char *)&dword_18 + (v5 & 0xFFFFFFFFFFFFFF8)) >> 1) {
        goto LABEL_12;
      }
    }
  }
  if (v5 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v1 = v8;
    uint64_t v7 = v8 & 0xFFFFFFFFFFFFFF8;
LABEL_12:
    uint64_t result = specialized Array._copyContents(initializing:)(v7 + 8 * *(void *)(v7 + 16) + 32, (*(void *)(v7 + 24) >> 1) - *(void *)(v7 + 16), a1);
    if (v10 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v10 >= 1)
  {
    uint64_t v11 = *(void *)((char *)&dword_10 + (*v1 & 0xFFFFFFFFFFFFFF8));
    BOOL v12 = __OFADD__(v11, v10);
    uint64_t v13 = v11 + v10;
    if (v12)
    {
      __break(1u);
      return result;
    }
    *(void *)((char *)&dword_10 + (*v1 & 0xFFFFFFFFFFFFFF8)) = v13;
  }
  swift_bridgeObjectRelease();
  return specialized Array._endMutation()();
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (!result || v5 > *(void *)(v3 + 24) >> 1)
  {
    if (v4 <= v5) {
      uint64_t v10 = v4 + v2;
    }
    else {
      uint64_t v10 = v4;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v10, 1, v3, v7, v8, v9);
    uint64_t v3 = result;
  }
  if (!*(void *)(v6 + 16))
  {
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  uint64_t v11 = (*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16);
  uint64_t v12 = type metadata accessor for VersionedInvocation();
  uint64_t v14 = *(void *)(v12 - 8);
  uint64_t result = v12 - 8;
  uint64_t v13 = v14;
  if (v11 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = specialized UnsafeMutablePointer.initialize(from:count:)(v6 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), v2);
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFADD__(v15, v2);
  uint64_t v17 = v15 + v2;
  if (!v16)
  {
    *(void *)(v3 + 16) = v17;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

void specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v4 + v2 > *(void *)(v3 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v3 = v6;
  }
  if (!*(void *)(a1 + 16))
  {
    if (!v2) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  specialized UnsafeMutablePointer.initialize(from:count:)(a1 + 32, v2);
  if (!v2)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

double one-time initialization function for linkClientOverride()
{
  qword_5FB88 = 0;
  double result = 0.0;
  static LinkSuggestionsOwnerDefinitionFactory.linkClientOverride = 0u;
  unk_5FB78 = 0u;
  return result;
}

long long *LinkSuggestionsOwnerDefinitionFactory.linkClientOverride.unsafeMutableAddressor()
{
  if (one-time initialization token for linkClientOverride != -1) {
    swift_once();
  }
  return &static LinkSuggestionsOwnerDefinitionFactory.linkClientOverride;
}

uint64_t static LinkSuggestionsOwnerDefinitionFactory.linkClientOverride.getter@<X0>(uint64_t a1@<X8>)
{
  return static LinkSuggestionsOwnerDefinitionFactory.linkClientOverride.getter(&one-time initialization token for linkClientOverride, (uint64_t)&static LinkSuggestionsOwnerDefinitionFactory.linkClientOverride, &demangling cache variable for type metadata for LinkClient?, a1);
}

uint64_t static LinkSuggestionsOwnerDefinitionFactory.linkClientOverride.setter(uint64_t a1)
{
  return static LinkSuggestionsOwnerDefinitionFactory.linkClientOverride.setter(a1, &one-time initialization token for linkClientOverride, (uint64_t)&static LinkSuggestionsOwnerDefinitionFactory.linkClientOverride, &demangling cache variable for type metadata for LinkClient?);
}

uint64_t (*static LinkSuggestionsOwnerDefinitionFactory.linkClientOverride.modify())()
{
  if (one-time initialization token for linkClientOverride != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_1_7();
  return static LinkSuggestionsOwnerDefinitionFactory.toolClientOverride.modify;
}

double one-time initialization function for toolClientOverride()
{
  qword_5FBB0 = 0;
  double result = 0.0;
  static LinkSuggestionsOwnerDefinitionFactory.toolClientOverride = 0u;
  unk_5FBA0 = 0u;
  return result;
}

long long *LinkSuggestionsOwnerDefinitionFactory.toolClientOverride.unsafeMutableAddressor()
{
  if (one-time initialization token for toolClientOverride != -1) {
    swift_once();
  }
  return &static LinkSuggestionsOwnerDefinitionFactory.toolClientOverride;
}

uint64_t static LinkSuggestionsOwnerDefinitionFactory.toolClientOverride.getter@<X0>(uint64_t a1@<X8>)
{
  return static LinkSuggestionsOwnerDefinitionFactory.linkClientOverride.getter(&one-time initialization token for toolClientOverride, (uint64_t)&static LinkSuggestionsOwnerDefinitionFactory.toolClientOverride, &demangling cache variable for type metadata for ToolClient?, a1);
}

uint64_t static LinkSuggestionsOwnerDefinitionFactory.linkClientOverride.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_4_5();
  return outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)(a2, a4, a3);
}

uint64_t static LinkSuggestionsOwnerDefinitionFactory.toolClientOverride.setter(uint64_t a1)
{
  return static LinkSuggestionsOwnerDefinitionFactory.linkClientOverride.setter(a1, &one-time initialization token for toolClientOverride, (uint64_t)&static LinkSuggestionsOwnerDefinitionFactory.toolClientOverride, &demangling cache variable for type metadata for ToolClient?);
}

uint64_t static LinkSuggestionsOwnerDefinitionFactory.linkClientOverride.setter(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  if (*a2 != -1) {
    swift_once();
  }
  swift_beginAccess();
  outlined assign with copy of LinkClient?(a1, a3, a4);
  swift_endAccess();
  return outlined destroy of SiriSuggestions.DisplayRepresentable?(a1, a4);
}

uint64_t (*static LinkSuggestionsOwnerDefinitionFactory.toolClientOverride.modify())()
{
  if (one-time initialization token for toolClientOverride != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_1_7();
  return static LinkSuggestionsOwnerDefinitionFactory.toolClientOverride.modify;
}

double one-time initialization function for clockOverride()
{
  qword_5FBD8 = 0;
  double result = 0.0;
  static LinkSuggestionsOwnerDefinitionFactory.clockOverride = 0u;
  unk_5FBC8 = 0u;
  return result;
}

long long *LinkSuggestionsOwnerDefinitionFactory.clockOverride.unsafeMutableAddressor()
{
  if (one-time initialization token for clockOverride != -1) {
    swift_once();
  }
  return &static LinkSuggestionsOwnerDefinitionFactory.clockOverride;
}

uint64_t static LinkSuggestionsOwnerDefinitionFactory.clockOverride.getter@<X0>(uint64_t a1@<X8>)
{
  return static LinkSuggestionsOwnerDefinitionFactory.linkClientOverride.getter(&one-time initialization token for clockOverride, (uint64_t)&static LinkSuggestionsOwnerDefinitionFactory.clockOverride, &demangling cache variable for type metadata for Clock?, a1);
}

uint64_t static LinkSuggestionsOwnerDefinitionFactory.clockOverride.setter(uint64_t a1)
{
  return static LinkSuggestionsOwnerDefinitionFactory.linkClientOverride.setter(a1, &one-time initialization token for clockOverride, (uint64_t)&static LinkSuggestionsOwnerDefinitionFactory.clockOverride, &demangling cache variable for type metadata for Clock?);
}

uint64_t outlined assign with copy of LinkClient?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_35();
  (*(void (**)(uint64_t, uint64_t))(v5 + 24))(a2, a1);
  return a2;
}

uint64_t (*static LinkSuggestionsOwnerDefinitionFactory.clockOverride.modify())()
{
  if (one-time initialization token for clockOverride != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_1_7();
  return static SiriLinkSuggestionsFeatureFlags.forceEnabled.modify;
}

uint64_t static LinkSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 416) = a1;
  *(void *)(v2 + 424) = a2;
  return _swift_task_switch(static LinkSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:), 0, 0);
}

uint64_t static LinkSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:)()
{
  if (one-time initialization token for linkSuggestions != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[54] = v1;
  __swift_project_value_buffer(v1, (uint64_t)static Logger.linkSuggestions);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "Initializing SiriLinkSuggestionsPlugin", v4, 2u);
    swift_slowDealloc();
  }

  v0[51] = _swiftEmptyArrayStorage;
  if (one-time initialization token for autoshortcutsOwner != -1) {
    swift_once();
  }
  uint64_t v5 = (int *)v0[52];
  uint64_t v6 = static LinkSuggestionsOwners.autoshortcutsOwner;
  uint64_t v7 = type metadata accessor for DefaultOwner();
  v0[55] = v7;
  v0[10] = v7;
  unint64_t v8 = lazy protocol witness table accessor for type DefaultOwner and conformance DefaultOwner();
  v0[56] = v8;
  v0[11] = v8;
  v0[7] = v6;
  uint64_t v11 = (uint64_t (*)(void *))((char *)v5 + *v5);
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc();
  v0[57] = v9;
  *uint64_t v9 = v0;
  v9[1] = static LinkSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:);
  return v11(v0 + 7);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_9_2();
  *uint64_t v2 = v1;
  os_log_type_t v3 = v1 + 56;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 464) = v4;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1(v3);
  return _swift_task_switch(static LinkSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:), 0, 0);
}

{
  uint64_t v0;
  uint64_t refreshed;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t (__cdecl *v12)();
  uint64_t v13;

  refreshed = dispatch thunk of SuggestionOwnerDefinitionBuilder.getRefreshService()();
  os_log_type_t v3 = v2;
  *(void *)(v0 + 472) = refreshed;
  if (one-time initialization token for linkClientOverride != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_4_5();
  outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)((uint64_t)&static LinkSuggestionsOwnerDefinitionFactory.linkClientOverride, v0 + 176, &demangling cache variable for type metadata for LinkClient?);
  if (*(void *)(v0 + 200))
  {
    outlined init with take of LinkDialogIdProvider((long long *)(v0 + 176), v0 + 96);
  }
  else
  {
    uint64_t v4 = [objc_allocWithZone((Class)LNMetadataProvider) init];
    uint64_t v5 = [objc_allocWithZone((Class)LNSuggestionsProvider) init];
    type metadata accessor for LinkRegistryObserver();
    swift_allocObject();
    uint64_t v6 = swift_unknownObjectRetain();
    uint64_t v7 = LinkRegistryObserver.init(refreshableService:)(v6, v3);
    unint64_t v8 = type metadata accessor for DefaultLinkClient();
    swift_allocObject();
    uint64_t v9 = DefaultLinkClient.init(metadataProvider:suggestionsProvider:registryObserver:)((uint64_t)v4, (uint64_t)v5, v7);
    *(void *)(v0 + 120) = v8;
    *(void *)(v0 + 128) = &protocol witness table for DefaultLinkClient;
    *(void *)(v0 + 96) = v9;
    outlined destroy of SiriSuggestions.DisplayRepresentable?(v0 + 176, &demangling cache variable for type metadata for LinkClient?);
  }
  if (one-time initialization token for clockOverride != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_4_5();
  outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)((uint64_t)&static LinkSuggestionsOwnerDefinitionFactory.clockOverride, v0 + 296, &demangling cache variable for type metadata for Clock?);
  if (*(void *)(v0 + 320))
  {
    outlined init with take of LinkDialogIdProvider((long long *)(v0 + 296), v0 + 216);
  }
  else
  {
    static Clocks.getSystemClock()();
    outlined destroy of SiriSuggestions.DisplayRepresentable?(v0 + 296, &demangling cache variable for type metadata for Clock?);
  }
  type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory();
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), *(void *)(v0 + 120));
  uint64_t v12 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized static AutoShortcutsSuggestionsOwnerDefinitionFactory.createAutoShortcutSuggestions(linkClient:builder:clock:)
                              + async function pointer to specialized static AutoShortcutsSuggestionsOwnerDefinitionFactory.createAutoShortcutSuggestions(linkClient:builder:clock:));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 480) = v10;
  *uint64_t v10 = v0;
  v10[1] = static LinkSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:);
  return v12();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_9_2();
  *uint64_t v2 = v1;
  os_log_type_t v3 = v1 + 216;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 488) = v4;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1(v3);
  return _swift_task_switch(static LinkSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:), 0, 0);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  void *v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;

  specialized Array.append<A>(contentsOf:)(*(void *)(v0 + 488));
  if ((SiriLinkSuggestionsFeatureFlags.isEnabled.getter(1) & 1) != 0
    && AFDeviceSupportsSystemAssistantExperience())
  {
    if (one-time initialization token for appIntentsSuggestions != -1) {
      swift_once();
    }
    __swift_project_value_buffer(*(void *)(v0 + 432), (uint64_t)static Logger.appIntentsSuggestions);
    uint64_t v1 = Logger.logObject.getter();
    uint64_t v2 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v1, v2))
    {
      os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v3 = 0;
      _os_log_impl(&dword_0, v1, v2, "adding appIntentsSuggestions", v3, 2u);
      swift_slowDealloc();
    }

    if (one-time initialization token for toolClientOverride != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_4_5();
    outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)((uint64_t)&static LinkSuggestionsOwnerDefinitionFactory.toolClientOverride, v0 + 136, &demangling cache variable for type metadata for ToolClient?);
    if (*(void *)(v0 + 160))
    {
      outlined init with take of LinkDialogIdProvider((long long *)(v0 + 136), v0 + 256);
    }
    else
    {
      uint64_t v7 = type metadata accessor for DefaultToolClient();
      swift_allocObject();
      unint64_t v8 = DefaultToolClient.init()();
      *(void *)(v0 + 280) = v7;
      *(void *)(v0 + 288) = &protocol witness table for DefaultToolClient;
      *(void *)(v0 + 256) = v8;
      outlined destroy of SiriSuggestions.DisplayRepresentable?(v0 + 136, &demangling cache variable for type metadata for ToolClient?);
    }
    *(void *)(v0 + 496) = type metadata accessor for AppIntentsSuggestionsOwnerDefinitionFactory();
    if (one-time initialization token for appIntentsOwner != -1) {
      swift_once();
    }
    uint64_t v9 = *(int **)(v0 + 416);
    uint64_t v10 = static LinkSuggestionsOwners.appIntentsOwner;
    *(_OWORD *)(v0 + 40) = *(_OWORD *)(v0 + 440);
    *(void *)(v0 + 16) = v10;
    uint64_t v12 = (uint64_t (*)(uint64_t))((char *)v9 + *v9);
    swift_retain();
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 504) = v11;
    *uint64_t v11 = v0;
    v11[1] = static LinkSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:);
    return v12(v0 + 16);
  }
  else
  {
    swift_release();
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v0 + 96);
    uint64_t v4 = *(void *)(v0 + 408);
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v5(v4);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_9_2();
  *uint64_t v2 = v1;
  os_log_type_t v3 = *v0;
  OUTLINED_FUNCTION_9_2();
  *uint64_t v4 = v3;
  *(void *)(v6 + 528) = v5;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(static LinkSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  specialized Array.append<A>(contentsOf:)(v0[66]);
  swift_release();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 32));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 12));
  uint64_t v1 = v0[51];
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  return v2(v1);
}

uint64_t static LinkSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:)(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  os_log_type_t v3 = (void *)*v1;
  OUTLINED_FUNCTION_9_2();
  *uint64_t v4 = v3;
  uint64_t v5 = (void *)*v1;
  *uint64_t v4 = *v1;
  v3[64] = v6;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v3 + 2));
  uint64_t v7 = v2[15];
  uint64_t v8 = v2[16];
  uint64_t v9 = __swift_project_boxed_opaque_existential_1(v3 + 12, v7);
  uint64_t v10 = v2[35];
  uint64_t v11 = v2[36];
  uint64_t v12 = __swift_project_boxed_opaque_existential_1(v3 + 32, v10);
  BOOL v16 = (char *)&async function pointer to specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:)
      + async function pointer to specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:);
  uint64_t v13 = (void *)swift_task_alloc();
  v3[65] = v13;
  *uint64_t v13 = v5;
  v13[1] = static LinkSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:);
  uint64_t v14 = v2[62];
  return ((uint64_t (*)(void *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v16)(v9, v12, a1, v14, v7, v10, v8, v11);
}

unint64_t lazy protocol witness table accessor for type DefaultOwner and conformance DefaultOwner()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultOwner and conformance DefaultOwner;
  if (!lazy protocol witness table cache variable for type DefaultOwner and conformance DefaultOwner)
  {
    type metadata accessor for DefaultOwner();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultOwner and conformance DefaultOwner);
  }
  return result;
}

uint64_t protocol witness for static OwnerDefinitionFactory.createOwnerDefinitions(builderFactory:) in conformance LinkSuggestionsOwnerDefinitionFactory(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for static OwnerDefinitionFactory.createOwnerDefinitions(builderFactory:) in conformance LinkSuggestionsOwnerDefinitionFactory;
  return static LinkSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:)(a1, a2);
}

uint64_t protocol witness for static OwnerDefinitionFactory.createOwnerDefinitions(builderFactory:) in conformance LinkSuggestionsOwnerDefinitionFactory()
{
  OUTLINED_FUNCTION_8();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_9_2();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(v2);
}

uint64_t type metadata accessor for LinkSuggestionsOwnerDefinitionFactory()
{
  return self;
}

uint64_t OUTLINED_FUNCTION_1_7()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_4_5()
{
  return swift_beginAccess();
}

SiriLinkSuggestionsPlugin::LinkSuggestedActionsRequest __swiftcall LinkSuggestedActionsRequest.init(bundleIdentifier:onScreen:explicitRequest:)(Swift::String bundleIdentifier, Swift::Bool onScreen, Swift::Bool explicitRequest)
{
  if (explicitRequest) {
    __int16 v3 = 256;
  }
  else {
    __int16 v3 = 0;
  }
  __int16 v4 = v3 & 0xFFFE | onScreen;
  result.bundleIdentifier = bundleIdentifier;
  result.onScreen = v4;
  result.explicitRequest = HIBYTE(v4);
  return result;
}

id LinkSuggestedActionsRequest.suggestionsRequest.getter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v3 = a3;
  int v6 = (a3 >> 8) & 1;
  type metadata accessor for LNSuggestionsRequest();
  swift_bridgeObjectRetain();
  return LNSuggestionsRequest.__allocating_init(bundleIdentifier:onScreen:explicitRequest:)(a1, a2, v3 & 1, v6);
}

unint64_t type metadata accessor for LNSuggestionsRequest()
{
  unint64_t result = lazy cache variable for type metadata for LNSuggestionsRequest;
  if (!lazy cache variable for type metadata for LNSuggestionsRequest)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LNSuggestionsRequest);
  }
  return result;
}

uint64_t LinkSuggestedActionsRequest.onScreen.getter(uint64_t a1, uint64_t a2, char a3)
{
  return a3 & 1;
}

uint64_t LinkSuggestedActionsRequest.explicitRequest.getter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (a3 >> 8) & 1;
}

uint64_t LinkSuggestedActionsRequest.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t static LinkSuggestedActionsRequest.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  if (a1 == a4 && a2 == a5)
  {
    if ((a3 ^ a6)) {
      return 0;
    }
    return ((a3 & 0x100) == 0) ^ ((unsigned __int16)(a6 & 0x100) >> 8);
  }
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = 0;
  if ((v9 & 1) != 0 && ((a3 ^ a6) & 1) == 0) {
    return ((a3 & 0x100) == 0) ^ ((unsigned __int16)(a6 & 0x100) >> 8);
  }
  return result;
}

uint64_t LinkSuggestedActionsRequest.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x800000000004ACF0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v5 = a1 == 0x6E65657263536E6FLL && a2 == 0xE800000000000000;
    if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x746963696C707865 && a2 == 0xEF74736575716552)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v7) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

SiriLinkSuggestionsPlugin::AutoShortcutsSuggestionsOwnerDefinitionFactory::ResolvedPhrase::CodingKeys_optional __swiftcall AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (SiriLinkSuggestionsPlugin::AutoShortcutsSuggestionsOwnerDefinitionFactory::ResolvedPhrase::CodingKeys_optional)3;
}

uint64_t LinkSuggestedActionsRequest.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0xD000000000000010;
  }
  if (a1 == 1) {
    return 0x6E65657263536E6FLL;
  }
  return 0x746963696C707865;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance LinkSuggestedActionsRequest.CodingKeys()
{
  return LinkSuggestedActionsRequest.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance LinkSuggestedActionsRequest.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = LinkSuggestedActionsRequest.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

SiriLinkSuggestionsPlugin::AutoShortcutsSuggestionsOwnerDefinitionFactory::ResolvedPhrase::CodingKeys_optional protocol witness for CodingKey.init(intValue:) in conformance LinkSuggestedActionsRequest.CodingKeys@<W0>(Swift::Int a1@<X0>, SiriLinkSuggestionsPlugin::AutoShortcutsSuggestionsOwnerDefinitionFactory::ResolvedPhrase::CodingKeys_optional *a2@<X8>)
{
  result.value = AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys.init(intValue:)(a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LinkSuggestedActionsRequest.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LinkSuggestedActionsRequest.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t LinkSuggestedActionsRequest.encode(to:)(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v14 = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<LinkSuggestedActionsRequest.CodingKeys>);
  OUTLINED_FUNCTION_4_0();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    char v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v15 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v6);
}

unint64_t lazy protocol witness table accessor for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys);
  }
  return result;
}

Swift::Int LinkSuggestedActionsRequest.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t LinkSuggestedActionsRequest.init(from:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<LinkSuggestedActionsRequest.CodingKeys>);
  OUTLINED_FUNCTION_4_0();
  __chkstk_darwin(v3);
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    uint64_t v4 = KeyedDecodingContainer.decode(_:forKey:)();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v6 = OUTLINED_FUNCTION_0_3();
    v7(v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v4;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LinkSuggestedActionsRequest()
{
  return LinkSuggestedActionsRequest.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LinkSuggestedActionsRequest()
{
  return LinkSuggestedActionsRequest.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LinkSuggestedActionsRequest()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance LinkSuggestedActionsRequest@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = LinkSuggestedActionsRequest.init(from:)(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6 & 1;
    *(unsigned char *)(a2 + 17) = HIBYTE(v6) & 1;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance LinkSuggestedActionsRequest(void *a1)
{
  if (*(unsigned char *)(v1 + 17)) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  return LinkSuggestedActionsRequest.encode(to:)(a1, *(void *)v1, *(void *)(v1 + 8), v2 | *(unsigned __int8 *)(v1 + 16));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LinkSuggestedActionsRequest(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 17)) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  if (*(unsigned char *)(a2 + 17)) {
    int v3 = 256;
  }
  else {
    int v3 = 0;
  }
  return static LinkSuggestedActionsRequest.__derived_struct_equals(_:_:)(*(void *)a1, *(void *)(a1 + 8), v2 | *(unsigned __int8 *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), v3 | *(unsigned __int8 *)(a2 + 16));
}

uint64_t destroy for LinkSuggestedActionsRequest()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for LinkSuggestedActionsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LinkSuggestedActionsRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

__n128 __swift_memcpy18_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for LinkSuggestedActionsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkSuggestedActionsRequest(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 18))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkSuggestedActionsRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 18) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LinkSuggestedActionsRequest()
{
  return &type metadata for LinkSuggestedActionsRequest;
}

unsigned char *storeEnumTagSinglePayload for LinkSuggestedActionsRequest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x3BF48);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for LinkSuggestedActionsRequest.CodingKeys()
{
  return &unk_56518;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo14LNAutoShortcutCG_SSs5NeverOTg5075_s25SiriLinkSuggestionsPlugin013AutoShortcutsC22OwnerDefinitionFactoryC0E22e188PhraseResolverC16resolveParameter9parameter10suggestion11interaction11environmentSayypG0aC3Kit010ResolvableN0C_AL19CandidateSuggestion_pAL11Interaction_pAL19EnvironmentSnapshot_ptYaFSSSo06D57J0Ccfu3_33_727fba25be9f1dfe045bd6ea49c3456dASSSTf3nnnpk_nTf1cn_nTm(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  while (v2)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    if (v2 < 0)
    {
      __break(1u);
      return;
    }
    uint64_t v3 = 0;
    while (v2 != v3)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v4 = *(id *)(a1 + 8 * v3 + 32);
      }
      uint64_t v5 = v4;
      id v6 = [v4 actionIdentifier];
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v9 = v8;

      unint64_t v10 = _swiftEmptyArrayStorage[2];
      if (v10 >= _swiftEmptyArrayStorage[3] >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      ++v3;
      _swiftEmptyArrayStorage[2] = v10 + 1;
      uint64_t v11 = &_swiftEmptyArrayStorage[2 * v10];
      v11[4] = v7;
      void v11[5] = v9;
      if (v2 == v3) {
        return;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
}

void specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a5;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    unint64_t v9 = 0;
    uint64_t v30 = (void *)LNSystemProtocolIdentifierConditionallyEnabled;
    uint64_t v31 = *(void *)(a1 + 16);
    uint64_t v10 = a1 + 40;
    uint64_t v26 = v8 - 1;
    uint64_t v11 = _swiftEmptyArrayStorage;
    uint64_t v27 = a1 + 40;
    while (1)
    {
      uint64_t v29 = v11;
      uint64_t v12 = (uint64_t *)(v10 + 16 * v9);
      unint64_t v13 = v9;
      uint64_t v14 = v31;
      while (1)
      {
        if (v13 >= *(void *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        if (*(void *)(a4 + 16)) {
          break;
        }
LABEL_12:
        ++v13;
        v12 += 2;
        if (v14 == v13)
        {
          uint64_t v5 = a5;
          goto LABEL_19;
        }
      }
      uint64_t v16 = *(v12 - 1);
      uint64_t v15 = *v12;
      swift_bridgeObjectRetain_n();
      unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v15);
      if ((v18 & 1) == 0)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_12;
      }
      uint64_t v19 = *(void *)(*(void *)(a4 + 56) + 8 * v17);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (!*(void *)(v19 + 16))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
      id v20 = v30;
      specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v20);
      char v22 = v21;
      swift_bridgeObjectRelease();

      if ((v22 & 1) == 0) {
        break;
      }
      uint64_t v11 = v29;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v11 = v29;
      }
      unint64_t v23 = v11[2];
      unint64_t v24 = v23 + 1;
      if (v23 >= v11[3] >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        unint64_t v24 = v23 + 1;
        uint64_t v11 = v29;
      }
      unint64_t v9 = v13 + 1;
      v11[2] = v24;
      uint64_t v25 = &v11[2 * v23];
      v25[4] = v16;
      v25[5] = v15;
      uint64_t v10 = v27;
      uint64_t v5 = a5;
      if (v26 == v13) {
        goto LABEL_19;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v14 = v31;
    goto LABEL_12;
  }
LABEL_19:
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void *specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_20;
  }
  uint64_t v6 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  if (v6)
  {
    while (1)
    {
      unint64_t v25 = v5;
      unint64_t v7 = 0;
      unint64_t v28 = v5 & 0xC000000000000001;
      unint64_t v26 = a3;
      uint64_t v27 = v5 & 0xFFFFFFFFFFFFFF8;
      while (v28)
      {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_7:
        unint64_t v9 = v8;
        a3 = v7 + 1;
        if (__OFADD__(v7, 1)) {
          goto LABEL_19;
        }
        id v10 = [v8 actionIdentifier];
        uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v13 = v12;

        specialized Set.contains(_:)(v11, v13, a2);
        LOBYTE(v10) = v14;
        swift_bridgeObjectRelease();
        if (v10)
        {
          uint64_t v15 = v6;
          uint64_t v16 = a2;
          id v17 = [v9 actionIdentifier];
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v20 = v19;

          if (!*(void *)(v26 + 16)
            || (unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v20), (v22 & 1) == 0))
          {

            swift_bridgeObjectRelease();
            a2 = v16;
            uint64_t v6 = v15;
            unint64_t v5 = v25;
            goto LABEL_14;
          }
          char v23 = *(unsigned char *)(*(void *)(v26 + 56) + v21);
          swift_bridgeObjectRelease();
          a2 = v16;
          uint64_t v6 = v15;
          unint64_t v5 = v25;
          if ((v23 & 1) == 0)
          {

            goto LABEL_14;
          }
        }
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
LABEL_14:
        ++v7;
        if (a3 == v6) {
          goto LABEL_21;
        }
      }
      if (v7 < *(void *)(v27 + 16)) {
        break;
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      if (!v6) {
        goto LABEL_21;
      }
    }
    id v8 = *(id *)(v5 + 8 * v7 + 32);
    goto LABEL_7;
  }
LABEL_21:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void *specialized Sequence.compactMap<A>(_:)(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v4 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v5 = _swiftEmptyArrayStorage;
    for (uint64_t i = 4; ; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v7 = *(void *)(a1 + 8 * i);
        swift_retain();
      }
      uint64_t v8 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      uint64_t v18 = v7;
      closure #1 in AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.getConfigurators(for:)(&v18, a2, (uint64_t *)&v17);
      if (v2)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        return v5;
      }
      swift_release();
      if ((void)v17)
      {
        long long v16 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, (uint64_t)v5);
          unint64_t v5 = v12;
        }
        unint64_t v10 = v5[2];
        unint64_t v9 = v5[3];
        long long v11 = v16;
        if (v10 >= v9 >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1, (uint64_t)v5);
          long long v11 = v16;
          unint64_t v5 = v13;
        }
        long long v5[2] = v10 + 1;
        *(_OWORD *)&v5[2 * v10 + 4] = v11;
      }
      if (v8 == v4)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return v5;
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
  swift_release();
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void *specialized Sequence.compactMap<A>(_:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v27 = a5;
  unint64_t v6 = a1;
  if (a1 >> 62) {
    goto LABEL_25;
  }
  uint64_t v7 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v31 = v6 & 0xC000000000000001;
    uint64_t v8 = _swiftEmptyArrayStorage;
    uint64_t v9 = 4;
    uint64_t v28 = v7;
    unint64_t v29 = v6;
    while (1)
    {
      id v10 = v31 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v6 + 8 * v9);
      long long v11 = v10;
      uint64_t v12 = v9 - 3;
      if (__OFADD__(v9 - 4, 1)) {
        break;
      }
      id v13 = objc_msgSend(v10, "orderedPhrases", v27);
      type metadata accessor for LNActionParameterMetadata(0, &lazy cache variable for type metadata for LNAutoShortcutLocalizedPhrase);
      unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v14 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v23)
        {
LABEL_19:

          swift_bridgeObjectRelease();
          goto LABEL_20;
        }
      }
      else if (!*(void *)((char *)&dword_10 + (v14 & 0xFFFFFFFFFFFFFF8)))
      {
        goto LABEL_19;
      }
      if ((v14 & 0xC000000000000001) != 0)
      {
        id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((char *)&dword_10 + (v14 & 0xFFFFFFFFFFFFFF8))) {
          goto LABEL_24;
        }
        id v15 = *(id *)(v14 + 32);
      }
      long long v16 = v15;
      swift_bridgeObjectRelease();
      id v17 = [v16 localizedPhrase];

      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;

      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v8 = v24;
      }
      unint64_t v21 = v8[2];
      if (v21 >= v8[3] >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v8 = v25;
      }
      long long v8[2] = v21 + 1;
      char v22 = &v8[5 * v21];
      _OWORD v22[4] = v18;
      v22[5] = v20;
      unint64_t v6 = v29;
      v22[6] = a2;
      v22[7] = a3;
      v22[8] = v11;
      uint64_t v7 = v28;
LABEL_20:
      ++v9;
      if (v12 == v7) {
        goto LABEL_27;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
  }
  uint64_t v8 = _swiftEmptyArrayStorage;
LABEL_27:
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    goto LABEL_19;
  }
  uint64_t v3 = *(void *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  if (v3)
  {
    while (1)
    {
      id v4 = (a2 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a2 + 32);
      unint64_t v5 = v4;
      type metadata accessor for LNActionParameterMetadata(0, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
      char v6 = static NSObject.== infix(_:_:)();

      if (v6) {
        break;
      }
      if (v3 != 1)
      {
        uint64_t v9 = 5;
        while (1)
        {
          id v10 = (a2 & 0xC000000000000001) != 0
              ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
              : *(id *)(a2 + 8 * v9);
          long long v11 = v10;
          uint64_t v12 = v9 - 3;
          if (__OFADD__(v9 - 4, 1)) {
            break;
          }
          char v7 = static NSObject.== infix(_:_:)();

          if ((v7 & 1) == 0)
          {
            ++v9;
            if (v12 != v3) {
              continue;
            }
          }
          goto LABEL_9;
        }
        __break(1u);
LABEL_19:
        swift_bridgeObjectRetain();
        uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
        if (v3) {
          continue;
        }
      }
      goto LABEL_8;
    }
    char v7 = 1;
  }
  else
  {
LABEL_8:
    char v7 = 0;
  }
LABEL_9:
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t static AutoShortcutsSuggestionsOwnerDefinitionFactory.createAutoShortcutSuggestions(linkClient:builder:clock:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = __swift_project_boxed_opaque_existential_1(a1, v7);
  id v10 = (void *)OUTLINED_FUNCTION_6_1();
  *(void *)(v4 + 16) = v10;
  *id v10 = v4;
  v10[1] = protocol witness for InternalGenerator.generateCandidateSuggestions(interaction:environment:factory:) in conformance LinkSuggestionsGenerator;
  return v12(v9, a2, a3, v3, v7, v8);
}

void *AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants.phraseParameterName.unsafeMutableAddressor()
{
  return &static AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants.phraseParameterName;
}

unint64_t static AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants.phraseParameterName.getter()
{
  return OUTLINED_FUNCTION_1(19);
}

void *AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants.appIdParameterName.unsafeMutableAddressor()
{
  return &static AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants.appIdParameterName;
}

unint64_t static AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants.appIdParameterName.getter()
{
  return OUTLINED_FUNCTION_1(18);
}

void *AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants.phraseResolverIdentifier.unsafeMutableAddressor()
{
  return &static AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants.phraseResolverIdentifier;
}

unint64_t static AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants.phraseResolverIdentifier.getter()
{
  return OUTLINED_FUNCTION_1(26);
}

void *AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants.appIdResolverIdentifier.unsafeMutableAddressor()
{
  return &static AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants.appIdResolverIdentifier;
}

unint64_t static AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants.appIdResolverIdentifier.getter()
{
  return OUTLINED_FUNCTION_1(25);
}

void *AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants.contextCandidateAppDetailsKey.unsafeMutableAddressor()
{
  return &static AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants.contextCandidateAppDetailsKey;
}

unint64_t static AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants.contextCandidateAppDetailsKey.getter()
{
  return OUTLINED_FUNCTION_1(31);
}

void static AutoShortcutsSuggestionsOwnerDefinitionFactory.handleDialog(dialogProperties:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BehaviorAfterSpeaking();
  OUTLINED_FUNCTION_4_0();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_14_0();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingText?);
  __chkstk_darwin(v11 - 8);
  OUTLINED_FUNCTION_14_0();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = type metadata accessor for TemplatingText();
  OUTLINED_FUNCTION_23();
  __chkstk_darwin(v16);
  OUTLINED_FUNCTION_14_0();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  DialogProperties.resolvedPhrase.getter((uint64_t)v19);
  outlined init with take of AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase?((uint64_t)v19, (uint64_t)v20);
  if (v20[1])
  {
    long long v23 = v21;
    uint64_t v18 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TemplatingSection>);
    uint64_t v17 = type metadata accessor for TemplatingSection();
    OUTLINED_FUNCTION_0_1(v17);
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_47FC0;
    swift_bridgeObjectRetain();
    TemplatingText.init(text:speakableTextOverride:)();
    __swift_storeEnumTagSinglePayload(v14, 1, 1, v15);
    TemplatingSection.init(id:content:caption:spokenOnly:)();
    (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v10, enum case for BehaviorAfterSpeaking.defaultBehavior(_:), v4);
    a2[3] = type metadata accessor for TemplatingResult();
    __swift_allocate_boxed_opaque_existential_1(a2);
    OUTLINED_FUNCTION_38_1(0x68736F747561);
    TemplatingResult.init(templateIdentifier:sections:behaviorAfterSpeaking:)();
    swift_bridgeObjectRelease();
    long long v24 = v23;
    outlined release of String((uint64_t)&v24);
  }
  else
  {
    a2[3] = (uint64_t)&type metadata for String;
    *a2 = 0;
    a2[1] = 0xE000000000000000;
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed DialogProperties) -> (@out Any)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  a3(a2);
  uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
  return thunk for @escaping @callee_guaranteed (@in_guaranteed DialogProperties) -> (@out Any)(v4);
}

uint64_t closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.createAutoShortcutSuggestions(linkClient:builder:clock:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Any, Any?>);
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = *(void *)(a1 + 40);
  long long v17 = *(_OWORD *)(a1 + 24);
  __swift_project_boxed_opaque_existential_1((void *)a1, v17);
  _s25SiriLinkSuggestionsPlugin0B6Client_pWOcTm_0(a2, (uint64_t)&v22);
  uint64_t v9 = type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver();
  uint64_t v10 = swift_allocObject();
  AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver.init(linkClient:)(&v22);
  uint64_t v20 = v9;
  uint64_t v21 = _s18SiriSuggestionsKit12DefaultOwnerCAcA0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver, v11, (void (*)(uint64_t))type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver);
  v19[0] = v10;
  static AutoShortcutsSuggestionsOwnerDefinitionFactory.createPhraseParameter(clock:)(a4);
  long long v23 = v17;
  uint64_t v24 = v8;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v22);
  SuggestionDetailsBuilder.parameter(parameterName:resolver:resolveParam:)();
  swift_release();
  outlined destroy of ToolInvocation?((uint64_t)v19, &demangling cache variable for type metadata for Resolver?);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v22);
  uint64_t v12 = *(void *)(a1 + 40);
  long long v18 = *(_OWORD *)(a1 + 24);
  __swift_project_boxed_opaque_existential_1((void *)a1, v18);
  uint64_t v13 = type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0xD000000000000019;
  *(void *)(v14 + 24) = 0x8000000000049E80;
  uint64_t v20 = v13;
  uint64_t v21 = _s18SiriSuggestionsKit12DefaultOwnerCAcA0E0AAWlTm_0(&lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver, v15, (void (*)(uint64_t))type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver);
  v19[0] = v14;
  type metadata accessor for ResolvableParameter();
  static SuggestionTransformers.passthroughParameterForLogging()();
  ResolvableParameter.__allocating_init(typeIdentifier:required:loggingKeyTransformer:)();
  long long v23 = v18;
  uint64_t v24 = v12;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v22);
  SuggestionDetailsBuilder.parameter(parameterName:resolver:resolveParam:)();
  swift_release();
  outlined destroy of ToolInvocation?((uint64_t)v19, &demangling cache variable for type metadata for Resolver?);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v22);
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver.__allocating_init(linkClient:)(long long *a1)
{
  uint64_t v2 = OUTLINED_FUNCTION_22_3();
  AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver.init(linkClient:)(a1);
  return v2;
}

uint64_t static AutoShortcutsSuggestionsOwnerDefinitionFactory.createPhraseParameter(clock:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Any, Any?>);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v15 - v8;
  __chkstk_darwin(v7);
  type metadata accessor for ResolvableParameter();
  _s25SiriLinkSuggestionsPlugin0B6Client_pWOcTm_0(a1, (uint64_t)v16);
  uint64_t v10 = swift_allocObject();
  outlined init with take of LinkDialogIdProvider(v16, v10 + 16);
  _s25SiriLinkSuggestionsPlugin0B6Client_pWOcTm_0(a1, (uint64_t)v16);
  uint64_t v11 = swift_allocObject();
  outlined init with take of LinkDialogIdProvider(v16, v11 + 16);
  static SuggestionTransformers.obfuscateParametersForLogging(numCharacters:rngFactory:currentDate:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v9, v2);
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v13 + v12, v6, v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  Transformer.init(transform:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
  return ResolvableParameter.__allocating_init(typeIdentifier:required:loggingKeyTransformer:)();
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver.__allocating_init()()
{
  OUTLINED_FUNCTION_28_2();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0xD000000000000019;
  *(void *)(result + 24) = 0x8000000000049E80;
  return result;
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.__allocating_init(linkClient:)(long long *a1)
{
  uint64_t v2 = OUTLINED_FUNCTION_22_3();
  AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.init(linkClient:)(a1);
  return v2;
}

uint64_t closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.stripOutPhrase(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of Any(a1, (uint64_t)&v11);
  if ((swift_dynamicCast() & 1) == 0) {
    return outlined init with copy of Any(a1, a2);
  }
  id v13 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Any, Any?>);
  uint64_t v4 = (void (*)(uint64_t *))Transformer.transform.getter();
  uint64_t v11 = v7;
  uint64_t v12 = v8;
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = 95;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRetain();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v9._object = &type metadata for String;
  uint64_t v7 = v11;
  uint64_t v8 = v12;
  v4(&v7);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v7);
}

uint64_t closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.createPhraseParameter(clock:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v1 = dispatch thunk of Clock.getCurrentTime()();
  return Date.init(timeIntervalSince1970:)(v1);
}

uint64_t closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.rngFactory(_:)@<X0>(char a1@<W1>, void *a2@<X2>, uint64_t *a3@<X8>)
{
  if (a1)
  {
    __swift_project_boxed_opaque_existential_1(a2, a2[3]);
    dispatch thunk of Clock.getCurrentTime()();
  }
  a3[3] = type metadata accessor for SimpleRNG();
  a3[4] = _s18SiriSuggestionsKit12DefaultOwnerCAcA0E0AAWlTm_0(&lazy protocol witness table cache variable for type SimpleRNG and conformance SimpleRNG, 255, (void (*)(uint64_t))&type metadata accessor for SimpleRNG);
  __swift_allocate_boxed_opaque_existential_1(a3);
  return SimpleRNG.init(seed:)();
}

uint64_t static AutoShortcutsSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:)(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  return OUTLINED_FUNCTION_7((uint64_t)static AutoShortcutsSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:));
}

uint64_t static AutoShortcutsSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:)()
{
  if (one-time initialization token for autoshortcutsOwner != -1) {
    swift_once();
  }
  uint64_t v1 = (int *)v0[12];
  uint64_t v2 = static LinkSuggestionsOwners.autoshortcutsOwner;
  v0[5] = type metadata accessor for DefaultOwner();
  v0[6] = _s18SiriSuggestionsKit12DefaultOwnerCAcA0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DefaultOwner and conformance DefaultOwner, 255, (void (*)(uint64_t))&type metadata accessor for DefaultOwner);
  v0[2] = v2;
  Swift::String v5 = (uint64_t (*)(void *))((char *)v1 + *v1);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[15] = v3;
  *uint64_t v3 = v0;
  v3[1] = static AutoShortcutsSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:);
  return v5(v0 + 2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = v0 + 16;
  *(void *)(v0 + 128) = v2;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1(v1);
  OUTLINED_FUNCTION_11_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  void *v0;
  uint64_t refreshed;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v13)(void *, uint64_t, void *, uint64_t);
  uint64_t v14;

  refreshed = dispatch thunk of SuggestionOwnerDefinitionBuilder.getRefreshService()();
  uint64_t v3 = v2;
  v0[17] = refreshed;
  uint64_t v4 = [objc_allocWithZone((Class)LNMetadataProvider) init];
  Swift::String v5 = [objc_allocWithZone((Class)LNSuggestionsProvider) init];
  type metadata accessor for LinkRegistryObserver();
  swift_allocObject();
  uint64_t v6 = swift_unknownObjectRetain();
  uint64_t v7 = LinkRegistryObserver.init(refreshableService:)(v6, v3);
  type metadata accessor for DefaultLinkClient();
  swift_allocObject();
  uint64_t v8 = DefaultLinkClient.init(metadataProvider:suggestionsProvider:registryObserver:)((uint64_t)v4, (uint64_t)v5, v7);
  v0[18] = v8;
  static Clocks.getSystemClock()();
  Swift::String v9 = (void *)OUTLINED_FUNCTION_6_1();
  v0[19] = v9;
  *Swift::String v9 = v0;
  v9[1] = static AutoShortcutsSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:);
  uint64_t v10 = v0[16];
  uint64_t v11 = v0[14];
  return v13(v8, v10, v0 + 7, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = v0 + 56;
  *(void *)(v0 + 160) = v2;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1(v1);
  OUTLINED_FUNCTION_11_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_8();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  OUTLINED_FUNCTION_33_2();
  uint64_t v2 = *(void *)(v0 + 160);
  return v1(v2);
}

uint64_t DialogProperties.resolvedPhrase.getter@<X0>(uint64_t a1@<X8>)
{
  return DialogProperties.resolvedPhrase.getter((uint64_t (*)(void))&dispatch thunk of DialogProperties.getParameters(), a1);
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.bundleIdentifier.getter()
{
  return OUTLINED_FUNCTION_25_3();
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver.resolveParameter(parameter:suggestion:interaction:environment:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 48) = a2;
  return OUTLINED_FUNCTION_7((uint64_t)AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver.resolveParameter(parameter:suggestion:interaction:environment:));
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver.resolveParameter(parameter:suggestion:interaction:environment:)()
{
  OUTLINED_FUNCTION_20_0();
  *(void *)(v0 + 56) = OUTLINED_FUNCTION_14_2(*(void **)(v0 + 48));
  *(void *)(v0 + 64) = v1;
  *(void *)(v0 + 72) = swift_getObjectType();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver.resolveParameter(parameter:suggestion:interaction:environment:), v3, v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_8();
  uint64_t v1 = Context.getCandidateApplicationDetails()();
  uint64_t v3 = v2;
  v0[2] = v1;
  v0[3] = v2;
  v0[4] = v4;
  v0[5] = v5;
  swift_unknownObjectRelease();
  v0[10] = v3;
  OUTLINED_FUNCTION_11_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_20_0();
  uint64_t v1 = v0[10];
  if (v1)
  {
    uint64_t v2 = v0[2];
    uint64_t v3 = (void *)v0[5];
    swift_bridgeObjectRelease();

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_47FC0;
    *(void *)(v4 + 56) = &type metadata for String;
    *(void *)(v4 + 32) = v2;
    *(void *)(v4 + 40) = v1;
  }
  else
  {
    if (one-time initialization token for autoshortcutsSuggestions != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.autoshortcutsSuggestions);
    uint64_t v6 = (void *)Logger.logObject.getter();
    uint64_t v7 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_10_2(v7))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_43_0(&dword_0, v8, v9, "Didn't find a bundle identifier");
      OUTLINED_FUNCTION_10();
    }
  }
  OUTLINED_FUNCTION_33_2();
  return v10();
}

uint64_t Context.getCandidateApplicationDetails()()
{
  if (one-time initialization token for autoshortcutsOwner != -1) {
    swift_once();
  }
  uint64_t v0 = static LinkSuggestionsOwners.autoshortcutsOwner;
  uint64_t v1 = type metadata accessor for DefaultOwner();
  v6[3] = v1;
  uint64_t v2 = _s18SiriSuggestionsKit12DefaultOwnerCAcA0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DefaultOwner and conformance DefaultOwner, 255, (void (*)(uint64_t))&type metadata accessor for DefaultOwner);
  void v6[4] = v2;
  v6[0] = v0;
  __swift_project_boxed_opaque_existential_1(v6, v1);
  v5[3] = v1;
  v5[4] = *(void *)(v2 + 8);
  __swift_allocate_boxed_opaque_existential_1(v5);
  OUTLINED_FUNCTION_23();
  (*(void (**)(void))(v3 + 16))();
  swift_retain();
  Context.getParam(for:key:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  if (v8)
  {
    if (swift_dynamicCast()) {
      return v6[0];
    }
  }
  else
  {
    outlined destroy of ToolInvocation?((uint64_t)v7, &demangling cache variable for type metadata for Any?);
  }
  return OUTLINED_FUNCTION_49_1();
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v0 = OUTLINED_FUNCTION_28_2();
  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = 0xD000000000000019;
  *(void *)(v0 + 24) = 0x8000000000049E80;
  return result;
}

uint64_t protocol witness for InternalResolver.resolveParameter(parameter:suggestion:interaction:environment:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for SignalSubscriber.getAsyncLookupSubscriptions() in conformance LinkSuggestionsGenerator;
  return AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver.resolveParameter(parameter:suggestion:interaction:environment:)((uint64_t)v4, a2);
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver.init(linkClient:)(long long *a1)
{
  *(void *)(v1 + 16) = 0xD00000000000001ALL;
  *(void *)(v1 + 24) = 0x8000000000049E60;
  outlined init with take of LinkDialogIdProvider(a1, v1 + 32);
  return v1;
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver.resolveParameter(parameter:suggestion:interaction:environment:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 240) = a2;
  *(void *)(v3 + 248) = v2;
  return OUTLINED_FUNCTION_7((uint64_t)AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver.resolveParameter(parameter:suggestion:interaction:environment:));
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver.resolveParameter(parameter:suggestion:interaction:environment:)()
{
  uint64_t v10 = v0;
  if (one-time initialization token for autoshortcutsSuggestions != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 256) = __swift_project_value_buffer(v1, (uint64_t)static Logger.autoshortcutsSuggestions);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = OUTLINED_FUNCTION_57();
    uint64_t v9 = OUTLINED_FUNCTION_64();
    *(_DWORD *)uint64_t v4 = 136315394;
    *(void *)(v0 + 224) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003FLL, 0x800000000004B740, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2048;
    *(void *)(v0 + 232) = 147;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v2, v3, "Function: %s, line: %ld", (uint8_t *)v4, 0x16u);
    OUTLINED_FUNCTION_13_3();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_10();
  }

  *(void *)(v0 + 264) = OUTLINED_FUNCTION_14_2(*(void **)(v0 + 240));
  *(void *)(v0 + 272) = v5;
  *(void *)(v0 + 280) = swift_getObjectType();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver.resolveParameter(parameter:suggestion:interaction:environment:), v7, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_20_0();
  uint64_t v1 = Context.getCandidateApplicationDetails()();
  os_log_type_t v3 = v2;
  v0[2] = v1;
  v0[3] = v2;
  v0[4] = v4;
  v0[5] = v5;
  swift_unknownObjectRelease();
  v0[36] = v1;
  v0[37] = v3;
  OUTLINED_FUNCTION_11_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_20_0();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_12();
  *os_log_type_t v3 = v2;
  *(void *)(v2 + 344) = v4;
  *(void *)(v2 + 352) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  OUTLINED_FUNCTION_11_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v22;
  unint64_t v23;
  id v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  void *v34;
  id v35;
  unint64_t v36;
  void *v37;
  id v38;
  NSObject *v39;
  os_log_type_t v40;
  BOOL v41;
  void *v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t (*v47)(void *);
  uint64_t v48;
  uint64_t v49[2];
  void *v50;
  uint64_t v51;

  uint64_t v50 = v0;
  uint64_t v1 = (void *)v0[38];
  swift_bridgeObjectRetain_n();
  OUTLINED_FUNCTION_32();
  uint64_t v2 = v1;
  swift_bridgeObjectRetain_n();
  os_log_type_t v3 = v2;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_10_2(v5))
  {
    uint64_t v6 = (void *)v0[38];
    uint64_t v7 = v0[36];
    uint64_t v8 = v0[37];
    uint64_t v9 = (uint8_t *)OUTLINED_FUNCTION_57();
    v49[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    swift_bridgeObjectRetain();
    v0[21] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    OUTLINED_FUNCTION_43_2();
    uint64_t v10 = Dictionary.description.getter();
    uint64_t v12 = v11;
    swift_bridgeObjectRelease();
    v0[22] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v4, (os_log_type_t)v2, "ConditionallyEnabledIntent state for %s: %s", v9, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_10();
  }
  else
  {
    id v13 = (void *)v0[38];
    swift_bridgeObjectRelease_n();

    OUTLINED_FUNCTION_19_2();
    OUTLINED_FUNCTION_12_1();
  }
  uint64_t v14 = v0[43];
  uint64_t v15 = v0[44];
  uint64_t v16 = v0[40];
  swift_bridgeObjectRetain();
  long long v17 = swift_bridgeObjectRetain();
  v0[25] = specialized _ArrayProtocol.filter(_:)(v17, v16, v14);
  swift_bridgeObjectRelease();
  long long v18 = v0[25];
  uint64_t v19 = v0[40];
  if ((v18 & 0x8000000000000000) != 0 || (v18 & 0x4000000000000000) != 0)
  {
    OUTLINED_FUNCTION_45_1();
    swift_bridgeObjectRetain();
    uint64_t v20 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v18);
    swift_bridgeObjectRelease();
    uint64_t v19 = v0[40];
  }
  else
  {
    uint64_t v20 = v18 & 0xFFFFFFFFFFFFFF8;
    OUTLINED_FUNCTION_45_1();
    swift_bridgeObjectRetain();
  }
  v49[0] = v20;
  specialized MutableCollection<>.sort(by:)(v49, v19);
  if (v15)
  {
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v0[25] = v49[0];
    swift_bridgeObjectRelease();
    long long v22 = (void *)v0[38];
    long long v23 = v0[25];
    swift_bridgeObjectRetain_n();
    OUTLINED_FUNCTION_32();
    uint64_t v24 = v22;
    swift_bridgeObjectRetain_n();
    unint64_t v25 = v24;
    unint64_t v26 = Logger.logObject.getter();
    uint64_t v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = OUTLINED_FUNCTION_57();
      v49[0] = OUTLINED_FUNCTION_64();
      *(_DWORD *)uint64_t v28 = 134218242;
      if (v23 >> 62)
      {
        swift_bridgeObjectRetain();
        unint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v29 = *(void *)((char *)&dword_10 + (v23 & 0xFFFFFFFFFFFFFF8));
      }
      uint64_t v30 = (void *)v0[38];
      unint64_t v31 = v0[36];
      uint64_t v32 = v0[37];
      swift_bridgeObjectRelease();
      v0[16] = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[17] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      _os_log_impl(&dword_0, v26, v27, "%ld AppShortcuts eligible for suggestions in %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_10();
    }
    else
    {
      uint64_t v33 = (void *)v0[38];
      swift_bridgeObjectRelease_n();

      OUTLINED_FUNCTION_19_2();
      OUTLINED_FUNCTION_12_1();
    }
    uint64_t v34 = (void *)v0[38];
    OUTLINED_FUNCTION_4_5();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v35 = v34;
    int v36 = swift_bridgeObjectRetain();
    uint64_t v37 = OUTLINED_FUNCTION_26_2(v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    OUTLINED_FUNCTION_32();
    uint64_t v38 = v35;
    swift_bridgeObjectRetain();
    uint64_t v39 = Logger.logObject.getter();
    uint64_t v40 = static os_log_type_t.info.getter();
    uint64_t v41 = os_log_type_enabled(v39, v40);
    unint64_t v42 = (void *)v0[38];
    id v43 = v0[37];
    if (v41)
    {
      uint64_t v48 = v0[36];
      uint64_t v44 = OUTLINED_FUNCTION_57();
      v49[0] = OUTLINED_FUNCTION_64();
      OUTLINED_FUNCTION_30_2(3.8521e-34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v44 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[15] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v43, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      _os_log_impl(&dword_0, v39, v40, "%ld AppShortcut resolved phrases for %s", (uint8_t *)v44, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_10();
    }
    else
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_19_2();
    }
    unint64_t v45 = (void *)v0[38];
    unint64_t v46 = specialized _arrayForceCast<A, B>(_:)((uint64_t)v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    OUTLINED_FUNCTION_33_2();
    return v47(v46);
  }
}

{
  uint64_t v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  void *v9;
  uint64_t (*v10)(void *);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  id v13 = v0;
  uint64_t v1 = *(void **)(v0 + 304);
  swift_bridgeObjectRetain_n();
  OUTLINED_FUNCTION_32();
  uint64_t v2 = v1;
  os_log_type_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void **)(v0 + 304);
    uint64_t v7 = *(void *)(v0 + 288);
    uint64_t v6 = *(void *)(v0 + 296);
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = OUTLINED_FUNCTION_64();
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    _os_log_impl(&dword_0, v3, v4, "Could not retrieve AppIntents state from '%s'", v8, 0xCu);
    OUTLINED_FUNCTION_13_3();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_10();
  }
  else
  {
    uint64_t v9 = *(void **)(v0 + 304);

    OUTLINED_FUNCTION_19_2();
    OUTLINED_FUNCTION_12_1();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_33_2();
  return v10(_swiftEmptyArrayStorage);
}

void AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver.resolveParameter(parameter:suggestion:interaction:environment:)()
{
  uint64_t v75 = v0;
  unint64_t v1 = v0[37];
  if (v1)
  {
    uint64_t v2 = v0 + 25;
    uint64_t v3 = v0[36];
    uint64_t v5 = v0[4];
    uint64_t v4 = (void *)v0[5];
    uint64_t v6 = (void *)v0[31];
    v0[38] = v4;
    v0[39] = v5;
    uint64_t v7 = v6[7];
    uint64_t v8 = v6[8];
    unint64_t v73 = v6;
    uint64_t v72 = v6 + 4;
    __swift_project_boxed_opaque_existential_1(v6 + 4, v7);
    v0[25] = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v8 + 32))(v3, v1, v7, v8);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    id v9 = v4;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v70 = v9;
      uint64_t v12 = (uint8_t *)OUTLINED_FUNCTION_57();
      v74[0] = OUTLINED_FUNCTION_64();
      *(_DWORD *)uint64_t v12 = 134218242;
      OUTLINED_FUNCTION_4_5();
      if (*v2 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v13 = *(void *)((char *)&dword_10 + (*v2 & 0xFFFFFFFFFFFFFF8));
      }
      uint64_t v14 = v0[36];
      v0[26] = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_43_2();
      v0[27] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v1, v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_30_0();
      id v9 = v70;

      _os_log_impl(&dword_0, v10, v11, "Retrieved %ld AppShortcuts for bundle identifier: %s", v12, 0x16u);
      OUTLINED_FUNCTION_13_3();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_10();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_30_0();
    }
    if ([self isConditionallyEnabledIntentsEnabled])
    {
      uint64_t v19 = v0[36];
      swift_beginAccess();
      unint64_t v20 = swift_bridgeObjectRetain();
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo14LNAutoShortcutCG_SSs5NeverOTg5075_s25SiriLinkSuggestionsPlugin013AutoShortcutsC22OwnerDefinitionFactoryC0E22e188PhraseResolverC16resolveParameter9parameter10suggestion11interaction11environmentSayypG0aC3Kit010ResolvableN0C_AL19CandidateSuggestion_pAL11Interaction_pAL19EnvironmentSnapshot_ptYaFSSSo06D57J0Ccfu3_33_727fba25be9f1dfe045bd6ea49c3456dASSSTf3nnnpk_nTf1cn_nTm(v20);
      uint64_t v21 = v9;
      uint64_t v23 = v22;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v24 = v21;
      specialized _ArrayProtocol.filter(_:)(v23, v19, v1, v5, v24);
      uint64_t v26 = specialized Set.init<A>(_:)(v25);
      v0[40] = v26;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      id v27 = v24;
      swift_bridgeObjectRetain_n();
      id v28 = v27;
      unint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_10_2(v30))
      {
        uint64_t v31 = v0[36];
        uint64_t v32 = OUTLINED_FUNCTION_57();
        v74[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v32 = 136315394;
        swift_bridgeObjectRetain();
        v0[23] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v1, v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        OUTLINED_FUNCTION_30_0();

        *(_WORD *)(v32 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v33 = Set.description.getter();
        unint64_t v35 = v34;
        swift_bridgeObjectRelease();
        v0[24] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_0, v29, (os_log_type_t)v27, "AppShortcut-participating ConditionallyEnabledIntents for %s: %s", (uint8_t *)v32, 0x16u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_10();
        OUTLINED_FUNCTION_10();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        OUTLINED_FUNCTION_30_0();

        swift_bridgeObjectRelease_n();
      }

      if (*(void *)(v26 + 16))
      {
        __swift_project_boxed_opaque_existential_1(v72, v73[7]);
        swift_bridgeObjectRetain();
        specialized _copyCollectionToContiguousArray<A>(_:)();
        v0[41] = v36;
        swift_bridgeObjectRelease();
        uint64_t v37 = (void *)swift_task_alloc();
        v0[42] = v37;
        *uint64_t v37 = v0;
        v37[1] = AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver.resolveParameter(parameter:suggestion:interaction:environment:);
        OUTLINED_FUNCTION_35_1();
        __asm { BRAA            X7, X16 }
      }
      unint64_t v40 = v0[25];
      uint64_t v41 = v0[40];
      if ((v40 & 0x8000000000000000) != 0 || (v40 & 0x4000000000000000) != 0)
      {
        OUTLINED_FUNCTION_45_1();
        swift_bridgeObjectRetain();
        uint64_t v42 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v40);
        swift_bridgeObjectRelease();
        uint64_t v41 = v0[40];
      }
      else
      {
        uint64_t v42 = v40 & 0xFFFFFFFFFFFFFF8;
        OUTLINED_FUNCTION_45_1();
        swift_bridgeObjectRetain();
      }
      v74[0] = v42;
      specialized MutableCollection<>.sort(by:)(v74, v41);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v0[25] = v74[0];
      swift_bridgeObjectRelease();
    }
    id v43 = (void *)v0[38];
    unint64_t v44 = v0[25];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    id v45 = v43;
    OUTLINED_FUNCTION_32();
    id v46 = v45;
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = OUTLINED_FUNCTION_57();
      v74[0] = OUTLINED_FUNCTION_64();
      *(_DWORD *)uint64_t v49 = 134218242;
      if (v44 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v50 = *(void *)((char *)&dword_10 + (v44 & 0xFFFFFFFFFFFFFF8));
      }
      unint64_t v51 = (void *)v0[38];
      uint64_t v53 = v0[36];
      unint64_t v52 = v0[37];
      swift_bridgeObjectRelease();
      v0[16] = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v49 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[17] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v52, v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      _os_log_impl(&dword_0, v47, v48, "%ld AppShortcuts eligible for suggestions in %s", (uint8_t *)v49, 0x16u);
      OUTLINED_FUNCTION_13_3();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_10();
    }
    else
    {
      uint64_t v54 = (void *)v0[38];
      OUTLINED_FUNCTION_19_2();

      OUTLINED_FUNCTION_12_1();
      swift_bridgeObjectRelease_n();
    }
    unint64_t v56 = (void *)v0[38];
    uint64_t v55 = v0[39];
    OUTLINED_FUNCTION_4_5();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v57 = v56;
    unint64_t v58 = swift_bridgeObjectRetain();
    uint64_t v59 = OUTLINED_FUNCTION_26_2(v58);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    OUTLINED_FUNCTION_32();
    id v60 = v57;
    swift_bridgeObjectRetain();
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.info.getter();
    BOOL v63 = OUTLINED_FUNCTION_10_2(v62);
    long long v64 = (void *)v0[38];
    unint64_t v65 = v0[37];
    if (v63)
    {
      uint64_t v71 = v0[36];
      uint64_t v66 = OUTLINED_FUNCTION_57();
      v74[0] = OUTLINED_FUNCTION_64();
      OUTLINED_FUNCTION_30_2(3.8521e-34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v66 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[15] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v65, v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      _os_log_impl(&dword_0, v61, (os_log_type_t)v55, "%ld AppShortcut resolved phrases for %s", (uint8_t *)v66, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_10();
    }
    else
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    long long v67 = (void *)v0[38];
    specialized _arrayForceCast<A, B>(_:)((uint64_t)v59);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v15 = (void *)Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_10_2(v16))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_43_0(&dword_0, v17, v18, "Didn't find candidate application details");
      OUTLINED_FUNCTION_10();
    }
  }
  OUTLINED_FUNCTION_35_1();
  __asm { BRAA            X2, X16 }
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.init(phrase:bundleIdentifier:autoShortcut:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *a6 = result;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  return result;
}

uint64_t protocol witness for InternalResolver.resolveParameter(parameter:suggestion:interaction:environment:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for SignalSubscriber.getAsyncLookupSubscriptions() in conformance LinkSuggestionsGenerator;
  return AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver.resolveParameter(parameter:suggestion:interaction:environment:)((uint64_t)v4, a2);
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt.init(_:)(void *a1)
{
  id v2 = [a1 systemProtocolMetadata];
  type metadata accessor for LNSystemProtocolIdentifier(0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LNSystemProtocolMetadata);
  _s18SiriSuggestionsKit12DefaultOwnerCAcA0E0AAWlTm_0(&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, 255, type metadata accessor for LNSystemProtocolIdentifier);
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v4 = specialized _NativeDictionary.mapValues<A>(_:)(v3);
  swift_bridgeObjectRelease();

  return v4;
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v2 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v4 = result + 64;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_22;
    }
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v11 >= v8) {
      return 1;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      int64_t v3 = v11 + 1;
      if (v11 + 1 >= v8) {
        return 1;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v3);
      if (!v12)
      {
        int64_t v3 = v11 + 2;
        if (v11 + 2 >= v8) {
          return 1;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v3);
        if (!v12) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v7 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_22:
    uint64_t v14 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v10);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + 8 * v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    char v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    uint64_t v20 = swift_bridgeObjectRetain();
    char v21 = specialized static Dictionary<>.== infix(_:_:)(v20, v17);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v21 & 1) == 0) {
      return 0;
    }
  }
  int64_t v13 = v11 + 3;
  if (v13 >= v8) {
    return 1;
  }
  unint64_t v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    int64_t v3 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v3 >= v8) {
      return 1;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v3);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  char v18;
  char v19;
  unsigned __int8 v20;

  if (result == a2) {
    return 1;
  }
  int64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  unint64_t v7 = -1;
  if (v6 < 64) {
    unint64_t v7 = ~(-1 << v6);
  }
  int64_t v8 = v7 & *(void *)(result + 64);
  unint64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      int64_t v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    unint64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9) {
      return 1;
    }
    int64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      uint64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      int64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        uint64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        int64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_21:
    int64_t v8 = (v13 - 1) & v13;
    int64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    uint64_t v15 = *(void *)(*(void *)(v3 + 56) + 8 * v11);
    uint64_t v16 = *(id *)(*(void *)(v3 + 48) + 8 * v11);
    swift_unknownObjectRetain();
    uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v16);
    char v19 = v18;

    if ((v19 & 1) == 0)
    {
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t v20 = [*(id *)(*(void *)(a2 + 56) + 8 * v17) isEqual:v15];
    uint64_t result = swift_unknownObjectRelease();
    if ((v20 & 1) == 0) {
      return 0;
    }
  }
  uint64_t v14 = v12 + 3;
  if (v14 >= v9) {
    return 1;
  }
  int64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    uint64_t v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    uint64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    int64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt.hash(into:)()
{
  swift_bridgeObjectRetain();
  uint64_t v0 = OUTLINED_FUNCTION_56_0();
  specialized Dictionary<>.hash(into:)(v0, v1);
  return swift_bridgeObjectRelease();
}

Swift::Int AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt.hashValue.getter(uint64_t a1)
{
  OUTLINED_FUNCTION_36_2();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v3, a1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt(void *a1, void *a2)
{
  return static AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt.__derived_struct_equals(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt()
{
  return AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt()
{
  return AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.bundleIdentifier.getter()
{
  return OUTLINED_FUNCTION_56_0();
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.policyMetadata.getter()
{
  return _objc_retain_x3();
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.init(bundleIdentifier:actionMetadata:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized Collection.first.getter(a3);
  if (v5)
  {
    swift_bridgeObjectRelease();
    specialized _NativeDictionary.mapValues<A>(_:)(a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  return a1;
}

uint64_t static AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  BOOL v9 = a1 == a5 && a2 == a6;
  if (!v9 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(a3, a7) & 1) == 0)
  {
    return 0;
  }
  type metadata accessor for LNActionParameterMetadata(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  OUTLINED_FUNCTION_56_0();
  return static NSObject.== infix(_:_:)() & 1;
}

void AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, a4);
  swift_bridgeObjectRelease();
  id v8 = a5;
  NSObject.hash(into:)();
}

Swift::Int AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  OUTLINED_FUNCTION_36_2();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v8, a3);
  swift_bridgeObjectRelease();
  id v6 = a4;
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails(uint64_t *a1, uint64_t *a2)
{
  return static AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.__derived_struct_equals(_:_:)(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails()
{
  return AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(void **)(v0 + 24));
}

void protocol witness for Hashable.hash(into:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails(uint64_t a1)
{
  AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void **)(v1 + 24));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void **)(v0 + 24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v5, v2);
  swift_bridgeObjectRelease();
  id v3 = v1;
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.configuratorPerBundleIdentifier.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.configuratorPerBundleIdentifier.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.configuratorPerBundleIdentifier.modify())()
{
  return static SiriLinkSuggestionsFeatureFlags.forceEnabled.modify;
}

id AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.lock.getter()
{
  return *(id *)(v0 + 64);
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.init(linkClient:)(long long *a1)
{
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 64) = [objc_allocWithZone((Class)NSLock) init];
  outlined init with take of LinkDialogIdProvider(a1, v1 + 24);
  return v1;
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.getConfiguratorsForAllApplications()()
{
  uint64_t v1 = (void *)v0[8];
  [v1 lock];
  uint64_t v2 = v0 + 2;
  swift_beginAccess();
  id v3 = (void *)v0[2];
  if (v3)
  {
    swift_bridgeObjectRetain();
LABEL_22:
    objc_msgSend(v1, "unlock", v40);
    return (uint64_t)v3;
  }
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  __swift_project_boxed_opaque_existential_1(v0 + 3, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  if (!v6)
  {
    id v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_22;
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 + 16);
  if (!v8)
  {
    id v3 = &_swiftEmptyDictionarySingleton;
LABEL_21:
    swift_bridgeObjectRelease();
    *uint64_t v2 = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  uint64_t v41 = v0 + 2;
  uint64_t v42 = v1;
  swift_bridgeObjectRetain();
  uint64_t v40 = v7;
  BOOL v9 = (uint64_t *)(v7 + 40);
  id v3 = &_swiftEmptyDictionarySingleton;
  while (1)
  {
    uint64_t v11 = *(v9 - 1);
    uint64_t v10 = *v9;
    swift_bridgeObjectRetain();
    uint64_t v12 = AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.getCandidateApplicationDetails(for:)(v11, v10);
    if (!v13)
    {
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    uint64_t v16 = v12;
    uint64_t v17 = v13;
    uint64_t v18 = v14;
    char v19 = v15;
    type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator();
    uint64_t v20 = (void *)swift_allocObject();
    v20[5] = v19;
    v20[6] = 0xD000000000000016;
    v20[7] = 0x800000000004A610;
    void v20[2] = v16;
    v20[3] = v17;
    v20[4] = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v43 = v19;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v22 = v11;
    Swift::Bool v23 = isUniquelyReferenced_nonNull_native;
    unint64_t v44 = v3;
    uint64_t v24 = v22;
    unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v10);
    uint64_t v27 = v3[2];
    BOOL v28 = (v26 & 1) == 0;
    Swift::Int v29 = v27 + v28;
    if (__OFADD__(v27, v28)) {
      break;
    }
    unint64_t v30 = v25;
    char v31 = v26;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator>);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v23, v29))
    {
      unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v10);
      if ((v31 & 1) != (v33 & 1)) {
        goto LABEL_25;
      }
      unint64_t v30 = v32;
    }
    id v3 = v44;
    if (v31)
    {
      uint64_t v34 = v44[7];
      swift_release();
      *(void *)(v34 + 8 * v30) = v20;
    }
    else
    {
      v44[(v30 >> 6) + 8] |= 1 << v30;
      unint64_t v35 = (uint64_t *)(v44[6] + 16 * v30);
      *unint64_t v35 = v24;
      v35[1] = v10;
      *(void *)(v44[7] + 8 * v30) = v20;
      uint64_t v36 = v44[2];
      BOOL v37 = __OFADD__(v36, 1);
      uint64_t v38 = v36 + 1;
      if (v37) {
        goto LABEL_24;
      }
      uint64_t v44[2] = v38;
      swift_bridgeObjectRetain();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_30_0();
    swift_bridgeObjectRelease();
LABEL_17:
    v9 += 2;
    if (!--v8)
    {
      swift_bridgeObjectRelease();
      uint64_t v2 = v41;
      uint64_t v1 = v42;
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.getCandidateApplicationDetails(for:)(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t v6 = v2 + 3;
  uint64_t v7 = v2[6];
  uint64_t v8 = v2[7];
  __swift_project_boxed_opaque_existential_1(v2 + 3, v7);
  unint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 32))(a1, a2, v7, v8);
  unint64_t v10 = v9;
  if (v9 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_3;
    }
  }
  else if (*(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFFF8)))
  {
LABEL_3:
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo14LNAutoShortcutCG_SSs5NeverOTg5075_s25SiriLinkSuggestionsPlugin013AutoShortcutsC22OwnerDefinitionFactoryC0E22e188PhraseResolverC16resolveParameter9parameter10suggestion11interaction11environmentSayypG0aC3Kit010ResolvableN0C_AL19CandidateSuggestion_pAL11Interaction_pAL19EnvironmentSnapshot_ptYaFSSSo06D57J0Ccfu3_33_727fba25be9f1dfe045bd6ea49c3456dASSSTf3nnnpk_nTf1cn_nTm(v10);
    uint64_t v12 = v11;
    swift_bridgeObjectRelease();
    specialized Set.init<A>(_:)(v12);
    specialized _copyCollectionToContiguousArray<A>(_:)();
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    uint64_t v16 = v3[6];
    uint64_t v15 = v3[7];
    __swift_project_boxed_opaque_existential_1(v6, v16);
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 40))(a1, a2, v14, v16, v15);
    swift_release();
    swift_bridgeObjectRetain();
    return AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.init(bundleIdentifier:actionMetadata:)(a1, a2, v17);
  }
  swift_bridgeObjectRelease();
  return OUTLINED_FUNCTION_49_1();
}

void *AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator.__allocating_init(candidateApplicationDetails:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (void *)swift_allocObject();
  result[6] = 0xD000000000000016;
  result[7] = 0x800000000004A610;
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  return result;
}

void *AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.getConfigurators(for:)()
{
  swift_retain();
  unint64_t v0 = OUTLINED_FUNCTION_25_3();
  uint64_t v2 = specialized Sequence.compactMap<A>(_:)(v0, v1);
  return specialized Dictionary.init<A>(uniqueKeysWithValues:)((uint64_t)v2);
}

uint64_t closure #1 in AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.getConfigurators(for:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v51 = a3;
  uint64_t v50 = a2;
  uint64_t v4 = type metadata accessor for CoreSignalTypes();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v48[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CoreSignalTypes?, CoreSignalTypes?));
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  uint64_t v11 = &v48[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CoreSignalTypes?);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = &v48[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = &v48[-v17];
  __chkstk_darwin(v16);
  uint64_t v20 = &v48[-v19];
  uint64_t v52 = *a1;
  Signal.signalType.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SignalType);
  int v21 = swift_dynamicCast();
  __swift_storeEnumTagSinglePayload((uint64_t)v20, v21 ^ 1u, 1, v4);
  (*(void (**)(unsigned char *, void, uint64_t))(v5 + 104))(v18, enum case for CoreSignalTypes.app(_:), v4);
  __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v4);
  uint64_t v22 = (uint64_t)&v11[*(int *)(v9 + 56)];
  outlined init with copy of CoreSignalTypes?((uint64_t)v20, (uint64_t)v11);
  outlined init with copy of CoreSignalTypes?((uint64_t)v18, v22);
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v4) == 1)
  {
    outlined destroy of ToolInvocation?((uint64_t)v18, &demangling cache variable for type metadata for CoreSignalTypes?);
    if (__swift_getEnumTagSinglePayload(v22, 1, v4) == 1)
    {
      outlined destroy of ToolInvocation?((uint64_t)v11, &demangling cache variable for type metadata for CoreSignalTypes?);
      outlined destroy of ToolInvocation?((uint64_t)v20, &demangling cache variable for type metadata for CoreSignalTypes?);
      uint64_t v23 = v52;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of CoreSignalTypes?((uint64_t)v11, (uint64_t)v15);
  if (__swift_getEnumTagSinglePayload(v22, 1, v4) == 1)
  {
    outlined destroy of ToolInvocation?((uint64_t)v18, &demangling cache variable for type metadata for CoreSignalTypes?);
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v15, v4);
LABEL_6:
    outlined destroy of ToolInvocation?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for (CoreSignalTypes?, CoreSignalTypes?));
    outlined destroy of ToolInvocation?((uint64_t)v20, &demangling cache variable for type metadata for CoreSignalTypes?);
    uint64_t v23 = v52;
    goto LABEL_12;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 32))(v7, v22, v4);
  _s18SiriSuggestionsKit12DefaultOwnerCAcA0E0AAWlTm_0(&lazy protocol witness table cache variable for type CoreSignalTypes and conformance CoreSignalTypes, 255, (void (*)(uint64_t))&type metadata accessor for CoreSignalTypes);
  int v49 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v24 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
  v24(v7, v4);
  outlined destroy of ToolInvocation?((uint64_t)v18, &demangling cache variable for type metadata for CoreSignalTypes?);
  v24(v15, v4);
  outlined destroy of ToolInvocation?((uint64_t)v11, &demangling cache variable for type metadata for CoreSignalTypes?);
  outlined destroy of ToolInvocation?((uint64_t)v20, &demangling cache variable for type metadata for CoreSignalTypes?);
  uint64_t v23 = v52;
  if (v49)
  {
LABEL_8:
    if (one-time initialization token for autoshortcutsSuggestions != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.autoshortcutsSuggestions);
    swift_retain_n();
    char v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      BOOL v28 = (uint8_t *)swift_slowAlloc();
      v53[0] = swift_slowAlloc();
      *(_DWORD *)BOOL v28 = 136315138;
      uint64_t v54 = v23;
      type metadata accessor for Signal();
      _s18SiriSuggestionsKit12DefaultOwnerCAcA0E0AAWlTm_0(&lazy protocol witness table cache variable for type Signal and conformance Signal, 255, (void (*)(uint64_t))&type metadata accessor for Signal);
      uint64_t v23 = v52;
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v26, v27, "Getting app specific autoshortcuts suggestions for %s", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    char v33 = v51;
    uint64_t v42 = AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.getConfiguratorsForAllApplications()();
    uint64_t v43 = Signal.signalValue.getter();
    uint64_t v45 = specialized Dictionary.subscript.getter(v43, v44, v42);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v45)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CandidateSuggestionConfigurator>);
      uint64_t v46 = swift_allocObject();
      *(_OWORD *)(v46 + 16) = xmmword_47FC0;
      *(void *)(v46 + 56) = type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator();
      *(void *)(v46 + 64) = _s18SiriSuggestionsKit12DefaultOwnerCAcA0E0AAWlTm_0(&lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator, v47, (void (*)(uint64_t))type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator);
      *(void *)(v46 + 32) = v45;
      *char v33 = v23;
      v33[1] = v46;
      return swift_retain();
    }
    goto LABEL_21;
  }
LABEL_12:
  type metadata accessor for Signal();
  static Signal.HomeScreenTier1.getter();
  char v31 = static Signal.== infix(_:_:)();
  uint64_t result = swift_release();
  char v33 = v51;
  if ((v31 & 1) == 0)
  {
LABEL_21:
    *char v33 = 0;
    v33[1] = 0;
    return result;
  }
  if (one-time initialization token for autoshortcutsSuggestions != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  __swift_project_value_buffer(v34, (uint64_t)static Logger.autoshortcutsSuggestions);
  unint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v35, v36))
  {
    BOOL v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v37 = 0;
    _os_log_impl(&dword_0, v35, v36, "Getting homescreen tier 1 autoshortcuts suggestions", v37, 2u);
    swift_slowDealloc();
  }

  AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.getConfiguratorsForAllApplications()();
  swift_retain();
  specialized _copyCollectionToContiguousArray<A>(_:)();
  unint64_t v39 = v38;
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(v39);
  uint64_t v41 = v40;
  uint64_t result = swift_release();
  *char v33 = v23;
  v33[1] = v41;
  return result;
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.deinit()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);

  return v0;
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.__deallocating_deinit()
{
  AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.deinit();
  return _swift_deallocClassInstance(v0, 72, 7);
}

void *protocol witness for ConfiguratorProvider.getConfigurators(for:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts()
{
  return AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.getConfigurators(for:)();
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator.candidateApplicationDetails.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v3 = v2;
  return v1;
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator.suggestionId.getter()
{
  return OUTLINED_FUNCTION_25_3();
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator.init(candidateApplicationDetails:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = 0xD000000000000016;
  v4[7] = 0x800000000004A610;
  v4[2] = a1;
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = a4;
  return LinkSuggestionsOwnerDefinitionFactory.deinit();
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator.updateContext(context:signal:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_7((uint64_t)AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator.updateContext(context:signal:));
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator.updateContext(context:signal:)()
{
  OUTLINED_FUNCTION_20_0();
  uint64_t v1 = (void *)v0[2];
  uint64_t v2 = (void *)v0[3];
  v0[4] = *v1;
  v0[5] = v1[1];
  v0[6] = swift_getObjectType();
  v0[7] = v2[2];
  v0[8] = v2[3];
  v0[9] = v2[4];
  v0[10] = v2[5];
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator.updateContext(context:signal:), v4, v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_8();
  Context.setCandidateApplicationDetails(_:)(*(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void **)(v0 + 80));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t Context.setCandidateApplicationDetails(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (one-time initialization token for autoshortcutsOwner != -1) {
    swift_once();
  }
  uint64_t v8 = static LinkSuggestionsOwners.autoshortcutsOwner;
  uint64_t v9 = type metadata accessor for DefaultOwner();
  _OWORD v17[3] = v9;
  uint64_t v10 = _s18SiriSuggestionsKit12DefaultOwnerCAcA0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DefaultOwner and conformance DefaultOwner, 255, (void (*)(uint64_t))&type metadata accessor for DefaultOwner);
  v17[4] = v10;
  v17[0] = v8;
  __swift_project_boxed_opaque_existential_1(v17, v9);
  uint64_t v16[3] = v9;
  v16[4] = *(void *)(v10 + 8);
  __swift_allocate_boxed_opaque_existential_1(v16);
  OUTLINED_FUNCTION_23();
  (*(void (**)(void))(v11 + 16))();
  _OWORD v15[3] = &type metadata for AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails;
  uint64_t v12 = (void *)swift_allocObject();
  v15[0] = v12;
  v12[2] = a1;
  Swift::Int v12[3] = a2;
  v12[4] = a3;
  v12[5] = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v13 = a4;
  Context.setParam(for:key:value:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
}

uint64_t static AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a2[4];
  BOOL v4 = a1[2] == a2[2] && a1[3] == a2[3];
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v2, v3) & 1) == 0)
  {
    return 0;
  }
  type metadata accessor for LNActionParameterMetadata(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  OUTLINED_FUNCTION_25_3();
  return static NSObject.== infix(_:_:)() & 1;
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator.__deallocating_deinit()
{
  AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator.deinit();
  return _swift_deallocClassInstance(v0, 64, 7);
}

uint64_t protocol witness for CandidateSuggestionConfigurator.suggestionId.getter in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for CandidateSuggestionConfigurator.updateContext(context:signal:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = _s25SiriLinkSuggestionsPlugin17DefaultToolClientC20toolSessionSetupTask33_4798BCE20D0F3642FE2DAC187424D220LLScTy0F3Kit0f9ExecutionI0_ps5Error_pGvpfiAfG_pyYaKcfU_TATQ0__0;
  return AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator.updateContext(context:signal:)(a1);
}

uint64_t protocol witness for CandidateSuggestionConfigurator.isValid(signal:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for CandidateSuggestionConfigurator.isValid(signal:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator;
  return CandidateSuggestionConfigurator.isValid(signal:)(a1, a2, a3);
}

uint64_t protocol witness for CandidateSuggestionConfigurator.isValid(signal:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator()
{
  OUTLINED_FUNCTION_8();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_12();
  *BOOL v4 = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_33_2();
  return v5(v2);
}

SiriLinkSuggestionsPlugin::AutoShortcutsSuggestionsOwnerDefinitionFactory::ResolvedPhrase::CodingKeys_optional __swiftcall AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  object = stringValue._object;
  BOOL v2 = stringValue._countAndFlagsBits == 0x657361726870 && stringValue._object == (void *)0xE600000000000000;
  if (v2 || (uint64_t countAndFlagsBits = stringValue._countAndFlagsBits, (OUTLINED_FUNCTION_2_4() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (countAndFlagsBits == 0xD000000000000010 && object == (void *)0x800000000004ACF0 {
         || (OUTLINED_FUNCTION_2_4() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return (SiriLinkSuggestionsPlugin::AutoShortcutsSuggestionsOwnerDefinitionFactory::ResolvedPhrase::CodingKeys_optional)1;
  }
  else if (countAndFlagsBits == 0x726F68536F747561 && object == (void *)0xEC00000074756374)
  {
    swift_bridgeObjectRelease();
    return (SiriLinkSuggestionsPlugin::AutoShortcutsSuggestionsOwnerDefinitionFactory::ResolvedPhrase::CodingKeys_optional)2;
  }
  else
  {
    OUTLINED_FUNCTION_38_1(0x68536F747561);
    char v6 = OUTLINED_FUNCTION_2_4();
    swift_bridgeObjectRelease();
    if (v6) {
      return (SiriLinkSuggestionsPlugin::AutoShortcutsSuggestionsOwnerDefinitionFactory::ResolvedPhrase::CodingKeys_optional)2;
    }
    else {
      return (SiriLinkSuggestionsPlugin::AutoShortcutsSuggestionsOwnerDefinitionFactory::ResolvedPhrase::CodingKeys_optional)3;
    }
  }
}

Swift::Int AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0x657361726870;
  }
  if (a1 == 1) {
    return 0xD000000000000010;
  }
  return 0x726F68536F747561;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys()
{
  return AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys.hashValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys()
{
  return AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys.stringValue.getter(*v0);
}

SiriLinkSuggestionsPlugin::AutoShortcutsSuggestionsOwnerDefinitionFactory::ResolvedPhrase::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys@<W0>(uint64_t a1@<X0>, SiriLinkSuggestionsPlugin::AutoShortcutsSuggestionsOwnerDefinitionFactory::ResolvedPhrase::CodingKeys_optional *a2@<X8>)
{
  result.value = AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v29 = type metadata accessor for NSCodingAdaptor();
  OUTLINED_FUNCTION_4_0();
  uint64_t v27 = v4;
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_14_0();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys>);
  OUTLINED_FUNCTION_4_0();
  uint64_t v28 = v10;
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_14_0();
  uint64_t v14 = v13 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys();
  uint64_t v15 = (uint64_t)a1;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    static CodableWrapper.decode<A, B>(forType:forKey:container:)();
    uint64_t v25 = v14;
    NSCodingAdaptor.data.getter();
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v8, v29);
    self;
    uint64_t v16 = swift_dynamicCastObjCClass();
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v20 = v19;
      uint64_t v30 = v18;
      uint64_t v21 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v23 = v22;
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v25, v9);
      uint64_t result = __swift_destroy_boxed_opaque_existential_1(v15);
      *a2 = v30;
      a2[1] = v20;
      a2[2] = v21;
      a2[3] = v23;
      a2[4] = v17;
      return result;
    }
    swift_unknownObjectRelease();
    lazy protocol witness table accessor for type AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors();
    swift_allocError();
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v14, v9);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys>);
  OUTLINED_FUNCTION_4_0();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_14_0();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 2;
  uint64_t v5 = *(void **)(v2 + 32);
  v13[3] = type metadata accessor for NSCodingAdaptor();
  void v13[4] = _s18SiriSuggestionsKit12DefaultOwnerCAcA0E0AAWlTm_0(&lazy protocol witness table cache variable for type NSCodingAdaptor and conformance NSCodingAdaptor, 255, (void (*)(uint64_t))&type metadata accessor for NSCodingAdaptor);
  __swift_allocate_boxed_opaque_existential_1(v13);
  id v6 = v5;
  NSCodingAdaptor.init(data:)();
  static CodableWrapper.encode<A>(to:forKey:instance:)();
  if (v12)
  {
    uint64_t v7 = OUTLINED_FUNCTION_47_1();
    v8(v7);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    LOBYTE(v13[0]) = 0;
    OUTLINED_FUNCTION_48_1();
    LOBYTE(v13[0]) = 1;
    OUTLINED_FUNCTION_48_1();
    uint64_t v10 = OUTLINED_FUNCTION_47_1();
    return v11(v10);
  }
}

double protocol witness for Decodable.init(from:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase(void *a1)
{
  return AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.encode(to:)(a1);
}

id static AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata.== infix(_:_:)(void *a1, uint64_t a2)
{
  return [a1 isEqual:a2];
}

void AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata.hash(into:)(int a1, id a2)
{
}

Swift::Int AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata.hashValue.getter(void *a1)
{
  return Hasher._finalize()();
}

id protocol witness for static Equatable.== infix(_:_:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata(void **a1, uint64_t *a2)
{
  return static AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata()
{
  return AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata(int a1)
{
  AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)((Swift::UInt)[v1 hash]);
  return Hasher._finalize()();
}

Swift::Int AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static OwnerDefinitionFactory.createOwnerDefinitions(builderFactory:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory(uint64_t a1, uint64_t a2)
{
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *long long v5 = v2;
  v5[1] = protocol witness for SignalSubscriber.getAsyncLookupSubscriptions() in conformance LinkSuggestionsGenerator;
  return static AutoShortcutsSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:)(a1, a2);
}

uint64_t CandidateSuggestion.resolvedPhrase.getter@<X0>(uint64_t a1@<X8>)
{
  return DialogProperties.resolvedPhrase.getter((uint64_t (*)(void))&dispatch thunk of CandidateSuggestion.params.getter, a1);
}

uint64_t DialogProperties.resolvedPhrase.getter@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1();
  specialized Dictionary.subscript.getter(0xD000000000000013, 0x800000000004B6E0, v3, &v13);
  swift_bridgeObjectRelease();
  if (!v14)
  {
    uint64_t result = outlined destroy of ToolInvocation?((uint64_t)&v13, &demangling cache variable for type metadata for Any?);
    goto LABEL_5;
  }
  uint64_t result = swift_dynamicCast();
  if (!result)
  {
LABEL_5:
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    long long v8 = 0uLL;
    goto LABEL_6;
  }
  uint64_t v5 = v9;
  uint64_t v6 = v10;
  uint64_t v7 = v11;
  long long v8 = v12;
LABEL_6:
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v7;
  *(_OWORD *)(a2 + 24) = v8;
  return result;
}

uint64_t LNActionMetadata.isConditionallyEnabled.getter()
{
  id v1 = [v0 systemProtocols];
  type metadata accessor for LNActionParameterMetadata(0, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v3 = [self conditionallyEnabledProtocol];
  char v4 = specialized Sequence<>.contains(_:)((uint64_t)v3, v2);
  swift_bridgeObjectRelease();

  return v4 & 1;
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8)) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<LNSystemProtocolIdentifier, AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  id v3 = (void *)result;
  int64_t v4 = 0;
  uint64_t v5 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v10 = result + 64;
  if (!v8) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v11 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    uint64_t v16 = *(void **)(*(void *)(a1 + 48) + 8 * i);
    uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8 * i);
    *(void *)(v10 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(void *)(v3[6] + 8 * i) = v16;
    *(void *)(v3[7] + 8 * i) = v17;
    uint64_t v18 = v3[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (v19)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    long long v3[2] = v20;
    id v21 = v16;
    uint64_t result = swift_unknownObjectRetain();
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_24;
    }
    if (v13 >= v9) {
      return (uint64_t)v3;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v13);
    ++v4;
    if (!v14)
    {
      int64_t v4 = v13 + 1;
      if (v13 + 1 >= v9) {
        return (uint64_t)v3;
      }
      unint64_t v14 = *(void *)(v5 + 8 * v4);
      if (!v14)
      {
        int64_t v4 = v13 + 2;
        if (v13 + 2 >= v9) {
          return (uint64_t)v3;
        }
        unint64_t v14 = *(void *)(v5 + 8 * v4);
        if (!v14) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v8 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v9) {
    return (uint64_t)v3;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
    int64_t v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v9) {
      return (uint64_t)v3;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t i;
  BOOL v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;

  unint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = 0;
  uint64_t v30 = a1;
  char v31 = (void *)result;
  unint64_t v8 = *(void *)(a1 + 64);
  uint64_t v7 = a1 + 64;
  uint64_t v6 = v8;
  int64_t v9 = 1 << *(unsigned char *)(v7 - 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v6;
  uint64_t v27 = v7;
  uint64_t v28 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v29 = result + 64;
  if ((v10 & v6) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v32 = v2;
  long long v12 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v12 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v5 << 6))
  {
    uint64_t v17 = (uint64_t *)(*(void *)(v30 + 48) + 16 * i);
    uint64_t v18 = *v17;
    BOOL v19 = v17[1];
    uint64_t v20 = *(id *)(*(void *)(v30 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    id v21 = [v20 systemProtocolMetadata];
    type metadata accessor for LNSystemProtocolIdentifier(0);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LNSystemProtocolMetadata);
    _s18SiriSuggestionsKit12DefaultOwnerCAcA0E0AAWlTm_0(&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, 255, type metadata accessor for LNSystemProtocolIdentifier);
    uint64_t v22 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v23 = specialized _NativeDictionary.mapValues<A>(_:)(v22);
    unint64_t v2 = v32;
    swift_bridgeObjectRelease();

    *(void *)(v29 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t result = (uint64_t)v31;
    uint64_t v24 = (void *)(v31[6] + 16 * i);
    *uint64_t v24 = v18;
    v24[1] = v19;
    *(void *)(v31[7] + 8 * i) = v23;
    uint64_t v25 = v31[2];
    unint64_t v14 = __OFADD__(v25, 1);
    char v26 = v25 + 1;
    if (v14)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    void v31[2] = v26;
    if (v11) {
      goto LABEL_4;
    }
LABEL_5:
    unint64_t v14 = __OFADD__(v5++, 1);
    if (v14) {
      goto LABEL_25;
    }
    if (v5 >= v28) {
      return result;
    }
    int64_t v15 = *(void *)(v27 + 8 * v5);
    if (!v15) {
      break;
    }
LABEL_15:
    unint64_t v32 = v2;
    unint64_t v11 = (v15 - 1) & v15;
  }
  uint64_t v16 = v5 + 1;
  if (v5 + 1 >= v28) {
    return result;
  }
  int64_t v15 = *(void *)(v27 + 8 * v16);
  if (v15) {
    goto LABEL_14;
  }
  uint64_t v16 = v5 + 2;
  if (v5 + 2 >= v28) {
    return result;
  }
  int64_t v15 = *(void *)(v27 + 8 * v16);
  if (v15) {
    goto LABEL_14;
  }
  uint64_t v16 = v5 + 3;
  if (v5 + 3 >= v28) {
    return result;
  }
  int64_t v15 = *(void *)(v27 + 8 * v16);
  if (v15)
  {
LABEL_14:
    uint64_t v5 = v16;
    goto LABEL_15;
  }
  while (1)
  {
    uint64_t v5 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v5 >= v28) {
      return result;
    }
    int64_t v15 = *(void *)(v27 + 8 * v5);
    ++v16;
    if (v15) {
      goto LABEL_15;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  swift_bridgeObjectRetain_n();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v4 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v4);
    *a1 = v4;
  }
  uint64_t v6 = *(void *)(v4 + 16);
  v8[0] = v4 + 32;
  v8[1] = v6;
  swift_bridgeObjectRetain();
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v8, a2);
  specialized ContiguousArray._endMutation()();
  return swift_bridgeObjectRelease_n();
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, uint64_t a2)
{
  Swift::Int v5 = a1[1];
  swift_bridgeObjectRetain_n();
  Swift::Int v6 = _minimumMergeRunLength(_:)(v5);
  if (v6 >= v5)
  {
    if ((v5 & 0x8000000000000000) == 0)
    {
      if (v5) {
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v5, 1, a1, a2);
      }
      swift_bridgeObjectRelease_n();
      return swift_bridgeObjectRelease();
    }
    goto LABEL_208;
  }
  Swift::Int v171 = v6;
  uint64_t v178 = v2;
  uint64_t v7 = specialized static Array._allocateUninitialized(_:)(v5 / 2);
  uint64_t v174 = v5;
  v175 = v8;
  uint64_t v188 = v7;
  uint64_t v185 = a2;
  v170 = a1;
  if (v5 <= 0)
  {
    long long v12 = (char *)_swiftEmptyArrayStorage;
    unint64_t v106 = _swiftEmptyArrayStorage[2];
LABEL_170:
    v158 = v12;
    if (v106 < 2)
    {
LABEL_183:
      swift_bridgeObjectRelease();
      if (v174 >= -1) {
        goto LABEL_184;
      }
LABEL_213:
      __break(1u);
LABEL_214:
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_215:
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_216:
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_217:
      uint64_t result = swift_bridgeObjectRelease_n();
      __break(1u);
      return result;
    }
    uint64_t v159 = *v170;
    uint64_t v187 = *v170;
    while (1)
    {
      unint64_t v160 = v106 - 2;
      if (v106 < 2) {
        break;
      }
      if (!v159) {
        goto LABEL_217;
      }
      uint64_t v161 = *(void *)&v158[16 * v160 + 32];
      uint64_t v162 = *(void *)&v158[16 * v106 + 24];
      v163 = (char *)(v159 + 8 * v161);
      v164 = (char *)(v159 + 8 * *(void *)&v158[16 * v106 + 16]);
      unint64_t v165 = v159 + 8 * v162;
      swift_bridgeObjectRetain();
      specialized _merge<A>(low:mid:high:buffer:by:)(v163, v164, v165, v175, v185);
      if (v178) {
        goto LABEL_167;
      }
      if (v162 < v161) {
        goto LABEL_203;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        v158 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v158);
      }
      if (v160 >= *((void *)v158 + 2)) {
        goto LABEL_204;
      }
      v166 = &v158[16 * v160 + 32];
      *(void *)v166 = v161;
      *((void *)v166 + 1) = v162;
      unint64_t v167 = *((void *)v158 + 2);
      if (v106 > v167) {
        goto LABEL_205;
      }
      memmove(&v158[16 * v106 + 16], &v158[16 * v106 + 32], 16 * (v167 - v106));
      *((void *)v158 + 2) = v167 - 1;
      unint64_t v106 = v167 - 1;
      uint64_t v159 = v187;
      if (v167 <= 2) {
        goto LABEL_183;
      }
    }
LABEL_202:
    __break(1u);
LABEL_203:
    __break(1u);
LABEL_204:
    __break(1u);
LABEL_205:
    __break(1u);
LABEL_206:
    __break(1u);
LABEL_207:
    __break(1u);
LABEL_208:
    __break(1u);
LABEL_209:
    __break(1u);
LABEL_210:
    __break(1u);
LABEL_211:
    __break(1u);
    goto LABEL_212;
  }
  Swift::Int v9 = v5;
  uint64_t v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v186 = a2 + 56;
  uint64_t v169 = *a1 - 8;
  long long v12 = (char *)_swiftEmptyArrayStorage;
  uint64_t v181 = v11;
  while (2)
  {
    v172 = v12;
    uint64_t v13 = v10 + 1;
    uint64_t v179 = v10;
    if (v10 + 1 >= v9)
    {
      uint64_t v30 = v10 + 1;
    }
    else
    {
      unint64_t v14 = *(void **)(v11 + 8 * v10);
      id v15 = *(id *)(v11 + 8 * v13);
      id v16 = v14;
      a2 = v185;
      id v17 = v16;
      id v18 = [v15 actionIdentifier];
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;

      specialized Set.contains(_:)(v19, v21, v185);
      LOBYTE(v19) = v22;
      swift_bridgeObjectRelease();
      id v23 = [v17 actionIdentifier];
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v26 = v25;

      specialized Set.contains(_:)(v24, v26, v185);
      char v28 = v27;

      swift_bridgeObjectRelease();
      uint64_t v29 = v10 + 2;
      if (v19)
      {
        if (v29 < v174)
        {
          int v182 = 0;
          uint64_t v11 = v181;
LABEL_15:
          while (1)
          {
            char v31 = *(void **)(v11 + 8 * v13);
            id v32 = *(id *)(v11 + 8 * v29);
            id v33 = v31;
            id v34 = [v32 actionIdentifier];
            uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v37 = v36;

            if (*(void *)(a2 + 16))
            {
              Hasher.init(_seed:)();
              String.hash(into:)();
              Swift::Int v38 = Hasher._finalize()();
              uint64_t v39 = -1 << *(unsigned char *)(a2 + 32);
              uint64_t v40 = a2;
              unint64_t v41 = v38 & ~v39;
              if ((*(void *)(v186 + ((v41 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v41))
              {
                uint64_t v42 = *(void *)(v40 + 48);
                uint64_t v43 = (void *)(v42 + 16 * v41);
                BOOL v44 = *v43 == v35 && v43[1] == v37;
                if (v44 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                  goto LABEL_22;
                }
                uint64_t v46 = ~v39;
                unint64_t v47 = (v41 + 1) & v46;
                if ((*(void *)(v186 + ((v47 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v47)) {
                  break;
                }
              }
            }
            char v45 = 0;
LABEL_32:
            swift_bridgeObjectRelease();
            id v50 = [v33 actionIdentifier];
            uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v53 = v52;

            if (*(void *)(v185 + 16)
              && (Hasher.init(_seed:)(),
                  String.hash(into:)(),
                  Swift::Int v54 = Hasher._finalize()(),
                  uint64_t v55 = -1 << *(unsigned char *)(v185 + 32),
                  unint64_t v56 = v54 & ~v55,
                  ((*(void *)(v186 + ((v56 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v56) & 1) != 0))
            {
              uint64_t v57 = *(void *)(v185 + 48);
              unint64_t v58 = (void *)(v57 + 16 * v56);
              BOOL v59 = *v58 == v51 && v58[1] == v53;
              if (!v59 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              {
                uint64_t v61 = ~v55;
                do
                {
                  unint64_t v56 = (v56 + 1) & v61;
                  if (((*(void *)(v186 + ((v56 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v56) & 1) == 0) {
                    goto LABEL_51;
                  }
                  os_log_type_t v62 = (void *)(v57 + 16 * v56);
                  BOOL v63 = *v62 == v51 && v62[1] == v53;
                }
                while (!v63 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
              }

              swift_bridgeObjectRelease();
              a2 = v185;
              if (v45) {
                goto LABEL_52;
              }
              uint64_t v11 = v181;
              if (!v182) {
                goto LABEL_65;
              }
              uint64_t v60 = v29 + 1;
              uint64_t v13 = v29;
              uint64_t v29 = v60;
              if (v60 >= v174) {
                goto LABEL_56;
              }
            }
            else
            {
LABEL_51:

              swift_bridgeObjectRelease();
              a2 = v185;
LABEL_52:
              uint64_t v11 = v181;
              if (v182)
              {
                uint64_t v60 = v29;
LABEL_56:
                uint64_t v29 = v60;
                uint64_t v64 = v179;
                if (v60 < v179)
                {
LABEL_212:
                  __break(1u);
                  goto LABEL_213;
                }
LABEL_59:
                if (v64 < v29)
                {
                  unint64_t v65 = (uint64_t *)(v169 + 8 * v29);
                  uint64_t v66 = v29;
                  uint64_t v67 = v64;
                  uint64_t v68 = (uint64_t *)(v11 + 8 * v64);
                  do
                  {
                    if (v67 != --v66)
                    {
                      if (!v11) {
                        goto LABEL_216;
                      }
                      uint64_t v69 = *v68;
                      uint64_t *v68 = *v65;
                      *unint64_t v65 = v69;
                    }
                    ++v67;
                    --v65;
                    ++v68;
                  }
                  while (v67 < v66);
                }
                goto LABEL_65;
              }
              uint64_t v30 = v29 + 1;
              uint64_t v13 = v29;
              uint64_t v29 = v30;
              if (v30 >= v174) {
                goto LABEL_66;
              }
            }
          }
          while (1)
          {
            os_log_type_t v48 = (void *)(v42 + 16 * v47);
            BOOL v49 = *v48 == v35 && v48[1] == v37;
            if (v49 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              break;
            }
            char v45 = 0;
            unint64_t v47 = (v47 + 1) & v46;
            if (((*(void *)(v186 + ((v47 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v47) & 1) == 0) {
              goto LABEL_32;
            }
          }
LABEL_22:
          char v45 = 1;
          goto LABEL_32;
        }
        uint64_t v30 = v10 + 2;
        uint64_t v11 = v181;
      }
      else
      {
        if (v28)
        {
          uint64_t v11 = v181;
          if (v29 < v174)
          {
            int v182 = 1;
            goto LABEL_15;
          }
          uint64_t v64 = v10;
          goto LABEL_59;
        }
        uint64_t v11 = v181;
        if (v29 < v174)
        {
          int v182 = 0;
          goto LABEL_15;
        }
LABEL_65:
        uint64_t v30 = v29;
      }
    }
LABEL_66:
    if (v30 >= v174) {
      goto LABEL_114;
    }
    if (__OFSUB__(v30, v179)) {
      goto LABEL_207;
    }
    if (v30 - v179 >= v171) {
      goto LABEL_114;
    }
    uint64_t v70 = v179 + v171;
    if (__OFADD__(v179, v171)) {
      goto LABEL_210;
    }
    if (v70 >= v174) {
      uint64_t v70 = v174;
    }
    if (v70 < v179) {
      goto LABEL_211;
    }
    uint64_t v173 = v70;
    if (v30 == v70) {
      goto LABEL_114;
    }
    do
    {
      uint64_t v71 = *(void **)(v11 + 8 * v30);
      uint64_t v176 = v30;
      while (1)
      {
        uint64_t v72 = v30 - 1;
        unint64_t v73 = *(void **)(v11 + 8 * (v30 - 1));
        id v74 = v71;
        id v75 = v73;
        v183 = v74;
        id v76 = [v74 actionIdentifier];
        uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v79 = v78;

        if (!*(void *)(a2 + 16)
          || (Hasher.init(_seed:)(),
              String.hash(into:)(),
              Swift::Int v80 = Hasher._finalize()(),
              uint64_t v81 = -1 << *(unsigned char *)(a2 + 32),
              unint64_t v82 = v80 & ~v81,
              ((*(void *)(v186 + ((v82 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v82) & 1) == 0))
        {
LABEL_91:
          char v86 = 0;
          goto LABEL_92;
        }
        uint64_t v83 = *(void *)(a2 + 48);
        uint64_t v84 = (void *)(v83 + 16 * v82);
        BOOL v85 = *v84 == v77 && v84[1] == v79;
        if (!v85 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          uint64_t v87 = ~v81;
          unint64_t v88 = (v82 + 1) & ~v81;
          if (((*(void *)(v186 + ((v88 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v88) & 1) == 0) {
            goto LABEL_91;
          }
          while (1)
          {
            uint64_t v89 = (void *)(v83 + 16 * v88);
            BOOL v90 = *v89 == v77 && v89[1] == v79;
            if (v90 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              break;
            }
            char v86 = 0;
            unint64_t v88 = (v88 + 1) & v87;
            if (((*(void *)(v186 + ((v88 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v88) & 1) == 0) {
              goto LABEL_92;
            }
          }
        }
        char v86 = 1;
LABEL_92:
        swift_bridgeObjectRelease();
        id v91 = [v75 actionIdentifier];
        uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v94 = v93;

        if (!*(void *)(v185 + 16)) {
          goto LABEL_110;
        }
        Hasher.init(_seed:)();
        String.hash(into:)();
        Swift::Int v95 = Hasher._finalize()();
        uint64_t v96 = -1 << *(unsigned char *)(v185 + 32);
        unint64_t v97 = v95 & ~v96;
        if (((*(void *)(v186 + ((v97 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v97) & 1) == 0) {
          goto LABEL_110;
        }
        uint64_t v98 = *(void *)(v185 + 48);
        uint64_t v99 = (void *)(v98 + 16 * v97);
        BOOL v100 = *v99 == v92 && v99[1] == v94;
        if (!v100 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          break;
        }
LABEL_106:

        swift_bridgeObjectRelease();
        a2 = v185;
        if (v86) {
          goto LABEL_111;
        }
        uint64_t v11 = v181;
        if (!v181) {
          goto LABEL_214;
        }
        uint64_t v71 = *(void **)(v181 + 8 * v30);
        *(void *)(v181 + 8 * v30) = *(void *)(v181 + 8 * v72);
        *(void *)(v181 + 8 * v72) = v71;
        --v30;
        if (v72 == v179) {
          goto LABEL_112;
        }
      }
      uint64_t v101 = ~v96;
      while (1)
      {
        unint64_t v97 = (v97 + 1) & v101;
        if (((*(void *)(v186 + ((v97 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v97) & 1) == 0) {
          break;
        }
        uint64_t v102 = (void *)(v98 + 16 * v97);
        BOOL v103 = *v102 == v92 && v102[1] == v94;
        if (v103 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_106;
        }
      }
LABEL_110:

      swift_bridgeObjectRelease();
      a2 = v185;
LABEL_111:
      uint64_t v11 = v181;
LABEL_112:
      uint64_t v30 = v176 + 1;
    }
    while (v176 + 1 != v173);
    uint64_t v30 = v173;
LABEL_114:
    if (v30 < v179) {
      goto LABEL_206;
    }
    uint64_t v177 = v30;
    long long v12 = v172;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v172 + 2) + 1, 1, v172);
    }
    unint64_t v105 = *((void *)v12 + 2);
    unint64_t v104 = *((void *)v12 + 3);
    unint64_t v106 = v105 + 1;
    uint64_t v11 = v181;
    if (v105 >= v104 >> 1)
    {
      v157 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v104 > 1), v105 + 1, 1, v12);
      uint64_t v11 = v181;
      long long v12 = v157;
    }
    *((void *)v12 + 2) = v106;
    v107 = v12 + 32;
    uint64_t v108 = &v12[16 * v105 + 32];
    *(void *)uint64_t v108 = v179;
    *((void *)v108 + 1) = v177;
    if (!v105)
    {
      unint64_t v106 = 1;
LABEL_162:
      Swift::Int v9 = v174;
      uint64_t v10 = v177;
      if (v177 >= v174) {
        goto LABEL_170;
      }
      continue;
    }
    break;
  }
  while (1)
  {
    unint64_t v109 = v106 - 1;
    if (v106 >= 4)
    {
      uint64_t v114 = &v107[16 * v106];
      uint64_t v115 = *((void *)v114 - 8);
      uint64_t v116 = *((void *)v114 - 7);
      BOOL v120 = __OFSUB__(v116, v115);
      uint64_t v117 = v116 - v115;
      if (v120) {
        goto LABEL_191;
      }
      uint64_t v119 = *((void *)v114 - 6);
      uint64_t v118 = *((void *)v114 - 5);
      BOOL v120 = __OFSUB__(v118, v119);
      uint64_t v112 = v118 - v119;
      char v113 = v120;
      if (v120) {
        goto LABEL_192;
      }
      unint64_t v121 = v106 - 2;
      uint64_t v122 = &v107[16 * v106 - 32];
      uint64_t v124 = *(void *)v122;
      uint64_t v123 = *((void *)v122 + 1);
      BOOL v120 = __OFSUB__(v123, v124);
      uint64_t v125 = v123 - v124;
      if (v120) {
        goto LABEL_193;
      }
      BOOL v120 = __OFADD__(v112, v125);
      uint64_t v126 = v112 + v125;
      if (v120) {
        goto LABEL_195;
      }
      if (v126 >= v117)
      {
        v144 = &v107[16 * v109];
        uint64_t v146 = *(void *)v144;
        uint64_t v145 = *((void *)v144 + 1);
        BOOL v120 = __OFSUB__(v145, v146);
        uint64_t v147 = v145 - v146;
        if (v120) {
          goto LABEL_201;
        }
        BOOL v137 = v112 < v147;
        goto LABEL_151;
      }
    }
    else
    {
      if (v106 != 3)
      {
        uint64_t v138 = *((void *)v12 + 4);
        uint64_t v139 = *((void *)v12 + 5);
        BOOL v120 = __OFSUB__(v139, v138);
        uint64_t v131 = v139 - v138;
        char v132 = v120;
        goto LABEL_145;
      }
      uint64_t v111 = *((void *)v12 + 4);
      uint64_t v110 = *((void *)v12 + 5);
      BOOL v120 = __OFSUB__(v110, v111);
      uint64_t v112 = v110 - v111;
      char v113 = v120;
    }
    if (v113) {
      goto LABEL_194;
    }
    unint64_t v121 = v106 - 2;
    long long v127 = &v107[16 * v106 - 32];
    uint64_t v129 = *(void *)v127;
    uint64_t v128 = *((void *)v127 + 1);
    BOOL v130 = __OFSUB__(v128, v129);
    uint64_t v131 = v128 - v129;
    char v132 = v130;
    if (v130) {
      goto LABEL_196;
    }
    v133 = &v107[16 * v109];
    uint64_t v135 = *(void *)v133;
    uint64_t v134 = *((void *)v133 + 1);
    BOOL v120 = __OFSUB__(v134, v135);
    uint64_t v136 = v134 - v135;
    if (v120) {
      goto LABEL_198;
    }
    if (__OFADD__(v131, v136)) {
      goto LABEL_200;
    }
    if (v131 + v136 >= v112)
    {
      BOOL v137 = v112 < v136;
LABEL_151:
      if (v137) {
        unint64_t v109 = v121;
      }
      goto LABEL_153;
    }
LABEL_145:
    if (v132) {
      goto LABEL_197;
    }
    v140 = &v107[16 * v109];
    uint64_t v142 = *(void *)v140;
    uint64_t v141 = *((void *)v140 + 1);
    BOOL v120 = __OFSUB__(v141, v142);
    uint64_t v143 = v141 - v142;
    if (v120) {
      goto LABEL_199;
    }
    if (v143 < v131) {
      goto LABEL_162;
    }
LABEL_153:
    unint64_t v148 = v109 - 1;
    if (v109 - 1 >= v106)
    {
      __break(1u);
LABEL_188:
      __break(1u);
LABEL_189:
      __break(1u);
LABEL_190:
      __break(1u);
LABEL_191:
      __break(1u);
LABEL_192:
      __break(1u);
LABEL_193:
      __break(1u);
LABEL_194:
      __break(1u);
LABEL_195:
      __break(1u);
LABEL_196:
      __break(1u);
LABEL_197:
      __break(1u);
LABEL_198:
      __break(1u);
LABEL_199:
      __break(1u);
LABEL_200:
      __break(1u);
LABEL_201:
      __break(1u);
      goto LABEL_202;
    }
    if (!v11) {
      goto LABEL_215;
    }
    v149 = &v107[16 * v148];
    uint64_t v150 = *(void *)v149;
    unint64_t v151 = v109;
    v152 = &v107[16 * v109];
    uint64_t v153 = *((void *)v152 + 1);
    v154 = (char *)(v11 + 8 * *(void *)v149);
    v184 = (char *)(v11 + 8 * *(void *)v152);
    unint64_t v180 = v11 + 8 * v153;
    swift_bridgeObjectRetain();
    specialized _merge<A>(low:mid:high:buffer:by:)(v154, v184, v180, v175, v185);
    if (v178) {
      break;
    }
    if (v153 < v150) {
      goto LABEL_188;
    }
    if (v151 > *((void *)v12 + 2)) {
      goto LABEL_189;
    }
    unint64_t v155 = v151;
    *(void *)v149 = v150;
    *(void *)&v107[16 * v148 + 8] = v153;
    unint64_t v156 = *((void *)v12 + 2);
    if (v151 >= v156) {
      goto LABEL_190;
    }
    unint64_t v106 = v156 - 1;
    memmove(v152, v152 + 16, 16 * (v156 - 1 - v155));
    *((void *)v12 + 2) = v156 - 1;
    BOOL v137 = v156 > 2;
    a2 = v185;
    uint64_t v11 = v181;
    if (!v137) {
      goto LABEL_162;
    }
  }
LABEL_167:
  swift_bridgeObjectRelease();
  if (v174 < -1) {
    goto LABEL_209;
  }
LABEL_184:
  *(void *)((char *)&dword_10 + (v188 & 0xFFFFFFFFFFFFFF8)) = 0;
  specialized Array._endMutation()();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (a3 == a2) {
    goto LABEL_42;
  }
  uint64_t v6 = *a4;
  uint64_t v50 = a5 + 56;
  p_name = &stru_58FF8.name;
  uint64_t v45 = *a4;
  while (2)
  {
    unint64_t v8 = *(void **)(v6 + 8 * a3);
    uint64_t v43 = a3;
    while (1)
    {
      uint64_t v47 = a3;
      uint64_t v9 = a3 - 1;
      uint64_t v10 = *(void **)(v6 + 8 * (a3 - 1));
      id v11 = v8;
      id v49 = v10;
      id v12 = objc_msgSend(v11, p_name[451]);
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = v14;

      uint64_t v46 = v9;
      os_log_type_t v48 = v11;
      if (!*(void *)(a5 + 16)
        || (Hasher.init(_seed:)(),
            String.hash(into:)(),
            Swift::Int v16 = Hasher._finalize()(),
            uint64_t v17 = -1 << *(unsigned char *)(a5 + 32),
            unint64_t v18 = v16 & ~v17,
            ((*(void *)(v50 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0))
      {
LABEL_20:
        char v22 = 0;
        goto LABEL_21;
      }
      uint64_t v19 = *(void *)(a5 + 48);
      uint64_t v20 = (void *)(v19 + 16 * v18);
      BOOL v21 = *v20 == v13 && v20[1] == v15;
      if (!v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        unint64_t v23 = (v18 + 1) & ~v17;
        if (((*(void *)(v50 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
          goto LABEL_20;
        }
        while (1)
        {
          uint64_t v24 = (void *)(v19 + 16 * v23);
          BOOL v25 = *v24 == v13 && v24[1] == v15;
          if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          char v22 = 0;
          unint64_t v23 = (v23 + 1) & ~v17;
          if (((*(void *)(v50 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
            goto LABEL_21;
          }
        }
      }
      char v22 = 1;
LABEL_21:
      swift_bridgeObjectRelease();
      uint64_t v26 = p_name;
      id v27 = objc_msgSend(v49, p_name[451]);
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v30 = v29;

      if (!*(void *)(a5 + 16)) {
        goto LABEL_40;
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      Swift::Int v31 = Hasher._finalize()();
      uint64_t v32 = -1 << *(unsigned char *)(a5 + 32);
      unint64_t v33 = v31 & ~v32;
      if (((*(void *)(v50 + ((v33 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v33) & 1) == 0) {
        goto LABEL_40;
      }
      uint64_t v34 = *(void *)(a5 + 48);
      uint64_t v35 = (void *)(v34 + 16 * v33);
      BOOL v36 = *v35 == v28 && v35[1] == v30;
      if (!v36 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
LABEL_28:

      swift_bridgeObjectRelease();
      uint64_t v6 = v45;
      p_name = v26;
      if ((v22 & 1) == 0)
      {
        if (!v45)
        {
          __break(1u);
          return;
        }
        unint64_t v8 = *(void **)(v45 + 8 * v47);
        *(void *)(v45 + 8 * v47) = *(void *)(v45 + 8 * v46);
        *(void *)(v45 + 8 * v46) = v8;
        a3 = v46;
        if (v46 != a1) {
          continue;
        }
      }
      goto LABEL_41;
    }
    uint64_t v37 = ~v32;
    for (unint64_t i = v33 + 1; ; unint64_t i = v39 + 1)
    {
      uint64_t v39 = i & v37;
      if (((*(void *)(v50 + (((i & v37) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v37)) & 1) == 0) {
        break;
      }
      uint64_t v40 = (void *)(v34 + 16 * v39);
      BOOL v41 = *v40 == v28 && v40[1] == v30;
      if (v41 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_28;
      }
    }
LABEL_40:

    swift_bridgeObjectRelease();
    uint64_t v6 = v45;
    p_name = v26;
LABEL_41:
    a3 = v43 + 1;
    if (v43 + 1 != a2) {
      continue;
    }
    break;
  }
LABEL_42:
  swift_bridgeObjectRelease();
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *a2, unint64_t a3, char *a4, uint64_t a5)
{
  unint64_t v65 = a1;
  Swift::Int v5 = a4;
  uint64_t v7 = (id *)a2;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 8;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 8;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (void)a2) / 8, a4);
    uint64_t v13 = &v5[8 * v11];
    if (v65 >= (char *)v7 || v10 < 8) {
      goto LABEL_43;
    }
    uint64_t v57 = v5;
    Swift::Int v16 = (id *)(a3 - 8);
    while (1)
    {
      BOOL v59 = v16 + 1;
      uint64_t v60 = v7;
      unint64_t v63 = (unint64_t)v13;
      uint64_t v17 = v13 - 8;
      uint64_t v19 = v7 - 1;
      unint64_t v18 = *(v7 - 1);
      id v20 = *((id *)v13 - 1);
      id v21 = v18;
      id v22 = [v20 actionIdentifier];
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v25 = v24;

      specialized Set.contains(_:)(v23, v25, a5);
      char v58 = v26;
      swift_bridgeObjectRelease();
      id v27 = [v21 actionIdentifier];
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v30 = v29;

      specialized Set.contains(_:)(v28, v30, a5);
      char v32 = v31;

      swift_bridgeObjectRelease();
      if ((v58 & 1) != 0 || (v32 & 1) == 0)
      {
        uint64_t v7 = v60;
        BOOL v35 = v59 != (id *)v63 || (unint64_t)v16 >= v63;
        uint64_t v13 = v17;
        Swift::Int v5 = v57;
        unint64_t v34 = (unint64_t)v65;
        if (!v35) {
          goto LABEL_26;
        }
      }
      else
      {
        BOOL v33 = v59 != v60 || v16 >= v60;
        uint64_t v17 = (char *)v19;
        uint64_t v7 = v19;
        Swift::Int v5 = v57;
        unint64_t v34 = (unint64_t)v65;
        uint64_t v13 = (char *)v63;
        if (!v33) {
          goto LABEL_26;
        }
      }
      *Swift::Int v16 = *(id *)v17;
LABEL_26:
      --v16;
      if ((unint64_t)v7 <= v34 || v13 <= v5) {
        goto LABEL_43;
      }
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (a2 - a1) / 8, a4);
  uint64_t v13 = &v5[8 * v9];
  if ((unint64_t)v7 < a3 && v8 >= 8)
  {
    uint64_t v64 = &v5[8 * v9];
    unint64_t v61 = a3;
    while (1)
    {
      uint64_t v37 = v7;
      Swift::Int v38 = v5;
      uint64_t v39 = *(void **)v5;
      id v40 = *v7;
      id v41 = v39;
      id v42 = [v40 actionIdentifier];
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v45 = v44;

      specialized Set.contains(_:)(v43, v45, a5);
      LOBYTE(v43) = v46;
      swift_bridgeObjectRelease();
      id v47 = [v41 actionIdentifier];
      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v50 = v49;

      specialized Set.contains(_:)(v48, v50, a5);
      char v52 = v51;

      swift_bridgeObjectRelease();
      if (v43 & 1) == 0 && (v52) {
        break;
      }
      uint64_t v53 = v38;
      Swift::Int v5 = v38 + 8;
      Swift::Int v54 = v65;
      uint64_t v7 = v37;
      if (v65 != v38) {
        goto LABEL_36;
      }
LABEL_37:
      unint64_t v65 = v54 + 8;
      uint64_t v13 = v64;
      if (v5 >= v64 || (unint64_t)v7 >= v61)
      {
        uint64_t v7 = (id *)(v54 + 8);
        goto LABEL_43;
      }
    }
    uint64_t v53 = v37;
    uint64_t v7 = v37 + 1;
    Swift::Int v54 = v65;
    Swift::Int v5 = v38;
    if (v65 == (char *)v37) {
      goto LABEL_37;
    }
LABEL_36:
    *(void *)Swift::Int v54 = *v53;
    goto LABEL_37;
  }
  uint64_t v7 = (id *)a1;
LABEL_43:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v5, (v13 - v5) / 8, (char *)v7);
  swift_bridgeObjectRelease();
  return 1;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  id v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || &v13[16 * v8] <= v12) {
      memmove(v12, v13, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void (*specialized protocol witness for Collection.subscript.read in conformance [A](void *a1, unint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  void v6[4] = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (void *a1)
{
  id v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

void (*specialized Array.subscript.read(void *a1, unint64_t a2, uint64_t a3))(id *a1)
{
  unint64_t v6 = a3 & 0xC000000000000001;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(a2, (a3 & 0xC000000000000001) == 0, a3);
  if (v6) {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v7 = *(id *)(a3 + 8 * a2 + 32);
  }
  *a1 = v7;
  return Array.subscript.readspecialized ;
}

void Array.subscript.readspecialized (id *a1)
{
}

void specialized Dictionary<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a2 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  Swift::UInt v9 = 0;
  int64_t v10 = 0;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    uint64_t v16 = *(void *)(*(void *)(a2 + 56) + 8 * i);
    uint64_t v17 = *(void *)(a1 + 64);
    long long v18 = *(_OWORD *)(a1 + 16);
    v20[0] = *(_OWORD *)a1;
    v20[1] = v18;
    long long v19 = *(_OWORD *)(a1 + 48);
    void v20[2] = *(_OWORD *)(a1 + 32);
    v20[3] = v19;
    uint64_t v21 = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v20, v16);
    swift_bridgeObjectRelease_n();
    v9 ^= Hasher._finalize()();
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v13 >= v8) {
      goto LABEL_19;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v8) {
        goto LABEL_19;
      }
      unint64_t v14 = *(void *)(v4 + 8 * v10);
      if (!v14) {
        break;
      }
    }
LABEL_16:
    unint64_t v7 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 2;
  if (v15 >= v8)
  {
LABEL_19:
    swift_release();
    Hasher._combine(_:)(v9);
    return;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v8) {
      goto LABEL_19;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_16;
    }
  }
LABEL_21:
  __break(1u);
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  Swift::UInt v7;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;

  uint64_t v17 = a2 + 64;
  id v3 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  uint64_t v5 = v4 & *(void *)(a2 + 64);
  uint64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  unint64_t v7 = 0;
  int64_t v8 = 0;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_4:
  Swift::UInt v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    unint64_t v14 = *(void **)(*(void *)(a2 + 48) + 8 * i);
    int64_t v15 = *(void **)(*(void *)(a2 + 56) + 8 * i);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v14;
    swift_unknownObjectRetain();
    String.hash(into:)();

    swift_bridgeObjectRelease();
    Hasher._combine(_:)((Swift::UInt)[v15 hash]);
    swift_unknownObjectRelease();
    v7 ^= Hasher._finalize()();
    if (v5) {
      goto LABEL_4;
    }
LABEL_5:
    unint64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v11 >= v6) {
      goto LABEL_19;
    }
    id v12 = *(void *)(v17 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v6) {
        goto LABEL_19;
      }
      id v12 = *(void *)(v17 + 8 * v8);
      if (!v12) {
        break;
      }
    }
LABEL_16:
    uint64_t v5 = (v12 - 1) & v12;
  }
  int64_t v13 = v11 + 2;
  if (v13 >= v6)
  {
LABEL_19:
    swift_release();
    Hasher._combine(_:)(v7);
    return;
  }
  id v12 = *(void *)(v17 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_19;
    }
    id v12 = *(void *)(v17 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_16;
    }
  }
LABEL_21:
  __break(1u);
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t specialized static AutoShortcutsSuggestionsOwnerDefinitionFactory.createAutoShortcutSuggestions(linkClient:builder:clock:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[18] = a3;
  v4[19] = a4;
  v4[17] = a2;
  uint64_t v6 = type metadata accessor for DialogDetails();
  v4[20] = v6;
  v4[21] = *(void *)(v6 - 8);
  v4[22] = swift_task_alloc();
  v4[5] = type metadata accessor for DefaultLinkClient();
  v4[6] = &protocol witness table for DefaultLinkClient;
  v4[2] = a1;
  swift_retain();
  return _swift_task_switch(specialized static AutoShortcutsSuggestionsOwnerDefinitionFactory.createAutoShortcutSuggestions(linkClient:builder:clock:), 0, 0);
}

uint64_t specialized static AutoShortcutsSuggestionsOwnerDefinitionFactory.createAutoShortcutSuggestions(linkClient:builder:clock:)()
{
  OUTLINED_FUNCTION_21_4();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = partial apply for implicit closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.createAutoShortcutSuggestions(linkClient:builder:clock:);
  *(void *)(v6 + 24) = v5;
  *uint64_t v0 = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed DialogProperties) -> (@out Any);
  v0[1] = v6;
  uint64_t v7 = OUTLINED_FUNCTION_19_5();
  v8(v7);
  Swift::UInt v9 = (void *)swift_task_alloc();
  long long v9[2] = v1;
  v9[3] = v4;
  v9[4] = v3;
  OUTLINED_FUNCTION_34_1((uint64_t)v9, 0x800000000004A610, v10, (uint64_t)partial apply for closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.createAutoShortcutSuggestions(linkClient:builder:clock:));
  swift_task_dealloc();
  uint64_t v11 = OUTLINED_FUNCTION_32_1();
  v12(v11);
  _s25SiriLinkSuggestionsPlugin0B6Client_pWOcTm_0(v1, (uint64_t)v19);
  uint64_t v13 = type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts();
  OUTLINED_FUNCTION_22_3();
  AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.init(linkClient:)(v19);
  *(void *)(v2 + 80) = v13;
  uint64_t v15 = _s18SiriSuggestionsKit12DefaultOwnerCAcA0E0AAWlTm_0(&lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts, v14, (void (*)(uint64_t))type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts);
  OUTLINED_FUNCTION_31_2(v15);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OwnerDefinition>);
  uint64_t v16 = OUTLINED_FUNCTION_22_3();
  *(_OWORD *)(v16 + 16) = xmmword_47FC0;
  dispatch thunk of SuggestionOwnerDefinitionBuilder.build()();
  __swift_destroy_boxed_opaque_existential_1(v1);
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(uint64_t))(v2 + 8);
  return v17(v16);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  OUTLINED_FUNCTION_20_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  v0[18] = v5;
  v0[19] = v6;
  v0[17] = v7;
  uint64_t v8 = type metadata accessor for DialogDetails();
  v0[20] = v8;
  OUTLINED_FUNCTION_0_1(v8);
  v0[21] = v9;
  v0[22] = swift_task_alloc();
  v0[5] = v4;
  v0[6] = v2;
  __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  OUTLINED_FUNCTION_23();
  (*(void (**)(void))(v10 + 16))();
  OUTLINED_FUNCTION_11_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  long long *v19;
  uint64_t v20;

  OUTLINED_FUNCTION_21_4();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = implicit closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.createAutoShortcutSuggestions(linkClient:builder:clock:)partial apply;
  *(void *)(v6 + 24) = v5;
  *uint64_t v0 = &thunk for @escaping @callee_guaranteed (@in_guaranteed DialogProperties) -> (@out Any)partial apply;
  v0[1] = v6;
  uint64_t v7 = OUTLINED_FUNCTION_19_5();
  v8(v7);
  Swift::UInt v9 = (void *)swift_task_alloc();
  long long v9[2] = v1;
  v9[3] = v4;
  v9[4] = v3;
  OUTLINED_FUNCTION_34_1((uint64_t)v9, 0x800000000004A610, v10, (uint64_t)closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.createAutoShortcutSuggestions(linkClient:builder:clock:)partial apply);
  swift_task_dealloc();
  uint64_t v11 = OUTLINED_FUNCTION_32_1();
  v12(v11);
  _s25SiriLinkSuggestionsPlugin0B6Client_pWOcTm_0(v1, (uint64_t)v19);
  uint64_t v13 = type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts();
  OUTLINED_FUNCTION_22_3();
  AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.init(linkClient:)(v19);
  *(void *)(v2 + 80) = v13;
  uint64_t v15 = _s18SiriSuggestionsKit12DefaultOwnerCAcA0E0AAWlTm_0(&lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts, v14, (void (*)(uint64_t))type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts);
  OUTLINED_FUNCTION_31_2(v15);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OwnerDefinition>);
  uint64_t v16 = OUTLINED_FUNCTION_22_3();
  *(_OWORD *)(v16 + 16) = xmmword_47FC0;
  dispatch thunk of SuggestionOwnerDefinitionBuilder.build()();
  __swift_destroy_boxed_opaque_existential_1(v1);
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(uint64_t))(v2 + 8);
  return v17(v16);
}

uint64_t outlined init with take of AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined release of String(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator()
{
  return self;
}

uint64_t sub_44BB0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

unint64_t lazy protocol witness table accessor for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors;
  if (!lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors;
  if (!lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors);
  }
  return result;
}

uint64_t base witness table accessor for InternalResolver in AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver(uint64_t a1, uint64_t a2)
{
  return _s18SiriSuggestionsKit12DefaultOwnerCAcA0E0AAWlTm_0(&lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver, a2, (void (*)(uint64_t))type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver);
}

uint64_t type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver()
{
  return self;
}

uint64_t base witness table accessor for Wrappable in AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver(uint64_t a1, uint64_t a2)
{
  return _s18SiriSuggestionsKit12DefaultOwnerCAcA0E0AAWlTm_0(&lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver, a2, (void (*)(uint64_t))type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver);
}

uint64_t base witness table accessor for InternalResolver in AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver(uint64_t a1, uint64_t a2)
{
  return _s18SiriSuggestionsKit12DefaultOwnerCAcA0E0AAWlTm_0(&lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver, a2, (void (*)(uint64_t))type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver);
}

uint64_t type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver()
{
  return self;
}

uint64_t base witness table accessor for Wrappable in AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver(uint64_t a1, uint64_t a2)
{
  return _s18SiriSuggestionsKit12DefaultOwnerCAcA0E0AAWlTm_0(&lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver, a2, (void (*)(uint64_t))type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver);
}

unint64_t lazy protocol witness table accessor for type AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt;
  if (!lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails;
  if (!lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata;
  if (!lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata);
  }
  return result;
}

uint64_t type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory()
{
  return self;
}

void type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants()
{
}

void destroy for AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 24);
}

void *initializeWithCopy for AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = (void *)a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

void *assignWithCopy for AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[3];
  id v5 = (void *)a1[3];
  a1[3] = v4;
  id v6 = v4;

  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails()
{
}

void type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt()
{
}

uint64_t type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts()
{
  return self;
}

void destroy for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void **)(a1 + 32);
}

void *initializeWithCopy for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  id v5 = (void *)a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v6 = v5;
  return a1;
}

void *assignWithCopy for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[4];
  id v5 = (void *)a1[4];
  a1[4] = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  id v5 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase()
{
}

unsigned char *storeEnumTagSinglePayload for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x45558);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys()
{
}

void type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata()
{
}

unsigned char *storeEnumTagSinglePayload for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x45634);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors()
{
}

void partial apply for implicit closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.createAutoShortcutSuggestions(linkClient:builder:clock:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_45684()
{
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_28_2();
  return _swift_deallocObject(v0, v1, v2);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed DialogProperties) -> (@out Any)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed DialogProperties) -> (@out Any);
  uint64_t v2 = OUTLINED_FUNCTION_14_4();
  return v3(v2);
}

uint64_t partial apply for closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.createAutoShortcutSuggestions(linkClient:builder:clock:)(uint64_t a1)
{
  return closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.createAutoShortcutSuggestions(linkClient:builder:clock:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_45770()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t partial apply for closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.rngFactory(_:)@<X0>(char a1@<W1>, uint64_t *a2@<X8>)
{
  return closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.rngFactory(_:)(a1 & 1, (void *)(v2 + 16), a2);
}

uint64_t partial apply for closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.createPhraseParameter(clock:)()
{
  return closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.createPhraseParameter(clock:)((void *)(v0 + 16));
}

uint64_t sub_457BC()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Any, Any?>);
  OUTLINED_FUNCTION_23();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return _swift_deallocObject(v0, v4, v5);
}

uint64_t partial apply for closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.stripOutPhrase(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.stripOutPhrase(_:)(a1, a2);
}

uint64_t _s18SiriSuggestionsKit12DefaultOwnerCAcA0E0AAWlTm_0(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed DialogProperties) -> (@out Any)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed DialogProperties) -> (@out Any)partial apply()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = _s25SiriLinkSuggestionsPlugin17DefaultToolClientC20toolSessionSetupTask33_4798BCE20D0F3642FE2DAC187424D220LLScTy0F3Kit0f9ExecutionI0_ps5Error_pGvpfiAfG_pyYaKcfU_TATQ0__0;
  uint64_t v2 = OUTLINED_FUNCTION_14_4();
  return v3(v2);
}

uint64_t OUTLINED_FUNCTION_10_6()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t OUTLINED_FUNCTION_13_3()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_14_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_19_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_22_3()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_24_4()
{
  return v0;
}

void *OUTLINED_FUNCTION_26_2(unint64_t a1)
{
  return specialized Sequence.compactMap<A>(_:)(a1, v2, v3, v1, v4);
}

uint64_t OUTLINED_FUNCTION_28_2()
{
  return v0;
}

void OUTLINED_FUNCTION_30_2(float a1)
{
  *uint64_t v3 = a1;
  *(void *)(v2 + 144) = *(void *)(v1 + 16);
}

uint64_t OUTLINED_FUNCTION_31_2(uint64_t a1)
{
  *(void *)(v2 + 88) = a1;
  *(void *)(v2 + 56) = v1;
  return dispatch thunk of SuggestionOwnerDefinitionBuilder.withConfiguratorProvider(_:)(v2 + 56);
}

uint64_t OUTLINED_FUNCTION_32_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_34_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return dispatch thunk of SuggestionOwnerDefinitionBuilder.add(suggestionId:dialogDetails:builder:)(0xD000000000000016, a2, v4, a4, v5);
}

uint64_t OUTLINED_FUNCTION_36_2()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_38_1(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0x726F000000000000;
}

uint64_t OUTLINED_FUNCTION_43_2()
{
  *(_WORD *)(v0 + 12) = 2080;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_45_1()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t OUTLINED_FUNCTION_47_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_48_1()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_49_1()
{
  return 0;
}

uint64_t LinkRegistryObserver.__allocating_init(refreshableService:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_28_2();
  uint64_t v4 = swift_allocObject();
  LinkRegistryObserver.init(refreshableService:)(a1, a2);
  return v4;
}

uint64_t LinkRegistryObserver.init(refreshableService:)(uint64_t a1, uint64_t a2)
{
  id v5 = [self defaultCenter];
  *(void *)(v2 + 16) = v5;
  uint64_t v6 = LNMetadataChangedNotification;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  v12[4] = partial apply for closure #1 in LinkRegistryObserver.init(refreshableService:);
  v12[5] = v7;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  Swift::Int v12[3] = &block_descriptor_0;
  uint64_t v8 = _Block_copy(v12);
  swift_unknownObjectRetain();
  id v9 = v5;
  swift_release();
  id v10 = [v9 addObserverForName:v6 object:0 queue:0 usingBlock:v8];
  swift_unknownObjectRelease();
  _Block_release(v8);

  *(void *)(v2 + 24) = v10;
  return v2;
}

void closure #1 in LinkRegistryObserver.init(refreshableService:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for linkSuggestions != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.linkSuggestions);
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_0, v9, v10, "Received LNMetadataChanged notification - refreshing plugin", v11, 2u);
    swift_slowDealloc();
  }

  if (a2)
  {
    uint64_t v12 = type metadata accessor for TaskPriority();
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 1, 1, v12);
    uint64_t v13 = (void *)swift_allocObject();
    v13[2] = 0;
    v13[3] = 0;
    void v13[4] = a2;
    uint64_t v13[5] = a3;
    swift_unknownObjectRetain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in LinkRegistryObserver.init(refreshableService:), (uint64_t)v13);
    swift_release();
  }
  else
  {
    os_log_t v18 = (os_log_t)Logger.logObject.getter();
    uint64_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, (os_log_type_t)v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_0, v18, (os_log_type_t)v14, "Unable to refresh link suggestions. No refreshable service is found", v15, 2u);
      swift_slowDealloc();
    }
    os_log_t v16 = v18;
  }
}

uint64_t sub_45FFC()
{
  swift_unknownObjectRelease();
  uint64_t v0 = OUTLINED_FUNCTION_28_2();
  return _swift_deallocObject(v0, v1, v2);
}

void partial apply for closure #1 in LinkRegistryObserver.init(refreshableService:)(uint64_t a1)
{
  closure #1 in LinkRegistryObserver.init(refreshableService:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t closure #1 in closure #1 in LinkRegistryObserver.init(refreshableService:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v8;
  *uint64_t v8 = v5;
  v8[1] = closure #1 in closure #1 in LinkRegistryObserver.init(refreshableService:);
  return dispatch thunk of SuggestionsServiceRefreshable.refreshAsync()(ObjectType, a5);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  if (__swift_getEnumTagSinglePayload(a1, 1, v6) == 1)
  {
    outlined destroy of TaskPriority?(a1);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  return swift_task_create();
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Notification();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void (**)(char *))(a1 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v6(v5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t LinkRegistryObserver.deinit()
{
  uint64_t v1 = *(void **)(v0 + 16);
  [v1 removeObserver:*(void *)(v0 + 24)];

  swift_unknownObjectRelease();
  return v0;
}

uint64_t LinkRegistryObserver.__deallocating_deinit()
{
  LinkRegistryObserver.deinit();
  uint64_t v0 = OUTLINED_FUNCTION_28_2();
  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t type metadata accessor for LinkRegistryObserver()
{
  return self;
}

uint64_t sub_463EC()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t partial apply for closure #1 in closure #1 in LinkRegistryObserver.init(refreshableService:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = protocol witness for CandidateSuggestionConfigurator.updateContext(context:signal:) in conformance AppIntentCandidateSuggestionConfigurator;
  return closure #1 in closure #1 in LinkRegistryObserver.init(refreshableService:)(a1, v4, v5, v7, v6);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_12();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_46694()
{
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_28_2();
  return _swift_deallocObject(v0, v1, v2);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for CandidateSuggestionConfigurator.updateContext(context:signal:) in conformance AppIntentCandidateSuggestionConfigurator;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu);
  return v6(a1, v4);
}

uint64_t static Notification._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Notification._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t type metadata accessor for Notification()
{
  return type metadata accessor for Notification();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static Locale.current.getter()
{
  return static Locale.current.getter();
}

uint64_t type metadata accessor for Locale()
{
  return type metadata accessor for Locale();
}

uint64_t TemplatingText.init(text:speakableTextOverride:)()
{
  return TemplatingText.init(text:speakableTextOverride:)();
}

uint64_t TemplatingText.text.getter()
{
  return TemplatingText.text.getter();
}

uint64_t type metadata accessor for TemplatingText()
{
  return type metadata accessor for TemplatingText();
}

uint64_t static SAAppInfoFactory.createAppInfo(appIdentifier:)()
{
  return static SAAppInfoFactory.createAppInfo(appIdentifier:)();
}

uint64_t TemplatingResult.init(templateIdentifier:sections:behaviorAfterSpeaking:)()
{
  return TemplatingResult.init(templateIdentifier:sections:behaviorAfterSpeaking:)();
}

uint64_t type metadata accessor for TemplatingResult()
{
  return type metadata accessor for TemplatingResult();
}

uint64_t TemplatingSection.init(id:content:caption:spokenOnly:)()
{
  return TemplatingSection.init(id:content:caption:spokenOnly:)();
}

uint64_t TemplatingSection.content.getter()
{
  return TemplatingSection.content.getter();
}

uint64_t type metadata accessor for TemplatingSection()
{
  return type metadata accessor for TemplatingSection();
}

uint64_t type metadata accessor for BehaviorAfterSpeaking()
{
  return type metadata accessor for BehaviorAfterSpeaking();
}

uint64_t isFeatureEnabled(_:)()
{
  return isFeatureEnabled(_:)();
}

uint64_t Transformer.init(transform:)()
{
  return Transformer.init(transform:)();
}

uint64_t Transformer.transform.getter()
{
  return Transformer.transform.getter();
}

uint64_t dispatch thunk of SiriSuggestions.DisplayRepresentable.getDisplay(for:)()
{
  return dispatch thunk of SiriSuggestions.DisplayRepresentable.getDisplay(for:)();
}

uint64_t type metadata accessor for IntentType()
{
  return type metadata accessor for IntentType();
}

uint64_t ViewContext.__allocating_init()()
{
  return ViewContext.__allocating_init()();
}

uint64_t type metadata accessor for ViewContext()
{
  return type metadata accessor for ViewContext();
}

uint64_t AppIdDetails.appId.getter()
{
  return AppIdDetails.appId.getter();
}

uint64_t type metadata accessor for AppIdDetails()
{
  return type metadata accessor for AppIdDetails();
}

uint64_t DefaultOwner.init(group:identifier:)()
{
  return DefaultOwner.init(group:identifier:)();
}

uint64_t type metadata accessor for DefaultOwner()
{
  return type metadata accessor for DefaultOwner();
}

uint64_t type metadata accessor for DialogDetails()
{
  return type metadata accessor for DialogDetails();
}

uint64_t type metadata accessor for SalientEntity()
{
  return type metadata accessor for SalientEntity();
}

uint64_t SignalContext.explicitRequest.getter()
{
  return SignalContext.explicitRequest.getter();
}

uint64_t SignalContext.onScreen.getter()
{
  return SignalContext.onScreen.getter();
}

uint64_t type metadata accessor for SignalContext()
{
  return type metadata accessor for SignalContext();
}

uint64_t static CodableWrapper.decodeDictionary<A, B>(forType:forKey:container:)()
{
  return static CodableWrapper.decodeDictionary<A, B>(forType:forKey:container:)();
}

uint64_t static CodableWrapper.encodeDictionary<A>(to:forKey:instance:)()
{
  return static CodableWrapper.encodeDictionary<A>(to:forKey:instance:)();
}

uint64_t static CodableWrapper.decode<A, B>(forType:forKey:container:)()
{
  return static CodableWrapper.decode<A, B>(forType:forKey:container:)();
}

uint64_t static CodableWrapper.encode<A>(to:forKey:instance:)()
{
  return static CodableWrapper.encode<A>(to:forKey:instance:)();
}

uint64_t static InvocationType.allCases.getter()
{
  return static InvocationType.allCases.getter();
}

uint64_t type metadata accessor for InvocationType()
{
  return type metadata accessor for InvocationType();
}

uint64_t AppIntentFilter.AppIntentParameter.name.getter()
{
  return AppIntentFilter.AppIntentParameter.name.getter();
}

uint64_t AppIntentFilter.AppIntentParameter.value.getter()
{
  return AppIntentFilter.AppIntentParameter.value.getter();
}

uint64_t type metadata accessor for AppIntentFilter.AppIntentParameter()
{
  return type metadata accessor for AppIntentFilter.AppIntentParameter();
}

uint64_t AppIntentFilter.parameters.getter()
{
  return AppIntentFilter.parameters.getter();
}

uint64_t AppIntentFilter.intentIdentifier.getter()
{
  return AppIntentFilter.intentIdentifier.getter();
}

uint64_t AppIntentFilter.appId.getter()
{
  return AppIntentFilter.appId.getter();
}

uint64_t dispatch thunk of AppIntentFilter.Builder.withAppId(_:)()
{
  return dispatch thunk of AppIntentFilter.Builder.withAppId(_:)();
}

uint64_t dispatch thunk of AppIntentFilter.Builder.build()()
{
  return dispatch thunk of AppIntentFilter.Builder.build()();
}

uint64_t static AppIntentFilter.builder()()
{
  return static AppIntentFilter.builder()();
}

uint64_t type metadata accessor for AppIntentFilter()
{
  return type metadata accessor for AppIntentFilter();
}

uint64_t type metadata accessor for CoreSignalTypes()
{
  return type metadata accessor for CoreSignalTypes();
}

uint64_t type metadata accessor for IntentParameter()
{
  return type metadata accessor for IntentParameter();
}

uint64_t NSCodingAdaptor.init(data:)()
{
  return NSCodingAdaptor.init(data:)();
}

uint64_t NSCodingAdaptor.data.getter()
{
  return NSCodingAdaptor.data.getter();
}

uint64_t type metadata accessor for NSCodingAdaptor()
{
  return type metadata accessor for NSCodingAdaptor();
}

uint64_t UtteranceAction.__allocating_init()()
{
  return UtteranceAction.__allocating_init()();
}

uint64_t type metadata accessor for UtteranceAction()
{
  return type metadata accessor for UtteranceAction();
}

Swift::String __swiftcall DialogIdProvider.getId()()
{
  uint64_t v0 = DialogIdProvider.getId()();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t dispatch thunk of DialogProperties.getParameters()()
{
  return dispatch thunk of DialogProperties.getParameters()();
}

uint64_t SuggestionDetails.init(suggestionId:resolverParams:description:viewProvider:actionIdKeyMapper:filter:)()
{
  return SuggestionDetails.init(suggestionId:resolverParams:description:viewProvider:actionIdKeyMapper:filter:)();
}

uint64_t type metadata accessor for SuggestionDetails()
{
  return type metadata accessor for SuggestionDetails();
}

uint64_t type metadata accessor for AssistantTurnState()
{
  return type metadata accessor for AssistantTurnState();
}

uint64_t type metadata accessor for InvocationModality()
{
  return type metadata accessor for InvocationModality();
}

uint64_t dispatch thunk of CandidateSuggestion.params.getter()
{
  return dispatch thunk of CandidateSuggestion.params.getter();
}

uint64_t dispatch thunk of CandidateSuggestion.context.getter()
{
  return dispatch thunk of CandidateSuggestion.context.getter();
}

uint64_t dispatch thunk of EnvironmentSnapshot.siriLocale.getter()
{
  return dispatch thunk of EnvironmentSnapshot.siriLocale.getter();
}

uint64_t dispatch thunk of EnvironmentSnapshot.salientEntities.getter()
{
  return dispatch thunk of EnvironmentSnapshot.salientEntities.getter();
}

uint64_t EnvironmentSnapshot.getValidOpenAppIds()()
{
  return EnvironmentSnapshot.getValidOpenAppIds()();
}

uint64_t ResolvableParameter.init(typeIdentifier:required:loggingKeyTransformer:intentTransformer:)()
{
  return ResolvableParameter.init(typeIdentifier:required:loggingKeyTransformer:intentTransformer:)();
}

uint64_t ResolvableParameter.__allocating_init(typeIdentifier:required:loggingKeyTransformer:)()
{
  return ResolvableParameter.__allocating_init(typeIdentifier:required:loggingKeyTransformer:)();
}

uint64_t type metadata accessor for ResolvableParameter()
{
  return type metadata accessor for ResolvableParameter();
}

uint64_t VersionedInvocation.init(invocationType:versions:)()
{
  return VersionedInvocation.init(invocationType:versions:)();
}

uint64_t type metadata accessor for VersionedInvocation()
{
  return type metadata accessor for VersionedInvocation();
}

uint64_t type metadata accessor for CoreSuggestionGroups()
{
  return type metadata accessor for CoreSuggestionGroups();
}

uint64_t static NoOpSuggestionFilter.Instance.getter()
{
  return static NoOpSuggestionFilter.Instance.getter();
}

uint64_t type metadata accessor for NoOpSuggestionFilter()
{
  return type metadata accessor for NoOpSuggestionFilter();
}

uint64_t DirectInvocationAction.init(siriKitIdentifier:payload:suggestionId:)()
{
  return DirectInvocationAction.init(siriKitIdentifier:payload:suggestionId:)();
}

uint64_t type metadata accessor for DirectInvocationAction()
{
  return type metadata accessor for DirectInvocationAction();
}

uint64_t EnvironmentAwareSignal.activeSignal.getter()
{
  return EnvironmentAwareSignal.activeSignal.getter();
}

uint64_t static SuggestionTransformers.obfuscateParametersForLogging(numCharacters:rngFactory:currentDate:)()
{
  return static SuggestionTransformers.obfuscateParametersForLogging(numCharacters:rngFactory:currentDate:)();
}

uint64_t static SuggestionTransformers.passthroughParameterForLogging()()
{
  return static SuggestionTransformers.passthroughParameterForLogging()();
}

uint64_t dispatch thunk of SuggestionDetailsBuilder.intentIdentifier(_:)()
{
  return dispatch thunk of SuggestionDetailsBuilder.intentIdentifier(_:)();
}

uint64_t dispatch thunk of SuggestionDetailsBuilder.validForInvocationTypes(_:)()
{
  return dispatch thunk of SuggestionDetailsBuilder.validForInvocationTypes(_:)();
}

uint64_t SuggestionDetailsBuilder.parameter(parameterName:resolver:resolveParam:)()
{
  return SuggestionDetailsBuilder.parameter(parameterName:resolver:resolveParam:)();
}

uint64_t dispatch thunk of SuggestionOwnerDefinitionBuilder.getRefreshService()()
{
  return dispatch thunk of SuggestionOwnerDefinitionBuilder.getRefreshService()();
}

uint64_t dispatch thunk of SuggestionOwnerDefinitionBuilder.build()()
{
  return dispatch thunk of SuggestionOwnerDefinitionBuilder.build()();
}

uint64_t dispatch thunk of Clock.getCurrentTime()()
{
  return dispatch thunk of Clock.getCurrentTime()();
}

uint64_t type metadata accessor for Color()
{
  return type metadata accessor for Color();
}

uint64_t type metadata accessor for Image()
{
  return type metadata accessor for Image();
}

uint64_t type metadata accessor for Party()
{
  return type metadata accessor for Party();
}

uint64_t Action.init(actionId:params:)()
{
  return Action.init(actionId:params:)();
}

uint64_t Assets.init(icon:)()
{
  return Assets.init(icon:)();
}

uint64_t static Clocks.getSystemClock()()
{
  return static Clocks.getSystemClock()();
}

uint64_t type metadata accessor for Intent()
{
  return type metadata accessor for Intent();
}

uint64_t static Signal.HomeScreen.getter()
{
  return static Signal.HomeScreen.getter();
}

uint64_t Signal.__allocating_init(signalType:signalValue:fallbackSignals:)()
{
  return Signal.__allocating_init(signalType:signalValue:fallbackSignals:)();
}

uint64_t Signal.signalType.getter()
{
  return Signal.signalType.getter();
}

uint64_t Signal.signalValue.getter()
{
  return Signal.signalValue.getter();
}

uint64_t static Signal.HomeScreenTier1.getter()
{
  return static Signal.HomeScreenTier1.getter();
}

uint64_t static Signal.== infix(_:_:)()
{
  return static Signal.== infix(_:_:)();
}

uint64_t Signal.context.getter()
{
  return Signal.context.getter();
}

uint64_t type metadata accessor for Signal()
{
  return type metadata accessor for Signal();
}

uint64_t Context.getIntentType()()
{
  return Context.getIntentType()();
}

uint64_t Context.getTargetOwner()()
{
  return Context.getTargetOwner()();
}

uint64_t Context.getAppId()()
{
  return Context.getAppId()();
}

uint64_t Context.getParam(for:key:)()
{
  return Context.getParam(for:key:)();
}

uint64_t Context.setAppId(_:party:)()
{
  return Context.setAppId(_:party:)();
}

uint64_t Context.setParam(for:key:value:)()
{
  return Context.setParam(for:key:value:)();
}

uint64_t static Resolvers.unionResolvers(type:resolvers:)()
{
  return static Resolvers.unionResolvers(type:resolvers:)();
}

uint64_t SimpleRNG.init(seed:)()
{
  return SimpleRNG.init(seed:)();
}

uint64_t type metadata accessor for SimpleRNG()
{
  return type metadata accessor for SimpleRNG();
}

uint64_t RetrievedContext.typedValue.getter()
{
  return RetrievedContext.typedValue.getter();
}

uint64_t type metadata accessor for RetrievedContext()
{
  return type metadata accessor for RetrievedContext();
}

uint64_t OSSignpostID.init(log:)()
{
  return OSSignpostID.init(log:)();
}

uint64_t OSSignpostID.rawValue.getter()
{
  return OSSignpostID.rawValue.getter();
}

uint64_t static OSSignpostID.exclusive.getter()
{
  return static OSSignpostID.exclusive.getter();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return type metadata accessor for OSSignpostID();
}

uint64_t OSSignposter.logHandle.getter()
{
  return OSSignposter.logHandle.getter();
}

uint64_t OSSignposter.init(subsystem:category:)()
{
  return OSSignposter.init(subsystem:category:)();
}

uint64_t type metadata accessor for OSSignposter()
{
  return type metadata accessor for OSSignposter();
}

uint64_t type metadata accessor for OSSignpostError()
{
  return type metadata accessor for OSSignpostError();
}

uint64_t OSSignpostIntervalState.signpostID.getter()
{
  return OSSignpostIntervalState.signpostID.getter();
}

uint64_t OSSignpostIntervalState.init(id:isOpen:)()
{
  return OSSignpostIntervalState.init(id:isOpen:)();
}

uint64_t type metadata accessor for OSSignpostIntervalState()
{
  return type metadata accessor for OSSignpostIntervalState();
}

uint64_t checkForErrorAndConsumeState(state:)()
{
  return checkForErrorAndConsumeState(state:)();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t ToolInvocation.init(localToolId:parameterValuesByKey:)()
{
  return ToolInvocation.init(localToolId:parameterValuesByKey:)();
}

uint64_t type metadata accessor for ToolInvocation()
{
  return type metadata accessor for ToolInvocation();
}

uint64_t ToolInvocationSummary.ParameterSummary.Value.localizedLabel.getter()
{
  return ToolInvocationSummary.ParameterSummary.Value.localizedLabel.getter();
}

uint64_t type metadata accessor for ToolInvocationSummary.ParameterSummary.Value()
{
  return type metadata accessor for ToolInvocationSummary.ParameterSummary.Value();
}

uint64_t type metadata accessor for ToolInvocationSummary.ParameterSummary()
{
  return type metadata accessor for ToolInvocationSummary.ParameterSummary();
}

uint64_t ToolInvocationSummary.formatString.getter()
{
  return ToolInvocationSummary.formatString.getter();
}

uint64_t ToolInvocationSummary.parameterSummaries.getter()
{
  return ToolInvocationSummary.parameterSummaries.getter();
}

uint64_t type metadata accessor for ToolInvocationSummary()
{
  return type metadata accessor for ToolInvocationSummary();
}

uint64_t TypedValue.typeIdentifier.getter()
{
  return TypedValue.typeIdentifier.getter();
}

uint64_t TypedValue.displayRepresentation.getter()
{
  return TypedValue.displayRepresentation.getter();
}

uint64_t type metadata accessor for TypedValue()
{
  return type metadata accessor for TypedValue();
}

uint64_t TypeIdentifier.debugDescription.getter()
{
  return TypeIdentifier.debugDescription.getter();
}

uint64_t type metadata accessor for TypeIdentifier()
{
  return type metadata accessor for TypeIdentifier();
}

uint64_t DisplayRepresentation.title.getter()
{
  return DisplayRepresentation.title.getter();
}

uint64_t type metadata accessor for DisplayRepresentation()
{
  return type metadata accessor for DisplayRepresentation();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

uint64_t Dictionary.init(dictionaryLiteral:)()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t Dictionary.Keys.description.getter()
{
  return Dictionary.Keys.description.getter();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

uint64_t static String._fromSubstring(_:)()
{
  return static String._fromSubstring(_:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

Swift::Int __swiftcall String.UTF16View._foreignCount()()
{
  return String.UTF16View._foreignCount()();
}

uint64_t String.UTF16View._nativeGetOffset(for:)()
{
  return String.UTF16View._nativeGetOffset(for:)();
}

uint64_t String.UTF16View.count.getter()
{
  return String.UTF16View.count.getter();
}

uint64_t String.subscript.getter()
{
  return String.subscript.getter();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t Array<A>.getRetrievedContext()()
{
  return Array<A>.getRetrievedContext()();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

uint64_t Set.description.getter()
{
  return Set.description.getter();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t Range<>.init(_:in:)()
{
  return Range<>.init(_:in:)();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)()
{
  return static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
}

uint64_t static os_signpost_type_t.end.getter()
{
  return static os_signpost_type_t.end.getter();
}

uint64_t static os_signpost_type_t.begin.getter()
{
  return static os_signpost_type_t.begin.getter();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t NSObject.hash(into:)()
{
  return NSObject.hash(into:)();
}

uint64_t OS_os_log.signpostsEnabled.getter()
{
  return OS_os_log.signpostsEnabled.getter();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t _HashTable.occupiedBucket(after:)()
{
  return _HashTable.occupiedBucket(after:)();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return _HashTable.nextHole(atOrAfter:)();
}

uint64_t __CocoaSet.makeIterator()()
{
  return __CocoaSet.makeIterator()();
}

uint64_t __CocoaSet.count.getter()
{
  return __CocoaSet.count.getter();
}

uint64_t __CocoaSet.member(for:)()
{
  return __CocoaSet.member(for:)();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return __CocoaSet.Iterator.next()();
}

uint64_t __CocoaSet.contains(_:)()
{
  return __CocoaSet.contains(_:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return static _SetStorage.convert(_:capacity:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
}

uint64_t type metadata accessor for DecodingError()
{
  return type metadata accessor for DecodingError();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

Swift::Bool __swiftcall _NativeDictionary.ensureUnique(isUnique:capacity:)(Swift::Bool isUnique, Swift::Int capacity)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, capacity);
}

Swift::Void __swiftcall _NativeDictionary.copy()()
{
}

uint64_t _NativeDictionary._delete(at:)()
{
  return _NativeDictionary._delete(at:)();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return KeyedDecodingContainer.codingPath.getter();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return KeyedDecodingContainer.allKeys.getter();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Error.localizedDescription.getter()
{
  return Error.localizedDescription.getter();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t AFDeviceSupportsFullSiriUOD()
{
  return _AFDeviceSupportsFullSiriUOD();
}

uint64_t AFDeviceSupportsSystemAssistantExperience()
{
  return _AFDeviceSupportsSystemAssistantExperience();
}

uint64_t AFShouldRunAsrOnServerForUOD()
{
  return _AFShouldRunAsrOnServerForUOD();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_release(const void *aBlock)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_continuation_init()
{
  return _swift_continuation_init();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return _swift_getOpaqueTypeConformance2();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return _swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_random()
{
  return _swift_stdlib_random();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unexpectedError()
{
  return _swift_unexpectedError();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}