uint64_t *sub_33F0(uint64_t *result, _DWORD *a2, int a3, int a4)
{
  uint64_t v4;

  v4 = (*result + a3 - 1) & -(uint64_t)a3;
  *a2 = (*result + *a2 - v4) & -a4;
  *result = v4;
  return result;
}

unsigned char *sub_3428(unsigned char *result, char *a2, int a3)
{
  if (a3 >= 1)
  {
    do
    {
      char v3 = *a2++;
      *result++ = v3;
      --a3;
    }
    while (a3);
  }
  return result;
}

uint64_t sub_3444(uint64_t a1, int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 0;
  }
  int v8 = a4;
  uint64_t v11 = sub_DD92C(a3, a4, " in %s", a4, a5, a6, a7, a8, a1);
  uint64_t v17 = v11;
  if (a2) {
    return sub_DD92C(&a3[(int)v11], v8 - (int)v11, ":%d", v12, v13, v14, v15, v16, a2) + v11;
  }
  return v17;
}

void *sub_34C8(void *result)
{
  if (!result) {
    sub_E53AC();
  }
  *result = result;
  result[1] = result;
  return result;
}

BOOL sub_34E8(void *a1)
{
  if (!a1) {
    sub_E53D8();
  }
  if (!*a1) {
    sub_E5404();
  }
  v1 = (void *)a1[1];
  if (!v1) {
    sub_E5430();
  }
  return (void *)*a1 == a1 || v1 == a1;
}

void *sub_3528(void *result)
{
  if (!result) {
    sub_E545C();
  }
  if (!*result) {
    sub_E5488();
  }
  v1 = (void *)result[1];
  if (!v1) {
    sub_E54B4();
  }
  result[1] = v1[1];
  *(void *)v1[1] = result;
  void *v1 = v1;
  v1[1] = v1;
  return result;
}

uint64_t sub_3570(uint64_t a1)
{
  if (!a1) {
    sub_E54E0();
  }
  return *(void *)a1;
}

uint64_t sub_3590(uint64_t a1)
{
  if (!a1) {
    sub_E550C();
  }
  return *(void *)(a1 + 8);
}

uint64_t *sub_35B0(uint64_t *result)
{
  if (!result) {
    sub_E5538();
  }
  uint64_t v1 = *result;
  if (!*result) {
    sub_E5564();
  }
  uint64_t v2 = result[1];
  if (!v2) {
    sub_E5590();
  }
  *(void *)(v1 + 8) = v2;
  *(void *)result[1] = v1;
  *result = (uint64_t)result;
  result[1] = (uint64_t)result;
  return result;
}

uint64_t sub_35F4(void *a1)
{
  if (!a1) {
    sub_E55BC();
  }
  if (sub_34E8(a1)) {
    return 0;
  }
  else {
    return a1[1];
  }
}

uint64_t sub_3630(void *a1)
{
  if (!a1) {
    sub_E55E8();
  }
  if (sub_34E8(a1)) {
    return 0;
  }
  else {
    return *a1;
  }
}

void *sub_366C(void *result, void *a2)
{
  if (!result) {
    sub_E5614();
  }
  if (!a2) {
    sub_E5640();
  }
  if (!*result) {
    sub_E566C();
  }
  if (!result[1]) {
    sub_E5698();
  }
  *a2 = *result;
  a2[1] = result;
  *(void *)(*result + 8) = a2;
  *result = a2;
  return result;
}

uint64_t sub_36B8(uint64_t result)
{
  if (!result) {
    sub_E56C4();
  }
  uint64_t v1 = *(void **)result;
  if (!*(void *)result) {
    sub_E56F0();
  }
  if (!*(void *)(result + 8)) {
    sub_E571C();
  }
  *(void *)result = *v1;
  *(void *)(*v1 + 8) = result;
  void *v1 = v1;
  v1[1] = v1;
  return result;
}

uint64_t sub_3700(uint64_t a1)
{
  if (!a1) {
    sub_E5748();
  }
  return *(void *)(a1 + 8);
}

uint64_t sub_3720(uint64_t result)
{
  if (!result) {
    sub_E5774();
  }
  return result;
}

uint64_t sub_3738(uint64_t a1)
{
  if (!a1) {
    sub_E57A0();
  }
  return *(void *)a1;
}

uint64_t sub_3758(uint64_t result)
{
  if (!result) {
    sub_E57CC();
  }
  return result;
}

uint64_t sub_3770(uint64_t a1, void *a2, uint64_t a3, int a4, int a5)
{
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  bzero(a2, 16 * a4);
  sub_34C8((void *)a1);
  *(void *)(a1 + 56) = a3;
  *(_DWORD *)(a1 + 64) = a5 * a4;
  *(_DWORD *)(a1 + 68) = a4;
  *(_DWORD *)(a1 + 72) = a5;
  *(void *)(a1 + 80) = a2;
  sub_34C8((void *)(a1 + 88));
  sub_34C8((void *)(a1 + 104));
  if (a4 >= 1)
  {
    uint64_t v10 = 0;
    do
    {
      sub_366C((void *)(a1 + 88), (void *)(*(void *)(a1 + 80) + v10));
      v10 += 16;
    }
    while (16 * a4 != v10);
  }
  *(_DWORD *)(a1 + 124) = a4;
  return 0;
}

uint64_t sub_3838(int a1, int a2, unsigned int a3, uint64_t *a4)
{
  uint64_t result = 4294966295;
  if (a1 >= 1 && a2 >= 1)
  {
    unsigned int v6 = a3;
    if (a3 <= 0x40)
    {
      if (a3)
      {
        if ((a3 & (a3 - 1)) != 0 || !a4) {
          return result;
        }
      }
      else
      {
        if (!a4) {
          return result;
        }
        unsigned int v6 = 64;
      }
      *a4 = 0;
      int v8 = (v6 - 1 + a2) & -v6;
      int v9 = (v6 - 1 + v8) & -v6;
      int v10 = v9 * a1;
      if (0x7FFFFFFF / v9 <= a1 || v10 == 0) {
        return 4294966281;
      }
      uint64_t v12 = malloc_type_malloc(0x80uLL, 0x10300408F93010DuLL);
      if (v12)
      {
        uint64_t v13 = (uint64_t)v12;
        uint64_t v14 = malloc_type_malloc(16 * a1, 0x20040A4A59CD2uLL);
        if (v14)
        {
          uint64_t v15 = v14;
          signed int v16 = v6 - 1 + v10;
          uint64_t v17 = malloc_type_malloc(v16, 0x100004077774924uLL);
          if (v17)
          {
            v18 = v17;
            sub_3770(v13, v15, ((unint64_t)v17 + v6 - 1) & -(uint64_t)v6, a1, v8);
            uint64_t result = 0;
            *(void *)(v13 + 16) = v13;
            *(void *)(v13 + 24) = v15;
            *(_DWORD *)(v13 + 40) = 128;
            *(_DWORD *)(v13 + 44) = 16 * a1;
            *(void *)(v13 + 32) = v18;
            *(_DWORD *)(v13 + 48) = v16;
            *a4 = v13;
            return result;
          }
          free((void *)v13);
          v19 = v15;
        }
        else
        {
          v19 = (void *)v13;
        }
        free(v19);
      }
      return 4294966293;
    }
  }
  return result;
}

uint64_t sub_39C4(uint64_t a1, int a2, int a3, int a4, unsigned int a5, uint64_t *a6)
{
  uint64_t v16 = a1;
  int v15 = a2;
  uint64_t result = 4294966295;
  if (a2 >= 1 && a3 >= 1 && a4 >= 1 && a5 <= 0x40)
  {
    if (a5)
    {
      if ((a5 & (a5 - 1)) != 0 || !a6) {
        return result;
      }
    }
    else
    {
      if (!a6) {
        return result;
      }
      a5 = 64;
    }
    *a6 = 0;
    int v9 = (a4 + a5 - 1) & -a5;
    sub_33F0(&v16, &v15, a5, a5);
    if (v15 / v9 >= a3) {
      int v10 = a3;
    }
    else {
      int v10 = v15 / v9;
    }
    uint64_t v11 = malloc_type_malloc(0x80uLL, 0x10300408F93010DuLL);
    if (v11)
    {
      uint64_t v12 = (uint64_t)v11;
      uint64_t v13 = malloc_type_malloc(16 * v10, 0x20040A4A59CD2uLL);
      if (v13)
      {
        uint64_t v14 = v13;
        sub_3770(v12, v13, v16, v10, v9);
        uint64_t result = 0;
        *(void *)(v12 + 16) = v12;
        *(void *)(v12 + 24) = v14;
        *(_DWORD *)(v12 + 40) = 128;
        *(_DWORD *)(v12 + 44) = 16 * v10;
        *a6 = v12;
        return result;
      }
      free((void *)v12);
    }
    return 4294966293;
  }
  return result;
}

uint64_t sub_3B04(void *a1)
{
  if (!a1) {
    return 4294966295;
  }
  if (!sub_34E8(a1 + 13)) {
    return 4294966280;
  }
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    free(v2);
    a1[4] = 0;
  }
  char v3 = (void *)a1[3];
  if (v3)
  {
    free(v3);
    a1[3] = 0;
  }
  uint64_t result = a1[2];
  if (result)
  {
    free((void *)result);
    return 0;
  }
  return result;
}

BOOL sub_3B78(uint64_t a1, unint64_t a2)
{
  BOOL result = 0;
  if (a1)
  {
    unint64_t v2 = *(void *)(a1 + 56);
    if (v2 <= a2 && v2 + *(int *)(a1 + 64) > a2) {
      return 1;
    }
  }
  return result;
}

uint64_t sub_3BA8(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t result = 4294966295;
  if (a1 && a2)
  {
    *a2 = 0;
    uint64_t v7 = sub_35F4((void *)(a1 + 88));
    if (v7)
    {
      int v8 = (void *)v7;
      sub_3528((void *)(a1 + 88));
      sub_366C((void *)(a1 + 104), v8);
      int v9 = *(_DWORD *)(a1 + 72);
      *a2 = *(void *)(a1 + 56) + (int)(v9 * (((unint64_t)v8 - *(void *)(a1 + 80)) >> 4));
      if (a3) {
        *a3 = v9;
      }
      uint64_t result = 0;
      --*(_DWORD *)(a1 + 124);
    }
    else
    {
      return 4294966289;
    }
  }
  return result;
}

uint64_t sub_3C58(uint64_t a1, unint64_t a2)
{
  if (!a1) {
    return 4294966295;
  }
  unint64_t v3 = *(void *)(a1 + 56);
  if (a2 < v3 || v3 + *(int *)(a1 + 64) <= a2) {
    return 4294966295;
  }
  v4 = (uint64_t *)(*(void *)(a1 + 80) + ((uint64_t)(((a2 - v3) / *(int *)(a1 + 72)) << 32) >> 28));
  sub_35B0(v4);
  sub_366C((void *)(a1 + 88), v4);
  uint64_t result = 0;
  ++*(_DWORD *)(a1 + 124);
  return result;
}

BOOL sub_3CE4(uint64_t a1)
{
  return !a1 || sub_34E8((void *)(a1 + 104));
}

BOOL sub_3CF8(BOOL result)
{
  if (result) {
    return !sub_34E8((void *)(result + 88));
  }
  return result;
}

uint64_t sub_3D24(uint64_t a1, int a2, void *a3)
{
  if (!a1) {
    return 4294966295;
  }
  uint64_t result = 4294966295;
  if (a3)
  {
    if (*(_DWORD *)(a1 + 68) > a2)
    {
      uint64_t result = 0;
      *a3 = *(void *)(a1 + 56) + *(int *)(a1 + 72) * (uint64_t)a2;
    }
  }
  return result;
}

uint64_t sub_3D60(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t result = 4294966295;
  if (a1)
  {
    if (a3)
    {
      unint64_t v5 = *(void *)(a1 + 56);
      if (a2 >= v5 && v5 + *(int *)(a1 + 64) > a2)
      {
        uint64_t result = 0;
        *a3 = (a2 - v5) / *(int *)(a1 + 72);
      }
    }
  }
  return result;
}

uint64_t sub_3DA0(uint64_t a1, unsigned int a2, int a3)
{
  if (a2 > 0xB) {
    return 0;
  }
  else {
    return *(void *)(a1 + 96 * (a3 > 0) + 8 * a2 + 48);
  }
}

uint64_t sub_3DCC(int a1, void *a2)
{
  if (sub_D1C38(0x3Du, 7))
  {
    int v4 = sub_D1C7C(0x3Du);
    __uint64_t v5 = sub_DDEFC();
    unsigned int v6 = (const char *)sub_D1CB0(7);
    if (v4)
    {
      printf("%lld %d AVE %s: %s Enter %d %p\n", v5, 61, v6, "AVE_Dump_Create", a1, a2);
      __uint64_t v7 = sub_DDEFC();
      v21 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s Enter %d %p", v7, 61, v21, "AVE_Dump_Create", a1, a2);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %d %p", v5, 61, v6, "AVE_Dump_Create", a1, a2);
    }
  }
  if (a2)
  {
    int v8 = malloc_type_malloc(0xF0uLL, 0x1020040B865D711uLL);
    if (v8)
    {
      uint64_t v9 = 0;
      v8[13] = 0u;
      v8[14] = 0u;
      v8[11] = 0u;
      v8[12] = 0u;
      v8[9] = 0u;
      v8[10] = 0u;
      v8[7] = 0u;
      v8[8] = 0u;
      v8[5] = 0u;
      v8[6] = 0u;
      v8[3] = 0u;
      v8[4] = 0u;
      v8[1] = 0u;
      v8[2] = 0u;
      *int v8 = 0u;
      *(_DWORD *)int v8 = a1;
      *a2 = v8;
    }
    else
    {
      if (sub_D1C38(0x3Du, 4))
      {
        int v13 = sub_D1C7C(0x3Du);
        __uint64_t v14 = sub_DDEFC();
        int v15 = (const char *)sub_D1CB0(4);
        if (v13)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create dump %d %p\n", v14, 61, v15, "AVE_Dump_Create", 89, "pDump != __null", a1, a2);
          __uint64_t v14 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create dump %d %p", v14, 61);
      }
      uint64_t v9 = 4294966293;
    }
  }
  else
  {
    if (sub_D1C38(0x3Du, 4))
    {
      int v10 = sub_D1C7C(0x3Du);
      __uint64_t v11 = sub_DDEFC();
      uint64_t v12 = (const char *)sub_D1CB0(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %d %p\n", v11, 61, v12, "AVE_Dump_Create", 85, "ppDump != __null", a1, 0);
        __uint64_t v11 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %d %p", v11, 61);
    }
    uint64_t v9 = 4294966295;
  }
  if (sub_D1C38(0x3Du, 7))
  {
    int v16 = sub_D1C7C(0x3Du);
    __uint64_t v17 = sub_DDEFC();
    v18 = (const char *)sub_D1CB0(7);
    if (v16)
    {
      printf("%lld %d AVE %s: %s Exit %d %p %d\n", v17, 61, v18, "AVE_Dump_Create", a1, a2, v9);
      __uint64_t v19 = sub_DDEFC();
      sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s Exit %d %p %d", v19);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %d %p %d", v17);
    }
  }
  return v9;
}

uint64_t sub_4178(void *a1)
{
  if (sub_D1C38(0x3Du, 7))
  {
    int v2 = sub_D1C7C(0x3Du);
    __uint64_t v3 = sub_DDEFC();
    int v4 = (const char *)sub_D1CB0(7);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", v3, 61, v4, "AVE_Dump_Destroy", a1);
      __uint64_t v5 = sub_DDEFC();
      __uint64_t v11 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 61, v11, "AVE_Dump_Destroy", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", v3, 61, v4, "AVE_Dump_Destroy", a1);
    }
  }
  if (a1) {
    free(a1);
  }
  if (sub_D1C38(0x3Du, 7))
  {
    int v6 = sub_D1C7C(0x3Du);
    __uint64_t v7 = sub_DDEFC();
    int v8 = (const char *)sub_D1CB0(7);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v7, 61, v8, "AVE_Dump_Destroy", 0, 0);
      __uint64_t v9 = sub_DDEFC();
      uint64_t v12 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v9, 61, v12, "AVE_Dump_Destroy", 0, 0);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v7, 61, v8, "AVE_Dump_Destroy", 0, 0);
    }
  }
  return 0;
}

uint64_t sub_42F0(_DWORD *a1, unsigned int a2, int a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a6;
  memset(v38, 0, sizeof(v38));
  int v13 = sub_DD92C((char *)v38, 128, "%d-%s-%dx%d-%s-%d", a4, (uint64_t)a5, a6, a7, a8, *a1);
  int v19 = v13;
  if ((a3 & 0x80000000) == 0) {
    int v19 = sub_DD92C((char *)v38 + v13, 128 - v13, "-MP%d", v14, v15, v16, v17, v18, a3) + v13;
  }
  if (a1[3] == 1) {
    v19 += sub_DD92C((char *)v38 + v19, 128 - v19, "-%s-%d", v14, v15, v16, v17, v18, (char)off_160050[a1[4]]);
  }
  char v20 = pthread_self();
  rand();
  int v26 = sub_DD92C((char *)v38 + v19, 128 - v19, "-%lu-%d-%s", v21, v22, v23, v24, v25, v20);
  if (a2 == 1)
  {
    int v32 = a1[3];
    uint64_t v33 = a4;
    if (v32 == 1) {
      v34 = &off_159100[a1[4]];
    }
    else {
      v34 = &off_159100[v32 + 1];
    }
    v35 = v34 + 1;
  }
  else
  {
    if ((a2 & 0xFFFFFFFD) == 1 && (a1[2] & (1 << a2)) != 0) {
      v35 = &off_1590B8[9 * a2 + 2];
    }
    else {
      v35 = &off_1590B8[9 * a2 + 1];
    }
    uint64_t v33 = a4;
  }
  sub_DD92C((char *)v38 + v19 + (uint64_t)v26, 128 - (v19 + v26), ".%s", v27, v28, v29, v30, v31, (char)*v35);
  return sub_DDD0C(v33, 0, (uint64_t)v38, a5, v8);
}

uint64_t sub_4580(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  *(_OWORD *)__filename = 0u;
  long long v35 = 0u;
  if ((int)a1[9] < 1) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  __uint64_t v11 = a1 + 12;
  do
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v32 = v9;
    do
    {
      if ((a1[1] & (1 << v13)) != 0 && !*(void *)&v11[2 * v13])
      {
        if ((int)a1[9] <= 1) {
          int v14 = -1;
        }
        else {
          int v14 = v9;
        }
        uint64_t v10 = sub_42F0(a1, v13, v14, a2, __filename, 256, a7, a8);
        BOOL v15 = (a1[2] & (1 << v13)) != 0 && v12 == 27;
        uint64_t v16 = 5;
        if (v15) {
          uint64_t v16 = 6;
        }
        uint64_t v17 = (&off_1590B8[v12])[v16];
        uint64_t v18 = fopen(__filename, v17);
        *(void *)&v11[2 * v13] = v18;
        if (v18)
        {
          if (sub_D1C38(0x3Du, 6))
          {
            int v19 = sub_D1C7C(0x3Du);
            __uint64_t v20 = sub_DDEFC();
            uint64_t v21 = (const char *)sub_D1CB0(6);
            if (v19)
            {
              printf("%lld %d AVE %s: %s:%d open dump file %p %d | %d %d %s %s\n", v20, 61, v21, "AVE_Dump_OpenFiles", 262, a1, *a1, v9, v13, __filename, v17);
              __uint64_t v22 = sub_DDEFC();
              uint64_t v30 = sub_D1CB0(6);
              __uint64_t v28 = v22;
            }
            else
            {
              uint64_t v30 = (void *)v21;
              __uint64_t v28 = v20;
            }
            syslog(3, "%lld %d AVE %s: %s:%d open dump file %p %d | %d %d %s %s", v28, 61, v30, "AVE_Dump_OpenFiles");
          }
        }
        else if (sub_D1C38(0x3Du, 4))
        {
          int v23 = sub_D1C7C(0x3Du);
          __uint64_t v24 = sub_DDEFC();
          uint64_t v25 = (const char *)sub_D1CB0(4);
          if (v23)
          {
            printf("%lld %d AVE %s: %s:%d fail to open dump file %p %d | %d %d %s %s\n", v24, 61, v25, "AVE_Dump_OpenFiles", 257, a1, *a1, v9, v13, __filename, v17);
            __uint64_t v26 = sub_DDEFC();
            uint64_t v31 = sub_D1CB0(4);
            __uint64_t v29 = v26;
          }
          else
          {
            uint64_t v31 = (void *)v25;
            __uint64_t v29 = v24;
          }
          syslog(3, "%lld %d AVE %s: %s:%d fail to open dump file %p %d | %d %d %s %s", v29, 61, v31, "AVE_Dump_OpenFiles");
        }
      }
      ++v13;
      v12 += 9;
    }
    while (v12 != 108);
    ++v9;
    v11 += 24;
  }
  while (v32 + 1 < (int)a1[9]);
  return v10;
}

uint64_t sub_48E8(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t result = 0;
  uint64_t v4 = a1 + 48;
  char v5 = 1;
  do
  {
    char v6 = v5;
    __uint64_t v7 = (FILE **)(v4 + 96 * v2);
    for (uint64_t i = -2; i != 10; ++i)
    {
      if (*v7) {
        BOOL v9 = i > 8;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9 && ((0x1C1u >> i) & 1) != 0)
      {
        if (fprintf(*v7, off_159418[i]) <= 0) {
          uint64_t result = 4294965296;
        }
        else {
          uint64_t result = 0;
        }
      }
      ++v7;
    }
    char v5 = 0;
    uint64_t v2 = 1;
  }
  while ((v6 & 1) != 0);
  return result;
}

uint64_t sub_49A0(uint64_t a1, const void *a2, int a3, int a4, int a5, int a6, void *a7, int a8, int a9, int a10, int a11)
{
  if (sub_D1C38(0x3Du, 7))
  {
    int v19 = sub_D1C7C(0x3Du);
    __uint64_t v20 = sub_DDEFC();
    uint64_t v21 = (const char *)sub_D1CB0(7);
    if (v19)
    {
      printf("%lld %d AVE %s: %s Enter %p %p %d %d 0x%x 0x%x %p %d %d %d %d\n", v20, 61, v21, "AVE_Dump_Init", (const void *)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
      __uint64_t v40 = sub_DDEFC();
      __uint64_t v22 = sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s Enter %p %p %d %d 0x%x 0x%x %p %d %d %d %d", v40, 61, v22, "AVE_Dump_Init", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p %p %d %d 0x%x 0x%x %p %d %d %d %d", v20, 61, v21, "AVE_Dump_Init", a1);
    }
  }
  if (a1 && a7)
  {
    *(_DWORD *)(a1 + 4) = a5;
    *(_DWORD *)(a1 + 8) = a6;
    *(_DWORD *)(a1 + 12) = a3;
    *(_DWORD *)(a1 + 16) = a4;
    *(void *)(a1 + 20) = *a7;
    *(_DWORD *)(a1 + 28) = a9;
    *(_DWORD *)(a1 + 32) = a10;
    *(_DWORD *)(a1 + 36) = a8;
    *(_DWORD *)(a1 + 40) = a11;
    uint64_t v23 = sub_4580((_DWORD *)a1, (uint64_t)a2, v13, v14, v15, v16, v17, v18);
    if (!v23)
    {
      sub_48E8(a1);
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  if (sub_D1C38(0x3Du, 4))
  {
    int v24 = sub_D1C7C(0x3Du);
    __uint64_t v25 = sub_DDEFC();
    __uint64_t v26 = (const char *)sub_D1CB0(4);
    if (v24)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %p %d %d 0x%x 0x%x %p %d %d %d %d\n", v25, 61, v26, "AVE_Dump_Init", 457, "pDump != __null && pResolution != __null", (const void *)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
      __uint64_t v41 = sub_DDEFC();
      long long v39 = sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %p %d %d 0x%x 0x%x %p %d %d %d %d", v41, 61, v39, "AVE_Dump_Init", 457, "pDump != __null && pResolution != __null", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %p %d %d 0x%x 0x%x %p %d %d %d %d", v25, 61, v26, "AVE_Dump_Init", 457, "pDump != __null && pResolution != __null", a1);
    }
  }
  uint64_t v23 = 4294966295;
  if (a1)
  {
LABEL_14:
    uint64_t v27 = 0;
    char v28 = 1;
    do
    {
      uint64_t v29 = 0;
      char v30 = v28;
      uint64_t v31 = a1 + 48 + 96 * v27;
      do
      {
        uint64_t v32 = *(FILE **)(v31 + v29);
        if (v32)
        {
          fclose(v32);
          *(void *)(v31 + v29) = 0;
        }
        v29 += 8;
      }
      while (v29 != 96);
      char v28 = 0;
      uint64_t v27 = 1;
    }
    while ((v30 & 1) != 0);
  }
LABEL_20:
  if (sub_D1C38(0x3Du, 7))
  {
    int v33 = sub_D1C7C(0x3Du);
    __uint64_t v34 = sub_DDEFC();
    long long v35 = (const char *)sub_D1CB0(7);
    if (v33)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %d %d 0x%x 0x%x %p %d %d %d %d %d\n", v34, 61, v35, "AVE_Dump_Init", (const void *)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v23);
      __uint64_t v36 = sub_DDEFC();
      long long v37 = sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %d %d 0x%x 0x%x %p %d %d %d %d %d", v36, 61, v37, "AVE_Dump_Init", a1, a2);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %d %d 0x%x 0x%x %p %d %d %d %d %d", v34, 61, v35, "AVE_Dump_Init", a1, a2);
    }
  }
  return v23;
}

uint64_t sub_4E9C(const void *a1)
{
  if (sub_D1C38(0x3Du, 7))
  {
    int v2 = sub_D1C7C(0x3Du);
    __uint64_t v3 = sub_DDEFC();
    uint64_t v4 = (const char *)sub_D1CB0(7);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", v3, 61, v4, "AVE_Dump_Uninit", a1);
      __uint64_t v5 = sub_DDEFC();
      uint64_t v17 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 61, v17, "AVE_Dump_Uninit", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", v3, 61, v4, "AVE_Dump_Uninit", a1);
    }
  }
  if (a1)
  {
    uint64_t v6 = 0;
    char v7 = 1;
    do
    {
      uint64_t v8 = 0;
      char v9 = v7;
      uint64_t v10 = (uint64_t)a1 + 96 * v6 + 48;
      do
      {
        __uint64_t v11 = *(FILE **)(v10 + v8);
        if (v11)
        {
          fclose(v11);
          *(void *)(v10 + v8) = 0;
        }
        v8 += 8;
      }
      while (v8 != 96);
      char v7 = 0;
      uint64_t v6 = 1;
    }
    while ((v9 & 1) != 0);
  }
  if (sub_D1C38(0x3Du, 7))
  {
    int v12 = sub_D1C7C(0x3Du);
    __uint64_t v13 = sub_DDEFC();
    uint64_t v14 = (const char *)sub_D1CB0(7);
    if (v12)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v13, 61, v14, "AVE_Dump_Uninit", a1, 0);
      __uint64_t v15 = sub_DDEFC();
      uint64_t v18 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v15, 61, v18, "AVE_Dump_Uninit", a1, 0);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v13, 61, v14, "AVE_Dump_Uninit", a1, 0);
    }
  }
  return 0;
}

uint64_t sub_5058(_DWORD *a1, int a2, __CVBuffer *a3)
{
  if (sub_D1C38(0x3Du, 8))
  {
    int v6 = sub_D1C7C(0x3Du);
    __uint64_t v7 = sub_DDEFC();
    uint64_t v8 = (const char *)sub_D1CB0(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %p\n", v7, 61, v8, "AVE_Dump_WriteInput", a1, a2, a3);
      __uint64_t v7 = sub_DDEFC();
      sub_D1CB0(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %p", v7);
  }
  if (a1)
  {
    char v9 = *(FILE **)&a1[24 * (a2 > 0) + 12];
    if (v9)
    {
      if (a3) {
        uint64_t v10 = sub_CE970(a3, a1[2] & 1, v9);
      }
      else {
        uint64_t v10 = 4294966287;
      }
    }
    else
    {
      uint64_t v10 = 4294966288;
    }
  }
  else
  {
    if (sub_D1C38(0x3Du, 4))
    {
      int v11 = sub_D1C7C(0x3Du);
      __uint64_t v12 = sub_DDEFC();
      __uint64_t v13 = (const char *)sub_D1CB0(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p\n", v12, 61, v13, "AVE_Dump_WriteInput", 533, "pDump != __null", 0, a2, a3);
        __uint64_t v14 = sub_DDEFC();
        __uint64_t v20 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v14, 61, v20);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v12, 61, v13);
      }
    }
    uint64_t v10 = 4294966295;
  }
  if (sub_D1C38(0x3Du, 8))
  {
    int v15 = sub_D1C7C(0x3Du);
    __uint64_t v16 = sub_DDEFC();
    uint64_t v17 = (const char *)sub_D1CB0(8);
    if (v15)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %p %d\n", v16, 61, v17, "AVE_Dump_WriteInput", a1, a2, a3, v10);
      __uint64_t v18 = sub_DDEFC();
      sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d", v18, 61);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d", v16, 61);
    }
  }
  return v10;
}

uint64_t sub_5338(void *a1, int a2, const void *a3, int a4)
{
  if (sub_D1C38(0x3Du, 8))
  {
    int v8 = sub_D1C7C(0x3Du);
    __uint64_t v9 = sub_DDEFC();
    uint64_t v10 = (const char *)sub_D1CB0(8);
    if (v8)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %p %d\n", v9, 61, v10, "AVE_Dump_WriteOutput", a1, a2, a3, a4);
      __uint64_t v9 = sub_DDEFC();
      sub_D1CB0(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %p %d", v9, 61);
  }
  if (a1)
  {
    int v11 = (FILE *)a1[12 * (a2 > 0) + 7];
    if (v11)
    {
      uint64_t v12 = 4294966287;
      if (a3 && a4 >= 1)
      {
        int v13 = fwrite(a3, 1uLL, a4, v11);
        uint64_t v12 = v13 == a4 ? 0 : 4294965296;
        if (sub_D1C38(0x3Du, 8))
        {
          int v14 = sub_D1C7C(0x3Du);
          __uint64_t v15 = sub_DDEFC();
          __uint64_t v16 = (const char *)sub_D1CB0(8);
          if (v14)
          {
            printf("%lld %d AVE %s: %s:%d %p %d %p %d %d\n", v15, 61, v16, "AVE_Dump_WriteOutput", 596, a1, a2, a3, a4, v13);
            __uint64_t v17 = sub_DDEFC();
            uint64_t v27 = sub_D1CB0(8);
            syslog(3, "%lld %d AVE %s: %s:%d %p %d %p %d %d", v17, 61, v27);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %p %d %p %d %d", v15, 61, v16);
          }
        }
      }
    }
    else
    {
      uint64_t v12 = 4294966288;
    }
  }
  else
  {
    if (sub_D1C38(0x3Du, 4))
    {
      int v18 = sub_D1C7C(0x3Du);
      __uint64_t v19 = sub_DDEFC();
      __uint64_t v20 = (const char *)sub_D1CB0(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p %d\n", v19, 61, v20, "AVE_Dump_WriteOutput", 578, "pDump != __null", 0, a2, a3, a4);
        __uint64_t v21 = sub_DDEFC();
        char v28 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p %d", v21, 61, v28, "AVE_Dump_WriteOutput");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p %d", v19, 61, v20, "AVE_Dump_WriteOutput");
      }
    }
    uint64_t v12 = 4294966295;
  }
  if (sub_D1C38(0x3Du, 8))
  {
    int v22 = sub_D1C7C(0x3Du);
    __uint64_t v23 = sub_DDEFC();
    int v24 = (const char *)sub_D1CB0(8);
    if (v22)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %p %d %d\n", v23, 61, v24, "AVE_Dump_WriteOutput", a1, a2, a3, a4, v12);
      __uint64_t v25 = sub_DDEFC();
      sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d %d", v25, 61);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d %d", v23, 61);
    }
  }
  return v12;
}

uint64_t sub_5734(void *a1, int a2, int a3, double *a4)
{
  if (sub_D1C38(0x3Du, 8))
  {
    int v8 = sub_D1C7C(0x3Du);
    __uint64_t v9 = sub_DDEFC();
    uint64_t v10 = (const char *)sub_D1CB0(8);
    if (v8)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %d %p\n", v9, 61, v10, "AVE_Dump_WriteISPMetadata", a1, a2, a3, a4);
      __uint64_t v9 = sub_DDEFC();
      sub_D1CB0(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %d %p", v9, 61);
  }
  if (a1)
  {
    int v11 = (FILE *)a1[12 * (a2 > 0) + 8];
    if (v11)
    {
      if (a4)
      {
        if (fprintf(v11, "%5d, %4.6f, %4.6f, %4.6f, %f, %f, %d, %d, %d, %d\n", a3, *a4, a4[1], a4[2], a4[3], a4[4], *((_DWORD *)a4 + 16), *((_DWORD *)a4 + 17), *((_DWORD *)a4 + 18), *((_DWORD *)a4 + 20)) <= 0)uint64_t v12 = 4294965296; {
        else
        }
          uint64_t v12 = 0;
      }
      else
      {
        uint64_t v12 = 4294966287;
      }
    }
    else
    {
      uint64_t v12 = 4294966288;
    }
  }
  else
  {
    if (sub_D1C38(0x3Du, 4))
    {
      int v13 = sub_D1C7C(0x3Du);
      __uint64_t v14 = sub_DDEFC();
      __uint64_t v15 = (const char *)sub_D1CB0(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p\n", v14, 61, v15, "AVE_Dump_WriteISPMetadata", 625, "pDump != __null", 0, a2, a3, a4);
        __uint64_t v16 = sub_DDEFC();
        int v22 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p", v16, 61, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p", v14, 61, v15);
      }
    }
    uint64_t v12 = 4294966295;
  }
  if (sub_D1C38(0x3Du, 8))
  {
    int v17 = sub_D1C7C(0x3Du);
    __uint64_t v18 = sub_DDEFC();
    __uint64_t v19 = (const char *)sub_D1CB0(8);
    if (v17)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %d %p %d\n", v18, 61, v19, "AVE_Dump_WriteISPMetadata", a1, a2, a3, a4, v12);
      __uint64_t v20 = sub_DDEFC();
      __uint64_t v23 = sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %d %p %d", v20, 61, v23);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %d %p %d", v18, 61, v19);
    }
  }
  return v12;
}

uint64_t sub_5A7C(void *a1, int a2, const void *a3, int a4)
{
  if (sub_D1C38(0x3Du, 8))
  {
    int v8 = sub_D1C7C(0x3Du);
    __uint64_t v9 = sub_DDEFC();
    uint64_t v10 = (const char *)sub_D1CB0(8);
    if (v8)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %p %d\n", v9, 61, v10, "AVE_Dump_WriteMBStats", a1, a2, a3, a4);
      __uint64_t v9 = sub_DDEFC();
      sub_D1CB0(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %p %d", v9, 61);
  }
  if (a1)
  {
    int v11 = (FILE *)a1[12 * (a2 > 0) + 9];
    if (v11)
    {
      uint64_t v12 = 4294966287;
      if (a3 && a4 >= 1)
      {
        int v13 = fwrite(a3, 1uLL, a4, v11);
        uint64_t v12 = v13 == a4 ? 0 : 4294965296;
        if (sub_D1C38(0x3Du, 8))
        {
          int v14 = sub_D1C7C(0x3Du);
          __uint64_t v15 = sub_DDEFC();
          __uint64_t v16 = (const char *)sub_D1CB0(8);
          if (v14)
          {
            printf("%lld %d AVE %s: %s:%d %p %d %p %d %d\n", v15, 61, v16, "AVE_Dump_WriteMBStats", 692, a1, a2, a3, a4, v13);
            __uint64_t v17 = sub_DDEFC();
            uint64_t v27 = sub_D1CB0(8);
            syslog(3, "%lld %d AVE %s: %s:%d %p %d %p %d %d", v17, 61, v27);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %p %d %p %d %d", v15, 61, v16);
          }
        }
      }
    }
    else
    {
      uint64_t v12 = 4294966288;
    }
  }
  else
  {
    if (sub_D1C38(0x3Du, 4))
    {
      int v18 = sub_D1C7C(0x3Du);
      __uint64_t v19 = sub_DDEFC();
      __uint64_t v20 = (const char *)sub_D1CB0(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p %d\n", v19, 61, v20, "AVE_Dump_WriteMBStats", 674, "pDump != __null", 0, a2, a3, a4);
        __uint64_t v21 = sub_DDEFC();
        char v28 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p %d", v21, 61, v28, "AVE_Dump_WriteMBStats");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p %d", v19, 61, v20, "AVE_Dump_WriteMBStats");
      }
    }
    uint64_t v12 = 4294966295;
  }
  if (sub_D1C38(0x3Du, 8))
  {
    int v22 = sub_D1C7C(0x3Du);
    __uint64_t v23 = sub_DDEFC();
    int v24 = (const char *)sub_D1CB0(8);
    if (v22)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %p %d %d\n", v23, 61, v24, "AVE_Dump_WriteMBStats", a1, a2, a3, a4, v12);
      __uint64_t v25 = sub_DDEFC();
      sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d %d", v25, 61);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d %d", v23, 61);
    }
  }
  return v12;
}

uint64_t sub_5E78(void *a1, int a2, int *a3)
{
  if (sub_D1C38(0x3Du, 8))
  {
    int v6 = sub_D1C7C(0x3Du);
    __uint64_t v7 = sub_DDEFC();
    int v8 = (const char *)sub_D1CB0(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %p\n", v7, 61, v8, "AVE_Dump_WriteHwEventTrace", a1, a2, a3);
      __uint64_t v7 = sub_DDEFC();
      sub_D1CB0(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %p", v7);
  }
  if (a1)
  {
    __uint64_t v9 = (FILE *)a1[12 * (a2 > 0) + 14];
    if (v9)
    {
      if (a3)
      {
        if (*a3 < 2)
        {
          uint64_t v13 = 0;
        }
        else
        {
          uint64_t v10 = (unsigned __int8 *)(a3 + 5);
          uint64_t v11 = 1;
          do
          {
            int v12 = fprintf(v9, "%6d, %d, %d, %6d, %6d, 0x%x, 0x%x, 0x%x, 0x%x\n", v11++, v10[1], *v10, v10[2], v10[3], *((_DWORD *)v10 + 1), *((_DWORD *)v10 + 2), *((_DWORD *)v10 + 3), *((_DWORD *)v10 + 4));
            v10 += 20;
          }
          while (v11 < *a3);
          if (v12 <= 0) {
            uint64_t v13 = 4294965296;
          }
          else {
            uint64_t v13 = 0;
          }
        }
      }
      else
      {
        uint64_t v13 = 4294966287;
      }
    }
    else
    {
      uint64_t v13 = 4294966288;
    }
  }
  else
  {
    if (sub_D1C38(0x3Du, 4))
    {
      int v14 = sub_D1C7C(0x3Du);
      __uint64_t v15 = sub_DDEFC();
      __uint64_t v16 = (const char *)sub_D1CB0(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p\n", v15, 61, v16, "AVE_Dump_WriteHwEventTrace", 720, "pDump != __null", 0, a2, a3);
        __uint64_t v17 = sub_DDEFC();
        __uint64_t v23 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v17, 61, v23);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v15, 61, v16);
      }
    }
    uint64_t v13 = 4294966295;
  }
  if (sub_D1C38(0x3Du, 8))
  {
    int v18 = sub_D1C7C(0x3Du);
    __uint64_t v19 = sub_DDEFC();
    __uint64_t v20 = (const char *)sub_D1CB0(8);
    if (v18)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %p %d\n", v19, 61, v20, "AVE_Dump_WriteHwEventTrace", a1, a2, a3, v13);
      __uint64_t v21 = sub_DDEFC();
      sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d", v21, 61);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d", v19, 61);
    }
  }
  return v13;
}

uint64_t sub_61C0(void *a1, int a2, int a3, float *a4)
{
  if (sub_D1C38(0x3Du, 8))
  {
    int v8 = sub_D1C7C(0x3Du);
    __uint64_t v9 = sub_DDEFC();
    uint64_t v10 = (const char *)sub_D1CB0(8);
    if (v8)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %d %p\n", v9, 61, v10, "AVE_Dump_WriteVQMetrics", a1, a2, a3, a4);
      __uint64_t v9 = sub_DDEFC();
      sub_D1CB0(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %d %p", v9, 61);
  }
  if (a1)
  {
    uint64_t v11 = (FILE *)a1[12 * (a2 > 0) + 15];
    if (v11)
    {
      if (a4)
      {
        if (fprintf(v11, "%d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f\n", a3, a4[4], a4[5], a4[6], *a4, a4[1], a4[2]) <= 0) {
          uint64_t v12 = 4294965296;
        }
        else {
          uint64_t v12 = 0;
        }
      }
      else
      {
        uint64_t v12 = 4294966287;
      }
    }
    else
    {
      uint64_t v12 = 4294966288;
    }
  }
  else
  {
    if (sub_D1C38(0x3Du, 4))
    {
      int v13 = sub_D1C7C(0x3Du);
      __uint64_t v14 = sub_DDEFC();
      __uint64_t v15 = (const char *)sub_D1CB0(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p\n", v14, 61, v15, "AVE_Dump_WriteVQMetrics", 772, "pDump != __null", 0, a2, a3, a4);
        __uint64_t v16 = sub_DDEFC();
        int v22 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p", v16, 61, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p", v14, 61, v15);
      }
    }
    uint64_t v12 = 4294966295;
  }
  if (sub_D1C38(0x3Du, 8))
  {
    int v17 = sub_D1C7C(0x3Du);
    __uint64_t v18 = sub_DDEFC();
    __uint64_t v19 = (const char *)sub_D1CB0(8);
    if (v17)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %d %p %d\n", v18, 61, v19, "AVE_Dump_WriteVQMetrics", a1, a2, a3, a4, v12);
      __uint64_t v20 = sub_DDEFC();
      __uint64_t v23 = sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %d %p %d", v20, 61, v23);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %d %p %d", v18, 61, v19);
    }
  }
  return v12;
}

uint64_t sub_6514(void *a1, int a2, int a3, double *a4)
{
  if (sub_D1C38(0x3Du, 8))
  {
    int v8 = sub_D1C7C(0x3Du);
    __uint64_t v9 = sub_DDEFC();
    uint64_t v10 = (const char *)sub_D1CB0(8);
    if (v8)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %d %p\n", v9, 61, v10, "AVE_Dump_WriteFPS", a1, a2, a3, a4);
      __uint64_t v9 = sub_DDEFC();
      sub_D1CB0(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %d %p", v9, 61);
  }
  if (a1)
  {
    uint64_t v11 = (FILE *)a1[12 * (a2 > 0) + 16];
    if (v11)
    {
      if (a4)
      {
        if (fprintf(v11, "%d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f\n", a3, a4[2], a4[1], *a4, a4[5], a4[4], a4[3], a4[8], a4[7], a4[6]) <= 0)uint64_t v12 = 4294965296; {
        else
        }
          uint64_t v12 = 0;
      }
      else
      {
        uint64_t v12 = 4294966287;
      }
    }
    else
    {
      uint64_t v12 = 4294966288;
    }
  }
  else
  {
    if (sub_D1C38(0x3Du, 4))
    {
      int v13 = sub_D1C7C(0x3Du);
      __uint64_t v14 = sub_DDEFC();
      __uint64_t v15 = (const char *)sub_D1CB0(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p\n", v14, 61, v15, "AVE_Dump_WriteFPS", 820, "pDump != __null", 0, a2, a3, a4);
        __uint64_t v16 = sub_DDEFC();
        int v22 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p", v16, 61, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p", v14, 61, v15);
      }
    }
    uint64_t v12 = 4294966295;
  }
  if (sub_D1C38(0x3Du, 8))
  {
    int v17 = sub_D1C7C(0x3Du);
    __uint64_t v18 = sub_DDEFC();
    __uint64_t v19 = (const char *)sub_D1CB0(8);
    if (v17)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %d %p %d\n", v18, 61, v19, "AVE_Dump_WriteFPS", a1, a2, a3, a4, v12);
      __uint64_t v20 = sub_DDEFC();
      __uint64_t v23 = sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %d %p %d", v20, 61, v23);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %d %p %d", v18, 61, v19);
    }
  }
  return v12;
}

uint64_t sub_685C(uint64_t a1, __CVBuffer *a2)
{
  if (sub_D1C38(0x3Du, 8))
  {
    int v4 = sub_D1C7C(0x3Du);
    __uint64_t v5 = sub_DDEFC();
    int v6 = (const char *)sub_D1CB0(8);
    if (v4)
    {
      printf("%lld %d AVE %s: %s Enter %p %p\n", v5, 61, v6, "AVE_Dump_WriteRecon", (const void *)a1, a2);
      __uint64_t v7 = sub_DDEFC();
      int v17 = (const char *)sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: %s Enter %p %p", v7, 61, v17, "AVE_Dump_WriteRecon", (const void *)a1, a2);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p %p", v5, 61, v6, "AVE_Dump_WriteRecon", (const void *)a1, a2);
    }
  }
  if (a1)
  {
    int v8 = *(FILE **)(a1 + 136);
    if (v8)
    {
      if (a2) {
        uint64_t v9 = sub_CE970(a2, (*(_DWORD *)(a1 + 8) >> 11) & 1, v8);
      }
      else {
        uint64_t v9 = 4294966287;
      }
    }
    else
    {
      uint64_t v9 = 4294966288;
    }
  }
  else
  {
    if (sub_D1C38(0x3Du, 4))
    {
      int v10 = sub_D1C7C(0x3Du);
      __uint64_t v11 = sub_DDEFC();
      uint64_t v12 = (const char *)sub_D1CB0(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %p\n", v11, 61, v12, "AVE_Dump_WriteRecon", 864, "pDump != __null", 0, a2);
        __uint64_t v11 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %p", v11, 61);
    }
    uint64_t v9 = 4294966295;
  }
  if (sub_D1C38(0x3Du, 8))
  {
    int v13 = sub_D1C7C(0x3Du);
    __uint64_t v14 = sub_DDEFC();
    __uint64_t v15 = (const char *)sub_D1CB0(8);
    if (v13)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %d\n", v14, 61, v15, "AVE_Dump_WriteRecon", (const void *)a1, a2, v9);
      __uint64_t v14 = sub_DDEFC();
      sub_D1CB0(8);
    }
    syslog(3, "%lld %d AVE %s: %s Exit %p %p %d", v14);
  }
  return v9;
}

uint64_t sub_6AFC(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (sub_D1C38(0xDu, 6))
  {
    int v10 = sub_D1C7C(0xDu);
    __uint64_t v11 = sub_DDEFC();
    uint64_t v12 = (const char *)sub_D1CB0(6);
    if (v10)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %d %d %d\n", v11, 13, v12, "AVE_VCP", "Init", a1, a2, a3, a4, a5);
      __uint64_t v13 = sub_DDEFC();
      v58 = sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %d %d %d", v13, 13, v58);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %d %d %d", v11, 13, v12);
    }
  }
  uint64_t v14 = *(unsigned int *)&a1cva1cvh[4 * a3];
  __uint64_t v15 = dlopen("/System/Library/PrivateFrameworks/VideoProcessing.framework/VideoProcessing", 1);
  a1[3] = (uint64_t)v15;
  if (v15)
  {
    __uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))dlsym(v15, "VCPAVEContextCreate");
    if (v16)
    {
      uint64_t v17 = v16(v14, a4, a5);
      a1[4] = v17;
      if (!v17 && sub_D1C38(0xDu, 5))
      {
        int v18 = sub_D1C7C(0xDu);
        __uint64_t v19 = sub_DDEFC();
        __uint64_t v20 = (const char *)sub_D1CB0(5);
        if (v18)
        {
          printf("%lld %d AVE %s: %s::%s:%d VCP context create fail %p %lld %d %d %d\n", v19, 13, v20, "AVE_VCP", "Init", 74, a1, a2, a3, a4, a5);
          __uint64_t v19 = sub_DDEFC();
          v59 = sub_D1CB0(5);
        }
        else
        {
          v59 = (void *)v20;
        }
        syslog(3, "%lld %d AVE %s: %s::%s:%d VCP context create fail %p %lld %d %d %d", v19, 13, v59, "AVE_VCP");
      }
    }
    else if (sub_D1C38(0xDu, 5))
    {
      int v25 = sub_D1C7C(0xDu);
      __uint64_t v26 = sub_DDEFC();
      uint64_t v27 = (const char *)sub_D1CB0(5);
      char v28 = dlerror();
      if (v25)
      {
        printf("%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d | %s\n", v26, 13, v27, "AVE_VCP", "Init", 66, a1, a2, a3, a4, a5, v28);
        __uint64_t v26 = sub_DDEFC();
        uint64_t v27 = (const char *)sub_D1CB0(5);
        dlerror();
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d | %s", v26, 13, v27, "AVE_VCP", "Init");
    }
    uint64_t v29 = dlsym((void *)a1[3], "VCPCompressionAllocateDPB");
    a1[5] = (uint64_t)v29;
    if (!v29 && sub_D1C38(0xDu, 5))
    {
      int v30 = sub_D1C7C(0xDu);
      __uint64_t v31 = sub_DDEFC();
      uint64_t v32 = (const char *)sub_D1CB0(5);
      int v33 = dlerror();
      if (v30)
      {
        printf("%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d | %s\n", v31, 13, v32, "AVE_VCP", "Init", 83, a1, a2, a3, a4, a5, v33);
        __uint64_t v61 = sub_DDEFC();
        __uint64_t v34 = sub_D1CB0(5);
        dlerror();
        syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d | %s", v61, 13, v34, "AVE_VCP", "Init");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d | %s", v31, 13, v32, "AVE_VCP", "Init");
      }
    }
    long long v35 = dlsym((void *)a1[3], "VCPAVEScaleReferenceFrames");
    a1[6] = (uint64_t)v35;
    if (!v35 && sub_D1C38(0xDu, 5))
    {
      int v36 = sub_D1C7C(0xDu);
      __uint64_t v37 = sub_DDEFC();
      long long v38 = (const char *)sub_D1CB0(5);
      long long v39 = dlerror();
      if (v36)
      {
        printf("%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d | %s\n", v37, 13, v38, "AVE_VCP", "Init", 91, a1, a2, a3, a4, a5, v39);
        __uint64_t v62 = sub_DDEFC();
        __uint64_t v40 = sub_D1CB0(5);
        dlerror();
        syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d | %s", v62, 13, v40, "AVE_VCP", "Init");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d | %s", v37, 13, v38, "AVE_VCP", "Init");
      }
    }
    __uint64_t v41 = dlsym((void *)a1[3], "VCPAVEExtraInloopChromaFilter");
    a1[7] = (uint64_t)v41;
    if (!v41 && sub_D1C38(0xDu, 5))
    {
      int v42 = sub_D1C7C(0xDu);
      __uint64_t v43 = sub_DDEFC();
      long long v44 = (const char *)sub_D1CB0(5);
      long long v45 = dlerror();
      if (v42)
      {
        printf("%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d | %s\n", v43, 13, v44, "AVE_VCP", "Init", 99, a1, a2, a3, a4, a5, v45);
        __uint64_t v63 = sub_DDEFC();
        long long v46 = sub_D1CB0(5);
        dlerror();
        syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d | %s", v63, 13, v46, "AVE_VCP", "Init");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d | %s", v43, 13, v44, "AVE_VCP", "Init");
      }
    }
    long long v47 = dlsym((void *)a1[3], "VCPAVECalculateFrameChecksum");
    a1[8] = (uint64_t)v47;
    if (!v47 && sub_D1C38(0xDu, 5))
    {
      int v48 = sub_D1C7C(0xDu);
      __uint64_t v49 = sub_DDEFC();
      v50 = (const char *)sub_D1CB0(5);
      v51 = dlerror();
      if (v48)
      {
        printf("%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d | %s\n", v49, 13, v50, "AVE_VCP", "Init", 107, a1, a2, a3, a4, a5, v51);
        __uint64_t v64 = sub_DDEFC();
        v52 = sub_D1CB0(5);
        dlerror();
        syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d | %s", v64, 13, v52, "AVE_VCP", "Init");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d | %s", v49, 13, v50, "AVE_VCP", "Init");
      }
    }
    *a1 = a2;
    *((_DWORD *)a1 + 2) = a3;
    *((_DWORD *)a1 + 3) = a4;
    *((_DWORD *)a1 + 4) = a5;
    *((_DWORD *)a1 + 5) = v14;
  }
  else if (sub_D1C38(0xDu, 5))
  {
    int v21 = sub_D1C7C(0xDu);
    __uint64_t v22 = sub_DDEFC();
    __uint64_t v23 = (const char *)sub_D1CB0(5);
    int v24 = dlerror();
    if (v21)
    {
      printf("%lld %d AVE %s: %s::%s:%d Unable to open VCP lib %p %lld %d %d %d | %s\n", v22, 13, v23, "AVE_VCP", "Init", 57, a1, a2, a3, a4, a5, v24);
      __uint64_t v22 = sub_DDEFC();
      __uint64_t v23 = (const char *)sub_D1CB0(5);
      dlerror();
    }
    syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to open VCP lib %p %lld %d %d %d | %s", v22, 13, v23, "AVE_VCP", "Init");
  }
  if (sub_D1C38(0xDu, 6))
  {
    int v53 = sub_D1C7C(0xDu);
    __uint64_t v54 = sub_DDEFC();
    v55 = (const char *)sub_D1CB0(6);
    if (v53)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %d %d %d %d\n", v54, 13, v55, "AVE_VCP", "Init", a1, a2, a3, a4, a5, 0);
      __uint64_t v56 = sub_DDEFC();
      v60 = sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %d %d %d", v56, 13, v60);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %d %d %d", v54, 13, v55);
    }
  }
  return 0;
}

uint64_t sub_7558(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (sub_D1C38(0xDu, 6))
  {
    int v3 = sub_D1C7C(0xDu);
    __uint64_t v4 = sub_DDEFC();
    __uint64_t v5 = (const char *)sub_D1CB0(6);
    if (v3)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld\n", v4, 13, v5, "AVE_VCP", "Uninit", a1, v2);
      __uint64_t v4 = sub_DDEFC();
      sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld", v4);
  }
  int v6 = (void *)a1[3];
  if (v6 && a1[4])
  {
    __uint64_t v7 = (void (*)(uint64_t))dlsym(v6, "VCPAVEContextRelease");
    if (v7)
    {
      v7(a1[4]);
    }
    else if (sub_D1C38(0xDu, 5))
    {
      int v8 = sub_D1C7C(0xDu);
      __uint64_t v9 = sub_DDEFC();
      int v10 = (const char *)sub_D1CB0(5);
      uint64_t v11 = *a1;
      uint64_t v12 = dlerror();
      if (v8)
      {
        printf("%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld | %s\n", v9, 13, v10, "AVE_VCP", "Uninit", 150, a1, v11, v12);
        __uint64_t v9 = sub_DDEFC();
        int v10 = (const char *)sub_D1CB0(5);
        dlerror();
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld | %s", v9, 13, v10);
    }
  }
  a1[8] = 0;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  if (sub_D1C38(0xDu, 6))
  {
    int v13 = sub_D1C7C(0xDu);
    __uint64_t v14 = sub_DDEFC();
    __uint64_t v15 = (const char *)sub_D1CB0(6);
    if (v13)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %d\n", v14, 13, v15, "AVE_VCP", "Uninit", a1, v2, 0);
      __uint64_t v14 = sub_DDEFC();
      sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d", v14, 13);
  }
  return 0;
}

uint64_t sub_7850(void *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  if (sub_D1C38(0xDu, 8))
  {
    int v8 = sub_D1C7C(0xDu);
    __uint64_t v9 = sub_DDEFC();
    int v10 = (const char *)sub_D1CB0(8);
    if (v8)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p 0x%x %p\n", v9, 13, v10, "AVE_VCP", "AllocDPB", a1, *a1, a2, a3, a4);
      __uint64_t v11 = sub_DDEFC();
      int v24 = sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p 0x%x %p", v11, 13, v24, "AVE_VCP");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p 0x%x %p", v9, 13, v10, "AVE_VCP");
    }
  }
  uint64_t v12 = (uint64_t (*)(const void *, void, void, void, uint64_t))a1[5];
  if (v12)
  {
    uint64_t v13 = v12(a2, *((unsigned int *)a1 + 5), *((unsigned int *)a1 + 3), *((unsigned int *)a1 + 4), a3);
    if (v13)
    {
      uint64_t v14 = 0;
    }
    else
    {
      if (sub_D1C38(0xDu, 5))
      {
        int v15 = sub_D1C7C(0xDu);
        __uint64_t v16 = sub_DDEFC();
        uint64_t v17 = (const char *)sub_D1CB0(5);
        if (v15)
        {
          printf("%lld %d AVE %s: %s::%s:%d fail to allocate DPB %p %lld %p %d %d %d 0x%x\n", v16, 13, v17, "AVE_VCP", "AllocDPB", 189, a1, *a1, a2, *((_DWORD *)a1 + 5), *((_DWORD *)a1 + 3), *((_DWORD *)a1 + 4), a3);
          __uint64_t v18 = sub_DDEFC();
          int v25 = sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: %s::%s:%d fail to allocate DPB %p %lld %p %d %d %d 0x%x", v18, 13, v25, "AVE_VCP", "AllocDPB");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d fail to allocate DPB %p %lld %p %d %d %d 0x%x", v16, 13, v17, "AVE_VCP", "AllocDPB");
        }
      }
      uint64_t v13 = 0;
      uint64_t v14 = 4294966293;
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 4294966294;
  }
  *a4 = v13;
  if (sub_D1C38(0xDu, 8))
  {
    int v19 = sub_D1C7C(0xDu);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(8);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p 0x%x %p %d\n", v20, 13, v21, "AVE_VCP", "AllocDPB", a1, *a1, a2, a3, a4, v14);
      __uint64_t v22 = sub_DDEFC();
      __uint64_t v26 = sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p 0x%x %p %d", v22, 13, v26, "AVE_VCP", "AllocDPB");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p 0x%x %p %d", v20, 13, v21, "AVE_VCP", "AllocDPB");
    }
  }
  return v14;
}

uint64_t sub_7BB4(void *a1, const void *a2, const void *a3)
{
  if (sub_D1C38(0xDu, 8))
  {
    int v6 = sub_D1C7C(0xDu);
    __uint64_t v7 = sub_DDEFC();
    int v8 = (const char *)sub_D1CB0(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p\n", v7, 13, v8, "AVE_VCP", "ScaleRefFrames", a1, *a1, a2, a3);
      __uint64_t v9 = sub_DDEFC();
      __uint64_t v26 = sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p", v9, 13, v26);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p", v7, 13, v8);
    }
  }
  int v10 = (uint64_t (*)(uint64_t, const void *, const void *))a1[6];
  if (v10 && (uint64_t v11 = a1[4]) != 0)
  {
    uint64_t v12 = v10(v11, a2, a3);
    if (sub_D1C38(0xDu, 8))
    {
      int v13 = sub_D1C7C(0xDu);
      __uint64_t v14 = sub_DDEFC();
      int v15 = (const char *)sub_D1CB0(8);
      if (v13)
      {
        printf("%lld %d AVE %s: %s::%s:%d %p %lld %p %p %p %d\n", v14, 13, v15, "AVE_VCP", "ScaleRefFrames", 224, a1, *a1, (const void *)a1[4], a2, a3, v12);
        __uint64_t v16 = sub_DDEFC();
        uint64_t v27 = sub_D1CB0(8);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %lld %p %p %p %d", v16, 13, v27, "AVE_VCP", "ScaleRefFrames", 224);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %lld %p %p %p %d", v14, 13, v15, "AVE_VCP", "ScaleRefFrames", 224);
      }
    }
    if (v12)
    {
      if (sub_D1C38(0xDu, 5))
      {
        int v17 = sub_D1C7C(0xDu);
        __uint64_t v18 = sub_DDEFC();
        int v19 = (const char *)sub_D1CB0(5);
        if (v17)
        {
          printf("%lld %d AVE %s: %s::%s:%d fail to scale ref frame %p %lld %p %p %p %d\n", v18, 13, v19, "AVE_VCP", "ScaleRefFrames", 230, a1, *a1, (const void *)a1[4], a2, a3, v12);
          __uint64_t v20 = sub_DDEFC();
          char v28 = sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: %s::%s:%d fail to scale ref frame %p %lld %p %p %p %d", v20, 13, v28, "AVE_VCP", "ScaleRefFrames", 230);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d fail to scale ref frame %p %lld %p %p %p %d", v18, 13, v19, "AVE_VCP", "ScaleRefFrames", 230);
        }
      }
      uint64_t v12 = 4294966296;
    }
  }
  else
  {
    uint64_t v12 = 4294966294;
  }
  if (sub_D1C38(0xDu, 8))
  {
    int v21 = sub_D1C7C(0xDu);
    __uint64_t v22 = sub_DDEFC();
    __uint64_t v23 = (const char *)sub_D1CB0(8);
    if (v21)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %d\n", v22, 13, v23, "AVE_VCP", "ScaleRefFrames", a1, *a1, a2, a3, v12);
      __uint64_t v24 = sub_DDEFC();
      uint64_t v29 = sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %d", v24, 13, v29, "AVE_VCP");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %d", v22, 13, v23, "AVE_VCP");
    }
  }
  return v12;
}

uint64_t sub_7FD0(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  if (sub_D1C38(0xDu, 8))
  {
    int v8 = sub_D1C7C(0xDu);
    __uint64_t v9 = sub_DDEFC();
    int v10 = (const char *)sub_D1CB0(8);
    if (v8)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %d %d\n", v9, 13, v10, "AVE_VCP", "ChromaFilter", a1, *a1, a2, a3, a4);
      __uint64_t v11 = sub_DDEFC();
      uint64_t v29 = sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %d %d", v11, 13, v29);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %d %d", v9, 13, v10);
    }
  }
  uint64_t v12 = (uint64_t (*)(uint64_t, const void *, uint64_t, uint64_t))a1[7];
  if (v12 && (uint64_t v13 = a1[4]) != 0)
  {
    uint64_t v14 = v12(v13, a2, a3, a4);
    if (sub_D1C38(0xDu, 8))
    {
      int v15 = sub_D1C7C(0xDu);
      __uint64_t v16 = sub_DDEFC();
      int v17 = (const char *)sub_D1CB0(8);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %p %lld %p %p %d %d %d\n", v16, 13, v17, "AVE_VCP", "ChromaFilter", 264, a1, *a1, (const void *)a1[4], a2, a3, a4, v14);
        __uint64_t v18 = sub_DDEFC();
        int v30 = sub_D1CB0(8);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %lld %p %p %d %d %d", v18, 13, v30, "AVE_VCP", "ChromaFilter", 264);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %lld %p %p %d %d %d", v16, 13, v17, "AVE_VCP", "ChromaFilter", 264);
      }
    }
    if (v14)
    {
      if (sub_D1C38(0xDu, 5))
      {
        int v19 = sub_D1C7C(0xDu);
        __uint64_t v20 = sub_DDEFC();
        int v21 = (const char *)sub_D1CB0(5);
        if (v19)
        {
          printf("%lld %d AVE %s: %s::%s:%d fail to filter chroma %p %lld %p %p %d %d %d\n", v20, 13, v21, "AVE_VCP", "ChromaFilter", 270, a1, *a1, (const void *)a1[4], a2, a3, a4, v14);
          __uint64_t v22 = sub_DDEFC();
          __uint64_t v23 = sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: %s::%s:%d fail to filter chroma %p %lld %p %p %d %d %d", v22, 13, v23, "AVE_VCP", "ChromaFilter", 270);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d fail to filter chroma %p %lld %p %p %d %d %d", v20, 13, v21, "AVE_VCP", "ChromaFilter", 270);
        }
      }
      uint64_t v14 = 4294966296;
    }
  }
  else
  {
    uint64_t v14 = 4294966294;
  }
  if (sub_D1C38(0xDu, 8))
  {
    int v24 = sub_D1C7C(0xDu);
    __uint64_t v25 = sub_DDEFC();
    __uint64_t v26 = (const char *)sub_D1CB0(8);
    if (v24)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %d %d\n", v25, 13, v26, "AVE_VCP", "ChromaFilter", a1, *a1, a2, a3, a4);
      __uint64_t v27 = sub_DDEFC();
      __uint64_t v31 = sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d %d", v27, 13, v31);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d %d", v25, 13, v26);
    }
  }
  return v14;
}

uint64_t sub_8448(void *a1, const void *a2, uint64_t a3, void *a4)
{
  if (sub_D1C38(0xDu, 8))
  {
    int v8 = sub_D1C7C(0xDu);
    __uint64_t v9 = sub_DDEFC();
    int v10 = (const char *)sub_D1CB0(8);
    if (v8)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %d %p\n", v9, 13, v10, "AVE_VCP", "CalcChecksum", a1, *a1, a2, a3, a4);
      __uint64_t v11 = sub_DDEFC();
      uint64_t v32 = sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %d %p", v11, 13, v32, "AVE_VCP");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %d %p", v9, 13, v10, "AVE_VCP");
    }
  }
  if (a1[8] && a1[4])
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      CFDictionaryRef v13 = Mutable;
      uint64_t v14 = ((uint64_t (*)(void, const void *, uint64_t, uint64_t, CFMutableDictionaryRef))a1[8])(a1[4], a2, a3, 1, Mutable);
      if (sub_D1C38(0xDu, 8))
      {
        int v15 = sub_D1C7C(0xDu);
        __uint64_t v16 = sub_DDEFC();
        int v17 = (const char *)sub_D1CB0(8);
        if (v15)
        {
          printf("%lld %d AVE %s: %s::%s:%d %p %lld %p %p %d %p %d\n", v16, 13, v17, "AVE_VCP", "CalcChecksum", 311, a1, *a1, (const void *)a1[4], a2, a3, v13, v14);
          __uint64_t v18 = sub_DDEFC();
          int v33 = sub_D1CB0(8);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %p %lld %p %p %d %p %d", v18, 13, v33, "AVE_VCP", "CalcChecksum", 311, a1);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %p %lld %p %p %d %p %d", v16, 13, v17, "AVE_VCP", "CalcChecksum", 311, a1);
        }
      }
      if (v14)
      {
        if (sub_D1C38(0xDu, 5))
        {
          int v22 = sub_D1C7C(0xDu);
          __uint64_t v23 = sub_DDEFC();
          int v24 = (const char *)sub_D1CB0(5);
          if (v22)
          {
            printf("%lld %d AVE %s: %s::%s:%d fail to calculate checksum %p %lld %p %p %d %p %d\n", v23, 13, v24, "AVE_VCP", "CalcChecksum", 318, a1, *a1, (const void *)a1[4], a2, a3, v13, v14);
            __uint64_t v25 = sub_DDEFC();
            __uint64_t v26 = sub_D1CB0(5);
            syslog(3, "%lld %d AVE %s: %s::%s:%d fail to calculate checksum %p %lld %p %p %d %p %d", v25, 13, v26, "AVE_VCP", "CalcChecksum", 318, a1);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s::%s:%d fail to calculate checksum %p %lld %p %p %d %p %d", v23, 13, v24, "AVE_VCP", "CalcChecksum", 318, a1);
          }
        }
        uint64_t v14 = 4294966296;
      }
      else
      {
        CFDictionaryApplyFunction(v13, (CFDictionaryApplierFunction)sub_8E84, a4);
      }
      CFRelease(v13);
    }
    else
    {
      if (sub_D1C38(0xDu, 4))
      {
        int v19 = sub_D1C7C(0xDu);
        __uint64_t v20 = sub_DDEFC();
        int v21 = (const char *)sub_D1CB0(4);
        if (v19)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | fail to create dictionary\n", v20, 13, v21, "AVE_VCP", "CalcChecksum", 307, "pDict != __null");
          __uint64_t v20 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to create dictionary", v20);
      }
      uint64_t v14 = 4294966293;
    }
  }
  else
  {
    uint64_t v14 = 4294966294;
  }
  if (sub_D1C38(0xDu, 8))
  {
    int v27 = sub_D1C7C(0xDu);
    __uint64_t v28 = sub_DDEFC();
    uint64_t v29 = (const char *)sub_D1CB0(8);
    if (v27)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %d %p %d\n", v28, 13, v29, "AVE_VCP", "CalcChecksum", a1, *a1, a2, a3, a4, v14);
      __uint64_t v30 = sub_DDEFC();
      __uint64_t v34 = sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d %p %d", v30, 13, v34, "AVE_VCP", "CalcChecksum");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d %p %d", v28, 13, v29, "AVE_VCP", "CalcChecksum");
    }
  }
  return v14;
}

void sub_89F0(uint64_t a1, int a2, int a3, int a4)
{
  if (sub_D1C38(0xDu, 6))
  {
    int v8 = sub_D1C7C(0xDu);
    __uint64_t v9 = sub_DDEFC();
    int v10 = (const char *)sub_D1CB0(6);
    if (v8)
    {
      printf("%lld %d AVE %s: %s Enter %lld %d %d %d\n", v9, 13, v10, "AVE_VCP_Create", a1, a2, a3, a4);
      __uint64_t v9 = sub_DDEFC();
      sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %lld %d %d %d", v9);
  }
  operator new();
}

uint64_t sub_8C08(uint64_t *a1)
{
  if (sub_D1C38(0xDu, 6))
  {
    int v2 = sub_D1C7C(0xDu);
    __uint64_t v3 = sub_DDEFC();
    __uint64_t v4 = (const char *)sub_D1CB0(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", v3, 13, v4, "AVE_VCP_Destroy", a1);
      __uint64_t v5 = sub_DDEFC();
      uint64_t v14 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 13, v14, "AVE_VCP_Destroy", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", v3, 13, v4, "AVE_VCP_Destroy", a1);
    }
  }
  if (a1)
  {
    sub_7558(a1);
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    a1[8] = 0;
    operator delete();
  }
  if (sub_D1C38(0xDu, 4))
  {
    int v6 = sub_D1C7C(0xDu);
    __uint64_t v7 = sub_DDEFC();
    int v8 = (const char *)sub_D1CB0(4);
    if (v6)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p\n", v7, 13, v8, "AVE_VCP_Destroy", 398, "pcVCP != __null", 0);
      __uint64_t v7 = sub_DDEFC();
      sub_D1CB0(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p", v7);
  }
  if (sub_D1C38(0xDu, 6))
  {
    int v9 = sub_D1C7C(0xDu);
    __uint64_t v10 = sub_DDEFC();
    __uint64_t v11 = (const char *)sub_D1CB0(6);
    if (v9)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v10, 13, v11, "AVE_VCP_Destroy", 0, -1001);
      __uint64_t v12 = sub_DDEFC();
      int v15 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v12, 13, v15, "AVE_VCP_Destroy", 0, -1001);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v10, 13, v11, "AVE_VCP_Destroy", 0, -1001);
    }
  }
  return 4294966295;
}

void sub_8E84(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

uint64_t sub_8E98(const void *a1, const void *a2, const void *a3)
{
  int v19 = 0;
  if (sub_D1C38(0x2Eu, 7))
  {
    int v6 = sub_D1C7C(0x2Eu);
    __uint64_t v7 = sub_DDEFC();
    int v8 = (const char *)sub_D1CB0(7);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p %p %p\n", v7, 46, v8, "AVE_FrameStats_PrintStatFrame", a2, a1, a3);
      __uint64_t v7 = sub_DDEFC();
      sub_D1CB0(7);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %p %p", v7);
  }
  if (a1 && a2)
  {
    if (a3) {
      operator new[]();
    }
    uint64_t v13 = 4294966288;
  }
  else
  {
    if (sub_D1C38(0x2Eu, 4))
    {
      int v9 = sub_D1C7C(0x2Eu);
      __uint64_t v10 = sub_DDEFC();
      __uint64_t v11 = (const char *)sub_D1CB0(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v10, 46, v11, "AVE_FrameStats_PrintStatFrame", 779, "(psFrame != __null) && (psMgr != __null)", a2, a1, a3);
        __uint64_t v12 = sub_DDEFC();
        __uint64_t v18 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v12, 46, v18);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v10, 46, v11);
      }
    }
    uint64_t v13 = 4294966295;
  }
  if (sub_D1C38(0x74u, 7))
  {
    int v14 = sub_D1C7C(0x74u);
    __uint64_t v15 = sub_DDEFC();
    __uint64_t v16 = (const char *)sub_D1CB0(7);
    if (v14)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %p %d\n", v15, 116, v16, "AVE_FrameStats_PrintStatFrame", a2, a1, a3, v13);
      __uint64_t v15 = sub_DDEFC();
      sub_D1CB0(7);
    }
    syslog(3, "%lld %d AVE %s: %s Exit %p %p %p %d", v15, 116);
  }
  return v13;
}

uint64_t sub_ADEC(_OWORD *a1)
{
  if (sub_D1C38(0x1Eu, 7))
  {
    int v2 = sub_D1C7C(0x1Eu);
    __uint64_t v3 = sub_DDEFC();
    __uint64_t v4 = (const char *)sub_D1CB0(7);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", v3, 30, v4, "AVE_USL_Enc_PropCfg_Init", a1);
      __uint64_t v5 = sub_DDEFC();
      __uint64_t v12 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 30, v12, "AVE_USL_Enc_PropCfg_Init", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", v3, 30, v4, "AVE_USL_Enc_PropCfg_Init", a1);
    }
  }
  a1[28] = 0u;
  a1[29] = 0u;
  a1[26] = 0u;
  a1[27] = 0u;
  a1[24] = 0u;
  a1[25] = 0u;
  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  *((_DWORD *)a1 + 32) = -1;
  *((void *)a1 + 17) = 0xBFF0000000000000;
  *((void *)a1 + 18) = -1;
  *((void *)a1 + 19) = -1;
  *((void *)a1 + 20) = 0xBFF0000000000000;
  *((_DWORD *)a1 + 42) = -1;
  *((void *)a1 + 22) = 0xBFF0000000000000;
  *((_DWORD *)a1 + 46) = -1;
  *((void *)a1 + 24) = -1;
  *((void *)a1 + 30) = -1;
  *((_DWORD *)a1 + 110) = -1;
  *((_DWORD *)a1 + 87) = -1;
  *((void *)a1 + 31) = 0xBFF0000000000000;
  *((void *)a1 + 32) = -1;
  *((void *)a1 + 33) = -1;
  *((_DWORD *)a1 + 70) = -2;
  *((void *)a1 + 36) = -1;
  *((void *)a1 + 37) = -1;
  *((void *)a1 + 38) = -1;
  memset_pattern16((char *)a1 + 312, &unk_141470, 8uLL);
  memset_pattern16(a1 + 20, &unk_141470, 8uLL);
  *(void *)&long long v6 = -1;
  *((void *)&v6 + 1) = -1;
  *(_OWORD *)((char *)a1 + 328) = v6;
  if (sub_D1C38(0x1Eu, 7))
  {
    int v7 = sub_D1C7C(0x1Eu);
    __uint64_t v8 = sub_DDEFC();
    int v9 = (const char *)sub_D1CB0(7);
    if (v7)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v8, 30, v9, "AVE_USL_Enc_PropCfg_Init", a1, 0);
      __uint64_t v10 = sub_DDEFC();
      uint64_t v13 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v10, 30, v13, "AVE_USL_Enc_PropCfg_Init", a1, 0);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v8, 30, v9, "AVE_USL_Enc_PropCfg_Init", a1, 0);
    }
  }
  return 0;
}

uint64_t sub_B020(const void *a1)
{
  if (sub_D1C38(0x1Eu, 7))
  {
    int v2 = sub_D1C7C(0x1Eu);
    __uint64_t v3 = sub_DDEFC();
    __uint64_t v4 = (const char *)sub_D1CB0(7);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", v3, 30, v4, "AVE_USL_Enc_PropCfg_Uninit", a1);
      __uint64_t v5 = sub_DDEFC();
      __uint64_t v11 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 30, v11, "AVE_USL_Enc_PropCfg_Uninit", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", v3, 30, v4, "AVE_USL_Enc_PropCfg_Uninit", a1);
    }
  }
  if (sub_D1C38(0x1Eu, 7))
  {
    int v6 = sub_D1C7C(0x1Eu);
    __uint64_t v7 = sub_DDEFC();
    __uint64_t v8 = (const char *)sub_D1CB0(7);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v7, 30, v8, "AVE_USL_Enc_PropCfg_Uninit", a1, 0);
      __uint64_t v9 = sub_DDEFC();
      __uint64_t v12 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v9, 30, v12, "AVE_USL_Enc_PropCfg_Uninit", a1, 0);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v7, 30, v8, "AVE_USL_Enc_PropCfg_Uninit", a1, 0);
    }
  }
  return 0;
}

void sub_B18C()
{
}

void sub_B4DC()
{
  int v0 = 0;
  sub_D7E4C();
  operator new[]();
}

uint64_t sub_B7E4(int a1, int *a2, __CFDictionary *a3)
{
  __uint64_t v5 = sub_D7E18(a1);
  if (!v5) {
    return 4294954394;
  }
  if ((*((_DWORD *)v5 + 6) & 0xFFFFFFFE) != 2) {
    return 0;
  }
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  __uint64_t v7 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFMutableDictionaryRef v8 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  __uint64_t v9 = v8;
  if (Mutable) {
    BOOL v10 = v7 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10 && v8 != 0)
  {
    int v17 = (const void *)kIOSurfacePlaneHTPCPredictionSelector;
    sub_C347C(kIOSurfacePlaneHTPCPredictionSelector, 1, v7);
    sub_C347C(v17, 1, v9);
    if (*a2 >= 1) {
      sub_C347C(kIOSurfacePlaneHorizontalPixelOffsetWithinCompressedTileArray, *a2, v7);
    }
    int v18 = a2[2];
    if (v18 >= 1) {
      sub_C347C(kIOSurfacePlaneVerticalPixelOffsetWithinCompressedTileArray, v18, v7);
    }
    int v19 = a2[4];
    if (v19 >= 1) {
      sub_C347C(kIOSurfacePlaneHorizontalPixelOffsetWithinCompressedTileArray, v19, v9);
    }
    int v20 = a2[6];
    if (v20 >= 1) {
      sub_C347C(kIOSurfacePlaneVerticalPixelOffsetWithinCompressedTileArray, v20, v9);
    }
    CFArrayAppendValue(Mutable, v7);
    CFArrayAppendValue(Mutable, v9);
    CFDictionarySetValue(a3, kCVPixelFormatPlanes, Mutable);
    CFRelease(v7);
    CFRelease(v9);
    CFRelease(Mutable);
    return 0;
  }
  if (sub_D1C38(3u, 4))
  {
    int v12 = sub_D1C7C(3u);
    __uint64_t v13 = sub_DDEFC();
    int v14 = (const char *)sub_D1CB0(4);
    if (v12)
    {
      printf("%lld %d AVE %s: %s:%d %s | failed to create CF objects %p %p %p\n", v13, 3, v14, "AVE_PixelBufAttr_AppendIOSurface", 262, "pArray != __null && pDict0 != __null && pDict1 != __null", Mutable, v7, v9);
      __uint64_t v15 = sub_DDEFC();
      int v21 = sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create CF objects %p %p %p", v15, 3, v21);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create CF objects %p %p %p", v13, 3, v14);
    }
  }
  return 4294954392;
}

uint64_t sub_BA70()
{
  if (CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks))
  {
    if (CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks)) {
      sub_B4DC();
    }
    if (sub_D1C38(3u, 4))
    {
      int v3 = sub_D1C7C(3u);
      __uint64_t v4 = sub_DDEFC();
      __uint64_t v5 = (const char *)sub_D1CB0(4);
      if (v3)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to create CFArray\n", v4, 3, v5, "AVE_PixelBufAttr_CreateDictFromProfile", 349, "pTempArray != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create CFArray");
    }
  }
  else if (sub_D1C38(3u, 4))
  {
    int v0 = sub_D1C7C(3u);
    __uint64_t v1 = sub_DDEFC();
    int v2 = (const char *)sub_D1CB0(4);
    if (v0)
    {
      printf("%lld %d AVE %s: %s:%d %s | failed to create CFDictionary\n", v1, 3, v2, "AVE_PixelBufAttr_CreateDictFromProfile", 344, "pDict != __null");
      sub_DDEFC();
      sub_D1CB0(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create CFDictionary");
  }
  return 4294954392;
}

uint64_t sub_BFB8()
{
  if (CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks))
  {
    if (CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks)) {
      sub_B18C();
    }
    if (sub_D1C38(3u, 4))
    {
      int v3 = sub_D1C7C(3u);
      __uint64_t v4 = sub_DDEFC();
      __uint64_t v5 = (const char *)sub_D1CB0(4);
      if (v3)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to create CFArray\n", v4, 3, v5, "AVE_PixelBufAttr_CreateDict", 469, "pTempArray != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create CFArray");
    }
  }
  else if (sub_D1C38(3u, 4))
  {
    int v0 = sub_D1C7C(3u);
    __uint64_t v1 = sub_DDEFC();
    int v2 = (const char *)sub_D1CB0(4);
    if (v0)
    {
      printf("%lld %d AVE %s: %s:%d %s | failed to create CFDictionary\n", v1, 3, v2, "AVE_PixelBufAttr_CreateDict", 464, "pDict != __null");
      sub_DDEFC();
      sub_D1CB0(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create CFDictionary");
  }
  return 4294954392;
}

uint64_t sub_C504(int a1, signed int *a2, signed int *a3)
{
  if (a1 == 1)
  {
    signed int v7 = (*a2 + 15) & 0xFFFFFFF0;
    if (v7 <= 160) {
      signed int v7 = 160;
    }
    *a2 = v7;
    signed int v4 = (*a3 + 15) & 0xFFFFFFF0;
    BOOL v5 = v4 <= 64;
    int v6 = 64;
  }
  else
  {
    if (a1) {
      return 4294954394;
    }
    signed int v3 = (*a2 + 15) & 0xFFFFFFF0;
    if (v3 <= 192) {
      signed int v3 = 192;
    }
    *a2 = v3;
    signed int v4 = (*a3 + 15) & 0xFFFFFFF0;
    BOOL v5 = v4 <= 96;
    int v6 = 96;
  }
  if (v5) {
    signed int v4 = v6;
  }
  uint64_t result = 0;
  *a3 = v4;
  return result;
}

uint64_t sub_C58C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, CVPixelBufferPoolRef *poolOut)
{
  uint64_t v10 = sub_BFB8();
  if (v10)
  {
    uint64_t v11 = v10;
    if (sub_D1C38(3u, 4))
    {
      int v12 = sub_D1C7C(3u);
      __uint64_t v13 = sub_DDEFC();
      int v14 = (const char *)sub_D1CB0(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to create pixel buffer attributes %d\n", v13, 3, v14, "AVE_ImgBuf_CreatePool", 606, "rc == noErr", v11);
        __uint64_t v13 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create pixel buffer attributes %d", v13);
    }
  }
  else
  {
    uint64_t v11 = CVPixelBufferPoolCreate(0, 0, 0, poolOut);
    if (v11)
    {
      if (sub_D1C38(3u, 4))
      {
        int v15 = sub_D1C7C(3u);
        __uint64_t v16 = sub_DDEFC();
        int v17 = (const char *)sub_D1CB0(4);
        if (v15)
        {
          printf("%lld %d AVE %s: %s:%d %s | failed to create a pixel buffer pool %d\n", v16, 3, v17, "AVE_ImgBuf_CreatePool", 610, "cvrc == kCVReturnSuccess", v11);
          __uint64_t v16 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create a pixel buffer pool %d", v16);
      }
      return 4294954392;
    }
  }
  return v11;
}

uint64_t sub_C834(__CVBuffer *a1, __CVBuffer *a2)
{
  int PlaneCount = CVPixelBufferGetPlaneCount(a1);
  if (PlaneCount >= 1)
  {
    size_t v5 = 0;
    uint64_t v6 = PlaneCount;
    do
    {
      int HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, v5);
      IOSurface = CVPixelBufferGetIOSurface(a1);
      BaseAddressOfPlane = (char *)IOSurfaceGetBaseAddressOfPlane(IOSurface, v5);
      uint64_t v10 = CVPixelBufferGetIOSurface(a2);
      uint64_t v11 = (char *)IOSurfaceGetBaseAddressOfPlane(v10, v5);
      unsigned int BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, v5);
      unsigned int v13 = CVPixelBufferGetBytesPerRowOfPlane(a2, v5);
      if (HeightOfPlane)
      {
        if (BytesPerRowOfPlane >= v13) {
          size_t v14 = v13;
        }
        else {
          size_t v14 = BytesPerRowOfPlane;
        }
        uint64_t v15 = v13;
        do
        {
          memcpy(v11, BaseAddressOfPlane, v14);
          BaseAddressOfPlane += BytesPerRowOfPlane;
          v11 += v15;
          --HeightOfPlane;
        }
        while (HeightOfPlane);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  return 0;
}

uint64_t sub_C924(__CVBuffer *a1, uint64_t a2, uint64_t a3, _DWORD *a4, char a5)
{
  size_t extraColumnsOnLeft = 0;
  size_t extraRowsOnTop = 0;
  size_t extraColumnsOnRight = 0;
  size_t extraRowsOnBottom = 0;
  IOSurface = CVPixelBufferGetIOSurface(a1);
  BaseAddressOfPlane = IOSurfaceGetBaseAddressOfPlane(IOSurface, 0);
  int v12 = BaseAddressOfPlane;
  if (!BaseAddressOfPlane || (BaseAddressOfPlane & 0x3F) != 0)
  {
    if (sub_D1C38(3u, 4))
    {
      int v14 = sub_D1C7C(3u);
      __uint64_t v15 = sub_DDEFC();
      __uint64_t v16 = (const char *)sub_D1CB0(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | invalid buffer base address 0x%lx\n", v15, 3, v16, "AVE_ImgBuf_VerifyUncompressed", 710, "baseAddr != 0 && (baseAddr & 0x3F) == 0", v12);
        __uint64_t v15 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer base address 0x%lx", v15);
    }
    return 4294954394;
  }
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
  if (a5)
  {
    LODWORD(v13) = 0;
    goto LABEL_11;
  }
  int WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  int HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  size_t v13 = (extraColumnsOnLeft + WidthOfPlane + extraColumnsOnRight);
  size_t v19 = (extraRowsOnTop + HeightOfPlane + extraRowsOnBottom);
  if (v13 >= a2 && v19 >= a3)
  {
LABEL_11:
    unsigned int BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
    int v21 = BytesPerRowOfPlane;
    if (a4[6] == 1)
    {
      unsigned int v22 = (2 * ((2863311531u * (unint64_t)(v13 + 2)) >> 32)) & 0xFFFFFFFC;
      if (!BytesPerRowOfPlane) {
        goto LABEL_23;
      }
    }
    else
    {
      unsigned int v22 = v13 << (a4[1] != 8);
      if (!BytesPerRowOfPlane) {
        goto LABEL_23;
      }
    }
    if ((BytesPerRowOfPlane & 0x3F) != 0 || v22 > BytesPerRowOfPlane)
    {
LABEL_23:
      if (sub_D1C38(3u, 4))
      {
        int v33 = sub_D1C7C(3u);
        __uint64_t v34 = sub_DDEFC();
        long long v35 = (const char *)sub_D1CB0(4);
        if (v33)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid buffer stride 0x%x 0x%x\n", v34, 3, v35, "AVE_ImgBuf_VerifyUncompressed", 730, "stride != 0 && (stride & 0x3F) == 0 && stride >= neededStride", v21, v22);
          __uint64_t v34 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer stride 0x%x 0x%x", v34);
      }
      return 4294954394;
    }
    if (a4[3])
    {
      if ((a5 & 1) != 0
        || (int v23 = CVPixelBufferGetWidthOfPlane(a1, 1uLL),
            int v24 = CVPixelBufferGetHeightOfPlane(a1, 1uLL),
            int v25 = (int)a4[4] >> 1,
            size_t v26 = (extraColumnsOnRight >> v25) + v23 + (extraColumnsOnLeft >> v25),
            int v27 = (int)a4[5] >> 1,
            size_t v28 = (extraRowsOnBottom >> v27) + v24 + (extraRowsOnTop >> v27),
            a2 >> v25 <= v26)
        && (LODWORD(v13) = v26, a3 >> v27 <= v28))
      {
        unsigned int v29 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
        unsigned int v30 = v29;
        unsigned int v31 = (2 * v13) >> ((int)a4[4] >> 1);
        if (a4[6] == 1) {
          unsigned int v32 = (2 * ((2863311531u * (unint64_t)(v31 + 2)) >> 32)) & 0xFFFFFFFC;
        }
        else {
          unsigned int v32 = v31 << (a4[1] != 8);
        }
        if (!v29 || (v29 & 0x3F) != 0 || v32 > v29)
        {
          if (sub_D1C38(3u, 4))
          {
            int v46 = sub_D1C7C(3u);
            __uint64_t v47 = sub_DDEFC();
            int v48 = (const char *)sub_D1CB0(4);
            if (v46)
            {
              printf("%lld %d AVE %s: %s:%d %s | invalid buffer stride 0x%x 0x%x\n", v47, 3, v48, "AVE_ImgBuf_VerifyUncompressed", 773, "stride != 0 && (stride & 0x3F) == 0 && stride >= neededStride", v30, v32);
              __uint64_t v49 = sub_DDEFC();
              sub_D1CB0(4);
              syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer stride 0x%x 0x%x", v49);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer stride 0x%x 0x%x", v47);
            }
          }
          return 4294954394;
        }
        return 0;
      }
      if (sub_D1C38(3u, 4))
      {
        int v50 = sub_D1C7C(3u);
        __uint64_t v37 = sub_DDEFC();
        long long v38 = (const char *)sub_D1CB0(4);
        if (v50)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d\n", v37, 3, v38, "AVE_ImgBuf_VerifyUncompressed", 763, "(width >= (videoWidth >> ((pFmt->iSubWidthC) >> 1))) && (height >= (videoHeight >> ((pFmt->iSubHeightC) >> 1)))", v26, v28, a2, a3);
          __uint64_t v51 = sub_DDEFC();
          sub_D1CB0(4);
LABEL_57:
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d", v51, 3);
          return 4294954394;
        }
        uint64_t v60 = a2;
        uint64_t v61 = a3;
        size_t v58 = v26;
        size_t v59 = v28;
        v52 = "(width >= (videoWidth >> ((pFmt->iSubWidthC) >> 1))) && (height >= (videoHeight >> ((pFmt->iSubHeightC) >> 1)))";
        uint64_t v53 = 763;
        goto LABEL_52;
      }
    }
    else
    {
      if ((a5 & 1) != 0
        || (size_t v39 = CVPixelBufferGetWidthOfPlane(a1, 1uLL),
            size_t v40 = CVPixelBufferGetHeightOfPlane(a1, 1uLL),
            !(v39 | v40)))
      {
        int v41 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
        if (v41)
        {
          if (sub_D1C38(3u, 4))
          {
            int v42 = sub_D1C7C(3u);
            __uint64_t v43 = sub_DDEFC();
            long long v44 = (const char *)sub_D1CB0(4);
            if (v42)
            {
              printf("%lld %d AVE %s: %s:%d %s | invalid buffer stride %x\n", v43, 3, v44, "AVE_ImgBuf_VerifyUncompressed", 749, "stride == 0", v41);
              __uint64_t v43 = sub_DDEFC();
              sub_D1CB0(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer stride %x", v43);
          }
          return 4294954394;
        }
        return 0;
      }
      if (sub_D1C38(3u, 4))
      {
        int v54 = sub_D1C7C(3u);
        __uint64_t v37 = sub_DDEFC();
        long long v38 = (const char *)sub_D1CB0(4);
        if (v54)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d\n", v37, 3, v38, "AVE_ImgBuf_VerifyUncompressed", 743, "width == 0 && height == 0", v39, v40, a2, a3);
          __uint64_t v51 = sub_DDEFC();
          sub_D1CB0(4);
          goto LABEL_57;
        }
        uint64_t v60 = a2;
        uint64_t v61 = a3;
        size_t v58 = v39;
        size_t v59 = v40;
        v52 = "width == 0 && height == 0";
        uint64_t v53 = 743;
        goto LABEL_52;
      }
    }
    return 4294954394;
  }
  if (sub_D1C38(3u, 4))
  {
    int v36 = sub_D1C7C(3u);
    __uint64_t v37 = sub_DDEFC();
    long long v38 = (const char *)sub_D1CB0(4);
    if (v36)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d\n", v37, 3, v38, "AVE_ImgBuf_VerifyUncompressed", 722, "width >= videoWidth && height >= videoHeight", v13, v19, a2, a3);
      __uint64_t v37 = sub_DDEFC();
      uint64_t v60 = a2;
      uint64_t v61 = a3;
      size_t v58 = v13;
      size_t v59 = v19;
      uint64_t v56 = 722;
      v57 = "width >= videoWidth && height >= videoHeight";
      v55 = sub_D1CB0(4);
LABEL_53:
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d", v37, 3, v55, "AVE_ImgBuf_VerifyUncompressed", v56, v57, v58, v59, v60, v61);
      return 4294954394;
    }
    uint64_t v60 = a2;
    uint64_t v61 = a3;
    size_t v58 = v13;
    size_t v59 = v19;
    v52 = "width >= videoWidth && height >= videoHeight";
    uint64_t v53 = 722;
LABEL_52:
    uint64_t v56 = v53;
    v57 = v52;
    v55 = (void *)v38;
    goto LABEL_53;
  }
  return 4294954394;
}

uint64_t sub_D0E8(__CVBuffer *a1, _DWORD *a2)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t extraRowsOnBottom = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetIOSurface(a1);
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
  uint64_t BaseAddressOfCompressedTileHeaderRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
  uint64_t v5 = BaseAddressOfCompressedTileHeaderRegionOfPlane;
  if (!BaseAddressOfCompressedTileHeaderRegionOfPlane || (BaseAddressOfCompressedTileHeaderRegionOfPlane & 0x3F) != 0)
  {
    if (!sub_D1C38(3u, 4)) {
      return 4294954394;
    }
    int v23 = sub_D1C7C(3u);
    __uint64_t v24 = sub_DDEFC();
    int v25 = (const char *)sub_D1CB0(4);
    if (v23)
    {
      uint64_t v26 = 813;
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer header base address 0x%lx\n", v24, 3, v25, "AVE_ImgBuf_VerifyHTPC", 813, "baseAddr != 0 && (baseAddr & 0x3F) == 0", v5);
LABEL_21:
      __uint64_t v24 = sub_DDEFC();
      uint64_t v63 = v5;
      uint64_t v61 = v26;
      size_t v59 = sub_D1CB0(4);
LABEL_31:
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer header base address 0x%lx", v24, 3, v59, "AVE_ImgBuf_VerifyHTPC", v61, "baseAddr != 0 && (baseAddr & 0x3F) == 0", v63);
      return 4294954394;
    }
    uint64_t v63 = v5;
    uint64_t v35 = 813;
LABEL_30:
    uint64_t v61 = v35;
    size_t v59 = (void *)v25;
    goto LABEL_31;
  }
  uint64_t BaseAddressOfCompressedTileDataRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
  unint64_t v7 = BaseAddressOfCompressedTileDataRegionOfPlane;
  if (!BaseAddressOfCompressedTileDataRegionOfPlane || (BaseAddressOfCompressedTileDataRegionOfPlane & 0x3F) != 0)
  {
    if (!sub_D1C38(3u, 4)) {
      return 4294954394;
    }
    int v27 = sub_D1C7C(3u);
    __uint64_t v28 = sub_DDEFC();
    unsigned int v29 = (const char *)sub_D1CB0(4);
    if (v27)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx\n", v28, 3, v29, "AVE_ImgBuf_VerifyHTPC", 817, "dataBaseAddr != 0 && (dataBaseAddr & 0x3F) == 0", v7);
LABEL_25:
      __uint64_t v30 = sub_DDEFC();
      sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx", v30);
      return 4294954394;
    }
LABEL_48:
    syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx", v28);
    return 4294954394;
  }
  uint64_t BytesPerCompressedTileHeaderOfPlane = IOSurfaceGetBytesPerCompressedTileHeaderOfPlane();
  uint64_t WidthInCompressedTilesOfPlane = IOSurfaceGetWidthInCompressedTilesOfPlane();
  uint64_t HeightInCompressedTilesOfPlane = IOSurfaceGetHeightInCompressedTilesOfPlane();
  int WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  int HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  unsigned int v13 = extraColumnsOnLeft + WidthOfPlane + extraColumnsOnRight;
  unsigned int v14 = extraRowsOnTop + HeightOfPlane + extraRowsOnBottom;
  BOOL v15 = (v13 & 0xF) == 0;
  unsigned int v16 = v13 >> 4;
  if (v15) {
    int v17 = v16;
  }
  else {
    int v17 = v16 + 1;
  }
  if ((v14 & 7) != 0) {
    int v18 = (v14 >> 3) + 1;
  }
  else {
    int v18 = v14 >> 3;
  }
  if (v17 != WidthInCompressedTilesOfPlane || v18 != HeightInCompressedTilesOfPlane)
  {
    if (!sub_D1C38(3u, 4)) {
      return 4294954394;
    }
    int v31 = sub_D1C7C(3u);
    __uint64_t v32 = sub_DDEFC();
    int v33 = (const char *)sub_D1CB0(4);
    if (v31)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d\n", v32, 3, v33, "AVE_ImgBuf_VerifyHTPC", 841, "width == neededWidth && height == neededHeight", WidthInCompressedTilesOfPlane, HeightInCompressedTilesOfPlane, v17, v18);
      __uint64_t v34 = sub_DDEFC();
      sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d", v34, 3);
      return 4294954394;
    }
    goto LABEL_49;
  }
  if ((unint64_t)(WidthInCompressedTilesOfPlane
                                      * BytesPerCompressedTileHeaderOfPlane
                                      * HeightInCompressedTilesOfPlane)
     + v5 > v7)
  {
    if (sub_D1C38(3u, 4))
    {
      int v19 = sub_D1C7C(3u);
      __uint64_t v20 = sub_DDEFC();
      int v21 = (const char *)sub_D1CB0(4);
      if (v19)
      {
        printf("%lld %d AVE %s: %s:%d %s | invalid buffer base address/size 0x%lx 0x%lx %d %d %d\n", v20, 3, v21, "AVE_ImgBuf_VerifyHTPC", 845, "dataBaseAddr >= (baseAddr + width * height * size)", v7, v5, WidthInCompressedTilesOfPlane, HeightInCompressedTilesOfPlane, BytesPerCompressedTileHeaderOfPlane);
        __uint64_t v20 = sub_DDEFC();
        unsigned int v22 = (const char *)sub_D1CB0(4);
        uint64_t v66 = HeightInCompressedTilesOfPlane;
        uint64_t v67 = BytesPerCompressedTileHeaderOfPlane;
        uint64_t v64 = v5;
        uint64_t v65 = WidthInCompressedTilesOfPlane;
        unint64_t v62 = v7;
        uint64_t v60 = 845;
LABEL_17:
        size_t v58 = v22;
LABEL_57:
        syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer base address/size 0x%lx 0x%lx %d %d %d", v20, 3, v58, "AVE_ImgBuf_VerifyHTPC", v60, "dataBaseAddr >= (baseAddr + width * height * size)", v62, v64, v65, v66, v67);
        return 4294954394;
      }
      uint64_t v66 = HeightInCompressedTilesOfPlane;
      uint64_t v67 = BytesPerCompressedTileHeaderOfPlane;
      uint64_t v64 = v5;
      uint64_t v65 = WidthInCompressedTilesOfPlane;
      unint64_t v62 = v7;
      uint64_t v52 = 845;
      goto LABEL_56;
    }
    return 4294954394;
  }
  if (a2[3])
  {
    uint64_t v36 = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
    uint64_t v5 = v36;
    if (v36 && (v36 & 0x3F) == 0)
    {
      uint64_t v37 = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
      unint64_t v38 = v37;
      if (v37 && (v37 & 0x3F) == 0)
      {
        uint64_t v39 = IOSurfaceGetBytesPerCompressedTileHeaderOfPlane();
        uint64_t v40 = IOSurfaceGetWidthInCompressedTilesOfPlane();
        uint64_t v41 = IOSurfaceGetHeightInCompressedTilesOfPlane();
        int v42 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
        int v43 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
        unsigned int v44 = (extraColumnsOnLeft >> ((int)a2[4] >> 1))
            + v42
            + (extraColumnsOnRight >> ((int)a2[4] >> 1));
        unsigned int v45 = (extraRowsOnTop >> ((int)a2[5] >> 1))
            + v43
            + (extraRowsOnBottom >> ((int)a2[5] >> 1));
        BOOL v15 = (v44 & 7) == 0;
        unsigned int v46 = v44 >> 3;
        if (v15) {
          unsigned int v47 = v46;
        }
        else {
          unsigned int v47 = v46 + 1;
        }
        if ((v45 & 7) != 0) {
          int v48 = (v45 >> 3) + 1;
        }
        else {
          int v48 = v45 >> 3;
        }
        if (v47 == v40)
        {
          if ((unint64_t)(v40 * v39 * v41) + v5 > v38)
          {
            if (sub_D1C38(3u, 4))
            {
              int v49 = sub_D1C7C(3u);
              __uint64_t v20 = sub_DDEFC();
              int v21 = (const char *)sub_D1CB0(4);
              if (v49)
              {
                printf("%lld %d AVE %s: %s:%d %s | invalid buffer base address/size 0x%lx 0x%lx %d %d %d\n", v20, 3, v21, "AVE_ImgBuf_VerifyHTPC", 893, "dataBaseAddr >= (baseAddr + width * height * size)", v38, v5, v40, v41, v39);
                __uint64_t v20 = sub_DDEFC();
                unsigned int v22 = (const char *)sub_D1CB0(4);
                uint64_t v66 = v41;
                uint64_t v67 = v39;
                uint64_t v64 = v5;
                uint64_t v65 = v40;
                unint64_t v62 = v38;
                uint64_t v60 = 893;
                goto LABEL_17;
              }
              uint64_t v66 = v41;
              uint64_t v67 = v39;
              uint64_t v64 = v5;
              uint64_t v65 = v40;
              unint64_t v62 = v38;
              uint64_t v52 = 893;
LABEL_56:
              uint64_t v60 = v52;
              size_t v58 = v21;
              goto LABEL_57;
            }
            return 4294954394;
          }
          return 0;
        }
        if (!sub_D1C38(3u, 4)) {
          return 4294954394;
        }
        int v55 = sub_D1C7C(3u);
        __uint64_t v32 = sub_DDEFC();
        uint64_t v56 = (const char *)sub_D1CB0(4);
        if (v55)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d\n", v32, 3, v56, "AVE_ImgBuf_VerifyHTPC", 888, "width == neededWidth", v40, v41, v47, v48);
          __uint64_t v57 = sub_DDEFC();
          sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d", v57, 3);
          return 4294954394;
        }
LABEL_49:
        syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d", v32, 3);
        return 4294954394;
      }
      if (!sub_D1C38(3u, 4)) {
        return 4294954394;
      }
      int v53 = sub_D1C7C(3u);
      __uint64_t v28 = sub_DDEFC();
      int v54 = (const char *)sub_D1CB0(4);
      if (v53)
      {
        printf("%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx\n", v28, 3, v54, "AVE_ImgBuf_VerifyHTPC", 858, "dataBaseAddr != 0 && (dataBaseAddr & 0x3F) == 0", v38);
        goto LABEL_25;
      }
      goto LABEL_48;
    }
    if (!sub_D1C38(3u, 4)) {
      return 4294954394;
    }
    int v51 = sub_D1C7C(3u);
    __uint64_t v24 = sub_DDEFC();
    int v25 = (const char *)sub_D1CB0(4);
    if (v51)
    {
      uint64_t v26 = 854;
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer header base address 0x%lx\n", v24, 3, v25, "AVE_ImgBuf_VerifyHTPC", 854, "baseAddr != 0 && (baseAddr & 0x3F) == 0", v5);
      goto LABEL_21;
    }
    uint64_t v63 = v5;
    uint64_t v35 = 854;
    goto LABEL_30;
  }
  return 0;
}

uint64_t sub_D888(__CVBuffer *a1, _DWORD *a2)
{
  size_t extraColumnsOnLeft = 0;
  size_t extraRowsOnTop = 0;
  size_t extraColumnsOnRight = 0;
  size_t extraRowsOnBottom = 0;
  CVPixelBufferGetIOSurface(a1);
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
  uint64_t BaseAddressOfCompressedTileHeaderRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
  uint64_t v5 = BaseAddressOfCompressedTileHeaderRegionOfPlane;
  if (!BaseAddressOfCompressedTileHeaderRegionOfPlane || (BaseAddressOfCompressedTileHeaderRegionOfPlane & 0x3F) != 0)
  {
    if (!sub_D1C38(3u, 4)) {
      return 4294954394;
    }
    int v32 = sub_D1C7C(3u);
    __uint64_t v33 = sub_DDEFC();
    __uint64_t v34 = (const char *)sub_D1CB0(4);
    if (v32)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer header base address 0x%lx\n", v33, 3, v34, "AVE_ImgBuf_VerifyInterchange", 933, "hdrBaseAddr != 0 && (hdrBaseAddr & 0x3F) == 0", v5);
LABEL_29:
      __uint64_t v35 = sub_DDEFC();
      sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer header base address 0x%lx", v35);
      return 4294954394;
    }
LABEL_38:
    syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer header base address 0x%lx", v33);
    return 4294954394;
  }
  uint64_t BaseAddressOfCompressedTileDataRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
  uint64_t v7 = BaseAddressOfCompressedTileDataRegionOfPlane;
  if (!BaseAddressOfCompressedTileDataRegionOfPlane || (BaseAddressOfCompressedTileDataRegionOfPlane & 0x3F) != 0)
  {
    if (!sub_D1C38(3u, 4)) {
      return 4294954394;
    }
    int v36 = sub_D1C7C(3u);
    __uint64_t v37 = sub_DDEFC();
    unint64_t v38 = (const char *)sub_D1CB0(4);
    if (v36)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx\n", v37, 3, v38, "AVE_ImgBuf_VerifyInterchange", 937, "dataBaseAddr != 0 && (dataBaseAddr & 0x3F) == 0", v7);
LABEL_33:
      __uint64_t v39 = sub_DDEFC();
      sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx", v39);
      return 4294954394;
    }
LABEL_39:
    syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx", v37);
    return 4294954394;
  }
  int WidthInCompressedTilesOfPlane = IOSurfaceGetWidthInCompressedTilesOfPlane();
  int HeightInCompressedTilesOfPlane = IOSurfaceGetHeightInCompressedTilesOfPlane();
  int WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  int HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  unsigned int v12 = extraColumnsOnLeft + WidthOfPlane + extraColumnsOnRight;
  unsigned int v13 = extraRowsOnTop + HeightOfPlane + extraRowsOnBottom;
  BOOL v14 = (v12 & 0x1F) == 0;
  unsigned int v15 = v12 >> 5;
  if (v14) {
    int v16 = v15;
  }
  else {
    int v16 = v15 + 1;
  }
  if ((v13 & 0x1F) != 0) {
    int v17 = (v13 >> 5) + 1;
  }
  else {
    int v17 = v13 >> 5;
  }
  if (v16 != WidthInCompressedTilesOfPlane || v17 != HeightInCompressedTilesOfPlane)
  {
    if (sub_D1C38(3u, 4))
    {
      int v40 = sub_D1C7C(3u);
      __uint64_t v41 = sub_DDEFC();
      int v42 = (const char *)sub_D1CB0(4);
      if (v40)
      {
        printf("%lld %d AVE %s: %s:%d %s | invalid Luma buffer dimension %d %d %d %d.\n", v41, 3, v42, "AVE_ImgBuf_VerifyInterchange", 957, "width == neededWidth && height == neededHeight", WidthInCompressedTilesOfPlane, HeightInCompressedTilesOfPlane, v16, v17);
        __uint64_t v41 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid Luma buffer dimension %d %d %d %d.", v41, 3);
    }
    return 4294954394;
  }
  if (!a2[3]) {
    return 0;
  }
  uint64_t v18 = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
  uint64_t v19 = v18;
  if (!v18 || (v18 & 0x3F) != 0)
  {
    if (!sub_D1C38(3u, 4)) {
      return 4294954394;
    }
    int v43 = sub_D1C7C(3u);
    __uint64_t v33 = sub_DDEFC();
    unsigned int v44 = (const char *)sub_D1CB0(4);
    if (v43)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer header base address 0x%lx\n", v33, 3, v44, "AVE_ImgBuf_VerifyInterchange", 966, "hdrBaseAddr != 0 && (hdrBaseAddr & 0x3F) == 0", v19);
      goto LABEL_29;
    }
    goto LABEL_38;
  }
  uint64_t v20 = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
  uint64_t v21 = v20;
  if (!v20 || (v20 & 0x3F) != 0)
  {
    if (!sub_D1C38(3u, 4)) {
      return 4294954394;
    }
    int v45 = sub_D1C7C(3u);
    __uint64_t v37 = sub_DDEFC();
    unsigned int v46 = (const char *)sub_D1CB0(4);
    if (v45)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx\n", v37, 3, v46, "AVE_ImgBuf_VerifyInterchange", 970, "dataBaseAddr != 0 && (dataBaseAddr & 0x3F) == 0", v21);
      goto LABEL_33;
    }
    goto LABEL_39;
  }
  int v22 = IOSurfaceGetWidthInCompressedTilesOfPlane();
  int v23 = IOSurfaceGetHeightInCompressedTilesOfPlane();
  int v24 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  int v25 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  unsigned int v26 = (extraColumnsOnLeft >> ((int)a2[4] >> 1))
      + v24
      + (extraColumnsOnRight >> ((int)a2[4] >> 1));
  unsigned int v27 = (extraRowsOnTop >> ((int)a2[5] >> 1))
      + v25
      + (extraRowsOnBottom >> ((int)a2[5] >> 1));
  BOOL v14 = (v26 & 0xF) == 0;
  unsigned int v28 = v26 >> 4;
  if (v14) {
    unsigned int v29 = v28;
  }
  else {
    unsigned int v29 = v28 + 1;
  }
  if ((v27 & 0xF) != 0) {
    int v30 = (v27 >> 4) + 1;
  }
  else {
    int v30 = v27 >> 4;
  }
  if (v29 == v22) {
    return 0;
  }
  if (sub_D1C38(3u, 4))
  {
    int v47 = sub_D1C7C(3u);
    __uint64_t v48 = sub_DDEFC();
    int v49 = (const char *)sub_D1CB0(4);
    if (v47)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid Chroma buffer dimension %d %d %d %d\n", v48, 3, v49, "AVE_ImgBuf_VerifyInterchange", 996, "width == neededWidth", v22, v23, v29, v30);
      __uint64_t v48 = sub_DDEFC();
      sub_D1CB0(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | invalid Chroma buffer dimension %d %d %d %d", v48, 3);
  }
  return 4294954394;
}

void sub_DE6C()
{
  int v0 = 0;
  sub_D7E4C();
  operator new[]();
}

uint64_t sub_E2B0(unsigned int *a1, CVPixelBufferRef *a2, CVPixelBufferPoolRef *a3)
{
  CVPixelBufferRef pixelBufferOut = 0;
  CVPixelBufferPoolRef poolOut = 0;
  if (!a3 || !*a2)
  {
    if (sub_D1C38(3u, 4))
    {
      int v14 = sub_D1C7C(3u);
      __uint64_t v15 = sub_DDEFC();
      int v16 = (const char *)sub_D1CB0(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %p\n", v15, 3, v16, "AVE_VerifyImageBuffer", 1100, "pImgBuf != __null && ppImgBufPool != __null", *a2, a3);
        __uint64_t v15 = sub_DDEFC();
        int v16 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %p", v15, 3, v16, "AVE_VerifyImageBuffer", 1100, "pImgBuf != __null && ppImgBufPool != __null", *a2, a3);
    }
    goto LABEL_60;
  }
  CVPixelBufferRetain(*a2);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(*a2);
  uint64_t v7 = (int *)sub_D7E18(PixelFormatType);
  if (!v7)
  {
    if (sub_D1C38(3u, 4))
    {
      int v17 = sub_D1C7C(3u);
      __uint64_t v18 = sub_DDEFC();
      uint64_t v19 = (const char *)sub_D1CB0(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | pixel format is not supported %d\n", v18, 3, v19, "AVE_VerifyImageBuffer", 1107, "pPixelFmt != __null", PixelFormatType);
        __uint64_t v18 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | pixel format is not supported %d", v18);
    }
    goto LABEL_60;
  }
  uint64_t v8 = (uint64_t)v7;
  unsigned int v9 = sub_C8F74(*a2, v7, a1[3], *((unsigned __int8 *)a1 + 24), *((unsigned __int8 *)a1 + 52), a1[14], a1[7], a1 + 8, a1[12]);
  if (sub_D1C38(0xCu, 7))
  {
    int v10 = sub_D1C7C(0xCu);
    __uint64_t v11 = sub_DDEFC();
    unsigned int v12 = (const char *)sub_D1CB0(7);
    if (v10)
    {
      printf("%lld %d AVE %s: PixelFormat %x | %d %d (%d %d %d) %d %d\n", v11, 12, v12, PixelFormatType, *(_DWORD *)(v8 + 4), *(_DWORD *)(v8 + 8), *(_DWORD *)(v8 + 12), *(_DWORD *)(v8 + 16), *(_DWORD *)(v8 + 20), *(_DWORD *)(v8 + 24), *(_DWORD *)(v8 + 28));
      __uint64_t v13 = sub_DDEFC();
      v78 = sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: PixelFormat %x | %d %d (%d %d %d) %d %d", v13, 12, v78);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: PixelFormat %x | %d %d (%d %d %d) %d %d", v11, 12, v12);
    }
  }
  if (sub_D1C38(0xCu, 7))
  {
    int v20 = sub_D1C7C(0xCu);
    __uint64_t v21 = sub_DDEFC();
    int v22 = (const char *)sub_D1CB0(7);
    int WidthOfPlane = CVPixelBufferGetWidthOfPlane(*a2, 0);
    int HeightOfPlane = CVPixelBufferGetHeightOfPlane(*a2, 0);
    if (v20)
    {
      printf("%lld %d AVE %s: Pixel Buffer Width %d Height %d\n", v21, 12, v22, WidthOfPlane, HeightOfPlane);
      __uint64_t v25 = sub_DDEFC();
      unsigned int v26 = (const char *)sub_D1CB0(7);
      int v27 = CVPixelBufferGetWidthOfPlane(*a2, 0);
      int v79 = CVPixelBufferGetHeightOfPlane(*a2, 0);
      syslog(3, "%lld %d AVE %s: Pixel Buffer Width %d Height %d", v25, 12, v26, v27, v79);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Pixel Buffer Width %d Height %d", v21, 12, v22, WidthOfPlane, HeightOfPlane);
    }
  }
  if ((v9 & 2) == 0) {
    sub_DE6C();
  }
  unsigned int v28 = *a3;
  if (!*a3)
  {
    int v35 = CVPixelBufferGetWidthOfPlane(*a2, 0);
    int v36 = CVPixelBufferGetHeightOfPlane(*a2, 0);
    uint64_t v37 = sub_C58C(a1[3], a1[2], a1[4], a1[5], v35, v36, *a1, a1[1], PixelFormatType, &poolOut);
    if (v37)
    {
      uint64_t v38 = v37;
      if (sub_D1C38(3u, 4))
      {
        int v39 = sub_D1C7C(3u);
        __uint64_t v40 = sub_DDEFC();
        __uint64_t v41 = (const char *)sub_D1CB0(4);
        if (v39)
        {
          printf("%lld %d AVE %s: %s:%d %s | failed to create a buffer pool %d\n", v40, 3, v41, "AVE_VerifyImageBuffer", 1135, "rc == noErr", v38);
          __uint64_t v40 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create a buffer pool %d", v40);
      }
      goto LABEL_61;
    }
    unsigned int v28 = *a3;
  }
  if (v28) {
    unsigned int v29 = v28;
  }
  else {
    unsigned int v29 = poolOut;
  }
  CVReturn v30 = CVPixelBufferPoolCreatePixelBuffer(0, v29, &pixelBufferOut);
  if (v30)
  {
    CVReturn v31 = v30;
    if (sub_D1C38(3u, 4))
    {
      int v32 = sub_D1C7C(3u);
      __uint64_t v33 = sub_DDEFC();
      __uint64_t v34 = (const char *)sub_D1CB0(4);
      if (v32)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to crete pixel buffer from a pool %d\n", v33, 3, v34, "AVE_VerifyImageBuffer", 1141, "cvrc == kCVReturnSuccess", v31);
        __uint64_t v33 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to crete pixel buffer from a pool %d", v33);
    }
LABEL_60:
    uint64_t v38 = 4294954394;
LABEL_61:
    if (pixelBufferOut)
    {
      CVPixelBufferRelease(pixelBufferOut);
      CVPixelBufferRef pixelBufferOut = 0;
    }
    if (poolOut)
    {
      CFRelease(poolOut);
      CVPixelBufferPoolRef poolOut = 0;
    }
    goto LABEL_65;
  }
  sub_C834(*a2, pixelBufferOut);
  CVPixelBufferRelease(*a2);
  int v42 = pixelBufferOut;
  *a2 = pixelBufferOut;
  CVPixelBufferRef pixelBufferOut = 0;
  unsigned int v43 = v9 & 2;
  sub_C95E0(v42, v9, v8);
  if (sub_D1C38(0xCu, 7))
  {
    int v44 = sub_D1C7C(0xCu);
    __uint64_t v82 = sub_DDEFC();
    int v45 = (const char *)sub_D1CB0(7);
    uint64_t v46 = a1[1];
    uint64_t v80 = *a1;
    uint64_t v48 = a1[2];
    uint64_t v47 = a1[3];
    uint64_t v49 = a1[4];
    uint64_t v50 = a1[5];
    uint64_t v51 = *((unsigned __int8 *)a1 + 24);
    if (v44)
    {
      printf("%lld %d AVE %s: VIB IN %s:%d | %d %d | %d %d 0x%x %d | %d %d %d %d %d || %d %d | %d %d %d %d | %d %d | %d %d | %d %d %d | %x\n", v82, 12, v45, "AVE_VerifyImageBuffer", 1165, v80, v46, v47, v48, v49, v50, v51, a1[7], a1[12], *((unsigned __int8 *)a1 + 52), a1[14], a1[26], a1[27],
        a1[32],
        a1[33],
        a1[34],
        a1[35],
        a1[30],
        a1[31],
        a1[28],
        a1[29],
        *((unsigned __int8 *)a1 + 146),
        *((unsigned __int8 *)a1 + 144),
        *((unsigned __int8 *)a1 + 145),
        v9);
      __uint64_t v83 = sub_DDEFC();
      v81 = sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: VIB IN %s:%d | %d %d | %d %d 0x%x %d | %d %d %d %d %d || %d %d | %d %d %d %d | %d %d | %d %d | %d %d %d | %x", v83, 12, v81, "AVE_VerifyImageBuffer", 1165, *a1, a1[1], a1[3], a1[2], a1[4], a1[5], *((unsigned __int8 *)a1 + 24));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: VIB IN %s:%d | %d %d | %d %d 0x%x %d | %d %d %d %d %d || %d %d | %d %d %d %d | %d %d | %d %d | %d %d %d | %x", v82, 12, v45, "AVE_VerifyImageBuffer", 1165, v80, v46, v47, v48, v49, v50, v51);
    }
    unsigned int v43 = v9 & 2;
  }
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t extraRowsOnBottom = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(*a2, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
  int v52 = CVPixelBufferGetWidthOfPlane(*a2, 0);
  int v53 = CVPixelBufferGetHeightOfPlane(*a2, 0);
  unsigned int v54 = extraColumnsOnLeft;
  unsigned int v55 = extraColumnsOnRight;
  unsigned int v56 = extraColumnsOnLeft + extraColumnsOnRight + v52;
  unsigned int v57 = extraRowsOnTop;
  unsigned int v58 = extraRowsOnBottom;
  unsigned int v59 = extraRowsOnTop + extraRowsOnBottom + v53;
  long long v60 = *(_OWORD *)(v8 + 28);
  long long v61 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)(a1 + 15) = *(_OWORD *)v8;
  *(_OWORD *)(a1 + 19) = v61;
  *(_OWORD *)(a1 + 22) = v60;
  a1[26] = v56;
  a1[27] = v59;
  a1[32] = v54;
  a1[33] = v55;
  a1[34] = v57;
  a1[35] = v58;
  a1[30] = CVPixelBufferGetBytesPerRowOfPlane(*a2, 0);
  unsigned int BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(*a2, 1uLL);
  a1[31] = BytesPerRowOfPlane;
  a1[28] = a1[30];
  if (*(_DWORD *)(v8 + 12)) {
    unsigned int v63 = BytesPerRowOfPlane;
  }
  else {
    unsigned int v63 = 0;
  }
  a1[29] = v63;
  char v64 = v9 & 1;
  if ((v9 & 0x10) != 0) {
    char v64 = 1;
  }
  *((unsigned char *)a1 + 146) = v64;
  *((unsigned char *)a1 + 144) = v43 >> 1;
  if ((~v9 & 0x500) != 0) {
    char v65 = 0;
  }
  else {
    char v65 = 5;
  }
  if ((~v9 & 0x50000) == 0) {
    v65 |= 0xAu;
  }
  *((unsigned char *)a1 + 145) = v65;
  if (poolOut) {
    *a3 = poolOut;
  }
  if (sub_D1C38(0xCu, 7))
  {
    int v66 = sub_D1C7C(0xCu);
    __uint64_t v84 = sub_DDEFC();
    uint64_t v67 = (const char *)sub_D1CB0(7);
    uint64_t v68 = *a1;
    uint64_t v69 = a1[1];
    uint64_t v71 = a1[2];
    uint64_t v70 = a1[3];
    uint64_t v72 = a1[4];
    uint64_t v73 = a1[5];
    uint64_t v74 = *((unsigned __int8 *)a1 + 24);
    if (v66)
    {
      printf("%lld %d AVE %s: VIB OUT %s:%d | %d %d | %d %d 0x%x %d | %d %d %d %d %d || %d %d | %d %d %d %d | %d %d | %d %d | %d %d %d | %x\n", v84, 12, v67, "AVE_VerifyImageBuffer", 1240, v68, v69, v70, v71, v72, v73, v74, a1[7], a1[12], *((unsigned __int8 *)a1 + 52), a1[14], a1[26], a1[27],
        a1[32],
        a1[33],
        a1[34],
        a1[35],
        a1[30],
        a1[31],
        a1[28],
        a1[29],
        *((unsigned __int8 *)a1 + 146),
        *((unsigned __int8 *)a1 + 144),
        *((unsigned __int8 *)a1 + 145),
        v9);
      __uint64_t v75 = sub_DDEFC();
      v76 = sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: VIB OUT %s:%d | %d %d | %d %d 0x%x %d | %d %d %d %d %d || %d %d | %d %d %d %d | %d %d | %d %d | %d %d %d | %x", v75, 12, v76, "AVE_VerifyImageBuffer", 1240, *a1, a1[1], a1[3], a1[2], a1[4], a1[5], *((unsigned __int8 *)a1 + 24));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: VIB OUT %s:%d | %d %d | %d %d 0x%x %d | %d %d %d %d %d || %d %d | %d %d %d %d | %d %d | %d %d | %d %d %d | %x", v84, 12, v67, "AVE_VerifyImageBuffer", 1240, v68, v69, v70, v71, v72, v73, v74);
    }
  }
  uint64_t v38 = 0;
LABEL_65:
  if (!*((unsigned char *)a1 + 144)) {
    CVPixelBufferRelease(*a2);
  }
  return v38;
}

uint64_t sub_EF00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, uint64_t a12)
{
  if (a10)
  {
    uint64_t v12 = sub_BA70();
    if (v12)
    {
      uint64_t v13 = v12;
      if (sub_D1C38(3u, 4))
      {
        int v14 = sub_D1C7C(3u);
        __uint64_t v15 = sub_DDEFC();
        int v16 = (const char *)sub_D1CB0(4);
        if (v14)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: %s:%d AVE_PixelBufAttr_CreateDictFromProfile failed.\n", v15, 3, v16, "AVE_UpdatePixelBufferDict", 1325, "rc == noErr", "AVE_UpdatePixelBufferDict", 1325);
          __uint64_t v15 = sub_DDEFC();
          uint64_t v32 = 1325;
          uint64_t v31 = 1325;
          unsigned int v29 = sub_D1CB0(4);
        }
        else
        {
          uint64_t v32 = 1325;
          uint64_t v31 = 1325;
          unsigned int v29 = (void *)v16;
        }
        int v17 = "%lld %d AVE %s: %s:%d %s | FIG: %s:%d AVE_PixelBufAttr_CreateDictFromProfile failed.";
LABEL_22:
        syslog(3, v17, v15, 3, v29, "AVE_UpdatePixelBufferDict", v31, "rc == noErr", "AVE_UpdatePixelBufferDict", v32);
        return v13;
      }
      return v13;
    }
LABEL_12:
    if (a12 == 1)
    {
      if (sub_D1C38(0xCu, 7))
      {
        int v24 = sub_D1C7C(0xCu);
        __uint64_t v25 = sub_DDEFC();
        unsigned int v26 = (const char *)sub_D1CB0(7);
        if (v24)
        {
          printf("%lld %d AVE %s: %s:%d session = FIGINTERNALSESSIONMARK\n", v25, 12, v26, "AVE_UpdatePixelBufferDict", 1333);
          __uint64_t v27 = sub_DDEFC();
          CVReturn v30 = (const char *)sub_D1CB0(7);
          syslog(3, "%lld %d AVE %s: %s:%d session = FIGINTERNALSESSIONMARK", v27, 12, v30, "AVE_UpdatePixelBufferDict", 1333);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d session = FIGINTERNALSESSIONMARK", v25, 12, v26, "AVE_UpdatePixelBufferDict", 1333);
        }
      }
      return 0;
    }
    else
    {
      uint64_t v13 = VTEncoderSessionSetPixelBufferAttributes();
      if (v13 && sub_D1C38(3u, 4))
      {
        int v21 = sub_D1C7C(3u);
        __uint64_t v22 = sub_DDEFC();
        int v23 = (const char *)sub_D1CB0(4);
        if (v21)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: VTEncoderSessionSetPixelBufferAttributes failed.\n", v22, 3, v23, "AVE_UpdatePixelBufferDict", 1342, "rc == noErr");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTEncoderSessionSetPixelBufferAttributes failed.");
      }
    }
    return v13;
  }
  uint64_t v18 = sub_BFB8();
  if (!v18) {
    goto LABEL_12;
  }
  uint64_t v13 = v18;
  if (sub_D1C38(3u, 4))
  {
    int v19 = sub_D1C7C(3u);
    __uint64_t v15 = sub_DDEFC();
    int v20 = (const char *)sub_D1CB0(4);
    if (v19)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: %s:%d AVE_PixelBufAttr_CreateDict failed.\n", v15, 3, v20, "AVE_UpdatePixelBufferDict", 1315, "rc == noErr", "AVE_UpdatePixelBufferDict", 1315);
      __uint64_t v15 = sub_DDEFC();
      uint64_t v32 = 1315;
      uint64_t v31 = 1315;
      unsigned int v29 = sub_D1CB0(4);
    }
    else
    {
      uint64_t v32 = 1315;
      uint64_t v31 = 1315;
      unsigned int v29 = (void *)v20;
    }
    int v17 = "%lld %d AVE %s: %s:%d %s | FIG: %s:%d AVE_PixelBufAttr_CreateDict failed.";
    goto LABEL_22;
  }
  return v13;
}

double sub_F2F0(uint64_t a1)
{
  *(void *)(a1 + 56) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_F304(void *a1)
{
  if (sub_D1C38(0x24u, 6))
  {
    int v2 = sub_D1C7C(0x24u);
    __uint64_t v3 = sub_DDEFC();
    signed int v4 = (const char *)sub_D1CB0(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld\n", v3, 36, v4, "AVE_DAL", "Uninit", a1, *a1);
      __uint64_t v3 = sub_DDEFC();
      sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld", v3);
  }
  uint64_t v5 = a1[4];
  if (v5)
  {
    sub_BDCDC(v5);
    operator delete();
  }
  uint64_t v6 = (unsigned char *)a1[3];
  if (v6)
  {
    uint64_t v7 = sub_BEE30(v6);
    a1[3] = 0;
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (pthread_mutex_t *)a1[1];
  if (v8)
  {
    uint64_t v7 = sub_BE904(v8);
    a1[1] = 0;
  }
  a1[2] = 0;
  if (sub_D1C38(0x24u, 6))
  {
    int v9 = sub_D1C7C(0x24u);
    __uint64_t v10 = sub_DDEFC();
    __uint64_t v11 = (const char *)sub_D1CB0(6);
    if (v9)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %d\n", v10, 36, v11, "AVE_DAL", "Uninit", a1, *a1, v7);
      __uint64_t v10 = sub_DDEFC();
      sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d", v10, 36);
  }
  return v7;
}

void sub_F52C(void *a1)
{
}

void *sub_F540(void *a1)
{
  return a1;
}

uint64_t sub_F56C(void *a1, int a2, int a3)
{
  __uint64_t v33 = 0;
  if (sub_D1C38(0x24u, 6))
  {
    int v6 = sub_D1C7C(0x24u);
    __uint64_t v7 = sub_DDEFC();
    uint64_t v8 = (const char *)sub_D1CB0(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %d %d\n", v7, 36, v8, "AVE_DAL", "Init", a1, *a1, a2, a3);
      __uint64_t v7 = sub_DDEFC();
      sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %d %d", v7, 36);
  }
  if (a2 < 1 || a3 <= 0)
  {
    if (sub_D1C38(0x24u, 4))
    {
      int v18 = sub_D1C7C(0x24u);
      __uint64_t v19 = sub_DDEFC();
      int v20 = (const char *)sub_D1CB0(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %d\n", v19, 36, v20, "AVE_DAL", "Init", 87, "num > 0 && size > 0", a1, *a1, a2, a3);
        __uint64_t v19 = sub_DDEFC();
        int v20 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %d", v19, 36, v20, "AVE_DAL");
    }
    goto LABEL_24;
  }
  int v9 = sub_BE89C();
  if (!v9)
  {
    if (sub_D1C38(0x24u, 4))
    {
      int v21 = sub_D1C7C(0x24u);
      __uint64_t v22 = sub_DDEFC();
      int v23 = (const char *)sub_D1CB0(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to create mutex %p %lld %d %d\n", v22, 36, v23, "AVE_DAL", "Init", 92, "pMutex != __null", a1, *a1, a2, a3);
        __uint64_t v24 = sub_DDEFC();
        uint64_t v31 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to create mutex %p %lld %d %d", v24, 36, v31, "AVE_DAL");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to create mutex %p %lld %d %d", v22, 36, v23, "AVE_DAL");
      }
    }
LABEL_24:
    __uint64_t v10 = 0;
    uint64_t v13 = 4294966295;
    goto LABEL_25;
  }
  __uint64_t v10 = v9;
  __uint64_t v11 = sub_C58D4(3);
  uint64_t v12 = sub_BEA54(0, a3 * a2, (uint64_t)v11[1], &v33);
  if (!v12) {
    operator new();
  }
  uint64_t v13 = v12;
  if (sub_D1C38(0x24u, 4))
  {
    int v14 = sub_D1C7C(0x24u);
    __uint64_t v15 = sub_DDEFC();
    int v16 = (const char *)sub_D1CB0(4);
    if (v14)
    {
      printf("%lld %d AVE %s: %s::%s:%d %s | fail to create surface %p %lld %s %llx %d %d %d\n", v15, 36, v16, "AVE_DAL", "Init", 99, "ret == 0", a1, *a1, *v11, v11[1], a2, a3, v13);
      __uint64_t v17 = sub_DDEFC();
      CVReturn v30 = sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to create surface %p %lld %s %llx %d %d %d", v17, 36, v30, "AVE_DAL", "Init", 99, "ret == 0");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to create surface %p %lld %s %llx %d %d %d", v15, 36, v16, "AVE_DAL", "Init", 99, "ret == 0");
    }
  }
LABEL_25:
  if (v33)
  {
    sub_BEE30(v33);
    __uint64_t v33 = 0;
  }
  if (v10) {
    sub_BE904(v10);
  }
  if (sub_D1C38(0x24u, 6))
  {
    int v25 = sub_D1C7C(0x24u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(6);
    if (v25)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %d %d %d\n", v26, 36, v27, "AVE_DAL", "Init", a1, *a1, a2, a3, v13);
      __uint64_t v28 = sub_DDEFC();
      uint64_t v32 = sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %d %d", v28, 36, v32);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %d %d", v26, 36, v27);
    }
  }
  return v13;
}

void sub_FCDC()
{
}

uint64_t sub_FD00(void *a1, int a2, void *a3)
{
  int v28 = a2;
  if (sub_D1C38(0x24u, 8))
  {
    int v6 = sub_D1C7C(0x24u);
    __uint64_t v7 = sub_DDEFC();
    uint64_t v8 = (const char *)sub_D1CB0(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %d %p\n", v7, 36, v8, "AVE_DAL", "Alloc", a1, *a1, a2, a3);
      __uint64_t v9 = sub_DDEFC();
      __uint64_t v24 = sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %d %p", v9, 36, v24);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %d %p", v7, 36, v8);
    }
  }
  if (a2 >= 1 && a3 && *((_DWORD *)a1 + 5) >= a2)
  {
    *a3 = 0;
    sub_BE94C((pthread_mutex_t *)a1[1]);
    uint64_t v10 = sub_BDEB8(a1[4], a3, &v28);
    if (v10 && sub_D1C38(0x24u, 4))
    {
      int v11 = sub_D1C7C(0x24u);
      __uint64_t v12 = sub_DDEFC();
      uint64_t v13 = (const char *)sub_D1CB0(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to allocate memory from UC info pool %p %lld %p %d %d\n", v12, 36, v13, "AVE_DAL", "Alloc", 210, "ret == 0", a1, *a1, a3, v28, v10);
        __uint64_t v14 = sub_DDEFC();
        int v25 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to allocate memory from UC info pool %p %lld %p %d %d", v14, 36, v25, "AVE_DAL", "Alloc");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to allocate memory from UC info pool %p %lld %p %d %d", v12, 36, v13, "AVE_DAL", "Alloc");
      }
    }
    sub_BE980((pthread_mutex_t *)a1[1]);
  }
  else
  {
    if (sub_D1C38(0x24u, 4))
    {
      int v15 = sub_D1C7C(0x24u);
      __uint64_t v16 = sub_DDEFC();
      __uint64_t v17 = (const char *)sub_D1CB0(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %d %p\n", v16, 36, v17, "AVE_DAL", "Alloc", 202, "0 < size && size <= m_iSize && pAddr != __null", a1, *a1, *((_DWORD *)a1 + 5), a2, a3);
        __uint64_t v18 = sub_DDEFC();
        __uint64_t v26 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %d %p", v18, 36, v26, "AVE_DAL", "Alloc");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %d %p", v16, 36, v17, "AVE_DAL", "Alloc");
      }
    }
    uint64_t v10 = 4294966295;
  }
  if (sub_D1C38(0x5Du, 8))
  {
    int v19 = sub_D1C7C(0x5Du);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(8);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d\n", v20, 93, v21, "AVE_DAL", "Alloc", a1, *a1, v28, a3, v10);
      __uint64_t v22 = sub_DDEFC();
      __uint64_t v27 = sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d", v22, 93, v27, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d", v20, 93, v21, "AVE_DAL");
    }
  }
  return v10;
}

uint64_t sub_1016C(void *a1, const void *a2)
{
  if (sub_D1C38(0x24u, 8))
  {
    int v4 = sub_D1C7C(0x24u);
    __uint64_t v5 = sub_DDEFC();
    int v6 = (const char *)sub_D1CB0(8);
    if (v4)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p\n", v5, 36, v6, "AVE_DAL", "Free", a1, *a1, a2);
      __uint64_t v5 = sub_DDEFC();
      sub_D1CB0(8);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p", v5, 36);
  }
  if (a2)
  {
    sub_BE94C((pthread_mutex_t *)a1[1]);
    uint64_t v7 = sub_BE00C(a1[4], (unint64_t)a2);
    if (v7 && sub_D1C38(0x24u, 4))
    {
      int v8 = sub_D1C7C(0x24u);
      __uint64_t v9 = sub_DDEFC();
      uint64_t v10 = (const char *)sub_D1CB0(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to free memory to UC info pool %p %lld %p %d\n", v9, 36, v10, "AVE_DAL", "Free", 245, "ret == 0", a1, *a1, a2, v7);
        __uint64_t v11 = sub_DDEFC();
        int v21 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to free memory to UC info pool %p %lld %p %d", v11, 36, v21, "AVE_DAL", "Free");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to free memory to UC info pool %p %lld %p %d", v9, 36, v10, "AVE_DAL", "Free");
      }
    }
    sub_BE980((pthread_mutex_t *)a1[1]);
  }
  else
  {
    if (sub_D1C38(0x24u, 4))
    {
      int v12 = sub_D1C7C(0x24u);
      __uint64_t v13 = sub_DDEFC();
      __uint64_t v14 = (const char *)sub_D1CB0(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %p\n", v13, 36, v14, "AVE_DAL", "Free", 238, "addr != 0", a1, *a1, 0);
        __uint64_t v15 = sub_DDEFC();
        __uint64_t v22 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %p", v15, 36, v22, "AVE_DAL");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %p", v13, 36, v14, "AVE_DAL");
      }
    }
    uint64_t v7 = 4294966295;
  }
  if (sub_D1C38(0x24u, 8))
  {
    int v16 = sub_D1C7C(0x24u);
    __uint64_t v17 = sub_DDEFC();
    __uint64_t v18 = (const char *)sub_D1CB0(8);
    if (v16)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %d\n", v17, 36, v18, "AVE_DAL", "Free", a1, *a1, a2, v7);
      __uint64_t v19 = sub_DDEFC();
      int v23 = sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d", v19, 36, v23);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d", v17, 36, v18);
    }
  }
  return v7;
}

uint64_t sub_10578(void *a1, int a2, void *a3)
{
  if (sub_D1C38(0x24u, 8))
  {
    int v6 = sub_D1C7C(0x24u);
    __uint64_t v7 = sub_DDEFC();
    int v8 = (const char *)sub_D1CB0(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %d %p\n", v7, 36, v8, "AVE_DAL", "Idx2Addr", a1, *a1, a2, a3);
      __uint64_t v9 = sub_DDEFC();
      __uint64_t v24 = sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %d %p", v9, 36, v24);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %d %p", v7, 36, v8);
    }
  }
  if (a2 < 0 || !a3)
  {
    if (sub_D1C38(0x24u, 4))
    {
      int v15 = sub_D1C7C(0x24u);
      __uint64_t v16 = sub_DDEFC();
      __uint64_t v17 = (const char *)sub_D1CB0(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %p\n", v16, 36, v17, "AVE_DAL", "Idx2Addr", 277, "idx >= 0 && pAddr != __null", a1, *a1, a2, a3);
        __uint64_t v18 = sub_DDEFC();
        __uint64_t v26 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %p", v18, 36, v26, "AVE_DAL", "Idx2Addr");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %p", v16, 36, v17, "AVE_DAL", "Idx2Addr");
      }
    }
    uint64_t v10 = 4294966295;
  }
  else
  {
    sub_BE94C((pthread_mutex_t *)a1[1]);
    uint64_t v10 = sub_BE118(a1[4], a2, a3);
    if (v10 && sub_D1C38(0x24u, 4))
    {
      int v11 = sub_D1C7C(0x24u);
      __uint64_t v12 = sub_DDEFC();
      __uint64_t v13 = (const char *)sub_D1CB0(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to convert index in UC info pool %p %lld %d %p %d\n", v12, 36, v13, "AVE_DAL", "Idx2Addr", 284, "ret == 0", a1, *a1, a2, a3, v10);
        __uint64_t v14 = sub_DDEFC();
        int v25 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to convert index in UC info pool %p %lld %d %p %d", v14, 36, v25, "AVE_DAL", "Idx2Addr", 284);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to convert index in UC info pool %p %lld %d %p %d", v12, 36, v13, "AVE_DAL", "Idx2Addr", 284);
      }
    }
    sub_BE980((pthread_mutex_t *)a1[1]);
  }
  if (sub_D1C38(0x24u, 8))
  {
    int v19 = sub_D1C7C(0x24u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(8);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d\n", v20, 36, v21, "AVE_DAL", "Idx2Addr", a1, *a1, a2, a3, v10);
      __uint64_t v22 = sub_DDEFC();
      __uint64_t v27 = sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d", v22, 36, v27, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d", v20, 36, v21, "AVE_DAL");
    }
  }
  return v10;
}

uint64_t sub_109C4(void *a1, const void *a2, _DWORD *a3)
{
  if (sub_D1C38(0x24u, 8))
  {
    int v6 = sub_D1C7C(0x24u);
    __uint64_t v7 = sub_DDEFC();
    int v8 = (const char *)sub_D1CB0(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p\n", v7, 36, v8, "AVE_DAL", "Addr2Idx", a1, *a1, a2, a3);
      __uint64_t v9 = sub_DDEFC();
      __uint64_t v24 = sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p", v9, 36, v24);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p", v7, 36, v8);
    }
  }
  if (a3)
  {
    sub_BE94C((pthread_mutex_t *)a1[1]);
    uint64_t v10 = sub_BE194(a1[4], (unint64_t)a2, a3);
    if (v10 && sub_D1C38(0x24u, 4))
    {
      int v11 = sub_D1C7C(0x24u);
      __uint64_t v12 = sub_DDEFC();
      __uint64_t v13 = (const char *)sub_D1CB0(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to convert address in UC info pool %p %lld %p %p %d\n", v12, 36, v13, "AVE_DAL", "Addr2Idx", 323, "ret == 0", a1, *a1, a2, a3, v10);
        __uint64_t v14 = sub_DDEFC();
        int v25 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to convert address in UC info pool %p %lld %p %p %d", v14, 36, v25, "AVE_DAL", "Addr2Idx", 323);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to convert address in UC info pool %p %lld %p %p %d", v12, 36, v13, "AVE_DAL", "Addr2Idx", 323);
      }
    }
    sub_BE980((pthread_mutex_t *)a1[1]);
  }
  else
  {
    if (sub_D1C38(0x24u, 4))
    {
      int v15 = sub_D1C7C(0x24u);
      __uint64_t v16 = sub_DDEFC();
      __uint64_t v17 = (const char *)sub_D1CB0(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %p %p\n", v16, 36, v17, "AVE_DAL", "Addr2Idx", 316, "pIdx != __null", a1, *a1, a2, 0);
        __uint64_t v18 = sub_DDEFC();
        __uint64_t v26 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %p %p", v18, 36, v26, "AVE_DAL", "Addr2Idx");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %p %p", v16, 36, v17, "AVE_DAL", "Addr2Idx");
      }
    }
    uint64_t v10 = 4294966295;
  }
  if (sub_D1C38(0x24u, 8))
  {
    int v19 = sub_D1C7C(0x24u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(8);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %d\n", v20, 36, v21, "AVE_DAL", "Addr2Idx", a1, *a1, a2, a3, v10);
      __uint64_t v22 = sub_DDEFC();
      __uint64_t v27 = sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %d", v22, 36, v27, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %d", v20, 36, v21, "AVE_DAL");
    }
  }
  return v10;
}

uint64_t sub_10DF0(void *a1, uint32_t a2)
{
  uint64_t v24 = 0;
  if (sub_D1C38(0x24u, 6))
  {
    int v4 = sub_D1C7C(0x24u);
    __uint64_t v5 = sub_DDEFC();
    int v6 = (const char *)sub_D1CB0(6);
    if (v4)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %d\n", v5, 36, v6, "AVE_DAL", "UCCreate", a1, *a1, a2);
      __uint64_t v5 = sub_DDEFC();
      sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %d", v5, 36);
  }
  if (a2 - 1 >= 4)
  {
    if (sub_D1C38(0x24u, 4))
    {
      int v12 = sub_D1C7C(0x24u);
      __uint64_t v13 = sub_DDEFC();
      __uint64_t v14 = (const char *)sub_D1CB0(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %d\n", v13, 36, v14, "AVE_DAL", "UCCreate", 388, "AVE_ClientType_None < type && type < AVE_ClientType_Max", a1, *a1, a2);
        __uint64_t v15 = sub_DDEFC();
        __uint64_t v22 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %d", v15, 36, v22, "AVE_DAL");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %d", v13, 36, v14, "AVE_DAL");
      }
    }
    uint64_t v7 = 4294966295;
  }
  else
  {
    uint64_t v7 = sub_CED5C(a2, &v24);
    if (v7)
    {
      if (sub_D1C38(0x24u, 4))
      {
        int v8 = sub_D1C7C(0x24u);
        __uint64_t v9 = sub_DDEFC();
        uint64_t v10 = (const char *)sub_D1CB0(4);
        if (v8)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | fail to create UC %p %lld %d %d\n", v9, 36, v10, "AVE_DAL", "UCCreate", 392, "ret == 0", a1, *a1, a2, v7);
          __uint64_t v11 = sub_DDEFC();
          int v21 = sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to create UC %p %lld %d %d", v11, 36, v21, "AVE_DAL");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to create UC %p %lld %d %d", v9, 36, v10, "AVE_DAL");
        }
      }
    }
    else
    {
      a1[5] = v24;
    }
  }
  if (sub_D1C38(0x24u, 6))
  {
    int v16 = sub_D1C7C(0x24u);
    __uint64_t v17 = sub_DDEFC();
    __uint64_t v18 = (const char *)sub_D1CB0(6);
    if (v16)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d\n", v17, 36, v18, "AVE_DAL", "UCCreate", a1, *a1, a2, (const void *)a1[5], v7);
      __uint64_t v19 = sub_DDEFC();
      int v23 = sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d", v19, 36, v23, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d", v17, 36, v18, "AVE_DAL");
    }
  }
  return v7;
}

uint64_t sub_1122C(const void **a1)
{
  if (sub_D1C38(0x24u, 6))
  {
    int v2 = sub_D1C7C(0x24u);
    __uint64_t v3 = sub_DDEFC();
    int v4 = (const char *)sub_D1CB0(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p\n", v3, 36, v4, "AVE_DAL", "UCDestroy", a1, *a1, a1[5]);
      __uint64_t v3 = sub_DDEFC();
      sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p", v3, 36);
  }
  __uint64_t v5 = a1[5];
  if (v5)
  {
    uint64_t v6 = sub_CF100(v5);
    a1[5] = 0;
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (sub_D1C38(0x24u, 6))
  {
    int v7 = sub_D1C7C(0x24u);
    __uint64_t v8 = sub_DDEFC();
    __uint64_t v9 = (const char *)sub_D1CB0(6);
    if (v7)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %d\n", v8, 36, v9, "AVE_DAL", "UCDestroy", a1, *a1, a1[5], v6);
      __uint64_t v10 = sub_DDEFC();
      int v12 = sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d", v10, 36, v12);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d", v8, 36, v9);
    }
  }
  return v6;
}

uint64_t sub_11434(void *a1, uint64_t a2, void *a3)
{
  if (sub_D1C38(0x24u, 6))
  {
    int v6 = sub_D1C7C(0x24u);
    __uint64_t v7 = sub_DDEFC();
    __uint64_t v8 = (const char *)sub_D1CB0(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p\n", v7, 36, v8, "AVE_DAL", "UCOpen", a1, *a1, (const void *)a1[5], (const void *)a2, a3);
      __uint64_t v9 = sub_DDEFC();
      int v25 = sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v9, 36, v25, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v7, 36, v8, "AVE_DAL");
    }
  }
  if (a2 && a3)
  {
    sub_DD984((char *)(a2 + 40), "803.48.1", 16);
    *(_DWORD *)(a2 + 56) = sub_BC8DC(a1[3]);
    __uint64_t v10 = sub_C7604();
    memcpy((void *)(a2 + 64), v10, 0x588uLL);
    *(void *)(a2 + 1480) = 0;
    sub_D20E4((void *)(a2 + 1480), a2 + 1488);
    uint64_t v11 = sub_CF340((const void *)a1[5], (const void *)a2, a3);
    if (v11)
    {
      if (sub_D1C38(0x24u, 4))
      {
        int v12 = sub_D1C7C(0x24u);
        __uint64_t v13 = sub_DDEFC();
        __uint64_t v14 = (const char *)sub_D1CB0(4);
        if (v12)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | fail to open client %p %lld %p %p %d\n", v13, 36, v14, "AVE_DAL", "UCOpen", 455, "ret == 0", a1, *a1, (const void *)a2, a3, v11);
          __uint64_t v15 = sub_DDEFC();
          __uint64_t v26 = sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to open client %p %lld %p %p %d", v15, 36, v26, "AVE_DAL", "UCOpen", 455);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to open client %p %lld %p %p %d", v13, 36, v14, "AVE_DAL", "UCOpen", 455);
        }
      }
    }
    else
    {
      *(_DWORD *)(a2 + 56) = 0;
      *a1 = *a3;
    }
  }
  else
  {
    if (sub_D1C38(0x24u, 4))
    {
      int v16 = sub_D1C7C(0x24u);
      __uint64_t v17 = sub_DDEFC();
      __uint64_t v18 = (const char *)sub_D1CB0(4);
      if (v16)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p\n", v17, 36, v18, "AVE_DAL", "UCOpen", 443, "pIn != __null && pOut != __null", a1, *a1, (const void *)a2, a3);
        __uint64_t v19 = sub_DDEFC();
        __uint64_t v27 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v19, 36, v27, "AVE_DAL", "UCOpen");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v17, 36, v18, "AVE_DAL", "UCOpen");
      }
    }
    uint64_t v11 = 4294966295;
  }
  if (sub_D1C38(0x24u, 6))
  {
    int v20 = sub_D1C7C(0x24u);
    __uint64_t v21 = sub_DDEFC();
    __uint64_t v22 = (const char *)sub_D1CB0(6);
    if (v20)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d\n", v21, 36, v22, "AVE_DAL", "UCOpen", a1, *a1, (const void *)a1[5], (const void *)a2, a3, v11);
      __uint64_t v23 = sub_DDEFC();
      int v28 = sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v23, 36, v28, "AVE_DAL", "UCOpen");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v21, 36, v22, "AVE_DAL", "UCOpen");
    }
  }
  return v11;
}

uint64_t sub_118C4(const void **a1, const void *a2, void *a3)
{
  if (sub_D1C38(0x24u, 6))
  {
    int v6 = sub_D1C7C(0x24u);
    __uint64_t v7 = sub_DDEFC();
    __uint64_t v8 = (const char *)sub_D1CB0(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p\n", v7, 36, v8, "AVE_DAL", "UCClose", a1, *a1, a1[5], a2, a3);
      __uint64_t v9 = sub_DDEFC();
      uint64_t v24 = sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v9, 36, v24, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v7, 36, v8, "AVE_DAL");
    }
  }
  if (a2 && a3)
  {
    uint64_t v10 = sub_CF6C4(a1[5], a2, a3);
    if (v10 && sub_D1C38(0x24u, 4))
    {
      int v11 = sub_D1C7C(0x24u);
      __uint64_t v12 = sub_DDEFC();
      __uint64_t v13 = (const char *)sub_D1CB0(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to close client %p %lld %p %p %d\n", v12, 36, v13, "AVE_DAL", "UCClose", 490, "ret == 0", a1, *a1, a2, a3, v10);
        __uint64_t v14 = sub_DDEFC();
        int v25 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to close client %p %lld %p %p %d", v14, 36, v25, "AVE_DAL", "UCClose", 490);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to close client %p %lld %p %p %d", v12, 36, v13, "AVE_DAL", "UCClose", 490);
      }
    }
  }
  else
  {
    if (sub_D1C38(0x24u, 4))
    {
      int v15 = sub_D1C7C(0x24u);
      __uint64_t v16 = sub_DDEFC();
      __uint64_t v17 = (const char *)sub_D1CB0(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p\n", v16, 36, v17, "AVE_DAL", "UCClose", 486, "pIn != __null && pOut != __null", a1, *a1, a2, a3);
        __uint64_t v18 = sub_DDEFC();
        __uint64_t v26 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v18, 36, v26, "AVE_DAL", "UCClose");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v16, 36, v17, "AVE_DAL", "UCClose");
      }
    }
    uint64_t v10 = 4294966295;
  }
  if (sub_D1C38(0x24u, 6))
  {
    int v19 = sub_D1C7C(0x24u);
    __uint64_t v20 = sub_DDEFC();
    __uint64_t v21 = (const char *)sub_D1CB0(6);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d\n", v20, 36, v21, "AVE_DAL", "UCClose", a1, *a1, a1[5], a2, a3, v10);
      __uint64_t v22 = sub_DDEFC();
      __uint64_t v27 = sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v22, 36, v27, "AVE_DAL", "UCClose");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v20, 36, v21, "AVE_DAL", "UCClose");
    }
  }
  return v10;
}

uint64_t sub_11D00(const void **a1, const void *a2, const void *a3, void *a4)
{
  if (sub_D1C38(0x24u, 6))
  {
    int v8 = sub_D1C7C(0x24u);
    __uint64_t v9 = sub_DDEFC();
    uint64_t v10 = (const char *)sub_D1CB0(6);
    if (v8)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p %p\n", v9, 36, v10, "AVE_DAL", "UCConfig", a1, *a1, a1[5], a2, a3, a4);
      __uint64_t v11 = sub_DDEFC();
      __uint64_t v26 = sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p %p", v11, 36, v26, "AVE_DAL", "UCConfig");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p %p", v9, 36, v10, "AVE_DAL", "UCConfig");
    }
  }
  if (a2 && a3 && a4)
  {
    uint64_t v12 = sub_CFA58(a1[5], a2, a3, a4);
    if (v12 && sub_D1C38(0x24u, 4))
    {
      int v13 = sub_D1C7C(0x24u);
      __uint64_t v14 = sub_DDEFC();
      int v15 = (const char *)sub_D1CB0(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to config %p %lld %p %p %p %p %d\n", v14, 36, v15, "AVE_DAL", "UCConfig", 525, "ret == 0", a1, *a1, a1[5], a2, a3, a4, v12);
        __uint64_t v16 = sub_DDEFC();
        __uint64_t v27 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to config %p %lld %p %p %p %p %d", v16, 36, v27, "AVE_DAL", "UCConfig", 525, "ret == 0", a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to config %p %lld %p %p %p %p %d", v14, 36, v15, "AVE_DAL", "UCConfig", 525, "ret == 0", a1);
      }
    }
  }
  else
  {
    if (sub_D1C38(0x24u, 4))
    {
      int v17 = sub_D1C7C(0x24u);
      __uint64_t v18 = sub_DDEFC();
      int v19 = (const char *)sub_D1CB0(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p %p\n", v18, 36, v19, "AVE_DAL", "UCConfig", 520, "pRecvPort != __null && pIn != __null && pOut != __null", a1, *a1, a2, a3, a4);
        __uint64_t v20 = sub_DDEFC();
        int v28 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p %p", v20, 36, v28, "AVE_DAL", "UCConfig", 520);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p %p", v18, 36, v19, "AVE_DAL", "UCConfig", 520);
      }
    }
    uint64_t v12 = 4294966295;
  }
  if (sub_D1C38(0x24u, 6))
  {
    int v21 = sub_D1C7C(0x24u);
    __uint64_t v22 = sub_DDEFC();
    __uint64_t v23 = (const char *)sub_D1CB0(6);
    if (v21)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %p %d\n", v22, 36, v23, "AVE_DAL", "UCConfig", a1, *a1, a1[5], a2, a3, a4, v12);
      __uint64_t v24 = sub_DDEFC();
      unsigned int v29 = sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %p %d", v24, 36, v29, "AVE_DAL", "UCConfig", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %p %d", v22, 36, v23, "AVE_DAL", "UCConfig", a1);
    }
  }
  return v12;
}

uint64_t sub_12178(const void **a1, const void *a2, void *a3)
{
  if (sub_D1C38(0x24u, 6))
  {
    int v6 = sub_D1C7C(0x24u);
    __uint64_t v7 = sub_DDEFC();
    int v8 = (const char *)sub_D1CB0(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p\n", v7, 36, v8, "AVE_DAL", "UCPrepare", a1, *a1, a1[5], a2, a3);
      __uint64_t v9 = sub_DDEFC();
      __uint64_t v24 = sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v9, 36, v24, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v7, 36, v8, "AVE_DAL");
    }
  }
  if (a2 && a3)
  {
    uint64_t v10 = sub_CFE50(a1[5], a2, a3);
    if (v10 && sub_D1C38(0x24u, 4))
    {
      int v11 = sub_D1C7C(0x24u);
      __uint64_t v12 = sub_DDEFC();
      int v13 = (const char *)sub_D1CB0(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to prepare %p %lld %p %p %d\n", v12, 36, v13, "AVE_DAL", "UCPrepare", 557, "ret == 0", a1, *a1, a2, a3, v10);
        __uint64_t v14 = sub_DDEFC();
        int v25 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to prepare %p %lld %p %p %d", v14, 36, v25, "AVE_DAL", "UCPrepare", 557);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to prepare %p %lld %p %p %d", v12, 36, v13, "AVE_DAL", "UCPrepare", 557);
      }
    }
  }
  else
  {
    if (sub_D1C38(0x24u, 4))
    {
      int v15 = sub_D1C7C(0x24u);
      __uint64_t v16 = sub_DDEFC();
      int v17 = (const char *)sub_D1CB0(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p\n", v16, 36, v17, "AVE_DAL", "UCPrepare", 553, "pIn != __null && pOut != __null", a1, *a1, a2, a3);
        __uint64_t v18 = sub_DDEFC();
        __uint64_t v26 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v18, 36, v26, "AVE_DAL", "UCPrepare");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v16, 36, v17, "AVE_DAL", "UCPrepare");
      }
    }
    uint64_t v10 = 4294966295;
  }
  if (sub_D1C38(0x24u, 6))
  {
    int v19 = sub_D1C7C(0x24u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(6);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d\n", v20, 36, v21, "AVE_DAL", "UCPrepare", a1, *a1, a1[5], a2, a3, v10);
      __uint64_t v22 = sub_DDEFC();
      __uint64_t v27 = sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v22, 36, v27, "AVE_DAL", "UCPrepare");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v20, 36, v21, "AVE_DAL", "UCPrepare");
    }
  }
  return v10;
}

uint64_t sub_125B4(const void **a1, const void *a2, void *a3)
{
  if (sub_D1C38(0x24u, 6))
  {
    int v6 = sub_D1C7C(0x24u);
    __uint64_t v7 = sub_DDEFC();
    int v8 = (const char *)sub_D1CB0(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p\n", v7, 36, v8, "AVE_DAL", "UCStart", a1, *a1, a1[5], a2, a3);
      __uint64_t v9 = sub_DDEFC();
      __uint64_t v24 = sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v9, 36, v24, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v7, 36, v8, "AVE_DAL");
    }
  }
  if (a2 && a3)
  {
    uint64_t v10 = sub_D01E8(a1[5], a2, a3);
    if (v10 && sub_D1C38(0x24u, 4))
    {
      int v11 = sub_D1C7C(0x24u);
      __uint64_t v12 = sub_DDEFC();
      int v13 = (const char *)sub_D1CB0(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to start %p %lld %p %p %d\n", v12, 36, v13, "AVE_DAL", "UCStart", 588, "ret == 0", a1, *a1, a2, a3, v10);
        __uint64_t v14 = sub_DDEFC();
        int v25 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to start %p %lld %p %p %d", v14, 36, v25, "AVE_DAL", "UCStart", 588);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to start %p %lld %p %p %d", v12, 36, v13, "AVE_DAL", "UCStart", 588);
      }
    }
  }
  else
  {
    if (sub_D1C38(0x24u, 4))
    {
      int v15 = sub_D1C7C(0x24u);
      __uint64_t v16 = sub_DDEFC();
      int v17 = (const char *)sub_D1CB0(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p\n", v16, 36, v17, "AVE_DAL", "UCStart", 584, "pIn != __null && pOut != __null", a1, *a1, a2, a3);
        __uint64_t v18 = sub_DDEFC();
        __uint64_t v26 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v18, 36, v26, "AVE_DAL", "UCStart");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v16, 36, v17, "AVE_DAL", "UCStart");
      }
    }
    uint64_t v10 = 4294966295;
  }
  if (sub_D1C38(0x24u, 6))
  {
    int v19 = sub_D1C7C(0x24u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(6);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d\n", v20, 36, v21, "AVE_DAL", "UCStart", a1, *a1, a1[5], a2, a3, v10);
      __uint64_t v22 = sub_DDEFC();
      __uint64_t v27 = sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v22, 36, v27, "AVE_DAL", "UCStart");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v20, 36, v21, "AVE_DAL", "UCStart");
    }
  }
  return v10;
}

uint64_t sub_129F0(const void **a1, const void *a2, void *a3)
{
  if (sub_D1C38(0x24u, 6))
  {
    int v6 = sub_D1C7C(0x24u);
    __uint64_t v7 = sub_DDEFC();
    int v8 = (const char *)sub_D1CB0(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p\n", v7, 36, v8, "AVE_DAL", "UCStop", a1, *a1, a1[5], a2, a3);
      __uint64_t v9 = sub_DDEFC();
      __uint64_t v24 = sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v9, 36, v24, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v7, 36, v8, "AVE_DAL");
    }
  }
  if (a2 && a3)
  {
    uint64_t v10 = sub_D0580(a1[5], a2, a3);
    if (v10 && sub_D1C38(0x24u, 4))
    {
      int v11 = sub_D1C7C(0x24u);
      __uint64_t v12 = sub_DDEFC();
      int v13 = (const char *)sub_D1CB0(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to stop %p %lld %p %p %d\n", v12, 36, v13, "AVE_DAL", "UCStop", 619, "ret == 0", a1, *a1, a2, a3, v10);
        __uint64_t v14 = sub_DDEFC();
        int v25 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to stop %p %lld %p %p %d", v14, 36, v25, "AVE_DAL", "UCStop", 619);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to stop %p %lld %p %p %d", v12, 36, v13, "AVE_DAL", "UCStop", 619);
      }
    }
  }
  else
  {
    if (sub_D1C38(0x24u, 4))
    {
      int v15 = sub_D1C7C(0x24u);
      __uint64_t v16 = sub_DDEFC();
      int v17 = (const char *)sub_D1CB0(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p\n", v16, 36, v17, "AVE_DAL", "UCStop", 615, "pIn != __null && pOut != __null", a1, *a1, a2, a3);
        __uint64_t v18 = sub_DDEFC();
        __uint64_t v26 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v18, 36, v26, "AVE_DAL", "UCStop");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v16, 36, v17, "AVE_DAL", "UCStop");
      }
    }
    uint64_t v10 = 4294966295;
  }
  if (sub_D1C38(0x24u, 6))
  {
    int v19 = sub_D1C7C(0x24u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(6);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d\n", v20, 36, v21, "AVE_DAL", "UCStop", a1, *a1, a1[5], a2, a3, v10);
      __uint64_t v22 = sub_DDEFC();
      __uint64_t v27 = sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v22, 36, v27, "AVE_DAL", "UCStop");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v20, 36, v21, "AVE_DAL", "UCStop");
    }
  }
  return v10;
}

uint64_t sub_12E2C(const void **a1, const void *a2, void *a3)
{
  if (sub_D1C38(0x24u, 8))
  {
    int v6 = sub_D1C7C(0x24u);
    __uint64_t v7 = sub_DDEFC();
    int v8 = (const char *)sub_D1CB0(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p\n", v7, 36, v8, "AVE_DAL", "UCProcess", a1, *a1, a1[5], a2, a3);
      __uint64_t v9 = sub_DDEFC();
      __uint64_t v24 = sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v9, 36, v24, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v7, 36, v8, "AVE_DAL");
    }
  }
  if (a2 && a3)
  {
    uint64_t v10 = sub_D0914(a1[5], a2, a3);
    if (v10 && sub_D1C38(0x24u, 4))
    {
      int v11 = sub_D1C7C(0x24u);
      __uint64_t v12 = sub_DDEFC();
      int v13 = (const char *)sub_D1CB0(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to process %p %lld %p %p %d\n", v12, 36, v13, "AVE_DAL", "UCProcess", 650, "ret == 0", a1, *a1, a2, a3, v10);
        __uint64_t v14 = sub_DDEFC();
        int v25 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to process %p %lld %p %p %d", v14, 36, v25, "AVE_DAL", "UCProcess", 650);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to process %p %lld %p %p %d", v12, 36, v13, "AVE_DAL", "UCProcess", 650);
      }
    }
  }
  else
  {
    if (sub_D1C38(0x24u, 4))
    {
      int v15 = sub_D1C7C(0x24u);
      __uint64_t v16 = sub_DDEFC();
      int v17 = (const char *)sub_D1CB0(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p\n", v16, 36, v17, "AVE_DAL", "UCProcess", 646, "pIn != __null && pOut != __null", a1, *a1, a2, a3);
        __uint64_t v18 = sub_DDEFC();
        __uint64_t v26 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v18, 36, v26, "AVE_DAL", "UCProcess");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v16, 36, v17, "AVE_DAL", "UCProcess");
      }
    }
    uint64_t v10 = 4294966295;
  }
  if (sub_D1C38(0x24u, 8))
  {
    int v19 = sub_D1C7C(0x24u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(8);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d\n", v20, 36, v21, "AVE_DAL", "UCProcess", a1, *a1, a1[5], a2, a3, v10);
      __uint64_t v22 = sub_DDEFC();
      __uint64_t v27 = sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v22, 36, v27, "AVE_DAL", "UCProcess");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v20, 36, v21, "AVE_DAL", "UCProcess");
    }
  }
  return v10;
}

uint64_t sub_13268(const void **a1, const void *a2, void *a3)
{
  if (sub_D1C38(0x24u, 6))
  {
    int v6 = sub_D1C7C(0x24u);
    __uint64_t v7 = sub_DDEFC();
    int v8 = (const char *)sub_D1CB0(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p\n", v7, 36, v8, "AVE_DAL", "UCComplete", a1, *a1, a1[5], a2, a3);
      __uint64_t v9 = sub_DDEFC();
      __uint64_t v24 = sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v9, 36, v24, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v7, 36, v8, "AVE_DAL");
    }
  }
  if (a2 && a3)
  {
    uint64_t v10 = sub_D0CA8(a1[5], a2, a3);
    if (v10 && sub_D1C38(0x24u, 4))
    {
      int v11 = sub_D1C7C(0x24u);
      __uint64_t v12 = sub_DDEFC();
      int v13 = (const char *)sub_D1CB0(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to complete %p %lld %p %p %d\n", v12, 36, v13, "AVE_DAL", "UCComplete", 681, "ret == 0", a1, *a1, a2, a3, v10);
        __uint64_t v14 = sub_DDEFC();
        int v25 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to complete %p %lld %p %p %d", v14, 36, v25, "AVE_DAL", "UCComplete", 681);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to complete %p %lld %p %p %d", v12, 36, v13, "AVE_DAL", "UCComplete", 681);
      }
    }
  }
  else
  {
    if (sub_D1C38(0x24u, 4))
    {
      int v15 = sub_D1C7C(0x24u);
      __uint64_t v16 = sub_DDEFC();
      int v17 = (const char *)sub_D1CB0(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p\n", v16, 36, v17, "AVE_DAL", "UCComplete", 677, "pIn != __null && pOut != __null", a1, *a1, a2, a3);
        __uint64_t v18 = sub_DDEFC();
        __uint64_t v26 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v18, 36, v26, "AVE_DAL", "UCComplete");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v16, 36, v17, "AVE_DAL", "UCComplete");
      }
    }
    uint64_t v10 = 4294966295;
  }
  if (sub_D1C38(0x24u, 6))
  {
    int v19 = sub_D1C7C(0x24u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(6);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d\n", v20, 36, v21, "AVE_DAL", "UCComplete", a1, *a1, a1[5], a2, a3, v10);
      __uint64_t v22 = sub_DDEFC();
      __uint64_t v27 = sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v22, 36, v27, "AVE_DAL", "UCComplete");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v20, 36, v21, "AVE_DAL", "UCComplete");
    }
  }
  return v10;
}

uint64_t sub_136A4(const void **a1, const void *a2, void *a3)
{
  if (sub_D1C38(0x24u, 6))
  {
    int v6 = sub_D1C7C(0x24u);
    __uint64_t v7 = sub_DDEFC();
    int v8 = (const char *)sub_D1CB0(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p\n", v7, 36, v8, "AVE_DAL", "UCReset", a1, *a1, a1[5], a2, a3);
      __uint64_t v9 = sub_DDEFC();
      __uint64_t v24 = sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v9, 36, v24, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v7, 36, v8, "AVE_DAL");
    }
  }
  if (a2 && a3)
  {
    uint64_t v10 = sub_D103C(a1[5], a2, a3);
    if (v10 && sub_D1C38(0x24u, 4))
    {
      int v11 = sub_D1C7C(0x24u);
      __uint64_t v12 = sub_DDEFC();
      int v13 = (const char *)sub_D1CB0(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to reset %p %lld %p %p %d\n", v12, 36, v13, "AVE_DAL", "UCReset", 743, "ret == 0", a1, *a1, a2, a3, v10);
        __uint64_t v14 = sub_DDEFC();
        int v25 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to reset %p %lld %p %p %d", v14, 36, v25, "AVE_DAL", "UCReset", 743);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to reset %p %lld %p %p %d", v12, 36, v13, "AVE_DAL", "UCReset", 743);
      }
    }
  }
  else
  {
    if (sub_D1C38(0x24u, 4))
    {
      int v15 = sub_D1C7C(0x24u);
      __uint64_t v16 = sub_DDEFC();
      int v17 = (const char *)sub_D1CB0(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p\n", v16, 36, v17, "AVE_DAL", "UCReset", 739, "pIn != __null && pOut != __null", a1, *a1, a2, a3);
        __uint64_t v18 = sub_DDEFC();
        __uint64_t v26 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v18, 36, v26, "AVE_DAL", "UCReset");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v16, 36, v17, "AVE_DAL", "UCReset");
      }
    }
    uint64_t v10 = 4294966295;
  }
  if (sub_D1C38(0x24u, 6))
  {
    int v19 = sub_D1C7C(0x24u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(6);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d\n", v20, 36, v21, "AVE_DAL", "UCReset", a1, *a1, a1[5], a2, a3, v10);
      __uint64_t v22 = sub_DDEFC();
      __uint64_t v27 = sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v22, 36, v27, "AVE_DAL", "UCReset");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v20, 36, v21, "AVE_DAL", "UCReset");
    }
  }
  return v10;
}

unsigned int *sub_13AE0(int a1, uint64_t a2, int a3, int a4)
{
  double result = (unsigned int *)sub_DB774(a1, a2, a3);
  if (result)
  {
    return sub_C5A24(result, a4);
  }
  return result;
}

unsigned int *sub_13B28(int a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  double result = (unsigned int *)sub_DB7C4(a1, a2, a3);
  if (result)
  {
    double result = sub_C59D4(result, a4, a5, a6);
    if (result) {
      return (unsigned int *)*((void *)result + 2);
    }
  }
  return result;
}

uint64_t sub_13B78(int a1, uint64_t a2, int a3, int a4, uint64_t a5, _DWORD *a6)
{
  uint64_t result = 4294966295;
  if (!a5 || !a6)
  {
LABEL_8:
    if (!a6) {
      return result;
    }
    goto LABEL_9;
  }
  int v13 = (int *)sub_DB60C(a1);
  if (!v13)
  {
    uint64_t result = 4294966294;
    goto LABEL_8;
  }
  __uint64_t v14 = sub_DB724(*v13, a2, a4);
  if (v14)
  {
    uint64_t result = sub_DE000(v14, a3, a5, a6);
    if (!a6) {
      return result;
    }
  }
  else
  {
    uint64_t result = 4294966288;
    if (!a6) {
      return result;
    }
  }
LABEL_9:
  if (result) {
    *a6 = 0;
  }
  return result;
}

uint64_t sub_13C1C(int a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, int *a8)
{
  int v9 = 1;
  uint64_t v10 = 4294966295;
  if (a7 && a8)
  {
    int v18 = sub_D7E4C();
    int v44 = malloc_type_malloc(4 * v18, 0x100004052888210uLL);
    if (v44)
    {
      if (a4 == 1)
      {
        uint64_t v19 = 0;
        __uint64_t v20 = dword_1414B0;
        while (dword_1414B0[v19] != a5)
        {
          v19 += 8;
          if (v19 == 72) {
            goto LABEL_15;
          }
        }
      }
      else
      {
        uint64_t v19 = 0;
        __uint64_t v20 = dword_1415D0;
        while (dword_1415D0[v19] != a5)
        {
          v19 += 8;
          if (v19 == 72) {
            goto LABEL_15;
          }
        }
      }
      int v21 = a4;
      __uint64_t v22 = &v20[v19];
      int v46 = v18;
      if (sub_13B78(a1, a2, a3, v21, (uint64_t)v44, &v46))
      {
LABEL_15:
        uint64_t v10 = 4294966288;
        int v9 = 1;
      }
      else
      {
        if (v46 < 1)
        {
          int v25 = 0;
        }
        else
        {
          uint64_t v24 = 0;
          int v25 = 0;
          int v43 = a6;
          do
          {
            uint64_t v45 = v24;
            __uint64_t v26 = sub_D7E18(v44[v24]);
            uint64_t v27 = 40;
            if (v21 == 1) {
              uint64_t v27 = 36;
            }
            int v28 = *(_DWORD *)&v26[v27];
            for (uint64_t i = 2; i != 8; ++i)
            {
              int v30 = v22[i];
              if (!v30) {
                break;
              }
              if (v30 == v28 && (!*((unsigned char *)v22 + 4) || *((_DWORD *)v26 + 1) == a6)) {
                *(_DWORD *)(a7 + 4 * v25++) = *(_DWORD *)v26;
              }
            }
            if (sub_D1C38(0x4Bu, 8))
            {
              int v31 = sub_D1C7C(0x4Bu);
              __uint64_t v32 = sub_DDEFC();
              __uint64_t v33 = (const char *)sub_D1CB0(8);
              if (v31)
              {
                printf("%lld %d AVE %s: %s:%d number of supported pixel format: %d\n", v32, 75, v33, "AVE_PixelFmt_GetSupportedListByProfile", 255, v25);
                __uint64_t v34 = sub_DDEFC();
                int v42 = (const char *)sub_D1CB0(8);
                syslog(3, "%lld %d AVE %s: %s:%d number of supported pixel format: %d", v34, 75, v42, "AVE_PixelFmt_GetSupportedListByProfile", 255, v25);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d number of supported pixel format: %d", v32, 75, v33, "AVE_PixelFmt_GetSupportedListByProfile", 255, v25);
              }
            }
            if (v25 >= 1)
            {
              for (uint64_t j = 0; j != v25; ++j)
              {
                if (sub_D1C38(0x4Bu, 8))
                {
                  int v36 = sub_D1C7C(0x4Bu);
                  __uint64_t v37 = sub_DDEFC();
                  uint64_t v38 = (const char *)sub_D1CB0(8);
                  int v39 = *(_DWORD *)(a7 + 4 * j);
                  if (v36)
                  {
                    printf("%lld %d AVE %s: %s:%d list of supported pixel format[%d] 0x%x\n", v37, 75, v38, "AVE_PixelFmt_GetSupportedListByProfile", 260, j, v39);
                    __uint64_t v40 = sub_DDEFC();
                    __uint64_t v41 = (const char *)sub_D1CB0(8);
                    syslog(3, "%lld %d AVE %s: %s:%d list of supported pixel format[%d] 0x%x", v40, 75, v41, "AVE_PixelFmt_GetSupportedListByProfile", 260, j, *(_DWORD *)(a7 + 4 * j));
                  }
                  else
                  {
                    syslog(3, "%lld %d AVE %s: %s:%d list of supported pixel format[%d] 0x%x", v37, 75, v38, "AVE_PixelFmt_GetSupportedListByProfile", 260, j, v39);
                  }
                }
              }
            }
            uint64_t v24 = v45 + 1;
            a6 = v43;
          }
          while (v45 + 1 < v46);
        }
        int v9 = 0;
        uint64_t v10 = 0;
        *a8 = v25;
      }
      free(v44);
    }
    else
    {
      uint64_t v10 = 4294966293;
    }
  }
  if (a8 && v9) {
    *a8 = 0;
  }
  return v10;
}

uint64_t sub_13F78(int a1, uint64_t a2, int a3, int a4, int a5)
{
  int v10 = sub_D7E4C();
  int v11 = (int *)malloc_type_malloc(4 * v10, 0x100004052888210uLL);
  if (!v11) {
    return 4294966293;
  }
  __uint64_t v12 = v11;
  int v18 = v10;
  uint64_t v13 = sub_13B78(a1, a2, a3, a4, (uint64_t)v11, &v18);
  if (!v13)
  {
    uint64_t v14 = v18;
    if (v18 < 1)
    {
LABEL_7:
      uint64_t v13 = 4294966295;
    }
    else
    {
      int v15 = v12;
      while (1)
      {
        int v16 = *v15++;
        if (v16 == a5) {
          break;
        }
        if (!--v14) {
          goto LABEL_7;
        }
      }
      uint64_t v13 = 0;
    }
  }
  free(v12);
  return v13;
}

uint64_t sub_1405C(int *a1, int a2, int a3)
{
  if (a2 < 1) {
    return 4294966295;
  }
  uint64_t v3 = a2;
  while (1)
  {
    int v4 = *a1++;
    if (v4 == a3) {
      break;
    }
    if (!--v3) {
      return 4294966295;
    }
  }
  return 0;
}

uint64_t AVE_DEBUG_H264SetCallback(uint64_t a1, _OWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = DerivedStorage;
  if (DerivedStorage)
  {
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 25120));
    if (sub_D1C38(0x14u, 7))
    {
      int v5 = sub_D1C7C(0x14u);
      __uint64_t v6 = sub_DDEFC();
      __uint64_t v7 = (const char *)sub_D1CB0(7);
      if (v5)
      {
        printf("%lld %d AVE %s: FIG: ENTER AVE_DEBUG_H264SetCallback\n", v6, 20, v7);
        __uint64_t v8 = sub_DDEFC();
        uint64_t v24 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_DEBUG_H264SetCallback", v8, 20, v24);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_DEBUG_H264SetCallback", v6, 20, v7);
      }
    }
    if (a2)
    {
      if (sub_D1C38(0x14u, 7))
      {
        int v13 = sub_D1C7C(0x14u);
        __uint64_t v14 = sub_DDEFC();
        int v15 = (const char *)sub_D1CB0(7);
        if (v13)
        {
          printf("%lld %d AVE %s: FIG: AVEFIG_DEBUG_SetCallback called\n", v14, 20, v15);
          __uint64_t v16 = sub_DDEFC();
          __uint64_t v26 = (const char *)sub_D1CB0(7);
          syslog(3, "%lld %d AVE %s: FIG: AVEFIG_DEBUG_SetCallback called", v16, 20, v26);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: AVEFIG_DEBUG_SetCallback called", v14, 20, v15);
        }
      }
      uint64_t v17 = 0;
      long long v18 = a2[1];
      *(_OWORD *)(v4 + 32) = *a2;
      *(_OWORD *)(v4 + 48) = v18;
    }
    else
    {
      uint64_t v17 = 0;
    }
  }
  else
  {
    if (sub_D1C38(3u, 4))
    {
      int v9 = sub_D1C7C(3u);
      __uint64_t v10 = sub_DDEFC();
      int v11 = (const char *)sub_D1CB0(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | FigBaseObjectGetDerivedStorage failed.\n", v10, 3, v11, "AVE_DEBUG_H264SetCallback", 511, "encoderPrivateStorage");
        __uint64_t v12 = sub_DDEFC();
        int v25 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FigBaseObjectGetDerivedStorage failed.", v12, 3, v25, "AVE_DEBUG_H264SetCallback", 511, "encoderPrivateStorage");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FigBaseObjectGetDerivedStorage failed.", v10, 3, v11, "AVE_DEBUG_H264SetCallback", 511, "encoderPrivateStorage");
      }
    }
    uint64_t v17 = 4294954384;
  }
  if (sub_D1C38(0x14u, 7))
  {
    int v19 = sub_D1C7C(0x14u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(7);
    if (v19)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_DEBUG_H264SetCallback err %d\n", v20, 20, v21, v17);
      __uint64_t v22 = sub_DDEFC();
      uint64_t v27 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_DEBUG_H264SetCallback err %d", v22, 20, v27, v17);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_DEBUG_H264SetCallback err %d", v20, 20, v21, v17);
    }
  }
  if (v4) {
    pthread_mutex_unlock((pthread_mutex_t *)(v4 + 25120));
  }
  return v17;
}

uint64_t AVE_RemoteSession_H264SetCallback()
{
  return 4294954381;
}

uint64_t AVE_Plugin_AVC_CreateInstance(int a1, const void *a2, void *a3)
{
  memset(v32, 0, sizeof(v32));
  if (sub_D1C38(0x14u, 6))
  {
    int v6 = sub_D1C7C(0x14u);
    __uint64_t v7 = sub_DDEFC();
    __uint64_t v8 = (const char *)sub_D1CB0(6);
    if (v6)
    {
      printf("%lld %d AVE %s: Enter %s %d %p %p\n", v7, 20, v8, "AVE_Plugin_AVC_CreateInstance", a1, a2, a3);
      __uint64_t v7 = sub_DDEFC();
      sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: Enter %s %d %p %p", v7);
  }
  if (sub_D1C38(0x14u, 0))
  {
    int v9 = sub_D1C7C(0x14u);
    __uint64_t v10 = sub_DDEFC();
    int v11 = (const char *)sub_D1CB0(0);
    if (v9)
    {
      printf("%lld %d AVE %s: Compiled %s in %s on %s %s\n", v10, 20, v11, "803.48.1", "prod", "Nov 14 2024", "23:04:30");
      __uint64_t v10 = sub_DDEFC();
      sub_D1CB0(0);
    }
    syslog(3, "%lld %d AVE %s: Compiled %s in %s on %s %s", v10);
  }
  if ((int)sub_D1ABC((char *)v32, 128) >= 1 && sub_D1C38(0x14u, 0))
  {
    int v12 = sub_D1C7C(0x14u);
    __uint64_t v13 = sub_DDEFC();
    __uint64_t v14 = (const char *)sub_D1CB0(0);
    if (v12)
    {
      printf("%lld %d AVE %s: Temporary Path: %s\n", v13, 20, v14, (const char *)v32);
      __uint64_t v15 = sub_DDEFC();
      int v30 = (const char *)sub_D1CB0(0);
      syslog(3, "%lld %d AVE %s: Temporary Path: %s", v15, 20, v30, (const char *)v32);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Temporary Path: %s", v13, 20, v14, (const char *)v32);
    }
  }
  sub_DDEFC();
  sub_D1CE0();
  sub_C8C98();
  __uint64_t v16 = sub_C7604();
  sub_D2B08((uint64_t)v16 + 920);
  if (a1 == 1635148593)
  {
    kdebug_trace();
    VTVideoEncoderGetClassID();
    CMDerivedObjectCreate();
    if (sub_D1C38(3u, 4))
    {
      int v21 = sub_D1C7C(3u);
      __uint64_t v22 = sub_DDEFC();
      __uint64_t v23 = (const char *)sub_D1CB0(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigDerivedObjectCreate failed\n", v22, 3, v23, "AVE_Plugin_AVC_CreateInstance", 3456, "encoderInstance != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigDerivedObjectCreate failed");
    }
    uint64_t v24 = 4294954389;
  }
  else
  {
    if (sub_D1C38(3u, 4))
    {
      int v17 = sub_D1C7C(3u);
      __uint64_t v18 = sub_DDEFC();
      int v19 = (const char *)sub_D1CB0(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: codecType not supported\n", v18, 3, v19, "AVE_Plugin_AVC_CreateInstance", 3450, "(codecType == kCMVideoCodecType_H264)");
        __uint64_t v20 = sub_DDEFC();
        int v31 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: codecType not supported", v20, 3, v31, "AVE_Plugin_AVC_CreateInstance", 3450, "(codecType == kCMVideoCodecType_H264)");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: codecType not supported", v18, 3, v19, "AVE_Plugin_AVC_CreateInstance", 3450, "(codecType == kCMVideoCodecType_H264)");
      }
    }
    uint64_t v24 = 4294954394;
  }
  *a3 = 0;
  kdebug_trace();
  if (sub_D1C38(0x14u, 6))
  {
    int v25 = sub_D1C7C(0x14u);
    __uint64_t v26 = sub_DDEFC();
    uint64_t v27 = (const char *)sub_D1CB0(6);
    if (v25)
    {
      printf("%lld %d AVE %s: Exit %s %d %p %p %d\n", v26, 20, v27, "AVE_Plugin_AVC_CreateInstance", a1, a2, a3, v24);
      __uint64_t v28 = sub_DDEFC();
      sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: Exit %s %d %p %p %d", v28, 20);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %d %p %p %d", v26, 20);
    }
  }
  return v24;
}

uint64_t sub_14F00(uint64_t a1, __CFDictionary **a2, __CFDictionary **a3)
{
  int v6 = sub_C7604();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v19 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v19)
    {
      __uint64_t v26 = "PropertyDictionaryHEIF";
      int v27 = 3013;
      goto LABEL_869;
    }
    __uint64_t v22 = "PropertyDictionaryHEIF";
    int v23 = 3013;
LABEL_795:
    printf("%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryCreateMutable failed.\n", v20, 3, v21, "AVE_CreateSupportedPropertyDictionary", v23, v22);
    __uint64_t v196 = sub_DDEFC();
    v202 = (const char *)sub_D1CB0(4);
    syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryCreateMutable failed.", v196, 3, v202, "AVE_CreateSupportedPropertyDictionary", v23, v22);
    goto LABEL_870;
  }
  __uint64_t v8 = Mutable;
  if (!sub_4A52C(Mutable, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxKeyFrameInterval, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v24 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v24)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxKeyFra"
            "meInterval, false)";
      int v27 = 3015;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxKeyFrame"
          "Interval, false)";
    int v23 = 3015;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"StrictKeyFrameInterval", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v25 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v25)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFString"
            "MakeConstantString (\"\" \"StrictKeyFrameInterval\" \"\")), false)";
      int v27 = 3016;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"StrictKeyFrameInterval\" \"\")), false)";
    int v23 = 3016;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowTemporalCompression, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v28 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v28)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowTem"
            "poralCompression, false)";
      int v27 = 3017;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowTempo"
          "ralCompression, false)";
    int v23 = 3017;
    goto LABEL_795;
  }
  int v9 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!v9)
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v29 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v29)
    {
      __uint64_t v26 = "Dictionary";
      int v27 = 3022;
      goto LABEL_869;
    }
    __uint64_t v22 = "Dictionary";
    int v23 = 3022;
    goto LABEL_795;
  }
  __uint64_t v10 = v9;
  CFDictionarySetValue(v9, kVTPropertyTypeKey, kVTPropertyType_Enumeration);
  CFDictionarySetValue(v10, kVTPropertyReadWriteStatusKey, kVTPropertyReadWriteStatus_ReadWrite);
  CFDictionarySetValue(v10, kVTPropertyShouldBeSerializedKey, kCFBooleanFalse);
  int v11 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFArrayAppendValue(v11, kVTProfileLevel_H264_Baseline_1_3);
  CFArrayAppendValue(v11, kVTProfileLevel_H264_Baseline_3_0);
  CFArrayAppendValue(v11, kVTProfileLevel_H264_Baseline_3_1);
  CFArrayAppendValue(v11, kVTProfileLevel_H264_Baseline_3_2);
  CFArrayAppendValue(v11, kVTProfileLevel_H264_Baseline_4_0);
  CFArrayAppendValue(v11, kVTProfileLevel_H264_Baseline_4_1);
  CFArrayAppendValue(v11, kVTProfileLevel_H264_Baseline_5_0);
  CFArrayAppendValue(v11, kVTProfileLevel_H264_Baseline_5_1);
  CFArrayAppendValue(v11, kVTProfileLevel_H264_Baseline_5_2);
  CFArrayAppendValue(v11, kVTProfileLevel_H264_Main_3_0);
  CFArrayAppendValue(v11, kVTProfileLevel_H264_Main_3_1);
  CFArrayAppendValue(v11, kVTProfileLevel_H264_Main_3_2);
  CFArrayAppendValue(v11, kVTProfileLevel_H264_Main_4_0);
  CFArrayAppendValue(v11, kVTProfileLevel_H264_Main_4_1);
  CFArrayAppendValue(v11, kVTProfileLevel_H264_Main_5_0);
  CFArrayAppendValue(v11, kVTProfileLevel_H264_Main_5_1);
  CFArrayAppendValue(v11, kVTProfileLevel_H264_Main_5_2);
  CFArrayAppendValue(v11, kVTProfileLevel_H264_High_3_0);
  CFArrayAppendValue(v11, kVTProfileLevel_H264_High_3_1);
  CFArrayAppendValue(v11, kVTProfileLevel_H264_High_3_2);
  CFArrayAppendValue(v11, kVTProfileLevel_H264_High_4_0);
  CFArrayAppendValue(v11, kVTProfileLevel_H264_High_4_1);
  CFArrayAppendValue(v11, kVTProfileLevel_H264_High_5_0);
  CFArrayAppendValue(v11, kVTProfileLevel_H264_High_5_1);
  CFArrayAppendValue(v11, kVTProfileLevel_H264_High_5_2);
  CFArrayAppendValue(v11, kVTProfileLevel_H264_Baseline_AutoLevel);
  CFArrayAppendValue(v11, kVTProfileLevel_H264_ConstrainedBaseline_AutoLevel);
  CFArrayAppendValue(v11, kVTProfileLevel_H264_Main_AutoLevel);
  CFArrayAppendValue(v11, kVTProfileLevel_H264_High_AutoLevel);
  CFArrayAppendValue(v11, kVTProfileLevel_H264_ConstrainedHigh_AutoLevel);
  v210 = (void *)kVTProfileLevel_H264_High422_AutoLevel;
  CFArrayAppendValue(v11, kVTProfileLevel_H264_High422_AutoLevel);
  v209 = (void *)kVTProfileLevel_H264_High444Predictive_AutoLevel;
  CFArrayAppendValue(v11, kVTProfileLevel_H264_High444Predictive_AutoLevel);
  CFDictionarySetValue(v10, kVTPropertySupportedValueListKey, v11);
  if (v11) {
    CFRelease(v11);
  }
  CFDictionarySetValue(v8, kVTCompressionPropertyKey_ProfileLevel, v10);
  CFRelease(v10);
  if (!sub_4A52C(v8, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v30 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v30)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxKeyFra"
            "meIntervalDuration, false)";
      int v27 = 3082;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxKeyFrame"
          "IntervalDuration, false)";
    int v23 = 3082;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"StrictKeyFrameIntervalDuration", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v31 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v31)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFString"
            "MakeConstantString (\"\" \"StrictKeyFrameIntervalDuration\" \"\")), false)";
      int v27 = 3083;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"StrictKeyFrameIntervalDuration\" \"\")), false)";
    int v23 = 3083;
    goto LABEL_795;
  }
  if (!v6[344]) {
    goto LABEL_33;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"InitialQPI", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v32 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v32)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFString"
            "MakeConstantString (\"\" \"InitialQPI\" \"\")), false)";
      int v27 = 3088;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"InitialQPI\" \"\")), false)";
    int v23 = 3088;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"InitialQPP", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v34 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v34)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFString"
            "MakeConstantString (\"\" \"InitialQPP\" \"\")), false)";
      int v27 = 3089;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"InitialQPP\" \"\")), false)";
    int v23 = 3089;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"InitialQPB", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v36 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v36)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFString"
            "MakeConstantString (\"\" \"InitialQPB\" \"\")), false)";
      int v27 = 3090;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"InitialQPB\" \"\")), false)";
    int v23 = 3090;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"EnableMBInputCtrl", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v38 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v38)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFString"
            "MakeConstantString (\"\" \"EnableMBInputCtrl\" \"\")), false)";
      int v27 = 3091;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"EnableMBInputCtrl\" \"\")), false)";
    int v23 = 3091;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Boolean, @"UseHWTileOffsets", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v40 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v40)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStrin"
            "gMakeConstantString (\"\" \"UseHWTileOffsets\" \"\")), false)";
      int v27 = 3092;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"UseHWTileOffsets\" \"\")), false)";
    int v23 = 3092;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"BPictures", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v42 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v42)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFString"
            "MakeConstantString (\"\" \"BPictures\" \"\")), false)";
      int v27 = 3093;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"BPictures\" \"\")), false)";
    int v23 = 3093;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Enumeration, @"SessionName", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v44 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v44)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFS"
            "tringMakeConstantString (\"\" \"SessionName\" \"\")), false)";
      int v27 = 3094;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStr"
          "ingMakeConstantString (\"\" \"SessionName\" \"\")), false)";
    int v23 = 3094;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"RCMode", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v46 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v46)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFString"
            "MakeConstantString (\"\" \"RCMode\" \"\")), false)";
      int v27 = 3095;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"RCMode\" \"\")), false)";
    int v23 = 3095;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"EnableAdaptB", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v48 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v48)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFString"
            "MakeConstantString (\"\" \"EnableAdaptB\" \"\")), false)";
      int v27 = 3096;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"EnableAdaptB\" \"\")), false)";
    int v23 = 3096;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Boolean, @"EnableCompleteGOP", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v50 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v50)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStrin"
            "gMakeConstantString (\"\" \"EnableCompleteGOP\" \"\")), false)";
      int v27 = 3097;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"EnableCompleteGOP\" \"\")), false)";
    int v23 = 3097;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, kVTCompressionPropertyKey_Usage, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v52 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v52)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_Usage, false)";
      int v27 = 3098;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_Usage, false)";
    int v23 = 3098;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"EnableLambdaMod", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v54 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v54)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFString"
            "MakeConstantString (\"\" \"EnableLambdaMod\" \"\")), false)";
      int v27 = 3099;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"EnableLambdaMod\" \"\")), false)";
    int v23 = 3099;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"EnableQPMod", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v56 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v56)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFString"
            "MakeConstantString (\"\" \"EnableQPMod\" \"\")), false)";
      int v27 = 3100;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"EnableQPMod\" \"\")), false)";
    int v23 = 3100;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"EnableStaticAreasLowQP", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v58 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v58)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFString"
            "MakeConstantString (\"\" \"EnableStaticAreasLowQP\" \"\")), false)";
      int v27 = 3101;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"EnableStaticAreasLowQP\" \"\")), false)";
    int v23 = 3101;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"EnableStatsCollect", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v60 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v60)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFString"
            "MakeConstantString (\"\" \"EnableStatsCollect\" \"\")), false)";
      int v27 = 3102;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"EnableStatsCollect\" \"\")), false)";
    int v23 = 3102;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Boolean, @"EnableVarianceQPMod", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v62 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v62)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStrin"
            "gMakeConstantString (\"\" \"EnableVarianceQPMod\" \"\")), false)";
      int v27 = 3103;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"EnableVarianceQPMod\" \"\")), false)";
    int v23 = 3103;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Boolean, @"FlatAreaLowQp", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v64 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v64)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStrin"
            "gMakeConstantString (\"\" \"FlatAreaLowQp\" \"\")), false)";
      int v27 = 3104;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"FlatAreaLowQp\" \"\")), false)";
    int v23 = 3104;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, kVTCompressionPropertyKey_NumberOfSlices, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v65 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v65)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_NumberOfSlices, false)";
      int v27 = 3105;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_NumberOfSlices, false)";
    int v23 = 3105;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"SVENum", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v68 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v68)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFString"
            "MakeConstantString (\"\" \"SVENum\" \"\")), false)";
      int v27 = 3106;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"SVENum\" \"\")), false)";
    int v23 = 3106;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Boolean, kVTCompressionPropertyKey_PerceptualQualityOptimization, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v70 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v70)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_Perceptu"
            "alQualityOptimization, false)";
      int v27 = 3107;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_Perceptual"
          "QualityOptimization, false)";
    int v23 = 3107;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Boolean, @"UseAsyncFWScheduling", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v72 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v72)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStrin"
            "gMakeConstantString (\"\" \"UseAsyncFWScheduling\" \"\")), false)";
      int v27 = 3108;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"UseAsyncFWScheduling\" \"\")), false)";
    int v23 = 3108;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Boolean, @"UseCAVLCBits", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v74 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v74)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStrin"
            "gMakeConstantString (\"\" \"UseCAVLCBits\" \"\")), false)";
      int v27 = 3109;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"UseCAVLCBits\" \"\")), false)";
    int v23 = 3109;
    goto LABEL_795;
  }
LABEL_33:
  if (!sub_4A52C(v8, kVTPropertyType_Boolean, kVTCompressionPropertyKey_RealTime, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v33 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v33)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_RealTime, false)";
      int v27 = 3112;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_RealTime, false)";
    int v23 = 3112;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, kVTCompressionPropertyKey_SourceFrameCount, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v35 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v35)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_SourceFrameCount, false)";
      int v27 = 3113;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_SourceFrameCount, false)";
    int v23 = 3113;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, kVTCompressionPropertyKey_ExpectedFrameRate, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v37 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v37)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_ExpectedF"
            "rameRate, false)";
      int v27 = 3114;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_ExpectedFrameRate, false)";
    int v23 = 3114;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"MaximumRealTimeFrameRate", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v39 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v39)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFString"
            "MakeConstantString (\"\" \"MaximumRealTimeFrameRate\" \"\")), false)";
      int v27 = 3116;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"MaximumRealTimeFrameRate\" \"\")), false)";
    int v23 = 3116;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowFrameReordering, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v41 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v41)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowFra"
            "meReordering, false)";
      int v27 = 3117;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowFrame"
          "Reordering, false)";
    int v23 = 3117;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, kVTCompressionPropertyKey_AverageBitRate, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v43 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v43)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_AverageBitRate, false)";
      int v27 = 3118;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_AverageBitRate, false)";
    int v23 = 3118;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Enumeration, kVTCompressionPropertyKey_H264EntropyMode, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v45 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v45)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Enumeration, kVTCompressionPropertyKey_H264"
            "EntropyMode, false)";
      int v27 = 3119;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Enumeration, kVTCompressionPropertyKey_H264En"
          "tropyMode, false)";
    int v23 = 3119;
    goto LABEL_795;
  }
  v208 = (const void *)kVTCompressionPropertyKey_Priority;
  if (!sub_4A52C(v8, kVTPropertyType_Number, kVTCompressionPropertyKey_Priority, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v47 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v47)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_Priority, false)";
      int v27 = 3120;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_Priority, false)";
    int v23 = 3120;
    goto LABEL_795;
  }
  v207 = (const void *)kVTCompressionPropertyKey_InputQueueMaxCount;
  if (!sub_4A52C(v8, kVTPropertyType_Number, kVTCompressionPropertyKey_InputQueueMaxCount, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v49 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v49)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_InputQueu"
            "eMaxCount, false)";
      int v27 = 3121;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_InputQueueMaxCount, false)";
    int v23 = 3121;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Boolean, kVTCompressionPropertyKey_UsingHardwareAcceleratedVideoEncoder, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v51 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v51)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_UsingHar"
            "dwareAcceleratedVideoEncoder, false)";
      int v27 = 3122;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_UsingHardw"
          "areAcceleratedVideoEncoder, false)";
    int v23 = 3122;
    goto LABEL_795;
  }
  v206 = (const void *)kVTCompressionPropertyKey_InputPixelFormat;
  if (!sub_4A52C(v8, kVTPropertyType_Number, kVTCompressionPropertyKey_InputPixelFormat, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v53 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v53)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_InputPixelFormat, false)";
      int v27 = 3123;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_InputPixelFormat, false)";
    int v23 = 3123;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"CodedBuffersOverride", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v55 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v55)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFString"
            "MakeConstantString (\"\" \"CodedBuffersOverride\" \"\")), false)";
      int v27 = 3124;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"CodedBuffersOverride\" \"\")), false)";
    int v23 = 3124;
    goto LABEL_795;
  }
  sub_DE9A8(v8);
  v205 = (const void *)kVTCompressionPropertyKey_QuantizationScalingMatrixPreset;
  if (!sub_4A52C(v8, kVTPropertyType_Number, kVTCompressionPropertyKey_QuantizationScalingMatrixPreset, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v57 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v57)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_Quantizat"
            "ionScalingMatrixPreset, false)";
      int v27 = 3128;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_Quantizatio"
          "nScalingMatrixPreset, false)";
    int v23 = 3128;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, kVTCompressionPropertyKey_Quality, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v59 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v59)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_Quality, false)";
      int v27 = 3129;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_Quality, false)";
    int v23 = 3129;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Boolean, kVTCompressionPropertyKey_EnableQPModulation, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v61 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v61)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_EnableQP"
            "Modulation, false)";
      int v27 = 3130;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_EnableQPMo"
          "dulation, false)";
    int v23 = 3130;
    goto LABEL_795;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Boolean, @"CalculateMeanSquaredError", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v63 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v63)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStrin"
            "gMakeConstantString (\"\" \"CalculateMeanSquaredError\" \"\")), false)";
      int v27 = 3131;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"CalculateMeanSquaredError\" \"\")), false)";
    int v23 = 3131;
    goto LABEL_795;
  }
  theDict = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!theDict)
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v66 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v66)
    {
      __uint64_t v26 = "PropertyDictionary";
      int v27 = 3136;
      goto LABEL_869;
    }
    __uint64_t v22 = "PropertyDictionary";
    int v23 = 3136;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxKeyFrameInterval, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v67 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v67)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxKeyFrameInterval, false)";
      int v27 = 3138;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxKeyFrameInterval, false)";
    int v23 = 3138;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"StrictKeyFrameInterval", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v69 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v69)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"StrictKeyFrameInterval\" \"\")), false)";
      int v27 = 3139;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"StrictKeyFrameInterval\" \"\")), false)";
    int v23 = 3139;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowFrameReordering, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v71 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v71)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowFrameRe"
            "ordering, false)";
      int v27 = 3140;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowFrameReordering, false)";
    int v23 = 3140;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowTemporalCompression, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v73 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v73)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowTempora"
            "lCompression, false)";
      int v27 = 3141;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowTemporalC"
          "ompression, false)";
    int v23 = 3141;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_AverageBitRate, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v75 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v75)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_AverageBitRate, false)";
      int v27 = 3142;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_AverageBitRate, false)";
    int v23 = 3142;
    goto LABEL_795;
  }
  int v12 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!v12)
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v76 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v76)
    {
      __uint64_t v26 = "Dictionary";
      int v27 = 3147;
      goto LABEL_869;
    }
    __uint64_t v22 = "Dictionary";
    int v23 = 3147;
    goto LABEL_795;
  }
  __uint64_t v13 = v12;
  CFDictionarySetValue(v12, kVTPropertyTypeKey, kVTPropertyType_Enumeration);
  CFDictionarySetValue(v13, kVTPropertyReadWriteStatusKey, kVTPropertyReadWriteStatus_ReadWrite);
  CFDictionarySetValue(v13, kVTPropertyShouldBeSerializedKey, kCFBooleanFalse);
  __uint64_t v14 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFArrayAppendValue(v14, kVTProfileLevel_H264_Baseline_1_3);
  CFArrayAppendValue(v14, kVTProfileLevel_H264_Baseline_3_0);
  CFArrayAppendValue(v14, kVTProfileLevel_H264_Baseline_3_1);
  CFArrayAppendValue(v14, kVTProfileLevel_H264_Baseline_3_2);
  CFArrayAppendValue(v14, kVTProfileLevel_H264_Baseline_4_0);
  CFArrayAppendValue(v14, kVTProfileLevel_H264_Baseline_4_1);
  CFArrayAppendValue(v14, kVTProfileLevel_H264_Baseline_5_0);
  CFArrayAppendValue(v14, kVTProfileLevel_H264_Baseline_5_1);
  CFArrayAppendValue(v14, kVTProfileLevel_H264_Baseline_5_2);
  CFArrayAppendValue(v14, kVTProfileLevel_H264_Main_3_0);
  CFArrayAppendValue(v14, kVTProfileLevel_H264_Main_3_1);
  CFArrayAppendValue(v14, kVTProfileLevel_H264_Main_3_2);
  CFArrayAppendValue(v14, kVTProfileLevel_H264_Main_4_0);
  CFArrayAppendValue(v14, kVTProfileLevel_H264_Main_4_1);
  CFArrayAppendValue(v14, kVTProfileLevel_H264_Main_5_0);
  CFArrayAppendValue(v14, kVTProfileLevel_H264_Main_5_1);
  CFArrayAppendValue(v14, kVTProfileLevel_H264_Main_5_2);
  CFArrayAppendValue(v14, kVTProfileLevel_H264_High_3_0);
  CFArrayAppendValue(v14, kVTProfileLevel_H264_High_3_1);
  CFArrayAppendValue(v14, kVTProfileLevel_H264_High_3_2);
  CFArrayAppendValue(v14, kVTProfileLevel_H264_High_4_0);
  CFArrayAppendValue(v14, kVTProfileLevel_H264_High_4_1);
  CFArrayAppendValue(v14, kVTProfileLevel_H264_High_5_0);
  CFArrayAppendValue(v14, kVTProfileLevel_H264_High_5_1);
  CFArrayAppendValue(v14, kVTProfileLevel_H264_High_5_2);
  CFArrayAppendValue(v14, kVTProfileLevel_H264_Baseline_AutoLevel);
  CFArrayAppendValue(v14, kVTProfileLevel_H264_ConstrainedBaseline_AutoLevel);
  CFArrayAppendValue(v14, kVTProfileLevel_H264_Main_AutoLevel);
  CFArrayAppendValue(v14, kVTProfileLevel_H264_High_AutoLevel);
  CFArrayAppendValue(v14, kVTProfileLevel_H264_ConstrainedHigh_AutoLevel);
  CFArrayAppendValue(v14, v210);
  CFArrayAppendValue(v14, v209);
  CFDictionarySetValue(v13, kVTPropertySupportedValueListKey, v14);
  if (v14) {
    CFRelease(v14);
  }
  CFDictionarySetValue(theDict, kVTCompressionPropertyKey_ProfileLevel, v13);
  CFRelease(v13);
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EnableTransform8x8", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v77 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v77)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"EnableTransform8x8\" \"\")), false)";
      int v27 = 3208;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableTransform8x8\" \"\")), false)";
    int v23 = 3208;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EnableWeightedPrediction", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v78 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v78)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"EnableWeightedPrediction\" \"\")), false)";
      int v27 = 3209;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableWeightedPrediction\" \"\")), false)";
    int v23 = 3209;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_SourceFrameCount, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v79 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v79)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_SourceFrameCount, false)";
      int v27 = 3210;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_SourceFrameCount, false)";
    int v23 = 3210;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_ExpectedFrameRate, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v80 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v80)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_ExpectedFrameRate, false)";
      int v27 = 3211;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_ExpectedFrameRate, false)";
    int v23 = 3211;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"MaximumRealTimeFrameRate", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v81 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v81)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"MaximumRealTimeFrameRate\" \"\")), false)";
      int v27 = 3213;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MaximumRealTimeFrameRate\" \"\")), false)";
    int v23 = 3213;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_DataRateLimits, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v82 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v82)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_DataRateLimits, false)";
      int v27 = 3215;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_DataRateLimits, false)";
    int v23 = 3215;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_ConstantBitRate, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v83 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v83)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_ConstantBitRate, false)";
      int v27 = 3216;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_ConstantBitRate, false)";
    int v23 = 3216;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"VariableBitRate", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v84 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v84)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"VariableBitRate\" \"\")), false)";
      int v27 = 3217;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"VariableBitRate\" \"\")), false)";
    int v23 = 3217;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_ConvergenceDurationForAverageDataRate, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v85 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v85)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_ConvergenceDu"
            "rationForAverageDataRate, false)";
      int v27 = 3218;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_ConvergenceDura"
          "tionForAverageDataRate, false)";
    int v23 = 3218;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_FrameRateTargetForAverageBitrate, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v86 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v86)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_FrameRateTarg"
            "etForAverageBitrate, false)";
      int v27 = 3219;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_FrameRateTarget"
          "ForAverageBitrate, false)";
    int v23 = 3219;
    goto LABEL_795;
  }
  uint64_t v15 = sub_DE9A8(theDict);
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_ExpectedDuration, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v87 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v87)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_ExpectedDuration, false)";
      int v27 = 3223;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_ExpectedDuration, false)";
    int v23 = 3223;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v88 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v88)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxKeyFrameIn"
            "tervalDuration, false)";
      int v27 = 3224;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxKeyFrameInte"
          "rvalDuration, false)";
    int v23 = 3224;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"StrictKeyFrameIntervalDuration", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v89 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v89)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"StrictKeyFrameIntervalDuration\" \"\")), false)";
      int v27 = 3225;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"StrictKeyFrameIntervalDuration\" \"\")), false)";
    int v23 = 3225;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_Usage, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v90 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v90)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_Usage, false)";
      int v27 = 3226;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_Usage, false)";
    int v23 = 3226;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_ThrottleForBackground, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v91 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v91)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_ThrottleForB"
            "ackground, false)";
      int v27 = 3227;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_ThrottleForBackground, false)";
    int v23 = 3227;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"SpatialAdaptiveQPLevel", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v92 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v92)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"SpatialAdaptiveQPLevel\" \"\")), false)";
      int v27 = 3228;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SpatialAdaptiveQPLevel\" \"\")), false)";
    int v23 = 3228;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"LookAheadFrames", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v93 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v93)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"LookAheadFrames\" \"\")), false)";
      int v27 = 3229;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"LookAheadFrames\" \"\")), false)";
    int v23 = 3229;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"PreemptiveLoadBalancing", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v94 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v94)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"PreemptiveLoadBalancing\" \"\")), false)";
      int v27 = 3230;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"PreemptiveLoadBalancing\" \"\")), false)";
    int v23 = 3230;
    goto LABEL_795;
  }
  if (!v6[344]) {
    goto LABEL_113;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"InitialQPI", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v95 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v95)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"InitialQPI\" \"\")), false)";
      int v27 = 3235;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"InitialQPI\" \"\")), false)";
    int v23 = 3235;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"InitialQPP", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v96 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v96)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"InitialQPP\" \"\")), false)";
      int v27 = 3236;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"InitialQPP\" \"\")), false)";
    int v23 = 3236;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"InitialQPB", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v99 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v99)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"InitialQPB\" \"\")), false)";
      int v27 = 3237;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"InitialQPB\" \"\")), false)";
    int v23 = 3237;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"EnableRCFW", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v101 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v101)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"EnableRCFW\" \"\")), false)";
      int v27 = 3238;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableRCFW\" \"\")), false)";
    int v23 = 3238;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"EnableRCDriver", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v103 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v103)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"EnableRCDriver\" \"\")), false)";
      int v27 = 3239;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableRCDriver\" \"\")), false)";
    int v23 = 3239;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"RCMode", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v105 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v105)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"RCMode\" \"\")), false)";
      int v27 = 3240;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"RCMode\" \"\")), false)";
    int v23 = 3240;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"SetDbgInternalParams", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v107 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v107)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"SetDbgInternalParams\" \"\")), false)";
      int v27 = 3241;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SetDbgInternalParams\" \"\")), false)";
    int v23 = 3241;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"EnableQPMod", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v109 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v109)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"EnableQPMod\" \"\")), false)";
      int v27 = 3242;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableQPMod\" \"\")), false)";
    int v23 = 3242;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"EnableLambdaMod", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v111 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v111)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"EnableLambdaMod\" \"\")), false)";
      int v27 = 3243;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableLambdaMod\" \"\")), false)";
    int v23 = 3243;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EnableVarianceQPMod", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v113 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v113)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"EnableVarianceQPMod\" \"\")), false)";
      int v27 = 3244;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableVarianceQPMod\" \"\")), false)";
    int v23 = 3244;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"FlatAreaLowQp", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v115 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v115)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"FlatAreaLowQp\" \"\")), false)";
      int v27 = 3245;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"FlatAreaLowQp\" \"\")), false)";
    int v23 = 3245;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"UseCAVLCBits", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v117 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v117)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"UseCAVLCBits\" \"\")), false)";
      int v27 = 3246;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"UseCAVLCBits\" \"\")), false)";
    int v23 = 3246;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"EnableStaticAreasLowQP", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v119 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v119)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"EnableStaticAreasLowQP\" \"\")), false)";
      int v27 = 3247;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableStaticAreasLowQP\" \"\")), false)";
    int v23 = 3247;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"UseAsyncFWScheduling", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v121 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v121)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"UseAsyncFWScheduling\" \"\")), false)";
      int v27 = 3248;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"UseAsyncFWScheduling\" \"\")), false)";
    int v23 = 3248;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"BPictures", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v123 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v123)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"BPictures\" \"\")), false)";
      int v27 = 3249;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"BPictures\" \"\")), false)";
    int v23 = 3249;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"HierarchicalB", 1))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v124 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v124)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"HierarchicalB\" \"\")), true)";
      int v27 = 3250;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"HierarchicalB\" \"\")), true)";
    int v23 = 3250;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"AllowOpenGOP", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v128 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v128)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"AllowOpenGOP\" \"\")), false)";
      int v27 = 3251;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"AllowOpenGOP\" \"\")), false)";
    int v23 = 3251;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"EnableAdaptB", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v129 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v129)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"EnableAdaptB\" \"\")), false)";
      int v27 = 3252;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableAdaptB\" \"\")), false)";
    int v23 = 3252;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EnableCompleteGOP", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v130 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v130)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"EnableCompleteGOP\" \"\")), false)";
      int v27 = 3253;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableCompleteGOP\" \"\")), false)";
    int v23 = 3253;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"ChromaQpOffset", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v131 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v131)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"ChromaQpOffset\" \"\")), false)";
      int v27 = 3254;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"ChromaQpOffset\" \"\")), false)";
    int v23 = 3254;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"EnableAttachMVStats", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v132 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v132)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"EnableAttachMVStats\" \"\")), false)";
      int v27 = 3255;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableAttachMVStats\" \"\")), false)";
    int v23 = 3255;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"AdaptBPocDelay", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v133 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v133)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"AdaptBPocDelay\" \"\")), false)";
      int v27 = 3256;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"AdaptBPocDelay\" \"\")), false)";
    int v23 = 3256;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"SetMultiPassNum", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v134 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v134)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"SetMultiPassNum\" \"\")), false)";
      int v27 = 3257;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SetMultiPassNum\" \"\")), false)";
    int v23 = 3257;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"MultiPassConstantQP", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v135 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v135)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"MultiPassConstantQP\" \"\")), false)";
      int v27 = 3258;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MultiPassConstantQP\" \"\")), false)";
    int v23 = 3258;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"MultiPassQPModLevel", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v136 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v136)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"MultiPassQPModLevel\" \"\")), false)";
      int v27 = 3259;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MultiPassQPModLevel\" \"\")), false)";
    int v23 = 3259;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"MultiPassMaxQPModLevel", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v137 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v137)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"MultiPassMaxQPModLevel\" \"\")), false)";
      int v27 = 3260;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MultiPassMaxQPModLevel\" \"\")), false)";
    int v23 = 3260;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"MultiPassOptions", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v138 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v138)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"MultiPassOptions\" \"\")), false)";
      int v27 = 3261;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MultiPassOptions\" \"\")), false)";
    int v23 = 3261;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"MCTFStrengthLevel", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v139 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v139)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"MCTFStrengthLevel\" \"\")), false)";
      int v27 = 3262;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MCTFStrengthLevel\" \"\")), false)";
    int v23 = 3262;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"ThroughputRateMode", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v140 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v140)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"ThroughputRateMode\" \"\")), false)";
      int v27 = 3263;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"ThroughputRateMode\" \"\")), false)";
    int v23 = 3263;
    goto LABEL_795;
  }
  if (*(int *)(a1 + 25240) >= 3)
  {
    if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"UseReferenceCompressedBuffers", 0))
    {
      if (!sub_D1C38(3u, 4)) {
        goto LABEL_870;
      }
      int v141 = sub_D1C7C(3u);
      __uint64_t v20 = sub_DDEFC();
      int v21 = (const char *)sub_D1CB0(4);
      if (!v141)
      {
        __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringM"
              "akeConstantString (\"\" \"UseReferenceCompressedBuffers\" \"\")), false)";
        int v27 = 3267;
        goto LABEL_869;
      }
      __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"UseReferenceCompressedBuffers\" \"\")), false)";
      int v23 = 3267;
      goto LABEL_795;
    }
    if (!sub_4A52C(theDict, kVTPropertyType_Number, @"EdgeReplication", 0))
    {
      if (!sub_D1C38(3u, 4)) {
        goto LABEL_870;
      }
      int v142 = sub_D1C7C(3u);
      __uint64_t v20 = sub_DDEFC();
      int v21 = (const char *)sub_D1CB0(4);
      if (!v142)
      {
        __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
              "keConstantString (\"\" \"EdgeReplication\" \"\")), false)";
        int v27 = 3268;
        goto LABEL_869;
      }
      __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"EdgeReplication\" \"\")), false)";
      int v23 = 3268;
      goto LABEL_795;
    }
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Enumeration, @"SessionName", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v143 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v143)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStrin"
            "gMakeConstantString (\"\" \"SessionName\" \"\")), false)";
      int v27 = 3271;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"SessionName\" \"\")), false)";
    int v23 = 3271;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"SVENum", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v144 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v144)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"SVENum\" \"\")), false)";
      int v27 = 3272;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SVENum\" \"\")), false)";
    int v23 = 3272;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"LrmePipeSyncMode", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v145 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v145)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"LrmePipeSyncMode\" \"\")), false)";
      int v27 = 3273;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"LrmePipeSyncMode\" \"\")), false)";
    int v23 = 3273;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EnableCrcQpModMode", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v146 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v146)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"EnableCrcQpModMode\" \"\")), false)";
      int v27 = 3274;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableCrcQpModMode\" \"\")), false)";
    int v23 = 3274;
    goto LABEL_795;
  }
LABEL_113:
  __uint64_t v16 = (int *)(a1 + 25240);
  if (*(int *)(a1 + 25240) >= 3 && !sub_4A52C(theDict, kVTPropertyType_Boolean, @"ForceRefUncompressed", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v98 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v98)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"ForceRefUncompressed\" \"\")), false)";
      int v27 = 3279;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"ForceRefUncompressed\" \"\")), false)";
    int v23 = 3279;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"CalculateMeanSquaredError", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v97 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v97)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"CalculateMeanSquaredError\" \"\")), false)";
      int v27 = 3282;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"CalculateMeanSquaredError\" \"\")), false)";
    int v23 = 3282;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxAllowedFrameQP, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v100 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v100)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxAllowedFrameQP, false)";
      int v27 = 3283;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxAllowedFrameQP, false)";
    int v23 = 3283;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_MinAllowedFrameQP, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v102 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v102)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_MinAllowedFrameQP, false)";
      int v27 = 3284;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_MinAllowedFrameQP, false)";
    int v23 = 3284;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionProperty_SoftMinQuantizationParameter, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v104 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v104)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionProperty_SoftMinQuantizat"
            "ionParameter, false)";
      int v27 = 3285;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionProperty_SoftMinQuantizatio"
          "nParameter, false)";
    int v23 = 3285;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionProperty_SoftMaxQuantizationParameter, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v106 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v106)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionProperty_SoftMaxQuantizat"
            "ionParameter, false)";
      int v27 = 3286;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionProperty_SoftMaxQuantizatio"
          "nParameter, false)";
    int v23 = 3286;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_NumberOfSlices, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v108 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v108)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_NumberOfSlices, false)";
      int v27 = 3288;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_NumberOfSlices, false)";
    int v23 = 3288;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Enumeration, kVTCompressionPropertyKey_H264EntropyMode, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v110 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v110)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, kVTCompressionPropertyKey_H264EntropyMode, false)";
      int v27 = 3289;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, kVTCompressionPropertyKey_H264EntropyMode, false)";
    int v23 = 3289;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, v208, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v112 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v112)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_Priority, false)";
      int v27 = 3290;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_Priority, false)";
    int v23 = 3290;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"DeblockingFiltering", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v114 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v114)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"DeblockingFiltering\" \"\")), false)";
      int v27 = 3291;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"DeblockingFiltering\" \"\")), false)";
    int v23 = 3291;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"DebugMetadataSEI", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v116 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v116)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"DebugMetadataSEI\" \"\")), false)";
      int v27 = 3292;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"DebugMetadataSEI\" \"\")), false)";
    int v23 = 3292;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"DebugMetadataSEIuseEPB", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v118 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v118)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"DebugMetadataSEIuseEPB\" \"\")), false)";
      int v27 = 3293;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"DebugMetadataSEIuseEPB\" \"\")), false)";
    int v23 = 3293;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, v207, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v120 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v120)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_InputQueueMaxCount, false)";
      int v27 = 3294;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_InputQueueMaxCount, false)";
    int v23 = 3294;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_AverageNonDroppableFrameRate, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v122 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v122)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_AverageNonDro"
            "ppableFrameRate, false)";
      int v27 = 3295;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_AverageNonDropp"
          "ableFrameRate, false)";
    int v23 = 3295;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EnableUserQPForFacetime", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v125 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v125)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"EnableUserQPForFacetime\" \"\")), false)";
      int v27 = 3296;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableUserQPForFacetime\" \"\")), false)";
    int v23 = 3296;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Enumeration, kVTCompressionPropertyKey_UserDPBFramesForFaceTime, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v126 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v126)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, kVTCompressionPropertyKey_UserDPBF"
            "ramesForFaceTime, false)";
      int v27 = 3297;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, kVTCompressionPropertyKey_UserDPBFra"
          "mesForFaceTime, false)";
    int v23 = 3297;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Enumeration, @"DPBRequirements", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v147 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v147)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStrin"
            "gMakeConstantString (\"\" \"DPBRequirements\" \"\")), false)";
      int v27 = 3298;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"DPBRequirements\" \"\")), false)";
    int v23 = 3298;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EnableUserRefForFacetime", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v148 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v148)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"EnableUserRefForFacetime\" \"\")), false)";
      int v27 = 3299;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableUserRefForFacetime\" \"\")), false)";
    int v23 = 3299;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_MaxFrameDelayCount, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v149 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v149)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_MaxFrameDelayCount, false)";
      int v27 = 3300;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_MaxFrameDelayCount, false)";
    int v23 = 3300;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"MaximizePowerEfficiency", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v150 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v150)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"MaximizePowerEfficiency\" \"\")), false)";
      int v27 = 3301;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"MaximizePowerEfficiency\" \"\")), false)";
    int v23 = 3301;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_PrioritizeEncodingSpeedOverQuality, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v151 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v151)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_PrioritizeEn"
            "codingSpeedOverQuality, false)";
      int v27 = 3302;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_PrioritizeEnco"
          "dingSpeedOverQuality, false)";
    int v23 = 3302;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"ThroughputRateMode", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v152 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v152)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"ThroughputRateMode\" \"\")), false)";
      int v27 = 3303;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"ThroughputRateMode\" \"\")), false)";
    int v23 = 3303;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_RealTime, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v153 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v153)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_RealTime, false)";
      int v27 = 3306;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_RealTime, false)";
    int v23 = 3306;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_UsingHardwareAcceleratedVideoEncoder, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v154 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v154)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_UsingHardwar"
            "eAcceleratedVideoEncoder, false)";
      int v27 = 3307;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_UsingHardwareA"
          "cceleratedVideoEncoder, false)";
    int v23 = 3307;
    goto LABEL_795;
  }
  int v17 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!v17)
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v127 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v127)
    {
      __uint64_t v26 = "Dictionary";
      int v27 = 3313;
      goto LABEL_869;
    }
    __uint64_t v22 = "Dictionary";
    int v23 = 3313;
    goto LABEL_795;
  }
  __uint64_t v18 = v17;
  CFDictionarySetValue(v17, kVTPropertyReadWriteStatusKey, kVTPropertyReadWriteStatus_ReadWrite);
  CFDictionarySetValue(v18, kVTPropertyShouldBeSerializedKey, kCFBooleanFalse);
  CFDictionarySetValue(theDict, kVTCompressionPropertyKey_MultiPassStorage, v18);
  CFRelease(v18);
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_Quality, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v155 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v155)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_Quality, false)";
      int v27 = 3326;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_Quality, false)";
    int v23 = 3326;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"EnableStatsCollect", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v156 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v156)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"EnableStatsCollect\" \"\")), false)";
      int v27 = 3329;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableStatsCollect\" \"\")), false)";
    int v23 = 3329;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EnableMultiReferenceP", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v157 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v157)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"EnableMultiReferenceP\" \"\")), false)";
      int v27 = 3330;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableMultiReferenceP\" \"\")), false)";
    int v23 = 3330;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"MultiReferencePSpacing", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v158 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v158)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"MultiReferencePSpacing\" \"\")), false)";
      int v27 = 3331;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MultiReferencePSpacing\" \"\")), false)";
    int v23 = 3331;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"log2_max_minus4", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v159 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v159)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"log2_max_minus4\" \"\")), false)";
      int v27 = 3332;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"log2_max_minus4\" \"\")), false)";
    int v23 = 3332;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_EnsureTIJacinto4Compatibility, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v160 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v160)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_EnsureTIJaci"
            "nto4Compatibility, false)";
      int v27 = 3333;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_EnsureTIJacint"
          "o4Compatibility, false)";
    int v23 = 3333;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, v206, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v161 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v161)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_InputPixelFormat, false)";
      int v27 = 3334;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_InputPixelFormat, false)";
    int v23 = 3334;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_PerceptualQualityOptimization, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v162 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v162)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_PerceptualQu"
            "alityOptimization, false)";
      int v27 = 3335;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_PerceptualQual"
          "ityOptimization, false)";
    int v23 = 3335;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_VideoResolutionAdaptation, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v163 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v163)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_VideoResolut"
            "ionAdaptation, false)";
      int v27 = 3336;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_VideoResolutio"
          "nAdaptation, false)";
    int v23 = 3336;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_VideoResolutionAdaptationType, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v164 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v164)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_VideoResolut"
            "ionAdaptationType, false)";
      int v27 = 3337;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_VideoResolutio"
          "nAdaptationType, false)";
    int v23 = 3337;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"UseLongTermReference", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v165 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v165)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"UseLongTermReference\" \"\")), false)";
      int v27 = 3338;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"UseLongTermReference\" \"\")), false)";
    int v23 = 3338;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"CodedBuffersOverride", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v166 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v166)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"CodedBuffersOverride\" \"\")), false)";
      int v27 = 3339;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"CodedBuffersOverride\" \"\")), false)";
    int v23 = 3339;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"EnableMBInputCtrl", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v167 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v167)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"EnableMBInputCtrl\" \"\")), false)";
      int v27 = 3340;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableMBInputCtrl\" \"\")), false)";
    int v23 = 3340;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"AllowGapsInFrameNum", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v168 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v168)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"AllowGapsInFrameNum\" \"\")), false)";
      int v27 = 3341;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"AllowGapsInFrameNum\" \"\")), false)";
    int v23 = 3341;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"ChromaQPIndexOffsetMultiPPS", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v169 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v169)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"ChromaQPIndexOffsetMultiPPS\" \"\")), false)";
      int v27 = 3342;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"ChromaQPIndexOffsetMultiPPS\" \"\")), false)";
    int v23 = 3342;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, v205, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v170 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v170)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_QuantizationS"
            "calingMatrixPreset, false)";
      int v27 = 3343;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_QuantizationSca"
          "lingMatrixPreset, false)";
    int v23 = 3343;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"iChatUsageString", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v171 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v171)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"iChatUsageString\" \"\")), false)";
      int v27 = 3344;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"iChatUsageString\" \"\")), false)";
    int v23 = 3344;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_UserParameterSetsIds, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v172 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v172)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_UserParameterSetsIds, false)";
      int v27 = 3345;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_UserParameterSetsIds, false)";
    int v23 = 3345;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"AllocCodedBufferHalfSize", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v173 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v173)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"AllocCodedBufferHalfSize\" \"\")), false)";
      int v27 = 3346;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"AllocCodedBufferHalfSize\" \"\")), false)";
    int v23 = 3346;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EnableMultiSliceStats", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v174 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v174)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"EnableMultiSliceStats\" \"\")), false)";
      int v27 = 3347;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableMultiSliceStats\" \"\")), false)";
    int v23 = 3347;
    goto LABEL_795;
  }
  if (*v16 >= 8 && !sub_4A52C(theDict, kVTPropertyType_Number, @"lrmeRCPassNum", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v175 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v175)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"lrmeRCPassNum\" \"\")), false)";
      int v27 = 3350;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"lrmeRCPassNum\" \"\")), false)";
    int v23 = 3350;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EncodesDisparity", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v176 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v176)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"EncodesDisparity\" \"\")), false)";
      int v27 = 3352;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EncodesDisparity\" \"\")), false)";
    int v23 = 3352;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EncodesDepth", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v177 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v177)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"EncodesDepth\" \"\")), false)";
      int v27 = 3353;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EncodesDepth\" \"\")), false)";
    int v23 = 3353;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EnableVUI", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v178 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v178)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"EnableVUI\" \"\")), false)";
      int v27 = 3355;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableVUI\" \"\")), false)";
    int v23 = 3355;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EnableVUIBitstreamRestriction", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v179 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v179)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"EnableVUIBitstreamRestriction\" \"\")), false)";
      int v27 = 3356;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableVUIBitstreamRestriction\" \"\")), false)";
    int v23 = 3356;
    goto LABEL_795;
  }
  if (*v16 < 16) {
    goto LABEL_172;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_TemporalNoiseReduction, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v180 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v180)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_TemporalNois"
            "eReduction, false)";
      int v27 = 3360;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_TemporalNoiseR"
          "eduction, false)";
    int v23 = 3360;
    goto LABEL_795;
  }
  if (*v16 < 22) {
    goto LABEL_172;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"LRMEFSMVCostMode", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v181 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v181)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"LRMEFSMVCostMode\" \"\")), false)";
      int v27 = 3365;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"LRMEFSMVCostMode\" \"\")), false)";
    int v23 = 3365;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"LRMEFSLambdaLinear", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v182 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v182)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"LRMEFSLambdaLinear\" \"\")), false)";
      int v27 = 3366;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"LRMEFSLambdaLinear\" \"\")), false)";
    int v23 = 3366;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"MCTFEdgeCount", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v183 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v183)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"MCTFEdgeCount\" \"\")), false)";
      int v27 = 3367;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MCTFEdgeCount\" \"\")), false)";
    int v23 = 3367;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"MCTFEdgeThresh", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v184 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v184)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"MCTFEdgeThresh\" \"\")), false)";
      int v27 = 3368;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MCTFEdgeThresh\" \"\")), false)";
    int v23 = 3368;
    goto LABEL_795;
  }
LABEL_172:
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_MoreFramesAfterEnd, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v185 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v185)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_MoreFramesAfterEnd, false)";
      int v27 = 3372;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_MoreFramesAfterEnd, false)";
    int v23 = 3372;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_MoreFramesBeforeStart, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v186 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v186)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_MoreFramesBe"
            "foreStart, false)";
      int v27 = 3374;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_MoreFramesBeforeStart, false)";
    int v23 = 3374;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"RecommendedParallelizationLimit", 1))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v187 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v187)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"RecommendedParallelizationLimit\" \"\")), true)";
      int v27 = 3377;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"RecommendedParallelizationLimit\" \"\")), true)";
    int v23 = 3377;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Enumeration, @"RecommendedParallelizedSubdivisionMinimumDuration", 1))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v188 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v188)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStrin"
            "gMakeConstantString (\"\" \"RecommendedParallelizedSubdivisionMinimumDuration\" \"\")), true)";
      int v27 = 3380;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"RecommendedParallelizedSubdivisionMinimumDuration\" \"\")), true)";
    int v23 = 3380;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"RecommendedParallelizedSubdivisionMinimumFrameCount", 1))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v189 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v189)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"RecommendedParallelizedSubdivisionMinimumFrameCount\" \"\")), true)";
      int v27 = 3382;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"RecommendedParallelizedSubdivisionMinimumFrameCount\" \"\")), true)";
    int v23 = 3382;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"MotionEstimationSearchMode", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v190 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v190)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"MotionEstimationSearchMode\" \"\")), false)";
      int v27 = 3385;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MotionEstimationSearchMode\" \"\")), false)";
    int v23 = 3385;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Enumeration, @"SupportedMotionSearchModes", 1))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v191 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v191)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStrin"
            "gMakeConstantString (\"\" \"SupportedMotionSearchModes\" \"\")), true)";
      int v27 = 3387;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"SupportedMotionSearchModes\" \"\")), true)";
    int v23 = 3387;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"MaxEncoderPixelRate", 1))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v192 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v192)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"MaxEncoderPixelRate\" \"\")), true)";
      int v27 = 3390;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MaxEncoderPixelRate\" \"\")), true)";
    int v23 = 3390;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Enumeration, @"NumberOfCores", 1))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v193 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v193)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStrin"
            "gMakeConstantString (\"\" \"NumberOfCores\" \"\")), true)";
      int v27 = 3392;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"NumberOfCores\" \"\")), true)";
    int v23 = 3392;
    goto LABEL_795;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_Paravirtualized, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_870;
    }
    int v194 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (!v194)
    {
      __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_Paravirtualized, false)";
      int v27 = 3395;
      goto LABEL_869;
    }
    __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_Paravirtualized, false)";
    int v23 = 3395;
    goto LABEL_795;
  }
  if (sub_4A52C(theDict, kVTPropertyType_Number, @"DebugFeature", 0))
  {
    *a2 = theDict;
    *a3 = v8;
    goto LABEL_871;
  }
  if (sub_D1C38(3u, 4))
  {
    int v195 = sub_D1C7C(3u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(4);
    if (v195)
    {
      __uint64_t v22 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"DebugFeature\" \"\")), false)";
      int v23 = 3397;
      goto LABEL_795;
    }
    __uint64_t v26 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"DebugFeature\" \"\")), false)";
    int v27 = 3397;
LABEL_869:
    syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryCreateMutable failed.", v20, 3, v21, "AVE_CreateSupportedPropertyDictionary", v27, v26);
  }
LABEL_870:
  uint64_t v15 = 4294954392;
LABEL_871:
  if (sub_D1C38(0x14u, 7))
  {
    int v197 = sub_D1C7C(0x14u);
    __uint64_t v198 = sub_DDEFC();
    v199 = (const char *)sub_D1CB0(7);
    if (v197)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_CreateSupportedPropertyDictionary err %d \n", v198, 20, v199, v15);
      __uint64_t v200 = sub_DDEFC();
      v203 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_CreateSupportedPropertyDictionary err %d ", v200, 20, v203, v15);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_CreateSupportedPropertyDictionary err %d ", v198, 20, v199, v15);
    }
  }
  return v15;
}

uint64_t sub_19FF8(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (sub_D1C38(0x14u, 6))
  {
    int v3 = sub_D1C7C(0x14u);
    __uint64_t v4 = sub_DDEFC();
    int v5 = (const char *)sub_D1CB0(6);
    if (v3)
    {
      printf("%lld %d AVE %s: Enter %s %p\n", v4, 20, v5, "AVE_H264Invalidate", a1);
      __uint64_t v6 = sub_DDEFC();
      int v31 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: Enter %s %p", v6, 20, v31, "AVE_H264Invalidate", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Enter %s %p", v4, 20, v5, "AVE_H264Invalidate", a1);
    }
  }
  if (DerivedStorage)
  {
    __uint64_t v7 = (pthread_mutex_t *)(DerivedStorage + 25120);
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 25120));
    uint64_t v8 = *(void *)(DerivedStorage + 20368);
    __uint64_t v9 = sub_DDEFC();
    sub_C086C(v8, 4u, v9);
    if (*(_DWORD *)(DerivedStorage + 25184)) {
      *(void *)(DerivedStorage + 25192) = sub_DDEFC();
    }
    __uint64_t v35 = sub_DDEFC();
    if (*(_DWORD *)(DerivedStorage + 25108) == 30568
      && (uint64_t v10 = sub_B490C(*(void ***)(DerivedStorage + 24), &v35), v10))
    {
      uint64_t v11 = v10;
      if (sub_D1C38(3u, 4))
      {
        int v12 = sub_D1C7C(3u);
        __uint64_t v13 = sub_DDEFC();
        __uint64_t v14 = (const char *)sub_D1CB0(4);
        if (v12)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Complete failed 0x%x\n", v13, 3, v14, "AVE_H264Invalidate", 3642, "err == noErr", v11);
          __uint64_t v13 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Complete failed 0x%x", v13);
      }
    }
    else
    {
      if (*(_DWORD *)(DerivedStorage + 25184))
      {
        *(void *)(DerivedStorage + 25200) = sub_DDEFC();
        if (sub_D1C38(0x18u, 6))
        {
          int v15 = sub_D1C7C(0x18u);
          __uint64_t v16 = sub_DDEFC();
          int v17 = (const char *)sub_D1CB0(6);
          uint64_t v18 = *(void *)(DerivedStorage + 25200) - *(void *)(DerivedStorage + 25192);
          if (v15)
          {
            printf("%lld %d AVE %s: FIG: Invalidate took %lld us\n", v16, 24, v17, v18);
            __uint64_t v19 = sub_DDEFC();
            int v32 = (const char *)sub_D1CB0(6);
            syslog(3, "%lld %d AVE %s: FIG: Invalidate took %lld us", v19, 24, v32, *(void *)(DerivedStorage + 25200) - *(void *)(DerivedStorage + 25192));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: Invalidate took %lld us", v16, 24, v17, v18);
          }
        }
      }
      uint64_t v24 = *(void *)(DerivedStorage + 20368);
      __uint64_t v25 = sub_DDEFC();
      sub_C0C44(v24, 4u, v25);
      uint64_t v11 = 0;
    }
    pthread_mutex_unlock(v7);
  }
  else
  {
    if (sub_D1C38(3u, 4))
    {
      int v20 = sub_D1C7C(3u);
      __uint64_t v21 = sub_DDEFC();
      __uint64_t v22 = (const char *)sub_D1CB0(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v21, 3, v22, "AVE_H264Invalidate", 3621, "encoderPrivateStorage");
        __uint64_t v23 = sub_DDEFC();
        int v33 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v23, 3, v33, "AVE_H264Invalidate", 3621, "encoderPrivateStorage");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v21, 3, v22, "AVE_H264Invalidate", 3621, "encoderPrivateStorage");
      }
    }
    uint64_t v11 = 4294954384;
  }
  if (sub_D1C38(0x14u, 6))
  {
    int v26 = sub_D1C7C(0x14u);
    __uint64_t v27 = sub_DDEFC();
    int v28 = (const char *)sub_D1CB0(6);
    if (v26)
    {
      printf("%lld %d AVE %s: Exit %s %p %d\n", v27, 20, v28, "AVE_H264Invalidate", a1, v11);
      __uint64_t v29 = sub_DDEFC();
      int v34 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v29, 20, v34, "AVE_H264Invalidate", a1, v11);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v27, 20, v28, "AVE_H264Invalidate", a1, v11);
    }
  }
  return v11;
}

void sub_1A454(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (sub_D1C38(0x14u, 6))
  {
    int v3 = sub_D1C7C(0x14u);
    __uint64_t v4 = sub_DDEFC();
    int v5 = (const char *)sub_D1CB0(6);
    if (v3)
    {
      printf("%lld %d AVE %s: Enter %s %p\n", v4, 20, v5, "AVE_H264Finalize", a1);
      __uint64_t v6 = sub_DDEFC();
      int v39 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: Enter %s %p", v6, 20, v39, "AVE_H264Finalize", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Enter %s %p", v4, 20, v5, "AVE_H264Finalize", a1);
    }
  }
  if (DerivedStorage)
  {
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 25120));
    uint64_t v7 = *(void *)(DerivedStorage + 20368);
    __uint64_t v8 = sub_DDEFC();
    sub_C086C(v7, 1u, v8);
    if (*(_DWORD *)(DerivedStorage + 25184)) {
      *(void *)(DerivedStorage + 25192) = sub_DDEFC();
    }
    __uint64_t v9 = sub_DDEFC();
    if ((*(_DWORD *)(DerivedStorage + 25108) - 30567) <= 1)
    {
      __uint64_t v44 = v9;
      sub_B1E0C(*(void ***)(DerivedStorage + 24), (uint64_t *)&v44, 1);
    }
    int v10 = sub_AFB20(*(unsigned int **)(DerivedStorage + 24));
    *(void *)(DerivedStorage + 24) = 0;
    if (v10)
    {
      if (sub_D1C38(3u, 4))
      {
        int v11 = sub_D1C7C(3u);
        __uint64_t v12 = sub_DDEFC();
        __uint64_t v13 = (const char *)sub_D1CB0(4);
        if (v11)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Destroy failed.\n", v12, 3, v13, "AVE_H264Finalize", 3715, "err == noErr");
          __uint64_t v14 = sub_DDEFC();
          int v40 = (const char *)sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Destroy failed.", v14, 3, v40, "AVE_H264Finalize", 3715, "err == noErr");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Destroy failed.", v12, 3, v13, "AVE_H264Finalize", 3715, "err == noErr");
        }
      }
      int v24 = -12912;
    }
    else
    {
      if (*(_DWORD *)(DerivedStorage + 25184))
      {
        *(void *)(DerivedStorage + 25200) = sub_DDEFC();
        if (sub_D1C38(0x18u, 6))
        {
          int v19 = sub_D1C7C(0x18u);
          __uint64_t v20 = sub_DDEFC();
          __uint64_t v21 = (const char *)sub_D1CB0(6);
          uint64_t v22 = *(void *)(DerivedStorage + 25200) - *(void *)(DerivedStorage + 25192);
          if (v19)
          {
            printf("%lld %d AVE %s: FIG: Finalize took %lld us\n", v20, 24, v21, v22);
            __uint64_t v23 = sub_DDEFC();
            int v42 = (const char *)sub_D1CB0(6);
            syslog(3, "%lld %d AVE %s: FIG: Finalize took %lld us", v23, 24, v42, *(void *)(DerivedStorage + 25200) - *(void *)(DerivedStorage + 25192));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: Finalize took %lld us", v20, 24, v21, v22);
          }
        }
      }
      uint64_t v25 = *(void *)(DerivedStorage + 20368);
      __uint64_t v26 = sub_DDEFC();
      sub_C0C44(v25, 1u, v26);
      sub_C1018(*(void *)(DerivedStorage + 20368));
      sub_C13FC(*(unsigned int **)(DerivedStorage + 20368), 22, 6, 0, 0);
      int v24 = 0;
    }
    sub_C8E18();
    __uint64_t v27 = *(_OWORD **)(DerivedStorage + 20368);
    if (v27)
    {
      sub_C03A4(v27);
      *(void *)(DerivedStorage + 20368) = 0;
    }
    int v28 = *(const void **)(DerivedStorage + 26480);
    if (v28)
    {
      sub_4E9C(v28);
      sub_4178(*(void **)(DerivedStorage + 26480));
      *(void *)(DerivedStorage + 26480) = 0;
    }
    __uint64_t v29 = *(uint64_t **)(DerivedStorage + 25256);
    if (v29)
    {
      sub_8C08(v29);
      *(void *)(DerivedStorage + 25256) = 0;
    }
    int v30 = *(const void **)(DerivedStorage + 25264);
    if (v30)
    {
      CFRelease(v30);
      *(void *)(DerivedStorage + 25264) = 0;
    }
    int v31 = *(const void **)(DerivedStorage + 25224);
    if (v31)
    {
      CFRelease(v31);
      *(void *)(DerivedStorage + 25224) = 0;
    }
    int v32 = *(const void **)(DerivedStorage + 25328);
    if (v32)
    {
      CFRelease(v32);
      *(void *)(DerivedStorage + 25328) = 0;
    }
    int v33 = *(const void **)(DerivedStorage + 26488);
    if (v33)
    {
      CFRelease(v33);
      *(void *)(DerivedStorage + 26488) = 0;
    }
    int v34 = *(const void **)(DerivedStorage + 16);
    if (v34)
    {
      CFRelease(v34);
      *(void *)(DerivedStorage + 16) = 0;
    }
    sub_B020((const void *)(DerivedStorage + 26000));
    pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 25120));
    pthread_mutex_destroy((pthread_mutex_t *)(DerivedStorage + 25120));
  }
  else
  {
    if (sub_D1C38(3u, 4))
    {
      int v15 = sub_D1C7C(3u);
      __uint64_t v16 = sub_DDEFC();
      int v17 = (const char *)sub_D1CB0(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v16, 3, v17, "AVE_H264Finalize", 3683, "encoderPrivateStorage");
        __uint64_t v18 = sub_DDEFC();
        int v41 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v18, 3, v41, "AVE_H264Finalize", 3683, "encoderPrivateStorage");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v16, 3, v17, "AVE_H264Finalize", 3683, "encoderPrivateStorage");
      }
    }
    sub_C8E18();
    int v24 = -12912;
  }
  if (sub_D1C38(0x14u, 6))
  {
    int v35 = sub_D1C7C(0x14u);
    __uint64_t v36 = sub_DDEFC();
    int v37 = (const char *)sub_D1CB0(6);
    if (v35)
    {
      printf("%lld %d AVE %s: Exit %s %p %d\n", v36, 20, v37, "AVE_H264Finalize", a1, v24);
      __uint64_t v38 = sub_DDEFC();
      int v43 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v38, 20, v43, "AVE_H264Finalize", a1, v24);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v36, 20, v37, "AVE_H264Finalize", a1, v24);
    }
  }
}

uint64_t sub_1A930(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = DerivedStorage;
  if (DerivedStorage)
  {
    __uint64_t v9 = (_DWORD *)(DerivedStorage + 22148);
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 25120));
    if (sub_D1C38(0x1Eu, 8))
    {
      int v10 = sub_D1C7C(0x1Eu);
      __uint64_t v11 = sub_DDEFC();
      __uint64_t v12 = (const char *)sub_D1CB0(8);
      if (v10)
      {
        printf("%lld %d AVE %s: FIG: ENTER AVE_H264CopyProperty\n", v11, 30, v12);
        __uint64_t v13 = sub_DDEFC();
        v674 = (const char *)sub_D1CB0(8);
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_H264CopyProperty", v13, 30, v674);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_H264CopyProperty", v11, 30, v12);
      }
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_ThrottleForBackground))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v18 = sub_D1C7C(0x1Eu);
        __uint64_t v19 = sub_DDEFC();
        __uint64_t v20 = (const char *)sub_D1CB0(6);
        int v21 = *(unsigned __int8 *)(v8 + 25216);
        if (v18)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ThrottleForBackground return %u\n", v19, 30, v20, v21);
          __uint64_t v22 = sub_DDEFC();
          v676 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ThrottleForBackground return %u", v22, 30, v676, *(unsigned __int8 *)(v8 + 25216));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ThrottleForBackground return %u", v19, 30, v20, v21);
        }
      }
      int v28 = *(unsigned __int8 *)(v8 + 25216);
      goto LABEL_19;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_SourceFrameCount))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v23 = sub_D1C7C(0x1Eu);
        __uint64_t v24 = sub_DDEFC();
        uint64_t v25 = (const char *)sub_D1CB0(6);
        int v26 = *(_DWORD *)(v8 + 220);
        if (v23)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_SourceFrameCount return %u\n", v24, 30, v25, v26);
          __uint64_t v27 = sub_DDEFC();
          v677 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_SourceFrameCount return %u", v27, 30, v677, *(_DWORD *)(v8 + 220));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_SourceFrameCount return %u", v24, 30, v25, v26);
        }
      }
      int v34 = (uint64_t *)(v8 + 220);
      goto LABEL_29;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_ProfileLevel))
    {
      *a4 = CFStringCreateWithCString(0, (const char *)(v8 + 26000), 0);
      if (sub_D1C38(0x1Eu, 6))
      {
        int v31 = sub_D1C7C(0x1Eu);
        __uint64_t v32 = sub_DDEFC();
        int v33 = (const char *)sub_D1CB0(6);
        if (v31)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ProfileLevel return %s\n", v32, 30, v33, (const char *)(v8 + 26000));
          sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ProfileLevel return %s");
      }
      goto LABEL_38;
    }
    if (CFEqual(a2, @"EnableTransform8x8"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v38 = sub_D1C7C(0x1Eu);
        __uint64_t v39 = sub_DDEFC();
        int v40 = (const char *)sub_D1CB0(6);
        int v41 = *(unsigned __int8 *)(v8 + 22183);
        if (v38)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableTransform8x8 return %u\n", v39, 30, v40, v41);
          __uint64_t v42 = sub_DDEFC();
          v678 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableTransform8x8 return %u", v42, 30, v678, *(unsigned __int8 *)(v8 + 22183));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableTransform8x8 return %u", v39, 30, v40, v41);
        }
      }
      int v28 = *(unsigned __int8 *)(v8 + 22183);
      goto LABEL_19;
    }
    int v43 = (unsigned char *)(v8 + 18640);
    if (CFEqual(a2, @"EnableWeightedPrediction"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v44 = sub_D1C7C(0x1Eu);
        __uint64_t v45 = sub_DDEFC();
        int v46 = (const char *)sub_D1CB0(6);
        int v47 = *(unsigned __int8 *)(v8 + 18743);
        if (v44)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableWeightedPrediction return %u\n", v45, 30, v46, v47);
          __uint64_t v48 = sub_DDEFC();
          v679 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableWeightedPrediction return %u", v48, 30, v679, *(unsigned __int8 *)(v8 + 18743));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableWeightedPrediction return %u", v45, 30, v46, v47);
        }
      }
      int v28 = *(unsigned __int8 *)(v8 + 18743);
      goto LABEL_19;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_AverageBitRate))
    {
      int v49 = *(_DWORD *)(v8 + 192);
      LODWORD(v746) = v49;
      if (sub_D1C38(0x1Eu, 6))
      {
        int v50 = sub_D1C7C(0x1Eu);
        __uint64_t v51 = sub_DDEFC();
        int v52 = (const char *)sub_D1CB0(6);
        if (v50)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AverageBitRate return %d\n", v51, 30, v52, v49);
          sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AverageBitRate return %d");
      }
      goto LABEL_56;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_ColorPrimaries))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v53 = sub_D1C7C(0x1Eu);
        __uint64_t v54 = sub_DDEFC();
        int v55 = (const char *)sub_D1CB0(6);
        int v56 = *(_DWORD *)(v8 + 21484);
        if (v53)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ColorPrimaries return %d\n", v54, 30, v55, v56);
          __uint64_t v57 = sub_DDEFC();
          v680 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ColorPrimaries return %d", v57, 30, v680, *(_DWORD *)(v8 + 21484));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ColorPrimaries return %d", v54, 30, v55, v56);
        }
      }
      StringForIntegerCodePoint = (void *)CVColorPrimariesGetStringForIntegerCodePoint(*(_DWORD *)(v8 + 21484));
      goto LABEL_32;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_TransferFunction))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v58 = sub_D1C7C(0x1Eu);
        __uint64_t v59 = sub_DDEFC();
        int v60 = (const char *)sub_D1CB0(6);
        int v61 = *(_DWORD *)(v8 + 21488);
        if (v58)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_TransferFunction return %d\n", v59, 30, v60, v61);
          __uint64_t v62 = sub_DDEFC();
          v681 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_TransferFunction return %d", v62, 30, v681, *(_DWORD *)(v8 + 21488));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_TransferFunction return %d", v59, 30, v60, v61);
        }
      }
      StringForIntegerCodePoint = (void *)CVTransferFunctionGetStringForIntegerCodePoint(*(_DWORD *)(v8 + 21488));
      goto LABEL_32;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_YCbCrMatrix))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v63 = sub_D1C7C(0x1Eu);
        __uint64_t v64 = sub_DDEFC();
        int v65 = (const char *)sub_D1CB0(6);
        int v66 = *(_DWORD *)(v8 + 21492);
        if (v63)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_YCbCrMatrix return %d\n", v64, 30, v65, v66);
          __uint64_t v67 = sub_DDEFC();
          v682 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_YCbCrMatrix return %d", v67, 30, v682, *(_DWORD *)(v8 + 21492));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_YCbCrMatrix return %d", v64, 30, v65, v66);
        }
      }
      StringForIntegerCodePoint = (void *)CVYCbCrMatrixGetStringForIntegerCodePoint(*(_DWORD *)(v8 + 21492));
      goto LABEL_32;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_AllowFrameReordering))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v68 = sub_D1C7C(0x1Eu);
        __uint64_t v69 = sub_DDEFC();
        int v70 = (const char *)sub_D1CB0(6);
        if (*(unsigned char *)(v8 + 216)) {
          int v71 = "true";
        }
        else {
          int v71 = "false";
        }
        if (v68)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AllowFrameReordering return %s\n", v69, 30, v70, v71);
          __uint64_t v69 = sub_DDEFC();
          int v70 = (const char *)sub_D1CB0(6);
          if (*(unsigned char *)(v8 + 216)) {
            int v71 = "true";
          }
          else {
            int v71 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AllowFrameReordering return %s", v69, 30, v70, v71);
      }
      int v28 = *(unsigned __int8 *)(v8 + 216);
      goto LABEL_19;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_AllowTemporalCompression))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v72 = sub_D1C7C(0x1Eu);
        __uint64_t v73 = sub_DDEFC();
        int v74 = (const char *)sub_D1CB0(6);
        if (*(_DWORD *)(v8 + 2028) == 1) {
          int v75 = "FALSE";
        }
        else {
          int v75 = "TRUE";
        }
        if (v72)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AllowTemporalCompression return %s\n", v73, 30, v74, v75);
          __uint64_t v73 = sub_DDEFC();
          int v74 = (const char *)sub_D1CB0(6);
          if (*(_DWORD *)(v8 + 2028) == 1) {
            int v75 = "FALSE";
          }
          else {
            int v75 = "TRUE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AllowTemporalCompression return %s", v73, 30, v74, v75);
      }
      if (*(_DWORD *)(v8 + 2028) != 1) {
        goto LABEL_20;
      }
      goto LABEL_97;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_MaxKeyFrameInterval))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v76 = sub_D1C7C(0x1Eu);
        __uint64_t v77 = sub_DDEFC();
        int v78 = (const char *)sub_D1CB0(6);
        int v79 = *(_DWORD *)(v8 + 2028);
        if (v76)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxKeyFrameInterval return %u\n", v77, 30, v78, v79);
          __uint64_t v80 = sub_DDEFC();
          v683 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxKeyFrameInterval return %u", v80, 30, v683, *(_DWORD *)(v8 + 2028));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxKeyFrameInterval return %u", v77, 30, v78, v79);
        }
      }
      int v34 = (uint64_t *)(v8 + 2028);
      goto LABEL_29;
    }
    if (CFEqual(a2, @"StrictKeyFrameInterval"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v87 = sub_D1C7C(0x1Eu);
        __uint64_t v88 = sub_DDEFC();
        int v89 = (const char *)sub_D1CB0(6);
        int v90 = *(_DWORD *)(v8 + 2032);
        if (v87)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_StrictKeyFrameInterval return %u\n", v88, 30, v89, v90);
          __uint64_t v91 = sub_DDEFC();
          v685 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_StrictKeyFrameInterval return %u", v91, 30, v685, *(_DWORD *)(v8 + 2032));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_StrictKeyFrameInterval return %u", v88, 30, v89, v90);
        }
      }
      int v34 = (uint64_t *)(v8 + 2032);
      goto LABEL_29;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_ExpectedFrameRate))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v92 = sub_D1C7C(0x1Eu);
        __uint64_t v93 = sub_DDEFC();
        int v94 = (const char *)sub_D1CB0(6);
        int v95 = *(_DWORD *)(v8 + 228);
        if (v92)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ExpectedFrameRate return %u\n", v93, 30, v94, v95);
          __uint64_t v96 = sub_DDEFC();
          v686 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ExpectedFrameRate return %u", v96, 30, v686, *(_DWORD *)(v8 + 228));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ExpectedFrameRate return %u", v93, 30, v94, v95);
        }
      }
      int v34 = (uint64_t *)(v8 + 228);
      goto LABEL_29;
    }
    if (CFEqual(a2, @"MaximumRealTimeFrameRate"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v97 = sub_D1C7C(0x1Eu);
        __uint64_t v98 = sub_DDEFC();
        int v99 = (const char *)sub_D1CB0(6);
        int v100 = *(_DWORD *)(v8 + 20360);
        if (v97)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaximumRealTimeFrameRate return %d\n", v98, 30, v99, v100);
          __uint64_t v101 = sub_DDEFC();
          v687 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaximumRealTimeFrameRate return %d", v101, 30, v687, *(_DWORD *)(v8 + 20360));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaximumRealTimeFrameRate return %d", v98, 30, v99, v100);
        }
      }
      uint64_t v105 = 20360;
LABEL_131:
      int v34 = (uint64_t *)(v8 + v105);
      goto LABEL_29;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_ConstantBitRate))
    {
      LODWORD(v746) = 0;
      if (sub_D1C38(0x1Eu, 6))
      {
        int v102 = sub_D1C7C(0x1Eu);
        __uint64_t v103 = sub_DDEFC();
        int v104 = (const char *)sub_D1CB0(6);
        if (v102)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ConstantBitRate return %d\n", v103, 30, v104, *(_DWORD *)(v8 + 192));
          sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ConstantBitRate return %d");
      }
      goto LABEL_142;
    }
    if (CFEqual(a2, @"VariableBitRate"))
    {
      LODWORD(v746) = 0;
      if (sub_D1C38(0x1Eu, 6))
      {
        int v106 = sub_D1C7C(0x1Eu);
        __uint64_t v107 = sub_DDEFC();
        int v108 = (const char *)sub_D1CB0(6);
        if (v106)
        {
          printf("%lld %d AVE %s: asked for AVE_kVTCompressionPropertyKey_VariableBitRate return %d\n", v107, 30, v108, *(_DWORD *)(v8 + 192));
          sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: asked for AVE_kVTCompressionPropertyKey_VariableBitRate return %d");
      }
LABEL_142:
      int v114 = *(_DWORD *)(v8 + 192);
      if (v114 < 1)
      {
LABEL_56:
        int v34 = &v746;
LABEL_29:
        CFAllocatorRef v35 = a3;
LABEL_30:
        CFNumberType v36 = kCFNumberSInt32Type;
LABEL_31:
        StringForIntegerCodePoint = CFNumberCreate(v35, v36, v34);
        goto LABEL_32;
      }
LABEL_143:
      LODWORD(v746) = v114;
      goto LABEL_56;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_FrameRateTargetForAverageBitrate))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v109 = sub_D1C7C(0x1Eu);
        __uint64_t v110 = sub_DDEFC();
        int v111 = (const char *)sub_D1CB0(6);
        int v112 = *(_DWORD *)(v8 + 19464);
        if (v109)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_FrameRateTargetForAverageBitrate return %d\n", v110, 30, v111, v112);
          __uint64_t v113 = sub_DDEFC();
          v688 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_FrameRateTargetForAverageBitrate return %d", v113, 30, v688, *(_DWORD *)(v8 + 19464));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_FrameRateTargetForAverageBitrate return %d", v110, 30, v111, v112);
        }
      }
      LODWORD(v746) = 0;
      if (sub_D1C38(0x1Eu, 6))
      {
        int v123 = sub_D1C7C(0x1Eu);
        __uint64_t v124 = sub_DDEFC();
        int v125 = (const char *)sub_D1CB0(6);
        int v126 = *(_DWORD *)(v8 + 19464);
        if (v123)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_FrameRateTargetForAverageBitrate return %u\n", v124, 30, v125, v126);
          __uint64_t v127 = sub_DDEFC();
          v689 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_FrameRateTargetForAverageBitrate return %u", v127, 30, v689, *(_DWORD *)(v8 + 19464));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_FrameRateTargetForAverageBitrate return %u", v124, 30, v125, v126);
        }
      }
      int v114 = *(_DWORD *)(v8 + 19464);
      if (!v114) {
        goto LABEL_56;
      }
      goto LABEL_143;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_ExpectedDuration))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v115 = sub_D1C7C(0x1Eu);
        __uint64_t v116 = sub_DDEFC();
        int v117 = (const char *)sub_D1CB0(6);
        float v118 = *(double *)(v8 + 26248);
        double v119 = v118;
        if (v115)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ExpectedDuration return %f\n", v116, 30, v117, v119);
          __uint64_t v120 = sub_DDEFC();
          int v121 = (const char *)sub_D1CB0(6);
          float v122 = *(double *)(v8 + 26248);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ExpectedDuration return %f", v120, 30, v121, v122);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ExpectedDuration return %f", v116, 30, v117, v119);
        }
      }
      int v34 = (uint64_t *)(v8 + 26248);
LABEL_161:
      CFAllocatorRef v35 = a3;
      CFNumberType v36 = kCFNumberDoubleType;
      goto LABEL_31;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_DataRateLimits))
    {
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable(a3, 0, &kCFTypeArrayCallBacks);
      sub_DF05C((int *)(v8 + 1776), Mutable);
      goto LABEL_157;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_ConvergenceDurationForAverageDataRate))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v129 = sub_D1C7C(0x1Eu);
        __uint64_t v130 = sub_DDEFC();
        int v131 = (const char *)sub_D1CB0(6);
        int v132 = *(_DWORD *)(v8 + 26256);
        if (v129)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ConvergenceDurationForAverageDataRate return %u\n", v130, 30, v131, v132);
          __uint64_t v133 = sub_DDEFC();
          v690 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ConvergenceDurationForAverageDataRate return %u", v133, 30, v690, *(_DWORD *)(v8 + 26256));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ConvergenceDurationForAverageDataRate return %u", v130, 30, v131, v132);
        }
      }
      uint64_t v105 = 26256;
      goto LABEL_131;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v134 = sub_D1C7C(0x1Eu);
        __uint64_t v135 = sub_DDEFC();
        int v136 = (const char *)sub_D1CB0(6);
        float v137 = *(double *)(v8 + 2040);
        double v138 = v137;
        if (v134)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration return %f\n", v135, 30, v136, v138);
          __uint64_t v139 = sub_DDEFC();
          int v140 = (const char *)sub_D1CB0(6);
          float v141 = *(double *)(v8 + 2040);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration return %f", v139, 30, v140, v141);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration return %f", v135, 30, v136, v138);
        }
      }
      int v34 = (uint64_t *)(v8 + 2040);
      goto LABEL_161;
    }
    if (CFEqual(a2, @"StrictKeyFrameIntervalDuration"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v142 = sub_D1C7C(0x1Eu);
        __uint64_t v143 = sub_DDEFC();
        int v144 = (const char *)sub_D1CB0(6);
        float v145 = *(double *)(v8 + 2048);
        double v146 = v145;
        if (v142)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_StrictKeyFrameIntervalDuration return %f\n", v143, 30, v144, v146);
          __uint64_t v147 = sub_DDEFC();
          int v148 = (const char *)sub_D1CB0(6);
          float v149 = *(double *)(v8 + 2048);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_StrictKeyFrameIntervalDuration return %f", v147, 30, v148, v149);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_StrictKeyFrameIntervalDuration return %f", v143, 30, v144, v146);
        }
      }
      int v34 = (uint64_t *)(v8 + 2048);
      goto LABEL_161;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_Usage))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v150 = sub_D1C7C(0x1Eu);
        __uint64_t v151 = sub_DDEFC();
        int v152 = (const char *)sub_D1CB0(6);
        int v153 = *(_DWORD *)(v8 + 292);
        if (v150)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Usage return %u\n", v151, 30, v152, v153);
          __uint64_t v154 = sub_DDEFC();
          v691 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Usage return %u", v154, 30, v691, *(_DWORD *)(v8 + 292));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Usage return %u", v151, 30, v152, v153);
        }
      }
      int v34 = (uint64_t *)(v8 + 292);
      goto LABEL_29;
    }
    if (CFEqual(a2, @"BPictures"))
    {
      int v155 = *(_DWORD *)(v8 + 25100);
      if (v155 < 0) {
        int v155 = *(_DWORD *)(v8 + 1944);
      }
      LODWORD(v746) = v155;
      if (sub_D1C38(0x1Eu, 6))
      {
        int v156 = sub_D1C7C(0x1Eu);
        __uint64_t v157 = sub_DDEFC();
        int v158 = (const char *)sub_D1CB0(6);
        if (v156)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_BPictures return %d\n", v157, 30, v158, v155);
          sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_BPictures return %d");
      }
      goto LABEL_56;
    }
    if (CFEqual(a2, @"EnableAdaptB"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v159 = sub_D1C7C(0x1Eu);
        __uint64_t v160 = sub_DDEFC();
        int v161 = (const char *)sub_D1CB0(6);
        if ((*(unsigned char *)(v8 + 2024) & 4) != 0) {
          int v162 = "true";
        }
        else {
          int v162 = "false";
        }
        if (v159)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableAdaptB return %s\n", v160, 30, v161, v162);
          __uint64_t v160 = sub_DDEFC();
          int v161 = (const char *)sub_D1CB0(6);
          if ((*(_DWORD *)(v8 + 2024) & 4) != 0) {
            int v162 = "true";
          }
          else {
            int v162 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableAdaptB return %s", v160, 30, v161, v162);
      }
      if ((*(unsigned char *)(v8 + 2024) & 4) != 0) {
        goto LABEL_20;
      }
      goto LABEL_97;
    }
    if (CFEqual(a2, @"EnableCompleteGOP"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v163 = sub_D1C7C(0x1Eu);
        __uint64_t v164 = sub_DDEFC();
        int v165 = (const char *)sub_D1CB0(6);
        if ((*(unsigned char *)(v8 + 2024) & 2) != 0) {
          int v166 = "true";
        }
        else {
          int v166 = "false";
        }
        if (v163)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableCompleteGOP return %s\n", v164, 30, v165, v166);
          __uint64_t v164 = sub_DDEFC();
          int v165 = (const char *)sub_D1CB0(6);
          if ((*(_DWORD *)(v8 + 2024) & 2) != 0) {
            int v166 = "true";
          }
          else {
            int v166 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableCompleteGOP return %s", v164, 30, v165, v166);
      }
      if ((*(unsigned char *)(v8 + 2024) & 2) != 0) {
        goto LABEL_20;
      }
      goto LABEL_97;
    }
    if (CFEqual(a2, @"InitialQPI"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v167 = sub_D1C7C(0x1Eu);
        __uint64_t v168 = sub_DDEFC();
        int v169 = (const char *)sub_D1CB0(6);
        int v170 = *(_DWORD *)(v8 + 1824);
        if (v167)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQPI return %d\n", v168, 30, v169, v170);
          __uint64_t v171 = sub_DDEFC();
          v692 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQPI return %d", v171, 30, v692, *(_DWORD *)(v8 + 1824));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQPI return %d", v168, 30, v169, v170);
        }
      }
      int v34 = (uint64_t *)(v8 + 1824);
      goto LABEL_29;
    }
    if (CFEqual(a2, @"InitialQPP"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v172 = sub_D1C7C(0x1Eu);
        __uint64_t v173 = sub_DDEFC();
        int v174 = (const char *)sub_D1CB0(6);
        int v175 = *(_DWORD *)(v8 + 1828);
        if (v172)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQPP return %d\n", v173, 30, v174, v175);
          __uint64_t v176 = sub_DDEFC();
          v693 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQPP return %d", v176, 30, v693, *(_DWORD *)(v8 + 1828));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQPP return %d", v173, 30, v174, v175);
        }
      }
      int v34 = (uint64_t *)(v8 + 1828);
      goto LABEL_29;
    }
    if (CFEqual(a2, @"InitialQPB"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v177 = sub_D1C7C(0x1Eu);
        __uint64_t v178 = sub_DDEFC();
        int v179 = (const char *)sub_D1CB0(6);
        int v180 = *(_DWORD *)(v8 + 1832);
        if (v177)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQP return %d\n", v178, 30, v179, v180);
          __uint64_t v181 = sub_DDEFC();
          v694 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQP return %d", v181, 30, v694, *(_DWORD *)(v8 + 1832));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQP return %d", v178, 30, v179, v180);
        }
      }
      int v34 = (uint64_t *)(v8 + 1832);
      goto LABEL_29;
    }
    if (CFEqual(a2, @"EdgeReplication"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v182 = sub_D1C7C(0x1Eu);
        __uint64_t v183 = sub_DDEFC();
        int v184 = (const char *)sub_D1CB0(6);
        int v185 = *(_DWORD *)(v8 + 18868);
        if (v182)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EdgeReplication return %d\n", v183, 30, v184, v185);
          __uint64_t v186 = sub_DDEFC();
          v695 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EdgeReplication return %d", v186, 30, v695, *(_DWORD *)(v8 + 18868));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EdgeReplication return %d", v183, 30, v184, v185);
        }
      }
      uint64_t v105 = 18868;
      goto LABEL_131;
    }
    if (CFEqual(a2, kVTCompressionProperty_SoftMinQuantizationParameter))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v187 = sub_D1C7C(0x1Eu);
        __uint64_t v188 = sub_DDEFC();
        int v189 = (const char *)sub_D1CB0(6);
        int v190 = *(_DWORD *)(v8 + 1840);
        if (v187)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionProperty_SoftMinQuantizationParameter return %d\n", v188, 30, v189, v190);
          __uint64_t v191 = sub_DDEFC();
          v696 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionProperty_SoftMinQuantizationParameter return %d", v191, 30, v696, *(_DWORD *)(v8 + 1840));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionProperty_SoftMinQuantizationParameter return %d", v188, 30, v189, v190);
        }
      }
      int v34 = (uint64_t *)(v8 + 1840);
      goto LABEL_29;
    }
    if (CFEqual(a2, kVTCompressionProperty_SoftMaxQuantizationParameter))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v192 = sub_D1C7C(0x1Eu);
        __uint64_t v193 = sub_DDEFC();
        int v194 = (const char *)sub_D1CB0(6);
        int v195 = *(_DWORD *)(v8 + 1844);
        if (v192)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionProperty_SoftMaxQuantizationParameter return %d\n", v193, 30, v194, v195);
          __uint64_t v196 = sub_DDEFC();
          v697 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionProperty_SoftMaxQuantizationParameter return %d", v196, 30, v697, *(_DWORD *)(v8 + 1844));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionProperty_SoftMaxQuantizationParameter return %d", v193, 30, v194, v195);
        }
      }
      int v34 = (uint64_t *)(v8 + 1844);
      goto LABEL_29;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_MaxAllowedFrameQP))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v197 = sub_D1C7C(0x1Eu);
        __uint64_t v198 = sub_DDEFC();
        v199 = (const char *)sub_D1CB0(6);
        int v200 = *(_DWORD *)(v8 + 1852);
        if (v197)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxAllowedFrameQP return %d\n", v198, 30, v199, v200);
          __uint64_t v201 = sub_DDEFC();
          v698 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxAllowedFrameQP return %d", v201, 30, v698, *(_DWORD *)(v8 + 1852));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxAllowedFrameQP return %d", v198, 30, v199, v200);
        }
      }
      int v34 = (uint64_t *)(v8 + 1852);
      goto LABEL_29;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_MinAllowedFrameQP))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v202 = sub_D1C7C(0x1Eu);
        __uint64_t v203 = sub_DDEFC();
        v204 = (const char *)sub_D1CB0(6);
        int v205 = *(_DWORD *)(v8 + 1848);
        if (v202)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MinAllowedFrameQP return %d\n", v203, 30, v204, v205);
          __uint64_t v206 = sub_DDEFC();
          v699 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MinAllowedFrameQP return %d", v206, 30, v699, *(_DWORD *)(v8 + 1848));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MinAllowedFrameQP return %d", v203, 30, v204, v205);
        }
      }
      int v34 = (uint64_t *)(v8 + 1848);
      goto LABEL_29;
    }
    v207 = (unsigned char *)(v8 + 17877);
    if (CFEqual(a2, kVTCompressionPropertyKey_NumberOfSlices))
    {
      LODWORD(v746) = *(_DWORD *)(v8 + 18060);
      if (sub_D1C38(0x1Eu, 6))
      {
        int v208 = sub_D1C7C(0x1Eu);
        __uint64_t v209 = sub_DDEFC();
        v210 = (const char *)sub_D1CB0(6);
        if (v208)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_NumberOfSlices return %d\n", v209, 30, v210, *(_DWORD *)(v8 + 18060));
          sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_NumberOfSlices return %d");
      }
      goto LABEL_56;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_H264EntropyMode))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v211 = sub_D1C7C(0x1Eu);
        __uint64_t v212 = sub_DDEFC();
        v213 = (const char *)sub_D1CB0(6);
        if (*(_DWORD *)(v8 + 22108) == 1) {
          v214 = "CABAC";
        }
        else {
          v214 = "CAVLC";
        }
        if (v211)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_H264EntropyMode return %s\n", v212, 30, v213, v214);
          __uint64_t v212 = sub_DDEFC();
          v213 = (const char *)sub_D1CB0(6);
          if (*(_DWORD *)(v8 + 22108) == 1) {
            v214 = "CABAC";
          }
          else {
            v214 = "CAVLC";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_H264EntropyMode return %s", v212, 30, v213, v214);
      }
      int v220 = *(_DWORD *)(v8 + 25096);
      if (v220 == 1 || v220 && *(_DWORD *)(v8 + 22108) == 1)
      {
        uint64_t v29 = 0;
        int v30 = (const __CFString **)&kVTH264EntropyMode_CABAC;
      }
      else
      {
        uint64_t v29 = 0;
        int v30 = (const __CFString **)&kVTH264EntropyMode_CAVLC;
      }
LABEL_98:
      CFStringRef v81 = *v30;
LABEL_99:
      *a4 = v81;
      goto LABEL_100;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_Priority))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v215 = sub_D1C7C(0x1Eu);
        __uint64_t v216 = sub_DDEFC();
        v217 = (const char *)sub_D1CB0(6);
        int v218 = *(_DWORD *)(v8 + 1872);
        if (v215)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Priority return %d\n", v216, 30, v217, v218);
          __uint64_t v219 = sub_DDEFC();
          v700 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Priority return %d", v219, 30, v700, *(_DWORD *)(v8 + 1872));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Priority return %d", v216, 30, v217, v218);
        }
      }
      int v34 = (uint64_t *)(v8 + 1872);
      goto LABEL_29;
    }
    if (CFEqual(a2, @"DeblockingFiltering"))
    {
      int v221 = *(_DWORD *)(v8 + 22576);
      LODWORD(v746) = v221;
      if (sub_D1C38(0x1Eu, 6))
      {
        int v222 = sub_D1C7C(0x1Eu);
        __uint64_t v223 = sub_DDEFC();
        v224 = (const char *)sub_D1CB0(6);
        if (v222)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_DeblockingFiltering return %d\n", v223, 30, v224, v221);
          sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_DeblockingFiltering return %d");
      }
      goto LABEL_56;
    }
    if (CFEqual(a2, @"DebugMetadataSEI"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v225 = sub_D1C7C(0x1Eu);
        __uint64_t v226 = sub_DDEFC();
        v227 = (const char *)sub_D1CB0(6);
        if (*(unsigned char *)(v8 + 25218)) {
          v228 = "TRUE";
        }
        else {
          v228 = "FALSE";
        }
        if (v225)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_DebugMetadataSEI return %s\n", v226, 30, v227, v228);
          __uint64_t v226 = sub_DDEFC();
          v227 = (const char *)sub_D1CB0(6);
          if (*(unsigned char *)(v8 + 25218)) {
            v228 = "TRUE";
          }
          else {
            v228 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_DebugMetadataSEI return %s", v226, 30, v227, v228);
      }
      int v28 = *(unsigned __int8 *)(v8 + 25218);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"DebugMetadataSEIuseEPB"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v229 = sub_D1C7C(0x1Eu);
        __uint64_t v230 = sub_DDEFC();
        v231 = (const char *)sub_D1CB0(6);
        if (*(unsigned char *)(v8 + 25219)) {
          v232 = "TRUE";
        }
        else {
          v232 = "FALSE";
        }
        if (v229)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_DebugMetadataSEIuseEPB return %s\n", v230, 30, v231, v232);
          __uint64_t v230 = sub_DDEFC();
          v231 = (const char *)sub_D1CB0(6);
          if (*(unsigned char *)(v8 + 25219)) {
            v232 = "TRUE";
          }
          else {
            v232 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_DebugMetadataSEIuseEPB return %s", v230, 30, v231, v232);
      }
      int v28 = *(unsigned __int8 *)(v8 + 25219);
      goto LABEL_19;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_InputQueueMaxCount))
    {
      int v233 = *(_DWORD *)(v8 + 20176);
      LODWORD(v746) = v233;
      if (sub_D1C38(0x1Eu, 6))
      {
        int v234 = sub_D1C7C(0x1Eu);
        __uint64_t v235 = sub_DDEFC();
        v236 = (const char *)sub_D1CB0(6);
        if (v234)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_InputQueueMaxCount return %d\n", v235, 30, v236, v233);
          sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_InputQueueMaxCount return %d");
      }
      goto LABEL_56;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_AverageNonDroppableFrameRate))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v237 = sub_D1C7C(0x1Eu);
        __uint64_t v238 = sub_DDEFC();
        v239 = (const char *)sub_D1CB0(6);
        int v240 = *(_DWORD *)(v8 + 224);
        if (v237)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AverageNonDroppableFrameRate return %d\n", v238, 30, v239, v240);
          __uint64_t v241 = sub_DDEFC();
          v701 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AverageNonDroppableFrameRate return %d", v241, 30, v701, *(_DWORD *)(v8 + 224));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AverageNonDroppableFrameRate return %d", v238, 30, v239, v240);
        }
      }
      int v34 = (uint64_t *)(v8 + 224);
      goto LABEL_29;
    }
    if (CFEqual(a2, @"EnableUserQPForFacetime"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v242 = sub_D1C7C(0x1Eu);
        __uint64_t v243 = sub_DDEFC();
        v244 = (const char *)sub_D1CB0(6);
        if (*(unsigned char *)(v8 + 1864)) {
          v245 = "true";
        }
        else {
          v245 = "false";
        }
        if (v242)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableUserQPForFacetime return %s\n", v243, 30, v244, v245);
          __uint64_t v243 = sub_DDEFC();
          v244 = (const char *)sub_D1CB0(6);
          if (*(unsigned char *)(v8 + 1864)) {
            v245 = "true";
          }
          else {
            v245 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableUserQPForFacetime return %s", v243, 30, v244, v245);
      }
      int v28 = *(unsigned __int8 *)(v8 + 1864);
      goto LABEL_19;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_UserDPBFramesForFaceTime))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v246 = sub_D1C7C(0x1Eu);
        __uint64_t v247 = sub_DDEFC();
        v248 = (const char *)sub_D1CB0(6);
        if (v246)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserDPBFramesForFaceTime\n", v247, 30, v248);
          __uint64_t v249 = sub_DDEFC();
          v702 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserDPBFramesForFaceTime", v249, 30, v702);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserDPBFramesForFaceTime", v247, 30, v248);
        }
      }
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable(a3, 2 * *(int *)(v8 + 20212), &kCFTypeArrayCallBacks);
      if (!Mutable)
      {
        if (sub_D1C38(0x1Eu, 4))
        {
          int v628 = sub_D1C7C(0x1Eu);
          __uint64_t v629 = sub_DDEFC();
          v630 = (const char *)sub_D1CB0(4);
          if (v628)
          {
            printf("%lld %d AVE %s: FIG: CFArrayCreateMutable failed\n", v629, 30, v630);
            __uint64_t v631 = sub_DDEFC();
            v743 = (const char *)sub_D1CB0(4);
            syslog(3, "%lld %d AVE %s: FIG: CFArrayCreateMutable failed", v631, 30, v743);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: CFArrayCreateMutable failed", v629, 30, v630);
          }
        }
        uint64_t v29 = 4294954392;
        goto LABEL_158;
      }
      if (*(int *)(v8 + 20212) >= 1)
      {
        uint64_t v624 = 0;
        uint64_t v625 = v8 + 20216;
        do
        {
          CFNumberRef v626 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)v625);
          CFNumberRef v627 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(v625 + 68));
          CFArrayAppendValue(Mutable, v626);
          CFArrayAppendValue(Mutable, v627);
          if (v626) {
            CFRelease(v626);
          }
          if (v627) {
            CFRelease(v627);
          }
          ++v624;
          v625 += 4;
        }
        while (v624 < *(int *)(v8 + 20212));
      }
LABEL_157:
      uint64_t v29 = 0;
LABEL_158:
      *a4 = Mutable;
      goto LABEL_100;
    }
    if (CFEqual(a2, @"DPBRequirements"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v250 = sub_D1C7C(0x1Eu);
        __uint64_t v251 = sub_DDEFC();
        v252 = (const char *)sub_D1CB0(6);
        if (v250)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_DPBRequirements\n", v251, 30, v252);
          __uint64_t v253 = sub_DDEFC();
          v703 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_DPBRequirements", v253, 30, v703);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_DPBRequirements", v251, 30, v252);
        }
      }
      v486 = CFArrayCreateMutable(a3, (int)(*(_DWORD *)(v8 + 26152) << (*(_DWORD *)(v8 + 26148) != 0)), &kCFTypeArrayCallBacks);
      if (!v486)
      {
        if (sub_D1C38(0x1Eu, 4))
        {
          int v639 = sub_D1C7C(0x1Eu);
          __uint64_t v640 = sub_DDEFC();
          v641 = (const char *)sub_D1CB0(4);
          if (v639)
          {
            printf("%lld %d AVE %s: FIG: kVTCompressionPropertyKey_DPBRequirements CFArrayCreateMutable failed\n", v640, 30, v641);
            __uint64_t v642 = sub_DDEFC();
            v744 = (const char *)sub_D1CB0(4);
            syslog(3, "%lld %d AVE %s: FIG: kVTCompressionPropertyKey_DPBRequirements CFArrayCreateMutable failed", v642, 30, v744);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: kVTCompressionPropertyKey_DPBRequirements CFArrayCreateMutable failed", v640, 30, v641);
          }
        }
        uint64_t v29 = 4294954392;
        goto LABEL_1066;
      }
      LODWORD(v632) = *(_DWORD *)(v8 + 26152);
      if ((int)v632 >= 1)
      {
        uint64_t v633 = 0;
        v634 = (char *)(v8 + 20216);
        do
        {
          CFNumberRef v635 = CFNumberCreate(0, kCFNumberSInt32Type, v634);
          CFArrayAppendValue(v486, v635);
          if (v635) {
            CFRelease(v635);
          }
          ++v633;
          uint64_t v632 = *(int *)(v8 + 26152);
          v634 += 4;
        }
        while (v633 < v632);
      }
      uint64_t v29 = 0;
      if (!*(_DWORD *)(v8 + 26148) || (int)v632 < 1)
      {
LABEL_1066:
        *a4 = v486;
        goto LABEL_100;
      }
      uint64_t v636 = 0;
      v637 = (char *)(v8 + 20284);
      do
      {
        CFNumberRef v638 = CFNumberCreate(0, kCFNumberSInt32Type, v637);
        CFArrayAppendValue(v486, v638);
        if (v638) {
          CFRelease(v638);
        }
        ++v636;
        v637 += 4;
      }
      while (v636 < *(int *)(v8 + 26152));
LABEL_981:
      uint64_t v29 = 0;
      goto LABEL_1066;
    }
    if (CFEqual(a2, @"EnableUserRefForFacetime"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v254 = sub_D1C7C(0x1Eu);
        __uint64_t v255 = sub_DDEFC();
        v256 = (const char *)sub_D1CB0(6);
        if (*(unsigned char *)(v8 + 20352)) {
          v257 = "true";
        }
        else {
          v257 = "false";
        }
        if (v254)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableUserRefForFacetime return %s\n", v255, 30, v256, v257);
          __uint64_t v255 = sub_DDEFC();
          v256 = (const char *)sub_D1CB0(6);
          if (*(unsigned char *)(v8 + 20352)) {
            v257 = "true";
          }
          else {
            v257 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableUserRefForFacetime return %s", v255, 30, v256, v257);
      }
      int v28 = *(unsigned __int8 *)(v8 + 20352);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"UseHWTileOffsets"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v258 = sub_D1C7C(0x1Eu);
        __uint64_t v259 = sub_DDEFC();
        v260 = (const char *)sub_D1CB0(6);
        if (*(unsigned char *)(v8 + 18860)) {
          v261 = "true";
        }
        else {
          v261 = "false";
        }
        if (v258)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseHWTileOffsets return %s\n", v259, 30, v260, v261);
          __uint64_t v259 = sub_DDEFC();
          v260 = (const char *)sub_D1CB0(6);
          if (*(unsigned char *)(v8 + 18860)) {
            v261 = "true";
          }
          else {
            v261 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseHWTileOffsets return %s", v259, 30, v260, v261);
      }
      int v28 = *(unsigned __int8 *)(v8 + 18860);
      goto LABEL_19;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_MaxFrameDelayCount))
    {
      int v262 = *(_DWORD *)(v8 + 1944);
      if ((*(_DWORD *)(v8 + 1876) & 0xE0) != 0) {
        int v263 = 3;
      }
      else {
        int v263 = 0;
      }
      int v264 = v263 + v262;
      LODWORD(v746) = v263 + v262;
      if (sub_D1C38(0x1Eu, 6))
      {
        int v265 = sub_D1C7C(0x1Eu);
        __uint64_t v266 = sub_DDEFC();
        v267 = (const char *)sub_D1CB0(6);
        if (v265)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxFrameDelayCount return %d\n", v266, 30, v267, v264);
          sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxFrameDelayCount return %d");
      }
      goto LABEL_56;
    }
    if (CFEqual(a2, @"MaximizePowerEfficiency"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v268 = sub_D1C7C(0x1Eu);
        __uint64_t v269 = sub_DDEFC();
        v270 = (const char *)sub_D1CB0(6);
        if (*(unsigned char *)(v8 + 18861)) {
          v271 = "true";
        }
        else {
          v271 = "false";
        }
        if (v268)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MaximizePowerEfficiency return %s\n", v269, 30, v270, v271);
          __uint64_t v269 = sub_DDEFC();
          v270 = (const char *)sub_D1CB0(6);
          if (*(unsigned char *)(v8 + 18861)) {
            v271 = "true";
          }
          else {
            v271 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MaximizePowerEfficiency return %s", v269, 30, v270, v271);
      }
      int v28 = *(unsigned __int8 *)(v8 + 18861);
      goto LABEL_19;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_RealTime))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v272 = sub_D1C7C(0x1Eu);
        __uint64_t v273 = sub_DDEFC();
        v274 = (const char *)sub_D1CB0(6);
        int v275 = *(_DWORD *)(v8 + 264);
        if (v272)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RealTime return %d\n", v273, 30, v274, v275);
          __uint64_t v276 = sub_DDEFC();
          v704 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RealTime return %d", v276, 30, v704, *(_DWORD *)(v8 + 264));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RealTime return %d", v273, 30, v274, v275);
        }
      }
      int v28 = *(_DWORD *)(v8 + 264);
      if (v28 < 0) {
        goto LABEL_38;
      }
LABEL_19:
      if (v28)
      {
LABEL_20:
        uint64_t v29 = 0;
        int v30 = (const __CFString **)&kCFBooleanTrue;
        goto LABEL_98;
      }
      goto LABEL_97;
    }
    if (CFEqual(a2, @"EnableRCDriver"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v277 = sub_D1C7C(0x1Eu);
        __uint64_t v278 = sub_DDEFC();
        v279 = (const char *)sub_D1CB0(6);
        if (v277)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableRCDriver return %d\n", v278, 30, v279, *(_DWORD *)(v8 + 196));
          sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableRCDriver return %d");
      }
LABEL_868:
      int v34 = (uint64_t *)(v8 + 196);
      goto LABEL_29;
    }
    if (CFEqual(a2, @"EnableRCFW"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v280 = sub_D1C7C(0x1Eu);
        __uint64_t v281 = sub_DDEFC();
        v282 = (const char *)sub_D1CB0(6);
        if (v280)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableRCFW return %d\n", v281, 30, v282, *(_DWORD *)(v8 + 196));
          sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableRCFW return %d");
      }
      goto LABEL_868;
    }
    if (CFEqual(a2, @"RCMode"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v283 = sub_D1C7C(0x1Eu);
        __uint64_t v284 = sub_DDEFC();
        v285 = (const char *)sub_D1CB0(6);
        if (v283)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RCMode return %d\n", v284, 30, v285, *(_DWORD *)(v8 + 196));
          sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RCMode return %d");
      }
      goto LABEL_868;
    }
    if (CFEqual(a2, @"SpatialAdaptiveQPLevel"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v286 = sub_D1C7C(0x1Eu);
        __uint64_t v287 = sub_DDEFC();
        v288 = (const char *)sub_D1CB0(6);
        int v289 = *(_DWORD *)(v8 + 2012);
        if (v286)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SpatialAdaptiveQPLevel return %d\n", v287, 30, v288, v289);
          __uint64_t v290 = sub_DDEFC();
          v705 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SpatialAdaptiveQPLevel return %d", v290, 30, v705, *(_DWORD *)(v8 + 2012));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SpatialAdaptiveQPLevel return %d", v287, 30, v288, v289);
        }
      }
      int v34 = (uint64_t *)(v8 + 2012);
      goto LABEL_29;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_EnableQPModulation))
    {
      int v291 = *(unsigned __int8 *)(v8 + 18849);
      BOOL v292 = sub_D1C38(0x1Eu, 6);
      if (v291)
      {
        if (v292)
        {
          int v293 = sub_D1C7C(0x1Eu);
          __uint64_t v294 = sub_DDEFC();
          v295 = (const char *)sub_D1CB0(6);
          if (*(_DWORD *)(v8 + 196) == 3) {
            v296 = "TRUE";
          }
          else {
            v296 = "FALSE";
          }
          if (v293)
          {
            printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_EnableQPModulation return %s\n", v294, 30, v295, v296);
            __uint64_t v294 = sub_DDEFC();
            v295 = (const char *)sub_D1CB0(6);
            if (*(_DWORD *)(v8 + 196) == 3) {
              v296 = "TRUE";
            }
            else {
              v296 = "FALSE";
            }
          }
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_EnableQPModulation return %s", v294, 30, v295, v296);
        }
        if (*(_DWORD *)(v8 + 196) != 3) {
          goto LABEL_20;
        }
        goto LABEL_97;
      }
      if (v292)
      {
        uint64_t v29 = sub_D1C7C(0x1Eu);
        __uint64_t v643 = sub_DDEFC();
        v644 = (const char *)sub_D1CB0(6);
        if (!v29)
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for unsupported property kVTCompressionPropertyKey_EnableQPModulation", v645);
          goto LABEL_100;
        }
        printf("%lld %d AVE %s: FIG: asked for unsupported property kVTCompressionPropertyKey_EnableQPModulation\n", v643, 30, v644);
        sub_DDEFC();
        sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for unsupported property kVTCompressionPropertyKey_EnableQPModulation");
      }
LABEL_38:
      uint64_t v29 = 0;
      goto LABEL_100;
    }
    if (CFEqual(a2, @"EnableQPMod"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v297 = sub_D1C7C(0x1Eu);
        __uint64_t v298 = sub_DDEFC();
        v299 = (const char *)sub_D1CB0(6);
        if (*(unsigned char *)(v8 + 244)) {
          v300 = "TRUE";
        }
        else {
          v300 = "FALSE";
        }
        if (v297)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableQPMod return %s\n", v298, 30, v299, v300);
          __uint64_t v298 = sub_DDEFC();
          v299 = (const char *)sub_D1CB0(6);
          if (*(unsigned char *)(v8 + 244)) {
            v300 = "TRUE";
          }
          else {
            v300 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableQPMod return %s", v298, 30, v299, v300);
      }
      int v28 = *(unsigned __int8 *)(v8 + 244);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"EnableLambdaMod"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v301 = sub_D1C7C(0x1Eu);
        __uint64_t v302 = sub_DDEFC();
        v303 = (const char *)sub_D1CB0(6);
        int v304 = *(unsigned __int8 *)(v8 + 246);
        if (v301)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_EnableLambdaMod return %d\n", v302, 30, v303, v304);
          __uint64_t v305 = sub_DDEFC();
          v706 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_EnableLambdaMod return %d", v305, 30, v706, *(unsigned __int8 *)(v8 + 246));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_EnableLambdaMod return %d", v302, 30, v303, v304);
        }
      }
      int v28 = *(unsigned __int8 *)(v8 + 246);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"EnableVarianceQPMod"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v306 = sub_D1C7C(0x1Eu);
        __uint64_t v307 = sub_DDEFC();
        v308 = (const char *)sub_D1CB0(6);
        if (*(unsigned char *)(v8 + 247)) {
          v309 = "TRUE";
        }
        else {
          v309 = "FALSE";
        }
        if (v306)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableVarianceQPMod return %s\n", v307, 30, v308, v309);
          __uint64_t v307 = sub_DDEFC();
          v308 = (const char *)sub_D1CB0(6);
          if (*(unsigned char *)(v8 + 247)) {
            v309 = "TRUE";
          }
          else {
            v309 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableVarianceQPMod return %s", v307, 30, v308, v309);
      }
      int v28 = *(unsigned __int8 *)(v8 + 247);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"UseCAVLCBits"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v310 = sub_D1C7C(0x1Eu);
        __uint64_t v311 = sub_DDEFC();
        v312 = (const char *)sub_D1CB0(6);
        if (*(unsigned char *)(v8 + 253)) {
          v313 = "TRUE";
        }
        else {
          v313 = "FALSE";
        }
        if (v310)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseCAVLCBits return %s\n", v311, 30, v312, v313);
          __uint64_t v311 = sub_DDEFC();
          v312 = (const char *)sub_D1CB0(6);
          if (*(unsigned char *)(v8 + 253)) {
            v313 = "TRUE";
          }
          else {
            v313 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseCAVLCBits return %s", v311, 30, v312, v313);
      }
      int v28 = *(unsigned __int8 *)(v8 + 253);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"EnableStaticAreasLowQP"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v314 = sub_D1C7C(0x1Eu);
        __uint64_t v315 = sub_DDEFC();
        v316 = (const char *)sub_D1CB0(6);
        int v317 = *(_DWORD *)(v8 + 260);
        if (v314)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableStaticAreasLowQP return 0x%08x\n", v315, 30, v316, v317);
          __uint64_t v318 = sub_DDEFC();
          v707 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableStaticAreasLowQP return 0x%08x", v318, 30, v707, *(_DWORD *)(v8 + 260));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableStaticAreasLowQP return 0x%08x", v315, 30, v316, v317);
        }
      }
      int v34 = (uint64_t *)(v8 + 260);
      goto LABEL_29;
    }
    if (CFEqual(a2, @"LookAheadFrames"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v319 = sub_D1C7C(0x1Eu);
        __uint64_t v320 = sub_DDEFC();
        v321 = (const char *)sub_D1CB0(6);
        int v322 = *(_DWORD *)(v8 + 232);
        if (v319)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SuggestedLookAheadFrameCount return %d\n", v320, 30, v321, v322);
          __uint64_t v323 = sub_DDEFC();
          v708 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SuggestedLookAheadFrameCount return %d", v323, 30, v708, *(_DWORD *)(v8 + 232));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SuggestedLookAheadFrameCount return %d", v320, 30, v321, v322);
        }
      }
      CFAllocatorRef v35 = kCFAllocatorDefault;
      int v34 = (uint64_t *)(v8 + 232);
      goto LABEL_30;
    }
    if (CFEqual(a2, @"PreemptiveLoadBalancing"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v324 = sub_D1C7C(0x1Eu);
        __uint64_t v325 = sub_DDEFC();
        v326 = (const char *)sub_D1CB0(6);
        int v327 = *(_DWORD *)(v8 + 19480);
        if (v324)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_PreemptiveLoadBalancing return %d\n", v325, 30, v326, v327);
          __uint64_t v328 = sub_DDEFC();
          v709 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_PreemptiveLoadBalancing return %d", v328, 30, v709, *(_DWORD *)(v8 + 19480));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_PreemptiveLoadBalancing return %d", v325, 30, v326, v327);
        }
      }
      if (*(_DWORD *)(v8 + 19480) == 2) {
        goto LABEL_20;
      }
      goto LABEL_97;
    }
    if (CFEqual(a2, @"EnableAttachMVStats"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v329 = sub_D1C7C(0x1Eu);
        __uint64_t v330 = sub_DDEFC();
        v331 = (const char *)sub_D1CB0(6);
        int v332 = *(_DWORD *)(v8 + 18764);
        if (v329)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableAttachMVStats return %d\n", v330, 30, v331, v332);
          __uint64_t v333 = sub_DDEFC();
          v710 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableAttachMVStats return %d", v333, 30, v710, *(_DWORD *)(v8 + 18764));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableAttachMVStats return %d", v330, 30, v331, v332);
        }
      }
      uint64_t v105 = 18764;
      goto LABEL_131;
    }
    if (CFEqual(a2, @"UseAsyncFWScheduling"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v334 = sub_D1C7C(0x1Eu);
        __uint64_t v335 = sub_DDEFC();
        v336 = (const char *)sub_D1CB0(6);
        if (*(unsigned char *)(v8 + 18684)) {
          v337 = "TRUE";
        }
        else {
          v337 = "FALSE";
        }
        if (v334)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseAsyncFWScheduling return %s\n", v335, 30, v336, v337);
          __uint64_t v335 = sub_DDEFC();
          v336 = (const char *)sub_D1CB0(6);
          if (*(unsigned char *)(v8 + 18684)) {
            v337 = "TRUE";
          }
          else {
            v337 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseAsyncFWScheduling return %s", v335, 30, v336, v337);
      }
      int v28 = *(unsigned __int8 *)(v8 + 18684);
      goto LABEL_19;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_UsingHardwareAcceleratedVideoEncoder))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v338 = sub_D1C7C(0x1Eu);
        __uint64_t v339 = sub_DDEFC();
        v340 = (const char *)sub_D1CB0(6);
        if (v338)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UsingHardwareAcceleratedVideoEncoder return TRUE\n", v339, 30, v340);
          __uint64_t v341 = sub_DDEFC();
          v711 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UsingHardwareAcceleratedVideoEncoder return TRUE", v341, 30, v711);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UsingHardwareAcceleratedVideoEncoder return TRUE", v339, 30, v340);
        }
      }
      goto LABEL_20;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_MultiPassStorage))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v342 = sub_D1C7C(0x1Eu);
        __uint64_t v343 = sub_DDEFC();
        v344 = (const char *)sub_D1CB0(6);
        v345 = *(const void **)(v8 + 25264);
        if (v342)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MultiPassStorage return %p\n", v343, 30, v344, v345);
          __uint64_t v346 = sub_DDEFC();
          v712 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MultiPassStorage return %p", v346, 30, v712, *(const void **)(v8 + 25264));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MultiPassStorage return %p", v343, 30, v344, v345);
        }
      }
      v646 = *(const void **)(v8 + 25264);
      if (!v646)
      {
LABEL_997:
        uint64_t v29 = 0;
        *a4 = 0;
        goto LABEL_100;
      }
      StringForIntegerCodePoint = (void *)CFRetain(v646);
LABEL_32:
      uint64_t v29 = 0;
      *a4 = StringForIntegerCodePoint;
      goto LABEL_100;
    }
    v347 = (int *)(v8 + 18324);
    if (CFEqual(a2, @"SetMultiPassNum"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v348 = sub_D1C7C(0x1Eu);
        __uint64_t v349 = sub_DDEFC();
        v350 = (const char *)sub_D1CB0(6);
        int v351 = *(_DWORD *)(v8 + 18400);
        if (v348)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SetMultiPassNum return %d\n", v349, 30, v350, v351);
          __uint64_t v352 = sub_DDEFC();
          v713 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SetMultiPassNum return %d", v352, 30, v713, *(_DWORD *)(v8 + 18400));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SetMultiPassNum return %d", v349, 30, v350, v351);
        }
      }
      uint64_t v105 = 18400;
      goto LABEL_131;
    }
    if (CFEqual(a2, @"MultiPassConstantQP"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v353 = sub_D1C7C(0x1Eu);
        __uint64_t v354 = sub_DDEFC();
        v355 = (const char *)sub_D1CB0(6);
        int v356 = *(_DWORD *)(v8 + 18404);
        if (v353)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassConstantQP return %d\n", v354, 30, v355, v356);
          __uint64_t v357 = sub_DDEFC();
          v714 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassConstantQP return %d", v357, 30, v714, *(_DWORD *)(v8 + 18404));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassConstantQP return %d", v354, 30, v355, v356);
        }
      }
      uint64_t v105 = 18404;
      goto LABEL_131;
    }
    if (CFEqual(a2, @"MultiPassQPModLevel"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v358 = sub_D1C7C(0x1Eu);
        __uint64_t v359 = sub_DDEFC();
        v360 = (const char *)sub_D1CB0(6);
        int v361 = *(_DWORD *)(v8 + 18408);
        if (v358)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassQPModLevel return %d\n", v359, 30, v360, v361);
          __uint64_t v362 = sub_DDEFC();
          v715 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassQPModLevel return %d", v362, 30, v715, *(_DWORD *)(v8 + 18408));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassQPModLevel return %d", v359, 30, v360, v361);
        }
      }
      uint64_t v105 = 18408;
      goto LABEL_131;
    }
    if (CFEqual(a2, @"MultiPassMaxQPModLevel"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v363 = sub_D1C7C(0x1Eu);
        __uint64_t v364 = sub_DDEFC();
        v365 = (const char *)sub_D1CB0(6);
        int v366 = *(_DWORD *)(v8 + 18412);
        if (v363)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassMaxQPModLevel return %d\n", v364, 30, v365, v366);
          __uint64_t v367 = sub_DDEFC();
          v716 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassMaxQPModLevel return %d", v367, 30, v716, *(_DWORD *)(v8 + 18412));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassMaxQPModLevel return %d", v364, 30, v365, v366);
        }
      }
      uint64_t v105 = 18412;
      goto LABEL_131;
    }
    if (CFEqual(a2, @"MultiPassOptions"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v368 = sub_D1C7C(0x1Eu);
        __uint64_t v369 = sub_DDEFC();
        v370 = (const char *)sub_D1CB0(6);
        int v371 = *(_DWORD *)(v8 + 18416);
        if (v368)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassOptions return %d\n", v369, 30, v370, v371);
          __uint64_t v372 = sub_DDEFC();
          v717 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassOptions return %d", v372, 30, v717, *(_DWORD *)(v8 + 18416));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassOptions return %d", v369, 30, v370, v371);
        }
      }
      uint64_t v105 = 18416;
      goto LABEL_131;
    }
    if (CFEqual(a2, @"EnableStatsCollect"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v373 = sub_D1C7C(0x1Eu);
        __uint64_t v374 = sub_DDEFC();
        v375 = (const char *)sub_D1CB0(6);
        int v376 = *(_DWORD *)(v8 + 1920);
        if (v373)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableStatsCollect return %d\n", v374, 30, v375, v376);
          __uint64_t v377 = sub_DDEFC();
          v718 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableStatsCollect return %d", v377, 30, v718, *(_DWORD *)(v8 + 1920));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableStatsCollect return %d", v374, 30, v375, v376);
        }
      }
      int v34 = (uint64_t *)(v8 + 1920);
      goto LABEL_29;
    }
    if (CFEqual(a2, @"EnableContextSwitchInTheMiddle"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v378 = sub_D1C7C(0x1Eu);
        __uint64_t v379 = sub_DDEFC();
        v380 = (const char *)sub_D1CB0(6);
        if (*(unsigned char *)(v8 + 1925)) {
          v381 = "TRUE";
        }
        else {
          v381 = "FALSE";
        }
        if (v378)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableContextSwitchInTheMiddle return %s\n", v379, 30, v380, v381);
          __uint64_t v379 = sub_DDEFC();
          v380 = (const char *)sub_D1CB0(6);
          if (*(unsigned char *)(v8 + 1925)) {
            v381 = "TRUE";
          }
          else {
            v381 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableContextSwitchInTheMiddle return %s", v379, 30, v380, v381);
      }
      int v28 = *(unsigned __int8 *)(v8 + 1925);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"EnableMultiReferenceP"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v382 = sub_D1C7C(0x1Eu);
        __uint64_t v383 = sub_DDEFC();
        v384 = (const char *)sub_D1CB0(6);
        if (*(unsigned char *)(v8 + 18676)) {
          v385 = "TRUE";
        }
        else {
          v385 = "FALSE";
        }
        if (v382)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMultiReferenceP return %s\n", v383, 30, v384, v385);
          __uint64_t v383 = sub_DDEFC();
          v384 = (const char *)sub_D1CB0(6);
          if (*(unsigned char *)(v8 + 18676)) {
            v385 = "TRUE";
          }
          else {
            v385 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMultiReferenceP return %s", v383, 30, v384, v385);
      }
      int v28 = *(unsigned __int8 *)(v8 + 18676);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"MultiReferencePSpacing"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v386 = sub_D1C7C(0x1Eu);
        __uint64_t v387 = sub_DDEFC();
        v388 = (const char *)sub_D1CB0(6);
        int v389 = *(_DWORD *)(v8 + 18680);
        if (v386)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiReferencePSpacing return %d\n", v387, 30, v388, v389);
          __uint64_t v390 = sub_DDEFC();
          v719 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiReferencePSpacing return %d", v390, 30, v719, *(_DWORD *)(v8 + 18680));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiReferencePSpacing return %d", v387, 30, v388, v389);
        }
      }
      uint64_t v105 = 18680;
      goto LABEL_131;
    }
    if (CFEqual(a2, @"EnableSEITagInsertion"))
    {
      if (!sub_D1C38(0x1Eu, 6)) {
        goto LABEL_1072;
      }
      int v391 = sub_D1C7C(0x1Eu);
      __uint64_t v392 = sub_DDEFC();
      v393 = (const char *)sub_D1CB0(6);
      if (v391)
      {
        if (*(unsigned char *)(v8 + 18685) || *(unsigned char *)(v8 + 18686))
        {
          v394 = "TRUE";
        }
        else
        {
          v394 = "TRUE";
          if (!*(unsigned char *)(v8 + 18688) && !*(unsigned char *)(v8 + 18689)) {
            v394 = "FALSE";
          }
        }
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableSEITagInsertion return %s\n", v392, 30, v393, v394);
        __uint64_t v392 = sub_DDEFC();
        v393 = (const char *)sub_D1CB0(6);
        if (*(unsigned char *)(v8 + 18685)) {
          goto LABEL_925;
        }
      }
      else if (*(unsigned char *)(v8 + 18685))
      {
        goto LABEL_925;
      }
      if (!*(unsigned char *)(v8 + 18686))
      {
        v647 = "TRUE";
        if (!*(unsigned char *)(v8 + 18688) && !*(unsigned char *)(v8 + 18689)) {
          v647 = "FALSE";
        }
        goto LABEL_1071;
      }
LABEL_925:
      v647 = "TRUE";
LABEL_1071:
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableSEITagInsertion return %s", v392, 30, v393, v647);
LABEL_1072:
      if (*(unsigned char *)(v8 + 18685) || *(unsigned char *)(v8 + 18686) || *(unsigned char *)(v8 + 18688)) {
        goto LABEL_20;
      }
      int v28 = *(unsigned __int8 *)(v8 + 18689);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"EnableT35SEITagInsertion"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v395 = sub_D1C7C(0x1Eu);
        __uint64_t v396 = sub_DDEFC();
        v397 = (const char *)sub_D1CB0(6);
        if (*(unsigned char *)(v8 + 18694)) {
          v398 = "TRUE";
        }
        else {
          v398 = "FALSE";
        }
        if (v395)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableT35SEITagInsertion return %s\n", v396, 30, v397, v398);
          __uint64_t v396 = sub_DDEFC();
          v397 = (const char *)sub_D1CB0(6);
          if (*(unsigned char *)(v8 + 18694)) {
            v398 = "TRUE";
          }
          else {
            v398 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableT35SEITagInsertion return %s", v396, 30, v397, v398);
      }
      int v28 = *(unsigned __int8 *)(v8 + 18694);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"log2_max_minus4"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v399 = sub_D1C7C(0x1Eu);
        __uint64_t v400 = sub_DDEFC();
        v401 = (const char *)sub_D1CB0(6);
        int v402 = *(_DWORD *)(v8 + 21428);
        if (v399)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_log2_max_minus4 return %d\n", v400, 30, v401, v402);
          __uint64_t v403 = sub_DDEFC();
          v720 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_log2_max_minus4 return %d", v403, 30, v720, *(_DWORD *)(v8 + 21428));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_log2_max_minus4 return %d", v400, 30, v401, v402);
        }
      }
      uint64_t v105 = 21428;
      goto LABEL_131;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_EnsureTIJacinto4Compatibility))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v404 = sub_D1C7C(0x1Eu);
        __uint64_t v405 = sub_DDEFC();
        v406 = (const char *)sub_D1CB0(6);
        if (*v207) {
          v407 = "true";
        }
        else {
          v407 = "false";
        }
        if (v404)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_EnsureTIJacinto4Compatibility return %s\n", v405, 30, v406, v407);
          __uint64_t v405 = sub_DDEFC();
          v406 = (const char *)sub_D1CB0(6);
          if (*v207) {
            v407 = "true";
          }
          else {
            v407 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_EnsureTIJacinto4Compatibility return %s", v405, 30, v406, v407);
      }
      int v28 = *v207;
      goto LABEL_19;
    }
    if (CFEqual(a2, @"LowDelay"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v408 = sub_D1C7C(0x1Eu);
        __uint64_t v409 = sub_DDEFC();
        v410 = (const char *)sub_D1CB0(6);
        if (*(_DWORD *)(v8 + 2064)) {
          v411 = "true";
        }
        else {
          v411 = "false";
        }
        if (v408)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LowDelay return %s\n", v409, 30, v410, v411);
          __uint64_t v409 = sub_DDEFC();
          v410 = (const char *)sub_D1CB0(6);
          if (*(_DWORD *)(v8 + 2064)) {
            v411 = "true";
          }
          else {
            v411 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LowDelay return %s", v409, 30, v410, v411);
      }
      int v28 = *(_DWORD *)(v8 + 2064);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"AllowOpenGOP"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v412 = sub_D1C7C(0x1Eu);
        __uint64_t v413 = sub_DDEFC();
        v414 = (const char *)sub_D1CB0(6);
        if (*(unsigned char *)(v8 + 2024)) {
          v415 = "true";
        }
        else {
          v415 = "false";
        }
        if (v412)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllowOpenGOP return %s\n", v413, 30, v414, v415);
          __uint64_t v413 = sub_DDEFC();
          v414 = (const char *)sub_D1CB0(6);
          if (*(_DWORD *)(v8 + 2024)) {
            v415 = "true";
          }
          else {
            v415 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllowOpenGOP return %s", v413, 30, v414, v415);
      }
      if (*(unsigned char *)(v8 + 2024)) {
        goto LABEL_20;
      }
      goto LABEL_97;
    }
    if (CFEqual(a2, @"MotionEstimationSearchMode"))
    {
      *a4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, (const void *)(v8 + 26128));
      if (sub_D1C38(0x1Eu, 6))
      {
        int v416 = sub_D1C7C(0x1Eu);
        __uint64_t v417 = sub_DDEFC();
        v418 = (const char *)sub_D1CB0(6);
        if (v416)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MotionEstimationSearchMode return %d\n", v417, 30, v418, *(_DWORD *)(v8 + 26128));
          sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MotionEstimationSearchMode return %d");
      }
      goto LABEL_38;
    }
    if (CFEqual(a2, @"SupportedMotionSearchModes"))
    {
      v419 = sub_DB774(*(_DWORD *)(v8 + 25244), 1, 0);
      if (v419)
      {
        v420 = (int *)v419;
        v421 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
        if (v421)
        {
          CFMutableDictionaryRef Mutable = v421;
          uint64_t v422 = sub_BE600(v420 + 1, *v420, v421);
          uint64_t v29 = sub_DDE40(v422);
          if (sub_D1C38(0x1Eu, 6))
          {
            int v423 = sub_D1C7C(0x1Eu);
            __uint64_t v424 = sub_DDEFC();
            v425 = (const char *)sub_D1CB0(6);
            if (v423)
            {
              printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SupportedMotionSearchModes\n", v424, 30, v425);
              __uint64_t v426 = sub_DDEFC();
              v721 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SupportedMotionSearchModes", v426, 30, v721);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SupportedMotionSearchModes", v424, 30, v425);
            }
          }
          goto LABEL_158;
        }
        if (sub_D1C38(3u, 4))
        {
          int v653 = sub_D1C7C(3u);
          __uint64_t v649 = sub_DDEFC();
          v650 = (const char *)sub_D1CB0(4);
          if (v653)
          {
            v651 = "pArray != __null";
            int v652 = 10281;
            goto LABEL_944;
          }
          v672 = "pArray != __null";
          int v673 = 10281;
          goto LABEL_1078;
        }
      }
      else if (sub_D1C38(3u, 4))
      {
        int v648 = sub_D1C7C(3u);
        __uint64_t v649 = sub_DDEFC();
        v650 = (const char *)sub_D1CB0(4);
        if (v648)
        {
          v651 = "pSR != __null";
          int v652 = 10277;
LABEL_944:
          printf("%lld %d AVE %s: %s:%d %s | FIG: CFArrayCreateMutable failed.\n", v649, 3, v650, "AVE_H264CopyProperty", v652, v651);
          __uint64_t v654 = sub_DDEFC();
          v745 = (const char *)sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFArrayCreateMutable failed.", v654, 3, v745, "AVE_H264CopyProperty", v652, v651);
          goto LABEL_1079;
        }
        v672 = "pSR != __null";
        int v673 = 10277;
LABEL_1078:
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFArrayCreateMutable failed.", v649, 3, v650, "AVE_H264CopyProperty", v673, v672);
      }
LABEL_1079:
      uint64_t v29 = 4294954392;
      goto LABEL_100;
    }
    if (CFEqual(a2, @"UseElementaryStreamOutput"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v427 = sub_D1C7C(0x1Eu);
        __uint64_t v428 = sub_DDEFC();
        v429 = (const char *)sub_D1CB0(6);
        if (*v43) {
          v430 = "TRUE";
        }
        else {
          v430 = "FALSE";
        }
        if (v427)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseElementaryStreamOutput return %s\n", v428, 30, v429, v430);
          __uint64_t v428 = sub_DDEFC();
          v429 = (const char *)sub_D1CB0(6);
          if (*v43) {
            v430 = "TRUE";
          }
          else {
            v430 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseElementaryStreamOutput return %s", v428, 30, v429, v430);
      }
      int v28 = *v43;
      goto LABEL_19;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_InputPixelFormat))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v431 = sub_D1C7C(0x1Eu);
        __uint64_t v432 = sub_DDEFC();
        v433 = (const char *)sub_D1CB0(6);
        int v434 = *(_DWORD *)(v8 + 20416);
        if (v431)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_InputPixelFormat return %d\n", v432, 30, v433, v434);
          __uint64_t v435 = sub_DDEFC();
          v722 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_InputPixelFormat return %d", v435, 30, v722, *(_DWORD *)(v8 + 20416));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_InputPixelFormat return %d", v432, 30, v433, v434);
        }
      }
      int v655 = *(_DWORD *)(v8 + 20416);
      switch(v655)
      {
        case 3:
          if (*(_DWORD *)(v8 + 21476) == 1) {
            int v656 = 875836518;
          }
          else {
            int v656 = 875836534;
          }
          break;
        case 2:
          int v656 = 875704950;
          if (*(_DWORD *)(v8 + 21476) == 1) {
            int v656 = 875704934;
          }
          break;
        case 1:
          if (*(_DWORD *)(v8 + 21476) == 1) {
            int v656 = 875704422;
          }
          else {
            int v656 = 875704438;
          }
          break;
        default:
          StringForIntegerCodePoint = 0;
          goto LABEL_32;
      }
      LODWORD(v746) = v656;
      CFAllocatorRef v35 = kCFAllocatorDefault;
      int v34 = &v746;
      goto LABEL_30;
    }
    if (CFEqual(a2, @"FlatAreaLowQp"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v436 = sub_D1C7C(0x1Eu);
        __uint64_t v437 = sub_DDEFC();
        v438 = (const char *)sub_D1CB0(6);
        if (*(unsigned char *)(v8 + 255)) {
          v439 = "TRUE";
        }
        else {
          v439 = "FALSE";
        }
        if (v436)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_FlatAreaLowQp return %s\n", v437, 30, v438, v439);
          __uint64_t v437 = sub_DDEFC();
          v438 = (const char *)sub_D1CB0(6);
          if (*(unsigned char *)(v8 + 255)) {
            v439 = "TRUE";
          }
          else {
            v439 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_FlatAreaLowQp return %s", v437, 30, v438, v439);
      }
      int v28 = *(unsigned __int8 *)(v8 + 255);
      goto LABEL_19;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_PerceptualQualityOptimization))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v440 = sub_D1C7C(0x1Eu);
        __uint64_t v441 = sub_DDEFC();
        v442 = (const char *)sub_D1CB0(6);
        if (*(unsigned char *)(v8 + 257)) {
          v443 = "true";
        }
        else {
          v443 = "false";
        }
        if (v440)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_PerceptualQualityOptimization return %s\n", v441, 30, v442, v443);
          __uint64_t v441 = sub_DDEFC();
          v442 = (const char *)sub_D1CB0(6);
          if (*(unsigned char *)(v8 + 257)) {
            v443 = "true";
          }
          else {
            v443 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_PerceptualQualityOptimization return %s", v441, 30, v442, v443);
      }
      int v28 = *(unsigned __int8 *)(v8 + 257);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"LrmePipeSyncMode"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v444 = sub_D1C7C(0x1Eu);
        __uint64_t v445 = sub_DDEFC();
        v446 = (const char *)sub_D1CB0(6);
        if (*(unsigned char *)(v8 + 17881)) {
          v447 = "true";
        }
        else {
          v447 = "false";
        }
        if (v444)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LrmePipeSyncMode return %s\n", v445, 30, v446, v447);
          __uint64_t v445 = sub_DDEFC();
          v446 = (const char *)sub_D1CB0(6);
          if (*(unsigned char *)(v8 + 17881)) {
            v447 = "true";
          }
          else {
            v447 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LrmePipeSyncMode return %s", v445, 30, v446, v447);
      }
      int v28 = *(unsigned __int8 *)(v8 + 17881);
      goto LABEL_19;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_VideoResolutionAdaptation))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v448 = sub_D1C7C(0x1Eu);
        __uint64_t v449 = sub_DDEFC();
        v450 = (const char *)sub_D1CB0(6);
        int v451 = (*(_DWORD *)(v8 + 200) >> 5) & 1;
        if (v448)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_VideoResolutionAdaptation return %d\n", v449, 30, v450, v451);
          __uint64_t v452 = sub_DDEFC();
          v723 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_VideoResolutionAdaptation return %d", v452, 30, v723, (*(_DWORD *)(v8 + 200) >> 5) & 1);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_VideoResolutionAdaptation return %d", v449, 30, v450, v451);
        }
      }
      if ((*(unsigned char *)(v8 + 200) & 0x20) != 0) {
        goto LABEL_20;
      }
      goto LABEL_97;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_VideoResolutionAdaptationType))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v453 = sub_D1C7C(0x1Eu);
        __uint64_t v454 = sub_DDEFC();
        v455 = (const char *)sub_D1CB0(6);
        int v456 = *(_DWORD *)(v8 + 20356);
        if (v453)
        {
          printf("%lld %d AVE %s: asked for kVTCompressionPropertyKey_VideoResolutionAdaptationType return %d\n", v454, 30, v455, v456);
          __uint64_t v457 = sub_DDEFC();
          v724 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: asked for kVTCompressionPropertyKey_VideoResolutionAdaptationType return %d", v457, 30, v724, *(_DWORD *)(v8 + 20356));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: asked for kVTCompressionPropertyKey_VideoResolutionAdaptationType return %d", v454, 30, v455, v456);
        }
      }
      uint64_t v105 = 20356;
      goto LABEL_131;
    }
    if (CFEqual(a2, @"UseLongTermReference"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v458 = sub_D1C7C(0x1Eu);
        __uint64_t v459 = sub_DDEFC();
        v460 = (const char *)sub_D1CB0(6);
        int v461 = (*(_DWORD *)(v8 + 200) >> 4) & 1;
        if (v458)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseLongTermReference return %d\n", v459, 30, v460, v461);
          __uint64_t v462 = sub_DDEFC();
          v725 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseLongTermReference return %d", v462, 30, v725, (*(_DWORD *)(v8 + 200) >> 4) & 1);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseLongTermReference return %d", v459, 30, v460, v461);
        }
      }
      if ((*(unsigned char *)(v8 + 200) & 0x10) != 0) {
        goto LABEL_20;
      }
      goto LABEL_97;
    }
    if (CFEqual(a2, @"CodedBuffersOverride"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v463 = sub_D1C7C(0x1Eu);
        __uint64_t v464 = sub_DDEFC();
        v465 = (const char *)sub_D1CB0(6);
        int v466 = *(_DWORD *)(v8 + 20192);
        if (v463)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_CodedBuffersOverride return %d\n", v464, 30, v465, v466);
          __uint64_t v467 = sub_DDEFC();
          v726 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_CodedBuffersOverride return %d", v467, 30, v726, *(_DWORD *)(v8 + 20192));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_CodedBuffersOverride return %d", v464, 30, v465, v466);
        }
      }
      uint64_t v105 = 20192;
      goto LABEL_131;
    }
    if (CFEqual(a2, @"EnableMBInputCtrl"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v468 = sub_D1C7C(0x1Eu);
        __uint64_t v469 = sub_DDEFC();
        v470 = (const char *)sub_D1CB0(6);
        if (*(unsigned char *)(v8 + 1924)) {
          v471 = "true";
        }
        else {
          v471 = "false";
        }
        if (v468)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMBInputCtrl return %s\n", v469, 30, v470, v471);
          __uint64_t v469 = sub_DDEFC();
          v470 = (const char *)sub_D1CB0(6);
          if (*(unsigned char *)(v8 + 1924)) {
            v471 = "true";
          }
          else {
            v471 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMBInputCtrl return %s", v469, 30, v470, v471);
      }
      int v28 = *(unsigned __int8 *)(v8 + 1924);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"HierarchicalB"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v472 = sub_D1C7C(0x1Eu);
        __uint64_t v473 = sub_DDEFC();
        v474 = (const char *)sub_D1CB0(6);
        int v475 = *(_DWORD *)(v8 + 17948);
        if (v472)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_HierarchicalB return %u\n", v473, 30, v474, v475);
          __uint64_t v476 = sub_DDEFC();
          v727 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_HierarchicalB return %u", v476, 30, v727, *(_DWORD *)(v8 + 17948));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_HierarchicalB return %u", v473, 30, v474, v475);
        }
      }
      if (*(_DWORD *)(v8 + 17948) == 1) {
        goto LABEL_20;
      }
      goto LABEL_97;
    }
    if (CFEqual(a2, @"AllowGapsInFrameNum"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v477 = sub_D1C7C(0x1Eu);
        __uint64_t v478 = sub_DDEFC();
        v479 = (const char *)sub_D1CB0(6);
        int v480 = *(unsigned __int8 *)(v8 + 21448);
        if (v477)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllowGapsInFrameNum return %u\n", v478, 30, v479, v480);
          __uint64_t v481 = sub_DDEFC();
          v728 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllowGapsInFrameNum return %u", v481, 30, v728, *(unsigned __int8 *)(v8 + 21448));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllowGapsInFrameNum return %u", v478, 30, v479, v480);
        }
      }
      int v28 = *(unsigned __int8 *)(v8 + 21448);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"EnableCrcQpModMode"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v482 = sub_D1C7C(0x1Eu);
        __uint64_t v483 = sub_DDEFC();
        v484 = (const char *)sub_D1CB0(6);
        if (*(unsigned char *)(v8 + 250)) {
          v485 = "TRUE";
        }
        else {
          v485 = "FALSE";
        }
        if (v482)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableCrcQpModMode return %s\n", v483, 30, v484, v485);
          __uint64_t v483 = sub_DDEFC();
          v484 = (const char *)sub_D1CB0(6);
          if (*(unsigned char *)(v8 + 250)) {
            v485 = "TRUE";
          }
          else {
            v485 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableCrcQpModMode return %s", v483, 30, v484, v485);
      }
      int v28 = *(unsigned __int8 *)(v8 + 250);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"ChromaQpOffset"))
    {
      v486 = CFArrayCreateMutable(a3, 0, &kCFTypeArrayCallBacks);
      CFNumberRef v487 = CFNumberCreate(a3, kCFNumberSInt32Type, (const void *)(v8 + 22148));
      CFNumberRef v488 = CFNumberCreate(a3, kCFNumberSInt32Type, (const void *)(v8 + 22188));
      CFArrayAppendValue(v486, v487);
      CFArrayAppendValue(v486, v488);
      if (v487) {
        CFRelease(v487);
      }
      if (v488) {
        CFRelease(v488);
      }
      if (sub_D1C38(0x1Eu, 6))
      {
        int v489 = sub_D1C7C(0x1Eu);
        __uint64_t v490 = sub_DDEFC();
        v491 = (const char *)sub_D1CB0(6);
        int v492 = *(_DWORD *)(v8 + 22188);
        if (v489)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ChromaQpOffset return %d %d\n", v490, 30, v491, *v9, v492);
          __uint64_t v493 = sub_DDEFC();
          v494 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ChromaQpOffset return %d %d", v493, 30, v494, *v9, *(_DWORD *)(v8 + 22188));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ChromaQpOffset return %d %d", v490, 30, v491, *v9, v492);
        }
      }
      goto LABEL_981;
    }
    if (CFEqual(a2, @"ChromaQPIndexOffsetMultiPPS"))
    {
      v486 = CFArrayCreateMutable(a3, 0, &kCFTypeArrayCallBacks);
      if (2 * *(_DWORD *)(v8 + 18052) - 2 >= 1)
      {
        uint64_t v495 = 0;
        v496 = (_DWORD *)(v8 + 22152);
        do
        {
          CFNumberRef v497 = CFNumberCreate(a3, kCFNumberSInt32Type, v496);
          CFNumberRef v498 = CFNumberCreate(a3, kCFNumberSInt32Type, v496 + 10);
          CFArrayAppendValue(v486, v497);
          CFArrayAppendValue(v486, v498);
          if (v497) {
            CFRelease(v497);
          }
          if (v498) {
            CFRelease(v498);
          }
          if (sub_D1C38(0x1Eu, 6))
          {
            int v499 = sub_D1C7C(0x1Eu);
            __uint64_t v500 = sub_DDEFC();
            v501 = (const char *)sub_D1CB0(6);
            int v502 = *v496;
            int v503 = v496[10];
            if (v499)
            {
              printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ChromaQPIndexOffsetMultiPPS return %d %d\n", v500, 30, v501, *v496, v503);
              __uint64_t v500 = sub_DDEFC();
              v501 = (const char *)sub_D1CB0(6);
              int v502 = *v496;
              int v503 = v496[10];
            }
            syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ChromaQPIndexOffsetMultiPPS return %d %d", v500, 30, v501, v502, v503);
          }
          ++v495;
          ++v496;
        }
        while (v495 < 2 * *(_DWORD *)(v8 + 18052) - 2);
      }
      goto LABEL_981;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_QuantizationScalingMatrixPreset))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v504 = sub_D1C7C(0x1Eu);
        __uint64_t v505 = sub_DDEFC();
        v506 = (const char *)sub_D1CB0(6);
        int v507 = *(_DWORD *)(v8 + 20436);
        if (v504)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_QuantizationScalingMatrixPreset return %d\n", v505, 30, v506, v507);
          __uint64_t v508 = sub_DDEFC();
          v729 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_QuantizationScalingMatrixPreset return %d", v508, 30, v729, *(_DWORD *)(v8 + 20436));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_QuantizationScalingMatrixPreset return %d", v505, 30, v506, v507);
        }
      }
      StringForIntegerCodePoint = 0;
      switch(*(_DWORD *)(v8 + 20436))
      {
        case 0:
          int v114 = 2;
          goto LABEL_143;
        case 1:
          int v114 = 1;
          goto LABEL_143;
        case 5:
          int v114 = 7;
          goto LABEL_143;
        case 6:
          int v114 = 6;
          goto LABEL_143;
        case 7:
          int v114 = 3;
          goto LABEL_143;
        default:
          goto LABEL_32;
      }
      goto LABEL_32;
    }
    if (CFEqual(a2, @"AllocMaxOpBuffer"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v509 = sub_D1C7C(0x1Eu);
        __uint64_t v510 = sub_DDEFC();
        v511 = (const char *)sub_D1CB0(6);
        int v512 = *(unsigned __int8 *)(v8 + 20200);
        if (v509)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllocMaxOpBuffer return %u\n", v510, 30, v511, v512);
          __uint64_t v513 = sub_DDEFC();
          v730 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllocMaxOpBuffer return %u", v513, 30, v730, *(unsigned __int8 *)(v8 + 20200));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllocMaxOpBuffer return %u", v510, 30, v511, v512);
        }
      }
      if (*(unsigned char *)(v8 + 20200)) {
        goto LABEL_20;
      }
      goto LABEL_97;
    }
    if (CFEqual(a2, @"AllocCodedBufferHalfSize"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v514 = sub_D1C7C(0x1Eu);
        __uint64_t v515 = sub_DDEFC();
        v516 = (const char *)sub_D1CB0(6);
        int v517 = *(_DWORD *)(v8 + 20204);
        if (v514)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllocCodedBufferHalfSize return %u\n", v515, 30, v516, v517);
          __uint64_t v518 = sub_DDEFC();
          v731 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllocCodedBufferHalfSize return %u", v518, 30, v731, *(_DWORD *)(v8 + 20204));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllocCodedBufferHalfSize return %u", v515, 30, v516, v517);
        }
      }
      if (*(_DWORD *)(v8 + 20204) == 50) {
        goto LABEL_20;
      }
      goto LABEL_97;
    }
    if (CFEqual(a2, @"EnableMultiSliceStats"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v519 = sub_D1C7C(0x1Eu);
        __uint64_t v520 = sub_DDEFC();
        v521 = (const char *)sub_D1CB0(6);
        int v522 = *(unsigned __int8 *)(v8 + 18320);
        if (v519)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMultiSliceStats return %u\n", v520, 30, v521, v522);
          __uint64_t v523 = sub_DDEFC();
          v732 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMultiSliceStats return %u", v523, 30, v732, *(unsigned __int8 *)(v8 + 18320));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMultiSliceStats return %u", v520, 30, v521, v522);
        }
      }
      if (*(unsigned char *)(v8 + 18320)) {
        goto LABEL_20;
      }
      goto LABEL_97;
    }
    if (CFEqual(a2, @"iChatUsageString"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v524 = sub_D1C7C(0x1Eu);
        __uint64_t v525 = sub_DDEFC();
        v526 = (const char *)sub_D1CB0(6);
        int v527 = *(_DWORD *)(v8 + 18792);
        if (v524)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_iChatUsageString return %u\n", v525, 30, v526, v527);
          __uint64_t v528 = sub_DDEFC();
          v733 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_iChatUsageString return %u", v528, 30, v733, *(_DWORD *)(v8 + 18792));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_iChatUsageString return %u", v525, 30, v526, v527);
        }
      }
      switch(*(_DWORD *)(v8 + 18792))
      {
        case 0:
          uint64_t v29 = 0;
          CFStringRef v81 = @"FaceTime";
          goto LABEL_99;
        case 1:
          uint64_t v29 = 0;
          CFStringRef v81 = @"CarPlay";
          goto LABEL_99;
        case 2:
          uint64_t v29 = 0;
          CFStringRef v81 = @"AirPlay";
          goto LABEL_99;
        case 3:
          uint64_t v29 = 0;
          CFStringRef v81 = @"SafeView";
          goto LABEL_99;
        case 4:
          uint64_t v29 = 0;
          CFStringRef v81 = @"ScreenSharing";
          goto LABEL_99;
        case 5:
          uint64_t v29 = 0;
          CFStringRef v81 = @"MediaAnalysis";
          goto LABEL_99;
        case 7:
          uint64_t v29 = 0;
          CFStringRef v81 = @"SideCar";
          goto LABEL_99;
        default:
          goto LABEL_997;
      }
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_UserParameterSetsIds))
    {
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable(a3, 0, &kCFTypeArrayCallBacks);
      v529 = (int *)(v8 + 20412);
      CFNumberRef v530 = CFNumberCreate(a3, kCFNumberSInt32Type, (const void *)(v8 + 20412));
      CFArrayAppendValue(Mutable, v530);
      if (v530) {
        CFRelease(v530);
      }
      if (sub_D1C38(0x1Eu, 6))
      {
        int v531 = sub_D1C7C(0x1Eu);
        __uint64_t v532 = sub_DDEFC();
        v533 = (const char *)sub_D1CB0(6);
        int v534 = *v529;
        if (v531)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserParameterSetsIds return %d\n", v532, 30, v533, v534);
          __uint64_t v535 = sub_DDEFC();
          v734 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserParameterSetsIds return %d", v535, 30, v734, *v529);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserParameterSetsIds return %d", v532, 30, v533, v534);
        }
      }
      if (*(int *)(v8 + 18052) >= 1)
      {
        uint64_t v657 = 0;
        v658 = (_DWORD *)(v8 + 18016);
        do
        {
          CFNumberRef v659 = CFNumberCreate(a3, kCFNumberSInt32Type, v658);
          CFArrayAppendValue(Mutable, v659);
          if (v659) {
            CFRelease(v659);
          }
          if (sub_D1C38(0x1Eu, 6))
          {
            int v660 = sub_D1C7C(0x1Eu);
            __uint64_t v661 = sub_DDEFC();
            v662 = (const char *)sub_D1CB0(6);
            int v663 = *v658;
            if (v660)
            {
              printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserParameterSetsIds return %d\n", v661, 30, v662, v663);
              __uint64_t v661 = sub_DDEFC();
              v662 = (const char *)sub_D1CB0(6);
              int v663 = *v658;
            }
            syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserParameterSetsIds return %d", v661, 30, v662, v663);
          }
          ++v657;
          ++v658;
        }
        while (v657 < *(int *)(v8 + 18052));
      }
      goto LABEL_157;
    }
    if (CFEqual(a2, @"UseReferenceCompressedBuffers"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v536 = sub_D1C7C(0x1Eu);
        __uint64_t v537 = sub_DDEFC();
        v538 = (const char *)sub_D1CB0(6);
        int v539 = *(unsigned __int8 *)(v8 + 18013);
        if (v536)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseReferenceCompressedBuffers return %u\n", v537, 30, v538, v539);
          __uint64_t v540 = sub_DDEFC();
          v735 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseReferenceCompressedBuffers return %u", v540, 30, v735, *(unsigned __int8 *)(v8 + 18013));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseReferenceCompressedBuffers return %u", v537, 30, v538, v539);
        }
      }
      if (*(unsigned char *)(v8 + 18013)) {
        goto LABEL_20;
      }
      goto LABEL_97;
    }
    if (CFEqual(a2, @"ForceRefUncompressed"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v541 = sub_D1C7C(0x1Eu);
        __uint64_t v542 = sub_DDEFC();
        v543 = (const char *)sub_D1CB0(6);
        int v544 = *(unsigned __int8 *)(v8 + 18014);
        if (v541)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ForceRefUncompressed return %u\n", v542, 30, v543, v544);
          __uint64_t v545 = sub_DDEFC();
          v736 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ForceRefUncompressed return %u", v545, 30, v736, *(unsigned __int8 *)(v8 + 18014));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ForceRefUncompressed return %u", v542, 30, v543, v544);
        }
      }
      if (*(unsigned char *)(v8 + 18014)) {
        goto LABEL_20;
      }
      goto LABEL_97;
    }
    if (CFEqual(a2, @"SetDbgInternalParams"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v546 = sub_D1C7C(0x1Eu);
        __uint64_t v547 = sub_DDEFC();
        v548 = (const char *)sub_D1CB0(6);
        int v549 = *v347;
        if (v546)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SetDbgInternalParams return %d\n", v547, 30, v548, v549);
          __uint64_t v550 = sub_DDEFC();
          v737 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SetDbgInternalParams return %d", v550, 30, v737, *v347);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SetDbgInternalParams return %d", v547, 30, v548, v549);
        }
      }
      uint64_t v105 = 18324;
      goto LABEL_131;
    }
    if (CFEqual(a2, @"ThroughputRateMode"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v551 = sub_D1C7C(0x1Eu);
        __uint64_t v552 = sub_DDEFC();
        v553 = (const char *)sub_D1CB0(6);
        int v554 = *(_DWORD *)(v8 + 18776);
        unsigned int v555 = v554 - 1;
        if (v551)
        {
          if (v555 < 6 && ((0x37u >> v555) & 1) != 0)
          {
            v556 = off_159588[v555];
          }
          else if (v554 == 4)
          {
            v556 = "TURBO";
          }
          else
          {
            v556 = "DISABLED";
          }
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ThroughputRateMode return %s\n", v552, 30, v553, v556);
          __uint64_t v552 = sub_DDEFC();
          v553 = (const char *)sub_D1CB0(6);
          int v665 = *(_DWORD *)(v8 + 18776);
          int v666 = v665 - 1;
          if (v665 - 1) < 6 && ((0x37u >> v666))
          {
            v664 = off_159588[v666];
          }
          else if (v665 == 4)
          {
            v664 = "TURBO";
          }
          else
          {
            v664 = "DISABLED";
          }
        }
        else if (v555 < 6 && ((0x37u >> v555) & 1) != 0)
        {
          v664 = off_159588[v555];
        }
        else if (v554 == 4)
        {
          v664 = "TURBO";
        }
        else
        {
          v664 = "DISABLED";
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ThroughputRateMode return %s", v552, 30, v553, v664);
      }
      int v114 = *(_DWORD *)(v8 + 18776);
      goto LABEL_143;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_PrioritizeEncodingSpeedOverQuality))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v557 = sub_D1C7C(0x1Eu);
        __uint64_t v558 = sub_DDEFC();
        v559 = (const char *)sub_D1CB0(6);
        if (*(unsigned char *)(v8 + 18781)) {
          v560 = "true";
        }
        else {
          v560 = "false";
        }
        if (v557)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_PrioritizeEncodingSpeedOverQuality return %s\n", v558, 30, v559, v560);
          __uint64_t v558 = sub_DDEFC();
          v559 = (const char *)sub_D1CB0(6);
          if (*(unsigned char *)(v8 + 18781)) {
            v560 = "true";
          }
          else {
            v560 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_PrioritizeEncodingSpeedOverQuality return %s", v558, 30, v559, v560);
      }
      if (*(unsigned char *)(v8 + 18781)) {
        goto LABEL_20;
      }
LABEL_97:
      uint64_t v29 = 0;
      int v30 = (const __CFString **)&kCFBooleanFalse;
      goto LABEL_98;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_MoreFramesAfterEnd))
    {
      int v561 = *(_DWORD *)(v8 + 26192);
      if (sub_D1C38(0x1Eu, 6))
      {
        int v562 = sub_D1C7C(0x1Eu);
        __uint64_t v563 = sub_DDEFC();
        v564 = (const char *)sub_D1CB0(6);
        if (v561 <= 0) {
          v565 = "false";
        }
        else {
          v565 = "true";
        }
        if (v562)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MoreFramesAfterEnd return %s\n", v563, 30, v564, v565);
          sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MoreFramesAfterEnd return %s");
      }
LABEL_1033:
      uint64_t v29 = 0;
      int v30 = (const __CFString **)&kCFBooleanTrue;
      if (v561 <= 0) {
        int v30 = (const __CFString **)&kCFBooleanFalse;
      }
      goto LABEL_98;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_MoreFramesBeforeStart))
    {
      int v561 = *(_DWORD *)(v8 + 26196);
      if (sub_D1C38(0x1Eu, 6))
      {
        int v566 = sub_D1C7C(0x1Eu);
        __uint64_t v567 = sub_DDEFC();
        v568 = (const char *)sub_D1CB0(6);
        if (v561 <= 0) {
          v569 = "false";
        }
        else {
          v569 = "true";
        }
        if (v566)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MoreFramesBeforeStart return %s\n", v567, 30, v568, v569);
          sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MoreFramesBeforeStart return %s");
      }
      goto LABEL_1033;
    }
    if (CFEqual(a2, @"RecommendedParallelizationLimit"))
    {
      int v570 = *((_DWORD *)sub_C7604() + 303);
      v571 = sub_DB5D4(*(_DWORD *)(v8 + 25244));
      if (!v570) {
        int v570 = *(_DWORD *)(*((void *)v571 + 2) + 4);
      }
      LODWORD(v746) = v570;
      if (sub_D1C38(0x1Eu, 6))
      {
        int v572 = sub_D1C7C(0x1Eu);
        __uint64_t v573 = sub_DDEFC();
        v574 = (const char *)sub_D1CB0(6);
        if (v572)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RecommendedParallelizationLimit return %d\n", v573, 30, v574, v570);
          sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RecommendedParallelizationLimit return %d");
      }
      goto LABEL_56;
    }
    if (CFEqual(a2, @"RecommendedParallelizedSubdivisionMinimumDuration"))
    {
      uint64_t v575 = *((void *)sub_C7604() + 153);
      if (v575) {
        CMTimeValue v576 = 1000 * v575;
      }
      else {
        CMTimeValue v576 = 30000;
      }
      if (sub_D1C38(0x1Eu, 6))
      {
        int v577 = sub_D1C7C(0x1Eu);
        __uint64_t v578 = sub_DDEFC();
        v579 = (const char *)sub_D1CB0(6);
        if (v577)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RecommendedParallelizedSubdivisionMinimumDuration return value: %lld, timescale: %d, flags: 0x%x, epoch: %lld\n", v578, 30, v579, v576, 1000, 1, 0);
          __uint64_t v578 = sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RecommendedParallelizedSubdivisionMinimumDuration return value: %lld, timescale: %d, flags: 0x%x, epoch: %lld", v578);
      }
      time.value = v576;
      *(void *)&time.timescale = 0x1000003E8;
      time.epoch = 0;
      StringForIntegerCodePoint = CMTimeCopyAsDictionary(&time, a3);
      goto LABEL_32;
    }
    if (CFEqual(a2, @"RecommendedParallelizedSubdivisionMinimumFrameCount"))
    {
      v580 = sub_C7604();
      if (v580[152]) {
        uint64_t v581 = v580[152];
      }
      else {
        uint64_t v581 = 900;
      }
      uint64_t v746 = v581;
      if (sub_D1C38(0x1Eu, 6))
      {
        int v582 = sub_D1C7C(0x1Eu);
        __uint64_t v583 = sub_DDEFC();
        v584 = (const char *)sub_D1CB0(6);
        if (v582)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RecommendedParallelizedSubdivisionMinimumFrameCount return %lld\n", v583, 30, v584, v581);
          sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RecommendedParallelizedSubdivisionMinimumFrameCount return %lld");
      }
LABEL_1102:
      int v34 = &v746;
      CFAllocatorRef v35 = a3;
      CFNumberType v36 = kCFNumberSInt64Type;
      goto LABEL_31;
    }
    if (CFEqual(a2, @"lrmeRCPassNum"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v585 = sub_D1C7C(0x1Eu);
        __uint64_t v586 = sub_DDEFC();
        v587 = (const char *)sub_D1CB0(6);
        int v588 = *(unsigned __int8 *)(v8 + 18349);
        if (v585)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_lrmeRCPassNum return %d\n", v586, 30, v587, v588);
          __uint64_t v589 = sub_DDEFC();
          v738 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_lrmeRCPassNum return %d", v589, 30, v738, *(unsigned __int8 *)(v8 + 18349));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_lrmeRCPassNum return %d", v586, 30, v587, v588);
        }
      }
      uint64_t v105 = 18349;
      goto LABEL_131;
    }
    if (CFEqual(a2, @"EncodesDepth"))
    {
      if (*(unsigned char *)(v8 + 18389)) {
        goto LABEL_20;
      }
      goto LABEL_97;
    }
    if (CFEqual(a2, @"EncodesDisparity"))
    {
      if (*(unsigned char *)(v8 + 18388)) {
        goto LABEL_20;
      }
      goto LABEL_97;
    }
    if (CFEqual(a2, @"AdaptBPocDelay"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v590 = sub_D1C7C(0x1Eu);
        __uint64_t v591 = sub_DDEFC();
        v592 = (const char *)sub_D1CB0(6);
        int v593 = *(_DWORD *)(v8 + 26144);
        if (v590)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AdaptBPocDelay return %d\n", v591, 30, v592, v593);
          __uint64_t v594 = sub_DDEFC();
          v739 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AdaptBPocDelay return %d", v594, 30, v739, *(_DWORD *)(v8 + 26144));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AdaptBPocDelay return %d", v591, 30, v592, v593);
        }
      }
      uint64_t v105 = 26144;
      goto LABEL_131;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_TemporalNoiseReduction))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v595 = sub_D1C7C(0x1Eu);
        __uint64_t v596 = sub_DDEFC();
        v597 = (const char *)sub_D1CB0(6);
        if ((*(unsigned char *)(v8 + 1876) & 0xE0) != 0) {
          v598 = "true";
        }
        else {
          v598 = "false";
        }
        if (v595)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_TemporalNoiseReduction return %s\n", v596, 30, v597, v598);
          __uint64_t v596 = sub_DDEFC();
          v597 = (const char *)sub_D1CB0(6);
          if ((*(_DWORD *)(v8 + 1876) & 0xE0) != 0) {
            v598 = "true";
          }
          else {
            v598 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_TemporalNoiseReduction return %s", v596, 30, v597, v598);
      }
      uint64_t v29 = 0;
      BOOL v667 = (*(_DWORD *)(v8 + 1876) & 0xE0) == 0;
LABEL_1057:
      if (v667) {
        int v30 = (const __CFString **)&kCFBooleanFalse;
      }
      else {
        int v30 = (const __CFString **)&kCFBooleanTrue;
      }
      goto LABEL_98;
    }
    if (CFEqual(a2, @"MCTFStrengthLevel"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v599 = sub_D1C7C(0x1Eu);
        __uint64_t v600 = sub_DDEFC();
        v601 = (const char *)sub_D1CB0(6);
        int v602 = *(unsigned __int8 *)(v8 + 18420);
        if (v599)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTEncodeFrameOptionKey_MCTFStrengthLevel return %u\n", v600, 30, v601, v602);
          __uint64_t v603 = sub_DDEFC();
          v740 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTEncodeFrameOptionKey_MCTFStrengthLevel return %u", v603, 30, v740, *(unsigned __int8 *)(v8 + 18420));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTEncodeFrameOptionKey_MCTFStrengthLevel return %u", v600, 30, v601, v602);
        }
      }
      uint64_t v105 = 18420;
      goto LABEL_131;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_Quality))
    {
      v604 = (double *)(v8 + 26136);
      *a4 = CFNumberCreate(a3, kCFNumberDoubleType, (const void *)(v8 + 26136));
      if (sub_D1C38(0x1Eu, 6))
      {
        uint64_t v29 = sub_D1C7C(0x1Eu);
        __uint64_t v605 = sub_DDEFC();
        v606 = (const char *)sub_D1CB0(6);
        if (!v29)
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Quality return %.6f", *v604);
          goto LABEL_100;
        }
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Quality return %.6f\n", v605, 30, v606, *v604);
        sub_DDEFC();
        sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Quality return %.6f");
      }
      goto LABEL_38;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_Paravirtualized))
    {
      uint64_t v29 = 0;
      if (*(int *)(v8 + 26184) <= 0) {
        int v30 = (const __CFString **)&kCFBooleanFalse;
      }
      else {
        int v30 = (const __CFString **)&kCFBooleanTrue;
      }
      goto LABEL_98;
    }
    if (CFEqual(a2, @"MaxEncoderPixelRate"))
    {
      v607 = sub_BCA90(*(_DWORD *)(v8 + 25088));
      if (v607)
      {
        int v608 = v607[1];
        int v609 = v607[2];
      }
      else
      {
        int v609 = 1;
        int v608 = 8;
      }
      v668 = sub_13B28(*(_DWORD *)(v8 + 25244), 1, 0, v608, v609, 1);
      uint64_t v746 = (uint64_t)v668;
      if (sub_D1C38(0x1Eu, 6))
      {
        int v669 = sub_D1C7C(0x1Eu);
        __uint64_t v670 = sub_DDEFC();
        v671 = (const char *)sub_D1CB0(6);
        if (v669)
        {
          printf("%lld %d AVE %s: %s:%d kVTCompressionPropertyKey_MaxEncoderPixelRate %lld\n", v670, 30, v671, "AVE_H264CopyProperty", 10792, v668);
          sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: %s:%d kVTCompressionPropertyKey_MaxEncoderPixelRate %lld");
      }
      goto LABEL_1102;
    }
    if (CFEqual(a2, @"NumberOfCores"))
    {
      v610 = sub_DB5D4(*(_DWORD *)(v8 + 25244));
      if (sub_D1C38(0x1Eu, 6))
      {
        int v611 = sub_D1C7C(0x1Eu);
        __uint64_t v612 = sub_DDEFC();
        v613 = (const char *)sub_D1CB0(6);
        int v614 = *(_DWORD *)(*((void *)v610 + 2) + 4);
        if (v611)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_NumberOfCores return %d\n", v612, 30, v613, v614);
          __uint64_t v615 = sub_DDEFC();
          v741 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_NumberOfCores return %d", v615, 30, v741, *(_DWORD *)(*((void *)v610 + 2) + 4));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_NumberOfCores return %d", v612, 30, v613, v614);
        }
      }
      int v34 = (uint64_t *)(*((void *)v610 + 2) + 4);
      goto LABEL_29;
    }
    if (CFEqual(a2, @"CalculateMeanSquaredError"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v616 = sub_D1C7C(0x1Eu);
        __uint64_t v617 = sub_DDEFC();
        v618 = (const char *)sub_D1CB0(6);
        if ((*(unsigned char *)(v8 + 1891) & 8) != 0) {
          v619 = "true";
        }
        else {
          v619 = "false";
        }
        if (v616)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_CalculateMeanSquaredError return %s\n", v617, 30, v618, v619);
          __uint64_t v617 = sub_DDEFC();
          v618 = (const char *)sub_D1CB0(6);
          if ((*(void *)(v8 + 1888) & 0x8000000) != 0) {
            v619 = "true";
          }
          else {
            v619 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_CalculateMeanSquaredError return %s", v617, 30, v618, v619);
      }
      uint64_t v29 = 0;
      BOOL v667 = (*(void *)(v8 + 1888) & 0x8000000) == 0;
      goto LABEL_1057;
    }
    if (sub_D1C38(0x1Eu, 4))
    {
      int v620 = sub_D1C7C(0x1Eu);
      __uint64_t v621 = sub_DDEFC();
      v622 = (const char *)sub_D1CB0(4);
      if (v620)
      {
        printf("%lld %d AVE %s: FIG: CopyProperty Property not supported\n", v621, 30, v622);
        __uint64_t v623 = sub_DDEFC();
        v742 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: FIG: CopyProperty Property not supported", v623, 30, v742);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: CopyProperty Property not supported", v621, 30, v622);
      }
    }
    CFShow(a2);
    uint64_t v29 = 4294954396;
  }
  else
  {
    if (sub_D1C38(3u, 4))
    {
      int v14 = sub_D1C7C(3u);
      __uint64_t v15 = sub_DDEFC();
      __uint64_t v16 = (const char *)sub_D1CB0(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v15, 3, v16, "AVE_H264CopyProperty", 9356, "encoderPrivateStorage");
        __uint64_t v17 = sub_DDEFC();
        v675 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v17, 3, v675, "AVE_H264CopyProperty", 9356, "encoderPrivateStorage");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v15, 3, v16, "AVE_H264CopyProperty", 9356, "encoderPrivateStorage");
      }
    }
    uint64_t v29 = 4294954384;
  }
LABEL_100:
  if (sub_D1C38(0x1Eu, 8))
  {
    int v82 = sub_D1C7C(0x1Eu);
    __uint64_t v83 = sub_DDEFC();
    int v84 = (const char *)sub_D1CB0(8);
    if (v82)
    {
      printf("%lld %d AVE %s: H3H264VideoEncoder FIG: EXIT AVE_H264CopyProperty err %d \n", v83, 30, v84, v29);
      __uint64_t v85 = sub_DDEFC();
      v684 = (const char *)sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: H3H264VideoEncoder FIG: EXIT AVE_H264CopyProperty err %d ", v85, 30, v684, v29);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H3H264VideoEncoder FIG: EXIT AVE_H264CopyProperty err %d ", v83, 30, v84, v29);
    }
  }
  if (v8) {
    pthread_mutex_unlock((pthread_mutex_t *)(v8 + 25120));
  }
  return v29;
}

uint64_t sub_20DD8(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    int v4 = DerivedStorage;
    if (sub_D1C38(0x1Eu, 8))
    {
      int v5 = sub_D1C7C(0x1Eu);
      __uint64_t v6 = sub_DDEFC();
      uint64_t v7 = (const char *)sub_D1CB0(8);
      if (v5)
      {
        printf("%lld %d AVE %s: FIG: ENTER AVE_H264SetProperty\n", v6, 30, v7);
        __uint64_t v8 = sub_DDEFC();
        __uint64_t v19 = (const char *)sub_D1CB0(8);
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_H264SetProperty", v8, 30, v19);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_H264SetProperty", v6, 30, v7);
      }
    }
    uint64_t v13 = sub_20FFC(v4, a2);
  }
  else
  {
    if (sub_D1C38(3u, 4))
    {
      int v9 = sub_D1C7C(3u);
      __uint64_t v10 = sub_DDEFC();
      __uint64_t v11 = (const char *)sub_D1CB0(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v10, 3, v11, "AVE_H264SetProperty", 9273, "encoderPrivateStorage");
        __uint64_t v12 = sub_DDEFC();
        __uint64_t v20 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v12, 3, v20, "AVE_H264SetProperty", 9273, "encoderPrivateStorage");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v10, 3, v11, "AVE_H264SetProperty", 9273, "encoderPrivateStorage");
      }
    }
    uint64_t v13 = 4294954384;
  }
  if (sub_D1C38(0x1Eu, 8))
  {
    int v14 = sub_D1C7C(0x1Eu);
    __uint64_t v15 = sub_DDEFC();
    __uint64_t v16 = (const char *)sub_D1CB0(8);
    if (v14)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_H264SetProperty err %d \n", v15, 30, v16, v13);
      __uint64_t v17 = sub_DDEFC();
      int v21 = (const char *)sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_H264SetProperty err %d ", v17, 30, v21, v13);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_H264SetProperty err %d ", v15, 30, v16, v13);
    }
  }
  return v13;
}

#error "20FFC: too big function (funcsize=0)"

uint64_t sub_35CE4(uint64_t a1, double a2)
{
  uint64_t v4 = a1 + 18484;
  unsigned int v5 = (int)(a2 + 0.5);
  if (sub_D1C38(0x1Eu, 6))
  {
    int v6 = sub_D1C7C(0x1Eu);
    __uint64_t v7 = sub_DDEFC();
    __uint64_t v8 = (const char *)sub_D1CB0(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %f %p\n", v7, 30, v8, "AVE_AVC_SetQuality", a2, (const void *)a1);
      __uint64_t v9 = sub_DDEFC();
      __uint64_t v19 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s Enter %f %p", v9, 30, v19, "AVE_AVC_SetQuality", a2, (const void *)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %f %p", v7, 30, v8, "AVE_AVC_SetQuality", a2, (const void *)a1);
    }
  }
  if (v5 > 0x63)
  {
    if (v5 == 100)
    {
      uint64_t v14 = 0;
      *(_DWORD *)(a1 + 1832) = 0;
      *(_OWORD *)(a1 + 1816) = 0u;
      *(unsigned char *)(v4 + 380) = 1;
      *(unsigned char *)(v4 + 1948) = 1;
      *(_DWORD *)uint64_t v4 = 0;
    }
    else
    {
      uint64_t v14 = 4294966295;
    }
  }
  else
  {
    int v10 = a33222111000[v5];
    *(double *)(a1 + 1816) = (double)(v10 + 6 * *(_DWORD *)(v4 + 1940));
    *(_DWORD *)(a1 + 1824) = v10;
    *(_DWORD *)(a1 + 1828) = v10;
    *(_DWORD *)(a1 + 1832) = v10;
    *(unsigned char *)(v4 + 379) = 1;
    if (*(unsigned char *)(v4 + 288))
    {
      if (*(_DWORD *)(a1 + 196) != 8 && sub_D1C38(0x1Eu, 5))
      {
        int v11 = sub_D1C7C(0x1Eu);
        __uint64_t v12 = sub_DDEFC();
        uint64_t v13 = (const char *)sub_D1CB0(5);
        if (v11)
        {
          printf("%lld %d AVE %s: %s:%d Quality set with wrong RC mode %f %p %d\n", v12, 30, v13, "AVE_AVC_SetQuality", 603, a2, (const void *)a1, *(_DWORD *)(a1 + 196));
          __uint64_t v12 = sub_DDEFC();
          sub_D1CB0(5);
        }
        syslog(3, "%lld %d AVE %s: %s:%d Quality set with wrong RC mode %f %p %d", v12);
      }
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = 0;
      *(unsigned char *)(v4 + 288) = 1;
      *(_DWORD *)(a1 + 196) = 8;
    }
  }
  if (sub_D1C38(0x1Eu, 6))
  {
    int v15 = sub_D1C7C(0x1Eu);
    __uint64_t v16 = sub_DDEFC();
    __uint64_t v17 = (const char *)sub_D1CB0(6);
    if (v15)
    {
      printf("%lld %d AVE %s: %s Exit %f %p %d\n", v16, 30, v17, "AVE_AVC_SetQuality", a2, (const void *)a1, v14);
      sub_DDEFC();
      sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: %s Exit %f %p %d");
  }
  return v14;
}

uint64_t sub_36010(const void *a1, const void *a2, unint64_t a3, const void *a4)
{
  unint64_t v8 = HIDWORD(a3);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v10 = sub_C7604();
  if (sub_D1C38(0x14u, 6))
  {
    int v11 = sub_D1C7C(0x14u);
    __uint64_t v12 = sub_DDEFC();
    uint64_t v13 = (const char *)sub_D1CB0(6);
    if (v11)
    {
      printf("%lld %d AVE %s: Enter %s %p %p %dx%d %p\n", v12, 20, v13, "AVE_H264StartSession", a1, a2, a3, v8, a4);
      __uint64_t v12 = sub_DDEFC();
      sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: Enter %s %p %p %dx%d %p", v12, 20);
  }
  if (DerivedStorage)
  {
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 25120));
    uint64_t v14 = *(void *)(DerivedStorage + 20368);
    __uint64_t v15 = sub_DDEFC();
    sub_C086C(v14, 3u, v15);
    kdebug_trace();
    if (*(_DWORD *)(DerivedStorage + 25184)) {
      *(void *)(DerivedStorage + 25192) = sub_DDEFC();
    }
    if (!a1)
    {
      if (sub_D1C38(3u, 4))
      {
        int v24 = sub_D1C7C(3u);
        __uint64_t v25 = sub_DDEFC();
        int v26 = (const char *)sub_D1CB0(4);
        if (v24)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: encoder NULL.\n", v25, 3, v26, "AVE_H264StartSession", 8406, "encoder");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: encoder NULL.");
      }
      goto LABEL_49;
    }
    if (!a2)
    {
      if (sub_D1C38(3u, 4))
      {
        int v27 = sub_D1C7C(3u);
        __uint64_t v28 = sub_DDEFC();
        uint64_t v29 = (const char *)sub_D1CB0(4);
        if (v27)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: session NULL.\n", v28, 3, v29, "AVE_H264StartSession", 8407, "session");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: session NULL.");
      }
      goto LABEL_49;
    }
    if ((int)a3 <= 1)
    {
      if (!sub_D1C38(3u, 4)) {
        goto LABEL_49;
      }
      int v30 = sub_D1C7C(3u);
      __uint64_t v31 = sub_DDEFC();
      __uint64_t v32 = (const char *)sub_D1CB0(4);
      if (!v30)
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: dimensions.width (%dx%d) not supported.", v31);
        goto LABEL_49;
      }
      printf("%lld %d AVE %s: %s:%d %s | FIG: dimensions.width (%dx%d) not supported.\n", v31, 3, v32, "AVE_H264StartSession", 8408, "dimensions.width >= 2", a3, v8);
      __uint64_t v17 = sub_DDEFC();
      uint64_t v62 = a3;
      uint64_t v63 = v8;
      uint64_t v60 = 8408;
      int v61 = "dimensions.width >= 2";
      int v56 = sub_D1CB0(4);
      int v33 = "%lld %d AVE %s: %s:%d %s | FIG: dimensions.width (%dx%d) not supported.";
    }
    else
    {
      if ((int)v8 > 1)
      {
        *(void *)uint64_t DerivedStorage = a2;
        *(_DWORD *)(DerivedStorage + 1880) = a3;
        *(_DWORD *)(DerivedStorage + 1884) = v8;
        *(_DWORD *)(DerivedStorage + 19468) = a3;
        *(_DWORD *)(DerivedStorage + 19472) = v8;
        sub_3EF70(DerivedStorage);
        if (!sub_C58EC(*(_DWORD *)(DerivedStorage + 25244), 0, *(_DWORD *)(DerivedStorage + 1880), *(_DWORD *)(DerivedStorage + 1884), 0))
        {
          *(void *)(DerivedStorage + 16) = a4;
          if (a4) {
            CFRetain(a4);
          }
          sub_3F288(DerivedStorage);
          unsigned int v39 = *(_DWORD *)(DerivedStorage + 20424) + 8;
          if (v39 <= *(_DWORD *)(DerivedStorage + 20428) + 8) {
            unsigned int v39 = *(_DWORD *)(DerivedStorage + 20428) + 8;
          }
          uint64_t v40 = sub_EF00(*(unsigned int *)(DerivedStorage + 25240), *(unsigned int *)(DerivedStorage + 25236), 30, 0, *(unsigned int *)(DerivedStorage + 19468), *(unsigned int *)(DerivedStorage + 19472), *(unsigned int *)(DerivedStorage + 1880), *(unsigned int *)(DerivedStorage + 1884), v39, 0, 0x1414C4C20, *(void *)DerivedStorage);
          if (!v40)
          {
            *(void *)(DerivedStorage + 25108) = 30566;
            *(_DWORD *)(DerivedStorage + 18632) = v10[196];
            sub_89F0(*(unsigned int *)(DerivedStorage + 25232), *(_DWORD *)(DerivedStorage + 18760), *(_DWORD *)(DerivedStorage + 1880), *(_DWORD *)(DerivedStorage + 1884));
          }
          uint64_t v34 = v40;
          if (sub_D1C38(3u, 4))
          {
            int v41 = sub_D1C7C(3u);
            __uint64_t v42 = sub_DDEFC();
            int v43 = (const char *)sub_D1CB0(4);
            if (v41)
            {
              printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_UpdatePixelBufferDict failed.\n", v42, 3, v43, "AVE_H264StartSession", 8459, "err == noErr");
              __uint64_t v44 = sub_DDEFC();
              __uint64_t v57 = (const char *)sub_D1CB0(4);
              syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_UpdatePixelBufferDict failed.", v44, 3, v57, "AVE_H264StartSession", 8459, "err == noErr");
            }
            else
            {
              syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_UpdatePixelBufferDict failed.", v42, 3, v43, "AVE_H264StartSession", 8459, "err == noErr");
            }
          }
          goto LABEL_50;
        }
        if (!sub_D1C38(0x16u, 4))
        {
LABEL_49:
          uint64_t v34 = 4294954394;
LABEL_50:
          if (*(_DWORD *)(DerivedStorage + 25184))
          {
            *(void *)(DerivedStorage + 25200) = sub_DDEFC();
            if (sub_D1C38(0x18u, 6))
            {
              int v45 = sub_D1C7C(0x18u);
              __uint64_t v46 = sub_DDEFC();
              int v47 = (const char *)sub_D1CB0(6);
              uint64_t v48 = *(void *)(DerivedStorage + 25200) - *(void *)(DerivedStorage + 25192);
              if (v45)
              {
                printf("%lld %d AVE %s: FIG: AVE_H264StartSession took %lld us\n", v46, 24, v47, v48);
                __uint64_t v49 = sub_DDEFC();
                int v58 = (const char *)sub_D1CB0(6);
                syslog(3, "%lld %d AVE %s: FIG: AVE_H264StartSession took %lld us", v49, 24, v58, *(void *)(DerivedStorage + 25200) - *(void *)(DerivedStorage + 25192));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: FIG: AVE_H264StartSession took %lld us", v46, 24, v47, v48);
              }
            }
          }
          kdebug_trace();
          pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 25120));
          goto LABEL_56;
        }
        int v16 = sub_D1C7C(0x16u);
        __uint64_t v17 = sub_DDEFC();
        int v18 = (const char *)sub_D1CB0(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | resolution is not out of range %d %d\n", v17, 22, v18, "AVE_H264StartSession", 8435, "ret == 0", *(_DWORD *)(DerivedStorage + 1880), *(_DWORD *)(DerivedStorage + 1884));
          __uint64_t v19 = sub_DDEFC();
          sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | resolution is not out of range %d %d", v19);
          goto LABEL_49;
        }
        uint64_t v62 = *(unsigned int *)(DerivedStorage + 1880);
        uint64_t v63 = *(unsigned int *)(DerivedStorage + 1884);
        uint64_t v60 = 8435;
        int v61 = "ret == 0";
        int v56 = (void *)v18;
        uint64_t v38 = 22;
        int v33 = "%lld %d AVE %s: %s:%d %s | resolution is not out of range %d %d";
LABEL_48:
        syslog(3, v33, v17, v38, v56, "AVE_H264StartSession", v60, v61, v62, v63);
        goto LABEL_49;
      }
      if (!sub_D1C38(3u, 4)) {
        goto LABEL_49;
      }
      int v35 = sub_D1C7C(3u);
      __uint64_t v36 = sub_DDEFC();
      int v37 = (const char *)sub_D1CB0(4);
      if (!v35)
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: dimensions.height (%dx%d) not supported.", v36);
        goto LABEL_49;
      }
      printf("%lld %d AVE %s: %s:%d %s | FIG: dimensions.height (%dx%d) not supported.\n", v36, 3, v37, "AVE_H264StartSession", 8409, "dimensions.height >= 2", a3, v8);
      __uint64_t v17 = sub_DDEFC();
      uint64_t v62 = a3;
      uint64_t v63 = v8;
      uint64_t v60 = 8409;
      int v61 = "dimensions.height >= 2";
      int v56 = sub_D1CB0(4);
      int v33 = "%lld %d AVE %s: %s:%d %s | FIG: dimensions.height (%dx%d) not supported.";
    }
    uint64_t v38 = 3;
    goto LABEL_48;
  }
  if (sub_D1C38(3u, 4))
  {
    int v20 = sub_D1C7C(3u);
    __uint64_t v21 = sub_DDEFC();
    __uint64_t v22 = (const char *)sub_D1CB0(4);
    if (v20)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v21, 3, v22, "AVE_H264StartSession", 8391, "encoderPrivateStorage");
      __uint64_t v23 = sub_DDEFC();
      int v55 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v23, 3, v55, "AVE_H264StartSession", 8391, "encoderPrivateStorage");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v21, 3, v22, "AVE_H264StartSession", 8391, "encoderPrivateStorage");
    }
  }
  kdebug_trace();
  uint64_t v34 = 4294954384;
LABEL_56:
  if (sub_D1C38(0x14u, 6))
  {
    int v50 = sub_D1C7C(0x14u);
    __uint64_t v51 = sub_DDEFC();
    int v52 = (const char *)sub_D1CB0(6);
    if (v50)
    {
      printf("%lld %d AVE %s: Exit %s %p %p %dx%d %p %d\n", v51, 20, v52, "AVE_H264StartSession", a1, a2, a3, v8, a4, v34);
      __uint64_t v53 = sub_DDEFC();
      __uint64_t v59 = sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: Exit %s %p %p %dx%d %p %d", v53, 20, v59);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p %p %dx%d %p %d", v51, 20, v52);
    }
  }
  return v34;
}

uint64_t sub_36B70()
{
  __chkstk_darwin();
  __uint64_t v139 = v1;
  uint64_t v140 = v0;
  CFDictionaryRef v3 = v2;
  unsigned int v5 = v4;
  __uint64_t v7 = v6;
  CVPixelBufferRef v164 = v8;
  char v163 = 0;
  int v162 = 0;
  int v161 = 0;
  long long v159 = 0uLL;
  uint64_t v160 = 0;
  long long v158 = 0uLL;
  __uint64_t v9 = (char *)sub_C7604();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v11 = (void *)DerivedStorage;
  __uint64_t v12 = (unsigned __int8 *)(DerivedStorage + 25216);
  uint64_t v13 = (int *)(DerivedStorage + 18760);
  float v141 = (unsigned __int8 *)(DerivedStorage + 25216);
  if (!DerivedStorage)
  {
    if (sub_D1C38(3u, 4))
    {
      int v20 = sub_D1C7C(3u);
      __uint64_t v21 = sub_DDEFC();
      __uint64_t v22 = (const char *)sub_D1CB0(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v21, 3, v22, "AVE_H264EncodeFrame", 8724, "encoderPrivateStorage");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.");
    }
    goto LABEL_40;
  }
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 25120));
  if (sub_D1C38(0x14u, 7))
  {
    CFDictionaryRef v14 = v3;
    __uint64_t v15 = v13;
    int v16 = sub_D1C7C(0x14u);
    __uint64_t v17 = sub_DDEFC();
    int v18 = (const char *)sub_D1CB0(7);
    if (v16)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_H264EncodeFrame\n", v17, 20, v18);
      __uint64_t v19 = sub_DDEFC();
      __uint64_t v130 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_H264EncodeFrame", v19, 20, v130);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_H264EncodeFrame", v17, 20, v18);
    }
    uint64_t v13 = v15;
    CFDictionaryRef v3 = v14;
  }
  kdebug_trace();
  if (v3 && CFDictionaryContainsKey(v3, @"SessionIndicator")) {
    sub_C0600(v11[2546]);
  }
  if (!v13[1588])
  {
    uint64_t v23 = v11[2546];
    __uint64_t v24 = sub_DDEFC();
    sub_C086C(v23, 5u, v24);
    CVPixelBufferGetIOSurface(v164);
    v11[239] = IOSurfaceGetProtectionOptions();
  }
  if (v13[1606]) {
    v11[3149] = sub_DDEFC();
  }
  if (!v164)
  {
    if (sub_D1C38(3u, 4))
    {
      int v37 = sub_D1C7C(3u);
      __uint64_t v38 = sub_DDEFC();
      unsigned int v39 = (const char *)sub_D1CB0(4);
      if (v37)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: imageBuffer = NULL.\n", v38, 3, v39, "AVE_H264EncodeFrame", 8752, "imageBuffer");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: imageBuffer = NULL.");
    }
    goto LABEL_87;
  }
  __uint64_t v25 = sub_DDEFC();
  long long v159 = *v7;
  uint64_t v160 = *((void *)v7 + 2);
  uint64_t v137 = *v5;
  __uint64_t v138 = v25;
  uint64_t v26 = v5[1];
  uint64_t v136 = v5[2];
  *(void *)&long long v158 = v159;
  DWORD2(v158) = DWORD2(v159);
  sub_DDC48(0, (uint64_t)&v158);
  if (sub_D1C38(0x33u, 7))
  {
    CFDictionaryRef v27 = v3;
    int v28 = sub_D1C7C(0x33u);
    __uint64_t v29 = sub_DDEFC();
    int v30 = (const char *)sub_D1CB0(7);
    uint64_t v31 = *((unsigned int *)v12 + 4);
    uint64_t v32 = v13[1588];
    uint64_t v33 = *(void *)v7;
    uint64_t v34 = *((unsigned int *)v7 + 2);
    if (v28)
    {
      printf("%lld %d AVE %s: %s:%d %d %d timestamp %lld %d 0x%x %lld -> %lld %d | duration %lld %d 0x%x %lld\n", v29, 51, v30, "AVE_H264EncodeFrame", 8775, v31, v32, v33, v34, *((_DWORD *)v7 + 3), *((void *)v7 + 2), (void)v158, DWORD2(v158), *v5, *((_DWORD *)v5 + 2), *((_DWORD *)v5 + 3), v5[2]);
      __uint64_t v35 = sub_DDEFC();
      __uint64_t v36 = sub_D1CB0(7);
      __uint64_t v12 = v141;
      syslog(3, "%lld %d AVE %s: %s:%d %d %d timestamp %lld %d 0x%x %lld -> %lld %d | duration %lld %d 0x%x %lld", v35, 51, v36, "AVE_H264EncodeFrame", 8775, *((unsigned int *)v141 + 4), v13[1588], *(void *)v7, *((unsigned int *)v7 + 2));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %d %d timestamp %lld %d 0x%x %lld -> %lld %d | duration %lld %d 0x%x %lld", v29, 51, v30, "AVE_H264EncodeFrame", 8775, v31, v32, v33, v34);
    }
    CFDictionaryRef v3 = v27;
  }
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v164);
  *((_DWORD *)v12 + 320) = PixelFormatType;
  if (!v13[1588])
  {
    int v167 = (void *)v11[235];
    int v41 = sub_D7E18(PixelFormatType);
    if (!v41)
    {
      if (sub_D1C38(3u, 4))
      {
        int v58 = sub_D1C7C(3u);
        __uint64_t v59 = sub_DDEFC();
        uint64_t v60 = (const char *)sub_D1CB0(4);
        if (v58)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to find pixel format %p %d 0x%x\n", v59, 3, v60, "AVE_H264EncodeFrame", 8791, "pPixelFmt != __null", v11, *((_DWORD *)v12 + 4), *((_DWORD *)v12 + 320));
          __uint64_t v59 = sub_DDEFC();
          uint64_t v60 = (const char *)sub_D1CB0(4);
          uint64_t v133 = *((unsigned int *)v141 + 4);
          uint64_t v134 = *((unsigned int *)v141 + 320);
        }
        else
        {
          uint64_t v133 = *((unsigned int *)v12 + 4);
          uint64_t v134 = *((unsigned int *)v12 + 320);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to find pixel format %p %d 0x%x", v59, 3, v60, "AVE_H264EncodeFrame", 8791, "pPixelFmt != __null", v11, v133, v134);
      }
      goto LABEL_87;
    }
    if (v9[792]) {
      __uint64_t v42 = v9 + 792;
    }
    else {
      __uint64_t v42 = 0;
    }
    sub_49A0(v11[3310], v42, *((_DWORD *)v12 + 5), *v13, *((_DWORD *)v9 + 196), *((_DWORD *)v9 + 197), &v167, 1, *((_DWORD *)v41 + 3), *((_DWORD *)v41 + 1), *((_DWORD *)v11 + 48));
  }
  sub_5058((_DWORD *)v11[3310], -1, v164);
  int v43 = v13[1587];
  switch(v43)
  {
    case 30566:
      if (sub_D17D4(v164)) {
        int v49 = 1;
      }
      else {
        int v49 = 2;
      }
      v13[11] = v49;
      if (sub_43720((uint64_t)v11))
      {
        if (sub_D1C38(3u, 4))
        {
          int v50 = sub_D1C7C(3u);
          __uint64_t v51 = sub_DDEFC();
          int v52 = (const char *)sub_D1CB0(4);
          if (v50)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed\n", v51, 3, v52, "AVE_H264EncodeFrame", 8915, "err == noErr");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed");
        }
        goto LABEL_87;
      }
      sub_3FD50((uint64_t)v11, v164);
      if (sub_3F8A8((uint64_t)v11, &v164, &v163, &v162, &v161, 1))
      {
        if (sub_D1C38(3u, 4))
        {
          int v61 = sub_D1C7C(3u);
          __uint64_t v45 = sub_DDEFC();
          __uint64_t v46 = (const char *)sub_D1CB0(4);
          if (!v61)
          {
LABEL_86:
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_AVC_VerifyImageBuffer failed.");
            goto LABEL_87;
          }
          int v47 = 8925;
LABEL_66:
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_AVC_VerifyImageBuffer failed.\n", v45, 3, v46, "AVE_H264EncodeFrame", v47, "err == noErr");
          sub_DDEFC();
          sub_D1CB0(4);
          goto LABEL_86;
        }
LABEL_87:
        uint64_t v48 = 4294954394;
        goto LABEL_88;
      }
      sub_3FF70();
      if (sub_40010((uint64_t)v11))
      {
        if (!sub_D1C38(3u, 4)) {
          goto LABEL_87;
        }
        int v66 = sub_D1C7C(3u);
        __uint64_t v63 = sub_DDEFC();
        __uint64_t v64 = (const char *)sub_D1CB0(4);
        if (v66)
        {
          int v65 = 8935;
          goto LABEL_81;
        }
LABEL_100:
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ValidateEncoderParameters failed");
        goto LABEL_87;
      }
      sub_4296C((uint64_t)v11, v164);
      __uint64_t v135 = v13;
      if (v13[1606])
      {
        v11[3150] = sub_DDEFC();
        if (sub_D1C38(0x18u, 6))
        {
          int v78 = sub_D1C7C(0x18u);
          __uint64_t v79 = sub_DDEFC();
          __uint64_t v80 = (const char *)sub_D1CB0(6);
          uint64_t v81 = v11[3150] - v11[3149];
          if (v78)
          {
            printf("%lld %d AVE %s: FIG: (%d) Init setup  took %lld us\n", v79, 24, v80, v13[1588], v81);
            __uint64_t v82 = sub_DDEFC();
            __uint64_t v83 = (const char *)sub_D1CB0(6);
            __uint64_t v12 = v141;
            syslog(3, "%lld %d AVE %s: FIG: (%d) Init setup  took %lld us", v82, 24, v83, v13[1588], v11[3150] - v11[3149]);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: (%d) Init setup  took %lld us", v79, 24, v80, v13[1588], v81);
          }
        }
        v11[3149] = sub_DDEFC();
      }
      long long v178 = 0u;
      long long v179 = 0u;
      long long v177 = 0u;
      int v167 = v11 + 234;
      __uint64_t v168 = v11 + 235;
      int v169 = v11 + 2330;
      int v170 = v11 + 24;
      uint64_t v90 = v11[3310];
      uint64_t v171 = v11[2546];
      uint64_t v172 = v90;
      uint64_t v173 = v11[3157];
      int v174 = v11 + 2547;
      int v175 = v11 + 2762;
      __uint64_t v176 = (char *)v11 + 22484;
      __uint64_t v85 = v138;
      uint64_t v180 = 0;
      __uint64_t v181 = v138;
      if (sub_B25A4(v11[3], (uint64_t)&v167, (uint64_t)(v11 + 4), *v11, 0, v11[2], *v12, v11[3158], (uint64_t)(v11 + 8), (_DWORD *)v11 + 5044, (char *)v11 + 19476))
      {
        if (sub_D1C38(3u, 4))
        {
          int v91 = sub_D1C7C(3u);
          __uint64_t v87 = sub_DDEFC();
          __uint64_t v88 = (const char *)sub_D1CB0(4);
          if (!v91)
          {
LABEL_167:
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Start failed.");
            goto LABEL_40;
          }
          int v89 = 8988;
LABEL_114:
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Start failed.\n", v87, 3, v88, "AVE_H264EncodeFrame", v89, "err == noErr");
          sub_DDEFC();
          sub_D1CB0(4);
          goto LABEL_167;
        }
LABEL_40:
        uint64_t v48 = 4294954384;
        goto LABEL_88;
      }
      break;
    case 30567:
      if (sub_D17D4(v164)) {
        int v53 = 1;
      }
      else {
        int v53 = 2;
      }
      v13[11] = v53;
      sub_3FD50((uint64_t)v11, v164);
      if (sub_3F8A8((uint64_t)v11, &v164, &v163, &v162, &v161, 1))
      {
        if (sub_D1C38(3u, 4))
        {
          int v54 = sub_D1C7C(3u);
          __uint64_t v45 = sub_DDEFC();
          __uint64_t v46 = (const char *)sub_D1CB0(4);
          if (!v54) {
            goto LABEL_86;
          }
          int v47 = 8827;
          goto LABEL_66;
        }
        goto LABEL_87;
      }
      sub_3FF70();
      if (sub_40010((uint64_t)v11))
      {
        if (!sub_D1C38(3u, 4)) {
          goto LABEL_87;
        }
        int v62 = sub_D1C7C(3u);
        __uint64_t v63 = sub_DDEFC();
        __uint64_t v64 = (const char *)sub_D1CB0(4);
        if (v62)
        {
          int v65 = 8837;
LABEL_81:
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_ValidateEncoderParameters failed\n", v63, 3, v64, "AVE_H264EncodeFrame", v65, "err == noErr");
          sub_DDEFC();
          sub_D1CB0(4);
          goto LABEL_100;
        }
        goto LABEL_100;
      }
      sub_4296C((uint64_t)v11, v164);
      __uint64_t v135 = v13;
      if (v13[1606])
      {
        v11[3150] = sub_DDEFC();
        if (sub_D1C38(0x18u, 6))
        {
          int v67 = sub_D1C7C(0x18u);
          __uint64_t v68 = sub_DDEFC();
          __uint64_t v69 = (const char *)sub_D1CB0(6);
          uint64_t v70 = v11[3150] - v11[3149];
          if (v67)
          {
            printf("%lld %d AVE %s: FIG: (%d) Pre Init setup  took %lld us\n", v68, 24, v69, v13[1588], v70);
            __uint64_t v71 = sub_DDEFC();
            int v72 = (const char *)sub_D1CB0(6);
            __uint64_t v12 = v141;
            syslog(3, "%lld %d AVE %s: FIG: (%d) Pre Init setup  took %lld us", v71, 24, v72, v13[1588], v11[3150] - v11[3149]);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: (%d) Pre Init setup  took %lld us", v68, 24, v69, v13[1588], v70);
          }
        }
        v11[3149] = sub_DDEFC();
      }
      uint64_t v180 = 0;
      long long v178 = 0u;
      long long v179 = 0u;
      long long v177 = 0u;
      int v167 = v11 + 234;
      __uint64_t v168 = v11 + 235;
      int v169 = v11 + 2330;
      int v170 = v11 + 24;
      uint64_t v84 = v11[3310];
      uint64_t v171 = v11[2546];
      uint64_t v172 = v84;
      uint64_t v173 = v11[3157];
      int v174 = v11 + 2547;
      int v175 = v11 + 2762;
      __uint64_t v176 = (char *)v11 + 22484;
      __uint64_t v85 = v138;
      __uint64_t v181 = v138;
      if (sub_B25A4(v11[3], (uint64_t)&v167, (uint64_t)(v11 + 4), *v11, 0, v11[2], *v12, v11[3158], (uint64_t)(v11 + 8), (_DWORD *)v11 + 5044, (char *)v11 + 19476))
      {
        if (sub_D1C38(3u, 4))
        {
          int v86 = sub_D1C7C(3u);
          __uint64_t v87 = sub_DDEFC();
          __uint64_t v88 = (const char *)sub_D1CB0(4);
          if (!v86) {
            goto LABEL_167;
          }
          int v89 = 8891;
          goto LABEL_114;
        }
        goto LABEL_40;
      }
      break;
    case 30568:
      if (sub_3F8A8((uint64_t)v11, &v164, &v163, &v162, &v161, 0))
      {
        if (sub_D1C38(3u, 4))
        {
          int v44 = sub_D1C7C(3u);
          __uint64_t v45 = sub_DDEFC();
          __uint64_t v46 = (const char *)sub_D1CB0(4);
          if (!v44) {
            goto LABEL_86;
          }
          int v47 = 8810;
          goto LABEL_66;
        }
        goto LABEL_87;
      }
      goto LABEL_121;
    default:
      if (sub_D1C38(3u, 4))
      {
        int v55 = sub_D1C7C(3u);
        __uint64_t v56 = sub_DDEFC();
        __uint64_t v57 = (const char *)sub_D1CB0(4);
        if (v55)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_H264EncodeFrame encoderPrivateStorage->SessionStatus = 0x%08x.\n", v56, 3, v57, "AVE_H264EncodeFrame", 9005, "false", v13[1587]);
          __uint64_t v56 = sub_DDEFC();
          __uint64_t v57 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_H264EncodeFrame encoderPrivateStorage->SessionStatus = 0x%08x.", v56, 3, v57, "AVE_H264EncodeFrame", 9005, "false", v13[1587]);
      }
      goto LABEL_40;
  }
  uint64_t v13 = v135;
  v135[1587] = 30568;
  if (!v135[1606]) {
    goto LABEL_128;
  }
  v11[3150] = sub_DDEFC();
  if (sub_D1C38(0x18u, 6))
  {
    int v92 = sub_D1C7C(0x18u);
    __uint64_t v93 = sub_DDEFC();
    int v94 = (const char *)sub_D1CB0(6);
    uint64_t v95 = v11[3150] - v11[3149];
    if (v92)
    {
      printf("%lld %d AVE %s: FIG: (%d) AVE_USL_Drv_Start took %lld us\n", v93, 24, v94, v135[1588], v95);
      __uint64_t v96 = sub_DDEFC();
      int v97 = (const char *)sub_D1CB0(6);
      __uint64_t v12 = v141;
      syslog(3, "%lld %d AVE %s: FIG: (%d) AVE_USL_Drv_Start took %lld us", v96, 24, v97, v135[1588], v11[3150] - v11[3149]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: (%d) AVE_USL_Drv_Start took %lld us", v93, 24, v94, v135[1588], v95);
    }
  }
  v11[3149] = sub_DDEFC();
LABEL_121:
  __uint64_t v85 = v138;
  if (v13[1606] && v13[1587] == 30568)
  {
    v11[3150] = sub_DDEFC();
    if (sub_D1C38(0x18u, 6))
    {
      int v98 = sub_D1C7C(0x18u);
      __uint64_t v99 = sub_DDEFC();
      int v100 = (const char *)sub_D1CB0(6);
      uint64_t v101 = v11[3150] - v11[3149];
      if (v98)
      {
        printf("%lld %d AVE %s: FIG: (%d) AVE_AVC_VerifyImageBuffer took %lld us\n", v99, 24, v100, v13[1588], v101);
        __uint64_t v102 = sub_DDEFC();
        __uint64_t v103 = (const char *)sub_D1CB0(6);
        __uint64_t v12 = v141;
        syslog(3, "%lld %d AVE %s: FIG: (%d) AVE_AVC_VerifyImageBuffer took %lld us", v102, 24, v103, v13[1588], v11[3150] - v11[3149]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: (%d) AVE_AVC_VerifyImageBuffer took %lld us", v99, 24, v100, v13[1588], v101);
      }
    }
    v11[3149] = sub_DDEFC();
  }
LABEL_128:
  v13[1587] = 30568;
  __uint64_t v143 = 0;
  int v142 = 0;
  long long v147 = 0u;
  long long v148 = 0u;
  long long v149 = 0u;
  long long v150 = 0u;
  memset(v151, 0, sizeof(v151));
  long long v152 = 0u;
  memset(v153, 0, sizeof(v153));
  long long v154 = 0u;
  long long v155 = 0u;
  long long v156 = 0u;
  long long v157 = 0u;
  memset(v144, 0, sizeof(v144));
  uint64_t v145 = 0;
  bzero(&v167, 0x4AF8uLL);
  if (v3)
  {
    Value = CFDictionaryGetValue(v3, @"ResetRCState");
    if (Value)
    {
      if (CFEqual(Value, kCFBooleanTrue))
      {
        __uint64_t v85 = sub_DDEFC();
        __uint64_t v143 = v85;
        sub_B490C((void **)v11[3], &v143);
      }
    }
  }
  uint64_t v146 = v140;
  *(void *)&long long v148 = v164;
  *(_OWORD *)&v151[1] = v159;
  v151[3] = v160;
  *(void *)&long long v152 = v137;
  *((void *)&v152 + 1) = v26;
  v153[0] = v136;
  *(_OWORD *)&v153[1] = v158;
  BYTE8(v154) = v12[1];
  *(void *)&long long v155 = v85;
  DWORD2(v155) = *((_DWORD *)v12 + 15);
  if (v13[11] == 2)
  {
    sub_D196C(v164, v144);
    sub_5734((void *)v11[3310], *((_DWORD *)v12 + 15), v13[1588], (double *)v144);
  }
  v153[3] = v144;
  if (*((unsigned char *)v13 + 174))
  {
    if (*((int *)v141 + 6) >= 3)
    {
      int v142 = 10;
      if (!sub_BDAA0(v3, v11 + 3168, &v142))
      {
        __int16 v166 = 0;
        uint64_t v165 = 0;
        sub_DD92C((char *)&v165, 10, "%d %d", v105, v106, v107, v108, v109, *((_DWORD *)v141 + 4));
        sub_BDA14((unsigned int *)v11 + 6336, v142, 47, 6, (uint64_t)&v165, 0, v110, v111);
        *(void *)&long long v156 = v11 + 3168;
        DWORD2(v156) = v142;
      }
    }
  }
  *(void *)&long long v150 = 0;
  BYTE8(v150) = v141[3];
  if (v141[2])
  {
    CFDictionaryRef v112 = (const __CFDictionary *)CMGetAttachment(v164, kFigCaptureSampleBufferAttachmentKey_MetadataDictionary, 0);
    if (v112) {
      *(void *)&long long v150 = CFDictionaryCreateCopy(0, v112);
    }
  }
  sub_461C4((uint64_t)v11, v3, (int *)&v167, (uint64_t)&v146);
  if (!v13[182]) {
    sub_47E00((uint64_t)v11, (uint64_t)&v167, *(double *)v153[3]);
  }
  *(void *)&long long v154 = &v167;
  if (*((_DWORD *)v141 + 15) && v11[3158] && sub_47F24((uint64_t)v11, &v159))
  {
    if (sub_D1C38(3u, 4))
    {
      int v113 = sub_D1C7C(3u);
      __uint64_t v114 = sub_DDEFC();
      int v115 = (const char *)sub_D1CB0(4);
      if (v113)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_H264MultipassDataFetch failed.\n", v114, 3, v115, "AVE_H264EncodeFrame", 9134, "err == noErr");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_H264MultipassDataFetch failed.");
    }
    goto LABEL_40;
  }
  *((void *)&v157 + 1) = v13[1588];
  uint64_t v116 = sub_B5104((void **)v11[3], (uint64_t)&v146);
  uint64_t v48 = v116;
  if (v116)
  {
    if (v116 != -536870173)
    {
      if (sub_D1C38(3u, 4))
      {
        int v121 = sub_D1C7C(3u);
        __uint64_t v122 = sub_DDEFC();
        int v123 = (const char *)sub_D1CB0(4);
        if (v121)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Process failed.\n", v122, 3, v123, "AVE_H264EncodeFrame", 9151, "err == noErr");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Process failed.");
      }
      goto LABEL_40;
    }
    if (sub_D1C38(0x16u, 5))
    {
      int v117 = sub_D1C7C(0x16u);
      __uint64_t v118 = sub_DDEFC();
      double v119 = (const char *)sub_D1CB0(5);
      if (v117)
      {
        printf("%lld %d AVE %s: FIG: device returned kIOReturnNoPower. reject the frame\n", v118, 22, v119);
        __uint64_t v120 = sub_DDEFC();
        int v132 = (const char *)sub_D1CB0(5);
        syslog(3, "%lld %d AVE %s: FIG: device returned kIOReturnNoPower. reject the frame", v120, 22, v132);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: device returned kIOReturnNoPower. reject the frame", v118, 22, v119);
      }
    }
  }
  if (v139) {
    *v139 |= 1u;
  }
  if (v13[1606])
  {
    v11[3150] = sub_DDEFC();
    if (sub_D1C38(0x18u, 6))
    {
      int v124 = sub_D1C7C(0x18u);
      __uint64_t v125 = sub_DDEFC();
      int v126 = (const char *)sub_D1CB0(6);
      uint64_t v127 = v11[3150] - v11[3149];
      if (v124)
      {
        printf("%lld %d AVE %s: FIG: (%d) EncodeFrame took %lld us\n", v125, 24, v126, v13[1588], v127);
        __uint64_t v128 = sub_DDEFC();
        int v129 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: (%d) EncodeFrame took %lld us", v128, 24, v129, v13[1588], v11[3150] - v11[3149]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: (%d) EncodeFrame took %lld us", v125, 24, v126, v13[1588], v127);
      }
    }
  }
LABEL_88:
  if (sub_D1C38(0x14u, 7))
  {
    int v73 = sub_D1C7C(0x14u);
    __uint64_t v74 = sub_DDEFC();
    int v75 = (const char *)sub_D1CB0(7);
    if (v73)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_H264EncodeFrame err 0x%08x\n", v74, 20, v75, v48);
      __uint64_t v76 = sub_DDEFC();
      int v131 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_H264EncodeFrame err 0x%08x", v76, 20, v131, v48);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_H264EncodeFrame err 0x%08x", v74, 20, v75, v48);
    }
  }
  kdebug_trace();
  if (!v48) {
    ++v13[1588];
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v11 + 3140));
  return v48;
}

uint64_t sub_382E0(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (sub_D1C38(0x14u, 7))
  {
    int v3 = sub_D1C7C(0x14u);
    __uint64_t v4 = sub_DDEFC();
    unsigned int v5 = (const char *)sub_D1CB0(7);
    if (v3)
    {
      printf("%lld %d AVE %s: Enter %s %p\n", v4, 20, v5, "AVE_H264CompleteFrames", a1);
      __uint64_t v6 = sub_DDEFC();
      int v30 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: Enter %s %p", v6, 20, v30, "AVE_H264CompleteFrames", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Enter %s %p", v4, 20, v5, "AVE_H264CompleteFrames", a1);
    }
  }
  if (!DerivedStorage)
  {
    if (sub_D1C38(3u, 4))
    {
      int v19 = sub_D1C7C(3u);
      __uint64_t v20 = sub_DDEFC();
      __uint64_t v21 = (const char *)sub_D1CB0(4);
      if (v19)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v20, 3, v21, "AVE_H264CompleteFrames", 9206, "encoderPrivateStorage");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.");
    }
    goto LABEL_24;
  }
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 25120));
  uint64_t v7 = *(void *)(DerivedStorage + 20368);
  __uint64_t v8 = sub_DDEFC();
  sub_C086C(v7, 6u, v8);
  kdebug_trace();
  if (*(_DWORD *)(DerivedStorage + 25184)) {
    *(void *)(DerivedStorage + 25192) = sub_DDEFC();
  }
  __uint64_t v9 = sub_DDEFC();
  if (*(_DWORD *)(DerivedStorage + 25108) == 30568)
  {
    __uint64_t v32 = v9;
    if (sub_B490C(*(void ***)(DerivedStorage + 24), &v32))
    {
      if (sub_D1C38(3u, 4))
      {
        int v10 = sub_D1C7C(3u);
        __uint64_t v11 = sub_DDEFC();
        __uint64_t v12 = (const char *)sub_D1CB0(4);
        if (v10)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: H264VideoEncoderVA_DriverEncodeCompleteFrames failed.\n", v11, 3, v12, "AVE_H264CompleteFrames", 9231, "err == noErr");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: H264VideoEncoderVA_DriverEncodeCompleteFrames failed.");
      }
LABEL_24:
      uint64_t v24 = 4294954384;
      goto LABEL_25;
    }
  }
  if (*(_DWORD *)(DerivedStorage + 25184))
  {
    *(void *)(DerivedStorage + 25200) = sub_DDEFC();
    if (sub_D1C38(0x18u, 6))
    {
      int v13 = sub_D1C7C(0x18u);
      __uint64_t v14 = sub_DDEFC();
      __uint64_t v15 = (const char *)sub_D1CB0(6);
      uint64_t v16 = *(void *)(DerivedStorage + 25200) - *(void *)(DerivedStorage + 25192);
      if (v13)
      {
        printf("%lld %d AVE %s: FIG: (%d) Complete took %lld us\n", v14, 24, v15, *(_DWORD *)(DerivedStorage + 25112) - 1, v16);
        __uint64_t v17 = sub_DDEFC();
        int v18 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: (%d) Complete took %lld us", v17, 24, v18, *(_DWORD *)(DerivedStorage + 25112) - 1, *(void *)(DerivedStorage + 25200) - *(void *)(DerivedStorage + 25192));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: (%d) Complete took %lld us", v14, 24, v15, *(_DWORD *)(DerivedStorage + 25112) - 1, v16);
      }
    }
  }
  uint64_t v22 = *(void *)(DerivedStorage + 20368);
  __uint64_t v23 = sub_DDEFC();
  sub_C0C44(v22, 6u, v23);
  uint64_t v24 = 0;
LABEL_25:
  kdebug_trace();
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 25120));
  if (sub_D1C38(0x14u, 7))
  {
    int v25 = sub_D1C7C(0x14u);
    __uint64_t v26 = sub_DDEFC();
    CFDictionaryRef v27 = (const char *)sub_D1CB0(7);
    if (v25)
    {
      printf("%lld %d AVE %s: Exit %s %p %d\n", v26, 20, v27, "AVE_H264CompleteFrames", a1, v24);
      __uint64_t v28 = sub_DDEFC();
      uint64_t v31 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v28, 20, v31, "AVE_H264CompleteFrames", a1, v24);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v26, 20, v27, "AVE_H264CompleteFrames", a1, v24);
    }
  }
  return v24;
}

uint64_t sub_38770(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v4 = DerivedStorage;
    if (sub_D1C38(0x1Eu, 8))
    {
      int v5 = sub_D1C7C(0x1Eu);
      __uint64_t v6 = sub_DDEFC();
      uint64_t v7 = (const char *)sub_D1CB0(8);
      if (v5)
      {
        printf("%lld %d AVE %s: FIG: ENTER AVE_H264CopySupportedPropertyDictionary\n", v6, 30, v7);
        __uint64_t v8 = sub_DDEFC();
        __uint64_t v36 = (const char *)sub_D1CB0(8);
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_H264CopySupportedPropertyDictionary", v8, 30, v36);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_H264CopySupportedPropertyDictionary", v6, 30, v7);
      }
    }
    if (*(unsigned char *)(v4 + 18849))
    {
      int v13 = *(const void **)(v4 + 25328);
      if (v13)
      {
        CFIndex v14 = CFGetRetainCount(v13);
        if (v14 != 1)
        {
          int v15 = v14;
          if (sub_D1C38(0x1Eu, 5))
          {
            int v16 = sub_D1C7C(0x1Eu);
            __uint64_t v17 = sub_DDEFC();
            int v18 = (const char *)sub_D1CB0(5);
            if (v16)
            {
              int v19 = v15;
              printf("%lld %d AVE %s: FIG: count for supportedPropertyDictionary = %d\n", v17, 30, v18, v15);
              __uint64_t v20 = sub_DDEFC();
              __uint64_t v38 = (const char *)sub_D1CB0(5);
              syslog(3, "%lld %d AVE %s: FIG: count for supportedPropertyDictionary = %d", v20, 30, v38, v19);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: count for supportedPropertyDictionary = %d", v17, 30, v18, v15);
            }
          }
        }
        CFRetain(*(CFTypeRef *)(v4 + 25328));
        uint64_t v29 = *(void *)(v4 + 25328);
        goto LABEL_27;
      }
    }
    else
    {
      __uint64_t v21 = *(const void **)(v4 + 25224);
      if (v21)
      {
        CFIndex v22 = CFGetRetainCount(v21);
        if (v22 != 1)
        {
          int v23 = v22;
          if (sub_D1C38(0x1Eu, 5))
          {
            int v24 = sub_D1C7C(0x1Eu);
            __uint64_t v25 = sub_DDEFC();
            __uint64_t v26 = (const char *)sub_D1CB0(5);
            if (v24)
            {
              int v27 = v23;
              printf("%lld %d AVE %s: FIG: count for supportedPropertyDictionary = %d\n", v25, 30, v26, v23);
              __uint64_t v28 = sub_DDEFC();
              unsigned int v39 = (const char *)sub_D1CB0(5);
              syslog(3, "%lld %d AVE %s: FIG: count for supportedPropertyDictionary = %d", v28, 30, v39, v27);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: count for supportedPropertyDictionary = %d", v25, 30, v26, v23);
            }
          }
        }
        CFRetain(*(CFTypeRef *)(v4 + 25224));
        uint64_t v29 = *(void *)(v4 + 25224);
        goto LABEL_27;
      }
    }
    uint64_t v29 = 0;
LABEL_27:
    uint64_t v30 = 0;
    *a2 = v29;
    goto LABEL_28;
  }
  if (sub_D1C38(3u, 4))
  {
    int v9 = sub_D1C7C(3u);
    __uint64_t v10 = sub_DDEFC();
    __uint64_t v11 = (const char *)sub_D1CB0(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v10, 3, v11, "AVE_H264CopySupportedPropertyDictionary", 9294, "encoderPrivateStorage");
      __uint64_t v12 = sub_DDEFC();
      int v37 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v12, 3, v37, "AVE_H264CopySupportedPropertyDictionary", 9294, "encoderPrivateStorage");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v10, 3, v11, "AVE_H264CopySupportedPropertyDictionary", 9294, "encoderPrivateStorage");
    }
  }
  uint64_t v30 = 4294954384;
LABEL_28:
  if (sub_D1C38(0x1Eu, 8))
  {
    int v31 = sub_D1C7C(0x1Eu);
    __uint64_t v32 = sub_DDEFC();
    uint64_t v33 = (const char *)sub_D1CB0(8);
    if (v31)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_H264CopySupportedPropertyDictionary err %d \n", v32, 30, v33, v30);
      __uint64_t v34 = sub_DDEFC();
      uint64_t v40 = (const char *)sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_H264CopySupportedPropertyDictionary err %d ", v34, 30, v40, v30);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_H264CopySupportedPropertyDictionary err %d ", v32, 30, v33, v30);
    }
  }
  return v30;
}

uint64_t sub_38AEC(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = DerivedStorage;
  if (DerivedStorage)
  {
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 25120));
    if (sub_D1C38(0x1Eu, 8))
    {
      int v5 = sub_D1C7C(0x1Eu);
      __uint64_t v6 = sub_DDEFC();
      uint64_t v7 = (const char *)sub_D1CB0(8);
      if (v5)
      {
        printf("%lld %d AVE %s: FIG: ENTER %s\n", v6, 30, v7, "AVE_H264SetProperties");
        __uint64_t v8 = sub_DDEFC();
        __uint64_t v26 = (const char *)sub_D1CB0(8);
        syslog(3, "%lld %d AVE %s: FIG: ENTER %s", v8, 30, v26, "AVE_H264SetProperties");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: ENTER %s", v6, 30, v7, "AVE_H264SetProperties");
      }
    }
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(a2))
    {
      uint64_t v14 = 0;
      v30[0] = kVTCompressionPropertyKey_MaxKeyFrameInterval;
      v30[1] = @"StrictKeyFrameInterval";
      v30[2] = kVTCompressionPropertyKey_AllowFrameReordering;
      v30[3] = kVTCompressionPropertyKey_AllowTemporalCompression;
      v30[4] = kVTCompressionPropertyKey_AverageBitRate;
      v30[5] = kVTCompressionPropertyKey_ProfileLevel;
      v30[6] = @"EnableTransform8x8";
      v30[7] = @"EnableWeightedPrediction";
      v30[8] = kVTCompressionPropertyKey_SourceFrameCount;
      v30[9] = kVTCompressionPropertyKey_ExpectedFrameRate;
      v30[10] = @"MaximumRealTimeFrameRate";
      v30[11] = kVTCompressionPropertyKey_DataRateLimits;
      v30[12] = kVTCompressionPropertyKey_ConvergenceDurationForAverageDataRate;
      v30[13] = kVTCompressionPropertyKey_FrameRateTargetForAverageBitrate;
      v30[14] = kVTCompressionPropertyKey_ColorPrimaries;
      v30[15] = kVTCompressionPropertyKey_TransferFunction;
      v30[16] = kVTCompressionPropertyKey_YCbCrMatrix;
      v30[17] = kVTCompressionPropertyKey_ExpectedDuration;
      v30[18] = kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration;
      v30[19] = @"StrictKeyFrameIntervalDuration";
      v30[20] = kVTCompressionPropertyKey_Usage;
      v30[21] = kVTCompressionPropertyKey_ThrottleForBackground;
      v30[22] = @"InitialQPI";
      v30[23] = @"InitialQPP";
      v30[24] = @"InitialQPB";
      v30[25] = kVTCompressionProperty_SoftMinQuantizationParameter;
      v30[26] = kVTCompressionProperty_SoftMaxQuantizationParameter;
      v30[27] = kVTCompressionPropertyKey_MaxAllowedFrameQP;
      v30[28] = kVTCompressionPropertyKey_MinAllowedFrameQP;
      v30[29] = kVTCompressionPropertyKey_NumberOfSlices;
      v30[30] = kVTCompressionPropertyKey_H264EntropyMode;
      v30[31] = kVTCompressionPropertyKey_Priority;
      v30[32] = @"DeblockingFiltering";
      v30[33] = @"DebugMetadataSEI";
      v30[34] = @"DebugMetadataSEIuseEPB";
      v30[35] = kVTCompressionPropertyKey_InputQueueMaxCount;
      v30[36] = kVTCompressionPropertyKey_AverageNonDroppableFrameRate;
      v30[37] = @"EnableUserQPForFacetime";
      v30[38] = kVTCompressionPropertyKey_UserDPBFramesForFaceTime;
      v30[39] = @"DPBRequirements";
      v30[40] = @"EnableUserRefForFacetime";
      v30[41] = kVTCompressionPropertyKey_RealTime;
      v30[42] = kVTCompressionPropertyKey_UsingHardwareAcceleratedVideoEncoder;
      v30[43] = kVTCompressionPropertyKey_TemporalNoiseReduction;
      v30[44] = @"MCTFStrengthLevel";
      v30[45] = kVTCompressionPropertyKey_MultiPassStorage;
      v30[46] = @"EnableStatsCollect";
      v30[47] = @"EnableMultiReferenceP";
      v30[48] = @"MultiReferencePSpacing";
      v30[49] = @"log2_max_minus4";
      v30[50] = kVTCompressionPropertyKey_EnsureTIJacinto4Compatibility;
      v30[51] = kVTCompressionPropertyKey_InputPixelFormat;
      v30[52] = kVTCompressionPropertyKey_PerceptualQualityOptimization;
      v30[53] = kVTCompressionPropertyKey_VideoResolutionAdaptation;
      v30[54] = kVTCompressionPropertyKey_VideoResolutionAdaptationType;
      v30[55] = @"UseLongTermReference";
      v30[56] = @"CodedBuffersOverride";
      v30[57] = @"EnableMBInputCtrl";
      v30[58] = @"AllowGapsInFrameNum";
      v30[59] = @"ChromaQPIndexOffsetMultiPPS";
      v30[60] = kVTCompressionPropertyKey_QuantizationScalingMatrixPreset;
      v30[61] = @"iChatUsageString";
      v30[62] = kVTCompressionPropertyKey_UserParameterSetsIds;
      v30[63] = kVTCompressionPropertyKey_Quality;
      v30[64] = kVTCompressionPropertyKey_EnableQPModulation;
      v30[65] = @"EnableRCFW";
      v30[66] = @"EnableRCDriver";
      v30[67] = @"RCMode";
      v30[68] = @"SetDbgInternalParams";
      v30[69] = @"UseReferenceCompressedBuffers";
      v30[70] = @"ForceRefUncompressed";
      v30[71] = @"EdgeReplication";
      v30[72] = @"UseHWTileOffsets";
      v30[73] = kVTCompressionPropertyKey_MaxFrameDelayCount;
      v30[74] = @"MaximizePowerEfficiency";
      v30[75] = @"ChromaQpOffset";
      v30[76] = @"SpatialAdaptiveQPLevel";
      v30[77] = @"LookAheadFrames";
      v30[78] = @"PreemptiveLoadBalancing";
      v30[79] = @"SVEMap";
      v30[80] = @"SVENum";
      v30[81] = @"SVESchedMode";
      v30[82] = @"DLBType";
      v30[83] = @"CmdTimeOutMode";
      v30[84] = @"FeatureOn";
      v30[85] = @"FeatureOff";
      v30[86] = @"RCFeatureOn";
      v30[87] = @"RCFeatureOff";
      v30[88] = @"QPModFeatureOn";
      v30[89] = @"QPModFeatureOff";
      v30[90] = @"PerfFeatureOn";
      v30[91] = @"PerfFeatureOff";
      v30[92] = @"AllocCodedBufferHalfSize";
      v30[93] = @"ThroughputRateMode";
      v30[94] = kVTCompressionPropertyKey_PrioritizeEncodingSpeedOverQuality;
      v30[95] = @"lrmeRCPassNum";
      v30[96] = @"EncodesDisparity";
      v30[97] = @"EncodesDepth";
      v30[98] = @"EnableVUI";
      v30[99] = @"EnableVUIBitstreamRestriction";
      v30[100] = @"EnableMultiSliceStats";
      v30[101] = @"SessionName";
      v30[102] = kVTCompressionPropertyKey_ConstantBitRate;
      v30[103] = @"VariableBitRate";
      v30[104] = kVTCompressionPropertyKey_MoreFramesAfterEnd;
      v30[105] = kVTCompressionPropertyKey_MoreFramesBeforeStart;
      v30[106] = @"RecommendedParallelizationLimit";
      v30[107] = @"RecommendedParallelizedSubdivisionMinimumDuration";
      v30[108] = @"RecommendedParallelizedSubdivisionMinimumFrameCount";
      v30[109] = @"MotionEstimationSearchMode";
      v30[110] = @"SupportedMotionSearchModes";
      v30[111] = kVTCompressionPropertyKey_Paravirtualized;
      v30[112] = @"CalculateMeanSquaredError";
      v30[113] = @"DebugFeature";
      do
      {
        int v15 = (const void *)v30[v14];
        if (CFDictionaryContainsKey(a2, v15))
        {
          CFDictionaryGetValue(a2, v15);
          sub_20FFC(v4, v15);
        }
        ++v14;
      }
      while (v14 != 114);
      uint64_t v16 = 0;
    }
    else
    {
      if (sub_D1C38(3u, 4))
      {
        int v17 = sub_D1C7C(3u);
        __uint64_t v18 = sub_DDEFC();
        int v19 = (const char *)sub_D1CB0(4);
        if (v17)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryGetTypeID failed\n", v18, 3, v19, "AVE_H264SetProperties", 10852, "CFDictionaryGetTypeID() == CFGetTypeID( propertyDictionary)");
          __uint64_t v20 = sub_DDEFC();
          __uint64_t v28 = (const char *)sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryGetTypeID failed", v20, 3, v28, "AVE_H264SetProperties", 10852, "CFDictionaryGetTypeID() == CFGetTypeID( propertyDictionary)");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryGetTypeID failed", v18, 3, v19, "AVE_H264SetProperties", 10852, "CFDictionaryGetTypeID() == CFGetTypeID( propertyDictionary)");
        }
      }
      uint64_t v16 = 4294954394;
    }
  }
  else
  {
    if (sub_D1C38(3u, 4))
    {
      int v9 = sub_D1C7C(3u);
      __uint64_t v10 = sub_DDEFC();
      __uint64_t v11 = (const char *)sub_D1CB0(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v10, 3, v11, "AVE_H264SetProperties", 10847, "encoderPrivateStorage");
        __uint64_t v12 = sub_DDEFC();
        int v27 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v12, 3, v27, "AVE_H264SetProperties", 10847, "encoderPrivateStorage");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v10, 3, v11, "AVE_H264SetProperties", 10847, "encoderPrivateStorage");
      }
    }
    uint64_t v16 = 4294954384;
  }
  if (sub_D1C38(0x1Eu, 8))
  {
    int v21 = sub_D1C7C(0x1Eu);
    __uint64_t v22 = sub_DDEFC();
    int v23 = (const char *)sub_D1CB0(8);
    if (v21)
    {
      printf("%lld %d AVE %s: FIG: EXIT %s err %d \n", v22, 30, v23, "AVE_H264SetProperties", v16);
      __uint64_t v24 = sub_DDEFC();
      uint64_t v29 = (const char *)sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: FIG: EXIT %s err %d ", v24, 30, v29, "AVE_H264SetProperties", v16);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT %s err %d ", v22, 30, v23, "AVE_H264SetProperties", v16);
    }
  }
  if (v4) {
    pthread_mutex_unlock((pthread_mutex_t *)(v4 + 25120));
  }
  return v16;
}

uint64_t sub_39434(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (sub_D1C38(0x14u, 6))
  {
    int v3 = sub_D1C7C(0x14u);
    __uint64_t v4 = sub_DDEFC();
    int v5 = (const char *)sub_D1CB0(6);
    if (v3)
    {
      printf("%lld %d AVE %s: Enter %s %p\n", v4, 20, v5, "AVE_H264PrepareToEncodeFrames", a1);
      __uint64_t v6 = sub_DDEFC();
      int v37 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: Enter %s %p", v6, 20, v37, "AVE_H264PrepareToEncodeFrames", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Enter %s %p", v4, 20, v5, "AVE_H264PrepareToEncodeFrames", a1);
    }
  }
  if (!DerivedStorage)
  {
    if (sub_D1C38(3u, 4))
    {
      int v13 = sub_D1C7C(3u);
      __uint64_t v14 = sub_DDEFC();
      int v15 = (const char *)sub_D1CB0(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v14, 3, v15, "AVE_H264PrepareToEncodeFrames", 11013, "encoderPrivateStorage");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.");
    }
    goto LABEL_24;
  }
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 25120));
  kdebug_trace();
  if (*(_DWORD *)(DerivedStorage + 25184)) {
    *(void *)(DerivedStorage + 25192) = sub_DDEFC();
  }
  sub_DDEFC();
  if (*(_DWORD *)(DerivedStorage + 25108) != 30566)
  {
    if (sub_D1C38(3u, 4))
    {
      int v16 = sub_D1C7C(3u);
      __uint64_t v17 = sub_DDEFC();
      __uint64_t v18 = (const char *)sub_D1CB0(4);
      if (v16)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_H264PrepareToEncodeFrames with encoderPrivateStorage->SessionStatus %x.\n", v17, 3, v18, "AVE_H264PrepareToEncodeFrames", 11069, "false", *(_DWORD *)(DerivedStorage + 25108));
        __uint64_t v17 = sub_DDEFC();
        __uint64_t v18 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_H264PrepareToEncodeFrames with encoderPrivateStorage->SessionStatus %x.", v17, 3, v18, "AVE_H264PrepareToEncodeFrames", 11069, "false", *(unsigned int *)(DerivedStorage + 25108));
    }
    goto LABEL_24;
  }
  uint64_t v7 = sub_43720(DerivedStorage);
  if (v7)
  {
    uint64_t v8 = v7;
    if (sub_D1C38(3u, 4))
    {
      int v9 = sub_D1C7C(3u);
      __uint64_t v10 = sub_DDEFC();
      __uint64_t v11 = (const char *)sub_D1CB0(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed\n", v10, 3, v11, "AVE_H264PrepareToEncodeFrames", 11032, "err == noErr");
        __uint64_t v12 = sub_DDEFC();
        __uint64_t v38 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed", v12, 3, v38, "AVE_H264PrepareToEncodeFrames", 11032, "err == noErr");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed", v10, 3, v11, "AVE_H264PrepareToEncodeFrames", 11032, "err == noErr");
      }
    }
    goto LABEL_25;
  }
  *(_DWORD *)(DerivedStorage + 18672) = 1;
  if (sub_D1C38(0x1Eu, 6))
  {
    int v19 = sub_D1C7C(0x1Eu);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(6);
    if (v19)
    {
      printf("%lld %d AVE %s: FIG: received PrepareToEncodeFrames\n", v20, 30, v21);
      __uint64_t v22 = sub_DDEFC();
      unsigned int v39 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: FIG: received PrepareToEncodeFrames", v22, 30, v39);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: received PrepareToEncodeFrames", v20, 30, v21);
    }
  }
  if (sub_B007C())
  {
    if (sub_D1C38(3u, 4))
    {
      int v28 = sub_D1C7C(3u);
      __uint64_t v29 = sub_DDEFC();
      uint64_t v30 = (const char *)sub_D1CB0(4);
      if (v28)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Prepare failed.\n", v29, 3, v30, "AVE_H264PrepareToEncodeFrames", 11061, "err == noErr");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Prepare failed.");
    }
LABEL_24:
    uint64_t v8 = 4294954384;
    goto LABEL_25;
  }
  *(_DWORD *)(DerivedStorage + 25108) = 30567;
  if (*(_DWORD *)(DerivedStorage + 25184))
  {
    *(void *)(DerivedStorage + 25200) = sub_DDEFC();
    if (sub_D1C38(0x18u, 6))
    {
      int v31 = sub_D1C7C(0x18u);
      __uint64_t v32 = sub_DDEFC();
      uint64_t v33 = (const char *)sub_D1CB0(6);
      uint64_t v34 = *(void *)(DerivedStorage + 25200) - *(void *)(DerivedStorage + 25192);
      if (v31)
      {
        printf("%lld %d AVE %s: FIG: (%d) AVE_H264PrepareToEncodeFrames took %lld us\n", v32, 24, v33, 0, v34);
        __uint64_t v35 = sub_DDEFC();
        __uint64_t v36 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: (%d) AVE_H264PrepareToEncodeFrames took %lld us", v35, 24, v36, 0, *(void *)(DerivedStorage + 25200) - *(void *)(DerivedStorage + 25192));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: (%d) AVE_H264PrepareToEncodeFrames took %lld us", v32, 24, v33, 0, v34);
      }
    }
  }
  uint64_t v8 = 0;
LABEL_25:
  kdebug_trace();
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 25120));
  if (sub_D1C38(0x14u, 6))
  {
    int v23 = sub_D1C7C(0x14u);
    __uint64_t v24 = sub_DDEFC();
    __uint64_t v25 = (const char *)sub_D1CB0(6);
    if (v23)
    {
      printf("%lld %d AVE %s: Exit %s %p %d\n", v24, 20, v25, "AVE_H264PrepareToEncodeFrames", a1, v8);
      __uint64_t v26 = sub_DDEFC();
      uint64_t v40 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v26, 20, v40, "AVE_H264PrepareToEncodeFrames", a1, v8);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v24, 20, v25, "AVE_H264PrepareToEncodeFrames", a1, v8);
    }
  }
  return v8;
}

uint64_t sub_39AC0(const void *a1, int a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (sub_D1C38(0x14u, 6))
  {
    int v7 = sub_D1C7C(0x14u);
    __uint64_t v8 = sub_DDEFC();
    int v9 = (const char *)sub_D1CB0(6);
    if (v7)
    {
      printf("%lld %d AVE %s: Enter %s %p 0x%x %p\n", v8, 20, v9, "AVE_H264BeginPass", a1, a2, a3);
      __uint64_t v8 = sub_DDEFC();
      sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: Enter %s %p 0x%x %p", v8);
  }
  if (DerivedStorage)
  {
    __uint64_t v10 = (unsigned int *)(DerivedStorage + 18400);
    __uint64_t v11 = (pthread_mutex_t *)(DerivedStorage + 25120);
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 25120));
    if (sub_D1C38(0xD8u, 6))
    {
      int v12 = sub_D1C7C(0xD8u);
      __uint64_t v13 = sub_DDEFC();
      __uint64_t v14 = (const char *)sub_D1CB0(6);
      if (v12)
      {
        printf("%lld %d AVE %s: AVE ENTER AVE_BeginPass\n", v13, 216, v14);
        __uint64_t v15 = sub_DDEFC();
        __uint64_t v51 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: AVE ENTER AVE_BeginPass", v15, 216, v51);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AVE ENTER AVE_BeginPass", v13, 216, v14);
      }
    }
    if (sub_D1C38(0xD8u, 7))
    {
      int v20 = sub_D1C7C(0xD8u);
      __uint64_t v21 = sub_DDEFC();
      __uint64_t v22 = (const char *)sub_D1CB0(7);
      int v23 = *(_DWORD *)(DerivedStorage + 25276);
      if (v20)
      {
        printf("%lld %d AVE %s: AVE FIG AVE_BeginPass called. beginPassFlags = %d (begin %d end %d)\n", v21, 216, v22, a2, *(_DWORD *)(DerivedStorage + 25272), v23);
        __uint64_t v24 = sub_DDEFC();
        __uint64_t v25 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: AVE FIG AVE_BeginPass called. beginPassFlags = %d (begin %d end %d)", v24, 216, v25, a2, *(_DWORD *)(DerivedStorage + 25272), *(_DWORD *)(DerivedStorage + 25276));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AVE FIG AVE_BeginPass called. beginPassFlags = %d (begin %d end %d)", v21, 216, v22, a2, *(_DWORD *)(DerivedStorage + 25272), v23);
      }
    }
    if (!*(void *)(DerivedStorage + 25264))
    {
      if (sub_D1C38(3u, 4))
      {
        int v31 = sub_D1C7C(3u);
        __uint64_t v32 = sub_DDEFC();
        uint64_t v33 = (const char *)sub_D1CB0(4);
        if (v31)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_BeginPass called with multiPassStorage = NULL.\n", v32, 3, v33, "AVE_H264BeginPass", 11120, "encoderPrivateStorage->multiPassStorage != __null");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_BeginPass called with multiPassStorage = NULL.");
      }
      goto LABEL_48;
    }
    int v26 = *(_DWORD *)(DerivedStorage + 25272);
    if (v26 != *(_DWORD *)(DerivedStorage + 25276))
    {
      if (sub_D1C38(3u, 4))
      {
        int v34 = sub_D1C7C(3u);
        __uint64_t v35 = sub_DDEFC();
        __uint64_t v36 = (const char *)sub_D1CB0(4);
        if (v34)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_BeginPass called with multiPassBeginPassCounter = %d, multiPassEndPassCounter = %d\n", v35, 3, v36, "AVE_H264BeginPass", 11121, "encoderPrivateStorage->multiPassBeginPassCounter == encoderPrivateStorage->multiPassEndPassCounter", v10[1718], v10[1719]);
          __uint64_t v35 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_BeginPass called with multiPassBeginPassCounter = %d, multiPassEndPassCounter = %d", v35);
      }
      goto LABEL_48;
    }
    if (v26)
    {
      unsigned int v27 = v26 + 1;
      *(_DWORD *)(DerivedStorage + 25272) = v27;
      if (v27 >= 3)
      {
        if (sub_D1C38(3u, 4))
        {
          int v28 = sub_D1C7C(3u);
          __uint64_t v29 = sub_DDEFC();
          uint64_t v30 = (const char *)sub_D1CB0(4);
          if (v28)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: encoderPrivateStorage->multiPassBeginPassCounter reached max %d\n", v29, 3, v30, "AVE_H264BeginPass", 11130, "false", v10[1718]);
            __uint64_t v29 = sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: encoderPrivateStorage->multiPassBeginPassCounter reached max %d", v29);
        }
LABEL_48:
        uint64_t v37 = 4294954394;
LABEL_49:
        pthread_mutex_unlock(v11);
        goto LABEL_50;
      }
    }
    else
    {
      if (*(_DWORD *)(DerivedStorage + 25108) == 30568)
      {
        if (sub_D1C38(3u, 4))
        {
          int v38 = sub_D1C7C(3u);
          __uint64_t v39 = sub_DDEFC();
          uint64_t v40 = (const char *)sub_D1CB0(4);
          if (v38)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_BeginPass called with SessionStatus == H3H264VideoEncoder_SessionStatus_Run\n", v39, 3, v40, "AVE_H264BeginPass", 11124, "encoderPrivateStorage->SessionStatus != AVE_CommonWrapper_SessionStatus_Run");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_BeginPass called with SessionStatus == H3H264VideoEncoder_SessionStatus_Run");
        }
        goto LABEL_48;
      }
      unsigned int v27 = 1;
      *(_DWORD *)(DerivedStorage + 25272) = 1;
    }
    *__uint64_t v10 = v27;
    *(_DWORD *)(DerivedStorage + 25280) = a2;
    if (sub_D1C38(0xD8u, 7))
    {
      int v41 = sub_D1C7C(0xD8u);
      __uint64_t v42 = sub_DDEFC();
      int v43 = (const char *)sub_D1CB0(7);
      unsigned int v44 = v10[1718];
      if (v41)
      {
        printf("%lld %d AVE %s: AVE FIG AVE_BeginPass encoderPrivateStorage->multiPassBeginPassCounter = %d\n", v42, 216, v43, v44);
        __uint64_t v45 = sub_DDEFC();
        int v53 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: AVE FIG AVE_BeginPass encoderPrivateStorage->multiPassBeginPassCounter = %d", v45, 216, v53, v10[1718]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AVE FIG AVE_BeginPass encoderPrivateStorage->multiPassBeginPassCounter = %d", v42, 216, v43, v44);
      }
    }
    uint64_t v37 = 0;
    goto LABEL_49;
  }
  if (sub_D1C38(3u, 4))
  {
    int v16 = sub_D1C7C(3u);
    __uint64_t v17 = sub_DDEFC();
    __uint64_t v18 = (const char *)sub_D1CB0(4);
    if (v16)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v17, 3, v18, "AVE_H264BeginPass", 11111, "encoderPrivateStorage");
      __uint64_t v19 = sub_DDEFC();
      int v52 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v19, 3, v52, "AVE_H264BeginPass", 11111, "encoderPrivateStorage");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v17, 3, v18, "AVE_H264BeginPass", 11111, "encoderPrivateStorage");
    }
  }
  uint64_t v37 = 4294954384;
LABEL_50:
  if (sub_D1C38(0x14u, 6))
  {
    int v46 = sub_D1C7C(0x14u);
    __uint64_t v47 = sub_DDEFC();
    uint64_t v48 = (const char *)sub_D1CB0(6);
    if (v46)
    {
      printf("%lld %d AVE %s: Exit %s %p 0x%x %p %d\n", v47, 20, v48, "AVE_H264BeginPass", a1, a2, a3, v37);
      __uint64_t v49 = sub_DDEFC();
      sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: Exit %s %p 0x%x %p %d", v49, 20);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p 0x%x %p %d", v47, 20);
    }
  }
  return v37;
}

uint64_t sub_3A210(const void *a1, unsigned char *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (sub_D1C38(0x14u, 6))
  {
    int v7 = sub_D1C7C(0x14u);
    __uint64_t v8 = sub_DDEFC();
    int v9 = (const char *)sub_D1CB0(6);
    if (v7)
    {
      printf("%lld %d AVE %s: Enter %s %p %p %p\n", v8, 20, v9, "AVE_H264EndPass", a1, a2, a3);
      __uint64_t v8 = sub_DDEFC();
      sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: Enter %s %p %p %p", v8);
  }
  if (DerivedStorage)
  {
    __uint64_t v10 = (_DWORD *)(DerivedStorage + 25108);
    __uint64_t v11 = (pthread_mutex_t *)(DerivedStorage + 25120);
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 25120));
    if (sub_D1C38(0xD8u, 7))
    {
      int v12 = sub_D1C7C(0xD8u);
      __uint64_t v13 = sub_DDEFC();
      __uint64_t v14 = (const char *)sub_D1CB0(7);
      if (v12)
      {
        printf("%lld %d AVE %s: FIG: ENTER %s. beginPassFlags %d (begin %d end %d)\n", v13, 216, v14, "AVE_H264EndPass", *(_DWORD *)(DerivedStorage + 25280), *(_DWORD *)(DerivedStorage + 25272), *(_DWORD *)(DerivedStorage + 25276));
        __uint64_t v13 = sub_DDEFC();
        sub_D1CB0(7);
      }
      syslog(3, "%lld %d AVE %s: FIG: ENTER %s. beginPassFlags %d (begin %d end %d)", v13);
    }
    if (*v10 != 30568)
    {
      if (sub_D1C38(3u, 4))
      {
        int v29 = sub_D1C7C(3u);
        __uint64_t v30 = sub_DDEFC();
        int v31 = (const char *)sub_D1CB0(4);
        if (v29)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_EndPass called with SessionStatus != AVE_CommonWrapper_SessionStatus_Run\n", v30, 3, v31, "AVE_H264EndPass", 11177, "encoderPrivateStorage->SessionStatus == AVE_CommonWrapper_SessionStatus_Run");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_EndPass called with SessionStatus != AVE_CommonWrapper_SessionStatus_Run");
      }
      goto LABEL_46;
    }
    if (!*(void *)(DerivedStorage + 25264))
    {
      if (sub_D1C38(3u, 4))
      {
        int v32 = sub_D1C7C(3u);
        __uint64_t v33 = sub_DDEFC();
        int v34 = (const char *)sub_D1CB0(4);
        if (v32)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: called with multiPassStorage = NULL.\n", v33, 3, v34, "AVE_H264EndPass", 11179, "encoderPrivateStorage->multiPassStorage != __null");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: called with multiPassStorage = NULL.");
      }
      goto LABEL_46;
    }
    int v19 = *(_DWORD *)(DerivedStorage + 25272);
    int v20 = *(_DWORD *)(DerivedStorage + 25276);
    if (v19 != v20 + 1)
    {
      if (sub_D1C38(3u, 4))
      {
        int v35 = sub_D1C7C(3u);
        __uint64_t v36 = sub_DDEFC();
        uint64_t v37 = (const char *)sub_D1CB0(4);
        if (v35)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: called with multiPassBeginPassCounter = %d, multiPassEndPassCounter = %d\n", v36, 3, v37, "AVE_H264EndPass", 11185, "encoderPrivateStorage->multiPassBeginPassCounter == (encoderPrivateStorage->multiPassEndPassCounter + 1)", v10[41], v10[42]);
          __uint64_t v36 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: called with multiPassBeginPassCounter = %d, multiPassEndPassCounter = %d", v36);
      }
      goto LABEL_46;
    }
    BOOL v22 = *(_DWORD *)(DerivedStorage + 25280) != 1 && v20 == 0;
    *(_DWORD *)(DerivedStorage + 25276) = v19;
    if (a2) {
      *a2 = v22;
    }
    if (!v22)
    {
      uint64_t v38 = 0;
LABEL_47:
      pthread_mutex_unlock(v11);
      goto LABEL_48;
    }
    if (sub_D1C38(0xD8u, 6))
    {
      int v23 = sub_D1C7C(0xD8u);
      __uint64_t v24 = sub_DDEFC();
      __uint64_t v25 = (const char *)sub_D1CB0(6);
      int v26 = *(_DWORD *)(DerivedStorage + 25112);
      if (v23)
      {
        printf("%lld %d AVE %s: FIG: %s furtherPassesRequested. Pass %d TotalFrames %d\n", v24, 216, v25, "AVE_H264EndPass", *(_DWORD *)(DerivedStorage + 25276), v26);
        __uint64_t v27 = sub_DDEFC();
        int v28 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: %s furtherPassesRequested. Pass %d TotalFrames %d", v27, 216, v28, "AVE_H264EndPass", *(_DWORD *)(DerivedStorage + 25276), *(_DWORD *)(DerivedStorage + 25112));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: %s furtherPassesRequested. Pass %d TotalFrames %d", v24, 216, v25, "AVE_H264EndPass", *(_DWORD *)(DerivedStorage + 25276), v26);
      }
    }
    if (sub_B7040(*(void ***)(DerivedStorage + 24), *(_DWORD *)(DerivedStorage + 25276)))
    {
      if (sub_D1C38(3u, 4))
      {
        int v43 = sub_D1C7C(3u);
        __uint64_t v44 = sub_DDEFC();
        __uint64_t v45 = (const char *)sub_D1CB0(4);
        if (v43)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Reset failed.\n", v44, 3, v45, "AVE_H264EndPass", 11220, "err == noErr");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Reset failed.");
      }
LABEL_65:
      uint64_t v38 = 4294954384;
      goto LABEL_47;
    }
    if (sub_D1C38(0xD8u, 7))
    {
      *(_OWORD *)&v116.start.value = *(_OWORD *)&kCMTimeInvalid.value;
      v116.start.CMTimeEpoch epoch = kCMTimeInvalid.epoch;
      theData.start.value = 0;
      long long v128 = *(_OWORD *)&v116.start.value;
      CMTimeEpoch epoch = v116.start.epoch;
      if (VTMultiPassStorageGetTimeStamp())
      {
        if (sub_D1C38(3u, 4))
        {
          int v46 = sub_D1C7C(3u);
          __uint64_t v47 = sub_DDEFC();
          uint64_t v48 = (const char *)sub_D1CB0(4);
          if (v46)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStamp failed.\n", v47, 3, v48, "AVE_H264EndPass", 11228, "err == noErr");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStamp failed.");
        }
LABEL_46:
        uint64_t v38 = 4294954394;
        goto LABEL_47;
      }
      if ((v116.start.flags & 0x1D) == 1)
      {
        if (sub_D1C38(0xD8u, 7))
        {
          int v49 = sub_D1C7C(0xD8u);
          __uint64_t v50 = sub_DDEFC();
          __uint64_t v51 = (const char *)sub_D1CB0(7);
          if (v49)
          {
            printf("%lld %d AVE %s: FIG: %s VTMultiPassStorageGetTimeStamp value %lld timescale %d flags %d\n", v50, 216, v51, "AVE_H264EndPass", v116.start.value, v116.start.timescale, v116.start.flags);
            __uint64_t v50 = sub_DDEFC();
            __uint64_t v51 = (const char *)sub_D1CB0(7);
          }
          syslog(3, "%lld %d AVE %s: FIG: %s VTMultiPassStorageGetTimeStamp value %lld timescale %d flags %d", v50, 216, v51, "AVE_H264EndPass", v116.start.value, v116.start.timescale, v116.start.flags);
        }
        long long v126 = *(_OWORD *)&v116.start.value;
        CMTimeEpoch v127 = v116.start.epoch;
        if (VTMultiPassStorageCopyDataAtTimeStamp())
        {
          if (sub_D1C38(3u, 4))
          {
            int v64 = sub_D1C7C(3u);
            __uint64_t v65 = sub_DDEFC();
            int v66 = (const char *)sub_D1CB0(4);
            if (v64)
            {
              printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp failed.\n", v65, 3, v66, "AVE_H264EndPass", 11241, "err == noErr");
              sub_DDEFC();
              sub_D1CB0(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp failed.");
          }
        }
        else if (sub_D1C38(3u, 4))
        {
          int v67 = sub_D1C7C(3u);
          __uint64_t v68 = sub_DDEFC();
          __uint64_t v69 = (const char *)sub_D1CB0(4);
          if (v67)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp data == NULL.\n", v68, 3, v69, "AVE_H264EndPass", 11242, "data != __null");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp data == NULL.");
        }
        goto LABEL_46;
      }
    }
    if (*(void *)DerivedStorage != 1)
    {
      CMTime v125 = kCMTimeInvalid;
      CMTime v124 = v125;
      CMTime v123 = v125;
      CFAllocatorRef v52 = kCFAllocatorDefault;
      CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      if (!Mutable)
      {
        if (sub_D1C38(3u, 4))
        {
          int v58 = sub_D1C7C(3u);
          __uint64_t v59 = sub_DDEFC();
          uint64_t v60 = (const char *)sub_D1CB0(4);
          if (v58)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: CFArrayCreateMutable failed.\n", v59, 3, v60, "AVE_H264EndPass", 11274, "timeRangeArray != __null");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFArrayCreateMutable failed.");
        }
        goto LABEL_65;
      }
      int v54 = Mutable;
      long long v121 = *(_OWORD *)&kCMTimeInvalid.value;
      CMTimeEpoch v122 = kCMTimeInvalid.epoch;
      if (VTMultiPassStorageGetTimeStamp())
      {
        if (sub_D1C38(3u, 4))
        {
          int v55 = sub_D1C7C(3u);
          __uint64_t v56 = sub_DDEFC();
          __uint64_t v57 = (const char *)sub_D1CB0(4);
          if (v55)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStamp kVTMultiPassStorageStep_GetFirstTimeStamp failed.\n", v56, 3, v57, "AVE_H264EndPass", 11277, "err == noErr");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStamp kVTMultiPassStorageStep_GetFirstTimeStamp failed.");
        }
        goto LABEL_46;
      }
      if (sub_D1C38(0xD8u, 7))
      {
        int v61 = sub_D1C7C(0xD8u);
        __uint64_t v62 = sub_DDEFC();
        __uint64_t v63 = (const char *)sub_D1CB0(7);
        if (v61)
        {
          printf("%lld %d AVE %s: %s firstTimeInTimeRange value %lld timescale %d flags %d\n", v62, 216, v63, "AVE_H264EndPass", v125.value, v125.timescale, v125.flags);
          __uint64_t v62 = sub_DDEFC();
          sub_D1CB0(7);
        }
        syslog(3, "%lld %d AVE %s: %s firstTimeInTimeRange value %lld timescale %d flags %d", v62);
        CFAllocatorRef v52 = kCFAllocatorDefault;
      }
      long long v119 = *(_OWORD *)&kCMTimeInvalid.value;
      CMTimeEpoch v120 = kCMTimeInvalid.epoch;
      if (VTMultiPassStorageGetTimeStampAndDuration())
      {
        if (sub_D1C38(3u, 4))
        {
          int v70 = sub_D1C7C(3u);
          __uint64_t v71 = sub_DDEFC();
          int v72 = (const char *)sub_D1CB0(4);
          if (v70)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStampAndDuration kVTMultiPassStorageStep_GetLastTimeStamp failed.\n", v71, 3, v72, "AVE_H264EndPass", 11293, "err == noErr");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStampAndDuration kVTMultiPassStorageStep_GetLastTimeStamp failed.");
        }
        goto LABEL_46;
      }
      if (sub_D1C38(0xD8u, 7))
      {
        int v73 = sub_D1C7C(0xD8u);
        __uint64_t v74 = sub_DDEFC();
        int v75 = (const char *)sub_D1CB0(7);
        if (v73)
        {
          printf("%lld %d AVE %s: %s lastTimeInTimeRange value %lld timescale %d flags %d\n", v74, 216, v75, "AVE_H264EndPass", v124.value, v124.timescale, v124.flags);
          __uint64_t v74 = sub_DDEFC();
          sub_D1CB0(7);
        }
        syslog(3, "%lld %d AVE %s: %s lastTimeInTimeRange value %lld timescale %d flags %d", v74);
        CFAllocatorRef v52 = kCFAllocatorDefault;
      }
      if (sub_D1C38(0xD8u, 7))
      {
        int v76 = sub_D1C7C(0xD8u);
        __uint64_t v77 = sub_DDEFC();
        int v78 = (const char *)sub_D1CB0(7);
        if (v76)
        {
          printf("%lld %d AVE %s: %s duration value %lld timescale %d flags %d\n", v77, 216, v78, "AVE_H264EndPass", v123.value, v123.timescale, v123.flags);
          __uint64_t v77 = sub_DDEFC();
          sub_D1CB0(7);
        }
        syslog(3, "%lld %d AVE %s: %s duration value %lld timescale %d flags %d", v77);
        CFAllocatorRef v52 = kCFAllocatorDefault;
      }
      CMTime lhs = v124;
      CMTime rhs = v123;
      CMTimeAdd(&v116.start, &lhs, &rhs);
      CMTime v124 = v116.start;
      if (sub_D1C38(0xD8u, 7))
      {
        int v79 = sub_D1C7C(0xD8u);
        __uint64_t v80 = sub_DDEFC();
        uint64_t v81 = (const char *)sub_D1CB0(7);
        if (v79)
        {
          printf("%lld %d AVE %s: %s modified lastTimeInTimeRange value %lld timescale %d flags %d\n", v80, 216, v81, "AVE_H264EndPass", v124.value, v124.timescale, v124.flags);
          __uint64_t v80 = sub_DDEFC();
          sub_D1CB0(7);
        }
        syslog(3, "%lld %d AVE %s: %s modified lastTimeInTimeRange value %lld timescale %d flags %d", v80);
        CFAllocatorRef v52 = kCFAllocatorDefault;
      }
      if (*(_DWORD *)(DerivedStorage + 25112) <= 1u && !v124.flags)
      {
        int v82 = *(_DWORD *)(DerivedStorage + 228);
        if (v82 < 1) {
          int v82 = 30;
        }
        *(void *)&v124.timescale = *(void *)&v125.timescale;
        v124.CMTimeEpoch epoch = v125.epoch;
        v124.value = v125.value + v125.timescale / v82;
      }
      if (!v125.flags)
      {
        if (sub_D1C38(3u, 4))
        {
          int v86 = sub_D1C7C(3u);
          __uint64_t v87 = sub_DDEFC();
          __uint64_t v88 = (const char *)sub_D1CB0(4);
          if (v86)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: firstTimeInTimeRange invalid.\n", v87, 3, v88, "AVE_H264EndPass", 11321, "firstTimeInTimeRange.flags != 0");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: firstTimeInTimeRange invalid.");
        }
        goto LABEL_46;
      }
      if (!v124.flags)
      {
        if (sub_D1C38(3u, 4))
        {
          int v89 = sub_D1C7C(3u);
          __uint64_t v90 = sub_DDEFC();
          int v91 = (const char *)sub_D1CB0(4);
          if (v89)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: lastTimeInTimeRange invalid.\n", v90, 3, v91, "AVE_H264EndPass", 11323, "lastTimeInTimeRange.flags != 0");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: lastTimeInTimeRange invalid.");
        }
        goto LABEL_46;
      }
      memset(&v116, 0, sizeof(v116));
      CMTime start = v125;
      CMTime end = v124;
      CMTimeRangeFromTimeToTime(&v116, &start, &end);
      if (sub_D1C38(0xD8u, 6))
      {
        int v83 = sub_D1C7C(0xD8u);
        __uint64_t v84 = sub_DDEFC();
        __uint64_t v85 = (const char *)sub_D1CB0(6);
        if (v83)
        {
          printf("%lld %d AVE %s: Start %lld, %d, %d; Duration %lld, %d, %d\n",
            v84,
            216,
            v85,
            v116.start.value,
            v116.start.timescale,
            v116.start.flags,
            v116.duration.value,
            v116.duration.timescale,
            v116.duration.flags);
          __uint64_t v84 = sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: Start %lld, %d, %d; Duration %lld, %d, %d", v84, 216);
        CFAllocatorRef v52 = kCFAllocatorDefault;
      }
      CMTimeRange range = v116;
      CFDictionaryRef v92 = CMTimeRangeCopyAsDictionary(&range, v52);
      if (!v92)
      {
        if (sub_D1C38(3u, 4))
        {
          int v104 = sub_D1C7C(3u);
          __uint64_t v105 = sub_DDEFC();
          uint64_t v106 = (const char *)sub_D1CB0(4);
          if (v104)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: CMTimeRangeCopyAsDictionary failed.\n", v105, 3, v106, "AVE_H264EndPass", 11332, "currentTimeRangeDictionary != __null");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CMTimeRangeCopyAsDictionary failed.");
        }
        goto LABEL_65;
      }
      CFDictionaryRef v93 = v92;
      CFArrayAppendValue(v54, v92);
      CFRelease(v93);
      CFIndex Count = CFArrayGetCount(v54);
      uint64_t v111 = malloc_type_malloc(48 * Count, 0x1000040EED21634uLL);
      if (!v111)
      {
        if (sub_D1C38(3u, 4))
        {
          int v107 = sub_D1C7C(3u);
          __uint64_t v108 = sub_DDEFC();
          uint64_t v109 = (const char *)sub_D1CB0(4);
          if (v107)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: malloc timeRanges failed.\n", v108, 3, v109, "AVE_H264EndPass", 11344, "timeRanges != __null");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: malloc timeRanges failed.");
        }
        goto LABEL_65;
      }
      if (Count >= 1)
      {
        CFIndex v95 = 0;
        __uint64_t v96 = v111;
        do
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v54, v95);
          CMTimeRangeMakeFromDictionary(&theData, ValueAtIndex);
          long long v98 = *(_OWORD *)&theData.start.value;
          long long v99 = *(_OWORD *)&theData.duration.timescale;
          v96[1] = *(_OWORD *)&theData.start.epoch;
          v96[2] = v99;
          *__uint64_t v96 = v98;
          v96 += 3;
          ++v95;
        }
        while (Count != v95);
      }
      int Pass = VTEncoderSessionSetTimeRangesForNextPass();
      free(v111);
      CFRelease(v54);
      if (Pass)
      {
        if (sub_D1C38(3u, 4))
        {
          int v101 = sub_D1C7C(3u);
          __uint64_t v102 = sub_DDEFC();
          __uint64_t v103 = (const char *)sub_D1CB0(4);
          if (v101)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: VTEncoderSessionSetTimeRangesForNextPass failed.\n", v102, 3, v103, "AVE_H264EndPass", 11366, "err == noErr");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTEncoderSessionSetTimeRangesForNextPass failed.");
        }
        goto LABEL_46;
      }
    }
    uint64_t v38 = 0;
    v10[50] = v10[1];
    v10[1] = 0;
    goto LABEL_47;
  }
  if (sub_D1C38(3u, 4))
  {
    int v15 = sub_D1C7C(3u);
    __uint64_t v16 = sub_DDEFC();
    __uint64_t v17 = (const char *)sub_D1CB0(4);
    if (v15)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v16, 3, v17, "AVE_H264EndPass", 11166, "encoderPrivateStorage");
      __uint64_t v18 = sub_DDEFC();
      uint64_t v110 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v18, 3, v110, "AVE_H264EndPass", 11166, "encoderPrivateStorage");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v16, 3, v17, "AVE_H264EndPass", 11166, "encoderPrivateStorage");
    }
  }
  uint64_t v38 = 4294954384;
LABEL_48:
  if (sub_D1C38(0x14u, 6))
  {
    int v39 = sub_D1C7C(0x14u);
    __uint64_t v40 = sub_DDEFC();
    int v41 = (const char *)sub_D1CB0(6);
    if (v39)
    {
      printf("%lld %d AVE %s: Exit %s %p %p %p %d\n", v40, 20, v41, "AVE_H264EndPass", a1, a2, a3, v38);
      __uint64_t v40 = sub_DDEFC();
      sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: Exit %s %p %p %p %d", v40, 20);
  }
  return v38;
}

uint64_t sub_3BC38(const void *a1, char *a2, const void *a3, unint64_t a4, const void *a5)
{
  int v6 = a4;
  unint64_t v7 = HIDWORD(a4);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (sub_D1C38(0x14u, 6))
  {
    int v9 = sub_D1C7C(0x14u);
    __uint64_t v10 = sub_DDEFC();
    __uint64_t v11 = (const char *)sub_D1CB0(6);
    if (v9)
    {
      printf("%lld %d AVE %s: Enter %s %p %p %p %dx%d %p\n", v10, 20, v11, "AVE_H264StartTileSession", a1, a2, a3, v6, v7, a5);
      __uint64_t v12 = sub_DDEFC();
      int v79 = sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: Enter %s %p %p %p %dx%d %p", v12, 20, v79);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Enter %s %p %p %p %dx%d %p", v10, 20, v11);
    }
  }
  if (!DerivedStorage)
  {
    if (sub_D1C38(3u, 4))
    {
      int v17 = sub_D1C7C(3u);
      __uint64_t v18 = sub_DDEFC();
      int v19 = (const char *)sub_D1CB0(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v18, 3, v19, "AVE_H264StartTileSession", 11616, "encoderPrivateStorage");
        __uint64_t v20 = sub_DDEFC();
        uint64_t v81 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v20, 3, v81, "AVE_H264StartTileSession", 11616, "encoderPrivateStorage");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v18, 3, v19, "AVE_H264StartTileSession", 11616, "encoderPrivateStorage");
      }
    }
    __uint64_t v36 = 0;
    uint64_t v37 = 4294954384;
    goto LABEL_53;
  }
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 25120));
  if (sub_D1C38(0x14u, 7))
  {
    int v13 = sub_D1C7C(0x14u);
    __uint64_t v14 = sub_DDEFC();
    int v15 = (const char *)sub_D1CB0(7);
    if (v13)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_H264StartTileSession w %d, h %d\n", v14, 20, v15, v6, v7);
      __uint64_t v16 = sub_DDEFC();
      __uint64_t v80 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_H264StartTileSession w %d, h %d", v16, 20, v80, v6, v7);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_H264StartTileSession w %d, h %d", v14, 20, v15, v6, v7);
    }
  }
  uint64_t v21 = *(void *)(DerivedStorage + 20368);
  __uint64_t v22 = sub_DDEFC();
  sub_C086C(v21, 3u, v22);
  if (*(_DWORD *)(DerivedStorage + 25184)) {
    *(void *)(DerivedStorage + 25192) = sub_DDEFC();
  }
  if (!a1)
  {
    if (sub_D1C38(3u, 4))
    {
      int v27 = sub_D1C7C(3u);
      __uint64_t v28 = sub_DDEFC();
      int v29 = (const char *)sub_D1CB0(4);
      if (v27)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: encoder NULL.\n", v28, 3, v29, "AVE_H264StartTileSession", 11629, "encoder");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: encoder NULL.");
    }
    goto LABEL_52;
  }
  if (!a2)
  {
    if (sub_D1C38(3u, 4))
    {
      int v30 = sub_D1C7C(3u);
      __uint64_t v31 = sub_DDEFC();
      int v32 = (const char *)sub_D1CB0(4);
      if (v30)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: session NULL.\n", v31, 3, v32, "AVE_H264StartTileSession", 11630, "session");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: session NULL.");
    }
    goto LABEL_52;
  }
  if (v6 <= 1)
  {
    if (sub_D1C38(3u, 4))
    {
      int v33 = sub_D1C7C(3u);
      __uint64_t v34 = sub_DDEFC();
      int v35 = (const char *)sub_D1CB0(4);
      if (v33)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: dimensions.width (%dx%d) not supported.\n", v34, 3, v35, "AVE_H264StartTileSession", 11631, "tileDimensions.width >= 2", v6, v7);
        __uint64_t v34 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: dimensions.width (%dx%d) not supported.", v34);
    }
    goto LABEL_52;
  }
  if ((int)v7 <= 1)
  {
    if (sub_D1C38(3u, 4))
    {
      int v38 = sub_D1C7C(3u);
      __uint64_t v39 = sub_DDEFC();
      __uint64_t v40 = (const char *)sub_D1CB0(4);
      if (v38)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: dimensions.height (%dx%d) not supported.\n", v39, 3, v40, "AVE_H264StartTileSession", 11632, "tileDimensions.height >= 2", v6, v7);
        __uint64_t v39 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: dimensions.height (%dx%d) not supported.", v39);
    }
LABEL_52:
    __uint64_t v36 = 0;
    uint64_t v37 = 4294954394;
    goto LABEL_53;
  }
  *(void *)(DerivedStorage + 8) = a2;
  *(_DWORD *)(DerivedStorage + 1880) = v6;
  *(_DWORD *)(DerivedStorage + 1884) = v7;
  *(_DWORD *)(DerivedStorage + 19468) = v6;
  *(_DWORD *)(DerivedStorage + 19472) = v7;
  sub_3EF70(DerivedStorage);
  *(void *)(DerivedStorage + 16) = a5;
  if (a5) {
    CFRetain(a5);
  }
  sub_3F288(DerivedStorage);
  if (sub_D1C38(0x14u, 7))
  {
    int v23 = sub_D1C7C(0x14u);
    __uint64_t v24 = sub_DDEFC();
    __uint64_t v25 = (const char *)sub_D1CB0(7);
    if (v23)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_SetEncoderTileDefault\n", v24, 20, v25);
      __uint64_t v26 = sub_DDEFC();
      int v82 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetEncoderTileDefault", v26, 20, v82);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetEncoderTileDefault", v24, 20, v25);
    }
  }
  *(unsigned char *)(DerivedStorage + 18849) = 1;
  *(_DWORD *)(DerivedStorage + 1920) = 0;
  *(_DWORD *)(DerivedStorage + 1944) = 0;
  *(_DWORD *)(DerivedStorage + 2024) &= ~4u;
  if (*(_DWORD *)(DerivedStorage + 196) != 3)
  {
    *(_DWORD *)(DerivedStorage + 196) = 3;
    if (!*(unsigned char *)(DerivedStorage + 18844))
    {
      *(void *)(DerivedStorage + 1824) = 0xC0000000CLL;
      *(_DWORD *)(DerivedStorage + 1832) = 12;
    }
    *(_DWORD *)(DerivedStorage + 228) = 30;
    *(unsigned char *)(DerivedStorage + 244) = 1;
    *(unsigned char *)(DerivedStorage + 252) = 0;
    *(unsigned char *)(DerivedStorage + 246) = 1;
    *(unsigned char *)(DerivedStorage + 18684) = 1;
  }
  *(_DWORD *)(DerivedStorage + 2012) = -1;
  *(unsigned char *)(DerivedStorage + 216) = 0;
  *(_WORD *)(DerivedStorage + 17892) = 1;
  *(_DWORD *)(DerivedStorage + 17884) = 2;
  *(_DWORD *)(DerivedStorage + 17936) = 7;
  *(_DWORD *)(DerivedStorage + 22576) = 1;
  *(_DWORD *)(DerivedStorage + 20436) = 6;
  *(unsigned char *)(DerivedStorage + 251) = 1;
  *(_DWORD *)(DerivedStorage + 260) = 0;
  *(_OWORD *)(DerivedStorage + 18685) = 0u;
  *(_OWORD *)(DerivedStorage + 18701) = 0u;
  *(_OWORD *)(DerivedStorage + 18717) = 0u;
  *(_OWORD *)(DerivedStorage + 18727) = 0u;
  sub_49398((int32x4_t *)DerivedStorage);
  *(_WORD *)(DerivedStorage + 18336) = 0;
  *(_DWORD *)(DerivedStorage + 2024) &= ~1u;
  *(unsigned char *)(DerivedStorage + 18860) = 0;
  if (sub_D1C38(0x14u, 7))
  {
    int v41 = sub_D1C7C(0x14u);
    __uint64_t v42 = sub_DDEFC();
    int v43 = (const char *)sub_D1CB0(7);
    if (v41)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_SetEncoderTileDefault\n", v42, 20, v43);
      __uint64_t v44 = sub_DDEFC();
      int v83 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_SetEncoderTileDefault", v44, 20, v83);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_SetEncoderTileDefault", v42, 20, v43);
    }
  }
  uint64_t v56 = sub_BFB8();
  if (v56)
  {
    uint64_t v37 = v56;
    if (sub_D1C38(3u, 4))
    {
      int v57 = sub_D1C7C(3u);
      __uint64_t v58 = sub_DDEFC();
      __uint64_t v59 = (const char *)sub_D1CB0(4);
      if (v57)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: createH264PixelBufferAttributesDictionary failed.\n", v58, 3, v59, "AVE_H264StartTileSession", 11673, "err == noErr");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: createH264PixelBufferAttributesDictionary failed.");
    }
LABEL_78:
    __uint64_t v36 = 0;
    goto LABEL_53;
  }
  if (a2 == (unsigned char *)&def_D6434 + 1)
  {
    if (sub_D1C38(0x14u, 7))
    {
      int v64 = sub_D1C7C(0x14u);
      __uint64_t v65 = sub_DDEFC();
      int v66 = (const char *)sub_D1CB0(7);
      if (v64)
      {
        printf("%lld %d AVE %s: FIG: session = FIGINTERNALSESSIONMARK\n", v65, 20, v66);
        __uint64_t v67 = sub_DDEFC();
        __uint64_t v85 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: FIG: session = FIGINTERNALSESSIONMARK", v67, 20, v85);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: session = FIGINTERNALSESSIONMARK", v65, 20, v66);
      }
    }
    __uint64_t v36 = 0;
    goto LABEL_92;
  }
  uint64_t v60 = VTTileEncoderSessionSetTileAttributes();
  if (v60)
  {
    uint64_t v37 = v60;
    if (sub_D1C38(3u, 4))
    {
      int v61 = sub_D1C7C(3u);
      __uint64_t v62 = sub_DDEFC();
      __uint64_t v63 = (const char *)sub_D1CB0(4);
      if (v61)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: VTTileEncoderSessionSetTileAttributes failed.\n", v62, 3, v63, "AVE_H264StartTileSession", 11690, "err == noErr");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTTileEncoderSessionSetTileAttributes failed.");
    }
    goto LABEL_78;
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    __uint64_t v36 = Mutable;
    if (*(int *)(DerivedStorage + 25240) >= 11) {
      CFDictionaryAddValue(Mutable, kVTTileEncoderRequirement_EncoderSupportsSourcePadding, kCFBooleanTrue);
    }
    uint64_t v69 = VTTileEncoderSessionSetTileEncodeRequirements();
    if (v69)
    {
      uint64_t v37 = v69;
      if (sub_D1C38(3u, 4))
      {
        int v70 = sub_D1C7C(3u);
        __uint64_t v71 = sub_DDEFC();
        int v72 = (const char *)sub_D1CB0(4);
        if (v70)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: %s:%d failed.\n", v71, 3, v72, "AVE_H264StartTileSession", 11701, "err == noErr", "AVE_H264StartTileSession", 11701);
          __uint64_t v87 = sub_DDEFC();
          sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: %s:%d failed.", v87, 3);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: %s:%d failed.", v71, 3);
        }
      }
      goto LABEL_53;
    }
LABEL_92:
    *(void *)(DerivedStorage + 25108) = 30566;
    uint64_t v73 = *(void *)(DerivedStorage + 20368);
    __uint64_t v74 = sub_DDEFC();
    sub_C0C44(v73, 3u, v74);
    uint64_t v37 = 0;
    goto LABEL_53;
  }
  if (sub_D1C38(3u, 4))
  {
    int v75 = sub_D1C7C(3u);
    __uint64_t v76 = sub_DDEFC();
    __uint64_t v77 = (const char *)sub_D1CB0(4);
    if (v75)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryCreateMutable failed.\n", v76, 3, v77, "AVE_H264StartTileSession", 11695, "TileRequirements");
      __uint64_t v78 = sub_DDEFC();
      int v86 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryCreateMutable failed.", v78, 3, v86, "AVE_H264StartTileSession", 11695, "TileRequirements");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryCreateMutable failed.", v76, 3, v77, "AVE_H264StartTileSession", 11695, "TileRequirements");
    }
  }
  __uint64_t v36 = 0;
  uint64_t v37 = 4294954392;
LABEL_53:
  if (v36) {
    CFRelease(v36);
  }
  if (DerivedStorage)
  {
    if (*(_DWORD *)(DerivedStorage + 25184))
    {
      *(void *)(DerivedStorage + 25200) = sub_DDEFC();
      if (sub_D1C38(0x18u, 6))
      {
        int v45 = sub_D1C7C(0x18u);
        __uint64_t v46 = sub_DDEFC();
        __uint64_t v47 = (const char *)sub_D1CB0(6);
        uint64_t v48 = *(void *)(DerivedStorage + 25200) - *(void *)(DerivedStorage + 25192);
        if (v45)
        {
          printf("%lld %d AVE %s: FIG: AVE_H264StartTileSession took %lld us\n", v46, 24, v47, v48);
          __uint64_t v49 = sub_DDEFC();
          __uint64_t v84 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: AVE_H264StartTileSession took %lld us", v49, 24, v84, *(void *)(DerivedStorage + 25200) - *(void *)(DerivedStorage + 25192));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: AVE_H264StartTileSession took %lld us", v46, 24, v47, v48);
        }
      }
    }
    pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 25120));
  }
  if (sub_D1C38(0x14u, 6))
  {
    int v50 = sub_D1C7C(0x14u);
    __uint64_t v51 = sub_DDEFC();
    CFAllocatorRef v52 = (const char *)sub_D1CB0(6);
    if (v50)
    {
      printf("%lld %d AVE %s: Exit %s %p %p %p %dx%d %p %d\n", v51, 20, v52, "AVE_H264StartTileSession", a1, a2, a3, v6, v7, a5, v37);
      __uint64_t v53 = sub_DDEFC();
      int v54 = sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: Exit %s %p %p %p %dx%d %p %d", v53, 20, v54, "AVE_H264StartTileSession");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p %p %p %dx%d %p %d", v51, 20, v52, "AVE_H264StartTileSession");
    }
  }
  return v37;
}

uint64_t sub_3CAE4(const void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (sub_D1C38(0x14u, 6))
  {
    int v5 = sub_D1C7C(0x14u);
    __uint64_t v6 = sub_DDEFC();
    unint64_t v7 = (const char *)sub_D1CB0(6);
    if (v5)
    {
      printf("%lld %d AVE %s: Enter %s %p %d\n", v6, 20, v7, "AVE_H264PrepareToEncodeTiles", a1, a2);
      __uint64_t v8 = sub_DDEFC();
      __uint64_t v44 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: Enter %s %p %d", v8, 20, v44, "AVE_H264PrepareToEncodeTiles", a1, a2);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Enter %s %p %d", v6, 20, v7, "AVE_H264PrepareToEncodeTiles", a1, a2);
    }
  }
  if (DerivedStorage)
  {
    if (a2)
    {
      if (sub_D1C38(3u, 4))
      {
        int v9 = sub_D1C7C(3u);
        __uint64_t v10 = sub_DDEFC();
        __uint64_t v11 = (const char *)sub_D1CB0(4);
        if (v9)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: expectPartialTiles = true. Not supported yet -> Fail\n", v10, 3, v11, "AVE_H264PrepareToEncodeTiles", 11759, "expectPartialTiles == false");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: expectPartialTiles = true. Not supported yet -> Fail");
      }
LABEL_17:
      uint64_t v20 = 0;
LABEL_37:
      pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 25120));
      goto LABEL_38;
    }
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 25120));
    if (sub_D1C38(0x14u, 7))
    {
      int v16 = sub_D1C7C(0x14u);
      __uint64_t v17 = sub_DDEFC();
      __uint64_t v18 = (const char *)sub_D1CB0(7);
      if (v16)
      {
        printf("%lld %d AVE %s: AVE ENTER AVE_H264PrepareToEncodeTiles\n", v17, 20, v18);
        __uint64_t v19 = sub_DDEFC();
        __uint64_t v46 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: AVE ENTER AVE_H264PrepareToEncodeTiles", v19, 20, v46);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AVE ENTER AVE_H264PrepareToEncodeTiles", v17, 20, v18);
      }
    }
    if (*(_DWORD *)(DerivedStorage + 25184)) {
      *(void *)(DerivedStorage + 25192) = sub_DDEFC();
    }
    sub_DDEFC();
    if (*(_DWORD *)(DerivedStorage + 25108) == 30566)
    {
      uint64_t v21 = sub_43720(DerivedStorage);
      if (v21)
      {
        uint64_t v20 = v21;
        if (sub_D1C38(3u, 4))
        {
          int v22 = sub_D1C7C(3u);
          __uint64_t v23 = sub_DDEFC();
          __uint64_t v24 = (const char *)sub_D1CB0(4);
          if (v22)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed\n", v23, 3, v24, "AVE_H264PrepareToEncodeTiles", 11776, "err == noErr");
            __uint64_t v25 = sub_DDEFC();
            __uint64_t v47 = (const char *)sub_D1CB0(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed", v25, 3, v47, "AVE_H264PrepareToEncodeTiles", 11776, "err == noErr");
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed", v23, 3, v24, "AVE_H264PrepareToEncodeTiles", 11776, "err == noErr");
          }
        }
        goto LABEL_37;
      }
      *(_DWORD *)(DerivedStorage + 18672) = 1;
      if (sub_D1C38(0x1Eu, 6))
      {
        int v29 = sub_D1C7C(0x1Eu);
        __uint64_t v30 = sub_DDEFC();
        __uint64_t v31 = (const char *)sub_D1CB0(6);
        if (v29)
        {
          printf("%lld %d AVE %s: FIG: received PrepareToEncodeTiles\n", v30, 30, v31);
          __uint64_t v32 = sub_DDEFC();
          uint64_t v48 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: received PrepareToEncodeTiles", v32, 30, v48);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: received PrepareToEncodeTiles", v30, 30, v31);
        }
      }
      if (!sub_B007C())
      {
        *(_DWORD *)(DerivedStorage + 25108) = 30567;
        if (*(_DWORD *)(DerivedStorage + 25184))
        {
          *(void *)(DerivedStorage + 25200) = sub_DDEFC();
          if (sub_D1C38(0x18u, 6))
          {
            int v41 = sub_D1C7C(0x18u);
            __uint64_t v42 = sub_DDEFC();
            int v43 = (const char *)sub_D1CB0(6);
            if (v41)
            {
              printf("%lld %d AVE %s: FIG: (%d) AVE_H264PrepareToEncodeTiles took %lld us\n", v42, 24, v43, 0, *(void *)(DerivedStorage + 25200) - *(void *)(DerivedStorage + 25192));
              sub_DDEFC();
              sub_D1CB0(6);
            }
            syslog(3, "%lld %d AVE %s: FIG: (%d) AVE_H264PrepareToEncodeTiles took %lld us");
          }
        }
        goto LABEL_17;
      }
      if (sub_D1C38(3u, 4))
      {
        int v38 = sub_D1C7C(3u);
        __uint64_t v39 = sub_DDEFC();
        __uint64_t v40 = (const char *)sub_D1CB0(4);
        if (v38)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Prepare failed.\n", v39, 3, v40, "AVE_H264PrepareToEncodeTiles", 11806, "err == noErr");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Prepare failed.");
      }
    }
    else if (sub_D1C38(3u, 4))
    {
      int v26 = sub_D1C7C(3u);
      __uint64_t v27 = sub_DDEFC();
      __uint64_t v28 = (const char *)sub_D1CB0(4);
      if (v26)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_H264PrepareToEncodeTiles with encoderPrivateStorage->SessionStatus %x.\n", v27, 3, v28, "AVE_H264PrepareToEncodeTiles", 11815, "false", *(_DWORD *)(DerivedStorage + 25108));
        __uint64_t v27 = sub_DDEFC();
        __uint64_t v28 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_H264PrepareToEncodeTiles with encoderPrivateStorage->SessionStatus %x.", v27, 3, v28, "AVE_H264PrepareToEncodeTiles", 11815, "false", *(unsigned int *)(DerivedStorage + 25108));
    }
    uint64_t v20 = 4294954384;
    goto LABEL_37;
  }
  if (sub_D1C38(3u, 4))
  {
    int v12 = sub_D1C7C(3u);
    __uint64_t v13 = sub_DDEFC();
    __uint64_t v14 = (const char *)sub_D1CB0(4);
    if (v12)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v13, 3, v14, "AVE_H264PrepareToEncodeTiles", 11757, "encoderPrivateStorage");
      __uint64_t v15 = sub_DDEFC();
      int v45 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v15, 3, v45, "AVE_H264PrepareToEncodeTiles", 11757, "encoderPrivateStorage");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v13, 3, v14, "AVE_H264PrepareToEncodeTiles", 11757, "encoderPrivateStorage");
    }
  }
  uint64_t v20 = 4294954384;
LABEL_38:
  if (sub_D1C38(0x14u, 6))
  {
    int v33 = sub_D1C7C(0x14u);
    __uint64_t v34 = sub_DDEFC();
    int v35 = (const char *)sub_D1CB0(6);
    if (v33)
    {
      printf("%lld %d AVE %s: Exit %s %p %d %d\n", v34, 20, v35, "AVE_H264PrepareToEncodeTiles", a1, a2, v20);
      __uint64_t v36 = sub_DDEFC();
      sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: Exit %s %p %d %d", v36);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p %d %d", v34);
    }
  }
  return v20;
}

uint64_t sub_3D2EC()
{
  __chkstk_darwin();
  __uint64_t v1 = v0;
  CFDictionaryRef v3 = v2;
  unint64_t v5 = v4;
  unint64_t v7 = v6;
  uint64_t v9 = v8;
  CVPixelBufferRef v177 = v10;
  char v176 = 0;
  int v175 = 0;
  int v174 = 0;
  __uint64_t v11 = (char *)sub_C7604();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v13 = DerivedStorage;
  uint64_t v158 = DerivedStorage + 18012;
  if (!DerivedStorage)
  {
    if (sub_D1C38(3u, 4))
    {
      int v18 = sub_D1C7C(3u);
      __uint64_t v19 = sub_DDEFC();
      uint64_t v20 = (const char *)sub_D1CB0(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v19, 3, v20, "AVE_H264EncodeTile", 11856, "encoderPrivateStorage");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.");
    }
    goto LABEL_42;
  }
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 25120));
  if (sub_D1C38(0x14u, 7))
  {
    int v14 = sub_D1C7C(0x14u);
    __uint64_t v15 = sub_DDEFC();
    int v16 = (const char *)sub_D1CB0(7);
    if (v14)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_H264EncodeTile\n", v15, 20, v16);
      __uint64_t v17 = sub_DDEFC();
      __uint64_t v151 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_H264EncodeTile", v17, 20, v151);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_H264EncodeTile", v15, 20, v16);
    }
  }
  if (v3 && CFDictionaryContainsKey(v3, @"SessionIndicator")) {
    sub_C0600(*(void *)(v13 + 20368));
  }
  if (!*(_DWORD *)(v158 + 7100))
  {
    uint64_t v21 = *(void *)(v13 + 20368);
    __uint64_t v22 = sub_DDEFC();
    sub_C086C(v21, 5u, v22);
  }
  if (*(_DWORD *)(v158 + 7172)) {
    *(void *)(v13 + 25192) = sub_DDEFC();
  }
  if (!v177)
  {
    if (sub_D1C38(3u, 4))
    {
      int v30 = sub_D1C7C(3u);
      __uint64_t v31 = sub_DDEFC();
      __uint64_t v32 = (const char *)sub_D1CB0(4);
      if (v30)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: imageBuffer = NULL.\n", v31, 3, v32, "AVE_H264EncodeTile", 11879, "imageBuffer");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: imageBuffer = NULL.");
    }
    goto LABEL_88;
  }
  __uint64_t v23 = (unsigned __int8 *)(v13 + 25216);
  __uint64_t v157 = sub_DDEFC();
  if (*(int *)(v13 + 228) >= 1) {
    int v24 = *(_DWORD *)(v13 + 228);
  }
  else {
    int v24 = 30;
  }
  sub_DDCA0(v24, v13 + 25984);
  uint64_t v156 = v9;
  if (sub_D1C38(0x33u, 7))
  {
    int v25 = sub_D1C7C(0x33u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(7);
    if (v25)
    {
      printf("%lld %d AVE %s: %s:%d %d %d timestamp %lld / %d\n", v26, 51, v27, "AVE_H264EncodeTile", 11888, *(_DWORD *)(v13 + 25232), *(_DWORD *)(v158 + 7100), *(void *)(v13 + 25984), *(_DWORD *)(v13 + 25992));
      __uint64_t v28 = sub_DDEFC();
      int v29 = sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s:%d %d %d timestamp %lld / %d", v28, 51, v29);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %d %d timestamp %lld / %d", v26, 51, v27);
    }
    __uint64_t v23 = (unsigned __int8 *)(v13 + 25216);
  }
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v177);
  *((_DWORD *)v23 + 320) = PixelFormatType;
  if (!*(_DWORD *)(v158 + 7100))
  {
    uint64_t v180 = *(void *)(v13 + 1880);
    __uint64_t v34 = sub_D7E18(PixelFormatType);
    if (!v34)
    {
      if (sub_D1C38(3u, 4))
      {
        int v51 = sub_D1C7C(3u);
        __uint64_t v52 = sub_DDEFC();
        __uint64_t v53 = (const char *)sub_D1CB0(4);
        if (v51)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to find pixel format %p %d 0x%x\n", v52, 3, v53, "AVE_H264EncodeTile", 11902, "pPixelFmt != __null", (const void *)v13, *((_DWORD *)v23 + 4), *((_DWORD *)v23 + 320));
          __uint64_t v52 = sub_DDEFC();
          __uint64_t v53 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to find pixel format %p %d 0x%x", v52, 3, v53, "AVE_H264EncodeTile", 11902, "pPixelFmt != __null", v13, *((unsigned int *)v23 + 4), *((unsigned int *)v23 + 320));
      }
      goto LABEL_88;
    }
    if (v11[792]) {
      int v35 = v11 + 792;
    }
    else {
      int v35 = 0;
    }
    sub_49A0(*(void *)(v13 + 26480), v35, *((_DWORD *)v23 + 5), *(_DWORD *)(v158 + 748), *((_DWORD *)v11 + 196), *((_DWORD *)v11 + 197), &v180, 1, *((_DWORD *)v34 + 3), *((_DWORD *)v34 + 1), *(_DWORD *)(v13 + 192));
    sub_5058(*(_DWORD **)(v13 + 26480), -1, v177);
  }
  int v36 = *(_DWORD *)(v158 + 7096);
  switch(v36)
  {
    case 30566:
      if (sub_D17D4(v177)) {
        int v42 = 1;
      }
      else {
        int v42 = 2;
      }
      *(_DWORD *)(v158 + 792) = v42;
      if (sub_43720(v13))
      {
        if (sub_D1C38(3u, 4))
        {
          int v43 = sub_D1C7C(3u);
          __uint64_t v44 = sub_DDEFC();
          int v45 = (const char *)sub_D1CB0(4);
          if (v43)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed\n", v44, 3, v45, "AVE_H264EncodeTile", 12019, "err == noErr");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed");
        }
        goto LABEL_88;
      }
      sub_3FD50(v13, v177);
      if (sub_3F8A8(v13, &v177, &v176, &v175, &v174, 1))
      {
        if (sub_D1C38(3u, 4))
        {
          int v54 = sub_D1C7C(3u);
          __uint64_t v38 = sub_DDEFC();
          __uint64_t v39 = (const char *)sub_D1CB0(4);
          if (!v54)
          {
LABEL_87:
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_AVC_VerifyImageBuffer failed.");
            goto LABEL_88;
          }
          int v40 = 12029;
LABEL_68:
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_AVC_VerifyImageBuffer failed.\n", v38, 3, v39, "AVE_H264EncodeTile", v40, "err == noErr");
          sub_DDEFC();
          sub_D1CB0(4);
          goto LABEL_87;
        }
LABEL_88:
        uint64_t v41 = 4294954394;
        goto LABEL_89;
      }
      sub_3FF70();
      if (sub_40010(v13))
      {
        if (!sub_D1C38(3u, 4)) {
          goto LABEL_88;
        }
        int v59 = sub_D1C7C(3u);
        __uint64_t v56 = sub_DDEFC();
        int v57 = (const char *)sub_D1CB0(4);
        if (v59)
        {
          int v58 = 12039;
          goto LABEL_82;
        }
LABEL_104:
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ValidateEncoderParameters failed");
        goto LABEL_88;
      }
      uint64_t v73 = v13 + 18640;
      sub_4296C(v13, v177);
      if (*(_DWORD *)(v158 + 7172))
      {
        *(void *)(v13 + 25200) = sub_DDEFC();
        if (sub_D1C38(0x18u, 6))
        {
          __uint64_t v74 = v23;
          int v75 = sub_D1C7C(0x18u);
          __uint64_t v76 = sub_DDEFC();
          __uint64_t v77 = (const char *)sub_D1CB0(6);
          uint64_t v78 = *(void *)(v13 + 25200) - *(void *)(v13 + 25192);
          if (v75)
          {
            printf("%lld %d AVE %s: FIG: (%d) Init setup  took %lld ms\n", v76, 24, v77, *(_DWORD *)(v158 + 7100), v78);
            __uint64_t v79 = sub_DDEFC();
            __uint64_t v80 = (const char *)sub_D1CB0(6);
            syslog(3, "%lld %d AVE %s: FIG: (%d) Init setup  took %lld ms", v79, 24, v80, *(_DWORD *)(v158 + 7100), *(void *)(v13 + 25200) - *(void *)(v13 + 25192));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: (%d) Init setup  took %lld ms", v76, 24, v77, *(_DWORD *)(v158 + 7100), v78);
          }
          __uint64_t v23 = v74;
          uint64_t v73 = v13 + 18640;
        }
        *(void *)(v13 + 25192) = sub_DDEFC();
      }
      long long v191 = 0u;
      long long v192 = 0u;
      long long v190 = 0u;
      uint64_t v180 = v13 + 1872;
      uint64_t v181 = v13 + 1880;
      uint64_t v182 = v73;
      uint64_t v183 = v13 + 192;
      uint64_t v86 = *(void *)(v13 + 26480);
      uint64_t v184 = *(void *)(v13 + 20368);
      uint64_t v185 = v86;
      uint64_t v186 = *(void *)(v13 + 25256);
      uint64_t v187 = v13 + 20376;
      uint64_t v188 = v13 + 22096;
      uint64_t v189 = v13 + 22484;
      uint64_t v193 = 0;
      __uint64_t v194 = v157;
      if (sub_B25A4(*(void *)(v13 + 24), (uint64_t)&v180, v13 + 32, 0, *(void *)(v13 + 8), *(void *)(v13 + 16), *v23, *(void *)(v13 + 25264), v13 + 64, (_DWORD *)(v13 + 20176), (void *)(v13 + 19476)))
      {
        if (!sub_D1C38(3u, 4)) {
          goto LABEL_42;
        }
        int v87 = sub_D1C7C(3u);
        __uint64_t v83 = sub_DDEFC();
        __uint64_t v84 = (const char *)sub_D1CB0(4);
        if (v87)
        {
          int v85 = 12086;
          goto LABEL_120;
        }
LABEL_183:
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Start failed.");
        goto LABEL_42;
      }
      break;
    case 30567:
      if (sub_D17D4(v177)) {
        int v46 = 1;
      }
      else {
        int v46 = 2;
      }
      *(_DWORD *)(v158 + 792) = v46;
      sub_3FD50(v13, v177);
      if (sub_3F8A8(v13, &v177, &v176, &v175, &v174, 1))
      {
        if (sub_D1C38(3u, 4))
        {
          int v47 = sub_D1C7C(3u);
          __uint64_t v38 = sub_DDEFC();
          __uint64_t v39 = (const char *)sub_D1CB0(4);
          if (!v47) {
            goto LABEL_87;
          }
          int v40 = 11938;
          goto LABEL_68;
        }
        goto LABEL_88;
      }
      sub_3FF70();
      if (sub_40010(v13))
      {
        if (!sub_D1C38(3u, 4)) {
          goto LABEL_88;
        }
        int v55 = sub_D1C7C(3u);
        __uint64_t v56 = sub_DDEFC();
        int v57 = (const char *)sub_D1CB0(4);
        if (v55)
        {
          int v58 = 11948;
LABEL_82:
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_ValidateEncoderParameters failed\n", v56, 3, v57, "AVE_H264EncodeTile", v58, "err == noErr");
          sub_DDEFC();
          sub_D1CB0(4);
          goto LABEL_104;
        }
        goto LABEL_104;
      }
      uint64_t v60 = v13 + 18640;
      sub_4296C(v13, v177);
      if (*(_DWORD *)(v158 + 7172))
      {
        *(void *)(v13 + 25200) = sub_DDEFC();
        if (sub_D1C38(0x18u, 6))
        {
          int v61 = v23;
          int v62 = sub_D1C7C(0x18u);
          __uint64_t v63 = sub_DDEFC();
          int v64 = (const char *)sub_D1CB0(6);
          uint64_t v65 = *(void *)(v13 + 25200) - *(void *)(v13 + 25192);
          if (v62)
          {
            printf("%lld %d AVE %s: FIG: (%d) Pre Init setup  took %lld us\n", v63, 24, v64, *(_DWORD *)(v158 + 7100), v65);
            __uint64_t v66 = sub_DDEFC();
            __uint64_t v67 = (const char *)sub_D1CB0(6);
            syslog(3, "%lld %d AVE %s: FIG: (%d) Pre Init setup  took %lld us", v66, 24, v67, *(_DWORD *)(v158 + 7100), *(void *)(v13 + 25200) - *(void *)(v13 + 25192));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: (%d) Pre Init setup  took %lld us", v63, 24, v64, *(_DWORD *)(v158 + 7100), v65);
          }
          __uint64_t v23 = v61;
          uint64_t v60 = v13 + 18640;
        }
        *(void *)(v13 + 25192) = sub_DDEFC();
      }
      long long v191 = 0u;
      long long v192 = 0u;
      long long v190 = 0u;
      uint64_t v180 = v13 + 1872;
      uint64_t v181 = v13 + 1880;
      uint64_t v182 = v60;
      uint64_t v183 = v13 + 192;
      uint64_t v81 = *(void *)(v13 + 26480);
      uint64_t v184 = *(void *)(v13 + 20368);
      uint64_t v185 = v81;
      uint64_t v186 = *(void *)(v13 + 25256);
      uint64_t v187 = v13 + 20376;
      uint64_t v188 = v13 + 22096;
      uint64_t v189 = v13 + 22484;
      uint64_t v193 = 0;
      __uint64_t v194 = v157;
      if (sub_B25A4(*(void *)(v13 + 24), (uint64_t)&v180, v13 + 32, 0, *(void *)(v13 + 8), *(void *)(v13 + 16), *v23, *(void *)(v13 + 25264), v13 + 64, (_DWORD *)(v13 + 20176), (void *)(v13 + 19476)))
      {
        if (!sub_D1C38(3u, 4)) {
          goto LABEL_42;
        }
        int v82 = sub_D1C7C(3u);
        __uint64_t v83 = sub_DDEFC();
        __uint64_t v84 = (const char *)sub_D1CB0(4);
        if (v82)
        {
          int v85 = 11995;
LABEL_120:
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Start failed.\n", v83, 3, v84, "AVE_H264EncodeTile", v85, "err == noErr");
          sub_DDEFC();
          sub_D1CB0(4);
          goto LABEL_183;
        }
        goto LABEL_183;
      }
      break;
    case 30568:
      if (sub_3F8A8(v13, &v177, &v176, &v175, &v174, 0))
      {
        if (sub_D1C38(3u, 4))
        {
          int v37 = sub_D1C7C(3u);
          __uint64_t v38 = sub_DDEFC();
          __uint64_t v39 = (const char *)sub_D1CB0(4);
          if (!v37) {
            goto LABEL_87;
          }
          int v40 = 11921;
          goto LABEL_68;
        }
        goto LABEL_88;
      }
      goto LABEL_128;
    default:
      if (sub_D1C38(3u, 4))
      {
        int v48 = sub_D1C7C(3u);
        __uint64_t v49 = sub_DDEFC();
        int v50 = (const char *)sub_D1CB0(4);
        if (v48)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_H264EncodeFrame encoderPrivateStorage->SessionStatus = 0x%08x.\n", v49, 3, v50, "AVE_H264EncodeTile", 12103, "false", *(_DWORD *)(v158 + 7096));
          __uint64_t v49 = sub_DDEFC();
          int v50 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_H264EncodeFrame encoderPrivateStorage->SessionStatus = 0x%08x.", v49, 3, v50, "AVE_H264EncodeTile", 12103, "false", *(unsigned int *)(v158 + 7096));
      }
      goto LABEL_42;
  }
  *(_DWORD *)(v158 + 7096) = 30568;
  uint64_t v88 = v156;
  if (!*(_DWORD *)(v158 + 7172)) {
    goto LABEL_136;
  }
  *(void *)(v13 + 25200) = sub_DDEFC();
  if (sub_D1C38(0x18u, 6))
  {
    int v89 = v23;
    int v90 = sub_D1C7C(0x18u);
    __uint64_t v91 = sub_DDEFC();
    CFDictionaryRef v92 = (const char *)sub_D1CB0(6);
    uint64_t v93 = *(void *)(v13 + 25200) - *(void *)(v13 + 25192);
    if (v90)
    {
      printf("%lld %d AVE %s: FIG: (%d) AVE_USL_Drv_Start took %lld us\n", v91, 24, v92, *(_DWORD *)(v158 + 7100), v93);
      __uint64_t v94 = sub_DDEFC();
      CFIndex v95 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: FIG: (%d) AVE_USL_Drv_Start took %lld us", v94, 24, v95, *(_DWORD *)(v158 + 7100), *(void *)(v13 + 25200) - *(void *)(v13 + 25192));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: (%d) AVE_USL_Drv_Start took %lld us", v91, 24, v92, *(_DWORD *)(v158 + 7100), v93);
    }
    __uint64_t v23 = v89;
  }
  *(void *)(v13 + 25192) = sub_DDEFC();
LABEL_128:
  uint64_t v88 = v156;
  if (*(_DWORD *)(v158 + 7172) && *(_DWORD *)(v158 + 7096) == 30568)
  {
    *(void *)(v13 + 25200) = sub_DDEFC();
    if (sub_D1C38(0x18u, 6))
    {
      __uint64_t v96 = v23;
      int v97 = sub_D1C7C(0x18u);
      __uint64_t v98 = sub_DDEFC();
      long long v99 = (const char *)sub_D1CB0(6);
      uint64_t v100 = *(void *)(v13 + 25200) - *(void *)(v13 + 25192);
      if (v97)
      {
        printf("%lld %d AVE %s: FIG: (%d) AVE_AVC_VerifyImageBuffer took %lld us\n", v98, 24, v99, *(_DWORD *)(v158 + 7100), v100);
        __uint64_t v101 = sub_DDEFC();
        __uint64_t v102 = (const char *)sub_D1CB0(6);
        uint64_t v88 = v156;
        syslog(3, "%lld %d AVE %s: FIG: (%d) AVE_AVC_VerifyImageBuffer took %lld us", v101, 24, v102, *(_DWORD *)(v158 + 7100), *(void *)(v13 + 25200) - *(void *)(v13 + 25192));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: (%d) AVE_AVC_VerifyImageBuffer took %lld us", v98, 24, v99, *(_DWORD *)(v158 + 7100), v100);
      }
      __uint64_t v23 = v96;
    }
    *(void *)(v13 + 25192) = sub_DDEFC();
  }
LABEL_136:
  __uint64_t v103 = v1;
  *(_DWORD *)(v158 + 7096) = 30568;
  int v159 = 0;
  v162[1] = 0;
  long long v163 = 0u;
  long long v164 = 0u;
  long long v165 = 0u;
  long long v166 = 0u;
  long long v167 = 0u;
  long long v168 = 0u;
  memset(v169, 0, sizeof(v169));
  long long v170 = 0u;
  long long v171 = 0u;
  long long v172 = 0u;
  long long v173 = 0u;
  memset(v160, 0, sizeof(v160));
  uint64_t v161 = 0;
  bzero(&v180, 0x4AF8uLL);
  v162[0] = 0;
  v162[2] = v88;
  *(void *)&long long v163 = v177;
  BYTE8(v170) = v23[1];
  *(void *)&long long v171 = v157;
  DWORD2(v171) = *((_DWORD *)v23 + 15);
  *(_OWORD *)&v169[1] = *(_OWORD *)(v13 + 25984);
  if (*(_DWORD *)(v158 + 792) == 2)
  {
    sub_D196C(v177, v160);
    sub_5734(*(void **)(v13 + 26480), *((_DWORD *)v23 + 15), *(_DWORD *)(v158 + 7100), (double *)v160);
  }
  v169[3] = v160;
  if (*(unsigned char *)(v158 + 922))
  {
    if (*((int *)v23 + 6) >= 3)
    {
      int v159 = 10;
      if (!sub_BDAA0(v3, (void *)(v13 + 25344), &v159))
      {
        __int16 v179 = 0;
        uint64_t v178 = 0;
        sub_DD92C((char *)&v178, 10, "%d %d", v104, v105, v106, v107, v108, *((_DWORD *)v23 + 4));
        sub_BDA14((unsigned int *)(v13 + 25344), v159, 47, 6, (uint64_t)&v178, 0, v109, v110);
        *(void *)&long long v172 = v13 + 25344;
        DWORD2(v172) = v159;
      }
    }
  }
  *(void *)&long long v165 = 0;
  BYTE8(v165) = v23[3];
  if (v23[2])
  {
    CFDictionaryRef v111 = (const __CFDictionary *)CMGetAttachment(v177, kFigCaptureSampleBufferAttachmentKey_MetadataDictionary, 0);
    if (v111) {
      *(void *)&long long v165 = CFDictionaryCreateCopy(0, v111);
    }
  }
  if (sub_D1C38(0x14u, 7))
  {
    int v112 = sub_D1C7C(0x14u);
    __uint64_t v113 = sub_DDEFC();
    __uint64_t v114 = (const char *)sub_D1CB0(7);
    if (v112)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_GetPerTileData\n", v113, 20, v114);
      __uint64_t v115 = sub_DDEFC();
      int v153 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_GetPerTileData", v115, 20, v153);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_GetPerTileData", v113, 20, v114);
    }
  }
  char v197 = *(unsigned char *)v158;
  int v196 = *(_DWORD *)(v158 + 764);
  BytePtr = 0;
  char v198 = 0;
  if (v3)
  {
    CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v3, kVTEncodeFrameOptionKey_UserQpMap);
    if (Value) {
      BytePtr = CFDataGetBytePtr(Value);
    }
  }
  if (sub_D1C38(0x14u, 7))
  {
    unint64_t v117 = v5;
    int v118 = sub_D1C7C(0x14u);
    __uint64_t v119 = sub_DDEFC();
    CMTimeEpoch v120 = (const char *)sub_D1CB0(7);
    if (v118)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_GetPerTileData\n", v119, 20, v120);
      __uint64_t v121 = sub_DDEFC();
      long long v154 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_GetPerTileData", v121, 20, v154);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_GetPerTileData", v119, 20, v120);
    }
    unint64_t v5 = v117;
  }
  if (sub_4A0AC(v13, (uint64_t)&v180, v7, v5))
  {
    if (sub_D1C38(3u, 4))
    {
      int v122 = sub_D1C7C(3u);
      __uint64_t v123 = sub_DDEFC();
      CMTime v124 = (const char *)sub_D1CB0(4);
      if (v122)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_GetTileInfo failed.\n", v123, 3, v124, "AVE_H264EncodeTile", 12197, "err == noErr");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_GetTileInfo failed.");
    }
    goto LABEL_88;
  }
  *(void *)&long long v170 = &v180;
  uint64_t v125 = sub_B5104(*(void ***)(v13 + 24), (uint64_t)v162);
  uint64_t v41 = v125;
  long long v126 = v103;
  if (v125)
  {
    if (v125 == -536870173)
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v127 = sub_D1C7C(0x16u);
        __uint64_t v128 = sub_DDEFC();
        int v129 = (const char *)sub_D1CB0(5);
        if (v127)
        {
          printf("%lld %d AVE %s: FIG: device returned kIOReturnNoPower. reject the frame\n", v128, 22, v129);
          __uint64_t v130 = sub_DDEFC();
          long long v155 = (const char *)sub_D1CB0(5);
          long long v126 = v103;
          syslog(3, "%lld %d AVE %s: FIG: device returned kIOReturnNoPower. reject the frame", v130, 22, v155);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: device returned kIOReturnNoPower. reject the frame", v128, 22, v129);
        }
      }
      goto LABEL_171;
    }
    if (sub_D1C38(3u, 4))
    {
      int v131 = sub_D1C7C(3u);
      __uint64_t v132 = sub_DDEFC();
      uint64_t v133 = (const char *)sub_D1CB0(4);
      if (v131)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Process failed.\n", v132, 3, v133, "AVE_H264EncodeTile", 12211, "err == noErr");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Process failed.");
    }
LABEL_42:
    uint64_t v41 = 4294954384;
    goto LABEL_89;
  }
LABEL_171:
  if (v126) {
    *v126 |= 1u;
  }
  if (*(_DWORD *)(v158 + 7172))
  {
    *(void *)(v13 + 25200) = sub_DDEFC();
    int v134 = *(_DWORD *)(v158 + 7100);
    BOOL v135 = sub_D1C38(0x18u, 6);
    if (v134)
    {
      if (v135)
      {
        int v136 = sub_D1C7C(0x18u);
        __uint64_t v137 = sub_DDEFC();
        __uint64_t v138 = (const char *)sub_D1CB0(6);
        int v139 = *(_DWORD *)(v158 + 7100);
        uint64_t v140 = *(void *)(v13 + 25200);
        uint64_t v141 = v140 - *(void *)(v13 + 25192);
        uint64_t v142 = v140 - *(void *)(v13 + 25208);
        if (v136)
        {
          printf("%lld %d AVE %s: FIG: (%d) EncodeTile took %lld us (%lld us since tile #0)\n", v137, 24, v138, v139, v141, v142);
          __uint64_t v143 = sub_DDEFC();
          int v144 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: (%d) EncodeTile took %lld us (%lld us since tile #0)", v143, 24, v144, *(_DWORD *)(v158 + 7100), *(void *)(v13 + 25200) - *(void *)(v13 + 25192), *(void *)(v13 + 25200) - *(void *)(v13 + 25208));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: (%d) EncodeTile took %lld us (%lld us since tile #0)", v137, 24, v138, v139, v141, v142);
        }
      }
    }
    else
    {
      if (v135)
      {
        int v145 = sub_D1C7C(0x18u);
        __uint64_t v146 = sub_DDEFC();
        long long v147 = (const char *)sub_D1CB0(6);
        uint64_t v148 = *(void *)(v13 + 25200) - *(void *)(v13 + 25192);
        if (v145)
        {
          printf("%lld %d AVE %s: FIG: (%d) EncodeTile took %lld us\n", v146, 24, v147, *(_DWORD *)(v158 + 7100), v148);
          __uint64_t v149 = sub_DDEFC();
          long long v150 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: (%d) EncodeTile took %lld us", v149, 24, v150, *(_DWORD *)(v158 + 7100), *(void *)(v13 + 25200) - *(void *)(v13 + 25192));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: (%d) EncodeTile took %lld us", v146, 24, v147, *(_DWORD *)(v158 + 7100), v148);
        }
      }
      *(void *)(v13 + 25208) = *(void *)(v13 + 25192);
    }
  }
LABEL_89:
  if (sub_D1C38(0x14u, 7))
  {
    int v68 = sub_D1C7C(0x14u);
    __uint64_t v69 = sub_DDEFC();
    int v70 = (const char *)sub_D1CB0(7);
    if (v68)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_H264EncodeTile err 0x%08x\n", v69, 20, v70, v41);
      __uint64_t v71 = sub_DDEFC();
      long long v152 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_H264EncodeTile err 0x%08x", v71, 20, v152, v41);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_H264EncodeTile err 0x%08x", v69, 20, v70, v41);
    }
  }
  if (v176 && v177) {
    CVPixelBufferRelease(v177);
  }
  if (v13)
  {
    ++*(_DWORD *)(v158 + 7100);
    pthread_mutex_unlock((pthread_mutex_t *)(v13 + 25120));
  }
  return v41;
}

uint64_t sub_3EB64()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = DerivedStorage;
  if (!DerivedStorage)
  {
    if (sub_D1C38(3u, 4))
    {
      int v7 = sub_D1C7C(3u);
      __uint64_t v8 = sub_DDEFC();
      uint64_t v9 = (const char *)sub_D1CB0(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v8, 3, v9, "AVE_H264CompleteTiles", 12271, "encoderPrivateStorage");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.");
    }
    goto LABEL_24;
  }
  CFDictionaryRef v2 = (_DWORD *)(DerivedStorage + 25108);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 25120));
  if (sub_D1C38(0x14u, 7))
  {
    int v3 = sub_D1C7C(0x14u);
    __uint64_t v4 = sub_DDEFC();
    unint64_t v5 = (const char *)sub_D1CB0(7);
    if (v3)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_H264CompleteTiles\n", v4, 20, v5);
      __uint64_t v6 = sub_DDEFC();
      int v30 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_H264CompleteTiles", v6, 20, v30);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_H264CompleteTiles", v4, 20, v5);
    }
  }
  uint64_t v10 = *(void *)(v1 + 20368);
  __uint64_t v11 = sub_DDEFC();
  sub_C086C(v10, 6u, v11);
  if (*(_DWORD *)(v1 + 25184)) {
    *(void *)(v1 + 25192) = sub_DDEFC();
  }
  __uint64_t v12 = sub_DDEFC();
  if (*v2 == 30568)
  {
    __uint64_t v32 = v12;
    if (sub_B490C(*(void ***)(v1 + 24), &v32))
    {
      if (sub_D1C38(3u, 4))
      {
        int v13 = sub_D1C7C(3u);
        __uint64_t v14 = sub_DDEFC();
        __uint64_t v15 = (const char *)sub_D1CB0(4);
        if (v13)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: H264VideoEncoderVA_DriverEncodeCompleteFrames failed.\n", v14, 3, v15, "AVE_H264CompleteTiles", 12294, "err == noErr");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: H264VideoEncoderVA_DriverEncodeCompleteFrames failed.");
      }
LABEL_24:
      uint64_t v24 = 4294954384;
      goto LABEL_25;
    }
  }
  if (*(_DWORD *)(v1 + 25184))
  {
    *(void *)(v1 + 25200) = sub_DDEFC();
    if (sub_D1C38(0x18u, 6))
    {
      int v16 = sub_D1C7C(0x18u);
      __uint64_t v17 = sub_DDEFC();
      int v18 = (const char *)sub_D1CB0(6);
      uint64_t v19 = *(void *)(v1 + 25200) - *(void *)(v1 + 25192);
      if (v16)
      {
        printf("%lld %d AVE %s: FIG: (%d) Complete took %lld us\n", v17, 24, v18, v2[1] - 1, v19);
        __uint64_t v20 = sub_DDEFC();
        uint64_t v21 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: (%d) Complete took %lld us", v20, 24, v21, *(_DWORD *)(v1 + 25112) - 1, *(void *)(v1 + 25200) - *(void *)(v1 + 25192));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: (%d) Complete took %lld us", v17, 24, v18, v2[1] - 1, v19);
      }
    }
  }
  uint64_t v22 = *(void *)(v1 + 20368);
  __uint64_t v23 = sub_DDEFC();
  sub_C0C44(v22, 6u, v23);
  uint64_t v24 = 0;
LABEL_25:
  if (sub_D1C38(0x14u, 7))
  {
    int v25 = sub_D1C7C(0x14u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(7);
    if (v25)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_H264CompleteTiles err 0x%08x\n", v26, 20, v27, v24);
      __uint64_t v28 = sub_DDEFC();
      __uint64_t v31 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_H264CompleteTiles err 0x%08x", v28, 20, v31, v24);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_H264CompleteTiles err 0x%08x", v26, 20, v27, v24);
    }
  }
  if (v1) {
    pthread_mutex_unlock((pthread_mutex_t *)(v1 + 25120));
  }
  return v24;
}

void sub_3EF70(uint64_t a1)
{
  uint64_t v2 = a1 + 21556;
  if (sub_D1C38(0x14u, 7))
  {
    int v3 = sub_D1C7C(0x14u);
    __uint64_t v4 = sub_DDEFC();
    unint64_t v5 = (const char *)sub_D1CB0(7);
    if (v3)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_PrepareCropParams\n", v4, 20, v5);
      __uint64_t v6 = sub_DDEFC();
      int v29 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PrepareCropParams", v6, 20, v29);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PrepareCropParams", v4, 20, v5);
    }
  }
  unsigned int v7 = *(_DWORD *)(a1 + 1880);
  unsigned int v8 = *(_DWORD *)(a1 + 1884);
  *(unsigned char *)uint64_t v2 = 0;
  *(void *)(a1 + 21568) = 0;
  *(void *)(a1 + 21560) = 0;
  if (v8 < 0x60 || (v8 & 0xF) != 0)
  {
    if (*(int *)(v2 + 3684) >= 11) {
      *(_DWORD *)(v2 + 3768) = v8;
    }
    unsigned int v10 = (v8 + 15) & 0xFFFFFFF0;
    if (v10 <= 0x60) {
      unsigned int v10 = 96;
    }
    *(_DWORD *)(a1 + 1884) = v10;
    *(unsigned char *)uint64_t v2 = 1;
    *(_DWORD *)(v2 + 16) = v10 - v8;
  }
  if (v7 < 0xC0 || (v7 & 0xF) != 0)
  {
    if (*(int *)(v2 + 3684) >= 11) {
      *(_DWORD *)(v2 + 3764) = v7;
    }
    unsigned int v12 = (v7 + 15) & 0xFFFFFFF0;
    if (v12 <= 0xC0) {
      unsigned int v12 = 192;
    }
    *(_DWORD *)(a1 + 1880) = v12;
    *(unsigned char *)uint64_t v2 = 1;
    *(_DWORD *)(v2 + 8) = v12 - v7;
  }
  if (sub_D1C38(0x16u, 7))
  {
    int v13 = sub_D1C7C(0x16u);
    __uint64_t v14 = sub_DDEFC();
    __uint64_t v15 = (const char *)sub_D1CB0(7);
    if (v13)
    {
      printf("%lld %d AVE %s: FIG: input -> %dx%d\n", v14, 22, v15, v7, v8);
      __uint64_t v16 = sub_DDEFC();
      int v30 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: input -> %dx%d", v16, 22, v30, v7, v8);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: input -> %dx%d", v14, 22, v15, v7, v8);
    }
  }
  if (sub_D1C38(0x16u, 7))
  {
    int v17 = sub_D1C7C(0x16u);
    __uint64_t v18 = sub_DDEFC();
    uint64_t v19 = (const char *)sub_D1CB0(7);
    int v20 = *(_DWORD *)(a1 + 1884);
    if (v17)
    {
      printf("%lld %d AVE %s: FIG: input multiple -> %dx%d\n", v18, 22, v19, *(_DWORD *)(a1 + 1880), v20);
      __uint64_t v21 = sub_DDEFC();
      uint64_t v22 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: input multiple -> %dx%d", v21, 22, v22, *(_DWORD *)(a1 + 1880), *(_DWORD *)(a1 + 1884));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: input multiple -> %dx%d", v18, 22, v19, *(_DWORD *)(a1 + 1880), v20);
    }
  }
  if (sub_D1C38(0x16u, 7))
  {
    int v23 = sub_D1C7C(0x16u);
    __uint64_t v24 = sub_DDEFC();
    int v25 = (const char *)sub_D1CB0(7);
    int v26 = *(_DWORD *)(v2 + 8);
    if (v23)
    {
      printf("%lld %d AVE %s: FIG: frame_crop_bottom_offset %d frame_crop_right_offset %d\n", v24, 22, v25, *(_DWORD *)(v2 + 16), v26);
      __uint64_t v27 = sub_DDEFC();
      __uint64_t v28 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: frame_crop_bottom_offset %d frame_crop_right_offset %d", v27, 22, v28, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 8));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: frame_crop_bottom_offset %d frame_crop_right_offset %d", v24, 22, v25, *(_DWORD *)(v2 + 16), v26);
    }
  }
}

double sub_3F288(uint64_t a1)
{
  uint64_t v2 = a1 + 21468;
  uint64_t v3 = a1 + 19476;
  uint64_t v4 = a1 + 18640;
  uint64_t v5 = a1 + 18324;
  uint64_t v6 = a1 + 17877;
  unsigned int v7 = (_OWORD *)(a1 + 268);
  if (sub_D1C38(0x14u, 7))
  {
    int v8 = sub_D1C7C(0x14u);
    __uint64_t v9 = sub_DDEFC();
    unsigned int v10 = (const char *)sub_D1CB0(7);
    if (v8)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_SetEncoderDefault\n", v9, 20, v10);
      __uint64_t v11 = sub_DDEFC();
      int v20 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetEncoderDefault", v11, 20, v20);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetEncoderDefault", v9, 20, v10);
    }
  }
  *(unsigned char *)uint64_t v4 = 0;
  *(_OWORD *)(v4 + 8) = xmmword_141700;
  *(void *)(a1 + 18664) = 31;
  *(unsigned char *)(v4 + 36) = 0;
  *(_DWORD *)(v4 + 40) = 1;
  *(_DWORD *)(v4 + 44) = 65793;
  *(unsigned char *)(v4 + 48) = 1;
  *(void *)(a1 + 18736) = 0;
  *(_OWORD *)(a1 + 18689) = 0u;
  *(_OWORD *)(a1 + 18705) = 0u;
  *(_OWORD *)(a1 + 18721) = 0u;
  *(unsigned char *)(v4 + 112) = 1;
  *(void *)(a1 + 18744) = 0xC800000002;
  *(_WORD *)(v4 + 129) = 0;
  *(unsigned char *)(v4 + 134) = 0;
  *(void *)(a1 + 18792) = 0x300000006;
  *(_WORD *)(v4 + 210) = 1;
  *(unsigned char *)(v4 + 217) = 0;
  *(void *)(a1 + 18880) = 0;
  *(void *)(a1 + 18872) = 0;
  *(_DWORD *)(a1 + 18896) = 0;
  *(void *)(a1 + 18888) = 0;
  *(_DWORD *)(v4 + 228) = -1;
  *(_DWORD *)(v4 + 204) = 0x1000000;
  *(_WORD *)(v4 + 220) = 0;
  *(unsigned char *)(v4 + 294) = 1;
  *(unsigned char *)(v4 + 222) = 0;
  *(_DWORD *)(v4 + 124) = 0;
  *(_DWORD *)(v4 + 136) = 0;
  bzero((void *)(a1 + 19484), 0x2A0uLL);
  for (uint64_t i = 0; i != 672; i += 112)
    *(void *)(a1 + 19484 + i) = 0xFFFFFFFF00000001;
  *(void *)uint64_t v3 = 0x100000006;
  *(_DWORD *)(v3 + 680) = 1;
  *(unsigned char *)(v6 + 443) = 0;
  *(unsigned char *)(v3 + 689) = 1;
  *(unsigned char *)(v3 + 734) = 0;
  *(_DWORD *)(v4 + 300) = 0;
  *(_DWORD *)(v3 + 700) = 0;
  *(_DWORD *)(v3 + 716) = 0;
  *(unsigned char *)(v3 + 724) = 0;
  *(_DWORD *)(v3 + 728) = 0;
  *(_DWORD *)(a1 + 1920) = 15;
  *(unsigned char *)(a1 + 1924) = 0;
  *(_DWORD *)(a1 + 1944) = 0;
  int v13 = *(_DWORD *)(a1 + 2024);
  *(_DWORD *)(v5 + 68) = 0;
  *(_DWORD *)(a1 + 2024) = v13 & 0xFFFFFFF8 | 6;
  *(_DWORD *)(a1 + 2012) = -1;
  *(void *)(a1 + 17868) = 0;
  *(unsigned char *)(a1 + 17876) = 0;
  *(_DWORD *)(v6 + 7) = 2;
  *(unsigned char *)(v6 + 1) = 0;
  *(_WORD *)(a1 + 1925) = 0;
  *(unsigned char *)(v6 + 5) = 0;
  *(_DWORD *)(v6 + 175) = 1;
  *(unsigned char *)(v6 + 179) = 0;
  *(void *)(v6 + 183) = 1;
  int v14 = *(_DWORD *)(a1 + 1884);
  *(_DWORD *)(v6 + 191) = v14;
  *(_DWORD *)uint64_t v5 = 16;
  *(_WORD *)(v5 + 12) = 0;
  *(unsigned char *)(v5 + 25) = 0;
  *(_WORD *)(v5 + 64) = 0;
  *(unsigned char *)(v5 + 72) = 0;
  *(_DWORD *)(v5 + 76) = 0;
  *(void *)(a1 + 18404) = -1;
  *(void *)(a1 + 18412) = -1;
  *(_DWORD *)(v5 + 108) = 0;
  *(_OWORD *)((char *)v7 + 1660) = 0u;
  *(void *)(v5 + 160) = 0x1000000001;
  *(void *)(a1 + 18624) = 8;
  *(_DWORD *)(v6 + 11) = 3;
  *(_WORD *)(v6 + 15) = 0;
  *(unsigned char *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 3) = 1;
  *(void *)(v6 + 39) = 0x8FFFFFFFFLL;
  *(_DWORD *)(v6 + 27) = 0xFFFF;
  unsigned int v15 = ((double)(*(_DWORD *)(a1 + 1880) * v14) * 1.5 * 0.15 * 30.0);
  *(unsigned char *)(v5 + 96) = 21;
  *(_DWORD *)(a1 + 192) = v15;
  *(_DWORD *)(a1 + 228) = 30;
  *(_DWORD *)(v3 + 884) = 0;
  *(void *)(a1 + 2028) = 0;
  *(void *)(a1 + 2040) = 0xBFF0000000000000;
  *(void *)(a1 + 2048) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 196) = 0;
  *(_DWORD *)(a1 + 240) = 1065353216;
  *(void *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 244) = 1;
  *(unsigned char *)(a1 + 252) = 1;
  *(_WORD *)(a1 + 246) = 257;
  *(unsigned char *)(a1 + 253) = 0;
  *(_DWORD *)(a1 + 260) = 0;
  *(unsigned char *)(a1 + 254) = 0;
  *(_DWORD *)(a1 + 1768) = 0;
  *(void *)&long long v16 = 0x40000000400;
  *((void *)&v16 + 1) = 0x40000000400;
  *unsigned int v7 = v16;
  *(void *)(a1 + 284) = 1024;
  *(unsigned char *)(a1 + 216) = 1;
  *(_DWORD *)(a1 + 220) = 0;
  if (!*(unsigned char *)(v4 + 128)) {
    *(_DWORD *)(a1 + 292) = 0;
  }
  *(void *)(a1 + 1824) = 0x1A0000001ALL;
  *(_OWORD *)(a1 + 440) = unk_1419A0;
  *(_OWORD *)(a1 + 376) = unk_141960;
  *(_OWORD *)(a1 + 392) = xmmword_141970;
  *(_OWORD *)(a1 + 408) = unk_141980;
  *(_OWORD *)(a1 + 424) = xmmword_141990;
  *(_OWORD *)(a1 + 312) = unk_141920;
  *(_OWORD *)(a1 + 328) = xmmword_141930;
  *(_OWORD *)(a1 + 344) = unk_141940;
  *(_OWORD *)(a1 + 360) = xmmword_141950;
  *(_OWORD *)(a1 + 296) = xmmword_141910;
  *(_OWORD *)(a1 + 456) = xmmword_1419B0;
  *(_OWORD *)(a1 + 472) = unk_1419C0;
  *(_OWORD *)(a1 + 648) = unk_141A70;
  *(_OWORD *)(a1 + 664) = xmmword_141A80;
  *(_OWORD *)(a1 + 680) = unk_141A90;
  *(_OWORD *)(a1 + 696) = xmmword_141AA0;
  *(_OWORD *)(a1 + 584) = unk_141A30;
  *(_OWORD *)(a1 + 600) = xmmword_141A40;
  *(_OWORD *)(a1 + 616) = unk_141A50;
  *(_OWORD *)(a1 + 632) = xmmword_141A60;
  *(_DWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  *(_OWORD *)(a1 + 520) = *(_OWORD *)algn_1419F0;
  *(_OWORD *)(a1 + 536) = xmmword_141A00;
  *(void *)&long long v17 = 0xC0000000CLL;
  *((void *)&v17 + 1) = 0xC0000000CLL;
  *(_OWORD *)(a1 + 1840) = v17;
  *(unsigned char *)(a1 + 255) = 0;
  *(_WORD *)(a1 + 257) = 1;
  *(void *)(a1 + 1816) = 0x403A000000000000;
  *(_DWORD *)(a1 + 1832) = 26;
  *(_OWORD *)(a1 + 552) = unk_141A10;
  *(_OWORD *)(a1 + 568) = xmmword_141A20;
  *(_OWORD *)(a1 + 488) = xmmword_1419D0;
  *(_OWORD *)(a1 + 504) = xmmword_1419E0;
  memcpy((void *)(a1 + 712), &unk_141AB0, 0x414uLL);
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(void *)(a1 + 1808) = 0;
  *(_DWORD *)(a1 + 1756) = 1;
  *(void *)(a1 + 1760) = 0x100000001;
  *(unsigned char *)(a1 + 250) = 0;
  *(unsigned char *)(a1 + 1772) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_DWORD *)(v4 + 824) = 30;
  *(unsigned char *)(v5 + 120) = 0;
  *(void *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 1864) = 0;
  *(_DWORD *)(v3 + 880) = 0;
  *(unsigned char *)(v3 + 735) = 0;
  *(_DWORD *)(a1 + 1856) = 0;
  *(_OWORD *)(a1 + 20216) = 0u;
  *(_OWORD *)(a1 + 20232) = 0u;
  *(_OWORD *)(a1 + 20248) = 0u;
  *(_OWORD *)(a1 + 20264) = 0u;
  *(_OWORD *)(a1 + 20280) = 0u;
  *(_OWORD *)(a1 + 20296) = 0u;
  *(_OWORD *)(a1 + 20312) = 0u;
  *(_OWORD *)(a1 + 20328) = 0u;
  *(void *)(a1 + 20344) = 0;
  *(_DWORD *)(a1 + 1868) = 0;
  *(_DWORD *)(v3 + 904) = 100;
  *(void *)(a1 + 20400) = 0;
  *(void *)(a1 + 20384) = 0;
  *(void *)(a1 + 20392) = 0;
  *(void *)(a1 + 20408) = 10;
  *(_DWORD *)(v3 + 940) = 1;
  *(_DWORD *)(v3 + 960) = 0;
  *(void *)(a1 + 20420) = 0;
  *(void *)(a1 + 20426) = 0;
  *(_OWORD *)(v3 + 1952) = xmmword_141710;
  *(_DWORD *)(v3 + 1968) = 1;
  *(unsigned char *)(v3 + 1972) = 0;
  *(void *)(v3 + 1984) = 0x100000001;
  *(_DWORD *)uint64_t v2 = 0x1000000;
  *(_DWORD *)(v2 + 4) = 5;
  *(unsigned char *)(v2 + 12) = 1;
  *(void *)(v2 + 16) = 0x200000002;
  *(_DWORD *)(v2 + 24) = 2;
  *(unsigned char *)(v2 + 28) = 0;
  *(unsigned char *)(v2 + 40) = 0;
  *(void *)(a1 + 20168) = *(void *)(a1 + 20168) & 0xFFFFFFFFFFFFFFCFLL | 0x20;
  *(_WORD *)(v2 + 53) = 0;
  *(unsigned char *)(v2 + 55) = 0;
  double result = 0.0;
  *(void *)(v2 + 632) = 0;
  *(_DWORD *)(v2 + 640) = 1;
  *(unsigned char *)(v2 + 644) = 0;
  *(void *)(a1 + 22136) = 0;
  *(_DWORD *)(v2 + 676) = 0;
  *(unsigned char *)(a1 + 22132) = 0;
  *(void *)(a1 + 22124) = 0;
  *(void *)(a1 + 22116) = 0;
  *(_OWORD *)(v2 + 680) = xmmword_141720;
  *(void *)&long long v19 = 0xC0000000CLL;
  *((void *)&v19 + 1) = 0xC0000000CLL;
  *(_OWORD *)(v2 + 696) = v19;
  *(_OWORD *)(v2 + 720) = xmmword_141720;
  *(_OWORD *)(v2 + 736) = v19;
  *(_DWORD *)(v2 + 712) = 16777217;
  *(unsigned char *)(v2 + 716) = 0;
  *(_DWORD *)(v2 + 1020) = 1;
  *(void *)(a1 + 22496) = 0x200000000;
  *(void *)(a1 + 22511) = 0;
  *(void *)(a1 + 22504) = 0;
  *(void *)(a1 + 22528) = 0;
  *(void *)(a1 + 22520) = 0;
  *(void *)(a1 + 22536) = 0;
  *(unsigned char *)(v2 + 1076) = 1;
  *(unsigned char *)(v2 + 1100) = 0;
  *(_WORD *)(v2 + 1140) = 0;
  *(unsigned char *)(v2 + 1142) = 0;
  *(_WORD *)(v2 + 1484) = 0;
  *(void *)(a1 + 22548) = 0;
  *(void *)(a1 + 22556) = 0;
  *(_DWORD *)(a1 + 22588) = 0;
  *(void *)(a1 + 22572) = 0;
  *(void *)(a1 + 22580) = 0;
  *(_DWORD *)(v2 + 3616) = -1;
  *(void *)(a1 + 1872) = 0;
  return result;
}

uint64_t sub_3F8A8(uint64_t a1, CVPixelBufferRef *a2, unsigned char *a3, _DWORD *a4, _DWORD *a5, int a6)
{
  uint64_t v11 = a1 + 21556;
  uint64_t v12 = a1 + 17880;
  memset(v52, 0, sizeof(v52));
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  memset(v47, 0, sizeof(v47));
  unsigned int v13 = *(_DWORD *)(a1 + 25320);
  if (!v13) {
    unsigned int v13 = *(_DWORD *)(a1 + 1880);
  }
  unsigned int v41 = v13;
  int v14 = *(_DWORD *)(a1 + 25324);
  if (!v14) {
    int v14 = *(_DWORD *)(a1 + 1884);
  }
  int v15 = *(_DWORD *)(a1 + 25236);
  int v42 = v14;
  int v43 = v15;
  int v16 = *(_DWORD *)(a1 + 18760);
  int v17 = *(_DWORD *)(a1 + 1876);
  int v44 = *(_DWORD *)(a1 + 25240);
  int v45 = v17;
  int v46 = v16;
  LOBYTE(v47[0]) = *(unsigned char *)(a1 + 18849);
  int v18 = *(_DWORD *)(a1 + 18868);
  DWORD1(v47[0]) = *(_DWORD *)(a1 + 292);
  DWORD2(v47[1]) = v18;
  BYTE12(v47[1]) = *(_DWORD *)(a1 + 264) > 0;
  LODWORD(v48) = *(_DWORD *)(a1 + 18804);
  v52[27] = v44 > 10;
  if (*(unsigned char *)v11) {
    *(_OWORD *)((char *)v47 + 8) = *(_OWORD *)(a1 + 21560);
  }
  uint64_t v19 = sub_E2B0(&v41, a2, (CVPixelBufferPoolRef *)(a1 + 25336));
  if (v19) {
    return v19;
  }
  *a3 = v52[24];
  int v20 = HIDWORD(v51);
  *a4 = DWORD2(v51);
  *a5 = v20;
  uint64_t v21 = *(unsigned int *)(v11 + 3684);
  if ((int)v21 < 11)
  {
    *(_WORD *)(v12 + 456) = v52[25];
    goto LABEL_13;
  }
  *(_WORD *)(v12 + 456) = 0;
  unsigned int v22 = v41;
  char v23 = BYTE8(v48) - 1;
  char v24 = 1;
  *(_WORD *)(v12 + 460) = 1 << (BYTE8(v48) - 1);
  *(_DWORD *)(v12 + 464) = 65537 << v23;
  if (v22 == *(_DWORD *)(a1 + 1880))
  {
    if (v42 != *(_DWORD *)(a1 + 1884))
    {
      char v24 = 1;
      goto LABEL_14;
    }
LABEL_13:
    char v24 = v52[26];
  }
LABEL_14:
  int v25 = (_DWORD *)(a1 + 18872);
  *(unsigned char *)(v12 + 974) = v24;
  int v26 = HIDWORD(v49);
  *(unsigned char *)(v12 + 132) = (HIDWORD(v49) & 0xFFFFFFFE) == 2;
  if (v26 == 3) {
    *(unsigned char *)(v12 + 459) = BYTE4(v50);
  }
  if (*(unsigned char *)(v12 + 969))
  {
    int v27 = v51;
    *int v25 = *(_DWORD *)v52;
    *(_DWORD *)(a1 + 18876) = v27;
    *(void *)&long long v28 = __PAIR64__(*(unsigned int *)&v52[16], DWORD1(v51));
    *((void *)&v28 + 1) = *(void *)&v52[8];
    *(_OWORD *)(a1 + 18880) = v28;
    *(_DWORD *)(a1 + 18896) = *(_DWORD *)&v52[20];
    if (a6)
    {
      *(_DWORD *)(v12 + 876) = DWORD1(v48);
LABEL_19:
      int v29 = v49;
      int v30 = DWORD2(v48);
      *(_DWORD *)(a1 + 20416) = v49;
      *(_DWORD *)(v12 + 40) = v30;
      *(unsigned char *)uint64_t v12 = v26 != 1;
      *(unsigned char *)(v12 + 889) = 1;
      if (*(_DWORD *)(a1 + 292) == 37 && v29 == 3)
      {
        *(unsigned char *)(v12 + 982) = 1;
        *(unsigned char *)(a1 + 254) = 0;
      }
    }
LABEL_29:
    if (*(_DWORD *)(v11 + 3556))
    {
      if (*(_DWORD *)(a1 + 20364) != DWORD1(v48) && sub_D1C38(0x16u, 4))
      {
        int v37 = sub_D1C7C(0x16u);
        __uint64_t v38 = sub_DDEFC();
        __uint64_t v39 = (const char *)sub_D1CB0(4);
        if (v37)
        {
          printf("%lld %d AVE %s: %s:%d input pixel format change %d %d 0x%x 0x%x\n", v38, 22, v39, "AVE_AVC_VerifyImageBuffer", 6543, *(_DWORD *)(v11 + 3676), *(_DWORD *)(v11 + 3556), v25[373], DWORD1(v48));
          __uint64_t v38 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d input pixel format change %d %d 0x%x 0x%x", v38, 22);
      }
      return 0;
    }
    else
    {
      uint64_t v19 = 0;
      *(_DWORD *)(a1 + 20364) = DWORD1(v48);
    }
    return v19;
  }
  if ((a6 & 1) == 0) {
    goto LABEL_29;
  }
  unsigned int v31 = DWORD1(v48);
  *(_DWORD *)(v12 + 876) = DWORD1(v48);
  unsigned int v32 = *(_DWORD *)(a1 + 20424) + 8;
  if (v32 <= *(_DWORD *)(a1 + 20428) + 8) {
    unsigned int v32 = *(_DWORD *)(a1 + 20428) + 8;
  }
  uint64_t v33 = sub_EF00(v21, *(unsigned int *)(v11 + 3680), *(unsigned int *)(a1 + 1876), 0, *(unsigned int *)(a1 + 19468), *(unsigned int *)(a1 + 19472), *(unsigned int *)(a1 + 1880), *(unsigned int *)(a1 + 1884), v32, *(_DWORD *)(v11 + 3532), v31 | 0x100000000, *(void *)a1);
  if (!v33)
  {
    int v26 = HIDWORD(v49);
    goto LABEL_19;
  }
  uint64_t v19 = v33;
  if (sub_D1C38(3u, 4))
  {
    int v34 = sub_D1C7C(3u);
    __uint64_t v35 = sub_DDEFC();
    int v36 = (const char *)sub_D1CB0(4);
    if (v34)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: %s:%d AVE_UpdatePixelBufferDict failed.\n", v35, 3, v36, "AVE_AVC_VerifyImageBuffer", 6518, "err == noErr", "AVE_AVC_VerifyImageBuffer", 6518);
      __uint64_t v35 = sub_DDEFC();
      sub_D1CB0(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: %s:%d AVE_UpdatePixelBufferDict failed.", v35, 3);
  }
  return v19;
}

void sub_3FD50(uint64_t a1, __CVBuffer *a2)
{
  uint64_t v4 = a1 + 21556;
  if (sub_D1C38(0x14u, 7))
  {
    int v5 = sub_D1C7C(0x14u);
    __uint64_t v6 = sub_DDEFC();
    unsigned int v7 = (const char *)sub_D1CB0(7);
    if (v5)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_UpdateCropParams\n", v6, 20, v7);
      __uint64_t v8 = sub_DDEFC();
      char v24 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_UpdateCropParams", v8, 20, v24);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_UpdateCropParams", v6, 20, v7);
    }
  }
  if (*(unsigned char *)v4)
  {
    __uint64_t v9 = (int *)(a1 + 20416);
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
    uint64_t v11 = sub_D7E18(PixelFormatType);
    if (v11)
    {
      int v12 = *((_DWORD *)v11 + 3);
      *__uint64_t v9 = v12;
    }
    else
    {
      int v12 = *v9;
    }
    int v14 = v12 != 3 && v12 != 0;
    int v15 = v12 == 1;
    int v16 = *(_DWORD *)(v4 + 12);
    if (v16)
    {
      if (v12 == 1) {
        int v17 = 2;
      }
      else {
        int v17 = 1;
      }
      *(_DWORD *)(v4 + 12) = ((v16 + v17 - 1) & ~v15) >> v15;
    }
    int v18 = *(_DWORD *)(v4 + 16);
    if (v18) {
      *(_DWORD *)(v4 + 16) = ((v18 + v15) & ~v15) >> v15;
    }
    int v19 = *(_DWORD *)(v4 + 4);
    if (v19) {
      *(_DWORD *)(v4 + 4) = ((v19 + v14) & ~v14) >> v14;
    }
    int v20 = *(_DWORD *)(v4 + 8);
    if (v20) {
      *(_DWORD *)(v4 + 8) = ((v20 + v14) & ~v14) >> v14;
    }
    if (sub_D1C38(0x16u, 7))
    {
      int v21 = sub_D1C7C(0x16u);
      __uint64_t v22 = sub_DDEFC();
      char v23 = (const char *)sub_D1CB0(7);
      if (v21)
      {
        printf("%lld %d AVE %s: FIG: frame_crop_top_offset = %d frame_crop_bottom_offset %d frame_crop_left_offset = %d frame_crop_right_offset %d\n", v22, 22, v23, *(_DWORD *)(v4 + 12), *(_DWORD *)(v4 + 16), *(_DWORD *)(v4 + 4), *(_DWORD *)(v4 + 8));
        __uint64_t v22 = sub_DDEFC();
        sub_D1CB0(7);
      }
      syslog(3, "%lld %d AVE %s: FIG: frame_crop_top_offset = %d frame_crop_bottom_offset %d frame_crop_left_offset = %d frame_crop_right_offset %d", v22);
    }
  }
}

void sub_3FF70()
{
  if (sub_D1C38(0x14u, 7))
  {
    int v0 = sub_D1C7C(0x14u);
    __uint64_t v1 = sub_DDEFC();
    uint64_t v2 = (const char *)sub_D1CB0(7);
    if (v0)
    {
      printf("%lld %d AVE %s: AVE ENTER AVE_SetEncoderBasedOnFirstFrame\n", v1, 20, v2);
      __uint64_t v3 = sub_DDEFC();
      uint64_t v4 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: AVE ENTER AVE_SetEncoderBasedOnFirstFrame", v3, 20, v4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AVE ENTER AVE_SetEncoderBasedOnFirstFrame", v1, 20, v2);
    }
  }
}

uint64_t sub_40010(uint64_t a1)
{
  uint64_t v2 = (int *)(a1 + 25240);
  __uint64_t v3 = (unsigned __int16 *)(a1 + 17872);
  uint64_t v4 = sub_C7604();
  if (sub_D1C38(0x14u, 7))
  {
    int v5 = sub_D1C7C(0x14u);
    __uint64_t v6 = sub_DDEFC();
    unsigned int v7 = (const char *)sub_D1CB0(7);
    if (v5)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_ValidateEncoderParameters\n", v6, 20, v7);
      __uint64_t v8 = sub_DDEFC();
      int v258 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_ValidateEncoderParameters", v8, 20, v258);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_ValidateEncoderParameters", v6, 20, v7);
    }
  }
  if (*v2 >= 16)
  {
    int v9 = *(_DWORD *)(a1 + 1876);
    if (*((unsigned char *)v3 + 977))
    {
      v9 &= 0xFFFFFF1F;
      *(_DWORD *)(a1 + 1876) = v9;
    }
    if ((v9 & 0xE0) != 0)
    {
      *(_DWORD *)(a1 + 1876) = v9 & 0xFFFFFF1F;
      if (sub_D1C38(0x16u, 5))
      {
        int v10 = sub_D1C7C(0x16u);
        __uint64_t v11 = sub_DDEFC();
        int v12 = (const char *)sub_D1CB0(5);
        if (v10)
        {
          printf("%lld %d AVE %s: FIG: MCTF for AVC is not supported yet!\n", v11, 22, v12);
          __uint64_t v13 = sub_DDEFC();
          __uint64_t v259 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: MCTF for AVC is not supported yet!", v13, 22, v259);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: MCTF for AVC is not supported yet!", v11, 22, v12);
        }
      }
    }
  }
  else
  {
    *(_DWORD *)(a1 + 1876) &= 0xFFFFFF1F;
  }
  int v14 = *(_DWORD *)(a1 + 196);
  if (!v14) {
    goto LABEL_28;
  }
  if (v14 == 4)
  {
    if (*(void *)(a1 + 25264))
    {
      if (sub_D1C38(3u, 4))
      {
        int v18 = sub_D1C7C(3u);
        __uint64_t v19 = sub_DDEFC();
        int v20 = (const char *)sub_D1CB0(4);
        if (v18)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: multiPassStorage and RC UsageMode = %d... not supported. fail\n", v19, 3, v20, "AVE_ValidateEncoderParameters", 5540, "false", *(_DWORD *)(a1 + 292));
          __uint64_t v19 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: multiPassStorage and RC UsageMode = %d... not supported. fail", v19);
      }
      return 4294954384;
    }
    goto LABEL_27;
  }
  if (v14 != 20)
  {
LABEL_27:
    *(unsigned char *)(a1 + 252) = 0;
    *((unsigned char *)v3 + 880) = 0;
    goto LABEL_28;
  }
  if (*(_DWORD *)(a1 + 292) != 1)
  {
    if (sub_D1C38(3u, 4))
    {
      int v15 = sub_D1C7C(3u);
      __uint64_t v16 = sub_DDEFC();
      int v17 = (const char *)sub_D1CB0(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: Usage mode %d does not support eRCMode = %d. Fail.\n", v16, 3, v17, "AVE_ValidateEncoderParameters", 5530, "false", *(_DWORD *)(a1 + 292), *(_DWORD *)(a1 + 196));
        __uint64_t v16 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: Usage mode %d does not support eRCMode = %d. Fail.", v16);
    }
    return 4294954394;
  }
LABEL_28:
  uint64_t v21 = *(void *)(a1 + 200);
  if ((v21 & 0x80000000) != 0)
  {
    *(void *)(a1 + 200) = v21 | 4;
    int v22 = *(_DWORD *)(a1 + 1944);
    if (v22 == 2)
    {
      char v23 = (int *)(a1 + 1944);
      *(_DWORD *)(a1 + 1944) = 3;
      char v24 = (_DWORD *)(a1 + 1880);
      if (*v2 <= 1) {
        goto LABEL_35;
      }
LABEL_51:
      char v31 = 1;
      goto LABEL_52;
    }
  }
  else
  {
    int v22 = *(_DWORD *)(a1 + 1944);
  }
  char v24 = (_DWORD *)(a1 + 1880);
  char v23 = (int *)(a1 + 1944);
  if (!v22)
  {
    char v31 = 0;
    goto LABEL_52;
  }
  if (*v2 >= 2)
  {
    if (v22 >= 4)
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v32 = sub_D1C7C(0x16u);
        __uint64_t v33 = sub_DDEFC();
        int v34 = (const char *)sub_D1CB0(5);
        if (v32)
        {
          printf("%lld %d AVE %s: FIG: too many B frames (%d) max is %d. -> will gracefully default to the internal max!\n", v33, 22, v34, *v23, 3);
          __uint64_t v33 = sub_DDEFC();
          int v34 = (const char *)sub_D1CB0(5);
        }
        syslog(3, "%lld %d AVE %s: FIG: too many B frames (%d) max is %d. -> will gracefully default to the internal max!", v33, 22, v34, *v23, 3);
      }
      *char v23 = 3;
    }
    goto LABEL_51;
  }
LABEL_35:
  if (sub_D1C38(0x16u, 5))
  {
    int v25 = sub_D1C7C(0x16u);
    __uint64_t v26 = sub_DDEFC();
    int v27 = (const char *)sub_D1CB0(5);
    int v28 = *v2;
    if (v25)
    {
      printf("%lld %d AVE %s: FIG: BFrames = %d and DeviceType = %d. Not supported, set BFrames to 0.\n", v26, 22, v27, *v23, v28);
      __uint64_t v29 = sub_DDEFC();
      int v30 = (const char *)sub_D1CB0(5);
      syslog(3, "%lld %d AVE %s: FIG: BFrames = %d and DeviceType = %d. Not supported, set BFrames to 0.", v29, 22, v30, *v23, *v2);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: BFrames = %d and DeviceType = %d. Not supported, set BFrames to 0.", v26, 22, v27, *v23, v28);
    }
  }
  char v31 = 0;
  *char v23 = 0;
LABEL_52:
  unsigned int v36 = *(_DWORD *)(a1 + 2024);
  if ((v36 & 4) != 0 && (v31 & 1) == 0)
  {
    if (sub_D1C38(0x16u, 5))
    {
      int v37 = sub_D1C7C(0x16u);
      __uint64_t v38 = sub_DDEFC();
      __uint64_t v39 = (const char *)sub_D1CB0(5);
      if (v37)
      {
        printf("%lld %d AVE %s: FIG: AdaptiveB is set when BFrames not enabled -> will disable AdaptiveB\n", v38, 22, v39);
        __uint64_t v40 = sub_DDEFC();
        v260 = (const char *)sub_D1CB0(5);
        syslog(3, "%lld %d AVE %s: FIG: AdaptiveB is set when BFrames not enabled -> will disable AdaptiveB", v40, 22, v260);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: AdaptiveB is set when BFrames not enabled -> will disable AdaptiveB", v38, 22, v39);
      }
    }
    unsigned int v36 = *(_DWORD *)(a1 + 2024) & 0xFFFFFFFB;
    *(_DWORD *)(a1 + 2024) = v36;
  }
  int v41 = *(_DWORD *)(a1 + 2028);
  if (v41 == 1)
  {
    *(_DWORD *)(a1 + 2032) = 0;
    *(void *)(a1 + 2040) = 0xBFF0000000000000;
    *(void *)(a1 + 2048) = 0xBFF0000000000000;
    *(unsigned char *)(a1 + 216) = 0;
    v3[487] = 0;
    *(_DWORD *)(a1 + 1944) = 0;
    v36 &= ~4u;
    *(_DWORD *)(a1 + 2024) = v36;
    *((_DWORD *)v3 + 114) = 0;
  }
  else if (v41 <= 0 && *(int *)(a1 + 2032) <= 0 && *(double *)(a1 + 2040) <= 0.0 && *(double *)(a1 + 2048) <= 0.0)
  {
    *(_DWORD *)(a1 + 2028) = 30;
  }
  if (!*(unsigned char *)(a1 + 216))
  {
    *((unsigned char *)v3 + 975) = 0;
    *(_DWORD *)(a1 + 1944) = 0;
    v36 &= ~4u;
    *(_DWORD *)(a1 + 2024) = v36;
    v3[229] = 0;
  }
  if (!*((unsigned char *)v3 + 901) && (v36 & 4) != 0 && (*(unsigned char *)(a1 + 203) & 0x80) != 0) {
    *(_DWORD *)(a1 + 2024) = v36 & 0xFFFFFFFB;
  }
  double v42 = (double)*(int *)(a1 + 192)
      / (double)(((*(_DWORD *)(a1 + 1880) + 15) >> 4) * ((*(_DWORD *)(a1 + 1884) + 15) >> 4))
      * 0.0133333333
      + -6.66666667;
  if (v42 < 0.0) {
    double v42 = 0.0;
  }
  double v43 = v42 + 0.5;
  BOOL v44 = v42 <= 20.0;
  double v45 = 20.5;
  if (v44) {
    double v45 = v43;
  }
  *((_DWORD *)v3 + 197) = v45;
  *((_DWORD *)v3 + 199) = v45;
  if (*(int *)(a1 + 1840) <= -13) {
    *(_DWORD *)(a1 + 1840) = -6 * *((_DWORD *)v3 + 638);
  }
  if (*(int *)(a1 + 1844) <= -13) {
    *(_DWORD *)(a1 + 1844) = 48;
  }
  if (*(int *)(a1 + 1848) <= -13) {
    *(_DWORD *)(a1 + 1848) = -6 * *((_DWORD *)v3 + 638);
  }
  int v46 = (_DWORD *)(a1 + 1848);
  if (*(int *)(a1 + 1852) <= -13) {
    *(_DWORD *)(a1 + 1852) = 48;
  }
  if (sub_DEC28((int *)(a1 + 1848), *((_DWORD *)v3 + 638) + 8))
  {
    if (sub_D1C38(3u, 4))
    {
      int v47 = sub_D1C7C(3u);
      __uint64_t v48 = sub_DDEFC();
      long long v49 = (const char *)sub_D1CB0(4);
      if (v47)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: Incorrect sHardQPRange [%d %d]\n", v48, 3, v49, "AVE_ValidateEncoderParameters", 5703, "false", *(_DWORD *)(a1 + 1848), *(_DWORD *)(a1 + 1852));
        __uint64_t v48 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: Incorrect sHardQPRange [%d %d]", v48);
    }
    return 4294954394;
  }
  long long v50 = (_DWORD *)(a1 + 1840);
  if (sub_DEC28((int *)(a1 + 1840), *((_DWORD *)v3 + 638) + 8))
  {
    if (sub_D1C38(3u, 4))
    {
      int v51 = sub_D1C7C(3u);
      __uint64_t v52 = sub_DDEFC();
      __uint64_t v53 = (const char *)sub_D1CB0(4);
      if (v51)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: Incorrect sSoftQPRange [%d %d]\n", v52, 3, v53, "AVE_ValidateEncoderParameters", 5711, "false", *(_DWORD *)(a1 + 1840), *(_DWORD *)(a1 + 1844));
        __uint64_t v52 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: Incorrect sSoftQPRange [%d %d]", v52);
    }
    return 4294954394;
  }
  if (*v50 < *v46) {
    _DWORD *v50 = *v46;
  }
  int v54 = *(_DWORD *)(a1 + 1852);
  if (*(_DWORD *)(a1 + 1844) > v54) {
    *(_DWORD *)(a1 + 1844) = v54;
  }
  int v55 = *((_DWORD *)v3 + 47);
  if (v55 >= 33)
  {
    if (sub_D1C38(3u, 4))
    {
      int v62 = sub_D1C7C(3u);
      __uint64_t v63 = sub_DDEFC();
      int v64 = (const char *)sub_D1CB0(4);
      if (v62)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: too many slices (%d) max is %d for now (can be changed)\n", v63, 3, v64, "AVE_ValidateEncoderParameters", 5733, "encoderPrivateStorage->VideoParams.sSliceMap.iNum <= ((32) < (256) ? (32) : (256))", *((_DWORD *)v3 + 47), 32);
        __uint64_t v63 = sub_DDEFC();
        int v64 = (const char *)sub_D1CB0(4);
      }
      uint64_t v286 = *((unsigned int *)v3 + 47);
      uint64_t v287 = 32;
      uint64_t v284 = 5733;
      v285 = "encoderPrivateStorage->VideoParams.sSliceMap.iNum <= ((32) < (256) ? (32) : (256))";
      int v262 = v64;
      uint64_t v65 = "%lld %d AVE %s: %s:%d %s | FIG: too many slices (%d) max is %d for now (can be changed)";
      goto LABEL_388;
    }
    return 4294954394;
  }
  if (!v55)
  {
    if (sub_D1C38(3u, 4))
    {
      int v66 = sub_D1C7C(3u);
      __uint64_t v63 = sub_DDEFC();
      __uint64_t v67 = (const char *)sub_D1CB0(4);
      if (v66)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: Slices Per Frame = %d\n", v63, 3, v67, "AVE_ValidateEncoderParameters", 5734, "encoderPrivateStorage->VideoParams.sSliceMap.iNum != 0", *((_DWORD *)v3 + 47));
        __uint64_t v63 = sub_DDEFC();
        __uint64_t v67 = (const char *)sub_D1CB0(4);
        v285 = "encoderPrivateStorage->VideoParams.sSliceMap.iNum != 0";
        uint64_t v286 = *((unsigned int *)v3 + 47);
        uint64_t v284 = 5734;
      }
      else
      {
        uint64_t v286 = *((unsigned int *)v3 + 47);
        uint64_t v284 = 5734;
        v285 = "encoderPrivateStorage->VideoParams.sSliceMap.iNum != 0";
      }
      int v262 = v67;
      uint64_t v65 = "%lld %d AVE %s: %s:%d %s | FIG: Slices Per Frame = %d";
      goto LABEL_388;
    }
    return 4294954394;
  }
  int v289 = v4;
  __uint64_t v290 = v23;
  int v56 = *((_DWORD *)v3 + 627);
  v288 = v24;
  if (v56 != 77)
  {
    if (v56 != 66) {
      goto LABEL_143;
    }
    if (*((_DWORD *)v3 + 1059))
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v57 = sub_D1C7C(0x16u);
        __uint64_t v58 = sub_DDEFC();
        int v59 = (const char *)sub_D1CB0(5);
        int v60 = *((_DWORD *)v3 + 627);
        if (v57)
        {
          printf("%lld %d AVE %s: FIG: profile_idc = %d and entropy_coding_mode_flag is not EntropyModeCAVLC. setting it to EntropyModeCAVLC.\n", v58, 22, v59, v60);
          __uint64_t v61 = sub_DDEFC();
          v261 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: profile_idc = %d and entropy_coding_mode_flag is not EntropyModeCAVLC. setting it to EntropyModeCAVLC.", v61, 22, v261, *((_DWORD *)v3 + 627));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: profile_idc = %d and entropy_coding_mode_flag is not EntropyModeCAVLC. setting it to EntropyModeCAVLC.", v58, 22, v59, v60);
        }
      }
      *((_DWORD *)v3 + 1059) = 0;
    }
  }
  if (*(unsigned char *)(a1 + 22183))
  {
    if (sub_D1C38(0x16u, 5))
    {
      int v68 = sub_D1C7C(0x16u);
      __uint64_t v69 = sub_DDEFC();
      int v70 = (const char *)sub_D1CB0(5);
      int v71 = *((_DWORD *)v3 + 627);
      if (v68)
      {
        printf("%lld %d AVE %s: FIG: profile_idc = %d and transform_8x8_mode_flag is true. setting it to false.\n", v69, 22, v70, v71);
        __uint64_t v72 = sub_DDEFC();
        int v263 = (const char *)sub_D1CB0(5);
        syslog(3, "%lld %d AVE %s: FIG: profile_idc = %d and transform_8x8_mode_flag is true. setting it to false.", v72, 22, v263, *((_DWORD *)v3 + 627));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: profile_idc = %d and transform_8x8_mode_flag is true. setting it to false.", v69, 22, v70, v71);
      }
    }
    *(unsigned char *)(a1 + 22183) = 0;
    *((_DWORD *)v3 + 3) = 0;
  }
  if (*(unsigned char *)(a1 + 22184))
  {
    if (sub_D1C38(0x16u, 5))
    {
      int v73 = sub_D1C7C(0x16u);
      __uint64_t v74 = sub_DDEFC();
      int v75 = (const char *)sub_D1CB0(5);
      int v76 = *((_DWORD *)v3 + 627);
      if (v73)
      {
        printf("%lld %d AVE %s: FIG: profile_idc = %d and pic_scaling_matrix_present_flag is true. setting it to false.\n", v74, 22, v75, v76);
        __uint64_t v77 = sub_DDEFC();
        int v264 = (const char *)sub_D1CB0(5);
        syslog(3, "%lld %d AVE %s: FIG: profile_idc = %d and pic_scaling_matrix_present_flag is true. setting it to false.", v77, 22, v264, *((_DWORD *)v3 + 627));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: profile_idc = %d and pic_scaling_matrix_present_flag is true. setting it to false.", v74, 22, v75, v76);
      }
    }
    *(unsigned char *)(a1 + 22184) = 0;
  }
  uint64_t v78 = 0;
  uint64_t v79 = a1 + 22188;
  do
  {
    if (*(int *)(v79 + v78) >= 1)
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v80 = sub_D1C7C(0x16u);
        __uint64_t v81 = sub_DDEFC();
        int v82 = (const char *)sub_D1CB0(5);
        int v83 = *((_DWORD *)v3 + 627);
        if (v80)
        {
          printf("%lld %d AVE %s: FIG: profile_idc = %d and second_chroma_qp_index_offset is > 0. setting it to 0.\n", v81, 22, v82, v83);
          __uint64_t v81 = sub_DDEFC();
          int v82 = (const char *)sub_D1CB0(5);
          int v83 = *((_DWORD *)v3 + 627);
        }
        syslog(3, "%lld %d AVE %s: FIG: profile_idc = %d and second_chroma_qp_index_offset is > 0. setting it to 0.", v81, 22, v82, v83);
      }
      *(_DWORD *)(v79 + v78) = 0;
    }
    v78 += 4;
  }
  while (v78 != 32);
LABEL_143:
  int v84 = *((_DWORD *)v3 + 636);
  if (v84 == 3)
  {
    uint64_t v86 = v289;
    int v85 = v290;
    if (!sub_D1C38(0x16u, 6))
    {
      int v90 = 244;
      goto LABEL_154;
    }
    int v93 = sub_D1C7C(0x16u);
    __uint64_t v88 = sub_DDEFC();
    __uint64_t v94 = (const char *)sub_D1CB0(6);
    int v90 = 244;
    if (v93)
    {
      printf("%lld %d AVE %s: %s:%d profile_idc %d => %d\n", v88, 22, v94, "AVE_ValidateEncoderParameters", 5797, *((_DWORD *)v3 + 627), 244);
      __uint64_t v95 = sub_DDEFC();
      sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s:%d profile_idc %d => %d", v95);
      goto LABEL_154;
    }
LABEL_153:
    syslog(3, "%lld %d AVE %s: %s:%d profile_idc %d => %d", v88);
    goto LABEL_154;
  }
  uint64_t v86 = v289;
  int v85 = v290;
  if (v84 == 2)
  {
    if (!sub_D1C38(0x16u, 6))
    {
      int v90 = 122;
      goto LABEL_154;
    }
    int v87 = sub_D1C7C(0x16u);
    __uint64_t v88 = sub_DDEFC();
    int v89 = (const char *)sub_D1CB0(6);
    int v90 = 122;
    if (v87)
    {
      printf("%lld %d AVE %s: %s:%d profile_idc %d => %d\n", v88, 22, v89, "AVE_ValidateEncoderParameters", 5791, *((_DWORD *)v3 + 627), 122);
      __uint64_t v91 = sub_DDEFC();
      CFDictionaryRef v92 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s:%d profile_idc %d => %d", v91, 22, v92, "AVE_ValidateEncoderParameters", 5791, *((_DWORD *)v3 + 627), 122);
LABEL_154:
      *((_DWORD *)v3 + 627) = v90;
      goto LABEL_155;
    }
    goto LABEL_153;
  }
LABEL_155:
  if (*((unsigned char *)v3 + 804))
  {
    if ((unsigned int v96 = *(_DWORD *)(a1 + 292), v96 <= 0x26) && ((1 << v96) & 0x6000100000) != 0 || v96 == 10000)
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v97 = sub_D1C7C(0x16u);
        __uint64_t v98 = sub_DDEFC();
        long long v99 = (const char *)sub_D1CB0(5);
        int v100 = *(_DWORD *)(a1 + 292);
        if (v97)
        {
          printf("%lld %d AVE %s: FIG: usageMode = %d and bMultiReferenceP is true not supported. Set it to false.\n", v98, 22, v99, v100);
          __uint64_t v101 = sub_DDEFC();
          int v265 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: usageMode = %d and bMultiReferenceP is true not supported. Set it to false.", v101, 22, v265, *(_DWORD *)(a1 + 292));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: usageMode = %d and bMultiReferenceP is true not supported. Set it to false.", v98, 22, v99, v100);
        }
      }
      *((unsigned char *)v3 + 804) = 0;
    }
  }
  if (*((unsigned char *)v3 + 2560))
  {
    unsigned int v102 = *(_DWORD *)(a1 + 292);
    if (v102 <= 0x26 && ((1 << v102) & 0x6000100002) != 0 || v102 == 10000)
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v103 = sub_D1C7C(0x16u);
        __uint64_t v104 = sub_DDEFC();
        uint64_t v105 = (const char *)sub_D1CB0(5);
        int v106 = *(_DWORD *)(a1 + 292);
        if (v103)
        {
          printf("%lld %d AVE %s: FIG: usageMode = %d and bIsLossless is true not supported. Set it to false.\n", v104, 22, v105, v106);
          __uint64_t v107 = sub_DDEFC();
          __uint64_t v266 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: usageMode = %d and bIsLossless is true not supported. Set it to false.", v107, 22, v266, *(_DWORD *)(a1 + 292));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: usageMode = %d and bIsLossless is true not supported. Set it to false.", v104, 22, v105, v106);
        }
      }
      *((unsigned char *)v3 + 2560) = 0;
    }
    if (*((_DWORD *)v3 + 627) != 244)
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v108 = sub_D1C7C(0x16u);
        __uint64_t v109 = sub_DDEFC();
        uint64_t v110 = (const char *)sub_D1CB0(5);
        int v111 = *((_DWORD *)v3 + 627);
        if (v108)
        {
          printf("%lld %d AVE %s: FIG: profile_idc = %d and bIsLossless is true not supported. Set profile to High444P.\n", v109, 22, v110, v111);
          __uint64_t v112 = sub_DDEFC();
          v267 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: profile_idc = %d and bIsLossless is true not supported. Set profile to High444P.", v112, 22, v267, *((_DWORD *)v3 + 627));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: profile_idc = %d and bIsLossless is true not supported. Set profile to High444P.", v109, 22, v110, v111);
        }
      }
      *((_DWORD *)v3 + 627) = 244;
      *((_DWORD *)v3 + 634) = 52;
    }
    if (*(_DWORD *)(a1 + 196) != 3)
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v113 = sub_D1C7C(0x16u);
        __uint64_t v114 = sub_DDEFC();
        __uint64_t v115 = (const char *)sub_D1CB0(5);
        int v116 = *(_DWORD *)(a1 + 196);
        if (v113)
        {
          printf("%lld %d AVE %s: FIG: eRCMode = %d and bIsLossless is true not supported. Set eRCMode to FIXQP.\n", v114, 22, v115, v116);
          __uint64_t v117 = sub_DDEFC();
          int v268 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: eRCMode = %d and bIsLossless is true not supported. Set eRCMode to FIXQP.", v117, 22, v268, *(_DWORD *)(a1 + 196));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: eRCMode = %d and bIsLossless is true not supported. Set eRCMode to FIXQP.", v114, 22, v115, v116);
        }
      }
      *(_DWORD *)(a1 + 196) = 3;
    }
    if (*(unsigned char *)(a1 + 244) || *(unsigned char *)(a1 + 252))
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v118 = sub_D1C7C(0x16u);
        __uint64_t v119 = sub_DDEFC();
        CMTimeEpoch v120 = (const char *)sub_D1CB0(5);
        if (v118)
        {
          printf("%lld %d AVE %s: FIG: bEnableQPMod / bEnableQPModRefresh set and bIsLossless is true not supported. Set bEnableQPMod, bEnableQPModRefresh to false.\n", v119, 22, v120);
          __uint64_t v121 = sub_DDEFC();
          __uint64_t v269 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: bEnableQPMod / bEnableQPModRefresh set and bIsLossless is true not supported. Set bEnableQPMod, bEnableQPModRefresh to false.", v121, 22, v269);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: bEnableQPMod / bEnableQPModRefresh set and bIsLossless is true not supported. Set bEnableQPMod, bEnableQPModRefresh to false.", v119, 22, v120);
        }
      }
      *(unsigned char *)(a1 + 244) = 0;
      *(unsigned char *)(a1 + 252) = 0;
    }
    if (*(unsigned char *)(a1 + 246))
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v122 = sub_D1C7C(0x16u);
        __uint64_t v123 = sub_DDEFC();
        CMTime v124 = (const char *)sub_D1CB0(5);
        int v125 = *(unsigned __int8 *)(a1 + 246);
        if (v122)
        {
          printf("%lld %d AVE %s: FIG: bEnableLamdaMod = %d and bIsLossless is true not supported. Set bEnableLamdaMod to false.\n", v123, 22, v124, v125);
          __uint64_t v126 = sub_DDEFC();
          v270 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: bEnableLamdaMod = %d and bIsLossless is true not supported. Set bEnableLamdaMod to false.", v126, 22, v270, *(unsigned __int8 *)(a1 + 246));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: bEnableLamdaMod = %d and bIsLossless is true not supported. Set bEnableLamdaMod to false.", v123, 22, v124, v125);
        }
      }
      *(unsigned char *)(a1 + 246) = 0;
    }
    *(void *)(a1 + 1816) = 0;
    unsigned int v127 = -6 * *((_DWORD *)v3 + 638);
    *(int32x4_t *)(a1 + 1840) = vdupq_n_s32(v127);
    *(_DWORD *)(a1 + 1832) = v127;
    *(_DWORD *)(a1 + 1828) = v127;
    *(_DWORD *)(a1 + 1824) = v127;
    if (*((_DWORD *)v3 + 1059) == 1)
    {
      unsigned int v128 = ((*v288 >> 4) + 31) & 0x1FFFFFE0;
      if (v128 > 0x100 || (*(_DWORD *)(a1 + 1884) >> 4) * v128 > 0xC000)
      {
        if (sub_D1C38(0x16u, 5))
        {
          int v129 = sub_D1C7C(0x16u);
          __uint64_t v130 = sub_DDEFC();
          int v131 = (const char *)sub_D1CB0(5);
          int v132 = *(_DWORD *)(a1 + 1880);
          int v133 = *((_DWORD *)v3 + 1059);
          if (v129)
          {
            printf("%lld %d AVE %s: FIG: ui32Width and ui32Height = (%d,%d), bIsLossless is true and entropy_coding_mode_flag = %d not supported. Set it to cavlc.\n", v130, 22, v131, v132, *(_DWORD *)(a1 + 1884), v133);
            __uint64_t v134 = sub_DDEFC();
            BOOL v135 = (const char *)sub_D1CB0(5);
            syslog(3, "%lld %d AVE %s: FIG: ui32Width and ui32Height = (%d,%d), bIsLossless is true and entropy_coding_mode_flag = %d not supported. Set it to cavlc.", v134, 22, v135, *(_DWORD *)(a1 + 1880), *(_DWORD *)(a1 + 1884), *((_DWORD *)v3 + 1059));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: ui32Width and ui32Height = (%d,%d), bIsLossless is true and entropy_coding_mode_flag = %d not supported. Set it to cavlc.", v130, 22, v131, v132, *(_DWORD *)(a1 + 1884), v133);
          }
        }
        *((_DWORD *)v3 + 1059) = 0;
      }
    }
    if (*(_DWORD *)(a1 + 1920))
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v136 = sub_D1C7C(0x16u);
        __uint64_t v137 = sub_DDEFC();
        __uint64_t v138 = (const char *)sub_D1CB0(5);
        int v139 = *(_DWORD *)(a1 + 1920);
        if (v136)
        {
          printf("%lld %d AVE %s: FIG: EnableSelStatsFlags = %d and bIsLossless is true not supported. Forcing EnableSelStatsFlags to STATISTICS_DISABLED.\n", v137, 22, v138, v139);
          __uint64_t v140 = sub_DDEFC();
          v271 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: EnableSelStatsFlags = %d and bIsLossless is true not supported. Forcing EnableSelStatsFlags to STATISTICS_DISABLED.", v140, 22, v271, *(_DWORD *)(a1 + 1920));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: EnableSelStatsFlags = %d and bIsLossless is true not supported. Forcing EnableSelStatsFlags to STATISTICS_DISABLED.", v137, 22, v138, v139);
        }
      }
      *(_DWORD *)(a1 + 1920) = 0;
    }
    if (*(_DWORD *)(a1 + 260))
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v141 = sub_D1C7C(0x16u);
        __uint64_t v142 = sub_DDEFC();
        __uint64_t v143 = (const char *)sub_D1CB0(5);
        int v144 = *(_DWORD *)(a1 + 260);
        if (v141)
        {
          printf("%lld %d AVE %s: FIG: eStaticAreasLowQpSel = %d and bIsLossless is true not supported. Forcing eStaticAreasLowQpSel to STATICAREAS_LOWQP_DISABLE.\n", v142, 22, v143, v144);
          __uint64_t v145 = sub_DDEFC();
          int v272 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: eStaticAreasLowQpSel = %d and bIsLossless is true not supported. Forcing eStaticAreasLowQpSel to STATICAREAS_LOWQP_DISABLE.", v145, 22, v272, *(_DWORD *)(a1 + 260));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: eStaticAreasLowQpSel = %d and bIsLossless is true not supported. Forcing eStaticAreasLowQpSel to STATICAREAS_LOWQP_DISABLE.", v142, 22, v143, v144);
        }
      }
      *(_DWORD *)(a1 + 260) = 0;
    }
  }
  int v146 = *v85;
  if (*v85)
  {
    int v147 = *(_DWORD *)(a1 + 224);
    if (v147 >= 1 && v147 != *(_DWORD *)(a1 + 228))
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v148 = sub_D1C7C(0x16u);
        __uint64_t v149 = sub_DDEFC();
        long long v150 = (const char *)sub_D1CB0(5);
        if (v148)
        {
          printf("%lld %d AVE %s: FIG: Disable B frames (and honor the iAverageNonDroppableFrameRate request)\n", v149, 22, v150);
          __uint64_t v151 = sub_DDEFC();
          __uint64_t v273 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: Disable B frames (and honor the iAverageNonDroppableFrameRate request)", v151, 22, v273);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: Disable B frames (and honor the iAverageNonDroppableFrameRate request)", v149, 22, v150);
        }
      }
      int v146 = 0;
      *(_DWORD *)(a1 + 1944) = 0;
      *(_DWORD *)(a1 + 2024) &= ~4u;
      int v147 = *(_DWORD *)(a1 + 224);
    }
    if (v147 == *(_DWORD *)(a1 + 228)) {
      *(_DWORD *)(a1 + 224) = 0;
    }
  }
  *(_DWORD *)(a1 + 1940) = *((unsigned __int8 *)v3 + 975);
  *(_DWORD *)(a1 + 1936) = *((unsigned __int8 *)v3 + 974);
  if (!*((unsigned char *)v3 + 812) && *(_DWORD *)(a1 + 196) != 20 && v146)
  {
    if (sub_D1C38(0x16u, 5))
    {
      int v152 = sub_D1C7C(0x16u);
      __uint64_t v153 = sub_DDEFC();
      long long v154 = (const char *)sub_D1CB0(5);
      int v155 = *(_DWORD *)(a1 + 1944);
      if (v152)
      {
        printf("%lld %d AVE %s: FIG: eRCMode %d bUseAsyncFWScheduling = false Bframes 0x%x -> not supported. set bUseAsyncFWScheduling to true\n", v153, 22, v154, *(_DWORD *)(a1 + 196), v155);
        __uint64_t v156 = sub_DDEFC();
        __uint64_t v157 = (const char *)sub_D1CB0(5);
        syslog(3, "%lld %d AVE %s: FIG: eRCMode %d bUseAsyncFWScheduling = false Bframes 0x%x -> not supported. set bUseAsyncFWScheduling to true", v156, 22, v157, *(_DWORD *)(a1 + 196), *(_DWORD *)(a1 + 1944));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: eRCMode %d bUseAsyncFWScheduling = false Bframes 0x%x -> not supported. set bUseAsyncFWScheduling to true", v153, 22, v154, *(_DWORD *)(a1 + 196), v155);
      }
    }
    *((unsigned char *)v3 + 812) = 1;
  }
  if (*(void *)(a1 + 25264))
  {
    *((unsigned char *)v3 + 524) = 1;
    *((_DWORD *)v3 + 132) = 1;
  }
  if (*v85 && *(_DWORD *)(a1 + 2064) == 1)
  {
    if (sub_D1C38(0x16u, 5))
    {
      int v158 = sub_D1C7C(0x16u);
      __uint64_t v159 = sub_DDEFC();
      uint64_t v160 = (const char *)sub_D1CB0(5);
      int v161 = *v85;
      if (v158)
      {
        printf("%lld %d AVE %s: FIG: BFrames = %d and LowDelay is true. Default to regular BFrames case.\n", v159, 22, v160, v161);
        __uint64_t v162 = sub_DDEFC();
        v274 = (const char *)sub_D1CB0(5);
        syslog(3, "%lld %d AVE %s: FIG: BFrames = %d and LowDelay is true. Default to regular BFrames case.", v162, 22, v274, *v85);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: BFrames = %d and LowDelay is true. Default to regular BFrames case.", v159, 22, v160, v161);
      }
    }
    *(_DWORD *)(a1 + 2064) = 0;
  }
  if (!sub_13AE0(v2[1], 1, 0, *v3))
  {
    if (sub_D1C38(3u, 4))
    {
      int v170 = sub_D1C7C(3u);
      __uint64_t v171 = sub_DDEFC();
      long long v172 = (const char *)sub_D1CB0(4);
      if (v170)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: invalid search_range\n", v171, 3, v172, "AVE_ValidateEncoderParameters", 6005, "pEntry != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: invalid search_range");
    }
    return 4294954394;
  }
  if (!*(_DWORD *)(a1 + 2012))
  {
    *(_WORD *)(a1 + 244) = 0;
    *(_WORD *)(a1 + 247) = 0;
    *(unsigned char *)(a1 + 250) = 0;
    *(_WORD *)(a1 + 255) = 0;
  }
  if (*((unsigned char *)v3 + 991))
  {
    if (*((unsigned char *)v3 + 899) || *(_DWORD *)(a1 + 196) == 4 || *(void *)(a1 + 25264) || *((unsigned char *)v3 + 992))
    {
      *(void *)(a1 + 1816) = 0x403A000000000000;
      *(void *)(a1 + 1824) = 0x1A0000001ALL;
      *(_DWORD *)(a1 + 1832) = 26;
      *(void *)(a1 + 1848) = 0x3000000000;
      *(void *)(a1 + 1840) = 0x3000000000;
      *((unsigned char *)v3 + 2560) = *((unsigned char *)v3 + 992);
      *((unsigned char *)v3 + 991) = 0;
    }
    else
    {
      if (*((unsigned char *)v3 + 1036))
      {
        *(unsigned char *)(a1 + 244) = 0;
        *(_WORD *)(a1 + 246) = 0;
        *(unsigned char *)(a1 + 252) = 0;
        *(_DWORD *)(a1 + 260) = 0;
        *(unsigned char *)(a1 + 249) = 0;
        *(_WORD *)(a1 + 255) = 0;
        *(unsigned char *)(a1 + 257) = 0;
        *(_DWORD *)(a1 + 1768) = 0;
      }
      if ((*(unsigned char *)(a1 + 203) & 0x80) == 0) {
        *(_DWORD *)(a1 + 196) = 3;
      }
      *((unsigned char *)v3 + 812) = 1;
    }
  }
  if ((int)(*(double *)(a1 + 26136) * 100.0 + 0.5) != 100
    && !*((unsigned char *)v3 + 1036)
    && (*(unsigned char *)(a1 + 1876) & 0xE0) == 0
    && !*(void *)(a1 + 25264)
    && !*((_DWORD *)v3 + 577))
  {
    if ((*(void *)(a1 + 200) & 0x80000000) == 0) {
      goto LABEL_262;
    }
    goto LABEL_261;
  }
  *(_DWORD *)(a1 + 232) = 0;
  unint64_t v163 = *(void *)(a1 + 200) & 0xFFFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 200) = v163;
  if ((v163 & 0x80000000) != 0)
  {
LABEL_261:
    *(_DWORD *)(a1 + 224) = 0;
    *(void *)(a1 + 20168) = *(void *)(a1 + 20168) & 0xFFFFFFFFFFFFFFCFLL | 0x10;
  }
LABEL_262:
  if (!*((unsigned char *)v3 + 977) && !*(unsigned char *)(a1 + 244))
  {
    int v164 = *(_DWORD *)(a1 + 260);
    if (v164 && v164 != 3)
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v165 = sub_D1C7C(0x16u);
        __uint64_t v166 = sub_DDEFC();
        long long v167 = (const char *)sub_D1CB0(5);
        int v168 = *(_DWORD *)(a1 + 260);
        if (v165)
        {
          printf("%lld %d AVE %s: FIG: eStaticAreasLowQpSel = %d and bEnableQPMod set to false is not supported. Forcing eStaticAreasLowQpSel to STATICAREAS_LOWQP_DISABLE.\n", v166, 22, v167, v168);
          __uint64_t v169 = sub_DDEFC();
          int v275 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: eStaticAreasLowQpSel = %d and bEnableQPMod set to false is not supported. Forcing eStaticAreasLowQpSel to STATICAREAS_LOWQP_DISABLE.", v169, 22, v275, *(_DWORD *)(a1 + 260));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: eStaticAreasLowQpSel = %d and bEnableQPMod set to false is not supported. Forcing eStaticAreasLowQpSel to STATICAREAS_LOWQP_DISABLE.", v166, 22, v167, v168);
        }
      }
      *(_DWORD *)(a1 + 260) = 0;
    }
    if (*(unsigned char *)(a1 + 247))
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v173 = sub_D1C7C(0x16u);
        __uint64_t v174 = sub_DDEFC();
        int v175 = (const char *)sub_D1CB0(5);
        int v176 = *(unsigned __int8 *)(a1 + 247);
        if (v173)
        {
          printf("%lld %d AVE %s: FIG: bEnableVarianceQPMod = %d and bEnableQPMod set to false is not supported. Forcing bEnableVarianceQPMod off.\n", v174, 22, v175, v176);
          __uint64_t v177 = sub_DDEFC();
          __uint64_t v276 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: bEnableVarianceQPMod = %d and bEnableQPMod set to false is not supported. Forcing bEnableVarianceQPMod off.", v177, 22, v276, *(unsigned __int8 *)(a1 + 247));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: bEnableVarianceQPMod = %d and bEnableQPMod set to false is not supported. Forcing bEnableVarianceQPMod off.", v174, 22, v175, v176);
        }
      }
      *(unsigned char *)(a1 + 247) = 0;
    }
  }
  if (*(_DWORD *)(a1 + 260))
  {
    int v178 = *(_DWORD *)(a1 + 1880) >> 4;
    int v179 = *(_DWORD *)(a1 + 1884) >> 4;
    unsigned int v180 = (v178 + 31) & 0x1FFFFFE0;
    if (v180 > 0x80 || v180 * v179 >= 0x2D01)
    {
      unsigned int v181 = (((v178 + 1) >> 1) + 31) & 0x1FFFFFE0;
      if (v181 > 0x80 || v181 * ((v179 + 1) >> 1) >= 0x2D01)
      {
        char v182 = 0;
        *(_DWORD *)(a1 + 260) = 0;
      }
      else
      {
        char v182 = 1;
      }
      *(unsigned char *)(a1 + 258) = v182;
    }
  }
  if (*((_DWORD *)v3 + 580) >= 0x1Fu)
  {
    if (sub_D1C38(0x16u, 5))
    {
      int v183 = sub_D1C7C(0x16u);
      __uint64_t v184 = sub_DDEFC();
      uint64_t v185 = (const char *)sub_D1CB0(5);
      if (v183)
      {
        printf("%lld %d AVE %s: AVE_FIG: ui32NumCodedBuffers exceeds max allowed value of AVE_CODED_BUF_MAX_NUM (%d) Forcing to AVE_CODED_BUF_MAX_NUM\n", v184, 22, v185, 30);
        __uint64_t v186 = sub_DDEFC();
        int v277 = (const char *)sub_D1CB0(5);
        syslog(3, "%lld %d AVE %s: AVE_FIG: ui32NumCodedBuffers exceeds max allowed value of AVE_CODED_BUF_MAX_NUM (%d) Forcing to AVE_CODED_BUF_MAX_NUM", v186, 22, v277, 30);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AVE_FIG: ui32NumCodedBuffers exceeds max allowed value of AVE_CODED_BUF_MAX_NUM (%d) Forcing to AVE_CODED_BUF_MAX_NUM", v184, 22, v185, 30);
      }
    }
    *((_DWORD *)v3 + 580) = 30;
  }
  if (*(unsigned char *)(a1 + 255))
  {
    unsigned int v187 = *(_DWORD *)(a1 + 196);
    if ((v187 > 0x14 || ((1 << v187) & 0x100009) == 0) && *(unsigned char *)(a1 + 244) && !*(unsigned char *)(a1 + 252)) {
      goto LABEL_314;
    }
    if (sub_D1C38(0x16u, 5))
    {
      int v188 = sub_D1C7C(0x16u);
      __uint64_t v189 = sub_DDEFC();
      long long v190 = (const char *)sub_D1CB0(5);
      int v191 = *(_DWORD *)(a1 + 196);
      int v192 = *(unsigned __int8 *)(a1 + 252);
      if (v188)
      {
        printf("%lld %d AVE %s: FIG: eRCMode 0x%x bEnableQPMod %d  bEnableQPModRefresh %d -> not supported. set bFlatAreaLowQpEn to false\n", v189, 22, v190, v191, *(unsigned __int8 *)(a1 + 244), v192);
        __uint64_t v193 = sub_DDEFC();
        __uint64_t v194 = (const char *)sub_D1CB0(5);
        syslog(3, "%lld %d AVE %s: FIG: eRCMode 0x%x bEnableQPMod %d  bEnableQPModRefresh %d -> not supported. set bFlatAreaLowQpEn to false", v193, 22, v194, *(_DWORD *)(a1 + 196), *(unsigned __int8 *)(a1 + 244), *(unsigned __int8 *)(a1 + 252));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: eRCMode 0x%x bEnableQPMod %d  bEnableQPModRefresh %d -> not supported. set bFlatAreaLowQpEn to false", v189, 22, v190, v191, *(unsigned __int8 *)(a1 + 244), v192);
      }
    }
    *(unsigned char *)(a1 + 255) = 0;
  }
  if (*(unsigned char *)(a1 + 257) && *(_DWORD *)(a1 + 196) == 1) {
    *(unsigned char *)(a1 + 257) = 0;
  }
LABEL_314:
  if (*(unsigned char *)(a1 + 250))
  {
    if (*(_DWORD *)(a1 + 260))
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v195 = sub_D1C7C(0x16u);
        __uint64_t v196 = sub_DDEFC();
        char v197 = (const char *)sub_D1CB0(5);
        if (v195)
        {
          printf("%lld %d AVE %s: FIG: bEnableCrcQPMod set and EnableSelStatsFlags set is not supported. Forcing EnableSelStatsFlags to disabled\n", v196, 22, v197);
          __uint64_t v198 = sub_DDEFC();
          __uint64_t v278 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: bEnableCrcQPMod set and EnableSelStatsFlags set is not supported. Forcing EnableSelStatsFlags to disabled", v198, 22, v278);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: bEnableCrcQPMod set and EnableSelStatsFlags set is not supported. Forcing EnableSelStatsFlags to disabled", v196, 22, v197);
        }
      }
      *(_DWORD *)(a1 + 260) = 0;
    }
    if (*(unsigned char *)(a1 + 247))
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v199 = sub_D1C7C(0x16u);
        __uint64_t v200 = sub_DDEFC();
        __uint64_t v201 = (const char *)sub_D1CB0(5);
        if (v199)
        {
          printf("%lld %d AVE %s: FIG: bEnableCrcQPMod set and bEnableVarianceQPMod set is not supported. Forcing bEnableVarianceQPMod to disabled\n", v200, 22, v201);
          __uint64_t v202 = sub_DDEFC();
          v279 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: bEnableCrcQPMod set and bEnableVarianceQPMod set is not supported. Forcing bEnableVarianceQPMod to disabled", v202, 22, v279);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: bEnableCrcQPMod set and bEnableVarianceQPMod set is not supported. Forcing bEnableVarianceQPMod to disabled", v200, 22, v201);
        }
      }
      *(unsigned char *)(a1 + 247) = 0;
    }
  }
  if ((*(unsigned char *)(a1 + 203) & 0x80) != 0)
  {
    int v203 = v86[310];
    if ((v203 & 0x20) != 0) {
      *(_DWORD *)(a1 + 2024) |= 0x20u;
    }
    int v204 = v86[311];
    if ((v204 & 0x20) != 0)
    {
      *(_DWORD *)(a1 + 2024) &= ~0x20u;
      if ((v203 & 0x40) == 0)
      {
LABEL_332:
        if ((v204 & 0x40) == 0) {
          goto LABEL_334;
        }
        goto LABEL_333;
      }
    }
    else if ((v203 & 0x40) == 0)
    {
      goto LABEL_332;
    }
    *(_DWORD *)(a1 + 2024) |= 0x40u;
    if ((v204 & 0x40) == 0)
    {
LABEL_334:
      *(unsigned char *)(a1 + 255) = 0;
      *(_DWORD *)(a1 + 260) = 0;
      if (sub_D1C38(0x16u, 6))
      {
        int v205 = sub_D1C7C(0x16u);
        __uint64_t v206 = sub_DDEFC();
        v207 = (const char *)sub_D1CB0(6);
        if (v205)
        {
          printf("%lld %d AVE %s: FlatArea and Static QP mod is disabled when lookahead RC feature is enabled\n", v206, 22, v207);
          __uint64_t v208 = sub_DDEFC();
          int v280 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FlatArea and Static QP mod is disabled when lookahead RC feature is enabled", v208, 22, v280);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FlatArea and Static QP mod is disabled when lookahead RC feature is enabled", v206, 22, v207);
        }
      }
      goto LABEL_341;
    }
LABEL_333:
    *(_DWORD *)(a1 + 2024) &= ~0x40u;
    goto LABEL_334;
  }
LABEL_341:
  int v209 = *((_DWORD *)v3 + 45);
  if (v209 != 1)
  {
    int v210 = *(_DWORD *)(a1 + 196);
    if (v210 && v210 != 20)
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v211 = sub_D1C7C(0x16u);
        __uint64_t v212 = sub_DDEFC();
        v213 = (const char *)sub_D1CB0(5);
        int v214 = *(_DWORD *)(a1 + 196);
        if (v211)
        {
          printf("%lld %d AVE %s: FIG: Multiple PPSs and eRCMode %d is not supported. Forcing the PPS count to 1\n", v212, 22, v213, v214);
          __uint64_t v215 = sub_DDEFC();
          __uint64_t v281 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: Multiple PPSs and eRCMode %d is not supported. Forcing the PPS count to 1", v215, 22, v281, *(_DWORD *)(a1 + 196));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: Multiple PPSs and eRCMode %d is not supported. Forcing the PPS count to 1", v212, 22, v213, v214);
        }
      }
      int v209 = 1;
      *((_DWORD *)v3 + 45) = 1;
    }
    uint64_t v216 = 0;
    int32x4_t v217 = 0uLL;
    v218.i64[0] = 0xC0000000CLL;
    v218.i64[1] = 0xC0000000CLL;
    do
    {
      int32x4_t v217 = vsubq_s32(v217, (int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(a1 + 22148 + v216), v218)));
      v216 += 16;
    }
    while (v216 != 32);
    unsigned int v219 = vaddvq_s32(v217);
    uint64_t v220 = v219;
    if (v209 != v219)
    {
      if (sub_D1C38(3u, 4))
      {
        int v227 = sub_D1C7C(3u);
        __uint64_t v63 = sub_DDEFC();
        v228 = (const char *)sub_D1CB0(4);
        if (v227)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: PPS count = %d and ch_qp_index_offset_cnt = %d... are not compatible. fail\n", v63, 3, v228, "AVE_ValidateEncoderParameters", 6238, "encoderPrivateStorage->VideoParams.i32PPSsCount == ch_qp_index_offset_cnt", *((_DWORD *)v3 + 45), v220);
          __uint64_t v63 = sub_DDEFC();
          v228 = (const char *)sub_D1CB0(4);
        }
        uint64_t v286 = *((unsigned int *)v3 + 45);
        uint64_t v287 = v220;
        uint64_t v284 = 6238;
        v285 = "encoderPrivateStorage->VideoParams.i32PPSsCount == ch_qp_index_offset_cnt";
        int v262 = v228;
        uint64_t v65 = "%lld %d AVE %s: %s:%d %s | FIG: PPS count = %d and ch_qp_index_offset_cnt = %d... are not compatible. fail";
        goto LABEL_388;
      }
      return 4294954394;
    }
  }
  if ((*((unsigned char *)v3 + 804) || *v85 || (*(unsigned char *)(a1 + 1876) & 0xE0) != 0) && !*((unsigned char *)v3 + 10)) {
    *((unsigned char *)v3 + 10) = 1;
  }
  if (*v2 >= 3) {
    *((unsigned char *)v3 + 141) = 1;
  }
  if (*(_DWORD *)(a1 + 264) == 1 && *((unsigned char *)v3 + 989)) {
    *((unsigned char *)v3 + 989) = 0;
  }
  if ((v3[380] & 8) != 0 || *((_DWORD *)v3 + 223)) {
    *(_DWORD *)(a1 + 1920) = 0x8000000;
  }
  if (*(unsigned char *)(a1 + 1772))
  {
    *(_DWORD *)(a1 + 228) = *((_DWORD *)v3 + 398);
    *(_DWORD *)(a1 + 2024) &= ~4u;
  }
  if ((*(unsigned char *)(a1 + 1876) & 0xE0) != 0)
  {
    *(unsigned char *)(a1 + 253) = 1;
    if (!*((unsigned char *)v3 + 477)) {
      *((unsigned char *)v3 + 477) = 3;
    }
    *((unsigned char *)v3 + 9) = 1;
    *((unsigned char *)v3 + 476) = 1;
    if (*((_DWORD *)v3 + 636) != 1)
    {
      if (sub_D1C38(3u, 4))
      {
        int v221 = sub_D1C7C(3u);
        __uint64_t v63 = sub_DDEFC();
        int v222 = (const char *)sub_D1CB0(4);
        if (v221)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: MCTF for ChromaFmt %d... not supported. Fail\n", v63, 3, v222, "AVE_ValidateEncoderParameters", 6303, "(encoderPrivateStorage->SPSParams.chroma_format_idc == ChromaFmt_420)", *((_DWORD *)v3 + 636));
          __uint64_t v63 = sub_DDEFC();
          int v222 = (const char *)sub_D1CB0(4);
          v285 = "(encoderPrivateStorage->SPSParams.chroma_format_idc == ChromaFmt_420)";
          uint64_t v286 = *((unsigned int *)v3 + 636);
          uint64_t v284 = 6303;
        }
        else
        {
          uint64_t v286 = *((unsigned int *)v3 + 636);
          uint64_t v284 = 6303;
          v285 = "(encoderPrivateStorage->SPSParams.chroma_format_idc == ChromaFmt_420)";
        }
        int v262 = v222;
        uint64_t v65 = "%lld %d AVE %s: %s:%d %s | FIG: MCTF for ChromaFmt %d... not supported. Fail";
LABEL_388:
        syslog(3, v65, v63, 3, v262, "AVE_ValidateEncoderParameters", v284, v285, v286, v287);
        return 4294954394;
      }
      return 4294954394;
    }
    goto LABEL_376;
  }
  if (*((unsigned char *)v3 + 477))
  {
LABEL_376:
    if (!*((unsigned char *)v3 + 9))
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v223 = sub_D1C7C(0x16u);
        __uint64_t v224 = sub_DDEFC();
        int v225 = (const char *)sub_D1CB0(5);
        if (v223)
        {
          printf("%lld %d AVE %s: FIG: LRMERC enabled -> must run in LRME-pipe async.\n", v224, 22, v225);
          __uint64_t v226 = sub_DDEFC();
          v282 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: LRMERC enabled -> must run in LRME-pipe async.", v226, 22, v282);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: LRMERC enabled -> must run in LRME-pipe async.", v224, 22, v225);
        }
      }
      *((unsigned char *)v3 + 9) = 1;
    }
    goto LABEL_391;
  }
  if (!*((unsigned char *)v3 + 9))
  {
    unint64_t v229 = *(void *)(a1 + 200) & 0xFFFFFFFFFFFFFFFELL;
    goto LABEL_392;
  }
LABEL_391:
  unint64_t v229 = *(void *)(a1 + 200) | 1;
LABEL_392:
  *(void *)(a1 + 200) = v229;
  if (*((unsigned char *)v3 + 184))
  {
    int v230 = *((_DWORD *)v3 + 47);
    if (v230 == 1)
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v231 = sub_D1C7C(0x16u);
        __uint64_t v232 = sub_DDEFC();
        int v233 = (const char *)sub_D1CB0(5);
        if (v231)
        {
          printf("%lld %d AVE %s: FIG: Only one slice. Force to Frame Encoding Mode\n", v232, 22, v233);
          __uint64_t v234 = sub_DDEFC();
          int v283 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: Only one slice. Force to Frame Encoding Mode", v234, 22, v283);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: Only one slice. Force to Frame Encoding Mode", v232, 22, v233);
        }
      }
      *((unsigned char *)v3 + 184) = 0;
      int v230 = *((_DWORD *)v3 + 47);
    }
    if (v230)
    {
      uint64_t v235 = 0;
      uint64_t v236 = (v230 - 1);
      int v237 = (int *)(v3 + 98);
      while (1)
      {
        if (v236 == v235)
        {
          int v238 = *(_DWORD *)(a1 + 8 * v236 + 18068);
          if (v238 < 96) {
            break;
          }
        }
        else
        {
          int v238 = *v237;
          if (*v237 < 128) {
            break;
          }
        }
        if ((v238 + *(v237 - 1)) > *(_DWORD *)(a1 + 1884)) {
          break;
        }
        ++v235;
        v237 += 2;
        if (v230 == v235) {
          goto LABEL_414;
        }
      }
      if (sub_D1C38(0x16u, 5))
      {
        int v239 = sub_D1C7C(0x16u);
        __uint64_t v240 = sub_DDEFC();
        __uint64_t v241 = (const char *)sub_D1CB0(5);
        if (v239)
        {
          printf("%lld %d AVE %s: FIG: Slice Parameters Invalid slice[%d] %d iY: %d, iHeight: %d. %d Force to Frame Encoding\n", v240, 22, v241, v235, *((_DWORD *)v3 + 47), *(v237 - 1), *v237, *(_DWORD *)(a1 + 1884));
          __uint64_t v240 = sub_DDEFC();
          sub_D1CB0(5);
        }
        syslog(3, "%lld %d AVE %s: FIG: Slice Parameters Invalid slice[%d] %d iY: %d, iHeight: %d. %d Force to Frame Encoding", v240);
      }
      *((unsigned char *)v3 + 184) = 0;
      *(void *)(v3 + 94) = 1;
      *((_DWORD *)v3 + 49) = *(_DWORD *)(a1 + 1884);
    }
  }
LABEL_414:
  int v242 = *(_DWORD *)(a1 + 1876) | 0x1E;
  *(_DWORD *)(a1 + 1876) = v242;
  if (!*((unsigned char *)v3 + 477)) {
    *(_DWORD *)(a1 + 1876) = v242 & 0xFFFFFFF7;
  }
  if (*(_DWORD *)(a1 + 196) != 8 && sub_DEC60(*((_DWORD *)v3 + 638) + 8, *(double *)(a1 + 1816)))
  {
    if (sub_D1C38(3u, 4))
    {
      int v243 = sub_D1C7C(3u);
      __uint64_t v244 = sub_DDEFC();
      v245 = (const char *)sub_D1CB0(4);
      if (v243)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: Invalid Quality %f\n", v244, 3, v245, "AVE_ValidateEncoderParameters", 6385, "false", *(double *)(a1 + 1816));
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: Invalid Quality %f");
    }
    return 4294954394;
  }
  if (sub_DEC04(*(_DWORD *)(a1 + 1824), *((_DWORD *)v3 + 638) + 8))
  {
    if (sub_D1C38(3u, 4))
    {
      int v246 = sub_D1C7C(3u);
      __uint64_t v247 = sub_DDEFC();
      v248 = (const char *)sub_D1CB0(4);
      if (v246)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: Invalid InitialQpI %d\n", v247, 3, v248, "AVE_ValidateEncoderParameters", 6390, "false", *(_DWORD *)(a1 + 1824));
        __uint64_t v247 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: Invalid InitialQpI %d", v247);
    }
    return 4294954394;
  }
  if (sub_DEC04(*(_DWORD *)(a1 + 1828), *((_DWORD *)v3 + 638) + 8))
  {
    if (sub_D1C38(3u, 4))
    {
      int v249 = sub_D1C7C(3u);
      __uint64_t v250 = sub_DDEFC();
      __uint64_t v251 = (const char *)sub_D1CB0(4);
      if (v249)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: Invalid InitialQpP %d\n", v250, 3, v251, "AVE_ValidateEncoderParameters", 6395, "false", *(_DWORD *)(a1 + 1828));
        __uint64_t v250 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: Invalid InitialQpP %d", v250);
    }
    return 4294954394;
  }
  if (sub_DEC04(*(_DWORD *)(a1 + 1832), *((_DWORD *)v3 + 638) + 8))
  {
    if (sub_D1C38(3u, 4))
    {
      int v252 = sub_D1C7C(3u);
      __uint64_t v253 = sub_DDEFC();
      int v254 = (const char *)sub_D1CB0(4);
      if (v252)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: Invalid InitialQpB %d\n", v253, 3, v254, "AVE_ValidateEncoderParameters", 6400, "false", *(_DWORD *)(a1 + 1832));
        __uint64_t v253 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: Invalid InitialQpB %d", v253);
    }
    return 4294954394;
  }
  uint64_t result = sub_C58EC(v2[1], 0, *(_DWORD *)(a1 + 1880), *(_DWORD *)(a1 + 1884), *(_DWORD *)(a1 + 2028) != 1);
  if (result)
  {
    if (sub_D1C38(3u, 4))
    {
      int v255 = sub_D1C7C(3u);
      __uint64_t v256 = sub_DDEFC();
      v257 = (const char *)sub_D1CB0(4);
      if (v255)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: dimensions (%dx%d) not supported %d.\n", v256, 3, v257, "AVE_ValidateEncoderParameters", 6413, "false", *(_DWORD *)(a1 + 1880), *(_DWORD *)(a1 + 1884), *(_DWORD *)(a1 + 2028));
        __uint64_t v256 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: dimensions (%dx%d) not supported %d.", v256, 3);
    }
    return 4294954394;
  }
  return result;
}

void sub_4296C(uint64_t a1, __CVBuffer *a2)
{
  if (sub_D1C38(0x14u, 7))
  {
    int v4 = sub_D1C7C(0x14u);
    __uint64_t v5 = sub_DDEFC();
    __uint64_t v6 = (const char *)sub_D1CB0(7);
    if (v4)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_PrepareSequenceHeader\n", v5, 20, v6);
      __uint64_t v7 = sub_DDEFC();
      uint64_t v110 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PrepareSequenceHeader", v7, 20, v110);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PrepareSequenceHeader", v5, 20, v6);
    }
  }
  if (a2)
  {
    if (*(unsigned char *)(a1 + 20432)) {
      *(unsigned char *)(a1 + 20433) = 1;
    }
    __uint64_t v8 = (BOOL *)(a1 + 21468);
    switch(*(_DWORD *)(a1 + 20436))
    {
      case 1:
        uint64_t v9 = 0;
        *(unsigned char *)(a1 + 20464) = 1;
        *(void *)(a1 + 20456) = 0x101010101010101;
        *(void *)(a1 + 20448) = 0x101010101010101;
        *(void *)(a1 + 20440) = 0x101010101010101;
        int v10 = (int16x8_t *)(a1 + 20626);
        do
        {
          int16x8_t v11 = vuzp1q_s16(*(int16x8_t *)((char *)&unk_1437B8 + v9), *(int16x8_t *)((char *)&unk_1437B8 + v9 + 16));
          v10[-6] = v11;
          v10[-8] = v11;
          v10[-10] = v11;
          int16x8_t v12 = vuzp1q_s16(*(int16x8_t *)((char *)&unk_1437F8 + v9), *(int16x8_t *)((char *)&unk_1437F8 + v9 + 16));
          *int v10 = v12;
          v10[-2] = v12;
          v10[-4] = v12;
          v9 += 32;
          ++v10;
        }
        while (v9 != 64);
        uint64_t v13 = 0;
        int v14 = (int16x8_t *)(a1 + 20658);
        do
        {
          int16x8_t v15 = vuzp1q_s16(*(int16x8_t *)((char *)&unk_143838 + v13), *(int16x8_t *)((char *)&unk_143838 + v13 + 16));
          v14[32] = v15;
          v14[16] = v15;
          *int v14 = v15;
          int16x8_t v16 = vuzp1q_s16(*(int16x8_t *)((char *)&unk_143938 + v13), *(int16x8_t *)((char *)&unk_143938 + v13 + 16));
          v14[40] = v16;
          v14[24] = v16;
          v14[8] = v16;
          v13 += 32;
          ++v14;
        }
        while (v13 != 256);
        break;
      case 2:
        uint64_t v21 = 0;
        *(void *)(a1 + 20445) = 0x101010101010101;
        *(void *)(a1 + 20440) = 0x101010101010101;
        int v22 = (_OWORD *)(a1 + 20658);
        char v23 = (unsigned char *)(a1 + 20453);
        char v24 = a0123210;
        do
        {
          int v25 = (_OWORD *)(a1 + 20466 + v21);
          *char v23 = 0;
          *int v25 = *(_OWORD *)((char *)&unk_141EC4 + v21);
          v25[1] = *(_OWORD *)((char *)&unk_141EC4 + v21 + 16);
          v23[6] = 0;
          v22[3] = *((_OWORD *)v24 + 3);
          v22[2] = *((_OWORD *)v24 + 2);
          v22[1] = *((_OWORD *)v24 + 1);
          *int v22 = *(_OWORD *)v24;
          v22[7] = *((_OWORD *)v24 + 7);
          v22[6] = *((_OWORD *)v24 + 6);
          v22[5] = *((_OWORD *)v24 + 5);
          v22[4] = *((_OWORD *)v24 + 4);
          v22 += 8;
          ++v23;
          v21 += 32;
          v24 += 64;
        }
        while (v21 != 192);
        break;
      case 5:
        uint64_t v29 = 0;
        *(unsigned char *)(a1 + 20440) = 1;
        uint64_t v30 = a1 + 20466;
        char v31 = (char *)&unk_142284;
        uint64_t v32 = a1 + 20658;
        __uint64_t v33 = (char *)&unk_142344;
        do
        {
          uint64_t v34 = 0;
          uint64_t v35 = a1 + v29 + 20376;
          *(unsigned char *)(v35 + 65) = 1;
          *(unsigned char *)(v35 + 77) = 0;
          do
          {
            *(int16x8_t *)(v30 + v34) = vshlq_n_s16(*(int16x8_t *)&v31[v34], 3uLL);
            v34 += 16;
          }
          while (v34 != 32);
          uint64_t v36 = 0;
          uint64_t v37 = a1 + v29;
          *(unsigned char *)(v37 + 20447) = 1;
          *(unsigned char *)(v37 + 20459) = 0;
          do
          {
            *(int16x8_t *)(v32 + v36) = vshlq_n_s16(*(int16x8_t *)&v33[v36], 3uLL);
            v36 += 16;
          }
          while (v36 != 128);
          ++v29;
          v31 += 32;
          v30 += 32;
          v33 += 128;
          v32 += 128;
        }
        while (v29 != 6);
        break;
      case 6:
        uint64_t v38 = 0;
        *(unsigned char *)(a1 + 20440) = 1;
        uint64_t v39 = a1 + 20466;
        __uint64_t v40 = (char *)&unk_142644;
        uint64_t v41 = a1 + 20658;
        double v42 = (char *)&unk_142704;
        do
        {
          uint64_t v43 = 0;
          uint64_t v44 = a1 + v38 + 20376;
          *(unsigned char *)(v44 + 65) = 1;
          *(unsigned char *)(v44 + 77) = 0;
          do
          {
            *(int16x8_t *)(v39 + v43) = vshlq_n_s16(*(int16x8_t *)&v40[v43], 3uLL);
            v43 += 16;
          }
          while (v43 != 32);
          uint64_t v45 = 0;
          uint64_t v46 = a1 + v38;
          *(unsigned char *)(v46 + 20447) = 1;
          *(unsigned char *)(v46 + 20459) = 0;
          do
          {
            *(int16x8_t *)(v41 + v45) = vshlq_n_s16(*(int16x8_t *)&v42[v45], 3uLL);
            v45 += 16;
          }
          while (v45 != 128);
          ++v38;
          v40 += 32;
          v39 += 32;
          v42 += 128;
          v41 += 128;
        }
        while (v38 != 6);
        break;
      case 7:
        uint64_t v47 = 0;
        *(void *)(a1 + 20445) = 0x101010101010101;
        *(void *)(a1 + 20440) = 0x101010101010101;
        __uint64_t v48 = (long long *)(a1 + 20658);
        long long v49 = (unsigned char *)(a1 + 20453);
        long long v50 = &xmmword_142AC4;
        do
        {
          int v51 = (_OWORD *)(a1 + 20466 + v47);
          *long long v49 = 0;
          _OWORD *v51 = *(_OWORD *)((char *)&unk_142A04 + v47);
          v51[1] = *(_OWORD *)((char *)&unk_142A04 + v47 + 16);
          v49[6] = 0;
          v48[3] = v50[3];
          v48[2] = v50[2];
          v48[1] = v50[1];
          *__uint64_t v48 = *v50;
          v48[7] = v50[7];
          v48[6] = v50[6];
          v48[5] = v50[5];
          v48[4] = v50[4];
          v48 += 8;
          ++v49;
          v47 += 32;
          v50 += 8;
        }
        while (v47 != 192);
        break;
      default:
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 20440) = 0;
        int v27 = (char *)(a1 + 20658);
        int v28 = (unsigned char *)(a1 + 20441);
        do
        {
          *int v28 = 0;
          v28[12] = 0;
          memset_pattern16((void *)(a1 + 20466 + v26), &unk_141760, 0x20uLL);
          v28[6] = 0;
          v28[18] = 0;
          memset_pattern16(v27, &unk_141760, 0x80uLL);
          v26 += 32;
          v27 += 128;
          ++v28;
        }
        while (v26 != 192);
        break;
    }
    *(uint32x2_t *)(a1 + 21452) = vsra_n_u32((uint32x2_t)-1, *(uint32x2_t *)(a1 + 1880), 4uLL);
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
    __uint64_t v53 = sub_D7E18(PixelFormatType);
    if (v53)
    {
      int v54 = v53;
      BOOL v55 = *((_DWORD *)v53 + 7) == 1;
      *(_DWORD *)(a1 + 21476) = v55;
      BOOL v59 = v55 || *v8;
      *__uint64_t v8 = v59;
      if (sub_D1C38(0x1Eu, 6))
      {
        int v60 = sub_D1C7C(0x1Eu);
        __uint64_t v61 = sub_DDEFC();
        int v62 = (const char *)sub_D1CB0(6);
        if (v60)
        {
          printf("%lld %d AVE %s: FIG: video_full_range_flag %d\n", v61, 30, v62, *((_DWORD *)v54 + 7) == 1);
          sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: video_full_range_flag %d");
      }
    }
    else if (sub_D1C38(0x1Eu, 6))
    {
      int v56 = sub_D1C7C(0x1Eu);
      __uint64_t v57 = sub_DDEFC();
      __uint64_t v58 = (const char *)sub_D1CB0(6);
      if (v56)
      {
        printf("%lld %d AVE %s: FIG: Unknown dynamic range\n", v57, 30, v58);
        sub_DDEFC();
        sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: Unknown dynamic range");
    }
    uint64_t v63 = *(void *)(a1 + 20168);
    if ((v63 & 0x10) != 0)
    {
      int v64 = *(_DWORD *)(a1 + 228);
      if (v64 < 1) {
        int v64 = 30;
      }
      *__uint64_t v8 = 1;
      *(unsigned char *)(a1 + 21508) = 1;
      *(_DWORD *)(a1 + 21512) = 0x19BFCC0u / v64;
      *(_DWORD *)(a1 + 21516) = 27000000;
      *(unsigned char *)(a1 + 21520) = 0;
    }
    if ((v63 & 0x20) != 0) {
      *(unsigned char *)(a1 + 21508) = 0;
    }
    CFTypeRef v65 = CVBufferCopyAttachment(a2, kCVImageBufferChromaLocationTopFieldKey, 0);
    if (!v65)
    {
LABEL_80:
      CFTypeRef v78 = CVBufferCopyAttachment(a2, kCVImageBufferChromaLocationBottomFieldKey, 0);
      if (!v78)
      {
LABEL_102:
        if (*(_DWORD *)(a1 + 21500) || *(_DWORD *)(a1 + 21504))
        {
          *__uint64_t v8 = 1;
          *(unsigned char *)(a1 + 21496) = 1;
          if (sub_D1C38(0x1Eu, 6))
          {
            int v91 = sub_D1C7C(0x1Eu);
            __uint64_t v92 = sub_DDEFC();
            int v93 = (const char *)sub_D1CB0(6);
            if (v91)
            {
              printf("%lld %d AVE %s: FIG: chroma_loc_info_present_flag TRUE\n", v92, 30, v93);
              __uint64_t v94 = sub_DDEFC();
              __uint64_t v114 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: chroma_loc_info_present_flag TRUE", v94, 30, v114);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: chroma_loc_info_present_flag TRUE", v92, 30, v93);
            }
          }
        }
        if (sub_D1C38(0x1Eu, 6))
        {
          int v95 = sub_D1C7C(0x1Eu);
          __uint64_t v96 = sub_DDEFC();
          int v97 = (const char *)sub_D1CB0(6);
          int v98 = *(unsigned __int8 *)(a1 + 21496);
          int v99 = *(_DWORD *)(a1 + 21504);
          if (v95)
          {
            printf("%lld %d AVE %s: FIG: chroma_loc_info_present_flag %d , chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d\n", v96, 30, v97, v98, *(_DWORD *)(a1 + 21500), v99);
            __uint64_t v100 = sub_DDEFC();
            __uint64_t v101 = (const char *)sub_D1CB0(6);
            syslog(3, "%lld %d AVE %s: FIG: chroma_loc_info_present_flag %d , chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d", v100, 30, v101, *(unsigned __int8 *)(a1 + 21496), *(_DWORD *)(a1 + 21500), *(_DWORD *)(a1 + 21504));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: chroma_loc_info_present_flag %d , chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d", v96, 30, v97, v98, *(_DWORD *)(a1 + 21500), v99);
          }
        }
        if ((*(unsigned char *)(a1 + 20168) & 2) != 0) {
          *__uint64_t v8 = 0;
        }
        return;
      }
      uint64_t v79 = v78;
      if (sub_D1C38(0x1Eu, 6))
      {
        int v80 = sub_D1C7C(0x1Eu);
        __uint64_t v81 = sub_DDEFC();
        int v82 = (const char *)sub_D1CB0(6);
        if (v80)
        {
          printf("%lld %d AVE %s: FIG: kCVImageBufferChromaLocationBottomFieldKey found!\n", v81, 30, v82);
          __uint64_t v83 = sub_DDEFC();
          int v113 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: kCVImageBufferChromaLocationBottomFieldKey found!", v83, 30, v113);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: kCVImageBufferChromaLocationBottomFieldKey found!", v81, 30, v82);
        }
      }
      if (!CFEqual(v79, kCVImageBufferChromaLocation_Left))
      {
        if (CFEqual(v79, kCVImageBufferChromaLocation_Center))
        {
          int v84 = 1;
          goto LABEL_97;
        }
        if (CFEqual(v79, kCVImageBufferChromaLocation_TopLeft))
        {
          int v84 = 2;
          goto LABEL_97;
        }
        if (CFEqual(v79, kCVImageBufferChromaLocation_Top))
        {
          int v84 = 3;
          goto LABEL_97;
        }
        if (CFEqual(v79, kCVImageBufferChromaLocation_BottomLeft))
        {
          int v84 = 4;
          goto LABEL_97;
        }
        if (CFEqual(v79, kCVImageBufferChromaLocation_Bottom))
        {
          int v84 = 5;
          goto LABEL_97;
        }
        if (sub_D1C38(0x1Eu, 5))
        {
          int v106 = sub_D1C7C(0x1Eu);
          __uint64_t v107 = sub_DDEFC();
          int v108 = (const char *)sub_D1CB0(5);
          if (v106)
          {
            printf("%lld %d AVE %s: AVE FIG WARNING: kCVImageBufferChromaLocationTopFieldKey with invalid value -> use default\n", v107, 30, v108);
            __uint64_t v109 = sub_DDEFC();
            int v116 = (const char *)sub_D1CB0(5);
            syslog(3, "%lld %d AVE %s: AVE FIG WARNING: kCVImageBufferChromaLocationTopFieldKey with invalid value -> use default", v109, 30, v116);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: AVE FIG WARNING: kCVImageBufferChromaLocationTopFieldKey with invalid value -> use default", v107, 30, v108);
          }
        }
      }
      int v84 = 0;
LABEL_97:
      *(_DWORD *)(a1 + 21504) = v84;
      if (sub_D1C38(0x1Eu, 6))
      {
        int v85 = sub_D1C7C(0x1Eu);
        __uint64_t v86 = sub_DDEFC();
        int v87 = (const char *)sub_D1CB0(6);
        int v88 = *(_DWORD *)(a1 + 21504);
        if (v85)
        {
          printf("%lld %d AVE %s: FIG: chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d\n", v86, 30, v87, *(_DWORD *)(a1 + 21500), v88);
          __uint64_t v89 = sub_DDEFC();
          int v90 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d", v89, 30, v90, *(_DWORD *)(a1 + 21500), *(_DWORD *)(a1 + 21504));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d", v86, 30, v87, *(_DWORD *)(a1 + 21500), v88);
        }
      }
      CFRelease(v79);
      goto LABEL_102;
    }
    int v66 = v65;
    if (sub_D1C38(0x1Eu, 6))
    {
      int v67 = sub_D1C7C(0x1Eu);
      __uint64_t v68 = sub_DDEFC();
      __uint64_t v69 = (const char *)sub_D1CB0(6);
      if (v67)
      {
        printf("%lld %d AVE %s: FIG: kCVImageBufferChromaLocationTopFieldKey found!\n", v68, 30, v69);
        __uint64_t v70 = sub_DDEFC();
        __uint64_t v112 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: kCVImageBufferChromaLocationTopFieldKey found!", v70, 30, v112);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: kCVImageBufferChromaLocationTopFieldKey found!", v68, 30, v69);
      }
    }
    if (!CFEqual(v66, kCVImageBufferChromaLocation_Left))
    {
      if (CFEqual(v66, kCVImageBufferChromaLocation_Center))
      {
        int v71 = 1;
        goto LABEL_75;
      }
      if (CFEqual(v66, kCVImageBufferChromaLocation_TopLeft))
      {
        int v71 = 2;
        goto LABEL_75;
      }
      if (CFEqual(v66, kCVImageBufferChromaLocation_Top))
      {
        int v71 = 3;
        goto LABEL_75;
      }
      if (CFEqual(v66, kCVImageBufferChromaLocation_BottomLeft))
      {
        int v71 = 4;
        goto LABEL_75;
      }
      if (CFEqual(v66, kCVImageBufferChromaLocation_Bottom))
      {
        int v71 = 5;
        goto LABEL_75;
      }
      if (sub_D1C38(0x1Eu, 5))
      {
        int v102 = sub_D1C7C(0x1Eu);
        __uint64_t v103 = sub_DDEFC();
        __uint64_t v104 = (const char *)sub_D1CB0(5);
        if (v102)
        {
          printf("%lld %d AVE %s: AVE FIG WARNING: kCVImageBufferChromaLocationTopFieldKey with invalid value -> use default\n", v103, 30, v104);
          __uint64_t v105 = sub_DDEFC();
          __uint64_t v115 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: AVE FIG WARNING: kCVImageBufferChromaLocationTopFieldKey with invalid value -> use default", v105, 30, v115);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: AVE FIG WARNING: kCVImageBufferChromaLocationTopFieldKey with invalid value -> use default", v103, 30, v104);
        }
      }
    }
    int v71 = 0;
LABEL_75:
    *(_DWORD *)(a1 + 21500) = v71;
    *(_DWORD *)(a1 + 21504) = v71;
    if (sub_D1C38(0x1Eu, 6))
    {
      int v72 = sub_D1C7C(0x1Eu);
      __uint64_t v73 = sub_DDEFC();
      __uint64_t v74 = (const char *)sub_D1CB0(6);
      int v75 = *(_DWORD *)(a1 + 21504);
      if (v72)
      {
        printf("%lld %d AVE %s: FIG: chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d\n", v73, 30, v74, *(_DWORD *)(a1 + 21500), v75);
        __uint64_t v76 = sub_DDEFC();
        __uint64_t v77 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d", v76, 30, v77, *(_DWORD *)(a1 + 21500), *(_DWORD *)(a1 + 21504));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d", v73, 30, v74, *(_DWORD *)(a1 + 21500), v75);
      }
    }
    CFRelease(v66);
    goto LABEL_80;
  }
  if (sub_D1C38(3u, 4))
  {
    int v17 = sub_D1C7C(3u);
    __uint64_t v18 = sub_DDEFC();
    __uint64_t v19 = (const char *)sub_D1CB0(4);
    if (v17)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: imageBuffer = NULL.\n", v18, 3, v19, "AVE_PrepareSequenceHeader", 4573, "imageBuffer != __null");
      __uint64_t v20 = sub_DDEFC();
      int v111 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: imageBuffer = NULL.", v20, 3, v111, "AVE_PrepareSequenceHeader", 4573, "imageBuffer != __null");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: imageBuffer = NULL.", v18, 3, v19, "AVE_PrepareSequenceHeader", 4573, "imageBuffer != __null");
    }
  }
}

uint64_t sub_43720(uint64_t a1)
{
  if (sub_D1C38(0x14u, 7))
  {
    int v2 = sub_D1C7C(0x14u);
    __uint64_t v3 = sub_DDEFC();
    int v4 = (const char *)sub_D1CB0(7);
    if (v2)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_ManageSessionSettings\n", v3, 20, v4);
      __uint64_t v5 = sub_DDEFC();
      v279 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_ManageSessionSettings", v5, 20, v279);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_ManageSessionSettings", v3, 20, v4);
    }
  }
  if (*(_DWORD *)(a1 + 196) == 4 && !*(_DWORD *)(a1 + 292)) {
    *(_DWORD *)(a1 + 292) = 10000;
  }
  if (sub_D1C38(0x14u, 7))
  {
    int v6 = sub_D1C7C(0x14u);
    __uint64_t v7 = sub_DDEFC();
    __uint64_t v8 = (const char *)sub_D1CB0(7);
    if (v6)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_PrepareRealTimeParameters\n", v7, 20, v8);
      __uint64_t v9 = sub_DDEFC();
      int v280 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PrepareRealTimeParameters", v9, 20, v280);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PrepareRealTimeParameters", v7, 20, v8);
    }
  }
  int v10 = sub_C7604();
  int16x8_t v11 = v10;
  if (v10[57]) {
    *(_DWORD *)(a1 + 264) = 1;
  }
  if (v10[61]) {
    *(_DWORD *)(a1 + 264) = 0;
  }
  if ((v10[1161] & 4) != 0) {
    *(unsigned char *)(a1 + 216) = 1;
  }
  int16x8_t v12 = (unsigned char *)(a1 + 21468);
  if ((v10[1169] & 4) != 0) {
    *(unsigned char *)(a1 + 216) = 0;
  }
  uint64_t v13 = a1 + 17872;
  if (*(_DWORD *)(a1 + 264) == 1 && (!*(unsigned char *)(a1 + 216) || *(_DWORD *)(a1 + 25088) == 66))
  {
    int v14 = *(_DWORD *)(a1 + 196);
    if (v14 != 3 && v14 != 20) {
      sub_48D8C(a1);
    }
  }
  int v15 = *((_DWORD *)v11 + 17);
  if (v15 >= 1) {
    *(_DWORD *)(a1 + 20360) = v15;
  }
  if ((v11[1232] & 0x40) != 0) {
    *(unsigned char *)(a1 + 255) = 1;
  }
  if ((v11[1236] & 0x40) != 0) {
    *(unsigned char *)(a1 + 255) = 0;
  }
  if ((v11[1161] & 0x80) != 0) {
    *(unsigned char *)(a1 + 257) = 1;
  }
  if ((v11[1169] & 0x80) != 0) {
    *(unsigned char *)(a1 + 257) = 0;
  }
  int v16 = *((_DWORD *)v11 + 296);
  if (v16 != -1 && sub_35CE4(a1, (double)v16) && sub_D1C38(0x16u, 5))
  {
    int v17 = sub_D1C7C(0x16u);
    __uint64_t v18 = sub_DDEFC();
    __uint64_t v19 = (const char *)sub_D1CB0(5);
    if (v17)
    {
      printf("%lld %d AVE %s: FIG: Unsupported value coremedia_Quality = %d\n", v18, 22, v19, v16);
      __uint64_t v20 = sub_DDEFC();
      __uint64_t v281 = (const char *)sub_D1CB0(5);
      syslog(3, "%lld %d AVE %s: FIG: Unsupported value coremedia_Quality = %d", v20, 22, v281, v16);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: Unsupported value coremedia_Quality = %d", v18, 22, v19, v16);
    }
  }
  if (*(_DWORD *)(a1 + 264) != 1) {
    *(_DWORD *)(a1 + 18748) = 500;
  }
  if (sub_D1C38(0x14u, 7))
  {
    int v21 = sub_D1C7C(0x14u);
    __uint64_t v22 = sub_DDEFC();
    char v23 = (const char *)sub_D1CB0(7);
    if (v21)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_SetNewEncoderDefaultBasedOnProfileAndLevel\n", v22, 20, v23);
      __uint64_t v24 = sub_DDEFC();
      v282 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetNewEncoderDefaultBasedOnProfileAndLevel", v24, 20, v282);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetNewEncoderDefaultBasedOnProfileAndLevel", v22, 20, v23);
    }
  }
  int v25 = sub_C7604();
  uint64_t v26 = v25;
  int v27 = v25[274];
  if ((v27 - 66) <= 0x38 && ((1 << (v27 - 66)) & 0x100000400000801) != 0
    || v27 == 244)
  {
    *(_DWORD *)(a1 + 25088) = v27;
  }
  unsigned int v28 = v25[275];
  if (v28 <= 0x34 && ((1 << v28) & 0x1C0701C0703C02) != 0) {
    *(_DWORD *)(a1 + 25092) = v28;
  }
  if (*(_DWORD *)(a1 + 25088))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v29 = sub_D1C7C(0x1Eu);
      __uint64_t v30 = sub_DDEFC();
      char v31 = (const char *)sub_D1CB0(6);
      int v32 = *(_DWORD *)(a1 + 20380);
      if (v29)
      {
        printf("%lld %d AVE %s: FIG: FIGProfile = %d -> change the default %d\n", v30, 30, v31, *(_DWORD *)(a1 + 25088), v32);
        __uint64_t v33 = sub_DDEFC();
        uint64_t v34 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: FIGProfile = %d -> change the default %d", v33, 30, v34, *(_DWORD *)(a1 + 25088), *(_DWORD *)(a1 + 20380));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: FIGProfile = %d -> change the default %d", v30, 30, v31, *(_DWORD *)(a1 + 25088), v32);
      }
    }
    *(_DWORD *)(a1 + 20380) = *(_DWORD *)(a1 + 25088);
  }
  BOOL v35 = *(unsigned char *)(a1 + 18676) || *(_DWORD *)(a1 + 1944) || *(int *)(a1 + 18680) > 1 || *(_DWORD *)(a1 + 1756) > 1u;
  *(unsigned char *)(a1 + 17882) = v35;
  int v36 = *(_DWORD *)(a1 + 196);
  if ((v36 == 4 || v36 == 2) && !*(_DWORD *)(a1 + 292)) {
    *(_DWORD *)(a1 + 292) = 10000;
  }
  int v37 = v26[343];
  if (v37 > 36)
  {
    switch(v37)
    {
      case 37:
        *(_DWORD *)(a1 + 292) = 37;
LABEL_104:
        if (*(_DWORD *)(a1 + 25096) == 2) {
          goto LABEL_175;
        }
        if (sub_D1C38(0x1Eu, 6))
        {
          int v51 = sub_D1C7C(0x1Eu);
          __uint64_t v52 = sub_DDEFC();
          __uint64_t v53 = (const char *)sub_D1CB0(6);
          int v54 = *(_DWORD *)(a1 + 22108);
          if (v51)
          {
            printf("%lld %d AVE %s: FIG: FIGEntropyMode = %d -> change the default %d\n", v52, 30, v53, *(_DWORD *)(a1 + 25096), v54);
            __uint64_t v55 = sub_DDEFC();
            int v56 = (const char *)sub_D1CB0(6);
            syslog(3, "%lld %d AVE %s: FIG: FIGEntropyMode = %d -> change the default %d", v55, 30, v56, *(_DWORD *)(a1 + 25096), *(_DWORD *)(a1 + 22108));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: FIGEntropyMode = %d -> change the default %d", v52, 30, v53, *(_DWORD *)(a1 + 25096), v54);
          }
        }
        if (*(_DWORD *)(a1 + 25096)) {
LABEL_175:
        }
          *(_DWORD *)(a1 + 22108) = 1;
        else {
          *(_DWORD *)(a1 + 22108) = 0;
        }
        int v90 = *(_DWORD *)(a1 + 20380);
        if (v90 == 77)
        {
          char v91 = 0;
        }
        else if (v90 == 66)
        {
          char v91 = 0;
          *(_DWORD *)(a1 + 22108) = 0;
        }
        else
        {
          char v91 = 1;
        }
        *(unsigned char *)(a1 + 22183) = v91;
        *(_OWORD *)(a1 + 22148) = xmmword_141730;
        *(void *)&long long v92 = 0xC0000000CLL;
        *((void *)&v92 + 1) = 0xC0000000CLL;
        *(_OWORD *)(a1 + 22164) = v92;
        *(_OWORD *)(a1 + 22188) = xmmword_141730;
        *(_OWORD *)(a1 + 22204) = v92;
        *(_DWORD *)(a1 + 17884) = 2;
        *int16x8_t v12 = 1;
        *(unsigned char *)(a1 + 21524) = 1;
        *(_OWORD *)(a1 + 21528) = xmmword_141740;
        *(void *)(a1 + 21544) = 15;
        *(_DWORD *)(a1 + 21552) = 4;
        *(_DWORD *)(a1 + 228) = 60;
        *(void *)(a1 + 2028) = 60;
        *(void *)(a1 + 2040) = 0xBFF0000000000000;
        *(void *)(a1 + 2048) = 0xBFF0000000000000;
        *(unsigned char *)(a1 + 254) = 1;
        *(_DWORD *)(a1 + 260) = 0;
        *(unsigned char *)(a1 + 18684) = 0;
        *(void *)(a1 + 200) |= 0x10uLL;
        *(_DWORD *)(a1 + 1868) = 3;
        *(unsigned char *)(a1 + 17874) = 1;
        if (!*(unsigned char *)(a1 + 25104))
        {
          if (*(unsigned char *)(a1 + 25106))
          {
            int v93 = *(_DWORD *)(a1 + 1808);
            if (v93 >= 1)
            {
              uint64_t v94 = 0;
              int v95 = (double *)(a1 + 1784);
              unsigned int v67 = 0x7FFFFFFF;
              do
              {
                if (v67 > (*(v95 - 1) * 8.0 / *v95))
                {
                  if (sub_D1C38(0x1Eu, 6))
                  {
                    int v96 = sub_D1C7C(0x1Eu);
                    __uint64_t v97 = sub_DDEFC();
                    int v98 = (const char *)sub_D1CB0(6);
                    double v99 = *(v95 - 1);
                    double v100 = *v95;
                    if (v96)
                    {
                      printf("%lld %d AVE %s: FIG: uint64_t i = %d DataRateLimitsSize %f DataRateLimitsSeconds %f\n", v97, 30, v98, v94, *(v95 - 1), v100);
                      __uint64_t v97 = sub_DDEFC();
                      int v98 = (const char *)sub_D1CB0(6);
                      double v99 = *(v95 - 1);
                      double v100 = *v95;
                    }
                    syslog(3, "%lld %d AVE %s: FIG: uint64_t i = %d DataRateLimitsSize %f DataRateLimitsSeconds %f", v97, 30, v98, v94, v99, v100);
                  }
                  unsigned int v67 = (*(v95 - 1) * 8.0 / *v95);
                  int v93 = *(_DWORD *)(a1 + 1808);
                }
                ++v94;
                v95 += 2;
              }
              while (v94 < v93);
              goto LABEL_192;
            }
          }
        }
        goto LABEL_203;
      case 38:
        *(_DWORD *)(a1 + 292) = 38;
LABEL_109:
        *(unsigned char *)(a1 + 244) = 1;
        *(unsigned char *)(a1 + 246) = 1;
        *(unsigned char *)(a1 + 250) = 1;
        *(_DWORD *)(a1 + 260) = 0;
        goto LABEL_110;
      case 10000:
        *(_DWORD *)(a1 + 292) = 10000;
        goto LABEL_79;
    }
  }
  else
  {
    switch(v37)
    {
      case 0:
        *(_DWORD *)(a1 + 292) = 0;
        goto LABEL_85;
      case 1:
        *(_DWORD *)(a1 + 292) = 1;
        goto LABEL_95;
      case 20:
        *(_DWORD *)(a1 + 292) = 20;
LABEL_110:
        if (*(_DWORD *)(a1 + 25096) == 2) {
          goto LABEL_144;
        }
        if (sub_D1C38(0x1Eu, 6))
        {
          int v57 = sub_D1C7C(0x1Eu);
          __uint64_t v58 = sub_DDEFC();
          BOOL v59 = (const char *)sub_D1CB0(6);
          int v60 = *(_DWORD *)(a1 + 22108);
          if (v57)
          {
            printf("%lld %d AVE %s: FIG: FIGEntropyMode = %d -> change the default %d\n", v58, 30, v59, *(_DWORD *)(a1 + 25096), v60);
            __uint64_t v61 = sub_DDEFC();
            int v62 = (const char *)sub_D1CB0(6);
            syslog(3, "%lld %d AVE %s: FIG: FIGEntropyMode = %d -> change the default %d", v61, 30, v62, *(_DWORD *)(a1 + 25096), *(_DWORD *)(a1 + 22108));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: FIGEntropyMode = %d -> change the default %d", v58, 30, v59, *(_DWORD *)(a1 + 25096), v60);
          }
        }
        if (*(_DWORD *)(a1 + 25096)) {
LABEL_144:
        }
          *(_DWORD *)(a1 + 22108) = 1;
        else {
          *(_DWORD *)(a1 + 22108) = 0;
        }
        int v73 = *(_DWORD *)(a1 + 20380);
        if (v73 == 77)
        {
          char v74 = 0;
        }
        else if (v73 == 66)
        {
          char v74 = 0;
          *(_DWORD *)(a1 + 22108) = 0;
        }
        else
        {
          char v74 = 1;
        }
        *(unsigned char *)(a1 + 22183) = v74;
        *(_OWORD *)(a1 + 22148) = xmmword_141730;
        *(void *)&long long v75 = 0xC0000000CLL;
        *((void *)&v75 + 1) = 0xC0000000CLL;
        *(_OWORD *)(a1 + 22164) = v75;
        *(_OWORD *)(a1 + 22188) = xmmword_141730;
        *(_OWORD *)(a1 + 22204) = v75;
        *(_DWORD *)(a1 + 17884) = 2;
        *int16x8_t v12 = 1;
        *(unsigned char *)(a1 + 21524) = 1;
        *(_OWORD *)(a1 + 21528) = xmmword_141740;
        *(void *)(a1 + 21544) = 15;
        *(_DWORD *)(a1 + 21552) = 4;
        *(_DWORD *)(a1 + 228) = 60;
        *(void *)(a1 + 2028) = 0x7FFFFFFFLL;
        *(void *)(a1 + 2040) = 0xBFF0000000000000;
        *(void *)(a1 + 2048) = 0xBFF0000000000000;
        *(unsigned char *)(a1 + 254) = 1;
        *(_DWORD *)(a1 + 260) = 0;
        *(unsigned char *)(a1 + 18684) = 0;
        *(void *)(a1 + 200) |= 0x10uLL;
        *(_DWORD *)(a1 + 1868) = 3;
        if (!*(unsigned char *)(a1 + 25104))
        {
          if (*(unsigned char *)(a1 + 25106))
          {
            int v76 = *(_DWORD *)(a1 + 1808);
            if (v76 >= 1)
            {
              uint64_t v77 = 0;
              CFTypeRef v78 = (double *)(a1 + 1784);
              unsigned int v67 = 0x7FFFFFFF;
              do
              {
                if (v67 > (*(v78 - 1) * 8.0 / *v78))
                {
                  if (sub_D1C38(0x1Eu, 6))
                  {
                    int v79 = sub_D1C7C(0x1Eu);
                    __uint64_t v80 = sub_DDEFC();
                    __uint64_t v81 = (const char *)sub_D1CB0(6);
                    double v82 = *(v78 - 1);
                    double v83 = *v78;
                    if (v79)
                    {
                      printf("%lld %d AVE %s: FIG: uint64_t i = %d DataRateLimitsSize %f DataRateLimitsSeconds %f\n", v80, 30, v81, v77, *(v78 - 1), v83);
                      __uint64_t v80 = sub_DDEFC();
                      __uint64_t v81 = (const char *)sub_D1CB0(6);
                      double v82 = *(v78 - 1);
                      double v83 = *v78;
                    }
                    syslog(3, "%lld %d AVE %s: FIG: uint64_t i = %d DataRateLimitsSize %f DataRateLimitsSeconds %f", v80, 30, v81, v77, v82, v83);
                  }
                  unsigned int v67 = (*(v78 - 1) * 8.0 / *v78);
                  int v76 = *(_DWORD *)(a1 + 1808);
                }
                ++v77;
                v78 += 2;
              }
              while (v77 < v76);
LABEL_192:
              if (v67 != 0x7FFFFFFF) {
                *(_DWORD *)(a1 + 192) = v67;
              }
              goto LABEL_203;
            }
          }
        }
        goto LABEL_203;
    }
  }
  int v63 = *(_DWORD *)(a1 + 292);
  if (v63 <= 36)
  {
    if (v63 != 1)
    {
      if (v63 == 20) {
        goto LABEL_110;
      }
      goto LABEL_85;
    }
LABEL_95:
    *(_DWORD *)(a1 + 208) |= 0x20u;
    *(unsigned char *)(a1 + 1924) = 1;
    *(unsigned char *)(a1 + 244) = 0;
    *(unsigned char *)(a1 + 252) = 0;
    *(_DWORD *)(a1 + 260) = 0;
    *(_DWORD *)(a1 + 196) = 20;
    *(unsigned char *)(a1 + 18684) = 0;
    if (*(unsigned char *)(a1 + 216))
    {
      int v44 = *(_DWORD *)(a1 + 25100);
      if (v44 < 0)
      {
        if (*(void *)(a1 + 25264)) {
          int v44 = 3;
        }
        else {
          int v44 = 1;
        }
      }
      *(_DWORD *)(a1 + 1944) = v44;
      if (sub_D1C38(0x1Eu, 6))
      {
        int v45 = sub_D1C7C(0x1Eu);
        __uint64_t v46 = sub_DDEFC();
        uint64_t v47 = (const char *)sub_D1CB0(6);
        int v48 = *(_DWORD *)(a1 + 25100);
        if (v45)
        {
          printf("%lld %d AVE %s: FIG: FIGAllowFrameReordering ON -> B will be = %d (FIGNumberOfBFrames %d)\n", v46, 30, v47, *(_DWORD *)(a1 + 1944), v48);
          __uint64_t v49 = sub_DDEFC();
          long long v50 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: FIGAllowFrameReordering ON -> B will be = %d (FIGNumberOfBFrames %d)", v49, 30, v50, *(_DWORD *)(a1 + 1944), *(_DWORD *)(a1 + 25100));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: FIGAllowFrameReordering ON -> B will be = %d (FIGNumberOfBFrames %d)", v46, 30, v47, *(_DWORD *)(a1 + 1944), v48);
        }
      }
    }
    if (*(unsigned char *)(a1 + 18743))
    {
      *(unsigned char *)(a1 + 22132) = 1;
      *(_DWORD *)(a1 + 22136) = 0;
    }
    if (*(_DWORD *)(a1 + 25096) == 2) {
      goto LABEL_197;
    }
    if (sub_D1C38(0x1Eu, 6))
    {
      int v84 = sub_D1C7C(0x1Eu);
      __uint64_t v85 = sub_DDEFC();
      __uint64_t v86 = (const char *)sub_D1CB0(6);
      int v87 = *(_DWORD *)(a1 + 22108);
      if (v84)
      {
        printf("%lld %d AVE %s: FIG: FIGEntropyMode = %d -> change the default %d\n", v85, 30, v86, *(_DWORD *)(a1 + 25096), v87);
        __uint64_t v88 = sub_DDEFC();
        __uint64_t v89 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: FIGEntropyMode = %d -> change the default %d", v88, 30, v89, *(_DWORD *)(a1 + 25096), *(_DWORD *)(a1 + 22108));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: FIGEntropyMode = %d -> change the default %d", v85, 30, v86, *(_DWORD *)(a1 + 25096), v87);
      }
    }
    if (*(_DWORD *)(a1 + 25096)) {
LABEL_197:
    }
      *(_DWORD *)(a1 + 22108) = 1;
    else {
      *(_DWORD *)(a1 + 22108) = 0;
    }
    uint64_t v101 = *(void *)(a1 + 20168);
    if ((v101 & 4) != 0)
    {
      *int16x8_t v12 = 1;
      *(unsigned char *)(a1 + 21524) = 1;
      *(_OWORD *)(a1 + 21528) = xmmword_141750;
      *(void *)(a1 + 21544) = 15;
      *(_DWORD *)(a1 + 21552) = 16;
    }
    if ((v101 & 8) != 0)
    {
      *int16x8_t v12 = 1;
      *(unsigned char *)(a1 + 21524) = 0;
    }
    *(unsigned char *)(a1 + 18752) = 0;
    *(void *)(a1 + 18685) = 0;
    *(unsigned char *)(a1 + 18693) = 0;
    goto LABEL_203;
  }
  if (v63 == 37) {
    goto LABEL_104;
  }
  if (v63 == 38) {
    goto LABEL_109;
  }
  if (v63 != 10000)
  {
LABEL_85:
    unsigned int v41 = *(_DWORD *)(a1 + 25240);
    if (v41 <= 0x19 && ((1 << v41) & 0x33CE600) != 0)
    {
      int v42 = *(unsigned __int8 *)(a1 + 18056);
      *(unsigned char *)(a1 + 17881) = v42 ^ 1;
      if (!v42) {
        *(unsigned char *)(a1 + 253) = 1;
      }
    }
    if (!sub_49398((int32x4_t *)a1) || !sub_D1C38(3u, 4)) {
      goto LABEL_203;
    }
    int v43 = sub_D1C7C(3u);
    __uint64_t v39 = sub_DDEFC();
    __uint64_t v40 = (const char *)sub_D1CB0(4);
    if (v43)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_NewDefaultsBasedOnProfileUsageDefault failed\n", v39, 3, v40, "AVE_SetNewEncoderDefaultBasedOnProfileUsagePropertiesPassed", 7729, "err == noErr");
      __uint64_t v39 = sub_DDEFC();
      __uint64_t v40 = (const char *)sub_D1CB0(4);
    }
    int v289 = 7729;
LABEL_165:
    syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_NewDefaultsBasedOnProfileUsageDefault failed", v39, 3, v40, "AVE_SetNewEncoderDefaultBasedOnProfileUsagePropertiesPassed", v289, "err == noErr");
    goto LABEL_203;
  }
LABEL_79:
  if (sub_49398((int32x4_t *)a1))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_203;
    }
    int v38 = sub_D1C7C(3u);
    __uint64_t v39 = sub_DDEFC();
    __uint64_t v40 = (const char *)sub_D1CB0(4);
    if (v38)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_NewDefaultsBasedOnProfileUsageDefault failed\n", v39, 3, v40, "AVE_SetNewEncoderDefaultBasedOnProfileUsagePropertiesPassed", 7655, "err == noErr");
      __uint64_t v39 = sub_DDEFC();
      __uint64_t v40 = (const char *)sub_D1CB0(4);
    }
    int v289 = 7655;
    goto LABEL_165;
  }
  *(void *)(a1 + 200) &= ~0x10uLL;
  *(unsigned char *)(a1 + 254) = 0;
  *(_DWORD *)(a1 + 260) = 0;
  if (*(int *)(a1 + 1852) <= -13) {
    *(_DWORD *)(a1 + 1852) = 51;
  }
  if (*(int *)(a1 + 1844) <= -13) {
    *(_DWORD *)(a1 + 1844) = 51;
  }
  if (*(int *)(a1 + 26156) <= 0 && *(double *)(a1 + 26160) <= 0.0)
  {
    *(void *)(a1 + 2028) = 120;
    *(void *)(a1 + 2040) = 0xBFF0000000000000;
    *(void *)(a1 + 2048) = 0xBFF0000000000000;
  }
  if (!*(unsigned char *)(a1 + 25104))
  {
    if (*(unsigned char *)(a1 + 25106))
    {
      int v64 = *(_DWORD *)(a1 + 1808);
      if (v64 >= 1)
      {
        uint64_t v65 = 0;
        int v66 = (double *)(a1 + 1784);
        unsigned int v67 = 0x7FFFFFFF;
        do
        {
          if (v67 > (*(v66 - 1) * 8.0 / *v66))
          {
            if (sub_D1C38(0x1Eu, 6))
            {
              int v68 = sub_D1C7C(0x1Eu);
              __uint64_t v69 = sub_DDEFC();
              __uint64_t v70 = (const char *)sub_D1CB0(6);
              double v71 = *(v66 - 1);
              double v72 = *v66;
              if (v68)
              {
                printf("%lld %d AVE %s: FIG: uint64_t i = %d DataRateLimitsSize %f DataRateLimitsSeconds %f\n", v69, 30, v70, v65, *(v66 - 1), v72);
                __uint64_t v69 = sub_DDEFC();
                __uint64_t v70 = (const char *)sub_D1CB0(6);
                double v71 = *(v66 - 1);
                double v72 = *v66;
              }
              syslog(3, "%lld %d AVE %s: FIG: uint64_t i = %d DataRateLimitsSize %f DataRateLimitsSeconds %f", v69, 30, v70, v65, v71, v72);
            }
            unsigned int v67 = (*(v66 - 1) * 8.0 / 1.5 / *v66);
            int v64 = *(_DWORD *)(a1 + 1808);
          }
          ++v65;
          v66 += 2;
        }
        while (v65 < v64);
        goto LABEL_192;
      }
    }
  }
LABEL_203:
  int v102 = *(_DWORD *)(a1 + 1884) >> 4;
  int v103 = *(_DWORD *)(a1 + 1880) >> 4;
  int v104 = *(_DWORD *)(a1 + 228);
  if (sub_D1C38(0xD1u, 7))
  {
    int v105 = sub_D1C7C(0xD1u);
    __uint64_t v106 = sub_DDEFC();
    __uint64_t v107 = (const char *)sub_D1CB0(7);
    int v108 = *(_DWORD *)(a1 + 20408);
    if (v105)
    {
      printf("%lld %d AVE %s: FIG: starting with: SHParams.ucProfile = %d - SHParams.ucLevel = %d\n", v106, 209, v107, *(_DWORD *)(a1 + 20380), v108);
      __uint64_t v109 = sub_DDEFC();
      uint64_t v110 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: starting with: SHParams.ucProfile = %d - SHParams.ucLevel = %d", v109, 209, v110, *(_DWORD *)(a1 + 20380), *(_DWORD *)(a1 + 20408));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: starting with: SHParams.ucProfile = %d - SHParams.ucLevel = %d", v106, 209, v107, *(_DWORD *)(a1 + 20380), v108);
    }
  }
  uint64_t v111 = (v103 * v102);
  if (sub_D1C38(0xD1u, 7))
  {
    int v112 = sub_D1C7C(0xD1u);
    __uint64_t v113 = sub_DDEFC();
    __uint64_t v114 = (const char *)sub_D1CB0(7);
    int v115 = *(_DWORD *)(a1 + 25092);
    if (v112)
    {
      printf("%lld %d AVE %s: FIG: starting with: FIGProfile = %d - FIGLevel = %d\n", v113, 209, v114, *(_DWORD *)(a1 + 25088), v115);
      __uint64_t v116 = sub_DDEFC();
      __uint64_t v117 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: starting with: FIGProfile = %d - FIGLevel = %d", v116, 209, v117, *(_DWORD *)(a1 + 25088), *(_DWORD *)(a1 + 25092));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: starting with: FIGProfile = %d - FIGLevel = %d", v113, 209, v114, *(_DWORD *)(a1 + 25088), v115);
    }
  }
  uint64_t v291 = (v111 * v104);
  if (sub_D1C38(0xD1u, 7))
  {
    int v118 = sub_D1C7C(0xD1u);
    __uint64_t v119 = sub_DDEFC();
    CMTimeEpoch v120 = (const char *)sub_D1CB0(7);
    if (v118)
    {
      printf("%lld %d AVE %s: FIG: starting with: ui32MBf %d, ui32MBs %d, bitrate %d (eRCMode is %d), iExpectedFrameRate %d\n", v119, 209, v120, v111, v291, *(_DWORD *)(a1 + 192), *(_DWORD *)(a1 + 196), *(_DWORD *)(a1 + 228));
      __uint64_t v119 = sub_DDEFC();
      sub_D1CB0(7);
    }
    syslog(3, "%lld %d AVE %s: FIG: starting with: ui32MBf %d, ui32MBs %d, bitrate %d (eRCMode is %d), iExpectedFrameRate %d", v119);
  }
  if (sub_D1C38(0xD1u, 7))
  {
    int v121 = sub_D1C7C(0xD1u);
    __uint64_t v122 = sub_DDEFC();
    __uint64_t v123 = (const char *)sub_D1CB0(7);
    int v124 = *(_DWORD *)(a1 + 1868);
    if (v121)
    {
      printf("%lld %d AVE %s: FIG: starting with: USAGE %d ui32MaxNumLTR %d\n", v122, 209, v123, *(_DWORD *)(a1 + 292), v124);
      __uint64_t v125 = sub_DDEFC();
      __uint64_t v126 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: starting with: USAGE %d ui32MaxNumLTR %d", v125, 209, v126, *(_DWORD *)(a1 + 292), *(_DWORD *)(a1 + 1868));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: starting with: USAGE %d ui32MaxNumLTR %d", v122, 209, v123, *(_DWORD *)(a1 + 292), v124);
    }
  }
  if (v111 > 0x9000) {
    int v127 = 60;
  }
  else {
    int v127 = 51;
  }
  if (v111 < 0x5641) {
    int v127 = 50;
  }
  if (v111 < 0x2201) {
    int v127 = 42;
  }
  if (v111 <= 0x2000) {
    int v127 = 40;
  }
  if (v111 < 0x1401) {
    int v127 = 32;
  }
  if (v111 < 0xE11) {
    int v127 = 31;
  }
  if (v111 < 0x655) {
    int v127 = 22;
  }
  if (v111 < 0x319) {
    int v127 = 21;
  }
  if (v111 < 0x18D) {
    int v127 = 11;
  }
  uint64_t v290 = v111;
  if (v111 >= 0x64) {
    unsigned int v128 = v127;
  }
  else {
    unsigned int v128 = 10;
  }
  if (sub_D1C38(0xD1u, 7))
  {
    int v129 = sub_D1C7C(0xD1u);
    __uint64_t v130 = sub_DDEFC();
    int v131 = (const char *)sub_D1CB0(7);
    if (v129)
    {
      printf("%lld %d AVE %s: FIG: restrict based on number of macroblocks (%d): ui32Level = %d\n", v130, 209, v131, v290, v128);
      __uint64_t v132 = sub_DDEFC();
      int v283 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: restrict based on number of macroblocks (%d): ui32Level = %d", v132, 209, v283, v290, v128);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: restrict based on number of macroblocks (%d): ui32Level = %d", v130, 209, v131, v290, v128);
    }
  }
  unsigned int v133 = *(_DWORD *)(a1 + 1880);
  if (v133 >= 0x21F1) {
    int v134 = 60;
  }
  else {
    int v134 = 51;
  }
  if (v133 < 0x1A45) {
    int v134 = 50;
  }
  if (v133 < 0x107F) {
    int v134 = 42;
  }
  if (v133 <= 0x1000) {
    int v134 = 40;
  }
  if (v133 < 0xCA7) {
    int v134 = 32;
  }
  if (v133 < 0xA9C) {
    int v134 = 31;
  }
  if (v133 < 0x71E) {
    int v134 = 22;
  }
  if (v133 < 0x4FA) {
    int v134 = 21;
  }
  if (v133 < 0x385) {
    int v134 = 11;
  }
  if (v133 >= 0x1C3) {
    unsigned int v135 = v134;
  }
  else {
    unsigned int v135 = 10;
  }
  if (v128 > v135) {
    unsigned int v135 = v128;
  }
  unsigned int v136 = *(_DWORD *)(a1 + 1884);
  if (v136 >= 0x21F1) {
    unsigned int v137 = 60;
  }
  else {
    unsigned int v137 = 51;
  }
  if (v136 < 0x1A45) {
    unsigned int v137 = 50;
  }
  if (v136 < 0x107F) {
    unsigned int v137 = 42;
  }
  if (v136 <= 0x1000) {
    unsigned int v137 = 40;
  }
  if (v136 < 0xCA7) {
    unsigned int v137 = 32;
  }
  if (v136 < 0xA9C) {
    unsigned int v137 = 31;
  }
  if (v136 < 0x71E) {
    unsigned int v137 = 22;
  }
  if (v136 < 0x4FA) {
    unsigned int v137 = 21;
  }
  if (v136 < 0x385) {
    unsigned int v137 = 11;
  }
  if (v136 < 0x1C3) {
    unsigned int v137 = 10;
  }
  if (v135 <= v137) {
    unsigned int v138 = v137;
  }
  else {
    unsigned int v138 = v135;
  }
  if (v291 <= 0x7F8000) {
    int v139 = 61;
  }
  else {
    int v139 = 62;
  }
  if (v291 <= 0x3FC000) {
    int v139 = 60;
  }
  if (v291 < 0x1FA401) {
    int v139 = 52;
  }
  if (v291 <= 0xF0000) {
    int v139 = 51;
  }
  if (v291 <= 0x90000) {
    int v139 = 50;
  }
  if (v291 < 0x7F801) {
    int v139 = 42;
  }
  if (v291 <= 0x3C000) {
    int v139 = 40;
  }
  if (v291 < 0x34BC1) {
    int v139 = 32;
  }
  if (v291 < 0x1A5E1) {
    int v139 = 31;
  }
  if (v291 < 0x9F61) {
    int v139 = 30;
  }
  if (v291 < 0x4F1B) {
    int v139 = 22;
  }
  if (v291 < 0x4D59) {
    int v139 = 21;
  }
  if (v291 < 0x2E69) {
    int v139 = 13;
  }
  if (v291 < 0x1771) {
    int v139 = 12;
  }
  if (v291 < 0xBB9) {
    int v139 = 11;
  }
  if (v291 >= 0x5CE) {
    unsigned int v140 = v139;
  }
  else {
    unsigned int v140 = 10;
  }
  if (sub_D1C38(0xD1u, 7))
  {
    int v141 = sub_D1C7C(0xD1u);
    __uint64_t v142 = sub_DDEFC();
    __uint64_t v143 = (const char *)sub_D1CB0(7);
    if (v141)
    {
      printf("%lld %d AVE %s: FIG: restrict based on number of macroblocks per second (%d) ui32Level = %d, ui32TempLevel = %d will use the MAX\n", v142, 209, v143, v291, v138, v140);
      __uint64_t v144 = sub_DDEFC();
      uint64_t v284 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: restrict based on number of macroblocks per second (%d) ui32Level = %d, ui32TempLevel = %d will use the MAX", v144, 209, v284, v291, v138, v140);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: restrict based on number of macroblocks per second (%d) ui32Level = %d, ui32TempLevel = %d will use the MAX", v142, 209, v143, v291, v138, v140);
    }
  }
  if (v138 <= v140) {
    unsigned int v145 = v140;
  }
  else {
    unsigned int v145 = v138;
  }
  int v146 = *(_DWORD *)(a1 + 196);
  if (v146 < 1)
  {
    uint64_t v147 = v290;
    goto LABEL_441;
  }
  uint64_t v147 = v290;
  if (v146 == 3 || v146 == 8) {
    goto LABEL_441;
  }
  int v148 = *(_DWORD *)(a1 + 20380);
  if (v148 <= 99)
  {
    if (v148 != 66 && v148 != 77) {
      goto LABEL_551;
    }
    int v153 = *(_DWORD *)(a1 + 192);
    if (v153 < 480000001) {
      int v154 = 61;
    }
    else {
      int v154 = 62;
    }
    if (v153 < 240000001) {
      int v154 = 51;
    }
    if (v153 < 135000001) {
      int v154 = 50;
    }
    if (v153 < 50000001) {
      int v154 = 41;
    }
    if (v153 < 20000001) {
      int v154 = 32;
    }
    if (v153 < 14000001) {
      int v154 = 31;
    }
    if (v153 < 10000001) {
      int v154 = 30;
    }
    if (v153 < 4000001) {
      int v154 = 21;
    }
    if (v153 < 2000001) {
      int v154 = 20;
    }
    if (v153 < 768001) {
      int v154 = 13;
    }
    if (v153 < 384001) {
      int v154 = 12;
    }
    if (v153 < 192001) {
      int v154 = 11;
    }
    if (v153 < 128001) {
      int v154 = 1;
    }
    int v155 = 64001;
  }
  else
  {
    if (v148 != 100)
    {
      if (v148 == 244 || v148 == 122)
      {
        int v149 = *(_DWORD *)(a1 + 192);
        if (v149 < 1920000001) {
          int v150 = 61;
        }
        else {
          int v150 = 62;
        }
        if (v149 < 960000001) {
          int v150 = 51;
        }
        if (v149 < 540000001) {
          int v150 = 50;
        }
        if (v149 < 200000001) {
          int v150 = 41;
        }
        if (v149 < 80000001) {
          int v150 = 32;
        }
        if (v149 < 56000001) {
          int v150 = 31;
        }
        if (v149 < 40000001) {
          int v150 = 30;
        }
        if (v149 < 16000001) {
          int v150 = 21;
        }
        if (v149 < 8000001) {
          int v150 = 20;
        }
        if (v149 <= 3072000) {
          int v150 = 13;
        }
        if (v149 >= 1536001) {
          int v151 = v150;
        }
        else {
          int v151 = 12;
        }
        if (v149 < 768001) {
          int v151 = 11;
        }
        if (v149 <= 512000) {
          int v151 = 1;
        }
        if (v149 >= 256001) {
          unsigned int v152 = v151;
        }
        else {
          unsigned int v152 = 10;
        }
        goto LABEL_435;
      }
LABEL_551:
      if (sub_D1C38(0xD1u, 4))
      {
        int v214 = sub_D1C7C(0xD1u);
        __uint64_t v215 = sub_DDEFC();
        uint64_t v216 = (const char *)sub_D1CB0(4);
        if (v214)
        {
          printf("%lld %d AVE %s: FIG: unsupported profile (%d)\n", v215, 209, v216, *(_DWORD *)(v13 + 2508));
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: FIG: unsupported profile (%d)");
      }
      goto LABEL_546;
    }
    int v153 = *(_DWORD *)(a1 + 192);
    if (v153 < 600000001) {
      int v154 = 61;
    }
    else {
      int v154 = 62;
    }
    if (v153 < 300000001) {
      int v154 = 51;
    }
    if (v153 < 168750001) {
      int v154 = 50;
    }
    if (v153 < 62500001) {
      int v154 = 41;
    }
    if (v153 < 25000001) {
      int v154 = 32;
    }
    if (v153 < 17500001) {
      int v154 = 31;
    }
    if (v153 < 12500001) {
      int v154 = 30;
    }
    if (v153 < 5000001) {
      int v154 = 21;
    }
    if (v153 < 2500001) {
      int v154 = 20;
    }
    if (v153 < 960001) {
      int v154 = 13;
    }
    if (v153 < 480001) {
      int v154 = 12;
    }
    if (v153 < 240001) {
      int v154 = 11;
    }
    if (v153 < 160001) {
      int v154 = 1;
    }
    int v155 = 80001;
  }
  if (v153 >= v155) {
    unsigned int v152 = v154;
  }
  else {
    unsigned int v152 = 10;
  }
LABEL_435:
  if (sub_D1C38(0xD1u, 7))
  {
    int v156 = sub_D1C7C(0xD1u);
    __uint64_t v157 = sub_DDEFC();
    int v158 = (const char *)sub_D1CB0(7);
    int v159 = *(_DWORD *)(a1 + 192);
    if (v156)
    {
      printf("%lld %d AVE %s: FIG: restrict based on bitrate (%d) ui32Level = %d, ui32TempLevel = %d will use the MAX\n", v157, 209, v158, v159, v145, v152);
      __uint64_t v160 = sub_DDEFC();
      v285 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: restrict based on bitrate (%d) ui32Level = %d, ui32TempLevel = %d will use the MAX", v160, 209, v285, *(_DWORD *)(a1 + 192), v145, v152);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: restrict based on bitrate (%d) ui32Level = %d, ui32TempLevel = %d will use the MAX", v157, 209, v158, v159, v145, v152);
    }
  }
  if (v145 <= v152) {
    unsigned int v145 = v152;
  }
LABEL_441:
  unsigned int v161 = *(_DWORD *)(a1 + 292);
  if ((v161 > 0x26 || ((1 << v161) & 0x6000100000) == 0) && v161 != 10000) {
    goto LABEL_511;
  }
  unsigned int v162 = (*(_DWORD *)(a1 + 1884) >> 4) * (*(_DWORD *)(a1 + 1880) >> 4);
  unsigned int v163 = 16;
  if (v162 <= 0x2D00) {
    unsigned int v164 = 16;
  }
  else {
    unsigned int v164 = 0x2D000 / v162;
  }
  unsigned int v165 = *(_DWORD *)(a1 + 1868) + 1;
  if (v164 >= v165) {
    int v166 = 51;
  }
  else {
    int v166 = 52;
  }
  if (v164 < v165) {
    unsigned int v164 = 0;
  }
  if (v162 >= 0x1AF5)
  {
    if (0x1AF40 / v162 >= v165)
    {
      int v166 = 50;
      unsigned int v164 = 0x1AF40 / v162;
    }
LABEL_458:
    unsigned int v163 = 0x8800 / v162;
    goto LABEL_459;
  }
  if (v165 <= 0x10)
  {
    int v166 = 50;
    unsigned int v164 = 16;
  }
  if (v162 >= 0x881) {
    goto LABEL_458;
  }
LABEL_459:
  if (v163 >= v165)
  {
    int v166 = 42;
    unsigned int v164 = v163;
  }
  unsigned int v167 = 0x8000 / v162;
  unsigned int v168 = 16;
  if (v162 <= 0x800) {
    unsigned int v167 = 16;
  }
  if (v167 >= v165)
  {
    int v166 = 40;
    unsigned int v164 = v167;
  }
  if (v162 >= 0x501)
  {
    if (0x5000 / v162 >= v165)
    {
      int v166 = 32;
      unsigned int v164 = 0x5000 / v162;
    }
LABEL_471:
    unsigned int v168 = 0x4650 / v162;
    goto LABEL_472;
  }
  if (v165 <= 0x10)
  {
    int v166 = 32;
    unsigned int v164 = 16;
  }
  if (v162 >= 0x466) {
    goto LABEL_471;
  }
LABEL_472:
  if (v168 >= v165)
  {
    int v166 = 31;
    unsigned int v164 = v168;
  }
  unsigned int v169 = 0x1FA4 / v162;
  if (v162 <= 0x1FA) {
    unsigned int v169 = 16;
  }
  if (v169 >= v165)
  {
    int v166 = 22;
    unsigned int v164 = v169;
  }
  unsigned int v170 = 16;
  if (v162 >= 0x12A) {
    unsigned int v170 = 0x1290 / v162;
  }
  if (v170 >= v165)
  {
    int v166 = 21;
    unsigned int v164 = v170;
  }
  unsigned int v171 = 0x948 / v162;
  if (v162 <= 0x94) {
    unsigned int v171 = 16;
  }
  if (v171 >= v165) {
    int v172 = 12;
  }
  else {
    int v172 = v166;
  }
  if (v171 >= v165) {
    unsigned int v173 = v171;
  }
  else {
    unsigned int v173 = v164;
  }
  if (v162 < 0x39)
  {
    if (v165 <= 0x10) {
      int v172 = 11;
    }
    unsigned int v174 = 16;
    if (v165 <= 0x10) {
      unsigned int v173 = 16;
    }
    if (v162 < 0x19) {
      goto LABEL_499;
    }
  }
  else if (0x384 / v162 >= v165)
  {
    int v172 = 11;
    unsigned int v173 = 0x384 / v162;
  }
  unsigned int v174 = 0x18C / v162;
LABEL_499:
  if (v174 >= v165) {
    unsigned int v175 = 10;
  }
  else {
    unsigned int v175 = v172;
  }
  if (v174 >= v165) {
    unsigned int v176 = v174;
  }
  else {
    unsigned int v176 = v173;
  }
  if (sub_D1C38(0xD1u, 7))
  {
    int v177 = sub_D1C7C(0xD1u);
    __uint64_t v178 = sub_DDEFC();
    int v179 = (const char *)sub_D1CB0(7);
    if (v177)
    {
      printf("%lld %d AVE %s: FIG: restrict based on bitrate MaxDpbSizeForThisProfileAndLevel (%d) ui32Level = %d, ui32TempLevel = %d will use the MAX\n", v178, 209, v179, v176, v145, v175);
      __uint64_t v180 = sub_DDEFC();
      uint64_t v286 = (const char *)sub_D1CB0(7);
      uint64_t v147 = v290;
      syslog(3, "%lld %d AVE %s: FIG: restrict based on bitrate MaxDpbSizeForThisProfileAndLevel (%d) ui32Level = %d, ui32TempLevel = %d will use the MAX", v180, 209, v286, v176, v145, v175);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: restrict based on bitrate MaxDpbSizeForThisProfileAndLevel (%d) ui32Level = %d, ui32TempLevel = %d will use the MAX", v178, 209, v179, v176, v145, v175);
    }
  }
  if (v145 <= v175) {
    unsigned int v145 = v175;
  }
LABEL_511:
  int v181 = *(_DWORD *)(a1 + 1944);
  if (!v181)
  {
    if (!*(_DWORD *)(a1 + 2064))
    {
      int v182 = 1;
      goto LABEL_517;
    }
    goto LABEL_516;
  }
  if (v181 != 3 || !*(unsigned char *)(a1 + 18847))
  {
LABEL_516:
    int v182 = 2;
    goto LABEL_517;
  }
  int v182 = 4;
LABEL_517:
  uint64_t v183 = 0;
  unsigned int v184 = v145;
  do
  {
    unsigned int v185 = dword_142DC4[v183];
    if (v185 >= v145)
    {
      int v186 = sub_BCAC4(*(_DWORD *)(a1 + 1880), *(_DWORD *)(a1 + 1884), *(unsigned int *)(a1 + 25088), dword_142DC4[v183]);
      unsigned int v184 = v185;
      if (v186 >= v182) {
        break;
      }
    }
    ++v183;
  }
  while (v183 != 20);
  if (v145 <= v184) {
    unsigned int v187 = v184;
  }
  else {
    unsigned int v187 = v145;
  }
  unsigned int v188 = *(_DWORD *)(a1 + 20408);
  if (v188 <= v187) {
    unsigned int v188 = v187;
  }
  *(_DWORD *)(a1 + 20408) = v188;
  if (sub_D1C38(0xD1u, 7))
  {
    int v189 = sub_D1C7C(0xD1u);
    __uint64_t v190 = sub_DDEFC();
    int v191 = (const char *)sub_D1CB0(7);
    if (v189)
    {
      printf("%lld %d AVE %s: FIG: end with encoderPrivateStorage->SPSparams.level_idc %d (min %d), ui32MBf %d, ui32MBs %d, bitrate %d (eRCMode is %d), iExpectedFrameRate %d\n", v190, 209, v191, *(_DWORD *)(a1 + 20408), v187, v147, v291, *(_DWORD *)(a1 + 192), *(_DWORD *)(a1 + 196), *(_DWORD *)(a1 + 228));
      __uint64_t v190 = sub_DDEFC();
      sub_D1CB0(7);
    }
    syslog(3, "%lld %d AVE %s: FIG: end with encoderPrivateStorage->SPSparams.level_idc %d (min %d), ui32MBf %d, ui32MBs %d, bitrate %d (eRCMode is %d), iExpectedFrameRate %d", v190, 209);
  }
  int v192 = *(_DWORD *)(a1 + 25092);
  if (v192)
  {
    int v193 = *(_DWORD *)(a1 + 20408);
    if (v192 < v193)
    {
      if (sub_D1C38(0xD1u, 4))
      {
        int v194 = sub_D1C7C(0xD1u);
        __uint64_t v195 = sub_DDEFC();
        __uint64_t v196 = (const char *)sub_D1CB0(4);
        int v197 = *(_DWORD *)(a1 + 20408);
        if (v194)
        {
          printf("%lld %d AVE %s: FIG: H264Level %d incompatible with other settings (min should be %d)\n", v195, 209, v196, *(_DWORD *)(a1 + 25092), v197);
          __uint64_t v198 = sub_DDEFC();
          int v199 = (const char *)sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: FIG: H264Level %d incompatible with other settings (min should be %d)", v198, 209, v199, *(_DWORD *)(a1 + 25092), *(_DWORD *)(a1 + 20408));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: H264Level %d incompatible with other settings (min should be %d)", v195, 209, v196, *(_DWORD *)(a1 + 25092), v197);
        }
      }
      if (sub_D1C38(0xD1u, 4))
      {
        int v206 = sub_D1C7C(0xD1u);
        __uint64_t v207 = sub_DDEFC();
        __uint64_t v208 = (const char *)sub_D1CB0(4);
        if (v206)
        {
          printf("%lld %d AVE %s: FIG: MB per frame = %d, MB per second = %d, FrameRate = %d, BitRate = %d\n", v207, 209, v208, v147, v291, *(_DWORD *)(a1 + 228), *(_DWORD *)(a1 + 192));
          __uint64_t v207 = sub_DDEFC();
          __uint64_t v208 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: FIG: MB per frame = %d, MB per second = %d, FrameRate = %d, BitRate = %d", v207, 209, v208, v147, v291, *(unsigned int *)(a1 + 228), *(unsigned int *)(a1 + 192));
      }
LABEL_546:
      if (sub_D1C38(3u, 4))
      {
        int v209 = sub_D1C7C(3u);
        __uint64_t v210 = sub_DDEFC();
        int v211 = (const char *)sub_D1CB0(4);
        if (v209)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_PrepareH264Level failed\n", v210, 3, v211, "AVE_ManageSessionSettings", 8682, "err == noErr");
          __uint64_t v212 = sub_DDEFC();
          uint64_t v287 = (const char *)sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_PrepareH264Level failed", v212, 3, v287, "AVE_ManageSessionSettings", 8682, "err == noErr");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_PrepareH264Level failed", v210, 3, v211, "AVE_ManageSessionSettings", 8682, "err == noErr");
        }
      }
      return 4294954394;
    }
    if (v193 != v192)
    {
      if (sub_D1C38(0xD1u, 7))
      {
        int v200 = sub_D1C7C(0xD1u);
        __uint64_t v201 = sub_DDEFC();
        __uint64_t v202 = (const char *)sub_D1CB0(7);
        int v203 = *(_DWORD *)(a1 + 20408);
        if (v200)
        {
          printf("%lld %d AVE %s: FIG: H264Level received (%d) is too high... consider lowering it with these settings (min should be %d)\n", v201, 209, v202, *(_DWORD *)(a1 + 25092), v203);
          __uint64_t v204 = sub_DDEFC();
          int v205 = (const char *)sub_D1CB0(7);
          syslog(3, "%lld %d AVE %s: FIG: H264Level received (%d) is too high... consider lowering it with these settings (min should be %d)", v204, 209, v205, *(_DWORD *)(a1 + 25092), *(_DWORD *)(a1 + 20408));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: H264Level received (%d) is too high... consider lowering it with these settings (min should be %d)", v201, 209, v202, *(_DWORD *)(a1 + 25092), v203);
        }
      }
      if (sub_D1C38(0xD1u, 7))
      {
        int v217 = sub_D1C7C(0xD1u);
        __uint64_t v218 = sub_DDEFC();
        unsigned int v219 = (const char *)sub_D1CB0(7);
        if (v217)
        {
          printf("%lld %d AVE %s: FIG: MB per frame = %d (%dx%d), MB per second = %d, ExpectedFrameRate = %d, BitRate = %d\n", v218, 209, v219, v147, *(_DWORD *)(a1 + 1880), *(_DWORD *)(a1 + 1884), v291, *(_DWORD *)(a1 + 228), *(_DWORD *)(a1 + 192));
          __uint64_t v218 = sub_DDEFC();
          sub_D1CB0(7);
        }
        syslog(3, "%lld %d AVE %s: FIG: MB per frame = %d (%dx%d), MB per second = %d, ExpectedFrameRate = %d, BitRate = %d", v218, 209);
      }
      *(_DWORD *)(a1 + 20408) = *(_DWORD *)(a1 + 25092);
    }
  }
  uint64_t v220 = (double *)sub_C7604();
  int v221 = v220;
  int v222 = *((_DWORD *)v220 + 317);
  if ((v222 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 2028) = v222;
  }
  int v223 = *((_DWORD *)v220 + 318);
  if ((v223 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 2032) = v223;
  }
  double v224 = v220[160];
  if (v224 >= 0.0) {
    *(double *)(a1 + 2040) = v224;
  }
  double v225 = v220[161];
  if (v225 >= 0.0) {
    *(double *)(a1 + 2048) = v225;
  }
  uint64_t v226 = *((void *)v220 + 3);
  uint64_t v227 = *((void *)v220 + 4);
  *(void *)(a1 + 1888) = (*(void *)(a1 + 1888) | v226) & ~v227;
  *(void *)(a1 + 1896) = (*(void *)(a1 + 1896) | *((void *)v220 + 5)) & ~*((void *)v220 + 6);
  if (v226)
  {
    *(void *)(a1 + 2028) = 1;
    *(void *)(a1 + 2040) = 0xBFF0000000000000;
    *(void *)(a1 + 2048) = 0xBFF0000000000000;
  }
  if ((v226 & 2) != 0)
  {
    *(void *)(a1 + 2028) = 0x7FFFFFFFLL;
    *(void *)(a1 + 2040) = 0xBFF0000000000000;
    *(void *)(a1 + 2048) = 0xBFF0000000000000;
  }
  if (((v227 | v226) & 4) != 0) {
    *(unsigned char *)(a1 + 18676) = (v227 & 4) == 0;
  }
  if ((v226 & 0x20) != 0)
  {
    if (*(_DWORD *)v220 == 1)
    {
      int v228 = sub_C96A4(*(_DWORD *)(a1 + 25240), *(unsigned int *)(a1 + 25236), *(_DWORD *)(a1 + 1876), *(_DWORD *)(a1 + 18760), *(_DWORD *)(a1 + 26496));
      int v229 = *(_DWORD *)(a1 + 1876);
      if (v228)
      {
        unsigned int v230 = v229 & 0xFFFFFF1F;
LABEL_581:
        *(_DWORD *)(a1 + 1876) = v230;
        uint64_t v226 = *((void *)v221 + 3);
        if ((v226 & 0x1000000) != 0) {
          *(unsigned char *)(a1 + 20210) = 1;
        }
        uint64_t v227 = *((void *)v221 + 4);
        if ((v227 & 0x1000000) != 0) {
          *(unsigned char *)(a1 + 20210) = 0;
        }
        goto LABEL_585;
      }
    }
    else
    {
      int v229 = *(_DWORD *)(a1 + 1876);
    }
    unsigned int v230 = v229 | 0xE0;
    goto LABEL_581;
  }
LABEL_585:
  if ((v227 & 0x20) != 0)
  {
    *(_DWORD *)(a1 + 1876) &= 0xFFFFFF1F;
    if ((v226 & 0x40) == 0)
    {
LABEL_587:
      if ((v227 & 0x40) == 0) {
        goto LABEL_588;
      }
      goto LABEL_596;
    }
  }
  else if ((v226 & 0x40) == 0)
  {
    goto LABEL_587;
  }
  *(unsigned char *)(a1 + 22181) = 1;
  if ((v227 & 0x40) == 0)
  {
LABEL_588:
    if ((v226 & 0x80) == 0) {
      goto LABEL_589;
    }
    goto LABEL_597;
  }
LABEL_596:
  *(unsigned char *)(a1 + 22181) = 0;
  if ((v226 & 0x80) == 0)
  {
LABEL_589:
    if ((v227 & 0x80) == 0) {
      goto LABEL_590;
    }
    goto LABEL_598;
  }
LABEL_597:
  *(unsigned char *)(a1 + 22183) = 1;
  *(_DWORD *)(a1 + 17884) = 2;
  if ((v227 & 0x80) == 0)
  {
LABEL_590:
    if ((v226 & 0x100) == 0) {
      goto LABEL_591;
    }
    goto LABEL_599;
  }
LABEL_598:
  *(unsigned char *)(a1 + 22183) = 0;
  *(_DWORD *)(a1 + 17884) = 0;
  if ((v226 & 0x100) == 0)
  {
LABEL_591:
    if ((v227 & 0x100) == 0) {
      goto LABEL_592;
    }
LABEL_600:
    *(unsigned char *)(a1 + 22544) = 0;
    if ((v226 & 0x200) == 0) {
      goto LABEL_603;
    }
    goto LABEL_601;
  }
LABEL_599:
  *(unsigned char *)(a1 + 22544) = 1;
  if ((v227 & 0x100) != 0) {
    goto LABEL_600;
  }
LABEL_592:
  if ((v226 & 0x200) == 0) {
    goto LABEL_603;
  }
LABEL_601:
  if (*(_DWORD *)(a1 + 292) != 1) {
    *(unsigned char *)(a1 + 20432) = 1;
  }
LABEL_603:
  if ((v227 & 0x200) != 0 && *(_DWORD *)(a1 + 292) != 1) {
    *(unsigned char *)(a1 + 20432) = 0;
  }
  if ((v226 & 0x800) != 0)
  {
    *(unsigned char *)(a1 + 25248) = 1;
    if ((v227 & 0x800) == 0)
    {
LABEL_608:
      if ((v226 & 0x1000) == 0) {
        goto LABEL_609;
      }
      goto LABEL_717;
    }
  }
  else if ((v227 & 0x800) == 0)
  {
    goto LABEL_608;
  }
  *(unsigned char *)(a1 + 25248) = 0;
  if ((v226 & 0x1000) == 0)
  {
LABEL_609:
    if ((v227 & 0x1000) == 0) {
      goto LABEL_610;
    }
    goto LABEL_718;
  }
LABEL_717:
  *(_WORD *)(a1 + 18685) = 257;
  *(_WORD *)(a1 + 18688) = 257;
  if ((v227 & 0x1000) == 0)
  {
LABEL_610:
    if ((v226 & 0x2000000) == 0) {
      goto LABEL_611;
    }
    goto LABEL_719;
  }
LABEL_718:
  *(_WORD *)(a1 + 18685) = 0;
  *(_WORD *)(a1 + 18688) = 0;
  if ((v226 & 0x2000000) == 0)
  {
LABEL_611:
    if ((v227 & 0x2000000) == 0) {
      goto LABEL_612;
    }
    goto LABEL_720;
  }
LABEL_719:
  *(unsigned char *)(a1 + 18694) = 1;
  if ((v227 & 0x2000000) == 0)
  {
LABEL_612:
    if ((v226 & 0x2000) == 0) {
      goto LABEL_613;
    }
    goto LABEL_721;
  }
LABEL_720:
  *(unsigned char *)(a1 + 18694) = 0;
  if ((v226 & 0x2000) == 0)
  {
LABEL_613:
    if ((v227 & 0x2000) == 0) {
      goto LABEL_614;
    }
    goto LABEL_722;
  }
LABEL_721:
  *(unsigned char *)(a1 + 25218) = 1;
  if ((v227 & 0x2000) == 0)
  {
LABEL_614:
    if ((v226 & 0x4000) == 0) {
      goto LABEL_615;
    }
    goto LABEL_723;
  }
LABEL_722:
  *(unsigned char *)(a1 + 25218) = 0;
  if ((v226 & 0x4000) == 0)
  {
LABEL_615:
    if ((v227 & 0x4000) == 0) {
      goto LABEL_616;
    }
    goto LABEL_724;
  }
LABEL_723:
  *(unsigned char *)(a1 + 25219) = 1;
  if ((v227 & 0x4000) == 0)
  {
LABEL_616:
    if ((v226 & 0x20000) == 0) {
      goto LABEL_617;
    }
    goto LABEL_725;
  }
LABEL_724:
  *(unsigned char *)(a1 + 25219) = 0;
  if ((v226 & 0x20000) == 0)
  {
LABEL_617:
    if ((v227 & 0x20000) == 0) {
      goto LABEL_618;
    }
    goto LABEL_726;
  }
LABEL_725:
  *(unsigned char *)(a1 + 18013) = 1;
  if ((v227 & 0x20000) == 0)
  {
LABEL_618:
    if ((v226 & 0x40000) == 0) {
      goto LABEL_619;
    }
    goto LABEL_727;
  }
LABEL_726:
  *(unsigned char *)(a1 + 18013) = 0;
  if ((v226 & 0x40000) == 0)
  {
LABEL_619:
    if ((v227 & 0x40000) == 0) {
      goto LABEL_620;
    }
    goto LABEL_728;
  }
LABEL_727:
  *(unsigned char *)(a1 + 18014) = 1;
  if ((v227 & 0x40000) == 0)
  {
LABEL_620:
    if ((v226 & 0x80000) == 0) {
      goto LABEL_621;
    }
    goto LABEL_729;
  }
LABEL_728:
  *(unsigned char *)(a1 + 18014) = 0;
  if ((v226 & 0x80000) == 0)
  {
LABEL_621:
    if ((v227 & 0x80000) == 0) {
      goto LABEL_622;
    }
    goto LABEL_730;
  }
LABEL_729:
  *(unsigned char *)(a1 + 18934) = 1;
  if ((v227 & 0x80000) == 0)
  {
LABEL_622:
    if ((v226 & 0x100000) == 0) {
      goto LABEL_623;
    }
    goto LABEL_731;
  }
LABEL_730:
  *(unsigned char *)(a1 + 18934) = 0;
  if ((v226 & 0x100000) == 0)
  {
LABEL_623:
    if ((v227 & 0x100000) == 0) {
      goto LABEL_624;
    }
    goto LABEL_732;
  }
LABEL_731:
  *(unsigned char *)(a1 + 18860) = 1;
  if ((v227 & 0x100000) == 0)
  {
LABEL_624:
    if ((v226 & 0x200000) == 0) {
      goto LABEL_625;
    }
    goto LABEL_733;
  }
LABEL_732:
  *(unsigned char *)(a1 + 18860) = 0;
  if ((v226 & 0x200000) == 0)
  {
LABEL_625:
    if ((v227 & 0x200000) == 0) {
      goto LABEL_627;
    }
    goto LABEL_626;
  }
LABEL_733:
  *(unsigned char *)(a1 + 20165) = 1;
  if ((v227 & 0x200000) != 0) {
LABEL_626:
  }
    *(unsigned char *)(a1 + 20165) = 0;
LABEL_627:
  uint64_t v231 = *((void *)v221 + 145);
  uint64_t v232 = *((void *)v221 + 146);
  *(void *)(a1 + 200) = (*(void *)(a1 + 200) | v231) & ~v232;
  if ((v231 & 2) != 0)
  {
    *(unsigned char *)(a1 + 254) = 1;
    if ((v232 & 2) == 0)
    {
LABEL_629:
      if ((v231 & 0x40) == 0) {
        goto LABEL_630;
      }
      goto LABEL_737;
    }
  }
  else if ((v232 & 2) == 0)
  {
    goto LABEL_629;
  }
  *(unsigned char *)(a1 + 254) = 0;
  if ((v231 & 0x40) == 0)
  {
LABEL_630:
    if ((v232 & 0x40) == 0) {
      goto LABEL_631;
    }
    goto LABEL_738;
  }
LABEL_737:
  *(_DWORD *)(a1 + 2064) = 1;
  if ((v232 & 0x40) == 0)
  {
LABEL_631:
    if ((v231 & 0x80000) == 0) {
      goto LABEL_632;
    }
    goto LABEL_739;
  }
LABEL_738:
  *(_DWORD *)(a1 + 2064) = 0;
  if ((v231 & 0x80000) == 0)
  {
LABEL_632:
    if ((v232 & 0x80000) == 0) {
      goto LABEL_633;
    }
    goto LABEL_740;
  }
LABEL_739:
  *(unsigned char *)(a1 + 18857) = 1;
  if ((v232 & 0x80000) == 0)
  {
LABEL_633:
    if ((v231 & 0x800000) == 0) {
      goto LABEL_634;
    }
    goto LABEL_741;
  }
LABEL_740:
  *(unsigned char *)(a1 + 18857) = 0;
  if ((v231 & 0x800000) == 0)
  {
LABEL_634:
    if ((v232 & 0x800000) == 0) {
      goto LABEL_635;
    }
    goto LABEL_742;
  }
LABEL_741:
  *(_WORD *)(a1 + 18388) = 257;
  if ((v232 & 0x800000) == 0)
  {
LABEL_635:
    if ((v231 & 0x1000000) == 0) {
      goto LABEL_636;
    }
    goto LABEL_743;
  }
LABEL_742:
  *(_WORD *)(a1 + 18388) = 0;
  if ((v231 & 0x1000000) == 0)
  {
LABEL_636:
    if ((v232 & 0x1000000) == 0) {
      goto LABEL_638;
    }
    goto LABEL_637;
  }
LABEL_743:
  *(unsigned char *)(a1 + 246) = 1;
  if ((v232 & 0x1000000) != 0) {
LABEL_637:
  }
    *(unsigned char *)(a1 + 246) = 0;
LABEL_638:
  int v233 = *((_DWORD *)v221 + 308);
  int v234 = *((_DWORD *)v221 + 309);
  *(_DWORD *)(a1 + 208) = (*(_DWORD *)(a1 + 208) | v233) & ~v234;
  if (v233)
  {
    *(unsigned char *)(a1 + 244) = 1;
    if ((v234 & 1) == 0)
    {
LABEL_640:
      if ((v233 & 4) == 0) {
        goto LABEL_641;
      }
      goto LABEL_747;
    }
  }
  else if ((v234 & 1) == 0)
  {
    goto LABEL_640;
  }
  *(unsigned char *)(a1 + 244) = 0;
  if ((v233 & 4) == 0)
  {
LABEL_641:
    if ((v234 & 4) == 0) {
      goto LABEL_642;
    }
    goto LABEL_748;
  }
LABEL_747:
  *(unsigned char *)(a1 + 248) = 1;
  if ((v234 & 4) == 0)
  {
LABEL_642:
    if ((v233 & 0x10) == 0) {
      goto LABEL_643;
    }
    goto LABEL_749;
  }
LABEL_748:
  *(unsigned char *)(a1 + 248) = 0;
  if ((v233 & 0x10) == 0)
  {
LABEL_643:
    if ((v234 & 0x10) == 0) {
      goto LABEL_645;
    }
    goto LABEL_644;
  }
LABEL_749:
  *(unsigned char *)(a1 + 250) = 1;
  if ((v234 & 0x10) != 0) {
LABEL_644:
  }
    *(unsigned char *)(a1 + 250) = 0;
LABEL_645:
  *(_DWORD *)(a1 + 2024) = (*(_DWORD *)(a1 + 2024) | *((_DWORD *)v221 + 310)) & ~*((_DWORD *)v221 + 311);
  *(_DWORD *)(a1 + 212) = (*(_DWORD *)(a1 + 212) | *((_DWORD *)v221 + 324)) & ~*((_DWORD *)v221 + 325);
  int v236 = *((_DWORD *)v221 + 14);
  int v235 = *((_DWORD *)v221 + 15);
  *(_DWORD *)(a1 + 1904) = (*(_DWORD *)(a1 + 1904) | v236) & ~v235;
  if (v236)
  {
    *(unsigned char *)(a1 + 253) = 1;
    if ((v235 & 1) == 0)
    {
LABEL_647:
      if ((v236 & 2) == 0) {
        goto LABEL_648;
      }
      goto LABEL_753;
    }
  }
  else if ((v235 & 1) == 0)
  {
    goto LABEL_647;
  }
  *(unsigned char *)(a1 + 253) = 0;
  if ((v236 & 2) == 0)
  {
LABEL_648:
    if ((v235 & 2) == 0) {
      goto LABEL_649;
    }
    goto LABEL_754;
  }
LABEL_753:
  *(unsigned char *)(a1 + 25217) = 1;
  if ((v235 & 2) == 0)
  {
LABEL_649:
    if ((v236 & 8) == 0) {
      goto LABEL_650;
    }
    goto LABEL_755;
  }
LABEL_754:
  *(unsigned char *)(a1 + 25217) = 0;
  if ((v236 & 8) == 0)
  {
LABEL_650:
    if ((v235 & 8) == 0) {
      goto LABEL_651;
    }
    goto LABEL_756;
  }
LABEL_755:
  *(unsigned char *)(a1 + 18861) = 1;
  if ((v235 & 8) == 0)
  {
LABEL_651:
    if ((v236 & 0x10) == 0) {
      goto LABEL_652;
    }
    goto LABEL_757;
  }
LABEL_756:
  *(unsigned char *)(a1 + 18861) = 0;
  if ((v236 & 0x10) == 0)
  {
LABEL_652:
    if ((v235 & 0x10) == 0) {
      goto LABEL_653;
    }
    goto LABEL_758;
  }
LABEL_757:
  *(_DWORD *)(a1 + 18776) = 4;
  *(_WORD *)(a1 + 18780) = 257;
  if ((v235 & 0x10) == 0)
  {
LABEL_653:
    if ((v236 & 0x40) == 0) {
      goto LABEL_654;
    }
LABEL_759:
    *(unsigned char *)(a1 + 17881) = 1;
    if ((v235 & 0x40) == 0) {
      goto LABEL_656;
    }
    goto LABEL_655;
  }
LABEL_758:
  *(_DWORD *)(a1 + 18776) = 2;
  *(_WORD *)(a1 + 18780) = 1;
  if ((v236 & 0x40) != 0) {
    goto LABEL_759;
  }
LABEL_654:
  if ((v235 & 0x40) != 0) {
LABEL_655:
  }
    *(unsigned char *)(a1 + 17881) = 0;
LABEL_656:
  if (((_BYTE)v221[98] & 8) != 0) {
    *(_DWORD *)(a1 + 1920) = 0x8000000;
  }
  int v237 = *((_DWORD *)v221 + 295);
  if (v237 >= 1)
  {
    *(_DWORD *)(a1 + 192) = v237;
    *(_WORD *)(a1 + 25104) = 257;
  }
  int v238 = *((_DWORD *)v221 + 16);
  if ((v238 - 1) <= 0x1F) {
    *(_DWORD *)(a1 + 20176) = v238;
  }
  int v239 = *((_DWORD *)v221 + 337);
  if (sub_13AE0(*(_DWORD *)(a1 + 25244), 1, 0, v239)) {
    *(_WORD *)uint64_t v13 = v239;
  }
  int v240 = *((_DWORD *)v221 + 277);
  if ((v240 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 20436) = v240;
    *(unsigned char *)(a1 + 18845) = 1;
  }
  unsigned int v241 = *((_DWORD *)v221 + 342);
  if (v241 <= 4) {
    *(_DWORD *)(a1 + 18868) = v241;
  }
  int v242 = *((_DWORD *)v221 + 349);
  if (v242 >= 1) {
    *(_DWORD *)(a1 + 20192) = v242;
  }
  int v243 = *((_DWORD *)v221 + 287);
  if (v243 != -13) {
    *(_DWORD *)(a1 + 1848) = v243;
  }
  int v244 = *((_DWORD *)v221 + 288);
  if (v244 != -13) {
    *(_DWORD *)(a1 + 1852) = v244;
  }
  int v245 = *((_DWORD *)v221 + 285);
  if (v245 != -13) {
    *(_DWORD *)(a1 + 1840) = v245;
  }
  int v246 = *((_DWORD *)v221 + 286);
  if (v246 != -13) {
    *(_DWORD *)(a1 + 1844) = v246;
  }
  int v247 = *((_DWORD *)v221 + 282);
  if (v247 != -13) {
    *(_DWORD *)(a1 + 1824) = v247;
  }
  int v248 = *((_DWORD *)v221 + 283);
  if (v248 != -13) {
    *(_DWORD *)(a1 + 1828) = v248;
  }
  int v249 = *((_DWORD *)v221 + 284);
  if (v249 != -13) {
    *(_DWORD *)(a1 + 1832) = v249;
  }
  int v250 = *((_DWORD *)v221 + 350);
  if (v250 >= 1) {
    *(_DWORD *)(a1 + 20196) = v250;
  }
  int v251 = *((_DWORD *)v221 + 316);
  if (v251 >= 1) {
    *(_DWORD *)(a1 + 224) = v251;
  }
  int v252 = *((_DWORD *)v221 + 294);
  if (v252 >= 1) {
    *(_DWORD *)(a1 + 196) = v252;
  }
  int v253 = *((_DWORD *)v221 + 295);
  if (v253 >= 1) {
    *(_DWORD *)(a1 + 192) = v253;
  }
  int v254 = *((_DWORD *)v221 + 302);
  if ((v254 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 232) = v254;
    *(void *)(a1 + 200) |= 0x80000000uLL;
  }
  double v255 = v221[149];
  if (v255 >= 0.0)
  {
    float v256 = v255;
    *(float *)(a1 + 240) = v256;
  }
  int v257 = *((_DWORD *)v221 + 345);
  if (v257 >= 1) {
    *(_DWORD *)(a1 + 220) = v257;
  }
  unsigned int v258 = *((_DWORD *)v221 + 340);
  if (v258 <= 2) {
    *(_DWORD *)(a1 + 22576) = v258;
  }
  int v259 = *((_DWORD *)v221 + 336);
  if (v259 >= 1) {
    *(_DWORD *)(a1 + 18060) = v259;
  }
  int v260 = *((_DWORD *)v221 + 326);
  if ((v260 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 18412) = v260;
  }
  int v261 = *((_DWORD *)v221 + 327);
  if ((v261 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 18408) = v261;
  }
  int v262 = *((_DWORD *)v221 + 328);
  if ((v262 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 18404) = v262;
  }
  int v263 = *((_DWORD *)v221 + 329);
  if ((v263 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 18416) = v263;
  }
  int v264 = *(_DWORD *)(a1 + 20408);
  if (*(_DWORD *)(a1 + 292) != 1 && v264 <= 10) {
    *(_WORD *)uint64_t v13 = 1;
  }
  if (*(unsigned char *)(a1 + 25248)) {
    goto LABEL_714;
  }
  if (v264 >= 31)
  {
    int v265 = 16;
LABEL_763:
    *(_DWORD *)(a1 + 1928) = v265;
    if (*(_DWORD *)(a1 + 20380) == 66)
    {
      if (v264 >= 31) {
        int v266 = 0;
      }
      else {
        int v266 = 576;
      }
      goto LABEL_771;
    }
    goto LABEL_770;
  }
  if (v264 != 30)
  {
LABEL_714:
    int v265 = 64;
    goto LABEL_763;
  }
  *(_DWORD *)(a1 + 1928) = 32;
  if (*(_DWORD *)(a1 + 20380) != 66)
  {
LABEL_770:
    int v266 = 0;
    goto LABEL_771;
  }
  int v266 = 576;
LABEL_771:
  *(_DWORD *)(a1 + 1932) = v266;
  if (sub_D1C38(0x16u, 7))
  {
    int v267 = sub_D1C7C(0x16u);
    __uint64_t v268 = sub_DDEFC();
    __uint64_t v269 = (const char *)sub_D1CB0(7);
    int v270 = *(_DWORD *)(a1 + 1928);
    int v271 = *(_DWORD *)(a1 + 1932);
    if (v267)
    {
      printf("%lld %d AVE %s: FIG: MaxMvsPer2Mb = %d DebugDisableMaxMvsPer2Mb = %d MaxSubMbRectSize = %d\n", v268, 22, v269, v270, *(unsigned __int8 *)(a1 + 25248), v271);
      __uint64_t v272 = sub_DDEFC();
      __uint64_t v273 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: MaxMvsPer2Mb = %d DebugDisableMaxMvsPer2Mb = %d MaxSubMbRectSize = %d", v272, 22, v273, *(_DWORD *)(a1 + 1928), *(unsigned __int8 *)(a1 + 25248), *(_DWORD *)(a1 + 1932));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: MaxMvsPer2Mb = %d DebugDisableMaxMvsPer2Mb = %d MaxSubMbRectSize = %d", v268, 22, v269, v270, *(unsigned __int8 *)(a1 + 25248), v271);
    }
  }
  uint64_t v213 = sub_40010(a1);
  if (v213 && sub_D1C38(3u, 4))
  {
    int v274 = sub_D1C7C(3u);
    __uint64_t v275 = sub_DDEFC();
    __uint64_t v276 = (const char *)sub_D1CB0(4);
    if (v274)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_ValidateEncoderParameters failed\n", v275, 3, v276, "AVE_ManageSessionSettings", 8697, "err == noErr");
      __uint64_t v277 = sub_DDEFC();
      v288 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ValidateEncoderParameters failed", v277, 3, v288, "AVE_ManageSessionSettings", 8697, "err == noErr");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ValidateEncoderParameters failed", v275, 3, v276, "AVE_ManageSessionSettings", 8697, "err == noErr");
    }
  }
  return v213;
}

void sub_461C4(uint64_t a1, const __CFDictionary *a2, int *a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v8 = a1 + 25105;
    uint64_t v9 = a1 + 18012;
    *((unsigned char *)a3 + 136) = *(unsigned char *)(a1 + 25105);
    *(unsigned char *)(a1 + 25105) = 0;
    a3[35] = *(_DWORD *)(a1 + 192);
    *((unsigned char *)a3 + 128) = *(unsigned char *)(a1 + 25107);
    *(unsigned char *)(a1 + 25107) = 0;
    a3[33] = *(_DWORD *)(a1 + 228);
    long long v10 = *(_OWORD *)(a1 + 1776);
    long long v11 = *(_OWORD *)(a1 + 1792);
    *((void *)a3 + 23) = *(void *)(a1 + 1808);
    *(_OWORD *)(a3 + 42) = v11;
    *(_OWORD *)(a3 + 38) = v10;
    *(unsigned char *)(a1 + 25106) = 0;
    *((unsigned char *)a3 + 1536) = *(unsigned char *)(a1 + 18861);
    *((unsigned char *)a3 + 1537) = *(unsigned char *)(a1 + 18012);
    int v12 = *(_DWORD *)(a1 + 25320);
    if (!v12) {
      int v12 = *(_DWORD *)(a1 + 1880);
    }
    a3[181] = v12;
    int v13 = *(_DWORD *)(a1 + 25324);
    if (!v13) {
      int v13 = *(_DWORD *)(a1 + 1884);
    }
    a3[182] = v13;
    a3[386] = *(_DWORD *)(a1 + 18808);
    *a3 = 0;
    a3[381] = *(_DWORD *)(a1 + 18776);
    if ((*(unsigned char *)(a1 + 1876) & 0xE0) == 0)
    {
      *((unsigned char *)a3 + 1538) = 0;
      goto LABEL_28;
    }
    if (*(unsigned char *)(a1 + 20210))
    {
      int v14 = *((_DWORD *)sub_C7604() + 332);
      if (v14 < 1)
      {
        char v20 = *(_DWORD *)(*(void *)(a4 + 144) + 72) < 255;
      }
      else
      {
        unsigned int v15 = *(_DWORD *)(v8 + 7);
        if (v15 <= 3)
        {
          char v16 = 1;
LABEL_21:
          *((unsigned char *)a3 + 1538) = v16;
          *(unsigned char *)(v8 + 1395) = v16;
          goto LABEL_22;
        }
        int v21 = v15 % v14;
        char v20 = *(unsigned char *)(v8 + 1395);
        if (!v21)
        {
          char v16 = v20 ^ 1;
          goto LABEL_21;
        }
      }
    }
    else
    {
      char v20 = 1;
    }
    *((unsigned char *)a3 + 1538) = v20;
LABEL_22:
    if (*(_DWORD *)(v8 + 7) <= 5u) {
      *((unsigned char *)a3 + 1538) = 1;
    }
    if (sub_D1C38(0x1Cu, 8))
    {
      int v22 = sub_D1C7C(0x1Cu);
      __uint64_t v23 = sub_DDEFC();
      __uint64_t v24 = (const char *)sub_D1CB0(8);
      int v25 = *(_DWORD *)(v8 + 7);
      int v26 = *((unsigned __int8 *)a3 + 1538);
      if (v22)
      {
        printf("%lld %d AVE %s: MCTF F %d iBand0Strength %d NoiseFrame %d\n", v23, 28, v24, v25, *(_DWORD *)(*(void *)(a4 + 144) + 72), v26);
        __uint64_t v27 = sub_DDEFC();
        unsigned int v28 = (const char *)sub_D1CB0(8);
        syslog(3, "%lld %d AVE %s: MCTF F %d iBand0Strength %d NoiseFrame %d", v27, 28, v28, *(_DWORD *)(v8 + 7), *(_DWORD *)(*(void *)(a4 + 144) + 72), *((unsigned __int8 *)a3 + 1538));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: MCTF F %d iBand0Strength %d NoiseFrame %d", v23, 28, v24, v25, *(_DWORD *)(*(void *)(a4 + 144) + 72), v26);
      }
    }
LABEL_28:
    a3[1] = 0;
    *(void *)(a4 + 72) = 0;
    *(void *)&long long v29 = -1;
    *((void *)&v29 + 1) = -1;
    *(_OWORD *)(a3 + 58) = v29;
    *((_WORD *)a3 + 100) = 0;
    *((unsigned char *)a3 + 1576) = 0;
    *((void *)a3 + 24) = 0;
    *((unsigned char *)a3 + 212) = 0;
    a3[54] = -1;
    *((void *)a3 + 28) = 0;
    *(void *)(a3 + 51) = 0xFFFFFFF3FFFFFFFFLL;
    *(_OWORD *)(a3 + 62) = v29;
    *(void *)(a3 + 173) = 0;
    *((unsigned char *)a3 + 732) = 0;
    a3[387] = -1;
    a3[176] = -1;
    if (!a2) {
      return;
    }
    uint64_t v291 = a3 + 173;
    if (sub_D1C38(0x1Du, 6))
    {
      int v30 = sub_D1C7C(0x1Du);
      __uint64_t v31 = sub_DDEFC();
      int v32 = (const char *)sub_D1CB0(6);
      int v33 = *(_DWORD *)(v8 + 7);
      if (v30)
      {
        printf("%lld %d AVE %s: FIG: frameProperties is NOT NULL -> start parsing - Buffer F %d\n", v31, 29, v32, v33);
        __uint64_t v34 = sub_DDEFC();
        int v264 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: frameProperties is NOT NULL -> start parsing - Buffer F %d", v34, 29, v264, *(_DWORD *)(v8 + 7));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: frameProperties is NOT NULL -> start parsing - Buffer F %d", v31, 29, v32, v33);
      }
    }
    uint64_t v289 = v9;
    CFDataRef Value = CFDictionaryGetValue(a2, kVTEncodeFrameOptionKey_ForceKeyFrame);
    if (Value && CFEqual(Value, kCFBooleanTrue))
    {
      int v36 = (*(_DWORD *)(a1 + 2024) & 1) != 0 ? 1 : 2;
      *a3 = v36;
      *((void *)a3 + 2) |= 0x100uLL;
      if (sub_D1C38(0x1Du, 6))
      {
        int v37 = sub_D1C7C(0x1Du);
        __uint64_t v38 = sub_DDEFC();
        __uint64_t v39 = (const char *)sub_D1CB0(6);
        uint64_t v40 = *((void *)a3 + 2);
        if (v37)
        {
          printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceKeyFrame = %d %llx\n", v38, 29, v39, *a3, v40);
          __uint64_t v41 = sub_DDEFC();
          int v42 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceKeyFrame = %d %llx", v41, 29, v42, *a3, *((void *)a3 + 2));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceKeyFrame = %d %llx", v38, 29, v39, *a3, v40);
        }
      }
    }
    int v43 = CFDictionaryGetValue(a2, kVTEncodeFrameOptionKey_FirstMbInRecvSlices);
    if (v43)
    {
      int v44 = v43;
      CFTypeID TypeID = CFDataGetTypeID();
      if (TypeID == CFGetTypeID(v44))
      {
        *((unsigned char *)a3 + 5) = 1;
        if (sub_D1C38(0x1Du, 6))
        {
          int v46 = sub_D1C7C(0x1Du);
          __uint64_t v47 = sub_DDEFC();
          int v48 = (const char *)sub_D1CB0(6);
          if (v46)
          {
            printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FirstMbInRecvSlices\n", v47, 29, v48);
            __uint64_t v49 = sub_DDEFC();
            int v265 = (const char *)sub_D1CB0(6);
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FirstMbInRecvSlices", v49, 29, v265);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FirstMbInRecvSlices", v47, 29, v48);
          }
        }
      }
    }
    long long v50 = CFDictionaryGetValue(a2, kVTEncodeFrameOptionKey_ForceRefresh);
    if (v50)
    {
      if (CFEqual(v50, kCFBooleanTrue))
      {
        *((unsigned char *)a3 + 5) = 1;
        if (sub_D1C38(0x1Du, 6))
        {
          int v51 = sub_D1C7C(0x1Du);
          __uint64_t v52 = sub_DDEFC();
          __uint64_t v53 = (const char *)sub_D1CB0(6);
          int v54 = *((unsigned __int8 *)a3 + 5);
          if (v51)
          {
            printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceRefresh = %d\n", v52, 29, v53, v54);
            __uint64_t v55 = sub_DDEFC();
            int v266 = (const char *)sub_D1CB0(6);
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceRefresh = %d", v55, 29, v266, *((unsigned __int8 *)a3 + 5));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceRefresh = %d", v52, 29, v53, v54);
          }
        }
      }
    }
    CFNumberRef v56 = (const __CFNumber *)CFDictionaryGetValue(a2, kVTEncodeFrameOptionKey_NumBitsInTransmissionBuffer);
    if (v56)
    {
      CFNumberRef v57 = v56;
      CFTypeID v58 = CFNumberGetTypeID();
      if (v58 == CFGetTypeID(v57))
      {
        BOOL v59 = a3 + 7;
        CFNumberGetValue(v57, kCFNumberSInt32Type, a3 + 7);
        if (sub_D1C38(0x1Du, 6))
        {
          int v60 = sub_D1C7C(0x1Du);
          __uint64_t v61 = sub_DDEFC();
          int v62 = (const char *)sub_D1CB0(6);
          int v63 = *v59;
          if (v60)
          {
            printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_NumBitsInTransmissionBuffer = %d\n", v61, 29, v62, v63);
            __uint64_t v64 = sub_DDEFC();
            int v267 = (const char *)sub_D1CB0(6);
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_NumBitsInTransmissionBuffer = %d", v64, 29, v267, *v59);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_NumBitsInTransmissionBuffer = %d", v61, 29, v62, v63);
          }
        }
      }
    }
    CFNumberRef v65 = (const __CFNumber *)CFDictionaryGetValue(a2, kVTEncodeFrameOptionKey_FECNumBitsAdded);
    if (v65)
    {
      CFNumberRef v66 = v65;
      CFTypeID v67 = CFNumberGetTypeID();
      if (v67 == CFGetTypeID(v66))
      {
        int v68 = a3 + 8;
        CFNumberGetValue(v66, kCFNumberSInt32Type, a3 + 8);
        if (sub_D1C38(0x1Du, 6))
        {
          int v69 = sub_D1C7C(0x1Du);
          __uint64_t v70 = sub_DDEFC();
          double v71 = (const char *)sub_D1CB0(6);
          int v72 = *v68;
          if (v69)
          {
            printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FECNumBitsAdded = %d\n", v70, 29, v71, v72);
            __uint64_t v73 = sub_DDEFC();
            __uint64_t v268 = (const char *)sub_D1CB0(6);
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FECNumBitsAdded = %d", v73, 29, v268, *v68);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FECNumBitsAdded = %d", v70, 29, v71, v72);
          }
        }
      }
    }
    CFNumberRef v74 = (const __CFNumber *)CFDictionaryGetValue(a2, kVTEncodeFrameOptionKey_PacketHeaderBitsAdded);
    if (v74)
    {
      CFNumberRef v75 = v74;
      CFTypeID v76 = CFNumberGetTypeID();
      if (v76 == CFGetTypeID(v75))
      {
        uint64_t v77 = a3 + 9;
        CFNumberGetValue(v75, kCFNumberSInt32Type, a3 + 9);
        if (sub_D1C38(0x1Du, 6))
        {
          int v78 = sub_D1C7C(0x1Du);
          __uint64_t v79 = sub_DDEFC();
          __uint64_t v80 = (const char *)sub_D1CB0(6);
          int v81 = *v77;
          if (v78)
          {
            printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_PacketHeaderBitsAdded = %d\n", v79, 29, v80, v81);
            __uint64_t v82 = sub_DDEFC();
            __uint64_t v269 = (const char *)sub_D1CB0(6);
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_PacketHeaderBitsAdded = %d", v82, 29, v269, *v77);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_PacketHeaderBitsAdded = %d", v79, 29, v80, v81);
          }
        }
      }
    }
    uint64_t v290 = v8;
    CFDictionaryRef theDict = a2;
    double v83 = CFDictionaryGetValue(a2, kVTEncodeFrameOptionKey_AcknowledgedTokens);
    if (!v83) {
      goto LABEL_87;
    }
    int v84 = v83;
    CFTypeID v85 = CFArrayGetTypeID();
    if (v85 != CFGetTypeID(v84)) {
      goto LABEL_87;
    }
    a3[12] = CFArrayGetCount((CFArrayRef)v84);
    if (sub_D1C38(0x1Du, 6))
    {
      int v86 = sub_D1C7C(0x1Du);
      __uint64_t v87 = sub_DDEFC();
      __uint64_t v88 = (const char *)sub_D1CB0(6);
      int v89 = a3[12];
      if (v86)
      {
        printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_AcknowledgedTokens, count = %d\n", v87, 29, v88, v89);
        __uint64_t v90 = sub_DDEFC();
        int v270 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_AcknowledgedTokens, count = %d", v90, 29, v270, a3[12]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_AcknowledgedTokens, count = %d", v87, 29, v88, v89);
      }
    }
    unsigned int v91 = a3[12];
    if (v91 < 0x11)
    {
      if (!v91)
      {
LABEL_87:
        CFDictionaryRef v101 = theDict;
        CFNumberRef v102 = (const __CFNumber *)CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_RoundTripDelay);
        if (v102)
        {
          int v103 = a3 + 29;
          CFNumberGetValue(v102, kCFNumberSInt32Type, a3 + 29);
          if (sub_D1C38(0x1Du, 6))
          {
            int v104 = sub_D1C7C(0x1Du);
            __uint64_t v105 = sub_DDEFC();
            __uint64_t v106 = (const char *)sub_D1CB0(6);
            int v107 = *v103;
            if (v104)
            {
              printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_RoundTripDelay = %d\n", v105, 29, v106, v107);
              __uint64_t v108 = sub_DDEFC();
              int v271 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_RoundTripDelay = %d", v108, 29, v271, *v103);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_RoundTripDelay = %d", v105, 29, v106, v107);
            }
          }
        }
        CFNumberRef v109 = (const __CFNumber *)CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_PadFrameToMinimumSize);
        if (v109)
        {
          uint64_t v110 = a3 + 31;
          CFNumberGetValue(v109, kCFNumberSInt32Type, a3 + 31);
          if (sub_D1C38(0x1Du, 6))
          {
            int v111 = sub_D1C7C(0x1Du);
            __uint64_t v112 = sub_DDEFC();
            __uint64_t v113 = (const char *)sub_D1CB0(6);
            int v114 = *v110;
            if (v111)
            {
              printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_PadFrameToMinimumSize = %d\n", v112, 29, v113, v114);
              __uint64_t v115 = sub_DDEFC();
              __uint64_t v272 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_PadFrameToMinimumSize = %d", v115, 29, v272, *v110);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_PadFrameToMinimumSize = %d", v112, 29, v113, v114);
            }
          }
        }
        __uint64_t v116 = CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_RepeatedFrame);
        uint64_t v117 = a1;
        if (v116)
        {
          if (CFEqual(v116, kCFBooleanTrue))
          {
            *((unsigned char *)a3 + 6) = 1;
            if (sub_D1C38(0x1Du, 6))
            {
              int v118 = sub_D1C7C(0x1Du);
              __uint64_t v119 = sub_DDEFC();
              CMTimeEpoch v120 = (const char *)sub_D1CB0(6);
              int v121 = *((unsigned __int8 *)a3 + 6);
              if (v118)
              {
                printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_RepeatedFrame = %d\n", v119, 29, v120, v121);
                __uint64_t v122 = sub_DDEFC();
                __uint64_t v273 = (const char *)sub_D1CB0(6);
                syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_RepeatedFrame = %d", v122, 29, v273, *((unsigned __int8 *)a3 + 6));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_RepeatedFrame = %d", v119, 29, v120, v121);
              }
            }
          }
        }
        CFDataRef v123 = (const __CFData *)CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_UserQpMap);
        if (v123) {
          *((void *)a3 + 24) = CFDataGetBytePtr(v123);
        }
        CFNumberRef v124 = (const __CFNumber *)CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_VRAUsedDimension);
        if (v124)
        {
          LODWORD(valuePtr) = 0;
          CFNumberGetValue(v124, kCFNumberSInt32Type, &valuePtr);
          int v125 = (unsigned __int16)valuePtr;
          a3[10] = WORD1(valuePtr);
          a3[11] = v125;
          if (sub_D1C38(0x1Du, 6))
          {
            int v126 = sub_D1C7C(0x1Du);
            __uint64_t v127 = sub_DDEFC();
            unsigned int v128 = (const char *)sub_D1CB0(6);
            int v129 = a3[11];
            if (v126)
            {
              printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_VRAUsedDimension = %d x %d\n", v127, 29, v128, a3[10], v129);
              __uint64_t v130 = sub_DDEFC();
              int v131 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_VRAUsedDimension = %d x %d", v130, 29, v131, a3[10], a3[11]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_VRAUsedDimension = %d x %d", v127, 29, v128, a3[10], v129);
            }
          }
        }
        __uint64_t v132 = CFDictionaryGetValue(theDict, @"AttachDPB");
        if (v132 && CFEqual(v132, kCFBooleanTrue))
        {
          if (sub_D1C38(0x1Du, 6))
          {
            int v133 = sub_D1C7C(0x1Du);
            __uint64_t v134 = sub_DDEFC();
            unsigned int v135 = (const char *)sub_D1CB0(6);
            int v136 = *(_DWORD *)(v290 + 7);
            if (v133)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncodeFrameOptionKey_AttachDPB found (%d)\n", v134, 29, v135, v136);
              __uint64_t v137 = sub_DDEFC();
              int v274 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncodeFrameOptionKey_AttachDPB found (%d)", v137, 29, v274, *(_DWORD *)(v290 + 7));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncodeFrameOptionKey_AttachDPB found (%d)", v134, 29, v135, v136);
            }
          }
          *((unsigned char *)a3 + 200) = 1;
        }
        unsigned int v138 = CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_SetDPB);
        if (v138)
        {
          if (*(_DWORD *)(v290 + 7))
          {
            int v139 = v138;
            if (sub_D1C38(0x1Eu, 6))
            {
              int v140 = sub_D1C7C(0x1Eu);
              __uint64_t v141 = sub_DDEFC();
              __uint64_t v142 = (const char *)sub_D1CB0(6);
              int v143 = *(_DWORD *)(v290 + 7);
              if (v140)
              {
                printf("%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SetDPB found (%d)\n", v141, 30, v142, v143);
                __uint64_t v144 = sub_DDEFC();
                __uint64_t v275 = (const char *)sub_D1CB0(6);
                syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SetDPB found (%d)", v144, 30, v275, *(_DWORD *)(v290 + 7));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SetDPB found (%d)", v141, 30, v142, v143);
              }
            }
            *((unsigned char *)a3 + 201) = 1;
            *(void *)(a4 + 72) = v139;
          }
          else
          {
            if (sub_D1C38(0x1Du, 5))
            {
              int v145 = sub_D1C7C(0x1Du);
              __uint64_t v146 = sub_DDEFC();
              uint64_t v147 = (const char *)sub_D1CB0(5);
              if (v145)
              {
                printf("%lld %d AVE %s: FIG: frameNumber = 0 and updateDPB = true\n", v146, 29, v147);
                __uint64_t v148 = sub_DDEFC();
                __uint64_t v276 = (const char *)sub_D1CB0(5);
                syslog(3, "%lld %d AVE %s: FIG: frameNumber = 0 and updateDPB = true", v148, 29, v276);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: FIG: frameNumber = 0 and updateDPB = true", v146, 29, v147);
              }
            }
            if (sub_D1C38(0x1Du, 5))
            {
              int v149 = sub_D1C7C(0x1Du);
              __uint64_t v150 = sub_DDEFC();
              int v151 = (const char *)sub_D1CB0(5);
              if (v149)
              {
                printf("%lld %d AVE %s: FIG: you need to encode at least one picture to prime AVE before using this feature. -> will disregard updateDPB flag\n", v150, 29, v151);
                __uint64_t v152 = sub_DDEFC();
                __uint64_t v277 = (const char *)sub_D1CB0(5);
                syslog(3, "%lld %d AVE %s: FIG: you need to encode at least one picture to prime AVE before using this feature. -> will disregard updateDPB flag", v152, 29, v277);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: FIG: you need to encode at least one picture to prime AVE before using this feature. -> will disregard updateDPB flag", v150, 29, v151);
              }
            }
          }
        }
        CFNumberRef v153 = (const __CFNumber *)CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_CalculateYUVChecksum);
        if (v153)
        {
          LODWORD(valuePtr) = 0;
          CFNumberGetValue(v153, kCFNumberSInt32Type, &valuePtr);
          if (valuePtr) {
            *((void *)a3 + 2) |= 0x10000uLL;
          }
        }
        int v154 = CFDictionaryGetValue(theDict, @"MarkCurrentFrameAsLTR");
        if (v154)
        {
          if (CFEqual(v154, kCFBooleanTrue))
          {
            *((unsigned char *)a3 + 212) = 1;
            if (sub_D1C38(0x1Du, 6))
            {
              int v155 = sub_D1C7C(0x1Du);
              __uint64_t v156 = sub_DDEFC();
              __uint64_t v157 = (const char *)sub_D1CB0(6);
              if (v155)
              {
                printf("%lld %d AVE %s: FIG: received AVE_kVTEncoderFrameOptionKey_MarkCurrentFrameAsLTR = TRUE\n", v156, 29, v157);
                __uint64_t v158 = sub_DDEFC();
                __uint64_t v278 = (const char *)sub_D1CB0(6);
                syslog(3, "%lld %d AVE %s: FIG: received AVE_kVTEncoderFrameOptionKey_MarkCurrentFrameAsLTR = TRUE", v158, 29, v278);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: FIG: received AVE_kVTEncoderFrameOptionKey_MarkCurrentFrameAsLTR = TRUE", v156, 29, v157);
              }
            }
          }
        }
        CFNumberRef v159 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"RVRADimension");
        if (v159)
        {
          LODWORD(valuePtr) = 0;
          CFNumberGetValue(v159, kCFNumberSInt32Type, &valuePtr);
          int v160 = (unsigned __int16)valuePtr;
          a3[56] = WORD1(valuePtr);
          a3[57] = v160;
          if (sub_D1C38(0x1Du, 6))
          {
            int v161 = sub_D1C7C(0x1Du);
            __uint64_t v162 = sub_DDEFC();
            unsigned int v163 = (const char *)sub_D1CB0(6);
            int v164 = a3[57];
            if (v161)
            {
              printf("%lld %d AVE %s: FIG: received AVE_kVTEncoderFrameOptionKey_RVRADimension = %d x %d\n", v162, 29, v163, a3[56], v164);
              __uint64_t v165 = sub_DDEFC();
              int v166 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: received AVE_kVTEncoderFrameOptionKey_RVRADimension = %d x %d", v165, 29, v166, a3[56], a3[57]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: received AVE_kVTEncoderFrameOptionKey_RVRADimension = %d x %d", v162, 29, v163, a3[56], v164);
            }
          }
        }
        CFNumberRef v167 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"FrameNumForLTRToReplace");
        if (v167)
        {
          LODWORD(valuePtr) = 0;
          CFNumberGetValue(v167, kCFNumberSInt32Type, &valuePtr);
          a3[54] = valuePtr;
          if (sub_D1C38(0x1Du, 6))
          {
            int v168 = sub_D1C7C(0x1Du);
            __uint64_t v169 = sub_DDEFC();
            unsigned int v170 = (const char *)sub_D1CB0(6);
            int v171 = a3[54];
            if (v168)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_FrameNumForLTRToReplace found (%d)\n", v169, 29, v170, v171);
              __uint64_t v172 = sub_DDEFC();
              v279 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_FrameNumForLTRToReplace found (%d)", v172, 29, v279, a3[54]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_FrameNumForLTRToReplace found (%d)", v169, 29, v170, v171);
            }
          }
        }
        CFNumberRef v173 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"UserFrameType");
        if (v173)
        {
          LODWORD(valuePtr) = 0;
          CFNumberGetValue(v173, kCFNumberSInt32Type, &valuePtr);
          a3[51] = valuePtr;
          if (sub_D1C38(0x1Du, 6))
          {
            int v174 = sub_D1C7C(0x1Du);
            __uint64_t v175 = sub_DDEFC();
            unsigned int v176 = (const char *)sub_D1CB0(6);
            int v177 = a3[51];
            if (v174)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_UserFrameType found (%d)\n", v175, 29, v176, v177);
              __uint64_t v178 = sub_DDEFC();
              int v280 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_UserFrameType found (%d)", v178, 29, v280, a3[51]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_UserFrameType found (%d)", v175, 29, v176, v177);
            }
          }
        }
        CFArrayRef v179 = (const __CFArray *)CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_ReferenceL0);
        if (v179)
        {
          CFArrayRef v180 = v179;
          CFTypeID v181 = CFArrayGetTypeID();
          if (v181 == CFGetTypeID(v180))
          {
            LODWORD(valuePtr) = 4;
            sub_DBB60(v180, a3 + 58, (int *)&valuePtr);
            *((unsigned char *)a3 + 220) = valuePtr;
            if (sub_D1C38(0x1Du, 6))
            {
              int v182 = sub_D1C7C(0x1Du);
              __uint64_t v183 = sub_DDEFC();
              unsigned int v184 = (const char *)sub_D1CB0(6);
              int v185 = *((unsigned __int8 *)a3 + 220);
              if (v182)
              {
                printf("%lld %d AVE %s: FIG: received AVE_kVTEncoderFrameOptionKey_ReferenceL0, count = %d\n", v183, 29, v184, v185);
                __uint64_t v186 = sub_DDEFC();
                __uint64_t v281 = (const char *)sub_D1CB0(6);
                syslog(3, "%lld %d AVE %s: FIG: received AVE_kVTEncoderFrameOptionKey_ReferenceL0, count = %d", v186, 29, v281, *((unsigned __int8 *)a3 + 220));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: FIG: received AVE_kVTEncoderFrameOptionKey_ReferenceL0, count = %d", v183, 29, v184, v185);
              }
            }
          }
        }
        CFNumberRef v187 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"SliceAlphaC0OffsetDiv2");
        if (v187)
        {
          CFNumberGetValue(v187, kCFNumberSInt32Type, v291);
          if (sub_D1C38(0x1Du, 6))
          {
            int v188 = sub_D1C7C(0x1Du);
            __uint64_t v189 = sub_DDEFC();
            __uint64_t v190 = (const char *)sub_D1CB0(6);
            int v191 = *v291;
            if (v188)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_SliceAlphaC0OffsetDiv2 found (%d)\n", v189, 29, v190, v191);
              __uint64_t v192 = sub_DDEFC();
              v282 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_SliceAlphaC0OffsetDiv2 found (%d)", v192, 29, v282, *v291);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_SliceAlphaC0OffsetDiv2 found (%d)", v189, 29, v190, v191);
            }
          }
        }
        CFNumberRef v193 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"SliceBetaOffsetDiv2");
        if (v193)
        {
          int v194 = a3 + 174;
          CFNumberGetValue(v193, kCFNumberSInt32Type, a3 + 174);
          if (sub_D1C38(0x1Du, 6))
          {
            int v195 = sub_D1C7C(0x1Du);
            __uint64_t v196 = sub_DDEFC();
            int v197 = (const char *)sub_D1CB0(6);
            int v198 = *v194;
            if (v195)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_SliceBetaOffsetDiv2 found (%d)\n", v196, 29, v197, v198);
              __uint64_t v199 = sub_DDEFC();
              int v283 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_SliceBetaOffsetDiv2 found (%d)", v199, 29, v283, *v194);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_SliceBetaOffsetDiv2 found (%d)", v196, 29, v197, v198);
            }
          }
        }
        if (*(unsigned char *)(v289 + 731)
          && a3[51] == 1
          && !sub_DC624(theDict, *((unsigned __int8 *)a3 + 220), a3 + 66))
        {
          __int16 v294 = 0;
          uint64_t valuePtr = 0;
          sub_DD92C((char *)&valuePtr, 10, "%d %d", v200, v201, v202, v203, v204, *(_DWORD *)(v290 + 127));
          sub_DCAF4(a3 + 66, 215, 6, (uint64_t)&valuePtr, 0, v205, v206, v207);
        }
        __uint64_t v208 = CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_FinalFrame);
        if (v208)
        {
          if (CFEqual(v208, kCFBooleanTrue))
          {
            *((unsigned char *)a3 + 732) = 1;
            if (sub_D1C38(0x1Du, 6))
            {
              int v209 = sub_D1C7C(0x1Du);
              __uint64_t v210 = sub_DDEFC();
              int v211 = (const char *)sub_D1CB0(6);
              if (v209)
              {
                printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FinalFrame = TRUE\n", v210, 29, v211);
                __uint64_t v212 = sub_DDEFC();
                uint64_t v284 = (const char *)sub_D1CB0(6);
                syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FinalFrame = TRUE", v212, 29, v284);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FinalFrame = TRUE", v210, 29, v211);
              }
            }
          }
        }
        CFNumberRef v213 = (const __CFNumber *)CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_PicParameterSetId);
        if (v213)
        {
          int v214 = a3 + 176;
          CFNumberGetValue(v213, kCFNumberSInt32Type, a3 + 176);
          if (sub_D1C38(0x1Du, 6))
          {
            int v215 = sub_D1C7C(0x1Du);
            __uint64_t v216 = sub_DDEFC();
            int v217 = (const char *)sub_D1CB0(6);
            int v218 = *v214;
            if (v215)
            {
              printf("%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_PicParameterSetId found (%d)\n", v216, 29, v217, v218);
              __uint64_t v219 = sub_DDEFC();
              v285 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_PicParameterSetId found (%d)", v219, 29, v285, *v214);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_PicParameterSetId found (%d)", v216, 29, v217, v218);
            }
          }
        }
        uint64_t v220 = a3 + 52;
        CFNumberRef v221 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"POCLsb");
        if (v221)
        {
          int v222 = a3 + 387;
          CFNumberGetValue(v221, kCFNumberSInt32Type, a3 + 387);
          if (sub_D1C38(0x1Du, 6))
          {
            int v223 = sub_D1C7C(0x1Du);
            __uint64_t v224 = sub_DDEFC();
            double v225 = (const char *)sub_D1CB0(6);
            int v226 = *v222;
            if (v223)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_POCLsb found (%d)\n", v224, 29, v225, v226);
              __uint64_t v227 = sub_DDEFC();
              uint64_t v286 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_POCLsb found (%d)", v227, 29, v286, *v222);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_POCLsb found (%d)", v224, 29, v225, v226);
            }
          }
        }
        int v228 = (const void *)kVTEncodeFrameOptionKey_SliceQP;
        CFNumberRef v229 = (const __CFNumber *)CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_SliceQP);
        if (v229)
        {
          CFNumberGetValue(v229, kCFNumberSInt32Type, a3 + 52);
          if (sub_D1C38(0x1Du, 6))
          {
            int v230 = sub_D1C7C(0x1Du);
            __uint64_t v231 = sub_DDEFC();
            uint64_t v232 = (const char *)sub_D1CB0(6);
            int v233 = *v220;
            if (v230)
            {
              printf("%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SliceQP found (%d)\n", v231, 29, v232, v233);
              __uint64_t v234 = sub_DDEFC();
              uint64_t v287 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SliceQP found (%d)", v234, 29, v287, *v220);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SliceQP found (%d)", v231, 29, v232, v233);
            }
          }
        }
        else
        {
          CFArrayRef v235 = (const __CFArray *)CFDictionaryGetValue(theDict, v228);
          if (v235)
          {
            CFArrayRef v236 = v235;
            CFTypeID v237 = CFArrayGetTypeID();
            if (v237 == CFGetTypeID(v236))
            {
              CFIndex Count = CFArrayGetCount(v236);
              LODWORD(valuePtr) = 0;
              if (Count >= 1)
              {
                CFIndex v239 = Count;
                for (CFIndex i = 0; i < v239; CFIndex i = (i + 1))
                {
                  sub_C28C4(v236, i, &valuePtr);
                  if (!i) {
                    *uint64_t v220 = valuePtr;
                  }
                  if (sub_D1C38(0x1Du, 6))
                  {
                    int v241 = sub_D1C7C(0x1Du);
                    __uint64_t v242 = sub_DDEFC();
                    int v243 = (const char *)sub_D1CB0(6);
                    if (v241)
                    {
                      printf("%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SliceQP[%d] found (%d)\n", v242, 29, v243, i, valuePtr);
                      __uint64_t v244 = sub_DDEFC();
                      int v245 = (const char *)sub_D1CB0(6);
                      CFDictionaryRef v101 = theDict;
                      syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SliceQP[%d] found (%d)", v244, 29, v245, i, valuePtr);
                    }
                    else
                    {
                      syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SliceQP[%d] found (%d)", v242, 29, v243, i, valuePtr);
                    }
                  }
                }
              }
              uint64_t v117 = a1;
            }
          }
        }
        int v246 = CFDictionaryGetValue(v101, kVTEncodeFrameOptionKey_RequestNonReferenceFrame);
        if (v246)
        {
          if (CFEqual(v246, kCFBooleanTrue))
          {
            *((unsigned char *)a3 + 1576) = 1;
            if (sub_D1C38(0x1Du, 6))
            {
              int v247 = sub_D1C7C(0x1Du);
              __uint64_t v248 = sub_DDEFC();
              int v249 = (const char *)sub_D1CB0(6);
              int v250 = *((unsigned __int8 *)a3 + 1576);
              if (v247)
              {
                printf("%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_RequestNonReferenceFrame found (%d)\n", v248, 29, v249, v250);
                __uint64_t v251 = sub_DDEFC();
                v288 = (const char *)sub_D1CB0(6);
                syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_RequestNonReferenceFrame found (%d)", v251, 29, v288, *((unsigned __int8 *)a3 + 1576));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_RequestNonReferenceFrame found (%d)", v248, 29, v249, v250);
              }
            }
          }
        }
        int v252 = CFDictionaryGetValue(v101, @"ResetRCState");
        if (v252)
        {
          int v253 = CFEqual(v252, kCFBooleanTrue);
          *((unsigned char *)a3 + 8) = v253 != 0;
          if (v253)
          {
            int v254 = *(_DWORD *)(v117 + 196);
            if (v254 == 1)
            {
              *a3 = 2;
              if (sub_D1C38(0x1Du, 6))
              {
                int v258 = sub_D1C7C(0x1Du);
                __uint64_t v259 = sub_DDEFC();
                int v260 = (const char *)sub_D1CB0(6);
                if (v258)
                {
                  printf("%lld %d AVE %s: FIG: received AVE_kVTEncodeFrameOptionKey_ResetRCState = %d, set forceKeyFrame to IDR\n", v259, 29, v260, *((unsigned __int8 *)a3 + 8));
                  sub_DDEFC();
                  sub_D1CB0(6);
                }
                syslog(3, "%lld %d AVE %s: FIG: received AVE_kVTEncodeFrameOptionKey_ResetRCState = %d, set forceKeyFrame to IDR");
              }
            }
            else if (v254 == 20)
            {
              *((unsigned char *)a3 + 8) = 0;
              if (sub_D1C38(0x1Du, 5))
              {
                int v255 = sub_D1C7C(0x1Du);
                __uint64_t v256 = sub_DDEFC();
                int v257 = (const char *)sub_D1CB0(5);
                if (v255)
                {
                  printf("%lld %d AVE %s: AVE FIG WARNING: Cannot reset rc state for Direct RC.\n", v256, 29, v257);
                  sub_DDEFC();
                  sub_D1CB0(5);
                }
                syslog(3, "%lld %d AVE %s: AVE FIG WARNING: Cannot reset rc state for Direct RC.");
              }
            }
            else
            {
              *((unsigned char *)a3 + 8) = 0;
              if (sub_D1C38(0x1Du, 5))
              {
                int v261 = sub_D1C7C(0x1Du);
                __uint64_t v262 = sub_DDEFC();
                int v263 = (const char *)sub_D1CB0(5);
                if (v261)
                {
                  printf("%lld %d AVE %s: AVE FIG WARNING: Cannot reset rc state if RC is NOT On.\n", v262, 29, v263);
                  sub_DDEFC();
                  sub_D1CB0(5);
                }
                syslog(3, "%lld %d AVE %s: AVE FIG WARNING: Cannot reset rc state if RC is NOT On.");
              }
            }
          }
        }
        return;
      }
    }
    else
    {
      a3[12] = 16;
    }
    unint64_t v92 = 0;
    int v93 = a3 + 13;
    do
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v84, v92);
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, v93);
      if (sub_D1C38(0x1Du, 6))
      {
        int v95 = sub_D1C7C(0x1Du);
        __uint64_t v96 = sub_DDEFC();
        __uint64_t v97 = (const char *)sub_D1CB0(6);
        int v98 = *v93;
        if (v95)
        {
          printf("%lld %d AVE %s: FIG: index %d: token = %d\n", v96, 29, v97, v92, v98);
          __uint64_t v99 = sub_DDEFC();
          double v100 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: index %d: token = %d", v99, 29, v100, v92, *v93);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: index %d: token = %d", v96, 29, v97, v92, v98);
        }
      }
      ++v92;
      ++v93;
    }
    while (v92 < a3[12]);
    goto LABEL_87;
  }
  if (sub_D1C38(3u, 4))
  {
    int v17 = sub_D1C7C(3u);
    __uint64_t v18 = sub_DDEFC();
    __uint64_t v19 = (const char *)sub_D1CB0(4);
    if (v17)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_GetPerFrameData PerFrameData = NULL.\n", v18, 3, v19, "AVE_GetPerFrameData", 3811, "PerFrameData != __null");
      sub_DDEFC();
      sub_D1CB0(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_GetPerFrameData PerFrameData = NULL.");
  }
}

void sub_47E00(uint64_t a1, uint64_t a2, double a3)
{
  if (!*(_DWORD *)(a1 + 292))
  {
    uint64_t v5 = a1 + 18804;
    if (sub_D1C38(0x30u, 6))
    {
      int v6 = sub_D1C7C(0x30u);
      __uint64_t v7 = sub_DDEFC();
      uint64_t v8 = (const char *)sub_D1CB0(6);
      int v9 = *(_DWORD *)(v5 + 6308);
      if (v6)
      {
        printf("%lld %d AVE %s: FIG: F %d lowLightSNRThreashold %f SNR %f\n", v7, 48, v8, v9, 25.0, a3);
        __uint64_t v10 = sub_DDEFC();
        long long v11 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: F %d lowLightSNRThreashold %f SNR %f", v10, 48, v11, *(_DWORD *)(v5 + 6308), 25.0, a3);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: F %d lowLightSNRThreashold %f SNR %f", v7, 48, v8, v9, 25.0, a3);
      }
    }
    if (*(_DWORD *)v5 == 2) {
      *(_DWORD *)(a2 + 144) = a3 <= 25.0;
    }
    if (*(unsigned char *)(v5 + 53)) {
      *(_DWORD *)(a2 + 144) = 1;
    }
  }
}

uint64_t sub_47F24(uint64_t a1, void *a2)
{
  int v2 = (unsigned int *)(a1 + 25112);
  if (!*(_DWORD *)(a1 + 25112))
  {
    uint64_t v8 = a2[2];
    *(void *)(a1 + 25284) = *a2;
    *(void *)(a1 + 25292) = a2[1];
    *(void *)(a1 + 25300) = v8;
    if (sub_D1C38(0xD8u, 6))
    {
      int v9 = sub_D1C7C(0xD8u);
      __uint64_t v10 = sub_DDEFC();
      long long v11 = (const char *)sub_D1CB0(6);
      if (v9)
      {
        printf("%lld %d AVE %s: PTS: val %lld, timeScale %d, flags 0x%x, epoch %lld\n", v10, 216, v11, *a2, *((_DWORD *)a2 + 2), *((_DWORD *)a2 + 3), a2[2]);
        __uint64_t v10 = sub_DDEFC();
        sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: PTS: val %lld, timeScale %d, flags 0x%x, epoch %lld", v10);
    }
    if (VTMultiPassStorageCopyDataAtTimeStamp())
    {
      if (!sub_D1C38(3u, 4)) {
        return 4294954394;
      }
      int v17 = sub_D1C7C(3u);
      __uint64_t v18 = sub_DDEFC();
      __uint64_t v19 = (const char *)sub_D1CB0(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp failed. F %d PTS %lld ts %d\n", v18, 3, v19, "AVE_H264MultipassDataFetch", 8540, "err == noErr", *v2, *a2, *((_DWORD *)a2 + 2));
        __uint64_t v18 = sub_DDEFC();
        __uint64_t v19 = (const char *)sub_D1CB0(4);
        uint64_t v34 = *a2;
        uint64_t v35 = *((unsigned int *)a2 + 2);
        int v32 = "err == noErr";
        uint64_t v33 = *v2;
        uint64_t v31 = 8540;
      }
      else
      {
        uint64_t v34 = *a2;
        uint64_t v35 = *((unsigned int *)a2 + 2);
        uint64_t v33 = *v2;
        uint64_t v31 = 8540;
        int v32 = "err == noErr";
      }
      int v30 = v19;
      char v20 = "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp failed. F %d PTS %lld ts %d";
    }
    else
    {
      if (!sub_D1C38(3u, 4)) {
        return 4294954394;
      }
      int v21 = sub_D1C7C(3u);
      __uint64_t v18 = sub_DDEFC();
      int v22 = (const char *)sub_D1CB0(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp data == NULL. F %d PTS %lld ts %d\n", v18, 3, v22, "AVE_H264MultipassDataFetch", 8541, "data != __null", *v2, *a2, *((_DWORD *)a2 + 2));
        __uint64_t v18 = sub_DDEFC();
        int v22 = (const char *)sub_D1CB0(4);
        uint64_t v34 = *a2;
        uint64_t v35 = *((unsigned int *)a2 + 2);
        int v32 = "data != __null";
        uint64_t v33 = *v2;
        uint64_t v31 = 8541;
      }
      else
      {
        uint64_t v34 = *a2;
        uint64_t v35 = *((unsigned int *)a2 + 2);
        uint64_t v33 = *v2;
        uint64_t v31 = 8541;
        int v32 = "data != __null";
      }
      int v30 = v22;
      char v20 = "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp data == NULL. F %d PTS %lld ts %d";
    }
    syslog(3, v20, v18, 3, v30, "AVE_H264MultipassDataFetch", v31, v32, v33, v34, v35);
    return 4294954394;
  }
  if (VTMultiPassStorageGetTimeStamp())
  {
    if (sub_D1C38(3u, 4))
    {
      int v3 = sub_D1C7C(3u);
      __uint64_t v4 = sub_DDEFC();
      uint64_t v5 = (const char *)sub_D1CB0(4);
      if (!v3)
      {
LABEL_21:
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStamp failed.");
        return 4294954394;
      }
      int v6 = 8595;
LABEL_6:
      printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStamp failed.\n", v4, 3, v5, "AVE_H264MultipassDataFetch", v6, "err == noErr");
      sub_DDEFC();
      sub_D1CB0(4);
      goto LABEL_21;
    }
    return 4294954394;
  }
  if ((v2[46] & 0x1D) == 1)
  {
    if (VTMultiPassStorageCopyDataAtTimeStamp())
    {
      if (!sub_D1C38(3u, 4)) {
        return 4294954394;
      }
      int v12 = sub_D1C7C(3u);
      __uint64_t v13 = sub_DDEFC();
      int v14 = (const char *)sub_D1CB0(4);
      if (v12)
      {
        int v15 = 8600;
LABEL_16:
        printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp failed.\n", v13, 3, v14, "AVE_H264MultipassDataFetch", v15, "err == noErr");
        sub_DDEFC();
        sub_D1CB0(4);
        goto LABEL_41;
      }
      goto LABEL_41;
    }
    if (!sub_D1C38(3u, 4)) {
      return 4294954394;
    }
    int v24 = sub_D1C7C(3u);
    __uint64_t v25 = sub_DDEFC();
    int v26 = (const char *)sub_D1CB0(4);
    if (v24)
    {
      int v27 = 8601;
LABEL_46:
      printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp d == NULL.\n", v25, 3, v26, "AVE_H264MultipassDataFetch", v27, "d != __null");
      sub_DDEFC();
      sub_D1CB0(4);
      goto LABEL_50;
    }
    goto LABEL_50;
  }
  if (!VTMultiPassStorageGetTimeStamp())
  {
    if ((v2[46] & 0x1D) != 1) {
      return 0;
    }
    if (VTMultiPassStorageCopyDataAtTimeStamp())
    {
      if (!sub_D1C38(3u, 4)) {
        return 4294954394;
      }
      int v23 = sub_D1C7C(3u);
      __uint64_t v13 = sub_DDEFC();
      int v14 = (const char *)sub_D1CB0(4);
      if (v23)
      {
        int v15 = 8625;
        goto LABEL_16;
      }
LABEL_41:
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp failed.");
      return 4294954394;
    }
    if (!sub_D1C38(3u, 4)) {
      return 4294954394;
    }
    int v29 = sub_D1C7C(3u);
    __uint64_t v25 = sub_DDEFC();
    int v26 = (const char *)sub_D1CB0(4);
    if (v29)
    {
      int v27 = 8626;
      goto LABEL_46;
    }
LABEL_50:
    syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp d == NULL.");
    return 4294954394;
  }
  if (sub_D1C38(3u, 4))
  {
    int v16 = sub_D1C7C(3u);
    __uint64_t v4 = sub_DDEFC();
    uint64_t v5 = (const char *)sub_D1CB0(4);
    if (!v16) {
      goto LABEL_21;
    }
    int v6 = 8620;
    goto LABEL_6;
  }
  return 4294954394;
}

void sub_48D8C(uint64_t a1)
{
  int v2 = (unsigned char *)(a1 + 18684);
  if (sub_D1C38(0x14u, 7))
  {
    int v3 = sub_D1C7C(0x14u);
    __uint64_t v4 = sub_DDEFC();
    uint64_t v5 = (const char *)sub_D1CB0(7);
    if (v3)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", v4, 20, v5, "AVE_EnableH264FWRCSettings", (const void *)a1);
      __uint64_t v6 = sub_DDEFC();
      unsigned int v28 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v6, 20, v28, "AVE_EnableH264FWRCSettings", (const void *)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", v4, 20, v5, "AVE_EnableH264FWRCSettings", (const void *)a1);
    }
  }
  if (sub_D1C38(0x16u, 8))
  {
    int v7 = sub_D1C7C(0x16u);
    __uint64_t v8 = sub_DDEFC();
    int v9 = (const char *)sub_D1CB0(8);
    if (v7)
    {
      printf("%lld %d AVE %s: %s:%d usageMode %d RealTimeClient %d bRCModeSet %d eRCMode %d\n", v8, 22, v9, "AVE_EnableH264FWRCSettings", 4946, *(_DWORD *)(a1 + 292), *(_DWORD *)(a1 + 264), v2[88], *(_DWORD *)(a1 + 196));
      __uint64_t v8 = sub_DDEFC();
      sub_D1CB0(8);
    }
    syslog(3, "%lld %d AVE %s: %s:%d usageMode %d RealTimeClient %d bRCModeSet %d eRCMode %d", v8, 22);
  }
  if ((*(unsigned char *)(a1 + 203) & 0x80) == 0 && *(_DWORD *)(a1 + 196) == 8) {
    v2[88] = 0;
  }
  if (*(_DWORD *)(a1 + 292))
  {
    if (!v2[88]) {
      *(_DWORD *)(a1 + 196) = 1;
    }
    *int v2 = 1;
    goto LABEL_42;
  }
  if (*(_DWORD *)(a1 + 264) == 1)
  {
    if (!v2[88]) {
      *(_DWORD *)(a1 + 196) = 1;
    }
    *int v2 = 1;
    *(_DWORD *)(a1 + 1920) = 0;
    v2[68] = 0;
    v2[177] = 0;
    goto LABEL_21;
  }
  if (!v2[88])
  {
    *(_DWORD *)(a1 + 196) = 1;
    *int v2 = 1;
    *(_DWORD *)(a1 + 1920) = 0;
    if (v2[97]) {
LABEL_21:
    }
      sub_49238(a1);
  }
  if (sub_D1C38(0x14u, 7))
  {
    int v10 = sub_D1C7C(0x14u);
    __uint64_t v11 = sub_DDEFC();
    int v12 = (const char *)sub_D1CB0(7);
    if (v10)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_SetupFWRCSettingsBasedOnBPP\n", v11, 20, v12);
      __uint64_t v13 = sub_DDEFC();
      int v29 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetupFWRCSettingsBasedOnBPP", v13, 20, v29);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetupFWRCSettingsBasedOnBPP", v11, 20, v12);
    }
  }
  unsigned int v14 = *(_DWORD *)(a1 + 1884) + 15;
  unsigned int v15 = *(_DWORD *)(a1 + 1880) + 15;
  double v16 = (double)((v15 & 0xFFFFFFF0) * (v14 & 0xFFFFFFF0));
  unsigned int v17 = (v15 >> 4) * (v14 >> 4);
  int v18 = *(_DWORD *)(a1 + 228);
  double v19 = (double)v18 * v16;
  if (v17 < 0xE11)
  {
    if (v18 <= 60 && v19 * 0.26 > (double)*(int *)(a1 + 192)) {
      *(unsigned char *)(a1 + 255) = 0;
    }
    if (sub_D1C38(0xDCu, 7))
    {
      int v21 = sub_D1C7C(0xDCu);
      __uint64_t v22 = sub_DDEFC();
      int v23 = (const char *)sub_D1CB0(7);
      double v20 = v19 * 0.26;
      goto LABEL_38;
    }
  }
  else
  {
    double v20 = v19 * 0.17;
    if (v19 * 0.17 > (double)*(int *)(a1 + 192)) {
      *(unsigned char *)(a1 + 255) = 0;
    }
    if (sub_D1C38(0xDCu, 7))
    {
      int v21 = sub_D1C7C(0xDCu);
      __uint64_t v22 = sub_DDEFC();
      int v23 = (const char *)sub_D1CB0(7);
LABEL_38:
      if (v21)
      {
        printf("%lld %d AVE %s: BPP: BPP %f, BPP Scaled %f, iBitrate %d, bFlatAreaLowQpEn %d\n", v22, 220, v23, v19, v20, *(_DWORD *)(a1 + 192), *(unsigned __int8 *)(a1 + 255));
        sub_DDEFC();
        sub_D1CB0(7);
      }
      syslog(3, "%lld %d AVE %s: BPP: BPP %f, BPP Scaled %f, iBitrate %d, bFlatAreaLowQpEn %d");
    }
  }
LABEL_42:
  if (sub_D1C38(0x14u, 7))
  {
    int v24 = sub_D1C7C(0x14u);
    __uint64_t v25 = sub_DDEFC();
    int v26 = (const char *)sub_D1CB0(7);
    if (v24)
    {
      printf("%lld %d AVE %s: %s Exit %p\n", v25, 20, v26, "AVE_EnableH264FWRCSettings", (const void *)a1);
      __uint64_t v27 = sub_DDEFC();
      int v30 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p", v27, 20, v30, "AVE_EnableH264FWRCSettings", (const void *)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p", v25, 20, v26, "AVE_EnableH264FWRCSettings", (const void *)a1);
    }
  }
}

void sub_49238(uint64_t a1)
{
  if (sub_D1C38(0x14u, 7))
  {
    int v2 = sub_D1C7C(0x14u);
    __uint64_t v3 = sub_DDEFC();
    __uint64_t v4 = (const char *)sub_D1CB0(7);
    if (v2)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_SetupFWRCSettingsBasedOnWorkload\n", v3, 20, v4);
      __uint64_t v5 = sub_DDEFC();
      __uint64_t v13 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetupFWRCSettingsBasedOnWorkload", v5, 20, v13);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetupFWRCSettingsBasedOnWorkload", v3, 20, v4);
    }
  }
  unsigned int v6 = (*(_DWORD *)(a1 + 1884) + 15) >> 4;
  unsigned int v7 = (*(_DWORD *)(a1 + 1880) + 15) >> 4;
  unsigned int v8 = (v7 + 31) & 0x1FFFFFE0;
  int v9 = *(_DWORD *)(a1 + 260);
  if (v9) {
    *(unsigned char *)(a1 + 253) = v7 * v6 * *(_DWORD *)(a1 + 228) > 0xAFC80;
  }
  if (v8 > 0x80 || v8 * v6 >= 0x2D01)
  {
    unsigned int v11 = (((v7 + 1) >> 1) + 31) & 0x1FFFFFE0;
    if (v11 > 0x80)
    {
      int v12 = 0;
    }
    else
    {
      int v12 = 0;
      if (v9 && v11 * ((v6 + 1) >> 1) <= 0x2D00)
      {
        int v12 = 1;
        *(unsigned char *)(a1 + 253) = 1;
      }
    }
    *(_DWORD *)(a1 + 260) = v12;
  }
  else
  {
    LOBYTE(v12) = 0;
  }
  *(unsigned char *)(a1 + 258) = v12;
}

uint64_t sub_49398(int32x4_t *a1)
{
  int v2 = &a1[1568].i32[2];
  __uint64_t v3 = &a1[1117].i8[12];
  unsigned int v4 = *((_DWORD *)sub_C7604() + 312);
  if (v4 <= 3)
  {
    v2[1] = v4;
    if (v4 != 3) {
      v3[963] = 0;
    }
  }
  int v5 = *((_DWORD *)v3 + 624);
  if (sub_D1C38(0x16u, 6))
  {
    int v6 = sub_D1C7C(0x16u);
    __uint64_t v7 = sub_DDEFC();
    unsigned int v8 = (const char *)sub_D1CB0(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p %d\n", v7, 22, v8, "AVE_H264NewDefaultsBasedOnProfileUsageDefault", a1, v5);
      __uint64_t v9 = sub_DDEFC();
      __uint64_t v80 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p %d", v9, 22, v80, "AVE_H264NewDefaultsBasedOnProfileUsageDefault", a1, v5);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p %d", v7, 22, v8, "AVE_H264NewDefaultsBasedOnProfileUsageDefault", a1, v5);
    }
  }
  int v10 = &a1[1386].i8[7];
  sub_48D8C((uint64_t)a1);
  if (a1[16].i32[1])
  {
    unsigned __int32 v11 = (unsigned __int32)a1[117].i32[2] >> 4;
    unsigned __int32 v12 = (unsigned __int32)a1[117].i32[3] >> 4;
    unsigned int v13 = (v11 + 31) & 0x1FFFFFE0;
    if (v13 > 0x80 || v13 * v12 >= 0x2D01)
    {
      unsigned int v15 = (((v11 + 1) >> 1) + 31) & 0x1FFFFFE0;
      if (v15 > 0x80 || v15 * ((v12 + 1) >> 1) >= 0x2D01)
      {
        char v16 = 0;
        a1[16].i32[1] = 0;
      }
      else
      {
        char v16 = 1;
      }
      a1[16].i8[2] = v16;
    }
  }
  if (v5 > 99)
  {
    if (v5 == 100 || v5 == 244 || v5 == 122)
    {
      if (*v2 == 2) {
        goto LABEL_42;
      }
      if (sub_D1C38(0x1Eu, 6))
      {
        int v17 = sub_D1C7C(0x1Eu);
        __uint64_t v18 = sub_DDEFC();
        double v19 = (const char *)sub_D1CB0(6);
        int v20 = *((_DWORD *)v3 + 1056);
        if (v17)
        {
          printf("%lld %d AVE %s: FIG: FIGEntropyMode = %d -> change the default %d\n", v18, 30, v19, *v2, v20);
          __uint64_t v21 = sub_DDEFC();
          __uint64_t v22 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: FIGEntropyMode = %d -> change the default %d", v21, 30, v22, *v2, *((_DWORD *)v3 + 1056));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: FIGEntropyMode = %d -> change the default %d", v18, 30, v19, *v2, v20);
        }
      }
      if (*v2) {
LABEL_42:
      }
        *((_DWORD *)v3 + 1056) = 1;
      else {
        *((_DWORD *)v3 + 1056) = 0;
      }
      *int v10 = 1;
      *(_DWORD *)__uint64_t v3 = 2;
      if (a1[13].i8[8])
      {
        int v38 = v2[1];
        if (v38 < 0)
        {
          if (a1[1579].i64[0]) {
            BOOL v39 = 0;
          }
          else {
            BOOL v39 = v3[963] == 0;
          }
          if (v39) {
            int v38 = 1;
          }
          else {
            int v38 = 3;
          }
        }
        a1[121].i32[2] = v38;
        if (a1[12].i32[1] != 20) {
          v3[800] = 1;
        }
        if (sub_D1C38(0x1Eu, 6))
        {
          int v40 = sub_D1C7C(0x1Eu);
          __uint64_t v41 = sub_DDEFC();
          int v42 = (const char *)sub_D1CB0(6);
          if (v40)
          {
            printf("%lld %d AVE %s: FIG: FIGAllowFrameReordering ON -> B will be = %d (FIGNumberOfBFrames %d)\n", v41, 30, v42, a1[121].i32[2], v2[1]);
            sub_DDEFC();
            sub_D1CB0(6);
          }
          syslog(3, "%lld %d AVE %s: FIG: FIGAllowFrameReordering ON -> B will be = %d (FIGNumberOfBFrames %d)");
        }
      }
      else
      {
        a1[121].i32[2] = 0;
        a1[126].i32[2] &= ~4u;
        if (sub_D1C38(0x1Eu, 6))
        {
          int v43 = sub_D1C7C(0x1Eu);
          __uint64_t v44 = sub_DDEFC();
          int v45 = (const char *)sub_D1CB0(6);
          if (v43)
          {
            printf("%lld %d AVE %s: FIG: FIGAllowFrameReordering OFF\n", v44, 30, v45);
            sub_DDEFC();
            sub_D1CB0(6);
          }
          syslog(3, "%lld %d AVE %s: FIG: FIGAllowFrameReordering OFF");
        }
      }
      if (v3[859])
      {
        if (sub_D1C38(3u, 4))
        {
          int v46 = sub_D1C7C(3u);
          __uint64_t v47 = sub_DDEFC();
          int v48 = (const char *)sub_D1CB0(4);
          if (!v46) {
            goto LABEL_100;
          }
          int v49 = 7082;
          goto LABEL_99;
        }
        goto LABEL_120;
      }
      goto LABEL_112;
    }
LABEL_37:
    if (sub_D1C38(3u, 4))
    {
      int v35 = sub_D1C7C(3u);
      __uint64_t v36 = sub_DDEFC();
      int v37 = (const char *)sub_D1CB0(4);
      if (v35)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: profile not understood\n", v36, 3, v37, "AVE_H264NewDefaultsBasedOnProfileUsageDefault", 7170, "false");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: profile not understood");
    }
    goto LABEL_120;
  }
  if (v5 == 66)
  {
    if (*v2 != 2)
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v29 = sub_D1C7C(0x1Eu);
        __uint64_t v30 = sub_DDEFC();
        uint64_t v31 = (const char *)sub_D1CB0(6);
        int v32 = *((_DWORD *)v3 + 1056);
        if (v29)
        {
          printf("%lld %d AVE %s: FIG: FIGEntropyMode = %d -> change the default %d\n", v30, 30, v31, *v2, v32);
          __uint64_t v33 = sub_DDEFC();
          uint64_t v34 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: FIGEntropyMode = %d -> change the default %d", v33, 30, v34, *v2, *((_DWORD *)v3 + 1056));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: FIGEntropyMode = %d -> change the default %d", v30, 30, v31, *v2, v32);
        }
      }
      if (*v2 == 1 && sub_D1C38(0x1Eu, 4))
      {
        int v58 = sub_D1C7C(0x1Eu);
        __uint64_t v59 = sub_DDEFC();
        int v60 = (const char *)sub_D1CB0(4);
        if (v58)
        {
          printf("%lld %d AVE %s: FIG: SetProperty kVTCompressionPropertyKey_H264EntropyMode = CABAC and baseline profile. out of spec. set entropy to CAVLC\n", v59, 30, v60);
          __uint64_t v61 = sub_DDEFC();
          int v81 = (const char *)sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: FIG: SetProperty kVTCompressionPropertyKey_H264EntropyMode = CABAC and baseline profile. out of spec. set entropy to CAVLC", v61, 30, v81);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: SetProperty kVTCompressionPropertyKey_H264EntropyMode = CABAC and baseline profile. out of spec. set entropy to CAVLC", v59, 30, v60);
        }
      }
    }
    *((_DWORD *)v3 + 1056) = 0;
    *int v10 = 0;
    *(_DWORD *)__uint64_t v3 = 0;
    a1[121].i32[2] = 0;
    a1[126].i32[2] &= ~4u;
    if (*v2 == 1)
    {
      if (sub_D1C38(3u, 4))
      {
        int v63 = sub_D1C7C(3u);
        __uint64_t v64 = sub_DDEFC();
        CFNumberRef v65 = (const char *)sub_D1CB0(4);
        if (v63)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: profile = %d but CABAC is on\n", v64, 3, v65, "AVE_H264NewDefaultsBasedOnProfileUsageDefault", 7162, "encoderPrivateStorage->FIGEntropyMode != EntropyModeCABAC", 66);
          __uint64_t v64 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: profile = %d but CABAC is on", v64);
      }
      goto LABEL_120;
    }
    if (v3[859])
    {
      if (sub_D1C38(3u, 4))
      {
        int v66 = sub_D1C7C(3u);
        __uint64_t v67 = sub_DDEFC();
        int v68 = (const char *)sub_D1CB0(4);
        if (v66)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: profile = %d but bWeightedPrediction is on\n", v67, 3, v68, "AVE_H264NewDefaultsBasedOnProfileUsageDefault", 7163, "encoderPrivateStorage->VideoParamsDriver.bWeightedPrediction == false", 66);
          __uint64_t v67 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: profile = %d but bWeightedPrediction is on", v67);
      }
      goto LABEL_120;
    }
    goto LABEL_112;
  }
  if (v5 != 77) {
    goto LABEL_37;
  }
  if (*v2 == 2) {
    goto LABEL_70;
  }
  if (sub_D1C38(0x1Eu, 6))
  {
    int v23 = sub_D1C7C(0x1Eu);
    __uint64_t v24 = sub_DDEFC();
    __uint64_t v25 = (const char *)sub_D1CB0(6);
    int v26 = *((_DWORD *)v3 + 1056);
    if (v23)
    {
      printf("%lld %d AVE %s: FIG: FIGEntropyMode = %d -> change the default %d\n", v24, 30, v25, *v2, v26);
      __uint64_t v27 = sub_DDEFC();
      unsigned int v28 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: FIG: FIGEntropyMode = %d -> change the default %d", v27, 30, v28, *v2, *((_DWORD *)v3 + 1056));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: FIGEntropyMode = %d -> change the default %d", v24, 30, v25, *v2, v26);
    }
  }
  if (*v2) {
LABEL_70:
  }
    *((_DWORD *)v3 + 1056) = 1;
  else {
    *((_DWORD *)v3 + 1056) = 0;
  }
  *int v10 = 0;
  *(_DWORD *)__uint64_t v3 = 0;
  if (a1[13].i8[8])
  {
    int v50 = v2[1];
    if (v50 < 0)
    {
      if (a1[1579].i64[0]) {
        BOOL v51 = 0;
      }
      else {
        BOOL v51 = v3[963] == 0;
      }
      if (v51) {
        int v50 = 1;
      }
      else {
        int v50 = 3;
      }
    }
    a1[121].i32[2] = v50;
    if (a1[12].i32[1] != 20) {
      v3[800] = 1;
    }
    if (sub_D1C38(0x1Eu, 6))
    {
      int v52 = sub_D1C7C(0x1Eu);
      __uint64_t v53 = sub_DDEFC();
      int v54 = (const char *)sub_D1CB0(6);
      if (v52)
      {
        printf("%lld %d AVE %s: FIG: FIGAllowFrameReordering ON -> B will be = %d (FIGNumberOfBFrames %d)\n", v53, 30, v54, a1[121].i32[2], v2[1]);
        sub_DDEFC();
        sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: FIGAllowFrameReordering ON -> B will be = %d (FIGNumberOfBFrames %d)");
    }
  }
  else
  {
    a1[121].i32[2] = 0;
    a1[126].i32[2] &= ~4u;
    if (sub_D1C38(0x1Eu, 6))
    {
      int v55 = sub_D1C7C(0x1Eu);
      __uint64_t v56 = sub_DDEFC();
      CFNumberRef v57 = (const char *)sub_D1CB0(6);
      if (v55)
      {
        printf("%lld %d AVE %s: FIG: FIGAllowFrameReordering OFF\n", v56, 30, v57);
        sub_DDEFC();
        sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: FIGAllowFrameReordering OFF");
    }
  }
  if (v3[859])
  {
    if (sub_D1C38(3u, 4))
    {
      int v62 = sub_D1C7C(3u);
      __uint64_t v47 = sub_DDEFC();
      int v48 = (const char *)sub_D1CB0(4);
      if (!v62)
      {
LABEL_100:
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: bWeightedPredictionis true and usage is default. not yet supported...");
        goto LABEL_120;
      }
      int v49 = 7140;
LABEL_99:
      printf("%lld %d AVE %s: %s:%d %s | FIG: bWeightedPredictionis true and usage is default. not yet supported...\n", v47, 3, v48, "AVE_H264NewDefaultsBasedOnProfileUsageDefault", v49, "false");
      sub_DDEFC();
      sub_D1CB0(4);
      goto LABEL_100;
    }
LABEL_120:
    char v69 = 0;
    int v70 = -12902;
    goto LABEL_121;
  }
LABEL_112:
  if (a1[12].i32[1] == 3)
  {
    v3[800] = 1;
    a1[120].i32[0] = 0;
    v3[868] = 0;
    if (!v3[965])
    {
      a1[15].i8[4] = 0;
      a1[15].i8[12] = 0;
      a1[15].i8[6] = 0;
    }
    a1[15].i8[15] = 0;
    a1[16].i8[1] = 0;
    a1[16].i32[1] = 0;
    a1[110].i32[2] = 0;
  }
  char v69 = 1;
  int v70 = 0;
  if (v3[2548])
  {
    a1[12].i32[1] = 3;
    a1[126].i32[2] &= ~4u;
    unsigned int v71 = -6 * *((_DWORD *)v3 + 635);
    v3[800] = 1;
    a1[120].i32[0] = 0;
    v3[868] = 0;
    a1[15].i8[4] = 0;
    a1[15].i8[12] = 0;
    a1[15].i8[6] = 0;
    a1[113].i64[1] = 0;
    a1[115] = vdupq_n_s32(v71);
    a1[114].i32[2] = v71;
    a1[114].i32[1] = v71;
    a1[114].i32[0] = v71;
    *((_DWORD *)v3 + 624) = 244;
    *((_DWORD *)v3 + 631) = 52;
    *((_DWORD *)v3 + 1056) = 0;
    a1[15].i8[15] = 0;
    a1[110].i32[2] = 0;
    *((_DWORD *)v3 + 150) = 0;
  }
LABEL_121:
  if (sub_D1C38(0x16u, 6))
  {
    int v72 = sub_D1C7C(0x16u);
    __uint64_t v73 = sub_DDEFC();
    CFNumberRef v74 = (const char *)sub_D1CB0(6);
    if (v72)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %d\n", v73, 22, v74, "AVE_H264NewDefaultsBasedOnProfileUsageDefault", a1, v5, v70);
      __uint64_t v73 = sub_DDEFC();
      sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: %s Exit %p %d %d", v73);
  }
  if (v69) {
    return 0;
  }
  if (sub_D1C38(3u, 4))
  {
    int v76 = sub_D1C7C(3u);
    __uint64_t v77 = sub_DDEFC();
    int v78 = (const char *)sub_D1CB0(4);
    if (v76)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_H264NewDefaultsBasedOnProfileUsageDefault failed\n", v77, 3, v78, "AVE_NewDefaultsBasedOnProfileUsageDefault", 7263, "err == noErr");
      __uint64_t v79 = sub_DDEFC();
      __uint64_t v82 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_H264NewDefaultsBasedOnProfileUsageDefault failed", v79, 3, v82, "AVE_NewDefaultsBasedOnProfileUsageDefault", 7263, "err == noErr");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_H264NewDefaultsBasedOnProfileUsageDefault failed", v77, 3, v78, "AVE_NewDefaultsBasedOnProfileUsageDefault", 7263, "err == noErr");
    }
  }
  return 4294954394;
}

uint64_t sub_4A0AC(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  int v4 = a3;
  if (((a3 + 63) & 0xFFFFFFC0) != a3)
  {
    if (sub_D1C38(3u, 4))
    {
      int v7 = sub_D1C7C(3u);
      __uint64_t v8 = sub_DDEFC();
      __uint64_t v9 = (const char *)sub_D1CB0(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERR: x = %d not aligned\n", v8, 3, v9, "AVE_GetTileInfo", 11431, "tileOffset.x == (((tileOffset.x) + (64) - 1) & ~((64) - 1))", v4);
        __uint64_t v10 = sub_DDEFC();
        sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERR: x = %d not aligned", v10);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERR: x = %d not aligned", v8);
      }
    }
    return 4294954394;
  }
  unint64_t v5 = HIDWORD(a3);
  if (((HIDWORD(a3) + 15) & 0xFFFFFFF0) != HIDWORD(a3))
  {
    if (sub_D1C38(3u, 4))
    {
      int v11 = sub_D1C7C(3u);
      __uint64_t v12 = sub_DDEFC();
      unsigned int v13 = (const char *)sub_D1CB0(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERR: y = %d not aligned\n", v12, 3, v13, "AVE_GetTileInfo", 11434, "tileOffset.y == (((tileOffset.y) + (16) - 1) & ~((16) - 1))", v5);
        __uint64_t v12 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERR: y = %d not aligned", v12);
    }
    return 4294954394;
  }
  *(void *)(a2 + 716) = a3;
  if (*(unsigned char *)(a1 + 18012))
  {
    uint64_t result = 0;
    *(void *)(a2 + 708) = 0;
    return result;
  }
  if (!*(unsigned char *)(a1 + 17880)) {
    return 4294954394;
  }
  int v14 = a4;
  unsigned int v15 = (unsigned int *)(a1 + 18872);
  unint64_t v16 = HIDWORD(a4);
  unsigned int v17 = a4 + a3;
  unsigned int v18 = HIDWORD(a4) + HIDWORD(a3);
  if (*(int *)(a1 + 25240) >= 11)
  {
    unsigned int v19 = *(_DWORD *)(a1 + 18876);
    if (*(unsigned char *)(a1 + 18860))
    {
      if (v17 >= v19) {
        unsigned int v17 = *(_DWORD *)(a1 + 18876);
      }
      *(_DWORD *)(a2 + 724) = v17;
      unsigned int v20 = *(_DWORD *)(a1 + 18880);
      if (v18 >= v20) {
        unsigned int v18 = *(_DWORD *)(a1 + 18880);
      }
      *(_DWORD *)(a2 + 728) = v18;
      unsigned int v17 = v19;
      unsigned int v18 = v20;
    }
    else
    {
      if (v17 <= v19) {
        int v21 = a4;
      }
      else {
        int v21 = v19 - a3;
      }
      *(_DWORD *)(a2 + 724) = v21;
      unsigned int v17 = v21 + a3;
      unsigned int v22 = *(_DWORD *)(a1 + 18880);
      if (v18 <= v22) {
        unsigned int v23 = HIDWORD(a4);
      }
      else {
        unsigned int v23 = v22 - HIDWORD(a3);
      }
      *(_DWORD *)(a2 + 728) = v23;
      unsigned int v18 = v23 + HIDWORD(a3);
    }
  }
  if (v17 > *v15)
  {
    if (sub_D1C38(3u, 4))
    {
      int v24 = sub_D1C7C(3u);
      __uint64_t v25 = sub_DDEFC();
      int v26 = (const char *)sub_D1CB0(4);
      if (v24)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERR: x(%d) + width(%d) > buffer stride(%u)\n", v25, 3, v26, "AVE_GetTileInfo", 11482, "stride <= encoderPrivateStorage->VideoParamsDriver.pixelBuffer.Stride", v4, v14, *v15);
        __uint64_t v27 = sub_DDEFC();
        sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERR: x(%d) + width(%d) > buffer stride(%u)", v27, 3);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERR: x(%d) + width(%d) > buffer stride(%u)", v25, 3);
      }
    }
    return 4294954394;
  }
  if (v18 > *(_DWORD *)(a1 + 18880))
  {
    if (sub_D1C38(3u, 4))
    {
      int v28 = sub_D1C7C(3u);
      __uint64_t v29 = sub_DDEFC();
      __uint64_t v30 = (const char *)sub_D1CB0(4);
      if (v28)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERR: y(%d) + height(%d) > buffer height (%u)\n", v29, 3, v30, "AVE_GetTileInfo", 11487, "height <= encoderPrivateStorage->VideoParamsDriver.pixelBuffer.Height", v5, v16, v15[2]);
        __uint64_t v29 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERR: y(%d) + height(%d) > buffer height (%u)", v29, 3);
    }
    return 4294954394;
  }
  uint64_t result = 0;
  *(void *)(a2 + 708) = a3;
  return result;
}

BOOL sub_4A52C(__CFDictionary *a1, const void *a2, const void *a3, int a4)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  __uint64_t v9 = Mutable;
  if (Mutable)
  {
    CFDictionarySetValue(Mutable, kVTPropertyTypeKey, a2);
    __uint64_t v10 = (const void **)&kVTPropertyReadWriteStatus_ReadWrite;
    if (a4) {
      __uint64_t v10 = (const void **)&kVTPropertyReadWriteStatus_ReadOnly;
    }
    CFDictionarySetValue(v9, kVTPropertyReadWriteStatusKey, *v10);
    CFDictionarySetValue(v9, kVTPropertyShouldBeSerializedKey, kCFBooleanFalse);
    CFDictionarySetValue(a1, a3, v9);
    CFRelease(v9);
  }
  return v9 != 0;
}

void H264H9EncoderRegister()
{
  int v0 = sub_CEC3C();
  if (!v0)
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      int v2 = Mutable;
      CFDictionaryAddValue(Mutable, kVTVideoEncoder_IsHardwareAccelerated, kCFBooleanTrue);
      CFDictionaryAddValue(v2, @"CMClassImplementationID", @"com.apple.videotoolbox.videoencoder.h264");
      int v0 = VTRegisterVideoEncoderWithInfo();
      CFRelease(v2);
    }
    else
    {
      int v0 = 0;
    }
  }
  if (sub_D1C38(2u, 5))
  {
    int v3 = sub_D1C7C(2u);
    __uint64_t v4 = sub_DDEFC();
    unint64_t v5 = (const char *)sub_D1CB0(5);
    if (v3)
    {
      printf("%lld %d AVE %s: Register AVC video encoder of AVE %d\n", v4, 2, v5, v0);
      __uint64_t v6 = sub_DDEFC();
      int v7 = (const char *)sub_D1CB0(5);
      syslog(3, "%lld %d AVE %s: Register AVC video encoder of AVE %d", v6, 2, v7, v0);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Register AVC video encoder of AVE %d", v4, 2, v5, v0);
    }
  }
}

uint64_t sub_4A764(unsigned int *a1, uint64_t a2, uint64_t a3, _DWORD *a4, int a5)
{
  if (!a1)
  {
    if (sub_D1C38(3u, 4))
    {
      int v11 = sub_D1C7C(3u);
      __uint64_t v12 = sub_DDEFC();
      unsigned int v13 = (const char *)sub_D1CB0(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: in NULL\n", v12, 3, v13, "CopySPSPPSHeader", 185, "in != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: in NULL");
    }
    goto LABEL_61;
  }
  if (!a2)
  {
    if (sub_D1C38(3u, 4))
    {
      int v14 = sub_D1C7C(3u);
      __uint64_t v15 = sub_DDEFC();
      unint64_t v16 = (const char *)sub_D1CB0(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: out NULL\n", v15, 3, v16, "CopySPSPPSHeader", 186, "out != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: out NULL");
    }
    goto LABEL_61;
  }
  uint64_t v5 = a3;
  if (a3)
  {
    int v66 = 0;
    v65[0] = (int32x2_t)(bswap32(*a1) | 0x2000000000);
    v65[1] = (int32x2_t)(a1 + 1);
    v64[1] = a2;
    v64[0] = 0x2000000000;
    v64[2] = 0xFFFFFFFF00000000;
    if (sub_D1C38(0xDDu, 7))
    {
      int v7 = sub_D1C7C(0xDDu);
      __uint64_t v8 = sub_DDEFC();
      __uint64_t v9 = (const char *)sub_D1CB0(7);
      if (v7)
      {
        printf("%lld %d AVE %s: H264 - CopySPSPPSHeader: buffsize %d\n", v8, 221, v9, v5);
        __uint64_t v10 = sub_DDEFC();
        CFNumberRef v57 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: buffsize %d", v10, 221, v57, v5);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: buffsize %d", v8, 221, v9, v5);
      }
    }
    unsigned int v21 = 0;
    int v22 = 0;
    int v23 = 0;
    uint64_t v63 = v5;
    unsigned int v24 = 1;
    do
    {
      unsigned int v25 = sub_4AF78(v65);
      int v26 = v23 + 1;
      sub_4B28C((int *)v64, v25, 8u);
      int v22 = v25 | (v22 << 8);
      if (sub_D1C38(0xDDu, 7))
      {
        int v27 = sub_D1C7C(0xDDu);
        __uint64_t v28 = sub_DDEFC();
        __uint64_t v29 = (const char *)sub_D1CB0(7);
        if (v27)
        {
          printf("%lld %d AVE %s: H264 - CopySPSPPSHeader: startcode %x startcodeCount %d bytesRead %d temp %x\n", v28, 221, v29, v22, v21, v23 + 1, v25);
          __uint64_t v30 = sub_DDEFC();
          __uint64_t v59 = (const char *)sub_D1CB0(7);
          syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: startcode %x startcodeCount %d bytesRead %d temp %x", v30, 221, v59, v22, v21, v23 + 1, v25);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: startcode %x startcodeCount %d bytesRead %d temp %x", v28, 221, v29, v22, v21, v23 + 1, v25);
        }
        uint64_t v5 = v63;
      }
      if (v22 == 1)
      {
        if (v21 == 1) {
          a4[1] = v23 - 3;
        }
        if (v21 == v24 + 1)
        {
          int v31 = v23 - 3;
          a4[v21] = v23 - 3;
          if (v24)
          {
            int v32 = a4 + 1;
            uint64_t v33 = v24;
            do
            {
              int v34 = *v32++;
              v31 -= v34;
              a4[v21] = v31;
              --v33;
            }
            while (v33);
          }
          unsigned int v24 = v21;
        }
        if (sub_D1C38(0xDDu, 7))
        {
          int v35 = sub_D1C7C(0xDDu);
          __uint64_t v36 = sub_DDEFC();
          int v37 = (const char *)sub_D1CB0(7);
          if (v35)
          {
            printf("%lld %d AVE %s: H264 - CopySPSPPSHeader: startcode %x = H264VIDEOENCODER_STARTCODE startcodeCount %d bytesRead %d expectedPPSs %d\n", v36, 221, v37, 1, v21 + 1, v23 + 1, v24);
            __uint64_t v38 = sub_DDEFC();
            int v60 = (const char *)sub_D1CB0(7);
            syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: startcode %x = H264VIDEOENCODER_STARTCODE startcodeCount %d bytesRead %d expectedPPSs %d", v38, 221, v60, 1, v21 + 1, v26, v24);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: startcode %x = H264VIDEOENCODER_STARTCODE startcodeCount %d bytesRead %d expectedPPSs %d", v36, 221, v37, 1, v21 + 1, v23 + 1, v24);
          }
          ++v21;
          uint64_t v5 = v63;
        }
        else
        {
          ++v21;
        }
      }
      ++v23;
    }
    while (v26 != v5);
    if (v21 == v24 + 1)
    {
      a4[v21] = v5;
      if (v24)
      {
        BOOL v39 = a4 + 1;
        int v40 = v5;
        uint64_t v41 = v24;
        do
        {
          int v42 = *v39++;
          v40 -= v42;
          a4[v21] = v40;
          --v41;
        }
        while (v41);
      }
      if (v24 == a5)
      {
        sub_4B4EC((uint64_t)v64);
        if (sub_D1C38(0xDDu, 7))
        {
          int v43 = sub_D1C7C(0xDDu);
          __uint64_t v44 = sub_DDEFC();
          int v45 = (const char *)sub_D1CB0(7);
          if (v43)
          {
            printf("%lld %d AVE %s: H264 - CopySPSPPSHeader: SPSPPSSizes[VPS] %d, SPSPPSSizes[SPS] %d, SPSPPSSizes[PPS1] %d, SPSPPSSizes[PPS2] %d\n", v44, 221, v45, *a4, a4[1], a4[2], a4[3]);
            __uint64_t v44 = sub_DDEFC();
            sub_D1CB0(7);
          }
          syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: SPSPPSSizes[VPS] %d, SPSPPSSizes[SPS] %d, SPSPPSSizes[PPS1] %d, SPSPPSSizes[PPS2] %d", v44);
        }
        goto LABEL_62;
      }
      if (sub_D1C38(3u, 4))
      {
        int v49 = sub_D1C7C(3u);
        __uint64_t v50 = sub_DDEFC();
        BOOL v51 = (const char *)sub_D1CB0(4);
        if (v49)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: expectedPPSs == %d, i32PPSsCFIndex Count = %d\n", v50, 3, v51, "CopySPSPPSHeader", 245, "(expectedPPSs == i32PPSsCount)", v21, a5);
          __uint64_t v50 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: expectedPPSs == %d, i32PPSsCFIndex Count = %d", v50);
      }
    }
    else if (sub_D1C38(3u, 4))
    {
      int v46 = sub_D1C7C(3u);
      __uint64_t v47 = sub_DDEFC();
      int v48 = (const char *)sub_D1CB0(4);
      if (v46)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: startCodeCount == %d\n", v47, 3, v48, "CopySPSPPSHeader", 237, "(startCodeCount == expectedStartCodes)", v21);
        __uint64_t v47 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: startCodeCount == %d", v47);
    }
LABEL_61:
    uint64_t v5 = 0;
LABEL_62:
    if (sub_D1C38(0xDDu, 7))
    {
      int v52 = sub_D1C7C(0xDDu);
      __uint64_t v53 = sub_DDEFC();
      int v54 = (const char *)sub_D1CB0(7);
      if (v52)
      {
        printf("%lld %d AVE %s: H264 - CopySPSPPSHeader: return bytesRead %d\n", v53, 221, v54, v5);
        __uint64_t v55 = sub_DDEFC();
        __uint64_t v61 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: return bytesRead %d", v55, 221, v61, v5);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: return bytesRead %d", v53, 221, v54, v5);
      }
    }
    return v5;
  }
  if (sub_D1C38(0xDDu, 4))
  {
    int v17 = sub_D1C7C(0xDDu);
    __uint64_t v18 = sub_DDEFC();
    unsigned int v19 = (const char *)sub_D1CB0(4);
    if (v17)
    {
      printf("%lld %d AVE %s: H264 ERROR - CopySPSPPSHeader: buffsize %d\n", v18, 221, v19, 0);
      __uint64_t v20 = sub_DDEFC();
      int v58 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: H264 ERROR - CopySPSPPSHeader: buffsize %d", v20, 221, v58, 0);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264 ERROR - CopySPSPPSHeader: buffsize %d", v18, 221, v19, 0);
    }
  }
  return 0;
}

uint64_t sub_4AF78(int32x2_t *a1)
{
  if (sub_D1C38(0xDDu, 8))
  {
    int v2 = sub_D1C7C(0xDDu);
    __uint64_t v3 = sub_DDEFC();
    __uint64_t v4 = (const char *)sub_D1CB0(8);
    if (v2)
    {
      printf("%lld %d AVE %s: flushBitstream: bits = %d bitstream->bits %d\n", v3, 221, v4, 8, a1->i32[1]);
      __uint64_t v3 = sub_DDEFC();
      __uint64_t v4 = (const char *)sub_D1CB0(8);
    }
    syslog(3, "%lld %d AVE %s: flushBitstream: bits = %d bitstream->bits %d", v3, 221, v4, 8, a1->i32[1]);
  }
  unsigned int v5 = a1->u32[1];
  if (v5 < 9)
  {
    uint64_t v12 = (unsigned __int32)a1->i32[0] >> -(char)v5 << (8 - v5);
    if (sub_D1C38(0xDDu, 8))
    {
      int v13 = sub_D1C7C(0xDDu);
      __uint64_t v14 = sub_DDEFC();
      __uint64_t v15 = (const char *)sub_D1CB0(8);
      if (v13)
      {
        printf("%lld %d AVE %s: flushBitstream: new_bits %x result %x\n", v14, 221, v15, 8 - v5, v12);
        __uint64_t v16 = sub_DDEFC();
        __uint64_t v28 = (const char *)sub_D1CB0(8);
        syslog(3, "%lld %d AVE %s: flushBitstream: new_bits %x result %x", v16, 221, v28, 8 - v5, v12);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: flushBitstream: new_bits %x result %x", v14, 221, v15, 8 - v5, v12);
      }
    }
    unsigned int v25 = (unsigned int *)a1[1];
    unsigned int v26 = bswap32(*v25);
    a1[1] = (int32x2_t)(v25 + 1);
    a1->i32[0] = v26;
    a1->i32[1] = 32;
    uint64_t v18 = v12;
    if (v5 != 8)
    {
      uint64_t v18 = (v26 >> (v5 + 24)) | v12;
      a1->i32[0] = v26 << (8 - v5);
      a1->i32[1] = v5 + 24;
    }
  }
  else
  {
    if (sub_D1C38(0xDDu, 8))
    {
      int v6 = sub_D1C7C(0xDDu);
      __uint64_t v7 = sub_DDEFC();
      __uint64_t v8 = (const char *)sub_D1CB0(8);
      __int32 v9 = a1->i32[1];
      if (v6)
      {
        printf("%lld %d AVE %s: flushBitstream: bitstream->data %x bitstream->bits %d\n", v7, 221, v8, a1->i32[0], v9);
        __uint64_t v10 = sub_DDEFC();
        int v11 = (const char *)sub_D1CB0(8);
        syslog(3, "%lld %d AVE %s: flushBitstream: bitstream->data %x bitstream->bits %d", v10, 221, v11, a1->i32[0], a1->i32[1]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: flushBitstream: bitstream->data %x bitstream->bits %d", v7, 221, v8, a1->i32[0], v9);
      }
    }
    v17.i32[0] = vshl_n_s32(*a1, 8uLL).u32[0];
    uint64_t v18 = HIBYTE(a1->u32[0]);
    v17.i32[1] = vadd_s32(*a1, (int32x2_t)0x700000007).i32[1];
    *a1 = v17;
    if (sub_D1C38(0xDDu, 8))
    {
      int v19 = sub_D1C7C(0xDDu);
      __uint64_t v20 = sub_DDEFC();
      unsigned int v21 = (const char *)sub_D1CB0(8);
      __int32 v22 = a1->i32[1];
      if (v19)
      {
        printf("%lld %d AVE %s: flushBitstream: result %x bitstream->data %x bitstream->bits %d\n", v20, 221, v21, v18, a1->i32[0], v22);
        __uint64_t v23 = sub_DDEFC();
        unsigned int v24 = (const char *)sub_D1CB0(8);
        syslog(3, "%lld %d AVE %s: flushBitstream: result %x bitstream->data %x bitstream->bits %d", v23, 221, v24, v18, a1->i32[0], a1->i32[1]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: flushBitstream: result %x bitstream->data %x bitstream->bits %d", v20, 221, v21, v18, a1->i32[0], v22);
      }
    }
  }
  a1[2].i32[0] += 8;
  return v18;
}

void sub_4B28C(int *a1, unsigned int a2, unsigned int a3)
{
  if (sub_D1C38(0xDDu, 8))
  {
    int v6 = sub_D1C7C(0xDDu);
    __uint64_t v7 = sub_DDEFC();
    __uint64_t v8 = (const char *)sub_D1CB0(8);
    if (v6)
    {
      printf("%lld %d AVE %s: H2HeaderParser: write requested = %u bits %u\n", v7, 221, v8, a2, a3);
      __uint64_t v9 = sub_DDEFC();
      unsigned int v24 = (const char *)sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: H2HeaderParser: write requested = %u bits %u", v9, 221, v24, a2, a3);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H2HeaderParser: write requested = %u bits %u", v7, 221, v8, a2, a3);
    }
  }
  unsigned int v10 = a1[1];
  unsigned int v11 = v10 - a3;
  if (v10 <= a3)
  {
    unsigned int v12 = a3 - v10;
    *a1 = (*a1 << v10) | (a2 >> (a3 - v10));
    if (sub_D1C38(0xDDu, 8))
    {
      int v13 = sub_D1C7C(0xDDu);
      __uint64_t v14 = sub_DDEFC();
      __uint64_t v15 = (const char *)sub_D1CB0(8);
      int v16 = *a1;
      if (v13)
      {
        printf("%lld %d AVE %s: H2HeaderParser: write data = 0x%08x\n", v14, 221, v15, v16);
        __uint64_t v17 = sub_DDEFC();
        unsigned int v25 = (const char *)sub_D1CB0(8);
        syslog(3, "%lld %d AVE %s: H2HeaderParser: write data = 0x%08x", v17, 221, v25, *a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H2HeaderParser: write data = 0x%08x", v14, 221, v15, v16);
      }
    }
    uint64_t v18 = (_DWORD *)*((void *)a1 + 1);
    _DWORD *v18 = bswap32(*a1);
    *((void *)a1 + 1) = v18 + 1;
    *a1 = a2 & ~(-1 << v12);
    unsigned int v11 = 32 - v12;
  }
  else
  {
    *a1 = (*a1 << a3) | a2;
  }
  a1[1] = v11;
  a1[4] += a3;
  if (sub_D1C38(0xDDu, 8))
  {
    int v19 = sub_D1C7C(0xDDu);
    __uint64_t v20 = sub_DDEFC();
    unsigned int v21 = (const char *)sub_D1CB0(8);
    int v22 = a1[4];
    if (v19)
    {
      printf("%lld %d AVE %s: bitstream->total_bits = %u\n", v20, 221, v21, v22);
      __uint64_t v23 = sub_DDEFC();
      unsigned int v26 = (const char *)sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: bitstream->total_bits = %u", v23, 221, v26, a1[4]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: bitstream->total_bits = %u", v20, 221, v21, v22);
    }
  }
}

void sub_4B4EC(uint64_t a1)
{
  while ((*(unsigned char *)(a1 + 16) & 0x1F) != 0)
    sub_4B28C((int *)a1, 0, 1u);
}

uint64_t sub_4B534(unsigned int *a1, uint64_t a2, uint64_t a3, _DWORD *a4, int a5, int a6)
{
  if (!a1)
  {
    if (sub_D1C38(3u, 4))
    {
      int v12 = sub_D1C7C(3u);
      __uint64_t v13 = sub_DDEFC();
      __uint64_t v14 = (const char *)sub_D1CB0(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: in NULL\n", v13, 3, v14, "CopyVPSSPSPPSHeader", 270, "in != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: in NULL");
    }
    goto LABEL_49;
  }
  if (!a2)
  {
    if (sub_D1C38(3u, 4))
    {
      int v15 = sub_D1C7C(3u);
      __uint64_t v16 = sub_DDEFC();
      __uint64_t v17 = (const char *)sub_D1CB0(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: out NULL\n", v16, 3, v17, "CopyVPSSPSPPSHeader", 271, "out != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: out NULL");
    }
    goto LABEL_49;
  }
  uint64_t v6 = a3;
  if (a3)
  {
    int v74 = 0;
    v73[0] = (int32x2_t)(bswap32(*a1) | 0x2000000000);
    v73[1] = (int32x2_t)(a1 + 1);
    v72[1] = a2;
    v72[0] = 0x2000000000;
    v72[2] = 0xFFFFFFFF00000000;
    if (sub_D1C38(0xDDu, 7))
    {
      int v8 = sub_D1C7C(0xDDu);
      __uint64_t v9 = sub_DDEFC();
      unsigned int v10 = (const char *)sub_D1CB0(7);
      if (v8)
      {
        printf("%lld %d AVE %s: H264 - CopySPSPPSHeader: buffsize %d\n", v9, 221, v10, v6);
        __uint64_t v11 = sub_DDEFC();
        int v62 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: buffsize %d", v11, 221, v62, v6);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: buffsize %d", v9, 221, v10, v6);
      }
    }
    uint64_t v22 = 0;
    int v23 = 0;
    int v24 = 0;
    char v69 = a4 + 1;
    uint64_t v25 = 1;
    unsigned int v71 = a4;
    do
    {
      unsigned int v26 = sub_4AF78(v73);
      int v27 = v24 + 1;
      sub_4B28C((int *)v72, v26, 8u);
      int v23 = v26 | (v23 << 8);
      if (sub_D1C38(0xDDu, 7))
      {
        int v28 = v23;
        uint64_t v29 = v22;
        uint64_t v30 = v25;
        uint64_t v31 = v6;
        int v32 = sub_D1C7C(0xDDu);
        __uint64_t v33 = sub_DDEFC();
        int v34 = (const char *)sub_D1CB0(7);
        if (v32)
        {
          printf("%lld %d AVE %s: H264 - CopyVPSSPSPPSHeader: startcode %x startcodeCount %d bytesRead %d temp %x\n", v33, 221, v34, v28, v29, v24 + 1, v26);
          __uint64_t v35 = sub_DDEFC();
          __uint64_t v36 = (const char *)sub_D1CB0(7);
          uint64_t v6 = a3;
          syslog(3, "%lld %d AVE %s: H264 - CopyVPSSPSPPSHeader: startcode %x startcodeCount %d bytesRead %d temp %x", v35, 221, v36, v28, v29, v24 + 1, v26);
          uint64_t v25 = v30;
          uint64_t v22 = v29;
          int v23 = v28;
        }
        else
        {
          uint64_t v37 = v29;
          int v66 = v29;
          int v23 = v28;
          syslog(3, "%lld %d AVE %s: H264 - CopyVPSSPSPPSHeader: startcode %x startcodeCount %d bytesRead %d temp %x", v33, 221, v34, v28, v66, v24 + 1, v26);
          uint64_t v6 = v31;
          uint64_t v25 = v30;
          uint64_t v22 = v37;
        }
        a4 = v71;
      }
      if (v23 == 1)
      {
        if (v22 == 2)
        {
          a4[1] = v24 - *a4 - 3;
        }
        else if (v22 == 1)
        {
          *a4 = v24 - 3;
        }
        if (v22 == v25 + 2)
        {
          int v38 = v24 - *a4 - 3;
          uint64_t v39 = (v25 + 1);
          a4[v39] = v38;
          if (v25)
          {
            uint64_t v40 = v25;
            uint64_t v41 = v69;
            do
            {
              int v42 = *v41++;
              v38 -= v42;
              a4[v39] = v38;
              --v40;
            }
            while (v40);
            uint64_t v25 = (v25 + 1);
          }
          else
          {
            uint64_t v25 = 1;
          }
        }
        uint64_t v22 = (v22 + 1);
        if (sub_D1C38(0xDDu, 7))
        {
          int v43 = sub_D1C7C(0xDDu);
          __uint64_t v44 = sub_DDEFC();
          int v45 = (const char *)sub_D1CB0(7);
          if (v43)
          {
            printf("%lld %d AVE %s: H264 - CopyVPSSPSPPSHeader: startcode %x = H264VIDEOENCODER_STARTCODE startcodeCount %d bytesRead %d expectedPPSs %d\n", v44, 221, v45, 1, v22, v24 + 1, v25);
            __uint64_t v46 = sub_DDEFC();
            __uint64_t v64 = (const char *)sub_D1CB0(7);
            a4 = v71;
            syslog(3, "%lld %d AVE %s: H264 - CopyVPSSPSPPSHeader: startcode %x = H264VIDEOENCODER_STARTCODE startcodeCount %d bytesRead %d expectedPPSs %d", v46, 221, v64, 1, v22, v27, v25);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264 - CopyVPSSPSPPSHeader: startcode %x = H264VIDEOENCODER_STARTCODE startcodeCount %d bytesRead %d expectedPPSs %d", v44, 221, v45, 1, v22, v24 + 1, v25);
          }
        }
      }
      ++v24;
    }
    while (v27 != v6);
    int v47 = a6 + 2 * a5;
    if (v22 == v47)
    {
      int v48 = v6 - *a4;
      uint64_t v49 = (v25 + 1);
      a4[v49] = v48;
      if (v25)
      {
        uint64_t v50 = v25;
        BOOL v51 = a4 + 1;
        do
        {
          int v52 = *v51++;
          v48 -= v52;
          a4[v49] = v48;
          --v50;
        }
        while (v50);
      }
      sub_4B4EC((uint64_t)v72);
      goto LABEL_50;
    }
    if (sub_D1C38(3u, 4))
    {
      int v53 = sub_D1C7C(3u);
      __uint64_t v54 = sub_DDEFC();
      __uint64_t v55 = (const char *)sub_D1CB0(4);
      if (v53)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - CopyVPSSPSPPSHeader ERROR: %d startCodeCount == %d\n", v54, 3, v55, "CopyVPSSPSPPSHeader", 327, "(startCodeCount == expectedStartCodes)", v47, v22);
        __uint64_t v56 = sub_DDEFC();
        sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopyVPSSPSPPSHeader ERROR: %d startCodeCount == %d", v56);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopyVPSSPSPPSHeader ERROR: %d startCodeCount == %d", v54);
      }
    }
LABEL_49:
    uint64_t v6 = 0;
LABEL_50:
    if (sub_D1C38(0xDDu, 7))
    {
      int v57 = sub_D1C7C(0xDDu);
      __uint64_t v58 = sub_DDEFC();
      __uint64_t v59 = (const char *)sub_D1CB0(7);
      if (v57)
      {
        printf("%lld %d AVE %s: H264 - CopySPSPPSHeader: return bytesRead %d\n", v58, 221, v59, v6);
        __uint64_t v60 = sub_DDEFC();
        CFNumberRef v65 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: return bytesRead %d", v60, 221, v65, v6);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: return bytesRead %d", v58, 221, v59, v6);
      }
    }
    return v6;
  }
  if (sub_D1C38(0xDDu, 4))
  {
    int v18 = sub_D1C7C(0xDDu);
    __uint64_t v19 = sub_DDEFC();
    __uint64_t v20 = (const char *)sub_D1CB0(4);
    if (v18)
    {
      printf("%lld %d AVE %s: H264 ERROR - CopySPSPPSHeader: buffsize %d\n", v19, 221, v20, 0);
      __uint64_t v21 = sub_DDEFC();
      uint64_t v63 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: H264 ERROR - CopySPSPPSHeader: buffsize %d", v21, 221, v63, 0);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264 ERROR - CopySPSPPSHeader: buffsize %d", v19, 221, v20, 0);
    }
  }
  return 0;
}

uint64_t sub_4BC70(_DWORD *a1, uint64_t a2, char *a3, unsigned int a4, uint64_t a5, int a6, int *a7)
{
  if (sub_D1C38(0xDDu, 7))
  {
    int v14 = sub_D1C7C(0xDDu);
    __uint64_t v15 = sub_DDEFC();
    __uint64_t v16 = (const char *)sub_D1CB0(7);
    if (v14)
    {
      printf("%lld %d AVE %s: \nAddSEIDebugMetadata: ENTER WITH useEPB = %d\n", v15, 221, v16, a6);
      __uint64_t v17 = sub_DDEFC();
      uint64_t v117 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: \nAddSEIDebugMetadata: ENTER WITH useEPB = %d", v17, 221, v117, a6);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: \nAddSEIDebugMetadata: ENTER WITH useEPB = %d", v15, 221, v16, a6);
    }
  }
  if (sub_D1C38(0xDDu, 7))
  {
    int v18 = sub_D1C7C(0xDDu);
    __uint64_t v19 = sub_DDEFC();
    __uint64_t v20 = (const char *)sub_D1CB0(7);
    if (v18)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: frame = %d - SEI size %d\n", v19, 221, v20, *(_DWORD *)(a5 + 160), a4);
      __uint64_t v19 = sub_DDEFC();
      __uint64_t v20 = (const char *)sub_D1CB0(7);
    }
    syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: frame = %d - SEI size %d", v19, 221, v20, *(_DWORD *)(a5 + 160), a4);
  }
  if (!a1)
  {
    if (sub_D1C38(3u, 4))
    {
      int v26 = sub_D1C7C(3u);
      __uint64_t v27 = sub_DDEFC();
      int v28 = (const char *)sub_D1CB0(4);
      if (v26)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: input buffer NULL. FAIL\n", v27, 3, v28, "AddSEIDebugMetadata", 459, "in != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: input buffer NULL. FAIL");
    }
    return 4294966293;
  }
  if (!a3)
  {
    if (sub_D1C38(3u, 4))
    {
      int v29 = sub_D1C7C(3u);
      __uint64_t v30 = sub_DDEFC();
      uint64_t v31 = (const char *)sub_D1CB0(4);
      if (v29)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: SEIData buffer NULL. FAIL\n", v30, 3, v31, "AddSEIDebugMetadata", 461, "SEIData != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: SEIData buffer NULL. FAIL");
    }
    return 4294966293;
  }
  if (!a5)
  {
    if (sub_D1C38(3u, 4))
    {
      int v32 = sub_D1C7C(3u);
      __uint64_t v33 = sub_DDEFC();
      int v34 = (const char *)sub_D1CB0(4);
      if (v32)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: Frame NULL. FAIL\n", v33, 3, v34, "AddSEIDebugMetadata", 463, "Frame != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: Frame NULL. FAIL");
    }
    return 4294966293;
  }
  BOOL v21 = sub_D1C38(0xDDu, 7);
  if (a6)
  {
    if (v21)
    {
      int v22 = sub_D1C7C(0xDDu);
      __uint64_t v23 = sub_DDEFC();
      int v24 = (const char *)sub_D1CB0(7);
      if (v22)
      {
        printf("%lld %d AVE %s: WILL DO EPB\n", v23, 221, v24);
        __uint64_t v25 = sub_DDEFC();
        int v118 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: WILL DO EPB", v25, 221, v118);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: WILL DO EPB", v23, 221, v24);
      }
    }
    uint64_t v41 = (char *)malloc_type_malloc(a4 + (a4 >> 1), 0x510880CFuLL);
    a4 = sub_4CB28(a3, a4, v41);
    a3 = v41;
  }
  else if (v21)
  {
    int v35 = sub_D1C7C(0xDDu);
    __uint64_t v36 = sub_DDEFC();
    uint64_t v37 = (const char *)sub_D1CB0(7);
    if (v35)
    {
      printf("%lld %d AVE %s: WILL NOT DO EPB\n", v36, 221, v37);
      __uint64_t v38 = sub_DDEFC();
      __uint64_t v119 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: WILL NOT DO EPB", v38, 221, v119);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: WILL NOT DO EPB", v36, 221, v37);
    }
  }
  if (sub_D1C38(0xDDu, 7))
  {
    int v42 = sub_D1C7C(0xDDu);
    __uint64_t v43 = sub_DDEFC();
    __uint64_t v44 = (const char *)sub_D1CB0(7);
    if (v42)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: payloadSize EPB %d\n", v43, 221, v44, a4);
      __uint64_t v45 = sub_DDEFC();
      CMTimeEpoch v120 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadSize EPB %d", v45, 221, v120, a4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadSize EPB %d", v43, 221, v44, a4);
    }
  }
  if (sub_D1C38(0xDDu, 7))
  {
    int v46 = sub_D1C7C(0xDDu);
    __uint64_t v47 = sub_DDEFC();
    int v48 = (const char *)sub_D1CB0(7);
    if (v46)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: payloadSize UUID %d\n", v47, 221, v48, a4 + 16);
      __uint64_t v49 = sub_DDEFC();
      int v121 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadSize UUID %d", v49, 221, v121, a4 + 16);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadSize UUID %d", v47, 221, v48, a4 + 16);
    }
  }
  unsigned int v50 = a4 + 20;
  if (sub_D1C38(0xDDu, 7))
  {
    int v51 = sub_D1C7C(0xDDu);
    __uint64_t v52 = sub_DDEFC();
    int v53 = (const char *)sub_D1CB0(7);
    if (v51)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: payloadSize meta %d\n", v52, 221, v53, a4 + 20);
      __uint64_t v54 = sub_DDEFC();
      __uint64_t v122 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadSize meta %d", v54, 221, v122, a4 + 20);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadSize meta %d", v52, 221, v53, a4 + 20);
    }
  }
  __uint64_t v134 = a7;
  *a1 = 0x1000000;
  if (sub_D1C38(0xDDu, 7))
  {
    int v55 = sub_D1C7C(0xDDu);
    __uint64_t v56 = sub_DDEFC();
    int v57 = (const char *)sub_D1CB0(7);
    if (v55)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: start code blockBufferData %p (%ld)\n", v56, 221, v57, a1 + 1, 4);
      __uint64_t v58 = sub_DDEFC();
      CFDataRef v123 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: start code blockBufferData %p (%ld)", v58, 221, v123, a1 + 1, 4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: start code blockBufferData %p (%ld)", v56, 221, v57, a1 + 1, 4);
    }
  }
  int v59 = *(_DWORD *)(a2 + 120);
  if (v59 == 1)
  {
    *((_WORD *)a1 + 2) = 334;
    uint64_t v60 = 6;
  }
  else
  {
    if (v59)
    {
      if (sub_D1C38(3u, 4))
      {
        int v66 = sub_D1C7C(3u);
        __uint64_t v67 = sub_DDEFC();
        int v68 = (const char *)sub_D1CB0(4);
        if (v66)
        {
          printf("%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL\n", v67, 3, v68, "AddSEIDebugMetadata", 516, "false");
          __uint64_t v69 = sub_DDEFC();
          int v125 = (const char *)sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL", v69, 3, v125, "AddSEIDebugMetadata", 516, "false");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL", v67, 3, v68, "AddSEIDebugMetadata", 516, "false");
        }
      }
      uint64_t v39 = 4294966295;
      if (a3) {
        goto LABEL_113;
      }
      return v39;
    }
    *((unsigned char *)a1 + 4) = 6;
    uint64_t v60 = 5;
  }
  __uint64_t v61 = (char *)a1 + v60;
  if (sub_D1C38(0xDDu, 7))
  {
    int v62 = sub_D1C7C(0xDDu);
    __uint64_t v63 = sub_DDEFC();
    __uint64_t v64 = (const char *)sub_D1CB0(7);
    if (v62)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: nal_unit_type blockBufferData %p (%ld)\n", v63, 221, v64, (char *)a1 + v60, v60);
      __uint64_t v65 = sub_DDEFC();
      CFNumberRef v124 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: nal_unit_type blockBufferData %p (%ld)", v65, 221, v124, (char *)a1 + v60, v60);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: nal_unit_type blockBufferData %p (%ld)", v63, 221, v64, (char *)a1 + v60, v60);
    }
  }
  *__uint64_t v61 = 5;
  uint64_t v70 = (uint64_t)(v61 + 1);
  if (sub_D1C38(0xDDu, 7))
  {
    int v71 = sub_D1C7C(0xDDu);
    __uint64_t v72 = sub_DDEFC();
    __uint64_t v73 = (const char *)sub_D1CB0(7);
    if (v71)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: payloadType blockBufferData %p (%ld)\n", v72, 221, v73, (const void *)v70, v70 - (void)a1);
      __uint64_t v74 = sub_DDEFC();
      int v126 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadType blockBufferData %p (%ld)", v74, 221, v126, (const void *)v70, v70 - (void)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadType blockBufferData %p (%ld)", v72, 221, v73, (const void *)v70, v70 - (void)a1);
    }
  }
  if (sub_D1C38(0xDDu, 7))
  {
    int v75 = sub_D1C7C(0xDDu);
    __uint64_t v76 = sub_DDEFC();
    __uint64_t v77 = (const char *)sub_D1CB0(7);
    if (v75)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: start payloadSize sizeTemp %d blockBufferData %p (%ld)\n", v76, 221, v77, a4 + 20, (const void *)v70, v70 - (void)a1);
      __uint64_t v78 = sub_DDEFC();
      __uint64_t v127 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v78, 221, v127, a4 + 20, (const void *)v70, v70 - (void)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v76, 221, v77, a4 + 20, (const void *)v70, v70 - (void)a1);
    }
  }
  if (v50 < 0xFF)
  {
    int v80 = 0;
  }
  else
  {
    unint64_t v79 = (a4 - 235) / 0xFFuLL;
    memset((void *)v70, 255, v79 + 1);
    LOBYTE(v50) = v79 + a4 + 21;
    uint64_t v70 = (uint64_t)a1 + v60 + v79 + 2;
    int v80 = v79 + 1;
  }
  *(unsigned char *)uint64_t v70 = v50;
  uint64_t v81 = v70 + 1;
  if (sub_D1C38(0xDDu, 7))
  {
    int v82 = sub_D1C7C(0xDDu);
    __uint64_t v83 = sub_DDEFC();
    int v84 = (const char *)sub_D1CB0(7);
    int v85 = v80 + 1;
    if (v82)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: end payloadSize bytes %d blockBufferData %p (%ld)\n", v83, 221, v84, v85, (const void *)(v70 + 1), v81 - (void)a1);
      __uint64_t v86 = sub_DDEFC();
      unsigned int v128 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: end payloadSize bytes %d blockBufferData %p (%ld)", v86, 221, v128, v85, (const void *)(v70 + 1), v81 - (void)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: end payloadSize bytes %d blockBufferData %p (%ld)", v83, 221, v84, v85, (const void *)(v70 + 1), v81 - (void)a1);
    }
  }
  *(_OWORD *)(v70 + 1) = xmmword_142E40;
  if (sub_D1C38(0xDDu, 7))
  {
    uint64_t v87 = v70 + 17;
    int v88 = sub_D1C7C(0xDDu);
    __uint64_t v89 = sub_DDEFC();
    __uint64_t v90 = (const char *)sub_D1CB0(7);
    if (v88)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: UUID blockBufferData %p (%ld)\n", v89, 221, v90, (const void *)(v70 + 17), v87 - (void)a1);
      __uint64_t v91 = sub_DDEFC();
      int v129 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: UUID blockBufferData %p (%ld)", v91, 221, v129, (const void *)(v70 + 17), v87 - (void)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: UUID blockBufferData %p (%ld)", v89, 221, v90, (const void *)(v70 + 17), v87 - (void)a1);
    }
  }
  *(_DWORD *)(v70 + 17) = 1635018093;
  unint64_t v92 = (unsigned char *)(v70 + 21);
  if (sub_D1C38(0xDDu, 7))
  {
    int v93 = sub_D1C7C(0xDDu);
    __uint64_t v94 = sub_DDEFC();
    int v95 = (const char *)sub_D1CB0(7);
    int v96 = v92 - a1;
    if (v93)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: meta blockBufferData %p (%ld)\n", v94, 221, v95, v92, v92 - (unsigned char *)a1);
      __uint64_t v97 = sub_DDEFC();
      __uint64_t v130 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: meta blockBufferData %p (%ld)", v97, 221, v130, v92, v92 - (unsigned char *)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: meta blockBufferData %p (%ld)", v94, 221, v95, v92, v92 - (unsigned char *)a1);
    }
  }
  else
  {
    int v96 = v92 - a1;
  }
  if (*v134 < a4 + v96 + 1)
  {
    if (sub_D1C38(0xDDu, 4))
    {
      int v98 = sub_D1C7C(0xDDu);
      __uint64_t v99 = sub_DDEFC();
      double v100 = (const char *)sub_D1CB0(4);
      if (v98)
      {
        printf("%lld %d AVE %s: %s:%d %s | AddSEIDebugMetadata: SEI buffer overflow. pSEISize:%d\n", v99, 221, v100, "AddSEIDebugMetadata", 603, "ret == 0", *v134);
        __uint64_t v99 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AddSEIDebugMetadata: SEI buffer overflow. pSEISize:%d", v99);
    }
    uint64_t v39 = 4294966293;
    if (!a3) {
      return v39;
    }
LABEL_113:
    if (a6) {
      free(a3);
    }
    return v39;
  }
  memcpy(v92, a3, a4);
  CFDictionaryRef v101 = &v92[a4];
  if (sub_D1C38(0xDDu, 7))
  {
    int v102 = sub_D1C7C(0xDDu);
    __uint64_t v103 = sub_DDEFC();
    int v104 = (const char *)sub_D1CB0(7);
    if (v102)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: data blockBufferData %p (%ld)\n", v103, 221, v104, v101, v101 - (unsigned char *)a1);
      __uint64_t v105 = sub_DDEFC();
      int v131 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: data blockBufferData %p (%ld)", v105, 221, v131, v101, v101 - (unsigned char *)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: data blockBufferData %p (%ld)", v103, 221, v104, v101, v101 - (unsigned char *)a1);
    }
  }
  *CFDictionaryRef v101 = 0x80;
  __uint64_t v106 = v101 + 1;
  if (sub_D1C38(0xDDu, 7))
  {
    int v107 = sub_D1C7C(0xDDu);
    __uint64_t v108 = sub_DDEFC();
    CFNumberRef v109 = (const char *)sub_D1CB0(7);
    int64_t v110 = v106 - (unsigned char *)a1;
    if (v107)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: rbsp_trailing_bits blockBufferData %p (%ld)\n", v108, 221, v109, v106, v106 - (unsigned char *)a1);
      __uint64_t v111 = sub_DDEFC();
      __uint64_t v132 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: rbsp_trailing_bits blockBufferData %p (%ld)", v111, 221, v132, v106, v110);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: rbsp_trailing_bits blockBufferData %p (%ld)", v108, 221, v109, v106, v106 - (unsigned char *)a1);
    }
  }
  else
  {
    LODWORD(v110) = v106 - a1;
  }
  *__uint64_t v134 = v110;
  if (sub_D1C38(0xDDu, 7))
  {
    int v112 = sub_D1C7C(0xDDu);
    __uint64_t v113 = sub_DDEFC();
    int v114 = (const char *)sub_D1CB0(7);
    int v115 = *v134;
    if (v112)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: final SEISize %d\n", v113, 221, v114, v115);
      __uint64_t v116 = sub_DDEFC();
      int v133 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: final SEISize %d", v116, 221, v133, *v134);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: final SEISize %d", v113, 221, v114, v115);
    }
  }
  uint64_t v39 = 0;
  if (a3) {
    goto LABEL_113;
  }
  return v39;
}

uint64_t sub_4CB28(char *a1, unsigned int a2, unsigned char *a3)
{
  if (a2 <= 2)
  {
    uint64_t result = sub_D1C38(3u, 4);
    if (!result) {
      return result;
    }
    int v17 = sub_D1C7C(3u);
    __uint64_t v18 = sub_DDEFC();
    __uint64_t v19 = (const char *)sub_D1CB0(4);
    if (v17)
    {
      __uint64_t v20 = "length >= 3";
      int v21 = 378;
LABEL_20:
      printf("%lld %d AVE %s: %s:%d %s | H264 - AddEPB: output buffer NULL. FAIL\n", v18, 3, v19, "AddEPB", v21, v20);
      __uint64_t v23 = sub_DDEFC();
      int v35 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - AddEPB: output buffer NULL. FAIL", v23, 3, v35, "AddEPB", v21, v20);
      return 0;
    }
    __uint64_t v27 = "length >= 3";
    int v28 = 378;
LABEL_34:
    syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - AddEPB: output buffer NULL. FAIL", v18, 3, v19, "AddEPB", v28, v27);
    return 0;
  }
  int v3 = (int)a3;
  if (!a3)
  {
    uint64_t result = sub_D1C38(3u, 4);
    if (!result) {
      return result;
    }
    int v22 = sub_D1C7C(3u);
    __uint64_t v18 = sub_DDEFC();
    __uint64_t v19 = (const char *)sub_D1CB0(4);
    if (v22)
    {
      __uint64_t v20 = "outbuffer != __null";
      int v21 = 379;
      goto LABEL_20;
    }
    __uint64_t v27 = "outbuffer != __null";
    int v28 = 379;
    goto LABEL_34;
  }
  unsigned int v6 = a2 - 3;
  int v37 = (int)a3;
  unsigned int v7 = 0;
  if (a2 == 3)
  {
    unsigned int v10 = a3;
  }
  else
  {
    int v8 = a3;
    do
    {
      int v9 = *(_DWORD *)a1;
      if ((*(_DWORD *)a1 & 0xFCFFFF) != 0)
      {
        ++a1;
        *int v8 = v9;
        ++v7;
        unsigned int v10 = v8 + 1;
      }
      else
      {
        *(_WORD *)int v8 = 0;
        unsigned int v10 = v8 + 3;
        v8[2] = 3;
        a1 += 2;
        v7 += 2;
        if (sub_D1C38(0xDDu, 7))
        {
          int v11 = sub_D1C7C(0xDDu);
          __uint64_t v12 = sub_DDEFC();
          __uint64_t v13 = (const char *)sub_D1CB0(7);
          int v14 = v10 - v3;
          if (v11)
          {
            printf("%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!\n", v12, 221, v13, v14, v7);
            __uint64_t v15 = sub_DDEFC();
            int v34 = (const char *)sub_D1CB0(7);
            syslog(3, "%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!", v15, 221, v34, v14, v7);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!", v12, 221, v13, v14, v7);
          }
          int v3 = v37;
        }
      }
      int v8 = v10;
    }
    while (v7 < v6);
  }
  if (*a1 || a1[1] || (unsigned int v29 = a1[2], v29 > 3))
  {
    unsigned int v24 = a2 - v7;
    if (a2 > v7)
    {
      int v25 = v37;
      do
      {
        char v26 = *a1++;
        *v10++ = v26;
        --v24;
      }
      while (v24);
      return (v10 - v25);
    }
  }
  else
  {
    if (sub_D1C38(0xDDu, 7))
    {
      int v30 = sub_D1C7C(0xDDu);
      __uint64_t v31 = sub_DDEFC();
      int v32 = (const char *)sub_D1CB0(7);
      if (v30)
      {
        printf("%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!\n", v31, 221, v32, v10 - v37, v7);
        __uint64_t v33 = sub_DDEFC();
        __uint64_t v36 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!", v33, 221, v36, v10 - v37, v7);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!", v31, 221, v32, v10 - v37, v7);
      }
    }
    *(_WORD *)unsigned int v10 = 0;
    v10[2] = 3;
    v10[3] = v29;
    LODWORD(v10) = v10 + 4;
  }
  int v25 = v37;
  return (v10 - v25);
}

uint64_t sub_4CE74(_DWORD *a1, uint64_t a2, uint64_t a3, int a4, int *a5)
{
  if (sub_D1C38(0xDDu, 7))
  {
    int v10 = sub_D1C7C(0xDDu);
    __uint64_t v11 = sub_DDEFC();
    __uint64_t v12 = (const char *)sub_D1CB0(7);
    int v13 = *(_DWORD *)(a3 + 160);
    if (v10)
    {
      printf("%lld %d AVE %s: \nAdd Lux SEI: frame = %d - SEI size %d useEPB = %d\n", v11, 221, v12, v13, 0, a4);
      __uint64_t v14 = sub_DDEFC();
      int v93 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: \nAdd Lux SEI: frame = %d - SEI size %d useEPB = %d", v14, 221, v93, *(_DWORD *)(a3 + 160), 0, a4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: \nAdd Lux SEI: frame = %d - SEI size %d useEPB = %d", v11, 221, v12, v13, 0, a4);
    }
  }
  if (!a1)
  {
    if (sub_D1C38(3u, 4))
    {
      int v23 = sub_D1C7C(3u);
      __uint64_t v24 = sub_DDEFC();
      int v25 = (const char *)sub_D1CB0(4);
      if (v23)
      {
        printf("%lld %d AVE %s: %s:%d %s | AddRegisteredITUTT35SEI: input buffer NULL. FAIL\n", v24, 3, v25, "AddRegisteredITUTT35SEI", 650, "in != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AddRegisteredITUTT35SEI: input buffer NULL. FAIL");
    }
    return 4294966293;
  }
  if (!a2)
  {
    if (sub_D1C38(3u, 4))
    {
      int v26 = sub_D1C7C(3u);
      __uint64_t v27 = sub_DDEFC();
      int v28 = (const char *)sub_D1CB0(4);
      if (v26)
      {
        printf("%lld %d AVE %s: %s:%d %s | AddRegisteredITUTT35SEI: video_params_drivers NULL. FAIL\n", v27, 3, v28, "AddRegisteredITUTT35SEI", 652, "video_params_drivers != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AddRegisteredITUTT35SEI: video_params_drivers NULL. FAIL");
    }
    return 4294966293;
  }
  if (!a3)
  {
    if (sub_D1C38(3u, 4))
    {
      int v29 = sub_D1C7C(3u);
      __uint64_t v30 = sub_DDEFC();
      __uint64_t v31 = (const char *)sub_D1CB0(4);
      if (v29)
      {
        printf("%lld %d AVE %s: %s:%d %s | AddRegisteredITUTT35SEI: Frame NULL. FAIL\n", v30, 3, v31, "AddRegisteredITUTT35SEI", 654, "Frame != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AddRegisteredITUTT35SEI: Frame NULL. FAIL");
    }
    return 4294966293;
  }
  __uint64_t v15 = (char *)malloc_type_malloc(9uLL, 0x16A1676CuLL);
  if (v15)
  {
    __uint64_t v16 = v15;
    int v17 = *(_DWORD *)(a3 + 2436);
    *(_DWORD *)__uint64_t v15 = 1441775285;
    v15[4] = -86;
    v15[5] = HIBYTE(v17);
    v15[6] = BYTE2(v17);
    v15[7] = BYTE1(v17);
    v15[8] = v17;
    BOOL v18 = sub_D1C38(0xDDu, 7);
    if (a4)
    {
      if (v18)
      {
        int v19 = sub_D1C7C(0xDDu);
        __uint64_t v20 = sub_DDEFC();
        int v21 = (const char *)sub_D1CB0(7);
        if (v19)
        {
          printf("%lld %d AVE %s: AddSEI: WILL DO EPB\n", v20, 221, v21);
          __uint64_t v22 = sub_DDEFC();
          __uint64_t v94 = (const char *)sub_D1CB0(7);
          syslog(3, "%lld %d AVE %s: AddSEI: WILL DO EPB", v22, 221, v94);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: AddSEI: WILL DO EPB", v20, 221, v21);
        }
      }
      int v42 = malloc_type_malloc(0xDuLL, 0x33439C02uLL);
      unsigned int __n = sub_4CB28(v16, 9u, v42);
    }
    else
    {
      if (v18)
      {
        int v36 = sub_D1C7C(0xDDu);
        __uint64_t v37 = sub_DDEFC();
        __uint64_t v38 = (const char *)sub_D1CB0(7);
        if (v36)
        {
          printf("%lld %d AVE %s: AddSEI: WILL NOT DO EPB\n", v37, 221, v38);
          __uint64_t v39 = sub_DDEFC();
          int v96 = (const char *)sub_D1CB0(7);
          syslog(3, "%lld %d AVE %s: AddSEI: WILL NOT DO EPB", v39, 221, v96);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: AddSEI: WILL NOT DO EPB", v37, 221, v38);
        }
      }
      unsigned int __n = 9;
      int v42 = v16;
    }
    if (sub_D1C38(0xDDu, 7))
    {
      int v43 = sub_D1C7C(0xDDu);
      __uint64_t v44 = sub_DDEFC();
      __uint64_t v45 = (const char *)sub_D1CB0(7);
      if (v43)
      {
        printf("%lld %d AVE %s: AddSEI: payloadSize EPB %d\n", v44, 221, v45, 9);
        __uint64_t v46 = sub_DDEFC();
        __uint64_t v97 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: AddSEI: payloadSize EPB %d", v46, 221, v97, 9);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: payloadSize EPB %d", v44, 221, v45, 9);
      }
    }
    size_t __n_4 = (size_t)v42;
    *a1 = 0x1000000;
    if (sub_D1C38(0xDDu, 7))
    {
      int v47 = sub_D1C7C(0xDDu);
      __uint64_t v48 = sub_DDEFC();
      __uint64_t v49 = (const char *)sub_D1CB0(7);
      if (v47)
      {
        printf("%lld %d AVE %s: AddSEI: start code blockBufferData %p (%ld)\n", v48, 221, v49, a1 + 1, 4);
        __uint64_t v50 = sub_DDEFC();
        int v98 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: AddSEI: start code blockBufferData %p (%ld)", v50, 221, v98, a1 + 1, 4);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: start code blockBufferData %p (%ld)", v48, 221, v49, a1 + 1, 4);
      }
    }
    int v51 = *(_DWORD *)(a2 + 120);
    if (v51 == 1)
    {
      *((_WORD *)a1 + 2) = 334;
      uint64_t v52 = 6;
    }
    else
    {
      if (v51)
      {
        if (sub_D1C38(3u, 4))
        {
          int v58 = sub_D1C7C(3u);
          __uint64_t v59 = sub_DDEFC();
          uint64_t v60 = (const char *)sub_D1CB0(4);
          if (v58)
          {
            printf("%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL\n", v59, 3, v60, "AddRegisteredITUTT35SEI", 750, "false");
            __uint64_t v61 = sub_DDEFC();
            double v100 = (const char *)sub_D1CB0(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL", v61, 3, v100, "AddRegisteredITUTT35SEI", 750, "false");
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL", v59, 3, v60, "AddRegisteredITUTT35SEI", 750, "false");
          }
        }
        uint64_t v40 = 4294966295;
        __uint64_t v72 = v42;
        if (!v42) {
          goto LABEL_89;
        }
LABEL_87:
        if (a4) {
          free(v72);
        }
LABEL_89:
        free(v16);
        return v40;
      }
      *((unsigned char *)a1 + 4) = 6;
      uint64_t v52 = 5;
    }
    int v53 = (char *)a1 + v52;
    if (sub_D1C38(0xDDu, 7))
    {
      int v54 = sub_D1C7C(0xDDu);
      __uint64_t v55 = sub_DDEFC();
      __uint64_t v56 = (const char *)sub_D1CB0(7);
      if (v54)
      {
        printf("%lld %d AVE %s: AddSEI: nal_unit_type blockBufferData %p (%ld)\n", v55, 221, v56, (char *)a1 + v52, v52);
        __uint64_t v57 = sub_DDEFC();
        __uint64_t v99 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: AddSEI: nal_unit_type blockBufferData %p (%ld)", v57, 221, v99, (char *)a1 + v52, v52);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: nal_unit_type blockBufferData %p (%ld)", v55, 221, v56, (char *)a1 + v52, v52);
      }
    }
    *int v53 = 4;
    int v62 = v53 + 1;
    if (sub_D1C38(0xDDu, 7))
    {
      int v63 = sub_D1C7C(0xDDu);
      __uint64_t v64 = sub_DDEFC();
      __uint64_t v65 = (const char *)sub_D1CB0(7);
      if (v63)
      {
        printf("%lld %d AVE %s: AddSEI: payloadType blockBufferData %p (%ld)\n", v64, 221, v65, v53 + 1, v62 - (unsigned char *)a1);
        __uint64_t v66 = sub_DDEFC();
        CFDictionaryRef v101 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: AddSEI: payloadType blockBufferData %p (%ld)", v66, 221, v101, v53 + 1, v62 - (unsigned char *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: payloadType blockBufferData %p (%ld)", v64, 221, v65, v53 + 1, v62 - (unsigned char *)a1);
      }
    }
    if (sub_D1C38(0xDDu, 7))
    {
      int v67 = sub_D1C7C(0xDDu);
      __uint64_t v68 = sub_DDEFC();
      __uint64_t v69 = (const char *)sub_D1CB0(7);
      if (v67)
      {
        printf("%lld %d AVE %s: AddSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)\n", v68, 221, v69, 9, v53 + 1, v62 - (unsigned char *)a1);
        __uint64_t v70 = sub_DDEFC();
        int v102 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: AddSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v70, 221, v102, 9, v53 + 1, v62 - (unsigned char *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v68, 221, v69, 9, v53 + 1, v62 - (unsigned char *)a1);
      }
    }
    v53[1] = 9;
    int v71 = v53 + 2;
    __uint64_t v72 = v42;
    if (sub_D1C38(0xDDu, 7))
    {
      int v73 = sub_D1C7C(0xDDu);
      __uint64_t v74 = sub_DDEFC();
      int v75 = (const char *)sub_D1CB0(7);
      if (v73)
      {
        printf("%lld %d AVE %s: AddSEI: end payloadSize bytes %d blockBufferData %p (%ld)\n", v74, 221, v75, 1, v71, v71 - (unsigned char *)a1);
        __uint64_t v76 = sub_DDEFC();
        __uint64_t v103 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: AddSEI: end payloadSize bytes %d blockBufferData %p (%ld)", v76, 221, v103, 1, v71, v71 - (unsigned char *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: end payloadSize bytes %d blockBufferData %p (%ld)", v74, 221, v75, 1, v71, v71 - (unsigned char *)a1);
      }
    }
    memcpy(v71, v42, __n);
    __uint64_t v77 = &v71[__n];
    if (sub_D1C38(0xDDu, 7))
    {
      int v78 = sub_D1C7C(0xDDu);
      __uint64_t v79 = sub_DDEFC();
      int v80 = (const char *)sub_D1CB0(7);
      if (v78)
      {
        printf("%lld %d AVE %s: AddSEI: data blockBufferData %p (%ld)\n", v79, 221, v80, v77, v77 - (unsigned char *)a1);
        __uint64_t v81 = sub_DDEFC();
        int v104 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: AddSEI: data blockBufferData %p (%ld)", v81, 221, v104, v77, v77 - (unsigned char *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: data blockBufferData %p (%ld)", v79, 221, v80, v77, v77 - (unsigned char *)a1);
      }
    }
    *__uint64_t v77 = 0x80;
    int v82 = v77 + 1;
    if (sub_D1C38(0xDDu, 7))
    {
      int v83 = sub_D1C7C(0xDDu);
      __uint64_t v84 = sub_DDEFC();
      int v85 = (const char *)sub_D1CB0(7);
      int64_t v86 = v82 - (unsigned char *)a1;
      if (v83)
      {
        printf("%lld %d AVE %s: AddSEI: rbsp_trailing_bits blockBufferData %p (%ld)\n", v84, 221, v85, v82, v82 - (unsigned char *)a1);
        __uint64_t v87 = sub_DDEFC();
        __uint64_t v105 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: AddSEI: rbsp_trailing_bits blockBufferData %p (%ld)", v87, 221, v105, v82, v86);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: rbsp_trailing_bits blockBufferData %p (%ld)", v84, 221, v85, v82, v82 - (unsigned char *)a1);
      }
    }
    else
    {
      LODWORD(v86) = v82 - a1;
    }
    *a5 = v86;
    if (sub_D1C38(0xDDu, 7))
    {
      int v88 = sub_D1C7C(0xDDu);
      __uint64_t v89 = sub_DDEFC();
      __uint64_t v90 = (const char *)sub_D1CB0(7);
      int v91 = *a5;
      if (v88)
      {
        printf("%lld %d AVE %s: AddSEI: final SEISize %d\n", v89, 221, v90, v91);
        __uint64_t v92 = sub_DDEFC();
        __uint64_t v106 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: AddSEI: final SEISize %d", v92, 221, v106, *a5);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: final SEISize %d", v89, 221, v90, v91);
      }
    }
    uint64_t v40 = 0;
    if (!__n_4) {
      goto LABEL_89;
    }
    goto LABEL_87;
  }
  if (sub_D1C38(0xDDu, 4))
  {
    int v32 = sub_D1C7C(0xDDu);
    __uint64_t v33 = sub_DDEFC();
    int v34 = (const char *)sub_D1CB0(4);
    if (v32)
    {
      printf("%lld %d AVE %s: malloc for SEI failed.\n", v33, 221, v34);
      __uint64_t v35 = sub_DDEFC();
      int v95 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: malloc for SEI failed.", v35, 221, v95);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: malloc for SEI failed.", v33, 221, v34);
    }
  }
  return 0;
}

uint64_t sub_4DA14(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int *a6)
{
  if (sub_D1C38(0xDDu, 7))
  {
    int v12 = sub_D1C7C(0xDDu);
    __uint64_t v13 = sub_DDEFC();
    __uint64_t v14 = (const char *)sub_D1CB0(7);
    int v15 = *(_DWORD *)(a4 + 160);
    if (v12)
    {
      printf("%lld %d AVE %s: \nAddSEI: frame = %d - SEI size %d useEPB = %d\n", v13, 221, v14, v15, 0, a5);
      __uint64_t v16 = sub_DDEFC();
      CFNumberRef v124 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: \nAddSEI: frame = %d - SEI size %d useEPB = %d", v16, 221, v124, *(_DWORD *)(a4 + 160), 0, a5);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: \nAddSEI: frame = %d - SEI size %d useEPB = %d", v13, 221, v14, v15, 0, a5);
    }
  }
  if (!a1)
  {
    if (sub_D1C38(3u, 4))
    {
      int v19 = sub_D1C7C(3u);
      __uint64_t v20 = sub_DDEFC();
      int v21 = (const char *)sub_D1CB0(4);
      if (v19)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: input buffer NULL. FAIL\n", v20, 3, v21, "AddUnregisteredSEI", 830, "in != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: input buffer NULL. FAIL");
    }
    return 4294966293;
  }
  if (!a2)
  {
    if (sub_D1C38(3u, 4))
    {
      int v22 = sub_D1C7C(3u);
      __uint64_t v23 = sub_DDEFC();
      __uint64_t v24 = (const char *)sub_D1CB0(4);
      if (v22)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: video_params_drivers NULL. FAIL\n", v23, 3, v24, "AddUnregisteredSEI", 832, "video_params_drivers != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: video_params_drivers NULL. FAIL");
    }
    return 4294966293;
  }
  if (!a3)
  {
    if (sub_D1C38(3u, 4))
    {
      int v25 = sub_D1C7C(3u);
      __uint64_t v26 = sub_DDEFC();
      __uint64_t v27 = (const char *)sub_D1CB0(4);
      if (v25)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: bRCEnableDriver NULL. FAIL\n", v26, 3, v27, "AddUnregisteredSEI", 834, "bRCEnableDriver != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: bRCEnableDriver NULL. FAIL");
    }
    return 4294966293;
  }
  if (!a4)
  {
    if (sub_D1C38(3u, 4))
    {
      int v28 = sub_D1C7C(3u);
      __uint64_t v29 = sub_DDEFC();
      __uint64_t v30 = (const char *)sub_D1CB0(4);
      if (v28)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: Frame NULL. FAIL\n", v29, 3, v30, "AddUnregisteredSEI", 836, "Frame != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: Frame NULL. FAIL");
    }
    return 4294966293;
  }
  int v17 = (_DWORD *)(a4 + 23468);
  unsigned int v18 = *(unsigned __int8 *)(a2 + 45);
  if (*(unsigned char *)(a2 + 45))
  {
    if (*(double *)(a4 + 2384) != 0.0 && (*v17 == 3 || *(_DWORD *)(a4 + 23768) == 21)) {
      unsigned int v18 = 9;
    }
    else {
      unsigned int v18 = 0;
    }
  }
  if (*(unsigned char *)(a2 + 49) && *(double *)(a4 + 2368) != 0.0) {
    v18 += 9;
  }
  if (*(unsigned char *)(a2 + 46) && !*(_DWORD *)(a4 + 160)) {
    v18 += 5;
  }
  if (*(unsigned char *)(a2 + 47) && !*(_DWORD *)(a4 + 160)) {
    v18 += 5;
  }
  if (*(unsigned char *)(a2 + 48) && !*(_DWORD *)(a4 + 160)) {
    v18 += 5;
  }
  if (*(unsigned char *)(a2 + 50) && *(unsigned char *)(a2 + 55)) {
    v18 += 25;
  }
  if (*(unsigned char *)(a2 + 51) && *(unsigned char *)(a2 + 56)) {
    v18 += 5;
  }
  if (*(unsigned char *)(a2 + 52) && *(unsigned char *)(a2 + 85)) {
    v18 += 18;
  }
  if (*(unsigned char *)(a2 + 53)) {
    size_t v31 = v18 + 7;
  }
  else {
    size_t v31 = v18;
  }
  if (!v31) {
    return 0;
  }
  int v32 = (char *)malloc_type_malloc(v31, 0x487433EDuLL);
  if (!v32)
  {
    if (sub_D1C38(0xDDu, 4))
    {
      uint64_t v37 = sub_D1C7C(0xDDu);
      __uint64_t v38 = sub_DDEFC();
      __uint64_t v39 = (const char *)sub_D1CB0(4);
      if (!v37)
      {
        syslog(3, "%lld %d AVE %s: malloc for SEI failed.", v38, 221, v39);
        return v37;
      }
      printf("%lld %d AVE %s: malloc for SEI failed.\n", v38, 221, v39);
      __uint64_t v40 = sub_DDEFC();
      uint64_t v41 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: malloc for SEI failed.", v40, 221, v41);
    }
    return 0;
  }
  __uint64_t v33 = v32;
  int v34 = v32;
  if (*(unsigned char *)(a2 + 45))
  {
    int v34 = v32;
    if (*(double *)(a4 + 2384) != 0.0)
    {
      if (*v17 == 3 || (int v34 = v32, *(_DWORD *)(a4 + 23768) == 21))
      {
        *int v32 = 0;
        *(void *)(v32 + 1) = bswap64(vcvtd_n_u64_f64(*(double *)(a4 + 2384), 0x20uLL));
        int v34 = v32 + 9;
      }
    }
  }
  if (*(unsigned char *)(a2 + 49) && *(double *)(a4 + 2368) != 0.0)
  {
    *int v34 = 4;
    *(void *)(v34 + 1) = bswap64(vcvtd_n_u64_f64(*(double *)(a4 + 2368), 0x20uLL));
    v34 += 9;
  }
  if (*(unsigned char *)(a2 + 46) && !*(_DWORD *)(a4 + 160))
  {
    LODWORD(v36) = *(_DWORD *)(a3 + 4);
    if (v36)
    {
      if (v36 == 20)
      {
        LOBYTE(v36) = -52;
        char v43 = -35;
      }
      else
      {
        LOBYTE(v36) = -52;
        char v43 = -1;
      }
    }
    else
    {
      char v43 = 0;
    }
    char v44 = 1;
    goto LABEL_86;
  }
  if (*(unsigned char *)(a2 + 47) && !*(_DWORD *)(a4 + 160))
  {
    unsigned int v35 = *(_DWORD *)(a2 + 136);
    if (v35 > 6) {
      LOBYTE(v36) = 0;
    }
    else {
      unint64_t v36 = 0x66553322114400uLL >> (8 * v35);
    }
    char v43 = -18;
    char v44 = 3;
LABEL_86:
    *int v34 = v44;
    v34[1] = v43;
    v34[2] = v36;
    v34[3] = v36;
    v34[4] = v43;
    v34 += 5;
  }
  if (*(unsigned char *)(a2 + 48) && !*(_DWORD *)(a4 + 160))
  {
    *int v34 = 2;
    v34[1] = *(unsigned char *)(a3 + 3);
    v34[2] = *(_WORD *)(a3 + 2);
    v34[3] = BYTE1(*(_DWORD *)a3);
    v34[4] = *(_DWORD *)a3;
    v34 += 5;
  }
  if (*(unsigned char *)(a2 + 50) && *(unsigned char *)(a2 + 55))
  {
    *int v34 = 5;
    long long v45 = *(_OWORD *)(a2 + 57);
    *(void *)(v34 + 17) = *(void *)(a2 + 73);
    *(_OWORD *)(v34 + 1) = v45;
    v34 += 25;
  }
  if (*(unsigned char *)(a2 + 51) && *(unsigned char *)(a2 + 56))
  {
    *int v34 = 6;
    *(_DWORD *)(v34 + 1) = *(_DWORD *)(a2 + 81);
    v34 += 5;
  }
  if (*(unsigned char *)(a2 + 52) && *(unsigned char *)(a2 + 85))
  {
    *int v34 = 7;
    long long v46 = *(_OWORD *)(a2 + 86);
    v34[17] = *(unsigned char *)(a2 + 102);
    *(_OWORD *)(v34 + 1) = v46;
    v34 += 18;
  }
  if (*(unsigned char *)(a2 + 53))
  {
    double v47 = *(double *)(a4 + 2408);
    if (v47 == 0.0
      || (double v48 = *(double *)(a4 + 2392), v48 == 0.0)
      || (double v49 = *(double *)(a4 + 2400), v49 == 0.0)
      || (double v50 = *(double *)(a4 + 2416), v50 == 0.0))
    {
      char v52 = 0;
      unsigned int v51 = 0;
    }
    else
    {
      unsigned int v51 = (int)(v47 * v48 * v49 / (v50 * 16777216.0));
      char v52 = 32;
    }
    int v53 = *(_DWORD *)(a4 + 2444);
    if (v53 == -1) {
      char v54 = -64;
    }
    else {
      char v54 = (_BYTE)v53 << 6;
    }
    *(_DWORD *)int v34 = 1380865032;
    v34[4] = *(_DWORD *)(a4 + 2440);
    if (v51 >= 0xFF) {
      LOBYTE(v51) = -1;
    }
    v34[5] = v51;
    v34[6] = v54 | v52 | *(unsigned char *)(a4 + 4036) & 0x1F;
  }
  BOOL v55 = sub_D1C38(0xDDu, 7);
  if (a5)
  {
    if (v55)
    {
      int v56 = sub_D1C7C(0xDDu);
      __uint64_t v57 = sub_DDEFC();
      int v58 = (const char *)sub_D1CB0(7);
      if (v56)
      {
        printf("%lld %d AVE %s: AddSEI: WILL DO EPB\n", v57, 221, v58);
        __uint64_t v59 = sub_DDEFC();
        int v125 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: AddSEI: WILL DO EPB", v59, 221, v125);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: WILL DO EPB", v57, 221, v58);
      }
    }
    size_t __n_4 = malloc_type_malloc(v31 + (v31 >> 1), 0x812E27F0uLL);
    unsigned int __n = sub_4CB28(v33, v31, __n_4);
  }
  else
  {
    if (v55)
    {
      int v60 = sub_D1C7C(0xDDu);
      __uint64_t v61 = sub_DDEFC();
      int v62 = (const char *)sub_D1CB0(7);
      if (v60)
      {
        printf("%lld %d AVE %s: AddSEI: WILL NOT DO EPB\n", v61, 221, v62);
        __uint64_t v63 = sub_DDEFC();
        int v126 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: AddSEI: WILL NOT DO EPB", v63, 221, v126);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: WILL NOT DO EPB", v61, 221, v62);
      }
    }
    unsigned int __n = v31;
    size_t __n_4 = v33;
  }
  if (sub_D1C38(0xDDu, 7))
  {
    int v64 = sub_D1C7C(0xDDu);
    __uint64_t v65 = sub_DDEFC();
    __uint64_t v66 = (const char *)sub_D1CB0(7);
    if (v64)
    {
      printf("%lld %d AVE %s: AddSEI: payloadSize EPB %d\n", v65, 221, v66, v31);
      __uint64_t v67 = sub_DDEFC();
      __uint64_t v127 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: AddSEI: payloadSize EPB %d", v67, 221, v127, v31);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEI: payloadSize EPB %d", v65, 221, v66, v31);
    }
  }
  int v68 = v31 + 16;
  if (sub_D1C38(0xDDu, 7))
  {
    int v69 = sub_D1C7C(0xDDu);
    __uint64_t v70 = sub_DDEFC();
    int v71 = (const char *)sub_D1CB0(7);
    if (v69)
    {
      printf("%lld %d AVE %s: AddSEI: payloadSize UUID %d\n", v70, 221, v71, v68);
      __uint64_t v72 = sub_DDEFC();
      unsigned int v128 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: AddSEI: payloadSize UUID %d", v72, 221, v128, v68);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEI: payloadSize UUID %d", v70, 221, v71, v68);
    }
  }
  *a1 = 0x1000000;
  if (sub_D1C38(0xDDu, 7))
  {
    int v73 = sub_D1C7C(0xDDu);
    __uint64_t v74 = sub_DDEFC();
    int v75 = (const char *)sub_D1CB0(7);
    if (v73)
    {
      printf("%lld %d AVE %s: AddSEI: start code blockBufferData %p (%ld)\n", v74, 221, v75, a1 + 1, 4);
      __uint64_t v76 = sub_DDEFC();
      int v129 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: AddSEI: start code blockBufferData %p (%ld)", v76, 221, v129, a1 + 1, 4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEI: start code blockBufferData %p (%ld)", v74, 221, v75, a1 + 1, 4);
    }
  }
  int v77 = *(_DWORD *)(a2 + 120);
  if (v77 == 1)
  {
    *((_WORD *)a1 + 2) = 334;
    uint64_t v78 = 6;
    goto LABEL_139;
  }
  if (!v77)
  {
    *((unsigned char *)a1 + 4) = 6;
    uint64_t v78 = 5;
LABEL_139:
    __uint64_t v79 = (char *)a1 + v78;
    if (sub_D1C38(0xDDu, 7))
    {
      int v80 = sub_D1C7C(0xDDu);
      __uint64_t v81 = sub_DDEFC();
      int v82 = (const char *)sub_D1CB0(7);
      if (v80)
      {
        printf("%lld %d AVE %s: AddSEI: nal_unit_type blockBufferData %p (%ld)\n", v81, 221, v82, (char *)a1 + v78, v78);
        __uint64_t v83 = sub_DDEFC();
        __uint64_t v130 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: AddSEI: nal_unit_type blockBufferData %p (%ld)", v83, 221, v130, (char *)a1 + v78, v78);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: nal_unit_type blockBufferData %p (%ld)", v81, 221, v82, (char *)a1 + v78, v78);
      }
    }
    *__uint64_t v79 = 5;
    __uint64_t v89 = v79 + 1;
    if (sub_D1C38(0xDDu, 7))
    {
      int v90 = sub_D1C7C(0xDDu);
      __uint64_t v91 = sub_DDEFC();
      __uint64_t v92 = (const char *)sub_D1CB0(7);
      if (v90)
      {
        printf("%lld %d AVE %s: AddSEI: payloadType blockBufferData %p (%ld)\n", v91, 221, v92, v79 + 1, v89 - (unsigned char *)a1);
        __uint64_t v93 = sub_DDEFC();
        __uint64_t v132 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: AddSEI: payloadType blockBufferData %p (%ld)", v93, 221, v132, v79 + 1, v89 - (unsigned char *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: payloadType blockBufferData %p (%ld)", v91, 221, v92, v79 + 1, v89 - (unsigned char *)a1);
      }
    }
    if (sub_D1C38(0xDDu, 7))
    {
      int v94 = sub_D1C7C(0xDDu);
      __uint64_t v95 = sub_DDEFC();
      int v96 = (const char *)sub_D1CB0(7);
      if (v94)
      {
        printf("%lld %d AVE %s: AddSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)\n", v95, 221, v96, v68, v79 + 1, v89 - (unsigned char *)a1);
        __uint64_t v97 = sub_DDEFC();
        int v133 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: AddSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v97, 221, v133, v68, v79 + 1, v89 - (unsigned char *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v95, 221, v96, v68, v79 + 1, v89 - (unsigned char *)a1);
      }
    }
    v79[1] = v68;
    if (sub_D1C38(0xDDu, 7))
    {
      int v98 = v79 + 2;
      int v99 = sub_D1C7C(0xDDu);
      __uint64_t v100 = sub_DDEFC();
      CFDictionaryRef v101 = (const char *)sub_D1CB0(7);
      if (v99)
      {
        printf("%lld %d AVE %s: AddSEI: end payloadSize bytes %d blockBufferData %p (%ld)\n", v100, 221, v101, 1, v79 + 2, v98 - (unsigned char *)a1);
        __uint64_t v102 = sub_DDEFC();
        __uint64_t v134 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: AddSEI: end payloadSize bytes %d blockBufferData %p (%ld)", v102, 221, v134, 1, v79 + 2, v98 - (unsigned char *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: end payloadSize bytes %d blockBufferData %p (%ld)", v100, 221, v101, 1, v79 + 2, v98 - (unsigned char *)a1);
      }
    }
    *(_OWORD *)(v79 + 2) = xmmword_142E50;
    __uint64_t v103 = v79 + 18;
    __uint64_t v87 = __n_4;
    if (sub_D1C38(0xDDu, 7))
    {
      int v104 = sub_D1C7C(0xDDu);
      __uint64_t v105 = sub_DDEFC();
      __uint64_t v106 = (const char *)sub_D1CB0(7);
      if (v104)
      {
        printf("%lld %d AVE %s: AddSEI: UUID blockBufferData %p (%ld)\n", v105, 221, v106, v79 + 18, v103 - (unsigned char *)a1);
        __uint64_t v107 = sub_DDEFC();
        unsigned int v135 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: AddSEI: UUID blockBufferData %p (%ld)", v107, 221, v135, v103, v103 - (unsigned char *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: UUID blockBufferData %p (%ld)", v105, 221, v106, v79 + 18, v103 - (unsigned char *)a1);
      }
    }
    memcpy(v103, __n_4, __n);
    __uint64_t v108 = &v103[__n];
    if (sub_D1C38(0xDDu, 7))
    {
      int v109 = sub_D1C7C(0xDDu);
      __uint64_t v110 = sub_DDEFC();
      __uint64_t v111 = (const char *)sub_D1CB0(7);
      if (v109)
      {
        printf("%lld %d AVE %s: AddSEI: data blockBufferData %p (%ld)\n", v110, 221, v111, v108, v108 - (unsigned char *)a1);
        __uint64_t v112 = sub_DDEFC();
        int v136 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: AddSEI: data blockBufferData %p (%ld)", v112, 221, v136, v108, v108 - (unsigned char *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: data blockBufferData %p (%ld)", v110, 221, v111, v108, v108 - (unsigned char *)a1);
      }
    }
    *__uint64_t v108 = 0x80;
    __uint64_t v113 = v108 + 1;
    if (sub_D1C38(0xDDu, 7))
    {
      int v114 = sub_D1C7C(0xDDu);
      __uint64_t v115 = sub_DDEFC();
      __uint64_t v116 = (const char *)sub_D1CB0(7);
      int64_t v117 = v113 - (unsigned char *)a1;
      if (v114)
      {
        printf("%lld %d AVE %s: AddSEI: rbsp_trailing_bits blockBufferData %p (%ld)\n", v115, 221, v116, v113, v113 - (unsigned char *)a1);
        __uint64_t v118 = sub_DDEFC();
        __uint64_t v137 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: AddSEI: rbsp_trailing_bits blockBufferData %p (%ld)", v118, 221, v137, v113, v117);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: rbsp_trailing_bits blockBufferData %p (%ld)", v115, 221, v116, v113, v113 - (unsigned char *)a1);
      }
    }
    else
    {
      LODWORD(v117) = v113 - a1;
    }
    *a6 = v117;
    if (sub_D1C38(0xDDu, 7))
    {
      int v119 = sub_D1C7C(0xDDu);
      __uint64_t v120 = sub_DDEFC();
      int v121 = (const char *)sub_D1CB0(7);
      int v122 = *a6;
      if (v119)
      {
        printf("%lld %d AVE %s: AddSEI: final SEISize %d\n", v120, 221, v121, v122);
        __uint64_t v123 = sub_DDEFC();
        unsigned int v138 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: AddSEI: final SEISize %d", v123, 221, v138, *a6);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: final SEISize %d", v120, 221, v121, v122);
      }
    }
    uint64_t v37 = 0;
    goto LABEL_179;
  }
  if (sub_D1C38(3u, 4))
  {
    int v84 = sub_D1C7C(3u);
    __uint64_t v85 = sub_DDEFC();
    int64_t v86 = (const char *)sub_D1CB0(4);
    __uint64_t v87 = __n_4;
    if (v84)
    {
      printf("%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL\n", v85, 3, v86, "AddUnregisteredSEI", 1158, "false");
      __uint64_t v88 = sub_DDEFC();
      int v131 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL", v88, 3, v131, "AddUnregisteredSEI", 1158, "false");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL", v85, 3, v86, "AddUnregisteredSEI", 1158, "false");
    }
    uint64_t v37 = 4294966295;
  }
  else
  {
    uint64_t v37 = 4294966295;
    __uint64_t v87 = __n_4;
  }
LABEL_179:
  if (v87 && a5) {
    free(v87);
  }
  free(v33);
  return v37;
}

void sub_4EAEC()
{
}

void sub_4F520()
{
}

void sub_4F544()
{
}

void sub_4FF58()
{
}

void sub_4FF7C()
{
  uint64_t v0 = 0;
  memset(v13, 0, sizeof(v13));
  v12[0] = xmmword_142E60;
  v12[1] = xmmword_142E70;
  v12[2] = xmmword_142E80;
  float64x2_t v10 = (float64x2_t)vdupq_n_s64(0x40E86A0000000000uLL);
  while (1)
  {
    int32x2_t v11 = vmovn_s64(vcvtq_s64_f64(vmulq_f64((float64x2_t)v12[v0], v10)));
    v13[v0] = v11;
    if (sub_D1C38(0xDDu, 7))
    {
      int v1 = sub_D1C7C(0xDDu);
      __uint64_t v2 = sub_DDEFC();
      int v3 = (const char *)sub_D1CB0(7);
      if (v1)
      {
        printf("%lld %d AVE %s: AddContentColourVolumeSEI: ccv primaries\n", v2, 221, v3);
        __uint64_t v2 = sub_DDEFC();
        int v3 = (const char *)sub_D1CB0(7);
      }
      syslog(3, "%lld %d AVE %s: AddContentColourVolumeSEI: ccv primaries", v2, 221, v3);
    }
    if (sub_D1C38(0xDDu, 7))
    {
      int v4 = sub_D1C7C(0xDDu);
      __uint64_t v5 = sub_DDEFC();
      unsigned int v6 = (const char *)sub_D1CB0(7);
      if (v4)
      {
        printf("%lld %d AVE %s: ccv_primaries %d (x, y) (%d, %d)\n", v5, 221, v6, v0, v11.i32[0], v11.i32[1]);
        __uint64_t v5 = sub_DDEFC();
        unsigned int v6 = (const char *)sub_D1CB0(7);
      }
      syslog(3, "%lld %d AVE %s: ccv_primaries %d (x, y) (%d, %d)", v5, 221, v6, v0, v11.i32[0], v11.i32[1]);
    }
    if (++v0 == 3)
    {
      if (sub_D1C38(0xDDu, 7))
      {
        int v7 = sub_D1C7C(0xDDu);
        __uint64_t v8 = sub_DDEFC();
        int v9 = (const char *)sub_D1CB0(7);
        if (v7)
        {
          printf("%lld %d AVE %s: \n", v8, 221, v9);
          __uint64_t v8 = sub_DDEFC();
          int v9 = (const char *)sub_D1CB0(7);
        }
        syslog(3, "%lld %d AVE %s: ", v8, 221, v9);
      }
      operator new();
    }
  }
}

void sub_50E74()
{
}

void sub_50EA0()
{
  if (sub_D1C38(0xDDu, 7))
  {
    int v0 = sub_D1C7C(0xDDu);
    __uint64_t v1 = sub_DDEFC();
    __uint64_t v2 = (const char *)sub_D1CB0(7);
    if (v0)
    {
      printf("%lld %d AVE %s: \n", v1, 221, v2);
      __uint64_t v3 = sub_DDEFC();
      int v4 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: ", v3, 221, v4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: ", v1, 221, v2);
    }
  }
  operator new();
}

void sub_519E4()
{
}

void sub_51A08()
{
}

void sub_52510()
{
}

void sub_52534()
{
}

void sub_52EFC()
{
}

uint64_t AVE_DEBUG_SetCallback(uint64_t a1, _OWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = DerivedStorage;
  if (DerivedStorage)
  {
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
    if (sub_D1C38(0x14u, 7))
    {
      int v5 = sub_D1C7C(0x14u);
      __uint64_t v6 = sub_DDEFC();
      int v7 = (const char *)sub_D1CB0(7);
      if (v5)
      {
        printf("%lld %d AVE %s: FIG: ENTER AVE_DEBUG_SetCallback\n", v6, 20, v7);
        __uint64_t v8 = sub_DDEFC();
        __uint64_t v24 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_DEBUG_SetCallback", v8, 20, v24);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_DEBUG_SetCallback", v6, 20, v7);
      }
    }
    if (a2)
    {
      if (sub_D1C38(0x2Eu, 7))
      {
        int v13 = sub_D1C7C(0x2Eu);
        __uint64_t v14 = sub_DDEFC();
        int v15 = (const char *)sub_D1CB0(7);
        if (v13)
        {
          printf("%lld %d AVE %s: FIG: AVEFIG_DEBUG_SetCallback called %p -> %p sz %lu \n", v14, 46, v15, (const void *)(v4 + 32), a2, 32);
          __uint64_t v16 = sub_DDEFC();
          __uint64_t v26 = (const char *)sub_D1CB0(7);
          syslog(3, "%lld %d AVE %s: FIG: AVEFIG_DEBUG_SetCallback called %p -> %p sz %lu ", v16, 46, v26, (const void *)(v4 + 32), a2, 32);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: AVEFIG_DEBUG_SetCallback called %p -> %p sz %lu ", v14, 46, v15, (const void *)(v4 + 32), a2, 32);
        }
      }
      uint64_t v17 = 0;
      long long v18 = a2[1];
      *(_OWORD *)(v4 + 32) = *a2;
      *(_OWORD *)(v4 + 48) = v18;
    }
    else
    {
      uint64_t v17 = 0;
    }
  }
  else
  {
    if (sub_D1C38(3u, 4))
    {
      int v9 = sub_D1C7C(3u);
      __uint64_t v10 = sub_DDEFC();
      int32x2_t v11 = (const char *)sub_D1CB0(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v10, 3, v11, "AVE_DEBUG_SetCallback", 568, "encoderPrivateStorage");
        __uint64_t v12 = sub_DDEFC();
        int v25 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v12, 3, v25, "AVE_DEBUG_SetCallback", 568, "encoderPrivateStorage");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v10, 3, v11, "AVE_DEBUG_SetCallback", 568, "encoderPrivateStorage");
      }
    }
    uint64_t v17 = 4294954384;
  }
  if (sub_D1C38(0x14u, 7))
  {
    int v19 = sub_D1C7C(0x14u);
    __uint64_t v20 = sub_DDEFC();
    int v21 = (const char *)sub_D1CB0(7);
    if (v19)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_DEBUG_SetCallback err %d\n", v20, 20, v21, v17);
      __uint64_t v22 = sub_DDEFC();
      __uint64_t v27 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_DEBUG_SetCallback err %d", v22, 20, v27, v17);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_DEBUG_SetCallback err %d", v20, 20, v21, v17);
    }
  }
  if (v4) {
    pthread_mutex_unlock((pthread_mutex_t *)(v4 + 183448));
  }
  return v17;
}

uint64_t AVE_RemoteSession_HEVCSetCallback()
{
  return 4294954381;
}

uint64_t AVE_Plugin_HEVC_CreateInstance(int a1, const void *a2, void *a3)
{
  memset(v27, 0, sizeof(v27));
  if (sub_D1C38(0x14u, 6))
  {
    int v6 = sub_D1C7C(0x14u);
    __uint64_t v7 = sub_DDEFC();
    __uint64_t v8 = (const char *)sub_D1CB0(6);
    if (v6)
    {
      printf("%lld %d AVE %s: Enter %s %d %p %p\n", v7, 20, v8, "AVE_Plugin_HEVC_CreateInstance", a1, a2, a3);
      __uint64_t v7 = sub_DDEFC();
      __uint64_t v8 = (const char *)sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: Enter %s %d %p %p", v7, 20, v8, "AVE_Plugin_HEVC_CreateInstance", a1, a2, a3);
  }
  if (sub_D1C38(0x14u, 0))
  {
    int v9 = sub_D1C7C(0x14u);
    __uint64_t v10 = sub_DDEFC();
    int32x2_t v11 = (const char *)sub_D1CB0(0);
    if (v9)
    {
      printf("%lld %d AVE %s: Compiled %s in %s on %s %s\n", v10, 20, v11, "803.48.1", "prod", "Nov 14 2024", "23:04:30");
      __uint64_t v10 = sub_DDEFC();
      int32x2_t v11 = (const char *)sub_D1CB0(0);
    }
    syslog(3, "%lld %d AVE %s: Compiled %s in %s on %s %s", v10, 20, v11, "803.48.1", "prod", "Nov 14 2024", "23:04:30");
  }
  if ((int)sub_D1ABC((char *)v27, 128) >= 1 && sub_D1C38(0x14u, 0))
  {
    BOOL v12 = sub_D1C7C(0x14u) == 0;
    __uint64_t v13 = sub_DDEFC();
    __uint64_t v14 = (const char *)sub_D1CB0(0);
    if (!v12)
    {
      printf("%lld %d AVE %s: Temporary Path: %s\n", v13, 20, v14, (const char *)v27);
      __uint64_t v13 = sub_DDEFC();
      __uint64_t v14 = (const char *)sub_D1CB0(0);
    }
    syslog(3, "%lld %d AVE %s: Temporary Path: %s", v13, 20, v14, (const char *)v27);
  }
  sub_DDEFC();
  sub_D1CE0();
  sub_C8C98();
  int v15 = sub_C7604();
  sub_D2B08((uint64_t)v15 + 920);
  if (a1 == 1752589105 || a1 == 1869117027)
  {
    kdebug_trace();
    VTVideoEncoderGetClassID();
    CMDerivedObjectCreate();
    if (sub_D1C38(3u, 4))
    {
      BOOL v19 = sub_D1C7C(3u) == 0;
      __uint64_t v20 = sub_DDEFC();
      int v21 = (const char *)sub_D1CB0(4);
      if (!v19)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigDerivedObjectCreate failed\n", v20, 3, v21, "AVE_Plugin_HEVC_CreateInstance", 4592, "encoderInstance != __null");
        __uint64_t v20 = sub_DDEFC();
        int v21 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigDerivedObjectCreate failed", v20, 3, v21, "AVE_Plugin_HEVC_CreateInstance", 4592, "encoderInstance != __null");
    }
    uint64_t v22 = 4294954389;
  }
  else
  {
    if (sub_D1C38(3u, 4))
    {
      BOOL v16 = sub_D1C7C(3u) == 0;
      __uint64_t v17 = sub_DDEFC();
      long long v18 = (const char *)sub_D1CB0(4);
      if (!v16)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: codecType not supported\n", v17, 3, v18, "AVE_Plugin_HEVC_CreateInstance", 4581, "(codecType == kCMVideoCodecType_HEVC || codecType == kFigVideoCodecType_HEVC_WirelessDisplayEncrypted)");
        __uint64_t v17 = sub_DDEFC();
        long long v18 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: codecType not supported", v17, 3, v18, "AVE_Plugin_HEVC_CreateInstance", 4581, "(codecType == kCMVideoCodecType_HEVC || codecType == kFigVideoCodecType_HEVC_WirelessDisplayEncrypted)");
    }
    uint64_t v22 = 4294954394;
  }
  *a3 = 0;
  kdebug_trace();
  if (sub_D1C38(0x14u, 6))
  {
    BOOL v23 = sub_D1C7C(0x14u) == 0;
    __uint64_t v24 = sub_DDEFC();
    int v25 = (const char *)sub_D1CB0(6);
    if (!v23)
    {
      printf("%lld %d AVE %s: Exit %s %d %p %p%d\n", v24, 20, v25, "AVE_Plugin_HEVC_CreateInstance", a1, a2, a3, v22);
      __uint64_t v24 = sub_DDEFC();
      int v25 = (const char *)sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: Exit %s %d %p %p%d", v24, 20, v25, "AVE_Plugin_HEVC_CreateInstance", a1, a2, a3, v22);
  }
  return v22;
}

void sub_54090()
{
}

uint64_t sub_540BC(uint64_t a1, __CFDictionary **a2, __CFDictionary **a3)
{
  int v6 = sub_C7604();
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v25 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v25)
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryCreateMutable failed.", v26, 3, v27, "AVE_CreateSupportedPropertyDictionary", 4096, "PropertyDictionaryHEIF");
      goto LABEL_269;
    }
    int v28 = "PropertyDictionaryHEIF";
    int v29 = 4096;
LABEL_259:
    printf("%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryCreateMutable failed.\n", v26, 3, v27, "AVE_CreateSupportedPropertyDictionary", v29, v28);
    sub_DDEFC();
    sub_D1CB0(4);
    goto LABEL_268;
  }
  __uint64_t v8 = Mutable;
  if (!sub_4A52C(Mutable, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxKeyFrameInterval, 0))
  {
    if (sub_D1C38(3u, 4))
    {
      int v30 = sub_D1C7C(3u);
      __uint64_t v26 = sub_DDEFC();
      __uint64_t v27 = (const char *)sub_D1CB0(4);
      if (!v30) {
        goto LABEL_268;
      }
      int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxKeyFra"
            "meInterval, false)";
      int v29 = 4098;
      goto LABEL_259;
    }
    goto LABEL_269;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"StrictKeyFrameInterval", 0))
  {
    if (sub_D1C38(3u, 4))
    {
      int v31 = sub_D1C7C(3u);
      __uint64_t v26 = sub_DDEFC();
      __uint64_t v27 = (const char *)sub_D1CB0(4);
      if (!v31) {
        goto LABEL_268;
      }
      int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFString"
            "MakeConstantString (\"\" \"StrictKeyFrameInterval\" \"\")), false)";
      int v29 = 4099;
      goto LABEL_259;
    }
    goto LABEL_269;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowTemporalCompression, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v32 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v32)
    {
LABEL_268:
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryCreateMutable failed.");
      goto LABEL_269;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowTempo"
          "ralCompression, false)";
    int v29 = 4100;
    goto LABEL_259;
  }
  int v9 = (int *)(a1 + 183564);
  if (*v9 >= 6)
  {
    if (!sub_4A52C(v8, kVTPropertyType_Enumeration, @"ReconstructedPixelBufferAttributes", 1))
    {
      if (sub_D1C38(3u, 4))
      {
        int v33 = sub_D1C7C(3u);
        __uint64_t v26 = sub_DDEFC();
        __uint64_t v27 = (const char *)sub_D1CB0(4);
        if (!v33) {
          goto LABEL_268;
        }
        int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___C"
              "FStringMakeConstantString (\"\" \"ReconstructedPixelBufferAttributes\" \"\")), true)";
        int v29 = 4104;
        goto LABEL_259;
      }
      goto LABEL_269;
    }
    if (!sub_4A52C(v8, kVTPropertyType_Number, @"ReconstructedPixelBuffer", 0))
    {
      if (!sub_D1C38(3u, 4)) {
        goto LABEL_269;
      }
      int v41 = sub_D1C7C(3u);
      __uint64_t v26 = sub_DDEFC();
      __uint64_t v27 = (const char *)sub_D1CB0(4);
      if (!v41) {
        goto LABEL_268;
      }
      int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFString"
            "MakeConstantString (\"\" \"ReconstructedPixelBuffer\" \"\")), false)";
      int v29 = 4106;
      goto LABEL_259;
    }
  }
  __uint64_t v10 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!v10)
  {
    if (sub_D1C38(3u, 4))
    {
      int v34 = sub_D1C7C(3u);
      __uint64_t v26 = sub_DDEFC();
      __uint64_t v27 = (const char *)sub_D1CB0(4);
      if (!v34) {
        goto LABEL_268;
      }
      int v28 = "Dictionary";
      int v29 = 4112;
      goto LABEL_259;
    }
    goto LABEL_269;
  }
  int32x2_t v11 = v10;
  __uint64_t v272 = a3;
  CFDictionarySetValue(v10, kVTPropertyTypeKey, kVTPropertyType_Enumeration);
  CFDictionarySetValue(v11, kVTPropertyReadWriteStatusKey, kVTPropertyReadWriteStatus_ReadWrite);
  CFDictionarySetValue(v11, kVTPropertyShouldBeSerializedKey, kCFBooleanFalse);
  BOOL v12 = v9;
  __uint64_t v13 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFArrayAppendValue(v13, kVTProfileLevel_HEVC_Main_AutoLevel);
  CFArrayAppendValue(v13, kVTProfileLevel_HEVC_Main10_AutoLevel);
  value = (void *)kVTProfileLevel_HEVC_MainStill_AutoLevel;
  CFArrayAppendValue(v13, kVTProfileLevel_HEVC_MainStill_AutoLevel);
  int v270 = (void *)kVTProfileLevel_HEVC_Main444_AutoLevel;
  CFArrayAppendValue(v13, kVTProfileLevel_HEVC_Main444_AutoLevel);
  __uint64_t v269 = (void *)kVTProfileLevel_HEVC_Main44410_AutoLevel;
  CFArrayAppendValue(v13, kVTProfileLevel_HEVC_Main44410_AutoLevel);
  __uint64_t v273 = v12;
  if (v12[1] == 6 || *v12 >= 7) {
    CFArrayAppendValue(v13, kVTProfileLevel_HEVC_Main42210_AutoLevel);
  }
  __uint64_t v14 = (const void *)kVTProfileLevel_HEVC_Monochrome10_AutoLevel;
  CFArrayAppendValue(v13, kVTProfileLevel_HEVC_Monochrome10_AutoLevel);
  __uint64_t v268 = (void *)kVTProfileLevel_HEVC_Monochrome_AutoLevel;
  CFArrayAppendValue(v13, kVTProfileLevel_HEVC_Monochrome_AutoLevel);
  CFDictionarySetValue(v11, kVTPropertySupportedValueListKey, v13);
  if (v13) {
    CFRelease(v13);
  }
  CFDictionarySetValue(v8, kVTCompressionPropertyKey_ProfileLevel, v11);
  CFRelease(v11);
  CFStringRef v15 = kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration;
  if (!sub_4A52C(v8, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v40 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v40) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxKeyFrame"
          "IntervalDuration, false)";
    int v29 = 4152;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"StrictKeyFrameIntervalDuration", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v42 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v42) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"StrictKeyFrameIntervalDuration\" \"\")), false)";
    int v29 = 4153;
    goto LABEL_259;
  }
  if (!v6[344]) {
    goto LABEL_41;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"InitialQPI", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v43 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v43) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"InitialQPI\" \"\")), false)";
    int v29 = 4157;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"InitialQPP", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v45 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v45) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"InitialQPP\" \"\")), false)";
    int v29 = 4158;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"InitialQPB", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v47 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v47) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"InitialQPB\" \"\")), false)";
    int v29 = 4159;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, kVTCompressionPropertyKey_OutputBitDepth, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v49 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v49) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_OutputBitDepth, false)";
    int v29 = 4160;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"EnableMBInputCtrl", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v51 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v51) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"EnableMBInputCtrl\" \"\")), false)";
    int v29 = 4161;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, kVTCompressionPropertyKey_Usage, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v53 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v53) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_Usage, false)";
    int v29 = 4162;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"EnableRCDriver", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v55 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v55) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"EnableRCDriver\" \"\")), false)";
    int v29 = 4163;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"EnableRCFW", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v57 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v57) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"EnableRCFW\" \"\")), false)";
    int v29 = 4164;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Boolean, @"UseCAVLCBits", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v59 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v59) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"UseCAVLCBits\" \"\")), false)";
    int v29 = 4165;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"EnableQPMod", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v61 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v61) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"EnableQPMod\" \"\")), false)";
    int v29 = 4166;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Boolean, kVTCompressionPropertyKey_EnableQPModulation, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v63 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v63) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_EnableQPMo"
          "dulation, false)";
    int v29 = 4167;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"EnableLambdaMod", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v65 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v65) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"EnableLambdaMod\" \"\")), false)";
    int v29 = 4168;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"ThroughputRateMode", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v67 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v67) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"ThroughputRateMode\" \"\")), false)";
    int v29 = 4169;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"SAOMode", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v69 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v69) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"SAOMode\" \"\")), false)";
    int v29 = 4170;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Boolean, @"UseHWTileOffsets", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v71 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v71) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"UseHWTileOffsets\" \"\")), false)";
    int v29 = 4171;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Enumeration, @"SessionName", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v73 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v73) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStr"
          "ingMakeConstantString (\"\" \"SessionName\" \"\")), false)";
    int v29 = 4172;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"BPictures", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v75 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v75) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"BPictures\" \"\")), false)";
    int v29 = 4174;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Boolean, @"EnableAdaptB", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v77 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v77) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"EnableAdaptB\" \"\")), false)";
    int v29 = 4175;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Boolean, @"EnableCompleteGOP", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v79 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v79) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"EnableCompleteGOP\" \"\")), false)";
    int v29 = 4176;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"EdgeReplication", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v81 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v81) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"EdgeReplication\" \"\")), false)";
    int v29 = 4177;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"EnableStatsCollect", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v83 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v83) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"EnableStatsCollect\" \"\")), false)";
    int v29 = 4178;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, kVTCompressionPropertyKey_NumberOfSlices, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v84 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v84) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_NumberOfSlices, false)";
    int v29 = 4179;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Boolean, @"RCMode", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v87 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v87) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"RCMode\" \"\")), false)";
    int v29 = 4180;
    goto LABEL_259;
  }
  CFStringRef v15 = kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration;
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"SVENum", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v89 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v89) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"SVENum\" \"\")), false)";
    int v29 = 4181;
    goto LABEL_259;
  }
LABEL_41:
  if (!sub_4A52C(v8, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowFrameReordering, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v44 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v44) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowFrame"
          "Reordering, false)";
    int v29 = 4184;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, kVTCompressionPropertyKey_SourceFrameCount, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v46 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v46) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_SourceFrameCount, false)";
    int v29 = 4185;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, kVTCompressionPropertyKey_ExpectedFrameRate, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v48 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v48) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_ExpectedFrameRate, false)";
    int v29 = 4186;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"MaximumRealTimeFrameRate", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v50 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v50) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"MaximumRealTimeFrameRate\" \"\")), false)";
    int v29 = 4188;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowOpenGOP, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v52 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v52) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowOpenGOP, false)";
    int v29 = 4189;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, kVTCompressionPropertyKey_AverageBitRate, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v54 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v54) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_AverageBitRate, false)";
    int v29 = 4190;
    goto LABEL_259;
  }
  BOOL v16 = (const void *)kVTCompressionPropertyKey_Priority;
  if (!sub_4A52C(v8, kVTPropertyType_Number, kVTCompressionPropertyKey_Priority, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v56 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v56) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_Priority, false)";
    int v29 = 4191;
    goto LABEL_259;
  }
  int v267 = (const void *)kVTCompressionPropertyKey_InputQueueMaxCount;
  if (!sub_4A52C(v8, kVTPropertyType_Number, kVTCompressionPropertyKey_InputQueueMaxCount, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v58 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v58) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_InputQueueMaxCount, false)";
    int v29 = 4192;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Boolean, kVTCompressionPropertyKey_UsingHardwareAcceleratedVideoEncoder, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v60 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v60) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_UsingHardw"
          "areAcceleratedVideoEncoder, false)";
    int v29 = 4193;
    goto LABEL_259;
  }
  int v266 = (const void *)kVTCompressionPropertyKey_InputPixelFormat;
  if (!sub_4A52C(v8, kVTPropertyType_Number, kVTCompressionPropertyKey_InputPixelFormat, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v62 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v62) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_InputPixelFormat, false)";
    int v29 = 4194;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, @"CodedBuffersOverride", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v64 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v64) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"CodedBuffersOverride\" \"\")), false)";
    int v29 = 4195;
    goto LABEL_259;
  }
  sub_DE9A8(v8);
  int v265 = (const void *)kVTCompressionPropertyKey_QuantizationScalingMatrixPreset;
  if (!sub_4A52C(v8, kVTPropertyType_Number, kVTCompressionPropertyKey_QuantizationScalingMatrixPreset, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v66 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v66) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_Quantizatio"
          "nScalingMatrixPreset, false)";
    int v29 = 4199;
    goto LABEL_259;
  }
  int v264 = (const void *)kVTCompressionPropertyKey_HEVCSyncSampleNALUnitTypes;
  if (!sub_4A52C(v8, kVTPropertyType_Enumeration, kVTCompressionPropertyKey_HEVCSyncSampleNALUnitTypes, 1))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v68 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v68) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Enumeration, kVTCompressionPropertyKey_HEVCSy"
          "ncSampleNALUnitTypes, true)";
    int v29 = 4200;
    goto LABEL_259;
  }
  int v263 = (const void *)kVTCompressionPropertyKey_HEVCTemporalLevelInfoCombinations;
  if (!sub_4A52C(v8, kVTPropertyType_Enumeration, kVTCompressionPropertyKey_HEVCTemporalLevelInfoCombinations, 1))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v70 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v70) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Enumeration, kVTCompressionPropertyKey_HEVCTe"
          "mporalLevelInfoCombinations, true)";
    int v29 = 4201;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Number, kVTCompressionPropertyKey_Quality, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v72 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v72) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_Quality, false)";
    int v29 = 4202;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Boolean, kVTCompressionPropertyKey_EnableQPModulation, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v74 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v74) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_EnableQPMo"
          "dulation, false)";
    int v29 = 4203;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Boolean, kVTCompressionPropertyKey_RealTime, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v76 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v76) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_RealTime, false)";
    int v29 = 4204;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_MasteringDisplayColorVolume, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v78 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v78) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_M"
          "asteringDisplayColorVolume, false)";
    int v29 = 4206;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_ContentLightLevelInfo, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v80 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v80) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_C"
          "ontentLightLevelInfo, false)";
    int v29 = 4207;
    goto LABEL_259;
  }
  if (!sub_4A52C(v8, kVTPropertyType_Boolean, @"CalculateMeanSquaredError", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v82 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v82) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"CalculateMeanSquaredError\" \"\")), false)";
    int v29 = 4208;
    goto LABEL_259;
  }
  CFDictionaryRef theDict = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!theDict)
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v85 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v85) {
      goto LABEL_268;
    }
    int v28 = "PropertyDictionary";
    int v29 = 4214;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxKeyFrameInterval, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v86 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v86) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxKeyFrameInterval, false)";
    int v29 = 4216;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"StrictKeyFrameInterval", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v88 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v88) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"StrictKeyFrameInterval\" \"\")), false)";
    int v29 = 4217;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowFrameReordering, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v90 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v90) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowFrameReordering, false)";
    int v29 = 4218;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowTemporalCompression, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v91 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v91) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowTemporalC"
          "ompression, false)";
    int v29 = 4219;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_AverageBitRate, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v92 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v92) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_AverageBitRate, false)";
    int v29 = 4220;
    goto LABEL_259;
  }
  __uint64_t v17 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!v17)
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v93 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v93) {
      goto LABEL_268;
    }
    int v28 = "Dictionary";
    int v29 = 4225;
    goto LABEL_259;
  }
  long long v18 = v17;
  CFDictionarySetValue(v17, kVTPropertyTypeKey, kVTPropertyType_Enumeration);
  CFDictionarySetValue(v18, kVTPropertyReadWriteStatusKey, kVTPropertyReadWriteStatus_ReadWrite);
  CFDictionarySetValue(v18, kVTPropertyShouldBeSerializedKey, kCFBooleanFalse);
  BOOL v19 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFArrayAppendValue(v19, kVTProfileLevel_HEVC_Main_AutoLevel);
  CFArrayAppendValue(v19, kVTProfileLevel_HEVC_Main10_AutoLevel);
  CFArrayAppendValue(v19, value);
  CFArrayAppendValue(v19, v270);
  CFArrayAppendValue(v19, v269);
  if (v273[1] == 6 || *v273 >= 7) {
    CFArrayAppendValue(v19, kVTProfileLevel_HEVC_Main42210_AutoLevel);
  }
  CFArrayAppendValue(v19, v14);
  CFArrayAppendValue(v19, v268);
  CFDictionarySetValue(v18, kVTPropertySupportedValueListKey, v19);
  if (v19) {
    CFRelease(v19);
  }
  CFDictionarySetValue(theDict, kVTCompressionPropertyKey_ProfileLevel, v18);
  CFRelease(v18);
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EnableWeightedPrediction", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v94 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v94) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableWeightedPrediction\" \"\")), false)";
    int v29 = 4264;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_SourceFrameCount, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v95 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v95) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_SourceFrameCount, false)";
    int v29 = 4265;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_ExpectedFrameRate, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v96 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v96) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_ExpectedFrameRate, false)";
    int v29 = 4266;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"MaximumRealTimeFrameRate", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v97 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v97) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MaximumRealTimeFrameRate\" \"\")), false)";
    int v29 = 4268;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_DataRateLimits, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v98 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v98) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_DataRateLimits, false)";
    int v29 = 4269;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_ConstantBitRate, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v99 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v99) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_ConstantBitRate, false)";
    int v29 = 4270;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"VariableBitRate", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v100 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v100) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"VariableBitRate\" \"\")), false)";
    int v29 = 4271;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_ConvergenceDurationForAverageDataRate, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v101 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v101) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_ConvergenceDura"
          "tionForAverageDataRate, false)";
    int v29 = 4272;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_FrameRateTargetForAverageBitrate, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v102 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v102) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_FrameRateTarget"
          "ForAverageBitrate, false)";
    int v29 = 4273;
    goto LABEL_259;
  }
  uint64_t v20 = sub_DE9A8(theDict);
  CFDictionaryRef v21 = CFDictionaryCreate(kCFAllocatorDefault, 0, 0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!v21)
  {
    if (sub_D1C38(3u, 4))
    {
      int v103 = sub_D1C7C(3u);
      __uint64_t v104 = sub_DDEFC();
      __uint64_t v105 = (const char *)sub_D1CB0(4);
      if (v103)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryCreate failed.\n", v104, 3, v105, "AVE_CreateSupportedPropertyDictionary", 4279, "Dictionary");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryCreate failed.");
    }
    goto LABEL_269;
  }
  CFDictionaryRef v22 = v21;
  CFDictionarySetValue(theDict, kVTCompressionPropertyKey_PixelAspectRatio, v21);
  CFRelease(v22);
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_ExpectedDuration, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v106 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v106) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_ExpectedDuration, false)";
    int v29 = 4290;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, v15, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v107 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v107) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxKeyFrameInte"
          "rvalDuration, false)";
    int v29 = 4291;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"StrictKeyFrameIntervalDuration", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v108 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v108) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"StrictKeyFrameIntervalDuration\" \"\")), false)";
    int v29 = 4292;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_Usage, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v109 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v109) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_Usage, false)";
    int v29 = 4293;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_ThrottleForBackground, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v110 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v110) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_ThrottleForBackground, false)";
    int v29 = 4294;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"AllowOpenGOP", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v111 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v111) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"AllowOpenGOP\" \"\")), false)";
    int v29 = 4295;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"SpatialAdaptiveQPLevel", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v112 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v112) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SpatialAdaptiveQPLevel\" \"\")), false)";
    int v29 = 4296;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"LookAheadFrames", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v113 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v113) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"LookAheadFrames\" \"\")), false)";
    int v29 = 4297;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"PreemptiveLoadBalancing", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v114 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v114) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"PreemptiveLoadBalancing\" \"\")), false)";
    int v29 = 4298;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"EncoderEncryptionData", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v115 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v115) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EncoderEncryptionData\" \"\")), false)";
    int v29 = 4300;
    goto LABEL_259;
  }
  if (!v6[344]) {
    goto LABEL_140;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"InitialQPI", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v116 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v116) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"InitialQPI\" \"\")), false)";
    int v29 = 4304;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"InitialQPP", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v117 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v117) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"InitialQPP\" \"\")), false)";
    int v29 = 4305;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"InitialQPB", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v120 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v120) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"InitialQPB\" \"\")), false)";
    int v29 = 4306;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_AverageNonDroppableFrameRate, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v122 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v122) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_AverageNonDropp"
          "ableFrameRate, false)";
    int v29 = 4307;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"EnableRCFW", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v124 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v124) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableRCFW\" \"\")), false)";
    int v29 = 4308;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"EnableRCDriver", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v126 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v126) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableRCDriver\" \"\")), false)";
    int v29 = 4309;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"SetDbgInternalParams", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v128 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v128) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SetDbgInternalParams\" \"\")), false)";
    int v29 = 4310;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"EnableQPMod", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v130 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v130) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableQPMod\" \"\")), false)";
    int v29 = 4311;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"EnableLambdaMod", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v132 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v132) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableLambdaMod\" \"\")), false)";
    int v29 = 4312;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EnableVarianceQPMod", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v135 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v135) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableVarianceQPMod\" \"\")), false)";
    int v29 = 4313;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"FlatAreaLowQp", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v136 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v136) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"FlatAreaLowQp\" \"\")), false)";
    int v29 = 4314;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EnableLowVarianceQPMod", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v137 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v137) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableLowVarianceQPMod\" \"\")), false)";
    int v29 = 4315;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"UseCAVLCBits", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v138 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v138) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"UseCAVLCBits\" \"\")), false)";
    int v29 = 4316;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"EnableStaticAreasLowQP", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v139 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v139) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableStaticAreasLowQP\" \"\")), false)";
    int v29 = 4317;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"UseAsyncFWScheduling", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v140 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v140) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"UseAsyncFWScheduling\" \"\")), false)";
    int v29 = 4318;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"BPictures", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v141 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v141) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"BPictures\" \"\")), false)";
    int v29 = 4319;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"EnableAdaptB", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v142 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v142) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableAdaptB\" \"\")), false)";
    int v29 = 4320;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EnableCompleteGOP", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v143 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v143) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableCompleteGOP\" \"\")), false)";
    int v29 = 4321;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"LowDelay", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v144 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v144) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"LowDelay\" \"\")), false)";
    int v29 = 4322;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"UltraFlatAreaLowQp", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v145 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v145) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"UltraFlatAreaLowQp\" \"\")), false)";
    int v29 = 4323;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"HevcSplitDecision", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v146 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v146) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"HevcSplitDecision\" \"\")), false)";
    int v29 = 4324;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EnableHevcDeRingingQPMod", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v147 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v147) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableHevcDeRingingQPMod\" \"\")), false)";
    int v29 = 4325;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"ChromaQpOffset", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v148 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v148) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"ChromaQpOffset\" \"\")), false)";
    int v29 = 4326;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"ThroughputRateMode", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v149 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v149) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"ThroughputRateMode\" \"\")), false)";
    int v29 = 4327;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EnableHdrPqRC", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v150 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v150) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableHdrPqRC\" \"\")), false)";
    int v29 = 4328;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"LRMEScaledSrcEn", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v151 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v151) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"LRMEScaledSrcEn\" \"\")), false)";
    int v29 = 4329;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"LRMEOutputType", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v152 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v152) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"LRMEOutputType\" \"\")), false)";
    int v29 = 4330;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"AdaptBPocDelay", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v153 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v153) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"AdaptBPocDelay\" \"\")), false)";
    int v29 = 4331;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"SetMultiPassNum", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v154 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v154) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SetMultiPassNum\" \"\")), false)";
    int v29 = 4332;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"MultiPassConstantQP", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v155 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v155) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MultiPassConstantQP\" \"\")), false)";
    int v29 = 4333;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"MultiPassQPModLevel", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v156 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v156) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MultiPassQPModLevel\" \"\")), false)";
    int v29 = 4334;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"MultiPassMaxQPModLevel", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v157 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v157) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MultiPassMaxQPModLevel\" \"\")), false)";
    int v29 = 4335;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"MultiPassOptions", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v158 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v158) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MultiPassOptions\" \"\")), false)";
    int v29 = 4336;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"MCTFStrengthLevel", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v159 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v159) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MCTFStrengthLevel\" \"\")), false)";
    int v29 = 4337;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"LatencyMode", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v160 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v160) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"LatencyMode\" \"\")), false)";
    int v29 = 4338;
    goto LABEL_259;
  }
  if (*v273 >= 3)
  {
    if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"UseReferenceCompressedBuffers", 0))
    {
      if (!sub_D1C38(3u, 4)) {
        goto LABEL_269;
      }
      int v161 = sub_D1C7C(3u);
      __uint64_t v26 = sub_DDEFC();
      __uint64_t v27 = (const char *)sub_D1CB0(4);
      if (!v161) {
        goto LABEL_268;
      }
      int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"UseReferenceCompressedBuffers\" \"\")), false)";
      int v29 = 4342;
      goto LABEL_259;
    }
    if (!sub_4A52C(theDict, kVTPropertyType_Number, @"EdgeReplication", 0))
    {
      if (!sub_D1C38(3u, 4)) {
        goto LABEL_269;
      }
      int v162 = sub_D1C7C(3u);
      __uint64_t v26 = sub_DDEFC();
      __uint64_t v27 = (const char *)sub_D1CB0(4);
      if (!v162) {
        goto LABEL_268;
      }
      int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"EdgeReplication\" \"\")), false)";
      int v29 = 4343;
      goto LABEL_259;
    }
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Enumeration, @"SessionName", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v163 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v163) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"SessionName\" \"\")), false)";
    int v29 = 4346;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"HierarchicalB", 1))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v164 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v164) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"HierarchicalB\" \"\")), true)";
    int v29 = 4347;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"RCMode", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v165 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v165) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"RCMode\" \"\")), false)";
    int v29 = 4348;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"EnableMultipleScalingMatrices", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v166 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v166) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableMultipleScalingMatrices\" \"\")), false)";
    int v29 = 4349;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"SVENum", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v167 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v167) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SVENum\" \"\")), false)";
    int v29 = 4350;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"LrmePipeSyncMode", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v168 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v168) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"LrmePipeSyncMode\" \"\")), false)";
    int v29 = 4351;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EnableSEITagInsertion", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v169 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v169) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableSEITagInsertion\" \"\")), false)";
    int v29 = 4352;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EnableSliceEncodingMode", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v170 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v170) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableSliceEncodingMode\" \"\")), false)";
    int v29 = 4353;
    goto LABEL_259;
  }
LABEL_140:
  if (*v273 >= 3 && !sub_4A52C(theDict, kVTPropertyType_Boolean, @"ForceRefUncompressed", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v119 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v119) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"ForceRefUncompressed\" \"\")), false)";
    int v29 = 4357;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"CalculateMeanSquaredError", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v118 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v118) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"CalculateMeanSquaredError\" \"\")), false)";
    int v29 = 4360;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_PrioritizeEncodingSpeedOverQuality, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v121 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v121) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_PrioritizeEnco"
          "dingSpeedOverQuality, false)";
    int v29 = 4361;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_OutputBitDepth, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v123 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v123) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_OutputBitDepth, false)";
    int v29 = 4362;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"SAOMode", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v125 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v125) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SAOMode\" \"\")), false)";
    int v29 = 4363;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_NumberOfSlices, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v127 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v127) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_NumberOfSlices, false)";
    int v29 = 4364;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, v16, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v129 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v129) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_Priority, false)";
    int v29 = 4365;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"DeblockingFiltering", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v131 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v131) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"DeblockingFiltering\" \"\")), false)";
    int v29 = 4366;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"DebugMetadataSEI", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v133 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v133) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"DebugMetadataSEI\" \"\")), false)";
    int v29 = 4367;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"DebugMetadataSEIuseEPB", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v171 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v171) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"DebugMetadataSEIuseEPB\" \"\")), false)";
    int v29 = 4368;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, v267, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v172 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v172) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_InputQueueMaxCount, false)";
    int v29 = 4369;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EnableUserQPForFacetime", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v173 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v173) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableUserQPForFacetime\" \"\")), false)";
    int v29 = 4370;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Enumeration, kVTCompressionPropertyKey_UserDPBFramesForFaceTime, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v174 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v174) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, kVTCompressionPropertyKey_UserDPBFra"
          "mesForFaceTime, false)";
    int v29 = 4371;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Enumeration, @"DPBRequirements", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v175 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v175) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"DPBRequirements\" \"\")), false)";
    int v29 = 4372;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EnableUserRefForFacetime", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v176 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v176) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableUserRefForFacetime\" \"\")), false)";
    int v29 = 4373;
    goto LABEL_259;
  }
  BOOL v23 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!v23)
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v134 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v134) {
      goto LABEL_268;
    }
    int v28 = "Dictionary";
    int v29 = 4380;
    goto LABEL_259;
  }
  __uint64_t v24 = v23;
  CFDictionarySetValue(v23, kVTPropertyReadWriteStatusKey, kVTPropertyReadWriteStatus_ReadWrite);
  CFDictionarySetValue(v24, kVTPropertyShouldBeSerializedKey, kCFBooleanFalse);
  CFDictionarySetValue(theDict, kVTCompressionPropertyKey_MultiPassStorage, v24);
  CFRelease(v24);
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_Quality, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v177 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v177) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_Quality, false)";
    int v29 = 4393;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_RealTime, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v178 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v178) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_RealTime, false)";
    int v29 = 4396;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_UsingHardwareAcceleratedVideoEncoder, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v179 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v179) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_UsingHardwareA"
          "cceleratedVideoEncoder, false)";
    int v29 = 4397;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"EnableStatsCollect", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v180 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v180) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableStatsCollect\" \"\")), false)";
    int v29 = 4398;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EnableMultiReferenceP", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v181 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v181) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableMultiReferenceP\" \"\")), false)";
    int v29 = 4399;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"MultiReferencePSpacing", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v182 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v182) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MultiReferencePSpacing\" \"\")), false)";
    int v29 = 4400;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"log2_max_minus4", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v183 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v183) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"log2_max_minus4\" \"\")), false)";
    int v29 = 4401;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, v266, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v184 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v184) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_InputPixelFormat, false)";
    int v29 = 4402;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_PerceptualQualityOptimization, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v185 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v185) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_PerceptualQual"
          "ityOptimization, false)";
    int v29 = 4403;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"CodedBuffersOverride", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v186 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v186) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"CodedBuffersOverride\" \"\")), false)";
    int v29 = 4404;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"EnableMBInputCtrl", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v187 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v187) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableMBInputCtrl\" \"\")), false)";
    int v29 = 4405;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Enumeration, @"UserRPSForFaceTime", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v188 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v188) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"UserRPSForFaceTime\" \"\")), false)";
    int v29 = 4406;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_VideoResolutionAdaptation, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v189 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v189) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_VideoResolutio"
          "nAdaptation, false)";
    int v29 = 4407;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_VideoResolutionAdaptationType, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v190 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v190) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_VideoResolutio"
          "nAdaptationType, false)";
    int v29 = 4408;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"ChromaQPIndexOffsetMultiPPS", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v191 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v191) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"ChromaQPIndexOffsetMultiPPS\" \"\")), false)";
    int v29 = 4409;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"iChatUsageString", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v192 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v192) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"iChatUsageString\" \"\")), false)";
    int v29 = 4410;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_UserParameterSetsIds, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v193 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v193) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_UserParameterSetsIds, false)";
    int v29 = 4411;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"BaseLayerFrameRate", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v194 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v194) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"BaseLayerFrameRate\" \"\")), false)";
    int v29 = 4412;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"IntraRefreshFrames", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v195 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v195) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"IntraRefreshFrames\" \"\")), false)";
    int v29 = 4413;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, v265, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v196 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v196) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_QuantizationSca"
          "lingMatrixPreset, false)";
    int v29 = 4414;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxAllowedFrameQP, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v197 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v197) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxAllowedFrameQP, false)";
    int v29 = 4415;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_MinAllowedFrameQP, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v198 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v198) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_MinAllowedFrameQP, false)";
    int v29 = 4416;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionProperty_SoftMinQuantizationParameter, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v199 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v199) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionProperty_SoftMinQuantizatio"
          "nParameter, false)";
    int v29 = 4417;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionProperty_SoftMaxQuantizationParameter, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v200 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v200) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionProperty_SoftMaxQuantizatio"
          "nParameter, false)";
    int v29 = 4418;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"ForceSliceRPS", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v201 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v201) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"ForceSliceRPS\" \"\")), false)";
    int v29 = 4419;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_MaxFrameDelayCount, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v202 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v202) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_MaxFrameDelayCount, false)";
    int v29 = 4420;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"MaximizePowerEfficiency", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v203 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v203) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"MaximizePowerEfficiency\" \"\")), false)";
    int v29 = 4421;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_MinimizeMemoryUsage, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v204 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v204) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_MinimizeMemoryUsage, false)";
    int v29 = 4422;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_InsertTrailingBytes, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v205 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v205) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_Inser"
          "tTrailingBytes, false)";
    int v29 = 4423;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_AmbientViewingEnvironment, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v206 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v206) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_Ambie"
          "ntViewingEnvironment, false)";
    int v29 = 4424;
    goto LABEL_259;
  }
  if (*v273 >= 3 && !sub_4A52C(theDict, kVTPropertyType_Boolean, @"RelaxAverageBitRateTarget", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v207 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v207) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"RelaxAverageBitRateTarget\" \"\")), false)";
    int v29 = 4427;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_RequiredHEVCSequenceParameterSetID, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v208 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v208) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_RequiredHEVCSeq"
          "uenceParameterSetID, false)";
    int v29 = 4430;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_RequiredHEVCPictureParameterSetID, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v209 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v209) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_RequiredHEVCPic"
          "tureParameterSetID, false)";
    int v29 = 4431;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_RequireDeterministicDependencyAndReordering, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v210 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v210) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_RequireDetermi"
          "nisticDependencyAndReordering, false)";
    int v29 = 4432;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Enumeration, v264, 1))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v211 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v211) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, kVTCompressionPropertyKey_HEVCSyncSa"
          "mpleNALUnitTypes, true)";
    int v29 = 4433;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Enumeration, v263, 1))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v212 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v212) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, kVTCompressionPropertyKey_HEVCTempor"
          "alLevelInfoCombinations, true)";
    int v29 = 4434;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_EncodesAlpha, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v213 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v213) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_EncodesAlpha, false)";
    int v29 = 4435;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertySupportedValueListKey, @"RequiredHEVCVideoParameterSetRepFormatBitDepths", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v214 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v214) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertySupportedValueListKey, ((CFStringRef) __builtin___CFSt"
          "ringMakeConstantString (\"\" \"RequiredHEVCVideoParameterSetRepFormatBitDepths\" \"\")), false)";
    int v29 = 4437;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertySupportedValueListKey, @"RequiredHEVCVideoParameterSetRepFormatChromaFormatIdcs", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v215 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v215) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertySupportedValueListKey, ((CFStringRef) __builtin___CFSt"
          "ringMakeConstantString (\"\" \"RequiredHEVCVideoParameterSetRepFormatChromaFormatIdcs\" \"\")), false)";
    int v29 = 4439;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"RequiredHEVCSequenceParameterSetRepFormatIndex", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v216 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v216) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"RequiredHEVCSequenceParameterSetRepFormatIndex\" \"\")), false)";
    int v29 = 4441;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EnableTimingInfoMetadata", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v217 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v217) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableTimingInfoMetadata\" \"\")), false)";
    int v29 = 4442;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EnableContentColourVolumeSEI", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v218 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v218) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableContentColourVolumeSEI\" \"\")), false)";
    int v29 = 4443;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_RequiredHEVCVideoParameterSetAlphaLayerID, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v219 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v219) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_RequiredHEVCVid"
          "eoParameterSetAlphaLayerID, false)";
    int v29 = 4444;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, kVTCompressionPropertyKey_Quality, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v220 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v220) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_Quality, false)";
    int v29 = 4445;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"DroppablePFramesOnly", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v221 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v221) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"DroppablePFramesOnly\" \"\")), false)";
    int v29 = 4446;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"AllocCodedBufferHalfSize", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v222 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v222) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"AllocCodedBufferHalfSize\" \"\")), false)";
    int v29 = 4448;
    goto LABEL_259;
  }
  if (*v273 >= 8 && !sub_4A52C(theDict, kVTPropertyType_Number, @"lrmeRCPassNum", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v223 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v223) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"lrmeRCPassNum\" \"\")), false)";
    int v29 = 4451;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EncodesDisparity", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v224 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v224) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EncodesDisparity\" \"\")), false)";
    int v29 = 4453;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EncodesDepth", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v225 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v225) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EncodesDepth\" \"\")), false)";
    int v29 = 4454;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EnableVUI", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v226 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v226) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableVUI\" \"\")), false)";
    int v29 = 4456;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EnableVUIBitstreamRestriction", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v227 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v227) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableVUIBitstreamRestriction\" \"\")), false)";
    int v29 = 4457;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"EnableMultiSliceStats", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v228 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v228) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableMultiSliceStats\" \"\")), false)";
    int v29 = 4458;
    goto LABEL_259;
  }
  if (*v273 < 16) {
    goto LABEL_228;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_TemporalNoiseReduction, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v229 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v229) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_TemporalNoiseR"
          "eduction, false)";
    int v29 = 4462;
    goto LABEL_259;
  }
  if (*v273 < 22) {
    goto LABEL_228;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"SubjectiveDistortion32Weight0", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v230 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v230) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SubjectiveDistortion32Weight0\" \"\")), false)";
    int v29 = 4466;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"SubjectiveDistortion32Weight1", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v231 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v231) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SubjectiveDistortion32Weight1\" \"\")), false)";
    int v29 = 4467;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"SubjectiveDistortion32Weight2", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v232 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v232) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SubjectiveDistortion32Weight2\" \"\")), false)";
    int v29 = 4468;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"SubjectiveDistortion32Offset", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v233 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v233) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SubjectiveDistortion32Offset\" \"\")), false)";
    int v29 = 4469;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"SubjectiveDistortion32Scale", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v234 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v234) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SubjectiveDistortion32Scale\" \"\")), false)";
    int v29 = 4470;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"MultipleFTQNum", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v235 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v235) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MultipleFTQNum\" \"\")), false)";
    int v29 = 4471;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"MultipleFTQType", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v236 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v236) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MultipleFTQType\" \"\")), false)";
    int v29 = 4472;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"MultipleFTQSameLambda", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v237 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v237) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"MultipleFTQSameLambda\" \"\")), false)";
    int v29 = 4473;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"ForceZeroMVEn0", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v238 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v238) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"ForceZeroMVEn0\" \"\")), false)";
    int v29 = 4474;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, @"ForceZeroResEn", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v239 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v239) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"ForceZeroResEn\" \"\")), false)";
    int v29 = 4475;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"LRMEFSMVCostMode", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v240 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v240) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"LRMEFSMVCostMode\" \"\")), false)";
    int v29 = 4476;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"LRMEFSLambdaLinear", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v241 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v241) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"LRMEFSLambdaLinear\" \"\")), false)";
    int v29 = 4477;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"MCTFEdgeCount", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v242 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v242) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MCTFEdgeCount\" \"\")), false)";
    int v29 = 4478;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"MCTFEdgeThresh", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v243 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v243) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MCTFEdgeThresh\" \"\")), false)";
    int v29 = 4479;
    goto LABEL_259;
  }
LABEL_228:
  if (!sub_4A52C(theDict, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_MVHEVCVideoLayerIDs, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v244 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v244) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_MVHEV"
          "CVideoLayerIDs, false)";
    int v29 = 4483;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_MVHEVCViewIDs, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v245 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v245) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_MVHEV"
          "CViewIDs, false)";
    int v29 = 4484;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_MVHEVCLeftAndRightViewIDs, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v246 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v246) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_MVHEV"
          "CLeftAndRightViewIDs, false)";
    int v29 = 4485;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_RequiredMVHEVCPictureParameterSetIDs, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v247 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v247) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_Requi"
          "redMVHEVCPictureParameterSetIDs, false)";
    int v29 = 4488;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_RequiredMVHEVCSequenceParameterSetIDs, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v248 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v248) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_Requi"
          "redMVHEVCSequenceParameterSetIDs, false)";
    int v29 = 4491;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_RequiredMVHEVCVideoParameterSetAlphaVideoLayerIDs, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v249 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v249) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_Requi"
          "redMVHEVCVideoParameterSetAlphaVideoLayerIDs, false)";
    int v29 = 4494;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_MoreFramesAfterEnd, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v250 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v250) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_MoreFramesAfterEnd, false)";
    int v29 = 4498;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_MoreFramesBeforeStart, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v251 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v251) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_MoreFramesBeforeStart, false)";
    int v29 = 4500;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"RecommendedParallelizationLimit", 1))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v252 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v252) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"RecommendedParallelizationLimit\" \"\")), true)";
    int v29 = 4503;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Enumeration, @"RecommendedParallelizedSubdivisionMinimumDuration", 1))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v253 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v253) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"RecommendedParallelizedSubdivisionMinimumDuration\" \"\")), true)";
    int v29 = 4506;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"RecommendedParallelizedSubdivisionMinimumFrameCount", 1))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v254 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v254) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"RecommendedParallelizedSubdivisionMinimumFrameCount\" \"\")), true)";
    int v29 = 4508;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"MotionEstimationSearchMode", 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v255 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v255) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MotionEstimationSearchMode\" \"\")), false)";
    int v29 = 4511;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Enumeration, @"SupportedMotionSearchModes", 1))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v256 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v256) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"SupportedMotionSearchModes\" \"\")), true)";
    int v29 = 4513;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Number, @"MaxEncoderPixelRate", 1))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v257 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v257) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MaxEncoderPixelRate\" \"\")), true)";
    int v29 = 4516;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Enumeration, @"NumberOfCores", 1))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v258 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v258) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"NumberOfCores\" \"\")), true)";
    int v29 = 4518;
    goto LABEL_259;
  }
  if (!sub_4A52C(theDict, kVTPropertyType_Boolean, kVTCompressionPropertyKey_Paravirtualized, 0))
  {
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_269;
    }
    int v259 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v259) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_Paravirtualized, false)";
    int v29 = 4521;
    goto LABEL_259;
  }
  if (sub_4A52C(theDict, kVTPropertyType_Number, @"DebugFeature", 0))
  {
    *a2 = theDict;
    *__uint64_t v272 = v8;
    goto LABEL_270;
  }
  if (sub_D1C38(3u, 4))
  {
    int v260 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (!v260) {
      goto LABEL_268;
    }
    int v28 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"DebugFeature\" \"\")), false)";
    int v29 = 4523;
    goto LABEL_259;
  }
LABEL_269:
  uint64_t v20 = 4294954392;
LABEL_270:
  if (sub_D1C38(0x14u, 7))
  {
    int v35 = sub_D1C7C(0x14u);
    __uint64_t v36 = sub_DDEFC();
    uint64_t v37 = (const char *)sub_D1CB0(7);
    if (v35)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_CreateSupportedPropertyDictionary err %d \n", v36, 20, v37, v20);
      __uint64_t v38 = sub_DDEFC();
      int v261 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_CreateSupportedPropertyDictionary err %d ", v38, 20, v261, v20);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_CreateSupportedPropertyDictionary err %d ", v36, 20, v37, v20);
    }
  }
  return v20;
}

uint64_t sub_5A6A4(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (sub_D1C38(0x14u, 6))
  {
    int v3 = sub_D1C7C(0x14u);
    __uint64_t v4 = sub_DDEFC();
    int v5 = (const char *)sub_D1CB0(6);
    if (v3)
    {
      printf("%lld %d AVE %s: Enter %s %p\n", v4, 20, v5, "AVE_HEVCInvalidate", a1);
      __uint64_t v6 = sub_DDEFC();
      __uint64_t v36 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: Enter %s %p", v6, 20, v36, "AVE_HEVCInvalidate", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Enter %s %p", v4, 20, v5, "AVE_HEVCInvalidate", a1);
    }
  }
  if (DerivedStorage)
  {
    uint64_t v7 = DerivedStorage + 183440;
    __uint64_t v8 = (pthread_mutex_t *)(DerivedStorage + 183448);
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
    if (sub_D1C38(0x14u, 7))
    {
      int v9 = sub_D1C7C(0x14u);
      __uint64_t v10 = sub_DDEFC();
      int32x2_t v11 = (const char *)sub_D1CB0(7);
      if (v9)
      {
        printf("%lld %d AVE %s: FIG: ENTER AVE_HEVCFinalize\n", v10, 20, v11);
        __uint64_t v12 = sub_DDEFC();
        uint64_t v37 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCFinalize", v12, 20, v37);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCFinalize", v10, 20, v11);
      }
    }
    uint64_t v17 = *(void *)(DerivedStorage + 183648);
    __uint64_t v18 = sub_DDEFC();
    sub_C086C(v17, 4u, v18);
    if (*(_DWORD *)(DerivedStorage + 183512)) {
      *(void *)(DerivedStorage + 183520) = sub_DDEFC();
    }
    __uint64_t v41 = sub_DDEFC();
    if (*(_DWORD *)v7 == 30568 && (uint64_t v19 = sub_B490C(*(void ***)(DerivedStorage + 24), &v41), v19))
    {
      uint64_t v20 = v19;
      if (sub_D1C38(3u, 4))
      {
        int v21 = sub_D1C7C(3u);
        __uint64_t v22 = sub_DDEFC();
        BOOL v23 = (const char *)sub_D1CB0(4);
        if (v21)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Complete failed 0x%x\n", v22, 3, v23, "AVE_HEVCInvalidate", 4799, "err == noErr", v20);
          __uint64_t v22 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Complete failed 0x%x", v22);
      }
    }
    else
    {
      if (*(_DWORD *)(DerivedStorage + 183512))
      {
        *(void *)(DerivedStorage + 183528) = sub_DDEFC();
        if (sub_D1C38(0x18u, 6))
        {
          int v24 = sub_D1C7C(0x18u);
          __uint64_t v25 = sub_DDEFC();
          __uint64_t v26 = (const char *)sub_D1CB0(6);
          uint64_t v27 = *(void *)(v7 + 88) - *(void *)(v7 + 80);
          if (v24)
          {
            printf("%lld %d AVE %s: FIG: Invalidate took %lld us\n", v25, 24, v26, v27);
            __uint64_t v28 = sub_DDEFC();
            __uint64_t v39 = (const char *)sub_D1CB0(6);
            syslog(3, "%lld %d AVE %s: FIG: Invalidate took %lld us", v28, 24, v39, *(void *)(v7 + 88) - *(void *)(v7 + 80));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: Invalidate took %lld us", v25, 24, v26, v27);
          }
        }
      }
      uint64_t v29 = *(void *)(v7 + 208);
      __uint64_t v30 = sub_DDEFC();
      sub_C0C44(v29, 4u, v30);
      uint64_t v20 = 0;
    }
    pthread_mutex_unlock(v8);
  }
  else
  {
    if (sub_D1C38(3u, 4))
    {
      int v13 = sub_D1C7C(3u);
      __uint64_t v14 = sub_DDEFC();
      CFStringRef v15 = (const char *)sub_D1CB0(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v14, 3, v15, "AVE_HEVCInvalidate", 4777, "encoderPrivateStorage");
        __uint64_t v16 = sub_DDEFC();
        __uint64_t v38 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v16, 3, v38, "AVE_HEVCInvalidate", 4777, "encoderPrivateStorage");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v14, 3, v15, "AVE_HEVCInvalidate", 4777, "encoderPrivateStorage");
      }
    }
    uint64_t v20 = 4294954384;
  }
  if (sub_D1C38(0x14u, 6))
  {
    int v31 = sub_D1C7C(0x14u);
    __uint64_t v32 = sub_DDEFC();
    int v33 = (const char *)sub_D1CB0(6);
    if (v31)
    {
      printf("%lld %d AVE %s: Exit %s %p %d\n", v32, 20, v33, "AVE_HEVCInvalidate", a1, v20);
      __uint64_t v34 = sub_DDEFC();
      int v40 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v34, 20, v40, "AVE_HEVCInvalidate", a1, v20);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v32, 20, v33, "AVE_HEVCInvalidate", a1, v20);
    }
  }
  return v20;
}

void sub_5AB74(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (sub_D1C38(0x14u, 6))
  {
    int v3 = sub_D1C7C(0x14u);
    __uint64_t v4 = sub_DDEFC();
    int v5 = (const char *)sub_D1CB0(6);
    if (v3)
    {
      printf("%lld %d AVE %s: Enter %s %p\n", v4, 20, v5, "AVE_HEVCFinalize", a1);
      __uint64_t v6 = sub_DDEFC();
      __uint64_t v41 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: Enter %s %p", v6, 20, v41, "AVE_HEVCFinalize", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Enter %s %p", v4, 20, v5, "AVE_HEVCFinalize", a1);
    }
  }
  if (DerivedStorage)
  {
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
    uint64_t v7 = *(void *)(DerivedStorage + 183648);
    __uint64_t v8 = sub_DDEFC();
    sub_C086C(v7, 1u, v8);
    if (*(_DWORD *)(DerivedStorage + 183512)) {
      *(void *)(DerivedStorage + 183520) = sub_DDEFC();
    }
    __uint64_t v9 = sub_DDEFC();
    __uint64_t v10 = *(_DWORD **)(DerivedStorage + 183640);
    if (v10)
    {
      sub_CA44C(v10);
      operator delete();
    }
    if ((*(_DWORD *)(DerivedStorage + 183440) - 30567) <= 1)
    {
      __uint64_t v46 = v9;
      sub_B1E0C(*(void ***)(DerivedStorage + 24), (uint64_t *)&v46, 1);
    }
    int v11 = sub_AFB20(*(unsigned int **)(DerivedStorage + 24));
    *(void *)(DerivedStorage + 24) = 0;
    if (v11)
    {
      if (sub_D1C38(3u, 4))
      {
        int v12 = sub_D1C7C(3u);
        __uint64_t v13 = sub_DDEFC();
        __uint64_t v14 = (const char *)sub_D1CB0(4);
        if (v12)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Destroy failed.\n", v13, 3, v14, "AVE_HEVCFinalize", 4883, "err == noErr");
          __uint64_t v15 = sub_DDEFC();
          int v42 = (const char *)sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Destroy failed.", v15, 3, v42, "AVE_HEVCFinalize", 4883, "err == noErr");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Destroy failed.", v13, 3, v14, "AVE_HEVCFinalize", 4883, "err == noErr");
        }
      }
      int v25 = -12912;
    }
    else
    {
      if (*(_DWORD *)(DerivedStorage + 183512))
      {
        *(void *)(DerivedStorage + 183528) = sub_DDEFC();
        if (sub_D1C38(0x18u, 6))
        {
          int v20 = sub_D1C7C(0x18u);
          __uint64_t v21 = sub_DDEFC();
          __uint64_t v22 = (const char *)sub_D1CB0(6);
          uint64_t v23 = *(void *)(DerivedStorage + 183528) - *(void *)(DerivedStorage + 183520);
          if (v20)
          {
            printf("%lld %d AVE %s: FIG: Finalize took %lld us\n", v21, 24, v22, v23);
            __uint64_t v24 = sub_DDEFC();
            int v44 = (const char *)sub_D1CB0(6);
            syslog(3, "%lld %d AVE %s: FIG: Finalize took %lld us", v24, 24, v44, *(void *)(DerivedStorage + 183528) - *(void *)(DerivedStorage + 183520));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: Finalize took %lld us", v21, 24, v22, v23);
          }
        }
      }
      uint64_t v26 = *(void *)(DerivedStorage + 183648);
      __uint64_t v27 = sub_DDEFC();
      sub_C0C44(v26, 1u, v27);
      sub_C1018(*(void *)(DerivedStorage + 183648));
      sub_C13FC(*(unsigned int **)(DerivedStorage + 183648), 22, 6, 0, 0);
      int v25 = 0;
    }
    sub_C8E18();
    __uint64_t v28 = *(_OWORD **)(DerivedStorage + 183648);
    if (v28)
    {
      sub_C03A4(v28);
      *(void *)(DerivedStorage + 183648) = 0;
    }
    uint64_t v29 = *(const void **)(DerivedStorage + 183656);
    if (v29)
    {
      sub_4E9C(v29);
      sub_4178(*(void **)(DerivedStorage + 183656));
      *(void *)(DerivedStorage + 183656) = 0;
    }
    __uint64_t v30 = *(uint64_t **)(DerivedStorage + 183664);
    if (v30)
    {
      sub_8C08(v30);
      *(void *)(DerivedStorage + 183664) = 0;
    }
    int v31 = *(const void **)(DerivedStorage + 183584);
    if (v31)
    {
      CFRelease(v31);
      *(void *)(DerivedStorage + 183584) = 0;
    }
    __uint64_t v32 = *(const void **)(DerivedStorage + 183552);
    if (v32)
    {
      CFRelease(v32);
      *(void *)(DerivedStorage + 183552) = 0;
    }
    int v33 = *(const void **)(DerivedStorage + 183688);
    if (v33)
    {
      CFRelease(v33);
      *(void *)(DerivedStorage + 183688) = 0;
    }
    __uint64_t v34 = *(const void **)(DerivedStorage + 185504);
    if (v34)
    {
      CFRelease(v34);
      *(void *)(DerivedStorage + 185504) = 0;
    }
    int v35 = *(const void **)(DerivedStorage + 16);
    if (v35)
    {
      CFRelease(v35);
      *(void *)(DerivedStorage + 16) = 0;
    }
    __uint64_t v36 = *(const void **)(DerivedStorage + 183696);
    if (v36)
    {
      CFRelease(v36);
      *(void *)(DerivedStorage + 183696) = 0;
    }
    sub_B020((const void *)(DerivedStorage + 185024));
    pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 183448));
    pthread_mutex_destroy((pthread_mutex_t *)(DerivedStorage + 183448));
  }
  else
  {
    if (sub_D1C38(3u, 4))
    {
      int v16 = sub_D1C7C(3u);
      __uint64_t v17 = sub_DDEFC();
      __uint64_t v18 = (const char *)sub_D1CB0(4);
      if (v16)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v17, 3, v18, "AVE_HEVCFinalize", 4844, "encoderPrivateStorage");
        __uint64_t v19 = sub_DDEFC();
        int v43 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v19, 3, v43, "AVE_HEVCFinalize", 4844, "encoderPrivateStorage");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v17, 3, v18, "AVE_HEVCFinalize", 4844, "encoderPrivateStorage");
      }
    }
    sub_C8E18();
    int v25 = -12912;
  }
  if (sub_D1C38(0x14u, 6))
  {
    int v37 = sub_D1C7C(0x14u);
    __uint64_t v38 = sub_DDEFC();
    __uint64_t v39 = (const char *)sub_D1CB0(6);
    if (v37)
    {
      printf("%lld %d AVE %s: Exit %s %p %d\n", v38, 20, v39, "AVE_HEVCFinalize", a1, v25);
      __uint64_t v40 = sub_DDEFC();
      int v45 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v40, 20, v45, "AVE_HEVCFinalize", a1, v25);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v38, 20, v39, "AVE_HEVCFinalize", a1, v25);
    }
  }
}

uint64_t sub_5B088(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  __uint64_t v8 = (const void **)DerivedStorage;
  if (!DerivedStorage)
  {
    if (sub_D1C38(3u, 4))
    {
      int v14 = sub_D1C7C(3u);
      __uint64_t v15 = sub_DDEFC();
      int v16 = (const char *)sub_D1CB0(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v15, 3, v16, "AVE_HEVCCopyProperty", 13321, "encoderPrivateStorage");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.");
    }
    goto LABEL_22;
  }
  __uint64_t v9 = (int *)(DerivedStorage + 183420);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
  if (sub_D1C38(0x1Eu, 8))
  {
    int v10 = sub_D1C7C(0x1Eu);
    __uint64_t v11 = sub_DDEFC();
    int v12 = (const char *)sub_D1CB0(8);
    if (v10)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_HEVCCopyProperty\n", v11, 30, v12);
      __uint64_t v13 = sub_DDEFC();
      v942 = (const char *)sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCCopyProperty", v13, 30, v942);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCCopyProperty", v11, 30, v12);
    }
  }
  if (CFEqual(a2, kVTCompressionPropertyKey_ThrottleForBackground))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v17 = sub_D1C7C(0x1Eu);
      __uint64_t v18 = sub_DDEFC();
      __uint64_t v19 = (const char *)sub_D1CB0(6);
      int v20 = *((unsigned __int8 *)v8 + 183544);
      if (v17)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ThrottleForBackground return %u\n", v18, 30, v19, v20);
        __uint64_t v21 = sub_DDEFC();
        v943 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ThrottleForBackground return %u", v21, 30, v943, *((unsigned __int8 *)v8 + 183544));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ThrottleForBackground return %u", v18, 30, v19, v20);
      }
    }
    int v27 = *((unsigned __int8 *)v8 + 183544);
    goto LABEL_19;
  }
  if (CFEqual(a2, kVTCompressionPropertyKey_SourceFrameCount))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v22 = sub_D1C7C(0x1Eu);
      __uint64_t v23 = sub_DDEFC();
      __uint64_t v24 = (const char *)sub_D1CB0(6);
      int v25 = *((_DWORD *)v8 + 55);
      if (v22)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_SourceFrameCount return %u\n", v23, 30, v24, v25);
        __uint64_t v26 = sub_DDEFC();
        v944 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_SourceFrameCount return %u", v26, 30, v944, *((_DWORD *)v8 + 55));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_SourceFrameCount return %u", v23, 30, v24, v25);
      }
    }
    int v33 = (void **)((char *)v8 + 220);
    goto LABEL_29;
  }
  if (CFEqual(a2, kVTCompressionPropertyKey_ProfileLevel))
  {
    *a4 = CFStringCreateWithCString(0, (const char *)v8 + 185024, 0);
    if (sub_D1C38(0x1Eu, 6))
    {
      int v30 = sub_D1C7C(0x1Eu);
      __uint64_t v31 = sub_DDEFC();
      __uint64_t v32 = (const char *)sub_D1CB0(6);
      if (v30)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ProfileLevel return %s\n", v31, 30, v32, (const char *)v8 + 185024);
        sub_DDEFC();
        sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ProfileLevel return %s");
    }
    goto LABEL_38;
  }
  int v37 = v8 + 2330;
  if (CFEqual(a2, @"EnableWeightedPrediction"))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v38 = sub_D1C7C(0x1Eu);
      __uint64_t v39 = sub_DDEFC();
      __uint64_t v40 = (const char *)sub_D1CB0(6);
      int v41 = *((unsigned __int8 *)v8 + 18743);
      if (v38)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableWeightedPrediction return %u\n", v39, 30, v40, v41);
        __uint64_t v42 = sub_DDEFC();
        v945 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableWeightedPrediction return %u", v42, 30, v945, *((unsigned __int8 *)v8 + 18743));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableWeightedPrediction return %u", v39, 30, v40, v41);
      }
    }
    int v27 = *((unsigned __int8 *)v8 + 18743);
    goto LABEL_19;
  }
  if (CFEqual(a2, kVTCompressionPropertyKey_AverageBitRate))
  {
    int v43 = *((_DWORD *)v8 + 48);
    LODWORD(keys[0]) = v43;
    if (sub_D1C38(0x1Eu, 6))
    {
      int v44 = sub_D1C7C(0x1Eu);
      __uint64_t v45 = sub_DDEFC();
      __uint64_t v46 = (const char *)sub_D1CB0(6);
      if (v44)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AverageBitRate return %d\n", v45, 30, v46, v43);
        sub_DDEFC();
        sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AverageBitRate return %d");
    }
    goto LABEL_50;
  }
  int v47 = (unsigned __int8 *)v8 + 109737;
  if (CFEqual(a2, kVTCompressionPropertyKey_ColorPrimaries))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v48 = sub_D1C7C(0x1Eu);
      __uint64_t v49 = sub_DDEFC();
      int v50 = (const char *)sub_D1CB0(6);
      int v51 = *((_DWORD *)v8 + 27442);
      if (v48)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ColorPrimaries return %d\n", v49, 30, v50, v51);
        __uint64_t v52 = sub_DDEFC();
        v946 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ColorPrimaries return %d", v52, 30, v946, *((_DWORD *)v8 + 27442));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ColorPrimaries return %d", v49, 30, v50, v51);
      }
    }
    StringForIntegerCodePoint = (void *)CVColorPrimariesGetStringForIntegerCodePoint(*((_DWORD *)v8 + 27442));
    goto LABEL_32;
  }
  if (CFEqual(a2, kVTCompressionPropertyKey_TransferFunction))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v53 = sub_D1C7C(0x1Eu);
      __uint64_t v54 = sub_DDEFC();
      int v55 = (const char *)sub_D1CB0(6);
      int v56 = *((_DWORD *)v8 + 27443);
      if (v53)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_TransferFunction return %d\n", v54, 30, v55, v56);
        __uint64_t v57 = sub_DDEFC();
        v947 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_TransferFunction return %d", v57, 30, v947, *((_DWORD *)v8 + 27443));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_TransferFunction return %d", v54, 30, v55, v56);
      }
    }
    StringForIntegerCodePoint = (void *)CVTransferFunctionGetStringForIntegerCodePoint(*((_DWORD *)v8 + 27443));
    goto LABEL_32;
  }
  if (CFEqual(a2, kVTCompressionPropertyKey_YCbCrMatrix))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v58 = sub_D1C7C(0x1Eu);
      __uint64_t v59 = sub_DDEFC();
      int v60 = (const char *)sub_D1CB0(6);
      int v61 = *((_DWORD *)v8 + 27444);
      if (v58)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_YCbCrMatrix return %d\n", v59, 30, v60, v61);
        __uint64_t v62 = sub_DDEFC();
        v948 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_YCbCrMatrix return %d", v62, 30, v948, *((_DWORD *)v8 + 27444));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_YCbCrMatrix return %d", v59, 30, v60, v61);
      }
    }
    StringForIntegerCodePoint = (void *)CVYCbCrMatrixGetStringForIntegerCodePoint(*((_DWORD *)v8 + 27444));
    goto LABEL_32;
  }
  if (CFEqual(a2, kVTCompressionPropertyKey_PixelAspectRatio))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v63 = sub_D1C7C(0x1Eu);
      __uint64_t v64 = sub_DDEFC();
      int v65 = (const char *)sub_D1CB0(6);
      if (v63)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_PixelAspectRatio return %d %d %d %d\n", v64, 30, v65, *v47, *((_DWORD *)v8 + 27435), *((_DWORD *)v8 + 27436), *((_DWORD *)v8 + 27437));
        __uint64_t v64 = sub_DDEFC();
        sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_PixelAspectRatio return %d %d %d %d", v64);
    }
    if (*v47)
    {
      keys[0] = (void *)kCVImageBufferPixelAspectRatioHorizontalSpacingKey;
      keys[1] = (void *)kCVImageBufferPixelAspectRatioVerticalSpacingKey;
      LODWORD(valuePtr) = 0;
      unsigned int v1054 = 0;
      sub_64534((int *)&valuePtr, (int *)&v1054, (uint64_t)(v8 + 13717));
      values[0] = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
      values[1] = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v1054);
      *a4 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (values[0])
      {
        CFRelease(values[0]);
        values[0] = 0;
      }
      if (values[1]) {
        CFRelease(values[1]);
      }
      goto LABEL_38;
    }
    goto LABEL_1375;
  }
  if (CFEqual(a2, kVTCompressionPropertyKey_AllowFrameReordering))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v66 = sub_D1C7C(0x1Eu);
      __uint64_t v67 = sub_DDEFC();
      int v68 = (const char *)sub_D1CB0(6);
      if (*((unsigned char *)v8 + 216)) {
        int v69 = "true";
      }
      else {
        int v69 = "false";
      }
      if (v66)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AllowFrameReordering return %s\n", v67, 30, v68, v69);
        __uint64_t v67 = sub_DDEFC();
        int v68 = (const char *)sub_D1CB0(6);
        if (*((unsigned char *)v8 + 216)) {
          int v69 = "true";
        }
        else {
          int v69 = "false";
        }
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AllowFrameReordering return %s", v67, 30, v68, v69);
    }
    int v27 = *((unsigned __int8 *)v8 + 216);
    goto LABEL_19;
  }
  int v70 = (int *)v8 + 4581;
  if (CFEqual(a2, kVTCompressionPropertyKey_AllowTemporalCompression))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v71 = sub_D1C7C(0x1Eu);
      __uint64_t v72 = sub_DDEFC();
      int v73 = (const char *)sub_D1CB0(6);
      if (*((_DWORD *)v8 + 507) == 1) {
        int v74 = "FALSE";
      }
      else {
        int v74 = "TRUE";
      }
      if (v71)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AllowTemporalCompression return %s\n", v72, 30, v73, v74);
        __uint64_t v72 = sub_DDEFC();
        int v73 = (const char *)sub_D1CB0(6);
        if (*((_DWORD *)v8 + 507) == 1) {
          int v74 = "FALSE";
        }
        else {
          int v74 = "TRUE";
        }
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AllowTemporalCompression return %s", v72, 30, v73, v74);
    }
    if (*((_DWORD *)v8 + 507) != 1 || *((_DWORD *)v8 + 4610) != 1) {
      goto LABEL_20;
    }
    goto LABEL_103;
  }
  if (CFEqual(a2, kVTCompressionPropertyKey_MaxKeyFrameInterval))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v75 = sub_D1C7C(0x1Eu);
      __uint64_t v76 = sub_DDEFC();
      int v77 = (const char *)sub_D1CB0(6);
      int v78 = *((_DWORD *)v8 + 507);
      if (v75)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxKeyFrameInterval return %u\n", v76, 30, v77, v78);
        __uint64_t v79 = sub_DDEFC();
        v949 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxKeyFrameInterval return %u", v79, 30, v949, *((_DWORD *)v8 + 507));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxKeyFrameInterval return %u", v76, 30, v77, v78);
      }
    }
    int v33 = (void **)((char *)v8 + 2028);
    goto LABEL_29;
  }
  if (CFEqual(a2, @"StrictKeyFrameInterval"))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v86 = sub_D1C7C(0x1Eu);
      __uint64_t v87 = sub_DDEFC();
      int v88 = (const char *)sub_D1CB0(6);
      int v89 = *((_DWORD *)v8 + 508);
      if (v86)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_StrictKeyFrameInterval return %u\n", v87, 30, v88, v89);
        __uint64_t v90 = sub_DDEFC();
        v951 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_StrictKeyFrameInterval return %u", v90, 30, v951, *((_DWORD *)v8 + 508));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_StrictKeyFrameInterval return %u", v87, 30, v88, v89);
      }
    }
    int v33 = (void **)(v8 + 254);
    goto LABEL_29;
  }
  v1050 = (double *)(v8 + 23145);
  int v91 = (int *)(v8 + 12886);
  if (CFEqual(a2, @"ReconstructedPixelBufferAttributes"))
  {
    CFStringRef valuePtr = 0;
    int v92 = *((_DWORD *)v8 + 46249);
    if (!v92) {
      int v92 = *((_DWORD *)v8 + 470);
    }
    int v93 = *((_DWORD *)v8 + 46250);
    if (!v93) {
      int v93 = *((_DWORD *)v8 + 471);
    }
    int v94 = v92 + 31;
    if (v92 < -31) {
      int v94 = v92 + 62;
    }
    unsigned int v1054 = v94 & 0xFFFFFFE0;
    int v95 = v93 + 31;
    if (v93 < -31) {
      int v95 = v93 + 62;
    }
    unsigned int v1052 = v95 & 0xFFFFFFE0;
    *(_OWORD *)values = xmmword_143070;
    long long v1057 = unk_143080;
    int v96 = sub_D7E18(*((_DWORD *)v8 + 46378));
    if (v96)
    {
      long long v97 = *(_OWORD *)v96;
      long long v98 = *((_OWORD *)v96 + 1);
      uint64_t v1061 = *(void *)(v96 + 36);
      *(_OWORD *)keys = v97;
      long long v1059 = v98;
      int v1060 = 0;
      DWORD2(v1059) = 3;
      HIDWORD(keys[0]) = *((_DWORD *)v8 + 25784) + 8;
      int v99 = sub_D7E54(keys);
      if (v99)
      {
        int v100 = v99;
        sub_C504(1, (signed int *)&v1054, (signed int *)&v1052);
        if (!sub_BFB8() && valuePtr)
        {
          if (sub_D1C38(0x1Eu, 6))
          {
            int v101 = sub_D1C7C(0x1Eu);
            __uint64_t v102 = sub_DDEFC();
            int v103 = (const char *)sub_D1CB0(6);
            if (v101)
            {
              printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ReconstructedPixelBufferAttributes\n", v102, 30, v103);
              __uint64_t v104 = sub_DDEFC();
              v952 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ReconstructedPixelBufferAttributes", v104, 30, v952);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ReconstructedPixelBufferAttributes", v102, 30, v103);
            }
          }
          uint64_t v28 = 0;
          CFStringRef v80 = valuePtr;
          goto LABEL_105;
        }
        if (sub_D1C38(3u, 4))
        {
          int v125 = sub_D1C7C(3u);
          __uint64_t v126 = sub_DDEFC();
          int v127 = (const char *)sub_D1CB0(4);
          if (v125)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to create recon buffer dictionary %p %d 0x%x 0x%x %d %d %d %d %p\n", v126, 3, v127, "AVE_HEVCCopyProperty", 13536, "rc == noErr && pDict != __null", v8, *((_DWORD *)v8 + 45893), *((_DWORD *)v8 + 46378), v100, v92, v93, v1054, v1052, valuePtr);
            __uint64_t v128 = sub_DDEFC();
            v956 = sub_D1CB0(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create recon buffer dictionary %p %d 0x%x 0x%x %d %d %d %d %p", v128, 3, v956, "AVE_HEVCCopyProperty", 13536, "rc == noErr && pDict != __null");
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create recon buffer dictionary %p %d 0x%x 0x%x %d %d %d %d %p", v126, 3, v127, "AVE_HEVCCopyProperty", 13536, "rc == noErr && pDict != __null");
          }
        }
        goto LABEL_166;
      }
      if (sub_D1C38(3u, 4))
      {
        int v116 = sub_D1C7C(3u);
        __uint64_t v117 = sub_DDEFC();
        int v118 = (const char *)sub_D1CB0(4);
        if (!v116)
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to find pixel format type %p %d 0x%x", v117, 3);
          goto LABEL_166;
        }
        printf("%lld %d AVE %s: %s:%d %s | fail to find pixel format type %p %d 0x%x\n", v117, 3, v118, "AVE_HEVCCopyProperty", 13521, "type != 0", v8, *((_DWORD *)v8 + 45893), *((_DWORD *)v8 + 46378));
        __uint64_t v113 = sub_DDEFC();
        int v119 = sub_D1CB0(4);
        uint64_t v1044 = *((unsigned int *)v8 + 45893);
        uint64_t v1045 = *((unsigned int *)v8 + 46378);
        v1039 = "type != 0";
        v1041 = v8;
        uint64_t v1037 = 13521;
        v954 = v119;
        int v115 = "%lld %d AVE %s: %s:%d %s | fail to find pixel format type %p %d 0x%x";
LABEL_147:
        syslog(3, v115, v113, 3, v954, "AVE_HEVCCopyProperty", v1037, v1039, v1041, v1044, v1045);
      }
    }
    else if (sub_D1C38(3u, 4))
    {
      int v110 = sub_D1C7C(3u);
      __uint64_t v111 = sub_DDEFC();
      int v112 = (const char *)sub_D1CB0(4);
      if (!v110)
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to find pixel format %p %d 0x%x", v111, 3);
        goto LABEL_166;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to find pixel format %p %d 0x%x\n", v111, 3, v112, "AVE_HEVCCopyProperty", 13512, "pPixelFmt != __null", v8, *((_DWORD *)v8 + 45893), *((_DWORD *)v8 + 46378));
      __uint64_t v113 = sub_DDEFC();
      int v114 = sub_D1CB0(4);
      uint64_t v1044 = *((unsigned int *)v8 + 45893);
      uint64_t v1045 = *((unsigned int *)v8 + 46378);
      v1039 = "pPixelFmt != __null";
      v1041 = v8;
      uint64_t v1037 = 13512;
      v954 = v114;
      int v115 = "%lld %d AVE %s: %s:%d %s | fail to find pixel format %p %d 0x%x";
      goto LABEL_147;
    }
LABEL_166:
    uint64_t v28 = 4294954394;
    goto LABEL_106;
  }
  if (CFEqual(a2, kVTCompressionPropertyKey_ExpectedFrameRate))
  {
    LODWORD(keys[0]) = 0;
    if (sub_D1C38(0x1Eu, 6))
    {
      int v105 = sub_D1C7C(0x1Eu);
      __uint64_t v106 = sub_DDEFC();
      int v107 = (const char *)sub_D1CB0(6);
      int v108 = *((_DWORD *)v8 + 57);
      if (v105)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ExpectedFrameRate return %u\n", v106, 30, v107, v108);
        __uint64_t v109 = sub_DDEFC();
        v953 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ExpectedFrameRate return %u", v109, 30, v953, *((_DWORD *)v8 + 57));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ExpectedFrameRate return %u", v106, 30, v107, v108);
      }
    }
    int v129 = *((_DWORD *)v8 + 57);
LABEL_157:
    if (v129 < 1)
    {
LABEL_50:
      int v33 = keys;
LABEL_29:
      CFAllocatorRef v34 = a3;
LABEL_30:
      CFNumberType v35 = kCFNumberSInt32Type;
LABEL_31:
      StringForIntegerCodePoint = CFNumberCreate(v34, v35, v33);
LABEL_32:
      uint64_t v28 = 0;
      *a4 = StringForIntegerCodePoint;
      goto LABEL_106;
    }
LABEL_158:
    LODWORD(keys[0]) = v129;
    goto LABEL_50;
  }
  v1049 = (int *)v8 + 4725;
  if (CFEqual(a2, @"MaximumRealTimeFrameRate"))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v120 = sub_D1C7C(0x1Eu);
      __uint64_t v121 = sub_DDEFC();
      int v122 = (const char *)sub_D1CB0(6);
      int v123 = *((_DWORD *)v8 + 5090);
      if (v120)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaximumRealTimeFrameRate return %d\n", v121, 30, v122, v123);
        __uint64_t v124 = sub_DDEFC();
        v955 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaximumRealTimeFrameRate return %d", v124, 30, v955, *((_DWORD *)v8 + 5090));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaximumRealTimeFrameRate return %d", v121, 30, v122, v123);
      }
    }
    uint64_t v133 = 20360;
LABEL_171:
    int v33 = (void **)((char *)v8 + v133);
    goto LABEL_29;
  }
  if (CFEqual(a2, kVTCompressionPropertyKey_ConstantBitRate))
  {
    LODWORD(keys[0]) = 0;
    if (sub_D1C38(0x1Eu, 6))
    {
      int v130 = sub_D1C7C(0x1Eu);
      __uint64_t v131 = sub_DDEFC();
      int v132 = (const char *)sub_D1CB0(6);
      if (v130)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ConstantBitRate return %d\n", v131, 30, v132, *((_DWORD *)v8 + 48));
        sub_DDEFC();
        sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ConstantBitRate return %d");
    }
LABEL_182:
    int v129 = *((_DWORD *)v8 + 48);
    goto LABEL_157;
  }
  if (CFEqual(a2, @"VariableBitRate"))
  {
    LODWORD(keys[0]) = 0;
    if (sub_D1C38(0x1Eu, 6))
    {
      int v134 = sub_D1C7C(0x1Eu);
      __uint64_t v135 = sub_DDEFC();
      int v136 = (const char *)sub_D1CB0(6);
      if (v134)
      {
        printf("%lld %d AVE %s: asked for AVE_kVTCompressionPropertyKey_VariableBitRate return %d\n", v135, 30, v136, *((_DWORD *)v8 + 48));
        sub_DDEFC();
        sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: asked for AVE_kVTCompressionPropertyKey_VariableBitRate return %d");
    }
    goto LABEL_182;
  }
  if (CFEqual(a2, kVTCompressionPropertyKey_ExpectedDuration))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v137 = sub_D1C7C(0x1Eu);
      __uint64_t v138 = sub_DDEFC();
      int v139 = (const char *)sub_D1CB0(6);
      float v140 = *((double *)v8 + 23159);
      double v141 = v140;
      if (v137)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ExpectedDuration return %f\n", v138, 30, v139, v141);
        __uint64_t v142 = sub_DDEFC();
        int v143 = (const char *)sub_D1CB0(6);
        float v144 = *((double *)v8 + 23159);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ExpectedDuration return %f", v142, 30, v143, v144);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ExpectedDuration return %f", v138, 30, v139, v141);
      }
    }
    int v33 = (void **)(v8 + 23159);
LABEL_189:
    CFAllocatorRef v34 = a3;
    CFNumberType v35 = kCFNumberDoubleType;
    goto LABEL_31;
  }
  if (CFEqual(a2, kVTCompressionPropertyKey_DataRateLimits))
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(a3, 0, &kCFTypeArrayCallBacks);
    sub_DF05C((int *)v8 + 444, Mutable);
LABEL_185:
    uint64_t v28 = 0;
LABEL_186:
    *a4 = Mutable;
    goto LABEL_106;
  }
  if (CFEqual(a2, kVTCompressionPropertyKey_ConvergenceDurationForAverageDataRate))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v146 = sub_D1C7C(0x1Eu);
      __uint64_t v147 = sub_DDEFC();
      int v148 = (const char *)sub_D1CB0(6);
      int v149 = *((_DWORD *)v8 + 46320);
      if (v146)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ConvergenceDurationForAverageDataRate return %u\n", v147, 30, v148, v149);
        __uint64_t v150 = sub_DDEFC();
        v957 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ConvergenceDurationForAverageDataRate return %u", v150, 30, v957, *((_DWORD *)v8 + 46320));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ConvergenceDurationForAverageDataRate return %u", v147, 30, v148, v149);
      }
    }
    int v33 = (void **)(v8 + 23160);
    goto LABEL_29;
  }
  if (CFEqual(a2, kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v151 = sub_D1C7C(0x1Eu);
      __uint64_t v152 = sub_DDEFC();
      int v153 = (const char *)sub_D1CB0(6);
      float v154 = *((double *)v8 + 255);
      double v155 = v154;
      if (v151)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration return %f\n", v152, 30, v153, v155);
        __uint64_t v156 = sub_DDEFC();
        int v157 = (const char *)sub_D1CB0(6);
        float v158 = *((double *)v8 + 255);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration return %f", v156, 30, v157, v158);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration return %f", v152, 30, v153, v155);
      }
    }
    int v33 = (void **)(v8 + 255);
    goto LABEL_189;
  }
  if (CFEqual(a2, @"StrictKeyFrameIntervalDuration"))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v159 = sub_D1C7C(0x1Eu);
      __uint64_t v160 = sub_DDEFC();
      int v161 = (const char *)sub_D1CB0(6);
      float v162 = *((double *)v8 + 256);
      double v163 = v162;
      if (v159)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_StrictKeyFrameIntervalDuration return %f\n", v160, 30, v161, v163);
        __uint64_t v164 = sub_DDEFC();
        int v165 = (const char *)sub_D1CB0(6);
        float v166 = *((double *)v8 + 256);
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_StrictKeyFrameIntervalDuration return %f", v164, 30, v165, v166);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_StrictKeyFrameIntervalDuration return %f", v160, 30, v161, v163);
      }
    }
    int v33 = (void **)(v8 + 256);
    goto LABEL_189;
  }
  if (CFEqual(a2, kVTCompressionPropertyKey_Usage))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v167 = sub_D1C7C(0x1Eu);
      __uint64_t v168 = sub_DDEFC();
      int v169 = (const char *)sub_D1CB0(6);
      int v170 = *((_DWORD *)v8 + 73);
      if (v167)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Usage return %u\n", v168, 30, v169, v170);
        __uint64_t v171 = sub_DDEFC();
        v958 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Usage return %u", v171, 30, v958, *((_DWORD *)v8 + 73));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Usage return %u", v168, 30, v169, v170);
      }
    }
    int v33 = (void **)((char *)v8 + 292);
    goto LABEL_29;
  }
  if (CFEqual(a2, kVTCompressionPropertyKey_MoreFramesAfterEnd))
  {
    int v172 = *((_DWORD *)v8 + 46304);
    if (sub_D1C38(0x1Eu, 6))
    {
      int v173 = sub_D1C7C(0x1Eu);
      __uint64_t v174 = sub_DDEFC();
      int v175 = (const char *)sub_D1CB0(6);
      if (v172 <= 0) {
        int v176 = "false";
      }
      else {
        int v176 = "true";
      }
      if (v173)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MoreFramesAfterEnd return %s\n", v174, 30, v175, v176);
        sub_DDEFC();
        sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MoreFramesAfterEnd return %s");
    }
LABEL_236:
    uint64_t v28 = 0;
    uint64_t v29 = &kCFBooleanTrue;
    if (v172 <= 0) {
      uint64_t v29 = &kCFBooleanFalse;
    }
    goto LABEL_104;
  }
  if (CFEqual(a2, kVTCompressionPropertyKey_MoreFramesBeforeStart))
  {
    int v172 = *((_DWORD *)v8 + 46305);
    if (sub_D1C38(0x1Eu, 6))
    {
      int v177 = sub_D1C7C(0x1Eu);
      __uint64_t v178 = sub_DDEFC();
      int v179 = (const char *)sub_D1CB0(6);
      if (v172 <= 0) {
        int v180 = "false";
      }
      else {
        int v180 = "true";
      }
      if (v177)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MoreFramesBeforeStart return %s\n", v178, 30, v179, v180);
        sub_DDEFC();
        sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MoreFramesBeforeStart return %s");
    }
    goto LABEL_236;
  }
  if (CFEqual(a2, @"RecommendedParallelizationLimit"))
  {
    int v181 = *((_DWORD *)sub_C7604() + 303);
    int v182 = sub_DB5D4(*((_DWORD *)v8 + 45892));
    if (!v181) {
      int v181 = *(_DWORD *)(*((void *)v182 + 2) + 4);
    }
    LODWORD(keys[0]) = v181;
    if (sub_D1C38(0x1Eu, 6))
    {
      int v183 = sub_D1C7C(0x1Eu);
      __uint64_t v184 = sub_DDEFC();
      int v185 = (const char *)sub_D1CB0(6);
      if (v183)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RecommendedParallelizationLimit return %d\n", v184, 30, v185, v181);
        sub_DDEFC();
        sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RecommendedParallelizationLimit return %d");
    }
    goto LABEL_50;
  }
  if (CFEqual(a2, @"RecommendedParallelizedSubdivisionMinimumDuration"))
  {
    uint64_t v186 = *((void *)sub_C7604() + 153);
    if (v186) {
      CMTimeValue v187 = 1000 * v186;
    }
    else {
      CMTimeValue v187 = 30000;
    }
    if (sub_D1C38(0x1Eu, 6))
    {
      int v188 = sub_D1C7C(0x1Eu);
      __uint64_t v189 = sub_DDEFC();
      int v190 = (const char *)sub_D1CB0(6);
      if (v188)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RecommendedParallelizedSubdivisionMinimumDuration return value: %lld, timescale: %d, flags: 0x%x, epoch: %lld\n", v189, 30, v190, v187, 1000, 1, 0);
        __uint64_t v189 = sub_DDEFC();
        sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RecommendedParallelizedSubdivisionMinimumDuration return value: %lld, timescale: %d, flags: 0x%x, epoch: %lld", v189);
    }
    time.value = v187;
    *(void *)&time.timescale = 0x1000003E8;
    time.CMTimeEpoch epoch = 0;
    StringForIntegerCodePoint = CMTimeCopyAsDictionary(&time, a3);
    goto LABEL_32;
  }
  if (CFEqual(a2, @"RecommendedParallelizedSubdivisionMinimumFrameCount"))
  {
    int v191 = sub_C7604();
    if (v191[152]) {
      int v192 = (void *)v191[152];
    }
    else {
      int v192 = &stru_380 + 4;
    }
    keys[0] = v192;
    if (sub_D1C38(0x1Eu, 6))
    {
      int v193 = sub_D1C7C(0x1Eu);
      __uint64_t v194 = sub_DDEFC();
      int v195 = (const char *)sub_D1CB0(6);
      if (v193)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RecommendedParallelizedSubdivisionMinimumFrameCount return %lld\n", v194, 30, v195, v192);
        sub_DDEFC();
        sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RecommendedParallelizedSubdivisionMinimumFrameCount return %lld");
    }
LABEL_264:
    int v33 = keys;
    CFAllocatorRef v34 = a3;
    CFNumberType v35 = kCFNumberSInt64Type;
    goto LABEL_31;
  }
  if (CFEqual(a2, @"BPictures"))
  {
    int v196 = *((_DWORD *)v8 + 45858);
    if (v196 < 0) {
      int v196 = *((_DWORD *)v8 + 486);
    }
    LODWORD(keys[0]) = v196;
    if (sub_D1C38(0x1Eu, 6))
    {
      int v197 = sub_D1C7C(0x1Eu);
      __uint64_t v198 = sub_DDEFC();
      int v199 = (const char *)sub_D1CB0(6);
      if (v197)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_BPictures return %d\n", v198, 30, v199, v196);
        sub_DDEFC();
        sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_BPictures return %d");
    }
    goto LABEL_50;
  }
  if (CFEqual(a2, @"EnableAdaptB"))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v200 = sub_D1C7C(0x1Eu);
      __uint64_t v201 = sub_DDEFC();
      int v202 = (const char *)sub_D1CB0(6);
      if (((_BYTE)v8[253] & 4) != 0) {
        int v203 = "true";
      }
      else {
        int v203 = "false";
      }
      if (v200)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableAdaptB return %s\n", v201, 30, v202, v203);
        __uint64_t v201 = sub_DDEFC();
        int v202 = (const char *)sub_D1CB0(6);
        if ((v8[253] & 4) != 0) {
          int v203 = "true";
        }
        else {
          int v203 = "false";
        }
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableAdaptB return %s", v201, 30, v202, v203);
    }
    if (((_BYTE)v8[253] & 4) != 0) {
      goto LABEL_20;
    }
    goto LABEL_103;
  }
  if (CFEqual(a2, @"EnableCompleteGOP"))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v204 = sub_D1C7C(0x1Eu);
      __uint64_t v205 = sub_DDEFC();
      int v206 = (const char *)sub_D1CB0(6);
      if (((_BYTE)v8[253] & 2) != 0) {
        int v207 = "true";
      }
      else {
        int v207 = "false";
      }
      if (v204)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableCompleteGOP return %s\n", v205, 30, v206, v207);
        __uint64_t v205 = sub_DDEFC();
        int v206 = (const char *)sub_D1CB0(6);
        if ((v8[253] & 2) != 0) {
          int v207 = "true";
        }
        else {
          int v207 = "false";
        }
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableCompleteGOP return %s", v205, 30, v206, v207);
    }
    if (((_BYTE)v8[253] & 2) != 0) {
      goto LABEL_20;
    }
    goto LABEL_103;
  }
  if (CFEqual(a2, @"InitialQPI"))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v208 = sub_D1C7C(0x1Eu);
      __uint64_t v209 = sub_DDEFC();
      int v210 = (const char *)sub_D1CB0(6);
      int v211 = *((_DWORD *)v8 + 456);
      if (v208)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQPI return %d\n", v209, 30, v210, v211);
        __uint64_t v212 = sub_DDEFC();
        v959 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQPI return %d", v212, 30, v959, *((_DWORD *)v8 + 456));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQPI return %d", v209, 30, v210, v211);
      }
    }
    int v33 = (void **)(v8 + 228);
    goto LABEL_29;
  }
  if (CFEqual(a2, @"InitialQPP"))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v213 = sub_D1C7C(0x1Eu);
      __uint64_t v214 = sub_DDEFC();
      int v215 = (const char *)sub_D1CB0(6);
      int v216 = *((_DWORD *)v8 + 457);
      if (v213)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQPP return %d\n", v214, 30, v215, v216);
        __uint64_t v217 = sub_DDEFC();
        v960 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQPP return %d", v217, 30, v960, *((_DWORD *)v8 + 457));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQPP return %d", v214, 30, v215, v216);
      }
    }
    int v33 = (void **)((char *)v8 + 1828);
    goto LABEL_29;
  }
  if (CFEqual(a2, @"InitialQPB"))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v218 = sub_D1C7C(0x1Eu);
      __uint64_t v219 = sub_DDEFC();
      int v220 = (const char *)sub_D1CB0(6);
      int v221 = *((_DWORD *)v8 + 458);
      if (v218)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQP return %d\n", v219, 30, v220, v221);
        __uint64_t v222 = sub_DDEFC();
        v961 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQP return %d", v222, 30, v961, *((_DWORD *)v8 + 458));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQP return %d", v219, 30, v220, v221);
      }
    }
    int v33 = (void **)(v8 + 229);
    goto LABEL_29;
  }
  if (CFEqual(a2, @"EdgeReplication"))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v223 = sub_D1C7C(0x1Eu);
      __uint64_t v224 = sub_DDEFC();
      int v225 = (const char *)sub_D1CB0(6);
      int v226 = *((_DWORD *)v8 + 4717);
      if (v223)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EdgeReplication return %d\n", v224, 30, v225, v226);
        __uint64_t v227 = sub_DDEFC();
        v962 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EdgeReplication return %d", v227, 30, v962, *((_DWORD *)v8 + 4717));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EdgeReplication return %d", v224, 30, v225, v226);
      }
    }
    uint64_t v133 = 18868;
    goto LABEL_171;
  }
  v1048 = (char *)v8 + 17881;
  if (CFEqual(a2, kVTCompressionPropertyKey_NumberOfSlices))
  {
    LODWORD(keys[0]) = *((_DWORD *)v8 + 4515);
    if (sub_D1C38(0x1Eu, 6))
    {
      int v228 = sub_D1C7C(0x1Eu);
      __uint64_t v229 = sub_DDEFC();
      int v230 = (const char *)sub_D1CB0(6);
      if (v228)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_NumberOfSlices return %d\n", v229, 30, v230, *((_DWORD *)v8 + 4515));
        sub_DDEFC();
        sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_NumberOfSlices return %d");
    }
    goto LABEL_50;
  }
  if (CFEqual(a2, kVTCompressionPropertyKey_Priority))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v231 = sub_D1C7C(0x1Eu);
      __uint64_t v232 = sub_DDEFC();
      int v233 = (const char *)sub_D1CB0(6);
      int v234 = *((_DWORD *)v8 + 468);
      if (v231)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Priority return %d\n", v232, 30, v233, v234);
        __uint64_t v235 = sub_DDEFC();
        v963 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Priority return %d", v235, 30, v963, *((_DWORD *)v8 + 468));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Priority return %d", v232, 30, v233, v234);
      }
    }
    int v33 = (void **)(v8 + 234);
    goto LABEL_29;
  }
  v1047 = (int *)v8 + 34625;
  if (CFEqual(a2, @"DeblockingFiltering"))
  {
    int v236 = *((unsigned __int8 *)v8 + 138594);
    LODWORD(keys[0]) = v236;
    if (sub_D1C38(0x1Eu, 6))
    {
      int v237 = sub_D1C7C(0x1Eu);
      __uint64_t v238 = sub_DDEFC();
      int v239 = (const char *)sub_D1CB0(6);
      if (v237)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_DeblockingFiltering return %d\n", v238, 30, v239, v236);
        sub_DDEFC();
        sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_DeblockingFiltering return %d");
    }
    goto LABEL_50;
  }
  if (CFEqual(a2, @"DebugMetadataSEI"))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v240 = sub_D1C7C(0x1Eu);
      __uint64_t v241 = sub_DDEFC();
      int v242 = (const char *)sub_D1CB0(6);
      if (*((unsigned char *)v8 + 183546)) {
        int v243 = "TRUE";
      }
      else {
        int v243 = "FALSE";
      }
      if (v240)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_DebugMetadataSEI return %s\n", v241, 30, v242, v243);
        __uint64_t v241 = sub_DDEFC();
        int v242 = (const char *)sub_D1CB0(6);
        if (*((unsigned char *)v8 + 183546)) {
          int v243 = "TRUE";
        }
        else {
          int v243 = "FALSE";
        }
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_DebugMetadataSEI return %s", v241, 30, v242, v243);
    }
    int v27 = *((unsigned __int8 *)v8 + 183546);
    goto LABEL_19;
  }
  if (CFEqual(a2, @"DebugMetadataSEIuseEPB"))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v244 = sub_D1C7C(0x1Eu);
      __uint64_t v245 = sub_DDEFC();
      int v246 = (const char *)sub_D1CB0(6);
      if (*((unsigned char *)v8 + 183547)) {
        int v247 = "TRUE";
      }
      else {
        int v247 = "FALSE";
      }
      if (v244)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_DebugMetadataSEIuseEPB return %s\n", v245, 30, v246, v247);
        __uint64_t v245 = sub_DDEFC();
        int v246 = (const char *)sub_D1CB0(6);
        if (*((unsigned char *)v8 + 183547)) {
          int v247 = "TRUE";
        }
        else {
          int v247 = "FALSE";
        }
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_DebugMetadataSEIuseEPB return %s", v245, 30, v246, v247);
    }
    int v27 = *((unsigned __int8 *)v8 + 183547);
    goto LABEL_19;
  }
  if (CFEqual(a2, kVTCompressionPropertyKey_InputQueueMaxCount))
  {
    int v248 = *((_DWORD *)v8 + 5044);
    LODWORD(keys[0]) = v248;
    if (sub_D1C38(0x1Eu, 6))
    {
      int v249 = sub_D1C7C(0x1Eu);
      __uint64_t v250 = sub_DDEFC();
      int v251 = (const char *)sub_D1CB0(6);
      if (v249)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_InputQueueMaxCount return %d\n", v250, 30, v251, v248);
        sub_DDEFC();
        sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_InputQueueMaxCount return %d");
    }
    goto LABEL_50;
  }
  if (CFEqual(a2, @"EnableUserQPForFacetime"))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v252 = sub_D1C7C(0x1Eu);
      __uint64_t v253 = sub_DDEFC();
      int v254 = (const char *)sub_D1CB0(6);
      if (*((unsigned char *)v8 + 1864)) {
        int v255 = "true";
      }
      else {
        int v255 = "false";
      }
      if (v252)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableUserQPForFacetime return %s\n", v253, 30, v254, v255);
        __uint64_t v253 = sub_DDEFC();
        int v254 = (const char *)sub_D1CB0(6);
        if (*((unsigned char *)v8 + 1864)) {
          int v255 = "true";
        }
        else {
          int v255 = "false";
        }
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableUserQPForFacetime return %s", v253, 30, v254, v255);
    }
    int v27 = *((unsigned __int8 *)v8 + 1864);
    goto LABEL_19;
  }
  if (CFEqual(a2, kVTCompressionPropertyKey_UserDPBFramesForFaceTime))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v256 = sub_D1C7C(0x1Eu);
      __uint64_t v257 = sub_DDEFC();
      int v258 = (const char *)sub_D1CB0(6);
      if (v256)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserDPBFramesForFaceTime\n", v257, 30, v258);
        __uint64_t v259 = sub_DDEFC();
        v964 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserDPBFramesForFaceTime", v259, 30, v964);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserDPBFramesForFaceTime", v257, 30, v258);
      }
    }
    CFMutableArrayRef Mutable = CFArrayCreateMutable(a3, 2 * *((int *)v8 + 5053), &kCFTypeArrayCallBacks);
    if (Mutable)
    {
      if (*((int *)v8 + 5053) >= 1)
      {
        uint64_t v268 = 0;
        __uint64_t v269 = v8 + 2527;
        do
        {
          CFNumberRef v270 = CFNumberCreate(0, kCFNumberSInt32Type, v269);
          CFNumberRef v271 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)v269 + 68);
          CFArrayAppendValue(Mutable, v270);
          CFArrayAppendValue(Mutable, v271);
          if (v270) {
            CFRelease(v270);
          }
          if (v271) {
            CFRelease(v271);
          }
          ++v268;
          __uint64_t v269 = (const void **)((char *)v269 + 4);
        }
        while (v268 < *((int *)v8 + 5053));
      }
      goto LABEL_185;
    }
    goto LABEL_1232;
  }
  if (CFEqual(a2, @"DPBRequirements"))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v260 = sub_D1C7C(0x1Eu);
      __uint64_t v261 = sub_DDEFC();
      __uint64_t v262 = (const char *)sub_D1CB0(6);
      if (v260)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_DPBRequirements\n", v261, 30, v262);
        __uint64_t v263 = sub_DDEFC();
        v965 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_DPBRequirements", v263, 30, v965);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_DPBRequirements", v261, 30, v262);
      }
    }
    CFMutableArrayRef Mutable = CFArrayCreateMutable(a3, (int)(*((_DWORD *)v8 + 46294) << (*((_DWORD *)v8 + 46293) != 0)), &kCFTypeArrayCallBacks);
    if (Mutable)
    {
      LODWORD(v823) = *((_DWORD *)v8 + 46294);
      if ((int)v823 >= 1)
      {
        uint64_t v824 = 0;
        v825 = (char *)(v8 + 2527);
        do
        {
          CFNumberRef v826 = CFNumberCreate(0, kCFNumberSInt32Type, v825);
          CFArrayAppendValue(Mutable, v826);
          if (v826) {
            CFRelease(v826);
          }
          ++v824;
          uint64_t v823 = *((int *)v8 + 46294);
          v825 += 4;
        }
        while (v824 < v823);
      }
      uint64_t v28 = 0;
      if (!*((_DWORD *)v8 + 46293) || (int)v823 < 1) {
        goto LABEL_186;
      }
      uint64_t v827 = 0;
      v828 = (char *)v8 + 20284;
      do
      {
        CFNumberRef v829 = CFNumberCreate(0, kCFNumberSInt32Type, v828);
        CFArrayAppendValue(Mutable, v829);
        if (v829) {
          CFRelease(v829);
        }
        ++v827;
        v828 += 4;
      }
      while (v827 < *((int *)v8 + 46294));
      goto LABEL_185;
    }
    if (sub_D1C38(0x1Eu, 4))
    {
      int v830 = sub_D1C7C(0x1Eu);
      __uint64_t v831 = sub_DDEFC();
      v832 = (const char *)sub_D1CB0(4);
      if (v830)
      {
        printf("%lld %d AVE %s: FIG: kVTCompressionPropertyKey_DPBRequirements CFArrayCreateMutable failed\n", v831, 30, v832);
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: FIG: kVTCompressionPropertyKey_DPBRequirements CFArrayCreateMutable failed");
    }
LABEL_1448:
    uint64_t v28 = 4294954392;
    goto LABEL_186;
  }
  if (CFEqual(a2, @"EnableUserRefForFacetime"))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v264 = sub_D1C7C(0x1Eu);
      __uint64_t v265 = sub_DDEFC();
      int v266 = (const char *)sub_D1CB0(6);
      if (*((unsigned char *)v8 + 20352)) {
        int v267 = "true";
      }
      else {
        int v267 = "false";
      }
      if (v264)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableUserRefForFacetime return %s\n", v265, 30, v266, v267);
        __uint64_t v265 = sub_DDEFC();
        int v266 = (const char *)sub_D1CB0(6);
        if (*((unsigned char *)v8 + 20352)) {
          int v267 = "true";
        }
        else {
          int v267 = "false";
        }
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableUserRefForFacetime return %s", v265, 30, v266, v267);
    }
    int v27 = *((unsigned __int8 *)v8 + 20352);
    goto LABEL_19;
  }
  if (CFEqual(a2, kVTCompressionPropertyKey_RealTime))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v272 = sub_D1C7C(0x1Eu);
      __uint64_t v273 = sub_DDEFC();
      int v274 = (const char *)sub_D1CB0(6);
      int v275 = *((_DWORD *)v8 + 66);
      if (v272)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RealTime return %d\n", v273, 30, v274, v275);
        __uint64_t v276 = sub_DDEFC();
        v966 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RealTime return %d", v276, 30, v966, *((_DWORD *)v8 + 66));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RealTime return %d", v273, 30, v274, v275);
      }
    }
    int v27 = *((_DWORD *)v8 + 66);
    if (v27 < 0) {
      goto LABEL_38;
    }
LABEL_19:
    if (v27)
    {
LABEL_20:
      uint64_t v28 = 0;
      uint64_t v29 = &kCFBooleanTrue;
LABEL_104:
      CFStringRef v80 = (const __CFString *)*v29;
LABEL_105:
      *a4 = v80;
      goto LABEL_106;
    }
LABEL_103:
    uint64_t v28 = 0;
    uint64_t v29 = &kCFBooleanFalse;
    goto LABEL_104;
  }
  if (CFEqual(a2, @"EnableRCDriver"))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v277 = sub_D1C7C(0x1Eu);
      __uint64_t v278 = sub_DDEFC();
      v279 = (const char *)sub_D1CB0(6);
      if (v277)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableRCDriver return %d\n", v278, 30, v279, *((_DWORD *)v8 + 49));
        sub_DDEFC();
        sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableRCDriver return %d");
    }
LABEL_1101:
    int v33 = (void **)((char *)v8 + 196);
    goto LABEL_29;
  }
  if (CFEqual(a2, @"EnableRCFW"))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v280 = sub_D1C7C(0x1Eu);
      __uint64_t v281 = sub_DDEFC();
      v282 = (const char *)sub_D1CB0(6);
      if (v280)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableRCFW return %d\n", v281, 30, v282, *((_DWORD *)v8 + 49));
        sub_DDEFC();
        sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableRCFW return %d");
    }
    goto LABEL_1101;
  }
  if (CFEqual(a2, @"RCMode"))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v283 = sub_D1C7C(0x1Eu);
      __uint64_t v284 = sub_DDEFC();
      v285 = (const char *)sub_D1CB0(6);
      if (v283)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RCMode return %d\n", v284, 30, v285, *((_DWORD *)v8 + 49));
        sub_DDEFC();
        sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RCMode return %d");
    }
    goto LABEL_1101;
  }
  if (CFEqual(a2, @"SpatialAdaptiveQPLevel"))
  {
    if (sub_D1C38(0x1Eu, 6))
    {
      int v286 = sub_D1C7C(0x1Eu);
      __uint64_t v287 = sub_DDEFC();
      v288 = (const char *)sub_D1CB0(6);
      int v289 = *((_DWORD *)v8 + 503);
      if (v286)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SpatialAdaptiveQPLevel return %d\n", v287, 30, v288, v289);
        __uint64_t v290 = sub_DDEFC();
        v967 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SpatialAdaptiveQPLevel return %d", v290, 30, v967, *((_DWORD *)v8 + 503));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SpatialAdaptiveQPLevel return %d", v287, 30, v288, v289);
      }
    }
    int v33 = (void **)((char *)v8 + 2012);
    goto LABEL_29;
  }
  if (!CFEqual(a2, kVTCompressionPropertyKey_EnableQPModulation))
  {
    if (CFEqual(a2, @"EnableQPMod"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v297 = sub_D1C7C(0x1Eu);
        __uint64_t v298 = sub_DDEFC();
        v299 = (const char *)sub_D1CB0(6);
        int v300 = *((unsigned __int8 *)v8 + 244);
        if (v297)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableQPMod return %d\n", v298, 30, v299, v300);
          __uint64_t v301 = sub_DDEFC();
          v968 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableQPMod return %d", v301, 30, v968, *((unsigned __int8 *)v8 + 244));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableQPMod return %d", v298, 30, v299, v300);
        }
      }
      int v27 = *((unsigned __int8 *)v8 + 244);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"EnableLambdaMod"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v302 = sub_D1C7C(0x1Eu);
        __uint64_t v303 = sub_DDEFC();
        int v304 = (const char *)sub_D1CB0(6);
        int v305 = *((unsigned __int8 *)v8 + 246);
        if (v302)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableLambdaMod return %d\n", v303, 30, v304, v305);
          __uint64_t v306 = sub_DDEFC();
          v969 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableLambdaMod return %d", v306, 30, v969, *((unsigned __int8 *)v8 + 246));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableLambdaMod return %d", v303, 30, v304, v305);
        }
      }
      int v27 = *((unsigned __int8 *)v8 + 246);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"EnableVarianceQPMod"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v307 = sub_D1C7C(0x1Eu);
        __uint64_t v308 = sub_DDEFC();
        v309 = (const char *)sub_D1CB0(6);
        if (*((unsigned char *)v8 + 247)) {
          int v310 = "TRUE";
        }
        else {
          int v310 = "FALSE";
        }
        if (v307)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableVarianceQPMod return %s\n", v308, 30, v309, v310);
          __uint64_t v308 = sub_DDEFC();
          v309 = (const char *)sub_D1CB0(6);
          if (*((unsigned char *)v8 + 247)) {
            int v310 = "TRUE";
          }
          else {
            int v310 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableVarianceQPMod return %s", v308, 30, v309, v310);
      }
      int v27 = *((unsigned __int8 *)v8 + 247);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"EnableLowVarianceQPMod"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v311 = sub_D1C7C(0x1Eu);
        __uint64_t v312 = sub_DDEFC();
        v313 = (const char *)sub_D1CB0(6);
        if (*((unsigned char *)v8 + 248)) {
          int v314 = "TRUE";
        }
        else {
          int v314 = "FALSE";
        }
        if (v311)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableLowVarianceQPMod return %s\n", v312, 30, v313, v314);
          __uint64_t v312 = sub_DDEFC();
          v313 = (const char *)sub_D1CB0(6);
          if (*((unsigned char *)v8 + 248)) {
            int v314 = "TRUE";
          }
          else {
            int v314 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableLowVarianceQPMod return %s", v312, 30, v313, v314);
      }
      int v27 = *((unsigned __int8 *)v8 + 248);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"EnableHevcDeRingingQPMod"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v315 = sub_D1C7C(0x1Eu);
        __uint64_t v316 = sub_DDEFC();
        int v317 = (const char *)sub_D1CB0(6);
        if (*((unsigned char *)v8 + 249)) {
          __uint64_t v318 = "TRUE";
        }
        else {
          __uint64_t v318 = "FALSE";
        }
        if (v315)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableHevcDeRingingQPMod return %s\n", v316, 30, v317, v318);
          __uint64_t v316 = sub_DDEFC();
          int v317 = (const char *)sub_D1CB0(6);
          if (*((unsigned char *)v8 + 249)) {
            __uint64_t v318 = "TRUE";
          }
          else {
            __uint64_t v318 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableHevcDeRingingQPMod return %s", v316, 30, v317, v318);
      }
      int v27 = *((unsigned __int8 *)v8 + 249);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"UseCAVLCBits"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v319 = sub_D1C7C(0x1Eu);
        __uint64_t v320 = sub_DDEFC();
        v321 = (const char *)sub_D1CB0(6);
        if (*((unsigned char *)v8 + 253)) {
          int v322 = "TRUE";
        }
        else {
          int v322 = "FALSE";
        }
        if (v319)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseCAVLCBits return %s\n", v320, 30, v321, v322);
          __uint64_t v320 = sub_DDEFC();
          v321 = (const char *)sub_D1CB0(6);
          if (*((unsigned char *)v8 + 253)) {
            int v322 = "TRUE";
          }
          else {
            int v322 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseCAVLCBits return %s", v320, 30, v321, v322);
      }
      if (!*((_DWORD *)v8 + 4690))
      {
        int v27 = *((unsigned __int8 *)v8 + 253);
        goto LABEL_19;
      }
      if (sub_D1C38(3u, 4))
      {
        int v835 = sub_D1C7C(3u);
        __uint64_t v836 = sub_DDEFC();
        v837 = (const char *)sub_D1CB0(4);
        if (v835)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: Property supported only on H.264 codec. Failed.\n", v836, 3, v837, "AVE_HEVCCopyProperty", 14069, "(encoderPrivateStorage->VideoParamsDriver.codecID == AVE_CodecType_AVC)");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: Property supported only on H.264 codec. Failed.");
      }
      goto LABEL_22;
    }
    if (CFEqual(a2, @"EnableStaticAreasLowQP"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v323 = sub_D1C7C(0x1Eu);
        __uint64_t v324 = sub_DDEFC();
        __uint64_t v325 = (const char *)sub_D1CB0(6);
        int v326 = *((_DWORD *)v8 + 65);
        if (v323)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableStaticAreasLowQP return 0x%08x\n", v324, 30, v325, v326);
          __uint64_t v327 = sub_DDEFC();
          v970 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableStaticAreasLowQP return 0x%08x", v327, 30, v970, *((_DWORD *)v8 + 65));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableStaticAreasLowQP return 0x%08x", v324, 30, v325, v326);
        }
      }
      int v33 = (void **)((char *)v8 + 260);
      goto LABEL_29;
    }
    if (CFEqual(a2, @"LookAheadFrames"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v328 = sub_D1C7C(0x1Eu);
        __uint64_t v329 = sub_DDEFC();
        __uint64_t v330 = (const char *)sub_D1CB0(6);
        int v331 = *((_DWORD *)v8 + 58);
        if (v328)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SuggestedLookAheadFrameCount return %d\n", v329, 30, v330, v331);
          __uint64_t v332 = sub_DDEFC();
          v971 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SuggestedLookAheadFrameCount return %d", v332, 30, v971, *((_DWORD *)v8 + 58));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SuggestedLookAheadFrameCount return %d", v329, 30, v330, v331);
        }
      }
      CFAllocatorRef v34 = kCFAllocatorDefault;
      int v33 = (void **)(v8 + 29);
      goto LABEL_30;
    }
    if (CFEqual(a2, @"PreemptiveLoadBalancing"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v333 = sub_D1C7C(0x1Eu);
        __uint64_t v334 = sub_DDEFC();
        __uint64_t v335 = (const char *)sub_D1CB0(6);
        int v336 = *((_DWORD *)v8 + 4870);
        if (v333)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_PreemptiveLoadBalancing return %d\n", v334, 30, v335, v336);
          __uint64_t v337 = sub_DDEFC();
          v972 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_PreemptiveLoadBalancing return %d", v337, 30, v972, *((_DWORD *)v8 + 4870));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_PreemptiveLoadBalancing return %d", v334, 30, v335, v336);
        }
      }
      if (*((_DWORD *)v8 + 4870) == 2) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, @"UseAsyncFWScheduling"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v338 = sub_D1C7C(0x1Eu);
        __uint64_t v339 = sub_DDEFC();
        v340 = (const char *)sub_D1CB0(6);
        if (*((unsigned char *)v8 + 18684)) {
          __uint64_t v341 = "TRUE";
        }
        else {
          __uint64_t v341 = "FALSE";
        }
        if (v338)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseAsyncFWScheduling return %s\n", v339, 30, v340, v341);
          __uint64_t v339 = sub_DDEFC();
          v340 = (const char *)sub_D1CB0(6);
          if (*((unsigned char *)v8 + 18684)) {
            __uint64_t v341 = "TRUE";
          }
          else {
            __uint64_t v341 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseAsyncFWScheduling return %s", v339, 30, v340, v341);
      }
      int v27 = *((unsigned __int8 *)v8 + 18684);
      goto LABEL_19;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_UsingHardwareAcceleratedVideoEncoder))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v342 = sub_D1C7C(0x1Eu);
        __uint64_t v343 = sub_DDEFC();
        v344 = (const char *)sub_D1CB0(6);
        if (v342)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UsingHardwareAcceleratedVideoEncoder return TRUE\n", v343, 30, v344);
          __uint64_t v345 = sub_DDEFC();
          v973 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UsingHardwareAcceleratedVideoEncoder return TRUE", v345, 30, v973);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UsingHardwareAcceleratedVideoEncoder return TRUE", v343, 30, v344);
        }
      }
      goto LABEL_20;
    }
    if (CFEqual(a2, @"EnableStatsCollect"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v346 = sub_D1C7C(0x1Eu);
        __uint64_t v347 = sub_DDEFC();
        int v348 = (const char *)sub_D1CB0(6);
        int v349 = *((_DWORD *)v8 + 480);
        if (v346)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableStatsCollect return %d\n", v347, 30, v348, v349);
          __uint64_t v350 = sub_DDEFC();
          v974 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableStatsCollect return %d", v350, 30, v974, *((_DWORD *)v8 + 480));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableStatsCollect return %d", v347, 30, v348, v349);
        }
      }
      int v33 = (void **)(v8 + 240);
      goto LABEL_29;
    }
    if (CFEqual(a2, @"EnableContextSwitchInTheMiddle"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v351 = sub_D1C7C(0x1Eu);
        __uint64_t v352 = sub_DDEFC();
        int v353 = (const char *)sub_D1CB0(6);
        if (*((unsigned char *)v8 + 1925)) {
          __uint64_t v354 = "TRUE";
        }
        else {
          __uint64_t v354 = "FALSE";
        }
        if (v351)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableContextSwitchInTheMiddle return %s\n", v352, 30, v353, v354);
          __uint64_t v352 = sub_DDEFC();
          int v353 = (const char *)sub_D1CB0(6);
          if (*((unsigned char *)v8 + 1925)) {
            __uint64_t v354 = "TRUE";
          }
          else {
            __uint64_t v354 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableContextSwitchInTheMiddle return %s", v352, 30, v353, v354);
      }
      int v27 = *((unsigned __int8 *)v8 + 1925);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"EnableMultiReferenceP"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v355 = sub_D1C7C(0x1Eu);
        __uint64_t v356 = sub_DDEFC();
        __uint64_t v357 = (const char *)sub_D1CB0(6);
        if (*((unsigned char *)v8 + 18676)) {
          int v358 = "TRUE";
        }
        else {
          int v358 = "FALSE";
        }
        if (v355)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMultiReferenceP return %s\n", v356, 30, v357, v358);
          __uint64_t v356 = sub_DDEFC();
          __uint64_t v357 = (const char *)sub_D1CB0(6);
          if (*((unsigned char *)v8 + 18676)) {
            int v358 = "TRUE";
          }
          else {
            int v358 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMultiReferenceP return %s", v356, 30, v357, v358);
      }
      int v27 = *((unsigned __int8 *)v8 + 18676);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"MultiReferencePSpacing"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v359 = sub_D1C7C(0x1Eu);
        __uint64_t v360 = sub_DDEFC();
        int v361 = (const char *)sub_D1CB0(6);
        int v362 = *((_DWORD *)v8 + 4670);
        if (v359)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiReferencePSpacing return %d\n", v360, 30, v361, v362);
          __uint64_t v363 = sub_DDEFC();
          v975 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiReferencePSpacing return %d", v363, 30, v975, *((_DWORD *)v8 + 4670));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiReferencePSpacing return %d", v360, 30, v361, v362);
        }
      }
      uint64_t v133 = 18680;
      goto LABEL_171;
    }
    if (CFEqual(a2, @"EnableSEITagInsertion"))
    {
      if (!sub_D1C38(0x1Eu, 6)) {
        goto LABEL_1456;
      }
      int v364 = sub_D1C7C(0x1Eu);
      __uint64_t v365 = sub_DDEFC();
      int v366 = (const char *)sub_D1CB0(6);
      if (v364)
      {
        if (*((unsigned char *)v8 + 18685) || *((unsigned char *)v8 + 18687))
        {
          __uint64_t v367 = "TRUE";
        }
        else
        {
          __uint64_t v367 = "TRUE";
          if (!*((unsigned char *)v8 + 18688) && !*((unsigned char *)v8 + 18689)) {
            __uint64_t v367 = "FALSE";
          }
        }
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableSEITagInsertion return %s\n", v365, 30, v366, v367);
        __uint64_t v365 = sub_DDEFC();
        int v366 = (const char *)sub_D1CB0(6);
        if (*((unsigned char *)v8 + 18685)) {
          goto LABEL_1150;
        }
      }
      else if (*((unsigned char *)v8 + 18685))
      {
        goto LABEL_1150;
      }
      if (!*((unsigned char *)v8 + 18687))
      {
        v838 = "TRUE";
        if (!*((unsigned char *)v8 + 18688) && !*((unsigned char *)v8 + 18689)) {
          v838 = "FALSE";
        }
        goto LABEL_1455;
      }
LABEL_1150:
      v838 = "TRUE";
LABEL_1455:
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableSEITagInsertion return %s", v365, 30, v366, v838);
LABEL_1456:
      if (*((unsigned char *)v8 + 18685)
        || *((unsigned char *)v8 + 18687)
        || *((unsigned char *)v8 + 18688)
        || *((unsigned char *)v8 + 18689)
        || *((unsigned char *)v8 + 18690)
        || *((unsigned char *)v8 + 18691)
        || *((unsigned char *)v8 + 18692))
      {
        goto LABEL_20;
      }
      int v27 = *((unsigned __int8 *)v8 + 18693);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"EnableT35SEITagInsertion"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v368 = sub_D1C7C(0x1Eu);
        __uint64_t v369 = sub_DDEFC();
        v370 = (const char *)sub_D1CB0(6);
        if (*((unsigned char *)v8 + 18694)) {
          int v371 = "TRUE";
        }
        else {
          int v371 = "FALSE";
        }
        if (v368)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableT35SEITagInsertion return %s\n", v369, 30, v370, v371);
          __uint64_t v369 = sub_DDEFC();
          v370 = (const char *)sub_D1CB0(6);
          if (*((unsigned char *)v8 + 18694)) {
            int v371 = "TRUE";
          }
          else {
            int v371 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableT35SEITagInsertion return %s", v369, 30, v370, v371);
      }
      int v27 = *((unsigned __int8 *)v8 + 18694);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"log2_max_minus4"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v372 = sub_D1C7C(0x1Eu);
        __uint64_t v373 = sub_DDEFC();
        __uint64_t v374 = (const char *)sub_D1CB0(6);
        int v375 = *((_DWORD *)v8 + 25786);
        if (v372)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_log2_max_minus4 return %d\n", v373, 30, v374, v375);
          __uint64_t v376 = sub_DDEFC();
          v976 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_log2_max_minus4 return %d", v376, 30, v976, *((_DWORD *)v8 + 25786));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_log2_max_minus4 return %d", v373, 30, v374, v375);
        }
      }
      int v33 = (void **)(v8 + 12893);
      goto LABEL_29;
    }
    if (CFEqual(a2, @"LowDelay"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v377 = sub_D1C7C(0x1Eu);
        __uint64_t v378 = sub_DDEFC();
        __uint64_t v379 = (const char *)sub_D1CB0(6);
        if (*((_DWORD *)v8 + 516)) {
          v380 = "true";
        }
        else {
          v380 = "false";
        }
        if (v377)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LowDelay return %s\n", v378, 30, v379, v380);
          __uint64_t v378 = sub_DDEFC();
          __uint64_t v379 = (const char *)sub_D1CB0(6);
          if (*((_DWORD *)v8 + 516)) {
            v380 = "true";
          }
          else {
            v380 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LowDelay return %s", v378, 30, v379, v380);
      }
      int v27 = *((_DWORD *)v8 + 516);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"AllowOpenGOP"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v381 = sub_D1C7C(0x1Eu);
        __uint64_t v382 = sub_DDEFC();
        __uint64_t v383 = (const char *)sub_D1CB0(6);
        if ((_BYTE)v8[253]) {
          v384 = "true";
        }
        else {
          v384 = "false";
        }
        if (v381)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllowOpenGOP return %s\n", v382, 30, v383, v384);
          __uint64_t v382 = sub_DDEFC();
          __uint64_t v383 = (const char *)sub_D1CB0(6);
          if (v8[253]) {
            v384 = "true";
          }
          else {
            v384 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllowOpenGOP return %s", v382, 30, v383, v384);
      }
      if ((_BYTE)v8[253]) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_OutputBitDepth))
    {
      int v385 = *((_DWORD *)v8 + 25784) + 8;
      LODWORD(keys[0]) = v385;
      if (*((_DWORD *)v8 + 4690) == 1)
      {
        if (sub_D1C38(0x1Eu, 6))
        {
          int v386 = sub_D1C7C(0x1Eu);
          __uint64_t v387 = sub_DDEFC();
          v388 = (const char *)sub_D1CB0(6);
          if (v386)
          {
            printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_OutputBitDepth return %d\n", v387, 30, v388, v385);
            sub_DDEFC();
            sub_D1CB0(6);
          }
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_OutputBitDepth return %d");
        }
        goto LABEL_50;
      }
      if (sub_D1C38(3u, 4))
      {
        int v839 = sub_D1C7C(3u);
        __uint64_t v840 = sub_DDEFC();
        v841 = (const char *)sub_D1CB0(4);
        if (v839)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: Property OutputBitDepth supported only on H.265 codec. Failed.\n", v840, 3, v841, "AVE_HEVCCopyProperty", 14210, "(encoderPrivateStorage->VideoParamsDriver.codecID == AVE_CodecType_HEVC)");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: Property OutputBitDepth supported only on H.265 codec. Failed.");
      }
      goto LABEL_22;
    }
    if (CFEqual(a2, @"ThroughputRateMode"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v389 = sub_D1C7C(0x1Eu);
        __uint64_t v390 = sub_DDEFC();
        int v391 = (const char *)sub_D1CB0(6);
        int v392 = *((_DWORD *)v8 + 4694);
        unsigned int v393 = v392 - 1;
        if (v389)
        {
          if (v393 < 6 && ((0x37u >> v393) & 1) != 0)
          {
            v394 = off_159BC0[v393];
          }
          else if (v392 == 4)
          {
            v394 = "TURBO";
          }
          else
          {
            v394 = "DISABLED";
          }
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ThroughputRateMode return %s\n", v390, 30, v391, v394);
          __uint64_t v390 = sub_DDEFC();
          int v391 = (const char *)sub_D1CB0(6);
          int v843 = *((_DWORD *)v8 + 4694);
          int v844 = v843 - 1;
          if (v843 - 1) < 6 && ((0x37u >> v844))
          {
            v842 = off_159BC0[v844];
          }
          else if (v843 == 4)
          {
            v842 = "TURBO";
          }
          else
          {
            v842 = "DISABLED";
          }
        }
        else if (v393 < 6 && ((0x37u >> v393) & 1) != 0)
        {
          v842 = off_159BC0[v393];
        }
        else if (v392 == 4)
        {
          v842 = "TURBO";
        }
        else
        {
          v842 = "DISABLED";
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ThroughputRateMode return %s", v390, 30, v391, v842);
      }
      int v129 = *((_DWORD *)v8 + 4694);
      goto LABEL_158;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_PrioritizeEncodingSpeedOverQuality))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v395 = sub_D1C7C(0x1Eu);
        __uint64_t v396 = sub_DDEFC();
        v397 = (const char *)sub_D1CB0(6);
        if (*((unsigned char *)v8 + 18781)) {
          v398 = "true";
        }
        else {
          v398 = "false";
        }
        if (v395)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_PrioritizeEncodingSpeedOverQuality return %s\n", v396, 30, v397, v398);
          __uint64_t v396 = sub_DDEFC();
          v397 = (const char *)sub_D1CB0(6);
          if (*((unsigned char *)v8 + 18781)) {
            v398 = "true";
          }
          else {
            v398 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_PrioritizeEncodingSpeedOverQuality return %s", v396, 30, v397, v398);
      }
      int v27 = *((unsigned __int8 *)v8 + 18781);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"HevcSplitDecision"))
    {
      if (*((_DWORD *)v8 + 4690) == 1)
      {
        if (sub_D1C38(0x1Eu, 6))
        {
          int v399 = sub_D1C7C(0x1Eu);
          __uint64_t v400 = sub_DDEFC();
          v401 = (const char *)sub_D1CB0(6);
          int v402 = *((_DWORD *)v8 + 4696);
          if (v399)
          {
            printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_HevcSplitDecision return %d\n", v400, 30, v401, v402);
            __uint64_t v403 = sub_DDEFC();
            v977 = (const char *)sub_D1CB0(6);
            syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_HevcSplitDecision return %d", v403, 30, v977, *((_DWORD *)v8 + 4696));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_HevcSplitDecision return %d", v400, 30, v401, v402);
          }
        }
        int v129 = *((_DWORD *)v8 + 4696);
        goto LABEL_158;
      }
      if (sub_D1C38(3u, 4))
      {
        int v845 = sub_D1C7C(3u);
        __uint64_t v846 = sub_DDEFC();
        v847 = (const char *)sub_D1CB0(4);
        if (v845)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: Property HevcSplitDecisionMode supported only on H.265 codec. Failed.\n", v846, 3, v847, "AVE_HEVCCopyProperty", 14251, "(encoderPrivateStorage->VideoParamsDriver.codecID == AVE_CodecType_HEVC)");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: Property HevcSplitDecisionMode supported only on H.265 codec. Failed.");
      }
LABEL_22:
      uint64_t v28 = 4294954384;
      goto LABEL_106;
    }
    v1046 = (int *)v8 + 29595;
    if (CFEqual(a2, @"EnableQPModChroma"))
    {
      if (*((_DWORD *)v8 + 4690) == 1)
      {
        if (sub_D1C38(0x1Eu, 6))
        {
          int v404 = sub_D1C7C(0x1Eu);
          __uint64_t v405 = sub_DDEFC();
          v406 = (const char *)sub_D1CB0(6);
          int v407 = *((_DWORD *)v8 + 31726);
          if (v404)
          {
            printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableQPModChroma return 0x%08x\n", v405, 30, v406, v407);
            __uint64_t v408 = sub_DDEFC();
            v978 = (const char *)sub_D1CB0(6);
            syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableQPModChroma return 0x%08x", v408, 30, v978, *((_DWORD *)v8 + 31726));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableQPModChroma return 0x%08x", v405, 30, v406, v407);
          }
        }
        int v33 = (void **)(v8 + 15863);
        goto LABEL_29;
      }
      if (sub_D1C38(3u, 4))
      {
        int v848 = sub_D1C7C(3u);
        __uint64_t v849 = sub_DDEFC();
        v850 = (const char *)sub_D1CB0(4);
        if (v848)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: Property EnableQPModChroma supported only on H.265 codec. Failed.\n", v849, 3, v850, "AVE_HEVCCopyProperty", 14265, "(encoderPrivateStorage->VideoParamsDriver.codecID == AVE_CodecType_HEVC)");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: Property EnableQPModChroma supported only on H.265 codec. Failed.");
      }
      goto LABEL_22;
    }
    if (CFEqual(a2, @"MotionEstimationSearchMode"))
    {
      *a4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, v8 + 23144);
      if (sub_D1C38(0x1Eu, 6))
      {
        int v409 = sub_D1C7C(0x1Eu);
        __uint64_t v410 = sub_DDEFC();
        v411 = (const char *)sub_D1CB0(6);
        if (v409)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MotionEstimationSearchMode return %d\n", v410, 30, v411, *((_DWORD *)v8 + 46288));
          sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MotionEstimationSearchMode return %d");
      }
      goto LABEL_38;
    }
    if (CFEqual(a2, @"SupportedMotionSearchModes"))
    {
      int v412 = sub_DB774(*((_DWORD *)v8 + 45892), 1, 1);
      if (v412)
      {
        __uint64_t v413 = (int *)v412;
        v414 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
        if (v414)
        {
          CFMutableArrayRef Mutable = v414;
          uint64_t v415 = sub_BE600(v413 + 1, *v413, v414);
          uint64_t v28 = sub_DDE40(v415);
          if (sub_D1C38(0x1Eu, 6))
          {
            int v416 = sub_D1C7C(0x1Eu);
            __uint64_t v417 = sub_DDEFC();
            v418 = (const char *)sub_D1CB0(6);
            if (v416)
            {
              printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SupportedMotionSearchModes\n", v417, 30, v418);
              __uint64_t v419 = sub_DDEFC();
              v979 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SupportedMotionSearchModes", v419, 30, v979);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SupportedMotionSearchModes", v417, 30, v418);
            }
          }
          goto LABEL_186;
        }
        if (sub_D1C38(3u, 4))
        {
          int v854 = sub_D1C7C(3u);
          __uint64_t v855 = sub_DDEFC();
          v856 = (const char *)sub_D1CB0(4);
          if (v854)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to create CFArray\n", v855, 3, v856, "AVE_HEVCCopyProperty", 14295, "pArray != __null");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray");
        }
      }
      else if (sub_D1C38(3u, 4))
      {
        int v851 = sub_D1C7C(3u);
        __uint64_t v852 = sub_DDEFC();
        v853 = (const char *)sub_D1CB0(4);
        if (v851)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to find matched search range\n", v852, 3, v853, "AVE_HEVCCopyProperty", 14291, "pSR != __null");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to find matched search range");
      }
      uint64_t v28 = 4294954392;
      goto LABEL_106;
    }
    if (CFEqual(a2, @"UseElementaryStreamOutput"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v420 = sub_D1C7C(0x1Eu);
        __uint64_t v421 = sub_DDEFC();
        uint64_t v422 = (const char *)sub_D1CB0(6);
        if (*v37) {
          int v423 = "TRUE";
        }
        else {
          int v423 = "FALSE";
        }
        if (v420)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseElementaryStreamOutput return %s\n", v421, 30, v422, v423);
          __uint64_t v421 = sub_DDEFC();
          uint64_t v422 = (const char *)sub_D1CB0(6);
          if (*v37) {
            int v423 = "TRUE";
          }
          else {
            int v423 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseElementaryStreamOutput return %s", v421, 30, v422, v423);
      }
      int v27 = *v37;
      goto LABEL_19;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_InputPixelFormat))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v424 = sub_D1C7C(0x1Eu);
        __uint64_t v425 = sub_DDEFC();
        __uint64_t v426 = (const char *)sub_D1CB0(6);
        int v427 = *((_DWORD *)v8 + 25773);
        if (v424)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_InputPixelFormat return %d\n", v425, 30, v426, v427);
          __uint64_t v428 = sub_DDEFC();
          v980 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_InputPixelFormat return %d", v428, 30, v980, *((_DWORD *)v8 + 25773));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_InputPixelFormat return %d", v425, 30, v426, v427);
        }
      }
      int v857 = *((_DWORD *)v8 + 25773);
      switch(v857)
      {
        case 3:
          if (*((_DWORD *)v8 + 27440) == 1) {
            int v858 = 875836518;
          }
          else {
            int v858 = 875836534;
          }
          goto LABEL_1480;
        case 2:
          if (*((_DWORD *)v8 + 27440) == 1) {
            int v858 = 875704934;
          }
          else {
            int v858 = 875704950;
          }
          goto LABEL_1480;
        case 1:
          if (*((_DWORD *)v8 + 27440) == 1) {
            int v858 = 875704422;
          }
          else {
            int v858 = 875704438;
          }
LABEL_1480:
          LODWORD(keys[0]) = v858;
          CFAllocatorRef v34 = kCFAllocatorDefault;
          int v33 = keys;
          goto LABEL_30;
      }
LABEL_1302:
      StringForIntegerCodePoint = 0;
      goto LABEL_32;
    }
    if (CFEqual(a2, @"FlatAreaLowQp"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v429 = sub_D1C7C(0x1Eu);
        __uint64_t v430 = sub_DDEFC();
        int v431 = (const char *)sub_D1CB0(6);
        if (*((unsigned char *)v8 + 255)) {
          __uint64_t v432 = "TRUE";
        }
        else {
          __uint64_t v432 = "FALSE";
        }
        if (v429)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_FlatAreaLowQp return %s\n", v430, 30, v431, v432);
          __uint64_t v430 = sub_DDEFC();
          int v431 = (const char *)sub_D1CB0(6);
          if (*((unsigned char *)v8 + 255)) {
            __uint64_t v432 = "TRUE";
          }
          else {
            __uint64_t v432 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_FlatAreaLowQp return %s", v430, 30, v431, v432);
      }
      int v27 = *((unsigned __int8 *)v8 + 255);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"UltraFlatAreaLowQp"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v433 = sub_D1C7C(0x1Eu);
        __uint64_t v434 = sub_DDEFC();
        __uint64_t v435 = (const char *)sub_D1CB0(6);
        if (*((unsigned char *)v8 + 256)) {
          int v436 = "TRUE";
        }
        else {
          int v436 = "FALSE";
        }
        if (v433)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UltraFlatAreaLowQp return %s\n", v434, 30, v435, v436);
          __uint64_t v434 = sub_DDEFC();
          __uint64_t v435 = (const char *)sub_D1CB0(6);
          if (*((unsigned char *)v8 + 256)) {
            int v436 = "TRUE";
          }
          else {
            int v436 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UltraFlatAreaLowQp return %s", v434, 30, v435, v436);
      }
      int v27 = *((unsigned __int8 *)v8 + 256);
      goto LABEL_19;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_PerceptualQualityOptimization))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v437 = sub_D1C7C(0x1Eu);
        __uint64_t v438 = sub_DDEFC();
        v439 = (const char *)sub_D1CB0(6);
        if (*((unsigned char *)v8 + 257)) {
          int v440 = "true";
        }
        else {
          int v440 = "false";
        }
        if (v437)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_PerceptualQualityOptimization return %s\n", v438, 30, v439, v440);
          __uint64_t v438 = sub_DDEFC();
          v439 = (const char *)sub_D1CB0(6);
          if (*((unsigned char *)v8 + 257)) {
            int v440 = "true";
          }
          else {
            int v440 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_PerceptualQualityOptimization return %s", v438, 30, v439, v440);
      }
      int v27 = *((unsigned __int8 *)v8 + 257);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"LrmePipeSyncMode"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v441 = sub_D1C7C(0x1Eu);
        __uint64_t v442 = sub_DDEFC();
        v443 = (const char *)sub_D1CB0(6);
        if (*v1048) {
          int v444 = "TRUE";
        }
        else {
          int v444 = "FALSE";
        }
        if (v441)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LrmePipeSyncMode return %s\n", v442, 30, v443, v444);
          __uint64_t v442 = sub_DDEFC();
          v443 = (const char *)sub_D1CB0(6);
          if (*v1048) {
            int v444 = "TRUE";
          }
          else {
            int v444 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LrmePipeSyncMode return %s", v442, 30, v443, v444);
      }
      int v27 = *v1048;
      goto LABEL_19;
    }
    if (CFEqual(a2, @"LRMEScaledSrcEn"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v445 = sub_D1C7C(0x1Eu);
        __uint64_t v446 = sub_DDEFC();
        v447 = (const char *)sub_D1CB0(6);
        int v448 = *((unsigned __int8 *)v8 + 18338);
        if (v445)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LRMEScaledSrcEn return 0x%08x\n", v446, 30, v447, v448);
          __uint64_t v449 = sub_DDEFC();
          v981 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LRMEScaledSrcEn return 0x%08x", v449, 30, v981, *((unsigned __int8 *)v8 + 18338));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LRMEScaledSrcEn return 0x%08x", v446, 30, v447, v448);
        }
      }
      uint64_t v133 = 18338;
      goto LABEL_171;
    }
    if (CFEqual(a2, @"LRMEOutputType"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v450 = sub_D1C7C(0x1Eu);
        __uint64_t v451 = sub_DDEFC();
        __uint64_t v452 = (const char *)sub_D1CB0(6);
        int v453 = *((_DWORD *)v8 + 5040);
        if (v450)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LRMEOutputType return 0x%08x\n", v451, 30, v452, v453);
          __uint64_t v454 = sub_DDEFC();
          v982 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LRMEOutputType return 0x%08x", v454, 30, v982, *((_DWORD *)v8 + 5040));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LRMEOutputType return 0x%08x", v451, 30, v452, v453);
        }
      }
      uint64_t v133 = 20160;
      goto LABEL_171;
    }
    if (CFEqual(a2, @"CodedBuffersOverride"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v455 = sub_D1C7C(0x1Eu);
        __uint64_t v456 = sub_DDEFC();
        __uint64_t v457 = (const char *)sub_D1CB0(6);
        int v458 = *((_DWORD *)v8 + 5048);
        if (v455)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_CodedBuffersOverride return %d\n", v456, 30, v457, v458);
          __uint64_t v459 = sub_DDEFC();
          v983 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_CodedBuffersOverride return %d", v459, 30, v983, *((_DWORD *)v8 + 5048));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_CodedBuffersOverride return %d", v456, 30, v457, v458);
        }
      }
      uint64_t v133 = 20192;
      goto LABEL_171;
    }
    if (CFEqual(a2, @"EnableMBInputCtrl"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v460 = sub_D1C7C(0x1Eu);
        __uint64_t v461 = sub_DDEFC();
        __uint64_t v462 = (const char *)sub_D1CB0(6);
        if (*((unsigned char *)v8 + 1924)) {
          int v463 = "true";
        }
        else {
          int v463 = "false";
        }
        if (v460)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMBInputCtrl return %s\n", v461, 30, v462, v463);
          __uint64_t v461 = sub_DDEFC();
          __uint64_t v462 = (const char *)sub_D1CB0(6);
          if (*((unsigned char *)v8 + 1924)) {
            int v463 = "true";
          }
          else {
            int v463 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMBInputCtrl return %s", v461, 30, v462, v463);
      }
      int v27 = *((unsigned __int8 *)v8 + 1924);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"HierarchicalB"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v464 = sub_D1C7C(0x1Eu);
        __uint64_t v465 = sub_DDEFC();
        int v466 = (const char *)sub_D1CB0(6);
        int v467 = *((_DWORD *)v8 + 4487);
        if (v464)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_HierarchicalB return %u\n", v465, 30, v466, v467);
          __uint64_t v468 = sub_DDEFC();
          v984 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_HierarchicalB return %u", v468, 30, v984, *((_DWORD *)v8 + 4487));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_HierarchicalB return %u", v465, 30, v466, v467);
        }
      }
      int v859 = *((_DWORD *)v8 + 4487);
      goto LABEL_1361;
    }
    if (CFEqual(a2, @"UserRPSForFaceTime"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v469 = sub_D1C7C(0x1Eu);
        __uint64_t v470 = sub_DDEFC();
        v471 = (const char *)sub_D1CB0(6);
        if (v469)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UserRPSForFaceTime\n", v470, 30, v471);
          __uint64_t v472 = sub_DDEFC();
          v985 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UserRPSForFaceTime", v472, 30, v985);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UserRPSForFaceTime", v470, 30, v471);
        }
      }
      CFMutableArrayRef Mutable = CFArrayCreateMutable(a3, 2 * *((int *)v8 + 5053), &kCFTypeArrayCallBacks);
      if (Mutable)
      {
        if (*((int *)v8 + 5053) >= 1)
        {
          uint64_t v860 = 0;
          v861 = v8 + 2527;
          do
          {
            CFNumberRef v862 = CFNumberCreate(0, kCFNumberSInt32Type, v861);
            CFNumberRef v863 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)v861 + 68);
            CFArrayAppendValue(Mutable, v862);
            CFArrayAppendValue(Mutable, v863);
            if (v862) {
              CFRelease(v862);
            }
            if (v863) {
              CFRelease(v863);
            }
            ++v860;
            v861 = (const void **)((char *)v861 + 4);
          }
          while (v860 < *((int *)v8 + 5053));
        }
        goto LABEL_185;
      }
LABEL_1232:
      if (sub_D1C38(0x1Eu, 4))
      {
        int v864 = sub_D1C7C(0x1Eu);
        __uint64_t v865 = sub_DDEFC();
        v866 = (const char *)sub_D1CB0(4);
        if (v864)
        {
          printf("%lld %d AVE %s: FIG: CFArrayCreateMutable failed\n", v865, 30, v866);
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: FIG: CFArrayCreateMutable failed");
      }
      goto LABEL_1448;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_VideoResolutionAdaptation))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v473 = sub_D1C7C(0x1Eu);
        __uint64_t v474 = sub_DDEFC();
        int v475 = (const char *)sub_D1CB0(6);
        int v476 = (*((_DWORD *)v8 + 50) >> 5) & 1;
        if (v473)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_VideoResolutionAdaptation return %d\n", v474, 30, v475, v476);
          __uint64_t v477 = sub_DDEFC();
          v986 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_VideoResolutionAdaptation return %d", v477, 30, v986, (*((_DWORD *)v8 + 50) >> 5) & 1);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_VideoResolutionAdaptation return %d", v474, 30, v475, v476);
        }
      }
      if (((_BYTE)v8[25] & 0x20) != 0) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_VideoResolutionAdaptationType))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v478 = sub_D1C7C(0x1Eu);
        __uint64_t v479 = sub_DDEFC();
        int v480 = (const char *)sub_D1CB0(6);
        int v481 = *((_DWORD *)v8 + 5089);
        if (v478)
        {
          printf("%lld %d AVE %s: asked for kVTCompressionPropertyKey_VideoResolutionAdaptationType return %d\n", v479, 30, v480, v481);
          __uint64_t v482 = sub_DDEFC();
          v987 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: asked for kVTCompressionPropertyKey_VideoResolutionAdaptationType return %d", v482, 30, v987, *((_DWORD *)v8 + 5089));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: asked for kVTCompressionPropertyKey_VideoResolutionAdaptationType return %d", v479, 30, v480, v481);
        }
      }
      uint64_t v133 = 20356;
      goto LABEL_171;
    }
    if (CFEqual(a2, @"SAOMode"))
    {
      int v483 = *((_DWORD *)v8 + 4697);
      LODWORD(keys[0]) = v483;
      if (sub_D1C38(0x1Eu, 6))
      {
        int v484 = sub_D1C7C(0x1Eu);
        __uint64_t v485 = sub_DDEFC();
        v486 = (const char *)sub_D1CB0(6);
        if (v484)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SAOMode return %d\n", v485, 30, v486, v483);
          sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SAOMode return %d");
      }
      goto LABEL_50;
    }
    if (CFEqual(a2, @"AllocMaxOpBuffer"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v487 = sub_D1C7C(0x1Eu);
        __uint64_t v488 = sub_DDEFC();
        int v489 = (const char *)sub_D1CB0(6);
        int v490 = *((unsigned __int8 *)v8 + 20200);
        if (v487)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllocMaxOpBuffer return %u\n", v488, 30, v489, v490);
          __uint64_t v491 = sub_DDEFC();
          v988 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllocMaxOpBuffer return %u", v491, 30, v988, *((unsigned __int8 *)v8 + 20200));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllocMaxOpBuffer return %u", v488, 30, v489, v490);
        }
      }
      int v27 = *((unsigned __int8 *)v8 + 20200);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"AllocCodedBufferHalfSize"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v492 = sub_D1C7C(0x1Eu);
        __uint64_t v493 = sub_DDEFC();
        v494 = (const char *)sub_D1CB0(6);
        int v495 = *((_DWORD *)v8 + 5051);
        if (v492)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllocCodedBufferHalfSize return %u\n", v493, 30, v494, v495);
          __uint64_t v496 = sub_DDEFC();
          v989 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllocCodedBufferHalfSize return %u", v496, 30, v989, *((_DWORD *)v8 + 5051));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllocCodedBufferHalfSize return %u", v493, 30, v494, v495);
        }
      }
      if (*((_DWORD *)v8 + 5051) == 50) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, @"ChromaQpOffset"))
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(a3, 0, &kCFTypeArrayCallBacks);
      CFNumberRef v497 = CFNumberCreate(a3, kCFNumberSInt32Type, (char *)v8 + 118420);
      CFNumberRef v498 = CFNumberCreate(a3, kCFNumberSInt32Type, (char *)v8 + 118452);
      CFArrayAppendValue(Mutable, v497);
      CFArrayAppendValue(Mutable, v498);
      if (v497) {
        CFRelease(v497);
      }
      if (v498) {
        CFRelease(v498);
      }
      if (sub_D1C38(0x1Eu, 6))
      {
        int v499 = sub_D1C7C(0x1Eu);
        __uint64_t v500 = sub_DDEFC();
        v501 = (const char *)sub_D1CB0(6);
        if (v499)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ChromaQpOffset return %d %d\n", v500, 30, v501, *((_DWORD *)v8 + 29605), *((_DWORD *)v8 + 29613));
          sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ChromaQpOffset return %d %d");
      }
      goto LABEL_185;
    }
    if (CFEqual(a2, @"ChromaQPIndexOffsetMultiPPS"))
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(a3, 0, &kCFTypeArrayCallBacks);
      if (2 * *((_DWORD *)v8 + 4513) - 2 >= 1)
      {
        uint64_t v502 = 0;
        int v503 = v8 + 14807;
        do
        {
          CFNumberRef v504 = CFNumberCreate(a3, kCFNumberSInt32Type, v503 - 8);
          CFNumberRef v505 = CFNumberCreate(a3, kCFNumberSInt32Type, v503);
          CFArrayAppendValue(Mutable, v504);
          CFArrayAppendValue(Mutable, v505);
          if (v504) {
            CFRelease(v504);
          }
          if (v505) {
            CFRelease(v505);
          }
          if (sub_D1C38(0x1Eu, 6))
          {
            int v506 = sub_D1C7C(0x1Eu);
            __uint64_t v507 = sub_DDEFC();
            __uint64_t v508 = (const char *)sub_D1CB0(6);
            int v509 = *(v503 - 8);
            int v510 = *v503;
            if (v506)
            {
              printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ChromaQPIndexOffsetMultiPPS return %d %d\n", v507, 30, v508, *(v503 - 8), v510);
              __uint64_t v507 = sub_DDEFC();
              __uint64_t v508 = (const char *)sub_D1CB0(6);
              int v509 = *(v503 - 8);
              int v510 = *v503;
            }
            syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ChromaQPIndexOffsetMultiPPS return %d %d", v507, 30, v508, v509, v510);
          }
          ++v502;
          ++v503;
        }
        while (v502 < 2 * *((_DWORD *)v8 + 4513) - 2);
      }
      goto LABEL_185;
    }
    if (CFEqual(a2, @"iChatUsageString"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v511 = sub_D1C7C(0x1Eu);
        __uint64_t v512 = sub_DDEFC();
        __uint64_t v513 = (const char *)sub_D1CB0(6);
        int v514 = *((_DWORD *)v8 + 4698);
        if (v511)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_iChatUsageString return %u\n", v512, 30, v513, v514);
          __uint64_t v515 = sub_DDEFC();
          v990 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_iChatUsageString return %u", v515, 30, v990, *((_DWORD *)v8 + 4698));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_iChatUsageString return %u", v512, 30, v513, v514);
        }
      }
      switch(*((_DWORD *)v8 + 4698))
      {
        case 0:
          uint64_t v28 = 0;
          CFStringRef v80 = @"FaceTime";
          goto LABEL_105;
        case 1:
          uint64_t v28 = 0;
          CFStringRef v80 = @"CarPlay";
          goto LABEL_105;
        case 2:
          uint64_t v28 = 0;
          CFStringRef v80 = @"AirPlay";
          goto LABEL_105;
        case 3:
          uint64_t v28 = 0;
          CFStringRef v80 = @"SafeView";
          goto LABEL_105;
        case 4:
          uint64_t v28 = 0;
          CFStringRef v80 = @"ScreenSharing";
          goto LABEL_105;
        case 5:
          uint64_t v28 = 0;
          CFStringRef v80 = @"MediaAnalysis";
          goto LABEL_105;
        case 7:
          uint64_t v28 = 0;
          CFStringRef v80 = @"SideCar";
          goto LABEL_105;
        default:
          goto LABEL_1375;
      }
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_UserParameterSetsIds))
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(a3, 0, &kCFTypeArrayCallBacks);
      v516 = (int *)v8 + 5093;
      CFNumberRef v517 = CFNumberCreate(a3, kCFNumberSInt32Type, (char *)v8 + 20372);
      CFArrayAppendValue(Mutable, v517);
      if (v517) {
        CFRelease(v517);
      }
      if (sub_D1C38(0x1Eu, 6))
      {
        int v518 = sub_D1C7C(0x1Eu);
        __uint64_t v519 = sub_DDEFC();
        __uint64_t v520 = (const char *)sub_D1CB0(6);
        int v521 = *v516;
        if (v518)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserParameterSetsIds return %d\n", v519, 30, v520, v521);
          __uint64_t v522 = sub_DDEFC();
          v991 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserParameterSetsIds return %d", v522, 30, v991, *v516);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserParameterSetsIds return %d", v519, 30, v520, v521);
        }
      }
      CFNumberRef v867 = CFNumberCreate(a3, kCFNumberSInt32Type, v8 + 12886);
      CFArrayAppendValue(Mutable, v867);
      if (v867) {
        CFRelease(v867);
      }
      if (sub_D1C38(0x1Eu, 6))
      {
        int v868 = sub_D1C7C(0x1Eu);
        __uint64_t v869 = sub_DDEFC();
        v870 = (const char *)sub_D1CB0(6);
        int v871 = *v91;
        if (v868)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserParameterSetsIds return %d\n", v869, 30, v870, v871);
          __uint64_t v872 = sub_DDEFC();
          v1034 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserParameterSetsIds return %d", v872, 30, v1034, *v91);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserParameterSetsIds return %d", v869, 30, v870, v871);
        }
      }
      if (*((int *)v8 + 4513) >= 1)
      {
        uint64_t v935 = 0;
        v936 = v8 + 2252;
        do
        {
          CFNumberRef v937 = CFNumberCreate(a3, kCFNumberSInt32Type, v936);
          CFArrayAppendValue(Mutable, v937);
          if (v937) {
            CFRelease(v937);
          }
          if (sub_D1C38(0x1Eu, 6))
          {
            int v938 = sub_D1C7C(0x1Eu);
            __uint64_t v939 = sub_DDEFC();
            v940 = (const char *)sub_D1CB0(6);
            int v941 = *v936;
            if (v938)
            {
              printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserParameterSetsIds return %d\n", v939, 30, v940, v941);
              __uint64_t v939 = sub_DDEFC();
              v940 = (const char *)sub_D1CB0(6);
              int v941 = *v936;
            }
            syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserParameterSetsIds return %d", v939, 30, v940, v941);
          }
          ++v935;
          ++v936;
        }
        while (v935 < *((int *)v8 + 4513));
      }
      goto LABEL_185;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_RequiredHEVCSequenceParameterSetID))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v523 = sub_D1C7C(0x1Eu);
        __uint64_t v524 = sub_DDEFC();
        __uint64_t v525 = (const char *)sub_D1CB0(6);
        int v526 = *v91;
        if (v523)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RequiredHEVCSequenceParameterSetID return %d\n", v524, 30, v525, v526);
          __uint64_t v527 = sub_DDEFC();
          v992 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RequiredHEVCSequenceParameterSetID return %d", v527, 30, v992, *v91);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RequiredHEVCSequenceParameterSetID return %d", v524, 30, v525, v526);
        }
      }
      int v33 = (void **)(v8 + 12886);
      goto LABEL_29;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_RequiredHEVCPictureParameterSetID))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v528 = sub_D1C7C(0x1Eu);
        __uint64_t v529 = sub_DDEFC();
        CFNumberRef v530 = (const char *)sub_D1CB0(6);
        int v531 = *v1046;
        if (v528)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RequiredHEVCPictureParameterSetID return %d\n", v529, 30, v530, v531);
          __uint64_t v532 = sub_DDEFC();
          v993 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RequiredHEVCPictureParameterSetID return %d", v532, 30, v993, *v1046);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RequiredHEVCPictureParameterSetID return %d", v529, 30, v530, v531);
        }
      }
      int v33 = (void **)((char *)v8 + 118380);
      goto LABEL_29;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_RequireDeterministicDependencyAndReordering))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v533 = sub_D1C7C(0x1Eu);
        __uint64_t v534 = sub_DDEFC();
        __uint64_t v535 = (const char *)sub_D1CB0(6);
        int v536 = *((unsigned __int8 *)v8 + 18859);
        if (v533)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RequireDeterministicDependencyAndReordering return %u\n", v534, 30, v535, v536);
          __uint64_t v537 = sub_DDEFC();
          v994 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RequireDeterministicDependencyAndReordering return %u", v537, 30, v994, *((unsigned __int8 *)v8 + 18859));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RequireDeterministicDependencyAndReordering return %u", v534, 30, v535, v536);
        }
      }
      if (*((unsigned char *)v8 + 18859)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, @"EnableSliceEncodingMode"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v538 = sub_D1C7C(0x1Eu);
        __uint64_t v539 = sub_DDEFC();
        __uint64_t v540 = (const char *)sub_D1CB0(6);
        int v541 = *((unsigned __int8 *)v8 + 103260);
        if (v538)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableSliceEncodingMode return %u\n", v539, 30, v540, v541);
          __uint64_t v542 = sub_DDEFC();
          v995 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableSliceEncodingMode return %u", v542, 30, v995, *((unsigned __int8 *)v8 + 103260));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableSliceEncodingMode return %u", v539, 30, v540, v541);
        }
      }
      if (*((unsigned char *)v8 + 18056)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, @"EnableMultiSliceStats"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v543 = sub_D1C7C(0x1Eu);
        __uint64_t v544 = sub_DDEFC();
        __uint64_t v545 = (const char *)sub_D1CB0(6);
        int v546 = *((unsigned __int8 *)v8 + 18320);
        if (v543)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMultiSliceStats return %u\n", v544, 30, v545, v546);
          __uint64_t v547 = sub_DDEFC();
          v996 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMultiSliceStats return %u", v547, 30, v996, *((unsigned __int8 *)v8 + 18320));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMultiSliceStats return %u", v544, 30, v545, v546);
        }
      }
      if (*((unsigned char *)v8 + 18320)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, @"UseReferenceCompressedBuffers"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v548 = sub_D1C7C(0x1Eu);
        __uint64_t v549 = sub_DDEFC();
        __uint64_t v550 = (const char *)sub_D1CB0(6);
        int v551 = *((unsigned __int8 *)v8 + 18013);
        if (v548)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseReferenceCompressedBuffers return %u\n", v549, 30, v550, v551);
          __uint64_t v552 = sub_DDEFC();
          v997 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseReferenceCompressedBuffers return %u", v552, 30, v997, *((unsigned __int8 *)v8 + 18013));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseReferenceCompressedBuffers return %u", v549, 30, v550, v551);
        }
      }
      if (*((unsigned char *)v8 + 18013)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, @"ForceRefUncompressed"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v553 = sub_D1C7C(0x1Eu);
        __uint64_t v554 = sub_DDEFC();
        unsigned int v555 = (const char *)sub_D1CB0(6);
        int v556 = *((unsigned __int8 *)v8 + 18014);
        if (v553)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ForceRefUncompressed return %u\n", v554, 30, v555, v556);
          __uint64_t v557 = sub_DDEFC();
          v998 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ForceRefUncompressed return %u", v557, 30, v998, *((unsigned __int8 *)v8 + 18014));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ForceRefUncompressed return %u", v554, 30, v555, v556);
        }
      }
      if (*((unsigned char *)v8 + 18014)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, @"SetDbgInternalParams"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v558 = sub_D1C7C(0x1Eu);
        __uint64_t v559 = sub_DDEFC();
        v560 = (const char *)sub_D1CB0(6);
        int v561 = *v70;
        if (v558)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SetDbgInternalParams return %d\n", v559, 30, v560, v561);
          __uint64_t v562 = sub_DDEFC();
          v999 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SetDbgInternalParams return %d", v562, 30, v999, *v70);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SetDbgInternalParams return %d", v559, 30, v560, v561);
        }
      }
      uint64_t v133 = 18324;
      goto LABEL_171;
    }
    if (CFEqual(a2, @"TemporalIDNestingFlag"))
    {
      int v563 = *((unsigned __int8 *)v8 + 20388);
      if (sub_D1C38(0x1Eu, 6))
      {
        int v564 = sub_D1C7C(0x1Eu);
        __uint64_t v565 = sub_DDEFC();
        int v566 = (const char *)sub_D1CB0(6);
        if (v563) {
          __uint64_t v567 = "TRUE";
        }
        else {
          __uint64_t v567 = "FALSE";
        }
        if (v564)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_TemporalIDNestingFlag return %s\n", v565, 30, v566, v567);
          __uint64_t v568 = sub_DDEFC();
          v1000 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_TemporalIDNestingFlag return %s", v568, 30, v1000, v567);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_TemporalIDNestingFlag return %s", v565, 30, v566, v567);
        }
      }
      uint64_t v28 = 0;
      uint64_t v29 = &kCFBooleanFalse;
      if (v563) {
        uint64_t v29 = &kCFBooleanTrue;
      }
      goto LABEL_104;
    }
    if (CFEqual(a2, @"NumberOfTemporalLayers"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v569 = sub_D1C7C(0x1Eu);
        __uint64_t v570 = sub_DDEFC();
        v571 = (const char *)sub_D1CB0(6);
        int v572 = *((unsigned __int16 *)v8 + 9164);
        if (v569)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumberOfTemporalLayers return %u\n", v570, 30, v571, v572);
          __uint64_t v573 = sub_DDEFC();
          v1001 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumberOfTemporalLayers return %u", v573, 30, v1001, *((unsigned __int16 *)v8 + 9164));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumberOfTemporalLayers return %u", v570, 30, v571, v572);
        }
      }
      int v873 = *((unsigned __int16 *)v8 + 9164);
      LODWORD(keys[0]) = v873;
      if (sub_D1C38(0x1Eu, 6))
      {
        int v874 = sub_D1C7C(0x1Eu);
        __uint64_t v875 = sub_DDEFC();
        v876 = (const char *)sub_D1CB0(6);
        if (v874)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumberOfTemporalLayers return %d\n", v875, 30, v876, v873);
          sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumberOfTemporalLayers return %d");
      }
      goto LABEL_50;
    }
    if (CFEqual(a2, @"NumBTemporalLayers"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v574 = sub_D1C7C(0x1Eu);
        __uint64_t v575 = sub_DDEFC();
        CMTimeValue v576 = (const char *)sub_D1CB0(6);
        int v577 = *((unsigned __int16 *)v8 + 9165);
        if (v574)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumBTemporalLayers return %u\n", v575, 30, v576, v577);
          __uint64_t v578 = sub_DDEFC();
          v1002 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumBTemporalLayers return %u", v578, 30, v1002, *((unsigned __int16 *)v8 + 9165));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumBTemporalLayers return %u", v575, 30, v576, v577);
        }
      }
      int v877 = *((unsigned __int16 *)v8 + 9165);
      LODWORD(keys[0]) = v877;
      if (sub_D1C38(0x1Eu, 6))
      {
        int v878 = sub_D1C7C(0x1Eu);
        __uint64_t v879 = sub_DDEFC();
        v880 = (const char *)sub_D1CB0(6);
        if (v878)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumBTemporalLayers return %d\n", v879, 30, v880, v877);
          sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumBTemporalLayers return %d");
      }
      goto LABEL_50;
    }
    if (CFEqual(a2, @"BaseLayerFrameRate"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v579 = sub_D1C7C(0x1Eu);
        __uint64_t v580 = sub_DDEFC();
        uint64_t v581 = (const char *)sub_D1CB0(6);
        int v582 = *((unsigned __int16 *)v8 + 9165);
        if (v579)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_BaseLayerFrameRate return %u\n", v580, 30, v581, v582);
          __uint64_t v583 = sub_DDEFC();
          v1003 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_BaseLayerFrameRate return %u", v583, 30, v1003, *((unsigned __int16 *)v8 + 9165));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_BaseLayerFrameRate return %u", v580, 30, v581, v582);
        }
      }
      int v881 = *((_DWORD *)v8 + 56);
      LODWORD(keys[0]) = v881;
      if (sub_D1C38(0x1Eu, 6))
      {
        int v882 = sub_D1C7C(0x1Eu);
        __uint64_t v883 = sub_DDEFC();
        v884 = (const char *)sub_D1CB0(6);
        if (v882)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_BaseLayerFrameRate return %d\n", v883, 30, v884, v881);
          sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_BaseLayerFrameRate return %d");
      }
      goto LABEL_50;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_FrameRateTargetForAverageBitrate))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v584 = sub_D1C7C(0x1Eu);
        __uint64_t v585 = sub_DDEFC();
        __uint64_t v586 = (const char *)sub_D1CB0(6);
        int v587 = *((_DWORD *)v8 + 4866);
        if (v584)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_FrameRateTargetForAverageBitrate return %d\n", v585, 30, v586, v587);
          __uint64_t v588 = sub_DDEFC();
          v1004 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_FrameRateTargetForAverageBitrate return %d", v588, 30, v1004, *((_DWORD *)v8 + 4866));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_FrameRateTargetForAverageBitrate return %d", v585, 30, v586, v587);
        }
      }
      LODWORD(keys[0]) = 0;
      if (sub_D1C38(0x1Eu, 6))
      {
        int v885 = sub_D1C7C(0x1Eu);
        __uint64_t v886 = sub_DDEFC();
        v887 = (const char *)sub_D1CB0(6);
        int v888 = *((_DWORD *)v8 + 4866);
        if (v885)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_FrameRateTargetForAverageBitrate return %u\n", v886, 30, v887, v888);
          __uint64_t v889 = sub_DDEFC();
          v1035 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_FrameRateTargetForAverageBitrate return %u", v889, 30, v1035, *((_DWORD *)v8 + 4866));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_FrameRateTargetForAverageBitrate return %u", v886, 30, v887, v888);
        }
      }
      int v129 = *((_DWORD *)v8 + 4866);
      if (!v129) {
        goto LABEL_50;
      }
      goto LABEL_158;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_QuantizationScalingMatrixPreset))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v589 = sub_D1C7C(0x1Eu);
        __uint64_t v590 = sub_DDEFC();
        __uint64_t v591 = (const char *)sub_D1CB0(6);
        int v592 = *((_DWORD *)v8 + 4702);
        if (v589)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_QuantizationScalingMatrixPreset return %d\n", v590, 30, v591, v592);
          __uint64_t v593 = sub_DDEFC();
          v1005 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_QuantizationScalingMatrixPreset return %d", v593, 30, v1005, *((_DWORD *)v8 + 4702));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_QuantizationScalingMatrixPreset return %d", v590, 30, v591, v592);
        }
      }
      int v129 = *((_DWORD *)v8 + 4702);
      if (v129 == 1) {
        goto LABEL_158;
      }
      if (!v129)
      {
        int v129 = 2;
        goto LABEL_158;
      }
      goto LABEL_1302;
    }
    if (CFEqual(a2, @"NumMergeCandidates"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v594 = sub_D1C7C(0x1Eu);
        __uint64_t v595 = sub_DDEFC();
        __uint64_t v596 = (const char *)sub_D1CB0(6);
        int v597 = *v1047;
        if (v594)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumMergeCandidates return %d\n", v595, 30, v596, v597);
          __uint64_t v598 = sub_DDEFC();
          v1006 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumMergeCandidates return %d", v598, 30, v1006, *v1047);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumMergeCandidates return %d", v595, 30, v596, v597);
        }
      }
      int v129 = *v1047 + 5;
      goto LABEL_158;
    }
    if (CFEqual(a2, @"EnableMultipleScalingMatrices"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v599 = sub_D1C7C(0x1Eu);
        __uint64_t v600 = sub_DDEFC();
        v601 = (const char *)sub_D1CB0(6);
        int v602 = *((unsigned __int8 *)v8 + 18851);
        if (v599)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMultipleScalingMatrices return %u\n", v600, 30, v601, v602);
          __uint64_t v603 = sub_DDEFC();
          v1007 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMultipleScalingMatrices return %u", v603, 30, v1007, *((unsigned __int8 *)v8 + 18851));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMultipleScalingMatrices return %u", v600, 30, v601, v602);
        }
      }
      if (*((unsigned char *)v8 + 18851)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, kVTCompressionProperty_SoftMinQuantizationParameter))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v604 = sub_D1C7C(0x1Eu);
        __uint64_t v605 = sub_DDEFC();
        v606 = (const char *)sub_D1CB0(6);
        int v607 = *((_DWORD *)v8 + 460);
        if (v604)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionProperty_SoftMinQuantizationParameter return %d\n", v605, 30, v606, v607);
          __uint64_t v608 = sub_DDEFC();
          v1008 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionProperty_SoftMinQuantizationParameter return %d", v608, 30, v1008, *((_DWORD *)v8 + 460));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionProperty_SoftMinQuantizationParameter return %d", v605, 30, v606, v607);
        }
      }
      int v33 = (void **)(v8 + 230);
      goto LABEL_29;
    }
    if (CFEqual(a2, kVTCompressionProperty_SoftMaxQuantizationParameter))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v609 = sub_D1C7C(0x1Eu);
        __uint64_t v610 = sub_DDEFC();
        int v611 = (const char *)sub_D1CB0(6);
        int v612 = *((_DWORD *)v8 + 461);
        if (v609)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionProperty_SoftMaxQuantizationParameter return %d\n", v610, 30, v611, v612);
          __uint64_t v613 = sub_DDEFC();
          v1009 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionProperty_SoftMaxQuantizationParameter return %d", v613, 30, v1009, *((_DWORD *)v8 + 461));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionProperty_SoftMaxQuantizationParameter return %d", v610, 30, v611, v612);
        }
      }
      int v33 = (void **)((char *)v8 + 1844);
      goto LABEL_29;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_MaxAllowedFrameQP))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v614 = sub_D1C7C(0x1Eu);
        __uint64_t v615 = sub_DDEFC();
        int v616 = (const char *)sub_D1CB0(6);
        int v617 = *((_DWORD *)v8 + 463);
        if (v614)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxAllowedFrameQP return %d\n", v615, 30, v616, v617);
          __uint64_t v618 = sub_DDEFC();
          v1010 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxAllowedFrameQP return %d", v618, 30, v1010, *((_DWORD *)v8 + 463));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxAllowedFrameQP return %d", v615, 30, v616, v617);
        }
      }
      int v33 = (void **)((char *)v8 + 1852);
      goto LABEL_29;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_MinAllowedFrameQP))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v619 = sub_D1C7C(0x1Eu);
        __uint64_t v620 = sub_DDEFC();
        __uint64_t v621 = (const char *)sub_D1CB0(6);
        int v622 = *((_DWORD *)v8 + 462);
        if (v619)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MinAllowedFrameQP return %d\n", v620, 30, v621, v622);
          __uint64_t v623 = sub_DDEFC();
          v1011 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MinAllowedFrameQP return %d", v623, 30, v1011, *((_DWORD *)v8 + 462));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MinAllowedFrameQP return %d", v620, 30, v621, v622);
        }
      }
      int v33 = (void **)(v8 + 231);
      goto LABEL_29;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_HEVCSyncSampleNALUnitTypes))
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(a3, 0, &kCFTypeArrayCallBacks);
      LODWORD(keys[0]) = 20;
      LODWORD(values[0]) = 21;
      CFNumberRef v624 = CFNumberCreate(a3, kCFNumberSInt32Type, keys);
      CFNumberRef v625 = CFNumberCreate(a3, kCFNumberSInt32Type, values);
      CFArrayAppendValue(Mutable, v624);
      CFArrayAppendValue(Mutable, v625);
      if (v624) {
        CFRelease(v624);
      }
      if (v625) {
        CFRelease(v625);
      }
      if (sub_D1C38(0x1Eu, 6))
      {
        int v626 = sub_D1C7C(0x1Eu);
        __uint64_t v627 = sub_DDEFC();
        int v628 = (const char *)sub_D1CB0(6);
        if (v626)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_HEVCSyncSampleNALUnitTypes return %d %d\n", v627, 30, v628, LODWORD(keys[0]), LODWORD(values[0]));
          sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_HEVCSyncSampleNALUnitTypes return %d %d");
      }
      goto LABEL_185;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_HEVCTemporalLevelInfoCombinations))
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(a3, 0, &kCFTypeArrayCallBacks);
      unsigned int v629 = -1;
      do
      {
        ++v629;
        memcpy(__dst, v8 + 12818, sizeof(__dst));
        v630 = sub_64670((uint64_t)__dst, v629);
        CFArrayAppendValue(Mutable, v630);
        if (v630) {
          CFRelease(v630);
        }
      }
      while (v629 < *((unsigned __int16 *)v8 + 9164));
      goto LABEL_185;
    }
    if (CFEqual(a2, @"ForceSliceRPS"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v631 = sub_D1C7C(0x1Eu);
        __uint64_t v632 = sub_DDEFC();
        uint64_t v633 = (const char *)sub_D1CB0(6);
        int v634 = *((unsigned __int8 *)v8 + 18332);
        if (v631)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ForceSliceRPS return %u\n", v632, 30, v633, v634);
          __uint64_t v635 = sub_DDEFC();
          v1012 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ForceSliceRPS return %u", v635, 30, v1012, *((unsigned __int8 *)v8 + 18332));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ForceSliceRPS return %u", v632, 30, v633, v634);
        }
      }
      if (*((unsigned char *)v8 + 18332)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, @"IntraRefreshFrames"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v636 = sub_D1C7C(0x1Eu);
        __uint64_t v637 = sub_DDEFC();
        CFNumberRef v638 = (const char *)sub_D1CB0(6);
        int v639 = *((_DWORD *)v8 + 4596);
        if (v636)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_IntraRefreshFrames return %u\n", v637, 30, v638, v639);
          __uint64_t v640 = sub_DDEFC();
          v1013 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_IntraRefreshFrames return %u", v640, 30, v1013, *((_DWORD *)v8 + 4596));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_IntraRefreshFrames return %u", v637, 30, v638, v639);
        }
      }
      uint64_t v133 = 18384;
      goto LABEL_171;
    }
    if (CFEqual(a2, @"UseHWTileOffsets"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v641 = sub_D1C7C(0x1Eu);
        __uint64_t v642 = sub_DDEFC();
        __uint64_t v643 = (const char *)sub_D1CB0(6);
        if (*((unsigned char *)v8 + 18860)) {
          v644 = "true";
        }
        else {
          v644 = "false";
        }
        if (v641)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseHWTileOffsets return %s\n", v642, 30, v643, v644);
          __uint64_t v642 = sub_DDEFC();
          __uint64_t v643 = (const char *)sub_D1CB0(6);
          if (*((unsigned char *)v8 + 18860)) {
            v644 = "true";
          }
          else {
            v644 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseHWTileOffsets return %s", v642, 30, v643, v644);
      }
      if (*((unsigned char *)v8 + 18860)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_MaxFrameDelayCount))
    {
      int v645 = *((_DWORD *)v8 + 486);
      if ((*((_DWORD *)v8 + 469) & 0xE0) != 0) {
        int v646 = 3;
      }
      else {
        int v646 = 0;
      }
      int v647 = v646 + v645;
      LODWORD(keys[0]) = v646 + v645;
      if (sub_D1C38(0x1Eu, 6))
      {
        int v648 = sub_D1C7C(0x1Eu);
        __uint64_t v649 = sub_DDEFC();
        v650 = (const char *)sub_D1CB0(6);
        if (v648)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxFrameDelayCount return %d\n", v649, 30, v650, v647);
          sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxFrameDelayCount return %d");
      }
      goto LABEL_50;
    }
    if (CFEqual(a2, @"MaximizePowerEfficiency"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v651 = sub_D1C7C(0x1Eu);
        __uint64_t v652 = sub_DDEFC();
        int v653 = (const char *)sub_D1CB0(6);
        if (*((unsigned char *)v8 + 18861)) {
          __uint64_t v654 = "true";
        }
        else {
          __uint64_t v654 = "false";
        }
        if (v651)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MaximizePowerEfficiency return %s\n", v652, 30, v653, v654);
          __uint64_t v652 = sub_DDEFC();
          int v653 = (const char *)sub_D1CB0(6);
          if (*((unsigned char *)v8 + 18861)) {
            __uint64_t v654 = "true";
          }
          else {
            __uint64_t v654 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MaximizePowerEfficiency return %s", v652, 30, v653, v654);
      }
      if (*((unsigned char *)v8 + 18861)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, @"RelaxAverageBitRateTarget"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v655 = sub_D1C7C(0x1Eu);
        __uint64_t v656 = sub_DDEFC();
        uint64_t v657 = (const char *)sub_D1CB0(6);
        if (*((unsigned char *)v8 + 18858)) {
          v658 = "true";
        }
        else {
          v658 = "false";
        }
        if (v655)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RelaxAverageBitRateTarget return %s\n", v656, 30, v657, v658);
          __uint64_t v656 = sub_DDEFC();
          uint64_t v657 = (const char *)sub_D1CB0(6);
          if (*((unsigned char *)v8 + 18858)) {
            v658 = "true";
          }
          else {
            v658 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RelaxAverageBitRateTarget return %s", v656, 30, v657, v658);
      }
      if (*((unsigned char *)v8 + 18858)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_MinimizeMemoryUsage))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v659 = sub_D1C7C(0x1Eu);
        __uint64_t v660 = sub_DDEFC();
        __uint64_t v661 = (const char *)sub_D1CB0(6);
        int v662 = *((unsigned __int8 *)v8 + 18935);
        if (v659)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MinimizeMemoryUsage return %u\n", v660, 30, v661, v662);
          __uint64_t v663 = sub_DDEFC();
          v1014 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MinimizeMemoryUsage return %u", v663, 30, v1014, *((unsigned __int8 *)v8 + 18935));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MinimizeMemoryUsage return %u", v660, 30, v661, v662);
        }
      }
      if (*((unsigned char *)v8 + 18935)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_MasteringDisplayColorVolume))
    {
      if (*((unsigned char *)v8 + 18695))
      {
        v664 = (const UInt8 *)v8 + 18697;
        CFAllocatorRef v665 = a3;
        CFIndex v666 = 24;
LABEL_883:
        StringForIntegerCodePoint = CFDataCreate(v665, v664, v666);
        goto LABEL_32;
      }
      goto LABEL_1375;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_InsertTrailingBytes))
    {
      if (*((unsigned char *)v8 + 18944))
      {
        v664 = (const UInt8 *)v8 + 18945;
        CFIndex v666 = *((unsigned int *)v8 + 4865);
        CFAllocatorRef v665 = a3;
        goto LABEL_883;
      }
LABEL_1375:
      uint64_t v28 = 0;
      *a4 = 0;
      goto LABEL_106;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_ContentLightLevelInfo))
    {
      if (*((unsigned char *)v8 + 18696))
      {
        v664 = (const UInt8 *)v8 + 18721;
        CFAllocatorRef v665 = a3;
        CFIndex v666 = 4;
        goto LABEL_883;
      }
      goto LABEL_1375;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_AmbientViewingEnvironment))
    {
      if (*((unsigned char *)v8 + 18725))
      {
        v664 = (const UInt8 *)v8 + 18726;
        CFAllocatorRef v665 = a3;
        CFIndex v666 = 17;
        goto LABEL_883;
      }
      goto LABEL_1375;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_EncodesAlpha))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v667 = sub_D1C7C(0x1Eu);
        __uint64_t v668 = sub_DDEFC();
        int v669 = (const char *)sub_D1CB0(6);
        if (*((unsigned char *)v8 + 18908)) {
          __uint64_t v670 = "true";
        }
        else {
          __uint64_t v670 = "false";
        }
        if (v667)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_EncodesAlpha return %s\n", v668, 30, v669, v670);
          __uint64_t v668 = sub_DDEFC();
          int v669 = (const char *)sub_D1CB0(6);
          if (*((unsigned char *)v8 + 18908)) {
            __uint64_t v670 = "true";
          }
          else {
            __uint64_t v670 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_EncodesAlpha return %s", v668, 30, v669, v670);
      }
      if (*((unsigned char *)v8 + 18908)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, @"RequiredHEVCVideoParameterSetRepFormatBitDepths"))
    {
      CFMutableArrayRef v671 = CFArrayCreateMutable(0, 2, &kCFTypeArrayCallBacks);
      if (v671)
      {
        CFMutableArrayRef Mutable = v671;
        uint64_t v672 = 0;
        char v673 = 1;
        while (1)
        {
          char v674 = v673;
          if (sub_D1C38(0x1Eu, 6))
          {
            int v675 = sub_D1C7C(0x1Eu);
            __uint64_t v676 = sub_DDEFC();
            v677 = (const char *)sub_D1CB0(6);
            v678 = (_DWORD *)v8 + v672 + 4728;
            if (v675)
            {
              printf("%lld %d AVE %s: asked for RequiredHEVCVideoParameterSetRepFormatBitDepths, return [%d] = %d\n", v676, 30, v677, v672, *v678);
              __uint64_t v676 = sub_DDEFC();
              v677 = (const char *)sub_D1CB0(6);
            }
            syslog(3, "%lld %d AVE %s: asked for RequiredHEVCVideoParameterSetRepFormatBitDepths, return [%d] = %d", v676, 30, v677, v672, *v678);
          }
          CFNumberRef v679 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)v8 + 4 * v672 + 18912);
          if (!v679) {
            break;
          }
          CFNumberRef v680 = v679;
          CFArrayAppendValue(Mutable, v679);
          CFRelease(v680);
          char v673 = 0;
          uint64_t v672 = 1;
          if ((v674 & 1) == 0) {
            goto LABEL_185;
          }
        }
        if (!sub_D1C38(0x1Eu, 4)) {
          goto LABEL_166;
        }
        int v896 = sub_D1C7C(0x1Eu);
        __uint64_t v897 = sub_DDEFC();
        v898 = (const char *)sub_D1CB0(4);
        if (!v896)
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | %p: asked for RequiredHEVCVideoParameterSetRepFormatBitDepths[%d]: pNum is NULL", v897, 30);
          goto LABEL_166;
        }
        printf("%lld %d AVE %s: %s:%d %s | %p: asked for RequiredHEVCVideoParameterSetRepFormatBitDepths[%d]: pNum is NULL\n", v897, 30, v898, "AVE_HEVCCopyProperty", 15015, "pNum != __null", *v8, v672);
        __uint64_t v893 = sub_DDEFC();
        v899 = sub_D1CB0(4);
        v1042 = *v8;
        uint64_t v1043 = v672;
        uint64_t v1038 = 15015;
        v1040 = "pNum != __null";
        v1036 = v899;
        v895 = "%lld %d AVE %s: %s:%d %s | %p: asked for RequiredHEVCVideoParameterSetRepFormatBitDepths[%d]: pNum is NULL";
      }
      else
      {
        if (!sub_D1C38(0x1Eu, 4)) {
          goto LABEL_166;
        }
        int v890 = sub_D1C7C(0x1Eu);
        __uint64_t v891 = sub_DDEFC();
        v892 = (const char *)sub_D1CB0(4);
        if (!v890)
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | %p: asked for RequiredHEVCVideoParameterSetRepFormatBitDepths: pArray is NULL", v891);
          goto LABEL_166;
        }
        printf("%lld %d AVE %s: %s:%d %s | %p: asked for RequiredHEVCVideoParameterSetRepFormatBitDepths: pArray is NULL\n", v891, 30, v892, "AVE_HEVCCopyProperty", 15003, "pArray != __null", *v8);
        __uint64_t v893 = sub_DDEFC();
        v894 = sub_D1CB0(4);
        v1040 = "pArray != __null";
        v1042 = *v8;
        uint64_t v1038 = 15003;
        v1036 = v894;
        v895 = "%lld %d AVE %s: %s:%d %s | %p: asked for RequiredHEVCVideoParameterSetRepFormatBitDepths: pArray is NULL";
      }
LABEL_1350:
      syslog(3, v895, v893, 30, v1036, "AVE_HEVCCopyProperty", v1038, v1040, v1042, v1043);
      goto LABEL_166;
    }
    if (CFEqual(a2, @"RequiredHEVCVideoParameterSetRepFormatChromaFormatIdcs"))
    {
      CFMutableArrayRef v681 = CFArrayCreateMutable(0, 2, &kCFTypeArrayCallBacks);
      if (v681)
      {
        CFMutableArrayRef Mutable = v681;
        uint64_t v682 = 0;
        char v683 = 1;
        while (1)
        {
          char v684 = v683;
          if (sub_D1C38(0x1Eu, 6))
          {
            int v685 = sub_D1C7C(0x1Eu);
            __uint64_t v686 = sub_DDEFC();
            v687 = (const char *)sub_D1CB0(6);
            v688 = (_DWORD *)v8 + v682 + 4730;
            if (v685)
            {
              printf("%lld %d AVE %s: asked for RequiredHEVCVideoParameterSetRepFormatChromaFormatIdcs, return [%d] = %d\n", v686, 30, v687, v682, *v688);
              __uint64_t v686 = sub_DDEFC();
              v687 = (const char *)sub_D1CB0(6);
            }
            syslog(3, "%lld %d AVE %s: asked for RequiredHEVCVideoParameterSetRepFormatChromaFormatIdcs, return [%d] = %d", v686, 30, v687, v682, *v688);
          }
          CFNumberRef v689 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)v8 + 4 * v682 + 18920);
          if (!v689) {
            break;
          }
          CFNumberRef v690 = v689;
          CFArrayAppendValue(Mutable, v689);
          CFRelease(v690);
          char v683 = 0;
          uint64_t v682 = 1;
          if ((v684 & 1) == 0) {
            goto LABEL_185;
          }
        }
        if (!sub_D1C38(0x1Eu, 4)) {
          goto LABEL_166;
        }
        int v904 = sub_D1C7C(0x1Eu);
        __uint64_t v905 = sub_DDEFC();
        v906 = (const char *)sub_D1CB0(4);
        if (!v904)
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | %p: asked for RequiredHEVCVideoParameterSetRepFormatChromaFormatIdcs[%d]: pNum is NULL", v905, 30);
          goto LABEL_166;
        }
        printf("%lld %d AVE %s: %s:%d %s | %p: asked for RequiredHEVCVideoParameterSetRepFormatChromaFormatIdcs[%d]: pNum is NULL\n", v905, 30, v906, "AVE_HEVCCopyProperty", 15045, "pNum != __null", *v8, v682);
        __uint64_t v893 = sub_DDEFC();
        v907 = sub_D1CB0(4);
        v1042 = *v8;
        uint64_t v1043 = v682;
        uint64_t v1038 = 15045;
        v1040 = "pNum != __null";
        v1036 = v907;
        v895 = "%lld %d AVE %s: %s:%d %s | %p: asked for RequiredHEVCVideoParameterSetRepFormatChromaFormatIdcs[%d]: pNum is NULL";
      }
      else
      {
        if (!sub_D1C38(0x1Eu, 4)) {
          goto LABEL_166;
        }
        int v900 = sub_D1C7C(0x1Eu);
        __uint64_t v901 = sub_DDEFC();
        v902 = (const char *)sub_D1CB0(4);
        if (!v900)
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | %p: asked for RequiredHEVCVideoParameterSetRepFormatChromaFormatIdcs: pArray is NULL", v901);
          goto LABEL_166;
        }
        printf("%lld %d AVE %s: %s:%d %s | %p: asked for RequiredHEVCVideoParameterSetRepFormatChromaFormatIdcs: pArray is NULL\n", v901, 30, v902, "AVE_HEVCCopyProperty", 15033, "pArray != __null", *v8);
        __uint64_t v893 = sub_DDEFC();
        v903 = sub_D1CB0(4);
        v1040 = "pArray != __null";
        v1042 = *v8;
        uint64_t v1038 = 15033;
        v1036 = v903;
        v895 = "%lld %d AVE %s: %s:%d %s | %p: asked for RequiredHEVCVideoParameterSetRepFormatChromaFormatIdcs: pArray is NULL";
      }
      goto LABEL_1350;
    }
    if (CFEqual(a2, @"RequiredHEVCSequenceParameterSetRepFormatIndex"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v691 = sub_D1C7C(0x1Eu);
        __uint64_t v692 = sub_DDEFC();
        v693 = (const char *)sub_D1CB0(6);
        int v694 = *((_DWORD *)v8 + 4732);
        if (v691)
        {
          printf("%lld %d AVE %s: asked for RequiredHEVCSequenceParameterSetRepFormatIndex, return %d\n", v692, 30, v693, v694);
          __uint64_t v695 = sub_DDEFC();
          v1015 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: asked for RequiredHEVCSequenceParameterSetRepFormatIndex, return %d", v695, 30, v1015, *((_DWORD *)v8 + 4732));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: asked for RequiredHEVCSequenceParameterSetRepFormatIndex, return %d", v692, 30, v693, v694);
        }
      }
      uint64_t v133 = 18928;
      goto LABEL_171;
    }
    if (CFEqual(a2, @"EnableTimingInfoMetadata"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v696 = sub_D1C7C(0x1Eu);
        __uint64_t v697 = sub_DDEFC();
        v698 = (const char *)sub_D1CB0(6);
        if (*((unsigned char *)v8 + 18932)) {
          v699 = "true";
        }
        else {
          v699 = "false";
        }
        if (v696)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableTimingInfoMetadata return %s\n", v697, 30, v698, v699);
          __uint64_t v697 = sub_DDEFC();
          v698 = (const char *)sub_D1CB0(6);
          if (*((unsigned char *)v8 + 18932)) {
            v699 = "true";
          }
          else {
            v699 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableTimingInfoMetadata return %s", v697, 30, v698, v699);
      }
      if (*((unsigned char *)v8 + 18932)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, @"EnableContentColourVolumeSEI"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v700 = sub_D1C7C(0x1Eu);
        __uint64_t v701 = sub_DDEFC();
        v702 = (const char *)sub_D1CB0(6);
        if (*((unsigned char *)v8 + 18933)) {
          v703 = "true";
        }
        else {
          v703 = "false";
        }
        if (v700)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableContentColourVolumeSEI return %s\n", v701, 30, v702, v703);
          __uint64_t v701 = sub_DDEFC();
          v702 = (const char *)sub_D1CB0(6);
          if (*((unsigned char *)v8 + 18933)) {
            v703 = "true";
          }
          else {
            v703 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableContentColourVolumeSEI return %s", v701, 30, v702, v703);
      }
      if (*((unsigned char *)v8 + 18933)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, @"DroppablePFramesOnly"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v704 = sub_D1C7C(0x1Eu);
        __uint64_t v705 = sub_DDEFC();
        v706 = (const char *)sub_D1CB0(6);
        if (*((_DWORD *)v8 + 56) == 1) {
          v707 = "true";
        }
        else {
          v707 = "false";
        }
        if (v704)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_DroppablePFramesOnly return %s\n", v705, 30, v706, v707);
          __uint64_t v705 = sub_DDEFC();
          v706 = (const char *)sub_D1CB0(6);
          if (*((_DWORD *)v8 + 56) == 1) {
            v707 = "true";
          }
          else {
            v707 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_DroppablePFramesOnly return %s", v705, 30, v706, v707);
      }
      int v859 = *((_DWORD *)v8 + 56);
LABEL_1361:
      if (v859 == 1) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_RequiredHEVCVideoParameterSetAlphaLayerID))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v708 = sub_D1C7C(0x1Eu);
        __uint64_t v709 = sub_DDEFC();
        v710 = (const char *)sub_D1CB0(6);
        int v711 = *v1049;
        if (v708)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RequiredHEVCVideoParameterSetAlphaLayerID return %d\n", v709, 30, v710, v711);
          __uint64_t v712 = sub_DDEFC();
          v1016 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RequiredHEVCVideoParameterSetAlphaLayerID return %d", v712, 30, v1016, *v1049);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RequiredHEVCVideoParameterSetAlphaLayerID return %d", v709, 30, v710, v711);
        }
      }
      uint64_t v133 = 18900;
      goto LABEL_171;
    }
    if (CFEqual(a2, @"EnableHdrPqRC"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v713 = sub_D1C7C(0x1Eu);
        __uint64_t v714 = sub_DDEFC();
        v715 = (const char *)sub_D1CB0(6);
        if (*((unsigned char *)v8 + 18350)) {
          v716 = "true";
        }
        else {
          v716 = "false";
        }
        if (v713)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableHdrPqRC return %s\n", v714, 30, v715, v716);
          __uint64_t v714 = sub_DDEFC();
          v715 = (const char *)sub_D1CB0(6);
          if (*((unsigned char *)v8 + 18350)) {
            v716 = "true";
          }
          else {
            v716 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableHdrPqRC return %s", v714, 30, v715, v716);
      }
      if (*((unsigned char *)v8 + 18350)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, @"lrmeRCPassNum"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v717 = sub_D1C7C(0x1Eu);
        __uint64_t v718 = sub_DDEFC();
        v719 = (const char *)sub_D1CB0(6);
        int v720 = *((unsigned __int8 *)v8 + 18349);
        if (v717)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_lrmeRCPassNum return %d\n", v718, 30, v719, v720);
          __uint64_t v721 = sub_DDEFC();
          v1017 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_lrmeRCPassNum return %d", v721, 30, v1017, *((unsigned __int8 *)v8 + 18349));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_lrmeRCPassNum return %d", v718, 30, v719, v720);
        }
      }
      uint64_t v133 = 18349;
      goto LABEL_171;
    }
    if (CFEqual(a2, @"EncodesDepth"))
    {
      if (*((unsigned char *)v8 + 18389)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, @"EncodesDisparity"))
    {
      if (*((unsigned char *)v8 + 18388)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, @"AdaptBPocDelay"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v722 = sub_D1C7C(0x1Eu);
        __uint64_t v723 = sub_DDEFC();
        v724 = (const char *)sub_D1CB0(6);
        int v725 = *((_DWORD *)v8 + 46292);
        if (v722)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AdaptBPocDelay return %d\n", v723, 30, v724, v725);
          __uint64_t v726 = sub_DDEFC();
          v1018 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AdaptBPocDelay return %d", v726, 30, v1018, *((_DWORD *)v8 + 46292));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AdaptBPocDelay return %d", v723, 30, v724, v725);
        }
      }
      int v33 = (void **)(v8 + 23146);
      goto LABEL_29;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_MultiPassStorage))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v727 = sub_D1C7C(0x1Eu);
        __uint64_t v728 = sub_DDEFC();
        v729 = (const char *)sub_D1CB0(6);
        v730 = v8[22948];
        if (v727)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MultiPassStorage return %p\n", v728, 30, v729, v730);
          __uint64_t v731 = sub_DDEFC();
          v1019 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MultiPassStorage return %p", v731, 30, v1019, v8[22948]);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MultiPassStorage return %p", v728, 30, v729, v730);
        }
      }
      v908 = v8[22948];
      if (v908)
      {
        StringForIntegerCodePoint = (void *)CFRetain(v908);
        goto LABEL_32;
      }
      goto LABEL_1375;
    }
    if (CFEqual(a2, @"SetMultiPassNum"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v732 = sub_D1C7C(0x1Eu);
        __uint64_t v733 = sub_DDEFC();
        v734 = (const char *)sub_D1CB0(6);
        int v735 = *((_DWORD *)v8 + 4600);
        if (v732)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SetMultiPassNum return %d\n", v733, 30, v734, v735);
          __uint64_t v736 = sub_DDEFC();
          v1020 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SetMultiPassNum return %d", v736, 30, v1020, *((_DWORD *)v8 + 4600));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SetMultiPassNum return %d", v733, 30, v734, v735);
        }
      }
      uint64_t v133 = 18400;
      goto LABEL_171;
    }
    if (CFEqual(a2, @"MultiPassConstantQP"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v737 = sub_D1C7C(0x1Eu);
        __uint64_t v738 = sub_DDEFC();
        v739 = (const char *)sub_D1CB0(6);
        int v740 = *((_DWORD *)v8 + 4601);
        if (v737)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassConstantQP return %d\n", v738, 30, v739, v740);
          __uint64_t v741 = sub_DDEFC();
          v1021 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassConstantQP return %d", v741, 30, v1021, *((_DWORD *)v8 + 4601));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassConstantQP return %d", v738, 30, v739, v740);
        }
      }
      uint64_t v133 = 18404;
      goto LABEL_171;
    }
    if (CFEqual(a2, @"MultiPassQPModLevel"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v742 = sub_D1C7C(0x1Eu);
        __uint64_t v743 = sub_DDEFC();
        v744 = (const char *)sub_D1CB0(6);
        int v745 = *((_DWORD *)v8 + 4602);
        if (v742)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassQPModLevel return %d\n", v743, 30, v744, v745);
          __uint64_t v746 = sub_DDEFC();
          v1022 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassQPModLevel return %d", v746, 30, v1022, *((_DWORD *)v8 + 4602));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassQPModLevel return %d", v743, 30, v744, v745);
        }
      }
      uint64_t v133 = 18408;
      goto LABEL_171;
    }
    if (CFEqual(a2, @"MultiPassMaxQPModLevel"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v747 = sub_D1C7C(0x1Eu);
        __uint64_t v748 = sub_DDEFC();
        v749 = (const char *)sub_D1CB0(6);
        int v750 = *((_DWORD *)v8 + 4603);
        if (v747)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassMaxQPModLevel return %d\n", v748, 30, v749, v750);
          __uint64_t v751 = sub_DDEFC();
          v1023 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassMaxQPModLevel return %d", v751, 30, v1023, *((_DWORD *)v8 + 4603));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassMaxQPModLevel return %d", v748, 30, v749, v750);
        }
      }
      uint64_t v133 = 18412;
      goto LABEL_171;
    }
    if (CFEqual(a2, @"MultiPassOptions"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v752 = sub_D1C7C(0x1Eu);
        __uint64_t v753 = sub_DDEFC();
        v754 = (const char *)sub_D1CB0(6);
        int v755 = *((_DWORD *)v8 + 4604);
        if (v752)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassOptions return %d\n", v753, 30, v754, v755);
          __uint64_t v756 = sub_DDEFC();
          v1024 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassOptions return %d", v756, 30, v1024, *((_DWORD *)v8 + 4604));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassOptions return %d", v753, 30, v754, v755);
        }
      }
      uint64_t v133 = 18416;
      goto LABEL_171;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_TemporalNoiseReduction))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v757 = sub_D1C7C(0x1Eu);
        __uint64_t v758 = sub_DDEFC();
        v759 = (const char *)sub_D1CB0(6);
        if ((*((unsigned char *)v8 + 1876) & 0xE0) != 0) {
          v760 = "true";
        }
        else {
          v760 = "false";
        }
        if (v757)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_TemporalNoiseReduction return %s\n", v758, 30, v759, v760);
          __uint64_t v758 = sub_DDEFC();
          v759 = (const char *)sub_D1CB0(6);
          if ((*((_DWORD *)v8 + 469) & 0xE0) != 0) {
            v760 = "true";
          }
          else {
            v760 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_TemporalNoiseReduction return %s", v758, 30, v759, v760);
      }
      uint64_t v28 = 0;
      BOOL v909 = (*((_DWORD *)v8 + 469) & 0xE0) == 0;
      goto LABEL_1442;
    }
    if (CFEqual(a2, @"LatencyMode"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v761 = sub_D1C7C(0x1Eu);
        __uint64_t v762 = sub_DDEFC();
        v763 = (const char *)sub_D1CB0(6);
        int v764 = *((_DWORD *)v8 + 4606);
        if (v761)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTTemporalFilterPropertyKey_LatencyMode return %d\n", v762, 30, v763, v764);
          __uint64_t v765 = sub_DDEFC();
          v1025 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTTemporalFilterPropertyKey_LatencyMode return %d", v765, 30, v1025, *((_DWORD *)v8 + 4606));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTTemporalFilterPropertyKey_LatencyMode return %d", v762, 30, v763, v764);
        }
      }
      uint64_t v133 = 18424;
      goto LABEL_171;
    }
    if (CFEqual(a2, @"MCTFStrengthLevel"))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v766 = sub_D1C7C(0x1Eu);
        __uint64_t v767 = sub_DDEFC();
        v768 = (const char *)sub_D1CB0(6);
        int v769 = *((unsigned __int8 *)v8 + 18420);
        if (v766)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTEncodeFrameOptionKey_MCTFStrengthLevel return %u\n", v767, 30, v768, v769);
          __uint64_t v770 = sub_DDEFC();
          v1026 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTEncodeFrameOptionKey_MCTFStrengthLevel return %u", v770, 30, v1026, *((unsigned __int8 *)v8 + 18420));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTEncodeFrameOptionKey_MCTFStrengthLevel return %u", v767, 30, v768, v769);
        }
      }
      uint64_t v133 = 18420;
      goto LABEL_171;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_MVHEVCVideoLayerIDs))
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0, *((unsigned int *)v8 + 4609), &kCFTypeArrayCallBacks);
      if (*((_DWORD *)v8 + 4609))
      {
        unint64_t v771 = 0;
        do
        {
          CFNumberRef v772 = CFNumberCreate(0, kCFNumberSInt8Type, (char *)v8 + v771 + 93859);
          CFArrayAppendValue(Mutable, v772);
          if (v772) {
            CFRelease(v772);
          }
          ++v771;
        }
        while (v771 < *((unsigned int *)v8 + 4609));
      }
      goto LABEL_185;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_MVHEVCViewIDs))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v773 = sub_D1C7C(0x1Eu);
        __uint64_t v774 = sub_DDEFC();
        v775 = (const char *)sub_D1CB0(6);
        if (v773)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MVHEVCViewIDs \n", v774, 30, v775);
          __uint64_t v776 = sub_DDEFC();
          v1027 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MVHEVCViewIDs ", v776, 30, v1027);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MVHEVCViewIDs ", v774, 30, v775);
        }
      }
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0, *((unsigned int *)v8 + 4609), &kCFTypeArrayCallBacks);
      if (*((_DWORD *)v8 + 4609))
      {
        unint64_t v910 = 0;
        do
        {
          CFNumberRef v911 = CFNumberCreate(0, kCFNumberSInt8Type, (char *)v8 + v910 + 93924);
          CFArrayAppendValue(Mutable, v911);
          if (v911) {
            CFRelease(v911);
          }
          ++v910;
        }
        while (v910 < *((unsigned int *)v8 + 4609));
      }
      goto LABEL_185;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_MVHEVCLeftAndRightViewIDs))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v777 = sub_D1C7C(0x1Eu);
        __uint64_t v778 = sub_DDEFC();
        v779 = (const char *)sub_D1CB0(6);
        if (v777)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MVHEVCLeftAndRightViewIDs \n", v778, 30, v779);
          __uint64_t v780 = sub_DDEFC();
          v1028 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MVHEVCLeftAndRightViewIDs ", v780, 30, v1028);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MVHEVCLeftAndRightViewIDs ", v778, 30, v779);
        }
      }
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0, *((unsigned int *)v8 + 4609), &kCFTypeArrayCallBacks);
      uint64_t v912 = 0;
      char v913 = 1;
      do
      {
        char v914 = v913;
        CFNumberRef v915 = CFNumberCreate(0, kCFNumberSInt8Type, (char *)v8 + v912 + 20208);
        CFArrayAppendValue(Mutable, v915);
        if (v915) {
          CFRelease(v915);
        }
        char v913 = 0;
        uint64_t v912 = 1;
      }
      while ((v914 & 1) != 0);
      goto LABEL_185;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_RequiredMVHEVCSequenceParameterSetIDs))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v781 = sub_D1C7C(0x1Eu);
        __uint64_t v782 = sub_DDEFC();
        v783 = (const char *)sub_D1CB0(6);
        v784 = *v8;
        if (v781)
        {
          printf("%lld %d AVE %s: %p: FIG: asked for kVTCompressionPropertyKey_RequiredMVHEVCSequenceParameterSetIDs\n", v782, 30, v783, v784);
          __uint64_t v785 = sub_DDEFC();
          v1029 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: %p: FIG: asked for kVTCompressionPropertyKey_RequiredMVHEVCSequenceParameterSetIDs", v785, 30, v1029, *v8);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %p: FIG: asked for kVTCompressionPropertyKey_RequiredMVHEVCSequenceParameterSetIDs", v782, 30, v783, v784);
        }
      }
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0, *((unsigned int *)v8 + 4609), &kCFTypeArrayCallBacks);
      unsigned int v916 = *((unsigned __int8 *)v8 + 18908);
      unsigned int v917 = *((_DWORD *)v8 + 4609);
      if (*((unsigned char *)v8 + 18908)) {
        v917 += 2;
      }
      if (v917 > 2 * v916)
      {
        unsigned int v918 = v916;
        v919 = &v8[3962 * v918 / 8 + 12886];
        unsigned int v920 = v917 - v918 * 2;
        do
        {
          CFNumberRef v921 = CFNumberCreate(0, kCFNumberSInt8Type, v919);
          CFArrayAppendValue(Mutable, v921);
          if (v921) {
            CFRelease(v921);
          }
          v919 = (const void **)((char *)v919 + 7924);
          --v920;
        }
        while (v920);
      }
      goto LABEL_185;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_RequiredMVHEVCPictureParameterSetIDs))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v786 = sub_D1C7C(0x1Eu);
        __uint64_t v787 = sub_DDEFC();
        v788 = (const char *)sub_D1CB0(6);
        v789 = *v8;
        if (v786)
        {
          printf("%lld %d AVE %s: %p: FIG: asked for kVTCompressionPropertyKey_RequiredMVHEVCPictureParameterSetIDs\n", v787, 30, v788, v789);
          __uint64_t v790 = sub_DDEFC();
          v1030 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: %p: FIG: asked for kVTCompressionPropertyKey_RequiredMVHEVCPictureParameterSetIDs", v790, 30, v1030, *v8);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %p: FIG: asked for kVTCompressionPropertyKey_RequiredMVHEVCPictureParameterSetIDs", v787, 30, v788, v789);
        }
      }
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0, *((unsigned int *)v8 + 4609), &kCFTypeArrayCallBacks);
      unsigned int v922 = *((unsigned __int8 *)v8 + 18908);
      unsigned int v923 = *((_DWORD *)v8 + 4609);
      if (*((unsigned char *)v8 + 18908)) {
        v923 += 2;
      }
      if (v923 > 2 * v922)
      {
        unsigned int v924 = v922;
        v925 = (char *)&v8[4818 * v924 / 8 + 14797] + 4;
        unsigned int v926 = v923 - v924 * 2;
        do
        {
          CFNumberRef v927 = CFNumberCreate(0, kCFNumberSInt8Type, v925);
          CFArrayAppendValue(Mutable, v927);
          if (v927) {
            CFRelease(v927);
          }
          v925 += 9636;
          --v926;
        }
        while (v926);
      }
      goto LABEL_185;
    }
    if (CFEqual(a2, kVTCompressionPropertyKey_RequiredMVHEVCVideoParameterSetAlphaVideoLayerIDs))
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v791 = sub_D1C7C(0x1Eu);
        __uint64_t v792 = sub_DDEFC();
        v793 = (const char *)sub_D1CB0(6);
        v794 = *v8;
        if (v791)
        {
          printf("%lld %d AVE %s: %p: FIG: asked for kVTCompressionPropertyKey_RequiredMVHEVCVideoParameterSetAlphaVideoLayerIDs\n", v792, 30, v793, v794);
          __uint64_t v795 = sub_DDEFC();
          v1031 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: %p: FIG: asked for kVTCompressionPropertyKey_RequiredMVHEVCVideoParameterSetAlphaVideoLayerIDs", v795, 30, v1031, *v8);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %p: FIG: asked for kVTCompressionPropertyKey_RequiredMVHEVCVideoParameterSetAlphaVideoLayerIDs", v792, 30, v793, v794);
        }
      }
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0, *((unsigned int *)v8 + 4609), &kCFTypeArrayCallBacks);
      if (*((_DWORD *)v8 + 4609))
      {
        unint64_t v928 = 0;
        v929 = (char *)v8 + 18900;
        do
        {
          CFNumberRef v930 = CFNumberCreate(0, kCFNumberSInt8Type, v929);
          CFArrayAppendValue(Mutable, v930);
          if (v930) {
            CFRelease(v930);
          }
          ++v928;
          v929 += 4;
        }
        while (v928 < *((unsigned int *)v8 + 4609));
      }
      goto LABEL_185;
    }
    if (CFEqual(a2, @"EncoderEncryptionData"))
    {
      *a4 = CFNumberCreate(a3, kCFNumberSInt64Type, v8 + 23162);
      if (sub_D1C38(0x1Eu, 6))
      {
        uint64_t v28 = sub_D1C7C(0x1Eu);
        __uint64_t v796 = sub_DDEFC();
        v797 = (const char *)sub_D1CB0(6);
        if (!v28)
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_EncoderEncryptionData return 0x%llx");
          goto LABEL_106;
        }
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_EncoderEncryptionData return 0x%llx\n", v796, 30, v797, v8[23162]);
        sub_DDEFC();
        sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_EncoderEncryptionData return 0x%llx");
      }
    }
    else
    {
      if (!CFEqual(a2, kVTCompressionPropertyKey_Quality))
      {
        if (CFEqual(a2, kVTCompressionPropertyKey_Paravirtualized))
        {
          uint64_t v28 = 0;
          if (*((int *)v8 + 46302) <= 0) {
            uint64_t v29 = &kCFBooleanFalse;
          }
          else {
            uint64_t v29 = &kCFBooleanTrue;
          }
          goto LABEL_104;
        }
        if (CFEqual(a2, @"MaxEncoderPixelRate"))
        {
          v800 = sub_DF1CC(*v9);
          if (v800)
          {
            int v801 = v800[1];
            int v802 = v800[2];
          }
          else
          {
            int v802 = 1;
            int v801 = 8;
          }
          v931 = sub_13B28(*((_DWORD *)v8 + 45892), 1, 1, v801, v802, 1);
          keys[0] = v931;
          if (sub_D1C38(0x1Eu, 6))
          {
            int v932 = sub_D1C7C(0x1Eu);
            __uint64_t v933 = sub_DDEFC();
            v934 = (const char *)sub_D1CB0(6);
            if (v932)
            {
              printf("%lld %d AVE %s: %s:%d kVTCompressionPropertyKey_MaxEncoderPixelRate %lld\n", v933, 30, v934, "AVE_HEVCCopyProperty", 15398, v931);
              sub_DDEFC();
              sub_D1CB0(6);
            }
            syslog(3, "%lld %d AVE %s: %s:%d kVTCompressionPropertyKey_MaxEncoderPixelRate %lld");
          }
          goto LABEL_264;
        }
        if (CFEqual(a2, @"NumberOfCores"))
        {
          v803 = sub_DB5D4(*((_DWORD *)v8 + 45892));
          if (sub_D1C38(0x1Eu, 6))
          {
            int v804 = sub_D1C7C(0x1Eu);
            __uint64_t v805 = sub_DDEFC();
            v806 = (const char *)sub_D1CB0(6);
            int v807 = *(_DWORD *)(*((void *)v803 + 2) + 4);
            if (v804)
            {
              printf("%lld %d AVE %s: %s:%d kVTCompressionPropertyKey_NumberOfCores %d\n", v805, 30, v806, "AVE_HEVCCopyProperty", 15408, v807);
              __uint64_t v808 = sub_DDEFC();
              v809 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: %s:%d kVTCompressionPropertyKey_NumberOfCores %d", v808, 30, v809, "AVE_HEVCCopyProperty", 15408, *(_DWORD *)(*((void *)v803 + 2) + 4));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: %s:%d kVTCompressionPropertyKey_NumberOfCores %d", v805, 30, v806, "AVE_HEVCCopyProperty", 15408, v807);
            }
          }
          int v33 = (void **)(*((void *)v803 + 2) + 4);
          goto LABEL_29;
        }
        if (CFEqual(a2, kVTCompressionPropertyKey_AverageNonDroppableFrameRate))
        {
          if (sub_D1C38(0x1Eu, 6))
          {
            int v810 = sub_D1C7C(0x1Eu);
            __uint64_t v811 = sub_DDEFC();
            v812 = (const char *)sub_D1CB0(6);
            int v813 = *((_DWORD *)v8 + 56);
            if (v810)
            {
              printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AverageNonDroppableFrameRate return %d\n", v811, 30, v812, v813);
              __uint64_t v814 = sub_DDEFC();
              v1032 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AverageNonDroppableFrameRate return %d", v814, 30, v1032, *((_DWORD *)v8 + 56));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AverageNonDroppableFrameRate return %d", v811, 30, v812, v813);
            }
          }
          int v33 = (void **)(v8 + 28);
          goto LABEL_29;
        }
        if (!CFEqual(a2, @"CalculateMeanSquaredError"))
        {
          if (sub_D1C38(0x1Eu, 4))
          {
            int v819 = sub_D1C7C(0x1Eu);
            __uint64_t v820 = sub_DDEFC();
            v821 = (const char *)sub_D1CB0(4);
            if (v819)
            {
              printf("%lld %d AVE %s: FIG: CopyProperty Property not supported\n", v820, 30, v821);
              __uint64_t v822 = sub_DDEFC();
              v1033 = (const char *)sub_D1CB0(4);
              syslog(3, "%lld %d AVE %s: FIG: CopyProperty Property not supported", v822, 30, v1033);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: CopyProperty Property not supported", v820, 30, v821);
            }
          }
          CFShow(a2);
          uint64_t v28 = 4294954396;
          goto LABEL_106;
        }
        if (sub_D1C38(0x1Eu, 6))
        {
          int v815 = sub_D1C7C(0x1Eu);
          __uint64_t v816 = sub_DDEFC();
          v817 = (const char *)sub_D1CB0(6);
          if ((*((unsigned char *)v8 + 1891) & 8) != 0) {
            v818 = "true";
          }
          else {
            v818 = "false";
          }
          if (v815)
          {
            printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_CalculateMeanSquaredError return %s\n", v816, 30, v817, v818);
            __uint64_t v816 = sub_DDEFC();
            v817 = (const char *)sub_D1CB0(6);
            if (((unint64_t)v8[236] & 0x8000000) != 0) {
              v818 = "true";
            }
            else {
              v818 = "false";
            }
          }
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_CalculateMeanSquaredError return %s", v816, 30, v817, v818);
        }
        uint64_t v28 = 0;
        BOOL v909 = ((unint64_t)v8[236] & 0x8000000) == 0;
LABEL_1442:
        if (v909) {
          uint64_t v29 = &kCFBooleanFalse;
        }
        else {
          uint64_t v29 = &kCFBooleanTrue;
        }
        goto LABEL_104;
      }
      *a4 = CFNumberCreate(a3, kCFNumberDoubleType, v1050);
      if (sub_D1C38(0x1Eu, 6))
      {
        uint64_t v28 = sub_D1C7C(0x1Eu);
        __uint64_t v798 = sub_DDEFC();
        v799 = (const char *)sub_D1CB0(6);
        if (!v28)
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Quality return %.6f");
          goto LABEL_106;
        }
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Quality return %.6f\n", v798, 30, v799, *v1050);
        sub_DDEFC();
        sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Quality return %.6f");
      }
    }
LABEL_38:
    uint64_t v28 = 0;
    goto LABEL_106;
  }
  int v291 = *((unsigned __int8 *)v8 + 18849);
  BOOL v292 = sub_D1C38(0x1Eu, 6);
  if (v291)
  {
    if (v292)
    {
      int v293 = sub_D1C7C(0x1Eu);
      __uint64_t v294 = sub_DDEFC();
      v295 = (const char *)sub_D1CB0(6);
      if (*((_DWORD *)v8 + 49) == 3) {
        v296 = "TRUE";
      }
      else {
        v296 = "FALSE";
      }
      if (v293)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_EnableQPModulation return %s\n", v294, 30, v295, v296);
        __uint64_t v294 = sub_DDEFC();
        v295 = (const char *)sub_D1CB0(6);
        if (*((_DWORD *)v8 + 49) == 3) {
          v296 = "TRUE";
        }
        else {
          v296 = "FALSE";
        }
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_EnableQPModulation return %s", v294, 30, v295, v296);
    }
    if (*((_DWORD *)v8 + 49) != 3) {
      goto LABEL_20;
    }
    goto LABEL_103;
  }
  if (!v292) {
    goto LABEL_38;
  }
  uint64_t v28 = sub_D1C7C(0x1Eu);
  __uint64_t v833 = sub_DDEFC();
  v834 = (const char *)sub_D1CB0(6);
  if (v28)
  {
    printf("%lld %d AVE %s: FIG: asked for unsupported property kVTCompressionPropertyKey_EnableQPModulation\n", v833, 30, v834);
    sub_DDEFC();
    sub_D1CB0(6);
    syslog(3, "%lld %d AVE %s: FIG: asked for unsupported property kVTCompressionPropertyKey_EnableQPModulation");
    goto LABEL_38;
  }
  syslog(3, "%lld %d AVE %s: FIG: asked for unsupported property kVTCompressionPropertyKey_EnableQPModulation");
LABEL_106:
  if (sub_D1C38(0x1Eu, 8))
  {
    int v81 = sub_D1C7C(0x1Eu);
    __uint64_t v82 = sub_DDEFC();
    int v83 = (const char *)sub_D1CB0(8);
    if (v81)
    {
      printf("%lld %d AVE %s: H3H264VideoEncoder FIG: EXIT AVE_HEVCCopyProperty err %d \n", v82, 30, v83, v28);
      __uint64_t v84 = sub_DDEFC();
      v950 = (const char *)sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: H3H264VideoEncoder FIG: EXIT AVE_HEVCCopyProperty err %d ", v84, 30, v950, v28);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H3H264VideoEncoder FIG: EXIT AVE_HEVCCopyProperty err %d ", v82, 30, v83, v28);
    }
  }
  if (v8) {
    pthread_mutex_unlock((pthread_mutex_t *)(v8 + 22931));
  }
  return v28;
}

uint64_t sub_64310(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    int v4 = DerivedStorage;
    if (sub_D1C38(0x1Eu, 8))
    {
      int v5 = sub_D1C7C(0x1Eu);
      __uint64_t v6 = sub_DDEFC();
      uint64_t v7 = (const char *)sub_D1CB0(8);
      if (v5)
      {
        printf("%lld %d AVE %s: FIG: ENTER AVE_HEVCSetProperty\n", v6, 30, v7);
        __uint64_t v8 = sub_DDEFC();
        __uint64_t v19 = (const char *)sub_D1CB0(8);
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCSetProperty", v8, 30, v19);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCSetProperty", v6, 30, v7);
      }
    }
    uint64_t v13 = sub_64AA8(v4, a2);
  }
  else
  {
    if (sub_D1C38(3u, 4))
    {
      int v9 = sub_D1C7C(3u);
      __uint64_t v10 = sub_DDEFC();
      __uint64_t v11 = (const char *)sub_D1CB0(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v10, 3, v11, "AVE_HEVCSetProperty", 13160, "encoderPrivateStorage");
        __uint64_t v12 = sub_DDEFC();
        int v20 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v12, 3, v20, "AVE_HEVCSetProperty", 13160, "encoderPrivateStorage");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v10, 3, v11, "AVE_HEVCSetProperty", 13160, "encoderPrivateStorage");
      }
    }
    uint64_t v13 = 4294954384;
  }
  if (sub_D1C38(0x1Eu, 8))
  {
    int v14 = sub_D1C7C(0x1Eu);
    __uint64_t v15 = sub_DDEFC();
    int v16 = (const char *)sub_D1CB0(8);
    if (v14)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_HEVCSetProperty err %d \n", v15, 30, v16, v13);
      __uint64_t v17 = sub_DDEFC();
      __uint64_t v21 = (const char *)sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_HEVCSetProperty err %d ", v17, 30, v21, v13);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_HEVCSetProperty err %d ", v15, 30, v16, v13);
    }
  }
  return v13;
}

int *sub_64534(int *result, int *a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 1))
  {
    int v3 = *(_DWORD *)(a3 + 4);
    switch(v3)
    {
      case 2:
        int v4 = 12;
        goto LABEL_15;
      case 3:
        int v4 = 10;
        goto LABEL_15;
      case 4:
        int v4 = 16;
        goto LABEL_15;
      case 5:
        int v6 = 40;
        goto LABEL_17;
      case 6:
        int v4 = 24;
        goto LABEL_15;
      case 7:
        goto LABEL_6;
      case 8:
        int v4 = 32;
        goto LABEL_15;
      case 9:
        int v6 = 80;
        goto LABEL_17;
      case 10:
        int v4 = 18;
        goto LABEL_15;
      case 11:
        int v4 = 15;
LABEL_15:
        *uint64_t result = v4;
        int v5 = 11;
        break;
      case 12:
        int v6 = 64;
LABEL_17:
        *uint64_t result = v6;
        int v5 = 33;
        break;
      case 13:
        *uint64_t result = 160;
        int v5 = 99;
        break;
      case 14:
        *uint64_t result = 4;
        int v5 = 3;
        break;
      case 15:
        *uint64_t result = 3;
        int v5 = 2;
        break;
      case 16:
        *uint64_t result = 2;
        int v5 = 1;
        break;
      default:
        if (v3 != 255) {
          goto LABEL_6;
        }
        *uint64_t result = *(_DWORD *)(a3 + 8);
        int v5 = *(_DWORD *)(a3 + 12);
        break;
    }
  }
  else
  {
LABEL_6:
    int v5 = 1;
    *uint64_t result = 1;
  }
  *a2 = v5;
  return result;
}

__CFDictionary *sub_64670(uint64_t a1, int a2)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    if (sub_D1C38(0x2Eu, 4))
    {
      int v12 = sub_D1C7C(0x2Eu);
      __uint64_t v13 = sub_DDEFC();
      int v14 = (const char *)sub_D1CB0(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | TemporalLevelInfoDict == NULL\n", v13, 46, v14, "CreateTemporalLevelInfoDictionary", 13240, "TemporalLevelInfoDict != __null");
        __uint64_t v15 = sub_DDEFC();
        __uint64_t v26 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | TemporalLevelInfoDict == NULL", v15, 46, v26, "CreateTemporalLevelInfoDictionary", 13240, "TemporalLevelInfoDict != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | TemporalLevelInfoDict == NULL", v13, 46, v14, "CreateTemporalLevelInfoDictionary", 13240, "TemporalLevelInfoDict != __null");
      }
    }
    return 0;
  }
  int v5 = Mutable;
  sub_C347C(kCMHEVCTemporalLevelInfoKey_TemporalLevel, a2, Mutable);
  sub_C347C(kCMHEVCTemporalLevelInfoKey_ProfileSpace, *(_DWORD *)a1, v5);
  sub_C347C(kCMHEVCTemporalLevelInfoKey_TierFlag, *(_DWORD *)(a1 + 4) != 0, v5);
  sub_C347C(kCMHEVCTemporalLevelInfoKey_ProfileIndex, *(_DWORD *)(a1 + 8), v5);
  for (uint64_t i = 43; i != 11; --i)
    int v6 = *(unsigned __int8 *)(a1 + i) | (2 * v6);
  *(_DWORD *)bytes = v6;
  CFDataRef v8 = CFDataCreate(0, bytes, 4);
  if (!v8)
  {
    if (sub_D1C38(0x2Eu, 4))
    {
      int v16 = sub_D1C7C(0x2Eu);
      __uint64_t v17 = sub_DDEFC();
      __uint64_t v18 = (const char *)sub_D1CB0(4);
      if (v16)
      {
        printf("%lld %d AVE %s: %s:%d %s | cf_profileCompatibilityFlags == NULL\n", v17, 46, v18, "CreateTemporalLevelInfoDictionary", 13256, "cf_profileCompatibilityFlags != __null");
        __uint64_t v19 = sub_DDEFC();
        int v27 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | cf_profileCompatibilityFlags == NULL", v19, 46, v27, "CreateTemporalLevelInfoDictionary", 13256, "cf_profileCompatibilityFlags != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | cf_profileCompatibilityFlags == NULL", v17, 46, v18, "CreateTemporalLevelInfoDictionary", 13256, "cf_profileCompatibilityFlags != __null");
      }
    }
    __uint64_t v24 = v5;
    goto LABEL_22;
  }
  CFDataRef v9 = v8;
  CFDictionaryAddValue(v5, kCMHEVCTemporalLevelInfoKey_ProfileCompatibilityFlags, v8);
  int v30 = 0;
  v29[0] = (*(unsigned char *)(a1 + 45) << 6) | (*(unsigned char *)(a1 + 44) << 7) | (32 * *(unsigned char *)(a1 + 46)) | (16
                                                                                                 * *(unsigned char *)(a1 + 47)) | (8 * *(unsigned char *)(a1 + 48)) | (4 * *(unsigned char *)(a1 + 49)) | (2 * *(unsigned char *)(a1 + 50)) | *(unsigned char *)(a1 + 51);
  v29[1] = (*(unsigned char *)(a1 + 53) << 6) | (*(unsigned char *)(a1 + 52) << 7) | (32 * *(unsigned char *)(a1 + 54)) | (16
                                                                                                 * *(unsigned char *)(a1 + 55)) | (8 * *(unsigned char *)(a1 + 56));
  CFDataRef v10 = CFDataCreate(0, v29, 6);
  if (!v10)
  {
    if (sub_D1C38(0x2Eu, 4))
    {
      int v20 = sub_D1C7C(0x2Eu);
      __uint64_t v21 = sub_DDEFC();
      int v22 = (const char *)sub_D1CB0(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | cf_constraintIndicatorFlags == NULL\n", v21, 46, v22, "CreateTemporalLevelInfoDictionary", 13274, "cf_constraintIndicatorFlags != __null");
        __uint64_t v23 = sub_DDEFC();
        uint64_t v28 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | cf_constraintIndicatorFlags == NULL", v23, 46, v28, "CreateTemporalLevelInfoDictionary", 13274, "cf_constraintIndicatorFlags != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | cf_constraintIndicatorFlags == NULL", v21, 46, v22, "CreateTemporalLevelInfoDictionary", 13274, "cf_constraintIndicatorFlags != __null");
      }
    }
    CFRelease(v5);
    __uint64_t v24 = v9;
LABEL_22:
    CFRelease(v24);
    return 0;
  }
  CFDataRef v11 = v10;
  CFDictionaryAddValue(v5, kCMHEVCTemporalLevelInfoKey_ConstraintIndicatorFlags, v10);
  sub_C347C(kCMHEVCTemporalLevelInfoKey_LevelIndex, *(_DWORD *)(a1 + 60), v5);
  CFRelease(v9);
  CFRelease(v11);
  return v5;
}

#error "64AA8: too big function (funcsize=0)"

uint64_t sub_80B88(uint64_t result, int a2, uint64_t a3)
{
  int v3 = result;
  int v4 = a2;
  do
  {
    if (v3 <= v4) {
      v4 %= v3;
    }
    else {
      v3 %= v4;
    }
  }
  while (v3 && v4);
  if (v3) {
    int v4 = v3;
  }
  int v5 = (int)result / v4;
  int v6 = a2 / v4;
  if (v5 == 1 && v6 == 1)
  {
    int v7 = 1;
LABEL_12:
    *(unsigned char *)(a3 + 1) = 1;
    *(_DWORD *)(a3 + 4) = v7;
    return result;
  }
  if (v6 == 33)
  {
    switch(v5)
    {
      case '(':
        int v7 = 5;
        goto LABEL_12;
      case '@':
        int v7 = 12;
        goto LABEL_12;
      case 'P':
        int v7 = 9;
        goto LABEL_12;
    }
LABEL_35:
    *(unsigned char *)(a3 + 1) = 1;
    *(_DWORD *)(a3 + 4) = 255;
LABEL_36:
    *(_DWORD *)(a3 + 8) = v5;
    *(_DWORD *)(a3 + 12) = v6;
    return result;
  }
  if (v6 == 11)
  {
    int v7 = 2;
    switch(v5)
    {
      case 10:
        int v7 = 3;
        goto LABEL_12;
      case 11:
      case 13:
      case 14:
      case 17:
      case 19:
      case 21:
      case 22:
      case 23:
        goto LABEL_35;
      case 12:
        goto LABEL_12;
      case 15:
        int v7 = 11;
        goto LABEL_12;
      case 16:
        int v7 = 4;
        goto LABEL_12;
      case 18:
        int v7 = 10;
        goto LABEL_12;
      case 20:
        int v7 = 7;
        goto LABEL_12;
      case 24:
        int v7 = 6;
        goto LABEL_12;
      default:
        if (v5 != 32) {
          goto LABEL_35;
        }
        int v7 = 8;
        break;
    }
    goto LABEL_12;
  }
  if (v5 == 160 && v6 == 99)
  {
    int v7 = 13;
    goto LABEL_12;
  }
  if (v5 == 4 && v6 == 3)
  {
    int v7 = 14;
    goto LABEL_12;
  }
  if (v5 == 3 && v6 == 2)
  {
    int v7 = 15;
    goto LABEL_12;
  }
  if (v5 == 2 && v6 == 1) {
    int v8 = 16;
  }
  else {
    int v8 = 255;
  }
  *(unsigned char *)(a3 + 1) = 1;
  *(_DWORD *)(a3 + 4) = v8;
  if (v5 != 2 || v6 != 1) {
    goto LABEL_36;
  }
  return result;
}

uint64_t sub_80D68(uint64_t a1, double a2)
{
  uint64_t v4 = a1 + 18484;
  uint64_t v5 = (int)(a2 + 0.5);
  if (sub_D1C38(0x1Eu, 6))
  {
    int v6 = sub_D1C7C(0x1Eu);
    __uint64_t v7 = sub_DDEFC();
    int v8 = (const char *)sub_D1CB0(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %f %p\n", v7, 30, v8, "AVE_HEVC_SetQuality", a2, (const void *)a1);
      __uint64_t v9 = sub_DDEFC();
      __uint64_t v21 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s Enter %f %p", v9, 30, v21, "AVE_HEVC_SetQuality", a2, (const void *)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %f %p", v7, 30, v8, "AVE_HEVC_SetQuality", a2, (const void *)a1);
    }
  }
  if (v5 > 0x63)
  {
    if (v5 == 100)
    {
      uint64_t v13 = 0;
      *(_DWORD *)(a1 + 1832) = 0;
      *(_OWORD *)(a1 + 1816) = 0u;
      *(unsigned char *)(a1 + 118487) = 1;
      *(unsigned char *)(v4 + 380) = 1;
      *(_DWORD *)uint64_t v4 = 0;
    }
    else
    {
      uint64_t v13 = 4294966295;
    }
    goto LABEL_27;
  }
  int v10 = *(_DWORD *)(a1 + 103136);
  if (!v10)
  {
    if (*(unsigned char *)(v4 + 365))
    {
      int v11 = 0;
      int v12 = a3210[v5];
      goto LABEL_17;
    }
    int v12 = a33222111000_0[v5];
LABEL_16:
    int v11 = 1;
    goto LABEL_17;
  }
  if (!*(unsigned char *)(v4 + 365))
  {
    int v12 = byte_1430F5[v5];
    goto LABEL_16;
  }
  int v11 = 0;
  int v12 = byte_143090[v5];
LABEL_17:
  *(double *)(a1 + 1816) = (double)(v12 + 6 * v10);
  *(_DWORD *)(a1 + 1824) = v12;
  *(_DWORD *)(a1 + 1828) = v12;
  *(_DWORD *)(a1 + 1832) = v12;
  *(unsigned char *)(v4 + 379) = 1;
  if (v11)
  {
    if (!*(unsigned char *)(v4 + 288))
    {
      uint64_t v13 = 0;
      *(unsigned char *)(v4 + 288) = 1;
      *(_DWORD *)(a1 + 196) = 8;
      goto LABEL_27;
    }
    if (*(_DWORD *)(a1 + 196) != 8 && sub_D1C38(0x1Eu, 5))
    {
      int v14 = sub_D1C7C(0x1Eu);
      __uint64_t v15 = sub_DDEFC();
      int v16 = (const char *)sub_D1CB0(5);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d Quality set with wrong RC mode %f %p %d\n", v15, 30, v16, "AVE_HEVC_SetQuality", 868, a2, (const void *)a1, *(_DWORD *)(a1 + 196));
        __uint64_t v15 = sub_DDEFC();
        sub_D1CB0(5);
      }
      syslog(3, "%lld %d AVE %s: %s:%d Quality set with wrong RC mode %f %p %d", v15);
    }
  }
  uint64_t v13 = 0;
LABEL_27:
  if (sub_D1C38(0x1Eu, 6))
  {
    int v17 = sub_D1C7C(0x1Eu);
    __uint64_t v18 = sub_DDEFC();
    __uint64_t v19 = (const char *)sub_D1CB0(6);
    if (v17)
    {
      printf("%lld %d AVE %s: %s Exit %f %p %d\n", v18, 30, v19, "AVE_HEVC_SetQuality", a2, (const void *)a1, v13);
      sub_DDEFC();
      sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: %s Exit %f %p %d");
  }
  return v13;
}

uint64_t sub_810F8(const void *a1, const void *a2, unint64_t a3, const void *a4)
{
  int v4 = a3;
  unint64_t v7 = HIDWORD(a3);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  __uint64_t v9 = sub_C7604();
  if (sub_D1C38(0x14u, 6))
  {
    int v10 = sub_D1C7C(0x14u);
    __uint64_t v11 = sub_DDEFC();
    int v12 = (const char *)sub_D1CB0(6);
    if (v10)
    {
      printf("%lld %d AVE %s: Enter %s %p %p %dx%d %p\n", v11, 20, v12, "AVE_HEVCStartSession", a1, a2, v4, v7, a4);
      __uint64_t v11 = sub_DDEFC();
      sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: Enter %s %p %p %dx%d %p", v11, 20);
  }
  if (DerivedStorage)
  {
    uint64_t v13 = DerivedStorage + 183440;
    int v14 = (pthread_mutex_t *)(DerivedStorage + 183448);
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
    uint64_t v15 = *(void *)(DerivedStorage + 183648);
    __uint64_t v16 = sub_DDEFC();
    sub_C086C(v15, 3u, v16);
    kdebug_trace();
    if (*(_DWORD *)(DerivedStorage + 183512)) {
      *(void *)(DerivedStorage + 183520) = sub_DDEFC();
    }
    if (a1)
    {
      if (a2)
      {
        if (v4 <= 1)
        {
          if (sub_D1C38(3u, 4))
          {
            int v30 = sub_D1C7C(3u);
            __uint64_t v31 = sub_DDEFC();
            __uint64_t v32 = (const char *)sub_D1CB0(4);
            if (v30)
            {
              printf("%lld %d AVE %s: %s:%d %s | FIG: dimensions.width (%dx%d) not supported.\n", v31, 3, v32, "AVE_HEVCStartSession", 11505, "dimensions.width >= 2", v4, v7);
              __uint64_t v31 = sub_DDEFC();
              sub_D1CB0(4);
              int v14 = (pthread_mutex_t *)(DerivedStorage + 183448);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: dimensions.width (%dx%d) not supported.", v31);
          }
        }
        else if ((int)v7 <= 1)
        {
          if (sub_D1C38(3u, 4))
          {
            int v34 = sub_D1C7C(3u);
            __uint64_t v35 = sub_DDEFC();
            __uint64_t v36 = (const char *)sub_D1CB0(4);
            if (v34)
            {
              printf("%lld %d AVE %s: %s:%d %s | FIG: dimensions.height (%dx%d) not supported.\n", v35, 3, v36, "AVE_HEVCStartSession", 11506, "dimensions.height >= 2", v4, v7);
              __uint64_t v35 = sub_DDEFC();
              sub_D1CB0(4);
              int v14 = (pthread_mutex_t *)(DerivedStorage + 183448);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: dimensions.height (%dx%d) not supported.", v35);
          }
        }
        else
        {
          *(void *)uint64_t DerivedStorage = a2;
          *(_DWORD *)(DerivedStorage + 1880) = v4;
          *(_DWORD *)(DerivedStorage + 1884) = v7;
          *(_DWORD *)(DerivedStorage + 19468) = v4;
          *(_DWORD *)(DerivedStorage + 19472) = v7;
          sub_89D24(DerivedStorage);
          if (!sub_C58EC(*(_DWORD *)(DerivedStorage + 183568), 1, *(_DWORD *)(DerivedStorage + 1880), *(_DWORD *)(DerivedStorage + 1884), 0))
          {
            *(void *)(DerivedStorage + 16) = a4;
            if (a4) {
              CFRetain(a4);
            }
            sub_8A054(DerivedStorage);
            unsigned int v37 = *(_DWORD *)(DerivedStorage + 103136) + 8;
            if (v37 <= *(_DWORD *)(DerivedStorage + 103140) + 8) {
              unsigned int v37 = *(_DWORD *)(DerivedStorage + 103140) + 8;
            }
            uint64_t v38 = sub_EF00(*(unsigned int *)(DerivedStorage + 183564), *(unsigned int *)(DerivedStorage + 183560), 30, 1, *(unsigned int *)(DerivedStorage + 19468), *(unsigned int *)(DerivedStorage + 19472), *(unsigned int *)(DerivedStorage + 1880), *(unsigned int *)(DerivedStorage + 1884), v37, 0, 0x1414C4C20, *(void *)DerivedStorage);
            if (!v38)
            {
              *(void *)uint64_t v13 = 30566;
              *(_DWORD *)(DerivedStorage + 184984) = 0;
              *(_DWORD *)(DerivedStorage + 184992) = -1;
              *(_DWORD *)(DerivedStorage + 18384) = 0;
              *(_DWORD *)(DerivedStorage + 185520) = 0;
              if (*(int *)(DerivedStorage + 228) >= 1) {
                int v55 = *(_DWORD *)(DerivedStorage + 228);
              }
              else {
                int v55 = 30;
              }
              sub_CA914(*(int **)(DerivedStorage + 183640), v55, 0, 0);
              *(_DWORD *)(DerivedStorage + 18632) = v9[196];
              sub_89F0(*(unsigned int *)(DerivedStorage + 183572), *(_DWORD *)(DerivedStorage + 18760), *(_DWORD *)(DerivedStorage + 1880), *(_DWORD *)(DerivedStorage + 1884));
            }
            uint64_t v33 = v38;
            if (!sub_D1C38(3u, 4)) {
              goto LABEL_49;
            }
            __uint64_t v59 = (pthread_mutex_t *)(DerivedStorage + 183448);
            int v39 = sub_D1C7C(3u);
            __uint64_t v40 = sub_DDEFC();
            int v41 = (const char *)sub_D1CB0(4);
            if (v39)
            {
              printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_UpdatePixelBufferDict failed.\n", v40, 3, v41, "AVE_HEVCStartSession", 11554, "err == noErr");
              __uint64_t v42 = sub_DDEFC();
              __uint64_t v57 = (const char *)sub_D1CB0(4);
              syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_UpdatePixelBufferDict failed.", v42, 3, v57, "AVE_HEVCStartSession", 11554, "err == noErr");
            }
            else
            {
              syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_UpdatePixelBufferDict failed.", v40, 3, v41, "AVE_HEVCStartSession", 11554, "err == noErr");
            }
            goto LABEL_67;
          }
          if (sub_D1C38(0x16u, 4))
          {
            __uint64_t v59 = (pthread_mutex_t *)(DerivedStorage + 183448);
            int v17 = sub_D1C7C(0x16u);
            __uint64_t v18 = sub_DDEFC();
            __uint64_t v19 = (const char *)sub_D1CB0(4);
            if (v17)
            {
              printf("%lld %d AVE %s: %s:%d %s | resolution is not out of range %d %d\n", v18, 22, v19, "AVE_HEVCStartSession", 11530, "ret == 0", *(_DWORD *)(DerivedStorage + 1880), *(_DWORD *)(DerivedStorage + 1884));
              __uint64_t v18 = sub_DDEFC();
              sub_D1CB0(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | resolution is not out of range %d %d", v18);
            uint64_t v33 = 4294954394;
LABEL_67:
            int v14 = v59;
LABEL_49:
            if (*(_DWORD *)(DerivedStorage + 183512))
            {
              *(void *)(DerivedStorage + 183528) = sub_DDEFC();
              if (sub_D1C38(0x18u, 6))
              {
                int v43 = v14;
                int v44 = sub_D1C7C(0x18u);
                __uint64_t v45 = sub_DDEFC();
                __uint64_t v46 = (const char *)sub_D1CB0(6);
                uint64_t v47 = *(void *)(v13 + 88) - *(void *)(v13 + 80);
                if (v44)
                {
                  printf("%lld %d AVE %s: FIG: %d AVE_HEVCStartSession took %lld ms\n", v45, 24, v46, *(_DWORD *)(v13 + 132), v47);
                  __uint64_t v48 = sub_DDEFC();
                  __uint64_t v49 = (const char *)sub_D1CB0(6);
                  syslog(3, "%lld %d AVE %s: FIG: %d AVE_HEVCStartSession took %lld ms", v48, 24, v49, *(_DWORD *)(v13 + 132), *(void *)(v13 + 88) - *(void *)(v13 + 80));
                }
                else
                {
                  syslog(3, "%lld %d AVE %s: FIG: %d AVE_HEVCStartSession took %lld ms", v45, 24, v46, *(_DWORD *)(v13 + 132), v47);
                }
                int v14 = v43;
              }
            }
            kdebug_trace();
            pthread_mutex_unlock(v14);
            goto LABEL_56;
          }
        }
      }
      else if (sub_D1C38(3u, 4))
      {
        int v27 = sub_D1C7C(3u);
        __uint64_t v28 = sub_DDEFC();
        uint64_t v29 = (const char *)sub_D1CB0(4);
        if (v27)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: session NULL.\n", v28, 3, v29, "AVE_HEVCStartSession", 11504, "session");
          sub_DDEFC();
          sub_D1CB0(4);
          int v14 = (pthread_mutex_t *)(DerivedStorage + 183448);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: session NULL.");
      }
    }
    else if (sub_D1C38(3u, 4))
    {
      int v24 = sub_D1C7C(3u);
      __uint64_t v25 = sub_DDEFC();
      __uint64_t v26 = (const char *)sub_D1CB0(4);
      if (v24)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: encoder NULL.\n", v25, 3, v26, "AVE_HEVCStartSession", 11503, "encoder");
        sub_DDEFC();
        sub_D1CB0(4);
        int v14 = (pthread_mutex_t *)(DerivedStorage + 183448);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: encoder NULL.");
    }
    uint64_t v33 = 4294954394;
    goto LABEL_49;
  }
  if (sub_D1C38(3u, 4))
  {
    int v20 = sub_D1C7C(3u);
    __uint64_t v21 = sub_DDEFC();
    int v22 = (const char *)sub_D1CB0(4);
    if (v20)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v21, 3, v22, "AVE_HEVCStartSession", 11488, "encoderPrivateStorage");
      __uint64_t v23 = sub_DDEFC();
      int v56 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v23, 3, v56, "AVE_HEVCStartSession", 11488, "encoderPrivateStorage");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v21, 3, v22, "AVE_HEVCStartSession", 11488, "encoderPrivateStorage");
    }
  }
  kdebug_trace();
  uint64_t v33 = 4294954384;
LABEL_56:
  if (sub_D1C38(0x14u, 6))
  {
    int v50 = sub_D1C7C(0x14u);
    __uint64_t v51 = sub_DDEFC();
    __uint64_t v52 = (const char *)sub_D1CB0(6);
    if (v50)
    {
      printf("%lld %d AVE %s: Exit %s %p %p %dx%d %p %d\n", v51, 20, v52, "AVE_HEVCStartSession", a1, a2, v4, v7, a4, v33);
      __uint64_t v53 = sub_DDEFC();
      int v58 = sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: Exit %s %p %p %dx%d %p %d", v53, 20, v58);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p %p %dx%d %p %d", v51, 20, v52);
    }
  }
  return v33;
}

uint64_t sub_81CF8(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (sub_D1C38(0x14u, 7))
  {
    int v9 = sub_D1C7C(0x14u);
    __uint64_t v10 = sub_DDEFC();
    __uint64_t v11 = (const char *)sub_D1CB0(7);
    if (v9)
    {
      printf("%lld %d AVE %s: %s Enter\n", v10, 20, v11, "AVE_HEVC_EncodeFrame");
      __uint64_t v12 = sub_DDEFC();
      int v22 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s Enter", v12, 20, v22, "AVE_HEVC_EncodeFrame");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter", v10, 20, v11, "AVE_HEVC_EncodeFrame");
    }
  }
  if (DerivedStorage)
  {
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
    kdebug_trace();
    if (a6 && CFDictionaryContainsKey(a6, @"SessionIndicator")) {
      sub_C0600(*(void *)(DerivedStorage + 183648));
    }
    if (!*(_DWORD *)(DerivedStorage + 183444))
    {
      uint64_t v13 = *(void *)(DerivedStorage + 183648);
      __uint64_t v14 = sub_DDEFC();
      sub_C086C(v13, 5u, v14);
      if (*(int *)(DerivedStorage + 228) >= 1) {
        int v15 = *(_DWORD *)(DerivedStorage + 228);
      }
      else {
        int v15 = 30;
      }
      sub_CA914(*(int **)(DerivedStorage + 183640), v15, 0, 0);
    }
    uint64_t v16 = sub_8A8E0();
  }
  else
  {
    if (sub_D1C38(0x14u, 4))
    {
      int v17 = sub_D1C7C(0x14u);
      __uint64_t v18 = sub_DDEFC();
      __uint64_t v19 = (const char *)sub_D1CB0(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to get encoder %p\n", v18, 20, v19, "AVE_HEVC_EncodeFrame", 12888, "pEnc", a1);
        __uint64_t v20 = sub_DDEFC();
        sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get encoder %p", v20);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get encoder %p", v18);
      }
    }
    uint64_t v16 = 4294954384;
  }
  kdebug_trace();
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 183448));
  return v16;
}

uint64_t sub_81FD4(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (sub_D1C38(0x14u, 7))
  {
    int v3 = sub_D1C7C(0x14u);
    __uint64_t v4 = sub_DDEFC();
    uint64_t v5 = (const char *)sub_D1CB0(7);
    if (v3)
    {
      printf("%lld %d AVE %s: Enter %s %p\n", v4, 20, v5, "AVE_HEVCCompleteFrames", a1);
      __uint64_t v6 = sub_DDEFC();
      __uint64_t v31 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: Enter %s %p", v6, 20, v31, "AVE_HEVCCompleteFrames", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Enter %s %p", v4, 20, v5, "AVE_HEVCCompleteFrames", a1);
    }
  }
  if (!DerivedStorage)
  {
    if (sub_D1C38(3u, 4))
    {
      int v20 = sub_D1C7C(3u);
      __uint64_t v21 = sub_DDEFC();
      int v22 = (const char *)sub_D1CB0(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v21, 3, v22, "AVE_HEVCCompleteFrames", 13093, "encoderPrivateStorage");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.");
    }
    goto LABEL_24;
  }
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
  uint64_t v7 = *(void *)(DerivedStorage + 183648);
  __uint64_t v8 = sub_DDEFC();
  sub_C086C(v7, 6u, v8);
  kdebug_trace();
  if (*(_DWORD *)(DerivedStorage + 183512)) {
    *(void *)(DerivedStorage + 183520) = sub_DDEFC();
  }
  __uint64_t v9 = sub_DDEFC();
  if (*(_DWORD *)(DerivedStorage + 183440) == 30568)
  {
    __uint64_t v33 = v9;
    if (sub_B490C(*(void ***)(DerivedStorage + 24), &v33))
    {
      if (sub_D1C38(3u, 4))
      {
        int v10 = sub_D1C7C(3u);
        __uint64_t v11 = sub_DDEFC();
        __uint64_t v12 = (const char *)sub_D1CB0(4);
        if (v10)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: H264VideoEncoderVA_DriverEncodeCompleteFrames failed.\n", v11, 3, v12, "AVE_HEVCCompleteFrames", 13118, "err == noErr");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: H264VideoEncoderVA_DriverEncodeCompleteFrames failed.");
      }
LABEL_24:
      uint64_t v25 = 4294954384;
      goto LABEL_25;
    }
  }
  if (*(_DWORD *)(DerivedStorage + 183512))
  {
    *(void *)(DerivedStorage + 183528) = sub_DDEFC();
    if (sub_D1C38(0x18u, 6))
    {
      int v13 = sub_D1C7C(0x18u);
      __uint64_t v14 = sub_DDEFC();
      int v15 = (const char *)sub_D1CB0(6);
      int v16 = *(_DWORD *)(DerivedStorage + 183572);
      uint64_t v17 = *(void *)(DerivedStorage + 183528) - *(void *)(DerivedStorage + 183520);
      if (v13)
      {
        printf("%lld %d AVE %s: FIG: %d (%d) Complete took %lld us\n", v14, 24, v15, v16, *(_DWORD *)(DerivedStorage + 183444) - 1, v17);
        __uint64_t v18 = sub_DDEFC();
        __uint64_t v19 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) Complete took %lld us", v18, 24, v19, *(_DWORD *)(DerivedStorage + 183572), *(_DWORD *)(DerivedStorage + 183444) - 1, *(void *)(DerivedStorage + 183528) - *(void *)(DerivedStorage + 183520));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) Complete took %lld us", v14, 24, v15, v16, *(_DWORD *)(DerivedStorage + 183444) - 1, v17);
      }
    }
  }
  uint64_t v23 = *(void *)(DerivedStorage + 183648);
  __uint64_t v24 = sub_DDEFC();
  sub_C0C44(v23, 6u, v24);
  uint64_t v25 = 0;
LABEL_25:
  kdebug_trace();
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 183448));
  if (sub_D1C38(0x14u, 7))
  {
    int v26 = sub_D1C7C(0x14u);
    __uint64_t v27 = sub_DDEFC();
    __uint64_t v28 = (const char *)sub_D1CB0(7);
    if (v26)
    {
      printf("%lld %d AVE %s: Exit %s %p %d\n", v27, 20, v28, "AVE_HEVCCompleteFrames", a1, v25);
      __uint64_t v29 = sub_DDEFC();
      __uint64_t v32 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v29, 20, v32, "AVE_HEVCCompleteFrames", a1, v25);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v27, 20, v28, "AVE_HEVCCompleteFrames", a1, v25);
    }
  }
  return v25;
}

uint64_t sub_8246C(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    __uint64_t v4 = (CFTypeRef *)(DerivedStorage + 183552);
    uint64_t v5 = (unsigned char *)(DerivedStorage + 18849);
    if (sub_D1C38(0x1Eu, 8))
    {
      int v6 = sub_D1C7C(0x1Eu);
      __uint64_t v7 = sub_DDEFC();
      __uint64_t v8 = (const char *)sub_D1CB0(8);
      if (v6)
      {
        printf("%lld %d AVE %s: FIG: ENTER AVE_HEVCCopySupportedPropertyDictionary\n", v7, 30, v8);
        __uint64_t v9 = sub_DDEFC();
        __uint64_t v36 = (const char *)sub_D1CB0(8);
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCCopySupportedPropertyDictionary", v9, 30, v36);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCCopySupportedPropertyDictionary", v7, 30, v8);
      }
    }
    if (*v5)
    {
      CFTypeRef v14 = v4[17];
      if (v14)
      {
        CFIndex v15 = CFGetRetainCount(v14);
        if (v15 != 1)
        {
          int v16 = v15;
          if (sub_D1C38(0x1Eu, 5))
          {
            int v17 = sub_D1C7C(0x1Eu);
            __uint64_t v18 = sub_DDEFC();
            __uint64_t v19 = (const char *)sub_D1CB0(5);
            if (v17)
            {
              int v20 = v16;
              printf("%lld %d AVE %s: FIG: count for supportedPropertyDictionaryHEIF = %d\n", v18, 30, v19, v16);
              __uint64_t v21 = sub_DDEFC();
              uint64_t v38 = (const char *)sub_D1CB0(5);
              syslog(3, "%lld %d AVE %s: FIG: count for supportedPropertyDictionaryHEIF = %d", v21, 30, v38, v20);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: count for supportedPropertyDictionaryHEIF = %d", v18, 30, v19, v16);
            }
          }
        }
        CFRetain(v4[17]);
        CFTypeRef v29 = v4[17];
        goto LABEL_27;
      }
    }
    else if (*v4)
    {
      CFIndex v22 = CFGetRetainCount(*v4);
      if (v22 != 1)
      {
        int v23 = v22;
        if (sub_D1C38(0x1Eu, 5))
        {
          int v24 = sub_D1C7C(0x1Eu);
          __uint64_t v25 = sub_DDEFC();
          int v26 = (const char *)sub_D1CB0(5);
          if (v24)
          {
            int v27 = v23;
            printf("%lld %d AVE %s: FIG: count for supportedPropertyDictionary = %d\n", v25, 30, v26, v23);
            __uint64_t v28 = sub_DDEFC();
            int v39 = (const char *)sub_D1CB0(5);
            syslog(3, "%lld %d AVE %s: FIG: count for supportedPropertyDictionary = %d", v28, 30, v39, v27);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: count for supportedPropertyDictionary = %d", v25, 30, v26, v23);
          }
        }
      }
      CFRetain(*v4);
      CFTypeRef v29 = *v4;
      goto LABEL_27;
    }
    CFTypeRef v29 = 0;
LABEL_27:
    uint64_t v30 = 0;
    *a2 = v29;
    goto LABEL_28;
  }
  if (sub_D1C38(3u, 4))
  {
    int v10 = sub_D1C7C(3u);
    __uint64_t v11 = sub_DDEFC();
    __uint64_t v12 = (const char *)sub_D1CB0(4);
    if (v10)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v11, 3, v12, "AVE_HEVCCopySupportedPropertyDictionary", 13181, "encoderPrivateStorage");
      __uint64_t v13 = sub_DDEFC();
      unsigned int v37 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v13, 3, v37, "AVE_HEVCCopySupportedPropertyDictionary", 13181, "encoderPrivateStorage");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v11, 3, v12, "AVE_HEVCCopySupportedPropertyDictionary", 13181, "encoderPrivateStorage");
    }
  }
  uint64_t v30 = 4294954384;
LABEL_28:
  if (sub_D1C38(0x1Eu, 8))
  {
    int v31 = sub_D1C7C(0x1Eu);
    __uint64_t v32 = sub_DDEFC();
    __uint64_t v33 = (const char *)sub_D1CB0(8);
    if (v31)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_HEVCCopySupportedPropertyDictionary err %d \n", v32, 30, v33, v30);
      __uint64_t v34 = sub_DDEFC();
      __uint64_t v40 = (const char *)sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_HEVCCopySupportedPropertyDictionary err %d ", v34, 30, v40, v30);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_HEVCCopySupportedPropertyDictionary err %d ", v32, 30, v33, v30);
    }
  }
  return v30;
}

uint64_t sub_827F0(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = DerivedStorage;
  if (DerivedStorage)
  {
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
    if (sub_D1C38(0x1Eu, 8))
    {
      int v5 = sub_D1C7C(0x1Eu);
      __uint64_t v6 = sub_DDEFC();
      __uint64_t v7 = (const char *)sub_D1CB0(8);
      if (v5)
      {
        printf("%lld %d AVE %s: FIG: ENTER %s\n", v6, 30, v7, "AVE_HEVCSetProperties");
        __uint64_t v8 = sub_DDEFC();
        int v26 = (const char *)sub_D1CB0(8);
        syslog(3, "%lld %d AVE %s: FIG: ENTER %s", v8, 30, v26, "AVE_HEVCSetProperties");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: ENTER %s", v6, 30, v7, "AVE_HEVCSetProperties");
      }
    }
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(a2))
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      v30[0] = kVTCompressionPropertyKey_MaxKeyFrameInterval;
      v30[1] = @"StrictKeyFrameInterval";
      v30[2] = kVTCompressionPropertyKey_AllowFrameReordering;
      v30[3] = kVTCompressionPropertyKey_AllowTemporalCompression;
      v30[4] = kVTCompressionPropertyKey_AverageBitRate;
      v30[5] = kVTCompressionPropertyKey_ProfileLevel;
      v30[6] = @"EnableWeightedPrediction";
      v30[7] = kVTCompressionPropertyKey_SourceFrameCount;
      v30[8] = kVTCompressionPropertyKey_ExpectedFrameRate;
      v30[9] = @"MaximumRealTimeFrameRate";
      v30[10] = kVTCompressionPropertyKey_DataRateLimits;
      v30[11] = kVTCompressionPropertyKey_ConvergenceDurationForAverageDataRate;
      v30[12] = kVTCompressionPropertyKey_FrameRateTargetForAverageBitrate;
      v30[13] = kVTCompressionPropertyKey_ColorPrimaries;
      v30[14] = kVTCompressionPropertyKey_TransferFunction;
      v30[15] = kVTCompressionPropertyKey_YCbCrMatrix;
      v30[16] = kVTCompressionPropertyKey_PixelAspectRatio;
      v30[17] = kVTCompressionPropertyKey_ExpectedDuration;
      v30[18] = kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration;
      v30[19] = @"StrictKeyFrameIntervalDuration";
      v30[20] = kVTCompressionPropertyKey_Usage;
      v30[21] = kVTCompressionPropertyKey_ThrottleForBackground;
      v30[22] = @"BPictures";
      v30[23] = @"AllowOpenGOP";
      v30[24] = @"LookAheadFrames";
      v30[25] = @"PreemptiveLoadBalancing";
      v30[26] = @"SpatialAdaptiveQPLevel";
      v30[27] = @"InitialQPI";
      v30[28] = @"InitialQPP";
      v30[29] = @"InitialQPB";
      v30[30] = kVTCompressionPropertyKey_NumberOfSlices;
      v30[31] = kVTCompressionPropertyKey_Priority;
      v30[32] = @"DeblockingFiltering";
      v30[33] = @"DebugMetadataSEI";
      v30[34] = @"DebugMetadataSEIuseEPB";
      v30[35] = kVTCompressionPropertyKey_InputQueueMaxCount;
      v30[36] = kVTCompressionPropertyKey_TemporalNoiseReduction;
      v30[37] = @"LatencyMode";
      v30[38] = @"MCTFStrengthLevel";
      v30[39] = kVTCompressionPropertyKey_AverageNonDroppableFrameRate;
      v30[40] = @"EnableUserQPForFacetime";
      v30[41] = kVTCompressionPropertyKey_UserDPBFramesForFaceTime;
      v30[42] = @"DPBRequirements";
      v30[43] = @"EnableUserRefForFacetime";
      v30[44] = kVTCompressionPropertyKey_RealTime;
      v30[45] = kVTCompressionPropertyKey_UsingHardwareAcceleratedVideoEncoder;
      v30[46] = @"EnableStatsCollect";
      v30[47] = @"EnableMultiReferenceP";
      v30[48] = @"MultiReferencePSpacing";
      v30[49] = @"log2_max_minus4";
      v30[50] = kVTCompressionPropertyKey_OutputBitDepth;
      v30[51] = kVTCompressionPropertyKey_InputPixelFormat;
      v30[52] = kVTCompressionPropertyKey_PerceptualQualityOptimization;
      v30[53] = @"CodedBuffersOverride";
      v30[54] = @"EnableMBInputCtrl";
      v30[55] = @"UserRPSForFaceTime";
      v30[56] = kVTCompressionPropertyKey_VideoResolutionAdaptation;
      v30[57] = kVTCompressionPropertyKey_VideoResolutionAdaptationType;
      v30[58] = @"ChromaQPIndexOffsetMultiPPS";
      v30[59] = @"iChatUsageString";
      v30[60] = @"UseReferenceCompressedBuffers";
      v30[61] = @"ChromaQpOffset";
      v30[62] = @"EnableHdrPqRC";
      v30[63] = @"ForceRefUncompressed";
      v30[64] = @"BaseLayerFrameRate";
      v30[65] = kVTCompressionPropertyKey_QuantizationScalingMatrixPreset;
      v30[66] = kVTCompressionProperty_SoftMinQuantizationParameter;
      v30[67] = kVTCompressionProperty_SoftMaxQuantizationParameter;
      v30[68] = kVTCompressionPropertyKey_MaxAllowedFrameQP;
      v30[69] = kVTCompressionPropertyKey_MinAllowedFrameQP;
      v30[70] = kVTCompressionPropertyKey_Quality;
      v30[71] = kVTCompressionPropertyKey_EnableQPModulation;
      v30[72] = @"EnableRCFW";
      v30[73] = @"EnableRCDriver";
      v30[74] = @"RCMode";
      v30[75] = @"SetDbgInternalParams";
      v30[76] = @"ForceSliceRPS";
      v30[77] = @"EdgeReplication";
      v30[78] = @"UseHWTileOffsets";
      v30[79] = kVTCompressionPropertyKey_MaxFrameDelayCount;
      v30[80] = @"MaximizePowerEfficiency";
      v30[81] = @"RelaxAverageBitRateTarget";
      v30[82] = @"IntraRefreshFrames";
      v30[83] = @"AllocCodedBufferHalfSize";
      v30[84] = kVTCompressionPropertyKey_MasteringDisplayColorVolume;
      v30[85] = kVTCompressionPropertyKey_ContentLightLevelInfo;
      v30[86] = kVTCompressionPropertyKey_EncodesAlpha;
      v30[87] = @"RequiredHEVCVideoParameterSetRepFormatBitDepths";
      v30[88] = @"RequiredHEVCVideoParameterSetRepFormatChromaFormatIdcs";
      v30[89] = @"RequiredHEVCSequenceParameterSetRepFormatIndex";
      v30[90] = @"EnableTimingInfoMetadata";
      v30[91] = @"EnableContentColourVolumeSEI";
      v30[92] = kVTCompressionPropertyKey_RequiredHEVCVideoParameterSetAlphaLayerID;
      v30[93] = @"DroppablePFramesOnly";
      v30[94] = kVTCompressionPropertyKey_MinimizeMemoryUsage;
      v30[95] = @"SVEMap";
      v30[96] = @"SVENum";
      v30[97] = @"SVESchedMode";
      v30[98] = @"DLBType";
      v30[99] = @"CmdTimeOutMode";
      v30[100] = @"RCFeatureOn";
      v30[101] = @"RCFeatureOff";
      v30[102] = kVTCompressionPropertyKey_InsertTrailingBytes;
      v30[103] = kVTCompressionPropertyKey_PrioritizeEncodingSpeedOverQuality;
      v30[104] = @"lrmeRCPassNum";
      v30[105] = @"EncodesDisparity";
      v30[106] = @"EncodesDepth";
      v30[107] = kVTCompressionPropertyKey_MultiPassStorage;
      v30[108] = @"EnableVUI";
      v30[109] = @"EnableVUIBitstreamRestriction";
      v30[110] = @"EnableMultiSliceStats";
      v30[111] = @"SessionName";
      v30[112] = kVTCompressionPropertyKey_MVHEVCVideoLayerIDs;
      v30[113] = kVTCompressionPropertyKey_MVHEVCViewIDs;
      void v30[114] = kVTCompressionPropertyKey_MVHEVCLeftAndRightViewIDs;
      v30[115] = kVTCompressionPropertyKey_RequiredMVHEVCPictureParameterSetIDs;
      v30[116] = kVTCompressionPropertyKey_RequiredMVHEVCSequenceParameterSetIDs;
      v30[117] = kVTCompressionPropertyKey_RequiredMVHEVCVideoParameterSetAlphaVideoLayerIDs;
      v30[118] = @"EncoderEncryptionData";
      v30[119] = kVTCompressionPropertyKey_ConstantBitRate;
      v30[120] = @"VariableBitRate";
      v30[121] = kVTCompressionPropertyKey_MoreFramesAfterEnd;
      v30[122] = kVTCompressionPropertyKey_MoreFramesBeforeStart;
      v30[123] = @"RecommendedParallelizationLimit";
      v30[124] = @"RecommendedParallelizedSubdivisionMinimumDuration";
      v30[125] = @"RecommendedParallelizedSubdivisionMinimumFrameCount";
      v30[126] = @"ReconstructedPixelBufferAttributes";
      v30[127] = @"ReconstructedPixelBuffer";
      v30[128] = @"MotionEstimationSearchMode";
      v30[129] = @"SupportedMotionSearchModes";
      v30[130] = kVTCompressionPropertyKey_Paravirtualized;
      v30[131] = @"CalculateMeanSquaredError";
      v30[132] = @"DebugFeature";
      do
      {
        int v16 = (const void *)v30[v14];
        if (CFDictionaryContainsKey(a2, v16))
        {
          CFDictionaryGetValue(a2, v16);
          uint64_t v15 = sub_64AA8(v4, v16);
        }
        ++v14;
      }
      while (v14 != 133);
    }
    else
    {
      if (sub_D1C38(3u, 4))
      {
        int v17 = sub_D1C7C(3u);
        __uint64_t v18 = sub_DDEFC();
        __uint64_t v19 = (const char *)sub_D1CB0(4);
        if (v17)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryGetTypeID failed\n", v18, 3, v19, "AVE_HEVCSetProperties", 15467, "CFDictionaryGetTypeID() == CFGetTypeID( propertyDictionary)");
          __uint64_t v20 = sub_DDEFC();
          __uint64_t v28 = (const char *)sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryGetTypeID failed", v20, 3, v28, "AVE_HEVCSetProperties", 15467, "CFDictionaryGetTypeID() == CFGetTypeID( propertyDictionary)");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryGetTypeID failed", v18, 3, v19, "AVE_HEVCSetProperties", 15467, "CFDictionaryGetTypeID() == CFGetTypeID( propertyDictionary)");
        }
      }
      uint64_t v15 = 4294954394;
    }
  }
  else
  {
    if (sub_D1C38(3u, 4))
    {
      int v9 = sub_D1C7C(3u);
      __uint64_t v10 = sub_DDEFC();
      __uint64_t v11 = (const char *)sub_D1CB0(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v10, 3, v11, "AVE_HEVCSetProperties", 15462, "encoderPrivateStorage");
        __uint64_t v12 = sub_DDEFC();
        int v27 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v12, 3, v27, "AVE_HEVCSetProperties", 15462, "encoderPrivateStorage");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v10, 3, v11, "AVE_HEVCSetProperties", 15462, "encoderPrivateStorage");
      }
    }
    uint64_t v15 = 4294954384;
  }
  if (sub_D1C38(0x1Eu, 8))
  {
    int v21 = sub_D1C7C(0x1Eu);
    __uint64_t v22 = sub_DDEFC();
    int v23 = (const char *)sub_D1CB0(8);
    if (v21)
    {
      printf("%lld %d AVE %s: FIG: EXIT %s err %d \n", v22, 30, v23, "AVE_HEVCSetProperties", v15);
      __uint64_t v24 = sub_DDEFC();
      CFTypeRef v29 = (const char *)sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: FIG: EXIT %s err %d ", v24, 30, v29, "AVE_HEVCSetProperties", v15);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT %s err %d ", v22, 30, v23, "AVE_HEVCSetProperties", v15);
    }
  }
  if (v4) {
    pthread_mutex_unlock((pthread_mutex_t *)(v4 + 183448));
  }
  return v15;
}

uint64_t sub_8324C()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = DerivedStorage;
  __uint64_t v2 = (unsigned int *)(DerivedStorage + 183440);
  if (!DerivedStorage)
  {
    if (sub_D1C38(3u, 4))
    {
      int v7 = sub_D1C7C(3u);
      __uint64_t v8 = sub_DDEFC();
      int v9 = (const char *)sub_D1CB0(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v8, 3, v9, "AVE_HEVCPrepareToEncodeFrames", 15652, "encoderPrivateStorage");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.");
    }
    goto LABEL_24;
  }
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
  if (sub_D1C38(0x14u, 7))
  {
    int v3 = sub_D1C7C(0x14u);
    __uint64_t v4 = sub_DDEFC();
    int v5 = (const char *)sub_D1CB0(7);
    if (v3)
    {
      printf("%lld %d AVE %s: AVE ENTER AVE_HEVCPrepareToEncodeFrames\n", v4, 20, v5);
      __uint64_t v6 = sub_DDEFC();
      __uint64_t v42 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: AVE ENTER AVE_HEVCPrepareToEncodeFrames", v6, 20, v42);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AVE ENTER AVE_HEVCPrepareToEncodeFrames", v4, 20, v5);
    }
  }
  uint64_t v10 = *((void *)v2 + 26);
  __uint64_t v11 = sub_DDEFC();
  sub_C086C(v10, 2u, v11);
  kdebug_trace();
  if (v2[18]) {
    *((void *)v2 + 10) = sub_DDEFC();
  }
  sub_DDEFC();
  if (*v2 != 30566)
  {
    if (sub_D1C38(3u, 4))
    {
      int v18 = sub_D1C7C(3u);
      __uint64_t v19 = sub_DDEFC();
      __uint64_t v20 = (const char *)sub_D1CB0(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_H264PrepareToEncodeFrames with encoderPrivateStorage->SessionStatus %x.\n", v19, 3, v20, "AVE_HEVCPrepareToEncodeFrames", 15717, "false", *v2);
        __uint64_t v19 = sub_DDEFC();
        __uint64_t v20 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_H264PrepareToEncodeFrames with encoderPrivateStorage->SessionStatus %x.", v19, 3, v20, "AVE_HEVCPrepareToEncodeFrames", 15717, "false", *v2);
    }
    goto LABEL_24;
  }
  uint64_t v12 = sub_9418C(v1);
  if (v12)
  {
    uint64_t v13 = v12;
    if (sub_D1C38(3u, 4))
    {
      int v14 = sub_D1C7C(3u);
      __uint64_t v15 = sub_DDEFC();
      int v16 = (const char *)sub_D1CB0(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed\n", v15, 3, v16, "AVE_HEVCPrepareToEncodeFrames", 15675, "err == noErr");
        __uint64_t v17 = sub_DDEFC();
        int v43 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed", v17, 3, v43, "AVE_HEVCPrepareToEncodeFrames", 15675, "err == noErr");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed", v15, 3, v16, "AVE_HEVCPrepareToEncodeFrames", 15675, "err == noErr");
      }
    }
    goto LABEL_25;
  }
  *(_DWORD *)(v1 + 18672) = 1;
  if (sub_D1C38(0x1Eu, 6))
  {
    int v21 = sub_D1C7C(0x1Eu);
    __uint64_t v22 = sub_DDEFC();
    int v23 = (const char *)sub_D1CB0(6);
    if (v21)
    {
      printf("%lld %d AVE %s: FIG: received PrepareToEncodeFrames\n", v22, 30, v23);
      __uint64_t v24 = sub_DDEFC();
      int v44 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: FIG: received PrepareToEncodeFrames", v24, 30, v44);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: received PrepareToEncodeFrames", v22, 30, v23);
    }
  }
  if (sub_B007C())
  {
    if (sub_D1C38(3u, 4))
    {
      int v30 = sub_D1C7C(3u);
      __uint64_t v31 = sub_DDEFC();
      __uint64_t v32 = (const char *)sub_D1CB0(4);
      if (v30)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Prepare failed.\n", v31, 3, v32, "AVE_HEVCPrepareToEncodeFrames", 15709, "err == noErr");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Prepare failed.");
    }
LABEL_24:
    uint64_t v13 = 4294954384;
    goto LABEL_25;
  }
  *__uint64_t v2 = 30567;
  if (v2[18])
  {
    *((void *)v2 + 11) = sub_DDEFC();
    if (sub_D1C38(0x18u, 6))
    {
      int v33 = sub_D1C7C(0x18u);
      __uint64_t v34 = sub_DDEFC();
      __uint64_t v35 = (const char *)sub_D1CB0(6);
      unsigned int v36 = v2[33];
      uint64_t v37 = *((void *)v2 + 11) - *((void *)v2 + 10);
      if (v33)
      {
        printf("%lld %d AVE %s: FIG: %d (%d) AVE_HEVCPrepareToEncodeFrames took %lld us\n", v34, 24, v35, v36, 0, v37);
        __uint64_t v38 = sub_DDEFC();
        int v39 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_HEVCPrepareToEncodeFrames took %lld us", v38, 24, v39, v2[33], 0, *((void *)v2 + 11) - *((void *)v2 + 10));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_HEVCPrepareToEncodeFrames took %lld us", v34, 24, v35, v36, 0, v37);
      }
    }
  }
  uint64_t v40 = *((void *)v2 + 26);
  __uint64_t v41 = sub_DDEFC();
  sub_C0C44(v40, 2u, v41);
  uint64_t v13 = 0;
LABEL_25:
  if (sub_D1C38(0x14u, 7))
  {
    int v25 = sub_D1C7C(0x14u);
    __uint64_t v26 = sub_DDEFC();
    int v27 = (const char *)sub_D1CB0(7);
    if (v25)
    {
      printf("%lld %d AVE %s: AVE EXIT AVE_HEVCPrepareToEncodeFrames err = 0x%08x\n", v26, 20, v27, v13);
      __uint64_t v28 = sub_DDEFC();
      __uint64_t v45 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: AVE EXIT AVE_HEVCPrepareToEncodeFrames err = 0x%08x", v28, 20, v45, v13);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AVE EXIT AVE_HEVCPrepareToEncodeFrames err = 0x%08x", v26, 20, v27, v13);
    }
  }
  kdebug_trace();
  pthread_mutex_unlock((pthread_mutex_t *)(v1 + 183448));
  return v13;
}

uint64_t sub_83958(const void *a1, int a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (sub_D1C38(0x14u, 6))
  {
    int v7 = sub_D1C7C(0x14u);
    __uint64_t v8 = sub_DDEFC();
    int v9 = (const char *)sub_D1CB0(6);
    if (v7)
    {
      printf("%lld %d AVE %s: Enter %s %p 0x%x %p\n", v8, 20, v9, "AVE_HEVCBeginPass", a1, a2, a3);
      __uint64_t v8 = sub_DDEFC();
      sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: Enter %s %p 0x%x %p", v8);
  }
  if (DerivedStorage)
  {
    uint64_t v10 = (_DWORD *)(DerivedStorage + 183440);
    __uint64_t v11 = (pthread_mutex_t *)(DerivedStorage + 183448);
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
    if (sub_D1C38(0xD8u, 7))
    {
      int v12 = sub_D1C7C(0xD8u);
      __uint64_t v13 = sub_DDEFC();
      int v14 = (const char *)sub_D1CB0(7);
      int v15 = *(_DWORD *)(DerivedStorage + 183596);
      if (v12)
      {
        printf("%lld %d AVE %s: AVE FIG AVE_BeginPass called. beginPassFlags = %d (begin %d end %d)\n", v13, 216, v14, a2, *(_DWORD *)(DerivedStorage + 183592), v15);
        __uint64_t v16 = sub_DDEFC();
        __uint64_t v17 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: AVE FIG AVE_BeginPass called. beginPassFlags = %d (begin %d end %d)", v16, 216, v17, a2, *(_DWORD *)(DerivedStorage + 183592), *(_DWORD *)(DerivedStorage + 183596));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AVE FIG AVE_BeginPass called. beginPassFlags = %d (begin %d end %d)", v13, 216, v14, a2, *(_DWORD *)(DerivedStorage + 183592), v15);
      }
    }
    if (!*(void *)(DerivedStorage + 183584))
    {
      if (sub_D1C38(3u, 4))
      {
        int v27 = sub_D1C7C(3u);
        __uint64_t v28 = sub_DDEFC();
        CFTypeRef v29 = (const char *)sub_D1CB0(4);
        if (v27)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_BeginPass called with multiPassStorage = NULL.\n", v28, 3, v29, "AVE_HEVCBeginPass", 11779, "encoderPrivateStorage->multiPassStorage != __null");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_BeginPass called with multiPassStorage = NULL.");
      }
      goto LABEL_44;
    }
    int v22 = *(_DWORD *)(DerivedStorage + 183592);
    if (v22 != *(_DWORD *)(DerivedStorage + 183596))
    {
      if (sub_D1C38(3u, 4))
      {
        int v30 = sub_D1C7C(3u);
        __uint64_t v31 = sub_DDEFC();
        __uint64_t v32 = (const char *)sub_D1CB0(4);
        if (v30)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_BeginPass called with multiPassBeginPassCounter = %d, multiPassEndPassCounter = %d\n", v31, 3, v32, "AVE_HEVCBeginPass", 11780, "encoderPrivateStorage->multiPassBeginPassCounter == encoderPrivateStorage->multiPassEndPassCounter", v10[38], v10[39]);
          __uint64_t v31 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_BeginPass called with multiPassBeginPassCounter = %d, multiPassEndPassCounter = %d", v31);
      }
      goto LABEL_44;
    }
    if (v22)
    {
      unsigned int v23 = v22 + 1;
      *(_DWORD *)(DerivedStorage + 183592) = v23;
      if (v23 >= 3)
      {
        if (sub_D1C38(3u, 4))
        {
          int v24 = sub_D1C7C(3u);
          __uint64_t v25 = sub_DDEFC();
          __uint64_t v26 = (const char *)sub_D1CB0(4);
          if (v24)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: encoderPrivateStorage->multiPassBeginPassCounter reached max %d\n", v25, 3, v26, "AVE_HEVCBeginPass", 11789, "false", v10[38]);
            __uint64_t v25 = sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: encoderPrivateStorage->multiPassBeginPassCounter reached max %d", v25);
        }
LABEL_44:
        uint64_t v33 = 4294954394;
LABEL_45:
        pthread_mutex_unlock(v11);
        goto LABEL_46;
      }
    }
    else
    {
      if (*v10 == 30568)
      {
        if (sub_D1C38(3u, 4))
        {
          int v34 = sub_D1C7C(3u);
          __uint64_t v35 = sub_DDEFC();
          unsigned int v36 = (const char *)sub_D1CB0(4);
          if (v34)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_BeginPass called with SessionStatus == AVE_CommonWrapper_SessionStatus_Run\n", v35, 3, v36, "AVE_HEVCBeginPass", 11783, "encoderPrivateStorage->SessionStatus != AVE_CommonWrapper_SessionStatus_Run");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_BeginPass called with SessionStatus == AVE_CommonWrapper_SessionStatus_Run");
        }
        goto LABEL_44;
      }
      unsigned int v23 = 1;
      *(_DWORD *)(DerivedStorage + 183592) = 1;
    }
    *(_DWORD *)(DerivedStorage + 18400) = v23;
    *(_DWORD *)(DerivedStorage + 183600) = a2;
    if (sub_D1C38(0xD8u, 7))
    {
      int v37 = sub_D1C7C(0xD8u);
      __uint64_t v38 = sub_DDEFC();
      int v39 = (const char *)sub_D1CB0(7);
      int v40 = v10[38];
      if (v37)
      {
        printf("%lld %d AVE %s: AVE FIG AVE_BeginPass encoderPrivateStorage->multiPassBeginPassCounter = %d\n", v38, 216, v39, v40);
        __uint64_t v41 = sub_DDEFC();
        __uint64_t v48 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: AVE FIG AVE_BeginPass encoderPrivateStorage->multiPassBeginPassCounter = %d", v41, 216, v48, v10[38]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AVE FIG AVE_BeginPass encoderPrivateStorage->multiPassBeginPassCounter = %d", v38, 216, v39, v40);
      }
    }
    uint64_t v33 = 0;
    goto LABEL_45;
  }
  if (sub_D1C38(3u, 4))
  {
    int v18 = sub_D1C7C(3u);
    __uint64_t v19 = sub_DDEFC();
    __uint64_t v20 = (const char *)sub_D1CB0(4);
    if (v18)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v19, 3, v20, "AVE_HEVCBeginPass", 11771, "encoderPrivateStorage");
      __uint64_t v21 = sub_DDEFC();
      uint64_t v47 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v21, 3, v47, "AVE_HEVCBeginPass", 11771, "encoderPrivateStorage");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v19, 3, v20, "AVE_HEVCBeginPass", 11771, "encoderPrivateStorage");
    }
  }
  uint64_t v33 = 4294954384;
LABEL_46:
  if (sub_D1C38(0x14u, 6))
  {
    int v42 = sub_D1C7C(0x14u);
    __uint64_t v43 = sub_DDEFC();
    int v44 = (const char *)sub_D1CB0(6);
    if (v42)
    {
      printf("%lld %d AVE %s: Exit %s %p 0x%x %p %d\n", v43, 20, v44, "AVE_HEVCBeginPass", a1, a2, a3, v33);
      __uint64_t v45 = sub_DDEFC();
      sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: Exit %s %p 0x%x %p %d", v45, 20);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p 0x%x %p %d", v43, 20);
    }
  }
  return v33;
}

uint64_t sub_84020(const void *a1, unsigned char *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (sub_D1C38(0x14u, 6))
  {
    int v7 = sub_D1C7C(0x14u);
    __uint64_t v8 = sub_DDEFC();
    int v9 = (const char *)sub_D1CB0(6);
    if (v7)
    {
      printf("%lld %d AVE %s: Enter %s %p %p %p\n", v8, 20, v9, "AVE_HEVCEndPass", a1, a2, a3);
      __uint64_t v8 = sub_DDEFC();
      sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: Enter %s %p %p %p", v8);
  }
  if (DerivedStorage)
  {
    uint64_t v10 = (_DWORD *)(DerivedStorage + 183440);
    __uint64_t v11 = (pthread_mutex_t *)(DerivedStorage + 183448);
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
    if (sub_D1C38(0xD8u, 7))
    {
      int v12 = sub_D1C7C(0xD8u);
      __uint64_t v13 = sub_DDEFC();
      int v14 = (const char *)sub_D1CB0(7);
      if (v12)
      {
        printf("%lld %d AVE %s: FIG: ENTER %s. beginPassFlags %d (begin %d end %d)\n", v13, 216, v14, "AVE_HEVCEndPass", *(_DWORD *)(DerivedStorage + 183600), *(_DWORD *)(DerivedStorage + 183592), *(_DWORD *)(DerivedStorage + 183596));
        __uint64_t v13 = sub_DDEFC();
        sub_D1CB0(7);
      }
      syslog(3, "%lld %d AVE %s: FIG: ENTER %s. beginPassFlags %d (begin %d end %d)", v13);
    }
    if (*v10 != 30568)
    {
      if (sub_D1C38(3u, 4))
      {
        int v29 = sub_D1C7C(3u);
        __uint64_t v30 = sub_DDEFC();
        __uint64_t v31 = (const char *)sub_D1CB0(4);
        if (v29)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_EndPass called with SessionStatus != AVE_CommonWrapper_SessionStatus_Run\n", v30, 3, v31, "AVE_HEVCEndPass", 11836, "encoderPrivateStorage->SessionStatus == AVE_CommonWrapper_SessionStatus_Run");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_EndPass called with SessionStatus != AVE_CommonWrapper_SessionStatus_Run");
      }
      goto LABEL_46;
    }
    if (!*(void *)(DerivedStorage + 183584))
    {
      if (sub_D1C38(3u, 4))
      {
        int v32 = sub_D1C7C(3u);
        __uint64_t v33 = sub_DDEFC();
        int v34 = (const char *)sub_D1CB0(4);
        if (v32)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: called with multiPassStorage = NULL.\n", v33, 3, v34, "AVE_HEVCEndPass", 11838, "encoderPrivateStorage->multiPassStorage != __null");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: called with multiPassStorage = NULL.");
      }
      goto LABEL_46;
    }
    int v19 = *(_DWORD *)(DerivedStorage + 183592);
    int v20 = *(_DWORD *)(DerivedStorage + 183596);
    if (v19 != v20 + 1)
    {
      if (sub_D1C38(3u, 4))
      {
        int v35 = sub_D1C7C(3u);
        __uint64_t v36 = sub_DDEFC();
        int v37 = (const char *)sub_D1CB0(4);
        if (v35)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: called with multiPassBeginPassCounter = %d, multiPassEndPassCounter = %d\n", v36, 3, v37, "AVE_HEVCEndPass", 11844, "encoderPrivateStorage->multiPassBeginPassCounter == (encoderPrivateStorage->multiPassEndPassCounter + 1)", v10[38], v10[39]);
          __uint64_t v36 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: called with multiPassBeginPassCounter = %d, multiPassEndPassCounter = %d", v36);
      }
      goto LABEL_46;
    }
    BOOL v22 = *(_DWORD *)(DerivedStorage + 183600) != 1 && v20 == 0;
    *(_DWORD *)(DerivedStorage + 183596) = v19;
    if (a2) {
      *a2 = v22;
    }
    if (!v22)
    {
      uint64_t v38 = 0;
LABEL_47:
      pthread_mutex_unlock(v11);
      goto LABEL_48;
    }
    if (sub_D1C38(0xD8u, 6))
    {
      int v23 = sub_D1C7C(0xD8u);
      __uint64_t v24 = sub_DDEFC();
      __uint64_t v25 = (const char *)sub_D1CB0(6);
      int v26 = *(_DWORD *)(DerivedStorage + 183444);
      if (v23)
      {
        printf("%lld %d AVE %s: FIG: %s furtherPassesRequested. Pass %d TotalFrames %d\n", v24, 216, v25, "AVE_HEVCEndPass", *(_DWORD *)(DerivedStorage + 183596), v26);
        __uint64_t v27 = sub_DDEFC();
        __uint64_t v28 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: %s furtherPassesRequested. Pass %d TotalFrames %d", v27, 216, v28, "AVE_HEVCEndPass", *(_DWORD *)(DerivedStorage + 183596), *(_DWORD *)(DerivedStorage + 183444));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: %s furtherPassesRequested. Pass %d TotalFrames %d", v24, 216, v25, "AVE_HEVCEndPass", *(_DWORD *)(DerivedStorage + 183596), v26);
      }
    }
    sub_CAE78(*(_DWORD **)(DerivedStorage + 183640));
    if (sub_B7040(*(void ***)(DerivedStorage + 24), *(_DWORD *)(DerivedStorage + 183596)))
    {
      if (sub_D1C38(3u, 4))
      {
        int v43 = sub_D1C7C(3u);
        __uint64_t v44 = sub_DDEFC();
        __uint64_t v45 = (const char *)sub_D1CB0(4);
        if (v43)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Reset failed.\n", v44, 3, v45, "AVE_HEVCEndPass", 11881, "err == noErr");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Reset failed.");
      }
LABEL_65:
      uint64_t v38 = 4294954384;
      goto LABEL_47;
    }
    if (sub_D1C38(0xD8u, 7))
    {
      *(_OWORD *)&v116.start.value = *(_OWORD *)&kCMTimeInvalid.value;
      v116.start.CMTimeEpoch epoch = kCMTimeInvalid.epoch;
      theData.start.value = 0;
      long long v128 = *(_OWORD *)&v116.start.value;
      CMTimeEpoch epoch = v116.start.epoch;
      if (VTMultiPassStorageGetTimeStamp())
      {
        if (sub_D1C38(3u, 4))
        {
          int v46 = sub_D1C7C(3u);
          __uint64_t v47 = sub_DDEFC();
          __uint64_t v48 = (const char *)sub_D1CB0(4);
          if (v46)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStamp failed.\n", v47, 3, v48, "AVE_HEVCEndPass", 11889, "err == noErr");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStamp failed.");
        }
LABEL_46:
        uint64_t v38 = 4294954394;
        goto LABEL_47;
      }
      if ((v116.start.flags & 0x1D) == 1)
      {
        if (sub_D1C38(0xD8u, 7))
        {
          int v49 = sub_D1C7C(0xD8u);
          __uint64_t v50 = sub_DDEFC();
          __uint64_t v51 = (const char *)sub_D1CB0(7);
          if (v49)
          {
            printf("%lld %d AVE %s: FIG: %s VTMultiPassStorageGetTimeStamp value %lld timescale %d flags %d\n", v50, 216, v51, "AVE_HEVCEndPass", v116.start.value, v116.start.timescale, v116.start.flags);
            __uint64_t v50 = sub_DDEFC();
            __uint64_t v51 = (const char *)sub_D1CB0(7);
          }
          syslog(3, "%lld %d AVE %s: FIG: %s VTMultiPassStorageGetTimeStamp value %lld timescale %d flags %d", v50, 216, v51, "AVE_HEVCEndPass", v116.start.value, v116.start.timescale, v116.start.flags);
        }
        long long v126 = *(_OWORD *)&v116.start.value;
        CMTimeEpoch v127 = v116.start.epoch;
        if (VTMultiPassStorageCopyDataAtTimeStamp())
        {
          if (sub_D1C38(3u, 4))
          {
            int v64 = sub_D1C7C(3u);
            __uint64_t v65 = sub_DDEFC();
            int v66 = (const char *)sub_D1CB0(4);
            if (v64)
            {
              printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp failed.\n", v65, 3, v66, "AVE_HEVCEndPass", 11902, "err == noErr");
              sub_DDEFC();
              sub_D1CB0(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp failed.");
          }
        }
        else if (sub_D1C38(3u, 4))
        {
          int v67 = sub_D1C7C(3u);
          __uint64_t v68 = sub_DDEFC();
          int v69 = (const char *)sub_D1CB0(4);
          if (v67)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp data == NULL.\n", v68, 3, v69, "AVE_HEVCEndPass", 11903, "data != __null");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp data == NULL.");
        }
        goto LABEL_46;
      }
    }
    if (*(void *)DerivedStorage != 1)
    {
      CMTime v125 = kCMTimeInvalid;
      CMTime v124 = v125;
      CMTime v123 = v125;
      CFAllocatorRef v52 = kCFAllocatorDefault;
      CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      if (!Mutable)
      {
        if (sub_D1C38(3u, 4))
        {
          int v58 = sub_D1C7C(3u);
          __uint64_t v59 = sub_DDEFC();
          int v60 = (const char *)sub_D1CB0(4);
          if (v58)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: CFArrayCreateMutable failed.\n", v59, 3, v60, "AVE_HEVCEndPass", 11935, "timeRangeArray != __null");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFArrayCreateMutable failed.");
        }
        goto LABEL_65;
      }
      __uint64_t v54 = Mutable;
      long long v121 = *(_OWORD *)&kCMTimeInvalid.value;
      CMTimeEpoch v122 = kCMTimeInvalid.epoch;
      if (VTMultiPassStorageGetTimeStamp())
      {
        if (sub_D1C38(3u, 4))
        {
          int v55 = sub_D1C7C(3u);
          __uint64_t v56 = sub_DDEFC();
          __uint64_t v57 = (const char *)sub_D1CB0(4);
          if (v55)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStamp kVTMultiPassStorageStep_GetFirstTimeStamp failed.\n", v56, 3, v57, "AVE_HEVCEndPass", 11938, "err == noErr");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStamp kVTMultiPassStorageStep_GetFirstTimeStamp failed.");
        }
        goto LABEL_46;
      }
      if (sub_D1C38(0xD8u, 7))
      {
        int v61 = sub_D1C7C(0xD8u);
        __uint64_t v62 = sub_DDEFC();
        int v63 = (const char *)sub_D1CB0(7);
        if (v61)
        {
          printf("%lld %d AVE %s: %s firstTimeInTimeRange value %lld timescale %d flags %d\n", v62, 216, v63, "AVE_HEVCEndPass", v125.value, v125.timescale, v125.flags);
          __uint64_t v62 = sub_DDEFC();
          sub_D1CB0(7);
        }
        syslog(3, "%lld %d AVE %s: %s firstTimeInTimeRange value %lld timescale %d flags %d", v62);
        CFAllocatorRef v52 = kCFAllocatorDefault;
      }
      long long v119 = *(_OWORD *)&kCMTimeInvalid.value;
      CMTimeEpoch v120 = kCMTimeInvalid.epoch;
      if (VTMultiPassStorageGetTimeStampAndDuration())
      {
        if (sub_D1C38(3u, 4))
        {
          int v70 = sub_D1C7C(3u);
          __uint64_t v71 = sub_DDEFC();
          __uint64_t v72 = (const char *)sub_D1CB0(4);
          if (v70)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStampAndDuration kVTMultiPassStorageStep_GetLastTimeStamp failed.\n", v71, 3, v72, "AVE_HEVCEndPass", 11954, "err == noErr");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStampAndDuration kVTMultiPassStorageStep_GetLastTimeStamp failed.");
        }
        goto LABEL_46;
      }
      if (sub_D1C38(0xD8u, 7))
      {
        int v73 = sub_D1C7C(0xD8u);
        __uint64_t v74 = sub_DDEFC();
        int v75 = (const char *)sub_D1CB0(7);
        if (v73)
        {
          printf("%lld %d AVE %s: %s lastTimeInTimeRange value %lld timescale %d flags %d\n", v74, 216, v75, "AVE_HEVCEndPass", v124.value, v124.timescale, v124.flags);
          __uint64_t v74 = sub_DDEFC();
          sub_D1CB0(7);
        }
        syslog(3, "%lld %d AVE %s: %s lastTimeInTimeRange value %lld timescale %d flags %d", v74);
        CFAllocatorRef v52 = kCFAllocatorDefault;
      }
      if (sub_D1C38(0xD8u, 7))
      {
        int v76 = sub_D1C7C(0xD8u);
        __uint64_t v77 = sub_DDEFC();
        int v78 = (const char *)sub_D1CB0(7);
        if (v76)
        {
          printf("%lld %d AVE %s: %s duration value %lld timescale %d flags %d\n", v77, 216, v78, "AVE_HEVCEndPass", v123.value, v123.timescale, v123.flags);
          __uint64_t v77 = sub_DDEFC();
          sub_D1CB0(7);
        }
        syslog(3, "%lld %d AVE %s: %s duration value %lld timescale %d flags %d", v77);
        CFAllocatorRef v52 = kCFAllocatorDefault;
      }
      CMTime lhs = v124;
      CMTime rhs = v123;
      CMTimeAdd(&v116.start, &lhs, &rhs);
      CMTime v124 = v116.start;
      if (sub_D1C38(0xD8u, 7))
      {
        int v79 = sub_D1C7C(0xD8u);
        __uint64_t v80 = sub_DDEFC();
        int v81 = (const char *)sub_D1CB0(7);
        if (v79)
        {
          printf("%lld %d AVE %s: %s modified lastTimeInTimeRange value %lld timescale %d flags %d\n", v80, 216, v81, "AVE_HEVCEndPass", v124.value, v124.timescale, v124.flags);
          __uint64_t v80 = sub_DDEFC();
          sub_D1CB0(7);
        }
        syslog(3, "%lld %d AVE %s: %s modified lastTimeInTimeRange value %lld timescale %d flags %d", v80);
        CFAllocatorRef v52 = kCFAllocatorDefault;
      }
      if (*(_DWORD *)(DerivedStorage + 183444) <= 1u && !v124.flags)
      {
        int v82 = *(_DWORD *)(DerivedStorage + 228);
        if (v82 < 1) {
          int v82 = 30;
        }
        *(void *)&v124.timescale = *(void *)&v125.timescale;
        v124.CMTimeEpoch epoch = v125.epoch;
        v124.value = v125.value + v125.timescale / v82;
      }
      if (!v125.flags)
      {
        if (sub_D1C38(3u, 4))
        {
          int v86 = sub_D1C7C(3u);
          __uint64_t v87 = sub_DDEFC();
          int v88 = (const char *)sub_D1CB0(4);
          if (v86)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: firstTimeInTimeRange invalid.\n", v87, 3, v88, "AVE_HEVCEndPass", 11982, "firstTimeInTimeRange.flags != 0");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: firstTimeInTimeRange invalid.");
        }
        goto LABEL_46;
      }
      if (!v124.flags)
      {
        if (sub_D1C38(3u, 4))
        {
          int v89 = sub_D1C7C(3u);
          __uint64_t v90 = sub_DDEFC();
          int v91 = (const char *)sub_D1CB0(4);
          if (v89)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: lastTimeInTimeRange invalid.\n", v90, 3, v91, "AVE_HEVCEndPass", 11984, "lastTimeInTimeRange.flags != 0");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: lastTimeInTimeRange invalid.");
        }
        goto LABEL_46;
      }
      memset(&v116, 0, sizeof(v116));
      CMTime start = v125;
      CMTime end = v124;
      CMTimeRangeFromTimeToTime(&v116, &start, &end);
      if (sub_D1C38(0xD8u, 6))
      {
        int v83 = sub_D1C7C(0xD8u);
        __uint64_t v84 = sub_DDEFC();
        int v85 = (const char *)sub_D1CB0(6);
        if (v83)
        {
          printf("%lld %d AVE %s: Start %lld, %d, %d; Duration %lld, %d, %d\n",
            v84,
            216,
            v85,
            v116.start.value,
            v116.start.timescale,
            v116.start.flags,
            v116.duration.value,
            v116.duration.timescale,
            v116.duration.flags);
          __uint64_t v84 = sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: Start %lld, %d, %d; Duration %lld, %d, %d", v84, 216);
        CFAllocatorRef v52 = kCFAllocatorDefault;
      }
      CMTimeRange range = v116;
      CFDictionaryRef v92 = CMTimeRangeCopyAsDictionary(&range, v52);
      if (!v92)
      {
        if (sub_D1C38(3u, 4))
        {
          int v104 = sub_D1C7C(3u);
          __uint64_t v105 = sub_DDEFC();
          __uint64_t v106 = (const char *)sub_D1CB0(4);
          if (v104)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: CMTimeRangeCopyAsDictionary failed.\n", v105, 3, v106, "AVE_HEVCEndPass", 11993, "currentTimeRangeDictionary != __null");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CMTimeRangeCopyAsDictionary failed.");
        }
        goto LABEL_65;
      }
      CFDictionaryRef v93 = v92;
      CFArrayAppendValue(v54, v92);
      CFRelease(v93);
      CFIndex Count = CFArrayGetCount(v54);
      __uint64_t v111 = malloc_type_malloc(48 * Count, 0x1000040EED21634uLL);
      if (!v111)
      {
        if (sub_D1C38(3u, 4))
        {
          int v107 = sub_D1C7C(3u);
          __uint64_t v108 = sub_DDEFC();
          __uint64_t v109 = (const char *)sub_D1CB0(4);
          if (v107)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: malloc timeRanges failed.\n", v108, 3, v109, "AVE_HEVCEndPass", 12005, "timeRanges != __null");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: malloc timeRanges failed.");
        }
        goto LABEL_65;
      }
      if (Count >= 1)
      {
        CFIndex v95 = 0;
        int v96 = v111;
        do
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v54, v95);
          CMTimeRangeMakeFromDictionary(&theData, ValueAtIndex);
          long long v98 = *(_OWORD *)&theData.start.value;
          long long v99 = *(_OWORD *)&theData.duration.timescale;
          v96[1] = *(_OWORD *)&theData.start.epoch;
          v96[2] = v99;
          *int v96 = v98;
          v96 += 3;
          ++v95;
        }
        while (Count != v95);
      }
      int Pass = VTEncoderSessionSetTimeRangesForNextPass();
      free(v111);
      CFRelease(v54);
      if (Pass)
      {
        if (sub_D1C38(3u, 4))
        {
          int v101 = sub_D1C7C(3u);
          __uint64_t v102 = sub_DDEFC();
          int v103 = (const char *)sub_D1CB0(4);
          if (v101)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: VTEncoderSessionSetTimeRangesForNextPass failed.\n", v102, 3, v103, "AVE_HEVCEndPass", 12027, "err == noErr");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTEncoderSessionSetTimeRangesForNextPass failed.");
        }
        goto LABEL_46;
      }
    }
    uint64_t v38 = 0;
    v10[47] = v10[1];
    v10[1] = 0;
    goto LABEL_47;
  }
  if (sub_D1C38(3u, 4))
  {
    int v15 = sub_D1C7C(3u);
    __uint64_t v16 = sub_DDEFC();
    __uint64_t v17 = (const char *)sub_D1CB0(4);
    if (v15)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v16, 3, v17, "AVE_HEVCEndPass", 11825, "encoderPrivateStorage");
      __uint64_t v18 = sub_DDEFC();
      int v110 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v18, 3, v110, "AVE_HEVCEndPass", 11825, "encoderPrivateStorage");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v16, 3, v17, "AVE_HEVCEndPass", 11825, "encoderPrivateStorage");
    }
  }
  uint64_t v38 = 4294954384;
LABEL_48:
  if (sub_D1C38(0x14u, 6))
  {
    int v39 = sub_D1C7C(0x14u);
    __uint64_t v40 = sub_DDEFC();
    __uint64_t v41 = (const char *)sub_D1CB0(6);
    if (v39)
    {
      printf("%lld %d AVE %s: Exit %s %p %p %p %d\n", v40, 20, v41, "AVE_HEVCEndPass", a1, a2, a3, v38);
      __uint64_t v40 = sub_DDEFC();
      sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: Exit %s %p %p %p %d", v40, 20);
  }
  return v38;
}

uint64_t sub_85A50(const void *a1, char *a2, const void *a3, unint64_t a4, const void *a5)
{
  int v6 = a4;
  unint64_t v8 = HIDWORD(a4);
  CFTypeRef v100 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = DerivedStorage + 183440;
  long long v101 = 0u;
  long long v102 = 0u;
  uint64_t v94 = DerivedStorage;
  uint64_t v96 = DerivedStorage + 183440;
  if (sub_D1C38(0x14u, 6))
  {
    int v11 = sub_D1C7C(0x14u);
    __uint64_t v12 = sub_DDEFC();
    __uint64_t v13 = (const char *)sub_D1CB0(6);
    if (v11)
    {
      printf("%lld %d AVE %s: Enter %s %p %p %p %dx%d %p\n", v12, 20, v13, "AVE_HEVCStartTileSession", a1, a2, a3, v6, v8, a5);
      __uint64_t v14 = sub_DDEFC();
      int v85 = sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: Enter %s %p %p %p %dx%d %p", v14, 20, v85);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Enter %s %p %p %p %dx%d %p", v12, 20, v13);
    }
    uint64_t v10 = DerivedStorage + 183440;
  }
  if (!DerivedStorage)
  {
    if (sub_D1C38(3u, 4))
    {
      int v25 = sub_D1C7C(3u);
      __uint64_t v26 = sub_DDEFC();
      __uint64_t v27 = (const char *)sub_D1CB0(4);
      if (v25)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v26, 3, v27, "AVE_HEVCStartTileSession", 16133, "encoderPrivateStorage");
        __uint64_t v28 = sub_DDEFC();
        __uint64_t v87 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v28, 3, v87, "AVE_HEVCStartTileSession", 16133, "encoderPrivateStorage");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v26, 3, v27, "AVE_HEVCStartTileSession", 16133, "encoderPrivateStorage");
      }
    }
    CFMutableArrayRef Mutable = 0;
    uint64_t v39 = 4294954384;
    goto LABEL_47;
  }
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
  uint64_t v15 = *(void *)(v10 + 208);
  __uint64_t v16 = sub_DDEFC();
  sub_C086C(v15, 3u, v16);
  kdebug_trace();
  if (*(_DWORD *)(v10 + 72)) {
    *(void *)(v10 + 80) = sub_DDEFC();
  }
  if (!a1)
  {
    if (sub_D1C38(3u, 4))
    {
      int v29 = sub_D1C7C(3u);
      __uint64_t v30 = sub_DDEFC();
      __uint64_t v31 = (const char *)sub_D1CB0(4);
      if (v29)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: encoder NULL.\n", v30, 3, v31, "AVE_HEVCStartTileSession", 16148, "encoder");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: encoder NULL.");
    }
    goto LABEL_46;
  }
  if (!a2)
  {
    if (sub_D1C38(3u, 4))
    {
      int v32 = sub_D1C7C(3u);
      __uint64_t v33 = sub_DDEFC();
      int v34 = (const char *)sub_D1CB0(4);
      if (v32)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: session NULL.\n", v33, 3, v34, "AVE_HEVCStartTileSession", 16149, "session");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: session NULL.");
    }
    goto LABEL_46;
  }
  if (v6 <= 1)
  {
    if (sub_D1C38(3u, 4))
    {
      int v35 = sub_D1C7C(3u);
      __uint64_t v36 = sub_DDEFC();
      int v37 = (const char *)sub_D1CB0(4);
      if (v35)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: dimensions.width (%dx%d) not supported.\n", v36, 3, v37, "AVE_HEVCStartTileSession", 16150, "tileDimensions.width >= 2", v6, v8);
        __uint64_t v36 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: dimensions.width (%dx%d) not supported.", v36);
    }
    goto LABEL_46;
  }
  if ((int)v8 <= 1)
  {
    if (sub_D1C38(3u, 4))
    {
      int v40 = sub_D1C7C(3u);
      __uint64_t v41 = sub_DDEFC();
      int v42 = (const char *)sub_D1CB0(4);
      if (v40)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: dimensions.height (%dx%d) not supported.\n", v41, 3, v42, "AVE_HEVCStartTileSession", 16151, "tileDimensions.height >= 2", v6, v8);
        __uint64_t v41 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: dimensions.height (%dx%d) not supported.", v41);
    }
LABEL_46:
    CFMutableArrayRef Mutable = 0;
    uint64_t v39 = 4294954394;
    goto LABEL_47;
  }
  *(void *)(DerivedStorage + 8) = a2;
  uint64_t v17 = DerivedStorage + 137925;
  uint64_t v93 = DerivedStorage + 118414;
  *(_DWORD *)(DerivedStorage + 1880) = v6;
  *(_DWORD *)(DerivedStorage + 1884) = v8;
  uint64_t v18 = DerivedStorage + 18808;
  uint64_t v19 = DerivedStorage;
  uint64_t v20 = DerivedStorage + 17884;
  *(_DWORD *)(v18 + 660) = v6;
  *(_DWORD *)(v18 + 664) = v8;
  sub_89D24(v19);
  *(void *)(v19 + 16) = a5;
  if (a5) {
    CFRetain(a5);
  }
  sub_8A054(v94);
  if (sub_D1C38(0x14u, 7))
  {
    int v21 = sub_D1C7C(0x14u);
    __uint64_t v22 = sub_DDEFC();
    int v23 = (const char *)sub_D1CB0(7);
    if (v21)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_SetEncoderTileDefault\n", v22, 20, v23);
      __uint64_t v24 = sub_DDEFC();
      int v86 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetEncoderTileDefault", v24, 20, v86);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetEncoderTileDefault", v22, 20, v23);
    }
    uint64_t v10 = v96;
  }
  *(unsigned char *)(v18 + 41) = 1;
  *(unsigned char *)(v20 + 800) = 1;
  *(unsigned char *)(v18 + 52) = *(_DWORD *)(v10 + 124) > 2;
  *(_WORD *)uint64_t v17 = 257;
  *(_DWORD *)(v93 + 6) = 2;
  *(_DWORD *)(v93 + 38) = 2;
  *(_DWORD *)uint64_t v18 = 1;
  *(_DWORD *)(v94 + 1920) = 0;
  *(_DWORD *)(v94 + 1944) = 0;
  int v43 = *(_DWORD *)(v94 + 2024);
  *(_DWORD *)uint64_t v20 = 2;
  *(_DWORD *)(v20 + 52) = 7;
  *(_DWORD *)(v94 + 196) = 3;
  *(void *)(v94 + 1816) = 0x402E000000000000;
  *(void *)(v94 + 1824) = 0xF0000000FLL;
  *(_DWORD *)(v94 + 1832) = 15;
  *(_DWORD *)(v94 + 228) = 0;
  *(_DWORD *)(v94 + 2012) = -1;
  *(unsigned char *)(v94 + 244) = 1;
  *(_WORD *)(v94 + 252) = 256;
  *(unsigned char *)(v94 + 216) = 0;
  *(unsigned char *)(v94 + 251) = 1;
  *(_WORD *)(v94 + 255) = 0;
  *(unsigned char *)(v94 + 257) = 0;
  *(_DWORD *)(v94 + 246) = 1;
  *(void *)(v94 + 18784) = 0x400000000;
  *(_DWORD *)(v94 + 260) = 0;
  *(_DWORD *)(v94 + 1768) = 0;
  *(void *)(v20 + 801) = 0;
  *(_OWORD *)(v94 + 18694) = 0u;
  *(_OWORD *)(v94 + 18710) = 0u;
  *(_OWORD *)(v94 + 18726) = 0u;
  *(unsigned char *)(v94 + 18742) = 0;
  *(unsigned char *)(v17 + 669) = 1;
  *(unsigned char *)uint64_t v93 = 1;
  *(_WORD *)(v20 + 452) = 0;
  *(_DWORD *)(v94 + 2024) = v43 & 0xFFFFFFFA;
  *(void *)(v20 + 912) = 0x100000000;
  if (sub_D1C38(0x14u, 7))
  {
    int v44 = sub_D1C7C(0x14u);
    __uint64_t v45 = sub_DDEFC();
    int v46 = (const char *)sub_D1CB0(7);
    if (v44)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_SetEncoderTileDefault\n", v45, 20, v46);
      __uint64_t v47 = sub_DDEFC();
      int v88 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_SetEncoderTileDefault", v47, 20, v88);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_SetEncoderTileDefault", v45, 20, v46);
    }
    uint64_t v10 = v96;
  }
  uint64_t v60 = sub_BFB8();
  if (v60)
  {
    uint64_t v39 = v60;
    if (sub_D1C38(3u, 4))
    {
      int v61 = sub_D1C7C(3u);
      __uint64_t v62 = sub_DDEFC();
      int v63 = (const char *)sub_D1CB0(4);
      if (v61)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: %s:%d failed.\n", v62, 3, v63, "AVE_HEVCStartTileSession", 16193, "err == noErr", "AVE_HEVCStartTileSession", 16193);
        __uint64_t v62 = sub_DDEFC();
        __uint64_t v90 = sub_D1CB0(4);
      }
      else
      {
        __uint64_t v90 = (void *)v63;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: %s:%d failed.", v62, 3, v90, "AVE_HEVCStartTileSession", 16193, "err == noErr", "AVE_HEVCStartTileSession", 16193);
    }
LABEL_78:
    CFMutableArrayRef Mutable = 0;
LABEL_79:
    uint64_t DerivedStorage = v94;
    goto LABEL_47;
  }
  uint64_t DerivedStorage = v94;
  if (a2 == (unsigned char *)&def_D6434 + 1)
  {
    if (sub_D1C38(0x14u, 7))
    {
      int v68 = sub_D1C7C(0x14u);
      __uint64_t v69 = sub_DDEFC();
      int v70 = (const char *)sub_D1CB0(7);
      if (v68)
      {
        printf("%lld %d AVE %s: FIG: session = FIGINTERNALSESSIONMARK\n", v69, 20, v70);
        __uint64_t v71 = sub_DDEFC();
        int v91 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: FIG: session = FIGINTERNALSESSIONMARK", v71, 20, v91);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: session = FIGINTERNALSESSIONMARK", v69, 20, v70);
      }
    }
    goto LABEL_98;
  }
  uint64_t v64 = VTTileEncoderSessionSetTileAttributes();
  if (!v64)
  {
    if (*(int *)(v10 + 124) >= 3)
    {
      int valuePtr = 2;
      int v98 = 2;
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (!Mutable)
      {
        if (sub_D1C38(3u, 4))
        {
          int v81 = sub_D1C7C(3u);
          __uint64_t v82 = sub_DDEFC();
          int v83 = (const char *)sub_D1CB0(4);
          if (v81)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryCreateMutable failed.\n", v82, 3, v83, "AVE_HEVCStartTileSession", 16220, "TileRequirements");
            __uint64_t v84 = sub_DDEFC();
            CFDictionaryRef v92 = (const char *)sub_D1CB0(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryCreateMutable failed.", v84, 3, v92, "AVE_HEVCStartTileSession", 16220, "TileRequirements");
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryCreateMutable failed.", v82, 3, v83, "AVE_HEVCStartTileSession", 16220, "TileRequirements");
          }
          uint64_t v39 = 4294954392;
          goto LABEL_79;
        }
        uint64_t v39 = 4294954392;
        goto LABEL_47;
      }
      CFNumberRef v72 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      CFDictionaryAddValue(Mutable, kVTTileEncoderRequirement_HorizontalOffsetAlignment, v72);
      if (v72) {
        CFRelease(v72);
      }
      CFNumberRef v73 = CFNumberCreate(0, kCFNumberSInt32Type, &v98);
      CFDictionaryAddValue(Mutable, kVTTileEncoderRequirement_VerticalOffsetAlignment, v73);
      if (v73) {
        CFRelease(v73);
      }
      if (*(int *)(v96 + 124) >= 11) {
        CFDictionaryAddValue(Mutable, kVTTileEncoderRequirement_EncoderSupportsSourcePadding, kCFBooleanTrue);
      }
      uint64_t v74 = VTTileEncoderSessionSetTileEncodeRequirements();
      if (v74)
      {
        uint64_t v39 = v74;
        if (sub_D1C38(3u, 4))
        {
          int v75 = sub_D1C7C(3u);
          __uint64_t v76 = sub_DDEFC();
          __uint64_t v77 = (const char *)sub_D1CB0(4);
          if (v75)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: %s:%d failed.\n", v76, 3, v77, "AVE_HEVCStartTileSession", 16246, "err == noErr", "AVE_HEVCStartTileSession", 16246);
            __uint64_t v78 = sub_DDEFC();
            sub_D1CB0(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: %s:%d failed.", v78, 3);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: %s:%d failed.", v76, 3);
          }
          goto LABEL_79;
        }
        goto LABEL_47;
      }
LABEL_99:
      *(void *)uint64_t v96 = 30566;
      uint64_t v79 = *(void *)(v96 + 208);
      __uint64_t v80 = sub_DDEFC();
      sub_C0C44(v79, 3u, v80);
      uint64_t v39 = 0;
      goto LABEL_47;
    }
LABEL_98:
    CFMutableArrayRef Mutable = 0;
    goto LABEL_99;
  }
  uint64_t v39 = v64;
  if (sub_D1C38(3u, 4))
  {
    int v65 = sub_D1C7C(3u);
    __uint64_t v66 = sub_DDEFC();
    int v67 = (const char *)sub_D1CB0(4);
    if (v65)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: VTTileEncoderSessionSetTileAttributes failed.\n", v66, 3, v67, "AVE_HEVCStartTileSession", 16210, "err == noErr");
      sub_DDEFC();
      sub_D1CB0(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTTileEncoderSessionSetTileAttributes failed.");
    goto LABEL_78;
  }
  CFMutableArrayRef Mutable = 0;
LABEL_47:
  if (v100)
  {
    CFRelease(v100);
    CFTypeRef v100 = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (DerivedStorage)
  {
    if (*(_DWORD *)(v96 + 72))
    {
      *(void *)(v96 + 88) = sub_DDEFC();
      if (sub_D1C38(0x18u, 6))
      {
        int v48 = sub_D1C7C(0x18u);
        __uint64_t v49 = sub_DDEFC();
        __uint64_t v50 = (const char *)sub_D1CB0(6);
        uint64_t v51 = *(void *)(v96 + 88) - *(void *)(v96 + 80);
        if (v48)
        {
          printf("%lld %d AVE %s: FIG: %d AVE_HEVCStartTileSession took %lld us\n", v49, 24, v50, *(_DWORD *)(v96 + 132), v51);
          __uint64_t v52 = sub_DDEFC();
          __uint64_t v53 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: %d AVE_HEVCStartTileSession took %lld us", v52, 24, v53, *(_DWORD *)(v96 + 132), *(void *)(v96 + 88) - *(void *)(v96 + 80));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: %d AVE_HEVCStartTileSession took %lld us", v49, 24, v50, *(_DWORD *)(v96 + 132), v51);
        }
        uint64_t DerivedStorage = v94;
      }
    }
    kdebug_trace();
    pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 183448));
  }
  else
  {
    kdebug_trace();
  }
  if (sub_D1C38(0x14u, 6))
  {
    int v54 = v8;
    int v55 = sub_D1C7C(0x14u);
    __uint64_t v56 = sub_DDEFC();
    __uint64_t v57 = (const char *)sub_D1CB0(6);
    if (v55)
    {
      printf("%lld %d AVE %s: Exit %s %p %p %p %dx%d %p %d\n", v56, 20, v57, "AVE_HEVCStartTileSession", a1, a2, a3, v6, v54, a5, v39);
      __uint64_t v58 = sub_DDEFC();
      int v89 = sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: Exit %s %p %p %p %dx%d %p %d", v58, 20, v89, "AVE_HEVCStartTileSession");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p %p %p %dx%d %p %d", v56, 20, v57, "AVE_HEVCStartTileSession");
    }
  }
  return v39;
}

uint64_t sub_869B0(const void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v5 = (unsigned int *)(DerivedStorage + 183440);
  if (sub_D1C38(0x14u, 6))
  {
    int v6 = sub_D1C7C(0x14u);
    __uint64_t v7 = sub_DDEFC();
    unint64_t v8 = (const char *)sub_D1CB0(6);
    if (v6)
    {
      printf("%lld %d AVE %s: Enter %s %p %d\n", v7, 20, v8, "AVE_HEVCPrepareToEncodeTiles", a1, a2);
      __uint64_t v9 = sub_DDEFC();
      __uint64_t v57 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: Enter %s %p %d", v9, 20, v57, "AVE_HEVCPrepareToEncodeTiles", a1, a2);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Enter %s %p %d", v7, 20, v8, "AVE_HEVCPrepareToEncodeTiles", a1, a2);
    }
  }
  if (!DerivedStorage)
  {
    if (sub_D1C38(3u, 4))
    {
      int v14 = sub_D1C7C(3u);
      __uint64_t v15 = sub_DDEFC();
      __uint64_t v16 = (const char *)sub_D1CB0(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v15, 3, v16, "AVE_HEVCPrepareToEncodeTiles", 16304, "encoderPrivateStorage");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.");
    }
    goto LABEL_34;
  }
  if (a2)
  {
    if (sub_D1C38(3u, 4))
    {
      int v10 = sub_D1C7C(3u);
      __uint64_t v11 = sub_DDEFC();
      __uint64_t v12 = (const char *)sub_D1CB0(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: expectPartialTiles = true. Not supported yet -> Fail\n", v11, 3, v12, "AVE_HEVCPrepareToEncodeTiles", 16306, "expectPartialTiles == false");
        __uint64_t v13 = sub_DDEFC();
        __uint64_t v58 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: expectPartialTiles = true. Not supported yet -> Fail", v13, 3, v58, "AVE_HEVCPrepareToEncodeTiles", 16306, "expectPartialTiles == false");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: expectPartialTiles = true. Not supported yet -> Fail", v11, 3, v12, "AVE_HEVCPrepareToEncodeTiles", 16306, "expectPartialTiles == false");
      }
    }
LABEL_17:
    uint64_t v21 = 0;
    goto LABEL_35;
  }
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
  if (sub_D1C38(0x14u, 7))
  {
    int v17 = sub_D1C7C(0x14u);
    __uint64_t v18 = sub_DDEFC();
    uint64_t v19 = (const char *)sub_D1CB0(7);
    if (v17)
    {
      printf("%lld %d AVE %s: AVE ENTER AVE_HEVCPrepareToEncodeTiles\n", v18, 20, v19);
      __uint64_t v20 = sub_DDEFC();
      __uint64_t v59 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: AVE ENTER AVE_HEVCPrepareToEncodeTiles", v20, 20, v59);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AVE ENTER AVE_HEVCPrepareToEncodeTiles", v18, 20, v19);
    }
  }
  uint64_t v22 = *(void *)(DerivedStorage + 183648);
  __uint64_t v23 = sub_DDEFC();
  sub_C086C(v22, 2u, v23);
  kdebug_trace();
  if (*(_DWORD *)(DerivedStorage + 183512)) {
    *(void *)(DerivedStorage + 183520) = sub_DDEFC();
  }
  sub_DDEFC();
  if (*v5 != 30566)
  {
    if (sub_D1C38(3u, 4))
    {
      int v29 = sub_D1C7C(3u);
      __uint64_t v30 = sub_DDEFC();
      __uint64_t v31 = (const char *)sub_D1CB0(4);
      if (v29)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_H264PrepareToEncodeFrames with encoderPrivateStorage->SessionStatus %x.\n", v30, 3, v31, "AVE_HEVCPrepareToEncodeTiles", 16371, "false", *v5);
        __uint64_t v30 = sub_DDEFC();
        __uint64_t v31 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_H264PrepareToEncodeFrames with encoderPrivateStorage->SessionStatus %x.", v30, 3, v31, "AVE_HEVCPrepareToEncodeTiles", 16371, "false", *v5);
    }
LABEL_34:
    uint64_t v21 = 4294954384;
    goto LABEL_35;
  }
  uint64_t v24 = sub_9418C(DerivedStorage);
  if (!v24)
  {
    *(_DWORD *)(DerivedStorage + 18672) = 1;
    if (sub_D1C38(0x1Eu, 6))
    {
      int v32 = sub_D1C7C(0x1Eu);
      __uint64_t v33 = sub_DDEFC();
      int v34 = (const char *)sub_D1CB0(6);
      if (v32)
      {
        printf("%lld %d AVE %s: FIG: received PrepareToEncodeFrames\n", v33, 30, v34);
        __uint64_t v35 = sub_DDEFC();
        int v61 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: received PrepareToEncodeFrames", v35, 30, v61);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: received PrepareToEncodeFrames", v33, 30, v34);
      }
    }
    if (!sub_B007C())
    {
      *int v5 = 30567;
      if (*(_DWORD *)(DerivedStorage + 183512))
      {
        *(void *)(DerivedStorage + 183528) = sub_DDEFC();
        if (sub_D1C38(0x18u, 6))
        {
          int v48 = sub_D1C7C(0x18u);
          __uint64_t v49 = sub_DDEFC();
          __uint64_t v50 = (const char *)sub_D1CB0(6);
          int v51 = *(_DWORD *)(DerivedStorage + 183572);
          uint64_t v52 = *(void *)(DerivedStorage + 183528) - *(void *)(DerivedStorage + 183520);
          if (v48)
          {
            printf("%lld %d AVE %s: FIG: %d (%d) AVE_HEVCPrepareToEncodeTiles took %lld us\n", v49, 24, v50, v51, 0, v52);
            __uint64_t v53 = sub_DDEFC();
            int v54 = (const char *)sub_D1CB0(6);
            syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_HEVCPrepareToEncodeTiles took %lld us", v53, 24, v54, *(_DWORD *)(DerivedStorage + 183572), 0, *(void *)(DerivedStorage + 183528) - *(void *)(DerivedStorage + 183520));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_HEVCPrepareToEncodeTiles took %lld us", v49, 24, v50, v51, 0, v52);
          }
        }
      }
      uint64_t v55 = *(void *)(DerivedStorage + 183648);
      __uint64_t v56 = sub_DDEFC();
      sub_C0C44(v55, 2u, v56);
      goto LABEL_17;
    }
    if (sub_D1C38(3u, 4))
    {
      int v45 = sub_D1C7C(3u);
      __uint64_t v46 = sub_DDEFC();
      __uint64_t v47 = (const char *)sub_D1CB0(4);
      if (v45)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Prepare failed.\n", v46, 3, v47, "AVE_HEVCPrepareToEncodeTiles", 16363, "err == noErr");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Prepare failed.");
    }
    goto LABEL_34;
  }
  uint64_t v21 = v24;
  if (sub_D1C38(3u, 4))
  {
    int v25 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (v25)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed\n", v26, 3, v27, "AVE_HEVCPrepareToEncodeTiles", 16329, "err == noErr");
      __uint64_t v28 = sub_DDEFC();
      uint64_t v60 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed", v28, 3, v60, "AVE_HEVCPrepareToEncodeTiles", 16329, "err == noErr");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed", v26, 3, v27, "AVE_HEVCPrepareToEncodeTiles", 16329, "err == noErr");
    }
  }
LABEL_35:
  if (sub_D1C38(0x14u, 7))
  {
    int v36 = sub_D1C7C(0x14u);
    __uint64_t v37 = sub_DDEFC();
    uint64_t v38 = (const char *)sub_D1CB0(7);
    if (v36)
    {
      printf("%lld %d AVE %s: AVE EXIT AVE_HEVCPrepareToEncodeTiles err = 0x%08x\n", v37, 20, v38, v21);
      __uint64_t v39 = sub_DDEFC();
      __uint64_t v62 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: AVE EXIT AVE_HEVCPrepareToEncodeTiles err = 0x%08x", v39, 20, v62, v21);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AVE EXIT AVE_HEVCPrepareToEncodeTiles err = 0x%08x", v37, 20, v38, v21);
    }
  }
  kdebug_trace();
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 183448));
  if (sub_D1C38(0x14u, 6))
  {
    int v40 = sub_D1C7C(0x14u);
    __uint64_t v41 = sub_DDEFC();
    int v42 = (const char *)sub_D1CB0(6);
    if (v40)
    {
      printf("%lld %d AVE %s: Exit %s %p %d %d\n", v41, 20, v42, "AVE_HEVCPrepareToEncodeTiles", a1, a2, v21);
      __uint64_t v43 = sub_DDEFC();
      sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: Exit %s %p %d %d", v43);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p %d %d", v41);
    }
  }
  return v21;
}

uint64_t sub_872DC()
{
  __chkstk_darwin();
  uint64_t v1 = v0;
  CFDictionaryRef v3 = v2;
  unint64_t v152 = v4;
  unint64_t v6 = v5;
  uint64_t v8 = v7;
  CVPixelBufferRef texture = v9;
  char v169 = 0;
  int v168 = 0;
  int v167 = 0;
  int v10 = (char *)sub_C7604();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v12 = DerivedStorage;
  __uint64_t v13 = (unsigned int *)(DerivedStorage + 183440);
  if (!DerivedStorage)
  {
    if (sub_D1C38(3u, 4))
    {
      int v18 = sub_D1C7C(3u);
      __uint64_t v19 = sub_DDEFC();
      __uint64_t v20 = (const char *)sub_D1CB0(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v19, 3, v20, "AVE_HEVCEncodeTile", 16423, "encoderPrivateStorage");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.");
    }
    goto LABEL_37;
  }
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
  if (sub_D1C38(0x14u, 7))
  {
    int v14 = sub_D1C7C(0x14u);
    __uint64_t v15 = sub_DDEFC();
    __uint64_t v16 = (const char *)sub_D1CB0(7);
    if (v14)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_HEVCEncodeTile\n", v15, 20, v16);
      __uint64_t v17 = sub_DDEFC();
      int v139 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCEncodeTile", v17, 20, v139);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCEncodeTile", v15, 20, v16);
    }
  }
  kdebug_trace();
  if (v3 && CFDictionaryContainsKey(v3, @"SessionIndicator")) {
    sub_C0600(*((void *)v13 + 26));
  }
  if (!v13[1])
  {
    uint64_t v21 = *((void *)v13 + 26);
    __uint64_t v22 = sub_DDEFC();
    sub_C086C(v21, 5u, v22);
  }
  if (v13[18]) {
    *((void *)v13 + 10) = sub_DDEFC();
  }
  if (!texture)
  {
    if (sub_D1C38(3u, 4))
    {
      int v33 = sub_D1C7C(3u);
      __uint64_t v34 = sub_DDEFC();
      __uint64_t v35 = (const char *)sub_D1CB0(4);
      if (v33)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: imageBuffer = NULL.\n", v34, 3, v35, "AVE_HEVCEncodeTile", 16449, "imageBuffer");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: imageBuffer = NULL.");
      goto LABEL_84;
    }
    goto LABEL_78;
  }
  int v151 = v1;
  __uint64_t v23 = sub_DDEFC();
  if (*(int *)(v12 + 228) >= 1) {
    int v24 = *(_DWORD *)(v12 + 228);
  }
  else {
    int v24 = 30;
  }
  sub_DDCA0(v24, v12 + 185008);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(texture);
  v13[518] = PixelFormatType;
  if (!v13[1])
  {
    uint64_t v171 = *(void *)(v12 + 1880);
    __uint64_t v26 = sub_D7E18(PixelFormatType);
    if (!v26)
    {
      if (sub_D1C38(3u, 4))
      {
        int v46 = sub_D1C7C(3u);
        __uint64_t v47 = sub_DDEFC();
        int v48 = (const char *)sub_D1CB0(4);
        if (v46)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to find pixel format %p %d 0x%x\n", v47, 3, v48, "AVE_HEVCEncodeTile", 16467, "pPixelFmt != __null", (const void *)v12, v13[33], v13[518]);
          __uint64_t v47 = sub_DDEFC();
          int v48 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to find pixel format %p %d 0x%x", v47, 3, v48, "AVE_HEVCEncodeTile", 16467, "pPixelFmt != __null", v12, v13[33], v13[518]);
      }
      goto LABEL_84;
    }
    if (v10[792]) {
      __uint64_t v27 = v10 + 792;
    }
    else {
      __uint64_t v27 = 0;
    }
    sub_49A0(*((void *)v13 + 27), v27, v13[30], *(_DWORD *)(v12 + 18760), *((_DWORD *)v10 + 196), *((_DWORD *)v10 + 197), &v171, 1, *((_DWORD *)v26 + 3), *((_DWORD *)v26 + 1), *(_DWORD *)(v12 + 192));
    sub_5058(*((_DWORD **)v13 + 27), -1, texture);
  }
  unsigned int v28 = *v13;
  if (*v13 == 30566)
  {
    if (sub_D17D4(texture)) {
      int v37 = 1;
    }
    else {
      int v37 = 2;
    }
    *(_DWORD *)(v12 + 18804) = v37;
    if (sub_9418C(v12))
    {
      if (sub_D1C38(3u, 4))
      {
        int v38 = sub_D1C7C(3u);
        __uint64_t v39 = sub_DDEFC();
        int v40 = (const char *)sub_D1CB0(4);
        if (v38)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed\n", v39, 3, v40, "AVE_HEVCEncodeTile", 16604, "err == noErr");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed");
        goto LABEL_84;
      }
      goto LABEL_78;
    }
    sub_8CF94(v12, texture);
    if (sub_8CABC(v12, &texture, &v169, &v168, &v167, 1))
    {
      if (sub_D1C38(3u, 4))
      {
        int v49 = sub_D1C7C(3u);
        __uint64_t v30 = sub_DDEFC();
        __uint64_t v31 = (const char *)sub_D1CB0(4);
        if (v49)
        {
          int v32 = 16614;
          goto LABEL_63;
        }
LABEL_83:
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_HEVC_VerifyImageBuffer failed.");
        goto LABEL_84;
      }
LABEL_78:
      uint64_t v36 = 4294954394;
      goto LABEL_85;
    }
    sub_8D1F8(v12, *(_DWORD *)(v12 + 18804) == 2);
    if (sub_8D33C((const void **)v12))
    {
      if (!sub_D1C38(3u, 4)) {
        goto LABEL_78;
      }
      int v54 = sub_D1C7C(3u);
      __uint64_t v51 = sub_DDEFC();
      uint64_t v52 = (const char *)sub_D1CB0(4);
      if (v54)
      {
        int v53 = 16624;
        goto LABEL_77;
      }
LABEL_98:
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ValidateEncoderParameters failed");
      goto LABEL_84;
    }
    sub_91464(v12, texture);
    sub_93EAC((_DWORD *)v12);
    if (v13[18])
    {
      *((void *)v13 + 11) = sub_DDEFC();
      if (sub_D1C38(0x18u, 6))
      {
        int v146 = sub_D1C7C(0x18u);
        __uint64_t v149 = sub_DDEFC();
        uint64_t v64 = (const char *)sub_D1CB0(6);
        unsigned int v65 = v13[33];
        uint64_t v66 = *((void *)v13 + 11) - *((void *)v13 + 10);
        if (v146)
        {
          printf("%lld %d AVE %s: FIG: %d (%d) Init setup  took %lld us\n", v149, 24, v64, v65, v13[1], v66);
          __uint64_t v150 = sub_DDEFC();
          int v67 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: %d (%d) Init setup  took %lld us", v150, 24, v67, v13[33], v13[1], *((void *)v13 + 11) - *((void *)v13 + 10));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: %d (%d) Init setup  took %lld us", v149, 24, v64, v65, v13[1], v66);
        }
      }
      *((void *)v13 + 10) = sub_DDEFC();
    }
    long long v180 = 0u;
    long long v179 = 0u;
    long long v178 = 0u;
    long long v177 = 0u;
    uint64_t v171 = v12 + 1872;
    uint64_t v172 = v12 + 1880;
    uint64_t v173 = v12 + 18640;
    uint64_t v174 = v12 + 192;
    long long v175 = *((_OWORD *)v13 + 13);
    uint64_t v176 = *((void *)v13 + 28);
    *((void *)&v178 + 1) = v12 + 20368;
    *(void *)&long long v179 = v12 + 102520;
    *((void *)&v179 + 1) = v12 + 110444;
    *(void *)&long long v180 = v12 + 118368;
    *((void *)&v180 + 1) = v12 + 128004;
    uint64_t v181 = v12 + 137640;
    uint64_t v182 = v12 + 159392;
    __uint64_t v183 = v23;
    if (v3 && CFDictionaryContainsKey(v3, @"ReconstructedPixelBuffer")) {
      *(_DWORD *)(v172 + 176) |= 8u;
    }
    if (sub_B25A4(*(void *)(v12 + 24), (uint64_t)&v171, v12 + 32, 0, *(void *)(v12 + 8), *(void *)(v12 + 16), *((unsigned __int8 *)v13 + 104), *((void *)v13 + 18), v12 + 64, (_DWORD *)(v12 + 20176), (void *)(v12 + 19476)))
    {
      if (!sub_D1C38(3u, 4)) {
        goto LABEL_37;
      }
      int v72 = sub_D1C7C(3u);
      __uint64_t v69 = sub_DDEFC();
      int v70 = (const char *)sub_D1CB0(4);
      if (v72)
      {
        int v71 = 16691;
        goto LABEL_118;
      }
LABEL_193:
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Start failed.");
      goto LABEL_37;
    }
  }
  else
  {
    if (v28 != 30567)
    {
      if (v28 != 30568)
      {
        if (sub_D1C38(3u, 4))
        {
          int v43 = sub_D1C7C(3u);
          __uint64_t v44 = sub_DDEFC();
          int v45 = (const char *)sub_D1CB0(4);
          if (v43)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_H264EncodeFrame encoderPrivateStorage->SessionStatus = 0x%08x.\n", v44, 3, v45, "AVE_HEVCEncodeTile", 16709, "false", *v13);
            __uint64_t v44 = sub_DDEFC();
            int v45 = (const char *)sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_H264EncodeFrame encoderPrivateStorage->SessionStatus = 0x%08x.", v44, 3, v45, "AVE_HEVCEncodeTile", 16709, "false", *v13);
        }
        goto LABEL_37;
      }
      if (sub_8CABC(v12, &texture, &v169, &v168, &v167, 0))
      {
        if (!sub_D1C38(3u, 4))
        {
LABEL_84:
          uint64_t v36 = 4294954394;
          goto LABEL_85;
        }
        int v29 = sub_D1C7C(3u);
        __uint64_t v30 = sub_DDEFC();
        __uint64_t v31 = (const char *)sub_D1CB0(4);
        if (v29)
        {
          int v32 = 16486;
LABEL_63:
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_HEVC_VerifyImageBuffer failed.\n", v30, 3, v31, "AVE_HEVCEncodeTile", v32, "err == noErr");
          sub_DDEFC();
          sub_D1CB0(4);
          goto LABEL_83;
        }
        goto LABEL_83;
      }
      goto LABEL_125;
    }
    if (sub_D17D4(texture)) {
      int v41 = 1;
    }
    else {
      int v41 = 2;
    }
    *(_DWORD *)(v12 + 18804) = v41;
    sub_8CF94(v12, texture);
    if (sub_8CABC(v12, &texture, &v169, &v168, &v167, 1))
    {
      if (sub_D1C38(3u, 4))
      {
        int v42 = sub_D1C7C(3u);
        __uint64_t v30 = sub_DDEFC();
        __uint64_t v31 = (const char *)sub_D1CB0(4);
        if (!v42) {
          goto LABEL_83;
        }
        int v32 = 16503;
        goto LABEL_63;
      }
      goto LABEL_78;
    }
    sub_8D1F8(v12, *(_DWORD *)(v12 + 18804) == 2);
    if (sub_8D33C((const void **)v12))
    {
      if (!sub_D1C38(3u, 4)) {
        goto LABEL_78;
      }
      int v50 = sub_D1C7C(3u);
      __uint64_t v51 = sub_DDEFC();
      uint64_t v52 = (const char *)sub_D1CB0(4);
      if (v50)
      {
        int v53 = 16511;
LABEL_77:
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_ValidateEncoderParameters failed\n", v51, 3, v52, "AVE_HEVCEncodeTile", v53, "err == noErr");
        sub_DDEFC();
        sub_D1CB0(4);
        goto LABEL_98;
      }
      goto LABEL_98;
    }
    sub_91464(v12, texture);
    sub_93EAC((_DWORD *)v12);
    if (v13[18])
    {
      *((void *)v13 + 11) = sub_DDEFC();
      if (sub_D1C38(0x18u, 6))
      {
        int v147 = sub_D1C7C(0x18u);
        __uint64_t v145 = sub_DDEFC();
        uint64_t v55 = (const char *)sub_D1CB0(6);
        unsigned int v56 = v13[33];
        uint64_t v57 = *((void *)v13 + 11) - *((void *)v13 + 10);
        if (v147)
        {
          printf("%lld %d AVE %s: FIG: %d (%d) Pre Init setup  took %lld us\n", v145, 24, v55, v56, v13[1], v57);
          __uint64_t v148 = sub_DDEFC();
          __uint64_t v58 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: %d (%d) Pre Init setup  took %lld us", v148, 24, v58, v13[33], v13[1], *((void *)v13 + 11) - *((void *)v13 + 10));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: %d (%d) Pre Init setup  took %lld us", v145, 24, v55, v56, v13[1], v57);
        }
      }
      *((void *)v13 + 10) = sub_DDEFC();
    }
    long long v180 = 0u;
    long long v179 = 0u;
    long long v178 = 0u;
    long long v177 = 0u;
    uint64_t v171 = v12 + 1872;
    uint64_t v172 = v12 + 1880;
    uint64_t v173 = v12 + 18640;
    uint64_t v174 = v12 + 192;
    long long v175 = *((_OWORD *)v13 + 13);
    uint64_t v176 = *((void *)v13 + 28);
    *((void *)&v178 + 1) = v12 + 20368;
    *(void *)&long long v179 = v12 + 102520;
    *((void *)&v179 + 1) = v12 + 110444;
    *(void *)&long long v180 = v12 + 118368;
    *((void *)&v180 + 1) = v12 + 128004;
    uint64_t v181 = v12 + 137640;
    uint64_t v182 = v12 + 159392;
    __uint64_t v183 = v23;
    if (v3 && CFDictionaryContainsKey(v3, @"ReconstructedPixelBuffer")) {
      *(_DWORD *)(v172 + 176) |= 8u;
    }
    if (sub_B25A4(*(void *)(v12 + 24), (uint64_t)&v171, v12 + 32, 0, *(void *)(v12 + 8), *(void *)(v12 + 16), *((unsigned __int8 *)v13 + 104), *((void *)v13 + 18), v12 + 64, (_DWORD *)(v12 + 20176), (void *)(v12 + 19476)))
    {
      if (!sub_D1C38(3u, 4)) {
        goto LABEL_37;
      }
      int v68 = sub_D1C7C(3u);
      __uint64_t v69 = sub_DDEFC();
      int v70 = (const char *)sub_D1CB0(4);
      if (v68)
      {
        int v71 = 16579;
LABEL_118:
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Start failed.\n", v69, 3, v70, "AVE_HEVCEncodeTile", v71, "err == noErr");
        sub_DDEFC();
        sub_D1CB0(4);
        goto LABEL_193;
      }
      goto LABEL_193;
    }
  }
  *__uint64_t v13 = 30568;
  if (!v13[18]) {
    goto LABEL_132;
  }
  *((void *)v13 + 11) = sub_DDEFC();
  if (sub_D1C38(0x18u, 6))
  {
    int v73 = sub_D1C7C(0x18u);
    __uint64_t v74 = sub_DDEFC();
    int v75 = (const char *)sub_D1CB0(6);
    unsigned int v76 = v13[33];
    uint64_t v77 = *((void *)v13 + 11) - *((void *)v13 + 10);
    if (v73)
    {
      printf("%lld %d AVE %s: FIG: %d (%d) AVE_USL_Drv_Start took %lld us\n", v74, 24, v75, v76, v13[1], v77);
      __uint64_t v78 = sub_DDEFC();
      uint64_t v79 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_USL_Drv_Start took %lld us", v78, 24, v79, v13[33], v13[1], *((void *)v13 + 11) - *((void *)v13 + 10));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_USL_Drv_Start took %lld us", v74, 24, v75, v76, v13[1], v77);
    }
  }
  *((void *)v13 + 10) = sub_DDEFC();
LABEL_125:
  if (v13[18] && *v13 == 30568)
  {
    *((void *)v13 + 11) = sub_DDEFC();
    if (sub_D1C38(0x18u, 6))
    {
      int v80 = sub_D1C7C(0x18u);
      __uint64_t v81 = sub_DDEFC();
      __uint64_t v82 = (const char *)sub_D1CB0(6);
      unsigned int v83 = v13[33];
      uint64_t v84 = *((void *)v13 + 11) - *((void *)v13 + 10);
      if (v80)
      {
        printf("%lld %d AVE %s: FIG: %d (%d) AVE_HEVC_VerifyImageBuffer took %lld us\n", v81, 24, v82, v83, v13[1], v84);
        __uint64_t v85 = sub_DDEFC();
        int v86 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_HEVC_VerifyImageBuffer took %lld us", v85, 24, v86, v13[33], v13[1], *((void *)v13 + 11) - *((void *)v13 + 10));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_HEVC_VerifyImageBuffer took %lld us", v81, 24, v82, v83, v13[1], v84);
      }
    }
    *((void *)v13 + 10) = sub_DDEFC();
  }
LABEL_132:
  *__uint64_t v13 = 30568;
  v155[1] = 0;
  long long v156 = 0u;
  long long v157 = 0u;
  long long v158 = 0u;
  long long v159 = 0u;
  long long v160 = 0u;
  long long v161 = 0u;
  memset(v162, 0, sizeof(v162));
  long long v163 = 0u;
  long long v164 = 0u;
  long long v165 = 0u;
  long long v166 = 0u;
  memset(v153, 0, sizeof(v153));
  uint64_t v154 = 0;
  bzero(&v171, 0x4AF8uLL);
  v155[0] = 0;
  v155[2] = v8;
  *(void *)&long long v156 = texture;
  BYTE8(v163) = *((unsigned char *)v13 + 105);
  *(void *)&long long v164 = v23;
  DWORD2(v164) = v13[39];
  *(_OWORD *)&v162[1] = *(_OWORD *)(v12 + 185008);
  if (*(_DWORD *)(v12 + 18804) == 2)
  {
    sub_D196C(texture, v153);
    sub_5734(*((void **)v13 + 27), v13[39], v13[1], (double *)v153);
  }
  void v162[3] = v153;
  *(void *)&long long v158 = 0;
  BYTE8(v158) = *((unsigned char *)v13 + 107);
  if (*((unsigned char *)v13 + 106))
  {
    CFDictionaryRef v87 = (const __CFDictionary *)CMGetAttachment(texture, kFigCaptureSampleBufferAttachmentKey_MetadataDictionary, 0);
    if (v87) {
      *(void *)&long long v158 = CFDictionaryCreateCopy(0, v87);
    }
  }
  if (sub_D1C38(0x14u, 7))
  {
    int v88 = sub_D1C7C(0x14u);
    __uint64_t v89 = sub_DDEFC();
    __uint64_t v90 = (const char *)sub_D1CB0(7);
    if (v88)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_GetPerTileData\n", v89, 20, v90);
      __uint64_t v91 = sub_DDEFC();
      double v141 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_GetPerTileData", v91, 20, v141);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_GetPerTileData", v89, 20, v90);
    }
  }
  int v185 = *(_DWORD *)(v12 + 18776);
  BOOL v186 = *(_DWORD *)(v12 + 18784) == 1;
  BOOL v187 = *(_DWORD *)(v12 + 18788) == 4;
  int v191 = *(_DWORD *)(v12 + 18808);
  char v188 = *(unsigned char *)(v12 + 18845);
  *(unsigned char *)(v12 + 18845) = 0;
  char v189 = *(unsigned char *)(v12 + 18012);
  BytePtr = 0;
  char v190 = 0;
  if (!v3) {
    goto LABEL_163;
  }
  if (CFDictionaryContainsKey(v3, @"SessionIndicator")) {
    sub_C0600(*((void *)v13 + 26));
  }
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v3, kVTEncodeFrameOptionKey_UserQpMap);
  if (Value) {
    BytePtr = CFDataGetBytePtr(Value);
  }
  uint64_t v93 = CFDictionaryGetValue(v3, @"ForceNonRefFrame");
  if (v93 && CFEqual(v93, kCFBooleanTrue))
  {
    BYTE4(v171) = 1;
    goto LABEL_160;
  }
  uint64_t v94 = CFDictionaryGetValue(v3, kVTEncodeFrameOptionKey_ForceKeyFrame);
  if (v94 && CFEqual(v94, kCFBooleanTrue))
  {
    if (*(_DWORD *)(v12 + 18384))
    {
      int v95 = 3;
    }
    else
    {
      if (*(unsigned char *)(v12 + 2024))
      {
        int v95 = 1;
        LODWORD(v171) = 1;
        uint64_t v96 = 1;
LABEL_156:
        uint64_t v173 = v96;
        if (sub_D1C38(0x1Du, 6))
        {
          int v97 = sub_D1C7C(0x1Du);
          __uint64_t v98 = sub_DDEFC();
          long long v99 = (const char *)sub_D1CB0(6);
          if (v97)
          {
            printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceKeyFrame = %d %llx\n", v98, 29, v99, v95, v96);
            __uint64_t v100 = sub_DDEFC();
            __uint64_t v142 = (const char *)sub_D1CB0(6);
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceKeyFrame = %d %llx", v100, 29, v142, v95, v96);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceKeyFrame = %d %llx", v98, 29, v99, v95, v96);
          }
        }
        goto LABEL_160;
      }
      int v95 = 2;
    }
    LODWORD(v171) = v95;
    uint64_t v96 = 256;
    goto LABEL_156;
  }
LABEL_160:
  if ((*(unsigned char *)(v12 + 2056) & 8) == 0)
  {
LABEL_163:
    char v102 = 1;
    goto LABEL_164;
  }
  long long v101 = CFDictionaryGetValue(v3, @"ReconstructedPixelBuffer");
  if (v101)
  {
    int v192 = v101;
    goto LABEL_163;
  }
  if (sub_D1C38(3u, 4))
  {
    int v118 = sub_D1C7C(3u);
    __uint64_t v119 = sub_DDEFC();
    CMTimeEpoch v120 = (const char *)sub_D1CB0(4);
    if (v118)
    {
      printf("%lld %d AVE %s: %s:%d %s | AVE ERR: failed to get ReconstructedPixelBuffer %p\n", v119, 3, v120, "AVE_GetPerTileData", 15835, "pUseReconBuffer != __null", 0);
      __uint64_t v119 = sub_DDEFC();
      sub_D1CB0(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERR: failed to get ReconstructedPixelBuffer %p", v119);
  }
  char v102 = 0;
LABEL_164:
  if (sub_D1C38(0x14u, 7))
  {
    int v103 = sub_D1C7C(0x14u);
    __uint64_t v104 = sub_DDEFC();
    __uint64_t v105 = (const char *)sub_D1CB0(7);
    if (v103)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_GetPerTileData\n", v104, 20, v105);
      __uint64_t v106 = sub_DDEFC();
      int v143 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_GetPerTileData", v106, 20, v143);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_GetPerTileData", v104, 20, v105);
    }
  }
  if ((v102 & 1) == 0)
  {
    if (sub_D1C38(3u, 4))
    {
      int v110 = sub_D1C7C(3u);
      __uint64_t v111 = sub_DDEFC();
      int v112 = (const char *)sub_D1CB0(4);
      if (v110)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_GetPerTileData failed.\n", v111, 3, v112, "AVE_HEVCEncodeTile", 16781, "err == noErr");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_GetPerTileData failed.");
    }
    goto LABEL_84;
  }
  if (sub_9A54C((_DWORD *)v12, (uint64_t)&v171, v6, v152))
  {
    if (sub_D1C38(3u, 4))
    {
      int v107 = sub_D1C7C(3u);
      __uint64_t v108 = sub_DDEFC();
      __uint64_t v109 = (const char *)sub_D1CB0(4);
      if (v107)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_GetTileInfo failed.\n", v108, 3, v109, "AVE_HEVCEncodeTile", 16786, "err == noErr");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_GetTileInfo failed.");
    }
    goto LABEL_84;
  }
  *(void *)&long long v163 = &v171;
  *((void *)&v166 + 1) = v13[1];
  uint64_t v113 = sub_B5104(*(void ***)(v12 + 24), (uint64_t)v155);
  uint64_t v36 = v113;
  if (v113)
  {
    if (v113 == -536870173)
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v114 = sub_D1C7C(0x16u);
        __uint64_t v115 = sub_DDEFC();
        CMTimeRange v116 = (const char *)sub_D1CB0(5);
        if (v114)
        {
          printf("%lld %d AVE %s: FIG: device returned kIOReturnNoPower. reject the frame\n", v115, 22, v116);
          __uint64_t v117 = sub_DDEFC();
          float v144 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: device returned kIOReturnNoPower. reject the frame", v117, 22, v144);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: device returned kIOReturnNoPower. reject the frame", v115, 22, v116);
        }
      }
      goto LABEL_195;
    }
    if (sub_D1C38(3u, 4))
    {
      int v121 = sub_D1C7C(3u);
      __uint64_t v122 = sub_DDEFC();
      CMTime v123 = (const char *)sub_D1CB0(4);
      if (v121)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Process failed.\n", v122, 3, v123, "AVE_HEVCEncodeTile", 16803, "err == noErr");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Process failed.");
    }
LABEL_37:
    uint64_t v36 = 4294954384;
    goto LABEL_85;
  }
LABEL_195:
  if (v151) {
    *v151 |= 1u;
  }
  if (v13[18])
  {
    *((void *)v13 + 11) = sub_DDEFC();
    unsigned int v124 = v13[1];
    BOOL v125 = sub_D1C38(0x18u, 6);
    if (v124)
    {
      if (v125)
      {
        int v126 = sub_D1C7C(0x18u);
        __uint64_t v127 = sub_DDEFC();
        long long v128 = (const char *)sub_D1CB0(6);
        uint64_t v129 = *((void *)v13 + 11);
        uint64_t v130 = v129 - *((void *)v13 + 10);
        uint64_t v131 = v129 - *((void *)v13 + 12);
        if (v126)
        {
          printf("%lld %d AVE %s: FIG: %d (%d) EncodeTile took %lld us (%lld us since tile #0)\n", v127, 24, v128, v13[33], v13[1], v130, v131);
          __uint64_t v127 = sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) EncodeTile took %lld us (%lld us since tile #0)", v127);
      }
    }
    else
    {
      if (v125)
      {
        int v132 = sub_D1C7C(0x18u);
        __uint64_t v133 = sub_DDEFC();
        int v134 = (const char *)sub_D1CB0(6);
        unsigned int v135 = v13[33];
        uint64_t v136 = *((void *)v13 + 11) - *((void *)v13 + 10);
        if (v132)
        {
          printf("%lld %d AVE %s: FIG: %d (%d) EncodeTile took %lld us\n", v133, 24, v134, v135, v13[1], v136);
          __uint64_t v137 = sub_DDEFC();
          __uint64_t v138 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: %d (%d) EncodeTile took %lld us", v137, 24, v138, v13[33], v13[1], *((void *)v13 + 11) - *((void *)v13 + 10));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: %d (%d) EncodeTile took %lld us", v133, 24, v134, v135, v13[1], v136);
        }
      }
      *((void *)v13 + 12) = *((void *)v13 + 10);
    }
  }
LABEL_85:
  if (sub_D1C38(0x14u, 7))
  {
    int v59 = sub_D1C7C(0x14u);
    __uint64_t v60 = sub_DDEFC();
    int v61 = (const char *)sub_D1CB0(7);
    if (v59)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_HEVCEncodeTile err 0x%08x\n", v60, 20, v61, v36);
      __uint64_t v62 = sub_DDEFC();
      float v140 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_HEVCEncodeTile err 0x%08x", v62, 20, v140, v36);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_HEVCEncodeTile err 0x%08x", v60, 20, v61, v36);
    }
  }
  if (v169 && texture) {
    CVPixelBufferRelease(texture);
  }
  kdebug_trace();
  ++v13[1];
  pthread_mutex_unlock((pthread_mutex_t *)(v12 + 183448));
  return v36;
}

uint64_t sub_88DAC(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (sub_D1C38(0x14u, 7))
  {
    int v3 = sub_D1C7C(0x14u);
    __uint64_t v4 = sub_DDEFC();
    unint64_t v5 = (const char *)sub_D1CB0(7);
    if (v3)
    {
      printf("%lld %d AVE %s: Enter %s %p\n", v4, 20, v5, "AVE_HEVCCompleteTiles", a1);
      __uint64_t v6 = sub_DDEFC();
      __uint64_t v35 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: Enter %s %p", v6, 20, v35, "AVE_HEVCCompleteTiles", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Enter %s %p", v4, 20, v5, "AVE_HEVCCompleteTiles", a1);
    }
  }
  if (!DerivedStorage)
  {
    if (sub_D1C38(3u, 4))
    {
      int v11 = sub_D1C7C(3u);
      __uint64_t v12 = sub_DDEFC();
      __uint64_t v13 = (const char *)sub_D1CB0(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v12, 3, v13, "AVE_HEVCCompleteTiles", 16873, "encoderPrivateStorage");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.");
    }
    goto LABEL_28;
  }
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
  if (sub_D1C38(0x14u, 7))
  {
    int v7 = sub_D1C7C(0x14u);
    __uint64_t v8 = sub_DDEFC();
    __uint64_t v9 = (const char *)sub_D1CB0(7);
    if (v7)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_HEVCCompleteTiles\n", v8, 20, v9);
      __uint64_t v10 = sub_DDEFC();
      uint64_t v36 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCCompleteTiles", v10, 20, v36);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCCompleteTiles", v8, 20, v9);
    }
  }
  uint64_t v14 = *(void *)(DerivedStorage + 183648);
  __uint64_t v15 = sub_DDEFC();
  sub_C086C(v14, 6u, v15);
  kdebug_trace();
  if (*(_DWORD *)(DerivedStorage + 183512)) {
    *(void *)(DerivedStorage + 183520) = sub_DDEFC();
  }
  __uint64_t v16 = sub_DDEFC();
  if (*(_DWORD *)(DerivedStorage + 183440) == 30568)
  {
    __uint64_t v38 = v16;
    if (sub_B490C(*(void ***)(DerivedStorage + 24), &v38))
    {
      if (sub_D1C38(3u, 4))
      {
        int v17 = sub_D1C7C(3u);
        __uint64_t v18 = sub_DDEFC();
        __uint64_t v19 = (const char *)sub_D1CB0(4);
        if (v17)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: H264VideoEncoderVA_DriverEncodeCompleteFrames failed.\n", v18, 3, v19, "AVE_HEVCCompleteTiles", 16899, "err == noErr");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: H264VideoEncoderVA_DriverEncodeCompleteFrames failed.");
      }
LABEL_28:
      uint64_t v29 = 4294954384;
      goto LABEL_29;
    }
  }
  if (*(_DWORD *)(DerivedStorage + 183512))
  {
    *(void *)(DerivedStorage + 183528) = sub_DDEFC();
    if (sub_D1C38(0x18u, 6))
    {
      int v20 = sub_D1C7C(0x18u);
      __uint64_t v21 = sub_DDEFC();
      __uint64_t v22 = (const char *)sub_D1CB0(6);
      int v23 = *(_DWORD *)(DerivedStorage + 183572);
      uint64_t v24 = *(void *)(DerivedStorage + 183528) - *(void *)(DerivedStorage + 183520);
      if (v20)
      {
        printf("%lld %d AVE %s: FIG: %d (%d) Complete took %lld us\n", v21, 24, v22, v23, *(_DWORD *)(DerivedStorage + 183444) - 1, v24);
        __uint64_t v25 = sub_DDEFC();
        __uint64_t v26 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) Complete took %lld us", v25, 24, v26, *(_DWORD *)(DerivedStorage + 183572), *(_DWORD *)(DerivedStorage + 183444) - 1, *(void *)(DerivedStorage + 183528) - *(void *)(DerivedStorage + 183520));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) Complete took %lld us", v21, 24, v22, v23, *(_DWORD *)(DerivedStorage + 183444) - 1, v24);
      }
    }
  }
  uint64_t v27 = *(void *)(DerivedStorage + 183648);
  __uint64_t v28 = sub_DDEFC();
  sub_C0C44(v27, 6u, v28);
  uint64_t v29 = 0;
LABEL_29:
  kdebug_trace();
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 183448));
  if (sub_D1C38(0x14u, 7))
  {
    int v30 = sub_D1C7C(0x14u);
    __uint64_t v31 = sub_DDEFC();
    int v32 = (const char *)sub_D1CB0(7);
    if (v30)
    {
      printf("%lld %d AVE %s: Exit %s %p %d\n", v31, 20, v32, "AVE_HEVCCompleteTiles", a1, v29);
      __uint64_t v33 = sub_DDEFC();
      int v37 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v33, 20, v37, "AVE_HEVCCompleteTiles", a1, v29);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v31, 20, v32, "AVE_HEVCCompleteTiles", a1, v29);
    }
  }
  return v29;
}

uint64_t sub_892C0(const void *a1, uint64_t a2, OpaqueCMTaggedBufferGroup *a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (sub_D1C38(0x14u, 7))
  {
    int v10 = sub_D1C7C(0x14u);
    __uint64_t v11 = sub_DDEFC();
    __uint64_t v12 = (const char *)sub_D1CB0(7);
    if (v10)
    {
      printf("%lld %d AVE %s: %s Enter\n", v11, 20, v12, "AVE_HEVC_EncodeMultiFrame");
      __uint64_t v13 = sub_DDEFC();
      __uint64_t v62 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s Enter", v13, 20, v62, "AVE_HEVC_EncodeMultiFrame");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter", v11, 20, v12, "AVE_HEVC_EncodeMultiFrame");
    }
  }
  if (DerivedStorage)
  {
    uint64_t v14 = (unsigned int *)(DerivedStorage + 18436);
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
    kdebug_trace();
    if (a6 && CFDictionaryContainsKey(a6, @"SessionIndicator")) {
      sub_C0600(*(void *)(DerivedStorage + 183648));
    }
    if (!*(_DWORD *)(DerivedStorage + 183444))
    {
      uint64_t v15 = *(void *)(DerivedStorage + 183648);
      __uint64_t v16 = sub_DDEFC();
      sub_C086C(v15, 5u, v16);
      if (*(int *)(DerivedStorage + 228) >= 1) {
        int v17 = *(_DWORD *)(DerivedStorage + 228);
      }
      else {
        int v17 = 30;
      }
      sub_CA914(*(int **)(DerivedStorage + 183640), v17, 0, 0);
    }
    if (*v14 == 2)
    {
      unsigned int Count = CMTaggedBufferGroupGetCount(a3);
      int v19 = Count;
      if (*v14 <= Count)
      {
        if (!Count)
        {
          uint64_t v43 = 0;
          goto LABEL_72;
        }
        uint64_t v29 = 0;
        unint64_t v30 = Count;
        while (1)
        {
          unint64_t v31 = 0;
          CMTag v66 = kCMTagInvalid;
          CMTag tagBuffer = v66;
          CMItemCount numberOfTagsCopied = 0;
          uint64_t v64 = v29;
          int v32 = (unsigned __int8 *)(DerivedStorage + v29 + 93859);
          do
          {
            TagCollectionAtIndex = CMTaggedBufferGroupGetTagCollectionAtIndex(a3, v31);
            OSStatus TagsWithCategory = CMTagCollectionGetTagsWithCategory(TagCollectionAtIndex, kCMTagCategory_VideoLayerID, &tagBuffer, 1, &numberOfTagsCopied);
            if (TagsWithCategory || numberOfTagsCopied != 1)
            {
              if (sub_D1C38(0x14u, 4))
              {
                int v44 = sub_D1C7C(0x14u);
                __uint64_t v45 = sub_DDEFC();
                int v46 = (const char *)sub_D1CB0(4);
                if (v44)
                {
                  printf("%lld %d AVE %s: %s:%d %s | invalid VideoLayerID in taggedBuffer %d %d %p\n", v45, 20, v46, "AVE_HEVC_EncodeMultiFrame", 12997, "ret == 0 && numOfTags == 1", TagsWithCategory, numberOfTagsCopied, &tagBuffer);
                  __uint64_t v45 = sub_DDEFC();
                  sub_D1CB0(4);
                }
                syslog(3, "%lld %d AVE %s: %s:%d %s | invalid VideoLayerID in taggedBuffer %d %d %p", v45, 20);
              }
              goto LABEL_71;
            }
            ++v31;
          }
          while (CMTagGetSInt64Value(tagBuffer) != *v32 && v31 < v30);
          if (!*v14) {
            break;
          }
          uint64_t v36 = 0;
          while (1)
          {
            unsigned int v37 = *(_DWORD *)(DerivedStorage + 18904) ? v36 << (*(unsigned char *)(DerivedStorage + 94054) == 1) : v36;
            uint64_t v38 = *(unsigned __int8 *)(DerivedStorage + v37 + 93859);
            if (CMTagGetSInt64Value(tagBuffer) == v38) {
              break;
            }
            if (++v36 >= *v14) {
              goto LABEL_65;
            }
          }
          int v39 = *(unsigned __int8 *)(DerivedStorage + 93924 + v36);
          if (!CMTagCollectionGetTagsWithCategory(TagCollectionAtIndex, kCMTagCategory_StereoView, &v66, 1, &numberOfTagsCopied)&& numberOfTagsCopied == 1)
          {
            FlagsCFDataRef Value = CMTagGetFlagsValue(v66);
            uint64_t v41 = 1772;
            if (FlagsValue != 1) {
              uint64_t v41 = 1773;
            }
            int v42 = *((unsigned __int8 *)v14 + v41);
            if (v39 != v42)
            {
              if (sub_D1C38(0x14u, 4))
              {
                int v59 = sub_D1C7C(0x14u);
                __uint64_t v60 = sub_DDEFC();
                int v61 = (const char *)sub_D1CB0(4);
                if (v59)
                {
                  printf("%lld %d AVE %s: %s:%d %s | left/right ViewID not matching in taggedBuffer %d %d %d\n", v60, 20, v61, "AVE_HEVC_EncodeMultiFrame", 13046, "storedViewID == curViewID", 0, v39, v42);
                  __uint64_t v60 = sub_DDEFC();
                  sub_D1CB0(4);
                }
                syslog(3, "%lld %d AVE %s: %s:%d %s | left/right ViewID not matching in taggedBuffer %d %d %d", v60, 20);
              }
              uint64_t v43 = 4294948262;
              goto LABEL_72;
            }
          }
          if (!CMTaggedBufferGroupGetCVPixelBufferForTag(a3, tagBuffer, 0))
          {
            if (sub_D1C38(0x14u, 4))
            {
              int v56 = sub_D1C7C(0x14u);
              __uint64_t v57 = sub_DDEFC();
              __uint64_t v58 = (const char *)sub_D1CB0(4);
              if (v56)
              {
                printf("%lld %d AVE %s: %s:%d %s | failed to get CVPixelBuffer in taggedBuffer\n", v57, 20, v58, "AVE_HEVC_EncodeMultiFrame", 13054, "pBuf != __null");
                sub_DDEFC();
                sub_D1CB0(4);
              }
              syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get CVPixelBuffer in taggedBuffer");
            }
            goto LABEL_69;
          }
          uint64_t v43 = sub_8A8E0();
          if (!v43)
          {
            uint64_t v29 = v64 + 1;
            if (v64 + 1 != v30) {
              continue;
            }
          }
          goto LABEL_72;
        }
LABEL_65:
        if (!sub_D1C38(0x14u, 4))
        {
LABEL_71:
          uint64_t v43 = 4294949598;
          goto LABEL_72;
        }
        int v47 = sub_D1C7C(0x14u);
        __uint64_t v48 = sub_DDEFC();
        int v49 = (const char *)sub_D1CB0(4);
        SInt64CFDataRef Value = CMTagGetSInt64Value(tagBuffer);
        if (v47)
        {
          printf("%lld %d AVE %s: %s:%d %s | mismatch VideoLayerID %lld in taggedBuffer\n", v48, 20, v49, "AVE_HEVC_EncodeMultiFrame", 13031, "storedLayerID != -1", SInt64Value);
          __uint64_t v48 = sub_DDEFC();
          sub_D1CB0(4);
          CMTagGetSInt64Value(tagBuffer);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | mismatch VideoLayerID %lld in taggedBuffer", v48);
      }
      else if (sub_D1C38(0x14u, 4))
      {
        int v20 = sub_D1C7C(0x14u);
        __uint64_t v21 = sub_DDEFC();
        __uint64_t v22 = (const char *)sub_D1CB0(4);
        if (v20)
        {
          printf("%lld %d AVE %s: %s:%d %s | no enough buffers %d %d\n", v21, 20, v22, "AVE_HEVC_EncodeMultiFrame", 12977, "num >= pEnc->VideoParams.iLayerNum", v19, *v14);
          __uint64_t v21 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | no enough buffers %d %d", v21);
      }
LABEL_69:
      uint64_t v43 = 4294949598;
      goto LABEL_72;
    }
    if (sub_D1C38(0x14u, 4))
    {
      int v26 = sub_D1C7C(0x14u);
      __uint64_t v27 = sub_DDEFC();
      __uint64_t v28 = (const char *)sub_D1CB0(4);
      if (v26)
      {
        printf("%lld %d AVE %s: %s:%d %s | invalid number of video layers %d\n", v27, 20, v28, "AVE_HEVC_EncodeMultiFrame", 12972, "pEnc->VideoParams.iLayerNum > 1 && pEnc->VideoParams.iLayerNum <= ((2) < ((63 + 1)) ? (2) : ((63 + 1)))", *v14);
        __uint64_t v27 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid number of video layers %d", v27);
    }
    uint64_t v43 = 4294948264;
  }
  else
  {
    if (sub_D1C38(0x14u, 4))
    {
      int v23 = sub_D1C7C(0x14u);
      __uint64_t v24 = sub_DDEFC();
      __uint64_t v25 = (const char *)sub_D1CB0(4);
      if (v23)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to get encoder %p\n", v24, 20, v25, "AVE_HEVC_EncodeMultiFrame", 12945, "pEnc", a1);
        __uint64_t v24 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get encoder %p", v24);
    }
    uint64_t v43 = 4294954384;
  }
LABEL_72:
  kdebug_trace();
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 183448));
  if (sub_D1C38(0x14u, 7))
  {
    int v51 = sub_D1C7C(0x14u);
    __uint64_t v52 = sub_DDEFC();
    int v53 = (const char *)sub_D1CB0(7);
    if (v51)
    {
      printf("%lld %d AVE %s: %s Exit 0x%x\n", v52, 20, v53, "AVE_HEVC_EncodeMultiFrame", v43);
      __uint64_t v54 = sub_DDEFC();
      int v63 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s Exit 0x%x", v54, 20, v63, "AVE_HEVC_EncodeMultiFrame", v43);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit 0x%x", v52, 20, v53, "AVE_HEVC_EncodeMultiFrame", v43);
    }
  }
  return v43;
}

void sub_89D24(uint64_t a1)
{
  CFDictionaryRef v2 = (int *)(a1 + 183564);
  uint64_t v3 = a1 + 103116;
  if (sub_D1C38(0x14u, 7))
  {
    int v4 = sub_D1C7C(0x14u);
    __uint64_t v5 = sub_DDEFC();
    __uint64_t v6 = (const char *)sub_D1CB0(7);
    if (v4)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_PrepareCropParams\n", v5, 20, v6);
      __uint64_t v7 = sub_DDEFC();
      uint64_t v29 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PrepareCropParams", v7, 20, v29);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PrepareCropParams", v5, 20, v6);
    }
  }
  unsigned int v8 = *(_DWORD *)(a1 + 1880);
  unsigned int v9 = *(_DWORD *)(a1 + 1884);
  *(unsigned char *)uint64_t v3 = 0;
  *(void *)(a1 + 103128) = 0;
  *(void *)(a1 + 103120) = 0;
  if (v9 < 0x40 || (v9 & 0xF) != 0)
  {
    if (*v2 >= 11) {
      v2[359] = v9;
    }
    unsigned int v11 = (v9 + 15) & 0xFFFFFFF0;
    if (v11 <= 0x40) {
      unsigned int v11 = 64;
    }
    *(_DWORD *)(a1 + 1884) = v11;
    *(unsigned char *)uint64_t v3 = 1;
    *(_DWORD *)(v3 + 16) = v11 - v9;
  }
  if (v8 < 0xA0 || (v8 & 0xF) != 0)
  {
    if (*v2 >= 11) {
      v2[358] = v8;
    }
    unsigned int v12 = (v8 + 15) & 0xFFFFFFF0;
    if (v12 <= 0xA0) {
      unsigned int v12 = 160;
    }
    *(_DWORD *)(a1 + 1880) = v12;
    *(unsigned char *)uint64_t v3 = 1;
    *(_DWORD *)(v3 + 8) = v12 - v8;
  }
  if (sub_D1C38(0x16u, 7))
  {
    int v13 = sub_D1C7C(0x16u);
    __uint64_t v14 = sub_DDEFC();
    uint64_t v15 = (const char *)sub_D1CB0(7);
    if (v13)
    {
      printf("%lld %d AVE %s: FIG: input -> %dx%d\n", v14, 22, v15, v8, v9);
      __uint64_t v16 = sub_DDEFC();
      unint64_t v30 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: input -> %dx%d", v16, 22, v30, v8, v9);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: input -> %dx%d", v14, 22, v15, v8, v9);
    }
  }
  if (sub_D1C38(0x16u, 7))
  {
    int v17 = sub_D1C7C(0x16u);
    __uint64_t v18 = sub_DDEFC();
    int v19 = (const char *)sub_D1CB0(7);
    int v20 = *(_DWORD *)(a1 + 1884);
    if (v17)
    {
      printf("%lld %d AVE %s: FIG: input multiple -> %dx%d\n", v18, 22, v19, *(_DWORD *)(a1 + 1880), v20);
      __uint64_t v21 = sub_DDEFC();
      __uint64_t v22 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: input multiple -> %dx%d", v21, 22, v22, *(_DWORD *)(a1 + 1880), *(_DWORD *)(a1 + 1884));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: input multiple -> %dx%d", v18, 22, v19, *(_DWORD *)(a1 + 1880), v20);
    }
  }
  if (sub_D1C38(0x16u, 7))
  {
    int v23 = sub_D1C7C(0x16u);
    __uint64_t v24 = sub_DDEFC();
    __uint64_t v25 = (const char *)sub_D1CB0(7);
    int v26 = *(_DWORD *)(v3 + 8);
    if (v23)
    {
      printf("%lld %d AVE %s: FIG: frame_crop_bottom_offset %d frame_crop_right_offset %d\n", v24, 22, v25, *(_DWORD *)(v3 + 16), v26);
      __uint64_t v27 = sub_DDEFC();
      __uint64_t v28 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: frame_crop_bottom_offset %d frame_crop_right_offset %d", v27, 22, v28, *(_DWORD *)(v3 + 16), *(_DWORD *)(v3 + 8));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: frame_crop_bottom_offset %d frame_crop_right_offset %d", v24, 22, v25, *(_DWORD *)(v3 + 16), v26);
    }
  }
}

double sub_8A054(uint64_t a1)
{
  int v23 = (_DWORD *)(a1 + 183564);
  uint64_t v2 = a1 + 137652;
  uint64_t v26 = a1 + 118396;
  uint64_t v27 = a1 + 126884;
  uint64_t v3 = a1 + 109576;
  uint64_t v4 = a1 + 102544;
  uint64_t v24 = a1 + 87668;
  __uint64_t v25 = (unsigned char *)(a1 + 92812);
  uint64_t v5 = a1 + 19476;
  uint64_t v6 = a1 + 18808;
  uint64_t v7 = a1 + 18448;
  uint64_t v8 = a1 + 17868;
  if (sub_D1C38(0x14u, 7))
  {
    int v9 = sub_D1C7C(0x14u);
    __uint64_t v10 = sub_DDEFC();
    unsigned int v11 = (const char *)sub_D1CB0(7);
    if (v9)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_SetEncoderDefault\n", v10, 20, v11);
      __uint64_t v12 = sub_DDEFC();
      __uint64_t v21 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetEncoderDefault", v12, 20, v21);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetEncoderDefault", v10, 20, v11);
    }
  }
  *(unsigned char *)(v7 + 192) = 0;
  *(_OWORD *)(v7 + 200) = xmmword_141700;
  *(void *)(a1 + 18664) = 31;
  *(unsigned char *)(v7 + 228) = 0;
  *(_DWORD *)(v7 + 232) = 1;
  *(_DWORD *)(v7 + 236) = 16777473;
  *(unsigned char *)(v7 + 240) = 1;
  *(void *)(a1 + 18736) = 0;
  *(_OWORD *)(a1 + 18689) = 0u;
  *(_OWORD *)(a1 + 18705) = 0u;
  *(_OWORD *)(a1 + 18721) = 0u;
  *(unsigned char *)(v7 + 304) = 1;
  *(void *)(a1 + 18744) = 0xC800000002;
  *(_WORD *)(v7 + 321) = 0;
  *(unsigned char *)(v7 + 326) = 0;
  int v22 = *(_DWORD *)(a1 + 1884);
  *(_DWORD *)(v7 + 328) = 2
                        * (((v22 + 31) >> 5) * ((*(_DWORD *)(a1 + 1880) + 31) >> 5) > 0x398);
  *(_WORD *)(v7 + 332) = 0;
  *(_OWORD *)(a1 + 18784) = xmmword_142EC0;
  *(void *)(a1 + 18888) = 0;
  *(_DWORD *)(a1 + 18896) = 0;
  *(void *)(a1 + 18872) = 0;
  *(void *)(a1 + 18880) = 0;
  *(_DWORD *)(v6 + 60) = -1;
  *(_DWORD *)(v6 + 46) = 0x10000;
  *(unsigned char *)(v6 + 50) = 0;
  *(void *)(v6 + 38) = 0x100000100;
  *(_WORD *)(v6 + 52) = 0;
  *(_DWORD *)(v7 + 352) = 1;
  *(unsigned char *)(v6 + 54) = 0;
  *(_DWORD *)(v6 + 124) = 0x10000;
  *(void *)(v6 + 652) = 0;
  *(_DWORD *)(v5 + 684) = 0;
  bzero((void *)(a1 + 19484), 0x2A0uLL);
  bzero((void *)(a1 + 18944), 0x201uLL);
  for (uint64_t i = 0; i != 672; i += 112)
    *(void *)(a1 + 19484 + i) = 0xFFFFFFFF00000001;
  *(void *)uint64_t v5 = 0x100000006;
  *(_DWORD *)(v5 + 680) = 1;
  *(unsigned char *)(v5 + 689) = 1;
  *(unsigned char *)(v8 + 452) = 0;
  *(unsigned char *)(v5 + 734) = 1;
  *(_DWORD *)(v6 + 132) = 0;
  *(_DWORD *)(v5 + 700) = 0;
  *(_DWORD *)(v5 + 716) = 0;
  *(unsigned char *)(v5 + 724) = 0;
  *(_DWORD *)(v5 + 728) = 0;
  *(void *)(a1 + 18912) = -1;
  *(void *)(a1 + 18920) = -1;
  *(_DWORD *)(a1 + 18928) = -1;
  *(void *)(a1 + 1928) = 0;
  *(_DWORD *)(a1 + 1920) = 0;
  *(unsigned char *)(a1 + 1924) = 0;
  *(_DWORD *)(a1 + 1944) = 0;
  int v14 = *(_DWORD *)(a1 + 2024);
  *(_DWORD *)(v8 + 524) = 0;
  *(_DWORD *)(a1 + 2024) = v14 | 7;
  *(_DWORD *)(a1 + 2012) = -1;
  *(_DWORD *)uint64_t v8 = 0;
  *(_WORD *)(v8 + 4) = 4 * (*v23 > 5);
  *(_WORD *)(v8 + 6) = 0;
  *(unsigned char *)(v8 + 8) = 0;
  *(_DWORD *)(v8 + 16) = 2;
  *(unsigned char *)(v8 + 10) = 0;
  *(_WORD *)(a1 + 1925) = 0;
  *(unsigned char *)(v8 + 14) = 0;
  *(_DWORD *)(v8 + 184) = 1;
  *(unsigned char *)(v8 + 188) = 0;
  *(void *)(v8 + 192) = 1;
  *(_DWORD *)(v8 + 200) = v22;
  *(_DWORD *)(v8 + 456) = 16;
  *(_WORD *)(v8 + 460) = 0;
  *(_WORD *)(v8 + 144) = 256;
  *(_WORD *)(v8 + 468) = 0;
  *(unsigned char *)(v8 + 481) = 0;
  *(_WORD *)(v8 + 520) = 0;
  *(unsigned char *)(v8 + 528) = 0;
  *(_DWORD *)(v8 + 532) = 0;
  *(void *)(a1 + 18404) = -1;
  *(void *)(a1 + 18412) = -1;
  *(_DWORD *)(v8 + 564) = 0;
  *(void *)(a1 + 1936) = 0;
  *(unsigned char *)(v8 + 577) = 5;
  *(_DWORD *)uint64_t v7 = 1;
  *(void *)(a1 + 18460) = 0;
  *(void *)(a1 + 18452) = 0;
  *(void *)(a1 + 18474) = 0;
  *(void *)(a1 + 18468) = 0;
  *(void *)(v7 + 36) = 0x1000000001;
  *(void *)(a1 + 18624) = 8;
  *(_DWORD *)(v8 + 556) = 2;
  *(unsigned char *)(v7 + 172) = 0;
  *(_WORD *)(v8 + 20) = 3;
  *(_WORD *)(v8 + 24) = 0;
  *(unsigned char *)(v8 + 12) = 1;
  *(void *)(v8 + 48) = 0x8FFFFFFFFLL;
  *(_DWORD *)(v8 + 36) = 0xFFFF;
  *(unsigned char *)(v8 + 482) = 0;
  *(unsigned char *)(v8 + 552) = 21;
  *(_DWORD *)(a1 + 192) = ((double)(*(_DWORD *)(a1 + 1884) * *(_DWORD *)(a1 + 1880))
                                       * 1.5
                                       * 0.075
                                       * 30.0);
  *(_DWORD *)uint64_t v6 = 1;
  *(_DWORD *)(a1 + 228) = 0;
  *(_DWORD *)(v5 + 884) = 0;
  *(void *)(a1 + 2028) = 0;
  *(void *)(a1 + 2040) = 0xBFF0000000000000;
  *(void *)(a1 + 2048) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 196) = 1;
  *(_DWORD *)(a1 + 240) = 1065353216;
  *(void *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 244) = 1;
  *(_WORD *)(a1 + 252) = 0;
  *(_DWORD *)(a1 + 246) = 16843009;
  *(_DWORD *)(a1 + 260) = 1;
  *(unsigned char *)(a1 + 254) = 0;
  *(void *)&long long v15 = 0x40000000400;
  *((void *)&v15 + 1) = 0x40000000400;
  *(_OWORD *)(a1 + 268) = v15;
  *(void *)(a1 + 284) = 1024;
  *(unsigned char *)(a1 + 216) = 1;
  *(_DWORD *)(a1 + 220) = 0;
  if (!*(unsigned char *)(v7 + 320)) {
    *(_DWORD *)(a1 + 292) = 0;
  }
  *(_DWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  *(void *)(a1 + 1824) = 0x1A0000001ALL;
  *(_OWORD *)(a1 + 440) = unk_1431EC;
  *(_OWORD *)(a1 + 376) = unk_1431AC;
  *(_OWORD *)(a1 + 392) = xmmword_1431BC;
  *(_OWORD *)(a1 + 408) = unk_1431CC;
  *(_OWORD *)(a1 + 424) = xmmword_1431DC;
  *(_OWORD *)(a1 + 312) = unk_14316C;
  *(_OWORD *)(a1 + 328) = xmmword_14317C;
  *(_OWORD *)(a1 + 344) = unk_14318C;
  *(_OWORD *)(a1 + 360) = xmmword_14319C;
  *(_OWORD *)(a1 + 296) = xmmword_14315C;
  *(_OWORD *)(a1 + 456) = xmmword_1431FC;
  *(_OWORD *)(a1 + 472) = unk_14320C;
  *(_OWORD *)(a1 + 648) = unk_1432BC;
  *(_OWORD *)(a1 + 664) = xmmword_1432CC;
  *(_OWORD *)(a1 + 680) = unk_1432DC;
  *(_OWORD *)(a1 + 696) = xmmword_1432EC;
  *(_OWORD *)(a1 + 584) = unk_14327C;
  *(_OWORD *)(a1 + 600) = xmmword_14328C;
  *(_OWORD *)(a1 + 616) = unk_14329C;
  *(_OWORD *)(a1 + 632) = xmmword_1432AC;
  *(_OWORD *)(a1 + 520) = *(_OWORD *)algn_14323C;
  *(_OWORD *)(a1 + 536) = xmmword_14324C;
  *(void *)&long long v16 = 0xC0000000CLL;
  *((void *)&v16 + 1) = 0xC0000000CLL;
  *(_OWORD *)(a1 + 1840) = v16;
  *(_WORD *)(a1 + 255) = 257;
  *(unsigned char *)(a1 + 257) = 0;
  *(void *)(a1 + 1816) = 0x403A000000000000;
  *(_DWORD *)(a1 + 1832) = 26;
  *(_OWORD *)(a1 + 552) = unk_14325C;
  *(_OWORD *)(a1 + 568) = xmmword_14326C;
  *(_OWORD *)(a1 + 488) = xmmword_14321C;
  *(_OWORD *)(a1 + 504) = xmmword_14322C;
  memcpy((void *)(a1 + 712), &unk_1432FC, 0x414uLL);
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(void *)(a1 + 1808) = 0;
  *(unsigned char *)(a1 + 250) = 0;
  *(_OWORD *)(a1 + 1756) = xmmword_142ED0;
  *(unsigned char *)(a1 + 1772) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_DWORD *)(v6 + 656) = 30;
  *(unsigned char *)(v8 + 576) = 0;
  *(void *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 1864) = 0;
  *(_DWORD *)(v5 + 880) = 0;
  *(unsigned char *)(v5 + 735) = 0;
  *(_WORD *)(v8 + 20) = 0;
  *(_DWORD *)(v5 + 896) = 0;
  *(_WORD *)(v5 + 900) = 257;
  *(_DWORD *)(v5 + 908) = 0;
  *(unsigned char *)(v5 + 912) = 0;
  *(_OWORD *)(a1 + 22108) = 0u;
  *(_OWORD *)(a1 + 22096) = 0u;
  *(_OWORD *)(a1 + 22080) = 0u;
  *(_OWORD *)(a1 + 22064) = 0u;
  *(_OWORD *)(a1 + 22048) = 0u;
  *(_OWORD *)(a1 + 22032) = 0u;
  *(_DWORD *)(v5 + 2552) = 4;
  double result = 0.0;
  *(void *)(v5 + 2648) = 0;
  *(unsigned char *)(v5 + 2548) = 0;
  *(unsigned char *)uint64_t v24 = 0;
  unint64_t v18 = *(void *)(a1 + 20168) & 0xFFFFFFFFFFFFFFCFLL | 0x20;
  *(void *)(v24 + 4) = 0x5DC0000003E9;
  *(unsigned char *)(v24 + 12) = 0;
  *(_DWORD *)(v24 + 20) = 0;
  *__uint64_t v25 = 0;
  *(void *)(a1 + 20392) = 0;
  *(_DWORD *)(v5 + 924) = 1;
  *(_WORD *)(v5 + 960) = 1;
  *(_DWORD *)(v5 + 962) = 16843009;
  *(_DWORD *)(v5 + 966) = 65793;
  *(_DWORD *)(v5 + 976) = 0;
  *(void *)(a1 + 20896) = 0x101010101010101;
  *(void *)(a1 + 20864) = 0x101010101010101;
  *(void *)&long long v19 = 0x101010101010101;
  *((void *)&v19 + 1) = 0x101010101010101;
  *(_OWORD *)(a1 + 20848) = v19;
  *(_OWORD *)(a1 + 20832) = v19;
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(a1 + 102540) = 0;
  *(void *)(a1 + 102532) = 0;
  *(_DWORD *)(v4 + 8) = 1;
  *(_DWORD *)(v4 + 44) = 16842753;
  *(_DWORD *)(v4 + 50) = 65793;
  *(_DWORD *)(v4 + 60) = 0;
  *(void *)(v4 + 544) = 0x100000000;
  *(_DWORD *)(v4 + 552) = 0;
  *(void *)(v4 + 592) = 0;
  *(_DWORD *)(v4 + 600) = 7;
  *(unsigned char *)(v4 + 604) = 0;
  *(_OWORD *)(a1 + 103204) = 0u;
  *(_OWORD *)(a1 + 103220) = 0u;
  *(_OWORD *)(a1 + 103172) = 0u;
  *(_OWORD *)(a1 + 103188) = 0u;
  *(_OWORD *)(a1 + 103156) = 0u;
  *(_DWORD *)(v4 + 608) = 4;
  *(_OWORD *)(v4 + 692) = xmmword_142EE0;
  *(void *)(v4 + 708) = 1;
  *(unsigned char *)(v4 + 716) = 0;
  *(_WORD *)uint64_t v3 = 256;
  *(unsigned char *)(v3 + 2) = 0;
  *(void *)(v3 + 4) = 0x700000007;
  *(_DWORD *)(v3 + 12) = 1;
  *(_WORD *)(v3 + 20) = 1;
  *(_WORD *)(v3 + 156) = 1;
  *(_WORD *)(v3 + 160) = 0;
  *(_DWORD *)(v3 + 164) = 0;
  *(_WORD *)(v3 + 176) = 256;
  *(_DWORD *)(v3 + 180) = 5;
  *(unsigned char *)(v3 + 188) = 1;
  *(void *)(v3 + 192) = 0x200000002;
  *(_DWORD *)(v3 + 200) = 2;
  *(unsigned char *)(v3 + 204) = 0;
  *(unsigned char *)(v3 + 236) = 0;
  *(void *)(v3 + 240) = 0x5DC0000003E9;
  *(void *)(a1 + 20168) = v18;
  *(unsigned char *)(v3 + 248) = 0;
  *(_DWORD *)(v3 + 256) = 257;
  *(unsigned char *)(v3 + 260) = 1;
  *(_OWORD *)(v3 + 264) = xmmword_142EF0;
  *(_OWORD *)(v3 + 280) = xmmword_142F00;
  *(_DWORD *)(v3 + 296) = 48827;
  *(unsigned char *)(v3 + 300) = 0;
  *(unsigned char *)(v3 + 219) = 0;
  *(unsigned char *)(v3 + 328) = 0;
  *(_DWORD *)(v3 + 8816) = 0;
  *(_WORD *)uint64_t v26 = 0;
  *(_WORD *)(a1 + 118388) = 0;
  *(void *)(a1 + 118380) = 0;
  *(void *)(a1 + 118406) = 0;
  *(void *)(a1 + 118400) = 0;
  *(_OWORD *)(v26 + 24) = xmmword_141720;
  *(_OWORD *)(v26 + 56) = xmmword_141720;
  *(void *)&long long v20 = 0xC0000000CLL;
  *((void *)&v20 + 1) = 0xC0000000CLL;
  *(_OWORD *)(v26 + 40) = v20;
  *(_OWORD *)(v26 + 72) = v20;
  *(_DWORD *)(v26 + 89) = 0;
  *(unsigned char *)(v26 + 93) = 1;
  *(_DWORD *)(v26 + 2157) = 256;
  *(unsigned char *)(v26 + 2172) = 0;
  *(unsigned char *)(v26 + 18) = 1;
  *(_DWORD *)(v26 + 20) = 2;
  *(unsigned char *)(v27 + 17) = 0;
  *(unsigned char *)(v26 + 88) = 0;
  *(_DWORD *)(v27 + 20) = 0;
  *(_DWORD *)uint64_t v27 = 0;
  *(unsigned char *)(v27 + 4) = 0;
  *(unsigned char *)uint64_t v2 = 1;
  *(_DWORD *)(v2 + 4) = 0;
  *(unsigned char *)(v2 + 1) = 0;
  *(_DWORD *)(v2 + 16) = 2;
  *(_WORD *)(v2 + 273) = 257;
  *(_DWORD *)(v2 + 928) = 0;
  *(unsigned char *)(v2 + 952) = 0;
  *(_DWORD *)(v2 + 28) = 0;
  *(unsigned char *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 36) = 0;
  *(unsigned char *)(v2 + 272) = 0;
  *(_WORD *)(v2 + 412) = 0;
  *(unsigned char *)(a1 + 137935) = 0;
  *(void *)(a1 + 137927) = 0;
  *(_WORD *)(v2 + 941) = 0;
  *(_DWORD *)(v2 + 848) = 3;
  *(void *)(v2 + 1224) = -1;
  *(unsigned char *)(v2 + 414) = 1;
  *(void *)(a1 + 1872) = 0;
  return result;
}

uint64_t sub_8A8E0()
{
  __chkstk_darwin();
  uint64_t v1 = v0;
  int v3 = v2;
  uint64_t v205 = v4;
  CFDictionaryRef theDict = v5;
  uint64_t v7 = v6;
  int v9 = v8;
  CVPixelBufferRef v234 = v10;
  char v233 = 0;
  int v232 = 0;
  int v231 = 0;
  long long v228 = 0uLL;
  unsigned int v11 = (char *)sub_C7604();
  uint64_t DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  int v13 = (unsigned int *)(DerivedStorage + 22930);
  if (!DerivedStorage)
  {
    if (sub_D1C38(3u, 4))
    {
      int v18 = sub_D1C7C(3u);
      __uint64_t v19 = sub_DDEFC();
      long long v20 = (const char *)sub_D1CB0(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v19, 3, v20, "AVE_HEVC_Encode", 12128, "encoderPrivateStorage");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.");
    }
    goto LABEL_36;
  }
  if (sub_D1C38(0x14u, 7))
  {
    int v14 = sub_D1C7C(0x14u);
    __uint64_t v15 = sub_DDEFC();
    long long v16 = (const char *)sub_D1CB0(7);
    if (v14)
    {
      printf("%lld %d AVE %s: %s Enter\n", v15, 20, v16, "AVE_HEVC_Encode");
      __uint64_t v17 = sub_DDEFC();
      int v193 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s Enter", v17, 20, v193, "AVE_HEVC_Encode");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter", v15, 20, v16, "AVE_HEVC_Encode");
    }
  }
  if (*((_DWORD *)DerivedStorage + 45878)) {
    DerivedStorage[22940] = (const void *)sub_DDEFC();
  }
  if (!v234)
  {
    if (sub_D1C38(3u, 4))
    {
      int v33 = sub_D1C7C(3u);
      __uint64_t v34 = sub_DDEFC();
      __uint64_t v35 = (const char *)sub_D1CB0(4);
      if (v33)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: imageBuffer = NULL.\n", v34, 3, v35, "AVE_HEVC_Encode", 12136, "imageBuffer");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: imageBuffer = NULL.");
    }
    goto LABEL_88;
  }
  __uint64_t v21 = (char *)DerivedStorage + 18420;
  __uint64_t v22 = sub_DDEFC();
  long long v229 = *v9;
  uint64_t v230 = *((void *)v9 + 2);
  uint64_t v201 = *v7;
  __uint64_t v203 = v22;
  uint64_t v23 = v7[1];
  uint64_t v199 = v7[2];
  *(void *)&long long v228 = v229;
  DWORD2(v228) = DWORD2(v229);
  sub_DDC48(0, (uint64_t)&v228);
  if (sub_D1C38(0x33u, 7))
  {
    int v24 = sub_D1C7C(0x33u);
    __uint64_t v25 = sub_DDEFC();
    uint64_t v26 = (const char *)sub_D1CB0(7);
    uint64_t v27 = *((unsigned int *)DerivedStorage + 45893);
    uint64_t v28 = *((unsigned int *)DerivedStorage + 45861);
    uint64_t v29 = *(void *)v9;
    uint64_t v30 = *((unsigned int *)v9 + 2);
    if (v24)
    {
      printf("%lld %d AVE %s: %s:%d %d %d timestamp %lld %d 0x%x %lld -> %lld %d | duration %lld %d 0x%x %lld\n", v25, 51, v26, "AVE_HEVC_Encode", 12159, v27, v28, v29, v30, *((_DWORD *)v9 + 3), *((void *)v9 + 2), (void)v228, DWORD2(v228), *v7, *((_DWORD *)v7 + 2), *((_DWORD *)v7 + 3), v7[2]);
      __uint64_t v31 = sub_DDEFC();
      int v32 = sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s:%d %d %d timestamp %lld %d 0x%x %lld -> %lld %d | duration %lld %d 0x%x %lld", v31, 51, v32, "AVE_HEVC_Encode", 12159, *((unsigned int *)DerivedStorage + 45893), *((unsigned int *)DerivedStorage + 45861), *(void *)v9, *((unsigned int *)v9 + 2));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %d %d timestamp %lld %d 0x%x %lld -> %lld %d | duration %lld %d 0x%x %lld", v25, 51, v26, "AVE_HEVC_Encode", 12159, v27, v28, v29, v30);
    }
  }
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v234);
  *((_DWORD *)DerivedStorage + 46378) = PixelFormatType;
  if (!*((_DWORD *)DerivedStorage + 45861))
  {
    int v237 = (const void **)DerivedStorage[235];
    unsigned int v37 = sub_D7E18(PixelFormatType);
    if (!v37)
    {
      if (sub_D1C38(3u, 4))
      {
        int v55 = sub_D1C7C(3u);
        __uint64_t v56 = sub_DDEFC();
        __uint64_t v57 = (const char *)sub_D1CB0(4);
        if (v55)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to find pixel format %p %d 0x%x\n", v56, 3, v57, "AVE_HEVC_Encode", 12175, "pPixelFmt != __null", DerivedStorage, *((_DWORD *)DerivedStorage + 45893), *((_DWORD *)DerivedStorage + 46378));
          __uint64_t v56 = sub_DDEFC();
          __uint64_t v57 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to find pixel format %p %d 0x%x", v56, 3, v57, "AVE_HEVC_Encode", 12175, "pPixelFmt != __null", DerivedStorage, *((unsigned int *)DerivedStorage + 45893), *((unsigned int *)DerivedStorage + 46378));
      }
      goto LABEL_88;
    }
    if (v11[792]) {
      uint64_t v38 = v11 + 792;
    }
    else {
      uint64_t v38 = 0;
    }
    if (DerivedStorage[22948]) {
      int v39 = 2;
    }
    else {
      int v39 = 1;
    }
    sub_49A0((uint64_t)DerivedStorage[22957], v38, *((_DWORD *)DerivedStorage + 45890), *((_DWORD *)DerivedStorage + 4690), *((_DWORD *)v11 + 196), *((_DWORD *)v11 + 197), &v237, v39, *((_DWORD *)v37 + 3), *((_DWORD *)v37 + 1), *((_DWORD *)DerivedStorage + 48));
    CVPixelBufferGetIOSurface(v234);
    DerivedStorage[239] = (const void *)IOSurfaceGetProtectionOptions();
  }
  sub_5058(DerivedStorage[22957], *((_DWORD *)DerivedStorage + 45899), v234);
  unsigned int v40 = *v13;
  if (*v13 == 30566)
  {
    if (sub_D17D4(v234)) {
      int v46 = 1;
    }
    else {
      int v46 = 2;
    }
    *((_DWORD *)DerivedStorage + 4701) = v46;
    if (sub_9418C((uint64_t)DerivedStorage))
    {
      if (sub_D1C38(3u, 4))
      {
        int v47 = sub_D1C7C(3u);
        __uint64_t v48 = sub_DDEFC();
        int v49 = (const char *)sub_D1CB0(4);
        if (v47)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed\n", v48, 3, v49, "AVE_HEVC_Encode", 12335, "err == noErr");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed");
      }
      goto LABEL_88;
    }
    sub_8CF94((uint64_t)DerivedStorage, v234);
    if (sub_8CABC((uint64_t)DerivedStorage, &v234, &v233, &v232, &v231, 1))
    {
      if (sub_D1C38(3u, 4))
      {
        int v58 = sub_D1C7C(3u);
        __uint64_t v42 = sub_DDEFC();
        uint64_t v43 = (const char *)sub_D1CB0(4);
        if (!v58)
        {
LABEL_87:
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_HEVC_VerifyImageBuffer failed.");
          goto LABEL_88;
        }
        int v44 = 12345;
LABEL_62:
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_HEVC_VerifyImageBuffer failed.\n", v42, 3, v43, "AVE_HEVC_Encode", v44, "err == noErr");
        sub_DDEFC();
        sub_D1CB0(4);
        goto LABEL_87;
      }
LABEL_88:
      uint64_t v45 = 4294954394;
      goto LABEL_89;
    }
    sub_8D1F8((uint64_t)DerivedStorage, *((_DWORD *)DerivedStorage + 4701) == 2);
    if (*((_DWORD *)DerivedStorage + 4701) == 2)
    {
      int v63 = *((_DWORD *)DerivedStorage + 57);
      if (v63 < 1) {
        int v63 = 30;
      }
      if (!*((unsigned char *)DerivedStorage + 1772)
        && (int)(((*((_DWORD *)DerivedStorage + 471) + 15) >> 4)
               * v63
               * ((*((_DWORD *)DerivedStorage + 470) + 15) >> 4)) > 1943999)
      {
        *((_DWORD *)DerivedStorage + 469) &= 0xFFFFFF1F;
        *((unsigned char *)DerivedStorage + 20210) = 0;
      }
    }
    if (sub_8D33C(DerivedStorage))
    {
      if (!sub_D1C38(3u, 4)) {
        goto LABEL_88;
      }
      int v64 = sub_D1C7C(3u);
      __uint64_t v60 = sub_DDEFC();
      int v61 = (const char *)sub_D1CB0(4);
      if (v64)
      {
        int v62 = 12373;
        goto LABEL_82;
      }
LABEL_104:
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ValidateEncoderParameters failed");
      goto LABEL_88;
    }
    sub_91464((uint64_t)DerivedStorage, v234);
    sub_93EAC(DerivedStorage);
    if (*((_DWORD *)DerivedStorage + 45878))
    {
      DerivedStorage[22941] = (const void *)sub_DDEFC();
      if (sub_D1C38(0x18u, 6))
      {
        int v77 = sub_D1C7C(0x18u);
        __uint64_t v78 = sub_DDEFC();
        uint64_t v79 = (const char *)sub_D1CB0(6);
        int v80 = *((_DWORD *)DerivedStorage + 45893);
        int64_t v81 = (unsigned char *)DerivedStorage[22941] - (unsigned char *)DerivedStorage[22940];
        if (v77)
        {
          printf("%lld %d AVE %s: FIG: %d (%d) Init setup  took %0lld us\n", v78, 24, v79, v80, *((_DWORD *)DerivedStorage + 45861), v81);
          __uint64_t v82 = sub_DDEFC();
          unsigned int v83 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: %d (%d) Init setup  took %0lld us", v82, 24, v83, *((_DWORD *)DerivedStorage + 45893), *((_DWORD *)DerivedStorage + 45861), (unsigned char *)DerivedStorage[22941] - (unsigned char *)DerivedStorage[22940]);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: %d (%d) Init setup  took %0lld us", v78, 24, v79, v80, *((_DWORD *)DerivedStorage + 45861), v81);
        }
      }
      DerivedStorage[22940] = (const void *)sub_DDEFC();
    }
    long long v246 = 0u;
    long long v245 = 0u;
    long long v244 = 0u;
    long long v243 = 0u;
    int v237 = DerivedStorage + 234;
    __uint64_t v238 = DerivedStorage + 235;
    int v239 = DerivedStorage + 2330;
    int v240 = DerivedStorage + 24;
    long long v241 = *((_OWORD *)DerivedStorage + 11478);
    int v242 = DerivedStorage[22958];
    *((void *)&v244 + 1) = DerivedStorage + 2546;
    *(void *)&long long v245 = DerivedStorage + 12815;
    *((void *)&v245 + 1) = (char *)DerivedStorage + 110444;
    *(void *)&long long v246 = DerivedStorage + 14796;
    *((void *)&v246 + 1) = (char *)DerivedStorage + 128004;
    int v247 = DerivedStorage + 17205;
    int v248 = DerivedStorage + 19924;
    __uint64_t v249 = v203;
    __uint64_t v85 = v203;
    if (sub_B25A4((uint64_t)DerivedStorage[3], (uint64_t)&v237, (uint64_t)(DerivedStorage + 4), (uint64_t)*DerivedStorage, 0, (uint64_t)DerivedStorage[2], *((unsigned __int8 *)DerivedStorage + 183544), (uint64_t)DerivedStorage[22948], (uint64_t)(DerivedStorage + 8), (_DWORD *)DerivedStorage + 5044, (char *)DerivedStorage + 19476))
    {
      if (sub_D1C38(3u, 4))
      {
        int v90 = sub_D1C7C(3u);
        __uint64_t v87 = sub_DDEFC();
        int v88 = (const char *)sub_D1CB0(4);
        if (!v90)
        {
LABEL_228:
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Start failed.");
          goto LABEL_36;
        }
        int v89 = 12435;
LABEL_124:
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Start failed.\n", v87, 3, v88, "AVE_HEVC_Encode", v89, "err == noErr");
        sub_DDEFC();
        sub_D1CB0(4);
        goto LABEL_228;
      }
LABEL_36:
      uint64_t v45 = 4294954384;
      goto LABEL_89;
    }
  }
  else
  {
    if (v40 != 30567)
    {
      if (v40 != 30568)
      {
        if (sub_D1C38(3u, 4))
        {
          int v52 = sub_D1C7C(3u);
          __uint64_t v53 = sub_DDEFC();
          __uint64_t v54 = (const char *)sub_D1CB0(4);
          if (v52)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_H264EncodeFrame encoderPrivateStorage->SessionStatus = 0x%08x.\n", v53, 3, v54, "AVE_HEVC_Encode", 12453, "false", *v13);
            __uint64_t v53 = sub_DDEFC();
            __uint64_t v54 = (const char *)sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_H264EncodeFrame encoderPrivateStorage->SessionStatus = 0x%08x.", v53, 3, v54, "AVE_HEVC_Encode", 12453, "false", *v13);
        }
        goto LABEL_36;
      }
      if (sub_8CABC((uint64_t)DerivedStorage, &v234, &v233, &v232, &v231, 0))
      {
        if (sub_D1C38(3u, 4))
        {
          int v41 = sub_D1C7C(3u);
          __uint64_t v42 = sub_DDEFC();
          uint64_t v43 = (const char *)sub_D1CB0(4);
          if (!v41) {
            goto LABEL_87;
          }
          int v44 = 12202;
          goto LABEL_62;
        }
        goto LABEL_88;
      }
      goto LABEL_131;
    }
    if (sub_D17D4(v234)) {
      int v50 = 1;
    }
    else {
      int v50 = 2;
    }
    *((_DWORD *)DerivedStorage + 4701) = v50;
    sub_8CF94((uint64_t)DerivedStorage, v234);
    if (sub_8CABC((uint64_t)DerivedStorage, &v234, &v233, &v232, &v231, 1))
    {
      if (sub_D1C38(3u, 4))
      {
        int v51 = sub_D1C7C(3u);
        __uint64_t v42 = sub_DDEFC();
        uint64_t v43 = (const char *)sub_D1CB0(4);
        if (!v51) {
          goto LABEL_87;
        }
        int v44 = 12219;
        goto LABEL_62;
      }
      goto LABEL_88;
    }
    sub_8D1F8((uint64_t)DerivedStorage, *((_DWORD *)DerivedStorage + 4701) == 2);
    if (sub_8D33C(DerivedStorage))
    {
      if (!sub_D1C38(3u, 4)) {
        goto LABEL_88;
      }
      int v59 = sub_D1C7C(3u);
      __uint64_t v60 = sub_DDEFC();
      int v61 = (const char *)sub_D1CB0(4);
      if (v59)
      {
        int v62 = 12229;
LABEL_82:
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_ValidateEncoderParameters failed\n", v60, 3, v61, "AVE_HEVC_Encode", v62, "err == noErr");
        sub_DDEFC();
        sub_D1CB0(4);
        goto LABEL_104;
      }
      goto LABEL_104;
    }
    sub_91464((uint64_t)DerivedStorage, v234);
    sub_93EAC(DerivedStorage);
    if (*((_DWORD *)DerivedStorage + 45878))
    {
      DerivedStorage[22941] = (const void *)sub_DDEFC();
      if (sub_D1C38(0x18u, 6))
      {
        int v65 = sub_D1C7C(0x18u);
        __uint64_t v66 = sub_DDEFC();
        int v67 = (const char *)sub_D1CB0(6);
        int v68 = *((_DWORD *)DerivedStorage + 45893);
        int64_t v69 = (unsigned char *)DerivedStorage[22941] - (unsigned char *)DerivedStorage[22940];
        if (v65)
        {
          printf("%lld %d AVE %s: FIG: %d (%d) Pre Init setup  took %lld us\n", v66, 24, v67, v68, *((_DWORD *)DerivedStorage + 45861), v69);
          __uint64_t v70 = sub_DDEFC();
          int v71 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: %d (%d) Pre Init setup  took %lld us", v70, 24, v71, *((_DWORD *)DerivedStorage + 45893), *((_DWORD *)DerivedStorage + 45861), (unsigned char *)DerivedStorage[22941] - (unsigned char *)DerivedStorage[22940]);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: %d (%d) Pre Init setup  took %lld us", v66, 24, v67, v68, *((_DWORD *)DerivedStorage + 45861), v69);
        }
      }
      DerivedStorage[22940] = (const void *)sub_DDEFC();
    }
    if (*((_DWORD *)DerivedStorage + 4701) == 2)
    {
      int v84 = *((_DWORD *)DerivedStorage + 57);
      if (v84 < 1) {
        int v84 = 30;
      }
      if (!*((unsigned char *)DerivedStorage + 1772)
        && (int)(((*((_DWORD *)DerivedStorage + 471) + 15) >> 4)
               * v84
               * ((*((_DWORD *)DerivedStorage + 470) + 15) >> 4)) > 1943999)
      {
        *((_DWORD *)DerivedStorage + 469) &= 0xFFFFFF1F;
        *((unsigned char *)DerivedStorage + 20210) = 0;
      }
    }
    long long v246 = 0u;
    long long v245 = 0u;
    long long v244 = 0u;
    long long v243 = 0u;
    int v237 = DerivedStorage + 234;
    __uint64_t v238 = DerivedStorage + 235;
    int v239 = DerivedStorage + 2330;
    int v240 = DerivedStorage + 24;
    long long v241 = *((_OWORD *)DerivedStorage + 11478);
    int v242 = DerivedStorage[22958];
    *((void *)&v244 + 1) = DerivedStorage + 2546;
    *(void *)&long long v245 = DerivedStorage + 12815;
    *((void *)&v245 + 1) = (char *)DerivedStorage + 110444;
    *(void *)&long long v246 = DerivedStorage + 14796;
    *((void *)&v246 + 1) = (char *)DerivedStorage + 128004;
    int v247 = DerivedStorage + 17205;
    int v248 = DerivedStorage + 19924;
    __uint64_t v249 = v203;
    __uint64_t v85 = v203;
    if (sub_B25A4((uint64_t)DerivedStorage[3], (uint64_t)&v237, (uint64_t)(DerivedStorage + 4), (uint64_t)*DerivedStorage, 0, (uint64_t)DerivedStorage[2], *((unsigned __int8 *)DerivedStorage + 183544), (uint64_t)DerivedStorage[22948], (uint64_t)(DerivedStorage + 8), (_DWORD *)DerivedStorage + 5044, (char *)DerivedStorage + 19476))
    {
      if (sub_D1C38(3u, 4))
      {
        int v86 = sub_D1C7C(3u);
        __uint64_t v87 = sub_DDEFC();
        int v88 = (const char *)sub_D1CB0(4);
        if (!v86) {
          goto LABEL_228;
        }
        int v89 = 12310;
        goto LABEL_124;
      }
      goto LABEL_36;
    }
  }
  *int v13 = 30568;
  if (!*((_DWORD *)DerivedStorage + 45878)) {
    goto LABEL_138;
  }
  DerivedStorage[22941] = (const void *)sub_DDEFC();
  if (sub_D1C38(0x18u, 6))
  {
    int v91 = sub_D1C7C(0x18u);
    __uint64_t v92 = sub_DDEFC();
    uint64_t v93 = (const char *)sub_D1CB0(6);
    int v94 = *((_DWORD *)DerivedStorage + 45893);
    int64_t v95 = (unsigned char *)DerivedStorage[22941] - (unsigned char *)DerivedStorage[22940];
    if (v91)
    {
      printf("%lld %d AVE %s: FIG: %d (%d) AVE_USL_Drv_Start took %lld us\n", v92, 24, v93, v94, *((_DWORD *)DerivedStorage + 45861), v95);
      __uint64_t v96 = sub_DDEFC();
      int v97 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_USL_Drv_Start took %lld us", v96, 24, v97, *((_DWORD *)DerivedStorage + 45893), *((_DWORD *)DerivedStorage + 45861), (unsigned char *)DerivedStorage[22941] - (unsigned char *)DerivedStorage[22940]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_USL_Drv_Start took %lld us", v92, 24, v93, v94, *((_DWORD *)DerivedStorage + 45861), v95);
    }
  }
  DerivedStorage[22940] = (const void *)sub_DDEFC();
LABEL_131:
  __uint64_t v85 = v203;
  if (*((_DWORD *)DerivedStorage + 45878) && *v13 == 30568)
  {
    DerivedStorage[22941] = (const void *)sub_DDEFC();
    if (sub_D1C38(0x18u, 6))
    {
      int v98 = sub_D1C7C(0x18u);
      __uint64_t v99 = sub_DDEFC();
      __uint64_t v100 = (const char *)sub_D1CB0(6);
      int v101 = *((_DWORD *)DerivedStorage + 45893);
      int64_t v102 = (unsigned char *)DerivedStorage[22941] - (unsigned char *)DerivedStorage[22940];
      if (v98)
      {
        printf("%lld %d AVE %s: FIG: %d (%d) AVE_HEVC_VerifyImageBuffer took %lld us\n", v99, 24, v100, v101, *((_DWORD *)DerivedStorage + 45861), v102);
        __uint64_t v103 = sub_DDEFC();
        __uint64_t v104 = (const char *)sub_D1CB0(6);
        __uint64_t v85 = v203;
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_HEVC_VerifyImageBuffer took %lld us", v103, 24, v104, *((_DWORD *)DerivedStorage + 45893), *((_DWORD *)DerivedStorage + 45861), (unsigned char *)DerivedStorage[22941] - (unsigned char *)DerivedStorage[22940]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_HEVC_VerifyImageBuffer took %lld us", v99, 24, v100, v101, *((_DWORD *)DerivedStorage + 45861), v102);
      }
    }
    DerivedStorage[22940] = (const void *)sub_DDEFC();
  }
LABEL_138:
  *int v13 = 30568;
  int v208 = 0;
  long long v217 = 0u;
  long long v218 = 0u;
  long long v219 = 0u;
  long long v220 = 0u;
  memset(v221, 0, sizeof(v221));
  long long v222 = 0u;
  memset(v223, 0, sizeof(v223));
  long long v224 = 0u;
  long long v225 = 0u;
  long long v226 = 0u;
  long long v227 = 0u;
  long long v210 = 0u;
  long long v211 = 0u;
  long long v212 = 0u;
  long long v213 = 0u;
  long long v214 = 0u;
  uint64_t v215 = 0;
  bzero(&v237, 0x4AF8uLL);
  if (theDict)
  {
    CFDataRef Value = CFDictionaryGetValue(theDict, @"ResetRCState");
    if (*((_DWORD *)DerivedStorage + 45891) == 26 && (*((unsigned char *)DerivedStorage + 1876) & 0xE0) == 0)
    {
      __uint64_t v106 = CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_ReducedResolutionSourceFrame);
      if (v106 && sub_D1C38(0x16u, 6))
      {
        int v119 = sub_D1C7C(0x16u);
        __uint64_t v120 = sub_DDEFC();
        int v121 = (const char *)sub_D1CB0(6);
        if (v119)
        {
          printf("%lld %d AVE %s: FIG: %p: use scaled source for LRME, %p\n", v120, 22, v121, *DerivedStorage, v106);
          __uint64_t v122 = sub_DDEFC();
          CMTime v123 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: %p: use scaled source for LRME, %p", v122, 22, v123, *DerivedStorage, v106);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: %p: use scaled source for LRME, %p", v120, 22, v121, *DerivedStorage, v106);
        }
      }
    }
    else
    {
      __uint64_t v106 = 0;
    }
    if (Value && CFEqual(Value, kCFBooleanTrue))
    {
      __uint64_t v85 = sub_DDEFC();
      __uint64_t v209 = v85;
      sub_B490C((void **)DerivedStorage[3], &v209);
    }
    else
    {
      __uint64_t v85 = v203;
    }
  }
  else
  {
    __uint64_t v106 = 0;
  }
  uint64_t v216 = v205;
  *((void *)&v217 + 1) = 0;
  *(void *)&long long v218 = v234;
  *((void *)&v218 + 1) = v106;
  *(_OWORD *)&v221[1] = v229;
  v221[3] = v230;
  *(void *)&long long v222 = v201;
  *((void *)&v222 + 1) = v23;
  v223[0] = v199;
  *(_OWORD *)&v223[1] = v228;
  BYTE8(v224) = *((unsigned char *)DerivedStorage + 183545);
  *(void *)&long long v225 = v85;
  DWORD2(v225) = *((_DWORD *)DerivedStorage + 45899);
  if (*((_DWORD *)DerivedStorage + 4701) == 2)
  {
    sub_CBF38(DerivedStorage[22955], (int *)&v228);
    sub_D196C(v234, &v210);
    sub_5734(DerivedStorage[22957], *((_DWORD *)DerivedStorage + 45899), *((_DWORD *)DerivedStorage + 45861), (double *)&v210);
    if (*((int *)DerivedStorage + 45891) >= 16 && (*((unsigned char *)DerivedStorage + 1876) & 0xE0) != 0)
    {
      int v204 = DerivedStorage;
      int v206 = v1;
      if (*((void *)&v214 + 1) == 0x1FFFFFFFFLL && sub_D1C38(0x16u, 5))
      {
        int v107 = sub_D1C7C(0x16u);
        __uint64_t v108 = sub_DDEFC();
        __uint64_t v109 = (const char *)sub_D1CB0(5);
        if (v107)
        {
          printf("%lld %d AVE %s: FIG: MCTF Ban0Modulation Enabled, but Band0Strength is missing!\n", v108, 22, v109);
          __uint64_t v110 = sub_DDEFC();
          int v195 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: MCTF Ban0Modulation Enabled, but Band0Strength is missing!", v110, 22, v195);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: MCTF Ban0Modulation Enabled, but Band0Strength is missing!", v108, 22, v109);
        }
      }
      if ((HIDWORD(v214) + 1) < 2 || DWORD2(v214) == -1)
      {
        int v150 = *((unsigned __int8 *)v13 + 2076);
        if (*((double *)&v212 + 1) == 0.0 || *((double *)&v211 + 1) == 0.0 || *(double *)&v212 == 0.0)
        {
          if (sub_D1C38(0x1Cu, 7))
          {
            int v162 = sub_D1C7C(0x1Cu);
            __uint64_t v163 = sub_DDEFC();
            long long v164 = (const char *)sub_D1CB0(7);
            unsigned int v165 = v13[1];
            if (v162)
            {
              printf("%lld %d AVE %s: FIG: F %d ISP meta data is missing!\n", v163, 28, v164, v165);
              __uint64_t v166 = sub_DDEFC();
              __uint64_t v198 = (const char *)sub_D1CB0(7);
              syslog(3, "%lld %d AVE %s: FIG: F %d ISP meta data is missing!", v166, 28, v198, v13[1]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: F %d ISP meta data is missing!", v163, 28, v164, v165);
            }
          }
          DWORD2(v214) = 255;
          char v170 = *((unsigned char *)v13 + 2076);
        }
        else
        {
          int v151 = sub_C7604();
          BOOL v152 = v13[31] == 26 && v214 == 1587;
          double v153 = *((double *)&v212 + 1) * *((double *)&v211 + 1) * *(double *)&v212 / (*(double *)&v213 * 16777216.0);
          int v154 = v152;
          BOOL v155 = v215 == 2;
          if ((v154 & v155) != 0) {
            double v156 = 21.0;
          }
          else {
            double v156 = 32.0;
          }
          if ((v154 & v155) != 0) {
            double v157 = 16.0;
          }
          else {
            double v157 = 24.0;
          }
          if (sub_D1C38(0x16u, 8))
          {
            int v158 = sub_D1C7C(0x16u);
            __uint64_t v159 = sub_DDEFC();
            long long v160 = (const char *)sub_D1CB0(8);
            if (v158)
            {
              printf("%lld %d AVE %s: %s:%d %d %d %d %d, %d.%d %d.%d\n", v159, 22, v160, "AVE_HEVC_Encode", 12596, v13[1], v13[31], v214, v215, (int)v156, (int)(v156 * 100.0) % 100, (int)v157, (int)(v157 * 100.0) % 100);
              __uint64_t v161 = sub_DDEFC();
              int v197 = sub_D1CB0(8);
              syslog(3, "%lld %d AVE %s: %s:%d %d %d %d %d, %d.%d %d.%d", v161, 22, v197, "AVE_HEVC_Encode");
            }
            else
            {
              syslog(3, "%lld %d AVE %s: %s:%d %d %d %d %d, %d.%d %d.%d", v159, 22, v160, "AVE_HEVC_Encode");
            }
          }
          int v167 = v151[333];
          double v168 = (double)v167;
          if (v167 <= 0) {
            double v168 = v156;
          }
          int v169 = 127;
          if (v153 >= v168)
          {
            char v170 = 1;
          }
          else
          {
            char v170 = *((unsigned char *)v13 + 2076) != 0 && v153 >= v157;
            if (v170) {
              int v169 = 127;
            }
            else {
              int v169 = 255;
            }
          }
          DWORD2(v214) = v169;
          *((unsigned char *)v13 + 2076) = v170;
        }
        if (v170)
        {
          int v171 = *((_DWORD *)v204 + 470);
          int v172 = *((_DWORD *)v204 + 471);
          uint64_t v173 = sub_C7604();
          if (*((unsigned char *)v204 + 1772) || (int v174 = *((_DWORD *)v204 + 57), v174 <= 0)) {
            int v174 = (int)sub_CC584(*((void *)v13 + 25));
          }
          if (v150)
          {
            signed int v175 = v173[334];
            BOOL v176 = v175 <= 0;
            int v177 = 285600;
          }
          else
          {
            signed int v175 = v173[335];
            BOOL v176 = v175 <= 0;
            int v177 = 244800;
          }
          if (v176) {
            signed int v178 = v177;
          }
          else {
            signed int v178 = v175;
          }
          signed int v179 = ((v172 + 31) >> 5) * ((v171 + 31) >> 5) * v174;
          if (v179 > v178)
          {
            DWORD2(v214) = 255;
            *((unsigned char *)v13 + 2076) = 0;
          }
          if (sub_D1C38(0x1Cu, 8))
          {
            int v180 = v150;
            int v181 = sub_D1C7C(0x1Cu);
            __uint64_t v202 = sub_DDEFC();
            int v200 = (const char *)sub_D1CB0(8);
            if (*((unsigned char *)v13 + 2076)) {
              uint64_t v182 = "Enable ";
            }
            else {
              uint64_t v182 = "Disable";
            }
            int v183 = sub_CC5A0(*((void *)v13 + 25));
            double v184 = sub_CC57C(*((void *)v13 + 25));
            if (v181)
            {
              printf("%lld %d AVE %s: %s MCTF. frameRate: %d cnt %d (%.2f), pixel rate %d threshold %d (prev set: %d)\n", v202, 28, v200, v182, v174, v183, v184, v179, v178, v180);
              __uint64_t v185 = sub_DDEFC();
              sub_D1CB0(8);
              sub_CC5A0(*((void *)v13 + 25));
              sub_CC57C(*((void *)v13 + 25));
              syslog(3, "%lld %d AVE %s: %s MCTF. frameRate: %d cnt %d (%.2f), pixel rate %d threshold %d (prev set: %d)", v185, 28);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: %s MCTF. frameRate: %d cnt %d (%.2f), pixel rate %d threshold %d (prev set: %d)", v202, 28);
            }
          }
        }
      }
      uint64_t DerivedStorage = v204;
      uint64_t v1 = v206;
      if (*((int *)v204 + 57) >= 1 && HIDWORD(v214) && SDWORD2(v214) <= 254)
      {
        int v186 = *((_DWORD *)v204 + 470);
        int v187 = *((_DWORD *)v204 + 471);
        unsigned int v188 = sub_CC57C(*((void *)v13 + 25));
        unsigned int v189 = ((v187 + 31) >> 5) * ((v186 + 31) >> 5) * v188;
        if (*((unsigned char *)v204 + 1772))
        {
          if (v189 < 0x68971) {
            goto LABEL_160;
          }
        }
        else if (v189 <= 0x45BA0)
        {
          goto LABEL_160;
        }
        if (sub_D1C38(0x16u, 5))
        {
          int v190 = sub_D1C7C(0x16u);
          __uint64_t v191 = sub_DDEFC();
          int v192 = (const char *)sub_D1CB0(5);
          if (v190)
          {
            printf("%lld %d AVE %s: FIG: MCTF unsupported fps %d for %dx%d. VFR %d. Band0Mod %d, %d\n", v191, 22, v192, v188, v186, v187, *((unsigned __int8 *)v204 + 1772), HIDWORD(v214), DWORD2(v214));
            __uint64_t v191 = sub_DDEFC();
            sub_D1CB0(5);
          }
          syslog(3, "%lld %d AVE %s: FIG: MCTF unsupported fps %d for %dx%d. VFR %d. Band0Mod %d, %d", v191, 22);
          uint64_t DerivedStorage = v204;
        }
      }
    }
  }
  else
  {
    unsigned int v111 = ((*((_DWORD *)DerivedStorage + 471) + 31) >> 5)
         * ((*((_DWORD *)DerivedStorage + 470) + 31) >> 5);
    if (v111 >> 5 < 0xFF)
    {
      if (v111 < 0x7F8) {
        char v112 = 11;
      }
      else {
        char v112 = 16;
      }
    }
    else
    {
      char v112 = 21;
    }
    char *v21 = v112;
    DWORD2(v214) = 127;
  }
LABEL_160:
  v223[3] = &v210;
  if (v21[514] && (int)v13[31] >= 3 && (*((_DWORD *)DerivedStorage + 57) - 1) <= 0x3B)
  {
    int v208 = 10;
    if (sub_BDAA0(theDict, &DerivedStorage[80 * v13[386] + 22963], &v208))
    {
      if (*((_DWORD *)DerivedStorage + 57) == 60)
      {
        unsigned int v118 = v13[388];
        if (v118 != -1 && v118 + 1 == v13[1])
        {
          *(void *)&long long v226 = &DerivedStorage[80 * (v13[386] == 0) + 22963];
          DWORD2(v226) = v13[387];
        }
      }
    }
    else
    {
      __int16 v236 = 0;
      uint64_t v235 = 0;
      sub_DD92C((char *)&v235, 10, "%d %d", v113, v114, v115, v116, v117, v13[33]);
      sub_BDA14((unsigned int *)&DerivedStorage[80 * v13[386] + 22963], v208, 47, 6, (uint64_t)&v235, 0, v124, v125);
      unsigned int v126 = v13[386];
      *(void *)&long long v226 = &DerivedStorage[80 * v126 + 22963];
      int v127 = v208;
      DWORD2(v226) = v208;
      if (*((_DWORD *)DerivedStorage + 57) == 60)
      {
        v13[386] = v126 == 0;
        v13[387] = v127;
        v13[388] = v13[1];
      }
    }
  }
  *(void *)&long long v220 = 0;
  BYTE8(v220) = *((unsigned char *)v13 + 107);
  if (*((unsigned char *)v13 + 106))
  {
    CFDictionaryRef v128 = (const __CFDictionary *)CMGetAttachment(v234, kFigCaptureSampleBufferAttachmentKey_MetadataDictionary, 0);
    if (v128) {
      *(void *)&long long v220 = CFDictionaryCreateCopy(0, v128);
    }
  }
  sub_96A9C((uint64_t)DerivedStorage, theDict, (int *)&v237, (uint64_t)&v216);
  if (!*((_DWORD *)v21 + 267)) {
    sub_98C7C((uint64_t)DerivedStorage, (uint64_t)&v237, *(double *)v223[3]);
  }
  *(void *)&long long v224 = &v237;
  if (v13[39] && *((void *)v13 + 18) && sub_99388((uint64_t)DerivedStorage, &v229))
  {
    if (sub_D1C38(3u, 4))
    {
      int v129 = sub_D1C7C(3u);
      __uint64_t v130 = sub_DDEFC();
      uint64_t v131 = (const char *)sub_D1CB0(4);
      if (v129)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_MultipassDataFetch failed.\n", v130, 3, v131, "AVE_HEVC_Encode", 12818, "err == noErr");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_MultipassDataFetch failed.");
    }
    goto LABEL_36;
  }
  DWORD2(v227) = v13[1];
  HIDWORD(v227) = v3;
  uint64_t v132 = sub_B5104((void **)DerivedStorage[3], (uint64_t)&v216);
  uint64_t v45 = v132;
  if (v132)
  {
    if (v132 != -536870173)
    {
      if (sub_D1C38(3u, 4))
      {
        int v140 = sub_D1C7C(3u);
        __uint64_t v141 = sub_DDEFC();
        __uint64_t v142 = (const char *)sub_D1CB0(4);
        if (v140)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Process failed.\n", v141, 3, v142, "AVE_HEVC_Encode", 12835, "err == noErr");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Process failed.");
      }
      goto LABEL_36;
    }
    if (sub_D1C38(0x16u, 5))
    {
      __uint64_t v133 = v1;
      int v134 = v13;
      unsigned int v135 = DerivedStorage;
      int v136 = sub_D1C7C(0x16u);
      __uint64_t v137 = sub_DDEFC();
      __uint64_t v138 = (const char *)sub_D1CB0(5);
      if (v136)
      {
        printf("%lld %d AVE %s: FIG: device returned kIOReturnNoPower. reject the frame\n", v137, 22, v138);
        __uint64_t v139 = sub_DDEFC();
        int v196 = (const char *)sub_D1CB0(5);
        syslog(3, "%lld %d AVE %s: FIG: device returned kIOReturnNoPower. reject the frame", v139, 22, v196);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: device returned kIOReturnNoPower. reject the frame", v137, 22, v138);
      }
      uint64_t DerivedStorage = v135;
      int v13 = v134;
      uint64_t v1 = v133;
    }
  }
  if (v1) {
    *v1 |= 1u;
  }
  if (v13[18])
  {
    *((void *)v13 + 11) = sub_DDEFC();
    if (sub_D1C38(0x18u, 6))
    {
      int v143 = sub_D1C7C(0x18u);
      __uint64_t v144 = sub_DDEFC();
      __uint64_t v145 = (const char *)sub_D1CB0(6);
      unsigned int v146 = v13[33];
      uint64_t v147 = *((void *)v13 + 11) - *((void *)v13 + 10);
      if (v143)
      {
        printf("%lld %d AVE %s: FIG: %d (%d) EncodeFrame took %lld us\n", v144, 24, v145, v146, v13[1], v147);
        __uint64_t v148 = sub_DDEFC();
        __uint64_t v149 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) EncodeFrame took %lld us", v148, 24, v149, v13[33], v13[1], *((void *)v13 + 11) - *((void *)v13 + 10));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) EncodeFrame took %lld us", v144, 24, v145, v146, v13[1], v147);
      }
    }
  }
LABEL_89:
  if (sub_D1C38(0x14u, 7))
  {
    int v72 = sub_D1C7C(0x14u);
    __uint64_t v73 = sub_DDEFC();
    __uint64_t v74 = (const char *)sub_D1CB0(7);
    if (v72)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_HEVCEncodeFrame err 0x%08x\n", v73, 20, v74, v45);
      __uint64_t v75 = sub_DDEFC();
      __uint64_t v194 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_HEVCEncodeFrame err 0x%08x", v75, 20, v194, v45);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_HEVCEncodeFrame err 0x%08x", v73, 20, v74, v45);
    }
  }
  if (v233 && v234) {
    CVPixelBufferRelease(v234);
  }
  if (DerivedStorage) {
    ++v13[1];
  }
  return v45;
}

uint64_t sub_8CABC(uint64_t a1, CVPixelBufferRef *a2, unsigned char *a3, _DWORD *a4, _DWORD *a5, int a6)
{
  unsigned int v11 = (int *)(a1 + 183420);
  __uint64_t v12 = (_DWORD *)(a1 + 103092);
  uint64_t v13 = a1 + 17880;
  memset(v54, 0, sizeof(v54));
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  memset(v49, 0, sizeof(v49));
  unsigned int v14 = *(_DWORD *)(a1 + 184996);
  if (!v14) {
    unsigned int v14 = *(_DWORD *)(a1 + 1880);
  }
  unsigned int v43 = v14;
  int v15 = *(_DWORD *)(a1 + 185000);
  if (!v15) {
    int v15 = *(_DWORD *)(a1 + 1884);
  }
  int v16 = *(_DWORD *)(a1 + 183560);
  int v17 = *(_DWORD *)(a1 + 183564);
  int v44 = v15;
  int v45 = v16;
  int v18 = *(_DWORD *)(a1 + 18760);
  int v19 = *(_DWORD *)(a1 + 1876);
  int v46 = v17;
  int v47 = v19;
  int v48 = v18;
  LOBYTE(v49[0]) = *(unsigned char *)(a1 + 18849);
  int v20 = *(_DWORD *)(a1 + 18868);
  DWORD1(v49[0]) = *(_DWORD *)(a1 + 292);
  DWORD2(v49[1]) = v20;
  BYTE12(v49[1]) = *(_DWORD *)(a1 + 264) > 0;
  LODWORD(v50) = *(_DWORD *)(a1 + 18804);
  v54[27] = v17 > 10;
  if (*(unsigned char *)(a1 + 103116)) {
    *(_OWORD *)((char *)v49 + 8) = *(_OWORD *)(a1 + 103120);
  }
  uint64_t v21 = sub_E2B0(&v43, a2, (CVPixelBufferPoolRef *)(a1 + 183696));
  if (v21) {
    return v21;
  }
  *a3 = v54[24];
  int v22 = HIDWORD(v53);
  *a4 = DWORD2(v53);
  *a5 = v22;
  uint64_t v23 = v11[36];
  if ((int)v23 < 11)
  {
    *(_WORD *)(v13 + 456) = v54[25];
    goto LABEL_13;
  }
  *(_WORD *)(v13 + 456) = v54[25];
  unsigned int v24 = v43;
  char v25 = BYTE8(v50) - 1;
  char v26 = 1;
  *(_WORD *)(v13 + 460) = 1 << (BYTE8(v50) - 1);
  *(_DWORD *)(v13 + 464) = 65537 << v25;
  if (v24 == *(_DWORD *)(a1 + 1880))
  {
    if (v44 != *(_DWORD *)(a1 + 1884))
    {
      char v26 = 1;
      goto LABEL_14;
    }
LABEL_13:
    char v26 = v54[26];
  }
LABEL_14:
  uint64_t v27 = (_DWORD *)(a1 + 18872);
  *(unsigned char *)(v13 + 974) = v26;
  int v28 = HIDWORD(v51);
  *(unsigned char *)(v13 + 132) = (HIDWORD(v51) & 0xFFFFFFFE) == 2;
  if (v28 == 3) {
    *(unsigned char *)(v13 + 459) = BYTE4(v52);
  }
  if (LOBYTE(v49[0]))
  {
    int v29 = v53;
    *uint64_t v27 = *(_DWORD *)v54;
    *(_DWORD *)(a1 + 18876) = v29;
    *(void *)&long long v30 = __PAIR64__(*(unsigned int *)&v54[16], DWORD1(v53));
    *((void *)&v30 + 1) = *(void *)&v54[8];
    *(_OWORD *)(a1 + 18880) = v30;
    *(_DWORD *)(a1 + 18896) = *(_DWORD *)&v54[20];
  }
  if (!a6) {
    goto LABEL_33;
  }
  unsigned int v31 = DWORD1(v50);
  *(_DWORD *)(v13 + 876) = DWORD1(v50);
  if (*(unsigned char *)(v13 + 969))
  {
LABEL_20:
    int v32 = v51;
    int v33 = DWORD2(v50);
    *__uint64_t v12 = v51;
    *(_DWORD *)(v13 + 40) = v33;
    *(unsigned char *)uint64_t v13 = v28 != 1;
    *(unsigned char *)(v13 + 889) = 1;
    if (v33 == 10)
    {
      *(unsigned char *)(a1 + 20442) = 0;
      *(unsigned char *)(a1 + 102594) = 0;
    }
    if (v32 == 2)
    {
      *(unsigned char *)(a1 + 20443) = 1;
      *(unsigned char *)(a1 + 102595) = 1;
    }
    else if (v32 == 3)
    {
      *(_WORD *)(a1 + 20443) = 0;
      *(_WORD *)(a1 + 102595) = 0;
      if (*(_DWORD *)(a1 + 292) == 37)
      {
        *(unsigned char *)(v13 + 982) = 1;
        *(unsigned char *)(a1 + 254) = 0;
      }
    }
LABEL_33:
    if (v11[6])
    {
      if (*(_DWORD *)(a1 + 20364) != DWORD1(v50) && sub_D1C38(0x16u, 4))
      {
        int v39 = sub_D1C7C(0x16u);
        __uint64_t v40 = sub_DDEFC();
        int v41 = (const char *)sub_D1CB0(4);
        if (v39)
        {
          printf("%lld %d AVE %s: %s:%d pixel format change %d %d 0x%x 0x%x\n", v40, 22, v41, "AVE_HEVC_VerifyImageBuffer", 9367, v11[38], v11[6], v27[373], DWORD1(v50));
          __uint64_t v40 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d pixel format change %d %d 0x%x 0x%x", v40, 22);
      }
      return 0;
    }
    else
    {
      uint64_t v21 = 0;
      *(_DWORD *)(a1 + 20364) = DWORD1(v50);
    }
    return v21;
  }
  unsigned int v34 = v12[11] + 8;
  if (v34 <= v12[12] + 8) {
    unsigned int v34 = v12[12] + 8;
  }
  uint64_t v35 = sub_EF00(v23, v11[35], *(unsigned int *)(a1 + 1876), 1, *(unsigned int *)(a1 + 19468), *(unsigned int *)(a1 + 19472), *(unsigned int *)(a1 + 1880), *(unsigned int *)(a1 + 1884), v34, *v11, v31 | 0x100000000, *(void *)a1);
  if (!v35)
  {
    int v28 = HIDWORD(v51);
    goto LABEL_20;
  }
  uint64_t v21 = v35;
  if (sub_D1C38(3u, 4))
  {
    int v36 = sub_D1C7C(3u);
    __uint64_t v37 = sub_DDEFC();
    uint64_t v38 = (const char *)sub_D1CB0(4);
    if (v36)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: %s:%d AVE_UpdatePixelBufferDict failed.\n", v37, 3, v38, "AVE_HEVC_VerifyImageBuffer", 9322, "err == noErr", "AVE_HEVC_VerifyImageBuffer", 9322);
      __uint64_t v37 = sub_DDEFC();
      sub_D1CB0(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: %s:%d AVE_UpdatePixelBufferDict failed.", v37, 3);
  }
  return v21;
}

void sub_8CF94(uint64_t a1, __CVBuffer *a2)
{
  uint64_t v4 = a1 + 103116;
  if (sub_D1C38(0x14u, 7))
  {
    int v5 = sub_D1C7C(0x14u);
    __uint64_t v6 = sub_DDEFC();
    uint64_t v7 = (const char *)sub_D1CB0(7);
    if (v5)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_UpdateCropParams\n", v6, 20, v7);
      __uint64_t v8 = sub_DDEFC();
      char v26 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_UpdateCropParams", v8, 20, v26);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_UpdateCropParams", v6, 20, v7);
    }
  }
  if (*(unsigned char *)v4)
  {
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
    __uint64_t v10 = sub_D7E18(PixelFormatType);
    if (v10)
    {
      int v11 = *((_DWORD *)v10 + 3);
      *(_DWORD *)(a1 + 103092) = v11;
    }
    else
    {
      int v11 = *(_DWORD *)(a1 + 103092);
    }
    int v13 = v11 != 3 && v11 != 0;
    int v14 = v11 == 1;
    int v15 = *(_DWORD *)(v4 + 12);
    if (v15)
    {
      if (v11 == 1) {
        int v16 = 2;
      }
      else {
        int v16 = 1;
      }
      unsigned int v17 = ((v15 + v16 - 1) & ~v14) >> v14;
      *(_DWORD *)(v4 + 12) = v17;
    }
    else
    {
      unsigned int v17 = 0;
    }
    int v18 = *(_DWORD *)(v4 + 16);
    if (v18)
    {
      unsigned int v19 = ((v18 + v14) & ~v14) >> v14;
      *(_DWORD *)(v4 + 16) = v19;
    }
    else
    {
      unsigned int v19 = 0;
    }
    unsigned int v20 = *(_DWORD *)(v4 + 4);
    if (v20)
    {
      unsigned int v20 = ((v20 + v13) & ~v13) >> v13;
      *(_DWORD *)(v4 + 4) = v20;
    }
    int v21 = *(_DWORD *)(v4 + 8);
    if (v21)
    {
      unsigned int v22 = ((v21 + v13) & ~v13) >> v13;
      *(_DWORD *)(v4 + 8) = v22;
    }
    else
    {
      unsigned int v22 = 0;
    }
    if (*(_DWORD *)(a1 + 18900) || *(_DWORD *)(a1 + 18436) >= 2u)
    {
      *(unsigned char *)(a1 + 102232) = *(unsigned char *)v4;
      *(_DWORD *)(a1 + 102244) = v17;
      *(_DWORD *)(a1 + 102248) = v19;
      *(_DWORD *)(a1 + 102236) = v20;
      *(_DWORD *)(a1 + 102240) = v22;
    }
    if (sub_D1C38(0x16u, 7))
    {
      int v23 = sub_D1C7C(0x16u);
      __uint64_t v24 = sub_DDEFC();
      char v25 = (const char *)sub_D1CB0(7);
      if (v23)
      {
        printf("%lld %d AVE %s: FIG: conf_win_top_offset = %d conf_win_bottom_offset %d conf_win_left_offset = %d conf_win_right_offset %d\n", v24, 22, v25, *(_DWORD *)(v4 + 12), *(_DWORD *)(v4 + 16), *(_DWORD *)(v4 + 4), *(_DWORD *)(v4 + 8));
        __uint64_t v24 = sub_DDEFC();
        sub_D1CB0(7);
      }
      syslog(3, "%lld %d AVE %s: FIG: conf_win_top_offset = %d conf_win_bottom_offset %d conf_win_left_offset = %d conf_win_right_offset %d", v24);
    }
  }
}

double sub_8D1F8(uint64_t a1, int a2)
{
  if (sub_D1C38(0x14u, 7))
  {
    int v5 = sub_D1C7C(0x14u);
    __uint64_t v6 = sub_DDEFC();
    uint64_t v7 = (const char *)sub_D1CB0(7);
    if (v5)
    {
      printf("%lld %d AVE %s: AVE ENTER AVE_SetEncoderBasedOnFirstFrame\n", v6, 20, v7);
      __uint64_t v8 = sub_DDEFC();
      __uint64_t v12 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: AVE ENTER AVE_SetEncoderBasedOnFirstFrame", v8, 20, v12);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AVE ENTER AVE_SetEncoderBasedOnFirstFrame", v6, 20, v7);
    }
  }
  unsigned int v9 = *(_DWORD *)(a1 + 292);
  BOOL v11 = v9 <= 0x25 && ((1 << v9) & 0x2000100002) != 0 || v9 == 10000;
  if (!v11 && *(_DWORD *)(a1 + 264) == 1 && a2 && !*(unsigned char *)(a1 + 18849))
  {
    if (*(unsigned char *)(a1 + 18851))
    {
      *(_DWORD *)(a1 + 20372) = 0;
      *(_DWORD *)(a1 + 103088) = 0;
      *(void *)(a1 + 18016) = 0x100000000;
      *(_DWORD *)(a1 + 18052) = 2;
      *(void *)&double result = 0x900000001;
      *(void *)(a1 + 18808) = 0x900000001;
      *(unsigned char *)(a1 + 103260) = 1;
    }
  }
  return result;
}

uint64_t sub_8D33C(const void **a1)
{
  int v431 = a1 + 23145;
  int v2 = (char *)a1 + 183420;
  int v3 = (unsigned __int16 *)(a1 + 2234);
  __uint64_t v430 = sub_C7604();
  if (sub_D1C38(0x14u, 7))
  {
    int v4 = sub_D1C7C(0x14u);
    __uint64_t v5 = sub_DDEFC();
    __uint64_t v6 = (const char *)sub_D1CB0(7);
    if (v4)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_ValidateEncoderParameters\n", v5, 20, v6);
      __uint64_t v7 = sub_DDEFC();
      int v386 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_ValidateEncoderParameters", v7, 20, v386);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_ValidateEncoderParameters", v5, 20, v6);
    }
  }
  __uint64_t v8 = (_WORD *)((char *)a1 + 137925);
  unsigned int v9 = (unsigned int *)(a1 + 12817);
  if (*((int *)v2 + 36) < 16 || *((unsigned char *)v3 + 977) || *(void *)(v2 + 164) || !*((_DWORD *)v431 + 27))
  {
    *((_DWORD *)a1 + 469) &= 0xFFFFFF1F;
    *((unsigned char *)v3 + 2338) = 0;
    if (*(void *)(v2 + 164))
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v10 = sub_D1C7C(0x16u);
        __uint64_t v11 = sub_DDEFC();
        __uint64_t v12 = (const char *)sub_D1CB0(5);
        if (v10)
        {
          printf("%lld %d AVE %s: FIG: MCTF is not supported for Multipass\n", v11, 22, v12);
          __uint64_t v13 = sub_DDEFC();
          __uint64_t v387 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: MCTF is not supported for Multipass", v13, 22, v387);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: MCTF is not supported for Multipass", v11, 22, v12);
        }
      }
    }
  }
  if (*((unsigned char *)v3 + 517))
  {
    if (*((unsigned char *)v3 + 516))
    {
      if (sub_D1C38(3u, 4))
      {
        int v14 = sub_D1C7C(3u);
        __uint64_t v15 = sub_DDEFC();
        int v16 = (const char *)sub_D1CB0(4);
        if (v14)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: encoderPrivateStorage->VideoParams.bMultiViewDepth = %d and encoderPrivateStorage->VideoParams.bMultiViewDisparity = %d -> fail.\n", v15, 3, v16, "AVE_ValidateEncoderParameters", 7699, "false", *((unsigned __int8 *)v3 + 517), *((unsigned __int8 *)v3 + 516));
          __uint64_t v15 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: encoderPrivateStorage->VideoParams.bMultiViewDepth = %d and encoderPrivateStorage->VideoParams.bMultiViewDisparity = %d -> fail.", v15);
      }
      return 4294954394;
    }
  }
  else if (!*((unsigned char *)v3 + 516))
  {
    goto LABEL_28;
  }
  *((unsigned char *)a1 + 245) = 0;
  *((unsigned char *)a1 + 247) = 0;
  *((_DWORD *)a1 + 442) = 0;
  *((_DWORD *)a1 + 65) = 0;
  *((unsigned char *)v3 + 478) = 0;
  *((_DWORD *)v3 + 229) = 0;
  *((unsigned char *)a1 + 109577) = 0;
  *__uint64_t v8 = 0;
  *((unsigned char *)a1 + 120556) = 0;
  *((unsigned char *)a1 + 138594) = 0;
  *(_DWORD *)((char *)a1 + 249) = 0;
  *(_DWORD *)((char *)a1 + 255) = 0;
  if (*((int *)a1 + 462) <= -13) {
    *((_DWORD *)a1 + 462) = -6 * *((_DWORD *)a1 + 25784);
  }
  if (*((int *)a1 + 463) <= -13) {
    *((_DWORD *)a1 + 463) = 48;
  }
  if (*((int *)a1 + 460) <= -13) {
    *((_DWORD *)a1 + 460) = -6 * *((_DWORD *)a1 + 25784);
  }
  if (*((int *)a1 + 461) <= -13) {
    *((_DWORD *)a1 + 461) = 48;
  }
LABEL_28:
  int v17 = *((_DWORD *)a1 + 49);
  if (!v17) {
    goto LABEL_42;
  }
  if (v17 == 4)
  {
    if (*(void *)(v2 + 164))
    {
      if (sub_D1C38(3u, 4))
      {
        int v22 = sub_D1C7C(3u);
        __uint64_t v23 = sub_DDEFC();
        __uint64_t v24 = (const char *)sub_D1CB0(4);
        if (v22)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: multiPassStorage and RC UsageMode = %d... not supported. fail\n", v23, 3, v24, "AVE_ValidateEncoderParameters", 7763, "false", *((_DWORD *)a1 + 73));
          __uint64_t v23 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: multiPassStorage and RC UsageMode = %d... not supported. fail", v23);
      }
      return 4294954384;
    }
    goto LABEL_41;
  }
  if (v17 != 20)
  {
LABEL_41:
    *((unsigned char *)a1 + 252) = 0;
    *((unsigned char *)v3 + 880) = 0;
    goto LABEL_42;
  }
  if (*((_DWORD *)a1 + 73) != 1)
  {
    if (sub_D1C38(3u, 4))
    {
      int v18 = sub_D1C7C(3u);
      __uint64_t v19 = sub_DDEFC();
      unsigned int v20 = (const char *)sub_D1CB0(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: Usage mode %d does not support eRCMode = 0x%x. Fail.\n", v19, 3, v20, "AVE_ValidateEncoderParameters", 7753, "false", *((_DWORD *)a1 + 73), *((_DWORD *)a1 + 49));
        __uint64_t v19 = sub_DDEFC();
        unsigned int v20 = (const char *)sub_D1CB0(4);
      }
      __uint64_t v426 = (const void *)*((unsigned int *)a1 + 73);
      uint64_t v427 = *((unsigned int *)a1 + 49);
      uint64_t v425 = 7753;
      v388 = v20;
      int v21 = "%lld %d AVE %s: %s:%d %s | FIG: Usage mode %d does not support eRCMode = 0x%x. Fail.";
LABEL_210:
      syslog(3, v21, v19, 3, v388, "AVE_ValidateEncoderParameters", v425, "false", v426, v427, v428);
      return 4294954394;
    }
    return 4294954394;
  }
LABEL_42:
  if ((*((_DWORD *)v2 + 433) & 0x80000000) != 0)
  {
    unsigned int v25 = *((_DWORD *)a1 + 73);
    if (v25 <= 0x26 && ((1 << v25) & 0x4000100002) != 0) {
      *int v3 = 0;
    }
  }
  unint64_t v26 = (unint64_t)a1[25];
  if ((v26 & 0x80000000) != 0)
  {
    a1[25] = (const void *)(v26 | 4);
    int v27 = *((_DWORD *)a1 + 486);
    if (v27 == 2)
    {
      int v28 = (int *)(a1 + 243);
      goto LABEL_58;
    }
  }
  else
  {
    int v27 = *((_DWORD *)a1 + 486);
  }
  int v28 = (int *)(a1 + 243);
  if (v27 <= 3) {
    goto LABEL_59;
  }
  if (sub_D1C38(0x16u, 5))
  {
    int v29 = sub_D1C7C(0x16u);
    __uint64_t v30 = sub_DDEFC();
    unsigned int v31 = (const char *)sub_D1CB0(5);
    if (v29)
    {
      printf("%lld %d AVE %s: FIG: too many B frames (%d) max is %d. -> will gracefully default to the internal max!\n", v30, 22, v31, *v28, 3);
      __uint64_t v30 = sub_DDEFC();
      unsigned int v31 = (const char *)sub_D1CB0(5);
    }
    syslog(3, "%lld %d AVE %s: FIG: too many B frames (%d) max is %d. -> will gracefully default to the internal max!", v30, 22, v31, *v28, 3);
    __uint64_t v8 = (_WORD *)((char *)a1 + 137925);
  }
LABEL_58:
  int v27 = 3;
  *int v28 = 3;
LABEL_59:
  int v32 = *((_DWORD *)a1 + 506);
  if (*((int *)v2 + 36) < 3)
  {
    unsigned int v33 = v32 & 0xFFFFFFFB;
  }
  else
  {
    if ((v32 & 4) == 0) {
      goto LABEL_65;
    }
    if (v27)
    {
      *((unsigned char *)v3 + 460) = 1;
      goto LABEL_65;
    }
    if (sub_D1C38(0x16u, 5))
    {
      int v50 = sub_D1C7C(0x16u);
      __uint64_t v51 = sub_DDEFC();
      long long v52 = (const char *)sub_D1CB0(5);
      if (v50)
      {
        printf("%lld %d AVE %s: FIG: AdaptiveB is set when BFrames not enabled -> will disable AdaptiveB\n", v51, 22, v52);
        __uint64_t v53 = sub_DDEFC();
        int v389 = (const char *)sub_D1CB0(5);
        syslog(3, "%lld %d AVE %s: FIG: AdaptiveB is set when BFrames not enabled -> will disable AdaptiveB", v53, 22, v389);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: AdaptiveB is set when BFrames not enabled -> will disable AdaptiveB", v51, 22, v52);
      }
    }
    unsigned int v33 = a1[253] & 0xFFFFFFFB;
  }
  *((_DWORD *)a1 + 506) = v33;
LABEL_65:
  if (!*((_DWORD *)v3 + 222))
  {
    double v34 = (double)*((int *)a1 + 48)
        / (double)(((*((_DWORD *)a1 + 470) + 15) >> 4) * ((*((_DWORD *)a1 + 471) + 15) >> 4))
        * 0.0133333333
        + -6.66666667;
    if (v34 < 0.0) {
      double v34 = 0.0;
    }
    double v35 = v34 + 0.5;
    BOOL v36 = v34 <= 20.0;
    double v37 = 20.5;
    if (v36) {
      double v37 = v35;
    }
    *((_DWORD *)v3 + 197) = v37;
    *((_DWORD *)v3 + 199) = v37;
  }
  int v38 = *((_DWORD *)v3 + 47);
  if (v38 >= 33)
  {
    if (sub_D1C38(3u, 4))
    {
      int v40 = sub_D1C7C(3u);
      __uint64_t v41 = sub_DDEFC();
      __uint64_t v42 = (const char *)sub_D1CB0(4);
      if (v40)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: too many slices (%d) max is %d for now (can be changed)\n", v41, 3, v42, "AVE_ValidateEncoderParameters", 7874, "encoderPrivateStorage->VideoParams.sSliceMap.iNum <= ((32) < (256) ? (32) : (256))", *((_DWORD *)v3 + 47), 32);
        __uint64_t v41 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: too many slices (%d) max is %d for now (can be changed)", v41);
    }
    return 4294954394;
  }
  if (!v38)
  {
    if (sub_D1C38(3u, 4))
    {
      int v43 = sub_D1C7C(3u);
      __uint64_t v44 = sub_DDEFC();
      int v45 = (const char *)sub_D1CB0(4);
      if (v43)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: Slices Per Frame = %d\n", v44, 3, v45, "AVE_ValidateEncoderParameters", 7875, "encoderPrivateStorage->VideoParams.sSliceMap.iNum != 0", *((_DWORD *)v3 + 47));
        __uint64_t v44 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: Slices Per Frame = %d", v44);
    }
    return 4294954394;
  }
  int v39 = *(_DWORD *)v2;
  if (*(int *)v2 > 1007)
  {
    if (v39 != 1308 && v39 != 1008) {
      goto LABEL_93;
    }
  }
  else if (v39 != 1 && v39 != 3)
  {
    goto LABEL_93;
  }
  if (*((unsigned char *)v3 + 898) && *((_DWORD *)a1 + 25784) >= 2u)
  {
    if (sub_D1C38(0x16u, 4))
    {
      int v46 = sub_D1C7C(0x16u);
      __uint64_t v47 = sub_DDEFC();
      int v48 = (const char *)sub_D1CB0(4);
      if (v46)
      {
        printf("%lld %d AVE %s: %s:%d %s | Unable to set bitdepth 10 for HEVC Profile that only supports bitdepth 8\n", v47, 22, v48, "AVE_ValidateEncoderParameters", 7886, "false");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | Unable to set bitdepth 10 for HEVC Profile that only supports bitdepth 8");
    }
    return 4294954394;
  }
LABEL_93:
  if (*((_DWORD *)a1 + 25638) > 1u) {
    goto LABEL_116;
  }
  if (*((unsigned char *)v3 + 898)) {
    int v49 = *((_DWORD *)a1 + 25784) + 8;
  }
  else {
    int v49 = *((_DWORD *)v3 + 12);
  }
  int v55 = *((_DWORD *)a1 + 25773);
  switch(v55)
  {
    case 0:
      int v56 = 1010;
LABEL_115:
      *((_DWORD *)a1 + 25638) = v56;
      *((_DWORD *)v3 + 632) = v56;
      break;
    case 2:
      int v56 = 1210;
      goto LABEL_115;
    case 3:
      if (v49 == 10) {
        int v56 = 1310;
      }
      else {
        int v56 = 1308;
      }
      goto LABEL_115;
  }
LABEL_116:
  if (*((unsigned char *)v3 + 804))
  {
    int v57 = *((_DWORD *)a1 + 73);
    if (v57 == 20 || v57 == 10000 || v57 == 37)
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v58 = sub_D1C7C(0x16u);
        __uint64_t v59 = sub_DDEFC();
        __uint64_t v60 = (const char *)sub_D1CB0(5);
        int v61 = *((_DWORD *)a1 + 73);
        if (v58)
        {
          printf("%lld %d AVE %s: FIG: usageMode = %d and bMultiReferenceP is true. cannot, set it to false.\n", v59, 22, v60, v61);
          __uint64_t v62 = sub_DDEFC();
          __uint64_t v390 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: usageMode = %d and bMultiReferenceP is true. cannot, set it to false.", v62, 22, v390, *((_DWORD *)a1 + 73));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: usageMode = %d and bMultiReferenceP is true. cannot, set it to false.", v59, 22, v60, v61);
        }
      }
      *((unsigned char *)v3 + 804) = 0;
    }
  }
  if (*((unsigned char *)v3 + 987)) {
    *((_DWORD *)a1 + 506) &= ~4u;
  }
  if (*((unsigned char *)a1 + 118487))
  {
    unsigned int v63 = *((_DWORD *)a1 + 73);
    if (v63 <= 0x25 && ((1 << v63) & 0x2000100002) != 0 || v63 == 10000)
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v64 = sub_D1C7C(0x16u);
        __uint64_t v65 = sub_DDEFC();
        __uint64_t v66 = (const char *)sub_D1CB0(5);
        int v67 = *((_DWORD *)a1 + 73);
        if (v64)
        {
          printf("%lld %d AVE %s: FIG: usageMode = %d and bIsLossless is true not supported. Set it to false.\n", v65, 22, v66, v67);
          __uint64_t v68 = sub_DDEFC();
          int v391 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: usageMode = %d and bIsLossless is true not supported. Set it to false.", v68, 22, v391, *((_DWORD *)a1 + 73));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: usageMode = %d and bIsLossless is true not supported. Set it to false.", v65, 22, v66, v67);
        }
      }
      *((unsigned char *)a1 + 118487) = 0;
    }
    if (*((_DWORD *)a1 + 49) != 3)
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v69 = sub_D1C7C(0x16u);
        __uint64_t v70 = sub_DDEFC();
        int v71 = (const char *)sub_D1CB0(5);
        int v72 = *((_DWORD *)a1 + 49);
        if (v69)
        {
          printf("%lld %d AVE %s: FIG: eRCMode = %d and bIsLossless is true not supported. Set eRCMode to FIXQP.\n", v70, 22, v71, v72);
          __uint64_t v73 = sub_DDEFC();
          int v392 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: eRCMode = %d and bIsLossless is true not supported. Set eRCMode to FIXQP.", v73, 22, v392, *((_DWORD *)a1 + 49));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: eRCMode = %d and bIsLossless is true not supported. Set eRCMode to FIXQP.", v70, 22, v71, v72);
        }
      }
      *((_DWORD *)a1 + 49) = 3;
    }
    if (*((unsigned char *)a1 + 244) || *((unsigned char *)a1 + 252))
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v74 = sub_D1C7C(0x16u);
        __uint64_t v75 = sub_DDEFC();
        unsigned int v76 = (const char *)sub_D1CB0(5);
        if (v74)
        {
          printf("%lld %d AVE %s: FIG: bEnableQPMod / bEnableQPModRefresh set and bIsLossless is true not supported. Set bEnableQPMod, bEnableQPModRefresh to false.\n", v75, 22, v76);
          __uint64_t v77 = sub_DDEFC();
          unsigned int v393 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: bEnableQPMod / bEnableQPModRefresh set and bIsLossless is true not supported. Set bEnableQPMod, bEnableQPModRefresh to false.", v77, 22, v393);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: bEnableQPMod / bEnableQPModRefresh set and bIsLossless is true not supported. Set bEnableQPMod, bEnableQPModRefresh to false.", v75, 22, v76);
        }
      }
      *((unsigned char *)a1 + 244) = 0;
      *((unsigned char *)a1 + 252) = 0;
      *((unsigned char *)a1 + 118414) = 0;
    }
    if (*((unsigned char *)a1 + 246))
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v78 = sub_D1C7C(0x16u);
        __uint64_t v79 = sub_DDEFC();
        int v80 = (const char *)sub_D1CB0(5);
        int v81 = *((unsigned __int8 *)a1 + 246);
        if (v78)
        {
          printf("%lld %d AVE %s: FIG: bEnableLamdaMod = %d and bIsLossless is true not supported. Set bEnableLamdaMod to false.\n", v79, 22, v80, v81);
          __uint64_t v82 = sub_DDEFC();
          v394 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: bEnableLamdaMod = %d and bIsLossless is true not supported. Set bEnableLamdaMod to false.", v82, 22, v394, *((unsigned __int8 *)a1 + 246));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: bEnableLamdaMod = %d and bIsLossless is true not supported. Set bEnableLamdaMod to false.", v79, 22, v80, v81);
        }
      }
      *((unsigned char *)a1 + 246) = 0;
    }
    a1[227] = 0;
    int v83 = -6 * *((_DWORD *)a1 + 25784);
    *((_DWORD *)a1 + 463) = v83;
    *((_DWORD *)a1 + 462) = v83;
    *((_DWORD *)a1 + 458) = v83;
    *((_DWORD *)a1 + 457) = v83;
    *((_DWORD *)a1 + 456) = v83;
    a1[230] = a1[231];
    if (*((_DWORD *)a1 + 480))
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v84 = sub_D1C7C(0x16u);
        __uint64_t v85 = sub_DDEFC();
        int v86 = (const char *)sub_D1CB0(5);
        int v87 = *((_DWORD *)a1 + 480);
        if (v84)
        {
          printf("%lld %d AVE %s: FIG: EnableSelStatsFlags = %d and bIsLossless is true not supported. Forcing EnableSelStatsFlags to STATISTICS_DISABLED.\n", v85, 22, v86, v87);
          __uint64_t v88 = sub_DDEFC();
          int v395 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: EnableSelStatsFlags = %d and bIsLossless is true not supported. Forcing EnableSelStatsFlags to STATISTICS_DISABLED.", v88, 22, v395, *((_DWORD *)a1 + 480));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: EnableSelStatsFlags = %d and bIsLossless is true not supported. Forcing EnableSelStatsFlags to STATISTICS_DISABLED.", v85, 22, v86, v87);
        }
      }
      *((_DWORD *)a1 + 480) = 0;
    }
    if (*((_DWORD *)a1 + 65))
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v89 = sub_D1C7C(0x16u);
        __uint64_t v90 = sub_DDEFC();
        int v91 = (const char *)sub_D1CB0(5);
        int v92 = *((_DWORD *)a1 + 65);
        if (v89)
        {
          printf("%lld %d AVE %s: FIG: eStaticAreasLowQpSel = %d and bIsLossless is true not supported. Forcing eStaticAreasLowQpSel to STATICAREAS_LOWQP_DISABLE.\n", v90, 22, v91, v92);
          __uint64_t v93 = sub_DDEFC();
          __uint64_t v396 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: eStaticAreasLowQpSel = %d and bIsLossless is true not supported. Forcing eStaticAreasLowQpSel to STATICAREAS_LOWQP_DISABLE.", v93, 22, v396, *((_DWORD *)a1 + 65));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: eStaticAreasLowQpSel = %d and bIsLossless is true not supported. Forcing eStaticAreasLowQpSel to STATICAREAS_LOWQP_DISABLE.", v90, 22, v91, v92);
        }
      }
      *((_DWORD *)a1 + 65) = 0;
    }
    *((unsigned char *)a1 + 120556) = 1;
    *((unsigned char *)a1 + 109577) = 0;
    *__uint64_t v8 = 0;
  }
  if (*v28 && *((int *)a1 + 56) >= 1 && !*((unsigned char *)v3 + 974))
  {
    if (sub_D1C38(0x16u, 5))
    {
      int v94 = sub_D1C7C(0x16u);
      __uint64_t v95 = sub_DDEFC();
      __uint64_t v96 = (const char *)sub_D1CB0(5);
      int v97 = *v28;
      if (v94)
      {
        printf("%lld %d AVE %s: FIG: BFrames = %d and iAverageNonDroppableFrameRate is true. not supported yet, gracefully set it to false.\n", v95, 22, v96, v97);
        __uint64_t v98 = sub_DDEFC();
        v397 = (const char *)sub_D1CB0(5);
        syslog(3, "%lld %d AVE %s: FIG: BFrames = %d and iAverageNonDroppableFrameRate is true. not supported yet, gracefully set it to false.", v98, 22, v397, *v28);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: BFrames = %d and iAverageNonDroppableFrameRate is true. not supported yet, gracefully set it to false.", v95, 22, v96, v97);
      }
    }
    *((_DWORD *)a1 + 56) = 0;
  }
  if (!*((_DWORD *)a1 + 503))
  {
    *((_WORD *)a1 + 122) = 0;
    *((unsigned char *)a1 + 118414) = 0;
    *(_WORD *)((char *)a1 + 255) = 0;
    *(_DWORD *)((char *)a1 + 247) = 0;
  }
  if (*((int *)a1 + 460) <= -13) {
    *((_DWORD *)a1 + 460) = -6 * *((_DWORD *)a1 + 25784);
  }
  if (*((int *)a1 + 461) <= -13) {
    *((_DWORD *)a1 + 461) = 48;
  }
  if (*((int *)a1 + 462) <= -13) {
    *((_DWORD *)a1 + 462) = -6 * *((_DWORD *)a1 + 25784);
  }
  __uint64_t v99 = a1 + 231;
  if (*((int *)a1 + 463) <= -13) {
    *((_DWORD *)a1 + 463) = 48;
  }
  if (sub_DEC28((int *)a1 + 462, *((_DWORD *)a1 + 25784) + 8))
  {
    if (sub_D1C38(3u, 4))
    {
      int v100 = sub_D1C7C(3u);
      __uint64_t v19 = sub_DDEFC();
      int v101 = (const char *)sub_D1CB0(4);
      if (v100)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: Incorrect sHardQPRange [%d %d]\n", v19, 3, v101, "AVE_ValidateEncoderParameters", 8083, "false", *((_DWORD *)a1 + 462), *((_DWORD *)a1 + 463));
        __uint64_t v19 = sub_DDEFC();
        int v101 = (const char *)sub_D1CB0(4);
      }
      __uint64_t v426 = (const void *)*((unsigned int *)a1 + 462);
      uint64_t v427 = *((unsigned int *)a1 + 463);
      uint64_t v425 = 8083;
      v388 = v101;
      int v21 = "%lld %d AVE %s: %s:%d %s | FIG: Incorrect sHardQPRange [%d %d]";
      goto LABEL_210;
    }
    return 4294954394;
  }
  int64_t v102 = a1 + 230;
  if (sub_DEC28((int *)a1 + 460, *((_DWORD *)a1 + 25784) + 8))
  {
    if (sub_D1C38(3u, 4))
    {
      int v103 = sub_D1C7C(3u);
      __uint64_t v19 = sub_DDEFC();
      __uint64_t v104 = (const char *)sub_D1CB0(4);
      if (v103)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: Incorrect sSoftQPRange [%d %d]\n", v19, 3, v104, "AVE_ValidateEncoderParameters", 8091, "false", *((_DWORD *)a1 + 460), *((_DWORD *)a1 + 461));
        __uint64_t v19 = sub_DDEFC();
        __uint64_t v104 = (const char *)sub_D1CB0(4);
      }
      __uint64_t v426 = (const void *)*((unsigned int *)a1 + 460);
      uint64_t v427 = *((unsigned int *)a1 + 461);
      uint64_t v425 = 8091;
      v388 = v104;
      int v21 = "%lld %d AVE %s: %s:%d %s | FIG: Incorrect sSoftQPRange [%d %d]";
      goto LABEL_210;
    }
    return 4294954394;
  }
  if (*v102 < *v99) {
    *int64_t v102 = *v99;
  }
  int v105 = *((_DWORD *)a1 + 463);
  if (*((_DWORD *)a1 + 461) > v105) {
    *((_DWORD *)a1 + 461) = v105;
  }
  int v106 = *((_DWORD *)a1 + 49);
  if (*((unsigned char *)v3 + 812))
  {
    if (v106 != 20) {
      goto LABEL_221;
    }
    if (sub_D1C38(0x16u, 5))
    {
      int v107 = sub_D1C7C(0x16u);
      __uint64_t v108 = sub_DDEFC();
      __uint64_t v109 = (const char *)sub_D1CB0(5);
      int v110 = *((_DWORD *)a1 + 49);
      if (v107)
      {
        printf("%lld %d AVE %s: FIG: eRCMode 0x%x bUseAsyncFWScheduling = true -> not supported. set bUseAsyncFWScheduling to false\n", v108, 22, v109, v110);
        __uint64_t v111 = sub_DDEFC();
        v398 = (const char *)sub_D1CB0(5);
        syslog(3, "%lld %d AVE %s: FIG: eRCMode 0x%x bUseAsyncFWScheduling = true -> not supported. set bUseAsyncFWScheduling to false", v111, 22, v398, *((_DWORD *)a1 + 49));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: eRCMode 0x%x bUseAsyncFWScheduling = true -> not supported. set bUseAsyncFWScheduling to false", v108, 22, v109, v110);
      }
    }
    char v118 = 0;
    goto LABEL_220;
  }
  if (v106 != 20 && *v28)
  {
    if (sub_D1C38(0x16u, 5))
    {
      int v112 = sub_D1C7C(0x16u);
      __uint64_t v113 = sub_DDEFC();
      uint64_t v114 = (const char *)sub_D1CB0(5);
      int v115 = *((_DWORD *)a1 + 486);
      if (v112)
      {
        printf("%lld %d AVE %s: FIG: eRCMode 0x%x bUseAsyncFWScheduling = false Bframes 0x%x -> not supported. set bUseAsyncFWScheduling to true\n", v113, 22, v114, *((_DWORD *)a1 + 49), v115);
        __uint64_t v116 = sub_DDEFC();
        uint64_t v117 = (const char *)sub_D1CB0(5);
        syslog(3, "%lld %d AVE %s: FIG: eRCMode 0x%x bUseAsyncFWScheduling = false Bframes 0x%x -> not supported. set bUseAsyncFWScheduling to true", v116, 22, v117, *((_DWORD *)a1 + 49), *((_DWORD *)a1 + 486));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: eRCMode 0x%x bUseAsyncFWScheduling = false Bframes 0x%x -> not supported. set bUseAsyncFWScheduling to true", v113, 22, v114, *((_DWORD *)a1 + 49), v115);
      }
    }
    char v118 = 1;
LABEL_220:
    *((unsigned char *)v3 + 812) = v118;
  }
LABEL_221:
  if (*(void *)(v2 + 164))
  {
    *((unsigned char *)v3 + 524) = 1;
    *((_DWORD *)v3 + 132) = 1;
  }
  if (*v28 && *((_DWORD *)a1 + 516) == 1)
  {
    if (sub_D1C38(0x16u, 5))
    {
      int v119 = sub_D1C7C(0x16u);
      __uint64_t v120 = sub_DDEFC();
      int v121 = (const char *)sub_D1CB0(5);
      int v122 = *v28;
      if (v119)
      {
        printf("%lld %d AVE %s: FIG: BFrames = %d and LowDelay is true. Default to regular BFrames case.\n", v120, 22, v121, v122);
        __uint64_t v123 = sub_DDEFC();
        int v399 = (const char *)sub_D1CB0(5);
        syslog(3, "%lld %d AVE %s: FIG: BFrames = %d and LowDelay is true. Default to regular BFrames case.", v123, 22, v399, *v28);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: BFrames = %d and LowDelay is true. Default to regular BFrames case.", v120, 22, v121, v122);
      }
    }
    *((_DWORD *)a1 + 516) = 0;
  }
  int v124 = *((_DWORD *)v3 + 12);
  if (v124 == 8)
  {
    char v125 = 1;
  }
  else
  {
    if (v124 != 10)
    {
      if (sub_D1C38(3u, 4))
      {
        int v131 = sub_D1C7C(3u);
        __uint64_t v132 = sub_DDEFC();
        __uint64_t v133 = (const char *)sub_D1CB0(4);
        if (v131)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: input_bitdepth = %d... not supported. Fail\n", v132, 3, v133, "AVE_ValidateEncoderParameters", 8167, "(encoderPrivateStorage->VideoParams.input_bitdepth == 8) || (encoderPrivateStorage->VideoParams.input_bitdepth == 10)", *((_DWORD *)v3 + 12));
          __uint64_t v132 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: input_bitdepth = %d... not supported. Fail", v132);
      }
      return 4294954394;
    }
    char v125 = *((unsigned char *)v3 + 986);
  }
  *((unsigned char *)v3 + 556) = v125;
  if (!sub_13AE0(*((_DWORD *)v2 + 37), 1, 1, *v3))
  {
    if (sub_D1C38(0x16u, 5))
    {
      int v126 = sub_D1C7C(0x16u);
      __uint64_t v127 = sub_DDEFC();
      CFDictionaryRef v128 = (const char *)sub_D1CB0(5);
      int v129 = *v3;
      if (v126)
      {
        printf("%lld %d AVE %s: FIG: SearchRangeMode %d not supported. Default to 0\n", v127, 22, v128, v129);
        __uint64_t v130 = sub_DDEFC();
        __uint64_t v400 = (const char *)sub_D1CB0(5);
        syslog(3, "%lld %d AVE %s: FIG: SearchRangeMode %d not supported. Default to 0", v130, 22, v400, *v3);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: SearchRangeMode %d not supported. Default to 0", v127, 22, v128, v129);
      }
    }
    *int v3 = 0;
  }
  if (*((int *)v2 + 36) <= 7 && (*v3 & 0xFFFE) == 4 && (*((unsigned char *)v3 + 804) || *((_DWORD *)v3 + 141) >= 2u)) {
    *int v3 = 0;
  }
  if ((*((_DWORD *)a1 + 471) * *((_DWORD *)a1 + 470)) >= 0x7E9000
    && *((int *)a1 + 57) >= 100
    && (v430[337] & 0x80000000) != 0
    && (*((_DWORD *)v2 + 433) & 0x80000000) != 0)
  {
    *int v3 = 0;
    goto LABEL_255;
  }
  if (*v3 != 7)
  {
LABEL_255:
    if (*((_DWORD *)v2 + 35) != 2 && !*((unsigned char *)v3 + 477)) {
      goto LABEL_263;
    }
  }
  if (!*((unsigned char *)v3 + 9))
  {
    if (sub_D1C38(0x16u, 5))
    {
      int v134 = sub_D1C7C(0x16u);
      __uint64_t v135 = sub_DDEFC();
      int v136 = (const char *)sub_D1CB0(5);
      if (v134)
      {
        printf("%lld %d AVE %s: FIG: SearchRangeMode = 7 or LRMEStandAlone or LRMERC -> must run in LRME-pipe async.\n", v135, 22, v136);
        __uint64_t v137 = sub_DDEFC();
        v401 = (const char *)sub_D1CB0(5);
        syslog(3, "%lld %d AVE %s: FIG: SearchRangeMode = 7 or LRMEStandAlone or LRMERC -> must run in LRME-pipe async.", v137, 22, v401);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: SearchRangeMode = 7 or LRMEStandAlone or LRMERC -> must run in LRME-pipe async.", v135, 22, v136);
      }
    }
    *((unsigned char *)v3 + 9) = 1;
  }
LABEL_263:
  int v429 = v28;
  if (*((unsigned char *)v3 + 991))
  {
    __uint64_t v138 = (char *)a1 + 109577;
    if (*((unsigned char *)v3 + 517) || *((unsigned char *)v3 + 516))
    {
      int v139 = -6 * *((_DWORD *)a1 + 25784);
      int v140 = *((_DWORD *)a1 + 456);
      if (v140 <= 47) {
        int v141 = v140 + 4;
      }
      else {
        int v141 = 51;
      }
      if (v140 + 4 >= v139) {
        int v142 = v141;
      }
      else {
        int v142 = -6 * *((_DWORD *)a1 + 25784);
      }
      *((_DWORD *)a1 + 457) = v142;
      if (v142 < 51) {
        int v143 = v142 + 1;
      }
      else {
        int v143 = 51;
      }
      if (v142 + 1 >= v139) {
        int v139 = v143;
      }
      *((_DWORD *)a1 + 458) = v139;
LABEL_278:
      *((_DWORD *)a1 + 49) = 3;
      goto LABEL_288;
    }
    if (*((unsigned char *)v3 + 899) || *((_DWORD *)a1 + 49) == 4 || *((unsigned char *)v3 + 992))
    {
      a1[227] = (const void *)0x403A000000000000;
      a1[228] = (const void *)0x1A0000001ALL;
      *((_DWORD *)a1 + 458) = 26;
      *((_DWORD *)a1 + 462) = -6 * *((_DWORD *)a1 + 25784);
      *((_DWORD *)a1 + 463) = 48;
      a1[230] = a1[231];
      *((unsigned char *)a1 + 118487) = *((unsigned char *)v3 + 992);
      *((unsigned char *)v3 + 991) = 0;
      goto LABEL_288;
    }
    if (*((unsigned char *)v3 + 1036))
    {
      *((_DWORD *)a1 + 480) = 0;
      *((unsigned char *)v3 + 880) = 0;
      *((unsigned char *)a1 + 118414) = 0;
      *((unsigned char *)a1 + 244) = 0;
      *((_WORD *)a1 + 123) = 0;
      *((unsigned char *)a1 + 252) = 0;
      *((_DWORD *)a1 + 65) = 0;
      *((unsigned char *)a1 + 249) = 0;
      *(_WORD *)((char *)a1 + 255) = 0;
      *((unsigned char *)a1 + 257) = 0;
      *((_DWORD *)a1 + 442) = 0;
    }
    if ((*((unsigned char *)a1 + 203) & 0x80) == 0) {
      goto LABEL_278;
    }
  }
  else
  {
    __uint64_t v138 = (char *)a1 + 109577;
    if (*((unsigned char *)v3 + 1036) && !*((unsigned char *)v3 + 899) && *((_DWORD *)a1 + 49) != 4 && !*((unsigned char *)v3 + 992))
    {
      *((_DWORD *)a1 + 480) = 0;
      *((unsigned char *)v3 + 880) = 0;
      *((unsigned char *)a1 + 118414) = 0;
      *((unsigned char *)a1 + 244) = 0;
      *((_WORD *)a1 + 123) = 0;
      *((unsigned char *)a1 + 252) = 0;
      *((_DWORD *)a1 + 65) = 0;
      *((unsigned char *)a1 + 249) = 0;
      *(_WORD *)((char *)a1 + 255) = 0;
      *((unsigned char *)a1 + 257) = 0;
      *((_DWORD *)a1 + 49) = 3;
      a1[227] = (const void *)0x403E000000000000;
      a1[228] = (const void *)0x1E0000001ELL;
      *((_DWORD *)a1 + 458) = 30;
      *((_DWORD *)a1 + 442) = 0;
    }
  }
LABEL_288:
  if ((int)(*(double *)v431 * 100.0 + 0.5) != 100
    && !*((unsigned char *)v3 + 1036)
    && !*((unsigned char *)v3 + 987)
    && (*((unsigned char *)a1 + 1876) & 0xE0) == 0
    && !*(void *)(v2 + 164)
    && *((_DWORD *)v3 + 141) <= 1u
    && !*((_DWORD *)v3 + 577))
  {
    if ((a1[25] & 0x80000000) == 0) {
      goto LABEL_297;
    }
    goto LABEL_296;
  }
  *((_DWORD *)a1 + 58) = 0;
  unint64_t v144 = (unint64_t)a1[25] & 0xFFFFFFFF7FFFFFFFLL;
  a1[25] = (const void *)v144;
  if ((v144 & 0x80000000) != 0)
  {
LABEL_296:
    *((_DWORD *)a1 + 56) = 0;
    a1[2521] = (const void *)((unint64_t)a1[2521] & 0xFFFFFFFFFFFFFFCFLL | 0x10);
  }
LABEL_297:
  if (*((unsigned char *)a1 + 244) && !*((unsigned char *)a1 + 118414))
  {
    if (sub_D1C38(0x16u, 5))
    {
      int v145 = sub_D1C7C(0x16u);
      __uint64_t v146 = sub_DDEFC();
      uint64_t v147 = (const char *)sub_D1CB0(5);
      int v148 = *((unsigned __int8 *)a1 + 244);
      if (v145)
      {
        printf("%lld %d AVE %s: FIG: bEnableQPMod = %d and cu_qp_delta_enabled_flag is false. Set cu_qp_delta_enabled_flag to true.\n", v146, 22, v147, v148);
        __uint64_t v149 = sub_DDEFC();
        int v402 = (const char *)sub_D1CB0(5);
        syslog(3, "%lld %d AVE %s: FIG: bEnableQPMod = %d and cu_qp_delta_enabled_flag is false. Set cu_qp_delta_enabled_flag to true.", v149, 22, v402, *((unsigned __int8 *)a1 + 244));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: bEnableQPMod = %d and cu_qp_delta_enabled_flag is false. Set cu_qp_delta_enabled_flag to true.", v146, 22, v147, v148);
      }
    }
    *((unsigned char *)a1 + 118414) = 1;
  }
  __uint64_t v432 = (_DWORD *)a1 + 34625;
  if (*((_DWORD *)v3 + 12) != 10)
  {
    if (*((unsigned char *)v3 + 977)) {
      goto LABEL_342;
    }
    goto LABEL_316;
  }
  if (*((unsigned char *)v3 + 977)) {
    goto LABEL_342;
  }
  int v150 = *(_DWORD *)(v138 + 195);
  if (v150 == 18)
  {
    int v151 = -12;
    goto LABEL_312;
  }
  if (v150 == 16)
  {
    int v151 = -6;
LABEL_312:
    *((_DWORD *)a1 + 29613) = v151;
    *((_DWORD *)a1 + 29614) = v151;
  }
  if (*((int *)v2 + 36) >= 22 && (v150 | 2) == 0x12) {
    *((unsigned char *)a1 + 118484) = 0;
  }
LABEL_316:
  if (!*((unsigned char *)a1 + 244))
  {
    if (*((_DWORD *)a1 + 65))
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v152 = sub_D1C7C(0x16u);
        __uint64_t v153 = sub_DDEFC();
        int v154 = (const char *)sub_D1CB0(5);
        int v155 = *((_DWORD *)a1 + 65);
        if (v152)
        {
          printf("%lld %d AVE %s: FIG: eStaticAreasLowQpSel = %d and bEnableQPMod set to false is not supported. Forcing eStaticAreasLowQpSel to STATICAREAS_LOWQP_DISABLE.\n", v153, 22, v154, v155);
          __uint64_t v156 = sub_DDEFC();
          __uint64_t v403 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: eStaticAreasLowQpSel = %d and bEnableQPMod set to false is not supported. Forcing eStaticAreasLowQpSel to STATICAREAS_LOWQP_DISABLE.", v156, 22, v403, *((_DWORD *)a1 + 65));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: eStaticAreasLowQpSel = %d and bEnableQPMod set to false is not supported. Forcing eStaticAreasLowQpSel to STATICAREAS_LOWQP_DISABLE.", v153, 22, v154, v155);
        }
      }
      *((_DWORD *)a1 + 65) = 0;
    }
    if (*((unsigned char *)a1 + 247))
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v157 = sub_D1C7C(0x16u);
        __uint64_t v158 = sub_DDEFC();
        __uint64_t v159 = (const char *)sub_D1CB0(5);
        int v160 = *((unsigned __int8 *)a1 + 247);
        if (v157)
        {
          printf("%lld %d AVE %s: FIG: bEnableVarianceQPMod = %d and bEnableQPMod set to false is not supported. Forcing bEnableVarianceQPMod off.\n", v158, 22, v159, v160);
          __uint64_t v161 = sub_DDEFC();
          int v404 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: bEnableVarianceQPMod = %d and bEnableQPMod set to false is not supported. Forcing bEnableVarianceQPMod off.", v161, 22, v404, *((unsigned __int8 *)a1 + 247));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: bEnableVarianceQPMod = %d and bEnableQPMod set to false is not supported. Forcing bEnableVarianceQPMod off.", v158, 22, v159, v160);
        }
      }
      *((unsigned char *)a1 + 247) = 0;
    }
    if (*((unsigned char *)a1 + 248))
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v162 = sub_D1C7C(0x16u);
        __uint64_t v163 = sub_DDEFC();
        long long v164 = (const char *)sub_D1CB0(5);
        int v165 = *((unsigned __int8 *)a1 + 248);
        if (v162)
        {
          printf("%lld %d AVE %s: FIG: bEnableLowVarianceQPMod = %d and bEnableQPMod set to false is not supported. Forcing bEnableLowVarianceQPMod off.\n", v163, 22, v164, v165);
          __uint64_t v166 = sub_DDEFC();
          __uint64_t v405 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: bEnableLowVarianceQPMod = %d and bEnableQPMod set to false is not supported. Forcing bEnableLowVarianceQPMod off.", v166, 22, v405, *((unsigned __int8 *)a1 + 248));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: bEnableLowVarianceQPMod = %d and bEnableQPMod set to false is not supported. Forcing bEnableLowVarianceQPMod off.", v163, 22, v164, v165);
        }
      }
      *((unsigned char *)a1 + 248) = 0;
    }
    if (*((unsigned char *)a1 + 249))
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v167 = sub_D1C7C(0x16u);
        __uint64_t v168 = sub_DDEFC();
        int v169 = (const char *)sub_D1CB0(5);
        int v170 = *((unsigned __int8 *)a1 + 249);
        if (v167)
        {
          printf("%lld %d AVE %s: FIG: bEnableHevcDeRingingQPMod = %d and bEnableQPMod set to false is not supported. Forcing bEnableHevcDeRingingQPMod off.\n", v168, 22, v169, v170);
          __uint64_t v171 = sub_DDEFC();
          v406 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: bEnableHevcDeRingingQPMod = %d and bEnableQPMod set to false is not supported. Forcing bEnableHevcDeRingingQPMod off.", v171, 22, v406, *((unsigned __int8 *)a1 + 249));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: bEnableHevcDeRingingQPMod = %d and bEnableQPMod set to false is not supported. Forcing bEnableHevcDeRingingQPMod off.", v168, 22, v169, v170);
        }
      }
      *((unsigned char *)a1 + 249) = 0;
    }
  }
LABEL_342:
  if (*((_DWORD *)a1 + 65))
  {
    unsigned int v172 = *((_DWORD *)a1 + 470) + 15;
    unsigned int v173 = *((_DWORD *)a1 + 471) + 15;
    unsigned int v174 = v173 >> 4;
    unsigned int v175 = (v172 >> 4) + 31;
    unsigned int v176 = v175 & 0x1FFFFFE0;
    if (v172 > 0x78F || v173 >= 0x450) {
      unsigned int v177 = (((((v172 >> 4) + 1) >> 1) + 31) >> 5) * ((v174 + 1) >> 1);
    }
    else {
      unsigned int v177 = (v175 >> 5) * v174;
    }
    if (v176 > 0x100 || v173 > 0xC0F || v177 >= 0x121)
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v178 = sub_D1C7C(0x16u);
        __uint64_t v179 = sub_DDEFC();
        int v180 = (const char *)sub_D1CB0(5);
        if (v178)
        {
          printf("%lld %d AVE %s: AVE_FIG: align32MbW <= MAX_STATICAREASLOWQP_NMB_FRAME_HORIZONTAL && picHeightInMb <= MAX_STATICAREASLOWQP_NMB_FRAME_VERTICAL %d %d %d %d\n", v179, 22, v180, v176, 256, v174, 192);
          __uint64_t v179 = sub_DDEFC();
          sub_D1CB0(5);
        }
        syslog(3, "%lld %d AVE %s: AVE_FIG: align32MbW <= MAX_STATICAREASLOWQP_NMB_FRAME_HORIZONTAL && picHeightInMb <= MAX_STATICAREASLOWQP_NMB_FRAME_VERTICAL %d %d %d %d", v179);
      }
      *((_DWORD *)a1 + 65) = 0;
    }
  }
  int v181 = (_DWORD *)a1 + 34625;
  uint64_t v182 = v429;
  if (*((_DWORD *)v3 + 580) >= 0x1Fu)
  {
    if (sub_D1C38(0x16u, 5))
    {
      int v183 = sub_D1C7C(0x16u);
      __uint64_t v184 = sub_DDEFC();
      __uint64_t v185 = (const char *)sub_D1CB0(5);
      if (v183)
      {
        printf("%lld %d AVE %s: AVE_FIG: ui32NumCodedBuffers exceeds max allowed value of AVE_CODED_BUF_MAX_NUM (%d) Forcing to AVE_CODED_BUF_MAX_NUM\n", v184, 22, v185, 30);
        __uint64_t v186 = sub_DDEFC();
        int v181 = (_DWORD *)a1 + 34625;
        int v407 = (const char *)sub_D1CB0(5);
        syslog(3, "%lld %d AVE %s: AVE_FIG: ui32NumCodedBuffers exceeds max allowed value of AVE_CODED_BUF_MAX_NUM (%d) Forcing to AVE_CODED_BUF_MAX_NUM", v186, 22, v407, 30);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AVE_FIG: ui32NumCodedBuffers exceeds max allowed value of AVE_CODED_BUF_MAX_NUM (%d) Forcing to AVE_CODED_BUF_MAX_NUM", v184, 22, v185, 30);
      }
    }
    *((_DWORD *)v3 + 580) = 30;
  }
  if (*((unsigned char *)a1 + 255))
  {
    unsigned int v187 = *((_DWORD *)a1 + 49);
    if ((v187 > 0x14 || ((1 << v187) & 0x100009) == 0) && *((unsigned char *)a1 + 244) && !*((unsigned char *)a1 + 252)) {
      goto LABEL_380;
    }
    if (sub_D1C38(0x16u, 5))
    {
      int v188 = sub_D1C7C(0x16u);
      __uint64_t v189 = sub_DDEFC();
      int v190 = (const char *)sub_D1CB0(5);
      if (v188)
      {
        printf("%lld %d AVE %s: FIG: eRCMode 0x%x bFlatAreaLowQpEn %d bEnableQPMod %d bEnableQPModRefresh %d -> not supported. set bFlatAreaLowQpEn to false\n", v189, 22, v190, *((_DWORD *)a1 + 49), *((unsigned __int8 *)a1 + 255), *((unsigned __int8 *)a1 + 244), *((unsigned __int8 *)a1 + 252));
        __uint64_t v189 = sub_DDEFC();
        sub_D1CB0(5);
        int v181 = (_DWORD *)a1 + 34625;
      }
      syslog(3, "%lld %d AVE %s: FIG: eRCMode 0x%x bFlatAreaLowQpEn %d bEnableQPMod %d bEnableQPModRefresh %d -> not supported. set bFlatAreaLowQpEn to false", v189);
    }
    *((unsigned char *)a1 + 255) = 0;
  }
  if (*((unsigned char *)a1 + 257))
  {
    if (sub_D1C38(0x16u, 5))
    {
      int v191 = sub_D1C7C(0x16u);
      __uint64_t v192 = sub_DDEFC();
      int v193 = (const char *)sub_D1CB0(5);
      int v194 = *((unsigned __int8 *)a1 + 255);
      if (v191)
      {
        printf("%lld %d AVE %s: FIG: bFlatAreaLowQpEn %d -> not supported. set bPerceptualQualityOptimization to false\n", v192, 22, v193, v194);
        __uint64_t v195 = sub_DDEFC();
        __uint64_t v408 = (const char *)sub_D1CB0(5);
        int v181 = (_DWORD *)a1 + 34625;
        syslog(3, "%lld %d AVE %s: FIG: bFlatAreaLowQpEn %d -> not supported. set bPerceptualQualityOptimization to false", v195, 22, v408, *((unsigned __int8 *)a1 + 255));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: bFlatAreaLowQpEn %d -> not supported. set bPerceptualQualityOptimization to false", v192, 22, v193, v194);
      }
    }
    *((unsigned char *)a1 + 257) = 0;
  }
LABEL_380:
  if (*((unsigned char *)a1 + 256) && !*((unsigned char *)a1 + 255))
  {
    if (sub_D1C38(0x16u, 5))
    {
      int v196 = sub_D1C7C(0x16u);
      __uint64_t v197 = sub_DDEFC();
      __uint64_t v198 = (const char *)sub_D1CB0(5);
      int v199 = *((unsigned __int8 *)a1 + 255);
      if (v196)
      {
        printf("%lld %d AVE %s: FIG: bFlatAreaLowQpEn %d -> not supported. set bUltraFlatAreaLowQpEn to false\n", v197, 22, v198, v199);
        __uint64_t v200 = sub_DDEFC();
        int v409 = (const char *)sub_D1CB0(5);
        int v181 = (_DWORD *)a1 + 34625;
        syslog(3, "%lld %d AVE %s: FIG: bFlatAreaLowQpEn %d -> not supported. set bUltraFlatAreaLowQpEn to false", v200, 22, v409, *((unsigned __int8 *)a1 + 255));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: bFlatAreaLowQpEn %d -> not supported. set bUltraFlatAreaLowQpEn to false", v197, 22, v198, v199);
      }
    }
    *((unsigned char *)a1 + 256) = 0;
  }
  if (*((unsigned char *)a1 + 248) && (!*((unsigned char *)a1 + 247) || !*((unsigned char *)a1 + 255)))
  {
    if (sub_D1C38(0x16u, 5))
    {
      int v201 = sub_D1C7C(0x16u);
      __uint64_t v202 = sub_DDEFC();
      __uint64_t v203 = (const char *)sub_D1CB0(5);
      int v204 = *((unsigned __int8 *)a1 + 248);
      int v205 = *((unsigned __int8 *)a1 + 255);
      if (v201)
      {
        printf("%lld %d AVE %s: FIG: bEnableLowVarianceQPMod = %d and requires both bEnableVarianceQPMod %d and bFlatAreaLowQpEn %d. Forcing bEnableLowVarianceQPMod off.\n", v202, 22, v203, v204, *((unsigned __int8 *)a1 + 247), v205);
        __uint64_t v206 = sub_DDEFC();
        int v207 = (const char *)sub_D1CB0(5);
        int v181 = (_DWORD *)a1 + 34625;
        syslog(3, "%lld %d AVE %s: FIG: bEnableLowVarianceQPMod = %d and requires both bEnableVarianceQPMod %d and bFlatAreaLowQpEn %d. Forcing bEnableLowVarianceQPMod off.", v206, 22, v207, *((unsigned __int8 *)a1 + 248), *((unsigned __int8 *)a1 + 247), *((unsigned __int8 *)a1 + 255));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: bEnableLowVarianceQPMod = %d and requires both bEnableVarianceQPMod %d and bFlatAreaLowQpEn %d. Forcing bEnableLowVarianceQPMod off.", v202, 22, v203, v204, *((unsigned __int8 *)a1 + 247), v205);
      }
    }
    *((unsigned char *)a1 + 248) = 0;
  }
  if (*((unsigned char *)a1 + 250) && *((_DWORD *)a1 + 65))
  {
    if (sub_D1C38(0x16u, 5))
    {
      int v208 = sub_D1C7C(0x16u);
      __uint64_t v209 = sub_DDEFC();
      long long v210 = (const char *)sub_D1CB0(5);
      if (v208)
      {
        printf("%lld %d AVE %s: FIG: enableCrcQpModMode set and EnableSelStatsFlags set is not supported. Forcing EnableSelStatsFlags to disabled\n", v209, 22, v210);
        __uint64_t v211 = sub_DDEFC();
        __uint64_t v410 = (const char *)sub_D1CB0(5);
        int v181 = (_DWORD *)a1 + 34625;
        syslog(3, "%lld %d AVE %s: FIG: enableCrcQpModMode set and EnableSelStatsFlags set is not supported. Forcing EnableSelStatsFlags to disabled", v211, 22, v410);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: enableCrcQpModMode set and EnableSelStatsFlags set is not supported. Forcing EnableSelStatsFlags to disabled", v209, 22, v210);
      }
    }
    *((_DWORD *)a1 + 65) = 0;
  }
  if ((*((unsigned char *)a1 + 203) & 0x80) != 0)
  {
    int v212 = v430[310];
    if ((v212 & 0x20) != 0) {
      *((_DWORD *)a1 + 506) |= 0x20u;
    }
    int v213 = v430[311];
    if ((v213 & 0x20) != 0)
    {
      *((_DWORD *)a1 + 506) &= ~0x20u;
      if ((v212 & 0x40) == 0)
      {
LABEL_407:
        if ((v213 & 0x40) == 0) {
          goto LABEL_409;
        }
        goto LABEL_408;
      }
    }
    else if ((v212 & 0x40) == 0)
    {
      goto LABEL_407;
    }
    *((_DWORD *)a1 + 506) |= 0x40u;
    if ((v213 & 0x40) == 0)
    {
LABEL_409:
      *((unsigned char *)a1 + 255) = 0;
      *((_DWORD *)a1 + 65) = 0;
      if (sub_D1C38(0x16u, 6))
      {
        int v214 = sub_D1C7C(0x16u);
        __uint64_t v215 = sub_DDEFC();
        uint64_t v216 = (const char *)sub_D1CB0(6);
        if (v214)
        {
          printf("%lld %d AVE %s: FlatArea and Static QP mod is disabled when lookahead RC feature is enabled\n", v215, 22, v216);
          __uint64_t v217 = sub_DDEFC();
          v411 = (const char *)sub_D1CB0(6);
          int v181 = (_DWORD *)a1 + 34625;
          syslog(3, "%lld %d AVE %s: FlatArea and Static QP mod is disabled when lookahead RC feature is enabled", v217, 22, v411);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FlatArea and Static QP mod is disabled when lookahead RC feature is enabled", v215, 22, v216);
        }
      }
      goto LABEL_416;
    }
LABEL_408:
    *((_DWORD *)a1 + 506) &= ~0x40u;
    goto LABEL_409;
  }
LABEL_416:
  int v218 = *((_DWORD *)v3 + 45);
  if (v218 >= 2)
  {
    int v219 = *((_DWORD *)a1 + 49);
    if (v219 && v219 != 20 && !*((unsigned char *)a1 + 103260))
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v220 = sub_D1C7C(0x16u);
        __uint64_t v221 = sub_DDEFC();
        long long v222 = (const char *)sub_D1CB0(5);
        int v223 = *((_DWORD *)a1 + 49);
        if (v220)
        {
          printf("%lld %d AVE %s: FIG: i32PPSsCount (%d), eRCMode %d and scaling_list_enabled_flag is false. Not supported. Forcing i32PPSsCount to 1\n", v221, 22, v222, *((_DWORD *)v3 + 45), v223);
          __uint64_t v224 = sub_DDEFC();
          long long v225 = (const char *)sub_D1CB0(5);
          int v181 = (_DWORD *)a1 + 34625;
          syslog(3, "%lld %d AVE %s: FIG: i32PPSsCount (%d), eRCMode %d and scaling_list_enabled_flag is false. Not supported. Forcing i32PPSsCount to 1", v224, 22, v225, *((_DWORD *)v3 + 45), *((_DWORD *)a1 + 49));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: i32PPSsCount (%d), eRCMode %d and scaling_list_enabled_flag is false. Not supported. Forcing i32PPSsCount to 1", v221, 22, v222, *((_DWORD *)v3 + 45), v223);
        }
      }
      int v218 = 1;
      *((_DWORD *)v3 + 45) = 1;
    }
    if (*((_DWORD *)a1 + 73) == 1)
    {
      uint64_t v226 = 0;
      int32x4_t v227 = 0uLL;
      v228.i64[0] = 0xC0000000CLL;
      v228.i64[1] = 0xC0000000CLL;
      do
      {
        int32x4_t v227 = vsubq_s32(v227, (int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)((char *)&a1[v226 + 14802] + 4), v228)));
        v226 += 2;
      }
      while (v226 != 4);
      int v229 = vaddvq_s32(v227);
      if (v218 != v229)
      {
        if (sub_D1C38(3u, 4))
        {
          int v234 = sub_D1C7C(3u);
          __uint64_t v235 = sub_DDEFC();
          __int16 v236 = (const char *)sub_D1CB0(4);
          if (v234)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: PPS count = %d and ch_qp_index_offset_cnt = %d... are not compatible. fail\n", v235, 3, v236, "AVE_ValidateEncoderParameters", 8565, "encoderPrivateStorage->VideoParams.i32PPSsCount == ch_qp_index_offset_cnt", *((_DWORD *)v3 + 45), v229);
            __uint64_t v235 = sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: PPS count = %d and ch_qp_index_offset_cnt = %d... are not compatible. fail", v235);
        }
        return 4294954394;
      }
    }
  }
  if (!*((unsigned char *)v3 + 804))
  {
LABEL_440:
    if (!*v429
      && (*v3 & 0xFFFE) != 4
      && (*((unsigned char *)a1 + 1876) & 0xE0) == 0
      && *((_DWORD *)v3 + 141) <= 1u
      && !*((unsigned char *)v3 + 871))
    {
      goto LABEL_447;
    }
    goto LABEL_445;
  }
  if (*((unsigned char *)v3 + 871))
  {
    if (sub_D1C38(0x16u, 5))
    {
      int v230 = sub_D1C7C(0x16u);
      __uint64_t v231 = sub_DDEFC();
      int v232 = (const char *)sub_D1CB0(5);
      if (v230)
      {
        printf("%lld %d AVE %s: MultiRef and WP not supported together. Disabling MultiRef.\n", v231, 22, v232);
        __uint64_t v233 = sub_DDEFC();
        int v412 = (const char *)sub_D1CB0(5);
        int v181 = (_DWORD *)a1 + 34625;
        syslog(3, "%lld %d AVE %s: MultiRef and WP not supported together. Disabling MultiRef.", v233, 22, v412);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: MultiRef and WP not supported together. Disabling MultiRef.", v231, 22, v232);
      }
    }
    *((unsigned char *)v3 + 804) = 0;
    goto LABEL_440;
  }
LABEL_445:
  if (!*((unsigned char *)v3 + 10)) {
    *((unsigned char *)v3 + 10) = 1;
  }
LABEL_447:
  if (*((_DWORD *)a1 + 507) == 1)
  {
    int v237 = *((_DWORD *)a1 + 506);
    if (*((_DWORD *)v3 + 142) == 1)
    {
      *((_DWORD *)a1 + 508) = 0;
      a1[255] = (const void *)0xBFF0000000000000;
      a1[256] = (const void *)0xBFF0000000000000;
      *((unsigned char *)a1 + 216) = 0;
      v3[487] = 0;
      *((_DWORD *)a1 + 486) = 0;
      v237 &= ~4u;
      *((_DWORD *)a1 + 506) = v237;
      *((_DWORD *)v3 + 114) = 0;
    }
  }
  else
  {
    int v237 = *((_DWORD *)a1 + 506);
  }
  if ((v237 & 1) != 0 && !*v429)
  {
    *((_DWORD *)a1 + 506) = v237 & 0xFFFFFFFE;
    if (sub_D1C38(0x16u, 5))
    {
      int v238 = sub_D1C7C(0x16u);
      __uint64_t v239 = sub_DDEFC();
      int v240 = (const char *)sub_D1CB0(5);
      if (v238)
      {
        printf("%lld %d AVE %s: FIG: CRA not supported with no B Frames. Forcing bClosedGOP to true\n", v239, 22, v240);
        __uint64_t v241 = sub_DDEFC();
        __uint64_t v413 = (const char *)sub_D1CB0(5);
        int v181 = (_DWORD *)a1 + 34625;
        syslog(3, "%lld %d AVE %s: FIG: CRA not supported with no B Frames. Forcing bClosedGOP to true", v241, 22, v413);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: CRA not supported with no B Frames. Forcing bClosedGOP to true", v239, 22, v240);
      }
    }
  }
  if (*((_DWORD *)v3 + 141) >= 2u)
  {
    if (*((int *)a1 + 57) <= 0 && sub_D1C38(0x16u, 5))
    {
      int v242 = sub_D1C7C(0x16u);
      __uint64_t v243 = sub_DDEFC();
      long long v244 = (const char *)sub_D1CB0(5);
      if (v242)
      {
        printf("%lld %d AVE %s: FIG: iLayerNum > 1 and ExpectedFR is not set, behavior is undefined\n", v243, 22, v244);
        __uint64_t v245 = sub_DDEFC();
        v414 = (const char *)sub_D1CB0(5);
        syslog(3, "%lld %d AVE %s: FIG: iLayerNum > 1 and ExpectedFR is not set, behavior is undefined", v245, 22, v414);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: iLayerNum > 1 and ExpectedFR is not set, behavior is undefined", v243, 22, v244);
      }
    }
    if (*((unsigned char *)a1 + 254))
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v246 = sub_D1C7C(0x16u);
        __uint64_t v247 = sub_DDEFC();
        int v248 = (const char *)sub_D1CB0(5);
        if (v246)
        {
          printf("%lld %d AVE %s: FIG: MV-HEVC force to disable FrameDrop\n", v247, 22, v248);
          __uint64_t v249 = sub_DDEFC();
          uint64_t v415 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: MV-HEVC force to disable FrameDrop", v249, 22, v415);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: MV-HEVC force to disable FrameDrop", v247, 22, v248);
        }
      }
      *((unsigned char *)a1 + 254) = 0;
    }
    if (*((unsigned char *)v3 + 184))
    {
      *((unsigned char *)v3 + 184) = 0;
      *((_DWORD *)v3 + 47) = 1;
      if (sub_D1C38(0x16u, 5))
      {
        int v250 = sub_D1C7C(0x16u);
        __uint64_t v251 = sub_DDEFC();
        int v252 = (const char *)sub_D1CB0(5);
        if (v250)
        {
          printf("%lld %d AVE %s: FIG: MV-HEVC force to Frame Encoding mode\n", v251, 22, v252);
          __uint64_t v253 = sub_DDEFC();
          int v416 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: MV-HEVC force to Frame Encoding mode", v253, 22, v416);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: MV-HEVC force to Frame Encoding mode", v251, 22, v252);
        }
      }
    }
    if (*(void *)(v2 + 164))
    {
      if (sub_D1C38(3u, 4))
      {
        int v254 = sub_D1C7C(3u);
        __uint64_t v255 = sub_DDEFC();
        int v256 = (const char *)sub_D1CB0(4);
        if (v254)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: MV-HEVC does not support Multipass\n", v255, 3, v256, "AVE_ValidateEncoderParameters", 8642, "false");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: MV-HEVC does not support Multipass");
      }
      return 4294954396;
    }
    if (*((_DWORD *)v3 + 577) == 1)
    {
      if (sub_D1C38(3u, 4))
      {
        int v257 = sub_D1C7C(3u);
        __uint64_t v258 = sub_DDEFC();
        __uint64_t v259 = (const char *)sub_D1CB0(4);
        if (v257)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: MV-HEVC does not support Parallelization\n", v258, 3, v259, "AVE_ValidateEncoderParameters", 8649, "false");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: MV-HEVC does not support Parallelization");
      }
      return 4294954396;
    }
    int v260 = *((_DWORD *)a1 + 49);
    if (v260 == 4 || v260 == 2 && (*((unsigned char *)a1 + 203) & 0x80) == 0)
    {
      if (sub_D1C38(3u, 4))
      {
        int v261 = sub_D1C7C(3u);
        __uint64_t v262 = sub_DDEFC();
        __uint64_t v263 = (const char *)sub_D1CB0(4);
        if (v261)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: MV-HEVC does not support DRL/CBR\n", v262, 3, v263, "AVE_ValidateEncoderParameters", 8657, "false");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: MV-HEVC does not support DRL/CBR");
      }
      return 4294954396;
    }
    if (*((int *)a1 + 56) >= 1)
    {
      if (sub_D1C38(3u, 4))
      {
        int v264 = sub_D1C7C(3u);
        __uint64_t v265 = sub_DDEFC();
        int v266 = (const char *)sub_D1CB0(4);
        if (v264)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: MV-HEVC does not support BaseLayerFrameRate\n", v265, 3, v266, "AVE_ValidateEncoderParameters", 8663, "false");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: MV-HEVC does not support BaseLayerFrameRate");
      }
      return 4294954396;
    }
    if (*((_DWORD *)a1 + 25773) != 1)
    {
      if (sub_D1C38(3u, 4))
      {
        int v272 = sub_D1C7C(3u);
        __uint64_t v273 = sub_DDEFC();
        int v274 = (const char *)sub_D1CB0(4);
        if (v272)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: MV-HEVC does not support ChromaFmt_400, ChromaFmt_422, or ChromaFmt_444\n", v273, 3, v274, "AVE_ValidateEncoderParameters", 8670, "false");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: MV-HEVC does not support ChromaFmt_400, ChromaFmt_422, or ChromaFmt_444");
      }
      return 4294954396;
    }
    int v267 = (unsigned __int8 *)a1 + 93859;
    unsigned int v268 = a1[253] & 0xFFFFFFFB;
    *((unsigned char *)v3 + 460) = 1;
    *((unsigned char *)v3 + 572) = 1;
    *((_DWORD *)a1 + 506) = v268 | 1;
    if (*((unsigned char *)a1 + 93859))
    {
      if (sub_D1C38(0x1Eu, 4))
      {
        int v269 = sub_D1C7C(0x1Eu);
        __uint64_t v270 = sub_DDEFC();
        CFNumberRef v271 = (const char *)sub_D1CB0(4);
        if (v269)
        {
          printf("%lld %d AVE %s: %s:%d %s | non-zero layer ID at base layer %d\n", v270, 30, v271, "AVE_ValidateEncoderParameters", 8685, "encoderPrivateStorage->VPSHevcParams.layer_id_in_nuh[0] == 0", *v267);
          __uint64_t v270 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | non-zero layer ID at base layer %d", v270);
      }
      return 4294948265;
    }
    int v275 = v3;
    if (*((_DWORD *)v3 + 141) >= 3u)
    {
      if (sub_D1C38(0x1Eu, 4))
      {
        int v281 = sub_D1C7C(0x1Eu);
        __uint64_t v282 = sub_DDEFC();
        int v283 = (const char *)sub_D1CB0(4);
        if (v281)
        {
          printf("%lld %d AVE %s: %s:%d %s | video layer number %d is larger than MAX %d\n", v282, 30, v283, "AVE_ValidateEncoderParameters", 8690, "encoderPrivateStorage->VideoParams.iLayerNum <= ((2) < ((63 + 1)) ? (2) : ((63 + 1)))", *((_DWORD *)v3 + 141), 2);
          __uint64_t v282 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | video layer number %d is larger than MAX %d", v282);
      }
      return 4294948264;
    }
    unsigned int v276 = *((unsigned __int8 *)a1 + 93923);
    if (!*((unsigned char *)a1 + 93923))
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v277 = sub_D1C7C(0x16u);
        __uint64_t v278 = sub_DDEFC();
        v279 = (const char *)sub_D1CB0(5);
        if (v277)
        {
          printf("%lld %d AVE %s: kVTCompressionPropertyKey_MVHEVCViewIDs never received, setting default values\n", v278, 22, v279);
          __uint64_t v280 = sub_DDEFC();
          __uint64_t v417 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: kVTCompressionPropertyKey_MVHEVCViewIDs never received, setting default values", v280, 22, v417);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: kVTCompressionPropertyKey_MVHEVCViewIDs never received, setting default values", v278, 22, v279);
        }
      }
      unsigned int v284 = *((_DWORD *)v275 + 141);
      *((_DWORD *)v275 + 142) = v284;
      unsigned int v276 = 1;
      *((unsigned char *)a1 + 93923) = 1;
      if (v284)
      {
        int v285 = 0;
        do
        {
          int v286 = (char *)a1 + v285;
          v286[93924] = v285;
          v286[20208] = v285++;
        }
        while (v284 > v285);
        unsigned int v276 = 1;
      }
    }
    uint64_t v287 = 0;
    while (2)
    {
      unsigned __int8 v288 = 0;
      while (*((unsigned __int8 *)a1 + v287 + 20208) != *((unsigned __int8 *)a1 + v288 + 93924))
      {
        if (v276 < ++v288)
        {
          if (sub_D1C38(3u, 4))
          {
            int v382 = sub_D1C7C(3u);
            __uint64_t v383 = sub_DDEFC();
            v384 = (const char *)sub_D1CB0(4);
            if (v382)
            {
              printf("%lld %d AVE %s: %s:%d %s | FIG: LeftRightID %d not found in viewID list\n", v383, 3, v384, "AVE_ValidateEncoderParameters", 8719, "bFound", *((unsigned __int8 *)a1 + v287 + 20208));
              __uint64_t v385 = sub_DDEFC();
              sub_D1CB0(4);
              syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: LeftRightID %d not found in viewID list", v385);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: LeftRightID %d not found in viewID list", v383);
            }
          }
          return 4294948263;
        }
      }
      if (++v287 != 2) {
        continue;
      }
      break;
    }
    if (*((_DWORD *)a1 + 65) == 2) {
      *((_DWORD *)a1 + 65) = 0;
    }
    int v3 = v275;
    *((unsigned char *)v275 + 987) = 1;
    int v181 = (_DWORD *)a1 + 34625;
    uint64_t v182 = v429;
  }
  int v289 = *((unsigned __int8 *)v3 + 975);
  *((_DWORD *)a1 + 485) = v289;
  int v290 = *((unsigned __int8 *)v3 + 974);
  *((_DWORD *)a1 + 484) = v290;
  if (!(v290 | v289)) {
    goto LABEL_613;
  }
  int v291 = *((_DWORD *)a1 + 56);
  if (v291 < 1)
  {
    unsigned int v293 = 0;
LABEL_559:
    __uint64_t v308 = v3 + 228;
    unsigned int v309 = v3[228];
    if (!v3[228]) {
      goto LABEL_572;
    }
    if (v291 <= 0)
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v310 = sub_D1C7C(0x16u);
        __uint64_t v311 = sub_DDEFC();
        __uint64_t v312 = (const char *)sub_D1CB0(5);
        int v313 = *v308;
        if (v310)
        {
          printf("%lld %d AVE %s: FIG: numTemporalLayers set to %d but BaseLayerFrameRate not specified. Encoder has to turn off hierarchical encoding\n", v311, 22, v312, v313);
          __uint64_t v314 = sub_DDEFC();
          v418 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: numTemporalLayers set to %d but BaseLayerFrameRate not specified. Encoder has to turn off hierarchical encoding", v314, 22, v418, *v308);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: numTemporalLayers set to %d but BaseLayerFrameRate not specified. Encoder has to turn off hierarchical encoding", v311, 22, v312, v313);
        }
      }
      unsigned int v309 = 0;
      v3[228] = 0;
      *((unsigned char *)v3 + 974) = 0;
    }
    goto LABEL_566;
  }
  int v292 = *((_DWORD *)a1 + 57);
  if (v292 >= 1)
  {
    unsigned int v293 = -1;
    do
      int v294 = v292 >> (v293++ + 2);
    while (v294 >= v291);
    if (v291 << v293 != v292)
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v295 = sub_D1C7C(0x16u);
        __uint64_t v296 = sub_DDEFC();
        int v297 = (const char *)sub_D1CB0(5);
        __uint64_t v298 = *a1;
        int v299 = *((_DWORD *)a1 + 56);
        if (v295)
        {
          printf("%lld %d AVE %s: FIG: %p: ExpectedFrameRate %d is not multiple of BaseLayerFrameRate %d\n", v296, 22, v297, v298, *((_DWORD *)a1 + 57), v299);
          __uint64_t v300 = sub_DDEFC();
          __uint64_t v301 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: %p: ExpectedFrameRate %d is not multiple of BaseLayerFrameRate %d", v300, 22, v301, *a1, *((_DWORD *)a1 + 57), *((_DWORD *)a1 + 56));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: %p: ExpectedFrameRate %d is not multiple of BaseLayerFrameRate %d", v296, 22, v297, v298, *((_DWORD *)a1 + 57), v299);
        }
      }
      int v291 = *((int *)a1 + 57) >> v293;
      *((_DWORD *)a1 + 56) = v291;
    }
    goto LABEL_559;
  }
  if (sub_D1C38(0x16u, 5))
  {
    int v302 = sub_D1C7C(0x16u);
    __uint64_t v303 = sub_DDEFC();
    int v304 = (const char *)sub_D1CB0(5);
    int v305 = *((_DWORD *)a1 + 57);
    if (v302)
    {
      printf("%lld %d AVE %s: FIG: %p: ExpectedFrameRate %d is not correct\n", v303, 22, v304, *a1, v305);
      __uint64_t v306 = sub_DDEFC();
      int v307 = (const char *)sub_D1CB0(5);
      syslog(3, "%lld %d AVE %s: FIG: %p: ExpectedFrameRate %d is not correct", v306, 22, v307, *a1, *((_DWORD *)a1 + 57));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: %p: ExpectedFrameRate %d is not correct", v303, 22, v304, *a1, v305);
    }
  }
  *((_DWORD *)a1 + 56) = 15;
  __uint64_t v308 = v3 + 228;
  unsigned int v309 = v3[228];
  unsigned int v293 = 1;
  if (v3[228])
  {
LABEL_566:
    if (v293 != v309)
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v315 = sub_D1C7C(0x16u);
        __uint64_t v316 = sub_DDEFC();
        int v317 = (const char *)sub_D1CB0(5);
        if (v315)
        {
          printf("%lld %d AVE %s: FIG: NumberOfTemporalLayers value is not optimal. Overriding with optimal value. calculatedNumTemporalLayers %d\n", v316, 22, v317, v293);
          __uint64_t v318 = sub_DDEFC();
          __uint64_t v419 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: NumberOfTemporalLayers value is not optimal. Overriding with optimal value. calculatedNumTemporalLayers %d", v318, 22, v419, v293);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: NumberOfTemporalLayers value is not optimal. Overriding with optimal value. calculatedNumTemporalLayers %d", v316, 22, v317, v293);
        }
      }
      unsigned int v309 = (unsigned __int16)v293;
      unsigned __int16 *v308 = v293;
    }
  }
LABEL_572:
  if (v293 <= v309) {
    unsigned __int16 v319 = v309;
  }
  else {
    unsigned __int16 v319 = v293;
  }
  unsigned int v320 = v319;
  v3[228] = v319;
  if (*((_DWORD *)v3 + 141) >= 2u && v319)
  {
    uint64_t v182 = v429;
    if (sub_D1C38(0x16u, 5))
    {
      int v321 = sub_D1C7C(0x16u);
      __uint64_t v322 = sub_DDEFC();
      int v323 = (const char *)sub_D1CB0(5);
      int v324 = *v308;
      if (v321)
      {
        printf("%lld %d AVE %s: FIG: NumberOfTemporalLayers is %d and we are encoding multiple layers. Setting NumberOfTemporalLayers to 0\n", v322, 22, v323, v324);
        __uint64_t v325 = sub_DDEFC();
        int v420 = (const char *)sub_D1CB0(5);
        syslog(3, "%lld %d AVE %s: FIG: NumberOfTemporalLayers is %d and we are encoding multiple layers. Setting NumberOfTemporalLayers to 0", v325, 22, v420, *v308);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: NumberOfTemporalLayers is %d and we are encoding multiple layers. Setting NumberOfTemporalLayers to 0", v322, 22, v323, v324);
      }
    }
    unsigned int v320 = 0;
    unsigned __int16 *v308 = 0;
    int v326 = *((_DWORD *)a1 + 506);
  }
  else
  {
    int v326 = *((_DWORD *)a1 + 506);
    uint64_t v182 = v429;
    if ((v326 & 4) != 0 && v320 > 1 && !*((unsigned char *)v3 + 901))
    {
      v326 &= ~4u;
      *((_DWORD *)a1 + 506) = v326;
    }
  }
  if ((*((_DWORD *)a1 + 471) * *((_DWORD *)a1 + 470)) <= 0x7E8FFF)
  {
    if (v320 >= 4)
    {
      unsigned int v320 = 3;
      goto LABEL_591;
    }
  }
  else if (v320 > 2)
  {
    unsigned int v320 = 2;
LABEL_591:
    unsigned __int16 *v308 = v320;
  }
  int v181 = (_DWORD *)a1 + 34625;
  if (!*((unsigned char *)v3 + 976))
  {
    int v327 = *((_DWORD *)a1 + 57);
    if (v327 < 1)
    {
      __int16 v329 = 2;
    }
    else
    {
      int v328 = v327 / *((_DWORD *)a1 + 56) - 2;
      if (v328 > 6) {
        __int16 v329 = 0;
      }
      else {
        __int16 v329 = word_143734[v328];
      }
    }
    v3[229] = v329;
  }
  *((_DWORD *)a1 + 29600) = 1;
  *((_DWORD *)a1 + 486) = 3;
  *__uint64_t v432 = 0;
  if (*((unsigned char *)a1 + 216))
  {
    if (v3[229] > v320)
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v330 = sub_D1C7C(0x16u);
        __uint64_t v331 = sub_DDEFC();
        __uint64_t v332 = (const char *)sub_D1CB0(5);
        if (v330)
        {
          printf("%lld %d AVE %s: FIG: numBTemporalLayers set to invalid value defaulting to 0\n", v331, 22, v332);
          __uint64_t v333 = sub_DDEFC();
          __uint64_t v421 = (const char *)sub_D1CB0(5);
          int v181 = (_DWORD *)a1 + 34625;
          syslog(3, "%lld %d AVE %s: FIG: numBTemporalLayers set to invalid value defaulting to 0", v333, 22, v421);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: numBTemporalLayers set to invalid value defaulting to 0", v331, 22, v332);
        }
      }
      v3[229] = 0;
      unsigned int v320 = v3[228];
    }
  }
  else
  {
    *((_DWORD *)a1 + 486) = 0;
    *((_DWORD *)a1 + 506) = v326 & 0xFFFFFFFB;
    v3[229] = 0;
    *((unsigned char *)v3 + 975) = 0;
    if (*((int *)v2 + 36) <= 2 && *((_DWORD *)a1 + 66) == 1) {
      *__uint64_t v432 = 3;
    }
    if (*((_DWORD *)a1 + 57) == *((_DWORD *)a1 + 56))
    {
      *((unsigned char *)v3 + 974) = 0;
      *((_DWORD *)v3 + 114) = 0;
      *((_DWORD *)a1 + 56) = 0;
      goto LABEL_613;
    }
  }
  if (v320)
  {
    *((_DWORD *)v3 + 628) = v320;
    *unsigned int v9 = v320;
  }
LABEL_613:
  int v334 = *((_DWORD *)v2 + 36);
  if (v334 >= 28)
  {
    *((_DWORD *)a1 + 25810) = 3;
    *int v181 = 4;
  }
  if (*((int *)a1 + 507) <= 0
    && *((int *)a1 + 508) <= 0
    && *((double *)a1 + 255) <= 0.0
    && *((double *)a1 + 256) <= 0.0)
  {
    *((_DWORD *)a1 + 507) = 30;
  }
  if (!v3[228])
  {
    *((unsigned char *)v3 + 2516) = 1;
    *((unsigned char *)a1 + 102540) = 1;
  }
  if (!*((unsigned char *)a1 + 216))
  {
    *((_DWORD *)a1 + 486) = 0;
    *((_DWORD *)a1 + 506) &= ~4u;
    v3[229] = 0;
    *((unsigned char *)v3 + 975) = 0;
  }
  if (!*((unsigned char *)v3 + 901))
  {
    int v335 = *((_DWORD *)a1 + 506);
    if ((v335 & 4) != 0 && (*((unsigned char *)a1 + 203) & 0x80) != 0) {
      *((_DWORD *)a1 + 506) = v335 & 0xFFFFFFFB;
    }
  }
  unsigned int v336 = v430[339];
  if (v336 <= 5) {
    *int v181 = 5 - v336;
  }
  if (v334 <= 2)
  {
    if (*((unsigned char *)v3 + 141)) {
      *((unsigned char *)v3 + 141) = 0;
    }
    *((unsigned char *)v3 + 140) = 0;
  }
  else
  {
    *((unsigned char *)v3 + 141) = 1;
  }
  if (*((_DWORD *)a1 + 66) == 1 && *((unsigned char *)v3 + 989)) {
    *((unsigned char *)v3 + 989) = 0;
  }
  if (*((_DWORD *)v3 + 233) == 1 && *((unsigned char *)v3 + 981)) {
    *((unsigned char *)v3 + 981) = 0;
  }
  if (!*((unsigned char *)v3 + 977) && *((_DWORD *)a1 + 56) == 1 && *((int *)a1 + 57) <= 0)
  {
    if (sub_D1C38(0x16u, 5))
    {
      int v337 = sub_D1C7C(0x16u);
      __uint64_t v338 = sub_DDEFC();
      __uint64_t v339 = (const char *)sub_D1CB0(5);
      int v340 = *((_DWORD *)a1 + 57);
      if (v337)
      {
        printf("%lld %d AVE %s: FIG: NonDroppableFrameRate = 1 and ExpectedFrameRate = %d. Not Supported\n", v338, 22, v339, v340);
        __uint64_t v341 = sub_DDEFC();
        uint64_t v422 = (const char *)sub_D1CB0(5);
        syslog(3, "%lld %d AVE %s: FIG: NonDroppableFrameRate = 1 and ExpectedFrameRate = %d. Not Supported", v341, 22, v422, *((_DWORD *)a1 + 57));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: NonDroppableFrameRate = 1 and ExpectedFrameRate = %d. Not Supported", v338, 22, v339, v340);
      }
    }
    *((_DWORD *)a1 + 56) = 0;
  }
  if (*((unsigned char *)a1 + 1772))
  {
    *((_DWORD *)a1 + 57) = *((_DWORD *)v3 + 398);
    *((_DWORD *)a1 + 506) &= ~4u;
  }
  if ((*((unsigned char *)a1 + 1876) & 0xE0) != 0)
  {
    *((unsigned char *)a1 + 253) = 1;
    *((unsigned char *)v3 + 821) = 1;
    if (!*((unsigned char *)v3 + 477)) {
      *((unsigned char *)v3 + 477) = 3;
    }
    *((unsigned char *)a1 + 120556) = 0;
    *((unsigned char *)v3 + 9) = 1;
    *((unsigned char *)v3 + 476) = 1;
    if (*((_DWORD *)v3 + 138) == 1) {
      *uint64_t v182 = 0;
    }
    if (*((_DWORD *)v3 + 141) >= 2u)
    {
      if (sub_D1C38(3u, 4))
      {
        int v342 = sub_D1C7C(3u);
        __uint64_t v343 = sub_DDEFC();
        v344 = (const char *)sub_D1CB0(4);
        if (v342)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: MCTF unsupported for MV-HEVC. Fail\n", v343, 3, v344, "AVE_ValidateEncoderParameters", 9077, "false");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: MCTF unsupported for MV-HEVC. Fail");
      }
      return 4294954394;
    }
    if (*((_DWORD *)a1 + 25773) != 1)
    {
      if (sub_D1C38(3u, 4))
      {
        int v351 = sub_D1C7C(3u);
        __uint64_t v352 = sub_DDEFC();
        int v353 = (const char *)sub_D1CB0(4);
        if (v351)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: MCTF for ChromaFmt %d... not supported. Fail\n", v352, 3, v353, "AVE_ValidateEncoderParameters", 9080, "(encoderPrivateStorage->saSPS[0].chroma_format_idc == ChromaFmt_420)", v9[139]);
          __uint64_t v352 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: MCTF for ChromaFmt %d... not supported. Fail", v352);
      }
      return 4294954394;
    }
  }
  else if (!*((unsigned char *)v3 + 9))
  {
    unint64_t v345 = (unint64_t)a1[25] & 0xFFFFFFFFFFFFFFFELL;
    char v346 = 1;
    goto LABEL_664;
  }
  char v346 = 0;
  unint64_t v345 = (unint64_t)a1[25] | 1;
LABEL_664:
  a1[25] = (const void *)v345;
  if (*((unsigned char *)v3 + 871))
  {
    if (*((int *)v3 + 404) > 0) {
      char v346 = 1;
    }
    if ((v346 & 1) != 0
      || *((_DWORD *)v3 + 141) > 1u
      || *((unsigned char *)v3 + 909)
      || (v345 & 0x80000000) != 0
      || *(void *)(v2 + 164)
      || *((int *)v3 + 226) >= 4)
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v347 = sub_D1C7C(0x16u);
        __uint64_t v348 = sub_DDEFC();
        int v349 = (const char *)sub_D1CB0(5);
        if (v347)
        {
          printf("%lld %d AVE %s: FIG: Force to disable Weighted Prediction\n", v348, 22, v349);
          __uint64_t v350 = sub_DDEFC();
          int v423 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: Force to disable Weighted Prediction", v350, 22, v423);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: Force to disable Weighted Prediction", v348, 22, v349);
        }
      }
      *((_DWORD *)v3 + 18) = 0;
      *((unsigned char *)v3 + 871) = 0;
      *(_WORD *)((char *)a1 + 118485) = 0;
      *((unsigned char *)a1 + 126884) = 0;
    }
  }
  if (*((unsigned char *)v3 + 184))
  {
    int v354 = *((_DWORD *)v3 + 47);
    if (v354 == 1)
    {
      if (sub_D1C38(0x16u, 5))
      {
        int v355 = sub_D1C7C(0x16u);
        __uint64_t v356 = sub_DDEFC();
        __uint64_t v357 = (const char *)sub_D1CB0(5);
        if (v355)
        {
          printf("%lld %d AVE %s: FIG: Only one slice. Force to Frame Encoding Mode\n", v356, 22, v357);
          __uint64_t v358 = sub_DDEFC();
          int v424 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: FIG: Only one slice. Force to Frame Encoding Mode", v358, 22, v424);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: Only one slice. Force to Frame Encoding Mode", v356, 22, v357);
        }
      }
      *((unsigned char *)v3 + 184) = 0;
      int v354 = *((_DWORD *)v3 + 47);
    }
    if (v354)
    {
      uint64_t v359 = 0;
      uint64_t v360 = (v354 - 1);
      int v361 = (int *)(v3 + 98);
      while (1)
      {
        if (v360 == v359)
        {
          int v362 = HIDWORD(a1[v360 + 2258]);
          if (v362 < 96) {
            break;
          }
        }
        else
        {
          int v362 = *v361;
          if (*v361 < 128) {
            break;
          }
        }
        if ((v362 + *(v361 - 1)) > *((_DWORD *)a1 + 471)) {
          break;
        }
        ++v359;
        v361 += 2;
        if (v354 == v359) {
          goto LABEL_706;
        }
      }
      if (sub_D1C38(0x16u, 5))
      {
        int v363 = sub_D1C7C(0x16u);
        __uint64_t v364 = sub_DDEFC();
        __uint64_t v365 = (const char *)sub_D1CB0(5);
        if (v363)
        {
          printf("%lld %d AVE %s: FIG: Slice Parameters Invalid. slice[%d] iY: %d, iHeight: %d, frame height: %d, Force to Frame Encoding\n", v364, 22, v365, v359, *(v361 - 1), *v361, *((_DWORD *)a1 + 471));
          __uint64_t v364 = sub_DDEFC();
          sub_D1CB0(5);
        }
        syslog(3, "%lld %d AVE %s: FIG: Slice Parameters Invalid. slice[%d] iY: %d, iHeight: %d, frame height: %d, Force to Frame Encoding", v364);
      }
      *((unsigned char *)v3 + 184) = 0;
      *(void *)(v3 + 94) = 1;
      *((_DWORD *)v3 + 49) = *((_DWORD *)a1 + 471);
    }
  }
LABEL_706:
  int v366 = *((_DWORD *)v2 + 36);
  if (v366 >= 8)
  {
    char v367 = 2;
    if (v366 <= 0x1C && ((1 << v366) & 0x14410800) != 0)
    {
      if (*((_DWORD *)a1 + 73)) {
        char v367 = 2;
      }
      else {
        char v367 = 5;
      }
    }
  }
  else
  {
    char v367 = 5;
  }
  *((unsigned char *)v3 + 573) = v367;
  int v368 = *((_DWORD *)a1 + 469) | 0x1E;
  *((_DWORD *)a1 + 469) = v368;
  if (!*((unsigned char *)v3 + 477)) {
    *((_DWORD *)a1 + 469) = v368 & 0xFFFFFFF7;
  }
  int v369 = *((_DWORD *)a1 + 25784);
  if (*((_DWORD *)a1 + 49) != 8)
  {
    if (sub_DEC60(v369 + 8, *((double *)a1 + 227)))
    {
      if (!sub_D1C38(3u, 4)) {
        return 4294954394;
      }
      int v370 = sub_D1C7C(3u);
      __uint64_t v19 = sub_DDEFC();
      int v371 = (const char *)sub_D1CB0(4);
      if (v370)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: Invalid Quality %f\n", v19, 3, v371, "AVE_ValidateEncoderParameters", 9190, "false", *((double *)a1 + 227));
        __uint64_t v19 = sub_DDEFC();
        int v371 = (const char *)sub_D1CB0(4);
      }
      __uint64_t v426 = a1[227];
      uint64_t v425 = 9190;
      v388 = v371;
      int v21 = "%lld %d AVE %s: %s:%d %s | FIG: Invalid Quality %f";
      goto LABEL_210;
    }
    int v369 = *((_DWORD *)a1 + 25784);
  }
  if (sub_DEC04(*((_DWORD *)a1 + 456), v369 + 8))
  {
    if (!sub_D1C38(3u, 4)) {
      return 4294954394;
    }
    int v372 = sub_D1C7C(3u);
    __uint64_t v19 = sub_DDEFC();
    __uint64_t v373 = (const char *)sub_D1CB0(4);
    if (v372)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: Invalid InitialQpI %d\n", v19, 3, v373, "AVE_ValidateEncoderParameters", 9195, "false", *((_DWORD *)a1 + 456));
      __uint64_t v19 = sub_DDEFC();
      __uint64_t v373 = (const char *)sub_D1CB0(4);
    }
    __uint64_t v426 = (const void *)*((unsigned int *)a1 + 456);
    uint64_t v425 = 9195;
    v388 = v373;
    int v21 = "%lld %d AVE %s: %s:%d %s | FIG: Invalid InitialQpI %d";
    goto LABEL_210;
  }
  if (sub_DEC04(*((_DWORD *)a1 + 457), *((_DWORD *)a1 + 25784) + 8))
  {
    if (!sub_D1C38(3u, 4)) {
      return 4294954394;
    }
    int v374 = sub_D1C7C(3u);
    __uint64_t v19 = sub_DDEFC();
    int v375 = (const char *)sub_D1CB0(4);
    if (v374)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: Invalid InitialQpP %d\n", v19, 3, v375, "AVE_ValidateEncoderParameters", 9200, "false", *((_DWORD *)a1 + 457));
      __uint64_t v19 = sub_DDEFC();
      int v375 = (const char *)sub_D1CB0(4);
    }
    __uint64_t v426 = (const void *)*((unsigned int *)a1 + 457);
    uint64_t v425 = 9200;
    v388 = v375;
    int v21 = "%lld %d AVE %s: %s:%d %s | FIG: Invalid InitialQpP %d";
    goto LABEL_210;
  }
  if (sub_DEC04(*((_DWORD *)a1 + 458), *((_DWORD *)a1 + 25784) + 8))
  {
    if (!sub_D1C38(3u, 4)) {
      return 4294954394;
    }
    int v376 = sub_D1C7C(3u);
    __uint64_t v19 = sub_DDEFC();
    int v377 = (const char *)sub_D1CB0(4);
    if (v376)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: Invalid InitialQpB %d\n", v19, 3, v377, "AVE_ValidateEncoderParameters", 9205, "false", *((_DWORD *)a1 + 458));
      __uint64_t v19 = sub_DDEFC();
      int v377 = (const char *)sub_D1CB0(4);
    }
    __uint64_t v426 = (const void *)*((unsigned int *)a1 + 458);
    uint64_t v425 = 9205;
    v388 = v377;
    int v21 = "%lld %d AVE %s: %s:%d %s | FIG: Invalid InitialQpB %d";
    goto LABEL_210;
  }
  int v378 = *((_DWORD *)a1 + 507) != 1 || *((_DWORD *)v3 + 142) != 1;
  uint64_t result = sub_C58EC(*((_DWORD *)v2 + 37), 1, *((_DWORD *)a1 + 470), *((_DWORD *)a1 + 471), v378);
  if (result)
  {
    if (!sub_D1C38(3u, 4)) {
      return 4294954394;
    }
    int v379 = sub_D1C7C(3u);
    __uint64_t v19 = sub_DDEFC();
    v380 = (const char *)sub_D1CB0(4);
    if (v379)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: dimensions (%dx%d) not supported %d.\n", v19, 3, v380, "AVE_ValidateEncoderParameters", 9219, "false", *((_DWORD *)a1 + 470), *((_DWORD *)a1 + 471), *((_DWORD *)a1 + 507));
      __uint64_t v19 = sub_DDEFC();
      v380 = (const char *)sub_D1CB0(4);
    }
    uint64_t v427 = *((unsigned int *)a1 + 471);
    uint64_t v428 = *((unsigned int *)a1 + 507);
    __uint64_t v426 = (const void *)*((unsigned int *)a1 + 470);
    uint64_t v425 = 9219;
    v388 = v380;
    int v21 = "%lld %d AVE %s: %s:%d %s | FIG: dimensions (%dx%d) not supported %d.";
    goto LABEL_210;
  }
  return result;
}

void sub_91464(uint64_t a1, __CVBuffer *a2)
{
  if (sub_D1C38(0x14u, 7))
  {
    int v4 = sub_D1C7C(0x14u);
    __uint64_t v5 = sub_DDEFC();
    __uint64_t v6 = (const char *)sub_D1CB0(7);
    if (v4)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_PrepareVideoAndSequenceHeader\n", v5, 20, v6);
      __uint64_t v7 = sub_DDEFC();
      unsigned int v276 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PrepareVideoAndSequenceHeader", v7, 20, v276);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PrepareVideoAndSequenceHeader", v5, 20, v6);
    }
  }
  if (!a2)
  {
    if (sub_D1C38(3u, 4))
    {
      int v11 = sub_D1C7C(3u);
      __uint64_t v12 = sub_DDEFC();
      __uint64_t v13 = (const char *)sub_D1CB0(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: imageBuffer = NULL.\n", v12, 3, v13, "AVE_PrepareVideoAndSequenceHeader", 6463, "imageBuffer != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: imageBuffer = NULL.");
    }
    goto LABEL_344;
  }
  pixelBuffer = a2;
  __uint64_t v8 = (BOOL *)(a1 + 109736);
  unsigned int v9 = (_DWORD *)(a1 + 102536);
  uint64_t v297 = a1 + 18808;
  __src = (_DWORD *)(a1 + 102520);
  int v295 = (_DWORD *)(a1 + 17920);
  __uint64_t v298 = (_DWORD *)(a1 + 102536);
  switch(*(_DWORD *)(a1 + 18808))
  {
    case 1:
      *(_WORD *)(a1 + 103260) = 1;
      goto LABEL_103;
    case 2:
    case 9:
      long long v308 = xmmword_14F350;
      long long v309 = unk_14F360;
      long long v310 = xmmword_14F370;
      long long v311 = unk_14F380;
      long long v304 = xmmword_14F310;
      long long v305 = unk_14F320;
      long long v306 = xmmword_14F330;
      long long v307 = unk_14F340;
      long long v300 = xmmword_14F2D0;
      long long v301 = unk_14F2E0;
      long long v302 = xmmword_14F2F0;
      long long v303 = unk_14F300;
      int v10 = &unk_14F390;
      goto LABEL_17;
    case 8:
      if (*(unsigned char *)(a1 + 18350))
      {
        long long v308 = xmmword_14DFD0;
        long long v309 = unk_14DFE0;
        long long v310 = xmmword_14DFF0;
        long long v311 = unk_14E000;
        long long v304 = xmmword_14DF90;
        long long v305 = unk_14DFA0;
        long long v306 = xmmword_14DFB0;
        long long v307 = unk_14DFC0;
        long long v300 = xmmword_14DF50;
        long long v301 = unk_14DF60;
        long long v302 = xmmword_14DF70;
        long long v303 = unk_14DF80;
        int v10 = &unk_14E010;
      }
      else
      {
        long long v308 = xmmword_14E990;
        long long v309 = unk_14E9A0;
        long long v310 = xmmword_14E9B0;
        long long v311 = unk_14E9C0;
        long long v304 = xmmword_14E950;
        long long v305 = unk_14E960;
        long long v306 = xmmword_14E970;
        long long v307 = unk_14E980;
        long long v300 = xmmword_14E910;
        long long v301 = unk_14E920;
        long long v302 = xmmword_14E930;
        long long v303 = unk_14E940;
        int v10 = &unk_14E9D0;
      }
LABEL_17:
      memcpy(__dst, v10, sizeof(__dst));
      uint64_t v14 = 0;
      *(_WORD *)(a1 + 103260) = 257;
      uint64_t v15 = a1 + 103408;
      uint64_t v16 = a1 + 103312;
      do
      {
        for (uint64_t i = 0; i != 6; ++i)
        {
          *(_DWORD *)(v16 + 4 * i) = 0;
          *(unsigned char *)(v15 + i) = 1;
        }
        ++v14;
        v15 += 6;
        v16 += 24;
      }
      while (v14 != 4);
      uint64_t v18 = 0;
      char v19 = 1;
      break;
    default:
      *(_WORD *)(a1 + 103260) = 0;
      goto LABEL_103;
  }
  do
  {
    uint64_t v20 = 0;
    char v21 = v19;
    uint64_t v22 = a1 + 103432 + (v18 << 7);
    do
    {
      uint64_t v23 = 0;
      uint64_t v24 = v20 + v18;
      do
      {
        v312[v23] = *((_WORD *)&v300 + 16 * v24 + 4 * byte_14DEB0[v23 * 2 + 1] + byte_14DEB0[v23 * 2]);
        ++v23;
      }
      while (v23 != 16);
      uint64_t v25 = 0;
      int v26 = 8;
      do
      {
        unsigned int v27 = v312[v25];
        unsigned __int16 v28 = v27 - v26;
        if ((int)(v27 - v26) <= 0) {
          __int16 v29 = 256;
        }
        else {
          __int16 v29 = -256;
        }
        unsigned __int16 v30 = v29 + v28;
        if ((unsigned __int16)(char)(v27 - v26) != v28) {
          unsigned __int16 v28 = v30;
        }
        *(_WORD *)(v22 + 2 * v25) = v28;
        int v31 = (v26 + v28);
        if (v31 != v27)
        {
          if (sub_D1C38(3u, 4))
          {
            int v71 = sub_D1C7C(3u);
            __uint64_t v72 = sub_DDEFC();
            __uint64_t v73 = (const char *)sub_D1CB0(4);
            if (v71)
            {
              printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingList[%d] %d\n", v72, 3, v73, "AVE_HEVC_set_default_scaling_lists", 6222, "nextCoef == ScalingList[i]", v31, v25, v27);
              __uint64_t v72 = sub_DDEFC();
              sub_D1CB0(4);
              unsigned int v9 = (_DWORD *)(a1 + 102536);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingList[%d] %d", v72, 3);
          }
          goto LABEL_103;
        }
        if (v27 <= 5)
        {
          if (sub_D1C38(3u, 4))
          {
            int v74 = sub_D1C7C(3u);
            __uint64_t v75 = sub_DDEFC();
            unsigned int v76 = (const char *)sub_D1CB0(4);
            if (v74)
            {
              printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)\n", v75, 3, v76, "AVE_HEVC_set_default_scaling_lists", 6223, "(nextCoef >= 6 && nextCoef <= 255)", v27);
              __uint64_t v75 = sub_DDEFC();
              sub_D1CB0(4);
              unsigned int v9 = (_DWORD *)(a1 + 102536);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)", v75);
          }
          goto LABEL_103;
        }
        if ((unsigned __int16)(char)v28 != v28)
        {
          if (sub_D1C38(3u, 4))
          {
            int v77 = sub_D1C7C(3u);
            __uint64_t v78 = sub_DDEFC();
            __uint64_t v79 = (const char *)sub_D1CB0(4);
            if (v77)
            {
              printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix scaling_list_delta_coef[%d][%d][%d] = (%d)\n", v78, 3, v79, "AVE_HEVC_set_default_scaling_lists", 6224, "(sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] >= -128 && sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] <= 127)", 0, v24, v25, *(__int16 *)(v22 + 2 * v25));
              __uint64_t v78 = sub_DDEFC();
              sub_D1CB0(4);
              unsigned int v9 = (_DWORD *)(a1 + 102536);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix scaling_list_delta_coef[%d][%d][%d] = (%d)", v78, 3);
          }
          goto LABEL_103;
        }
        ++v25;
        int v26 = v27;
      }
      while (v25 != 16);
      ++v20;
      v22 += 128;
    }
    while (v20 != 3);
    char v19 = 0;
    uint64_t v18 = 3;
  }
  while ((v21 & 1) != 0);
  uint64_t v32 = 0;
  char v33 = 1;
  do
  {
    uint64_t v34 = 0;
    char v35 = v33;
    uint64_t v36 = a1 + 104200 + (v32 << 7);
    do
    {
      uint64_t v37 = 0;
      uint64_t v38 = v34 + v32;
      do
      {
        v312[v37] = *(_WORD *)&__dst[128 * v38 + 16 * byte_14DED0[v37 * 2 + 1] + 2 * byte_14DED0[v37 * 2]];
        ++v37;
      }
      while (v37 != 64);
      uint64_t v39 = 0;
      int v40 = 8;
      do
      {
        unsigned int v41 = v312[v39];
        unsigned __int16 v42 = v41 - v40;
        if ((int)(v41 - v40) <= 0) {
          __int16 v43 = 256;
        }
        else {
          __int16 v43 = -256;
        }
        unsigned __int16 v44 = v43 + v42;
        if ((unsigned __int16)(char)(v41 - v40) != v42) {
          unsigned __int16 v42 = v44;
        }
        *(_WORD *)(v36 + 2 * v39) = v42;
        int v45 = (v40 + v42);
        if (v45 != v41)
        {
          unsigned int v9 = (_DWORD *)(a1 + 102536);
          if (!sub_D1C38(3u, 4)) {
            goto LABEL_103;
          }
          int v237 = sub_D1C7C(3u);
          __uint64_t v238 = sub_DDEFC();
          __uint64_t v239 = (const char *)sub_D1CB0(4);
          if (v237)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingList[%d] %d\n", v238, 3, v239, "AVE_HEVC_set_default_scaling_lists", 6261, "nextCoef == ScalingList[i]", v45, v39, v41);
            __uint64_t v238 = sub_DDEFC();
            sub_D1CB0(4);
          }
LABEL_367:
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingList[%d] %d", v238, 3);
          goto LABEL_377;
        }
        if (v41 <= 5)
        {
          unsigned int v9 = (_DWORD *)(a1 + 102536);
          if (!sub_D1C38(3u, 4)) {
            goto LABEL_103;
          }
          int v240 = sub_D1C7C(3u);
          __uint64_t v241 = sub_DDEFC();
          int v242 = (const char *)sub_D1CB0(4);
          if (v240)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)\n", v241, 3, v242, "AVE_HEVC_set_default_scaling_lists", 6262, "(nextCoef >= 6 && nextCoef <= 255)", v41);
            __uint64_t v243 = sub_DDEFC();
            sub_D1CB0(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)", v243);
            goto LABEL_377;
          }
          goto LABEL_386;
        }
        if ((unsigned __int16)(char)v42 != v42)
        {
          unsigned int v9 = (_DWORD *)(a1 + 102536);
          if (sub_D1C38(3u, 4))
          {
            int v244 = sub_D1C7C(3u);
            __uint64_t v245 = sub_DDEFC();
            int v246 = (const char *)sub_D1CB0(4);
            if (!v244) {
              goto LABEL_376;
            }
            printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix scaling_list_delta_coef[%d][%d][%d] = (%d)\n", v245, 3, v246, "AVE_HEVC_set_default_scaling_lists", 6263, "(sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] >= -128 && sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] <= 127)", 1, v38, v39, *(__int16 *)(v36 + 2 * v39));
            __uint64_t v247 = sub_DDEFC();
            sub_D1CB0(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix scaling_list_delta_coef[%d][%d][%d] = (%d)", v247, 3);
LABEL_377:
            unsigned int v9 = (_DWORD *)(a1 + 102536);
          }
          goto LABEL_103;
        }
        ++v39;
        int v40 = v41;
      }
      while (v39 != 64);
      ++v34;
      v36 += 128;
    }
    while (v34 != 3);
    char v33 = 0;
    uint64_t v32 = 3;
  }
  while ((v35 & 1) != 0);
  uint64_t v46 = 0;
  char v47 = 1;
  while (2)
  {
    uint64_t v48 = 0;
    char v49 = v47;
    uint64_t v50 = a1 + 104968 + (v46 << 7);
    while (2)
    {
      uint64_t v51 = v48 + v46;
      int v52 = *(__int16 *)&__dst[128 * v48 + 768 + 128 * v46];
      int v53 = *(unsigned __int16 *)&__dst[128 * v48 + 768 + 128 * v46];
      *(_DWORD *)(a1 + 103264 + 4 * (v48 + v46)) = v53 - 8;
      if (v52 != (unsigned __int16)v52)
      {
        unsigned int v9 = (_DWORD *)(a1 + 102536);
        if (sub_D1C38(3u, 4))
        {
          int v257 = sub_D1C7C(3u);
          __uint64_t v258 = sub_DDEFC();
          __uint64_t v259 = (const char *)sub_D1CB0(4);
          if (v257)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingListDefault[%d][%d][0] %d\n", v258, 3, v259, "AVE_HEVC_set_default_scaling_lists", 6285, "nextCoef == LocalExplicitScalingList[sizeId-1][matrixId][0]", v52, 1, v51, v53);
            __uint64_t v260 = sub_DDEFC();
            sub_D1CB0(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingListDefault[%d][%d][0] %d", v260, 3);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingListDefault[%d][%d][0] %d", v258, 3);
          }
          goto LABEL_377;
        }
        goto LABEL_103;
      }
      if ((v53 - 6) > 0xF9)
      {
        unsigned int v9 = (_DWORD *)(a1 + 102536);
        if (!sub_D1C38(3u, 4)) {
          goto LABEL_103;
        }
        int v261 = sub_D1C7C(3u);
        __uint64_t v241 = sub_DDEFC();
        __uint64_t v262 = (const char *)sub_D1CB0(4);
        if (v261)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)\n", v241, 3, v262, "AVE_HEVC_set_default_scaling_lists", 6286, "(nextCoef >= 6 && nextCoef <= 255)", v53);
          __uint64_t v241 = sub_DDEFC();
          sub_D1CB0(4);
        }
LABEL_386:
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)", v241);
        goto LABEL_377;
      }
      for (uint64_t j = 0; j != 64; ++j)
        v312[j] = *(_WORD *)&__dst[128 * v51 + 768 + 16 * byte_14DED0[j * 2 + 1] + 2 * byte_14DED0[j * 2]];
      for (uint64_t k = 0; k != 64; ++k)
      {
        unsigned int v56 = v312[k];
        unsigned __int16 v57 = v56 - v53;
        if ((int)(v56 - (__int16)v53) <= 0) {
          __int16 v58 = 256;
        }
        else {
          __int16 v58 = -256;
        }
        if ((unsigned __int16)(char)(v56 - v53) != v57) {
          unsigned __int16 v57 = v58 + v56 - v53;
        }
        *(_WORD *)(v50 + 2 * k) = v57;
        int v59 = (v57 + v53);
        if (v59 != v56)
        {
          unsigned int v9 = (_DWORD *)(a1 + 102536);
          if (!sub_D1C38(3u, 4)) {
            goto LABEL_103;
          }
          int v248 = sub_D1C7C(3u);
          __uint64_t v238 = sub_DDEFC();
          __uint64_t v249 = (const char *)sub_D1CB0(4);
          if (v248)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingList[%d] %d\n", v238, 3, v249, "AVE_HEVC_set_default_scaling_lists", 6309, "nextCoef == ScalingList[i]", v59, k, v56);
LABEL_381:
            __uint64_t v238 = sub_DDEFC();
            sub_D1CB0(4);
          }
          goto LABEL_367;
        }
        if (v56 <= 5)
        {
          unsigned int v9 = (_DWORD *)(a1 + 102536);
          if (!sub_D1C38(3u, 4)) {
            goto LABEL_103;
          }
          int v250 = sub_D1C7C(3u);
          __uint64_t v241 = sub_DDEFC();
          __uint64_t v251 = (const char *)sub_D1CB0(4);
          if (v250)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)\n", v241, 3, v251, "AVE_HEVC_set_default_scaling_lists", 6310, "(nextCoef >= 6 && nextCoef <= 255)", v56);
LABEL_385:
            __uint64_t v241 = sub_DDEFC();
            sub_D1CB0(4);
          }
          goto LABEL_386;
        }
        if ((unsigned __int16)(char)v57 != v57)
        {
          unsigned int v9 = (_DWORD *)(a1 + 102536);
          if (!sub_D1C38(3u, 4)) {
            goto LABEL_103;
          }
          int v252 = sub_D1C7C(3u);
          __uint64_t v253 = sub_DDEFC();
          int v254 = (const char *)sub_D1CB0(4);
          if (v252)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix scaling_list_delta_coef[%d][%d][%d] = (%d)\n", v253, 3, v254, "AVE_HEVC_set_default_scaling_lists", 6311, "(sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] >= -128 && sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] <= 127)", 2, v51, k, *(__int16 *)(v50 + 2 * k));
            __uint64_t v255 = sub_DDEFC();
            sub_D1CB0(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix scaling_list_delta_coef[%d][%d][%d] = (%d)", v255, 3);
            goto LABEL_377;
          }
          uint64_t v292 = k;
          uint64_t v293 = *(__int16 *)(v50 + 2 * k);
          uint64_t v289 = 2;
          uint64_t v291 = v51;
          uint64_t v285 = 6311;
          uint64_t v287 = "(sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] >= -128 && sps->scaling_list_data."
                 "scaling_list_delta_coef[sizeId][matrixId][i] <= 127)";
          int v283 = v254;
          int v256 = "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix scaling_list_delta_coef[%d][%d][%d] = (%d)";
          goto LABEL_393;
        }
        LOWORD(v53) = v56;
      }
      ++v48;
      v50 += 128;
      if (v48 != 3) {
        continue;
      }
      break;
    }
    char v47 = 0;
    uint64_t v46 = 3;
    if (v49) {
      continue;
    }
    break;
  }
  uint64_t v60 = 0;
  char v61 = 1;
  unsigned int v9 = (_DWORD *)(a1 + 102536);
LABEL_72:
  char v62 = v61;
  uint64_t v63 = *(__int16 *)&__dst[128 * v60 + 1536];
  uint64_t v64 = *(unsigned __int16 *)&__dst[128 * v60 + 1536];
  __src[v60 + 192] = v64 - 8;
  if (v63 == (unsigned __int16)v63)
  {
    if ((v64 - 6) <= 0xF9)
    {
      for (uint64_t m = 0; m != 64; ++m)
        v312[m] = *(_WORD *)&__dst[128 * v60 + 1536 + 16 * byte_14DED0[m * 2 + 1] + 2 * byte_14DED0[m * 2]];
      uint64_t v66 = 0;
      while (1)
      {
        unsigned int v67 = v312[v66];
        unsigned __int16 v68 = v67 - v64;
        if ((int)(v67 - (__int16)v64) <= 0) {
          __int16 v69 = 256;
        }
        else {
          __int16 v69 = -256;
        }
        if ((unsigned __int16)(char)(v67 - v64) != v68) {
          unsigned __int16 v68 = v69 + v67 - v64;
        }
        *(_WORD *)(a1 + 105736 + (v60 << 7) + 2 * v66) = v68;
        int v70 = (v68 + v64);
        if (v70 != v67)
        {
          unsigned int v9 = (_DWORD *)(a1 + 102536);
          if (!sub_D1C38(3u, 4)) {
            goto LABEL_103;
          }
          int v263 = sub_D1C7C(3u);
          __uint64_t v238 = sub_DDEFC();
          int v264 = (const char *)sub_D1CB0(4);
          if (v263)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingList[%d] %d\n", v238, 3, v264, "AVE_HEVC_set_default_scaling_lists", 6356, "nextCoef == ScalingList[i]", v70, v66, v67);
            goto LABEL_381;
          }
          goto LABEL_367;
        }
        if (v67 <= 5)
        {
          unsigned int v9 = (_DWORD *)(a1 + 102536);
          if (!sub_D1C38(3u, 4)) {
            goto LABEL_103;
          }
          int v265 = sub_D1C7C(3u);
          __uint64_t v241 = sub_DDEFC();
          int v266 = (const char *)sub_D1CB0(4);
          if (v265)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)\n", v241, 3, v266, "AVE_HEVC_set_default_scaling_lists", 6357, "(nextCoef >= 6 && nextCoef <= 255)", v67);
            goto LABEL_385;
          }
          goto LABEL_386;
        }
        if ((unsigned __int16)(char)v68 != v68) {
          break;
        }
        ++v66;
        LOWORD(v64) = v67;
        if (v66 == 64)
        {
          char v61 = 0;
          uint64_t v60 = 3;
          if (v62) {
            goto LABEL_72;
          }
          goto LABEL_103;
        }
      }
      unsigned int v9 = (_DWORD *)(a1 + 102536);
      if (!sub_D1C38(3u, 4)) {
        goto LABEL_103;
      }
      int v267 = sub_D1C7C(3u);
      __uint64_t v245 = sub_DDEFC();
      unsigned int v268 = (const char *)sub_D1CB0(4);
      if (v267)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix scaling_list_delta_coef[%d][%d][%d] = (%d)\n", v245, 3, v268, "AVE_HEVC_set_default_scaling_lists", 6358, "(sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] >= -128 && sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] <= 127)", 3, v60, v66, *(__int16 *)(a1 + (v60 << 7) + 105736 + 2 * v66));
        __uint64_t v269 = sub_DDEFC();
        sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix scaling_list_delta_coef[%d][%d][%d] = (%d)", v269, 3);
        goto LABEL_377;
      }
LABEL_376:
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix scaling_list_delta_coef[%d][%d][%d] = (%d)", v245, 3);
      goto LABEL_377;
    }
    unsigned int v9 = (_DWORD *)(a1 + 102536);
    if (sub_D1C38(3u, 4))
    {
      int v274 = sub_D1C7C(3u);
      __uint64_t v253 = sub_DDEFC();
      int v275 = (const char *)sub_D1CB0(4);
      if (v274)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)\n", v253, 3, v275, "AVE_HEVC_set_default_scaling_lists", 6333, "(nextCoef >= 6 && nextCoef <= 255)", v64);
        __uint64_t v272 = sub_DDEFC();
        unsigned __int8 v288 = "(nextCoef >= 6 && nextCoef <= 255)";
        uint64_t v290 = v64;
        uint64_t v286 = 6333;
        unsigned int v284 = sub_D1CB0(4);
        __uint64_t v273 = "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)";
        goto LABEL_420;
      }
      uint64_t v287 = "(nextCoef >= 6 && nextCoef <= 255)";
      uint64_t v289 = v64;
      uint64_t v285 = 6333;
      int v283 = v275;
      int v256 = "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)";
      goto LABEL_393;
    }
  }
  else
  {
    unsigned int v9 = (_DWORD *)(a1 + 102536);
    if (sub_D1C38(3u, 4))
    {
      int v270 = sub_D1C7C(3u);
      __uint64_t v253 = sub_DDEFC();
      CFNumberRef v271 = (const char *)sub_D1CB0(4);
      if (v270)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingListDefault[%d][%d][0] %d\n", v253, 3, v271, "AVE_HEVC_set_default_scaling_lists", 6332, "nextCoef == LocalExplicitScalingList[sizeId-1][matrixId][0]", v63, 2, v60, v64);
        __uint64_t v272 = sub_DDEFC();
        uint64_t v292 = v60;
        uint64_t v293 = v64;
        uint64_t v290 = v63;
        uint64_t v291 = 2;
        uint64_t v286 = 6332;
        unsigned __int8 v288 = "nextCoef == LocalExplicitScalingList[sizeId-1][matrixId][0]";
        unsigned int v284 = sub_D1CB0(4);
        __uint64_t v273 = "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingListDefault[%d][%d][0] %d";
LABEL_420:
        syslog(3, v273, v272, 3, v284, "AVE_HEVC_set_default_scaling_lists", v286, v288, v290, v291, v292, v293);
        goto LABEL_377;
      }
      uint64_t v292 = v60;
      uint64_t v293 = v64;
      uint64_t v289 = v63;
      uint64_t v291 = 2;
      uint64_t v285 = 6332;
      uint64_t v287 = "nextCoef == LocalExplicitScalingList[sizeId-1][matrixId][0]";
      int v283 = v271;
      int v256 = "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingListDefault[%d][%d][0] %d";
LABEL_393:
      syslog(3, v256, v253, 3, v283, "AVE_HEVC_set_default_scaling_lists", v285, v287, v289, v291, v292, v293);
      goto LABEL_377;
    }
  }
LABEL_103:
  int v80 = (unsigned char *)(a1 + 87668);
  int v81 = *(_DWORD *)(a1 + 1880);
  v9[141] = v81;
  int v82 = *(_DWORD *)(a1 + 1884);
  v9[142] = v82;
  if (*(_DWORD *)(a1 + 103240) == 3) {
    int v83 = 63;
  }
  else {
    int v83 = 31;
  }
  if (*(_DWORD *)(a1 + 103240) == 3) {
    char v84 = 6;
  }
  else {
    char v84 = 5;
  }
  v9[143] = (v81 + v83) >> v84;
  v9[144] = (v82 + v83) >> v84;
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  int v86 = sub_D7E18(PixelFormatType);
  if (v86)
  {
    int v87 = v86;
    int v88 = *((_DWORD *)v86 + 7);
    BOOL v89 = 1;
    if (v88 != 1) {
      BOOL v89 = *v8;
    }
    *__uint64_t v8 = v89;
    *(_DWORD *)(a1 + 109760) = v88 == 1;
    *(unsigned char *)(a1 + 109753) = 1;
    if (sub_D1C38(0x1Eu, 6))
    {
      int v90 = sub_D1C7C(0x1Eu);
      __uint64_t v91 = sub_DDEFC();
      int v92 = (const char *)sub_D1CB0(6);
      if (v90)
      {
        printf("%lld %d AVE %s: FIG: video_full_range_flag %d\n", v91, 30, v92, *((_DWORD *)v87 + 7) == 1);
        sub_DDEFC();
        sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: video_full_range_flag %d");
    }
  }
  else if (sub_D1C38(0x1Eu, 6))
  {
    int v93 = sub_D1C7C(0x1Eu);
    __uint64_t v94 = sub_DDEFC();
    __uint64_t v95 = (const char *)sub_D1CB0(6);
    if (v93)
    {
      printf("%lld %d AVE %s: FIG: Unknown dynamic range\n", v94, 30, v95);
      sub_DDEFC();
      sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: FIG: Unknown dynamic range");
  }
  uint64_t v96 = *(void *)(a1 + 20168);
  if ((v96 & 0x10) != 0)
  {
    int v97 = *(_DWORD *)(a1 + 228);
    if (v97 < 1) {
      int v97 = 30;
    }
    *int v80 = 1;
    unsigned int v98 = 0x19BFCC0u / v97;
    *(_DWORD *)(a1 + 87672) = v98;
    *(_DWORD *)(a1 + 87676) = 27000000;
    *(unsigned char *)(a1 + 109812) = 1;
    *(_DWORD *)(a1 + 109816) = v98;
    *(_DWORD *)(a1 + 109820) = 27000000;
  }
  if ((v96 & 0x20) != 0)
  {
    *int v80 = 0;
    *(unsigned char *)(a1 + 109812) = 0;
  }
  else if (*v80)
  {
    BOOL v99 = 1;
    goto LABEL_129;
  }
  BOOL v99 = *v8;
LABEL_129:
  *(unsigned char *)(a1 + 109736) = *(unsigned char *)(a1 + 109877) | *(unsigned char *)(a1 + 109780) | *(unsigned char *)(a1 + 109737) | v99;
  CFTypeRef v100 = CVBufferCopyAttachment(pixelBuffer, kCVImageBufferChromaLocationTopFieldKey, 0);
  if (v100)
  {
    int v101 = v100;
    if (sub_D1C38(0x1Eu, 6))
    {
      int v102 = sub_D1C7C(0x1Eu);
      __uint64_t v103 = sub_DDEFC();
      __uint64_t v104 = (const char *)sub_D1CB0(6);
      if (v102)
      {
        printf("%lld %d AVE %s: FIG: kCVImageBufferChromaLocationTopFieldKey found!\n", v103, 30, v104);
        __uint64_t v105 = sub_DDEFC();
        int v277 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: kCVImageBufferChromaLocationTopFieldKey found!", v105, 30, v277);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: kCVImageBufferChromaLocationTopFieldKey found!", v103, 30, v104);
      }
    }
    if (CFEqual(v101, kCVImageBufferChromaLocation_Left))
    {
LABEL_135:
      int v106 = 0;
    }
    else if (CFEqual(v101, kCVImageBufferChromaLocation_Center))
    {
      int v106 = 1;
    }
    else if (CFEqual(v101, kCVImageBufferChromaLocation_TopLeft))
    {
      int v106 = 2;
    }
    else if (CFEqual(v101, kCVImageBufferChromaLocation_Top))
    {
      int v106 = 3;
    }
    else if (CFEqual(v101, kCVImageBufferChromaLocation_BottomLeft))
    {
      int v106 = 4;
    }
    else
    {
      if (!CFEqual(v101, kCVImageBufferChromaLocation_Bottom))
      {
        if (sub_D1C38(0x1Eu, 5))
        {
          int v229 = sub_D1C7C(0x1Eu);
          __uint64_t v230 = sub_DDEFC();
          __uint64_t v231 = (const char *)sub_D1CB0(5);
          if (v229)
          {
            printf("%lld %d AVE %s: AVE FIG WARNING: kCVImageBufferChromaLocationTopFieldKey with invalid value -> use default\n", v230, 30, v231);
            __uint64_t v232 = sub_DDEFC();
            int v281 = (const char *)sub_D1CB0(5);
            syslog(3, "%lld %d AVE %s: AVE FIG WARNING: kCVImageBufferChromaLocationTopFieldKey with invalid value -> use default", v232, 30, v281);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: AVE FIG WARNING: kCVImageBufferChromaLocationTopFieldKey with invalid value -> use default", v230, 30, v231);
          }
        }
        goto LABEL_135;
      }
      int v106 = 5;
    }
    *(_DWORD *)(a1 + 109784) = v106;
    *(_DWORD *)(a1 + 109788) = v106;
    if (sub_D1C38(0x1Eu, 6))
    {
      int v107 = sub_D1C7C(0x1Eu);
      __uint64_t v108 = sub_DDEFC();
      __uint64_t v109 = (const char *)sub_D1CB0(6);
      int v110 = *(_DWORD *)(a1 + 109788);
      if (v107)
      {
        printf("%lld %d AVE %s: FIG: chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d\n", v108, 30, v109, *(_DWORD *)(a1 + 109784), v110);
        __uint64_t v111 = sub_DDEFC();
        int v112 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d", v111, 30, v112, *(_DWORD *)(a1 + 109784), *(_DWORD *)(a1 + 109788));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d", v108, 30, v109, *(_DWORD *)(a1 + 109784), v110);
      }
    }
    CFRelease(v101);
  }
  CFTypeRef v113 = CVBufferCopyAttachment(pixelBuffer, kCVImageBufferChromaLocationBottomFieldKey, 0);
  if (v113)
  {
    uint64_t v114 = v113;
    if (sub_D1C38(0x1Eu, 6))
    {
      int v115 = sub_D1C7C(0x1Eu);
      __uint64_t v116 = sub_DDEFC();
      uint64_t v117 = (const char *)sub_D1CB0(6);
      if (v115)
      {
        printf("%lld %d AVE %s: FIG: kCVImageBufferChromaLocationBottomFieldKey found!\n", v116, 30, v117);
        __uint64_t v118 = sub_DDEFC();
        __uint64_t v278 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: kCVImageBufferChromaLocationBottomFieldKey found!", v118, 30, v278);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: kCVImageBufferChromaLocationBottomFieldKey found!", v116, 30, v117);
      }
    }
    if (CFEqual(v114, kCVImageBufferChromaLocation_Left))
    {
LABEL_157:
      int v119 = 0;
    }
    else if (CFEqual(v114, kCVImageBufferChromaLocation_Center))
    {
      int v119 = 1;
    }
    else if (CFEqual(v114, kCVImageBufferChromaLocation_TopLeft))
    {
      int v119 = 2;
    }
    else if (CFEqual(v114, kCVImageBufferChromaLocation_Top))
    {
      int v119 = 3;
    }
    else if (CFEqual(v114, kCVImageBufferChromaLocation_BottomLeft))
    {
      int v119 = 4;
    }
    else
    {
      if (!CFEqual(v114, kCVImageBufferChromaLocation_Bottom))
      {
        if (sub_D1C38(0x1Eu, 5))
        {
          int v233 = sub_D1C7C(0x1Eu);
          __uint64_t v234 = sub_DDEFC();
          __uint64_t v235 = (const char *)sub_D1CB0(5);
          if (v233)
          {
            printf("%lld %d AVE %s: AVE FIG WARNING: kCVImageBufferChromaLocationTopFieldKey with invalid value -> use default\n", v234, 30, v235);
            __uint64_t v236 = sub_DDEFC();
            __uint64_t v282 = (const char *)sub_D1CB0(5);
            syslog(3, "%lld %d AVE %s: AVE FIG WARNING: kCVImageBufferChromaLocationTopFieldKey with invalid value -> use default", v236, 30, v282);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: AVE FIG WARNING: kCVImageBufferChromaLocationTopFieldKey with invalid value -> use default", v234, 30, v235);
          }
        }
        goto LABEL_157;
      }
      int v119 = 5;
    }
    *(_DWORD *)(a1 + 109788) = v119;
    if (sub_D1C38(0x1Eu, 6))
    {
      int v120 = sub_D1C7C(0x1Eu);
      __uint64_t v121 = sub_DDEFC();
      int v122 = (const char *)sub_D1CB0(6);
      int v123 = *(_DWORD *)(a1 + 109788);
      if (v120)
      {
        printf("%lld %d AVE %s: FIG: chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d\n", v121, 30, v122, *(_DWORD *)(a1 + 109784), v123);
        __uint64_t v124 = sub_DDEFC();
        char v125 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d", v124, 30, v125, *(_DWORD *)(a1 + 109784), *(_DWORD *)(a1 + 109788));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d", v121, 30, v122, *(_DWORD *)(a1 + 109784), v123);
      }
    }
    CFRelease(v114);
  }
  if (*(_DWORD *)(a1 + 109784) || *(_DWORD *)(a1 + 109788))
  {
    *__uint64_t v8 = 1;
    *(unsigned char *)(a1 + 109780) = 1;
    if (sub_D1C38(0x1Eu, 6))
    {
      int v126 = sub_D1C7C(0x1Eu);
      __uint64_t v127 = sub_DDEFC();
      CFDictionaryRef v128 = (const char *)sub_D1CB0(6);
      if (v126)
      {
        printf("%lld %d AVE %s: FIG: chroma_loc_info_present_flag TRUE\n", v127, 30, v128);
        __uint64_t v129 = sub_DDEFC();
        v279 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: chroma_loc_info_present_flag TRUE", v129, 30, v279);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: chroma_loc_info_present_flag TRUE", v127, 30, v128);
      }
    }
  }
  if (sub_D1C38(0x1Eu, 6))
  {
    int v130 = sub_D1C7C(0x1Eu);
    __uint64_t v131 = sub_DDEFC();
    __uint64_t v132 = (const char *)sub_D1CB0(6);
    int v133 = *(unsigned __int8 *)(a1 + 109780);
    int v134 = *(_DWORD *)(a1 + 109788);
    if (v130)
    {
      printf("%lld %d AVE %s: FIG: chroma_loc_info_present_flag %d , chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d\n", v131, 30, v132, v133, *(_DWORD *)(a1 + 109784), v134);
      __uint64_t v135 = sub_DDEFC();
      int v136 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: FIG: chroma_loc_info_present_flag %d , chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d", v135, 30, v136, *(unsigned __int8 *)(a1 + 109780), *(_DWORD *)(a1 + 109784), *(_DWORD *)(a1 + 109788));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: chroma_loc_info_present_flag %d , chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d", v131, 30, v132, v133, *(_DWORD *)(a1 + 109784), v134);
    }
  }
  if ((*(unsigned char *)(a1 + 20168) & 2) != 0) {
    *__uint64_t v8 = 0;
  }
  int v137 = *(_DWORD *)(a1 + 183420);
  if (!v137) {
    int v137 = *(_DWORD *)(a1 + 20400);
  }
  if (v137 > 1009)
  {
    if (v137 <= 1307)
    {
      if (v137 == 1010)
      {
LABEL_201:
        *(unsigned char *)(a1 + 20408) = 1;
        *(unsigned char *)(a1 + 102560) = 1;
        *(unsigned char *)(a1 + 20448) = 1;
        *(unsigned char *)(a1 + 102600) = 1;
        *(_DWORD *)(a1 + 20400) = 4;
        *(_DWORD *)(a1 + 102552) = 4;
        int v138 = *(_DWORD *)(a1 + 103092);
        if (v138)
        {
          if (sub_D1C38(3u, 4))
          {
            int v141 = sub_D1C7C(3u);
            __uint64_t v142 = sub_DDEFC();
            int v143 = (const char *)sub_D1CB0(4);
            if (v141)
            {
              printf("%lld %d AVE %s: %s:%d %s | FIG: chroma_format_idc (%d) and profile_idc (%d) combination not supported\n", v142, 3, v143, "AVE_PrepareVideoAndSequenceHeader", 6939, "false", v298[139], *(_DWORD *)(v297 + 1592));
              goto LABEL_249;
            }
            goto LABEL_343;
          }
          goto LABEL_344;
        }
        *(unsigned char *)(a1 + 20440) = 1;
        BOOL v150 = v137 == 1008;
        BOOL v151 = v137 == 1010 || v137 == 1008;
        *(unsigned char *)(a1 + 20441) = v151;
        *(unsigned char *)(a1 + 20442) = v150;
        *(_DWORD *)(a1 + 20443) = 65793;
        *(unsigned char *)(a1 + 20447) = 0;
        *(unsigned char *)(a1 + 102592) = 1;
        *(unsigned char *)(a1 + 102593) = v151;
        *(unsigned char *)(a1 + 102594) = v150;
        *(_DWORD *)(a1 + 102595) = 65793;
        *(unsigned char *)(a1 + 102599) = 0;
        goto LABEL_256;
      }
      if (v137 != 1210) {
        goto LABEL_222;
      }
      *(unsigned char *)(a1 + 20408) = 1;
      *(unsigned char *)(a1 + 102560) = 1;
      *(unsigned char *)(a1 + 20448) = 1;
      *(unsigned char *)(a1 + 102600) = 1;
      *(_DWORD *)(a1 + 20400) = 4;
      *(_DWORD *)(a1 + 102552) = 4;
      int v138 = *(_DWORD *)(a1 + 103092);
      if ((v138 - 1) < 2)
      {
        *(_WORD *)(a1 + 20440) = 257;
        int v139 = *(unsigned __int8 *)(a1 + 18849);
        if (*(unsigned char *)(a1 + 18849)) {
          BOOL v140 = 0;
        }
        else {
          BOOL v140 = *v295 == 8;
        }
        BOOL v164 = 0;
        *(unsigned char *)(a1 + 20442) = v140;
        *(unsigned char *)(a1 + 20443) = 1;
        *(_DWORD *)(a1 + 20444) = 0;
        *(_WORD *)(a1 + 102592) = 257;
        if (!v139) {
          BOOL v164 = *v295 == 8;
        }
        *(unsigned char *)(a1 + 102594) = v164;
        *(unsigned char *)(a1 + 102595) = 1;
        *(_DWORD *)(a1 + 102596) = 0;
        goto LABEL_256;
      }
      if (!v138)
      {
LABEL_244:
        *(void *)(a1 + 20440) = 0x10101000001;
        *(void *)(a1 + 102592) = 0x10101000001;
        goto LABEL_256;
      }
      if (!sub_D1C38(3u, 4)) {
        goto LABEL_344;
      }
      int v161 = sub_D1C7C(3u);
      __uint64_t v142 = sub_DDEFC();
      int v162 = (const char *)sub_D1CB0(4);
      if (!v161) {
        goto LABEL_343;
      }
      printf("%lld %d AVE %s: %s:%d %s | FIG: chroma_format_idc (%d) and profile_idc (%d) combination not supported\n", v142, 3, v162, "AVE_PrepareVideoAndSequenceHeader", 6898, "false", v298[139], *(_DWORD *)(v297 + 1592));
LABEL_249:
      __uint64_t v163 = sub_DDEFC();
      sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: chroma_format_idc (%d) and profile_idc (%d) combination not supported", v163);
      goto LABEL_344;
    }
    if (v137 == 1308)
    {
      if (!*(_DWORD *)(a1 + 103136) && !*(_DWORD *)(a1 + 103140))
      {
        *(unsigned char *)(a1 + 20408) = 1;
        *(unsigned char *)(a1 + 102560) = 1;
        *(unsigned char *)(a1 + 20448) = 1;
        *(unsigned char *)(a1 + 102600) = 1;
        *(_DWORD *)(a1 + 20400) = 4;
        *(_DWORD *)(a1 + 102552) = 4;
        int v138 = *(_DWORD *)(a1 + 103092);
        if ((v138 - 1) < 3)
        {
          *(_WORD *)(a1 + 20440) = 257;
          *(unsigned char *)(a1 + 20442) = 1;
          *(_DWORD *)(a1 + 20443) = 0;
          *(unsigned char *)(a1 + 20447) = 0;
          *(_WORD *)(a1 + 102592) = 257;
          *(unsigned char *)(a1 + 102594) = 1;
          *(_DWORD *)(a1 + 102595) = 0;
          *(unsigned char *)(a1 + 102599) = 0;
          goto LABEL_256;
        }
        if (!v138)
        {
          *(_WORD *)(a1 + 20444) = 257;
          *(_DWORD *)(a1 + 20440) = 16843009;
          *(_WORD *)(a1 + 20446) = 0;
          *(_DWORD *)(a1 + 102592) = 16843009;
          *(_WORD *)(a1 + 102596) = 257;
          *(_WORD *)(a1 + 102598) = 0;
          goto LABEL_256;
        }
        if (!sub_D1C38(3u, 4)) {
          goto LABEL_344;
        }
        int v227 = sub_D1C7C(3u);
        __uint64_t v142 = sub_DDEFC();
        int32x4_t v228 = (const char *)sub_D1CB0(4);
        if (!v227) {
          goto LABEL_343;
        }
        printf("%lld %d AVE %s: %s:%d %s | FIG: chroma_format_idc (%d) and profile_idc (%d) combination not supported\n", v142, 3, v228, "AVE_PrepareVideoAndSequenceHeader", 6766, "false", v298[139], *(_DWORD *)(v297 + 1592));
        goto LABEL_249;
      }
      if (!sub_D1C38(3u, 4)) {
        goto LABEL_344;
      }
      int v144 = sub_D1C7C(3u);
      __uint64_t v145 = sub_DDEFC();
      __uint64_t v146 = (const char *)sub_D1CB0(4);
      if (v144)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: profile_idc (%d) bit_depth_luma_minus8 (%d) and bit_depth_chroma_minus8 (%d)\n", v145, 3, v146, "AVE_PrepareVideoAndSequenceHeader", 6707, "((encoderPrivateStorage->saSPS[0].bit_depth_luma_minus8 == 0) && (encoderPrivateStorage->saSPS[0].bit_depth_chroma_minus8 == 0))", *(_DWORD *)(v297 + 1592), v298[150], v298[151]);
LABEL_233:
        __uint64_t v154 = sub_DDEFC();
        sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: profile_idc (%d) bit_depth_luma_minus8 (%d) and bit_depth_chroma_minus8 (%d)", v154, 3);
        goto LABEL_344;
      }
    }
    else
    {
      if (v137 != 1310) {
        goto LABEL_222;
      }
      if (*(_DWORD *)(a1 + 103136) == 2 && *(_DWORD *)(a1 + 103140) == 2)
      {
        *(unsigned char *)(a1 + 20408) = 1;
        *(unsigned char *)(a1 + 102560) = 1;
        *(unsigned char *)(a1 + 20448) = 1;
        *(unsigned char *)(a1 + 102600) = 1;
        *(_DWORD *)(a1 + 20400) = 4;
        *(_DWORD *)(a1 + 102552) = 4;
        int v138 = *(_DWORD *)(a1 + 103092);
        if (!v138) {
          goto LABEL_244;
        }
        if (v138 == 3 || v138 == 1)
        {
          *(_WORD *)(a1 + 20440) = 257;
          *(_DWORD *)(a1 + 20442) = 0;
          *(_WORD *)(a1 + 20446) = 0;
          *(_WORD *)(a1 + 102592) = 257;
          *(_DWORD *)(a1 + 102594) = 0;
          *(_WORD *)(a1 + 102598) = 0;
          goto LABEL_256;
        }
        if (!sub_D1C38(3u, 4)) {
          goto LABEL_344;
        }
        int v221 = sub_D1C7C(3u);
        __uint64_t v142 = sub_DDEFC();
        long long v222 = (const char *)sub_D1CB0(4);
        if (!v221) {
          goto LABEL_343;
        }
        printf("%lld %d AVE %s: %s:%d %s | FIG: chroma_format_idc (%d) and profile_idc (%d) combination not supported\n", v142, 3, v222, "AVE_PrepareVideoAndSequenceHeader", 6833, "false", v298[139], *(_DWORD *)(v297 + 1592));
        goto LABEL_249;
      }
      if (!sub_D1C38(3u, 4)) {
        goto LABEL_344;
      }
      int v152 = sub_D1C7C(3u);
      __uint64_t v145 = sub_DDEFC();
      __uint64_t v153 = (const char *)sub_D1CB0(4);
      if (v152)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: profile_idc (%d) bit_depth_luma_minus8 (%d) and bit_depth_chroma_minus8 (%d)\n", v145, 3, v153, "AVE_PrepareVideoAndSequenceHeader", 6775, "((encoderPrivateStorage->saSPS[0].bit_depth_luma_minus8 == 2) && (encoderPrivateStorage->saSPS[0].bit_depth_chroma_minus8 == 2))", *(_DWORD *)(v297 + 1592), v298[150], v298[151]);
        goto LABEL_233;
      }
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: profile_idc (%d) bit_depth_luma_minus8 (%d) and bit_depth_chroma_minus8 (%d)", v145, 3);
    goto LABEL_344;
  }
  if (v137 <= 2)
  {
    if (v137 != 1)
    {
      if (v137 == 2)
      {
        int v138 = *(_DWORD *)(a1 + 103092);
        if (v138 == 1)
        {
          *(unsigned char *)(a1 + 20406) = 1;
          *(unsigned char *)(a1 + 102558) = 1;
          goto LABEL_256;
        }
        if (sub_D1C38(3u, 4))
        {
          int v159 = sub_D1C7C(3u);
          __uint64_t v142 = sub_DDEFC();
          int v160 = (const char *)sub_D1CB0(4);
          if (v159)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: chroma_format_idc (%d) and profile_idc (%d) combination not supported\n", v142, 3, v160, "AVE_PrepareVideoAndSequenceHeader", 6677, "false", v298[139], *(_DWORD *)(v297 + 1592));
            goto LABEL_249;
          }
LABEL_343:
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: chroma_format_idc (%d) and profile_idc (%d) combination not supported", v142);
        }
        goto LABEL_344;
      }
LABEL_222:
      if (sub_D1C38(3u, 4))
      {
        int v147 = sub_D1C7C(3u);
        __uint64_t v148 = sub_DDEFC();
        __uint64_t v149 = (const char *)sub_D1CB0(4);
        if (v147)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: general_profile_idc (%d) nit supported\n", v148, 3, v149, "AVE_PrepareVideoAndSequenceHeader", 6946, "false", *(_DWORD *)(v297 + 1592));
          __uint64_t v148 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: general_profile_idc (%d) nit supported", v148);
      }
      goto LABEL_344;
    }
    if (*(_DWORD *)(a1 + 103092) != 1)
    {
      if (sub_D1C38(3u, 4))
      {
        int v155 = sub_D1C7C(3u);
        __uint64_t v142 = sub_DDEFC();
        __uint64_t v156 = (const char *)sub_D1CB0(4);
        if (v155)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: chroma_format_idc (%d) and profile_idc (%d) combination not supported\n", v142, 3, v156, "AVE_PrepareVideoAndSequenceHeader", 6663, "false", v298[139], *(_DWORD *)(v297 + 1592));
          goto LABEL_249;
        }
        goto LABEL_343;
      }
      goto LABEL_344;
    }
    *(_WORD *)(a1 + 20405) = 257;
    *(_WORD *)(a1 + 102557) = 257;
    int v138 = 1;
LABEL_256:
    int v165 = (unsigned char *)(a1 + 93859);
    __uint64_t v166 = (unsigned char *)(a1 + 92812);
    if (*(unsigned char *)(a1 + 18932))
    {
      int v167 = *(_DWORD *)(a1 + 192);
      if (v167)
      {
        unsigned int v168 = -1;
        int v169 = 33;
        do
        {
          int v170 = v167 & (v168 >> 1);
          v168 >>= 1;
          --v169;
        }
        while (v170);
        if (v169 < 8)
        {
          int v171 = 0;
          LOBYTE(v172) = 6;
          goto LABEL_267;
        }
        unsigned int v173 = -1;
        int v172 = 32;
        do
        {
          --v172;
          BOOL v174 = (v167 & (v173 >> 1)) == 0;
          v173 >>= 1;
        }
        while (!v174);
      }
      else
      {
        int v172 = 32;
      }
      int v171 = v172 - 6;
LABEL_267:
      *(_DWORD *)(a1 + 109840) = v171;
      if (v167)
      {
        unsigned int v175 = -1;
        int v176 = 33;
        do
        {
          int v177 = v167 & (v175 >> 1);
          v175 >>= 1;
          --v176;
        }
        while (v177);
        if (v176 < 6)
        {
          int v178 = 0;
          LOBYTE(v179) = 4;
          goto LABEL_277;
        }
        unsigned int v180 = -1;
        int v179 = 32;
        do
        {
          --v179;
          BOOL v174 = (v167 & (v180 >> 1)) == 0;
          v180 >>= 1;
        }
        while (!v174);
      }
      else
      {
        int v179 = 32;
      }
      int v178 = v179 - 4;
LABEL_277:
      *(_DWORD *)(a1 + 109844) = v178;
      *(_DWORD *)(a1 + 109868) = v167 / (1 << v172) - 1;
      *(_DWORD *)(a1 + 109872) = v167 / (1 << v179) - 1;
    }
    unsigned int v181 = *(_DWORD *)(a1 + 18436);
    if (v181 < 2)
    {
      int v195 = *(_DWORD *)(a1 + 18900);
      if (v195 && !*(_DWORD *)(a1 + 18904))
      {
        *(_DWORD *)(a1 + 20380) = 1;
        *__uint64_t v166 = 1;
        *(unsigned char *)(a1 + 92815) = 0;
        *(_WORD *)(a1 + 92816) |= 8u;
        *(unsigned char *)(a1 + 92818) = 0;
        *(unsigned char *)(a1 + 92850) = 1;
        *(unsigned char *)(a1 + 93858) = 1;
        *int v165 = 0;
        *(unsigned char *)(a1 + 93860) = v195;
        *(unsigned char *)(a1 + 93923) = 0;
        *(unsigned char *)(a1 + 98022) = 1;
        *(unsigned char *)(a1 + 98024) = 1;
        *(void *)(a1 + 102119) = 0x100000001000000;
        *(unsigned char *)(a1 + 102127) = 1;
        *(_DWORD *)(a1 + 102192) = 0;
        *(_WORD *)(a1 + 102196) = 0;
        *(_WORD *)(a1 + 102198) = *(_DWORD *)(a1 + 1880);
        *(_WORD *)(a1 + 102200) = *(_DWORD *)(a1 + 1884);
        *(unsigned char *)(a1 + 102202) = 1;
        if (*(_DWORD *)(a1 + 18920) != -1) {
          int v138 = *(_DWORD *)(a1 + 18920);
        }
        *(_DWORD *)(a1 + 102204) = v138;
        *(unsigned char *)(a1 + 102212) = 0;
        int v196 = *(_DWORD *)(a1 + 18912);
        if (v196 == -1)
        {
          int v197 = *(_DWORD *)(a1 + 103136);
          int v198 = *(_DWORD *)(a1 + 103140);
        }
        else
        {
          int v197 = v196 - 8;
          int v198 = v197;
        }
        *(_DWORD *)(a1 + 102216) = v197;
        *(_DWORD *)(a1 + 102224) = v198;
      }
      goto LABEL_344;
    }
    int v182 = *(_DWORD *)(a1 + 18904);
    unsigned int v183 = v181 - 1;
    if (v182) {
      int v184 = 3;
    }
    else {
      int v184 = v181 - 1;
    }
    *(_DWORD *)(a1 + 20380) = v184;
    *(_DWORD *)(a1 + 20384) = 0;
    *(unsigned char *)(a1 + 20388) = 1;
    memcpy((void *)(a1 + 20936), (const void *)(a1 + 20392), 0x220uLL);
    memcpy((void *)(a1 + 21480), (const void *)(a1 + 20392), 0x220uLL);
    *(_DWORD *)(a1 + 21488) = 6;
    *(_WORD *)(a1 + 21493) = 0;
    *(unsigned char *)(a1 + 21498) = 1;
    if (v182)
    {
      uint64_t v185 = *v165;
      uint64_t v186 = *(unsigned __int8 *)(a1 + 93860);
      int v187 = *(_DWORD *)(a1 + 18900);
      if (v185 <= v186) {
        unsigned int v188 = *(unsigned __int8 *)(a1 + 93860);
      }
      else {
        unsigned int v188 = *v165;
      }
      uint64_t v189 = a1 + 22196;
      *(unsigned char *)(v189 + v185) = 1;
      *(unsigned char *)(v189 + v186) = 1;
      uint64_t v190 = a1 + 22260;
      *(unsigned char *)(v190 + v187) = 1;
      *(unsigned char *)(v190 + v182) = 1;
      uint64_t v191 = a1 + 22324;
      *(unsigned char *)(a1 + 22324 + v185) = 1;
      if (v187 <= v182) {
        LOBYTE(v192) = v182;
      }
      else {
        LOBYTE(v192) = v187;
      }
      *(unsigned char *)(v191 + v186) = 1;
      if (v188 <= v192) {
        unsigned int v192 = v192;
      }
      else {
        unsigned int v192 = v188;
      }
      *(_DWORD *)(a1 + 22124) = v192;
      *(_DWORD *)(a1 + 22128) = 3;
      *(unsigned char *)(v191 + v187) = 1;
      *(unsigned char *)(v191 + v182) = 1;
      int v193 = v182;
      uint64_t v194 = a1 + 102119;
    }
    else
    {
      uint64_t v199 = 0;
      uint64_t v200 = *(unsigned __int8 *)(a1 + v183 + 93859);
      *(_DWORD *)(a1 + 22124) = v200;
      *(_DWORD *)(a1 + 22128) = v183;
      uint64_t v201 = v200 + 1;
      if ((v184 + 1) > 1) {
        uint64_t v202 = (v184 + 1);
      }
      else {
        uint64_t v202 = 1;
      }
      int v193 = 0;
      uint64_t v194 = a1 + 102119;
      do
      {
        uint64_t v203 = 0;
        do
        {
          if (v203 == *(unsigned __int8 *)(a1 + v199 + 93859)) {
            *(unsigned char *)(a1 + 22196 + v203) = 1;
          }
          ++v203;
        }
        while (v201 != v203);
        ++v199;
      }
      while (v199 != v202);
    }
    *__uint64_t v166 = 1;
    __int16 v204 = *(_WORD *)(a1 + 92816);
    *(_WORD *)(a1 + 92816) = v204 | 2;
    *(unsigned char *)(a1 + 92818) = 2;
    *(unsigned char *)(a1 + 93858) = 1;
    *(unsigned char *)(a1 + 92850) = 1;
    *(unsigned char *)(a1 + 93990) = 1;
    if (v193)
    {
      int v205 = *(unsigned __int8 *)(a1 + 93860);
      uint64_t v206 = a1 + 18808;
      int v207 = (unsigned char *)(a1 + 117677);
      if (*v165)
      {
        int v208 = *(_DWORD *)(a1 + 18900);
        __uint64_t v209 = (unsigned char *)(a1 + 98022);
        goto LABEL_314;
      }
      int v208 = *(_DWORD *)(a1 + 18900);
      __uint64_t v209 = (unsigned char *)(a1 + 98022);
      if (v205 == 1)
      {
        *(unsigned char *)(a1 + 93861) = v208;
        *(unsigned char *)(a1 + 93862) = v193;
        *(_WORD *)(a1 + 92866) = 256;
        *(_WORD *)(a1 + 92882) = 257;
        *(unsigned char *)(a1 + 92851) = 0;
        LOBYTE(v208) = 1;
        *(unsigned char *)(a1 + 94120) = 1;
      }
      else
      {
LABEL_314:
        *(unsigned char *)(a1 + 93861) = v205;
        *(unsigned char *)(a1 + 93860) = v208;
        *(unsigned char *)(a1 + 93862) = v193;
        *(_WORD *)(a1 + 92850) = 256;
        *(_WORD *)(a1 + 92866) = 1;
        *(_WORD *)(a1 + 92882) = 257;
        *(unsigned char *)(a1 + 93990) = 0;
        *(unsigned char *)(a1 + 94054) = 1;
        *(unsigned char *)(a1 + 94119) = 1;
      }
      *(_WORD *)(a1 + 92816) = v204 | 0xA;
      *(unsigned char *)(a1 + 92819) = 2;
      unsigned char *v209 = 0;
      *(unsigned char *)(v194 + 4) = 0;
    }
    else
    {
      LOBYTE(v208) = *(unsigned char *)(a1 + 93860);
      uint64_t v206 = a1 + 18808;
      int v207 = (unsigned char *)(a1 + 117677);
    }
    *(_WORD *)(v194 + 2) = 513;
    *(unsigned char *)(a1 + 92814) = 1;
    *(_WORD *)(v194 + 79) = *(_DWORD *)(a1 + 1880);
    *(_WORD *)(v194 + 81) = *(_DWORD *)(a1 + 1884);
    *(unsigned char *)(v194 + 83) = 1;
    *(_DWORD *)(v194 + 85) = *(_DWORD *)(a1 + 103092);
    *(_DWORD *)(v194 + 97) = *(_DWORD *)(a1 + 103136);
    *(_DWORD *)(v194 + 105) = *(_DWORD *)(a1 + 103140);
    *(_WORD *)(v194 + 7) = 257;
    *(_DWORD *)(v194 + 75) = 16777472;
    *__uint64_t v298 = 0;
    *(unsigned char *)(a1 + 102540) = 1;
    unsigned int v210 = *(_DWORD *)(a1 + 111012);
    memcpy((void *)(a1 + 110444), __src, 0x1EF4uLL);
    *(unsigned char *)(a1 + 110448) = v208;
    *(_WORD *)(a1 + 110449) = 7;
    if (v210 <= 1) {
      int v211 = 1;
    }
    else {
      int v211 = v210;
    }
    *(_DWORD *)(a1 + 111012) = v211;
    *(_WORD *)(a1 + 110452) = 0;
    v207[151] = 1;
    v207[153] = 1;
    unsigned char *v207 = 0;
    if (*(unsigned char *)(v206 + 100))
    {
      int v212 = *(_DWORD *)(v206 + 120);
      if (v212 != -1)
      {
        *(unsigned char *)(a1 + 110450) = 1;
        *(unsigned char *)(a1 + 110451) = v212;
      }
    }
    if (v193)
    {
      uint64_t v213 = 0;
      char v214 = 1;
      do
      {
        char v215 = v214;
        uint64_t v216 = (_DWORD *)(a1 + 4 * v213);
        int v217 = v216[4730];
        if (v217 != -1) {
          v216[25551] = v217;
        }
        int v218 = v216[4728];
        if (v218 != -1)
        {
          int v219 = v218 - 8;
          uint64_t v220 = a1 + 4 * v213;
          *(_DWORD *)(v220 + 102216) = v219;
          *(_DWORD *)(v220 + 102224) = v219;
        }
        char v214 = 0;
        uint64_t v213 = 1;
      }
      while ((v215 & 1) != 0);
      if (*(_DWORD *)(v206 + 116) != -1 && *(_DWORD *)(v206 + 108) != -1) {
        *(unsigned char *)(v194 + 6) = 1;
      }
    }
    goto LABEL_344;
  }
  if (v137 != 3)
  {
    if (v137 != 1008) {
      goto LABEL_222;
    }
    goto LABEL_201;
  }
  *(_DWORD *)(a1 + 22028) = 0;
  *(_DWORD *)(a1 + 103152) = 0;
  int v138 = *(_DWORD *)(a1 + 103092);
  if (v138 == 1)
  {
    *(unsigned char *)(a1 + 102559) = 1;
    *(unsigned char *)(a1 + 20405) = 1;
    *(_WORD *)(a1 + 102557) = 257;
    *(_WORD *)(a1 + 20406) = 257;
    goto LABEL_256;
  }
  if (sub_D1C38(3u, 4))
  {
    int v157 = sub_D1C7C(3u);
    __uint64_t v142 = sub_DDEFC();
    __uint64_t v158 = (const char *)sub_D1CB0(4);
    if (v157)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: chroma_format_idc (%d) and profile_idc (%d) combination not supported\n", v142, 3, v158, "AVE_PrepareVideoAndSequenceHeader", 6699, "false", v298[139], *(_DWORD *)(v297 + 1592));
      goto LABEL_249;
    }
    goto LABEL_343;
  }
LABEL_344:
  if (sub_D1C38(0x14u, 7))
  {
    int v223 = sub_D1C7C(0x14u);
    __uint64_t v224 = sub_DDEFC();
    long long v225 = (const char *)sub_D1CB0(7);
    if (v223)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_PrepareVideoAndSequenceHeader\n", v224, 20, v225);
      __uint64_t v226 = sub_DDEFC();
      __uint64_t v280 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_PrepareVideoAndSequenceHeader", v226, 20, v280);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_PrepareVideoAndSequenceHeader", v224, 20, v225);
    }
  }
}

void sub_93EAC(_DWORD *a1)
{
  int v2 = a1 + 4609;
  if (sub_D1C38(0x14u, 7))
  {
    int v3 = sub_D1C7C(0x14u);
    __uint64_t v4 = sub_DDEFC();
    __uint64_t v5 = (const char *)sub_D1CB0(7);
    if (v3)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_PreparePictureHeader\n", v4, 20, v5);
      __uint64_t v6 = sub_DDEFC();
      char v21 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PreparePictureHeader", v6, 20, v21);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PreparePictureHeader", v4, 20, v5);
    }
  }
  unsigned int v7 = v2[81];
  if (!v7) {
    goto LABEL_8;
  }
  if (v7 == 1)
  {
    a1[29602] = a1[456] - 26;
LABEL_8:
    unsigned int v8 = *v2;
    if (v8 >= 2)
    {
      unsigned int v9 = 1;
      int v10 = 1;
      do
      {
        int v11 = &a1[2409 * v10];
        int32x2_t v12 = *(int32x2_t *)(v11 + 29595);
        memcpy(v11 + 29592, a1 + 29592, 0x25A4uLL);
        *((unsigned char *)v11 + 118372) = *((unsigned char *)a1 + v10 + 93859);
        *((unsigned char *)v11 + 126884) = 1;
        *((unsigned char *)v11 + 126887) = 1;
        *((unsigned char *)v11 + 126889) = 1;
        *(int8x8_t *)(v11 + 29595) = vbsl_s8((int8x8_t)vceqz_s32(v12), (int8x8_t)vdup_n_s32(v9), (int8x8_t)v12);
        unsigned int v9 = ++v10;
        *(_DWORD *)((char *)v11 + 118373) = 0;
        *((unsigned char *)v11 + 118377) = 0;
      }
      while (v8 > v10);
    }
    goto LABEL_16;
  }
  if (sub_D1C38(3u, 4))
  {
    int v13 = sub_D1C7C(3u);
    __uint64_t v14 = sub_DDEFC();
    uint64_t v15 = (const char *)sub_D1CB0(4);
    if (v13)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: codec type unrecognized\n", v14, 3, v15, "AVE_PreparePictureHeader", 6085, "false");
      __uint64_t v16 = sub_DDEFC();
      uint64_t v22 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: codec type unrecognized", v16, 3, v22, "AVE_PreparePictureHeader", 6085, "false");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: codec type unrecognized", v14, 3, v15, "AVE_PreparePictureHeader", 6085, "false");
    }
  }
LABEL_16:
  if (sub_D1C38(0x14u, 7))
  {
    int v17 = sub_D1C7C(0x14u);
    __uint64_t v18 = sub_DDEFC();
    char v19 = (const char *)sub_D1CB0(7);
    if (v17)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_PreparePictureHeader\n", v18, 20, v19);
      __uint64_t v20 = sub_DDEFC();
      uint64_t v23 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_PreparePictureHeader", v20, 20, v23);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_PreparePictureHeader", v18, 20, v19);
    }
  }
}

uint64_t sub_9418C(uint64_t a1)
{
  if (sub_D1C38(0x14u, 7))
  {
    int v2 = sub_D1C7C(0x14u);
    __uint64_t v3 = sub_DDEFC();
    __uint64_t v4 = (const char *)sub_D1CB0(7);
    if (v2)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_ManageSessionSettings\n", v3, 20, v4);
      __uint64_t v5 = sub_DDEFC();
      __uint64_t v249 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_ManageSessionSettings", v5, 20, v249);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_ManageSessionSettings", v3, 20, v4);
    }
  }
  if (*(_DWORD *)(a1 + 196) == 4 && !*(_DWORD *)(a1 + 292)) {
    *(_DWORD *)(a1 + 292) = 10000;
  }
  if (sub_D1C38(0x14u, 7))
  {
    int v6 = sub_D1C7C(0x14u);
    __uint64_t v7 = sub_DDEFC();
    unsigned int v8 = (const char *)sub_D1CB0(7);
    if (v6)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_PrepareRealTimeParameters\n", v7, 20, v8);
      __uint64_t v9 = sub_DDEFC();
      int v250 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PrepareRealTimeParameters", v9, 20, v250);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PrepareRealTimeParameters", v7, 20, v8);
    }
  }
  int v10 = sub_C7604();
  int v11 = v10;
  if (v10[57]) {
    *(_DWORD *)(a1 + 264) = 1;
  }
  if (v10[61]) {
    *(_DWORD *)(a1 + 264) = 0;
  }
  if ((v10[1161] & 4) != 0) {
    *(unsigned char *)(a1 + 216) = 1;
  }
  if ((v10[1169] & 4) != 0) {
    *(unsigned char *)(a1 + 216) = 0;
  }
  if (sub_D1C38(0x16u, 8))
  {
    int v12 = sub_D1C7C(0x16u);
    __uint64_t v13 = sub_DDEFC();
    __uint64_t v14 = (const char *)sub_D1CB0(8);
    if (v12)
    {
      printf("%lld %d AVE %s: %s:%d usageMode %d RealTimeClient %d bRCModeSet %d eRCMode %d\n", v13, 22, v14, "AVE_PrepareRealTimeParameters", 7291, *(_DWORD *)(a1 + 292), *(_DWORD *)(a1 + 264), *(unsigned __int8 *)(a1 + 18772), *(_DWORD *)(a1 + 196));
      __uint64_t v13 = sub_DDEFC();
      sub_D1CB0(8);
    }
    syslog(3, "%lld %d AVE %s: %s:%d usageMode %d RealTimeClient %d bRCModeSet %d eRCMode %d", v13, 22);
  }
  uint64_t v15 = (_DWORD *)(a1 + 18808);
  if ((*(unsigned char *)(a1 + 203) & 0x80) == 0 && *(_DWORD *)(a1 + 196) == 8) {
    *(unsigned char *)(a1 + 18772) = 0;
  }
  if (*(_DWORD *)(a1 + 264) == 1)
  {
    if (!*(unsigned char *)(a1 + 216) && (int v16 = *(_DWORD *)(a1 + 196), v16 != 20) && v16 != 3
      || *(unsigned char *)(a1 + 18846)
      || *(unsigned char *)(a1 + 18847))
    {
      if (!*(unsigned char *)(a1 + 18849) && !*(_DWORD *)(a1 + 292))
      {
        if (!*(unsigned char *)(a1 + 18772)) {
          *(_DWORD *)(a1 + 196) = 1;
        }
        *(unsigned char *)(a1 + 18684) = 1;
        *(_DWORD *)(a1 + 1920) = 0;
        *(unsigned char *)(a1 + 18752) = 0;
        *(_WORD *)(a1 + 255) = 257;
        *(unsigned char *)(a1 + 18861) = 0;
        int v53 = *(_DWORD *)(a1 + 228);
        if (v53 < 1)
        {
          *(unsigned char *)(a1 + 253) = 1;
        }
        else
        {
          int v54 = *(_DWORD *)(a1 + 1884);
          unsigned int v55 = v54 + 15;
          unsigned int v56 = (v54 + 15) >> 4;
          int v57 = *(_DWORD *)(a1 + 1880);
          unsigned int v58 = (v57 + 15) >> 4;
          unsigned int v59 = (v58 + 31) & 0x1FFFFFE0;
          if (v56 * v53 * v58 <= 0xAFC80) {
            int v60 = 1;
          }
          else {
            int v60 = 2;
          }
          *(unsigned char *)(a1 + 253) = v56 * v53 * v58 > 0xAFC80;
          *(_DWORD *)(a1 + 260) = v60;
          if (v59 > 0x80 || v59 * v56 >= 0x2D01)
          {
            if (v55 > 0x44F || (v57 + 15) >= 0x790)
            {
              unsigned int v61 = (((v58 + 1) >> 1) + 31) >> 5;
              unsigned int v56 = (v56 + 1) >> 1;
            }
            else
            {
              unsigned int v61 = (v58 + 31) >> 5;
            }
            unsigned int v247 = v61 * v56;
            if (v55 > 0xC0F || v59 > 0x100 || v247 > 0x120)
            {
              *(_DWORD *)(a1 + 260) = 0;
            }
            else
            {
              *(unsigned char *)(a1 + 253) = 1;
              if (v53 > 0x78
                || ((v54 + 31) >> 5) * v53 * ((v57 + 31) >> 5) > 0x77880)
              {
                int v248 = 2;
              }
              else
              {
                int v248 = 1;
              }
              *(_DWORD *)(a1 + 260) = v248;
            }
          }
        }
      }
    }
  }
  int v17 = *((_DWORD *)v11 + 17);
  if (v17 >= 1) {
    *(_DWORD *)(a1 + 20360) = v17;
  }
  int v18 = *((_DWORD *)v11 + 308);
  if ((v18 & 0x40) != 0) {
    *(unsigned char *)(a1 + 255) = 1;
  }
  int v19 = *((_DWORD *)v11 + 309);
  if ((v19 & 0x40) != 0)
  {
    *(unsigned char *)(a1 + 255) = 0;
    if ((v18 & 0x80) == 0)
    {
LABEL_43:
      if ((v19 & 0x80) == 0) {
        goto LABEL_45;
      }
      goto LABEL_44;
    }
  }
  else if ((v18 & 0x80) == 0)
  {
    goto LABEL_43;
  }
  *(unsigned char *)(a1 + 256) = 1;
  if ((v19 & 0x80) != 0) {
LABEL_44:
  }
    *(unsigned char *)(a1 + 256) = 0;
LABEL_45:
  if ((v11[1161] & 0x80) != 0) {
    *(unsigned char *)(a1 + 257) = 1;
  }
  if ((v11[1169] & 0x80) != 0) {
    *(unsigned char *)(a1 + 257) = 0;
  }
  int v20 = *((_DWORD *)v11 + 296);
  if (v20 != -1 && sub_80D68(a1, (double)v20) && sub_D1C38(0x16u, 5))
  {
    int v21 = sub_D1C7C(0x16u);
    __uint64_t v22 = sub_DDEFC();
    uint64_t v23 = (const char *)sub_D1CB0(5);
    if (v21)
    {
      printf("%lld %d AVE %s: FIG: Unsupported value coremedia_Quality = %d\n", v22, 22, v23, v20);
      __uint64_t v24 = sub_DDEFC();
      __uint64_t v251 = (const char *)sub_D1CB0(5);
      syslog(3, "%lld %d AVE %s: FIG: Unsupported value coremedia_Quality = %d", v24, 22, v251, v20);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: Unsupported value coremedia_Quality = %d", v22, 22, v23, v20);
    }
  }
  if (*(_DWORD *)(a1 + 264) != 1) {
    *(_DWORD *)(a1 + 18748) = 500;
  }
  uint64_t v25 = (unsigned int *)(a1 + 183416);
  if (sub_D1C38(0x14u, 7))
  {
    int v26 = sub_D1C7C(0x14u);
    __uint64_t v27 = sub_DDEFC();
    unsigned __int16 v28 = (const char *)sub_D1CB0(7);
    if (v26)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_SetNewEncoderDefaultBasedOnProfileAndLevel\n", v27, 20, v28);
      __uint64_t v29 = sub_DDEFC();
      int v252 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetNewEncoderDefaultBasedOnProfileAndLevel", v29, 20, v252);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetNewEncoderDefaultBasedOnProfileAndLevel", v27, 20, v28);
    }
  }
  unsigned __int16 v30 = sub_C7604();
  int v31 = v30;
  int v32 = v30[274];
  if (v32 <= 1009)
  {
    if ((v32 - 1) >= 3 && v32 != 1008) {
      goto LABEL_75;
    }
LABEL_74:
    *(_DWORD *)(a1 + 183420) = v32;
    goto LABEL_75;
  }
  if (v32 > 1307)
  {
    if (v32 == 1310 || v32 == 1308) {
      goto LABEL_74;
    }
  }
  else if (v32 == 1010 || v32 == 1210)
  {
    goto LABEL_74;
  }
LABEL_75:
  int v33 = v30[275];
  if (v33 <= 149)
  {
    if (((v33 - 60) > 0x3F || ((1 << (v33 - 60)) & 0x9000000240000009) == 0)
      && v33 != 30)
    {
      goto LABEL_83;
    }
LABEL_82:
    *(_DWORD *)(a1 + 183424) = v33;
    goto LABEL_83;
  }
  if ((v33 - 150) <= 0x24 && ((1 << (v33 + 106)) & 0x1240000049) != 0 || v33 == 255) {
    goto LABEL_82;
  }
LABEL_83:
  int v256 = (unsigned char *)(a1 + 126884);
  int v257 = (unsigned char *)(a1 + 118412);
  uint64_t v34 = (unsigned char *)(a1 + 109736);
  __uint64_t v259 = (unsigned char *)(a1 + 102540);
  unsigned int v35 = v30[276];
  if (v35 <= 1) {
    *uint64_t v25 = v35;
  }
  int v36 = *(_DWORD *)(a1 + 183420);
  if (v36)
  {
    *(_DWORD *)(a1 + 18800) = v36;
    if (sub_D1C38(0x1Eu, 6))
    {
      int v37 = sub_D1C7C(0x1Eu);
      __uint64_t v38 = sub_DDEFC();
      uint64_t v39 = (const char *)sub_D1CB0(6);
      int v40 = *(_DWORD *)(a1 + 102552);
      if (v37)
      {
        printf("%lld %d AVE %s: FIG: FIGHevcProfile = %d -> change the default %d\n", v38, 30, v39, *(_DWORD *)(a1 + 183420), v40);
        __uint64_t v41 = sub_DDEFC();
        unsigned __int16 v42 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: FIGHevcProfile = %d -> change the default %d", v41, 30, v42, *(_DWORD *)(a1 + 183420), *(_DWORD *)(a1 + 102552));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: FIGHevcProfile = %d -> change the default %d", v38, 30, v39, *(_DWORD *)(a1 + 183420), v40);
      }
    }
    int v43 = *(_DWORD *)(a1 + 183420);
    if (v43 <= 1009)
    {
      if ((v43 - 1) < 3)
      {
LABEL_101:
        *(_DWORD *)(a1 + 20400) = v43;
        *(_DWORD *)(a1 + 102552) = v43;
        goto LABEL_102;
      }
      if (v43 != 1008) {
        goto LABEL_109;
      }
LABEL_100:
      int v43 = 4;
      goto LABEL_101;
    }
    if (v43 > 1307)
    {
      if (v43 == 1310 || v43 == 1308) {
        goto LABEL_100;
      }
    }
    else if (v43 == 1010 || v43 == 1210)
    {
      goto LABEL_100;
    }
LABEL_109:
    if (sub_D1C38(3u, 4))
    {
      int v50 = sub_D1C7C(3u);
      __uint64_t v51 = sub_DDEFC();
      int v52 = (const char *)sub_D1CB0(4);
      if (v50)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_NewDefaultsBasedOnProfileUsageDefault failed. FIGHevcProfile (%d) unrecognized\n", v51, 3, v52, "AVE_SetNewEncoderDefaultBasedOnProfileUsagePropertiesPassed", 10262, "false", *(_DWORD *)(a1 + 183420));
        __uint64_t v51 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_NewDefaultsBasedOnProfileUsageDefault failed. FIGHevcProfile (%d) unrecognized", v51);
    }
    goto LABEL_199;
  }
LABEL_102:
  if (*(_DWORD *)(a1 + 18760) == 1)
  {
    if (*v25 != 2)
    {
      if (sub_D1C38(0x1Eu, 6))
      {
        int v44 = sub_D1C7C(0x1Eu);
        __uint64_t v45 = sub_DDEFC();
        uint64_t v46 = (const char *)sub_D1CB0(6);
        int v47 = *(_DWORD *)(a1 + 102548);
        if (v44)
        {
          printf("%lld %d AVE %s: FIG: FIGHevcTier = %d -> change the default %d\n", v45, 30, v46, *v25, v47);
          __uint64_t v48 = sub_DDEFC();
          char v49 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: FIGHevcTier = %d -> change the default %d", v48, 30, v49, *v25, *(_DWORD *)(a1 + 102548));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: FIGHevcTier = %d -> change the default %d", v45, 30, v46, *v25, v47);
        }
      }
      *(_DWORD *)(a1 + 102548) = *v25;
    }
    if (*(_DWORD *)(a1 + 228)
       * ((*(_DWORD *)(a1 + 1880) + 15) >> 4)
       * ((*(_DWORD *)(a1 + 1884) + 15) >> 4) >= 0x1DA9C0)
    {
      *(_DWORD *)(a1 + 20396) = 1;
      *(_DWORD *)(a1 + 102548) = 1;
    }
  }
  BOOL v62 = *(unsigned char *)(a1 + 18676)
     || *(_DWORD *)(a1 + 1944)
     || (*(_WORD *)(a1 + 17872) & 0xFFFE) == 4
     || *(int *)(a1 + 18680) > 1
     || *(_DWORD *)(a1 + 1756) > 1u
     || (*(unsigned char *)(a1 + 1876) & 0xE0) != 0;
  *(unsigned char *)(a1 + 17882) = v62;
  int v63 = *(_DWORD *)(a1 + 196);
  if (v63 == 4 || v63 == 2)
  {
    int v64 = *(_DWORD *)(a1 + 292);
    if (v64 == 37 || !v64)
    {
      *(_DWORD *)(a1 + 292) = 10000;
      *(unsigned char *)(a1 + 253) = 0;
      *(unsigned char *)(a1 + 18332) = 1;
      *(_DWORD *)(a1 + 1920) = 0;
      *(_DWORD *)(a1 + 260) = 0;
    }
  }
  int v65 = v31[343];
  if (v65 <= 19)
  {
    if (!v65)
    {
      *(_DWORD *)(a1 + 292) = 0;
      goto LABEL_192;
    }
    if (v65 == 1)
    {
      *(_DWORD *)(a1 + 292) = 1;
      goto LABEL_166;
    }
  }
  else
  {
    switch(v65)
    {
      case 20:
        *(_DWORD *)(a1 + 292) = 20;
        goto LABEL_176;
      case 37:
        *(_DWORD *)(a1 + 292) = 37;
        goto LABEL_189;
      case 10000:
        *(_DWORD *)(a1 + 292) = 10000;
LABEL_143:
        sub_9A278(a1);
        *(void *)(a1 + 200) &= ~0x10uLL;
        *(_DWORD *)(a1 + 1920) = 0;
        *(_DWORD *)(a1 + 260) = 0;
        *(unsigned char *)(a1 + 18332) = 1;
        *(_DWORD *)(a1 + 2024) &= ~1u;
        *(unsigned char *)(a1 + 254) = *(_DWORD *)(a1 + 264) == 1;
        if (*(int *)(a1 + 1852) <= -13) {
          *(_DWORD *)(a1 + 1852) = 51;
        }
        if (*(int *)(a1 + 1844) <= -13) {
          *(_DWORD *)(a1 + 1844) = 51;
        }
        if (*(int *)(a1 + 185180) <= 0 && *(double *)(a1 + 185184) <= 0.0)
        {
          *(void *)(a1 + 2028) = 120;
          *(void *)(a1 + 2040) = 0xBFF0000000000000;
          *(void *)(a1 + 2048) = 0xBFF0000000000000;
        }
        if (!*(unsigned char *)(a1 + 183436))
        {
          if (*(unsigned char *)(a1 + 183438))
          {
            int v66 = *(_DWORD *)(a1 + 1808);
            if (v66 >= 1)
            {
              uint64_t v67 = 0;
              unsigned __int16 v68 = (double *)(a1 + 1784);
              unsigned int v69 = 0x7FFFFFFF;
              do
              {
                if (v69 > (*(v68 - 1) * 8.0 / *v68))
                {
                  if (sub_D1C38(0x1Eu, 6))
                  {
                    int v70 = sub_D1C7C(0x1Eu);
                    __uint64_t v71 = sub_DDEFC();
                    __uint64_t v72 = (const char *)sub_D1CB0(6);
                    double v73 = *(v68 - 1);
                    double v74 = *v68;
                    if (v70)
                    {
                      printf("%lld %d AVE %s: FIG: uint64_t i = %d DataRateLimitsSize %f DataRateLimitsSeconds %f\n", v71, 30, v72, v67, *(v68 - 1), v74);
                      __uint64_t v71 = sub_DDEFC();
                      __uint64_t v72 = (const char *)sub_D1CB0(6);
                      double v73 = *(v68 - 1);
                      double v74 = *v68;
                    }
                    syslog(3, "%lld %d AVE %s: FIG: uint64_t i = %d DataRateLimitsSize %f DataRateLimitsSeconds %f", v71, 30, v72, v67, v73, v74);
                  }
                  unsigned int v69 = (*(v68 - 1) * 8.0 / 1.5 / *v68);
                  int v66 = *(_DWORD *)(a1 + 1808);
                }
                ++v67;
                v68 += 2;
              }
              while (v67 < v66);
              if (v69 != 0x7FFFFFFF) {
                *(_DWORD *)(a1 + 192) = v69;
              }
            }
          }
        }
        goto LABEL_199;
    }
  }
  int v131 = *(_DWORD *)(a1 + 292);
  if (v131 <= 36)
  {
    if (v131 != 1)
    {
      if (v131 != 20) {
        goto LABEL_192;
      }
LABEL_176:
      *uint64_t v34 = 1;
      *(unsigned char *)(a1 + 109877) = 1;
      *(unsigned char *)(a1 + 109879) = 1;
      *(_OWORD *)(a1 + 109888) = xmmword_142F10;
      *(_DWORD *)(a1 + 228) = 60;
      *(void *)(a1 + 2028) = 0x7FFFFFFFLL;
      *(void *)(a1 + 2040) = 0xBFF0000000000000;
      *(void *)(a1 + 2048) = 0xBFF0000000000000;
      *(unsigned char *)(a1 + 254) = 1;
      *(_DWORD *)(a1 + 260) = 0;
      *(void *)(a1 + 200) |= 0x10uLL;
      *(_DWORD *)(a1 + 1868) = 3;
      if (!*(unsigned char *)(a1 + 183436))
      {
        if (*(unsigned char *)(a1 + 183438))
        {
          int v76 = *(_DWORD *)(a1 + 1808);
          if (v76 >= 1)
          {
            uint64_t v77 = 0;
            __uint64_t v78 = (double *)(a1 + 1784);
            unsigned int v79 = 0x7FFFFFFF;
            do
            {
              if (v79 > (*(v78 - 1) * 8.0 / *v78))
              {
                if (sub_D1C38(0x1Eu, 6))
                {
                  int v80 = sub_D1C7C(0x1Eu);
                  __uint64_t v81 = sub_DDEFC();
                  int v82 = (const char *)sub_D1CB0(6);
                  double v83 = *(v78 - 1);
                  double v84 = *v78;
                  if (v80)
                  {
                    printf("%lld %d AVE %s: FIG: uint64_t i = %d DataRateLimitsSize %f DataRateLimitsSeconds %f\n", v81, 30, v82, v77, *(v78 - 1), v84);
                    __uint64_t v81 = sub_DDEFC();
                    int v82 = (const char *)sub_D1CB0(6);
                    double v83 = *(v78 - 1);
                    double v84 = *v78;
                  }
                  syslog(3, "%lld %d AVE %s: FIG: uint64_t i = %d DataRateLimitsSize %f DataRateLimitsSeconds %f", v81, 30, v82, v77, v83, v84);
                }
                unsigned int v79 = (*(v78 - 1) * 8.0 / *v78);
                int v76 = *(_DWORD *)(a1 + 1808);
              }
              ++v77;
              v78 += 2;
            }
            while (v77 < v76);
LABEL_348:
            uint64_t v25 = (unsigned int *)(a1 + 183416);
            if (v79 != 0x7FFFFFFF) {
              *(_DWORD *)(a1 + 192) = v79;
            }
            goto LABEL_190;
          }
        }
      }
      goto LABEL_190;
    }
LABEL_166:
    *(_DWORD *)(a1 + 208) |= 0x20u;
    *(unsigned char *)(a1 + 1924) = 1;
    *(unsigned char *)(a1 + 244) = 0;
    *(unsigned char *)(a1 + 252) = 0;
    *(_DWORD *)(a1 + 260) = 0;
    *(_DWORD *)(a1 + 196) = 20;
    *(unsigned char *)(a1 + 18684) = 0;
    *(_WORD *)(a1 + 255) = 0;
    *(unsigned char *)(a1 + 257) = 0;
    *(unsigned char *)(a1 + 18013) = 0;
    *(_DWORD *)(a1 + 2024) &= ~1u;
    *(_DWORD *)(a1 + 18776) = 2;
    if (*(unsigned char *)(a1 + 216))
    {
      *(_DWORD *)(a1 + 1944) = 1;
      *(_DWORD *)(a1 + 22060) = 1;
      *(_DWORD *)(a1 + 103180) = 1;
      unsigned char *v256 = 1;
    }
    *uint64_t v15 = 0;
    *(unsigned char *)(a1 + 120555) = 1;
    *(unsigned char *)(a1 + 138593) = 1;
    if (*(unsigned char *)(a1 + 18743)) {
      *(_WORD *)(a1 + 118485) = 1;
    }
    uint64_t v75 = *(void *)(a1 + 20168);
    if ((v75 & 4) != 0)
    {
      *uint64_t v34 = 1;
      *(_DWORD *)(a1 + 109877) = 16843009;
      *(_OWORD *)(a1 + 109884) = xmmword_142F20;
      *(_DWORD *)(a1 + 109900) = 15;
    }
    if ((v75 & 8) != 0)
    {
      *uint64_t v34 = 1;
      *(unsigned char *)(a1 + 109877) = 0;
    }
    *(unsigned char *)(a1 + 18752) = 0;
    *(void *)(a1 + 18685) = 0;
    *(unsigned char *)(a1 + 118414) = 1;
    goto LABEL_199;
  }
  if (v131 != 37)
  {
    if (v131 == 10000) {
      goto LABEL_143;
    }
LABEL_192:
    unsigned int v85 = *(_DWORD *)(a1 + 183564);
    if (v85 <= 0x19 && ((1 << v85) & 0x33CE600) != 0)
    {
      int v86 = *(unsigned __int8 *)(a1 + 18056);
      *(unsigned char *)(a1 + 17881) = v86 ^ 1;
      if (!v86)
      {
        *(unsigned char *)(a1 + 253) = 1;
        if (!*(unsigned char *)(a1 + 18743) && (*(unsigned char *)(a1 + 203) & 0x80) == 0)
        {
          *(_DWORD *)(a1 + 17944) = 1;
          *(unsigned char *)(a1 + 18743) = 1;
          *(_WORD *)(a1 + 118485) = 1;
          unsigned char *v256 = 1;
        }
      }
    }
    sub_9A278(a1);
    goto LABEL_199;
  }
LABEL_189:
  *uint64_t v34 = 1;
  *(unsigned char *)(a1 + 109877) = 1;
  *(unsigned char *)(a1 + 109879) = 1;
  *(_OWORD *)(a1 + 109888) = xmmword_142F10;
  *(_DWORD *)(a1 + 228) = 60;
  *(void *)(a1 + 2028) = 0x7FFFFFFFLL;
  *(void *)(a1 + 2040) = 0xBFF0000000000000;
  *(void *)(a1 + 2048) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 254) = 1;
  *(_DWORD *)(a1 + 260) = 0;
  *(void *)(a1 + 200) |= 0x10uLL;
  *(_DWORD *)(a1 + 1868) = 3;
  if (!*(unsigned char *)(a1 + 183436))
  {
    if (*(unsigned char *)(a1 + 183438))
    {
      int v132 = *(_DWORD *)(a1 + 1808);
      if (v132 >= 1)
      {
        uint64_t v133 = 0;
        int v134 = (double *)(a1 + 1784);
        unsigned int v79 = 0x7FFFFFFF;
        do
        {
          if (v79 > (*(v134 - 1) * 8.0 / *v134))
          {
            if (sub_D1C38(0x1Eu, 6))
            {
              int v135 = sub_D1C7C(0x1Eu);
              __uint64_t v136 = sub_DDEFC();
              int v137 = (const char *)sub_D1CB0(6);
              double v138 = *(v134 - 1);
              double v139 = *v134;
              if (v135)
              {
                printf("%lld %d AVE %s: FIG: uint64_t i = %d DataRateLimitsSize %f DataRateLimitsSeconds %f\n", v136, 30, v137, v133, *(v134 - 1), v139);
                __uint64_t v136 = sub_DDEFC();
                int v137 = (const char *)sub_D1CB0(6);
                double v138 = *(v134 - 1);
                double v139 = *v134;
              }
              syslog(3, "%lld %d AVE %s: FIG: uint64_t i = %d DataRateLimitsSize %f DataRateLimitsSeconds %f", v136, 30, v137, v133, v138, v139);
            }
            unsigned int v79 = (*(v134 - 1) * 8.0 / *v134);
            int v132 = *(_DWORD *)(a1 + 1808);
          }
          ++v133;
          v134 += 2;
        }
        while (v133 < v132);
        goto LABEL_348;
      }
    }
  }
LABEL_190:
  *(_DWORD *)(a1 + 2024) &= ~1u;
LABEL_199:
  int v87 = *(_DWORD *)(a1 + 1884);
  int v88 = *(_DWORD *)(a1 + 1880);
  int v89 = *(_DWORD *)(a1 + 228);
  if (v89 <= 0)
  {
    if ((((v88 + 15) >> 4) * ((v87 + 15) >> 4)) >> 5 <= 0xFE) {
      int v89 = 240;
    }
    else {
      int v89 = 60;
    }
  }
  if (sub_D1C38(0xD1u, 7))
  {
    int v90 = sub_D1C7C(0xD1u);
    __uint64_t v91 = sub_DDEFC();
    int v92 = (const char *)sub_D1CB0(7);
    int v93 = *(_DWORD *)(a1 + 102604);
    if (v90)
    {
      printf("%lld %d AVE %s: FIG: starting with: SPSHevcParams.PTL.general_profile_idc = %d - SPSHevcParams.PTL.general_level_idc = %d\n", v91, 209, v92, *(_DWORD *)(a1 + 102552), v93);
      __uint64_t v94 = sub_DDEFC();
      __uint64_t v95 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: starting with: SPSHevcParams.PTL.general_profile_idc = %d - SPSHevcParams.PTL.general_level_idc = %d", v94, 209, v95, *(_DWORD *)(a1 + 102552), *(_DWORD *)(a1 + 102604));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: starting with: SPSHevcParams.PTL.general_profile_idc = %d - SPSHevcParams.PTL.general_level_idc = %d", v91, 209, v92, *(_DWORD *)(a1 + 102552), v93);
    }
  }
  unsigned int v96 = v88 * v87;
  if (sub_D1C38(0xD1u, 7))
  {
    int v97 = sub_D1C7C(0xD1u);
    __uint64_t v98 = sub_DDEFC();
    BOOL v99 = (const char *)sub_D1CB0(7);
    unsigned int v100 = v25[2];
    if (v97)
    {
      printf("%lld %d AVE %s: FIG: starting with: FIGProfile = %d - FIGLevel = %d\n", v98, 209, v99, v25[1], v100);
      __uint64_t v101 = sub_DDEFC();
      int v102 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: starting with: FIGProfile = %d - FIGLevel = %d", v101, 209, v102, v25[1], v25[2]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: starting with: FIGProfile = %d - FIGLevel = %d", v98, 209, v99, v25[1], v100);
    }
  }
  unsigned int v258 = v89 * v96;
  if (sub_D1C38(0xD1u, 7))
  {
    int v103 = sub_D1C7C(0xD1u);
    __uint64_t v104 = sub_DDEFC();
    __uint64_t v105 = (const char *)sub_D1CB0(7);
    if (v103)
    {
      printf("%lld %d AVE %s: FIG: starting with: ui32MBf %d, ui32MBs %d, bitrate %d (eRCMode is %d), iExpectedFrameRate %d\n", v104, 209, v105, v96, v258, *(_DWORD *)(a1 + 192), *(_DWORD *)(a1 + 196), *(_DWORD *)(a1 + 228));
      __uint64_t v104 = sub_DDEFC();
      sub_D1CB0(7);
    }
    syslog(3, "%lld %d AVE %s: FIG: starting with: ui32MBf %d, ui32MBs %d, bitrate %d (eRCMode is %d), iExpectedFrameRate %d", v104);
  }
  if (sub_D1C38(0xD1u, 7))
  {
    int v106 = sub_D1C7C(0xD1u);
    __uint64_t v107 = sub_DDEFC();
    __uint64_t v108 = (const char *)sub_D1CB0(7);
    int v109 = *(_DWORD *)(a1 + 1868);
    if (v106)
    {
      printf("%lld %d AVE %s: FIG: starting with: USAGE %d ui32MaxNumLTR %d\n", v107, 209, v108, *(_DWORD *)(a1 + 292), v109);
      __uint64_t v110 = sub_DDEFC();
      __uint64_t v111 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: starting with: USAGE %d ui32MaxNumLTR %d", v110, 209, v111, *(_DWORD *)(a1 + 292), *(_DWORD *)(a1 + 1868));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: starting with: USAGE %d ui32MaxNumLTR %d", v107, 209, v108, *(_DWORD *)(a1 + 292), v109);
    }
  }
  if (v96 >= 0x2200001) {
    int v112 = 255;
  }
  else {
    int v112 = 180;
  }
  if (v96 < 0x880001) {
    int v112 = 150;
  }
  if (v96 <= 0x220000) {
    int v112 = 120;
  }
  if (v96 <= 0xF0000) {
    int v112 = 93;
  }
  if (v96 <= 0x87000) {
    int v112 = 90;
  }
  if (v96 <= 0x3C000) {
    int v112 = 63;
  }
  if (v96 <= 0x1E000) {
    int v112 = 60;
  }
  if (v96 >= 0x8F4D) {
    unsigned int v113 = v112;
  }
  else {
    unsigned int v113 = 30;
  }
  if (sub_D1C38(0xD1u, 7))
  {
    int v114 = sub_D1C7C(0xD1u);
    __uint64_t v115 = sub_DDEFC();
    __uint64_t v116 = (const char *)sub_D1CB0(7);
    if (v114)
    {
      printf("%lld %d AVE %s: FIG: restrict based on Luma size (%d): ui32Level = %d\n", v115, 209, v116, v96, v113);
      __uint64_t v115 = sub_DDEFC();
      __uint64_t v116 = (const char *)sub_D1CB0(7);
    }
    syslog(3, "%lld %d AVE %s: FIG: restrict based on Luma size (%d): ui32Level = %d", v115, 209, v116, v96, v113);
  }
  unsigned int v117 = *(_DWORD *)(a1 + 1880);
  if (v117 >= 0x41F9) {
    int v118 = 255;
  }
  else {
    int v118 = 180;
  }
  if (v117 < 0x20FD) {
    int v118 = 150;
  }
  if (v117 < 0x107F) {
    int v118 = 120;
  }
  if (v117 < 0xAF5) {
    int v118 = 93;
  }
  if (v117 < 0x838) {
    int v118 = 90;
  }
  if (v117 < 0x57B) {
    int v118 = 63;
  }
  if (v117 < 0x3E0) {
    int v118 = 60;
  }
  if (v117 >= 0x21E) {
    unsigned int v119 = v118;
  }
  else {
    unsigned int v119 = 30;
  }
  if (v113 > v119) {
    unsigned int v119 = v113;
  }
  unsigned int v120 = *(_DWORD *)(a1 + 1884);
  if (v120 >= 0x41F9) {
    unsigned int v121 = 255;
  }
  else {
    unsigned int v121 = 180;
  }
  if (v120 < 0x20FD) {
    unsigned int v121 = 150;
  }
  if (v120 < 0x107F) {
    unsigned int v121 = 120;
  }
  if (v120 < 0xAF5) {
    unsigned int v121 = 93;
  }
  if (v120 < 0x838) {
    unsigned int v121 = 90;
  }
  if (v120 < 0x57B) {
    unsigned int v121 = 63;
  }
  if (v120 < 0x3E0) {
    unsigned int v121 = 60;
  }
  if (v120 < 0x21E) {
    unsigned int v121 = 30;
  }
  if (v119 <= v121) {
    unsigned int v122 = v121;
  }
  else {
    unsigned int v122 = v119;
  }
  if ((*(_DWORD *)(a1 + 102552) - 1) <= 1)
  {
    if (v258 >= 0xFF000001) {
      int v123 = 255;
    }
    else {
      int v123 = 186;
    }
    if (v258 < 0x7F800001) {
      int v123 = 183;
    }
    if (v258 < 0x3FC00001) {
      int v123 = 156;
    }
    if (v258 < 0x1FE00001) {
      int v123 = 153;
    }
    if (v258 < 0xFF00001) {
      int v123 = 150;
    }
    if (v258 < 0x7F80001) {
      int v123 = 123;
    }
    if (v258 < 0x3FC0001) {
      int v123 = 120;
    }
    if (v258 < 0x1FA4001) {
      int v123 = 93;
    }
    if (v258 <= 0xFD2000) {
      int v123 = 90;
    }
    if (v258 < 0x708001) {
      int v123 = 63;
    }
    if (v258 <= 0x384000) {
      int v123 = 60;
    }
    if (v258 >= 0x87001) {
      unsigned int v124 = v123;
    }
    else {
      unsigned int v124 = 30;
    }
    if (v122 <= v124) {
      unsigned int v122 = v124;
    }
    int v125 = *(_DWORD *)(a1 + 196);
    if (v125 >= 1 && v125 != 3 && v125 != 8)
    {
      int v126 = *(_DWORD *)(a1 + 192);
      if (*(_DWORD *)(a1 + 102548))
      {
        if (v126 >= 800000001) {
          int v127 = 255;
        }
        else {
          int v127 = 186;
        }
        if (v126 < 480000001) {
          int v127 = 183;
        }
        if (v126 >= 240000001) {
          int v128 = v127;
        }
        else {
          int v128 = 156;
        }
        if (v126 < 160000001) {
          int v128 = 153;
        }
        if (v126 < 100000001) {
          int v128 = 150;
        }
        if (v126 < 50000001) {
          int v128 = 123;
        }
        BOOL v129 = v126 < 30000001;
        int v130 = 120;
      }
      else
      {
        if (v126 >= 240000001) {
          int v128 = 255;
        }
        else {
          int v128 = 186;
        }
        if (v126 < 120000001) {
          int v128 = 183;
        }
        if (v126 < 60000001) {
          int v128 = 156;
        }
        if (v126 < 40000001) {
          int v128 = 153;
        }
        if (v126 < 25000001) {
          int v128 = 150;
        }
        if (v126 < 20000001) {
          int v128 = 123;
        }
        if (v126 < 12000001) {
          int v128 = 120;
        }
        if (v126 < 10000001) {
          int v128 = 93;
        }
        if (v126 < 6000001) {
          int v128 = 90;
        }
        if (v126 < 3000001) {
          int v128 = 63;
        }
        if (v126 < 1500001) {
          int v128 = 60;
        }
        BOOL v129 = v126 < 128001;
        int v130 = 30;
      }
      if (v129) {
        unsigned int v140 = v130;
      }
      else {
        unsigned int v140 = v128;
      }
      if (sub_D1C38(0xD1u, 7))
      {
        int v141 = sub_D1C7C(0xD1u);
        __uint64_t v142 = sub_DDEFC();
        int v143 = (const char *)sub_D1CB0(7);
        int v144 = *(_DWORD *)(a1 + 192);
        if (v141)
        {
          printf("%lld %d AVE %s: FIG: restrict based on bitrate (%d) ui32Level = %d, ui32TempLevel = %d will use the MAX\n", v142, 209, v143, v144, v122, v140);
          __uint64_t v145 = sub_DDEFC();
          __uint64_t v253 = (const char *)sub_D1CB0(7);
          syslog(3, "%lld %d AVE %s: FIG: restrict based on bitrate (%d) ui32Level = %d, ui32TempLevel = %d will use the MAX", v145, 209, v253, *(_DWORD *)(a1 + 192), v122, v140);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: restrict based on bitrate (%d) ui32Level = %d, ui32TempLevel = %d will use the MAX", v142, 209, v143, v144, v122, v140);
        }
      }
      if (v122 <= v140) {
        unsigned int v122 = v140;
      }
    }
  }
  unsigned int v146 = *(_DWORD *)(a1 + 102604);
  if (v146 <= v122) {
    unsigned int v146 = v122;
  }
  *(_DWORD *)(a1 + 102604) = v146;
  *(_DWORD *)(a1 + 20452) = v146;
  unsigned int v147 = *(_DWORD *)(a1 + 183424);
  if (!v147) {
    goto LABEL_392;
  }
  if (v147 < v146 && *(int *)(a1 + 228) >= 1)
  {
    if (sub_D1C38(0xD1u, 4))
    {
      int v148 = sub_D1C7C(0xD1u);
      __uint64_t v149 = sub_DDEFC();
      BOOL v150 = (const char *)sub_D1CB0(4);
      int v151 = *(_DWORD *)(a1 + 102604);
      if (v148)
      {
        printf("%lld %d AVE %s: FIG: HEVCLevel %d incompatible with other settings (min should be %d)\n", v149, 209, v150, *(_DWORD *)(a1 + 183424), v151);
        __uint64_t v152 = sub_DDEFC();
        __uint64_t v153 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: FIG: HEVCLevel %d incompatible with other settings (min should be %d)", v152, 209, v153, *(_DWORD *)(a1 + 183424), *(_DWORD *)(a1 + 102604));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: HEVCLevel %d incompatible with other settings (min should be %d)", v149, 209, v150, *(_DWORD *)(a1 + 183424), v151);
      }
    }
    if (sub_D1C38(0xD1u, 4))
    {
      int v165 = sub_D1C7C(0xD1u);
      __uint64_t v166 = sub_DDEFC();
      int v167 = (const char *)sub_D1CB0(4);
      if (v165)
      {
        printf("%lld %d AVE %s: FIG: Luma size = %d, Luma samples per second = %d, FrameRate = %d, BitRate = %d\n", v166, 209, v167, v96, v258, *(_DWORD *)(a1 + 228), *(_DWORD *)(a1 + 192));
        __uint64_t v166 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: FIG: Luma size = %d, Luma samples per second = %d, FrameRate = %d, BitRate = %d", v166);
    }
    uint64_t v154 = 4294954394;
    goto LABEL_410;
  }
  if (v146 == v147)
  {
LABEL_392:
    uint64_t v154 = 0;
LABEL_410:
    int v164 = *(_DWORD *)(a1 + 102604);
    goto LABEL_411;
  }
  if (sub_D1C38(0xD1u, 7))
  {
    int v155 = sub_D1C7C(0xD1u);
    __uint64_t v156 = sub_DDEFC();
    int v157 = (const char *)sub_D1CB0(7);
    int v158 = *(_DWORD *)(a1 + 102604);
    if (v155)
    {
      printf("%lld %d AVE %s: FIG: HEVCLevel received (%d) is too high... consider lowering it with these settings (min should be %d)\n", v156, 209, v157, *(_DWORD *)(a1 + 183424), v158);
      __uint64_t v159 = sub_DDEFC();
      int v160 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: HEVCLevel received (%d) is too high... consider lowering it with these settings (min should be %d)", v159, 209, v160, *(_DWORD *)(a1 + 183424), *(_DWORD *)(a1 + 102604));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: HEVCLevel received (%d) is too high... consider lowering it with these settings (min should be %d)", v156, 209, v157, *(_DWORD *)(a1 + 183424), v158);
    }
  }
  if (sub_D1C38(0xD1u, 7))
  {
    int v161 = sub_D1C7C(0xD1u);
    __uint64_t v162 = sub_DDEFC();
    __uint64_t v163 = (const char *)sub_D1CB0(7);
    if (v161)
    {
      printf("%lld %d AVE %s: FIG: Luma size = %d (%dx%d), Luma samples per second = %d, ExpectedFrameRate = %d, BitRate = %d\n", v162, 209, v163, v96, *(_DWORD *)(a1 + 1880), *(_DWORD *)(a1 + 1884), v258, *(_DWORD *)(a1 + 228), *(_DWORD *)(a1 + 192));
      __uint64_t v162 = sub_DDEFC();
      sub_D1CB0(7);
    }
    syslog(3, "%lld %d AVE %s: FIG: Luma size = %d (%dx%d), Luma samples per second = %d, ExpectedFrameRate = %d, BitRate = %d", v162, 209);
  }
  uint64_t v154 = 0;
  int v164 = *(_DWORD *)(a1 + 183424);
  *(_DWORD *)(a1 + 102604) = v164;
  *(_DWORD *)(a1 + 20452) = v164;
LABEL_411:
  if (v164 == 255)
  {
    *(_DWORD *)(a1 + 20396) = 1;
    *(_DWORD *)(a1 + 102548) = 1;
    *(void *)(a1 + 20504) = 0x101010101010101;
    *(void *)(a1 + 102656) = 0x101010101010101;
  }
  if (sub_D1C38(0xD1u, 7))
  {
    int v168 = sub_D1C7C(0xD1u);
    __uint64_t v169 = sub_DDEFC();
    int v170 = (const char *)sub_D1CB0(7);
    if (v168)
    {
      printf("%lld %d AVE %s: FIG: end with encoderPrivateStorage->SPSHevcParams.PTL.general_level_idc %d (min %d), ui32LPs %d, ui32LSr %d, bitrate %d (eRCMode is %d), iExpectedFrameRate %d\n", v169, 209, v170, *(_DWORD *)(a1 + 102604), v122, v96, v258, *(_DWORD *)(a1 + 192), *(_DWORD *)(a1 + 196), *(_DWORD *)(a1 + 228));
      __uint64_t v169 = sub_DDEFC();
      sub_D1CB0(7);
    }
    syslog(3, "%lld %d AVE %s: FIG: end with encoderPrivateStorage->SPSHevcParams.PTL.general_level_idc %d (min %d), ui32LPs %d, ui32LSr %d, bitrate %d (eRCMode is %d), iExpectedFrameRate %d", v169, 209);
  }
  if (v154)
  {
    if (sub_D1C38(3u, 4))
    {
      int v171 = sub_D1C7C(3u);
      __uint64_t v172 = sub_DDEFC();
      unsigned int v173 = (const char *)sub_D1CB0(4);
      if (v171)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_PrepareHEVCLevel failed\n", v172, 3, v173, "AVE_ManageSessionSettings", 12082, "err == noErr");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_PrepareHEVCLevel failed");
    }
    return v154;
  }
  BOOL v174 = (double *)sub_C7604();
  unsigned int v175 = v174;
  int v176 = *((_DWORD *)v174 + 317);
  if ((v176 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 2028) = v176;
  }
  int v177 = *((_DWORD *)v174 + 318);
  if ((v177 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 2032) = v177;
  }
  double v178 = v174[160];
  if (v178 >= 0.0) {
    *(double *)(a1 + 2040) = v178;
  }
  double v179 = v174[161];
  if (v179 >= 0.0) {
    *(double *)(a1 + 2048) = v179;
  }
  uint64_t v180 = *((void *)v174 + 3);
  uint64_t v181 = *((void *)v174 + 4);
  *(void *)(a1 + 1888) = (*(void *)(a1 + 1888) | v180) & ~v181;
  *(void *)(a1 + 1896) = (*(void *)(a1 + 1896) | *((void *)v174 + 5)) & ~*((void *)v174 + 6);
  if (v180)
  {
    *(void *)(a1 + 2028) = 1;
    *(void *)(a1 + 2040) = 0xBFF0000000000000;
    *(void *)(a1 + 2048) = 0xBFF0000000000000;
    if ((v180 & 2) == 0)
    {
LABEL_432:
      if ((v180 & 4) == 0) {
        goto LABEL_433;
      }
      goto LABEL_438;
    }
  }
  else if ((v180 & 2) == 0)
  {
    goto LABEL_432;
  }
  *(void *)(a1 + 2028) = 0x7FFFFFFFLL;
  *(void *)(a1 + 2040) = 0xBFF0000000000000;
  *(void *)(a1 + 2048) = 0xBFF0000000000000;
  if ((v180 & 4) == 0)
  {
LABEL_433:
    if ((v181 & 4) == 0) {
      goto LABEL_434;
    }
LABEL_439:
    *(unsigned char *)(a1 + 18676) = 0;
    if ((v180 & 0x20) == 0) {
      goto LABEL_452;
    }
    goto LABEL_440;
  }
LABEL_438:
  *(unsigned char *)(a1 + 18676) = 1;
  if ((v181 & 4) != 0) {
    goto LABEL_439;
  }
LABEL_434:
  if ((v180 & 0x20) == 0) {
    goto LABEL_452;
  }
LABEL_440:
  if (*(_DWORD *)v174 == 1)
  {
    int v182 = sub_C96A4(*(_DWORD *)(a1 + 183564), *(unsigned int *)(a1 + 183560), *(_DWORD *)(a1 + 1876), *(_DWORD *)(a1 + 18760), *(_DWORD *)(a1 + 185512));
    int v183 = *(_DWORD *)(a1 + 1876);
    if (v182)
    {
      unsigned int v184 = v183 & 0xFFFFFF1F;
      goto LABEL_446;
    }
  }
  else
  {
    int v183 = *(_DWORD *)(a1 + 1876);
  }
  unsigned int v184 = v183 | 0xE0;
LABEL_446:
  *(_DWORD *)(a1 + 1876) = v184;
  uint64_t v180 = *((void *)v175 + 3);
  if ((v180 & 0x1000000) != 0) {
    *(unsigned char *)(a1 + 20210) = 1;
  }
  uint64_t v181 = *((void *)v175 + 4);
  if ((v181 & 0x1000000) != 0)
  {
    *(unsigned char *)(a1 + 20210) = 0;
    if ((v180 & 0x4000000) == 0)
    {
LABEL_450:
      if ((v181 & 0x4000000) == 0) {
        goto LABEL_452;
      }
      goto LABEL_451;
    }
  }
  else if ((v180 & 0x4000000) == 0)
  {
    goto LABEL_450;
  }
  *(_DWORD *)(a1 + 18424) = 1;
  if ((v181 & 0x4000000) != 0) {
LABEL_451:
  }
    *(_DWORD *)(a1 + 18424) = 2;
LABEL_452:
  if ((v181 & 0x20) != 0)
  {
    *(_DWORD *)(a1 + 1876) &= 0xFFFFFF1F;
    if ((v180 & 0x40) == 0)
    {
LABEL_454:
      if ((v181 & 0x40) == 0) {
        goto LABEL_455;
      }
      goto LABEL_544;
    }
  }
  else if ((v180 & 0x40) == 0)
  {
    goto LABEL_454;
  }
  unsigned char *v257 = 1;
  if ((v181 & 0x40) == 0)
  {
LABEL_455:
    if ((v180 & 0x200) == 0) {
      goto LABEL_456;
    }
    goto LABEL_545;
  }
LABEL_544:
  unsigned char *v257 = 0;
  if ((v180 & 0x200) == 0)
  {
LABEL_456:
    if ((v181 & 0x200) == 0) {
      goto LABEL_457;
    }
    goto LABEL_546;
  }
LABEL_545:
  *(unsigned char *)(a1 + 118487) = 1;
  if ((v181 & 0x200) == 0)
  {
LABEL_457:
    if ((v180 & 0x400) == 0) {
      goto LABEL_458;
    }
    goto LABEL_547;
  }
LABEL_546:
  *(unsigned char *)(a1 + 118487) = 0;
  if ((v180 & 0x400) == 0)
  {
LABEL_458:
    if ((v181 & 0x400) == 0) {
      goto LABEL_459;
    }
    goto LABEL_548;
  }
LABEL_547:
  *(unsigned char *)(a1 + 20388) = 1;
  *__uint64_t v259 = 1;
  if ((v181 & 0x400) == 0)
  {
LABEL_459:
    if ((v180 & 0x1000) == 0) {
      goto LABEL_460;
    }
    goto LABEL_549;
  }
LABEL_548:
  *(unsigned char *)(a1 + 20388) = 0;
  *__uint64_t v259 = 0;
  if ((v180 & 0x1000) == 0)
  {
LABEL_460:
    if ((v181 & 0x1000) == 0) {
      goto LABEL_461;
    }
    goto LABEL_550;
  }
LABEL_549:
  *(_WORD *)(a1 + 18685) = 257;
  *(_WORD *)(a1 + 18688) = 257;
  *(unsigned char *)(a1 + 18693) = 1;
  if ((v181 & 0x1000) == 0)
  {
LABEL_461:
    if ((v180 & 0x2000000) == 0) {
      goto LABEL_462;
    }
    goto LABEL_551;
  }
LABEL_550:
  *(_WORD *)(a1 + 18685) = 0;
  *(_WORD *)(a1 + 18688) = 0;
  *(unsigned char *)(a1 + 18693) = 0;
  if ((v180 & 0x2000000) == 0)
  {
LABEL_462:
    if ((v181 & 0x2000000) == 0) {
      goto LABEL_463;
    }
    goto LABEL_552;
  }
LABEL_551:
  *(unsigned char *)(a1 + 18694) = 1;
  if ((v181 & 0x2000000) == 0)
  {
LABEL_463:
    if ((v180 & 0x2000) == 0) {
      goto LABEL_464;
    }
    goto LABEL_553;
  }
LABEL_552:
  *(unsigned char *)(a1 + 18694) = 0;
  if ((v180 & 0x2000) == 0)
  {
LABEL_464:
    if ((v181 & 0x2000) == 0) {
      goto LABEL_465;
    }
    goto LABEL_554;
  }
LABEL_553:
  *(unsigned char *)(a1 + 183546) = 1;
  if ((v181 & 0x2000) == 0)
  {
LABEL_465:
    if ((v180 & 0x4000) == 0) {
      goto LABEL_466;
    }
    goto LABEL_555;
  }
LABEL_554:
  *(unsigned char *)(a1 + 183546) = 0;
  if ((v180 & 0x4000) == 0)
  {
LABEL_466:
    if ((v181 & 0x4000) == 0) {
      goto LABEL_467;
    }
    goto LABEL_556;
  }
LABEL_555:
  *(unsigned char *)(a1 + 183547) = 1;
  if ((v181 & 0x4000) == 0)
  {
LABEL_467:
    if ((v180 & 0x8000) == 0) {
      goto LABEL_468;
    }
    goto LABEL_557;
  }
LABEL_556:
  *(unsigned char *)(a1 + 183547) = 0;
  if ((v180 & 0x8000) == 0)
  {
LABEL_468:
    if ((v181 & 0x8000) == 0) {
      goto LABEL_469;
    }
    goto LABEL_558;
  }
LABEL_557:
  *(unsigned char *)(a1 + 18933) = 1;
  if ((v181 & 0x8000) == 0)
  {
LABEL_469:
    if ((v180 & 0x10000) == 0) {
      goto LABEL_470;
    }
    goto LABEL_559;
  }
LABEL_558:
  *(unsigned char *)(a1 + 18933) = 0;
  if ((v180 & 0x10000) == 0)
  {
LABEL_470:
    if ((v181 & 0x10000) == 0) {
      goto LABEL_471;
    }
    goto LABEL_560;
  }
LABEL_559:
  *(unsigned char *)(a1 + 18932) = 1;
  *(unsigned char *)(a1 + 87668) = 1;
  *(unsigned char *)(a1 + 109812) = 1;
  if ((v181 & 0x10000) == 0)
  {
LABEL_471:
    if ((v180 & 0x20000) == 0) {
      goto LABEL_472;
    }
    goto LABEL_561;
  }
LABEL_560:
  *(unsigned char *)(a1 + 18932) = 0;
  if ((v180 & 0x20000) == 0)
  {
LABEL_472:
    if ((v181 & 0x20000) == 0) {
      goto LABEL_473;
    }
    goto LABEL_562;
  }
LABEL_561:
  *(unsigned char *)(a1 + 18013) = 1;
  if ((v181 & 0x20000) == 0)
  {
LABEL_473:
    if ((v180 & 0x40000) == 0) {
      goto LABEL_474;
    }
    goto LABEL_563;
  }
LABEL_562:
  *(unsigned char *)(a1 + 18013) = 0;
  if ((v180 & 0x40000) == 0)
  {
LABEL_474:
    if ((v181 & 0x40000) == 0) {
      goto LABEL_475;
    }
    goto LABEL_564;
  }
LABEL_563:
  *(unsigned char *)(a1 + 18014) = 1;
  if ((v181 & 0x40000) == 0)
  {
LABEL_475:
    if ((v180 & 0x80000) == 0) {
      goto LABEL_476;
    }
    goto LABEL_565;
  }
LABEL_564:
  *(unsigned char *)(a1 + 18014) = 0;
  if ((v180 & 0x80000) == 0)
  {
LABEL_476:
    if ((v181 & 0x80000) == 0) {
      goto LABEL_477;
    }
    goto LABEL_566;
  }
LABEL_565:
  *(unsigned char *)(a1 + 18934) = 1;
  if ((v181 & 0x80000) == 0)
  {
LABEL_477:
    if ((v180 & 0x100000) == 0) {
      goto LABEL_478;
    }
    goto LABEL_567;
  }
LABEL_566:
  *(unsigned char *)(a1 + 18934) = 0;
  if ((v180 & 0x100000) == 0)
  {
LABEL_478:
    if ((v181 & 0x100000) == 0) {
      goto LABEL_479;
    }
    goto LABEL_568;
  }
LABEL_567:
  *(unsigned char *)(a1 + 18860) = 1;
  if ((v181 & 0x100000) == 0)
  {
LABEL_479:
    if ((v180 & 0x200000) == 0) {
      goto LABEL_480;
    }
    goto LABEL_569;
  }
LABEL_568:
  *(unsigned char *)(a1 + 18860) = 0;
  if ((v180 & 0x200000) == 0)
  {
LABEL_480:
    if ((v181 & 0x200000) == 0) {
      goto LABEL_482;
    }
    goto LABEL_481;
  }
LABEL_569:
  *(unsigned char *)(a1 + 20165) = 1;
  if ((v181 & 0x200000) != 0) {
LABEL_481:
  }
    *(unsigned char *)(a1 + 20165) = 0;
LABEL_482:
  uint64_t v185 = *((void *)v175 + 145);
  uint64_t v186 = *((void *)v175 + 146);
  *(void *)(a1 + 200) = (*(void *)(a1 + 200) | v185) & ~v186;
  if ((v185 & 2) != 0)
  {
    *(unsigned char *)(a1 + 254) = 1;
    if ((v186 & 2) == 0)
    {
LABEL_484:
      if ((v185 & 0x40) == 0) {
        goto LABEL_485;
      }
      goto LABEL_573;
    }
  }
  else if ((v186 & 2) == 0)
  {
    goto LABEL_484;
  }
  *(unsigned char *)(a1 + 254) = 0;
  if ((v185 & 0x40) == 0)
  {
LABEL_485:
    if ((v186 & 0x40) == 0) {
      goto LABEL_486;
    }
    goto LABEL_574;
  }
LABEL_573:
  *(_DWORD *)(a1 + 2064) = 1;
  if ((v186 & 0x40) == 0)
  {
LABEL_486:
    if ((v185 & 0x10000) == 0) {
      goto LABEL_487;
    }
    goto LABEL_575;
  }
LABEL_574:
  *(_DWORD *)(a1 + 2064) = 0;
  if ((v185 & 0x10000) == 0)
  {
LABEL_487:
    if ((v186 & 0x10000) == 0) {
      goto LABEL_488;
    }
    goto LABEL_576;
  }
LABEL_575:
  *(unsigned char *)(a1 + 18851) = 1;
  if ((v186 & 0x10000) == 0)
  {
LABEL_488:
    if ((v185 & 0x20000) == 0) {
      goto LABEL_489;
    }
    goto LABEL_577;
  }
LABEL_576:
  *(unsigned char *)(a1 + 18851) = 0;
  if ((v185 & 0x20000) == 0)
  {
LABEL_489:
    if ((v186 & 0x20000) == 0) {
      goto LABEL_490;
    }
    goto LABEL_578;
  }
LABEL_577:
  *(unsigned char *)(a1 + 18350) = 1;
  if ((v186 & 0x20000) == 0)
  {
LABEL_490:
    if ((v185 & 0x40000) == 0) {
      goto LABEL_491;
    }
    goto LABEL_579;
  }
LABEL_578:
  *(unsigned char *)(a1 + 18350) = 0;
  if ((v185 & 0x40000) == 0)
  {
LABEL_491:
    if ((v186 & 0x40000) == 0) {
      goto LABEL_492;
    }
    goto LABEL_580;
  }
LABEL_579:
  *(unsigned char *)(a1 + 18856) = 1;
  if ((v186 & 0x40000) == 0)
  {
LABEL_492:
    if ((v185 & 0x80000) == 0) {
      goto LABEL_493;
    }
    goto LABEL_581;
  }
LABEL_580:
  *(unsigned char *)(a1 + 18856) = 0;
  if ((v185 & 0x80000) == 0)
  {
LABEL_493:
    if ((v186 & 0x80000) == 0) {
      goto LABEL_494;
    }
    goto LABEL_582;
  }
LABEL_581:
  *(unsigned char *)(a1 + 18857) = 1;
  if ((v186 & 0x80000) == 0)
  {
LABEL_494:
    if ((v185 & 0x100000) == 0) {
      goto LABEL_495;
    }
    goto LABEL_583;
  }
LABEL_582:
  *(unsigned char *)(a1 + 18857) = 0;
  if ((v185 & 0x100000) == 0)
  {
LABEL_495:
    if ((v186 & 0x100000) == 0) {
      goto LABEL_496;
    }
    goto LABEL_584;
  }
LABEL_583:
  *(unsigned char *)(a1 + 18858) = 1;
  *(unsigned char *)(a1 + 18853) = 1;
  if ((v186 & 0x100000) == 0)
  {
LABEL_496:
    if ((v185 & 0x800000) == 0) {
      goto LABEL_497;
    }
    goto LABEL_585;
  }
LABEL_584:
  *(unsigned char *)(a1 + 18858) = 0;
  *(unsigned char *)(a1 + 18853) = 0;
  if ((v185 & 0x800000) == 0)
  {
LABEL_497:
    if ((v186 & 0x800000) == 0) {
      goto LABEL_498;
    }
    goto LABEL_586;
  }
LABEL_585:
  *(_WORD *)(a1 + 18388) = 257;
  if ((v186 & 0x800000) == 0)
  {
LABEL_498:
    if ((v185 & 0x1000000) == 0) {
      goto LABEL_499;
    }
    goto LABEL_587;
  }
LABEL_586:
  *(_WORD *)(a1 + 18388) = 0;
  if ((v185 & 0x1000000) == 0)
  {
LABEL_499:
    if ((v186 & 0x1000000) == 0) {
      goto LABEL_500;
    }
    goto LABEL_588;
  }
LABEL_587:
  *(unsigned char *)(a1 + 246) = 1;
  if ((v186 & 0x1000000) == 0)
  {
LABEL_500:
    if ((v185 & 0x2000000) == 0) {
      goto LABEL_501;
    }
    goto LABEL_589;
  }
LABEL_588:
  *(unsigned char *)(a1 + 246) = 0;
  if ((v185 & 0x2000000) == 0)
  {
LABEL_501:
    if ((v186 & 0x2000000) == 0) {
      goto LABEL_502;
    }
    goto LABEL_590;
  }
LABEL_589:
  *(unsigned char *)(a1 + 18850) = 1;
  if ((v186 & 0x2000000) == 0)
  {
LABEL_502:
    if ((v185 & 0x100000000) == 0) {
      goto LABEL_503;
    }
LABEL_591:
    *(_DWORD *)(a1 + 17944) = 1;
    *(unsigned char *)(a1 + 18743) = 1;
    *(_WORD *)(a1 + 118485) = 1;
    unsigned char *v256 = 1;
    if ((v186 & 0x100000000) == 0) {
      goto LABEL_505;
    }
    goto LABEL_504;
  }
LABEL_590:
  *(unsigned char *)(a1 + 18850) = 0;
  if ((v185 & 0x100000000) != 0) {
    goto LABEL_591;
  }
LABEL_503:
  if ((v186 & 0x100000000) != 0)
  {
LABEL_504:
    *(_DWORD *)(a1 + 17944) = 0;
    *(unsigned char *)(a1 + 18743) = 0;
    *(_WORD *)(a1 + 118485) = 0;
    unsigned char *v256 = 0;
  }
LABEL_505:
  int v187 = *((_DWORD *)v175 + 308);
  int v188 = *((_DWORD *)v175 + 309);
  *(_DWORD *)(a1 + 208) = (*(_DWORD *)(a1 + 208) | v187) & ~v188;
  if (v187)
  {
    *(unsigned char *)(a1 + 244) = 1;
    if (*(_DWORD *)(a1 + 18760) == 1) {
      *(unsigned char *)(a1 + 118414) = 1;
    }
  }
  if (v188)
  {
    *(unsigned char *)(a1 + 244) = 0;
    if (*(_DWORD *)(a1 + 18760) == 1) {
      *(unsigned char *)(a1 + 118414) = 0;
    }
  }
  if ((v187 & 2) != 0)
  {
    *(unsigned char *)(a1 + 247) = 1;
    if ((v188 & 2) == 0)
    {
LABEL_513:
      if ((v187 & 4) == 0) {
        goto LABEL_514;
      }
      goto LABEL_595;
    }
  }
  else if ((v188 & 2) == 0)
  {
    goto LABEL_513;
  }
  *(unsigned char *)(a1 + 247) = 0;
  if ((v187 & 4) == 0)
  {
LABEL_514:
    if ((v188 & 4) == 0) {
      goto LABEL_515;
    }
    goto LABEL_596;
  }
LABEL_595:
  *(unsigned char *)(a1 + 248) = 1;
  if ((v188 & 4) == 0)
  {
LABEL_515:
    if ((v187 & 8) == 0) {
      goto LABEL_516;
    }
    goto LABEL_597;
  }
LABEL_596:
  *(unsigned char *)(a1 + 248) = 0;
  if ((v187 & 8) == 0)
  {
LABEL_516:
    if ((v188 & 8) == 0) {
      goto LABEL_518;
    }
    goto LABEL_517;
  }
LABEL_597:
  *(unsigned char *)(a1 + 249) = 1;
  if ((v188 & 8) != 0) {
LABEL_517:
  }
    *(unsigned char *)(a1 + 249) = 0;
LABEL_518:
  *(_DWORD *)(a1 + 2024) = (*(_DWORD *)(a1 + 2024) | *((_DWORD *)v175 + 310)) & ~*((_DWORD *)v175 + 311);
  *(_DWORD *)(a1 + 212) = (*(_DWORD *)(a1 + 212) | *((_DWORD *)v175 + 324)) & ~*((_DWORD *)v175 + 325);
  int v190 = *((_DWORD *)v175 + 14);
  int v189 = *((_DWORD *)v175 + 15);
  *(_DWORD *)(a1 + 1904) = (*(_DWORD *)(a1 + 1904) | v190) & ~v189;
  if (v190)
  {
    *(unsigned char *)(a1 + 253) = 1;
    if ((v189 & 1) == 0)
    {
LABEL_520:
      if ((v190 & 2) == 0) {
        goto LABEL_521;
      }
      goto LABEL_601;
    }
  }
  else if ((v189 & 1) == 0)
  {
    goto LABEL_520;
  }
  *(unsigned char *)(a1 + 253) = 0;
  if ((v190 & 2) == 0)
  {
LABEL_521:
    if ((v189 & 2) == 0) {
      goto LABEL_522;
    }
    goto LABEL_602;
  }
LABEL_601:
  *(unsigned char *)(a1 + 183545) = 1;
  if ((v189 & 2) == 0)
  {
LABEL_522:
    if ((v190 & 0x10) == 0) {
      goto LABEL_523;
    }
    goto LABEL_603;
  }
LABEL_602:
  *(unsigned char *)(a1 + 183545) = 0;
  if ((v190 & 0x10) == 0)
  {
LABEL_523:
    if ((v189 & 0x10) == 0) {
      goto LABEL_524;
    }
    goto LABEL_604;
  }
LABEL_603:
  *(_DWORD *)(a1 + 18776) = 4;
  *(_WORD *)(a1 + 18780) = 257;
  if ((v189 & 0x10) == 0)
  {
LABEL_524:
    if ((v190 & 8) == 0) {
      goto LABEL_525;
    }
    goto LABEL_605;
  }
LABEL_604:
  *(_DWORD *)(a1 + 18776) = 2;
  *(_WORD *)(a1 + 18780) = 1;
  if ((v190 & 8) == 0)
  {
LABEL_525:
    if ((v189 & 8) == 0) {
      goto LABEL_526;
    }
    goto LABEL_606;
  }
LABEL_605:
  *(unsigned char *)(a1 + 18861) = 1;
  if ((v189 & 8) == 0)
  {
LABEL_526:
    if ((v190 & 0x20) == 0) {
      goto LABEL_527;
    }
    goto LABEL_607;
  }
LABEL_606:
  *(unsigned char *)(a1 + 18861) = 0;
  if ((v190 & 0x20) == 0)
  {
LABEL_527:
    if ((v189 & 0x20) == 0) {
      goto LABEL_528;
    }
    goto LABEL_608;
  }
LABEL_607:
  *(unsigned char *)(a1 + 18935) = 1;
  if ((v189 & 0x20) == 0)
  {
LABEL_528:
    if ((v190 & 0x40) == 0) {
      goto LABEL_529;
    }
    goto LABEL_609;
  }
LABEL_608:
  *(unsigned char *)(a1 + 18935) = 0;
  if ((v190 & 0x40) == 0)
  {
LABEL_529:
    if ((v189 & 0x40) == 0) {
      goto LABEL_531;
    }
    goto LABEL_530;
  }
LABEL_609:
  *(unsigned char *)(a1 + 17881) = 1;
  if ((v189 & 0x40) != 0) {
LABEL_530:
  }
    *(unsigned char *)(a1 + 17881) = 0;
LABEL_531:
  if (((_BYTE)v175[98] & 8) != 0) {
    *(_DWORD *)(a1 + 1920) = 0x8000000;
  }
  int v191 = *((_DWORD *)v175 + 295);
  if (v191 >= 1)
  {
    *(_DWORD *)(a1 + 192) = v191;
    *(_WORD *)(a1 + 183436) = 257;
  }
  int v192 = *((_DWORD *)v175 + 16);
  if ((v192 - 1) <= 0x1F) {
    *(_DWORD *)(a1 + 20176) = v192;
  }
  int v193 = *((_DWORD *)v175 + 338);
  if ((v193 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 18776) = v193;
    *(unsigned char *)(a1 + 18780) = 1;
  }
  unsigned int v194 = *((_DWORD *)v175 + 341);
  if ((v194 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 18788) = v194;
    if (v194 >= 5)
    {
      if (sub_D1C38(0x16u, 4))
      {
        int v197 = sub_D1C7C(0x16u);
        __uint64_t v198 = sub_DDEFC();
        uint64_t v199 = (const char *)sub_D1CB0(4);
        if (v197)
        {
          printf("%lld %d AVE %s: FIG: SetProperty AVE_kVTCompressionPropertyKey_SAOMode not supported (%d)\n", v198, 22, v199, v194);
          __uint64_t v200 = sub_DDEFC();
          int v254 = (const char *)sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: FIG: SetProperty AVE_kVTCompressionPropertyKey_SAOMode not supported (%d)", v200, 22, v254, v194);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: SetProperty AVE_kVTCompressionPropertyKey_SAOMode not supported (%d)", v198, 22, v199, v194);
        }
      }
      LOBYTE(v195) = 0;
      LOBYTE(v196) = 0;
    }
    else
    {
      unint64_t v195 = 0x101000100uLL >> (8 * v194);
      unint64_t v196 = 0x101010000uLL >> (8 * v194);
    }
    *(unsigned char *)(a1 + 137925) = v195;
    *(unsigned char *)(a1 + 137926) = v196;
  }
  int v201 = *((_DWORD *)v175 + 337);
  if (sub_13AE0(*(_DWORD *)(a1 + 183568), 1, 1, v201)) {
    *(_WORD *)(a1 + 17872) = v201;
  }
  int v202 = *((_DWORD *)v175 + 326);
  if ((v202 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 18412) = v202;
  }
  int v203 = *((_DWORD *)v175 + 327);
  if ((v203 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 18408) = v203;
  }
  int v204 = *((_DWORD *)v175 + 328);
  if ((v204 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 18404) = v204;
  }
  int v205 = *((_DWORD *)v175 + 329);
  if ((v205 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 18416) = v205;
  }
  int v206 = *((_DWORD *)v175 + 313);
  if ((v206 & 0x80000000) == 0) {
    *(_WORD *)(a1 + 18328) = v206;
  }
  int v207 = *((_DWORD *)v175 + 316);
  if (v207 <= 0)
  {
    if (v207) {
      goto LABEL_636;
    }
    char v208 = 0;
  }
  else
  {
    char v208 = 1;
  }
  *(_DWORD *)(a1 + 224) = v207;
  *(unsigned char *)(a1 + 18846) = v208;
LABEL_636:
  int v209 = *((_DWORD *)v175 + 285);
  if (v209 != -13) {
    *(_DWORD *)(a1 + 1840) = v209;
  }
  int v210 = *((_DWORD *)v175 + 286);
  if (v210 != -13) {
    *(_DWORD *)(a1 + 1844) = v210;
  }
  int v211 = *((_DWORD *)v175 + 287);
  if (v211 != -13) {
    *(_DWORD *)(a1 + 1848) = v211;
  }
  int v212 = *((_DWORD *)v175 + 288);
  if (v212 != -13) {
    *(_DWORD *)(a1 + 1852) = v212;
  }
  int v213 = *((_DWORD *)v175 + 282);
  if (v213 != -13) {
    *(_DWORD *)(a1 + 1824) = v213;
  }
  int v214 = *((_DWORD *)v175 + 283);
  if (v214 != -13) {
    *(_DWORD *)(a1 + 1828) = v214;
  }
  int v215 = *((_DWORD *)v175 + 284);
  if (v215 != -13) {
    *(_DWORD *)(a1 + 1832) = v215;
  }
  unsigned int v216 = *((_DWORD *)v175 + 342);
  if (v216 <= 4) {
    *(_DWORD *)(a1 + 18868) = v216;
  }
  int v217 = *((_DWORD *)v175 + 331);
  if (v217)
  {
    double v218 = (double)v217 / 100.0 + 1.0;
    unsigned int v219 = *(unsigned __int8 *)(a1 + 18420);
    float v220 = v218 * (double)v219;
    if (v220 >= 25.0 || v220 < 0.0) {
      float v220 = (float)v219;
    }
    *(unsigned char *)(a1 + 18420) = v220;
  }
  int v222 = *((_DWORD *)v175 + 330);
  if ((v222 & 0x80000000) == 0) {
    *(unsigned char *)(a1 + 18420) = v222;
  }
  int v223 = *((_DWORD *)v175 + 349);
  if (v223 >= 1) {
    *(_DWORD *)(a1 + 20192) = v223;
  }
  int v224 = *((_DWORD *)v175 + 350);
  if (v224 >= 1) {
    *(_DWORD *)(a1 + 20196) = v224;
  }
  int v225 = *((_DWORD *)v175 + 277);
  if ((v225 & 0x80000000) == 0)
  {
    *uint64_t v15 = v225;
    *(unsigned char *)(a1 + 18845) = 1;
  }
  int v226 = *((_DWORD *)v175 + 336);
  if (v226 >= 1) {
    *(_DWORD *)(a1 + 18060) = v226;
  }
  unsigned int v227 = *((_DWORD *)v175 + 340);
  if (v227 <= 2) {
    *(unsigned char *)(a1 + 138594) = v227 != 0;
  }
  int v228 = *((_DWORD *)v175 + 314);
  if ((v228 & 0x80000000) == 0)
  {
    *(unsigned char *)(a1 + 1772) = v228 != 0;
    *(_DWORD *)(a1 + 19464) = v228;
  }
  int v229 = *((_DWORD *)v175 + 294);
  if (v229 >= 1) {
    *(_DWORD *)(a1 + 196) = v229;
  }
  int v230 = *((_DWORD *)v175 + 295);
  if (v230 >= 1) {
    *(_DWORD *)(a1 + 192) = v230;
  }
  int v231 = *((_DWORD *)v175 + 302);
  if ((v231 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 232) = v231;
    *(void *)(a1 + 200) |= 0x80000000uLL;
  }
  double v232 = v175[149];
  if (v232 >= 0.0)
  {
    float v233 = v232;
    *(float *)(a1 + 240) = v233;
  }
  int v234 = *((_DWORD *)v175 + 345);
  if (v234 >= 1) {
    *(_DWORD *)(a1 + 220) = v234;
  }
  if (*(unsigned char *)(a1 + 18935))
  {
    int v235 = *(_DWORD *)(a1 + 228);
    if (v235 >= 1) {
      double v236 = (double)v235;
    }
    else {
      double v236 = 30.0;
    }
    if (sub_D1C38(0x1Eu, 6))
    {
      int v237 = sub_D1C7C(0x1Eu);
      __uint64_t v238 = sub_DDEFC();
      __uint64_t v239 = (const char *)sub_D1CB0(6);
      int v240 = *(_DWORD *)(a1 + 1884);
      int v241 = *(_DWORD *)(a1 + 192);
      if (v237)
      {
        printf("%lld %d AVE %s: FIG: PrepareMemoryUsage - br %d, thr %f\n", v238, 30, v239, v241, v236 * ((double)(v240 * *(_DWORD *)(a1 + 1880)) * 1.5) * 0.2);
        __uint64_t v242 = sub_DDEFC();
        __uint64_t v255 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: PrepareMemoryUsage - br %d, thr %f", v242, 30, v255, *(_DWORD *)(a1 + 192), v236 * ((double)(*(_DWORD *)(a1 + 1884) * *(_DWORD *)(a1 + 1880)) * 1.5) * 0.2);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: PrepareMemoryUsage - br %d, thr %f", v238, 30, v239, v241, v236 * ((double)(v240 * *(_DWORD *)(a1 + 1880)) * 1.5) * 0.2);
      }
    }
    if (v236 * ((double)(*(_DWORD *)(a1 + 1884) * *(_DWORD *)(a1 + 1880)) * 1.5) * 0.2 <= (double)*(int *)(a1 + 192)) {
      *(unsigned char *)(a1 + 18935) = 0;
    }
    else {
      *(_DWORD *)(a1 + 20204) = 50;
    }
  }
  uint64_t v154 = sub_8D33C((const void **)a1);
  if (v154 && sub_D1C38(3u, 4))
  {
    int v243 = sub_D1C7C(3u);
    __uint64_t v244 = sub_DDEFC();
    __uint64_t v245 = (const char *)sub_D1CB0(4);
    if (v243)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_ValidateEncoderParameters failed\n", v244, 3, v245, "AVE_ManageSessionSettings", 12103, "err == noErr");
      sub_DDEFC();
      sub_D1CB0(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ValidateEncoderParameters failed");
  }
  return v154;
}

void sub_96A9C(uint64_t a1, CFDictionaryRef theDict, int *a3, uint64_t a4)
{
  if (!a3)
  {
    if (sub_D1C38(3u, 4))
    {
      int v20 = sub_D1C7C(3u);
      __uint64_t v21 = sub_DDEFC();
      __uint64_t v22 = (const char *)sub_D1CB0(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_GetPerFrameData PerFrameData = NULL.\n", v21, 3, v22, "AVE_GetPerFrameData", 4987, "PerFrameData != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_GetPerFrameData PerFrameData = NULL.");
    }
    return;
  }
  uint64_t v8 = a1 + 184996;
  uint64_t v9 = a1 + 183437;
  uint64_t v10 = a1 + 18012;
  *((unsigned char *)a3 + 136) = *(unsigned char *)(a1 + 183437);
  *(unsigned char *)(a1 + 183437) = 0;
  a3[35] = *(_DWORD *)(a1 + 192);
  *((unsigned char *)a3 + 128) = *(unsigned char *)(a1 + 183439);
  *(unsigned char *)(a1 + 183439) = 0;
  a3[33] = *(_DWORD *)(a1 + 228);
  long long v11 = *(_OWORD *)(a1 + 1776);
  long long v12 = *(_OWORD *)(a1 + 1792);
  *((void *)a3 + 23) = *(void *)(a1 + 1808);
  *(_OWORD *)(a3 + 42) = v12;
  *(_OWORD *)(a3 + 38) = v11;
  *(unsigned char *)(a1 + 183438) = 0;
  a3[381] = *(_DWORD *)(a1 + 18776);
  *((unsigned char *)a3 + 1528) = *(_DWORD *)(a1 + 18784) == 1;
  *((unsigned char *)a3 + 1530) = *(_DWORD *)(a1 + 18788) == 4;
  *((unsigned char *)a3 + 1531) = *(unsigned char *)(a1 + 18852);
  *((unsigned char *)a3 + 1532) = *(unsigned char *)(a1 + 18853);
  *((unsigned char *)a3 + 1536) = *(unsigned char *)(a1 + 18861);
  *((unsigned char *)a3 + 1533) = *(unsigned char *)(a1 + 18854);
  a3[386] = *(_DWORD *)(a1 + 18808);
  *((unsigned char *)a3 + 1537) = *(unsigned char *)(a1 + 18012);
  int v13 = *(_DWORD *)(a1 + 184996);
  if (!v13) {
    int v13 = *(_DWORD *)(a1 + 1880);
  }
  a3[181] = v13;
  int v14 = *(_DWORD *)(a1 + 185000);
  if (!v14) {
    int v14 = *(_DWORD *)(a1 + 1884);
  }
  a3[182] = v14;
  *((unsigned char *)a3 + 1535) = 0;
  *((unsigned char *)a3 + 1529) = 0;
  if ((*(unsigned char *)(a1 + 1876) & 0xE0) == 0)
  {
    *((unsigned char *)a3 + 1538) = 0;
    goto LABEL_47;
  }
  int v15 = *(_DWORD *)(a1 + 1884);
  int v16 = *(_DWORD *)(a1 + 1880);
  if (!*(unsigned char *)(a1 + 20210))
  {
    char v23 = 1;
    goto LABEL_19;
  }
  int v17 = *((_DWORD *)sub_C7604() + 332);
  if (v17 < 1)
  {
    char v23 = *(_DWORD *)(*(void *)(a4 + 144) + 72) < 255;
    goto LABEL_19;
  }
  unsigned int v18 = *(_DWORD *)(v9 + 7);
  if (v18 > 3)
  {
    int v24 = v18 % v17;
    char v23 = *(unsigned char *)(v8 + 521);
    if (!v24)
    {
      char v19 = v23 ^ 1;
      goto LABEL_21;
    }
LABEL_19:
    *((unsigned char *)a3 + 1538) = v23;
    goto LABEL_22;
  }
  char v19 = 1;
LABEL_21:
  *((unsigned char *)a3 + 1538) = v19;
  *(unsigned char *)(v8 + 521) = v19;
LABEL_22:
  uint64_t v25 = *(void *)(a4 + 144);
  double v26 = *(double *)(v25 + 56);
  double v27 = 1.0;
  if (v26 == 0.0) {
    double v26 = 1.0;
  }
  *((double *)a3 + 198) = v26;
  int v28 = *(_DWORD *)(v25 + 80);
  a3[398] = v28;
  if (*(int *)(v9 + 127) < 26 || ((int v29 = *(_DWORD *)(v25 + 64), v28 == 2) ? (v30 = v29 == 2418) : (v30 = 0), !v30))
  {
    if (v28 != 1) {
      goto LABEL_37;
    }
  }
  signed int v31 = ((v16 + 15) >> 4) * ((v15 + 15) >> 4);
  if (v31 <= 3600)
  {
    if (v26 >= 0.39) {
      goto LABEL_37;
    }
    goto LABEL_35;
  }
  if (v31 > 0x1FE0)
  {
LABEL_36:
    *((double *)a3 + 198) = v27;
    goto LABEL_37;
  }
  if (v26 <= 0.5)
  {
LABEL_35:
    double v27 = v26 + v26;
    goto LABEL_36;
  }
LABEL_37:
  if (*(_DWORD *)(v9 + 7) <= 5u) {
    *((unsigned char *)a3 + 1538) = 1;
  }
  if (sub_D1C38(0x1Cu, 8))
  {
    int v32 = sub_D1C7C(0x1Cu);
    __uint64_t v33 = sub_DDEFC();
    uint64_t v34 = (const char *)sub_D1CB0(8);
    int v35 = *(_DWORD *)(v9 + 7);
    int v36 = *((unsigned __int8 *)a3 + 1538);
    if (v32)
    {
      printf("%lld %d AVE %s: MCTF F %d iBand0Strength %d NoiseFrame %d\n", v33, 28, v34, v35, *(_DWORD *)(*(void *)(a4 + 144) + 72), v36);
      __uint64_t v37 = sub_DDEFC();
      __uint64_t v38 = (const char *)sub_D1CB0(8);
      syslog(3, "%lld %d AVE %s: MCTF F %d iBand0Strength %d NoiseFrame %d", v37, 28, v38, *(_DWORD *)(v9 + 7), *(_DWORD *)(*(void *)(a4 + 144) + 72), *((unsigned __int8 *)a3 + 1538));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MCTF F %d iBand0Strength %d NoiseFrame %d", v33, 28, v34, v35, *(_DWORD *)(*(void *)(a4 + 144) + 72), v36);
    }
  }
  int v39 = *(_DWORD *)(v8 + 524);
  if (!*((unsigned char *)a3 + 1538))
  {
    if ((v39 - 1) > 4)
    {
      *(_DWORD *)(v8 + 524) = 0;
      goto LABEL_47;
    }
    *((unsigned char *)a3 + 1538) = 1;
  }
  *(_DWORD *)(v8 + 524) = v39 + 1;
LABEL_47:
  *(void *)a3 = 0;
  *(void *)(a4 + 72) = 0;
  *(void *)&long long v40 = -1;
  *((void *)&v40 + 1) = -1;
  *(_OWORD *)(a3 + 58) = v40;
  *((_WORD *)a3 + 100) = 0;
  *((unsigned char *)a3 + 1576) = 0;
  *((void *)a3 + 24) = 0;
  *((void *)a3 + 2397) = 0;
  *((unsigned char *)a3 + 212) = 0;
  a3[54] = -1;
  *((void *)a3 + 28) = 0;
  *(void *)(a3 + 51) = 0xFFFFFFF3FFFFFFFFLL;
  *(_OWORD *)(a3 + 62) = v40;
  *((void *)a3 + 87) = 0;
  *((unsigned char *)a3 + 732) = 0;
  a3[387] = -1;
  a3[176] = -1;
  *(_OWORD *)(a3 + 389) = v40;
  if (*(_DWORD *)(v10 + 388) == 2 && !*(void *)(v9 + 147))
  {
    CFDataRef Value = (const __CFData *)CFDictionaryGetValue(theDict, @"ReadFirstPassStats");
    if (Value) {
      *((void *)a3 + 2397) = CFDataGetBytePtr(Value);
    }
  }
  if (theDict)
  {
    if (sub_D1C38(0x1Du, 6))
    {
      int v42 = sub_D1C7C(0x1Du);
      __uint64_t v43 = sub_DDEFC();
      int v44 = (const char *)sub_D1CB0(6);
      int v45 = *(_DWORD *)(v9 + 7);
      if (v42)
      {
        printf("%lld %d AVE %s: FIG: frameProperties is NOT NULL -> start parsing - Buffer F %d\n", v43, 29, v44, v45);
        __uint64_t v46 = sub_DDEFC();
        __uint64_t v312 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: frameProperties is NOT NULL -> start parsing - Buffer F %d", v46, 29, v312, *(_DWORD *)(v9 + 7));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: frameProperties is NOT NULL -> start parsing - Buffer F %d", v43, 29, v44, v45);
      }
    }
    int v47 = CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_ForceKeyFrame);
    if (v47 && CFEqual(v47, kCFBooleanTrue))
    {
      if (*(_DWORD *)(v10 + 372)) {
        int v48 = 3;
      }
      else {
        int v48 = (*(unsigned char *)(a1 + 2024) & 1) != 0 ? 1 : 2;
      }
      *a3 = v48;
      *((void *)a3 + 2) |= 0x100uLL;
      if (sub_D1C38(0x1Du, 6))
      {
        int v49 = sub_D1C7C(0x1Du);
        __uint64_t v50 = sub_DDEFC();
        __uint64_t v51 = (const char *)sub_D1CB0(6);
        uint64_t v52 = *((void *)a3 + 2);
        if (v49)
        {
          printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceKeyFrame = %d %llx\n", v50, 29, v51, *a3, v52);
          __uint64_t v53 = sub_DDEFC();
          int v54 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceKeyFrame = %d %llx", v53, 29, v54, *a3, *((void *)a3 + 2));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceKeyFrame = %d %llx", v50, 29, v51, *a3, v52);
        }
      }
    }
    unsigned int v55 = CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_FirstMbInRecvSlices);
    if (v55)
    {
      unsigned int v56 = v55;
      CFTypeID TypeID = CFDataGetTypeID();
      if (TypeID == CFGetTypeID(v56))
      {
        *((unsigned char *)a3 + 5) = 1;
        if (sub_D1C38(0x1Du, 6))
        {
          int v58 = sub_D1C7C(0x1Du);
          __uint64_t v59 = sub_DDEFC();
          int v60 = (const char *)sub_D1CB0(6);
          if (v58)
          {
            printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FirstMbInRecvSlices\n", v59, 29, v60);
            __uint64_t v61 = sub_DDEFC();
            int v313 = (const char *)sub_D1CB0(6);
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FirstMbInRecvSlices", v61, 29, v313);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FirstMbInRecvSlices", v59, 29, v60);
          }
        }
      }
    }
    BOOL v62 = CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_ForceRefresh);
    if (v62)
    {
      if (CFEqual(v62, kCFBooleanTrue))
      {
        *((unsigned char *)a3 + 5) = 1;
        if (sub_D1C38(0x1Du, 6))
        {
          int v63 = sub_D1C7C(0x1Du);
          __uint64_t v64 = sub_DDEFC();
          int v65 = (const char *)sub_D1CB0(6);
          int v66 = *((unsigned __int8 *)a3 + 5);
          if (v63)
          {
            printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceRefresh = %d\n", v64, 29, v65, v66);
            __uint64_t v67 = sub_DDEFC();
            __uint64_t v314 = (const char *)sub_D1CB0(6);
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceRefresh = %d", v67, 29, v314, *((unsigned __int8 *)a3 + 5));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceRefresh = %d", v64, 29, v65, v66);
          }
        }
      }
    }
    uint64_t v343 = a4;
    CFNumberRef v68 = (const __CFNumber *)CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_NumBitsInTransmissionBuffer);
    if (v68)
    {
      CFNumberRef v69 = v68;
      CFTypeID v70 = CFNumberGetTypeID();
      if (v70 == CFGetTypeID(v69))
      {
        __uint64_t v71 = a3 + 7;
        CFNumberGetValue(v69, kCFNumberSInt32Type, a3 + 7);
        if (sub_D1C38(0x1Du, 6))
        {
          int v72 = sub_D1C7C(0x1Du);
          __uint64_t v73 = sub_DDEFC();
          double v74 = (const char *)sub_D1CB0(6);
          int v75 = *v71;
          if (v72)
          {
            printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_NumBitsInTransmissionBuffer = %d\n", v73, 29, v74, v75);
            __uint64_t v76 = sub_DDEFC();
            int v315 = (const char *)sub_D1CB0(6);
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_NumBitsInTransmissionBuffer = %d", v76, 29, v315, *v71);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_NumBitsInTransmissionBuffer = %d", v73, 29, v74, v75);
          }
        }
      }
    }
    CFNumberRef v77 = (const __CFNumber *)CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_FECNumBitsAdded);
    if (v77)
    {
      CFNumberRef v78 = v77;
      CFTypeID v79 = CFNumberGetTypeID();
      if (v79 == CFGetTypeID(v78))
      {
        int v80 = a3 + 8;
        CFNumberGetValue(v78, kCFNumberSInt32Type, a3 + 8);
        if (sub_D1C38(0x1Du, 6))
        {
          int v81 = sub_D1C7C(0x1Du);
          __uint64_t v82 = sub_DDEFC();
          double v83 = (const char *)sub_D1CB0(6);
          int v84 = *v80;
          if (v81)
          {
            printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FECNumBitsAdded = %d\n", v82, 29, v83, v84);
            __uint64_t v85 = sub_DDEFC();
            __uint64_t v316 = (const char *)sub_D1CB0(6);
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FECNumBitsAdded = %d", v85, 29, v316, *v80);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FECNumBitsAdded = %d", v82, 29, v83, v84);
          }
        }
      }
    }
    CFNumberRef v86 = (const __CFNumber *)CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_PacketHeaderBitsAdded);
    if (v86)
    {
      CFNumberRef v87 = v86;
      CFTypeID v88 = CFNumberGetTypeID();
      if (v88 == CFGetTypeID(v87))
      {
        int v89 = a3 + 9;
        CFNumberGetValue(v87, kCFNumberSInt32Type, a3 + 9);
        if (sub_D1C38(0x1Du, 6))
        {
          int v90 = sub_D1C7C(0x1Du);
          __uint64_t v91 = sub_DDEFC();
          int v92 = (const char *)sub_D1CB0(6);
          int v93 = *v89;
          if (v90)
          {
            printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_PacketHeaderBitsAdded = %d\n", v91, 29, v92, v93);
            __uint64_t v94 = sub_DDEFC();
            int v317 = (const char *)sub_D1CB0(6);
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_PacketHeaderBitsAdded = %d", v94, 29, v317, *v89);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_PacketHeaderBitsAdded = %d", v91, 29, v92, v93);
          }
        }
      }
    }
    uint64_t v341 = v9;
    uint64_t v340 = a1;
    int v342 = a3 + 389;
    __uint64_t v95 = CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_AcknowledgedTokens);
    if (!v95) {
      goto LABEL_113;
    }
    unsigned int v96 = v95;
    CFTypeID v97 = CFArrayGetTypeID();
    if (v97 != CFGetTypeID(v96)) {
      goto LABEL_113;
    }
    a3[12] = CFArrayGetCount((CFArrayRef)v96);
    if (sub_D1C38(0x1Du, 6))
    {
      int v98 = sub_D1C7C(0x1Du);
      __uint64_t v99 = sub_DDEFC();
      unsigned int v100 = (const char *)sub_D1CB0(6);
      int v101 = a3[12];
      if (v98)
      {
        printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_AcknowledgedTokens, count = %d\n", v99, 29, v100, v101);
        __uint64_t v102 = sub_DDEFC();
        __uint64_t v318 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_AcknowledgedTokens, count = %d", v102, 29, v318, a3[12]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_AcknowledgedTokens, count = %d", v99, 29, v100, v101);
      }
    }
    unsigned int v103 = a3[12];
    if (v103 < 0x11)
    {
      if (!v103)
      {
LABEL_113:
        CFDictionaryRef v113 = theDict;
        CFNumberRef v114 = (const __CFNumber *)CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_RoundTripDelay);
        uint64_t v115 = v343;
        if (v114)
        {
          __uint64_t v116 = a3 + 29;
          CFNumberGetValue(v114, kCFNumberSInt32Type, a3 + 29);
          if (sub_D1C38(0x1Du, 6))
          {
            int v117 = sub_D1C7C(0x1Du);
            __uint64_t v118 = sub_DDEFC();
            unsigned int v119 = (const char *)sub_D1CB0(6);
            int v120 = *v116;
            if (v117)
            {
              printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_RoundTripDelay = %d\n", v118, 29, v119, v120);
              __uint64_t v121 = sub_DDEFC();
              unsigned __int16 v319 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_RoundTripDelay = %d", v121, 29, v319, *v116);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_RoundTripDelay = %d", v118, 29, v119, v120);
            }
            uint64_t v115 = v343;
          }
        }
        CFNumberRef v122 = (const __CFNumber *)CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_PadFrameToMinimumSize);
        if (v122)
        {
          int v123 = a3 + 31;
          CFNumberGetValue(v122, kCFNumberSInt32Type, a3 + 31);
          if (sub_D1C38(0x1Du, 6))
          {
            int v124 = sub_D1C7C(0x1Du);
            __uint64_t v125 = sub_DDEFC();
            int v126 = (const char *)sub_D1CB0(6);
            int v127 = *v123;
            if (v124)
            {
              printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_PadFrameToMinimumSize = %d\n", v125, 29, v126, v127);
              __uint64_t v128 = sub_DDEFC();
              unsigned int v320 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_PadFrameToMinimumSize = %d", v128, 29, v320, *v123);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_PadFrameToMinimumSize = %d", v125, 29, v126, v127);
            }
            uint64_t v115 = v343;
          }
        }
        BOOL v129 = CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_RepeatedFrame);
        if (v129)
        {
          if (CFEqual(v129, kCFBooleanTrue))
          {
            *((unsigned char *)a3 + 6) = 1;
            if (sub_D1C38(0x1Du, 6))
            {
              int v130 = sub_D1C7C(0x1Du);
              __uint64_t v131 = sub_DDEFC();
              int v132 = (const char *)sub_D1CB0(6);
              int v133 = *((unsigned __int8 *)a3 + 6);
              if (v130)
              {
                printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_RepeatedFrame = %d\n", v131, 29, v132, v133);
                __uint64_t v134 = sub_DDEFC();
                int v321 = (const char *)sub_D1CB0(6);
                syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_RepeatedFrame = %d", v134, 29, v321, *((unsigned __int8 *)a3 + 6));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_RepeatedFrame = %d", v131, 29, v132, v133);
              }
            }
          }
        }
        CFDataRef v135 = (const __CFData *)CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_UserQpMap);
        if (v135) {
          *((void *)a3 + 24) = CFDataGetBytePtr(v135);
        }
        CFNumberRef v136 = (const __CFNumber *)CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_VRAUsedDimension);
        if (v136)
        {
          LODWORD(valuePtr) = 0;
          CFNumberGetValue(v136, kCFNumberSInt32Type, &valuePtr);
          int v137 = (unsigned __int16)valuePtr;
          a3[10] = WORD1(valuePtr);
          a3[11] = v137;
          if (sub_D1C38(0x1Du, 6))
          {
            int v138 = sub_D1C7C(0x1Du);
            __uint64_t v139 = sub_DDEFC();
            unsigned int v140 = (const char *)sub_D1CB0(6);
            int v141 = a3[11];
            if (v138)
            {
              printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_VRAUsedDimension = %d x %d\n", v139, 29, v140, a3[10], v141);
              __uint64_t v142 = sub_DDEFC();
              int v143 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_VRAUsedDimension = %d x %d", v142, 29, v143, a3[10], a3[11]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_VRAUsedDimension = %d x %d", v139, 29, v140, a3[10], v141);
            }
          }
        }
        int v144 = CFDictionaryGetValue(theDict, @"AttachDPB");
        if (v144 && CFEqual(v144, kCFBooleanTrue))
        {
          if (sub_D1C38(0x1Du, 6))
          {
            int v145 = sub_D1C7C(0x1Du);
            __uint64_t v146 = sub_DDEFC();
            unsigned int v147 = (const char *)sub_D1CB0(6);
            int v148 = *(_DWORD *)(v341 + 7);
            if (v145)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncodeFrameOptionKey_AttachDPB found (%d)\n", v146, 29, v147, v148);
              __uint64_t v149 = sub_DDEFC();
              __uint64_t v322 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncodeFrameOptionKey_AttachDPB found (%d)", v149, 29, v322, *(_DWORD *)(v341 + 7));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncodeFrameOptionKey_AttachDPB found (%d)", v146, 29, v147, v148);
            }
          }
          *((unsigned char *)a3 + 200) = 1;
        }
        BOOL v150 = CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_SetDPB);
        if (v150)
        {
          if (*(_DWORD *)(v341 + 7))
          {
            int v151 = v150;
            if (sub_D1C38(0x1Du, 6))
            {
              int v152 = sub_D1C7C(0x1Du);
              __uint64_t v153 = sub_DDEFC();
              uint64_t v154 = (const char *)sub_D1CB0(6);
              int v155 = *(_DWORD *)(v341 + 7);
              if (v152)
              {
                printf("%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SetDPB found (%d)\n", v153, 29, v154, v155);
                __uint64_t v156 = sub_DDEFC();
                int v323 = (const char *)sub_D1CB0(6);
                syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SetDPB found (%d)", v156, 29, v323, *(_DWORD *)(v341 + 7));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SetDPB found (%d)", v153, 29, v154, v155);
              }
              uint64_t v115 = v343;
            }
            *((unsigned char *)a3 + 201) = 1;
            *(void *)(v115 + 72) = v151;
          }
          else
          {
            if (sub_D1C38(0x16u, 5))
            {
              int v157 = sub_D1C7C(0x16u);
              __uint64_t v158 = sub_DDEFC();
              __uint64_t v159 = (const char *)sub_D1CB0(5);
              if (v157)
              {
                printf("%lld %d AVE %s: FIG: frameNumber = 0 and updateDPB = true\n", v158, 22, v159);
                __uint64_t v160 = sub_DDEFC();
                int v324 = (const char *)sub_D1CB0(5);
                syslog(3, "%lld %d AVE %s: FIG: frameNumber = 0 and updateDPB = true", v160, 22, v324);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: FIG: frameNumber = 0 and updateDPB = true", v158, 22, v159);
              }
            }
            if (sub_D1C38(0x16u, 5))
            {
              int v161 = sub_D1C7C(0x16u);
              __uint64_t v162 = sub_DDEFC();
              __uint64_t v163 = (const char *)sub_D1CB0(5);
              if (v161)
              {
                printf("%lld %d AVE %s: FIG: you need to encode at least one picture to prime AVE before using this feature. -> will disregard updateDPB flag\n", v162, 22, v163);
                __uint64_t v164 = sub_DDEFC();
                __uint64_t v325 = (const char *)sub_D1CB0(5);
                syslog(3, "%lld %d AVE %s: FIG: you need to encode at least one picture to prime AVE before using this feature. -> will disregard updateDPB flag", v164, 22, v325);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: FIG: you need to encode at least one picture to prime AVE before using this feature. -> will disregard updateDPB flag", v162, 22, v163);
              }
            }
          }
        }
        int v165 = CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_ExtraInLoopChromaFilter);
        if (v165 && CFEqual(v165, kCFBooleanTrue)) {
          *((void *)a3 + 2) |= 0x8000uLL;
        }
        CFNumberRef v166 = (const __CFNumber *)CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_CalculateYUVChecksum);
        if (v166)
        {
          LODWORD(valuePtr) = 0;
          CFNumberGetValue(v166, kCFNumberSInt32Type, &valuePtr);
          if (valuePtr) {
            *((void *)a3 + 2) |= 0x10000uLL;
          }
        }
        int v167 = CFDictionaryGetValue(theDict, @"MarkCurrentFrameAsLTR");
        if (v167)
        {
          if (CFEqual(v167, kCFBooleanTrue))
          {
            *((unsigned char *)a3 + 212) = 1;
            if (sub_D1C38(0x1Du, 6))
            {
              int v168 = sub_D1C7C(0x1Du);
              __uint64_t v169 = sub_DDEFC();
              int v170 = (const char *)sub_D1CB0(6);
              if (v168)
              {
                printf("%lld %d AVE %s: FIG: received AVE_kVTEncoderFrameOptionKey_MarkCurrentFrameAsLTR = TRUE\n", v169, 29, v170);
                __uint64_t v171 = sub_DDEFC();
                int v326 = (const char *)sub_D1CB0(6);
                syslog(3, "%lld %d AVE %s: FIG: received AVE_kVTEncoderFrameOptionKey_MarkCurrentFrameAsLTR = TRUE", v171, 29, v326);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: FIG: received AVE_kVTEncoderFrameOptionKey_MarkCurrentFrameAsLTR = TRUE", v169, 29, v170);
              }
            }
          }
        }
        CFNumberRef v172 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"RVRADimension");
        if (v172)
        {
          LODWORD(valuePtr) = 0;
          CFNumberGetValue(v172, kCFNumberSInt32Type, &valuePtr);
          int v173 = (unsigned __int16)valuePtr;
          a3[56] = WORD1(valuePtr);
          a3[57] = v173;
          if (sub_D1C38(0x1Du, 6))
          {
            int v174 = sub_D1C7C(0x1Du);
            __uint64_t v175 = sub_DDEFC();
            int v176 = (const char *)sub_D1CB0(6);
            int v177 = a3[57];
            if (v174)
            {
              printf("%lld %d AVE %s: FIG: received AVE_kVTEncoderFrameOptionKey_RVRADimension = %d x %d\n", v175, 29, v176, a3[56], v177);
              __uint64_t v178 = sub_DDEFC();
              double v179 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: received AVE_kVTEncoderFrameOptionKey_RVRADimension = %d x %d", v178, 29, v179, a3[56], a3[57]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: received AVE_kVTEncoderFrameOptionKey_RVRADimension = %d x %d", v175, 29, v176, a3[56], v177);
            }
          }
        }
        CFNumberRef v180 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"FrameNumForLTRToReplace");
        if (v180)
        {
          LODWORD(valuePtr) = 0;
          CFNumberGetValue(v180, kCFNumberSInt32Type, &valuePtr);
          a3[54] = valuePtr;
          if (sub_D1C38(0x1Du, 6))
          {
            int v181 = sub_D1C7C(0x1Du);
            __uint64_t v182 = sub_DDEFC();
            int v183 = (const char *)sub_D1CB0(6);
            int v184 = a3[54];
            if (v181)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_FrameNumForLTRToReplace found (%d)\n", v182, 29, v183, v184);
              __uint64_t v185 = sub_DDEFC();
              int v327 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_FrameNumForLTRToReplace found (%d)", v185, 29, v327, a3[54]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_FrameNumForLTRToReplace found (%d)", v182, 29, v183, v184);
            }
          }
        }
        CFNumberRef v186 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"UserFrameType");
        if (v186)
        {
          LODWORD(valuePtr) = 0;
          CFNumberGetValue(v186, kCFNumberSInt32Type, &valuePtr);
          a3[51] = valuePtr;
          if (sub_D1C38(0x1Du, 6))
          {
            int v187 = sub_D1C7C(0x1Du);
            __uint64_t v188 = sub_DDEFC();
            int v189 = (const char *)sub_D1CB0(6);
            int v190 = a3[51];
            if (v187)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_UserFrameType found (%d)\n", v188, 29, v189, v190);
              __uint64_t v191 = sub_DDEFC();
              int v328 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_UserFrameType found (%d)", v191, 29, v328, a3[51]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_UserFrameType found (%d)", v188, 29, v189, v190);
            }
          }
        }
        CFArrayRef v192 = (const __CFArray *)CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_ReferenceL0);
        if (v192)
        {
          CFArrayRef v193 = v192;
          CFTypeID v194 = CFArrayGetTypeID();
          if (v194 == CFGetTypeID(v193))
          {
            LODWORD(valuePtr) = 4;
            sub_DBB60(v193, a3 + 58, (int *)&valuePtr);
            *((unsigned char *)a3 + 220) = valuePtr;
            if (sub_D1C38(0x1Du, 6))
            {
              int v195 = sub_D1C7C(0x1Du);
              __uint64_t v196 = sub_DDEFC();
              int v197 = (const char *)sub_D1CB0(6);
              int v198 = *((unsigned __int8 *)a3 + 220);
              if (v195)
              {
                printf("%lld %d AVE %s: FIG: received kVTEncoderFrameOptionKey_ReferenceL0, count = %d\n", v196, 29, v197, v198);
                __uint64_t v199 = sub_DDEFC();
                __int16 v329 = (const char *)sub_D1CB0(6);
                syslog(3, "%lld %d AVE %s: FIG: received kVTEncoderFrameOptionKey_ReferenceL0, count = %d", v199, 29, v329, *((unsigned __int8 *)a3 + 220));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: FIG: received kVTEncoderFrameOptionKey_ReferenceL0, count = %d", v196, 29, v197, v198);
              }
            }
            if (*((unsigned char *)a3 + 220))
            {
              unint64_t v200 = 0;
              int v201 = a3 + 58;
              do
              {
                if ((*v201 & 0x80000000) == 0 && sub_D1C38(0x1Eu, 6))
                {
                  int v202 = sub_D1C7C(0x1Eu);
                  __uint64_t v203 = sub_DDEFC();
                  int v204 = (const char *)sub_D1CB0(6);
                  int v205 = *v201;
                  if (v202)
                  {
                    printf("%lld %d AVE %s: AVE Fig: userRefInfo_[%d].userRefFrameNumDriver = %d\n", v203, 30, v204, v200, v205);
                    __uint64_t v206 = sub_DDEFC();
                    int v207 = (const char *)sub_D1CB0(6);
                    syslog(3, "%lld %d AVE %s: AVE Fig: userRefInfo_[%d].userRefFrameNumDriver = %d", v206, 30, v207, v200, *v201);
                  }
                  else
                  {
                    syslog(3, "%lld %d AVE %s: AVE Fig: userRefInfo_[%d].userRefFrameNumDriver = %d", v203, 30, v204, v200, v205);
                  }
                }
                ++v200;
                v201 += 2;
              }
              while (v200 < *((unsigned __int8 *)a3 + 220));
            }
            CFDictionaryRef v113 = theDict;
          }
        }
        CFNumberRef v208 = (const __CFNumber *)CFDictionaryGetValue(v113, @"SliceTcOffsetDiv2");
        if (v208)
        {
          int v209 = a3 + 175;
          CFNumberGetValue(v208, kCFNumberSInt32Type, a3 + 175);
          if (sub_D1C38(0x1Du, 6))
          {
            int v210 = sub_D1C7C(0x1Du);
            __uint64_t v211 = sub_DDEFC();
            int v212 = (const char *)sub_D1CB0(6);
            int v213 = *v209;
            if (v210)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_SliceTcOffsetDiv2 found (%d)\n", v211, 29, v212, v213);
              __uint64_t v214 = sub_DDEFC();
              int v330 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_SliceTcOffsetDiv2 found (%d)", v214, 29, v330, *v209);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_SliceTcOffsetDiv2 found (%d)", v211, 29, v212, v213);
            }
          }
        }
        CFNumberRef v215 = (const __CFNumber *)CFDictionaryGetValue(v113, @"SliceBetaOffsetDiv2");
        if (v215)
        {
          unsigned int v216 = a3 + 174;
          CFNumberGetValue(v215, kCFNumberSInt32Type, a3 + 174);
          if (sub_D1C38(0x1Du, 6))
          {
            int v217 = sub_D1C7C(0x1Du);
            __uint64_t v218 = sub_DDEFC();
            unsigned int v219 = (const char *)sub_D1CB0(6);
            int v220 = *v216;
            if (v217)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_SliceBetaOffsetDiv2 found (%d)\n", v218, 29, v219, v220);
              __uint64_t v221 = sub_DDEFC();
              __uint64_t v331 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_SliceBetaOffsetDiv2 found (%d)", v221, 29, v331, *v216);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_SliceBetaOffsetDiv2 found (%d)", v218, 29, v219, v220);
            }
          }
        }
        if (*(unsigned char *)(v10 + 731)
          && a3[51] == 1
          && !sub_DC624(v113, *((unsigned __int8 *)a3 + 220), a3 + 66))
        {
          __int16 v345 = 0;
          uint64_t valuePtr = 0;
          sub_DD92C((char *)&valuePtr, 10, "%d %d", v222, v223, v224, v225, v226, *(_DWORD *)(v341 + 135));
          sub_DCAF4(a3 + 66, 215, 6, (uint64_t)&valuePtr, 0, v227, v228, v229);
        }
        int v230 = CFDictionaryGetValue(v113, kVTEncodeFrameOptionKey_FinalFrame);
        if (v230)
        {
          if (CFEqual(v230, kCFBooleanTrue))
          {
            *((unsigned char *)a3 + 732) = 1;
            if (sub_D1C38(0x1Du, 6))
            {
              int v231 = sub_D1C7C(0x1Du);
              __uint64_t v232 = sub_DDEFC();
              float v233 = (const char *)sub_D1CB0(6);
              if (v231)
              {
                printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FinalFrame = TRUE\n", v232, 29, v233);
                __uint64_t v234 = sub_DDEFC();
                __uint64_t v332 = (const char *)sub_D1CB0(6);
                syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FinalFrame = TRUE", v234, 29, v332);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FinalFrame = TRUE", v232, 29, v233);
              }
            }
          }
        }
        int v235 = CFDictionaryGetValue(v113, @"ResetRCState");
        if (v235)
        {
          int v236 = CFEqual(v235, kCFBooleanTrue);
          *((unsigned char *)a3 + 8) = v236 != 0;
          if (v236)
          {
            int v237 = *(_DWORD *)(v340 + 196);
            if (v237 == 1)
            {
              sub_CAE78(*(_DWORD **)(v341 + 203));
              *a3 = 2;
              if (sub_D1C38(0x1Du, 6))
              {
                int v241 = sub_D1C7C(0x1Du);
                __uint64_t v242 = sub_DDEFC();
                int v243 = (const char *)sub_D1CB0(6);
                if (v241)
                {
                  printf("%lld %d AVE %s: FIG: received AVE_kVTEncodeFrameOptionKey_ResetRCState = %d, set forceKeyFrame to IDR\n", v242, 29, v243, *((unsigned __int8 *)a3 + 8));
                  sub_DDEFC();
                  sub_D1CB0(6);
                }
                syslog(3, "%lld %d AVE %s: FIG: received AVE_kVTEncodeFrameOptionKey_ResetRCState = %d, set forceKeyFrame to IDR");
              }
            }
            else if (v237 == 20)
            {
              *((unsigned char *)a3 + 8) = 0;
              if (sub_D1C38(0x1Du, 5))
              {
                int v238 = sub_D1C7C(0x1Du);
                __uint64_t v239 = sub_DDEFC();
                int v240 = (const char *)sub_D1CB0(5);
                if (v238)
                {
                  printf("%lld %d AVE %s: AVE FIG WARNING: Cannot reset rc state for Direct RC.\n", v239, 29, v240);
                  sub_DDEFC();
                  sub_D1CB0(5);
                }
                syslog(3, "%lld %d AVE %s: AVE FIG WARNING: Cannot reset rc state for Direct RC.");
              }
            }
            else
            {
              *((unsigned char *)a3 + 8) = 0;
              if (sub_D1C38(0x1Du, 5))
              {
                int v244 = sub_D1C7C(0x1Du);
                __uint64_t v245 = sub_DDEFC();
                int v246 = (const char *)sub_D1CB0(5);
                if (v244)
                {
                  printf("%lld %d AVE %s: AVE FIG WARNING: Cannot reset rc state if RC is NOT On.\n", v245, 29, v246);
                  sub_DDEFC();
                  sub_D1CB0(5);
                }
                syslog(3, "%lld %d AVE %s: AVE FIG WARNING: Cannot reset rc state if RC is NOT On.");
              }
            }
          }
        }
        unsigned int v247 = a3 + 52;
        CFDictionaryRef v248 = (const __CFDictionary *)CFDictionaryGetValue(v113, @"RPSInfo");
        if (v248)
        {
          CFDictionaryRef v249 = v248;
          if (sub_D1C38(0x1Du, 6))
          {
            int v250 = sub_D1C7C(0x1Du);
            __uint64_t v251 = sub_DDEFC();
            int v252 = (const char *)sub_D1CB0(6);
            if (v250)
            {
              printf("%lld %d AVE %s: FIG: AVE_kRPSInfo found \n", v251, 29, v252);
              __uint64_t v253 = sub_DDEFC();
              __uint64_t v333 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kRPSInfo found ", v253, 29, v333);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kRPSInfo found ", v251, 29, v252);
            }
          }
          unsigned int v254 = a3[51];
          if (v254 <= 7 && ((1 << v254) & 0x87) != 0) {
            sub_CDD20(v249, (uint64_t)(a3 + 184));
          }
        }
        __uint64_t v255 = (const void *)kVTEncodeFrameOptionKey_SliceQP;
        CFNumberRef v256 = (const __CFNumber *)CFDictionaryGetValue(v113, kVTEncodeFrameOptionKey_SliceQP);
        if (v256 && (v257 = v256, CFTypeID v258 = CFNumberGetTypeID(), v258 == CFGetTypeID(v257)))
        {
          CFNumberGetValue(v257, kCFNumberSInt32Type, v247);
          if (sub_D1C38(0x1Du, 6))
          {
            int v259 = sub_D1C7C(0x1Du);
            __uint64_t v260 = sub_DDEFC();
            int v261 = (const char *)sub_D1CB0(6);
            int v262 = *v247;
            if (v259)
            {
              printf("%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SliceQP found (%d)\n", v260, 29, v261, v262);
              __uint64_t v263 = sub_DDEFC();
              int v334 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SliceQP found (%d)", v263, 29, v334, *v247);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SliceQP found (%d)", v260, 29, v261, v262);
            }
          }
        }
        else
        {
          CFArrayRef v264 = (const __CFArray *)CFDictionaryGetValue(v113, v255);
          if (v264)
          {
            CFArrayRef v265 = v264;
            CFTypeID v266 = CFArrayGetTypeID();
            if (v266 == CFGetTypeID(v265))
            {
              CFIndex Count = CFArrayGetCount(v265);
              LODWORD(valuePtr) = 0;
              if (Count >= 1)
              {
                CFIndex v268 = Count;
                for (CFIndex i = 0; i < v268; CFIndex i = (i + 1))
                {
                  sub_C28C4(v265, i, &valuePtr);
                  if (!i) {
                    *unsigned int v247 = valuePtr;
                  }
                  if (sub_D1C38(0x1Du, 6))
                  {
                    int v270 = sub_D1C7C(0x1Du);
                    __uint64_t v271 = sub_DDEFC();
                    __uint64_t v272 = (const char *)sub_D1CB0(6);
                    if (v270)
                    {
                      printf("%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SliceQP[%d] found (%d)\n", v271, 29, v272, i, valuePtr);
                      __uint64_t v273 = sub_DDEFC();
                      int v274 = (const char *)sub_D1CB0(6);
                      syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SliceQP[%d] found (%d)", v273, 29, v274, i, valuePtr);
                    }
                    else
                    {
                      syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SliceQP[%d] found (%d)", v271, 29, v272, i, valuePtr);
                    }
                  }
                }
              }
              CFDictionaryRef v113 = theDict;
            }
          }
        }
        CFNumberRef v275 = (const __CFNumber *)CFDictionaryGetValue(v113, @"POCLsb");
        if (v275)
        {
          unsigned int v276 = a3 + 387;
          CFNumberGetValue(v275, kCFNumberSInt32Type, a3 + 387);
          if (sub_D1C38(0x1Du, 6))
          {
            int v277 = sub_D1C7C(0x1Du);
            __uint64_t v278 = sub_DDEFC();
            v279 = (const char *)sub_D1CB0(6);
            int v280 = *v276;
            if (v277)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_POCLsb found (%d)\n", v278, 29, v279, v280);
              __uint64_t v281 = sub_DDEFC();
              int v335 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_POCLsb found (%d)", v281, 29, v335, *v276);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_POCLsb found (%d)", v278, 29, v279, v280);
            }
          }
        }
        CFNumberRef v282 = (const __CFNumber *)CFDictionaryGetValue(v113, kVTEncodeFrameOptionKey_PicParameterSetId);
        if (v282)
        {
          int v283 = a3 + 176;
          CFNumberGetValue(v282, kCFNumberSInt32Type, a3 + 176);
          if (sub_D1C38(0x1Du, 6))
          {
            int v284 = sub_D1C7C(0x1Du);
            __uint64_t v285 = sub_DDEFC();
            uint64_t v286 = (const char *)sub_D1CB0(6);
            int v287 = *v283;
            if (v284)
            {
              printf("%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_PicParameterSetId found (%d)\n", v285, 29, v286, v287);
              __uint64_t v288 = sub_DDEFC();
              unsigned int v336 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_PicParameterSetId found (%d)", v288, 29, v336, *v283);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_PicParameterSetId found (%d)", v285, 29, v286, v287);
            }
          }
        }
        uint64_t v289 = CFDictionaryGetValue(v113, @"UserSaoMap");
        if (v289)
        {
          *((unsigned char *)a3 + 1529) = CFEqual(v289, kCFBooleanTrue) != 0;
          if (sub_D1C38(0x1Du, 6))
          {
            int v290 = sub_D1C7C(0x1Du);
            __uint64_t v291 = sub_DDEFC();
            uint64_t v292 = (const char *)sub_D1CB0(6);
            int v293 = *((unsigned __int8 *)a3 + 1529);
            if (v290)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncodeFrameOptionKey_UserSaoMap found (%d)\n", v291, 29, v292, v293);
              __uint64_t v294 = sub_DDEFC();
              int v337 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncodeFrameOptionKey_UserSaoMap found (%d)", v294, 29, v337, *((unsigned __int8 *)a3 + 1529));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncodeFrameOptionKey_UserSaoMap found (%d)", v291, 29, v292, v293);
            }
          }
        }
        CFNumberRef v295 = (const __CFNumber *)CFDictionaryGetValue(v113, @"NaluType");
        if (v295)
        {
          CFNumberGetValue(v295, kCFNumberSInt32Type, v342);
          if (sub_D1C38(0x1Du, 6))
          {
            int v296 = sub_D1C7C(0x1Du);
            __uint64_t v297 = sub_DDEFC();
            __uint64_t v298 = (const char *)sub_D1CB0(6);
            int v299 = *v342;
            if (v296)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_NaluType found (%d)\n", v297, 29, v298, v299);
              __uint64_t v300 = sub_DDEFC();
              __uint64_t v338 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_NaluType found (%d)", v300, 29, v338, *v342);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_NaluType found (%d)", v297, 29, v298, v299);
            }
          }
        }
        CFNumberRef v301 = (const __CFNumber *)CFDictionaryGetValue(v113, @"TemporalID");
        if (v301)
        {
          long long v302 = a3 + 390;
          CFNumberGetValue(v301, kCFNumberSInt32Type, a3 + 390);
          if (sub_D1C38(0x1Du, 6))
          {
            int v303 = sub_D1C7C(0x1Du);
            __uint64_t v304 = sub_DDEFC();
            long long v305 = (const char *)sub_D1CB0(6);
            int v306 = *v302;
            if (v303)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_TemporalID found (%d)\n", v304, 29, v305, v306);
              __uint64_t v307 = sub_DDEFC();
              __uint64_t v339 = (const char *)sub_D1CB0(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_TemporalID found (%d)", v307, 29, v339, *v302);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_TemporalID found (%d)", v304, 29, v305, v306);
            }
          }
        }
        long long v308 = CFDictionaryGetValue(v113, kVTEncodeFrameOptionKey_RequestNonReferenceFrame);
        if (v308)
        {
          if (CFEqual(v308, kCFBooleanTrue))
          {
            *((unsigned char *)a3 + 1576) = 1;
            if (sub_D1C38(0x1Du, 6))
            {
              int v309 = sub_D1C7C(0x1Du);
              __uint64_t v310 = sub_DDEFC();
              long long v311 = (const char *)sub_D1CB0(6);
              if (v309)
              {
                printf("%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_RequestNonReferenceFrame found (%d)\n", v310, 29, v311, *((unsigned __int8 *)a3 + 1576));
                sub_DDEFC();
                sub_D1CB0(6);
              }
              syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_RequestNonReferenceFrame found (%d)");
            }
          }
        }
        return;
      }
    }
    else
    {
      a3[12] = 16;
    }
    unint64_t v104 = 0;
    __uint64_t v105 = a3 + 13;
    do
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v96, v104);
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, v105);
      if (sub_D1C38(0x1Du, 6))
      {
        int v107 = sub_D1C7C(0x1Du);
        __uint64_t v108 = sub_DDEFC();
        int v109 = (const char *)sub_D1CB0(6);
        int v110 = *v105;
        if (v107)
        {
          printf("%lld %d AVE %s: FIG: index %d: token = %d\n", v108, 29, v109, v104, v110);
          __uint64_t v111 = sub_DDEFC();
          int v112 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: FIG: index %d: token = %d", v111, 29, v112, v104, *v105);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: index %d: token = %d", v108, 29, v109, v104, v110);
        }
      }
      ++v104;
      ++v105;
    }
    while (v104 < a3[12]);
    goto LABEL_113;
  }
}

void sub_98C7C(uint64_t a1, uint64_t a2, double a3)
{
  int v6 = sub_C7604();
  if (*(_DWORD *)(a1 + 292)) {
    return;
  }
  __uint64_t v7 = (int *)(a1 + 183444);
  if (*(int *)(a1 + 183564) >= 3)
  {
    int v8 = v6[351];
    if (*(_DWORD *)(a1 + 18804) == 2)
    {
      if (*(unsigned char *)(a1 + 18858)) {
        BOOL v9 = 0;
      }
      else {
        BOOL v9 = v8 <= 0;
      }
      if (!v9)
      {
LABEL_11:
        unsigned int v10 = *(_DWORD *)(a2 + 140);
        if (!*(_DWORD *)(a1 + 183680)) {
          *(_DWORD *)(a1 + 183680) = v10;
        }
        double v11 = sub_CC57C(*(void *)(a1 + 183640));
        double v12 = a3;
        if (*v7) {
          double v12 = (a3 + *(double *)(a1 + 183672) * 3.0) * 0.25;
        }
        *(double *)(a1 + 183672) = v12;
        if (v8 >= 1)
        {
          double v12 = (double)v8;
          *(double *)(a1 + 183672) = (double)v8;
          if (v8 <= 0x19) {
            *(unsigned char *)(a2 + 1535) = 1;
          }
        }
        unsigned int v13 = *(_DWORD *)(a1 + 1880);
        unsigned int v14 = *(_DWORD *)(a1 + 1884);
        int v15 = *(_DWORD *)(a1 + 228);
        double v16 = (double)v15;
        if (v15 >= 1) {
          double v17 = (double)v15;
        }
        else {
          double v17 = v11;
        }
        unsigned int v18 = v14 * v13;
        BOOL v19 = (v14 * v13) >> 12 > 0x7E8;
        BOOL v20 = v17 > 120.0 || (v14 * v13) >> 12 > 0x7E8;
        if (v17 <= 90.0) {
          BOOL v19 = 0;
        }
        float v21 = (float)v13;
        float v22 = (float)v14;
        if (v18 > 0x8CA00)
        {
          double v27 = (float)(v21 * v22);
          if (v18 > 0x15F900)
          {
            if (v18 > 0x473100)
            {
              double v23 = v27 / 8294400.0;
              if (v17 <= 27.0)
              {
                double v28 = 24.0;
                double v29 = 18000000.0;
                goto LABEL_53;
              }
              if (v17 <= 45.0)
              {
                double v28 = 30.0;
                double v29 = 22500000.0;
                goto LABEL_53;
              }
              BOOL v24 = v17 > 90.0;
              double v29 = dbl_142F30[v17 > 90.0];
              double v28 = 60.0;
              double v30 = 120.0;
LABEL_40:
              if (v24) {
                double v28 = v30;
              }
LABEL_53:
              unsigned int v31 = (v17 * v29 / v28);
              if (*(_DWORD *)(a1 + 18760) == 1)
              {
                BOOL v32 = *(_DWORD *)(a1 + 103136) == 2;
                double v33 = 1.1;
                if (*(_DWORD *)(a1 + 103136) != 2) {
                  double v33 = 1.0;
                }
              }
              else
              {
                BOOL v32 = 0;
                double v33 = 1.0;
              }
              double v34 = v23 * (double)v31 * v33;
              if (v20)
              {
                if (v19)
                {
                  if (v12 <= 8.0)
                  {
                    double v43 = 125.0;
                  }
                  else
                  {
                    if (v12 > 18.0)
                    {
                      if (v12 <= 22.0)
                      {
                        double v35 = v34 * 125.0;
LABEL_112:
                        double v57 = v35 / 100.0;
                        if (v57 <= (double)v10) {
                          double v57 = (double)v10;
                        }
                        unsigned int v39 = v57;
                        int v38 = 1;
                        goto LABEL_87;
                      }
                      goto LABEL_72;
                    }
                    double v43 = 150.0;
                  }
                  double v44 = v34 * v43;
                }
                else
                {
                  if (v12 > 18.0)
                  {
                    if (v12 <= 23.0)
                    {
                      double v56 = 125.0;
                      if (v32) {
                        double v56 = 150.0;
                      }
                      double v35 = v56 * v34;
                      goto LABEL_112;
                    }
LABEL_72:
                    int v38 = 0;
                    unsigned int v39 = v10;
LABEL_87:
                    if (v39 >= 2 * v10) {
                      unsigned int v39 = 2 * v10;
                    }
                    *(_DWORD *)(a2 + 140) = v39;
                    *(_DWORD *)(a2 + 144) = v38;
                    *(_DWORD *)(a1 + 183680) = v39;
                    if (sub_D1C38(0x30u, 6))
                    {
                      int v47 = sub_D1C7C(0x30u);
                      __uint64_t v48 = sub_DDEFC();
                      int v49 = (const char *)sub_D1CB0(6);
                      if (v47)
                      {
                        printf("%lld %d AVE %s: FIG: F %d SNR %f filteredSNR %f instantaneousFPS %lf targetBitrate %d NewtargetBitrate %d\n", v48, 48, v49, *v7, a3, *(double *)(a1 + 183672), v11, v10, *(_DWORD *)(a2 + 140));
                        sub_DDEFC();
                        sub_D1CB0(6);
                      }
                      syslog(3, "%lld %d AVE %s: FIG: F %d SNR %f filteredSNR %f instantaneousFPS %lf targetBitrate %d NewtargetBitrate %d");
                    }
                    goto LABEL_94;
                  }
                  double v45 = 175.0;
                  if (v32) {
                    double v45 = 200.0;
                  }
                  double v44 = v45 * v34;
                }
              }
              else
              {
                LODWORD(v16) = *(_DWORD *)(a1 + 18440);
                double v36 = (double)*(unint64_t *)&v16;
                if (v12 <= 20.0)
                {
                  BOOL v40 = !v32;
                  double v41 = 175.0;
                  double v42 = 200.0;
                }
                else
                {
                  if (v12 > 23.0)
                  {
                    if (v12 <= 25.0)
                    {
                      double v37 = 125.0;
                      if (v32) {
                        double v37 = 150.0;
                      }
                      double v35 = v37 * (v34 * v36);
                      goto LABEL_112;
                    }
                    goto LABEL_72;
                  }
                  BOOL v40 = !v32;
                  double v41 = 150.0;
                  double v42 = 175.0;
                }
                if (!v40) {
                  double v41 = v42;
                }
                double v44 = v41 * (v34 * v36);
              }
              double v46 = v44 / 100.0;
              if (v46 <= (double)v10) {
                double v46 = (double)v10;
              }
              unsigned int v39 = v46;
              int v38 = 2;
              goto LABEL_87;
            }
            double v23 = v27 / 2073600.0;
            if (v17 <= 45.0)
            {
              double v28 = 30.0;
              double v29 = 7700000.0;
              goto LABEL_53;
            }
            if (v17 <= 90.0)
            {
              double v28 = 60.0;
              double v29 = 11700000.0;
              goto LABEL_53;
            }
            BOOL v24 = v17 > 180.0;
            BOOL v25 = v17 > 180.0;
            double v26 = (double *)&unk_142F40;
          }
          else
          {
            double v23 = v27 / 921600.0;
            if (v17 <= 45.0)
            {
              double v28 = 30.0;
              double v29 = 4900000.0;
              goto LABEL_53;
            }
            if (v17 <= 90.0)
            {
              double v28 = 60.0;
              double v29 = 8600000.0;
              goto LABEL_53;
            }
            BOOL v24 = v17 > 180.0;
            BOOL v25 = v17 > 180.0;
            double v26 = (double *)&unk_142F50;
          }
        }
        else
        {
          double v23 = (float)(v21 * v22) / 307200.0;
          if (v17 <= 45.0)
          {
            double v28 = 30.0;
            double v29 = 2500000.0;
            goto LABEL_53;
          }
          if (v17 <= 90.0)
          {
            double v28 = 60.0;
            double v29 = 4400000.0;
            goto LABEL_53;
          }
          BOOL v24 = v17 > 180.0;
          BOOL v25 = v17 > 180.0;
          double v26 = (double *)&unk_142F60;
        }
        double v29 = v26[v25];
        double v28 = 120.0;
        double v30 = 240.0;
        goto LABEL_40;
      }
    }
    else if (v8 >= 1)
    {
      goto LABEL_11;
    }
  }
LABEL_94:
  if (sub_D1C38(0x30u, 6))
  {
    int v50 = sub_D1C7C(0x30u);
    __uint64_t v51 = sub_DDEFC();
    uint64_t v52 = (const char *)sub_D1CB0(6);
    int v53 = *v7;
    if (v50)
    {
      printf("%lld %d AVE %s: FIG: F %d lowLightSNRThreashold %f SNR %f\n", v51, 48, v52, v53, 25.0, a3);
      __uint64_t v54 = sub_DDEFC();
      unsigned int v55 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: FIG: F %d lowLightSNRThreashold %f SNR %f", v54, 48, v55, *v7, 25.0, a3);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: F %d lowLightSNRThreashold %f SNR %f", v51, 48, v52, v53, 25.0, a3);
    }
  }
  if (*(_DWORD *)(a1 + 264) && *(_DWORD *)(a1 + 18804) == 2 && *(unsigned char *)(a1 + 18851))
  {
    *(_DWORD *)(a2 + 704) = a3 <= 25.0;
    *(_DWORD *)(a2 + 1544) = *(_DWORD *)(a1 + 4 * (a3 <= 25.0) + 18808);
  }
  if ((*(_DWORD *)(a1 + 18804) == 2 && *(unsigned char *)(a1 + 18856) || *(unsigned char *)(a1 + 18857))
    && (a3 <= 25.0 || *(unsigned char *)(a1 + 18857)))
  {
    *(unsigned char *)(a2 + 1535) = 1;
  }
}

uint64_t sub_99388(uint64_t a1, void *a2)
{
  int v2 = (unsigned int *)(a1 + 183444);
  if (!*(_DWORD *)(a1 + 183444))
  {
    uint64_t v8 = a2[2];
    *(void *)(a1 + 183604) = *a2;
    *(void *)(a1 + 183612) = a2[1];
    *(void *)(a1 + 183620) = v8;
    if (sub_D1C38(0xD8u, 6))
    {
      int v9 = sub_D1C7C(0xD8u);
      __uint64_t v10 = sub_DDEFC();
      double v11 = (const char *)sub_D1CB0(6);
      unsigned int v12 = *v2;
      if (v9)
      {
        printf("%lld %d AVE %s: AVE_MultipassDataFetch : Frame %d\n", v10, 216, v11, v12);
        __uint64_t v13 = sub_DDEFC();
        double v35 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: AVE_MultipassDataFetch : Frame %d", v13, 216, v35, *v2);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AVE_MultipassDataFetch : Frame %d", v10, 216, v11, v12);
      }
    }
    if (sub_D1C38(0xD8u, 6))
    {
      int v19 = sub_D1C7C(0xD8u);
      __uint64_t v20 = sub_DDEFC();
      float v21 = (const char *)sub_D1CB0(6);
      if (v19)
      {
        printf("%lld %d AVE %s: PTS: val %lld, timeScale %d, flags 0x%x, epoch %lld\n", v20, 216, v21, *a2, *((_DWORD *)a2 + 2), *((_DWORD *)a2 + 3), a2[2]);
        __uint64_t v20 = sub_DDEFC();
        sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: PTS: val %lld, timeScale %d, flags 0x%x, epoch %lld", v20);
    }
    if (VTMultiPassStorageCopyDataAtTimeStamp())
    {
      if (!sub_D1C38(3u, 4)) {
        return 4294954394;
      }
      int v22 = sub_D1C7C(3u);
      __uint64_t v23 = sub_DDEFC();
      BOOL v24 = (const char *)sub_D1CB0(4);
      if (v22)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp failed. F %d PTS %lld ts %d\n", v23, 3, v24, "AVE_MultipassDataFetch", 11651, "err == noErr", *v2, *a2, *((_DWORD *)a2 + 2));
        __uint64_t v23 = sub_DDEFC();
        BOOL v24 = (const char *)sub_D1CB0(4);
        uint64_t v40 = *a2;
        uint64_t v41 = *((unsigned int *)a2 + 2);
        int v38 = "err == noErr";
        uint64_t v39 = *v2;
        uint64_t v37 = 11651;
      }
      else
      {
        uint64_t v40 = *a2;
        uint64_t v41 = *((unsigned int *)a2 + 2);
        uint64_t v39 = *v2;
        uint64_t v37 = 11651;
        int v38 = "err == noErr";
      }
      double v36 = v24;
      BOOL v25 = "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp failed. F %d PTS %lld ts %d";
    }
    else
    {
      if (!sub_D1C38(3u, 4)) {
        return 4294954394;
      }
      int v26 = sub_D1C7C(3u);
      __uint64_t v23 = sub_DDEFC();
      double v27 = (const char *)sub_D1CB0(4);
      if (v26)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp data == NULL. F %d PTS %lld ts %d\n", v23, 3, v27, "AVE_MultipassDataFetch", 11652, "data != __null", *v2, *a2, *((_DWORD *)a2 + 2));
        __uint64_t v23 = sub_DDEFC();
        double v27 = (const char *)sub_D1CB0(4);
        uint64_t v40 = *a2;
        uint64_t v41 = *((unsigned int *)a2 + 2);
        int v38 = "data != __null";
        uint64_t v39 = *v2;
        uint64_t v37 = 11652;
      }
      else
      {
        uint64_t v40 = *a2;
        uint64_t v41 = *((unsigned int *)a2 + 2);
        uint64_t v39 = *v2;
        uint64_t v37 = 11652;
        int v38 = "data != __null";
      }
      double v36 = v27;
      BOOL v25 = "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp data == NULL. F %d PTS %lld ts %d";
    }
    syslog(3, v25, v23, 3, v36, "AVE_MultipassDataFetch", v37, v38, v39, v40, v41);
    return 4294954394;
  }
  if (VTMultiPassStorageGetTimeStamp())
  {
    if (sub_D1C38(3u, 4))
    {
      int v3 = sub_D1C7C(3u);
      __uint64_t v4 = sub_DDEFC();
      __uint64_t v5 = (const char *)sub_D1CB0(4);
      if (!v3)
      {
LABEL_20:
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStamp failed.");
        return 4294954394;
      }
      int v6 = 11706;
LABEL_6:
      printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStamp failed.\n", v4, 3, v5, "AVE_MultipassDataFetch", v6, "err == noErr");
      sub_DDEFC();
      sub_D1CB0(4);
      goto LABEL_20;
    }
    return 4294954394;
  }
  if ((v2[43] & 0x1D) == 1)
  {
    if (VTMultiPassStorageCopyDataAtTimeStamp())
    {
      if (!sub_D1C38(3u, 4)) {
        return 4294954394;
      }
      int v14 = sub_D1C7C(3u);
      __uint64_t v15 = sub_DDEFC();
      double v16 = (const char *)sub_D1CB0(4);
      if (v14)
      {
        int v17 = 11711;
LABEL_15:
        printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp failed.\n", v15, 3, v16, "AVE_MultipassDataFetch", v17, "err == noErr");
        sub_DDEFC();
        sub_D1CB0(4);
        goto LABEL_45;
      }
      goto LABEL_45;
    }
    if (!sub_D1C38(3u, 4)) {
      return 4294954394;
    }
    int v29 = sub_D1C7C(3u);
    __uint64_t v30 = sub_DDEFC();
    unsigned int v31 = (const char *)sub_D1CB0(4);
    if (v29)
    {
      int v32 = 11712;
LABEL_50:
      printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp d == NULL.\n", v30, 3, v31, "AVE_MultipassDataFetch", v32, "d != __null");
      sub_DDEFC();
      sub_D1CB0(4);
      goto LABEL_54;
    }
    goto LABEL_54;
  }
  if (!VTMultiPassStorageGetTimeStamp())
  {
    if ((v2[43] & 0x1D) != 1) {
      return 0;
    }
    if (VTMultiPassStorageCopyDataAtTimeStamp())
    {
      if (!sub_D1C38(3u, 4)) {
        return 4294954394;
      }
      int v28 = sub_D1C7C(3u);
      __uint64_t v15 = sub_DDEFC();
      double v16 = (const char *)sub_D1CB0(4);
      if (v28)
      {
        int v17 = 11736;
        goto LABEL_15;
      }
LABEL_45:
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp failed.");
      return 4294954394;
    }
    if (!sub_D1C38(3u, 4)) {
      return 4294954394;
    }
    int v34 = sub_D1C7C(3u);
    __uint64_t v30 = sub_DDEFC();
    unsigned int v31 = (const char *)sub_D1CB0(4);
    if (v34)
    {
      int v32 = 11737;
      goto LABEL_50;
    }
LABEL_54:
    syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp d == NULL.");
    return 4294954394;
  }
  if (sub_D1C38(3u, 4))
  {
    int v18 = sub_D1C7C(3u);
    __uint64_t v4 = sub_DDEFC();
    __uint64_t v5 = (const char *)sub_D1CB0(4);
    if (!v18) {
      goto LABEL_20;
    }
    int v6 = 11731;
    goto LABEL_6;
  }
  return 4294954394;
}

void sub_9A278(uint64_t a1)
{
  int v2 = (int *)(a1 + 183432);
  uint64_t v3 = a1 + 18484;
  unsigned int v4 = *((_DWORD *)sub_C7604() + 312);
  if (v4 <= 3)
  {
    *int v2 = v4;
    if (v4 != 3) {
      *(unsigned char *)(v3 + 363) = 0;
    }
  }
  __uint64_t v5 = sub_C7604();
  if ((v5[24] & 8) != 0) {
    *(unsigned char *)(v3 + 363) = 1;
  }
  if ((v5[32] & 8) != 0) {
    *(unsigned char *)(v3 + 363) = 0;
  }
  int v6 = (unsigned char *)(a1 + 118414);
  if (*(unsigned char *)(a1 + 216))
  {
    int v7 = *v2;
    if (*v2 < 0)
    {
      if (*(unsigned char *)(v3 + 363)) {
        int v7 = 3;
      }
      else {
        int v7 = 1;
      }
    }
    *(_DWORD *)(a1 + 1944) = v7;
    if (*(_DWORD *)(a1 + 196) != 20) {
      *(unsigned char *)(v3 + 200) = 1;
    }
    if (sub_D1C38(0x1Eu, 6))
    {
      int v8 = sub_D1C7C(0x1Eu);
      __uint64_t v9 = sub_DDEFC();
      __uint64_t v10 = (const char *)sub_D1CB0(6);
      if (v8)
      {
        printf("%lld %d AVE %s: FIG: FIGAllowFrameReordering ON -> B will be = %d (FIGNumberOfBFrames %d)\n", v9, 30, v10, *(_DWORD *)(a1 + 1944), *v2);
        sub_DDEFC();
        sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: FIGAllowFrameReordering ON -> B will be = %d (FIGNumberOfBFrames %d)");
    }
  }
  else
  {
    *(_DWORD *)(a1 + 1944) = 0;
    *(_DWORD *)(a1 + 2024) &= ~4u;
    if (sub_D1C38(0x1Eu, 6))
    {
      int v11 = sub_D1C7C(0x1Eu);
      __uint64_t v12 = sub_DDEFC();
      __uint64_t v13 = (const char *)sub_D1CB0(6);
      if (v11)
      {
        printf("%lld %d AVE %s: FIG: FIGAllowFrameReordering OFF\n", v12, 30, v13);
        sub_DDEFC();
        sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: FIGAllowFrameReordering OFF");
    }
  }
  *(_DWORD *)(a1 + 118408) = *(_DWORD *)(a1 + 1824) - 26;
  if (*(unsigned char *)(a1 + 1924))
  {
    *int v6 = 1;
    *(unsigned char *)(a1 + 18013) = 0;
  }
  if (*(_DWORD *)(a1 + 196) == 3)
  {
    *(unsigned char *)(v3 + 200) = 1;
    *(_DWORD *)(a1 + 1920) = 0;
    *(unsigned char *)(v3 + 268) = 0;
    if (!*(unsigned char *)(v3 + 365))
    {
      *(unsigned char *)(a1 + 244) = 0;
      *int v6 = 0;
      *(unsigned char *)(a1 + 252) = 0;
      *(unsigned char *)(a1 + 246) = 0;
    }
    *(_WORD *)(a1 + 255) = 0;
    *(unsigned char *)(a1 + 257) = 0;
    *(_DWORD *)(a1 + 260) = 0;
    *(_DWORD *)(a1 + 1768) = 0;
  }
  if (*(unsigned char *)(a1 + 118487))
  {
    *(_DWORD *)(a1 + 196) = 3;
    *(unsigned char *)(v3 + 200) = 1;
    *(_DWORD *)(a1 + 1920) = 0;
    *(unsigned char *)(v3 + 268) = 0;
    *(unsigned char *)(a1 + 244) = 0;
    *(unsigned char *)(a1 + 252) = 0;
    *(unsigned char *)(a1 + 246) = 0;
    *(_DWORD *)(a1 + 2024) &= ~4u;
    *int v6 = 0;
    *(void *)(a1 + 1816) = 0;
    int v14 = -6 * *(_DWORD *)(a1 + 103136);
    *(_DWORD *)(a1 + 1852) = v14;
    *(_DWORD *)(a1 + 1848) = v14;
    *(_DWORD *)(a1 + 1832) = v14;
    *(_DWORD *)(a1 + 1828) = v14;
    *(_DWORD *)(a1 + 1824) = v14;
    *(void *)(a1 + 1840) = *(void *)(a1 + 1848);
    *(_WORD *)(a1 + 255) = 0;
    *(_DWORD *)(a1 + 1768) = 0;
    *(_DWORD *)uint64_t v3 = 0;
  }
}

uint64_t sub_9A54C(_DWORD *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  int v5 = a3;
  CFDictionaryRef v113 = a1 + 4718;
  int v8 = a1 + 4470;
  unint64_t v9 = HIDWORD(a3);
  if (sub_D1C38(0x14u, 7))
  {
    int v10 = sub_D1C7C(0x14u);
    __uint64_t v11 = sub_DDEFC();
    __uint64_t v12 = (const char *)sub_D1CB0(7);
    int v13 = v113[1];
    int v14 = v113[2];
    if (v10)
    {
      printf("%lld %d AVE %s: FIG: Pixelbuffer width %d height %d\n", v11, 20, v12, v13, v14);
      __uint64_t v15 = sub_DDEFC();
      double v16 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: Pixelbuffer width %d height %d", v15, 20, v16, v113[1], v113[2]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: Pixelbuffer width %d height %d", v11, 20, v12, v13, v14);
    }
  }
  if (!*((unsigned char *)v8 + 980))
  {
    if (((v5 + 63) & 0xFFFFFFC0) != v5)
    {
      if (sub_D1C38(3u, 4))
      {
        int v27 = sub_D1C7C(3u);
        __uint64_t v28 = sub_DDEFC();
        int v29 = (const char *)sub_D1CB0(4);
        if (v27)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERR: x = %d not aligned\n", v28, 3, v29, "AVE_GetTileInfo", 15864, "tileOffset.x == (((tileOffset.x) + (64) - 1) & ~((64) - 1))", v5);
          __uint64_t v28 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERR: x = %d not aligned", v28);
      }
      return 4294954394;
    }
    if (((v9 + 15) & 0xFFFFFFF0) != v9)
    {
      if (sub_D1C38(3u, 4))
      {
        int v24 = sub_D1C7C(3u);
        __uint64_t v25 = sub_DDEFC();
        int v26 = (const char *)sub_D1CB0(4);
        if (v24)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERR: y = %d not aligned\n", v25, 3, v26, "AVE_GetTileInfo", 15867, "tileOffset.y == (((tileOffset.y) + (16) - 1) & ~((16) - 1))", v9);
          __uint64_t v25 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERR: y = %d not aligned", v25);
      }
      return 4294954394;
    }
  }
  int v110 = v8;
  unint64_t v17 = HIDWORD(a4);
  int v109 = a1 + 45891;
  int v18 = a4 + 15;
  unsigned int v19 = a4;
  *(_DWORD *)(a2 + 716) = v5;
  uint64_t v111 = a2;
  *(_DWORD *)(a2 + 720) = v9;
  int v112 = v5;
  LODWORD(a4) = v9;
  int v108 = v17;
  if (sub_D1C38(0x14u, 7))
  {
    int v20 = v19;
    int v21 = sub_D1C7C(0x14u);
    __uint64_t v22 = sub_DDEFC();
    __uint64_t v23 = (const char *)sub_D1CB0(7);
    if (v21)
    {
      unsigned int v19 = v20;
      printf("%lld %d AVE %s: FIG: Tile Offset (%d, %d), Tile Aperture (%d, %d)\n", v22, 20, v23, v5, a4, v20, v17);
      __uint64_t v22 = sub_DDEFC();
      sub_D1CB0(7);
    }
    else
    {
      unsigned int v19 = v20;
    }
    syslog(3, "%lld %d AVE %s: FIG: Tile Offset (%d, %d), Tile Aperture (%d, %d)", v22);
  }
  int v106 = v19;
  int v107 = a4;
  unsigned int v30 = v19 + v5;
  unsigned int v31 = v17 + a4;
  unsigned int v32 = v18 & 0xFFFFFFF0;
  unsigned int v33 = (HIDWORD(a4) + 15) & 0xFFFFFFF0;
  if (*v109 < 11)
  {
    int v34 = v8;
    double v35 = (_DWORD *)v111;
    *(void *)(v111 + 724) = *(void *)(v113 + 1);
  }
  else
  {
    int v34 = v8;
    double v35 = (_DWORD *)v111;
    if (*((unsigned char *)v110 + 980))
    {
      if (v30 >= v113[1]) {
        unsigned int v36 = v113[1];
      }
      else {
        unsigned int v36 = v30;
      }
      if (a1[470] == v32) {
        unsigned int v37 = v113[1];
      }
      else {
        unsigned int v37 = v36;
      }
      *(_DWORD *)(v111 + 724) = v37;
      if (v31 >= v113[2]) {
        unsigned int v38 = v113[2];
      }
      else {
        unsigned int v38 = v31;
      }
      if (a1[471] == v33) {
        unsigned int v39 = v113[2];
      }
      else {
        unsigned int v39 = v38;
      }
      *(_DWORD *)(v111 + 728) = v39;
      unsigned int v30 = v113[1];
      unsigned int v31 = v113[2];
    }
    else
    {
      unsigned int v40 = v113[1];
      unsigned int v41 = v113[2];
      if (v30 <= v40) {
        unsigned int v42 = v19;
      }
      else {
        unsigned int v42 = v40 - v112;
      }
      *(_DWORD *)(v111 + 724) = v42;
      unsigned int v30 = v42 + v112;
      int v43 = v41 - v107;
      if (v31 <= v41) {
        int v43 = v108;
      }
      *(_DWORD *)(v111 + 728) = v43;
      unsigned int v31 = v43 + v107;
    }
  }
  if (sub_D1C38(0x14u, 7))
  {
    int v44 = sub_D1C7C(0x14u);
    __uint64_t v45 = sub_DDEFC();
    double v46 = (const char *)sub_D1CB0(7);
    uint64_t v47 = a1[470];
    if (v44)
    {
      printf("%lld %d AVE %s: FIG: Tile: %d %d | %u %u | %d %d | %d %d | %d %d\n\n", v45, 20, v46, v47, a1[471], v113[1], v113[2], v32, v33, v35[181], v35[182], v30, v31);
      __uint64_t v48 = sub_DDEFC();
      int v49 = sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: Tile: %d %d | %u %u | %d %d | %d %d | %d %d\n", v48, 20, v49, a1[470]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: Tile: %d %d | %u %u | %d %d | %d %d | %d %d\n", v45, 20, v46, v47);
    }
  }
  if (!*((unsigned char *)v34 + 132))
  {
    if (*(unsigned char *)v34)
    {
      char v62 = v34[10] == 10;
      if (v30 << v62 > *v113)
      {
        if (!sub_D1C38(3u, 4)) {
          return 4294954394;
        }
        int v63 = sub_D1C7C(3u);
        __uint64_t v64 = sub_DDEFC();
        int v65 = (const char *)sub_D1CB0(4);
        if (v63)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERR: x(%d) + width(%d) > buffer stride(%u)\n", v64, 3, v65, "AVE_GetTileInfo", 15990, "stride <= encoderPrivateStorage->VideoParamsDriver.pixelBuffer.Stride", v112, v106, *v113);
LABEL_65:
          __uint64_t v72 = sub_DDEFC();
          sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERR: x(%d) + width(%d) > buffer stride(%u)", v72, 3);
          return 4294954394;
        }
        goto LABEL_97;
      }
      if (v31 > v113[2])
      {
        if (sub_D1C38(3u, 4))
        {
          int v73 = sub_D1C7C(3u);
          __uint64_t v74 = sub_DDEFC();
          int v75 = (const char *)sub_D1CB0(4);
          if (v73)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERR: y(%d) + height(%d) > buffer height (%u)\n", v74, 3, v75, "AVE_GetTileInfo", 15995, "height <= encoderPrivateStorage->VideoParamsDriver.pixelBuffer.Height", v107, v108, v113[2]);
            __uint64_t v74 = sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERR: y(%d) + height(%d) > buffer height (%u)", v74, 3);
        }
        return 4294954394;
      }
      uint64_t result = 0;
      int v80 = v112 << v62;
    }
    else
    {
      if (((2 * ((2863311531u * (unint64_t)(v30 + 2)) >> 32)) & 0xFFFFFFFC) > *v113)
      {
        if (!sub_D1C38(3u, 4)) {
          return 4294954394;
        }
        int v70 = sub_D1C7C(3u);
        __uint64_t v64 = sub_DDEFC();
        __uint64_t v71 = (const char *)sub_D1CB0(4);
        if (v70)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERR: x(%d) + width(%d) > buffer stride(%u)\n", v64, 3, v71, "AVE_GetTileInfo", 15970, "stride <= encoderPrivateStorage->VideoParamsDriver.pixelBuffer.Stride", v112, v106, *v113);
          goto LABEL_65;
        }
LABEL_97:
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERR: x(%d) + width(%d) > buffer stride(%u)", v64, 3);
        return 4294954394;
      }
      if (v31 > v113[2])
      {
        if (sub_D1C38(3u, 4))
        {
          int v76 = sub_D1C7C(3u);
          __uint64_t v77 = sub_DDEFC();
          CFNumberRef v78 = (const char *)sub_D1CB0(4);
          if (v76)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERR: y(%d) + height(%d) > buffer height(%u)\n", v77, 3, v78, "AVE_GetTileInfo", 15975, "height <= encoderPrivateStorage->VideoParamsDriver.pixelBuffer.Height", v107, v108, v113[2]);
            __uint64_t v77 = sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERR: y(%d) + height(%d) > buffer height(%u)", v77, 3);
        }
        return 4294954394;
      }
      uint64_t result = 0;
      int v80 = (v112 / 48) << 6;
    }
    v35[177] = v80;
    v35[178] = v107;
    return result;
  }
  if (*v109 < 11)
  {
LABEL_93:
    uint64_t result = 0;
    *(void *)(v35 + 177) = 0;
    return result;
  }
  v50.i32[0] = v113[1];
  v51.i32[0] = v113[2];
  v50.i32[1] = v35[181];
  uint32x2_t v52 = (uint32x2_t)vadd_s32(v50, (int32x2_t)0x1F0000001FLL);
  v51.i32[1] = v35[182];
  uint32x2_t v53 = (uint32x2_t)vadd_s32(v51, (int32x2_t)0x1F0000001FLL);
  int8x8_t v54 = vand_s8((int8x8_t)vmin_u32((uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v53, 5uLL))), (uint32x2_t)vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v52, 5uLL))), (int8x8_t)vcgt_u32((uint32x2_t)0x4000000040, v52))), (int8x8_t)vcgt_u32(v53, (uint32x2_t)0x3F0000003FLL));
  uint64_t v55 = v54.u32[1];
  uint64_t v56 = v54.u32[0];
  if (v54.i32[0] == v54.i32[1])
  {
    double v57 = a1 + 25773;
    if (sub_D1C38(0x14u, 7))
    {
      int v58 = sub_D1C7C(0x14u);
      __uint64_t v59 = sub_DDEFC();
      int v60 = (const char *)sub_D1CB0(7);
      if (v58)
      {
        printf("%lld %d AVE %s: uiPixelBufferTwiddleBitsLuma %d uiEncodedRegionTwiddleBitsLuma %d\n", v59, 20, v60, v56, v56);
        __uint64_t v61 = sub_DDEFC();
        __uint64_t v95 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: uiPixelBufferTwiddleBitsLuma %d uiEncodedRegionTwiddleBitsLuma %d", v61, 20, v95, v56, v56);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: uiPixelBufferTwiddleBitsLuma %d uiEncodedRegionTwiddleBitsLuma %d", v59, 20, v60, v56, v56);
      }
    }
    v81.i32[0] = v113[1];
    v82.i32[0] = v113[2];
    v81.i32[1] = v35[181];
    uint32x2_t v83 = (uint32x2_t)vadd_s32((int32x2_t)vshl_u32(v81, (uint32x2_t)vneg_s32(vdup_n_s32((*v57 - 1) < 2))), (int32x2_t)0xF0000000FLL);
    v82.i32[1] = v35[182];
    uint32x2_t v84 = (uint32x2_t)vadd_s32((int32x2_t)vshl_u32(v82, (uint32x2_t)vneg_s32(vdup_n_s32(*v57 == 1))), (int32x2_t)0xF0000000FLL);
    int8x8_t v85 = vand_s8((int8x8_t)vmin_u32((uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v84, 4uLL))), (uint32x2_t)vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v83, 4uLL))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v83))), (int8x8_t)vcgt_u32(v84, (uint32x2_t)0x1F0000001FLL));
    uint64_t v86 = v85.u32[1];
    uint64_t v87 = v85.u32[0];
    if (v85.i32[0] == v85.i32[1])
    {
      if (sub_D1C38(0x14u, 7))
      {
        int v88 = sub_D1C7C(0x14u);
        __uint64_t v89 = sub_DDEFC();
        int v90 = (const char *)sub_D1CB0(7);
        if (v88)
        {
          printf("%lld %d AVE %s: uiPixelBufferTwiddleBitsChroma %d uiEncodedRegionTwiddleBitsChroma %d\n", v89, 20, v90, v87, v87);
          __uint64_t v91 = sub_DDEFC();
          unsigned int v96 = (const char *)sub_D1CB0(7);
          syslog(3, "%lld %d AVE %s: uiPixelBufferTwiddleBitsChroma %d uiEncodedRegionTwiddleBitsChroma %d", v91, 20, v96, v87, v87);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: uiPixelBufferTwiddleBitsChroma %d uiEncodedRegionTwiddleBitsChroma %d", v89, 20, v90, v87, v87);
        }
      }
      goto LABEL_93;
    }
    if (sub_D1C38(3u, 4))
    {
      int v92 = sub_D1C7C(3u);
      __uint64_t v67 = sub_DDEFC();
      CFNumberRef v68 = (const char *)sub_D1CB0(4);
      if (v92)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERR: Encoded region of compressed buffer is not within correct size. (%d ,%d)%d | (%d, %d)%d \n", v67, 3, v68, "AVE_GetTileInfo", 15955, "uiPixelBufferTwiddleBitsChroma == uiEncodedRegionTwiddleBitsChroma", v113[1], v113[2], v87, v35[181], v35[182], v86);
        __uint64_t v67 = sub_DDEFC();
        CFNumberRef v69 = (const char *)sub_D1CB0(4);
        uint64_t v104 = v35[182];
        uint64_t v105 = v86;
        uint64_t v102 = v87;
        uint64_t v103 = v35[181];
        uint64_t v100 = v113[1];
        uint64_t v101 = v113[2];
        uint64_t v98 = 15955;
        __uint64_t v99 = "uiPixelBufferTwiddleBitsChroma == uiEncodedRegionTwiddleBitsChroma";
        goto LABEL_86;
      }
      uint64_t v104 = v35[182];
      uint64_t v105 = v86;
      uint64_t v102 = v87;
      uint64_t v103 = v35[181];
      uint64_t v100 = v113[1];
      uint64_t v101 = v113[2];
      int v93 = "uiPixelBufferTwiddleBitsChroma == uiEncodedRegionTwiddleBitsChroma";
      uint64_t v94 = 15955;
      goto LABEL_95;
    }
  }
  else if (sub_D1C38(3u, 4))
  {
    int v66 = sub_D1C7C(3u);
    __uint64_t v67 = sub_DDEFC();
    CFNumberRef v68 = (const char *)sub_D1CB0(4);
    if (v66)
    {
      printf("%lld %d AVE %s: %s:%d %s | AVE ERR: Encoded region of compressed buffer is not within correct size. (%d ,%d)%d | (%d, %d)%d \n", v67, 3, v68, "AVE_GetTileInfo", 15941, "uiPixelBufferTwiddleBitsLuma == uiEncodedRegionTwiddleBitsLuma", v113[1], v113[2], v56, v35[181], v35[182], v55);
      __uint64_t v67 = sub_DDEFC();
      CFNumberRef v69 = (const char *)sub_D1CB0(4);
      uint64_t v104 = v35[182];
      uint64_t v105 = v55;
      uint64_t v102 = v56;
      uint64_t v103 = v35[181];
      uint64_t v100 = v113[1];
      uint64_t v101 = v113[2];
      uint64_t v98 = 15941;
      __uint64_t v99 = "uiPixelBufferTwiddleBitsLuma == uiEncodedRegionTwiddleBitsLuma";
LABEL_86:
      CFTypeID v97 = v69;
LABEL_96:
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERR: Encoded region of compressed buffer is not within correct size. (%d ,%d)%d | (%d, %d)%d ", v67, 3, v97, "AVE_GetTileInfo", v98, v99, v100, v101, v102, v103, v104, v105);
      return 4294954394;
    }
    uint64_t v104 = v35[182];
    uint64_t v105 = v55;
    uint64_t v102 = v56;
    uint64_t v103 = v35[181];
    uint64_t v100 = v113[1];
    uint64_t v101 = v113[2];
    int v93 = "uiPixelBufferTwiddleBitsLuma == uiEncodedRegionTwiddleBitsLuma";
    uint64_t v94 = 15941;
LABEL_95:
    uint64_t v98 = v94;
    __uint64_t v99 = v93;
    CFTypeID v97 = v68;
    goto LABEL_96;
  }
  return 4294954394;
}

void sub_9B2DC()
{
  qword_1600C8 = (uint64_t)kVTProfileLevel_HEVC_Main_AutoLevel;
  dword_1600D0 = 1;
  qword_1600D8 = (uint64_t)kVTProfileLevel_HEVC_Main10_AutoLevel;
  dword_1600E0 = 2;
  qword_1600E8 = kVTProfileLevel_HEVC_Main444_AutoLevel;
  dword_1600F0 = 1308;
  qword_1600F8 = kVTProfileLevel_HEVC_Main44410_AutoLevel;
  dword_160100 = 1310;
  qword_160108 = (uint64_t)kVTProfileLevel_HEVC_Main42210_AutoLevel;
  dword_160110 = 1210;
  qword_160118 = kVTProfileLevel_HEVC_Monochrome_AutoLevel;
  dword_160120 = 1008;
  qword_160128 = kVTProfileLevel_HEVC_Monochrome10_AutoLevel;
  dword_160130 = 1010;
  qword_160138 = kVTProfileLevel_HEVC_MainStill_AutoLevel;
  dword_160140 = 3;
}

void H9EncoderRegister()
{
  int v0 = sub_CEC3C();
  if (!v0)
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      CFDictionaryRef v2 = Mutable;
      CFDictionaryAddValue(Mutable, kVTVideoEncoder_IsHardwareAccelerated, kCFBooleanTrue);
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v2);
      if (MutableCopy)
      {
        unsigned int v4 = MutableCopy;
        CFDictionaryAddValue(v2, @"CMClassImplementationID", @"com.apple.videotoolbox.videoencoder.hevc");
        int v0 = VTRegisterVideoEncoderWithInfo();
        if (!v0)
        {
          CFDictionaryAddValue(v4, @"CMClassImplementationID", @"com.apple.videotoolbox.videoencoder.ohvc");
          CFDictionaryAddValue(v4, kVTVideoEncoder_Hide, kCFBooleanTrue);
          int v0 = VTRegisterVideoEncoderWithInfo();
        }
        CFRelease(v2);
      }
      else
      {
        int v0 = 0;
        unsigned int v4 = v2;
      }
      CFRelease(v4);
    }
    else
    {
      int v0 = 0;
    }
  }
  if (sub_D1C38(2u, 5))
  {
    int v5 = sub_D1C7C(2u);
    __uint64_t v6 = sub_DDEFC();
    int v7 = (const char *)sub_D1CB0(5);
    if (v5)
    {
      printf("%lld %d AVE %s: Register HEVC video encoder of AVE %d\n", v6, 2, v7, v0);
      __uint64_t v8 = sub_DDEFC();
      unint64_t v9 = (const char *)sub_D1CB0(5);
      syslog(3, "%lld %d AVE %s: Register HEVC video encoder of AVE %d", v8, 2, v9, v0);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Register HEVC video encoder of AVE %d", v6, 2, v7, v0);
    }
  }
}

uint64_t sub_9B578(uint64_t a1)
{
  double v1 = 33.0;
  if (*(int *)(a1 + 69900) > 59) {
    double v1 = 15.0;
  }
  double v13 = v1;
  mach_timebase_info(&info);
  LODWORD(v3) = info.numer;
  LODWORD(v2) = info.denom;
  double v4 = (double)v2 / (double)v3 * 1000000.0;
  __asm { FMOV            V1.2D, #3.0 }
  _Q1.f64[0] = v13;
  *(int32x2_t *)policy_mach_timebase_info info = vmovn_s64((int64x2_t)vcvtq_u64_f64(vmulq_n_f64(_Q1, v4)));
  integer_t v16 = policy_info[0];
  int v17 = 1;
  int v10 = pthread_self();
  thread_act_t v11 = pthread_mach_thread_np(v10);
  return thread_policy_set(v11, 2u, policy_info, 4u);
}

uint64_t sub_9B61C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 245280;
  uint64_t v5 = a1 + 239336;
  uint64_t v6 = a1 + 51224;
  sub_AEF70(a1 + 8);
  *(_OWORD *)(v6 + 96) = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 112) = *(_OWORD *)(a2 + 16);
  *(void *)(v6 + 128) = *(void *)(a2 + 32);
  *(void *)(v6 + 80) = *(void *)(a2 + 72);
  *(unsigned char *)(v5 + 9) = *(unsigned char *)(a2 + 208);
  *(_DWORD *)(v5 + 16) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(v5 + 12) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(v5 + 20) = *(_DWORD *)(a2 + 220);
  *(void *)uint64_t v5 = *(void *)(a2 + 224);
  *(unsigned char *)uint64_t v4 = *(unsigned char *)(a2 + 232);
  long long v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 51272) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 51288) = v7;
  __uint64_t v8 = *(void **)(a2 + 80);
  if (v8) {
    *(void *)(v6 + 144) = *v8;
  }
  unint64_t v9 = *(const void **)(a2 + 88);
  if (v9) {
    memcpy((void *)(a1 + 51376), v9, 0x4178uLL);
  }
  int v10 = *(const void **)(a2 + 96);
  if (v10) {
    memcpy((void *)(a1 + 68136), v10, 0x6C0uLL);
  }
  thread_act_t v11 = *(const void **)(a2 + 104);
  if (v11) {
    memcpy((void *)(a1 + 69864), v11, 0x690uLL);
  }
  *(_OWORD *)(v6 + 20320) = *(_OWORD *)(a2 + 112);
  int v12 = *(_DWORD *)(*(void *)(a2 + 96) + 120);
  if (v12 == 1)
  {
    uint64_t v31 = v5;
    uint64_t v32 = v4;
    int v18 = *(const void **)(a2 + 152);
    if (v18) {
      memcpy((void *)(a1 + 76272), v18, 0x140E8uLL);
    }
    uint64_t v19 = 0;
    char v20 = 1;
    do
    {
      char v21 = v20;
      uint64_t v22 = a2 + 8 * v19;
      __uint64_t v23 = *(const void **)(v22 + 160);
      if (v23) {
        memcpy((void *)(a1 + 7924 * v19 + 158424), v23, 0x1EF4uLL);
      }
      int v24 = *(const void **)(v22 + 176);
      if (v24) {
        memcpy((void *)(a1 + 9636 * v19 + 174272), v24, 0x25A4uLL);
      }
      char v20 = 0;
      uint64_t v19 = 1;
    }
    while ((v21 & 1) != 0);
    __uint64_t v25 = *(const void **)(a2 + 192);
    if (v25) {
      memcpy((void *)(a1 + 193544), v25, 0x54F8uLL);
    }
    __uint64_t v15 = *(const void **)(a2 + 200);
    uint64_t v5 = v31;
    uint64_t v4 = v32;
    if (v15)
    {
      integer_t v16 = (void *)(a1 + 215296);
      size_t v17 = 24024;
      goto LABEL_29;
    }
  }
  else if (v12)
  {
    if (sub_D1C38(0x2Eu, 4))
    {
      if (sub_D1C7C(0x2Eu))
      {
        __uint64_t v26 = sub_DDEFC();
        int v27 = (const char *)sub_D1CB0(4);
        printf("%lld %d AVE %s: codectype not recognized! %d\n", v26, 46, v27, *(_DWORD *)(*(void *)(a2 + 96) + 120));
      }
      __uint64_t v28 = sub_DDEFC();
      int v29 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: codectype not recognized! %d", v28, 46, v29, *(_DWORD *)(*(void *)(a2 + 96) + 120));
    }
  }
  else
  {
    double v13 = *(const void **)(a2 + 128);
    if (v13) {
      memcpy((void *)(a1 + 71560), v13, 0x6B8uLL);
    }
    int v14 = *(const void **)(a2 + 136);
    if (v14) {
      memcpy((void *)(a1 + 73280), v14, 0x184uLL);
    }
    __uint64_t v15 = *(const void **)(a2 + 144);
    if (v15)
    {
      integer_t v16 = (void *)(a1 + 73668);
      size_t v17 = 2604;
LABEL_29:
      memcpy(v16, v15, v17);
    }
  }
  *(void *)(a1 + 51100) = 0;
  *(_OWORD *)(a1 + 51084) = 0u;
  *(_OWORD *)(a1 + 51112) = 0u;
  *(_DWORD *)uint64_t v6 = -1;
  *(unsigned char *)(v6 + 4) = 0;
  *(unsigned char *)a1 = 0;
  *(void *)(v6 + 136) = 0;
  *(void *)(v6 + 40) = 0;
  *(unsigned char *)(a1 + 25784) = 0;
  *(unsigned char *)(v5 + 10) = 0;
  *(void *)(v4 + 8) = 0;
  *(_OWORD *)(a1 + 25792) = 0u;
  *(_OWORD *)(a1 + 25808) = 0u;
  *(_OWORD *)(a1 + 25824) = 0u;
  *(_OWORD *)(a1 + 25840) = 0u;
  *(_OWORD *)(a1 + 25856) = 0u;
  *(_OWORD *)(a1 + 25872) = 0u;
  *(_OWORD *)(a1 + 25888) = 0u;
  *(_OWORD *)(a1 + 25904) = 0u;
  *(_OWORD *)(a1 + 25920) = 0u;
  *(_OWORD *)(a1 + 25936) = 0u;
  *(_OWORD *)(a1 + 25952) = 0u;
  *(_OWORD *)(a1 + 25968) = 0u;
  *(_OWORD *)(a1 + 25984) = 0u;
  *(_OWORD *)(a1 + 26000) = 0u;
  *(_OWORD *)(a1 + 26016) = 0u;
  *(_OWORD *)(a1 + 26032) = 0u;
  *(_OWORD *)(a1 + 26048) = 0u;
  *(_OWORD *)(a1 + 26064) = 0u;
  *(_OWORD *)(a1 + 26080) = 0u;
  *(_OWORD *)(a1 + 26096) = 0u;
  *(_OWORD *)(a1 + 26112) = 0u;
  *(_OWORD *)(a1 + 26128) = 0u;
  *(_OWORD *)(a1 + 26144) = 0u;
  *(_OWORD *)(a1 + 26160) = 0u;
  *(_OWORD *)(a1 + 26176) = 0u;
  *(_OWORD *)(a1 + 26192) = 0u;
  *(_OWORD *)(a1 + 26208) = 0u;
  *(_OWORD *)(a1 + 26224) = 0u;
  *(_OWORD *)(a1 + 26240) = 0u;
  *(_OWORD *)(a1 + 26256) = 0u;
  *(_OWORD *)(a1 + 26920) = 0u;
  *(_OWORD *)(a1 + 26936) = 0u;
  *(_OWORD *)(a1 + 26888) = 0u;
  *(_OWORD *)(a1 + 26904) = 0u;
  *(_OWORD *)(a1 + 26856) = 0u;
  *(_OWORD *)(a1 + 26872) = 0u;
  *(_OWORD *)(a1 + 26824) = 0u;
  *(_OWORD *)(a1 + 26840) = 0u;
  *(_OWORD *)(a1 + 26792) = 0u;
  *(_OWORD *)(a1 + 26808) = 0u;
  *(_OWORD *)(a1 + 26760) = 0u;
  *(_OWORD *)(a1 + 26776) = 0u;
  *(_OWORD *)(a1 + 26728) = 0u;
  *(_OWORD *)(a1 + 26744) = 0u;
  *(_OWORD *)(a1 + 26696) = 0u;
  *(_OWORD *)(a1 + 26712) = 0u;
  *(_OWORD *)(a1 + 26664) = 0u;
  *(_OWORD *)(a1 + 26680) = 0u;
  *(_OWORD *)(a1 + 26632) = 0u;
  *(_OWORD *)(a1 + 26648) = 0u;
  *(_OWORD *)(a1 + 26600) = 0u;
  *(_OWORD *)(a1 + 26616) = 0u;
  *(_OWORD *)(a1 + 26568) = 0u;
  *(_OWORD *)(a1 + 26584) = 0u;
  *(_OWORD *)(a1 + 26536) = 0u;
  *(_OWORD *)(a1 + 26552) = 0u;
  *(_OWORD *)(a1 + 26504) = 0u;
  *(_OWORD *)(a1 + 26520) = 0u;
  *(_OWORD *)(a1 + 26472) = 0u;
  *(_OWORD *)(a1 + 26488) = 0u;
  bzero((void *)(a1 + 27072), 0x3C0uLL);
  *(_OWORD *)(a1 + 51240) = 0u;
  *(_OWORD *)(a1 + 245264) = 0u;
  return a1;
}

void sub_9BA2C(_Unwind_Exception *a1)
{
  sub_9BA40(v1);
  _Unwind_Resume(a1);
}

void *sub_9BA40(void *a1)
{
  sub_AF1B0(a1 + 3179);
  sub_AF1B0(a1 + 3173);
  unint64_t v2 = (void *)a1[3169];
  if (v2)
  {
    a1[3170] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_9BA8C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = a1 + 51304;
    *(_OWORD *)(a1 + 51320) = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 51336) = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 51352) = *(void *)(a2 + 32);
    *(void *)(a1 + 51304) = *(void *)(a2 + 72);
    *(unsigned char *)(a1 + 239345) = *(unsigned char *)(a2 + 208);
    *(_DWORD *)(a1 + 239352) = *(_DWORD *)(a2 + 216);
    *(_DWORD *)(a1 + 239348) = *(_DWORD *)(a2 + 212);
    *(_DWORD *)(a1 + 239356) = *(_DWORD *)(a2 + 220);
    *(void *)(a1 + 239336) = *(void *)(a2 + 224);
    *(unsigned char *)(a1 + 245280) = *(unsigned char *)(a2 + 232);
    *(void *)(a1 + 245288) = *(void *)(a2 + 240);
    long long v5 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 51272) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 51288) = v5;
    uint64_t v6 = *(void **)(a2 + 80);
    if (v6) {
      *(void *)(a1 + 51368) = *v6;
    }
    long long v7 = *(const void **)(a2 + 88);
    if (v7) {
      memcpy((void *)(a1 + 51376), v7, 0x4178uLL);
    }
    __uint64_t v8 = *(const void **)(a2 + 96);
    if (v8) {
      memcpy((void *)(a1 + 68136), v8, 0x6C0uLL);
    }
    unint64_t v9 = *(const void **)(a2 + 104);
    if (v9) {
      memcpy((void *)(a1 + 69864), v9, 0x690uLL);
    }
    *(_OWORD *)(v4 + 20240) = *(_OWORD *)(a2 + 112);
    int v10 = *(_DWORD *)(*(void *)(a2 + 96) + 120);
    if (v10 == 1)
    {
      char v21 = *(const void **)(a2 + 152);
      if (v21) {
        memcpy((void *)(a1 + 76272), v21, 0x140E8uLL);
      }
      uint64_t v22 = 0;
      char v23 = 1;
      do
      {
        char v24 = v23;
        uint64_t v25 = a2 + 8 * v22;
        __uint64_t v26 = *(const void **)(v25 + 160);
        if (v26) {
          memcpy((void *)(a1 + 7924 * v22 + 158424), v26, 0x1EF4uLL);
        }
        int v27 = *(const void **)(v25 + 176);
        if (v27) {
          memcpy((void *)(a1 + 9636 * v22 + 174272), v27, 0x25A4uLL);
        }
        char v23 = 0;
        uint64_t v22 = 1;
      }
      while ((v24 & 1) != 0);
      __uint64_t v28 = *(const void **)(a2 + 192);
      if (v28) {
        memcpy((void *)(a1 + 193544), v28, 0x54F8uLL);
      }
      double v13 = *(const void **)(a2 + 200);
      if (!v13) {
        return 0;
      }
      int v14 = (void *)(a1 + 215296);
      size_t v15 = 24024;
    }
    else
    {
      if (v10)
      {
        if (sub_D1C38(0x2Eu, 4))
        {
          int v29 = sub_D1C7C(0x2Eu);
          __uint64_t v30 = sub_DDEFC();
          uint64_t v31 = (const char *)sub_D1CB0(4);
          int v32 = *(_DWORD *)(*(void *)(a2 + 96) + 120);
          if (v29)
          {
            printf("%lld %d AVE %s: codectype not recognized! %d\n", v30, 46, v31, v32);
            __uint64_t v33 = sub_DDEFC();
            unsigned int v36 = (const char *)sub_D1CB0(4);
            syslog(3, "%lld %d AVE %s: codectype not recognized! %d", v33, 46, v36, *(_DWORD *)(*(void *)(a2 + 96) + 120));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: codectype not recognized! %d", v30, 46, v31, v32);
          }
        }
        return 0;
      }
      thread_act_t v11 = *(const void **)(a2 + 128);
      if (v11) {
        memcpy((void *)(a1 + 71560), v11, 0x6B8uLL);
      }
      int v12 = *(const void **)(a2 + 136);
      if (v12) {
        memcpy((void *)(a1 + 73280), v12, 0x184uLL);
      }
      double v13 = *(const void **)(a2 + 144);
      if (!v13) {
        return 0;
      }
      int v14 = (void *)(a1 + 73668);
      size_t v15 = 2604;
    }
    memcpy(v14, v13, v15);
    return 0;
  }
  uint64_t v16 = 3758097084;
  if (sub_D1C38(3u, 4))
  {
    int v17 = sub_D1C7C(3u);
    __uint64_t v18 = sub_DDEFC();
    uint64_t v19 = (const char *)sub_D1CB0(4);
    if (v17)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: UpdateSettings failed.\n", v18, 3, v19, "UpdateSettings", 307, "interface != __null");
      __uint64_t v20 = sub_DDEFC();
      double v35 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: UpdateSettings failed.", v20, 3, v35, "UpdateSettings", 307, "interface != __null");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: UpdateSettings failed.", v18, 3, v19, "UpdateSettings", 307, "interface != __null");
    }
  }
  return v16;
}

void *sub_9BE30(uint64_t a1, void *__dst)
{
  return memcpy(__dst, (const void *)(a1 + 25504), 0x108uLL);
}

uint64_t sub_9BE48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 25776) = a2;
  return result;
}

void *sub_9BE54(void *a1)
{
  unint64_t v2 = a1 + 6389;
  uint64_t v3 = 0x1FFFFFFFFFFFFFE2;
  do
  {
    uint64_t v4 = &a1[v3];
    long long v5 = (__IOSurface *)a1[v3 + 3284];
    if (v5)
    {
      IOSurfaceUnlock(v5, 0, 0);
      CFRelease((CFTypeRef)v4[3284]);
      v4[3284] = 0;
    }
    uint64_t v6 = (__IOSurface *)v4[3369];
    if (v6)
    {
      IOSurfaceUnlock(v6, 0, 0);
      CFRelease((CFTypeRef)v4[3369]);
      v4[3369] = 0;
    }
    long long v7 = &a1[v3];
    __uint64_t v8 = (__IOSurface *)a1[v3 + 3444];
    if (v8)
    {
      IOSurfaceUnlock(v8, 0, 0);
      CFRelease((CFTypeRef)v7[3444]);
      v7[3444] = 0;
    }
    unint64_t v9 = (__IOSurface *)v7[3504];
    if (v9)
    {
      IOSurfaceUnlock(v9, 0, 0);
      CFRelease((CFTypeRef)v7[3504]);
      v7[3504] = 0;
    }
    ++v3;
  }
  while (v3 * 8);
  if (v2[31])
  {
    FigFormatDescriptionRelease();
    v2[31] = 0;
  }
  if (*v2)
  {
    free((void *)*v2);
    *unint64_t v2 = 0;
    *((_DWORD *)v2 + 2) = 0;
  }
  sub_AF1B0(a1 + 3180);
  sub_AF1B0(a1 + 3174);
  int v10 = (void *)a1[3170];
  if (v10)
  {
    a1[3171] = v10;
    operator delete(v10);
  }
  return a1;
}

uint64_t sub_9BF70(uint64_t a1)
{
  unint64_t v2 = (const void **)(a1 + 51232);
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  *unint64_t v2 = Current;
  if (Current)
  {
    if (sub_D1C38(0x2Eu, 7))
    {
      int v4 = sub_D1C7C(0x2Eu);
      __uint64_t v5 = sub_DDEFC();
      uint64_t v6 = (const char *)sub_D1CB0(7);
      long long v7 = *v2;
      if (v4)
      {
        printf("%lld %d AVE %s: H264FrameRec: CFRunLoopGetCFRunLoopRef Current = %p\n", v5, 46, v6, v7);
        __uint64_t v8 = sub_DDEFC();
        int v27 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: CFRunLoopGetCFRunLoopRef Current = %p", v8, 46, v27, *v2);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: CFRunLoopGetCFRunLoopRef Current = %p", v5, 46, v6, v7);
      }
    }
    if (sub_D1C38(0x2Eu, 7))
    {
      int v13 = sub_D1C7C(0x2Eu);
      __uint64_t v14 = sub_DDEFC();
      size_t v15 = (const char *)sub_D1CB0(7);
      if (v13)
      {
        printf("%lld %d AVE %s: H264FrameRec: AddIODispatcherToRunLoop to CFRunLoopRun.\n", v14, 46, v15);
        __uint64_t v16 = sub_DDEFC();
        int v29 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: AddIODispatcherToRunLoop to CFRunLoopRun.", v16, 46, v29);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: AddIODispatcherToRunLoop to CFRunLoopRun.", v14, 46, v15);
      }
    }
    if (sub_9C314(a1))
    {
      uint64_t v17 = 3758097084;
      if (sub_D1C38(3u, 4))
      {
        int v18 = sub_D1C7C(3u);
        __uint64_t v19 = sub_DDEFC();
        __uint64_t v20 = (const char *)sub_D1CB0(4);
        if (v18)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: AddIODispatcherToRunLoop failed.\n", v19, 3, v20, "Setup", 479, "err == 0");
          __uint64_t v21 = sub_DDEFC();
          __uint64_t v30 = (const char *)sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: AddIODispatcherToRunLoop failed.", v21, 3, v30, "Setup", 479, "err == 0");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: AddIODispatcherToRunLoop failed.", v19, 3, v20, "Setup", 479, "err == 0");
        }
      }
    }
    else
    {
      if (*(unsigned char *)(a1 + 239345))
      {
        if (sub_D1C38(0x2Eu, 4))
        {
          int v22 = sub_D1C7C(0x2Eu);
          __uint64_t v23 = sub_DDEFC();
          char v24 = (const char *)sub_D1CB0(4);
          if (v22)
          {
            printf("%lld %d AVE %s: H264VideoEncoder: setpriority to BACKGROUND\n", v23, 46, v24);
            __uint64_t v25 = sub_DDEFC();
            uint64_t v31 = (const char *)sub_D1CB0(4);
            syslog(3, "%lld %d AVE %s: H264VideoEncoder: setpriority to BACKGROUND", v25, 46, v31);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264VideoEncoder: setpriority to BACKGROUND", v23, 46, v24);
          }
        }
        setpriority(3, 0, 4096);
      }
      else
      {
        sub_9B578(a1);
      }
      return 0;
    }
  }
  else if (sub_D1C38(3u, 4))
  {
    int v9 = sub_D1C7C(3u);
    __uint64_t v10 = sub_DDEFC();
    thread_act_t v11 = (const char *)sub_D1CB0(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CFRunLoopGetCurrent failed.\n", v10, 3, v11, "Setup", 472, "m_CFRunLoopRef != __null");
      __uint64_t v12 = sub_DDEFC();
      __uint64_t v28 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CFRunLoopGetCurrent failed.", v12, 3, v28, "Setup", 472, "m_CFRunLoopRef != __null");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CFRunLoopGetCurrent failed.", v10, 3, v11, "Setup", 472, "m_CFRunLoopRef != __null");
    }
    return 3758097085;
  }
  else
  {
    return 3758097085;
  }
  return v17;
}

uint64_t sub_9C314(uint64_t a1)
{
  Boolean shouldFreeInfo = 0;
  if (IOCreateReceivePort(0x39u, (mach_port_t *)(a1 + 51256)))
  {
    uint64_t v2 = 3758097084;
    if (sub_D1C38(0x2Eu, 4))
    {
      int v3 = sub_D1C7C(0x2Eu);
      __uint64_t v4 = sub_DDEFC();
      __uint64_t v5 = (const char *)sub_D1CB0(4);
      if (v3)
      {
        printf("%lld %d AVE %s: H264FrameRec ERROR: IOCreateReceivePort failed -> Dispatcher cannot be installed\n", v4, 46, v5);
        __uint64_t v6 = sub_DDEFC();
        int v22 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: IOCreateReceivePort failed -> Dispatcher cannot be installed", v6, 46, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: IOCreateReceivePort failed -> Dispatcher cannot be installed", v4, 46, v5);
      }
    }
    return v2;
  }
  context.version = 1;
  context.mach_timebase_info info = (void *)a1;
  memset(&context.retain, 0, 24);
  long long v7 = CFMachPortCreateWithPort(kCFAllocatorDefault, *(_DWORD *)(a1 + 51256), (CFMachPortCallBack)&IODispatchCalloutFromMessage, &context, &shouldFreeInfo);
  *(void *)(a1 + 51264) = v7;
  if (v7) {
    BOOL v8 = shouldFreeInfo == 1;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if (sub_D1C38(0x2Eu, 4))
    {
      int v9 = sub_D1C7C(0x2Eu);
      __uint64_t v10 = sub_DDEFC();
      thread_act_t v11 = (const char *)sub_D1CB0(4);
      if (v9)
      {
        printf("%lld %d AVE %s: H264FrameRec ERROR: CFMachPortCreateWithPort failed m_CFAsyncPort %p shouldFreeInfo %d\n", v10, 46, v11, *(const void **)(a1 + 51264), shouldFreeInfo);
        __uint64_t v10 = sub_DDEFC();
        thread_act_t v11 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: CFMachPortCreateWithPort failed m_CFAsyncPort %p shouldFreeInfo %d", v10, 46, v11, *(const void **)(a1 + 51264), shouldFreeInfo);
    }
    *(void *)(a1 + 51264) = 0;
    goto LABEL_25;
  }
  RunLoopSource = CFMachPortCreateRunLoopSource(kCFAllocatorDefault, v7, 0);
  *(void *)(a1 + 51248) = RunLoopSource;
  if (!RunLoopSource)
  {
    if (sub_D1C38(0x2Eu, 4))
    {
      int v17 = sub_D1C7C(0x2Eu);
      __uint64_t v18 = sub_DDEFC();
      __uint64_t v19 = (const char *)sub_D1CB0(4);
      if (v17)
      {
        printf("%lld %d AVE %s: H264FrameRec ERROR: CFMachPortCreateRunLoopSource failed -> Dispatcher cannot be installed\n", v18, 46, v19);
        __uint64_t v20 = sub_DDEFC();
        char v24 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: CFMachPortCreateRunLoopSource failed -> Dispatcher cannot be installed", v20, 46, v24);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: CFMachPortCreateRunLoopSource failed -> Dispatcher cannot be installed", v18, 46, v19);
      }
    }
LABEL_25:
    sub_9C6A4(a1);
    return 3758097085;
  }
  CFRunLoopAddSource(*(CFRunLoopRef *)(a1 + 51232), RunLoopSource, kCFRunLoopDefaultMode);
  long long v27 = 0u;
  long long v28 = 0u;
  memset(v25, 0, sizeof(v25));
  uint64_t v26 = *(unsigned int *)(a1 + 239356);
  int v29 = sub_9C730;
  uint64_t v30 = a1;
  if (!sub_11D00(*(const void ***)(a1 + 51320), (const void *)*(unsigned int *)(a1 + 51256), &v26, v25)) {
    return 0;
  }
  if (sub_D1C38(0x2Eu, 4))
  {
    int v13 = sub_D1C7C(0x2Eu);
    __uint64_t v14 = sub_DDEFC();
    size_t v15 = (const char *)sub_D1CB0(4);
    if (v13)
    {
      printf("%lld %d AVE %s: H264FrameRec ERROR: kH264VideoEncoderUserClientSetCallback failed -> Dispatcher cannot be installed\n", v14, 46, v15);
      __uint64_t v16 = sub_DDEFC();
      __uint64_t v23 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: kH264VideoEncoderUserClientSetCallback failed -> Dispatcher cannot be installed", v16, 46, v23);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: kH264VideoEncoderUserClientSetCallback failed -> Dispatcher cannot be installed", v14, 46, v15);
    }
  }
  uint64_t v2 = 3758097084;
  sub_9C6A4(a1);
  return v2;
}

uint64_t sub_9C680(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 239345) != a2)
  {
    *(unsigned char *)(result + 239345) = a2;
    *(unsigned char *)(result + 239346) = 1;
  }
  return result;
}

uint64_t sub_9C6A4(uint64_t a1)
{
  uint64_t v1 = a1 + 51232;
  uint64_t v2 = *(__CFRunLoopSource **)(a1 + 51248);
  if (v2)
  {
    CFRunLoopRemoveSource(*(CFRunLoopRef *)v1, v2, kCFRunLoopDefaultMode);
    CFRelease(*(CFTypeRef *)(v1 + 16));
    *(void *)(v1 + 16) = 0;
  }
  int v3 = *(__CFMachPort **)(v1 + 32);
  if (v3)
  {
    CFMachPortInvalidate(v3);
    CFRelease(*(CFTypeRef *)(v1 + 32));
    *(void *)(v1 + 32) = 0;
  }
  mach_port_t v4 = mach_task_self_;
  mach_port_name_t v5 = *(_DWORD *)(v1 + 24);

  return mach_port_mod_refs(v4, v5, 1u, -1);
}

void sub_9C730(uint64_t a1, int a2, int *a3, int a4)
{
  if (sub_D1C38(0x2Eu, 8))
  {
    int v6 = sub_D1C7C(0x2Eu);
    __uint64_t v7 = sub_DDEFC();
    BOOL v8 = (const char *)sub_D1CB0(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p 0x%x %p %d\n", v7, 46, v8, "FrameDone", (const void *)a1, a2, a3, a4);
      __uint64_t v7 = sub_DDEFC();
      sub_D1CB0(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p 0x%x %p %d", v7, 46);
  }
  if (!a1 || !a3 || a4 <= 0)
  {
    if (sub_D1C38(0x2Eu, 4))
    {
      int v14 = sub_D1C7C(0x2Eu);
      __uint64_t v15 = sub_DDEFC();
      __uint64_t v16 = (const char *)sub_D1CB0(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p 0x%x %p %d\n", v15, 46, v16, "FrameDone", 5172, "pRefCon != __null && args != __null && numArgs > 0", (const void *)a1, a2, a3, a4);
        __uint64_t v17 = sub_DDEFC();
        __uint64_t v312 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p 0x%x %p %d", v17, 46, v312, "FrameDone");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p 0x%x %p %d", v15, 46, v16, "FrameDone");
      }
    }
    goto LABEL_26;
  }
  int v9 = (unsigned char *)(a1 + 239345);
  if (!*(void *)(a1 + 51320) || !*(_DWORD *)(a1 + 239352))
  {
    if (sub_D1C38(0x2Eu, 4))
    {
      int v18 = sub_D1C7C(0x2Eu);
      __uint64_t v19 = sub_DDEFC();
      __uint64_t v20 = (const char *)sub_D1CB0(4);
      if (v18)
      {
        int v21 = a4;
        uint64_t v22 = 46;
        printf("%lld %d AVE %s: %s:%d %s | wrong state %p %d\n", v19, 46, v20, "FrameDone", 5177, "context->m_pcDAL != __null && context->m_DeviceType != AVE_DevType_None", *(const void **)(a1 + 51320), *(_DWORD *)(a1 + 239352));
        __uint64_t v23 = sub_DDEFC();
        char v24 = sub_D1CB0(4);
        uint64_t v330 = *(void *)(a1 + 51320);
        uint64_t v331 = *(unsigned int *)(a1 + 239352);
        uint64_t v328 = 5177;
        __int16 v329 = "context->m_pcDAL != __null && context->m_DeviceType != AVE_DevType_None";
        int v313 = v24;
        __uint64_t v25 = "%lld %d AVE %s: %s:%d %s | wrong state %p %d";
LABEL_23:
        uint64_t v310 = v22;
        a4 = v21;
        syslog(3, v25, v23, v310, v313, "FrameDone", v328, v329, v330, v331, v332);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong state %p %d", v19, 46);
      }
    }
    goto LABEL_26;
  }
  if (a2 == -536870210) {
    goto LABEL_14;
  }
  if (a2)
  {
    if (a2 != -536870165)
    {
      if (sub_D1C38(3u, 4))
      {
        int v30 = sub_D1C7C(3u);
        __uint64_t v31 = sub_DDEFC();
        int v32 = (const char *)sub_D1CB0(4);
        if (v30)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: commandResult != kIOReturnSuccess.\n", v31, 3, v32, "FrameDone", 5187, "commandResult == 0");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: commandResult != kIOReturnSuccess.");
      }
      goto LABEL_26;
    }
LABEL_14:
    if (sub_D1C38(0x2Eu, 4))
    {
      int v10 = sub_D1C7C(0x2Eu);
      __uint64_t v11 = sub_DDEFC();
      __uint64_t v12 = (const char *)sub_D1CB0(4);
      if (v10)
      {
        printf("%lld %d AVE %s: FIG: H264FrameRec: commandResult = kIOReturnNoResources\n", v11, 46, v12);
        __uint64_t v13 = sub_DDEFC();
        long long v311 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: FIG: H264FrameRec: commandResult = kIOReturnNoResources", v13, 46, v311);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: H264FrameRec: commandResult = kIOReturnNoResources", v11, 46, v12);
      }
    }
  }
  int v33 = *a3;
  if (sub_D1C38(0x2Eu, 7))
  {
    int v34 = sub_D1C7C(0x2Eu);
    __uint64_t v35 = sub_DDEFC();
    unsigned int v36 = (const char *)sub_D1CB0(7);
    if (v34)
    {
      printf("%lld %d AVE %s: \nH264FrameRec: counter received = %d\n", v35, 46, v36, v33);
      __uint64_t v37 = sub_DDEFC();
      __uint64_t v314 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: \nH264FrameRec: counter received = %d", v37, 46, v314, v33);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: \nH264FrameRec: counter received = %d", v35, 46, v36, v33);
    }
  }
  __uint64_t v338 = (uint64_t *)(a1 + 239336);
  uint64_t v38 = a1 + 25784;
  if (*(unsigned char *)(a1 + 239346))
  {
    if (*v9)
    {
      if (sub_D1C38(0x2Eu, 4))
      {
        int v39 = sub_D1C7C(0x2Eu);
        __uint64_t v40 = sub_DDEFC();
        unsigned int v41 = (const char *)sub_D1CB0(4);
        if (v39)
        {
          printf("%lld %d AVE %s: H264VideoEncoder: setpriority to BACKGROUND\n", v40, 46, v41);
          __uint64_t v42 = sub_DDEFC();
          int v315 = (const char *)sub_D1CB0(4);
          uint64_t v38 = a1 + 25784;
          syslog(3, "%lld %d AVE %s: H264VideoEncoder: setpriority to BACKGROUND", v42, 46, v315);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264VideoEncoder: setpriority to BACKGROUND", v40, 46, v41);
        }
      }
      setpriority(3, 0, 4096);
    }
    else
    {
      if (sub_D1C38(0x2Eu, 7))
      {
        int v43 = sub_D1C7C(0x2Eu);
        __uint64_t v44 = sub_DDEFC();
        __uint64_t v45 = (const char *)sub_D1CB0(7);
        if (v43)
        {
          printf("%lld %d AVE %s: H264VideoEncoder: setpriority to FOREGROUND\n", v44, 46, v45);
          __uint64_t v46 = sub_DDEFC();
          __uint64_t v316 = (const char *)sub_D1CB0(7);
          uint64_t v38 = a1 + 25784;
          syslog(3, "%lld %d AVE %s: H264VideoEncoder: setpriority to FOREGROUND", v46, 46, v316);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264VideoEncoder: setpriority to FOREGROUND", v44, 46, v45);
        }
      }
      setpriority(3, 0, 0);
      sub_9B578(a1);
    }
    *(unsigned char *)(a1 + 239346) = 0;
  }
  *(void *)&v346[0] = 0;
  sub_10578(*(void **)(a1 + 51320), v33, v346);
  uint64_t v47 = *(void *)&v346[0];
  kdebug_trace();
  int v342 = a4;
  uint64_t v343 = v47;
  int v339 = a2;
  switch(*(_DWORD *)(v47 + 4))
  {
    case 4:
      if (sub_D1C38(0x2Eu, 7))
      {
        int v48 = sub_D1C7C(0x2Eu);
        __uint64_t v49 = sub_DDEFC();
        int32x2_t v50 = (const char *)sub_D1CB0(7);
        if (v48)
        {
          printf("%lld %d AVE %s: H264FrameRec: DataType_PREPARE frame %d\n", v49, 46, v50, *(_DWORD *)(v47 + 160));
          sub_DDEFC();
          sub_D1CB0(7);
          uint64_t v38 = a1 + 25784;
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_PREPARE frame %d");
      }
      goto LABEL_171;
    case 5:
      if (a2 != -536870210 && a2 != -536870165)
      {
        if (sub_D1C38(0x2Eu, 7))
        {
          int v51 = sub_D1C7C(0x2Eu);
          __uint64_t v52 = sub_DDEFC();
          uint32x2_t v53 = (const char *)sub_D1CB0(7);
          if (v51)
          {
            printf("%lld %d AVE %s: %s:%d DataType_INIT counter %d frame %d\n", v52, 46, v53, "FrameDone", 5428, v33, *(_DWORD *)(v47 + 160));
            __uint64_t v54 = sub_DDEFC();
            sub_D1CB0(7);
            syslog(3, "%lld %d AVE %s: %s:%d DataType_INIT counter %d frame %d", v54);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d DataType_INIT counter %d frame %d", v52);
          }
        }
        uint64_t v99 = 0;
        uint64_t v100 = v47 + 356;
        uint64_t v101 = (const void **)(a1 + 26712);
        *(_DWORD *)(a1 + 25788) = *(_DWORD *)(v47 + 352);
        do
        {
          IOSurfaceID v102 = *(_DWORD *)(v100 + 4 * v99);
          if (v102)
          {
            uint64_t v103 = IOSurfaceLookup(v102);
            *uint64_t v101 = v103;
            IOSurfaceLock(v103, 0, 0);
            *(v101 - 30) = IOSurfaceGetBaseAddress((IOSurfaceRef)*v101);
            *(_DWORD *)(a1 + 26952 + 4 * v99) = IOSurfaceGetAllocSize((IOSurfaceRef)*v101);
            if (sub_D1C38(0x2Eu, 7))
            {
              int v104 = sub_D1C7C(0x2Eu);
              __uint64_t v105 = sub_DDEFC();
              int v106 = (const char *)sub_D1CB0(7);
              int v107 = *(_DWORD *)(v100 + 4 * v99);
              int v108 = *(v101 - 30);
              if (v104)
              {
                printf("%lld %d AVE %s: %s:%d CodedData %d %d %p %p\n", v105, 46, v106, "FrameDone", 5444, v99, v107, *v101, v108);
                __uint64_t v109 = sub_DDEFC();
                int v110 = (const char *)sub_D1CB0(7);
                syslog(3, "%lld %d AVE %s: %s:%d CodedData %d %d %p %p", v109, 46, v110, "FrameDone", 5444, v99, *(_DWORD *)(v100 + 4 * v99), *v101, *(v101 - 30));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d CodedData %d %d %p %p", v105, 46, v106, "FrameDone", 5444, v99, v107, *v101, v108);
              }
            }
          }
          ++v99;
          ++v101;
        }
        while (v99 != 30);
        uint64_t v111 = (IOSurfaceID *)(v47 + 476);
        int v112 = (const void **)(a1 + 27312);
        uint64_t v113 = -30;
        do
        {
          if (*v111)
          {
            CFNumberRef v114 = IOSurfaceLookup(*v111);
            *int v112 = v114;
            IOSurfaceLock(v114, 0, 0);
            *(v112 - 30) = IOSurfaceGetBaseAddress((IOSurfaceRef)*v112);
            if (sub_D1C38(0x2Eu, 7))
            {
              int v115 = sub_D1C7C(0x2Eu);
              __uint64_t v116 = sub_DDEFC();
              int v117 = (const char *)sub_D1CB0(7);
              IOSurfaceID v118 = *v111;
              unsigned int v119 = *(v112 - 30);
              if (v115)
              {
                printf("%lld %d AVE %s: %s:%d CodedHeader %d %d %p %p\n", v116, 46, v117, "FrameDone", 5460, v113 + 30, v118, *v112, v119);
                __uint64_t v120 = sub_DDEFC();
                __uint64_t v121 = (const char *)sub_D1CB0(7);
                syslog(3, "%lld %d AVE %s: %s:%d CodedHeader %d %d %p %p", v120, 46, v121, "FrameDone", 5460, v113 + 30, *v111, *v112, *(v112 - 30));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d CodedHeader %d %d %p %p", v116, 46, v117, "FrameDone", 5460, v113 + 30, v118, *v112, v119);
              }
            }
          }
          ++v111;
          ++v112;
          BOOL v122 = __CFADD__(v113++, 1);
        }
        while (!v122);
        int v123 = (IOSurfaceID *)(v47 + 596);
        int v124 = (const void **)(a1 + 27792);
        uint64_t v125 = -30;
        do
        {
          if (*v123)
          {
            int v126 = IOSurfaceLookup(*v123);
            *int v124 = v126;
            IOSurfaceLock(v126, 0, 0);
            *(v124 - 30) = IOSurfaceGetBaseAddress((IOSurfaceRef)*v124);
            if (sub_D1C38(0x2Eu, 7))
            {
              int v127 = sub_D1C7C(0x2Eu);
              __uint64_t v128 = sub_DDEFC();
              BOOL v129 = (const char *)sub_D1CB0(7);
              IOSurfaceID v130 = *v123;
              __uint64_t v131 = *(v124 - 30);
              if (v127)
              {
                printf("%lld %d AVE %s: %s:%d SliceHeader %d %d %p %p\n", v128, 46, v129, "FrameDone", 5476, v125 + 30, v130, *v124, v131);
                __uint64_t v132 = sub_DDEFC();
                int v133 = (const char *)sub_D1CB0(7);
                syslog(3, "%lld %d AVE %s: %s:%d SliceHeader %d %d %p %p", v132, 46, v133, "FrameDone", 5476, v125 + 30, *v123, *v124, *(v124 - 30));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d SliceHeader %d %d %p %p", v128, 46, v129, "FrameDone", 5476, v125 + 30, v130, *v124, v131);
              }
            }
          }
          ++v123;
          ++v124;
          BOOL v122 = __CFADD__(v125++, 1);
        }
        while (!v122);
        __uint64_t v134 = (IOSurfaceID *)(v47 + 716);
        CFDataRef v135 = (const void **)(a1 + 26032);
        uint64_t v136 = -30;
        do
        {
          if (*v134)
          {
            int v137 = IOSurfaceLookup(*v134);
            *CFDataRef v135 = v137;
            IOSurfaceLock(v137, 0, 0);
            *(v135 - 30) = IOSurfaceGetBaseAddress((IOSurfaceRef)*v135);
            if (sub_D1C38(0x2Eu, 7))
            {
              int v138 = sub_D1C7C(0x2Eu);
              __uint64_t v139 = sub_DDEFC();
              unsigned int v140 = (const char *)sub_D1CB0(7);
              IOSurfaceID v141 = *v134;
              __uint64_t v142 = *(v135 - 30);
              if (v138)
              {
                printf("%lld %d AVE %s: %s:%d MBStats %d %d %p %p\n", v139, 46, v140, "FrameDone", 5492, v136 + 30, v141, *v135, v142);
                __uint64_t v143 = sub_DDEFC();
                int v144 = (const char *)sub_D1CB0(7);
                syslog(3, "%lld %d AVE %s: %s:%d MBStats %d %d %p %p", v143, 46, v144, "FrameDone", 5492, v136 + 30, *v134, *v135, *(v135 - 30));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d MBStats %d %d %p %p", v139, 46, v140, "FrameDone", 5492, v136 + 30, v141, *v135, v142);
              }
            }
          }
          ++v134;
          ++v135;
          BOOL v122 = __CFADD__(v136++, 1);
        }
        while (!v122);
        uint64_t v145 = 0;
        uint64_t v146 = v47 + 836;
        do
        {
          int v147 = *(_DWORD *)(v146 + 4 * v145);
          if (v147)
          {
            *(_DWORD *)(a1 + 26392 + 4 * v145) = v147;
            if (sub_D1C38(0x2Eu, 7))
            {
              int v148 = sub_D1C7C(0x2Eu);
              __uint64_t v149 = sub_DDEFC();
              BOOL v150 = (const char *)sub_D1CB0(7);
              int v151 = *(_DWORD *)(v146 + 4 * v145);
              if (v148)
              {
                printf("%lld %d AVE %s: %s:%d iaLFSResult %d %d\n", v149, 46, v150, "FrameDone", 5506, v145, v151);
                __uint64_t v152 = sub_DDEFC();
                __uint64_t v153 = (const char *)sub_D1CB0(7);
                syslog(3, "%lld %d AVE %s: %s:%d iaLFSResult %d %d", v152, 46, v153, "FrameDone", 5506, v145, *(_DWORD *)(v146 + 4 * v145));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d iaLFSResult %d %d", v149, 46, v150, "FrameDone", 5506, v145, v151);
              }
            }
          }
          ++v145;
        }
        while (v145 != 10);
        uint64_t v154 = 0;
        uint64_t v155 = v47 + 876;
        do
        {
          int v156 = *(_DWORD *)(v155 + 4 * v154);
          if (v156)
          {
            *(_DWORD *)(a1 + 26432 + 4 * v154) = v156;
            if (sub_D1C38(0x2Eu, 7))
            {
              int v157 = sub_D1C7C(0x2Eu);
              __uint64_t v158 = sub_DDEFC();
              __uint64_t v159 = (const char *)sub_D1CB0(7);
              int v160 = *(_DWORD *)(v155 + 4 * v154);
              if (v157)
              {
                printf("%lld %d AVE %s: %s:%d iaLRSResult %d %d\n", v158, 46, v159, "FrameDone", 5518, v154, v160);
                __uint64_t v161 = sub_DDEFC();
                __uint64_t v162 = (const char *)sub_D1CB0(7);
                syslog(3, "%lld %d AVE %s: %s:%d iaLRSResult %d %d", v161, 46, v162, "FrameDone", 5518, v154, *(_DWORD *)(v155 + 4 * v154));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d iaLRSResult %d %d", v158, 46, v159, "FrameDone", 5518, v154, v160);
              }
            }
          }
          ++v154;
        }
        while (v154 != 10);
        int v9 = (unsigned char *)(a1 + 239345);
        *(_DWORD *)(a1 + 67548) = *(_DWORD *)(v47 + 2360);
        uint64_t v38 = a1 + 25784;
      }
      goto LABEL_171;
    case 6:
      if (sub_D1C38(0x2Eu, 7))
      {
        int v55 = sub_D1C7C(0x2Eu);
        __uint64_t v56 = sub_DDEFC();
        double v57 = (const char *)sub_D1CB0(7);
        int v58 = *(_DWORD *)(a1 + 239356);
        if (v55)
        {
          printf("%lld %d AVE %s: H264FrameRec: DataType_STOP frame %d ClientID %d \n", v56, 46, v57, *(_DWORD *)(v47 + 160), v58);
          __uint64_t v59 = sub_DDEFC();
          int v60 = (const char *)sub_D1CB0(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_STOP frame %d ClientID %d ", v59, 46, v60, *(_DWORD *)(v47 + 160), *(_DWORD *)(a1 + 239356));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_STOP frame %d ClientID %d ", v56, 46, v57, *(_DWORD *)(v47 + 160), v58);
        }
      }
      uint64_t v79 = 0;
      uint64_t v80 = a1 + 26032;
      do
      {
        uint32x2_t v81 = *(__IOSurface **)(v80 + v79);
        if (v81)
        {
          IOSurfaceUnlock(v81, 0, 0);
          CFRelease(*(CFTypeRef *)(v80 + v79));
          *(void *)(v80 + v79) = 0;
        }
        uint64_t v82 = v80 + v79;
        uint32x2_t v83 = *(__IOSurface **)(v80 + v79 + 680);
        if (v83)
        {
          IOSurfaceUnlock(v83, 0, 0);
          CFRelease(*(CFTypeRef *)(v82 + 680));
          *(void *)(v82 + 680) = 0;
        }
        uint32x2_t v84 = *(__IOSurface **)(v82 + 1280);
        if (v84)
        {
          IOSurfaceUnlock(v84, 0, 0);
          CFRelease(*(CFTypeRef *)(v82 + 1280));
          *(void *)(v82 + 1280) = 0;
        }
        uint64_t v85 = v80 + v79;
        uint64_t v86 = *(__IOSurface **)(v80 + v79 + 1760);
        if (v86)
        {
          IOSurfaceUnlock(v86, 0, 0);
          CFRelease(*(CFTypeRef *)(v85 + 1760));
          *(void *)(v85 + 1760) = 0;
        }
        v79 += 8;
      }
      while (v79 != 240);
      sub_1016C(*(void **)(a1 + 51320), (const void *)v47);
      unsigned int v87 = -1;
      int v9 = (unsigned char *)(a1 + 239345);
      uint64_t v38 = a1 + 25784;
      goto LABEL_173;
    case 7:
      *(void *)(v47 + 27704) = sub_DDEFC();
      if (sub_D1C38(0x2Eu, 7))
      {
        int v61 = a4;
        int v62 = sub_D1C7C(0x2Eu);
        __uint64_t v63 = sub_DDEFC();
        __uint64_t v64 = (const char *)sub_D1CB0(7);
        if (v62)
        {
          printf("%lld %d AVE %s: H264FrameRec: DataType_YUV frame %d type %d ClientID %d counter %d\n", v63, 46, v64, *(_DWORD *)(v47 + 160), *(_DWORD *)(v47 + 23468), *(_DWORD *)(a1 + 239356), v33);
          __uint64_t v65 = sub_DDEFC();
          sub_D1CB0(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_YUV frame %d type %d ClientID %d counter %d", v65);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_YUV frame %d type %d ClientID %d counter %d", v63);
        }
        a4 = v61;
        uint64_t v38 = a1 + 25784;
      }
      if (!*(_DWORD *)(v47 + 160)) {
        *(void *)(a1 + 51312) = *(void *)(v47 + 2344);
      }
      if (*(_DWORD *)(a1 + 67932) >= 2u && *(_DWORD *)(v47 + 168) && *(unsigned char *)(a1 + 51229)) {
        *(_DWORD *)(v47 + 23468) = 4;
      }
      int v88 = *(_DWORD *)(a1 + 239348);
      if (v88 != 3)
      {
        unsigned int v336 = (int *)(v47 + 23468);
        unsigned int v93 = *(_DWORD *)(v47 + 23468);
        if (v93 >= 4)
        {
          if (v93 == 4)
          {
            if (sub_D1C38(0x2Eu, 5))
            {
              int v278 = sub_D1C7C(0x2Eu);
              __uint64_t v279 = sub_DDEFC();
              int v280 = (const char *)sub_D1CB0(5);
              int v281 = *v336;
              if (v278)
              {
                printf("%lld %d AVE %s: H264FrameRec: DROPPING frame %d type %d\n", v279, 46, v280, *(_DWORD *)(v47 + 160), v281);
                __uint64_t v282 = sub_DDEFC();
                int v283 = (const char *)sub_D1CB0(5);
                uint64_t v38 = a1 + 25784;
                syslog(3, "%lld %d AVE %s: H264FrameRec: DROPPING frame %d type %d", v282, 46, v283, *(_DWORD *)(v47 + 160), *v336);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: H264FrameRec: DROPPING frame %d type %d", v279, 46, v280, *(_DWORD *)(v47 + 160), v281);
              }
            }
            uint64_t v334 = a1 + 67552;
            int v176 = sub_A977C(a1, v47);
            BOOL v291 = 0;
            int v299 = 0;
          }
          else
          {
            if (v93 == 7) {
              goto LABEL_106;
            }
            uint64_t v334 = a1 + 67552;
            if (sub_D1C38(0x2Eu, 4))
            {
              int v284 = sub_D1C7C(0x2Eu);
              __uint64_t v285 = sub_DDEFC();
              uint64_t v286 = (const char *)sub_D1CB0(4);
              int v287 = *v336;
              if (v284)
              {
                printf("%lld %d AVE %s: H264FrameRec ERROR: FrameType NOT RECOGNIZED = %d. cannot process frame.\n", v285, 46, v286, v287);
                __uint64_t v288 = sub_DDEFC();
                int v326 = (const char *)sub_D1CB0(4);
                uint64_t v38 = a1 + 25784;
                syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: FrameType NOT RECOGNIZED = %d. cannot process frame.", v288, 46, v326, *v336);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: FrameType NOT RECOGNIZED = %d. cannot process frame.", v285, 46, v286, v287);
              }
              BOOL v291 = 0;
              int v299 = 0;
              int v176 = 0;
              unsigned int v87 = -1;
              goto LABEL_361;
            }
            BOOL v291 = 0;
            int v299 = 0;
            int v176 = 0;
          }
          unsigned int v87 = -1;
          goto LABEL_361;
        }
LABEL_106:
        uint64_t v94 = *(void *)(a1 + 51360);
        if (v94 || *(unsigned char *)v38)
        {
          if (*(unsigned char *)(a1 + 68345) && *(unsigned char *)(v47 + 3990))
          {
            if (v94)
            {
              FigFormatDescriptionRelease();
              *(void *)(a1 + 51360) = 0;
            }
            if (sub_A5D08(a1, (int *)v47, 0))
            {
              if (!sub_D1C38(3u, 4)) {
                goto LABEL_26;
              }
              int v95 = sub_D1C7C(3u);
              __uint64_t v96 = sub_DDEFC();
              CFTypeID v97 = (const char *)sub_D1CB0(4);
              if (!v95) {
                goto LABEL_355;
              }
              int v98 = 5292;
LABEL_116:
              printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendSPSandPPS failed.\n", v96, 3, v97, "FrameDone", v98, "err == noErr");
              sub_DDEFC();
              sub_D1CB0(4);
LABEL_355:
              syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendSPSandPPS failed.");
              goto LABEL_26;
            }
          }
        }
        else if (v88 == 1 && sub_A5D08(a1, (int *)v47, *(unsigned __int8 *)(a1 + 67552)))
        {
          if (!sub_D1C38(3u, 4)) {
            goto LABEL_26;
          }
          int v289 = sub_D1C7C(3u);
          __uint64_t v96 = sub_DDEFC();
          CFTypeID v97 = (const char *)sub_D1CB0(4);
          if (!v289) {
            goto LABEL_355;
          }
          int v98 = 5299;
          goto LABEL_116;
        }
        unsigned int v87 = a3[2];
        int v290 = *(_DWORD *)(a1 + 67556) - 1;
        BOOL v291 = v290 == v87;
        uint64_t v334 = a1 + 67552;
        if (!*(unsigned char *)(a1 + 67552) || (v87 & 0x80000000) != 0)
        {
          if (*(_DWORD *)(a1 + 239348) == 2)
          {
            uint64_t v38 = a1 + 25784;
            if (sub_A78D0(a1, v47))
            {
              if (sub_D1C38(3u, 4))
              {
                int v296 = sub_D1C7C(3u);
                __uint64_t v297 = sub_DDEFC();
                __uint64_t v298 = (const char *)sub_D1CB0(4);
                if (v296)
                {
                  printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: ProcessAndEmitLrmeStats failed\n", v297, 3, v298, "FrameDone", 5330, "err == noErr");
                  sub_DDEFC();
                  sub_D1CB0(4);
                }
                syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: ProcessAndEmitLrmeStats failed");
              }
              goto LABEL_26;
            }
          }
          else
          {
            uint64_t v38 = a1 + 25784;
            if (!*(unsigned char *)(a1 + 67552))
            {
              if (sub_A19B8(a1, v47))
              {
                if (!sub_D1C38(3u, 4)) {
                  goto LABEL_26;
                }
                int v300 = sub_D1C7C(3u);
                __uint64_t v293 = sub_DDEFC();
                __uint64_t v294 = (const char *)sub_D1CB0(4);
                if (!v300) {
                  goto LABEL_354;
                }
                int v295 = 5339;
                goto LABEL_337;
              }
              sub_AE64C(*(void *)(a1 + 51328), (uint64_t)v346);
              int v176 = sub_AA4FC(a1, v47, v346, 0xFFFFFFFF);
              int v299 = 0;
              goto LABEL_361;
            }
          }
          int v299 = 0;
          int v176 = 0;
        }
        else
        {
          if (sub_A19B8(a1, v47))
          {
            if (!sub_D1C38(3u, 4)) {
              goto LABEL_26;
            }
            int v292 = sub_D1C7C(3u);
            __uint64_t v293 = sub_DDEFC();
            __uint64_t v294 = (const char *)sub_D1CB0(4);
            if (!v292) {
              goto LABEL_354;
            }
            int v295 = 5318;
LABEL_337:
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CollectSlicesSizes failed.\n", v293, 3, v294, "FrameDone", v295, "err == noErr");
            sub_DDEFC();
            sub_D1CB0(4);
LABEL_354:
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CollectSlicesSizes failed.");
            goto LABEL_26;
          }
          sub_AE64C(*(void *)(a1 + 51328), (uint64_t)v346);
          int v176 = sub_AA4FC(a1, v47, v346, v87);
          int v299 = 1;
          if (v290 != v87)
          {
            BOOL v291 = 0;
            uint64_t v38 = a1 + 25784;
            goto LABEL_372;
          }
          BOOL v291 = 1;
          uint64_t v38 = a1 + 25784;
        }
LABEL_361:
        CFNumberRef v301 = *(const void **)(v47 + 336);
        if (v301)
        {
          CFRelease(v301);
          *(void *)(v47 + 336) = 0;
        }
        if (*(_DWORD *)(a1 + 239348) == 1)
        {
          int v333 = v299;
          BOOL v302 = v291;
          uint64_t v303 = *(void *)(v334 + 3992);
          __uint64_t v304 = sub_DDEFC();
          uint64_t v305 = v303;
          BOOL v291 = v302;
          int v299 = v333;
          sub_C0C44(v305, 5u, v304);
        }
        if (v176 && sub_D1C38(0x2Eu, 4))
        {
          BOOL v335 = v291;
          int v306 = sub_D1C7C(0x2Eu);
          __uint64_t v307 = sub_DDEFC();
          long long v308 = (const char *)sub_D1CB0(4);
          if (v306)
          {
            printf("%lld %d AVE %s: H264FrameRec ERROR: SendFrame failed. continue.\n", v307, 46, v308);
            __uint64_t v309 = sub_DDEFC();
            int v327 = (const char *)sub_D1CB0(4);
            uint64_t v38 = a1 + 25784;
            syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: SendFrame failed. continue.", v309, 46, v327);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: SendFrame failed. continue.", v307, 46, v308);
          }
          BOOL v291 = v335;
        }
        sub_1016C(*(void **)(a1 + 51320), (const void *)v47);
LABEL_372:
        if (v299 && !v291 && *v336 != 4)
        {
LABEL_189:
          a4 = v342;
          switch(*(_DWORD *)(v47 + 4))
          {
            case 4:
              LODWORD(v346[0]) = v33;
              int v347 = v339;
              int v177 = sub_AE6BC(*(void *)(v38 + 25552), v346);
              if (v176)
              {
                a2 = v339;
                if (sub_D1C38(3u, 4))
                {
                  int v178 = sub_D1C7C(3u);
                  __uint64_t v179 = sub_DDEFC();
                  CFNumberRef v180 = (const char *)sub_D1CB0(4);
                  if (!v178) {
                    goto LABEL_324;
                  }
                  int v181 = 5660;
                  goto LABEL_235;
                }
              }
              else
              {
                if (!v177) {
                  goto LABEL_242;
                }
                a2 = v339;
                if (sub_D1C38(3u, 4))
                {
                  int v197 = sub_D1C7C(3u);
                  __uint64_t v198 = sub_DDEFC();
                  __uint64_t v199 = (const char *)sub_D1CB0(4);
                  if (!v197) {
                    goto LABEL_348;
                  }
                  int v200 = 5661;
                  goto LABEL_240;
                }
              }
              goto LABEL_26;
            case 5:
              LODWORD(v346[0]) = v33;
              int v347 = v339;
              int v182 = sub_AE6BC(*(void *)(v38 + 25552), v346);
              if (v176)
              {
                a2 = v339;
                if (sub_D1C38(3u, 4))
                {
                  int v183 = sub_D1C7C(3u);
                  __uint64_t v179 = sub_DDEFC();
                  CFNumberRef v180 = (const char *)sub_D1CB0(4);
                  if (!v183) {
                    goto LABEL_324;
                  }
                  int v181 = 5676;
                  goto LABEL_235;
                }
              }
              else
              {
                if (!v182) {
                  goto LABEL_242;
                }
                a2 = v339;
                if (sub_D1C38(3u, 4))
                {
                  int v201 = sub_D1C7C(3u);
                  __uint64_t v198 = sub_DDEFC();
                  __uint64_t v199 = (const char *)sub_D1CB0(4);
                  if (!v201) {
                    goto LABEL_348;
                  }
                  int v200 = 5677;
                  goto LABEL_240;
                }
              }
              goto LABEL_26;
            case 6:
              LODWORD(v346[0]) = v33;
              int v347 = v339;
              int v184 = sub_AE6BC(*(void *)(v38 + 25552), v346);
              if (v176)
              {
                a2 = v339;
                if (sub_D1C38(3u, 4))
                {
                  int v185 = sub_D1C7C(3u);
                  __uint64_t v179 = sub_DDEFC();
                  CFNumberRef v180 = (const char *)sub_D1CB0(4);
                  if (!v185) {
                    goto LABEL_324;
                  }
                  int v181 = 5692;
                  goto LABEL_235;
                }
              }
              else
              {
                if (!v184) {
                  goto LABEL_242;
                }
                a2 = v339;
                if (sub_D1C38(3u, 4))
                {
                  int v202 = sub_D1C7C(3u);
                  __uint64_t v198 = sub_DDEFC();
                  __uint64_t v199 = (const char *)sub_D1CB0(4);
                  if (!v202) {
                    goto LABEL_348;
                  }
                  int v200 = 5693;
                  goto LABEL_240;
                }
              }
              goto LABEL_26;
            case 7:
              goto LABEL_242;
            case 8:
              LODWORD(v346[0]) = v33;
              int v347 = v339;
              if (sub_D1C38(0x2Eu, 7))
              {
                int v186 = sub_D1C7C(0x2Eu);
                __uint64_t v187 = sub_DDEFC();
                __uint64_t v188 = (const char *)sub_D1CB0(7);
                if (v186)
                {
                  printf("%lld %d AVE %s: H264FrameRec: writePacketBlocuint64_t k = %d\n", v187, 46, v188, v33);
                  __uint64_t v189 = sub_DDEFC();
                  unsigned int v320 = (const char *)sub_D1CB0(7);
                  syslog(3, "%lld %d AVE %s: H264FrameRec: writePacketBlocuint64_t k = %d", v189, 46, v320, v33);
                }
                else
                {
                  syslog(3, "%lld %d AVE %s: H264FrameRec: writePacketBlocuint64_t k = %d", v187, 46, v188, v33);
                }
                a4 = v342;
              }
              int v204 = sub_AE6BC(*(void *)(a1 + 51336), v346);
              if (v176)
              {
                a2 = v339;
                if (!sub_D1C38(3u, 4)) {
                  goto LABEL_26;
                }
                int v205 = sub_D1C7C(3u);
                __uint64_t v179 = sub_DDEFC();
                CFNumberRef v180 = (const char *)sub_D1CB0(4);
                if (v205)
                {
                  int v181 = 5644;
                  goto LABEL_235;
                }
                goto LABEL_324;
              }
              if (!v204) {
                goto LABEL_242;
              }
              a2 = v339;
              if (!sub_D1C38(3u, 4)) {
                goto LABEL_26;
              }
              int v206 = sub_D1C7C(3u);
              __uint64_t v198 = sub_DDEFC();
              __uint64_t v199 = (const char *)sub_D1CB0(4);
              if (!v206) {
                goto LABEL_348;
              }
              int v200 = 5645;
              goto LABEL_240;
            case 0xA:
              LODWORD(v346[0]) = v33;
              int v347 = v339;
              int v195 = sub_AE6BC(*(void *)(v38 + 25552), v346);
              if (v176)
              {
                a2 = v339;
                if (sub_D1C38(3u, 4))
                {
                  int v196 = sub_D1C7C(3u);
                  __uint64_t v179 = sub_DDEFC();
                  CFNumberRef v180 = (const char *)sub_D1CB0(4);
                  if (v196)
                  {
                    int v181 = 5708;
LABEL_235:
                    printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: writePacketBlock failed.\n", v179, 3, v180, "FrameDone", v181, "err == noErr");
                    sub_DDEFC();
                    sub_D1CB0(4);
                  }
LABEL_324:
                  syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: writePacketBlock failed.");
                }
              }
              else
              {
                if (!v195)
                {
LABEL_242:
                  a2 = v339;
                  if ((*((unsigned char *)sub_C7604() + 784) & 0x20) == 0) {
                    goto LABEL_26;
                  }
                  unint64_t v207 = *(void *)(a1 + 16 * *(unsigned __int8 *)(v47 + 160) + 241176);
                  if (sub_D1C38(0x2Eu, 8))
                  {
                    int v208 = sub_D1C7C(0x2Eu);
                    __uint64_t v209 = sub_DDEFC();
                    int v210 = (const char *)sub_D1CB0(8);
                    if (v208)
                    {
                      printf("%lld %d AVE %s: \n", v209, 46, v210);
                      __uint64_t v211 = sub_DDEFC();
                      __uint64_t v322 = (const char *)sub_D1CB0(8);
                      syslog(3, "%lld %d AVE %s: ", v211, 46, v322);
                    }
                    else
                    {
                      syslog(3, "%lld %d AVE %s: ", v209, 46, v210);
                    }
                  }
                  unsigned int v341 = v87;
                  double v212 = (double)v207;
                  int v213 = *(_DWORD *)(v47 + 160) - 1;
                  int v337 = v9;
                  if (v213 < 0)
                  {
                    int v214 = 0;
                    LODWORD(v216) = 0;
                    int v223 = 0;
                    *(void *)(v47 + 29368) = 0;
                    double v217 = 0.0;
                  }
                  else
                  {
                    int v214 = *(_DWORD *)(v47 + 160);
                    int v215 = 0;
                    LODWORD(v216) = 0;
                    while (1)
                    {
                      double v217 = (v212 - (double)*(uint64_t *)(a1 + 16 * v213 + 241176))
                           / (double)*(int *)(v47 + 2352);
                      if (sub_D1C38(0x2Eu, 8))
                      {
                        int v218 = sub_D1C7C(0x2Eu);
                        __uint64_t v219 = sub_DDEFC();
                        int v220 = (const char *)sub_D1CB0(8);
                        int v221 = *(_DWORD *)(v47 + 160);
                        if (v218)
                        {
                          printf("%lld %d AVE %s: H264FrameRec: DROP F %d 1/10 -> i %d, bits %d, timePassed %4.3f, framesUsed %d\n", v219, 46, v220, v221, v213, v216, v217, v215);
                          __uint64_t v222 = sub_DDEFC();
                          int v323 = (const char *)sub_D1CB0(8);
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1/10 -> i %d, bits %d, timePassed %4.3f, framesUsed %d", v222, 46, v323, *(_DWORD *)(v47 + 160), v213, v216, v217, v215);
                        }
                        else
                        {
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1/10 -> i %d, bits %d, timePassed %4.3f, framesUsed %d", v219, 46, v220, v221, v213, v216, v217, v215);
                        }
                      }
                      uint64_t v216 = *(int *)(a1 + 16 * v213 + 241168) + (uint64_t)(int)v216;
                      if (v217 >= 0.1) {
                        break;
                      }
                      --v213;
                      ++v215;
                      if (v213 == -1) {
                        goto LABEL_258;
                      }
                    }
                    int v214 = v215 + 1;
LABEL_258:
                    *(void *)(v47 + 29368) = v216;
                    if (v217 == 0.0) {
                      int v223 = 0;
                    }
                    else {
                      int v223 = (int)((double)(int)v216 / v217);
                    }
                  }
                  if (sub_D1C38(0x2Eu, 8))
                  {
                    int v224 = sub_D1C7C(0x2Eu);
                    __uint64_t v225 = sub_DDEFC();
                    uint64_t v226 = (const char *)sub_D1CB0(8);
                    if (v224)
                    {
                      printf("%lld %d AVE %s: H264FrameRec: DROP F %d, 1/10 -> frames %d, bits %d, timepassed %04.3f, -> bitrate %d\n", v225, 46, v226, *(_DWORD *)(v47 + 160), v214, v216, v217, v223);
                      __uint64_t v227 = sub_DDEFC();
                      sub_D1CB0(8);
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d, 1/10 -> frames %d, bits %d, timepassed %04.3f, -> bitrate %d", v227);
                    }
                    else
                    {
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d, 1/10 -> frames %d, bits %d, timepassed %04.3f, -> bitrate %d", v225);
                    }
                  }
                  int v228 = *(_DWORD *)(v47 + 160);
                  int v229 = v228 - 1;
                  if (v228 - 1 < 0)
                  {
                    int v231 = 0;
                    LODWORD(v230) = 0;
                    int v238 = 0;
                    a4 = v342;
                    *(void *)(v343 + 29376) = 0;
                    double v232 = 0.0;
                  }
                  else
                  {
                    LODWORD(v230) = 0;
                    int v231 = 1;
                    a4 = v342;
                    do
                    {
                      double v232 = (v212 - (double)*(uint64_t *)(a1 + 16 * v229 + 241176))
                           / (double)*(int *)(v343 + 2352);
                      uint64_t v230 = *(int *)(a1 + 16 * v229 + 241168) + (uint64_t)(int)v230;
                      if (sub_D1C38(0x2Eu, 8))
                      {
                        int v233 = sub_D1C7C(0x2Eu);
                        __uint64_t v234 = sub_DDEFC();
                        int v235 = (const char *)sub_D1CB0(8);
                        int v236 = *(_DWORD *)(v343 + 160);
                        if (v233)
                        {
                          printf("%lld %d AVE %s: H264FrameRec: DROP F %d 1/2 -> i %d, bits %d, timePassed %4.3f, framesUsed %d\n", v234, 46, v235, v236, v229, v230, v232, v231);
                          __uint64_t v237 = sub_DDEFC();
                          a4 = v342;
                          int v324 = (const char *)sub_D1CB0(8);
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1/2 -> i %d, bits %d, timePassed %4.3f, framesUsed %d", v237, 46, v324, *(_DWORD *)(v343 + 160), v229, v230, v232, v231);
                        }
                        else
                        {
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1/2 -> i %d, bits %d, timePassed %4.3f, framesUsed %d", v234, 46, v235, v236, v229, v230, v232, v231);
                        }
                      }
                      if (v232 >= 0.5) {
                        goto LABEL_274;
                      }
                      --v229;
                      ++v231;
                    }
                    while (v229 != -1);
                    int v231 = v228;
LABEL_274:
                    *(void *)(v343 + 29376) = v230;
                    if (v232 == 0.0) {
                      int v238 = 0;
                    }
                    else {
                      int v238 = (int)((double)(int)v230 / v232);
                    }
                  }
                  if (sub_D1C38(0x2Eu, 8))
                  {
                    int v239 = sub_D1C7C(0x2Eu);
                    __uint64_t v240 = sub_DDEFC();
                    int v241 = (const char *)sub_D1CB0(8);
                    if (v239)
                    {
                      printf("%lld %d AVE %s: H264FrameRec: DROP F %d 1/2 -> frames %d bits %d timepassed %04.3f -> bitrate %d\n", v240, 46, v241, *(_DWORD *)(v343 + 160), v231, v230, v232, v238);
                      __uint64_t v242 = sub_DDEFC();
                      sub_D1CB0(8);
                      a4 = v342;
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1/2 -> frames %d bits %d timepassed %04.3f -> bitrate %d", v242);
                    }
                    else
                    {
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1/2 -> frames %d bits %d timepassed %04.3f -> bitrate %d", v240);
                    }
                  }
                  if (*(_DWORD *)(v343 + 160) - 1 <= 0)
                  {
                    int v244 = 0;
                    LODWORD(v243) = 0;
                    int v255 = 0;
                    *(void *)(v343 + 29384) = 0;
                    double v247 = 0.0;
                  }
                  else
                  {
                    LODWORD(v243) = 0;
                    int v244 = 1;
                    int v340 = *(_DWORD *)(v343 + 160) - 1;
                    int v245 = v340;
                    do
                    {
                      int v246 = (int *)(a1 + 16 * v245 + 241168);
                      double v247 = (v212 - (double)*(uint64_t *)(a1 + 16 * v245 + 241176))
                           / (double)*(int *)(v343 + 2352);
                      uint64_t v243 = *v246 + (uint64_t)(int)v243;
                      if (sub_D1C38(0x2Eu, 8))
                      {
                        int v248 = sub_D1C7C(0x2Eu);
                        __uint64_t v249 = sub_DDEFC();
                        int v250 = (const char *)sub_D1CB0(8);
                        int v251 = *(_DWORD *)(v343 + 160);
                        int v252 = *v246;
                        if (v248)
                        {
                          printf("%lld %d AVE %s: H264FrameRec: DROP F %d 1 -> i %d, bits %d (frame %d), timePassed %4.3f, framesUsed %d\n", v249, 46, v250, v251, v245, v243, v252, v247, v244);
                          __uint64_t v253 = sub_DDEFC();
                          unsigned int v254 = (const char *)sub_D1CB0(8);
                          a4 = v342;
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1 -> i %d, bits %d (frame %d), timePassed %4.3f, framesUsed %d", v253, 46, v254, *(_DWORD *)(v343 + 160), v245, v243, *v246, v247, v244);
                        }
                        else
                        {
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1 -> i %d, bits %d (frame %d), timePassed %4.3f, framesUsed %d", v249, 46, v250, v251, v245, v243, v252, v247, v244);
                        }
                      }
                      if (v247 >= 1.0) {
                        goto LABEL_291;
                      }
                      ++v244;
                      --v245;
                    }
                    while (v245);
                    int v244 = v340;
LABEL_291:
                    *(void *)(v343 + 29384) = v243;
                    if (v247 == 0.0) {
                      int v255 = 0;
                    }
                    else {
                      int v255 = (int)((double)(int)v243 / v247);
                    }
                  }
                  if (sub_D1C38(0x2Eu, 8))
                  {
                    int v256 = sub_D1C7C(0x2Eu);
                    __uint64_t v257 = sub_DDEFC();
                    CFTypeID v258 = (const char *)sub_D1CB0(8);
                    if (v256)
                    {
                      printf("%lld %d AVE %s: H264FrameRec: DROP F %d 1 -> frames %d bits %d timepassed %04.3f -> ###### bitrate %d ######\n", v257, 46, v258, *(_DWORD *)(v343 + 160), v244, v243, v247, v255);
                      __uint64_t v259 = sub_DDEFC();
                      sub_D1CB0(8);
                      a4 = v342;
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1 -> frames %d bits %d timepassed %04.3f -> ###### bitrate %d ######", v259);
                    }
                    else
                    {
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1 -> frames %d bits %d timepassed %04.3f -> ###### bitrate %d ######", v257);
                    }
                  }
                  int v260 = *(_DWORD *)(v343 + 160);
                  int v261 = v260 - 1;
                  if (v260 - 1 < 0)
                  {
                    int v263 = 0;
                    LODWORD(v262) = 0;
                    int v270 = 0;
                    *(void *)(v343 + 29392) = 0;
                    double v264 = 0.0;
                  }
                  else
                  {
                    LODWORD(v262) = 0;
                    int v263 = 1;
                    do
                    {
                      double v264 = (v212 - (double)*(uint64_t *)(a1 + 16 * v261 + 241176))
                           / (double)*(int *)(v343 + 2352);
                      uint64_t v262 = *(int *)(a1 + 16 * v261 + 241168) + (uint64_t)(int)v262;
                      if (sub_D1C38(0x2Eu, 8))
                      {
                        int v265 = sub_D1C7C(0x2Eu);
                        __uint64_t v266 = sub_DDEFC();
                        int v267 = (const char *)sub_D1CB0(8);
                        int v268 = *(_DWORD *)(v343 + 160);
                        if (v265)
                        {
                          printf("%lld %d AVE %s: H264FrameRec: DROP F %d 2 -> i %d, bits %d, timePassed %4.3f, framesUsed %d\n", v266, 46, v267, v268, v261, v262, v264, v263);
                          __uint64_t v269 = sub_DDEFC();
                          a4 = v342;
                          __uint64_t v325 = (const char *)sub_D1CB0(8);
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 2 -> i %d, bits %d, timePassed %4.3f, framesUsed %d", v269, 46, v325, *(_DWORD *)(v343 + 160), v261, v262, v264, v263);
                        }
                        else
                        {
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 2 -> i %d, bits %d, timePassed %4.3f, framesUsed %d", v266, 46, v267, v268, v261, v262, v264, v263);
                        }
                      }
                      if (v264 >= 2.0) {
                        goto LABEL_308;
                      }
                      --v261;
                      ++v263;
                    }
                    while (v261 != -1);
                    int v263 = v260;
LABEL_308:
                    *(void *)(v343 + 29392) = v262;
                    if (v264 == 0.0) {
                      int v270 = 0;
                    }
                    else {
                      int v270 = (int)((double)(int)v262 / v264);
                    }
                  }
                  if (sub_D1C38(0x2Eu, 8))
                  {
                    int v271 = sub_D1C7C(0x2Eu);
                    __uint64_t v272 = sub_DDEFC();
                    __uint64_t v273 = (const char *)sub_D1CB0(8);
                    if (v271)
                    {
                      printf("%lld %d AVE %s: H264FrameRec: DROP F %d 2 -> frames %d bits %d timepassed %04.3f -> bitrate %d\n", v272, 46, v273, *(_DWORD *)(v343 + 160), v263, v262, v264, v270);
                      __uint64_t v274 = sub_DDEFC();
                      sub_D1CB0(8);
                      a4 = v342;
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 2 -> frames %d bits %d timepassed %04.3f -> bitrate %d", v274);
                    }
                    else
                    {
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 2 -> frames %d bits %d timepassed %04.3f -> bitrate %d", v272);
                    }
                  }
                  int v275 = *(_DWORD *)(a1 + 69964);
                  *(unsigned char *)(a1 + 239452) = (*(unsigned char *)(a1 + 69872) & 0x10) != 0;
                  int v276 = *(_DWORD *)(v337 + 7);
                  *(_DWORD *)(a1 + 239444) = v275;
                  *(_DWORD *)(a1 + 239448) = v276;
                  *(_DWORD *)(a1 + 239440) = *((_DWORD *)sub_C7604() + 197) & 0x20;
                  *(unsigned char *)(a1 + 239453) = *(unsigned char *)(a1 + 67552);
                  *(_DWORD *)(a1 + 239456) = v341;
                  int v277 = (const void *)sub_3DA0(*(void *)(a1 + 71552), 5u, *(_DWORD *)(v343 + 16));
                  sub_8E98((const void *)(a1 + 239440), (const void *)v343, v277);
                  memcpy((void *)(a1 + 239464), (const void *)(v343 + 27672), 0x698uLL);
                  *(_OWORD *)(a1 + 241152) = *(_OWORD *)(v343 + 2344);
                  a2 = v339;
                  goto LABEL_26;
                }
                a2 = v339;
                if (sub_D1C38(3u, 4))
                {
                  int v203 = sub_D1C7C(3u);
                  __uint64_t v198 = sub_DDEFC();
                  __uint64_t v199 = (const char *)sub_D1CB0(4);
                  if (v203)
                  {
                    int v200 = 5709;
LABEL_240:
                    printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: Timed Out waiting for space to write packet to main thread\n", v198, 3, v199, "FrameDone", v200, "ret == 0");
                    sub_DDEFC();
                    sub_D1CB0(4);
                  }
LABEL_348:
                  syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: Timed Out waiting for space to write packet to main thread");
                }
              }
              break;
            default:
              if (sub_D1C38(0x2Eu, 4))
              {
                int v190 = sub_D1C7C(0x2Eu);
                __uint64_t v191 = sub_DDEFC();
                CFArrayRef v192 = (const char *)sub_D1CB0(4);
                int v193 = *(_DWORD *)(v47 + 4);
                if (v190)
                {
                  printf("%lld %d AVE %s: H264FrameRec ERROR: OutputDataFromKernel.type NOT RECOGNIZED = %d. cannot process frame\n", v191, 46, v192, v193);
                  __uint64_t v194 = sub_DDEFC();
                  int v321 = (const char *)sub_D1CB0(4);
                  syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: OutputDataFromKernel.type NOT RECOGNIZED = %d. cannot process frame", v194, 46, v321, *(_DWORD *)(v47 + 4));
                }
                else
                {
                  syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: OutputDataFromKernel.type NOT RECOGNIZED = %d. cannot process frame", v191, 46, v192, v193);
                }
              }
              goto LABEL_242;
          }
          goto LABEL_26;
        }
        goto LABEL_173;
      }
      int v89 = sub_AA224(a1, v47);
      sub_1016C(*(void **)(a1 + 51320), (const void *)v47);
      if (v89)
      {
        if (sub_D1C38(3u, 4))
        {
          int v90 = sub_D1C7C(3u);
          __uint64_t v91 = sub_DDEFC();
          int v92 = (const char *)sub_D1CB0(4);
          if (v90)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrameMCTF failed.\n", v91, 3, v92, "FrameDone", 5264, "err == noErr");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrameMCTF failed.");
        }
        goto LABEL_26;
      }
LABEL_172:
      unsigned int v87 = -1;
LABEL_173:
      uint64_t v163 = *(void *)(v38 + 25544);
      pthread_mutex_lock((pthread_mutex_t *)v163);
      do
      {
        int v164 = *(_DWORD *)(v163 + 200);
        if (v164)
        {
          int v169 = *(_DWORD *)(v163 + 204);
          unsigned int v170 = *(_DWORD *)(v163 + 196);
          if (v169 + 1 < v170) {
            int v171 = v169 + 1;
          }
          else {
            int v171 = 0;
          }
          *(_DWORD *)(v163 + 200) = v164 - 1;
          *(_DWORD *)(v163 + 204) = v171;
          if (v164 == v170) {
            pthread_cond_signal((pthread_cond_t *)(v163 + 112));
          }
          pthread_mutex_unlock((pthread_mutex_t *)v163);
          uint64_t v38 = a1 + 25784;
          if (sub_D1C38(0x2Eu, 7))
          {
            int v172 = sub_D1C7C(0x2Eu);
            __uint64_t v173 = sub_DDEFC();
            int v174 = (const char *)sub_D1CB0(7);
            if (v172)
            {
              printf("%lld %d AVE %s: H264FrameRec: readPacketBlocuint64_t k = %d\n", v173, 46, v174, v33);
              __uint64_t v175 = sub_DDEFC();
              unsigned __int16 v319 = (const char *)sub_D1CB0(7);
              uint64_t v38 = a1 + 25784;
              syslog(3, "%lld %d AVE %s: H264FrameRec: readPacketBlocuint64_t k = %d", v175, 46, v319, v33);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: readPacketBlocuint64_t k = %d", v173, 46, v174, v33);
            }
          }
          int v176 = 0;
          goto LABEL_189;
        }
        gettimeofday((timeval *)(v163 + 176), 0);
        uint64_t v165 = (1000 * *(_DWORD *)(v163 + 184));
        *(void *)(v163 + 160) = *(void *)(v163 + 176) + 120;
        *(void *)(v163 + 168) = v165;
      }
      while (pthread_cond_timedwait((pthread_cond_t *)(v163 + 64), (pthread_mutex_t *)v163, (const timespec *)(v163 + 160)) != 60);
      pthread_mutex_unlock((pthread_mutex_t *)v163);
      a2 = v339;
      a4 = v342;
      if (!sub_D1C38(3u, 4)) {
        goto LABEL_26;
      }
      int v166 = sub_D1C7C(3u);
      __uint64_t v167 = sub_DDEFC();
      int v168 = (const char *)sub_D1CB0(4);
      if (v166)
      {
        int v21 = v342;
        uint64_t v22 = 3;
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: readPacketBlock failed. %d\n", v167, 3, v168, "FrameDone", 5620, "err == noErr", -1);
        __uint64_t v23 = sub_DDEFC();
        __int16 v329 = "err == noErr";
        uint64_t v330 = 0xFFFFFFFFLL;
        uint64_t v328 = 5620;
        int v313 = sub_D1CB0(4);
        __uint64_t v25 = "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: readPacketBlock failed. %d";
        goto LABEL_23;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: readPacketBlock failed. %d", v167);
LABEL_26:
      if (sub_D1C38(0x2Eu, 8))
      {
        int v26 = sub_D1C7C(0x2Eu);
        __uint64_t v27 = sub_DDEFC();
        long long v28 = (const char *)sub_D1CB0(8);
        if (v26)
        {
          printf("%lld %d AVE %s: %s Exit %p 0x%x %p %d\n", v27, 46, v28, "FrameDone", (const void *)a1, a2, a3, a4);
          __uint64_t v29 = sub_DDEFC();
          sub_D1CB0(8);
          syslog(3, "%lld %d AVE %s: %s Exit %p 0x%x %p %d", v29, 46);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s Exit %p 0x%x %p %d", v27, 46);
        }
      }
      return;
    case 8:
      if (sub_D1C38(0x2Eu, 7))
      {
        int v66 = sub_D1C7C(0x2Eu);
        __uint64_t v67 = sub_DDEFC();
        CFNumberRef v68 = (const char *)sub_D1CB0(7);
        if (v66)
        {
          printf("%lld %d AVE %s: H264FrameRec: DataType_COMPLETE frame %d counter %d ClientID %d\n", v67, 46, v68, *(_DWORD *)(v47 + 160), v33, *(_DWORD *)(a1 + 239356));
          sub_DDEFC();
          sub_D1CB0(7);
          uint64_t v38 = a1 + 25784;
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_COMPLETE frame %d counter %d ClientID %d");
      }
      goto LABEL_171;
    case 0xA:
      if (sub_D1C38(0x2Eu, 7))
      {
        int v74 = sub_D1C7C(0x2Eu);
        __uint64_t v75 = sub_DDEFC();
        int v76 = (const char *)sub_D1CB0(7);
        int v77 = *(_DWORD *)(v47 + 160);
        if (v74)
        {
          printf("%lld %d AVE %s: H264FrameRec: DataType_RESETMULTIPASS frame %d\n", v75, 46, v76, v77);
          __uint64_t v78 = sub_DDEFC();
          __uint64_t v318 = (const char *)sub_D1CB0(7);
          uint64_t v38 = a1 + 25784;
          syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_RESETMULTIPASS frame %d", v78, 46, v318, *(_DWORD *)(v47 + 160));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_RESETMULTIPASS frame %d", v75, 46, v76, v77);
        }
      }
      if (*v338) {
        sub_D5520((void *)(a1 + 8), *v338, 0);
      }
      *(unsigned char *)uint64_t v38 = 0;
      if (*(void *)(v38 + 25576))
      {
        FigFormatDescriptionRelease();
        *(void *)(v38 + 25576) = 0;
      }
LABEL_171:
      sub_1016C(*(void **)(a1 + 51320), (const void *)v47);
      goto LABEL_172;
    default:
      if (sub_D1C38(0x2Eu, 4))
      {
        int v69 = sub_D1C7C(0x2Eu);
        __uint64_t v70 = sub_DDEFC();
        __uint64_t v71 = (const char *)sub_D1CB0(4);
        int v72 = *(_DWORD *)(v47 + 4);
        if (v69)
        {
          printf("%lld %d AVE %s: H264FrameRec ERROR: OutputDataFromKernel.type NOT RECOGNIZED = %d. cannot process frame\n", v70, 46, v71, v72);
          __uint64_t v73 = sub_DDEFC();
          int v317 = (const char *)sub_D1CB0(4);
          uint64_t v38 = a1 + 25784;
          syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: OutputDataFromKernel.type NOT RECOGNIZED = %d. cannot process frame", v73, 46, v317, *(_DWORD *)(v47 + 4));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: OutputDataFromKernel.type NOT RECOGNIZED = %d. cannot process frame", v70, 46, v71, v72);
        }
      }
      goto LABEL_172;
  }
}

uint64_t sub_9F658(uint64_t a1, uint64_t a2, unsigned int a3, unsigned char *a4)
{
  if (!a2)
  {
    uint64_t result = sub_D1C38(3u, 4);
    if (!result) {
      return result;
    }
    int v15 = sub_D1C7C(3u);
    __uint64_t v16 = sub_DDEFC();
    __uint64_t v17 = (const char *)sub_D1CB0(4);
    if (v15)
    {
      printf("%lld %d AVE %s: %s:%d %s | AVE - removeEPB: input buffer NULL. FAIL\n", v16, 3, v17, "removeEPB", 617, "p_buf_start != __null");
      sub_DDEFC();
      sub_D1CB0(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | AVE - removeEPB: input buffer NULL. FAIL");
    return 0;
  }
  if (a3 <= 2)
  {
    uint64_t result = sub_D1C38(3u, 4);
    if (!result) {
      return result;
    }
    int v18 = sub_D1C7C(3u);
    __uint64_t v19 = sub_DDEFC();
    __uint64_t v20 = (const char *)sub_D1CB0(4);
    if (v18)
    {
      printf("%lld %d AVE %s: %s:%d %s | AVE - removeEPB: lenght < 3. FAIL\n", v19, 3, v20, "removeEPB", 618, "length >= 3");
      sub_DDEFC();
      sub_D1CB0(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | AVE - removeEPB: lenght < 3. FAIL");
    return 0;
  }
  int v4 = (int)a4;
  if (!a4)
  {
    uint64_t result = sub_D1C38(3u, 4);
    if (!result) {
      return result;
    }
    int v21 = sub_D1C7C(3u);
    __uint64_t v22 = sub_DDEFC();
    __uint64_t v23 = (const char *)sub_D1CB0(4);
    if (v21)
    {
      printf("%lld %d AVE %s: %s:%d %s | AVE - removeEPB: output buffer NULL. FAIL\n", v22, 3, v23, "removeEPB", 619, "outbuffer != __null");
      sub_DDEFC();
      sub_D1CB0(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | AVE - removeEPB: output buffer NULL. FAIL");
    return 0;
  }
  uint64_t v6 = 0;
  int v7 = 0;
  int v9 = a4;
  do
  {
    int v10 = *(unsigned __int8 *)(a2 + v6);
    int v7 = v10 | (v7 << 8);
    if ((v7 & 0xFFFFFF) == 3)
    {
      if (sub_D1C38(0x2Eu, 7))
      {
        int v11 = sub_D1C7C(0x2Eu);
        __uint64_t v12 = sub_DDEFC();
        __uint64_t v13 = (const char *)sub_D1CB0(7);
        if (v11)
        {
          printf("%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!\n", v12, 46, v13, v9 - v4, v6);
          __uint64_t v12 = sub_DDEFC();
          __uint64_t v13 = (const char *)sub_D1CB0(7);
        }
        syslog(3, "%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!", v12, 46, v13, v9 - v4, v6);
      }
    }
    else
    {
      *v9++ = v10;
    }
    ++v6;
  }
  while (a3 != v6);
  return (v9 - v4);
}

uint64_t sub_9F994(uint64_t a1, uint64_t a2, unsigned char *a3, unsigned int *a4)
{
  uint64_t v7 = a1 + 71564;
  BOOL v8 = (unsigned char *)(a1 + 68221);
  int v9 = (_DWORD *)(a1 + 51376);
  values = 0;
  CFTypeRef cf = 0;
  int v147 = 0;
  int v10 = *(_DWORD *)(a1 + 68256);
  if (v10 == 1)
  {
    size_t v18 = *a4 - 4;
    if (sub_D1C38(0x2Eu, 7))
    {
      int v19 = sub_D1C7C(0x2Eu);
      __uint64_t v20 = sub_DDEFC();
      int v21 = (const char *)sub_D1CB0(7);
      unsigned int v22 = *a4;
      if (v19)
      {
        printf("%lld %d AVE %s: H264FrameRec: VPSLengthNoStartCode %d (%d)\n", v20, 46, v21, v18, v22);
        __uint64_t v23 = sub_DDEFC();
        char v24 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: VPSLengthNoStartCode %d (%d)", v23, 46, v24, v18, *a4);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: VPSLengthNoStartCode %d (%d)", v20, 46, v21, v18, v22);
      }
    }
    uint64_t v145 = v9;
    size_t v46 = a4[1] - 4;
    if (sub_D1C38(0x2Eu, 7))
    {
      int v47 = sub_D1C7C(0x2Eu);
      __uint64_t v48 = sub_DDEFC();
      __uint64_t v49 = (const char *)sub_D1CB0(7);
      unsigned int v50 = a4[1];
      if (v47)
      {
        printf("%lld %d AVE %s: H264FrameRec: SPSLengthNoStartCode %d (%d)\n", v48, 46, v49, v46, v50);
        __uint64_t v51 = sub_DDEFC();
        __uint64_t v52 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: SPSLengthNoStartCode %d (%d)", v51, 46, v52, v46, a4[1]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: SPSLengthNoStartCode %d (%d)", v48, 46, v49, v46, v50);
      }
    }
    uint64_t v142 = v7;
    int v144 = v8;
    uint64_t v140 = a1;
    long long v152 = 0u;
    long long v153 = 0u;
    long long v150 = 0u;
    long long v151 = 0u;
    size_t v137 = v46;
    size_t __n = v18;
    CFIndex v72 = v18 + v46 + 36;
    if ((int)v145[4043] >= 1)
    {
      uint64_t v73 = 0;
      int v74 = a4 + 2;
      do
      {
        uint64_t v75 = v74[v73] - 4;
        *((void *)&v150 + v73) = v75;
        if (sub_D1C38(0x2Eu, 7))
        {
          int v76 = sub_D1C7C(0x2Eu);
          __uint64_t v77 = sub_DDEFC();
          __uint64_t v78 = (const char *)sub_D1CB0(7);
          unsigned int v79 = v74[v73];
          if (v76)
          {
            printf("%lld %d AVE %s: H264FrameRec: PPSLengthNoStartCode0[%d] %d (%d)\n", v77, 46, v78, v73, v75, v79);
            __uint64_t v77 = sub_DDEFC();
            __uint64_t v78 = (const char *)sub_D1CB0(7);
            unsigned int v79 = v74[v73];
          }
          syslog(3, "%lld %d AVE %s: H264FrameRec: PPSLengthNoStartCode0[%d] %d (%d)", v77, 46, v78, v73, v75, v79);
        }
        v72 += v75 + 2;
        ++v73;
      }
      while (v73 < (int)v145[4043]);
    }
    if (*v144)
    {
      if (malloc_type_malloc(0x11uLL, 0x11244186uLL)) {
        sub_50EA0();
      }
      if (sub_D1C38(3u, 4))
      {
        int v80 = sub_D1C7C(3u);
        __uint64_t v81 = sub_DDEFC();
        uint64_t v82 = (const char *)sub_D1CB0(4);
        if (v80)
        {
          printf("%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec allocate SEI Data Buffer.\n", v81, 3, v82, "CreatevideoFormatDesc", 976, "SEI_Data != __null");
          __uint64_t v83 = sub_DDEFC();
          int v133 = (const char *)sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec allocate SEI Data Buffer.", v83, 3, v133, "CreatevideoFormatDesc", 976, "SEI_Data != __null");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec allocate SEI Data Buffer.", v81, 3, v82, "CreatevideoFormatDesc", 976, "SEI_Data != __null");
        }
      }
    }
    else
    {
      if (sub_D1C38(0x2Eu, 7))
      {
        int v86 = sub_D1C7C(0x2Eu);
        __uint64_t v87 = sub_DDEFC();
        int v88 = (const char *)sub_D1CB0(7);
        if (v86)
        {
          printf("%lld %d AVE %s: H264FrameRec: hevccSize %d\n", v87, 46, v88, v72);
          __uint64_t v89 = sub_DDEFC();
          __uint64_t v134 = (const char *)sub_D1CB0(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: hevccSize %d", v89, 46, v134, v72);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: hevccSize %d", v87, 46, v88, v72);
        }
      }
      CFMutableDataRef Mutable = CFDataCreateMutable(kCFAllocatorDefault, v72);
      CFTypeRef cf = Mutable;
      if (Mutable)
      {
        __uint64_t v91 = Mutable;
        CFDataSetLength(Mutable, v72);
        MutableBytePtr = CFDataGetMutableBytePtr(v91);
        unsigned int v93 = malloc_type_malloc(0x22uLL, 0x99A3ADE8uLL);
        if (v93)
        {
          uint32x2_t v84 = v93;
          sub_9F658((uint64_t)v93, (uint64_t)a3, 0x22u, v93);
          uint64_t v94 = 0;
          UInt8 *MutableBytePtr = 1;
          MutableBytePtr[1] = v84[10];
          do
          {
            UInt8 v95 = v84[v94 + 11];
            MutableBytePtr[v94 + 2] = v95;
            *(unsigned char *)(v140 + 239320 + v94++) = v95;
          }
          while (v94 != 4);
          for (uint64_t i = 0; i != 6; ++i)
          {
            UInt8 v97 = v84[i + 15];
            MutableBytePtr[i + 6] = v97;
            *(unsigned char *)(v140 + 239324 + i) = v97;
          }
          MutableBytePtr[12] = v84[21];
          *(_WORD *)(MutableBytePtr + 13) = 240;
          MutableBytePtr[15] = -4;
          MutableBytePtr[16] = *(unsigned char *)(v140 + 158996) | 0xFC;
          MutableBytePtr[17] = *(unsigned char *)(v140 + 159040) | 0xF8;
          MutableBytePtr[18] = *(unsigned char *)(v140 + 159044) | 0xF8;
          *(_WORD *)(MutableBytePtr + 19) = 0;
          MutableBytePtr[21] = 11;
          if (*v144) {
            char v98 = 4;
          }
          else {
            char v98 = 3;
          }
          MutableBytePtr[22] = v98;
          MutableBytePtr[23] = -96;
          *((_WORD *)MutableBytePtr + 12) = 256;
          *((_WORD *)MutableBytePtr + 13) = bswap32(__n) >> 16;
          memcpy(MutableBytePtr + 28, a3 + 4, __n);
          uint64_t v99 = &MutableBytePtr[__n];
          v99[28] = -95;
          *(_WORD *)(v99 + 29) = 256;
          *(_WORD *)(v99 + 31) = bswap32(v137) >> 16;
          memcpy(&MutableBytePtr[__n + 33], &a3[*a4 + 4], v137);
          uint64_t v100 = *a4;
          uint64_t v101 = &MutableBytePtr[__n + 33 + v137];
          *uint64_t v101 = -94;
          signed int v102 = v145[4043];
          *(_WORD *)(v101 + 1) = bswap32(v102) >> 16;
          uint64_t v103 = __n + 33 + v137 + 3;
          if (v102 >= 1)
          {
            uint64_t v104 = 0;
            __uint64_t v105 = &a3[v100 + 4];
            do
            {
              size_t v106 = *((void *)&v150 + v104);
              *(_WORD *)&MutableBytePtr[v103] = bswap32(v106) >> 16;
              uint64_t v107 = v103 + 2;
              uint64_t v108 = v104 + 1;
              v105 += a4[v104 + 1];
              memcpy(&MutableBytePtr[v103 + 2], v105, v106);
              uint64_t v103 = v106 + v107;
              uint64_t v104 = v108;
            }
            while (v108 < (int)v145[4043]);
          }
          if (*v144)
          {
            __uint64_t v109 = &MutableBytePtr[v103];
            *__uint64_t v109 = -89;
            *(_WORD *)(v109 + 1) = 256;
            uint64_t v110 = v147 - 4;
            *(_WORD *)(v109 + 3) = bswap32(v110) >> 16;
            memcpy(v109 + 5, &dword_4, v110);
          }
          keys = @"hvcC";
          CFDictionaryRef v59 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&keys, &cf, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          int v60 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          CFDictionaryAddValue(v60, kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms, v59);
          CFDictionaryAddValue(v60, kCMFormatDescriptionExtension_FormatName, @"HEVC");
          uint64_t v111 = v140 + 158996;
          uint64_t v112 = *(int *)(v140 + 158996);
          if (v112 >= 4)
          {
            uint64_t v68 = 3758097084;
            if (sub_D1C38(3u, 4))
            {
              int v126 = sub_D1C7C(3u);
              __uint64_t v127 = sub_DDEFC();
              __uint64_t v128 = (const char *)sub_D1CB0(4);
              if (v126)
              {
                printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreatevideoFormatDesc chroma_format_idc (%d) not supported.\n", v127, 3, v128, "CreatevideoFormatDesc", 1197, "false", *(_DWORD *)(v142 + 36));
                __uint64_t v127 = sub_DDEFC();
                sub_D1CB0(4);
              }
              syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreatevideoFormatDesc chroma_format_idc (%d) not supported.", v127);
            }
          }
          else
          {
            int v113 = *v145 + *(_DWORD *)(v140 + 159028) * dword_143770[v112];
            int v114 = v145[1] + *(_DWORD *)(v140 + 159036) * dword_143780[v112];
            if (sub_D1C38(0x2Eu, 7))
            {
              int v115 = sub_D1C7C(0x2Eu);
              __uint64_t v116 = sub_DDEFC();
              int v117 = (const char *)sub_D1CB0(7);
              if (v115)
              {
                printf("%lld %d AVE %s: H264FrameRec: for FIG coded: %d - %d, passed %d - %d, crop %d - %d\n", v116, 46, v117, *v145, v145[1], v113, v114, *(_DWORD *)(v140 + 159028), *(_DWORD *)(v140 + 159036));
                __uint64_t v118 = sub_DDEFC();
                sub_D1CB0(7);
                uint64_t v111 = v140 + 158996;
                syslog(3, "%lld %d AVE %s: H264FrameRec: for FIG coded: %d - %d, passed %d - %d, crop %d - %d", v118, 46);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: H264FrameRec: for FIG coded: %d - %d, passed %d - %d, crop %d - %d", v116, 46);
              }
            }
            if (*(_DWORD *)(v111 + 6668)) {
              CFDictionarySetValue(v60, kCMFormatDescriptionExtension_FullRangeVideo, kCFBooleanTrue);
            }
            if (v144[124]) {
              uint64_t VideoFormatDescription = VTTileEncoderSessionCreateVideoFormatDescription();
            }
            else {
              uint64_t VideoFormatDescription = VTEncoderSessionCreateVideoFormatDescription();
            }
            uint64_t v68 = VideoFormatDescription;
          }
          goto LABEL_100;
        }
        if (sub_D1C38(3u, 4))
        {
          int v122 = sub_D1C7C(3u);
          __uint64_t v123 = sub_DDEFC();
          int v124 = (const char *)sub_D1CB0(4);
          if (v122)
          {
            printf("%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec allocate PS EPB Data Buffer.\n", v123, 3, v124, "CreatevideoFormatDesc", 1003, "EPB_PSData != __null");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec allocate PS EPB Data Buffer.");
        }
      }
      else if (sub_D1C38(3u, 4))
      {
        int v119 = sub_D1C7C(3u);
        __uint64_t v120 = sub_DDEFC();
        __uint64_t v121 = (const char *)sub_D1CB0(4);
        if (v119)
        {
          printf("%lld %d AVE %s: %s:%d %s | failed to call CFDataCreateMutable %ld\n", v120, 3, v121, "CreatevideoFormatDesc", 993, "hevccData != __null", v72);
          __uint64_t v120 = sub_DDEFC();
          CFIndex v136 = v72;
          CFDataRef v135 = sub_D1CB0(4);
        }
        else
        {
          CFIndex v136 = v72;
          CFDataRef v135 = (void *)v121;
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to call CFDataCreateMutable %ld", v120, 3, v135, "CreatevideoFormatDesc", 993, "hevccData != __null", v136);
      }
    }
    uint64_t v68 = 4294954384;
    uint32x2_t v84 = 0;
    goto LABEL_113;
  }
  if (!v10)
  {
    size_t v11 = a4[1] - 4;
    if (sub_D1C38(0x2Eu, 7))
    {
      int v12 = sub_D1C7C(0x2Eu);
      __uint64_t v13 = sub_DDEFC();
      int v14 = (const char *)sub_D1CB0(7);
      unsigned int v15 = a4[1];
      if (v12)
      {
        printf("%lld %d AVE %s: H264FrameRec: SPSLengthNoStartCode %d (%d)\n", v13, 46, v14, v11, v15);
        __uint64_t v16 = sub_DDEFC();
        __uint64_t v17 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: SPSLengthNoStartCode %d (%d)", v16, 46, v17, v11, a4[1]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: SPSLengthNoStartCode %d (%d)", v13, 46, v14, v11, v15);
      }
    }
    uint64_t v141 = v7;
    CFAllocatorRef allocator = (CFAllocatorRef)a4;
    __uint64_t v143 = v8;
    long long v152 = 0u;
    long long v153 = 0u;
    long long v150 = 0u;
    long long v151 = 0u;
    size_t v29 = v11 + 9;
    CFIndex v30 = v11 + 9;
    if ((int)v9[4043] >= 1)
    {
      uint64_t v31 = 0;
      int v32 = (char *)allocator + 8;
      CFIndex v30 = v11 + 9;
      do
      {
        uint64_t v33 = (*(_DWORD *)&v32[4 * v31] - 4);
        *((void *)&v150 + v31) = v33;
        if (sub_D1C38(0x2Eu, 7))
        {
          int v34 = v9;
          int v35 = sub_D1C7C(0x2Eu);
          __uint64_t v36 = sub_DDEFC();
          __uint64_t v37 = (const char *)sub_D1CB0(7);
          int v38 = *(_DWORD *)&v32[4 * v31];
          if (v35)
          {
            printf("%lld %d AVE %s: H264FrameRec: PPSLengthNoStartCode0[%d] %d (%d)\n", v36, 46, v37, v31, v33, v38);
            __uint64_t v39 = sub_DDEFC();
            __uint64_t v40 = (const char *)sub_D1CB0(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: PPSLengthNoStartCode0[%d] %d (%d)", v39, 46, v40, v31, v33, *(_DWORD *)&v32[4 * v31]);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: PPSLengthNoStartCode0[%d] %d (%d)", v36, 46, v37, v31, v33, v38);
          }
          int v9 = v34;
        }
        v30 += v33 + 2;
        ++v31;
      }
      while (v31 < (int)v9[4043]);
    }
    if (*(_DWORD *)v141 == 100 || *(_DWORD *)v141 == 122) {
      v30 += 4;
    }
    size_t v41 = v11;
    if (sub_D1C38(0x2Eu, 7))
    {
      int v42 = sub_D1C7C(0x2Eu);
      __uint64_t v43 = sub_DDEFC();
      __uint64_t v44 = (const char *)sub_D1CB0(7);
      if (v42)
      {
        printf("%lld %d AVE %s: H264FrameRec: avccSize %d\n", v43, 46, v44, v30);
        __uint64_t v45 = sub_DDEFC();
        __uint64_t v132 = (const char *)sub_D1CB0(7);
        size_t v41 = v11;
        syslog(3, "%lld %d AVE %s: H264FrameRec: avccSize %d", v45, 46, v132, v30);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: avccSize %d", v43, 46, v44, v30);
      }
    }
    values = CFDataCreateMutable(kCFAllocatorDefault, v30);
    CFDataSetLength((CFMutableDataRef)values, v30);
    uint32x2_t v53 = CFDataGetMutableBytePtr((CFMutableDataRef)values);
    *uint32x2_t v53 = 1;
    v53[1] = a3[5];
    v53[2] = a3[6];
    v53[3] = a3[7];
    *((_WORD *)v53 + 2) = -7681;
    *((_WORD *)v53 + 3) = bswap32(v41) >> 16;
    __uint64_t v54 = a3 + 4;
    memcpy(v53 + 8, a3 + 4, v41);
    v53[v41 + 8] = v9[4043];
    if ((int)v9[4043] >= 1)
    {
      uint64_t v55 = 0;
      do
      {
        size_t v56 = *((void *)&v150 + v55);
        *(_WORD *)&v53[v29] = bswap32(v56) >> 16;
        uint64_t v57 = v55 + 1;
        v54 += *((unsigned int *)allocator + v55 + 1);
        memcpy(&v53[v29 + 2], v54, v56);
        v29 += v56 + 2;
        uint64_t v55 = v57;
      }
      while (v57 < (int)v9[4043]);
    }
    if (*(_DWORD *)v141 == 100 || *(_DWORD *)v141 == 122)
    {
      int v58 = &v53[v29];
      UInt8 *v58 = *(unsigned char *)(v141 + 36) | 0xFC;
      v58[1] = *(unsigned char *)(v141 + 44) | 0xF8;
      v58[2] = *(unsigned char *)(v141 + 48) | 0xF8;
      v58[3] = 0;
    }
    keys = @"avcC";
    CFDictionaryRef v59 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&keys, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    int v60 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionaryAddValue(v60, kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms, v59);
    CFDictionaryAddValue(v60, kCMFormatDescriptionExtension_FormatName, @"H.264");
    uint64_t v61 = *(int *)(v141 + 36);
    if (v61 >= 4)
    {
      uint64_t v68 = 3758097084;
      if (sub_D1C38(3u, 4))
      {
        int v69 = sub_D1C7C(3u);
        __uint64_t v70 = sub_DDEFC();
        __uint64_t v71 = (const char *)sub_D1CB0(4);
        if (v69)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreatevideoFormatDesc chroma_format_idc (%d) not supported.\n", v70, 3, v71, "CreatevideoFormatDesc", 856, "false", *(_DWORD *)(v141 + 36));
          __uint64_t v70 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreatevideoFormatDesc chroma_format_idc (%d) not supported.", v70);
      }
    }
    else
    {
      int v62 = *v9 + *(_DWORD *)(v141 + 1184) * dword_143770[v61];
      int v63 = v9[1] + *(_DWORD *)(v141 + 1192) * dword_143780[v61];
      if (sub_D1C38(0x2Eu, 7))
      {
        int v64 = sub_D1C7C(0x2Eu);
        __uint64_t v65 = sub_DDEFC();
        int v66 = (const char *)sub_D1CB0(7);
        if (v64)
        {
          printf("%lld %d AVE %s: H264FrameRec: for FIG coded: %d - %d, passed %d - %d, crop %d - %d\n", v65, 46, v66, *v9, v9[1], v62, v63, *(_DWORD *)(v141 + 1184), *(_DWORD *)(v141 + 1192));
          __uint64_t v67 = sub_DDEFC();
          sub_D1CB0(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: for FIG coded: %d - %d, passed %d - %d, crop %d - %d", v67, 46);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: for FIG coded: %d - %d, passed %d - %d, crop %d - %d", v65, 46);
        }
      }
      if (*(_DWORD *)(v141 + 1096)) {
        CFDictionarySetValue(v60, kCMFormatDescriptionExtension_FullRangeVideo, kCFBooleanTrue);
      }
      if (v143[124]) {
        uint64_t v125 = VTTileEncoderSessionCreateVideoFormatDescription();
      }
      else {
        uint64_t v125 = VTEncoderSessionCreateVideoFormatDescription();
      }
      uint64_t v68 = v125;
    }
    uint32x2_t v84 = 0;
LABEL_100:
    if (v60) {
      CFRelease(v60);
    }
    if (v59) {
      CFRelease(v59);
    }
    goto LABEL_113;
  }
  if (sub_D1C38(3u, 4))
  {
    int v25 = sub_D1C7C(3u);
    __uint64_t v26 = sub_DDEFC();
    __uint64_t v27 = (const char *)sub_D1CB0(4);
    if (v25)
    {
      printf("%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec Type not recognized.\n", v26, 3, v27, "CreatevideoFormatDesc", 1248, "false");
      __uint64_t v28 = sub_DDEFC();
      __uint64_t v131 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec Type not recognized.", v28, 3, v131, "CreatevideoFormatDesc", 1248, "false");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec Type not recognized.", v26, 3, v27, "CreatevideoFormatDesc", 1248, "false");
    }
  }
  uint32x2_t v84 = 0;
  uint64_t v68 = 4294954384;
LABEL_113:
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (values)
  {
    CFRelease(values);
    values = 0;
  }
  if (v84) {
    free(v84);
  }
  return v68;
}

uint64_t sub_A0CC0(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a1 + 67932;
  unsigned int v51 = 0;
  CFMutableDictionaryRef theDict = 0;
  if (*(unsigned char *)(a1 + 68221))
  {
    if (malloc_type_malloc(0x11uLL, 0xC8E11BDFuLL)) {
      sub_50EA0();
    }
    if (sub_D1C38(0x2Eu, 4))
    {
      int v12 = sub_D1C7C(0x2Eu);
      __uint64_t v13 = sub_DDEFC();
      int v14 = (const char *)sub_D1CB0(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed to allocate SEI memory %d\n", v13, 46, v14, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", 1311, "pSEIData != __null", 17);
        __uint64_t v13 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to allocate SEI memory %d", v13, 46);
    }
    goto LABEL_50;
  }
  if (*(_DWORD *)v8 >= 2u)
  {
    uint64_t MVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults = VTEncoderSessionCreateMVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults();
    if (sub_D1C38(0x2Eu, 4))
    {
      int v25 = sub_D1C7C(0x2Eu);
      __uint64_t v26 = sub_DDEFC();
      __uint64_t v27 = (const char *)sub_D1CB0(4);
      if (v25)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed VTEncoderSessionCreateMVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults %d\n", v26, 46, v27, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", 1324, "pSEI3D != __null", MVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults);
        __uint64_t v26 = sub_DDEFC();
        uint64_t v46 = MVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults;
        size_t v41 = sub_D1CB0(4);
      }
      else
      {
        uint64_t v46 = MVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults;
        size_t v41 = (void *)v27;
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed VTEncoderSessionCreateMVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults %d", v26, 46, v41, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", 1324, "pSEI3D != __null", v46);
    }
    goto LABEL_50;
  }
  if (!*(_DWORD *)(a5 + 172))
  {
    sub_DBB18(a3, a4, 1, 2, (int *)v49);
    if (sub_D1C38(0x2Eu, 4))
    {
      int v31 = sub_D1C7C(0x2Eu);
      __uint64_t v32 = sub_DDEFC();
      uint64_t v33 = (const char *)sub_D1CB0(4);
      if (v31)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed to parse PS %p %d\n", v32, 46, v33, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", 1335, "pSEIData != __null", a3, a4);
        __uint64_t v34 = sub_DDEFC();
        int v42 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to parse PS %p %d", v34, 46, v42);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to parse PS %p %d", v32, 46, v33);
      }
    }
    goto LABEL_50;
  }
  long long v10 = *(_OWORD *)(a5 + 220);
  _OWORD v49[2] = *(_OWORD *)(a5 + 204);
  v49[3] = v10;
  v49[4] = *(_OWORD *)(a5 + 236);
  int v50 = *(_DWORD *)(a5 + 252);
  long long v11 = *(_OWORD *)(a5 + 188);
  v49[0] = *(_OWORD *)(a5 + 172);
  v49[1] = v11;
  sub_D8E94(0, a3, (unsigned int *)v49, 0, v51, 0, 0, (const void *)(a1 + 158424), &theDict);
  if (!theDict)
  {
    if (sub_D1C38(0x2Eu, 4))
    {
      int v21 = sub_D1C7C(0x2Eu);
      __uint64_t v22 = sub_DDEFC();
      __uint64_t v23 = (const char *)sub_D1CB0(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed to make hvcC dictionary %p %d\n", v22, 46, v23, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", 1347, "pCFDict != __null", a3, a4);
        __uint64_t v22 = sub_DDEFC();
        __uint64_t v45 = a3;
        uint64_t v47 = a4;
        uint64_t v44 = 1347;
        __uint64_t v40 = sub_D1CB0(4);
      }
      else
      {
        __uint64_t v45 = a3;
        uint64_t v47 = a4;
        uint64_t v44 = 1347;
        __uint64_t v40 = (void *)v23;
      }
      char v24 = "%lld %d AVE %s: %s::%s:%d %s | failed to make hvcC dictionary %p %d";
      goto LABEL_46;
    }
LABEL_50:
    uint64_t v15 = 4294966293;
    goto LABEL_51;
  }
  uint64_t v15 = sub_D9A2C(1, a3, (unsigned int *)v49, (const void *)(a1 + 158424), theDict);
  if (!theDict)
  {
    if (sub_D1C38(0x2Eu, 4))
    {
      int v28 = sub_D1C7C(0x2Eu);
      __uint64_t v22 = sub_DDEFC();
      size_t v29 = (const char *)sub_D1CB0(4);
      if (v28)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed to add lhvC dictionary %p %d\n", v22, 46, v29, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", 1353, "pCFDict != __null", a3, a4);
        __uint64_t v22 = sub_DDEFC();
        __uint64_t v45 = a3;
        uint64_t v47 = a4;
        uint64_t v44 = 1353;
        __uint64_t v40 = sub_D1CB0(4);
      }
      else
      {
        __uint64_t v45 = a3;
        uint64_t v47 = a4;
        uint64_t v44 = 1353;
        __uint64_t v40 = (void *)v29;
      }
      char v24 = "%lld %d AVE %s: %s::%s:%d %s | failed to add lhvC dictionary %p %d";
LABEL_46:
      syslog(3, v24, v22, 46, v40, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", v44, "pCFDict != __null", v45, v47);
      goto LABEL_50;
    }
    goto LABEL_50;
  }
  if (*(_DWORD *)(a1 + 165664)) {
    CFDictionarySetValue(theDict, kCMFormatDescriptionExtension_FullRangeVideo, kCFBooleanTrue);
  }
  int v16 = *(_DWORD *)(a1 + 51376);
  uint64_t v17 = *(int *)(a1 + 158996);
  if ((int)v17 > 3)
  {
    int v19 = 0;
  }
  else
  {
    size_t v18 = (int *)((char *)&unk_154418 + 8 * v17);
    int v20 = *v18;
    int v19 = v18[1];
    v16 -= v20 * *(_DWORD *)(a1 + 159028);
  }
  int v30 = *(_DWORD *)(a1 + 51380) - *(_DWORD *)(a1 + 159036) * v19;
  if (*(unsigned char *)(v8 + 413))
  {
    if (!VTTileEncoderSessionCreateVideoFormatDescription()) {
      goto LABEL_51;
    }
  }
  else if (!VTEncoderSessionCreateVideoFormatDescription())
  {
    goto LABEL_51;
  }
  if (sub_D1C38(0x2Eu, 4))
  {
    int v35 = sub_D1C7C(0x2Eu);
    __uint64_t v36 = sub_DDEFC();
    __uint64_t v37 = (const char *)sub_D1CB0(4);
    if (v35)
    {
      printf("%lld %d AVE %s: %s::%s:%d %s | failed to create format descriptor %d %d %p\n", v36, 46, v37, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", 1390, "res == noErr", v16, v30, theDict);
      __uint64_t v38 = sub_DDEFC();
      __uint64_t v43 = sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create format descriptor %d %d %p", v38, 46, v43);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create format descriptor %d %d %p", v36, 46, v37);
    }
  }
  uint64_t v15 = 4294966296;
LABEL_51:
  if (theDict)
  {
    CFRelease(theDict);
    CFMutableDictionaryRef theDict = 0;
  }
  return v15;
}

uint64_t sub_A1574(uint64_t a1, uint64_t a2, int a3)
{
  if (a2)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 916);
    if (v4 >= 0x1F)
    {
      uint64_t v11 = 3758097084;
      if (sub_D1C38(3u, 4))
      {
        int v15 = sub_D1C7C(3u);
        __uint64_t v16 = sub_DDEFC();
        uint64_t v17 = (const char *)sub_D1CB0(4);
        if (v15)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: DoneWithThisFrameFromTheHW Frame->PlaneNumber = %d\n", v16, 3, v17, "DoneWithThisFrameFromTheHW", 1424, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(_DWORD *)(a2 + 916));
          __uint64_t v16 = sub_DDEFC();
          uint64_t v17 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: DoneWithThisFrameFromTheHW Frame->PlaneNumber = %d", v16, 3, v17, "DoneWithThisFrameFromTheHW", 1424, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(unsigned int *)(a2 + 916));
      }
    }
    else
    {
      uint64_t v6 = *(void *)(a1 + 8 * v4 + 27072);
      if (v6)
      {
        if (sub_D1C38(0x2Eu, 7))
        {
          int v8 = sub_D1C7C(0x2Eu);
          __uint64_t v9 = sub_DDEFC();
          long long v10 = (const char *)sub_D1CB0(7);
          if (v8)
          {
            printf("%lld %d AVE %s: %s:%d H264FrameRec: DoneWithThis PlaneNumber %d size %d\n", v9, 46, v10, "DoneWithThisFrameFromTheHW", 1430, *(_DWORD *)(a2 + 916), *(_DWORD *)(v6 + 384));
            __uint64_t v9 = sub_DDEFC();
            sub_D1CB0(7);
          }
          syslog(3, "%lld %d AVE %s: %s:%d H264FrameRec: DoneWithThis PlaneNumber %d size %d", v9);
        }
        sub_61C0(*(void **)(a1 + 71552), *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 160), (float *)(v6 + 182920));
        sub_6514(*(void **)(a1 + 71552), *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 160), (double *)(a2 + 67288));
        __uint64_t v22 = (FILE *)sub_3DA0(*(void *)(a1 + 71552), 7u, *(_DWORD *)(a2 + 12));
        sub_CD13C((const void *)(v6 + 181488), v22, *(_DWORD *)(a2 + 160));
        __uint64_t v23 = (const void *)sub_3DA0(*(void *)(a1 + 71552), 6u, *(_DWORD *)(a2 + 12));
        sub_CC848((const void *)(v6 + 143600), (const void *)(a2 + 27568), v23, *(_DWORD *)(a2 + 160), a3);
        sub_5E78(*(void **)(a1 + 71552), *(_DWORD *)(a2 + 12), (int *)(v6 + 181640));
        bzero((void *)v6, 0x2CAB8uLL);
      }
      else if (sub_D1C38(3u, 4))
      {
        uint64_t v11 = sub_D1C7C(3u);
        __uint64_t v18 = sub_DDEFC();
        int v19 = (const char *)sub_D1CB0(4);
        if (!v11)
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader == NULL");
          return v11;
        }
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader == NULL\n", v18, 3, v19, "DoneWithThisFrameFromTheHW", 1428, "codedHeader != __null");
        __uint64_t v20 = sub_DDEFC();
        int v21 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader == NULL", v20, 3, v21, "DoneWithThisFrameFromTheHW", 1428, "codedHeader != __null");
      }
      return 0;
    }
  }
  else
  {
    uint64_t v11 = 3758097084;
    if (sub_D1C38(3u, 4))
    {
      int v12 = sub_D1C7C(3u);
      __uint64_t v13 = sub_DDEFC();
      int v14 = (const char *)sub_D1CB0(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: DoneWithThisFrameFromTheHW Frame == NULL\n", v13, 3, v14, "DoneWithThisFrameFromTheHW", 1423, "Frame != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: DoneWithThisFrameFromTheHW Frame == NULL");
    }
  }
  return v11;
}

uint64_t sub_A19B8(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v17 = 3758097084;
    if (sub_D1C38(3u, 4))
    {
      int v18 = sub_D1C7C(3u);
      __uint64_t v19 = sub_DDEFC();
      __uint64_t v20 = (const char *)sub_D1CB0(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CollectSlicesSizes Frame == NULL ???\n", v19, 3, v20, "CollectSlicesSizes", 1456, "Frame != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CollectSlicesSizes Frame == NULL ???");
    }
    return v17;
  }
  if (*(_DWORD *)(a2 + 916) > 0x1Eu)
  {
    uint64_t v17 = 3758097084;
    if (!sub_D1C38(3u, 4)) {
      return v17;
    }
    int v21 = sub_D1C7C(3u);
    __uint64_t v22 = sub_DDEFC();
    __uint64_t v23 = (const char *)sub_D1CB0(4);
    if (v21)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CollectSlicesSizes Frame->PlaneNumber = %d\n", v22, 3, v23, "CollectSlicesSizes", 1457, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(_DWORD *)(a2 + 916));
      __uint64_t v22 = sub_DDEFC();
      __uint64_t v23 = (const char *)sub_D1CB0(4);
      int v122 = "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))";
      uint64_t v123 = *(unsigned int *)(a2 + 916);
      uint64_t v121 = 1457;
    }
    else
    {
      uint64_t v123 = *(unsigned int *)(a2 + 916);
      uint64_t v121 = 1457;
      int v122 = "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))";
    }
    int v119 = v23;
    char v24 = "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CollectSlicesSizes Frame->PlaneNumber = %d";
LABEL_79:
    syslog(3, v24, v22, 3, v119, "CollectSlicesSizes", v121, v122, v123);
    return v17;
  }
  uint64_t v4 = 0;
  mach_port_name_t v5 = (_DWORD *)(a1 + 239348);
  int v126 = (unsigned char *)(a1 + 67552);
  uint64_t v129 = a1 + 51072;
  uint64_t v6 = (_DWORD *)(a1 + 28032);
  do
  {
    uint64_t v7 = 0;
    int v8 = v6;
    do
    {
      uint64_t v9 = 3;
      long long v10 = v8;
      do
      {
        *long long v10 = 0;
        v10[2880] = 0;
        ++v10;
        --v9;
      }
      while (v9);
      ++v7;
      v8 += 3;
    }
    while (v7 != 32);
    ++v4;
    v6 += 96;
  }
  while (v4 != 30);
  *(_DWORD *)(a1 + 51080) = 0;
  *(void *)uint64_t v129 = 0;
  uint64_t v11 = a1 + 12 * *(unsigned int *)(a2 + 168) + 51084;
  *(_DWORD *)(v11 + 8) = 0;
  *(void *)uint64_t v11 = 0;
  if (sub_D1C38(0x2Eu, 7))
  {
    int v12 = sub_D1C7C(0x2Eu);
    __uint64_t v13 = sub_DDEFC();
    int v14 = (const char *)sub_D1CB0(7);
    int v15 = *(_DWORD *)(a2 + 916);
    if (v12)
    {
      printf("%lld %d AVE %s: H264FrameRec: CollectSlicesSizes ONLY ONE TO LOOK AT PlaneNumber = %d\n", v13, 46, v14, v15);
      __uint64_t v16 = sub_DDEFC();
      __uint64_t v118 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: H264FrameRec: CollectSlicesSizes ONLY ONE TO LOOK AT PlaneNumber = %d", v16, 46, v118, *(_DWORD *)(a2 + 916));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264FrameRec: CollectSlicesSizes ONLY ONE TO LOOK AT PlaneNumber = %d", v13, 46, v14, v15);
    }
  }
  uint64_t v25 = *(void *)(a1 + 8 * *(int *)(a2 + 916) + 27072);
  if (!v25)
  {
    uint64_t v17 = 3758097084;
    if (!sub_D1C38(3u, 4)) {
      return v17;
    }
    int v37 = sub_D1C7C(3u);
    __uint64_t v22 = sub_DDEFC();
    __uint64_t v38 = (const char *)sub_D1CB0(4);
    if (v37)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_CodedBuffPointerDataHeader[%d] == NULL\n", v22, 3, v38, "CollectSlicesSizes", 1481, "codedHeader != __null", *(_DWORD *)(a2 + 916));
      __uint64_t v22 = sub_DDEFC();
      __uint64_t v38 = (const char *)sub_D1CB0(4);
      int v122 = "codedHeader != __null";
      uint64_t v123 = *(unsigned int *)(a2 + 916);
      uint64_t v121 = 1481;
    }
    else
    {
      uint64_t v123 = *(unsigned int *)(a2 + 916);
      uint64_t v121 = 1481;
      int v122 = "codedHeader != __null";
    }
    int v119 = v38;
    char v24 = "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_CodedBuffPointerDataHeader[%d] == NULL";
    goto LABEL_79;
  }
  int v124 = v5;
  uint64_t v26 = *(void *)(a1 + 8 * *(int *)(a2 + 916) + 27072);
  uint64_t v127 = v26;
  uint64_t v27 = v25 + 12 * *(unsigned int *)(a2 + 168);
  uint64_t v28 = *(void *)(v27 + 244);
  uint64_t v29 = a1 + 12 * *(unsigned int *)(a2 + 168) + 51084;
  *(_DWORD *)(v29 + 8) = *(_DWORD *)(v27 + 252);
  *(void *)uint64_t v29 = v28;
  if (sub_D1C38(0x2Eu, 7))
  {
    int v30 = sub_D1C7C(0x2Eu);
    __uint64_t v31 = sub_DDEFC();
    __uint64_t v32 = (const char *)sub_D1CB0(7);
    unsigned int v33 = *(_DWORD *)(a2 + 168);
    int v34 = *(_DWORD *)(a1 + 12 * v33 + 51092);
    if (v30)
    {
      printf("%lld %d AVE %s: H264FrameRec: CollectSlicesSizes Filler[%d] %d %d\n", v31, 46, v32, v33, *(char *)(a1 + 12 * v33 + 51091), v34);
      __uint64_t v35 = sub_DDEFC();
      __uint64_t v36 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: H264FrameRec: CollectSlicesSizes Filler[%d] %d %d", v35, 46, v36, *(_DWORD *)(a2 + 168), *(char *)(a1 + 12 * *(unsigned int *)(a2 + 168) + 51091), *(_DWORD *)(a1 + 12 * *(unsigned int *)(a2 + 168) + 51092));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264FrameRec: CollectSlicesSizes Filler[%d] %d %d", v31, 46, v32, v33, *(char *)(a1 + 12 * v33 + 51091), v34);
    }
  }
  unsigned int v39 = 0;
  *(_DWORD *)(v129 + 8) = 3 * *(_DWORD *)(v26 + 240);
  uint64_t v40 = a1 + 28032;
  uint64_t v128 = a1 + 28036;
  uint64_t v41 = -3072;
  while (1)
  {
    if (sub_D1C38(0x2Eu, 7))
    {
      int v42 = sub_D1C7C(0x2Eu);
      __uint64_t v43 = sub_DDEFC();
      uint64_t v44 = (const char *)sub_D1CB0(7);
      int v45 = *(unsigned __int8 *)(v26 + 908);
      if (v42)
      {
        printf("%lld %d AVE %s: H264FrameRec: codedHeader->SliceData[%d].ui32BytesWritten = %d ui32BytesToRemoveAtTheEndOfTheSliceForContextSwitch %d\n", v43, 46, v44, v39, *(_DWORD *)(v26 + 384), v45);
        __uint64_t v46 = sub_DDEFC();
        uint64_t v47 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader->SliceData[%d].ui32BytesWritten = %d ui32BytesToRemoveAtTheEndOfTheSliceForContextSwitch %d", v46, 46, v47, v39, *(_DWORD *)(v26 + 384), *(unsigned __int8 *)(v26 + 908));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader->SliceData[%d].ui32BytesWritten = %d ui32BytesToRemoveAtTheEndOfTheSliceForContextSwitch %d", v43, 46, v44, v39, *(_DWORD *)(v26 + 384), v45);
      }
    }
    if (!*(_DWORD *)(v26 + 384)) {
      break;
    }
    if (*(char *)(v26 + 908) < 0)
    {
      uint64_t v17 = 3758097084;
      if (sub_D1C38(3u, 4))
      {
        int v90 = sub_D1C7C(3u);
        __uint64_t v91 = sub_DDEFC();
        int v92 = (const char *)sub_D1CB0(4);
        if (v90)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader->SliceData[%d].ui32BytesToRemoveAtTheEndOfTheSliceForContextSwitch = %d\n", v91, 3, v92, "CollectSlicesSizes", 1499, "codedHeader->SliceData[i].ui32BytesToRemoveAtTheEndOfTheSliceForContextSwitch < 128", v39, *(unsigned __int8 *)(v26 + 908));
          __uint64_t v91 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader->SliceData[%d].ui32BytesToRemoveAtTheEndOfTheSliceForContextSwitch = %d", v91);
      }
      return v17;
    }
    if (*(_DWORD *)(v26 + 920) && *(void *)(v26 + 912))
    {
      if (sub_D1C38(0x2Eu, 7))
      {
        int v48 = sub_D1C7C(0x2Eu);
        __uint64_t v49 = sub_DDEFC();
        int v50 = (const char *)sub_D1CB0(7);
        int v51 = *(_DWORD *)(v26 + 920);
        if (v48)
        {
          printf("%lld %d AVE %s: H264FrameRec: codedHeader->SliceData[%d].ui32SliceHeaderSize = %d\n", v49, 46, v50, v39, v51);
          __uint64_t v52 = sub_DDEFC();
          uint32x2_t v53 = (const char *)sub_D1CB0(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader->SliceData[%d].ui32SliceHeaderSize = %d", v52, 46, v53, v39, *(_DWORD *)(v26 + 920));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader->SliceData[%d].ui32SliceHeaderSize = %d", v49, 46, v50, v39, v51);
        }
      }
      *(_DWORD *)(a1 + 39552 + v41 + 384 * *(int *)(a2 + 916) + 3072) = *(_DWORD *)(v26 + 920);
      if (v41 != -3072) {
        *(_DWORD *)(a1 + 39556 + v41 + 384 * *(int *)(a2 + 916) + 3072) = *(_DWORD *)(a1
      }
                                                                                      + 384 * *(int *)(a2 + 916)
                                                                                      + 12 * (v39 - 1)
                                                                                      + 39552)
                                                                          + *(_DWORD *)(a1
                                                                                      + 384 * *(int *)(a2 + 916)
                                                                                      + 12 * (v39 - 1)
                                                                                      + 39556);
    }
    int v54 = *(unsigned __int8 *)(v26 + 908);
    *(_DWORD *)(v40 + v41 + 384 * *(int *)(a2 + 916) + 3072) = *(_DWORD *)(v26 + 384) - v54;
    *(_DWORD *)(a1 + 28040 + v41 + 384 * *(int *)(a2 + 916) + 3072) = v54;
    uint64_t v55 = *(int *)(a2 + 916);
    *(void *)uint64_t v129 = v40 + v41 + 384 * (int)v55 + 3072;
    if (v41 != -3072)
    {
      if (*v126)
      {
        if (sub_D1C38(0x2Eu, 7))
        {
          int v56 = sub_D1C7C(0x2Eu);
          __uint64_t v57 = sub_DDEFC();
          int v58 = (const char *)sub_D1CB0(7);
          uint64_t v59 = v39 - 1;
          int v60 = *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28032);
          int v61 = *(_DWORD *)(v128 + v41 + 384 * *(int *)(a2 + 916) + 3072);
          int v62 = *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28040);
          uint64_t v63 = v127 + 544 * v59;
          int v64 = *(unsigned __int8 *)(v63 + 908);
          if (v56)
          {
            __uint64_t v65 = (_DWORD *)(v63 + 384);
            int v66 = (unsigned __int8 *)(v63 + 908);
            printf("%lld %d AVE %s: H264FrameRec: Slice %d. Updating values Size %d Offset %d Bytes to Remove %d -- ui32BytesWritten %d ui32BytesToRemove %d\n", v57, 46, v58, v39, v60, v61, v62, *(_DWORD *)(v63 + 384), v64);
            __uint64_t v67 = sub_DDEFC();
            uint64_t v68 = (const char *)sub_D1CB0(7);
            uint64_t v40 = a1 + 28032;
            syslog(3, "%lld %d AVE %s: H264FrameRec: Slice %d. Updating values Size %d Offset %d Bytes to Remove %d -- ui32BytesWritten %d ui32BytesToRemove %d", v67, 46, v68, v39, *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28032), *(_DWORD *)(v128 + v41 + 384 * *(int *)(a2 + 916) + 3072), *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28040), *v65, *v66);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: Slice %d. Updating values Size %d Offset %d Bytes to Remove %d -- ui32BytesWritten %d ui32BytesToRemove %d", v57, 46, v58, v39, v60, v61, v62, *(_DWORD *)(v63 + 384), v64);
          }
          uint64_t v69 = a1 + 28036;
          uint64_t v70 = v127;
        }
        else
        {
          uint64_t v59 = v39 - 1;
          uint64_t v70 = v127;
          uint64_t v69 = a1 + 28036;
        }
        uint64_t v71 = v70 + 544 * v59;
        int v72 = *(_DWORD *)(v71 + 384);
        LODWORD(v71) = *(unsigned __int8 *)(v71 + 908);
        *(_DWORD *)(a1 + 28032 + 384 * *(int *)(a2 + 916) + 12 * v59) = v72 - v71;
        *(_DWORD *)(a1 + 28032 + 384 * *(int *)(a2 + 916) + 12 * v59 + 8) = v71;
        uint64_t v55 = *(int *)(a2 + 916);
      }
      else
      {
        LODWORD(v59) = v39 - 1;
        uint64_t v69 = a1 + 28036;
      }
      uint64_t v73 = 3 * v55;
      int v74 = (_DWORD *)(a1 + (v73 << 7) + 12 * v59 + 28032);
      *(_DWORD *)(v69 + v41 + (v73 << 7) + 3072) = *v74 + v74[1] + v74[2];
      if (sub_D1C38(0x2Eu, 7))
      {
        int v75 = sub_D1C7C(0x2Eu);
        __uint64_t v76 = sub_DDEFC();
        __uint64_t v77 = (const char *)sub_D1CB0(7);
        int v78 = *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28032);
        int v79 = *(_DWORD *)(v128 + v41 + 384 * *(int *)(a2 + 916) + 3072);
        int v80 = *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28040);
        uint64_t v81 = v127 + 544 * v59;
        int v82 = *(unsigned __int8 *)(v81 + 908);
        if (v75)
        {
          uint64_t v125 = (_DWORD *)(v81 + 384);
          __uint64_t v83 = (unsigned __int8 *)(v81 + 908);
          printf("%lld %d AVE %s: H264FrameRec: Slice %d. UpdatED values Size %d Offset %d Bytes to Remove %d -- ui32BytesWritten %d ui32BytesToRemove %d\n", v76, 46, v77, v39, v78, v79, v80, *(_DWORD *)(v81 + 384), v82);
          __uint64_t v84 = sub_DDEFC();
          uint64_t v85 = (const char *)sub_D1CB0(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: Slice %d. UpdatED values Size %d Offset %d Bytes to Remove %d -- ui32BytesWritten %d ui32BytesToRemove %d", v84, 46, v85, v39, *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28032), *(_DWORD *)(v128 + v41 + 384 * *(int *)(a2 + 916) + 3072), *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28040), *v125, *v83);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: Slice %d. UpdatED values Size %d Offset %d Bytes to Remove %d -- ui32BytesWritten %d ui32BytesToRemove %d", v76, 46, v77, v39, v78, v79, v80, *(_DWORD *)(v81 + 384), v82);
        }
        uint64_t v40 = a1 + 28032;
      }
    }
    v26 += 544;
    ++v39;
    v41 += 12;
    if (!v41)
    {
      unsigned int v39 = 256;
      if (*v124 != 2)
      {
LABEL_74:
        uint64_t v17 = 3758097084;
        if (sub_D1C38(3u, 4))
        {
          int v93 = sub_D1C7C(3u);
          __uint64_t v94 = sub_DDEFC();
          UInt8 v95 = (const char *)sub_D1CB0(4);
          if (v93)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: TotalSlices = %d\n", v94, 3, v95, "CollectSlicesSizes", 1552, "TotalSlices <= ((32) < (256) ? (32) : (256))", v39);
            __uint64_t v94 = sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: TotalSlices = %d", v94);
        }
        return v17;
      }
LABEL_67:
      if (sub_D1C38(0x2Eu, 7))
      {
        int v86 = sub_D1C7C(0x2Eu);
        __uint64_t v87 = sub_DDEFC();
        int v88 = (const char *)sub_D1CB0(7);
        if (v86)
        {
          printf("%lld %d AVE %s: H264FrameRec: CollectSlicesSizes TotalSlices = %d\n", v87, 46, v88, v39);
          __uint64_t v89 = sub_DDEFC();
          __uint64_t v120 = (const char *)sub_D1CB0(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: CollectSlicesSizes TotalSlices = %d", v89, 46, v120, v39);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: CollectSlicesSizes TotalSlices = %d", v87, 46, v88, v39);
        }
      }
      uint64_t v96 = 0;
      UInt8 v97 = (int *)(a1 + 28032);
      do
      {
        uint64_t v98 = 0;
        uint64_t v99 = v97;
        do
        {
          if (!*v99) {
            break;
          }
          if (v99[2880] && sub_D1C38(0x2Eu, 7))
          {
            int v100 = sub_D1C7C(0x2Eu);
            __uint64_t v101 = sub_DDEFC();
            signed int v102 = (const char *)sub_D1CB0(7);
            int v103 = v99[2880];
            int v104 = v99[2882];
            if (v100)
            {
              printf("%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSliceHeadersSizes \t= [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d\n", v101, 46, v102, v96, v98, v96, v98, v103, v99[2881], v104);
              __uint64_t v105 = sub_DDEFC();
              size_t v106 = (const char *)sub_D1CB0(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSliceHeadersSizes \t= [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v105, 46, v106, v96, v98, v96, v98, v99[2880], v99[2881], v99[2882]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSliceHeadersSizes \t= [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v101, 46, v102, v96, v98, v96, v98, v103, v99[2881], v104);
            }
          }
          if (sub_D1C38(0x2Eu, 7))
          {
            int v107 = sub_D1C7C(0x2Eu);
            __uint64_t v108 = sub_DDEFC();
            __uint64_t v109 = (const char *)sub_D1CB0(7);
            int v110 = *v99;
            int v111 = v99[2];
            if (v107)
            {
              printf("%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes \t\t= [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d\n", v108, 46, v109, v96, v98, v96, v98, v110, v99[1], v111);
              __uint64_t v112 = sub_DDEFC();
              int v113 = (const char *)sub_D1CB0(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes \t\t= [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v112, 46, v113, v96, v98, v96, v98, *v99, v99[1], v99[2]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes \t\t= [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v108, 46, v109, v96, v98, v96, v98, v110, v99[1], v111);
            }
          }
          ++v98;
          v99 += 3;
        }
        while (v98 != 32);
        ++v96;
        v97 += 96;
      }
      while (v96 != 30);
      return 0;
    }
  }
  if (*v124 == 2) {
    goto LABEL_67;
  }
  if (v39 >= 0x21) {
    goto LABEL_74;
  }
  if (*(void *)v129) {
    goto LABEL_67;
  }
  uint64_t v17 = 3758097084;
  if (sub_D1C38(3u, 4))
  {
    int v115 = sub_D1C7C(3u);
    __uint64_t v116 = sub_DDEFC();
    int v117 = (const char *)sub_D1CB0(4);
    if (v115)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_pLastOutputSlicesSizes = NULL\n", v116, 3, v117, "CollectSlicesSizes", 1553, "m_pLastOutputSlicesSizes != __null");
      sub_DDEFC();
      sub_D1CB0(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_pLastOutputSlicesSizes = NULL");
  }
  return v17;
}

void sub_A2904(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, int a5, const void *a6, const void *a7, uint64_t a8, const void *a9)
{
  if (sub_D1C38(0x2Eu, 4))
  {
    int v17 = sub_D1C7C(0x2Eu);
    __uint64_t v29 = sub_DDEFC();
    int v18 = (const char *)sub_D1CB0(4);
    if (v17)
    {
      printf("%lld %d AVE %s: AVE %s:%d %d %d Src %p >= %p + %d | Dst %p >= %p + %zu\n", v29, 46, v18, "PrintBufferInfo", 1694, a2, a3, a6, a4, a5, a9, a7, a8);
      __uint64_t v19 = sub_DDEFC();
      __uint64_t v20 = sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: AVE %s:%d %d %d Src %p >= %p + %d | Dst %p >= %p + %zu", v19, 46, v20, "PrintBufferInfo", 1694, a2, a3);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AVE %s:%d %d %d Src %p >= %p + %d | Dst %p >= %p + %zu", v29, 46, v18, "PrintBufferInfo", 1694, a2, a3);
    }
  }
  uint64_t v21 = 0;
  __uint64_t v22 = (int *)(a1 + 384 * a2 + 28032);
  do
  {
    if (!*v22) {
      break;
    }
    if (sub_D1C38(0x2Eu, 4))
    {
      int v23 = sub_D1C7C(0x2Eu);
      __uint64_t v24 = sub_DDEFC();
      uint64_t v25 = (const char *)sub_D1CB0(4);
      int v26 = *v22;
      int v27 = v22[1];
      int v28 = v22[2880];
      if (v23)
      {
        printf("%lld %d AVE %s: AVE %s:%d %d %d %d %d\n", v24, 46, v25, "PrintBufferInfo", 1703, v21, v26, v22[1], v28);
        __uint64_t v24 = sub_DDEFC();
        uint64_t v25 = (const char *)sub_D1CB0(4);
        int v26 = *v22;
        int v27 = v22[1];
        int v28 = v22[2880];
      }
      syslog(3, "%lld %d AVE %s: AVE %s:%d %d %d %d %d", v24, 46, v25, "PrintBufferInfo", 1703, v21, v26, v27, v28);
    }
    ++v21;
    v22 += 3;
  }
  while (v21 != 32);
}

uint64_t sub_A2B30(uint64_t a1, uint64_t a2, char *a3, int a4, char a5, int a6, CFDataRef theData)
{
  if (!a2)
  {
    uint64_t v13 = 3758097084;
    if (sub_D1C38(3u, 4))
    {
      int v20 = sub_D1C7C(3u);
      __uint64_t v21 = sub_DDEFC();
      __uint64_t v22 = (const char *)sub_D1CB0(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame == NULL\n", v21, 3, v22, "AddAllSEIs", 1717, "Frame != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame == NULL");
    }
    return v13;
  }
  uint64_t v7 = a3;
  if (!a3)
  {
    uint64_t v13 = 3758097084;
    if (sub_D1C38(3u, 4))
    {
      int v23 = sub_D1C7C(3u);
      __uint64_t v24 = sub_DDEFC();
      uint64_t v25 = (const char *)sub_D1CB0(4);
      if (v23)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer StreamBufferCopy == NULL\n", v24, 3, v25, "AddAllSEIs", 1718, "StreamBufferCopy != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer StreamBufferCopy == NULL");
    }
    return v13;
  }
  if (*(_DWORD *)(a2 + 916) >= 0x1Fu)
  {
    uint64_t v13 = 3758097084;
    if (sub_D1C38(3u, 4))
    {
      int v26 = sub_D1C7C(3u);
      __uint64_t v27 = sub_DDEFC();
      int v28 = (const char *)sub_D1CB0(4);
      if (v26)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame->PlaneNumber = %d\n", v27, 3, v28, "AddAllSEIs", 1719, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(_DWORD *)(a2 + 916));
        __uint64_t v27 = sub_DDEFC();
        int v28 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame->PlaneNumber = %d", v27, 3, v28, "AddAllSEIs", 1719, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(unsigned int *)(a2 + 916));
    }
    return v13;
  }
  uint64_t v12 = a1 + 239360;
  *(void *)(a1 + 239360) = 0;
  if (a6)
  {
    uint64_t v13 = 0;
    if (a5) {
      return v13;
    }
  }
  uint64_t v14 = a1 + 68136;
  if (*(unsigned char *)(a1 + 68136) && !*(_DWORD *)(a2 + 160))
  {
    if (sub_D1C38(0x2Eu, 7))
    {
      int v30 = sub_D1C7C(0x2Eu);
      __uint64_t v31 = sub_DDEFC();
      __uint64_t v32 = (const char *)sub_D1CB0(7);
      int v33 = *(_DWORD *)(v12 + 5912);
      if (v30)
      {
        printf("%lld %d AVE %s: H264FrameRec: CopyEncodedFrameIntoExternalBuffer bUseElementaryStreamOutput %p %d\n\n", v31, 46, v32, *(const void **)(v12 + 5904), v33);
        __uint64_t v34 = sub_DDEFC();
        __uint64_t v35 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: CopyEncodedFrameIntoExternalBuffer bUseElementaryStreamOutput %p %d\n", v34, 46, v35, *(const void **)(v12 + 5904), *(void *)(v12 + 5912));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: CopyEncodedFrameIntoExternalBuffer bUseElementaryStreamOutput %p %d\n", v31, 46, v32, *(const void **)(v12 + 5904), v33);
      }
    }
    uint64_t v44 = *(const void **)(v12 + 5904);
    if (!v44)
    {
      uint64_t v13 = 3758097084;
      if (sub_D1C38(3u, 4))
      {
        int v46 = sub_D1C7C(3u);
        __uint64_t v47 = sub_DDEFC();
        int v48 = (const char *)sub_D1CB0(4);
        if (v46)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_SPSPPSFinalOutputbUseElementaryStreamOutput = NULL\n", v47, 3, v48, "AddAllSEIs", 1733, "m_SPSPPSFinalOutputbUseElementaryStreamOutput != __null");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_SPSPPSFinalOutputbUseElementaryStreamOutput = NULL");
      }
      return v13;
    }
    size_t v45 = *(void *)(v12 + 5912);
    if (!v45)
    {
      uint64_t v13 = 3758097084;
      if (sub_D1C38(3u, 4))
      {
        int v49 = sub_D1C7C(3u);
        __uint64_t v50 = sub_DDEFC();
        int v51 = (const char *)sub_D1CB0(4);
        if (v49)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_SPSPPSFinalOutputSizebUseElementaryStreamOutput = 0\n", v50, 3, v51, "AddAllSEIs", 1734, "m_SPSPPSFinalOutputSizebUseElementaryStreamOutput != 0");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_SPSPPSFinalOutputSizebUseElementaryStreamOutput = 0");
      }
      return v13;
    }
    memcpy(v7, v44, v45);
    v7 += *(void *)(v12 + 5912);
    sub_A40B4(a1, *(void **)(v12 + 5904));
    *(void *)(v12 + 5904) = 0;
  }
  if (*(void *)(a2 + 336))
  {
    int v86 = a4;
    if (!theData)
    {
      uint64_t v13 = 3758097084;
      if (sub_D1C38(3u, 4))
      {
        int v36 = sub_D1C7C(3u);
        __uint64_t v37 = sub_DDEFC();
        __uint64_t v38 = (const char *)sub_D1CB0(4);
        if (v36)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer serialMetadata == NULL\n", v37, 3, v38, "AddAllSEIs", 1750, "serialMetadata != __null");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer serialMetadata == NULL");
      }
      return v13;
    }
    BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
    unsigned int Length = CFDataGetLength(theData);
    if (sub_D1C38(0x2Eu, 7))
    {
      int v17 = sub_D1C7C(0x2Eu);
      __uint64_t v18 = sub_DDEFC();
      __uint64_t v19 = (const char *)sub_D1CB0(7);
      if (v17)
      {
        printf("%lld %d AVE %s: H264FrameRec: CFDebugMetadataSEI is ON buff %p size %d\n", v18, 46, v19, BytePtr, Length);
        __uint64_t v18 = sub_DDEFC();
        __uint64_t v19 = (const char *)sub_D1CB0(7);
      }
      syslog(3, "%lld %d AVE %s: H264FrameRec: CFDebugMetadataSEI is ON buff %p size %d", v18, 46, v19, BytePtr, Length);
    }
    int v39 = sub_4BC70(v7, a1 + 68136, (char *)BytePtr, Length, a2, *(unsigned __int8 *)(a2 + 344), &v86);
    if (v39) {
      return sub_DDF8C(v39);
    }
    if (!v86)
    {
      uint64_t v13 = 3758097084;
      if (sub_D1C38(3u, 4))
      {
        int v52 = sub_D1C7C(3u);
        __uint64_t v53 = sub_DDEFC();
        int v54 = (const char *)sub_D1CB0(4);
        if (v52)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: AddSEIDebugMetadata failed.\n", v53, 3, v54, "AddAllSEIs", 1765, "SEISize != 0");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: AddSEIDebugMetadata failed.");
      }
      return v13;
    }
    if (sub_D1C38(0x2Eu, 7))
    {
      int v40 = sub_D1C7C(0x2Eu);
      __uint64_t v41 = sub_DDEFC();
      int v42 = (const char *)sub_D1CB0(7);
      if (v40)
      {
        printf("%lld %d AVE %s: H264FrameRec: AddSEIDebugMetadata added %d bytes\n", v41, 46, v42, v86);
        __uint64_t v43 = sub_DDEFC();
        __uint64_t v83 = (const char *)sub_D1CB0(7);
        uint64_t v14 = a1 + 68136;
        syslog(3, "%lld %d AVE %s: H264FrameRec: AddSEIDebugMetadata added %d bytes", v43, 46, v83, v86);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: AddSEIDebugMetadata added %d bytes", v41, 46, v42, v86);
      }
    }
    uint64_t v55 = v86;
    uint64_t v56 = *(int *)(v12 + 4);
    *(_DWORD *)v12 += v86;
    *(_DWORD *)(a1 + 4 * v56 + 239368) = v55;
    int v57 = *(_DWORD *)(v12 + 4);
    *(_DWORD *)(v12 + 4) = v57 + 1;
    if (v57 >= 15)
    {
      uint64_t v13 = 3758097084;
      if (sub_D1C38(3u, 4))
      {
        int v62 = sub_D1C7C(3u);
        __uint64_t v63 = sub_DDEFC();
        int v64 = (const char *)sub_D1CB0(4);
        if (!v62) {
          goto LABEL_127;
        }
        int v65 = 1772;
        goto LABEL_124;
      }
      return v13;
    }
    v7 += v55;
    CFRelease(theData);
  }
  int v58 = *(_DWORD *)(v14 + 120);
  if (!v58) {
    goto LABEL_80;
  }
  if (v58 == 1)
  {
    if (*(unsigned char *)(v14 + 292))
    {
      int v86 = 0;
      sub_52534();
    }
    if (*(unsigned char *)(v14 + 293))
    {
      int v86 = 0;
      if (!*(_DWORD *)(a2 + 160)) {
        sub_4FF7C();
      }
    }
    if (*(unsigned char *)(v14 + 85))
    {
      int v86 = 0;
      uint64_t v66 = *(unsigned char *)(v14 + 209) ? *(void *)(a1 + 51352) : *(void *)(a1 + 51344);
      if (v66 == 1 && !*(_DWORD *)(a2 + 160)) {
        sub_50EA0();
      }
    }
LABEL_80:
    if (*(unsigned char *)(v14 + 54))
    {
      int v86 = 0;
      int v39 = sub_4CE74(v7, v14, a2, 1, &v86);
      if (v39) {
        return sub_DDF8C(v39);
      }
      if (sub_D1C38(0x2Eu, 7))
      {
        int v67 = sub_D1C7C(0x2Eu);
        __uint64_t v68 = sub_DDEFC();
        uint64_t v69 = (const char *)sub_D1CB0(7);
        if (v67)
        {
          printf("%lld %d AVE %s: H264FrameRec: Add Registered SEI added %d bytes\n", v68, 46, v69, v86);
          __uint64_t v70 = sub_DDEFC();
          __uint64_t v84 = (const char *)sub_D1CB0(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: Add Registered SEI added %d bytes", v70, 46, v84, v86);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: Add Registered SEI added %d bytes", v68, 46, v69, v86);
        }
      }
      uint64_t v71 = v86;
      uint64_t v72 = *(int *)(v12 + 4);
      *(_DWORD *)v12 += v86;
      *(_DWORD *)(a1 + 4 * v72 + 239368) = v71;
      int v73 = *(_DWORD *)(v12 + 4);
      *(_DWORD *)(v12 + 4) = v73 + 1;
      if (v73 >= 15)
      {
        uint64_t v13 = 3758097084;
        if (!sub_D1C38(3u, 4)) {
          return v13;
        }
        int v78 = sub_D1C7C(3u);
        __uint64_t v63 = sub_DDEFC();
        int v64 = (const char *)sub_D1CB0(4);
        if (v78)
        {
          int v65 = 1967;
LABEL_124:
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: Exceed the max supported SEI, failed.\n", v63, 3, v64, "AddAllSEIs", v65, "m_SEI_num < 16");
          sub_DDEFC();
          sub_D1CB0(4);
        }
LABEL_127:
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: Exceed the max supported SEI, failed.");
        return v13;
      }
      v7 += v71;
      *(_DWORD *)(a2 + 2436) = 0;
    }
    if ((!*(unsigned char *)(v14 + 45)
       || *(double *)(a2 + 2384) == 0.0
       || *(_DWORD *)(a2 + 23468) != 3 && *(_DWORD *)(a2 + 23768) != 21)
      && (!*(unsigned char *)(v14 + 49) || *(double *)(a2 + 2368) == 0.0)
      && (!*(unsigned char *)(v14 + 46) || *(_DWORD *)(a2 + 160))
      && (!*(unsigned char *)(v14 + 47) || *(_DWORD *)(a2 + 160))
      && (!*(unsigned char *)(v14 + 48) || *(_DWORD *)(a2 + 160))
      && (!*(unsigned char *)(v14 + 50) || !*(unsigned char *)(v14 + 55) || *(_DWORD *)(a2 + 160))
      && (!*(unsigned char *)(v14 + 51) || !*(unsigned char *)(v14 + 56) || *(_DWORD *)(a2 + 160))
      && (!*(unsigned char *)(v14 + 52) || !*(unsigned char *)(v14 + 85) || *(_DWORD *)(a2 + 160))
      && !*(unsigned char *)(v14 + 53))
    {
      return 0;
    }
    int v86 = 0;
    int v39 = sub_4DA14(v7, v14, a1 + 69864, a2, 1, &v86);
    if (v39) {
      return sub_DDF8C(v39);
    }
    if (sub_D1C38(0x2Eu, 7))
    {
      int v74 = sub_D1C7C(0x2Eu);
      __uint64_t v75 = sub_DDEFC();
      __uint64_t v76 = (const char *)sub_D1CB0(7);
      if (v74)
      {
        printf("%lld %d AVE %s: H264FrameRec: Add UnRegistered SEI added %d bytes\n", v75, 46, v76, v86);
        __uint64_t v77 = sub_DDEFC();
        uint64_t v85 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: Add UnRegistered SEI added %d bytes", v77, 46, v85, v86);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: Add UnRegistered SEI added %d bytes", v75, 46, v76, v86);
      }
    }
    int v79 = v86;
    uint64_t v80 = *(int *)(v12 + 4);
    *(_DWORD *)v12 += v86;
    *(_DWORD *)(a1 + 4 * v80 + 239368) = v79;
    int v81 = *(_DWORD *)(v12 + 4);
    *(_DWORD *)(v12 + 4) = v81 + 1;
    if (v81 < 15) {
      return 0;
    }
    uint64_t v13 = 3758097084;
    if (!sub_D1C38(3u, 4)) {
      return v13;
    }
    int v82 = sub_D1C7C(3u);
    __uint64_t v63 = sub_DDEFC();
    int v64 = (const char *)sub_D1CB0(4);
    if (v82)
    {
      int v65 = 1997;
      goto LABEL_124;
    }
    goto LABEL_127;
  }
  uint64_t v13 = 3758097084;
  if (sub_D1C38(3u, 4))
  {
    int v59 = sub_D1C7C(3u);
    __uint64_t v60 = sub_DDEFC();
    int v61 = (const char *)sub_D1CB0(4);
    if (v59)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR - codecID not recognized. FAIL\n", v60, 3, v61, "AddAllSEIs", 1946, "false");
      sub_DDEFC();
      sub_D1CB0(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR - codecID not recognized. FAIL");
  }
  return v13;
}

void sub_A40B4(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v3 = (_DWORD *)(a1 + 239348);
    uint64_t v4 = (unsigned char *)(a1 + 68345);
    uint64_t v5 = a1 + 51304;
    if (sub_D1C38(0x2Eu, 7))
    {
      int v6 = sub_D1C7C(0x2Eu);
      __uint64_t v7 = sub_DDEFC();
      int v8 = (const char *)sub_D1CB0(7);
      if (v6)
      {
        printf("%lld %d AVE %s: H264FrameRec: DeleteBuffer %p\n", v7, 46, v8, a2);
        __uint64_t v9 = sub_DDEFC();
        int v15 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: DeleteBuffer %p", v9, 46, v15, a2);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: DeleteBuffer %p", v7, 46, v8, a2);
      }
    }
    if (*v4)
    {
      if (*(void *)(v5 + 48) != 1 && *v3 != 2)
      {
        CFAllocatorRef v14 = *(const __CFAllocator **)v5;
        CFAllocatorDeallocate(v14, a2);
        return;
      }
    }
    else if (*(void *)(v5 + 40) != 1 && *v3 != 2)
    {
      return;
    }
    if (*v3 == 2)
    {
      if (!CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)a2, 0))
      {
        CVPixelBufferRelease((CVPixelBufferRef)a2);
      }
    }
    else
    {
      free(a2);
    }
  }
  else if (sub_D1C38(0x2Eu, 4))
  {
    int v10 = sub_D1C7C(0x2Eu);
    __uint64_t v11 = sub_DDEFC();
    uint64_t v12 = (const char *)sub_D1CB0(4);
    if (v10)
    {
      printf("%lld %d AVE %s: H264FrameRec ERROR: Trying to free a buffer that is NULL.\n", v11, 46, v12);
      __uint64_t v13 = sub_DDEFC();
      __uint64_t v16 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: Trying to free a buffer that is NULL.", v13, 46, v16);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: Trying to free a buffer that is NULL.", v11, 46, v12);
    }
  }
}

uint64_t sub_A42E4(int *a1, uint64_t a2, char *a3, const void *a4, uint64_t a5, int a6, uint64_t a7)
{
  if (!a2)
  {
    uint64_t v16 = 3758097084;
    if (sub_D1C38(3u, 4))
    {
      int v17 = sub_D1C7C(3u);
      __uint64_t v18 = sub_DDEFC();
      __uint64_t v19 = (const char *)sub_D1CB0(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame == NULL\n", v18, 3, v19, "CopyEncodedFrameIntoExternalBuffer", 2016, "Frame != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame == NULL");
    }
    return v16;
  }
  if (!a3)
  {
    uint64_t v16 = 3758097084;
    if (sub_D1C38(3u, 4))
    {
      int v20 = sub_D1C7C(3u);
      __uint64_t v21 = sub_DDEFC();
      __uint64_t v22 = (const char *)sub_D1CB0(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer StreamBufferCopy == NULL\n", v21, 3, v22, "CopyEncodedFrameIntoExternalBuffer", 2017, "StreamBufferCopy != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer StreamBufferCopy == NULL");
    }
    return v16;
  }
  signed int v8 = *(_DWORD *)(a2 + 916);
  if (v8 >= 0x1F)
  {
    uint64_t v16 = 3758097084;
    if (sub_D1C38(3u, 4))
    {
      int v23 = sub_D1C7C(3u);
      __uint64_t v24 = sub_DDEFC();
      uint64_t v25 = (const char *)sub_D1CB0(4);
      if (v23)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame->PlaneNumber = %d\n", v24, 3, v25, "CopyEncodedFrameIntoExternalBuffer", 2018, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(_DWORD *)(a2 + 916));
        __uint64_t v24 = sub_DDEFC();
        uint64_t v25 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame->PlaneNumber = %d", v24, 3, v25, "CopyEncodedFrameIntoExternalBuffer", 2018, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(unsigned int *)(a2 + 916));
    }
    return v16;
  }
  uint64_t v13 = (uint64_t)a1;
  CFAllocatorRef v14 = a1 + 59839;
  int v15 = a1 + 16889;
  int v201 = a1[16889];
  if (a6)
  {
    if (!a4 || a7) {
      goto LABEL_7;
    }
LABEL_18:
    __uint64_t v209 = a3;
    if (a1[59840])
    {
      if (sub_D1C38(0x2Eu, 7))
      {
        int v26 = sub_D1C7C(0x2Eu);
        __uint64_t v27 = sub_DDEFC();
        int v28 = (const char *)sub_D1CB0(7);
        int v29 = v14[1];
        if (v26)
        {
          printf("%lld %d AVE %s: H264FrameRec: memcpy SEI size %u\n", v27, 46, v28, v29);
          __uint64_t v30 = sub_DDEFC();
          __uint64_t v189 = (const char *)sub_D1CB0(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: memcpy SEI size %u", v30, 46, v189, v14[1]);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: memcpy SEI size %u", v27, 46, v28, v29);
        }
        uint64_t v13 = (uint64_t)a1;
      }
      size_t v31 = v14[1];
      if ((int)v31 <= 0)
      {
        uint64_t v16 = 3758097084;
        if (sub_D1C38(3u, 4))
        {
          int v42 = sub_D1C7C(3u);
          __uint64_t v43 = sub_DDEFC();
          uint64_t v44 = (const char *)sub_D1CB0(4);
          if (v42)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer - SEI buffer size too big\n", v43, 3, v44, "CopyEncodedFrameIntoExternalBuffer", 2031, "false");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer - SEI buffer size too big");
        }
        return v16;
      }
      memcpy(a3, a4, v31);
      __uint64_t v209 = &a3[v14[1]];
      signed int v8 = *(_DWORD *)(a2 + 916);
    }
    goto LABEL_29;
  }
  if (a4) {
    goto LABEL_18;
  }
LABEL_7:
  __uint64_t v209 = a3;
LABEL_29:
  unint64_t v207 = *(char **)(v13 + 8 * v8 + 26472);
  if (v207)
  {
    uint64_t v32 = *(unsigned int *)(v13 + 4 * v8 + 26952);
    uint64_t v203 = a5;
    if (sub_D1C38(0x2Eu, 7))
    {
      int v33 = sub_D1C7C(0x2Eu);
      __uint64_t v34 = sub_DDEFC();
      __uint64_t v35 = (const char *)sub_D1CB0(7);
      int v36 = *v14;
      if (v33)
      {
        printf("%lld %d AVE %s: ClientID %d buf %p, buf_size %d\n", v34, 46, v35, v36, v207, v32);
        __uint64_t v37 = sub_DDEFC();
        __uint64_t v38 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: ClientID %d buf %p, buf_size %d", v37, 46, v38, *v14, v207, v32);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: ClientID %d buf %p, buf_size %d", v34, 46, v35, v36, v207, v32);
      }
    }
    int v45 = *(_DWORD *)(a2 + 916);
    if (*(_DWORD *)(v13 + 384 * v45 + 39552))
    {
      int v200 = *(char **)(v13 + 8 * v45 + 27552);
      if (!v200)
      {
        uint64_t v16 = 3758097084;
        if (sub_D1C38(3u, 4))
        {
          int v46 = sub_D1C7C(3u);
          __uint64_t v47 = sub_DDEFC();
          int v48 = (const char *)sub_D1CB0(4);
          if (v46)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer buf_header == NULL\n", v47, 3, v48, "CopyEncodedFrameIntoExternalBuffer", 2048, "buf_header != __null");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer buf_header == NULL");
        }
        return v16;
      }
    }
    else
    {
      int v200 = 0;
    }
    __uint64_t v199 = v15;
    if (a6)
    {
      if (*(_DWORD *)(v13 + 384 * v45 + 12 * (int)a7 + 28032))
      {
        if (sub_D1C38(0x2Eu, 7))
        {
          int v49 = sub_D1C7C(0x2Eu);
          __uint64_t v50 = sub_DDEFC();
          int v51 = (const char *)sub_D1CB0(7);
          if (v49)
          {
            printf("%lld %d AVE %s: H264FrameRec: copy PlaneNumber = %d, slice %d size %d, from offset %d \n", v50, 46, v51, *(_DWORD *)(a2 + 916), a7, *(_DWORD *)(v13 + 384 * *(int *)(a2 + 916) + 12 * (int)a7 + 28032), *(_DWORD *)(v13 + 384 * *(int *)(a2 + 916) + 12 * (int)a7 + 28036));
            __uint64_t v52 = sub_DDEFC();
            sub_D1CB0(7);
            uint64_t v13 = (uint64_t)a1;
            syslog(3, "%lld %d AVE %s: H264FrameRec: copy PlaneNumber = %d, slice %d size %d, from offset %d ", v52);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: copy PlaneNumber = %d, slice %d size %d, from offset %d ", v50);
          }
        }
        uint64_t v198 = v32;
        if (*(_DWORD *)(v13 + 384 * *(int *)(a2 + 916) + 12 * (int)a7 + 39552))
        {
          if (sub_D1C38(0x2Eu, 7))
          {
            int v91 = sub_D1C7C(0x2Eu);
            __uint64_t v92 = sub_DDEFC();
            int v93 = (const char *)sub_D1CB0(7);
            int v94 = *(_DWORD *)(v13 + 384 * *(int *)(a2 + 916) + 12 * (int)a7 + 39552);
            if (v91)
            {
              printf("%lld %d AVE %s: slice header memcpy: %p -> %p %d\n", v92, 46, v93, &v200[1024 * (uint64_t)(int)a7], v209, v94);
              __uint64_t v95 = sub_DDEFC();
              uint64_t v96 = (const char *)sub_D1CB0(7);
              uint64_t v13 = (uint64_t)a1;
              syslog(3, "%lld %d AVE %s: slice header memcpy: %p -> %p %d", v95, 46, v96, &v200[1024 * (uint64_t)(int)a7], v209, a1[96 * *(int *)(a2 + 916) + 9888 + 3 * (int)a7]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: slice header memcpy: %p -> %p %d", v92, 46, v93, &v200[1024 * (uint64_t)(int)a7], v209, v94);
            }
          }
          uint64_t v97 = v203;
          if (v209 >= &a3[v203])
          {
            uint64_t v16 = 3758097084;
            sub_A2904(v13, *(unsigned int *)(a2 + 916), a7, v200, -1, &v200[1024 * (uint64_t)(int)a7], a3, v203, v209);
            if (!sub_D1C38(3u, 4)) {
              return v16;
            }
            int v106 = sub_D1C7C(3u);
            __uint64_t v88 = sub_DDEFC();
            __uint64_t v89 = (const char *)sub_D1CB0(4);
            if (v106)
            {
              int v90 = 2128;
LABEL_107:
              printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer - buffer size too big\n", v88, 3, v89, "CopyEncodedFrameIntoExternalBuffer", v90, "false");
              sub_DDEFC();
              sub_D1CB0(4);
            }
LABEL_187:
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer - buffer size too big");
            return v16;
          }
          uint64_t v99 = v13 + 39552;
          memcpy(v209, &v200[1024 * (uint64_t)(int)a7], *(unsigned int *)(v13 + 39552 + 384 * *(int *)(a2 + 916) + 12 * (int)a7));
          uint64_t v13 = (uint64_t)a1;
          v209 += *(unsigned int *)(v99 + 384 * *(int *)(a2 + 916) + 12 * (int)a7);
        }
        else
        {
          uint64_t v97 = v203;
        }
        if (sub_D1C38(0x2Eu, 7))
        {
          int v100 = sub_D1C7C(0x2Eu);
          __uint64_t v101 = sub_DDEFC();
          signed int v102 = (const char *)sub_D1CB0(7);
          int v103 = &v207[*(unsigned int *)(v13 + 384 * *(int *)(a2 + 916) + 12 * (int)a7 + 28036)];
          if (v100)
          {
            printf("%lld %d AVE %s: memcpy: %p -> %p %d\n", v101, 46, v102, v103, v209, *(_DWORD *)(v13 + 384 * *(int *)(a2 + 916) + 12 * (int)a7 + 28032));
            __uint64_t v104 = sub_DDEFC();
            __uint64_t v105 = (const char *)sub_D1CB0(7);
            syslog(3, "%lld %d AVE %s: memcpy: %p -> %p %d", v104, 46, v105, &v207[*(unsigned int *)(v13 + 384 * *(int *)(a2 + 916) + 12 * (int)a7 + 28036)], v209, *(_DWORD *)(v13 + 384 * *(int *)(a2 + 916) + 12 * (int)a7 + 28032));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: memcpy: %p -> %p %d", v101, 46, v102, v103, v209, *(_DWORD *)(v13 + 384 * *(int *)(a2 + 916) + 12 * (int)a7 + 28032));
          }
          uint64_t v97 = v203;
        }
        uint64_t v107 = *(int *)(a2 + 916);
        size_t v108 = *(unsigned int *)(v13 + 384 * (int)v107 + 12 * (int)a7 + 28032);
        uint64_t v109 = *(unsigned int *)(v13 + 384 * (int)v107 + 12 * (int)a7 + 28036);
        if (&v209[v108] > &a3[v97] || &v207[v109 + v108] > &v207[v198])
        {
          uint64_t v16 = 3758097084;
          sub_A2904(v13, v107, a7, v207, v198, &v207[v109], a3, v97, v209);
          if (!sub_D1C38(3u, 4)) {
            return v16;
          }
          int v110 = sub_D1C7C(3u);
          __uint64_t v88 = sub_DDEFC();
          __uint64_t v89 = (const char *)sub_D1CB0(4);
          if (v110)
          {
            int v90 = 2148;
            goto LABEL_107;
          }
          goto LABEL_187;
        }
        int v195 = a6;
        int v196 = a7;
        memcpy(v209, &v207[v109], v108);
        int v57 = &v209[*(unsigned int *)(v13 + 384 * *(int *)(a2 + 916) + 12 * (int)a7 + 28032)];
      }
      else
      {
        int v195 = a6;
        int v196 = a7;
        int v57 = v209;
      }
    }
    else
    {
      int v195 = a6;
      int v196 = a7;
      uint64_t v53 = 0;
      int v204 = &a3[v203];
      int v197 = v32;
      int v202 = &v207[v32];
      uint64_t v54 = 28032;
      uint64_t v55 = 39552;
      uint64_t v56 = v200;
      int v57 = v209;
      while (*(_DWORD *)(v13 + 384 * v45 + v54))
      {
        if (sub_D1C38(0x2Eu, 7))
        {
          int v58 = sub_D1C7C(0x2Eu);
          __uint64_t v59 = sub_DDEFC();
          __uint64_t v60 = (const char *)sub_D1CB0(7);
          int v61 = *(_DWORD *)(a2 + 916);
          int v62 = (int *)(v13 + v54 + 384 * v61);
          int v63 = *v62;
          int v64 = v62[1];
          if (v58)
          {
            printf("%lld %d AVE %s: H264FrameRec: copy PlaneNumber = %d, slice %d size %d, from offset %d \n", v59, 46, v60, v61, v53, v63, v64);
            __uint64_t v65 = sub_DDEFC();
            uint64_t v66 = (const char *)sub_D1CB0(7);
            int v67 = (_DWORD *)(v13 + v54 + 384 * *(int *)(a2 + 916));
            syslog(3, "%lld %d AVE %s: H264FrameRec: copy PlaneNumber = %d, slice %d size %d, from offset %d ", v65, 46, v66, *(_DWORD *)(a2 + 916), v53, *v67, v67[1]);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: copy PlaneNumber = %d, slice %d size %d, from offset %d ", v59, 46, v60, v61, v53, v63, v64);
          }
        }
        if (*(_DWORD *)(v13 + 384 * *(int *)(a2 + 916) + v55))
        {
          if (sub_D1C38(0x2Eu, 7))
          {
            int v68 = sub_D1C7C(0x2Eu);
            __uint64_t v69 = sub_DDEFC();
            __uint64_t v70 = (const char *)sub_D1CB0(7);
            int v71 = *(_DWORD *)(v13 + 384 * *(int *)(a2 + 916) + v55);
            if (v68)
            {
              printf("%lld %d AVE %s: slice header memcpy: %p -> %p %d\n", v69, 46, v70, v56, v57, v71);
              __uint64_t v72 = sub_DDEFC();
              int v73 = (const char *)sub_D1CB0(7);
              syslog(3, "%lld %d AVE %s: slice header memcpy: %p -> %p %d", v72, 46, v73, v56, v57, *(_DWORD *)(v13 + 384 * *(int *)(a2 + 916) + v55));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: slice header memcpy: %p -> %p %d", v69, 46, v70, v56, v57, v71);
            }
          }
          if (v57 >= v204)
          {
            uint64_t v16 = 3758097084;
            sub_A2904(v13, *(unsigned int *)(a2 + 916), v53, v200, -1, v56, a3, v203, v57);
            if (!sub_D1C38(3u, 4)) {
              return v16;
            }
            int v98 = sub_D1C7C(3u);
            __uint64_t v88 = sub_DDEFC();
            __uint64_t v89 = (const char *)sub_D1CB0(4);
            if (v98)
            {
              int v90 = 2074;
              goto LABEL_107;
            }
            goto LABEL_187;
          }
          memcpy(v57, v56, *(unsigned int *)(v13 + 384 * *(int *)(a2 + 916) + v55));
          v57 += *(unsigned int *)(v13 + 384 * *(int *)(a2 + 916) + v55);
        }
        if (sub_D1C38(0x2Eu, 7))
        {
          int v74 = sub_D1C7C(0x2Eu);
          __uint64_t v75 = sub_DDEFC();
          __uint64_t v76 = (const char *)sub_D1CB0(7);
          __uint64_t v77 = (int *)(v13 + v54 + 384 * *(int *)(a2 + 916));
          int v78 = *v77;
          int v79 = &v207[v77[1]];
          if (v74)
          {
            printf("%lld %d AVE %s: memcpy: %p -> %p %d, StreamBufferCopy %p FinalOutput_FRAME_Size %lu\n", v75, 46, v76, v79, v57, v78, a3, v203);
            __uint64_t v80 = sub_DDEFC();
            int v81 = (const char *)sub_D1CB0(7);
            syslog(3, "%lld %d AVE %s: memcpy: %p -> %p %d, StreamBufferCopy %p FinalOutput_FRAME_Size %lu", v80, 46, v81, &v207[*(unsigned int *)(v13 + v54 + 384 * *(int *)(a2 + 916) + 4)], v57, *(_DWORD *)(v13 + v54 + 384 * *(int *)(a2 + 916)), a3, v203);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: memcpy: %p -> %p %d, StreamBufferCopy %p FinalOutput_FRAME_Size %lu", v75, 46, v76, v79, v57, v78, a3, v203);
          }
        }
        uint64_t v82 = *(int *)(a2 + 916);
        __uint64_t v83 = (unsigned int *)(v13 + v54 + 384 * (int)v82);
        size_t v84 = *v83;
        uint64_t v85 = &v207[v83[1]];
        if (&v57[v84] > v204 || &v85[v84] > v202)
        {
          uint64_t v16 = 3758097084;
          sub_A2904(v13, v82, v53, v207, v197, v85, a3, v203, v57);
          if (!sub_D1C38(3u, 4)) {
            return v16;
          }
          int v87 = sub_D1C7C(3u);
          __uint64_t v88 = sub_DDEFC();
          __uint64_t v89 = (const char *)sub_D1CB0(4);
          if (v87)
          {
            int v90 = 2094;
            goto LABEL_107;
          }
          goto LABEL_187;
        }
        memcpy(v57, v85, v84);
        int v45 = *(_DWORD *)(a2 + 916);
        v57 += *(unsigned int *)(v13 + 384 * v45 + v54);
        ++v53;
        v56 += 1024;
        v55 += 12;
        v54 += 12;
        if (v53 == 32) {
          break;
        }
      }
    }
    int v210 = v57;
    int v111 = v201 - 1;
    __uint64_t v112 = v199;
    if (sub_D1C38(0x2Eu, 7))
    {
      int v113 = sub_D1C7C(0x2Eu);
      __uint64_t v114 = sub_DDEFC();
      int v115 = (const char *)sub_D1CB0(7);
      if (v113)
      {
        printf("%lld %d AVE %s: H264FrameRec: isLastSlice %d\n", v114, 46, v115, v111 == v196);
        __uint64_t v116 = sub_DDEFC();
        int v190 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: isLastSlice %d", v116, 46, v190, v111 == v196);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: isLastSlice %d", v114, 46, v115, v111 == v196);
      }
      uint64_t v13 = (uint64_t)a1;
    }
    if (!v195 || v111 == v196)
    {
      int v208 = (_DWORD **)(v13 + 51072);
      if (v199[94] < 2u || *(_DWORD *)(a2 + 168))
      {
        uint64_t v117 = 0;
        char v118 = 1;
        int v119 = (_DWORD **)(v13 + 51072);
        *(_DWORD *)(v13 + 51108) = 0;
        do
        {
          char v120 = v118;
          uint64_t v121 = (int *)(v13 + 12 * v117 + 51084);
          uint64_t v122 = v13;
          uint64_t v123 = v121 + 2;
          if (v121[2])
          {
            int v124 = (char *)(v122 + 12 * v117 + 51091);
            memcpy(v210, v121, *v124 - 1);
            memset(&v210[*v124 - 1], 255, *v123);
            v210[*v123 - 1 + *v124] = 0x80;
            uint64_t v125 = *v123 + (uint64_t)*v124;
            *((_DWORD *)v119 + 9) += v125;
            **v119 += v125;
            if (sub_D1C38(0x2Eu, 7))
            {
              int v126 = sub_D1C7C(0x2Eu);
              __uint64_t v127 = sub_DDEFC();
              uint64_t v128 = (const char *)sub_D1CB0(7);
              int v129 = *v123;
              if (v126)
              {
                printf("%lld %d AVE %s: H264FrameRec: Filler[%d] done %d %d\n", v127, 46, v128, v117, *v124, v129);
                __uint64_t v130 = sub_DDEFC();
                __uint64_t v131 = (const char *)sub_D1CB0(7);
                syslog(3, "%lld %d AVE %s: H264FrameRec: Filler[%d] done %d %d", v130, 46, v131, v117, *v124, *v123);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: H264FrameRec: Filler[%d] done %d %d", v127, 46, v128, v117, *v124, v129);
              }
              int v119 = v208;
            }
            v210 += v125;
            v121[2] = 0;
            *(void *)uint64_t v121 = 0;
          }
          char v118 = 0;
          uint64_t v117 = 1;
          uint64_t v13 = (uint64_t)a1;
        }
        while ((v120 & 1) != 0);
      }
      else
      {
        int v119 = (_DWORD **)(v13 + 51072);
      }
      if (*((_DWORD *)v119 + 2))
      {
        uint64_t v132 = 0;
        int v133 = (int *)(v13 + 28040);
        do
        {
          uint64_t v134 = 0;
          CFDataRef v135 = v133;
          do
          {
            if (!*(v135 - 2)) {
              break;
            }
            if (sub_D1C38(0x2Eu, 7))
            {
              int v136 = sub_D1C7C(0x2Eu);
              __uint64_t v137 = sub_DDEFC();
              int v138 = (const char *)sub_D1CB0(7);
              int v139 = *(v135 - 2);
              int v140 = *v135;
              if (v136)
              {
                printf("%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes = [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d\n", v137, 46, v138, v132, v134, v132, v134, v139, *(v135 - 1), v140);
                __uint64_t v141 = sub_DDEFC();
                uint64_t v142 = (const char *)sub_D1CB0(7);
                syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes = [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v141, 46, v142, v132, v134, v132, v134, *(v135 - 2), *(v135 - 1), *v135);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes = [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v137, 46, v138, v132, v134, v132, v134, v139, *(v135 - 1), v140);
              }
            }
            ++v134;
            v135 += 3;
          }
          while (v134 != 32);
          ++v132;
          v133 += 96;
        }
        while (v132 != 30);
        __uint64_t v143 = v210;
        if (sub_D1C38(0x2Eu, 7))
        {
          int v144 = sub_D1C7C(0x2Eu);
          __uint64_t v145 = sub_DDEFC();
          uint64_t v146 = (const char *)sub_D1CB0(7);
          int v147 = *((_DWORD *)v208 + 2);
          if (v144)
          {
            printf("%lld %d AVE %s: H264FrameRec: m_numCABACzeroWordToBeInserted %d bytes\n", v145, 46, v146, v147);
            __uint64_t v148 = sub_DDEFC();
            __uint64_t v191 = (const char *)sub_D1CB0(7);
            __uint64_t v143 = v210;
            syslog(3, "%lld %d AVE %s: H264FrameRec: m_numCABACzeroWordToBeInserted %d bytes", v148, 46, v191, *((_DWORD *)v208 + 2));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: m_numCABACzeroWordToBeInserted %d bytes", v145, 46, v146, v147);
          }
        }
        if (*((_DWORD *)v208 + 2))
        {
          unint64_t v149 = 0;
          do
          {
            long long v150 = &v143[v149];
            *(_WORD *)long long v150 = 0;
            v150[2] = 3;
            v149 += 3;
          }
          while (v149 < *((unsigned int *)v208 + 2));
        }
        if (!*v208)
        {
          uint64_t v16 = 3758097084;
          if (sub_D1C38(3u, 4))
          {
            int v156 = sub_D1C7C(3u);
            __uint64_t v157 = sub_DDEFC();
            __uint64_t v158 = (const char *)sub_D1CB0(4);
            if (v156)
            {
              printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer m_pLastOutputSlicesSizes = NULL\n", v157, 3, v158, "CopyEncodedFrameIntoExternalBuffer", 2217, "m_pLastOutputSlicesSizes != __null");
              sub_DDEFC();
              sub_D1CB0(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer m_pLastOutputSlicesSizes = NULL");
          }
          return v16;
        }
        if (sub_D1C38(0x2Eu, 7))
        {
          int v151 = sub_D1C7C(0x2Eu);
          __uint64_t v152 = sub_DDEFC();
          long long v153 = (const char *)sub_D1CB0(7);
          int v154 = **v208;
          if (v151)
          {
            printf("%lld %d AVE %s: H264FrameRec: previous *m_pLastOutputSlicesSizes %d bytes\n", v152, 46, v153, v154);
            __uint64_t v155 = sub_DDEFC();
            CFArrayRef v192 = (const char *)sub_D1CB0(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: previous *m_pLastOutputSlicesSizes %d bytes", v155, 46, v192, **v208);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: previous *m_pLastOutputSlicesSizes %d bytes", v152, 46, v153, v154);
          }
        }
        **v208 += *((_DWORD *)v208 + 2);
        if (sub_D1C38(0x2Eu, 7))
        {
          int v159 = sub_D1C7C(0x2Eu);
          __uint64_t v160 = sub_DDEFC();
          __uint64_t v161 = (const char *)sub_D1CB0(7);
          int v162 = **v208;
          if (v159)
          {
            printf("%lld %d AVE %s: H264FrameRec: after *m_pLastOutputSlicesSizes %d bytes\n", v160, 46, v161, v162);
            __uint64_t v163 = sub_DDEFC();
            int v193 = (const char *)sub_D1CB0(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: after *m_pLastOutputSlicesSizes %d bytes", v163, 46, v193, **v208);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: after *m_pLastOutputSlicesSizes %d bytes", v160, 46, v161, v162);
          }
        }
        uint64_t v164 = 0;
        uint64_t v165 = a1 + 7010;
        do
        {
          uint64_t v166 = 0;
          __uint64_t v167 = v165;
          do
          {
            if (!*(v167 - 2)) {
              break;
            }
            if (sub_D1C38(0x2Eu, 7))
            {
              int v168 = sub_D1C7C(0x2Eu);
              __uint64_t v169 = sub_DDEFC();
              unsigned int v170 = (const char *)sub_D1CB0(7);
              int v171 = *(v167 - 2);
              int v172 = *v167;
              if (v168)
              {
                printf("%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes = [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d\n", v169, 46, v170, v164, v166, v164, v166, v171, *(v167 - 1), v172);
                __uint64_t v173 = sub_DDEFC();
                int v174 = (const char *)sub_D1CB0(7);
                syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes = [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v173, 46, v174, v164, v166, v164, v166, *(v167 - 2), *(v167 - 1), *v167);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes = [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v169, 46, v170, v164, v166, v164, v166, v171, *(v167 - 1), v172);
              }
            }
            ++v166;
            v167 += 3;
          }
          while (v166 != 32);
          ++v164;
          v165 += 96;
        }
        while (v164 != 30);
        uint64_t v13 = (uint64_t)a1;
      }
      __uint64_t v112 = v199;
    }
    uint64_t v16 = *((unsigned int *)v112 + 175);
    __uint64_t v175 = v210;
    if (!v16) {
      return v16;
    }
    if (v16 == 1)
    {
      if (!v112[884]) {
        return 0;
      }
      if (sub_D1C38(0x2Eu, 7))
      {
        int v176 = sub_D1C7C(0x2Eu);
        __uint64_t v177 = sub_DDEFC();
        int v178 = (const char *)sub_D1CB0(7);
        int v179 = *((_DWORD *)v112 + 350);
        if (v176)
        {
          printf("%lld %d AVE %s: H264FrameRec: CopyEncodedFrameIntoExternalBuffer bRPUNutPresent - size %d\n", v177, 46, v178, v179);
          __uint64_t v180 = sub_DDEFC();
          __uint64_t v194 = (const char *)sub_D1CB0(7);
          __uint64_t v175 = v210;
          syslog(3, "%lld %d AVE %s: H264FrameRec: CopyEncodedFrameIntoExternalBuffer bRPUNutPresent - size %d", v180, 46, v194, *((_DWORD *)v112 + 350));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: CopyEncodedFrameIntoExternalBuffer bRPUNutPresent - size %d", v177, 46, v178, v179);
        }
      }
      size_t v184 = *((unsigned int *)v112 + 350);
      if (v184)
      {
        memcpy(v175, (const void *)(v13 + 68441), v184);
        return 0;
      }
      uint64_t v16 = 3758097084;
      if (sub_D1C38(3u, 4))
      {
        int v185 = sub_D1C7C(3u);
        __uint64_t v186 = sub_DDEFC();
        __uint64_t v187 = (const char *)sub_D1CB0(4);
        if (v185)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: RPUNutSize = 0\n", v186, 3, v187, "CopyEncodedFrameIntoExternalBuffer", 2252, "m_VideoParamsDriver.RPUNutSize != 0");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: RPUNutSize = 0");
      }
    }
    else
    {
      uint64_t v16 = 3758097084;
      if (sub_D1C38(3u, 4))
      {
        int v181 = sub_D1C7C(3u);
        __uint64_t v182 = sub_DDEFC();
        int v183 = (const char *)sub_D1CB0(4);
        if (v181)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR - codecID not recognized. FAIL\n", v182, 3, v183, "CopyEncodedFrameIntoExternalBuffer", 2269, "false");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR - codecID not recognized. FAIL");
      }
    }
  }
  else
  {
    uint64_t v16 = 3758097084;
    if (sub_D1C38(3u, 4))
    {
      int v39 = sub_D1C7C(3u);
      __uint64_t v40 = sub_DDEFC();
      __uint64_t v41 = (const char *)sub_D1CB0(4);
      if (v39)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer buf == NULL\n", v40, 3, v41, "CopyEncodedFrameIntoExternalBuffer", 2041, "buf != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer buf == NULL");
    }
  }
  return v16;
}

uint64_t sub_A5D08(uint64_t a1, int *a2, int a3)
{
  uint64_t v6 = a1 + 67932;
  uint64_t v7 = a1 + 51272;
  unsigned int v8 = sub_BEA38(*(_DWORD *)(a1 + 68256), 2);
  memset(v178, 0, 44);
  CFTypeRef cf = 0;
  if (*(unsigned char *)(v6 + 413))
  {
    if (!*(void *)(v7 + 80))
    {
      if (sub_D1C38(0x2Eu, 4))
      {
        int v9 = sub_D1C7C(0x2Eu);
        __uint64_t v10 = sub_DDEFC();
        __uint64_t v11 = (const char *)sub_D1CB0(4);
        if (v9)
        {
          printf("%lld %d AVE %s: H264FrameRec WARNING: HEIF -> nobody wants this SPS PPS header. dump it.\n", v10, 46, v11);
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: HEIF -> nobody wants this SPS PPS header. dump it.");
      }
      return 0;
    }
  }
  else if (!*(void *)(v7 + 72))
  {
    if (sub_D1C38(0x2Eu, 4))
    {
      int v31 = sub_D1C7C(0x2Eu);
      __uint64_t v32 = sub_DDEFC();
      int v33 = (const char *)sub_D1CB0(4);
      if (v31)
      {
        printf("%lld %d AVE %s: H264FrameRec WARNING: nobody wants this SPS PPS header. dump it.\n", v32, 46, v33);
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this SPS PPS header. dump it.");
    }
    return 0;
  }
  if (sub_D1C38(0x2Eu, 7))
  {
    int v12 = sub_D1C7C(0x2Eu);
    __uint64_t v13 = sub_DDEFC();
    CFAllocatorRef v14 = (const char *)sub_D1CB0(7);
    if (v12)
    {
      printf("%lld %d AVE %s: H264FrameRec: Sending SPS PPS\n", v13, 46, v14);
      __uint64_t v15 = sub_DDEFC();
      __uint64_t v157 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: H264FrameRec: Sending SPS PPS", v15, 46, v157);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264FrameRec: Sending SPS PPS", v13, 46, v14);
    }
  }
  if (!a2)
  {
    uint64_t v20 = 3758097084;
    if (sub_D1C38(3u, 4))
    {
      int v25 = sub_D1C7C(3u);
      __uint64_t v26 = sub_DDEFC();
      __uint64_t v27 = (const char *)sub_D1CB0(4);
      if (v25)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendSPSandPPS Frame == NULL\n", v26, 3, v27, "SendSPSandPPS", 2316, "Frame != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendSPSandPPS Frame == NULL");
    }
    goto LABEL_36;
  }
  if (a2[229] >= 0x1F)
  {
    uint64_t v20 = 3758097084;
    if (sub_D1C38(3u, 4))
    {
      int v28 = sub_D1C7C(3u);
      __uint64_t v29 = sub_DDEFC();
      __uint64_t v30 = (const char *)sub_D1CB0(4);
      if (v28)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendSPSandPPS Frame->PlaneNumber = %d\n", v29, 3, v30, "SendSPSandPPS", 2317, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", a2[229]);
        __uint64_t v29 = sub_DDEFC();
        __uint64_t v30 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendSPSandPPS Frame->PlaneNumber = %d", v29, 3, v30, "SendSPSandPPS", 2317, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", a2[229]);
    }
LABEL_36:
    int v17 = 0;
    goto LABEL_37;
  }
  uint64_t v16 = sub_A76AC(a1, v8, (CMBlockBufferRef *)&cf);
  if (v16)
  {
    int v17 = v16;
    int v176 = (const void **)(a1 + 245264);
    if (!*(unsigned char *)(v6 + 204) || a2[40]) {
      goto LABEL_16;
    }
    __uint64_t v43 = sub_A76AC(a1, v8, (CMBlockBufferRef *)&cf);
    *int v176 = v43;
    if (v43)
    {
      if (sub_D1C38(0x2Eu, 7))
      {
        int v44 = sub_D1C7C(0x2Eu);
        __uint64_t v45 = sub_DDEFC();
        int v46 = (const char *)sub_D1CB0(7);
        int v47 = *(_DWORD *)(a1 + 245272);
        if (v44)
        {
          printf("%lld %d AVE %s: H264FrameRec: SendSPSandPPS bUseElementaryStreamOutput CreateBuffer %p %d\n", v45, 46, v46, *v176, v47);
          __uint64_t v48 = sub_DDEFC();
          int v49 = (const char *)sub_D1CB0(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: SendSPSandPPS bUseElementaryStreamOutput CreateBuffer %p %d", v48, 46, v49, *(const void **)(a1 + 245264), *(void *)(a1 + 245272));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: SendSPSandPPS bUseElementaryStreamOutput CreateBuffer %p %d", v45, 46, v46, *v176, v47);
        }
      }
LABEL_16:
      __uint64_t v18 = IOSurfaceLookup(*(_DWORD *)(a1 + 25788));
      if (!v18)
      {
        uint64_t v20 = 3758097084;
        if (sub_D1C38(3u, 4))
        {
          int v38 = sub_D1C7C(3u);
          __uint64_t v39 = sub_DDEFC();
          __uint64_t v40 = (const char *)sub_D1CB0(4);
          if (v38)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SPSPPSBufferFromFWSurface IOSurfaceLookup failed.\n", v39, 3, v40, "SendSPSandPPS", 2333, "SPSPPSBufferFromFWSurface != __null");
            __uint64_t v41 = sub_DDEFC();
            __uint64_t v160 = (const char *)sub_D1CB0(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SPSPPSBufferFromFWSurface IOSurfaceLookup failed.", v41, 3, v160, "SendSPSandPPS", 2333, "SPSPPSBufferFromFWSurface != __null");
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SPSPPSBufferFromFWSurface IOSurfaceLookup failed.", v39, 3, v40, "SendSPSandPPS", 2333, "SPSPPSBufferFromFWSurface != __null");
          }
        }
        goto LABEL_37;
      }
      __uint64_t v19 = v18;
      if (IOSurfaceLock(v18, 0, 0))
      {
        uint64_t v20 = 3758097084;
        if (sub_D1C38(3u, 4))
        {
          int v21 = sub_D1C7C(3u);
          __uint64_t v22 = sub_DDEFC();
          int v23 = (const char *)sub_D1CB0(4);
          if (v21)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: IOSurfaceLock SPSPPSBufferFromFWSurface failed.\n", v22, 3, v23, "SendSPSandPPS", 2336, "err2 == 0");
            __uint64_t v24 = sub_DDEFC();
            __uint64_t v158 = (const char *)sub_D1CB0(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: IOSurfaceLock SPSPPSBufferFromFWSurface failed.", v24, 3, v158, "SendSPSandPPS", 2336, "err2 == 0");
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: IOSurfaceLock SPSPPSBufferFromFWSurface failed.", v22, 3, v23, "SendSPSandPPS", 2336, "err2 == 0");
          }
        }
        goto LABEL_117;
      }
      BaseAddress = (unsigned int *)IOSurfaceGetBaseAddress(v19);
      if (!BaseAddress)
      {
        uint64_t v20 = 3758097084;
        if (sub_D1C38(3u, 4))
        {
          int v62 = sub_D1C7C(3u);
          __uint64_t v63 = sub_DDEFC();
          int v64 = (const char *)sub_D1CB0(4);
          if (v62)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SPSPPSBufferFromFW = NULL.\n", v63, 3, v64, "SendSPSandPPS", 2339, "SPSPPSBufferFromFW != __null");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SPSPPSBufferFromFW = NULL.");
        }
        goto LABEL_116;
      }
      __uint64_t v175 = v17;
      if (a3)
      {
        __uint64_t v173 = v19;
        uint64_t v51 = *(void *)(a1 + 8 * a2[229] + 27072);
        if (!v51)
        {
          uint64_t v20 = 3758097084;
          __uint64_t v19 = v173;
          if (sub_D1C38(3u, 4))
          {
            int v71 = sub_D1C7C(3u);
            __uint64_t v72 = sub_DDEFC();
            int v73 = (const char *)sub_D1CB0(4);
            if (v71)
            {
              printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_CodedBuffPointerDataHeader[%d] == NULL\n", v72, 3, v73, "SendSPSandPPS", 2348, "codedHeader != __null", a2[229]);
              __uint64_t v72 = sub_DDEFC();
              sub_D1CB0(4);
              __uint64_t v19 = v173;
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_CodedBuffPointerDataHeader[%d] == NULL", v72);
          }
          goto LABEL_116;
        }
        int v174 = BaseAddress;
        if (sub_D1C38(0x2Eu, 7))
        {
          int v52 = sub_D1C7C(0x2Eu);
          __uint64_t v53 = sub_DDEFC();
          uint64_t v54 = (const char *)sub_D1CB0(7);
          int v55 = *(_DWORD *)(v51 + 152);
          if (v52)
          {
            printf("%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_SPSPPSHeaderBits %d\n", v53, 46, v54, a2[229], v55);
            __uint64_t v56 = sub_DDEFC();
            int v57 = (const char *)sub_D1CB0(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_SPSPPSHeaderBits %d", v56, 46, v57, a2[229], *(_DWORD *)(v51 + 152));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_SPSPPSHeaderBits %d", v53, 46, v54, a2[229], v55);
          }
        }
        for (uint64_t i = 0; i != 16; i += 4)
        {
          if (sub_D1C38(0x2Eu, 7))
          {
            int v79 = sub_D1C7C(0x2Eu);
            __uint64_t v80 = sub_DDEFC();
            int v81 = (const char *)sub_D1CB0(7);
            int v82 = *(_DWORD *)(v51 + i);
            if (v79)
            {
              printf("%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_I_MbCnt %d\n", v80, 46, v81, a2[229], v82);
              __uint64_t v83 = sub_DDEFC();
              size_t v84 = (const char *)sub_D1CB0(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_I_MbCnt %d", v83, 46, v84, a2[229], *(_DWORD *)(v51 + i));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_I_MbCnt %d", v80, 46, v81, a2[229], v82);
            }
          }
          if (sub_D1C38(0x2Eu, 7))
          {
            int v85 = sub_D1C7C(0x2Eu);
            __uint64_t v86 = sub_DDEFC();
            int v87 = (const char *)sub_D1CB0(7);
            int v88 = *(_DWORD *)(v51 + i + 16);
            if (v85)
            {
              printf("%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_P_MbCnt %d\n", v86, 46, v87, a2[229], v88);
              __uint64_t v89 = sub_DDEFC();
              int v90 = (const char *)sub_D1CB0(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_P_MbCnt %d", v89, 46, v90, a2[229], *(_DWORD *)(v51 + i + 16));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_P_MbCnt %d", v86, 46, v87, a2[229], v88);
            }
          }
        }
        unsigned int v74 = *(_DWORD *)(v51 + 152);
        __uint64_t v19 = v173;
        if (v74 < 8)
        {
          uint64_t v20 = 3758097084;
          if (sub_D1C38(3u, 4))
          {
            int v91 = sub_D1C7C(3u);
            __uint64_t v76 = sub_DDEFC();
            __uint64_t v92 = (const char *)sub_D1CB0(4);
            if (v91)
            {
              printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader->ui32_SPSPPSHeaderBits = 0 (m_CodedBuffPointerDataHeader[%d])\n", v76, 3, v92, "SendSPSandPPS", 2359, "SPSPPSHeaderSize != 0", a2[229]);
              __uint64_t v76 = sub_DDEFC();
              sub_D1CB0(4);
              __uint64_t v19 = v173;
            }
LABEL_115:
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader->ui32_SPSPPSHeaderBits = 0 (m_CodedBuffPointerDataHeader[%d])", v76);
            goto LABEL_116;
          }
          goto LABEL_116;
        }
      }
      else
      {
        int v174 = BaseAddress;
        if (sub_D1C38(0x2Eu, 7))
        {
          int v65 = sub_D1C7C(0x2Eu);
          __uint64_t v66 = sub_DDEFC();
          int v67 = (const char *)sub_D1CB0(7);
          int v68 = a2[5480];
          if (v65)
          {
            printf("%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_SPSPPSHeaderBits %d\n", v66, 46, v67, a2[229], v68);
            __uint64_t v69 = sub_DDEFC();
            __uint64_t v70 = (const char *)sub_D1CB0(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_SPSPPSHeaderBits %d", v69, 46, v70, a2[229], a2[5480]);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_SPSPPSHeaderBits %d", v66, 46, v67, a2[229], v68);
          }
        }
        unsigned int v74 = a2[5480];
        if (v74 <= 7)
        {
          uint64_t v20 = 3758097084;
          if (sub_D1C38(3u, 4))
          {
            int v75 = sub_D1C7C(3u);
            __uint64_t v76 = sub_DDEFC();
            __uint64_t v77 = (const char *)sub_D1CB0(4);
            if (v75)
            {
              printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader->ui32_SPSPPSHeaderBits = 0 (m_CodedBuffPointerDataHeader[%d])\n", v76, 3, v77, "SendSPSandPPS", 2365, "SPSPPSHeaderSize != 0", a2[229]);
              __uint64_t v76 = sub_DDEFC();
              sub_D1CB0(4);
            }
            goto LABEL_115;
          }
LABEL_116:
          IOSurfaceUnlock(v19, 0, 0);
LABEL_117:
          CFRelease(v19);
          goto LABEL_37;
        }
      }
      uint64_t v93 = v74 >> 3;
      if (sub_D1C38(0x2Eu, 7))
      {
        int v94 = sub_D1C7C(0x2Eu);
        __uint64_t v95 = sub_DDEFC();
        uint64_t v96 = (const char *)sub_D1CB0(7);
        if (v94)
        {
          printf("%lld %d AVE %s: H264FrameRec: m_SPSPPSHeaderSize from FW = %d\n", v95, 46, v96, v93);
          __uint64_t v97 = sub_DDEFC();
          int v162 = (const char *)sub_D1CB0(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: m_SPSPPSHeaderSize from FW = %d", v97, 46, v162, v93);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: m_SPSPPSHeaderSize from FW = %d", v95, 46, v96, v93);
        }
      }
      int v98 = *(_DWORD *)(v6 + 324);
      if (v98 == 1)
      {
        int v17 = v175;
        sub_4B534(v174, (uint64_t)v175, v93, v178, *(_DWORD *)v6, *(_DWORD *)(v7 + 16276));
        if (sub_D1C38(0x2Eu, 7))
        {
          int v104 = sub_D1C7C(0x2Eu);
          __uint64_t v105 = sub_DDEFC();
          int v106 = (const char *)sub_D1CB0(7);
          if (v104)
          {
            printf("%lld %d AVE %s: H264FrameRec: CopySPSPPSHeader m_SPSPPSHeaderSize %d (SPS %d + PPS %d)\n", v105, 46, v106, v93, DWORD1(v178[0]), DWORD2(v178[0]));
            __uint64_t v107 = sub_DDEFC();
            size_t v108 = (const char *)sub_D1CB0(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: CopySPSPPSHeader m_SPSPPSHeaderSize %d (SPS %d + PPS %d)", v107, 46, v108, v93, DWORD1(v178[0]), DWORD2(v178[0]));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: CopySPSPPSHeader m_SPSPPSHeaderSize %d (SPS %d + PPS %d)", v105, 46, v106, v93, DWORD1(v178[0]), DWORD2(v178[0]));
          }
          int v17 = v175;
        }
        if (*(unsigned char *)(v6 + 204))
        {
          if (!a2[40])
          {
            sub_4B534(v174, (uint64_t)*v176, v93, v178, *(_DWORD *)v6, *(_DWORD *)(v7 + 16276));
            *(void *)(a1 + 245272) = v93;
            if (sub_D1C38(0x2Eu, 7))
            {
              int v115 = sub_D1C7C(0x2Eu);
              __uint64_t v116 = sub_DDEFC();
              uint64_t v117 = (const char *)sub_D1CB0(7);
              if (v115)
              {
                printf("%lld %d AVE %s: H264FrameRec: SendSPSandPPS bUseElementaryStreamOutput CopyVPSSPSPPSHeader %p %d\n", v116, 46, v117, *v176, *(_DWORD *)(a1 + 245272));
                sub_DDEFC();
                sub_D1CB0(7);
              }
              syslog(3, "%lld %d AVE %s: H264FrameRec: SendSPSandPPS bUseElementaryStreamOutput CopyVPSSPSPPSHeader %p %d");
              goto LABEL_135;
            }
          }
        }
      }
      else
      {
        int v17 = v175;
        if (v98)
        {
          uint64_t v20 = 3758097084;
          if (sub_D1C38(3u, 4))
          {
            int v109 = sub_D1C7C(3u);
            __uint64_t v110 = sub_DDEFC();
            int v111 = (const char *)sub_D1CB0(4);
            if (v109)
            {
              printf("%lld %d AVE %s: %s:%d %s | SendSPSAndPPS ERROR: codecType not recognized)\n", v110, 3, v111, "SendSPSandPPS", 2402, "false");
              sub_DDEFC();
              sub_D1CB0(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | SendSPSAndPPS ERROR: codecType not recognized)");
          }
          goto LABEL_116;
        }
        sub_4A764(v174, (uint64_t)v175, v93, v178, *(_DWORD *)(v7 + 16276));
        if (sub_D1C38(0x2Eu, 7))
        {
          int v99 = sub_D1C7C(0x2Eu);
          __uint64_t v100 = sub_DDEFC();
          __uint64_t v101 = (const char *)sub_D1CB0(7);
          if (v99)
          {
            printf("%lld %d AVE %s: H264FrameRec: CopySPSPPSHeader m_SPSPPSHeaderSize %d (SPS %d + PPS %d)\n", v100, 46, v101, v93, DWORD1(v178[0]), DWORD2(v178[0]));
            __uint64_t v102 = sub_DDEFC();
            int v103 = (const char *)sub_D1CB0(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: CopySPSPPSHeader m_SPSPPSHeaderSize %d (SPS %d + PPS %d)", v102, 46, v103, v93, DWORD1(v178[0]), DWORD2(v178[0]));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: CopySPSPPSHeader m_SPSPPSHeaderSize %d (SPS %d + PPS %d)", v100, 46, v101, v93, DWORD1(v178[0]), DWORD2(v178[0]));
          }
          int v17 = v175;
        }
        if (*(unsigned char *)(v6 + 204))
        {
          if (!a2[40])
          {
            sub_4A764(v174, (uint64_t)*v176, v93, v178, *(_DWORD *)(v7 + 16276));
            *(void *)(a1 + 245272) = v93;
            if (sub_D1C38(0x2Eu, 7))
            {
              int v112 = sub_D1C7C(0x2Eu);
              __uint64_t v113 = sub_DDEFC();
              __uint64_t v114 = (const char *)sub_D1CB0(7);
              if (v112)
              {
                printf("%lld %d AVE %s: H264FrameRec: SendSPSandPPS bUseElementaryStreamOutput CopySPSPPSHeader %p %d\n", v113, 46, v114, *v176, *(_DWORD *)(a1 + 245272));
                sub_DDEFC();
                sub_D1CB0(7);
              }
              syslog(3, "%lld %d AVE %s: H264FrameRec: SendSPSandPPS bUseElementaryStreamOutput CopySPSPPSHeader %p %d");
LABEL_135:
              int v17 = v175;
            }
          }
        }
      }
      if (*(unsigned char *)(v6 + 413))
      {
        uint64_t v118 = *(void *)(v7 + 80);
        if (v118 != 1)
        {
          if (*(_DWORD *)v6 <= 1u)
          {
            uint64_t v119 = sub_9F994(a1, v118, v17, (unsigned int *)v178);
            if (v119)
            {
              uint64_t v20 = v119;
              if (!sub_D1C38(3u, 4)) {
                goto LABEL_116;
              }
              int v120 = sub_D1C7C(3u);
              __uint64_t v121 = sub_DDEFC();
              uint64_t v122 = (const char *)sub_D1CB0(4);
              if (v120)
              {
                uint64_t v123 = v19;
                int v124 = 2425;
LABEL_149:
                printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreatevideoFormatDesc failed.\n", v121, 3, v122, "SendSPSandPPS", v124, "err == noErr");
                sub_DDEFC();
                __uint64_t v19 = v123;
                sub_D1CB0(4);
                goto LABEL_187;
              }
              goto LABEL_187;
            }
            goto LABEL_164;
          }
          sub_DB814(a1 + 158424, a1 + 239320, 4);
          sub_DB868(a1 + 158424, (unsigned char *)(a1 + 239324), 6);
          uint64_t v132 = sub_A0CC0(a1, *(void *)(v7 + 80), (unsigned __int8 *)v17, v93, (uint64_t)a2);
          if (v132)
          {
            uint64_t v20 = v132;
            if (!sub_D1C38(0x2Eu, 4)) {
              goto LABEL_116;
            }
            int v133 = sub_D1C7C(0x2Eu);
            __uint64_t v134 = sub_DDEFC();
            CFDataRef v135 = (const char *)sub_D1CB0(4);
            if (v133)
            {
              int v17 = v175;
              printf("%lld %d AVE %s: %s::%s:%d %s | failed to create MV-HEVC format descriptor %p %d %p\n", v134, 46, v135, "AVE_FrameRecv", "SendSPSandPPS", 2436, "err == noErr", v175, v93, a2);
              __uint64_t v134 = sub_DDEFC();
              int v136 = (const char *)sub_D1CB0(4);
              uint64_t v171 = v93;
              int v172 = a2;
              unsigned int v170 = v175;
              uint64_t v137 = 2436;
LABEL_163:
              uint64_t v169 = v137;
              uint64_t v164 = v136;
LABEL_190:
              syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create MV-HEVC format descriptor %p %d %p", v134, 46, v164, "AVE_FrameRecv", "SendSPSandPPS", v169, "err == noErr", v170, v171, v172);
              goto LABEL_116;
            }
            uint64_t v171 = v93;
            int v172 = a2;
            int v17 = v175;
            unsigned int v170 = v175;
            uint64_t v156 = 2436;
            goto LABEL_189;
          }
          goto LABEL_164;
        }
      }
      else
      {
        uint64_t v125 = *(void *)(v7 + 72);
        if (v125 != 1)
        {
          if (*(_DWORD *)v6 <= 1u)
          {
            uint64_t v126 = sub_9F994(a1, v125, v17, (unsigned int *)v178);
            if (v126)
            {
              uint64_t v20 = v126;
              if (!sub_D1C38(3u, 4)) {
                goto LABEL_116;
              }
              int v127 = sub_D1C7C(3u);
              __uint64_t v121 = sub_DDEFC();
              uint64_t v122 = (const char *)sub_D1CB0(4);
              if (v127)
              {
                uint64_t v123 = v19;
                int v124 = 2472;
                goto LABEL_149;
              }
LABEL_187:
              syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreatevideoFormatDesc failed.");
              goto LABEL_116;
            }
            goto LABEL_164;
          }
          sub_DB814(a1 + 158424, a1 + 239320, 4);
          sub_DB868(a1 + 158424, (unsigned char *)(a1 + 239324), 6);
          uint64_t v138 = sub_A0CC0(a1, *(void *)(v7 + 72), (unsigned __int8 *)v17, v93, (uint64_t)a2);
          if (v138)
          {
            uint64_t v20 = v138;
            if (!sub_D1C38(0x2Eu, 4)) {
              goto LABEL_116;
            }
            int v139 = sub_D1C7C(0x2Eu);
            __uint64_t v134 = sub_DDEFC();
            CFDataRef v135 = (const char *)sub_D1CB0(4);
            if (v139)
            {
              int v17 = v175;
              printf("%lld %d AVE %s: %s::%s:%d %s | failed to create MV-HEVC format descriptor %p %d %p\n", v134, 46, v135, "AVE_FrameRecv", "SendSPSandPPS", 2483, "err == noErr", v175, v93, a2);
              __uint64_t v134 = sub_DDEFC();
              int v136 = (const char *)sub_D1CB0(4);
              uint64_t v171 = v93;
              int v172 = a2;
              unsigned int v170 = v175;
              uint64_t v137 = 2483;
              goto LABEL_163;
            }
            uint64_t v171 = v93;
            int v172 = a2;
            int v17 = v175;
            unsigned int v170 = v175;
            uint64_t v156 = 2483;
LABEL_189:
            uint64_t v169 = v156;
            uint64_t v164 = v135;
            goto LABEL_190;
          }
LABEL_164:
          if (sub_D1C38(0x2Eu, 7))
          {
            int v140 = sub_D1C7C(0x2Eu);
            __uint64_t v141 = sub_DDEFC();
            uint64_t v142 = (const char *)sub_D1CB0(7);
            if (v140)
            {
              printf("%lld %d AVE %s: H264FrameRec: VPS  size %d\n", v141, 46, v142, LODWORD(v178[0]));
              __uint64_t v143 = sub_DDEFC();
              uint64_t v165 = (const char *)sub_D1CB0(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: VPS  size %d", v143, 46, v165, LODWORD(v178[0]));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: VPS  size %d", v141, 46, v142, LODWORD(v178[0]));
            }
          }
          if (sub_D1C38(0x2Eu, 7))
          {
            int v144 = sub_D1C7C(0x2Eu);
            __uint64_t v145 = sub_DDEFC();
            uint64_t v146 = (const char *)sub_D1CB0(7);
            if (v144)
            {
              printf("%lld %d AVE %s: H264FrameRec: SPS  size %d\n", v145, 46, v146, DWORD1(v178[0]));
              __uint64_t v147 = sub_DDEFC();
              uint64_t v166 = (const char *)sub_D1CB0(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: SPS  size %d", v147, 46, v166, DWORD1(v178[0]));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: SPS  size %d", v145, 46, v146, DWORD1(v178[0]));
            }
          }
          if (sub_D1C38(0x2Eu, 7))
          {
            int v148 = sub_D1C7C(0x2Eu);
            __uint64_t v149 = sub_DDEFC();
            long long v150 = (const char *)sub_D1CB0(7);
            if (v148)
            {
              printf("%lld %d AVE %s: H264FrameRec: PPS1 size %d\n", v149, 46, v150, DWORD2(v178[0]));
              __uint64_t v151 = sub_DDEFC();
              __uint64_t v167 = (const char *)sub_D1CB0(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: PPS1 size %d", v151, 46, v167, DWORD2(v178[0]));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: PPS1 size %d", v149, 46, v150, DWORD2(v178[0]));
            }
          }
          if (sub_D1C38(0x2Eu, 7))
          {
            int v152 = sub_D1C7C(0x2Eu);
            __uint64_t v153 = sub_DDEFC();
            int v154 = (const char *)sub_D1CB0(7);
            if (v152)
            {
              printf("%lld %d AVE %s: H264FrameRec: PPS2 size %d\n", v153, 46, v154, HIDWORD(v178[0]));
              __uint64_t v155 = sub_DDEFC();
              int v168 = (const char *)sub_D1CB0(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: PPS2 size %d", v155, 46, v168, HIDWORD(v178[0]));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: PPS2 size %d", v153, 46, v154, HIDWORD(v178[0]));
            }
          }
LABEL_184:
          sub_5338(*(void **)(a1 + 71552), a2[3], v17, v93);
          uint64_t v20 = 0;
          goto LABEL_116;
        }
      }
      if (*(void *)(v7 + 8) && *(void *)v7)
      {
        if (sub_D1C38(0x2Eu, 7))
        {
          int v128 = sub_D1C7C(0x2Eu);
          __uint64_t v129 = sub_DDEFC();
          __uint64_t v130 = (const char *)sub_D1CB0(7);
          if (v128)
          {
            printf("%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame on %d bytes (SPS PPS)\n", v129, 46, v130, v93);
            __uint64_t v131 = sub_DDEFC();
            __uint64_t v163 = (const char *)sub_D1CB0(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame on %d bytes (SPS PPS)", v131, 46, v163, v93);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame on %d bytes (SPS PPS)", v129, 46, v130, v93);
          }
          int v17 = v175;
        }
        (*(void (**)(void, char *, uint64_t, void, void))(v7 + 8))(*(void *)v7, v17, v93, 0, *(unsigned int *)(v6 + 324));
      }
      *(unsigned char *)(a1 + 25784) = 1;
      goto LABEL_184;
    }
    if (sub_D1C38(3u, 4))
    {
      int v58 = sub_D1C7C(3u);
      __uint64_t v59 = sub_DDEFC();
      __uint64_t v60 = (const char *)sub_D1CB0(4);
      if (v58)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreateBuffer failed 2.\n", v59, 3, v60, "SendSPSandPPS", 2327, "m_SPSPPSFinalOutputbUseElementaryStreamOutput != __null");
        __uint64_t v61 = sub_DDEFC();
        __uint64_t v161 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreateBuffer failed 2.", v61, 3, v161, "SendSPSandPPS", 2327, "m_SPSPPSFinalOutputbUseElementaryStreamOutput != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreateBuffer failed 2.", v59, 3, v60, "SendSPSandPPS", 2327, "m_SPSPPSFinalOutputbUseElementaryStreamOutput != __null");
      }
      uint64_t v20 = 3758097085;
    }
    else
    {
      uint64_t v20 = 3758097085;
    }
  }
  else if (sub_D1C38(3u, 4))
  {
    int v34 = sub_D1C7C(3u);
    __uint64_t v35 = sub_DDEFC();
    int v36 = (const char *)sub_D1CB0(4);
    if (v34)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreateBuffer failed.\n", v35, 3, v36, "SendSPSandPPS", 2322, "FinalOutput != __null");
      __uint64_t v37 = sub_DDEFC();
      int v159 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreateBuffer failed.", v37, 3, v159, "SendSPSandPPS", 2322, "FinalOutput != __null");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreateBuffer failed.", v35, 3, v36, "SendSPSandPPS", 2322, "FinalOutput != __null");
    }
    int v17 = 0;
    uint64_t v20 = 3758097085;
  }
  else
  {
    int v17 = 0;
    uint64_t v20 = 3758097085;
  }
LABEL_37:
  sub_A40B4(a1, v17);
  if (cf) {
    CFRelease(cf);
  }
  return v20;
}

char *sub_A76AC(uint64_t a1, size_t size, CMBlockBufferRef *a3)
{
  dataPointerOut = 0;
  if (size)
  {
    uint64_t v4 = (_DWORD *)(a1 + 239348);
    if (*(unsigned char *)(a1 + 68345))
    {
      if (*(void *)(a1 + 51352) != 1 && *v4 != 2)
      {
        uint64_t v5 = (char *)CFAllocatorAllocate(*(CFAllocatorRef *)(a1 + 51304), size, 0);
LABEL_15:
        dataPointerOut = v5;
        goto LABEL_16;
      }
    }
    else if (*(void *)(a1 + 51344) != 1 && *v4 != 2)
    {
      VTEncoderSessionCreateCMBlockBuffer();
      CMBlockBufferGetDataPointer(*a3, 0, 0, 0, &dataPointerOut);
LABEL_16:
      if (sub_D1C38(0x2Eu, 7))
      {
        int v9 = sub_D1C7C(0x2Eu);
        __uint64_t v10 = sub_DDEFC();
        __uint64_t v11 = (const char *)sub_D1CB0(7);
        if (v9)
        {
          printf("%lld %d AVE %s: H264FrameRec: CreateBuffer %p size %ld\n", v10, 46, v11, dataPointerOut, size);
          sub_DDEFC();
          sub_D1CB0(7);
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec: CreateBuffer %p size %ld");
      }
      return dataPointerOut;
    }
    if (*v4 == 2 && *(void *)(a1 + 51296))
    {
      VTMotionEstimationProcessorSessionCreateMotionVectorPixelBuffer();
      goto LABEL_16;
    }
    uint64_t v5 = (char *)malloc_type_malloc(size, 0x1B9D6B20uLL);
    goto LABEL_15;
  }
  if (sub_D1C38(0x2Eu, 4))
  {
    int v6 = sub_D1C7C(0x2Eu);
    __uint64_t v7 = sub_DDEFC();
    unsigned int v8 = (const char *)sub_D1CB0(4);
    if (v6)
    {
      printf("%lld %d AVE %s: FIG: H264FrameRec: CreateBuffer with size 0\n", v7, 46, v8);
      sub_DDEFC();
      sub_D1CB0(4);
    }
    syslog(3, "%lld %d AVE %s: FIG: H264FrameRec: CreateBuffer with size 0");
  }
  return dataPointerOut;
}

__uint64_t sub_A78D0(uint64_t a1, uint64_t a2)
{
  CMBlockBufferRef v232 = 0;
  if (!a2)
  {
    if (sub_D1C38(3u, 4))
    {
      int v16 = sub_D1C7C(3u);
      __uint64_t v17 = sub_DDEFC();
      __uint64_t v18 = (const char *)sub_D1CB0(4);
      if (v16)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: ProcessAndEmitLrmeStats with Frame == NULL.\n", v17, 3, v18, "ProcessAndEmitLrmeStats", 2652, "false");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: ProcessAndEmitLrmeStats with Frame == NULL.");
    }
    goto LABEL_25;
  }
  if (*(_DWORD *)(a1 + 239348) != 2)
  {
    if (sub_D1C38(3u, 4))
    {
      int v19 = sub_D1C7C(3u);
      __uint64_t v20 = sub_DDEFC();
      int v21 = (const char *)sub_D1CB0(4);
      if (v19)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec WARNING: ProcessAndEmitLrmeStats called with AVE_ClientType_LRME == false.\n", v20, 3, v21, "ProcessAndEmitLrmeStats", 2654, "false");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec WARNING: ProcessAndEmitLrmeStats called with AVE_ClientType_LRME == false.");
    }
LABEL_25:
    sub_A1574(a1, a2, 0);
    return 0;
  }
  __uint64_t v4 = 3758097084;
  uint64_t v5 = (_DWORD *)(a2 + 23468);
  if (*(_DWORD *)(a2 + 23468) == 3)
  {
    int v228 = 0;
    uint64_t v230 = (uint64_t *)(a1 + 51272);
    uint64_t v6 = 0;
    int v231 = 0;
    __uint64_t v7 = 0;
    int v8 = -536870212;
LABEL_5:
    uint64_t v9 = v6;
    sub_5338(*(void **)(a1 + 71552), *(_DWORD *)(a2 + 12), v7, v6);
    __uint64_t v10 = v228;
    if (sub_D1C38(0x2Eu, 7))
    {
      int v11 = sub_D1C7C(0x2Eu);
      __uint64_t v12 = sub_DDEFC();
      __uint64_t v13 = (const char *)sub_D1CB0(7);
      int v14 = *(_DWORD *)(a2 + 160);
      if (v11)
      {
        printf("%lld %d AVE %s: ARK H264FrameRec:ProcessAndEmitLrmeStats %d\n", v12, 46, v13, v14);
        __uint64_t v15 = sub_DDEFC();
        int v204 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: ARK H264FrameRec:ProcessAndEmitLrmeStats %d", v15, 46, v204, *(_DWORD *)(a2 + 160));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: ARK H264FrameRec:ProcessAndEmitLrmeStats %d", v12, 46, v13, v14);
      }
    }
    if (*v5 == 3) {
      goto LABEL_34;
    }
    __uint64_t v40 = (void (*)(uint64_t, char *, uint64_t, void *, void))v230[1];
    if (v40)
    {
      uint64_t v41 = *v230;
      if (*v230)
      {
        v233[0] = *(unsigned int *)(a2 + 160);
        v233[1] = -1;
        uint64_t v42 = *(int *)(a2 + 2304);
        v233[2] = *(void *)(a2 + 2296);
        v233[3] = v42;
        v40(v41, v228, v9, v233, *(unsigned int *)(a1 + 68256));
LABEL_34:
        __uint64_t v4 = 0;
LABEL_35:
        int v36 = v231;
        goto LABEL_36;
      }
    }
    if (!sub_D1C38(3u, 4)) {
      goto LABEL_35;
    }
    int v43 = sub_D1C7C(3u);
    __uint64_t v44 = sub_DDEFC();
    __uint64_t v45 = (const char *)sub_D1CB0(4);
    int v36 = v231;
    if (v43)
    {
      printf("%lld %d AVE %s: %s:%d %s | OF: Session callbacks are not set properly, output will be dropped\n", v44, 3, v45, "ProcessAndEmitLrmeStats", 3137, "false");
      __uint64_t v46 = sub_DDEFC();
      int v206 = (const char *)sub_D1CB0(4);
      int v36 = v231;
      __uint64_t v4 = 3758097084;
      syslog(3, "%lld %d AVE %s: %s:%d %s | OF: Session callbacks are not set properly, output will be dropped", v46, 3, v206, "ProcessAndEmitLrmeStats", 3137, "false");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | OF: Session callbacks are not set properly, output will be dropped", v44, 3, v45, "ProcessAndEmitLrmeStats", 3137, "false");
    }
LABEL_36:
    sub_A1574(a1, a2, 0);
    if (v10) {
      sub_A40B4(a1, v10);
    }
    goto LABEL_57;
  }
  __uint64_t v227 = (_DWORD *)(a2 + 23468);
  __uint64_t v22 = (char *)(a1 + 67834);
  uint64_t v23 = a1 + 4 * *(int *)(a2 + 916);
  __uint64_t v24 = (IOSurfaceID *)(v23 + 26392);
  int v25 = (IOSurfaceID *)(v23 + 26432);
  if (*(unsigned char *)(a1 + 67845)) {
    __uint64_t v26 = v25;
  }
  else {
    __uint64_t v26 = v24;
  }
  if (!*v26)
  {
    if (sub_D1C38(3u, 4))
    {
      uint64_t v32 = sub_D1C7C(3u);
      __uint64_t v38 = sub_DDEFC();
      __uint64_t v39 = (const char *)sub_D1CB0(4);
      if (!v32)
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: ProcessAndEmitLrmeStats with statsMapCSID == NULL.");
        goto LABEL_55;
      }
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: ProcessAndEmitLrmeStats with statsMapCSID == NULL.\n", v38, 3, v39, "ProcessAndEmitLrmeStats", 2661, "statsMapCSID != 0");
      sub_DDEFC();
      sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: ProcessAndEmitLrmeStats with statsMapCSID == NULL.");
    }
LABEL_44:
    int v36 = 0;
    goto LABEL_45;
  }
  char v27 = *v22;
  int v28 = *(_DWORD *)(a1 + 51376);
  int v29 = *(_DWORD *)(a1 + 51380);
  uint64_t v230 = (uint64_t *)(a1 + 51272);
  __uint64_t v30 = IOSurfaceLookup(*v26);
  if (!v30)
  {
    if (sub_D1C38(3u, 4))
    {
      uint64_t v32 = sub_D1C7C(3u);
      __uint64_t v47 = sub_DDEFC();
      __uint64_t v48 = (const char *)sub_D1CB0(4);
      if (v32)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: statSurfaceRef IOSurfaceLookup failed.\n", v47, 3, v48, "ProcessAndEmitLrmeStats", 2664, "LrmeStatSurfaceRef != __null");
        sub_DDEFC();
        sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: statSurfaceRef IOSurfaceLookup failed.");
        goto LABEL_44;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: statSurfaceRef IOSurfaceLookup failed.");
LABEL_55:
      int v36 = 0;
      goto LABEL_56;
    }
    goto LABEL_44;
  }
  int v231 = v30;
  uint64_t v31 = IOSurfaceLock(v30, 0, 0);
  if (v31)
  {
    uint64_t v32 = v31;
    if (sub_D1C38(3u, 4))
    {
      int v33 = sub_D1C7C(3u);
      __uint64_t v34 = sub_DDEFC();
      __uint64_t v35 = (const char *)sub_D1CB0(4);
      int v36 = v231;
      if (v33)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: IOSurfaceLock statSurfaceRef failed.\n", v34, 3, v35, "ProcessAndEmitLrmeStats", 2667, "lockErr == 0");
        __uint64_t v37 = sub_DDEFC();
        int v205 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: IOSurfaceLock statSurfaceRef failed.", v37, 3, v205, "ProcessAndEmitLrmeStats", 2667, "lockErr == 0");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: IOSurfaceLock statSurfaceRef failed.", v34, 3, v35, "ProcessAndEmitLrmeStats", 2667, "lockErr == 0");
      }
      LODWORD(v4) = v32;
      goto LABEL_56;
    }
    LODWORD(v4) = v32;
    goto LABEL_49;
  }
  if (*(unsigned char *)(a1 + 67845))
  {
    __uint64_t v50 = v231;
    char v49 = *(unsigned char *)(a1 + 67845);
    size_t v51 = (IOSurfaceGetAllocSize(v231) >> 1) * ((v49 & 1) == 0);
  }
  else
  {
    LODWORD(v51) = 0;
    __uint64_t v50 = v231;
  }
  BaseAddress = IOSurfaceGetBaseAddress(v50);
  if (BaseAddress)
  {
    int v54 = v28 << (2 * v27);
    int v229 = v29 << (2 * v27);
    unsigned int v222 = v54 + 15;
    unsigned int v224 = v54 + 31;
    unsigned int v226 = (v54 + 15) >> 4;
    unsigned int v55 = (v229 + 15) >> 4;
    uint64_t v56 = (uint64_t)BaseAddress + v51;
    unsigned int AllocSize = IOSurfaceGetAllocSize(v50);
    if (*(int *)(a1 + 239352) > 7)
    {
      __uint64_t v4 = 3758097084;
      if (!*(unsigned char *)(a1 + 67845))
      {
        switch(*(_DWORD *)(a1 + 69656))
        {
          case 0:
            unsigned int v220 = v229 + 15;
            BOOL v225 = *v22 == 0;
            uint64_t v221 = 4 * v226 * v55;
            int v127 = sub_A76AC(a1, v221, &v232);
            int v128 = (char *)CVPixelBufferGetBaseAddress((CVPixelBufferRef)v127);
            if (!v128)
            {
              __uint64_t v10 = v127;
              if (sub_D1C38(0x14u, 4))
              {
                int v178 = sub_D1C7C(0x14u);
                __uint64_t v179 = sub_DDEFC();
                __uint64_t v180 = (const char *)sub_D1CB0(4);
                if (v178)
                {
                  printf("%lld %d AVE %s: %s:%d %s | OF: %s: MvStatsBuffer is NULL\n", v179, 20, v180, "ProcessAndEmitLrmeStats", 2999, "MvStatsBuffer != __null", "ProcessAndEmitLrmeStats");
                  __uint64_t v179 = sub_DDEFC();
                  sub_D1CB0(4);
                }
                syslog(3, "%lld %d AVE %s: %s:%d %s | OF: %s: MvStatsBuffer is NULL", v179);
              }
              goto LABEL_243;
            }
            __uint64_t v129 = v128;
            int v228 = v127;
            size_t v130 = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)v127) >> 2;
            if (sub_D1C38(0x14u, 7))
            {
              int v215 = sub_D1C7C(0x14u);
              __uint64_t v217 = sub_DDEFC();
              __uint64_t v131 = (const char *)sub_D1CB0(7);
              if (v215)
              {
                printf("%lld %d AVE %s: OF: %s: Copy LRME Best MV data: %d x %d MBs, FinalOutputSize %lu, iMBsPerRowForOutput %d\n\n", v217, 20, v131, "ProcessAndEmitLrmeStats", v226, v55, v221, v130);
                __uint64_t v217 = sub_DDEFC();
                sub_D1CB0(7);
              }
              syslog(3, "%lld %d AVE %s: OF: %s: Copy LRME Best MV data: %d x %d MBs, FinalOutputSize %lu, iMBsPerRowForOutput %d\n", v217, 20);
            }
            if (*(int *)(a1 + 239352) >= 22)
            {
              sub_A93D0(v56, v129, v221, v226, v55, v130, *v22);
              uint64_t v6 = 4 * v226 * v55;
              int v8 = 0;
              goto LABEL_135;
            }
            bzero(v129, v221);
            if (v220 >= 0x10)
            {
              int v184 = 0;
              uint64_t v183 = 0;
              uint64_t v182 = 0;
              char v185 = 2 * v225;
              unsigned int v186 = (v55 + 3) >> 2;
              unsigned int v187 = v55 * v130;
              uint64_t v181 = 0;
              if (v226 <= 1) {
                int v188 = 1;
              }
              else {
                int v188 = v226;
              }
              if (v186 <= 1) {
                unsigned int v186 = 1;
              }
              do
              {
                if (v222 >= 0x10)
                {
                  for (int i = 0; i != v188; ++i)
                  {
                    uint64_t v190 = 0;
                    unsigned int v191 = i + 4 * v130 * v184;
                    uint64_t v192 = v56;
                    do
                    {
                      for (uint64_t j = 0; j != 7; ++j)
                      {
                        if (*(__int16 *)(v192 + 2 * j) < 0) {
                          break;
                        }
                      }
                      __uint64_t v194 = (unsigned __int16 *)(v56 + 16 * v190 + 2 * j);
                      int v195 = (__int16)*v194;
                      if (v195 < 0 && v191 < v187)
                      {
                        _S0 = (float)((char)v195 << v185);
                        __asm { FCVT            H0, S0 }
                        int v197 = &v129[4 * v191];
                        *(_WORD *)int v197 = LOWORD(_S0);
                        _S1 = (float)(*v194 << 17 >> 25 << v185);
                        __asm { FCVT            H1, S1 }
                        *((_WORD *)v197 + 1) = LOWORD(_S1);
                        uint64_t v182 = (v182 + 1);
                        __asm { FCMP            H0, #0 }
                        if (_ZF) {
                          int v199 = 0;
                        }
                        else {
                          int v199 = 1;
                        }
                        __asm { FCMP            H1, #0 }
                        if (!_ZF) {
                          int v199 = 1;
                        }
                        uint64_t v183 = (v183 + v199);
                      }
                      v191 += v130;
                      ++v190;
                      v192 += 16;
                    }
                    while (v190 != 4);
                    v56 += 64;
                  }
                  uint64_t v181 = (4 * v188 + v181);
                }
                ++v184;
              }
              while (v184 != v186);
            }
            else
            {
              uint64_t v181 = 0;
              uint64_t v182 = 0;
              uint64_t v183 = 0;
            }
            if (sub_D1C38(0x14u, 7))
            {
              int v201 = sub_D1C7C(0x14u);
              __uint64_t v202 = sub_DDEFC();
              uint64_t v203 = (const char *)sub_D1CB0(7);
              if (v201)
              {
                printf("%lld %d AVE %s: OF: %s: total_mbs = %d, total_valid = %d, total_nonzero = %d\n\n", v202, 20, v203, "ProcessAndEmitLrmeStats", v181, v182, v183);
                __uint64_t v202 = sub_DDEFC();
                uint64_t v210 = v182;
                uint64_t v211 = v183;
                uint64_t v209 = v181;
                int v208 = sub_D1CB0(7);
              }
              else
              {
                uint64_t v210 = v182;
                uint64_t v211 = v183;
                uint64_t v209 = v181;
                int v208 = (void *)v203;
              }
              syslog(3, "%lld %d AVE %s: OF: %s: total_mbs = %d, total_valid = %d, total_nonzero = %d\n", v202, 20, v208, "ProcessAndEmitLrmeStats", v209, v210, v211);
            }
            goto LABEL_174;
          case 1:
            if (!sub_D1C38(0x14u, 4))
            {
LABEL_189:
              LODWORD(v4) = 0;
              uint64_t v32 = 4294954394;
              goto LABEL_49;
            }
            int v174 = sub_D1C7C(0x14u);
            __uint64_t v142 = sub_DDEFC();
            __uint64_t v143 = (const char *)sub_D1CB0(4);
            int v36 = v231;
            if (v174)
            {
              int v144 = 3054;
LABEL_188:
              printf("%lld %d AVE %s: %s:%d %s | OF: LRME_OUTPUT_ALL_MV_RESULTS is not supported in video toolbox path\n", v142, 20, v143, "ProcessAndEmitLrmeStats", v144, "bVTOF == false");
              sub_DDEFC();
              sub_D1CB0(4);
            }
LABEL_207:
            syslog(3, "%lld %d AVE %s: %s:%d %s | OF: LRME_OUTPUT_ALL_MV_RESULTS is not supported in video toolbox path");
LABEL_208:
            LODWORD(v4) = 0;
            uint64_t v32 = 4294954394;
            break;
          case 2:
            uint64_t v5 = v227;
            if (sub_D1C38(0x2Eu, 5))
            {
              int v165 = sub_D1C7C(0x2Eu);
              __uint64_t v166 = sub_DDEFC();
              __uint64_t v167 = (const char *)sub_D1CB0(5);
              if (v165)
              {
                printf("%lld %d AVE %s: LRME_OUTPUT_STATISTICS_ONLY is not supported\n\n", v166, 46, v167);
                sub_DDEFC();
                sub_D1CB0(5);
                uint64_t v5 = v227;
              }
              syslog(3, "%lld %d AVE %s: LRME_OUTPUT_STATISTICS_ONLY is not supported\n");
            }
            goto LABEL_210;
          case 3:
            uint64_t v5 = v227;
            if (sub_D1C38(0x2Eu, 5))
            {
              int v175 = sub_D1C7C(0x2Eu);
              __uint64_t v176 = sub_DDEFC();
              __uint64_t v177 = (const char *)sub_D1CB0(5);
              if (v175)
              {
                printf("%lld %d AVE %s: LRME_OUTPUT_BEST_MV_AND_STATISTICS is not supported\n\n", v176, 46, v177);
                sub_DDEFC();
                sub_D1CB0(5);
                uint64_t v5 = v227;
              }
              syslog(3, "%lld %d AVE %s: LRME_OUTPUT_BEST_MV_AND_STATISTICS is not supported\n");
            }
            goto LABEL_210;
          case 4:
            uint64_t v5 = v227;
            if (sub_D1C38(0x2Eu, 5))
            {
              int v168 = sub_D1C7C(0x2Eu);
              __uint64_t v169 = sub_DDEFC();
              unsigned int v170 = (const char *)sub_D1CB0(5);
              if (v168)
              {
                printf("%lld %d AVE %s: LRME_OUTPUT_ALL_MV_AND_STATISTICS is not supported\n\n", v169, 46, v170);
                sub_DDEFC();
                sub_D1CB0(5);
                uint64_t v5 = v227;
              }
              syslog(3, "%lld %d AVE %s: LRME_OUTPUT_ALL_MV_AND_STATISTICS is not supported\n");
            }
LABEL_210:
            int v8 = 0;
            uint64_t v6 = 0;
            int v228 = 0;
            __uint64_t v7 = 0;
            goto LABEL_5;
          default:
LABEL_134:
            int v8 = 0;
            uint64_t v6 = 0;
            int v228 = 0;
LABEL_135:
            __uint64_t v7 = 0;
            uint64_t v5 = v227;
            goto LABEL_5;
        }
        goto LABEL_56;
      }
      unsigned int v219 = v229 + 15;
      uint64_t v118 = 4 * v226 * v55;
      int v214 = *v22;
      if (*(unsigned char *)(a1 + 69660)) {
        uint64_t v119 = 2 * v226 * v55;
      }
      else {
        uint64_t v119 = 0;
      }
      size_t v120 = v119 + v118;
      __uint64_t v10 = sub_A76AC(a1, v119 + v118, &v232);
      __uint64_t v121 = (char *)CVPixelBufferGetBaseAddress((CVPixelBufferRef)v10);
      if (v121)
      {
        uint64_t v122 = v121;
        uint64_t v221 = v120;
        bzero(v121, v120);
        size_t v123 = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)v10) >> 2;
        int v228 = v10;
        if (*(unsigned char *)(a1 + 69660)) {
          int v124 = &v10[v118];
        }
        else {
          int v124 = 0;
        }
        if (sub_D1C38(0x14u, 7))
        {
          int v125 = sub_D1C7C(0x14u);
          __uint64_t v212 = sub_DDEFC();
          uint64_t v126 = (const char *)sub_D1CB0(7);
          if (v125)
          {
            printf("%lld %d AVE %s: Copy LRME Best MV data: %d x %d MBs, FinalOutputSize %lu, iMBsPerRowForOutput %d\n\n", v212, 20, v126, v226, v55, v221, v123);
            __uint64_t v212 = sub_DDEFC();
            sub_D1CB0(7);
          }
          syslog(3, "%lld %d AVE %s: Copy LRME Best MV data: %d x %d MBs, FinalOutputSize %lu, iMBsPerRowForOutput %d\n", v212);
        }
        if (v219 >= 0x10)
        {
          int v149 = 0;
          uint64_t v150 = 0;
          int v148 = 0;
          LODWORD(v151) = (v55 + 3) >> 2;
          float v152 = 4.0;
          if (!v214) {
            float v152 = 1.0;
          }
          if (v226 <= 1) {
            int v153 = 1;
          }
          else {
            int v153 = v226;
          }
          if (v151 <= 1) {
            uint64_t v151 = 1;
          }
          else {
            uint64_t v151 = v151;
          }
          do
          {
            if (v222 >= 0x10)
            {
              int v154 = 0;
              __uint64_t v155 = (_DWORD *)(v56 + (((v224 & 0xFFFFFFE0) + 63) & 0x1FFFFFFC0) * v150);
              int v156 = 4 * v150 * v123;
              do
              {
                int v157 = 0;
                int v158 = v156;
                do
                {
                  if (v149 + v157 < v55)
                  {
                    _S1 = (float)((int)(*v155 << 21) >> 21) / v152;
                    __asm { FCVT            H1, S1 }
                    __uint64_t v160 = &v122[4 * v158];
                    *(_WORD *)__uint64_t v160 = LOWORD(_S1);
                    _S1 = (float)((int)(*v155 << 11) >> 22) / v152;
                    __asm { FCVT            H1, S1 }
                    *((_WORD *)v160 + 1) = LOWORD(_S1);
                    if (*(unsigned char *)(a1 + 69660)) {
                      *(_WORD *)&v124[2 * v158] = *v155 >> 21;
                    }
                    if ((*v155 & 0x1FFFFF) != 0) {
                      ++v148;
                    }
                  }
                  ++v155;
                  v158 += v123;
                  ++v157;
                }
                while (v157 != 4);
                ++v154;
                ++v156;
              }
              while (v154 != v153);
            }
            ++v150;
            v149 += 4;
          }
          while (v150 != v151);
        }
        else
        {
          int v148 = 0;
        }
        if (sub_D1C38(0x14u, 7))
        {
          int v162 = sub_D1C7C(0x14u);
          __uint64_t v163 = sub_DDEFC();
          uint64_t v164 = (const char *)sub_D1CB0(7);
          if (v162)
          {
            printf("%lld %d AVE %s: OF: %s: total_mbs = %d, total_nonzero = %d\n\n", v163, 20, v164, "ProcessAndEmitLrmeStats", v226 * v55, v148);
            sub_DDEFC();
            sub_D1CB0(7);
          }
          syslog(3, "%lld %d AVE %s: OF: %s: total_mbs = %d, total_nonzero = %d\n");
        }
LABEL_174:
        int v8 = 0;
        __uint64_t v7 = 0;
LABEL_175:
        uint64_t v5 = v227;
        uint64_t v6 = v221;
        goto LABEL_5;
      }
      if (!sub_D1C38(0x14u, 4))
      {
LABEL_243:
        int v8 = 0;
        goto LABEL_35;
      }
      int v132 = sub_D1C7C(0x14u);
      __uint64_t v133 = sub_DDEFC();
      __uint64_t v134 = (const char *)sub_D1CB0(4);
      int v36 = v231;
      if (v132)
      {
        printf("%lld %d AVE %s: %s:%d %s | OF: %s: MvStatsBuffer is NULL\n", v133, 20, v134, "ProcessAndEmitLrmeStats", 2935, "MvStatsBuffer != __null", "ProcessAndEmitLrmeStats");
        __uint64_t v133 = sub_DDEFC();
        unint64_t v207 = sub_D1CB0(4);
      }
      else
      {
        unint64_t v207 = (void *)v134;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | OF: %s: MvStatsBuffer is NULL", v133, 20, v207, "ProcessAndEmitLrmeStats", 2935, "MvStatsBuffer != __null", "ProcessAndEmitLrmeStats");
    }
    else
    {
      __uint64_t v4 = 3758097084;
      switch(*(_DWORD *)(a1 + 69656))
      {
        case 0:
          unsigned int v216 = AllocSize;
          int v58 = sub_A76AC(a1, 4 * v226 * v55, &v232);
          __uint64_t v59 = (char *)CVPixelBufferGetBaseAddress((CVPixelBufferRef)v58);
          if (v59)
          {
            __uint64_t v7 = v59;
            unsigned int v223 = v229 + 31;
            uint64_t v221 = 4 * v226 * v55;
            bzero(v59, v221);
            int v228 = v58;
            size_t BytesPerRow = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)v58);
            if (v223 >= 0x20)
            {
              int v61 = 0;
              int v62 = 0;
              int v63 = 0;
              unsigned int v64 = v224 >> 5;
              size_t v213 = BytesPerRow >> 3;
              unsigned int v65 = (96 * (v224 >> 5) + 63) & 0xFFFFFFC0;
              unsigned int v66 = v226 * v55 - 1;
              uint64_t v67 = (BytesPerRow >> 3) & 0x7FFFFFFF;
              char v68 = 2 * (*v22 == 0);
              int v69 = 2 * (v224 >> 5);
              int v70 = 2 * v67;
              if (v224 >> 5 <= 1) {
                int v71 = 1;
              }
              else {
                int v71 = v224 >> 5;
              }
              if (((v223 >> 5) + 1) >> 1 <= 1) {
                unsigned int v72 = 1;
              }
              else {
                unsigned int v72 = ((v223 >> 5) + 1) >> 1;
              }
              int v73 = 2 * v71;
              int v74 = 8 * v67;
              int v75 = 8 * v64;
              int v218 = v70;
              unsigned int v76 = v226;
              do
              {
                if (v224 >= 0x20)
                {
                  unsigned int v77 = 0;
                  unsigned int v78 = v63 * v65;
                  do
                  {
                    if (v61 + v77 <= v66)
                    {
                      int v79 = (unsigned __int16 *)(v56 + v78);
                      if (v77 < v226)
                      {
                        _S0 = (float)(*v79 << 25 >> 25 << v68);
                        __asm { FCVT            H0, S0 }
                        int v85 = &v7[4 * v62 + 4 * v77];
                        *(_WORD *)int v85 = LOWORD(_S0);
                        _S0 = (float)(*v79 << 19 >> 26 << v68);
                        __asm { FCVT            H0, S0 }
                        *((_WORD *)v85 + 1) = LOWORD(_S0);
                      }
                      if (v77 + 1 < v226)
                      {
                        _S0 = (float)(v79[9] << 25 >> 25 << v68);
                        __asm { FCVT            H0, S0 }
                        int v88 = &v7[4 * v62 + 4 + 4 * v77];
                        *(_WORD *)int v88 = LOWORD(_S0);
                        _S0 = (float)(v79[9] << 19 >> 26 << v68);
                        __asm { FCVT            H0, S0 }
                        *((_WORD *)v88 + 1) = LOWORD(_S0);
                      }
                      if (v69 + v77 <= v66 && ((4 * v63) | 1u) < v55)
                      {
                        if (v77 < v226)
                        {
                          _S0 = (float)(v79[18] << 25 >> 25 << v68);
                          __asm { FCVT            H0, S0 }
                          int v91 = &v7[4 * v70 + 4 * v77];
                          *(_WORD *)int v91 = LOWORD(_S0);
                          _S0 = (float)(v79[18] << 19 >> 26 << v68);
                          __asm { FCVT            H0, S0 }
                          *((_WORD *)v91 + 1) = LOWORD(_S0);
                        }
                        if (v77 + 1 < v226)
                        {
                          _S0 = (float)(v79[27] << 25 >> 25 << v68);
                          __asm { FCVT            H0, S0 }
                          int v94 = &v7[4 * v70 + 4 + 4 * v77];
                          *(_WORD *)int v94 = LOWORD(_S0);
                          _S0 = (float)(v79[27] << 19 >> 26 << v68);
                          __asm { FCVT            H0, S0 }
                          *((_WORD *)v94 + 1) = LOWORD(_S0);
                        }
                      }
                    }
                    v78 += 96;
                    v77 += 2;
                  }
                  while (v73 != v77);
                }
                ++v63;
                v70 += v74;
                v62 += v74;
                v69 += v75;
                v61 += v75;
              }
              while (v63 != v72);
              if (v223 >= 0x40)
              {
                int v96 = 0;
                int v97 = 4 * v213;
                int v98 = 6 * v64;
                int v99 = 4 * v64;
                int v100 = v218 + 4 * v213;
                do
                {
                  if (v224 >= 0x20)
                  {
                    unsigned int v101 = 0;
                    unsigned int v102 = v96 * v65;
                    do
                    {
                      if (v99 + v101 <= v66)
                      {
                        int v103 = (unsigned __int16 *)(v56 + (v216 >> 1) + v102);
                        if (v101 < v76)
                        {
                          _S0 = (float)(*v103 << 25 >> 25 << v68);
                          __asm { FCVT            H0, S0 }
                          __uint64_t v105 = &v7[4 * v97 + 4 * v101];
                          *(_WORD *)__uint64_t v105 = LOWORD(_S0);
                          _S0 = (float)(*v103 << 19 >> 26 << v68);
                          unsigned int v76 = v226;
                          __asm { FCVT            H0, S0 }
                          *((_WORD *)v105 + 1) = LOWORD(_S0);
                        }
                        if (v101 + 1 < v76)
                        {
                          _S0 = (float)(v103[9] << 25 >> 25 << v68);
                          __asm { FCVT            H0, S0 }
                          size_t v108 = &v7[4 * v97 + 4 + 4 * v101];
                          *(_WORD *)size_t v108 = LOWORD(_S0);
                          _S0 = (float)(v103[9] << 19 >> 26 << v68);
                          __asm { FCVT            H0, S0 }
                          *((_WORD *)v108 + 1) = LOWORD(_S0);
                        }
                        unsigned int v76 = v226;
                        if (v98 + v101 <= v66 && ((4 * v96) | 3u) < v55)
                        {
                          if (v101 < v226)
                          {
                            _S0 = (float)(v103[18] << 25 >> 25 << v68);
                            __asm { FCVT            H0, S0 }
                            int v111 = &v7[4 * v100 + 4 * v101];
                            *(_WORD *)int v111 = LOWORD(_S0);
                            _S0 = (float)(v103[18] << 19 >> 26 << v68);
                            __asm { FCVT            H0, S0 }
                            *((_WORD *)v111 + 1) = LOWORD(_S0);
                            unsigned int v76 = v226;
                          }
                          if (v101 + 1 < v76)
                          {
                            _S0 = (float)(v103[27] << 25 >> 25 << v68);
                            __asm { FCVT            H0, S0 }
                            __uint64_t v114 = &v7[4 * v100 + 4 + 4 * v101];
                            *(_WORD *)__uint64_t v114 = LOWORD(_S0);
                            _S0 = (float)(v103[27] << 19 >> 26 << v68);
                            __asm { FCVT            H0, S0 }
                            *((_WORD *)v114 + 1) = LOWORD(_S0);
                          }
                        }
                      }
                      v102 += 96;
                      v101 += 2;
                    }
                    while (v73 != v101);
                  }
                  ++v96;
                  v100 += v74;
                  v97 += v74;
                  v98 += v75;
                  v99 += v75;
                }
                while (v96 != v223 >> 6);
              }
            }
            int v8 = 0;
            goto LABEL_175;
          }
          __uint64_t v10 = v58;
          if (!sub_D1C38(3u, 4)) {
            goto LABEL_243;
          }
          int v171 = sub_D1C7C(3u);
          __uint64_t v172 = sub_DDEFC();
          __uint64_t v173 = (const char *)sub_D1CB0(4);
          int v36 = v231;
          if (v171)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: MvStatsBuffer = NULL.\n", v172, 3, v173, "ProcessAndEmitLrmeStats", 2721, "MvStatsBuffer != __null");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: MvStatsBuffer = NULL.");
          break;
        case 1:
          int v36 = v231;
          if (!sub_D1C38(0x14u, 4)) {
            goto LABEL_208;
          }
          int v141 = sub_D1C7C(0x14u);
          __uint64_t v142 = sub_DDEFC();
          __uint64_t v143 = (const char *)sub_D1CB0(4);
          if (!v141) {
            goto LABEL_207;
          }
          int v144 = 2836;
          goto LABEL_188;
        case 2:
          if (!sub_D1C38(0x14u, 4)) {
            goto LABEL_189;
          }
          int v135 = sub_D1C7C(0x14u);
          __uint64_t v136 = sub_DDEFC();
          uint64_t v137 = (const char *)sub_D1CB0(4);
          int v36 = v231;
          if (v135)
          {
            printf("%lld %d AVE %s: %s:%d %s | OF: LRME_OUTPUT_STATISTICS_ONLY is not supported in video toolbox path\n", v136, 20, v137, "ProcessAndEmitLrmeStats", 2878, "bVTOF == false");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | OF: LRME_OUTPUT_STATISTICS_ONLY is not supported in video toolbox path");
          goto LABEL_208;
        case 3:
          uint64_t v5 = v227;
          if (sub_D1C38(0x2Eu, 5))
          {
            int v145 = sub_D1C7C(0x2Eu);
            __uint64_t v146 = sub_DDEFC();
            __uint64_t v147 = (const char *)sub_D1CB0(5);
            if (v145)
            {
              printf("%lld %d AVE %s: LRME_OUTPUT_BEST_MV_AND_STATISTICS is not supported yet \n\n", v146, 46, v147);
              sub_DDEFC();
              sub_D1CB0(5);
              uint64_t v5 = v227;
            }
            syslog(3, "%lld %d AVE %s: LRME_OUTPUT_BEST_MV_AND_STATISTICS is not supported yet \n");
          }
          goto LABEL_210;
        case 4:
          uint64_t v5 = v227;
          if (sub_D1C38(0x2Eu, 5))
          {
            int v138 = sub_D1C7C(0x2Eu);
            __uint64_t v139 = sub_DDEFC();
            int v140 = (const char *)sub_D1CB0(5);
            if (v138)
            {
              printf("%lld %d AVE %s: LRME_OUTPUT_ALL_MV_AND_STATISTICS is not supported yet \n\n", v139, 46, v140);
              sub_DDEFC();
              sub_D1CB0(5);
              uint64_t v5 = v227;
            }
            syslog(3, "%lld %d AVE %s: LRME_OUTPUT_ALL_MV_AND_STATISTICS is not supported yet \n");
          }
          goto LABEL_210;
        default:
          goto LABEL_134;
      }
    }
    int v8 = 0;
    goto LABEL_36;
  }
  if (!sub_D1C38(3u, 4))
  {
    LODWORD(v4) = 0;
    uint64_t v32 = 0;
LABEL_49:
    int v36 = v231;
    goto LABEL_56;
  }
  uint64_t v32 = sub_D1C7C(3u);
  __uint64_t v4 = sub_DDEFC();
  __uint64_t v116 = (const char *)sub_D1CB0(4);
  int v36 = v231;
  if (!v32)
  {
    syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: lrmeStat = NULL.", v4, 3, v116, "ProcessAndEmitLrmeStats", 2676, "lrmeStat != __null");
    LODWORD(v4) = 0;
    goto LABEL_56;
  }
  printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: lrmeStat = NULL.\n", v4, 3, v116, "ProcessAndEmitLrmeStats", 2676, "lrmeStat != __null");
  __uint64_t v4 = sub_DDEFC();
  uint64_t v117 = (const char *)sub_D1CB0(4);
  syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: lrmeStat = NULL.", v4, 3, v117, "ProcessAndEmitLrmeStats", 2676, "lrmeStat != __null");
  LODWORD(v4) = 0;
LABEL_45:
  uint64_t v32 = 0;
LABEL_56:
  int v8 = v4;
  sub_A1574(a1, a2, 0);
  __uint64_t v4 = v32;
LABEL_57:
  if (v36)
  {
    if (!v8) {
      IOSurfaceUnlock(v36, 0, 0);
    }
    CFRelease(v36);
  }
  return v4;
}

void sub_A93D0(uint64_t a1, char *a2, size_t a3, int a4, int a5, int a6, int a7)
{
  bzero(a2, a3);
  if (a5)
  {
    int v13 = 0;
    int v14 = 0;
    int v15 = 0;
    int v16 = 0;
    if (a7) {
      char v17 = 0;
    }
    else {
      char v17 = 2;
    }
    do
    {
      if (a4)
      {
        int v18 = 0;
        do
        {
          uint64_t v19 = 0;
          unsigned int v20 = v18 + 4 * a6 * v13;
          uint64_t v21 = a1;
          do
          {
            uint64_t v22 = 0;
            uint64_t v23 = a1 + 20 * v19;
            do
            {
              if (*(__int16 *)(v21 + 2 * v22) < 0) {
                break;
              }
              ++v22;
            }
            while (v22 != 7);
            int v24 = *(__int16 *)(v23 + 2 * v22);
            if (v24 < 0 && v20 < a6 * a5)
            {
              _S0 = (float)((char)v24 << v17);
              __asm { FCVT            H0, S0 }
              __uint64_t v30 = &a2[4 * v20];
              *(_WORD *)__uint64_t v30 = LOWORD(_S0);
              _S1 = (float)(*(unsigned __int16 *)(v23 + 2 * v22) << 17 >> 25 << v17);
              __asm { FCVT            H1, S1 }
              *((_WORD *)v30 + 1) = LOWORD(_S1);
              ++v15;
              __asm { FCMP            H0, #0 }
              if (_ZF) {
                int v32 = 0;
              }
              else {
                int v32 = 1;
              }
              __asm { FCMP            H1, #0 }
              if (!_ZF) {
                int v32 = 1;
              }
              v14 += v32;
            }
            v20 += a6;
            ++v19;
            v21 += 20;
          }
          while (v19 != 4);
          a1 += 80;
          ++v18;
        }
        while (v18 != a4);
        v16 += 4 * a4;
      }
      ++v13;
    }
    while (v13 != (a5 + 3) >> 2);
  }
  else
  {
    int v16 = 0;
    int v15 = 0;
    int v14 = 0;
  }
  if (sub_D1C38(0x14u, 7))
  {
    int v34 = sub_D1C7C(0x14u);
    __uint64_t v35 = sub_DDEFC();
    int v36 = (const char *)sub_D1CB0(7);
    if (v34)
    {
      printf("%lld %d AVE %s: OF: %s: total_mbs = %d, total_valid = %d, total_nonzero = %d\n\n", v35, 20, v36, "AVE_LRME_FillFSResultsBestMV", v16, v15, v14);
      __uint64_t v35 = sub_DDEFC();
      sub_D1CB0(7);
    }
    syslog(3, "%lld %d AVE %s: OF: %s: total_mbs = %d, total_valid = %d, total_nonzero = %d\n", v35);
  }
}

void *sub_A95F4(uint64_t a1, const void *a2)
{
  int v3 = (void *)(a1 + 8);
  uint64_t result = (void *)sub_A9668(a1 + 8);
  if (result)
  {
    uint64_t v5 = (uint64_t)result;
    memcpy(result, a2, 0x626uLL);
    return (void *)sub_D4358(v3, v5, 0);
  }
  return result;
}

uint64_t sub_A9668(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 25320);
  if (v1)
  {
    unsigned int v2 = v1 - 1;
    *(_DWORD *)(a1 + 25320) = v2;
    return *(void *)(a1 + 8 * v2 + 25192);
  }
  else
  {
    if (sub_D1C38(0xD8u, 4))
    {
      int v4 = sub_D1C7C(0xD8u);
      __uint64_t v5 = sub_DDEFC();
      uint64_t v6 = (const char *)sub_D1CB0(4);
      if (v4)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to get free spot \n", v5, 216, v6, "new_stats", 56, "free_pool_available > 0");
        __uint64_t v7 = sub_DDEFC();
        int v8 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get free spot ", v7, 216, v8, "new_stats", 56, "free_pool_available > 0");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get free spot ", v5, 216, v6, "new_stats", 56, "free_pool_available > 0");
      }
    }
    return 0;
  }
}

uint64_t sub_A977C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 51112;
  if ((*(void *)(a1 + 51344) || *(void *)(a1 + 51352)) && *(_DWORD *)(a1 + 239348) != 2)
  {
    uint64_t v9 = a1 + 16 * *(unsigned __int8 *)(a2 + 160) + 241168;
    *(void *)(v9 + 8) = *(void *)(a2 + 2344);
    int v10 = *(_DWORD *)(a2 + 23736);
    int v11 = (_DWORD *)(a1 + 67932);
    *(_DWORD *)uint64_t v9 = 0;
    *(_DWORD *)(v9 + 4) = v10;
    if (sub_D1C38(0x2Eu, 7))
    {
      int v12 = sub_D1C7C(0x2Eu);
      __uint64_t v13 = sub_DDEFC();
      int v14 = (const char *)sub_D1CB0(7);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %d %d %d %p %d %d %d\n", v13, 46, v14, "DropFrame", 3335, *v11, *(_DWORD *)(a2 + 168), *(_DWORD *)(a2 + 160), *(const void **)v4, *(_DWORD *)(v4 + 8), *(_DWORD *)(v4 + 112), *(unsigned __int8 *)(v4 + 116));
        __uint64_t v15 = sub_DDEFC();
        __uint64_t v40 = sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: %s:%d %d %d %d %p %d %d %d", v15, 46, v40, "DropFrame");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %d %d %d %p %d %d %d", v13, 46, v14, "DropFrame");
      }
    }
    *(_DWORD *)(v4 + 112) = -1;
    *(unsigned char *)(v4 + 116) = 0;
    if (*v11 >= 2u && !*(_DWORD *)(a2 + 168)) {
      *(unsigned char *)(v4 + 117) = 1;
    }
    if (*(unsigned char *)(a1 + 68345)) {
      uint64_t v17 = *(void *)(v4 + 240);
    }
    else {
      uint64_t v17 = *(void *)(v4 + 232);
    }
    if (v17 == 1)
    {
      kdebug_trace();
      if (*(void *)(v4 + 168) && *(void *)(v4 + 160))
      {
        if (sub_D1C38(0x2Eu, 7))
        {
          int v21 = sub_D1C7C(0x2Eu);
          __uint64_t v22 = sub_DDEFC();
          uint64_t v23 = (const char *)sub_D1CB0(7);
          if (v21)
          {
            printf("%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame on %d bytes\n", v22, 46, v23, 0);
            __uint64_t v24 = sub_DDEFC();
            uint64_t v41 = (const char *)sub_D1CB0(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame on %d bytes", v24, 46, v41, 0);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame on %d bytes", v22, 46, v23, 0);
          }
        }
        (*(void (**)(void, void, void, void, void))(v4 + 168))(*(void *)(v4 + 160), 0, 0, 0, *(unsigned int *)(a1 + 68256));
      }
      else if (sub_D1C38(0x2Eu, 7))
      {
        int v25 = sub_D1C7C(0x2Eu);
        __uint64_t v26 = sub_DDEFC();
        char v27 = (const char *)sub_D1CB0(7);
        if (v25)
        {
          printf("%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it\n", v26, 46, v27);
          __uint64_t v28 = sub_DDEFC();
          uint64_t v42 = (const char *)sub_D1CB0(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v28, 46, v42);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v26, 46, v27);
        }
      }
      uint64_t v16 = 0;
    }
    else
    {
      if (sub_D1C38(0x2Eu, 7))
      {
        int v18 = sub_D1C7C(0x2Eu);
        __uint64_t v19 = sub_DDEFC();
        unsigned int v20 = (const char *)sub_D1CB0(7);
        if (v18)
        {
          printf("%lld %d AVE %s: H264FrameRec: DROP F %d infoFlagsOut %d\n", v19, 46, v20, *(_DWORD *)(a2 + 160), 3);
          __uint64_t v19 = sub_DDEFC();
          unsigned int v20 = (const char *)sub_D1CB0(7);
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d infoFlagsOut %d", v19, 46, v20, *(_DWORD *)(a2 + 160), 3);
      }
      kdebug_trace();
      if (*(unsigned char *)(a1 + 68345)) {
        uint64_t v29 = VTEncoderSessionEmitEncodedTile();
      }
      else {
        uint64_t v29 = VTEncoderSessionEmitEncodedFrame();
      }
      uint64_t v16 = v29;
    }
    kdebug_trace();
    *(void *)(a2 + 27680) = sub_DDEFC();
    uint64_t v30 = *(unsigned int *)(a2 + 916);
    if ((v30 & 0x80000000) == 0)
    {
      if (v30 >= 0x1F)
      {
        uint64_t v16 = 3758097084;
        if (sub_D1C38(3u, 4))
        {
          int v32 = sub_D1C7C(3u);
          __uint64_t v33 = sub_DDEFC();
          int v34 = (const char *)sub_D1CB0(4);
          if (v32)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: DropFrame Frame->PlaneNumber = %d\n", v33, 3, v34, "DropFrame", 3501, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(_DWORD *)(a2 + 916));
            __uint64_t v33 = sub_DDEFC();
            int v34 = (const char *)sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: DropFrame Frame->PlaneNumber = %d", v33, 3, v34, "DropFrame", 3501, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(unsigned int *)(a2 + 916));
        }
      }
      else
      {
        uint64_t v31 = *(void **)(a1 + 8 * v30 + 27072);
        if (v31)
        {
          bzero(v31, 0x2CAB8uLL);
        }
        else if (sub_D1C38(3u, 4))
        {
          int v35 = sub_D1C7C(3u);
          __uint64_t v36 = sub_DDEFC();
          __uint64_t v37 = (const char *)sub_D1CB0(4);
          if (v35)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader == NULL\n", v36, 3, v37, "DropFrame", 3503, "codedHeader != __null");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader == NULL");
        }
      }
    }
  }
  else
  {
    if (sub_D1C38(0x2Eu, 7))
    {
      int v5 = sub_D1C7C(0x2Eu);
      __uint64_t v6 = sub_DDEFC();
      __uint64_t v7 = (const char *)sub_D1CB0(7);
      if (v5)
      {
        printf("%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it\n", v6, 46, v7);
        __uint64_t v8 = sub_DDEFC();
        __uint64_t v39 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v8, 46, v39);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v6, 46, v7);
      }
    }
    return 0;
  }
  return v16;
}

__CFDictionary *sub_A9E1C(uint64_t a1, int *a2, int a3)
{
  CFMutableDataRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    if (sub_D1C38(0x2Eu, 4))
    {
      int v12 = sub_D1C7C(0x2Eu);
      __uint64_t v13 = sub_DDEFC();
      int v14 = (const char *)sub_D1CB0(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | TemporalLevelInfoDict == NULL\n", v13, 46, v14, "AVE_FrameRecv", "CreateTemporalLevelInfoDictionary", 3747, "TemporalLevelInfoDict != __null");
        __uint64_t v13 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | TemporalLevelInfoDict == NULL", v13);
    }
    return 0;
  }
  __uint64_t v7 = Mutable;
  sub_C347C(kCMHEVCTemporalLevelInfoKey_TemporalLevel, a3, Mutable);
  sub_C347C(kCMHEVCTemporalLevelInfoKey_ProfileSpace, *a2, v7);
  sub_C347C(kCMHEVCTemporalLevelInfoKey_TierFlag, a2[1] != 0, v7);
  sub_C347C(kCMHEVCTemporalLevelInfoKey_ProfileIndex, a2[2], v7);
  CFDataRef v8 = CFDataCreate(0, (const UInt8 *)(a1 + 239320), 4);
  if (!v8)
  {
    if (sub_D1C38(0x2Eu, 4))
    {
      int v15 = sub_D1C7C(0x2Eu);
      __uint64_t v16 = sub_DDEFC();
      uint64_t v17 = (const char *)sub_D1CB0(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | cf_profileCompatibilityFlags == NULL\n", v16, 46, v17, "AVE_FrameRecv", "CreateTemporalLevelInfoDictionary", 3756, "cf_profileCompatibilityFlags != __null");
        __uint64_t v16 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | cf_profileCompatibilityFlags == NULL", v16);
    }
    int v21 = v7;
    goto LABEL_21;
  }
  CFDataRef v9 = v8;
  CFDictionaryAddValue(v7, kCMHEVCTemporalLevelInfoKey_ProfileCompatibilityFlags, v8);
  CFDataRef v10 = CFDataCreate(0, (const UInt8 *)(a1 + 239324), 6);
  if (!v10)
  {
    if (sub_D1C38(0x2Eu, 4))
    {
      int v18 = sub_D1C7C(0x2Eu);
      __uint64_t v19 = sub_DDEFC();
      unsigned int v20 = (const char *)sub_D1CB0(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | cf_constraintIndicatorFlags == NULL\n", v19, 46, v20, "AVE_FrameRecv", "CreateTemporalLevelInfoDictionary", 3763, "cf_constraintIndicatorFlags != __null");
        __uint64_t v19 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | cf_constraintIndicatorFlags == NULL", v19);
    }
    CFRelease(v7);
    int v21 = v9;
LABEL_21:
    CFRelease(v21);
    return 0;
  }
  CFDataRef v11 = v10;
  CFDictionaryAddValue(v7, kCMHEVCTemporalLevelInfoKey_ConstraintIndicatorFlags, v10);
  sub_C347C(kCMHEVCTemporalLevelInfoKey_LevelIndex, a2[15], v7);
  CFRelease(v9);
  CFRelease(v11);
  return v7;
}

uint64_t sub_AA224(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(_DWORD *)(a2 + 916) >= 0x1Fu)
    {
      uint64_t v7 = 3758097084;
      if (sub_D1C38(3u, 4))
      {
        int v11 = sub_D1C7C(3u);
        __uint64_t v12 = sub_DDEFC();
        __uint64_t v13 = (const char *)sub_D1CB0(4);
        if (v11)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrameMCTF pFrame->PlaneNumber = %d\n", v12, 3, v13, "SendFrameMCTF", 3802, "(uint32_t)(pFrame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(_DWORD *)(a2 + 916));
          __uint64_t v12 = sub_DDEFC();
          __uint64_t v13 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrameMCTF pFrame->PlaneNumber = %d", v12, 3, v13, "SendFrameMCTF", 3802, "(uint32_t)(pFrame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(unsigned int *)(a2 + 916));
      }
    }
    else
    {
      uint64_t v3 = a1 + 51272;
      if (sub_D1C38(0x2Eu, 6))
      {
        int v4 = sub_D1C7C(0x2Eu);
        __uint64_t v5 = sub_DDEFC();
        __uint64_t v6 = (const char *)sub_D1CB0(6);
        if (v4)
        {
          printf("%lld %d AVE %s: Send MCTF PlaneNumber:%d framenumber:%d %p %p\n", v5, 46, v6, *(_DWORD *)(a2 + 916), *(_DWORD *)(a2 + 160), *(const void **)v3, *(const void **)(a2 + 320));
          __uint64_t v5 = sub_DDEFC();
          sub_D1CB0(6);
        }
        syslog(3, "%lld %d AVE %s: Send MCTF PlaneNumber:%d framenumber:%d %p %p", v5);
      }
      int v14 = *(void (**)(void))(v3 + 16);
      if (v14 && *(void *)v3 && *(void *)(a2 + 320)) {
        v14();
      }
      return 0;
    }
  }
  else
  {
    uint64_t v7 = 3758097084;
    if (sub_D1C38(3u, 4))
    {
      int v8 = sub_D1C7C(3u);
      __uint64_t v9 = sub_DDEFC();
      CFDataRef v10 = (const char *)sub_D1CB0(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrameMCTF pFrame == NULL\n", v9, 3, v10, "SendFrameMCTF", 3800, "pFrame != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrameMCTF pFrame == NULL");
    }
  }
  return v7;
}

uint64_t sub_AA4FC(uint64_t a1, uint64_t a2, void *a3, unsigned int a4)
{
  CMBlockBufferRef dataBuffer = 0;
  dataCFIndex Length = 0;
  if (!a2)
  {
    uint64_t v12 = 3758097084;
    if (sub_D1C38(3u, 4))
    {
      int v13 = sub_D1C7C(3u);
      __uint64_t v14 = sub_DDEFC();
      int v15 = (const char *)sub_D1CB0(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrame Frame == NULL\n", v14, 3, v15, "SendFrame", 3836, "Frame != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrame Frame == NULL");
    }
    return v12;
  }
  uint64_t v4 = a2;
  unsigned int v5 = *(_DWORD *)(a2 + 916);
  if (v5 >= 0x1F)
  {
    uint64_t v12 = 3758097084;
    if (!sub_D1C38(3u, 4)) {
      return v12;
    }
    int v16 = sub_D1C7C(3u);
    __uint64_t v17 = sub_DDEFC();
    int v18 = (const char *)sub_D1CB0(4);
    if (v16)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrame Frame->PlaneNumber = %d\n", v17, 3, v18, "SendFrame", 3837, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(_DWORD *)(v4 + 916));
      __uint64_t v17 = sub_DDEFC();
      __uint64_t v19 = (size_t *)sub_D1CB0(4);
      uint64_t v428 = "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))";
      int v429 = (const char *)*(unsigned int *)(v4 + 916);
      sampleBufferOut = "SendFrame";
      uint64_t v427 = (unsigned char *)&unk_EFD;
      sampleSizeArray = v19;
      unsigned int v20 = "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrame Frame->PlaneNumber = %d";
LABEL_20:
      CMItemCount numSampleSizeEntries = 3;
LABEL_34:
      syslog(3, v20, v17, numSampleSizeEntries, sampleSizeArray, sampleBufferOut, v427, v428, v429, v430, v431);
      return v12;
    }
    int v429 = (const char *)*(unsigned int *)(v4 + 916);
    uint64_t v427 = (unsigned char *)&unk_EFD;
    uint64_t v428 = "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))";
    sampleSizeArray = (size_t *)v18;
    sampleBufferOut = "SendFrame";
    uint64_t v34 = 3;
    unsigned int v20 = "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrame Frame->PlaneNumber = %d";
LABEL_33:
    CMItemCount numSampleSizeEntries = v34;
    goto LABEL_34;
  }
  uint64_t v6 = a1;
  if (!*(unsigned char *)a1)
  {
    uint64_t v12 = 3758097084;
    if (sub_D1C38(3u, 4))
    {
      int v21 = sub_D1C7C(3u);
      __uint64_t v22 = sub_DDEFC();
      uint64_t v23 = (const char *)sub_D1CB0(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec Error, CFRunloop Closing\n", v22, 3, v23, "SendFrame", 3838, "m_moreWorkToDo");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec Error, CFRunloop Closing");
    }
    return v12;
  }
  uint64_t v7 = (unsigned int *)(a1 + 51080);
  if (!*(void *)(a1 + 51344) && !*(void *)(a1 + 51352))
  {
    if (sub_D1C38(0x2Eu, 7))
    {
      int v38 = sub_D1C7C(0x2Eu);
      __uint64_t v39 = sub_DDEFC();
      __uint64_t v40 = (const char *)sub_D1CB0(7);
      if (v38)
      {
        printf("%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it\n", v39, 46, v40);
        __uint64_t v41 = sub_DDEFC();
        sampleSizeArrayb = (size_t *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v41, 46, (const char *)sampleSizeArrayb);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v39, 46, v40);
      }
    }
    sub_A1574(v6, v4, 0);
    return 0;
  }
  BOOL v8 = (a4 & 0x80000000) != 0 || *(unsigned char *)(a1 + 67552) == 0;
  int v9 = !v8;
  if (v8)
  {
    unint64_t v11 = 0;
    uint64_t v24 = a1 + 384 * v5 + 28032;
    uint64_t v25 = 32;
    __uint64_t v26 = (unsigned int *)v24;
    do
    {
      unsigned int v28 = *v26;
      v26 += 3;
      uint64_t v27 = v28;
      if (!v28) {
        break;
      }
      v11 += v27 + *(unsigned int *)(v24 + 11520);
      uint64_t v24 = (uint64_t)v26;
      --v25;
    }
    while (v25);
  }
  else
  {
    uint64_t v10 = a1 + 384 * v5 + 12 * a4;
    unint64_t v11 = *(unsigned int *)(v10 + 28032) + (unint64_t)*(unsigned int *)(v10 + 39552);
  }
  if (!v11)
  {
    uint64_t v12 = 3758097084;
    if (!sub_D1C38(3u, 4)) {
      return v12;
    }
    int v35 = sub_D1C7C(3u);
    __uint64_t v17 = sub_DDEFC();
    __uint64_t v36 = (const char *)sub_D1CB0(4);
    if (v35)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: frame %d; FinalOutput_FRAME_Size %ld\n",
        v17,
        3,
        v36,
        "SendFrame",
        3877,
        "FinalOutput_FRAME_Size != 0",
        *(_DWORD *)(v4 + 160),
        0);
      __uint64_t v17 = sub_DDEFC();
      __uint64_t v37 = (size_t *)sub_D1CB0(4);
      int v429 = (const char *)*(unsigned int *)(v4 + 160);
      uint64_t v430 = 0;
      uint64_t v427 = (unsigned char *)&unk_F25;
      uint64_t v428 = "FinalOutput_FRAME_Size != 0";
      sampleSizeArray = v37;
      sampleBufferOut = "SendFrame";
      unsigned int v20 = "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: frame %d; FinalOutput_FRAME_Size %ld";
      goto LABEL_20;
    }
    int v429 = (const char *)*(unsigned int *)(v4 + 160);
    uint64_t v430 = 0;
    uint64_t v427 = (unsigned char *)&unk_F25;
    uint64_t v428 = "FinalOutput_FRAME_Size != 0";
    sampleSizeArray = (size_t *)v36;
    sampleBufferOut = "SendFrame";
    uint64_t v34 = 3;
    unsigned int v20 = "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: frame %d; FinalOutput_FRAME_Size %ld";
    goto LABEL_33;
  }
  int v447 = v9;
  uint64_t v445 = a1 + 67552;
  int v29 = *(_DWORD *)(a1 + 67556) - 1;
  if (sub_D1C38(0x2Eu, 7))
  {
    int v30 = sub_D1C7C(0x2Eu);
    __uint64_t v31 = sub_DDEFC();
    int v32 = (const char *)sub_D1CB0(7);
    if (v30)
    {
      printf("%lld %d AVE %s: H264FrameRec: start FinalOutput_FRAME_Size %ld\n", v31, 46, v32, v11);
      __uint64_t v33 = sub_DDEFC();
      sampleSizeArraya = (size_t *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: H264FrameRec: start FinalOutput_FRAME_Size %ld", v33, 46, (const char *)sampleSizeArraya, v11);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264FrameRec: start FinalOutput_FRAME_Size %ld", v31, 46, v32, v11);
    }
  }
  uint64_t v43 = v4 + 21664;
  uint64_t v44 = v6 + 239336;
  uint64_t v45 = v6 + 68136;
  BOOL v8 = v29 == a4;
  uint64_t v46 = a4;
  char v47 = v447;
  if (v8) {
    char v48 = 0;
  }
  else {
    char v48 = v447;
  }
  char v438 = v48;
  if ((v48 & 1) == 0)
  {
    uint64_t v49 = *v7;
    v11 += v49;
    if (v49)
    {
      if (sub_D1C38(0x2Eu, 7))
      {
        int v50 = sub_D1C7C(0x2Eu);
        __uint64_t v51 = sub_DDEFC();
        int v52 = (const char *)sub_D1CB0(7);
        if (v50)
        {
          printf("%lld %d AVE %s: H264FrameRec: CABACzeroWord = %d - FinalOutput_FRAME_Size %ld\n", v51, 46, v52, *v7, v11);
          __uint64_t v51 = sub_DDEFC();
          int v52 = (const char *)sub_D1CB0(7);
          uint64_t v46 = a4;
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec: CABACzeroWord = %d - FinalOutput_FRAME_Size %ld", v51, 46, v52, *v7, v11);
      }
      char v47 = v447;
    }
  }
  if (v46) {
    char v53 = v47;
  }
  else {
    char v53 = 0;
  }
  if (v53)
  {
    int v54 = 0;
    goto LABEL_61;
  }
  unsigned int v64 = *(const void **)(v4 + 336);
  if (v64)
  {
    CFDataRef Data = CFPropertyListCreateData(kCFAllocatorDefault, v64, kCFPropertyListXMLFormat_v1_0, 0, 0);
    if (Data)
    {
      CFDataRef v66 = Data;
      CFIndex Length = CFDataGetLength(Data);
      if (sub_D1C38(0x2Eu, 7))
      {
        uint64_t v442 = v6;
        int v68 = sub_D1C7C(0x2Eu);
        __uint64_t v69 = sub_DDEFC();
        int v70 = (const char *)sub_D1CB0(7);
        if (v68)
        {
          printf("%lld %d AVE %s: H264FrameRec: CFDebugMetadataSEI is ON (%#llx) size %d\n", v69, 46, v70, *(void *)(v4 + 336), Length);
          __uint64_t v69 = sub_DDEFC();
          int v70 = (const char *)sub_D1CB0(7);
          uint64_t v46 = a4;
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec: CFDebugMetadataSEI is ON (%#llx) size %d", v69, 46, v70, *(void *)(v4 + 336), Length);
        uint64_t v43 = v4 + 21664;
        uint64_t v6 = v442;
      }
      if (Length >= 0) {
        uint64_t v108 = Length;
      }
      else {
        uint64_t v108 = Length + 1;
      }
      uint64_t v75 = Length + (v108 >> 1) + 512;
      goto LABEL_116;
    }
    uint64_t v12 = 3758097084;
    if (!sub_D1C38(0x2Eu, 4)) {
      return v12;
    }
    int v76 = sub_D1C7C(0x2Eu);
    __uint64_t v17 = sub_DDEFC();
    unsigned int v77 = (const char *)sub_D1CB0(4);
    if (v76)
    {
      printf("%lld %d AVE %s: %s::%s:%d %s | H264FrameRec ERROR: meta date creation failed. frame %d; SEI 0x%llx\n",
        v17,
        46,
        v77,
        "AVE_FrameRecv",
        "SendFrame",
        3902,
        "serialMetadata != __null",
        *(_DWORD *)(v4 + 160),
        *(void *)(v4 + 336));
      __uint64_t v17 = sub_DDEFC();
      unsigned int v78 = (size_t *)sub_D1CB0(4);
      uint64_t v430 = *(unsigned int *)(v4 + 160);
      uint64_t v431 = *(void *)(v4 + 336);
      uint64_t v428 = (unsigned char *)&unk_F3E;
      int v429 = "serialMetadata != __null";
      sampleBufferOut = "AVE_FrameRecv";
      uint64_t v427 = "SendFrame";
      CMItemCount numSampleSizeEntries = 46;
      sampleSizeArray = v78;
      unsigned int v20 = "%lld %d AVE %s: %s::%s:%d %s | H264FrameRec ERROR: meta date creation failed. frame %d; SEI 0x%llx";
      goto LABEL_34;
    }
    uint64_t v430 = *(unsigned int *)(v4 + 160);
    uint64_t v431 = *(void *)(v4 + 336);
    uint64_t v428 = (unsigned char *)&unk_F3E;
    int v429 = "serialMetadata != __null";
    sampleBufferOut = "AVE_FrameRecv";
    uint64_t v427 = "SendFrame";
    sampleSizeArray = (size_t *)v77;
    uint64_t v34 = 46;
    unsigned int v20 = "%lld %d AVE %s: %s::%s:%d %s | H264FrameRec ERROR: meta date creation failed. frame %d; SEI 0x%llx";
    goto LABEL_33;
  }
  CFDataRef v66 = 0;
  uint64_t v75 = 0;
LABEL_116:
  int v109 = *(unsigned __int8 *)(v45 + 45);
  if (*(unsigned char *)(v45 + 45))
  {
    if (*(double *)(v4 + 2384) == 0.0) {
      int v109 = 0;
    }
    else {
      int v109 = *(_DWORD *)(v43 + 1804) == 3 || *(_DWORD *)(v43 + 2104) == 21;
    }
  }
  int v110 = *(unsigned __int8 *)(v45 + 46);
  if (*(unsigned char *)(v45 + 46)) {
    int v110 = *(_DWORD *)(v4 + 160) == 0;
  }
  int v111 = *(unsigned __int8 *)(v45 + 47);
  if (*(unsigned char *)(v45 + 47)) {
    int v111 = *(_DWORD *)(v4 + 160) == 0;
  }
  int v112 = *(unsigned __int8 *)(v45 + 48);
  if (*(unsigned char *)(v45 + 48)) {
    int v112 = *(_DWORD *)(v4 + 160) == 0;
  }
  if (*(unsigned char *)(v45 + 49)) {
    BOOL v113 = *(double *)(v4 + 2368) != 0.0;
  }
  else {
    BOOL v113 = 0;
  }
  if (*(unsigned char *)(v45 + 50)) {
    BOOL v114 = *(unsigned char *)(v45 + 55) != 0;
  }
  else {
    BOOL v114 = 0;
  }
  if (*(unsigned char *)(v45 + 51)) {
    BOOL v115 = *(unsigned char *)(v45 + 56) != 0;
  }
  else {
    BOOL v115 = 0;
  }
  int v116 = *(_DWORD *)(v4 + 2436);
  if (*(unsigned __int8 *)(v45 + 293) | *(unsigned __int8 *)(v45 + 292)) {
    int v117 = 1;
  }
  else {
    int v117 = v110;
  }
  if (*(unsigned char *)(v45 + 53) || v116 > 0 || v115 || ((v114 | v113 | v112 | v111 | v109 | v117) & 1) != 0)
  {
    BOOL v119 = v109 == 0;
    if (v109) {
      unsigned int v120 = 9;
    }
    else {
      unsigned int v120 = 0;
    }
    if (v119) {
      int v121 = 23;
    }
    else {
      int v121 = 32;
    }
    if (v113) {
      v120 += 9;
    }
    int v122 = v121 + 9;
    if (!v113) {
      int v122 = v121;
    }
    if (v110) {
      v120 += 5;
    }
    int v123 = v122 + 5;
    if (!v110) {
      int v123 = v122;
    }
    BOOL v124 = v111 == 0;
    if (v111) {
      v120 += 5;
    }
    int v125 = v123 + 5;
    if (v124) {
      int v125 = v123;
    }
    if (v112)
    {
      v120 += 5;
      v125 += 5;
    }
    if (v114)
    {
      v120 += 25;
      v125 += 25;
    }
    if (v115)
    {
      v120 += 5;
      v125 += 5;
    }
    if (*(unsigned char *)(v45 + 292))
    {
      v120 += 56;
      v125 += 56;
    }
    if (*(unsigned char *)(v45 + 293))
    {
      v120 += 10;
      v125 += 10;
    }
    if (*(unsigned char *)(v45 + 85))
    {
      v120 += 17;
      v125 += 17;
    }
    if (v116 > 0)
    {
      v120 += 9;
      v125 += 9;
    }
    if (*(unsigned char *)(v45 + 53)) {
      v120 += 6;
    }
    int v126 = v125 + 6;
    if (!*(unsigned char *)(v45 + 53)) {
      int v126 = v125;
    }
    unsigned int v118 = v120 + v126 + (v120 >> 1) + 1;
  }
  else
  {
    unsigned int v118 = 0;
  }
  size_t v127 = v75 + v118;
  int v128 = (char *)malloc_type_malloc(v127, 0x557F7C4EuLL);
  if (!v128)
  {
    if (sub_D1C38(3u, 4))
    {
      int v135 = sub_D1C7C(3u);
      __uint64_t v136 = sub_DDEFC();
      uint64_t v137 = (const char *)sub_D1CB0(4);
      if (v135)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SEIBuffer malloc failed. frame %d; SEI_FRAME_Size %ld\n",
          v136,
          3,
          v137,
          "SendFrame",
          3963,
          "SEIBuffer != __null",
          *(_DWORD *)(v4 + 160),
          v127);
        __uint64_t v136 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SEIBuffer malloc failed. frame %d; SEI_FRAME_Size %ld",
        v136,
        3);
    }
    return 0;
  }
  __uint64_t v129 = v128;
  int v130 = sub_A2B30(v6, v4, v128, v127, v447, v46, v66);
  if (v130)
  {
    int v131 = v130;
    if (sub_D1C38(3u, 4))
    {
      int v132 = sub_D1C7C(3u);
      __uint64_t v133 = sub_DDEFC();
      __uint64_t v134 = (const char *)sub_D1CB0(4);
      if (v132)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: AddAllSEIs failed. frame %d err = %d\n", v133, 3, v134, "SendFrame", 3966, "err == 0", *(_DWORD *)(v4 + 160), v131);
        __uint64_t v133 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: AddAllSEIs failed. frame %d err = %d", v133);
    }
    return 0;
  }
  v11 += *(int *)(v44 + 24);
  if (*(unsigned char *)v45)
  {
    int v54 = v129;
    uint64_t v43 = v4 + 21664;
    if (!*(_DWORD *)(v4 + 160))
    {
      v11 += *(void *)(v44 + 5936);
      *(void *)(v44 + 5936) = 0;
    }
  }
  else
  {
    int v54 = v129;
    uint64_t v43 = v4 + 21664;
  }
  if (*(unsigned char *)(v45 + 304)) {
    v11 += *(unsigned int *)(v45 + 820);
  }
LABEL_61:
  uint64_t v55 = *(void *)(v6 + 8 * *(int *)(v4 + 916) + 27072);
  if (!v55)
  {
    if (!sub_D1C38(3u, 4)) {
      return 0;
    }
    int v71 = sub_D1C7C(3u);
    __uint64_t v72 = sub_DDEFC();
    int v73 = (const char *)sub_D1CB0(4);
    if (!v71)
    {
LABEL_110:
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader == NULL");
      return 0;
    }
    int v74 = 3990;
LABEL_73:
    printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader == NULL\n", v72, 3, v73, "SendFrame", v74, "codedHeader != __null");
    sub_DDEFC();
    sub_D1CB0(4);
    goto LABEL_110;
  }
  __uint64_t v435 = v54;
  uint64_t v56 = (long long *)(v55 + 182920);
  int v433 = (float *)(v6 + 51128);
  int v57 = (_OWORD *)(v6 + 51128 + 48 * *(unsigned int *)(v4 + 168));
  long long v58 = *v56;
  long long v59 = v56[2];
  v57[1] = v56[1];
  v57[2] = v59;
  _OWORD *v57 = v58;
  int v444 = v7;
  if (sub_D1C38(0x2Eu, 7))
  {
    int v60 = sub_D1C7C(0x2Eu);
    __uint64_t v61 = sub_DDEFC();
    int v62 = (const char *)sub_D1CB0(7);
    if (v60)
    {
      printf("%lld %d AVE %s: %s:%d %d %d %d %p %d %d %d\n", v61, 46, v62, "SendFrame", 3995, *(_DWORD *)(v445 + 380), *(_DWORD *)(v4 + 168), *(_DWORD *)(v4 + 160), *((const void **)v7 + 4), v7[10], v7[36], *((unsigned __int8 *)v7 + 148));
      __uint64_t v63 = sub_DDEFC();
      sampleSizeArrayc = (size_t *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s:%d %d %d %d %p %d %d %d", v63, 46, sampleSizeArrayc, "SendFrame");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %d %d %d %p %d %d %d", v61, 46, v62, "SendFrame");
    }
    uint64_t v46 = a4;
  }
  uint64_t v436 = v4;
  uint64_t v440 = v44;
  uint64_t v434 = v45;
  if (*(_DWORD *)(v445 + 380) <= 1u || *(_DWORD *)(v4 + 168))
  {
    uint64_t v441 = v43;
    uint64_t v79 = 0;
    char v80 = 1;
    do
    {
      char v81 = v80;
      if (sub_D1C38(0x2Eu, 7))
      {
        int v82 = sub_D1C7C(0x2Eu);
        __uint64_t v83 = sub_DDEFC();
        size_t v84 = (const char *)sub_D1CB0(7);
        uint64_t v85 = v6;
        uint64_t v86 = v6 + 12 * v79 + 51084;
        int v89 = *(_DWORD *)(v86 + 8);
        int v88 = (_DWORD *)(v86 + 8);
        int v87 = v89;
        if (v82)
        {
          printf("%lld %d AVE %s: H264FrameRec: Filler[%d] %d %d\n", v83, 46, v84, v79, *((char *)v88 - 1), v87);
          __uint64_t v90 = sub_DDEFC();
          int v91 = (const char *)sub_D1CB0(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: Filler[%d] %d %d", v90, 46, v91, v79, *((char *)v88 - 1), *v88);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: Filler[%d] %d %d", v83, 46, v84, v79, *((char *)v88 - 1), v87);
        }
        uint64_t v6 = v85;
      }
      char v80 = 0;
      v11 += *(int *)(v6 + 12 * v79 + 51092) + (uint64_t)*(char *)(v6 + 12 * v79 + 51091);
      uint64_t v79 = 1;
    }
    while ((v81 & 1) != 0);
    uint64_t v4 = v436;
    uint64_t v7 = v444;
    if (sub_D1C38(0x2Eu, 7))
    {
      int v92 = sub_D1C7C(0x2Eu);
      __uint64_t v93 = sub_DDEFC();
      int v94 = (const char *)sub_D1CB0(7);
      if (v92)
      {
        printf("%lld %d AVE %s: H264FrameRec: FinalOutput_FRAME_Size = %ld\n", v93, 46, v94, v11);
        __uint64_t v95 = sub_DDEFC();
        sampleSizeArrayd = (size_t *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: FinalOutput_FRAME_Size = %ld", v95, 46, (const char *)sampleSizeArrayd, v11);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: FinalOutput_FRAME_Size = %ld", v93, 46, v94, v11);
      }
    }
    dataCFIndex Length = v11;
    unsigned int v96 = v444[36];
    size_t v97 = v11;
    if ((v96 & 0x80000000) == 0)
    {
      size_t v97 = v11;
      if (v96 == *(_DWORD *)(v436 + 160) - 1)
      {
        size_t v97 = v11 + (int)v444[10];
        dataCFIndex Length = v97;
      }
    }
    int v98 = sub_A76AC(v6, v97, &dataBuffer);
    int v99 = v98;
    unsigned int v100 = v444[36];
    uint64_t v43 = v441;
    uint64_t v46 = a4;
    if ((v100 & 0x80000000) == 0
      && v100 == *(_DWORD *)(v436 + 160) - 1
      && (unsigned int v101 = (const void *)*((void *)v444 + 4)) != 0)
    {
      memcpy(v98, v101, (int)v444[10]);
      unsigned int v102 = v444[10];
    }
    else
    {
      unsigned int v102 = 0;
    }
    v444[10] = 0;
    v444[36] = -1;
    if (*(_DWORD *)(v445 + 380) <= 1u) {
      *((unsigned char *)v444 + 148) = 0;
    }
  }
  else
  {
    if (!*((void *)v7 + 4))
    {
      int v103 = malloc_type_malloc(*(unsigned int *)(v6 + 26952), 0x1187280DuLL);
      *((void *)v7 + 4) = v103;
      if (!v103)
      {
        if (sub_D1C38(0x2Eu, 4))
        {
          int v206 = sub_D1C7C(0x2Eu);
          __uint64_t v207 = sub_DDEFC();
          int v208 = (const char *)sub_D1CB0(4);
          if (v206)
          {
            printf("%lld %d AVE %s: %s::%s:%d %s | wrong multi view buffer %p %d\n", v207, 46, v208, "AVE_FrameRecv", "SendFrame", 4038, "m_sMVBuf.pBuf != __null", *((const void **)v7 + 4), *(_DWORD *)(v4 + 160));
            __uint64_t v209 = sub_DDEFC();
            sampleSizeArrayuint64_t k = (size_t *)sub_D1CB0(4);
            syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong multi view buffer %p %d", v209, 46, sampleSizeArrayk);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong multi view buffer %p %d", v207, 46, v208);
          }
        }
        return 4294954394;
      }
    }
    if (sub_D1C38(0x2Eu, 7))
    {
      int v104 = sub_D1C7C(0x2Eu);
      __uint64_t v105 = sub_DDEFC();
      int v106 = (const char *)sub_D1CB0(7);
      if (v104)
      {
        printf("%lld %d AVE %s: H264FrameRec: FinalOutput_FRAME_Size = %ld\n", v105, 46, v106, v11);
        __uint64_t v107 = sub_DDEFC();
        sampleSizeArraye = (size_t *)sub_D1CB0(7);
        uint64_t v46 = a4;
        syslog(3, "%lld %d AVE %s: H264FrameRec: FinalOutput_FRAME_Size = %ld", v107, 46, (const char *)sampleSizeArraye, v11);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: FinalOutput_FRAME_Size = %ld", v105, 46, v106, v11);
      }
    }
    dataCFIndex Length = v11;
    int v99 = (char *)*((void *)v7 + 4);
    v7[10] = v11;
    v7[36] = *(_DWORD *)(v4 + 160);
    BOOL v138 = *(_DWORD *)(v43 + 1804) == 3 || *(_DWORD *)(v43 + 2104) == 21;
    unsigned int v102 = 0;
    *((unsigned char *)v7 + 148) = v138;
  }
  if (!v99)
  {
    if (!sub_D1C38(3u, 4)) {
      return 3758097085;
    }
    int v151 = sub_D1C7C(3u);
    __uint64_t v152 = sub_DDEFC();
    int v153 = (const char *)sub_D1CB0(4);
    if (v151)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: FinalOutputFrameBuffer malloc failed. frame %d; FinalOutput_FRAME_Size %ld\n",
        v152,
        3,
        v153,
        "SendFrame",
        4048,
        "FinalOutputFrameBuffer != __null",
        *(_DWORD *)(v4 + 160),
        v11);
      __uint64_t v152 = sub_DDEFC();
      sub_D1CB0(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: FinalOutputFrameBuffer malloc failed. frame %d; FinalOutput_FRAME_Size %ld",
      v152,
      3);
    return 3758097085;
  }
  __uint64_t v139 = (_DWORD *)v43;
  v443 = (int *)v6;
  if (*(_DWORD *)(v445 + 380) >= 2u) {
    *((unsigned char *)v7 + 149) = 0;
  }
  memoryBlocuint64_t k = v99;
  int v140 = &v99[v102];
  int v141 = v443;
  sub_A42E4(v443, v4, v140, v435, v11, v447, v46);
  if (!*(void *)v440) {
    goto LABEL_214;
  }
  uint64_t v142 = *(void *)&v443[2 * *(int *)(v4 + 916) + 6768];
  if (!v142)
  {
    if (!sub_D1C38(3u, 4)) {
      return 0;
    }
    int v168 = sub_D1C7C(3u);
    __uint64_t v72 = sub_DDEFC();
    int v73 = (const char *)sub_D1CB0(4);
    if (!v168) {
      goto LABEL_110;
    }
    int v74 = 4066;
    goto LABEL_73;
  }
  *(unsigned char *)(v440 + 8) = 0;
  long long v143 = *(_OWORD *)(v4 + 2296);
  *(void *)(v142 + 140880) = *(void *)(v4 + 2312);
  *(_OWORD *)(v142 + 140864) = v143;
  int v141 = v443;
  if (!*(_DWORD *)(v4 + 12))
  {
    __uint64_t v173 = sub_A95F4((uint64_t)v443, (const void *)(v142 + 140860));
    if (v173)
    {
      int v174 = v173;
      memcpy((void *)(v4 + 25350), v173, 0x626uLL);
      *(unsigned char *)(v440 + 8) = 1;
      int v175 = (FILE *)sub_3DA0(*(void *)(v45 + 3416), 4u, *(_DWORD *)(v4 + 12));
      int v141 = v443;
      if (v175)
      {
        __uint64_t v176 = v175;
        fseeko(v175, 1574 * v174[11] + 264, 0);
        fwrite(v174, 1uLL, 0x626uLL, v176);
      }
    }
    else
    {
      int v141 = v443;
      if (sub_D1C38(0xD8u, 6))
      {
        int v196 = sub_D1C7C(0xD8u);
        __uint64_t v197 = sub_DDEFC();
        uint64_t v198 = (const char *)sub_D1CB0(6);
        int v199 = *(_DWORD *)(v4 + 160);
        if (v196)
        {
          printf("%lld %d AVE %s:   F %d pMpStats NULL \n", v197, 216, v198, v199);
          __uint64_t v200 = sub_DDEFC();
          sampleSizeArrayuint64_t i = (size_t *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s:   F %d pMpStats NULL ", v200, 216, (const char *)sampleSizeArrayi, *(_DWORD *)(v4 + 160));
        }
        else
        {
          syslog(3, "%lld %d AVE %s:   F %d pMpStats NULL ", v197, 216, v198, v199);
        }
        int v141 = v443;
      }
    }
  }
LABEL_214:
  int v144 = v141 + 12844;
  if ((v438 & 1) == 0)
  {
    if (v447) {
      int v145 = a4;
    }
    else {
      int v145 = 0;
    }
    sub_A1574((uint64_t)v443, v4, v145);
  }
  uint64_t v146 = v440;
  if (v435) {
    free(v435);
  }
  sub_5A7C(*(void **)(v45 + 3416), *(_DWORD *)(v4 + 16), *(const void **)&v443[2 * *(int *)(v4 + 916) + 6448], 432 * ((*v144 + 15) >> 4) * ((v144[1] + 15) >> 4));
  __uint64_t v147 = *(__CVBuffer **)(v4 + 21640);
  if (v147) {
    sub_685C(*(void *)(v45 + 3416), v147);
  }
  v439 = v144;
  if (*(_DWORD *)(v445 + 380) >= 2u && *(_DWORD *)(v4 + 168))
  {
    uint64_t v148 = (uint64_t)&v443[4 * *(unsigned __int8 *)(v4 + 160) + 60292];
    int v149 = v443[4 * *(unsigned __int8 *)(v4 + 160) + 60293];
    *(_DWORD *)v148 += 8 * v11;
    *(void *)(v148 + 8) = *(void *)(v4 + 2344);
    uint64_t v150 = v139;
    *(_DWORD *)(v148 + 4) = v149 + v139[518];
  }
  else
  {
    uint64_t v154 = (uint64_t)&v443[4 * *(unsigned __int8 *)(v4 + 160) + 60292];
    *(_DWORD *)uint64_t v154 = 8 * v11;
    *(void *)(v154 + 8) = *(void *)(v4 + 2344);
    uint64_t v150 = v139;
    *(_DWORD *)(v154 + 4) = v139[518];
  }
  __uint64_t v155 = (uint64_t *)(v7 + 66);
  sub_5338(*(void **)(v45 + 3416), *(_DWORD *)(v4 + 16), v140, v11);
  *(void *)(v4 + 27688) = sub_DDEFC();
  if (*(unsigned char *)(v45 + 209)) {
    uint64_t v156 = *((void *)v7 + 34);
  }
  else {
    uint64_t v156 = *v155;
  }
  if (v156 == 1)
  {
    if (*((void *)v7 + 25) && *((void *)v7 + 24))
    {
      memset(&sampleTimingArray, 0, 32);
      uint64_t v157 = (uint64_t)v443;
      int v158 = memoryBlock;
      if (*(_DWORD *)(v445 + 380) >= 2u && !*(_DWORD *)(v4 + 168)) {
        return 0;
      }
      if (v447)
      {
        uint64_t v159 = 0;
        CMTimeEpoch v160 = -1;
        CMTimeValue v161 = -1;
        uint64_t v162 = a4;
      }
      else
      {
        CMTimeEpoch v160 = *(void *)(v4 + 2296);
        CMTimeValue v161 = *(int *)(v4 + 2304);
        uint64_t v162 = -1;
        uint64_t v159 = *(void *)(v4 + 21640);
      }
      sampleTimingArray.duration.value = *(unsigned int *)(v4 + 160);
      *(void *)&sampleTimingArray.duration.timescale = v162;
      sampleTimingArray.duration.CMTimeEpoch epoch = v160;
      sampleTimingArray.presentationTimeStamp.value = v161;
      *(void *)&sampleTimingArray.presentationTimeStamp.timescale = v159;
      if (*(void *)v440
        && *(unsigned char *)(v440 + 8)
        && !*(_DWORD *)(v4 + 12)
        && (CFMutableDataRef Mutable = CFDataCreateMutable(kCFAllocatorDefault, 0)) != 0)
      {
        int v241 = Mutable;
        CFDataAppendBytes(Mutable, (const UInt8 *)(v4 + 25350), 1574);
        __uint64_t v242 = *(opaqueCMSampleBuffer **)(v4 + 25370);
        sbuf[1] = *(CMSampleBufferRef *)(v4 + 25354);
        sbuf[2] = *(CMSampleBufferRef *)(v4 + 25362);
        sbuf[3] = v242;
        uint64_t v12 = VTMultiPassStorageSetDataAtTimeStamp();
        CFRelease(v241);
        if (v12)
        {
          uint64_t v243 = v45;
          if (sub_D1C38(0x2Eu, 4))
          {
            int v244 = sub_D1C7C(0x2Eu);
            __uint64_t v245 = sub_DDEFC();
            int v246 = (const char *)sub_D1CB0(4);
            if (v244)
            {
              printf("%lld %d AVE %s: H264FrameRec ERROR: VTMultiPassStorageSetDataAtTimeStamp failed. need to set up a recovery here...\n", v245, 46, v246);
              __uint64_t v247 = sub_DDEFC();
              sampleSizeArrayl = (size_t *)sub_D1CB0(4);
              syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: VTMultiPassStorageSetDataAtTimeStamp failed. need to set up a recovery here...", v247, 46, (const char *)sampleSizeArrayl);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: VTMultiPassStorageSetDataAtTimeStamp failed. need to set up a recovery here...", v245, 46, v246);
            }
          }
          uint64_t v45 = v243;
          int v158 = memoryBlock;
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
      if (sub_D1C38(0x2Eu, 7))
      {
        uint64_t v201 = v45;
        int v202 = sub_D1C7C(0x2Eu);
        __uint64_t v203 = sub_DDEFC();
        int v204 = (const char *)sub_D1CB0(7);
        int v158 = memoryBlock;
        if (v202)
        {
          printf("%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame %p on %ld bytes\n", v203, 46, v204, memoryBlock, v11);
          __uint64_t v205 = sub_DDEFC();
          sampleSizeArrayuint64_t j = (size_t *)sub_D1CB0(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame %p on %ld bytes", v205, 46, (const char *)sampleSizeArrayj, memoryBlock, v11);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame %p on %ld bytes", v203, 46, v204, memoryBlock, v11);
        }
        uint64_t v45 = v201;
      }
      kdebug_trace();
      (*((void (**)(void, char *, size_t, CMSampleTimingInfo *, void))v444 + 25))(*((void *)v444 + 24), v158, dataLength, &sampleTimingArray, *(unsigned int *)(v45 + 120));
      kdebug_trace();
    }
    else
    {
      uint64_t v157 = (uint64_t)v443;
      int v158 = memoryBlock;
      if (sub_D1C38(0x2Eu, 7))
      {
        int v169 = sub_D1C7C(0x2Eu);
        __uint64_t v170 = sub_DDEFC();
        int v171 = (const char *)sub_D1CB0(7);
        if (v169)
        {
          printf("%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it\n", v170, 46, v171);
          __uint64_t v172 = sub_DDEFC();
          sampleSizeArrayg = (size_t *)sub_D1CB0(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v172, 46, (const char *)sampleSizeArrayg);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v170, 46, v171);
        }
      }
      uint64_t v12 = 0;
    }
    sub_A40B4(v157, v158);
    goto LABEL_537;
  }
  if (v447)
  {
    uint64_t v12 = 0;
LABEL_537:
    if (dataBuffer)
    {
      CFRelease(dataBuffer);
      CMBlockBufferRef dataBuffer = 0;
    }
    *(void *)(v4 + 27680) = sub_DDEFC();
    return v12;
  }
  sbuf[0] = 0;
  if (*(unsigned char *)v45)
  {
LABEL_243:
    if (*(_DWORD *)(v445 + 380) < 2u || *(_DWORD *)(v4 + 168))
    {
      if (*(unsigned char *)(v45 + 209))
      {
        uint64_t v163 = CMBlockBufferCreateWithMemoryBlock(kCFAllocatorDefault, memoryBlock, dataLength, *((CFAllocatorRef *)v444 + 28), 0, 0, dataLength, 1u, &dataBuffer);
        if (v163)
        {
          uint64_t v12 = v163;
          if (sub_D1C38(0x2Eu, 4))
          {
            int v164 = sub_D1C7C(0x2Eu);
            __uint64_t v165 = sub_DDEFC();
            __uint64_t v166 = (const char *)sub_D1CB0(4);
            if (v164)
            {
              printf("%lld %d AVE %s: H264FrameRec ERROR: FigBlockBufferCreateWithMemoryBlock failed.\n", v165, 46, v166);
              __uint64_t v167 = sub_DDEFC();
              sampleSizeArrayf = (size_t *)sub_D1CB0(4);
              syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: FigBlockBufferCreateWithMemoryBlock failed.", v167, 46, (const char *)sampleSizeArrayf);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: FigBlockBufferCreateWithMemoryBlock failed.", v165, 46, v166);
            }
          }
          kdebug_trace();
          if (*(unsigned char *)(v45 + 209)) {
            uint64_t v12 = VTEncoderSessionEmitEncodedTile();
          }
          kdebug_trace();
          if (!v12) {
            goto LABEL_535;
          }
          if (v12 == -12903)
          {
            if (sub_D1C38(0x2Eu, 5))
            {
              int v248 = sub_D1C7C(0x2Eu);
              __uint64_t v249 = sub_DDEFC();
              int v250 = (const char *)sub_D1CB0(5);
              if (v248)
              {
                printf("%lld %d AVE %s: %s:%d m_VTEncoderSession has already been invalidated. Dropping frame %d %d\n", v249, 46, v250, "SendFrame", 5110, *(_DWORD *)(v146 + 20), *(_DWORD *)(v4 + 160));
LABEL_528:
                __uint64_t v371 = sub_DDEFC();
                sub_D1CB0(5);
                syslog(3, "%lld %d AVE %s: %s:%d m_VTEncoderSession has already been invalidated. Dropping frame %d %d", v371);
                goto LABEL_533;
              }
              goto LABEL_532;
            }
            goto LABEL_533;
          }
          if (!sub_D1C38(0x2Eu, 4)) {
            goto LABEL_535;
          }
          int v251 = sub_D1C7C(0x2Eu);
          __uint64_t v252 = sub_DDEFC();
          __uint64_t v253 = (const char *)sub_D1CB0(4);
          if (v251)
          {
            printf("%lld %d AVE %s: %s:%d ERROR: VTEncoderSessionEmitEncodedFrame failed. %d %d %d\n", v252, 46, v253, "SendFrame", 5119, v12, *(_DWORD *)(v146 + 20), *(_DWORD *)(v4 + 160));
LABEL_385:
            __uint64_t v284 = sub_DDEFC();
            sub_D1CB0(4);
            syslog(3, "%lld %d AVE %s: %s:%d ERROR: VTEncoderSessionEmitEncodedFrame failed. %d %d %d", v284);
            goto LABEL_535;
          }
          goto LABEL_534;
        }
      }
      sampleTimingArray.duration.value = *(void *)(v4 + 2320);
      CMTimeEpoch v187 = *(void *)(v4 + 2336);
      *(void *)&sampleTimingArray.duration.timescale = *(void *)(v4 + 2328);
      CMTimeValue v188 = *(void *)(v4 + 2296);
      sampleTimingArray.duration.CMTimeEpoch epoch = v187;
      sampleTimingArray.presentationTimeStamp.value = v188;
      CMTimeEpoch v189 = *(void *)(v4 + 2312);
      *(void *)&sampleTimingArray.presentationTimeStamp.timescale = *(void *)(v4 + 2304);
      CMTimeValue v190 = a3[1];
      sampleTimingArray.presentationTimeStamp.CMTimeEpoch epoch = v189;
      sampleTimingArray.decodeTimeStamp.value = v190;
      *(void *)&sampleTimingArray.decodeTimeStamp.timescale = a3[2];
      sampleTimingArray.decodeTimeStamp.CMTimeEpoch epoch = a3[3];
      time1.CMTimeEpoch epoch = v189;
      *(_OWORD *)&time1.value = *(_OWORD *)&sampleTimingArray.presentationTimeStamp.value;
      CMTime time2 = sampleTimingArray.decodeTimeStamp;
      unsigned int v191 = (CMFormatDescriptionRef *)v444;
      if (!CMTimeCompare(&time1, &time2) && !*(unsigned char *)(v45 + 1752))
      {
        sampleTimingArray.decodeTimeStamp = kCMTimeInvalid;
        if (sub_D1C38(0x2Eu, 8))
        {
          int v192 = sub_D1C7C(0x2Eu);
          __uint64_t v193 = sub_DDEFC();
          __uint64_t v194 = (const char *)sub_D1CB0(8);
          if (v192)
          {
            printf("%lld %d AVE %s: H264FrameRec: final decodeTimeStamp INVALID\n", v193, 46, v194);
            __uint64_t v195 = sub_DDEFC();
            sampleSizeArrayh = (size_t *)sub_D1CB0(8);
            syslog(3, "%lld %d AVE %s: H264FrameRec: final decodeTimeStamp INVALID", v195, 46, (const char *)sampleSizeArrayh);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: final decodeTimeStamp INVALID", v193, 46, v194);
          }
        }
      }
      *(void *)__uint64_t v449 = v155;
      if (sub_D1C38(0x33u, 7))
      {
        int v258 = sub_D1C7C(0x33u);
        __uint64_t v259 = sub_DDEFC();
        int v260 = (const char *)sub_D1CB0(7);
        uint64_t v261 = *(unsigned int *)(v146 + 20);
        uint64_t v262 = *(unsigned int *)(v4 + 160);
        if (v258)
        {
          printf("%lld %d AVE %s: %s:%d %d %d DTS %lld %d 0x%x %lld | PTS %lld %d 0x%x %lld -> %lld %d | duration %lld %d 0x%x %lld\n", v259, 51, v260, "SendFrame", 4526, v261, v262, sampleTimingArray.decodeTimeStamp.value, sampleTimingArray.decodeTimeStamp.timescale, sampleTimingArray.decodeTimeStamp.flags, sampleTimingArray.decodeTimeStamp.epoch, sampleTimingArray.presentationTimeStamp.value, sampleTimingArray.presentationTimeStamp.timescale, sampleTimingArray.presentationTimeStamp.flags, sampleTimingArray.presentationTimeStamp.epoch, *(void *)(v4 + 2344), *(_DWORD *)(v4 + 2352), sampleTimingArray.duration.value,
            sampleTimingArray.duration.timescale,
            sampleTimingArray.duration.flags,
            sampleTimingArray.duration.epoch);
          __uint64_t v263 = sub_DDEFC();
          double v264 = sub_D1CB0(7);
          unsigned int v191 = (CMFormatDescriptionRef *)v444;
          syslog(3, "%lld %d AVE %s: %s:%d %d %d DTS %lld %d 0x%x %lld | PTS %lld %d 0x%x %lld -> %lld %d | duration %lld %d 0x%x %lld", v263, 51, v264, "SendFrame", 4526, *(unsigned int *)(v146 + 20), *(unsigned int *)(v4 + 160), sampleTimingArray.decodeTimeStamp.value, sampleTimingArray.decodeTimeStamp.timescale, sampleTimingArray.decodeTimeStamp.flags, sampleTimingArray.decodeTimeStamp.epoch, sampleTimingArray.presentationTimeStamp.value);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %d %d DTS %lld %d 0x%x %lld | PTS %lld %d 0x%x %lld -> %lld %d | duration %lld %d 0x%x %lld", v259, 51, v260, "SendFrame", 4526, v261, v262, sampleTimingArray.decodeTimeStamp.value, sampleTimingArray.decodeTimeStamp.timescale, sampleTimingArray.decodeTimeStamp.flags, sampleTimingArray.decodeTimeStamp.epoch, sampleTimingArray.presentationTimeStamp.value);
        }
      }
      OSStatus v265 = CMSampleBufferCreate(kCFAllocatorDefault, dataBuffer, 1u, 0, 0, v191[35], 1, 1, &sampleTimingArray, 1, &dataLength, sbuf);
      if (sub_D1C38(0x2Eu, 7))
      {
        __uint64_t v266 = v191;
        int v267 = sub_D1C7C(0x2Eu);
        __uint64_t v268 = sub_DDEFC();
        __uint64_t v269 = (const char *)sub_D1CB0(7);
        CMFormatDescriptionRef v270 = v266[35];
        if (v267)
        {
          printf("%lld %d AVE %s: CMSampleBufferCreate err %d sbuf %p m_videoFormatDesc %p\n", v268, 46, v269, v265, sbuf[0], v270);
          __uint64_t v271 = sub_DDEFC();
          __uint64_t v272 = (const char *)sub_D1CB0(7);
          syslog(3, "%lld %d AVE %s: CMSampleBufferCreate err %d sbuf %p m_videoFormatDesc %p", v271, 46, v272, v265, sbuf[0], v266[35]);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: CMSampleBufferCreate err %d sbuf %p m_videoFormatDesc %p", v268, 46, v269, v265, sbuf[0], v270);
        }
        unsigned int v191 = v266;
      }
      if (v265)
      {
        __uint64_t v155 = *(uint64_t **)v449;
        if (sub_D1C38(0x2Eu, 4))
        {
          int v273 = sub_D1C7C(0x2Eu);
          __uint64_t v274 = sub_DDEFC();
          int v275 = (const char *)sub_D1CB0(4);
          if (v273)
          {
            printf("%lld %d AVE %s: H264FrameRec ERROR: FigSampleBufferCreate failed.\n", v274, 46, v275);
            __uint64_t v276 = sub_DDEFC();
            sampleSizeArrayuint64_t m = (size_t *)sub_D1CB0(4);
            syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: FigSampleBufferCreate failed.", v276, 46, (const char *)sampleSizeArraym);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: FigSampleBufferCreate failed.", v274, 46, v275);
          }
        }
        if (*(unsigned char *)(v434 + 209)) {
          uint64_t v279 = VTEncoderSessionEmitEncodedTile();
        }
        else {
          uint64_t v279 = VTEncoderSessionEmitEncodedFrame();
        }
        uint64_t v12 = v279;
        if (!v279) {
          goto LABEL_535;
        }
        if (v279 == -12903)
        {
          if (sub_D1C38(0x2Eu, 5))
          {
            int v280 = sub_D1C7C(0x2Eu);
            __uint64_t v249 = sub_DDEFC();
            int v281 = (const char *)sub_D1CB0(5);
            if (v280)
            {
              printf("%lld %d AVE %s: %s:%d m_VTEncoderSession has already been invalidated. Dropping frame %d %d\n", v249, 46, v281, "SendFrame", 5069, *(_DWORD *)(v146 + 20), *(_DWORD *)(v4 + 160));
              goto LABEL_528;
            }
LABEL_532:
            syslog(3, "%lld %d AVE %s: %s:%d m_VTEncoderSession has already been invalidated. Dropping frame %d %d", v249);
          }
LABEL_533:
          *__uint64_t v155 = 0;
          v155[1] = 0;
          uint64_t v12 = 4294954393;
          goto LABEL_535;
        }
        if (!sub_D1C38(0x2Eu, 4)) {
          goto LABEL_535;
        }
        int v282 = sub_D1C7C(0x2Eu);
        __uint64_t v252 = sub_DDEFC();
        int v283 = (const char *)sub_D1CB0(4);
        if (v282)
        {
          printf("%lld %d AVE %s: %s:%d ERROR: VTEncoderSessionEmitEncodedFrame failed. %d %d %d\n", v252, 46, v283, "SendFrame", 5078, v12, *(_DWORD *)(v146 + 20), *(_DWORD *)(v4 + 160));
          goto LABEL_385;
        }
LABEL_534:
        syslog(3, "%lld %d AVE %s: %s:%d ERROR: VTEncoderSessionEmitEncodedFrame failed. %d %d %d", v252);
LABEL_535:
        if (sbuf[0]) {
          CFRelease(sbuf[0]);
        }
        goto LABEL_537;
      }
      int v277 = v150[451];
      if (v277 == 3)
      {
        BOOL v278 = 1;
      }
      else
      {
        if (v150[526] == 21) {
          BOOL v278 = 1;
        }
        else {
          BOOL v278 = *(_DWORD *)(v445 + 380) >= 2u && *((unsigned char *)v191 + 148) != 0;
        }
        if (v277 == 2) {
          goto LABEL_393;
        }
      }
      if (!*(unsigned char *)(v436 + 4032))
      {
        BOOL v285 = 0;
        if (v277 == 1 && *(unsigned char *)(v434 + 206))
        {
          if (*(_WORD *)(v445 + 272))
          {
            BOOL v285 = v150[525] == *(unsigned __int16 *)(v445 + 272);
            if (v278) {
              goto LABEL_395;
            }
            goto LABEL_400;
          }
          BOOL v285 = 0;
        }
LABEL_394:
        if (v278)
        {
LABEL_395:
          char v286 = 1;
          BOOL v287 = 1;
          goto LABEL_401;
        }
LABEL_400:
        char v286 = 0;
        BOOL v287 = v277 == 0;
LABEL_401:
        if (sub_D1C38(0x2Eu, 7))
        {
          int v288 = sub_D1C7C(0x2Eu);
          __uint64_t v289 = sub_DDEFC();
          int v290 = (const char *)sub_D1CB0(7);
          int v291 = v150[451];
          if (v288)
          {
            printf("%lld %d AVE %s: H264FrameRec: FrameType %d isSyncSample %d isIFrame %d\n", v289, 46, v290, v291, v278, v287);
            __uint64_t v292 = sub_DDEFC();
            sampleSizeArrayn = (size_t *)sub_D1CB0(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: FrameType %d isSyncSample %d isIFrame %d", v292, 46, (const char *)sampleSizeArrayn, v150[451], v278, v287);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: FrameType %d isSyncSample %d isIFrame %d", v289, 46, v290, v291, v278, v287);
          }
        }
        CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf[0], 1u);
        CFNumberRef ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
        uint64_t v4 = v436;
        if (!ValueAtIndex) {
          goto LABEL_477;
        }
        int v295 = ValueAtIndex;
        if ((v286 & 1) == 0) {
          CFDictionarySetValue(ValueAtIndex, kCMSampleAttachmentKey_NotSync, kCFBooleanTrue);
        }
        if (v287) {
          int v296 = (const void **)&kCFBooleanFalse;
        }
        else {
          int v296 = (const void **)&kCFBooleanTrue;
        }
        CFDictionarySetValue(v295, kCMSampleAttachmentKey_DependsOnOthers, *v296);
        if (v285) {
          CFDictionarySetValue(v295, kCMSampleAttachmentKey_IsDependedOnByOthers, kCFBooleanFalse);
        }
        if (sub_D1C38(0x2Eu, 7))
        {
          int v297 = sub_D1C7C(0x2Eu);
          __uint64_t v298 = sub_DDEFC();
          int v299 = (const char *)sub_D1CB0(7);
          int v300 = *(unsigned __int8 *)(v434 + 206);
          if (v297)
          {
            printf("%lld %d AVE %s: H264FrameRec: bIsHierarchical %d\n", v298, 46, v299, v300);
            __uint64_t v301 = sub_DDEFC();
            sampleSizeArrayo = (size_t *)sub_D1CB0(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: bIsHierarchical %d", v301, 46, (const char *)sampleSizeArrayo, *(unsigned __int8 *)(v434 + 206));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: bIsHierarchical %d", v298, 46, v299, v300);
          }
        }
        if (sub_D1C38(0x2Eu, 7))
        {
          int v302 = sub_D1C7C(0x2Eu);
          __uint64_t v303 = sub_DDEFC();
          __uint64_t v304 = (const char *)sub_D1CB0(7);
          int v305 = *(_DWORD *)(v436 + 160);
          int v306 = v150[526];
          if (v302)
          {
            printf("%lld %d AVE %s: H264FrameRec: F %d FrameType %d nalUnitType %d\n", v303, 46, v304, v305, v150[451], v306);
            __uint64_t v307 = sub_DDEFC();
            long long v308 = (const char *)sub_D1CB0(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: F %d FrameType %d nalUnitType %d", v307, 46, v308, *(_DWORD *)(v436 + 160), v150[451], v150[526]);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: F %d FrameType %d nalUnitType %d", v303, 46, v304, v305, v150[451], v306);
          }
        }
        if (*(unsigned char *)(v434 + 206))
        {
          memcpy(__dst, v443 + 39612, sizeof(__dst));
          __uint64_t v309 = sub_A9E1C((uint64_t)v443, __dst, v150[525]);
          if (v309)
          {
            uint64_t v310 = v309;
            CFDictionarySetValue(v295, kCMSampleAttachmentKey_HEVCTemporalLevelInfo, v309);
            CFRelease(v310);
          }
          if ((v150[526] & 0xFFFFFFFE) == 2) {
            CFBooleanRef v311 = kCFBooleanTrue;
          }
          else {
            CFBooleanRef v311 = kCFBooleanFalse;
          }
          CFDictionarySetValue(v295, kCMSampleAttachmentKey_HEVCTemporalSubLayerAccess, v311);
          if ((v150[526] & 0xFFFFFFFE) == 4) {
            CFBooleanRef v312 = kCFBooleanTrue;
          }
          else {
            CFBooleanRef v312 = kCFBooleanFalse;
          }
          CFDictionarySetValue(v295, kCMSampleAttachmentKey_HEVCStepwiseTemporalSubLayerAccess, v312);
        }
        int v313 = v150;
        __uint64_t v314 = v439;
        if (*(_DWORD *)(v434 + 120) == 1 && (v313[526] - 19) <= 2)
        {
          CFNumberRef v315 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, v313 + 526);
          if (v315)
          {
            CFNumberRef v316 = v315;
            if (sub_D1C38(0x2Eu, 7))
            {
              int v317 = sub_D1C7C(0x2Eu);
              __uint64_t v318 = sub_DDEFC();
              unsigned __int16 v319 = (const char *)sub_D1CB0(7);
              int v320 = *(_DWORD *)(v436 + 160);
              if (v317)
              {
                printf("%lld %d AVE %s: H264FrameRec: F %d NUT CRA\n", v318, 46, v319, v320);
                __uint64_t v321 = sub_DDEFC();
                sampleSizeArrayp = (size_t *)sub_D1CB0(7);
                syslog(3, "%lld %d AVE %s: H264FrameRec: F %d NUT CRA", v321, 46, (const char *)sampleSizeArrayp, *(_DWORD *)(v436 + 160));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: H264FrameRec: F %d NUT CRA", v318, 46, v319, v320);
              }
              __uint64_t v314 = v439;
            }
            CFDictionarySetValue(v295, kCMSampleAttachmentKey_HEVCSyncSampleNALUnitType, v316);
            CFRelease(v316);
          }
        }
        uint64_t v4 = v436;
        if ((*(unsigned char *)(v434 + 1736) & 0x10) != 0)
        {
          if (*v313 == 1)
          {
            CFNumberRef v325 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (const void *)(v436 + 160));
            if (v325)
            {
              CFNumberRef v326 = v325;
              CFDictionarySetValue(v295, kVTSampleAttachmentKey_RequireAcknowledgementToken, v325);
              CFRelease(v326);
            }
          }
          if (*((unsigned char *)v313 + 40) && *(_DWORD *)(v434 + 1828) != 1) {
            CFDictionarySetValue(v295, kVTSampleAttachmentKey_ReferenceWasRefreshed, kCFBooleanTrue);
          }
        }
        if ((*((unsigned char *)v314 + 11) & 8) != 0)
        {
          int v327 = sub_AE194(v433, *(_DWORD *)(v445 + 380));
          if (v327)
          {
            uint64_t v328 = v327;
            CFDictionarySetValue(v295, @"QualityMetrics", v327);
            CFRelease(v328);
          }
        }
        if (*(int *)(v146 + 16) >= 16 && (v444[73] & 0xE0) != 0)
        {
          CFNumberRef v329 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, (const void *)(v436 + 4036));
          if (v329)
          {
            CFNumberRef v330 = v329;
            CFDictionarySetValue(v295, kVTSampleAttachmentKey_TemporalNoiseReductionApplied, v329);
            CFRelease(v330);
          }
        }
        int v331 = *(_DWORD *)(v434 + 1828);
        if (v331 > 36)
        {
          uint64_t v332 = v313;
          if ((v331 - 37) >= 2 && v331 != 10000) {
            goto LABEL_477;
          }
          goto LABEL_475;
        }
        if (v331)
        {
          uint64_t v332 = v313;
          if (v331 != 1)
          {
            if (v331 != 20)
            {
LABEL_477:
              __uint64_t v155 = *(uint64_t **)v449;
              if (*(void *)v146)
              {
                if (*(unsigned char *)(v146 + 8))
                {
                  BOOL v335 = CFDataCreateMutable(kCFAllocatorDefault, 0);
                  if (v335)
                  {
                    unsigned int v336 = v335;
                    CFDataAppendBytes(v335, (const UInt8 *)(v4 + 25350), 1574);
                    if (sub_D1C38(0x2Eu, 7))
                    {
                      int v337 = sub_D1C7C(0x2Eu);
                      __uint64_t v338 = sub_DDEFC();
                      int v339 = (const char *)sub_D1CB0(7);
                      unsigned int v340 = *(_DWORD *)(v4 + 12);
                      if (v340 >= 2) {
                        unsigned int v340 = 2;
                      }
                      if (v337)
                      {
                        printf("%lld %d AVE %s: H264FrameRec: m_multiPassStorage multiPassEndPassCounter %d\n", v338, 46, v339, v340);
                        __uint64_t v338 = sub_DDEFC();
                        int v339 = (const char *)sub_D1CB0(7);
                        unsigned int v340 = *(_DWORD *)(v4 + 12);
                        if (v340 >= 2) {
                          unsigned int v340 = 2;
                        }
                      }
                      syslog(3, "%lld %d AVE %s: H264FrameRec: m_multiPassStorage multiPassEndPassCounter %d", v338, 46, v339, v340);
                    }
                    if (sub_D1C38(0xD8u, 7))
                    {
                      int v361 = sub_D1C7C(0xD8u);
                      __uint64_t v362 = sub_DDEFC();
                      int v363 = (const char *)sub_D1CB0(7);
                      if (v361)
                      {
                        printf("%lld %d AVE %s: RECV_PTS: val %lld, timeScale %d, flags 0x%x, epoch %lld\n", v362, 216, v363, *(void *)(v4 + 2296), *(_DWORD *)(v4 + 2304), *(_DWORD *)(v4 + 2308), *(void *)(v4 + 2312));
                        __uint64_t v362 = sub_DDEFC();
                        sub_D1CB0(7);
                      }
                      syslog(3, "%lld %d AVE %s: RECV_PTS: val %lld, timeScale %d, flags 0x%x, epoch %lld", v362);
                    }
                    if (VTMultiPassStorageSetDataAtTimeStamp() && sub_D1C38(0x2Eu, 4))
                    {
                      int v364 = sub_D1C7C(0x2Eu);
                      __uint64_t v365 = sub_DDEFC();
                      int v366 = (const char *)sub_D1CB0(4);
                      if (v364)
                      {
                        printf("%lld %d AVE %s: H264FrameRec ERROR: VTMultiPassStorageSetDataAtTimeStamp failed. need to set up a recovery here...\n", v365, 46, v366);
                        __uint64_t v367 = sub_DDEFC();
                        sampleSizeArrayq = (size_t *)sub_D1CB0(4);
                        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: VTMultiPassStorageSetDataAtTimeStamp failed. need to set up a recovery here...", v367, 46, (const char *)sampleSizeArrayq);
                      }
                      else
                      {
                        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: VTMultiPassStorageSetDataAtTimeStamp failed. need to set up a recovery here...", v365, 46, v366);
                      }
                    }
                    CFRelease(v336);
                  }
                }
              }
              kdebug_trace();
              if (*(unsigned char *)(v434 + 209)) {
                uint64_t v368 = VTEncoderSessionEmitEncodedTile();
              }
              else {
                uint64_t v368 = VTEncoderSessionEmitEncodedFrame();
              }
              uint64_t v12 = v368;
              kdebug_trace();
              if (!v12) {
                goto LABEL_535;
              }
              if (v12 == -12903)
              {
                if (sub_D1C38(0x2Eu, 5))
                {
                  int v369 = sub_D1C7C(0x2Eu);
                  __uint64_t v249 = sub_DDEFC();
                  int v370 = (const char *)sub_D1CB0(5);
                  if (v369)
                  {
                    printf("%lld %d AVE %s: %s:%d m_VTEncoderSession has already been invalidated. Dropping frame %d %d\n", v249, 46, v370, "SendFrame", 5027, *(_DWORD *)(v146 + 20), *(_DWORD *)(v4 + 160));
                    goto LABEL_528;
                  }
                  goto LABEL_532;
                }
                goto LABEL_533;
              }
              if (!sub_D1C38(0x2Eu, 4)) {
                goto LABEL_535;
              }
              int v372 = sub_D1C7C(0x2Eu);
              __uint64_t v252 = sub_DDEFC();
              __uint64_t v373 = (const char *)sub_D1CB0(4);
              if (v372)
              {
                printf("%lld %d AVE %s: %s:%d ERROR: VTEncoderSessionEmitEncodedFrame failed. %d %d %d\n", v252, 46, v373, "SendFrame", 5036, v12, *(_DWORD *)(v146 + 20), *(_DWORD *)(v4 + 160));
                __uint64_t v374 = sub_DDEFC();
                sub_D1CB0(4);
                syslog(3, "%lld %d AVE %s: %s:%d ERROR: VTEncoderSessionEmitEncodedFrame failed. %d %d %d", v374);
                goto LABEL_535;
              }
              goto LABEL_534;
            }
LABEL_475:
            int valuePtr = *((unsigned __int8 *)v332 + 380);
            CFNumberRef v333 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
            if (v333)
            {
              CFNumberRef v334 = v333;
              CFDictionarySetValue(v295, kVTSampleAttachmentKey_EncoderRetryCount, v333);
              CFRelease(v334);
            }
            goto LABEL_477;
          }
          __uint64_t v350 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
          int v351 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
          __uint64_t v352 = v313 + 17;
          uint64_t v353 = 4;
          do
          {
            sub_C1CD0(*v352, v350);
            sub_C1CD0(*(v352 - 4), v351);
            ++v352;
            --v353;
          }
          while (v353);
          CFDictionarySetValue(v295, kVTSampleAttachmentQualityMetricsKey_FrameInterSumSATD, v350);
          if (v350) {
            CFRelease(v350);
          }
          CFDictionarySetValue(v295, kVTSampleAttachmentQualityMetricsKey_FrameIntraSumSATD, v351);
          if (v351) {
            CFRelease(v351);
          }
          int v354 = *(_DWORD *)(v434 + 120);
          if (v354 == 1)
          {
            int v375 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
            int v376 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
            __uint64_t v356 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
            int v377 = v313 + 57;
            uint64_t v378 = 4;
            do
            {
              sub_C1CD0(*(v377 - 8), v375);
              sub_C1CD0(*(v377 - 4), v376);
              unsigned int v379 = *v377++;
              sub_C1CD0(v379, v356);
              --v378;
            }
            while (v378);
            CFDictionarySetValue(v295, kVTSampleAttachmentQualityMetricsKey_NumberOfIntra8x8Blocks, v375);
            if (v375) {
              CFRelease(v375);
            }
            CFDictionarySetValue(v295, kVTSampleAttachmentQualityMetricsKey_NumberOfInter8x8Blocks, v376);
            if (v376) {
              CFRelease(v376);
            }
            CFStringRef v360 = @"NumberOfSkipped8x8Blocks";
          }
          else
          {
            if (v354)
            {
              if (sub_D1C38(3u, 4))
              {
                int v388 = sub_D1C7C(3u);
                __uint64_t v389 = sub_DDEFC();
                __uint64_t v390 = (const char *)sub_D1CB0(4);
                if (v388)
                {
                  printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codec type (%d) not recognized.\n", v389, 3, v390, "SendFrame", 4826, "false", *(_DWORD *)(v434 + 120));
                  __uint64_t v389 = sub_DDEFC();
                  __uint64_t v390 = (const char *)sub_D1CB0(4);
                }
                syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codec type (%d) not recognized.", v389, 3, v390, "SendFrame", 4826, "false", *(unsigned int *)(v434 + 120));
              }
              return 3758097084;
            }
            int v355 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
            __uint64_t v356 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
            __uint64_t v357 = v313 + 57;
            uint64_t v358 = 4;
            do
            {
              sub_C1CD0(*(v357 - 8), v355);
              unsigned int v359 = *v357++;
              sub_C1CD0(v359, v356);
              --v358;
            }
            while (v358);
            CFDictionarySetValue(v295, kVTSampleAttachmentQualityMetricsKey_NumberOfIntraMB, v355);
            if (v355) {
              CFRelease(v355);
            }
            CFStringRef v360 = (const __CFString *)kVTSampleAttachmentQualityMetricsKey_NumberOfSkippedMB;
          }
          CFDictionarySetValue(v295, v360, v356);
          if (v356) {
            CFRelease(v356);
          }
          v380 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
          for (uint64_t i = 0; i != 16; i += 4)
            sub_C1CD0(*(unsigned int *)(v436 + 21944 + i), v380);
          if (v380)
          {
            CFDictionarySetValue(v295, kVTSampleAttachmentQualityMetricsKey_CodedFrameResidualBits, v380);
            CFRelease(v380);
          }
          int v382 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
          for (uint64_t j = 0; j != 16; j += 4)
            sub_C1CD0(*(unsigned int *)(v436 + 21960 + j), v382);
          if (v382)
          {
            CFDictionarySetValue(v295, @"SliceDataLength", v382);
            CFRelease(v382);
          }
          if (!v439[10] || *(_DWORD *)(v434 + 120)) {
            goto LABEL_559;
          }
          int v391 = *(const UInt8 **)&v443[2 * *(int *)(v436 + 916) + 6448];
          if (v391)
          {
            int v393 = *v439;
            int v392 = v439[1];
            v394 = CFDataCreateMutable(kCFAllocatorDefault, 0);
            if (v394)
            {
              int v395 = v394;
              CFIndex v396 = 432 * ((v393 + 15) >> 4) * ((v392 + 15) >> 4);
              CFDataAppendBytes(v394, v391, v396);
              if (sub_D1C38(0x2Eu, 7))
              {
                int v397 = sub_D1C7C(0x2Eu);
                __uint64_t v398 = sub_DDEFC();
                int v399 = (const char *)sub_D1CB0(7);
                if (v397)
                {
                  printf("%lld %d AVE %s: H264FrameRec: EnableSelStatsFlags sending %d bytes out\n", v398, 46, v399, v396);
                  __uint64_t v400 = sub_DDEFC();
                  sampleSizeArrayr = (size_t *)sub_D1CB0(7);
                  syslog(3, "%lld %d AVE %s: H264FrameRec: EnableSelStatsFlags sending %d bytes out", v400, 46, (const char *)sampleSizeArrayr, v396);
                }
                else
                {
                  syslog(3, "%lld %d AVE %s: H264FrameRec: EnableSelStatsFlags sending %d bytes out", v398, 46, v399, v396);
                }
              }
              CFDictionarySetValue(v295, @"MBStatistics", v395);
              CFRelease(v395);
            }
LABEL_559:
            uint64_t v4 = v436;
            if (!*(unsigned char *)(v436 + 2656)) {
              goto LABEL_477;
            }
            v384 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            if (!v384) {
              goto LABEL_477;
            }
            __int16 v345 = v384;
            if (!sub_DB194((int *)(v436 + 920), v384))
            {
              CFDictionarySetValue(v295, kVTSampleAttachment_GetDPB, v345);
              uint64_t v385 = *(void *)(v436 + 2472);
              if ((v385 & 0x8000) != 0)
              {
                int v386 = *(void **)(v146 + 5952);
                if (v386)
                {
                  sub_7FD0(v386, v345, *(unsigned int *)(v436 + 160), *(unsigned int *)(v436 + 2664));
                  uint64_t v385 = *(void *)(v436 + 2472);
                }
              }
              if ((v385 & 0x10000) != 0)
              {
                __uint64_t v387 = *(void **)(v146 + 5952);
                if (v387) {
                  sub_8448(v387, v345, *(unsigned int *)(v436 + 160), v295);
                }
              }
            }
LABEL_589:
            CFRelease(v345);
            uint64_t v4 = v436;
            goto LABEL_477;
          }
          if (sub_D1C38(3u, 4))
          {
            int v401 = sub_D1C7C(3u);
            __uint64_t v402 = sub_DDEFC();
            __uint64_t v403 = (const char *)sub_D1CB0(4);
            if (!v401) {
              goto LABEL_590;
            }
            int v404 = 4859;
            goto LABEL_583;
          }
        }
        else
        {
          if (!v314[10] || *(_DWORD *)(v434 + 120) || *(_DWORD *)(v434 + 124) != 1) {
            goto LABEL_477;
          }
          unsigned int v341 = *(const UInt8 **)&v443[2 * *(int *)(v436 + 916) + 6448];
          if (v341)
          {
            int v343 = *v439;
            int v342 = v439[1];
            v344 = CFDataCreateMutable(kCFAllocatorDefault, 0);
            uint64_t v4 = v436;
            if (!v344) {
              goto LABEL_477;
            }
            __int16 v345 = v344;
            CFIndex v346 = 432 * ((v343 + 15) >> 4) * ((v342 + 15) >> 4);
            CFDataAppendBytes(v344, v341, v346);
            if (sub_D1C38(0x2Eu, 7))
            {
              int v347 = sub_D1C7C(0x2Eu);
              __uint64_t v348 = sub_DDEFC();
              int v349 = (const char *)sub_D1CB0(7);
              if (v347)
              {
                printf("%lld %d AVE %s: H264FrameRec: AttachMVStats %d - EnableSelStatsFlags sending %d bytes out\n\n", v348, 46, v349, *(_DWORD *)(v434 + 124), v346);
                __uint64_t v348 = sub_DDEFC();
                int v349 = (const char *)sub_D1CB0(7);
              }
              syslog(3, "%lld %d AVE %s: H264FrameRec: AttachMVStats %d - EnableSelStatsFlags sending %d bytes out\n", v348, 46, v349, *(_DWORD *)(v434 + 124), v346);
            }
            CFDictionarySetValue(v295, @"MBStatistics", v345);
            goto LABEL_589;
          }
          if (sub_D1C38(3u, 4))
          {
            int v405 = sub_D1C7C(3u);
            __uint64_t v402 = sub_DDEFC();
            __uint64_t v403 = (const char *)sub_D1CB0(4);
            if (!v405)
            {
LABEL_590:
              syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: stat = NULL.");
              return 3758097084;
            }
            int v404 = 4918;
LABEL_583:
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: stat = NULL.\n", v402, 3, v403, "SendFrame", v404, "stat != __null");
            sub_DDEFC();
            sub_D1CB0(4);
            goto LABEL_590;
          }
        }
        return 3758097084;
      }
LABEL_393:
      BOOL v285 = 1;
      goto LABEL_394;
    }
    if (sub_D1C38(0x2Eu, 7))
    {
      int v213 = sub_D1C7C(0x2Eu);
      __uint64_t v214 = sub_DDEFC();
      int v215 = (const char *)sub_D1CB0(7);
      if (v213)
      {
        printf("%lld %d AVE %s: BAIL for first layer\n", v214, 46, v215);
        sub_DDEFC();
        sub_D1CB0(7);
      }
      syslog(3, "%lld %d AVE %s: BAIL for first layer");
    }
    return 0;
  }
  if (*(int *)(v440 + 28) >= 1)
  {
    uint64_t v177 = 0;
    int v178 = v443 + 59842;
    while (*(_DWORD *)v140 == 0x1000000)
    {
      unsigned int v179 = v178[v177] - 4;
      if (sub_D1C38(0x2Eu, 7))
      {
        int v180 = sub_D1C7C(0x2Eu);
        __uint64_t v181 = sub_DDEFC();
        uint64_t v182 = (const char *)sub_D1CB0(7);
        int v183 = *(_DWORD *)(v440 + 24);
        int v184 = *(_DWORD *)v140;
        if (v180)
        {
          printf("%lld %d AVE %s: H264FrameRec: insert m_SEI_size %d slice_size_fig %d &p_in[0] 0x%x\n", v181, 46, v182, v183, v179, v184);
          __uint64_t v181 = sub_DDEFC();
          uint64_t v182 = (const char *)sub_D1CB0(7);
          int v183 = *(_DWORD *)(v440 + 24);
          int v184 = *(_DWORD *)v140;
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec: insert m_SEI_size %d slice_size_fig %d &p_in[0] 0x%x", v181, 46, v182, v183, v179, v184);
        uint64_t v4 = v436;
      }
      *(_DWORD *)int v140 = bswap32(v179);
      uint64_t v185 = v178[v177];
      v140 += v185;
      int v186 = *(_DWORD *)(v440 + 24) - v185;
      *(_DWORD *)(v440 + 24) = v186;
      v178[v177++] = 0;
      if (v177 >= *(int *)(v440 + 28))
      {
        __uint64_t v155 = (uint64_t *)(v7 + 66);
        uint64_t v146 = v440;
        goto LABEL_293;
      }
    }
    if (sub_D1C38(3u, 4))
    {
      int v216 = sub_D1C7C(3u);
      __uint64_t v217 = sub_DDEFC();
      int v218 = (const char *)sub_D1CB0(4);
      if (v216)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (0): *(uint32_t *)&p_in[0] != 0x01000000 (= 0x%x)\n", v217, 3, v218, "SendFrame", 4395, "*(uint32_t *)&p_in[0] == 0x01000000", *(_DWORD *)v140);
        __uint64_t v217 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (0): *(uint32_t *)&p_in[0] != 0x01000000 (= 0x%x)", v217);
      return 3758097085;
    }
    return 3758097085;
  }
  int v186 = *(_DWORD *)(v440 + 24);
LABEL_293:
  if (v186)
  {
    if (sub_D1C38(3u, 4))
    {
      int v210 = sub_D1C7C(3u);
      __uint64_t v211 = sub_DDEFC();
      __uint64_t v212 = (const char *)sub_D1CB0(4);
      if (v210)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (0): SEI buffer error\n", v211, 3, v212, "SendFrame", 4405, "m_SEI_size == 0");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (0): SEI buffer error");
      return 3758097085;
    }
    return 3758097085;
  }
  *(void *)int v448 = v155;
  unsigned int v219 = v443 + 7008;
  *(_DWORD *)(v146 + 28) = 0;
  uint64_t v220 = 32;
  do
  {
    uint64_t v221 = &v219[96 * *(int *)(v4 + 916)];
    unsigned int v222 = v221[2880] + *v221;
    if (!v222) {
      break;
    }
    unsigned int v223 = v222 - 4;
    if (*(_DWORD *)(v445 + 380) < 2u || *(_DWORD *)(v4 + 168))
    {
      unsigned int v224 = v150;
      v223 -= v444[7];
    }
    else
    {
      unsigned int v224 = v150;
    }
    if (sub_D1C38(0x2Eu, 7))
    {
      int v225 = sub_D1C7C(0x2Eu);
      __uint64_t v226 = sub_DDEFC();
      __uint64_t v227 = (const char *)sub_D1CB0(7);
      int v228 = *(_DWORD *)v140;
      if (v225)
      {
        printf("%lld %d AVE %s: H264FrameRec: insert slice_size %d slice_size_fig %d slice # %d &p_in[0] 0x%x\n", v226, 46, v227, v222, v223, *(_DWORD *)(v436 + 916), v228);
        __uint64_t v229 = sub_DDEFC();
        uint64_t v230 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: insert slice_size %d slice_size_fig %d slice # %d &p_in[0] 0x%x", v229, 46, v230, v222, v223, *(_DWORD *)(v436 + 916), *(_DWORD *)v140);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: insert slice_size %d slice_size_fig %d slice # %d &p_in[0] 0x%x", v226, 46, v227, v222, v223, *(_DWORD *)(v436 + 916), v228);
      }
    }
    if (*(_DWORD *)v140 != 0x1000000)
    {
      if (!sub_D1C38(3u, 4)) {
        return 3758097085;
      }
      int v254 = sub_D1C7C(3u);
      __uint64_t v255 = sub_DDEFC();
      int v256 = (const char *)sub_D1CB0(4);
      if (v254)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (1): *(uint32_t *)&p_in[0] != 0x01000000 (= 0x%x)\n", v255, 3, v256, "SendFrame", 4429, "*(uint32_t *)&p_in[0] == 0x01000000", *(_DWORD *)v140);
        __uint64_t v257 = sub_DDEFC();
        sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (1): *(uint32_t *)&p_in[0] != 0x01000000 (= 0x%x)", v257);
        return 3758097085;
      }
LABEL_449:
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (1): *(uint32_t *)&p_in[0] != 0x01000000 (= 0x%x)", v255);
      return 3758097085;
    }
    v219 += 3;
    *(_DWORD *)int v140 = bswap32(v223);
    v140 += v222;
    --v220;
    uint64_t v4 = v436;
    uint64_t v150 = v224;
  }
  while (v220);
  uint64_t v231 = v444[7];
  uint64_t v45 = v434;
  __uint64_t v155 = *(uint64_t **)v448;
  if ((int)v231 < 1) {
    goto LABEL_243;
  }
  CMBlockBufferRef v232 = v150;
  if (*(_DWORD *)(v445 + 380) >= 2u && !*(_DWORD *)(v4 + 168))
  {
LABEL_440:
    v444[7] = 0;
    uint64_t v150 = v232;
    goto LABEL_243;
  }
  uint64_t v233 = v146;
  unsigned int v234 = v231 - 4;
  uint64_t v235 = -v231;
  if (sub_D1C38(0x2Eu, 7))
  {
    int v236 = v232;
    int v237 = sub_D1C7C(0x2Eu);
    __uint64_t v238 = sub_DDEFC();
    int v239 = (const char *)sub_D1CB0(7);
    if (v237)
    {
      printf("%lld %d AVE %s: H264FrameRec: insert filler size %d slice_size_fig %d slice # %d &p_in[0] 0x%x\n", v238, 46, v239, v444[7], v234, *(_DWORD *)(v4 + 916), *(_DWORD *)&v140[v235]);
      __uint64_t v238 = sub_DDEFC();
      sub_D1CB0(7);
    }
    syslog(3, "%lld %d AVE %s: H264FrameRec: insert filler size %d slice_size_fig %d slice # %d &p_in[0] 0x%x", v238);
    uint64_t v45 = v434;
    CMBlockBufferRef v232 = v236;
  }
  if (*(_DWORD *)&v140[v235] == 0x1000000)
  {
    *(_DWORD *)&v140[v235] = bswap32(v234);
    uint64_t v146 = v233;
    goto LABEL_440;
  }
  if (!sub_D1C38(3u, 4)) {
    return 3758097085;
  }
  int v322 = sub_D1C7C(3u);
  __uint64_t v255 = sub_DDEFC();
  int v323 = (const char *)sub_D1CB0(4);
  if (!v322) {
    goto LABEL_449;
  }
  printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (1): *(uint32_t *)&p_in[0] != 0x01000000 (= 0x%x)\n", v255, 3, v323, "SendFrame", 4455, "*(uint32_t *)&p_in[0] == 0x01000000", *(_DWORD *)&v140[v235]);
  __uint64_t v324 = sub_DDEFC();
  sub_D1CB0(4);
  syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (1): *(uint32_t *)&p_in[0] != 0x01000000 (= 0x%x)", v324);
  return 3758097085;
}

__CFDictionary *sub_AE194(float *a1, int a2)
{
  LODWORD(v2) = a2;
  CFMutableDataRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    if (sub_D1C38(0xE2u, 4))
    {
      int v6 = sub_D1C7C(0xE2u);
      __uint64_t v7 = sub_DDEFC();
      BOOL v8 = (const char *)sub_D1CB0(4);
      if (v6)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create CFDictionary\n", v7, 226, v8, "CreateQualityMetricsDictionary", 3539, "pQualityMetricsDict != __null");
        __uint64_t v9 = sub_DDEFC();
        int v32 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDictionary", v9, 226, v32, "CreateQualityMetricsDictionary", 3539, "pQualityMetricsDict != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDictionary", v7, 226, v8, "CreateQualityMetricsDictionary", 3539, "pQualityMetricsDict != __null");
      }
    }
    return 0;
  }
  unsigned int v5 = Mutable;
  if ((int)v2 <= 1)
  {
    sub_C321C(@"LumaMeanSquaredError", Mutable, a1[4]);
    sub_C321C(@"ChromaBlueMeanSquaredError", v5, a1[5]);
    sub_C321C(@"ChromaRedMeanSquaredError", v5, a1[6]);
    return v5;
  }
  CFMutableArrayRef v10 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  if (!v10)
  {
    if (sub_D1C38(0xE2u, 4))
    {
      int v18 = sub_D1C7C(0xE2u);
      __uint64_t v19 = sub_DDEFC();
      unsigned int v20 = (const char *)sub_D1CB0(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create CFArray\n", v19, 226, v20, "CreateQualityMetricsDictionary", 3556, "pLumaMeanSquaredErrorArr != __null");
        __uint64_t v21 = sub_DDEFC();
        __uint64_t v33 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v21, 226, v33, "CreateQualityMetricsDictionary", 3556, "pLumaMeanSquaredErrorArr != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v19, 226, v20, "CreateQualityMetricsDictionary", 3556, "pLumaMeanSquaredErrorArr != __null");
      }
    }
    goto LABEL_31;
  }
  CFMutableArrayRef v11 = v10;
  CFMutableArrayRef v12 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  if (!v12)
  {
    if (sub_D1C38(0xE2u, 4))
    {
      int v22 = sub_D1C7C(0xE2u);
      __uint64_t v23 = sub_DDEFC();
      uint64_t v24 = (const char *)sub_D1CB0(4);
      if (v22)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create CFArray\n", v23, 226, v24, "CreateQualityMetricsDictionary", 3559, "pChromaBlueMeanSquaredErrorArr != __null");
        __uint64_t v25 = sub_DDEFC();
        uint64_t v34 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v25, 226, v34, "CreateQualityMetricsDictionary", 3559, "pChromaBlueMeanSquaredErrorArr != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v23, 226, v24, "CreateQualityMetricsDictionary", 3559, "pChromaBlueMeanSquaredErrorArr != __null");
      }
    }
    int v30 = v11;
    goto LABEL_30;
  }
  int v13 = v12;
  CFMutableArrayRef v14 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  if (!v14)
  {
    if (sub_D1C38(0xE2u, 4))
    {
      int v26 = sub_D1C7C(0xE2u);
      __uint64_t v27 = sub_DDEFC();
      unsigned int v28 = (const char *)sub_D1CB0(4);
      if (v26)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create CFArray\n", v27, 226, v28, "CreateQualityMetricsDictionary", 3562, "pChromaRedMeanSquaredErrorArr != __null");
        __uint64_t v29 = sub_DDEFC();
        int v35 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v29, 226, v35, "CreateQualityMetricsDictionary", 3562, "pChromaRedMeanSquaredErrorArr != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v27, 226, v28, "CreateQualityMetricsDictionary", 3562, "pChromaRedMeanSquaredErrorArr != __null");
      }
    }
    CFRelease(v11);
    int v30 = v13;
LABEL_30:
    CFRelease(v30);
LABEL_31:
    CFRelease(v5);
    return 0;
  }
  int v15 = v14;
  uint64_t v2 = v2;
  int v16 = a1 + 6;
  do
  {
    sub_C2130(v11, *(v16 - 2));
    sub_C2130(v13, *(v16 - 1));
    float v17 = *v16;
    v16 += 12;
    sub_C2130(v15, v17);
    --v2;
  }
  while (v2);
  CFDictionaryAddValue(v5, @"LumaMeanSquaredError", v11);
  CFDictionaryAddValue(v5, @"ChromaBlueMeanSquaredError", v13);
  CFDictionaryAddValue(v5, @"ChromaRedMeanSquaredError", v15);
  CFRelease(v11);
  CFRelease(v13);
  CFRelease(v15);
  return v5;
}

uint64_t sub_AE64C(uint64_t a1, uint64_t a2)
{
  uint64_t result = pthread_mutex_lock((pthread_mutex_t *)a1);
  if (*(_DWORD *)(a1 + 200))
  {
    uint64_t v5 = *(void *)(a1 + 216) + 40 * *(unsigned int *)(a1 + 204);
    long long v6 = *(_OWORD *)v5;
    long long v7 = *(_OWORD *)(v5 + 16);
    *(void *)(a2 + 32) = *(void *)(v5 + 32);
    *(_OWORD *)a2 = v6;
    *(_OWORD *)(a2 + 16) = v7;
    return pthread_mutex_unlock((pthread_mutex_t *)a1);
  }
  return result;
}

uint64_t sub_AE6BC(uint64_t a1, long long *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  while (*(_DWORD *)(a1 + 200) == *(_DWORD *)(a1 + 196))
  {
    gettimeofday((timeval *)(a1 + 176), 0);
    uint64_t v4 = 1000 * *(int *)(a1 + 184);
    *(void *)(a1 + 160) = *(void *)(a1 + 176) + 120;
    *(void *)(a1 + 168) = v4;
    if (pthread_cond_timedwait((pthread_cond_t *)(a1 + 112), (pthread_mutex_t *)a1, (const timespec *)(a1 + 160)) == 60)
    {
      if (sub_D1C38(0x2Au, 4))
      {
        int v5 = sub_D1C7C(0x2Au);
        __uint64_t v6 = sub_DDEFC();
        long long v7 = (const char *)sub_D1CB0(4);
        int v8 = *(_DWORD *)(a1 + 200);
        if (v5)
        {
          printf("%lld %d AVE %s: H264 Connection: connection full %d\n", v6, 42, v7, v8);
          __uint64_t v9 = sub_DDEFC();
          __uint64_t v19 = (const char *)sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: H264 Connection: connection full %d", v9, 42, v19, *(_DWORD *)(a1 + 200));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264 Connection: connection full %d", v6, 42, v7, v8);
        }
      }
      uint64_t v10 = 0xFFFFFFFFLL;
      goto LABEL_14;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = *(void *)(a1 + 216) + 40 * *(unsigned int *)(a1 + 208);
  long long v12 = *a2;
  long long v13 = a2[1];
  *(void *)(v11 + 32) = *((void *)a2 + 4);
  *(_OWORD *)uint64_t v11 = v12;
  *(_OWORD *)(v11 + 16) = v13;
  int v14 = *(_DWORD *)(a1 + 208);
  unsigned int v16 = *(_DWORD *)(a1 + 196);
  int v15 = *(_DWORD *)(a1 + 200);
  *(_DWORD *)(a1 + 200) = v15 + 1;
  if (v14 + 1 < v16) {
    int v17 = v14 + 1;
  }
  else {
    int v17 = 0;
  }
  *(_DWORD *)(a1 + 208) = v17;
  if (!v15)
  {
    pthread_cond_signal((pthread_cond_t *)(a1 + 64));
    uint64_t v10 = 0;
  }
LABEL_14:
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v10;
}

uint64_t sub_AE844(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  uint64_t v2 = (CFRunLoopRef *)(a1 + 51232);
  uint64_t v3 = *(const void **)(a1 + 51232);
  if (v3)
  {
    CFRetain(v3);
    if (sub_D1C38(0x2Eu, 7))
    {
      int v4 = sub_D1C7C(0x2Eu);
      __uint64_t v5 = sub_DDEFC();
      __uint64_t v6 = (const char *)sub_D1CB0(7);
      if (v4)
      {
        printf("%lld %d AVE %s: H264FrameRec: RemoveIODispatcherFromRunLoop to CFRunLoopRun.\n", v5, 46, v6);
        __uint64_t v7 = sub_DDEFC();
        int v14 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: RemoveIODispatcherFromRunLoop to CFRunLoopRun.", v7, 46, v14);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: RemoveIODispatcherFromRunLoop to CFRunLoopRun.", v5, 46, v6);
      }
    }
    sub_9C6A4(a1);
    CFRunLoopStop(*v2);
    CFRelease(*v2);
    uint64_t v8 = 0;
    *uint64_t v2 = 0;
  }
  else
  {
    uint64_t v8 = 3758097084;
    if (sub_D1C38(0x2Eu, 4))
    {
      int v9 = sub_D1C7C(0x2Eu);
      __uint64_t v10 = sub_DDEFC();
      uint64_t v11 = (const char *)sub_D1CB0(4);
      if (v9)
      {
        printf("%lld %d AVE %s: H264FrameRec ERROR: runLoopRef NULL\n", v10, 46, v11);
        __uint64_t v12 = sub_DDEFC();
        int v15 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: runLoopRef NULL", v12, 46, v15);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: runLoopRef NULL", v10, 46, v11);
      }
    }
  }
  return v8;
}

uint64_t sub_AE9B4(void *a1, uint64_t a2, pthread_attr_t *a3, pthread_t *a4)
{
  v15[0] = 0;
  uint64_t v16 = 0;
  uint64_t v17 = a2;
  pthread_attr_init(a3);
  if (pthread_attr_getschedparam(a3, &v14))
  {
    if (sub_D1C38(3u, 4))
    {
      int v7 = sub_D1C7C(3u);
      __uint64_t v8 = sub_DDEFC();
      int v9 = (const char *)sub_D1CB0(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: pthread_attr_getschedparam failed.\n", v8, 3, v9, "CreateH264VideoEncoderFrameReceiver", 5886, "err == noErr");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: pthread_attr_getschedparam failed.");
    }
  }
  else
  {
    v14.sched_priority = 47;
    if (pthread_attr_setschedparam(a3, &v14))
    {
      if (sub_D1C38(3u, 4))
      {
        int v10 = sub_D1C7C(3u);
        __uint64_t v11 = sub_DDEFC();
        __uint64_t v12 = (const char *)sub_D1CB0(4);
        if (v10)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: pthread_attr_setschedparam failed.\n", v11, 3, v12, "CreateH264VideoEncoderFrameReceiver", 5889, "err == noErr");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: pthread_attr_setschedparam failed.");
      }
    }
    else
    {
      pthread_create(a4, a3, (void *(__cdecl *)(void *))sub_AEBEC, v15);
      while (!v15[0])
        usleep(0x3E8u);
      *a1 = v16;
    }
  }
  if (*a1) {
    return 0;
  }
  else {
    return 3758097084;
  }
}

void sub_AEBEC(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  operator new();
}

void sub_AED5C()
{
}

void sub_AED80(unsigned char *a1, pthread_attr_t *a2, pthread_t *a3)
{
  sub_AE844((uint64_t)a1);
  pthread_join(*a3, 0);
  if (*a1 && sub_D1C38(3u, 4))
  {
    int v6 = sub_D1C7C(3u);
    __uint64_t v7 = sub_DDEFC();
    __uint64_t v8 = (const char *)sub_D1CB0(4);
    if (v6)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: wait for H264VideoEncoderFrameReceiver thread failed.\n", v7, 3, v8, "DestroyH264VideoEncoderFrameReceiver", 5917, "pFrameReceiver->m_moreWorkToDo == false");
      __uint64_t v9 = sub_DDEFC();
      sched_param v14 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: wait for H264VideoEncoderFrameReceiver thread failed.", v9, 3, v14, "DestroyH264VideoEncoderFrameReceiver", 5917, "pFrameReceiver->m_moreWorkToDo == false");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: wait for H264VideoEncoderFrameReceiver thread failed.", v7, 3, v8, "DestroyH264VideoEncoderFrameReceiver", 5917, "pFrameReceiver->m_moreWorkToDo == false");
    }
    if (!a2) {
      goto LABEL_7;
    }
  }
  else if (!a2)
  {
    goto LABEL_7;
  }
  pthread_attr_destroy(a2);
LABEL_7:
  if (sub_D1C38(0x2Eu, 7))
  {
    int v10 = sub_D1C7C(0x2Eu);
    __uint64_t v11 = sub_DDEFC();
    __uint64_t v12 = (const char *)sub_D1CB0(7);
    if (v10)
    {
      printf("%lld %d AVE %s: H264FrameRec: Destroy pFrameReciever %p sz %lu\n", v11, 46, v12, a1, 245296);
      __uint64_t v13 = sub_DDEFC();
      int v15 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: H264FrameRec: Destroy pFrameReciever %p sz %lu", v13, 46, v15, a1, 245296);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264FrameRec: Destroy pFrameReciever %p sz %lu", v11, 46, v12, a1, 245296);
    }
  }
  sub_9BE54(a1);
  operator delete();
}

uint64_t sub_AEF70(uint64_t a1)
{
  *(_OWORD *)(a1 + 25352) = 0u;
  *(void *)(a1 + 25368) = 0;
  *(_OWORD *)(a1 + 25384) = 0u;
  *(_OWORD *)(a1 + 25400) = 0u;
  *(_OWORD *)(a1 + 25416) = 0u;
  *(_OWORD *)(a1 + 25432) = 0u;
  *(_OWORD *)(a1 + 25448) = 0u;
  *(_OWORD *)(a1 + 25464) = 0u;
  sub_AEFF4((void *)a1);
  return a1;
}

void sub_AEFC4(_Unwind_Exception *a1)
{
  sub_AF1B0(v1 + 3179);
  sub_AF1B0(v2);
  int v4 = (void *)v1[3169];
  if (v4)
  {
    v1[3170] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

double sub_AEFF4(void *a1)
{
  uint64_t v2 = a1 + 3185;
  sub_AF04C((unint64_t)a1);
  *uint64_t v2 = 0;
  a1[3186] = 0;
  a1[3220] = 0;
  bzero(a1 + 3187, 0x108uLL);
  v2[23] = 0;
  double result = 0.0;
  a1[3168] = 0;
  v2[72] = 0;
  return result;
}

void sub_AF04C(unint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 25352);
  uint64_t v3 = *(void **)(a1 + 25352);
  if (v3)
  {
    *(void *)(a1 + 25360) = v3;
    operator delete(v3);
  }
  *uint64_t v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  int v4 = *(void ***)(a1 + 25392);
  uint64_t v5 = *(void *)(a1 + 25400);
  *(void *)(a1 + 25424) = 0;
  unint64_t v6 = v5 - (void)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      int v4 = (void **)(*(void *)(a1 + 25392) + 8);
      *(void *)(a1 + 25392) = v4;
      unint64_t v6 = *(void *)(a1 + 25400) - (void)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    uint64_t v7 = 256;
  }
  else
  {
    if (v6 >> 3 != 2) {
      goto LABEL_10;
    }
    uint64_t v7 = 512;
  }
  *(void *)(a1 + 25416) = v7;
LABEL_10:
  __uint64_t v8 = *(void ***)(a1 + 25440);
  uint64_t v9 = *(void *)(a1 + 25448);
  *(void *)(a1 + 25472) = 0;
  unint64_t v10 = v9 - (void)v8;
  if (v10 >= 0x11)
  {
    do
    {
      operator delete(*v8);
      __uint64_t v8 = (void **)(*(void *)(a1 + 25440) + 8);
      *(void *)(a1 + 25440) = v8;
      unint64_t v10 = *(void *)(a1 + 25448) - (void)v8;
    }
    while (v10 > 0x10);
  }
  if (v10 >> 3 == 1)
  {
    uint64_t v11 = 256;
    goto LABEL_16;
  }
  if (v10 >> 3 == 2)
  {
    uint64_t v11 = 512;
LABEL_16:
    *(void *)(a1 + 25464) = v11;
  }
  uint64_t v12 = 0;
  int64x2_t v13 = (int64x2_t)xmmword_143760;
  int64x2_t v14 = vdupq_n_s64(2uLL);
  int64x2_t v15 = vaddq_s64(vdupq_n_s64(a1), v14);
  do
  {
    v16.i64[0] = 1574 * v13.i64[0];
    v16.i64[1] = 1574 * v13.i64[1];
    *(int64x2_t *)(a1 + 25192 + v12) = vaddq_s64(v15, v16);
    int64x2_t v13 = vaddq_s64(v13, v14);
    v12 += 16;
  }
  while (v12 != 128);
  *(_DWORD *)(a1 + 25320) = 16;
}

uint64_t sub_AF1B0(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_AF258((uint64_t)a1);
}

uint64_t sub_AF258(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_AF2A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = *(_DWORD *)(a2 + 18568);
  int v5 = *(_DWORD *)(a2 + 1688);
  int v6 = *(_DWORD *)(a2 + 1692);
  *(_DWORD *)(a3 + 16) = sub_BE9B4(*(_DWORD *)(a1 + 188164), v4, *(unsigned __int8 *)(a2 + 1732));
  *(_DWORD *)(a3 + 20) = sub_BE9C0(v4, v5, v6);
  return 0;
}

uint64_t sub_AF314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + 188164;
  int v6 = *(_DWORD *)(a1 + 188164);
  int v7 = *(_DWORD *)(v5 + 12);
  if (v7) {
    int v8 = 2;
  }
  else {
    int v8 = *(_DWORD *)(a2 + 18208);
  }
  BOOL v9 = *(_DWORD *)(a3 + 160) == 0;
  BOOL v10 = *(void *)(a3 + 21632) != 0;
  *(_DWORD *)(a4 + 40) = sub_BEA04(v6, v8, v7);
  *(_DWORD *)(a4 + 44) = sub_BEA18(v9, v10);
  return 0;
}

uint64_t sub_AF398(int a1, int a2)
{
  bzero(v15, 0x6E0uLL);
  if (sub_D1C38(0x28u, 6))
  {
    int v4 = sub_D1C7C(0x28u);
    __uint64_t v5 = sub_DDEFC();
    int v6 = (const char *)sub_D1CB0(6);
    if (v4)
    {
      printf("%lld %d AVE %s: %s Enter %d %d\n", v5, 40, v6, "AVE_USL_Drv_Create", a1, a2);
      __uint64_t v5 = sub_DDEFC();
      int v6 = (const char *)sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %d %d", v5, 40, v6, "AVE_USL_Drv_Create", a1, a2);
  }
  int v7 = malloc_type_malloc(0x2DF20uLL, 0x10200405B383B17uLL);
  if (v7)
  {
    bzero(v7, 0x2DF20uLL);
    operator new();
  }
  if (sub_D1C38(0x28u, 4))
  {
    int v8 = sub_D1C7C(0x28u);
    __uint64_t v9 = sub_DDEFC();
    BOOL v10 = (const char *)sub_D1CB0(4);
    if (v8)
    {
      printf("%lld %d AVE %s: %s:%d %s | fail to allocate %d %d\n", v9, 40, v10, "AVE_USL_Drv_Create", 329, "pINS != __null", a1, a2);
      __uint64_t v9 = sub_DDEFC();
      BOOL v10 = (const char *)sub_D1CB0(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to allocate %d %d", v9, 40, v10, "AVE_USL_Drv_Create", 329, "pINS != __null", a1, a2);
  }
  if (sub_D1C38(0x28u, 6))
  {
    BOOL v11 = sub_D1C7C(0x28u) == 0;
    __uint64_t v12 = sub_DDEFC();
    int64x2_t v13 = (const char *)sub_D1CB0(6);
    if (!v11)
    {
      printf("%lld %d AVE %s: %s Exit %d %d %d\n", v12, 40, v13, "AVE_USL_Drv_Create", a1, a2, -1003);
      __uint64_t v12 = sub_DDEFC();
      int64x2_t v13 = (const char *)sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: %s Exit %d %d %d", v12, 40, v13, "AVE_USL_Drv_Create", a1, a2, -1003);
  }
  return 4294966293;
}

void sub_AFACC()
{
}

uint64_t sub_AFAF8(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 188156);
  }
  return result;
}

uint64_t sub_AFB0C(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 188160);
  }
  return result;
}

uint64_t sub_AFB20(unsigned int *a1)
{
  uint64_t v33 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  memset(v30, 0, sizeof(v30));
  if (sub_D1C38(0x28u, 6))
  {
    int v2 = sub_D1C7C(0x28u);
    __uint64_t v3 = sub_DDEFC();
    int v4 = (const char *)sub_D1CB0(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", v3, 40, v4, "AVE_USL_Drv_Destroy", a1);
      __uint64_t v5 = sub_DDEFC();
      __uint64_t v25 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 40, v25, "AVE_USL_Drv_Destroy", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", v3, 40, v4, "AVE_USL_Drv_Destroy", a1);
    }
  }
  if (a1)
  {
    sub_AFFBC((uint64_t)a1);
    if (*(void *)a1)
    {
      *(void *)&long long v31 = a1[47040];
      DWORD2(v32) = 118000;
      uint64_t v33 = (uint64_t)sub_DDEFC() / 1000;
      uint64_t v6 = sub_118C4(*(const void ***)a1, &v31, v30);
      if (v6)
      {
        uint64_t v7 = v6;
        if (!sub_D1C38(0x28u, 4))
        {
LABEL_27:
          free(a1);
          goto LABEL_28;
        }
        int v8 = sub_D1C7C(0x28u);
        __uint64_t v9 = sub_DDEFC();
        BOOL v10 = (const char *)sub_D1CB0(4);
        if (v8)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to close client %d\n", v9, 40, v10, "AVE_USL_Drv_Destroy", 468, "ret == 0", v7);
          __uint64_t v11 = sub_DDEFC();
          sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to close client %d", v11);
          goto LABEL_27;
        }
        uint64_t v29 = v7;
        uint64_t v28 = 468;
        int v26 = v10;
        __uint64_t v19 = "%lld %d AVE %s: %s:%d %s | fail to close client %d";
LABEL_26:
        syslog(3, v19, v9, 40, v26, "AVE_USL_Drv_Destroy", v28, "ret == 0", v29);
        goto LABEL_27;
      }
      uint64_t v15 = sub_1122C(*(const void ***)a1);
      if (v15)
      {
        uint64_t v7 = v15;
        if (!sub_D1C38(0x28u, 4)) {
          goto LABEL_27;
        }
        int v16 = sub_D1C7C(0x28u);
        __uint64_t v9 = sub_DDEFC();
        uint64_t v17 = (const char *)sub_D1CB0(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to close driver %d\n", v9, 40, v17, "AVE_USL_Drv_Destroy", 472, "ret == 0", v7);
          __uint64_t v18 = sub_DDEFC();
          sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to close driver %d", v18);
          goto LABEL_27;
        }
        uint64_t v29 = v7;
        uint64_t v28 = 472;
        int v26 = v17;
        __uint64_t v19 = "%lld %d AVE %s: %s:%d %s | fail to close driver %d";
        goto LABEL_26;
      }
      if (*(void *)a1)
      {
        sub_F540(*(void **)a1);
        operator delete();
      }
    }
    uint64_t v7 = 0;
    goto LABEL_27;
  }
  if (sub_D1C38(0x28u, 4))
  {
    int v12 = sub_D1C7C(0x28u);
    __uint64_t v13 = sub_DDEFC();
    int64x2_t v14 = (const char *)sub_D1CB0(4);
    if (v12)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p\n", v13, 40, v14, "AVE_USL_Drv_Destroy", 453, "pDrv != __null", 0);
      __uint64_t v13 = sub_DDEFC();
      sub_D1CB0(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p", v13);
  }
  uint64_t v7 = 4294966295;
LABEL_28:
  if (sub_D1C38(0x28u, 6))
  {
    int v20 = sub_D1C7C(0x28u);
    __uint64_t v21 = sub_DDEFC();
    int v22 = (const char *)sub_D1CB0(6);
    if (v20)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v21, 40, v22, "AVE_USL_Drv_Destroy", a1, v7);
      __uint64_t v23 = sub_DDEFC();
      __uint64_t v27 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v23, 40, v27, "AVE_USL_Drv_Destroy", a1, v7);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v21, 40, v22, "AVE_USL_Drv_Destroy", a1, v7);
    }
  }
  return v7;
}

uint64_t sub_AFFBC(uint64_t a1)
{
  uint64_t v2 = a1 + 188056;
  __uint64_t v3 = *(unsigned char **)(a1 + 188056);
  if (v3) {
    sub_AED80(v3, (pthread_attr_t *)(a1 + 188080), (pthread_t *)(a1 + 188144));
  }
  uint64_t v4 = *(void *)(v2 + 8);
  if (v4)
  {
    sub_B7914(v4);
    operator delete();
  }
  uint64_t v5 = *(void *)(v2 + 16);
  if (v5)
  {
    sub_B7914(v5);
    operator delete();
  }
  sub_BF6BC(a1 + 72);

  return sub_BF238((uint64_t *)(a1 + 64));
}

uint64_t sub_B007C()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = (void **)v0;
  int v109 = -1;
  if (sub_D1C38(0x28u, 7))
  {
    int v6 = sub_D1C7C(0x28u);
    __uint64_t v7 = sub_DDEFC();
    int v8 = (const char *)sub_D1CB0(7);
    if (v6)
    {
      printf("%lld %d AVE %s: ENTER AVE_USL_Drv_Prepare.\n", v7, 40, v8);
      __uint64_t v7 = sub_DDEFC();
      int v8 = (const char *)sub_D1CB0(7);
    }
    syslog(3, "%lld %d AVE %s: ENTER AVE_USL_Drv_Prepare.", v7, 40, v8);
  }
  if (!v5)
  {
    if (sub_D1C38(3u, 4))
    {
      int v14 = sub_D1C7C(3u);
      __uint64_t v15 = sub_DDEFC();
      int v16 = (const char *)sub_D1CB0(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: AVE_USL_Drv_Prepare, Null pointer for driver data.\n", v15, 3, v16, "AVE_USL_Drv_Prepare", 502, "pDriverInstance");
        __uint64_t v15 = sub_DDEFC();
        int v16 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: AVE_USL_Drv_Prepare, Null pointer for driver data.", v15, 3, v16, "AVE_USL_Drv_Prepare", 502, "pDriverInstance");
    }
    goto LABEL_43;
  }
  if (!v4)
  {
    if (sub_D1C38(3u, 4))
    {
      int v17 = sub_D1C7C(3u);
      __uint64_t v18 = sub_DDEFC();
      __uint64_t v19 = (const char *)sub_D1CB0(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for AppleAVEVA_InitSettings.\n", v18, 3, v19, "AVE_USL_Drv_Prepare", 503, "pInitSettings");
        __uint64_t v18 = sub_DDEFC();
        __uint64_t v19 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for AppleAVEVA_InitSettings.", v18, 3, v19, "AVE_USL_Drv_Prepare", 503, "pInitSettings");
    }
LABEL_43:
    uint64_t v29 = 4294966295;
    goto LABEL_44;
  }
  if (!*(void *)v4)
  {
    if (sub_D1C38(3u, 4))
    {
      int v20 = sub_D1C7C(3u);
      __uint64_t v21 = sub_DDEFC();
      int v22 = (const char *)sub_D1CB0(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for pClientParams.\n", v21, 3, v22, "AVE_USL_Drv_Prepare", 505, "pInitSettings->pClientParams");
        __uint64_t v21 = sub_DDEFC();
        int v22 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for pClientParams.", v21, 3, v22, "AVE_USL_Drv_Prepare", 505, "pInitSettings->pClientParams");
    }
    goto LABEL_150;
  }
  if (!*(void *)(v4 + 8))
  {
    if (sub_D1C38(3u, 4))
    {
      int v23 = sub_D1C7C(3u);
      __uint64_t v24 = sub_DDEFC();
      __uint64_t v25 = (const char *)sub_D1CB0(4);
      if (v23)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for pVideoParams.\n", v24, 3, v25, "AVE_USL_Drv_Prepare", 506, "pInitSettings->pVideoParams");
        __uint64_t v24 = sub_DDEFC();
        __uint64_t v25 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for pVideoParams.", v24, 3, v25, "AVE_USL_Drv_Prepare", 506, "pInitSettings->pVideoParams");
    }
    goto LABEL_150;
  }
  uint64_t v9 = *(void *)(v4 + 16);
  if (!v9)
  {
    if (sub_D1C38(3u, 4))
    {
      int v26 = sub_D1C7C(3u);
      __uint64_t v27 = sub_DDEFC();
      uint64_t v28 = (const char *)sub_D1CB0(4);
      if (v26)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for pVideoParamsDriver.\n", v27, 3, v28, "AVE_USL_Drv_Prepare", 507, "pInitSettings->pVideoParamsDriver");
        __uint64_t v27 = sub_DDEFC();
        uint64_t v28 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for pVideoParamsDriver.", v27, 3, v28, "AVE_USL_Drv_Prepare", 507, "pInitSettings->pVideoParamsDriver");
    }
    goto LABEL_150;
  }
  if (!*(void *)(v4 + 24))
  {
    if (sub_D1C38(3u, 4))
    {
      int v31 = sub_D1C7C(3u);
      __uint64_t v32 = sub_DDEFC();
      uint64_t v33 = (const char *)sub_D1CB0(4);
      if (v31)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for pRCParams.\n", v32, 3, v33, "AVE_USL_Drv_Prepare", 508, "pInitSettings->pRCParams");
        __uint64_t v32 = sub_DDEFC();
        uint64_t v33 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for pRCParams.", v32, 3, v33, "AVE_USL_Drv_Prepare", 508, "pInitSettings->pRCParams");
    }
    goto LABEL_150;
  }
  int v10 = *(_DWORD *)(v9 + 120);
  if (v10 == 1)
  {
    if (!*(void *)(v4 + 80))
    {
      if (sub_D1C38(3u, 4))
      {
        int v44 = sub_D1C7C(3u);
        __uint64_t v45 = sub_DDEFC();
        uint64_t v46 = (const char *)sub_D1CB0(4);
        if (v44)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for VPSHevcParams.\n", v45, 3, v46, "AVE_USL_Drv_Prepare", 522, "pInitSettings->VPSHevcParams");
          __uint64_t v45 = sub_DDEFC();
          uint64_t v46 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for VPSHevcParams.", v45, 3, v46, "AVE_USL_Drv_Prepare", 522, "pInitSettings->VPSHevcParams");
      }
      goto LABEL_150;
    }
    if (!*(void *)(v4 + 88))
    {
      if (sub_D1C38(3u, 4))
      {
        int v50 = sub_D1C7C(3u);
        __uint64_t v51 = sub_DDEFC();
        int v52 = (const char *)sub_D1CB0(4);
        if (v50)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for SPSHevcParams.\n", v51, 3, v52, "AVE_USL_Drv_Prepare", 523, "pInitSettings->psaHEVC_SPS[0]");
          __uint64_t v51 = sub_DDEFC();
          int v52 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for SPSHevcParams.", v51, 3, v52, "AVE_USL_Drv_Prepare", 523, "pInitSettings->psaHEVC_SPS[0]");
      }
      goto LABEL_150;
    }
    if (!*(void *)(v4 + 104))
    {
      if (sub_D1C38(3u, 4))
      {
        int v53 = sub_D1C7C(3u);
        __uint64_t v54 = sub_DDEFC();
        uint64_t v55 = (const char *)sub_D1CB0(4);
        if (v53)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for PPSHevcParams.\n", v54, 3, v55, "AVE_USL_Drv_Prepare", 524, "pInitSettings->psaHEVC_PPS[0]");
          __uint64_t v54 = sub_DDEFC();
          uint64_t v55 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for PPSHevcParams.", v54, 3, v55, "AVE_USL_Drv_Prepare", 524, "pInitSettings->psaHEVC_PPS[0]");
      }
      goto LABEL_150;
    }
    if (!*(void *)(v4 + 120))
    {
      if (sub_D1C38(3u, 4))
      {
        int v56 = sub_D1C7C(3u);
        __uint64_t v57 = sub_DDEFC();
        long long v58 = (const char *)sub_D1CB0(4);
        if (v56)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for SHHevcParams.\n", v57, 3, v58, "AVE_USL_Drv_Prepare", 525, "pInitSettings->SHHevcParams");
          __uint64_t v57 = sub_DDEFC();
          long long v58 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for SHHevcParams.", v57, 3, v58, "AVE_USL_Drv_Prepare", 525, "pInitSettings->SHHevcParams");
      }
      goto LABEL_150;
    }
    if (!*(void *)(v4 + 128))
    {
      if (sub_D1C38(3u, 4))
      {
        int v59 = sub_D1C7C(3u);
        __uint64_t v60 = sub_DDEFC();
        __uint64_t v61 = (const char *)sub_D1CB0(4);
        if (v59)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for RPSHevcParams.\n", v60, 3, v61, "AVE_USL_Drv_Prepare", 526, "pInitSettings->RPSHevcParams");
          __uint64_t v60 = sub_DDEFC();
          __uint64_t v61 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for RPSHevcParams.", v60, 3, v61, "AVE_USL_Drv_Prepare", 526, "pInitSettings->RPSHevcParams");
      }
      goto LABEL_150;
    }
  }
  else
  {
    if (v10)
    {
      if (sub_D1C38(3u, 4))
      {
        int v38 = sub_D1C7C(3u);
        __uint64_t v39 = sub_DDEFC();
        __uint64_t v40 = (const char *)sub_D1CB0(4);
        if (v38)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, codectype not recognized = %d\n", v39, 3, v40, "AVE_USL_Drv_Prepare", 531, "false", *(_DWORD *)(*(void *)(v4 + 16) + 120));
          __uint64_t v39 = sub_DDEFC();
          __uint64_t v40 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, codectype not recognized = %d", v39, 3, v40, "AVE_USL_Drv_Prepare", 531, "false", *(_DWORD *)(*(void *)(v4 + 16) + 120));
      }
      goto LABEL_150;
    }
    if (!*(void *)(v4 + 56))
    {
      if (sub_D1C38(3u, 4))
      {
        int v41 = sub_D1C7C(3u);
        __uint64_t v42 = sub_DDEFC();
        uint64_t v43 = (const char *)sub_D1CB0(4);
        if (v41)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for SPSParams.\n", v42, 3, v43, "AVE_USL_Drv_Prepare", 514, "pInitSettings->SPSParams");
          __uint64_t v42 = sub_DDEFC();
          uint64_t v43 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for SPSParams.", v42, 3, v43, "AVE_USL_Drv_Prepare", 514, "pInitSettings->SPSParams");
      }
      goto LABEL_150;
    }
    if (!*(void *)(v4 + 64))
    {
      if (sub_D1C38(3u, 4))
      {
        int v47 = sub_D1C7C(3u);
        __uint64_t v48 = sub_DDEFC();
        uint64_t v49 = (const char *)sub_D1CB0(4);
        if (v47)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for PPSParams.\n", v48, 3, v49, "AVE_USL_Drv_Prepare", 515, "pInitSettings->PPSParams");
          __uint64_t v48 = sub_DDEFC();
          uint64_t v49 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for PPSParams.", v48, 3, v49, "AVE_USL_Drv_Prepare", 515, "pInitSettings->PPSParams");
      }
      goto LABEL_150;
    }
    if (!*(void *)(v4 + 72))
    {
      if (sub_D1C38(3u, 4))
      {
        int v11 = sub_D1C7C(3u);
        __uint64_t v12 = sub_DDEFC();
        __uint64_t v13 = (const char *)sub_D1CB0(4);
        if (v11)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for SHParams.\n", v12, 3, v13, "AVE_USL_Drv_Prepare", 516, "pInitSettings->SHParams");
          __uint64_t v12 = sub_DDEFC();
          __uint64_t v13 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for SHParams.", v12, 3, v13, "AVE_USL_Drv_Prepare", 516, "pInitSettings->SHParams");
      }
LABEL_150:
      uint64_t v29 = 4294966295;
      goto LABEL_151;
    }
  }
  v5[225] = **(void ***)v4;
  memcpy(v5 + 226, *(const void **)(v4 + 8), 0x4178uLL);
  memcpy(v5 + 2321, *(const void **)(v4 + 16), 0x6C0uLL);
  memcpy(v5 + 15, *(const void **)(v4 + 24), 0x690uLL);
  if ((*((_DWORD *)v5 + 47041) & 0xFFFFFFFE) != 2)
  {
    int v34 = *(_DWORD *)(*(void *)(v4 + 16) + 120);
    if (v34 == 1)
    {
      memcpy(v5 + 3126, *(const void **)(v4 + 80), 0x140E8uLL);
      memcpy(v5 + 13395, *(const void **)(v4 + 88), 0x1EF4uLL);
      memcpy(v5 + 15376, *(const void **)(v4 + 104), 0x25A4uLL);
      memcpy((char *)v5 + 115084, *(const void **)(v4 + 96), 0x1EF4uLL);
      memcpy((char *)v5 + 132644, *(const void **)(v4 + 112), 0x25A4uLL);
      memcpy(v5 + 17785, *(const void **)(v4 + 120), 0x54F8uLL);
      int v35 = v5 + 20504;
      __uint64_t v36 = *(const void **)(v4 + 128);
      size_t v37 = 24024;
    }
    else
    {
      if (v34)
      {
        if (sub_D1C38(3u, 4))
        {
          int v69 = sub_D1C7C(3u);
          __uint64_t v70 = sub_DDEFC();
          int v71 = (const char *)sub_D1CB0(4);
          if (v69)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, codectype not recognized = %d\n", v70, 3, v71, "AVE_USL_Drv_Prepare", 569, "false", *(_DWORD *)(*(void *)(v4 + 16) + 120));
            __uint64_t v70 = sub_DDEFC();
            int v71 = (const char *)sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, codectype not recognized = %d", v70, 3, v71, "AVE_USL_Drv_Prepare", 569, "false", *(_DWORD *)(*(void *)(v4 + 16) + 120));
        }
        goto LABEL_150;
      }
      memcpy(v5 + 2537, *(const void **)(v4 + 56), 0x6B8uLL);
      memcpy(v5 + 2752, *(const void **)(v4 + 64), 0x184uLL);
      int v35 = (char *)v5 + 22404;
      __uint64_t v36 = *(const void **)(v4 + 72);
      size_t v37 = 2604;
    }
    memcpy(v35, v36, v37);
  }
  v5[23523] = *(void **)(v4 + 48);
  if (!*((unsigned char *)v5 + 18702))
  {
    memset(v112, 0, 224);
    long long v110 = 0u;
    long long v111 = 0u;
    operator new();
  }
  *(void *)&long long v110 = 0;
  sub_FD00(*v5, 67360, &v110);
  sub_109C4(*v5, (const void *)v110, &v109);
  uint64_t v62 = v110;
  if ((void)v110)
  {
    bzero((void *)(v110 + 8), 0x10718uLL);
    *(_DWORD *)uint64_t v62 = v109;
    *(_DWORD *)(v62 + 4) = 4;
    *(_DWORD *)(v62 + 160) = *((_DWORD *)v5 + 3);
    *(void *)(v62 + 27672) = *(void *)(v4 + 136);
    *(unsigned char *)(v62 + 8) = v5[23521] != 0;
    *(_DWORD *)(v62 + 12) = *((_DWORD *)v5 + 47044);
    LODWORD(v110) = v109;
    if (sub_AE6BC((uint64_t)v5[23509], &v110))
    {
      if (sub_D1C38(3u, 4))
      {
        BOOL v63 = sub_D1C7C(3u) == 0;
        __uint64_t v64 = sub_DDEFC();
        unsigned int v65 = (const char *)sub_D1CB0(4);
        if (!v63)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread\n", v64, 3, v65, "AVE_USL_Drv_Prepare", 680, "res == 0");
          __uint64_t v64 = sub_DDEFC();
          unsigned int v65 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread", v64, 3, v65, "AVE_USL_Drv_Prepare", 680, "res == 0");
      }
LABEL_132:
      uint64_t v29 = 4294966296;
LABEL_44:
      *(void *)&long long v110 = *(void *)(v4 + 136);
      sub_B1E0C(v5, (uint64_t *)&v110, 1);
      uint64_t v30 = *(void *)(v4 + 16);
      if (v30) {
        *(unsigned char *)(v30 + 134) = 0;
      }
      goto LABEL_151;
    }
    bzero((char *)&v110 + 8, 0x2DFE0uLL);
    long long v107 = 0u;
    long long v108 = 0u;
    *(void *)&long long v110 = *((unsigned int *)v5 + 47040);
    unsigned int v77 = &unk_133235;
    if (v2) {
      LOBYTE(v77) = v2;
    }
    sub_DD92C((char *)&v112[2], 128, "%s", v72, v73, v74, v75, v76, (char)v77);
    int v114 = v109;
    if (*((unsigned char *)v5 + 18777)) {
      int v78 = 2;
    }
    else {
      int v78 = 1;
    }
    *(_OWORD *)&v112[39] = *((_OWORD *)v5 + 1260);
    *(_OWORD *)&v112[43] = *((_OWORD *)v5 + 1261);
    *(_OWORD *)&v112[47] = *((_OWORD *)v5 + 1262);
    *(_OWORD *)&v112[35] = *((_OWORD *)v5 + 1259);
    long long v79 = *(_OWORD *)((char *)v5 + 20212);
    long long v80 = *(_OWORD *)((char *)v5 + 20228);
    long long v81 = *(_OWORD *)((char *)v5 + 20260);
    *(_OWORD *)&v112[77] = *(_OWORD *)((char *)v5 + 20244);
    *(_OWORD *)&v112[81] = v81;
    *(_OWORD *)&v112[69] = v79;
    *(_OWORD *)&v112[73] = v80;
    int v82 = *((_DWORD *)v5 + 5069);
    v112[51] = *((_DWORD *)v5 + 5052);
    v112[85] = v82;
    v112[34] = v78;
    DWORD2(v111) = 118000;
    *(void *)int v112 = (uint64_t)sub_DDEFC() / 1000;
    memcpy(v113, v5 + 15, sizeof(v113));
    long long v107 = 0u;
    long long v108 = 0u;
    uint64_t v29 = sub_12178((const void **)*v5, &v110, &v107);
    if (v29)
    {
      sub_B1C9C((uint64_t)v5[23509]);
      if (sub_D1C38(0x28u, 4))
      {
        BOOL v83 = sub_D1C7C(0x28u) == 0;
        __uint64_t v84 = sub_DDEFC();
        uint64_t v85 = (const char *)sub_D1CB0(4);
        if (!v83)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to prepare %d\n", v84, 40, v85, "AVE_USL_Drv_Prepare", 710, "ret == 0", v29);
          __uint64_t v84 = sub_DDEFC();
          uint64_t v85 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to prepare %d", v84, 40, v85, "AVE_USL_Drv_Prepare", 710, "ret == 0", v29);
      }
    }
    else
    {
      uint64_t v86 = 0;
      uint64_t v87 = *(void *)(v4 + 16) + 1576;
      char v88 = 1;
      do
      {
        uint64_t v89 = 0;
        uint64_t v90 = 17 * v86;
        char v91 = v88;
        uint64_t v92 = (uint64_t)v5 + 68 * v86 + 20144;
        do
        {
          *(_DWORD *)(v87 + 4 * v90 + v89) = *(_DWORD *)(v92 + v89);
          v89 += 4;
        }
        while (v89 != 68);
        char v88 = 0;
        uint64_t v86 = 1;
      }
      while ((v91 & 1) != 0);
      int v93 = sub_B1CF0((uint64_t)v5[23508], (uint64_t)&v110, 0x1D4C0u);
      if (v110 != v109)
      {
        if (sub_D1C38(3u, 4))
        {
          BOOL v97 = sub_D1C7C(3u) == 0;
          __uint64_t v98 = sub_DDEFC();
          int v99 = (const char *)sub_D1CB0(4);
          if (!v97)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: status.counter != counter.\n", v98, 3, v99, "AVE_USL_Drv_Prepare", 730, "status.counter == counter");
            __uint64_t v98 = sub_DDEFC();
            int v99 = (const char *)sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: status.counter != counter.", v98, 3, v99, "AVE_USL_Drv_Prepare", 730, "status.counter == counter");
        }
        goto LABEL_132;
      }
      if (v112[0])
      {
        if (sub_D1C38(3u, 4))
        {
          BOOL v94 = sub_D1C7C(3u) == 0;
          __uint64_t v95 = sub_DDEFC();
          unsigned int v96 = (const char *)sub_D1CB0(4);
          if (!v94)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: errorCode = 0x%08x.\n", v95, 3, v96, "AVE_USL_Drv_Prepare", 731, "status.errorCode == 0", v112[0]);
            __uint64_t v95 = sub_DDEFC();
            unsigned int v96 = (const char *)sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: errorCode = 0x%08x.", v95, 3, v96, "AVE_USL_Drv_Prepare", 731, "status.errorCode == 0", v112[0]);
        }
        goto LABEL_132;
      }
      if (v93)
      {
        if (sub_D1C38(3u, 4))
        {
          BOOL v104 = sub_D1C7C(3u) == 0;
          __uint64_t v105 = sub_DDEFC();
          int v106 = (const char *)sub_D1CB0(4);
          if (!v104)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread\n", v105, 3, v106, "AVE_USL_Drv_Prepare", 732, "res == 0");
            __uint64_t v105 = sub_DDEFC();
            int v106 = (const char *)sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread", v105, 3, v106, "AVE_USL_Drv_Prepare", 732, "res == 0");
        }
        goto LABEL_132;
      }
      *((unsigned char *)v5 + 9) = 1;
    }
    if (v29 == -1003 || !v29) {
      goto LABEL_151;
    }
    goto LABEL_44;
  }
  if (sub_D1C38(3u, 4))
  {
    BOOL v66 = sub_D1C7C(3u) == 0;
    __uint64_t v67 = sub_DDEFC();
    int v68 = (const char *)sub_D1CB0(4);
    if (!v66)
    {
      printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.\n", v67, 3, v68, "AVE_USL_Drv_Prepare", 658, "Frame");
      __uint64_t v67 = sub_DDEFC();
      int v68 = (const char *)sub_D1CB0(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.", v67, 3, v68, "AVE_USL_Drv_Prepare", 658, "Frame");
  }
  uint64_t v29 = 4294966293;
LABEL_151:
  if (sub_D1C38(0x28u, 7))
  {
    BOOL v100 = sub_D1C7C(0x28u) == 0;
    __uint64_t v101 = sub_DDEFC();
    unsigned int v102 = (const char *)sub_D1CB0(7);
    if (!v100)
    {
      printf("%lld %d AVE %s: EXIT AVE_USL_Drv_Prepare F %d %d\n", v101, 40, v102, *((_DWORD *)v5 + 3), v29);
      __uint64_t v101 = sub_DDEFC();
      unsigned int v102 = (const char *)sub_D1CB0(7);
    }
    syslog(3, "%lld %d AVE %s: EXIT AVE_USL_Drv_Prepare F %d %d", v101, 40, v102, *((_DWORD *)v5 + 3), v29);
  }
  return v29;
}

void sub_B1BE8()
{
}

void sub_B1C18(uint64_t a1, int a2)
{
  pthread_mutex_init((pthread_mutex_t *)a1, 0);
  pthread_cond_init((pthread_cond_t *)(a1 + 64), 0);
  pthread_cond_init((pthread_cond_t *)(a1 + 112), 0);
  if ((a2 - 129) >= 0xFFFFFF80) {
    int v4 = a2;
  }
  else {
    int v4 = 128;
  }
  *(_DWORD *)(a1 + 192) = v4;
  *(_DWORD *)(a1 + 196) = v4;
  *(void *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  operator new[]();
}

uint64_t sub_B1C9C(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  int v2 = *(_DWORD *)(a1 + 200);
  if (v2)
  {
    *(_DWORD *)(a1 + 200) = v2 - 1;
    int v3 = *(_DWORD *)(a1 + 208);
    if (!v3) {
      int v3 = *(_DWORD *)(a1 + 196);
    }
    *(_DWORD *)(a1 + 208) = v3 - 1;
  }
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return 0;
}

uint64_t sub_B1CF0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  while (!*(_DWORD *)(a1 + 200))
  {
    gettimeofday((timeval *)(a1 + 176), 0);
    uint64_t v6 = 1000000 * (a3 % 0x3E8) + 1000 * *(_DWORD *)(a1 + 184);
    *(void *)(a1 + 160) = *(void *)(a1 + 176) + a3 / 0x3E8uLL;
    *(void *)(a1 + 168) = v6;
    if (pthread_cond_timedwait((pthread_cond_t *)(a1 + 64), (pthread_mutex_t *)a1, (const timespec *)(a1 + 160)) == 60)
    {
      uint64_t v7 = 0xFFFFFFFFLL;
      goto LABEL_10;
    }
  }
  uint64_t v7 = 0;
  uint64_t v8 = *(void *)(a1 + 216) + 40 * *(unsigned int *)(a1 + 204);
  long long v9 = *(_OWORD *)v8;
  long long v10 = *(_OWORD *)(v8 + 16);
  *(void *)(a2 + 32) = *(void *)(v8 + 32);
  *(_OWORD *)a2 = v9;
  *(_OWORD *)(a2 + 16) = v10;
  int v12 = *(_DWORD *)(a1 + 200);
  int v11 = *(_DWORD *)(a1 + 204);
  unsigned int v13 = *(_DWORD *)(a1 + 196);
  if (v11 + 1 < v13) {
    int v14 = v11 + 1;
  }
  else {
    int v14 = 0;
  }
  *(_DWORD *)(a1 + 200) = v12 - 1;
  *(_DWORD *)(a1 + 204) = v14;
  if (v12 == v13)
  {
    pthread_cond_signal((pthread_cond_t *)(a1 + 112));
    uint64_t v7 = 0;
  }
LABEL_10:
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v7;
}

uint64_t sub_B1E0C(void **a1, uint64_t *a2, int a3)
{
  int v52 = -1;
  if (sub_D1C38(0x28u, 7))
  {
    int v6 = sub_D1C7C(0x28u);
    __uint64_t v7 = sub_DDEFC();
    uint64_t v8 = (const char *)sub_D1CB0(7);
    if (v6)
    {
      printf("%lld %d AVE %s: ENTER AVE_USL_Drv_Stop.\n", v7, 40, v8);
      __uint64_t v9 = sub_DDEFC();
      uint64_t v43 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: ENTER AVE_USL_Drv_Stop.", v9, 40, v43);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: ENTER AVE_USL_Drv_Stop.", v7, 40, v8);
    }
  }
  if (a1)
  {
    uint64_t v51 = *a2;
    if (sub_B490C(a1, &v51) == -1004 && !*((unsigned char *)a1 + 9))
    {
      uint64_t v23 = 4294966292;
    }
    else
    {
      int v47 = 0;
      sub_FD00(*a1, 67360, &v47);
      sub_109C4(*a1, v47, &v52);
      long long v10 = v47;
      if (!v47)
      {
        if (sub_D1C38(3u, 4))
        {
          int v18 = sub_D1C7C(3u);
          __uint64_t v19 = sub_DDEFC();
          int v20 = (const char *)sub_D1CB0(4);
          if (v18)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.\n", v19, 3, v20, "AVE_USL_Drv_Stop", 1185, "Frame");
            __uint64_t v21 = sub_DDEFC();
            __uint64_t v45 = (const char *)sub_D1CB0(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.", v21, 3, v45, "AVE_USL_Drv_Stop", 1185, "Frame");
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.", v19, 3, v20, "AVE_USL_Drv_Stop", 1185, "Frame");
          }
        }
        uint64_t v23 = 4294966293;
        goto LABEL_34;
      }
      bzero(v47 + 8, 0x10718uLL);
      *(_DWORD *)long long v10 = v52;
      *((_DWORD *)v10 + 1) = 6;
      *((_DWORD *)v10 + 40) = *((_DWORD *)a1 + 3);
      *((void *)v10 + 3459) = *a2;
      v10[8] = a1[23521] != 0;
      *((_DWORD *)v10 + 3) = *((_DWORD *)a1 + 47044);
      LODWORD(v47) = v52;
      if (sub_AE6BC((uint64_t)a1[23509], (long long *)&v47))
      {
        if (sub_D1C38(3u, 4))
        {
          int v11 = sub_D1C7C(3u);
          __uint64_t v12 = sub_DDEFC();
          unsigned int v13 = (const char *)sub_D1CB0(4);
          if (v11)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread\n", v12, 3, v13, "AVE_USL_Drv_Stop", 1207, "res == 0");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread");
        }
      }
      else
      {
        uint64_t v50 = 0;
        long long v49 = 0u;
        long long v48 = 0u;
        memset(v46, 0, sizeof(v46));
        int v47 = (char *)*((unsigned int *)a1 + 47040);
        LODWORD(v50) = v52;
        LODWORD(v49) = 118000;
        *((void *)&v49 + 1) = (uint64_t)sub_DDEFC() / 1000;
        uint64_t v22 = sub_129F0((const void **)*a1, &v47, v46);
        if (v22)
        {
          uint64_t v23 = v22;
          __uint64_t v24 = (pthread_mutex_t *)a1[23509];
          pthread_mutex_lock(v24);
          int v25 = *(_DWORD *)v24[3].__opaque;
          if (v25)
          {
            *(_DWORD *)v24[3].__opaque = v25 - 1;
            int sig_high = *(_DWORD *)&v24[3].__opaque[8];
            if (!sig_high) {
              int sig_high = HIDWORD(v24[3].__sig);
            }
            *(_DWORD *)&v24[3].__opaque[8] = sig_high - 1;
          }
          pthread_mutex_unlock(v24);
          if (sub_D1C38(0x28u, 4))
          {
            int v27 = sub_D1C7C(0x28u);
            __uint64_t v28 = sub_DDEFC();
            uint64_t v29 = (const char *)sub_D1CB0(4);
            if (v27)
            {
              printf("%lld %d AVE %s: %s:%d %s | fail to process %d\n", v28, 40, v29, "AVE_USL_Drv_Stop", 1224, "ret == 0", v23);
              __uint64_t v28 = sub_DDEFC();
              sub_D1CB0(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to process %d", v28);
          }
          goto LABEL_34;
        }
        int v36 = sub_B1CF0((uint64_t)a1[23508], (uint64_t)&v47, 0x1D4C0u);
        if (v47 == v52)
        {
          if (!v36)
          {
            uint64_t v23 = 0;
            goto LABEL_34;
          }
          if (sub_D1C38(3u, 4))
          {
            int v37 = sub_D1C7C(3u);
            __uint64_t v38 = sub_DDEFC();
            __uint64_t v39 = (const char *)sub_D1CB0(4);
            if (v37)
            {
              printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread\n", v38, 3, v39, "AVE_USL_Drv_Stop", 1236, "res == 0");
              sub_DDEFC();
              sub_D1CB0(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread");
          }
        }
        else if (sub_D1C38(3u, 4))
        {
          int v40 = sub_D1C7C(3u);
          __uint64_t v41 = sub_DDEFC();
          __uint64_t v42 = (const char *)sub_D1CB0(4);
          if (v40)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder ERROR: status.counter != counter.\n", v41, 3, v42, "AVE_USL_Drv_Stop", 1235, "status.counter == counter");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder ERROR: status.counter != counter.");
        }
      }
      uint64_t v23 = 4294966296;
    }
LABEL_34:
    if (a3) {
      sub_AFFBC((uint64_t)a1);
    }
    *((_WORD *)a1 + 4) = 0;
    goto LABEL_37;
  }
  if (sub_D1C38(3u, 4))
  {
    int v14 = sub_D1C7C(3u);
    __uint64_t v15 = sub_DDEFC();
    int v16 = (const char *)sub_D1CB0(4);
    if (v14)
    {
      printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Stop, Null pointer for driver data.\n", v15, 3, v16, "AVE_USL_Drv_Stop", 1162, "pDriverInstance");
      __uint64_t v17 = sub_DDEFC();
      int v44 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Stop, Null pointer for driver data.", v17, 3, v44, "AVE_USL_Drv_Stop", 1162, "pDriverInstance");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Stop, Null pointer for driver data.", v15, 3, v16, "AVE_USL_Drv_Stop", 1162, "pDriverInstance");
    }
  }
  uint64_t v23 = 4294966295;
LABEL_37:
  if (sub_D1C38(0x28u, 7))
  {
    int v30 = sub_D1C7C(0x28u);
    __uint64_t v31 = sub_DDEFC();
    __uint64_t v32 = (const char *)sub_D1CB0(7);
    if (v30)
    {
      if (a1) {
        int v33 = *((_DWORD *)a1 + 3);
      }
      else {
        int v33 = 0;
      }
      printf("%lld %d AVE %s: EXIT AVE_USL_Drv_Stop F %d %d\n", v31, 40, v32, v33, v23);
      __uint64_t v31 = sub_DDEFC();
      __uint64_t v32 = (const char *)sub_D1CB0(7);
      if (a1) {
        goto LABEL_45;
      }
    }
    else if (a1)
    {
LABEL_45:
      int v34 = *((_DWORD *)a1 + 3);
      goto LABEL_46;
    }
    int v34 = 0;
LABEL_46:
    syslog(3, "%lld %d AVE %s: EXIT AVE_USL_Drv_Stop F %d %d", v31, 40, v32, v34, v23);
  }
  return v23;
}

uint64_t sub_B25A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10, void *a11)
{
  uint64_t v11 = __chkstk_darwin();
  unsigned int v13 = v12;
  char v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  int v26 = (void **)v11;
  int v160 = -1;
  bzero(v161, 0x2DFE8uLL);
  bzero(v157, 0x2D0uLL);
  if (sub_D1C38(0x28u, 7))
  {
    int v27 = sub_D1C7C(0x28u);
    __uint64_t v28 = sub_DDEFC();
    uint64_t v29 = (const char *)sub_D1CB0(7);
    if (v27)
    {
      printf("%lld %d AVE %s: ENTER AVE_USL_Drv_Start.\n", v28, 40, v29);
      __uint64_t v28 = sub_DDEFC();
      uint64_t v29 = (const char *)sub_D1CB0(7);
    }
    syslog(3, "%lld %d AVE %s: ENTER AVE_USL_Drv_Start.", v28, 40, v29);
  }
  if (!v26)
  {
    if (sub_D1C38(3u, 4))
    {
      int v36 = sub_D1C7C(3u);
      __uint64_t v37 = sub_DDEFC();
      __uint64_t v38 = (const char *)sub_D1CB0(4);
      if (v36)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for driver data.\n", v37, 3, v38, "AVE_USL_Drv_Start", 792, "pDriverInstance");
        __uint64_t v37 = sub_DDEFC();
        __uint64_t v38 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for driver data.", v37, 3, v38, "AVE_USL_Drv_Start", 792, "pDriverInstance");
    }
    goto LABEL_157;
  }
  if (!v25)
  {
    if (sub_D1C38(3u, 4))
    {
      int v39 = sub_D1C7C(3u);
      __uint64_t v40 = sub_DDEFC();
      __uint64_t v41 = (const char *)sub_D1CB0(4);
      if (v39)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for AppleAVEVA_InitSettings.\n", v40, 3, v41, "AVE_USL_Drv_Start", 793, "pInitSettings");
        __uint64_t v40 = sub_DDEFC();
        __uint64_t v41 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for AppleAVEVA_InitSettings.", v40, 3, v41, "AVE_USL_Drv_Start", 793, "pInitSettings");
    }
    goto LABEL_157;
  }
  int v30 = *(void **)v25;
  if (!*(void *)v25)
  {
    if (sub_D1C38(3u, 4))
    {
      int v42 = sub_D1C7C(3u);
      __uint64_t v43 = sub_DDEFC();
      int v44 = (const char *)sub_D1CB0(4);
      if (v42)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pClientParams.\n", v43, 3, v44, "AVE_USL_Drv_Start", 795, "pInitSettings->pClientParams");
        __uint64_t v43 = sub_DDEFC();
        int v44 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pClientParams.", v43, 3, v44, "AVE_USL_Drv_Start", 795, "pInitSettings->pClientParams");
    }
    goto LABEL_157;
  }
  if (!*(void *)(v25 + 8))
  {
    if (sub_D1C38(3u, 4))
    {
      int v45 = sub_D1C7C(3u);
      __uint64_t v46 = sub_DDEFC();
      int v47 = (const char *)sub_D1CB0(4);
      if (v45)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pVideoParams.\n", v46, 3, v47, "AVE_USL_Drv_Start", 796, "pInitSettings->pVideoParams");
        __uint64_t v46 = sub_DDEFC();
        int v47 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pVideoParams.", v46, 3, v47, "AVE_USL_Drv_Start", 796, "pInitSettings->pVideoParams");
    }
    goto LABEL_157;
  }
  uint64_t v31 = *(void *)(v25 + 16);
  if (!v31)
  {
    if (sub_D1C38(3u, 4))
    {
      int v48 = sub_D1C7C(3u);
      __uint64_t v49 = sub_DDEFC();
      uint64_t v50 = (const char *)sub_D1CB0(4);
      if (v48)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pVideoParamsDriver.\n", v49, 3, v50, "AVE_USL_Drv_Start", 797, "pInitSettings->pVideoParamsDriver");
        __uint64_t v49 = sub_DDEFC();
        uint64_t v50 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pVideoParamsDriver.", v49, 3, v50, "AVE_USL_Drv_Start", 797, "pInitSettings->pVideoParamsDriver");
    }
    goto LABEL_157;
  }
  if (!*(void *)(v25 + 24))
  {
    if (sub_D1C38(3u, 4))
    {
      int v51 = sub_D1C7C(3u);
      __uint64_t v52 = sub_DDEFC();
      int v53 = (const char *)sub_D1CB0(4);
      if (v51)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pRCParams.\n", v52, 3, v53, "AVE_USL_Drv_Start", 798, "pInitSettings->pRCParams");
        __uint64_t v52 = sub_DDEFC();
        int v53 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pRCParams.", v52, 3, v53, "AVE_USL_Drv_Start", 798, "pInitSettings->pRCParams");
    }
    goto LABEL_157;
  }
  int v32 = *(_DWORD *)(v31 + 120);
  if (v32 == 1)
  {
    if (!*(void *)(v25 + 80))
    {
      if (sub_D1C38(3u, 4))
      {
        int v62 = sub_D1C7C(3u);
        __uint64_t v63 = sub_DDEFC();
        __uint64_t v64 = (const char *)sub_D1CB0(4);
        if (v62)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for VPSHevcParams.\n", v63, 3, v64, "AVE_USL_Drv_Start", 812, "pInitSettings->VPSHevcParams");
          __uint64_t v63 = sub_DDEFC();
          __uint64_t v64 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for VPSHevcParams.", v63, 3, v64, "AVE_USL_Drv_Start", 812, "pInitSettings->VPSHevcParams");
      }
      goto LABEL_157;
    }
    if (!*(void *)(v25 + 88))
    {
      if (sub_D1C38(3u, 4))
      {
        int v68 = sub_D1C7C(3u);
        __uint64_t v69 = sub_DDEFC();
        __uint64_t v70 = (const char *)sub_D1CB0(4);
        if (v68)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SPSHevcParams.\n", v69, 3, v70, "AVE_USL_Drv_Start", 813, "pInitSettings->psaHEVC_SPS[0]");
          __uint64_t v69 = sub_DDEFC();
          __uint64_t v70 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SPSHevcParams.", v69, 3, v70, "AVE_USL_Drv_Start", 813, "pInitSettings->psaHEVC_SPS[0]");
      }
      goto LABEL_157;
    }
    if (!*(void *)(v25 + 104))
    {
      if (sub_D1C38(3u, 4))
      {
        int v71 = sub_D1C7C(3u);
        __uint64_t v72 = sub_DDEFC();
        uint64_t v73 = (const char *)sub_D1CB0(4);
        if (v71)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for PPSHevcParams.\n", v72, 3, v73, "AVE_USL_Drv_Start", 814, "pInitSettings->psaHEVC_PPS[0]");
          __uint64_t v72 = sub_DDEFC();
          uint64_t v73 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for PPSHevcParams.", v72, 3, v73, "AVE_USL_Drv_Start", 814, "pInitSettings->psaHEVC_PPS[0]");
      }
      goto LABEL_157;
    }
    if (!*(void *)(v25 + 120))
    {
      if (sub_D1C38(3u, 4))
      {
        int v90 = sub_D1C7C(3u);
        __uint64_t v91 = sub_DDEFC();
        uint64_t v92 = (const char *)sub_D1CB0(4);
        if (v90)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SHHevcParams.\n", v91, 3, v92, "AVE_USL_Drv_Start", 815, "pInitSettings->SHHevcParams");
          __uint64_t v91 = sub_DDEFC();
          uint64_t v92 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SHHevcParams.", v91, 3, v92, "AVE_USL_Drv_Start", 815, "pInitSettings->SHHevcParams");
      }
      goto LABEL_157;
    }
    if (!*(void *)(v25 + 128))
    {
      if (sub_D1C38(3u, 4))
      {
        int v96 = sub_D1C7C(3u);
        __uint64_t v97 = sub_DDEFC();
        __uint64_t v98 = (const char *)sub_D1CB0(4);
        if (v96)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for RPSHevcParams.\n", v97, 3, v98, "AVE_USL_Drv_Start", 816, "pInitSettings->RPSHevcParams");
          __uint64_t v97 = sub_DDEFC();
          __uint64_t v98 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for RPSHevcParams.", v97, 3, v98, "AVE_USL_Drv_Start", 816, "pInitSettings->RPSHevcParams");
      }
      goto LABEL_157;
    }
  }
  else
  {
    if (v32)
    {
      if (sub_D1C38(3u, 4))
      {
        int v56 = sub_D1C7C(3u);
        __uint64_t v57 = sub_DDEFC();
        long long v58 = (const char *)sub_D1CB0(4);
        if (v56)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, codec type not recognized = %d\n", v57, 3, v58, "AVE_USL_Drv_Start", 820, "false", *(_DWORD *)(*(void *)(v25 + 16) + 120));
          __uint64_t v57 = sub_DDEFC();
          long long v58 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, codec type not recognized = %d", v57, 3, v58, "AVE_USL_Drv_Start", 820, "false", *(_DWORD *)(*(void *)(v25 + 16) + 120));
      }
      goto LABEL_157;
    }
    if (!*(void *)(v25 + 56))
    {
      if (sub_D1C38(3u, 4))
      {
        int v59 = sub_D1C7C(3u);
        __uint64_t v60 = sub_DDEFC();
        __uint64_t v61 = (const char *)sub_D1CB0(4);
        if (v59)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SPSParams.\n", v60, 3, v61, "AVE_USL_Drv_Start", 804, "pInitSettings->SPSParams");
          __uint64_t v60 = sub_DDEFC();
          __uint64_t v61 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SPSParams.", v60, 3, v61, "AVE_USL_Drv_Start", 804, "pInitSettings->SPSParams");
      }
      goto LABEL_157;
    }
    if (!*(void *)(v25 + 64))
    {
      if (sub_D1C38(3u, 4))
      {
        int v65 = sub_D1C7C(3u);
        __uint64_t v66 = sub_DDEFC();
        __uint64_t v67 = (const char *)sub_D1CB0(4);
        if (v65)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for PPSParams.\n", v66, 3, v67, "AVE_USL_Drv_Start", 805, "pInitSettings->PPSParams");
          __uint64_t v66 = sub_DDEFC();
          __uint64_t v67 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for PPSParams.", v66, 3, v67, "AVE_USL_Drv_Start", 805, "pInitSettings->PPSParams");
      }
      goto LABEL_157;
    }
    if (!*(void *)(v25 + 72))
    {
      if (sub_D1C38(3u, 4))
      {
        int v33 = sub_D1C7C(3u);
        __uint64_t v34 = sub_DDEFC();
        int v35 = (const char *)sub_D1CB0(4);
        if (v33)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SHParams.\n", v34, 3, v35, "AVE_USL_Drv_Start", 806, "pInitSettings->SHParams");
          __uint64_t v34 = sub_DDEFC();
          int v35 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SHParams.", v34, 3, v35, "AVE_USL_Drv_Start", 806, "pInitSettings->SHParams");
      }
LABEL_157:
      uint64_t v83 = 4294966295;
      goto LABEL_158;
    }
  }
  __uint64_t v54 = v26 + 23507;
  v26[23521] = v13;
  v26[225] = (void *)*v30;
  int v151 = v26 + 226;
  memcpy(v26 + 226, *(const void **)(v25 + 8), 0x4178uLL);
  uint64_t v150 = v26 + 2321;
  memcpy(v26 + 2321, *(const void **)(v25 + 16), 0x6C0uLL);
  memcpy(v26 + 15, *(const void **)(v25 + 24), 0x690uLL);
  int v55 = *(_DWORD *)(*(void *)(v25 + 16) + 120);
  if (v55 == 1)
  {
    __uint64_t v152 = v26 + 23507;
    __src = v26 + 15;
    uint64_t v155 = v25;
    memcpy(v26 + 3126, *(const void **)(v25 + 80), 0x140E8uLL);
    uint64_t v74 = 0;
    char v75 = 1;
    do
    {
      uint64_t v76 = v26;
      char v77 = v75;
      uint64_t v78 = v155 + 8 * v74;
      long long v79 = *(const void **)(v78 + 88);
      if (v79) {
        memcpy((char *)v76 + 7924 * v74 + 107160, v79, 0x1EF4uLL);
      }
      long long v80 = *(const void **)(v78 + 104);
      int v26 = v76;
      if (v80) {
        memcpy((char *)v76 + 9636 * v74 + 123008, v80, 0x25A4uLL);
      }
      char v75 = 0;
      uint64_t v74 = 1;
    }
    while ((v77 & 1) != 0);
    long long v81 = v76 + 17785;
    uint64_t v25 = v155;
    memcpy(v81, *(const void **)(v155 + 120), 0x54F8uLL);
    memcpy(v26 + 20504, *(const void **)(v155 + 128), 0x5DD8uLL);
    __uint64_t v54 = v152;
  }
  else
  {
    if (v55)
    {
      if (sub_D1C38(3u, 4))
      {
        int v87 = sub_D1C7C(3u);
        __uint64_t v88 = sub_DDEFC();
        uint64_t v89 = (const char *)sub_D1CB0(4);
        if (v87)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, codec type not recognized = %d\n", v88, 3, v89, "AVE_USL_Drv_Start", 865, "false", *(_DWORD *)(*(void *)(v25 + 16) + 120));
          __uint64_t v88 = sub_DDEFC();
          uint64_t v89 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, codec type not recognized = %d", v88, 3, v89, "AVE_USL_Drv_Start", 865, "false", *(_DWORD *)(*(void *)(v25 + 16) + 120));
      }
      goto LABEL_157;
    }
    __src = v26 + 15;
    memcpy(v26 + 2537, *(const void **)(v25 + 56), 0x6B8uLL);
    memcpy(v26 + 2752, *(const void **)(v25 + 64), 0x184uLL);
    memcpy((char *)v26 + 22404, *(const void **)(v25 + 72), 0xA2CuLL);
  }
  v54[16] = *(void **)(v25 + 48);
  sub_AF2A8((uint64_t)v26, (uint64_t)__src, (uint64_t)(v26 + 2));
  uint64_t v82 = sub_BEF60((_DWORD *)v26 + 4, *((_DWORD *)v54 + 26), (uint64_t *)v26 + 8);
  if (v82)
  {
    uint64_t v83 = v82;
    if (sub_D1C38(0x28u, 4))
    {
      int v84 = sub_D1C7C(0x28u);
      __uint64_t v85 = sub_DDEFC();
      uint64_t v86 = (const char *)sub_D1CB0(4);
      if (v84)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create surfaces %d %d\n", v85, 40, v86, "AVE_USL_Drv_Start", 876, "ret == 0", *((_DWORD *)v54 + 26), v83);
        __uint64_t v85 = sub_DDEFC();
        uint64_t v86 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create surfaces %d %d", v85, 40, v86, "AVE_USL_Drv_Start", 876, "ret == 0", *((_DWORD *)v54 + 26), v83);
    }
    goto LABEL_158;
  }
  int v153 = v54;
  if (!*((unsigned char *)v26 + 18702))
  {
    memset(v156, 0, sizeof(v156));
    operator new();
  }
  memset((char *)&v156[4] + 8, 0, 184);
  memset((char *)&v156[2] + 8, 0, 32);
  *(void *)&v156[0] = *v26;
  *(int8x16_t *)((char *)v156 + 8) = vextq_s8(*(int8x16_t *)(v54 + 1), *(int8x16_t *)(v54 + 1), 8uLL);
  *((void *)&v156[1] + 1) = v21;
  *(void *)&v156[2] = v19;
  *((void *)&v156[4] + 1) = v17;
  if (v23)
  {
    long long v93 = v23[1];
    *(long long *)((char *)&v156[2] + 8) = *v23;
    *(long long *)((char *)&v156[3] + 8) = v93;
  }
  *(void *)&v156[5] = v26 + 225;
  *((void *)&v156[5] + 1) = v151;
  *(void *)&v156[6] = v150;
  *((void *)&v156[6] + 1) = __src;
  v156[7] = *(_OWORD *)(v25 + 32);
  int v94 = *(_DWORD *)(*(void *)(v25 + 16) + 120);
  if (v94 == 1)
  {
    __uint64_t v95 = (char *)v26 + 18702;
    memset(&v156[8], 0, 24);
    *((void *)&v156[9] + 1) = v26 + 3126;
    *(void *)&v156[10] = v26 + 13395;
    *((void *)&v156[10] + 1) = (char *)v26 + 115084;
    *(void *)&v156[11] = v26 + 15376;
    *((void *)&v156[11] + 1) = (char *)v26 + 132644;
    *(void *)&v156[12] = v26 + 17785;
    *((void *)&v156[12] + 1) = v26 + 20504;
  }
  else
  {
    if (v94)
    {
      if (sub_D1C38(3u, 4))
      {
        int v106 = sub_D1C7C(3u);
        __uint64_t v107 = sub_DDEFC();
        long long v108 = (const char *)sub_D1CB0(4);
        if (v106)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, codec type not recognized = %d\n", v107, 3, v108, "AVE_USL_Drv_Start", 1019, "false", *(_DWORD *)(*(void *)(v25 + 16) + 120));
          __uint64_t v107 = sub_DDEFC();
          long long v108 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, codec type not recognized = %d", v107, 3, v108, "AVE_USL_Drv_Start", 1019, "false", *(_DWORD *)(*(void *)(v25 + 16) + 120));
      }
      goto LABEL_157;
    }
    __uint64_t v95 = (char *)v26 + 18702;
    *(void *)&v156[8] = v26 + 2537;
    *((void *)&v156[8] + 1) = v26 + 2752;
    *(void *)&v156[9] = (char *)v26 + 22404;
  }
  LOBYTE(v156[13]) = v15;
  unsigned int v99 = *((_DWORD *)v54 + 24);
  unsigned int v100 = *((_DWORD *)v54 + 27);
  HIDWORD(v156[13]) = *((_DWORD *)v54 + 26);
  *(void *)((char *)&v156[13] + 4) = __PAIR64__(v99, v100);
  __uint64_t v101 = v54[16];
  *(void *)&v156[14] = v13;
  *(void *)&v156[15] = v101;
  unsigned int v102 = v54;
  if (sub_9BA8C((uint64_t)*v54, (uint64_t)v156))
  {
    if (sub_D1C38(3u, 4))
    {
      BOOL v103 = sub_D1C7C(3u) == 0;
      __uint64_t v104 = sub_DDEFC();
      __uint64_t v105 = (const char *)sub_D1CB0(4);
      if (!v103)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: CreateH264VideoEncoderFrameReceiver failed.\n", v104, 3, v105, "AVE_USL_Drv_Start", 1032, "ret == 0");
        __uint64_t v104 = sub_DDEFC();
        __uint64_t v105 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: CreateH264VideoEncoderFrameReceiver failed.", v104, 3, v105, "AVE_USL_Drv_Start", 1032, "ret == 0");
    }
LABEL_180:
    uint64_t v83 = 4294966293;
    goto LABEL_158;
  }
  *(void *)&v156[0] = 0;
  sub_FD00(*v26, 67360, v156);
  sub_109C4(*v26, *(const void **)&v156[0], &v160);
  uint64_t v109 = *(void *)&v156[0];
  if (!*(void *)&v156[0])
  {
    if (sub_D1C38(3u, 4))
    {
      BOOL v118 = sub_D1C7C(3u) == 0;
      __uint64_t v119 = sub_DDEFC();
      unsigned int v120 = (const char *)sub_D1CB0(4);
      if (!v118)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.\n", v119, 3, v120, "AVE_USL_Drv_Start", 1045, "Frame");
        __uint64_t v119 = sub_DDEFC();
        unsigned int v120 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.", v119, 3, v120, "AVE_USL_Drv_Start", 1045, "Frame");
    }
    goto LABEL_180;
  }
  bzero((void *)(*(void *)&v156[0] + 8), 0x10718uLL);
  *(_DWORD *)uint64_t v109 = v160;
  *(_DWORD *)(v109 + 4) = 5;
  *(_DWORD *)(v109 + 160) = *((_DWORD *)v26 + 3);
  *(void *)(v109 + 27672) = *(void *)(v25 + 136);
  *(unsigned char *)(v109 + 8) = v153[14] != 0;
  *(_DWORD *)(v109 + 12) = *((_DWORD *)v153 + 30);
  LODWORD(v156[0]) = v160;
  if (sub_AE6BC((uint64_t)v153[2], v156))
  {
    if (sub_D1C38(3u, 4))
    {
      BOOL v115 = sub_D1C7C(3u) == 0;
      __uint64_t v116 = sub_DDEFC();
      int v117 = (const char *)sub_D1CB0(4);
      if (!v115)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread\n", v116, 3, v117, "AVE_USL_Drv_Start", 1069, "res == 0");
        __uint64_t v116 = sub_DDEFC();
        int v117 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread", v116, 3, v117, "AVE_USL_Drv_Start", 1069, "res == 0");
    }
LABEL_165:
    uint64_t v83 = 4294966296;
    goto LABEL_166;
  }
  LOBYTE(v121) = a9;
  v161[0] = *((unsigned int *)v153 + 26);
  if (!a9) {
    int v121 = &unk_133235;
  }
  sub_DD92C(v164, 128, "%s", v110, v111, v112, v113, v114, (char)v121);
  int v177 = v160;
  if (v95[75]) {
    int v122 = 2;
  }
  else {
    int v122 = 1;
  }
  long long v123 = *(_OWORD *)((char *)v26 + 20212);
  long long v124 = *(_OWORD *)((char *)v26 + 20228);
  long long v125 = *(_OWORD *)((char *)v26 + 20260);
  long long v173 = *(_OWORD *)((char *)v26 + 20244);
  long long v174 = v125;
  long long v171 = v123;
  long long v172 = v124;
  long long v167 = *((_OWORD *)v26 + 1260);
  long long v168 = *((_OWORD *)v26 + 1261);
  long long v169 = *((_OWORD *)v26 + 1262);
  long long v166 = *((_OWORD *)v26 + 1259);
  int v126 = *((_DWORD *)v26 + 5069);
  int v170 = *((_DWORD *)v26 + 5052);
  int v175 = v126;
  int v165 = v122;
  int v162 = 118000;
  uint64_t v163 = (uint64_t)sub_DDEFC() / 1000;
  memcpy(v176, __src, sizeof(v176));
  *(void *)(v109 + 27696) = sub_DDEFC();
  uint64_t v83 = sub_125B4((const void **)*v26, v161, v157);
  if (v83)
  {
    sub_B1C9C((uint64_t)v102[2]);
    if (sub_D1C38(0x28u, 4))
    {
      BOOL v127 = sub_D1C7C(0x28u) == 0;
      __uint64_t v128 = sub_DDEFC();
      __uint64_t v129 = (const char *)sub_D1CB0(4);
      if (!v127)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to start %d\n", v128, 40, v129, "AVE_USL_Drv_Start", 1097, "ret == 0", v83);
        __uint64_t v128 = sub_DDEFC();
        __uint64_t v129 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to start %d", v128, 40, v129, "AVE_USL_Drv_Start", 1097, "ret == 0", v83);
    }
    if (v83 == -1003) {
      goto LABEL_180;
    }
LABEL_166:
    *(void *)&v156[0] = *(void *)(v25 + 136);
    sub_B1E0C(v26, (uint64_t *)v156, 0);
    goto LABEL_158;
  }
  int v134 = sub_B1CF0((uint64_t)v102[1], (uint64_t)v156, 0x1D4C0u);
  if (LODWORD(v156[0]) != v160)
  {
    if (sub_D1C38(3u, 4))
    {
      BOOL v138 = sub_D1C7C(3u) == 0;
      __uint64_t v139 = sub_DDEFC();
      int v140 = (const char *)sub_D1CB0(4);
      if (!v138)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: status.counter != counter.\n", v139, 3, v140, "AVE_USL_Drv_Start", 1108, "status.counter == counter");
        __uint64_t v139 = sub_DDEFC();
        int v140 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: status.counter != counter.", v139, 3, v140, "AVE_USL_Drv_Start", 1108, "status.counter == counter");
    }
    goto LABEL_165;
  }
  if (LODWORD(v156[2]))
  {
    if (sub_D1C38(3u, 4))
    {
      BOOL v135 = sub_D1C7C(3u) == 0;
      __uint64_t v136 = sub_DDEFC();
      uint64_t v137 = (const char *)sub_D1CB0(4);
      if (!v135)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: errorCode = 0x%08x.\n", v136, 3, v137, "AVE_USL_Drv_Start", 1109, "status.errorCode == 0", LODWORD(v156[2]));
        __uint64_t v136 = sub_DDEFC();
        uint64_t v137 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: errorCode = 0x%08x.", v136, 3, v137, "AVE_USL_Drv_Start", 1109, "status.errorCode == 0", LODWORD(v156[2]));
    }
    goto LABEL_165;
  }
  if (v134)
  {
    if (sub_D1C38(3u, 4))
    {
      BOOL v141 = sub_D1C7C(3u) == 0;
      __uint64_t v142 = sub_DDEFC();
      long long v143 = (const char *)sub_D1CB0(4);
      if (!v141)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread\n", v142, 3, v143, "AVE_USL_Drv_Start", 1110, "res == 0");
        __uint64_t v142 = sub_DDEFC();
        long long v143 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread", v142, 3, v143, "AVE_USL_Drv_Start", 1110, "res == 0");
    }
    goto LABEL_165;
  }
  if (sub_B47F4((uint64_t)v102[2], v158))
  {
    if (sub_D1C38(3u, 4))
    {
      BOOL v144 = sub_D1C7C(3u) == 0;
      __uint64_t v145 = sub_DDEFC();
      uint64_t v146 = (const char *)sub_D1CB0(4);
      if (!v144)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Set FrameReceiverInput connection size fail %d\n", v145, 3, v146, "AVE_USL_Drv_Start", 1115, "ret == 0", v158);
        __uint64_t v145 = sub_DDEFC();
        uint64_t v146 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Set FrameReceiverInput connection size fail %d", v145, 3, v146, "AVE_USL_Drv_Start", 1115, "ret == 0", v158);
      goto LABEL_165;
    }
LABEL_199:
    uint64_t v83 = 4294966296;
    goto LABEL_166;
  }
  if (sub_B47F4((uint64_t)v102[1], v158))
  {
    if (sub_D1C38(3u, 4))
    {
      BOOL v147 = sub_D1C7C(3u) == 0;
      __uint64_t v148 = sub_DDEFC();
      int v149 = (const char *)sub_D1CB0(4);
      if (!v147)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Set FrameReceiverOutput connection size fail %d\n", v148, 3, v149, "AVE_USL_Drv_Start", 1117, "ret == 0", v158);
        __uint64_t v148 = sub_DDEFC();
        int v149 = (const char *)sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Set FrameReceiverOutput connection size fail %d", v148, 3, v149, "AVE_USL_Drv_Start", 1117, "ret == 0", v158);
      goto LABEL_165;
    }
    goto LABEL_199;
  }
  if (a10) {
    *a10 = v158;
  }
  if (a11) {
    memcpy(a11, v159, 0x2A8uLL);
  }
  uint64_t v83 = 0;
  *((unsigned char *)v26 + 8) = 1;
LABEL_158:
  if (sub_D1C38(0x28u, 7))
  {
    BOOL v130 = sub_D1C7C(0x28u) == 0;
    __uint64_t v131 = sub_DDEFC();
    int v132 = (const char *)sub_D1CB0(7);
    if (!v130)
    {
      printf("%lld %d AVE %s: EXIT H264VideoEncoderVA_DriverInit err %d.\n", v131, 40, v132, v83);
      __uint64_t v131 = sub_DDEFC();
      int v132 = (const char *)sub_D1CB0(7);
    }
    syslog(3, "%lld %d AVE %s: EXIT H264VideoEncoderVA_DriverInit err %d.", v131, 40, v132, v83);
  }
  return v83;
}

void sub_B47C4()
{
}

uint64_t sub_B47F4(uint64_t a1, unsigned int a2)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  if (*(_DWORD *)(a1 + 200) || *(_DWORD *)(a1 + 192) < a2)
  {
    if (sub_D1C38(0x2Au, 4))
    {
      int v4 = sub_D1C7C(0x2Au);
      __uint64_t v5 = sub_DDEFC();
      int v6 = (const char *)sub_D1CB0(4);
      if (v4)
      {
        printf("%lld %d AVE %s: configure connection size fail %d %d %d %d\n", v5, 42, v6, *(_DWORD *)(a1 + 200), *(_DWORD *)(a1 + 192), *(_DWORD *)(a1 + 196), a2);
        __uint64_t v5 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: configure connection size fail %d %d %d %d", v5);
    }
    uint64_t v7 = 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = 0;
    *(_DWORD *)(a1 + 196) = a2;
    *(_DWORD *)(a1 + 204) = 0;
    *(_DWORD *)(a1 + 208) = 0;
  }
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v7;
}

uint64_t sub_B490C(void **a1, void *a2)
{
  unsigned int v55 = -1;
  if (sub_D1C38(0x28u, 7))
  {
    int v4 = sub_D1C7C(0x28u);
    __uint64_t v5 = sub_DDEFC();
    int v6 = (const char *)sub_D1CB0(7);
    if (v4)
    {
      printf("%lld %d AVE %s: ENTER H264VideoEncoderVA_DriverEncodeCompleteFrames.\n", v5, 40, v6);
      __uint64_t v7 = sub_DDEFC();
      __uint64_t v46 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: ENTER H264VideoEncoderVA_DriverEncodeCompleteFrames.", v7, 40, v46);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: ENTER H264VideoEncoderVA_DriverEncodeCompleteFrames.", v5, 40, v6);
    }
  }
  if (a1)
  {
    if (!*((unsigned char *)a1 + 8))
    {
      uint64_t v17 = 4294966292;
      goto LABEL_33;
    }
    int v51 = 0;
    sub_FD00(*a1, 67360, &v51);
    sub_109C4(*a1, v51, &v55);
    uint64_t v8 = v51;
    if (v51)
    {
      __uint64_t v9 = (pthread_mutex_t **)(a1 + 23508);
      bzero(v51 + 8, 0x10718uLL);
      *(_DWORD *)uint64_t v8 = v55;
      *((_DWORD *)v8 + 1) = 8;
      *((_DWORD *)v8 + 40) = *((_DWORD *)a1 + 3);
      *((void *)v8 + 3459) = *a2;
      v8[8] = a1[23521] != 0;
      *((_DWORD *)v8 + 3) = *((_DWORD *)a1 + 47044);
      LODWORD(v51) = v55;
      if (sub_AE6BC((uint64_t)a1[23509], (long long *)&v51))
      {
        if (sub_D1C38(3u, 4))
        {
          int v10 = sub_D1C7C(3u);
          __uint64_t v11 = sub_DDEFC();
          __uint64_t v12 = (const char *)sub_D1CB0(4);
          if (v10)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread\n", v11, 3, v12, "AVE_USL_Drv_Complete", 1302, "res == 0");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread");
        }
LABEL_30:
        uint64_t v17 = 4294966296;
        goto LABEL_33;
      }
      uint64_t v54 = 0;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      int v51 = (char *)*((unsigned int *)a1 + 47040);
      LODWORD(v54) = v55;
      LODWORD(v53) = 118000;
      *((void *)&v53 + 1) = (uint64_t)sub_DDEFC() / 1000;
      uint64_t v22 = sub_13268((const void **)*a1, &v51, &v49);
      if (!v22)
      {
        int v33 = *v9;
        pthread_mutex_lock(*v9);
        while (1)
        {
          int v34 = *(_DWORD *)v33[3].__opaque;
          if (v34) {
            break;
          }
          gettimeofday((timeval *)&v33[2].__opaque[40], 0);
          uint64_t v35 = (1000 * *(_DWORD *)&v33[2].__opaque[48]);
          *(void *)&v33[2].__opaque[24] = *(void *)&v33[2].__opaque[40] + 120;
          *(void *)&v33[2].__opaque[32] = v35;
          if (pthread_cond_timedwait((pthread_cond_t *)&v33[1], v33, (const timespec *)&v33[2].__opaque[24]) == 60)
          {
            pthread_mutex_unlock(v33);
            if (sub_D1C38(3u, 4))
            {
              int v36 = sub_D1C7C(3u);
              __uint64_t v37 = sub_DDEFC();
              __uint64_t v38 = (const char *)sub_D1CB0(4);
              if (v36)
              {
                printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread\n", v37, 3, v38, "AVE_USL_Drv_Complete", 1331, "res == 0");
                sub_DDEFC();
                sub_D1CB0(4);
              }
              syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread");
            }
            goto LABEL_30;
          }
        }
        unsigned int v39 = *(_DWORD *)&v33[3].__opaque[4];
        uint64_t v40 = *(unsigned int *)(*(void *)&v33[3].__opaque[16] + 40 * v39);
        unsigned int sig_high = HIDWORD(v33[3].__sig);
        if (v39 + 1 < sig_high) {
          unsigned int v42 = v39 + 1;
        }
        else {
          unsigned int v42 = 0;
        }
        *(_DWORD *)v33[3].__opaque = v34 - 1;
        *(_DWORD *)&v33[3].__opaque[4] = v42;
        if (v34 == sig_high) {
          pthread_cond_signal((pthread_cond_t *)&v33[1].__opaque[40]);
        }
        pthread_mutex_unlock(v33);
        if (v40 == v55)
        {
          uint64_t v17 = 0;
          goto LABEL_33;
        }
        if (sub_D1C38(3u, 4))
        {
          int v43 = sub_D1C7C(3u);
          __uint64_t v44 = sub_DDEFC();
          int v45 = (const char *)sub_D1CB0(4);
          if (v43)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: status.counter (%d) != counter (%d).\n", v44, 3, v45, "AVE_USL_Drv_Complete", 1330, "status.counter == counter", v40, v55);
            __uint64_t v44 = sub_DDEFC();
            int v45 = (const char *)sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: status.counter (%d) != counter (%d).", v44, 3, v45, "AVE_USL_Drv_Complete", 1330, "status.counter == counter", v40, v55, v49, v50);
        }
        goto LABEL_30;
      }
      uint64_t v17 = v22;
      uint64_t v23 = (pthread_mutex_t *)a1[23509];
      pthread_mutex_lock(v23);
      int v24 = *(_DWORD *)v23[3].__opaque;
      if (v24)
      {
        *(_DWORD *)v23[3].__opaque = v24 - 1;
        int v25 = *(_DWORD *)&v23[3].__opaque[8];
        if (!v25) {
          int v25 = HIDWORD(v23[3].__sig);
        }
        *(_DWORD *)&v23[3].__opaque[8] = v25 - 1;
      }
      pthread_mutex_unlock(v23);
      if (sub_D1C38(0x28u, 4))
      {
        int v26 = sub_D1C7C(0x28u);
        __uint64_t v27 = sub_DDEFC();
        __uint64_t v28 = (const char *)sub_D1CB0(4);
        if (v26)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to complete %d\n", v27, 40, v28, "AVE_USL_Drv_Complete", 1319, "ret == 0", v17);
          __uint64_t v27 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to complete %d", v27);
      }
    }
    else
    {
      if (sub_D1C38(3u, 4))
      {
        int v18 = sub_D1C7C(3u);
        __uint64_t v19 = sub_DDEFC();
        uint64_t v20 = (const char *)sub_D1CB0(4);
        if (v18)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.\n", v19, 3, v20, "AVE_USL_Drv_Complete", 1280, "Frame");
          __uint64_t v21 = sub_DDEFC();
          int v48 = (const char *)sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.", v21, 3, v48, "AVE_USL_Drv_Complete", 1280, "Frame");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.", v19, 3, v20, "AVE_USL_Drv_Complete", 1280, "Frame");
        }
      }
      uint64_t v17 = 4294966293;
    }
  }
  else
  {
    if (sub_D1C38(3u, 4))
    {
      int v13 = sub_D1C7C(3u);
      __uint64_t v14 = sub_DDEFC();
      char v15 = (const char *)sub_D1CB0(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: H264VideoEncoderVA_DriverEncodeCompleteFrames, Null pointer for driver data.\n", v14, 3, v15, "AVE_USL_Drv_Complete", 1268, "pDriverInstance");
        __uint64_t v16 = sub_DDEFC();
        int v47 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: H264VideoEncoderVA_DriverEncodeCompleteFrames, Null pointer for driver data.", v16, 3, v47, "AVE_USL_Drv_Complete", 1268, "pDriverInstance");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: H264VideoEncoderVA_DriverEncodeCompleteFrames, Null pointer for driver data.", v14, 3, v15, "AVE_USL_Drv_Complete", 1268, "pDriverInstance");
      }
    }
    uint64_t v17 = 4294966295;
  }
LABEL_33:
  if (sub_D1C38(0x28u, 7))
  {
    int v29 = sub_D1C7C(0x28u);
    __uint64_t v30 = sub_DDEFC();
    uint64_t v31 = (const char *)sub_D1CB0(7);
    if (v29)
    {
      printf("%lld %d AVE %s: EXIT H264VideoEncoderVA_DriverEncodeCompleteFrames F %d %d\n", v30, 40, v31, *((_DWORD *)a1 + 3), v17);
      __uint64_t v30 = sub_DDEFC();
      uint64_t v31 = (const char *)sub_D1CB0(7);
    }
    syslog(3, "%lld %d AVE %s: EXIT H264VideoEncoderVA_DriverEncodeCompleteFrames F %d %d", v30, 40, v31, *((_DWORD *)a1 + 3), v17);
  }
  return v17;
}

uint64_t sub_B5104(void **a1, uint64_t a2)
{
  int v168 = -1;
  if (sub_D1C38(0x28u, 7))
  {
    int v4 = sub_D1C7C(0x28u);
    __uint64_t v5 = sub_DDEFC();
    int v6 = (const char *)sub_D1CB0(7);
    if (v4)
    {
      printf("%lld %d AVE %s: ENTER H264VideoEncoderVA_DriverEncodeFrame\n", v5, 40, v6);
      __uint64_t v7 = sub_DDEFC();
      uint64_t v146 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: ENTER H264VideoEncoderVA_DriverEncodeFrame", v7, 40, v146);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: ENTER H264VideoEncoderVA_DriverEncodeFrame", v5, 40, v6);
    }
  }
  if (!a1)
  {
    if (sub_D1C38(3u, 4))
    {
      int v14 = sub_D1C7C(3u);
      __uint64_t v15 = sub_DDEFC();
      __uint64_t v16 = (const char *)sub_D1CB0(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: H264VideoEncoderVA_DriverEncodeFrame, Null pointer for driver data.\n", v15, 3, v16, "AVE_USL_Drv_Process", 1352, "pDriverInstance");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: H264VideoEncoderVA_DriverEncodeFrame, Null pointer for driver data.");
    }
    goto LABEL_70;
  }
  if (!a2)
  {
    if (sub_D1C38(3u, 4))
    {
      int v17 = sub_D1C7C(3u);
      __uint64_t v18 = sub_DDEFC();
      __uint64_t v19 = (const char *)sub_D1CB0(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: H264VideoEncoderVA_DriverEncodeFrame, Null pointer for pSettings.\n", v18, 3, v19, "AVE_USL_Drv_Process", 1353, "pSettings");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: H264VideoEncoderVA_DriverEncodeFrame, Null pointer for pSettings.");
    }
    goto LABEL_70;
  }
  if (!*((unsigned char *)a1 + 8))
  {
    if (sub_D1C38(3u, 4))
    {
      int v20 = sub_D1C7C(3u);
      __uint64_t v21 = sub_DDEFC();
      uint64_t v22 = (const char *)sub_D1CB0(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: H264VideoEncoderVA_DriverEncodeFrame, encoder has not been init-ed.\n", v21, 3, v22, "AVE_USL_Drv_Process", 1354, "pDriverInstance->EncoderInited == true");
        __uint64_t v23 = sub_DDEFC();
        __uint64_t v148 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: H264VideoEncoderVA_DriverEncodeFrame, encoder has not been init-ed.", v23, 3, v148, "AVE_USL_Drv_Process", 1354, "pDriverInstance->EncoderInited == true");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: H264VideoEncoderVA_DriverEncodeFrame, encoder has not been init-ed.", v21, 3, v22, "AVE_USL_Drv_Process", 1354, "pDriverInstance->EncoderInited == true");
      }
    }
    uint64_t v27 = 4294966285;
    goto LABEL_71;
  }
  if (!*(void *)(a2 + 24))
  {
    if (sub_D1C38(3u, 4))
    {
      int v24 = sub_D1C7C(3u);
      __uint64_t v25 = sub_DDEFC();
      int v26 = (const char *)sub_D1CB0(4);
      if (v24)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: pSettings->CVImageBuffer == NULL\n", v25, 3, v26, "AVE_USL_Drv_Process", 1355, "pSettings->CVImageBuffer");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: pSettings->CVImageBuffer == NULL");
    }
    goto LABEL_70;
  }
  uint64_t v8 = a1 + 23509;
  if (*((_DWORD *)a1 + 47041) != 3) {
    goto LABEL_35;
  }
  if (!*(void *)(a2 + 40))
  {
    if (sub_D1C38(3u, 4))
    {
      int v28 = sub_D1C7C(3u);
      __uint64_t v29 = sub_DDEFC();
      __uint64_t v30 = (const char *)sub_D1CB0(4);
      if (v28)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: pSettings->CVImageBufferOutput == NULL\n", v29, 3, v30, "AVE_USL_Drv_Process", 1359, "pSettings->CVImageBufferOutput");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: pSettings->CVImageBufferOutput == NULL");
    }
LABEL_70:
    uint64_t v27 = 4294966295;
    goto LABEL_71;
  }
  if (sub_D1C38(0x28u, 7))
  {
    int v9 = sub_D1C7C(0x28u);
    __uint64_t v10 = sub_DDEFC();
    __uint64_t v11 = (const char *)sub_D1CB0(7);
    __uint64_t v12 = *(const void **)(a2 + 40);
    if (v9)
    {
      printf("%lld %d AVE %s: pSettings->CVImageBufferOutput = %p\n", v10, 40, v11, v12);
      __uint64_t v13 = sub_DDEFC();
      BOOL v147 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: pSettings->CVImageBufferOutput = %p", v13, 40, v147, *(const void **)(a2 + 40));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: pSettings->CVImageBufferOutput = %p", v10, 40, v11, v12);
    }
  }
LABEL_35:
  long long v169 = 0;
  sub_FD00(*a1, 67360, &v169);
  sub_109C4(*a1, v169, &v168);
  uint64_t v31 = v169;
  if (v169)
  {
    bzero(v169 + 8, 0x10718uLL);
    *(_DWORD *)uint64_t v31 = v168;
    *((_DWORD *)v31 + 1) = 7;
    *((_DWORD *)v31 + 40) = *((_DWORD *)a1 + 3);
    *((_DWORD *)v31 + 42) = *(_DWORD *)(a2 + 212);
    v31[8] = a1[23521] != 0;
    *((_DWORD *)v31 + 3) = *((_DWORD *)a1 + 47044);
    *(_OWORD *)(v31 + 296) = *(_OWORD *)a2;
    *((void *)v31 + 39) = *(void *)(a2 + 16);
    IOSurface = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(a2 + 24));
    *((_DWORD *)v31 + 68) = IOSurfaceGetID(IOSurface);
    int v33 = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(a2 + 32));
    *((_DWORD *)v31 + 69) = IOSurfaceGetID(v33);
    int v34 = *(__CVBuffer **)(*(void *)(a2 + 152) + 19184);
    if (v34)
    {
      uint64_t v35 = CVPixelBufferGetIOSurface(v34);
      *((_DWORD *)v31 + 70) = IOSurfaceGetID(v35);
    }
    if (*((_DWORD *)a1 + 47041) == 3)
    {
      long long v36 = *(_OWORD *)(a2 + 40);
      *((_OWORD *)v31 + 20) = v36;
      __uint64_t v37 = CVPixelBufferGetIOSurface((CVPixelBufferRef)v36);
      *((_DWORD *)v31 + 71) = IOSurfaceGetID(v37);
      __uint64_t v38 = *(__CVBuffer **)(a2 + 48);
      if (v38)
      {
        unsigned int v39 = CVPixelBufferGetIOSurface(v38);
        *((_DWORD *)v31 + 72) = IOSurfaceGetID(v39);
      }
    }
    uint64_t v40 = (char *)a1 + 18364;
    *((void *)v31 + 42) = *(void *)(a2 + 56);
    v31[344] = *(unsigned char *)(a2 + 64);
    __uint64_t v41 = v31 + 2296;
    long long v42 = *(_OWORD *)(a2 + 80);
    *((void *)v31 + 289) = *(void *)(a2 + 96);
    *(_OWORD *)(v31 + 2296) = v42;
    long long v43 = *(_OWORD *)(a2 + 104);
    *((void *)v31 + 292) = *(void *)(a2 + 120);
    *((_OWORD *)v31 + 145) = v43;
    *(_OWORD *)(v31 + 2344) = *(_OWORD *)(a2 + 128);
    *((void *)v31 + 3459) = *(void *)(a2 + 168);
    uint64_t v44 = *(void *)(a2 + 144);
    uint64_t v45 = *(void *)(v44 + 80);
    long long v46 = *(_OWORD *)(v44 + 64);
    long long v47 = *(_OWORD *)(v44 + 32);
    *((_OWORD *)v31 + 151) = *(_OWORD *)(v44 + 48);
    *((_OWORD *)v31 + 152) = v46;
    *((void *)v31 + 306) = v45;
    long long v48 = *(_OWORD *)(v44 + 16);
    *((_OWORD *)v31 + 148) = *(_OWORD *)v44;
    *((_OWORD *)v31 + 149) = v48;
    *((_OWORD *)v31 + 150) = v47;
    *((_DWORD *)v31 + 6731) = 0;
    uint64_t v49 = *(unsigned int *)(a2 + 192);
    if ((int)v49 >= 1)
    {
      memcpy(v31 + 26928, *(const void **)(a2 + 184), v49 << 6);
      *((_DWORD *)v31 + 6731) = *(_DWORD *)(a2 + 192);
    }
    memcpy(v31 + 2456, *(const void **)(a2 + 152), 0x4AF8uLL);
    if (*((_DWORD *)a1 + 55) == 1)
    {
      if (*((unsigned char *)a1 + 20139))
      {
        CFDictionaryRef v50 = *(const __CFDictionary **)(a2 + 72);
        if (v50)
        {
          if (*((_DWORD *)a1 + 5071))
          {
            if (!a1[23523])
            {
              if (sub_D1C38(0x28u, 4))
              {
                int v81 = sub_D1C7C(0x28u);
                __uint64_t v82 = sub_DDEFC();
                uint64_t v83 = (const char *)sub_D1CB0(4);
                if (v81)
                {
                  printf("%lld %d AVE %s: %s:%d %s | fail to get VCP %p\n", v82, 40, v83, "AVE_USL_Drv_Process", 1464, "pDriverInstance->pcVCP != __null", a1);
                  __uint64_t v82 = sub_DDEFC();
                  sub_D1CB0(4);
                }
                syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get VCP %p", v82);
              }
              uint64_t v27 = 4294966281;
              goto LABEL_148;
            }
            CFMutableDataRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
            if (!Mutable)
            {
              if (sub_D1C38(0x28u, 4))
              {
                int v90 = sub_D1C7C(0x28u);
                __uint64_t v91 = sub_DDEFC();
                uint64_t v92 = (const char *)sub_D1CB0(4);
                if (v90)
                {
                  printf("%lld %d AVE %s: %s:%d %s | fail to create CFArray\n", v91, 40, v92, "AVE_USL_Drv_Process", 1468, "refInfo != __null");
                  __uint64_t v93 = sub_DDEFC();
                  __uint64_t v152 = (const char *)sub_D1CB0(4);
                  syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v93, 40, v152, "AVE_USL_Drv_Process", 1468, "refInfo != __null");
                }
                else
                {
                  syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v91, 40, v92, "AVE_USL_Drv_Process", 1468, "refInfo != __null");
                }
              }
              uint64_t v27 = 4294966293;
              goto LABEL_148;
            }
            long long v52 = Mutable;
            sub_DBE08(v31 + 2688, v31[2676], Mutable);
            sub_7BB4(a1[23523], *(const void **)(a2 + 72), v52);
            CFRelease(v52);
            CFDictionaryRef v50 = *(const __CFDictionary **)(a2 + 72);
          }
          sub_DABF0(v50, (_DWORD *)v31 + 230);
        }
      }
    }
    sub_AF314((uint64_t)a1, (uint64_t)(a1 + 15), (uint64_t)v31, (uint64_t)(a1 + 2));
    long long v53 = (uint64_t *)(a1 + 9);
    uint64_t v54 = sub_BF3D8((_DWORD *)a1 + 4, *((_DWORD *)a1 + 47040), a1 + 8, a1 + 9);
    if (v54)
    {
      uint64_t v27 = v54;
      if (sub_D1C38(0x28u, 4))
      {
        int v55 = sub_D1C7C(0x28u);
        __uint64_t v56 = sub_DDEFC();
        __uint64_t v57 = (const char *)sub_D1CB0(4);
        if (v55)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create surfaces %d %d\n", v56, 40, v57, "AVE_USL_Drv_Process", 1491, "ret == 0", *((_DWORD *)a1 + 47040), *((_DWORD *)v31 + 40));
          __uint64_t v56 = sub_DDEFC();
          __uint64_t v57 = (const char *)sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create surfaces %d %d", v56, 40, v57, "AVE_USL_Drv_Process", 1491, "ret == 0", *((unsigned int *)a1 + 47040), *((unsigned int *)v31 + 40));
      }
LABEL_148:
      int v140 = *(const void **)(a2 + 56);
      if (v140)
      {
        CFRelease(v140);
        *(void *)(a2 + 56) = 0;
      }
      goto LABEL_71;
    }
    uint64_t v62 = *v53;
    if (*v53 && *((void *)v31 + 331))
    {
      int v63 = *((_DWORD *)a1 + 4672);
      if (v63 == 1)
      {
        int v84 = sub_BC8EC(v62, 0);
        memcpy(v84, *((const void **)v31 + 331), 32 * ((*((_DWORD *)a1 + 453) + 31) >> 5) * ((*((_DWORD *)a1 + 452) + 31) >> 5));
      }
      else
      {
        if (v63)
        {
          if (sub_D1C38(0x28u, 4))
          {
            int v85 = sub_D1C7C(0x28u);
            __uint64_t v86 = sub_DDEFC();
            int v87 = (const char *)sub_D1CB0(4);
            int v88 = *((_DWORD *)a1 + 4672);
            if (v85)
            {
              printf("%lld %d AVE %s: wrong codec type %d\n", v86, 40, v87, v88);
              __uint64_t v89 = sub_DDEFC();
              int v151 = (const char *)sub_D1CB0(4);
              syslog(3, "%lld %d AVE %s: wrong codec type %d", v89, 40, v151, *((_DWORD *)a1 + 4672));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: wrong codec type %d", v86, 40, v87, v88);
            }
          }
          if (sub_D1C38(0x28u, 4))
          {
            int v94 = sub_D1C7C(0x28u);
            __uint64_t v95 = sub_DDEFC();
            int v96 = (const char *)sub_D1CB0(4);
            if (v94)
            {
              printf("%lld %d AVE %s: %s:%d %s | fail to prepare MB input control %d %d\n", v95, 40, v96, "AVE_USL_Drv_Process", 1496, "ret == 0", *((_DWORD *)a1 + 47040), *((_DWORD *)v31 + 40));
              __uint64_t v95 = sub_DDEFC();
              sub_D1CB0(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to prepare MB input control %d %d", v95);
          }
          uint64_t v27 = 4294966295;
          goto LABEL_148;
        }
        __uint64_t v64 = sub_BC8EC(v62, 0);
        unsigned int v165 = *((_DWORD *)a1 + 452) + 15;
        unsigned int v65 = *((_DWORD *)a1 + 453) + 15;
        unsigned int v66 = v65 >> 4;
        unsigned int v166 = v165 >> 4;
        int v164 = v64;
        memcpy(v64, *((const void **)v31 + 331), 16 * (v65 >> 4) * (v165 >> 4));
        if (sub_D1C38(0xBu, 7))
        {
          if (sub_D1C38(0xBu, 7))
          {
            unsigned int v72 = v65;
            int v73 = sub_D1C7C(0xBu);
            __uint64_t v74 = sub_DDEFC();
            char v75 = (const char *)sub_D1CB0(7);
            if (v73)
            {
              printf("%lld %d AVE %s: QPMap:\n", v74, 11, v75);
              __uint64_t v76 = sub_DDEFC();
              uint64_t v150 = (const char *)sub_D1CB0(7);
              syslog(3, "%lld %d AVE %s: QPMap:", v76, 11, v150);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: QPMap:", v74, 11, v75);
            }
            unsigned int v65 = v72;
          }
          unsigned int v160 = v65;
          unsigned int v161 = v66;
          if (v65 >= 0x10)
          {
            unsigned int v97 = 0;
            uint64_t v98 = 0;
            if (v166 <= 1) {
              uint64_t v99 = 1;
            }
            else {
              uint64_t v99 = v166;
            }
            if (v161 <= 1) {
              uint64_t v100 = 1;
            }
            else {
              uint64_t v100 = v161;
            }
            uint64_t v162 = v100;
            uint64_t v101 = v99 + 2 * v99;
            do
            {
              if (v165 >= 0x10)
              {
                uint64_t v102 = 0;
                BOOL v103 = (unsigned __int16 *)((char *)v164 + 16 * v97);
                __uint64_t v104 = (char *)&v169;
                do
                {
                  unsigned int v105 = *v103;
                  v103 += 8;
                  sub_DD92C(v104, v102 + 512, "%2d ", v67, v68, v69, v70, v71, v105 >> 10);
                  v102 -= 3;
                  v104 += 3;
                }
                while (v101 + v102);
              }
              if (sub_D1C38(0xBu, 7))
              {
                int v106 = sub_D1C7C(0xBu);
                __uint64_t v107 = sub_DDEFC();
                long long v108 = (const char *)sub_D1CB0(7);
                if (v106)
                {
                  printf("%lld %d AVE %s: mbrow %2d: %s\n", v107, 11, v108, v98, (const char *)&v169);
                  __uint64_t v109 = sub_DDEFC();
                  int v153 = (const char *)sub_D1CB0(7);
                  syslog(3, "%lld %d AVE %s: mbrow %2d: %s", v109, 11, v153, v98, (const char *)&v169);
                }
                else
                {
                  syslog(3, "%lld %d AVE %s: mbrow %2d: %s", v107, 11, v108, v98, (const char *)&v169);
                }
              }
              ++v98;
              v97 += v166;
            }
            while (v98 != v162);
          }
          if (sub_D1C38(0xBu, 7))
          {
            int v115 = sub_D1C7C(0xBu);
            __uint64_t v116 = sub_DDEFC();
            int v117 = (const char *)sub_D1CB0(7);
            if (v115)
            {
              printf("%lld %d AVE %s: MDBias:\n", v116, 11, v117);
              __uint64_t v118 = sub_DDEFC();
              uint64_t v154 = (const char *)sub_D1CB0(7);
              syslog(3, "%lld %d AVE %s: MDBias:", v118, 11, v154);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: MDBias:", v116, 11, v117);
            }
          }
          if (v160 >= 0x10)
          {
            unsigned int v119 = 0;
            uint64_t v120 = 0;
            if (v166 <= 1) {
              uint64_t v121 = 1;
            }
            else {
              uint64_t v121 = v166;
            }
            if (v161 <= 1) {
              uint64_t v122 = 1;
            }
            else {
              uint64_t v122 = v161;
            }
            uint64_t v163 = v122;
            uint64_t v123 = v121 + 2 * v121;
            do
            {
              if (v165 >= 0x10)
              {
                uint64_t v124 = 0;
                long long v125 = (__int16 *)((char *)v164 + 16 * v119);
                int v126 = (char *)&v169;
                do
                {
                  __int16 v127 = *v125;
                  v125 += 8;
                  sub_DD92C(v126, v124 + 512, "%2x ", v110, v111, v112, v113, v114, v127 & 3);
                  v124 -= 3;
                  v126 += 3;
                }
                while (v123 + v124);
              }
              if (sub_D1C38(0xBu, 7))
              {
                int v128 = sub_D1C7C(0xBu);
                __uint64_t v129 = sub_DDEFC();
                BOOL v130 = (const char *)sub_D1CB0(7);
                if (v128)
                {
                  printf("%lld %d AVE %s: mbrow %2d: %s\n", v129, 11, v130, v120, (const char *)&v169);
                  __uint64_t v131 = sub_DDEFC();
                  uint64_t v155 = (const char *)sub_D1CB0(7);
                  syslog(3, "%lld %d AVE %s: mbrow %2d: %s", v131, 11, v155, v120, (const char *)&v169);
                }
                else
                {
                  syslog(3, "%lld %d AVE %s: mbrow %2d: %s", v129, 11, v130, v120, (const char *)&v169);
                }
              }
              ++v120;
              v119 += v166;
            }
            while (v120 != v163);
          }
          uint64_t v40 = (char *)a1 + 18364;
          uint64_t v8 = a1 + 23509;
          long long v53 = (uint64_t *)(a1 + 9);
          __uint64_t v41 = v31 + 2296;
        }
      }
    }
    sub_B65B4((uint64_t)a1, (uint64_t)v31);
    sub_BF350(v53, (_DWORD *)v31 + 66);
    LODWORD(v169) = v168;
    long long v170 = *(_OWORD *)v41;
    *(void *)&long long v171 = *((void *)v41 + 2);
    if (sub_AE6BC((uint64_t)*v8, (long long *)&v169))
    {
      if (sub_D1C38(3u, 4))
      {
        int v132 = sub_D1C7C(3u);
        __uint64_t v133 = sub_DDEFC();
        int v134 = (const char *)sub_D1CB0(4);
        if (v132)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread\n", v133, 3, v134, "AVE_USL_Drv_Process", 1516, "res == 0");
          __uint64_t v135 = sub_DDEFC();
          uint64_t v156 = (const char *)sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread", v135, 3, v156, "AVE_USL_Drv_Process", 1516, "res == 0");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread", v133, 3, v134, "AVE_USL_Drv_Process", 1516, "res == 0");
        }
      }
      uint64_t v27 = 4294966296;
      goto LABEL_148;
    }
    uint64_t v172 = 0;
    long long v171 = 0u;
    long long v170 = 0u;
    memset(v167, 0, sizeof(v167));
    long long v169 = (char *)*((unsigned int *)v8 + 22);
    LODWORD(v172) = v168;
    *((void *)&v170 + 1) = *((unsigned int *)v31 + 40);
    LODWORD(v171) = 58000;
    *((void *)&v171 + 1) = (uint64_t)sub_DDEFC() / 1000;
    *((void *)v31 + 3462) = sub_DDEFC();
    uint64_t v136 = sub_12E2C((const void **)*a1, &v169, v167);
    if (v136)
    {
      uint64_t v27 = v136;
      sub_B1C9C((uint64_t)*v8);
      if (sub_D1C38(0x28u, 4))
      {
        int v137 = sub_D1C7C(0x28u);
        __uint64_t v138 = sub_DDEFC();
        __uint64_t v139 = (const char *)sub_D1CB0(4);
        if (v137)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to process %d\n", v138, 40, v139, "AVE_USL_Drv_Process", 1537, "ret == 0", v27);
          __uint64_t v138 = sub_DDEFC();
          uint64_t v159 = v27;
          uint64_t v157 = sub_D1CB0(4);
        }
        else
        {
          uint64_t v159 = v27;
          uint64_t v157 = (void *)v139;
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to process %d", v138, 40, v157, "AVE_USL_Drv_Process", 1537, "ret == 0", v159);
      }
      goto LABEL_148;
    }
    int v141 = *((_DWORD *)a1 + 3) + 1;
    *((_DWORD *)a1 + 3) = v141;
    if (!*(unsigned char *)(a2 + 160) && v141 != *(_DWORD *)v40
      || v40[413]
      || (*((unsigned char *)a1 + 1804) & 0xE0) != 0
      || (*((_DWORD *)v8 + 23) & 0xFFFFFFFE) == 2)
    {
      uint64_t v27 = 0;
    }
    else
    {
      long long v169 = (char *)sub_DDEFC();
      uint64_t v27 = sub_B490C(a1, &v169);
      if (v27 && sub_D1C38(3u, 4))
      {
        int v142 = sub_D1C7C(3u);
        __uint64_t v143 = sub_DDEFC();
        BOOL v144 = (const char *)sub_D1CB0(4);
        if (v142)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Complete call FAILED.\n", v143, 3, v144, "AVE_USL_Drv_Process", 1565, "ret == 0");
          __uint64_t v145 = sub_DDEFC();
          unsigned int v158 = (const char *)sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Complete call FAILED.", v145, 3, v158, "AVE_USL_Drv_Process", 1565, "ret == 0");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Complete call FAILED.", v143, 3, v144, "AVE_USL_Drv_Process", 1565, "ret == 0");
        }
      }
    }
  }
  else
  {
    if (sub_D1C38(3u, 4))
    {
      int v58 = sub_D1C7C(3u);
      __uint64_t v59 = sub_DDEFC();
      __uint64_t v60 = (const char *)sub_D1CB0(4);
      if (v58)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: mach_timebase_info info = NULL.\n", v59, 3, v60, "AVE_USL_Drv_Process", 1376, "Frame");
        __uint64_t v61 = sub_DDEFC();
        int v149 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: mach_timebase_info info = NULL.", v61, 3, v149, "AVE_USL_Drv_Process", 1376, "Frame");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: mach_timebase_info info = NULL.", v59, 3, v60, "AVE_USL_Drv_Process", 1376, "Frame");
      }
    }
    uint64_t v27 = 4294966293;
  }
LABEL_71:
  sub_BF6BC((uint64_t)(a1 + 9));
  if (sub_D1C38(0x28u, 7))
  {
    int v77 = sub_D1C7C(0x28u);
    __uint64_t v78 = sub_DDEFC();
    long long v79 = (const char *)sub_D1CB0(7);
    if (v77)
    {
      printf("%lld %d AVE %s: EXIT H264VideoEncoderVA_DriverEncodeFrame frame number %d. %d\n", v78, 40, v79, *((_DWORD *)a1 + 3) - 1, v27);
      __uint64_t v78 = sub_DDEFC();
      long long v79 = (const char *)sub_D1CB0(7);
    }
    syslog(3, "%lld %d AVE %s: EXIT H264VideoEncoderVA_DriverEncodeFrame frame number %d. %d", v78, 40, v79, *((_DWORD *)a1 + 3) - 1, v27);
  }
  return v27;
}

void sub_B65B4(uint64_t a1, uint64_t a2)
{
  int v4 = (uint64_t *)(a1 + 188056);
  __uint64_t v5 = (_DWORD *)(a1 + 18328);
  if (!*(_DWORD *)(a1 + 188176) && *v5 != 2) {
    return;
  }
  *__uint64_t v5 = 2;
  *(_DWORD *)(a2 + 16) = 2;
  sub_9BE48(*v4, *(_DWORD *)(a1 + 18344));
  size_t v6 = *(unsigned int *)(a1 + 60);
  __uint64_t v7 = sub_BC8EC(*(void *)(a1 + 80), 0);
  uint64_t v8 = v7;
  int v9 = *(const void **)(a2 + 21632);
  if (v9)
  {
    *(unsigned char *)(a2 + 8) = 1;
LABEL_7:
    memcpy(v7, v9, v6);
    return;
  }
  __uint64_t v10 = (_DWORD *)(a2 + 21366);
  sub_9BE30(*v4, (void *)(a2 + 21366));
  __uint64_t v11 = (const void *)(a2 + 4052);
  if (*(_DWORD *)(a1 + 12))
  {
    *(unsigned char *)(a2 + 2464) = 0;
    memcpy(v8, (const void *)(a2 + 21366), 0x108uLL);
    __uint64_t v7 = (__IOSurface *)((char *)v8 + 264);
    int v9 = (const void *)(a2 + 4052);
    goto LABEL_7;
  }
  if (sub_D1C38(0xD8u, 6))
  {
    int v12 = sub_D1C7C(0xD8u);
    __uint64_t v13 = sub_DDEFC();
    int v14 = (const char *)sub_D1CB0(6);
    if (v12)
    {
      printf("%lld %d AVE %s: ------ Sequence RC Info ------\n", v13, 216, v14);
      __uint64_t v15 = sub_DDEFC();
      long long v80 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: ------ Sequence RC Info ------", v15, 216, v80);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: ------ Sequence RC Info ------", v13, 216, v14);
    }
  }
  if (sub_D1C38(0xD8u, 6))
  {
    int v16 = sub_D1C7C(0xD8u);
    __uint64_t v17 = sub_DDEFC();
    __uint64_t v18 = (const char *)sub_D1CB0(6);
    int v19 = *v10;
    if (v16)
    {
      printf("%lld %d AVE %s:  total_scenes %u\n", v17, 216, v18, v19);
      __uint64_t v20 = sub_DDEFC();
      int v81 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s:  total_scenes %u", v20, 216, v81, *v10);
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  total_scenes %u", v17, 216, v18, v19);
    }
  }
  if (sub_D1C38(0xD8u, 6))
  {
    int v21 = sub_D1C7C(0xD8u);
    __uint64_t v22 = sub_DDEFC();
    __uint64_t v23 = (const char *)sub_D1CB0(6);
    int v24 = v10[1];
    if (v21)
    {
      printf("%lld %d AVE %s:  cnt_All %u\n", v22, 216, v23, v24);
      __uint64_t v25 = sub_DDEFC();
      __uint64_t v82 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s:  cnt_All %u", v25, 216, v82, v10[1]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  cnt_All %u", v22, 216, v23, v24);
    }
  }
  if (sub_D1C38(0xD8u, 6))
  {
    int v26 = sub_D1C7C(0xD8u);
    __uint64_t v27 = sub_DDEFC();
    int v28 = (const char *)sub_D1CB0(6);
    uint64_t v29 = *((void *)v10 + 1);
    if (v26)
    {
      printf("%lld %d AVE %s:  bits_All %llu\n", v27, 216, v28, v29);
      __uint64_t v30 = sub_DDEFC();
      uint64_t v83 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s:  bits_All %llu", v30, 216, v83, *((void *)v10 + 1));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  bits_All %llu", v27, 216, v28, v29);
    }
  }
  if (sub_D1C38(0xD8u, 6))
  {
    int v31 = sub_D1C7C(0xD8u);
    __uint64_t v32 = sub_DDEFC();
    int v33 = (const char *)sub_D1CB0(6);
    int v34 = v10[7];
    if (v31)
    {
      printf("%lld %d AVE %s:  cnt_NORMAL %u\n", v32, 216, v33, v34);
      __uint64_t v35 = sub_DDEFC();
      int v84 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s:  cnt_NORMAL %u", v35, 216, v84, v10[7]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  cnt_NORMAL %u", v32, 216, v33, v34);
    }
  }
  if (sub_D1C38(0xD8u, 6))
  {
    int v36 = sub_D1C7C(0xD8u);
    __uint64_t v37 = sub_DDEFC();
    __uint64_t v38 = (const char *)sub_D1CB0(6);
    uint64_t v39 = *((void *)v10 + 4);
    if (v36)
    {
      printf("%lld %d AVE %s:  bits_NORMAL %llu\n", v37, 216, v38, v39);
      __uint64_t v40 = sub_DDEFC();
      int v85 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s:  bits_NORMAL %llu", v40, 216, v85, *((void *)v10 + 4));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  bits_NORMAL %llu", v37, 216, v38, v39);
    }
  }
  if (sub_D1C38(0xD8u, 6))
  {
    int v41 = sub_D1C7C(0xD8u);
    __uint64_t v42 = sub_DDEFC();
    long long v43 = (const char *)sub_D1CB0(6);
    int v44 = v10[10];
    if (v41)
    {
      printf("%lld %d AVE %s:  cnt_MIN %u\n", v42, 216, v43, v44);
      __uint64_t v45 = sub_DDEFC();
      __uint64_t v86 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s:  cnt_MIN %u", v45, 216, v86, v10[10]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  cnt_MIN %u", v42, 216, v43, v44);
    }
  }
  if (sub_D1C38(0xD8u, 6))
  {
    int v46 = sub_D1C7C(0xD8u);
    __uint64_t v47 = sub_DDEFC();
    long long v48 = (const char *)sub_D1CB0(6);
    uint64_t v49 = *(void *)(v10 + 11);
    if (v46)
    {
      printf("%lld %d AVE %s:  bits_MIN %llu\n", v47, 216, v48, v49);
      __uint64_t v50 = sub_DDEFC();
      int v87 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s:  bits_MIN %llu", v50, 216, v87, *(void *)(v10 + 11));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  bits_MIN %llu", v47, 216, v48, v49);
    }
  }
  if (sub_D1C38(0xD8u, 6))
  {
    int v51 = sub_D1C7C(0xD8u);
    __uint64_t v52 = sub_DDEFC();
    long long v53 = (const char *)sub_D1CB0(6);
    int v54 = v10[13];
    if (v51)
    {
      printf("%lld %d AVE %s:  cnt_MAX %u\n", v52, 216, v53, v54);
      __uint64_t v55 = sub_DDEFC();
      int v88 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s:  cnt_MAX %u", v55, 216, v88, v10[13]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  cnt_MAX %u", v52, 216, v53, v54);
    }
  }
  if (sub_D1C38(0xD8u, 6))
  {
    int v56 = sub_D1C7C(0xD8u);
    __uint64_t v57 = sub_DDEFC();
    int v58 = (const char *)sub_D1CB0(6);
    uint64_t v59 = *((void *)v10 + 7);
    if (v56)
    {
      printf("%lld %d AVE %s:  bits_MAX %llu\n", v57, 216, v58, v59);
      __uint64_t v60 = sub_DDEFC();
      __uint64_t v89 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s:  bits_MAX %llu", v60, 216, v89, *((void *)v10 + 7));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  bits_MAX %llu", v57, 216, v58, v59);
    }
  }
  if (sub_D1C38(0xD8u, 6))
  {
    int v61 = sub_D1C7C(0xD8u);
    __uint64_t v62 = sub_DDEFC();
    int v63 = (const char *)sub_D1CB0(6);
    int v64 = v10[16];
    if (v61)
    {
      printf("%lld %d AVE %s:  cnt_BLANK %u\n", v62, 216, v63, v64);
      __uint64_t v65 = sub_DDEFC();
      int v90 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s:  cnt_BLANK %u", v65, 216, v90, v10[16]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  cnt_BLANK %u", v62, 216, v63, v64);
    }
  }
  sub_9BE30(*v4, v10);
  memcpy(v8, v10, 0x108uLL);
  memcpy((char *)v8 + 264, v11, v6);
  for (int i = 0; i != 11; ++i)
  {
    if (sub_D1C38(0xD8u, 6))
    {
      int v67 = sub_D1C7C(0xD8u);
      __uint64_t v68 = sub_DDEFC();
      uint64_t v69 = (const char *)sub_D1CB0(6);
      int v70 = *((_DWORD *)v8 + 371);
      uint64_t v71 = *(void *)((char *)v8 + 1492);
      uint64_t v72 = *(void *)((char *)v8 + 1508);
      uint64_t v73 = *(void *)((char *)v8 + 1516);
      uint64_t v74 = *(void *)((char *)v8 + 1524);
      double v75 = *(double *)((char *)v8 + 1532);
      double v76 = *(double *)((char *)v8 + 1540);
      double v77 = *((float *)v8 + 388);
      if (v67)
      {
        printf("%lld %d AVE %s: frame %u: cnt %d, bits %llu, %llu, %llu, %llu; QScale: %f, %f, %f, %f\n",
          v68,
          216,
          v69,
          i,
          v70,
          v71,
          v72,
          v73,
          v74,
          v75,
          v76,
          *((float *)v8 + 387),
          v77);
        __uint64_t v78 = sub_DDEFC();
        long long v79 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: frame %u: cnt %d, bits %llu, %llu, %llu, %llu; QScale: %f, %f, %f, %f",
          v78,
          216,
          v79,
          i,
          *((_DWORD *)v8 + 371),
          *(void *)((char *)v8 + 1492),
          *(void *)((char *)v8 + 1508),
          *(void *)((char *)v8 + 1516),
          *(void *)((char *)v8 + 1524),
          *(double *)((char *)v8 + 1532),
          *(double *)((char *)v8 + 1540),
          *((float *)v8 + 387),
          *((float *)v8 + 388));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: frame %u: cnt %d, bits %llu, %llu, %llu, %llu; QScale: %f, %f, %f, %f",
          v68,
          216,
          v69,
          i,
          v70,
          v71,
          v72,
          v73,
          v74,
          v75,
          v76,
          *((float *)v8 + 387),
          v77);
      }
    }
    uint64_t v8 = (__IOSurface *)((char *)v8 + 1574);
  }
}

uint64_t sub_B6E0C(uint64_t a1, int a2)
{
  if (sub_D1C38(0x28u, 7))
  {
    int v4 = sub_D1C7C(0x28u);
    __uint64_t v5 = sub_DDEFC();
    size_t v6 = (const char *)sub_D1CB0(7);
    if (v4)
    {
      printf("%lld %d AVE %s: ENTER AVE_USL_Drv_SetInternalThreadPriority.\n", v5, 40, v6);
      __uint64_t v7 = sub_DDEFC();
      __uint64_t v17 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: ENTER AVE_USL_Drv_SetInternalThreadPriority.", v7, 40, v17);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: ENTER AVE_USL_Drv_SetInternalThreadPriority.", v5, 40, v6);
    }
  }
  if (a1)
  {
    if (*(unsigned char *)(a1 + 8)) {
      sub_9C680(*(void *)(a1 + 188056), a2);
    }
    uint64_t v8 = 0;
  }
  else
  {
    if (sub_D1C38(3u, 4))
    {
      int v9 = sub_D1C7C(3u);
      __uint64_t v10 = sub_DDEFC();
      __uint64_t v11 = (const char *)sub_D1CB0(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: AVE_USL_Drv_SetInternalThreadPriority, Null pointer for driver data.\n", v10, 3, v11, "AVE_USL_Drv_SetInternalThreadPriority", 1597, "pDriverInstance");
        __uint64_t v12 = sub_DDEFC();
        __uint64_t v18 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: AVE_USL_Drv_SetInternalThreadPriority, Null pointer for driver data.", v12, 3, v18, "AVE_USL_Drv_SetInternalThreadPriority", 1597, "pDriverInstance");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: AVE_USL_Drv_SetInternalThreadPriority, Null pointer for driver data.", v10, 3, v11, "AVE_USL_Drv_SetInternalThreadPriority", 1597, "pDriverInstance");
      }
    }
    uint64_t v8 = 4294966295;
  }
  if (sub_D1C38(0x28u, 7))
  {
    int v13 = sub_D1C7C(0x28u);
    __uint64_t v14 = sub_DDEFC();
    __uint64_t v15 = (const char *)sub_D1CB0(7);
    if (v13)
    {
      printf("%lld %d AVE %s: EXIT AVE_USL_Drv_SetInternalThreadPriority frame number %d. %d\n", v14, 40, v15, *(_DWORD *)(a1 + 12), v8);
      __uint64_t v14 = sub_DDEFC();
      __uint64_t v15 = (const char *)sub_D1CB0(7);
    }
    syslog(3, "%lld %d AVE %s: EXIT AVE_USL_Drv_SetInternalThreadPriority frame number %d. %d", v14, 40, v15, *(_DWORD *)(a1 + 12), v8);
  }
  return v8;
}

uint64_t sub_B7040(void **a1, int a2)
{
  int v56 = -1;
  if (sub_D1C38(0x28u, 7))
  {
    int v4 = sub_D1C7C(0x28u);
    __uint64_t v5 = sub_DDEFC();
    size_t v6 = (const char *)sub_D1CB0(7);
    if (v4)
    {
      printf("%lld %d AVE %s: ENTER AVE_USL_Drv_Reset.\n", v5, 40, v6);
      __uint64_t v7 = sub_DDEFC();
      __uint64_t v45 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: ENTER AVE_USL_Drv_Reset.", v7, 40, v45);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: ENTER AVE_USL_Drv_Reset.", v5, 40, v6);
    }
  }
  if (!a1)
  {
    if (sub_D1C38(3u, 4))
    {
      int v13 = sub_D1C7C(3u);
      __uint64_t v14 = sub_DDEFC();
      __uint64_t v15 = (const char *)sub_D1CB0(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Reset, Null pointer for driver data.\n", v14, 3, v15, "AVE_USL_Drv_Reset", 1627, "pDriverInstance");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Reset, Null pointer for driver data.");
    }
    goto LABEL_26;
  }
  if (!a2)
  {
    if (sub_D1C38(3u, 4))
    {
      int v16 = sub_D1C7C(3u);
      __uint64_t v17 = sub_DDEFC();
      __uint64_t v18 = (const char *)sub_D1CB0(4);
      if (v16)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Reset multiPassEndPassCounter = %d.\n", v17, 3, v18, "AVE_USL_Drv_Reset", 1628, "multiPassEndPassCounter > 0", 0);
        __uint64_t v17 = sub_DDEFC();
        int v46 = sub_D1CB0(4);
      }
      else
      {
        int v46 = (void *)v18;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Reset multiPassEndPassCounter = %d.", v17, 3, v46, "AVE_USL_Drv_Reset", 1628, "multiPassEndPassCounter > 0", 0);
    }
LABEL_26:
    uint64_t v9 = 4294966295;
    goto LABEL_27;
  }
  __uint64_t v55 = sub_DDEFC();
  uint64_t v8 = sub_B490C(a1, &v55);
  if (v8)
  {
    uint64_t v9 = v8;
    if (sub_D1C38(3u, 4))
    {
      int v10 = sub_D1C7C(3u);
      __uint64_t v11 = sub_DDEFC();
      __uint64_t v12 = (const char *)sub_D1CB0(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: H264VideoEncoderVA_DriverEncodeCompleteFrames failed.\n", v11, 3, v12, "AVE_USL_Drv_Reset", 1637, "ret == 0");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: H264VideoEncoderVA_DriverEncodeCompleteFrames failed.");
    }
    goto LABEL_27;
  }
  *((_DWORD *)a1 + 3) = 0;
  *((_DWORD *)a1 + 47044) = a2;
  int v51 = 0;
  sub_FD00(*a1, 67360, &v51);
  sub_109C4(*a1, v51, &v56);
  int v19 = v51;
  if (v51)
  {
    bzero(v51 + 8, 0x10718uLL);
    *(_DWORD *)int v19 = v56;
    *((_DWORD *)v19 + 1) = 10;
    *((_DWORD *)v19 + 40) = *((_DWORD *)a1 + 3);
    v19[8] = a1[23521] != 0;
    *((_DWORD *)v19 + 3) = *((_DWORD *)a1 + 47044);
    LODWORD(v51) = v56;
    if (sub_AE6BC((uint64_t)a1[23509], (long long *)&v51))
    {
      if (sub_D1C38(3u, 4))
      {
        int v20 = sub_D1C7C(3u);
        __uint64_t v21 = sub_DDEFC();
        __uint64_t v22 = (const char *)sub_D1CB0(4);
        if (v20)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread\n", v21, 3, v22, "AVE_USL_Drv_Reset", 1674, "res == 0");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread");
      }
      goto LABEL_45;
    }
    uint64_t v54 = 0;
    long long v53 = 0u;
    long long v52 = 0u;
    memset(v50, 0, sizeof(v50));
    int v51 = (char *)*((unsigned int *)a1 + 47040);
    LODWORD(v54) = v56;
    LODWORD(v53) = 118000;
    *((void *)&v53 + 1) = (uint64_t)sub_DDEFC() / 1000;
    uint64_t v31 = sub_136A4((const void **)*a1, &v51, v50);
    if (!v31)
    {
      int v38 = sub_B1CF0((uint64_t)a1[23508], (uint64_t)&v51, 0x1D4C0u);
      if (v51 == v56)
      {
        if (!v38)
        {
          uint64_t v9 = 0;
          goto LABEL_27;
        }
        if (sub_D1C38(3u, 4))
        {
          int v39 = sub_D1C7C(3u);
          __uint64_t v40 = sub_DDEFC();
          int v41 = (const char *)sub_D1CB0(4);
          if (v39)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread\n", v40, 3, v41, "AVE_USL_Drv_Reset", 1705, "res == 0");
            sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread");
        }
      }
      else if (sub_D1C38(3u, 4))
      {
        int v42 = sub_D1C7C(3u);
        __uint64_t v43 = sub_DDEFC();
        int v44 = (const char *)sub_D1CB0(4);
        if (v42)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder ERROR: status.counter != counter.\n", v43, 3, v44, "AVE_USL_Drv_Reset", 1704, "status.counter == counter");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder ERROR: status.counter != counter.");
      }
LABEL_45:
      uint64_t v9 = 4294966296;
      goto LABEL_27;
    }
    uint64_t v9 = v31;
    __uint64_t v32 = (pthread_mutex_t *)a1[23509];
    pthread_mutex_lock(v32);
    int v33 = *(_DWORD *)v32[3].__opaque;
    if (v33)
    {
      *(_DWORD *)v32[3].__opaque = v33 - 1;
      int sig_high = *(_DWORD *)&v32[3].__opaque[8];
      if (!sig_high) {
        int sig_high = HIDWORD(v32[3].__sig);
      }
      *(_DWORD *)&v32[3].__opaque[8] = sig_high - 1;
    }
    pthread_mutex_unlock(v32);
    if (sub_D1C38(0x28u, 4))
    {
      int v35 = sub_D1C7C(0x28u);
      __uint64_t v36 = sub_DDEFC();
      __uint64_t v37 = (const char *)sub_D1CB0(4);
      if (v35)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to process %d\n", v36, 40, v37, "AVE_USL_Drv_Reset", 1691, "ret == 0", v9);
        __uint64_t v36 = sub_DDEFC();
        uint64_t v49 = v9;
        long long v48 = sub_D1CB0(4);
      }
      else
      {
        uint64_t v49 = v9;
        long long v48 = (void *)v37;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to process %d", v36, 40, v48, "AVE_USL_Drv_Reset", 1691, "ret == 0", v49);
    }
  }
  else
  {
    if (sub_D1C38(3u, 4))
    {
      int v27 = sub_D1C7C(3u);
      __uint64_t v28 = sub_DDEFC();
      uint64_t v29 = (const char *)sub_D1CB0(4);
      if (v27)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.\n", v28, 3, v29, "AVE_USL_Drv_Reset", 1653, "Frame");
        __uint64_t v30 = sub_DDEFC();
        __uint64_t v47 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.", v30, 3, v47, "AVE_USL_Drv_Reset", 1653, "Frame");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.", v28, 3, v29, "AVE_USL_Drv_Reset", 1653, "Frame");
      }
    }
    uint64_t v9 = 4294966293;
  }
LABEL_27:
  if (sub_D1C38(0x28u, 7))
  {
    int v23 = sub_D1C7C(0x28u);
    __uint64_t v24 = sub_DDEFC();
    __uint64_t v25 = (const char *)sub_D1CB0(7);
    if (v23)
    {
      printf("%lld %d AVE %s: EXIT AVE_USL_Drv_Reset frame number %d. err 0x%08x\n", v24, 40, v25, *((_DWORD *)a1 + 3), v9);
      __uint64_t v24 = sub_DDEFC();
      __uint64_t v25 = (const char *)sub_D1CB0(7);
    }
    syslog(3, "%lld %d AVE %s: EXIT AVE_USL_Drv_Reset frame number %d. err 0x%08x", v24, 40, v25, *((_DWORD *)a1 + 3), v9);
  }
  return v9;
}

uint64_t sub_B7914(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  if (*(_DWORD *)(a1 + 200) && sub_D1C38(0x2Au, 5))
  {
    if (sub_D1C7C(0x2Au))
    {
      __uint64_t v2 = sub_DDEFC();
      int v3 = (const char *)sub_D1CB0(5);
      printf("%lld %d AVE %s: H264 Connection: WARNING! deleting connection %p with %d packets left\n", v2, 42, v3, (const void *)a1, *(_DWORD *)(a1 + 200));
    }
    __uint64_t v4 = sub_DDEFC();
    __uint64_t v5 = (const char *)sub_D1CB0(5);
    syslog(3, "%lld %d AVE %s: H264 Connection: WARNING! deleting connection %p with %d packets left", v4, 42, v5, (const void *)a1, *(_DWORD *)(a1 + 200));
  }
  if (*(void *)(a1 + 216)) {
    operator delete[]();
  }
  pthread_cond_destroy((pthread_cond_t *)(a1 + 112));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 64));
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  pthread_mutex_destroy((pthread_mutex_t *)a1);
  return a1;
}

uint64_t sub_B7A24(uint64_t a1, const void *a2, const __CFDictionary *a3)
{
  uint64_t v6 = a1 + 165936;
  sub_C8C98();
  __uint64_t v7 = sub_C7604();
  sub_D2B08((uint64_t)(v7 + 920));
  if (sub_D1C38(0x14u, 7))
  {
    int v8 = sub_D1C7C(0x14u);
    __uint64_t v9 = sub_DDEFC();
    int v10 = (const char *)sub_D1CB0(7);
    if (v8)
    {
      printf("%lld %d AVE %s: OF: ENTER %s\n", v9, 20, v10, "AVE_OF_CreateInstance_Common");
      __uint64_t v11 = sub_DDEFC();
      int v44 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: OF: ENTER %s", v11, 20, v44, "AVE_OF_CreateInstance_Common");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: OF: ENTER %s", v9, 20, v10, "AVE_OF_CreateInstance_Common");
    }
  }
  if ((v7[26] & 0x40) != 0) {
    *(_DWORD *)uint64_t v6 = 1;
  }
  if ((v7[34] & 0x40) != 0)
  {
    *(_DWORD *)uint64_t v6 = 0;
  }
  else if (*(_DWORD *)v6)
  {
    *(void *)(v6 + 8) = sub_DDEFC();
  }
  *(_DWORD *)(a1 + 18768) = 1;
  *(_DWORD *)(v6 + 40) = 2;
  *(void *)(a1 + 18444) = 0x100000001;
  *(_DWORD *)(a1 + 18640) = *((_DWORD *)v7 + 196);
  int v12 = sub_AF398(2, 1);
  if (v12 == -536870210)
  {
    if (sub_D1C38(0x14u, 4))
    {
      int v17 = sub_D1C7C(0x14u);
      __uint64_t v18 = sub_DDEFC();
      int v19 = (const char *)sub_D1CB0(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | OF: AVE_USL_Drv_Create failed, err = %d\n", v18, 20, v19, "AVE_OF_CreateInstance_Common", 75, "false", -536870210);
        __uint64_t v18 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | OF: AVE_USL_Drv_Create failed, err = %d", v18);
    }
    uint64_t v24 = 4294954381;
  }
  else
  {
    int v13 = v12;
    if (v12)
    {
      if (v12 == -536870208)
      {
        if (sub_D1C38(0x14u, 4))
        {
          int v14 = sub_D1C7C(0x14u);
          __uint64_t v15 = sub_DDEFC();
          int v16 = (const char *)sub_D1CB0(4);
          if (v14)
          {
            printf("%lld %d AVE %s: %s:%d %s | OF: AVE_USL_Drv_Create failed, err = %d\n", v15, 20, v16, "AVE_OF_CreateInstance_Common", 70, "false", -536870208);
            __uint64_t v15 = sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | OF: AVE_USL_Drv_Create failed, err = %d", v15);
        }
        uint64_t v24 = 4294954388;
      }
      else
      {
        if (sub_D1C38(0x14u, 4))
        {
          int v28 = sub_D1C7C(0x14u);
          __uint64_t v29 = sub_DDEFC();
          __uint64_t v30 = (const char *)sub_D1CB0(4);
          if (v28)
          {
            printf("%lld %d AVE %s: %s:%d %s | OF: AVE_USL_Drv_Create failed, err = %d\n", v29, 20, v30, "AVE_OF_CreateInstance_Common", 80, "false", v13);
            __uint64_t v29 = sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | OF: AVE_USL_Drv_Create failed, err = %d", v29);
        }
        uint64_t v24 = 4294954389;
      }
    }
    else
    {
      int v20 = sub_AFAF8(*(void *)(a1 + 16));
      *(_DWORD *)(v6 + 48) = v20;
      int v21 = *((_DWORD *)sub_DB5D4(v20) + 1);
      *(_DWORD *)(v6 + 44) = v21;
      if (v21 <= 5)
      {
        if (sub_D1C38(0x14u, 4))
        {
          int v31 = sub_D1C7C(0x14u);
          __uint64_t v32 = sub_DDEFC();
          int v33 = (const char *)sub_D1CB0(4);
          if (v31)
          {
            printf("%lld %d AVE %s: %s:%d %s | OF: device %d is not supported\n", v32, 20, v33, "AVE_OF_CreateInstance_Common", 89, "OFPrivateStorage->DeviceType >= AVE_DevType_H13", *(_DWORD *)(v6 + 44));
            __uint64_t v32 = sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | OF: device %d is not supported", v32);
        }
        uint64_t v24 = 4294954396;
      }
      else
      {
        int v22 = sub_AFB0C(*(void *)(a1 + 16));
        *(_DWORD *)(a1 + 60) = v22;
        sub_3DCC(v22, (void *)(a1 + 192));
        *(void *)(a1 + 8) = a2;
        if (a2) {
          CFRetain(a2);
        }
        sub_B8134(a1);
        uint64_t v23 = sub_B85D8(a1, a3);
        if (v23)
        {
          uint64_t v24 = v23;
          if (sub_D1C38(0x14u, 4))
          {
            int v25 = sub_D1C7C(0x14u);
            __uint64_t v26 = sub_DDEFC();
            int v27 = (const char *)sub_D1CB0(4);
            if (v25)
            {
              printf("%lld %d AVE %s: %s:%d %s | OF: AVE_SetSessionProperties failed, err = %d\n", v26, 20, v27, "AVE_OF_CreateInstance_Common", 105, "err == noErr", v24);
              __uint64_t v26 = sub_DDEFC();
              sub_D1CB0(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | OF: AVE_SetSessionProperties failed, err = %d", v26);
          }
        }
        else
        {
          *(_DWORD *)(a1 + 56) = 30565;
          if (*(_DWORD *)v6)
          {
            *(void *)(v6 + 16) = sub_DDEFC();
            if (sub_D1C38(0x14u, 6))
            {
              int v34 = sub_D1C7C(0x14u);
              __uint64_t v35 = sub_DDEFC();
              __uint64_t v36 = (const char *)sub_D1CB0(6);
              uint64_t v37 = *(void *)(v6 + 16) - *(void *)(v6 + 8);
              if (v34)
              {
                printf("%lld %d AVE %s: OF: CreateInstance took %lld us\n", v35, 20, v36, v37);
                __uint64_t v38 = sub_DDEFC();
                __uint64_t v45 = (const char *)sub_D1CB0(6);
                syslog(3, "%lld %d AVE %s: OF: CreateInstance took %lld us", v38, 20, v45, *(void *)(v6 + 16) - *(void *)(v6 + 8));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: OF: CreateInstance took %lld us", v35, 20, v36, v37);
              }
            }
          }
          uint64_t v24 = 0;
        }
      }
    }
  }
  if (sub_D1C38(0x14u, 7))
  {
    int v39 = sub_D1C7C(0x14u);
    __uint64_t v40 = sub_DDEFC();
    int v41 = (const char *)sub_D1CB0(7);
    if (v39)
    {
      printf("%lld %d AVE %s: OF: EXIT %s, err = %d\n", v40, 20, v41, "AVE_OF_CreateInstance_Common", v24);
      __uint64_t v42 = sub_DDEFC();
      int v46 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: OF: EXIT %s, err = %d", v42, 20, v46, "AVE_OF_CreateInstance_Common", v24);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: OF: EXIT %s, err = %d", v40, 20, v41, "AVE_OF_CreateInstance_Common", v24);
    }
  }
  if (v24) {
    sub_C8E18();
  }
  return v24;
}

void sub_B8134(uint64_t a1)
{
  if (sub_D1C38(0x14u, 7))
  {
    int v2 = sub_D1C7C(0x14u);
    __uint64_t v3 = sub_DDEFC();
    __uint64_t v4 = (const char *)sub_D1CB0(7);
    if (v2)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_SetEncoderDefault\n", v3, 20, v4);
      __uint64_t v5 = sub_DDEFC();
      int v27 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetEncoderDefault", v5, 20, v27);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetEncoderDefault", v3, 20, v4);
    }
  }
  if (a1)
  {
    uint64_t v6 = a1 + 18648;
    *(unsigned char *)(a1 + 18648) = 0;
    *(_OWORD *)(a1 + 18656) = xmmword_141700;
    __uint64_t v29 = (_DWORD *)(a1 + 165980);
    uint64_t v7 = a1 + 19484;
    *(void *)(a1 + 18672) = 31;
    uint64_t v8 = a1 + 17880;
    __uint64_t v9 = (_OWORD *)(a1 + 1764);
    *(unsigned char *)(a1 + 18684) = 0;
    uint64_t v10 = a1 + 261;
    *(_DWORD *)(a1 + 18688) = 1;
    *(_DWORD *)(a1 + 18692) = 16777473;
    *(unsigned char *)(a1 + 18696) = 1;
    *(_DWORD *)(a1 + 18697) = 0;
    *(_OWORD *)(a1 + 18702) = 0u;
    *(_OWORD *)(a1 + 18718) = 0u;
    *(_OWORD *)(a1 + 18734) = 0u;
    *(_WORD *)(a1 + 18750) = 0;
    *(unsigned char *)(a1 + 18760) = 1;
    *(void *)(a1 + 18752) = 0xC800000002;
    *(_WORD *)(a1 + 18777) = 0;
    *(unsigned char *)(a1 + 18782) = 0;
    int v11 = *(_DWORD *)(a1 + 1888);
    int v12 = *(_DWORD *)(a1 + 1892);
    *(_DWORD *)(a1 + 18784) = 2 * (((v12 + 31) >> 5) * ((v11 + 31) >> 5) > 0x398);
    *(_WORD *)(a1 + 18788) = 0;
    *(_OWORD *)(a1 + 18792) = xmmword_142EC0;
    *(void *)(a1 + 18896) = 0;
    *(_DWORD *)(a1 + 18904) = 0;
    *(void *)(a1 + 18880) = 0;
    *(void *)(a1 + 18888) = 0;
    *(_DWORD *)(a1 + 18876) = -1;
    *(_DWORD *)(a1 + 18862) = 0x10000;
    *(unsigned char *)(a1 + 18866) = 0;
    *(void *)(a1 + 18854) = 0x10100000100;
    *(_WORD *)(a1 + 18868) = 0;
    *(_DWORD *)(a1 + 18808) = 1;
    *(unsigned char *)(a1 + 18870) = 0;
    *(_DWORD *)(a1 + 18940) = 0x10000;
    *(void *)(a1 + 19468) = 0;
    *(_DWORD *)(a1 + 20168) = 0;
    bzero((void *)(a1 + 19492), 0x2A0uLL);
    bzero((void *)(a1 + 18952), 0x201uLL);
    for (uint64_t i = 0; i != 672; i += 112)
      *(void *)(a1 + 19492 + i) = 1;
    *(void *)uint64_t v7 = 0x100000006;
    *(_DWORD *)(a1 + 18948) = 0;
    *(_DWORD *)(a1 + 20184) = 0;
    *(_DWORD *)(a1 + 20200) = 0;
    *(unsigned char *)(a1 + 20208) = 0;
    *(_DWORD *)(a1 + 20212) = 0;
    uint64_t v14 = a1 + 1888;
    *(void *)(a1 + 1936) = 0;
    *(_DWORD *)(a1 + 1928) = 0;
    *(unsigned char *)(a1 + 1932) = 0;
    int v15 = *(_DWORD *)(a1 + 2032);
    *(_DWORD *)(a1 + 18400) = 0;
    *(_DWORD *)(a1 + 2032) = v15 & 0xFFFFFFFA;
    *(void *)(a1 + 17876) = 0;
    *(unsigned char *)(a1 + 17884) = 0;
    *(_DWORD *)(a1 + 17892) = 2;
    *(unsigned char *)(a1 + 17886) = 0;
    *(_WORD *)(a1 + 1933) = 0;
    *(unsigned char *)(a1 + 17890) = 0;
    *(_DWORD *)(a1 + 18060) = 1;
    *(unsigned char *)(a1 + 18064) = 0;
    *(void *)(a1 + 18068) = 1;
    *(_DWORD *)(a1 + 18076) = v12;
    *(_DWORD *)(a1 + 18332) = 16;
    *(_WORD *)(a1 + 18336) = 0;
    *(_WORD *)(a1 + 18020) = 256;
    *(_WORD *)(a1 + 18344) = 0;
    *(_WORD *)(a1 + 18396) = 0;
    *(_WORD *)(a1 + 17900) = 0;
    *(unsigned char *)(a1 + 17888) = 1;
    *(void *)(a1 + 17924) = 0x8FFFFFFFFLL;
    *(_DWORD *)(a1 + 17912) = 0xFFFF;
    *(unsigned char *)(a1 + 18358) = 0;
    *(_DWORD *)(a1 + 18816) = 1;
    *(_DWORD *)(a1 + 200) = ((double)(v12 * v11) * 1.5 * 0.075 * 30.0);
    uint64_t v16 = a1 + 200;
    *(_DWORD *)(v16 + 36) = 0;
    *(_DWORD *)(v16 + 4) = 1;
    *(_DWORD *)(v16 + 48) = 1065353216;
    *(unsigned char *)(v16 + 60) = 0;
    *(_DWORD *)(v16 + 54) = 0;
    *(_OWORD *)(v10 + 23) = xmmword_143790;
    *(_DWORD *)(v16 + 100) = 0;
    *(unsigned char *)(v6 + 128) = 1;
    *(void *)(v16 + 28) = 0;
    *(_OWORD *)(v10 + 7) = xmmword_1437A0;
    *(void *)&long long v17 = 0xC0000000CLL;
    *((void *)&v17 + 1) = 0xC0000000CLL;
    *(_OWORD *)((char *)v9 + 84) = v17;
    *(_DWORD *)uint64_t v10 = 1;
    *(unsigned char *)(v16 + 65) = 0;
    *(void *)(v16 + 1624) = 0x403A000000000000;
    *(void *)(v16 + 1632) = 0x1A0000001ALL;
    *(_DWORD *)(v16 + 1640) = 26;
    *(unsigned char *)(v16 + 58) = 0;
    *__uint64_t v9 = xmmword_142ED0;
    *(unsigned char *)(v16 + 1580) = 0;
    *(_DWORD *)(v6 + 824) = 30;
    *(void *)(v16 + 1616) = 0;
    *(_OWORD *)(v16 + 1600) = 0u;
    *(_OWORD *)(v16 + 1584) = 0u;
    *(void *)(v16 + 8) = 0;
    *(unsigned char *)(v16 + 1672) = 0;
    *(unsigned char *)(v7 + 735) = 0;
    *(_WORD *)(v8 + 16) = 0;
    bzero((void *)(v16 + 20176), 0x1DA78uLL);
    *(unsigned char *)(v8 + 9) = 1;
    *(unsigned char *)(v8 + 476) = 1;
    *(unsigned char *)(v16 + 24) = 0;
    *(_WORD *)uint64_t v8 = 4 * (*v29 > 7);
    *(_DWORD *)(v16 + 1752) = 0;
    *(unsigned char *)(v16 + 52) = 0;
    *(void *)(v14 + 148) = 0x7FFFFFFFLL;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v16 + 1848) = _Q0;
    *(unsigned char *)(v6 + 224) = 1;
    *(void *)(v16 + 1680) = 0;
  }
  else if (sub_D1C38(0x16u, 4))
  {
    int v23 = sub_D1C7C(0x16u);
    __uint64_t v24 = sub_DDEFC();
    int v25 = (const char *)sub_D1CB0(4);
    if (v23)
    {
      printf("%lld %d AVE %s: FIG: pEncoderPrivateStorage == NULL\n", v24, 22, v25);
      __uint64_t v26 = sub_DDEFC();
      int v28 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: FIG: pEncoderPrivateStorage == NULL", v26, 22, v28);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: pEncoderPrivateStorage == NULL", v24, 22, v25);
    }
  }
}

uint64_t sub_B85D8(uint64_t a1, CFDictionaryRef theDict)
{
  if (a1)
  {
    if (!theDict)
    {
      uint64_t result = sub_D1C38(0x14u, 6);
      if (!result) {
        return result;
      }
      int v18 = sub_D1C7C(0x14u);
      __uint64_t v19 = sub_DDEFC();
      int v20 = (const char *)sub_D1CB0(6);
      if (v18)
      {
        printf("%lld %d AVE %s: OF: No session properties sent in, continue...\n", v19, 20, v20);
        sub_DDEFC();
        sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: OF: No session properties sent in, continue...");
      return 0;
    }
    __uint64_t v4 = (unsigned __int16 *)(a1 + 17880);
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, kVTMotionEstimationSessionCreationOption_MotionVectorSize);
    if (Value)
    {
      CFNumberRef v6 = Value;
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(v6))
      {
        int valuePtr = 16;
        CFNumberGetValue(v6, kCFNumberSInt32Type, &valuePtr);
        *((unsigned char *)v4 + 466) = valuePtr == 4;
        if (sub_D1C38(0x14u, 6))
        {
          int v8 = sub_D1C7C(0x14u);
          __uint64_t v9 = sub_DDEFC();
          uint64_t v10 = (const char *)sub_D1CB0(6);
          int v11 = *((unsigned __int8 *)v4 + 466);
          if (v8)
          {
            printf("%lld %d AVE %s: OF: received kVTMotionEstimationSessionPropertyKey_MVSize = %d\n", v9, 20, v10, v11);
            __uint64_t v12 = sub_DDEFC();
            int v67 = (const char *)sub_D1CB0(6);
            syslog(3, "%lld %d AVE %s: OF: received kVTMotionEstimationSessionPropertyKey_MVSize = %d", v12, 20, v67, *((unsigned __int8 *)v4 + 466));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: OF: received kVTMotionEstimationSessionPropertyKey_MVSize = %d", v9, 20, v10, v11);
          }
        }
      }
    }
    CFBooleanRef v21 = (const __CFBoolean *)CFDictionaryGetValue(theDict, kVTMotionEstimationSessionCreationOption_DetectTrueMotion);
    if (v21)
    {
      CFBooleanRef v22 = v21;
      CFTypeID v23 = CFBooleanGetTypeID();
      if (v23 == CFGetTypeID(v22))
      {
        *((unsigned char *)v4 + 477) = 2 * (CFBooleanGetValue(v22) != 0);
        if (sub_D1C38(0x14u, 6))
        {
          int v24 = sub_D1C7C(0x14u);
          __uint64_t v25 = sub_DDEFC();
          __uint64_t v26 = (const char *)sub_D1CB0(6);
          int v27 = *((unsigned __int8 *)v4 + 477);
          if (v24)
          {
            printf("%lld %d AVE %s: OF: received kVTMotionEstimationSessionPropertyKey_DetectTrueMotion, lrme_rc_pass_nuuint64_t m = %d\n", v25, 20, v26, v27);
            __uint64_t v28 = sub_DDEFC();
            uint64_t v69 = (const char *)sub_D1CB0(6);
            syslog(3, "%lld %d AVE %s: OF: received kVTMotionEstimationSessionPropertyKey_DetectTrueMotion, lrme_rc_pass_nuuint64_t m = %d", v28, 20, v69, *((unsigned __int8 *)v4 + 477));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: OF: received kVTMotionEstimationSessionPropertyKey_DetectTrueMotion, lrme_rc_pass_nuuint64_t m = %d", v25, 20, v26, v27);
          }
        }
      }
    }
    __uint64_t v29 = CFDictionaryGetValue(theDict, @"AttachCost");
    if (v29)
    {
      if (CFEqual(v29, kCFBooleanTrue))
      {
        *((unsigned char *)v4 + 2292) = 1;
        if (sub_D1C38(0x14u, 6))
        {
          int v30 = sub_D1C7C(0x14u);
          __uint64_t v31 = sub_DDEFC();
          __uint64_t v32 = (const char *)sub_D1CB0(6);
          int v33 = *((unsigned __int8 *)v4 + 2292);
          if (v30)
          {
            printf("%lld %d AVE %s: OF: received kOFSessionPropertyKey_AttachCost = %d\n", v31, 20, v32, v33);
            __uint64_t v34 = sub_DDEFC();
            int v70 = (const char *)sub_D1CB0(6);
            syslog(3, "%lld %d AVE %s: OF: received kOFSessionPropertyKey_AttachCost = %d", v34, 20, v70, *((unsigned __int8 *)v4 + 2292));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: OF: received kOFSessionPropertyKey_AttachCost = %d", v31, 20, v32, v33);
          }
        }
      }
    }
    CFStringRef v35 = (const __CFString *)CFDictionaryGetValue(theDict, @"SessionName");
    if (v35)
    {
      CFStringRef v36 = v35;
      CFTypeID v37 = CFStringGetTypeID();
      if (v37 == CFGetTypeID(v36))
      {
        char v38 = sub_C491C(v36, (char *)(a1 + 64), 128);
        sub_DD92C((char *)(a1 + 64), 128, "%s", v39, v40, v41, v42, v43, v38);
        if (sub_D1C38(0x14u, 6))
        {
          int v44 = sub_D1C7C(0x14u);
          __uint64_t v45 = sub_DDEFC();
          int v46 = (const char *)sub_D1CB0(6);
          if (v44)
          {
            printf("%lld %d AVE %s: OF: received AVE_PROPERTY_KEY_SESSION_NAME = %s\n", v45, 20, v46, (const char *)(a1 + 64));
            __uint64_t v47 = sub_DDEFC();
            uint64_t v71 = (const char *)sub_D1CB0(6);
            syslog(3, "%lld %d AVE %s: OF: received AVE_PROPERTY_KEY_SESSION_NAME = %s", v47, 20, v71, (const char *)(a1 + 64));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: OF: received AVE_PROPERTY_KEY_SESSION_NAME = %s", v45, 20, v46, (const char *)(a1 + 64));
          }
        }
      }
    }
    CFNumberRef v48 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"lrmeRCPassNum");
    if (v48)
    {
      CFNumberRef v49 = v48;
      CFTypeID v50 = CFNumberGetTypeID();
      if (v50 == CFGetTypeID(v49))
      {
        int v74 = 0;
        CFNumberGetValue(v49, kCFNumberSInt32Type, &v74);
        *((unsigned char *)v4 + 477) = v74;
        if (sub_D1C38(0x14u, 6))
        {
          int v51 = sub_D1C7C(0x14u);
          __uint64_t v52 = sub_DDEFC();
          long long v53 = (const char *)sub_D1CB0(6);
          int v54 = *((unsigned __int8 *)v4 + 477);
          if (v51)
          {
            printf("%lld %d AVE %s: OF: received AVE_kVTCompressionPropertyKey_lrmeRCPassNuuint64_t m = %d\n", v52, 20, v53, v54);
            __uint64_t v55 = sub_DDEFC();
            uint64_t v72 = (const char *)sub_D1CB0(6);
            syslog(3, "%lld %d AVE %s: OF: received AVE_kVTCompressionPropertyKey_lrmeRCPassNuuint64_t m = %d", v55, 20, v72, *((unsigned __int8 *)v4 + 477));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: OF: received AVE_kVTCompressionPropertyKey_lrmeRCPassNuuint64_t m = %d", v52, 20, v53, v54);
          }
        }
      }
    }
    uint64_t result = (uint64_t)CFDictionaryGetValue(theDict, @"MotionEstimationSearchMode");
    if (result)
    {
      CFNumberRef v56 = (const __CFNumber *)result;
      unsigned int v73 = -1;
      CFTypeID v57 = CFNumberGetTypeID();
      if (v57 == CFGetTypeID(v56))
      {
        CFNumberGetValue(v56, kCFNumberSInt32Type, &v73);
        if (sub_13AE0(*(_DWORD *)(a1 + 165984), 1, 1, v73))
        {
          unsigned __int16 *v4 = v73;
          uint64_t result = sub_D1C38(0x14u, 6);
          if (!result) {
            return result;
          }
          int v58 = sub_D1C7C(0x14u);
          __uint64_t v59 = sub_DDEFC();
          __uint64_t v60 = (const char *)sub_D1CB0(6);
          if (v58)
          {
            printf("%lld %d AVE %s: OF: received kVTCompressionPropertyKey_MotionEstimationSearchMode, search_CMTimeRange range = %d\n", v59, 20, v60, *v4);
            sub_DDEFC();
            sub_D1CB0(6);
          }
          syslog(3, "%lld %d AVE %s: OF: received kVTCompressionPropertyKey_MotionEstimationSearchMode, search_CMTimeRange range = %d");
          return 0;
        }
        if (sub_D1C38(0x14u, 4))
        {
          int v64 = sub_D1C7C(0x14u);
          __uint64_t v65 = sub_DDEFC();
          unsigned int v66 = (const char *)sub_D1CB0(4);
          if (v64)
          {
            printf("%lld %d AVE %s: %s:%d %s | OF: received kVTCompressionPropertyKey_MotionEstimationSearchMode (%d) which is not supported\n", v65, 20, v66, "AVE_SetSessionProperties", 1030, "false", v73);
            __uint64_t v65 = sub_DDEFC();
            unsigned int v66 = (const char *)sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | OF: received kVTCompressionPropertyKey_MotionEstimationSearchMode (%d) which is not supported", v65, 20, v66, "AVE_SetSessionProperties", 1030, "false", v73);
        }
      }
      else if (sub_D1C38(0x14u, 4))
      {
        int v61 = sub_D1C7C(0x14u);
        __uint64_t v62 = sub_DDEFC();
        int v63 = (const char *)sub_D1CB0(4);
        if (v61)
        {
          printf("%lld %d AVE %s: %s:%d %s | OF: kVTCompressionPropertyKey_MotionEstimationSearchMode must be a string or a number\n", v62, 20, v63, "AVE_SetSessionProperties", 1015, "false");
          sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | OF: kVTCompressionPropertyKey_MotionEstimationSearchMode must be a string or a number");
      }
      return 4294954396;
    }
  }
  else
  {
    if (sub_D1C38(0x14u, 4))
    {
      int v13 = sub_D1C7C(0x14u);
      __uint64_t v14 = sub_DDEFC();
      int v15 = (const char *)sub_D1CB0(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | OF: pEncoderPrivateStorage is NULL\n", v14, 20, v15, "AVE_SetSessionProperties", 938, "pEncoderPrivateStorage != __null");
        __uint64_t v16 = sub_DDEFC();
        __uint64_t v68 = (const char *)sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | OF: pEncoderPrivateStorage is NULL", v16, 20, v68, "AVE_SetSessionProperties", 938, "pEncoderPrivateStorage != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | OF: pEncoderPrivateStorage is NULL", v14, 20, v15, "AVE_SetSessionProperties", 938, "pEncoderPrivateStorage != __null");
      }
    }
    return 4294954394;
  }
  return result;
}

uint64_t sub_B8E1C(_DWORD *a1, unint64_t a2, const __CFDictionary *a3)
{
  CFNumberRef v6 = a1 + 41467;
  unint64_t v7 = HIDWORD(a2);
  if (sub_D1C38(0x14u, 7))
  {
    int v8 = sub_D1C7C(0x14u);
    __uint64_t v9 = sub_DDEFC();
    uint64_t v10 = (const char *)sub_D1CB0(7);
    if (v8)
    {
      printf("%lld %d AVE %s: OF: ENTER %s, width = %d, height = %d\n", v9, 20, v10, "AVE_OF_StartSession_Common", a2, v7);
      __uint64_t v11 = sub_DDEFC();
      int v46 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: OF: ENTER %s, width = %d, height = %d", v11, 20, v46, "AVE_OF_StartSession_Common", a2, v7);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: OF: ENTER %s, width = %d, height = %d", v9, 20, v10, "AVE_OF_StartSession_Common", a2, v7);
    }
  }
  if (v6[17]) {
    *(void *)(v6 + 19) = sub_DDEFC();
  }
  if ((int)a2 <= 1)
  {
    if (sub_D1C38(0x14u, 4))
    {
      int v18 = sub_D1C7C(0x14u);
      __uint64_t v13 = sub_DDEFC();
      __uint64_t v19 = (const char *)sub_D1CB0(4);
      if (v18)
      {
        unint64_t v20 = a2;
        printf("%lld %d AVE %s: %s:%d %s | OF: Width (%dx%d) is not supported\n", v13, 20, v19, "AVE_OF_StartSession_Common", 143, "dimensions.width >= 2", a2, v7);
        __uint64_t v16 = sub_DDEFC();
        uint64_t v56 = v20;
        uint64_t v59 = v7;
        uint64_t v51 = 143;
        int v54 = "dimensions.width >= 2";
        __uint64_t v47 = sub_D1CB0(4);
        long long v17 = "%lld %d AVE %s: %s:%d %s | OF: Width (%dx%d) is not supported";
        goto LABEL_19;
      }
      uint64_t v57 = a2;
      uint64_t v60 = v7;
      uint64_t v52 = 143;
      __uint64_t v55 = "dimensions.width >= 2";
      CFNumberRef v48 = v19;
      int v24 = "%lld %d AVE %s: %s:%d %s | OF: Width (%dx%d) is not supported";
LABEL_27:
      syslog(3, v24, v13, 20, v48, "AVE_OF_StartSession_Common", v52, v55, v57, v60);
    }
LABEL_28:
    uint64_t v26 = 4294954394;
    goto LABEL_29;
  }
  if ((int)v7 <= 1)
  {
    if (sub_D1C38(0x14u, 4))
    {
      int v21 = sub_D1C7C(0x14u);
      __uint64_t v13 = sub_DDEFC();
      CFBooleanRef v22 = (const char *)sub_D1CB0(4);
      if (v21)
      {
        unint64_t v23 = a2;
        printf("%lld %d AVE %s: %s:%d %s | OF: Height (%dx%d) is not supported\n", v13, 20, v22, "AVE_OF_StartSession_Common", 145, "dimensions.height >= 2", a2, v7);
        __uint64_t v16 = sub_DDEFC();
        uint64_t v56 = v23;
        uint64_t v59 = v7;
        uint64_t v51 = 145;
        int v54 = "dimensions.height >= 2";
        __uint64_t v47 = sub_D1CB0(4);
        long long v17 = "%lld %d AVE %s: %s:%d %s | OF: Height (%dx%d) is not supported";
        goto LABEL_19;
      }
      uint64_t v57 = a2;
      uint64_t v60 = v7;
      uint64_t v52 = 145;
      __uint64_t v55 = "dimensions.height >= 2";
      CFNumberRef v48 = v22;
      int v24 = "%lld %d AVE %s: %s:%d %s | OF: Height (%dx%d) is not supported";
      goto LABEL_27;
    }
    goto LABEL_28;
  }
  a1[472] = a2;
  a1[473] = v7;
  a1[4869] = a2;
  a1[4870] = v7;
  sub_B948C((uint64_t)a1);
  if (sub_C58EC(v6[29], 1, a1[472], a1[473], 1))
  {
    if (sub_D1C38(0x14u, 4))
    {
      int v12 = sub_D1C7C(0x14u);
      __uint64_t v13 = sub_DDEFC();
      __uint64_t v14 = (const char *)sub_D1CB0(4);
      if (v12)
      {
        unint64_t v15 = a2;
        printf("%lld %d AVE %s: %s:%d %s | OF: Dimension (%dx%d) is not supported\n", v13, 20, v14, "AVE_OF_StartSession_Common", 160, "dimensionsRequirement == 0", a2, v7);
        __uint64_t v16 = sub_DDEFC();
        uint64_t v56 = v15;
        uint64_t v59 = v7;
        uint64_t v51 = 160;
        int v54 = "dimensionsRequirement == 0";
        __uint64_t v47 = sub_D1CB0(4);
        long long v17 = "%lld %d AVE %s: %s:%d %s | OF: Dimension (%dx%d) is not supported";
LABEL_19:
        syslog(3, v17, v16, 20, v47, "AVE_OF_StartSession_Common", v51, v54, v56, v59);
        goto LABEL_28;
      }
      uint64_t v57 = a2;
      uint64_t v60 = v7;
      uint64_t v52 = 160;
      __uint64_t v55 = "dimensionsRequirement == 0";
      CFNumberRef v48 = v14;
      int v24 = "%lld %d AVE %s: %s:%d %s | OF: Dimension (%dx%d) is not supported";
      goto LABEL_27;
    }
    goto LABEL_28;
  }
  uint64_t v25 = sub_B85D8((uint64_t)a1, a3);
  if (v25)
  {
    uint64_t v26 = v25;
    if (sub_D1C38(0x14u, 4))
    {
      int v27 = sub_D1C7C(0x14u);
      __uint64_t v28 = sub_DDEFC();
      __uint64_t v29 = (const char *)sub_D1CB0(4);
      if (v27)
      {
        printf("%lld %d AVE %s: %s:%d %s | OF: AVE_SetSessionProperties failed, err = %d\n", v28, 20, v29, "AVE_OF_StartSession_Common", 164, "err == noErr", v26);
        __uint64_t v30 = sub_DDEFC();
        sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | OF: AVE_SetSessionProperties failed, err = %d", v30);
        goto LABEL_29;
      }
      uint64_t v58 = v26;
      uint64_t v53 = 164;
      CFTypeID v50 = v29;
      __uint64_t v45 = "%lld %d AVE %s: %s:%d %s | OF: AVE_SetSessionProperties failed, err = %d";
LABEL_46:
      syslog(3, v45, v28, 20, v50, "AVE_OF_StartSession_Common", v53, "err == noErr", v58);
    }
  }
  else
  {
    uint64_t v26 = sub_B9860((uint64_t)a1);
    if (!v26)
    {
      *CFNumberRef v6 = 0;
      a1[14] = 30566;
      goto LABEL_29;
    }
    if (sub_D1C38(0x14u, 4))
    {
      int v42 = sub_D1C7C(0x14u);
      __uint64_t v28 = sub_DDEFC();
      uint64_t v43 = (const char *)sub_D1CB0(4);
      if (v42)
      {
        printf("%lld %d AVE %s: %s:%d %s | OF: AVE_OF_VerifySessionProperties failed, err = %d\n", v28, 20, v43, "AVE_OF_StartSession_Common", 168, "err == noErr", v26);
        __uint64_t v44 = sub_DDEFC();
        sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | OF: AVE_OF_VerifySessionProperties failed, err = %d", v44);
        goto LABEL_29;
      }
      uint64_t v58 = v26;
      uint64_t v53 = 168;
      CFTypeID v50 = v43;
      __uint64_t v45 = "%lld %d AVE %s: %s:%d %s | OF: AVE_OF_VerifySessionProperties failed, err = %d";
      goto LABEL_46;
    }
  }
LABEL_29:
  if (v6[17])
  {
    *(void *)(v6 + 21) = sub_DDEFC();
    if (sub_D1C38(0x14u, 6))
    {
      int v31 = sub_D1C7C(0x14u);
      __uint64_t v32 = sub_DDEFC();
      int v33 = (const char *)sub_D1CB0(6);
      int v34 = a1[15];
      if (v31)
      {
        printf("%lld %d AVE %s: OF: StartSession took %lld us for client ID (%d) \n", v32, 20, v33, *(void *)(v6 + 21) - *(void *)(v6 + 19), v34);
        __uint64_t v35 = sub_DDEFC();
        CFStringRef v36 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: OF: StartSession took %lld us for client ID (%d) ", v35, 20, v36, *(void *)(v6 + 21) - *(void *)(v6 + 19), a1[15]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: OF: StartSession took %lld us for client ID (%d) ", v32, 20, v33, *(void *)(v6 + 21) - *(void *)(v6 + 19), v34);
      }
    }
  }
  if (sub_D1C38(0x14u, 7))
  {
    int v37 = sub_D1C7C(0x14u);
    __uint64_t v38 = sub_DDEFC();
    uint64_t v39 = (const char *)sub_D1CB0(7);
    if (v37)
    {
      printf("%lld %d AVE %s: OF: Exit %s, err = %d\n", v38, 20, v39, "AVE_OF_StartSession_Common", v26);
      __uint64_t v40 = sub_DDEFC();
      CFNumberRef v49 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: OF: Exit %s, err = %d", v40, 20, v49, "AVE_OF_StartSession_Common", v26);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: OF: Exit %s, err = %d", v38, 20, v39, "AVE_OF_StartSession_Common", v26);
    }
  }
  return v26;
}

void sub_B948C(uint64_t a1)
{
  if (sub_D1C38(0x14u, 7))
  {
    int v2 = sub_D1C7C(0x14u);
    __uint64_t v3 = sub_DDEFC();
    __uint64_t v4 = (const char *)sub_D1CB0(7);
    if (v2)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_PrepareCropParams\n", v3, 20, v4);
      __uint64_t v5 = sub_DDEFC();
      __uint64_t v29 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PrepareCropParams", v5, 20, v29);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PrepareCropParams", v3, 20, v4);
    }
  }
  if (a1)
  {
    CFNumberRef v6 = (int *)(a1 + 165980);
    uint64_t v7 = a1 + 103124;
    int v8 = (unsigned char *)(a1 + 18346);
    unsigned int v9 = *(_DWORD *)(a1 + 1888);
    unsigned int v10 = *(_DWORD *)(a1 + 1892);
    *(unsigned char *)(a1 + 103124) = 0;
    *(void *)(a1 + 103136) = 0;
    *(void *)(a1 + 103128) = 0;
    if (v10 < 0x40 || (v10 & 0xF) != 0)
    {
      if (*v6 > 15 || *v6 >= 11 && !*v8) {
        *(_DWORD *)(a1 + 165992) = v10;
      }
      unsigned int v14 = (v10 + 15) & 0xFFFFFFF0;
      if (v14 <= 0x40) {
        unsigned int v14 = 64;
      }
      *(_DWORD *)(a1 + 1892) = v14;
      *(unsigned char *)uint64_t v7 = 1;
      *(_DWORD *)(a1 + 103140) = v14 - v10;
    }
    if (v9 < 0xA0 || (v9 & 0xF) != 0)
    {
      if (*v6 > 15 || *v6 >= 11 && !*v8) {
        *(_DWORD *)(a1 + 165988) = v9;
      }
      unsigned int v15 = (v9 + 15) & 0xFFFFFFF0;
      if (v15 <= 0xA0) {
        unsigned int v15 = 160;
      }
      *(_DWORD *)(a1 + 1888) = v15;
      *(unsigned char *)uint64_t v7 = 1;
      *(_DWORD *)(a1 + 103132) = v15 - v9;
    }
    if (sub_D1C38(0x16u, 7))
    {
      int v16 = sub_D1C7C(0x16u);
      __uint64_t v17 = sub_DDEFC();
      int v18 = (const char *)sub_D1CB0(7);
      if (v16)
      {
        printf("%lld %d AVE %s: FIG: input -> %dx%d\n", v17, 22, v18, v9, v10);
        __uint64_t v19 = sub_DDEFC();
        __uint64_t v30 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: FIG: input -> %dx%d", v19, 22, v30, v9, v10);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: input -> %dx%d", v17, 22, v18, v9, v10);
      }
    }
    if (sub_D1C38(0x16u, 7))
    {
      int v20 = sub_D1C7C(0x16u);
      __uint64_t v21 = sub_DDEFC();
      CFBooleanRef v22 = (const char *)sub_D1CB0(7);
      int v23 = *(_DWORD *)(a1 + 1892);
      if (v20)
      {
        printf("%lld %d AVE %s: FIG: input multiple -> %dx%d\n", v21, 22, v22, *(_DWORD *)(a1 + 1888), v23);
        __uint64_t v24 = sub_DDEFC();
        uint64_t v25 = (const char *)sub_D1CB0(7);
        syslog(3, "%lld %d AVE %s: FIG: input multiple -> %dx%d", v24, 22, v25, *(_DWORD *)(a1 + 1888), *(_DWORD *)(a1 + 1892));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: input multiple -> %dx%d", v21, 22, v22, *(_DWORD *)(a1 + 1888), v23);
      }
    }
    if (sub_D1C38(0x16u, 7))
    {
      int v26 = sub_D1C7C(0x16u);
      __uint64_t v27 = sub_DDEFC();
      __uint64_t v28 = (const char *)sub_D1CB0(7);
      if (v26)
      {
        printf("%lld %d AVE %s: FIG: frame_crop_bottom_offset %d frame_crop_right_offset %d\n", v27, 22, v28, *(_DWORD *)(v7 + 16), *(_DWORD *)(v7 + 8));
        sub_DDEFC();
        sub_D1CB0(7);
      }
      syslog(3, "%lld %d AVE %s: FIG: frame_crop_bottom_offset %d frame_crop_right_offset %d");
    }
  }
  else if (sub_D1C38(0x16u, 4))
  {
    int v11 = sub_D1C7C(0x16u);
    __uint64_t v12 = sub_DDEFC();
    __uint64_t v13 = (const char *)sub_D1CB0(4);
    if (v11)
    {
      printf("%lld %d AVE %s: FIG: pEncoderPrivateStorage == NULL\n", v12, 22, v13);
      sub_DDEFC();
      sub_D1CB0(4);
    }
    syslog(3, "%lld %d AVE %s: FIG: pEncoderPrivateStorage == NULL");
  }
}

uint64_t sub_B9860(uint64_t a1)
{
  uint64_t v1 = (int *)(a1 + 165980);
  if (*(unsigned char *)(a1 + 18357) && *v1 <= 7)
  {
    if (sub_D1C38(3u, 4))
    {
      int v8 = sub_D1C7C(3u);
      __uint64_t v9 = sub_DDEFC();
      unsigned int v10 = (const char *)sub_D1CB0(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s:%d %s | OF: TrueMotion is not supported on this Hw\n", v9, 3, v10, "AVE_OF_VerifySessionProperties", 907, "pEncoderPrivateStorage->DeviceType >= AVE_DevType_H13S");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | OF: TrueMotion is not supported on this Hw");
    }
    return 4294954394;
  }
  if (!*(unsigned char *)(a1 + 18346)) {
    return 0;
  }
  if (*v1 <= 5)
  {
    if (sub_D1C38(3u, 4))
    {
      int v11 = sub_D1C7C(3u);
      __uint64_t v12 = sub_DDEFC();
      __uint64_t v13 = (const char *)sub_D1CB0(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | OF: kAVEMotionVectorSize_4x4 is not supported on this Hw\n", v12, 3, v13, "AVE_OF_VerifySessionProperties", 916, "pEncoderPrivateStorage->DeviceType >= AVE_DevType_H13");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | OF: kAVEMotionVectorSize_4x4 is not supported on this Hw");
    }
    return 4294954394;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 1888);
  if (v2 > 0x1000 || (unsigned int v3 = *(_DWORD *)(a1 + 1892), v3 > 0x1000) || (result = 0, v2 >= 0x801) && v3 >= 0x801)
  {
    if (sub_D1C38(3u, 4))
    {
      int v5 = sub_D1C7C(3u);
      __uint64_t v6 = sub_DDEFC();
      uint64_t v7 = (const char *)sub_D1CB0(4);
      if (v5)
      {
        printf("%lld %d AVE %s: %s:%d %s | OF: Session is to large for kAVEMotionVectorSize_4x4\n", v6, 3, v7, "AVE_OF_VerifySessionProperties", 924, "false");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | OF: Session is to large for kAVEMotionVectorSize_4x4");
    }
    return 4294954394;
  }
  return result;
}

uint64_t sub_B9B24()
{
  uint64_t v0 = __chkstk_darwin();
  CFDictionaryRef v2 = v1;
  uint64_t v3 = v0;
  CVPixelBufferRef pixelBuffer = v4;
  char v98 = 0;
  int v5 = (_DWORD *)(v0 + 165868);
  int v97 = 0;
  int v96 = 0;
  if (sub_D1C38(0x14u, 7))
  {
    int v6 = sub_D1C7C(0x14u);
    __uint64_t v7 = sub_DDEFC();
    int v8 = (const char *)sub_D1CB0(7);
    if (v6)
    {
      printf("%lld %d AVE %s: OF: ENTER %s\n", v7, 20, v8, "AVE_OF_ProcessFrame_Common");
      __uint64_t v9 = sub_DDEFC();
      unsigned int v73 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: OF: ENTER %s", v9, 20, v73, "AVE_OF_ProcessFrame_Common");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: OF: ENTER %s", v7, 20, v8, "AVE_OF_ProcessFrame_Common");
    }
  }
  *(void *)(v5 + 19) = sub_DDEFC();
  __uint64_t v10 = sub_DDEFC();
  int v11 = pixelBuffer;
  v5[30] = CVPixelBufferGetWidthOfPlane(pixelBuffer, 0);
  v5[31] = CVPixelBufferGetHeightOfPlane(v11, 0);
  if (!*v5)
  {
    __uint64_t v12 = (char *)sub_C7604();
    v100[0] = *(void *)(v3 + 1888);
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v11);
    unsigned int v14 = sub_D7E18(PixelFormatType);
    if (!v14)
    {
      if (sub_D1C38(3u, 4))
      {
        int v28 = sub_D1C7C(3u);
        __uint64_t v29 = sub_DDEFC();
        __uint64_t v30 = (const char *)sub_D1CB0(4);
        int v31 = *(_DWORD *)(v3 + 60);
        OSType v32 = CVPixelBufferGetPixelFormatType(v11);
        if (v28)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to find pixel format %p %d 0x%x\n", v29, 3, v30, "AVE_OF_ProcessFrame_Common", 214, "pPixelFmt != __null", (const void *)v3, v31, v32);
          __uint64_t v29 = sub_DDEFC();
          sub_D1CB0(4);
          CVPixelBufferGetPixelFormatType(v11);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to find pixel format %p %d 0x%x", v29, 3);
      }
      goto LABEL_44;
    }
    if (v12[792]) {
      unsigned int v15 = v12 + 792;
    }
    else {
      unsigned int v15 = 0;
    }
    sub_49A0(*(void *)(v3 + 192), v15, v5[27], 2, *((_DWORD *)v12 + 196), *((_DWORD *)v12 + 197), v100, 1, *((_DWORD *)v14 + 3), *((_DWORD *)v14 + 1), 0);
    int v11 = pixelBuffer;
  }
  sub_5058(*(_DWORD **)(v3 + 192), 0, v11);
  int v16 = *(_DWORD *)(v3 + 56);
  if (v16 == 30566)
  {
    uint64_t v20 = sub_BA7E4(v3, &pixelBuffer, &v98, &v97, &v96, 1);
    if (v20)
    {
      uint64_t v21 = v20;
      if (sub_D1C38(0x14u, 4))
      {
        int v22 = sub_D1C7C(0x14u);
        __uint64_t v23 = sub_DDEFC();
        __uint64_t v24 = (const char *)sub_D1CB0(4);
        if (v22)
        {
          printf("%lld %d AVE %s: %s:%d %s | OF: AVE_OF_VerifyImageBuffer failed, err = %d\n", v23, 20, v24, "AVE_OF_ProcessFrame_Common", 257, "err == noErr", v21);
          __uint64_t v23 = sub_DDEFC();
          uint64_t v77 = v21;
          int v74 = sub_D1CB0(4);
        }
        else
        {
          uint64_t v77 = v21;
          int v74 = (void *)v24;
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | OF: AVE_OF_VerifyImageBuffer failed, err = %d", v23, 20, v74, "AVE_OF_ProcessFrame_Common", 257, "err == noErr", v77);
      }
      goto LABEL_44;
    }
    if (v5[17])
    {
      *(void *)(v5 + 21) = sub_DDEFC();
      if (sub_D1C38(0x14u, 6))
      {
        int v36 = sub_D1C7C(0x14u);
        __uint64_t v37 = sub_DDEFC();
        __uint64_t v38 = (const char *)sub_D1CB0(6);
        uint64_t v39 = *(void *)(v5 + 21) - *(void *)(v5 + 19);
        int v40 = *v5;
        if (v36)
        {
          printf("%lld %d AVE %s: OF: InitSetup took %lld us for client ID (%d), frame number (%d)\n", v37, 20, v38, v39, *(_DWORD *)(v3 + 60), v40);
          __uint64_t v41 = sub_DDEFC();
          int v42 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: OF: InitSetup took %lld us for client ID (%d), frame number (%d)", v41, 20, v42, *(void *)(v5 + 21) - *(void *)(v5 + 19), *(_DWORD *)(v3 + 60), *v5);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: OF: InitSetup took %lld us for client ID (%d), frame number (%d)", v37, 20, v38, v39, *(_DWORD *)(v3 + 60), v40);
        }
      }
      *(void *)(v5 + 19) = sub_DDEFC();
    }
    long long v105 = 0u;
    long long v104 = 0u;
    long long v103 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    v100[0] = v3 + 1880;
    v100[1] = v3 + 1888;
    v100[2] = v3 + 18648;
    v100[3] = v3 + 200;
    *((void *)&v101 + 1) = *(void *)(v3 + 192);
    *(void *)&long long v104 = v3 + 20376;
    *((void *)&v104 + 1) = v3 + 102528;
    uint64_t v106 = 0;
    *((void *)&v105 + 1) = v3 + 110452;
    uint64_t v107 = v3 + 120088;
    uint64_t v108 = v3 + 141840;
    __uint64_t v109 = v10;
    int v49 = sub_B25A4(*(void *)(v3 + 16), (uint64_t)v100, v3 + 24, 1, 0, *(void *)(v3 + 8), *((unsigned __int8 *)v5 + 92), 0, v3 + 64, (_DWORD *)(v3 + 20184), 0);
    if (v49)
    {
      int v50 = v49;
      if (sub_D1C38(0x14u, 4))
      {
        int v51 = sub_D1C7C(0x14u);
        __uint64_t v52 = sub_DDEFC();
        uint64_t v53 = (const char *)sub_D1CB0(4);
        if (v51)
        {
          printf("%lld %d AVE %s: %s:%d %s | OF: AVE_USL_Drv_Start failed, err = %d\n", v52, 20, v53, "AVE_OF_ProcessFrame_Common", 305, "err == noErr", v50);
          __uint64_t v52 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | OF: AVE_USL_Drv_Start failed, err = %d", v52);
      }
      goto LABEL_83;
    }
    *(_DWORD *)(v3 + 56) = 30568;
    if (!v5[17]) {
      goto LABEL_68;
    }
    *(void *)(v5 + 21) = sub_DDEFC();
    if (sub_D1C38(0x14u, 6))
    {
      int v54 = sub_D1C7C(0x14u);
      __uint64_t v55 = sub_DDEFC();
      uint64_t v56 = (const char *)sub_D1CB0(6);
      if (v54)
      {
        printf("%lld %d AVE %s: OF: DriverInit took %lld us for client ID (%d), frame number (%d)\n", v55, 20, v56, *(void *)(v5 + 21) - *(void *)(v5 + 19), *(_DWORD *)(v3 + 60), *v5);
        sub_DDEFC();
        sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: OF: DriverInit took %lld us for client ID (%d), frame number (%d)");
    }
    goto LABEL_67;
  }
  if (v16 != 30568)
  {
    if (sub_D1C38(0x14u, 4))
    {
      int v25 = sub_D1C7C(0x14u);
      __uint64_t v26 = sub_DDEFC();
      __uint64_t v27 = (const char *)sub_D1CB0(4);
      if (v25)
      {
        printf("%lld %d AVE %s: %s:%d %s | OF: Incorrect session status = 0x%08x.\n", v26, 20, v27, "AVE_OF_ProcessFrame_Common", 324, "false", *(_DWORD *)(v3 + 56));
        __uint64_t v26 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | OF: Incorrect session status = 0x%08x.", v26);
    }
    uint64_t v43 = 4294954393;
    goto LABEL_45;
  }
  if (sub_BA7E4(v3, &pixelBuffer, &v98, &v97, &v96, 0))
  {
    if (sub_D1C38(3u, 4))
    {
      int v17 = sub_D1C7C(3u);
      __uint64_t v18 = sub_DDEFC();
      __uint64_t v19 = (const char *)sub_D1CB0(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | OF: AVE_OF_VerifyImageBuffer failed.\n", v18, 3, v19, "AVE_OF_ProcessFrame_Common", 233, "err == noErr");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | OF: AVE_OF_VerifyImageBuffer failed.");
    }
LABEL_44:
    uint64_t v43 = 4294954394;
    goto LABEL_45;
  }
  if (v5[17] && *(_DWORD *)(v3 + 56) == 30568)
  {
    *(void *)(v5 + 21) = sub_DDEFC();
    if (sub_D1C38(0x14u, 6))
    {
      int v33 = sub_D1C7C(0x14u);
      __uint64_t v34 = sub_DDEFC();
      __uint64_t v35 = (const char *)sub_D1CB0(6);
      if (v33)
      {
        printf("%lld %d AVE %s: OF: VerifyImageBuffer took %lld us for client ID (%d), frame number (%d)\n", v34, 20, v35, *(void *)(v5 + 21) - *(void *)(v5 + 19), *(_DWORD *)(v3 + 60), *v5);
        sub_DDEFC();
        sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: OF: VerifyImageBuffer took %lld us for client ID (%d), frame number (%d)");
    }
LABEL_67:
    *(void *)(v5 + 19) = sub_DDEFC();
  }
LABEL_68:
  *(_DWORD *)(v3 + 56) = 30568;
  long long v80 = 0u;
  uint64_t v81 = 0;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  memset(v78, 0, sizeof(v78));
  uint64_t v79 = 0;
  bzero(v100, 0x4AF8uLL);
  CVPixelBufferRef v82 = pixelBuffer;
  LOBYTE(v91) = *((unsigned char *)v5 + 93);
  *((void *)&v91 + 1) = v10;
  long long v89 = *(_OWORD *)(v3 + 166008);
  *(void *)&long long v90 = v78;
  sub_BAAAC(v3, v2, (uint64_t)v100);
  *((void *)&v90 + 1) = v100;
  int v94 = *v5;
  int v95 = 0;
  int v57 = sub_B5104(*(void ***)(v3 + 16), (uint64_t)&v80);
  if (v57)
  {
    int v58 = v57;
    if (v57 == -536870173)
    {
      uint64_t v43 = 3758097123;
      if (sub_D1C38(0x14u, 5))
      {
        int v59 = sub_D1C7C(0x14u);
        __uint64_t v60 = sub_DDEFC();
        int v61 = (const char *)sub_D1CB0(5);
        if (v59)
        {
          printf("%lld %d AVE %s: OF: device returned kIOReturnNoPower, reject the frame\n", v60, 20, v61);
          __uint64_t v62 = sub_DDEFC();
          double v76 = (const char *)sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: OF: device returned kIOReturnNoPower, reject the frame", v62, 20, v76);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: OF: device returned kIOReturnNoPower, reject the frame", v60, 20, v61);
        }
      }
      goto LABEL_45;
    }
    if (sub_D1C38(0x14u, 4))
    {
      int v70 = sub_D1C7C(0x14u);
      __uint64_t v71 = sub_DDEFC();
      uint64_t v72 = (const char *)sub_D1CB0(4);
      if (v70)
      {
        printf("%lld %d AVE %s: %s:%d %s | OF: AVE_USL_Drv_Process failed, err = %d\n", v71, 20, v72, "AVE_OF_ProcessFrame_Common", 365, "err == noErr", v58);
        __uint64_t v71 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | OF: AVE_USL_Drv_Process failed, err = %d", v71);
    }
LABEL_83:
    uint64_t v43 = 4294954384;
    goto LABEL_45;
  }
  if (v5[17])
  {
    *(void *)(v5 + 21) = sub_DDEFC();
    if (sub_D1C38(0x14u, 6))
    {
      int v63 = sub_D1C7C(0x14u);
      __uint64_t v64 = sub_DDEFC();
      __uint64_t v65 = (const char *)sub_D1CB0(6);
      uint64_t v66 = *(void *)(v5 + 21) - *(void *)(v5 + 19);
      int v67 = *v5;
      if (v63)
      {
        printf("%lld %d AVE %s: OF: EncodeFrame took %lld us for client ID (%d), frame number (%d)\n", v64, 20, v65, v66, *(_DWORD *)(v3 + 60), v67);
        __uint64_t v68 = sub_DDEFC();
        uint64_t v69 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: OF: EncodeFrame took %lld us for client ID (%d), frame number (%d)", v68, 20, v69, *(void *)(v5 + 21) - *(void *)(v5 + 19), *(_DWORD *)(v3 + 60), *v5);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: OF: EncodeFrame took %lld us for client ID (%d), frame number (%d)", v64, 20, v65, v66, *(_DWORD *)(v3 + 60), v67);
      }
    }
  }
  uint64_t v43 = 0;
LABEL_45:
  if (v98 && pixelBuffer) {
    CVPixelBufferRelease(pixelBuffer);
  }
  ++*v5;
  if (sub_D1C38(0x14u, 7))
  {
    int v44 = sub_D1C7C(0x14u);
    __uint64_t v45 = sub_DDEFC();
    int v46 = (const char *)sub_D1CB0(7);
    if (v44)
    {
      printf("%lld %d AVE %s: OF: EXIT %s, err = %d\n", v45, 20, v46, "AVE_OF_ProcessFrame_Common", v43);
      __uint64_t v47 = sub_DDEFC();
      double v75 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: OF: EXIT %s, err = %d", v47, 20, v75, "AVE_OF_ProcessFrame_Common", v43);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: OF: EXIT %s, err = %d", v45, 20, v46, "AVE_OF_ProcessFrame_Common", v43);
    }
  }
  return v43;
}

uint64_t sub_BA7E4(uint64_t a1, CVPixelBufferRef *a2, unsigned char *a3, _DWORD *a4, _DWORD *a5, int a6)
{
  int v11 = (_DWORD *)(a1 + 165868);
  uint64_t v12 = a1 + 17888;
  memset(v39, 0, sizeof(v39));
  long long v38 = 0u;
  long long v37 = 0u;
  long long v36 = 0u;
  long long v35 = 0u;
  long long v34 = 0u;
  long long v33 = 0u;
  unsigned int v13 = *(_DWORD *)(a1 + 165988);
  if (!v13) {
    unsigned int v13 = *(_DWORD *)(a1 + 1888);
  }
  unsigned int v28 = v13;
  int v14 = *(_DWORD *)(a1 + 165992);
  if (!v14) {
    int v14 = *(_DWORD *)(a1 + 1892);
  }
  int v29 = v14;
  int v15 = *(_DWORD *)(a1 + 18768);
  uint64_t v30 = *(void *)(a1 + 165976);
  int v31 = *(_DWORD *)(a1 + 1884);
  int v32 = v15;
  uint64_t v16 = sub_E2B0(&v28, a2, (CVPixelBufferPoolRef *)(a1 + 166000));
  if (!v16)
  {
    *a3 = v39[6];
    int v18 = HIDWORD(v38);
    *a4 = DWORD2(v38);
    *a5 = v18;
    int v19 = v11[28];
    if (v19 <= 15 && (v19 < 11 || *(unsigned char *)(v12 + 458)))
    {
      *(_WORD *)(v12 + 456) = BYTE1(v39[6]);
      goto LABEL_14;
    }
    *(_WORD *)(v12 + 456) = 0;
    unsigned int v20 = v28;
    char v21 = BYTE8(v35) - 1;
    char v22 = 1;
    *(_WORD *)(v12 + 460) = 1 << (BYTE8(v35) - 1);
    *(_DWORD *)(v12 + 464) = 65537 << v21;
    if (v20 == *(_DWORD *)(a1 + 1888))
    {
      if (v29 == *(_DWORD *)(a1 + 1892))
      {
LABEL_14:
        char v22 = BYTE2(v39[6]);
        goto LABEL_15;
      }
      char v22 = 1;
    }
LABEL_15:
    *(unsigned char *)(v12 + 974) = v22;
    int v23 = HIDWORD(v36);
    *(unsigned char *)(v12 + 132) = (HIDWORD(v36) & 0xFFFFFFFE) == 2;
    if (v23 == 3) {
      *(unsigned char *)(v12 + 459) = BYTE4(v37);
    }
    if (a6)
    {
      int v24 = DWORD2(v35);
      *(_DWORD *)(v12 + 876) = DWORD1(v35);
      *(_DWORD *)(a1 + 103100) = v36;
      *(_DWORD *)(v12 + 40) = v24;
      *(unsigned char *)uint64_t v12 = v23 != 1;
      *(unsigned char *)(v12 + 889) = 1;
    }
    if (*v11)
    {
      if (*(_DWORD *)(v12 + 2484) != DWORD1(v35) && sub_D1C38(0x16u, 4))
      {
        int v25 = sub_D1C7C(0x16u);
        __uint64_t v26 = sub_DDEFC();
        __uint64_t v27 = (const char *)sub_D1CB0(4);
        if (v25)
        {
          printf("%lld %d AVE %s: %s:%d input pixel format change %d %d 0x%x 0x%x\n", v26, 22, v27, "AVE_OF_VerifyImageBuffer", 586, *(_DWORD *)(a1 + 60), *v11, *(_DWORD *)(v12 + 2484), DWORD1(v35));
          __uint64_t v26 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d input pixel format change %d %d 0x%x 0x%x", v26, 22);
      }
    }
    else
    {
      *(_DWORD *)(v12 + 2484) = DWORD1(v35);
    }
  }
  return v16;
}

uint64_t sub_BAAAC(uint64_t a1, CFDictionaryRef theDict, uint64_t a3)
{
  if (!a1)
  {
    if (sub_D1C38(3u, 4))
    {
      int v7 = sub_D1C7C(3u);
      __uint64_t v8 = sub_DDEFC();
      __uint64_t v9 = (const char *)sub_D1CB0(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_GetPerFrameData pEncoderPrivateStorage = NULL.\n", v8, 3, v9, "AVE_GetPerFrameData", 1047, "pEncoderPrivateStorage != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_GetPerFrameData pEncoderPrivateStorage = NULL.");
    }
    return 4294954384;
  }
  if (!a3)
  {
    if (sub_D1C38(3u, 4))
    {
      int v10 = sub_D1C7C(3u);
      __uint64_t v11 = sub_DDEFC();
      uint64_t v12 = (const char *)sub_D1CB0(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_GetPerFrameData PerFrameCFDataRef Data = NULL.\n", v11, 3, v12, "AVE_GetPerFrameData", 1048, "PerFrameData != __null");
        sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_GetPerFrameData PerFrameCFDataRef Data = NULL.");
    }
    return 4294954384;
  }
  *(unsigned char *)(a3 + 1537) = *(unsigned char *)(a1 + 18020);
  int v4 = *(_DWORD *)(a1 + 165988);
  if (!v4) {
    int v4 = *(_DWORD *)(a1 + 1888);
  }
  *(_DWORD *)(a3 + 724) = v4;
  int v5 = *(_DWORD *)(a1 + 165992);
  if (!v5) {
    int v5 = *(_DWORD *)(a1 + 1892);
  }
  *(_DWORD *)(a3 + 728) = v5;
  if (!theDict) {
    return 0;
  }
  uint64_t result = (uint64_t)CFDictionaryGetValue(theDict, @"MakeKeyFrame");
  if (result)
  {
    uint64_t result = CFEqual((CFTypeRef)result, kCFBooleanTrue);
    if (result)
    {
      uint64_t result = 0;
      *(_DWORD *)a3 = 2;
    }
  }
  return result;
}

uint64_t sub_BACDC(uint64_t a1)
{
  uint64_t v2 = a1 + 165936;
  if (sub_D1C38(0x14u, 7))
  {
    int v3 = sub_D1C7C(0x14u);
    __uint64_t v4 = sub_DDEFC();
    int v5 = (const char *)sub_D1CB0(7);
    if (v3)
    {
      printf("%lld %d AVE %s: OF: ENTER %s\n", v4, 20, v5, "AVE_OF_Invalidate_Common");
      __uint64_t v6 = sub_DDEFC();
      int v23 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: OF: ENTER %s", v6, 20, v23, "AVE_OF_Invalidate_Common");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: OF: ENTER %s", v4, 20, v5, "AVE_OF_Invalidate_Common");
    }
  }
  if (*(_DWORD *)v2) {
    *(void *)(v2 + 8) = sub_DDEFC();
  }
  __uint64_t v26 = sub_DDEFC();
  if (*(_DWORD *)(a1 + 56) == 30568 && (int v7 = sub_B490C(*(void ***)(a1 + 16), &v26)) != 0)
  {
    int v8 = v7;
    if (sub_D1C38(0x14u, 4))
    {
      int v9 = sub_D1C7C(0x14u);
      __uint64_t v10 = sub_DDEFC();
      __uint64_t v11 = (const char *)sub_D1CB0(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | OF: AVE_USL_Drv_Complete failed, err = %d\n", v10, 20, v11, "AVE_OF_Invalidate_Common", 416, "err == noErr", v8);
        __uint64_t v10 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | OF: AVE_USL_Drv_Complete failed, err = %d", v10);
    }
    uint64_t v17 = 4294954384;
  }
  else
  {
    if (*(_DWORD *)v2)
    {
      *(void *)(v2 + 16) = sub_DDEFC();
      if (sub_D1C38(0x14u, 6))
      {
        int v12 = sub_D1C7C(0x14u);
        __uint64_t v13 = sub_DDEFC();
        int v14 = (const char *)sub_D1CB0(6);
        uint64_t v15 = *(void *)(v2 + 16) - *(void *)(v2 + 8);
        if (v12)
        {
          printf("%lld %d AVE %s: OF: Invalidate took %lld us\n", v13, 20, v14, v15);
          __uint64_t v16 = sub_DDEFC();
          int v24 = (const char *)sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: OF: Invalidate took %lld us", v16, 20, v24, *(void *)(v2 + 16) - *(void *)(v2 + 8));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: OF: Invalidate took %lld us", v13, 20, v14, v15);
        }
      }
    }
    uint64_t v17 = 0;
  }
  if (sub_D1C38(0x14u, 7))
  {
    int v18 = sub_D1C7C(0x14u);
    __uint64_t v19 = sub_DDEFC();
    unsigned int v20 = (const char *)sub_D1CB0(7);
    if (v18)
    {
      printf("%lld %d AVE %s: OF: EXIT %s, err = %d\n", v19, 20, v20, "AVE_OF_Invalidate_Common", v17);
      __uint64_t v21 = sub_DDEFC();
      int v25 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: OF: EXIT %s, err = %d", v21, 20, v25, "AVE_OF_Invalidate_Common", v17);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: OF: EXIT %s, err = %d", v19, 20, v20, "AVE_OF_Invalidate_Common", v17);
    }
  }
  return v17;
}

void sub_BB004(uint64_t a1)
{
  uint64_t v2 = a1 + 165936;
  if (sub_D1C38(0x14u, 7))
  {
    int v3 = sub_D1C7C(0x14u);
    __uint64_t v4 = sub_DDEFC();
    int v5 = (const char *)sub_D1CB0(7);
    if (v3)
    {
      printf("%lld %d AVE %s: OF: ENTER %s\n", v4, 20, v5, "AVE_OF_Finalize_Common");
      __uint64_t v6 = sub_DDEFC();
      int v25 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: OF: ENTER %s", v6, 20, v25, "AVE_OF_Finalize_Common");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: OF: ENTER %s", v4, 20, v5, "AVE_OF_Finalize_Common");
    }
  }
  if (*(_DWORD *)v2) {
    *(void *)(v2 + 8) = sub_DDEFC();
  }
  __uint64_t v7 = sub_DDEFC();
  if (*(_DWORD *)(a1 + 56) == 30568)
  {
    __uint64_t v29 = v7;
    sub_B1E0C(*(void ***)(a1 + 16), (uint64_t *)&v29, 1);
  }
  uint64_t v8 = sub_AFB20(*(unsigned int **)(a1 + 16));
  *(void *)(a1 + 16) = 0;
  if (v8)
  {
    uint64_t v9 = v8;
    if (sub_D1C38(0x14u, 4))
    {
      int v10 = sub_D1C7C(0x14u);
      __uint64_t v11 = sub_DDEFC();
      int v12 = (const char *)sub_D1CB0(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | OF: AVE_USL_Drv_Destroy failed, err = %d\n", v11, 20, v12, "AVE_OF_Finalize_Common", 470, "err == noErr", v9);
        __uint64_t v11 = sub_DDEFC();
        uint64_t v28 = v9;
        __uint64_t v26 = sub_D1CB0(4);
      }
      else
      {
        uint64_t v28 = v9;
        __uint64_t v26 = (void *)v12;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | OF: AVE_USL_Drv_Destroy failed, err = %d", v11, 20, v26, "AVE_OF_Finalize_Common", 470, "err == noErr", v28);
    }
  }
  else if (*(_DWORD *)v2)
  {
    *(void *)(v2 + 16) = sub_DDEFC();
    if (sub_D1C38(0x14u, 6))
    {
      int v13 = sub_D1C7C(0x14u);
      __uint64_t v14 = sub_DDEFC();
      uint64_t v15 = (const char *)sub_D1CB0(6);
      if (v13)
      {
        printf("%lld %d AVE %s: OF: Finalize took %lld us\n", v14, 20, v15, *(void *)(v2 + 16) - *(void *)(v2 + 8));
        sub_DDEFC();
        sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: OF: Finalize took %lld us");
    }
  }
  __uint64_t v16 = *(const void **)(a1 + 192);
  if (v16)
  {
    sub_4E9C(v16);
    sub_4178(*(void **)(a1 + 192));
    *(void *)(a1 + 192) = 0;
  }
  uint64_t v17 = *(const void **)(v2 + 32);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(v2 + 32) = 0;
  }
  int v18 = *(const void **)(a1 + 8);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(a1 + 8) = 0;
  }
  __uint64_t v19 = *(const void **)(v2 + 64);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(v2 + 64) = 0;
  }
  unsigned int v20 = *(const void **)(v2 + 104);
  if (v20)
  {
    CFRelease(v20);
    *(void *)(v2 + 104) = 0;
  }
  sub_C8E18();
  if (sub_D1C38(0x14u, 7))
  {
    int v21 = sub_D1C7C(0x14u);
    __uint64_t v22 = sub_DDEFC();
    int v23 = (const char *)sub_D1CB0(7);
    if (v21)
    {
      printf("%lld %d AVE %s: OF: EXIT %s\n", v22, 20, v23, "AVE_OF_Finalize_Common");
      __uint64_t v24 = sub_DDEFC();
      __uint64_t v27 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: OF: EXIT %s", v24, 20, v27, "AVE_OF_Finalize_Common");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: OF: EXIT %s", v22, 20, v23, "AVE_OF_Finalize_Common");
    }
  }
}

uint64_t sub_BB380(int a1, int a2, int a3, int a4, __CFDictionary **a5)
{
  *a5 = 0;
  CFMutableDataRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    __uint64_t v11 = Mutable;
    int v12 = sub_C347C(kIOSurfaceCacheMode, a1, Mutable);
    int v13 = sub_C347C(kIOSurfaceMapCacheAttribute, a2, v11) + v12;
    int v14 = v13 + sub_C347C(kIOSurfacePixelFormat, a3, v11);
    int v15 = vm_page_size;
    if (vm_page_size <= 0x4000) {
      int v15 = 0x4000;
    }
    int v16 = (a4 + v15 - 1) & -v15;
    if (!(v14 + sub_C347C(kIOSurfaceAllocSize, v16, v11)))
    {
      uint64_t result = 0;
      *a5 = v11;
      return result;
    }
    if (sub_D1C38(0x4Cu, 4))
    {
      int v21 = sub_D1C7C(0x4Cu);
      __uint64_t v22 = sub_DDEFC();
      int v23 = (const char *)sub_D1CB0(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed to add keys %d %d 0x%x %d %p\n", v22, 76, v23, "AVE_USL_Surface", "CreateDict", 49, "ret == 0", a1, a2, a3, v16, v11);
        __uint64_t v24 = sub_DDEFC();
        int v25 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to add keys %d %d 0x%x %d %p", v24, 76, v25, "AVE_USL_Surface");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to add keys %d %d 0x%x %d %p", v22, 76, v23, "AVE_USL_Surface");
      }
    }
    CFRelease(v11);
  }
  else if (sub_D1C38(0x4Cu, 4))
  {
    int v18 = sub_D1C7C(0x4Cu);
    __uint64_t v19 = sub_DDEFC();
    unsigned int v20 = (const char *)sub_D1CB0(4);
    if (v18)
    {
      printf("%lld %d AVE %s: %s::%s:%d %s | failed to create CFDictionary\n", v19, 76, v20, "AVE_USL_Surface", "CreateDict", 36, "pDict != __null");
      __uint64_t v19 = sub_DDEFC();
      sub_D1CB0(4);
    }
    syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create CFDictionary", v19);
  }
  return 4294966293;
}

uint64_t sub_BB688(int a1, int a2, int a3, int a4, IOSurfaceRef *a5)
{
  uint64_t v30 = 0;
  if (a4 >= 1 && a5)
  {
    *a5 = 0;
    uint64_t v10 = sub_BB380(a1, a2, a3, a4, &v30);
    if (v10)
    {
      uint64_t v11 = v10;
      if (sub_D1C38(0x4Cu, 4))
      {
        int v12 = sub_D1C7C(0x4Cu);
        __uint64_t v13 = sub_DDEFC();
        int v14 = (const char *)sub_D1CB0(4);
        if (v12)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | failed to create surface dictionary %d %d %d %d %d\n", v13, 76, v14, "AVE_USL_Surface", "CreateIOSurface", 94, "ret == 0", a1, a2, a3, a4, v11);
          __uint64_t v15 = sub_DDEFC();
          __uint64_t v27 = sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create surface dictionary %d %d %d %d %d", v15, 76, v27, "AVE_USL_Surface");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create surface dictionary %d %d %d %d %d", v13, 76, v14, "AVE_USL_Surface");
        }
      }
    }
    else
    {
      unsigned int v20 = v30;
      IOSurfaceRef v21 = IOSurfaceCreate(v30);
      if (v21)
      {
        uint64_t v11 = 0;
        *a5 = v21;
        if (!v20) {
          return v11;
        }
        goto LABEL_22;
      }
      if (sub_D1C38(0x4Cu, 4))
      {
        int v22 = sub_D1C7C(0x4Cu);
        __uint64_t v23 = sub_DDEFC();
        __uint64_t v24 = (const char *)sub_D1CB0(4);
        if (v22)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | failed to create surface %d %d %d %d\n", v23, 76, v24, "AVE_USL_Surface", "CreateIOSurface", 99, "pSurface != __null", a1, a2, a3, a4);
          __uint64_t v25 = sub_DDEFC();
          __uint64_t v29 = sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create surface %d %d %d %d", v25, 76, v29);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create surface %d %d %d %d", v23, 76, v24);
        }
      }
      uint64_t v11 = 4294966296;
    }
  }
  else
  {
    if (sub_D1C38(0x4Cu, 4))
    {
      int v16 = sub_D1C7C(0x4Cu);
      __uint64_t v17 = sub_DDEFC();
      int v18 = (const char *)sub_D1CB0(4);
      if (v16)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %d %d %d %d %p\n", v17, 76, v18, "AVE_USL_Surface", "CreateIOSurface", 88, "size > 0 && ppSurface != __null", a1, a2, a3, a4, a5);
        __uint64_t v19 = sub_DDEFC();
        uint64_t v28 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %d %d %d %d %p", v19, 76, v28, "AVE_USL_Surface");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %d %d %d %d %p", v17, 76, v18, "AVE_USL_Surface");
      }
    }
    uint64_t v11 = 4294966295;
  }
  unsigned int v20 = v30;
  if (v30) {
LABEL_22:
  }
    CFRelease(v20);
  return v11;
}

uint64_t sub_BBA54(uint64_t result)
{
  *(unsigned char *)uint64_t result = 0;
  *(void *)(result + 64) = 0;
  *(_DWORD *)(result + 72) = 0;
  *(void *)(result + 80) = 0;
  *(void *)(result + 88) = 0;
  return result;
}

uint64_t sub_BBA6C(uint64_t a1, __IOSurface *a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v28 = 0u;
  long long v29 = 0u;
  *(_OWORD *)cStr = 0u;
  long long v27 = 0u;
  if (a2)
  {
    if ((a3 & 8) == 0)
    {
LABEL_5:
      if (a4) {
        LOBYTE(v15) = (_BYTE)a4;
      }
      else {
        __uint64_t v15 = &unk_133235;
      }
      sub_DD92C((char *)a1, 64, "%s", (uint64_t)a4, a5, a6, a7, a8, (char)v15);
      int AllocSize = IOSurfaceGetAllocSize(a2);
      uint64_t result = 0;
      *(_DWORD *)(a1 + 72) = AllocSize;
      *(void *)(a1 + 64) = a2;
      *(void *)(a1 + 80) = a5;
      return result;
    }
    sub_DD92C(cStr, 64, "%s%s%s", (uint64_t)a4, a5, a6, a7, a8, (char)"AVE2");
    CFStringRef v13 = CFStringCreateWithCString(0, cStr, 0);
    if (v13)
    {
      CFStringRef v14 = v13;
      IOSurfaceSetValue(a2, kIOSurfaceName, v13);
      CFRelease(v14);
      goto LABEL_5;
    }
    if (sub_D1C38(0x4Cu, 4))
    {
      int v22 = sub_D1C7C(0x4Cu);
      __uint64_t v23 = sub_DDEFC();
      __uint64_t v24 = (const char *)sub_D1CB0(4);
      if (v22)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed to create CFString %s\n", v23, 76, v24, "AVE_USL_Surface", "Create", 169, "pNameStr != __null", cStr);
        __uint64_t v23 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create CFString %s", v23, 76);
    }
    return 4294966293;
  }
  else
  {
    if (sub_D1C38(0x4Cu, 4))
    {
      int v18 = sub_D1C7C(0x4Cu);
      __uint64_t v19 = sub_DDEFC();
      unsigned int v20 = (const char *)sub_D1CB0(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %p 0x%llx %p 0x%llx\n", v19, 76, v20, "AVE_USL_Surface", "Create", 160, "pSurface != __null", (const void *)a1, 0, a3, a4, a5);
        __uint64_t v21 = sub_DDEFC();
        __uint64_t v25 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %p 0x%llx %p 0x%llx", v21, 76, v25, "AVE_USL_Surface", "Create", 160);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %p 0x%llx %p 0x%llx", v19, 76, v20, "AVE_USL_Surface", "Create", 160);
      }
    }
    return 4294966295;
  }
}

uint64_t sub_BBDA0(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, const void *a7, uint64_t a8)
{
  IOSurfaceRef v34 = 0;
  if (a5 > 0)
  {
    int v16 = vm_page_size;
    if (vm_page_size <= 0x4000) {
      int v16 = 0x4000;
    }
    int v17 = (a5 + v16 - 1) & -v16;
    uint64_t v18 = sub_BB688(a2, a3, a4, v17, &v34);
    if (v18)
    {
      uint64_t v22 = v18;
      if (sub_D1C38(0x4Cu, 4))
      {
        int v23 = sub_D1C7C(0x4Cu);
        __uint64_t v24 = sub_DDEFC();
        __uint64_t v25 = (const char *)sub_D1CB0(4);
        if (v23)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | failed to create surface %p %d %d %d %d %d\n", v24, 76, v25, "AVE_USL_Surface", "Create", 262, "ret == 0", (const void *)a1, a2, a3, a4, v17, v22);
          __uint64_t v26 = sub_DDEFC();
          long long v27 = sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create surface %p %d %d %d %d %d", v26, 76, v27, "AVE_USL_Surface", "Create");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create surface %p %d %d %d %d %d", v24, 76, v25, "AVE_USL_Surface", "Create");
        }
      }
    }
    else
    {
      uint64_t v22 = sub_BBA6C(a1, v34, a6, a7, a8, v19, v20, v21);
      *(void *)(a1 + 80) |= 4uLL;
      if (!v22) {
        return v22;
      }
    }
    goto LABEL_17;
  }
  if (sub_D1C38(0x4Cu, 4))
  {
    int v28 = sub_D1C7C(0x4Cu);
    __uint64_t v29 = sub_DDEFC();
    uint64_t v30 = (const char *)sub_D1CB0(4);
    if (v28)
    {
      printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %d %d %d %d 0x%llx 0x%llx\n", v29, 76, v30, "AVE_USL_Surface", "Create", 249, "size > 0", (const void *)a1, a2, a3, a4, a5, a6, a8);
      __uint64_t v31 = sub_DDEFC();
      long long v33 = sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %d %d %d %d 0x%llx 0x%llx", v31, 76, v33, "AVE_USL_Surface", "Create", 249);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %d %d %d %d 0x%llx 0x%llx", v29, 76, v30, "AVE_USL_Surface", "Create", 249);
    }
    uint64_t v22 = 4294966295;
LABEL_17:
    if (v34) {
      CFRelease(v34);
    }
    goto LABEL_19;
  }
  uint64_t v22 = 4294966295;
LABEL_19:
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return v22;
}

uint64_t sub_BC0CC(unsigned char *a1)
{
  if (*((void *)a1 + 8))
  {
    uint64_t v2 = sub_BC314((uint64_t)a1);
    if (v2)
    {
      uint64_t v3 = v2;
      if (sub_D1C38(0x4Cu, 4))
      {
        int v4 = sub_D1C7C(0x4Cu);
        __uint64_t v5 = sub_DDEFC();
        __uint64_t v6 = (const char *)sub_D1CB0(4);
        if (v4)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | failed to do unlock %p %d\n", v5, 76, v6, "AVE_USL_Surface", "Destroy", 323, "ret == 0", a1, v3);
          __uint64_t v7 = sub_DDEFC();
          CFStringRef v13 = sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to do unlock %p %d", v7, 76, v13);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to do unlock %p %d", v5, 76, v6);
        }
      }
    }
    else
    {
      uint64_t v11 = (const void *)*((void *)a1 + 8);
      if (v11)
      {
        CFRelease(v11);
        *((void *)a1 + 8) = 0;
      }
      uint64_t v3 = 0;
      *a1 = 0;
      *((_DWORD *)a1 + 18) = 0;
      *((void *)a1 + 10) = 0;
    }
  }
  else
  {
    if (sub_D1C38(0x4Cu, 4))
    {
      int v8 = sub_D1C7C(0x4Cu);
      __uint64_t v9 = sub_DDEFC();
      uint64_t v10 = (const char *)sub_D1CB0(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | surface is not created %p\n", v9, 76, v10, "AVE_USL_Surface", "Destroy", 297, "m_pcSurface != __null", a1);
        __uint64_t v9 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | surface is not created %p", v9, 76);
    }
    return 4294966285;
  }
  return v3;
}

uint64_t sub_BC314(uint64_t a1)
{
  uint64_t v2 = *(__IOSurface **)(a1 + 64);
  if (v2)
  {
    if (*(unsigned char *)(a1 + 89))
    {
      IOSurfaceUnlock(v2, 0, 0);
      uint64_t result = 0;
      *(void *)(a1 + 88) &= ~0x100uLL;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (sub_D1C38(0x4Cu, 4))
    {
      int v4 = sub_D1C7C(0x4Cu);
      __uint64_t v5 = sub_DDEFC();
      __uint64_t v6 = (const char *)sub_D1CB0(4);
      if (v4)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | surface is not created %p %s\n", v5, 76, v6, "AVE_USL_Surface", "Unlock", 415, "m_pcSurface != __null", (const void *)a1, (const char *)a1);
        __uint64_t v7 = sub_DDEFC();
        int v8 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | surface is not created %p %s", v7, 76, v8);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | surface is not created %p %s", v5, 76, v6);
      }
    }
    return 4294966285;
  }
  return result;
}

uint64_t sub_BC470(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  memset(v47, 0, sizeof(v47));
  char v46 = 0;
  unsigned int v45 = 0;
  int v10 = (char)a3;
  if (sub_D1C38(a2, (char)a3))
  {
    sub_3444(a4, a5, (char *)v47, 32, v11, v12, v13, v14);
    __uint64_t v15 = *(__IOSurface **)(a1 + 64);
    if (v15)
    {
      unsigned int v45 = bswap32(IOSurfaceGetPixelFormat(v15));
      char v46 = 0;
    }
    if (sub_D1C38(a2, v10))
    {
      int v16 = sub_D1C7C(a2);
      int v17 = v16;
      if (a3 < 0)
      {
        if (!v16 || (-a3 & 0x20) != 0)
        {
          uint64_t v34 = *(void *)(a1 + 64);
          if (v34)
          {
            IOSurfaceGetID(*(IOSurfaceRef *)(a1 + 64));
            long long v35 = *(__IOSurface **)(a1 + 64);
            if (v35)
            {
              IOSurfaceGetUseCount(v35);
              long long v36 = *(__IOSurface **)(a1 + 64);
              if (v36) {
                IOSurfaceGetBaseAddress(v36);
              }
            }
          }
        }
        else
        {
          __uint64_t v26 = *(const void **)(a1 + 64);
          if (v26)
          {
            IOSurfaceID ID = IOSurfaceGetID(*(IOSurfaceRef *)(a1 + 64));
            uint64_t v28 = *(void *)(a1 + 88);
            BaseAddress = *(__IOSurface **)(a1 + 64);
            int v30 = *(_DWORD *)(a1 + 72);
            if (BaseAddress)
            {
              UseCFIndex Count = IOSurfaceGetUseCount(BaseAddress);
              BaseAddress = *(__IOSurface **)(a1 + 64);
              if (BaseAddress) {
                BaseAddress = (__IOSurface *)IOSurfaceGetBaseAddress(BaseAddress);
              }
            }
            else
            {
              UseCFIndex Count = 0;
            }
          }
          else
          {
            UseCFIndex Count = 0;
            IOSurfaceID ID = 0;
            BaseAddress = 0;
            int v30 = *(_DWORD *)(a1 + 72);
            uint64_t v28 = *(void *)(a1 + 88);
          }
          printf("Surface %s | Name: %s %p Surf %p ID %d Size %d OpFlag 0x%llx Cnt %d Addr %p PixelFmt %s \n", (const char *)v47, (const char *)a1, (const void *)a1, v26, ID, v30, v28, UseCount, BaseAddress, (const char *)&v45);
          uint64_t v34 = *(void *)(a1 + 64);
          if (v34)
          {
            IOSurfaceGetID(*(IOSurfaceRef *)(a1 + 64));
            __uint64_t v41 = *(__IOSurface **)(a1 + 64);
            if (v41)
            {
              IOSurfaceGetUseCount(v41);
              int v42 = *(__IOSurface **)(a1 + 64);
              if (v42) {
                IOSurfaceGetBaseAddress(v42);
              }
            }
          }
        }
        syslog(3, "Surface %s | Name: %s %p Surf %p ID %d Size %d OpFlag 0x%llx Cnt %d Addr %p PixelFmt %s ", v47, a1, a1, v34);
      }
      else
      {
        __uint64_t v18 = sub_DDEFC();
        uint64_t v19 = (const char *)sub_D1CB0(v10);
        uint64_t v20 = *(__IOSurface **)(a1 + 64);
        if ((a3 & 0x20) != 0 || !v17)
        {
          if (v20)
          {
            IOSurfaceGetID(*(IOSurfaceRef *)(a1 + 64));
            int v32 = *(__IOSurface **)(a1 + 64);
            if (v32)
            {
              IOSurfaceGetUseCount(v32);
              long long v33 = *(__IOSurface **)(a1 + 64);
              if (v33) {
                IOSurfaceGetBaseAddress(v33);
              }
            }
          }
          syslog(3, "%lld %d AVE %s: Surface %s | Name: %s %p Surf %p ID %d Size %d OpFlag 0x%llx Cnt %d Addr %p PixelFmt %s ", v18, a2, v19, v47, a1, a1);
        }
        else
        {
          if (v20)
          {
            IOSurfaceID v21 = IOSurfaceGetID(v20);
            uint64_t v22 = *(void *)(a1 + 88);
            int v23 = *(__IOSurface **)(a1 + 64);
            int v24 = *(_DWORD *)(a1 + 72);
            if (v23)
            {
              IOSurfaceID v44 = v21;
              int32_t v25 = IOSurfaceGetUseCount(v23);
              int v23 = *(__IOSurface **)(a1 + 64);
              if (v23) {
                int v23 = (__IOSurface *)IOSurfaceGetBaseAddress(v23);
              }
              IOSurfaceID v21 = v44;
            }
            else
            {
              int32_t v25 = 0;
            }
          }
          else
          {
            int32_t v25 = 0;
            IOSurfaceID v21 = 0;
            int v23 = 0;
            int v24 = *(_DWORD *)(a1 + 72);
            uint64_t v22 = *(void *)(a1 + 88);
          }
          printf("%lld %d AVE %s: Surface %s | Name: %s %p Surf %p ID %d Size %d OpFlag 0x%llx Cnt %d Addr %p PixelFmt %s \n", v18, a2, v19, (const char *)v47, (const char *)a1, (const void *)a1, v20, v21, v24, v22, v25, v23, (const char *)&v45);
          __uint64_t v37 = sub_DDEFC();
          long long v38 = sub_D1CB0(v10);
          if (*(void *)(a1 + 64))
          {
            IOSurfaceGetID(*(IOSurfaceRef *)(a1 + 64));
            uint64_t v39 = *(__IOSurface **)(a1 + 64);
            if (v39)
            {
              IOSurfaceGetUseCount(v39);
              int v40 = *(__IOSurface **)(a1 + 64);
              if (v40) {
                IOSurfaceGetBaseAddress(v40);
              }
            }
          }
          syslog(3, "%lld %d AVE %s: Surface %s | Name: %s %p Surf %p ID %d Size %d OpFlag 0x%llx Cnt %d Addr %p PixelFmt %s ", v37, a2, v38, v47, a1, a1);
        }
      }
    }
  }
  return 0;
}

__IOSurface *sub_BC8DC(uint64_t a1)
{
  uint64_t result = *(__IOSurface **)(a1 + 64);
  if (result) {
    return (__IOSurface *)IOSurfaceGetID(result);
  }
  return result;
}

__IOSurface *sub_BC8EC(uint64_t a1, int a2)
{
  uint64_t result = *(__IOSurface **)(a1 + 64);
  if (result) {
    return (__IOSurface *)((char *)IOSurfaceGetBaseAddress(result) + a2);
  }
  return result;
}

uint64_t sub_BC91C(uint64_t a1)
{
  uint64_t v2 = *(__IOSurface **)(a1 + 64);
  if (v2)
  {
    if (*(unsigned char *)(a1 + 89))
    {
      return 0;
    }
    else
    {
      IOSurfaceLock(v2, 0, 0);
      uint64_t result = 0;
      *(void *)(a1 + 88) |= 0x100uLL;
    }
  }
  else
  {
    if (sub_D1C38(0x4Cu, 4))
    {
      int v4 = sub_D1C7C(0x4Cu);
      __uint64_t v5 = sub_DDEFC();
      __uint64_t v6 = (const char *)sub_D1CB0(4);
      if (v4)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | surface is not created %p %s\n", v5, 76, v6, "AVE_USL_Surface", "Lock", 390, "m_pcSurface != __null", (const void *)a1, (const char *)a1);
        __uint64_t v7 = sub_DDEFC();
        int v8 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | surface is not created %p %s", v7, 76, v8);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | surface is not created %p %s", v5, 76, v6);
      }
    }
    return 4294966285;
  }
  return result;
}

uint64_t sub_BCA78(uint64_t a1)
{
  if (*(void *)(a1 + 64)) {
    return *(unsigned int *)(a1 + 72);
  }
  else {
    return 0;
  }
}

int *sub_BCA90(int a1)
{
  uint64_t v1 = 0;
  while (dword_143A38[v1] != a1)
  {
    v1 += 3;
    if (v1 == 27) {
      return 0;
    }
  }
  return &dword_143A38[v1];
}

uint64_t sub_BCAC4(int a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4 = 0;
  while (dword_143AA4[v4] != a4)
  {
    v4 += 6;
    if (v4 == 120) {
      return 2;
    }
  }
  if (a4 == 1) {
    return 2;
  }
  int v6 = dword_143AA4[v4 + 3] / ((a2 >> 4) * (a1 >> 4));
  if (v6 >= 16) {
    return 16;
  }
  else {
    return v6;
  }
}

uint64_t sub_BCB24(CFDictionaryRef theDict, _OWORD *a2)
{
  double v42 = 0.0;
  if (!theDict || !a2)
  {
    if (sub_D1C38(0x2Fu, 4))
    {
      int v10 = sub_D1C7C(0x2Fu);
      __uint64_t v11 = sub_DDEFC();
      uint64_t v12 = (const char *)sub_D1CB0(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p\n", v11, 47, v12, "AVE_ANFD_Retrieve", 30, "pDict != __null && pInfo != __null", theDict, a2);
        __uint64_t v11 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p", v11, 47);
    }
    return 4294966295;
  }
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  uint64_t v4 = sub_C43BC(theDict, @"AnfdModality", a2);
  if (!v4)
  {
    uint64_t v13 = sub_C43BC(theDict, @"FaceID", (_DWORD *)a2 + 1);
    if (v13)
    {
      uint64_t v5 = v13;
      if (!sub_D1C38(0x2Fu, 4)) {
        return v5;
      }
      int v14 = sub_D1C7C(0x2Fu);
      __uint64_t v7 = sub_DDEFC();
      int v8 = (const char *)sub_D1CB0(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v7, 47, v8, "AVE_ANFD_Retrieve", 42, "ret == 0", theDict, a2, v5);
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v15 = sub_C43BC(theDict, @"ConfidenceLevel", (_DWORD *)a2 + 2);
      if (v15)
      {
        uint64_t v5 = v15;
        if (sub_D1C38(0x2Fu, 4))
        {
          int v16 = sub_D1C7C(0x2Fu);
          __uint64_t v9 = sub_DDEFC();
          int v17 = (const char *)sub_D1CB0(4);
          if (v16)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v9, 47, v17, "AVE_ANFD_Retrieve", 47, "ret == 0", theDict, a2, v5);
            __uint64_t v9 = sub_DDEFC();
            int v40 = sub_D1CB0(4);
          }
          else
          {
            int v40 = (void *)v17;
          }
          goto LABEL_30;
        }
        return v5;
      }
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"Rect");
      if (!Value)
      {
        if (sub_D1C38(0x2Fu, 4))
        {
          int v23 = sub_D1C7C(0x2Fu);
          __uint64_t v24 = sub_DDEFC();
          int32_t v25 = (const char *)sub_D1CB0(4);
          if (v23)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v24, 47, v25, "AVE_ANFD_Retrieve", 52, "pRect != __null", theDict, a2, 0);
            __uint64_t v26 = sub_DDEFC();
            __uint64_t v41 = sub_D1CB0(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d", v26, 47, v41);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d", v24, 47, v25);
          }
        }
        return 4294966288;
      }
      CFDictionaryRef v19 = Value;
      uint64_t v20 = sub_C3E5C(Value, @"X", &v42);
      if (v20)
      {
        uint64_t v5 = v20;
        if (!sub_D1C38(0x2Fu, 4)) {
          return v5;
        }
        int v21 = sub_D1C7C(0x2Fu);
        __uint64_t v7 = sub_DDEFC();
        int v8 = (const char *)sub_D1CB0(4);
        if (!v21) {
          goto LABEL_23;
        }
        printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v7, 47, v8, "AVE_ANFD_Retrieve", 56, "ret == 0", theDict, a2, v5);
LABEL_15:
        __uint64_t v9 = sub_DDEFC();
        int v40 = sub_D1CB0(4);
        goto LABEL_30;
      }
      *((_DWORD *)a2 + 4) = vcvtd_n_s64_f64(v42, 0x13uLL);
      uint64_t v27 = sub_C3E5C(v19, @"Y", &v42);
      if (v27)
      {
        uint64_t v5 = v27;
        if (!sub_D1C38(0x2Fu, 4)) {
          return v5;
        }
        int v28 = sub_D1C7C(0x2Fu);
        __uint64_t v7 = sub_DDEFC();
        int v8 = (const char *)sub_D1CB0(4);
        if (v28)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v7, 47, v8, "AVE_ANFD_Retrieve", 62, "ret == 0", theDict, a2, v5);
          goto LABEL_15;
        }
      }
      else
      {
        *((_DWORD *)a2 + 5) = vcvtd_n_s64_f64(v42, 0x13uLL);
        uint64_t v29 = sub_C3E5C(v19, @"Width", &v42);
        if (v29)
        {
          uint64_t v5 = v29;
          if (!sub_D1C38(0x2Fu, 4)) {
            return v5;
          }
          int v30 = sub_D1C7C(0x2Fu);
          __uint64_t v7 = sub_DDEFC();
          int v8 = (const char *)sub_D1CB0(4);
          if (v30)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v7, 47, v8, "AVE_ANFD_Retrieve", 68, "ret == 0", theDict, a2, v5);
            goto LABEL_15;
          }
        }
        else
        {
          *((_DWORD *)a2 + 6) = vcvtd_n_s64_f64(v42, 0x13uLL);
          uint64_t v31 = sub_C3E5C(v19, @"Height", &v42);
          if (v31)
          {
            uint64_t v5 = v31;
            if (!sub_D1C38(0x2Fu, 4)) {
              return v5;
            }
            int v32 = sub_D1C7C(0x2Fu);
            __uint64_t v7 = sub_DDEFC();
            int v8 = (const char *)sub_D1CB0(4);
            if (v32)
            {
              printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v7, 47, v8, "AVE_ANFD_Retrieve", 74, "ret == 0", theDict, a2, v5);
              goto LABEL_15;
            }
          }
          else
          {
            *((_DWORD *)a2 + 7) = vcvtd_n_s64_f64(v42, 0x13uLL);
            *((_DWORD *)a2 + 3) = 0x80000;
            uint64_t v33 = sub_C43BC(theDict, @"AngleInfoRoll", (_DWORD *)a2 + 8);
            if (v33)
            {
              uint64_t v5 = v33;
              if (!sub_D1C38(0x2Fu, 4)) {
                return v5;
              }
              int v34 = sub_D1C7C(0x2Fu);
              __uint64_t v7 = sub_DDEFC();
              int v8 = (const char *)sub_D1CB0(4);
              if (v34)
              {
                printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v7, 47, v8, "AVE_ANFD_Retrieve", 84, "ret == 0", theDict, a2, v5);
                goto LABEL_15;
              }
            }
            else
            {
              uint64_t v35 = sub_C43BC(theDict, @"AngleInfoYaw", (_DWORD *)a2 + 9);
              if (v35)
              {
                uint64_t v5 = v35;
                if (!sub_D1C38(0x2Fu, 4)) {
                  return v5;
                }
                int v36 = sub_D1C7C(0x2Fu);
                __uint64_t v7 = sub_DDEFC();
                int v8 = (const char *)sub_D1CB0(4);
                if (v36)
                {
                  printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v7, 47, v8, "AVE_ANFD_Retrieve", 89, "ret == 0", theDict, a2, v5);
                  goto LABEL_15;
                }
              }
              else
              {
                uint64_t v37 = sub_C466C(theDict, @"OriginalTimestamp", (void *)a2 + 5);
                if (v37)
                {
                  uint64_t v5 = v37;
                  if (!sub_D1C38(0x2Fu, 4)) {
                    return v5;
                  }
                  int v38 = sub_D1C7C(0x2Fu);
                  __uint64_t v7 = sub_DDEFC();
                  int v8 = (const char *)sub_D1CB0(4);
                  if (v38)
                  {
                    printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v7, 47, v8, "AVE_ANFD_Retrieve", 94, "ret == 0", theDict, a2, v5);
                    goto LABEL_15;
                  }
                }
                else
                {
                  uint64_t v5 = sub_C466C(theDict, @"Timestamp", (void *)a2 + 6);
                  if (!v5 || !sub_D1C38(0x2Fu, 4)) {
                    return v5;
                  }
                  int v39 = sub_D1C7C(0x2Fu);
                  __uint64_t v7 = sub_DDEFC();
                  int v8 = (const char *)sub_D1CB0(4);
                  if (v39)
                  {
                    printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v7, 47, v8, "AVE_ANFD_Retrieve", 98, "ret == 0", theDict, a2, v5);
                    goto LABEL_15;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_23:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d", v7, 47, v8);
    return v5;
  }
  uint64_t v5 = v4;
  if (sub_D1C38(0x2Fu, 4))
  {
    int v6 = sub_D1C7C(0x2Fu);
    __uint64_t v7 = sub_DDEFC();
    int v8 = (const char *)sub_D1CB0(4);
    if (v6)
    {
      printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v7, 47, v8, "AVE_ANFD_Retrieve", 37, "ret == 0", theDict, a2, v5);
      __uint64_t v9 = sub_DDEFC();
      int v40 = sub_D1CB0(4);
LABEL_30:
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d", v9, 47, v40);
      return v5;
    }
    goto LABEL_23;
  }
  return v5;
}

uint64_t sub_BD434(const __CFArray *a1, void *a2, _DWORD *a3)
{
  if (a1 && a2 && a3 && (uint64_t v6 = *a3, (int)v6 > 0))
  {
    bzero(a2, v6 << 6);
    unsigned int Count = CFArrayGetCount(a1);
    if (*a3 >= (signed int)Count) {
      uint64_t v8 = Count;
    }
    else {
      uint64_t v8 = *a3;
    }
    *a3 = 0;
    if ((int)v8 < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v9 = 0;
      for (uint64_t i = a2; ; i += 4)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v9);
        if (!ValueAtIndex) {
          break;
        }
        uint64_t result = sub_BCB24(ValueAtIndex, i);
        if (result) {
          return result;
        }
        ++*a3;
        if (v8 == ++v9) {
          return 0;
        }
      }
      if (sub_D1C38(0x2Fu, 4))
      {
        int v17 = sub_D1C7C(0x2Fu);
        __uint64_t v18 = sub_DDEFC();
        CFDictionaryRef v19 = (const char *)sub_D1CB0(4);
        if (v17)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %p %p %d %d\n", v18, 47, v19, "AVE_ANFD_RetrieveArray", 227, "pDict != __null", a1, a2, a3, a1, v8, v9);
          __uint64_t v20 = sub_DDEFC();
          uint64_t v22 = sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get data %p %p %p %p %d %d", v20, 47, v22, "AVE_ANFD_RetrieveArray", 227);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get data %p %p %p %p %d %d", v18, 47, v19, "AVE_ANFD_RetrieveArray", 227);
        }
      }
      return 4294966288;
    }
  }
  else
  {
    if (sub_D1C38(0x2Fu, 4))
    {
      int v13 = sub_D1C7C(0x2Fu);
      __uint64_t v14 = sub_DDEFC();
      uint64_t v15 = (const char *)sub_D1CB0(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v14, 47, v15, "AVE_ANFD_RetrieveArray", 215, "pArray != __null && pInfo != __null && pNum != __null && *pNum > 0", a1, a2, a3);
        __uint64_t v16 = sub_DDEFC();
        int v21 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v16, 47, v21);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v14, 47, v15);
      }
    }
    return 4294966295;
  }
}

uint64_t sub_BD6D0(unsigned int *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  memset(v45, 0, sizeof(v45));
  sub_3444(a4, a5, (char *)v45, 32, a5, a6, a7, a8);
  int v11 = (char)a3;
  if (sub_D1C38(a2, (char)a3))
  {
    int v12 = sub_D1C7C(a2);
    int v13 = v12;
    if (a3 < 0)
    {
      if (!v12 || (-a3 & 0x20) != 0)
      {
        syslog(3, "ANFD %s | %d %d | %d | %f %f %f %f | %d %d | %lld %lld %d", v45, *a1, a1[1]);
        return 0;
      }
      double v27 = (double)(int)a1[3];
      int v23 = v45;
      printf("ANFD %s | %d %d | %d | %f %f %f %f | %d %d | %lld %lld %d\n", (const char *)v45, *a1, a1[1], a1[2], (double)(int)a1[4] / v27, (double)(int)a1[5] / v27, (double)(int)a1[6] / v27, (double)(int)a1[7] / v27, a1[8], a1[9], *((void *)a1 + 5), *((void *)a1 + 6), a1[14]);
      double v28 = (double)(int)a1[3];
      uint64_t v40 = *((void *)a1 + 6);
      uint64_t v41 = a1[14];
      *(void *)&double v38 = a1[9];
      double v39 = *((double *)a1 + 5);
      *(void *)&double v37 = a1[8];
      double v35 = (double)(int)a1[6] / v28;
      double v36 = (double)(int)a1[7] / v28;
      double v33 = (double)(int)a1[4] / v28;
      double v34 = (double)(int)a1[5] / v28;
      uint64_t v31 = (void *)a1[1];
      int v32 = (_OWORD *)a1[2];
      __uint64_t v26 = "ANFD %s | %d %d | %d | %f %f %f %f | %d %d | %lld %lld %d";
      uint64_t v30 = *a1;
    }
    else
    {
      __uint64_t v14 = sub_DDEFC();
      uint64_t v15 = (const char *)sub_D1CB0((char)a3);
      double v16 = (double)(int)a1[3];
      uint64_t v17 = *a1;
      double v18 = (double)(int)a1[4] / v16;
      double v19 = (double)(int)a1[5] / v16;
      double v20 = (double)(int)a1[6] / v16;
      double v21 = (double)(int)a1[7] / v16;
      if ((a3 & 0x20) != 0 || !v13)
      {
        syslog(3, "%lld %d AVE %s: ANFD %s | %d %d | %d | %f %f %f %f | %d %d | %lld %lld %d", v14, a2, v15, v45, v17);
        return 0;
      }
      uint64_t v22 = a2;
      printf("%lld %d AVE %s: ANFD %s | %d %d | %d | %f %f %f %f | %d %d | %lld %lld %d\n", v14, a2, v15, (const char *)v45, v17, a1[1], a1[2], v18, v19, v20, v21, a1[8], a1[9], *((void *)a1 + 5), *((void *)a1 + 6), a1[14]);
      int v23 = (_OWORD *)sub_DDEFC();
      __uint64_t v24 = sub_D1CB0(v11);
      double v25 = (double)(int)a1[3];
      uint64_t v43 = *((void *)a1 + 6);
      uint64_t v44 = a1[14];
      uint64_t v41 = a1[9];
      uint64_t v42 = *((void *)a1 + 5);
      uint64_t v40 = a1[8];
      double v38 = (double)(int)a1[6] / v25;
      double v39 = (double)(int)a1[7] / v25;
      double v36 = (double)(int)a1[4] / v25;
      double v37 = (double)(int)a1[5] / v25;
      *(void *)&double v34 = a1[1];
      *(void *)&double v35 = a1[2];
      int v32 = v45;
      *(void *)&double v33 = *a1;
      uint64_t v30 = v22;
      uint64_t v31 = v24;
      __uint64_t v26 = "%lld %d AVE %s: ANFD %s | %d %d | %d | %f %f %f %f | %d %d | %lld %lld %d";
    }
    syslog(3, v26, v23, v30, v31, v32, *(void *)&v33, *(void *)&v34, *(void *)&v35, *(void *)&v36, *(void *)&v37, *(void *)&v38, *(void *)&v39, v40, v41, v42, v43, v44);
  }
  return 0;
}

uint64_t sub_BDA14(unsigned int *a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 4294966295;
  }
  if (a2 < 1) {
    return 0;
  }
  int v12 = a1;
  uint64_t v13 = a2;
  do
  {
    sub_BD6D0(v12, a3, a4, a5, a6, a6, a7, a8);
    v12 += 16;
    --v13;
  }
  while (v13);
  return 0;
}

uint64_t sub_BDAA0(const __CFDictionary *a1, void *a2, _DWORD *a3)
{
  if (a1 && a2 && a3 && (uint64_t v6 = *a3, (int)v6 > 0))
  {
    bzero(a2, v6 << 6);
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, @"StabilizedDetectedFacesArray");
    if (Value)
    {
      return sub_BD434(Value, a2, a3);
    }
    else
    {
      return 4294966288;
    }
  }
  else
  {
    if (sub_D1C38(0x2Fu, 6))
    {
      int v9 = sub_D1C7C(0x2Fu);
      __uint64_t v10 = sub_DDEFC();
      int v11 = (const char *)sub_D1CB0(6);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v10, 47, v11, "AVE_ANFD_GetInfo", 362, "pProperty != NULL && pInfo != NULL && pNum != NULL && *pNum > 0", a1, a2, a3);
        __uint64_t v12 = sub_DDEFC();
        uint64_t v13 = sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v12, 47, v13);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v10, 47, v11);
      }
    }
    return 4294966295;
  }
}

uint64_t sub_BDC30(uint64_t a1)
{
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 4) = 0;
  sub_34C8((void *)(a1 + 32));
  *(_DWORD *)(a1 + 48) = 0;
  return a1;
}

uint64_t sub_BDC68(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    uint64_t result = sub_3630(v2);
    if (!result) {
      break;
    }
    uint64_t v4 = (void *)result;
    sub_36B8((uint64_t)v2);
    uint64_t result = sub_3B04(v4);
  }
  while (!result);
  if (*(void *)(a1 + 24))
  {
    uint64_t result = sub_BE904(*(pthread_mutex_t **)(a1 + 24));
    *(void *)(a1 + 24) = 0;
  }
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 4) = 0;
  return result;
}

uint64_t sub_BDCDC(uint64_t a1)
{
  return a1;
}

uint64_t sub_BDD08(uint64_t a1, int a2, uint64_t a3, int a4, int a5, int a6, unsigned int a7, int8x8_t a8)
{
  double v21 = 0;
  uint64_t v8 = 4294966295;
  if (a4 >= 1 && a5 >= 1 && a6 >= 1 && a7 <= 0x40)
  {
    if (!a7 || (a8.i32[0] = a7, uint8x8_t v16 = (uint8x8_t)vcnt_s8(a8), v16.i16[0] = vaddlv_u8(v16), v16.i32[0] <= 1u))
    {
      if (a2)
      {
        double v18 = sub_BE89C();
        if (!v18) {
          return 4294966293;
        }
        uint64_t v17 = v18;
        uint64_t v19 = sub_39C4(a3, a4, a5, a6, a7, (uint64_t *)&v21);
        if (!v19) {
          goto LABEL_13;
        }
        uint64_t v8 = v19;
        sub_BE904(v17);
      }
      else
      {
        uint64_t v8 = sub_39C4(a3, a4, a5, a6, a7, (uint64_t *)&v21);
        if (!v8)
        {
          uint64_t v17 = 0;
LABEL_13:
          *(_DWORD *)a1 = a2;
          *(_DWORD *)(a1 + 4) = a5;
          *(_DWORD *)(a1 + 8) = a6;
          *(_DWORD *)(a1 + 12) = a7;
          *(_DWORD *)(a1 + 16) = 0;
          *(void *)(a1 + 24) = v17;
          sub_366C((void *)(a1 + 32), v21);
          return 0;
        }
      }
    }
  }
  return v8;
}

uint64_t sub_BDE44(uint64_t a1, uint64_t *a2)
{
  *a2 = 0;
  uint64_t v3 = a1 + 32;
  for (uint64_t i = sub_3700(a1 + 32); ; uint64_t i = sub_3590(v5))
  {
    uint64_t v5 = i;
    if (i == sub_3720(v3)) {
      return 4294966289;
    }
    if (sub_3CF8(v5)) {
      break;
    }
  }
  uint64_t result = 0;
  *a2 = v5;
  return result;
}

uint64_t sub_BDEB8(uint64_t a1, void *a2, _DWORD *a3)
{
  int v9 = 0;
  if (!a2) {
    return 4294966295;
  }
  *a2 = 0;
  if (*(_DWORD *)a1) {
    sub_BE94C(*(pthread_mutex_t **)(a1 + 24));
  }
  uint64_t v6 = sub_BDE44(a1, (uint64_t *)&v9);
  if (!v6) {
    goto LABEL_8;
  }
  uint64_t v7 = v6;
  if (*(_DWORD *)(a1 + 48) < *(_DWORD *)(a1 + 16))
  {
    uint64_t v7 = sub_3838(*(_DWORD *)(a1 + 4), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12), (uint64_t *)&v9);
    if (!v7)
    {
      sub_366C((void *)(a1 + 32), v9);
      ++*(_DWORD *)(a1 + 48);
LABEL_8:
      uint64_t v7 = sub_3BA8((uint64_t)v9, a2, a3);
    }
  }
  if (*(_DWORD *)a1) {
    sub_BE980(*(pthread_mutex_t **)(a1 + 24));
  }
  return v7;
}

uint64_t sub_BDF90(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  *a3 = 0;
  uint64_t v5 = a1 + 32;
  for (uint64_t i = sub_3700(a1 + 32); ; uint64_t i = sub_3590(v7))
  {
    uint64_t v7 = i;
    if (i == sub_3720(v5)) {
      return 4294966295;
    }
    if (sub_3B78(v7, a2)) {
      break;
    }
  }
  uint64_t result = 0;
  *a3 = v7;
  return result;
}

uint64_t sub_BE00C(uint64_t a1, unint64_t a2)
{
  uint64_t v9 = 0;
  if (*(_DWORD *)a1) {
    sub_BE94C(*(pthread_mutex_t **)(a1 + 24));
  }
  uint64_t v4 = sub_BDF90(a1, a2, &v9);
  if (!v4)
  {
    uint64_t v4 = sub_3C58(v9, a2);
    if (!v4)
    {
      uint64_t v5 = sub_3738(a1 + 32);
      if (*(_DWORD *)(a1 + 48))
      {
        uint64_t v6 = (uint64_t *)v5;
        while (v6 != (uint64_t *)sub_3758(a1 + 32))
        {
          uint64_t v7 = sub_3570((uint64_t)v6);
          if (sub_3CE4((uint64_t)v6))
          {
            sub_35B0(v6);
            sub_3B04(v6);
            uint64_t v4 = 0;
            --*(_DWORD *)(a1 + 48);
            goto LABEL_13;
          }
          uint64_t v4 = 0;
          uint64_t v6 = (uint64_t *)v7;
          if (!*(_DWORD *)(a1 + 48)) {
            goto LABEL_13;
          }
        }
      }
      uint64_t v4 = 0;
    }
  }
LABEL_13:
  if (*(_DWORD *)a1) {
    sub_BE980(*(pthread_mutex_t **)(a1 + 24));
  }
  return v4;
}

uint64_t sub_BE118(uint64_t a1, int a2, void *a3)
{
  if (*(_DWORD *)a1) {
    sub_BE94C(*(pthread_mutex_t **)(a1 + 24));
  }
  if (*(_DWORD *)(a1 + 48))
  {
    uint64_t v6 = 4294966295;
  }
  else
  {
    uint64_t v7 = sub_35F4((void *)(a1 + 32));
    uint64_t v6 = sub_3D24(v7, a2, a3);
  }
  if (*(_DWORD *)a1) {
    sub_BE980(*(pthread_mutex_t **)(a1 + 24));
  }
  return v6;
}

uint64_t sub_BE194(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (*(_DWORD *)a1) {
    sub_BE94C(*(pthread_mutex_t **)(a1 + 24));
  }
  if (*(_DWORD *)(a1 + 48))
  {
    uint64_t v6 = 4294966295;
  }
  else
  {
    uint64_t v7 = sub_35F4((void *)(a1 + 32));
    uint64_t v6 = sub_3D60(v7, a2, a3);
  }
  if (*(_DWORD *)a1) {
    sub_BE980(*(pthread_mutex_t **)(a1 + 24));
  }
  return v6;
}

uint64_t sub_BE210(int *a1, __CFDictionary *a2)
{
  if (a1 && a2)
  {
    uint64_t v4 = sub_C347C(@"MotionEstimationModeID", *a1, a2);
    if (!v4)
    {
      uint64_t v13 = sub_C347C(@"MotionEstimationHorizontalSearchRange", a1[1], a2);
      if (v13)
      {
        uint64_t v5 = v13;
        if (!sub_D1C38(0x36u, 4)) {
          return v5;
        }
        int v14 = sub_D1C7C(0x36u);
        __uint64_t v7 = sub_DDEFC();
        uint64_t v8 = (const char *)sub_D1CB0(4);
        if (!v14) {
          goto LABEL_29;
        }
        printf("%lld %d AVE %s: %s:%d %s | fail to add data %p %p %d\n", v7, 54, v8, "AVE_SearchRange_Make", 82, "ret == 0", a1, a2, v5);
      }
      else
      {
        uint64_t v15 = sub_C347C(@"MotionEstimationVerticalSearchRange", a1[2], a2);
        if (v15)
        {
          uint64_t v5 = v15;
          if (!sub_D1C38(0x36u, 4)) {
            return v5;
          }
          int v16 = sub_D1C7C(0x36u);
          __uint64_t v7 = sub_DDEFC();
          uint64_t v8 = (const char *)sub_D1CB0(4);
          if (!v16) {
            goto LABEL_29;
          }
          printf("%lld %d AVE %s: %s:%d %s | fail to add data %p %p %d\n", v7, 54, v8, "AVE_SearchRange_Make", 87, "ret == 0", a1, a2, v5);
        }
        else
        {
          uint64_t v5 = sub_C347C(@"MotionEstimationCacheMode", a1[3], a2);
          if (!v5 || !sub_D1C38(0x36u, 4)) {
            return v5;
          }
          int v17 = sub_D1C7C(0x36u);
          __uint64_t v7 = sub_DDEFC();
          uint64_t v8 = (const char *)sub_D1CB0(4);
          if (!v17) {
            goto LABEL_29;
          }
          printf("%lld %d AVE %s: %s:%d %s | fail to add data %p %p %d\n", v7, 54, v8, "AVE_SearchRange_Make", 92, "ret == 0", a1, a2, v5);
        }
      }
      __uint64_t v9 = sub_DDEFC();
      uint64_t v19 = sub_D1CB0(4);
      goto LABEL_28;
    }
    uint64_t v5 = v4;
    if (sub_D1C38(0x36u, 4))
    {
      int v6 = sub_D1C7C(0x36u);
      __uint64_t v7 = sub_DDEFC();
      uint64_t v8 = (const char *)sub_D1CB0(4);
      if (v6)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to add data %p %p %d\n", v7, 54, v8, "AVE_SearchRange_Make", 77, "ret == 0", a1, a2, v5);
        __uint64_t v9 = sub_DDEFC();
        uint64_t v19 = sub_D1CB0(4);
LABEL_28:
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to add data %p %p %d", v9, 54, v19);
        return v5;
      }
LABEL_29:
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to add data %p %p %d", v7, 54, v8);
    }
  }
  else
  {
    if (sub_D1C38(0x36u, 4))
    {
      int v10 = sub_D1C7C(0x36u);
      __uint64_t v11 = sub_DDEFC();
      __uint64_t v12 = (const char *)sub_D1CB0(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p\n", v11, 54, v12, "AVE_SearchRange_Make", 72, "pEntry != __null && pDict != __null", a1, a2);
        __uint64_t v11 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p", v11, 54);
    }
    return 4294966295;
  }
  return v5;
}

uint64_t sub_BE600(int *a1, int a2, __CFArray *a3)
{
  if (a1 && a2 >= 1 && a3)
  {
    uint64_t v6 = 0;
    for (uint64_t i = a1; ; i += 4)
    {
      CFMutableDataRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (!Mutable) {
        break;
      }
      __uint64_t v9 = Mutable;
      uint64_t v10 = sub_BE210(i, Mutable);
      if (v10)
      {
        uint64_t v11 = v10;
        CFRelease(v9);
        return v11;
      }
      CFArrayAppendValue(a3, v9);
      CFRelease(v9);
      if (a2 == ++v6) {
        return 0;
      }
    }
    if (sub_D1C38(0x36u, 4))
    {
      int v16 = sub_D1C7C(0x36u);
      __uint64_t v17 = sub_DDEFC();
      double v18 = (const char *)sub_D1CB0(4);
      if (v16)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create CFDictionary %p %d %p %d\n", v17, 54, v18, "AVE_SearchRange_MakeArray", 168, "pDict != __null", a1, a2, a3, v6);
        __uint64_t v19 = sub_DDEFC();
        uint64_t v22 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDictionary %p %d %p %d", v19, 54, v22, "AVE_SearchRange_MakeArray");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDictionary %p %d %p %d", v17, 54, v18, "AVE_SearchRange_MakeArray");
      }
    }
    return 4294966293;
  }
  else
  {
    if (sub_D1C38(0x36u, 4))
    {
      int v12 = sub_D1C7C(0x36u);
      __uint64_t v13 = sub_DDEFC();
      int v14 = (const char *)sub_D1CB0(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p\n", v13, 54, v14, "AVE_SearchRange_MakeArray", 160, "pEntry != __null && num > 0 && pArray != __null", a1, a2, a3);
        __uint64_t v15 = sub_DDEFC();
        double v21 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v15, 54, v21);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v13, 54, v14);
      }
    }
    return 4294966295;
  }
}

pthread_mutex_t *sub_BE89C()
{
  uint64_t v0 = (pthread_mutex_t *)malloc_type_malloc(0x40uLL, 0x1000040FA0F61DDuLL);
  uint64_t v1 = v0;
  if (v0)
  {
    *(_OWORD *)&v0->__opaque[24] = 0u;
    *(_OWORD *)&v0->__opaque[40] = 0u;
    *(_OWORD *)&v0->__sig = 0u;
    *(_OWORD *)&v0->__opaque[8] = 0u;
    if (pthread_mutex_init(v0, 0))
    {
      free(v1);
      return 0;
    }
  }
  return v1;
}

uint64_t sub_BE904(pthread_mutex_t *a1)
{
  if (!a1) {
    return 4294966295;
  }
  if (pthread_mutex_destroy(a1)) {
    uint64_t v2 = 4294966296;
  }
  else {
    uint64_t v2 = 0;
  }
  free(a1);
  return v2;
}

uint64_t sub_BE94C(pthread_mutex_t *a1)
{
  if (!a1) {
    return 4294966295;
  }
  if (pthread_mutex_lock(a1)) {
    return 4294966296;
  }
  return 0;
}

uint64_t sub_BE980(pthread_mutex_t *a1)
{
  if (!a1) {
    return 4294966295;
  }
  if (pthread_mutex_unlock(a1)) {
    return 4294966296;
  }
  return 0;
}

uint64_t sub_BE9B4(int a1, uint64_t a2, unsigned int a3)
{
  if (a1 == 1) {
    return a3;
  }
  else {
    return 0;
  }
}

uint64_t sub_BE9C0(int a1, int a2, int a3)
{
  unsigned int v3 = ((a2 + 31) & 0xFFFFFFE0) * ((a3 + 31) >> 5);
  unsigned int v4 = ((a2 + 15) & 0xFFFFFFF0) * ((a3 + 15) >> 4);
  if (a1) {
    unsigned int v4 = 0;
  }
  if (a1 != 1) {
    unsigned int v3 = v4;
  }
  return (v3 + 4095) & 0xFFFFF000;
}

BOOL sub_BEA04(int a1, int a2, int a3)
{
  return a2 > 1 && a3 > 0 && a1 == 1;
}

uint64_t sub_BEA18(int a1, int a2)
{
  if (a1) {
    unsigned int v2 = 17314;
  }
  else {
    unsigned int v2 = 1574;
  }
  if (a2) {
    return v2 + 264;
  }
  else {
    return v2;
  }
}

uint64_t sub_BEA38(int a1, int a2)
{
  unsigned int v2 = a2 << 10;
  if (a1 != 1) {
    unsigned int v2 = 0;
  }
  if (a1) {
    return v2;
  }
  else {
    return 512;
  }
}

uint64_t sub_BEA54(const void *a1, int a2, uint64_t a3, void *a4)
{
  if (a2 >= 1 && a4)
  {
    *a4 = 0;
    operator new();
  }
  if (sub_D1C38(0x4Cu, 4))
  {
    int v8 = sub_D1C7C(0x4Cu);
    __uint64_t v9 = sub_DDEFC();
    uint64_t v10 = (const char *)sub_D1CB0(4);
    if (v8)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d 0x%llx %p\n", v9, 76, v10, "AVE_USL_CreateSurface", 119, "size > 0 && ppSurface != __null", a1, a2, a3, a4);
      __uint64_t v11 = sub_DDEFC();
      __uint64_t v13 = sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d 0x%llx %p", v11, 76, v13, "AVE_USL_CreateSurface");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d 0x%llx %p", v9, 76, v10, "AVE_USL_CreateSurface");
    }
  }
  return 4294966295;
}

void sub_BEE0C()
{
}

uint64_t sub_BEE30(unsigned char *a1)
{
  if (a1)
  {
    sub_BC0CC(a1);
    nullsub_1(a1);
    operator delete();
  }
  if (sub_D1C38(0x4Cu, 4))
  {
    int v2 = sub_D1C7C(0x4Cu);
    __uint64_t v3 = sub_DDEFC();
    unsigned int v4 = (const char *)sub_D1CB0(4);
    if (v2)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p\n", v3, 76, v4, "AVE_USL_DestroySurface", 170, "pSurface != __null", 0);
      __uint64_t v3 = sub_DDEFC();
      sub_D1CB0(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p", v3);
  }
  return 4294966295;
}

uint64_t sub_BEF60(_DWORD *a1, int a2, uint64_t *a3)
{
  memset(v27, 0, sizeof(v27));
  if (a1 && a3)
  {
    uint64_t v6 = sub_C58D4(5);
    int v8 = a1[4];
    int v7 = a1[5];
    uint64_t v9 = (uint64_t)v6[1];
    sub_DD92C((char *)v27, 64, "%s-%d", v10, v11, v12, v13, v14, (char)*v6);
    if (v8 >= 1)
    {
      if (!*a3)
      {
LABEL_15:
        uint64_t v21 = sub_BEA54(v27, v7, v9, a3);
        if (!v21) {
          return v21;
        }
        if (sub_D1C38(0x4Cu, 4))
        {
          int v22 = sub_D1C7C(0x4Cu);
          __uint64_t v23 = sub_DDEFC();
          __uint64_t v24 = (const char *)sub_D1CB0(4);
          if (v22)
          {
            printf("%lld %d AVE %s: %s:%d %s | failed to create surface %s %d\n", v23, 76, v24, "AVE_USL_CreateInSurfaces", 241, "ret == 0", (const char *)v27, v21);
            __uint64_t v23 = sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create surface %s %d", v23, 76);
        }
        goto LABEL_12;
      }
      int v15 = sub_BCA78(*a3);
      int v16 = (unsigned char *)*a3;
      if (v15 < v7)
      {
        sub_BEE30(v16);
        *a3 = 0;
        goto LABEL_15;
      }
      if (!v16) {
        goto LABEL_15;
      }
    }
    return 0;
  }
  if (sub_D1C38(0x4Cu, 4))
  {
    int v17 = sub_D1C7C(0x4Cu);
    __uint64_t v18 = sub_DDEFC();
    __uint64_t v19 = (const char *)sub_D1CB0(4);
    if (v17)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p\n", v18, 76, v19, "AVE_USL_CreateInSurfaces", 220, "pSInfoSet != __null && pSet != __null", a1, a2, a3);
      __uint64_t v20 = sub_DDEFC();
      __uint64_t v26 = sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v20, 76, v26);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v18, 76, v19);
    }
  }
  uint64_t v21 = 4294966295;
LABEL_12:
  sub_BF238(a3);
  return v21;
}

uint64_t sub_BF238(uint64_t *a1)
{
  if (a1)
  {
    uint64_t result = *a1;
    if (result)
    {
      uint64_t result = sub_BEE30((unsigned char *)result);
      *a1 = 0;
    }
  }
  else
  {
    if (sub_D1C38(0x4Cu, 4))
    {
      int v3 = sub_D1C7C(0x4Cu);
      __uint64_t v4 = sub_DDEFC();
      uint64_t v5 = (const char *)sub_D1CB0(4);
      if (v3)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p\n", v4, 76, v5, "AVE_USL_DestroyInSurfaces", 266, "pSet != __null", 0);
        __uint64_t v4 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p", v4);
    }
    return 4294966295;
  }
  return result;
}

uint64_t sub_BF350(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    *a2 = sub_BC8DC(v4);
  }
  uint64_t v5 = a1[1];
  if (v5) {
    a2[1] = sub_BC8DC(v5);
  }
  uint64_t v6 = a1[2];
  if (v6) {
    a2[2] = sub_BC8DC(v6);
  }
  uint64_t v7 = a1[3];
  if (v7) {
    a2[3] = sub_BC8DC(v7);
  }
  uint64_t v8 = a1[4];
  if (v8) {
    a2[5] = sub_BC8DC(v8);
  }
  uint64_t v9 = a1[5];
  if (v9) {
    a2[6] = sub_BC8DC(v9);
  }
  return 0;
}

uint64_t sub_BF3D8(_DWORD *a1, int a2, void *a3, void *a4)
{
  memset(v30, 0, sizeof(v30));
  if (a1 && a4)
  {
    *a4 = *a3;
    uint64_t v7 = sub_C58D4(4);
    int v9 = a1[10];
    int v8 = a1[11];
    uint64_t v10 = (uint64_t)v7[1];
    sub_DD92C((char *)v30, 64, "%s-%d", v11, v12, v13, v14, v15, (char)*v7);
    if (v9 >= 1)
    {
      int v17 = (unsigned char **)(a4 + 1);
      uint64_t v16 = a4[1];
      if (!v16)
      {
LABEL_15:
        uint64_t v24 = sub_BEA54(v30, v8, v10, a4 + 1);
        if (!v24) {
          return v24;
        }
        if (sub_D1C38(0x4Cu, 4))
        {
          int v25 = sub_D1C7C(0x4Cu);
          __uint64_t v26 = sub_DDEFC();
          double v27 = (const char *)sub_D1CB0(4);
          if (v25)
          {
            printf("%lld %d AVE %s: %s:%d %s | failed to create surface %s %d\n", v26, 76, v27, "AVE_USL_CreateDataSurfaces", 369, "ret == 0", (const char *)v30, v24);
            __uint64_t v26 = sub_DDEFC();
            sub_D1CB0(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create surface %s %d", v26, 76);
        }
        goto LABEL_12;
      }
      int v18 = sub_BCA78(v16);
      __uint64_t v19 = *v17;
      if (v18 < v8)
      {
        sub_BEE30(v19);
        *int v17 = 0;
        goto LABEL_15;
      }
      if (!v19) {
        goto LABEL_15;
      }
    }
    return 0;
  }
  if (sub_D1C38(0x4Cu, 4))
  {
    int v20 = sub_D1C7C(0x4Cu);
    __uint64_t v21 = sub_DDEFC();
    int v22 = (const char *)sub_D1CB0(4);
    if (v20)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p\n", v21, 76, v22, "AVE_USL_CreateDataSurfaces", 346, "pSInfoSet != __null && pSet != __null", a1, a2, a4);
      __uint64_t v23 = sub_DDEFC();
      uint64_t v29 = sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v23, 76, v29);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v21, 76, v22);
    }
  }
  uint64_t v24 = 4294966295;
LABEL_12:
  sub_BF6BC((uint64_t)a4);
  return v24;
}

uint64_t sub_BF6BC(uint64_t a1)
{
  if (a1)
  {
    uint64_t result = *(void *)(a1 + 8);
    if (result)
    {
      uint64_t result = sub_BEE30((unsigned char *)result);
      *(void *)(a1 + 8) = 0;
    }
    if (*(void *)(a1 + 16))
    {
      uint64_t result = sub_BEE30(*(unsigned char **)(a1 + 16));
      *(void *)(a1 + 16) = 0;
    }
    if (*(void *)(a1 + 24))
    {
      uint64_t result = sub_BEE30(*(unsigned char **)(a1 + 24));
      *(void *)(a1 + 24) = 0;
    }
    if (*(void *)(a1 + 32))
    {
      uint64_t result = sub_BEE30(*(unsigned char **)(a1 + 32));
      *(void *)(a1 + 32) = 0;
    }
    if (*(void *)(a1 + 40))
    {
      uint64_t result = sub_BEE30(*(unsigned char **)(a1 + 40));
      *(void *)(a1 + 40) = 0;
    }
  }
  else
  {
    if (sub_D1C38(0x4Cu, 4))
    {
      int v3 = sub_D1C7C(0x4Cu);
      __uint64_t v4 = sub_DDEFC();
      uint64_t v5 = (const char *)sub_D1CB0(4);
      if (v3)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p\n", v4, 76, v5, "AVE_USL_DestroyDataSurfaces", 395, "pSet != __null", 0);
        __uint64_t v4 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p", v4);
    }
    return 4294966295;
  }
  return result;
}

uint64_t sub_BF824(int a1, unsigned int a2, void *a3)
{
  if (sub_D1C38(0x3Cu, 6))
  {
    int v6 = sub_D1C7C(0x3Cu);
    __uint64_t v7 = sub_DDEFC();
    int v8 = (const char *)sub_D1CB0(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %d %d %p\n", v7, 60, v8, "AVE_TimeStats_Create", a1, a2, 0);
      __uint64_t v7 = sub_DDEFC();
      sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %d %d %p", v7);
  }
  if ((a2 & 0x80000000) != 0 || !a3)
  {
    if (sub_D1C38(0x3Cu, 4))
    {
      int v16 = sub_D1C7C(0x3Cu);
      __uint64_t v17 = sub_DDEFC();
      int v18 = (const char *)sub_D1CB0(4);
      if (v16)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %d %d %p\n", v17, 60, v18, "AVE_TimeStats_Create", 29, "num >= 0 && ppTS != __null", a1, a2, a3);
        __uint64_t v17 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %d %d %p", v17, 60);
    }
    uint64_t v10 = 0;
    uint64_t v11 = 4294966295;
  }
  else
  {
    int v9 = malloc_type_malloc(0xE8uLL, 0x1020040B8ADF5CEuLL);
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = sub_BFD10(v9, a1, a2);
      if (v11)
      {
        if (sub_D1C38(0x3Cu, 4))
        {
          int v12 = sub_D1C7C(0x3Cu);
          __uint64_t v13 = sub_DDEFC();
          uint64_t v14 = (const char *)sub_D1CB0(4);
          if (v12)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to initialize time stats %p %d %d %d\n", v13, 60, v14, "AVE_TimeStats_Create", 37, "ret == 0", v10, a1, a2, v11);
            __uint64_t v15 = sub_DDEFC();
            double v27 = sub_D1CB0(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to initialize time stats %p %d %d %d", v15, 60, v27);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to initialize time stats %p %d %d %d", v13, 60, v14);
          }
        }
        sub_C011C(v10);
        free(v10);
      }
      else
      {
        *a3 = v10;
      }
    }
    else
    {
      if (sub_D1C38(0x3Cu, 4))
      {
        int v19 = sub_D1C7C(0x3Cu);
        __uint64_t v20 = sub_DDEFC();
        __uint64_t v21 = (const char *)sub_D1CB0(4);
        if (v19)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create time stats %d %d %p\n", v20, 60, v21, "AVE_TimeStats_Create", 33, "pTS != __null", a1, a2, a3);
          __uint64_t v20 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create time stats %d %d %p", v20, 60);
      }
      uint64_t v10 = 0;
      uint64_t v11 = 4294966293;
    }
  }
  if (sub_D1C38(0x3Cu, 6))
  {
    int v22 = sub_D1C7C(0x3Cu);
    __uint64_t v23 = sub_DDEFC();
    uint64_t v24 = (const char *)sub_D1CB0(6);
    if (v22)
    {
      printf("%lld %d AVE %s: %s Exit %d %d %p %d\n", v23, 60, v24, "AVE_TimeStats_Create", a1, a2, v10, v11);
      __uint64_t v25 = sub_DDEFC();
      sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s Exit %d %d %p %d", v25, 60);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %d %d %p %d", v23, 60);
    }
  }
  return v11;
}

uint64_t sub_BFD10(_OWORD *a1, int a2, unsigned int a3)
{
  if (sub_D1C38(0x3Cu, 6))
  {
    int v6 = sub_D1C7C(0x3Cu);
    __uint64_t v7 = sub_DDEFC();
    int v8 = (const char *)sub_D1CB0(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %d\n", v7, 60, v8, "AVE_TimeStats_Init", a1, a2, a3);
      __uint64_t v7 = sub_DDEFC();
      sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %d", v7);
  }
  if (!a1 || (a3 & 0x80000000) != 0)
  {
    if (sub_D1C38(0x3Cu, 4))
    {
      int v11 = sub_D1C7C(0x3Cu);
      __uint64_t v12 = sub_DDEFC();
      __uint64_t v13 = (const char *)sub_D1CB0(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d\n", v12, 60, v13, "AVE_TimeStats_Init", 103, "pTS != __null && num >= 0", a1, a2, a3);
        __uint64_t v12 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d", v12, 60);
    }
    uint64_t v10 = 4294966295;
  }
  else
  {
    *((void *)a1 + 28) = 0;
    a1[12] = 0u;
    a1[13] = 0u;
    a1[10] = 0u;
    a1[11] = 0u;
    a1[8] = 0u;
    a1[9] = 0u;
    a1[6] = 0u;
    a1[7] = 0u;
    a1[4] = 0u;
    a1[5] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    *a1 = 0u;
    a1[1] = 0u;
    pthread_mutex_init((pthread_mutex_t *)((char *)a1 + 136), 0);
    if (!a3) {
      a3 = 2;
    }
    int v9 = malloc_type_malloc(16 * a3, 0x1000040451B5BE8uLL);
    if (v9)
    {
      uint64_t v10 = 0;
      *(_DWORD *)a1 = a2;
      *((_DWORD *)a1 + 1) = a3;
      *((void *)a1 + 1) = v9;
    }
    else
    {
      if (sub_D1C38(0x3Cu, 4))
      {
        int v14 = sub_D1C7C(0x3Cu);
        __uint64_t v15 = sub_DDEFC();
        int v16 = (const char *)sub_D1CB0(4);
        if (v14)
        {
          printf("%lld %d AVE %s: %s:%d %s | failed to allocate memory of time pair %p %d %d\n", v15, 60, v16, "AVE_TimeStats_Init", 116, "pTP != __null", a1, a2, a3);
          __uint64_t v15 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to allocate memory of time pair %p %d %d", v15, 60);
      }
      pthread_mutex_destroy((pthread_mutex_t *)((char *)a1 + 136));
      uint64_t v10 = 4294966293;
    }
  }
  if (sub_D1C38(0x3Cu, 6))
  {
    int v17 = sub_D1C7C(0x3Cu);
    __uint64_t v18 = sub_DDEFC();
    int v19 = (const char *)sub_D1CB0(6);
    if (v17)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %d %d\n", v18, 60, v19, "AVE_TimeStats_Init", a1, a2, a3, v10);
      __uint64_t v20 = sub_DDEFC();
      sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %d %d", v20);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %d %d", v18);
    }
  }
  return v10;
}

uint64_t sub_C011C(_OWORD *a1)
{
  if (sub_D1C38(0x3Cu, 6))
  {
    int v2 = sub_D1C7C(0x3Cu);
    __uint64_t v3 = sub_DDEFC();
    __uint64_t v4 = (const char *)sub_D1CB0(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", v3, 60, v4, "AVE_TimeStats_Uninit", a1);
      __uint64_t v5 = sub_DDEFC();
      int v16 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 60, v16, "AVE_TimeStats_Uninit", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", v3, 60, v4, "AVE_TimeStats_Uninit", a1);
    }
  }
  if (a1)
  {
    int v6 = (void *)*((void *)a1 + 1);
    if (v6)
    {
      free(v6);
      *((void *)a1 + 1) = 0;
    }
    pthread_mutex_destroy((pthread_mutex_t *)((char *)a1 + 136));
    uint64_t v7 = 0;
    *a1 = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    a1[4] = 0u;
    a1[5] = 0u;
    a1[6] = 0u;
    a1[7] = 0u;
    a1[8] = 0u;
    a1[9] = 0u;
    a1[10] = 0u;
    a1[11] = 0u;
    a1[12] = 0u;
    a1[13] = 0u;
    *((void *)a1 + 28) = 0;
  }
  else
  {
    if (sub_D1C38(0x3Cu, 4))
    {
      int v8 = sub_D1C7C(0x3Cu);
      __uint64_t v9 = sub_DDEFC();
      uint64_t v10 = (const char *)sub_D1CB0(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p\n", v9, 60, v10, "AVE_TimeStats_Uninit", 157, "pTS != __null", 0);
        __uint64_t v9 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p", v9);
    }
    uint64_t v7 = 4294966295;
  }
  if (sub_D1C38(0x3Cu, 6))
  {
    int v11 = sub_D1C7C(0x3Cu);
    __uint64_t v12 = sub_DDEFC();
    __uint64_t v13 = (const char *)sub_D1CB0(6);
    if (v11)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v12, 60, v13, "AVE_TimeStats_Uninit", a1, v7);
      __uint64_t v14 = sub_DDEFC();
      int v17 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v14, 60, v17, "AVE_TimeStats_Uninit", a1, v7);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v12, 60, v13, "AVE_TimeStats_Uninit", a1, v7);
    }
  }
  return v7;
}

uint64_t sub_C03A4(_OWORD *a1)
{
  if (sub_D1C38(0x3Cu, 6))
  {
    int v2 = sub_D1C7C(0x3Cu);
    __uint64_t v3 = sub_DDEFC();
    __uint64_t v4 = (const char *)sub_D1CB0(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", v3, 60, v4, "AVE_TimeStats_Destroy", a1);
      __uint64_t v5 = sub_DDEFC();
      __uint64_t v15 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 60, v15, "AVE_TimeStats_Destroy", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", v3, 60, v4, "AVE_TimeStats_Destroy", a1);
    }
  }
  if (a1)
  {
    uint64_t v6 = sub_C011C(a1);
    free(a1);
  }
  else
  {
    if (sub_D1C38(0x3Cu, 4))
    {
      int v7 = sub_D1C7C(0x3Cu);
      __uint64_t v8 = sub_DDEFC();
      __uint64_t v9 = (const char *)sub_D1CB0(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p\n", v8, 60, v9, "AVE_TimeStats_Destroy", 73, "pTS != __null", 0);
        __uint64_t v8 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p", v8);
    }
    uint64_t v6 = 4294966295;
  }
  if (sub_D1C38(0x3Cu, 6))
  {
    int v10 = sub_D1C7C(0x3Cu);
    __uint64_t v11 = sub_DDEFC();
    __uint64_t v12 = (const char *)sub_D1CB0(6);
    if (v10)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v11, 60, v12, "AVE_TimeStats_Destroy", a1, v6);
      __uint64_t v13 = sub_DDEFC();
      int v16 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v13, 60, v16, "AVE_TimeStats_Destroy", a1, v6);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v11, 60, v12, "AVE_TimeStats_Destroy", a1, v6);
    }
  }
  return v6;
}

uint64_t sub_C0600(uint64_t a1)
{
  if (sub_D1C38(0x3Cu, 6))
  {
    int v2 = sub_D1C7C(0x3Cu);
    __uint64_t v3 = sub_DDEFC();
    __uint64_t v4 = (const char *)sub_D1CB0(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", v3, 60, v4, "AVE_TimeStats_Restart", (const void *)a1);
      __uint64_t v5 = sub_DDEFC();
      __uint64_t v15 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 60, v15, "AVE_TimeStats_Restart", (const void *)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", v3, 60, v4, "AVE_TimeStats_Restart", (const void *)a1);
    }
  }
  if (a1)
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 136));
    ++*(_DWORD *)(a1 + 16);
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 136));
    uint64_t v6 = 0;
  }
  else
  {
    if (sub_D1C38(0x3Cu, 4))
    {
      int v7 = sub_D1C7C(0x3Cu);
      __uint64_t v8 = sub_DDEFC();
      __uint64_t v9 = (const char *)sub_D1CB0(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p\n", v8, 60, v9, "AVE_TimeStats_Restart", 190, "pTS != __null", 0);
        __uint64_t v8 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p", v8);
    }
    uint64_t v6 = 4294966295;
  }
  if (sub_D1C38(0x3Cu, 6))
  {
    int v10 = sub_D1C7C(0x3Cu);
    __uint64_t v11 = sub_DDEFC();
    __uint64_t v12 = (const char *)sub_D1CB0(6);
    if (v10)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v11, 60, v12, "AVE_TimeStats_Restart", (const void *)a1, v6);
      __uint64_t v13 = sub_DDEFC();
      int v16 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v13, 60, v16, "AVE_TimeStats_Restart", (const void *)a1, v6);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v11, 60, v12, "AVE_TimeStats_Restart", (const void *)a1, v6);
    }
  }
  return v6;
}

uint64_t sub_C086C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (sub_D1C38(0x3Cu, 7))
  {
    int v6 = sub_D1C7C(0x3Cu);
    __uint64_t v7 = sub_DDEFC();
    __uint64_t v8 = (const char *)sub_D1CB0(7);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %lld\n", v7, 60, v8, "AVE_TimeStats_AddStartTime", (const void *)a1, a2, a3);
      __uint64_t v7 = sub_DDEFC();
      sub_D1CB0(7);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %lld", v7);
  }
  if (!a1 || a2 > 6 || a3 < 0)
  {
    if (sub_D1C38(0x3Cu, 4))
    {
      int v12 = sub_D1C7C(0x3Cu);
      __uint64_t v13 = sub_DDEFC();
      __uint64_t v14 = (const char *)sub_D1CB0(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %lld\n", v13, 60, v14, "AVE_TimeStats_AddStartTime", 222, "pTS != __null && 0 <= pos && pos < AVE_TimeStats_Pos_Max && ts >= 0", (const void *)a1, a2, a3);
        __uint64_t v15 = sub_DDEFC();
        __uint64_t v25 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %lld", v15, 60, v25);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %lld", v13, 60, v14);
      }
    }
    uint64_t v11 = 4294966295;
  }
  else
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 136));
    uint64_t v9 = *(void *)(a1 + 8);
    if (v9)
    {
      int v10 = *(_DWORD *)(a1 + 16);
      if (a2 == 5) {
        *(void *)(v9 + 16 * (v10 % *(_DWORD *)(a1 + 4))) = a3;
      }
      uint64_t v11 = 0;
      if (!v10) {
        *(void *)(a1 + 16 * a2 + 24) = a3;
      }
    }
    else
    {
      if (sub_D1C38(0x3Cu, 4))
      {
        int v16 = sub_D1C7C(0x3Cu);
        __uint64_t v17 = sub_DDEFC();
        __uint64_t v18 = (const char *)sub_D1CB0(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | wrong state %p %d %lld\n", v17, 60, v18, "AVE_TimeStats_AddStartTime", 227, "pTS->psTP != __null", (const void *)a1, a2, a3);
          __uint64_t v19 = sub_DDEFC();
          __uint64_t v26 = sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | wrong state %p %d %lld", v19, 60, v26);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | wrong state %p %d %lld", v17, 60, v18);
        }
      }
      uint64_t v11 = 4294966285;
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 136));
  }
  if (sub_D1C38(0x3Cu, 7))
  {
    int v20 = sub_D1C7C(0x3Cu);
    __uint64_t v21 = sub_DDEFC();
    int v22 = (const char *)sub_D1CB0(7);
    if (v20)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %lld %d\n", v21, 60, v22, "AVE_TimeStats_AddStartTime", (const void *)a1, a2, a3, v11);
      __uint64_t v23 = sub_DDEFC();
      sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %lld %d", v23, 60);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %lld %d", v21, 60);
    }
  }
  return v11;
}

uint64_t sub_C0C44(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (sub_D1C38(0x3Cu, 7))
  {
    int v6 = sub_D1C7C(0x3Cu);
    __uint64_t v7 = sub_DDEFC();
    __uint64_t v8 = (const char *)sub_D1CB0(7);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %lld\n", v7, 60, v8, "AVE_TimeStats_AddEndTime", (const void *)a1, a2, a3);
      __uint64_t v7 = sub_DDEFC();
      sub_D1CB0(7);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %lld", v7);
  }
  if (!a1 || a2 > 6 || a3 < 0)
  {
    if (sub_D1C38(0x3Cu, 4))
    {
      int v11 = sub_D1C7C(0x3Cu);
      __uint64_t v12 = sub_DDEFC();
      __uint64_t v13 = (const char *)sub_D1CB0(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %lld\n", v12, 60, v13, "AVE_TimeStats_AddEndTime", 269, "pTS != __null && 0 <= pos && pos < AVE_TimeStats_Pos_Max && ts >= 0", (const void *)a1, a2, a3);
        __uint64_t v14 = sub_DDEFC();
        uint64_t v24 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %lld", v14, 60, v24);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %lld", v12, 60, v13);
      }
    }
    uint64_t v10 = 4294966295;
  }
  else
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 136));
    uint64_t v9 = *(void *)(a1 + 8);
    if (v9)
    {
      if (a2 == 5) {
        *(void *)(v9 + 16 * (*(_DWORD *)(a1 + 16) % *(_DWORD *)(a1 + 4)) + 8) = a3;
      }
      uint64_t v10 = 0;
      *(void *)(a1 + 16 * a2 + 32) = a3;
    }
    else
    {
      if (sub_D1C38(0x3Cu, 4))
      {
        int v15 = sub_D1C7C(0x3Cu);
        __uint64_t v16 = sub_DDEFC();
        __uint64_t v17 = (const char *)sub_D1CB0(4);
        if (v15)
        {
          printf("%lld %d AVE %s: %s:%d %s | wrong state %p %d %lld\n", v16, 60, v17, "AVE_TimeStats_AddEndTime", 274, "pTS->psTP != __null", (const void *)a1, a2, a3);
          __uint64_t v18 = sub_DDEFC();
          __uint64_t v25 = sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | wrong state %p %d %lld", v18, 60, v25);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | wrong state %p %d %lld", v16, 60, v17);
        }
      }
      uint64_t v10 = 4294966285;
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 136));
  }
  if (sub_D1C38(0x3Cu, 7))
  {
    int v19 = sub_D1C7C(0x3Cu);
    __uint64_t v20 = sub_DDEFC();
    __uint64_t v21 = (const char *)sub_D1CB0(7);
    if (v19)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %lld %d\n", v20, 60, v21, "AVE_TimeStats_AddEndTime", (const void *)a1, a2, a3, v10);
      __uint64_t v22 = sub_DDEFC();
      sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %lld %d", v22, 60);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %lld %d", v20, 60);
    }
  }
  return v10;
}

uint64_t sub_C1018(uint64_t a1)
{
  if (sub_D1C38(0x3Cu, 7))
  {
    int v2 = sub_D1C7C(0x3Cu);
    __uint64_t v3 = sub_DDEFC();
    __uint64_t v4 = (const char *)sub_D1CB0(7);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", v3, 60, v4, "AVE_TimeStats_Calc", (const void *)a1);
      __uint64_t v5 = sub_DDEFC();
      uint64_t v29 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 60, v29, "AVE_TimeStats_Calc", (const void *)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", v3, 60, v4, "AVE_TimeStats_Calc", (const void *)a1);
    }
  }
  if (!a1)
  {
    if (sub_D1C38(0x3Cu, 4))
    {
      int v18 = sub_D1C7C(0x3Cu);
      __uint64_t v19 = sub_DDEFC();
      __uint64_t v20 = (const char *)sub_D1CB0(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p\n", v19, 60, v20, "AVE_TimeStats_Calc", 313, "pTS != __null", 0);
        __uint64_t v19 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p", v19);
    }
    uint64_t v17 = 4294966295;
    goto LABEL_38;
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 136));
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6)
  {
    if (sub_D1C38(0x3Cu, 4))
    {
      int v21 = sub_D1C7C(0x3Cu);
      __uint64_t v22 = sub_DDEFC();
      __uint64_t v23 = (const char *)sub_D1CB0(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong state %p\n", v22, 60, v23, "AVE_TimeStats_Calc", 318, "pTS->psTP != __null", (const void *)a1);
        __uint64_t v22 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong state %p", v22);
    }
    uint64_t v17 = 4294966285;
    goto LABEL_37;
  }
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  __uint64_t v7 = (uint64_t *)(a1 + 200);
  *(void *)(a1 + 216) = 0;
  int v8 = *(_DWORD *)(a1 + 16);
  unsigned int v9 = *(_DWORD *)(a1 + 4);
  if (v8 < (int)v9) {
    uint64_t v10 = (v8 + 1);
  }
  else {
    uint64_t v10 = v9;
  }
  if ((int)v10 < 1) {
    goto LABEL_32;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v14 = 0;
  int v15 = (void *)(v6 + 8);
  do
  {
    uint64_t v16 = *v15 - *(v15 - 1);
    if (v16 < 1) {
      goto LABEL_21;
    }
    if (v13)
    {
      if (v16 < v12)
      {
        *__uint64_t v7 = v16;
        uint64_t v12 = v16;
      }
      if (v16 <= v11) {
        goto LABEL_20;
      }
    }
    else
    {
      *__uint64_t v7 = v16;
      uint64_t v12 = v16;
    }
    *(void *)(a1 + 216) = v16;
    uint64_t v11 = v16;
LABEL_20:
    v14 += v16;
    ++v13;
LABEL_21:
    v15 += 2;
    --v10;
  }
  while (v10);
  if (v13)
  {
    uint64_t v17 = 0;
    *(void *)(a1 + 208) = v14 / v13;
    *(_DWORD *)(a1 + 224) = v13;
    goto LABEL_37;
  }
LABEL_32:
  uint64_t v17 = 0;
LABEL_37:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 136));
LABEL_38:
  if (sub_D1C38(0x3Cu, 7))
  {
    int v24 = sub_D1C7C(0x3Cu);
    __uint64_t v25 = sub_DDEFC();
    __uint64_t v26 = (const char *)sub_D1CB0(7);
    if (v24)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v25, 60, v26, "AVE_TimeStats_Calc", (const void *)a1, v17);
      __uint64_t v27 = sub_DDEFC();
      uint64_t v30 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v27, 60, v30, "AVE_TimeStats_Calc", (const void *)a1, v17);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v25, 60, v26, "AVE_TimeStats_Calc", (const void *)a1, v17);
    }
  }
  return v17;
}

uint64_t sub_C13FC(unsigned int *a1, uint64_t a2, int a3, const void *a4, int a5)
{
  memset(v45, 0, sizeof(v45));
  if (a1)
  {
    int v10 = (char)a3;
    uint64_t result = sub_D1C38(a2, (char)a3);
    if (result)
    {
      sub_3444((uint64_t)a4, a5, (char *)v45, 32, v12, v13, v14, v15);
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 34));
      if (sub_D1C38(a2, (char)a3))
      {
        int v16 = sub_D1C7C(a2);
        int v17 = v16;
        if (a3 < 0)
        {
          if (v16 && (-a3 & 0x20) == 0) {
            printf("TimeStats ID: %d %s | Session: %lld Process: %lld\n", *a1, (const char *)v45, *((void *)a1 + 6) - *((void *)a1 + 3), *((void *)a1 + 14) - *((void *)a1 + 13));
          }
          syslog(3, "TimeStats ID: %d %s | Session: %lld Process: %lld");
        }
        else
        {
          __uint64_t v18 = sub_DDEFC();
          __uint64_t v19 = (const char *)sub_D1CB0((char)a3);
          if ((a3 & 0x20) == 0 && v17)
          {
            printf("%lld %d AVE %s: TimeStats ID: %d %s | Session: %lld Process: %lld\n", v18, a2, v19, *a1, (const char *)v45, *((void *)a1 + 6) - *((void *)a1 + 3), *((void *)a1 + 14) - *((void *)a1 + 13));
            __uint64_t v18 = sub_DDEFC();
            sub_D1CB0((char)a3);
          }
          syslog(3, "%lld %d AVE %s: TimeStats ID: %d %s | Session: %lld Process: %lld", v18);
        }
      }
      if (sub_D1C38(a2, (char)a3))
      {
        int v24 = sub_D1C7C(a2);
        int v25 = v24;
        if (a3 < 0)
        {
          if (!v24 || (-a3 & 0x20) != 0)
          {
            syslog(3, "TimeStats ID: %d %s | Open: %lld Close: %lld Prepare: %lld Start: %lld Stop: %lld Complete: %lld", *a1, v45);
          }
          else
          {
            printf("TimeStats ID: %d %s | Open: %lld Close: %lld Prepare: %lld Start: %lld Stop: %lld Complete: %lld\n", *a1, (const char *)v45, *((void *)a1 + 4) - *((void *)a1 + 3), *((void *)a1 + 6) - *((void *)a1 + 5), *((void *)a1 + 8) - *((void *)a1 + 7), *((void *)a1 + 10) - *((void *)a1 + 9), *((void *)a1 + 12) - *((void *)a1 + 11), *((void *)a1 + 16) - *((void *)a1 + 15));
            syslog(3, "TimeStats ID: %d %s | Open: %lld Close: %lld Prepare: %lld Start: %lld Stop: %lld Complete: %lld", *a1, v45);
          }
        }
        else
        {
          __uint64_t v26 = sub_DDEFC();
          __uint64_t v27 = (const char *)sub_D1CB0((char)a3);
          if ((a3 & 0x20) != 0 || !v25)
          {
            uint64_t v43 = *((void *)a1 + 12) - *((void *)a1 + 11);
            uint64_t v44 = *((void *)a1 + 16) - *((void *)a1 + 15);
            uint64_t v41 = *((void *)a1 + 8) - *((void *)a1 + 7);
            uint64_t v42 = *((void *)a1 + 10) - *((void *)a1 + 9);
            uint64_t v39 = *((void *)a1 + 4) - *((void *)a1 + 3);
            uint64_t v40 = *((void *)a1 + 6) - *((void *)a1 + 5);
            uint64_t v38 = *a1;
            uint64_t v34 = a2;
            double v36 = v27;
          }
          else
          {
            printf("%lld %d AVE %s: TimeStats ID: %d %s | Open: %lld Close: %lld Prepare: %lld Start: %lld Stop: %lld Complete: %lld\n", v26, a2, v27, *a1, (const char *)v45, *((void *)a1 + 4) - *((void *)a1 + 3), *((void *)a1 + 6) - *((void *)a1 + 5), *((void *)a1 + 8) - *((void *)a1 + 7), *((void *)a1 + 10) - *((void *)a1 + 9), *((void *)a1 + 12) - *((void *)a1 + 11), *((void *)a1 + 16) - *((void *)a1 + 15));
            __uint64_t v26 = sub_DDEFC();
            double v28 = (const char *)sub_D1CB0((char)a3);
            uint64_t v43 = *((void *)a1 + 12) - *((void *)a1 + 11);
            uint64_t v44 = *((void *)a1 + 16) - *((void *)a1 + 15);
            uint64_t v41 = *((void *)a1 + 8) - *((void *)a1 + 7);
            uint64_t v42 = *((void *)a1 + 10) - *((void *)a1 + 9);
            uint64_t v39 = *((void *)a1 + 4) - *((void *)a1 + 3);
            uint64_t v40 = *((void *)a1 + 6) - *((void *)a1 + 5);
            uint64_t v38 = *a1;
            uint64_t v34 = a2;
            double v36 = v28;
          }
          syslog(3, "%lld %d AVE %s: TimeStats ID: %d %s | Open: %lld Close: %lld Prepare: %lld Start: %lld Stop: %lld Complete: %lld", v26, v34, v36, v38, v45, v39, v40, v41, v42, v43, v44);
        }
      }
      if (sub_D1C38(a2, (char)a3))
      {
        int v29 = sub_D1C7C(a2);
        int v30 = v29;
        if (a3 < 0)
        {
          if (v29 && (-a3 & 0x20) == 0) {
            printf("TimeStats ID: %d %s | Process: %lld - %lld - %lld Count: %d\n", *a1, (const char *)v45, *((void *)a1 + 25), *((void *)a1 + 26), *((void *)a1 + 27), a1[56]);
          }
          syslog(3, "TimeStats ID: %d %s | Process: %lld - %lld - %lld Count: %d");
        }
        else
        {
          __uint64_t v31 = sub_DDEFC();
          int v32 = (const char *)sub_D1CB0((char)a3);
          if ((a3 & 0x20) != 0 || !v30)
          {
            syslog(3, "%lld %d AVE %s: TimeStats ID: %d %s | Process: %lld - %lld - %lld Count: %d", v31, a2, v32);
          }
          else
          {
            printf("%lld %d AVE %s: TimeStats ID: %d %s | Process: %lld - %lld - %lld Count: %d\n", v31, a2, v32, *a1, (const char *)v45, *((void *)a1 + 25), *((void *)a1 + 26), *((void *)a1 + 27), a1[56]);
            __uint64_t v33 = sub_DDEFC();
            double v37 = sub_D1CB0(v10);
            syslog(3, "%lld %d AVE %s: TimeStats ID: %d %s | Process: %lld - %lld - %lld Count: %d", v33, a2, v37);
          }
        }
      }
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 34));
      return 0;
    }
  }
  else
  {
    if (sub_D1C38(0x3Cu, 4))
    {
      int v20 = sub_D1C7C(0x3Cu);
      __uint64_t v21 = sub_DDEFC();
      __uint64_t v22 = (const char *)sub_D1CB0(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p %d\n", v21, 60, v22, "AVE_TimeStats_Print", 391, "pTS != __null", 0, a2, a3, a4, a5);
        __uint64_t v23 = sub_DDEFC();
        double v35 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p %d", v23, 60, v35, "AVE_TimeStats_Print");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p %d", v21, 60, v22, "AVE_TimeStats_Print");
      }
    }
    return 4294966295;
  }
  return result;
}

uint64_t sub_C1AAC(int a1, __CFArray *a2)
{
  int valuePtr = a1;
  if (a2)
  {
    CFNumberRef v3 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v3)
    {
      CFNumberRef v4 = v3;
      CFArrayAppendValue(a2, v3);
      CFRelease(v4);
      return 0;
    }
    else
    {
      if (sub_D1C38(0xFu, 4))
      {
        int v10 = sub_D1C7C(0xFu);
        __uint64_t v11 = sub_DDEFC();
        uint64_t v12 = (const char *)sub_D1CB0(4);
        if (v10)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CFNumber %d %p\n", v11, 15, v12, "AVE_CFArray_AddSInt32", 88, "pNum != __null", valuePtr, a2);
          __uint64_t v11 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %d %p", v11, 15);
      }
      return 4294966293;
    }
  }
  else
  {
    if (sub_D1C38(0xFu, 4))
    {
      int v7 = sub_D1C7C(0xFu);
      __uint64_t v8 = sub_DDEFC();
      unsigned int v9 = (const char *)sub_D1CB0(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %d %p\n", v8, 15, v9, "AVE_CFArray_AddSInt32", 84, "pArray != __null", a1, 0);
        __uint64_t v8 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %d %p", v8, 15);
    }
    return 4294966295;
  }
}

uint64_t sub_C1CD0(uint64_t a1, __CFArray *a2)
{
  uint64_t valuePtr = a1;
  if (a2)
  {
    CFNumberRef v3 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
    if (v3)
    {
      CFNumberRef v4 = v3;
      CFArrayAppendValue(a2, v3);
      CFRelease(v4);
      return 0;
    }
    else
    {
      if (sub_D1C38(0xFu, 4))
      {
        int v10 = sub_D1C7C(0xFu);
        __uint64_t v11 = sub_DDEFC();
        uint64_t v12 = (const char *)sub_D1CB0(4);
        if (v10)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CFNumber %lld %p\n", v11, 15, v12, "AVE_CFArray_AddSInt64", 115, "pNum != __null", valuePtr, a2);
          __uint64_t v11 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %lld %p", v11, 15);
      }
      return 4294966293;
    }
  }
  else
  {
    if (sub_D1C38(0xFu, 4))
    {
      int v7 = sub_D1C7C(0xFu);
      __uint64_t v8 = sub_DDEFC();
      unsigned int v9 = (const char *)sub_D1CB0(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %lld %p\n", v8, 15, v9, "AVE_CFArray_AddSInt64", 111, "pArray != __null", a1, 0);
        __uint64_t v8 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %lld %p", v8, 15);
    }
    return 4294966295;
  }
}

uint64_t sub_C1EF4(__CFArray *a1, double a2)
{
  double valuePtr = a2;
  if (a1)
  {
    CFNumberRef v4 = CFNumberCreate(0, kCFNumberFloat64Type, &valuePtr);
    if (v4)
    {
      CFNumberRef v5 = v4;
      CFArrayAppendValue(a1, v4);
      CFRelease(v5);
      return 0;
    }
    else
    {
      if (sub_D1C38(0xFu, 4))
      {
        int v10 = sub_D1C7C(0xFu);
        __uint64_t v11 = sub_DDEFC();
        uint64_t v12 = (const char *)sub_D1CB0(4);
        if (v10)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CFNumber %lf %p\n", v11, 15, v12, "AVE_CFArray_AddFloat64", 143, "pNum != __null", a2, a1);
          __uint64_t v11 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %lf %p", v11);
      }
      return 4294966293;
    }
  }
  else
  {
    if (sub_D1C38(0xFu, 4))
    {
      int v7 = sub_D1C7C(0xFu);
      __uint64_t v8 = sub_DDEFC();
      unsigned int v9 = (const char *)sub_D1CB0(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %lf %p\n", v8, 15, v9, "AVE_CFArray_AddFloat64", 139, "pArray != __null", a2, 0);
        __uint64_t v8 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %lf %p", v8);
    }
    return 4294966295;
  }
}

uint64_t sub_C2130(__CFArray *a1, double a2)
{
  double valuePtr = a2;
  if (a1)
  {
    CFNumberRef v3 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
    if (v3)
    {
      CFNumberRef v4 = v3;
      CFArrayAppendValue(a1, v3);
      CFRelease(v4);
      return 0;
    }
    else
    {
      if (sub_D1C38(0xFu, 4))
      {
        int v10 = sub_D1C7C(0xFu);
        __uint64_t v11 = sub_DDEFC();
        uint64_t v12 = (const char *)sub_D1CB0(4);
        if (v10)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CFNumber %lf %p\n", v11, 15, v12, "AVE_CFArray_AddDouble", 170, "pNum != __null", valuePtr, a1);
          __uint64_t v11 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %lf %p", v11);
      }
      return 4294966293;
    }
  }
  else
  {
    if (sub_D1C38(0xFu, 4))
    {
      int v7 = sub_D1C7C(0xFu);
      __uint64_t v8 = sub_DDEFC();
      unsigned int v9 = (const char *)sub_D1CB0(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %lf %p\n", v8, 15, v9, "AVE_CFArray_AddDouble", 166, "pArray != __null", a2, 0);
        __uint64_t v8 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %lf %p", v8);
    }
    return 4294966295;
  }
}

uint64_t sub_C2374(CFArrayRef theArray, CFIndex idx, unsigned char *a3)
{
  int v4 = idx;
  if (theArray && (idx & 0x80000000) == 0 && a3)
  {
    *a3 = 0;
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, idx);
    if (ValueAtIndex)
    {
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(ValueAtIndex))
      {
        if (CFNumberGetValue(ValueAtIndex, kCFNumberCharType, a3)) {
          return 0;
        }
        else {
          return 4294966288;
        }
      }
    }
    if (!sub_D1C38(0xFu, 4)) {
      return 4294966296;
    }
    int v13 = sub_D1C7C(0xFu);
    __uint64_t v14 = sub_DDEFC();
    uint64_t v15 = (const char *)sub_D1CB0(4);
    if (v13)
    {
      if (ValueAtIndex) {
        CFTypeID v16 = CFGetTypeID(ValueAtIndex);
      }
      else {
        CFTypeID v16 = -1;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %d %p %p %ld\n", v14, 15, v15, "AVE_CFArray_GetChar", 203, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theArray, v4, a3, ValueAtIndex, v16);
      __uint64_t v14 = sub_DDEFC();
      uint64_t v15 = (const char *)sub_D1CB0(4);
      if (!ValueAtIndex)
      {
        CFTypeID v17 = -1;
        goto LABEL_24;
      }
    }
    else if (!ValueAtIndex)
    {
      CFTypeID v17 = -1;
      goto LABEL_24;
    }
    CFTypeID v17 = CFGetTypeID(ValueAtIndex);
LABEL_24:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %d %p %p %ld", v14, 15, v15, "AVE_CFArray_GetChar", 203, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theArray, v4, a3, ValueAtIndex, v17);
    return 4294966296;
  }
  if (sub_D1C38(0xFu, 4))
  {
    int v9 = sub_D1C7C(0xFu);
    __uint64_t v10 = sub_DDEFC();
    __uint64_t v11 = (const char *)sub_D1CB0(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p\n", v10, 15, v11, "AVE_CFArray_GetChar", 196, "pArray != __null && idx >= 0 && pVal != __null", theArray, v4, a3);
      __uint64_t v12 = sub_DDEFC();
      __uint64_t v18 = sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

uint64_t sub_C261C(CFArrayRef theArray, CFIndex idx, _WORD *a3)
{
  int v4 = idx;
  if (theArray && (idx & 0x80000000) == 0 && a3)
  {
    *a3 = 0;
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, idx);
    if (ValueAtIndex)
    {
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(ValueAtIndex))
      {
        if (CFNumberGetValue(ValueAtIndex, kCFNumberSInt16Type, a3)) {
          return 0;
        }
        else {
          return 4294966288;
        }
      }
    }
    if (!sub_D1C38(0xFu, 4)) {
      return 4294966296;
    }
    int v13 = sub_D1C7C(0xFu);
    __uint64_t v14 = sub_DDEFC();
    uint64_t v15 = (const char *)sub_D1CB0(4);
    if (v13)
    {
      if (ValueAtIndex) {
        CFTypeID v16 = CFGetTypeID(ValueAtIndex);
      }
      else {
        CFTypeID v16 = -1;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %d %p %p %ld\n", v14, 15, v15, "AVE_CFArray_GetSInt16", 234, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theArray, v4, a3, ValueAtIndex, v16);
      __uint64_t v14 = sub_DDEFC();
      uint64_t v15 = (const char *)sub_D1CB0(4);
      if (!ValueAtIndex)
      {
        CFTypeID v17 = -1;
        goto LABEL_24;
      }
    }
    else if (!ValueAtIndex)
    {
      CFTypeID v17 = -1;
      goto LABEL_24;
    }
    CFTypeID v17 = CFGetTypeID(ValueAtIndex);
LABEL_24:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %d %p %p %ld", v14, 15, v15, "AVE_CFArray_GetSInt16", 234, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theArray, v4, a3, ValueAtIndex, v17);
    return 4294966296;
  }
  if (sub_D1C38(0xFu, 4))
  {
    int v9 = sub_D1C7C(0xFu);
    __uint64_t v10 = sub_DDEFC();
    __uint64_t v11 = (const char *)sub_D1CB0(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p\n", v10, 15, v11, "AVE_CFArray_GetSInt16", 227, "pArray != __null && idx >= 0 && pVal != __null", theArray, v4, a3);
      __uint64_t v12 = sub_DDEFC();
      __uint64_t v18 = sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

uint64_t sub_C28C4(CFArrayRef theArray, CFIndex idx, _DWORD *a3)
{
  int v4 = idx;
  if (theArray && (idx & 0x80000000) == 0 && a3)
  {
    *a3 = 0;
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, idx);
    if (ValueAtIndex)
    {
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(ValueAtIndex))
      {
        if (CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, a3)) {
          return 0;
        }
        else {
          return 4294966288;
        }
      }
    }
    if (!sub_D1C38(0xFu, 4)) {
      return 4294966296;
    }
    int v13 = sub_D1C7C(0xFu);
    __uint64_t v14 = sub_DDEFC();
    uint64_t v15 = (const char *)sub_D1CB0(4);
    if (v13)
    {
      if (ValueAtIndex) {
        CFTypeID v16 = CFGetTypeID(ValueAtIndex);
      }
      else {
        CFTypeID v16 = -1;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %d %p %p %ld\n", v14, 15, v15, "AVE_CFArray_GetSInt32", 265, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theArray, v4, a3, ValueAtIndex, v16);
      __uint64_t v14 = sub_DDEFC();
      uint64_t v15 = (const char *)sub_D1CB0(4);
      if (!ValueAtIndex)
      {
        CFTypeID v17 = -1;
        goto LABEL_24;
      }
    }
    else if (!ValueAtIndex)
    {
      CFTypeID v17 = -1;
      goto LABEL_24;
    }
    CFTypeID v17 = CFGetTypeID(ValueAtIndex);
LABEL_24:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %d %p %p %ld", v14, 15, v15, "AVE_CFArray_GetSInt32", 265, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theArray, v4, a3, ValueAtIndex, v17);
    return 4294966296;
  }
  if (sub_D1C38(0xFu, 4))
  {
    int v9 = sub_D1C7C(0xFu);
    __uint64_t v10 = sub_DDEFC();
    __uint64_t v11 = (const char *)sub_D1CB0(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p\n", v10, 15, v11, "AVE_CFArray_GetSInt32", 258, "pArray != __null && idx >= 0 && pVal != __null", theArray, v4, a3);
      __uint64_t v12 = sub_DDEFC();
      __uint64_t v18 = sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

uint64_t sub_C2B6C(CFArrayRef theArray, CFIndex idx, void *a3)
{
  int v4 = idx;
  if (theArray && (idx & 0x80000000) == 0 && a3)
  {
    *a3 = 0;
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, idx);
    if (ValueAtIndex)
    {
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(ValueAtIndex))
      {
        if (CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, a3)) {
          return 0;
        }
        else {
          return 4294966288;
        }
      }
    }
    if (!sub_D1C38(0xFu, 4)) {
      return 4294966296;
    }
    int v13 = sub_D1C7C(0xFu);
    __uint64_t v14 = sub_DDEFC();
    uint64_t v15 = (const char *)sub_D1CB0(4);
    if (v13)
    {
      if (ValueAtIndex) {
        CFTypeID v16 = CFGetTypeID(ValueAtIndex);
      }
      else {
        CFTypeID v16 = -1;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %d %p %p %ld\n", v14, 15, v15, "AVE_CFArray_GetSInt64", 296, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theArray, v4, a3, ValueAtIndex, v16);
      __uint64_t v14 = sub_DDEFC();
      uint64_t v15 = (const char *)sub_D1CB0(4);
      if (!ValueAtIndex)
      {
        CFTypeID v17 = -1;
        goto LABEL_24;
      }
    }
    else if (!ValueAtIndex)
    {
      CFTypeID v17 = -1;
      goto LABEL_24;
    }
    CFTypeID v17 = CFGetTypeID(ValueAtIndex);
LABEL_24:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %d %p %p %ld", v14, 15, v15, "AVE_CFArray_GetSInt64", 296, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theArray, v4, a3, ValueAtIndex, v17);
    return 4294966296;
  }
  if (sub_D1C38(0xFu, 4))
  {
    int v9 = sub_D1C7C(0xFu);
    __uint64_t v10 = sub_DDEFC();
    __uint64_t v11 = (const char *)sub_D1CB0(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p\n", v10, 15, v11, "AVE_CFArray_GetSInt64", 289, "pArray != __null && idx >= 0 && pVal != __null", theArray, v4, a3);
      __uint64_t v12 = sub_DDEFC();
      __uint64_t v18 = sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

uint64_t sub_C2E14(CFArrayRef theArray, CFIndex idx, void *a3)
{
  int v4 = idx;
  uint64_t valuePtr = 0;
  if (theArray && (idx & 0x80000000) == 0 && a3)
  {
    *a3 = 0;
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, idx);
    if (ValueAtIndex)
    {
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(ValueAtIndex))
      {
        if (CFNumberGetValue(ValueAtIndex, kCFNumberFloat64Type, &valuePtr)) {
          uint64_t result = 0;
        }
        else {
          uint64_t result = 4294966288;
        }
        *a3 = valuePtr;
        return result;
      }
    }
    if (!sub_D1C38(0xFu, 4)) {
      return 4294966296;
    }
    int v13 = sub_D1C7C(0xFu);
    __uint64_t v14 = sub_DDEFC();
    uint64_t v15 = (const char *)sub_D1CB0(4);
    if (v13)
    {
      if (ValueAtIndex) {
        CFTypeID v16 = CFGetTypeID(ValueAtIndex);
      }
      else {
        CFTypeID v16 = -1;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %d %p %p %ld\n", v14, 15, v15, "AVE_CFArray_GetFloat64", 328, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theArray, v4, a3, ValueAtIndex, v16);
      __uint64_t v14 = sub_DDEFC();
      uint64_t v15 = (const char *)sub_D1CB0(4);
      if (!ValueAtIndex)
      {
        CFTypeID v17 = -1;
        goto LABEL_25;
      }
    }
    else if (!ValueAtIndex)
    {
      CFTypeID v17 = -1;
      goto LABEL_25;
    }
    CFTypeID v17 = CFGetTypeID(ValueAtIndex);
LABEL_25:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %d %p %p %ld", v14, 15, v15, "AVE_CFArray_GetFloat64", 328, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theArray, v4, a3, ValueAtIndex, v17);
    return 4294966296;
  }
  if (sub_D1C38(0xFu, 4))
  {
    int v9 = sub_D1C7C(0xFu);
    __uint64_t v10 = sub_DDEFC();
    __uint64_t v11 = (const char *)sub_D1CB0(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p\n", v10, 15, v11, "AVE_CFArray_GetFloat64", 321, "pArray != __null && idx >= 0 && pVal != __null", theArray, v4, a3);
      __uint64_t v12 = sub_DDEFC();
      __uint64_t v18 = sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

uint64_t sub_C30C8(void *key, int a2, CFMutableDictionaryRef theDict)
{
  if (key && theDict)
  {
    uint64_t v6 = (const void **)&kCFBooleanTrue;
    if (!a2) {
      uint64_t v6 = (const void **)&kCFBooleanFalse;
    }
    CFDictionaryAddValue(theDict, key, *v6);
    return 0;
  }
  else
  {
    if (sub_D1C38(0xFu, 4))
    {
      int v8 = sub_D1C7C(0xFu);
      __uint64_t v9 = sub_DDEFC();
      __uint64_t v10 = (const char *)sub_D1CB0(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p\n", v9, 15, v10, "AVE_CFDict_AddBool", 383, "pKey != __null && pDict != __null", key, a2, theDict);
        __uint64_t v11 = sub_DDEFC();
        __uint64_t v12 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v11, 15, v12);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v9, 15, v10);
      }
    }
    return 4294966295;
  }
}

uint64_t sub_C321C(const void *a1, __CFDictionary *a2, double a3)
{
  double valuePtr = a3;
  if (a1 && a2)
  {
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
    if (v6)
    {
      CFNumberRef v7 = v6;
      CFDictionaryAddValue(a2, a1, v6);
      CFRelease(v7);
      return 0;
    }
    else
    {
      if (sub_D1C38(0xFu, 4))
      {
        int v12 = sub_D1C7C(0xFu);
        __uint64_t v13 = sub_DDEFC();
        __uint64_t v14 = (const char *)sub_D1CB0(4);
        if (v12)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %lf %p\n", v13, 15, v14, "AVE_CFDict_AddDouble", 470, "pNum != __null", a1, valuePtr, a2);
          __uint64_t v13 = sub_DDEFC();
          sub_D1CB0(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %lf %p", v13, 15);
      }
      return 4294966293;
    }
  }
  else
  {
    if (sub_D1C38(0xFu, 4))
    {
      int v9 = sub_D1C7C(0xFu);
      __uint64_t v10 = sub_DDEFC();
      __uint64_t v11 = (const char *)sub_D1CB0(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %lf %p\n", v10, 15, v11, "AVE_CFDict_AddDouble", 466, "pKey != __null && pDict != __null", a1, a3, a2);
        __uint64_t v10 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %lf %p", v10, 15);
    }
    return 4294966295;
  }
}

uint64_t sub_C347C(const void *a1, int a2, __CFDictionary *a3)
{
  int valuePtr = a2;
  if (a1 && a3)
  {
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v6)
    {
      CFNumberRef v7 = v6;
      CFDictionaryAddValue(a3, a1, v6);
      CFRelease(v7);
      return 0;
    }
    else
    {
      if (sub_D1C38(0xFu, 4))
      {
        int v13 = sub_D1C7C(0xFu);
        __uint64_t v14 = sub_DDEFC();
        uint64_t v15 = (const char *)sub_D1CB0(4);
        if (v13)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %d %p\n", v14, 15, v15, "AVE_CFDict_AddSInt32", 561, "pNum != __null", a1, valuePtr, a3);
          __uint64_t v16 = sub_DDEFC();
          __uint64_t v18 = sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %d %p", v16, 15, v18);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %d %p", v14, 15, v15);
        }
      }
      return 4294966293;
    }
  }
  else
  {
    if (sub_D1C38(0xFu, 4))
    {
      int v9 = sub_D1C7C(0xFu);
      __uint64_t v10 = sub_DDEFC();
      __uint64_t v11 = (const char *)sub_D1CB0(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p\n", v10, 15, v11, "AVE_CFDict_AddSInt32", 557, "pKey != __null && pDict != __null", a1, a2, a3);
        __uint64_t v12 = sub_DDEFC();
        CFTypeID v17 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v12, 15, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v10, 15, v11);
      }
    }
    return 4294966295;
  }
}

uint64_t sub_C36BC(const void *a1, uint64_t a2, __CFDictionary *a3)
{
  uint64_t valuePtr = a2;
  if (a1 && a3)
  {
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
    if (v6)
    {
      CFNumberRef v7 = v6;
      CFDictionaryAddValue(a3, a1, v6);
      CFRelease(v7);
      return 0;
    }
    else
    {
      if (sub_D1C38(0xFu, 4))
      {
        int v13 = sub_D1C7C(0xFu);
        __uint64_t v14 = sub_DDEFC();
        uint64_t v15 = (const char *)sub_D1CB0(4);
        if (v13)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %lld %p\n", v14, 15, v15, "AVE_CFDict_AddSInt64", 591, "pNum != __null", a1, valuePtr, a3);
          __uint64_t v16 = sub_DDEFC();
          __uint64_t v18 = sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %lld %p", v16, 15, v18);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %lld %p", v14, 15, v15);
        }
      }
      return 4294966293;
    }
  }
  else
  {
    if (sub_D1C38(0xFu, 4))
    {
      int v9 = sub_D1C7C(0xFu);
      __uint64_t v10 = sub_DDEFC();
      __uint64_t v11 = (const char *)sub_D1CB0(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %lld %p\n", v10, 15, v11, "AVE_CFDict_AddSInt64", 587, "pKey != __null && pDict != __null", a1, a2, a3);
        __uint64_t v12 = sub_DDEFC();
        CFTypeID v17 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %lld %p", v12, 15, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %lld %p", v10, 15, v11);
      }
    }
    return 4294966295;
  }
}

uint64_t sub_C38FC(CFDictionaryRef theDict, void *key, BOOL *a3)
{
  if (theDict && key && a3)
  {
    *a3 = 0;
    if (!CFDictionaryContainsKey(theDict, key)) {
      return 4294966288;
    }
    CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(theDict, key);
    if (Value)
    {
      CFTypeID TypeID = CFBooleanGetTypeID();
      if (TypeID == CFGetTypeID(Value))
      {
        int v8 = CFBooleanGetValue(Value);
        uint64_t result = 0;
        *a3 = v8 != 0;
        return result;
      }
    }
    if (!sub_D1C38(0xFu, 4)) {
      return 4294966296;
    }
    int v14 = sub_D1C7C(0xFu);
    __uint64_t v15 = sub_DDEFC();
    __uint64_t v16 = (const char *)sub_D1CB0(4);
    if (v14)
    {
      if (Value) {
        CFTypeID v17 = CFGetTypeID(Value);
      }
      else {
        CFTypeID v17 = -1;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFBoolean %p %p %p %p %ld\n", v15, 15, v16, "AVE_CFDict_GetBool", 631, "pBool != __null && CFBooleanGetTypeID() == CFGetTypeID(pBool)", theDict, key, a3, Value, v17);
      __uint64_t v15 = sub_DDEFC();
      __uint64_t v16 = (const char *)sub_D1CB0(4);
      if (!Value)
      {
        CFTypeID v18 = -1;
        goto LABEL_24;
      }
    }
    else if (!Value)
    {
      CFTypeID v18 = -1;
      goto LABEL_24;
    }
    CFTypeID v18 = CFGetTypeID(Value);
LABEL_24:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFBoolean %p %p %p %p %ld", v15, 15, v16, "AVE_CFDict_GetBool", 631, "pBool != __null && CFBooleanGetTypeID() == CFGetTypeID(pBool)", theDict, key, a3, Value, v18);
    return 4294966296;
  }
  if (sub_D1C38(0xFu, 4))
  {
    int v10 = sub_D1C7C(0xFu);
    __uint64_t v11 = sub_DDEFC();
    __uint64_t v12 = (const char *)sub_D1CB0(4);
    if (v10)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v11, 15, v12, "AVE_CFDict_GetBool", 617, "pDict != __null && pKey != __null && pVal != __null", theDict, key, a3);
      __uint64_t v13 = sub_DDEFC();
      __uint64_t v19 = sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 15, v19);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v11, 15, v12);
    }
  }
  return 4294966295;
}

uint64_t sub_C3BAC(CFDictionaryRef theDict, void *key, unsigned char *a3)
{
  if (theDict && key && a3)
  {
    *a3 = 0;
    if (!CFDictionaryContainsKey(theDict, key)) {
      return 4294966288;
    }
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, key);
    if (Value)
    {
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(Value))
      {
        if (CFNumberGetValue(Value, kCFNumberCharType, a3)) {
          return 0;
        }
        else {
          return 4294966288;
        }
      }
    }
    if (!sub_D1C38(0xFu, 4)) {
      return 4294966296;
    }
    int v13 = sub_D1C7C(0xFu);
    __uint64_t v14 = sub_DDEFC();
    __uint64_t v15 = (const char *)sub_D1CB0(4);
    if (v13)
    {
      if (Value) {
        CFTypeID v16 = CFGetTypeID(Value);
      }
      else {
        CFTypeID v16 = -1;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld\n", v14, 15, v15, "AVE_CFDict_GetChar", 667, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v16);
      __uint64_t v14 = sub_DDEFC();
      __uint64_t v15 = (const char *)sub_D1CB0(4);
      if (!Value)
      {
        CFTypeID v17 = -1;
        goto LABEL_26;
      }
    }
    else if (!Value)
    {
      CFTypeID v17 = -1;
      goto LABEL_26;
    }
    CFTypeID v17 = CFGetTypeID(Value);
LABEL_26:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld", v14, 15, v15, "AVE_CFDict_GetChar", 667, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v17);
    return 4294966296;
  }
  if (sub_D1C38(0xFu, 4))
  {
    int v9 = sub_D1C7C(0xFu);
    __uint64_t v10 = sub_DDEFC();
    __uint64_t v11 = (const char *)sub_D1CB0(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v10, 15, v11, "AVE_CFDict_GetChar", 653, "pDict != __null && pKey != __null && pVal != __null", theDict, key, a3);
      __uint64_t v12 = sub_DDEFC();
      CFTypeID v18 = sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

uint64_t sub_C3E5C(CFDictionaryRef theDict, void *key, void *a3)
{
  if (theDict && key && a3)
  {
    *a3 = 0;
    if (!CFDictionaryContainsKey(theDict, key)) {
      return 4294966288;
    }
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, key);
    if (Value)
    {
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(Value))
      {
        if (CFNumberGetValue(Value, kCFNumberDoubleType, a3)) {
          return 0;
        }
        else {
          return 4294966288;
        }
      }
    }
    if (!sub_D1C38(0xFu, 4)) {
      return 4294966296;
    }
    int v13 = sub_D1C7C(0xFu);
    __uint64_t v14 = sub_DDEFC();
    __uint64_t v15 = (const char *)sub_D1CB0(4);
    if (v13)
    {
      if (Value) {
        CFTypeID v16 = CFGetTypeID(Value);
      }
      else {
        CFTypeID v16 = -1;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld\n", v14, 15, v15, "AVE_CFDict_GetDouble", 743, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v16);
      __uint64_t v14 = sub_DDEFC();
      __uint64_t v15 = (const char *)sub_D1CB0(4);
      if (!Value)
      {
        CFTypeID v17 = -1;
        goto LABEL_26;
      }
    }
    else if (!Value)
    {
      CFTypeID v17 = -1;
      goto LABEL_26;
    }
    CFTypeID v17 = CFGetTypeID(Value);
LABEL_26:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld", v14, 15, v15, "AVE_CFDict_GetDouble", 743, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v17);
    return 4294966296;
  }
  if (sub_D1C38(0xFu, 4))
  {
    int v9 = sub_D1C7C(0xFu);
    __uint64_t v10 = sub_DDEFC();
    __uint64_t v11 = (const char *)sub_D1CB0(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v10, 15, v11, "AVE_CFDict_GetDouble", 729, "pDict != __null && pKey != __null && pVal != __null", theDict, key, a3);
      __uint64_t v12 = sub_DDEFC();
      CFTypeID v18 = sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

uint64_t sub_C410C(CFDictionaryRef theDict, void *key, _WORD *a3)
{
  if (theDict && key && a3)
  {
    *a3 = 0;
    if (!CFDictionaryContainsKey(theDict, key)) {
      return 4294966288;
    }
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, key);
    if (Value)
    {
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(Value))
      {
        if (CFNumberGetValue(Value, kCFNumberSInt16Type, a3)) {
          return 0;
        }
        else {
          return 4294966288;
        }
      }
    }
    if (!sub_D1C38(0xFu, 4)) {
      return 4294966296;
    }
    int v13 = sub_D1C7C(0xFu);
    __uint64_t v14 = sub_DDEFC();
    __uint64_t v15 = (const char *)sub_D1CB0(4);
    if (v13)
    {
      if (Value) {
        CFTypeID v16 = CFGetTypeID(Value);
      }
      else {
        CFTypeID v16 = -1;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld\n", v14, 15, v15, "AVE_CFDict_GetSInt16", 818, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v16);
      __uint64_t v14 = sub_DDEFC();
      __uint64_t v15 = (const char *)sub_D1CB0(4);
      if (!Value)
      {
        CFTypeID v17 = -1;
        goto LABEL_26;
      }
    }
    else if (!Value)
    {
      CFTypeID v17 = -1;
      goto LABEL_26;
    }
    CFTypeID v17 = CFGetTypeID(Value);
LABEL_26:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld", v14, 15, v15, "AVE_CFDict_GetSInt16", 818, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v17);
    return 4294966296;
  }
  if (sub_D1C38(0xFu, 4))
  {
    int v9 = sub_D1C7C(0xFu);
    __uint64_t v10 = sub_DDEFC();
    __uint64_t v11 = (const char *)sub_D1CB0(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v10, 15, v11, "AVE_CFDict_GetSInt16", 804, "pDict != __null && pKey != __null && pVal != __null", theDict, key, a3);
      __uint64_t v12 = sub_DDEFC();
      CFTypeID v18 = sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

uint64_t sub_C43BC(CFDictionaryRef theDict, void *key, _DWORD *a3)
{
  if (theDict && key && a3)
  {
    *a3 = 0;
    if (!CFDictionaryContainsKey(theDict, key)) {
      return 4294966288;
    }
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, key);
    if (Value)
    {
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(Value))
      {
        if (CFNumberGetValue(Value, kCFNumberSInt32Type, a3)) {
          return 0;
        }
        else {
          return 4294966288;
        }
      }
    }
    if (!sub_D1C38(0xFu, 4)) {
      return 4294966296;
    }
    int v13 = sub_D1C7C(0xFu);
    __uint64_t v14 = sub_DDEFC();
    __uint64_t v15 = (const char *)sub_D1CB0(4);
    if (v13)
    {
      if (Value) {
        CFTypeID v16 = CFGetTypeID(Value);
      }
      else {
        CFTypeID v16 = -1;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld\n", v14, 15, v15, "AVE_CFDict_GetSInt32", 856, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v16);
      __uint64_t v14 = sub_DDEFC();
      __uint64_t v15 = (const char *)sub_D1CB0(4);
      if (!Value)
      {
        CFTypeID v17 = -1;
        goto LABEL_26;
      }
    }
    else if (!Value)
    {
      CFTypeID v17 = -1;
      goto LABEL_26;
    }
    CFTypeID v17 = CFGetTypeID(Value);
LABEL_26:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld", v14, 15, v15, "AVE_CFDict_GetSInt32", 856, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v17);
    return 4294966296;
  }
  if (sub_D1C38(0xFu, 4))
  {
    int v9 = sub_D1C7C(0xFu);
    __uint64_t v10 = sub_DDEFC();
    __uint64_t v11 = (const char *)sub_D1CB0(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v10, 15, v11, "AVE_CFDict_GetSInt32", 842, "pDict != __null && pKey != __null && pVal != __null", theDict, key, a3);
      __uint64_t v12 = sub_DDEFC();
      CFTypeID v18 = sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

uint64_t sub_C466C(CFDictionaryRef theDict, void *key, void *a3)
{
  if (theDict && key && a3)
  {
    *a3 = 0;
    if (!CFDictionaryContainsKey(theDict, key)) {
      return 4294966288;
    }
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, key);
    if (Value)
    {
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(Value))
      {
        if (CFNumberGetValue(Value, kCFNumberSInt64Type, a3)) {
          return 0;
        }
        else {
          return 4294966288;
        }
      }
    }
    if (!sub_D1C38(0xFu, 4)) {
      return 4294966296;
    }
    int v13 = sub_D1C7C(0xFu);
    __uint64_t v14 = sub_DDEFC();
    __uint64_t v15 = (const char *)sub_D1CB0(4);
    if (v13)
    {
      if (Value) {
        CFTypeID v16 = CFGetTypeID(Value);
      }
      else {
        CFTypeID v16 = -1;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld\n", v14, 15, v15, "AVE_CFDict_GetSInt64", 894, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v16);
      __uint64_t v14 = sub_DDEFC();
      __uint64_t v15 = (const char *)sub_D1CB0(4);
      if (!Value)
      {
        CFTypeID v17 = -1;
        goto LABEL_26;
      }
    }
    else if (!Value)
    {
      CFTypeID v17 = -1;
      goto LABEL_26;
    }
    CFTypeID v17 = CFGetTypeID(Value);
LABEL_26:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld", v14, 15, v15, "AVE_CFDict_GetSInt64", 894, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v17);
    return 4294966296;
  }
  if (sub_D1C38(0xFu, 4))
  {
    int v9 = sub_D1C7C(0xFu);
    __uint64_t v10 = sub_DDEFC();
    __uint64_t v11 = (const char *)sub_D1CB0(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v10, 15, v11, "AVE_CFDict_GetSInt64", 880, "pDict != __null && pKey != __null && pVal != __null", theDict, key, a3);
      __uint64_t v12 = sub_DDEFC();
      CFTypeID v18 = sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

const char *sub_C491C(const __CFString *a1, char *a2, int a3)
{
  if (a1)
  {
    uint64_t result = CFStringGetCStringPtr(a1, 0);
    if (a3 >= 1 && a2 && !result)
    {
      CFStringGetCString(a1, a2, a3, 0);
      return a2;
    }
  }
  else
  {
    if (sub_D1C38(0xFu, 4))
    {
      int v7 = sub_D1C7C(0xFu);
      __uint64_t v8 = sub_DDEFC();
      int v9 = (const char *)sub_D1CB0(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", v8, 15, v9, "AVE_CFStr_GetStr", 916, "pStr != __null", 0, a2, a3);
        __uint64_t v10 = sub_DDEFC();
        __uint64_t v11 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v10, 15, v11);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v8, 15, v9);
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_C4A70(CFStringRef applicationID, CFStringRef key, char *a3, int a4)
{
  if (applicationID && key && a3 && a4 > 0)
  {
    CFStringRef v8 = (const __CFString *)CFPreferencesCopyAppValue(key, applicationID);
    if (v8)
    {
      CFStringRef v9 = v8;
      CFTypeID v10 = CFGetTypeID(v8);
      if (v10 == CFStringGetTypeID())
      {
        __uint64_t v11 = sub_C491C(v9, a3, a4);
        if (v11 != a3) {
          sub_DD92C(a3, a4, "%s", v12, v13, v14, v15, v16, (char)v11);
        }
        uint64_t v17 = 0;
      }
      else
      {
        uint64_t v17 = 4294966296;
      }
      CFRelease(v9);
    }
    else
    {
      return 4294966288;
    }
  }
  else
  {
    if (sub_D1C38(0xFu, 4))
    {
      int v18 = sub_D1C7C(0xFu);
      __uint64_t v19 = sub_DDEFC();
      int v20 = (const char *)sub_D1CB0(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d\n", v19, 15, v20, "AVE_CFPref_GetStr", 947, "pAppID != __null && pKey != __null && pVal != __null && num > 0", applicationID, key, a3, a4);
        __uint64_t v21 = sub_DDEFC();
        __uint64_t v23 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d", v21, 15, v23, "AVE_CFPref_GetStr");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d", v19, 15, v20, "AVE_CFPref_GetStr");
      }
    }
    return 4294966295;
  }
  return v17;
}

uint64_t sub_C4C30(CFStringRef applicationID, CFStringRef key, BOOL *a3)
{
  if (applicationID && key && a3)
  {
    CFStringRef v6 = (const __CFString *)CFPreferencesCopyAppValue(key, applicationID);
    if (v6)
    {
      CFStringRef v7 = v6;
      CFTypeID v8 = CFGetTypeID(v6);
      if (v8 == CFBooleanGetTypeID())
      {
        BOOL v9 = CFEqual(v7, kCFBooleanTrue) != 0;
      }
      else
      {
        CFTypeID v15 = CFGetTypeID(v7);
        if (v15 != CFStringGetTypeID()) {
          goto LABEL_19;
        }
        BOOL v9 = 1;
        if (CFStringCompare(v7, @"true", 1uLL) == kCFCompareEqualTo) {
          goto LABEL_7;
        }
        BOOL v9 = 1;
        if (CFStringCompare(v7, @"yes", 1uLL) == kCFCompareEqualTo) {
          goto LABEL_7;
        }
        BOOL v9 = 1;
        if (CFStringCompare(v7, @"1", 1uLL) == kCFCompareEqualTo) {
          goto LABEL_7;
        }
        if (CFStringCompare(v7, @"false", 1uLL)
          && CFStringCompare(v7, @"no", 1uLL)
          && CFStringCompare(v7, @"0", 1uLL))
        {
LABEL_19:
          uint64_t v10 = 4294966296;
          goto LABEL_20;
        }
        BOOL v9 = 0;
      }
LABEL_7:
      uint64_t v10 = 0;
      *a3 = v9;
LABEL_20:
      CFRelease(v7);
      return v10;
    }
    return 4294966288;
  }
  else
  {
    if (sub_D1C38(0xFu, 4))
    {
      int v11 = sub_D1C7C(0xFu);
      __uint64_t v12 = sub_DDEFC();
      uint64_t v13 = (const char *)sub_D1CB0(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v12, 15, v13, "AVE_CFPref_GetBool", 988, "pAppID != __null && pKey != __null && pVal != __null", applicationID, key, a3);
        __uint64_t v14 = sub_DDEFC();
        uint64_t v17 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v14, 15, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v12, 15, v13);
      }
    }
    return 4294966295;
  }
}

uint64_t sub_C4E84(CFStringRef applicationID, CFStringRef key, _DWORD *a3)
{
  if (applicationID && key && a3)
  {
    CFStringRef v6 = (const __CFString *)CFPreferencesCopyAppValue(key, applicationID);
    if (v6)
    {
      CFStringRef v7 = v6;
      CFTypeID v8 = CFGetTypeID(v6);
      if (v8 == CFNumberGetTypeID())
      {
        LODWORD(valuePtr) = 0;
        if (CFNumberGetValue((CFNumberRef)v7, kCFNumberSInt32Type, &valuePtr))
        {
          uint64_t v9 = 0;
          *a3 = valuePtr;
LABEL_16:
          CFRelease(v7);
          return v9;
        }
      }
      else
      {
        CFTypeID v14 = CFGetTypeID(v7);
        if (v14 == CFStringGetTypeID())
        {
          int v19 = 0;
          uint64_t valuePtr = 0;
          CFTypeID v15 = sub_C491C(v7, (char *)&valuePtr, 12);
          if (v15)
          {
            uint64_t v9 = 0;
            *a3 = strtoumax(v15, 0, 0);
            goto LABEL_16;
          }
        }
      }
      uint64_t v9 = 4294966296;
      goto LABEL_16;
    }
    return 4294966288;
  }
  else
  {
    if (sub_D1C38(0xFu, 4))
    {
      int v10 = sub_D1C7C(0xFu);
      __uint64_t v11 = sub_DDEFC();
      __uint64_t v12 = (const char *)sub_D1CB0(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v11, 15, v12, "AVE_CFPref_GetUInt32", 1092, "pAppID != __null && pKey != __null && pVal != __null", applicationID, key, a3);
        __uint64_t v13 = sub_DDEFC();
        uint64_t v17 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 15, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v11, 15, v12);
      }
    }
    return 4294966295;
  }
}

uint64_t sub_C5090(CFStringRef applicationID, CFStringRef key, uintmax_t *a3)
{
  if (applicationID && key && a3)
  {
    CFStringRef v6 = (const __CFString *)CFPreferencesCopyAppValue(key, applicationID);
    if (v6)
    {
      CFStringRef v7 = v6;
      CFTypeID v8 = CFGetTypeID(v6);
      if (v8 == CFNumberGetTypeID())
      {
        valuePtr[0] = 0;
        if (CFNumberGetValue((CFNumberRef)v7, kCFNumberSInt64Type, valuePtr))
        {
          uint64_t v9 = 0;
          *a3 = valuePtr[0];
LABEL_16:
          CFRelease(v7);
          return v9;
        }
      }
      else
      {
        CFTypeID v14 = CFGetTypeID(v7);
        if (v14 == CFStringGetTypeID())
        {
          valuePtr[0] = 0;
          valuePtr[1] = 0;
          int v19 = 0;
          CFTypeID v15 = sub_C491C(v7, (char *)valuePtr, 20);
          if (v15)
          {
            uint64_t v9 = 0;
            *a3 = strtoumax(v15, 0, 0);
            goto LABEL_16;
          }
        }
      }
      uint64_t v9 = 4294966296;
      goto LABEL_16;
    }
    return 4294966288;
  }
  else
  {
    if (sub_D1C38(0xFu, 4))
    {
      int v10 = sub_D1C7C(0xFu);
      __uint64_t v11 = sub_DDEFC();
      __uint64_t v12 = (const char *)sub_D1CB0(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v11, 15, v12, "AVE_CFPref_GetUInt64", 1143, "pAppID != __null && pKey != __null && pVal != __null", applicationID, key, a3);
        __uint64_t v13 = sub_DDEFC();
        uint64_t v17 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 15, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v11, 15, v12);
      }
    }
    return 4294966295;
  }
}

uint64_t sub_C529C(CFStringRef applicationID, CFStringRef key, _DWORD *a3)
{
  if (applicationID && key && a3)
  {
    CFStringRef v6 = (const __CFString *)CFPreferencesCopyAppValue(key, applicationID);
    if (v6)
    {
      CFStringRef v7 = v6;
      CFTypeID v8 = CFGetTypeID(v6);
      if (v8 == CFNumberGetTypeID())
      {
        *(_DWORD *)uint64_t valuePtr = 0;
        if (CFNumberGetValue((CFNumberRef)v7, kCFNumberSInt32Type, valuePtr))
        {
          uint64_t v9 = 0;
          *a3 = *(_DWORD *)valuePtr;
LABEL_16:
          CFRelease(v7);
          return v9;
        }
      }
      else
      {
        CFTypeID v14 = CFGetTypeID(v7);
        if (v14 == CFStringGetTypeID())
        {
          memset(valuePtr, 0, 13);
          CFTypeID v15 = sub_C491C(v7, valuePtr, 13);
          if (v15)
          {
            uint64_t v9 = 0;
            *a3 = strtoumax(v15, 0, 0);
            goto LABEL_16;
          }
        }
      }
      uint64_t v9 = 4294966296;
      goto LABEL_16;
    }
    return 4294966288;
  }
  else
  {
    if (sub_D1C38(0xFu, 4))
    {
      int v10 = sub_D1C7C(0xFu);
      __uint64_t v11 = sub_DDEFC();
      __uint64_t v12 = (const char *)sub_D1CB0(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v11, 15, v12, "AVE_CFPref_GetInt32", 1193, "pAppID != __null && pKey != __null && pVal != __null", applicationID, key, a3);
        __uint64_t v13 = sub_DDEFC();
        uint64_t v17 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 15, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v11, 15, v12);
      }
    }
    return 4294966295;
  }
}

uint64_t sub_C54A8(CFStringRef applicationID, CFStringRef key, uintmax_t *a3)
{
  if (applicationID && key && a3)
  {
    CFStringRef v6 = (const __CFString *)CFPreferencesCopyAppValue(key, applicationID);
    if (v6)
    {
      CFStringRef v7 = v6;
      CFTypeID v8 = CFGetTypeID(v6);
      if (v8 == CFNumberGetTypeID())
      {
        uintmax_t valuePtr = 0;
        if (CFNumberGetValue((CFNumberRef)v7, kCFNumberSInt64Type, &valuePtr))
        {
          uint64_t v9 = 0;
          *a3 = valuePtr;
LABEL_16:
          CFRelease(v7);
          return v9;
        }
      }
      else
      {
        CFTypeID v14 = CFGetTypeID(v7);
        if (v14 == CFStringGetTypeID())
        {
          uintmax_t valuePtr = 0;
          v19[0] = 0;
          *(void *)((char *)v19 + 5) = 0;
          CFTypeID v15 = sub_C491C(v7, (char *)&valuePtr, 21);
          if (v15)
          {
            uint64_t v9 = 0;
            *a3 = strtoumax(v15, 0, 0);
            goto LABEL_16;
          }
        }
      }
      uint64_t v9 = 4294966296;
      goto LABEL_16;
    }
    return 4294966288;
  }
  else
  {
    if (sub_D1C38(0xFu, 4))
    {
      int v10 = sub_D1C7C(0xFu);
      __uint64_t v11 = sub_DDEFC();
      __uint64_t v12 = (const char *)sub_D1CB0(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v11, 15, v12, "AVE_CFPref_GetInt64", 1244, "pAppID != __null && pKey != __null && pVal != __null", applicationID, key, a3);
        __uint64_t v13 = sub_DDEFC();
        uint64_t v17 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 15, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v11, 15, v12);
      }
    }
    return 4294966295;
  }
}

uint64_t sub_C56B4(CFStringRef applicationID, CFStringRef key, double *a3)
{
  if (applicationID && key && a3)
  {
    CFStringRef v6 = (const __CFString *)CFPreferencesCopyAppValue(key, applicationID);
    if (v6)
    {
      CFStringRef v7 = v6;
      CFTypeID v8 = CFGetTypeID(v6);
      if (v8 == CFNumberGetTypeID())
      {
        uint64_t v19 = 0;
        valuePtr[0] = 0;
        if (CFNumberGetValue((CFNumberRef)v7, kCFNumberDoubleType, valuePtr))
        {
          double v9 = *(double *)valuePtr;
LABEL_19:
          uint64_t v14 = 0;
          *a3 = v9;
LABEL_21:
          CFRelease(v7);
          return v14;
        }
        if (CFNumberGetValue((CFNumberRef)v7, kCFNumberSInt64Type, &v19))
        {
          double v9 = (double)v19;
          goto LABEL_19;
        }
      }
      else
      {
        CFTypeID v15 = CFGetTypeID(v7);
        if (v15 == CFStringGetTypeID())
        {
          valuePtr[0] = 0;
          valuePtr[1] = 0;
          int v21 = 0;
          uint64_t v16 = sub_C491C(v7, (char *)valuePtr, 20);
          if (v16)
          {
            double v9 = strtod(v16, 0);
            goto LABEL_19;
          }
        }
      }
      uint64_t v14 = 4294966296;
      goto LABEL_21;
    }
    return 4294966288;
  }
  else
  {
    if (sub_D1C38(0xFu, 4))
    {
      int v10 = sub_D1C7C(0xFu);
      __uint64_t v11 = sub_DDEFC();
      __uint64_t v12 = (const char *)sub_D1CB0(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v11, 15, v12, "AVE_CFPref_GetDouble", 1294, "pAppID != __null && pKey != __null && pVal != __null", applicationID, key, a3);
        __uint64_t v13 = sub_DDEFC();
        int v18 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 15, v18);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v11, 15, v12);
      }
    }
    return 4294966295;
  }
}

char **sub_C58D4(int a1)
{
  if (a1 >= 40) {
    return 0;
  }
  else {
    return &(&off_159BF0)[2 * a1];
  }
}

uint64_t sub_C58EC(int a1, int a2, int a3, int a4, int a5)
{
  CFTypeID v8 = sub_DB6D4(a1, 1, a2);
  if (!v8) {
    return 4294966294;
  }
  unint64_t v9 = *(unsigned int *)v8;
  if ((int)v9 < 1)
  {
    BOOL v12 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    __uint64_t v11 = v8 + 12;
    BOOL v12 = 1;
    do
    {
      if (*(v11 - 1) <= a3 && *v11 <= a4) {
        break;
      }
      v11 += 3;
      BOOL v12 = ++v10 < v9;
    }
    while (v9 != v10);
  }
  uint64_t v13 = *((unsigned int *)v8 + 13);
  if ((int)v13 < 1) {
    return 4294966294;
  }
  for (uint64_t i = v8 + 64; ; i += 3)
  {
    if (*(i - 1) >= a3 && *i >= a4)
    {
      int v15 = *(i - 2);
      if (v15 == a5 || v15 < 0) {
        break;
      }
    }
    if (!--v13) {
      return 4294966294;
    }
  }
  if (v12) {
    return 0;
  }
  else {
    return 4294966294;
  }
}

_DWORD *sub_C59D4(unsigned int *a1, int a2, int a3, int a4)
{
  uint64_t v4 = *a1;
  if ((int)v4 < 1) {
    return 0;
  }
  for (uint64_t i = a1 + 5; *(i - 1) != a2 || *i != a3 || *(i - 2) != a4; i += 6)
  {
    if (!--v4) {
      return 0;
    }
  }
  return i - 3;
}

unsigned int *sub_C5A24(unsigned int *a1, int a2)
{
  uint64_t v2 = *a1;
  if ((int)v2 < 1) {
    return 0;
  }
  uint64_t result = 0;
  CFNumberRef v5 = a1 + 1;
  CFStringRef v6 = a1 + 1;
  do
  {
    unsigned int v7 = *v6;
    v6 += 4;
    if (v7 == a2) {
      uint64_t result = v5;
    }
    CFNumberRef v5 = v6;
    --v2;
  }
  while (v2);
  return result;
}

uint64_t sub_C5A64(const char *a1, const char *a2, char *a3, int a4)
{
  if (!a2 || !a3 || a4 <= 0)
  {
    if (sub_D1C38(0x2Cu, 4))
    {
      int v22 = sub_D1C7C(0x2Cu);
      __uint64_t v23 = sub_DDEFC();
      int v24 = (const char *)sub_D1CB0(4);
      if (v22)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d\n", v23, 44, v24, "AVE_DW_GetStr", 68, "pKey != __null && pVal != __null && num > 0", a1, a2, a3, a4);
        __uint64_t v25 = sub_DDEFC();
        __uint64_t v31 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d", v25, 44, v31, "AVE_DW_GetStr");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d", v23, 44, v24, "AVE_DW_GetStr");
      }
    }
    return 4294966295;
  }
  if (a1) {
    CFTypeID v8 = a1;
  }
  else {
    CFTypeID v8 = "com.apple.coremedia";
  }
  CFStringRef v9 = CFStringCreateWithCString(0, v8, 0);
  CFStringRef v10 = CFStringCreateWithCString(0, a2, 0);
  CFStringRef v11 = v10;
  if (!v9 || !v10)
  {
    uint64_t v18 = 4294966293;
    if (!v9)
    {
      if (!v10) {
        return v18;
      }
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  uint64_t v12 = sub_C4A70(v9, v10, a3, a4);
  if (!v12)
  {
    if (sub_D1C38(0x2Cu, 6))
    {
      uint64_t v18 = sub_D1C7C(0x2Cu);
      __uint64_t v26 = sub_DDEFC();
      __uint64_t v27 = (const char *)sub_D1CB0(6);
      if (!v18)
      {
        syslog(3, "%lld %d AVE %s: defaults write %s = %s", v26, 44, v27, a2, a3);
        goto LABEL_30;
      }
      printf("%lld %d AVE %s: defaults write %s = %s\n", v26, 44, v27, a2, a3);
      __uint64_t v28 = sub_DDEFC();
      int v32 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: defaults write %s = %s", v28, 44, v32, a2, a3);
    }
    goto LABEL_29;
  }
  uint64_t v18 = v12;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  *(_OWORD *)cStr = 0u;
  long long v35 = 0u;
  sub_DD92C(cStr, 128, "AVEVideoEncoder%s", v13, v14, v15, v16, v17, (_BYTE)a2 + 3);
  CFRelease(v11);
  CFStringRef v11 = CFStringCreateWithCString(0, cStr, 0);
  if (v11)
  {
    uint64_t v18 = sub_C4A70(v9, v11, a3, a4);
    if (!v18)
    {
      if (sub_D1C38(0x2Cu, 6))
      {
        int v19 = sub_D1C7C(0x2Cu);
        __uint64_t v20 = sub_DDEFC();
        int v21 = (const char *)sub_D1CB0(6);
        if (v19)
        {
          printf("%lld %d AVE %s: defaults write %s = %s\n", v20, 44, v21, cStr, a3);
          __uint64_t v20 = sub_DDEFC();
          __uint64_t v33 = a3;
          int v30 = (const char *)sub_D1CB0(6);
        }
        else
        {
          __uint64_t v33 = a3;
          int v30 = v21;
        }
        syslog(3, "%lld %d AVE %s: defaults write %s = %s", v20, 44, v30, cStr, v33);
      }
LABEL_29:
      uint64_t v18 = 0;
    }
  }
LABEL_30:
  CFRelease(v9);
  if (v11) {
LABEL_31:
  }
    CFRelease(v11);
  return v18;
}

uint64_t sub_C5DE4(const char *a1, const char *a2, unsigned __int8 *a3)
{
  if (!a2 || !a3)
  {
    if (sub_D1C38(0x2Cu, 4))
    {
      int v21 = sub_D1C7C(0x2Cu);
      __uint64_t v22 = sub_DDEFC();
      __uint64_t v23 = (const char *)sub_D1CB0(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v22, 44, v23, "AVE_DW_GetBool", 139, "pKey != __null && pVal != __null", a1, a2, a3);
        __uint64_t v24 = sub_DDEFC();
        int v29 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v24, 44, v29);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v22, 44, v23);
      }
    }
    return 4294966295;
  }
  if (a1) {
    CFStringRef v6 = a1;
  }
  else {
    CFStringRef v6 = "com.apple.coremedia";
  }
  CFStringRef v7 = CFStringCreateWithCString(0, v6, 0);
  CFStringRef v8 = CFStringCreateWithCString(0, a2, 0);
  CFStringRef v9 = v8;
  if (!v7 || !v8)
  {
    uint64_t v16 = 4294966293;
    if (!v7)
    {
      if (!v8) {
        return v16;
      }
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v10 = sub_C4C30(v7, v8, (BOOL *)a3);
  if (!v10)
  {
    if (sub_D1C38(0x2Cu, 6))
    {
      int v25 = sub_D1C7C(0x2Cu);
      __uint64_t v26 = sub_DDEFC();
      __uint64_t v27 = (const char *)sub_D1CB0(6);
      if (v25)
      {
        printf("%lld %d AVE %s: defaults write %s = %d\n", v26, 44, v27, a2, *a3);
        __uint64_t v26 = sub_DDEFC();
        __uint64_t v27 = (const char *)sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %d", v26, 44, v27, a2, *a3);
    }
    goto LABEL_26;
  }
  uint64_t v16 = v10;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  *(_OWORD *)cStr = 0u;
  long long v31 = 0u;
  sub_DD92C(cStr, 128, "AVEVideoEncoder%s", v11, v12, v13, v14, v15, (_BYTE)a2 + 3);
  CFRelease(v9);
  CFStringRef v9 = CFStringCreateWithCString(0, cStr, 0);
  if (v9)
  {
    uint64_t v16 = sub_C4C30(v7, v9, (BOOL *)a3);
    if (!v16)
    {
      if (!sub_D1C38(0x2Cu, 6))
      {
LABEL_26:
        uint64_t v16 = 0;
        goto LABEL_27;
      }
      uint64_t v16 = sub_D1C7C(0x2Cu);
      __uint64_t v17 = sub_DDEFC();
      uint64_t v18 = (const char *)sub_D1CB0(6);
      if (v16)
      {
        printf("%lld %d AVE %s: defaults write %s = %d\n", v17, 44, v18, cStr, *a3);
        __uint64_t v19 = sub_DDEFC();
        __uint64_t v20 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: defaults write %s = %d", v19, 44, v20, cStr, *a3);
        goto LABEL_26;
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %d", v17, 44, v18, cStr, *a3);
    }
  }
LABEL_27:
  CFRelease(v7);
  if (v9) {
LABEL_28:
  }
    CFRelease(v9);
  return v16;
}

uint64_t sub_C6158(const char *a1, const char *a2, _DWORD *a3)
{
  if (!a2 || !a3)
  {
    if (sub_D1C38(0x2Cu, 4))
    {
      int v21 = sub_D1C7C(0x2Cu);
      __uint64_t v22 = sub_DDEFC();
      __uint64_t v23 = (const char *)sub_D1CB0(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v22, 44, v23, "AVE_DW_GetUInt32", 281, "pKey != __null && pVal != __null", a1, a2, a3);
        __uint64_t v24 = sub_DDEFC();
        int v29 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v24, 44, v29);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v22, 44, v23);
      }
    }
    return 4294966295;
  }
  if (a1) {
    CFStringRef v6 = a1;
  }
  else {
    CFStringRef v6 = "com.apple.coremedia";
  }
  CFStringRef v7 = CFStringCreateWithCString(0, v6, 0);
  CFStringRef v8 = CFStringCreateWithCString(0, a2, 0);
  CFStringRef v9 = v8;
  if (!v7 || !v8)
  {
    uint64_t v16 = 4294966293;
    if (!v7)
    {
      if (!v8) {
        return v16;
      }
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v10 = sub_C4E84(v7, v8, a3);
  if (!v10)
  {
    if (sub_D1C38(0x2Cu, 6))
    {
      int v25 = sub_D1C7C(0x2Cu);
      __uint64_t v26 = sub_DDEFC();
      __uint64_t v27 = (const char *)sub_D1CB0(6);
      if (v25)
      {
        printf("%lld %d AVE %s: defaults write %s = 0x%x\n", v26, 44, v27, a2, *a3);
        __uint64_t v26 = sub_DDEFC();
        __uint64_t v27 = (const char *)sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = 0x%x", v26, 44, v27, a2, *a3);
    }
    goto LABEL_26;
  }
  uint64_t v16 = v10;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  *(_OWORD *)cStr = 0u;
  long long v31 = 0u;
  sub_DD92C(cStr, 128, "AVEVideoEncoder%s", v11, v12, v13, v14, v15, (_BYTE)a2 + 3);
  CFRelease(v9);
  CFStringRef v9 = CFStringCreateWithCString(0, cStr, 0);
  if (v9)
  {
    uint64_t v16 = sub_C4E84(v7, v9, a3);
    if (!v16)
    {
      if (!sub_D1C38(0x2Cu, 6))
      {
LABEL_26:
        uint64_t v16 = 0;
        goto LABEL_27;
      }
      uint64_t v16 = sub_D1C7C(0x2Cu);
      __uint64_t v17 = sub_DDEFC();
      uint64_t v18 = (const char *)sub_D1CB0(6);
      if (v16)
      {
        printf("%lld %d AVE %s: defaults write %s = 0x%x\n", v17, 44, v18, cStr, *a3);
        __uint64_t v19 = sub_DDEFC();
        __uint64_t v20 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: defaults write %s = 0x%x", v19, 44, v20, cStr, *a3);
        goto LABEL_26;
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = 0x%x", v17, 44, v18, cStr, *a3);
    }
  }
LABEL_27:
  CFRelease(v7);
  if (v9) {
LABEL_28:
  }
    CFRelease(v9);
  return v16;
}

uint64_t sub_C64CC(const char *a1, const char *a2, uintmax_t *a3)
{
  if (!a2 || !a3)
  {
    if (sub_D1C38(0x2Cu, 4))
    {
      int v21 = sub_D1C7C(0x2Cu);
      __uint64_t v22 = sub_DDEFC();
      __uint64_t v23 = (const char *)sub_D1CB0(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v22, 44, v23, "AVE_DW_GetUInt64", 353, "pKey != __null && pVal != __null", a1, a2, a3);
        __uint64_t v24 = sub_DDEFC();
        int v29 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v24, 44, v29);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v22, 44, v23);
      }
    }
    return 4294966295;
  }
  if (a1) {
    CFStringRef v6 = a1;
  }
  else {
    CFStringRef v6 = "com.apple.coremedia";
  }
  CFStringRef v7 = CFStringCreateWithCString(0, v6, 0);
  CFStringRef v8 = CFStringCreateWithCString(0, a2, 0);
  CFStringRef v9 = v8;
  if (!v7 || !v8)
  {
    uint64_t v16 = 4294966293;
    if (!v7)
    {
      if (!v8) {
        return v16;
      }
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v10 = sub_C5090(v7, v8, a3);
  if (!v10)
  {
    if (sub_D1C38(0x2Cu, 6))
    {
      int v25 = sub_D1C7C(0x2Cu);
      __uint64_t v26 = sub_DDEFC();
      __uint64_t v27 = (const char *)sub_D1CB0(6);
      if (v25)
      {
        printf("%lld %d AVE %s: defaults write %s = 0x%llx\n", v26, 44, v27, a2, *a3);
        __uint64_t v26 = sub_DDEFC();
        __uint64_t v27 = (const char *)sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = 0x%llx", v26, 44, v27, a2, *a3);
    }
    goto LABEL_26;
  }
  uint64_t v16 = v10;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  *(_OWORD *)cStr = 0u;
  long long v31 = 0u;
  sub_DD92C(cStr, 128, "AVEVideoEncoder%s", v11, v12, v13, v14, v15, (_BYTE)a2 + 3);
  CFRelease(v9);
  CFStringRef v9 = CFStringCreateWithCString(0, cStr, 0);
  if (v9)
  {
    uint64_t v16 = sub_C5090(v7, v9, a3);
    if (!v16)
    {
      if (!sub_D1C38(0x2Cu, 6))
      {
LABEL_26:
        uint64_t v16 = 0;
        goto LABEL_27;
      }
      uint64_t v16 = sub_D1C7C(0x2Cu);
      __uint64_t v17 = sub_DDEFC();
      uint64_t v18 = (const char *)sub_D1CB0(6);
      if (v16)
      {
        printf("%lld %d AVE %s: defaults write %s = 0x%llx\n", v17, 44, v18, cStr, *a3);
        __uint64_t v19 = sub_DDEFC();
        __uint64_t v20 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: defaults write %s = 0x%llx", v19, 44, v20, cStr, *a3);
        goto LABEL_26;
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = 0x%llx", v17, 44, v18, cStr, *a3);
    }
  }
LABEL_27:
  CFRelease(v7);
  if (v9) {
LABEL_28:
  }
    CFRelease(v9);
  return v16;
}

uint64_t sub_C6840(const char *a1, const char *a2, _DWORD *a3)
{
  if (!a2 || !a3)
  {
    if (sub_D1C38(0x2Cu, 4))
    {
      int v21 = sub_D1C7C(0x2Cu);
      __uint64_t v22 = sub_DDEFC();
      __uint64_t v23 = (const char *)sub_D1CB0(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v22, 44, v23, "AVE_DW_GetInt32", 424, "pKey != __null && pVal != __null", a1, a2, a3);
        __uint64_t v24 = sub_DDEFC();
        int v29 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v24, 44, v29);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v22, 44, v23);
      }
    }
    return 4294966295;
  }
  if (a1) {
    CFStringRef v6 = a1;
  }
  else {
    CFStringRef v6 = "com.apple.coremedia";
  }
  CFStringRef v7 = CFStringCreateWithCString(0, v6, 0);
  CFStringRef v8 = CFStringCreateWithCString(0, a2, 0);
  CFStringRef v9 = v8;
  if (!v7 || !v8)
  {
    uint64_t v16 = 4294966293;
    if (!v7)
    {
      if (!v8) {
        return v16;
      }
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v10 = sub_C529C(v7, v8, a3);
  if (!v10)
  {
    if (sub_D1C38(0x2Cu, 6))
    {
      int v25 = sub_D1C7C(0x2Cu);
      __uint64_t v26 = sub_DDEFC();
      __uint64_t v27 = (const char *)sub_D1CB0(6);
      if (v25)
      {
        printf("%lld %d AVE %s: defaults write %s = %d\n", v26, 44, v27, a2, *a3);
        __uint64_t v26 = sub_DDEFC();
        __uint64_t v27 = (const char *)sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %d", v26, 44, v27, a2, *a3);
    }
    goto LABEL_26;
  }
  uint64_t v16 = v10;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  *(_OWORD *)cStr = 0u;
  long long v31 = 0u;
  sub_DD92C(cStr, 128, "AVEVideoEncoder%s", v11, v12, v13, v14, v15, (_BYTE)a2 + 3);
  CFRelease(v9);
  CFStringRef v9 = CFStringCreateWithCString(0, cStr, 0);
  if (v9)
  {
    uint64_t v16 = sub_C529C(v7, v9, a3);
    if (!v16)
    {
      if (!sub_D1C38(0x2Cu, 6))
      {
LABEL_26:
        uint64_t v16 = 0;
        goto LABEL_27;
      }
      uint64_t v16 = sub_D1C7C(0x2Cu);
      __uint64_t v17 = sub_DDEFC();
      uint64_t v18 = (const char *)sub_D1CB0(6);
      if (v16)
      {
        printf("%lld %d AVE %s: defaults write %s = %d\n", v17, 44, v18, cStr, *a3);
        __uint64_t v19 = sub_DDEFC();
        __uint64_t v20 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: defaults write %s = %d", v19, 44, v20, cStr, *a3);
        goto LABEL_26;
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %d", v17, 44, v18, cStr, *a3);
    }
  }
LABEL_27:
  CFRelease(v7);
  if (v9) {
LABEL_28:
  }
    CFRelease(v9);
  return v16;
}

uint64_t sub_C6BB4(const char *a1, const char *a2, uintmax_t *a3)
{
  if (!a2 || !a3)
  {
    if (sub_D1C38(0x2Cu, 4))
    {
      int v21 = sub_D1C7C(0x2Cu);
      __uint64_t v22 = sub_DDEFC();
      __uint64_t v23 = (const char *)sub_D1CB0(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v22, 44, v23, "AVE_DW_GetInt64", 496, "pKey != __null && pVal != __null", a1, a2, a3);
        __uint64_t v24 = sub_DDEFC();
        int v29 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v24, 44, v29);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v22, 44, v23);
      }
    }
    return 4294966295;
  }
  if (a1) {
    CFStringRef v6 = a1;
  }
  else {
    CFStringRef v6 = "com.apple.coremedia";
  }
  CFStringRef v7 = CFStringCreateWithCString(0, v6, 0);
  CFStringRef v8 = CFStringCreateWithCString(0, a2, 0);
  CFStringRef v9 = v8;
  if (!v7 || !v8)
  {
    uint64_t v16 = 4294966293;
    if (!v7)
    {
      if (!v8) {
        return v16;
      }
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v10 = sub_C54A8(v7, v8, a3);
  if (!v10)
  {
    if (sub_D1C38(0x2Cu, 6))
    {
      int v25 = sub_D1C7C(0x2Cu);
      __uint64_t v26 = sub_DDEFC();
      __uint64_t v27 = (const char *)sub_D1CB0(6);
      if (v25)
      {
        printf("%lld %d AVE %s: defaults write %s = %lld\n", v26, 44, v27, a2, *a3);
        __uint64_t v26 = sub_DDEFC();
        __uint64_t v27 = (const char *)sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %lld", v26, 44, v27, a2, *a3);
    }
    goto LABEL_26;
  }
  uint64_t v16 = v10;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  *(_OWORD *)cStr = 0u;
  long long v31 = 0u;
  sub_DD92C(cStr, 128, "AVEVideoEncoder%s", v11, v12, v13, v14, v15, (_BYTE)a2 + 3);
  CFRelease(v9);
  CFStringRef v9 = CFStringCreateWithCString(0, cStr, 0);
  if (v9)
  {
    uint64_t v16 = sub_C54A8(v7, v9, a3);
    if (!v16)
    {
      if (!sub_D1C38(0x2Cu, 6))
      {
LABEL_26:
        uint64_t v16 = 0;
        goto LABEL_27;
      }
      uint64_t v16 = sub_D1C7C(0x2Cu);
      __uint64_t v17 = sub_DDEFC();
      uint64_t v18 = (const char *)sub_D1CB0(6);
      if (v16)
      {
        printf("%lld %d AVE %s: defaults write %s = %lld\n", v17, 44, v18, cStr, *a3);
        __uint64_t v19 = sub_DDEFC();
        __uint64_t v20 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: defaults write %s = %lld", v19, 44, v20, cStr, *a3);
        goto LABEL_26;
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %lld", v17, 44, v18, cStr, *a3);
    }
  }
LABEL_27:
  CFRelease(v7);
  if (v9) {
LABEL_28:
  }
    CFRelease(v9);
  return v16;
}

uint64_t sub_C6F28(const char *a1, const char *a2, double *a3)
{
  if (!a2 || !a3)
  {
    if (sub_D1C38(0x2Cu, 4))
    {
      int v21 = sub_D1C7C(0x2Cu);
      __uint64_t v22 = sub_DDEFC();
      __uint64_t v23 = (const char *)sub_D1CB0(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v22, 44, v23, "AVE_DW_GetDouble", 567, "pKey != __null && pVal != __null", a1, a2, a3);
        __uint64_t v24 = sub_DDEFC();
        int v29 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v24, 44, v29);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v22, 44, v23);
      }
    }
    return 4294966295;
  }
  if (a1) {
    CFStringRef v6 = a1;
  }
  else {
    CFStringRef v6 = "com.apple.coremedia";
  }
  CFStringRef v7 = CFStringCreateWithCString(0, v6, 0);
  CFStringRef v8 = CFStringCreateWithCString(0, a2, 0);
  CFStringRef v9 = v8;
  if (!v7 || !v8)
  {
    uint64_t v16 = 4294966293;
    if (!v7)
    {
      if (!v8) {
        return v16;
      }
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v10 = sub_C56B4(v7, v8, a3);
  if (!v10)
  {
    if (sub_D1C38(0x2Cu, 6))
    {
      int v25 = sub_D1C7C(0x2Cu);
      __uint64_t v26 = sub_DDEFC();
      __uint64_t v27 = (const char *)sub_D1CB0(6);
      if (v25)
      {
        printf("%lld %d AVE %s: defaults write %s = %lf\n", v26, 44, v27, a2, *a3);
        __uint64_t v26 = sub_DDEFC();
        __uint64_t v27 = (const char *)sub_D1CB0(6);
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %lf", v26, 44, v27, a2, *a3);
    }
    goto LABEL_26;
  }
  uint64_t v16 = v10;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  *(_OWORD *)cStr = 0u;
  long long v31 = 0u;
  sub_DD92C(cStr, 128, "AVEVideoEncoder%s", v11, v12, v13, v14, v15, (_BYTE)a2 + 3);
  CFRelease(v9);
  CFStringRef v9 = CFStringCreateWithCString(0, cStr, 0);
  if (v9)
  {
    uint64_t v16 = sub_C56B4(v7, v9, a3);
    if (!v16)
    {
      if (!sub_D1C38(0x2Cu, 6))
      {
LABEL_26:
        uint64_t v16 = 0;
        goto LABEL_27;
      }
      uint64_t v16 = sub_D1C7C(0x2Cu);
      __uint64_t v17 = sub_DDEFC();
      uint64_t v18 = (const char *)sub_D1CB0(6);
      if (v16)
      {
        printf("%lld %d AVE %s: defaults write %s = %lf\n", v17, 44, v18, cStr, *a3);
        __uint64_t v19 = sub_DDEFC();
        __uint64_t v20 = (const char *)sub_D1CB0(6);
        syslog(3, "%lld %d AVE %s: defaults write %s = %lf", v19, 44, v20, cStr, *a3);
        goto LABEL_26;
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %lf", v17, 44, v18, cStr, *a3);
    }
  }
LABEL_27:
  CFRelease(v7);
  if (v9) {
LABEL_28:
  }
    CFRelease(v9);
  return v16;
}

char *sub_C72A4(int a1)
{
  uint64_t result = sub_DB5D4(a1);
  if (result) {
    return (char *)*((unsigned int *)result + 1);
  }
  return result;
}

uint64_t sub_C72C4(char *a1, int *a2)
{
  if (!a1) {
    return 4294966288;
  }
  CFNumberRef v3 = a1;
  uint64_t v4 = 0;
  CFNumberRef v5 = a2 + 2;
  int v6 = -1;
  CFStringRef v7 = a2 + 2;
LABEL_3:
  uint64_t v8 = 0;
  uint64_t result = *v3;
  if (*v3 <= 0x63u)
  {
    switch(*v3)
    {
      case 'D':
        goto LABEL_33;
      case 'E':
      case 'F':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'O':
      case 'Q':
      case 'R':
        goto LABEL_14;
      case 'G':
        goto LABEL_6;
      case 'M':
        goto LABEL_7;
      case 'N':
        goto LABEL_8;
      case 'P':
        goto LABEL_9;
      case 'S':
        goto LABEL_10;
      case 'T':
        goto LABEL_11;
      default:
        if (result == 32) {
          goto LABEL_32;
        }
        if (*v3) {
          goto LABEL_14;
        }
        goto LABEL_40;
    }
  }
  switch(*v3)
  {
    case 'd':
      goto LABEL_33;
    case 'g':
LABEL_6:
      uint64_t v8 = 4;
      goto LABEL_33;
    case 'm':
LABEL_7:
      uint64_t v8 = 2;
      goto LABEL_33;
    case 'n':
LABEL_8:
      uint64_t v8 = 3;
      goto LABEL_33;
    case 'p':
LABEL_9:
      uint64_t v8 = 5;
      goto LABEL_33;
    case 's':
LABEL_10:
      uint64_t v8 = 6;
      goto LABEL_33;
    case 't':
LABEL_11:
      uint64_t v8 = 1;
      goto LABEL_33;
    default:
LABEL_14:
      if ((result - 48) > 9)
      {
        uint64_t result = 4294966296;
        if ((v6 & 0x80000000) == 0) {
          goto LABEL_41;
        }
        return 4294966288;
      }
      break;
  }
  switch((int)v4)
  {
    case 0:
      unsigned int v10 = atoi(v3);
      if (v10 <= 5)
      {
        CFStringRef v7 = &v5[28 * v10];
        int v6 = v10;
        goto LABEL_30;
      }
      uint64_t result = 4294966290;
      if (v6 < 0) {
        return 4294966288;
      }
      goto LABEL_41;
    case 1:
      v6 &= ~(v6 >> 31);
      *CFStringRef v7 = atoi(v3) != 0;
      goto LABEL_30;
    case 2:
      v6 &= ~(v6 >> 31);
      v7[1] = atoi(v3) != 0;
      goto LABEL_30;
    case 3:
      int v15 = atoi(v3);
      if ((v15 - 9) < 0xFFFFFFF8) {
        goto LABEL_39;
      }
      v6 &= ~(v6 >> 31);
      v7[2] = v15;
      goto LABEL_30;
    case 4:
      unsigned int v16 = atoi(v3);
      if (v16 > 7)
      {
LABEL_39:
        uint64_t result = 4294966278;
LABEL_40:
        if (v6 < 0) {
          return 4294966288;
        }
        goto LABEL_41;
      }
      int v17 = v7[3];
      v6 &= ~(v6 >> 31);
      uint64_t v18 = (uint64_t)&v7[3 * v17 + 3];
      *(_DWORD *)(v18 + 4) = v16;
      *(_DWORD *)(v18 + 8) = 1;
      v7[3] = v17 + 1;
      goto LABEL_30;
    default:
      int v11 = atoi(v3);
      uint64_t v12 = v7[3];
      if ((int)v12 < 1) {
        goto LABEL_35;
      }
      unint64_t v13 = 0;
      uint64_t v14 = 12 * v12;
      break;
  }
  do
  {
    if (v7[v13 / 4 + 4] == v11)
    {
      v7[v13 / 4 + 5] = v4 != 5;
LABEL_30:
      uint64_t result = (uint64_t)strchr(v3, 32);
      if (!result) {
        goto LABEL_40;
      }
      CFNumberRef v3 = (char *)result;
LABEL_32:
      uint64_t v8 = v4;
LABEL_33:
      ++v3;
      uint64_t v4 = v8;
      goto LABEL_3;
    }
    v13 += 12;
  }
  while (v14 != v13);
LABEL_35:
  uint64_t result = 4294966274;
  if (v6 < 0) {
    return 4294966288;
  }
LABEL_41:
  int v19 = *a2;
  if (*a2 <= v6 + 1) {
    int v19 = v6 + 1;
  }
  *a2 = v19;
  return result;
}

void *sub_C7604()
{
  return &unk_160148;
}

uint64_t sub_C7610(uint64_t a1)
{
  bzero((void *)a1, 0x588uLL);
  for (uint64_t i = 112; i != 784; i += 112)
    *(void *)(a1 + i) = -1;
  *(unsigned char *)(a1 + 792) = 0;
  *(void *)(a1 + 1104) = -1;
  *(void *)&long long v3 = 0xC0000000CLL;
  *((void *)&v3 + 1) = 0xC0000000CLL;
  *(_OWORD *)(a1 + 1128) = v3;
  *(void *)(a1 + 1144) = 0xC0000000CLL;
  *(_DWORD *)(a1 + 1152) = -13;
  *(_DWORD *)(a1 + 1184) = -1;
  *(void *)(a1 + 1192) = 0xBFF0000000000000;
  *(void *)(a1 + 1200) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1208) = -1;
  *(void *)(a1 + 1248) = -1;
  *(_DWORD *)(a1 + 1256) = -1;
  *(void *)(a1 + 1264) = -1;
  *(_DWORD *)(a1 + 1272) = -1;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 1280) = _Q0;
  *(void *)(a1 + 1304) = -1;
  *(void *)(a1 + 1312) = -1;
  *(_DWORD *)(a1 + 1320) = -1;
  *(void *)(a1 + 1348) = -1;
  *(void *)(a1 + 1356) = -1;
  *(void *)(a1 + 1364) = -1;
  *(void *)(a1 + 1372) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 1384) = -1;
  *(_DWORD *)(a1 + 1392) = -1;
  return 0;
}

uint64_t sub_C76D8(_DWORD *a1)
{
  unsigned __int8 v9 = 0;
  int v8 = 0;
  if (!sub_C5DE4(0, "AVE_EnableLossless", &v9))
  {
    uint64_t v2 = 6;
    if (!v9) {
      uint64_t v2 = 8;
    }
    *(void *)&a1[v2] |= 0x200uLL;
  }
  if (!sub_C6840(0, "AVE_EnableLambdaMod", &v8))
  {
    uint64_t v3 = 290;
    if (!v8) {
      uint64_t v3 = 292;
    }
    *(void *)&a1[v3] |= 0x1000000uLL;
  }
  if (!sub_C6840(0, "AVE_EnableQPMod", &v8))
  {
    if (v8) {
      a1[308] |= 1u;
    }
    else {
      a1[309] |= 1u;
    }
  }
  if (!sub_C6840(0, "AVE_CodedBuffersOverride", &v8)) {
    a1[349] = v8;
  }
  if (!sub_C6840(0, "AVE_FrameQP", &v8))
  {
    int v4 = v8;
    a1[282] = v8;
    a1[283] = v4;
    a1[284] = v4;
  }
  if (!sub_C6840(0, "AVE_LookAheadFrames", &v8)) {
    a1[302] = v8;
  }
  if (!sub_C6840(0, "AVE_MaximizePowerEfficiency", &v8))
  {
    if (v8) {
      a1[14] |= 8u;
    }
    else {
      a1[15] |= 8u;
    }
  }
  if (!sub_C6840(0, "AVE_UseCAVLCBits", &v8))
  {
    if (v8) {
      a1[14] |= 1u;
    }
    else {
      a1[15] |= 1u;
    }
  }
  if (!sub_C6840(0, "AVE_EnableMCTF", &v8))
  {
    uint64_t v5 = 6;
    if (!v8) {
      uint64_t v5 = 8;
    }
    *(void *)&a1[v5] |= 0x20uLL;
  }
  if (!sub_C6840(0, "AVE_FigEncodeTime", &v8))
  {
    uint64_t v6 = 6;
    if (!v8) {
      uint64_t v6 = 8;
    }
    *(void *)&a1[v6] |= 0x400000uLL;
  }
  if (!sub_C6840(0, "AVE_AverageBitRate", &v8)) {
    a1[295] = v8;
  }
  if (!sub_C6840(0, "AVE_Bframes", &v8)) {
    a1[312] = v8;
  }
  if (!sub_C6840(0, "AVE_EnableInputYUVDump", &v8) && v8) {
    a1[196] |= 1u;
  }
  if (!sub_C6840(0, "AVE_EnableOutputDump", &v8) && v8) {
    a1[196] |= 2u;
  }
  if (!sub_C6840(0, "AVE_EnableISPMetadataDump", &v8) && v8) {
    a1[196] |= 4u;
  }
  if (!sub_C6840(0, "AVE_EnableMVStatsDump", &v8) && v8) {
    a1[196] |= 8u;
  }
  if (!sub_C6840(0, "AVE_EnableMultiPassStatsDump", &v8) && v8) {
    a1[196] |= 0x10u;
  }
  if (!sub_C6840(0, "AVE_EnableFrameStatsDump", &v8) && v8) {
    a1[196] |= 0x20u;
  }
  if (!sub_C6840(0, "AVE_EnableFWFrameStatsDump", &v8) && v8) {
    a1[196] |= 0x40u;
  }
  uint64_t result = sub_C6840(0, "AVE_EnableMCTFFrameStatsDump", &v8);
  if (!result)
  {
    if (v8) {
      a1[196] |= 0x80u;
    }
  }
  return result;
}

uint64_t sub_C7AA4(void *a1)
{
  uintmax_t v3 = 0;
  if (!sub_C64CC(0, "AVE_CfgOn", &v3)) {
    a1[1] = v3;
  }
  if (!sub_C64CC(0, "AVE_CfgOff", &v3)) {
    a1[2] = v3;
  }
  if (!sub_C64CC(0, "AVE_FeatureOn", &v3)) {
    a1[3] = v3;
  }
  if (!sub_C64CC(0, "AVE_FeatureOff", &v3)) {
    a1[4] = v3;
  }
  if (!sub_C64CC(0, "AVE_HwFeatureOn", &v3)) {
    a1[5] = v3;
  }
  uint64_t result = sub_C64CC(0, "AVE_HwFeatureOff", &v3);
  if (!result) {
    a1[6] = v3;
  }
  return result;
}

uint64_t sub_C7B90(int *a1)
{
  int v9 = 0;
  if (!sub_C6840(0, "AVE_DPM_Mode", &v9)) {
    *a1 = v9 | 0x100;
  }
  if (!sub_C6840(0, "AVE_DPM_PL_IOPMin", &v9))
  {
    unsigned int v2 = v9;
    if (v9 <= 1) {
      unsigned int v2 = 1;
    }
    if (v2 >= 4) {
      unsigned int v2 = 4;
    }
    a1[1] |= 1u;
    a1[2] = v2;
  }
  if (!sub_C6840(0, "AVE_DPM_PL_IOPMax", &v9))
  {
    unsigned int v3 = v9;
    if (v9 <= 1) {
      unsigned int v3 = 1;
    }
    if (v3 >= 4) {
      unsigned int v3 = 4;
    }
    a1[3] = v3;
    a1[1] |= 0x10000u;
  }
  if (!sub_C6840(0, "AVE_DPM_PL_DCSMin", &v9))
  {
    unsigned int v4 = v9;
    if (v9 <= 1) {
      unsigned int v4 = 1;
    }
    if (v4 >= 4) {
      unsigned int v4 = 4;
    }
    a1[4] = v4;
    a1[1] |= 2u;
  }
  if (!sub_C6840(0, "AVE_DPM_PL_DCSMax", &v9))
  {
    unsigned int v5 = v9;
    if (v9 <= 1) {
      unsigned int v5 = 1;
    }
    if (v5 >= 4) {
      unsigned int v5 = 4;
    }
    a1[5] = v5;
    a1[1] |= 0x20000u;
  }
  if (!sub_C6840(0, "AVE_DPM_PL_FABMin", &v9))
  {
    unsigned int v6 = v9;
    if (v9 <= 1) {
      unsigned int v6 = 1;
    }
    if (v6 >= 4) {
      unsigned int v6 = 4;
    }
    a1[6] = v6;
    a1[1] |= 4u;
  }
  uint64_t result = sub_C6840(0, "AVE_DPM_PL_FABMax", &v9);
  if (!result)
  {
    unsigned int v8 = v9;
    if (v9 <= 1) {
      unsigned int v8 = 1;
    }
    if (v8 >= 4) {
      unsigned int v8 = 4;
    }
    a1[7] = v8;
    a1[1] |= 0x40000u;
  }
  return result;
}

uint64_t sub_C7D5C(int *a1)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  *(_OWORD *)unsigned int v6 = 0u;
  long long v7 = 0u;
  int v5 = 0;
  if (!sub_C6840(0, "AVE_PreemptiveLoadBalancing", &v5))
  {
    if (v5) {
      int v2 = 2;
    }
    else {
      int v2 = 1;
    }
    a1[1] = v2;
  }
  if (!sub_C6840(0, "AVE_DLB_Type", &v5))
  {
    a1[2] = v5;
    *a1 = 1;
  }
  if (!sub_C6840(0, "AVE_DLB_SVESchedMode", &v5))
  {
    a1[3] = v5;
    *a1 = 1;
  }
  if (!sub_C6840(0, "AVE_DLB_SVENum", &v5))
  {
    a1[4] = v5;
    *a1 = 1;
  }
  if (!sub_C5A64(0, "AVE_DLB_SVEMap", v6, 128)) {
    sub_C72C4(v6, a1);
  }
  uint64_t v3 = sub_C5A64(0, "AVE_DLB_Cfg", v6, 128);
  if (!v3) {
    sub_C72C4(v6, a1);
  }
  return v3;
}

uint64_t sub_C7EC4(_DWORD *a1)
{
  uint64_t v3 = 0;
  if (!sub_C6158(0, "AVE_PerfFeatureOn", (_DWORD *)&v3 + 1)) {
    a1[14] = HIDWORD(v3);
  }
  if (!sub_C6158(0, "AVE_PerfFeatureOff", (_DWORD *)&v3 + 1)) {
    a1[15] = HIDWORD(v3);
  }
  if (!sub_C6840(0, "AVE_InputQueueMaxCount", &v3)) {
    a1[16] = v3;
  }
  if (!sub_C6840(0, "AVE_MaximumRealTimeFrameRate", &v3)) {
    a1[17] = v3;
  }
  sub_C7B90(a1 + 18);
  return sub_C7D5C(a1 + 26);
}

uint64_t sub_C7F80(uint64_t a1)
{
  int v4 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  *(_OWORD *)__src = 0u;
  long long v6 = 0u;
  if (!sub_C6158(0, "AVE_DumpFeature", &v4)) {
    *(_DWORD *)(a1 + 784) = v4;
  }
  if (!sub_C6158(0, "AVE_DumpMode", &v4)) {
    *(_DWORD *)(a1 + 788) = v4;
  }
  uint64_t v2 = sub_C5A64(0, "AVE_OutputPath", __src, 128);
  if (!v2) {
    strncpy((char *)(a1 + 792), __src, 0x7FuLL);
  }
  return v2;
}

uint64_t sub_C8060(uint64_t a1)
{
  uintmax_t v5 = 0;
  int v4 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  *(_OWORD *)__src = 0u;
  long long v7 = 0u;
  if (!sub_C64CC(0, "AVE_Verbose", &v5))
  {
    *(void *)(a1 + 8) = v5;
    *(_DWORD *)a1 |= 0x100u;
  }
  if (!sub_C64CC(0, "AVE_KernelVerbose", &v5))
  {
    *(void *)(a1 + 16) = v5;
    *(_DWORD *)a1 |= 0x200u;
  }
  if (!sub_C64CC(0, "AVE_FirmwareVerbose", &v5))
  {
    *(void *)(a1 + 24) = v5;
    *(_DWORD *)a1 |= 0x300u;
  }
  if (!sub_C64CC(0, "AVE_AlgVerbose", &v5))
  {
    *(void *)(a1 + 32) = v5;
    *(_DWORD *)a1 |= 0x400u;
  }
  if (!sub_C6840(0, "AVE_LogConsole", &v4)) {
    *(_DWORD *)(a1 + 40) = v4;
  }
  uint64_t v2 = sub_C5A64(0, "AVE_LogPath", __src, 128);
  if (!v2) {
    strncpy((char *)(a1 + 44), __src, 0x7FuLL);
  }
  return v2;
}

uint64_t sub_C81D4(_DWORD *a1)
{
  int v3 = 0;
  if (!sub_C6840(0, "AVE_InitialQPI", &v3)) {
    a1[282] = v3;
  }
  if (!sub_C6840(0, "AVE_InitialQPP", &v3)) {
    a1[283] = v3;
  }
  if (!sub_C6840(0, "AVE_InitialQPB", &v3)) {
    a1[284] = v3;
  }
  if (!sub_C6840(0, "AVE_SoftMinQP", &v3)) {
    a1[285] = v3;
  }
  if (!sub_C6840(0, "AVE_SoftMaxQP", &v3)) {
    a1[286] = v3;
  }
  if (!sub_C6840(0, "AVE_HardMinQP", &v3)) {
    a1[287] = v3;
  }
  uint64_t result = sub_C6840(0, "AVE_HardMaxQP", &v3);
  if (!result) {
    a1[288] = v3;
  }
  return result;
}

uint64_t sub_C82E0(uint64_t a1)
{
  int v6 = 0;
  uintmax_t v4 = 0;
  uintmax_t v5 = 0;
  uint64_t v3 = 0;
  if (!sub_C64CC(0, "AVE_RCFeatureOn", &v4)) {
    *(void *)(a1 + 1160) = v4;
  }
  if (!sub_C64CC(0, "AVE_RCFeatureOff", &v4)) {
    *(void *)(a1 + 1168) = v4;
  }
  if (!sub_C6840(0, "AVE_RCMode", &v6)) {
    *(_DWORD *)(a1 + 1176) = v6;
  }
  if (!sub_C6840(0, "AVE_Bitrate", &v6)) {
    *(_DWORD *)(a1 + 1180) = v6;
  }
  if (!sub_C6840(0, "AVE_Quality", &v6)) {
    *(_DWORD *)(a1 + 1184) = v6;
  }
  if (!sub_C6F28(0, "AVE_VBVBufferSize", (double *)&v3)) {
    *(void *)(a1 + 1192) = v3;
  }
  if (!sub_C6F28(0, "AVE_VBVInitialDelay", (double *)&v3)) {
    *(void *)(a1 + 1200) = v3;
  }
  if (!sub_C6840(0, "AVE_LookAheadFrameCount", &v6)) {
    *(_DWORD *)(a1 + 1208) = v6;
  }
  if (!sub_C6840(0, "AVE_Parallel_Limit", &v6)) {
    *(_DWORD *)(a1 + 1212) = v6;
  }
  if (!sub_C6BB4(0, "AVE_Parallel_MinFrameCnt", &v5)) {
    *(void *)(a1 + 1216) = v5;
  }
  uint64_t result = sub_C6BB4(0, "AVE_Parallel_MinDuration", &v5);
  if (!result) {
    *(void *)(a1 + 1224) = v5;
  }
  return result;
}

uint64_t sub_C8474(uint64_t a1)
{
  int v3 = 0;
  if (!sub_C6158(0, "AVE_QPModFeatureOn", &v3)) {
    *(_DWORD *)(a1 + 1232) = v3;
  }
  uint64_t result = sub_C6158(0, "AVE_QPModFeatureOff", &v3);
  if (!result) {
    *(_DWORD *)(a1 + 1236) = v3;
  }
  return result;
}

double sub_C84E0(uint64_t a1)
{
  double v3 = 0.0;
  uint64_t v4 = 0;
  if (!sub_C6158(0, "AVE_GOPFeatureOn", (_DWORD *)&v4 + 1)) {
    *(_DWORD *)(a1 + 1240) = HIDWORD(v4);
  }
  if (!sub_C6158(0, "AVE_GOPFeatureOff", (_DWORD *)&v4 + 1)) {
    *(_DWORD *)(a1 + 1244) = HIDWORD(v4);
  }
  if (!sub_C6840(0, "AVE_BFrameNum", &v4)) {
    *(_DWORD *)(a1 + 1248) = v4;
  }
  if (!sub_C6840(0, "AVE_TemporalLayerNum", &v4)) {
    *(_DWORD *)(a1 + 1252) = v4;
  }
  if (!sub_C6840(0, "AVE_FrameRateTargetForAverageBitrate", &v4)) {
    *(_DWORD *)(a1 + 1256) = v4;
  }
  if (!sub_C6840(0, "AVE_ExpectedFrameRate", &v4)) {
    *(_DWORD *)(a1 + 1260) = v4;
  }
  if (!sub_C6840(0, "AVE_BaseFrameRate", &v4)) {
    *(_DWORD *)(a1 + 1264) = v4;
  }
  if (!sub_C6840(0, "AVE_MaxKeyFrameInterval", &v4)) {
    *(_DWORD *)(a1 + 1268) = v4;
  }
  if (!sub_C6840(0, "AVE_StrictKeyFrameInterval", &v4)) {
    *(_DWORD *)(a1 + 1272) = v4;
  }
  if (!sub_C6F28(0, "AVE_MaxKeyFrameIntervalDuration", &v3)) {
    *(double *)(a1 + 1280) = v3;
  }
  if (!sub_C6F28(0, "AVE_StrictKeyFrameIntervalDuration", &v3))
  {
    double result = v3;
    *(double *)(a1 + 1288) = v3;
  }
  return result;
}

uint64_t sub_C866C(uint64_t a1)
{
  int v3 = 0;
  if (!sub_C6158(0, "AVE_RefFeatureOn", &v3)) {
    *(_DWORD *)(a1 + 1296) = v3;
  }
  uint64_t result = sub_C6158(0, "AVE_RefFeatureOff", &v3);
  if (!result) {
    *(_DWORD *)(a1 + 1300) = v3;
  }
  return result;
}

uint64_t sub_C86D8(_DWORD *a1)
{
  int v3 = 0;
  if (!sub_C6840(0, "AVE_MultiPassMaxQPModLevel", &v3)) {
    a1[326] = v3;
  }
  if (!sub_C6840(0, "AVE_MultiPassQPModLevel", &v3)) {
    a1[327] = v3;
  }
  if (!sub_C6840(0, "AVE_MultiPassConstantQp", &v3)) {
    a1[328] = v3;
  }
  uint64_t result = sub_C6840(0, "AVE_MultiPassOptions", &v3);
  if (!result) {
    a1[329] = v3;
  }
  return result;
}

uint64_t sub_C8784(_DWORD *a1)
{
  int v3 = 0;
  if (!sub_C6840(0, "AVE_MCTFStrengthLevel", &v3)) {
    a1[330] = v3;
  }
  if (!sub_C6840(0, "AVE_MCTFStrengthDelta", &v3)) {
    a1[331] = v3;
  }
  if (!sub_C6840(0, "AVE_MCTFTogglePeriod", &v3)) {
    a1[332] = v3;
  }
  if (!sub_C6840(0, "AVE_MCTFISPGainThreshold", &v3)) {
    a1[333] = v3;
  }
  if (!sub_C6840(0, "AVE_MCTFOnToOffPerfThreshold", &v3)) {
    a1[334] = v3;
  }
  uint64_t result = sub_C6840(0, "AVE_MCTFOffToOnPerfThreshold", &v3);
  if (!result) {
    a1[335] = v3;
  }
  return result;
}

uint64_t sub_C8870(uint64_t a1)
{
  int v4 = 0;
  uintmax_t v3 = 0;
  if (!sub_C6840(0, "AVE_Profile", &v4)) {
    *(_DWORD *)(a1 + 1096) = v4;
  }
  if (!sub_C6840(0, "AVE_Level", &v4)) {
    *(_DWORD *)(a1 + 1100) = v4;
  }
  if (!sub_C6840(0, "AVE_Tier", &v4)) {
    *(_DWORD *)(a1 + 1104) = v4;
  }
  if (!sub_C6840(0, "AVE_ScalingMatrix", &v4)) {
    *(_DWORD *)(a1 + 1108) = v4;
  }
  if (!sub_C64CC(0, "AVE_SEIFeatureOn", &v3)) {
    *(void *)(a1 + 1112) = v3;
  }
  if (!sub_C64CC(0, "AVE_SEIFeatureOff", &v3)) {
    *(void *)(a1 + 1120) = v3;
  }
  sub_C81D4((_DWORD *)a1);
  sub_C82E0(a1);
  sub_C8474(a1);
  sub_C84E0(a1);
  sub_C866C(a1);
  return sub_C86D8((_DWORD *)a1);
}

uint64_t sub_C8990(_DWORD *a1)
{
  int v3 = 0;
  if (!sub_C6840(0, "AVE_SliceNum", &v3)) {
    a1[336] = v3;
  }
  if (!sub_C6840(0, "AVE_MotionSearchRangeMode", &v3)) {
    a1[337] = v3;
  }
  if (!sub_C6840(0, "AVE_ThroughputMode", &v3)) {
    a1[338] = v3;
  }
  if (!sub_C6840(0, "AVE_MergeCandidateNum", &v3)) {
    a1[339] = v3;
  }
  if (!sub_C6840(0, "AVE_DeblockMode", &v3)) {
    a1[340] = v3;
  }
  if (!sub_C6840(0, "AVE_SAOMode", &v3)) {
    a1[341] = v3;
  }
  uint64_t result = sub_C6840(0, "AVE_EdgeReplication", &v3);
  if (!result) {
    a1[342] = v3;
  }
  return result;
}

uint64_t sub_C8A9C(uint64_t a1)
{
  int v4 = 0;
  if (!sub_C6840(0, "AVE_DWMode", &v4)) {
    *(_DWORD *)a1 = v4;
  }
  if (!sub_C6840(0, "AVE_DefaultCfg", &v4)) {
    *(unsigned char *)(a1 + 4) = v4 != 0;
  }
  sub_C7AA4((void *)a1);
  sub_C7EC4((_DWORD *)a1);
  sub_C7F80(a1);
  sub_C8060(a1 + 920);
  sub_C8870(a1);
  sub_C8990((_DWORD *)a1);
  sub_C8784((_DWORD *)a1);
  if (!sub_C6840(0, "AVE_Usage", &v4)) {
    *(_DWORD *)(a1 + 1372) = v4;
  }
  if (!sub_C6840(0, "AVE_PropertyMode", &v4)) {
    *(_DWORD *)(a1 + 1376) = v4;
  }
  if (!sub_C6840(0, "AVE_SourceFrameCount", &v4)) {
    *(_DWORD *)(a1 + 1380) = v4;
  }
  if (!sub_C6840(0, "AVE_CmdTimeOutMode", &v4)) {
    *(_DWORD *)(a1 + 1384) = v4;
  }
  if (!sub_C6840(0, "AVE_FwHeartBeatTimerPanic", &v4)) {
    *(_DWORD *)(a1 + 1388) = v4;
  }
  if (!sub_C6840(0, "AVE_SchedPolicy", &v4)) {
    *(_DWORD *)(a1 + 1392) = v4;
  }
  if (!sub_C6840(0, "AVE_OutputBufNum", &v4)) {
    *(_DWORD *)(a1 + 1396) = v4;
  }
  if (!sub_C6840(0, "AVE_OutputBufSize", &v4)) {
    *(_DWORD *)(a1 + 1400) = v4;
  }
  if (!sub_C6840(0, "AVE_SNR", &v4)) {
    *(_DWORD *)(a1 + 1404) = v4;
  }
  uint64_t v2 = sub_C6840(0, "AVE_TimeStats_MaxCnt", &v4);
  if (!v2) {
    *(_DWORD *)(a1 + 1408) = v4;
  }
  sub_C76D8((_DWORD *)a1);
  return v2;
}

uint64_t sub_C8C98()
{
  if (sub_D1C38(0x2Cu, 7))
  {
    int v0 = sub_D1C7C(0x2Cu);
    __uint64_t v1 = sub_DDEFC();
    uint64_t v2 = (const char *)sub_D1CB0(7);
    if (v0)
    {
      printf("%lld %d AVE %s: %s Enter\n", v1, 44, v2, "AVE_DW_Init");
      __uint64_t v3 = sub_DDEFC();
      long long v10 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s Enter", v3, 44, v10, "AVE_DW_Init");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter", v1, 44, v2, "AVE_DW_Init");
    }
  }
  sub_C7610((uint64_t)&unk_160148);
  uint64_t v4 = sub_C8A9C((uint64_t)&unk_160148);
  if (sub_D1C38(0x2Cu, 7))
  {
    int v5 = sub_D1C7C(0x2Cu);
    __uint64_t v6 = sub_DDEFC();
    long long v7 = (const char *)sub_D1CB0(7);
    if (v5)
    {
      printf("%lld %d AVE %s: %s Exit %d\n", v6, 44, v7, "AVE_DW_Init", v4);
      __uint64_t v8 = sub_DDEFC();
      long long v11 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s Exit %d", v8, 44, v11, "AVE_DW_Init", v4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %d", v6, 44, v7, "AVE_DW_Init", v4);
    }
  }
  return v4;
}

uint64_t sub_C8E18()
{
  if (sub_D1C38(0x2Cu, 7))
  {
    int v0 = sub_D1C7C(0x2Cu);
    __uint64_t v1 = sub_DDEFC();
    uint64_t v2 = (const char *)sub_D1CB0(7);
    if (v0)
    {
      printf("%lld %d AVE %s: %s Enter\n", v1, 44, v2, "AVE_DW_Uninit");
      __uint64_t v3 = sub_DDEFC();
      long long v9 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s Enter", v3, 44, v9, "AVE_DW_Uninit");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter", v1, 44, v2, "AVE_DW_Uninit");
    }
  }
  if (sub_D1C38(0x2Cu, 7))
  {
    int v4 = sub_D1C7C(0x2Cu);
    __uint64_t v5 = sub_DDEFC();
    __uint64_t v6 = (const char *)sub_D1CB0(7);
    if (v4)
    {
      printf("%lld %d AVE %s: %s Exit %d\n", v5, 44, v6, "AVE_DW_Uninit", 0);
      __uint64_t v7 = sub_DDEFC();
      long long v10 = (const char *)sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s Exit %d", v7, 44, v10, "AVE_DW_Uninit", 0);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %d", v5, 44, v6, "AVE_DW_Uninit", 0);
    }
  }
  return 0;
}

uint64_t sub_C8F74(CVPixelBufferRef pixelBuffer, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, _DWORD *a8, int a9)
{
  size_t extraRowsOnBottom = 0;
  extraColumnsOnRight[0] = 0;
  if ((int)a3 <= 10 && (a4 & 1) != 0 || !a8[1] && !a8[3])
  {
    int v16 = 0;
    uint64_t v17 = 0;
    int v18 = 0;
    int v19 = 0;
    goto LABEL_59;
  }
  if (a9 == -1)
  {
    if (a5)
    {
      int v16 = 1;
      if (a6 == 2 && !a7)
      {
        CFTypeRef v20 = CVBufferCopyAttachment(pixelBuffer, kCVPixelBufferExtendedPixelsFilledKey, 0);
        if (v20)
        {
          int v21 = v20;
          int v22 = CFEqual(v20, kCFBooleanTrue);
          if ((int)a3 <= 5 && v22)
          {
            int v16 = 0;
            int v18 = 0;
            int v19 = 0;
            uint64_t v17 = 16;
            goto LABEL_59;
          }
          CFRelease(v21);
        }
        int v16 = 0;
      }
    }
    else
    {
      int v16 = 2;
    }
  }
  else
  {
    int v16 = a9 + 3;
  }
  CVPixelBufferGetExtendedPixels(pixelBuffer, 0, extraColumnsOnRight, 0, &extraRowsOnBottom);
  int v23 = a2[6];
  if (v23)
  {
    int v18 = 0;
    BOOL v24 = 1;
    if (v23 != 1 || !extraRowsOnBottom) {
      goto LABEL_25;
    }
  }
  else if (!extraRowsOnBottom)
  {
    int v18 = 0;
    BOOL v24 = 1;
    goto LABEL_25;
  }
  int v25 = a8[3];
  int v26 = v25 != 0;
  BOOL v24 = v25 == 0;
  int v18 = v26 << 16;
LABEL_25:
  if ((int)a3 < 11)
  {
    if ((int)a3 < 3)
    {
      int v19 = 0;
    }
    else
    {
      if (a8[1] == 8u >> (a2[4] >> 1)) {
        int v34 = 3328;
      }
      else {
        int v34 = 0;
      }
      if (a8[3] == 8u >> (a2[5] >> 1)) {
        int v19 = v34 | 0x50000;
      }
      else {
        int v19 = v34;
      }
    }
  }
  else
  {
    int v27 = a8[1];
    int v28 = a2[4] >> 1;
    if (v27 > (int)(0xEu >> v28) || v27 < (int)(2u >> v28)) {
      int v30 = 0;
    }
    else {
      int v30 = 3328;
    }
    int v31 = a8[3];
    int v32 = a2[5] >> 1;
    if (v31 > (int)(0xEu >> v32) || v31 < (int)(2u >> v32)) {
      int v19 = v30;
    }
    else {
      int v19 = v30 | 0x50000;
    }
  }
  int v35 = 0;
  switch(v16)
  {
    case 0:
      if (v24) {
        int v36 = 0;
      }
      else {
        int v36 = v18;
      }
      int v37 = v19 & 0xFF00 | v36;
      int v35 = v19 & 0x7FF00;
      if ((v19 & 0x70000) == 0) {
        int v35 = v37;
      }
      break;
    case 1:
    case 2:
    case 7:
      int v35 = v19 & 0x7FF00;
      break;
    case 4:
      int v35 = v19 & 0xFF00;
      break;
    case 5:
      int v35 = v19 & 0x70000;
      break;
    case 6:
      int v35 = v18 | 2;
      if (v24) {
        int v35 = 0;
      }
      break;
    default:
      break;
  }
  uint64_t v17 = v35 | ((v35 & 0x10100) != 0);
LABEL_59:
  if (sub_D1C38(0xAu, 7))
  {
    int v38 = sub_D1C7C(0xAu);
    __uint64_t v44 = sub_DDEFC();
    long long v39 = (const char *)sub_D1CB0(7);
    if (v38)
    {
      uint64_t v43 = a4;
      printf("%lld %d AVE %s: %s:%d | %d | %d %d %d %d %d | (%d %d %d %d) (%d %d) | %d %x %x %x\n\n", v44, 10, v39, "AVE_EdgeReplication_DetermineMode", 232, a3, a4, a5, a6, a7, a9, *a8, a8[1], a8[2], a8[3], LODWORD(extraColumnsOnRight[0]), extraRowsOnBottom, v16,
        v18,
        v19,
        v17);
      __uint64_t v40 = sub_DDEFC();
      uint64_t v42 = sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s:%d | %d | %d %d %d %d %d | (%d %d %d %d) (%d %d) | %d %x %x %x\n", v40, 10, v42, "AVE_EdgeReplication_DetermineMode", 232, a3, v43, a5);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d | %d | %d %d %d %d %d | (%d %d %d %d) (%d %d) | %d %x %x %x\n", v44, 10, v39, "AVE_EdgeReplication_DetermineMode", 232, a3, a4, a5);
    }
  }
  return v17;
}

uint64_t sub_C93D8(__CVBuffer *a1, unsigned int a2)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v5 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferGetBaseAddressOfPlane(a1, a2);
  CVPixelBufferGetWidthOfPlane(a1, a2);
  CVPixelBufferGetHeightOfPlane(a1, a2);
  CVPixelBufferGetBytesPerRowOfPlane(a1, a2);
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &v5);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  return 4294966296;
}

uint64_t sub_C9470(__CVBuffer *a1, unsigned int a2, int a3, uint64_t a4)
{
  size_t v17 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, a2);
  CVPixelBufferGetWidthOfPlane(a1, a2);
  unsigned int HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, a2);
  unsigned int BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, a2);
  CVPixelBufferGetExtendedPixels(a1, 0, 0, &extraRowsOnTop, &v17);
  if (a2)
  {
    if (*(_DWORD *)(a4 + 12))
    {
      int v11 = *(int *)(a4 + 20) >> 1;
      v17 >>= v11;
      extraRowsOnTop >>= v11;
    }
    else
    {
      size_t v17 = 0;
    }
  }
  long long v12 = &BaseAddressOfPlane[(extraRowsOnTop + HeightOfPlane - 1) * BytesPerRowOfPlane];
  long long v13 = &v12[BytesPerRowOfPlane];
  if (a3)
  {
    if (v17)
    {
      for (size_t i = 0; i < v17; ++i)
      {
        memcpy(v13, v12, BytesPerRowOfPlane);
        v13 += BytesPerRowOfPlane;
        v12 -= BytesPerRowOfPlane;
      }
    }
  }
  else if (v17)
  {
    for (size_t j = 0; j < v17; ++j)
    {
      memcpy(v13, v12, BytesPerRowOfPlane);
      v13 += BytesPerRowOfPlane;
    }
  }
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  return 0;
}

uint64_t sub_C95E0(__CVBuffer *a1, unsigned int a2, uint64_t a3)
{
  __int16 v4 = a2;
  if ((a2 & 0x50000) == 0x10000 && *(int *)(a3 + 8) >= 1)
  {
    signed int v6 = 0;
    int v7 = HIWORD(a2) & 8;
    do
      sub_C9470(a1, v6++, v7, a3);
    while (v6 < *(_DWORD *)(a3 + 8));
  }
  if ((v4 & 0x500) == 0x100 && *(int *)(a3 + 8) >= 1)
  {
    signed int v8 = 0;
    do
      sub_C93D8(a1, v8++);
    while (v8 < *(_DWORD *)(a3 + 8));
  }
  return 0;
}

uint64_t sub_C96A4(int a1, uint64_t a2, int a3, int a4, int a5)
{
  return sub_13F78(a1, a2, a3 | 0xE0u, a4, a5);
}

uint64_t sub_C96AC(unsigned int *a1, unsigned int *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  memset(v44, 0, sizeof(v44));
  sub_3444(a4, a5, (char *)v44, 32, a5, a6, a7, a8);
  int v11 = (char)a3;
  if (sub_D1C38(a2, (char)a3))
  {
    int v12 = sub_D1C7C(a2);
    int v13 = v12;
    if (a3 < 0)
    {
      if (!v12 || (-a3 & 0x20) != 0)
      {
        syslog(3, "MCTF %s | %p %d | %d %d %d - %d %d %d - %d %d %d %d %d %d %d %d %d", v44, a1, *a1, a1[1], a1[2], a1[3]);
        return 0;
      }
      CFTypeRef v20 = v44;
      printf("MCTF %s | %p %d | %d %d %d - %d %d %d - %d %d %d %d %d %d %d %d %d\n", (const char *)v44, a1, *a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15]);
      uint64_t v39 = a1[14];
      uint64_t v40 = a1[15];
      uint64_t v37 = a1[12];
      uint64_t v38 = a1[13];
      uint64_t v35 = a1[10];
      uint64_t v36 = a1[11];
      uint64_t v33 = a1[8];
      uint64_t v34 = a1[9];
      uint64_t v31 = a1[6];
      uint64_t v32 = a1[7];
      uint64_t v29 = a1[4];
      uint64_t v30 = a1[5];
      int v27 = (unsigned int *)a1[2];
      uint64_t v28 = a1[3];
      int v25 = (void *)*a1;
      int v26 = (_OWORD *)a1[1];
      int v22 = "MCTF %s | %p %d | %d %d %d - %d %d %d - %d %d %d %d %d %d %d %d %d";
      BOOL v24 = a1;
    }
    else
    {
      __uint64_t v14 = sub_DDEFC();
      int v15 = (const char *)sub_D1CB0((char)a3);
      uint64_t v16 = *a1;
      uint64_t v17 = a1[1];
      uint64_t v18 = a1[2];
      if ((a3 & 0x20) != 0 || !v13)
      {
        syslog(3, "%lld %d AVE %s: MCTF %s | %p %d | %d %d %d - %d %d %d - %d %d %d %d %d %d %d %d %d", v14, a2, v15, v44, a1, v16, v17, v18);
        return 0;
      }
      int v19 = a2;
      printf("%lld %d AVE %s: MCTF %s | %p %d | %d %d %d - %d %d %d - %d %d %d %d %d %d %d %d %d\n", v14, a2, v15, (const char *)v44, a1, v16, v17, v18, a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12],
        a1[13],
        a1[14],
        a1[15]);
      CFTypeRef v20 = (_OWORD *)sub_DDEFC();
      int v21 = sub_D1CB0(v11);
      uint64_t v42 = a1[14];
      uint64_t v43 = a1[15];
      uint64_t v40 = a1[12];
      uint64_t v41 = a1[13];
      uint64_t v38 = a1[10];
      uint64_t v39 = a1[11];
      uint64_t v36 = a1[8];
      uint64_t v37 = a1[9];
      uint64_t v34 = a1[6];
      uint64_t v35 = a1[7];
      uint64_t v32 = a1[4];
      uint64_t v33 = a1[5];
      uint64_t v30 = a1[2];
      uint64_t v31 = a1[3];
      uint64_t v28 = *a1;
      uint64_t v29 = a1[1];
      int v26 = v44;
      int v27 = a1;
      BOOL v24 = v19;
      int v25 = v21;
      int v22 = "%lld %d AVE %s: MCTF %s | %p %d | %d %d %d - %d %d %d - %d %d %d %d %d %d %d %d %d";
    }
    syslog(3, v22, v20, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39,
      v40,
      v41,
      v42,
      v43);
  }
  return 0;
}

uint64_t sub_C9988(const __CFArray *a1, _OWORD *a2)
{
  v37[0] = 0;
  __int16 v36 = 0;
  char v35 = 0;
  int Count = CFArrayGetCount(a1);
  if (a1 && a2)
  {
    int v5 = 0;
    int v6 = Count >> 1;
    a2[6] = 0u;
    a2[7] = 0u;
    a2[4] = 0u;
    a2[5] = 0u;
    a2[3] = 0u;
    char v7 = 1;
    *a2 = 0u;
    a2[1] = 0u;
    a2[2] = 0u;
    signed int v8 = (int *)(a2 + 2);
    do
    {
      char v9 = v7;
      sub_C2374(a1, (v5 * v6), &v35);
      *(v8 - 8) = v35;
      sub_C2374(a1, (v5 * v6 + 1), &v35);
      *(v8 - 7) = v35;
      sub_C2374(a1, (v5 * v6 + 2), &v35);
      *(v8 - 6) = v35;
      sub_C2374(a1, (v5 * v6 + 3), &v35);
      *(v8 - 5) = v35;
      sub_C2374(a1, (v5 * v6 + 4), &v35);
      *(v8 - 4) = v35;
      sub_C2374(a1, (v5 * v6 + 5), &v35);
      *(v8 - 3) = v35;
      sub_C2374(a1, (v5 * v6 + 6), &v35);
      *(v8 - 2) = v35;
      sub_C2374(a1, (v5 * v6 + 7), &v35);
      *(v8 - 1) = v35;
      sub_C261C(a1, (v5 * v6 + 8), &v36);
      *signed int v8 = v36;
      sub_C2374(a1, (v5 * v6 + 9), &v35);
      v8[1] = v35;
      sub_C2374(a1, (v5 * v6 + 10), &v35);
      v8[2] = v35;
      sub_C2374(a1, (v5 * v6 + 11), &v35);
      v8[3] = v35;
      sub_C2374(a1, (v5 * v6 + 12), &v35);
      v8[4] = v35;
      sub_C28C4(a1, (v5 * v6 + 13), v37);
      v8[5] = v37[0];
      sub_C28C4(a1, (v5 * v6 + 14), v37);
      v8[6] = v37[0];
      uint64_t v10 = sub_C28C4(a1, (v5 * v6 + 15), v37);
      v8[7] = v37[0];
      if (sub_D1C38(0x1Cu, 7))
      {
        int v11 = sub_D1C7C(0x1Cu);
        __uint64_t v12 = sub_DDEFC();
        int v13 = (const char *)sub_D1CB0(7);
        int v14 = *(v8 - 8);
        int v15 = *(v8 - 7);
        int v16 = *(v8 - 6);
        int v17 = *(v8 - 5);
        int v18 = *(v8 - 4);
        int v19 = *(v8 - 3);
        int v20 = *(v8 - 2);
        int v21 = *(v8 - 1);
        int v22 = *v8;
        int v23 = v8[1];
        int v24 = v8[2];
        int v25 = v8[3];
        int v26 = v8[4];
        int v27 = v8[5];
        int v28 = v8[7];
        if (v11)
        {
          printf("%lld %d AVE %s: MCTF Pop [%d]: %d | %d %d %d - %d %d %d - %d %d %d %d %d %d %d %d %d\n", v12, 28, v13, v5, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27,
            v8[6],
            v28);
          __uint64_t v29 = sub_DDEFC();
          uint64_t v30 = (const char *)sub_D1CB0(7);
          syslog(3, "%lld %d AVE %s: MCTF Pop [%d]: %d | %d %d %d - %d %d %d - %d %d %d %d %d %d %d %d %d", v29, 28, v30, v5, *(v8 - 8), *(v8 - 7), *(v8 - 6), *(v8 - 5), *(v8 - 4), *(v8 - 3), *(v8 - 2), *(v8 - 1), *v8, v8[1], v8[2], v8[3], v8[4],
            v8[5],
            v8[6],
            v8[7]);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: MCTF Pop [%d]: %d | %d %d %d - %d %d %d - %d %d %d %d %d %d %d %d %d", v12, 28, v13, v5, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26,
            v27,
            v8[6],
            v28);
        }
      }
      char v7 = 0;
      v8 += 16;
      int v5 = 1;
    }
    while ((v9 & 1) != 0);
  }
  else
  {
    if (sub_D1C38(0x1Cu, 4))
    {
      int v31 = sub_D1C7C(0x1Cu);
      __uint64_t v32 = sub_DDEFC();
      uint64_t v33 = (const char *)sub_D1CB0(4);
      if (v31)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p\n", v32, 28, v33, "AVE_MCTF_Retrieve", 81, "pArray != __null && pMCTF != __null", a1, a2);
        __uint64_t v32 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p", v32, 28);
    }
    return 4294966295;
  }
  return v10;
}

uint64_t sub_C9D9C(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, unsigned int a10, uint64_t a11)
{
  return 0;
}

uint64_t sub_C9DE4(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, int a10, unsigned int a11, int a12, unsigned int a13, int a14, uint64_t a15)
{
  return 0;
}

uint64_t sub_C9E34(_DWORD *a1, int a2, int a3, uint64_t a4, char a5, int a6, int a7, uint64_t a8)
{
  int v8 = a2;
  LODWORD(v10) = 2 * a2 / 3;
  int v11 = 2 * a2 % 3;
  if ((a5 & 1) == 0)
  {
    if (a3 < 1) {
      return 0;
    }
    uint64_t v27 = 0;
    int v28 = a7 * a3;
    if ((int)v10 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v10;
    }
    uint64_t v29 = a6;
    uint64_t v30 = a1;
    uint64_t v31 = a3;
    while (1)
    {
      uint64_t v32 = a8 + v27 * a7;
      if (v8 < 2)
      {
        int v42 = 0;
        unsigned int v35 = 0;
        int v34 = 0;
        if (!v11) {
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v33 = 0;
        int v34 = 0;
        unsigned int v35 = 0;
        do
        {
          unsigned int v36 = v30[v33];
          __int16 v37 = v36 & 0x3FF;
          if (v33)
          {
            unsigned int v41 = v34 + v28;
            *(_WORD *)(v32 + 2 * (v34 + v28)) = v37;
            int v39 = 2;
            int v40 = 1;
            unsigned int v38 = v35;
          }
          else
          {
            *(_WORD *)(v32 + 2 * v35) = v37;
            unsigned int v38 = v34 + v28;
            int v39 = 1;
            int v40 = 2;
            unsigned int v41 = v35;
          }
          *(_WORD *)(v32 + 2 * (int)v38) = (v36 >> 10) & 0x3FF;
          *(_WORD *)(v32 + 2 * (int)(v41 + 1)) = (v36 >> 20) & 0x3FF;
          v35 += v40;
          v34 += v39;
          ++v33;
        }
        while (v10 != v33);
        int v42 = v10;
        if (!v11) {
          goto LABEL_36;
        }
      }
      unsigned int v43 = *(_DWORD *)((char *)&a1[v42] + v27 * v29);
      __int16 v44 = v43 & 0x3FF;
      if (v42)
      {
        *(_WORD *)(v32 + 2 * (v34 + v28)) = v44;
        if (v11 == 2) {
          goto LABEL_35;
        }
      }
      else
      {
        *(_WORD *)(v32 + 2 * (int)v35) = v44;
        if (v11 == 2)
        {
          unsigned int v35 = v34 + v28;
LABEL_35:
          *(_WORD *)(v32 + 2 * (int)v35) = (v43 >> 10) & 0x3FF;
        }
      }
LABEL_36:
      ++v27;
      uint64_t v30 = (_DWORD *)((char *)v30 + v29);
      if (v27 == v31) {
        return 0;
      }
    }
  }
  if (a3 >= 1)
  {
    uint64_t v12 = 0;
    if ((int)v10 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v10;
    }
    size_t v47 = 2 * (2 * a2 % 3 - 1) + 2;
    uint64_t v14 = a6;
    uint64_t v15 = a7;
    uint64_t v16 = a3;
    int v17 = (_WORD *)(a8 + 4);
    int v18 = a1;
    do
    {
      if (v8 < 2)
      {
        unsigned int v23 = 0;
        if (v11) {
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t v19 = v13;
        int v20 = v18;
        int v21 = v17;
        do
        {
          unsigned int v22 = *v20++;
          *(v21 - 2) = v22 & 0x3FF;
          *(v21 - 1) = (v22 >> 10) & 0x3FF;
          _WORD *v21 = (v22 >> 20) & 0x3FF;
          v21 += 3;
          --v19;
        }
        while (v19);
        unsigned int v23 = v13;
        if (v11)
        {
LABEL_13:
          unsigned int v24 = *(_DWORD *)((char *)&a1[v23] + v12 * v14);
          __src[0] = v24 & 0x3FF;
          __src[1] = (v24 >> 10) & 0x3FF;
          __src[2] = (v24 >> 20) & 0x3FF;
          if (v11 >= 1)
          {
            uint64_t v25 = a8;
            uint64_t v26 = v15;
            memcpy((void *)(a8 + (int)v12 * a7 + 6 * v23), __src, v47);
            uint64_t v15 = v26;
            a8 = v25;
            int v8 = a2;
          }
        }
      }
      ++v12;
      int v17 = (_WORD *)((char *)v17 + v15);
      int v18 = (unsigned int *)((char *)v18 + v14);
    }
    while (v12 != v16);
  }
  return 0;
}

uint64_t sub_CA0C0(unsigned int *a1, int a2, int a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  if (a3 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = (a2 / 3);
    int v11 = a2 % 3;
    size_t v23 = 2 * (a2 % 3 - 1) + 2;
    uint64_t v12 = a5;
    uint64_t v13 = a3;
    uint64_t v14 = (_WORD *)(a7 + 4);
    uint64_t v15 = a1;
    do
    {
      if (a2 < 3)
      {
        unsigned int v20 = 0;
        if (v11) {
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v16 = v10;
        int v17 = v15;
        int v18 = v14;
        do
        {
          unsigned int v19 = *v17++;
          *(v18 - 2) = v19 & 0x3FF;
          *(v18 - 1) = (v19 >> 10) & 0x3FF;
          _WORD *v18 = (v19 >> 20) & 0x3FF;
          v18 += 3;
          --v16;
        }
        while (v16);
        unsigned int v20 = v10;
        if (v11)
        {
LABEL_9:
          unsigned int v21 = *(unsigned int *)((char *)&a1[v20] + v9 * v12);
          __src[0] = v21 & 0x3FF;
          __src[1] = (v21 >> 10) & 0x3FF;
          __src[2] = (v21 >> 20) & 0x3FF;
          if (v11 >= 1) {
            memcpy((void *)(a7 + (int)v9 * a6 + 6 * v20), __src, v23);
          }
        }
      }
      ++v9;
      uint64_t v14 = (_WORD *)((char *)v14 + a6);
      uint64_t v15 = (unsigned int *)((char *)v15 + v12);
    }
    while (v9 != v13);
  }
  return 0;
}

uint64_t sub_CA21C(unsigned int *a1, int a2, int a3, uint64_t a4, int a5, char a6, int a7, int a8, uint64_t a9)
{
  if (a5) {
    sub_C9E34(a1, a2, a3, a4, a6, a7, a8, a9);
  }
  else {
    sub_CA0C0(a1, a2, a3, a4, a7, a8, a9);
  }
  return 0;
}

double sub_CA264(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  return result;
}

uint64_t sub_CA280(_DWORD *a1)
{
  if (sub_D1C38(0x49u, 6))
  {
    int v2 = sub_D1C7C(0x49u);
    __uint64_t v3 = sub_DDEFC();
    __int16 v4 = (const char *)sub_D1CB0(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p\n", v3, 73, v4, "AVE_FPS", "Uninit", a1);
      __uint64_t v5 = sub_DDEFC();
      int v11 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p", v5, 73, v11, "AVE_FPS", "Uninit", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p", v3, 73, v4, "AVE_FPS", "Uninit", a1);
    }
  }
  int v6 = (void *)*((void *)a1 + 1);
  if (v6)
  {
    free(v6);
    *((void *)a1 + 1) = 0;
  }
  *a1 = 0;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((void *)a1 + 8) = 0;
  if (sub_D1C38(0x49u, 6))
  {
    int v7 = sub_D1C7C(0x49u);
    __uint64_t v8 = sub_DDEFC();
    uint64_t v9 = (const char *)sub_D1CB0(6);
    if (v7)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %d\n", v8, 73, v9, "AVE_FPS", "Uninit", a1, 0);
      __uint64_t v8 = sub_DDEFC();
      sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Exit %p %d", v8);
  }
  return 0;
}

_DWORD *sub_CA44C(_DWORD *a1)
{
  return a1;
}

uint64_t sub_CA478(unsigned int *a1, int a2, unsigned int a3, unsigned int a4)
{
  if (sub_D1C38(0x49u, 6))
  {
    int v8 = sub_D1C7C(0x49u);
    __uint64_t v9 = sub_DDEFC();
    uint64_t v10 = (const char *)sub_D1CB0(6);
    if (v8)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %d %d %d\n", v9, 73, v10, "AVE_FPS", "Init", a1, a2, a3, a4);
      __uint64_t v9 = sub_DDEFC();
      sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %d %d %d", v9, 73);
  }
  if ((a2 - 1) > 0x1869E || (a3 & 0x80000000) != 0)
  {
    if (sub_D1C38(0x49u, 4))
    {
      int v14 = sub_D1C7C(0x49u);
      __uint64_t v15 = sub_DDEFC();
      uint64_t v16 = (const char *)sub_D1CB0(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %d %d %d\n", v15, 73, v16, "AVE_FPS", "Init", 56, "0 < fps && fps < 100000 && num >= 0", a1, a2, a3, a4);
        __uint64_t v17 = sub_DDEFC();
        uint64_t v27 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %d %d %d", v17, 73, v27, "AVE_FPS");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %d %d %d", v15, 73, v16, "AVE_FPS");
      }
    }
    uint64_t v13 = 4294966295;
  }
  else
  {
    int v11 = 2 * a2;
    if (a3) {
      int v11 = a3;
    }
    if (v11 <= 2) {
      a3 = 2;
    }
    else {
      a3 = v11;
    }
    uint64_t v12 = malloc_type_malloc(16 * a3, 0x1000040D9A13B51uLL);
    *((void *)a1 + 1) = v12;
    if (v12)
    {
      uint64_t v13 = 0;
      *a1 = a3;
      a1[8] = a4;
      *((double *)a1 + 5) = (double)a2;
      *((double *)a1 + 6) = (double)a2;
      *((double *)a1 + 7) = (double)a2;
      *((double *)a1 + 8) = (double)a2;
    }
    else
    {
      if (sub_D1C38(0x49u, 4))
      {
        int v18 = sub_D1C7C(0x49u);
        __uint64_t v19 = sub_DDEFC();
        unsigned int v20 = (const char *)sub_D1CB0(4);
        if (v18)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | failed to allocate memory of timestamp %p %d %d %d\n", v19, 73, v20, "AVE_FPS", "Init", 66, "m_psTime != __null", a1, a2, a3, a4);
          __uint64_t v21 = sub_DDEFC();
          int v28 = sub_D1CB0(4);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to allocate memory of timestamp %p %d %d %d", v21, 73, v28, "AVE_FPS");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to allocate memory of timestamp %p %d %d %d", v19, 73, v20, "AVE_FPS");
        }
      }
      uint64_t v13 = 4294966293;
    }
  }
  if (sub_D1C38(0x49u, 6))
  {
    int v22 = sub_D1C7C(0x49u);
    __uint64_t v23 = sub_DDEFC();
    unsigned int v24 = (const char *)sub_D1CB0(6);
    if (v22)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %d %d %d %d\n", v23, 73, v24, "AVE_FPS", "Init", a1, a2, a3, a4, v13);
      __uint64_t v25 = sub_DDEFC();
      sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %d %d %d %d", v25, 73);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %d %d %d %d", v23, 73);
    }
  }
  return v13;
}

uint64_t sub_CA914(int *a1, int a2, int a3, int a4)
{
  if (sub_D1C38(0x49u, 6))
  {
    int v8 = sub_D1C7C(0x49u);
    __uint64_t v9 = sub_DDEFC();
    uint64_t v10 = (const char *)sub_D1CB0(6);
    if (v8)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %d %d %d\n", v9, 73, v10, "AVE_FPS", "Update", a1, a2, a3, a4);
      __uint64_t v9 = sub_DDEFC();
      sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %d %d %d", v9, 73);
  }
  if ((a2 - 1) > 0x1869E || a3 < 0)
  {
    if (sub_D1C38(0x49u, 4))
    {
      int v16 = sub_D1C7C(0x49u);
      __uint64_t v17 = sub_DDEFC();
      int v18 = (const char *)sub_D1CB0(4);
      if (v16)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %d %d %d\n", v17, 73, v18, "AVE_FPS", "Update", 136, "0 < fps && fps < 100000 && num >= 0", a1, a2, a3, a4);
        __uint64_t v19 = sub_DDEFC();
        unsigned int v20 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %d %d %d", v19, 73, v20, "AVE_FPS");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %d %d %d", v17, 73, v18, "AVE_FPS");
      }
    }
    uint64_t v21 = 4294966295;
  }
  else
  {
    int v11 = 2 * a2;
    if (a3) {
      int v11 = a3;
    }
    if (v11 <= 2) {
      a3 = 2;
    }
    else {
      a3 = v11;
    }
    if (a3 > *a1)
    {
      if (sub_D1C38(0x49u, 6))
      {
        int v12 = sub_D1C7C(0x49u);
        __uint64_t v13 = sub_DDEFC();
        int v14 = (const char *)sub_D1CB0(6);
        if (v12)
        {
          printf("%lld %d AVE %s: %s::%s:%d allocate bigger memory of timestamp %p %d %d <- %d\n", v13, 73, v14, "AVE_FPS", "Update", 151, a1, a2, a3, *a1);
          __uint64_t v15 = sub_DDEFC();
          uint64_t v32 = sub_D1CB0(6);
          syslog(3, "%lld %d AVE %s: %s::%s:%d allocate bigger memory of timestamp %p %d %d <- %d", v15, 73, v32);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d allocate bigger memory of timestamp %p %d %d <- %d", v13, 73, v14);
        }
      }
      a1[9] = 0;
      int v22 = (void *)*((void *)a1 + 1);
      __uint64_t v23 = malloc_type_malloc(16 * a3, 0x1000040D9A13B51uLL);
      *((void *)a1 + 1) = v23;
      if (v23)
      {
        *a1 = a3;
        free(v22);
      }
      else
      {
        *((void *)a1 + 1) = v22;
        if (sub_D1C38(0x49u, 5))
        {
          int v24 = sub_D1C7C(0x49u);
          __uint64_t v25 = sub_DDEFC();
          uint64_t v26 = (const char *)sub_D1CB0(5);
          if (v24)
          {
            printf("%lld %d AVE %s: %s::%s:%d failed to allocate memory of timestamp %p %d\n", v25, 73, v26, "AVE_FPS", "Update", 163, a1, a3);
            __uint64_t v25 = sub_DDEFC();
            sub_D1CB0(5);
          }
          syslog(3, "%lld %d AVE %s: %s::%s:%d failed to allocate memory of timestamp %p %d", v25, 73);
        }
      }
    }
    uint64_t v21 = 0;
    a1[8] = a4;
    *((double *)a1 + 5) = (double)a2;
    *((double *)a1 + 6) = (double)a2;
    *((double *)a1 + 7) = (double)a2;
    *((double *)a1 + 8) = (double)a2;
  }
  if (sub_D1C38(0x49u, 6))
  {
    int v27 = sub_D1C7C(0x49u);
    __uint64_t v28 = sub_DDEFC();
    uint64_t v29 = (const char *)sub_D1CB0(6);
    if (v27)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %d %d %d\n", v28, 73, v29, "AVE_FPS", "Update", a1, a2, a3, v21);
      __uint64_t v30 = sub_DDEFC();
      sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %d %d %d", v30, 73);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %d %d %d", v28, 73);
    }
  }
  return v21;
}

uint64_t sub_CAE78(_DWORD *a1)
{
  if (sub_D1C38(0x49u, 6))
  {
    int v2 = sub_D1C7C(0x49u);
    __uint64_t v3 = sub_DDEFC();
    __int16 v4 = (const char *)sub_D1CB0(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p\n", v3, 73, v4, "AVE_FPS", "Reset", a1);
      __uint64_t v5 = sub_DDEFC();
      uint64_t v10 = (const char *)sub_D1CB0(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p", v5, 73, v10, "AVE_FPS", "Reset", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p", v3, 73, v4, "AVE_FPS", "Reset", a1);
    }
  }
  a1[9] = 0;
  if (sub_D1C38(0x49u, 6))
  {
    int v6 = sub_D1C7C(0x49u);
    __uint64_t v7 = sub_DDEFC();
    int v8 = (const char *)sub_D1CB0(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %d\n", v7, 73, v8, "AVE_FPS", "Reset", a1, 0);
      __uint64_t v7 = sub_DDEFC();
      sub_D1CB0(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Exit %p %d", v7);
  }
  return 0;
}

double sub_CB024(uint64_t *a1, void *a2, int a3)
{
  int v6 = *((_DWORD *)a1 + 2);
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v8 = *a2;
  if (v6 == v7)
  {
    double v9 = (double)(v8 - *a1);
    double v10 = (double)a3;
    double v11 = (double)v6;
  }
  else
  {
    double v11 = (double)v6;
    double v9 = (double)v8 * (double)v6 - (double)*a1 * (double)v7;
    double v10 = (double)a3 * (double)v7;
  }
  double v12 = v10 * v11;
  double v13 = -1.0;
  if (v9 > 0.0)
  {
    double v14 = v12 / v9;
    if (v12 / v9 <= 0.0 || v14 >= 100000.0)
    {
      if (sub_D1C38(0x49u, 5))
      {
        int v15 = sub_D1C7C(0x49u);
        __uint64_t v16 = sub_DDEFC();
        __uint64_t v17 = (const char *)sub_D1CB0(5);
        uint64_t v18 = *a1;
        uint64_t v19 = *((unsigned int *)a1 + 2);
        if (v15)
        {
          printf("%lld %d AVE %s: %s::%s:%d %lld %d - %lld %d %d | %lld.%03lld %lld.%03lld \n", v16, 73, v17, "AVE_FPS", "Calc", 245, v18, v19, *a2, *((_DWORD *)a2 + 2), a3, (uint64_t)v9, (uint64_t)(v9 * 1000.0) - 1000 * (uint64_t)v9, (uint64_t)v14, (uint64_t)(v14 * 1000.0) - 1000 * (uint64_t)v14);
          __uint64_t v20 = sub_DDEFC();
          uint64_t v21 = sub_D1CB0(5);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %lld %d - %lld %d %d | %lld.%03lld %lld.%03lld ", v20, 73, v21, "AVE_FPS", "Calc", 245, *a1, *((unsigned int *)a1 + 2));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %lld %d - %lld %d %d | %lld.%03lld %lld.%03lld ", v16, 73, v17, "AVE_FPS", "Calc", 245, v18, v19);
        }
      }
    }
    else
    {
      return v12 / v9;
    }
  }
  return v13;
}

uint64_t sub_CB254(unsigned int *a1)
{
  uint64_t v2 = *((void *)a1 + 1);
  if (v2)
  {
    int v3 = a1[9];
    if (v3 < 2) {
      return 0;
    }
    uint64_t v4 = ((v3 - 2) % (int)*a1);
    uint64_t v5 = ((v3 - 1) % (int)*a1);
    double v6 = sub_CB024((uint64_t *)(v2 + 16 * v4), (void *)(v2 + 16 * v5), 1);
    double v7 = v6;
    if (v6 >= 0.0)
    {
      *((double *)a1 + 5) = v6;
      int v8 = 7;
    }
    else
    {
      int v8 = 5;
    }
    uint64_t result = sub_D1C38(0x49u, v8);
    if (result)
    {
      int v13 = sub_D1C7C(0x49u);
      __uint64_t v14 = sub_DDEFC();
      int v15 = (const char *)sub_D1CB0(v8);
      uint64_t v16 = a1[9];
      uint64_t v17 = *a1;
      uint64_t v18 = *((void *)a1 + 1);
      uint64_t v19 = (uint64_t *)(v18 + 16 * v4);
      uint64_t v20 = *v19;
      int v21 = *((_DWORD *)v19 + 2);
      int v22 = (uint64_t *)(v18 + 16 * v5);
      uint64_t v23 = *v22;
      int v24 = *((_DWORD *)v22 + 2);
      if (v13)
      {
        printf("%lld %d AVE %s: %s::%s:%d %p %d %d | %d %lld %d - %d %lld %d | %d.%03d  %d.%03d\n", v14, 73, v15, "AVE_FPS", "CalcRt", 298, a1, v16, v17, v4, v20, v21, v5, v23, v24, (int)*((double *)a1 + 5), (int)(*((double *)a1 + 5) * 1000.0) - 1000 * (int)*((double *)a1 + 5), (int)v7,
          (int)(v7 * 1000.0) - 1000 * (int)v7);
        __uint64_t v25 = sub_DDEFC();
        uint64_t v26 = sub_D1CB0(v8);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %d %d | %d %lld %d - %d %lld %d | %d.%03d  %d.%03d", v25, 73, v26, "AVE_FPS", "CalcRt", 298, a1, a1[9], *a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %d %d | %d %lld %d - %d %lld %d | %d.%03d  %d.%03d", v14, 73, v15, "AVE_FPS", "CalcRt", 298, a1, v16, v17);
      }
      return 0;
    }
  }
  else
  {
    if (sub_D1C38(0x49u, 4))
    {
      int v9 = sub_D1C7C(0x49u);
      __uint64_t v10 = sub_DDEFC();
      double v11 = (const char *)sub_D1CB0(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong state %p\n", v10, 73, v11, "AVE_FPS", "CalcRt", 272, "m_psTime != __null", a1);
        __uint64_t v10 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong state %p", v10, 73);
    }
    return 4294966285;
  }
  return result;
}

uint64_t sub_CB584(unsigned int *a1)
{
  uint64_t v2 = *((void *)a1 + 1);
  if (v2)
  {
    int v3 = a1[9];
    if (v3 < 2) {
      return 0;
    }
    int v4 = v3 - 1;
    unsigned int v5 = a1[8];
    BOOL v6 = __OFSUB__(v3, v5);
    int v7 = v3 - v5;
    if (v7 < 0 != v6) {
      int v7 = 0;
    }
    int v8 = v4 - v7;
    uint64_t v9 = (v4 % (int)*a1);
    int v10 = v7 % (int)*a1;
    double v11 = sub_CB024((uint64_t *)(v2 + 16 * v10), (void *)(v2 + 16 * v9), v4 - v7);
    double v12 = v11;
    if (v11 <= 0.0)
    {
      int v13 = 5;
    }
    else
    {
      *((double *)a1 + 6) = v11;
      int v13 = 7;
    }
    uint64_t result = sub_D1C38(0x49u, v13);
    if (result)
    {
      uint64_t v18 = v10;
      int v19 = sub_D1C7C(0x49u);
      __uint64_t v20 = sub_DDEFC();
      int v21 = (const char *)sub_D1CB0(v13);
      uint64_t v22 = *a1;
      uint64_t v23 = a1[9];
      uint64_t v24 = *((void *)a1 + 1);
      __uint64_t v25 = (uint64_t *)(v24 + 16 * v18);
      uint64_t v26 = *v25;
      int v27 = *((_DWORD *)v25 + 2);
      __uint64_t v28 = (uint64_t *)(v24 + 16 * v9);
      uint64_t v29 = *v28;
      int v30 = *((_DWORD *)v28 + 2);
      if (v19)
      {
        printf("%lld %d AVE %s: %s::%s:%d %p %d %d %d | %d %lld %d - %d %lld %d | %d.%03d %d.%03d\n", v20, 73, v21, "AVE_FPS", "CalcSlide", 353, a1, v22, v23, v8, v18, v26, v27, v9, v29, v30, (int)*((double *)a1 + 7), (int)(*((double *)a1 + 7) * 1000.0) - 1000 * (int)*((double *)a1 + 7),
          (int)v12,
          (int)(v12 * 1000.0) - 1000 * (int)v12);
        __uint64_t v31 = sub_DDEFC();
        uint64_t v32 = sub_D1CB0(v13);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %d %d %d | %d %lld %d - %d %lld %d | %d.%03d %d.%03d", v31, 73, v32, "AVE_FPS", "CalcSlide", 353, a1, *a1, a1[9]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %d %d %d | %d %lld %d - %d %lld %d | %d.%03d %d.%03d", v20, 73, v21, "AVE_FPS", "CalcSlide", 353, a1, v22, v23);
      }
      return 0;
    }
  }
  else
  {
    if (sub_D1C38(0x49u, 4))
    {
      int v14 = sub_D1C7C(0x49u);
      __uint64_t v15 = sub_DDEFC();
      uint64_t v16 = (const char *)sub_D1CB0(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong state %p\n", v15, 73, v16, "AVE_FPS", "CalcSlide", 323, "m_psTime != __null", a1);
        __uint64_t v15 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong state %p", v15, 73);
    }
    return 4294966285;
  }
  return result;
}

uint64_t sub_CB8D4(unsigned int *a1)
{
  uint64_t v2 = *((void *)a1 + 1);
  if (v2)
  {
    int v3 = a1[9];
    if (v3 < 2) {
      return 0;
    }
    int v4 = v3 - 1;
    signed int v5 = *a1;
    BOOL v6 = __OFSUB__(v3, *a1);
    int v7 = v3 - *a1;
    if (v7 < 0 != v6) {
      int v7 = 0;
    }
    int v8 = v4 - v7;
    uint64_t v9 = (v4 % v5);
    int v10 = v7 % v5;
    double v11 = sub_CB024((uint64_t *)(v2 + 16 * (v7 % v5)), (void *)(v2 + 16 * v9), v4 - v7);
    double v12 = v11;
    if (v11 <= 0.0)
    {
      int v13 = 5;
    }
    else
    {
      *((double *)a1 + 7) = v11;
      int v13 = 7;
    }
    uint64_t result = sub_D1C38(0x49u, v13);
    if (result)
    {
      uint64_t v18 = v10;
      int v19 = sub_D1C7C(0x49u);
      __uint64_t v20 = sub_DDEFC();
      int v21 = (const char *)sub_D1CB0(v13);
      uint64_t v22 = *a1;
      uint64_t v23 = a1[9];
      uint64_t v24 = *((void *)a1 + 1);
      __uint64_t v25 = (uint64_t *)(v24 + 16 * v18);
      uint64_t v26 = *v25;
      int v27 = *((_DWORD *)v25 + 2);
      __uint64_t v28 = (uint64_t *)(v24 + 16 * v9);
      uint64_t v29 = *v28;
      int v30 = *((_DWORD *)v28 + 2);
      if (v19)
      {
        printf("%lld %d AVE %s: %s::%s:%d %p %d %d %d | %d %lld %d - %d %lld %d | %d.%03d %d.%03d\n", v20, 73, v21, "AVE_FPS", "CalcAvg", 407, a1, v22, v23, v8, v18, v26, v27, v9, v29, v30, (int)*((double *)a1 + 7), (int)(*((double *)a1 + 7) * 1000.0) - 1000 * (int)*((double *)a1 + 7),
          (int)v12,
          (int)(v12 * 1000.0) - 1000 * (int)v12);
        __uint64_t v31 = sub_DDEFC();
        uint64_t v32 = sub_D1CB0(v13);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %d %d %d | %d %lld %d - %d %lld %d | %d.%03d %d.%03d", v31, 73, v32, "AVE_FPS", "CalcAvg", 407, a1, *a1, a1[9]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %d %d %d | %d %lld %d - %d %lld %d | %d.%03d %d.%03d", v20, 73, v21, "AVE_FPS", "CalcAvg", 407, a1, v22, v23);
      }
      return 0;
    }
  }
  else
  {
    if (sub_D1C38(0x49u, 4))
    {
      int v14 = sub_D1C7C(0x49u);
      __uint64_t v15 = sub_DDEFC();
      uint64_t v16 = (const char *)sub_D1CB0(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong state %p\n", v15, 73, v16, "AVE_FPS", "CalcAvg", 377, "m_psTime != __null", a1);
        __uint64_t v15 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong state %p", v15, 73);
    }
    return 4294966285;
  }
  return result;
}

uint64_t sub_CBC20(unsigned int *a1)
{
  uint64_t v2 = *((void *)a1 + 1);
  if (v2)
  {
    int v3 = a1[9];
    if (v3 < 2) {
      return 0;
    }
    int v4 = v3 - 1;
    uint64_t v5 = ((v3 - 1) % (int)*a1);
    double v6 = sub_CB024((uint64_t *)a1 + 2, (void *)(v2 + 16 * v5), v3 - 1);
    double v7 = v6;
    if (v6 <= 0.0)
    {
      int v8 = 5;
    }
    else
    {
      *((double *)a1 + 8) = v6;
      int v8 = 7;
    }
    uint64_t result = sub_D1C38(0x49u, v8);
    if (result)
    {
      int v13 = sub_D1C7C(0x49u);
      __uint64_t v14 = sub_DDEFC();
      __uint64_t v15 = (const char *)sub_D1CB0(v8);
      uint64_t v16 = *a1;
      uint64_t v17 = a1[9];
      uint64_t v18 = *((void *)a1 + 1) + 16 * v5;
      uint64_t v19 = *(void *)v18;
      int v20 = *(_DWORD *)(v18 + 8);
      if (v13)
      {
        printf("%lld %d AVE %s: %s::%s:%d %p %d %d %d | %d %lld %d - %d %lld %d | %d.%03d %d.%03d\n", v14, 73, v15, "AVE_FPS", "CalcOverall", 457, a1, v16, v17, v4, 0, *((void *)a1 + 2), a1[6], v5, v19, v20, (int)*((double *)a1 + 8), (int)(*((double *)a1 + 8) * 1000.0) - 1000 * (int)*((double *)a1 + 8),
          (int)v7,
          (int)(v7 * 1000.0) - 1000 * (int)v7);
        __uint64_t v21 = sub_DDEFC();
        uint64_t v22 = sub_D1CB0(v8);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %d %d %d | %d %lld %d - %d %lld %d | %d.%03d %d.%03d", v21, 73, v22, "AVE_FPS", "CalcOverall", 457, a1, *a1, a1[9]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %d %d %d | %d %lld %d - %d %lld %d | %d.%03d %d.%03d", v14, 73, v15, "AVE_FPS", "CalcOverall", 457, a1, v16, v17);
      }
      return 0;
    }
  }
  else
  {
    if (sub_D1C38(0x49u, 4))
    {
      int v9 = sub_D1C7C(0x49u);
      __uint64_t v10 = sub_DDEFC();
      double v11 = (const char *)sub_D1CB0(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong state %p\n", v10, 73, v11, "AVE_FPS", "CalcOverall", 429, "m_psTime != __null", a1);
        __uint64_t v10 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong state %p", v10, 73);
    }
    return 4294966285;
  }
  return result;
}

uint64_t sub_CBF38(_DWORD *a1, int *a2)
{
  if (sub_D1C38(0x49u, 7))
  {
    int v4 = sub_D1C7C(0x49u);
    __uint64_t v5 = sub_DDEFC();
    double v6 = (const char *)sub_D1CB0(7);
    if (v4)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %p\n", v5, 73, v6, "AVE_FPS", "Add", a1, a2);
      __uint64_t v5 = sub_DDEFC();
      sub_D1CB0(7);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %p", v5);
  }
  if (!a2 || (*(void *)a2 & 0x8000000000000000) != 0 || a2[2] < 1) {
    goto LABEL_42;
  }
  uint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    *(_OWORD *)(v7 + 16 * (a1[9] % *a1)) = *(_OWORD *)a2;
    int v8 = a1[9];
    if (!v8) {
      *((_OWORD *)a1 + 1) = *(_OWORD *)a2;
    }
    a1[9] = v8 + 1;
    if (sub_CB254(a1))
    {
      if (sub_D1C38(0x49u, 4))
      {
        int v9 = sub_D1C7C(0x49u);
        __uint64_t v10 = sub_DDEFC();
        double v11 = (const char *)sub_D1CB0(4);
        if (v9)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | failed to calculate realtime FPS %p %p\n", v10, 73, v11, "AVE_FPS", "Add", 501, "ret == 0", a1, a2);
          __uint64_t v10 = sub_DDEFC();
          uint64_t v29 = sub_D1CB0(4);
        }
        else
        {
          uint64_t v29 = (void *)v11;
        }
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to calculate realtime FPS %p %p", v10, 73, v29);
      }
      goto LABEL_42;
    }
    if ((int)a1[8] >= 1 && sub_CB584(a1))
    {
      if (sub_D1C38(0x49u, 4))
      {
        int v16 = sub_D1C7C(0x49u);
        __uint64_t v17 = sub_DDEFC();
        uint64_t v18 = (const char *)sub_D1CB0(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | failed to calculate sliding average FPS %p %p\n", v17, 73, v18, "AVE_FPS", "Add", 507, "ret == 0", a1, a2);
          __uint64_t v17 = sub_DDEFC();
          __uint64_t v31 = sub_D1CB0(4);
        }
        else
        {
          __uint64_t v31 = (void *)v18;
        }
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to calculate sliding average FPS %p %p", v17, 73, v31);
      }
      goto LABEL_42;
    }
    if (sub_CB8D4(a1))
    {
      if (!sub_D1C38(0x49u, 4))
      {
LABEL_42:
        uint64_t v22 = 4294966295;
        goto LABEL_43;
      }
      int v19 = sub_D1C7C(0x49u);
      __uint64_t v20 = sub_DDEFC();
      __uint64_t v21 = (const char *)sub_D1CB0(4);
      if (v19)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed to calculate average FPS %p %p\n", v20, 73, v21, "AVE_FPS", "Add", 512, "ret == 0", a1, a2);
LABEL_37:
        __uint64_t v24 = sub_DDEFC();
        uint64_t v32 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to calculate average FPS %p %p", v24, 73, v32);
        goto LABEL_42;
      }
    }
    else
    {
      if (!sub_CBC20(a1))
      {
        uint64_t v22 = 0;
        goto LABEL_43;
      }
      if (!sub_D1C38(0x49u, 4)) {
        goto LABEL_42;
      }
      int v23 = sub_D1C7C(0x49u);
      __uint64_t v20 = sub_DDEFC();
      __uint64_t v21 = (const char *)sub_D1CB0(4);
      if (v23)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed to calculate average FPS %p %p\n", v20, 73, v21, "AVE_FPS", "Add", 516, "ret == 0", a1, a2);
        goto LABEL_37;
      }
    }
    syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to calculate average FPS %p %p", v20, 73, v21);
    goto LABEL_42;
  }
  if (sub_D1C38(0x49u, 4))
  {
    int v12 = sub_D1C7C(0x49u);
    __uint64_t v13 = sub_DDEFC();
    __uint64_t v14 = (const char *)sub_D1CB0(4);
    if (v12)
    {
      printf("%lld %d AVE %s: %s::%s:%d %s | wrong state %p %p\n", v13, 73, v14, "AVE_FPS", "Add", 488, "m_psTime != __null", a1, a2);
      __uint64_t v15 = sub_DDEFC();
      int v30 = sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong state %p %p", v15, 73, v30);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong state %p %p", v13, 73, v14);
    }
  }
  uint64_t v22 = 4294966285;
LABEL_43:
  if (sub_D1C38(0x49u, 7))
  {
    int v25 = sub_D1C7C(0x49u);
    __uint64_t v26 = sub_DDEFC();
    int v27 = (const char *)sub_D1CB0(7);
    if (v25)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %p %d\n", v26, 73, v27, "AVE_FPS", "Add", a1, a2, v22);
      __uint64_t v26 = sub_DDEFC();
      sub_D1CB0(7);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Exit %p %p %d", v26, 73);
  }
  return v22;
}

double sub_CC57C(uint64_t a1)
{
  return *(double *)(a1 + 40);
}

double sub_CC584(uint64_t a1)
{
  uint64_t v1 = 56;
  if (*(int *)(a1 + 32) > 0) {
    uint64_t v1 = 48;
  }
  return *(double *)(a1 + v1);
}

uint64_t sub_CC5A0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_CC5A8(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result && a2)
  {
    if (a3)
    {
      int v10 = a4;
      double v11 = (unsigned char *)result;
      uint64_t v12 = *a3;
      LODWORD(v12) = sub_DD92C((char *)(a2 + v12), (int)a4 - (int)v12, "%lld,", a4, a5, a6, a7, a8, v11[8] - *v11) + v12;
      LODWORD(v12) = sub_DD92C((char *)(a2 + (int)v12), v10 - (int)v12, "%lld,", v13, v14, v15, v16, v17, v11[520] - v11[16])+ v12;
      LODWORD(v12) = sub_DD92C((char *)(a2 + (int)v12), v10 - (int)v12, "%lld,", v18, v19, v20, v21, v22, v11[24] - v11[16])+ v12;
      LODWORD(v12) = sub_DD92C((char *)(a2 + (int)v12), v10 - (int)v12, "%lld,", v23, v24, v25, v26, v27, v11[40] - v11[24])+ v12;
      LODWORD(v12) = sub_DD92C((char *)(a2 + (int)v12), v10 - (int)v12, "%lld,", v28, v29, v30, v31, v32, v11[240] - v11[32])+ v12;
      LODWORD(v12) = sub_DD92C((char *)(a2 + (int)v12), v10 - (int)v12, "%lld,", v33, v34, v35, v36, v37, v11[464] - v11[248])+ v12;
      LODWORD(v12) = sub_DD92C((char *)(a2 + (int)v12), v10 - (int)v12, "%lld,", v38, v39, v40, v41, v42, v11[208] - v11[192])+ v12;
      LODWORD(v12) = sub_DD92C((char *)(a2 + (int)v12), v10 - (int)v12, "%lld,", v43, v44, v45, v46, v47, v11[408] - v11[200])+ v12;
      LODWORD(v12) = sub_DD92C((char *)(a2 + (int)v12), v10 - (int)v12, "%lld,", v48, v49, v50, v51, v52, v11[496] - v11[416])+ v12;
      LODWORD(v12) = sub_DD92C((char *)(a2 + (int)v12), v10 - (int)v12, "%lld,", v53, v54, v55, v56, v57, v11[232] - v11[216])+ v12;
      LODWORD(v12) = sub_DD92C((char *)(a2 + (int)v12), v10 - (int)v12, "%lld,", v58, v59, v60, v61, v62, v11[432] - v11[224])+ v12;
      uint64_t result = sub_DD92C((char *)(a2 + (int)v12), v10 - (int)v12, "%lld,", v63, v64, v65, v66, v67, v11[512] - v11[440]);
      *a3 = result + v12;
    }
  }
  return result;
}

uint64_t sub_CC7B4(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result && a2 && a3)
  {
    int v10 = a4;
    uint64_t v11 = result;
    uint64_t v12 = 0;
    int v13 = *a3;
    do
    {
      uint64_t result = sub_DD92C((char *)(a2 + v13), v10 - v13, "%lld,", a4, a5, a6, a7, a8, *(void *)(v11 + v12));
      int v13 = *a3 + result;
      *a3 = v13;
      v12 += 8;
    }
    while (v12 != 544);
  }
  return result;
}

uint64_t sub_CC848(const void *a1, const void *a2, const void *a3, int a4, int a5)
{
  if (sub_D1C38(0x3Au, 7))
  {
    int v8 = sub_D1C7C(0x3Au);
    __uint64_t v9 = sub_DDEFC();
    int v10 = (const char *)sub_D1CB0(7);
    if (v8)
    {
      printf("%lld %d AVE %s: %s Enter %p %p %p %d %d\n", v9, 58, v10, "AVE_FwStats_PrintAll", a1, a2, a3, a4, a5);
      __uint64_t v9 = sub_DDEFC();
      sub_D1CB0(7);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %p %p %d %d", v9, 58);
  }
  if (a1 && a2)
  {
    if (a3) {
      operator new[]();
    }
    uint64_t v15 = 4294966288;
  }
  else
  {
    if (sub_D1C38(0x3Au, 4))
    {
      int v11 = sub_D1C7C(0x3Au);
      __uint64_t v12 = sub_DDEFC();
      int v13 = (const char *)sub_D1CB0(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d %d\n", v12, 58, v13, "AVE_FwStats_PrintAll", 198, "(psFwStats != __null) && (pEUMap != __null)", a1, a2, a3, a4, a5);
        __uint64_t v14 = sub_DDEFC();
        uint64_t v21 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d %d", v14, 58, v21, "AVE_FwStats_PrintAll");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d %d", v12, 58, v13, "AVE_FwStats_PrintAll");
      }
    }
    uint64_t v15 = 4294966295;
  }
  if (sub_D1C38(0x3Au, 7))
  {
    int v16 = sub_D1C7C(0x3Au);
    __uint64_t v17 = sub_DDEFC();
    uint64_t v18 = (const char *)sub_D1CB0(7);
    if (v16)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %p %d %d %d\n", v17, 58, v18, "AVE_FwStats_PrintAll", a1, a2, a3, a4, a5, v15);
      __uint64_t v19 = sub_DDEFC();
      uint64_t v22 = sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %p %d %d %d", v19, 58, v22);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %p %d %d %d", v17, 58, v18);
    }
  }
  return v15;
}

uint64_t sub_CD13C(const void *a1, FILE *a2, int a3)
{
  if (sub_D1C38(0x3Au, 7))
  {
    int v6 = sub_D1C7C(0x3Au);
    __uint64_t v7 = sub_DDEFC();
    int v8 = (const char *)sub_D1CB0(7);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p %p %d\n", v7, 58, v8, "AVE_MCTFStats_PrintAll", a1, a2, a3);
      __uint64_t v7 = sub_DDEFC();
      sub_D1CB0(7);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %p %d", v7);
  }
  if (a1)
  {
    if (a2)
    {
      if (!a3) {
        fwrite("Frame#, FrameDiff, Fn_SetLrmeDiff, HW_LrmeDiff, Fn_SetLrrcDiff, HW_LrrcDiff, Fn_SetPipeDiff, HW_PipeDiff, Fn_PipeDoneDiff, FrameQIn, Fn_SetLrmeStart, HW_LrmeStart, Fn_SetLRMEDone, Fn_SetLrrcStart, HW_LrrcStart, Fn_SetLRRCDone, Fn_SetPipeStart, HW_PipeStart, Fn_SetPipeDone, HW_LrmeDone, HW_LrrcDone, HW_PipeDone, Fn_PipeDoneStart, Fn_PipeDoneEnd, LrmeStatsDone, LrrcStatsDone, PipeStatsDone, FrameOut\n", 0x191uLL, 1uLL, a2);
      }
      operator new[]();
    }
    uint64_t v13 = 4294966288;
  }
  else
  {
    if (sub_D1C38(0x3Au, 4))
    {
      int v9 = sub_D1C7C(0x3Au);
      __uint64_t v10 = sub_DDEFC();
      int v11 = (const char *)sub_D1CB0(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", v10, 58, v11, "AVE_MCTFStats_PrintAll", 384, "pMctfStats != __null", 0, a2, a3);
        __uint64_t v12 = sub_DDEFC();
        __uint64_t v19 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v12, 58, v19);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v10, 58, v11);
      }
    }
    uint64_t v13 = 4294966295;
  }
  if (sub_D1C38(0x3Au, 7))
  {
    int v14 = sub_D1C7C(0x3Au);
    __uint64_t v15 = sub_DDEFC();
    int v16 = (const char *)sub_D1CB0(7);
    if (v14)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %d %d\n", v15, 58, v16, "AVE_MCTFStats_PrintAll", a1, a2, a3, v13);
      __uint64_t v17 = sub_DDEFC();
      sub_D1CB0(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %d %d", v17);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %d %d", v15);
    }
  }
  return v13;
}

uint64_t sub_CD6C0(CFDictionaryRef theDict, _OWORD *a2)
{
  __int16 v28 = 0;
  unsigned __int16 v27 = 0;
  if (!theDict || !a2)
  {
    if (sub_D1C38(0xCCu, 4))
    {
      int v9 = sub_D1C7C(0xCCu);
      __uint64_t v10 = sub_DDEFC();
      int v11 = (const char *)sub_D1CB0(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p\n", v10, 204, v11, "AVE_HEVC_ST_RPS_Retrieve", 28, "pDict != __null && pInfo != __null", theDict, a2);
        __uint64_t v10 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p", v10, 204);
    }
    return 4294966295;
  }
  *((_DWORD *)a2 + 88) = 0;
  a2[20] = 0u;
  a2[21] = 0u;
  a2[18] = 0u;
  a2[19] = 0u;
  a2[16] = 0u;
  a2[17] = 0u;
  a2[14] = 0u;
  a2[15] = 0u;
  a2[12] = 0u;
  a2[13] = 0u;
  a2[10] = 0u;
  a2[11] = 0u;
  a2[8] = 0u;
  a2[9] = 0u;
  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  if (sub_C38FC(theDict, @"InterRefPicSetPredictionFlag", (BOOL *)&v28 + 1))
  {
    if (*(unsigned char *)a2)
    {
LABEL_5:
      sub_C43BC(theDict, @"DeltaIdxMinus1", (_DWORD *)a2 + 1);
      if (!sub_C3BAC(theDict, @"DeltaRPSSign", &v28)) {
        *((unsigned char *)a2 + 8) = (_BYTE)v28 != 0;
      }
      sub_C43BC(theDict, @"AbsDeltaRPSMinus1", (_DWORD *)a2 + 3);
      if (!sub_C410C(theDict, @"UsedByCurrPicFlag", &v27))
      {
        int8x16_t v4 = (int8x16_t)vdupq_n_s32(v27);
        v5.i64[0] = 0x101010101010101;
        v5.i64[1] = 0x101010101010101;
        a2[1] = vbicq_s8(v5, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v4, (int8x16_t)xmmword_14DE70)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v4, (int8x16_t)xmmword_14DE80))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v4, (int8x16_t)xmmword_14DE90)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v4, (int8x16_t)xmmword_14DEA0)))));
      }
      uint64_t result = sub_C410C(theDict, @"UsedDeltaFlag", &v27);
      if (!result)
      {
        int8x16_t v7 = (int8x16_t)vdupq_n_s32(v27);
        v8.i64[0] = 0x101010101010101;
        v8.i64[1] = 0x101010101010101;
        a2[2] = vbicq_s8(v8, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v7, (int8x16_t)xmmword_14DE70)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v7, (int8x16_t)xmmword_14DE80))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v7, (int8x16_t)xmmword_14DE90)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v7, (int8x16_t)xmmword_14DEA0)))));
      }
      return result;
    }
  }
  else
  {
    int v12 = HIBYTE(v28);
    *(unsigned char *)a2 = HIBYTE(v28);
    if (v12) {
      goto LABEL_5;
    }
  }
  sub_C43BC(theDict, @"NumNegativePics", (_DWORD *)a2 + 12);
  uint64_t result = sub_C43BC(theDict, @"NumPositivePics", (_DWORD *)a2 + 13);
  if (!*((_DWORD *)a2 + 12))
  {
LABEL_24:
    if (!*((_DWORD *)a2 + 13)) {
      return result;
    }
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"DeltaPOCS1Minus1");
    if (Value)
    {
      CFArrayRef v21 = Value;
      int Count = CFArrayGetCount(Value);
      if (Count < 1)
      {
LABEL_30:
        uint64_t result = sub_C410C(theDict, @"UsedByCurrPicS1Flag", &v27);
        if (!result)
        {
          int8x16_t v25 = (int8x16_t)vdupq_n_s32(v27);
          v26.i64[0] = 0x101010101010101;
          v26.i64[1] = 0x101010101010101;
          *(int8x16_t *)((char *)a2 + 168) = vbicq_s8(v26, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v25, (int8x16_t)xmmword_14DE70)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v25, (int8x16_t)xmmword_14DE80))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v25, (int8x16_t)xmmword_14DE90)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v25, (int8x16_t)xmmword_14DEA0)))));
        }
      }
      else
      {
        CFIndex v23 = 0;
        uint64_t v24 = Count;
        while (1)
        {
          uint64_t result = sub_C261C(v21, v23, &v27);
          if (result) {
            break;
          }
          *((_DWORD *)a2 + v23++ + 26) = (__int16)v27;
          if (v24 == v23) {
            goto LABEL_30;
          }
        }
      }
      return result;
    }
    return 4294966288;
  }
  CFArrayRef v13 = (const __CFArray *)CFDictionaryGetValue(theDict, @"DeltaPOCS0Minus1");
  if (!v13) {
    return 4294966288;
  }
  CFArrayRef v14 = v13;
  int v15 = CFArrayGetCount(v13);
  if (v15 < 1)
  {
LABEL_22:
    uint64_t result = sub_C410C(theDict, @"UsedByCurrPicS0Flag", &v27);
    if (!result)
    {
      int8x16_t v18 = (int8x16_t)vdupq_n_s32(v27);
      v19.i64[0] = 0x101010101010101;
      v19.i64[1] = 0x101010101010101;
      *(int8x16_t *)((char *)a2 + 88) = vbicq_s8(v19, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v18, (int8x16_t)xmmword_14DE70)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v18, (int8x16_t)xmmword_14DE80))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v18, (int8x16_t)xmmword_14DE90)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v18, (int8x16_t)xmmword_14DEA0)))));
    }
    goto LABEL_24;
  }
  CFIndex v16 = 0;
  uint64_t v17 = v15;
  while (1)
  {
    uint64_t result = sub_C261C(v14, v16, &v27);
    if (result) {
      return result;
    }
    *((_WORD *)a2 + v16++ + 28) = v27;
    if (v17 == v16) {
      goto LABEL_22;
    }
  }
}

uint64_t sub_CDB70(const __CFArray *a1, _OWORD *a2, int *a3)
{
  int8x16_t v4 = a2;
  if (a1 && a2 && a3 && *a3 > 0)
  {
    bzero(a2, 356 * *a3);
    int Count = CFArrayGetCount(a1);
    if (*a3 >= Count) {
      uint64_t v7 = Count;
    }
    else {
      uint64_t v7 = *a3;
    }
    *a3 = 0;
    if ((int)v7 < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v8 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v8);
        if (!ValueAtIndex) {
          break;
        }
        uint64_t result = sub_CD6C0(ValueAtIndex, v4);
        if (result) {
          return result;
        }
        ++*a3;
        ++v8;
        int8x16_t v4 = (_OWORD *)((char *)v4 + 356);
        if (v7 == v8) {
          return 0;
        }
      }
      return 4294966288;
    }
  }
  else
  {
    if (sub_D1C38(0xCCu, 4))
    {
      int v11 = sub_D1C7C(0xCCu);
      __uint64_t v12 = sub_DDEFC();
      CFArrayRef v13 = (const char *)sub_D1CB0(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v12, 204, v13, "AVE_HEVC_ST_RPS_RetrieveArray", 326, "pArray != __null && pInfo != __null && pNum != __null && *pNum > 0", a1, v4, a3);
        __uint64_t v14 = sub_DDEFC();
        int v15 = sub_D1CB0(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v14, 204, v15);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v12, 204, v13);
      }
    }
    return 4294966295;
  }
}

uint64_t sub_CDD20(CFDictionaryRef theDict, uint64_t a2)
{
  if (theDict && a2)
  {
    *(_OWORD *)(a2 + 320) = 0u;
    *(_OWORD *)(a2 + 336) = 0u;
    *(_OWORD *)(a2 + 288) = 0u;
    *(_OWORD *)(a2 + 304) = 0u;
    *(_OWORD *)(a2 + 256) = 0u;
    *(_OWORD *)(a2 + 272) = 0u;
    *(_OWORD *)(a2 + 224) = 0u;
    *(_OWORD *)(a2 + 240) = 0u;
    *(_OWORD *)(a2 + 192) = 0u;
    *(_OWORD *)(a2 + 208) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 348) = 0u;
    sub_C38FC(theDict, @"ShortTermRefPicSetSPSFlag", (BOOL *)a2);
    if (*(unsigned char *)a2)
    {
      return sub_C43BC(theDict, @"ShortTermRefPicSetIdx", (_DWORD *)(a2 + 4));
    }
    else
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"RPSData");
      if (Value)
      {
        return sub_CD6C0(Value, (_OWORD *)(a2 + 8));
      }
      else
      {
        return 4294966288;
      }
    }
  }
  else
  {
    if (sub_D1C38(0xCCu, 4))
    {
      int v5 = sub_D1C7C(0xCCu);
      __uint64_t v6 = sub_DDEFC();
      uint64_t v7 = (const char *)sub_D1CB0(4);
      if (v5)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p\n", v6, 204, v7, "AVE_HEVC_Slice_ST_RPS_Retrieve", 492, "pDict != __null && pInfo != __null", theDict, (const void *)a2);
        __uint64_t v6 = sub_DDEFC();
        sub_D1CB0(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p", v6, 204);
    }
    return 4294966295;
  }
}

uint64_t sub_CDF18(__CVBuffer *a1, _DWORD *a2, FILE *a3)
{
  size_t extraRowsOnBottom = 0;
  size_t extraColumnsOnRight = 0;
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferGetExtendedPixels(a1, 0, &extraColumnsOnRight, 0, &extraRowsOnBottom);
  int v24 = a2[1];
  int WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  int v7 = extraColumnsOnRight;
  int HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  int v9 = extraRowsOnBottom + HeightOfPlane;
  int BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  if (a2[3])
  {
    int v11 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
    int v21 = WidthOfPlane;
    int v12 = v7;
    int v13 = ((int)extraColumnsOnRight >> ((int)a2[4] >> 1)) + v11;
    int v14 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
    int v15 = ((int)extraRowsOnBottom >> ((int)a2[5] >> 1)) + v14;
    LODWORD(v17) = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
    CFIndex v16 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
    int v22 = 2 * v13;
    int v7 = v12;
    int WidthOfPlane = v21;
    uint64_t v17 = (int)v17;
  }
  else
  {
    int v22 = 0;
    int v15 = 0;
    uint64_t v17 = 0;
    CFIndex v16 = 0;
  }
  if (v9 >= 1)
  {
    size_t v18 = (v7 + WidthOfPlane) << (v24 == 10);
    do
    {
      fwrite(BaseAddressOfPlane, 1uLL, v18, a3);
      BaseAddressOfPlane += BytesPerRowOfPlane;
      --v9;
    }
    while (v9);
  }
  if (a2[3]) {
    BOOL v19 = v15 < 1;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    do
    {
      fwrite(v16, 1uLL, v22 << (v24 == 10), a3);
      v16 += v17;
      --v15;
    }
    while (v15);
  }
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  return 0;
}

uint64_t sub_CE114(__CVBuffer *a1, _DWORD *a2)
{
  size_t extraColumnsOnRight = 0;
  size_t extraRowsOnBottom = 0;
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferGetExtendedPixels(a1, 0, &extraColumnsOnRight, 0, &extraRowsOnBottom);
  int v4 = a2[1];
  int v6 = v4 + 7;
  BOOL v5 = v4 < -7;
  int v7 = v4 + 14;
  if (!v5) {
    int v7 = v6;
  }
  int v8 = v7 >> 3;
  int WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  int v10 = extraColumnsOnRight + WidthOfPlane;
  int HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  int v12 = extraRowsOnBottom + HeightOfPlane;
  CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  if (a2[3])
  {
    int v13 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
    int v14 = ((int)extraColumnsOnRight >> ((int)a2[4] >> 1)) + v13;
    int v15 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
    int v16 = ((int)extraRowsOnBottom >> ((int)a2[5] >> 1)) + v15;
    CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
    CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
    int v17 = v16;
  }
  else
  {
    int v14 = 0;
    int v17 = 0;
  }
  if (v10 * v8 * v12 + 2 * v8 * v14 * v17) {
    operator new[]();
  }
  if (sub_D1C38(3u, 4))
  {
    int v18 = sub_D1C7C(3u);
    __uint64_t v19 = sub_DDEFC();
    uint64_t v20 = (const char *)sub_D1CB0(4);
    if (v18)
    {
      printf("%lld %d AVE %s: %s:%d %s | frame size can not be zero\n", v19, 3, v20, "AVE_PixelBuf_DumpPacked", 147, "frameSize != 0");
      __uint64_t v21 = sub_DDEFC();
      CFIndex v23 = (const char *)sub_D1CB0(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | frame size can not be zero", v21, 3, v23, "AVE_PixelBuf_DumpPacked", 147, "frameSize != 0");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | frame size can not be zero", v19, 3, v20, "AVE_PixelBuf_DumpPacked", 147, "frameSize != 0");
    }
  }
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  return 4294966295;
}