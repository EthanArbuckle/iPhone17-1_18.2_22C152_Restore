uint64_t *sub_3B08(uint64_t *result, _DWORD *a2, int a3, int a4)
{
  uint64_t v4;

  v4 = (*result + a3 - 1) & -(uint64_t)a3;
  *a2 = (*result + *a2 - v4) & -a4;
  *result = v4;
  return result;
}

unsigned char *sub_3B40(unsigned char *result, char *a2, int a3)
{
  if (a3 >= 1)
  {
    do
    {
      char v3 = *a2++;
      *result++ = v3;
      --a3;
    }
    while (a3);
  }
  return result;
}

uint64_t sub_3B5C(uint64_t a1, int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 0;
  }
  int v8 = a4;
  uint64_t v11 = sub_4D5BC(a3, a4, " in %s", a4, a5, a6, a7, a8, a1);
  uint64_t v17 = v11;
  if (a2) {
    return sub_4D5BC(&a3[(int)v11], v8 - (int)v11, ":%d", v12, v13, v14, v15, v16, a2) + v11;
  }
  return v17;
}

void *sub_3BE0(void *result)
{
  if (!result) {
    sub_596FC();
  }
  *result = result;
  result[1] = result;
  return result;
}

BOOL sub_3C00(void *a1)
{
  if (!a1) {
    sub_59728();
  }
  if (!*a1) {
    sub_59754();
  }
  v1 = (void *)a1[1];
  if (!v1) {
    sub_59780();
  }
  return (void *)*a1 == a1 || v1 == a1;
}

void *sub_3C40(void *result)
{
  if (!result) {
    sub_597AC();
  }
  if (!*result) {
    sub_597D8();
  }
  v1 = (void *)result[1];
  if (!v1) {
    sub_59804();
  }
  result[1] = v1[1];
  *(void *)v1[1] = result;
  void *v1 = v1;
  v1[1] = v1;
  return result;
}

uint64_t sub_3C88(uint64_t a1)
{
  if (!a1) {
    sub_59830();
  }
  return *(void *)a1;
}

uint64_t sub_3CA8(uint64_t a1)
{
  if (!a1) {
    sub_5985C();
  }
  return *(void *)(a1 + 8);
}

uint64_t *sub_3CC8(uint64_t *result)
{
  if (!result) {
    sub_59888();
  }
  uint64_t v1 = *result;
  if (!*result) {
    sub_598B4();
  }
  uint64_t v2 = result[1];
  if (!v2) {
    sub_598E0();
  }
  *(void *)(v1 + 8) = v2;
  *(void *)result[1] = v1;
  *result = (uint64_t)result;
  result[1] = (uint64_t)result;
  return result;
}

uint64_t sub_3D0C(void *a1)
{
  if (!a1) {
    sub_5990C();
  }
  if (sub_3C00(a1)) {
    return 0;
  }
  else {
    return a1[1];
  }
}

uint64_t sub_3D48(void *a1)
{
  if (!a1) {
    sub_59938();
  }
  if (sub_3C00(a1)) {
    return 0;
  }
  else {
    return *a1;
  }
}

void *sub_3D84(void *result, void *a2)
{
  if (!result) {
    sub_59964();
  }
  if (!a2) {
    sub_59990();
  }
  if (!*result) {
    sub_599BC();
  }
  if (!result[1]) {
    sub_599E8();
  }
  *a2 = *result;
  a2[1] = result;
  *(void *)(*result + 8) = a2;
  *result = a2;
  return result;
}

uint64_t sub_3DD0(uint64_t result)
{
  if (!result) {
    sub_59A14();
  }
  uint64_t v1 = *(void **)result;
  if (!*(void *)result) {
    sub_59A40();
  }
  if (!*(void *)(result + 8)) {
    sub_59A6C();
  }
  *(void *)result = *v1;
  *(void *)(*v1 + 8) = result;
  void *v1 = v1;
  v1[1] = v1;
  return result;
}

uint64_t sub_3E18(uint64_t a1)
{
  if (!a1) {
    sub_59A98();
  }
  return *(void *)(a1 + 8);
}

uint64_t sub_3E38(uint64_t result)
{
  if (!result) {
    sub_59AC4();
  }
  return result;
}

uint64_t sub_3E50(uint64_t a1)
{
  if (!a1) {
    sub_59AF0();
  }
  return *(void *)a1;
}

uint64_t sub_3E70(uint64_t result)
{
  if (!result) {
    sub_59B1C();
  }
  return result;
}

uint64_t sub_3E88(uint64_t a1, void *a2, uint64_t a3, int a4, int a5)
{
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  bzero(a2, 16 * a4);
  sub_3BE0((void *)a1);
  *(void *)(a1 + 56) = a3;
  *(_DWORD *)(a1 + 64) = a5 * a4;
  *(_DWORD *)(a1 + 68) = a4;
  *(_DWORD *)(a1 + 72) = a5;
  *(void *)(a1 + 80) = a2;
  sub_3BE0((void *)(a1 + 88));
  sub_3BE0((void *)(a1 + 104));
  if (a4 >= 1)
  {
    uint64_t v10 = 0;
    do
    {
      sub_3D84((void *)(a1 + 88), (void *)(*(void *)(a1 + 80) + v10));
      v10 += 16;
    }
    while (16 * a4 != v10);
  }
  *(_DWORD *)(a1 + 124) = a4;
  return 0;
}

uint64_t sub_3F50(int a1, int a2, unsigned int a3, uint64_t *a4)
{
  uint64_t result = 4294966295;
  if (a1 >= 1 && a2 >= 1)
  {
    unsigned int v6 = a3;
    if (a3 <= 0x40)
    {
      if (a3)
      {
        if ((a3 & (a3 - 1)) != 0 || !a4) {
          return result;
        }
      }
      else
      {
        if (!a4) {
          return result;
        }
        unsigned int v6 = 64;
      }
      *a4 = 0;
      int v8 = (v6 - 1 + a2) & -v6;
      int v9 = (v6 - 1 + v8) & -v6;
      int v10 = v9 * a1;
      if (0x7FFFFFFF / v9 <= a1 || v10 == 0) {
        return 4294966281;
      }
      uint64_t v12 = malloc_type_malloc(0x80uLL, 0x10300408F93010DuLL);
      if (v12)
      {
        uint64_t v13 = (uint64_t)v12;
        uint64_t v14 = malloc_type_malloc(16 * a1, 0x20040A4A59CD2uLL);
        if (v14)
        {
          uint64_t v15 = v14;
          signed int v16 = v6 - 1 + v10;
          uint64_t v17 = malloc_type_malloc(v16, 0x100004077774924uLL);
          if (v17)
          {
            v18 = v17;
            sub_3E88(v13, v15, ((unint64_t)v17 + v6 - 1) & -(uint64_t)v6, a1, v8);
            uint64_t result = 0;
            *(void *)(v13 + 16) = v13;
            *(void *)(v13 + 24) = v15;
            *(_DWORD *)(v13 + 40) = 128;
            *(_DWORD *)(v13 + 44) = 16 * a1;
            *(void *)(v13 + 32) = v18;
            *(_DWORD *)(v13 + 48) = v16;
            *a4 = v13;
            return result;
          }
          free((void *)v13);
          v19 = v15;
        }
        else
        {
          v19 = (void *)v13;
        }
        free(v19);
      }
      return 4294966293;
    }
  }
  return result;
}

uint64_t sub_40DC(uint64_t a1, int a2, int a3, int a4, unsigned int a5, uint64_t *a6)
{
  uint64_t v16 = a1;
  int v15 = a2;
  uint64_t result = 4294966295;
  if (a2 >= 1 && a3 >= 1 && a4 >= 1 && a5 <= 0x40)
  {
    if (a5)
    {
      if ((a5 & (a5 - 1)) != 0 || !a6) {
        return result;
      }
    }
    else
    {
      if (!a6) {
        return result;
      }
      a5 = 64;
    }
    *a6 = 0;
    int v9 = (a4 + a5 - 1) & -a5;
    sub_3B08(&v16, &v15, a5, a5);
    if (v15 / v9 >= a3) {
      int v10 = a3;
    }
    else {
      int v10 = v15 / v9;
    }
    uint64_t v11 = malloc_type_malloc(0x80uLL, 0x10300408F93010DuLL);
    if (v11)
    {
      uint64_t v12 = (uint64_t)v11;
      uint64_t v13 = malloc_type_malloc(16 * v10, 0x20040A4A59CD2uLL);
      if (v13)
      {
        uint64_t v14 = v13;
        sub_3E88(v12, v13, v16, v10, v9);
        uint64_t result = 0;
        *(void *)(v12 + 16) = v12;
        *(void *)(v12 + 24) = v14;
        *(_DWORD *)(v12 + 40) = 128;
        *(_DWORD *)(v12 + 44) = 16 * v10;
        *a6 = v12;
        return result;
      }
      free((void *)v12);
    }
    return 4294966293;
  }
  return result;
}

uint64_t sub_421C(void *a1)
{
  if (!a1) {
    return 4294966295;
  }
  if (!sub_3C00(a1 + 13)) {
    return 4294966280;
  }
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    free(v2);
    a1[4] = 0;
  }
  char v3 = (void *)a1[3];
  if (v3)
  {
    free(v3);
    a1[3] = 0;
  }
  uint64_t result = a1[2];
  if (result)
  {
    free((void *)result);
    return 0;
  }
  return result;
}

BOOL sub_4290(uint64_t a1, unint64_t a2)
{
  BOOL result = 0;
  if (a1)
  {
    unint64_t v2 = *(void *)(a1 + 56);
    if (v2 <= a2 && v2 + *(int *)(a1 + 64) > a2) {
      return 1;
    }
  }
  return result;
}

uint64_t sub_42C0(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t result = 4294966295;
  if (a1 && a2)
  {
    *a2 = 0;
    uint64_t v7 = sub_3D0C((void *)(a1 + 88));
    if (v7)
    {
      int v8 = (void *)v7;
      sub_3C40((void *)(a1 + 88));
      sub_3D84((void *)(a1 + 104), v8);
      int v9 = *(_DWORD *)(a1 + 72);
      *a2 = *(void *)(a1 + 56) + (int)(v9 * (((unint64_t)v8 - *(void *)(a1 + 80)) >> 4));
      if (a3) {
        *a3 = v9;
      }
      uint64_t result = 0;
      --*(_DWORD *)(a1 + 124);
    }
    else
    {
      return 4294966289;
    }
  }
  return result;
}

uint64_t sub_4370(uint64_t a1, unint64_t a2)
{
  if (!a1) {
    return 4294966295;
  }
  unint64_t v3 = *(void *)(a1 + 56);
  if (a2 < v3 || v3 + *(int *)(a1 + 64) <= a2) {
    return 4294966295;
  }
  v4 = (uint64_t *)(*(void *)(a1 + 80) + ((uint64_t)(((a2 - v3) / *(int *)(a1 + 72)) << 32) >> 28));
  sub_3CC8(v4);
  sub_3D84((void *)(a1 + 88), v4);
  uint64_t result = 0;
  ++*(_DWORD *)(a1 + 124);
  return result;
}

BOOL sub_43FC(uint64_t a1)
{
  return !a1 || sub_3C00((void *)(a1 + 104));
}

BOOL sub_4410(BOOL result)
{
  if (result) {
    return !sub_3C00((void *)(result + 88));
  }
  return result;
}

uint64_t sub_443C(uint64_t a1, int a2, void *a3)
{
  if (!a1) {
    return 4294966295;
  }
  uint64_t result = 4294966295;
  if (a3)
  {
    if (*(_DWORD *)(a1 + 68) > a2)
    {
      uint64_t result = 0;
      *a3 = *(void *)(a1 + 56) + *(int *)(a1 + 72) * (uint64_t)a2;
    }
  }
  return result;
}

uint64_t sub_4478(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t result = 4294966295;
  if (a1)
  {
    if (a3)
    {
      unint64_t v5 = *(void *)(a1 + 56);
      if (a2 >= v5 && v5 + *(int *)(a1 + 64) > a2)
      {
        uint64_t result = 0;
        *a3 = (a2 - v5) / *(int *)(a1 + 72);
      }
    }
  }
  return result;
}

uint64_t sub_44B8(uint64_t a1, unsigned int a2, int a3)
{
  if (a2 > 0xB) {
    return 0;
  }
  else {
    return *(void *)(a1 + 96 * (a3 > 0) + 8 * a2 + 48);
  }
}

uint64_t sub_44E4(int a1, void *a2)
{
  if (sub_44EF8(0x3Du, 7))
  {
    int v4 = sub_44F3C(0x3Du);
    __uint64_t v5 = sub_4F1D8();
    unsigned int v6 = (const char *)sub_44F70(7);
    if (v4)
    {
      printf("%lld %d AVE %s: %s Enter %d %p\n", v5, 61, v6, "AVE_Dump_Create", a1, a2);
      __uint64_t v7 = sub_4F1D8();
      v21 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: %s Enter %d %p", v7, 61, v21, "AVE_Dump_Create", a1, a2);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %d %p", v5, 61, v6, "AVE_Dump_Create", a1, a2);
    }
  }
  if (a2)
  {
    int v8 = malloc_type_malloc(0xF0uLL, 0x1020040B865D711uLL);
    if (v8)
    {
      uint64_t v9 = 0;
      v8[13] = 0u;
      v8[14] = 0u;
      v8[11] = 0u;
      v8[12] = 0u;
      v8[9] = 0u;
      v8[10] = 0u;
      v8[7] = 0u;
      v8[8] = 0u;
      v8[5] = 0u;
      v8[6] = 0u;
      v8[3] = 0u;
      v8[4] = 0u;
      v8[1] = 0u;
      v8[2] = 0u;
      *int v8 = 0u;
      *(_DWORD *)int v8 = a1;
      *a2 = v8;
    }
    else
    {
      if (sub_44EF8(0x3Du, 4))
      {
        int v13 = sub_44F3C(0x3Du);
        __uint64_t v14 = sub_4F1D8();
        int v15 = (const char *)sub_44F70(4);
        if (v13)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create dump %d %p\n", v14, 61, v15, "AVE_Dump_Create", 89, "pDump != __null", a1, a2);
          __uint64_t v14 = sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create dump %d %p", v14, 61);
      }
      uint64_t v9 = 4294966293;
    }
  }
  else
  {
    if (sub_44EF8(0x3Du, 4))
    {
      int v10 = sub_44F3C(0x3Du);
      __uint64_t v11 = sub_4F1D8();
      uint64_t v12 = (const char *)sub_44F70(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %d %p\n", v11, 61, v12, "AVE_Dump_Create", 85, "ppDump != __null", a1, 0);
        __uint64_t v11 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %d %p", v11, 61);
    }
    uint64_t v9 = 4294966295;
  }
  if (sub_44EF8(0x3Du, 7))
  {
    int v16 = sub_44F3C(0x3Du);
    __uint64_t v17 = sub_4F1D8();
    v18 = (const char *)sub_44F70(7);
    if (v16)
    {
      printf("%lld %d AVE %s: %s Exit %d %p %d\n", v17, 61, v18, "AVE_Dump_Create", a1, a2, v9);
      __uint64_t v19 = sub_4F1D8();
      sub_44F70(7);
      syslog(3, "%lld %d AVE %s: %s Exit %d %p %d", v19);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %d %p %d", v17);
    }
  }
  return v9;
}

uint64_t sub_4890(void *a1)
{
  if (sub_44EF8(0x3Du, 7))
  {
    int v2 = sub_44F3C(0x3Du);
    __uint64_t v3 = sub_4F1D8();
    int v4 = (const char *)sub_44F70(7);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", v3, 61, v4, "AVE_Dump_Destroy", a1);
      __uint64_t v5 = sub_4F1D8();
      __uint64_t v11 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 61, v11, "AVE_Dump_Destroy", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", v3, 61, v4, "AVE_Dump_Destroy", a1);
    }
  }
  if (a1) {
    free(a1);
  }
  if (sub_44EF8(0x3Du, 7))
  {
    int v6 = sub_44F3C(0x3Du);
    __uint64_t v7 = sub_4F1D8();
    int v8 = (const char *)sub_44F70(7);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v7, 61, v8, "AVE_Dump_Destroy", 0, 0);
      __uint64_t v9 = sub_4F1D8();
      uint64_t v12 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v9, 61, v12, "AVE_Dump_Destroy", 0, 0);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v7, 61, v8, "AVE_Dump_Destroy", 0, 0);
    }
  }
  return 0;
}

uint64_t sub_4A08(_DWORD *a1, unsigned int a2, int a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a6;
  memset(v38, 0, sizeof(v38));
  int v13 = sub_4D5BC((char *)v38, 128, "%d-%s-%dx%d-%s-%d", a4, (uint64_t)a5, a6, a7, a8, *a1);
  int v19 = v13;
  if ((a3 & 0x80000000) == 0) {
    int v19 = sub_4D5BC((char *)v38 + v13, 128 - v13, "-MP%d", v14, v15, v16, v17, v18, a3) + v13;
  }
  if (a1[3] == 1) {
    v19 += sub_4D5BC((char *)v38 + v19, 128 - v19, "-%s-%d", v14, v15, v16, v17, v18, (char)off_90050[a1[4]]);
  }
  char v20 = pthread_self();
  rand();
  int v26 = sub_4D5BC((char *)v38 + v19, 128 - v19, "-%lu-%d-%s", v21, v22, v23, v24, v25, v20);
  if (a2 == 1)
  {
    int v32 = a1[3];
    uint64_t v33 = a4;
    if (v32 == 1) {
      v34 = &off_8CB00[a1[4]];
    }
    else {
      v34 = &off_8CB00[v32 + 1];
    }
    v35 = v34 + 1;
  }
  else
  {
    if ((a2 & 0xFFFFFFFD) == 1 && (a1[2] & (1 << a2)) != 0) {
      v35 = &off_8CAB8[9 * a2 + 2];
    }
    else {
      v35 = &off_8CAB8[9 * a2 + 1];
    }
    uint64_t v33 = a4;
  }
  sub_4D5BC((char *)v38 + v19 + (uint64_t)v26, 128 - (v19 + v26), ".%s", v27, v28, v29, v30, v31, (char)*v35);
  return sub_4EFE8(v33, 0, (uint64_t)v38, a5, v8);
}

uint64_t sub_4C98(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  *(_OWORD *)__filename = 0u;
  long long v35 = 0u;
  if ((int)a1[9] < 1) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  __uint64_t v11 = a1 + 12;
  do
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v32 = v9;
    do
    {
      if ((a1[1] & (1 << v13)) != 0 && !*(void *)&v11[2 * v13])
      {
        if ((int)a1[9] <= 1) {
          int v14 = -1;
        }
        else {
          int v14 = v9;
        }
        uint64_t v10 = sub_4A08(a1, v13, v14, a2, __filename, 256, a7, a8);
        BOOL v15 = (a1[2] & (1 << v13)) != 0 && v12 == 27;
        uint64_t v16 = 5;
        if (v15) {
          uint64_t v16 = 6;
        }
        uint64_t v17 = (&off_8CAB8[v12])[v16];
        uint64_t v18 = fopen(__filename, v17);
        *(void *)&v11[2 * v13] = v18;
        if (v18)
        {
          if (sub_44EF8(0x3Du, 6))
          {
            int v19 = sub_44F3C(0x3Du);
            __uint64_t v20 = sub_4F1D8();
            uint64_t v21 = (const char *)sub_44F70(6);
            if (v19)
            {
              printf("%lld %d AVE %s: %s:%d open dump file %p %d | %d %d %s %s\n", v20, 61, v21, "AVE_Dump_OpenFiles", 262, a1, *a1, v9, v13, __filename, v17);
              __uint64_t v22 = sub_4F1D8();
              uint64_t v30 = sub_44F70(6);
              __uint64_t v28 = v22;
            }
            else
            {
              uint64_t v30 = (void *)v21;
              __uint64_t v28 = v20;
            }
            syslog(3, "%lld %d AVE %s: %s:%d open dump file %p %d | %d %d %s %s", v28, 61, v30, "AVE_Dump_OpenFiles");
          }
        }
        else if (sub_44EF8(0x3Du, 4))
        {
          int v23 = sub_44F3C(0x3Du);
          __uint64_t v24 = sub_4F1D8();
          uint64_t v25 = (const char *)sub_44F70(4);
          if (v23)
          {
            printf("%lld %d AVE %s: %s:%d fail to open dump file %p %d | %d %d %s %s\n", v24, 61, v25, "AVE_Dump_OpenFiles", 257, a1, *a1, v9, v13, __filename, v17);
            __uint64_t v26 = sub_4F1D8();
            uint64_t v31 = sub_44F70(4);
            __uint64_t v29 = v26;
          }
          else
          {
            uint64_t v31 = (void *)v25;
            __uint64_t v29 = v24;
          }
          syslog(3, "%lld %d AVE %s: %s:%d fail to open dump file %p %d | %d %d %s %s", v29, 61, v31, "AVE_Dump_OpenFiles");
        }
      }
      ++v13;
      v12 += 9;
    }
    while (v12 != 108);
    ++v9;
    v11 += 24;
  }
  while (v32 + 1 < (int)a1[9]);
  return v10;
}

uint64_t sub_5000(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t result = 0;
  uint64_t v4 = a1 + 48;
  char v5 = 1;
  do
  {
    char v6 = v5;
    __uint64_t v7 = (FILE **)(v4 + 96 * v2);
    for (uint64_t i = -2; i != 10; ++i)
    {
      if (*v7) {
        BOOL v9 = i > 8;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9 && ((0x1C1u >> i) & 1) != 0)
      {
        if (fprintf(*v7, off_8CE18[i]) <= 0) {
          uint64_t result = 4294965296;
        }
        else {
          uint64_t result = 0;
        }
      }
      ++v7;
    }
    char v5 = 0;
    uint64_t v2 = 1;
  }
  while ((v6 & 1) != 0);
  return result;
}

uint64_t sub_50B8(uint64_t a1, const void *a2, int a3, int a4, int a5, int a6, void *a7, int a8, int a9, int a10, int a11)
{
  if (sub_44EF8(0x3Du, 7))
  {
    int v19 = sub_44F3C(0x3Du);
    __uint64_t v20 = sub_4F1D8();
    uint64_t v21 = (const char *)sub_44F70(7);
    if (v19)
    {
      printf("%lld %d AVE %s: %s Enter %p %p %d %d 0x%x 0x%x %p %d %d %d %d\n", v20, 61, v21, "AVE_Dump_Init", (const void *)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
      __uint64_t v40 = sub_4F1D8();
      __uint64_t v22 = sub_44F70(7);
      syslog(3, "%lld %d AVE %s: %s Enter %p %p %d %d 0x%x 0x%x %p %d %d %d %d", v40, 61, v22, "AVE_Dump_Init", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p %p %d %d 0x%x 0x%x %p %d %d %d %d", v20, 61, v21, "AVE_Dump_Init", a1);
    }
  }
  if (a1 && a7)
  {
    *(_DWORD *)(a1 + 4) = a5;
    *(_DWORD *)(a1 + 8) = a6;
    *(_DWORD *)(a1 + 12) = a3;
    *(_DWORD *)(a1 + 16) = a4;
    *(void *)(a1 + 20) = *a7;
    *(_DWORD *)(a1 + 28) = a9;
    *(_DWORD *)(a1 + 32) = a10;
    *(_DWORD *)(a1 + 36) = a8;
    *(_DWORD *)(a1 + 40) = a11;
    uint64_t v23 = sub_4C98((_DWORD *)a1, (uint64_t)a2, v13, v14, v15, v16, v17, v18);
    if (!v23)
    {
      sub_5000(a1);
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  if (sub_44EF8(0x3Du, 4))
  {
    int v24 = sub_44F3C(0x3Du);
    __uint64_t v25 = sub_4F1D8();
    __uint64_t v26 = (const char *)sub_44F70(4);
    if (v24)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %p %d %d 0x%x 0x%x %p %d %d %d %d\n", v25, 61, v26, "AVE_Dump_Init", 457, "pDump != __null && pResolution != __null", (const void *)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
      __uint64_t v41 = sub_4F1D8();
      long long v39 = sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %p %d %d 0x%x 0x%x %p %d %d %d %d", v41, 61, v39, "AVE_Dump_Init", 457, "pDump != __null && pResolution != __null", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %p %d %d 0x%x 0x%x %p %d %d %d %d", v25, 61, v26, "AVE_Dump_Init", 457, "pDump != __null && pResolution != __null", a1);
    }
  }
  uint64_t v23 = 4294966295;
  if (a1)
  {
LABEL_14:
    uint64_t v27 = 0;
    char v28 = 1;
    do
    {
      uint64_t v29 = 0;
      char v30 = v28;
      uint64_t v31 = a1 + 48 + 96 * v27;
      do
      {
        uint64_t v32 = *(FILE **)(v31 + v29);
        if (v32)
        {
          fclose(v32);
          *(void *)(v31 + v29) = 0;
        }
        v29 += 8;
      }
      while (v29 != 96);
      char v28 = 0;
      uint64_t v27 = 1;
    }
    while ((v30 & 1) != 0);
  }
LABEL_20:
  if (sub_44EF8(0x3Du, 7))
  {
    int v33 = sub_44F3C(0x3Du);
    __uint64_t v34 = sub_4F1D8();
    long long v35 = (const char *)sub_44F70(7);
    if (v33)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %d %d 0x%x 0x%x %p %d %d %d %d %d\n", v34, 61, v35, "AVE_Dump_Init", (const void *)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v23);
      __uint64_t v36 = sub_4F1D8();
      long long v37 = sub_44F70(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %d %d 0x%x 0x%x %p %d %d %d %d %d", v36, 61, v37, "AVE_Dump_Init", a1, a2);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %d %d 0x%x 0x%x %p %d %d %d %d %d", v34, 61, v35, "AVE_Dump_Init", a1, a2);
    }
  }
  return v23;
}

uint64_t sub_55B4(const void *a1)
{
  if (sub_44EF8(0x3Du, 7))
  {
    int v2 = sub_44F3C(0x3Du);
    __uint64_t v3 = sub_4F1D8();
    uint64_t v4 = (const char *)sub_44F70(7);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", v3, 61, v4, "AVE_Dump_Uninit", a1);
      __uint64_t v5 = sub_4F1D8();
      uint64_t v17 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 61, v17, "AVE_Dump_Uninit", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", v3, 61, v4, "AVE_Dump_Uninit", a1);
    }
  }
  if (a1)
  {
    uint64_t v6 = 0;
    char v7 = 1;
    do
    {
      uint64_t v8 = 0;
      char v9 = v7;
      uint64_t v10 = (uint64_t)a1 + 96 * v6 + 48;
      do
      {
        __uint64_t v11 = *(FILE **)(v10 + v8);
        if (v11)
        {
          fclose(v11);
          *(void *)(v10 + v8) = 0;
        }
        v8 += 8;
      }
      while (v8 != 96);
      char v7 = 0;
      uint64_t v6 = 1;
    }
    while ((v9 & 1) != 0);
  }
  if (sub_44EF8(0x3Du, 7))
  {
    int v12 = sub_44F3C(0x3Du);
    __uint64_t v13 = sub_4F1D8();
    uint64_t v14 = (const char *)sub_44F70(7);
    if (v12)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v13, 61, v14, "AVE_Dump_Uninit", a1, 0);
      __uint64_t v15 = sub_4F1D8();
      uint64_t v18 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v15, 61, v18, "AVE_Dump_Uninit", a1, 0);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v13, 61, v14, "AVE_Dump_Uninit", a1, 0);
    }
  }
  return 0;
}

uint64_t sub_5770(_DWORD *a1, int a2, __CVBuffer *a3)
{
  if (sub_44EF8(0x3Du, 8))
  {
    int v6 = sub_44F3C(0x3Du);
    __uint64_t v7 = sub_4F1D8();
    uint64_t v8 = (const char *)sub_44F70(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %p\n", v7, 61, v8, "AVE_Dump_WriteInput", a1, a2, a3);
      __uint64_t v7 = sub_4F1D8();
      sub_44F70(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %p", v7);
  }
  if (a1)
  {
    char v9 = *(FILE **)&a1[24 * (a2 > 0) + 12];
    if (v9)
    {
      if (a3) {
        uint64_t v10 = sub_42500(a3, a1[2] & 1, v9);
      }
      else {
        uint64_t v10 = 4294966287;
      }
    }
    else
    {
      uint64_t v10 = 4294966288;
    }
  }
  else
  {
    if (sub_44EF8(0x3Du, 4))
    {
      int v11 = sub_44F3C(0x3Du);
      __uint64_t v12 = sub_4F1D8();
      __uint64_t v13 = (const char *)sub_44F70(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p\n", v12, 61, v13, "AVE_Dump_WriteInput", 533, "pDump != __null", 0, a2, a3);
        __uint64_t v14 = sub_4F1D8();
        __uint64_t v20 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v14, 61, v20);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v12, 61, v13);
      }
    }
    uint64_t v10 = 4294966295;
  }
  if (sub_44EF8(0x3Du, 8))
  {
    int v15 = sub_44F3C(0x3Du);
    __uint64_t v16 = sub_4F1D8();
    uint64_t v17 = (const char *)sub_44F70(8);
    if (v15)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %p %d\n", v16, 61, v17, "AVE_Dump_WriteInput", a1, a2, a3, v10);
      __uint64_t v18 = sub_4F1D8();
      sub_44F70(8);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d", v18, 61);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d", v16, 61);
    }
  }
  return v10;
}

uint64_t sub_5A50(void *a1, int a2, const void *a3, int a4)
{
  if (sub_44EF8(0x3Du, 8))
  {
    int v8 = sub_44F3C(0x3Du);
    __uint64_t v9 = sub_4F1D8();
    uint64_t v10 = (const char *)sub_44F70(8);
    if (v8)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %p %d\n", v9, 61, v10, "AVE_Dump_WriteOutput", a1, a2, a3, a4);
      __uint64_t v9 = sub_4F1D8();
      sub_44F70(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %p %d", v9, 61);
  }
  if (a1)
  {
    int v11 = (FILE *)a1[12 * (a2 > 0) + 7];
    if (v11)
    {
      uint64_t v12 = 4294966287;
      if (a3 && a4 >= 1)
      {
        int v13 = fwrite(a3, 1uLL, a4, v11);
        uint64_t v12 = v13 == a4 ? 0 : 4294965296;
        if (sub_44EF8(0x3Du, 8))
        {
          int v14 = sub_44F3C(0x3Du);
          __uint64_t v15 = sub_4F1D8();
          __uint64_t v16 = (const char *)sub_44F70(8);
          if (v14)
          {
            printf("%lld %d AVE %s: %s:%d %p %d %p %d %d\n", v15, 61, v16, "AVE_Dump_WriteOutput", 596, a1, a2, a3, a4, v13);
            __uint64_t v17 = sub_4F1D8();
            uint64_t v27 = sub_44F70(8);
            syslog(3, "%lld %d AVE %s: %s:%d %p %d %p %d %d", v17, 61, v27);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %p %d %p %d %d", v15, 61, v16);
          }
        }
      }
    }
    else
    {
      uint64_t v12 = 4294966288;
    }
  }
  else
  {
    if (sub_44EF8(0x3Du, 4))
    {
      int v18 = sub_44F3C(0x3Du);
      __uint64_t v19 = sub_4F1D8();
      __uint64_t v20 = (const char *)sub_44F70(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p %d\n", v19, 61, v20, "AVE_Dump_WriteOutput", 578, "pDump != __null", 0, a2, a3, a4);
        __uint64_t v21 = sub_4F1D8();
        char v28 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p %d", v21, 61, v28, "AVE_Dump_WriteOutput");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p %d", v19, 61, v20, "AVE_Dump_WriteOutput");
      }
    }
    uint64_t v12 = 4294966295;
  }
  if (sub_44EF8(0x3Du, 8))
  {
    int v22 = sub_44F3C(0x3Du);
    __uint64_t v23 = sub_4F1D8();
    int v24 = (const char *)sub_44F70(8);
    if (v22)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %p %d %d\n", v23, 61, v24, "AVE_Dump_WriteOutput", a1, a2, a3, a4, v12);
      __uint64_t v25 = sub_4F1D8();
      sub_44F70(8);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d %d", v25, 61);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d %d", v23, 61);
    }
  }
  return v12;
}

uint64_t sub_5E4C(void *a1, int a2, const void *a3, int a4)
{
  if (sub_44EF8(0x3Du, 8))
  {
    int v8 = sub_44F3C(0x3Du);
    __uint64_t v9 = sub_4F1D8();
    uint64_t v10 = (const char *)sub_44F70(8);
    if (v8)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %p %d\n", v9, 61, v10, "AVE_Dump_WriteMBStats", a1, a2, a3, a4);
      __uint64_t v9 = sub_4F1D8();
      sub_44F70(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %p %d", v9, 61);
  }
  if (a1)
  {
    int v11 = (FILE *)a1[12 * (a2 > 0) + 9];
    if (v11)
    {
      uint64_t v12 = 4294966287;
      if (a3 && a4 >= 1)
      {
        int v13 = fwrite(a3, 1uLL, a4, v11);
        uint64_t v12 = v13 == a4 ? 0 : 4294965296;
        if (sub_44EF8(0x3Du, 8))
        {
          int v14 = sub_44F3C(0x3Du);
          __uint64_t v15 = sub_4F1D8();
          __uint64_t v16 = (const char *)sub_44F70(8);
          if (v14)
          {
            printf("%lld %d AVE %s: %s:%d %p %d %p %d %d\n", v15, 61, v16, "AVE_Dump_WriteMBStats", 692, a1, a2, a3, a4, v13);
            __uint64_t v17 = sub_4F1D8();
            uint64_t v27 = sub_44F70(8);
            syslog(3, "%lld %d AVE %s: %s:%d %p %d %p %d %d", v17, 61, v27);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %p %d %p %d %d", v15, 61, v16);
          }
        }
      }
    }
    else
    {
      uint64_t v12 = 4294966288;
    }
  }
  else
  {
    if (sub_44EF8(0x3Du, 4))
    {
      int v18 = sub_44F3C(0x3Du);
      __uint64_t v19 = sub_4F1D8();
      __uint64_t v20 = (const char *)sub_44F70(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p %d\n", v19, 61, v20, "AVE_Dump_WriteMBStats", 674, "pDump != __null", 0, a2, a3, a4);
        __uint64_t v21 = sub_4F1D8();
        char v28 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p %d", v21, 61, v28, "AVE_Dump_WriteMBStats");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p %d", v19, 61, v20, "AVE_Dump_WriteMBStats");
      }
    }
    uint64_t v12 = 4294966295;
  }
  if (sub_44EF8(0x3Du, 8))
  {
    int v22 = sub_44F3C(0x3Du);
    __uint64_t v23 = sub_4F1D8();
    int v24 = (const char *)sub_44F70(8);
    if (v22)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %p %d %d\n", v23, 61, v24, "AVE_Dump_WriteMBStats", a1, a2, a3, a4, v12);
      __uint64_t v25 = sub_4F1D8();
      sub_44F70(8);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d %d", v25, 61);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d %d", v23, 61);
    }
  }
  return v12;
}

uint64_t sub_6248(void *a1, int a2, int *a3)
{
  if (sub_44EF8(0x3Du, 8))
  {
    int v6 = sub_44F3C(0x3Du);
    __uint64_t v7 = sub_4F1D8();
    int v8 = (const char *)sub_44F70(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %p\n", v7, 61, v8, "AVE_Dump_WriteHwEventTrace", a1, a2, a3);
      __uint64_t v7 = sub_4F1D8();
      sub_44F70(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %p", v7);
  }
  if (a1)
  {
    __uint64_t v9 = (FILE *)a1[12 * (a2 > 0) + 14];
    if (v9)
    {
      if (a3)
      {
        if (*a3 < 2)
        {
          uint64_t v13 = 0;
        }
        else
        {
          uint64_t v10 = (unsigned __int8 *)(a3 + 5);
          uint64_t v11 = 1;
          do
          {
            int v12 = fprintf(v9, "%6d, %d, %d, %6d, %6d, 0x%x, 0x%x, 0x%x, 0x%x\n", v11++, v10[1], *v10, v10[2], v10[3], *((_DWORD *)v10 + 1), *((_DWORD *)v10 + 2), *((_DWORD *)v10 + 3), *((_DWORD *)v10 + 4));
            v10 += 20;
          }
          while (v11 < *a3);
          if (v12 <= 0) {
            uint64_t v13 = 4294965296;
          }
          else {
            uint64_t v13 = 0;
          }
        }
      }
      else
      {
        uint64_t v13 = 4294966287;
      }
    }
    else
    {
      uint64_t v13 = 4294966288;
    }
  }
  else
  {
    if (sub_44EF8(0x3Du, 4))
    {
      int v14 = sub_44F3C(0x3Du);
      __uint64_t v15 = sub_4F1D8();
      __uint64_t v16 = (const char *)sub_44F70(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p\n", v15, 61, v16, "AVE_Dump_WriteHwEventTrace", 720, "pDump != __null", 0, a2, a3);
        __uint64_t v17 = sub_4F1D8();
        __uint64_t v23 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v17, 61, v23);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v15, 61, v16);
      }
    }
    uint64_t v13 = 4294966295;
  }
  if (sub_44EF8(0x3Du, 8))
  {
    int v18 = sub_44F3C(0x3Du);
    __uint64_t v19 = sub_4F1D8();
    __uint64_t v20 = (const char *)sub_44F70(8);
    if (v18)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %p %d\n", v19, 61, v20, "AVE_Dump_WriteHwEventTrace", a1, a2, a3, v13);
      __uint64_t v21 = sub_4F1D8();
      sub_44F70(8);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d", v21, 61);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d", v19, 61);
    }
  }
  return v13;
}

uint64_t sub_6590(void *a1, int a2, int a3, float *a4)
{
  if (sub_44EF8(0x3Du, 8))
  {
    int v8 = sub_44F3C(0x3Du);
    __uint64_t v9 = sub_4F1D8();
    uint64_t v10 = (const char *)sub_44F70(8);
    if (v8)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %d %p\n", v9, 61, v10, "AVE_Dump_WriteVQMetrics", a1, a2, a3, a4);
      __uint64_t v9 = sub_4F1D8();
      sub_44F70(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %d %p", v9, 61);
  }
  if (a1)
  {
    uint64_t v11 = (FILE *)a1[12 * (a2 > 0) + 15];
    if (v11)
    {
      if (a4)
      {
        if (fprintf(v11, "%d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f\n", a3, a4[4], a4[5], a4[6], *a4, a4[1], a4[2]) <= 0) {
          uint64_t v12 = 4294965296;
        }
        else {
          uint64_t v12 = 0;
        }
      }
      else
      {
        uint64_t v12 = 4294966287;
      }
    }
    else
    {
      uint64_t v12 = 4294966288;
    }
  }
  else
  {
    if (sub_44EF8(0x3Du, 4))
    {
      int v13 = sub_44F3C(0x3Du);
      __uint64_t v14 = sub_4F1D8();
      __uint64_t v15 = (const char *)sub_44F70(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p\n", v14, 61, v15, "AVE_Dump_WriteVQMetrics", 772, "pDump != __null", 0, a2, a3, a4);
        __uint64_t v16 = sub_4F1D8();
        int v22 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p", v16, 61, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p", v14, 61, v15);
      }
    }
    uint64_t v12 = 4294966295;
  }
  if (sub_44EF8(0x3Du, 8))
  {
    int v17 = sub_44F3C(0x3Du);
    __uint64_t v18 = sub_4F1D8();
    __uint64_t v19 = (const char *)sub_44F70(8);
    if (v17)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %d %p %d\n", v18, 61, v19, "AVE_Dump_WriteVQMetrics", a1, a2, a3, a4, v12);
      __uint64_t v20 = sub_4F1D8();
      __uint64_t v23 = sub_44F70(8);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %d %p %d", v20, 61, v23);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %d %p %d", v18, 61, v19);
    }
  }
  return v12;
}

uint64_t sub_68E4(void *a1, int a2, int a3, double *a4)
{
  if (sub_44EF8(0x3Du, 8))
  {
    int v8 = sub_44F3C(0x3Du);
    __uint64_t v9 = sub_4F1D8();
    uint64_t v10 = (const char *)sub_44F70(8);
    if (v8)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %d %p\n", v9, 61, v10, "AVE_Dump_WriteFPS", a1, a2, a3, a4);
      __uint64_t v9 = sub_4F1D8();
      sub_44F70(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %d %p", v9, 61);
  }
  if (a1)
  {
    uint64_t v11 = (FILE *)a1[12 * (a2 > 0) + 16];
    if (v11)
    {
      if (a4)
      {
        if (fprintf(v11, "%d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f\n", a3, a4[2], a4[1], *a4, a4[5], a4[4], a4[3], a4[8], a4[7], a4[6]) <= 0)uint64_t v12 = 4294965296; {
        else
        }
          uint64_t v12 = 0;
      }
      else
      {
        uint64_t v12 = 4294966287;
      }
    }
    else
    {
      uint64_t v12 = 4294966288;
    }
  }
  else
  {
    if (sub_44EF8(0x3Du, 4))
    {
      int v13 = sub_44F3C(0x3Du);
      __uint64_t v14 = sub_4F1D8();
      __uint64_t v15 = (const char *)sub_44F70(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p\n", v14, 61, v15, "AVE_Dump_WriteFPS", 820, "pDump != __null", 0, a2, a3, a4);
        __uint64_t v16 = sub_4F1D8();
        int v22 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p", v16, 61, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p", v14, 61, v15);
      }
    }
    uint64_t v12 = 4294966295;
  }
  if (sub_44EF8(0x3Du, 8))
  {
    int v17 = sub_44F3C(0x3Du);
    __uint64_t v18 = sub_4F1D8();
    __uint64_t v19 = (const char *)sub_44F70(8);
    if (v17)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %d %p %d\n", v18, 61, v19, "AVE_Dump_WriteFPS", a1, a2, a3, a4, v12);
      __uint64_t v20 = sub_4F1D8();
      __uint64_t v23 = sub_44F70(8);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %d %p %d", v20, 61, v23);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %d %p %d", v18, 61, v19);
    }
  }
  return v12;
}

uint64_t sub_6C2C(uint64_t a1, __CVBuffer *a2)
{
  if (sub_44EF8(0x3Du, 8))
  {
    int v4 = sub_44F3C(0x3Du);
    __uint64_t v5 = sub_4F1D8();
    int v6 = (const char *)sub_44F70(8);
    if (v4)
    {
      printf("%lld %d AVE %s: %s Enter %p %p\n", v5, 61, v6, "AVE_Dump_WriteRecon", (const void *)a1, a2);
      __uint64_t v7 = sub_4F1D8();
      int v17 = (const char *)sub_44F70(8);
      syslog(3, "%lld %d AVE %s: %s Enter %p %p", v7, 61, v17, "AVE_Dump_WriteRecon", (const void *)a1, a2);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p %p", v5, 61, v6, "AVE_Dump_WriteRecon", (const void *)a1, a2);
    }
  }
  if (a1)
  {
    int v8 = *(FILE **)(a1 + 136);
    if (v8)
    {
      if (a2) {
        uint64_t v9 = sub_42500(a2, (*(_DWORD *)(a1 + 8) >> 11) & 1, v8);
      }
      else {
        uint64_t v9 = 4294966287;
      }
    }
    else
    {
      uint64_t v9 = 4294966288;
    }
  }
  else
  {
    if (sub_44EF8(0x3Du, 4))
    {
      int v10 = sub_44F3C(0x3Du);
      __uint64_t v11 = sub_4F1D8();
      uint64_t v12 = (const char *)sub_44F70(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %p\n", v11, 61, v12, "AVE_Dump_WriteRecon", 864, "pDump != __null", 0, a2);
        __uint64_t v11 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %p", v11, 61);
    }
    uint64_t v9 = 4294966295;
  }
  if (sub_44EF8(0x3Du, 8))
  {
    int v13 = sub_44F3C(0x3Du);
    __uint64_t v14 = sub_4F1D8();
    __uint64_t v15 = (const char *)sub_44F70(8);
    if (v13)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %d\n", v14, 61, v15, "AVE_Dump_WriteRecon", (const void *)a1, a2, v9);
      __uint64_t v14 = sub_4F1D8();
      sub_44F70(8);
    }
    syslog(3, "%lld %d AVE %s: %s Exit %p %p %d", v14);
  }
  return v9;
}

uint64_t sub_6ECC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (sub_44EF8(0x3Cu, 7))
  {
    int v6 = sub_44F3C(0x3Cu);
    __uint64_t v7 = sub_4F1D8();
    int v8 = (const char *)sub_44F70(7);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %lld\n", v7, 60, v8, "AVE_TimeStats_AddEndTime", (const void *)a1, a2, a3);
      __uint64_t v7 = sub_4F1D8();
      sub_44F70(7);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %lld", v7);
  }
  if (!a1 || a2 > 6 || a3 < 0)
  {
    if (sub_44EF8(0x3Cu, 4))
    {
      int v11 = sub_44F3C(0x3Cu);
      __uint64_t v12 = sub_4F1D8();
      int v13 = (const char *)sub_44F70(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %lld\n", v12, 60, v13, "AVE_TimeStats_AddEndTime", 269, "pTS != __null && 0 <= pos && pos < AVE_TimeStats_Pos_Max && ts >= 0", (const void *)a1, a2, a3);
        __uint64_t v14 = sub_4F1D8();
        int v24 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %lld", v14, 60, v24);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %lld", v12, 60, v13);
      }
    }
    uint64_t v10 = 4294966295;
  }
  else
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 136));
    uint64_t v9 = *(void *)(a1 + 8);
    if (v9)
    {
      if (a2 == 5) {
        *(void *)(v9 + 16 * (*(_DWORD *)(a1 + 16) % *(_DWORD *)(a1 + 4)) + 8) = a3;
      }
      uint64_t v10 = 0;
      *(void *)(a1 + 16 * a2 + 32) = a3;
    }
    else
    {
      if (sub_44EF8(0x3Cu, 4))
      {
        int v15 = sub_44F3C(0x3Cu);
        __uint64_t v16 = sub_4F1D8();
        int v17 = (const char *)sub_44F70(4);
        if (v15)
        {
          printf("%lld %d AVE %s: %s:%d %s | wrong state %p %d %lld\n", v16, 60, v17, "AVE_TimeStats_AddEndTime", 274, "pTS->psTP != __null", (const void *)a1, a2, a3);
          __uint64_t v18 = sub_4F1D8();
          __uint64_t v25 = sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | wrong state %p %d %lld", v18, 60, v25);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | wrong state %p %d %lld", v16, 60, v17);
        }
      }
      uint64_t v10 = 4294966285;
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 136));
  }
  if (sub_44EF8(0x3Cu, 7))
  {
    int v19 = sub_44F3C(0x3Cu);
    __uint64_t v20 = sub_4F1D8();
    __uint64_t v21 = (const char *)sub_44F70(7);
    if (v19)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %lld %d\n", v20, 60, v21, "AVE_TimeStats_AddEndTime", (const void *)a1, a2, a3, v10);
      __uint64_t v22 = sub_4F1D8();
      sub_44F70(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %lld %d", v22, 60);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %lld %d", v20, 60);
    }
  }
  return v10;
}

char *sub_72A0(int a1)
{
  if (a1 >= 31) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = (char *)&unk_8CE60 + 64 * (uint64_t)a1;
  }
  if (!*((void *)result + 2)) {
    sub_59B48();
  }
  return result;
}

char *sub_72D8(int a1)
{
  uint64_t v1 = 0;
  while (1)
  {
    int v2 = (char *)&unk_8CE60 + v1;
    if (*(_DWORD *)((char *)&unk_8CE60 + v1 + 4) == a1) {
      break;
    }
    v1 += 64;
    if (v1 == 1984)
    {
      int v2 = 0;
      break;
    }
  }
  if (!*((void *)v2 + 2)) {
    sub_59B74();
  }
  return v2;
}

uint64_t sub_7328(uint64_t result, int a2)
{
  switch((int)result)
  {
    case 1:
      if (!a2) {
        return 3;
      }
      if (a2 != 1) {
LABEL_8:
      }
        sub_59BA0();
      return 4;
    case 2:
      return result;
    case 3:
      return 1;
    case 4:
      return 0;
    default:
      goto LABEL_8;
  }
}

char *sub_73A0(int a1, uint64_t a2, int a3)
{
  uint64_t result = sub_72A0(a1);
  if (result) {
    return *(char **)(*(void *)&result[8 * (int)sub_7328(a2, a3) + 24] + 16);
  }
  return result;
}

char *sub_73F0(int a1, uint64_t a2, int a3)
{
  uint64_t result = sub_72A0(a1);
  if (result) {
    return *(char **)(*(void *)&result[8 * (int)sub_7328(a2, a3) + 24] + 24);
  }
  return result;
}

uint64_t sub_7440(const void *a1, const void *a2, const void *a3)
{
  int v19 = 0;
  if (sub_44EF8(0x2Eu, 7))
  {
    int v6 = sub_44F3C(0x2Eu);
    __uint64_t v7 = sub_4F1D8();
    int v8 = (const char *)sub_44F70(7);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p %p %p\n", v7, 46, v8, "AVE_FrameStats_PrintStatFrame", a2, a1, a3);
      __uint64_t v7 = sub_4F1D8();
      sub_44F70(7);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %p %p", v7);
  }
  if (a1 && a2)
  {
    if (a3) {
      operator new[]();
    }
    uint64_t v13 = 4294966288;
  }
  else
  {
    if (sub_44EF8(0x2Eu, 4))
    {
      int v9 = sub_44F3C(0x2Eu);
      __uint64_t v10 = sub_4F1D8();
      int v11 = (const char *)sub_44F70(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v10, 46, v11, "AVE_FrameStats_PrintStatFrame", 779, "(psFrame != __null) && (psMgr != __null)", a2, a1, a3);
        __uint64_t v12 = sub_4F1D8();
        __uint64_t v18 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v12, 46, v18);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v10, 46, v11);
      }
    }
    uint64_t v13 = 4294966295;
  }
  if (sub_44EF8(0x74u, 7))
  {
    int v14 = sub_44F3C(0x74u);
    __uint64_t v15 = sub_4F1D8();
    __uint64_t v16 = (const char *)sub_44F70(7);
    if (v14)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %p %d\n", v15, 116, v16, "AVE_FrameStats_PrintStatFrame", a2, a1, a3, v13);
      __uint64_t v15 = sub_4F1D8();
      sub_44F70(7);
    }
    syslog(3, "%lld %d AVE %s: %s Exit %p %p %p %d", v15, 116);
  }
  return v13;
}

uint64_t sub_9394(char *a1, int a2)
{
  NSTemporaryDirectory();
  id v4 = objc_claimAutoreleasedReturnValue();
  char v5 = [v4 UTF8String];

  return sub_4D5BC(a1, a2, "%s", v6, v7, v8, v9, v10, v5);
}

void sub_93FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_940C()
{
}

uint64_t sub_975C(int a1, int *a2, __CFDictionary *a3)
{
  char v5 = sub_4B0D0(a1);
  if (!v5) {
    return 4294954394;
  }
  if ((*((_DWORD *)v5 + 6) & 0xFFFFFFFE) != 2) {
    return 0;
  }
  Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  uint64_t v7 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFMutableDictionaryRef v8 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  uint64_t v9 = v8;
  if (Mutable) {
    BOOL v10 = v7 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10 && v8 != 0)
  {
    int v17 = (const void *)kIOSurfacePlaneHTPCPredictionSelector;
    sub_385A8(kIOSurfacePlaneHTPCPredictionSelector, 1, v7);
    sub_385A8(v17, 1, v9);
    if (*a2 >= 1) {
      sub_385A8(kIOSurfacePlaneHorizontalPixelOffsetWithinCompressedTileArray, *a2, v7);
    }
    int v18 = a2[2];
    if (v18 >= 1) {
      sub_385A8(kIOSurfacePlaneVerticalPixelOffsetWithinCompressedTileArray, v18, v7);
    }
    int v19 = a2[4];
    if (v19 >= 1) {
      sub_385A8(kIOSurfacePlaneHorizontalPixelOffsetWithinCompressedTileArray, v19, v9);
    }
    int v20 = a2[6];
    if (v20 >= 1) {
      sub_385A8(kIOSurfacePlaneVerticalPixelOffsetWithinCompressedTileArray, v20, v9);
    }
    CFArrayAppendValue(Mutable, v7);
    CFArrayAppendValue(Mutable, v9);
    CFDictionarySetValue(a3, kCVPixelFormatPlanes, Mutable);
    CFRelease(v7);
    CFRelease(v9);
    CFRelease(Mutable);
    return 0;
  }
  if (sub_44EF8(3u, 4))
  {
    int v12 = sub_44F3C(3u);
    __uint64_t v13 = sub_4F1D8();
    int v14 = (const char *)sub_44F70(4);
    if (v12)
    {
      printf("%lld %d AVE %s: %s:%d %s | failed to create CF objects %p %p %p\n", v13, 3, v14, "AVE_PixelBufAttr_AppendIOSurface", 262, "pArray != __null && pDict0 != __null && pDict1 != __null", Mutable, v7, v9);
      __uint64_t v15 = sub_4F1D8();
      __uint64_t v21 = sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create CF objects %p %p %p", v15, 3, v21);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create CF objects %p %p %p", v13, 3, v14);
    }
  }
  return 4294954392;
}

uint64_t sub_99E8()
{
  if (CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks))
  {
    if (CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks)) {
      sub_940C();
    }
    if (sub_44EF8(3u, 4))
    {
      int v3 = sub_44F3C(3u);
      __uint64_t v4 = sub_4F1D8();
      char v5 = (const char *)sub_44F70(4);
      if (v3)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to create CFArray\n", v4, 3, v5, "AVE_PixelBufAttr_CreateDict", 469, "pTempArray != __null");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create CFArray");
    }
  }
  else if (sub_44EF8(3u, 4))
  {
    int v0 = sub_44F3C(3u);
    __uint64_t v1 = sub_4F1D8();
    int v2 = (const char *)sub_44F70(4);
    if (v0)
    {
      printf("%lld %d AVE %s: %s:%d %s | failed to create CFDictionary\n", v1, 3, v2, "AVE_PixelBufAttr_CreateDict", 464, "pDict != __null");
      sub_4F1D8();
      sub_44F70(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create CFDictionary");
  }
  return 4294954392;
}

uint64_t sub_9F34(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, CVPixelBufferPoolRef *poolOut)
{
  uint64_t v10 = sub_99E8();
  if (v10)
  {
    uint64_t v11 = v10;
    if (sub_44EF8(3u, 4))
    {
      int v12 = sub_44F3C(3u);
      __uint64_t v13 = sub_4F1D8();
      int v14 = (const char *)sub_44F70(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to create pixel buffer attributes %d\n", v13, 3, v14, "AVE_ImgBuf_CreatePool", 606, "rc == noErr", v11);
        __uint64_t v13 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create pixel buffer attributes %d", v13);
    }
  }
  else
  {
    uint64_t v11 = CVPixelBufferPoolCreate(0, 0, 0, poolOut);
    if (v11)
    {
      if (sub_44EF8(3u, 4))
      {
        int v15 = sub_44F3C(3u);
        __uint64_t v16 = sub_4F1D8();
        int v17 = (const char *)sub_44F70(4);
        if (v15)
        {
          printf("%lld %d AVE %s: %s:%d %s | failed to create a pixel buffer pool %d\n", v16, 3, v17, "AVE_ImgBuf_CreatePool", 610, "cvrc == kCVReturnSuccess", v11);
          __uint64_t v16 = sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create a pixel buffer pool %d", v16);
      }
      return 4294954392;
    }
  }
  return v11;
}

uint64_t sub_A1DC(__CVBuffer *a1, __CVBuffer *a2)
{
  int PlaneCount = CVPixelBufferGetPlaneCount(a1);
  if (PlaneCount >= 1)
  {
    size_t v5 = 0;
    uint64_t v6 = PlaneCount;
    do
    {
      int HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, v5);
      IOSurface = CVPixelBufferGetIOSurface(a1);
      BaseAddressOfPlane = (char *)IOSurfaceGetBaseAddressOfPlane(IOSurface, v5);
      uint64_t v10 = CVPixelBufferGetIOSurface(a2);
      uint64_t v11 = (char *)IOSurfaceGetBaseAddressOfPlane(v10, v5);
      unsigned int BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, v5);
      unsigned int v13 = CVPixelBufferGetBytesPerRowOfPlane(a2, v5);
      if (HeightOfPlane)
      {
        if (BytesPerRowOfPlane >= v13) {
          size_t v14 = v13;
        }
        else {
          size_t v14 = BytesPerRowOfPlane;
        }
        uint64_t v15 = v13;
        do
        {
          memcpy(v11, BaseAddressOfPlane, v14);
          BaseAddressOfPlane += BytesPerRowOfPlane;
          v11 += v15;
          --HeightOfPlane;
        }
        while (HeightOfPlane);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  return 0;
}

uint64_t sub_A2CC(__CVBuffer *a1, uint64_t a2, uint64_t a3, _DWORD *a4, char a5)
{
  size_t extraColumnsOnLeft = 0;
  size_t extraRowsOnTop = 0;
  size_t extraColumnsOnRight = 0;
  size_t extraRowsOnBottom = 0;
  IOSurface = CVPixelBufferGetIOSurface(a1);
  BaseAddressOfPlane = IOSurfaceGetBaseAddressOfPlane(IOSurface, 0);
  int v12 = BaseAddressOfPlane;
  if (!BaseAddressOfPlane || (BaseAddressOfPlane & 0x3F) != 0)
  {
    if (sub_44EF8(3u, 4))
    {
      int v14 = sub_44F3C(3u);
      __uint64_t v15 = sub_4F1D8();
      __uint64_t v16 = (const char *)sub_44F70(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | invalid buffer base address 0x%lx\n", v15, 3, v16, "AVE_ImgBuf_VerifyUncompressed", 710, "baseAddr != 0 && (baseAddr & 0x3F) == 0", v12);
        __uint64_t v15 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer base address 0x%lx", v15);
    }
    return 4294954394;
  }
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
  if (a5)
  {
    LODWORD(v13) = 0;
    goto LABEL_11;
  }
  int WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  int HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  size_t v13 = (extraColumnsOnLeft + WidthOfPlane + extraColumnsOnRight);
  size_t v19 = (extraRowsOnTop + HeightOfPlane + extraRowsOnBottom);
  if (v13 >= a2 && v19 >= a3)
  {
LABEL_11:
    unsigned int BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
    int v21 = BytesPerRowOfPlane;
    if (a4[6] == 1)
    {
      unsigned int v22 = (2 * ((2863311531u * (unint64_t)(v13 + 2)) >> 32)) & 0xFFFFFFFC;
      if (!BytesPerRowOfPlane) {
        goto LABEL_23;
      }
    }
    else
    {
      unsigned int v22 = v13 << (a4[1] != 8);
      if (!BytesPerRowOfPlane) {
        goto LABEL_23;
      }
    }
    if ((BytesPerRowOfPlane & 0x3F) != 0 || v22 > BytesPerRowOfPlane)
    {
LABEL_23:
      if (sub_44EF8(3u, 4))
      {
        int v33 = sub_44F3C(3u);
        __uint64_t v34 = sub_4F1D8();
        long long v35 = (const char *)sub_44F70(4);
        if (v33)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid buffer stride 0x%x 0x%x\n", v34, 3, v35, "AVE_ImgBuf_VerifyUncompressed", 730, "stride != 0 && (stride & 0x3F) == 0 && stride >= neededStride", v21, v22);
          __uint64_t v34 = sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer stride 0x%x 0x%x", v34);
      }
      return 4294954394;
    }
    if (a4[3])
    {
      if ((a5 & 1) != 0
        || (int v23 = CVPixelBufferGetWidthOfPlane(a1, 1uLL),
            int v24 = CVPixelBufferGetHeightOfPlane(a1, 1uLL),
            int v25 = (int)a4[4] >> 1,
            size_t v26 = (extraColumnsOnRight >> v25) + v23 + (extraColumnsOnLeft >> v25),
            int v27 = (int)a4[5] >> 1,
            size_t v28 = (extraRowsOnBottom >> v27) + v24 + (extraRowsOnTop >> v27),
            a2 >> v25 <= v26)
        && (LODWORD(v13) = v26, a3 >> v27 <= v28))
      {
        unsigned int v29 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
        unsigned int v30 = v29;
        unsigned int v31 = (2 * v13) >> ((int)a4[4] >> 1);
        if (a4[6] == 1) {
          unsigned int v32 = (2 * ((2863311531u * (unint64_t)(v31 + 2)) >> 32)) & 0xFFFFFFFC;
        }
        else {
          unsigned int v32 = v31 << (a4[1] != 8);
        }
        if (!v29 || (v29 & 0x3F) != 0 || v32 > v29)
        {
          if (sub_44EF8(3u, 4))
          {
            int v46 = sub_44F3C(3u);
            __uint64_t v47 = sub_4F1D8();
            long long v48 = (const char *)sub_44F70(4);
            if (v46)
            {
              printf("%lld %d AVE %s: %s:%d %s | invalid buffer stride 0x%x 0x%x\n", v47, 3, v48, "AVE_ImgBuf_VerifyUncompressed", 773, "stride != 0 && (stride & 0x3F) == 0 && stride >= neededStride", v30, v32);
              __uint64_t v49 = sub_4F1D8();
              sub_44F70(4);
              syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer stride 0x%x 0x%x", v49);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer stride 0x%x 0x%x", v47);
            }
          }
          return 4294954394;
        }
        return 0;
      }
      if (sub_44EF8(3u, 4))
      {
        int v50 = sub_44F3C(3u);
        __uint64_t v37 = sub_4F1D8();
        long long v38 = (const char *)sub_44F70(4);
        if (v50)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d\n", v37, 3, v38, "AVE_ImgBuf_VerifyUncompressed", 763, "(width >= (videoWidth >> ((pFmt->iSubWidthC) >> 1))) && (height >= (videoHeight >> ((pFmt->iSubHeightC) >> 1)))", v26, v28, a2, a3);
          __uint64_t v51 = sub_4F1D8();
          sub_44F70(4);
LABEL_57:
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d", v51, 3);
          return 4294954394;
        }
        uint64_t v60 = a2;
        uint64_t v61 = a3;
        size_t v58 = v26;
        size_t v59 = v28;
        v52 = "(width >= (videoWidth >> ((pFmt->iSubWidthC) >> 1))) && (height >= (videoHeight >> ((pFmt->iSubHeightC) >> 1)))";
        uint64_t v53 = 763;
        goto LABEL_52;
      }
    }
    else
    {
      if ((a5 & 1) != 0
        || (size_t v39 = CVPixelBufferGetWidthOfPlane(a1, 1uLL),
            size_t v40 = CVPixelBufferGetHeightOfPlane(a1, 1uLL),
            !(v39 | v40)))
      {
        int v41 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
        if (v41)
        {
          if (sub_44EF8(3u, 4))
          {
            int v42 = sub_44F3C(3u);
            __uint64_t v43 = sub_4F1D8();
            long long v44 = (const char *)sub_44F70(4);
            if (v42)
            {
              printf("%lld %d AVE %s: %s:%d %s | invalid buffer stride %x\n", v43, 3, v44, "AVE_ImgBuf_VerifyUncompressed", 749, "stride == 0", v41);
              __uint64_t v43 = sub_4F1D8();
              sub_44F70(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer stride %x", v43);
          }
          return 4294954394;
        }
        return 0;
      }
      if (sub_44EF8(3u, 4))
      {
        int v54 = sub_44F3C(3u);
        __uint64_t v37 = sub_4F1D8();
        long long v38 = (const char *)sub_44F70(4);
        if (v54)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d\n", v37, 3, v38, "AVE_ImgBuf_VerifyUncompressed", 743, "width == 0 && height == 0", v39, v40, a2, a3);
          __uint64_t v51 = sub_4F1D8();
          sub_44F70(4);
          goto LABEL_57;
        }
        uint64_t v60 = a2;
        uint64_t v61 = a3;
        size_t v58 = v39;
        size_t v59 = v40;
        v52 = "width == 0 && height == 0";
        uint64_t v53 = 743;
        goto LABEL_52;
      }
    }
    return 4294954394;
  }
  if (sub_44EF8(3u, 4))
  {
    int v36 = sub_44F3C(3u);
    __uint64_t v37 = sub_4F1D8();
    long long v38 = (const char *)sub_44F70(4);
    if (v36)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d\n", v37, 3, v38, "AVE_ImgBuf_VerifyUncompressed", 722, "width >= videoWidth && height >= videoHeight", v13, v19, a2, a3);
      __uint64_t v37 = sub_4F1D8();
      uint64_t v60 = a2;
      uint64_t v61 = a3;
      size_t v58 = v13;
      size_t v59 = v19;
      uint64_t v56 = 722;
      v57 = "width >= videoWidth && height >= videoHeight";
      v55 = sub_44F70(4);
LABEL_53:
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d", v37, 3, v55, "AVE_ImgBuf_VerifyUncompressed", v56, v57, v58, v59, v60, v61);
      return 4294954394;
    }
    uint64_t v60 = a2;
    uint64_t v61 = a3;
    size_t v58 = v13;
    size_t v59 = v19;
    v52 = "width >= videoWidth && height >= videoHeight";
    uint64_t v53 = 722;
LABEL_52:
    uint64_t v56 = v53;
    v57 = v52;
    v55 = (void *)v38;
    goto LABEL_53;
  }
  return 4294954394;
}

uint64_t sub_AA90(__CVBuffer *a1, _DWORD *a2)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t extraRowsOnBottom = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetIOSurface(a1);
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
  uint64_t BaseAddressOfCompressedTileHeaderRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
  uint64_t v5 = BaseAddressOfCompressedTileHeaderRegionOfPlane;
  if (!BaseAddressOfCompressedTileHeaderRegionOfPlane || (BaseAddressOfCompressedTileHeaderRegionOfPlane & 0x3F) != 0)
  {
    if (!sub_44EF8(3u, 4)) {
      return 4294954394;
    }
    int v23 = sub_44F3C(3u);
    __uint64_t v24 = sub_4F1D8();
    int v25 = (const char *)sub_44F70(4);
    if (v23)
    {
      uint64_t v26 = 813;
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer header base address 0x%lx\n", v24, 3, v25, "AVE_ImgBuf_VerifyHTPC", 813, "baseAddr != 0 && (baseAddr & 0x3F) == 0", v5);
LABEL_21:
      __uint64_t v24 = sub_4F1D8();
      uint64_t v63 = v5;
      uint64_t v61 = v26;
      size_t v59 = sub_44F70(4);
LABEL_31:
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer header base address 0x%lx", v24, 3, v59, "AVE_ImgBuf_VerifyHTPC", v61, "baseAddr != 0 && (baseAddr & 0x3F) == 0", v63);
      return 4294954394;
    }
    uint64_t v63 = v5;
    uint64_t v35 = 813;
LABEL_30:
    uint64_t v61 = v35;
    size_t v59 = (void *)v25;
    goto LABEL_31;
  }
  uint64_t BaseAddressOfCompressedTileDataRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
  unint64_t v7 = BaseAddressOfCompressedTileDataRegionOfPlane;
  if (!BaseAddressOfCompressedTileDataRegionOfPlane || (BaseAddressOfCompressedTileDataRegionOfPlane & 0x3F) != 0)
  {
    if (!sub_44EF8(3u, 4)) {
      return 4294954394;
    }
    int v27 = sub_44F3C(3u);
    __uint64_t v28 = sub_4F1D8();
    unsigned int v29 = (const char *)sub_44F70(4);
    if (v27)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx\n", v28, 3, v29, "AVE_ImgBuf_VerifyHTPC", 817, "dataBaseAddr != 0 && (dataBaseAddr & 0x3F) == 0", v7);
LABEL_25:
      __uint64_t v30 = sub_4F1D8();
      sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx", v30);
      return 4294954394;
    }
LABEL_48:
    syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx", v28);
    return 4294954394;
  }
  uint64_t BytesPerCompressedTileHeaderOfPlane = IOSurfaceGetBytesPerCompressedTileHeaderOfPlane();
  uint64_t WidthInCompressedTilesOfPlane = IOSurfaceGetWidthInCompressedTilesOfPlane();
  uint64_t HeightInCompressedTilesOfPlane = IOSurfaceGetHeightInCompressedTilesOfPlane();
  int WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  int HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  unsigned int v13 = extraColumnsOnLeft + WidthOfPlane + extraColumnsOnRight;
  unsigned int v14 = extraRowsOnTop + HeightOfPlane + extraRowsOnBottom;
  BOOL v15 = (v13 & 0xF) == 0;
  unsigned int v16 = v13 >> 4;
  if (v15) {
    int v17 = v16;
  }
  else {
    int v17 = v16 + 1;
  }
  if ((v14 & 7) != 0) {
    int v18 = (v14 >> 3) + 1;
  }
  else {
    int v18 = v14 >> 3;
  }
  if (v17 != WidthInCompressedTilesOfPlane || v18 != HeightInCompressedTilesOfPlane)
  {
    if (!sub_44EF8(3u, 4)) {
      return 4294954394;
    }
    int v31 = sub_44F3C(3u);
    __uint64_t v32 = sub_4F1D8();
    int v33 = (const char *)sub_44F70(4);
    if (v31)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d\n", v32, 3, v33, "AVE_ImgBuf_VerifyHTPC", 841, "width == neededWidth && height == neededHeight", WidthInCompressedTilesOfPlane, HeightInCompressedTilesOfPlane, v17, v18);
      __uint64_t v34 = sub_4F1D8();
      sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d", v34, 3);
      return 4294954394;
    }
    goto LABEL_49;
  }
  if ((unint64_t)(WidthInCompressedTilesOfPlane
                                      * BytesPerCompressedTileHeaderOfPlane
                                      * HeightInCompressedTilesOfPlane)
     + v5 > v7)
  {
    if (sub_44EF8(3u, 4))
    {
      int v19 = sub_44F3C(3u);
      __uint64_t v20 = sub_4F1D8();
      int v21 = (const char *)sub_44F70(4);
      if (v19)
      {
        printf("%lld %d AVE %s: %s:%d %s | invalid buffer base address/size 0x%lx 0x%lx %d %d %d\n", v20, 3, v21, "AVE_ImgBuf_VerifyHTPC", 845, "dataBaseAddr >= (baseAddr + width * height * size)", v7, v5, WidthInCompressedTilesOfPlane, HeightInCompressedTilesOfPlane, BytesPerCompressedTileHeaderOfPlane);
        __uint64_t v20 = sub_4F1D8();
        unsigned int v22 = (const char *)sub_44F70(4);
        uint64_t v66 = HeightInCompressedTilesOfPlane;
        uint64_t v67 = BytesPerCompressedTileHeaderOfPlane;
        uint64_t v64 = v5;
        uint64_t v65 = WidthInCompressedTilesOfPlane;
        unint64_t v62 = v7;
        uint64_t v60 = 845;
LABEL_17:
        size_t v58 = v22;
LABEL_57:
        syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer base address/size 0x%lx 0x%lx %d %d %d", v20, 3, v58, "AVE_ImgBuf_VerifyHTPC", v60, "dataBaseAddr >= (baseAddr + width * height * size)", v62, v64, v65, v66, v67);
        return 4294954394;
      }
      uint64_t v66 = HeightInCompressedTilesOfPlane;
      uint64_t v67 = BytesPerCompressedTileHeaderOfPlane;
      uint64_t v64 = v5;
      uint64_t v65 = WidthInCompressedTilesOfPlane;
      unint64_t v62 = v7;
      uint64_t v52 = 845;
      goto LABEL_56;
    }
    return 4294954394;
  }
  if (a2[3])
  {
    uint64_t v36 = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
    uint64_t v5 = v36;
    if (v36 && (v36 & 0x3F) == 0)
    {
      uint64_t v37 = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
      unint64_t v38 = v37;
      if (v37 && (v37 & 0x3F) == 0)
      {
        uint64_t v39 = IOSurfaceGetBytesPerCompressedTileHeaderOfPlane();
        uint64_t v40 = IOSurfaceGetWidthInCompressedTilesOfPlane();
        uint64_t v41 = IOSurfaceGetHeightInCompressedTilesOfPlane();
        int v42 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
        int v43 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
        unsigned int v44 = (extraColumnsOnLeft >> ((int)a2[4] >> 1))
            + v42
            + (extraColumnsOnRight >> ((int)a2[4] >> 1));
        unsigned int v45 = (extraRowsOnTop >> ((int)a2[5] >> 1))
            + v43
            + (extraRowsOnBottom >> ((int)a2[5] >> 1));
        BOOL v15 = (v44 & 7) == 0;
        unsigned int v46 = v44 >> 3;
        if (v15) {
          unsigned int v47 = v46;
        }
        else {
          unsigned int v47 = v46 + 1;
        }
        if ((v45 & 7) != 0) {
          int v48 = (v45 >> 3) + 1;
        }
        else {
          int v48 = v45 >> 3;
        }
        if (v47 == v40)
        {
          if ((unint64_t)(v40 * v39 * v41) + v5 > v38)
          {
            if (sub_44EF8(3u, 4))
            {
              int v49 = sub_44F3C(3u);
              __uint64_t v20 = sub_4F1D8();
              int v21 = (const char *)sub_44F70(4);
              if (v49)
              {
                printf("%lld %d AVE %s: %s:%d %s | invalid buffer base address/size 0x%lx 0x%lx %d %d %d\n", v20, 3, v21, "AVE_ImgBuf_VerifyHTPC", 893, "dataBaseAddr >= (baseAddr + width * height * size)", v38, v5, v40, v41, v39);
                __uint64_t v20 = sub_4F1D8();
                unsigned int v22 = (const char *)sub_44F70(4);
                uint64_t v66 = v41;
                uint64_t v67 = v39;
                uint64_t v64 = v5;
                uint64_t v65 = v40;
                unint64_t v62 = v38;
                uint64_t v60 = 893;
                goto LABEL_17;
              }
              uint64_t v66 = v41;
              uint64_t v67 = v39;
              uint64_t v64 = v5;
              uint64_t v65 = v40;
              unint64_t v62 = v38;
              uint64_t v52 = 893;
LABEL_56:
              uint64_t v60 = v52;
              size_t v58 = v21;
              goto LABEL_57;
            }
            return 4294954394;
          }
          return 0;
        }
        if (!sub_44EF8(3u, 4)) {
          return 4294954394;
        }
        int v55 = sub_44F3C(3u);
        __uint64_t v32 = sub_4F1D8();
        uint64_t v56 = (const char *)sub_44F70(4);
        if (v55)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d\n", v32, 3, v56, "AVE_ImgBuf_VerifyHTPC", 888, "width == neededWidth", v40, v41, v47, v48);
          __uint64_t v57 = sub_4F1D8();
          sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d", v57, 3);
          return 4294954394;
        }
LABEL_49:
        syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d", v32, 3);
        return 4294954394;
      }
      if (!sub_44EF8(3u, 4)) {
        return 4294954394;
      }
      int v53 = sub_44F3C(3u);
      __uint64_t v28 = sub_4F1D8();
      int v54 = (const char *)sub_44F70(4);
      if (v53)
      {
        printf("%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx\n", v28, 3, v54, "AVE_ImgBuf_VerifyHTPC", 858, "dataBaseAddr != 0 && (dataBaseAddr & 0x3F) == 0", v38);
        goto LABEL_25;
      }
      goto LABEL_48;
    }
    if (!sub_44EF8(3u, 4)) {
      return 4294954394;
    }
    int v51 = sub_44F3C(3u);
    __uint64_t v24 = sub_4F1D8();
    int v25 = (const char *)sub_44F70(4);
    if (v51)
    {
      uint64_t v26 = 854;
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer header base address 0x%lx\n", v24, 3, v25, "AVE_ImgBuf_VerifyHTPC", 854, "baseAddr != 0 && (baseAddr & 0x3F) == 0", v5);
      goto LABEL_21;
    }
    uint64_t v63 = v5;
    uint64_t v35 = 854;
    goto LABEL_30;
  }
  return 0;
}

uint64_t sub_B230(__CVBuffer *a1, _DWORD *a2)
{
  size_t extraColumnsOnLeft = 0;
  size_t extraRowsOnTop = 0;
  size_t extraColumnsOnRight = 0;
  size_t extraRowsOnBottom = 0;
  CVPixelBufferGetIOSurface(a1);
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
  uint64_t BaseAddressOfCompressedTileHeaderRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
  uint64_t v5 = BaseAddressOfCompressedTileHeaderRegionOfPlane;
  if (!BaseAddressOfCompressedTileHeaderRegionOfPlane || (BaseAddressOfCompressedTileHeaderRegionOfPlane & 0x3F) != 0)
  {
    if (!sub_44EF8(3u, 4)) {
      return 4294954394;
    }
    int v32 = sub_44F3C(3u);
    __uint64_t v33 = sub_4F1D8();
    __uint64_t v34 = (const char *)sub_44F70(4);
    if (v32)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer header base address 0x%lx\n", v33, 3, v34, "AVE_ImgBuf_VerifyInterchange", 933, "hdrBaseAddr != 0 && (hdrBaseAddr & 0x3F) == 0", v5);
LABEL_29:
      __uint64_t v35 = sub_4F1D8();
      sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer header base address 0x%lx", v35);
      return 4294954394;
    }
LABEL_38:
    syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer header base address 0x%lx", v33);
    return 4294954394;
  }
  uint64_t BaseAddressOfCompressedTileDataRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
  uint64_t v7 = BaseAddressOfCompressedTileDataRegionOfPlane;
  if (!BaseAddressOfCompressedTileDataRegionOfPlane || (BaseAddressOfCompressedTileDataRegionOfPlane & 0x3F) != 0)
  {
    if (!sub_44EF8(3u, 4)) {
      return 4294954394;
    }
    int v36 = sub_44F3C(3u);
    __uint64_t v37 = sub_4F1D8();
    unint64_t v38 = (const char *)sub_44F70(4);
    if (v36)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx\n", v37, 3, v38, "AVE_ImgBuf_VerifyInterchange", 937, "dataBaseAddr != 0 && (dataBaseAddr & 0x3F) == 0", v7);
LABEL_33:
      __uint64_t v39 = sub_4F1D8();
      sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx", v39);
      return 4294954394;
    }
LABEL_39:
    syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx", v37);
    return 4294954394;
  }
  int WidthInCompressedTilesOfPlane = IOSurfaceGetWidthInCompressedTilesOfPlane();
  int HeightInCompressedTilesOfPlane = IOSurfaceGetHeightInCompressedTilesOfPlane();
  int WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  int HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  unsigned int v12 = extraColumnsOnLeft + WidthOfPlane + extraColumnsOnRight;
  unsigned int v13 = extraRowsOnTop + HeightOfPlane + extraRowsOnBottom;
  BOOL v14 = (v12 & 0x1F) == 0;
  unsigned int v15 = v12 >> 5;
  if (v14) {
    int v16 = v15;
  }
  else {
    int v16 = v15 + 1;
  }
  if ((v13 & 0x1F) != 0) {
    int v17 = (v13 >> 5) + 1;
  }
  else {
    int v17 = v13 >> 5;
  }
  if (v16 != WidthInCompressedTilesOfPlane || v17 != HeightInCompressedTilesOfPlane)
  {
    if (sub_44EF8(3u, 4))
    {
      int v40 = sub_44F3C(3u);
      __uint64_t v41 = sub_4F1D8();
      int v42 = (const char *)sub_44F70(4);
      if (v40)
      {
        printf("%lld %d AVE %s: %s:%d %s | invalid Luma buffer dimension %d %d %d %d.\n", v41, 3, v42, "AVE_ImgBuf_VerifyInterchange", 957, "width == neededWidth && height == neededHeight", WidthInCompressedTilesOfPlane, HeightInCompressedTilesOfPlane, v16, v17);
        __uint64_t v41 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid Luma buffer dimension %d %d %d %d.", v41, 3);
    }
    return 4294954394;
  }
  if (!a2[3]) {
    return 0;
  }
  uint64_t v18 = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
  uint64_t v19 = v18;
  if (!v18 || (v18 & 0x3F) != 0)
  {
    if (!sub_44EF8(3u, 4)) {
      return 4294954394;
    }
    int v43 = sub_44F3C(3u);
    __uint64_t v33 = sub_4F1D8();
    unsigned int v44 = (const char *)sub_44F70(4);
    if (v43)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer header base address 0x%lx\n", v33, 3, v44, "AVE_ImgBuf_VerifyInterchange", 966, "hdrBaseAddr != 0 && (hdrBaseAddr & 0x3F) == 0", v19);
      goto LABEL_29;
    }
    goto LABEL_38;
  }
  uint64_t v20 = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
  uint64_t v21 = v20;
  if (!v20 || (v20 & 0x3F) != 0)
  {
    if (!sub_44EF8(3u, 4)) {
      return 4294954394;
    }
    int v45 = sub_44F3C(3u);
    __uint64_t v37 = sub_4F1D8();
    unsigned int v46 = (const char *)sub_44F70(4);
    if (v45)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx\n", v37, 3, v46, "AVE_ImgBuf_VerifyInterchange", 970, "dataBaseAddr != 0 && (dataBaseAddr & 0x3F) == 0", v21);
      goto LABEL_33;
    }
    goto LABEL_39;
  }
  int v22 = IOSurfaceGetWidthInCompressedTilesOfPlane();
  int v23 = IOSurfaceGetHeightInCompressedTilesOfPlane();
  int v24 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  int v25 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  unsigned int v26 = (extraColumnsOnLeft >> ((int)a2[4] >> 1))
      + v24
      + (extraColumnsOnRight >> ((int)a2[4] >> 1));
  unsigned int v27 = (extraRowsOnTop >> ((int)a2[5] >> 1))
      + v25
      + (extraRowsOnBottom >> ((int)a2[5] >> 1));
  BOOL v14 = (v26 & 0xF) == 0;
  unsigned int v28 = v26 >> 4;
  if (v14) {
    unsigned int v29 = v28;
  }
  else {
    unsigned int v29 = v28 + 1;
  }
  if ((v27 & 0xF) != 0) {
    int v30 = (v27 >> 4) + 1;
  }
  else {
    int v30 = v27 >> 4;
  }
  if (v29 == v22) {
    return 0;
  }
  if (sub_44EF8(3u, 4))
  {
    int v47 = sub_44F3C(3u);
    __uint64_t v48 = sub_4F1D8();
    int v49 = (const char *)sub_44F70(4);
    if (v47)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid Chroma buffer dimension %d %d %d %d\n", v48, 3, v49, "AVE_ImgBuf_VerifyInterchange", 996, "width == neededWidth", v22, v23, v29, v30);
      __uint64_t v48 = sub_4F1D8();
      sub_44F70(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | invalid Chroma buffer dimension %d %d %d %d", v48, 3);
  }
  return 4294954394;
}

void sub_B814()
{
  int v0 = 0;
  sub_4B104();
  operator new[]();
}

uint64_t sub_BC58(unsigned int *a1, CVPixelBufferRef *a2, CVPixelBufferPoolRef *a3)
{
  CVPixelBufferRef pixelBufferOut = 0;
  CVPixelBufferPoolRef poolOut = 0;
  if (!a3 || !*a2)
  {
    if (sub_44EF8(3u, 4))
    {
      int v14 = sub_44F3C(3u);
      __uint64_t v15 = sub_4F1D8();
      int v16 = (const char *)sub_44F70(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %p\n", v15, 3, v16, "AVE_VerifyImageBuffer", 1100, "pImgBuf != __null && ppImgBufPool != __null", *a2, a3);
        __uint64_t v15 = sub_4F1D8();
        int v16 = (const char *)sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %p", v15, 3, v16, "AVE_VerifyImageBuffer", 1100, "pImgBuf != __null && ppImgBufPool != __null", *a2, a3);
    }
    goto LABEL_60;
  }
  CVPixelBufferRetain(*a2);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(*a2);
  uint64_t v7 = (int *)sub_4B0D0(PixelFormatType);
  if (!v7)
  {
    if (sub_44EF8(3u, 4))
    {
      int v17 = sub_44F3C(3u);
      __uint64_t v18 = sub_4F1D8();
      uint64_t v19 = (const char *)sub_44F70(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | pixel format is not supported %d\n", v18, 3, v19, "AVE_VerifyImageBuffer", 1107, "pPixelFmt != __null", PixelFormatType);
        __uint64_t v18 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | pixel format is not supported %d", v18);
    }
    goto LABEL_60;
  }
  uint64_t v8 = (uint64_t)v7;
  unsigned int v9 = sub_3FCC4(*a2, v7, a1[3], *((unsigned __int8 *)a1 + 24), *((unsigned __int8 *)a1 + 52), a1[14], a1[7], a1 + 8, a1[12]);
  if (sub_44EF8(0xCu, 7))
  {
    int v10 = sub_44F3C(0xCu);
    __uint64_t v11 = sub_4F1D8();
    unsigned int v12 = (const char *)sub_44F70(7);
    if (v10)
    {
      printf("%lld %d AVE %s: PixelFormat %x | %d %d (%d %d %d) %d %d\n", v11, 12, v12, PixelFormatType, *(_DWORD *)(v8 + 4), *(_DWORD *)(v8 + 8), *(_DWORD *)(v8 + 12), *(_DWORD *)(v8 + 16), *(_DWORD *)(v8 + 20), *(_DWORD *)(v8 + 24), *(_DWORD *)(v8 + 28));
      __uint64_t v13 = sub_4F1D8();
      v78 = sub_44F70(7);
      syslog(3, "%lld %d AVE %s: PixelFormat %x | %d %d (%d %d %d) %d %d", v13, 12, v78);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: PixelFormat %x | %d %d (%d %d %d) %d %d", v11, 12, v12);
    }
  }
  if (sub_44EF8(0xCu, 7))
  {
    int v20 = sub_44F3C(0xCu);
    __uint64_t v21 = sub_4F1D8();
    int v22 = (const char *)sub_44F70(7);
    int WidthOfPlane = CVPixelBufferGetWidthOfPlane(*a2, 0);
    int HeightOfPlane = CVPixelBufferGetHeightOfPlane(*a2, 0);
    if (v20)
    {
      printf("%lld %d AVE %s: Pixel Buffer Width %d Height %d\n", v21, 12, v22, WidthOfPlane, HeightOfPlane);
      __uint64_t v25 = sub_4F1D8();
      unsigned int v26 = (const char *)sub_44F70(7);
      int v27 = CVPixelBufferGetWidthOfPlane(*a2, 0);
      int v79 = CVPixelBufferGetHeightOfPlane(*a2, 0);
      syslog(3, "%lld %d AVE %s: Pixel Buffer Width %d Height %d", v25, 12, v26, v27, v79);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Pixel Buffer Width %d Height %d", v21, 12, v22, WidthOfPlane, HeightOfPlane);
    }
  }
  if ((v9 & 2) == 0) {
    sub_B814();
  }
  unsigned int v28 = *a3;
  if (!*a3)
  {
    int v35 = CVPixelBufferGetWidthOfPlane(*a2, 0);
    int v36 = CVPixelBufferGetHeightOfPlane(*a2, 0);
    uint64_t v37 = sub_9F34(a1[3], a1[2], a1[4], a1[5], v35, v36, *a1, a1[1], PixelFormatType, &poolOut);
    if (v37)
    {
      uint64_t v38 = v37;
      if (sub_44EF8(3u, 4))
      {
        int v39 = sub_44F3C(3u);
        __uint64_t v40 = sub_4F1D8();
        __uint64_t v41 = (const char *)sub_44F70(4);
        if (v39)
        {
          printf("%lld %d AVE %s: %s:%d %s | failed to create a buffer pool %d\n", v40, 3, v41, "AVE_VerifyImageBuffer", 1135, "rc == noErr", v38);
          __uint64_t v40 = sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create a buffer pool %d", v40);
      }
      goto LABEL_61;
    }
    unsigned int v28 = *a3;
  }
  if (v28) {
    unsigned int v29 = v28;
  }
  else {
    unsigned int v29 = poolOut;
  }
  CVReturn v30 = CVPixelBufferPoolCreatePixelBuffer(0, v29, &pixelBufferOut);
  if (v30)
  {
    CVReturn v31 = v30;
    if (sub_44EF8(3u, 4))
    {
      int v32 = sub_44F3C(3u);
      __uint64_t v33 = sub_4F1D8();
      __uint64_t v34 = (const char *)sub_44F70(4);
      if (v32)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to crete pixel buffer from a pool %d\n", v33, 3, v34, "AVE_VerifyImageBuffer", 1141, "cvrc == kCVReturnSuccess", v31);
        __uint64_t v33 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to crete pixel buffer from a pool %d", v33);
    }
LABEL_60:
    uint64_t v38 = 4294954394;
LABEL_61:
    if (pixelBufferOut)
    {
      CVPixelBufferRelease(pixelBufferOut);
      CVPixelBufferRef pixelBufferOut = 0;
    }
    if (poolOut)
    {
      CFRelease(poolOut);
      CVPixelBufferPoolRef poolOut = 0;
    }
    goto LABEL_65;
  }
  sub_A1DC(*a2, pixelBufferOut);
  CVPixelBufferRelease(*a2);
  int v42 = pixelBufferOut;
  *a2 = pixelBufferOut;
  CVPixelBufferRef pixelBufferOut = 0;
  unsigned int v43 = v9 & 2;
  sub_40330(v42, v9, v8);
  if (sub_44EF8(0xCu, 7))
  {
    int v44 = sub_44F3C(0xCu);
    __uint64_t v82 = sub_4F1D8();
    int v45 = (const char *)sub_44F70(7);
    uint64_t v46 = a1[1];
    uint64_t v80 = *a1;
    uint64_t v48 = a1[2];
    uint64_t v47 = a1[3];
    uint64_t v49 = a1[4];
    uint64_t v50 = a1[5];
    uint64_t v51 = *((unsigned __int8 *)a1 + 24);
    if (v44)
    {
      printf("%lld %d AVE %s: VIB IN %s:%d | %d %d | %d %d 0x%x %d | %d %d %d %d %d || %d %d | %d %d %d %d | %d %d | %d %d | %d %d %d | %x\n", v82, 12, v45, "AVE_VerifyImageBuffer", 1165, v80, v46, v47, v48, v49, v50, v51, a1[7], a1[12], *((unsigned __int8 *)a1 + 52), a1[14], a1[26], a1[27],
        a1[32],
        a1[33],
        a1[34],
        a1[35],
        a1[30],
        a1[31],
        a1[28],
        a1[29],
        *((unsigned __int8 *)a1 + 146),
        *((unsigned __int8 *)a1 + 144),
        *((unsigned __int8 *)a1 + 145),
        v9);
      __uint64_t v83 = sub_4F1D8();
      v81 = sub_44F70(7);
      syslog(3, "%lld %d AVE %s: VIB IN %s:%d | %d %d | %d %d 0x%x %d | %d %d %d %d %d || %d %d | %d %d %d %d | %d %d | %d %d | %d %d %d | %x", v83, 12, v81, "AVE_VerifyImageBuffer", 1165, *a1, a1[1], a1[3], a1[2], a1[4], a1[5], *((unsigned __int8 *)a1 + 24));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: VIB IN %s:%d | %d %d | %d %d 0x%x %d | %d %d %d %d %d || %d %d | %d %d %d %d | %d %d | %d %d | %d %d %d | %x", v82, 12, v45, "AVE_VerifyImageBuffer", 1165, v80, v46, v47, v48, v49, v50, v51);
    }
    unsigned int v43 = v9 & 2;
  }
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t extraRowsOnBottom = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(*a2, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
  int v52 = CVPixelBufferGetWidthOfPlane(*a2, 0);
  int v53 = CVPixelBufferGetHeightOfPlane(*a2, 0);
  unsigned int v54 = extraColumnsOnLeft;
  unsigned int v55 = extraColumnsOnRight;
  unsigned int v56 = extraColumnsOnLeft + extraColumnsOnRight + v52;
  unsigned int v57 = extraRowsOnTop;
  unsigned int v58 = extraRowsOnBottom;
  unsigned int v59 = extraRowsOnTop + extraRowsOnBottom + v53;
  long long v60 = *(_OWORD *)(v8 + 28);
  long long v61 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)(a1 + 15) = *(_OWORD *)v8;
  *(_OWORD *)(a1 + 19) = v61;
  *(_OWORD *)(a1 + 22) = v60;
  a1[26] = v56;
  a1[27] = v59;
  a1[32] = v54;
  a1[33] = v55;
  a1[34] = v57;
  a1[35] = v58;
  a1[30] = CVPixelBufferGetBytesPerRowOfPlane(*a2, 0);
  unsigned int BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(*a2, 1uLL);
  a1[31] = BytesPerRowOfPlane;
  a1[28] = a1[30];
  if (*(_DWORD *)(v8 + 12)) {
    unsigned int v63 = BytesPerRowOfPlane;
  }
  else {
    unsigned int v63 = 0;
  }
  a1[29] = v63;
  char v64 = v9 & 1;
  if ((v9 & 0x10) != 0) {
    char v64 = 1;
  }
  *((unsigned char *)a1 + 146) = v64;
  *((unsigned char *)a1 + 144) = v43 >> 1;
  if ((~v9 & 0x500) != 0) {
    char v65 = 0;
  }
  else {
    char v65 = 5;
  }
  if ((~v9 & 0x50000) == 0) {
    v65 |= 0xAu;
  }
  *((unsigned char *)a1 + 145) = v65;
  if (poolOut) {
    *a3 = poolOut;
  }
  if (sub_44EF8(0xCu, 7))
  {
    int v66 = sub_44F3C(0xCu);
    __uint64_t v84 = sub_4F1D8();
    uint64_t v67 = (const char *)sub_44F70(7);
    uint64_t v68 = *a1;
    uint64_t v69 = a1[1];
    uint64_t v71 = a1[2];
    uint64_t v70 = a1[3];
    uint64_t v72 = a1[4];
    uint64_t v73 = a1[5];
    uint64_t v74 = *((unsigned __int8 *)a1 + 24);
    if (v66)
    {
      printf("%lld %d AVE %s: VIB OUT %s:%d | %d %d | %d %d 0x%x %d | %d %d %d %d %d || %d %d | %d %d %d %d | %d %d | %d %d | %d %d %d | %x\n", v84, 12, v67, "AVE_VerifyImageBuffer", 1240, v68, v69, v70, v71, v72, v73, v74, a1[7], a1[12], *((unsigned __int8 *)a1 + 52), a1[14], a1[26], a1[27],
        a1[32],
        a1[33],
        a1[34],
        a1[35],
        a1[30],
        a1[31],
        a1[28],
        a1[29],
        *((unsigned __int8 *)a1 + 146),
        *((unsigned __int8 *)a1 + 144),
        *((unsigned __int8 *)a1 + 145),
        v9);
      __uint64_t v75 = sub_4F1D8();
      v76 = sub_44F70(7);
      syslog(3, "%lld %d AVE %s: VIB OUT %s:%d | %d %d | %d %d 0x%x %d | %d %d %d %d %d || %d %d | %d %d %d %d | %d %d | %d %d | %d %d %d | %x", v75, 12, v76, "AVE_VerifyImageBuffer", 1240, *a1, a1[1], a1[3], a1[2], a1[4], a1[5], *((unsigned __int8 *)a1 + 24));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: VIB OUT %s:%d | %d %d | %d %d 0x%x %d | %d %d %d %d %d || %d %d | %d %d %d %d | %d %d | %d %d | %d %d %d | %x", v84, 12, v67, "AVE_VerifyImageBuffer", 1240, v68, v69, v70, v71, v72, v73, v74);
    }
  }
  uint64_t v38 = 0;
LABEL_65:
  if (!*((unsigned char *)a1 + 144)) {
    CVPixelBufferRelease(*a2);
  }
  return v38;
}

uint64_t sub_C8A8(uint64_t a1)
{
  if (sub_44EF8(0x1Cu, 6))
  {
    int v2 = sub_44F3C(0x1Cu);
    __uint64_t v3 = sub_4F1D8();
    __uint64_t v4 = (const char *)sub_44F70(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", v3, 28, v4, "AVE_MCTF_Open", (const void *)a1);
      __uint64_t v5 = sub_4F1D8();
      uint64_t v37 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 28, v37, "AVE_MCTF_Open", (const void *)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", v3, 28, v4, "AVE_MCTF_Open", (const void *)a1);
    }
  }
  if (a1)
  {
    if (*(_DWORD *)(a1 + 88))
    {
      uint64_t v6 = 0;
      goto LABEL_18;
    }
    sub_44FA0();
    sub_3FB44();
    int v10 = sub_3E4B0();
    sub_45DC0((uint64_t)(v10 + 230));
    *(_DWORD *)(a1 + 18856) = 1;
    *(void *)(a1 + 112) = 0;
    __uint64_t v11 = (const void **)(a1 + 112);
    *(_DWORD *)(a1 + 72) = 3;
    sub_2E028(3, 1);
    if (*(void *)(a1 + 112))
    {
      if (sub_44EF8(0x1Cu, 6))
      {
        int v12 = sub_44F3C(0x1Cu);
        __uint64_t v13 = sub_4F1D8();
        int v14 = (const char *)sub_44F70(6);
        __uint64_t v15 = *v11;
        if (v12)
        {
          printf("%lld %d AVE %s: %s pDrvInstance = %p\n", v13, 28, v14, "AVE_MCTF_Open", v15);
          __uint64_t v16 = sub_4F1D8();
          int v17 = (const char *)sub_44F70(6);
          syslog(3, "%lld %d AVE %s: %s pDrvInstance = %p", v16, 28, v17, "AVE_MCTF_Open", *v11);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s pDrvInstance = %p", v13, 28, v14, "AVE_MCTF_Open", v15);
        }
      }
      *(_DWORD *)(a1 + 76) = sub_2E79C(*(void *)(a1 + 112));
      int v26 = sub_2E788(*(void *)(a1 + 112));
      *(_DWORD *)(a1 + 80) = v26;
      int v27 = *((_DWORD *)sub_72A0(v26) + 1);
      *(_DWORD *)(a1 + 84) = v27;
      if (v27 > 15)
      {
        sub_44E4(*(_DWORD *)(a1 + 76), (void *)(a1 + 152));
        uint64_t v6 = 0;
        *(unsigned char *)(a1 + 17979) = 0;
        *(_DWORD *)(a1 + 18728) = v10[196];
        *(void *)(a1 + 120) = a1;
        *(void *)(a1 + 136) = sub_CE8C;
        *(_DWORD *)(a1 + 88) = 1;
        goto LABEL_18;
      }
      if (sub_44EF8(0x1Cu, 4))
      {
        int v28 = sub_44F3C(0x1Cu);
        __uint64_t v29 = sub_4F1D8();
        CVReturn v30 = (const char *)sub_44F70(4);
        if (v28)
        {
          printf("%lld %d AVE %s: %s:%d %s | device type not supporte %d < %d\n", v29, 28, v30, "AVE_MCTF_Open", 81, "pMCTF->eDevType >= AVE_DevType_H15", *(_DWORD *)(a1 + 84), 16);
          __uint64_t v29 = sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | device type not supporte %d < %d", v29);
      }
      uint64_t v6 = 4294966294;
    }
    else
    {
      if (sub_44EF8(0x1Cu, 4))
      {
        int v23 = sub_44F3C(0x1Cu);
        __uint64_t v24 = sub_4F1D8();
        __uint64_t v25 = (const char *)sub_44F70(4);
        if (v23)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create driver instance %p %d\n", v24, 28, v25, "AVE_MCTF_Open", 71, "pMCTF->pDrvInstance != __null", (const void *)a1, 0);
          __uint64_t v24 = sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create driver instance %p %d", v24, 28);
      }
      uint64_t v6 = 4294966296;
    }
    for (i = (unsigned int *)*v11; *v11; uint64_t v6 = 4294966296)
    {
      int v32 = sub_2E7B0(i);
      *__uint64_t v11 = 0;
      if (!v32) {
        break;
      }
      int v33 = v32;
      if (sub_44EF8(0x1Cu, 4))
      {
        int v34 = sub_44F3C(0x1Cu);
        __uint64_t v35 = sub_4F1D8();
        int v36 = (const char *)sub_44F70(4);
        if (v34)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE_USL_Drv_Destroy failed %p %d\n", v35, 28, v36, "AVE_MCTF_Open", 106, "res == noErr", (const void *)a1, v33);
          __uint64_t v35 = sub_4F1D8();
          int v36 = (const char *)sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE_USL_Drv_Destroy failed %p %d", v35, 28, v36, "AVE_MCTF_Open", 106, "res == noErr", (const void *)a1, v33);
      }
      uint64_t i = (unsigned int *)*v11;
    }
  }
  else
  {
    if (sub_44EF8(0x1Cu, 4))
    {
      int v7 = sub_44F3C(0x1Cu);
      __uint64_t v8 = sub_4F1D8();
      unsigned int v9 = (const char *)sub_44F70(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d\n", v8, 28, v9, "AVE_MCTF_Open", 48, "pMCTF != __null", 0, 0);
        __uint64_t v8 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d", v8, 28);
    }
    uint64_t v6 = 4294966295;
  }
LABEL_18:
  if (sub_44EF8(0x1Cu, 6))
  {
    int v18 = sub_44F3C(0x1Cu);
    __uint64_t v19 = sub_4F1D8();
    int v20 = (const char *)sub_44F70(6);
    if (v18)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v19, 28, v20, "AVE_MCTF_Open", (const void *)a1, v6);
      __uint64_t v21 = sub_4F1D8();
      uint64_t v38 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v21, 28, v38, "AVE_MCTF_Open", (const void *)a1, v6);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v19, 28, v20, "AVE_MCTF_Open", (const void *)a1, v6);
    }
  }
  return v6;
}

uint64_t sub_CE8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_44EF8(0x1Cu, 6))
  {
    int v6 = sub_44F3C(0x1Cu);
    __uint64_t v7 = sub_4F1D8();
    __uint64_t v8 = (const char *)sub_44F70(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p %p %d\n", v7, 28, v8, "AVE_MCTF_CallBack", (const void *)a1, (const void *)a2, a3);
      __uint64_t v7 = sub_4F1D8();
      sub_44F70(6);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %p %d", v7);
  }
  if (a1 && a2)
  {
    int v10 = *(__CVBuffer **)(a2 + 320);
    unsigned int v9 = *(__CVBuffer **)(a2 + 328);
    if (v10)
    {
      OSType PixelFormatType = CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(a2 + 320));
      if (sub_44EF8(0x1Cu, 8))
      {
        int v12 = sub_44F3C(0x1Cu);
        __uint64_t v31 = sub_4F1D8();
        __uint64_t v13 = (const char *)sub_44F70(8);
        int v14 = *(_DWORD *)(a1 + 76);
        size_t Width = CVPixelBufferGetWidth(v10);
        size_t Height = CVPixelBufferGetHeight(v10);
        if (v12)
        {
          printf("%lld %d AVE %s: %s:%d: pMCTF = %p %d, output CVOSType PixelFormatType = %d %lu x %lu\n", v31, 28, v13, "AVE_MCTF_CallBack", 1212, (const void *)a1, v14, PixelFormatType, Width, Height);
          __uint64_t v17 = sub_4F1D8();
          int v18 = sub_44F70(8);
          CVPixelBufferGetWidth(v10);
          CVPixelBufferGetHeight(v10);
          syslog(3, "%lld %d AVE %s: %s:%d: pMCTF = %p %d, output CVOSType PixelFormatType = %d %lu x %lu", v17, 28, v18);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d: pMCTF = %p %d, output CVOSType PixelFormatType = %d %lu x %lu", v31, 28, v13);
        }
      }
    }
    uint64_t v23 = sub_F774(*(const void **)(a1 + 64), *(const void **)(a2 + 304), a3, (uint64_t *)(a2 + 2296));
    __uint64_t v24 = *(FILE **)(a1 + 166024);
    if (v24) {
      sub_34768(v24, v10);
    }
    if (v10) {
      CVPixelBufferRelease(v10);
    }
    if (v9) {
      CVPixelBufferRelease(v9);
    }
  }
  else
  {
    if (sub_44EF8(0x1Cu, 4))
    {
      int v19 = sub_44F3C(0x1Cu);
      __uint64_t v20 = sub_4F1D8();
      __uint64_t v21 = (const char *)sub_44F70(4);
      if (v19)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", v20, 28, v21, "AVE_MCTF_CallBack", 1203, "pMCTF != __null && pFrame != __null", (const void *)a1, (const void *)a2, a3);
        __uint64_t v22 = sub_4F1D8();
        CVReturn v30 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v22, 28, v30);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v20, 28, v21);
      }
    }
    uint64_t v23 = 4294966295;
  }
  if (sub_44EF8(0x1Cu, 6))
  {
    int v25 = sub_44F3C(0x1Cu);
    __uint64_t v26 = sub_4F1D8();
    int v27 = (const char *)sub_44F70(6);
    if (v25)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %d, ret = %d\n", v26, 28, v27, "AVE_MCTF_CallBack", (const void *)a1, (const void *)a2, a3, v23);
      __uint64_t v28 = sub_4F1D8();
      sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %d, ret = %d", v28);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %d, ret = %d", v26);
    }
  }
  return v23;
}

uint64_t sub_D2AC(uint64_t a1)
{
  if (sub_44EF8(0x1Cu, 6))
  {
    int v2 = sub_44F3C(0x1Cu);
    __uint64_t v3 = sub_4F1D8();
    __uint64_t v4 = (const char *)sub_44F70(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", v3, 28, v4, "AVE_MCTF_Close", (const void *)a1);
      __uint64_t v5 = sub_4F1D8();
      __uint64_t v22 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 28, v22, "AVE_MCTF_Close", (const void *)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", v3, 28, v4, "AVE_MCTF_Close", (const void *)a1);
    }
  }
  if (a1)
  {
    if (sub_44EF8(0x1Cu, 6))
    {
      int v6 = sub_44F3C(0x1Cu);
      __uint64_t v7 = sub_4F1D8();
      __uint64_t v8 = (const char *)sub_44F70(6);
      if (v6)
      {
        printf("%lld %d AVE %s: %s state %d\n", v7, 28, v8, "AVE_MCTF_Close", *(_DWORD *)(a1 + 88));
        __uint64_t v7 = sub_4F1D8();
        __uint64_t v8 = (const char *)sub_44F70(6);
      }
      syslog(3, "%lld %d AVE %s: %s state %d", v7, 28, v8, "AVE_MCTF_Close", *(_DWORD *)(a1 + 88));
    }
    uint64_t v12 = *(unsigned int *)(a1 + 88);
    if (v12)
    {
      if (v12 == 2)
      {
        uint64_t v24 = 0;
        sub_2EF00(*(void ***)(a1 + 112), &v24, 1);
      }
      __uint64_t v13 = *(const void **)(a1 + 152);
      if (v13)
      {
        sub_55B4(v13);
        sub_4890(*(void **)(a1 + 152));
        *(void *)(a1 + 152) = 0;
      }
      if (sub_2E7B0(*(unsigned int **)(a1 + 112)))
      {
        if (sub_44EF8(0x1Cu, 4))
        {
          int v14 = sub_44F3C(0x1Cu);
          __uint64_t v15 = sub_4F1D8();
          __uint64_t v16 = (const char *)sub_44F70(4);
          if (v14)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE_USL_Drv_Destroy failed %p %d\n", v15, 28, v16, "AVE_MCTF_Close", 165, "res == noErr", (const void *)a1, 0);
            __uint64_t v15 = sub_4F1D8();
            sub_44F70(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE_USL_Drv_Destroy failed %p %d", v15, 28);
        }
        uint64_t v12 = 4294966296;
      }
      else
      {
        uint64_t v12 = 0;
        *(void *)(a1 + 112) = 0;
        *(_DWORD *)(a1 + 88) = 0;
      }
    }
  }
  else
  {
    if (sub_44EF8(0x1Cu, 4))
    {
      int v9 = sub_44F3C(0x1Cu);
      __uint64_t v10 = sub_4F1D8();
      __uint64_t v11 = (const char *)sub_44F70(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d\n", v10, 28, v11, "AVE_MCTF_Close", 134, "pMCTF != __null", 0, 0);
        __uint64_t v10 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d", v10, 28);
    }
    uint64_t v12 = 4294966295;
  }
  if (sub_44EF8(0x1Cu, 6))
  {
    int v17 = sub_44F3C(0x1Cu);
    __uint64_t v18 = sub_4F1D8();
    int v19 = (const char *)sub_44F70(6);
    if (v17)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v18, 28, v19, "AVE_MCTF_Close", (const void *)a1, v12);
      __uint64_t v20 = sub_4F1D8();
      uint64_t v23 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v20, 28, v23, "AVE_MCTF_Close", (const void *)a1, v12);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v18, 28, v19, "AVE_MCTF_Close", (const void *)a1, v12);
    }
  }
  return v12;
}

uint64_t sub_D6C4(uint64_t a1, int *a2)
{
  if (sub_44EF8(0x1Cu, 6))
  {
    int v4 = sub_44F3C(0x1Cu);
    __uint64_t v5 = sub_4F1D8();
    int v6 = (const char *)sub_44F70(6);
    if (v4)
    {
      printf("%lld %d AVE %s: %s Enter %p %p\n", v5, 28, v6, "AVE_MCTF_Start", (const void *)a1, a2);
      __uint64_t v7 = sub_4F1D8();
      long long v60 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p %p", v7, 28, v60, "AVE_MCTF_Start", (const void *)a1, a2);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p %p", v5, 28, v6, "AVE_MCTF_Start", (const void *)a1, a2);
    }
  }
  if (!a1 || !a2)
  {
    if (sub_44EF8(0x1Cu, 4))
    {
      int v14 = sub_44F3C(0x1Cu);
      __uint64_t v15 = sub_4F1D8();
      __uint64_t v16 = (const char *)sub_44F70(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", v15, 28, v16, "AVE_MCTF_Start", 203, "pMCTF != __null && pDimension != __null", (const void *)a1, a2, 0);
        __uint64_t v15 = sub_4F1D8();
        long long v61 = sub_44F70(4);
      }
      else
      {
        long long v61 = (void *)v16;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v15, 28, v61);
    }
    goto LABEL_21;
  }
  if (*a2 < 1 || a2[1] <= 0)
  {
    if (sub_44EF8(0x1Cu, 4))
    {
      int v17 = sub_44F3C(0x1Cu);
      __uint64_t v18 = sub_4F1D8();
      int v19 = (const char *)sub_44F70(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %dx%d %d\n", v18, 28, v19, "AVE_MCTF_Start", 208, "pDimension->iWidth > 0 && pDimension->iHeight > 0", (const void *)a1, a2, *a2, a2[1], 0);
        __uint64_t v20 = sub_4F1D8();
        unint64_t v62 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %dx%d %d", v20, 28, v62, "AVE_MCTF_Start");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %dx%d %d", v18, 28, v19, "AVE_MCTF_Start");
      }
    }
LABEL_21:
    uint64_t v21 = 4294966295;
    goto LABEL_22;
  }
  if (sub_44EF8(0x1Cu, 6))
  {
    int v8 = sub_44F3C(0x1Cu);
    __uint64_t v9 = sub_4F1D8();
    __uint64_t v10 = (const char *)sub_44F70(6);
    int v11 = *(_DWORD *)(a1 + 88);
    if (v8)
    {
      printf("%lld %d AVE %s: %s state %d\n", v9, 28, v10, "AVE_MCTF_Start", v11);
      __uint64_t v12 = sub_4F1D8();
      __uint64_t v13 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s state %d", v12, 28, v13, "AVE_MCTF_Start", *(_DWORD *)(a1 + 88));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s state %d", v9, 28, v10, "AVE_MCTF_Start", v11);
    }
  }
  if (*(_DWORD *)(a1 + 88) != 1)
  {
    if (sub_44EF8(0x1Cu, 5))
    {
      int v33 = sub_44F3C(0x1Cu);
      __uint64_t v34 = sub_4F1D8();
      __uint64_t v35 = (const char *)sub_44F70(5);
      int v36 = *(_DWORD *)(a1 + 88);
      if (!v33)
      {
        syslog(3, "%lld %d AVE %s: %s:%d wrong state %p %d", v34, 28, v35, "AVE_MCTF_Start", 217, (const void *)a1, v36);
        goto LABEL_41;
      }
      printf("%lld %d AVE %s: %s:%d wrong state %p %d\n", v34, 28, v35, "AVE_MCTF_Start", 217, (const void *)a1, v36);
      __uint64_t v37 = sub_4F1D8();
      uint64_t v38 = (const char *)sub_44F70(5);
      syslog(3, "%lld %d AVE %s: %s:%d wrong state %p %d", v37, 28, v38, "AVE_MCTF_Start", 217, (const void *)a1, *(_DWORD *)(a1 + 88));
    }
    LOBYTE(v33) = 0;
LABEL_41:
    uint64_t v21 = 4294966285;
    goto LABEL_73;
  }
  __uint64_t v26 = sub_3E4B0();
  if ((v26[784] & 2) != 0)
  {
    int v27 = (const void **)(a1 + 166024);
    int v28 = sub_34028((const void **)(a1 + 166024), a2);
    if (v28)
    {
      int v29 = v28;
      *int v27 = 0;
      if (sub_44EF8(0x1Cu, 5))
      {
        int v30 = sub_44F3C(0x1Cu);
        __uint64_t v31 = sub_4F1D8();
        int v32 = (const char *)sub_44F70(5);
        if (v30)
        {
          printf("%lld %d AVE %s: %s:%d AVE_MCTF_Dump_CreateOutputFile failed %p %p %d\n", v31, 28, v32, "AVE_MCTF_Start", 232, *v27, a2, v29);
          __uint64_t v31 = sub_4F1D8();
          sub_44F70(5);
        }
        syslog(3, "%lld %d AVE %s: %s:%d AVE_MCTF_Dump_CreateOutputFile failed %p %p %d", v31, 28);
      }
    }
  }
  int v39 = *a2;
  *(_DWORD *)(a1 + 1976) = *a2;
  int v40 = a2[1];
  *(_DWORD *)(a1 + 1980) = v40;
  int v41 = sub_3A4F8(*(_DWORD *)(a1 + 80), 1, v39, v40, 1);
  if (v41)
  {
    int v42 = v41;
    if (sub_44EF8(0x1Cu, 4))
    {
      int v43 = sub_44F3C(0x1Cu);
      __uint64_t v44 = sub_4F1D8();
      int v45 = (const char *)sub_44F70(4);
      if (v43)
      {
        printf("%lld %d AVE %s: %s:%d %s | dimensions not supported %p %p (%dx%d) %d\n", v44, 28, v45, "AVE_MCTF_Start", 246, "ret == 0", (const void *)a1, a2, *a2, a2[1], v42);
        __uint64_t v46 = sub_4F1D8();
        unsigned int v63 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | dimensions not supported %p %p (%dx%d) %d", v46, 28, v63, "AVE_MCTF_Start");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | dimensions not supported %p %p (%dx%d) %d", v44, 28, v45, "AVE_MCTF_Start");
      }
    }
    LOBYTE(v33) = 0;
    uint64_t v21 = 4294965295;
    goto LABEL_73;
  }
  uint64_t v47 = (unsigned __int8 *)(a1 + 18516);
  unsigned int v48 = ((*(_DWORD *)(a1 + 1980) + 31) >> 5) * ((*(_DWORD *)(a1 + 1976) + 31) >> 5);
  if (v48 >> 5 < 0xFF)
  {
    if (v48 < 0x7F8) {
      char v49 = 15;
    }
    else {
      char v49 = 16;
    }
  }
  else
  {
    char v49 = 21;
  }
  *uint64_t v47 = v49;
  if (sub_44EF8(0x1Cu, 8))
  {
    int v50 = sub_44F3C(0x1Cu);
    __uint64_t v51 = sub_4F1D8();
    int v52 = (const char *)sub_44F70(8);
    if (v50)
    {
      printf("%lld %d AVE %s: %s:%d %p %d Default FilterStrength %d\n", v51, 28, v52, "AVE_MCTF_Start", 269, (const void *)a1, *(_DWORD *)(a1 + 76), *v47);
      __uint64_t v51 = sub_4F1D8();
      sub_44F70(8);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %p %d Default FilterStrength %d", v51);
  }
  *(_DWORD *)(a1 + 18520) = 2;
  *(_DWORD *)(a1 + 2000) |= 0x200u;
  *(void *)(a1 + 166200) = 0x100000001;
  sub_3666C(a1);
  if ((v26[27] & 4) != 0) {
    *(_DWORD *)(a1 + 18520) = 1;
  }
  int v54 = *((_DWORD *)v26 + 14);
  int v53 = *((_DWORD *)v26 + 15);
  *(_DWORD *)(a1 + 2000) = (*(_DWORD *)(a1 + 2000) | v54 & 0x300) & (~*((_WORD *)v26 + 30) | 0xFFFFFCFF);
  if ((v54 & 0x100) != 0) {
    *(_DWORD *)(a1 + 360) = 1;
  }
  if ((v53 & 0x100) != 0) {
    *(_DWORD *)(a1 + 360) = 0;
  }
  if (!sub_99E8())
  {
    *(void *)(a1 + 96) = 0;
    VTTemporalFilterPluginSessionSetInputPixelBufferAttributes();
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 165956) = 0;
    *(void *)(a1 + 166224) = 0;
    *(_DWORD *)(a1 + 166232) = 0;
    *(_DWORD *)(a1 + 88) = 2;
    LOBYTE(v33) = 1;
    goto LABEL_73;
  }
  if (sub_44EF8(0x1Cu, 4))
  {
    int v33 = sub_44F3C(0x1Cu);
    __uint64_t v55 = sub_4F1D8();
    unsigned int v56 = (const char *)sub_44F70(4);
    if (!v33)
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE_PixelBufAttr_CreateDict %s:%d failed.", v55, 28, v56, "AVE_MCTF_Start", 311, "res == noErr", "AVE_MCTF_Start", 311);
      goto LABEL_72;
    }
    printf("%lld %d AVE %s: %s:%d %s | AVE_PixelBufAttr_CreateDict %s:%d failed.\n", v55, 28, v56, "AVE_MCTF_Start", 311, "res == noErr", "AVE_MCTF_Start", 311);
    __uint64_t v57 = sub_4F1D8();
    unsigned int v58 = (const char *)sub_44F70(4);
    syslog(3, "%lld %d AVE %s: %s:%d %s | AVE_PixelBufAttr_CreateDict %s:%d failed.", v57, 28, v58, "AVE_MCTF_Start", 311, "res == noErr", "AVE_MCTF_Start", 311);
  }
  LOBYTE(v33) = 0;
LABEL_72:
  uint64_t v21 = 4294966296;
LABEL_73:
  if (v33)
  {
    uint64_t v21 = 0;
  }
  else
  {
    unsigned int v59 = *(FILE **)(a1 + 166024);
    if (v59) {
      sub_34434(v59);
    }
  }
LABEL_22:
  if (sub_44EF8(0x1Cu, 6))
  {
    int v22 = sub_44F3C(0x1Cu);
    __uint64_t v23 = sub_4F1D8();
    uint64_t v24 = (const char *)sub_44F70(6);
    if (v22)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %d\n", v23, 28, v24, "AVE_MCTF_Start", (const void *)a1, a2, v21);
      __uint64_t v23 = sub_4F1D8();
      sub_44F70(6);
    }
    syslog(3, "%lld %d AVE %s: %s Exit %p %p %d", v23);
  }
  return v21;
}

uint64_t sub_E07C(uint64_t a1)
{
  if (sub_44EF8(0x1Cu, 6))
  {
    int v2 = sub_44F3C(0x1Cu);
    __uint64_t v3 = sub_4F1D8();
    int v4 = (const char *)sub_44F70(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", v3, 28, v4, "AVE_MCTF_Stop", (const void *)a1);
      __uint64_t v5 = sub_4F1D8();
      __uint64_t v23 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 28, v23, "AVE_MCTF_Stop", (const void *)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", v3, 28, v4, "AVE_MCTF_Stop", (const void *)a1);
    }
  }
  if (a1)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 88);
    if (v6)
    {
      if (v6 == 2 && sub_31A00(*(void ***)(a1 + 112), &v25))
      {
        if (sub_44EF8(0x1Cu, 4))
        {
          int v7 = sub_44F3C(0x1Cu);
          __uint64_t v8 = sub_4F1D8();
          __uint64_t v9 = (const char *)sub_44F70(4);
          if (v7)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE_USL_Drv_Complete %s:%d failed.\n", v8, 28, v9, "AVE_MCTF_Stop", 376, "res == noErr", "AVE_MCTF_Stop", 376);
            __uint64_t v8 = sub_4F1D8();
            sub_44F70(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE_USL_Drv_Complete %s:%d failed.", v8, 28);
        }
        uint64_t v6 = 4294966296;
      }
      else
      {
        __uint64_t v13 = (CFTypeRef *)(a1 + 165984);
        int v14 = *(const void **)(a1 + 96);
        if (v14)
        {
          CFRelease(v14);
          *(void *)(a1 + 96) = 0;
        }
        __uint64_t v15 = *(const void **)(a1 + 104);
        if (v15)
        {
          CFRelease(v15);
          *(void *)(a1 + 104) = 0;
        }
        if (*v13)
        {
          CFRelease(*v13);
          *__uint64_t v13 = 0;
        }
        __uint64_t v16 = *(FILE **)(a1 + 166024);
        if (v16) {
          sub_34434(v16);
        }
        *(_DWORD *)(a1 + 88) = 1;
        *(unsigned char *)(a1 + 166216) = 0;
        int v17 = *(__CVBuffer **)(a1 + 166224);
        if (v17)
        {
          CVPixelBufferRelease(v17);
          uint64_t v6 = 0;
          *(void *)(a1 + 166224) = 0;
        }
        else
        {
          uint64_t v6 = 0;
        }
      }
    }
  }
  else
  {
    if (sub_44EF8(0x1Cu, 4))
    {
      int v10 = sub_44F3C(0x1Cu);
      __uint64_t v11 = sub_4F1D8();
      __uint64_t v12 = (const char *)sub_44F70(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d\n", v11, 28, v12, "AVE_MCTF_Stop", 361, "pMCTF != __null", 0, 0);
        __uint64_t v11 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d", v11, 28);
    }
    uint64_t v6 = 4294966295;
  }
  if (sub_44EF8(0x1Cu, 6))
  {
    int v18 = sub_44F3C(0x1Cu);
    __uint64_t v19 = sub_4F1D8();
    __uint64_t v20 = (const char *)sub_44F70(6);
    if (v18)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v19, 28, v20, "AVE_MCTF_Stop", (const void *)a1, v6);
      __uint64_t v21 = sub_4F1D8();
      uint64_t v24 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v21, 28, v24, "AVE_MCTF_Stop", (const void *)a1, v6);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v19, 28, v20, "AVE_MCTF_Stop", (const void *)a1, v6);
    }
  }
  return v6;
}

uint64_t sub_E42C()
{
  uint64_t v0 = __chkstk_darwin();
  int v2 = v1;
  int v4 = v3;
  uint64_t v6 = v5;
  __uint64_t v8 = v7;
  uint64_t v9 = v0;
  CVPixelBufferRef pixelBuffer = v5;
  char v143 = 0;
  int v142 = 0;
  int v141 = 0;
  uint64_t v139 = 0;
  CVPixelBufferRef pixelBufferOut = 0;
  memset(v138, 0, sizeof(v138));
  if (sub_44EF8(0x1Cu, 8))
  {
    int v10 = sub_44F3C(0x1Cu);
    __uint64_t v11 = sub_4F1D8();
    __uint64_t v12 = (const char *)sub_44F70(8);
    if (v10)
    {
      printf("%lld %d AVE %s: %s Enter %p %p %p %p %p\n", v11, 28, v12, "AVE_MCTF_Process", (const void *)v9, v8, v6, v4, v2);
      __uint64_t v13 = sub_4F1D8();
      v103 = sub_44F70(8);
      syslog(3, "%lld %d AVE %s: %s Enter %p %p %p %p %p", v13, 28, v103);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p %p %p %p %p", v11, 28, v12);
    }
  }
  int v14 = pixelBuffer;
  if (!v4 || !v9 || !v8 || !pixelBuffer)
  {
    if (sub_44EF8(0x1Cu, 4))
    {
      int v26 = sub_44F3C(0x1Cu);
      __uint64_t v27 = sub_4F1D8();
      int v28 = (const char *)sub_44F70(4);
      if (v26)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %p %p %d\n", v27, 28, v28, "AVE_MCTF_Process", 476, "pMCTF != __null && pID != __null && pPixelBuf != __null && pPTS != __null", (const void *)v9, v8, pixelBuffer, v4, v2, 0);
        __uint64_t v29 = sub_4F1D8();
        v104 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %p %p %d", v29, 28, v104, "AVE_MCTF_Process", 476, "pMCTF != __null && pID != __null && pPixelBuf != __null && pPTS != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %p %p %d", v27, 28, v28, "AVE_MCTF_Process", 476, "pMCTF != __null && pID != __null && pPixelBuf != __null && pPTS != __null");
      }
    }
    uint64_t v33 = 4294966295;
    goto LABEL_98;
  }
  if (*(_DWORD *)(v9 + 88) != 2)
  {
    if (sub_44EF8(0x1Cu, 5))
    {
      int v30 = sub_44F3C(0x1Cu);
      __uint64_t v31 = sub_4F1D8();
      int v32 = (const char *)sub_44F70(5);
      if (v30)
      {
        printf("%lld %d AVE %s: %s:%d wrong state %p %d\n", v31, 28, v32, "AVE_MCTF_Process", 483, (const void *)v9, *(_DWORD *)(v9 + 88));
        __uint64_t v31 = sub_4F1D8();
        sub_44F70(5);
      }
      syslog(3, "%lld %d AVE %s: %s:%d wrong state %p %d", v31);
    }
    uint64_t v33 = 4294966285;
    goto LABEL_98;
  }
  __uint64_t v15 = (_DWORD *)(v9 + 165956);
  if (!*(_DWORD *)(v9 + 165956))
  {
    __uint64_t v16 = (char *)sub_3E4B0();
    v145[0] = *(void *)(v9 + 1976);
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
    int v18 = sub_4B0D0(PixelFormatType);
    if (!v18)
    {
      if (sub_44EF8(3u, 4))
      {
        int v48 = sub_44F3C(3u);
        __uint64_t v49 = sub_4F1D8();
        int v50 = (const char *)sub_44F70(4);
        int v51 = *(_DWORD *)(v9 + 76);
        OSType v52 = CVPixelBufferGetPixelFormatType(pixelBuffer);
        if (v48)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to find pixel format %p %d 0x%x\n", v49, 3, v50, "AVE_MCTF_Process", 498, "pPixelFmt != __null", (const void *)v9, v51, v52);
          __uint64_t v49 = sub_4F1D8();
          sub_44F70(4);
          CVPixelBufferGetPixelFormatType(pixelBuffer);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to find pixel format %p %d 0x%x", v49, 3);
      }
      uint64_t v33 = 4294966288;
      goto LABEL_98;
    }
    if (v16[792]) {
      __uint64_t v19 = v16 + 792;
    }
    else {
      __uint64_t v19 = 0;
    }
    sub_50B8(*(void *)(v9 + 152), v19, *(_DWORD *)(v9 + 72), 2, *((_DWORD *)v16 + 196), *((_DWORD *)v16 + 197), v145, 1, *((_DWORD *)v18 + 3), *((_DWORD *)v18 + 1), 0);
    int v14 = pixelBuffer;
  }
  sub_5770(*(_DWORD **)(v9 + 152), 0, v14);
  if (!*(unsigned char *)(v9 + 166216))
  {
    int v34 = sub_363A0(v9, &pixelBuffer, &v143, &v142, &v141, 1);
    if (v34)
    {
      int v35 = v34;
      if (sub_44EF8(0x1Cu, 4))
      {
        int v36 = sub_44F3C(0x1Cu);
        __uint64_t v37 = sub_4F1D8();
        uint64_t v38 = (const char *)sub_44F70(4);
        if (v36)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE_VerifyImageBuffer failed, ret = %d, pMCTF = %p, %p, %d\n", v37, 28, v38, "AVE_MCTF_Process", 530, "ret == noErr", v35, (const void *)v9, *(const void **)(v9 + 64), *(_DWORD *)(v9 + 76));
          __uint64_t v37 = sub_4F1D8();
          uint64_t v38 = (const char *)sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE_VerifyImageBuffer failed, ret = %d, pMCTF = %p, %p, %d", v37, 28, v38, "AVE_MCTF_Process");
      }
      goto LABEL_97;
    }
    sub_36A28(v9, (uint64_t)pixelBuffer);
    long long v146 = 0u;
    long long v147 = 0u;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v150 = 0u;
    long long v151 = 0u;
    long long v152 = 0u;
    v145[0] = v9 + 1968;
    v145[1] = v9 + 1976;
    v145[2] = v9 + 18736;
    v145[3] = v9 + 288;
    *((void *)&v146 + 1) = *(void *)(v9 + 152);
    *((void *)&v147 + 1) = 0;
    long long v148 = 0uLL;
    *(void *)&long long v149 = v9 + 20464;
    *((void *)&v149 + 1) = v9 + 102616;
    *((void *)&v150 + 1) = v9 + 110540;
    *((void *)&v151 + 1) = v9 + 120176;
    *(void *)&long long v152 = v9 + 141928;
    int v53 = sub_2F698(*(void *)(v9 + 112), (uint64_t)v145, v9 + 120, 1, 0, 0, *(unsigned __int8 *)(v9 + 165976), 0, v9 + 160, (_DWORD *)(v9 + 20272), 0);
    if (v53)
    {
      int v54 = v53;
      if (sub_44EF8(0x1Cu, 4))
      {
        int v55 = sub_44F3C(0x1Cu);
        __uint64_t v56 = sub_4F1D8();
        __uint64_t v57 = (const char *)sub_44F70(4);
        if (v55)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE_USL_Drv_Start failed, res = %d, pMCTF = %p, %p, %d\n", v56, 28, v57, "AVE_MCTF_Process", 580, "res == noErr", v54, (const void *)v9, *(const void **)(v9 + 64), *(_DWORD *)(v9 + 76));
          __uint64_t v58 = sub_4F1D8();
          v107 = sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE_USL_Drv_Start failed, res = %d, pMCTF = %p, %p, %d", v58, 28, v107, "AVE_MCTF_Process");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE_USL_Drv_Start failed, res = %d, pMCTF = %p, %p, %d", v56, 28, v57, "AVE_MCTF_Process");
        }
      }
      goto LABEL_97;
    }
    *(unsigned char *)(v9 + 166216) = 1;
  }
  if (!*(void *)(v9 + 104))
  {
    OSType v39 = CVPixelBufferGetPixelFormatType(pixelBuffer);
    if (sub_44EF8(0x1Cu, 8))
    {
      int v40 = sub_44F3C(0x1Cu);
      __uint64_t v41 = sub_4F1D8();
      int v42 = (const char *)sub_44F70(8);
      if (v40)
      {
        printf("%lld %d AVE %s: %s:%d: pPixelBuf = %p, CMOSType PixelFormatType = %d, pMCTF = %p, %p, %d\n", v41, 28, v42, "AVE_MCTF_Process", 591, pixelBuffer, v39, (const void *)v9, *(const void **)(v9 + 64), *(_DWORD *)(v9 + 76));
        __uint64_t v43 = sub_4F1D8();
        v105 = sub_44F70(8);
        syslog(3, "%lld %d AVE %s: %s:%d: pPixelBuf = %p, CMOSType PixelFormatType = %d, pMCTF = %p, %p, %d", v43, 28, v105, "AVE_MCTF_Process");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d: pPixelBuf = %p, CMOSType PixelFormatType = %d, pMCTF = %p, %p, %d", v41, 28, v42, "AVE_MCTF_Process");
      }
    }
    int v61 = sub_3516C(v9, v39);
    if (v61)
    {
      int v62 = v61;
      if (sub_44EF8(0x1Cu, 4))
      {
        int v63 = sub_44F3C(0x1Cu);
        __uint64_t v64 = sub_4F1D8();
        char v65 = (const char *)sub_44F70(4);
        if (v63)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE_MCTF_BuildDestPixelBufAttributes failed, res = %d, pMCTF = %p, %p, %d\n", v64, 28, v65, "AVE_MCTF_Process", 596, "res == noErr", v62, (const void *)v9, *(const void **)(v9 + 64), *(_DWORD *)(v9 + 76));
          __uint64_t v64 = sub_4F1D8();
          char v65 = (const char *)sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE_MCTF_BuildDestPixelBufAttributes failed, res = %d, pMCTF = %p, %p, %d", v64, 28, v65, "AVE_MCTF_Process");
      }
      goto LABEL_97;
    }
  }
  OutputPixelBufferPool = (__CVPixelBufferPool *)VTTemporalFilterPluginSessionGetOutputPixelBufferPool();
  if (!OutputPixelBufferPool)
  {
    if (sub_44EF8(0x1Cu, 4))
    {
      int v44 = sub_44F3C(0x1Cu);
      __uint64_t v45 = sub_4F1D8();
      __uint64_t v46 = (const char *)sub_44F70(4);
      if (v44)
      {
        printf("%lld %d AVE %s: %s:%d %s | VTTemporalFilterPluginSessionGetOutputPixelBufferPool failed, pMCTF = %p, %p, %d\n", v45, 28, v46, "AVE_MCTF_Process", 603, "pOutBufPool != __null", (const void *)v9, *(const void **)(v9 + 64), *(_DWORD *)(v9 + 76));
        __uint64_t v45 = sub_4F1D8();
        __uint64_t v46 = (const char *)sub_44F70(4);
      }
      uint64_t v117 = *(void *)(v9 + 64);
      uint64_t v120 = *(unsigned int *)(v9 + 76);
      v113 = "pOutBufPool != __null";
      uint64_t v115 = v9;
      uint64_t v111 = 603;
      v106 = v46;
      uint64_t v47 = "%lld %d AVE %s: %s:%d %s | VTTemporalFilterPluginSessionGetOutputPixelBufferPool failed, pMCTF = %p, %p, %d";
      goto LABEL_91;
    }
LABEL_97:
    uint64_t v33 = 4294966296;
    goto LABEL_98;
  }
  CVPixelBufferPoolCreatePixelBuffer(kCFAllocatorDefault, OutputPixelBufferPool, &pixelBufferOut);
  if (!pixelBufferOut)
  {
    if (sub_44EF8(0x1Cu, 4))
    {
      int v59 = sub_44F3C(0x1Cu);
      __uint64_t v45 = sub_4F1D8();
      long long v60 = (const char *)sub_44F70(4);
      if (v59)
      {
        printf("%lld %d AVE %s: %s:%d %s | CVPixelBufferPoolCreatePixelBuffer failed, pMCTF = %p, %p, %d\n", v45, 28, v60, "AVE_MCTF_Process", 608, "pOutBuf!= __null", (const void *)v9, *(const void **)(v9 + 64), *(_DWORD *)(v9 + 76));
        __uint64_t v45 = sub_4F1D8();
        long long v60 = (const char *)sub_44F70(4);
      }
      uint64_t v117 = *(void *)(v9 + 64);
      uint64_t v120 = *(unsigned int *)(v9 + 76);
      v113 = "pOutBuf!= __null";
      uint64_t v115 = v9;
      uint64_t v111 = 608;
      v106 = v60;
      uint64_t v47 = "%lld %d AVE %s: %s:%d %s | CVPixelBufferPoolCreatePixelBuffer failed, pMCTF = %p, %p, %d";
LABEL_91:
      syslog(3, v47, v45, 28, v106, "AVE_MCTF_Process", v111, v113, v115, v117, v120, v121);
      goto LABEL_97;
    }
    goto LABEL_97;
  }
  if (sub_44EF8(0x1Cu, 8))
  {
    int v21 = sub_44F3C(0x1Cu);
    __uint64_t v22 = sub_4F1D8();
    __uint64_t v23 = (const char *)sub_44F70(8);
    CVPixelBufferRef v24 = pixelBufferOut;
    OSType v25 = CVPixelBufferGetPixelFormatType(pixelBufferOut);
    if (v21)
    {
      printf("%lld %d AVE %s: %s:%d: pOutBuf = %p, CMOSType PixelFormatType = %d, pMCTF = %p, %p, %d\n", v22, 28, v23, "AVE_MCTF_Process", 610, v24, v25, (const void *)v9, *(const void **)(v9 + 64), *(_DWORD *)(v9 + 76));
      __uint64_t v22 = sub_4F1D8();
      __uint64_t v23 = (const char *)sub_44F70(8);
      CVPixelBufferGetPixelFormatType(pixelBufferOut);
    }
    syslog(3, "%lld %d AVE %s: %s:%d: pOutBuf = %p, CMOSType PixelFormatType = %d, pMCTF = %p, %p, %d", v22, 28, v23, "AVE_MCTF_Process");
  }
  if (*(unsigned char *)(v9 + 166208)) {
    sub_427CC(pixelBufferOut);
  }
  CFDictionaryRef v66 = CVBufferCopyAttachments(pixelBuffer, kCVAttachmentMode_ShouldPropagate);
  if (v66)
  {
    CFDictionaryRef v67 = v66;
    CVBufferSetAttachments(pixelBufferOut, v66, kCVAttachmentMode_ShouldPropagate);
    if (*(_DWORD *)(v9 + 166032) == -1) {
      sub_42D5C(pixelBuffer, v138);
    }
    CFRelease(v67);
  }
  int v68 = sub_363A0(v9, &pixelBuffer, &v143, &v142, &v141, 0);
  if (v68)
  {
    int v69 = v68;
    if (sub_44EF8(0x1Cu, 4))
    {
      int v70 = sub_44F3C(0x1Cu);
      __uint64_t v71 = sub_4F1D8();
      uint64_t v72 = (const char *)sub_44F70(4);
      if (v70)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE_MCTF_VerifyImageBuffer failed, ret = %d, pMCTF = %p, %p, %d\n", v71, 28, v72, "AVE_MCTF_Process", 641, "ret == noErr", v69, (const void *)v9, *(const void **)(v9 + 64), *(_DWORD *)(v9 + 76));
        __uint64_t v73 = sub_4F1D8();
        v108 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE_MCTF_VerifyImageBuffer failed, ret = %d, pMCTF = %p, %p, %d", v73, 28, v108, "AVE_MCTF_Process");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE_MCTF_VerifyImageBuffer failed, ret = %d, pMCTF = %p, %p, %d", v71, 28, v72, "AVE_MCTF_Process");
      }
    }
    goto LABEL_97;
  }
  v124[0] = 0;
  v124[2] = 0;
  long long v126 = 0u;
  long long v127 = 0u;
  long long v128 = 0u;
  long long v129 = 0u;
  long long v130 = 0u;
  long long v131 = 0u;
  long long v132 = 0u;
  long long v133 = 0u;
  long long v134 = 0u;
  long long v135 = 0u;
  long long v136 = 0u;
  uint64_t v137 = 0;
  memset(v122, 0, sizeof(v122));
  uint64_t v123 = 0;
  bzero(v145, 0x4AF8uLL);
  v124[1] = v8;
  CVPixelBufferRef v125 = pixelBuffer;
  uint64_t v74 = pixelBufferOut;
  uint64_t v75 = *(void *)(v9 + 166224);
  *((void *)&v126 + 1) = pixelBufferOut;
  *(void *)&long long v127 = v75;
  if ((*(unsigned char *)(v9 + 2001) & 2) == 0)
  {
    *(void *)(v9 + 166224) = pixelBufferOut;
    CVPixelBufferRetain(v74);
  }
  long long v129 = *(_OWORD *)v4;
  *(void *)&long long v130 = v4[2];
  LOBYTE(v134) = *(unsigned char *)(v9 + 165977);
  long long v132 = *(_OWORD *)(v9 + 166008);
  *(void *)&long long v133 = v122;
  sub_3682C(v9, (uint64_t)v2, (uint64_t)v145);
  v153[0] = -1;
  if (*(_DWORD *)(v9 + 166032) == -1)
  {
    uint64_t v79 = sub_35910(v9, (uint64_t)v138, (unsigned int *)(v9 + 166232), v153);
    if (v79)
    {
      uint64_t v33 = v79;
      if (!sub_44EF8(0x1Cu, 4)) {
        goto LABEL_98;
      }
      int v80 = sub_44F3C(0x1Cu);
      __uint64_t v81 = sub_4F1D8();
      __uint64_t v82 = (const char *)sub_44F70(4);
      if (v80)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE_MCTF_AdjustStrength failed %p %d %d\n", v81, 28, v82, "AVE_MCTF_Process", 697, "ret == 0", (const void *)v9, *(_DWORD *)(v9 + 76), v33);
        __uint64_t v83 = sub_4F1D8();
        sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE_MCTF_AdjustStrength failed %p %d %d", v83, 28);
        goto LABEL_98;
      }
      uint64_t v118 = *(unsigned int *)(v9 + 76);
      uint64_t v119 = v33;
      v114 = "ret == 0";
      uint64_t v116 = v9;
      uint64_t v112 = 697;
      v110 = v82;
      v102 = "%lld %d AVE %s: %s:%d %s | AVE_MCTF_AdjustStrength failed %p %d %d";
      goto LABEL_123;
    }
  }
  if (sub_44EF8(0x1Cu, 8))
  {
    int v76 = sub_44F3C(0x1Cu);
    __uint64_t v77 = sub_4F1D8();
    v78 = (const char *)sub_44F70(8);
    if (v76)
    {
      printf("%lld %d AVE %s: %s:%d %p %d PerFrameData.iDynamicStrength %d rangeIdx %d\n", v77, 28, v78, "AVE_MCTF_Process", 701, (const void *)v9, *(_DWORD *)(v9 + 76), v153[0], *(_DWORD *)(v9 + 166232));
      __uint64_t v77 = sub_4F1D8();
      sub_44F70(8);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %p %d PerFrameData.iDynamicStrength %d rangeIdx %d", v77, 28);
  }
  *((void *)&v133 + 1) = v145;
  unsigned int v89 = (*v15)++;
  uint64_t v137 = v89;
  if (sub_44EF8(0x1Cu, 8))
  {
    int v90 = sub_44F3C(0x1Cu);
    __uint64_t v91 = sub_4F1D8();
    v92 = (const char *)sub_44F70(8);
    int v93 = v137;
    OSType v94 = CVPixelBufferGetPixelFormatType(v125);
    if (v90)
    {
      printf("%lld %d AVE %s: %s:%d: input frameNumber = %d, CMOSType PixelFormatType = %d, pMCTF = %p, %p, %d\n", v91, 28, v92, "AVE_MCTF_Process", 715, v93, v94, (const void *)v9, *(const void **)(v9 + 64), *(_DWORD *)(v9 + 76));
      __uint64_t v91 = sub_4F1D8();
      v92 = (const char *)sub_44F70(8);
      CVPixelBufferGetPixelFormatType(v125);
    }
    syslog(3, "%lld %d AVE %s: %s:%d: input frameNumber = %d, CMOSType PixelFormatType = %d, pMCTF = %p, %p, %d", v91, 28, v92, "AVE_MCTF_Process");
  }
  uint64_t v95 = sub_321F8(*(void ***)(v9 + 112), (uint64_t)v124);
  uint64_t v33 = v95;
  if (v95)
  {
    if (v95 != -536870173)
    {
      if (sub_44EF8(0x1Cu, 4))
      {
        int v99 = sub_44F3C(0x1Cu);
        __uint64_t v100 = sub_4F1D8();
        v101 = (const char *)sub_44F70(4);
        if (v99)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE_USL_Drv_Process failed, ret = %d, pMCTF = %p, %p, %d\n", v100, 28, v101, "AVE_MCTF_Process", 728, "ret == noErr", v33, (const void *)v9, *(const void **)(v9 + 64), *(_DWORD *)(v9 + 76));
          __uint64_t v100 = sub_4F1D8();
          v101 = (const char *)sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE_USL_Drv_Process failed, ret = %d, pMCTF = %p, %p, %d", v100, 28, v101, "AVE_MCTF_Process");
      }
      goto LABEL_97;
    }
    uint64_t v33 = 3758097123;
    if (!sub_44EF8(0x1Cu, 5))
    {
LABEL_98:
      sub_F774(*(const void **)(v9 + 64), v8, v33, v4);
      if (pixelBufferOut)
      {
        CVPixelBufferRelease(pixelBufferOut);
        CVPixelBufferRef pixelBufferOut = 0;
      }
      goto LABEL_100;
    }
    int v96 = sub_44F3C(0x1Cu);
    __uint64_t v81 = sub_4F1D8();
    v97 = (const char *)sub_44F70(5);
    if (v96)
    {
      printf("%lld %d AVE %s: %s:%d: device returned kIOReturnNoPower, reject the frame, pMCTF = %p, %p, %d\n", v81, 28, v97, "AVE_MCTF_Process", 722, (const void *)v9, *(const void **)(v9 + 64), *(_DWORD *)(v9 + 76));
      __uint64_t v98 = sub_4F1D8();
      sub_44F70(5);
      syslog(3, "%lld %d AVE %s: %s:%d: device returned kIOReturnNoPower, reject the frame, pMCTF = %p, %p, %d", v98, 28);
      goto LABEL_98;
    }
    uint64_t v116 = *(void *)(v9 + 64);
    uint64_t v118 = *(unsigned int *)(v9 + 76);
    uint64_t v112 = 722;
    v114 = (const char *)v9;
    v110 = v97;
    v102 = "%lld %d AVE %s: %s:%d: device returned kIOReturnNoPower, reject the frame, pMCTF = %p, %p, %d";
LABEL_123:
    syslog(3, v102, v81, 28, v110, "AVE_MCTF_Process", v112, v114, v116, v118, v119);
    goto LABEL_98;
  }
LABEL_100:
  if (sub_44EF8(0x1Cu, 8))
  {
    int v84 = sub_44F3C(0x1Cu);
    __uint64_t v85 = sub_4F1D8();
    v86 = (const char *)sub_44F70(8);
    if (v84)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %p %p %p %d\n", v85, 28, v86, "AVE_MCTF_Process", (const void *)v9, v8, pixelBuffer, v4, v2, v33);
      __uint64_t v87 = sub_4F1D8();
      v109 = sub_44F70(8);
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %p %p %p %d", v87, 28, v109, "AVE_MCTF_Process");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %p %p %p %d", v85, 28, v86, "AVE_MCTF_Process");
    }
  }
  return v33;
}

uint64_t sub_F774(const void *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *a4;
  if (sub_44EF8(0x1Cu, 8))
  {
    int v7 = sub_44F3C(0x1Cu);
    __uint64_t v8 = sub_4F1D8();
    uint64_t v9 = (const char *)sub_44F70(8);
    if (v7)
    {
      printf("%lld %d AVE %s: %s:%d: pSession = %p, pID = %p, PTS.value = %lld\n", v8, 28, v9, "AVE_MCTF_EmitAndConclude", 435, a1, a2, v6);
      __uint64_t v8 = sub_4F1D8();
      sub_44F70(8);
    }
    syslog(3, "%lld %d AVE %s: %s:%d: pSession = %p, pID = %p, PTS.value = %lld", v8, 28);
  }
  uint64_t v10 = VTTemporalFilterPluginSessionEmitOutputFrame();
  if (v10)
  {
    if (sub_44EF8(0x1Cu, 4))
    {
      int v11 = sub_44F3C(0x1Cu);
      __uint64_t v12 = sub_4F1D8();
      __uint64_t v13 = (const char *)sub_44F70(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | VTTemporalFilterPluginSessionEmitOutputFrame failed, pSession = %p, err = %d\n", v12, 28, v13, "AVE_MCTF_EmitAndConclude", 441, "err == noErr", a1, v10);
        __uint64_t v12 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | VTTemporalFilterPluginSessionEmitOutputFrame failed, pSession = %p, err = %d", v12, 28);
    }
    uint64_t v10 = 4294966296;
  }
  VTTemporalFilterPluginSessionConcludeInputFrame();
  return v10;
}

uint64_t sub_F9A4(uint64_t a1)
{
  if (sub_44EF8(0x1Cu, 6))
  {
    int v2 = sub_44F3C(0x1Cu);
    __uint64_t v3 = sub_4F1D8();
    int v4 = (const char *)sub_44F70(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", v3, 28, v4, "AVE_MCTF_Complete", (const void *)a1);
      __uint64_t v5 = sub_4F1D8();
      int v21 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 28, v21, "AVE_MCTF_Complete", (const void *)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", v3, 28, v4, "AVE_MCTF_Complete", (const void *)a1);
    }
  }
  if (a1)
  {
    if (sub_44EF8(0x1Cu, 6))
    {
      int v6 = sub_44F3C(0x1Cu);
      __uint64_t v7 = sub_4F1D8();
      __uint64_t v8 = (const char *)sub_44F70(6);
      if (v6)
      {
        printf("%lld %d AVE %s: %s state %d\n", v7, 28, v8, "AVE_MCTF_Complete", *(_DWORD *)(a1 + 88));
        __uint64_t v7 = sub_4F1D8();
        __uint64_t v8 = (const char *)sub_44F70(6);
      }
      syslog(3, "%lld %d AVE %s: %s state %d", v7, 28, v8, "AVE_MCTF_Complete", *(_DWORD *)(a1 + 88));
    }
    if (*(_DWORD *)(a1 + 88) == 2 && *(unsigned char *)(a1 + 166216) && sub_31A00(*(void ***)(a1 + 112), &v23))
    {
      if (sub_44EF8(0x1Cu, 4))
      {
        int v12 = sub_44F3C(0x1Cu);
        __uint64_t v13 = sub_4F1D8();
        int v14 = (const char *)sub_44F70(4);
        if (v12)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE_USL_Drv_Complete %s:%d failed.\n", v13, 28, v14, "AVE_MCTF_Complete", 780, "res == noErr", "AVE_MCTF_Complete", 780);
          __uint64_t v13 = sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE_USL_Drv_Complete %s:%d failed.", v13, 28);
      }
      uint64_t v15 = 4294966296;
    }
    else
    {
      uint64_t v15 = 0;
    }
  }
  else
  {
    if (sub_44EF8(0x1Cu, 4))
    {
      int v9 = sub_44F3C(0x1Cu);
      __uint64_t v10 = sub_4F1D8();
      int v11 = (const char *)sub_44F70(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d\n", v10, 28, v11, "AVE_MCTF_Complete", 766, "pMCTF != __null", 0, 0);
        __uint64_t v10 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d", v10, 28);
    }
    uint64_t v15 = 4294966295;
  }
  if (sub_44EF8(0x1Cu, 6))
  {
    int v16 = sub_44F3C(0x1Cu);
    __uint64_t v17 = sub_4F1D8();
    int v18 = (const char *)sub_44F70(6);
    if (v16)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v17, 28, v18, "AVE_MCTF_Complete", (const void *)a1, v15);
      __uint64_t v19 = sub_4F1D8();
      __uint64_t v22 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v19, 28, v22, "AVE_MCTF_Complete", (const void *)a1, v15);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v17, 28, v18, "AVE_MCTF_Complete", (const void *)a1, v15);
    }
  }
  return v15;
}

uint64_t sub_FD98(void *a1, CFTypeRef *a2)
{
  if (sub_44EF8(0x1Cu, 6))
  {
    int v4 = sub_44F3C(0x1Cu);
    __uint64_t v5 = sub_4F1D8();
    int v6 = (const char *)sub_44F70(6);
    if (v4)
    {
      printf("%lld %d AVE %s: %s Enter %p %p\n", v5, 28, v6, "AVE_MCTF_GetPropertyDict", a1, a2);
      __uint64_t v7 = sub_4F1D8();
      __uint64_t v27 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p %p", v7, 28, v27, "AVE_MCTF_GetPropertyDict", a1, a2);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p %p", v5, 28, v6, "AVE_MCTF_GetPropertyDict", a1, a2);
    }
  }
  if (a1 && a2)
  {
    __uint64_t v8 = (CFMutableDictionaryRef *)(a1 + 20748);
    int v9 = (const void *)a1[20748];
    if (v9)
    {
      uint64_t v10 = 0;
      *a2 = CFRetain(v9);
      goto LABEL_17;
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    *__uint64_t v8 = Mutable;
    if (Mutable)
    {
      CFDictionaryRef v16 = CFDictionaryCreate(kCFAllocatorDefault, 0, 0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (v16)
      {
        CFDictionaryRef v17 = v16;
        CFDictionaryAddValue(*v8, kVTTemporalFilterPropertyKey_FilterSourcePixelBufferAttributes, v16);
        CFDictionaryAddValue(*v8, kVTTemporalFilterPropertyKey_FilterDestinationPixelBufferAttributes, v17);
        CFDictionaryAddValue(*v8, kVTTemporalFilterPropertyKey_MaxLookBehind, v17);
        CFDictionaryAddValue(*v8, kVTTemporalFilterPropertyKey_MaxLookAhead, v17);
        CFDictionaryAddValue(*v8, kVTTemporalFilterPropertyKey_FilterStrength, v17);
        CFDictionaryAddValue(*v8, kVTTemporalFilterPropertyKey_RealTime, v17);
        CFDictionaryAddValue(*v8, @"OutputCopy", v17);
        CFDictionaryAddValue(*v8, @"LatencyMode", v17);
        CFDictionaryAddValue(*v8, @"TemporalFilterPriority", v17);
        CFDictionaryAddValue(*v8, @"PerfFeatureOff", v17);
        CFDictionaryAddValue(*v8, @"PerfFeatureOn", v17);
        CFDictionaryAddValue(*v8, @"DebugFeature", v17);
        *a2 = CFRetain(*v8);
        CFRelease(v17);
        uint64_t v10 = 0;
        goto LABEL_17;
      }
      if (!sub_44EF8(0x1Cu, 4)) {
        goto LABEL_31;
      }
      int v25 = sub_44F3C(0x1Cu);
      __uint64_t v23 = sub_4F1D8();
      CVPixelBufferRef v24 = (const char *)sub_44F70(4);
      if (v25)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create CFDict %p %p %d\n", v23, 28, v24, "AVE_MCTF_GetPropertyDict", 826, "pEmptyDict != __null", a1, a2, 0);
        goto LABEL_29;
      }
    }
    else
    {
      if (!sub_44EF8(0x1Cu, 4))
      {
LABEL_31:
        uint64_t v10 = 4294966293;
        goto LABEL_17;
      }
      int v22 = sub_44F3C(0x1Cu);
      __uint64_t v23 = sub_4F1D8();
      CVPixelBufferRef v24 = (const char *)sub_44F70(4);
      if (v22)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create CFDict %p %p %d\n", v23, 28, v24, "AVE_MCTF_GetPropertyDict", 820, "pMCTF->pPropDict != __null", a1, a2, 0);
LABEL_29:
        __uint64_t v26 = sub_4F1D8();
        __uint64_t v29 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDict %p %p %d", v26, 28, v29);
        goto LABEL_31;
      }
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDict %p %p %d", v23, 28, v24);
    goto LABEL_31;
  }
  if (sub_44EF8(0x1Cu, 4))
  {
    int v11 = sub_44F3C(0x1Cu);
    __uint64_t v12 = sub_4F1D8();
    __uint64_t v13 = (const char *)sub_44F70(4);
    if (v11)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", v12, 28, v13, "AVE_MCTF_GetPropertyDict", 812, "pMCTF != __null && ppDict != __null", a1, a2, 0);
      __uint64_t v14 = sub_4F1D8();
      int v28 = sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v14, 28, v28);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v12, 28, v13);
    }
  }
  uint64_t v10 = 4294966295;
LABEL_17:
  if (sub_44EF8(0x1Cu, 6))
  {
    int v18 = sub_44F3C(0x1Cu);
    __uint64_t v19 = sub_4F1D8();
    __uint64_t v20 = (const char *)sub_44F70(6);
    if (v18)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %d\n", v19, 28, v20, "AVE_MCTF_GetPropertyDict", a1, a2, v10);
      __uint64_t v19 = sub_4F1D8();
      sub_44F70(6);
    }
    syslog(3, "%lld %d AVE %s: %s Exit %p %p %d", v19);
  }
  return v10;
}

uint64_t sub_102E8(uint64_t a1, const __CFAllocator *a2, const void *a3, void *a4)
{
  if (sub_44EF8(0x1Cu, 6))
  {
    int v8 = sub_44F3C(0x1Cu);
    __uint64_t v9 = sub_4F1D8();
    uint64_t v10 = (const char *)sub_44F70(6);
    if (v8)
    {
      printf("%lld %d AVE %s: %s Enter %p %p %p %p\n", v9, 28, v10, "AVE_MCTF_GetProperty", (const void *)a1, a2, a3, a4);
      __uint64_t v9 = sub_4F1D8();
      sub_44F70(6);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %p %p %p", v9, 28);
  }
  if (a1 && a3 && a4)
  {
    if (CFEqual(a3, kVTTemporalFilterPropertyKey_FilterSourcePixelBufferAttributes))
    {
      CFStringRef v11 = *(const __CFString **)(a1 + 96);
      if (!v11) {
        goto LABEL_28;
      }
      goto LABEL_17;
    }
    if (CFEqual(a3, kVTTemporalFilterPropertyKey_FilterDestinationPixelBufferAttributes))
    {
      CFStringRef v11 = *(const __CFString **)(a1 + 104);
      if (!v11)
      {
LABEL_28:
        uint64_t v16 = 0;
        *a4 = v11;
        goto LABEL_29;
      }
LABEL_17:
      CFStringRef v11 = (const __CFString *)CFRetain(v11);
      goto LABEL_28;
    }
    if (CFEqual(a3, kVTTemporalFilterPropertyKey_MaxLookBehind))
    {
      int v17 = *(_DWORD *)(a1 + 166204);
LABEL_26:
      LODWORD(valuePtr) = v17;
LABEL_27:
      CFStringRef v11 = (const __CFString *)CFNumberCreate(a2, kCFNumberIntType, &valuePtr);
      goto LABEL_28;
    }
    if (CFEqual(a3, kVTTemporalFilterPropertyKey_MaxLookAhead))
    {
      int v17 = *(_DWORD *)(a1 + 166200);
      goto LABEL_26;
    }
    if (CFEqual(a3, kVTTemporalFilterPropertyKey_FilterStrength))
    {
      int v17 = *(_DWORD *)(a1 + 166032);
      goto LABEL_26;
    }
    if (CFEqual(a3, @"LatencyMode"))
    {
      int v23 = *(_DWORD *)(a1 + 18520);
      LODWORD(valuePtr) = v23;
      if (*(unsigned char *)(a1 + 166040) || !*(_DWORD *)(a1 + 166036))
      {
        if (v23 == 1)
        {
          CFStringRef v11 = @"Low";
        }
        else if (v23 == 2)
        {
          CFStringRef v11 = @"Medium";
        }
        else
        {
          CFStringRef v11 = CFStringCreateWithCString(0, (const char *)&unk_5EB27, 0);
        }
        goto LABEL_28;
      }
      goto LABEL_27;
    }
    if (CFEqual(a3, @"TemporalFilterPriority"))
    {
      int v17 = *(_DWORD *)(a1 + 1968);
      goto LABEL_26;
    }
    if (CFEqual(a3, @"OutputCopy"))
    {
      uint64_t v16 = 0;
      int v24 = *(unsigned __int8 *)(a1 + 166168);
LABEL_49:
      if (v24) {
        int v25 = &kCFBooleanTrue;
      }
      else {
        int v25 = &kCFBooleanFalse;
      }
      *a4 = *v25;
      goto LABEL_29;
    }
    if (CFEqual(a3, kVTTemporalFilterPropertyKey_RealTime))
    {
      uint64_t v16 = 0;
      int v24 = *(unsigned __int8 *)(a1 + 166169);
      goto LABEL_49;
    }
    if (CFEqual(a3, @"PerfFeatureOff"))
    {
      int v17 = *(_DWORD *)(a1 + 166176);
      goto LABEL_26;
    }
    if (CFEqual(a3, @"PerfFeatureOn"))
    {
      int v17 = *(_DWORD *)(a1 + 166172);
      goto LABEL_26;
    }
    if (CFEqual(a3, @"DebugFeature"))
    {
      uint64_t valuePtr = *(void *)(a1 + 166184);
      *a4 = CFNumberCreate(a2, kCFNumberIntType, &valuePtr);
      if (sub_44EF8(0x1Eu, 8))
      {
        int v26 = sub_44F3C(0x1Eu);
        __uint64_t v27 = sub_4F1D8();
        int v28 = (const char *)sub_44F70(8);
        if (v26)
        {
          printf("%lld %d AVE %s: (AVE_GetProperty_internal) Get Debug Feature: %llu\n\n", v27, 30, v28, valuePtr);
          __uint64_t v29 = sub_4F1D8();
          int v32 = (const char *)sub_44F70(8);
          syslog(3, "%lld %d AVE %s: (AVE_GetProperty_internal) Get Debug Feature: %llu\n", v29, 30, v32, valuePtr);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: (AVE_GetProperty_internal) Get Debug Feature: %llu\n", v27, 30, v28, valuePtr);
        }
      }
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v16 = 4294966294;
    }
  }
  else
  {
    if (sub_44EF8(0x1Cu, 4))
    {
      int v12 = sub_44F3C(0x1Cu);
      __uint64_t v13 = sub_4F1D8();
      __uint64_t v14 = (const char *)sub_44F70(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %p %d\n", v13, 28, v14, "AVE_MCTF_GetProperty", 891, "pMCTF != __null && pKey != __null && pValue != __null", (const void *)a1, a2, a3, a4, 0);
        __uint64_t v15 = sub_4F1D8();
        int v30 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %p %d", v15, 28, v30, "AVE_MCTF_GetProperty", 891);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %p %d", v13, 28, v14, "AVE_MCTF_GetProperty", 891);
      }
    }
    uint64_t v16 = 4294966295;
  }
LABEL_29:
  if (sub_44EF8(0x1Cu, 6))
  {
    int v18 = sub_44F3C(0x1Cu);
    __uint64_t v19 = sub_4F1D8();
    __uint64_t v20 = (const char *)sub_44F70(6);
    if (v18)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %p %p %d\n", v19, 28, v20, "AVE_MCTF_GetProperty", (const void *)a1, a2, a3, a4, v16);
      __uint64_t v21 = sub_4F1D8();
      __uint64_t v31 = sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %p %p %d", v21, 28, v31);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %p %p %d", v19, 28, v20);
    }
  }
  return v16;
}

uint64_t sub_10840(uint64_t a1, const void *a2, const __CFNumber *a3)
{
  if (sub_44EF8(0x1Cu, 6))
  {
    int v6 = sub_44F3C(0x1Cu);
    __uint64_t v7 = sub_4F1D8();
    int v8 = (const char *)sub_44F70(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p %p %p\n", v7, 28, v8, "AVE_MCTF_SetProperty", (const void *)a1, a2, a3);
      __uint64_t v7 = sub_4F1D8();
      sub_44F70(6);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %p %p", v7);
  }
  if (!a1 || !a2 || !a3)
  {
    if (sub_44EF8(0x1Cu, 4))
    {
      int v10 = sub_44F3C(0x1Cu);
      __uint64_t v11 = sub_4F1D8();
      int v12 = (const char *)sub_44F70(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d\n", v11, 28, v12, "AVE_MCTF_SetProperty", 987, "pMCTF != __null && pKey != __null && pValue != __null", (const void *)a1, a2, a3, 0);
        __uint64_t v13 = sub_4F1D8();
        v97 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d", v13, 28, v97, "AVE_MCTF_SetProperty");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d", v11, 28, v12, "AVE_MCTF_SetProperty");
      }
    }
    goto LABEL_18;
  }
  if (CFEqual(a2, kVTTemporalFilterPropertyKey_FilterSourcePixelBufferAttributes)
    || CFEqual(a2, kVTTemporalFilterPropertyKey_FilterDestinationPixelBufferAttributes)
    || CFEqual(a2, kVTTemporalFilterPropertyKey_MaxLookBehind)
    || CFEqual(a2, kVTTemporalFilterPropertyKey_MaxLookAhead))
  {
    uint64_t v9 = 4294966296;
    goto LABEL_19;
  }
  int v18 = (_DWORD *)(a1 + 166032);
  __uint64_t v19 = (unsigned __int8 *)(a1 + 18516);
  if (CFEqual(a2, kVTTemporalFilterPropertyKey_FilterStrength))
  {
    LOBYTE(valuePtr) = 0;
    CFNumberGetValue(a3, kCFNumberSInt8Type, &valuePtr);
    if (sub_44EF8(0x1Eu, 6))
    {
      int v20 = sub_44F3C(0x1Eu);
      __uint64_t v21 = sub_4F1D8();
      int v22 = (const char *)sub_44F70(6);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d iMCTFStrengthLevel = %d\n", v21, 30, v22, "AVE_MCTF_SetProperty", 1001, (char)valuePtr);
        __uint64_t v21 = sub_4F1D8();
        int v22 = (const char *)sub_44F70(6);
      }
      syslog(3, "%lld %d AVE %s: %s:%d iMCTFStrengthLevel = %d", v21, 30, v22, "AVE_MCTF_SetProperty", 1001, (char)valuePtr);
    }
    unsigned __int8 v29 = valuePtr;
    if ((char)valuePtr == -1)
    {
      _DWORD *v18 = -1;
    }
    else if ((valuePtr - 101) > 0x9Bu)
    {
      _DWORD *v18 = (char)valuePtr;
      unsigned __int8 *v19 = ((24 * v29 - 24) & 0xFFF8u) / 0x63;
      if (sub_44EF8(0x1Eu, 6))
      {
        int v33 = sub_44F3C(0x1Eu);
        __uint64_t v34 = sub_4F1D8();
        int v35 = (const char *)sub_44F70(6);
        if (v33)
        {
          printf("%lld %d AVE %s: %s:%d setting iMCTFStrengthLevel to %d\n", v34, 30, v35, "AVE_MCTF_SetProperty", 1018, *v19);
          sub_4F1D8();
          sub_44F70(6);
        }
        syslog(3, "%lld %d AVE %s: %s:%d setting iMCTFStrengthLevel to %d");
      }
    }
    else if (sub_44EF8(0x1Eu, 5))
    {
      int v30 = sub_44F3C(0x1Eu);
      __uint64_t v31 = sub_4F1D8();
      int v32 = (const char *)sub_44F70(5);
      if (v30)
      {
        printf("%lld %d AVE %s: AVE FIG WARNING:  Range [%d - %d] are allowed values for kVTTemporalFilterPropertyKey_FilterStrength\n", v31, 30, v32, 1, 100);
        sub_4F1D8();
        sub_44F70(5);
      }
      syslog(3, "%lld %d AVE %s: AVE FIG WARNING:  Range [%d - %d] are allowed values for kVTTemporalFilterPropertyKey_FilterStrength");
    }
    uint64_t v9 = 0;
    goto LABEL_19;
  }
  if (CFEqual(a2, @"LatencyMode"))
  {
    CFTypeID TypeID = CFStringGetTypeID();
    if (TypeID == CFGetTypeID(a3) || (CFTypeID v24 = CFNumberGetTypeID(), v24 == CFGetTypeID(a3)))
    {
      CFTypeID v25 = CFStringGetTypeID();
      if (v25 != CFGetTypeID(a3))
      {
        CFTypeID v40 = CFNumberGetTypeID();
        if (v40 == CFGetTypeID(a3))
        {
          LODWORD(valuePtr) = 0;
          CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
          int v28 = valuePtr;
          *(_DWORD *)(a1 + 166036) = valuePtr;
        }
        else
        {
          int v28 = 0;
        }
LABEL_82:
        if (sub_44EF8(0x1Eu, 6))
        {
          int v65 = sub_44F3C(0x1Eu);
          __uint64_t v66 = sub_4F1D8();
          CFDictionaryRef v67 = (const char *)sub_44F70(6);
          if (v65)
          {
            printf("%lld %d AVE %s: %s:%d eMCTFMode = %d\n", v66, 30, v67, "AVE_MCTF_SetProperty", 1068, v28);
            __uint64_t v68 = sub_4F1D8();
            v101 = (const char *)sub_44F70(6);
            syslog(3, "%lld %d AVE %s: %s:%d eMCTFMode = %d", v68, 30, v101, "AVE_MCTF_SetProperty", 1068, v28);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d eMCTFMode = %d", v66, 30, v67, "AVE_MCTF_SetProperty", 1068, v28);
          }
        }
        uint64_t v9 = 0;
        *(_DWORD *)(a1 + 18520) = v28;
        goto LABEL_19;
      }
      CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
      CFStringRef v27 = @"Low";
      if (CFEqual(a3, @"Low"))
      {
        int v28 = 1;
        goto LABEL_73;
      }
      CFStringRef v27 = @"Medium";
      if (CFEqual(a3, @"Medium") || CFEqual(a3, @"Auto"))
      {
        int v28 = 2;
LABEL_73:
        CStringPtr = CFStringGetCStringPtr(v27, SystemEncoding);
        strcpy((char *)(a1 + 166040), CStringPtr);
        if (sub_44EF8(0x1Eu, 6))
        {
          int v55 = sub_44F3C(0x1Eu);
          __uint64_t v56 = sub_4F1D8();
          __uint64_t v57 = (const char *)sub_44F70(6);
          if (v55)
          {
            printf("%lld %d AVE %s: %s:%d iaVTMCTFMode = %s\n", v56, 30, v57, "AVE_MCTF_SetProperty", 1057, (const char *)(a1 + 166040));
            __uint64_t v58 = sub_4F1D8();
            int v99 = (const char *)sub_44F70(6);
            syslog(3, "%lld %d AVE %s: %s:%d iaVTMCTFMode = %s", v58, 30, v99, "AVE_MCTF_SetProperty", 1057, (const char *)(a1 + 166040));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d iaVTMCTFMode = %s", v56, 30, v57, "AVE_MCTF_SetProperty", 1057, (const char *)(a1 + 166040));
          }
        }
        goto LABEL_82;
      }
      if (sub_44EF8(0x1Cu, 4))
      {
        int v79 = sub_44F3C(0x1Cu);
        __uint64_t v80 = sub_4F1D8();
        __uint64_t v81 = (const char *)sub_44F70(4);
        if (v79)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE MCTF: Invalid value for kVTTemporalFilterPropertyKey_LatencyMode\n", v80, 28, v81, "AVE_MCTF_SetProperty", 1055, "false");
          sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE MCTF: Invalid value for kVTTemporalFilterPropertyKey_LatencyMode");
      }
    }
    else if (sub_44EF8(0x1Cu, 4))
    {
      int v41 = sub_44F3C(0x1Cu);
      __uint64_t v42 = sub_4F1D8();
      __uint64_t v43 = (const char *)sub_44F70(4);
      if (v41)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE MCTF: (CFGetTypeID) failed\n", v42, 28, v43, "AVE_MCTF_SetProperty", 1029, "CFStringGetTypeID() == CFGetTypeID(pValue) || CFNumberGetTypeID() == CFGetTypeID(pValue)");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE MCTF: (CFGetTypeID) failed");
    }
LABEL_18:
    uint64_t v9 = 4294966295;
    goto LABEL_19;
  }
  if (CFEqual(a2, @"TemporalFilterPriority"))
  {
    LODWORD(valuePtr) = 0;
    CFTypeID v36 = CFNumberGetTypeID();
    if (v36 == CFGetTypeID(a3))
    {
      CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
      if (sub_44EF8(0x1Eu, 6))
      {
        int v37 = sub_44F3C(0x1Eu);
        __uint64_t v38 = sub_4F1D8();
        OSType v39 = (const char *)sub_44F70(6);
        if (v37)
        {
          printf("%lld %d AVE %s: %s:%d iMCTFPriority = %d\n", v38, 30, v39, "AVE_MCTF_SetProperty", 1082, valuePtr);
          __uint64_t v38 = sub_4F1D8();
          OSType v39 = (const char *)sub_44F70(6);
        }
        syslog(3, "%lld %d AVE %s: %s:%d iMCTFPriority = %d", v38, 30, v39, "AVE_MCTF_SetProperty", 1082, valuePtr);
      }
      uint64_t v9 = 0;
      int v73 = valuePtr;
      *(_DWORD *)(a1 + 1968) = valuePtr;
      *(_DWORD *)(a1 + 166192) = v73;
      goto LABEL_19;
    }
    if (!sub_44EF8(0x1Cu, 4)) {
      goto LABEL_18;
    }
    int v50 = sub_44F3C(0x1Cu);
    __uint64_t v51 = sub_4F1D8();
    OSType v52 = (const char *)sub_44F70(4);
    if (!v50)
    {
LABEL_93:
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE MCTF: (CFGNumberetTypeID) failed");
      goto LABEL_18;
    }
    int v53 = 1078;
LABEL_68:
    printf("%lld %d AVE %s: %s:%d %s | AVE MCTF: (CFGNumberetTypeID) failed\n", v51, 28, v52, "AVE_MCTF_SetProperty", v53, "CFNumberGetTypeID() == CFGetTypeID(pValue)");
    sub_4F1D8();
    sub_44F70(4);
    goto LABEL_93;
  }
  if (CFEqual(a2, @"OutputCopy"))
  {
    CFTypeID v44 = CFBooleanGetTypeID();
    if (v44 == CFGetTypeID(a3))
    {
      int Value = CFBooleanGetValue(a3);
      if (sub_44EF8(0x1Eu, 6))
      {
        int v46 = sub_44F3C(0x1Eu);
        __uint64_t v47 = sub_4F1D8();
        int v48 = (const char *)sub_44F70(6);
        if (v46)
        {
          printf("%lld %d AVE %s: %s:%d bOutputCopy = %d\n", v47, 30, v48, "AVE_MCTF_SetProperty", 1097, Value != 0);
          __uint64_t v49 = sub_4F1D8();
          __uint64_t v98 = (const char *)sub_44F70(6);
          syslog(3, "%lld %d AVE %s: %s:%d bOutputCopy = %d", v49, 30, v98, "AVE_MCTF_SetProperty", 1097, Value != 0);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d bOutputCopy = %d", v47, 30, v48, "AVE_MCTF_SetProperty", 1097, Value != 0);
        }
      }
      uint64_t v9 = 0;
      *(unsigned char *)(a1 + 166168) = Value != 0;
      *(_DWORD *)(a1 + 2000) = *(_DWORD *)(a1 + 2000) & 0xFFFFFDFF | ((Value != 0) << 9);
      goto LABEL_19;
    }
    if (!sub_44EF8(0x1Cu, 4)) {
      goto LABEL_18;
    }
    int v69 = sub_44F3C(0x1Cu);
    __uint64_t v70 = sub_4F1D8();
    __uint64_t v71 = (const char *)sub_44F70(4);
    if (v69)
    {
      int v72 = 1093;
LABEL_103:
      printf("%lld %d AVE %s: %s:%d %s | AVE MCTF: (CFBooleanGetTypeID) failed\n", v70, 28, v71, "AVE_MCTF_SetProperty", v72, "CFBooleanGetTypeID() == CFGetTypeID(pValue)");
      sub_4F1D8();
      sub_44F70(4);
      goto LABEL_121;
    }
    goto LABEL_121;
  }
  if (!CFEqual(a2, kVTTemporalFilterPropertyKey_RealTime))
  {
    if (CFEqual(a2, @"PerfFeatureOn"))
    {
      LODWORD(valuePtr) = 0;
      CFTypeID v74 = CFNumberGetTypeID();
      if (v74 != CFGetTypeID(a3))
      {
        if (!sub_44EF8(0x1Cu, 4)) {
          goto LABEL_18;
        }
        int v86 = sub_44F3C(0x1Cu);
        __uint64_t v51 = sub_4F1D8();
        OSType v52 = (const char *)sub_44F70(4);
        if (!v86) {
          goto LABEL_93;
        }
        int v53 = 1125;
        goto LABEL_68;
      }
      CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
      if (sub_44EF8(0x1Eu, 6))
      {
        int v75 = sub_44F3C(0x1Eu);
        __uint64_t v76 = sub_4F1D8();
        __uint64_t v77 = (const char *)sub_44F70(6);
        if (v75)
        {
          printf("%lld %d AVE %s: %s:%d iPerfFeatureOn = %d\n", v76, 30, v77, "AVE_MCTF_SetProperty", 1129, valuePtr);
          __uint64_t v76 = sub_4F1D8();
          __uint64_t v77 = (const char *)sub_44F70(6);
        }
        syslog(3, "%lld %d AVE %s: %s:%d iPerfFeatureOn = %d", v76, 30, v77, "AVE_MCTF_SetProperty", 1129, valuePtr);
      }
      uint64_t v9 = 0;
      __int16 v92 = valuePtr;
      *(_DWORD *)(a1 + 166172) = valuePtr;
      unsigned int v93 = *(_DWORD *)(a1 + 2000) | v92 & 0x300;
    }
    else
    {
      if (!CFEqual(a2, @"PerfFeatureOff"))
      {
        if (!CFEqual(a2, @"DebugFeature"))
        {
          uint64_t v9 = 4294966281;
          goto LABEL_19;
        }
        uint64_t valuePtr = 0;
        CFTypeID v87 = CFNumberGetTypeID();
        if (v87 != CFGetTypeID(a3))
        {
          if (!sub_44EF8(0x1Cu, 4)) {
            goto LABEL_18;
          }
          int v94 = sub_44F3C(0x1Cu);
          __uint64_t v51 = sub_4F1D8();
          OSType v52 = (const char *)sub_44F70(4);
          if (!v94) {
            goto LABEL_93;
          }
          int v53 = 1157;
          goto LABEL_68;
        }
        CFNumberGetValue(a3, kCFNumberSInt64Type, &valuePtr);
        if (sub_44EF8(0x1Eu, 6))
        {
          int v88 = sub_44F3C(0x1Eu);
          __uint64_t v89 = sub_4F1D8();
          int v90 = (const char *)sub_44F70(6);
          if (v88)
          {
            printf("%lld %d AVE %s: %s:%d iDebugFeature = %llu\n", v89, 30, v90, "AVE_MCTF_SetProperty", 1161, valuePtr);
            __uint64_t v89 = sub_4F1D8();
            int v90 = (const char *)sub_44F70(6);
          }
          syslog(3, "%lld %d AVE %s: %s:%d iDebugFeature = %llu", v89, 30, v90, "AVE_MCTF_SetProperty", 1161, valuePtr);
        }
        uint64_t v9 = 0;
        uint64_t v96 = valuePtr;
        *(void *)(a1 + 166184) = valuePtr;
        *(void *)(a1 + 166208) = v96;
        goto LABEL_19;
      }
      LODWORD(valuePtr) = 0;
      CFTypeID v82 = CFNumberGetTypeID();
      if (v82 != CFGetTypeID(a3))
      {
        if (!sub_44EF8(0x1Cu, 4)) {
          goto LABEL_18;
        }
        int v91 = sub_44F3C(0x1Cu);
        __uint64_t v51 = sub_4F1D8();
        OSType v52 = (const char *)sub_44F70(4);
        if (!v91) {
          goto LABEL_93;
        }
        int v53 = 1141;
        goto LABEL_68;
      }
      CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
      if (sub_44EF8(0x1Eu, 6))
      {
        int v83 = sub_44F3C(0x1Eu);
        __uint64_t v84 = sub_4F1D8();
        __uint64_t v85 = (const char *)sub_44F70(6);
        if (v83)
        {
          printf("%lld %d AVE %s: %s:%d iPerfFeatureOff = %d\n", v84, 30, v85, "AVE_MCTF_SetProperty", 1145, valuePtr);
          __uint64_t v84 = sub_4F1D8();
          __uint64_t v85 = (const char *)sub_44F70(6);
        }
        syslog(3, "%lld %d AVE %s: %s:%d iPerfFeatureOff = %d", v84, 30, v85, "AVE_MCTF_SetProperty", 1145, valuePtr);
      }
      uint64_t v9 = 0;
      __int16 v95 = ~(_WORD)valuePtr;
      *(_DWORD *)(a1 + 166176) = valuePtr;
      unsigned int v93 = *(_DWORD *)(a1 + 2000) & (*(_DWORD *)&v95 | 0xFFFFFCFF);
    }
    *(_DWORD *)(a1 + 2000) = v93;
    goto LABEL_19;
  }
  CFTypeID v59 = CFBooleanGetTypeID();
  if (v59 != CFGetTypeID(a3))
  {
    if (!sub_44EF8(0x1Cu, 4)) {
      goto LABEL_18;
    }
    int v78 = sub_44F3C(0x1Cu);
    __uint64_t v70 = sub_4F1D8();
    __uint64_t v71 = (const char *)sub_44F70(4);
    if (v78)
    {
      int v72 = 1110;
      goto LABEL_103;
    }
LABEL_121:
    syslog(3, "%lld %d AVE %s: %s:%d %s | AVE MCTF: (CFBooleanGetTypeID) failed");
    goto LABEL_18;
  }
  BOOL v60 = CFBooleanGetValue(a3) != 0;
  if (sub_44EF8(0x1Eu, 6))
  {
    int v61 = sub_44F3C(0x1Eu);
    __uint64_t v62 = sub_4F1D8();
    int v63 = (const char *)sub_44F70(6);
    if (v61)
    {
      printf("%lld %d AVE %s: %s:%d bRealTimeClient = %d\n", v62, 30, v63, "AVE_MCTF_SetProperty", 1114, v60);
      __uint64_t v64 = sub_4F1D8();
      __uint64_t v100 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s:%d bRealTimeClient = %d", v64, 30, v100, "AVE_MCTF_SetProperty", 1114, v60);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d bRealTimeClient = %d", v62, 30, v63, "AVE_MCTF_SetProperty", 1114, v60);
    }
  }
  uint64_t v9 = 0;
  *(unsigned char *)(a1 + 166169) = v60;
  *(_DWORD *)(a1 + 360) = v60;
LABEL_19:
  if (sub_44EF8(0x1Cu, 6))
  {
    int v14 = sub_44F3C(0x1Cu);
    __uint64_t v15 = sub_4F1D8();
    uint64_t v16 = (const char *)sub_44F70(6);
    if (v14)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %p %d\n", v15, 28, v16, "AVE_MCTF_SetProperty", (const void *)a1, a2, a3, v9);
      __uint64_t v15 = sub_4F1D8();
      sub_44F70(6);
    }
    syslog(3, "%lld %d AVE %s: %s Exit %p %p %p %d", v15, 28);
  }
  return v9;
}

uint64_t sub_11990(unsigned int *a1, uint64_t a2, uint64_t a3, _DWORD *a4, int a5)
{
  if (!a1)
  {
    if (sub_44EF8(3u, 4))
    {
      int v11 = sub_44F3C(3u);
      __uint64_t v12 = sub_4F1D8();
      __uint64_t v13 = (const char *)sub_44F70(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: in NULL\n", v12, 3, v13, "CopySPSPPSHeader", 185, "in != __null");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: in NULL");
    }
    goto LABEL_61;
  }
  if (!a2)
  {
    if (sub_44EF8(3u, 4))
    {
      int v14 = sub_44F3C(3u);
      __uint64_t v15 = sub_4F1D8();
      uint64_t v16 = (const char *)sub_44F70(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: out NULL\n", v15, 3, v16, "CopySPSPPSHeader", 186, "out != __null");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: out NULL");
    }
    goto LABEL_61;
  }
  uint64_t v5 = a3;
  if (a3)
  {
    int v66 = 0;
    v65[0] = (int32x2_t)(bswap32(*a1) | 0x2000000000);
    v65[1] = (int32x2_t)(a1 + 1);
    v64[1] = a2;
    v64[0] = 0x2000000000;
    v64[2] = 0xFFFFFFFF00000000;
    if (sub_44EF8(0xDDu, 7))
    {
      int v7 = sub_44F3C(0xDDu);
      __uint64_t v8 = sub_4F1D8();
      uint64_t v9 = (const char *)sub_44F70(7);
      if (v7)
      {
        printf("%lld %d AVE %s: H264 - CopySPSPPSHeader: buffsize %d\n", v8, 221, v9, v5);
        __uint64_t v10 = sub_4F1D8();
        __uint64_t v57 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: buffsize %d", v10, 221, v57, v5);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: buffsize %d", v8, 221, v9, v5);
      }
    }
    unsigned int v21 = 0;
    int v22 = 0;
    int v23 = 0;
    uint64_t v63 = v5;
    unsigned int v24 = 1;
    do
    {
      unsigned int v25 = sub_121A4(v65);
      int v26 = v23 + 1;
      sub_124B8((int *)v64, v25, 8u);
      int v22 = v25 | (v22 << 8);
      if (sub_44EF8(0xDDu, 7))
      {
        int v27 = sub_44F3C(0xDDu);
        __uint64_t v28 = sub_4F1D8();
        unsigned __int8 v29 = (const char *)sub_44F70(7);
        if (v27)
        {
          printf("%lld %d AVE %s: H264 - CopySPSPPSHeader: startcode %x startcodeCount %d bytesRead %d temp %x\n", v28, 221, v29, v22, v21, v23 + 1, v25);
          __uint64_t v30 = sub_4F1D8();
          CFTypeID v59 = (const char *)sub_44F70(7);
          syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: startcode %x startcodeCount %d bytesRead %d temp %x", v30, 221, v59, v22, v21, v23 + 1, v25);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: startcode %x startcodeCount %d bytesRead %d temp %x", v28, 221, v29, v22, v21, v23 + 1, v25);
        }
        uint64_t v5 = v63;
      }
      if (v22 == 1)
      {
        if (v21 == 1) {
          a4[1] = v23 - 3;
        }
        if (v21 == v24 + 1)
        {
          int v31 = v23 - 3;
          a4[v21] = v23 - 3;
          if (v24)
          {
            int v32 = a4 + 1;
            uint64_t v33 = v24;
            do
            {
              int v34 = *v32++;
              v31 -= v34;
              a4[v21] = v31;
              --v33;
            }
            while (v33);
          }
          unsigned int v24 = v21;
        }
        if (sub_44EF8(0xDDu, 7))
        {
          int v35 = sub_44F3C(0xDDu);
          __uint64_t v36 = sub_4F1D8();
          int v37 = (const char *)sub_44F70(7);
          if (v35)
          {
            printf("%lld %d AVE %s: H264 - CopySPSPPSHeader: startcode %x = H264VIDEOENCODER_STARTCODE startcodeCount %d bytesRead %d expectedPPSs %d\n", v36, 221, v37, 1, v21 + 1, v23 + 1, v24);
            __uint64_t v38 = sub_4F1D8();
            BOOL v60 = (const char *)sub_44F70(7);
            syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: startcode %x = H264VIDEOENCODER_STARTCODE startcodeCount %d bytesRead %d expectedPPSs %d", v38, 221, v60, 1, v21 + 1, v26, v24);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: startcode %x = H264VIDEOENCODER_STARTCODE startcodeCount %d bytesRead %d expectedPPSs %d", v36, 221, v37, 1, v21 + 1, v23 + 1, v24);
          }
          ++v21;
          uint64_t v5 = v63;
        }
        else
        {
          ++v21;
        }
      }
      ++v23;
    }
    while (v26 != v5);
    if (v21 == v24 + 1)
    {
      a4[v21] = v5;
      if (v24)
      {
        OSType v39 = a4 + 1;
        int v40 = v5;
        uint64_t v41 = v24;
        do
        {
          int v42 = *v39++;
          v40 -= v42;
          a4[v21] = v40;
          --v41;
        }
        while (v41);
      }
      if (v24 == a5)
      {
        sub_12718((uint64_t)v64);
        if (sub_44EF8(0xDDu, 7))
        {
          int v43 = sub_44F3C(0xDDu);
          __uint64_t v44 = sub_4F1D8();
          __uint64_t v45 = (const char *)sub_44F70(7);
          if (v43)
          {
            printf("%lld %d AVE %s: H264 - CopySPSPPSHeader: SPSPPSSizes[VPS] %d, SPSPPSSizes[SPS] %d, SPSPPSSizes[PPS1] %d, SPSPPSSizes[PPS2] %d\n", v44, 221, v45, *a4, a4[1], a4[2], a4[3]);
            __uint64_t v44 = sub_4F1D8();
            sub_44F70(7);
          }
          syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: SPSPPSSizes[VPS] %d, SPSPPSSizes[SPS] %d, SPSPPSSizes[PPS1] %d, SPSPPSSizes[PPS2] %d", v44);
        }
        goto LABEL_62;
      }
      if (sub_44EF8(3u, 4))
      {
        int v49 = sub_44F3C(3u);
        __uint64_t v50 = sub_4F1D8();
        __uint64_t v51 = (const char *)sub_44F70(4);
        if (v49)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: expectedPPSs == %d, i32PPSsCount = %d\n", v50, 3, v51, "CopySPSPPSHeader", 245, "(expectedPPSs == i32PPSsCount)", v21, a5);
          __uint64_t v50 = sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: expectedPPSs == %d, i32PPSsCount = %d", v50);
      }
    }
    else if (sub_44EF8(3u, 4))
    {
      int v46 = sub_44F3C(3u);
      __uint64_t v47 = sub_4F1D8();
      int v48 = (const char *)sub_44F70(4);
      if (v46)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: startCodeCount == %d\n", v47, 3, v48, "CopySPSPPSHeader", 237, "(startCodeCount == expectedStartCodes)", v21);
        __uint64_t v47 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: startCodeCount == %d", v47);
    }
LABEL_61:
    uint64_t v5 = 0;
LABEL_62:
    if (sub_44EF8(0xDDu, 7))
    {
      int v52 = sub_44F3C(0xDDu);
      __uint64_t v53 = sub_4F1D8();
      int v54 = (const char *)sub_44F70(7);
      if (v52)
      {
        printf("%lld %d AVE %s: H264 - CopySPSPPSHeader: return bytesRead %d\n", v53, 221, v54, v5);
        __uint64_t v55 = sub_4F1D8();
        int v61 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: return bytesRead %d", v55, 221, v61, v5);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: return bytesRead %d", v53, 221, v54, v5);
      }
    }
    return v5;
  }
  if (sub_44EF8(0xDDu, 4))
  {
    int v17 = sub_44F3C(0xDDu);
    __uint64_t v18 = sub_4F1D8();
    __uint64_t v19 = (const char *)sub_44F70(4);
    if (v17)
    {
      printf("%lld %d AVE %s: H264 ERROR - CopySPSPPSHeader: buffsize %d\n", v18, 221, v19, 0);
      __uint64_t v20 = sub_4F1D8();
      __uint64_t v58 = (const char *)sub_44F70(4);
      syslog(3, "%lld %d AVE %s: H264 ERROR - CopySPSPPSHeader: buffsize %d", v20, 221, v58, 0);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264 ERROR - CopySPSPPSHeader: buffsize %d", v18, 221, v19, 0);
    }
  }
  return 0;
}

uint64_t sub_121A4(int32x2_t *a1)
{
  if (sub_44EF8(0xDDu, 8))
  {
    int v2 = sub_44F3C(0xDDu);
    __uint64_t v3 = sub_4F1D8();
    int v4 = (const char *)sub_44F70(8);
    if (v2)
    {
      printf("%lld %d AVE %s: flushBitstream: bits = %d bitstream->bits %d\n", v3, 221, v4, 8, a1->i32[1]);
      __uint64_t v3 = sub_4F1D8();
      int v4 = (const char *)sub_44F70(8);
    }
    syslog(3, "%lld %d AVE %s: flushBitstream: bits = %d bitstream->bits %d", v3, 221, v4, 8, a1->i32[1]);
  }
  unsigned int v5 = a1->u32[1];
  if (v5 < 9)
  {
    uint64_t v12 = (unsigned __int32)a1->i32[0] >> -(char)v5 << (8 - v5);
    if (sub_44EF8(0xDDu, 8))
    {
      int v13 = sub_44F3C(0xDDu);
      __uint64_t v14 = sub_4F1D8();
      __uint64_t v15 = (const char *)sub_44F70(8);
      if (v13)
      {
        printf("%lld %d AVE %s: flushBitstream: new_bits %x result %x\n", v14, 221, v15, 8 - v5, v12);
        __uint64_t v16 = sub_4F1D8();
        __uint64_t v28 = (const char *)sub_44F70(8);
        syslog(3, "%lld %d AVE %s: flushBitstream: new_bits %x result %x", v16, 221, v28, 8 - v5, v12);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: flushBitstream: new_bits %x result %x", v14, 221, v15, 8 - v5, v12);
      }
    }
    unsigned int v25 = (unsigned int *)a1[1];
    unsigned int v26 = bswap32(*v25);
    a1[1] = (int32x2_t)(v25 + 1);
    a1->i32[0] = v26;
    a1->i32[1] = 32;
    uint64_t v18 = v12;
    if (v5 != 8)
    {
      uint64_t v18 = (v26 >> (v5 + 24)) | v12;
      a1->i32[0] = v26 << (8 - v5);
      a1->i32[1] = v5 + 24;
    }
  }
  else
  {
    if (sub_44EF8(0xDDu, 8))
    {
      int v6 = sub_44F3C(0xDDu);
      __uint64_t v7 = sub_4F1D8();
      __uint64_t v8 = (const char *)sub_44F70(8);
      __int32 v9 = a1->i32[1];
      if (v6)
      {
        printf("%lld %d AVE %s: flushBitstream: bitstream->data %x bitstream->bits %d\n", v7, 221, v8, a1->i32[0], v9);
        __uint64_t v10 = sub_4F1D8();
        int v11 = (const char *)sub_44F70(8);
        syslog(3, "%lld %d AVE %s: flushBitstream: bitstream->data %x bitstream->bits %d", v10, 221, v11, a1->i32[0], a1->i32[1]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: flushBitstream: bitstream->data %x bitstream->bits %d", v7, 221, v8, a1->i32[0], v9);
      }
    }
    v17.i32[0] = vshl_n_s32(*a1, 8uLL).u32[0];
    uint64_t v18 = HIBYTE(a1->u32[0]);
    v17.i32[1] = vadd_s32(*a1, (int32x2_t)0x700000007).i32[1];
    *a1 = v17;
    if (sub_44EF8(0xDDu, 8))
    {
      int v19 = sub_44F3C(0xDDu);
      __uint64_t v20 = sub_4F1D8();
      unsigned int v21 = (const char *)sub_44F70(8);
      __int32 v22 = a1->i32[1];
      if (v19)
      {
        printf("%lld %d AVE %s: flushBitstream: result %x bitstream->data %x bitstream->bits %d\n", v20, 221, v21, v18, a1->i32[0], v22);
        __uint64_t v23 = sub_4F1D8();
        unsigned int v24 = (const char *)sub_44F70(8);
        syslog(3, "%lld %d AVE %s: flushBitstream: result %x bitstream->data %x bitstream->bits %d", v23, 221, v24, v18, a1->i32[0], a1->i32[1]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: flushBitstream: result %x bitstream->data %x bitstream->bits %d", v20, 221, v21, v18, a1->i32[0], v22);
      }
    }
  }
  a1[2].i32[0] += 8;
  return v18;
}

void sub_124B8(int *a1, unsigned int a2, unsigned int a3)
{
  if (sub_44EF8(0xDDu, 8))
  {
    int v6 = sub_44F3C(0xDDu);
    __uint64_t v7 = sub_4F1D8();
    __uint64_t v8 = (const char *)sub_44F70(8);
    if (v6)
    {
      printf("%lld %d AVE %s: H2HeaderParser: write requested = %u bits %u\n", v7, 221, v8, a2, a3);
      __uint64_t v9 = sub_4F1D8();
      unsigned int v24 = (const char *)sub_44F70(8);
      syslog(3, "%lld %d AVE %s: H2HeaderParser: write requested = %u bits %u", v9, 221, v24, a2, a3);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H2HeaderParser: write requested = %u bits %u", v7, 221, v8, a2, a3);
    }
  }
  unsigned int v10 = a1[1];
  unsigned int v11 = v10 - a3;
  if (v10 <= a3)
  {
    unsigned int v12 = a3 - v10;
    *a1 = (*a1 << v10) | (a2 >> (a3 - v10));
    if (sub_44EF8(0xDDu, 8))
    {
      int v13 = sub_44F3C(0xDDu);
      __uint64_t v14 = sub_4F1D8();
      __uint64_t v15 = (const char *)sub_44F70(8);
      int v16 = *a1;
      if (v13)
      {
        printf("%lld %d AVE %s: H2HeaderParser: write data = 0x%08x\n", v14, 221, v15, v16);
        __uint64_t v17 = sub_4F1D8();
        unsigned int v25 = (const char *)sub_44F70(8);
        syslog(3, "%lld %d AVE %s: H2HeaderParser: write data = 0x%08x", v17, 221, v25, *a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H2HeaderParser: write data = 0x%08x", v14, 221, v15, v16);
      }
    }
    uint64_t v18 = (_DWORD *)*((void *)a1 + 1);
    _DWORD *v18 = bswap32(*a1);
    *((void *)a1 + 1) = v18 + 1;
    *a1 = a2 & ~(-1 << v12);
    unsigned int v11 = 32 - v12;
  }
  else
  {
    *a1 = (*a1 << a3) | a2;
  }
  a1[1] = v11;
  a1[4] += a3;
  if (sub_44EF8(0xDDu, 8))
  {
    int v19 = sub_44F3C(0xDDu);
    __uint64_t v20 = sub_4F1D8();
    unsigned int v21 = (const char *)sub_44F70(8);
    int v22 = a1[4];
    if (v19)
    {
      printf("%lld %d AVE %s: bitstream->total_bits = %u\n", v20, 221, v21, v22);
      __uint64_t v23 = sub_4F1D8();
      unsigned int v26 = (const char *)sub_44F70(8);
      syslog(3, "%lld %d AVE %s: bitstream->total_bits = %u", v23, 221, v26, a1[4]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: bitstream->total_bits = %u", v20, 221, v21, v22);
    }
  }
}

void sub_12718(uint64_t a1)
{
  while ((*(unsigned char *)(a1 + 16) & 0x1F) != 0)
    sub_124B8((int *)a1, 0, 1u);
}

uint64_t sub_12760(unsigned int *a1, uint64_t a2, uint64_t a3, _DWORD *a4, int a5, int a6)
{
  if (!a1)
  {
    if (sub_44EF8(3u, 4))
    {
      int v12 = sub_44F3C(3u);
      __uint64_t v13 = sub_4F1D8();
      __uint64_t v14 = (const char *)sub_44F70(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: in NULL\n", v13, 3, v14, "CopyVPSSPSPPSHeader", 270, "in != __null");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: in NULL");
    }
    goto LABEL_49;
  }
  if (!a2)
  {
    if (sub_44EF8(3u, 4))
    {
      int v15 = sub_44F3C(3u);
      __uint64_t v16 = sub_4F1D8();
      __uint64_t v17 = (const char *)sub_44F70(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: out NULL\n", v16, 3, v17, "CopyVPSSPSPPSHeader", 271, "out != __null");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: out NULL");
    }
    goto LABEL_49;
  }
  uint64_t v6 = a3;
  if (a3)
  {
    int v74 = 0;
    v73[0] = (int32x2_t)(bswap32(*a1) | 0x2000000000);
    v73[1] = (int32x2_t)(a1 + 1);
    v72[1] = a2;
    v72[0] = 0x2000000000;
    v72[2] = 0xFFFFFFFF00000000;
    if (sub_44EF8(0xDDu, 7))
    {
      int v8 = sub_44F3C(0xDDu);
      __uint64_t v9 = sub_4F1D8();
      unsigned int v10 = (const char *)sub_44F70(7);
      if (v8)
      {
        printf("%lld %d AVE %s: H264 - CopySPSPPSHeader: buffsize %d\n", v9, 221, v10, v6);
        __uint64_t v11 = sub_4F1D8();
        __uint64_t v62 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: buffsize %d", v11, 221, v62, v6);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: buffsize %d", v9, 221, v10, v6);
      }
    }
    uint64_t v22 = 0;
    int v23 = 0;
    int v24 = 0;
    int v69 = a4 + 1;
    uint64_t v25 = 1;
    __uint64_t v71 = a4;
    do
    {
      unsigned int v26 = sub_121A4(v73);
      int v27 = v24 + 1;
      sub_124B8((int *)v72, v26, 8u);
      int v23 = v26 | (v23 << 8);
      if (sub_44EF8(0xDDu, 7))
      {
        int v28 = v23;
        uint64_t v29 = v22;
        uint64_t v30 = v25;
        uint64_t v31 = v6;
        int v32 = sub_44F3C(0xDDu);
        __uint64_t v33 = sub_4F1D8();
        int v34 = (const char *)sub_44F70(7);
        if (v32)
        {
          printf("%lld %d AVE %s: H264 - CopyVPSSPSPPSHeader: startcode %x startcodeCount %d bytesRead %d temp %x\n", v33, 221, v34, v28, v29, v24 + 1, v26);
          __uint64_t v35 = sub_4F1D8();
          __uint64_t v36 = (const char *)sub_44F70(7);
          uint64_t v6 = a3;
          syslog(3, "%lld %d AVE %s: H264 - CopyVPSSPSPPSHeader: startcode %x startcodeCount %d bytesRead %d temp %x", v35, 221, v36, v28, v29, v24 + 1, v26);
          uint64_t v25 = v30;
          uint64_t v22 = v29;
          int v23 = v28;
        }
        else
        {
          uint64_t v37 = v29;
          int v66 = v29;
          int v23 = v28;
          syslog(3, "%lld %d AVE %s: H264 - CopyVPSSPSPPSHeader: startcode %x startcodeCount %d bytesRead %d temp %x", v33, 221, v34, v28, v66, v24 + 1, v26);
          uint64_t v6 = v31;
          uint64_t v25 = v30;
          uint64_t v22 = v37;
        }
        a4 = v71;
      }
      if (v23 == 1)
      {
        if (v22 == 2)
        {
          a4[1] = v24 - *a4 - 3;
        }
        else if (v22 == 1)
        {
          *a4 = v24 - 3;
        }
        if (v22 == v25 + 2)
        {
          int v38 = v24 - *a4 - 3;
          uint64_t v39 = (v25 + 1);
          a4[v39] = v38;
          if (v25)
          {
            uint64_t v40 = v25;
            uint64_t v41 = v69;
            do
            {
              int v42 = *v41++;
              v38 -= v42;
              a4[v39] = v38;
              --v40;
            }
            while (v40);
            uint64_t v25 = (v25 + 1);
          }
          else
          {
            uint64_t v25 = 1;
          }
        }
        uint64_t v22 = (v22 + 1);
        if (sub_44EF8(0xDDu, 7))
        {
          int v43 = sub_44F3C(0xDDu);
          __uint64_t v44 = sub_4F1D8();
          __uint64_t v45 = (const char *)sub_44F70(7);
          if (v43)
          {
            printf("%lld %d AVE %s: H264 - CopyVPSSPSPPSHeader: startcode %x = H264VIDEOENCODER_STARTCODE startcodeCount %d bytesRead %d expectedPPSs %d\n", v44, 221, v45, 1, v22, v24 + 1, v25);
            __uint64_t v46 = sub_4F1D8();
            __uint64_t v64 = (const char *)sub_44F70(7);
            a4 = v71;
            syslog(3, "%lld %d AVE %s: H264 - CopyVPSSPSPPSHeader: startcode %x = H264VIDEOENCODER_STARTCODE startcodeCount %d bytesRead %d expectedPPSs %d", v46, 221, v64, 1, v22, v27, v25);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264 - CopyVPSSPSPPSHeader: startcode %x = H264VIDEOENCODER_STARTCODE startcodeCount %d bytesRead %d expectedPPSs %d", v44, 221, v45, 1, v22, v24 + 1, v25);
          }
        }
      }
      ++v24;
    }
    while (v27 != v6);
    int v47 = a6 + 2 * a5;
    if (v22 == v47)
    {
      int v48 = v6 - *a4;
      uint64_t v49 = (v25 + 1);
      a4[v49] = v48;
      if (v25)
      {
        uint64_t v50 = v25;
        __uint64_t v51 = a4 + 1;
        do
        {
          int v52 = *v51++;
          v48 -= v52;
          a4[v49] = v48;
          --v50;
        }
        while (v50);
      }
      sub_12718((uint64_t)v72);
      goto LABEL_50;
    }
    if (sub_44EF8(3u, 4))
    {
      int v53 = sub_44F3C(3u);
      __uint64_t v54 = sub_4F1D8();
      __uint64_t v55 = (const char *)sub_44F70(4);
      if (v53)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - CopyVPSSPSPPSHeader ERROR: %d startCodeCount == %d\n", v54, 3, v55, "CopyVPSSPSPPSHeader", 327, "(startCodeCount == expectedStartCodes)", v47, v22);
        __uint64_t v56 = sub_4F1D8();
        sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopyVPSSPSPPSHeader ERROR: %d startCodeCount == %d", v56);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopyVPSSPSPPSHeader ERROR: %d startCodeCount == %d", v54);
      }
    }
LABEL_49:
    uint64_t v6 = 0;
LABEL_50:
    if (sub_44EF8(0xDDu, 7))
    {
      int v57 = sub_44F3C(0xDDu);
      __uint64_t v58 = sub_4F1D8();
      CFTypeID v59 = (const char *)sub_44F70(7);
      if (v57)
      {
        printf("%lld %d AVE %s: H264 - CopySPSPPSHeader: return bytesRead %d\n", v58, 221, v59, v6);
        __uint64_t v60 = sub_4F1D8();
        int v65 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: return bytesRead %d", v60, 221, v65, v6);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: return bytesRead %d", v58, 221, v59, v6);
      }
    }
    return v6;
  }
  if (sub_44EF8(0xDDu, 4))
  {
    int v18 = sub_44F3C(0xDDu);
    __uint64_t v19 = sub_4F1D8();
    __uint64_t v20 = (const char *)sub_44F70(4);
    if (v18)
    {
      printf("%lld %d AVE %s: H264 ERROR - CopySPSPPSHeader: buffsize %d\n", v19, 221, v20, 0);
      __uint64_t v21 = sub_4F1D8();
      uint64_t v63 = (const char *)sub_44F70(4);
      syslog(3, "%lld %d AVE %s: H264 ERROR - CopySPSPPSHeader: buffsize %d", v21, 221, v63, 0);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264 ERROR - CopySPSPPSHeader: buffsize %d", v19, 221, v20, 0);
    }
  }
  return 0;
}

uint64_t sub_12E9C(_DWORD *a1, uint64_t a2, char *a3, unsigned int a4, uint64_t a5, int a6, int *a7)
{
  if (sub_44EF8(0xDDu, 7))
  {
    int v14 = sub_44F3C(0xDDu);
    __uint64_t v15 = sub_4F1D8();
    __uint64_t v16 = (const char *)sub_44F70(7);
    if (v14)
    {
      printf("%lld %d AVE %s: \nAddSEIDebugMetadata: ENTER WITH useEPB = %d\n", v15, 221, v16, a6);
      __uint64_t v17 = sub_4F1D8();
      uint64_t v117 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: \nAddSEIDebugMetadata: ENTER WITH useEPB = %d", v17, 221, v117, a6);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: \nAddSEIDebugMetadata: ENTER WITH useEPB = %d", v15, 221, v16, a6);
    }
  }
  if (sub_44EF8(0xDDu, 7))
  {
    int v18 = sub_44F3C(0xDDu);
    __uint64_t v19 = sub_4F1D8();
    __uint64_t v20 = (const char *)sub_44F70(7);
    if (v18)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: frame = %d - SEI size %d\n", v19, 221, v20, *(_DWORD *)(a5 + 160), a4);
      __uint64_t v19 = sub_4F1D8();
      __uint64_t v20 = (const char *)sub_44F70(7);
    }
    syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: frame = %d - SEI size %d", v19, 221, v20, *(_DWORD *)(a5 + 160), a4);
  }
  if (!a1)
  {
    if (sub_44EF8(3u, 4))
    {
      int v26 = sub_44F3C(3u);
      __uint64_t v27 = sub_4F1D8();
      int v28 = (const char *)sub_44F70(4);
      if (v26)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: input buffer NULL. FAIL\n", v27, 3, v28, "AddSEIDebugMetadata", 459, "in != __null");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: input buffer NULL. FAIL");
    }
    return 4294966293;
  }
  if (!a3)
  {
    if (sub_44EF8(3u, 4))
    {
      int v29 = sub_44F3C(3u);
      __uint64_t v30 = sub_4F1D8();
      uint64_t v31 = (const char *)sub_44F70(4);
      if (v29)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: SEIData buffer NULL. FAIL\n", v30, 3, v31, "AddSEIDebugMetadata", 461, "SEIData != __null");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: SEIData buffer NULL. FAIL");
    }
    return 4294966293;
  }
  if (!a5)
  {
    if (sub_44EF8(3u, 4))
    {
      int v32 = sub_44F3C(3u);
      __uint64_t v33 = sub_4F1D8();
      int v34 = (const char *)sub_44F70(4);
      if (v32)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: Frame NULL. FAIL\n", v33, 3, v34, "AddSEIDebugMetadata", 463, "Frame != __null");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: Frame NULL. FAIL");
    }
    return 4294966293;
  }
  BOOL v21 = sub_44EF8(0xDDu, 7);
  if (a6)
  {
    if (v21)
    {
      int v22 = sub_44F3C(0xDDu);
      __uint64_t v23 = sub_4F1D8();
      int v24 = (const char *)sub_44F70(7);
      if (v22)
      {
        printf("%lld %d AVE %s: WILL DO EPB\n", v23, 221, v24);
        __uint64_t v25 = sub_4F1D8();
        uint64_t v118 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: WILL DO EPB", v25, 221, v118);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: WILL DO EPB", v23, 221, v24);
      }
    }
    uint64_t v41 = (char *)malloc_type_malloc(a4 + (a4 >> 1), 0x510880CFuLL);
    a4 = sub_13D54(a3, a4, v41);
    a3 = v41;
  }
  else if (v21)
  {
    int v35 = sub_44F3C(0xDDu);
    __uint64_t v36 = sub_4F1D8();
    uint64_t v37 = (const char *)sub_44F70(7);
    if (v35)
    {
      printf("%lld %d AVE %s: WILL NOT DO EPB\n", v36, 221, v37);
      __uint64_t v38 = sub_4F1D8();
      uint64_t v119 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: WILL NOT DO EPB", v38, 221, v119);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: WILL NOT DO EPB", v36, 221, v37);
    }
  }
  if (sub_44EF8(0xDDu, 7))
  {
    int v42 = sub_44F3C(0xDDu);
    __uint64_t v43 = sub_4F1D8();
    __uint64_t v44 = (const char *)sub_44F70(7);
    if (v42)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: payloadSize EPB %d\n", v43, 221, v44, a4);
      __uint64_t v45 = sub_4F1D8();
      uint64_t v120 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadSize EPB %d", v45, 221, v120, a4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadSize EPB %d", v43, 221, v44, a4);
    }
  }
  if (sub_44EF8(0xDDu, 7))
  {
    int v46 = sub_44F3C(0xDDu);
    __uint64_t v47 = sub_4F1D8();
    int v48 = (const char *)sub_44F70(7);
    if (v46)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: payloadSize UUID %d\n", v47, 221, v48, a4 + 16);
      __uint64_t v49 = sub_4F1D8();
      uint64_t v121 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadSize UUID %d", v49, 221, v121, a4 + 16);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadSize UUID %d", v47, 221, v48, a4 + 16);
    }
  }
  unsigned int v50 = a4 + 20;
  if (sub_44EF8(0xDDu, 7))
  {
    int v51 = sub_44F3C(0xDDu);
    __uint64_t v52 = sub_4F1D8();
    int v53 = (const char *)sub_44F70(7);
    if (v51)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: payloadSize meta %d\n", v52, 221, v53, a4 + 20);
      __uint64_t v54 = sub_4F1D8();
      v122 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadSize meta %d", v54, 221, v122, a4 + 20);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadSize meta %d", v52, 221, v53, a4 + 20);
    }
  }
  long long v134 = a7;
  *a1 = 0x1000000;
  if (sub_44EF8(0xDDu, 7))
  {
    int v55 = sub_44F3C(0xDDu);
    __uint64_t v56 = sub_4F1D8();
    int v57 = (const char *)sub_44F70(7);
    if (v55)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: start code blockBufferData %p (%ld)\n", v56, 221, v57, a1 + 1, 4);
      __uint64_t v58 = sub_4F1D8();
      uint64_t v123 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: start code blockBufferData %p (%ld)", v58, 221, v123, a1 + 1, 4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: start code blockBufferData %p (%ld)", v56, 221, v57, a1 + 1, 4);
    }
  }
  int v59 = *(_DWORD *)(a2 + 120);
  if (v59 == 1)
  {
    *((_WORD *)a1 + 2) = 334;
    uint64_t v60 = 6;
  }
  else
  {
    if (v59)
    {
      if (sub_44EF8(3u, 4))
      {
        int v66 = sub_44F3C(3u);
        __uint64_t v67 = sub_4F1D8();
        __uint64_t v68 = (const char *)sub_44F70(4);
        if (v66)
        {
          printf("%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL\n", v67, 3, v68, "AddSEIDebugMetadata", 516, "false");
          __uint64_t v69 = sub_4F1D8();
          CVPixelBufferRef v125 = (const char *)sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL", v69, 3, v125, "AddSEIDebugMetadata", 516, "false");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL", v67, 3, v68, "AddSEIDebugMetadata", 516, "false");
        }
      }
      uint64_t v39 = 4294966295;
      if (a3) {
        goto LABEL_113;
      }
      return v39;
    }
    *((unsigned char *)a1 + 4) = 6;
    uint64_t v60 = 5;
  }
  int v61 = (char *)a1 + v60;
  if (sub_44EF8(0xDDu, 7))
  {
    int v62 = sub_44F3C(0xDDu);
    __uint64_t v63 = sub_4F1D8();
    __uint64_t v64 = (const char *)sub_44F70(7);
    if (v62)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: nal_unit_type blockBufferData %p (%ld)\n", v63, 221, v64, (char *)a1 + v60, v60);
      __uint64_t v65 = sub_4F1D8();
      v124 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: nal_unit_type blockBufferData %p (%ld)", v65, 221, v124, (char *)a1 + v60, v60);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: nal_unit_type blockBufferData %p (%ld)", v63, 221, v64, (char *)a1 + v60, v60);
    }
  }
  *int v61 = 5;
  uint64_t v70 = (uint64_t)(v61 + 1);
  if (sub_44EF8(0xDDu, 7))
  {
    int v71 = sub_44F3C(0xDDu);
    __uint64_t v72 = sub_4F1D8();
    int v73 = (const char *)sub_44F70(7);
    if (v71)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: payloadType blockBufferData %p (%ld)\n", v72, 221, v73, (const void *)v70, v70 - (void)a1);
      __uint64_t v74 = sub_4F1D8();
      long long v126 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadType blockBufferData %p (%ld)", v74, 221, v126, (const void *)v70, v70 - (void)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadType blockBufferData %p (%ld)", v72, 221, v73, (const void *)v70, v70 - (void)a1);
    }
  }
  if (sub_44EF8(0xDDu, 7))
  {
    int v75 = sub_44F3C(0xDDu);
    __uint64_t v76 = sub_4F1D8();
    __uint64_t v77 = (const char *)sub_44F70(7);
    if (v75)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: start payloadSize sizeTemp %d blockBufferData %p (%ld)\n", v76, 221, v77, a4 + 20, (const void *)v70, v70 - (void)a1);
      __uint64_t v78 = sub_4F1D8();
      long long v127 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v78, 221, v127, a4 + 20, (const void *)v70, v70 - (void)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v76, 221, v77, a4 + 20, (const void *)v70, v70 - (void)a1);
    }
  }
  if (v50 < 0xFF)
  {
    int v80 = 0;
  }
  else
  {
    unint64_t v79 = (a4 - 235) / 0xFFuLL;
    memset((void *)v70, 255, v79 + 1);
    LOBYTE(v50) = v79 + a4 + 21;
    uint64_t v70 = (uint64_t)a1 + v60 + v79 + 2;
    int v80 = v79 + 1;
  }
  *(unsigned char *)uint64_t v70 = v50;
  uint64_t v81 = v70 + 1;
  if (sub_44EF8(0xDDu, 7))
  {
    int v82 = sub_44F3C(0xDDu);
    __uint64_t v83 = sub_4F1D8();
    __uint64_t v84 = (const char *)sub_44F70(7);
    int v85 = v80 + 1;
    if (v82)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: end payloadSize bytes %d blockBufferData %p (%ld)\n", v83, 221, v84, v85, (const void *)(v70 + 1), v81 - (void)a1);
      __uint64_t v86 = sub_4F1D8();
      long long v128 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: end payloadSize bytes %d blockBufferData %p (%ld)", v86, 221, v128, v85, (const void *)(v70 + 1), v81 - (void)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: end payloadSize bytes %d blockBufferData %p (%ld)", v83, 221, v84, v85, (const void *)(v70 + 1), v81 - (void)a1);
    }
  }
  *(_OWORD *)(v70 + 1) = xmmword_83730;
  if (sub_44EF8(0xDDu, 7))
  {
    uint64_t v87 = v70 + 17;
    int v88 = sub_44F3C(0xDDu);
    __uint64_t v89 = sub_4F1D8();
    int v90 = (const char *)sub_44F70(7);
    if (v88)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: UUID blockBufferData %p (%ld)\n", v89, 221, v90, (const void *)(v70 + 17), v87 - (void)a1);
      __uint64_t v91 = sub_4F1D8();
      long long v129 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: UUID blockBufferData %p (%ld)", v91, 221, v129, (const void *)(v70 + 17), v87 - (void)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: UUID blockBufferData %p (%ld)", v89, 221, v90, (const void *)(v70 + 17), v87 - (void)a1);
    }
  }
  *(_DWORD *)(v70 + 17) = 1635018093;
  __int16 v92 = (unsigned char *)(v70 + 21);
  if (sub_44EF8(0xDDu, 7))
  {
    int v93 = sub_44F3C(0xDDu);
    __uint64_t v94 = sub_4F1D8();
    __int16 v95 = (const char *)sub_44F70(7);
    int v96 = v92 - a1;
    if (v93)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: meta blockBufferData %p (%ld)\n", v94, 221, v95, v92, v92 - (unsigned char *)a1);
      __uint64_t v97 = sub_4F1D8();
      long long v130 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: meta blockBufferData %p (%ld)", v97, 221, v130, v92, v92 - (unsigned char *)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: meta blockBufferData %p (%ld)", v94, 221, v95, v92, v92 - (unsigned char *)a1);
    }
  }
  else
  {
    int v96 = v92 - a1;
  }
  if (*v134 < a4 + v96 + 1)
  {
    if (sub_44EF8(0xDDu, 4))
    {
      int v98 = sub_44F3C(0xDDu);
      __uint64_t v99 = sub_4F1D8();
      __uint64_t v100 = (const char *)sub_44F70(4);
      if (v98)
      {
        printf("%lld %d AVE %s: %s:%d %s | AddSEIDebugMetadata: SEI buffer overflow. pSEISize:%d\n", v99, 221, v100, "AddSEIDebugMetadata", 603, "ret == 0", *v134);
        __uint64_t v99 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AddSEIDebugMetadata: SEI buffer overflow. pSEISize:%d", v99);
    }
    uint64_t v39 = 4294966293;
    if (!a3) {
      return v39;
    }
LABEL_113:
    if (a6) {
      free(a3);
    }
    return v39;
  }
  memcpy(v92, a3, a4);
  v101 = &v92[a4];
  if (sub_44EF8(0xDDu, 7))
  {
    int v102 = sub_44F3C(0xDDu);
    __uint64_t v103 = sub_4F1D8();
    v104 = (const char *)sub_44F70(7);
    if (v102)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: data blockBufferData %p (%ld)\n", v103, 221, v104, v101, v101 - (unsigned char *)a1);
      __uint64_t v105 = sub_4F1D8();
      long long v131 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: data blockBufferData %p (%ld)", v105, 221, v131, v101, v101 - (unsigned char *)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: data blockBufferData %p (%ld)", v103, 221, v104, v101, v101 - (unsigned char *)a1);
    }
  }
  unsigned char *v101 = 0x80;
  v106 = v101 + 1;
  if (sub_44EF8(0xDDu, 7))
  {
    int v107 = sub_44F3C(0xDDu);
    __uint64_t v108 = sub_4F1D8();
    v109 = (const char *)sub_44F70(7);
    int64_t v110 = v106 - (unsigned char *)a1;
    if (v107)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: rbsp_trailing_bits blockBufferData %p (%ld)\n", v108, 221, v109, v106, v106 - (unsigned char *)a1);
      __uint64_t v111 = sub_4F1D8();
      long long v132 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: rbsp_trailing_bits blockBufferData %p (%ld)", v111, 221, v132, v106, v110);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: rbsp_trailing_bits blockBufferData %p (%ld)", v108, 221, v109, v106, v106 - (unsigned char *)a1);
    }
  }
  else
  {
    LODWORD(v110) = v106 - a1;
  }
  *long long v134 = v110;
  if (sub_44EF8(0xDDu, 7))
  {
    int v112 = sub_44F3C(0xDDu);
    __uint64_t v113 = sub_4F1D8();
    v114 = (const char *)sub_44F70(7);
    int v115 = *v134;
    if (v112)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: final SEISize %d\n", v113, 221, v114, v115);
      __uint64_t v116 = sub_4F1D8();
      long long v133 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: final SEISize %d", v116, 221, v133, *v134);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: final SEISize %d", v113, 221, v114, v115);
    }
  }
  uint64_t v39 = 0;
  if (a3) {
    goto LABEL_113;
  }
  return v39;
}

uint64_t sub_13D54(char *a1, unsigned int a2, unsigned char *a3)
{
  if (a2 <= 2)
  {
    uint64_t result = sub_44EF8(3u, 4);
    if (!result) {
      return result;
    }
    int v17 = sub_44F3C(3u);
    __uint64_t v18 = sub_4F1D8();
    __uint64_t v19 = (const char *)sub_44F70(4);
    if (v17)
    {
      __uint64_t v20 = "length >= 3";
      int v21 = 378;
LABEL_20:
      printf("%lld %d AVE %s: %s:%d %s | H264 - AddEPB: output buffer NULL. FAIL\n", v18, 3, v19, "AddEPB", v21, v20);
      __uint64_t v23 = sub_4F1D8();
      int v35 = (const char *)sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - AddEPB: output buffer NULL. FAIL", v23, 3, v35, "AddEPB", v21, v20);
      return 0;
    }
    __uint64_t v27 = "length >= 3";
    int v28 = 378;
LABEL_34:
    syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - AddEPB: output buffer NULL. FAIL", v18, 3, v19, "AddEPB", v28, v27);
    return 0;
  }
  int v3 = (int)a3;
  if (!a3)
  {
    uint64_t result = sub_44EF8(3u, 4);
    if (!result) {
      return result;
    }
    int v22 = sub_44F3C(3u);
    __uint64_t v18 = sub_4F1D8();
    __uint64_t v19 = (const char *)sub_44F70(4);
    if (v22)
    {
      __uint64_t v20 = "outbuffer != __null";
      int v21 = 379;
      goto LABEL_20;
    }
    __uint64_t v27 = "outbuffer != __null";
    int v28 = 379;
    goto LABEL_34;
  }
  unsigned int v6 = a2 - 3;
  int v37 = (int)a3;
  unsigned int v7 = 0;
  if (a2 == 3)
  {
    unsigned int v10 = a3;
  }
  else
  {
    int v8 = a3;
    do
    {
      int v9 = *(_DWORD *)a1;
      if ((*(_DWORD *)a1 & 0xFCFFFF) != 0)
      {
        ++a1;
        *int v8 = v9;
        ++v7;
        unsigned int v10 = v8 + 1;
      }
      else
      {
        *(_WORD *)int v8 = 0;
        unsigned int v10 = v8 + 3;
        v8[2] = 3;
        a1 += 2;
        v7 += 2;
        if (sub_44EF8(0xDDu, 7))
        {
          int v11 = sub_44F3C(0xDDu);
          __uint64_t v12 = sub_4F1D8();
          __uint64_t v13 = (const char *)sub_44F70(7);
          int v14 = v10 - v3;
          if (v11)
          {
            printf("%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!\n", v12, 221, v13, v14, v7);
            __uint64_t v15 = sub_4F1D8();
            int v34 = (const char *)sub_44F70(7);
            syslog(3, "%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!", v15, 221, v34, v14, v7);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!", v12, 221, v13, v14, v7);
          }
          int v3 = v37;
        }
      }
      int v8 = v10;
    }
    while (v7 < v6);
  }
  if (*a1 || a1[1] || (unsigned int v29 = a1[2], v29 > 3))
  {
    unsigned int v24 = a2 - v7;
    if (a2 > v7)
    {
      int v25 = v37;
      do
      {
        char v26 = *a1++;
        *v10++ = v26;
        --v24;
      }
      while (v24);
      return (v10 - v25);
    }
  }
  else
  {
    if (sub_44EF8(0xDDu, 7))
    {
      int v30 = sub_44F3C(0xDDu);
      __uint64_t v31 = sub_4F1D8();
      int v32 = (const char *)sub_44F70(7);
      if (v30)
      {
        printf("%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!\n", v31, 221, v32, v10 - v37, v7);
        __uint64_t v33 = sub_4F1D8();
        __uint64_t v36 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!", v33, 221, v36, v10 - v37, v7);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!", v31, 221, v32, v10 - v37, v7);
      }
    }
    *(_WORD *)unsigned int v10 = 0;
    v10[2] = 3;
    v10[3] = v29;
    LODWORD(v10) = v10 + 4;
  }
  int v25 = v37;
  return (v10 - v25);
}

uint64_t sub_140A0(_DWORD *a1, uint64_t a2, uint64_t a3, int a4, int *a5)
{
  if (sub_44EF8(0xDDu, 7))
  {
    int v10 = sub_44F3C(0xDDu);
    __uint64_t v11 = sub_4F1D8();
    __uint64_t v12 = (const char *)sub_44F70(7);
    int v13 = *(_DWORD *)(a3 + 160);
    if (v10)
    {
      printf("%lld %d AVE %s: \nAdd Lux SEI: frame = %d - SEI size %d useEPB = %d\n", v11, 221, v12, v13, 0, a4);
      __uint64_t v14 = sub_4F1D8();
      int v93 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: \nAdd Lux SEI: frame = %d - SEI size %d useEPB = %d", v14, 221, v93, *(_DWORD *)(a3 + 160), 0, a4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: \nAdd Lux SEI: frame = %d - SEI size %d useEPB = %d", v11, 221, v12, v13, 0, a4);
    }
  }
  if (!a1)
  {
    if (sub_44EF8(3u, 4))
    {
      int v23 = sub_44F3C(3u);
      __uint64_t v24 = sub_4F1D8();
      int v25 = (const char *)sub_44F70(4);
      if (v23)
      {
        printf("%lld %d AVE %s: %s:%d %s | AddRegisteredITUTT35SEI: input buffer NULL. FAIL\n", v24, 3, v25, "AddRegisteredITUTT35SEI", 650, "in != __null");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AddRegisteredITUTT35SEI: input buffer NULL. FAIL");
    }
    return 4294966293;
  }
  if (!a2)
  {
    if (sub_44EF8(3u, 4))
    {
      int v26 = sub_44F3C(3u);
      __uint64_t v27 = sub_4F1D8();
      int v28 = (const char *)sub_44F70(4);
      if (v26)
      {
        printf("%lld %d AVE %s: %s:%d %s | AddRegisteredITUTT35SEI: video_params_drivers NULL. FAIL\n", v27, 3, v28, "AddRegisteredITUTT35SEI", 652, "video_params_drivers != __null");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AddRegisteredITUTT35SEI: video_params_drivers NULL. FAIL");
    }
    return 4294966293;
  }
  if (!a3)
  {
    if (sub_44EF8(3u, 4))
    {
      int v29 = sub_44F3C(3u);
      __uint64_t v30 = sub_4F1D8();
      __uint64_t v31 = (const char *)sub_44F70(4);
      if (v29)
      {
        printf("%lld %d AVE %s: %s:%d %s | AddRegisteredITUTT35SEI: Frame NULL. FAIL\n", v30, 3, v31, "AddRegisteredITUTT35SEI", 654, "Frame != __null");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AddRegisteredITUTT35SEI: Frame NULL. FAIL");
    }
    return 4294966293;
  }
  __uint64_t v15 = (char *)malloc_type_malloc(9uLL, 0x16A1676CuLL);
  if (v15)
  {
    __uint64_t v16 = v15;
    int v17 = *(_DWORD *)(a3 + 2436);
    *(_DWORD *)__uint64_t v15 = 1441775285;
    v15[4] = -86;
    v15[5] = HIBYTE(v17);
    v15[6] = BYTE2(v17);
    v15[7] = BYTE1(v17);
    v15[8] = v17;
    BOOL v18 = sub_44EF8(0xDDu, 7);
    if (a4)
    {
      if (v18)
      {
        int v19 = sub_44F3C(0xDDu);
        __uint64_t v20 = sub_4F1D8();
        int v21 = (const char *)sub_44F70(7);
        if (v19)
        {
          printf("%lld %d AVE %s: AddSEI: WILL DO EPB\n", v20, 221, v21);
          __uint64_t v22 = sub_4F1D8();
          __uint64_t v94 = (const char *)sub_44F70(7);
          syslog(3, "%lld %d AVE %s: AddSEI: WILL DO EPB", v22, 221, v94);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: AddSEI: WILL DO EPB", v20, 221, v21);
        }
      }
      int v42 = malloc_type_malloc(0xDuLL, 0x33439C02uLL);
      unsigned int __n = sub_13D54(v16, 9u, v42);
    }
    else
    {
      if (v18)
      {
        int v36 = sub_44F3C(0xDDu);
        __uint64_t v37 = sub_4F1D8();
        __uint64_t v38 = (const char *)sub_44F70(7);
        if (v36)
        {
          printf("%lld %d AVE %s: AddSEI: WILL NOT DO EPB\n", v37, 221, v38);
          __uint64_t v39 = sub_4F1D8();
          int v96 = (const char *)sub_44F70(7);
          syslog(3, "%lld %d AVE %s: AddSEI: WILL NOT DO EPB", v39, 221, v96);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: AddSEI: WILL NOT DO EPB", v37, 221, v38);
        }
      }
      unsigned int __n = 9;
      int v42 = v16;
    }
    if (sub_44EF8(0xDDu, 7))
    {
      int v43 = sub_44F3C(0xDDu);
      __uint64_t v44 = sub_4F1D8();
      __uint64_t v45 = (const char *)sub_44F70(7);
      if (v43)
      {
        printf("%lld %d AVE %s: AddSEI: payloadSize EPB %d\n", v44, 221, v45, 9);
        __uint64_t v46 = sub_4F1D8();
        __uint64_t v97 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: AddSEI: payloadSize EPB %d", v46, 221, v97, 9);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: payloadSize EPB %d", v44, 221, v45, 9);
      }
    }
    size_t __n_4 = (size_t)v42;
    *a1 = 0x1000000;
    if (sub_44EF8(0xDDu, 7))
    {
      int v47 = sub_44F3C(0xDDu);
      __uint64_t v48 = sub_4F1D8();
      __uint64_t v49 = (const char *)sub_44F70(7);
      if (v47)
      {
        printf("%lld %d AVE %s: AddSEI: start code blockBufferData %p (%ld)\n", v48, 221, v49, a1 + 1, 4);
        __uint64_t v50 = sub_4F1D8();
        int v98 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: AddSEI: start code blockBufferData %p (%ld)", v50, 221, v98, a1 + 1, 4);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: start code blockBufferData %p (%ld)", v48, 221, v49, a1 + 1, 4);
      }
    }
    int v51 = *(_DWORD *)(a2 + 120);
    if (v51 == 1)
    {
      *((_WORD *)a1 + 2) = 334;
      uint64_t v52 = 6;
    }
    else
    {
      if (v51)
      {
        if (sub_44EF8(3u, 4))
        {
          int v58 = sub_44F3C(3u);
          __uint64_t v59 = sub_4F1D8();
          uint64_t v60 = (const char *)sub_44F70(4);
          if (v58)
          {
            printf("%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL\n", v59, 3, v60, "AddRegisteredITUTT35SEI", 750, "false");
            __uint64_t v61 = sub_4F1D8();
            __uint64_t v100 = (const char *)sub_44F70(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL", v61, 3, v100, "AddRegisteredITUTT35SEI", 750, "false");
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL", v59, 3, v60, "AddRegisteredITUTT35SEI", 750, "false");
          }
        }
        uint64_t v40 = 4294966295;
        __uint64_t v72 = v42;
        if (!v42) {
          goto LABEL_89;
        }
LABEL_87:
        if (a4) {
          free(v72);
        }
LABEL_89:
        free(v16);
        return v40;
      }
      *((unsigned char *)a1 + 4) = 6;
      uint64_t v52 = 5;
    }
    int v53 = (char *)a1 + v52;
    if (sub_44EF8(0xDDu, 7))
    {
      int v54 = sub_44F3C(0xDDu);
      __uint64_t v55 = sub_4F1D8();
      __uint64_t v56 = (const char *)sub_44F70(7);
      if (v54)
      {
        printf("%lld %d AVE %s: AddSEI: nal_unit_type blockBufferData %p (%ld)\n", v55, 221, v56, (char *)a1 + v52, v52);
        __uint64_t v57 = sub_4F1D8();
        __uint64_t v99 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: AddSEI: nal_unit_type blockBufferData %p (%ld)", v57, 221, v99, (char *)a1 + v52, v52);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: nal_unit_type blockBufferData %p (%ld)", v55, 221, v56, (char *)a1 + v52, v52);
      }
    }
    *int v53 = 4;
    int v62 = v53 + 1;
    if (sub_44EF8(0xDDu, 7))
    {
      int v63 = sub_44F3C(0xDDu);
      __uint64_t v64 = sub_4F1D8();
      __uint64_t v65 = (const char *)sub_44F70(7);
      if (v63)
      {
        printf("%lld %d AVE %s: AddSEI: payloadType blockBufferData %p (%ld)\n", v64, 221, v65, v53 + 1, v62 - (unsigned char *)a1);
        __uint64_t v66 = sub_4F1D8();
        v101 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: AddSEI: payloadType blockBufferData %p (%ld)", v66, 221, v101, v53 + 1, v62 - (unsigned char *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: payloadType blockBufferData %p (%ld)", v64, 221, v65, v53 + 1, v62 - (unsigned char *)a1);
      }
    }
    if (sub_44EF8(0xDDu, 7))
    {
      int v67 = sub_44F3C(0xDDu);
      __uint64_t v68 = sub_4F1D8();
      __uint64_t v69 = (const char *)sub_44F70(7);
      if (v67)
      {
        printf("%lld %d AVE %s: AddSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)\n", v68, 221, v69, 9, v53 + 1, v62 - (unsigned char *)a1);
        __uint64_t v70 = sub_4F1D8();
        int v102 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: AddSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v70, 221, v102, 9, v53 + 1, v62 - (unsigned char *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v68, 221, v69, 9, v53 + 1, v62 - (unsigned char *)a1);
      }
    }
    v53[1] = 9;
    int v71 = v53 + 2;
    __uint64_t v72 = v42;
    if (sub_44EF8(0xDDu, 7))
    {
      int v73 = sub_44F3C(0xDDu);
      __uint64_t v74 = sub_4F1D8();
      int v75 = (const char *)sub_44F70(7);
      if (v73)
      {
        printf("%lld %d AVE %s: AddSEI: end payloadSize bytes %d blockBufferData %p (%ld)\n", v74, 221, v75, 1, v71, v71 - (unsigned char *)a1);
        __uint64_t v76 = sub_4F1D8();
        __uint64_t v103 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: AddSEI: end payloadSize bytes %d blockBufferData %p (%ld)", v76, 221, v103, 1, v71, v71 - (unsigned char *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: end payloadSize bytes %d blockBufferData %p (%ld)", v74, 221, v75, 1, v71, v71 - (unsigned char *)a1);
      }
    }
    memcpy(v71, v42, __n);
    __uint64_t v77 = &v71[__n];
    if (sub_44EF8(0xDDu, 7))
    {
      int v78 = sub_44F3C(0xDDu);
      __uint64_t v79 = sub_4F1D8();
      int v80 = (const char *)sub_44F70(7);
      if (v78)
      {
        printf("%lld %d AVE %s: AddSEI: data blockBufferData %p (%ld)\n", v79, 221, v80, v77, v77 - (unsigned char *)a1);
        __uint64_t v81 = sub_4F1D8();
        v104 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: AddSEI: data blockBufferData %p (%ld)", v81, 221, v104, v77, v77 - (unsigned char *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: data blockBufferData %p (%ld)", v79, 221, v80, v77, v77 - (unsigned char *)a1);
      }
    }
    *__uint64_t v77 = 0x80;
    int v82 = v77 + 1;
    if (sub_44EF8(0xDDu, 7))
    {
      int v83 = sub_44F3C(0xDDu);
      __uint64_t v84 = sub_4F1D8();
      int v85 = (const char *)sub_44F70(7);
      int64_t v86 = v82 - (unsigned char *)a1;
      if (v83)
      {
        printf("%lld %d AVE %s: AddSEI: rbsp_trailing_bits blockBufferData %p (%ld)\n", v84, 221, v85, v82, v82 - (unsigned char *)a1);
        __uint64_t v87 = sub_4F1D8();
        __uint64_t v105 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: AddSEI: rbsp_trailing_bits blockBufferData %p (%ld)", v87, 221, v105, v82, v86);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: rbsp_trailing_bits blockBufferData %p (%ld)", v84, 221, v85, v82, v82 - (unsigned char *)a1);
      }
    }
    else
    {
      LODWORD(v86) = v82 - a1;
    }
    *a5 = v86;
    if (sub_44EF8(0xDDu, 7))
    {
      int v88 = sub_44F3C(0xDDu);
      __uint64_t v89 = sub_4F1D8();
      int v90 = (const char *)sub_44F70(7);
      int v91 = *a5;
      if (v88)
      {
        printf("%lld %d AVE %s: AddSEI: final SEISize %d\n", v89, 221, v90, v91);
        __uint64_t v92 = sub_4F1D8();
        v106 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: AddSEI: final SEISize %d", v92, 221, v106, *a5);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: final SEISize %d", v89, 221, v90, v91);
      }
    }
    uint64_t v40 = 0;
    if (!__n_4) {
      goto LABEL_89;
    }
    goto LABEL_87;
  }
  if (sub_44EF8(0xDDu, 4))
  {
    int v32 = sub_44F3C(0xDDu);
    __uint64_t v33 = sub_4F1D8();
    int v34 = (const char *)sub_44F70(4);
    if (v32)
    {
      printf("%lld %d AVE %s: malloc for SEI failed.\n", v33, 221, v34);
      __uint64_t v35 = sub_4F1D8();
      __int16 v95 = (const char *)sub_44F70(4);
      syslog(3, "%lld %d AVE %s: malloc for SEI failed.", v35, 221, v95);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: malloc for SEI failed.", v33, 221, v34);
    }
  }
  return 0;
}

uint64_t sub_14C40(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int *a6)
{
  if (sub_44EF8(0xDDu, 7))
  {
    int v12 = sub_44F3C(0xDDu);
    __uint64_t v13 = sub_4F1D8();
    __uint64_t v14 = (const char *)sub_44F70(7);
    int v15 = *(_DWORD *)(a4 + 160);
    if (v12)
    {
      printf("%lld %d AVE %s: \nAddSEI: frame = %d - SEI size %d useEPB = %d\n", v13, 221, v14, v15, 0, a5);
      __uint64_t v16 = sub_4F1D8();
      v124 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: \nAddSEI: frame = %d - SEI size %d useEPB = %d", v16, 221, v124, *(_DWORD *)(a4 + 160), 0, a5);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: \nAddSEI: frame = %d - SEI size %d useEPB = %d", v13, 221, v14, v15, 0, a5);
    }
  }
  if (!a1)
  {
    if (sub_44EF8(3u, 4))
    {
      int v19 = sub_44F3C(3u);
      __uint64_t v20 = sub_4F1D8();
      int v21 = (const char *)sub_44F70(4);
      if (v19)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: input buffer NULL. FAIL\n", v20, 3, v21, "AddUnregisteredSEI", 830, "in != __null");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: input buffer NULL. FAIL");
    }
    return 4294966293;
  }
  if (!a2)
  {
    if (sub_44EF8(3u, 4))
    {
      int v22 = sub_44F3C(3u);
      __uint64_t v23 = sub_4F1D8();
      __uint64_t v24 = (const char *)sub_44F70(4);
      if (v22)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: video_params_drivers NULL. FAIL\n", v23, 3, v24, "AddUnregisteredSEI", 832, "video_params_drivers != __null");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: video_params_drivers NULL. FAIL");
    }
    return 4294966293;
  }
  if (!a3)
  {
    if (sub_44EF8(3u, 4))
    {
      int v25 = sub_44F3C(3u);
      __uint64_t v26 = sub_4F1D8();
      __uint64_t v27 = (const char *)sub_44F70(4);
      if (v25)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: bRCEnableDriver NULL. FAIL\n", v26, 3, v27, "AddUnregisteredSEI", 834, "bRCEnableDriver != __null");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: bRCEnableDriver NULL. FAIL");
    }
    return 4294966293;
  }
  if (!a4)
  {
    if (sub_44EF8(3u, 4))
    {
      int v28 = sub_44F3C(3u);
      __uint64_t v29 = sub_4F1D8();
      __uint64_t v30 = (const char *)sub_44F70(4);
      if (v28)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: Frame NULL. FAIL\n", v29, 3, v30, "AddUnregisteredSEI", 836, "Frame != __null");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: Frame NULL. FAIL");
    }
    return 4294966293;
  }
  int v17 = (_DWORD *)(a4 + 23468);
  unsigned int v18 = *(unsigned __int8 *)(a2 + 45);
  if (*(unsigned char *)(a2 + 45))
  {
    if (*(double *)(a4 + 2384) != 0.0 && (*v17 == 3 || *(_DWORD *)(a4 + 23768) == 21)) {
      unsigned int v18 = 9;
    }
    else {
      unsigned int v18 = 0;
    }
  }
  if (*(unsigned char *)(a2 + 49) && *(double *)(a4 + 2368) != 0.0) {
    v18 += 9;
  }
  if (*(unsigned char *)(a2 + 46) && !*(_DWORD *)(a4 + 160)) {
    v18 += 5;
  }
  if (*(unsigned char *)(a2 + 47) && !*(_DWORD *)(a4 + 160)) {
    v18 += 5;
  }
  if (*(unsigned char *)(a2 + 48) && !*(_DWORD *)(a4 + 160)) {
    v18 += 5;
  }
  if (*(unsigned char *)(a2 + 50) && *(unsigned char *)(a2 + 55)) {
    v18 += 25;
  }
  if (*(unsigned char *)(a2 + 51) && *(unsigned char *)(a2 + 56)) {
    v18 += 5;
  }
  if (*(unsigned char *)(a2 + 52) && *(unsigned char *)(a2 + 85)) {
    v18 += 18;
  }
  if (*(unsigned char *)(a2 + 53)) {
    size_t v31 = v18 + 7;
  }
  else {
    size_t v31 = v18;
  }
  if (!v31) {
    return 0;
  }
  int v32 = (char *)malloc_type_malloc(v31, 0x487433EDuLL);
  if (!v32)
  {
    if (sub_44EF8(0xDDu, 4))
    {
      uint64_t v37 = sub_44F3C(0xDDu);
      __uint64_t v38 = sub_4F1D8();
      __uint64_t v39 = (const char *)sub_44F70(4);
      if (!v37)
      {
        syslog(3, "%lld %d AVE %s: malloc for SEI failed.", v38, 221, v39);
        return v37;
      }
      printf("%lld %d AVE %s: malloc for SEI failed.\n", v38, 221, v39);
      __uint64_t v40 = sub_4F1D8();
      uint64_t v41 = (const char *)sub_44F70(4);
      syslog(3, "%lld %d AVE %s: malloc for SEI failed.", v40, 221, v41);
    }
    return 0;
  }
  __uint64_t v33 = v32;
  int v34 = v32;
  if (*(unsigned char *)(a2 + 45))
  {
    int v34 = v32;
    if (*(double *)(a4 + 2384) != 0.0)
    {
      if (*v17 == 3 || (int v34 = v32, *(_DWORD *)(a4 + 23768) == 21))
      {
        *int v32 = 0;
        *(void *)(v32 + 1) = bswap64(vcvtd_n_u64_f64(*(double *)(a4 + 2384), 0x20uLL));
        int v34 = v32 + 9;
      }
    }
  }
  if (*(unsigned char *)(a2 + 49) && *(double *)(a4 + 2368) != 0.0)
  {
    *int v34 = 4;
    *(void *)(v34 + 1) = bswap64(vcvtd_n_u64_f64(*(double *)(a4 + 2368), 0x20uLL));
    v34 += 9;
  }
  if (*(unsigned char *)(a2 + 46) && !*(_DWORD *)(a4 + 160))
  {
    LODWORD(v36) = *(_DWORD *)(a3 + 4);
    if (v36)
    {
      if (v36 == 20)
      {
        LOBYTE(v36) = -52;
        char v43 = -35;
      }
      else
      {
        LOBYTE(v36) = -52;
        char v43 = -1;
      }
    }
    else
    {
      char v43 = 0;
    }
    char v44 = 1;
    goto LABEL_86;
  }
  if (*(unsigned char *)(a2 + 47) && !*(_DWORD *)(a4 + 160))
  {
    unsigned int v35 = *(_DWORD *)(a2 + 136);
    if (v35 > 6) {
      LOBYTE(v36) = 0;
    }
    else {
      unint64_t v36 = 0x66553322114400uLL >> (8 * v35);
    }
    char v43 = -18;
    char v44 = 3;
LABEL_86:
    *int v34 = v44;
    v34[1] = v43;
    v34[2] = v36;
    v34[3] = v36;
    v34[4] = v43;
    v34 += 5;
  }
  if (*(unsigned char *)(a2 + 48) && !*(_DWORD *)(a4 + 160))
  {
    *int v34 = 2;
    v34[1] = *(unsigned char *)(a3 + 3);
    v34[2] = *(_WORD *)(a3 + 2);
    v34[3] = BYTE1(*(_DWORD *)a3);
    v34[4] = *(_DWORD *)a3;
    v34 += 5;
  }
  if (*(unsigned char *)(a2 + 50) && *(unsigned char *)(a2 + 55))
  {
    *int v34 = 5;
    long long v45 = *(_OWORD *)(a2 + 57);
    *(void *)(v34 + 17) = *(void *)(a2 + 73);
    *(_OWORD *)(v34 + 1) = v45;
    v34 += 25;
  }
  if (*(unsigned char *)(a2 + 51) && *(unsigned char *)(a2 + 56))
  {
    *int v34 = 6;
    *(_DWORD *)(v34 + 1) = *(_DWORD *)(a2 + 81);
    v34 += 5;
  }
  if (*(unsigned char *)(a2 + 52) && *(unsigned char *)(a2 + 85))
  {
    *int v34 = 7;
    long long v46 = *(_OWORD *)(a2 + 86);
    v34[17] = *(unsigned char *)(a2 + 102);
    *(_OWORD *)(v34 + 1) = v46;
    v34 += 18;
  }
  if (*(unsigned char *)(a2 + 53))
  {
    double v47 = *(double *)(a4 + 2408);
    if (v47 == 0.0
      || (double v48 = *(double *)(a4 + 2392), v48 == 0.0)
      || (double v49 = *(double *)(a4 + 2400), v49 == 0.0)
      || (double v50 = *(double *)(a4 + 2416), v50 == 0.0))
    {
      char v52 = 0;
      unsigned int v51 = 0;
    }
    else
    {
      unsigned int v51 = (int)(v47 * v48 * v49 / (v50 * 16777216.0));
      char v52 = 32;
    }
    int v53 = *(_DWORD *)(a4 + 2444);
    if (v53 == -1) {
      char v54 = -64;
    }
    else {
      char v54 = (_BYTE)v53 << 6;
    }
    *(_DWORD *)int v34 = 1380865032;
    v34[4] = *(_DWORD *)(a4 + 2440);
    if (v51 >= 0xFF) {
      LOBYTE(v51) = -1;
    }
    v34[5] = v51;
    v34[6] = v54 | v52 | *(unsigned char *)(a4 + 4036) & 0x1F;
  }
  BOOL v55 = sub_44EF8(0xDDu, 7);
  if (a5)
  {
    if (v55)
    {
      int v56 = sub_44F3C(0xDDu);
      __uint64_t v57 = sub_4F1D8();
      int v58 = (const char *)sub_44F70(7);
      if (v56)
      {
        printf("%lld %d AVE %s: AddSEI: WILL DO EPB\n", v57, 221, v58);
        __uint64_t v59 = sub_4F1D8();
        CVPixelBufferRef v125 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: AddSEI: WILL DO EPB", v59, 221, v125);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: WILL DO EPB", v57, 221, v58);
      }
    }
    size_t __n_4 = malloc_type_malloc(v31 + (v31 >> 1), 0x812E27F0uLL);
    unsigned int __n = sub_13D54(v33, v31, __n_4);
  }
  else
  {
    if (v55)
    {
      int v60 = sub_44F3C(0xDDu);
      __uint64_t v61 = sub_4F1D8();
      int v62 = (const char *)sub_44F70(7);
      if (v60)
      {
        printf("%lld %d AVE %s: AddSEI: WILL NOT DO EPB\n", v61, 221, v62);
        __uint64_t v63 = sub_4F1D8();
        long long v126 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: AddSEI: WILL NOT DO EPB", v63, 221, v126);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: WILL NOT DO EPB", v61, 221, v62);
      }
    }
    unsigned int __n = v31;
    size_t __n_4 = v33;
  }
  if (sub_44EF8(0xDDu, 7))
  {
    int v64 = sub_44F3C(0xDDu);
    __uint64_t v65 = sub_4F1D8();
    __uint64_t v66 = (const char *)sub_44F70(7);
    if (v64)
    {
      printf("%lld %d AVE %s: AddSEI: payloadSize EPB %d\n", v65, 221, v66, v31);
      __uint64_t v67 = sub_4F1D8();
      long long v127 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: AddSEI: payloadSize EPB %d", v67, 221, v127, v31);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEI: payloadSize EPB %d", v65, 221, v66, v31);
    }
  }
  int v68 = v31 + 16;
  if (sub_44EF8(0xDDu, 7))
  {
    int v69 = sub_44F3C(0xDDu);
    __uint64_t v70 = sub_4F1D8();
    int v71 = (const char *)sub_44F70(7);
    if (v69)
    {
      printf("%lld %d AVE %s: AddSEI: payloadSize UUID %d\n", v70, 221, v71, v68);
      __uint64_t v72 = sub_4F1D8();
      long long v128 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: AddSEI: payloadSize UUID %d", v72, 221, v128, v68);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEI: payloadSize UUID %d", v70, 221, v71, v68);
    }
  }
  *a1 = 0x1000000;
  if (sub_44EF8(0xDDu, 7))
  {
    int v73 = sub_44F3C(0xDDu);
    __uint64_t v74 = sub_4F1D8();
    int v75 = (const char *)sub_44F70(7);
    if (v73)
    {
      printf("%lld %d AVE %s: AddSEI: start code blockBufferData %p (%ld)\n", v74, 221, v75, a1 + 1, 4);
      __uint64_t v76 = sub_4F1D8();
      long long v129 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: AddSEI: start code blockBufferData %p (%ld)", v76, 221, v129, a1 + 1, 4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEI: start code blockBufferData %p (%ld)", v74, 221, v75, a1 + 1, 4);
    }
  }
  int v77 = *(_DWORD *)(a2 + 120);
  if (v77 == 1)
  {
    *((_WORD *)a1 + 2) = 334;
    uint64_t v78 = 6;
    goto LABEL_139;
  }
  if (!v77)
  {
    *((unsigned char *)a1 + 4) = 6;
    uint64_t v78 = 5;
LABEL_139:
    __uint64_t v79 = (char *)a1 + v78;
    if (sub_44EF8(0xDDu, 7))
    {
      int v80 = sub_44F3C(0xDDu);
      __uint64_t v81 = sub_4F1D8();
      int v82 = (const char *)sub_44F70(7);
      if (v80)
      {
        printf("%lld %d AVE %s: AddSEI: nal_unit_type blockBufferData %p (%ld)\n", v81, 221, v82, (char *)a1 + v78, v78);
        __uint64_t v83 = sub_4F1D8();
        long long v130 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: AddSEI: nal_unit_type blockBufferData %p (%ld)", v83, 221, v130, (char *)a1 + v78, v78);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: nal_unit_type blockBufferData %p (%ld)", v81, 221, v82, (char *)a1 + v78, v78);
      }
    }
    *__uint64_t v79 = 5;
    __uint64_t v89 = v79 + 1;
    if (sub_44EF8(0xDDu, 7))
    {
      int v90 = sub_44F3C(0xDDu);
      __uint64_t v91 = sub_4F1D8();
      __uint64_t v92 = (const char *)sub_44F70(7);
      if (v90)
      {
        printf("%lld %d AVE %s: AddSEI: payloadType blockBufferData %p (%ld)\n", v91, 221, v92, v79 + 1, v89 - (unsigned char *)a1);
        __uint64_t v93 = sub_4F1D8();
        long long v132 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: AddSEI: payloadType blockBufferData %p (%ld)", v93, 221, v132, v79 + 1, v89 - (unsigned char *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: payloadType blockBufferData %p (%ld)", v91, 221, v92, v79 + 1, v89 - (unsigned char *)a1);
      }
    }
    if (sub_44EF8(0xDDu, 7))
    {
      int v94 = sub_44F3C(0xDDu);
      __uint64_t v95 = sub_4F1D8();
      int v96 = (const char *)sub_44F70(7);
      if (v94)
      {
        printf("%lld %d AVE %s: AddSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)\n", v95, 221, v96, v68, v79 + 1, v89 - (unsigned char *)a1);
        __uint64_t v97 = sub_4F1D8();
        long long v133 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: AddSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v97, 221, v133, v68, v79 + 1, v89 - (unsigned char *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v95, 221, v96, v68, v79 + 1, v89 - (unsigned char *)a1);
      }
    }
    v79[1] = v68;
    if (sub_44EF8(0xDDu, 7))
    {
      int v98 = v79 + 2;
      int v99 = sub_44F3C(0xDDu);
      __uint64_t v100 = sub_4F1D8();
      v101 = (const char *)sub_44F70(7);
      if (v99)
      {
        printf("%lld %d AVE %s: AddSEI: end payloadSize bytes %d blockBufferData %p (%ld)\n", v100, 221, v101, 1, v79 + 2, v98 - (unsigned char *)a1);
        __uint64_t v102 = sub_4F1D8();
        long long v134 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: AddSEI: end payloadSize bytes %d blockBufferData %p (%ld)", v102, 221, v134, 1, v79 + 2, v98 - (unsigned char *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: end payloadSize bytes %d blockBufferData %p (%ld)", v100, 221, v101, 1, v79 + 2, v98 - (unsigned char *)a1);
      }
    }
    *(_OWORD *)(v79 + 2) = xmmword_83740;
    __uint64_t v103 = v79 + 18;
    __uint64_t v87 = __n_4;
    if (sub_44EF8(0xDDu, 7))
    {
      int v104 = sub_44F3C(0xDDu);
      __uint64_t v105 = sub_4F1D8();
      v106 = (const char *)sub_44F70(7);
      if (v104)
      {
        printf("%lld %d AVE %s: AddSEI: UUID blockBufferData %p (%ld)\n", v105, 221, v106, v79 + 18, v103 - (unsigned char *)a1);
        __uint64_t v107 = sub_4F1D8();
        long long v135 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: AddSEI: UUID blockBufferData %p (%ld)", v107, 221, v135, v103, v103 - (unsigned char *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: UUID blockBufferData %p (%ld)", v105, 221, v106, v79 + 18, v103 - (unsigned char *)a1);
      }
    }
    memcpy(v103, __n_4, __n);
    __uint64_t v108 = &v103[__n];
    if (sub_44EF8(0xDDu, 7))
    {
      int v109 = sub_44F3C(0xDDu);
      __uint64_t v110 = sub_4F1D8();
      __uint64_t v111 = (const char *)sub_44F70(7);
      if (v109)
      {
        printf("%lld %d AVE %s: AddSEI: data blockBufferData %p (%ld)\n", v110, 221, v111, v108, v108 - (unsigned char *)a1);
        __uint64_t v112 = sub_4F1D8();
        long long v136 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: AddSEI: data blockBufferData %p (%ld)", v112, 221, v136, v108, v108 - (unsigned char *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: data blockBufferData %p (%ld)", v110, 221, v111, v108, v108 - (unsigned char *)a1);
      }
    }
    unsigned char *v108 = 0x80;
    __uint64_t v113 = v108 + 1;
    if (sub_44EF8(0xDDu, 7))
    {
      int v114 = sub_44F3C(0xDDu);
      __uint64_t v115 = sub_4F1D8();
      __uint64_t v116 = (const char *)sub_44F70(7);
      int64_t v117 = v113 - (unsigned char *)a1;
      if (v114)
      {
        printf("%lld %d AVE %s: AddSEI: rbsp_trailing_bits blockBufferData %p (%ld)\n", v115, 221, v116, v113, v113 - (unsigned char *)a1);
        __uint64_t v118 = sub_4F1D8();
        uint64_t v137 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: AddSEI: rbsp_trailing_bits blockBufferData %p (%ld)", v118, 221, v137, v113, v117);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: rbsp_trailing_bits blockBufferData %p (%ld)", v115, 221, v116, v113, v113 - (unsigned char *)a1);
      }
    }
    else
    {
      LODWORD(v117) = v113 - a1;
    }
    *a6 = v117;
    if (sub_44EF8(0xDDu, 7))
    {
      int v119 = sub_44F3C(0xDDu);
      __uint64_t v120 = sub_4F1D8();
      uint64_t v121 = (const char *)sub_44F70(7);
      int v122 = *a6;
      if (v119)
      {
        printf("%lld %d AVE %s: AddSEI: final SEISize %d\n", v120, 221, v121, v122);
        __uint64_t v123 = sub_4F1D8();
        v138 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: AddSEI: final SEISize %d", v123, 221, v138, *a6);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: final SEISize %d", v120, 221, v121, v122);
      }
    }
    uint64_t v37 = 0;
    goto LABEL_179;
  }
  if (sub_44EF8(3u, 4))
  {
    int v84 = sub_44F3C(3u);
    __uint64_t v85 = sub_4F1D8();
    int64_t v86 = (const char *)sub_44F70(4);
    __uint64_t v87 = __n_4;
    if (v84)
    {
      printf("%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL\n", v85, 3, v86, "AddUnregisteredSEI", 1158, "false");
      __uint64_t v88 = sub_4F1D8();
      long long v131 = (const char *)sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL", v88, 3, v131, "AddUnregisteredSEI", 1158, "false");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL", v85, 3, v86, "AddUnregisteredSEI", 1158, "false");
    }
    uint64_t v37 = 4294966295;
  }
  else
  {
    uint64_t v37 = 4294966295;
    __uint64_t v87 = __n_4;
  }
LABEL_179:
  if (v87 && a5) {
    free(v87);
  }
  free(v33);
  return v37;
}

void sub_15D18()
{
}

void sub_1674C()
{
}

void sub_16770()
{
}

void sub_17184()
{
}

void sub_171A8()
{
  uint64_t v0 = 0;
  memset(v13, 0, sizeof(v13));
  v12[0] = xmmword_83750;
  v12[1] = xmmword_83760;
  v12[2] = xmmword_83770;
  float64x2_t v10 = (float64x2_t)vdupq_n_s64(0x40E86A0000000000uLL);
  while (1)
  {
    int32x2_t v11 = vmovn_s64(vcvtq_s64_f64(vmulq_f64((float64x2_t)v12[v0], v10)));
    v13[v0] = v11;
    if (sub_44EF8(0xDDu, 7))
    {
      int v1 = sub_44F3C(0xDDu);
      __uint64_t v2 = sub_4F1D8();
      int v3 = (const char *)sub_44F70(7);
      if (v1)
      {
        printf("%lld %d AVE %s: AddContentColourVolumeSEI: ccv primaries\n", v2, 221, v3);
        __uint64_t v2 = sub_4F1D8();
        int v3 = (const char *)sub_44F70(7);
      }
      syslog(3, "%lld %d AVE %s: AddContentColourVolumeSEI: ccv primaries", v2, 221, v3);
    }
    if (sub_44EF8(0xDDu, 7))
    {
      int v4 = sub_44F3C(0xDDu);
      __uint64_t v5 = sub_4F1D8();
      unsigned int v6 = (const char *)sub_44F70(7);
      if (v4)
      {
        printf("%lld %d AVE %s: ccv_primaries %d (x, y) (%d, %d)\n", v5, 221, v6, v0, v11.i32[0], v11.i32[1]);
        __uint64_t v5 = sub_4F1D8();
        unsigned int v6 = (const char *)sub_44F70(7);
      }
      syslog(3, "%lld %d AVE %s: ccv_primaries %d (x, y) (%d, %d)", v5, 221, v6, v0, v11.i32[0], v11.i32[1]);
    }
    if (++v0 == 3)
    {
      if (sub_44EF8(0xDDu, 7))
      {
        int v7 = sub_44F3C(0xDDu);
        __uint64_t v8 = sub_4F1D8();
        int v9 = (const char *)sub_44F70(7);
        if (v7)
        {
          printf("%lld %d AVE %s: \n", v8, 221, v9);
          __uint64_t v8 = sub_4F1D8();
          int v9 = (const char *)sub_44F70(7);
        }
        syslog(3, "%lld %d AVE %s: ", v8, 221, v9);
      }
      operator new();
    }
  }
}

void sub_180A0()
{
}

void sub_180CC()
{
  if (sub_44EF8(0xDDu, 7))
  {
    int v0 = sub_44F3C(0xDDu);
    __uint64_t v1 = sub_4F1D8();
    __uint64_t v2 = (const char *)sub_44F70(7);
    if (v0)
    {
      printf("%lld %d AVE %s: \n", v1, 221, v2);
      __uint64_t v3 = sub_4F1D8();
      int v4 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: ", v3, 221, v4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: ", v1, 221, v2);
    }
  }
  operator new();
}

void sub_18C10()
{
}

void sub_18C34()
{
}

void sub_1973C()
{
}

void sub_19760()
{
}

void sub_1A128()
{
}

void sub_1A14C()
{
  qword_90090 = (uint64_t)kVTProfileLevel_HEVC_Main_AutoLevel;
  dword_90098 = 1;
  qword_900A0 = (uint64_t)kVTProfileLevel_HEVC_Main10_AutoLevel;
  dword_900A8 = 2;
  qword_900B0 = kVTProfileLevel_HEVC_Main444_AutoLevel;
  dword_900B8 = 1308;
  qword_900C0 = kVTProfileLevel_HEVC_Main44410_AutoLevel;
  dword_900C8 = 1310;
  qword_900D0 = (uint64_t)kVTProfileLevel_HEVC_Main42210_AutoLevel;
  dword_900D8 = 1210;
  qword_900E0 = kVTProfileLevel_HEVC_Monochrome_AutoLevel;
  dword_900E8 = 1008;
  qword_900F0 = kVTProfileLevel_HEVC_Monochrome10_AutoLevel;
  dword_900F8 = 1010;
  qword_90100 = kVTProfileLevel_HEVC_MainStill_AutoLevel;
  dword_90108 = 3;
}

uint64_t sub_1A218(uint64_t a1)
{
  double v1 = 33.0;
  if (*(int *)(a1 + 69900) > 59) {
    double v1 = 15.0;
  }
  double v13 = v1;
  mach_timebase_info(&info);
  LODWORD(v3) = info.numer;
  LODWORD(v2) = info.denom;
  double v4 = (double)v2 / (double)v3 * 1000000.0;
  __asm { FMOV            V1.2D, #3.0 }
  _Q1.f64[0] = v13;
  *(int32x2_t *)policy_mach_timebase_info info = vmovn_s64((int64x2_t)vcvtq_u64_f64(vmulq_n_f64(_Q1, v4)));
  integer_t v16 = policy_info[0];
  int v17 = 1;
  float64x2_t v10 = pthread_self();
  thread_act_t v11 = pthread_mach_thread_np(v10);
  return thread_policy_set(v11, 2u, policy_info, 4u);
}

uint64_t sub_1A2BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 245280;
  uint64_t v5 = a1 + 239336;
  uint64_t v6 = a1 + 51224;
  sub_2DC00(a1 + 8);
  *(_OWORD *)(v6 + 96) = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 112) = *(_OWORD *)(a2 + 16);
  *(void *)(v6 + 128) = *(void *)(a2 + 32);
  *(void *)(v6 + 80) = *(void *)(a2 + 72);
  *(unsigned char *)(v5 + 9) = *(unsigned char *)(a2 + 208);
  *(_DWORD *)(v5 + 16) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(v5 + 12) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(v5 + 20) = *(_DWORD *)(a2 + 220);
  *(void *)uint64_t v5 = *(void *)(a2 + 224);
  *(unsigned char *)uint64_t v4 = *(unsigned char *)(a2 + 232);
  long long v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 51272) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 51288) = v7;
  __uint64_t v8 = *(void **)(a2 + 80);
  if (v8) {
    *(void *)(v6 + 144) = *v8;
  }
  int v9 = *(const void **)(a2 + 88);
  if (v9) {
    memcpy((void *)(a1 + 51376), v9, 0x4178uLL);
  }
  float64x2_t v10 = *(const void **)(a2 + 96);
  if (v10) {
    memcpy((void *)(a1 + 68136), v10, 0x6C0uLL);
  }
  thread_act_t v11 = *(const void **)(a2 + 104);
  if (v11) {
    memcpy((void *)(a1 + 69864), v11, 0x690uLL);
  }
  *(_OWORD *)(v6 + 20320) = *(_OWORD *)(a2 + 112);
  int v12 = *(_DWORD *)(*(void *)(a2 + 96) + 120);
  if (v12 == 1)
  {
    uint64_t v31 = v5;
    uint64_t v32 = v4;
    unsigned int v18 = *(const void **)(a2 + 152);
    if (v18) {
      memcpy((void *)(a1 + 76272), v18, 0x140E8uLL);
    }
    uint64_t v19 = 0;
    char v20 = 1;
    do
    {
      char v21 = v20;
      uint64_t v22 = a2 + 8 * v19;
      __uint64_t v23 = *(const void **)(v22 + 160);
      if (v23) {
        memcpy((void *)(a1 + 7924 * v19 + 158424), v23, 0x1EF4uLL);
      }
      __uint64_t v24 = *(const void **)(v22 + 176);
      if (v24) {
        memcpy((void *)(a1 + 9636 * v19 + 174272), v24, 0x25A4uLL);
      }
      char v20 = 0;
      uint64_t v19 = 1;
    }
    while ((v21 & 1) != 0);
    int v25 = *(const void **)(a2 + 192);
    if (v25) {
      memcpy((void *)(a1 + 193544), v25, 0x54F8uLL);
    }
    int v15 = *(const void **)(a2 + 200);
    uint64_t v5 = v31;
    uint64_t v4 = v32;
    if (v15)
    {
      integer_t v16 = (void *)(a1 + 215296);
      size_t v17 = 24024;
      goto LABEL_29;
    }
  }
  else if (v12)
  {
    if (sub_44EF8(0x2Eu, 4))
    {
      if (sub_44F3C(0x2Eu))
      {
        __uint64_t v26 = sub_4F1D8();
        __uint64_t v27 = (const char *)sub_44F70(4);
        printf("%lld %d AVE %s: codectype not recognized! %d\n", v26, 46, v27, *(_DWORD *)(*(void *)(a2 + 96) + 120));
      }
      __uint64_t v28 = sub_4F1D8();
      __uint64_t v29 = (const char *)sub_44F70(4);
      syslog(3, "%lld %d AVE %s: codectype not recognized! %d", v28, 46, v29, *(_DWORD *)(*(void *)(a2 + 96) + 120));
    }
  }
  else
  {
    double v13 = *(const void **)(a2 + 128);
    if (v13) {
      memcpy((void *)(a1 + 71560), v13, 0x6B8uLL);
    }
    __uint64_t v14 = *(const void **)(a2 + 136);
    if (v14) {
      memcpy((void *)(a1 + 73280), v14, 0x184uLL);
    }
    int v15 = *(const void **)(a2 + 144);
    if (v15)
    {
      integer_t v16 = (void *)(a1 + 73668);
      size_t v17 = 2604;
LABEL_29:
      memcpy(v16, v15, v17);
    }
  }
  *(void *)(a1 + 51100) = 0;
  *(_OWORD *)(a1 + 51084) = 0u;
  *(_OWORD *)(a1 + 51112) = 0u;
  *(_DWORD *)uint64_t v6 = -1;
  *(unsigned char *)(v6 + 4) = 0;
  *(unsigned char *)a1 = 0;
  *(void *)(v6 + 136) = 0;
  *(void *)(v6 + 40) = 0;
  *(unsigned char *)(a1 + 25784) = 0;
  *(unsigned char *)(v5 + 10) = 0;
  *(void *)(v4 + 8) = 0;
  *(_OWORD *)(a1 + 25792) = 0u;
  *(_OWORD *)(a1 + 25808) = 0u;
  *(_OWORD *)(a1 + 25824) = 0u;
  *(_OWORD *)(a1 + 25840) = 0u;
  *(_OWORD *)(a1 + 25856) = 0u;
  *(_OWORD *)(a1 + 25872) = 0u;
  *(_OWORD *)(a1 + 25888) = 0u;
  *(_OWORD *)(a1 + 25904) = 0u;
  *(_OWORD *)(a1 + 25920) = 0u;
  *(_OWORD *)(a1 + 25936) = 0u;
  *(_OWORD *)(a1 + 25952) = 0u;
  *(_OWORD *)(a1 + 25968) = 0u;
  *(_OWORD *)(a1 + 25984) = 0u;
  *(_OWORD *)(a1 + 26000) = 0u;
  *(_OWORD *)(a1 + 26016) = 0u;
  *(_OWORD *)(a1 + 26032) = 0u;
  *(_OWORD *)(a1 + 26048) = 0u;
  *(_OWORD *)(a1 + 26064) = 0u;
  *(_OWORD *)(a1 + 26080) = 0u;
  *(_OWORD *)(a1 + 26096) = 0u;
  *(_OWORD *)(a1 + 26112) = 0u;
  *(_OWORD *)(a1 + 26128) = 0u;
  *(_OWORD *)(a1 + 26144) = 0u;
  *(_OWORD *)(a1 + 26160) = 0u;
  *(_OWORD *)(a1 + 26176) = 0u;
  *(_OWORD *)(a1 + 26192) = 0u;
  *(_OWORD *)(a1 + 26208) = 0u;
  *(_OWORD *)(a1 + 26224) = 0u;
  *(_OWORD *)(a1 + 26240) = 0u;
  *(_OWORD *)(a1 + 26256) = 0u;
  *(_OWORD *)(a1 + 26920) = 0u;
  *(_OWORD *)(a1 + 26936) = 0u;
  *(_OWORD *)(a1 + 26888) = 0u;
  *(_OWORD *)(a1 + 26904) = 0u;
  *(_OWORD *)(a1 + 26856) = 0u;
  *(_OWORD *)(a1 + 26872) = 0u;
  *(_OWORD *)(a1 + 26824) = 0u;
  *(_OWORD *)(a1 + 26840) = 0u;
  *(_OWORD *)(a1 + 26792) = 0u;
  *(_OWORD *)(a1 + 26808) = 0u;
  *(_OWORD *)(a1 + 26760) = 0u;
  *(_OWORD *)(a1 + 26776) = 0u;
  *(_OWORD *)(a1 + 26728) = 0u;
  *(_OWORD *)(a1 + 26744) = 0u;
  *(_OWORD *)(a1 + 26696) = 0u;
  *(_OWORD *)(a1 + 26712) = 0u;
  *(_OWORD *)(a1 + 26664) = 0u;
  *(_OWORD *)(a1 + 26680) = 0u;
  *(_OWORD *)(a1 + 26632) = 0u;
  *(_OWORD *)(a1 + 26648) = 0u;
  *(_OWORD *)(a1 + 26600) = 0u;
  *(_OWORD *)(a1 + 26616) = 0u;
  *(_OWORD *)(a1 + 26568) = 0u;
  *(_OWORD *)(a1 + 26584) = 0u;
  *(_OWORD *)(a1 + 26536) = 0u;
  *(_OWORD *)(a1 + 26552) = 0u;
  *(_OWORD *)(a1 + 26504) = 0u;
  *(_OWORD *)(a1 + 26520) = 0u;
  *(_OWORD *)(a1 + 26472) = 0u;
  *(_OWORD *)(a1 + 26488) = 0u;
  bzero((void *)(a1 + 27072), 0x3C0uLL);
  *(_OWORD *)(a1 + 51240) = 0u;
  *(_OWORD *)(a1 + 245264) = 0u;
  return a1;
}

void sub_1A6CC(_Unwind_Exception *a1)
{
  sub_1A6E0(v1);
  _Unwind_Resume(a1);
}

void *sub_1A6E0(void *a1)
{
  sub_2DE40(a1 + 3179);
  sub_2DE40(a1 + 3173);
  unint64_t v2 = (void *)a1[3169];
  if (v2)
  {
    a1[3170] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1A72C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = a1 + 51304;
    *(_OWORD *)(a1 + 51320) = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 51336) = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 51352) = *(void *)(a2 + 32);
    *(void *)(a1 + 51304) = *(void *)(a2 + 72);
    *(unsigned char *)(a1 + 239345) = *(unsigned char *)(a2 + 208);
    *(_DWORD *)(a1 + 239352) = *(_DWORD *)(a2 + 216);
    *(_DWORD *)(a1 + 239348) = *(_DWORD *)(a2 + 212);
    *(_DWORD *)(a1 + 239356) = *(_DWORD *)(a2 + 220);
    *(void *)(a1 + 239336) = *(void *)(a2 + 224);
    *(unsigned char *)(a1 + 245280) = *(unsigned char *)(a2 + 232);
    *(void *)(a1 + 245288) = *(void *)(a2 + 240);
    long long v5 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 51272) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 51288) = v5;
    uint64_t v6 = *(void **)(a2 + 80);
    if (v6) {
      *(void *)(a1 + 51368) = *v6;
    }
    long long v7 = *(const void **)(a2 + 88);
    if (v7) {
      memcpy((void *)(a1 + 51376), v7, 0x4178uLL);
    }
    __uint64_t v8 = *(const void **)(a2 + 96);
    if (v8) {
      memcpy((void *)(a1 + 68136), v8, 0x6C0uLL);
    }
    int v9 = *(const void **)(a2 + 104);
    if (v9) {
      memcpy((void *)(a1 + 69864), v9, 0x690uLL);
    }
    *(_OWORD *)(v4 + 20240) = *(_OWORD *)(a2 + 112);
    int v10 = *(_DWORD *)(*(void *)(a2 + 96) + 120);
    if (v10 == 1)
    {
      char v21 = *(const void **)(a2 + 152);
      if (v21) {
        memcpy((void *)(a1 + 76272), v21, 0x140E8uLL);
      }
      uint64_t v22 = 0;
      char v23 = 1;
      do
      {
        char v24 = v23;
        uint64_t v25 = a2 + 8 * v22;
        __uint64_t v26 = *(const void **)(v25 + 160);
        if (v26) {
          memcpy((void *)(a1 + 7924 * v22 + 158424), v26, 0x1EF4uLL);
        }
        __uint64_t v27 = *(const void **)(v25 + 176);
        if (v27) {
          memcpy((void *)(a1 + 9636 * v22 + 174272), v27, 0x25A4uLL);
        }
        char v23 = 0;
        uint64_t v22 = 1;
      }
      while ((v24 & 1) != 0);
      __uint64_t v28 = *(const void **)(a2 + 192);
      if (v28) {
        memcpy((void *)(a1 + 193544), v28, 0x54F8uLL);
      }
      double v13 = *(const void **)(a2 + 200);
      if (!v13) {
        return 0;
      }
      __uint64_t v14 = (void *)(a1 + 215296);
      size_t v15 = 24024;
    }
    else
    {
      if (v10)
      {
        if (sub_44EF8(0x2Eu, 4))
        {
          int v29 = sub_44F3C(0x2Eu);
          __uint64_t v30 = sub_4F1D8();
          uint64_t v31 = (const char *)sub_44F70(4);
          int v32 = *(_DWORD *)(*(void *)(a2 + 96) + 120);
          if (v29)
          {
            printf("%lld %d AVE %s: codectype not recognized! %d\n", v30, 46, v31, v32);
            __uint64_t v33 = sub_4F1D8();
            unint64_t v36 = (const char *)sub_44F70(4);
            syslog(3, "%lld %d AVE %s: codectype not recognized! %d", v33, 46, v36, *(_DWORD *)(*(void *)(a2 + 96) + 120));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: codectype not recognized! %d", v30, 46, v31, v32);
          }
        }
        return 0;
      }
      thread_act_t v11 = *(const void **)(a2 + 128);
      if (v11) {
        memcpy((void *)(a1 + 71560), v11, 0x6B8uLL);
      }
      int v12 = *(const void **)(a2 + 136);
      if (v12) {
        memcpy((void *)(a1 + 73280), v12, 0x184uLL);
      }
      double v13 = *(const void **)(a2 + 144);
      if (!v13) {
        return 0;
      }
      __uint64_t v14 = (void *)(a1 + 73668);
      size_t v15 = 2604;
    }
    memcpy(v14, v13, v15);
    return 0;
  }
  uint64_t v16 = 3758097084;
  if (sub_44EF8(3u, 4))
  {
    int v17 = sub_44F3C(3u);
    __uint64_t v18 = sub_4F1D8();
    uint64_t v19 = (const char *)sub_44F70(4);
    if (v17)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: UpdateSettings failed.\n", v18, 3, v19, "UpdateSettings", 307, "interface != __null");
      __uint64_t v20 = sub_4F1D8();
      unsigned int v35 = (const char *)sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: UpdateSettings failed.", v20, 3, v35, "UpdateSettings", 307, "interface != __null");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: UpdateSettings failed.", v18, 3, v19, "UpdateSettings", 307, "interface != __null");
    }
  }
  return v16;
}

void *sub_1AAD0(uint64_t a1, void *__dst)
{
  return memcpy(__dst, (const void *)(a1 + 25504), 0x108uLL);
}

uint64_t sub_1AAE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 25776) = a2;
  return result;
}

void *sub_1AAF4(void *a1)
{
  unint64_t v2 = a1 + 6389;
  uint64_t v3 = 0x1FFFFFFFFFFFFFE2;
  do
  {
    uint64_t v4 = &a1[v3];
    long long v5 = (__IOSurface *)a1[v3 + 3284];
    if (v5)
    {
      IOSurfaceUnlock(v5, 0, 0);
      CFRelease((CFTypeRef)v4[3284]);
      v4[3284] = 0;
    }
    uint64_t v6 = (__IOSurface *)v4[3369];
    if (v6)
    {
      IOSurfaceUnlock(v6, 0, 0);
      CFRelease((CFTypeRef)v4[3369]);
      v4[3369] = 0;
    }
    long long v7 = &a1[v3];
    __uint64_t v8 = (__IOSurface *)a1[v3 + 3444];
    if (v8)
    {
      IOSurfaceUnlock(v8, 0, 0);
      CFRelease((CFTypeRef)v7[3444]);
      v7[3444] = 0;
    }
    int v9 = (__IOSurface *)v7[3504];
    if (v9)
    {
      IOSurfaceUnlock(v9, 0, 0);
      CFRelease((CFTypeRef)v7[3504]);
      v7[3504] = 0;
    }
    ++v3;
  }
  while (v3 * 8);
  if (v2[31])
  {
    FigFormatDescriptionRelease();
    v2[31] = 0;
  }
  if (*v2)
  {
    free((void *)*v2);
    *unint64_t v2 = 0;
    *((_DWORD *)v2 + 2) = 0;
  }
  sub_2DE40(a1 + 3180);
  sub_2DE40(a1 + 3174);
  int v10 = (void *)a1[3170];
  if (v10)
  {
    a1[3171] = v10;
    operator delete(v10);
  }
  return a1;
}

void sub_1AC10(void *a1)
{
}

uint64_t sub_1AC24(uint64_t a1)
{
  unint64_t v2 = (const void **)(a1 + 51232);
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  *unint64_t v2 = Current;
  if (Current)
  {
    if (sub_44EF8(0x2Eu, 7))
    {
      int v4 = sub_44F3C(0x2Eu);
      __uint64_t v5 = sub_4F1D8();
      uint64_t v6 = (const char *)sub_44F70(7);
      long long v7 = *v2;
      if (v4)
      {
        printf("%lld %d AVE %s: H264FrameRec: CFRunLoopGetCFRunLoopRef Current = %p\n", v5, 46, v6, v7);
        __uint64_t v8 = sub_4F1D8();
        __uint64_t v27 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: CFRunLoopGetCFRunLoopRef Current = %p", v8, 46, v27, *v2);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: CFRunLoopGetCFRunLoopRef Current = %p", v5, 46, v6, v7);
      }
    }
    if (sub_44EF8(0x2Eu, 7))
    {
      int v13 = sub_44F3C(0x2Eu);
      __uint64_t v14 = sub_4F1D8();
      size_t v15 = (const char *)sub_44F70(7);
      if (v13)
      {
        printf("%lld %d AVE %s: H264FrameRec: AddIODispatcherToRunLoop to CFRunLoopRun.\n", v14, 46, v15);
        __uint64_t v16 = sub_4F1D8();
        int v29 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: AddIODispatcherToRunLoop to CFRunLoopRun.", v16, 46, v29);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: AddIODispatcherToRunLoop to CFRunLoopRun.", v14, 46, v15);
      }
    }
    if (sub_1AFC8(a1))
    {
      uint64_t v17 = 3758097084;
      if (sub_44EF8(3u, 4))
      {
        int v18 = sub_44F3C(3u);
        __uint64_t v19 = sub_4F1D8();
        __uint64_t v20 = (const char *)sub_44F70(4);
        if (v18)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: AddIODispatcherToRunLoop failed.\n", v19, 3, v20, "Setup", 479, "err == 0");
          __uint64_t v21 = sub_4F1D8();
          __uint64_t v30 = (const char *)sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: AddIODispatcherToRunLoop failed.", v21, 3, v30, "Setup", 479, "err == 0");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: AddIODispatcherToRunLoop failed.", v19, 3, v20, "Setup", 479, "err == 0");
        }
      }
    }
    else
    {
      if (*(unsigned char *)(a1 + 239345))
      {
        if (sub_44EF8(0x2Eu, 4))
        {
          int v22 = sub_44F3C(0x2Eu);
          __uint64_t v23 = sub_4F1D8();
          char v24 = (const char *)sub_44F70(4);
          if (v22)
          {
            printf("%lld %d AVE %s: H264VideoEncoder: setpriority to BACKGROUND\n", v23, 46, v24);
            __uint64_t v25 = sub_4F1D8();
            uint64_t v31 = (const char *)sub_44F70(4);
            syslog(3, "%lld %d AVE %s: H264VideoEncoder: setpriority to BACKGROUND", v25, 46, v31);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264VideoEncoder: setpriority to BACKGROUND", v23, 46, v24);
          }
        }
        setpriority(3, 0, 4096);
      }
      else
      {
        sub_1A218(a1);
      }
      return 0;
    }
  }
  else if (sub_44EF8(3u, 4))
  {
    int v9 = sub_44F3C(3u);
    __uint64_t v10 = sub_4F1D8();
    thread_act_t v11 = (const char *)sub_44F70(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CFRunLoopGetCurrent failed.\n", v10, 3, v11, "Setup", 472, "m_CFRunLoopRef != __null");
      __uint64_t v12 = sub_4F1D8();
      __uint64_t v28 = (const char *)sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CFRunLoopGetCurrent failed.", v12, 3, v28, "Setup", 472, "m_CFRunLoopRef != __null");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CFRunLoopGetCurrent failed.", v10, 3, v11, "Setup", 472, "m_CFRunLoopRef != __null");
    }
    return 3758097085;
  }
  else
  {
    return 3758097085;
  }
  return v17;
}

uint64_t sub_1AFC8(uint64_t a1)
{
  Boolean shouldFreeInfo = 0;
  if (IOCreateReceivePort(0x39u, (mach_port_t *)(a1 + 51256)))
  {
    uint64_t v2 = 3758097084;
    if (sub_44EF8(0x2Eu, 4))
    {
      int v3 = sub_44F3C(0x2Eu);
      __uint64_t v4 = sub_4F1D8();
      __uint64_t v5 = (const char *)sub_44F70(4);
      if (v3)
      {
        printf("%lld %d AVE %s: H264FrameRec ERROR: IOCreateReceivePort failed -> Dispatcher cannot be installed\n", v4, 46, v5);
        __uint64_t v6 = sub_4F1D8();
        int v22 = (const char *)sub_44F70(4);
        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: IOCreateReceivePort failed -> Dispatcher cannot be installed", v6, 46, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: IOCreateReceivePort failed -> Dispatcher cannot be installed", v4, 46, v5);
      }
    }
    return v2;
  }
  context.version = 1;
  context.mach_timebase_info info = (void *)a1;
  memset(&context.retain, 0, 24);
  long long v7 = CFMachPortCreateWithPort(kCFAllocatorDefault, *(_DWORD *)(a1 + 51256), (CFMachPortCallBack)&IODispatchCalloutFromMessage, &context, &shouldFreeInfo);
  *(void *)(a1 + 51264) = v7;
  if (v7) {
    BOOL v8 = shouldFreeInfo == 1;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if (sub_44EF8(0x2Eu, 4))
    {
      int v9 = sub_44F3C(0x2Eu);
      __uint64_t v10 = sub_4F1D8();
      thread_act_t v11 = (const char *)sub_44F70(4);
      if (v9)
      {
        printf("%lld %d AVE %s: H264FrameRec ERROR: CFMachPortCreateWithPort failed m_CFAsyncPort %p shouldFreeInfo %d\n", v10, 46, v11, *(const void **)(a1 + 51264), shouldFreeInfo);
        __uint64_t v10 = sub_4F1D8();
        thread_act_t v11 = (const char *)sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: CFMachPortCreateWithPort failed m_CFAsyncPort %p shouldFreeInfo %d", v10, 46, v11, *(const void **)(a1 + 51264), shouldFreeInfo);
    }
    *(void *)(a1 + 51264) = 0;
    goto LABEL_25;
  }
  RunLoopSource = CFMachPortCreateRunLoopSource(kCFAllocatorDefault, v7, 0);
  *(void *)(a1 + 51248) = RunLoopSource;
  if (!RunLoopSource)
  {
    if (sub_44EF8(0x2Eu, 4))
    {
      int v17 = sub_44F3C(0x2Eu);
      __uint64_t v18 = sub_4F1D8();
      __uint64_t v19 = (const char *)sub_44F70(4);
      if (v17)
      {
        printf("%lld %d AVE %s: H264FrameRec ERROR: CFMachPortCreateRunLoopSource failed -> Dispatcher cannot be installed\n", v18, 46, v19);
        __uint64_t v20 = sub_4F1D8();
        char v24 = (const char *)sub_44F70(4);
        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: CFMachPortCreateRunLoopSource failed -> Dispatcher cannot be installed", v20, 46, v24);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: CFMachPortCreateRunLoopSource failed -> Dispatcher cannot be installed", v18, 46, v19);
      }
    }
LABEL_25:
    sub_1B334(a1);
    return 3758097085;
  }
  CFRunLoopAddSource(*(CFRunLoopRef *)(a1 + 51232), RunLoopSource, kCFRunLoopDefaultMode);
  long long v27 = 0u;
  long long v28 = 0u;
  memset(v25, 0, sizeof(v25));
  uint64_t v26 = *(unsigned int *)(a1 + 239356);
  int v29 = sub_1B3C0;
  uint64_t v30 = a1;
  if (!sub_54624(*(const void ***)(a1 + 51320), (const void *)*(unsigned int *)(a1 + 51256), &v26, v25)) {
    return 0;
  }
  if (sub_44EF8(0x2Eu, 4))
  {
    int v13 = sub_44F3C(0x2Eu);
    __uint64_t v14 = sub_4F1D8();
    size_t v15 = (const char *)sub_44F70(4);
    if (v13)
    {
      printf("%lld %d AVE %s: H264FrameRec ERROR: kH264VideoEncoderUserClientSetCallback failed -> Dispatcher cannot be installed\n", v14, 46, v15);
      __uint64_t v16 = sub_4F1D8();
      __uint64_t v23 = (const char *)sub_44F70(4);
      syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: kH264VideoEncoderUserClientSetCallback failed -> Dispatcher cannot be installed", v16, 46, v23);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: kH264VideoEncoderUserClientSetCallback failed -> Dispatcher cannot be installed", v14, 46, v15);
    }
  }
  uint64_t v2 = 3758097084;
  sub_1B334(a1);
  return v2;
}

uint64_t sub_1B334(uint64_t a1)
{
  uint64_t v1 = a1 + 51232;
  uint64_t v2 = *(__CFRunLoopSource **)(a1 + 51248);
  if (v2)
  {
    CFRunLoopRemoveSource(*(CFRunLoopRef *)v1, v2, kCFRunLoopDefaultMode);
    CFRelease(*(CFTypeRef *)(v1 + 16));
    *(void *)(v1 + 16) = 0;
  }
  int v3 = *(__CFMachPort **)(v1 + 32);
  if (v3)
  {
    CFMachPortInvalidate(v3);
    CFRelease(*(CFTypeRef *)(v1 + 32));
    *(void *)(v1 + 32) = 0;
  }
  mach_port_t v4 = mach_task_self_;
  mach_port_name_t v5 = *(_DWORD *)(v1 + 24);

  return mach_port_mod_refs(v4, v5, 1u, -1);
}

void sub_1B3C0(uint64_t a1, int a2, int *a3, int a4)
{
  if (sub_44EF8(0x2Eu, 8))
  {
    int v6 = sub_44F3C(0x2Eu);
    __uint64_t v7 = sub_4F1D8();
    BOOL v8 = (const char *)sub_44F70(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p 0x%x %p %d\n", v7, 46, v8, "FrameDone", (const void *)a1, a2, a3, a4);
      __uint64_t v7 = sub_4F1D8();
      sub_44F70(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p 0x%x %p %d", v7, 46);
  }
  if (!a1 || !a3 || a4 <= 0)
  {
    if (sub_44EF8(0x2Eu, 4))
    {
      int v14 = sub_44F3C(0x2Eu);
      __uint64_t v15 = sub_4F1D8();
      __uint64_t v16 = (const char *)sub_44F70(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p 0x%x %p %d\n", v15, 46, v16, "FrameDone", 5172, "pRefCon != __null && args != __null && numArgs > 0", (const void *)a1, a2, a3, a4);
        __uint64_t v17 = sub_4F1D8();
        v312 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p 0x%x %p %d", v17, 46, v312, "FrameDone");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p 0x%x %p %d", v15, 46, v16, "FrameDone");
      }
    }
    goto LABEL_26;
  }
  int v9 = (unsigned char *)(a1 + 239345);
  if (!*(void *)(a1 + 51320) || !*(_DWORD *)(a1 + 239352))
  {
    if (sub_44EF8(0x2Eu, 4))
    {
      int v18 = sub_44F3C(0x2Eu);
      __uint64_t v19 = sub_4F1D8();
      __uint64_t v20 = (const char *)sub_44F70(4);
      if (v18)
      {
        int v21 = a4;
        uint64_t v22 = 46;
        printf("%lld %d AVE %s: %s:%d %s | wrong state %p %d\n", v19, 46, v20, "FrameDone", 5177, "context->m_pcDAL != __null && context->m_DeviceType != AVE_DevType_None", *(const void **)(a1 + 51320), *(_DWORD *)(a1 + 239352));
        __uint64_t v23 = sub_4F1D8();
        char v24 = sub_44F70(4);
        uint64_t v330 = *(void *)(a1 + 51320);
        uint64_t v331 = *(unsigned int *)(a1 + 239352);
        uint64_t v328 = 5177;
        v329 = "context->m_pcDAL != __null && context->m_DeviceType != AVE_DevType_None";
        v313 = v24;
        __uint64_t v25 = "%lld %d AVE %s: %s:%d %s | wrong state %p %d";
LABEL_23:
        uint64_t v310 = v22;
        a4 = v21;
        syslog(3, v25, v23, v310, v313, "FrameDone", v328, v329, v330, v331, v332);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong state %p %d", v19, 46);
      }
    }
    goto LABEL_26;
  }
  if (a2 == -536870210) {
    goto LABEL_14;
  }
  if (a2)
  {
    if (a2 != -536870165)
    {
      if (sub_44EF8(3u, 4))
      {
        int v30 = sub_44F3C(3u);
        __uint64_t v31 = sub_4F1D8();
        int v32 = (const char *)sub_44F70(4);
        if (v30)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: commandResult != kIOReturnSuccess.\n", v31, 3, v32, "FrameDone", 5187, "commandResult == 0");
          sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: commandResult != kIOReturnSuccess.");
      }
      goto LABEL_26;
    }
LABEL_14:
    if (sub_44EF8(0x2Eu, 4))
    {
      int v10 = sub_44F3C(0x2Eu);
      __uint64_t v11 = sub_4F1D8();
      __uint64_t v12 = (const char *)sub_44F70(4);
      if (v10)
      {
        printf("%lld %d AVE %s: FIG: H264FrameRec: commandResult = kIOReturnNoResources\n", v11, 46, v12);
        __uint64_t v13 = sub_4F1D8();
        v311 = (const char *)sub_44F70(4);
        syslog(3, "%lld %d AVE %s: FIG: H264FrameRec: commandResult = kIOReturnNoResources", v13, 46, v311);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: H264FrameRec: commandResult = kIOReturnNoResources", v11, 46, v12);
      }
    }
  }
  int v33 = *a3;
  if (sub_44EF8(0x2Eu, 7))
  {
    int v34 = sub_44F3C(0x2Eu);
    __uint64_t v35 = sub_4F1D8();
    unint64_t v36 = (const char *)sub_44F70(7);
    if (v34)
    {
      printf("%lld %d AVE %s: \nH264FrameRec: counter received = %d\n", v35, 46, v36, v33);
      __uint64_t v37 = sub_4F1D8();
      v314 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: \nH264FrameRec: counter received = %d", v37, 46, v314, v33);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: \nH264FrameRec: counter received = %d", v35, 46, v36, v33);
    }
  }
  v338 = (uint64_t *)(a1 + 239336);
  uint64_t v38 = a1 + 25784;
  if (*(unsigned char *)(a1 + 239346))
  {
    if (*v9)
    {
      if (sub_44EF8(0x2Eu, 4))
      {
        int v39 = sub_44F3C(0x2Eu);
        __uint64_t v40 = sub_4F1D8();
        uint64_t v41 = (const char *)sub_44F70(4);
        if (v39)
        {
          printf("%lld %d AVE %s: H264VideoEncoder: setpriority to BACKGROUND\n", v40, 46, v41);
          __uint64_t v42 = sub_4F1D8();
          v315 = (const char *)sub_44F70(4);
          uint64_t v38 = a1 + 25784;
          syslog(3, "%lld %d AVE %s: H264VideoEncoder: setpriority to BACKGROUND", v42, 46, v315);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264VideoEncoder: setpriority to BACKGROUND", v40, 46, v41);
        }
      }
      setpriority(3, 0, 4096);
    }
    else
    {
      if (sub_44EF8(0x2Eu, 7))
      {
        int v43 = sub_44F3C(0x2Eu);
        __uint64_t v44 = sub_4F1D8();
        long long v45 = (const char *)sub_44F70(7);
        if (v43)
        {
          printf("%lld %d AVE %s: H264VideoEncoder: setpriority to FOREGROUND\n", v44, 46, v45);
          __uint64_t v46 = sub_4F1D8();
          v316 = (const char *)sub_44F70(7);
          uint64_t v38 = a1 + 25784;
          syslog(3, "%lld %d AVE %s: H264VideoEncoder: setpriority to FOREGROUND", v46, 46, v316);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264VideoEncoder: setpriority to FOREGROUND", v44, 46, v45);
        }
      }
      setpriority(3, 0, 0);
      sub_1A218(a1);
    }
    *(unsigned char *)(a1 + 239346) = 0;
  }
  *(void *)&v346[0] = 0;
  sub_52E9C(*(void **)(a1 + 51320), v33, v346);
  uint64_t v47 = *(void *)&v346[0];
  kdebug_trace();
  int v342 = a4;
  uint64_t v343 = v47;
  int v339 = a2;
  switch(*(_DWORD *)(v47 + 4))
  {
    case 4:
      if (sub_44EF8(0x2Eu, 7))
      {
        int v48 = sub_44F3C(0x2Eu);
        __uint64_t v49 = sub_4F1D8();
        double v50 = (const char *)sub_44F70(7);
        if (v48)
        {
          printf("%lld %d AVE %s: H264FrameRec: DataType_PREPARE frame %d\n", v49, 46, v50, *(_DWORD *)(v47 + 160));
          sub_4F1D8();
          sub_44F70(7);
          uint64_t v38 = a1 + 25784;
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_PREPARE frame %d");
      }
      goto LABEL_171;
    case 5:
      if (a2 != -536870210 && a2 != -536870165)
      {
        if (sub_44EF8(0x2Eu, 7))
        {
          int v51 = sub_44F3C(0x2Eu);
          __uint64_t v52 = sub_4F1D8();
          int v53 = (const char *)sub_44F70(7);
          if (v51)
          {
            printf("%lld %d AVE %s: %s:%d DataType_INIT counter %d frame %d\n", v52, 46, v53, "FrameDone", 5428, v33, *(_DWORD *)(v47 + 160));
            __uint64_t v54 = sub_4F1D8();
            sub_44F70(7);
            syslog(3, "%lld %d AVE %s: %s:%d DataType_INIT counter %d frame %d", v54);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d DataType_INIT counter %d frame %d", v52);
          }
        }
        uint64_t v99 = 0;
        uint64_t v100 = v47 + 356;
        v101 = (const void **)(a1 + 26712);
        *(_DWORD *)(a1 + 25788) = *(_DWORD *)(v47 + 352);
        do
        {
          IOSurfaceID v102 = *(_DWORD *)(v100 + 4 * v99);
          if (v102)
          {
            __uint64_t v103 = IOSurfaceLookup(v102);
            const char *v101 = v103;
            IOSurfaceLock(v103, 0, 0);
            *(v101 - 30) = IOSurfaceGetBaseAddress((IOSurfaceRef)*v101);
            *(_DWORD *)(a1 + 26952 + 4 * v99) = IOSurfaceGetAllocSize((IOSurfaceRef)*v101);
            if (sub_44EF8(0x2Eu, 7))
            {
              int v104 = sub_44F3C(0x2Eu);
              __uint64_t v105 = sub_4F1D8();
              v106 = (const char *)sub_44F70(7);
              int v107 = *(_DWORD *)(v100 + 4 * v99);
              __uint64_t v108 = *(v101 - 30);
              if (v104)
              {
                printf("%lld %d AVE %s: %s:%d CodedData %d %d %p %p\n", v105, 46, v106, "FrameDone", 5444, v99, v107, *v101, v108);
                __uint64_t v109 = sub_4F1D8();
                __uint64_t v110 = (const char *)sub_44F70(7);
                syslog(3, "%lld %d AVE %s: %s:%d CodedData %d %d %p %p", v109, 46, v110, "FrameDone", 5444, v99, *(_DWORD *)(v100 + 4 * v99), *v101, *(v101 - 30));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d CodedData %d %d %p %p", v105, 46, v106, "FrameDone", 5444, v99, v107, *v101, v108);
              }
            }
          }
          ++v99;
          ++v101;
        }
        while (v99 != 30);
        __uint64_t v111 = (IOSurfaceID *)(v47 + 476);
        __uint64_t v112 = (const void **)(a1 + 27312);
        uint64_t v113 = -30;
        do
        {
          if (*v111)
          {
            int v114 = IOSurfaceLookup(*v111);
            *__uint64_t v112 = v114;
            IOSurfaceLock(v114, 0, 0);
            *(v112 - 30) = IOSurfaceGetBaseAddress((IOSurfaceRef)*v112);
            if (sub_44EF8(0x2Eu, 7))
            {
              int v115 = sub_44F3C(0x2Eu);
              __uint64_t v116 = sub_4F1D8();
              int64_t v117 = (const char *)sub_44F70(7);
              IOSurfaceID v118 = *v111;
              int v119 = *(v112 - 30);
              if (v115)
              {
                printf("%lld %d AVE %s: %s:%d CodedHeader %d %d %p %p\n", v116, 46, v117, "FrameDone", 5460, v113 + 30, v118, *v112, v119);
                __uint64_t v120 = sub_4F1D8();
                uint64_t v121 = (const char *)sub_44F70(7);
                syslog(3, "%lld %d AVE %s: %s:%d CodedHeader %d %d %p %p", v120, 46, v121, "FrameDone", 5460, v113 + 30, *v111, *v112, *(v112 - 30));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d CodedHeader %d %d %p %p", v116, 46, v117, "FrameDone", 5460, v113 + 30, v118, *v112, v119);
              }
            }
          }
          ++v111;
          ++v112;
          BOOL v122 = __CFADD__(v113++, 1);
        }
        while (!v122);
        __uint64_t v123 = (IOSurfaceID *)(v47 + 596);
        v124 = (const void **)(a1 + 27792);
        uint64_t v125 = -30;
        do
        {
          if (*v123)
          {
            long long v126 = IOSurfaceLookup(*v123);
            const char *v124 = v126;
            IOSurfaceLock(v126, 0, 0);
            *(v124 - 30) = IOSurfaceGetBaseAddress((IOSurfaceRef)*v124);
            if (sub_44EF8(0x2Eu, 7))
            {
              int v127 = sub_44F3C(0x2Eu);
              __uint64_t v128 = sub_4F1D8();
              long long v129 = (const char *)sub_44F70(7);
              IOSurfaceID v130 = *v123;
              long long v131 = *(v124 - 30);
              if (v127)
              {
                printf("%lld %d AVE %s: %s:%d SliceHeader %d %d %p %p\n", v128, 46, v129, "FrameDone", 5476, v125 + 30, v130, *v124, v131);
                __uint64_t v132 = sub_4F1D8();
                long long v133 = (const char *)sub_44F70(7);
                syslog(3, "%lld %d AVE %s: %s:%d SliceHeader %d %d %p %p", v132, 46, v133, "FrameDone", 5476, v125 + 30, *v123, *v124, *(v124 - 30));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d SliceHeader %d %d %p %p", v128, 46, v129, "FrameDone", 5476, v125 + 30, v130, *v124, v131);
              }
            }
          }
          ++v123;
          ++v124;
          BOOL v122 = __CFADD__(v125++, 1);
        }
        while (!v122);
        long long v134 = (IOSurfaceID *)(v47 + 716);
        long long v135 = (const void **)(a1 + 26032);
        uint64_t v136 = -30;
        do
        {
          if (*v134)
          {
            uint64_t v137 = IOSurfaceLookup(*v134);
            *long long v135 = v137;
            IOSurfaceLock(v137, 0, 0);
            *(v135 - 30) = IOSurfaceGetBaseAddress((IOSurfaceRef)*v135);
            if (sub_44EF8(0x2Eu, 7))
            {
              int v138 = sub_44F3C(0x2Eu);
              __uint64_t v139 = sub_4F1D8();
              v140 = (const char *)sub_44F70(7);
              IOSurfaceID v141 = *v134;
              int v142 = *(v135 - 30);
              if (v138)
              {
                printf("%lld %d AVE %s: %s:%d MBStats %d %d %p %p\n", v139, 46, v140, "FrameDone", 5492, v136 + 30, v141, *v135, v142);
                __uint64_t v143 = sub_4F1D8();
                v144 = (const char *)sub_44F70(7);
                syslog(3, "%lld %d AVE %s: %s:%d MBStats %d %d %p %p", v143, 46, v144, "FrameDone", 5492, v136 + 30, *v134, *v135, *(v135 - 30));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d MBStats %d %d %p %p", v139, 46, v140, "FrameDone", 5492, v136 + 30, v141, *v135, v142);
              }
            }
          }
          ++v134;
          ++v135;
          BOOL v122 = __CFADD__(v136++, 1);
        }
        while (!v122);
        uint64_t v145 = 0;
        uint64_t v146 = v47 + 836;
        do
        {
          int v147 = *(_DWORD *)(v146 + 4 * v145);
          if (v147)
          {
            *(_DWORD *)(a1 + 26392 + 4 * v145) = v147;
            if (sub_44EF8(0x2Eu, 7))
            {
              int v148 = sub_44F3C(0x2Eu);
              __uint64_t v149 = sub_4F1D8();
              long long v150 = (const char *)sub_44F70(7);
              int v151 = *(_DWORD *)(v146 + 4 * v145);
              if (v148)
              {
                printf("%lld %d AVE %s: %s:%d iaLFSResult %d %d\n", v149, 46, v150, "FrameDone", 5506, v145, v151);
                __uint64_t v152 = sub_4F1D8();
                v153 = (const char *)sub_44F70(7);
                syslog(3, "%lld %d AVE %s: %s:%d iaLFSResult %d %d", v152, 46, v153, "FrameDone", 5506, v145, *(_DWORD *)(v146 + 4 * v145));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d iaLFSResult %d %d", v149, 46, v150, "FrameDone", 5506, v145, v151);
              }
            }
          }
          ++v145;
        }
        while (v145 != 10);
        uint64_t v154 = 0;
        uint64_t v155 = v47 + 876;
        do
        {
          int v156 = *(_DWORD *)(v155 + 4 * v154);
          if (v156)
          {
            *(_DWORD *)(a1 + 26432 + 4 * v154) = v156;
            if (sub_44EF8(0x2Eu, 7))
            {
              int v157 = sub_44F3C(0x2Eu);
              __uint64_t v158 = sub_4F1D8();
              v159 = (const char *)sub_44F70(7);
              int v160 = *(_DWORD *)(v155 + 4 * v154);
              if (v157)
              {
                printf("%lld %d AVE %s: %s:%d iaLRSResult %d %d\n", v158, 46, v159, "FrameDone", 5518, v154, v160);
                __uint64_t v161 = sub_4F1D8();
                v162 = (const char *)sub_44F70(7);
                syslog(3, "%lld %d AVE %s: %s:%d iaLRSResult %d %d", v161, 46, v162, "FrameDone", 5518, v154, *(_DWORD *)(v155 + 4 * v154));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d iaLRSResult %d %d", v158, 46, v159, "FrameDone", 5518, v154, v160);
              }
            }
          }
          ++v154;
        }
        while (v154 != 10);
        int v9 = (unsigned char *)(a1 + 239345);
        *(_DWORD *)(a1 + 67548) = *(_DWORD *)(v47 + 2360);
        uint64_t v38 = a1 + 25784;
      }
      goto LABEL_171;
    case 6:
      if (sub_44EF8(0x2Eu, 7))
      {
        int v55 = sub_44F3C(0x2Eu);
        __uint64_t v56 = sub_4F1D8();
        __uint64_t v57 = (const char *)sub_44F70(7);
        int v58 = *(_DWORD *)(a1 + 239356);
        if (v55)
        {
          printf("%lld %d AVE %s: H264FrameRec: DataType_STOP frame %d ClientID %d \n", v56, 46, v57, *(_DWORD *)(v47 + 160), v58);
          __uint64_t v59 = sub_4F1D8();
          int v60 = (const char *)sub_44F70(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_STOP frame %d ClientID %d ", v59, 46, v60, *(_DWORD *)(v47 + 160), *(_DWORD *)(a1 + 239356));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_STOP frame %d ClientID %d ", v56, 46, v57, *(_DWORD *)(v47 + 160), v58);
        }
      }
      uint64_t v79 = 0;
      uint64_t v80 = a1 + 26032;
      do
      {
        __uint64_t v81 = *(__IOSurface **)(v80 + v79);
        if (v81)
        {
          IOSurfaceUnlock(v81, 0, 0);
          CFRelease(*(CFTypeRef *)(v80 + v79));
          *(void *)(v80 + v79) = 0;
        }
        uint64_t v82 = v80 + v79;
        __uint64_t v83 = *(__IOSurface **)(v80 + v79 + 680);
        if (v83)
        {
          IOSurfaceUnlock(v83, 0, 0);
          CFRelease(*(CFTypeRef *)(v82 + 680));
          *(void *)(v82 + 680) = 0;
        }
        int v84 = *(__IOSurface **)(v82 + 1280);
        if (v84)
        {
          IOSurfaceUnlock(v84, 0, 0);
          CFRelease(*(CFTypeRef *)(v82 + 1280));
          *(void *)(v82 + 1280) = 0;
        }
        uint64_t v85 = v80 + v79;
        int64_t v86 = *(__IOSurface **)(v80 + v79 + 1760);
        if (v86)
        {
          IOSurfaceUnlock(v86, 0, 0);
          CFRelease(*(CFTypeRef *)(v85 + 1760));
          *(void *)(v85 + 1760) = 0;
        }
        v79 += 8;
      }
      while (v79 != 240);
      sub_52A90(*(void **)(a1 + 51320), (const void *)v47);
      unsigned int v87 = -1;
      int v9 = (unsigned char *)(a1 + 239345);
      uint64_t v38 = a1 + 25784;
      goto LABEL_173;
    case 7:
      *(void *)(v47 + 27704) = sub_4F1D8();
      if (sub_44EF8(0x2Eu, 7))
      {
        int v61 = a4;
        int v62 = sub_44F3C(0x2Eu);
        __uint64_t v63 = sub_4F1D8();
        int v64 = (const char *)sub_44F70(7);
        if (v62)
        {
          printf("%lld %d AVE %s: H264FrameRec: DataType_YUV frame %d type %d ClientID %d counter %d\n", v63, 46, v64, *(_DWORD *)(v47 + 160), *(_DWORD *)(v47 + 23468), *(_DWORD *)(a1 + 239356), v33);
          __uint64_t v65 = sub_4F1D8();
          sub_44F70(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_YUV frame %d type %d ClientID %d counter %d", v65);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_YUV frame %d type %d ClientID %d counter %d", v63);
        }
        a4 = v61;
        uint64_t v38 = a1 + 25784;
      }
      if (!*(_DWORD *)(v47 + 160)) {
        *(void *)(a1 + 51312) = *(void *)(v47 + 2344);
      }
      if (*(_DWORD *)(a1 + 67932) >= 2u && *(_DWORD *)(v47 + 168) && *(unsigned char *)(a1 + 51229)) {
        *(_DWORD *)(v47 + 23468) = 4;
      }
      int v88 = *(_DWORD *)(a1 + 239348);
      if (v88 != 3)
      {
        v336 = (int *)(v47 + 23468);
        unsigned int v93 = *(_DWORD *)(v47 + 23468);
        if (v93 >= 4)
        {
          if (v93 == 4)
          {
            if (sub_44EF8(0x2Eu, 5))
            {
              int v278 = sub_44F3C(0x2Eu);
              __uint64_t v279 = sub_4F1D8();
              v280 = (const char *)sub_44F70(5);
              int v281 = *v336;
              if (v278)
              {
                printf("%lld %d AVE %s: H264FrameRec: DROPPING frame %d type %d\n", v279, 46, v280, *(_DWORD *)(v47 + 160), v281);
                __uint64_t v282 = sub_4F1D8();
                v283 = (const char *)sub_44F70(5);
                uint64_t v38 = a1 + 25784;
                syslog(3, "%lld %d AVE %s: H264FrameRec: DROPPING frame %d type %d", v282, 46, v283, *(_DWORD *)(v47 + 160), *v336);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: H264FrameRec: DROPPING frame %d type %d", v279, 46, v280, *(_DWORD *)(v47 + 160), v281);
              }
            }
            uint64_t v334 = a1 + 67552;
            int v176 = sub_2840C(a1, v47);
            BOOL v291 = 0;
            int v299 = 0;
          }
          else
          {
            if (v93 == 7) {
              goto LABEL_106;
            }
            uint64_t v334 = a1 + 67552;
            if (sub_44EF8(0x2Eu, 4))
            {
              int v284 = sub_44F3C(0x2Eu);
              __uint64_t v285 = sub_4F1D8();
              v286 = (const char *)sub_44F70(4);
              int v287 = *v336;
              if (v284)
              {
                printf("%lld %d AVE %s: H264FrameRec ERROR: FrameType NOT RECOGNIZED = %d. cannot process frame.\n", v285, 46, v286, v287);
                __uint64_t v288 = sub_4F1D8();
                v326 = (const char *)sub_44F70(4);
                uint64_t v38 = a1 + 25784;
                syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: FrameType NOT RECOGNIZED = %d. cannot process frame.", v288, 46, v326, *v336);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: FrameType NOT RECOGNIZED = %d. cannot process frame.", v285, 46, v286, v287);
              }
              BOOL v291 = 0;
              int v299 = 0;
              int v176 = 0;
              unsigned int v87 = -1;
              goto LABEL_361;
            }
            BOOL v291 = 0;
            int v299 = 0;
            int v176 = 0;
          }
          unsigned int v87 = -1;
          goto LABEL_361;
        }
LABEL_106:
        uint64_t v94 = *(void *)(a1 + 51360);
        if (v94 || *(unsigned char *)v38)
        {
          if (*(unsigned char *)(a1 + 68345) && *(unsigned char *)(v47 + 3990))
          {
            if (v94)
            {
              FigFormatDescriptionRelease();
              *(void *)(a1 + 51360) = 0;
            }
            if (sub_24998(a1, (int *)v47, 0))
            {
              if (!sub_44EF8(3u, 4)) {
                goto LABEL_26;
              }
              int v95 = sub_44F3C(3u);
              __uint64_t v96 = sub_4F1D8();
              __uint64_t v97 = (const char *)sub_44F70(4);
              if (!v95) {
                goto LABEL_355;
              }
              int v98 = 5292;
LABEL_116:
              printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendSPSandPPS failed.\n", v96, 3, v97, "FrameDone", v98, "err == noErr");
              sub_4F1D8();
              sub_44F70(4);
LABEL_355:
              syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendSPSandPPS failed.");
              goto LABEL_26;
            }
          }
        }
        else if (v88 == 1 && sub_24998(a1, (int *)v47, *(unsigned __int8 *)(a1 + 67552)))
        {
          if (!sub_44EF8(3u, 4)) {
            goto LABEL_26;
          }
          int v289 = sub_44F3C(3u);
          __uint64_t v96 = sub_4F1D8();
          __uint64_t v97 = (const char *)sub_44F70(4);
          if (!v289) {
            goto LABEL_355;
          }
          int v98 = 5299;
          goto LABEL_116;
        }
        unsigned int v87 = a3[2];
        int v290 = *(_DWORD *)(a1 + 67556) - 1;
        BOOL v291 = v290 == v87;
        uint64_t v334 = a1 + 67552;
        if (!*(unsigned char *)(a1 + 67552) || (v87 & 0x80000000) != 0)
        {
          if (*(_DWORD *)(a1 + 239348) == 2)
          {
            uint64_t v38 = a1 + 25784;
            if (sub_26560(a1, v47))
            {
              if (sub_44EF8(3u, 4))
              {
                int v296 = sub_44F3C(3u);
                __uint64_t v297 = sub_4F1D8();
                v298 = (const char *)sub_44F70(4);
                if (v296)
                {
                  printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: ProcessAndEmitLrmeStats failed\n", v297, 3, v298, "FrameDone", 5330, "err == noErr");
                  sub_4F1D8();
                  sub_44F70(4);
                }
                syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: ProcessAndEmitLrmeStats failed");
              }
              goto LABEL_26;
            }
          }
          else
          {
            uint64_t v38 = a1 + 25784;
            if (!*(unsigned char *)(a1 + 67552))
            {
              if (sub_20648(a1, v47))
              {
                if (!sub_44EF8(3u, 4)) {
                  goto LABEL_26;
                }
                int v300 = sub_44F3C(3u);
                __uint64_t v293 = sub_4F1D8();
                v294 = (const char *)sub_44F70(4);
                if (!v300) {
                  goto LABEL_354;
                }
                int v295 = 5339;
                goto LABEL_337;
              }
              sub_2D2DC(*(void *)(a1 + 51328), (uint64_t)v346);
              int v176 = sub_2918C(a1, v47, v346, 0xFFFFFFFF);
              int v299 = 0;
              goto LABEL_361;
            }
          }
          int v299 = 0;
          int v176 = 0;
        }
        else
        {
          if (sub_20648(a1, v47))
          {
            if (!sub_44EF8(3u, 4)) {
              goto LABEL_26;
            }
            int v292 = sub_44F3C(3u);
            __uint64_t v293 = sub_4F1D8();
            v294 = (const char *)sub_44F70(4);
            if (!v292) {
              goto LABEL_354;
            }
            int v295 = 5318;
LABEL_337:
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CollectSlicesSizes failed.\n", v293, 3, v294, "FrameDone", v295, "err == noErr");
            sub_4F1D8();
            sub_44F70(4);
LABEL_354:
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CollectSlicesSizes failed.");
            goto LABEL_26;
          }
          sub_2D2DC(*(void *)(a1 + 51328), (uint64_t)v346);
          int v176 = sub_2918C(a1, v47, v346, v87);
          int v299 = 1;
          if (v290 != v87)
          {
            BOOL v291 = 0;
            uint64_t v38 = a1 + 25784;
            goto LABEL_372;
          }
          BOOL v291 = 1;
          uint64_t v38 = a1 + 25784;
        }
LABEL_361:
        v301 = *(const void **)(v47 + 336);
        if (v301)
        {
          CFRelease(v301);
          *(void *)(v47 + 336) = 0;
        }
        if (*(_DWORD *)(a1 + 239348) == 1)
        {
          int v333 = v299;
          BOOL v302 = v291;
          uint64_t v303 = *(void *)(v334 + 3992);
          __uint64_t v304 = sub_4F1D8();
          uint64_t v305 = v303;
          BOOL v291 = v302;
          int v299 = v333;
          sub_6ECC(v305, 5u, v304);
        }
        if (v176 && sub_44EF8(0x2Eu, 4))
        {
          BOOL v335 = v291;
          int v306 = sub_44F3C(0x2Eu);
          __uint64_t v307 = sub_4F1D8();
          v308 = (const char *)sub_44F70(4);
          if (v306)
          {
            printf("%lld %d AVE %s: H264FrameRec ERROR: SendFrame failed. continue.\n", v307, 46, v308);
            __uint64_t v309 = sub_4F1D8();
            v327 = (const char *)sub_44F70(4);
            uint64_t v38 = a1 + 25784;
            syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: SendFrame failed. continue.", v309, 46, v327);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: SendFrame failed. continue.", v307, 46, v308);
          }
          BOOL v291 = v335;
        }
        sub_52A90(*(void **)(a1 + 51320), (const void *)v47);
LABEL_372:
        if (v299 && !v291 && *v336 != 4)
        {
LABEL_189:
          a4 = v342;
          switch(*(_DWORD *)(v47 + 4))
          {
            case 4:
              LODWORD(v346[0]) = v33;
              int v347 = v339;
              int v177 = sub_2D34C(*(void *)(v38 + 25552), v346);
              if (v176)
              {
                a2 = v339;
                if (sub_44EF8(3u, 4))
                {
                  int v178 = sub_44F3C(3u);
                  __uint64_t v179 = sub_4F1D8();
                  v180 = (const char *)sub_44F70(4);
                  if (!v178) {
                    goto LABEL_324;
                  }
                  int v181 = 5660;
                  goto LABEL_235;
                }
              }
              else
              {
                if (!v177) {
                  goto LABEL_242;
                }
                a2 = v339;
                if (sub_44EF8(3u, 4))
                {
                  int v197 = sub_44F3C(3u);
                  __uint64_t v198 = sub_4F1D8();
                  v199 = (const char *)sub_44F70(4);
                  if (!v197) {
                    goto LABEL_348;
                  }
                  int v200 = 5661;
                  goto LABEL_240;
                }
              }
              goto LABEL_26;
            case 5:
              LODWORD(v346[0]) = v33;
              int v347 = v339;
              int v182 = sub_2D34C(*(void *)(v38 + 25552), v346);
              if (v176)
              {
                a2 = v339;
                if (sub_44EF8(3u, 4))
                {
                  int v183 = sub_44F3C(3u);
                  __uint64_t v179 = sub_4F1D8();
                  v180 = (const char *)sub_44F70(4);
                  if (!v183) {
                    goto LABEL_324;
                  }
                  int v181 = 5676;
                  goto LABEL_235;
                }
              }
              else
              {
                if (!v182) {
                  goto LABEL_242;
                }
                a2 = v339;
                if (sub_44EF8(3u, 4))
                {
                  int v201 = sub_44F3C(3u);
                  __uint64_t v198 = sub_4F1D8();
                  v199 = (const char *)sub_44F70(4);
                  if (!v201) {
                    goto LABEL_348;
                  }
                  int v200 = 5677;
                  goto LABEL_240;
                }
              }
              goto LABEL_26;
            case 6:
              LODWORD(v346[0]) = v33;
              int v347 = v339;
              int v184 = sub_2D34C(*(void *)(v38 + 25552), v346);
              if (v176)
              {
                a2 = v339;
                if (sub_44EF8(3u, 4))
                {
                  int v185 = sub_44F3C(3u);
                  __uint64_t v179 = sub_4F1D8();
                  v180 = (const char *)sub_44F70(4);
                  if (!v185) {
                    goto LABEL_324;
                  }
                  int v181 = 5692;
                  goto LABEL_235;
                }
              }
              else
              {
                if (!v184) {
                  goto LABEL_242;
                }
                a2 = v339;
                if (sub_44EF8(3u, 4))
                {
                  int v202 = sub_44F3C(3u);
                  __uint64_t v198 = sub_4F1D8();
                  v199 = (const char *)sub_44F70(4);
                  if (!v202) {
                    goto LABEL_348;
                  }
                  int v200 = 5693;
                  goto LABEL_240;
                }
              }
              goto LABEL_26;
            case 7:
              goto LABEL_242;
            case 8:
              LODWORD(v346[0]) = v33;
              int v347 = v339;
              if (sub_44EF8(0x2Eu, 7))
              {
                int v186 = sub_44F3C(0x2Eu);
                __uint64_t v187 = sub_4F1D8();
                v188 = (const char *)sub_44F70(7);
                if (v186)
                {
                  printf("%lld %d AVE %s: H264FrameRec: writePacketBlock = %d\n", v187, 46, v188, v33);
                  __uint64_t v189 = sub_4F1D8();
                  v320 = (const char *)sub_44F70(7);
                  syslog(3, "%lld %d AVE %s: H264FrameRec: writePacketBlock = %d", v189, 46, v320, v33);
                }
                else
                {
                  syslog(3, "%lld %d AVE %s: H264FrameRec: writePacketBlock = %d", v187, 46, v188, v33);
                }
                a4 = v342;
              }
              int v204 = sub_2D34C(*(void *)(a1 + 51336), v346);
              if (v176)
              {
                a2 = v339;
                if (!sub_44EF8(3u, 4)) {
                  goto LABEL_26;
                }
                int v205 = sub_44F3C(3u);
                __uint64_t v179 = sub_4F1D8();
                v180 = (const char *)sub_44F70(4);
                if (v205)
                {
                  int v181 = 5644;
                  goto LABEL_235;
                }
                goto LABEL_324;
              }
              if (!v204) {
                goto LABEL_242;
              }
              a2 = v339;
              if (!sub_44EF8(3u, 4)) {
                goto LABEL_26;
              }
              int v206 = sub_44F3C(3u);
              __uint64_t v198 = sub_4F1D8();
              v199 = (const char *)sub_44F70(4);
              if (!v206) {
                goto LABEL_348;
              }
              int v200 = 5645;
              goto LABEL_240;
            case 0xA:
              LODWORD(v346[0]) = v33;
              int v347 = v339;
              int v195 = sub_2D34C(*(void *)(v38 + 25552), v346);
              if (v176)
              {
                a2 = v339;
                if (sub_44EF8(3u, 4))
                {
                  int v196 = sub_44F3C(3u);
                  __uint64_t v179 = sub_4F1D8();
                  v180 = (const char *)sub_44F70(4);
                  if (v196)
                  {
                    int v181 = 5708;
LABEL_235:
                    printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: writePacketBlock failed.\n", v179, 3, v180, "FrameDone", v181, "err == noErr");
                    sub_4F1D8();
                    sub_44F70(4);
                  }
LABEL_324:
                  syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: writePacketBlock failed.");
                }
              }
              else
              {
                if (!v195)
                {
LABEL_242:
                  a2 = v339;
                  if ((*((unsigned char *)sub_3E4B0() + 784) & 0x20) == 0) {
                    goto LABEL_26;
                  }
                  unint64_t v207 = *(void *)(a1 + 16 * *(unsigned __int8 *)(v47 + 160) + 241176);
                  if (sub_44EF8(0x2Eu, 8))
                  {
                    int v208 = sub_44F3C(0x2Eu);
                    __uint64_t v209 = sub_4F1D8();
                    v210 = (const char *)sub_44F70(8);
                    if (v208)
                    {
                      printf("%lld %d AVE %s: \n", v209, 46, v210);
                      __uint64_t v211 = sub_4F1D8();
                      v322 = (const char *)sub_44F70(8);
                      syslog(3, "%lld %d AVE %s: ", v211, 46, v322);
                    }
                    else
                    {
                      syslog(3, "%lld %d AVE %s: ", v209, 46, v210);
                    }
                  }
                  unsigned int v341 = v87;
                  double v212 = (double)v207;
                  int v213 = *(_DWORD *)(v47 + 160) - 1;
                  v337 = v9;
                  if (v213 < 0)
                  {
                    int v214 = 0;
                    LODWORD(v216) = 0;
                    int v223 = 0;
                    *(void *)(v47 + 29368) = 0;
                    double v217 = 0.0;
                  }
                  else
                  {
                    int v214 = *(_DWORD *)(v47 + 160);
                    int v215 = 0;
                    LODWORD(v216) = 0;
                    while (1)
                    {
                      double v217 = (v212 - (double)*(uint64_t *)(a1 + 16 * v213 + 241176))
                           / (double)*(int *)(v47 + 2352);
                      if (sub_44EF8(0x2Eu, 8))
                      {
                        int v218 = sub_44F3C(0x2Eu);
                        __uint64_t v219 = sub_4F1D8();
                        v220 = (const char *)sub_44F70(8);
                        int v221 = *(_DWORD *)(v47 + 160);
                        if (v218)
                        {
                          printf("%lld %d AVE %s: H264FrameRec: DROP F %d 1/10 -> i %d, bits %d, timePassed %4.3f, framesUsed %d\n", v219, 46, v220, v221, v213, v216, v217, v215);
                          __uint64_t v222 = sub_4F1D8();
                          v323 = (const char *)sub_44F70(8);
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1/10 -> i %d, bits %d, timePassed %4.3f, framesUsed %d", v222, 46, v323, *(_DWORD *)(v47 + 160), v213, v216, v217, v215);
                        }
                        else
                        {
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1/10 -> i %d, bits %d, timePassed %4.3f, framesUsed %d", v219, 46, v220, v221, v213, v216, v217, v215);
                        }
                      }
                      uint64_t v216 = *(int *)(a1 + 16 * v213 + 241168) + (uint64_t)(int)v216;
                      if (v217 >= 0.1) {
                        break;
                      }
                      --v213;
                      ++v215;
                      if (v213 == -1) {
                        goto LABEL_258;
                      }
                    }
                    int v214 = v215 + 1;
LABEL_258:
                    *(void *)(v47 + 29368) = v216;
                    if (v217 == 0.0) {
                      int v223 = 0;
                    }
                    else {
                      int v223 = (int)((double)(int)v216 / v217);
                    }
                  }
                  if (sub_44EF8(0x2Eu, 8))
                  {
                    int v224 = sub_44F3C(0x2Eu);
                    __uint64_t v225 = sub_4F1D8();
                    v226 = (const char *)sub_44F70(8);
                    if (v224)
                    {
                      printf("%lld %d AVE %s: H264FrameRec: DROP F %d, 1/10 -> frames %d, bits %d, timepassed %04.3f, -> bitrate %d\n", v225, 46, v226, *(_DWORD *)(v47 + 160), v214, v216, v217, v223);
                      __uint64_t v227 = sub_4F1D8();
                      sub_44F70(8);
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d, 1/10 -> frames %d, bits %d, timepassed %04.3f, -> bitrate %d", v227);
                    }
                    else
                    {
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d, 1/10 -> frames %d, bits %d, timepassed %04.3f, -> bitrate %d", v225);
                    }
                  }
                  int v228 = *(_DWORD *)(v47 + 160);
                  int v229 = v228 - 1;
                  if (v228 - 1 < 0)
                  {
                    int v231 = 0;
                    LODWORD(v230) = 0;
                    int v238 = 0;
                    a4 = v342;
                    *(void *)(v343 + 29376) = 0;
                    double v232 = 0.0;
                  }
                  else
                  {
                    LODWORD(v230) = 0;
                    int v231 = 1;
                    a4 = v342;
                    do
                    {
                      double v232 = (v212 - (double)*(uint64_t *)(a1 + 16 * v229 + 241176))
                           / (double)*(int *)(v343 + 2352);
                      uint64_t v230 = *(int *)(a1 + 16 * v229 + 241168) + (uint64_t)(int)v230;
                      if (sub_44EF8(0x2Eu, 8))
                      {
                        int v233 = sub_44F3C(0x2Eu);
                        __uint64_t v234 = sub_4F1D8();
                        v235 = (const char *)sub_44F70(8);
                        int v236 = *(_DWORD *)(v343 + 160);
                        if (v233)
                        {
                          printf("%lld %d AVE %s: H264FrameRec: DROP F %d 1/2 -> i %d, bits %d, timePassed %4.3f, framesUsed %d\n", v234, 46, v235, v236, v229, v230, v232, v231);
                          __uint64_t v237 = sub_4F1D8();
                          a4 = v342;
                          v324 = (const char *)sub_44F70(8);
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1/2 -> i %d, bits %d, timePassed %4.3f, framesUsed %d", v237, 46, v324, *(_DWORD *)(v343 + 160), v229, v230, v232, v231);
                        }
                        else
                        {
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1/2 -> i %d, bits %d, timePassed %4.3f, framesUsed %d", v234, 46, v235, v236, v229, v230, v232, v231);
                        }
                      }
                      if (v232 >= 0.5) {
                        goto LABEL_274;
                      }
                      --v229;
                      ++v231;
                    }
                    while (v229 != -1);
                    int v231 = v228;
LABEL_274:
                    *(void *)(v343 + 29376) = v230;
                    if (v232 == 0.0) {
                      int v238 = 0;
                    }
                    else {
                      int v238 = (int)((double)(int)v230 / v232);
                    }
                  }
                  if (sub_44EF8(0x2Eu, 8))
                  {
                    int v239 = sub_44F3C(0x2Eu);
                    __uint64_t v240 = sub_4F1D8();
                    v241 = (const char *)sub_44F70(8);
                    if (v239)
                    {
                      printf("%lld %d AVE %s: H264FrameRec: DROP F %d 1/2 -> frames %d bits %d timepassed %04.3f -> bitrate %d\n", v240, 46, v241, *(_DWORD *)(v343 + 160), v231, v230, v232, v238);
                      __uint64_t v242 = sub_4F1D8();
                      sub_44F70(8);
                      a4 = v342;
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1/2 -> frames %d bits %d timepassed %04.3f -> bitrate %d", v242);
                    }
                    else
                    {
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1/2 -> frames %d bits %d timepassed %04.3f -> bitrate %d", v240);
                    }
                  }
                  if (*(_DWORD *)(v343 + 160) - 1 <= 0)
                  {
                    int v244 = 0;
                    LODWORD(v243) = 0;
                    int v255 = 0;
                    *(void *)(v343 + 29384) = 0;
                    double v247 = 0.0;
                  }
                  else
                  {
                    LODWORD(v243) = 0;
                    int v244 = 1;
                    int v340 = *(_DWORD *)(v343 + 160) - 1;
                    int v245 = v340;
                    do
                    {
                      v246 = (int *)(a1 + 16 * v245 + 241168);
                      double v247 = (v212 - (double)*(uint64_t *)(a1 + 16 * v245 + 241176))
                           / (double)*(int *)(v343 + 2352);
                      uint64_t v243 = *v246 + (uint64_t)(int)v243;
                      if (sub_44EF8(0x2Eu, 8))
                      {
                        int v248 = sub_44F3C(0x2Eu);
                        __uint64_t v249 = sub_4F1D8();
                        v250 = (const char *)sub_44F70(8);
                        int v251 = *(_DWORD *)(v343 + 160);
                        int v252 = *v246;
                        if (v248)
                        {
                          printf("%lld %d AVE %s: H264FrameRec: DROP F %d 1 -> i %d, bits %d (frame %d), timePassed %4.3f, framesUsed %d\n", v249, 46, v250, v251, v245, v243, v252, v247, v244);
                          __uint64_t v253 = sub_4F1D8();
                          v254 = (const char *)sub_44F70(8);
                          a4 = v342;
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1 -> i %d, bits %d (frame %d), timePassed %4.3f, framesUsed %d", v253, 46, v254, *(_DWORD *)(v343 + 160), v245, v243, *v246, v247, v244);
                        }
                        else
                        {
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1 -> i %d, bits %d (frame %d), timePassed %4.3f, framesUsed %d", v249, 46, v250, v251, v245, v243, v252, v247, v244);
                        }
                      }
                      if (v247 >= 1.0) {
                        goto LABEL_291;
                      }
                      ++v244;
                      --v245;
                    }
                    while (v245);
                    int v244 = v340;
LABEL_291:
                    *(void *)(v343 + 29384) = v243;
                    if (v247 == 0.0) {
                      int v255 = 0;
                    }
                    else {
                      int v255 = (int)((double)(int)v243 / v247);
                    }
                  }
                  if (sub_44EF8(0x2Eu, 8))
                  {
                    int v256 = sub_44F3C(0x2Eu);
                    __uint64_t v257 = sub_4F1D8();
                    v258 = (const char *)sub_44F70(8);
                    if (v256)
                    {
                      printf("%lld %d AVE %s: H264FrameRec: DROP F %d 1 -> frames %d bits %d timepassed %04.3f -> ###### bitrate %d ######\n", v257, 46, v258, *(_DWORD *)(v343 + 160), v244, v243, v247, v255);
                      __uint64_t v259 = sub_4F1D8();
                      sub_44F70(8);
                      a4 = v342;
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1 -> frames %d bits %d timepassed %04.3f -> ###### bitrate %d ######", v259);
                    }
                    else
                    {
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1 -> frames %d bits %d timepassed %04.3f -> ###### bitrate %d ######", v257);
                    }
                  }
                  int v260 = *(_DWORD *)(v343 + 160);
                  int v261 = v260 - 1;
                  if (v260 - 1 < 0)
                  {
                    int v263 = 0;
                    LODWORD(v262) = 0;
                    int v270 = 0;
                    *(void *)(v343 + 29392) = 0;
                    double v264 = 0.0;
                  }
                  else
                  {
                    LODWORD(v262) = 0;
                    int v263 = 1;
                    do
                    {
                      double v264 = (v212 - (double)*(uint64_t *)(a1 + 16 * v261 + 241176))
                           / (double)*(int *)(v343 + 2352);
                      uint64_t v262 = *(int *)(a1 + 16 * v261 + 241168) + (uint64_t)(int)v262;
                      if (sub_44EF8(0x2Eu, 8))
                      {
                        int v265 = sub_44F3C(0x2Eu);
                        __uint64_t v266 = sub_4F1D8();
                        v267 = (const char *)sub_44F70(8);
                        int v268 = *(_DWORD *)(v343 + 160);
                        if (v265)
                        {
                          printf("%lld %d AVE %s: H264FrameRec: DROP F %d 2 -> i %d, bits %d, timePassed %4.3f, framesUsed %d\n", v266, 46, v267, v268, v261, v262, v264, v263);
                          __uint64_t v269 = sub_4F1D8();
                          a4 = v342;
                          v325 = (const char *)sub_44F70(8);
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 2 -> i %d, bits %d, timePassed %4.3f, framesUsed %d", v269, 46, v325, *(_DWORD *)(v343 + 160), v261, v262, v264, v263);
                        }
                        else
                        {
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 2 -> i %d, bits %d, timePassed %4.3f, framesUsed %d", v266, 46, v267, v268, v261, v262, v264, v263);
                        }
                      }
                      if (v264 >= 2.0) {
                        goto LABEL_308;
                      }
                      --v261;
                      ++v263;
                    }
                    while (v261 != -1);
                    int v263 = v260;
LABEL_308:
                    *(void *)(v343 + 29392) = v262;
                    if (v264 == 0.0) {
                      int v270 = 0;
                    }
                    else {
                      int v270 = (int)((double)(int)v262 / v264);
                    }
                  }
                  if (sub_44EF8(0x2Eu, 8))
                  {
                    int v271 = sub_44F3C(0x2Eu);
                    __uint64_t v272 = sub_4F1D8();
                    v273 = (const char *)sub_44F70(8);
                    if (v271)
                    {
                      printf("%lld %d AVE %s: H264FrameRec: DROP F %d 2 -> frames %d bits %d timepassed %04.3f -> bitrate %d\n", v272, 46, v273, *(_DWORD *)(v343 + 160), v263, v262, v264, v270);
                      __uint64_t v274 = sub_4F1D8();
                      sub_44F70(8);
                      a4 = v342;
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 2 -> frames %d bits %d timepassed %04.3f -> bitrate %d", v274);
                    }
                    else
                    {
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 2 -> frames %d bits %d timepassed %04.3f -> bitrate %d", v272);
                    }
                  }
                  int v275 = *(_DWORD *)(a1 + 69964);
                  *(unsigned char *)(a1 + 239452) = (*(unsigned char *)(a1 + 69872) & 0x10) != 0;
                  int v276 = *(_DWORD *)(v337 + 7);
                  *(_DWORD *)(a1 + 239444) = v275;
                  *(_DWORD *)(a1 + 239448) = v276;
                  *(_DWORD *)(a1 + 239440) = *((_DWORD *)sub_3E4B0() + 197) & 0x20;
                  *(unsigned char *)(a1 + 239453) = *(unsigned char *)(a1 + 67552);
                  *(_DWORD *)(a1 + 239456) = v341;
                  v277 = (const void *)sub_44B8(*(void *)(a1 + 71552), 5u, *(_DWORD *)(v343 + 16));
                  sub_7440((const void *)(a1 + 239440), (const void *)v343, v277);
                  memcpy((void *)(a1 + 239464), (const void *)(v343 + 27672), 0x698uLL);
                  *(_OWORD *)(a1 + 241152) = *(_OWORD *)(v343 + 2344);
                  a2 = v339;
                  goto LABEL_26;
                }
                a2 = v339;
                if (sub_44EF8(3u, 4))
                {
                  int v203 = sub_44F3C(3u);
                  __uint64_t v198 = sub_4F1D8();
                  v199 = (const char *)sub_44F70(4);
                  if (v203)
                  {
                    int v200 = 5709;
LABEL_240:
                    printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: Timed Out waiting for space to write packet to main thread\n", v198, 3, v199, "FrameDone", v200, "ret == 0");
                    sub_4F1D8();
                    sub_44F70(4);
                  }
LABEL_348:
                  syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: Timed Out waiting for space to write packet to main thread");
                }
              }
              break;
            default:
              if (sub_44EF8(0x2Eu, 4))
              {
                int v190 = sub_44F3C(0x2Eu);
                __uint64_t v191 = sub_4F1D8();
                v192 = (const char *)sub_44F70(4);
                int v193 = *(_DWORD *)(v47 + 4);
                if (v190)
                {
                  printf("%lld %d AVE %s: H264FrameRec ERROR: OutputDataFromKernel.type NOT RECOGNIZED = %d. cannot process frame\n", v191, 46, v192, v193);
                  __uint64_t v194 = sub_4F1D8();
                  v321 = (const char *)sub_44F70(4);
                  syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: OutputDataFromKernel.type NOT RECOGNIZED = %d. cannot process frame", v194, 46, v321, *(_DWORD *)(v47 + 4));
                }
                else
                {
                  syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: OutputDataFromKernel.type NOT RECOGNIZED = %d. cannot process frame", v191, 46, v192, v193);
                }
              }
              goto LABEL_242;
          }
          goto LABEL_26;
        }
        goto LABEL_173;
      }
      int v89 = sub_28EB4(a1, v47);
      sub_52A90(*(void **)(a1 + 51320), (const void *)v47);
      if (v89)
      {
        if (sub_44EF8(3u, 4))
        {
          int v90 = sub_44F3C(3u);
          __uint64_t v91 = sub_4F1D8();
          __uint64_t v92 = (const char *)sub_44F70(4);
          if (v90)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrameMCTF failed.\n", v91, 3, v92, "FrameDone", 5264, "err == noErr");
            sub_4F1D8();
            sub_44F70(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrameMCTF failed.");
        }
        goto LABEL_26;
      }
LABEL_172:
      unsigned int v87 = -1;
LABEL_173:
      uint64_t v163 = *(void *)(v38 + 25544);
      pthread_mutex_lock((pthread_mutex_t *)v163);
      do
      {
        int v164 = *(_DWORD *)(v163 + 200);
        if (v164)
        {
          int v169 = *(_DWORD *)(v163 + 204);
          unsigned int v170 = *(_DWORD *)(v163 + 196);
          if (v169 + 1 < v170) {
            int v171 = v169 + 1;
          }
          else {
            int v171 = 0;
          }
          *(_DWORD *)(v163 + 200) = v164 - 1;
          *(_DWORD *)(v163 + 204) = v171;
          if (v164 == v170) {
            pthread_cond_signal((pthread_cond_t *)(v163 + 112));
          }
          pthread_mutex_unlock((pthread_mutex_t *)v163);
          uint64_t v38 = a1 + 25784;
          if (sub_44EF8(0x2Eu, 7))
          {
            int v172 = sub_44F3C(0x2Eu);
            __uint64_t v173 = sub_4F1D8();
            v174 = (const char *)sub_44F70(7);
            if (v172)
            {
              printf("%lld %d AVE %s: H264FrameRec: readPacketBlock = %d\n", v173, 46, v174, v33);
              __uint64_t v175 = sub_4F1D8();
              v319 = (const char *)sub_44F70(7);
              uint64_t v38 = a1 + 25784;
              syslog(3, "%lld %d AVE %s: H264FrameRec: readPacketBlock = %d", v175, 46, v319, v33);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: readPacketBlock = %d", v173, 46, v174, v33);
            }
          }
          int v176 = 0;
          goto LABEL_189;
        }
        gettimeofday((timeval *)(v163 + 176), 0);
        uint64_t v165 = (1000 * *(_DWORD *)(v163 + 184));
        *(void *)(v163 + 160) = *(void *)(v163 + 176) + 120;
        *(void *)(v163 + 168) = v165;
      }
      while (pthread_cond_timedwait((pthread_cond_t *)(v163 + 64), (pthread_mutex_t *)v163, (const timespec *)(v163 + 160)) != 60);
      pthread_mutex_unlock((pthread_mutex_t *)v163);
      a2 = v339;
      a4 = v342;
      if (!sub_44EF8(3u, 4)) {
        goto LABEL_26;
      }
      int v166 = sub_44F3C(3u);
      __uint64_t v167 = sub_4F1D8();
      v168 = (const char *)sub_44F70(4);
      if (v166)
      {
        int v21 = v342;
        uint64_t v22 = 3;
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: readPacketBlock failed. %d\n", v167, 3, v168, "FrameDone", 5620, "err == noErr", -1);
        __uint64_t v23 = sub_4F1D8();
        v329 = "err == noErr";
        uint64_t v330 = 0xFFFFFFFFLL;
        uint64_t v328 = 5620;
        v313 = sub_44F70(4);
        __uint64_t v25 = "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: readPacketBlock failed. %d";
        goto LABEL_23;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: readPacketBlock failed. %d", v167);
LABEL_26:
      if (sub_44EF8(0x2Eu, 8))
      {
        int v26 = sub_44F3C(0x2Eu);
        __uint64_t v27 = sub_4F1D8();
        long long v28 = (const char *)sub_44F70(8);
        if (v26)
        {
          printf("%lld %d AVE %s: %s Exit %p 0x%x %p %d\n", v27, 46, v28, "FrameDone", (const void *)a1, a2, a3, a4);
          __uint64_t v29 = sub_4F1D8();
          sub_44F70(8);
          syslog(3, "%lld %d AVE %s: %s Exit %p 0x%x %p %d", v29, 46);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s Exit %p 0x%x %p %d", v27, 46);
        }
      }
      return;
    case 8:
      if (sub_44EF8(0x2Eu, 7))
      {
        int v66 = sub_44F3C(0x2Eu);
        __uint64_t v67 = sub_4F1D8();
        int v68 = (const char *)sub_44F70(7);
        if (v66)
        {
          printf("%lld %d AVE %s: H264FrameRec: DataType_COMPLETE frame %d counter %d ClientID %d\n", v67, 46, v68, *(_DWORD *)(v47 + 160), v33, *(_DWORD *)(a1 + 239356));
          sub_4F1D8();
          sub_44F70(7);
          uint64_t v38 = a1 + 25784;
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_COMPLETE frame %d counter %d ClientID %d");
      }
      goto LABEL_171;
    case 0xA:
      if (sub_44EF8(0x2Eu, 7))
      {
        int v74 = sub_44F3C(0x2Eu);
        __uint64_t v75 = sub_4F1D8();
        __uint64_t v76 = (const char *)sub_44F70(7);
        int v77 = *(_DWORD *)(v47 + 160);
        if (v74)
        {
          printf("%lld %d AVE %s: H264FrameRec: DataType_RESETMULTIPASS frame %d\n", v75, 46, v76, v77);
          __uint64_t v78 = sub_4F1D8();
          v318 = (const char *)sub_44F70(7);
          uint64_t v38 = a1 + 25784;
          syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_RESETMULTIPASS frame %d", v78, 46, v318, *(_DWORD *)(v47 + 160));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_RESETMULTIPASS frame %d", v75, 46, v76, v77);
        }
      }
      if (*v338) {
        sub_487D8((void *)(a1 + 8), *v338, 0);
      }
      *(unsigned char *)uint64_t v38 = 0;
      if (*(void *)(v38 + 25576))
      {
        FigFormatDescriptionRelease();
        *(void *)(v38 + 25576) = 0;
      }
LABEL_171:
      sub_52A90(*(void **)(a1 + 51320), (const void *)v47);
      goto LABEL_172;
    default:
      if (sub_44EF8(0x2Eu, 4))
      {
        int v69 = sub_44F3C(0x2Eu);
        __uint64_t v70 = sub_4F1D8();
        int v71 = (const char *)sub_44F70(4);
        int v72 = *(_DWORD *)(v47 + 4);
        if (v69)
        {
          printf("%lld %d AVE %s: H264FrameRec ERROR: OutputDataFromKernel.type NOT RECOGNIZED = %d. cannot process frame\n", v70, 46, v71, v72);
          __uint64_t v73 = sub_4F1D8();
          v317 = (const char *)sub_44F70(4);
          uint64_t v38 = a1 + 25784;
          syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: OutputDataFromKernel.type NOT RECOGNIZED = %d. cannot process frame", v73, 46, v317, *(_DWORD *)(v47 + 4));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: OutputDataFromKernel.type NOT RECOGNIZED = %d. cannot process frame", v70, 46, v71, v72);
        }
      }
      goto LABEL_172;
  }
}

uint64_t sub_1E2E8(uint64_t a1, uint64_t a2, unsigned int a3, unsigned char *a4)
{
  if (!a2)
  {
    uint64_t result = sub_44EF8(3u, 4);
    if (!result) {
      return result;
    }
    int v15 = sub_44F3C(3u);
    __uint64_t v16 = sub_4F1D8();
    __uint64_t v17 = (const char *)sub_44F70(4);
    if (v15)
    {
      printf("%lld %d AVE %s: %s:%d %s | AVE - removeEPB: input buffer NULL. FAIL\n", v16, 3, v17, "removeEPB", 617, "p_buf_start != __null");
      sub_4F1D8();
      sub_44F70(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | AVE - removeEPB: input buffer NULL. FAIL");
    return 0;
  }
  if (a3 <= 2)
  {
    uint64_t result = sub_44EF8(3u, 4);
    if (!result) {
      return result;
    }
    int v18 = sub_44F3C(3u);
    __uint64_t v19 = sub_4F1D8();
    __uint64_t v20 = (const char *)sub_44F70(4);
    if (v18)
    {
      printf("%lld %d AVE %s: %s:%d %s | AVE - removeEPB: lenght < 3. FAIL\n", v19, 3, v20, "removeEPB", 618, "length >= 3");
      sub_4F1D8();
      sub_44F70(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | AVE - removeEPB: lenght < 3. FAIL");
    return 0;
  }
  int v4 = (int)a4;
  if (!a4)
  {
    uint64_t result = sub_44EF8(3u, 4);
    if (!result) {
      return result;
    }
    int v21 = sub_44F3C(3u);
    __uint64_t v22 = sub_4F1D8();
    __uint64_t v23 = (const char *)sub_44F70(4);
    if (v21)
    {
      printf("%lld %d AVE %s: %s:%d %s | AVE - removeEPB: output buffer NULL. FAIL\n", v22, 3, v23, "removeEPB", 619, "outbuffer != __null");
      sub_4F1D8();
      sub_44F70(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | AVE - removeEPB: output buffer NULL. FAIL");
    return 0;
  }
  uint64_t v6 = 0;
  int v7 = 0;
  int v9 = a4;
  do
  {
    int v10 = *(unsigned __int8 *)(a2 + v6);
    int v7 = v10 | (v7 << 8);
    if ((v7 & 0xFFFFFF) == 3)
    {
      if (sub_44EF8(0x2Eu, 7))
      {
        int v11 = sub_44F3C(0x2Eu);
        __uint64_t v12 = sub_4F1D8();
        __uint64_t v13 = (const char *)sub_44F70(7);
        if (v11)
        {
          printf("%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!\n", v12, 46, v13, v9 - v4, v6);
          __uint64_t v12 = sub_4F1D8();
          __uint64_t v13 = (const char *)sub_44F70(7);
        }
        syslog(3, "%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!", v12, 46, v13, v9 - v4, v6);
      }
    }
    else
    {
      *v9++ = v10;
    }
    ++v6;
  }
  while (a3 != v6);
  return (v9 - v4);
}

uint64_t sub_1E624(uint64_t a1, uint64_t a2, unsigned char *a3, unsigned int *a4)
{
  uint64_t v7 = a1 + 71564;
  BOOL v8 = (unsigned char *)(a1 + 68221);
  int v9 = (_DWORD *)(a1 + 51376);
  values = 0;
  CFTypeRef cf = 0;
  int v147 = 0;
  int v10 = *(_DWORD *)(a1 + 68256);
  if (v10 == 1)
  {
    size_t v18 = *a4 - 4;
    if (sub_44EF8(0x2Eu, 7))
    {
      int v19 = sub_44F3C(0x2Eu);
      __uint64_t v20 = sub_4F1D8();
      int v21 = (const char *)sub_44F70(7);
      unsigned int v22 = *a4;
      if (v19)
      {
        printf("%lld %d AVE %s: H264FrameRec: VPSLengthNoStartCode %d (%d)\n", v20, 46, v21, v18, v22);
        __uint64_t v23 = sub_4F1D8();
        char v24 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: VPSLengthNoStartCode %d (%d)", v23, 46, v24, v18, *a4);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: VPSLengthNoStartCode %d (%d)", v20, 46, v21, v18, v22);
      }
    }
    uint64_t v145 = v9;
    size_t v46 = a4[1] - 4;
    if (sub_44EF8(0x2Eu, 7))
    {
      int v47 = sub_44F3C(0x2Eu);
      __uint64_t v48 = sub_4F1D8();
      __uint64_t v49 = (const char *)sub_44F70(7);
      unsigned int v50 = a4[1];
      if (v47)
      {
        printf("%lld %d AVE %s: H264FrameRec: SPSLengthNoStartCode %d (%d)\n", v48, 46, v49, v46, v50);
        __uint64_t v51 = sub_4F1D8();
        __uint64_t v52 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: SPSLengthNoStartCode %d (%d)", v51, 46, v52, v46, a4[1]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: SPSLengthNoStartCode %d (%d)", v48, 46, v49, v46, v50);
      }
    }
    uint64_t v142 = v7;
    v144 = v8;
    uint64_t v140 = a1;
    long long v152 = 0u;
    long long v153 = 0u;
    long long v150 = 0u;
    long long v151 = 0u;
    size_t v137 = v46;
    size_t __n = v18;
    CFIndex v72 = v18 + v46 + 36;
    if ((int)v145[4043] >= 1)
    {
      uint64_t v73 = 0;
      int v74 = a4 + 2;
      do
      {
        uint64_t v75 = v74[v73] - 4;
        *((void *)&v150 + v73) = v75;
        if (sub_44EF8(0x2Eu, 7))
        {
          int v76 = sub_44F3C(0x2Eu);
          __uint64_t v77 = sub_4F1D8();
          __uint64_t v78 = (const char *)sub_44F70(7);
          unsigned int v79 = v74[v73];
          if (v76)
          {
            printf("%lld %d AVE %s: H264FrameRec: PPSLengthNoStartCode0[%d] %d (%d)\n", v77, 46, v78, v73, v75, v79);
            __uint64_t v77 = sub_4F1D8();
            __uint64_t v78 = (const char *)sub_44F70(7);
            unsigned int v79 = v74[v73];
          }
          syslog(3, "%lld %d AVE %s: H264FrameRec: PPSLengthNoStartCode0[%d] %d (%d)", v77, 46, v78, v73, v75, v79);
        }
        v72 += v75 + 2;
        ++v73;
      }
      while (v73 < (int)v145[4043]);
    }
    if (*v144)
    {
      if (malloc_type_malloc(0x11uLL, 0x11244186uLL)) {
        sub_180CC();
      }
      if (sub_44EF8(3u, 4))
      {
        int v80 = sub_44F3C(3u);
        __uint64_t v81 = sub_4F1D8();
        uint64_t v82 = (const char *)sub_44F70(4);
        if (v80)
        {
          printf("%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec allocate SEI Data Buffer.\n", v81, 3, v82, "CreatevideoFormatDesc", 976, "SEI_Data != __null");
          __uint64_t v83 = sub_4F1D8();
          long long v133 = (const char *)sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec allocate SEI Data Buffer.", v83, 3, v133, "CreatevideoFormatDesc", 976, "SEI_Data != __null");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec allocate SEI Data Buffer.", v81, 3, v82, "CreatevideoFormatDesc", 976, "SEI_Data != __null");
        }
      }
    }
    else
    {
      if (sub_44EF8(0x2Eu, 7))
      {
        int v86 = sub_44F3C(0x2Eu);
        __uint64_t v87 = sub_4F1D8();
        int v88 = (const char *)sub_44F70(7);
        if (v86)
        {
          printf("%lld %d AVE %s: H264FrameRec: hevccSize %d\n", v87, 46, v88, v72);
          __uint64_t v89 = sub_4F1D8();
          long long v134 = (const char *)sub_44F70(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: hevccSize %d", v89, 46, v134, v72);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: hevccSize %d", v87, 46, v88, v72);
        }
      }
      CFMutableDataRef Mutable = CFDataCreateMutable(kCFAllocatorDefault, v72);
      CFTypeRef cf = Mutable;
      if (Mutable)
      {
        __uint64_t v91 = Mutable;
        CFDataSetLength(Mutable, v72);
        MutableBytePtr = CFDataGetMutableBytePtr(v91);
        unsigned int v93 = malloc_type_malloc(0x22uLL, 0x99A3ADE8uLL);
        if (v93)
        {
          int v84 = v93;
          sub_1E2E8((uint64_t)v93, (uint64_t)a3, 0x22u, v93);
          uint64_t v94 = 0;
          UInt8 *MutableBytePtr = 1;
          MutableBytePtr[1] = v84[10];
          do
          {
            UInt8 v95 = v84[v94 + 11];
            MutableBytePtr[v94 + 2] = v95;
            *(unsigned char *)(v140 + 239320 + v94++) = v95;
          }
          while (v94 != 4);
          for (uint64_t i = 0; i != 6; ++i)
          {
            UInt8 v97 = v84[i + 15];
            MutableBytePtr[i + 6] = v97;
            *(unsigned char *)(v140 + 239324 + i) = v97;
          }
          MutableBytePtr[12] = v84[21];
          *(_WORD *)(MutableBytePtr + 13) = 240;
          MutableBytePtr[15] = -4;
          MutableBytePtr[16] = *(unsigned char *)(v140 + 158996) | 0xFC;
          MutableBytePtr[17] = *(unsigned char *)(v140 + 159040) | 0xF8;
          MutableBytePtr[18] = *(unsigned char *)(v140 + 159044) | 0xF8;
          *(_WORD *)(MutableBytePtr + 19) = 0;
          MutableBytePtr[21] = 11;
          if (*v144) {
            char v98 = 4;
          }
          else {
            char v98 = 3;
          }
          MutableBytePtr[22] = v98;
          MutableBytePtr[23] = -96;
          *((_WORD *)MutableBytePtr + 12) = 256;
          *((_WORD *)MutableBytePtr + 13) = bswap32(__n) >> 16;
          memcpy(MutableBytePtr + 28, a3 + 4, __n);
          uint64_t v99 = &MutableBytePtr[__n];
          v99[28] = -95;
          *(_WORD *)(v99 + 29) = 256;
          *(_WORD *)(v99 + 31) = bswap32(v137) >> 16;
          memcpy(&MutableBytePtr[__n + 33], &a3[*a4 + 4], v137);
          uint64_t v100 = *a4;
          v101 = &MutableBytePtr[__n + 33 + v137];
          UInt8 *v101 = -94;
          signed int v102 = v145[4043];
          *(_WORD *)(v101 + 1) = bswap32(v102) >> 16;
          uint64_t v103 = __n + 33 + v137 + 3;
          if (v102 >= 1)
          {
            uint64_t v104 = 0;
            __uint64_t v105 = &a3[v100 + 4];
            do
            {
              size_t v106 = *((void *)&v150 + v104);
              *(_WORD *)&MutableBytePtr[v103] = bswap32(v106) >> 16;
              uint64_t v107 = v103 + 2;
              uint64_t v108 = v104 + 1;
              v105 += a4[v104 + 1];
              memcpy(&MutableBytePtr[v103 + 2], v105, v106);
              uint64_t v103 = v106 + v107;
              uint64_t v104 = v108;
            }
            while (v108 < (int)v145[4043]);
          }
          if (*v144)
          {
            __uint64_t v109 = &MutableBytePtr[v103];
            UInt8 *v109 = -89;
            *(_WORD *)(v109 + 1) = 256;
            uint64_t v110 = v147 - 4;
            *(_WORD *)(v109 + 3) = bswap32(v110) >> 16;
            memcpy(v109 + 5, &dword_4, v110);
          }
          keys = @"hvcC";
          CFDictionaryRef v59 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&keys, &cf, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          int v60 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          CFDictionaryAddValue(v60, kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms, v59);
          CFDictionaryAddValue(v60, kCMFormatDescriptionExtension_FormatName, @"HEVC");
          uint64_t v111 = v140 + 158996;
          uint64_t v112 = *(int *)(v140 + 158996);
          if (v112 >= 4)
          {
            uint64_t v68 = 3758097084;
            if (sub_44EF8(3u, 4))
            {
              int v126 = sub_44F3C(3u);
              __uint64_t v127 = sub_4F1D8();
              __uint64_t v128 = (const char *)sub_44F70(4);
              if (v126)
              {
                printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreatevideoFormatDesc chroma_format_idc (%d) not supported.\n", v127, 3, v128, "CreatevideoFormatDesc", 1197, "false", *(_DWORD *)(v142 + 36));
                __uint64_t v127 = sub_4F1D8();
                sub_44F70(4);
              }
              syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreatevideoFormatDesc chroma_format_idc (%d) not supported.", v127);
            }
          }
          else
          {
            int v113 = *v145 + *(_DWORD *)(v140 + 159028) * dword_837D0[v112];
            int v114 = v145[1] + *(_DWORD *)(v140 + 159036) * dword_837E0[v112];
            if (sub_44EF8(0x2Eu, 7))
            {
              int v115 = sub_44F3C(0x2Eu);
              __uint64_t v116 = sub_4F1D8();
              int64_t v117 = (const char *)sub_44F70(7);
              if (v115)
              {
                printf("%lld %d AVE %s: H264FrameRec: for FIG coded: %d - %d, passed %d - %d, crop %d - %d\n", v116, 46, v117, *v145, v145[1], v113, v114, *(_DWORD *)(v140 + 159028), *(_DWORD *)(v140 + 159036));
                __uint64_t v118 = sub_4F1D8();
                sub_44F70(7);
                uint64_t v111 = v140 + 158996;
                syslog(3, "%lld %d AVE %s: H264FrameRec: for FIG coded: %d - %d, passed %d - %d, crop %d - %d", v118, 46);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: H264FrameRec: for FIG coded: %d - %d, passed %d - %d, crop %d - %d", v116, 46);
              }
            }
            if (*(_DWORD *)(v111 + 6668)) {
              CFDictionarySetValue(v60, kCMFormatDescriptionExtension_FullRangeVideo, kCFBooleanTrue);
            }
            if (v144[124]) {
              uint64_t VideoFormatDescription = VTTileEncoderSessionCreateVideoFormatDescription();
            }
            else {
              uint64_t VideoFormatDescription = VTEncoderSessionCreateVideoFormatDescription();
            }
            uint64_t v68 = VideoFormatDescription;
          }
          goto LABEL_100;
        }
        if (sub_44EF8(3u, 4))
        {
          int v122 = sub_44F3C(3u);
          __uint64_t v123 = sub_4F1D8();
          v124 = (const char *)sub_44F70(4);
          if (v122)
          {
            printf("%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec allocate PS EPB Data Buffer.\n", v123, 3, v124, "CreatevideoFormatDesc", 1003, "EPB_PSData != __null");
            sub_4F1D8();
            sub_44F70(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec allocate PS EPB Data Buffer.");
        }
      }
      else if (sub_44EF8(3u, 4))
      {
        int v119 = sub_44F3C(3u);
        __uint64_t v120 = sub_4F1D8();
        uint64_t v121 = (const char *)sub_44F70(4);
        if (v119)
        {
          printf("%lld %d AVE %s: %s:%d %s | failed to call CFDataCreateMutable %ld\n", v120, 3, v121, "CreatevideoFormatDesc", 993, "hevccData != __null", v72);
          __uint64_t v120 = sub_4F1D8();
          CFIndex v136 = v72;
          long long v135 = sub_44F70(4);
        }
        else
        {
          CFIndex v136 = v72;
          long long v135 = (void *)v121;
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to call CFDataCreateMutable %ld", v120, 3, v135, "CreatevideoFormatDesc", 993, "hevccData != __null", v136);
      }
    }
    uint64_t v68 = 4294954384;
    int v84 = 0;
    goto LABEL_113;
  }
  if (!v10)
  {
    size_t v11 = a4[1] - 4;
    if (sub_44EF8(0x2Eu, 7))
    {
      int v12 = sub_44F3C(0x2Eu);
      __uint64_t v13 = sub_4F1D8();
      int v14 = (const char *)sub_44F70(7);
      unsigned int v15 = a4[1];
      if (v12)
      {
        printf("%lld %d AVE %s: H264FrameRec: SPSLengthNoStartCode %d (%d)\n", v13, 46, v14, v11, v15);
        __uint64_t v16 = sub_4F1D8();
        __uint64_t v17 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: SPSLengthNoStartCode %d (%d)", v16, 46, v17, v11, a4[1]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: SPSLengthNoStartCode %d (%d)", v13, 46, v14, v11, v15);
      }
    }
    uint64_t v141 = v7;
    CFAllocatorRef allocator = (CFAllocatorRef)a4;
    __uint64_t v143 = v8;
    long long v152 = 0u;
    long long v153 = 0u;
    long long v150 = 0u;
    long long v151 = 0u;
    size_t v29 = v11 + 9;
    CFIndex v30 = v11 + 9;
    if ((int)v9[4043] >= 1)
    {
      uint64_t v31 = 0;
      int v32 = (char *)allocator + 8;
      CFIndex v30 = v11 + 9;
      do
      {
        uint64_t v33 = (*(_DWORD *)&v32[4 * v31] - 4);
        *((void *)&v150 + v31) = v33;
        if (sub_44EF8(0x2Eu, 7))
        {
          int v34 = v9;
          int v35 = sub_44F3C(0x2Eu);
          __uint64_t v36 = sub_4F1D8();
          __uint64_t v37 = (const char *)sub_44F70(7);
          int v38 = *(_DWORD *)&v32[4 * v31];
          if (v35)
          {
            printf("%lld %d AVE %s: H264FrameRec: PPSLengthNoStartCode0[%d] %d (%d)\n", v36, 46, v37, v31, v33, v38);
            __uint64_t v39 = sub_4F1D8();
            __uint64_t v40 = (const char *)sub_44F70(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: PPSLengthNoStartCode0[%d] %d (%d)", v39, 46, v40, v31, v33, *(_DWORD *)&v32[4 * v31]);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: PPSLengthNoStartCode0[%d] %d (%d)", v36, 46, v37, v31, v33, v38);
          }
          int v9 = v34;
        }
        v30 += v33 + 2;
        ++v31;
      }
      while (v31 < (int)v9[4043]);
    }
    if (*(_DWORD *)v141 == 100 || *(_DWORD *)v141 == 122) {
      v30 += 4;
    }
    size_t v41 = v11;
    if (sub_44EF8(0x2Eu, 7))
    {
      int v42 = sub_44F3C(0x2Eu);
      __uint64_t v43 = sub_4F1D8();
      __uint64_t v44 = (const char *)sub_44F70(7);
      if (v42)
      {
        printf("%lld %d AVE %s: H264FrameRec: avccSize %d\n", v43, 46, v44, v30);
        __uint64_t v45 = sub_4F1D8();
        __uint64_t v132 = (const char *)sub_44F70(7);
        size_t v41 = v11;
        syslog(3, "%lld %d AVE %s: H264FrameRec: avccSize %d", v45, 46, v132, v30);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: avccSize %d", v43, 46, v44, v30);
      }
    }
    values = CFDataCreateMutable(kCFAllocatorDefault, v30);
    CFDataSetLength((CFMutableDataRef)values, v30);
    int v53 = CFDataGetMutableBytePtr((CFMutableDataRef)values);
    *int v53 = 1;
    v53[1] = a3[5];
    v53[2] = a3[6];
    v53[3] = a3[7];
    *((_WORD *)v53 + 2) = -7681;
    *((_WORD *)v53 + 3) = bswap32(v41) >> 16;
    __uint64_t v54 = a3 + 4;
    memcpy(v53 + 8, a3 + 4, v41);
    v53[v41 + 8] = v9[4043];
    if ((int)v9[4043] >= 1)
    {
      uint64_t v55 = 0;
      do
      {
        size_t v56 = *((void *)&v150 + v55);
        *(_WORD *)&v53[v29] = bswap32(v56) >> 16;
        uint64_t v57 = v55 + 1;
        v54 += *((unsigned int *)allocator + v55 + 1);
        memcpy(&v53[v29 + 2], v54, v56);
        v29 += v56 + 2;
        uint64_t v55 = v57;
      }
      while (v57 < (int)v9[4043]);
    }
    if (*(_DWORD *)v141 == 100 || *(_DWORD *)v141 == 122)
    {
      int v58 = &v53[v29];
      *int v58 = *(unsigned char *)(v141 + 36) | 0xFC;
      v58[1] = *(unsigned char *)(v141 + 44) | 0xF8;
      v58[2] = *(unsigned char *)(v141 + 48) | 0xF8;
      v58[3] = 0;
    }
    keys = @"avcC";
    CFDictionaryRef v59 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&keys, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    int v60 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionaryAddValue(v60, kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms, v59);
    CFDictionaryAddValue(v60, kCMFormatDescriptionExtension_FormatName, @"H.264");
    uint64_t v61 = *(int *)(v141 + 36);
    if (v61 >= 4)
    {
      uint64_t v68 = 3758097084;
      if (sub_44EF8(3u, 4))
      {
        int v69 = sub_44F3C(3u);
        __uint64_t v70 = sub_4F1D8();
        int v71 = (const char *)sub_44F70(4);
        if (v69)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreatevideoFormatDesc chroma_format_idc (%d) not supported.\n", v70, 3, v71, "CreatevideoFormatDesc", 856, "false", *(_DWORD *)(v141 + 36));
          __uint64_t v70 = sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreatevideoFormatDesc chroma_format_idc (%d) not supported.", v70);
      }
    }
    else
    {
      int v62 = *v9 + *(_DWORD *)(v141 + 1184) * dword_837D0[v61];
      int v63 = v9[1] + *(_DWORD *)(v141 + 1192) * dword_837E0[v61];
      if (sub_44EF8(0x2Eu, 7))
      {
        int v64 = sub_44F3C(0x2Eu);
        __uint64_t v65 = sub_4F1D8();
        int v66 = (const char *)sub_44F70(7);
        if (v64)
        {
          printf("%lld %d AVE %s: H264FrameRec: for FIG coded: %d - %d, passed %d - %d, crop %d - %d\n", v65, 46, v66, *v9, v9[1], v62, v63, *(_DWORD *)(v141 + 1184), *(_DWORD *)(v141 + 1192));
          __uint64_t v67 = sub_4F1D8();
          sub_44F70(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: for FIG coded: %d - %d, passed %d - %d, crop %d - %d", v67, 46);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: for FIG coded: %d - %d, passed %d - %d, crop %d - %d", v65, 46);
        }
      }
      if (*(_DWORD *)(v141 + 1096)) {
        CFDictionarySetValue(v60, kCMFormatDescriptionExtension_FullRangeVideo, kCFBooleanTrue);
      }
      if (v143[124]) {
        uint64_t v125 = VTTileEncoderSessionCreateVideoFormatDescription();
      }
      else {
        uint64_t v125 = VTEncoderSessionCreateVideoFormatDescription();
      }
      uint64_t v68 = v125;
    }
    int v84 = 0;
LABEL_100:
    if (v60) {
      CFRelease(v60);
    }
    if (v59) {
      CFRelease(v59);
    }
    goto LABEL_113;
  }
  if (sub_44EF8(3u, 4))
  {
    int v25 = sub_44F3C(3u);
    __uint64_t v26 = sub_4F1D8();
    __uint64_t v27 = (const char *)sub_44F70(4);
    if (v25)
    {
      printf("%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec Type not recognized.\n", v26, 3, v27, "CreatevideoFormatDesc", 1248, "false");
      __uint64_t v28 = sub_4F1D8();
      long long v131 = (const char *)sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec Type not recognized.", v28, 3, v131, "CreatevideoFormatDesc", 1248, "false");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec Type not recognized.", v26, 3, v27, "CreatevideoFormatDesc", 1248, "false");
    }
  }
  int v84 = 0;
  uint64_t v68 = 4294954384;
LABEL_113:
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (values)
  {
    CFRelease(values);
    values = 0;
  }
  if (v84) {
    free(v84);
  }
  return v68;
}

uint64_t sub_1F950(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a1 + 67932;
  unsigned int v51 = 0;
  CFMutableDictionaryRef theDict = 0;
  if (*(unsigned char *)(a1 + 68221))
  {
    if (malloc_type_malloc(0x11uLL, 0xC8E11BDFuLL)) {
      sub_180CC();
    }
    if (sub_44EF8(0x2Eu, 4))
    {
      int v12 = sub_44F3C(0x2Eu);
      __uint64_t v13 = sub_4F1D8();
      int v14 = (const char *)sub_44F70(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed to allocate SEI memory %d\n", v13, 46, v14, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", 1311, "pSEIData != __null", 17);
        __uint64_t v13 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to allocate SEI memory %d", v13, 46);
    }
    goto LABEL_50;
  }
  if (*(_DWORD *)v8 >= 2u)
  {
    uint64_t MVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults = VTEncoderSessionCreateMVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults();
    if (sub_44EF8(0x2Eu, 4))
    {
      int v25 = sub_44F3C(0x2Eu);
      __uint64_t v26 = sub_4F1D8();
      __uint64_t v27 = (const char *)sub_44F70(4);
      if (v25)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed VTEncoderSessionCreateMVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults %d\n", v26, 46, v27, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", 1324, "pSEI3D != __null", MVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults);
        __uint64_t v26 = sub_4F1D8();
        uint64_t v46 = MVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults;
        size_t v41 = sub_44F70(4);
      }
      else
      {
        uint64_t v46 = MVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults;
        size_t v41 = (void *)v27;
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed VTEncoderSessionCreateMVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults %d", v26, 46, v41, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", 1324, "pSEI3D != __null", v46);
    }
    goto LABEL_50;
  }
  if (!*(_DWORD *)(a5 + 172))
  {
    sub_4D2C0(a3, a4, 1, 2, (int *)v49);
    if (sub_44EF8(0x2Eu, 4))
    {
      int v31 = sub_44F3C(0x2Eu);
      __uint64_t v32 = sub_4F1D8();
      uint64_t v33 = (const char *)sub_44F70(4);
      if (v31)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed to parse PS %p %d\n", v32, 46, v33, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", 1335, "pSEIData != __null", a3, a4);
        __uint64_t v34 = sub_4F1D8();
        int v42 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to parse PS %p %d", v34, 46, v42);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to parse PS %p %d", v32, 46, v33);
      }
    }
    goto LABEL_50;
  }
  long long v10 = *(_OWORD *)(a5 + 220);
  v49[2] = *(_OWORD *)(a5 + 204);
  v49[3] = v10;
  v49[4] = *(_OWORD *)(a5 + 236);
  int v50 = *(_DWORD *)(a5 + 252);
  long long v11 = *(_OWORD *)(a5 + 188);
  v49[0] = *(_OWORD *)(a5 + 172);
  v49[1] = v11;
  sub_4C09C(0, a3, (unsigned int *)v49, 0, v51, 0, 0, (const void *)(a1 + 158424), &theDict);
  if (!theDict)
  {
    if (sub_44EF8(0x2Eu, 4))
    {
      int v21 = sub_44F3C(0x2Eu);
      __uint64_t v22 = sub_4F1D8();
      __uint64_t v23 = (const char *)sub_44F70(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed to make hvcC dictionary %p %d\n", v22, 46, v23, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", 1347, "pCFDict != __null", a3, a4);
        __uint64_t v22 = sub_4F1D8();
        __uint64_t v45 = a3;
        uint64_t v47 = a4;
        uint64_t v44 = 1347;
        __uint64_t v40 = sub_44F70(4);
      }
      else
      {
        __uint64_t v45 = a3;
        uint64_t v47 = a4;
        uint64_t v44 = 1347;
        __uint64_t v40 = (void *)v23;
      }
      char v24 = "%lld %d AVE %s: %s::%s:%d %s | failed to make hvcC dictionary %p %d";
      goto LABEL_46;
    }
LABEL_50:
    uint64_t v15 = 4294966293;
    goto LABEL_51;
  }
  uint64_t v15 = sub_4CC34(1, a3, (unsigned int *)v49, (const void *)(a1 + 158424), theDict);
  if (!theDict)
  {
    if (sub_44EF8(0x2Eu, 4))
    {
      int v28 = sub_44F3C(0x2Eu);
      __uint64_t v22 = sub_4F1D8();
      size_t v29 = (const char *)sub_44F70(4);
      if (v28)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed to add lhvC dictionary %p %d\n", v22, 46, v29, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", 1353, "pCFDict != __null", a3, a4);
        __uint64_t v22 = sub_4F1D8();
        __uint64_t v45 = a3;
        uint64_t v47 = a4;
        uint64_t v44 = 1353;
        __uint64_t v40 = sub_44F70(4);
      }
      else
      {
        __uint64_t v45 = a3;
        uint64_t v47 = a4;
        uint64_t v44 = 1353;
        __uint64_t v40 = (void *)v29;
      }
      char v24 = "%lld %d AVE %s: %s::%s:%d %s | failed to add lhvC dictionary %p %d";
LABEL_46:
      syslog(3, v24, v22, 46, v40, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", v44, "pCFDict != __null", v45, v47);
      goto LABEL_50;
    }
    goto LABEL_50;
  }
  if (*(_DWORD *)(a1 + 165664)) {
    CFDictionarySetValue(theDict, kCMFormatDescriptionExtension_FullRangeVideo, kCFBooleanTrue);
  }
  int v16 = *(_DWORD *)(a1 + 51376);
  uint64_t v17 = *(int *)(a1 + 158996);
  if ((int)v17 > 3)
  {
    int v19 = 0;
  }
  else
  {
    size_t v18 = (int *)((char *)&unk_887C4 + 8 * v17);
    int v20 = *v18;
    int v19 = v18[1];
    v16 -= v20 * *(_DWORD *)(a1 + 159028);
  }
  int v30 = *(_DWORD *)(a1 + 51380) - *(_DWORD *)(a1 + 159036) * v19;
  if (*(unsigned char *)(v8 + 413))
  {
    if (!VTTileEncoderSessionCreateVideoFormatDescription()) {
      goto LABEL_51;
    }
  }
  else if (!VTEncoderSessionCreateVideoFormatDescription())
  {
    goto LABEL_51;
  }
  if (sub_44EF8(0x2Eu, 4))
  {
    int v35 = sub_44F3C(0x2Eu);
    __uint64_t v36 = sub_4F1D8();
    __uint64_t v37 = (const char *)sub_44F70(4);
    if (v35)
    {
      printf("%lld %d AVE %s: %s::%s:%d %s | failed to create format descriptor %d %d %p\n", v36, 46, v37, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", 1390, "res == noErr", v16, v30, theDict);
      __uint64_t v38 = sub_4F1D8();
      __uint64_t v43 = sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create format descriptor %d %d %p", v38, 46, v43);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create format descriptor %d %d %p", v36, 46, v37);
    }
  }
  uint64_t v15 = 4294966296;
LABEL_51:
  if (theDict)
  {
    CFRelease(theDict);
    CFMutableDictionaryRef theDict = 0;
  }
  return v15;
}

uint64_t sub_20204(uint64_t a1, uint64_t a2, int a3)
{
  if (a2)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 916);
    if (v4 >= 0x1F)
    {
      uint64_t v11 = 3758097084;
      if (sub_44EF8(3u, 4))
      {
        int v15 = sub_44F3C(3u);
        __uint64_t v16 = sub_4F1D8();
        uint64_t v17 = (const char *)sub_44F70(4);
        if (v15)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: DoneWithThisFrameFromTheHW Frame->PlaneNumber = %d\n", v16, 3, v17, "DoneWithThisFrameFromTheHW", 1424, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(_DWORD *)(a2 + 916));
          __uint64_t v16 = sub_4F1D8();
          uint64_t v17 = (const char *)sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: DoneWithThisFrameFromTheHW Frame->PlaneNumber = %d", v16, 3, v17, "DoneWithThisFrameFromTheHW", 1424, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(unsigned int *)(a2 + 916));
      }
    }
    else
    {
      uint64_t v6 = *(void *)(a1 + 8 * v4 + 27072);
      if (v6)
      {
        if (sub_44EF8(0x2Eu, 7))
        {
          int v8 = sub_44F3C(0x2Eu);
          __uint64_t v9 = sub_4F1D8();
          long long v10 = (const char *)sub_44F70(7);
          if (v8)
          {
            printf("%lld %d AVE %s: %s:%d H264FrameRec: DoneWithThis PlaneNumber %d size %d\n", v9, 46, v10, "DoneWithThisFrameFromTheHW", 1430, *(_DWORD *)(a2 + 916), *(_DWORD *)(v6 + 384));
            __uint64_t v9 = sub_4F1D8();
            sub_44F70(7);
          }
          syslog(3, "%lld %d AVE %s: %s:%d H264FrameRec: DoneWithThis PlaneNumber %d size %d", v9);
        }
        sub_6590(*(void **)(a1 + 71552), *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 160), (float *)(v6 + 182920));
        sub_68E4(*(void **)(a1 + 71552), *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 160), (double *)(a2 + 67288));
        __uint64_t v22 = (FILE *)sub_44B8(*(void *)(a1 + 71552), 7u, *(_DWORD *)(a2 + 12));
        sub_41450((const void *)(v6 + 181488), v22, *(_DWORD *)(a2 + 160));
        __uint64_t v23 = (const void *)sub_44B8(*(void *)(a1 + 71552), 6u, *(_DWORD *)(a2 + 12));
        sub_40B5C((const void *)(v6 + 143600), (const void *)(a2 + 27568), v23, *(_DWORD *)(a2 + 160), a3);
        sub_6248(*(void **)(a1 + 71552), *(_DWORD *)(a2 + 12), (int *)(v6 + 181640));
        bzero((void *)v6, 0x2CAB8uLL);
      }
      else if (sub_44EF8(3u, 4))
      {
        uint64_t v11 = sub_44F3C(3u);
        __uint64_t v18 = sub_4F1D8();
        int v19 = (const char *)sub_44F70(4);
        if (!v11)
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader == NULL");
          return v11;
        }
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader == NULL\n", v18, 3, v19, "DoneWithThisFrameFromTheHW", 1428, "codedHeader != __null");
        __uint64_t v20 = sub_4F1D8();
        int v21 = (const char *)sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader == NULL", v20, 3, v21, "DoneWithThisFrameFromTheHW", 1428, "codedHeader != __null");
      }
      return 0;
    }
  }
  else
  {
    uint64_t v11 = 3758097084;
    if (sub_44EF8(3u, 4))
    {
      int v12 = sub_44F3C(3u);
      __uint64_t v13 = sub_4F1D8();
      int v14 = (const char *)sub_44F70(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: DoneWithThisFrameFromTheHW Frame == NULL\n", v13, 3, v14, "DoneWithThisFrameFromTheHW", 1423, "Frame != __null");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: DoneWithThisFrameFromTheHW Frame == NULL");
    }
  }
  return v11;
}

uint64_t sub_20648(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v17 = 3758097084;
    if (sub_44EF8(3u, 4))
    {
      int v18 = sub_44F3C(3u);
      __uint64_t v19 = sub_4F1D8();
      __uint64_t v20 = (const char *)sub_44F70(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CollectSlicesSizes Frame == NULL ???\n", v19, 3, v20, "CollectSlicesSizes", 1456, "Frame != __null");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CollectSlicesSizes Frame == NULL ???");
    }
    return v17;
  }
  if (*(_DWORD *)(a2 + 916) > 0x1Eu)
  {
    uint64_t v17 = 3758097084;
    if (!sub_44EF8(3u, 4)) {
      return v17;
    }
    int v21 = sub_44F3C(3u);
    __uint64_t v22 = sub_4F1D8();
    __uint64_t v23 = (const char *)sub_44F70(4);
    if (v21)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CollectSlicesSizes Frame->PlaneNumber = %d\n", v22, 3, v23, "CollectSlicesSizes", 1457, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(_DWORD *)(a2 + 916));
      __uint64_t v22 = sub_4F1D8();
      __uint64_t v23 = (const char *)sub_44F70(4);
      int v122 = "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))";
      uint64_t v123 = *(unsigned int *)(a2 + 916);
      uint64_t v121 = 1457;
    }
    else
    {
      uint64_t v123 = *(unsigned int *)(a2 + 916);
      uint64_t v121 = 1457;
      int v122 = "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))";
    }
    int v119 = v23;
    char v24 = "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CollectSlicesSizes Frame->PlaneNumber = %d";
LABEL_79:
    syslog(3, v24, v22, 3, v119, "CollectSlicesSizes", v121, v122, v123);
    return v17;
  }
  uint64_t v4 = 0;
  mach_port_name_t v5 = (_DWORD *)(a1 + 239348);
  int v126 = (unsigned char *)(a1 + 67552);
  uint64_t v129 = a1 + 51072;
  uint64_t v6 = (_DWORD *)(a1 + 28032);
  do
  {
    uint64_t v7 = 0;
    int v8 = v6;
    do
    {
      uint64_t v9 = 3;
      long long v10 = v8;
      do
      {
        *long long v10 = 0;
        v10[2880] = 0;
        ++v10;
        --v9;
      }
      while (v9);
      ++v7;
      v8 += 3;
    }
    while (v7 != 32);
    ++v4;
    v6 += 96;
  }
  while (v4 != 30);
  *(_DWORD *)(a1 + 51080) = 0;
  *(void *)uint64_t v129 = 0;
  uint64_t v11 = a1 + 12 * *(unsigned int *)(a2 + 168) + 51084;
  *(_DWORD *)(v11 + 8) = 0;
  *(void *)uint64_t v11 = 0;
  if (sub_44EF8(0x2Eu, 7))
  {
    int v12 = sub_44F3C(0x2Eu);
    __uint64_t v13 = sub_4F1D8();
    int v14 = (const char *)sub_44F70(7);
    int v15 = *(_DWORD *)(a2 + 916);
    if (v12)
    {
      printf("%lld %d AVE %s: H264FrameRec: CollectSlicesSizes ONLY ONE TO LOOK AT PlaneNumber = %d\n", v13, 46, v14, v15);
      __uint64_t v16 = sub_4F1D8();
      __uint64_t v118 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: H264FrameRec: CollectSlicesSizes ONLY ONE TO LOOK AT PlaneNumber = %d", v16, 46, v118, *(_DWORD *)(a2 + 916));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264FrameRec: CollectSlicesSizes ONLY ONE TO LOOK AT PlaneNumber = %d", v13, 46, v14, v15);
    }
  }
  uint64_t v25 = *(void *)(a1 + 8 * *(int *)(a2 + 916) + 27072);
  if (!v25)
  {
    uint64_t v17 = 3758097084;
    if (!sub_44EF8(3u, 4)) {
      return v17;
    }
    int v37 = sub_44F3C(3u);
    __uint64_t v22 = sub_4F1D8();
    __uint64_t v38 = (const char *)sub_44F70(4);
    if (v37)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_CodedBuffPointerDataHeader[%d] == NULL\n", v22, 3, v38, "CollectSlicesSizes", 1481, "codedHeader != __null", *(_DWORD *)(a2 + 916));
      __uint64_t v22 = sub_4F1D8();
      __uint64_t v38 = (const char *)sub_44F70(4);
      int v122 = "codedHeader != __null";
      uint64_t v123 = *(unsigned int *)(a2 + 916);
      uint64_t v121 = 1481;
    }
    else
    {
      uint64_t v123 = *(unsigned int *)(a2 + 916);
      uint64_t v121 = 1481;
      int v122 = "codedHeader != __null";
    }
    int v119 = v38;
    char v24 = "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_CodedBuffPointerDataHeader[%d] == NULL";
    goto LABEL_79;
  }
  v124 = v5;
  uint64_t v26 = *(void *)(a1 + 8 * *(int *)(a2 + 916) + 27072);
  uint64_t v127 = v26;
  uint64_t v27 = v25 + 12 * *(unsigned int *)(a2 + 168);
  uint64_t v28 = *(void *)(v27 + 244);
  uint64_t v29 = a1 + 12 * *(unsigned int *)(a2 + 168) + 51084;
  *(_DWORD *)(v29 + 8) = *(_DWORD *)(v27 + 252);
  *(void *)uint64_t v29 = v28;
  if (sub_44EF8(0x2Eu, 7))
  {
    int v30 = sub_44F3C(0x2Eu);
    __uint64_t v31 = sub_4F1D8();
    __uint64_t v32 = (const char *)sub_44F70(7);
    unsigned int v33 = *(_DWORD *)(a2 + 168);
    int v34 = *(_DWORD *)(a1 + 12 * v33 + 51092);
    if (v30)
    {
      printf("%lld %d AVE %s: H264FrameRec: CollectSlicesSizes Filler[%d] %d %d\n", v31, 46, v32, v33, *(char *)(a1 + 12 * v33 + 51091), v34);
      __uint64_t v35 = sub_4F1D8();
      __uint64_t v36 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: H264FrameRec: CollectSlicesSizes Filler[%d] %d %d", v35, 46, v36, *(_DWORD *)(a2 + 168), *(char *)(a1 + 12 * *(unsigned int *)(a2 + 168) + 51091), *(_DWORD *)(a1 + 12 * *(unsigned int *)(a2 + 168) + 51092));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264FrameRec: CollectSlicesSizes Filler[%d] %d %d", v31, 46, v32, v33, *(char *)(a1 + 12 * v33 + 51091), v34);
    }
  }
  unsigned int v39 = 0;
  *(_DWORD *)(v129 + 8) = 3 * *(_DWORD *)(v26 + 240);
  uint64_t v40 = a1 + 28032;
  uint64_t v128 = a1 + 28036;
  uint64_t v41 = -3072;
  while (1)
  {
    if (sub_44EF8(0x2Eu, 7))
    {
      int v42 = sub_44F3C(0x2Eu);
      __uint64_t v43 = sub_4F1D8();
      uint64_t v44 = (const char *)sub_44F70(7);
      int v45 = *(unsigned __int8 *)(v26 + 908);
      if (v42)
      {
        printf("%lld %d AVE %s: H264FrameRec: codedHeader->SliceData[%d].ui32BytesWritten = %d ui32BytesToRemoveAtTheEndOfTheSliceForContextSwitch %d\n", v43, 46, v44, v39, *(_DWORD *)(v26 + 384), v45);
        __uint64_t v46 = sub_4F1D8();
        uint64_t v47 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader->SliceData[%d].ui32BytesWritten = %d ui32BytesToRemoveAtTheEndOfTheSliceForContextSwitch %d", v46, 46, v47, v39, *(_DWORD *)(v26 + 384), *(unsigned __int8 *)(v26 + 908));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader->SliceData[%d].ui32BytesWritten = %d ui32BytesToRemoveAtTheEndOfTheSliceForContextSwitch %d", v43, 46, v44, v39, *(_DWORD *)(v26 + 384), v45);
      }
    }
    if (!*(_DWORD *)(v26 + 384)) {
      break;
    }
    if (*(char *)(v26 + 908) < 0)
    {
      uint64_t v17 = 3758097084;
      if (sub_44EF8(3u, 4))
      {
        int v90 = sub_44F3C(3u);
        __uint64_t v91 = sub_4F1D8();
        __uint64_t v92 = (const char *)sub_44F70(4);
        if (v90)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader->SliceData[%d].ui32BytesToRemoveAtTheEndOfTheSliceForContextSwitch = %d\n", v91, 3, v92, "CollectSlicesSizes", 1499, "codedHeader->SliceData[i].ui32BytesToRemoveAtTheEndOfTheSliceForContextSwitch < 128", v39, *(unsigned __int8 *)(v26 + 908));
          __uint64_t v91 = sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader->SliceData[%d].ui32BytesToRemoveAtTheEndOfTheSliceForContextSwitch = %d", v91);
      }
      return v17;
    }
    if (*(_DWORD *)(v26 + 920) && *(void *)(v26 + 912))
    {
      if (sub_44EF8(0x2Eu, 7))
      {
        int v48 = sub_44F3C(0x2Eu);
        __uint64_t v49 = sub_4F1D8();
        int v50 = (const char *)sub_44F70(7);
        int v51 = *(_DWORD *)(v26 + 920);
        if (v48)
        {
          printf("%lld %d AVE %s: H264FrameRec: codedHeader->SliceData[%d].ui32SliceHeaderSize = %d\n", v49, 46, v50, v39, v51);
          __uint64_t v52 = sub_4F1D8();
          int v53 = (const char *)sub_44F70(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader->SliceData[%d].ui32SliceHeaderSize = %d", v52, 46, v53, v39, *(_DWORD *)(v26 + 920));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader->SliceData[%d].ui32SliceHeaderSize = %d", v49, 46, v50, v39, v51);
        }
      }
      *(_DWORD *)(a1 + 39552 + v41 + 384 * *(int *)(a2 + 916) + 3072) = *(_DWORD *)(v26 + 920);
      if (v41 != -3072) {
        *(_DWORD *)(a1 + 39556 + v41 + 384 * *(int *)(a2 + 916) + 3072) = *(_DWORD *)(a1
      }
                                                                                      + 384 * *(int *)(a2 + 916)
                                                                                      + 12 * (v39 - 1)
                                                                                      + 39552)
                                                                          + *(_DWORD *)(a1
                                                                                      + 384 * *(int *)(a2 + 916)
                                                                                      + 12 * (v39 - 1)
                                                                                      + 39556);
    }
    int v54 = *(unsigned __int8 *)(v26 + 908);
    *(_DWORD *)(v40 + v41 + 384 * *(int *)(a2 + 916) + 3072) = *(_DWORD *)(v26 + 384) - v54;
    *(_DWORD *)(a1 + 28040 + v41 + 384 * *(int *)(a2 + 916) + 3072) = v54;
    uint64_t v55 = *(int *)(a2 + 916);
    *(void *)uint64_t v129 = v40 + v41 + 384 * (int)v55 + 3072;
    if (v41 != -3072)
    {
      if (*v126)
      {
        if (sub_44EF8(0x2Eu, 7))
        {
          int v56 = sub_44F3C(0x2Eu);
          __uint64_t v57 = sub_4F1D8();
          int v58 = (const char *)sub_44F70(7);
          uint64_t v59 = v39 - 1;
          int v60 = *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28032);
          int v61 = *(_DWORD *)(v128 + v41 + 384 * *(int *)(a2 + 916) + 3072);
          int v62 = *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28040);
          uint64_t v63 = v127 + 544 * v59;
          int v64 = *(unsigned __int8 *)(v63 + 908);
          if (v56)
          {
            __uint64_t v65 = (_DWORD *)(v63 + 384);
            int v66 = (unsigned __int8 *)(v63 + 908);
            printf("%lld %d AVE %s: H264FrameRec: Slice %d. Updating values Size %d Offset %d Bytes to Remove %d -- ui32BytesWritten %d ui32BytesToRemove %d\n", v57, 46, v58, v39, v60, v61, v62, *(_DWORD *)(v63 + 384), v64);
            __uint64_t v67 = sub_4F1D8();
            uint64_t v68 = (const char *)sub_44F70(7);
            uint64_t v40 = a1 + 28032;
            syslog(3, "%lld %d AVE %s: H264FrameRec: Slice %d. Updating values Size %d Offset %d Bytes to Remove %d -- ui32BytesWritten %d ui32BytesToRemove %d", v67, 46, v68, v39, *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28032), *(_DWORD *)(v128 + v41 + 384 * *(int *)(a2 + 916) + 3072), *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28040), *v65, *v66);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: Slice %d. Updating values Size %d Offset %d Bytes to Remove %d -- ui32BytesWritten %d ui32BytesToRemove %d", v57, 46, v58, v39, v60, v61, v62, *(_DWORD *)(v63 + 384), v64);
          }
          uint64_t v69 = a1 + 28036;
          uint64_t v70 = v127;
        }
        else
        {
          uint64_t v59 = v39 - 1;
          uint64_t v70 = v127;
          uint64_t v69 = a1 + 28036;
        }
        uint64_t v71 = v70 + 544 * v59;
        int v72 = *(_DWORD *)(v71 + 384);
        LODWORD(v71) = *(unsigned __int8 *)(v71 + 908);
        *(_DWORD *)(a1 + 28032 + 384 * *(int *)(a2 + 916) + 12 * v59) = v72 - v71;
        *(_DWORD *)(a1 + 28032 + 384 * *(int *)(a2 + 916) + 12 * v59 + 8) = v71;
        uint64_t v55 = *(int *)(a2 + 916);
      }
      else
      {
        LODWORD(v59) = v39 - 1;
        uint64_t v69 = a1 + 28036;
      }
      uint64_t v73 = 3 * v55;
      int v74 = (_DWORD *)(a1 + (v73 << 7) + 12 * v59 + 28032);
      *(_DWORD *)(v69 + v41 + (v73 << 7) + 3072) = *v74 + v74[1] + v74[2];
      if (sub_44EF8(0x2Eu, 7))
      {
        int v75 = sub_44F3C(0x2Eu);
        __uint64_t v76 = sub_4F1D8();
        __uint64_t v77 = (const char *)sub_44F70(7);
        int v78 = *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28032);
        int v79 = *(_DWORD *)(v128 + v41 + 384 * *(int *)(a2 + 916) + 3072);
        int v80 = *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28040);
        uint64_t v81 = v127 + 544 * v59;
        int v82 = *(unsigned __int8 *)(v81 + 908);
        if (v75)
        {
          uint64_t v125 = (_DWORD *)(v81 + 384);
          __uint64_t v83 = (unsigned __int8 *)(v81 + 908);
          printf("%lld %d AVE %s: H264FrameRec: Slice %d. UpdatED values Size %d Offset %d Bytes to Remove %d -- ui32BytesWritten %d ui32BytesToRemove %d\n", v76, 46, v77, v39, v78, v79, v80, *(_DWORD *)(v81 + 384), v82);
          __uint64_t v84 = sub_4F1D8();
          uint64_t v85 = (const char *)sub_44F70(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: Slice %d. UpdatED values Size %d Offset %d Bytes to Remove %d -- ui32BytesWritten %d ui32BytesToRemove %d", v84, 46, v85, v39, *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28032), *(_DWORD *)(v128 + v41 + 384 * *(int *)(a2 + 916) + 3072), *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28040), *v125, *v83);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: Slice %d. UpdatED values Size %d Offset %d Bytes to Remove %d -- ui32BytesWritten %d ui32BytesToRemove %d", v76, 46, v77, v39, v78, v79, v80, *(_DWORD *)(v81 + 384), v82);
        }
        uint64_t v40 = a1 + 28032;
      }
    }
    v26 += 544;
    ++v39;
    v41 += 12;
    if (!v41)
    {
      unsigned int v39 = 256;
      if (*v124 != 2)
      {
LABEL_74:
        uint64_t v17 = 3758097084;
        if (sub_44EF8(3u, 4))
        {
          int v93 = sub_44F3C(3u);
          __uint64_t v94 = sub_4F1D8();
          UInt8 v95 = (const char *)sub_44F70(4);
          if (v93)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: TotalSlices = %d\n", v94, 3, v95, "CollectSlicesSizes", 1552, "TotalSlices <= ((32) < (256) ? (32) : (256))", v39);
            __uint64_t v94 = sub_4F1D8();
            sub_44F70(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: TotalSlices = %d", v94);
        }
        return v17;
      }
LABEL_67:
      if (sub_44EF8(0x2Eu, 7))
      {
        int v86 = sub_44F3C(0x2Eu);
        __uint64_t v87 = sub_4F1D8();
        int v88 = (const char *)sub_44F70(7);
        if (v86)
        {
          printf("%lld %d AVE %s: H264FrameRec: CollectSlicesSizes TotalSlices = %d\n", v87, 46, v88, v39);
          __uint64_t v89 = sub_4F1D8();
          __uint64_t v120 = (const char *)sub_44F70(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: CollectSlicesSizes TotalSlices = %d", v89, 46, v120, v39);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: CollectSlicesSizes TotalSlices = %d", v87, 46, v88, v39);
        }
      }
      uint64_t v96 = 0;
      UInt8 v97 = (int *)(a1 + 28032);
      do
      {
        uint64_t v98 = 0;
        uint64_t v99 = v97;
        do
        {
          if (!*v99) {
            break;
          }
          if (v99[2880] && sub_44EF8(0x2Eu, 7))
          {
            int v100 = sub_44F3C(0x2Eu);
            __uint64_t v101 = sub_4F1D8();
            signed int v102 = (const char *)sub_44F70(7);
            int v103 = v99[2880];
            int v104 = v99[2882];
            if (v100)
            {
              printf("%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSliceHeadersSizes \t= [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d\n", v101, 46, v102, v96, v98, v96, v98, v103, v99[2881], v104);
              __uint64_t v105 = sub_4F1D8();
              size_t v106 = (const char *)sub_44F70(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSliceHeadersSizes \t= [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v105, 46, v106, v96, v98, v96, v98, v99[2880], v99[2881], v99[2882]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSliceHeadersSizes \t= [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v101, 46, v102, v96, v98, v96, v98, v103, v99[2881], v104);
            }
          }
          if (sub_44EF8(0x2Eu, 7))
          {
            int v107 = sub_44F3C(0x2Eu);
            __uint64_t v108 = sub_4F1D8();
            __uint64_t v109 = (const char *)sub_44F70(7);
            int v110 = *v99;
            int v111 = v99[2];
            if (v107)
            {
              printf("%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes \t\t= [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d\n", v108, 46, v109, v96, v98, v96, v98, v110, v99[1], v111);
              __uint64_t v112 = sub_4F1D8();
              int v113 = (const char *)sub_44F70(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes \t\t= [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v112, 46, v113, v96, v98, v96, v98, *v99, v99[1], v99[2]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes \t\t= [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v108, 46, v109, v96, v98, v96, v98, v110, v99[1], v111);
            }
          }
          ++v98;
          v99 += 3;
        }
        while (v98 != 32);
        ++v96;
        v97 += 96;
      }
      while (v96 != 30);
      return 0;
    }
  }
  if (*v124 == 2) {
    goto LABEL_67;
  }
  if (v39 >= 0x21) {
    goto LABEL_74;
  }
  if (*(void *)v129) {
    goto LABEL_67;
  }
  uint64_t v17 = 3758097084;
  if (sub_44EF8(3u, 4))
  {
    int v115 = sub_44F3C(3u);
    __uint64_t v116 = sub_4F1D8();
    int64_t v117 = (const char *)sub_44F70(4);
    if (v115)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_pLastOutputSlicesSizes = NULL\n", v116, 3, v117, "CollectSlicesSizes", 1553, "m_pLastOutputSlicesSizes != __null");
      sub_4F1D8();
      sub_44F70(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_pLastOutputSlicesSizes = NULL");
  }
  return v17;
}

void sub_21594(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, int a5, const void *a6, const void *a7, uint64_t a8, const void *a9)
{
  if (sub_44EF8(0x2Eu, 4))
  {
    int v17 = sub_44F3C(0x2Eu);
    __uint64_t v29 = sub_4F1D8();
    int v18 = (const char *)sub_44F70(4);
    if (v17)
    {
      printf("%lld %d AVE %s: AVE %s:%d %d %d Src %p >= %p + %d | Dst %p >= %p + %zu\n", v29, 46, v18, "PrintBufferInfo", 1694, a2, a3, a6, a4, a5, a9, a7, a8);
      __uint64_t v19 = sub_4F1D8();
      __uint64_t v20 = sub_44F70(4);
      syslog(3, "%lld %d AVE %s: AVE %s:%d %d %d Src %p >= %p + %d | Dst %p >= %p + %zu", v19, 46, v20, "PrintBufferInfo", 1694, a2, a3);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AVE %s:%d %d %d Src %p >= %p + %d | Dst %p >= %p + %zu", v29, 46, v18, "PrintBufferInfo", 1694, a2, a3);
    }
  }
  uint64_t v21 = 0;
  __uint64_t v22 = (int *)(a1 + 384 * a2 + 28032);
  do
  {
    if (!*v22) {
      break;
    }
    if (sub_44EF8(0x2Eu, 4))
    {
      int v23 = sub_44F3C(0x2Eu);
      __uint64_t v24 = sub_4F1D8();
      uint64_t v25 = (const char *)sub_44F70(4);
      int v26 = *v22;
      int v27 = v22[1];
      int v28 = v22[2880];
      if (v23)
      {
        printf("%lld %d AVE %s: AVE %s:%d %d %d %d %d\n", v24, 46, v25, "PrintBufferInfo", 1703, v21, v26, v22[1], v28);
        __uint64_t v24 = sub_4F1D8();
        uint64_t v25 = (const char *)sub_44F70(4);
        int v26 = *v22;
        int v27 = v22[1];
        int v28 = v22[2880];
      }
      syslog(3, "%lld %d AVE %s: AVE %s:%d %d %d %d %d", v24, 46, v25, "PrintBufferInfo", 1703, v21, v26, v27, v28);
    }
    ++v21;
    v22 += 3;
  }
  while (v21 != 32);
}

uint64_t sub_217C0(uint64_t a1, uint64_t a2, char *a3, int a4, char a5, int a6, CFDataRef theData)
{
  if (!a2)
  {
    uint64_t v13 = 3758097084;
    if (sub_44EF8(3u, 4))
    {
      int v20 = sub_44F3C(3u);
      __uint64_t v21 = sub_4F1D8();
      __uint64_t v22 = (const char *)sub_44F70(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame == NULL\n", v21, 3, v22, "AddAllSEIs", 1717, "Frame != __null");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame == NULL");
    }
    return v13;
  }
  uint64_t v7 = a3;
  if (!a3)
  {
    uint64_t v13 = 3758097084;
    if (sub_44EF8(3u, 4))
    {
      int v23 = sub_44F3C(3u);
      __uint64_t v24 = sub_4F1D8();
      uint64_t v25 = (const char *)sub_44F70(4);
      if (v23)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer StreamBufferCopy == NULL\n", v24, 3, v25, "AddAllSEIs", 1718, "StreamBufferCopy != __null");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer StreamBufferCopy == NULL");
    }
    return v13;
  }
  if (*(_DWORD *)(a2 + 916) >= 0x1Fu)
  {
    uint64_t v13 = 3758097084;
    if (sub_44EF8(3u, 4))
    {
      int v26 = sub_44F3C(3u);
      __uint64_t v27 = sub_4F1D8();
      int v28 = (const char *)sub_44F70(4);
      if (v26)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame->PlaneNumber = %d\n", v27, 3, v28, "AddAllSEIs", 1719, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(_DWORD *)(a2 + 916));
        __uint64_t v27 = sub_4F1D8();
        int v28 = (const char *)sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame->PlaneNumber = %d", v27, 3, v28, "AddAllSEIs", 1719, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(unsigned int *)(a2 + 916));
    }
    return v13;
  }
  uint64_t v12 = a1 + 239360;
  *(void *)(a1 + 239360) = 0;
  if (a6)
  {
    uint64_t v13 = 0;
    if (a5) {
      return v13;
    }
  }
  uint64_t v14 = a1 + 68136;
  if (*(unsigned char *)(a1 + 68136) && !*(_DWORD *)(a2 + 160))
  {
    if (sub_44EF8(0x2Eu, 7))
    {
      int v30 = sub_44F3C(0x2Eu);
      __uint64_t v31 = sub_4F1D8();
      __uint64_t v32 = (const char *)sub_44F70(7);
      int v33 = *(_DWORD *)(v12 + 5912);
      if (v30)
      {
        printf("%lld %d AVE %s: H264FrameRec: CopyEncodedFrameIntoExternalBuffer bUseElementaryStreamOutput %p %d\n\n", v31, 46, v32, *(const void **)(v12 + 5904), v33);
        __uint64_t v34 = sub_4F1D8();
        __uint64_t v35 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: CopyEncodedFrameIntoExternalBuffer bUseElementaryStreamOutput %p %d\n", v34, 46, v35, *(const void **)(v12 + 5904), *(void *)(v12 + 5912));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: CopyEncodedFrameIntoExternalBuffer bUseElementaryStreamOutput %p %d\n", v31, 46, v32, *(const void **)(v12 + 5904), v33);
      }
    }
    uint64_t v44 = *(const void **)(v12 + 5904);
    if (!v44)
    {
      uint64_t v13 = 3758097084;
      if (sub_44EF8(3u, 4))
      {
        int v46 = sub_44F3C(3u);
        __uint64_t v47 = sub_4F1D8();
        int v48 = (const char *)sub_44F70(4);
        if (v46)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_SPSPPSFinalOutputbUseElementaryStreamOutput = NULL\n", v47, 3, v48, "AddAllSEIs", 1733, "m_SPSPPSFinalOutputbUseElementaryStreamOutput != __null");
          sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_SPSPPSFinalOutputbUseElementaryStreamOutput = NULL");
      }
      return v13;
    }
    size_t v45 = *(void *)(v12 + 5912);
    if (!v45)
    {
      uint64_t v13 = 3758097084;
      if (sub_44EF8(3u, 4))
      {
        int v49 = sub_44F3C(3u);
        __uint64_t v50 = sub_4F1D8();
        int v51 = (const char *)sub_44F70(4);
        if (v49)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_SPSPPSFinalOutputSizebUseElementaryStreamOutput = 0\n", v50, 3, v51, "AddAllSEIs", 1734, "m_SPSPPSFinalOutputSizebUseElementaryStreamOutput != 0");
          sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_SPSPPSFinalOutputSizebUseElementaryStreamOutput = 0");
      }
      return v13;
    }
    memcpy(v7, v44, v45);
    v7 += *(void *)(v12 + 5912);
    sub_22D44(a1, *(void **)(v12 + 5904));
    *(void *)(v12 + 5904) = 0;
  }
  if (*(void *)(a2 + 336))
  {
    int v86 = a4;
    if (!theData)
    {
      uint64_t v13 = 3758097084;
      if (sub_44EF8(3u, 4))
      {
        int v36 = sub_44F3C(3u);
        __uint64_t v37 = sub_4F1D8();
        __uint64_t v38 = (const char *)sub_44F70(4);
        if (v36)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer serialMetadata == NULL\n", v37, 3, v38, "AddAllSEIs", 1750, "serialMetadata != __null");
          sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer serialMetadata == NULL");
      }
      return v13;
    }
    BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
    unsigned int Length = CFDataGetLength(theData);
    if (sub_44EF8(0x2Eu, 7))
    {
      int v17 = sub_44F3C(0x2Eu);
      __uint64_t v18 = sub_4F1D8();
      __uint64_t v19 = (const char *)sub_44F70(7);
      if (v17)
      {
        printf("%lld %d AVE %s: H264FrameRec: CFDebugMetadataSEI is ON buff %p size %d\n", v18, 46, v19, BytePtr, Length);
        __uint64_t v18 = sub_4F1D8();
        __uint64_t v19 = (const char *)sub_44F70(7);
      }
      syslog(3, "%lld %d AVE %s: H264FrameRec: CFDebugMetadataSEI is ON buff %p size %d", v18, 46, v19, BytePtr, Length);
    }
    int v39 = sub_12E9C(v7, a1 + 68136, (char *)BytePtr, Length, a2, *(unsigned __int8 *)(a2 + 344), &v86);
    if (v39) {
      return sub_4F268(v39);
    }
    if (!v86)
    {
      uint64_t v13 = 3758097084;
      if (sub_44EF8(3u, 4))
      {
        int v52 = sub_44F3C(3u);
        __uint64_t v53 = sub_4F1D8();
        int v54 = (const char *)sub_44F70(4);
        if (v52)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: AddSEIDebugMetadata failed.\n", v53, 3, v54, "AddAllSEIs", 1765, "SEISize != 0");
          sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: AddSEIDebugMetadata failed.");
      }
      return v13;
    }
    if (sub_44EF8(0x2Eu, 7))
    {
      int v40 = sub_44F3C(0x2Eu);
      __uint64_t v41 = sub_4F1D8();
      int v42 = (const char *)sub_44F70(7);
      if (v40)
      {
        printf("%lld %d AVE %s: H264FrameRec: AddSEIDebugMetadata added %d bytes\n", v41, 46, v42, v86);
        __uint64_t v43 = sub_4F1D8();
        __uint64_t v83 = (const char *)sub_44F70(7);
        uint64_t v14 = a1 + 68136;
        syslog(3, "%lld %d AVE %s: H264FrameRec: AddSEIDebugMetadata added %d bytes", v43, 46, v83, v86);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: AddSEIDebugMetadata added %d bytes", v41, 46, v42, v86);
      }
    }
    uint64_t v55 = v86;
    uint64_t v56 = *(int *)(v12 + 4);
    *(_DWORD *)v12 += v86;
    *(_DWORD *)(a1 + 4 * v56 + 239368) = v55;
    int v57 = *(_DWORD *)(v12 + 4);
    *(_DWORD *)(v12 + 4) = v57 + 1;
    if (v57 >= 15)
    {
      uint64_t v13 = 3758097084;
      if (sub_44EF8(3u, 4))
      {
        int v62 = sub_44F3C(3u);
        __uint64_t v63 = sub_4F1D8();
        int v64 = (const char *)sub_44F70(4);
        if (!v62) {
          goto LABEL_127;
        }
        int v65 = 1772;
        goto LABEL_124;
      }
      return v13;
    }
    v7 += v55;
    CFRelease(theData);
  }
  int v58 = *(_DWORD *)(v14 + 120);
  if (!v58) {
    goto LABEL_80;
  }
  if (v58 == 1)
  {
    if (*(unsigned char *)(v14 + 292))
    {
      int v86 = 0;
      sub_19760();
    }
    if (*(unsigned char *)(v14 + 293))
    {
      int v86 = 0;
      if (!*(_DWORD *)(a2 + 160)) {
        sub_171A8();
      }
    }
    if (*(unsigned char *)(v14 + 85))
    {
      int v86 = 0;
      uint64_t v66 = *(unsigned char *)(v14 + 209) ? *(void *)(a1 + 51352) : *(void *)(a1 + 51344);
      if (v66 == 1 && !*(_DWORD *)(a2 + 160)) {
        sub_180CC();
      }
    }
LABEL_80:
    if (*(unsigned char *)(v14 + 54))
    {
      int v86 = 0;
      int v39 = sub_140A0(v7, v14, a2, 1, &v86);
      if (v39) {
        return sub_4F268(v39);
      }
      if (sub_44EF8(0x2Eu, 7))
      {
        int v67 = sub_44F3C(0x2Eu);
        __uint64_t v68 = sub_4F1D8();
        uint64_t v69 = (const char *)sub_44F70(7);
        if (v67)
        {
          printf("%lld %d AVE %s: H264FrameRec: Add Registered SEI added %d bytes\n", v68, 46, v69, v86);
          __uint64_t v70 = sub_4F1D8();
          __uint64_t v84 = (const char *)sub_44F70(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: Add Registered SEI added %d bytes", v70, 46, v84, v86);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: Add Registered SEI added %d bytes", v68, 46, v69, v86);
        }
      }
      uint64_t v71 = v86;
      uint64_t v72 = *(int *)(v12 + 4);
      *(_DWORD *)v12 += v86;
      *(_DWORD *)(a1 + 4 * v72 + 239368) = v71;
      int v73 = *(_DWORD *)(v12 + 4);
      *(_DWORD *)(v12 + 4) = v73 + 1;
      if (v73 >= 15)
      {
        uint64_t v13 = 3758097084;
        if (!sub_44EF8(3u, 4)) {
          return v13;
        }
        int v78 = sub_44F3C(3u);
        __uint64_t v63 = sub_4F1D8();
        int v64 = (const char *)sub_44F70(4);
        if (v78)
        {
          int v65 = 1967;
LABEL_124:
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: Exceed the max supported SEI, failed.\n", v63, 3, v64, "AddAllSEIs", v65, "m_SEI_num < 16");
          sub_4F1D8();
          sub_44F70(4);
        }
LABEL_127:
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: Exceed the max supported SEI, failed.");
        return v13;
      }
      v7 += v71;
      *(_DWORD *)(a2 + 2436) = 0;
    }
    if ((!*(unsigned char *)(v14 + 45)
       || *(double *)(a2 + 2384) == 0.0
       || *(_DWORD *)(a2 + 23468) != 3 && *(_DWORD *)(a2 + 23768) != 21)
      && (!*(unsigned char *)(v14 + 49) || *(double *)(a2 + 2368) == 0.0)
      && (!*(unsigned char *)(v14 + 46) || *(_DWORD *)(a2 + 160))
      && (!*(unsigned char *)(v14 + 47) || *(_DWORD *)(a2 + 160))
      && (!*(unsigned char *)(v14 + 48) || *(_DWORD *)(a2 + 160))
      && (!*(unsigned char *)(v14 + 50) || !*(unsigned char *)(v14 + 55) || *(_DWORD *)(a2 + 160))
      && (!*(unsigned char *)(v14 + 51) || !*(unsigned char *)(v14 + 56) || *(_DWORD *)(a2 + 160))
      && (!*(unsigned char *)(v14 + 52) || !*(unsigned char *)(v14 + 85) || *(_DWORD *)(a2 + 160))
      && !*(unsigned char *)(v14 + 53))
    {
      return 0;
    }
    int v86 = 0;
    int v39 = sub_14C40(v7, v14, a1 + 69864, a2, 1, &v86);
    if (v39) {
      return sub_4F268(v39);
    }
    if (sub_44EF8(0x2Eu, 7))
    {
      int v74 = sub_44F3C(0x2Eu);
      __uint64_t v75 = sub_4F1D8();
      __uint64_t v76 = (const char *)sub_44F70(7);
      if (v74)
      {
        printf("%lld %d AVE %s: H264FrameRec: Add UnRegistered SEI added %d bytes\n", v75, 46, v76, v86);
        __uint64_t v77 = sub_4F1D8();
        uint64_t v85 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: Add UnRegistered SEI added %d bytes", v77, 46, v85, v86);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: Add UnRegistered SEI added %d bytes", v75, 46, v76, v86);
      }
    }
    int v79 = v86;
    uint64_t v80 = *(int *)(v12 + 4);
    *(_DWORD *)v12 += v86;
    *(_DWORD *)(a1 + 4 * v80 + 239368) = v79;
    int v81 = *(_DWORD *)(v12 + 4);
    *(_DWORD *)(v12 + 4) = v81 + 1;
    if (v81 < 15) {
      return 0;
    }
    uint64_t v13 = 3758097084;
    if (!sub_44EF8(3u, 4)) {
      return v13;
    }
    int v82 = sub_44F3C(3u);
    __uint64_t v63 = sub_4F1D8();
    int v64 = (const char *)sub_44F70(4);
    if (v82)
    {
      int v65 = 1997;
      goto LABEL_124;
    }
    goto LABEL_127;
  }
  uint64_t v13 = 3758097084;
  if (sub_44EF8(3u, 4))
  {
    int v59 = sub_44F3C(3u);
    __uint64_t v60 = sub_4F1D8();
    int v61 = (const char *)sub_44F70(4);
    if (v59)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR - codecID not recognized. FAIL\n", v60, 3, v61, "AddAllSEIs", 1946, "false");
      sub_4F1D8();
      sub_44F70(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR - codecID not recognized. FAIL");
  }
  return v13;
}

void sub_22D44(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v3 = (_DWORD *)(a1 + 239348);
    uint64_t v4 = (unsigned char *)(a1 + 68345);
    uint64_t v5 = a1 + 51304;
    if (sub_44EF8(0x2Eu, 7))
    {
      int v6 = sub_44F3C(0x2Eu);
      __uint64_t v7 = sub_4F1D8();
      int v8 = (const char *)sub_44F70(7);
      if (v6)
      {
        printf("%lld %d AVE %s: H264FrameRec: DeleteBuffer %p\n", v7, 46, v8, a2);
        __uint64_t v9 = sub_4F1D8();
        int v15 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: DeleteBuffer %p", v9, 46, v15, a2);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: DeleteBuffer %p", v7, 46, v8, a2);
      }
    }
    if (*v4)
    {
      if (*(void *)(v5 + 48) != 1 && *v3 != 2)
      {
        CFAllocatorRef v14 = *(const __CFAllocator **)v5;
        CFAllocatorDeallocate(v14, a2);
        return;
      }
    }
    else if (*(void *)(v5 + 40) != 1 && *v3 != 2)
    {
      return;
    }
    if (*v3 == 2)
    {
      if (!CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)a2, 0))
      {
        CVPixelBufferRelease((CVPixelBufferRef)a2);
      }
    }
    else
    {
      free(a2);
    }
  }
  else if (sub_44EF8(0x2Eu, 4))
  {
    int v10 = sub_44F3C(0x2Eu);
    __uint64_t v11 = sub_4F1D8();
    uint64_t v12 = (const char *)sub_44F70(4);
    if (v10)
    {
      printf("%lld %d AVE %s: H264FrameRec ERROR: Trying to free a buffer that is NULL.\n", v11, 46, v12);
      __uint64_t v13 = sub_4F1D8();
      __uint64_t v16 = (const char *)sub_44F70(4);
      syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: Trying to free a buffer that is NULL.", v13, 46, v16);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: Trying to free a buffer that is NULL.", v11, 46, v12);
    }
  }
}

uint64_t sub_22F74(int *a1, uint64_t a2, char *a3, const void *a4, uint64_t a5, int a6, uint64_t a7)
{
  if (!a2)
  {
    uint64_t v16 = 3758097084;
    if (sub_44EF8(3u, 4))
    {
      int v17 = sub_44F3C(3u);
      __uint64_t v18 = sub_4F1D8();
      __uint64_t v19 = (const char *)sub_44F70(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame == NULL\n", v18, 3, v19, "CopyEncodedFrameIntoExternalBuffer", 2016, "Frame != __null");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame == NULL");
    }
    return v16;
  }
  if (!a3)
  {
    uint64_t v16 = 3758097084;
    if (sub_44EF8(3u, 4))
    {
      int v20 = sub_44F3C(3u);
      __uint64_t v21 = sub_4F1D8();
      __uint64_t v22 = (const char *)sub_44F70(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer StreamBufferCopy == NULL\n", v21, 3, v22, "CopyEncodedFrameIntoExternalBuffer", 2017, "StreamBufferCopy != __null");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer StreamBufferCopy == NULL");
    }
    return v16;
  }
  signed int v8 = *(_DWORD *)(a2 + 916);
  if (v8 >= 0x1F)
  {
    uint64_t v16 = 3758097084;
    if (sub_44EF8(3u, 4))
    {
      int v23 = sub_44F3C(3u);
      __uint64_t v24 = sub_4F1D8();
      uint64_t v25 = (const char *)sub_44F70(4);
      if (v23)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame->PlaneNumber = %d\n", v24, 3, v25, "CopyEncodedFrameIntoExternalBuffer", 2018, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(_DWORD *)(a2 + 916));
        __uint64_t v24 = sub_4F1D8();
        uint64_t v25 = (const char *)sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame->PlaneNumber = %d", v24, 3, v25, "CopyEncodedFrameIntoExternalBuffer", 2018, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(unsigned int *)(a2 + 916));
    }
    return v16;
  }
  uint64_t v13 = (uint64_t)a1;
  CFAllocatorRef v14 = a1 + 59839;
  int v15 = a1 + 16889;
  int v201 = a1[16889];
  if (a6)
  {
    if (!a4 || a7) {
      goto LABEL_7;
    }
LABEL_18:
    __uint64_t v209 = a3;
    if (a1[59840])
    {
      if (sub_44EF8(0x2Eu, 7))
      {
        int v26 = sub_44F3C(0x2Eu);
        __uint64_t v27 = sub_4F1D8();
        int v28 = (const char *)sub_44F70(7);
        int v29 = v14[1];
        if (v26)
        {
          printf("%lld %d AVE %s: H264FrameRec: memcpy SEI size %u\n", v27, 46, v28, v29);
          __uint64_t v30 = sub_4F1D8();
          __uint64_t v189 = (const char *)sub_44F70(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: memcpy SEI size %u", v30, 46, v189, v14[1]);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: memcpy SEI size %u", v27, 46, v28, v29);
        }
        uint64_t v13 = (uint64_t)a1;
      }
      size_t v31 = v14[1];
      if ((int)v31 <= 0)
      {
        uint64_t v16 = 3758097084;
        if (sub_44EF8(3u, 4))
        {
          int v42 = sub_44F3C(3u);
          __uint64_t v43 = sub_4F1D8();
          uint64_t v44 = (const char *)sub_44F70(4);
          if (v42)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer - SEI buffer size too big\n", v43, 3, v44, "CopyEncodedFrameIntoExternalBuffer", 2031, "false");
            sub_4F1D8();
            sub_44F70(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer - SEI buffer size too big");
        }
        return v16;
      }
      memcpy(a3, a4, v31);
      __uint64_t v209 = &a3[v14[1]];
      signed int v8 = *(_DWORD *)(a2 + 916);
    }
    goto LABEL_29;
  }
  if (a4) {
    goto LABEL_18;
  }
LABEL_7:
  __uint64_t v209 = a3;
LABEL_29:
  unint64_t v207 = *(char **)(v13 + 8 * v8 + 26472);
  if (v207)
  {
    uint64_t v32 = *(unsigned int *)(v13 + 4 * v8 + 26952);
    uint64_t v203 = a5;
    if (sub_44EF8(0x2Eu, 7))
    {
      int v33 = sub_44F3C(0x2Eu);
      __uint64_t v34 = sub_4F1D8();
      __uint64_t v35 = (const char *)sub_44F70(7);
      int v36 = *v14;
      if (v33)
      {
        printf("%lld %d AVE %s: ClientID %d buf %p, buf_size %d\n", v34, 46, v35, v36, v207, v32);
        __uint64_t v37 = sub_4F1D8();
        __uint64_t v38 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: ClientID %d buf %p, buf_size %d", v37, 46, v38, *v14, v207, v32);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: ClientID %d buf %p, buf_size %d", v34, 46, v35, v36, v207, v32);
      }
    }
    int v45 = *(_DWORD *)(a2 + 916);
    if (*(_DWORD *)(v13 + 384 * v45 + 39552))
    {
      int v200 = *(char **)(v13 + 8 * v45 + 27552);
      if (!v200)
      {
        uint64_t v16 = 3758097084;
        if (sub_44EF8(3u, 4))
        {
          int v46 = sub_44F3C(3u);
          __uint64_t v47 = sub_4F1D8();
          int v48 = (const char *)sub_44F70(4);
          if (v46)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer buf_header == NULL\n", v47, 3, v48, "CopyEncodedFrameIntoExternalBuffer", 2048, "buf_header != __null");
            sub_4F1D8();
            sub_44F70(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer buf_header == NULL");
        }
        return v16;
      }
    }
    else
    {
      int v200 = 0;
    }
    v199 = v15;
    if (a6)
    {
      if (*(_DWORD *)(v13 + 384 * v45 + 12 * (int)a7 + 28032))
      {
        if (sub_44EF8(0x2Eu, 7))
        {
          int v49 = sub_44F3C(0x2Eu);
          __uint64_t v50 = sub_4F1D8();
          int v51 = (const char *)sub_44F70(7);
          if (v49)
          {
            printf("%lld %d AVE %s: H264FrameRec: copy PlaneNumber = %d, slice %d size %d, from offset %d \n", v50, 46, v51, *(_DWORD *)(a2 + 916), a7, *(_DWORD *)(v13 + 384 * *(int *)(a2 + 916) + 12 * (int)a7 + 28032), *(_DWORD *)(v13 + 384 * *(int *)(a2 + 916) + 12 * (int)a7 + 28036));
            __uint64_t v52 = sub_4F1D8();
            sub_44F70(7);
            uint64_t v13 = (uint64_t)a1;
            syslog(3, "%lld %d AVE %s: H264FrameRec: copy PlaneNumber = %d, slice %d size %d, from offset %d ", v52);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: copy PlaneNumber = %d, slice %d size %d, from offset %d ", v50);
          }
        }
        uint64_t v198 = v32;
        if (*(_DWORD *)(v13 + 384 * *(int *)(a2 + 916) + 12 * (int)a7 + 39552))
        {
          if (sub_44EF8(0x2Eu, 7))
          {
            int v91 = sub_44F3C(0x2Eu);
            __uint64_t v92 = sub_4F1D8();
            int v93 = (const char *)sub_44F70(7);
            int v94 = *(_DWORD *)(v13 + 384 * *(int *)(a2 + 916) + 12 * (int)a7 + 39552);
            if (v91)
            {
              printf("%lld %d AVE %s: slice header memcpy: %p -> %p %d\n", v92, 46, v93, &v200[1024 * (uint64_t)(int)a7], v209, v94);
              __uint64_t v95 = sub_4F1D8();
              uint64_t v96 = (const char *)sub_44F70(7);
              uint64_t v13 = (uint64_t)a1;
              syslog(3, "%lld %d AVE %s: slice header memcpy: %p -> %p %d", v95, 46, v96, &v200[1024 * (uint64_t)(int)a7], v209, a1[96 * *(int *)(a2 + 916) + 9888 + 3 * (int)a7]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: slice header memcpy: %p -> %p %d", v92, 46, v93, &v200[1024 * (uint64_t)(int)a7], v209, v94);
            }
          }
          uint64_t v97 = v203;
          if (v209 >= &a3[v203])
          {
            uint64_t v16 = 3758097084;
            sub_21594(v13, *(unsigned int *)(a2 + 916), a7, v200, -1, &v200[1024 * (uint64_t)(int)a7], a3, v203, v209);
            if (!sub_44EF8(3u, 4)) {
              return v16;
            }
            int v106 = sub_44F3C(3u);
            __uint64_t v88 = sub_4F1D8();
            __uint64_t v89 = (const char *)sub_44F70(4);
            if (v106)
            {
              int v90 = 2128;
LABEL_107:
              printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer - buffer size too big\n", v88, 3, v89, "CopyEncodedFrameIntoExternalBuffer", v90, "false");
              sub_4F1D8();
              sub_44F70(4);
            }
LABEL_187:
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer - buffer size too big");
            return v16;
          }
          uint64_t v99 = v13 + 39552;
          memcpy(v209, &v200[1024 * (uint64_t)(int)a7], *(unsigned int *)(v13 + 39552 + 384 * *(int *)(a2 + 916) + 12 * (int)a7));
          uint64_t v13 = (uint64_t)a1;
          v209 += *(unsigned int *)(v99 + 384 * *(int *)(a2 + 916) + 12 * (int)a7);
        }
        else
        {
          uint64_t v97 = v203;
        }
        if (sub_44EF8(0x2Eu, 7))
        {
          int v100 = sub_44F3C(0x2Eu);
          __uint64_t v101 = sub_4F1D8();
          signed int v102 = (const char *)sub_44F70(7);
          int v103 = &v207[*(unsigned int *)(v13 + 384 * *(int *)(a2 + 916) + 12 * (int)a7 + 28036)];
          if (v100)
          {
            printf("%lld %d AVE %s: memcpy: %p -> %p %d\n", v101, 46, v102, v103, v209, *(_DWORD *)(v13 + 384 * *(int *)(a2 + 916) + 12 * (int)a7 + 28032));
            __uint64_t v104 = sub_4F1D8();
            __uint64_t v105 = (const char *)sub_44F70(7);
            syslog(3, "%lld %d AVE %s: memcpy: %p -> %p %d", v104, 46, v105, &v207[*(unsigned int *)(v13 + 384 * *(int *)(a2 + 916) + 12 * (int)a7 + 28036)], v209, *(_DWORD *)(v13 + 384 * *(int *)(a2 + 916) + 12 * (int)a7 + 28032));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: memcpy: %p -> %p %d", v101, 46, v102, v103, v209, *(_DWORD *)(v13 + 384 * *(int *)(a2 + 916) + 12 * (int)a7 + 28032));
          }
          uint64_t v97 = v203;
        }
        uint64_t v107 = *(int *)(a2 + 916);
        size_t v108 = *(unsigned int *)(v13 + 384 * (int)v107 + 12 * (int)a7 + 28032);
        uint64_t v109 = *(unsigned int *)(v13 + 384 * (int)v107 + 12 * (int)a7 + 28036);
        if (&v209[v108] > &a3[v97] || &v207[v109 + v108] > &v207[v198])
        {
          uint64_t v16 = 3758097084;
          sub_21594(v13, v107, a7, v207, v198, &v207[v109], a3, v97, v209);
          if (!sub_44EF8(3u, 4)) {
            return v16;
          }
          int v110 = sub_44F3C(3u);
          __uint64_t v88 = sub_4F1D8();
          __uint64_t v89 = (const char *)sub_44F70(4);
          if (v110)
          {
            int v90 = 2148;
            goto LABEL_107;
          }
          goto LABEL_187;
        }
        int v195 = a6;
        int v196 = a7;
        memcpy(v209, &v207[v109], v108);
        int v57 = &v209[*(unsigned int *)(v13 + 384 * *(int *)(a2 + 916) + 12 * (int)a7 + 28032)];
      }
      else
      {
        int v195 = a6;
        int v196 = a7;
        int v57 = v209;
      }
    }
    else
    {
      int v195 = a6;
      int v196 = a7;
      uint64_t v53 = 0;
      int v204 = &a3[v203];
      int v197 = v32;
      int v202 = &v207[v32];
      uint64_t v54 = 28032;
      uint64_t v55 = 39552;
      uint64_t v56 = v200;
      int v57 = v209;
      while (*(_DWORD *)(v13 + 384 * v45 + v54))
      {
        if (sub_44EF8(0x2Eu, 7))
        {
          int v58 = sub_44F3C(0x2Eu);
          __uint64_t v59 = sub_4F1D8();
          __uint64_t v60 = (const char *)sub_44F70(7);
          int v61 = *(_DWORD *)(a2 + 916);
          int v62 = (int *)(v13 + v54 + 384 * v61);
          int v63 = *v62;
          int v64 = v62[1];
          if (v58)
          {
            printf("%lld %d AVE %s: H264FrameRec: copy PlaneNumber = %d, slice %d size %d, from offset %d \n", v59, 46, v60, v61, v53, v63, v64);
            __uint64_t v65 = sub_4F1D8();
            uint64_t v66 = (const char *)sub_44F70(7);
            int v67 = (_DWORD *)(v13 + v54 + 384 * *(int *)(a2 + 916));
            syslog(3, "%lld %d AVE %s: H264FrameRec: copy PlaneNumber = %d, slice %d size %d, from offset %d ", v65, 46, v66, *(_DWORD *)(a2 + 916), v53, *v67, v67[1]);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: copy PlaneNumber = %d, slice %d size %d, from offset %d ", v59, 46, v60, v61, v53, v63, v64);
          }
        }
        if (*(_DWORD *)(v13 + 384 * *(int *)(a2 + 916) + v55))
        {
          if (sub_44EF8(0x2Eu, 7))
          {
            int v68 = sub_44F3C(0x2Eu);
            __uint64_t v69 = sub_4F1D8();
            __uint64_t v70 = (const char *)sub_44F70(7);
            int v71 = *(_DWORD *)(v13 + 384 * *(int *)(a2 + 916) + v55);
            if (v68)
            {
              printf("%lld %d AVE %s: slice header memcpy: %p -> %p %d\n", v69, 46, v70, v56, v57, v71);
              __uint64_t v72 = sub_4F1D8();
              int v73 = (const char *)sub_44F70(7);
              syslog(3, "%lld %d AVE %s: slice header memcpy: %p -> %p %d", v72, 46, v73, v56, v57, *(_DWORD *)(v13 + 384 * *(int *)(a2 + 916) + v55));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: slice header memcpy: %p -> %p %d", v69, 46, v70, v56, v57, v71);
            }
          }
          if (v57 >= v204)
          {
            uint64_t v16 = 3758097084;
            sub_21594(v13, *(unsigned int *)(a2 + 916), v53, v200, -1, v56, a3, v203, v57);
            if (!sub_44EF8(3u, 4)) {
              return v16;
            }
            int v98 = sub_44F3C(3u);
            __uint64_t v88 = sub_4F1D8();
            __uint64_t v89 = (const char *)sub_44F70(4);
            if (v98)
            {
              int v90 = 2074;
              goto LABEL_107;
            }
            goto LABEL_187;
          }
          memcpy(v57, v56, *(unsigned int *)(v13 + 384 * *(int *)(a2 + 916) + v55));
          v57 += *(unsigned int *)(v13 + 384 * *(int *)(a2 + 916) + v55);
        }
        if (sub_44EF8(0x2Eu, 7))
        {
          int v74 = sub_44F3C(0x2Eu);
          __uint64_t v75 = sub_4F1D8();
          __uint64_t v76 = (const char *)sub_44F70(7);
          __uint64_t v77 = (int *)(v13 + v54 + 384 * *(int *)(a2 + 916));
          int v78 = *v77;
          int v79 = &v207[v77[1]];
          if (v74)
          {
            printf("%lld %d AVE %s: memcpy: %p -> %p %d, StreamBufferCopy %p FinalOutput_FRAME_Size %lu\n", v75, 46, v76, v79, v57, v78, a3, v203);
            __uint64_t v80 = sub_4F1D8();
            int v81 = (const char *)sub_44F70(7);
            syslog(3, "%lld %d AVE %s: memcpy: %p -> %p %d, StreamBufferCopy %p FinalOutput_FRAME_Size %lu", v80, 46, v81, &v207[*(unsigned int *)(v13 + v54 + 384 * *(int *)(a2 + 916) + 4)], v57, *(_DWORD *)(v13 + v54 + 384 * *(int *)(a2 + 916)), a3, v203);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: memcpy: %p -> %p %d, StreamBufferCopy %p FinalOutput_FRAME_Size %lu", v75, 46, v76, v79, v57, v78, a3, v203);
          }
        }
        uint64_t v82 = *(int *)(a2 + 916);
        __uint64_t v83 = (unsigned int *)(v13 + v54 + 384 * (int)v82);
        size_t v84 = *v83;
        uint64_t v85 = &v207[v83[1]];
        if (&v57[v84] > v204 || &v85[v84] > v202)
        {
          uint64_t v16 = 3758097084;
          sub_21594(v13, v82, v53, v207, v197, v85, a3, v203, v57);
          if (!sub_44EF8(3u, 4)) {
            return v16;
          }
          int v87 = sub_44F3C(3u);
          __uint64_t v88 = sub_4F1D8();
          __uint64_t v89 = (const char *)sub_44F70(4);
          if (v87)
          {
            int v90 = 2094;
            goto LABEL_107;
          }
          goto LABEL_187;
        }
        memcpy(v57, v85, v84);
        int v45 = *(_DWORD *)(a2 + 916);
        v57 += *(unsigned int *)(v13 + 384 * v45 + v54);
        ++v53;
        v56 += 1024;
        v55 += 12;
        v54 += 12;
        if (v53 == 32) {
          break;
        }
      }
    }
    v210 = v57;
    int v111 = v201 - 1;
    __uint64_t v112 = v199;
    if (sub_44EF8(0x2Eu, 7))
    {
      int v113 = sub_44F3C(0x2Eu);
      __uint64_t v114 = sub_4F1D8();
      int v115 = (const char *)sub_44F70(7);
      if (v113)
      {
        printf("%lld %d AVE %s: H264FrameRec: isLastSlice %d\n", v114, 46, v115, v111 == v196);
        __uint64_t v116 = sub_4F1D8();
        int v190 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: isLastSlice %d", v116, 46, v190, v111 == v196);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: isLastSlice %d", v114, 46, v115, v111 == v196);
      }
      uint64_t v13 = (uint64_t)a1;
    }
    if (!v195 || v111 == v196)
    {
      int v208 = (_DWORD **)(v13 + 51072);
      if (v199[94] < 2u || *(_DWORD *)(a2 + 168))
      {
        uint64_t v117 = 0;
        char v118 = 1;
        int v119 = (_DWORD **)(v13 + 51072);
        *(_DWORD *)(v13 + 51108) = 0;
        do
        {
          char v120 = v118;
          uint64_t v121 = (int *)(v13 + 12 * v117 + 51084);
          uint64_t v122 = v13;
          uint64_t v123 = v121 + 2;
          if (v121[2])
          {
            v124 = (char *)(v122 + 12 * v117 + 51091);
            memcpy(v210, v121, *v124 - 1);
            memset(&v210[*v124 - 1], 255, *v123);
            v210[*v123 - 1 + *v124] = 0x80;
            uint64_t v125 = *v123 + (uint64_t)*v124;
            *((_DWORD *)v119 + 9) += v125;
            **v119 += v125;
            if (sub_44EF8(0x2Eu, 7))
            {
              int v126 = sub_44F3C(0x2Eu);
              __uint64_t v127 = sub_4F1D8();
              uint64_t v128 = (const char *)sub_44F70(7);
              int v129 = *v123;
              if (v126)
              {
                printf("%lld %d AVE %s: H264FrameRec: Filler[%d] done %d %d\n", v127, 46, v128, v117, *v124, v129);
                __uint64_t v130 = sub_4F1D8();
                long long v131 = (const char *)sub_44F70(7);
                syslog(3, "%lld %d AVE %s: H264FrameRec: Filler[%d] done %d %d", v130, 46, v131, v117, *v124, *v123);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: H264FrameRec: Filler[%d] done %d %d", v127, 46, v128, v117, *v124, v129);
              }
              int v119 = v208;
            }
            v210 += v125;
            v121[2] = 0;
            *(void *)uint64_t v121 = 0;
          }
          char v118 = 0;
          uint64_t v117 = 1;
          uint64_t v13 = (uint64_t)a1;
        }
        while ((v120 & 1) != 0);
      }
      else
      {
        int v119 = (_DWORD **)(v13 + 51072);
      }
      if (*((_DWORD *)v119 + 2))
      {
        uint64_t v132 = 0;
        long long v133 = (int *)(v13 + 28040);
        do
        {
          uint64_t v134 = 0;
          long long v135 = v133;
          do
          {
            if (!*(v135 - 2)) {
              break;
            }
            if (sub_44EF8(0x2Eu, 7))
            {
              int v136 = sub_44F3C(0x2Eu);
              __uint64_t v137 = sub_4F1D8();
              int v138 = (const char *)sub_44F70(7);
              int v139 = *(v135 - 2);
              int v140 = *v135;
              if (v136)
              {
                printf("%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes = [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d\n", v137, 46, v138, v132, v134, v132, v134, v139, *(v135 - 1), v140);
                __uint64_t v141 = sub_4F1D8();
                uint64_t v142 = (const char *)sub_44F70(7);
                syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes = [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v141, 46, v142, v132, v134, v132, v134, *(v135 - 2), *(v135 - 1), *v135);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes = [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v137, 46, v138, v132, v134, v132, v134, v139, *(v135 - 1), v140);
              }
            }
            ++v134;
            v135 += 3;
          }
          while (v134 != 32);
          ++v132;
          v133 += 96;
        }
        while (v132 != 30);
        __uint64_t v143 = v210;
        if (sub_44EF8(0x2Eu, 7))
        {
          int v144 = sub_44F3C(0x2Eu);
          __uint64_t v145 = sub_4F1D8();
          uint64_t v146 = (const char *)sub_44F70(7);
          int v147 = *((_DWORD *)v208 + 2);
          if (v144)
          {
            printf("%lld %d AVE %s: H264FrameRec: m_numCABACzeroWordToBeInserted %d bytes\n", v145, 46, v146, v147);
            __uint64_t v148 = sub_4F1D8();
            __uint64_t v191 = (const char *)sub_44F70(7);
            __uint64_t v143 = v210;
            syslog(3, "%lld %d AVE %s: H264FrameRec: m_numCABACzeroWordToBeInserted %d bytes", v148, 46, v191, *((_DWORD *)v208 + 2));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: m_numCABACzeroWordToBeInserted %d bytes", v145, 46, v146, v147);
          }
        }
        if (*((_DWORD *)v208 + 2))
        {
          unint64_t v149 = 0;
          do
          {
            long long v150 = &v143[v149];
            *(_WORD *)long long v150 = 0;
            v150[2] = 3;
            v149 += 3;
          }
          while (v149 < *((unsigned int *)v208 + 2));
        }
        if (!*v208)
        {
          uint64_t v16 = 3758097084;
          if (sub_44EF8(3u, 4))
          {
            int v156 = sub_44F3C(3u);
            __uint64_t v157 = sub_4F1D8();
            __uint64_t v158 = (const char *)sub_44F70(4);
            if (v156)
            {
              printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer m_pLastOutputSlicesSizes = NULL\n", v157, 3, v158, "CopyEncodedFrameIntoExternalBuffer", 2217, "m_pLastOutputSlicesSizes != __null");
              sub_4F1D8();
              sub_44F70(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer m_pLastOutputSlicesSizes = NULL");
          }
          return v16;
        }
        if (sub_44EF8(0x2Eu, 7))
        {
          int v151 = sub_44F3C(0x2Eu);
          __uint64_t v152 = sub_4F1D8();
          long long v153 = (const char *)sub_44F70(7);
          int v154 = **v208;
          if (v151)
          {
            printf("%lld %d AVE %s: H264FrameRec: previous *m_pLastOutputSlicesSizes %d bytes\n", v152, 46, v153, v154);
            __uint64_t v155 = sub_4F1D8();
            v192 = (const char *)sub_44F70(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: previous *m_pLastOutputSlicesSizes %d bytes", v155, 46, v192, **v208);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: previous *m_pLastOutputSlicesSizes %d bytes", v152, 46, v153, v154);
          }
        }
        **v208 += *((_DWORD *)v208 + 2);
        if (sub_44EF8(0x2Eu, 7))
        {
          int v159 = sub_44F3C(0x2Eu);
          __uint64_t v160 = sub_4F1D8();
          __uint64_t v161 = (const char *)sub_44F70(7);
          int v162 = **v208;
          if (v159)
          {
            printf("%lld %d AVE %s: H264FrameRec: after *m_pLastOutputSlicesSizes %d bytes\n", v160, 46, v161, v162);
            __uint64_t v163 = sub_4F1D8();
            int v193 = (const char *)sub_44F70(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: after *m_pLastOutputSlicesSizes %d bytes", v163, 46, v193, **v208);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: after *m_pLastOutputSlicesSizes %d bytes", v160, 46, v161, v162);
          }
        }
        uint64_t v164 = 0;
        uint64_t v165 = a1 + 7010;
        do
        {
          uint64_t v166 = 0;
          __uint64_t v167 = v165;
          do
          {
            if (!*(v167 - 2)) {
              break;
            }
            if (sub_44EF8(0x2Eu, 7))
            {
              int v168 = sub_44F3C(0x2Eu);
              __uint64_t v169 = sub_4F1D8();
              unsigned int v170 = (const char *)sub_44F70(7);
              int v171 = *(v167 - 2);
              int v172 = *v167;
              if (v168)
              {
                printf("%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes = [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d\n", v169, 46, v170, v164, v166, v164, v166, v171, *(v167 - 1), v172);
                __uint64_t v173 = sub_4F1D8();
                v174 = (const char *)sub_44F70(7);
                syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes = [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v173, 46, v174, v164, v166, v164, v166, *(v167 - 2), *(v167 - 1), *v167);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes = [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v169, 46, v170, v164, v166, v164, v166, v171, *(v167 - 1), v172);
              }
            }
            ++v166;
            v167 += 3;
          }
          while (v166 != 32);
          ++v164;
          v165 += 96;
        }
        while (v164 != 30);
        uint64_t v13 = (uint64_t)a1;
      }
      __uint64_t v112 = v199;
    }
    uint64_t v16 = *((unsigned int *)v112 + 175);
    __uint64_t v175 = v210;
    if (!v16) {
      return v16;
    }
    if (v16 == 1)
    {
      if (!v112[884]) {
        return 0;
      }
      if (sub_44EF8(0x2Eu, 7))
      {
        int v176 = sub_44F3C(0x2Eu);
        __uint64_t v177 = sub_4F1D8();
        int v178 = (const char *)sub_44F70(7);
        int v179 = *((_DWORD *)v112 + 350);
        if (v176)
        {
          printf("%lld %d AVE %s: H264FrameRec: CopyEncodedFrameIntoExternalBuffer bRPUNutPresent - size %d\n", v177, 46, v178, v179);
          __uint64_t v180 = sub_4F1D8();
          __uint64_t v194 = (const char *)sub_44F70(7);
          __uint64_t v175 = v210;
          syslog(3, "%lld %d AVE %s: H264FrameRec: CopyEncodedFrameIntoExternalBuffer bRPUNutPresent - size %d", v180, 46, v194, *((_DWORD *)v112 + 350));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: CopyEncodedFrameIntoExternalBuffer bRPUNutPresent - size %d", v177, 46, v178, v179);
        }
      }
      size_t v184 = *((unsigned int *)v112 + 350);
      if (v184)
      {
        memcpy(v175, (const void *)(v13 + 68441), v184);
        return 0;
      }
      uint64_t v16 = 3758097084;
      if (sub_44EF8(3u, 4))
      {
        int v185 = sub_44F3C(3u);
        __uint64_t v186 = sub_4F1D8();
        __uint64_t v187 = (const char *)sub_44F70(4);
        if (v185)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: RPUNutSize = 0\n", v186, 3, v187, "CopyEncodedFrameIntoExternalBuffer", 2252, "m_VideoParamsDriver.RPUNutSize != 0");
          sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: RPUNutSize = 0");
      }
    }
    else
    {
      uint64_t v16 = 3758097084;
      if (sub_44EF8(3u, 4))
      {
        int v181 = sub_44F3C(3u);
        __uint64_t v182 = sub_4F1D8();
        int v183 = (const char *)sub_44F70(4);
        if (v181)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR - codecID not recognized. FAIL\n", v182, 3, v183, "CopyEncodedFrameIntoExternalBuffer", 2269, "false");
          sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR - codecID not recognized. FAIL");
      }
    }
  }
  else
  {
    uint64_t v16 = 3758097084;
    if (sub_44EF8(3u, 4))
    {
      int v39 = sub_44F3C(3u);
      __uint64_t v40 = sub_4F1D8();
      __uint64_t v41 = (const char *)sub_44F70(4);
      if (v39)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer buf == NULL\n", v40, 3, v41, "CopyEncodedFrameIntoExternalBuffer", 2041, "buf != __null");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer buf == NULL");
    }
  }
  return v16;
}

uint64_t sub_24998(uint64_t a1, int *a2, int a3)
{
  uint64_t v6 = a1 + 67932;
  uint64_t v7 = a1 + 51272;
  unsigned int v8 = sub_36D7C(*(_DWORD *)(a1 + 68256), 2);
  memset(v178, 0, 44);
  CFTypeRef cf = 0;
  if (*(unsigned char *)(v6 + 413))
  {
    if (!*(void *)(v7 + 80))
    {
      if (sub_44EF8(0x2Eu, 4))
      {
        int v9 = sub_44F3C(0x2Eu);
        __uint64_t v10 = sub_4F1D8();
        __uint64_t v11 = (const char *)sub_44F70(4);
        if (v9)
        {
          printf("%lld %d AVE %s: H264FrameRec WARNING: HEIF -> nobody wants this SPS PPS header. dump it.\n", v10, 46, v11);
          sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: HEIF -> nobody wants this SPS PPS header. dump it.");
      }
      return 0;
    }
  }
  else if (!*(void *)(v7 + 72))
  {
    if (sub_44EF8(0x2Eu, 4))
    {
      int v31 = sub_44F3C(0x2Eu);
      __uint64_t v32 = sub_4F1D8();
      int v33 = (const char *)sub_44F70(4);
      if (v31)
      {
        printf("%lld %d AVE %s: H264FrameRec WARNING: nobody wants this SPS PPS header. dump it.\n", v32, 46, v33);
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this SPS PPS header. dump it.");
    }
    return 0;
  }
  if (sub_44EF8(0x2Eu, 7))
  {
    int v12 = sub_44F3C(0x2Eu);
    __uint64_t v13 = sub_4F1D8();
    CFAllocatorRef v14 = (const char *)sub_44F70(7);
    if (v12)
    {
      printf("%lld %d AVE %s: H264FrameRec: Sending SPS PPS\n", v13, 46, v14);
      __uint64_t v15 = sub_4F1D8();
      __uint64_t v157 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: H264FrameRec: Sending SPS PPS", v15, 46, v157);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264FrameRec: Sending SPS PPS", v13, 46, v14);
    }
  }
  if (!a2)
  {
    uint64_t v20 = 3758097084;
    if (sub_44EF8(3u, 4))
    {
      int v25 = sub_44F3C(3u);
      __uint64_t v26 = sub_4F1D8();
      __uint64_t v27 = (const char *)sub_44F70(4);
      if (v25)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendSPSandPPS Frame == NULL\n", v26, 3, v27, "SendSPSandPPS", 2316, "Frame != __null");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendSPSandPPS Frame == NULL");
    }
    goto LABEL_36;
  }
  if (a2[229] >= 0x1F)
  {
    uint64_t v20 = 3758097084;
    if (sub_44EF8(3u, 4))
    {
      int v28 = sub_44F3C(3u);
      __uint64_t v29 = sub_4F1D8();
      __uint64_t v30 = (const char *)sub_44F70(4);
      if (v28)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendSPSandPPS Frame->PlaneNumber = %d\n", v29, 3, v30, "SendSPSandPPS", 2317, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", a2[229]);
        __uint64_t v29 = sub_4F1D8();
        __uint64_t v30 = (const char *)sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendSPSandPPS Frame->PlaneNumber = %d", v29, 3, v30, "SendSPSandPPS", 2317, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", a2[229]);
    }
LABEL_36:
    int v17 = 0;
    goto LABEL_37;
  }
  uint64_t v16 = sub_2633C(a1, v8, (CMBlockBufferRef *)&cf);
  if (v16)
  {
    int v17 = v16;
    int v176 = (const void **)(a1 + 245264);
    if (!*(unsigned char *)(v6 + 204) || a2[40]) {
      goto LABEL_16;
    }
    __uint64_t v43 = sub_2633C(a1, v8, (CMBlockBufferRef *)&cf);
    *int v176 = v43;
    if (v43)
    {
      if (sub_44EF8(0x2Eu, 7))
      {
        int v44 = sub_44F3C(0x2Eu);
        __uint64_t v45 = sub_4F1D8();
        int v46 = (const char *)sub_44F70(7);
        int v47 = *(_DWORD *)(a1 + 245272);
        if (v44)
        {
          printf("%lld %d AVE %s: H264FrameRec: SendSPSandPPS bUseElementaryStreamOutput CreateBuffer %p %d\n", v45, 46, v46, *v176, v47);
          __uint64_t v48 = sub_4F1D8();
          int v49 = (const char *)sub_44F70(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: SendSPSandPPS bUseElementaryStreamOutput CreateBuffer %p %d", v48, 46, v49, *(const void **)(a1 + 245264), *(void *)(a1 + 245272));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: SendSPSandPPS bUseElementaryStreamOutput CreateBuffer %p %d", v45, 46, v46, *v176, v47);
        }
      }
LABEL_16:
      __uint64_t v18 = IOSurfaceLookup(*(_DWORD *)(a1 + 25788));
      if (!v18)
      {
        uint64_t v20 = 3758097084;
        if (sub_44EF8(3u, 4))
        {
          int v38 = sub_44F3C(3u);
          __uint64_t v39 = sub_4F1D8();
          __uint64_t v40 = (const char *)sub_44F70(4);
          if (v38)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SPSPPSBufferFromFWSurface IOSurfaceLookup failed.\n", v39, 3, v40, "SendSPSandPPS", 2333, "SPSPPSBufferFromFWSurface != __null");
            __uint64_t v41 = sub_4F1D8();
            __uint64_t v160 = (const char *)sub_44F70(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SPSPPSBufferFromFWSurface IOSurfaceLookup failed.", v41, 3, v160, "SendSPSandPPS", 2333, "SPSPPSBufferFromFWSurface != __null");
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SPSPPSBufferFromFWSurface IOSurfaceLookup failed.", v39, 3, v40, "SendSPSandPPS", 2333, "SPSPPSBufferFromFWSurface != __null");
          }
        }
        goto LABEL_37;
      }
      __uint64_t v19 = v18;
      if (IOSurfaceLock(v18, 0, 0))
      {
        uint64_t v20 = 3758097084;
        if (sub_44EF8(3u, 4))
        {
          int v21 = sub_44F3C(3u);
          __uint64_t v22 = sub_4F1D8();
          int v23 = (const char *)sub_44F70(4);
          if (v21)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: IOSurfaceLock SPSPPSBufferFromFWSurface failed.\n", v22, 3, v23, "SendSPSandPPS", 2336, "err2 == 0");
            __uint64_t v24 = sub_4F1D8();
            __uint64_t v158 = (const char *)sub_44F70(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: IOSurfaceLock SPSPPSBufferFromFWSurface failed.", v24, 3, v158, "SendSPSandPPS", 2336, "err2 == 0");
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: IOSurfaceLock SPSPPSBufferFromFWSurface failed.", v22, 3, v23, "SendSPSandPPS", 2336, "err2 == 0");
          }
        }
        goto LABEL_117;
      }
      BaseAddress = (unsigned int *)IOSurfaceGetBaseAddress(v19);
      if (!BaseAddress)
      {
        uint64_t v20 = 3758097084;
        if (sub_44EF8(3u, 4))
        {
          int v62 = sub_44F3C(3u);
          __uint64_t v63 = sub_4F1D8();
          int v64 = (const char *)sub_44F70(4);
          if (v62)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SPSPPSBufferFromFW = NULL.\n", v63, 3, v64, "SendSPSandPPS", 2339, "SPSPPSBufferFromFW != __null");
            sub_4F1D8();
            sub_44F70(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SPSPPSBufferFromFW = NULL.");
        }
        goto LABEL_116;
      }
      __uint64_t v175 = v17;
      if (a3)
      {
        __uint64_t v173 = v19;
        uint64_t v51 = *(void *)(a1 + 8 * a2[229] + 27072);
        if (!v51)
        {
          uint64_t v20 = 3758097084;
          __uint64_t v19 = v173;
          if (sub_44EF8(3u, 4))
          {
            int v71 = sub_44F3C(3u);
            __uint64_t v72 = sub_4F1D8();
            int v73 = (const char *)sub_44F70(4);
            if (v71)
            {
              printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_CodedBuffPointerDataHeader[%d] == NULL\n", v72, 3, v73, "SendSPSandPPS", 2348, "codedHeader != __null", a2[229]);
              __uint64_t v72 = sub_4F1D8();
              sub_44F70(4);
              __uint64_t v19 = v173;
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_CodedBuffPointerDataHeader[%d] == NULL", v72);
          }
          goto LABEL_116;
        }
        v174 = BaseAddress;
        if (sub_44EF8(0x2Eu, 7))
        {
          int v52 = sub_44F3C(0x2Eu);
          __uint64_t v53 = sub_4F1D8();
          uint64_t v54 = (const char *)sub_44F70(7);
          int v55 = *(_DWORD *)(v51 + 152);
          if (v52)
          {
            printf("%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_SPSPPSHeaderBits %d\n", v53, 46, v54, a2[229], v55);
            __uint64_t v56 = sub_4F1D8();
            int v57 = (const char *)sub_44F70(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_SPSPPSHeaderBits %d", v56, 46, v57, a2[229], *(_DWORD *)(v51 + 152));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_SPSPPSHeaderBits %d", v53, 46, v54, a2[229], v55);
          }
        }
        for (uint64_t i = 0; i != 16; i += 4)
        {
          if (sub_44EF8(0x2Eu, 7))
          {
            int v79 = sub_44F3C(0x2Eu);
            __uint64_t v80 = sub_4F1D8();
            int v81 = (const char *)sub_44F70(7);
            int v82 = *(_DWORD *)(v51 + i);
            if (v79)
            {
              printf("%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_I_MbCnt %d\n", v80, 46, v81, a2[229], v82);
              __uint64_t v83 = sub_4F1D8();
              size_t v84 = (const char *)sub_44F70(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_I_MbCnt %d", v83, 46, v84, a2[229], *(_DWORD *)(v51 + i));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_I_MbCnt %d", v80, 46, v81, a2[229], v82);
            }
          }
          if (sub_44EF8(0x2Eu, 7))
          {
            int v85 = sub_44F3C(0x2Eu);
            __uint64_t v86 = sub_4F1D8();
            int v87 = (const char *)sub_44F70(7);
            int v88 = *(_DWORD *)(v51 + i + 16);
            if (v85)
            {
              printf("%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_P_MbCnt %d\n", v86, 46, v87, a2[229], v88);
              __uint64_t v89 = sub_4F1D8();
              int v90 = (const char *)sub_44F70(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_P_MbCnt %d", v89, 46, v90, a2[229], *(_DWORD *)(v51 + i + 16));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_P_MbCnt %d", v86, 46, v87, a2[229], v88);
            }
          }
        }
        unsigned int v74 = *(_DWORD *)(v51 + 152);
        __uint64_t v19 = v173;
        if (v74 < 8)
        {
          uint64_t v20 = 3758097084;
          if (sub_44EF8(3u, 4))
          {
            int v91 = sub_44F3C(3u);
            __uint64_t v76 = sub_4F1D8();
            __uint64_t v92 = (const char *)sub_44F70(4);
            if (v91)
            {
              printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader->ui32_SPSPPSHeaderBits = 0 (m_CodedBuffPointerDataHeader[%d])\n", v76, 3, v92, "SendSPSandPPS", 2359, "SPSPPSHeaderSize != 0", a2[229]);
              __uint64_t v76 = sub_4F1D8();
              sub_44F70(4);
              __uint64_t v19 = v173;
            }
LABEL_115:
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader->ui32_SPSPPSHeaderBits = 0 (m_CodedBuffPointerDataHeader[%d])", v76);
            goto LABEL_116;
          }
          goto LABEL_116;
        }
      }
      else
      {
        v174 = BaseAddress;
        if (sub_44EF8(0x2Eu, 7))
        {
          int v65 = sub_44F3C(0x2Eu);
          __uint64_t v66 = sub_4F1D8();
          int v67 = (const char *)sub_44F70(7);
          int v68 = a2[5480];
          if (v65)
          {
            printf("%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_SPSPPSHeaderBits %d\n", v66, 46, v67, a2[229], v68);
            __uint64_t v69 = sub_4F1D8();
            __uint64_t v70 = (const char *)sub_44F70(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_SPSPPSHeaderBits %d", v69, 46, v70, a2[229], a2[5480]);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_SPSPPSHeaderBits %d", v66, 46, v67, a2[229], v68);
          }
        }
        unsigned int v74 = a2[5480];
        if (v74 <= 7)
        {
          uint64_t v20 = 3758097084;
          if (sub_44EF8(3u, 4))
          {
            int v75 = sub_44F3C(3u);
            __uint64_t v76 = sub_4F1D8();
            __uint64_t v77 = (const char *)sub_44F70(4);
            if (v75)
            {
              printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader->ui32_SPSPPSHeaderBits = 0 (m_CodedBuffPointerDataHeader[%d])\n", v76, 3, v77, "SendSPSandPPS", 2365, "SPSPPSHeaderSize != 0", a2[229]);
              __uint64_t v76 = sub_4F1D8();
              sub_44F70(4);
            }
            goto LABEL_115;
          }
LABEL_116:
          IOSurfaceUnlock(v19, 0, 0);
LABEL_117:
          CFRelease(v19);
          goto LABEL_37;
        }
      }
      uint64_t v93 = v74 >> 3;
      if (sub_44EF8(0x2Eu, 7))
      {
        int v94 = sub_44F3C(0x2Eu);
        __uint64_t v95 = sub_4F1D8();
        uint64_t v96 = (const char *)sub_44F70(7);
        if (v94)
        {
          printf("%lld %d AVE %s: H264FrameRec: m_SPSPPSHeaderSize from FW = %d\n", v95, 46, v96, v93);
          __uint64_t v97 = sub_4F1D8();
          int v162 = (const char *)sub_44F70(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: m_SPSPPSHeaderSize from FW = %d", v97, 46, v162, v93);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: m_SPSPPSHeaderSize from FW = %d", v95, 46, v96, v93);
        }
      }
      int v98 = *(_DWORD *)(v6 + 324);
      if (v98 == 1)
      {
        int v17 = v175;
        sub_12760(v174, (uint64_t)v175, v93, v178, *(_DWORD *)v6, *(_DWORD *)(v7 + 16276));
        if (sub_44EF8(0x2Eu, 7))
        {
          int v104 = sub_44F3C(0x2Eu);
          __uint64_t v105 = sub_4F1D8();
          int v106 = (const char *)sub_44F70(7);
          if (v104)
          {
            printf("%lld %d AVE %s: H264FrameRec: CopySPSPPSHeader m_SPSPPSHeaderSize %d (SPS %d + PPS %d)\n", v105, 46, v106, v93, DWORD1(v178[0]), DWORD2(v178[0]));
            __uint64_t v107 = sub_4F1D8();
            size_t v108 = (const char *)sub_44F70(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: CopySPSPPSHeader m_SPSPPSHeaderSize %d (SPS %d + PPS %d)", v107, 46, v108, v93, DWORD1(v178[0]), DWORD2(v178[0]));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: CopySPSPPSHeader m_SPSPPSHeaderSize %d (SPS %d + PPS %d)", v105, 46, v106, v93, DWORD1(v178[0]), DWORD2(v178[0]));
          }
          int v17 = v175;
        }
        if (*(unsigned char *)(v6 + 204))
        {
          if (!a2[40])
          {
            sub_12760(v174, (uint64_t)*v176, v93, v178, *(_DWORD *)v6, *(_DWORD *)(v7 + 16276));
            *(void *)(a1 + 245272) = v93;
            if (sub_44EF8(0x2Eu, 7))
            {
              int v115 = sub_44F3C(0x2Eu);
              __uint64_t v116 = sub_4F1D8();
              uint64_t v117 = (const char *)sub_44F70(7);
              if (v115)
              {
                printf("%lld %d AVE %s: H264FrameRec: SendSPSandPPS bUseElementaryStreamOutput CopyVPSSPSPPSHeader %p %d\n", v116, 46, v117, *v176, *(_DWORD *)(a1 + 245272));
                sub_4F1D8();
                sub_44F70(7);
              }
              syslog(3, "%lld %d AVE %s: H264FrameRec: SendSPSandPPS bUseElementaryStreamOutput CopyVPSSPSPPSHeader %p %d");
              goto LABEL_135;
            }
          }
        }
      }
      else
      {
        int v17 = v175;
        if (v98)
        {
          uint64_t v20 = 3758097084;
          if (sub_44EF8(3u, 4))
          {
            int v109 = sub_44F3C(3u);
            __uint64_t v110 = sub_4F1D8();
            int v111 = (const char *)sub_44F70(4);
            if (v109)
            {
              printf("%lld %d AVE %s: %s:%d %s | SendSPSAndPPS ERROR: codecType not recognized)\n", v110, 3, v111, "SendSPSandPPS", 2402, "false");
              sub_4F1D8();
              sub_44F70(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | SendSPSAndPPS ERROR: codecType not recognized)");
          }
          goto LABEL_116;
        }
        sub_11990(v174, (uint64_t)v175, v93, v178, *(_DWORD *)(v7 + 16276));
        if (sub_44EF8(0x2Eu, 7))
        {
          int v99 = sub_44F3C(0x2Eu);
          __uint64_t v100 = sub_4F1D8();
          __uint64_t v101 = (const char *)sub_44F70(7);
          if (v99)
          {
            printf("%lld %d AVE %s: H264FrameRec: CopySPSPPSHeader m_SPSPPSHeaderSize %d (SPS %d + PPS %d)\n", v100, 46, v101, v93, DWORD1(v178[0]), DWORD2(v178[0]));
            __uint64_t v102 = sub_4F1D8();
            int v103 = (const char *)sub_44F70(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: CopySPSPPSHeader m_SPSPPSHeaderSize %d (SPS %d + PPS %d)", v102, 46, v103, v93, DWORD1(v178[0]), DWORD2(v178[0]));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: CopySPSPPSHeader m_SPSPPSHeaderSize %d (SPS %d + PPS %d)", v100, 46, v101, v93, DWORD1(v178[0]), DWORD2(v178[0]));
          }
          int v17 = v175;
        }
        if (*(unsigned char *)(v6 + 204))
        {
          if (!a2[40])
          {
            sub_11990(v174, (uint64_t)*v176, v93, v178, *(_DWORD *)(v7 + 16276));
            *(void *)(a1 + 245272) = v93;
            if (sub_44EF8(0x2Eu, 7))
            {
              int v112 = sub_44F3C(0x2Eu);
              __uint64_t v113 = sub_4F1D8();
              __uint64_t v114 = (const char *)sub_44F70(7);
              if (v112)
              {
                printf("%lld %d AVE %s: H264FrameRec: SendSPSandPPS bUseElementaryStreamOutput CopySPSPPSHeader %p %d\n", v113, 46, v114, *v176, *(_DWORD *)(a1 + 245272));
                sub_4F1D8();
                sub_44F70(7);
              }
              syslog(3, "%lld %d AVE %s: H264FrameRec: SendSPSandPPS bUseElementaryStreamOutput CopySPSPPSHeader %p %d");
LABEL_135:
              int v17 = v175;
            }
          }
        }
      }
      if (*(unsigned char *)(v6 + 413))
      {
        uint64_t v118 = *(void *)(v7 + 80);
        if (v118 != 1)
        {
          if (*(_DWORD *)v6 <= 1u)
          {
            uint64_t v119 = sub_1E624(a1, v118, v17, (unsigned int *)v178);
            if (v119)
            {
              uint64_t v20 = v119;
              if (!sub_44EF8(3u, 4)) {
                goto LABEL_116;
              }
              int v120 = sub_44F3C(3u);
              __uint64_t v121 = sub_4F1D8();
              uint64_t v122 = (const char *)sub_44F70(4);
              if (v120)
              {
                uint64_t v123 = v19;
                int v124 = 2425;
LABEL_149:
                printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreatevideoFormatDesc failed.\n", v121, 3, v122, "SendSPSandPPS", v124, "err == noErr");
                sub_4F1D8();
                __uint64_t v19 = v123;
                sub_44F70(4);
                goto LABEL_187;
              }
              goto LABEL_187;
            }
            goto LABEL_164;
          }
          sub_4CFBC(a1 + 158424, a1 + 239320, 4);
          sub_4D010(a1 + 158424, (unsigned char *)(a1 + 239324), 6);
          uint64_t v132 = sub_1F950(a1, *(void *)(v7 + 80), (unsigned __int8 *)v17, v93, (uint64_t)a2);
          if (v132)
          {
            uint64_t v20 = v132;
            if (!sub_44EF8(0x2Eu, 4)) {
              goto LABEL_116;
            }
            int v133 = sub_44F3C(0x2Eu);
            __uint64_t v134 = sub_4F1D8();
            long long v135 = (const char *)sub_44F70(4);
            if (v133)
            {
              int v17 = v175;
              printf("%lld %d AVE %s: %s::%s:%d %s | failed to create MV-HEVC format descriptor %p %d %p\n", v134, 46, v135, "AVE_FrameRecv", "SendSPSandPPS", 2436, "err == noErr", v175, v93, a2);
              __uint64_t v134 = sub_4F1D8();
              int v136 = (const char *)sub_44F70(4);
              uint64_t v171 = v93;
              int v172 = a2;
              unsigned int v170 = v175;
              uint64_t v137 = 2436;
LABEL_163:
              uint64_t v169 = v137;
              uint64_t v164 = v136;
LABEL_190:
              syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create MV-HEVC format descriptor %p %d %p", v134, 46, v164, "AVE_FrameRecv", "SendSPSandPPS", v169, "err == noErr", v170, v171, v172);
              goto LABEL_116;
            }
            uint64_t v171 = v93;
            int v172 = a2;
            int v17 = v175;
            unsigned int v170 = v175;
            uint64_t v156 = 2436;
            goto LABEL_189;
          }
          goto LABEL_164;
        }
      }
      else
      {
        uint64_t v125 = *(void *)(v7 + 72);
        if (v125 != 1)
        {
          if (*(_DWORD *)v6 <= 1u)
          {
            uint64_t v126 = sub_1E624(a1, v125, v17, (unsigned int *)v178);
            if (v126)
            {
              uint64_t v20 = v126;
              if (!sub_44EF8(3u, 4)) {
                goto LABEL_116;
              }
              int v127 = sub_44F3C(3u);
              __uint64_t v121 = sub_4F1D8();
              uint64_t v122 = (const char *)sub_44F70(4);
              if (v127)
              {
                uint64_t v123 = v19;
                int v124 = 2472;
                goto LABEL_149;
              }
LABEL_187:
              syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreatevideoFormatDesc failed.");
              goto LABEL_116;
            }
            goto LABEL_164;
          }
          sub_4CFBC(a1 + 158424, a1 + 239320, 4);
          sub_4D010(a1 + 158424, (unsigned char *)(a1 + 239324), 6);
          uint64_t v138 = sub_1F950(a1, *(void *)(v7 + 72), (unsigned __int8 *)v17, v93, (uint64_t)a2);
          if (v138)
          {
            uint64_t v20 = v138;
            if (!sub_44EF8(0x2Eu, 4)) {
              goto LABEL_116;
            }
            int v139 = sub_44F3C(0x2Eu);
            __uint64_t v134 = sub_4F1D8();
            long long v135 = (const char *)sub_44F70(4);
            if (v139)
            {
              int v17 = v175;
              printf("%lld %d AVE %s: %s::%s:%d %s | failed to create MV-HEVC format descriptor %p %d %p\n", v134, 46, v135, "AVE_FrameRecv", "SendSPSandPPS", 2483, "err == noErr", v175, v93, a2);
              __uint64_t v134 = sub_4F1D8();
              int v136 = (const char *)sub_44F70(4);
              uint64_t v171 = v93;
              int v172 = a2;
              unsigned int v170 = v175;
              uint64_t v137 = 2483;
              goto LABEL_163;
            }
            uint64_t v171 = v93;
            int v172 = a2;
            int v17 = v175;
            unsigned int v170 = v175;
            uint64_t v156 = 2483;
LABEL_189:
            uint64_t v169 = v156;
            uint64_t v164 = v135;
            goto LABEL_190;
          }
LABEL_164:
          if (sub_44EF8(0x2Eu, 7))
          {
            int v140 = sub_44F3C(0x2Eu);
            __uint64_t v141 = sub_4F1D8();
            uint64_t v142 = (const char *)sub_44F70(7);
            if (v140)
            {
              printf("%lld %d AVE %s: H264FrameRec: VPS  size %d\n", v141, 46, v142, LODWORD(v178[0]));
              __uint64_t v143 = sub_4F1D8();
              uint64_t v165 = (const char *)sub_44F70(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: VPS  size %d", v143, 46, v165, LODWORD(v178[0]));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: VPS  size %d", v141, 46, v142, LODWORD(v178[0]));
            }
          }
          if (sub_44EF8(0x2Eu, 7))
          {
            int v144 = sub_44F3C(0x2Eu);
            __uint64_t v145 = sub_4F1D8();
            uint64_t v146 = (const char *)sub_44F70(7);
            if (v144)
            {
              printf("%lld %d AVE %s: H264FrameRec: SPS  size %d\n", v145, 46, v146, DWORD1(v178[0]));
              __uint64_t v147 = sub_4F1D8();
              uint64_t v166 = (const char *)sub_44F70(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: SPS  size %d", v147, 46, v166, DWORD1(v178[0]));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: SPS  size %d", v145, 46, v146, DWORD1(v178[0]));
            }
          }
          if (sub_44EF8(0x2Eu, 7))
          {
            int v148 = sub_44F3C(0x2Eu);
            __uint64_t v149 = sub_4F1D8();
            long long v150 = (const char *)sub_44F70(7);
            if (v148)
            {
              printf("%lld %d AVE %s: H264FrameRec: PPS1 size %d\n", v149, 46, v150, DWORD2(v178[0]));
              __uint64_t v151 = sub_4F1D8();
              __uint64_t v167 = (const char *)sub_44F70(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: PPS1 size %d", v151, 46, v167, DWORD2(v178[0]));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: PPS1 size %d", v149, 46, v150, DWORD2(v178[0]));
            }
          }
          if (sub_44EF8(0x2Eu, 7))
          {
            int v152 = sub_44F3C(0x2Eu);
            __uint64_t v153 = sub_4F1D8();
            int v154 = (const char *)sub_44F70(7);
            if (v152)
            {
              printf("%lld %d AVE %s: H264FrameRec: PPS2 size %d\n", v153, 46, v154, HIDWORD(v178[0]));
              __uint64_t v155 = sub_4F1D8();
              int v168 = (const char *)sub_44F70(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: PPS2 size %d", v155, 46, v168, HIDWORD(v178[0]));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: PPS2 size %d", v153, 46, v154, HIDWORD(v178[0]));
            }
          }
LABEL_184:
          sub_5A50(*(void **)(a1 + 71552), a2[3], v17, v93);
          uint64_t v20 = 0;
          goto LABEL_116;
        }
      }
      if (*(void *)(v7 + 8) && *(void *)v7)
      {
        if (sub_44EF8(0x2Eu, 7))
        {
          int v128 = sub_44F3C(0x2Eu);
          __uint64_t v129 = sub_4F1D8();
          __uint64_t v130 = (const char *)sub_44F70(7);
          if (v128)
          {
            printf("%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame on %d bytes (SPS PPS)\n", v129, 46, v130, v93);
            __uint64_t v131 = sub_4F1D8();
            __uint64_t v163 = (const char *)sub_44F70(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame on %d bytes (SPS PPS)", v131, 46, v163, v93);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame on %d bytes (SPS PPS)", v129, 46, v130, v93);
          }
          int v17 = v175;
        }
        (*(void (**)(void, char *, uint64_t, void, void))(v7 + 8))(*(void *)v7, v17, v93, 0, *(unsigned int *)(v6 + 324));
      }
      *(unsigned char *)(a1 + 25784) = 1;
      goto LABEL_184;
    }
    if (sub_44EF8(3u, 4))
    {
      int v58 = sub_44F3C(3u);
      __uint64_t v59 = sub_4F1D8();
      __uint64_t v60 = (const char *)sub_44F70(4);
      if (v58)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreateBuffer failed 2.\n", v59, 3, v60, "SendSPSandPPS", 2327, "m_SPSPPSFinalOutputbUseElementaryStreamOutput != __null");
        __uint64_t v61 = sub_4F1D8();
        __uint64_t v161 = (const char *)sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreateBuffer failed 2.", v61, 3, v161, "SendSPSandPPS", 2327, "m_SPSPPSFinalOutputbUseElementaryStreamOutput != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreateBuffer failed 2.", v59, 3, v60, "SendSPSandPPS", 2327, "m_SPSPPSFinalOutputbUseElementaryStreamOutput != __null");
      }
      uint64_t v20 = 3758097085;
    }
    else
    {
      uint64_t v20 = 3758097085;
    }
  }
  else if (sub_44EF8(3u, 4))
  {
    int v34 = sub_44F3C(3u);
    __uint64_t v35 = sub_4F1D8();
    int v36 = (const char *)sub_44F70(4);
    if (v34)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreateBuffer failed.\n", v35, 3, v36, "SendSPSandPPS", 2322, "FinalOutput != __null");
      __uint64_t v37 = sub_4F1D8();
      int v159 = (const char *)sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreateBuffer failed.", v37, 3, v159, "SendSPSandPPS", 2322, "FinalOutput != __null");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreateBuffer failed.", v35, 3, v36, "SendSPSandPPS", 2322, "FinalOutput != __null");
    }
    int v17 = 0;
    uint64_t v20 = 3758097085;
  }
  else
  {
    int v17 = 0;
    uint64_t v20 = 3758097085;
  }
LABEL_37:
  sub_22D44(a1, v17);
  if (cf) {
    CFRelease(cf);
  }
  return v20;
}

char *sub_2633C(uint64_t a1, size_t size, CMBlockBufferRef *a3)
{
  dataPointerOut = 0;
  if (size)
  {
    uint64_t v4 = (_DWORD *)(a1 + 239348);
    if (*(unsigned char *)(a1 + 68345))
    {
      if (*(void *)(a1 + 51352) != 1 && *v4 != 2)
      {
        uint64_t v5 = (char *)CFAllocatorAllocate(*(CFAllocatorRef *)(a1 + 51304), size, 0);
LABEL_15:
        dataPointerOut = v5;
        goto LABEL_16;
      }
    }
    else if (*(void *)(a1 + 51344) != 1 && *v4 != 2)
    {
      VTEncoderSessionCreateCMBlockBuffer();
      CMBlockBufferGetDataPointer(*a3, 0, 0, 0, &dataPointerOut);
LABEL_16:
      if (sub_44EF8(0x2Eu, 7))
      {
        int v9 = sub_44F3C(0x2Eu);
        __uint64_t v10 = sub_4F1D8();
        __uint64_t v11 = (const char *)sub_44F70(7);
        if (v9)
        {
          printf("%lld %d AVE %s: H264FrameRec: CreateBuffer %p size %ld\n", v10, 46, v11, dataPointerOut, size);
          sub_4F1D8();
          sub_44F70(7);
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec: CreateBuffer %p size %ld");
      }
      return dataPointerOut;
    }
    if (*v4 == 2 && *(void *)(a1 + 51296))
    {
      VTMotionEstimationProcessorSessionCreateMotionVectorPixelBuffer();
      goto LABEL_16;
    }
    uint64_t v5 = (char *)malloc_type_malloc(size, 0x1B9D6B20uLL);
    goto LABEL_15;
  }
  if (sub_44EF8(0x2Eu, 4))
  {
    int v6 = sub_44F3C(0x2Eu);
    __uint64_t v7 = sub_4F1D8();
    unsigned int v8 = (const char *)sub_44F70(4);
    if (v6)
    {
      printf("%lld %d AVE %s: FIG: H264FrameRec: CreateBuffer with size 0\n", v7, 46, v8);
      sub_4F1D8();
      sub_44F70(4);
    }
    syslog(3, "%lld %d AVE %s: FIG: H264FrameRec: CreateBuffer with size 0");
  }
  return dataPointerOut;
}

__uint64_t sub_26560(uint64_t a1, uint64_t a2)
{
  CMBlockBufferRef v232 = 0;
  if (!a2)
  {
    if (sub_44EF8(3u, 4))
    {
      int v16 = sub_44F3C(3u);
      __uint64_t v17 = sub_4F1D8();
      __uint64_t v18 = (const char *)sub_44F70(4);
      if (v16)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: ProcessAndEmitLrmeStats with Frame == NULL.\n", v17, 3, v18, "ProcessAndEmitLrmeStats", 2652, "false");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: ProcessAndEmitLrmeStats with Frame == NULL.");
    }
    goto LABEL_25;
  }
  if (*(_DWORD *)(a1 + 239348) != 2)
  {
    if (sub_44EF8(3u, 4))
    {
      int v19 = sub_44F3C(3u);
      __uint64_t v20 = sub_4F1D8();
      int v21 = (const char *)sub_44F70(4);
      if (v19)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec WARNING: ProcessAndEmitLrmeStats called with AVE_ClientType_LRME == false.\n", v20, 3, v21, "ProcessAndEmitLrmeStats", 2654, "false");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec WARNING: ProcessAndEmitLrmeStats called with AVE_ClientType_LRME == false.");
    }
LABEL_25:
    sub_20204(a1, a2, 0);
    return 0;
  }
  __uint64_t v4 = 3758097084;
  uint64_t v5 = (_DWORD *)(a2 + 23468);
  if (*(_DWORD *)(a2 + 23468) == 3)
  {
    int v228 = 0;
    uint64_t v230 = (uint64_t *)(a1 + 51272);
    uint64_t v6 = 0;
    int v231 = 0;
    __uint64_t v7 = 0;
    int v8 = -536870212;
LABEL_5:
    uint64_t v9 = v6;
    sub_5A50(*(void **)(a1 + 71552), *(_DWORD *)(a2 + 12), v7, v6);
    __uint64_t v10 = v228;
    if (sub_44EF8(0x2Eu, 7))
    {
      int v11 = sub_44F3C(0x2Eu);
      __uint64_t v12 = sub_4F1D8();
      __uint64_t v13 = (const char *)sub_44F70(7);
      int v14 = *(_DWORD *)(a2 + 160);
      if (v11)
      {
        printf("%lld %d AVE %s: ARK H264FrameRec:ProcessAndEmitLrmeStats %d\n", v12, 46, v13, v14);
        __uint64_t v15 = sub_4F1D8();
        int v204 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: ARK H264FrameRec:ProcessAndEmitLrmeStats %d", v15, 46, v204, *(_DWORD *)(a2 + 160));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: ARK H264FrameRec:ProcessAndEmitLrmeStats %d", v12, 46, v13, v14);
      }
    }
    if (*v5 == 3) {
      goto LABEL_34;
    }
    __uint64_t v40 = (void (*)(uint64_t, char *, uint64_t, void *, void))v230[1];
    if (v40)
    {
      uint64_t v41 = *v230;
      if (*v230)
      {
        v233[0] = *(unsigned int *)(a2 + 160);
        v233[1] = -1;
        uint64_t v42 = *(int *)(a2 + 2304);
        v233[2] = *(void *)(a2 + 2296);
        v233[3] = v42;
        v40(v41, v228, v9, v233, *(unsigned int *)(a1 + 68256));
LABEL_34:
        __uint64_t v4 = 0;
LABEL_35:
        int v36 = v231;
        goto LABEL_36;
      }
    }
    if (!sub_44EF8(3u, 4)) {
      goto LABEL_35;
    }
    int v43 = sub_44F3C(3u);
    __uint64_t v44 = sub_4F1D8();
    __uint64_t v45 = (const char *)sub_44F70(4);
    int v36 = v231;
    if (v43)
    {
      printf("%lld %d AVE %s: %s:%d %s | OF: Session callbacks are not set properly, output will be dropped\n", v44, 3, v45, "ProcessAndEmitLrmeStats", 3137, "false");
      __uint64_t v46 = sub_4F1D8();
      int v206 = (const char *)sub_44F70(4);
      int v36 = v231;
      __uint64_t v4 = 3758097084;
      syslog(3, "%lld %d AVE %s: %s:%d %s | OF: Session callbacks are not set properly, output will be dropped", v46, 3, v206, "ProcessAndEmitLrmeStats", 3137, "false");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | OF: Session callbacks are not set properly, output will be dropped", v44, 3, v45, "ProcessAndEmitLrmeStats", 3137, "false");
    }
LABEL_36:
    sub_20204(a1, a2, 0);
    if (v10) {
      sub_22D44(a1, v10);
    }
    goto LABEL_57;
  }
  __uint64_t v227 = (_DWORD *)(a2 + 23468);
  __uint64_t v22 = (char *)(a1 + 67834);
  uint64_t v23 = a1 + 4 * *(int *)(a2 + 916);
  __uint64_t v24 = (IOSurfaceID *)(v23 + 26392);
  int v25 = (IOSurfaceID *)(v23 + 26432);
  if (*(unsigned char *)(a1 + 67845)) {
    __uint64_t v26 = v25;
  }
  else {
    __uint64_t v26 = v24;
  }
  if (!*v26)
  {
    if (sub_44EF8(3u, 4))
    {
      uint64_t v32 = sub_44F3C(3u);
      __uint64_t v38 = sub_4F1D8();
      __uint64_t v39 = (const char *)sub_44F70(4);
      if (!v32)
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: ProcessAndEmitLrmeStats with statsMapCSID == NULL.");
        goto LABEL_55;
      }
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: ProcessAndEmitLrmeStats with statsMapCSID == NULL.\n", v38, 3, v39, "ProcessAndEmitLrmeStats", 2661, "statsMapCSID != 0");
      sub_4F1D8();
      sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: ProcessAndEmitLrmeStats with statsMapCSID == NULL.");
    }
LABEL_44:
    int v36 = 0;
    goto LABEL_45;
  }
  char v27 = *v22;
  int v28 = *(_DWORD *)(a1 + 51376);
  int v29 = *(_DWORD *)(a1 + 51380);
  uint64_t v230 = (uint64_t *)(a1 + 51272);
  __uint64_t v30 = IOSurfaceLookup(*v26);
  if (!v30)
  {
    if (sub_44EF8(3u, 4))
    {
      uint64_t v32 = sub_44F3C(3u);
      __uint64_t v47 = sub_4F1D8();
      __uint64_t v48 = (const char *)sub_44F70(4);
      if (v32)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: statSurfaceRef IOSurfaceLookup failed.\n", v47, 3, v48, "ProcessAndEmitLrmeStats", 2664, "LrmeStatSurfaceRef != __null");
        sub_4F1D8();
        sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: statSurfaceRef IOSurfaceLookup failed.");
        goto LABEL_44;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: statSurfaceRef IOSurfaceLookup failed.");
LABEL_55:
      int v36 = 0;
      goto LABEL_56;
    }
    goto LABEL_44;
  }
  int v231 = v30;
  uint64_t v31 = IOSurfaceLock(v30, 0, 0);
  if (v31)
  {
    uint64_t v32 = v31;
    if (sub_44EF8(3u, 4))
    {
      int v33 = sub_44F3C(3u);
      __uint64_t v34 = sub_4F1D8();
      __uint64_t v35 = (const char *)sub_44F70(4);
      int v36 = v231;
      if (v33)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: IOSurfaceLock statSurfaceRef failed.\n", v34, 3, v35, "ProcessAndEmitLrmeStats", 2667, "lockErr == 0");
        __uint64_t v37 = sub_4F1D8();
        int v205 = (const char *)sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: IOSurfaceLock statSurfaceRef failed.", v37, 3, v205, "ProcessAndEmitLrmeStats", 2667, "lockErr == 0");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: IOSurfaceLock statSurfaceRef failed.", v34, 3, v35, "ProcessAndEmitLrmeStats", 2667, "lockErr == 0");
      }
      LODWORD(v4) = v32;
      goto LABEL_56;
    }
    LODWORD(v4) = v32;
    goto LABEL_49;
  }
  if (*(unsigned char *)(a1 + 67845))
  {
    __uint64_t v50 = v231;
    char v49 = *(unsigned char *)(a1 + 67845);
    size_t v51 = (IOSurfaceGetAllocSize(v231) >> 1) * ((v49 & 1) == 0);
  }
  else
  {
    LODWORD(v51) = 0;
    __uint64_t v50 = v231;
  }
  BaseAddress = IOSurfaceGetBaseAddress(v50);
  if (BaseAddress)
  {
    int v54 = v28 << (2 * v27);
    int v229 = v29 << (2 * v27);
    unsigned int v222 = v54 + 15;
    unsigned int v224 = v54 + 31;
    unsigned int v226 = (v54 + 15) >> 4;
    unsigned int v55 = (v229 + 15) >> 4;
    uint64_t v56 = (uint64_t)BaseAddress + v51;
    unsigned int AllocSize = IOSurfaceGetAllocSize(v50);
    if (*(int *)(a1 + 239352) > 7)
    {
      __uint64_t v4 = 3758097084;
      if (!*(unsigned char *)(a1 + 67845))
      {
        switch(*(_DWORD *)(a1 + 69656))
        {
          case 0:
            unsigned int v220 = v229 + 15;
            BOOL v225 = *v22 == 0;
            uint64_t v221 = 4 * v226 * v55;
            int v127 = sub_2633C(a1, v221, &v232);
            int v128 = (char *)CVPixelBufferGetBaseAddress((CVPixelBufferRef)v127);
            if (!v128)
            {
              __uint64_t v10 = v127;
              if (sub_44EF8(0x14u, 4))
              {
                int v178 = sub_44F3C(0x14u);
                __uint64_t v179 = sub_4F1D8();
                __uint64_t v180 = (const char *)sub_44F70(4);
                if (v178)
                {
                  printf("%lld %d AVE %s: %s:%d %s | OF: %s: MvStatsBuffer is NULL\n", v179, 20, v180, "ProcessAndEmitLrmeStats", 2999, "MvStatsBuffer != __null", "ProcessAndEmitLrmeStats");
                  __uint64_t v179 = sub_4F1D8();
                  sub_44F70(4);
                }
                syslog(3, "%lld %d AVE %s: %s:%d %s | OF: %s: MvStatsBuffer is NULL", v179);
              }
              goto LABEL_243;
            }
            __uint64_t v129 = v128;
            int v228 = v127;
            size_t v130 = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)v127) >> 2;
            if (sub_44EF8(0x14u, 7))
            {
              int v215 = sub_44F3C(0x14u);
              __uint64_t v217 = sub_4F1D8();
              __uint64_t v131 = (const char *)sub_44F70(7);
              if (v215)
              {
                printf("%lld %d AVE %s: OF: %s: Copy LRME Best MV data: %d x %d MBs, FinalOutputSize %lu, iMBsPerRowForOutput %d\n\n", v217, 20, v131, "ProcessAndEmitLrmeStats", v226, v55, v221, v130);
                __uint64_t v217 = sub_4F1D8();
                sub_44F70(7);
              }
              syslog(3, "%lld %d AVE %s: OF: %s: Copy LRME Best MV data: %d x %d MBs, FinalOutputSize %lu, iMBsPerRowForOutput %d\n", v217, 20);
            }
            if (*(int *)(a1 + 239352) >= 22)
            {
              sub_28060(v56, v129, v221, v226, v55, v130, *v22);
              uint64_t v6 = 4 * v226 * v55;
              int v8 = 0;
              goto LABEL_135;
            }
            bzero(v129, v221);
            if (v220 >= 0x10)
            {
              int v184 = 0;
              uint64_t v183 = 0;
              uint64_t v182 = 0;
              char v185 = 2 * v225;
              unsigned int v186 = (v55 + 3) >> 2;
              unsigned int v187 = v55 * v130;
              uint64_t v181 = 0;
              if (v226 <= 1) {
                int v188 = 1;
              }
              else {
                int v188 = v226;
              }
              if (v186 <= 1) {
                unsigned int v186 = 1;
              }
              do
              {
                if (v222 >= 0x10)
                {
                  for (int i = 0; i != v188; ++i)
                  {
                    uint64_t v190 = 0;
                    unsigned int v191 = i + 4 * v130 * v184;
                    uint64_t v192 = v56;
                    do
                    {
                      for (uint64_t j = 0; j != 7; ++j)
                      {
                        if (*(__int16 *)(v192 + 2 * j) < 0) {
                          break;
                        }
                      }
                      __uint64_t v194 = (unsigned __int16 *)(v56 + 16 * v190 + 2 * j);
                      int v195 = (__int16)*v194;
                      if (v195 < 0 && v191 < v187)
                      {
                        _S0 = (float)((char)v195 << v185);
                        __asm { FCVT            H0, S0 }
                        int v197 = &v129[4 * v191];
                        *(_WORD *)int v197 = LOWORD(_S0);
                        _S1 = (float)(*v194 << 17 >> 25 << v185);
                        __asm { FCVT            H1, S1 }
                        *((_WORD *)v197 + 1) = LOWORD(_S1);
                        uint64_t v182 = (v182 + 1);
                        __asm { FCMP            H0, #0 }
                        if (_ZF) {
                          int v199 = 0;
                        }
                        else {
                          int v199 = 1;
                        }
                        __asm { FCMP            H1, #0 }
                        if (!_ZF) {
                          int v199 = 1;
                        }
                        uint64_t v183 = (v183 + v199);
                      }
                      v191 += v130;
                      ++v190;
                      v192 += 16;
                    }
                    while (v190 != 4);
                    v56 += 64;
                  }
                  uint64_t v181 = (4 * v188 + v181);
                }
                ++v184;
              }
              while (v184 != v186);
            }
            else
            {
              uint64_t v181 = 0;
              uint64_t v182 = 0;
              uint64_t v183 = 0;
            }
            if (sub_44EF8(0x14u, 7))
            {
              int v201 = sub_44F3C(0x14u);
              __uint64_t v202 = sub_4F1D8();
              uint64_t v203 = (const char *)sub_44F70(7);
              if (v201)
              {
                printf("%lld %d AVE %s: OF: %s: total_mbs = %d, total_valid = %d, total_nonzero = %d\n\n", v202, 20, v203, "ProcessAndEmitLrmeStats", v181, v182, v183);
                __uint64_t v202 = sub_4F1D8();
                uint64_t v210 = v182;
                uint64_t v211 = v183;
                uint64_t v209 = v181;
                int v208 = sub_44F70(7);
              }
              else
              {
                uint64_t v210 = v182;
                uint64_t v211 = v183;
                uint64_t v209 = v181;
                int v208 = (void *)v203;
              }
              syslog(3, "%lld %d AVE %s: OF: %s: total_mbs = %d, total_valid = %d, total_nonzero = %d\n", v202, 20, v208, "ProcessAndEmitLrmeStats", v209, v210, v211);
            }
            goto LABEL_174;
          case 1:
            if (!sub_44EF8(0x14u, 4))
            {
LABEL_189:
              LODWORD(v4) = 0;
              uint64_t v32 = 4294954394;
              goto LABEL_49;
            }
            int v174 = sub_44F3C(0x14u);
            __uint64_t v142 = sub_4F1D8();
            __uint64_t v143 = (const char *)sub_44F70(4);
            int v36 = v231;
            if (v174)
            {
              int v144 = 3054;
LABEL_188:
              printf("%lld %d AVE %s: %s:%d %s | OF: LRME_OUTPUT_ALL_MV_RESULTS is not supported in video toolbox path\n", v142, 20, v143, "ProcessAndEmitLrmeStats", v144, "bVTOF == false");
              sub_4F1D8();
              sub_44F70(4);
            }
LABEL_207:
            syslog(3, "%lld %d AVE %s: %s:%d %s | OF: LRME_OUTPUT_ALL_MV_RESULTS is not supported in video toolbox path");
LABEL_208:
            LODWORD(v4) = 0;
            uint64_t v32 = 4294954394;
            break;
          case 2:
            uint64_t v5 = v227;
            if (sub_44EF8(0x2Eu, 5))
            {
              int v165 = sub_44F3C(0x2Eu);
              __uint64_t v166 = sub_4F1D8();
              __uint64_t v167 = (const char *)sub_44F70(5);
              if (v165)
              {
                printf("%lld %d AVE %s: LRME_OUTPUT_STATISTICS_ONLY is not supported\n\n", v166, 46, v167);
                sub_4F1D8();
                sub_44F70(5);
                uint64_t v5 = v227;
              }
              syslog(3, "%lld %d AVE %s: LRME_OUTPUT_STATISTICS_ONLY is not supported\n");
            }
            goto LABEL_210;
          case 3:
            uint64_t v5 = v227;
            if (sub_44EF8(0x2Eu, 5))
            {
              int v175 = sub_44F3C(0x2Eu);
              __uint64_t v176 = sub_4F1D8();
              __uint64_t v177 = (const char *)sub_44F70(5);
              if (v175)
              {
                printf("%lld %d AVE %s: LRME_OUTPUT_BEST_MV_AND_STATISTICS is not supported\n\n", v176, 46, v177);
                sub_4F1D8();
                sub_44F70(5);
                uint64_t v5 = v227;
              }
              syslog(3, "%lld %d AVE %s: LRME_OUTPUT_BEST_MV_AND_STATISTICS is not supported\n");
            }
            goto LABEL_210;
          case 4:
            uint64_t v5 = v227;
            if (sub_44EF8(0x2Eu, 5))
            {
              int v168 = sub_44F3C(0x2Eu);
              __uint64_t v169 = sub_4F1D8();
              unsigned int v170 = (const char *)sub_44F70(5);
              if (v168)
              {
                printf("%lld %d AVE %s: LRME_OUTPUT_ALL_MV_AND_STATISTICS is not supported\n\n", v169, 46, v170);
                sub_4F1D8();
                sub_44F70(5);
                uint64_t v5 = v227;
              }
              syslog(3, "%lld %d AVE %s: LRME_OUTPUT_ALL_MV_AND_STATISTICS is not supported\n");
            }
LABEL_210:
            int v8 = 0;
            uint64_t v6 = 0;
            int v228 = 0;
            __uint64_t v7 = 0;
            goto LABEL_5;
          default:
LABEL_134:
            int v8 = 0;
            uint64_t v6 = 0;
            int v228 = 0;
LABEL_135:
            __uint64_t v7 = 0;
            uint64_t v5 = v227;
            goto LABEL_5;
        }
        goto LABEL_56;
      }
      unsigned int v219 = v229 + 15;
      uint64_t v118 = 4 * v226 * v55;
      int v214 = *v22;
      if (*(unsigned char *)(a1 + 69660)) {
        uint64_t v119 = 2 * v226 * v55;
      }
      else {
        uint64_t v119 = 0;
      }
      size_t v120 = v119 + v118;
      __uint64_t v10 = sub_2633C(a1, v119 + v118, &v232);
      __uint64_t v121 = (char *)CVPixelBufferGetBaseAddress((CVPixelBufferRef)v10);
      if (v121)
      {
        uint64_t v122 = v121;
        uint64_t v221 = v120;
        bzero(v121, v120);
        size_t v123 = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)v10) >> 2;
        int v228 = v10;
        if (*(unsigned char *)(a1 + 69660)) {
          int v124 = &v10[v118];
        }
        else {
          int v124 = 0;
        }
        if (sub_44EF8(0x14u, 7))
        {
          int v125 = sub_44F3C(0x14u);
          __uint64_t v212 = sub_4F1D8();
          uint64_t v126 = (const char *)sub_44F70(7);
          if (v125)
          {
            printf("%lld %d AVE %s: Copy LRME Best MV data: %d x %d MBs, FinalOutputSize %lu, iMBsPerRowForOutput %d\n\n", v212, 20, v126, v226, v55, v221, v123);
            __uint64_t v212 = sub_4F1D8();
            sub_44F70(7);
          }
          syslog(3, "%lld %d AVE %s: Copy LRME Best MV data: %d x %d MBs, FinalOutputSize %lu, iMBsPerRowForOutput %d\n", v212);
        }
        if (v219 >= 0x10)
        {
          int v149 = 0;
          uint64_t v150 = 0;
          int v148 = 0;
          LODWORD(v151) = (v55 + 3) >> 2;
          float v152 = 4.0;
          if (!v214) {
            float v152 = 1.0;
          }
          if (v226 <= 1) {
            int v153 = 1;
          }
          else {
            int v153 = v226;
          }
          if (v151 <= 1) {
            uint64_t v151 = 1;
          }
          else {
            uint64_t v151 = v151;
          }
          do
          {
            if (v222 >= 0x10)
            {
              int v154 = 0;
              __uint64_t v155 = (_DWORD *)(v56 + (((v224 & 0xFFFFFFE0) + 63) & 0x1FFFFFFC0) * v150);
              int v156 = 4 * v150 * v123;
              do
              {
                int v157 = 0;
                int v158 = v156;
                do
                {
                  if (v149 + v157 < v55)
                  {
                    _S1 = (float)((int)(*v155 << 21) >> 21) / v152;
                    __asm { FCVT            H1, S1 }
                    __uint64_t v160 = &v122[4 * v158];
                    *(_WORD *)__uint64_t v160 = LOWORD(_S1);
                    _S1 = (float)((int)(*v155 << 11) >> 22) / v152;
                    __asm { FCVT            H1, S1 }
                    *((_WORD *)v160 + 1) = LOWORD(_S1);
                    if (*(unsigned char *)(a1 + 69660)) {
                      *(_WORD *)&v124[2 * v158] = *v155 >> 21;
                    }
                    if ((*v155 & 0x1FFFFF) != 0) {
                      ++v148;
                    }
                  }
                  ++v155;
                  v158 += v123;
                  ++v157;
                }
                while (v157 != 4);
                ++v154;
                ++v156;
              }
              while (v154 != v153);
            }
            ++v150;
            v149 += 4;
          }
          while (v150 != v151);
        }
        else
        {
          int v148 = 0;
        }
        if (sub_44EF8(0x14u, 7))
        {
          int v162 = sub_44F3C(0x14u);
          __uint64_t v163 = sub_4F1D8();
          uint64_t v164 = (const char *)sub_44F70(7);
          if (v162)
          {
            printf("%lld %d AVE %s: OF: %s: total_mbs = %d, total_nonzero = %d\n\n", v163, 20, v164, "ProcessAndEmitLrmeStats", v226 * v55, v148);
            sub_4F1D8();
            sub_44F70(7);
          }
          syslog(3, "%lld %d AVE %s: OF: %s: total_mbs = %d, total_nonzero = %d\n");
        }
LABEL_174:
        int v8 = 0;
        __uint64_t v7 = 0;
LABEL_175:
        uint64_t v5 = v227;
        uint64_t v6 = v221;
        goto LABEL_5;
      }
      if (!sub_44EF8(0x14u, 4))
      {
LABEL_243:
        int v8 = 0;
        goto LABEL_35;
      }
      int v132 = sub_44F3C(0x14u);
      __uint64_t v133 = sub_4F1D8();
      __uint64_t v134 = (const char *)sub_44F70(4);
      int v36 = v231;
      if (v132)
      {
        printf("%lld %d AVE %s: %s:%d %s | OF: %s: MvStatsBuffer is NULL\n", v133, 20, v134, "ProcessAndEmitLrmeStats", 2935, "MvStatsBuffer != __null", "ProcessAndEmitLrmeStats");
        __uint64_t v133 = sub_4F1D8();
        unint64_t v207 = sub_44F70(4);
      }
      else
      {
        unint64_t v207 = (void *)v134;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | OF: %s: MvStatsBuffer is NULL", v133, 20, v207, "ProcessAndEmitLrmeStats", 2935, "MvStatsBuffer != __null", "ProcessAndEmitLrmeStats");
    }
    else
    {
      __uint64_t v4 = 3758097084;
      switch(*(_DWORD *)(a1 + 69656))
      {
        case 0:
          unsigned int v216 = AllocSize;
          int v58 = sub_2633C(a1, 4 * v226 * v55, &v232);
          __uint64_t v59 = (char *)CVPixelBufferGetBaseAddress((CVPixelBufferRef)v58);
          if (v59)
          {
            __uint64_t v7 = v59;
            unsigned int v223 = v229 + 31;
            uint64_t v221 = 4 * v226 * v55;
            bzero(v59, v221);
            int v228 = v58;
            size_t BytesPerRow = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)v58);
            if (v223 >= 0x20)
            {
              int v61 = 0;
              int v62 = 0;
              int v63 = 0;
              unsigned int v64 = v224 >> 5;
              size_t v213 = BytesPerRow >> 3;
              unsigned int v65 = (96 * (v224 >> 5) + 63) & 0xFFFFFFC0;
              unsigned int v66 = v226 * v55 - 1;
              uint64_t v67 = (BytesPerRow >> 3) & 0x7FFFFFFF;
              char v68 = 2 * (*v22 == 0);
              int v69 = 2 * (v224 >> 5);
              int v70 = 2 * v67;
              if (v224 >> 5 <= 1) {
                int v71 = 1;
              }
              else {
                int v71 = v224 >> 5;
              }
              if (((v223 >> 5) + 1) >> 1 <= 1) {
                unsigned int v72 = 1;
              }
              else {
                unsigned int v72 = ((v223 >> 5) + 1) >> 1;
              }
              int v73 = 2 * v71;
              int v74 = 8 * v67;
              int v75 = 8 * v64;
              int v218 = v70;
              unsigned int v76 = v226;
              do
              {
                if (v224 >= 0x20)
                {
                  unsigned int v77 = 0;
                  unsigned int v78 = v63 * v65;
                  do
                  {
                    if (v61 + v77 <= v66)
                    {
                      int v79 = (unsigned __int16 *)(v56 + v78);
                      if (v77 < v226)
                      {
                        _S0 = (float)(*v79 << 25 >> 25 << v68);
                        __asm { FCVT            H0, S0 }
                        int v85 = &v7[4 * v62 + 4 * v77];
                        *(_WORD *)int v85 = LOWORD(_S0);
                        _S0 = (float)(*v79 << 19 >> 26 << v68);
                        __asm { FCVT            H0, S0 }
                        *((_WORD *)v85 + 1) = LOWORD(_S0);
                      }
                      if (v77 + 1 < v226)
                      {
                        _S0 = (float)(v79[9] << 25 >> 25 << v68);
                        __asm { FCVT            H0, S0 }
                        int v88 = &v7[4 * v62 + 4 + 4 * v77];
                        *(_WORD *)int v88 = LOWORD(_S0);
                        _S0 = (float)(v79[9] << 19 >> 26 << v68);
                        __asm { FCVT            H0, S0 }
                        *((_WORD *)v88 + 1) = LOWORD(_S0);
                      }
                      if (v69 + v77 <= v66 && ((4 * v63) | 1u) < v55)
                      {
                        if (v77 < v226)
                        {
                          _S0 = (float)(v79[18] << 25 >> 25 << v68);
                          __asm { FCVT            H0, S0 }
                          int v91 = &v7[4 * v70 + 4 * v77];
                          *(_WORD *)int v91 = LOWORD(_S0);
                          _S0 = (float)(v79[18] << 19 >> 26 << v68);
                          __asm { FCVT            H0, S0 }
                          *((_WORD *)v91 + 1) = LOWORD(_S0);
                        }
                        if (v77 + 1 < v226)
                        {
                          _S0 = (float)(v79[27] << 25 >> 25 << v68);
                          __asm { FCVT            H0, S0 }
                          int v94 = &v7[4 * v70 + 4 + 4 * v77];
                          *(_WORD *)int v94 = LOWORD(_S0);
                          _S0 = (float)(v79[27] << 19 >> 26 << v68);
                          __asm { FCVT            H0, S0 }
                          *((_WORD *)v94 + 1) = LOWORD(_S0);
                        }
                      }
                    }
                    v78 += 96;
                    v77 += 2;
                  }
                  while (v73 != v77);
                }
                ++v63;
                v70 += v74;
                v62 += v74;
                v69 += v75;
                v61 += v75;
              }
              while (v63 != v72);
              if (v223 >= 0x40)
              {
                int v96 = 0;
                int v97 = 4 * v213;
                int v98 = 6 * v64;
                int v99 = 4 * v64;
                int v100 = v218 + 4 * v213;
                do
                {
                  if (v224 >= 0x20)
                  {
                    unsigned int v101 = 0;
                    unsigned int v102 = v96 * v65;
                    do
                    {
                      if (v99 + v101 <= v66)
                      {
                        int v103 = (unsigned __int16 *)(v56 + (v216 >> 1) + v102);
                        if (v101 < v76)
                        {
                          _S0 = (float)(*v103 << 25 >> 25 << v68);
                          __asm { FCVT            H0, S0 }
                          __uint64_t v105 = &v7[4 * v97 + 4 * v101];
                          *(_WORD *)__uint64_t v105 = LOWORD(_S0);
                          _S0 = (float)(*v103 << 19 >> 26 << v68);
                          unsigned int v76 = v226;
                          __asm { FCVT            H0, S0 }
                          *((_WORD *)v105 + 1) = LOWORD(_S0);
                        }
                        if (v101 + 1 < v76)
                        {
                          _S0 = (float)(v103[9] << 25 >> 25 << v68);
                          __asm { FCVT            H0, S0 }
                          size_t v108 = &v7[4 * v97 + 4 + 4 * v101];
                          *(_WORD *)size_t v108 = LOWORD(_S0);
                          _S0 = (float)(v103[9] << 19 >> 26 << v68);
                          __asm { FCVT            H0, S0 }
                          *((_WORD *)v108 + 1) = LOWORD(_S0);
                        }
                        unsigned int v76 = v226;
                        if (v98 + v101 <= v66 && ((4 * v96) | 3u) < v55)
                        {
                          if (v101 < v226)
                          {
                            _S0 = (float)(v103[18] << 25 >> 25 << v68);
                            __asm { FCVT            H0, S0 }
                            int v111 = &v7[4 * v100 + 4 * v101];
                            *(_WORD *)int v111 = LOWORD(_S0);
                            _S0 = (float)(v103[18] << 19 >> 26 << v68);
                            __asm { FCVT            H0, S0 }
                            *((_WORD *)v111 + 1) = LOWORD(_S0);
                            unsigned int v76 = v226;
                          }
                          if (v101 + 1 < v76)
                          {
                            _S0 = (float)(v103[27] << 25 >> 25 << v68);
                            __asm { FCVT            H0, S0 }
                            __uint64_t v114 = &v7[4 * v100 + 4 + 4 * v101];
                            *(_WORD *)__uint64_t v114 = LOWORD(_S0);
                            _S0 = (float)(v103[27] << 19 >> 26 << v68);
                            __asm { FCVT            H0, S0 }
                            *((_WORD *)v114 + 1) = LOWORD(_S0);
                          }
                        }
                      }
                      v102 += 96;
                      v101 += 2;
                    }
                    while (v73 != v101);
                  }
                  ++v96;
                  v100 += v74;
                  v97 += v74;
                  v98 += v75;
                  v99 += v75;
                }
                while (v96 != v223 >> 6);
              }
            }
            int v8 = 0;
            goto LABEL_175;
          }
          __uint64_t v10 = v58;
          if (!sub_44EF8(3u, 4)) {
            goto LABEL_243;
          }
          int v171 = sub_44F3C(3u);
          __uint64_t v172 = sub_4F1D8();
          __uint64_t v173 = (const char *)sub_44F70(4);
          int v36 = v231;
          if (v171)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: MvStatsBuffer = NULL.\n", v172, 3, v173, "ProcessAndEmitLrmeStats", 2721, "MvStatsBuffer != __null");
            sub_4F1D8();
            sub_44F70(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: MvStatsBuffer = NULL.");
          break;
        case 1:
          int v36 = v231;
          if (!sub_44EF8(0x14u, 4)) {
            goto LABEL_208;
          }
          int v141 = sub_44F3C(0x14u);
          __uint64_t v142 = sub_4F1D8();
          __uint64_t v143 = (const char *)sub_44F70(4);
          if (!v141) {
            goto LABEL_207;
          }
          int v144 = 2836;
          goto LABEL_188;
        case 2:
          if (!sub_44EF8(0x14u, 4)) {
            goto LABEL_189;
          }
          int v135 = sub_44F3C(0x14u);
          __uint64_t v136 = sub_4F1D8();
          uint64_t v137 = (const char *)sub_44F70(4);
          int v36 = v231;
          if (v135)
          {
            printf("%lld %d AVE %s: %s:%d %s | OF: LRME_OUTPUT_STATISTICS_ONLY is not supported in video toolbox path\n", v136, 20, v137, "ProcessAndEmitLrmeStats", 2878, "bVTOF == false");
            sub_4F1D8();
            sub_44F70(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | OF: LRME_OUTPUT_STATISTICS_ONLY is not supported in video toolbox path");
          goto LABEL_208;
        case 3:
          uint64_t v5 = v227;
          if (sub_44EF8(0x2Eu, 5))
          {
            int v145 = sub_44F3C(0x2Eu);
            __uint64_t v146 = sub_4F1D8();
            __uint64_t v147 = (const char *)sub_44F70(5);
            if (v145)
            {
              printf("%lld %d AVE %s: LRME_OUTPUT_BEST_MV_AND_STATISTICS is not supported yet \n\n", v146, 46, v147);
              sub_4F1D8();
              sub_44F70(5);
              uint64_t v5 = v227;
            }
            syslog(3, "%lld %d AVE %s: LRME_OUTPUT_BEST_MV_AND_STATISTICS is not supported yet \n");
          }
          goto LABEL_210;
        case 4:
          uint64_t v5 = v227;
          if (sub_44EF8(0x2Eu, 5))
          {
            int v138 = sub_44F3C(0x2Eu);
            __uint64_t v139 = sub_4F1D8();
            int v140 = (const char *)sub_44F70(5);
            if (v138)
            {
              printf("%lld %d AVE %s: LRME_OUTPUT_ALL_MV_AND_STATISTICS is not supported yet \n\n", v139, 46, v140);
              sub_4F1D8();
              sub_44F70(5);
              uint64_t v5 = v227;
            }
            syslog(3, "%lld %d AVE %s: LRME_OUTPUT_ALL_MV_AND_STATISTICS is not supported yet \n");
          }
          goto LABEL_210;
        default:
          goto LABEL_134;
      }
    }
    int v8 = 0;
    goto LABEL_36;
  }
  if (!sub_44EF8(3u, 4))
  {
    LODWORD(v4) = 0;
    uint64_t v32 = 0;
LABEL_49:
    int v36 = v231;
    goto LABEL_56;
  }
  uint64_t v32 = sub_44F3C(3u);
  __uint64_t v4 = sub_4F1D8();
  __uint64_t v116 = (const char *)sub_44F70(4);
  int v36 = v231;
  if (!v32)
  {
    syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: lrmeStat = NULL.", v4, 3, v116, "ProcessAndEmitLrmeStats", 2676, "lrmeStat != __null");
    LODWORD(v4) = 0;
    goto LABEL_56;
  }
  printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: lrmeStat = NULL.\n", v4, 3, v116, "ProcessAndEmitLrmeStats", 2676, "lrmeStat != __null");
  __uint64_t v4 = sub_4F1D8();
  uint64_t v117 = (const char *)sub_44F70(4);
  syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: lrmeStat = NULL.", v4, 3, v117, "ProcessAndEmitLrmeStats", 2676, "lrmeStat != __null");
  LODWORD(v4) = 0;
LABEL_45:
  uint64_t v32 = 0;
LABEL_56:
  int v8 = v4;
  sub_20204(a1, a2, 0);
  __uint64_t v4 = v32;
LABEL_57:
  if (v36)
  {
    if (!v8) {
      IOSurfaceUnlock(v36, 0, 0);
    }
    CFRelease(v36);
  }
  return v4;
}

void sub_28060(uint64_t a1, char *a2, size_t a3, int a4, int a5, int a6, int a7)
{
  bzero(a2, a3);
  if (a5)
  {
    int v13 = 0;
    int v14 = 0;
    int v15 = 0;
    int v16 = 0;
    if (a7) {
      char v17 = 0;
    }
    else {
      char v17 = 2;
    }
    do
    {
      if (a4)
      {
        int v18 = 0;
        do
        {
          uint64_t v19 = 0;
          unsigned int v20 = v18 + 4 * a6 * v13;
          uint64_t v21 = a1;
          do
          {
            uint64_t v22 = 0;
            uint64_t v23 = a1 + 20 * v19;
            do
            {
              if (*(__int16 *)(v21 + 2 * v22) < 0) {
                break;
              }
              ++v22;
            }
            while (v22 != 7);
            int v24 = *(__int16 *)(v23 + 2 * v22);
            if (v24 < 0 && v20 < a6 * a5)
            {
              _S0 = (float)((char)v24 << v17);
              __asm { FCVT            H0, S0 }
              __uint64_t v30 = &a2[4 * v20];
              *(_WORD *)__uint64_t v30 = LOWORD(_S0);
              _S1 = (float)(*(unsigned __int16 *)(v23 + 2 * v22) << 17 >> 25 << v17);
              __asm { FCVT            H1, S1 }
              *((_WORD *)v30 + 1) = LOWORD(_S1);
              ++v15;
              __asm { FCMP            H0, #0 }
              if (_ZF) {
                int v32 = 0;
              }
              else {
                int v32 = 1;
              }
              __asm { FCMP            H1, #0 }
              if (!_ZF) {
                int v32 = 1;
              }
              v14 += v32;
            }
            v20 += a6;
            ++v19;
            v21 += 20;
          }
          while (v19 != 4);
          a1 += 80;
          ++v18;
        }
        while (v18 != a4);
        v16 += 4 * a4;
      }
      ++v13;
    }
    while (v13 != (a5 + 3) >> 2);
  }
  else
  {
    int v16 = 0;
    int v15 = 0;
    int v14 = 0;
  }
  if (sub_44EF8(0x14u, 7))
  {
    int v34 = sub_44F3C(0x14u);
    __uint64_t v35 = sub_4F1D8();
    int v36 = (const char *)sub_44F70(7);
    if (v34)
    {
      printf("%lld %d AVE %s: OF: %s: total_mbs = %d, total_valid = %d, total_nonzero = %d\n\n", v35, 20, v36, "AVE_LRME_FillFSResultsBestMV", v16, v15, v14);
      __uint64_t v35 = sub_4F1D8();
      sub_44F70(7);
    }
    syslog(3, "%lld %d AVE %s: OF: %s: total_mbs = %d, total_valid = %d, total_nonzero = %d\n", v35);
  }
}

void *sub_28284(uint64_t a1, const void *a2)
{
  int v3 = (void *)(a1 + 8);
  uint64_t result = (void *)sub_282F8(a1 + 8);
  if (result)
  {
    uint64_t v5 = (uint64_t)result;
    memcpy(result, a2, 0x626uLL);
    return (void *)sub_47610(v3, v5, 0);
  }
  return result;
}

uint64_t sub_282F8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 25320);
  if (v1)
  {
    unsigned int v2 = v1 - 1;
    *(_DWORD *)(a1 + 25320) = v2;
    return *(void *)(a1 + 8 * v2 + 25192);
  }
  else
  {
    if (sub_44EF8(0xD8u, 4))
    {
      int v4 = sub_44F3C(0xD8u);
      __uint64_t v5 = sub_4F1D8();
      uint64_t v6 = (const char *)sub_44F70(4);
      if (v4)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to get free spot \n", v5, 216, v6, "new_stats", 56, "free_pool_available > 0");
        __uint64_t v7 = sub_4F1D8();
        int v8 = (const char *)sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get free spot ", v7, 216, v8, "new_stats", 56, "free_pool_available > 0");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get free spot ", v5, 216, v6, "new_stats", 56, "free_pool_available > 0");
      }
    }
    return 0;
  }
}

uint64_t sub_2840C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 51112;
  if ((*(void *)(a1 + 51344) || *(void *)(a1 + 51352)) && *(_DWORD *)(a1 + 239348) != 2)
  {
    uint64_t v9 = a1 + 16 * *(unsigned __int8 *)(a2 + 160) + 241168;
    *(void *)(v9 + 8) = *(void *)(a2 + 2344);
    int v10 = *(_DWORD *)(a2 + 23736);
    int v11 = (_DWORD *)(a1 + 67932);
    *(_DWORD *)uint64_t v9 = 0;
    *(_DWORD *)(v9 + 4) = v10;
    if (sub_44EF8(0x2Eu, 7))
    {
      int v12 = sub_44F3C(0x2Eu);
      __uint64_t v13 = sub_4F1D8();
      int v14 = (const char *)sub_44F70(7);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %d %d %d %p %d %d %d\n", v13, 46, v14, "DropFrame", 3335, *v11, *(_DWORD *)(a2 + 168), *(_DWORD *)(a2 + 160), *(const void **)v4, *(_DWORD *)(v4 + 8), *(_DWORD *)(v4 + 112), *(unsigned __int8 *)(v4 + 116));
        __uint64_t v15 = sub_4F1D8();
        __uint64_t v40 = sub_44F70(7);
        syslog(3, "%lld %d AVE %s: %s:%d %d %d %d %p %d %d %d", v15, 46, v40, "DropFrame");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %d %d %d %p %d %d %d", v13, 46, v14, "DropFrame");
      }
    }
    *(_DWORD *)(v4 + 112) = -1;
    *(unsigned char *)(v4 + 116) = 0;
    if (*v11 >= 2u && !*(_DWORD *)(a2 + 168)) {
      *(unsigned char *)(v4 + 117) = 1;
    }
    if (*(unsigned char *)(a1 + 68345)) {
      uint64_t v17 = *(void *)(v4 + 240);
    }
    else {
      uint64_t v17 = *(void *)(v4 + 232);
    }
    if (v17 == 1)
    {
      kdebug_trace();
      if (*(void *)(v4 + 168) && *(void *)(v4 + 160))
      {
        if (sub_44EF8(0x2Eu, 7))
        {
          int v21 = sub_44F3C(0x2Eu);
          __uint64_t v22 = sub_4F1D8();
          uint64_t v23 = (const char *)sub_44F70(7);
          if (v21)
          {
            printf("%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame on %d bytes\n", v22, 46, v23, 0);
            __uint64_t v24 = sub_4F1D8();
            uint64_t v41 = (const char *)sub_44F70(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame on %d bytes", v24, 46, v41, 0);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame on %d bytes", v22, 46, v23, 0);
          }
        }
        (*(void (**)(void, void, void, void, void))(v4 + 168))(*(void *)(v4 + 160), 0, 0, 0, *(unsigned int *)(a1 + 68256));
      }
      else if (sub_44EF8(0x2Eu, 7))
      {
        int v25 = sub_44F3C(0x2Eu);
        __uint64_t v26 = sub_4F1D8();
        char v27 = (const char *)sub_44F70(7);
        if (v25)
        {
          printf("%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it\n", v26, 46, v27);
          __uint64_t v28 = sub_4F1D8();
          uint64_t v42 = (const char *)sub_44F70(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v28, 46, v42);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v26, 46, v27);
        }
      }
      uint64_t v16 = 0;
    }
    else
    {
      if (sub_44EF8(0x2Eu, 7))
      {
        int v18 = sub_44F3C(0x2Eu);
        __uint64_t v19 = sub_4F1D8();
        unsigned int v20 = (const char *)sub_44F70(7);
        if (v18)
        {
          printf("%lld %d AVE %s: H264FrameRec: DROP F %d infoFlagsOut %d\n", v19, 46, v20, *(_DWORD *)(a2 + 160), 3);
          __uint64_t v19 = sub_4F1D8();
          unsigned int v20 = (const char *)sub_44F70(7);
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d infoFlagsOut %d", v19, 46, v20, *(_DWORD *)(a2 + 160), 3);
      }
      kdebug_trace();
      if (*(unsigned char *)(a1 + 68345)) {
        uint64_t v29 = VTEncoderSessionEmitEncodedTile();
      }
      else {
        uint64_t v29 = VTEncoderSessionEmitEncodedFrame();
      }
      uint64_t v16 = v29;
    }
    kdebug_trace();
    *(void *)(a2 + 27680) = sub_4F1D8();
    uint64_t v30 = *(unsigned int *)(a2 + 916);
    if ((v30 & 0x80000000) == 0)
    {
      if (v30 >= 0x1F)
      {
        uint64_t v16 = 3758097084;
        if (sub_44EF8(3u, 4))
        {
          int v32 = sub_44F3C(3u);
          __uint64_t v33 = sub_4F1D8();
          int v34 = (const char *)sub_44F70(4);
          if (v32)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: DropFrame Frame->PlaneNumber = %d\n", v33, 3, v34, "DropFrame", 3501, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(_DWORD *)(a2 + 916));
            __uint64_t v33 = sub_4F1D8();
            int v34 = (const char *)sub_44F70(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: DropFrame Frame->PlaneNumber = %d", v33, 3, v34, "DropFrame", 3501, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(unsigned int *)(a2 + 916));
        }
      }
      else
      {
        uint64_t v31 = *(void **)(a1 + 8 * v30 + 27072);
        if (v31)
        {
          bzero(v31, 0x2CAB8uLL);
        }
        else if (sub_44EF8(3u, 4))
        {
          int v35 = sub_44F3C(3u);
          __uint64_t v36 = sub_4F1D8();
          __uint64_t v37 = (const char *)sub_44F70(4);
          if (v35)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader == NULL\n", v36, 3, v37, "DropFrame", 3503, "codedHeader != __null");
            sub_4F1D8();
            sub_44F70(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader == NULL");
        }
      }
    }
  }
  else
  {
    if (sub_44EF8(0x2Eu, 7))
    {
      int v5 = sub_44F3C(0x2Eu);
      __uint64_t v6 = sub_4F1D8();
      __uint64_t v7 = (const char *)sub_44F70(7);
      if (v5)
      {
        printf("%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it\n", v6, 46, v7);
        __uint64_t v8 = sub_4F1D8();
        __uint64_t v39 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v8, 46, v39);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v6, 46, v7);
      }
    }
    return 0;
  }
  return v16;
}

__CFDictionary *sub_28AAC(uint64_t a1, int *a2, int a3)
{
  CFMutableDataRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    if (sub_44EF8(0x2Eu, 4))
    {
      int v12 = sub_44F3C(0x2Eu);
      __uint64_t v13 = sub_4F1D8();
      int v14 = (const char *)sub_44F70(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | TemporalLevelInfoDict == NULL\n", v13, 46, v14, "AVE_FrameRecv", "CreateTemporalLevelInfoDictionary", 3747, "TemporalLevelInfoDict != __null");
        __uint64_t v13 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | TemporalLevelInfoDict == NULL", v13);
    }
    return 0;
  }
  __uint64_t v7 = Mutable;
  sub_385A8(kCMHEVCTemporalLevelInfoKey_TemporalLevel, a3, Mutable);
  sub_385A8(kCMHEVCTemporalLevelInfoKey_ProfileSpace, *a2, v7);
  sub_385A8(kCMHEVCTemporalLevelInfoKey_TierFlag, a2[1] != 0, v7);
  sub_385A8(kCMHEVCTemporalLevelInfoKey_ProfileIndex, a2[2], v7);
  CFDataRef v8 = CFDataCreate(0, (const UInt8 *)(a1 + 239320), 4);
  if (!v8)
  {
    if (sub_44EF8(0x2Eu, 4))
    {
      int v15 = sub_44F3C(0x2Eu);
      __uint64_t v16 = sub_4F1D8();
      uint64_t v17 = (const char *)sub_44F70(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | cf_profileCompatibilityFlags == NULL\n", v16, 46, v17, "AVE_FrameRecv", "CreateTemporalLevelInfoDictionary", 3756, "cf_profileCompatibilityFlags != __null");
        __uint64_t v16 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | cf_profileCompatibilityFlags == NULL", v16);
    }
    int v21 = v7;
    goto LABEL_21;
  }
  CFDataRef v9 = v8;
  CFDictionaryAddValue(v7, kCMHEVCTemporalLevelInfoKey_ProfileCompatibilityFlags, v8);
  CFDataRef v10 = CFDataCreate(0, (const UInt8 *)(a1 + 239324), 6);
  if (!v10)
  {
    if (sub_44EF8(0x2Eu, 4))
    {
      int v18 = sub_44F3C(0x2Eu);
      __uint64_t v19 = sub_4F1D8();
      unsigned int v20 = (const char *)sub_44F70(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | cf_constraintIndicatorFlags == NULL\n", v19, 46, v20, "AVE_FrameRecv", "CreateTemporalLevelInfoDictionary", 3763, "cf_constraintIndicatorFlags != __null");
        __uint64_t v19 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | cf_constraintIndicatorFlags == NULL", v19);
    }
    CFRelease(v7);
    int v21 = v9;
LABEL_21:
    CFRelease(v21);
    return 0;
  }
  CFDataRef v11 = v10;
  CFDictionaryAddValue(v7, kCMHEVCTemporalLevelInfoKey_ConstraintIndicatorFlags, v10);
  sub_385A8(kCMHEVCTemporalLevelInfoKey_LevelIndex, a2[15], v7);
  CFRelease(v9);
  CFRelease(v11);
  return v7;
}

uint64_t sub_28EB4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(_DWORD *)(a2 + 916) >= 0x1Fu)
    {
      uint64_t v7 = 3758097084;
      if (sub_44EF8(3u, 4))
      {
        int v11 = sub_44F3C(3u);
        __uint64_t v12 = sub_4F1D8();
        __uint64_t v13 = (const char *)sub_44F70(4);
        if (v11)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrameMCTF pFrame->PlaneNumber = %d\n", v12, 3, v13, "SendFrameMCTF", 3802, "(uint32_t)(pFrame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(_DWORD *)(a2 + 916));
          __uint64_t v12 = sub_4F1D8();
          __uint64_t v13 = (const char *)sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrameMCTF pFrame->PlaneNumber = %d", v12, 3, v13, "SendFrameMCTF", 3802, "(uint32_t)(pFrame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(unsigned int *)(a2 + 916));
      }
    }
    else
    {
      uint64_t v3 = a1 + 51272;
      if (sub_44EF8(0x2Eu, 6))
      {
        int v4 = sub_44F3C(0x2Eu);
        __uint64_t v5 = sub_4F1D8();
        __uint64_t v6 = (const char *)sub_44F70(6);
        if (v4)
        {
          printf("%lld %d AVE %s: Send MCTF PlaneNumber:%d framenumber:%d %p %p\n", v5, 46, v6, *(_DWORD *)(a2 + 916), *(_DWORD *)(a2 + 160), *(const void **)v3, *(const void **)(a2 + 320));
          __uint64_t v5 = sub_4F1D8();
          sub_44F70(6);
        }
        syslog(3, "%lld %d AVE %s: Send MCTF PlaneNumber:%d framenumber:%d %p %p", v5);
      }
      int v14 = *(void (**)(void))(v3 + 16);
      if (v14 && *(void *)v3 && *(void *)(a2 + 320)) {
        v14();
      }
      return 0;
    }
  }
  else
  {
    uint64_t v7 = 3758097084;
    if (sub_44EF8(3u, 4))
    {
      int v8 = sub_44F3C(3u);
      __uint64_t v9 = sub_4F1D8();
      CFDataRef v10 = (const char *)sub_44F70(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrameMCTF pFrame == NULL\n", v9, 3, v10, "SendFrameMCTF", 3800, "pFrame != __null");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrameMCTF pFrame == NULL");
    }
  }
  return v7;
}

uint64_t sub_2918C(uint64_t a1, uint64_t a2, void *a3, unsigned int a4)
{
  CMBlockBufferRef dataBuffer = 0;
  dataCFIndex Length = 0;
  if (!a2)
  {
    uint64_t v12 = 3758097084;
    if (sub_44EF8(3u, 4))
    {
      int v13 = sub_44F3C(3u);
      __uint64_t v14 = sub_4F1D8();
      int v15 = (const char *)sub_44F70(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrame Frame == NULL\n", v14, 3, v15, "SendFrame", 3836, "Frame != __null");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrame Frame == NULL");
    }
    return v12;
  }
  uint64_t v4 = a2;
  unsigned int v5 = *(_DWORD *)(a2 + 916);
  if (v5 >= 0x1F)
  {
    uint64_t v12 = 3758097084;
    if (!sub_44EF8(3u, 4)) {
      return v12;
    }
    int v16 = sub_44F3C(3u);
    __uint64_t v17 = sub_4F1D8();
    int v18 = (const char *)sub_44F70(4);
    if (v16)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrame Frame->PlaneNumber = %d\n", v17, 3, v18, "SendFrame", 3837, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(_DWORD *)(v4 + 916));
      __uint64_t v17 = sub_4F1D8();
      __uint64_t v19 = (size_t *)sub_44F70(4);
      v428 = "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))";
      v429 = (const char *)*(unsigned int *)(v4 + 916);
      sampleBufferOut = "SendFrame";
      v427 = (unsigned char *)&unk_EFD;
      sampleSizeArray = v19;
      unsigned int v20 = "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrame Frame->PlaneNumber = %d";
LABEL_20:
      CMItemCount numSampleSizeEntries = 3;
LABEL_34:
      syslog(3, v20, v17, numSampleSizeEntries, sampleSizeArray, sampleBufferOut, v427, v428, v429, v430, v431);
      return v12;
    }
    v429 = (const char *)*(unsigned int *)(v4 + 916);
    v427 = (unsigned char *)&unk_EFD;
    v428 = "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))";
    sampleSizeArray = (size_t *)v18;
    sampleBufferOut = "SendFrame";
    uint64_t v34 = 3;
    unsigned int v20 = "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrame Frame->PlaneNumber = %d";
LABEL_33:
    CMItemCount numSampleSizeEntries = v34;
    goto LABEL_34;
  }
  uint64_t v6 = a1;
  if (!*(unsigned char *)a1)
  {
    uint64_t v12 = 3758097084;
    if (sub_44EF8(3u, 4))
    {
      int v21 = sub_44F3C(3u);
      __uint64_t v22 = sub_4F1D8();
      uint64_t v23 = (const char *)sub_44F70(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec Error, CFRunloop Closing\n", v22, 3, v23, "SendFrame", 3838, "m_moreWorkToDo");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec Error, CFRunloop Closing");
    }
    return v12;
  }
  uint64_t v7 = (unsigned int *)(a1 + 51080);
  if (!*(void *)(a1 + 51344) && !*(void *)(a1 + 51352))
  {
    if (sub_44EF8(0x2Eu, 7))
    {
      int v38 = sub_44F3C(0x2Eu);
      __uint64_t v39 = sub_4F1D8();
      __uint64_t v40 = (const char *)sub_44F70(7);
      if (v38)
      {
        printf("%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it\n", v39, 46, v40);
        __uint64_t v41 = sub_4F1D8();
        sampleSizeArrayb = (size_t *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v41, 46, (const char *)sampleSizeArrayb);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v39, 46, v40);
      }
    }
    sub_20204(v6, v4, 0);
    return 0;
  }
  BOOL v8 = (a4 & 0x80000000) != 0 || *(unsigned char *)(a1 + 67552) == 0;
  int v9 = !v8;
  if (v8)
  {
    unint64_t v11 = 0;
    uint64_t v24 = a1 + 384 * v5 + 28032;
    uint64_t v25 = 32;
    __uint64_t v26 = (unsigned int *)v24;
    do
    {
      unsigned int v28 = *v26;
      v26 += 3;
      uint64_t v27 = v28;
      if (!v28) {
        break;
      }
      v11 += v27 + *(unsigned int *)(v24 + 11520);
      uint64_t v24 = (uint64_t)v26;
      --v25;
    }
    while (v25);
  }
  else
  {
    uint64_t v10 = a1 + 384 * v5 + 12 * a4;
    unint64_t v11 = *(unsigned int *)(v10 + 28032) + (unint64_t)*(unsigned int *)(v10 + 39552);
  }
  if (!v11)
  {
    uint64_t v12 = 3758097084;
    if (!sub_44EF8(3u, 4)) {
      return v12;
    }
    int v35 = sub_44F3C(3u);
    __uint64_t v17 = sub_4F1D8();
    __uint64_t v36 = (const char *)sub_44F70(4);
    if (v35)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: frame %d; FinalOutput_FRAME_Size %ld\n",
        v17,
        3,
        v36,
        "SendFrame",
        3877,
        "FinalOutput_FRAME_Size != 0",
        *(_DWORD *)(v4 + 160),
        0);
      __uint64_t v17 = sub_4F1D8();
      __uint64_t v37 = (size_t *)sub_44F70(4);
      v429 = (const char *)*(unsigned int *)(v4 + 160);
      uint64_t v430 = 0;
      v427 = (unsigned char *)&unk_F25;
      v428 = "FinalOutput_FRAME_Size != 0";
      sampleSizeArray = v37;
      sampleBufferOut = "SendFrame";
      unsigned int v20 = "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: frame %d; FinalOutput_FRAME_Size %ld";
      goto LABEL_20;
    }
    v429 = (const char *)*(unsigned int *)(v4 + 160);
    uint64_t v430 = 0;
    v427 = (unsigned char *)&unk_F25;
    v428 = "FinalOutput_FRAME_Size != 0";
    sampleSizeArray = (size_t *)v36;
    sampleBufferOut = "SendFrame";
    uint64_t v34 = 3;
    unsigned int v20 = "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: frame %d; FinalOutput_FRAME_Size %ld";
    goto LABEL_33;
  }
  int v447 = v9;
  uint64_t v445 = a1 + 67552;
  int v29 = *(_DWORD *)(a1 + 67556) - 1;
  if (sub_44EF8(0x2Eu, 7))
  {
    int v30 = sub_44F3C(0x2Eu);
    __uint64_t v31 = sub_4F1D8();
    int v32 = (const char *)sub_44F70(7);
    if (v30)
    {
      printf("%lld %d AVE %s: H264FrameRec: start FinalOutput_FRAME_Size %ld\n", v31, 46, v32, v11);
      __uint64_t v33 = sub_4F1D8();
      sampleSizeArraya = (size_t *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: H264FrameRec: start FinalOutput_FRAME_Size %ld", v33, 46, (const char *)sampleSizeArraya, v11);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264FrameRec: start FinalOutput_FRAME_Size %ld", v31, 46, v32, v11);
    }
  }
  uint64_t v43 = v4 + 21664;
  uint64_t v44 = v6 + 239336;
  uint64_t v45 = v6 + 68136;
  BOOL v8 = v29 == a4;
  uint64_t v46 = a4;
  char v47 = v447;
  if (v8) {
    char v48 = 0;
  }
  else {
    char v48 = v447;
  }
  char v438 = v48;
  if ((v48 & 1) == 0)
  {
    uint64_t v49 = *v7;
    v11 += v49;
    if (v49)
    {
      if (sub_44EF8(0x2Eu, 7))
      {
        int v50 = sub_44F3C(0x2Eu);
        __uint64_t v51 = sub_4F1D8();
        int v52 = (const char *)sub_44F70(7);
        if (v50)
        {
          printf("%lld %d AVE %s: H264FrameRec: CABACzeroWord = %d - FinalOutput_FRAME_Size %ld\n", v51, 46, v52, *v7, v11);
          __uint64_t v51 = sub_4F1D8();
          int v52 = (const char *)sub_44F70(7);
          uint64_t v46 = a4;
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec: CABACzeroWord = %d - FinalOutput_FRAME_Size %ld", v51, 46, v52, *v7, v11);
      }
      char v47 = v447;
    }
  }
  if (v46) {
    char v53 = v47;
  }
  else {
    char v53 = 0;
  }
  if (v53)
  {
    int v54 = 0;
    goto LABEL_61;
  }
  unsigned int v64 = *(const void **)(v4 + 336);
  if (v64)
  {
    CFDataRef Data = CFPropertyListCreateData(kCFAllocatorDefault, v64, kCFPropertyListXMLFormat_v1_0, 0, 0);
    if (Data)
    {
      CFDataRef v66 = Data;
      CFIndex Length = CFDataGetLength(Data);
      if (sub_44EF8(0x2Eu, 7))
      {
        uint64_t v442 = v6;
        int v68 = sub_44F3C(0x2Eu);
        __uint64_t v69 = sub_4F1D8();
        int v70 = (const char *)sub_44F70(7);
        if (v68)
        {
          printf("%lld %d AVE %s: H264FrameRec: CFDebugMetadataSEI is ON (%#llx) size %d\n", v69, 46, v70, *(void *)(v4 + 336), Length);
          __uint64_t v69 = sub_4F1D8();
          int v70 = (const char *)sub_44F70(7);
          uint64_t v46 = a4;
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec: CFDebugMetadataSEI is ON (%#llx) size %d", v69, 46, v70, *(void *)(v4 + 336), Length);
        uint64_t v43 = v4 + 21664;
        uint64_t v6 = v442;
      }
      if (Length >= 0) {
        uint64_t v108 = Length;
      }
      else {
        uint64_t v108 = Length + 1;
      }
      uint64_t v75 = Length + (v108 >> 1) + 512;
      goto LABEL_116;
    }
    uint64_t v12 = 3758097084;
    if (!sub_44EF8(0x2Eu, 4)) {
      return v12;
    }
    int v76 = sub_44F3C(0x2Eu);
    __uint64_t v17 = sub_4F1D8();
    unsigned int v77 = (const char *)sub_44F70(4);
    if (v76)
    {
      printf("%lld %d AVE %s: %s::%s:%d %s | H264FrameRec ERROR: meta date creation failed. frame %d; SEI 0x%llx\n",
        v17,
        46,
        v77,
        "AVE_FrameRecv",
        "SendFrame",
        3902,
        "serialMetadata != __null",
        *(_DWORD *)(v4 + 160),
        *(void *)(v4 + 336));
      __uint64_t v17 = sub_4F1D8();
      unsigned int v78 = (size_t *)sub_44F70(4);
      uint64_t v430 = *(unsigned int *)(v4 + 160);
      uint64_t v431 = *(void *)(v4 + 336);
      v428 = (unsigned char *)&unk_F3E;
      v429 = "serialMetadata != __null";
      sampleBufferOut = "AVE_FrameRecv";
      v427 = "SendFrame";
      CMItemCount numSampleSizeEntries = 46;
      sampleSizeArray = v78;
      unsigned int v20 = "%lld %d AVE %s: %s::%s:%d %s | H264FrameRec ERROR: meta date creation failed. frame %d; SEI 0x%llx";
      goto LABEL_34;
    }
    uint64_t v430 = *(unsigned int *)(v4 + 160);
    uint64_t v431 = *(void *)(v4 + 336);
    v428 = (unsigned char *)&unk_F3E;
    v429 = "serialMetadata != __null";
    sampleBufferOut = "AVE_FrameRecv";
    v427 = "SendFrame";
    sampleSizeArray = (size_t *)v77;
    uint64_t v34 = 46;
    unsigned int v20 = "%lld %d AVE %s: %s::%s:%d %s | H264FrameRec ERROR: meta date creation failed. frame %d; SEI 0x%llx";
    goto LABEL_33;
  }
  CFDataRef v66 = 0;
  uint64_t v75 = 0;
LABEL_116:
  int v109 = *(unsigned __int8 *)(v45 + 45);
  if (*(unsigned char *)(v45 + 45))
  {
    if (*(double *)(v4 + 2384) == 0.0) {
      int v109 = 0;
    }
    else {
      int v109 = *(_DWORD *)(v43 + 1804) == 3 || *(_DWORD *)(v43 + 2104) == 21;
    }
  }
  int v110 = *(unsigned __int8 *)(v45 + 46);
  if (*(unsigned char *)(v45 + 46)) {
    int v110 = *(_DWORD *)(v4 + 160) == 0;
  }
  int v111 = *(unsigned __int8 *)(v45 + 47);
  if (*(unsigned char *)(v45 + 47)) {
    int v111 = *(_DWORD *)(v4 + 160) == 0;
  }
  int v112 = *(unsigned __int8 *)(v45 + 48);
  if (*(unsigned char *)(v45 + 48)) {
    int v112 = *(_DWORD *)(v4 + 160) == 0;
  }
  if (*(unsigned char *)(v45 + 49)) {
    BOOL v113 = *(double *)(v4 + 2368) != 0.0;
  }
  else {
    BOOL v113 = 0;
  }
  if (*(unsigned char *)(v45 + 50)) {
    BOOL v114 = *(unsigned char *)(v45 + 55) != 0;
  }
  else {
    BOOL v114 = 0;
  }
  if (*(unsigned char *)(v45 + 51)) {
    BOOL v115 = *(unsigned char *)(v45 + 56) != 0;
  }
  else {
    BOOL v115 = 0;
  }
  int v116 = *(_DWORD *)(v4 + 2436);
  if (*(unsigned __int8 *)(v45 + 293) | *(unsigned __int8 *)(v45 + 292)) {
    int v117 = 1;
  }
  else {
    int v117 = v110;
  }
  if (*(unsigned char *)(v45 + 53) || v116 > 0 || v115 || ((v114 | v113 | v112 | v111 | v109 | v117) & 1) != 0)
  {
    BOOL v119 = v109 == 0;
    if (v109) {
      unsigned int v120 = 9;
    }
    else {
      unsigned int v120 = 0;
    }
    if (v119) {
      int v121 = 23;
    }
    else {
      int v121 = 32;
    }
    if (v113) {
      v120 += 9;
    }
    int v122 = v121 + 9;
    if (!v113) {
      int v122 = v121;
    }
    if (v110) {
      v120 += 5;
    }
    int v123 = v122 + 5;
    if (!v110) {
      int v123 = v122;
    }
    BOOL v124 = v111 == 0;
    if (v111) {
      v120 += 5;
    }
    int v125 = v123 + 5;
    if (v124) {
      int v125 = v123;
    }
    if (v112)
    {
      v120 += 5;
      v125 += 5;
    }
    if (v114)
    {
      v120 += 25;
      v125 += 25;
    }
    if (v115)
    {
      v120 += 5;
      v125 += 5;
    }
    if (*(unsigned char *)(v45 + 292))
    {
      v120 += 56;
      v125 += 56;
    }
    if (*(unsigned char *)(v45 + 293))
    {
      v120 += 10;
      v125 += 10;
    }
    if (*(unsigned char *)(v45 + 85))
    {
      v120 += 17;
      v125 += 17;
    }
    if (v116 > 0)
    {
      v120 += 9;
      v125 += 9;
    }
    if (*(unsigned char *)(v45 + 53)) {
      v120 += 6;
    }
    int v126 = v125 + 6;
    if (!*(unsigned char *)(v45 + 53)) {
      int v126 = v125;
    }
    unsigned int v118 = v120 + v126 + (v120 >> 1) + 1;
  }
  else
  {
    unsigned int v118 = 0;
  }
  size_t v127 = v75 + v118;
  int v128 = (char *)malloc_type_malloc(v127, 0x557F7C4EuLL);
  if (!v128)
  {
    if (sub_44EF8(3u, 4))
    {
      int v135 = sub_44F3C(3u);
      __uint64_t v136 = sub_4F1D8();
      uint64_t v137 = (const char *)sub_44F70(4);
      if (v135)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SEIBuffer malloc failed. frame %d; SEI_FRAME_Size %ld\n",
          v136,
          3,
          v137,
          "SendFrame",
          3963,
          "SEIBuffer != __null",
          *(_DWORD *)(v4 + 160),
          v127);
        __uint64_t v136 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SEIBuffer malloc failed. frame %d; SEI_FRAME_Size %ld",
        v136,
        3);
    }
    return 0;
  }
  __uint64_t v129 = v128;
  int v130 = sub_217C0(v6, v4, v128, v127, v447, v46, v66);
  if (v130)
  {
    int v131 = v130;
    if (sub_44EF8(3u, 4))
    {
      int v132 = sub_44F3C(3u);
      __uint64_t v133 = sub_4F1D8();
      __uint64_t v134 = (const char *)sub_44F70(4);
      if (v132)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: AddAllSEIs failed. frame %d err = %d\n", v133, 3, v134, "SendFrame", 3966, "err == 0", *(_DWORD *)(v4 + 160), v131);
        __uint64_t v133 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: AddAllSEIs failed. frame %d err = %d", v133);
    }
    return 0;
  }
  v11 += *(int *)(v44 + 24);
  if (*(unsigned char *)v45)
  {
    int v54 = v129;
    uint64_t v43 = v4 + 21664;
    if (!*(_DWORD *)(v4 + 160))
    {
      v11 += *(void *)(v44 + 5936);
      *(void *)(v44 + 5936) = 0;
    }
  }
  else
  {
    int v54 = v129;
    uint64_t v43 = v4 + 21664;
  }
  if (*(unsigned char *)(v45 + 304)) {
    v11 += *(unsigned int *)(v45 + 820);
  }
LABEL_61:
  uint64_t v55 = *(void *)(v6 + 8 * *(int *)(v4 + 916) + 27072);
  if (!v55)
  {
    if (!sub_44EF8(3u, 4)) {
      return 0;
    }
    int v71 = sub_44F3C(3u);
    __uint64_t v72 = sub_4F1D8();
    int v73 = (const char *)sub_44F70(4);
    if (!v71)
    {
LABEL_110:
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader == NULL");
      return 0;
    }
    int v74 = 3990;
LABEL_73:
    printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader == NULL\n", v72, 3, v73, "SendFrame", v74, "codedHeader != __null");
    sub_4F1D8();
    sub_44F70(4);
    goto LABEL_110;
  }
  v435 = v54;
  uint64_t v56 = (long long *)(v55 + 182920);
  v433 = (float *)(v6 + 51128);
  int v57 = (_OWORD *)(v6 + 51128 + 48 * *(unsigned int *)(v4 + 168));
  long long v58 = *v56;
  long long v59 = v56[2];
  v57[1] = v56[1];
  v57[2] = v59;
  _OWORD *v57 = v58;
  v444 = v7;
  if (sub_44EF8(0x2Eu, 7))
  {
    int v60 = sub_44F3C(0x2Eu);
    __uint64_t v61 = sub_4F1D8();
    int v62 = (const char *)sub_44F70(7);
    if (v60)
    {
      printf("%lld %d AVE %s: %s:%d %d %d %d %p %d %d %d\n", v61, 46, v62, "SendFrame", 3995, *(_DWORD *)(v445 + 380), *(_DWORD *)(v4 + 168), *(_DWORD *)(v4 + 160), *((const void **)v7 + 4), v7[10], v7[36], *((unsigned __int8 *)v7 + 148));
      __uint64_t v63 = sub_4F1D8();
      sampleSizeArrayc = (size_t *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: %s:%d %d %d %d %p %d %d %d", v63, 46, sampleSizeArrayc, "SendFrame");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %d %d %d %p %d %d %d", v61, 46, v62, "SendFrame");
    }
    uint64_t v46 = a4;
  }
  uint64_t v436 = v4;
  uint64_t v440 = v44;
  uint64_t v434 = v45;
  if (*(_DWORD *)(v445 + 380) <= 1u || *(_DWORD *)(v4 + 168))
  {
    uint64_t v441 = v43;
    uint64_t v79 = 0;
    char v80 = 1;
    do
    {
      char v81 = v80;
      if (sub_44EF8(0x2Eu, 7))
      {
        int v82 = sub_44F3C(0x2Eu);
        __uint64_t v83 = sub_4F1D8();
        size_t v84 = (const char *)sub_44F70(7);
        uint64_t v85 = v6;
        uint64_t v86 = v6 + 12 * v79 + 51084;
        int v89 = *(_DWORD *)(v86 + 8);
        int v88 = (_DWORD *)(v86 + 8);
        int v87 = v89;
        if (v82)
        {
          printf("%lld %d AVE %s: H264FrameRec: Filler[%d] %d %d\n", v83, 46, v84, v79, *((char *)v88 - 1), v87);
          __uint64_t v90 = sub_4F1D8();
          int v91 = (const char *)sub_44F70(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: Filler[%d] %d %d", v90, 46, v91, v79, *((char *)v88 - 1), *v88);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: Filler[%d] %d %d", v83, 46, v84, v79, *((char *)v88 - 1), v87);
        }
        uint64_t v6 = v85;
      }
      char v80 = 0;
      v11 += *(int *)(v6 + 12 * v79 + 51092) + (uint64_t)*(char *)(v6 + 12 * v79 + 51091);
      uint64_t v79 = 1;
    }
    while ((v81 & 1) != 0);
    uint64_t v4 = v436;
    uint64_t v7 = v444;
    if (sub_44EF8(0x2Eu, 7))
    {
      int v92 = sub_44F3C(0x2Eu);
      __uint64_t v93 = sub_4F1D8();
      int v94 = (const char *)sub_44F70(7);
      if (v92)
      {
        printf("%lld %d AVE %s: H264FrameRec: FinalOutput_FRAME_Size = %ld\n", v93, 46, v94, v11);
        __uint64_t v95 = sub_4F1D8();
        sampleSizeArrayd = (size_t *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: FinalOutput_FRAME_Size = %ld", v95, 46, (const char *)sampleSizeArrayd, v11);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: FinalOutput_FRAME_Size = %ld", v93, 46, v94, v11);
      }
    }
    dataCFIndex Length = v11;
    unsigned int v96 = v444[36];
    size_t v97 = v11;
    if ((v96 & 0x80000000) == 0)
    {
      size_t v97 = v11;
      if (v96 == *(_DWORD *)(v436 + 160) - 1)
      {
        size_t v97 = v11 + (int)v444[10];
        dataCFIndex Length = v97;
      }
    }
    int v98 = sub_2633C(v6, v97, &dataBuffer);
    int v99 = v98;
    unsigned int v100 = v444[36];
    uint64_t v43 = v441;
    uint64_t v46 = a4;
    if ((v100 & 0x80000000) == 0
      && v100 == *(_DWORD *)(v436 + 160) - 1
      && (unsigned int v101 = (const void *)*((void *)v444 + 4)) != 0)
    {
      memcpy(v98, v101, (int)v444[10]);
      unsigned int v102 = v444[10];
    }
    else
    {
      unsigned int v102 = 0;
    }
    v444[10] = 0;
    v444[36] = -1;
    if (*(_DWORD *)(v445 + 380) <= 1u) {
      *((unsigned char *)v444 + 148) = 0;
    }
  }
  else
  {
    if (!*((void *)v7 + 4))
    {
      int v103 = malloc_type_malloc(*(unsigned int *)(v6 + 26952), 0x1187280DuLL);
      *((void *)v7 + 4) = v103;
      if (!v103)
      {
        if (sub_44EF8(0x2Eu, 4))
        {
          int v206 = sub_44F3C(0x2Eu);
          __uint64_t v207 = sub_4F1D8();
          int v208 = (const char *)sub_44F70(4);
          if (v206)
          {
            printf("%lld %d AVE %s: %s::%s:%d %s | wrong multi view buffer %p %d\n", v207, 46, v208, "AVE_FrameRecv", "SendFrame", 4038, "m_sMVBuf.pBuf != __null", *((const void **)v7 + 4), *(_DWORD *)(v4 + 160));
            __uint64_t v209 = sub_4F1D8();
            sampleSizeArrayk = (size_t *)sub_44F70(4);
            syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong multi view buffer %p %d", v209, 46, sampleSizeArrayk);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong multi view buffer %p %d", v207, 46, v208);
          }
        }
        return 4294954394;
      }
    }
    if (sub_44EF8(0x2Eu, 7))
    {
      int v104 = sub_44F3C(0x2Eu);
      __uint64_t v105 = sub_4F1D8();
      int v106 = (const char *)sub_44F70(7);
      if (v104)
      {
        printf("%lld %d AVE %s: H264FrameRec: FinalOutput_FRAME_Size = %ld\n", v105, 46, v106, v11);
        __uint64_t v107 = sub_4F1D8();
        sampleSizeArraye = (size_t *)sub_44F70(7);
        uint64_t v46 = a4;
        syslog(3, "%lld %d AVE %s: H264FrameRec: FinalOutput_FRAME_Size = %ld", v107, 46, (const char *)sampleSizeArraye, v11);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: FinalOutput_FRAME_Size = %ld", v105, 46, v106, v11);
      }
    }
    dataCFIndex Length = v11;
    int v99 = (char *)*((void *)v7 + 4);
    v7[10] = v11;
    v7[36] = *(_DWORD *)(v4 + 160);
    BOOL v138 = *(_DWORD *)(v43 + 1804) == 3 || *(_DWORD *)(v43 + 2104) == 21;
    unsigned int v102 = 0;
    *((unsigned char *)v7 + 148) = v138;
  }
  if (!v99)
  {
    if (!sub_44EF8(3u, 4)) {
      return 3758097085;
    }
    int v151 = sub_44F3C(3u);
    __uint64_t v152 = sub_4F1D8();
    int v153 = (const char *)sub_44F70(4);
    if (v151)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: FinalOutputFrameBuffer malloc failed. frame %d; FinalOutput_FRAME_Size %ld\n",
        v152,
        3,
        v153,
        "SendFrame",
        4048,
        "FinalOutputFrameBuffer != __null",
        *(_DWORD *)(v4 + 160),
        v11);
      __uint64_t v152 = sub_4F1D8();
      sub_44F70(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: FinalOutputFrameBuffer malloc failed. frame %d; FinalOutput_FRAME_Size %ld",
      v152,
      3);
    return 3758097085;
  }
  __uint64_t v139 = (_DWORD *)v43;
  v443 = (int *)v6;
  if (*(_DWORD *)(v445 + 380) >= 2u) {
    *((unsigned char *)v7 + 149) = 0;
  }
  memoryBlock = v99;
  int v140 = &v99[v102];
  int v141 = v443;
  sub_22F74(v443, v4, v140, v435, v11, v447, v46);
  if (!*(void *)v440) {
    goto LABEL_214;
  }
  uint64_t v142 = *(void *)&v443[2 * *(int *)(v4 + 916) + 6768];
  if (!v142)
  {
    if (!sub_44EF8(3u, 4)) {
      return 0;
    }
    int v168 = sub_44F3C(3u);
    __uint64_t v72 = sub_4F1D8();
    int v73 = (const char *)sub_44F70(4);
    if (!v168) {
      goto LABEL_110;
    }
    int v74 = 4066;
    goto LABEL_73;
  }
  *(unsigned char *)(v440 + 8) = 0;
  long long v143 = *(_OWORD *)(v4 + 2296);
  *(void *)(v142 + 140880) = *(void *)(v4 + 2312);
  *(_OWORD *)(v142 + 140864) = v143;
  int v141 = v443;
  if (!*(_DWORD *)(v4 + 12))
  {
    __uint64_t v173 = sub_28284((uint64_t)v443, (const void *)(v142 + 140860));
    if (v173)
    {
      int v174 = v173;
      memcpy((void *)(v4 + 25350), v173, 0x626uLL);
      *(unsigned char *)(v440 + 8) = 1;
      int v175 = (FILE *)sub_44B8(*(void *)(v45 + 3416), 4u, *(_DWORD *)(v4 + 12));
      int v141 = v443;
      if (v175)
      {
        __uint64_t v176 = v175;
        fseeko(v175, 1574 * v174[11] + 264, 0);
        fwrite(v174, 1uLL, 0x626uLL, v176);
      }
    }
    else
    {
      int v141 = v443;
      if (sub_44EF8(0xD8u, 6))
      {
        int v196 = sub_44F3C(0xD8u);
        __uint64_t v197 = sub_4F1D8();
        uint64_t v198 = (const char *)sub_44F70(6);
        int v199 = *(_DWORD *)(v4 + 160);
        if (v196)
        {
          printf("%lld %d AVE %s:   F %d pMpStats NULL \n", v197, 216, v198, v199);
          __uint64_t v200 = sub_4F1D8();
          sampleSizeArrayuint64_t i = (size_t *)sub_44F70(6);
          syslog(3, "%lld %d AVE %s:   F %d pMpStats NULL ", v200, 216, (const char *)sampleSizeArrayi, *(_DWORD *)(v4 + 160));
        }
        else
        {
          syslog(3, "%lld %d AVE %s:   F %d pMpStats NULL ", v197, 216, v198, v199);
        }
        int v141 = v443;
      }
    }
  }
LABEL_214:
  int v144 = v141 + 12844;
  if ((v438 & 1) == 0)
  {
    if (v447) {
      int v145 = a4;
    }
    else {
      int v145 = 0;
    }
    sub_20204((uint64_t)v443, v4, v145);
  }
  uint64_t v146 = v440;
  if (v435) {
    free(v435);
  }
  sub_5E4C(*(void **)(v45 + 3416), *(_DWORD *)(v4 + 16), *(const void **)&v443[2 * *(int *)(v4 + 916) + 6448], 432 * ((*v144 + 15) >> 4) * ((v144[1] + 15) >> 4));
  __uint64_t v147 = *(__CVBuffer **)(v4 + 21640);
  if (v147) {
    sub_6C2C(*(void *)(v45 + 3416), v147);
  }
  v439 = v144;
  if (*(_DWORD *)(v445 + 380) >= 2u && *(_DWORD *)(v4 + 168))
  {
    uint64_t v148 = (uint64_t)&v443[4 * *(unsigned __int8 *)(v4 + 160) + 60292];
    int v149 = v443[4 * *(unsigned __int8 *)(v4 + 160) + 60293];
    *(_DWORD *)v148 += 8 * v11;
    *(void *)(v148 + 8) = *(void *)(v4 + 2344);
    uint64_t v150 = v139;
    *(_DWORD *)(v148 + 4) = v149 + v139[518];
  }
  else
  {
    uint64_t v154 = (uint64_t)&v443[4 * *(unsigned __int8 *)(v4 + 160) + 60292];
    *(_DWORD *)uint64_t v154 = 8 * v11;
    *(void *)(v154 + 8) = *(void *)(v4 + 2344);
    uint64_t v150 = v139;
    *(_DWORD *)(v154 + 4) = v139[518];
  }
  __uint64_t v155 = (uint64_t *)(v7 + 66);
  sub_5A50(*(void **)(v45 + 3416), *(_DWORD *)(v4 + 16), v140, v11);
  *(void *)(v4 + 27688) = sub_4F1D8();
  if (*(unsigned char *)(v45 + 209)) {
    uint64_t v156 = *((void *)v7 + 34);
  }
  else {
    uint64_t v156 = *v155;
  }
  if (v156 == 1)
  {
    if (*((void *)v7 + 25) && *((void *)v7 + 24))
    {
      memset(&sampleTimingArray, 0, 32);
      uint64_t v157 = (uint64_t)v443;
      int v158 = memoryBlock;
      if (*(_DWORD *)(v445 + 380) >= 2u && !*(_DWORD *)(v4 + 168)) {
        return 0;
      }
      if (v447)
      {
        uint64_t v159 = 0;
        CMTimeEpoch v160 = -1;
        CMTimeValue v161 = -1;
        uint64_t v162 = a4;
      }
      else
      {
        CMTimeEpoch v160 = *(void *)(v4 + 2296);
        CMTimeValue v161 = *(int *)(v4 + 2304);
        uint64_t v162 = -1;
        uint64_t v159 = *(void *)(v4 + 21640);
      }
      sampleTimingArray.duration.value = *(unsigned int *)(v4 + 160);
      *(void *)&sampleTimingArray.duration.timescale = v162;
      sampleTimingArray.duration.epoch = v160;
      sampleTimingArray.presentationTimeStamp.value = v161;
      *(void *)&sampleTimingArray.presentationTimeStamp.timescale = v159;
      if (*(void *)v440
        && *(unsigned char *)(v440 + 8)
        && !*(_DWORD *)(v4 + 12)
        && (CFMutableDataRef Mutable = CFDataCreateMutable(kCFAllocatorDefault, 0)) != 0)
      {
        v241 = Mutable;
        CFDataAppendBytes(Mutable, (const UInt8 *)(v4 + 25350), 1574);
        __uint64_t v242 = *(opaqueCMSampleBuffer **)(v4 + 25370);
        sbuf[1] = *(CMSampleBufferRef *)(v4 + 25354);
        sbuf[2] = *(CMSampleBufferRef *)(v4 + 25362);
        sbuf[3] = v242;
        uint64_t v12 = VTMultiPassStorageSetDataAtTimeStamp();
        CFRelease(v241);
        if (v12)
        {
          uint64_t v243 = v45;
          if (sub_44EF8(0x2Eu, 4))
          {
            int v244 = sub_44F3C(0x2Eu);
            __uint64_t v245 = sub_4F1D8();
            v246 = (const char *)sub_44F70(4);
            if (v244)
            {
              printf("%lld %d AVE %s: H264FrameRec ERROR: VTMultiPassStorageSetDataAtTimeStamp failed. need to set up a recovery here...\n", v245, 46, v246);
              __uint64_t v247 = sub_4F1D8();
              sampleSizeArrayl = (size_t *)sub_44F70(4);
              syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: VTMultiPassStorageSetDataAtTimeStamp failed. need to set up a recovery here...", v247, 46, (const char *)sampleSizeArrayl);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: VTMultiPassStorageSetDataAtTimeStamp failed. need to set up a recovery here...", v245, 46, v246);
            }
          }
          uint64_t v45 = v243;
          int v158 = memoryBlock;
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
      if (sub_44EF8(0x2Eu, 7))
      {
        uint64_t v201 = v45;
        int v202 = sub_44F3C(0x2Eu);
        __uint64_t v203 = sub_4F1D8();
        int v204 = (const char *)sub_44F70(7);
        int v158 = memoryBlock;
        if (v202)
        {
          printf("%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame %p on %ld bytes\n", v203, 46, v204, memoryBlock, v11);
          __uint64_t v205 = sub_4F1D8();
          sampleSizeArrayuint64_t j = (size_t *)sub_44F70(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame %p on %ld bytes", v205, 46, (const char *)sampleSizeArrayj, memoryBlock, v11);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame %p on %ld bytes", v203, 46, v204, memoryBlock, v11);
        }
        uint64_t v45 = v201;
      }
      kdebug_trace();
      (*((void (**)(void, char *, size_t, CMSampleTimingInfo *, void))v444 + 25))(*((void *)v444 + 24), v158, dataLength, &sampleTimingArray, *(unsigned int *)(v45 + 120));
      kdebug_trace();
    }
    else
    {
      uint64_t v157 = (uint64_t)v443;
      int v158 = memoryBlock;
      if (sub_44EF8(0x2Eu, 7))
      {
        int v169 = sub_44F3C(0x2Eu);
        __uint64_t v170 = sub_4F1D8();
        int v171 = (const char *)sub_44F70(7);
        if (v169)
        {
          printf("%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it\n", v170, 46, v171);
          __uint64_t v172 = sub_4F1D8();
          sampleSizeArrayg = (size_t *)sub_44F70(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v172, 46, (const char *)sampleSizeArrayg);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v170, 46, v171);
        }
      }
      uint64_t v12 = 0;
    }
    sub_22D44(v157, v158);
    goto LABEL_537;
  }
  if (v447)
  {
    uint64_t v12 = 0;
LABEL_537:
    if (dataBuffer)
    {
      CFRelease(dataBuffer);
      CMBlockBufferRef dataBuffer = 0;
    }
    *(void *)(v4 + 27680) = sub_4F1D8();
    return v12;
  }
  sbuf[0] = 0;
  if (*(unsigned char *)v45)
  {
LABEL_243:
    if (*(_DWORD *)(v445 + 380) < 2u || *(_DWORD *)(v4 + 168))
    {
      if (*(unsigned char *)(v45 + 209))
      {
        uint64_t v163 = CMBlockBufferCreateWithMemoryBlock(kCFAllocatorDefault, memoryBlock, dataLength, *((CFAllocatorRef *)v444 + 28), 0, 0, dataLength, 1u, &dataBuffer);
        if (v163)
        {
          uint64_t v12 = v163;
          if (sub_44EF8(0x2Eu, 4))
          {
            int v164 = sub_44F3C(0x2Eu);
            __uint64_t v165 = sub_4F1D8();
            __uint64_t v166 = (const char *)sub_44F70(4);
            if (v164)
            {
              printf("%lld %d AVE %s: H264FrameRec ERROR: FigBlockBufferCreateWithMemoryBlock failed.\n", v165, 46, v166);
              __uint64_t v167 = sub_4F1D8();
              sampleSizeArrayf = (size_t *)sub_44F70(4);
              syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: FigBlockBufferCreateWithMemoryBlock failed.", v167, 46, (const char *)sampleSizeArrayf);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: FigBlockBufferCreateWithMemoryBlock failed.", v165, 46, v166);
            }
          }
          kdebug_trace();
          if (*(unsigned char *)(v45 + 209)) {
            uint64_t v12 = VTEncoderSessionEmitEncodedTile();
          }
          kdebug_trace();
          if (!v12) {
            goto LABEL_535;
          }
          if (v12 == -12903)
          {
            if (sub_44EF8(0x2Eu, 5))
            {
              int v248 = sub_44F3C(0x2Eu);
              __uint64_t v249 = sub_4F1D8();
              v250 = (const char *)sub_44F70(5);
              if (v248)
              {
                printf("%lld %d AVE %s: %s:%d m_VTEncoderSession has already been invalidated. Dropping frame %d %d\n", v249, 46, v250, "SendFrame", 5110, *(_DWORD *)(v146 + 20), *(_DWORD *)(v4 + 160));
LABEL_528:
                __uint64_t v371 = sub_4F1D8();
                sub_44F70(5);
                syslog(3, "%lld %d AVE %s: %s:%d m_VTEncoderSession has already been invalidated. Dropping frame %d %d", v371);
                goto LABEL_533;
              }
              goto LABEL_532;
            }
            goto LABEL_533;
          }
          if (!sub_44EF8(0x2Eu, 4)) {
            goto LABEL_535;
          }
          int v251 = sub_44F3C(0x2Eu);
          __uint64_t v252 = sub_4F1D8();
          __uint64_t v253 = (const char *)sub_44F70(4);
          if (v251)
          {
            printf("%lld %d AVE %s: %s:%d ERROR: VTEncoderSessionEmitEncodedFrame failed. %d %d %d\n", v252, 46, v253, "SendFrame", 5119, v12, *(_DWORD *)(v146 + 20), *(_DWORD *)(v4 + 160));
LABEL_385:
            __uint64_t v284 = sub_4F1D8();
            sub_44F70(4);
            syslog(3, "%lld %d AVE %s: %s:%d ERROR: VTEncoderSessionEmitEncodedFrame failed. %d %d %d", v284);
            goto LABEL_535;
          }
          goto LABEL_534;
        }
      }
      sampleTimingArray.duration.value = *(void *)(v4 + 2320);
      CMTimeEpoch v187 = *(void *)(v4 + 2336);
      *(void *)&sampleTimingArray.duration.timescale = *(void *)(v4 + 2328);
      CMTimeValue v188 = *(void *)(v4 + 2296);
      sampleTimingArray.duration.epoch = v187;
      sampleTimingArray.presentationTimeStamp.value = v188;
      CMTimeEpoch v189 = *(void *)(v4 + 2312);
      *(void *)&sampleTimingArray.presentationTimeStamp.timescale = *(void *)(v4 + 2304);
      CMTimeValue v190 = a3[1];
      sampleTimingArray.presentationTimeStamp.epoch = v189;
      sampleTimingArray.decodeTimeStamp.value = v190;
      *(void *)&sampleTimingArray.decodeTimeStamp.timescale = a3[2];
      sampleTimingArray.decodeTimeStamp.epoch = a3[3];
      time1.epoch = v189;
      *(_OWORD *)&time1.value = *(_OWORD *)&sampleTimingArray.presentationTimeStamp.value;
      CMTime time2 = sampleTimingArray.decodeTimeStamp;
      unsigned int v191 = (CMFormatDescriptionRef *)v444;
      if (!CMTimeCompare(&time1, &time2) && !*(unsigned char *)(v45 + 1752))
      {
        sampleTimingArray.decodeTimeStamp = kCMTimeInvalid;
        if (sub_44EF8(0x2Eu, 8))
        {
          int v192 = sub_44F3C(0x2Eu);
          __uint64_t v193 = sub_4F1D8();
          __uint64_t v194 = (const char *)sub_44F70(8);
          if (v192)
          {
            printf("%lld %d AVE %s: H264FrameRec: final decodeTimeStamp INVALID\n", v193, 46, v194);
            __uint64_t v195 = sub_4F1D8();
            sampleSizeArrayh = (size_t *)sub_44F70(8);
            syslog(3, "%lld %d AVE %s: H264FrameRec: final decodeTimeStamp INVALID", v195, 46, (const char *)sampleSizeArrayh);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: final decodeTimeStamp INVALID", v193, 46, v194);
          }
        }
      }
      *(void *)v449 = v155;
      if (sub_44EF8(0x33u, 7))
      {
        int v258 = sub_44F3C(0x33u);
        __uint64_t v259 = sub_4F1D8();
        int v260 = (const char *)sub_44F70(7);
        uint64_t v261 = *(unsigned int *)(v146 + 20);
        uint64_t v262 = *(unsigned int *)(v4 + 160);
        if (v258)
        {
          printf("%lld %d AVE %s: %s:%d %d %d DTS %lld %d 0x%x %lld | PTS %lld %d 0x%x %lld -> %lld %d | duration %lld %d 0x%x %lld\n", v259, 51, v260, "SendFrame", 4526, v261, v262, sampleTimingArray.decodeTimeStamp.value, sampleTimingArray.decodeTimeStamp.timescale, sampleTimingArray.decodeTimeStamp.flags, sampleTimingArray.decodeTimeStamp.epoch, sampleTimingArray.presentationTimeStamp.value, sampleTimingArray.presentationTimeStamp.timescale, sampleTimingArray.presentationTimeStamp.flags, sampleTimingArray.presentationTimeStamp.epoch, *(void *)(v4 + 2344), *(_DWORD *)(v4 + 2352), sampleTimingArray.duration.value,
            sampleTimingArray.duration.timescale,
            sampleTimingArray.duration.flags,
            sampleTimingArray.duration.epoch);
          __uint64_t v263 = sub_4F1D8();
          double v264 = sub_44F70(7);
          unsigned int v191 = (CMFormatDescriptionRef *)v444;
          syslog(3, "%lld %d AVE %s: %s:%d %d %d DTS %lld %d 0x%x %lld | PTS %lld %d 0x%x %lld -> %lld %d | duration %lld %d 0x%x %lld", v263, 51, v264, "SendFrame", 4526, *(unsigned int *)(v146 + 20), *(unsigned int *)(v4 + 160), sampleTimingArray.decodeTimeStamp.value, sampleTimingArray.decodeTimeStamp.timescale, sampleTimingArray.decodeTimeStamp.flags, sampleTimingArray.decodeTimeStamp.epoch, sampleTimingArray.presentationTimeStamp.value);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %d %d DTS %lld %d 0x%x %lld | PTS %lld %d 0x%x %lld -> %lld %d | duration %lld %d 0x%x %lld", v259, 51, v260, "SendFrame", 4526, v261, v262, sampleTimingArray.decodeTimeStamp.value, sampleTimingArray.decodeTimeStamp.timescale, sampleTimingArray.decodeTimeStamp.flags, sampleTimingArray.decodeTimeStamp.epoch, sampleTimingArray.presentationTimeStamp.value);
        }
      }
      OSStatus v265 = CMSampleBufferCreate(kCFAllocatorDefault, dataBuffer, 1u, 0, 0, v191[35], 1, 1, &sampleTimingArray, 1, &dataLength, sbuf);
      if (sub_44EF8(0x2Eu, 7))
      {
        __uint64_t v266 = v191;
        int v267 = sub_44F3C(0x2Eu);
        __uint64_t v268 = sub_4F1D8();
        __uint64_t v269 = (const char *)sub_44F70(7);
        CMFormatDescriptionRef v270 = v266[35];
        if (v267)
        {
          printf("%lld %d AVE %s: CMSampleBufferCreate err %d sbuf %p m_videoFormatDesc %p\n", v268, 46, v269, v265, sbuf[0], v270);
          __uint64_t v271 = sub_4F1D8();
          __uint64_t v272 = (const char *)sub_44F70(7);
          syslog(3, "%lld %d AVE %s: CMSampleBufferCreate err %d sbuf %p m_videoFormatDesc %p", v271, 46, v272, v265, sbuf[0], v266[35]);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: CMSampleBufferCreate err %d sbuf %p m_videoFormatDesc %p", v268, 46, v269, v265, sbuf[0], v270);
        }
        unsigned int v191 = v266;
      }
      if (v265)
      {
        __uint64_t v155 = *(uint64_t **)v449;
        if (sub_44EF8(0x2Eu, 4))
        {
          int v273 = sub_44F3C(0x2Eu);
          __uint64_t v274 = sub_4F1D8();
          int v275 = (const char *)sub_44F70(4);
          if (v273)
          {
            printf("%lld %d AVE %s: H264FrameRec ERROR: FigSampleBufferCreate failed.\n", v274, 46, v275);
            __uint64_t v276 = sub_4F1D8();
            sampleSizeArraym = (size_t *)sub_44F70(4);
            syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: FigSampleBufferCreate failed.", v276, 46, (const char *)sampleSizeArraym);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: FigSampleBufferCreate failed.", v274, 46, v275);
          }
        }
        if (*(unsigned char *)(v434 + 209)) {
          uint64_t v279 = VTEncoderSessionEmitEncodedTile();
        }
        else {
          uint64_t v279 = VTEncoderSessionEmitEncodedFrame();
        }
        uint64_t v12 = v279;
        if (!v279) {
          goto LABEL_535;
        }
        if (v279 == -12903)
        {
          if (sub_44EF8(0x2Eu, 5))
          {
            int v280 = sub_44F3C(0x2Eu);
            __uint64_t v249 = sub_4F1D8();
            int v281 = (const char *)sub_44F70(5);
            if (v280)
            {
              printf("%lld %d AVE %s: %s:%d m_VTEncoderSession has already been invalidated. Dropping frame %d %d\n", v249, 46, v281, "SendFrame", 5069, *(_DWORD *)(v146 + 20), *(_DWORD *)(v4 + 160));
              goto LABEL_528;
            }
LABEL_532:
            syslog(3, "%lld %d AVE %s: %s:%d m_VTEncoderSession has already been invalidated. Dropping frame %d %d", v249);
          }
LABEL_533:
          *__uint64_t v155 = 0;
          v155[1] = 0;
          uint64_t v12 = 4294954393;
          goto LABEL_535;
        }
        if (!sub_44EF8(0x2Eu, 4)) {
          goto LABEL_535;
        }
        int v282 = sub_44F3C(0x2Eu);
        __uint64_t v252 = sub_4F1D8();
        v283 = (const char *)sub_44F70(4);
        if (v282)
        {
          printf("%lld %d AVE %s: %s:%d ERROR: VTEncoderSessionEmitEncodedFrame failed. %d %d %d\n", v252, 46, v283, "SendFrame", 5078, v12, *(_DWORD *)(v146 + 20), *(_DWORD *)(v4 + 160));
          goto LABEL_385;
        }
LABEL_534:
        syslog(3, "%lld %d AVE %s: %s:%d ERROR: VTEncoderSessionEmitEncodedFrame failed. %d %d %d", v252);
LABEL_535:
        if (sbuf[0]) {
          CFRelease(sbuf[0]);
        }
        goto LABEL_537;
      }
      int v277 = v150[451];
      if (v277 == 3)
      {
        BOOL v278 = 1;
      }
      else
      {
        if (v150[526] == 21) {
          BOOL v278 = 1;
        }
        else {
          BOOL v278 = *(_DWORD *)(v445 + 380) >= 2u && *((unsigned char *)v191 + 148) != 0;
        }
        if (v277 == 2) {
          goto LABEL_393;
        }
      }
      if (!*(unsigned char *)(v436 + 4032))
      {
        BOOL v285 = 0;
        if (v277 == 1 && *(unsigned char *)(v434 + 206))
        {
          if (*(_WORD *)(v445 + 272))
          {
            BOOL v285 = v150[525] == *(unsigned __int16 *)(v445 + 272);
            if (v278) {
              goto LABEL_395;
            }
            goto LABEL_400;
          }
          BOOL v285 = 0;
        }
LABEL_394:
        if (v278)
        {
LABEL_395:
          char v286 = 1;
          BOOL v287 = 1;
          goto LABEL_401;
        }
LABEL_400:
        char v286 = 0;
        BOOL v287 = v277 == 0;
LABEL_401:
        if (sub_44EF8(0x2Eu, 7))
        {
          int v288 = sub_44F3C(0x2Eu);
          __uint64_t v289 = sub_4F1D8();
          int v290 = (const char *)sub_44F70(7);
          int v291 = v150[451];
          if (v288)
          {
            printf("%lld %d AVE %s: H264FrameRec: FrameType %d isSyncSample %d isIFrame %d\n", v289, 46, v290, v291, v278, v287);
            __uint64_t v292 = sub_4F1D8();
            sampleSizeArrayn = (size_t *)sub_44F70(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: FrameType %d isSyncSample %d isIFrame %d", v292, 46, (const char *)sampleSizeArrayn, v150[451], v278, v287);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: FrameType %d isSyncSample %d isIFrame %d", v289, 46, v290, v291, v278, v287);
          }
        }
        CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf[0], 1u);
        ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
        uint64_t v4 = v436;
        if (!ValueAtIndex) {
          goto LABEL_477;
        }
        int v295 = ValueAtIndex;
        if ((v286 & 1) == 0) {
          CFDictionarySetValue(ValueAtIndex, kCMSampleAttachmentKey_NotSync, kCFBooleanTrue);
        }
        if (v287) {
          int v296 = (const void **)&kCFBooleanFalse;
        }
        else {
          int v296 = (const void **)&kCFBooleanTrue;
        }
        CFDictionarySetValue(v295, kCMSampleAttachmentKey_DependsOnOthers, *v296);
        if (v285) {
          CFDictionarySetValue(v295, kCMSampleAttachmentKey_IsDependedOnByOthers, kCFBooleanFalse);
        }
        if (sub_44EF8(0x2Eu, 7))
        {
          int v297 = sub_44F3C(0x2Eu);
          __uint64_t v298 = sub_4F1D8();
          int v299 = (const char *)sub_44F70(7);
          int v300 = *(unsigned __int8 *)(v434 + 206);
          if (v297)
          {
            printf("%lld %d AVE %s: H264FrameRec: bIsHierarchical %d\n", v298, 46, v299, v300);
            __uint64_t v301 = sub_4F1D8();
            sampleSizeArrayo = (size_t *)sub_44F70(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: bIsHierarchical %d", v301, 46, (const char *)sampleSizeArrayo, *(unsigned __int8 *)(v434 + 206));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: bIsHierarchical %d", v298, 46, v299, v300);
          }
        }
        if (sub_44EF8(0x2Eu, 7))
        {
          int v302 = sub_44F3C(0x2Eu);
          __uint64_t v303 = sub_4F1D8();
          __uint64_t v304 = (const char *)sub_44F70(7);
          int v305 = *(_DWORD *)(v436 + 160);
          int v306 = v150[526];
          if (v302)
          {
            printf("%lld %d AVE %s: H264FrameRec: F %d FrameType %d nalUnitType %d\n", v303, 46, v304, v305, v150[451], v306);
            __uint64_t v307 = sub_4F1D8();
            v308 = (const char *)sub_44F70(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: F %d FrameType %d nalUnitType %d", v307, 46, v308, *(_DWORD *)(v436 + 160), v150[451], v150[526]);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: F %d FrameType %d nalUnitType %d", v303, 46, v304, v305, v150[451], v306);
          }
        }
        if (*(unsigned char *)(v434 + 206))
        {
          memcpy(__dst, v443 + 39612, sizeof(__dst));
          __uint64_t v309 = sub_28AAC((uint64_t)v443, __dst, v150[525]);
          if (v309)
          {
            uint64_t v310 = v309;
            CFDictionarySetValue(v295, kCMSampleAttachmentKey_HEVCTemporalLevelInfo, v309);
            CFRelease(v310);
          }
          if ((v150[526] & 0xFFFFFFFE) == 2) {
            CFBooleanRef v311 = kCFBooleanTrue;
          }
          else {
            CFBooleanRef v311 = kCFBooleanFalse;
          }
          CFDictionarySetValue(v295, kCMSampleAttachmentKey_HEVCTemporalSubLayerAccess, v311);
          if ((v150[526] & 0xFFFFFFFE) == 4) {
            CFBooleanRef v312 = kCFBooleanTrue;
          }
          else {
            CFBooleanRef v312 = kCFBooleanFalse;
          }
          CFDictionarySetValue(v295, kCMSampleAttachmentKey_HEVCStepwiseTemporalSubLayerAccess, v312);
        }
        v313 = v150;
        v314 = v439;
        if (*(_DWORD *)(v434 + 120) == 1 && (v313[526] - 19) <= 2)
        {
          CFNumberRef v315 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, v313 + 526);
          if (v315)
          {
            CFNumberRef v316 = v315;
            if (sub_44EF8(0x2Eu, 7))
            {
              int v317 = sub_44F3C(0x2Eu);
              __uint64_t v318 = sub_4F1D8();
              v319 = (const char *)sub_44F70(7);
              int v320 = *(_DWORD *)(v436 + 160);
              if (v317)
              {
                printf("%lld %d AVE %s: H264FrameRec: F %d NUT CRA\n", v318, 46, v319, v320);
                __uint64_t v321 = sub_4F1D8();
                sampleSizeArrayp = (size_t *)sub_44F70(7);
                syslog(3, "%lld %d AVE %s: H264FrameRec: F %d NUT CRA", v321, 46, (const char *)sampleSizeArrayp, *(_DWORD *)(v436 + 160));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: H264FrameRec: F %d NUT CRA", v318, 46, v319, v320);
              }
              v314 = v439;
            }
            CFDictionarySetValue(v295, kCMSampleAttachmentKey_HEVCSyncSampleNALUnitType, v316);
            CFRelease(v316);
          }
        }
        uint64_t v4 = v436;
        if ((*(unsigned char *)(v434 + 1736) & 0x10) != 0)
        {
          if (*v313 == 1)
          {
            CFNumberRef v325 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (const void *)(v436 + 160));
            if (v325)
            {
              CFNumberRef v326 = v325;
              CFDictionarySetValue(v295, kVTSampleAttachmentKey_RequireAcknowledgementToken, v325);
              CFRelease(v326);
            }
          }
          if (*((unsigned char *)v313 + 40) && *(_DWORD *)(v434 + 1828) != 1) {
            CFDictionarySetValue(v295, kVTSampleAttachmentKey_ReferenceWasRefreshed, kCFBooleanTrue);
          }
        }
        if ((*((unsigned char *)v314 + 11) & 8) != 0)
        {
          v327 = sub_2CE24(v433, *(_DWORD *)(v445 + 380));
          if (v327)
          {
            uint64_t v328 = v327;
            CFDictionarySetValue(v295, @"QualityMetrics", v327);
            CFRelease(v328);
          }
        }
        if (*(int *)(v146 + 16) >= 16 && (v444[73] & 0xE0) != 0)
        {
          CFNumberRef v329 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, (const void *)(v436 + 4036));
          if (v329)
          {
            CFNumberRef v330 = v329;
            CFDictionarySetValue(v295, kVTSampleAttachmentKey_TemporalNoiseReductionApplied, v329);
            CFRelease(v330);
          }
        }
        int v331 = *(_DWORD *)(v434 + 1828);
        if (v331 > 36)
        {
          uint64_t v332 = v313;
          if ((v331 - 37) >= 2 && v331 != 10000) {
            goto LABEL_477;
          }
          goto LABEL_475;
        }
        if (v331)
        {
          uint64_t v332 = v313;
          if (v331 != 1)
          {
            if (v331 != 20)
            {
LABEL_477:
              __uint64_t v155 = *(uint64_t **)v449;
              if (*(void *)v146)
              {
                if (*(unsigned char *)(v146 + 8))
                {
                  BOOL v335 = CFDataCreateMutable(kCFAllocatorDefault, 0);
                  if (v335)
                  {
                    v336 = v335;
                    CFDataAppendBytes(v335, (const UInt8 *)(v4 + 25350), 1574);
                    if (sub_44EF8(0x2Eu, 7))
                    {
                      int v337 = sub_44F3C(0x2Eu);
                      __uint64_t v338 = sub_4F1D8();
                      int v339 = (const char *)sub_44F70(7);
                      unsigned int v340 = *(_DWORD *)(v4 + 12);
                      if (v340 >= 2) {
                        unsigned int v340 = 2;
                      }
                      if (v337)
                      {
                        printf("%lld %d AVE %s: H264FrameRec: m_multiPassStorage multiPassEndPassCounter %d\n", v338, 46, v339, v340);
                        __uint64_t v338 = sub_4F1D8();
                        int v339 = (const char *)sub_44F70(7);
                        unsigned int v340 = *(_DWORD *)(v4 + 12);
                        if (v340 >= 2) {
                          unsigned int v340 = 2;
                        }
                      }
                      syslog(3, "%lld %d AVE %s: H264FrameRec: m_multiPassStorage multiPassEndPassCounter %d", v338, 46, v339, v340);
                    }
                    if (sub_44EF8(0xD8u, 7))
                    {
                      int v361 = sub_44F3C(0xD8u);
                      __uint64_t v362 = sub_4F1D8();
                      v363 = (const char *)sub_44F70(7);
                      if (v361)
                      {
                        printf("%lld %d AVE %s: RECV_PTS: val %lld, timeScale %d, flags 0x%x, epoch %lld\n", v362, 216, v363, *(void *)(v4 + 2296), *(_DWORD *)(v4 + 2304), *(_DWORD *)(v4 + 2308), *(void *)(v4 + 2312));
                        __uint64_t v362 = sub_4F1D8();
                        sub_44F70(7);
                      }
                      syslog(3, "%lld %d AVE %s: RECV_PTS: val %lld, timeScale %d, flags 0x%x, epoch %lld", v362);
                    }
                    if (VTMultiPassStorageSetDataAtTimeStamp() && sub_44EF8(0x2Eu, 4))
                    {
                      int v364 = sub_44F3C(0x2Eu);
                      __uint64_t v365 = sub_4F1D8();
                      v366 = (const char *)sub_44F70(4);
                      if (v364)
                      {
                        printf("%lld %d AVE %s: H264FrameRec ERROR: VTMultiPassStorageSetDataAtTimeStamp failed. need to set up a recovery here...\n", v365, 46, v366);
                        __uint64_t v367 = sub_4F1D8();
                        sampleSizeArrayq = (size_t *)sub_44F70(4);
                        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: VTMultiPassStorageSetDataAtTimeStamp failed. need to set up a recovery here...", v367, 46, (const char *)sampleSizeArrayq);
                      }
                      else
                      {
                        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: VTMultiPassStorageSetDataAtTimeStamp failed. need to set up a recovery here...", v365, 46, v366);
                      }
                    }
                    CFRelease(v336);
                  }
                }
              }
              kdebug_trace();
              if (*(unsigned char *)(v434 + 209)) {
                uint64_t v368 = VTEncoderSessionEmitEncodedTile();
              }
              else {
                uint64_t v368 = VTEncoderSessionEmitEncodedFrame();
              }
              uint64_t v12 = v368;
              kdebug_trace();
              if (!v12) {
                goto LABEL_535;
              }
              if (v12 == -12903)
              {
                if (sub_44EF8(0x2Eu, 5))
                {
                  int v369 = sub_44F3C(0x2Eu);
                  __uint64_t v249 = sub_4F1D8();
                  v370 = (const char *)sub_44F70(5);
                  if (v369)
                  {
                    printf("%lld %d AVE %s: %s:%d m_VTEncoderSession has already been invalidated. Dropping frame %d %d\n", v249, 46, v370, "SendFrame", 5027, *(_DWORD *)(v146 + 20), *(_DWORD *)(v4 + 160));
                    goto LABEL_528;
                  }
                  goto LABEL_532;
                }
                goto LABEL_533;
              }
              if (!sub_44EF8(0x2Eu, 4)) {
                goto LABEL_535;
              }
              int v372 = sub_44F3C(0x2Eu);
              __uint64_t v252 = sub_4F1D8();
              v373 = (const char *)sub_44F70(4);
              if (v372)
              {
                printf("%lld %d AVE %s: %s:%d ERROR: VTEncoderSessionEmitEncodedFrame failed. %d %d %d\n", v252, 46, v373, "SendFrame", 5036, v12, *(_DWORD *)(v146 + 20), *(_DWORD *)(v4 + 160));
                __uint64_t v374 = sub_4F1D8();
                sub_44F70(4);
                syslog(3, "%lld %d AVE %s: %s:%d ERROR: VTEncoderSessionEmitEncodedFrame failed. %d %d %d", v374);
                goto LABEL_535;
              }
              goto LABEL_534;
            }
LABEL_475:
            int valuePtr = *((unsigned __int8 *)v332 + 380);
            CFNumberRef v333 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
            if (v333)
            {
              CFNumberRef v334 = v333;
              CFDictionarySetValue(v295, kVTSampleAttachmentKey_EncoderRetryCount, v333);
              CFRelease(v334);
            }
            goto LABEL_477;
          }
          v350 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
          v351 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
          v352 = v313 + 17;
          uint64_t v353 = 4;
          do
          {
            sub_37D8C(*v352, v350);
            sub_37D8C(*(v352 - 4), v351);
            ++v352;
            --v353;
          }
          while (v353);
          CFDictionarySetValue(v295, kVTSampleAttachmentQualityMetricsKey_FrameInterSumSATD, v350);
          if (v350) {
            CFRelease(v350);
          }
          CFDictionarySetValue(v295, kVTSampleAttachmentQualityMetricsKey_FrameIntraSumSATD, v351);
          if (v351) {
            CFRelease(v351);
          }
          int v354 = *(_DWORD *)(v434 + 120);
          if (v354 == 1)
          {
            v375 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
            v376 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
            v356 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
            v377 = v313 + 57;
            uint64_t v378 = 4;
            do
            {
              sub_37D8C(*(v377 - 8), v375);
              sub_37D8C(*(v377 - 4), v376);
              unsigned int v379 = *v377++;
              sub_37D8C(v379, v356);
              --v378;
            }
            while (v378);
            CFDictionarySetValue(v295, kVTSampleAttachmentQualityMetricsKey_NumberOfIntra8x8Blocks, v375);
            if (v375) {
              CFRelease(v375);
            }
            CFDictionarySetValue(v295, kVTSampleAttachmentQualityMetricsKey_NumberOfInter8x8Blocks, v376);
            if (v376) {
              CFRelease(v376);
            }
            CFStringRef v360 = @"NumberOfSkipped8x8Blocks";
          }
          else
          {
            if (v354)
            {
              if (sub_44EF8(3u, 4))
              {
                int v388 = sub_44F3C(3u);
                __uint64_t v389 = sub_4F1D8();
                v390 = (const char *)sub_44F70(4);
                if (v388)
                {
                  printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codec type (%d) not recognized.\n", v389, 3, v390, "SendFrame", 4826, "false", *(_DWORD *)(v434 + 120));
                  __uint64_t v389 = sub_4F1D8();
                  v390 = (const char *)sub_44F70(4);
                }
                syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codec type (%d) not recognized.", v389, 3, v390, "SendFrame", 4826, "false", *(unsigned int *)(v434 + 120));
              }
              return 3758097084;
            }
            v355 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
            v356 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
            v357 = v313 + 57;
            uint64_t v358 = 4;
            do
            {
              sub_37D8C(*(v357 - 8), v355);
              unsigned int v359 = *v357++;
              sub_37D8C(v359, v356);
              --v358;
            }
            while (v358);
            CFDictionarySetValue(v295, kVTSampleAttachmentQualityMetricsKey_NumberOfIntraMB, v355);
            if (v355) {
              CFRelease(v355);
            }
            CFStringRef v360 = (const __CFString *)kVTSampleAttachmentQualityMetricsKey_NumberOfSkippedMB;
          }
          CFDictionarySetValue(v295, v360, v356);
          if (v356) {
            CFRelease(v356);
          }
          v380 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
          for (uint64_t i = 0; i != 16; i += 4)
            sub_37D8C(*(unsigned int *)(v436 + 21944 + i), v380);
          if (v380)
          {
            CFDictionarySetValue(v295, kVTSampleAttachmentQualityMetricsKey_CodedFrameResidualBits, v380);
            CFRelease(v380);
          }
          v382 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
          for (uint64_t j = 0; j != 16; j += 4)
            sub_37D8C(*(unsigned int *)(v436 + 21960 + j), v382);
          if (v382)
          {
            CFDictionarySetValue(v295, @"SliceDataLength", v382);
            CFRelease(v382);
          }
          if (!v439[10] || *(_DWORD *)(v434 + 120)) {
            goto LABEL_559;
          }
          v391 = *(const UInt8 **)&v443[2 * *(int *)(v436 + 916) + 6448];
          if (v391)
          {
            int v393 = *v439;
            int v392 = v439[1];
            v394 = CFDataCreateMutable(kCFAllocatorDefault, 0);
            if (v394)
            {
              v395 = v394;
              CFIndex v396 = 432 * ((v393 + 15) >> 4) * ((v392 + 15) >> 4);
              CFDataAppendBytes(v394, v391, v396);
              if (sub_44EF8(0x2Eu, 7))
              {
                int v397 = sub_44F3C(0x2Eu);
                __uint64_t v398 = sub_4F1D8();
                v399 = (const char *)sub_44F70(7);
                if (v397)
                {
                  printf("%lld %d AVE %s: H264FrameRec: EnableSelStatsFlags sending %d bytes out\n", v398, 46, v399, v396);
                  __uint64_t v400 = sub_4F1D8();
                  sampleSizeArrayr = (size_t *)sub_44F70(7);
                  syslog(3, "%lld %d AVE %s: H264FrameRec: EnableSelStatsFlags sending %d bytes out", v400, 46, (const char *)sampleSizeArrayr, v396);
                }
                else
                {
                  syslog(3, "%lld %d AVE %s: H264FrameRec: EnableSelStatsFlags sending %d bytes out", v398, 46, v399, v396);
                }
              }
              CFDictionarySetValue(v295, @"MBStatistics", v395);
              CFRelease(v395);
            }
LABEL_559:
            uint64_t v4 = v436;
            if (!*(unsigned char *)(v436 + 2656)) {
              goto LABEL_477;
            }
            v384 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            if (!v384) {
              goto LABEL_477;
            }
            v345 = v384;
            if (!sub_3B9C0((int *)(v436 + 920), v384))
            {
              CFDictionarySetValue(v295, kVTSampleAttachment_GetDPB, v345);
              uint64_t v385 = *(void *)(v436 + 2472);
              if ((v385 & 0x8000) != 0)
              {
                v386 = *(void **)(v146 + 5952);
                if (v386)
                {
                  sub_3DA5C(v386, v345, *(unsigned int *)(v436 + 160), *(unsigned int *)(v436 + 2664));
                  uint64_t v385 = *(void *)(v436 + 2472);
                }
              }
              if ((v385 & 0x10000) != 0)
              {
                v387 = *(void **)(v146 + 5952);
                if (v387) {
                  sub_3DED4(v387, v345, *(unsigned int *)(v436 + 160), v295);
                }
              }
            }
LABEL_589:
            CFRelease(v345);
            uint64_t v4 = v436;
            goto LABEL_477;
          }
          if (sub_44EF8(3u, 4))
          {
            int v401 = sub_44F3C(3u);
            __uint64_t v402 = sub_4F1D8();
            v403 = (const char *)sub_44F70(4);
            if (!v401) {
              goto LABEL_590;
            }
            int v404 = 4859;
            goto LABEL_583;
          }
        }
        else
        {
          if (!v314[10] || *(_DWORD *)(v434 + 120) || *(_DWORD *)(v434 + 124) != 1) {
            goto LABEL_477;
          }
          unsigned int v341 = *(const UInt8 **)&v443[2 * *(int *)(v436 + 916) + 6448];
          if (v341)
          {
            int v343 = *v439;
            int v342 = v439[1];
            v344 = CFDataCreateMutable(kCFAllocatorDefault, 0);
            uint64_t v4 = v436;
            if (!v344) {
              goto LABEL_477;
            }
            v345 = v344;
            CFIndex v346 = 432 * ((v343 + 15) >> 4) * ((v342 + 15) >> 4);
            CFDataAppendBytes(v344, v341, v346);
            if (sub_44EF8(0x2Eu, 7))
            {
              int v347 = sub_44F3C(0x2Eu);
              __uint64_t v348 = sub_4F1D8();
              v349 = (const char *)sub_44F70(7);
              if (v347)
              {
                printf("%lld %d AVE %s: H264FrameRec: AttachMVStats %d - EnableSelStatsFlags sending %d bytes out\n\n", v348, 46, v349, *(_DWORD *)(v434 + 124), v346);
                __uint64_t v348 = sub_4F1D8();
                v349 = (const char *)sub_44F70(7);
              }
              syslog(3, "%lld %d AVE %s: H264FrameRec: AttachMVStats %d - EnableSelStatsFlags sending %d bytes out\n", v348, 46, v349, *(_DWORD *)(v434 + 124), v346);
            }
            CFDictionarySetValue(v295, @"MBStatistics", v345);
            goto LABEL_589;
          }
          if (sub_44EF8(3u, 4))
          {
            int v405 = sub_44F3C(3u);
            __uint64_t v402 = sub_4F1D8();
            v403 = (const char *)sub_44F70(4);
            if (!v405)
            {
LABEL_590:
              syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: stat = NULL.");
              return 3758097084;
            }
            int v404 = 4918;
LABEL_583:
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: stat = NULL.\n", v402, 3, v403, "SendFrame", v404, "stat != __null");
            sub_4F1D8();
            sub_44F70(4);
            goto LABEL_590;
          }
        }
        return 3758097084;
      }
LABEL_393:
      BOOL v285 = 1;
      goto LABEL_394;
    }
    if (sub_44EF8(0x2Eu, 7))
    {
      int v213 = sub_44F3C(0x2Eu);
      __uint64_t v214 = sub_4F1D8();
      int v215 = (const char *)sub_44F70(7);
      if (v213)
      {
        printf("%lld %d AVE %s: BAIL for first layer\n", v214, 46, v215);
        sub_4F1D8();
        sub_44F70(7);
      }
      syslog(3, "%lld %d AVE %s: BAIL for first layer");
    }
    return 0;
  }
  if (*(int *)(v440 + 28) >= 1)
  {
    uint64_t v177 = 0;
    int v178 = v443 + 59842;
    while (*(_DWORD *)v140 == 0x1000000)
    {
      unsigned int v179 = v178[v177] - 4;
      if (sub_44EF8(0x2Eu, 7))
      {
        int v180 = sub_44F3C(0x2Eu);
        __uint64_t v181 = sub_4F1D8();
        uint64_t v182 = (const char *)sub_44F70(7);
        int v183 = *(_DWORD *)(v440 + 24);
        int v184 = *(_DWORD *)v140;
        if (v180)
        {
          printf("%lld %d AVE %s: H264FrameRec: insert m_SEI_size %d slice_size_fig %d &p_in[0] 0x%x\n", v181, 46, v182, v183, v179, v184);
          __uint64_t v181 = sub_4F1D8();
          uint64_t v182 = (const char *)sub_44F70(7);
          int v183 = *(_DWORD *)(v440 + 24);
          int v184 = *(_DWORD *)v140;
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec: insert m_SEI_size %d slice_size_fig %d &p_in[0] 0x%x", v181, 46, v182, v183, v179, v184);
        uint64_t v4 = v436;
      }
      *(_DWORD *)int v140 = bswap32(v179);
      uint64_t v185 = v178[v177];
      v140 += v185;
      int v186 = *(_DWORD *)(v440 + 24) - v185;
      *(_DWORD *)(v440 + 24) = v186;
      v178[v177++] = 0;
      if (v177 >= *(int *)(v440 + 28))
      {
        __uint64_t v155 = (uint64_t *)(v7 + 66);
        uint64_t v146 = v440;
        goto LABEL_293;
      }
    }
    if (sub_44EF8(3u, 4))
    {
      int v216 = sub_44F3C(3u);
      __uint64_t v217 = sub_4F1D8();
      int v218 = (const char *)sub_44F70(4);
      if (v216)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (0): *(uint32_t *)&p_in[0] != 0x01000000 (= 0x%x)\n", v217, 3, v218, "SendFrame", 4395, "*(uint32_t *)&p_in[0] == 0x01000000", *(_DWORD *)v140);
        __uint64_t v217 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (0): *(uint32_t *)&p_in[0] != 0x01000000 (= 0x%x)", v217);
      return 3758097085;
    }
    return 3758097085;
  }
  int v186 = *(_DWORD *)(v440 + 24);
LABEL_293:
  if (v186)
  {
    if (sub_44EF8(3u, 4))
    {
      int v210 = sub_44F3C(3u);
      __uint64_t v211 = sub_4F1D8();
      __uint64_t v212 = (const char *)sub_44F70(4);
      if (v210)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (0): SEI buffer error\n", v211, 3, v212, "SendFrame", 4405, "m_SEI_size == 0");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (0): SEI buffer error");
      return 3758097085;
    }
    return 3758097085;
  }
  *(void *)v448 = v155;
  unsigned int v219 = v443 + 7008;
  *(_DWORD *)(v146 + 28) = 0;
  uint64_t v220 = 32;
  do
  {
    uint64_t v221 = &v219[96 * *(int *)(v4 + 916)];
    unsigned int v222 = v221[2880] + *v221;
    if (!v222) {
      break;
    }
    unsigned int v223 = v222 - 4;
    if (*(_DWORD *)(v445 + 380) < 2u || *(_DWORD *)(v4 + 168))
    {
      unsigned int v224 = v150;
      v223 -= v444[7];
    }
    else
    {
      unsigned int v224 = v150;
    }
    if (sub_44EF8(0x2Eu, 7))
    {
      int v225 = sub_44F3C(0x2Eu);
      __uint64_t v226 = sub_4F1D8();
      __uint64_t v227 = (const char *)sub_44F70(7);
      int v228 = *(_DWORD *)v140;
      if (v225)
      {
        printf("%lld %d AVE %s: H264FrameRec: insert slice_size %d slice_size_fig %d slice # %d &p_in[0] 0x%x\n", v226, 46, v227, v222, v223, *(_DWORD *)(v436 + 916), v228);
        __uint64_t v229 = sub_4F1D8();
        uint64_t v230 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: insert slice_size %d slice_size_fig %d slice # %d &p_in[0] 0x%x", v229, 46, v230, v222, v223, *(_DWORD *)(v436 + 916), *(_DWORD *)v140);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: insert slice_size %d slice_size_fig %d slice # %d &p_in[0] 0x%x", v226, 46, v227, v222, v223, *(_DWORD *)(v436 + 916), v228);
      }
    }
    if (*(_DWORD *)v140 != 0x1000000)
    {
      if (!sub_44EF8(3u, 4)) {
        return 3758097085;
      }
      int v254 = sub_44F3C(3u);
      __uint64_t v255 = sub_4F1D8();
      int v256 = (const char *)sub_44F70(4);
      if (v254)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (1): *(uint32_t *)&p_in[0] != 0x01000000 (= 0x%x)\n", v255, 3, v256, "SendFrame", 4429, "*(uint32_t *)&p_in[0] == 0x01000000", *(_DWORD *)v140);
        __uint64_t v257 = sub_4F1D8();
        sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (1): *(uint32_t *)&p_in[0] != 0x01000000 (= 0x%x)", v257);
        return 3758097085;
      }
LABEL_449:
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (1): *(uint32_t *)&p_in[0] != 0x01000000 (= 0x%x)", v255);
      return 3758097085;
    }
    v219 += 3;
    *(_DWORD *)int v140 = bswap32(v223);
    v140 += v222;
    --v220;
    uint64_t v4 = v436;
    uint64_t v150 = v224;
  }
  while (v220);
  uint64_t v231 = v444[7];
  uint64_t v45 = v434;
  __uint64_t v155 = *(uint64_t **)v448;
  if ((int)v231 < 1) {
    goto LABEL_243;
  }
  CMBlockBufferRef v232 = v150;
  if (*(_DWORD *)(v445 + 380) >= 2u && !*(_DWORD *)(v4 + 168))
  {
LABEL_440:
    v444[7] = 0;
    uint64_t v150 = v232;
    goto LABEL_243;
  }
  uint64_t v233 = v146;
  unsigned int v234 = v231 - 4;
  uint64_t v235 = -v231;
  if (sub_44EF8(0x2Eu, 7))
  {
    int v236 = v232;
    int v237 = sub_44F3C(0x2Eu);
    __uint64_t v238 = sub_4F1D8();
    int v239 = (const char *)sub_44F70(7);
    if (v237)
    {
      printf("%lld %d AVE %s: H264FrameRec: insert filler size %d slice_size_fig %d slice # %d &p_in[0] 0x%x\n", v238, 46, v239, v444[7], v234, *(_DWORD *)(v4 + 916), *(_DWORD *)&v140[v235]);
      __uint64_t v238 = sub_4F1D8();
      sub_44F70(7);
    }
    syslog(3, "%lld %d AVE %s: H264FrameRec: insert filler size %d slice_size_fig %d slice # %d &p_in[0] 0x%x", v238);
    uint64_t v45 = v434;
    CMBlockBufferRef v232 = v236;
  }
  if (*(_DWORD *)&v140[v235] == 0x1000000)
  {
    *(_DWORD *)&v140[v235] = bswap32(v234);
    uint64_t v146 = v233;
    goto LABEL_440;
  }
  if (!sub_44EF8(3u, 4)) {
    return 3758097085;
  }
  int v322 = sub_44F3C(3u);
  __uint64_t v255 = sub_4F1D8();
  v323 = (const char *)sub_44F70(4);
  if (!v322) {
    goto LABEL_449;
  }
  printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (1): *(uint32_t *)&p_in[0] != 0x01000000 (= 0x%x)\n", v255, 3, v323, "SendFrame", 4455, "*(uint32_t *)&p_in[0] == 0x01000000", *(_DWORD *)&v140[v235]);
  __uint64_t v324 = sub_4F1D8();
  sub_44F70(4);
  syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (1): *(uint32_t *)&p_in[0] != 0x01000000 (= 0x%x)", v324);
  return 3758097085;
}

__CFDictionary *sub_2CE24(float *a1, int a2)
{
  LODWORD(v2) = a2;
  CFMutableDataRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    if (sub_44EF8(0xE2u, 4))
    {
      int v6 = sub_44F3C(0xE2u);
      __uint64_t v7 = sub_4F1D8();
      BOOL v8 = (const char *)sub_44F70(4);
      if (v6)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create CFDictionary\n", v7, 226, v8, "CreateQualityMetricsDictionary", 3539, "pQualityMetricsDict != __null");
        __uint64_t v9 = sub_4F1D8();
        int v32 = (const char *)sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDictionary", v9, 226, v32, "CreateQualityMetricsDictionary", 3539, "pQualityMetricsDict != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDictionary", v7, 226, v8, "CreateQualityMetricsDictionary", 3539, "pQualityMetricsDict != __null");
      }
    }
    return 0;
  }
  unsigned int v5 = Mutable;
  if ((int)v2 <= 1)
  {
    sub_38348(@"LumaMeanSquaredError", Mutable, a1[4]);
    sub_38348(@"ChromaBlueMeanSquaredError", v5, a1[5]);
    sub_38348(@"ChromaRedMeanSquaredError", v5, a1[6]);
    return v5;
  }
  CFMutableArrayRef v10 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  if (!v10)
  {
    if (sub_44EF8(0xE2u, 4))
    {
      int v18 = sub_44F3C(0xE2u);
      __uint64_t v19 = sub_4F1D8();
      unsigned int v20 = (const char *)sub_44F70(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create CFArray\n", v19, 226, v20, "CreateQualityMetricsDictionary", 3556, "pLumaMeanSquaredErrorArr != __null");
        __uint64_t v21 = sub_4F1D8();
        __uint64_t v33 = (const char *)sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v21, 226, v33, "CreateQualityMetricsDictionary", 3556, "pLumaMeanSquaredErrorArr != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v19, 226, v20, "CreateQualityMetricsDictionary", 3556, "pLumaMeanSquaredErrorArr != __null");
      }
    }
    goto LABEL_31;
  }
  CFMutableArrayRef v11 = v10;
  CFMutableArrayRef v12 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  if (!v12)
  {
    if (sub_44EF8(0xE2u, 4))
    {
      int v22 = sub_44F3C(0xE2u);
      __uint64_t v23 = sub_4F1D8();
      uint64_t v24 = (const char *)sub_44F70(4);
      if (v22)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create CFArray\n", v23, 226, v24, "CreateQualityMetricsDictionary", 3559, "pChromaBlueMeanSquaredErrorArr != __null");
        __uint64_t v25 = sub_4F1D8();
        uint64_t v34 = (const char *)sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v25, 226, v34, "CreateQualityMetricsDictionary", 3559, "pChromaBlueMeanSquaredErrorArr != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v23, 226, v24, "CreateQualityMetricsDictionary", 3559, "pChromaBlueMeanSquaredErrorArr != __null");
      }
    }
    int v30 = v11;
    goto LABEL_30;
  }
  int v13 = v12;
  CFMutableArrayRef v14 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  if (!v14)
  {
    if (sub_44EF8(0xE2u, 4))
    {
      int v26 = sub_44F3C(0xE2u);
      __uint64_t v27 = sub_4F1D8();
      unsigned int v28 = (const char *)sub_44F70(4);
      if (v26)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create CFArray\n", v27, 226, v28, "CreateQualityMetricsDictionary", 3562, "pChromaRedMeanSquaredErrorArr != __null");
        __uint64_t v29 = sub_4F1D8();
        int v35 = (const char *)sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v29, 226, v35, "CreateQualityMetricsDictionary", 3562, "pChromaRedMeanSquaredErrorArr != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v27, 226, v28, "CreateQualityMetricsDictionary", 3562, "pChromaRedMeanSquaredErrorArr != __null");
      }
    }
    CFRelease(v11);
    int v30 = v13;
LABEL_30:
    CFRelease(v30);
LABEL_31:
    CFRelease(v5);
    return 0;
  }
  int v15 = v14;
  uint64_t v2 = v2;
  int v16 = a1 + 6;
  do
  {
    sub_37FB0(v11, *(v16 - 2));
    sub_37FB0(v13, *(v16 - 1));
    float v17 = *v16;
    v16 += 12;
    sub_37FB0(v15, v17);
    --v2;
  }
  while (v2);
  CFDictionaryAddValue(v5, @"LumaMeanSquaredError", v11);
  CFDictionaryAddValue(v5, @"ChromaBlueMeanSquaredError", v13);
  CFDictionaryAddValue(v5, @"ChromaRedMeanSquaredError", v15);
  CFRelease(v11);
  CFRelease(v13);
  CFRelease(v15);
  return v5;
}

uint64_t sub_2D2DC(uint64_t a1, uint64_t a2)
{
  uint64_t result = pthread_mutex_lock((pthread_mutex_t *)a1);
  if (*(_DWORD *)(a1 + 200))
  {
    uint64_t v5 = *(void *)(a1 + 216) + 40 * *(unsigned int *)(a1 + 204);
    long long v6 = *(_OWORD *)v5;
    long long v7 = *(_OWORD *)(v5 + 16);
    *(void *)(a2 + 32) = *(void *)(v5 + 32);
    *(_OWORD *)a2 = v6;
    *(_OWORD *)(a2 + 16) = v7;
    return pthread_mutex_unlock((pthread_mutex_t *)a1);
  }
  return result;
}

uint64_t sub_2D34C(uint64_t a1, long long *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  while (*(_DWORD *)(a1 + 200) == *(_DWORD *)(a1 + 196))
  {
    gettimeofday((timeval *)(a1 + 176), 0);
    uint64_t v4 = 1000 * *(int *)(a1 + 184);
    *(void *)(a1 + 160) = *(void *)(a1 + 176) + 120;
    *(void *)(a1 + 168) = v4;
    if (pthread_cond_timedwait((pthread_cond_t *)(a1 + 112), (pthread_mutex_t *)a1, (const timespec *)(a1 + 160)) == 60)
    {
      if (sub_44EF8(0x2Au, 4))
      {
        int v5 = sub_44F3C(0x2Au);
        __uint64_t v6 = sub_4F1D8();
        long long v7 = (const char *)sub_44F70(4);
        int v8 = *(_DWORD *)(a1 + 200);
        if (v5)
        {
          printf("%lld %d AVE %s: H264 Connection: connection full %d\n", v6, 42, v7, v8);
          __uint64_t v9 = sub_4F1D8();
          __uint64_t v19 = (const char *)sub_44F70(4);
          syslog(3, "%lld %d AVE %s: H264 Connection: connection full %d", v9, 42, v19, *(_DWORD *)(a1 + 200));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264 Connection: connection full %d", v6, 42, v7, v8);
        }
      }
      uint64_t v10 = 0xFFFFFFFFLL;
      goto LABEL_14;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = *(void *)(a1 + 216) + 40 * *(unsigned int *)(a1 + 208);
  long long v12 = *a2;
  long long v13 = a2[1];
  *(void *)(v11 + 32) = *((void *)a2 + 4);
  *(_OWORD *)uint64_t v11 = v12;
  *(_OWORD *)(v11 + 16) = v13;
  int v14 = *(_DWORD *)(a1 + 208);
  unsigned int v16 = *(_DWORD *)(a1 + 196);
  int v15 = *(_DWORD *)(a1 + 200);
  *(_DWORD *)(a1 + 200) = v15 + 1;
  if (v14 + 1 < v16) {
    int v17 = v14 + 1;
  }
  else {
    int v17 = 0;
  }
  *(_DWORD *)(a1 + 208) = v17;
  if (!v15)
  {
    pthread_cond_signal((pthread_cond_t *)(a1 + 64));
    uint64_t v10 = 0;
  }
LABEL_14:
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v10;
}

uint64_t sub_2D4D4(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  uint64_t v2 = (CFRunLoopRef *)(a1 + 51232);
  uint64_t v3 = *(const void **)(a1 + 51232);
  if (v3)
  {
    CFRetain(v3);
    if (sub_44EF8(0x2Eu, 7))
    {
      int v4 = sub_44F3C(0x2Eu);
      __uint64_t v5 = sub_4F1D8();
      __uint64_t v6 = (const char *)sub_44F70(7);
      if (v4)
      {
        printf("%lld %d AVE %s: H264FrameRec: RemoveIODispatcherFromRunLoop to CFRunLoopRun.\n", v5, 46, v6);
        __uint64_t v7 = sub_4F1D8();
        int v14 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: RemoveIODispatcherFromRunLoop to CFRunLoopRun.", v7, 46, v14);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: RemoveIODispatcherFromRunLoop to CFRunLoopRun.", v5, 46, v6);
      }
    }
    sub_1B334(a1);
    CFRunLoopStop(*v2);
    CFRelease(*v2);
    uint64_t v8 = 0;
    *uint64_t v2 = 0;
  }
  else
  {
    uint64_t v8 = 3758097084;
    if (sub_44EF8(0x2Eu, 4))
    {
      int v9 = sub_44F3C(0x2Eu);
      __uint64_t v10 = sub_4F1D8();
      uint64_t v11 = (const char *)sub_44F70(4);
      if (v9)
      {
        printf("%lld %d AVE %s: H264FrameRec ERROR: runLoopRef NULL\n", v10, 46, v11);
        __uint64_t v12 = sub_4F1D8();
        int v15 = (const char *)sub_44F70(4);
        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: runLoopRef NULL", v12, 46, v15);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: runLoopRef NULL", v10, 46, v11);
      }
    }
  }
  return v8;
}

uint64_t sub_2D644(void *a1, uint64_t a2, pthread_attr_t *a3, pthread_t *a4)
{
  v15[0] = 0;
  uint64_t v16 = 0;
  uint64_t v17 = a2;
  pthread_attr_init(a3);
  if (pthread_attr_getschedparam(a3, &v14))
  {
    if (sub_44EF8(3u, 4))
    {
      int v7 = sub_44F3C(3u);
      __uint64_t v8 = sub_4F1D8();
      int v9 = (const char *)sub_44F70(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: pthread_attr_getschedparam failed.\n", v8, 3, v9, "CreateH264VideoEncoderFrameReceiver", 5886, "err == noErr");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: pthread_attr_getschedparam failed.");
    }
  }
  else
  {
    v14.sched_priority = 47;
    if (pthread_attr_setschedparam(a3, &v14))
    {
      if (sub_44EF8(3u, 4))
      {
        int v10 = sub_44F3C(3u);
        __uint64_t v11 = sub_4F1D8();
        __uint64_t v12 = (const char *)sub_44F70(4);
        if (v10)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: pthread_attr_setschedparam failed.\n", v11, 3, v12, "CreateH264VideoEncoderFrameReceiver", 5889, "err == noErr");
          sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: pthread_attr_setschedparam failed.");
      }
    }
    else
    {
      pthread_create(a4, a3, (void *(__cdecl *)(void *))sub_2D87C, v15);
      while (!v15[0])
        usleep(0x3E8u);
      *a1 = v16;
    }
  }
  if (*a1) {
    return 0;
  }
  else {
    return 3758097084;
  }
}

void sub_2D87C(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  operator new();
}

void sub_2D9EC()
{
}

void sub_2DA10(unsigned char *a1, pthread_attr_t *a2, pthread_t *a3)
{
  sub_2D4D4((uint64_t)a1);
  pthread_join(*a3, 0);
  if (*a1 && sub_44EF8(3u, 4))
  {
    int v6 = sub_44F3C(3u);
    __uint64_t v7 = sub_4F1D8();
    __uint64_t v8 = (const char *)sub_44F70(4);
    if (v6)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: wait for H264VideoEncoderFrameReceiver thread failed.\n", v7, 3, v8, "DestroyH264VideoEncoderFrameReceiver", 5917, "pFrameReceiver->m_moreWorkToDo == false");
      __uint64_t v9 = sub_4F1D8();
      sched_param v14 = (const char *)sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: wait for H264VideoEncoderFrameReceiver thread failed.", v9, 3, v14, "DestroyH264VideoEncoderFrameReceiver", 5917, "pFrameReceiver->m_moreWorkToDo == false");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: wait for H264VideoEncoderFrameReceiver thread failed.", v7, 3, v8, "DestroyH264VideoEncoderFrameReceiver", 5917, "pFrameReceiver->m_moreWorkToDo == false");
    }
    if (!a2) {
      goto LABEL_7;
    }
  }
  else if (!a2)
  {
    goto LABEL_7;
  }
  pthread_attr_destroy(a2);
LABEL_7:
  if (sub_44EF8(0x2Eu, 7))
  {
    int v10 = sub_44F3C(0x2Eu);
    __uint64_t v11 = sub_4F1D8();
    __uint64_t v12 = (const char *)sub_44F70(7);
    if (v10)
    {
      printf("%lld %d AVE %s: H264FrameRec: Destroy pFrameReciever %p sz %lu\n", v11, 46, v12, a1, 245296);
      __uint64_t v13 = sub_4F1D8();
      int v15 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: H264FrameRec: Destroy pFrameReciever %p sz %lu", v13, 46, v15, a1, 245296);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264FrameRec: Destroy pFrameReciever %p sz %lu", v11, 46, v12, a1, 245296);
    }
  }
  sub_1AAF4(a1);
  operator delete();
}

uint64_t sub_2DC00(uint64_t a1)
{
  *(_OWORD *)(a1 + 25352) = 0u;
  *(void *)(a1 + 25368) = 0;
  *(_OWORD *)(a1 + 25384) = 0u;
  *(_OWORD *)(a1 + 25400) = 0u;
  *(_OWORD *)(a1 + 25416) = 0u;
  *(_OWORD *)(a1 + 25432) = 0u;
  *(_OWORD *)(a1 + 25448) = 0u;
  *(_OWORD *)(a1 + 25464) = 0u;
  sub_2DC84((void *)a1);
  return a1;
}

void sub_2DC54(_Unwind_Exception *a1)
{
  sub_2DE40(v1 + 3179);
  sub_2DE40(v2);
  int v4 = (void *)v1[3169];
  if (v4)
  {
    v1[3170] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

double sub_2DC84(void *a1)
{
  uint64_t v2 = a1 + 3185;
  sub_2DCDC((unint64_t)a1);
  *uint64_t v2 = 0;
  a1[3186] = 0;
  a1[3220] = 0;
  bzero(a1 + 3187, 0x108uLL);
  v2[23] = 0;
  double result = 0.0;
  a1[3168] = 0;
  v2[72] = 0;
  return result;
}

void sub_2DCDC(unint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 25352);
  uint64_t v3 = *(void **)(a1 + 25352);
  if (v3)
  {
    *(void *)(a1 + 25360) = v3;
    operator delete(v3);
  }
  *uint64_t v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  int v4 = *(void ***)(a1 + 25392);
  uint64_t v5 = *(void *)(a1 + 25400);
  *(void *)(a1 + 25424) = 0;
  unint64_t v6 = v5 - (void)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      int v4 = (void **)(*(void *)(a1 + 25392) + 8);
      *(void *)(a1 + 25392) = v4;
      unint64_t v6 = *(void *)(a1 + 25400) - (void)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    uint64_t v7 = 256;
  }
  else
  {
    if (v6 >> 3 != 2) {
      goto LABEL_10;
    }
    uint64_t v7 = 512;
  }
  *(void *)(a1 + 25416) = v7;
LABEL_10:
  __uint64_t v8 = *(void ***)(a1 + 25440);
  uint64_t v9 = *(void *)(a1 + 25448);
  *(void *)(a1 + 25472) = 0;
  unint64_t v10 = v9 - (void)v8;
  if (v10 >= 0x11)
  {
    do
    {
      operator delete(*v8);
      __uint64_t v8 = (void **)(*(void *)(a1 + 25440) + 8);
      *(void *)(a1 + 25440) = v8;
      unint64_t v10 = *(void *)(a1 + 25448) - (void)v8;
    }
    while (v10 > 0x10);
  }
  if (v10 >> 3 == 1)
  {
    uint64_t v11 = 256;
    goto LABEL_16;
  }
  if (v10 >> 3 == 2)
  {
    uint64_t v11 = 512;
LABEL_16:
    *(void *)(a1 + 25464) = v11;
  }
  uint64_t v12 = 0;
  int64x2_t v13 = (int64x2_t)xmmword_837C0;
  int64x2_t v14 = vdupq_n_s64(2uLL);
  int64x2_t v15 = vaddq_s64(vdupq_n_s64(a1), v14);
  do
  {
    v16.i64[0] = 1574 * v13.i64[0];
    v16.i64[1] = 1574 * v13.i64[1];
    *(int64x2_t *)(a1 + 25192 + v12) = vaddq_s64(v15, v16);
    int64x2_t v13 = vaddq_s64(v13, v14);
    v12 += 16;
  }
  while (v12 != 128);
  *(_DWORD *)(a1 + 25320) = 16;
}

uint64_t sub_2DE40(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_2DEE8((uint64_t)a1);
}

uint64_t sub_2DEE8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_2DF38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = *(_DWORD *)(a2 + 18568);
  int v5 = *(_DWORD *)(a2 + 1688);
  int v6 = *(_DWORD *)(a2 + 1692);
  *(_DWORD *)(a3 + 16) = sub_36CF8(*(_DWORD *)(a1 + 188164), v4, *(unsigned __int8 *)(a2 + 1732));
  *(_DWORD *)(a3 + 20) = sub_36D04(v4, v5, v6);
  return 0;
}

uint64_t sub_2DFA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + 188164;
  int v6 = *(_DWORD *)(a1 + 188164);
  int v7 = *(_DWORD *)(v5 + 12);
  if (v7) {
    int v8 = 2;
  }
  else {
    int v8 = *(_DWORD *)(a2 + 18208);
  }
  BOOL v9 = *(_DWORD *)(a3 + 160) == 0;
  BOOL v10 = *(void *)(a3 + 21632) != 0;
  *(_DWORD *)(a4 + 40) = sub_36D48(v6, v8, v7);
  *(_DWORD *)(a4 + 44) = sub_36D5C(v9, v10);
  return 0;
}

uint64_t sub_2E028(int a1, int a2)
{
  bzero(v15, 0x6E0uLL);
  if (sub_44EF8(0x28u, 6))
  {
    int v4 = sub_44F3C(0x28u);
    __uint64_t v5 = sub_4F1D8();
    int v6 = (const char *)sub_44F70(6);
    if (v4)
    {
      printf("%lld %d AVE %s: %s Enter %d %d\n", v5, 40, v6, "AVE_USL_Drv_Create", a1, a2);
      __uint64_t v5 = sub_4F1D8();
      int v6 = (const char *)sub_44F70(6);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %d %d", v5, 40, v6, "AVE_USL_Drv_Create", a1, a2);
  }
  int v7 = malloc_type_malloc(0x2DF20uLL, 0x10200405B383B17uLL);
  if (v7)
  {
    bzero(v7, 0x2DF20uLL);
    operator new();
  }
  if (sub_44EF8(0x28u, 4))
  {
    int v8 = sub_44F3C(0x28u);
    __uint64_t v9 = sub_4F1D8();
    BOOL v10 = (const char *)sub_44F70(4);
    if (v8)
    {
      printf("%lld %d AVE %s: %s:%d %s | fail to allocate %d %d\n", v9, 40, v10, "AVE_USL_Drv_Create", 329, "pINS != __null", a1, a2);
      __uint64_t v9 = sub_4F1D8();
      BOOL v10 = (const char *)sub_44F70(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to allocate %d %d", v9, 40, v10, "AVE_USL_Drv_Create", 329, "pINS != __null", a1, a2);
  }
  if (sub_44EF8(0x28u, 6))
  {
    BOOL v11 = sub_44F3C(0x28u) == 0;
    __uint64_t v12 = sub_4F1D8();
    int64x2_t v13 = (const char *)sub_44F70(6);
    if (!v11)
    {
      printf("%lld %d AVE %s: %s Exit %d %d %d\n", v12, 40, v13, "AVE_USL_Drv_Create", a1, a2, -1003);
      __uint64_t v12 = sub_4F1D8();
      int64x2_t v13 = (const char *)sub_44F70(6);
    }
    syslog(3, "%lld %d AVE %s: %s Exit %d %d %d", v12, 40, v13, "AVE_USL_Drv_Create", a1, a2, -1003);
  }
  return 4294966293;
}

void sub_2E75C()
{
}

uint64_t sub_2E788(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 188156);
  }
  return result;
}

uint64_t sub_2E79C(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 188160);
  }
  return result;
}

uint64_t sub_2E7B0(unsigned int *a1)
{
  uint64_t v33 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  memset(v30, 0, sizeof(v30));
  if (sub_44EF8(0x28u, 6))
  {
    int v2 = sub_44F3C(0x28u);
    __uint64_t v3 = sub_4F1D8();
    int v4 = (const char *)sub_44F70(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", v3, 40, v4, "AVE_USL_Drv_Destroy", a1);
      __uint64_t v5 = sub_4F1D8();
      __uint64_t v25 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 40, v25, "AVE_USL_Drv_Destroy", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", v3, 40, v4, "AVE_USL_Drv_Destroy", a1);
    }
  }
  if (a1)
  {
    sub_2EC4C((uint64_t)a1);
    if (*(void *)a1)
    {
      *(void *)&long long v31 = a1[47040];
      DWORD2(v32) = 118000;
      uint64_t v33 = (uint64_t)sub_4F1D8() / 1000;
      uint64_t v6 = sub_541E8(*(const void ***)a1, &v31, v30);
      if (v6)
      {
        uint64_t v7 = v6;
        if (!sub_44EF8(0x28u, 4))
        {
LABEL_27:
          free(a1);
          goto LABEL_28;
        }
        int v8 = sub_44F3C(0x28u);
        __uint64_t v9 = sub_4F1D8();
        BOOL v10 = (const char *)sub_44F70(4);
        if (v8)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to close client %d\n", v9, 40, v10, "AVE_USL_Drv_Destroy", 468, "ret == 0", v7);
          __uint64_t v11 = sub_4F1D8();
          sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to close client %d", v11);
          goto LABEL_27;
        }
        uint64_t v29 = v7;
        uint64_t v28 = 468;
        int v26 = v10;
        __uint64_t v19 = "%lld %d AVE %s: %s:%d %s | fail to close client %d";
LABEL_26:
        syslog(3, v19, v9, 40, v26, "AVE_USL_Drv_Destroy", v28, "ret == 0", v29);
        goto LABEL_27;
      }
      uint64_t v15 = sub_53B50(*(const void ***)a1);
      if (v15)
      {
        uint64_t v7 = v15;
        if (!sub_44EF8(0x28u, 4)) {
          goto LABEL_27;
        }
        int v16 = sub_44F3C(0x28u);
        __uint64_t v9 = sub_4F1D8();
        uint64_t v17 = (const char *)sub_44F70(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to close driver %d\n", v9, 40, v17, "AVE_USL_Drv_Destroy", 472, "ret == 0", v7);
          __uint64_t v18 = sub_4F1D8();
          sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to close driver %d", v18);
          goto LABEL_27;
        }
        uint64_t v29 = v7;
        uint64_t v28 = 472;
        int v26 = v17;
        __uint64_t v19 = "%lld %d AVE %s: %s:%d %s | fail to close driver %d";
        goto LABEL_26;
      }
      if (*(void *)a1)
      {
        sub_51E64(*(void **)a1);
        operator delete();
      }
    }
    uint64_t v7 = 0;
    goto LABEL_27;
  }
  if (sub_44EF8(0x28u, 4))
  {
    int v12 = sub_44F3C(0x28u);
    __uint64_t v13 = sub_4F1D8();
    int64x2_t v14 = (const char *)sub_44F70(4);
    if (v12)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p\n", v13, 40, v14, "AVE_USL_Drv_Destroy", 453, "pDrv != __null", 0);
      __uint64_t v13 = sub_4F1D8();
      sub_44F70(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p", v13);
  }
  uint64_t v7 = 4294966295;
LABEL_28:
  if (sub_44EF8(0x28u, 6))
  {
    int v20 = sub_44F3C(0x28u);
    __uint64_t v21 = sub_4F1D8();
    int v22 = (const char *)sub_44F70(6);
    if (v20)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v21, 40, v22, "AVE_USL_Drv_Destroy", a1, v7);
      __uint64_t v23 = sub_4F1D8();
      __uint64_t v27 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v23, 40, v27, "AVE_USL_Drv_Destroy", a1, v7);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v21, 40, v22, "AVE_USL_Drv_Destroy", a1, v7);
    }
  }
  return v7;
}

uint64_t sub_2EC4C(uint64_t a1)
{
  uint64_t v2 = a1 + 188056;
  __uint64_t v3 = *(unsigned char **)(a1 + 188056);
  if (v3) {
    sub_2DA10(v3, (pthread_attr_t *)(a1 + 188080), (pthread_t *)(a1 + 188144));
  }
  uint64_t v4 = *(void *)(v2 + 8);
  if (v4)
  {
    sub_33F00(v4);
    operator delete();
  }
  uint64_t v5 = *(void *)(v2 + 16);
  if (v5)
  {
    sub_33F00(v5);
    operator delete();
  }
  sub_37A00(a1 + 72);

  return sub_3757C((uint64_t *)(a1 + 64));
}

void sub_2ED0C(uint64_t a1, int a2)
{
  pthread_mutex_init((pthread_mutex_t *)a1, 0);
  pthread_cond_init((pthread_cond_t *)(a1 + 64), 0);
  pthread_cond_init((pthread_cond_t *)(a1 + 112), 0);
  if ((a2 - 129) >= 0xFFFFFF80) {
    int v4 = a2;
  }
  else {
    int v4 = 128;
  }
  *(_DWORD *)(a1 + 192) = v4;
  *(_DWORD *)(a1 + 196) = v4;
  *(void *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  operator new[]();
}

uint64_t sub_2ED90(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  int v2 = *(_DWORD *)(a1 + 200);
  if (v2)
  {
    *(_DWORD *)(a1 + 200) = v2 - 1;
    int v3 = *(_DWORD *)(a1 + 208);
    if (!v3) {
      int v3 = *(_DWORD *)(a1 + 196);
    }
    *(_DWORD *)(a1 + 208) = v3 - 1;
  }
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return 0;
}

uint64_t sub_2EDE4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  while (!*(_DWORD *)(a1 + 200))
  {
    gettimeofday((timeval *)(a1 + 176), 0);
    uint64_t v6 = 1000000 * (a3 % 0x3E8) + 1000 * *(_DWORD *)(a1 + 184);
    *(void *)(a1 + 160) = *(void *)(a1 + 176) + a3 / 0x3E8uLL;
    *(void *)(a1 + 168) = v6;
    if (pthread_cond_timedwait((pthread_cond_t *)(a1 + 64), (pthread_mutex_t *)a1, (const timespec *)(a1 + 160)) == 60)
    {
      uint64_t v7 = 0xFFFFFFFFLL;
      goto LABEL_10;
    }
  }
  uint64_t v7 = 0;
  uint64_t v8 = *(void *)(a1 + 216) + 40 * *(unsigned int *)(a1 + 204);
  long long v9 = *(_OWORD *)v8;
  long long v10 = *(_OWORD *)(v8 + 16);
  *(void *)(a2 + 32) = *(void *)(v8 + 32);
  *(_OWORD *)a2 = v9;
  *(_OWORD *)(a2 + 16) = v10;
  int v12 = *(_DWORD *)(a1 + 200);
  int v11 = *(_DWORD *)(a1 + 204);
  unsigned int v13 = *(_DWORD *)(a1 + 196);
  if (v11 + 1 < v13) {
    int v14 = v11 + 1;
  }
  else {
    int v14 = 0;
  }
  *(_DWORD *)(a1 + 200) = v12 - 1;
  *(_DWORD *)(a1 + 204) = v14;
  if (v12 == v13)
  {
    pthread_cond_signal((pthread_cond_t *)(a1 + 112));
    uint64_t v7 = 0;
  }
LABEL_10:
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v7;
}

uint64_t sub_2EF00(void **a1, uint64_t *a2, int a3)
{
  int v52 = -1;
  if (sub_44EF8(0x28u, 7))
  {
    int v6 = sub_44F3C(0x28u);
    __uint64_t v7 = sub_4F1D8();
    uint64_t v8 = (const char *)sub_44F70(7);
    if (v6)
    {
      printf("%lld %d AVE %s: ENTER AVE_USL_Drv_Stop.\n", v7, 40, v8);
      __uint64_t v9 = sub_4F1D8();
      uint64_t v43 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: ENTER AVE_USL_Drv_Stop.", v9, 40, v43);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: ENTER AVE_USL_Drv_Stop.", v7, 40, v8);
    }
  }
  if (a1)
  {
    uint64_t v51 = *a2;
    if (sub_31A00(a1, &v51) == -1004 && !*((unsigned char *)a1 + 9))
    {
      uint64_t v23 = 4294966292;
    }
    else
    {
      char v47 = 0;
      sub_52624(*a1, 67360, &v47);
      sub_532E8(*a1, v47, &v52);
      long long v10 = v47;
      if (!v47)
      {
        if (sub_44EF8(3u, 4))
        {
          int v18 = sub_44F3C(3u);
          __uint64_t v19 = sub_4F1D8();
          int v20 = (const char *)sub_44F70(4);
          if (v18)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.\n", v19, 3, v20, "AVE_USL_Drv_Stop", 1185, "Frame");
            __uint64_t v21 = sub_4F1D8();
            uint64_t v45 = (const char *)sub_44F70(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.", v21, 3, v45, "AVE_USL_Drv_Stop", 1185, "Frame");
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.", v19, 3, v20, "AVE_USL_Drv_Stop", 1185, "Frame");
          }
        }
        uint64_t v23 = 4294966293;
        goto LABEL_34;
      }
      bzero(v47 + 8, 0x10718uLL);
      *(_DWORD *)long long v10 = v52;
      *((_DWORD *)v10 + 1) = 6;
      *((_DWORD *)v10 + 40) = *((_DWORD *)a1 + 3);
      *((void *)v10 + 3459) = *a2;
      v10[8] = a1[23521] != 0;
      *((_DWORD *)v10 + 3) = *((_DWORD *)a1 + 47044);
      LODWORD(v47) = v52;
      if (sub_2D34C((uint64_t)a1[23509], (long long *)&v47))
      {
        if (sub_44EF8(3u, 4))
        {
          int v11 = sub_44F3C(3u);
          __uint64_t v12 = sub_4F1D8();
          unsigned int v13 = (const char *)sub_44F70(4);
          if (v11)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread\n", v12, 3, v13, "AVE_USL_Drv_Stop", 1207, "res == 0");
            sub_4F1D8();
            sub_44F70(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread");
        }
      }
      else
      {
        uint64_t v50 = 0;
        long long v49 = 0u;
        long long v48 = 0u;
        memset(v46, 0, sizeof(v46));
        char v47 = (char *)*((unsigned int *)a1 + 47040);
        LODWORD(v50) = v52;
        LODWORD(v49) = 118000;
        *((void *)&v49 + 1) = (uint64_t)sub_4F1D8() / 1000;
        uint64_t v22 = sub_54ED8((const void **)*a1, &v47, v46);
        if (v22)
        {
          uint64_t v23 = v22;
          uint64_t v24 = (pthread_mutex_t *)a1[23509];
          pthread_mutex_lock(v24);
          int v25 = *(_DWORD *)v24[3].__opaque;
          if (v25)
          {
            *(_DWORD *)v24[3].__opaque = v25 - 1;
            int sig_high = *(_DWORD *)&v24[3].__opaque[8];
            if (!sig_high) {
              int sig_high = HIDWORD(v24[3].__sig);
            }
            *(_DWORD *)&v24[3].__opaque[8] = sig_high - 1;
          }
          pthread_mutex_unlock(v24);
          if (sub_44EF8(0x28u, 4))
          {
            int v27 = sub_44F3C(0x28u);
            __uint64_t v28 = sub_4F1D8();
            uint64_t v29 = (const char *)sub_44F70(4);
            if (v27)
            {
              printf("%lld %d AVE %s: %s:%d %s | fail to process %d\n", v28, 40, v29, "AVE_USL_Drv_Stop", 1224, "ret == 0", v23);
              __uint64_t v28 = sub_4F1D8();
              sub_44F70(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to process %d", v28);
          }
          goto LABEL_34;
        }
        int v36 = sub_2EDE4((uint64_t)a1[23508], (uint64_t)&v47, 0x1D4C0u);
        if (v47 == v52)
        {
          if (!v36)
          {
            uint64_t v23 = 0;
            goto LABEL_34;
          }
          if (sub_44EF8(3u, 4))
          {
            int v37 = sub_44F3C(3u);
            __uint64_t v38 = sub_4F1D8();
            __uint64_t v39 = (const char *)sub_44F70(4);
            if (v37)
            {
              printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread\n", v38, 3, v39, "AVE_USL_Drv_Stop", 1236, "res == 0");
              sub_4F1D8();
              sub_44F70(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread");
          }
        }
        else if (sub_44EF8(3u, 4))
        {
          int v40 = sub_44F3C(3u);
          __uint64_t v41 = sub_4F1D8();
          uint64_t v42 = (const char *)sub_44F70(4);
          if (v40)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder ERROR: status.counter != counter.\n", v41, 3, v42, "AVE_USL_Drv_Stop", 1235, "status.counter == counter");
            sub_4F1D8();
            sub_44F70(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder ERROR: status.counter != counter.");
        }
      }
      uint64_t v23 = 4294966296;
    }
LABEL_34:
    if (a3) {
      sub_2EC4C((uint64_t)a1);
    }
    *((_WORD *)a1 + 4) = 0;
    goto LABEL_37;
  }
  if (sub_44EF8(3u, 4))
  {
    int v14 = sub_44F3C(3u);
    __uint64_t v15 = sub_4F1D8();
    int v16 = (const char *)sub_44F70(4);
    if (v14)
    {
      printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Stop, Null pointer for driver data.\n", v15, 3, v16, "AVE_USL_Drv_Stop", 1162, "pDriverInstance");
      __uint64_t v17 = sub_4F1D8();
      uint64_t v44 = (const char *)sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Stop, Null pointer for driver data.", v17, 3, v44, "AVE_USL_Drv_Stop", 1162, "pDriverInstance");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Stop, Null pointer for driver data.", v15, 3, v16, "AVE_USL_Drv_Stop", 1162, "pDriverInstance");
    }
  }
  uint64_t v23 = 4294966295;
LABEL_37:
  if (sub_44EF8(0x28u, 7))
  {
    int v30 = sub_44F3C(0x28u);
    __uint64_t v31 = sub_4F1D8();
    long long v32 = (const char *)sub_44F70(7);
    if (v30)
    {
      if (a1) {
        int v33 = *((_DWORD *)a1 + 3);
      }
      else {
        int v33 = 0;
      }
      printf("%lld %d AVE %s: EXIT AVE_USL_Drv_Stop F %d %d\n", v31, 40, v32, v33, v23);
      __uint64_t v31 = sub_4F1D8();
      long long v32 = (const char *)sub_44F70(7);
      if (a1) {
        goto LABEL_45;
      }
    }
    else if (a1)
    {
LABEL_45:
      int v34 = *((_DWORD *)a1 + 3);
      goto LABEL_46;
    }
    int v34 = 0;
LABEL_46:
    syslog(3, "%lld %d AVE %s: EXIT AVE_USL_Drv_Stop F %d %d", v31, 40, v32, v34, v23);
  }
  return v23;
}

uint64_t sub_2F698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10, void *a11)
{
  uint64_t v11 = __chkstk_darwin();
  unsigned int v13 = v12;
  char v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  int v26 = (void **)v11;
  int v160 = -1;
  bzero(v161, 0x2DFE8uLL);
  bzero(v157, 0x2D0uLL);
  if (sub_44EF8(0x28u, 7))
  {
    int v27 = sub_44F3C(0x28u);
    __uint64_t v28 = sub_4F1D8();
    uint64_t v29 = (const char *)sub_44F70(7);
    if (v27)
    {
      printf("%lld %d AVE %s: ENTER AVE_USL_Drv_Start.\n", v28, 40, v29);
      __uint64_t v28 = sub_4F1D8();
      uint64_t v29 = (const char *)sub_44F70(7);
    }
    syslog(3, "%lld %d AVE %s: ENTER AVE_USL_Drv_Start.", v28, 40, v29);
  }
  if (!v26)
  {
    if (sub_44EF8(3u, 4))
    {
      int v36 = sub_44F3C(3u);
      __uint64_t v37 = sub_4F1D8();
      __uint64_t v38 = (const char *)sub_44F70(4);
      if (v36)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for driver data.\n", v37, 3, v38, "AVE_USL_Drv_Start", 792, "pDriverInstance");
        __uint64_t v37 = sub_4F1D8();
        __uint64_t v38 = (const char *)sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for driver data.", v37, 3, v38, "AVE_USL_Drv_Start", 792, "pDriverInstance");
    }
    goto LABEL_157;
  }
  if (!v25)
  {
    if (sub_44EF8(3u, 4))
    {
      int v39 = sub_44F3C(3u);
      __uint64_t v40 = sub_4F1D8();
      __uint64_t v41 = (const char *)sub_44F70(4);
      if (v39)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for AppleAVEVA_InitSettings.\n", v40, 3, v41, "AVE_USL_Drv_Start", 793, "pInitSettings");
        __uint64_t v40 = sub_4F1D8();
        __uint64_t v41 = (const char *)sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for AppleAVEVA_InitSettings.", v40, 3, v41, "AVE_USL_Drv_Start", 793, "pInitSettings");
    }
    goto LABEL_157;
  }
  int v30 = *(void **)v25;
  if (!*(void *)v25)
  {
    if (sub_44EF8(3u, 4))
    {
      int v42 = sub_44F3C(3u);
      __uint64_t v43 = sub_4F1D8();
      uint64_t v44 = (const char *)sub_44F70(4);
      if (v42)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pClientParams.\n", v43, 3, v44, "AVE_USL_Drv_Start", 795, "pInitSettings->pClientParams");
        __uint64_t v43 = sub_4F1D8();
        uint64_t v44 = (const char *)sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pClientParams.", v43, 3, v44, "AVE_USL_Drv_Start", 795, "pInitSettings->pClientParams");
    }
    goto LABEL_157;
  }
  if (!*(void *)(v25 + 8))
  {
    if (sub_44EF8(3u, 4))
    {
      int v45 = sub_44F3C(3u);
      __uint64_t v46 = sub_4F1D8();
      char v47 = (const char *)sub_44F70(4);
      if (v45)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pVideoParams.\n", v46, 3, v47, "AVE_USL_Drv_Start", 796, "pInitSettings->pVideoParams");
        __uint64_t v46 = sub_4F1D8();
        char v47 = (const char *)sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pVideoParams.", v46, 3, v47, "AVE_USL_Drv_Start", 796, "pInitSettings->pVideoParams");
    }
    goto LABEL_157;
  }
  uint64_t v31 = *(void *)(v25 + 16);
  if (!v31)
  {
    if (sub_44EF8(3u, 4))
    {
      int v48 = sub_44F3C(3u);
      __uint64_t v49 = sub_4F1D8();
      uint64_t v50 = (const char *)sub_44F70(4);
      if (v48)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pVideoParamsDriver.\n", v49, 3, v50, "AVE_USL_Drv_Start", 797, "pInitSettings->pVideoParamsDriver");
        __uint64_t v49 = sub_4F1D8();
        uint64_t v50 = (const char *)sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pVideoParamsDriver.", v49, 3, v50, "AVE_USL_Drv_Start", 797, "pInitSettings->pVideoParamsDriver");
    }
    goto LABEL_157;
  }
  if (!*(void *)(v25 + 24))
  {
    if (sub_44EF8(3u, 4))
    {
      int v51 = sub_44F3C(3u);
      __uint64_t v52 = sub_4F1D8();
      char v53 = (const char *)sub_44F70(4);
      if (v51)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pRCParams.\n", v52, 3, v53, "AVE_USL_Drv_Start", 798, "pInitSettings->pRCParams");
        __uint64_t v52 = sub_4F1D8();
        char v53 = (const char *)sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pRCParams.", v52, 3, v53, "AVE_USL_Drv_Start", 798, "pInitSettings->pRCParams");
    }
    goto LABEL_157;
  }
  int v32 = *(_DWORD *)(v31 + 120);
  if (v32 == 1)
  {
    if (!*(void *)(v25 + 80))
    {
      if (sub_44EF8(3u, 4))
      {
        int v62 = sub_44F3C(3u);
        __uint64_t v63 = sub_4F1D8();
        unsigned int v64 = (const char *)sub_44F70(4);
        if (v62)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for VPSHevcParams.\n", v63, 3, v64, "AVE_USL_Drv_Start", 812, "pInitSettings->VPSHevcParams");
          __uint64_t v63 = sub_4F1D8();
          unsigned int v64 = (const char *)sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for VPSHevcParams.", v63, 3, v64, "AVE_USL_Drv_Start", 812, "pInitSettings->VPSHevcParams");
      }
      goto LABEL_157;
    }
    if (!*(void *)(v25 + 88))
    {
      if (sub_44EF8(3u, 4))
      {
        int v68 = sub_44F3C(3u);
        __uint64_t v69 = sub_4F1D8();
        int v70 = (const char *)sub_44F70(4);
        if (v68)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SPSHevcParams.\n", v69, 3, v70, "AVE_USL_Drv_Start", 813, "pInitSettings->psaHEVC_SPS[0]");
          __uint64_t v69 = sub_4F1D8();
          int v70 = (const char *)sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SPSHevcParams.", v69, 3, v70, "AVE_USL_Drv_Start", 813, "pInitSettings->psaHEVC_SPS[0]");
      }
      goto LABEL_157;
    }
    if (!*(void *)(v25 + 104))
    {
      if (sub_44EF8(3u, 4))
      {
        int v71 = sub_44F3C(3u);
        __uint64_t v72 = sub_4F1D8();
        int v73 = (const char *)sub_44F70(4);
        if (v71)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for PPSHevcParams.\n", v72, 3, v73, "AVE_USL_Drv_Start", 814, "pInitSettings->psaHEVC_PPS[0]");
          __uint64_t v72 = sub_4F1D8();
          int v73 = (const char *)sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for PPSHevcParams.", v72, 3, v73, "AVE_USL_Drv_Start", 814, "pInitSettings->psaHEVC_PPS[0]");
      }
      goto LABEL_157;
    }
    if (!*(void *)(v25 + 120))
    {
      if (sub_44EF8(3u, 4))
      {
        int v90 = sub_44F3C(3u);
        __uint64_t v91 = sub_4F1D8();
        int v92 = (const char *)sub_44F70(4);
        if (v90)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SHHevcParams.\n", v91, 3, v92, "AVE_USL_Drv_Start", 815, "pInitSettings->SHHevcParams");
          __uint64_t v91 = sub_4F1D8();
          int v92 = (const char *)sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SHHevcParams.", v91, 3, v92, "AVE_USL_Drv_Start", 815, "pInitSettings->SHHevcParams");
      }
      goto LABEL_157;
    }
    if (!*(void *)(v25 + 128))
    {
      if (sub_44EF8(3u, 4))
      {
        int v96 = sub_44F3C(3u);
        __uint64_t v97 = sub_4F1D8();
        int v98 = (const char *)sub_44F70(4);
        if (v96)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for RPSHevcParams.\n", v97, 3, v98, "AVE_USL_Drv_Start", 816, "pInitSettings->RPSHevcParams");
          __uint64_t v97 = sub_4F1D8();
          int v98 = (const char *)sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for RPSHevcParams.", v97, 3, v98, "AVE_USL_Drv_Start", 816, "pInitSettings->RPSHevcParams");
      }
      goto LABEL_157;
    }
  }
  else
  {
    if (v32)
    {
      if (sub_44EF8(3u, 4))
      {
        int v56 = sub_44F3C(3u);
        __uint64_t v57 = sub_4F1D8();
        long long v58 = (const char *)sub_44F70(4);
        if (v56)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, codec type not recognized = %d\n", v57, 3, v58, "AVE_USL_Drv_Start", 820, "false", *(_DWORD *)(*(void *)(v25 + 16) + 120));
          __uint64_t v57 = sub_4F1D8();
          long long v58 = (const char *)sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, codec type not recognized = %d", v57, 3, v58, "AVE_USL_Drv_Start", 820, "false", *(_DWORD *)(*(void *)(v25 + 16) + 120));
      }
      goto LABEL_157;
    }
    if (!*(void *)(v25 + 56))
    {
      if (sub_44EF8(3u, 4))
      {
        int v59 = sub_44F3C(3u);
        __uint64_t v60 = sub_4F1D8();
        __uint64_t v61 = (const char *)sub_44F70(4);
        if (v59)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SPSParams.\n", v60, 3, v61, "AVE_USL_Drv_Start", 804, "pInitSettings->SPSParams");
          __uint64_t v60 = sub_4F1D8();
          __uint64_t v61 = (const char *)sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SPSParams.", v60, 3, v61, "AVE_USL_Drv_Start", 804, "pInitSettings->SPSParams");
      }
      goto LABEL_157;
    }
    if (!*(void *)(v25 + 64))
    {
      if (sub_44EF8(3u, 4))
      {
        int v65 = sub_44F3C(3u);
        __uint64_t v66 = sub_4F1D8();
        uint64_t v67 = (const char *)sub_44F70(4);
        if (v65)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for PPSParams.\n", v66, 3, v67, "AVE_USL_Drv_Start", 805, "pInitSettings->PPSParams");
          __uint64_t v66 = sub_4F1D8();
          uint64_t v67 = (const char *)sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for PPSParams.", v66, 3, v67, "AVE_USL_Drv_Start", 805, "pInitSettings->PPSParams");
      }
      goto LABEL_157;
    }
    if (!*(void *)(v25 + 72))
    {
      if (sub_44EF8(3u, 4))
      {
        int v33 = sub_44F3C(3u);
        __uint64_t v34 = sub_4F1D8();
        int v35 = (const char *)sub_44F70(4);
        if (v33)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SHParams.\n", v34, 3, v35, "AVE_USL_Drv_Start", 806, "pInitSettings->SHParams");
          __uint64_t v34 = sub_4F1D8();
          int v35 = (const char *)sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SHParams.", v34, 3, v35, "AVE_USL_Drv_Start", 806, "pInitSettings->SHParams");
      }
LABEL_157:
      uint64_t v83 = 4294966295;
      goto LABEL_158;
    }
  }
  int v54 = v26 + 23507;
  v26[23521] = v13;
  v26[225] = (void *)*v30;
  int v151 = v26 + 226;
  memcpy(v26 + 226, *(const void **)(v25 + 8), 0x4178uLL);
  uint64_t v150 = v26 + 2321;
  memcpy(v26 + 2321, *(const void **)(v25 + 16), 0x6C0uLL);
  memcpy(v26 + 15, *(const void **)(v25 + 24), 0x690uLL);
  int v55 = *(_DWORD *)(*(void *)(v25 + 16) + 120);
  if (v55 == 1)
  {
    __uint64_t v152 = v26 + 23507;
    __src = v26 + 15;
    uint64_t v155 = v25;
    memcpy(v26 + 3126, *(const void **)(v25 + 80), 0x140E8uLL);
    uint64_t v74 = 0;
    char v75 = 1;
    do
    {
      int v76 = v26;
      char v77 = v75;
      uint64_t v78 = v155 + 8 * v74;
      uint64_t v79 = *(const void **)(v78 + 88);
      if (v79) {
        memcpy((char *)v76 + 7924 * v74 + 107160, v79, 0x1EF4uLL);
      }
      char v80 = *(const void **)(v78 + 104);
      int v26 = v76;
      if (v80) {
        memcpy((char *)v76 + 9636 * v74 + 123008, v80, 0x25A4uLL);
      }
      char v75 = 0;
      uint64_t v74 = 1;
    }
    while ((v77 & 1) != 0);
    char v81 = v76 + 17785;
    uint64_t v25 = v155;
    memcpy(v81, *(const void **)(v155 + 120), 0x54F8uLL);
    memcpy(v26 + 20504, *(const void **)(v155 + 128), 0x5DD8uLL);
    int v54 = v152;
  }
  else
  {
    if (v55)
    {
      if (sub_44EF8(3u, 4))
      {
        int v87 = sub_44F3C(3u);
        __uint64_t v88 = sub_4F1D8();
        int v89 = (const char *)sub_44F70(4);
        if (v87)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, codec type not recognized = %d\n", v88, 3, v89, "AVE_USL_Drv_Start", 865, "false", *(_DWORD *)(*(void *)(v25 + 16) + 120));
          __uint64_t v88 = sub_4F1D8();
          int v89 = (const char *)sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, codec type not recognized = %d", v88, 3, v89, "AVE_USL_Drv_Start", 865, "false", *(_DWORD *)(*(void *)(v25 + 16) + 120));
      }
      goto LABEL_157;
    }
    __src = v26 + 15;
    memcpy(v26 + 2537, *(const void **)(v25 + 56), 0x6B8uLL);
    memcpy(v26 + 2752, *(const void **)(v25 + 64), 0x184uLL);
    memcpy((char *)v26 + 22404, *(const void **)(v25 + 72), 0xA2CuLL);
  }
  v54[16] = *(void **)(v25 + 48);
  sub_2DF38((uint64_t)v26, (uint64_t)__src, (uint64_t)(v26 + 2));
  uint64_t v82 = sub_372A4((_DWORD *)v26 + 4, *((_DWORD *)v54 + 26), (uint64_t *)v26 + 8);
  if (v82)
  {
    uint64_t v83 = v82;
    if (sub_44EF8(0x28u, 4))
    {
      int v84 = sub_44F3C(0x28u);
      __uint64_t v85 = sub_4F1D8();
      uint64_t v86 = (const char *)sub_44F70(4);
      if (v84)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create surfaces %d %d\n", v85, 40, v86, "AVE_USL_Drv_Start", 876, "ret == 0", *((_DWORD *)v54 + 26), v83);
        __uint64_t v85 = sub_4F1D8();
        uint64_t v86 = (const char *)sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create surfaces %d %d", v85, 40, v86, "AVE_USL_Drv_Start", 876, "ret == 0", *((_DWORD *)v54 + 26), v83);
    }
    goto LABEL_158;
  }
  int v153 = v54;
  if (!*((unsigned char *)v26 + 18702))
  {
    memset(v156, 0, sizeof(v156));
    operator new();
  }
  memset((char *)&v156[4] + 8, 0, 184);
  memset((char *)&v156[2] + 8, 0, 32);
  *(void *)&v156[0] = *v26;
  *(int8x16_t *)((char *)v156 + 8) = vextq_s8(*(int8x16_t *)(v54 + 1), *(int8x16_t *)(v54 + 1), 8uLL);
  *((void *)&v156[1] + 1) = v21;
  *(void *)&v156[2] = v19;
  *((void *)&v156[4] + 1) = v17;
  if (v23)
  {
    long long v93 = v23[1];
    *(long long *)((char *)&v156[2] + 8) = *v23;
    *(long long *)((char *)&v156[3] + 8) = v93;
  }
  *(void *)&v156[5] = v26 + 225;
  *((void *)&v156[5] + 1) = v151;
  *(void *)&v156[6] = v150;
  *((void *)&v156[6] + 1) = __src;
  v156[7] = *(_OWORD *)(v25 + 32);
  int v94 = *(_DWORD *)(*(void *)(v25 + 16) + 120);
  if (v94 == 1)
  {
    __uint64_t v95 = (char *)v26 + 18702;
    memset(&v156[8], 0, 24);
    *((void *)&v156[9] + 1) = v26 + 3126;
    *(void *)&v156[10] = v26 + 13395;
    *((void *)&v156[10] + 1) = (char *)v26 + 115084;
    *(void *)&v156[11] = v26 + 15376;
    *((void *)&v156[11] + 1) = (char *)v26 + 132644;
    *(void *)&v156[12] = v26 + 17785;
    *((void *)&v156[12] + 1) = v26 + 20504;
  }
  else
  {
    if (v94)
    {
      if (sub_44EF8(3u, 4))
      {
        int v106 = sub_44F3C(3u);
        __uint64_t v107 = sub_4F1D8();
        uint64_t v108 = (const char *)sub_44F70(4);
        if (v106)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, codec type not recognized = %d\n", v107, 3, v108, "AVE_USL_Drv_Start", 1019, "false", *(_DWORD *)(*(void *)(v25 + 16) + 120));
          __uint64_t v107 = sub_4F1D8();
          uint64_t v108 = (const char *)sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, codec type not recognized = %d", v107, 3, v108, "AVE_USL_Drv_Start", 1019, "false", *(_DWORD *)(*(void *)(v25 + 16) + 120));
      }
      goto LABEL_157;
    }
    __uint64_t v95 = (char *)v26 + 18702;
    *(void *)&v156[8] = v26 + 2537;
    *((void *)&v156[8] + 1) = v26 + 2752;
    *(void *)&v156[9] = (char *)v26 + 22404;
  }
  LOBYTE(v156[13]) = v15;
  unsigned int v99 = *((_DWORD *)v54 + 24);
  unsigned int v100 = *((_DWORD *)v54 + 27);
  HIDWORD(v156[13]) = *((_DWORD *)v54 + 26);
  *(void *)((char *)&v156[13] + 4) = __PAIR64__(v99, v100);
  unsigned int v101 = v54[16];
  *(void *)&v156[14] = v13;
  *(void *)&v156[15] = v101;
  unsigned int v102 = v54;
  if (sub_1A72C((uint64_t)*v54, (uint64_t)v156))
  {
    if (sub_44EF8(3u, 4))
    {
      BOOL v103 = sub_44F3C(3u) == 0;
      __uint64_t v104 = sub_4F1D8();
      __uint64_t v105 = (const char *)sub_44F70(4);
      if (!v103)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: CreateH264VideoEncoderFrameReceiver failed.\n", v104, 3, v105, "AVE_USL_Drv_Start", 1032, "ret == 0");
        __uint64_t v104 = sub_4F1D8();
        __uint64_t v105 = (const char *)sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: CreateH264VideoEncoderFrameReceiver failed.", v104, 3, v105, "AVE_USL_Drv_Start", 1032, "ret == 0");
    }
LABEL_180:
    uint64_t v83 = 4294966293;
    goto LABEL_158;
  }
  *(void *)&v156[0] = 0;
  sub_52624(*v26, 67360, v156);
  sub_532E8(*v26, *(const void **)&v156[0], &v160);
  uint64_t v109 = *(void *)&v156[0];
  if (!*(void *)&v156[0])
  {
    if (sub_44EF8(3u, 4))
    {
      BOOL v118 = sub_44F3C(3u) == 0;
      __uint64_t v119 = sub_4F1D8();
      unsigned int v120 = (const char *)sub_44F70(4);
      if (!v118)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.\n", v119, 3, v120, "AVE_USL_Drv_Start", 1045, "Frame");
        __uint64_t v119 = sub_4F1D8();
        unsigned int v120 = (const char *)sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.", v119, 3, v120, "AVE_USL_Drv_Start", 1045, "Frame");
    }
    goto LABEL_180;
  }
  bzero((void *)(*(void *)&v156[0] + 8), 0x10718uLL);
  *(_DWORD *)uint64_t v109 = v160;
  *(_DWORD *)(v109 + 4) = 5;
  *(_DWORD *)(v109 + 160) = *((_DWORD *)v26 + 3);
  *(void *)(v109 + 27672) = *(void *)(v25 + 136);
  *(unsigned char *)(v109 + 8) = v153[14] != 0;
  *(_DWORD *)(v109 + 12) = *((_DWORD *)v153 + 30);
  LODWORD(v156[0]) = v160;
  if (sub_2D34C((uint64_t)v153[2], v156))
  {
    if (sub_44EF8(3u, 4))
    {
      BOOL v115 = sub_44F3C(3u) == 0;
      __uint64_t v116 = sub_4F1D8();
      int v117 = (const char *)sub_44F70(4);
      if (!v115)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread\n", v116, 3, v117, "AVE_USL_Drv_Start", 1069, "res == 0");
        __uint64_t v116 = sub_4F1D8();
        int v117 = (const char *)sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread", v116, 3, v117, "AVE_USL_Drv_Start", 1069, "res == 0");
    }
LABEL_165:
    uint64_t v83 = 4294966296;
    goto LABEL_166;
  }
  LOBYTE(v121) = a9;
  v161[0] = *((unsigned int *)v153 + 26);
  if (!a9) {
    int v121 = &unk_5EB27;
  }
  sub_4D5BC(v164, 128, "%s", v110, v111, v112, v113, v114, (char)v121);
  int v177 = v160;
  if (v95[75]) {
    int v122 = 2;
  }
  else {
    int v122 = 1;
  }
  long long v123 = *(_OWORD *)((char *)v26 + 20212);
  long long v124 = *(_OWORD *)((char *)v26 + 20228);
  long long v125 = *(_OWORD *)((char *)v26 + 20260);
  long long v173 = *(_OWORD *)((char *)v26 + 20244);
  long long v174 = v125;
  long long v171 = v123;
  long long v172 = v124;
  long long v167 = *((_OWORD *)v26 + 1260);
  long long v168 = *((_OWORD *)v26 + 1261);
  long long v169 = *((_OWORD *)v26 + 1262);
  long long v166 = *((_OWORD *)v26 + 1259);
  int v126 = *((_DWORD *)v26 + 5069);
  int v170 = *((_DWORD *)v26 + 5052);
  int v175 = v126;
  int v165 = v122;
  int v162 = 118000;
  uint64_t v163 = (uint64_t)sub_4F1D8() / 1000;
  memcpy(v176, __src, sizeof(v176));
  *(void *)(v109 + 27696) = sub_4F1D8();
  uint64_t v83 = sub_54A9C((const void **)*v26, v161, v157);
  if (v83)
  {
    sub_2ED90((uint64_t)v102[2]);
    if (sub_44EF8(0x28u, 4))
    {
      BOOL v127 = sub_44F3C(0x28u) == 0;
      __uint64_t v128 = sub_4F1D8();
      __uint64_t v129 = (const char *)sub_44F70(4);
      if (!v127)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to start %d\n", v128, 40, v129, "AVE_USL_Drv_Start", 1097, "ret == 0", v83);
        __uint64_t v128 = sub_4F1D8();
        __uint64_t v129 = (const char *)sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to start %d", v128, 40, v129, "AVE_USL_Drv_Start", 1097, "ret == 0", v83);
    }
    if (v83 == -1003) {
      goto LABEL_180;
    }
LABEL_166:
    *(void *)&v156[0] = *(void *)(v25 + 136);
    sub_2EF00(v26, (uint64_t *)v156, 0);
    goto LABEL_158;
  }
  int v134 = sub_2EDE4((uint64_t)v102[1], (uint64_t)v156, 0x1D4C0u);
  if (LODWORD(v156[0]) != v160)
  {
    if (sub_44EF8(3u, 4))
    {
      BOOL v138 = sub_44F3C(3u) == 0;
      __uint64_t v139 = sub_4F1D8();
      int v140 = (const char *)sub_44F70(4);
      if (!v138)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: status.counter != counter.\n", v139, 3, v140, "AVE_USL_Drv_Start", 1108, "status.counter == counter");
        __uint64_t v139 = sub_4F1D8();
        int v140 = (const char *)sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: status.counter != counter.", v139, 3, v140, "AVE_USL_Drv_Start", 1108, "status.counter == counter");
    }
    goto LABEL_165;
  }
  if (LODWORD(v156[2]))
  {
    if (sub_44EF8(3u, 4))
    {
      BOOL v135 = sub_44F3C(3u) == 0;
      __uint64_t v136 = sub_4F1D8();
      uint64_t v137 = (const char *)sub_44F70(4);
      if (!v135)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: errorCode = 0x%08x.\n", v136, 3, v137, "AVE_USL_Drv_Start", 1109, "status.errorCode == 0", LODWORD(v156[2]));
        __uint64_t v136 = sub_4F1D8();
        uint64_t v137 = (const char *)sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: errorCode = 0x%08x.", v136, 3, v137, "AVE_USL_Drv_Start", 1109, "status.errorCode == 0", LODWORD(v156[2]));
    }
    goto LABEL_165;
  }
  if (v134)
  {
    if (sub_44EF8(3u, 4))
    {
      BOOL v141 = sub_44F3C(3u) == 0;
      __uint64_t v142 = sub_4F1D8();
      long long v143 = (const char *)sub_44F70(4);
      if (!v141)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread\n", v142, 3, v143, "AVE_USL_Drv_Start", 1110, "res == 0");
        __uint64_t v142 = sub_4F1D8();
        long long v143 = (const char *)sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread", v142, 3, v143, "AVE_USL_Drv_Start", 1110, "res == 0");
    }
    goto LABEL_165;
  }
  if (sub_318E8((uint64_t)v102[2], v158))
  {
    if (sub_44EF8(3u, 4))
    {
      BOOL v144 = sub_44F3C(3u) == 0;
      __uint64_t v145 = sub_4F1D8();
      uint64_t v146 = (const char *)sub_44F70(4);
      if (!v144)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Set FrameReceiverInput connection size fail %d\n", v145, 3, v146, "AVE_USL_Drv_Start", 1115, "ret == 0", v158);
        __uint64_t v145 = sub_4F1D8();
        uint64_t v146 = (const char *)sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Set FrameReceiverInput connection size fail %d", v145, 3, v146, "AVE_USL_Drv_Start", 1115, "ret == 0", v158);
      goto LABEL_165;
    }
LABEL_199:
    uint64_t v83 = 4294966296;
    goto LABEL_166;
  }
  if (sub_318E8((uint64_t)v102[1], v158))
  {
    if (sub_44EF8(3u, 4))
    {
      BOOL v147 = sub_44F3C(3u) == 0;
      __uint64_t v148 = sub_4F1D8();
      int v149 = (const char *)sub_44F70(4);
      if (!v147)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Set FrameReceiverOutput connection size fail %d\n", v148, 3, v149, "AVE_USL_Drv_Start", 1117, "ret == 0", v158);
        __uint64_t v148 = sub_4F1D8();
        int v149 = (const char *)sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Set FrameReceiverOutput connection size fail %d", v148, 3, v149, "AVE_USL_Drv_Start", 1117, "ret == 0", v158);
      goto LABEL_165;
    }
    goto LABEL_199;
  }
  if (a10) {
    *a10 = v158;
  }
  if (a11) {
    memcpy(a11, v159, 0x2A8uLL);
  }
  uint64_t v83 = 0;
  *((unsigned char *)v26 + 8) = 1;
LABEL_158:
  if (sub_44EF8(0x28u, 7))
  {
    BOOL v130 = sub_44F3C(0x28u) == 0;
    __uint64_t v131 = sub_4F1D8();
    int v132 = (const char *)sub_44F70(7);
    if (!v130)
    {
      printf("%lld %d AVE %s: EXIT H264VideoEncoderVA_DriverInit err %d.\n", v131, 40, v132, v83);
      __uint64_t v131 = sub_4F1D8();
      int v132 = (const char *)sub_44F70(7);
    }
    syslog(3, "%lld %d AVE %s: EXIT H264VideoEncoderVA_DriverInit err %d.", v131, 40, v132, v83);
  }
  return v83;
}

void sub_318B8()
{
}

uint64_t sub_318E8(uint64_t a1, unsigned int a2)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  if (*(_DWORD *)(a1 + 200) || *(_DWORD *)(a1 + 192) < a2)
  {
    if (sub_44EF8(0x2Au, 4))
    {
      int v4 = sub_44F3C(0x2Au);
      __uint64_t v5 = sub_4F1D8();
      int v6 = (const char *)sub_44F70(4);
      if (v4)
      {
        printf("%lld %d AVE %s: configure connection size fail %d %d %d %d\n", v5, 42, v6, *(_DWORD *)(a1 + 200), *(_DWORD *)(a1 + 192), *(_DWORD *)(a1 + 196), a2);
        __uint64_t v5 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: configure connection size fail %d %d %d %d", v5);
    }
    uint64_t v7 = 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = 0;
    *(_DWORD *)(a1 + 196) = a2;
    *(_DWORD *)(a1 + 204) = 0;
    *(_DWORD *)(a1 + 208) = 0;
  }
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v7;
}

uint64_t sub_31A00(void **a1, void *a2)
{
  unsigned int v55 = -1;
  if (sub_44EF8(0x28u, 7))
  {
    int v4 = sub_44F3C(0x28u);
    __uint64_t v5 = sub_4F1D8();
    int v6 = (const char *)sub_44F70(7);
    if (v4)
    {
      printf("%lld %d AVE %s: ENTER H264VideoEncoderVA_DriverEncodeCompleteFrames.\n", v5, 40, v6);
      __uint64_t v7 = sub_4F1D8();
      __uint64_t v46 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: ENTER H264VideoEncoderVA_DriverEncodeCompleteFrames.", v7, 40, v46);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: ENTER H264VideoEncoderVA_DriverEncodeCompleteFrames.", v5, 40, v6);
    }
  }
  if (a1)
  {
    if (!*((unsigned char *)a1 + 8))
    {
      uint64_t v17 = 4294966292;
      goto LABEL_33;
    }
    int v51 = 0;
    sub_52624(*a1, 67360, &v51);
    sub_532E8(*a1, v51, &v55);
    uint64_t v8 = v51;
    if (v51)
    {
      __uint64_t v9 = (pthread_mutex_t **)(a1 + 23508);
      bzero(v51 + 8, 0x10718uLL);
      *(_DWORD *)uint64_t v8 = v55;
      *((_DWORD *)v8 + 1) = 8;
      *((_DWORD *)v8 + 40) = *((_DWORD *)a1 + 3);
      *((void *)v8 + 3459) = *a2;
      v8[8] = a1[23521] != 0;
      *((_DWORD *)v8 + 3) = *((_DWORD *)a1 + 47044);
      LODWORD(v51) = v55;
      if (sub_2D34C((uint64_t)a1[23509], (long long *)&v51))
      {
        if (sub_44EF8(3u, 4))
        {
          int v10 = sub_44F3C(3u);
          __uint64_t v11 = sub_4F1D8();
          __uint64_t v12 = (const char *)sub_44F70(4);
          if (v10)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread\n", v11, 3, v12, "AVE_USL_Drv_Complete", 1302, "res == 0");
            sub_4F1D8();
            sub_44F70(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread");
        }
LABEL_30:
        uint64_t v17 = 4294966296;
        goto LABEL_33;
      }
      uint64_t v54 = 0;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      int v51 = (char *)*((unsigned int *)a1 + 47040);
      LODWORD(v54) = v55;
      LODWORD(v53) = 118000;
      *((void *)&v53 + 1) = (uint64_t)sub_4F1D8() / 1000;
      uint64_t v22 = sub_55750((const void **)*a1, &v51, &v49);
      if (!v22)
      {
        int v33 = *v9;
        pthread_mutex_lock(*v9);
        while (1)
        {
          int v34 = *(_DWORD *)v33[3].__opaque;
          if (v34) {
            break;
          }
          gettimeofday((timeval *)&v33[2].__opaque[40], 0);
          uint64_t v35 = (1000 * *(_DWORD *)&v33[2].__opaque[48]);
          *(void *)&v33[2].__opaque[24] = *(void *)&v33[2].__opaque[40] + 120;
          *(void *)&v33[2].__opaque[32] = v35;
          if (pthread_cond_timedwait((pthread_cond_t *)&v33[1], v33, (const timespec *)&v33[2].__opaque[24]) == 60)
          {
            pthread_mutex_unlock(v33);
            if (sub_44EF8(3u, 4))
            {
              int v36 = sub_44F3C(3u);
              __uint64_t v37 = sub_4F1D8();
              __uint64_t v38 = (const char *)sub_44F70(4);
              if (v36)
              {
                printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread\n", v37, 3, v38, "AVE_USL_Drv_Complete", 1331, "res == 0");
                sub_4F1D8();
                sub_44F70(4);
              }
              syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread");
            }
            goto LABEL_30;
          }
        }
        unsigned int v39 = *(_DWORD *)&v33[3].__opaque[4];
        uint64_t v40 = *(unsigned int *)(*(void *)&v33[3].__opaque[16] + 40 * v39);
        unsigned int sig_high = HIDWORD(v33[3].__sig);
        if (v39 + 1 < sig_high) {
          unsigned int v42 = v39 + 1;
        }
        else {
          unsigned int v42 = 0;
        }
        *(_DWORD *)v33[3].__opaque = v34 - 1;
        *(_DWORD *)&v33[3].__opaque[4] = v42;
        if (v34 == sig_high) {
          pthread_cond_signal((pthread_cond_t *)&v33[1].__opaque[40]);
        }
        pthread_mutex_unlock(v33);
        if (v40 == v55)
        {
          uint64_t v17 = 0;
          goto LABEL_33;
        }
        if (sub_44EF8(3u, 4))
        {
          int v43 = sub_44F3C(3u);
          __uint64_t v44 = sub_4F1D8();
          int v45 = (const char *)sub_44F70(4);
          if (v43)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: status.counter (%d) != counter (%d).\n", v44, 3, v45, "AVE_USL_Drv_Complete", 1330, "status.counter == counter", v40, v55);
            __uint64_t v44 = sub_4F1D8();
            int v45 = (const char *)sub_44F70(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: status.counter (%d) != counter (%d).", v44, 3, v45, "AVE_USL_Drv_Complete", 1330, "status.counter == counter", v40, v55, v49, v50);
        }
        goto LABEL_30;
      }
      uint64_t v17 = v22;
      uint64_t v23 = (pthread_mutex_t *)a1[23509];
      pthread_mutex_lock(v23);
      int v24 = *(_DWORD *)v23[3].__opaque;
      if (v24)
      {
        *(_DWORD *)v23[3].__opaque = v24 - 1;
        int v25 = *(_DWORD *)&v23[3].__opaque[8];
        if (!v25) {
          int v25 = HIDWORD(v23[3].__sig);
        }
        *(_DWORD *)&v23[3].__opaque[8] = v25 - 1;
      }
      pthread_mutex_unlock(v23);
      if (sub_44EF8(0x28u, 4))
      {
        int v26 = sub_44F3C(0x28u);
        __uint64_t v27 = sub_4F1D8();
        __uint64_t v28 = (const char *)sub_44F70(4);
        if (v26)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to complete %d\n", v27, 40, v28, "AVE_USL_Drv_Complete", 1319, "ret == 0", v17);
          __uint64_t v27 = sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to complete %d", v27);
      }
    }
    else
    {
      if (sub_44EF8(3u, 4))
      {
        int v18 = sub_44F3C(3u);
        __uint64_t v19 = sub_4F1D8();
        uint64_t v20 = (const char *)sub_44F70(4);
        if (v18)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.\n", v19, 3, v20, "AVE_USL_Drv_Complete", 1280, "Frame");
          __uint64_t v21 = sub_4F1D8();
          int v48 = (const char *)sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.", v21, 3, v48, "AVE_USL_Drv_Complete", 1280, "Frame");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.", v19, 3, v20, "AVE_USL_Drv_Complete", 1280, "Frame");
        }
      }
      uint64_t v17 = 4294966293;
    }
  }
  else
  {
    if (sub_44EF8(3u, 4))
    {
      int v13 = sub_44F3C(3u);
      __uint64_t v14 = sub_4F1D8();
      char v15 = (const char *)sub_44F70(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: H264VideoEncoderVA_DriverEncodeCompleteFrames, Null pointer for driver data.\n", v14, 3, v15, "AVE_USL_Drv_Complete", 1268, "pDriverInstance");
        __uint64_t v16 = sub_4F1D8();
        char v47 = (const char *)sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: H264VideoEncoderVA_DriverEncodeCompleteFrames, Null pointer for driver data.", v16, 3, v47, "AVE_USL_Drv_Complete", 1268, "pDriverInstance");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: H264VideoEncoderVA_DriverEncodeCompleteFrames, Null pointer for driver data.", v14, 3, v15, "AVE_USL_Drv_Complete", 1268, "pDriverInstance");
      }
    }
    uint64_t v17 = 4294966295;
  }
LABEL_33:
  if (sub_44EF8(0x28u, 7))
  {
    int v29 = sub_44F3C(0x28u);
    __uint64_t v30 = sub_4F1D8();
    uint64_t v31 = (const char *)sub_44F70(7);
    if (v29)
    {
      printf("%lld %d AVE %s: EXIT H264VideoEncoderVA_DriverEncodeCompleteFrames F %d %d\n", v30, 40, v31, *((_DWORD *)a1 + 3), v17);
      __uint64_t v30 = sub_4F1D8();
      uint64_t v31 = (const char *)sub_44F70(7);
    }
    syslog(3, "%lld %d AVE %s: EXIT H264VideoEncoderVA_DriverEncodeCompleteFrames F %d %d", v30, 40, v31, *((_DWORD *)a1 + 3), v17);
  }
  return v17;
}

uint64_t sub_321F8(void **a1, uint64_t a2)
{
  int v168 = -1;
  if (sub_44EF8(0x28u, 7))
  {
    int v4 = sub_44F3C(0x28u);
    __uint64_t v5 = sub_4F1D8();
    int v6 = (const char *)sub_44F70(7);
    if (v4)
    {
      printf("%lld %d AVE %s: ENTER H264VideoEncoderVA_DriverEncodeFrame\n", v5, 40, v6);
      __uint64_t v7 = sub_4F1D8();
      uint64_t v146 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: ENTER H264VideoEncoderVA_DriverEncodeFrame", v7, 40, v146);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: ENTER H264VideoEncoderVA_DriverEncodeFrame", v5, 40, v6);
    }
  }
  if (!a1)
  {
    if (sub_44EF8(3u, 4))
    {
      int v14 = sub_44F3C(3u);
      __uint64_t v15 = sub_4F1D8();
      __uint64_t v16 = (const char *)sub_44F70(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: H264VideoEncoderVA_DriverEncodeFrame, Null pointer for driver data.\n", v15, 3, v16, "AVE_USL_Drv_Process", 1352, "pDriverInstance");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: H264VideoEncoderVA_DriverEncodeFrame, Null pointer for driver data.");
    }
    goto LABEL_70;
  }
  if (!a2)
  {
    if (sub_44EF8(3u, 4))
    {
      int v17 = sub_44F3C(3u);
      __uint64_t v18 = sub_4F1D8();
      __uint64_t v19 = (const char *)sub_44F70(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: H264VideoEncoderVA_DriverEncodeFrame, Null pointer for pSettings.\n", v18, 3, v19, "AVE_USL_Drv_Process", 1353, "pSettings");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: H264VideoEncoderVA_DriverEncodeFrame, Null pointer for pSettings.");
    }
    goto LABEL_70;
  }
  if (!*((unsigned char *)a1 + 8))
  {
    if (sub_44EF8(3u, 4))
    {
      int v20 = sub_44F3C(3u);
      __uint64_t v21 = sub_4F1D8();
      uint64_t v22 = (const char *)sub_44F70(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: H264VideoEncoderVA_DriverEncodeFrame, encoder has not been init-ed.\n", v21, 3, v22, "AVE_USL_Drv_Process", 1354, "pDriverInstance->EncoderInited == true");
        __uint64_t v23 = sub_4F1D8();
        __uint64_t v148 = (const char *)sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: H264VideoEncoderVA_DriverEncodeFrame, encoder has not been init-ed.", v23, 3, v148, "AVE_USL_Drv_Process", 1354, "pDriverInstance->EncoderInited == true");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: H264VideoEncoderVA_DriverEncodeFrame, encoder has not been init-ed.", v21, 3, v22, "AVE_USL_Drv_Process", 1354, "pDriverInstance->EncoderInited == true");
      }
    }
    uint64_t v27 = 4294966285;
    goto LABEL_71;
  }
  if (!*(void *)(a2 + 24))
  {
    if (sub_44EF8(3u, 4))
    {
      int v24 = sub_44F3C(3u);
      __uint64_t v25 = sub_4F1D8();
      int v26 = (const char *)sub_44F70(4);
      if (v24)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: pSettings->CVImageBuffer == NULL\n", v25, 3, v26, "AVE_USL_Drv_Process", 1355, "pSettings->CVImageBuffer");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: pSettings->CVImageBuffer == NULL");
    }
    goto LABEL_70;
  }
  uint64_t v8 = a1 + 23509;
  if (*((_DWORD *)a1 + 47041) != 3) {
    goto LABEL_35;
  }
  if (!*(void *)(a2 + 40))
  {
    if (sub_44EF8(3u, 4))
    {
      int v28 = sub_44F3C(3u);
      __uint64_t v29 = sub_4F1D8();
      __uint64_t v30 = (const char *)sub_44F70(4);
      if (v28)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: pSettings->CVImageBufferOutput == NULL\n", v29, 3, v30, "AVE_USL_Drv_Process", 1359, "pSettings->CVImageBufferOutput");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: pSettings->CVImageBufferOutput == NULL");
    }
LABEL_70:
    uint64_t v27 = 4294966295;
    goto LABEL_71;
  }
  if (sub_44EF8(0x28u, 7))
  {
    int v9 = sub_44F3C(0x28u);
    __uint64_t v10 = sub_4F1D8();
    __uint64_t v11 = (const char *)sub_44F70(7);
    __uint64_t v12 = *(const void **)(a2 + 40);
    if (v9)
    {
      printf("%lld %d AVE %s: pSettings->CVImageBufferOutput = %p\n", v10, 40, v11, v12);
      __uint64_t v13 = sub_4F1D8();
      BOOL v147 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: pSettings->CVImageBufferOutput = %p", v13, 40, v147, *(const void **)(a2 + 40));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: pSettings->CVImageBufferOutput = %p", v10, 40, v11, v12);
    }
  }
LABEL_35:
  long long v169 = 0;
  sub_52624(*a1, 67360, &v169);
  sub_532E8(*a1, v169, &v168);
  uint64_t v31 = v169;
  if (v169)
  {
    bzero(v169 + 8, 0x10718uLL);
    *(_DWORD *)uint64_t v31 = v168;
    *((_DWORD *)v31 + 1) = 7;
    *((_DWORD *)v31 + 40) = *((_DWORD *)a1 + 3);
    *((_DWORD *)v31 + 42) = *(_DWORD *)(a2 + 212);
    v31[8] = a1[23521] != 0;
    *((_DWORD *)v31 + 3) = *((_DWORD *)a1 + 47044);
    *(_OWORD *)(v31 + 296) = *(_OWORD *)a2;
    *((void *)v31 + 39) = *(void *)(a2 + 16);
    IOSurface = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(a2 + 24));
    *((_DWORD *)v31 + 68) = IOSurfaceGetID(IOSurface);
    int v33 = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(a2 + 32));
    *((_DWORD *)v31 + 69) = IOSurfaceGetID(v33);
    int v34 = *(__CVBuffer **)(*(void *)(a2 + 152) + 19184);
    if (v34)
    {
      uint64_t v35 = CVPixelBufferGetIOSurface(v34);
      *((_DWORD *)v31 + 70) = IOSurfaceGetID(v35);
    }
    if (*((_DWORD *)a1 + 47041) == 3)
    {
      long long v36 = *(_OWORD *)(a2 + 40);
      *((_OWORD *)v31 + 20) = v36;
      __uint64_t v37 = CVPixelBufferGetIOSurface((CVPixelBufferRef)v36);
      *((_DWORD *)v31 + 71) = IOSurfaceGetID(v37);
      __uint64_t v38 = *(__CVBuffer **)(a2 + 48);
      if (v38)
      {
        unsigned int v39 = CVPixelBufferGetIOSurface(v38);
        *((_DWORD *)v31 + 72) = IOSurfaceGetID(v39);
      }
    }
    uint64_t v40 = (char *)a1 + 18364;
    *((void *)v31 + 42) = *(void *)(a2 + 56);
    v31[344] = *(unsigned char *)(a2 + 64);
    __uint64_t v41 = v31 + 2296;
    long long v42 = *(_OWORD *)(a2 + 80);
    *((void *)v31 + 289) = *(void *)(a2 + 96);
    *(_OWORD *)(v31 + 2296) = v42;
    long long v43 = *(_OWORD *)(a2 + 104);
    *((void *)v31 + 292) = *(void *)(a2 + 120);
    *((_OWORD *)v31 + 145) = v43;
    *(_OWORD *)(v31 + 2344) = *(_OWORD *)(a2 + 128);
    *((void *)v31 + 3459) = *(void *)(a2 + 168);
    uint64_t v44 = *(void *)(a2 + 144);
    uint64_t v45 = *(void *)(v44 + 80);
    long long v46 = *(_OWORD *)(v44 + 64);
    long long v47 = *(_OWORD *)(v44 + 32);
    *((_OWORD *)v31 + 151) = *(_OWORD *)(v44 + 48);
    *((_OWORD *)v31 + 152) = v46;
    *((void *)v31 + 306) = v45;
    long long v48 = *(_OWORD *)(v44 + 16);
    *((_OWORD *)v31 + 148) = *(_OWORD *)v44;
    *((_OWORD *)v31 + 149) = v48;
    *((_OWORD *)v31 + 150) = v47;
    *((_DWORD *)v31 + 6731) = 0;
    uint64_t v49 = *(unsigned int *)(a2 + 192);
    if ((int)v49 >= 1)
    {
      memcpy(v31 + 26928, *(const void **)(a2 + 184), v49 << 6);
      *((_DWORD *)v31 + 6731) = *(_DWORD *)(a2 + 192);
    }
    memcpy(v31 + 2456, *(const void **)(a2 + 152), 0x4AF8uLL);
    if (*((_DWORD *)a1 + 55) == 1)
    {
      if (*((unsigned char *)a1 + 20139))
      {
        CFDictionaryRef v50 = *(const __CFDictionary **)(a2 + 72);
        if (v50)
        {
          if (*((_DWORD *)a1 + 5071))
          {
            if (!a1[23523])
            {
              if (sub_44EF8(0x28u, 4))
              {
                int v81 = sub_44F3C(0x28u);
                __uint64_t v82 = sub_4F1D8();
                uint64_t v83 = (const char *)sub_44F70(4);
                if (v81)
                {
                  printf("%lld %d AVE %s: %s:%d %s | fail to get VCP %p\n", v82, 40, v83, "AVE_USL_Drv_Process", 1464, "pDriverInstance->pcVCP != __null", a1);
                  __uint64_t v82 = sub_4F1D8();
                  sub_44F70(4);
                }
                syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get VCP %p", v82);
              }
              uint64_t v27 = 4294966281;
              goto LABEL_148;
            }
            CFMutableDataRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
            if (!Mutable)
            {
              if (sub_44EF8(0x28u, 4))
              {
                int v90 = sub_44F3C(0x28u);
                __uint64_t v91 = sub_4F1D8();
                int v92 = (const char *)sub_44F70(4);
                if (v90)
                {
                  printf("%lld %d AVE %s: %s:%d %s | fail to create CFArray\n", v91, 40, v92, "AVE_USL_Drv_Process", 1468, "refInfo != __null");
                  __uint64_t v93 = sub_4F1D8();
                  __uint64_t v152 = (const char *)sub_44F70(4);
                  syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v93, 40, v152, "AVE_USL_Drv_Process", 1468, "refInfo != __null");
                }
                else
                {
                  syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v91, 40, v92, "AVE_USL_Drv_Process", 1468, "refInfo != __null");
                }
              }
              uint64_t v27 = 4294966293;
              goto LABEL_148;
            }
            long long v52 = Mutable;
            sub_4D308(v31 + 2688, v31[2676], Mutable);
            sub_3D640(a1[23523], *(const void **)(a2 + 72), v52);
            CFRelease(v52);
            CFDictionaryRef v50 = *(const __CFDictionary **)(a2 + 72);
          }
          sub_3B41C(v50, (_DWORD *)v31 + 230);
        }
      }
    }
    sub_2DFA4((uint64_t)a1, (uint64_t)(a1 + 15), (uint64_t)v31, (uint64_t)(a1 + 2));
    long long v53 = (uint64_t *)(a1 + 9);
    uint64_t v54 = sub_3771C((_DWORD *)a1 + 4, *((_DWORD *)a1 + 47040), a1 + 8, a1 + 9);
    if (v54)
    {
      uint64_t v27 = v54;
      if (sub_44EF8(0x28u, 4))
      {
        int v55 = sub_44F3C(0x28u);
        __uint64_t v56 = sub_4F1D8();
        __uint64_t v57 = (const char *)sub_44F70(4);
        if (v55)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create surfaces %d %d\n", v56, 40, v57, "AVE_USL_Drv_Process", 1491, "ret == 0", *((_DWORD *)a1 + 47040), *((_DWORD *)v31 + 40));
          __uint64_t v56 = sub_4F1D8();
          __uint64_t v57 = (const char *)sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create surfaces %d %d", v56, 40, v57, "AVE_USL_Drv_Process", 1491, "ret == 0", *((unsigned int *)a1 + 47040), *((unsigned int *)v31 + 40));
      }
LABEL_148:
      int v140 = *(const void **)(a2 + 56);
      if (v140)
      {
        CFRelease(v140);
        *(void *)(a2 + 56) = 0;
      }
      goto LABEL_71;
    }
    uint64_t v62 = *v53;
    if (*v53 && *((void *)v31 + 331))
    {
      int v63 = *((_DWORD *)a1 + 4672);
      if (v63 == 1)
      {
        int v84 = sub_4EE44(v62, 0);
        memcpy(v84, *((const void **)v31 + 331), 32 * ((*((_DWORD *)a1 + 453) + 31) >> 5) * ((*((_DWORD *)a1 + 452) + 31) >> 5));
      }
      else
      {
        if (v63)
        {
          if (sub_44EF8(0x28u, 4))
          {
            int v85 = sub_44F3C(0x28u);
            __uint64_t v86 = sub_4F1D8();
            int v87 = (const char *)sub_44F70(4);
            int v88 = *((_DWORD *)a1 + 4672);
            if (v85)
            {
              printf("%lld %d AVE %s: wrong codec type %d\n", v86, 40, v87, v88);
              __uint64_t v89 = sub_4F1D8();
              int v151 = (const char *)sub_44F70(4);
              syslog(3, "%lld %d AVE %s: wrong codec type %d", v89, 40, v151, *((_DWORD *)a1 + 4672));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: wrong codec type %d", v86, 40, v87, v88);
            }
          }
          if (sub_44EF8(0x28u, 4))
          {
            int v94 = sub_44F3C(0x28u);
            __uint64_t v95 = sub_4F1D8();
            int v96 = (const char *)sub_44F70(4);
            if (v94)
            {
              printf("%lld %d AVE %s: %s:%d %s | fail to prepare MB input control %d %d\n", v95, 40, v96, "AVE_USL_Drv_Process", 1496, "ret == 0", *((_DWORD *)a1 + 47040), *((_DWORD *)v31 + 40));
              __uint64_t v95 = sub_4F1D8();
              sub_44F70(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to prepare MB input control %d %d", v95);
          }
          uint64_t v27 = 4294966295;
          goto LABEL_148;
        }
        unsigned int v64 = sub_4EE44(v62, 0);
        unsigned int v165 = *((_DWORD *)a1 + 452) + 15;
        unsigned int v65 = *((_DWORD *)a1 + 453) + 15;
        unsigned int v66 = v65 >> 4;
        unsigned int v166 = v165 >> 4;
        int v164 = v64;
        memcpy(v64, *((const void **)v31 + 331), 16 * (v65 >> 4) * (v165 >> 4));
        if (sub_44EF8(0xBu, 7))
        {
          if (sub_44EF8(0xBu, 7))
          {
            unsigned int v72 = v65;
            int v73 = sub_44F3C(0xBu);
            __uint64_t v74 = sub_4F1D8();
            char v75 = (const char *)sub_44F70(7);
            if (v73)
            {
              printf("%lld %d AVE %s: QPMap:\n", v74, 11, v75);
              __uint64_t v76 = sub_4F1D8();
              uint64_t v150 = (const char *)sub_44F70(7);
              syslog(3, "%lld %d AVE %s: QPMap:", v76, 11, v150);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: QPMap:", v74, 11, v75);
            }
            unsigned int v65 = v72;
          }
          unsigned int v160 = v65;
          unsigned int v161 = v66;
          if (v65 >= 0x10)
          {
            unsigned int v97 = 0;
            uint64_t v98 = 0;
            if (v166 <= 1) {
              uint64_t v99 = 1;
            }
            else {
              uint64_t v99 = v166;
            }
            if (v161 <= 1) {
              uint64_t v100 = 1;
            }
            else {
              uint64_t v100 = v161;
            }
            uint64_t v162 = v100;
            uint64_t v101 = v99 + 2 * v99;
            do
            {
              if (v165 >= 0x10)
              {
                uint64_t v102 = 0;
                BOOL v103 = (unsigned __int16 *)((char *)v164 + 16 * v97);
                __uint64_t v104 = (char *)&v169;
                do
                {
                  unsigned int v105 = *v103;
                  v103 += 8;
                  sub_4D5BC(v104, v102 + 512, "%2d ", v67, v68, v69, v70, v71, v105 >> 10);
                  v102 -= 3;
                  v104 += 3;
                }
                while (v101 + v102);
              }
              if (sub_44EF8(0xBu, 7))
              {
                int v106 = sub_44F3C(0xBu);
                __uint64_t v107 = sub_4F1D8();
                uint64_t v108 = (const char *)sub_44F70(7);
                if (v106)
                {
                  printf("%lld %d AVE %s: mbrow %2d: %s\n", v107, 11, v108, v98, (const char *)&v169);
                  __uint64_t v109 = sub_4F1D8();
                  int v153 = (const char *)sub_44F70(7);
                  syslog(3, "%lld %d AVE %s: mbrow %2d: %s", v109, 11, v153, v98, (const char *)&v169);
                }
                else
                {
                  syslog(3, "%lld %d AVE %s: mbrow %2d: %s", v107, 11, v108, v98, (const char *)&v169);
                }
              }
              ++v98;
              v97 += v166;
            }
            while (v98 != v162);
          }
          if (sub_44EF8(0xBu, 7))
          {
            int v115 = sub_44F3C(0xBu);
            __uint64_t v116 = sub_4F1D8();
            int v117 = (const char *)sub_44F70(7);
            if (v115)
            {
              printf("%lld %d AVE %s: MDBias:\n", v116, 11, v117);
              __uint64_t v118 = sub_4F1D8();
              uint64_t v154 = (const char *)sub_44F70(7);
              syslog(3, "%lld %d AVE %s: MDBias:", v118, 11, v154);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: MDBias:", v116, 11, v117);
            }
          }
          if (v160 >= 0x10)
          {
            unsigned int v119 = 0;
            uint64_t v120 = 0;
            if (v166 <= 1) {
              uint64_t v121 = 1;
            }
            else {
              uint64_t v121 = v166;
            }
            if (v161 <= 1) {
              uint64_t v122 = 1;
            }
            else {
              uint64_t v122 = v161;
            }
            uint64_t v163 = v122;
            uint64_t v123 = v121 + 2 * v121;
            do
            {
              if (v165 >= 0x10)
              {
                uint64_t v124 = 0;
                long long v125 = (__int16 *)((char *)v164 + 16 * v119);
                int v126 = (char *)&v169;
                do
                {
                  __int16 v127 = *v125;
                  v125 += 8;
                  sub_4D5BC(v126, v124 + 512, "%2x ", v110, v111, v112, v113, v114, v127 & 3);
                  v124 -= 3;
                  v126 += 3;
                }
                while (v123 + v124);
              }
              if (sub_44EF8(0xBu, 7))
              {
                int v128 = sub_44F3C(0xBu);
                __uint64_t v129 = sub_4F1D8();
                BOOL v130 = (const char *)sub_44F70(7);
                if (v128)
                {
                  printf("%lld %d AVE %s: mbrow %2d: %s\n", v129, 11, v130, v120, (const char *)&v169);
                  __uint64_t v131 = sub_4F1D8();
                  uint64_t v155 = (const char *)sub_44F70(7);
                  syslog(3, "%lld %d AVE %s: mbrow %2d: %s", v131, 11, v155, v120, (const char *)&v169);
                }
                else
                {
                  syslog(3, "%lld %d AVE %s: mbrow %2d: %s", v129, 11, v130, v120, (const char *)&v169);
                }
              }
              ++v120;
              v119 += v166;
            }
            while (v120 != v163);
          }
          uint64_t v40 = (char *)a1 + 18364;
          uint64_t v8 = a1 + 23509;
          long long v53 = (uint64_t *)(a1 + 9);
          __uint64_t v41 = v31 + 2296;
        }
      }
    }
    sub_336A8((uint64_t)a1, (uint64_t)v31);
    sub_37694(v53, (_DWORD *)v31 + 66);
    LODWORD(v169) = v168;
    long long v170 = *(_OWORD *)v41;
    *(void *)&long long v171 = *((void *)v41 + 2);
    if (sub_2D34C((uint64_t)*v8, (long long *)&v169))
    {
      if (sub_44EF8(3u, 4))
      {
        int v132 = sub_44F3C(3u);
        __uint64_t v133 = sub_4F1D8();
        int v134 = (const char *)sub_44F70(4);
        if (v132)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread\n", v133, 3, v134, "AVE_USL_Drv_Process", 1516, "res == 0");
          __uint64_t v135 = sub_4F1D8();
          uint64_t v156 = (const char *)sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread", v135, 3, v156, "AVE_USL_Drv_Process", 1516, "res == 0");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread", v133, 3, v134, "AVE_USL_Drv_Process", 1516, "res == 0");
        }
      }
      uint64_t v27 = 4294966296;
      goto LABEL_148;
    }
    uint64_t v172 = 0;
    long long v171 = 0u;
    long long v170 = 0u;
    memset(v167, 0, sizeof(v167));
    long long v169 = (char *)*((unsigned int *)v8 + 22);
    LODWORD(v172) = v168;
    *((void *)&v170 + 1) = *((unsigned int *)v31 + 40);
    LODWORD(v171) = 58000;
    *((void *)&v171 + 1) = (uint64_t)sub_4F1D8() / 1000;
    *((void *)v31 + 3462) = sub_4F1D8();
    uint64_t v136 = sub_55314((const void **)*a1, &v169, v167);
    if (v136)
    {
      uint64_t v27 = v136;
      sub_2ED90((uint64_t)*v8);
      if (sub_44EF8(0x28u, 4))
      {
        int v137 = sub_44F3C(0x28u);
        __uint64_t v138 = sub_4F1D8();
        __uint64_t v139 = (const char *)sub_44F70(4);
        if (v137)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to process %d\n", v138, 40, v139, "AVE_USL_Drv_Process", 1537, "ret == 0", v27);
          __uint64_t v138 = sub_4F1D8();
          uint64_t v159 = v27;
          uint64_t v157 = sub_44F70(4);
        }
        else
        {
          uint64_t v159 = v27;
          uint64_t v157 = (void *)v139;
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to process %d", v138, 40, v157, "AVE_USL_Drv_Process", 1537, "ret == 0", v159);
      }
      goto LABEL_148;
    }
    int v141 = *((_DWORD *)a1 + 3) + 1;
    *((_DWORD *)a1 + 3) = v141;
    if (!*(unsigned char *)(a2 + 160) && v141 != *(_DWORD *)v40
      || v40[413]
      || (*((unsigned char *)a1 + 1804) & 0xE0) != 0
      || (*((_DWORD *)v8 + 23) & 0xFFFFFFFE) == 2)
    {
      uint64_t v27 = 0;
    }
    else
    {
      long long v169 = (char *)sub_4F1D8();
      uint64_t v27 = sub_31A00(a1, &v169);
      if (v27 && sub_44EF8(3u, 4))
      {
        int v142 = sub_44F3C(3u);
        __uint64_t v143 = sub_4F1D8();
        BOOL v144 = (const char *)sub_44F70(4);
        if (v142)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Complete call FAILED.\n", v143, 3, v144, "AVE_USL_Drv_Process", 1565, "ret == 0");
          __uint64_t v145 = sub_4F1D8();
          unsigned int v158 = (const char *)sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Complete call FAILED.", v145, 3, v158, "AVE_USL_Drv_Process", 1565, "ret == 0");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Complete call FAILED.", v143, 3, v144, "AVE_USL_Drv_Process", 1565, "ret == 0");
        }
      }
    }
  }
  else
  {
    if (sub_44EF8(3u, 4))
    {
      int v58 = sub_44F3C(3u);
      __uint64_t v59 = sub_4F1D8();
      __uint64_t v60 = (const char *)sub_44F70(4);
      if (v58)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: mach_timebase_info info = NULL.\n", v59, 3, v60, "AVE_USL_Drv_Process", 1376, "Frame");
        __uint64_t v61 = sub_4F1D8();
        int v149 = (const char *)sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: mach_timebase_info info = NULL.", v61, 3, v149, "AVE_USL_Drv_Process", 1376, "Frame");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: mach_timebase_info info = NULL.", v59, 3, v60, "AVE_USL_Drv_Process", 1376, "Frame");
      }
    }
    uint64_t v27 = 4294966293;
  }
LABEL_71:
  sub_37A00((uint64_t)(a1 + 9));
  if (sub_44EF8(0x28u, 7))
  {
    int v77 = sub_44F3C(0x28u);
    __uint64_t v78 = sub_4F1D8();
    uint64_t v79 = (const char *)sub_44F70(7);
    if (v77)
    {
      printf("%lld %d AVE %s: EXIT H264VideoEncoderVA_DriverEncodeFrame frame number %d. %d\n", v78, 40, v79, *((_DWORD *)a1 + 3) - 1, v27);
      __uint64_t v78 = sub_4F1D8();
      uint64_t v79 = (const char *)sub_44F70(7);
    }
    syslog(3, "%lld %d AVE %s: EXIT H264VideoEncoderVA_DriverEncodeFrame frame number %d. %d", v78, 40, v79, *((_DWORD *)a1 + 3) - 1, v27);
  }
  return v27;
}

void sub_336A8(uint64_t a1, uint64_t a2)
{
  int v4 = (uint64_t *)(a1 + 188056);
  __uint64_t v5 = (_DWORD *)(a1 + 18328);
  if (!*(_DWORD *)(a1 + 188176) && *v5 != 2) {
    return;
  }
  *__uint64_t v5 = 2;
  *(_DWORD *)(a2 + 16) = 2;
  sub_1AAE8(*v4, *(_DWORD *)(a1 + 18344));
  size_t v6 = *(unsigned int *)(a1 + 60);
  __uint64_t v7 = sub_4EE44(*(void *)(a1 + 80), 0);
  uint64_t v8 = v7;
  int v9 = *(const void **)(a2 + 21632);
  if (v9)
  {
    *(unsigned char *)(a2 + 8) = 1;
LABEL_7:
    memcpy(v7, v9, v6);
    return;
  }
  __uint64_t v10 = (_DWORD *)(a2 + 21366);
  sub_1AAD0(*v4, (void *)(a2 + 21366));
  __uint64_t v11 = (const void *)(a2 + 4052);
  if (*(_DWORD *)(a1 + 12))
  {
    *(unsigned char *)(a2 + 2464) = 0;
    memcpy(v8, (const void *)(a2 + 21366), 0x108uLL);
    __uint64_t v7 = (__IOSurface *)((char *)v8 + 264);
    int v9 = (const void *)(a2 + 4052);
    goto LABEL_7;
  }
  if (sub_44EF8(0xD8u, 6))
  {
    int v12 = sub_44F3C(0xD8u);
    __uint64_t v13 = sub_4F1D8();
    int v14 = (const char *)sub_44F70(6);
    if (v12)
    {
      printf("%lld %d AVE %s: ------ Sequence RC Info ------\n", v13, 216, v14);
      __uint64_t v15 = sub_4F1D8();
      char v80 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s: ------ Sequence RC Info ------", v15, 216, v80);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: ------ Sequence RC Info ------", v13, 216, v14);
    }
  }
  if (sub_44EF8(0xD8u, 6))
  {
    int v16 = sub_44F3C(0xD8u);
    __uint64_t v17 = sub_4F1D8();
    __uint64_t v18 = (const char *)sub_44F70(6);
    int v19 = *v10;
    if (v16)
    {
      printf("%lld %d AVE %s:  total_scenes %u\n", v17, 216, v18, v19);
      __uint64_t v20 = sub_4F1D8();
      int v81 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s:  total_scenes %u", v20, 216, v81, *v10);
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  total_scenes %u", v17, 216, v18, v19);
    }
  }
  if (sub_44EF8(0xD8u, 6))
  {
    int v21 = sub_44F3C(0xD8u);
    __uint64_t v22 = sub_4F1D8();
    __uint64_t v23 = (const char *)sub_44F70(6);
    int v24 = v10[1];
    if (v21)
    {
      printf("%lld %d AVE %s:  cnt_All %u\n", v22, 216, v23, v24);
      __uint64_t v25 = sub_4F1D8();
      __uint64_t v82 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s:  cnt_All %u", v25, 216, v82, v10[1]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  cnt_All %u", v22, 216, v23, v24);
    }
  }
  if (sub_44EF8(0xD8u, 6))
  {
    int v26 = sub_44F3C(0xD8u);
    __uint64_t v27 = sub_4F1D8();
    int v28 = (const char *)sub_44F70(6);
    uint64_t v29 = *((void *)v10 + 1);
    if (v26)
    {
      printf("%lld %d AVE %s:  bits_All %llu\n", v27, 216, v28, v29);
      __uint64_t v30 = sub_4F1D8();
      uint64_t v83 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s:  bits_All %llu", v30, 216, v83, *((void *)v10 + 1));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  bits_All %llu", v27, 216, v28, v29);
    }
  }
  if (sub_44EF8(0xD8u, 6))
  {
    int v31 = sub_44F3C(0xD8u);
    __uint64_t v32 = sub_4F1D8();
    int v33 = (const char *)sub_44F70(6);
    int v34 = v10[7];
    if (v31)
    {
      printf("%lld %d AVE %s:  cnt_NORMAL %u\n", v32, 216, v33, v34);
      __uint64_t v35 = sub_4F1D8();
      int v84 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s:  cnt_NORMAL %u", v35, 216, v84, v10[7]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  cnt_NORMAL %u", v32, 216, v33, v34);
    }
  }
  if (sub_44EF8(0xD8u, 6))
  {
    int v36 = sub_44F3C(0xD8u);
    __uint64_t v37 = sub_4F1D8();
    __uint64_t v38 = (const char *)sub_44F70(6);
    uint64_t v39 = *((void *)v10 + 4);
    if (v36)
    {
      printf("%lld %d AVE %s:  bits_NORMAL %llu\n", v37, 216, v38, v39);
      __uint64_t v40 = sub_4F1D8();
      int v85 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s:  bits_NORMAL %llu", v40, 216, v85, *((void *)v10 + 4));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  bits_NORMAL %llu", v37, 216, v38, v39);
    }
  }
  if (sub_44EF8(0xD8u, 6))
  {
    int v41 = sub_44F3C(0xD8u);
    __uint64_t v42 = sub_4F1D8();
    long long v43 = (const char *)sub_44F70(6);
    int v44 = v10[10];
    if (v41)
    {
      printf("%lld %d AVE %s:  cnt_MIN %u\n", v42, 216, v43, v44);
      __uint64_t v45 = sub_4F1D8();
      __uint64_t v86 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s:  cnt_MIN %u", v45, 216, v86, v10[10]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  cnt_MIN %u", v42, 216, v43, v44);
    }
  }
  if (sub_44EF8(0xD8u, 6))
  {
    int v46 = sub_44F3C(0xD8u);
    __uint64_t v47 = sub_4F1D8();
    long long v48 = (const char *)sub_44F70(6);
    uint64_t v49 = *(void *)(v10 + 11);
    if (v46)
    {
      printf("%lld %d AVE %s:  bits_MIN %llu\n", v47, 216, v48, v49);
      __uint64_t v50 = sub_4F1D8();
      int v87 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s:  bits_MIN %llu", v50, 216, v87, *(void *)(v10 + 11));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  bits_MIN %llu", v47, 216, v48, v49);
    }
  }
  if (sub_44EF8(0xD8u, 6))
  {
    int v51 = sub_44F3C(0xD8u);
    __uint64_t v52 = sub_4F1D8();
    long long v53 = (const char *)sub_44F70(6);
    int v54 = v10[13];
    if (v51)
    {
      printf("%lld %d AVE %s:  cnt_MAX %u\n", v52, 216, v53, v54);
      __uint64_t v55 = sub_4F1D8();
      int v88 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s:  cnt_MAX %u", v55, 216, v88, v10[13]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  cnt_MAX %u", v52, 216, v53, v54);
    }
  }
  if (sub_44EF8(0xD8u, 6))
  {
    int v56 = sub_44F3C(0xD8u);
    __uint64_t v57 = sub_4F1D8();
    int v58 = (const char *)sub_44F70(6);
    uint64_t v59 = *((void *)v10 + 7);
    if (v56)
    {
      printf("%lld %d AVE %s:  bits_MAX %llu\n", v57, 216, v58, v59);
      __uint64_t v60 = sub_4F1D8();
      __uint64_t v89 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s:  bits_MAX %llu", v60, 216, v89, *((void *)v10 + 7));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  bits_MAX %llu", v57, 216, v58, v59);
    }
  }
  if (sub_44EF8(0xD8u, 6))
  {
    int v61 = sub_44F3C(0xD8u);
    __uint64_t v62 = sub_4F1D8();
    int v63 = (const char *)sub_44F70(6);
    int v64 = v10[16];
    if (v61)
    {
      printf("%lld %d AVE %s:  cnt_BLANK %u\n", v62, 216, v63, v64);
      __uint64_t v65 = sub_4F1D8();
      int v90 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s:  cnt_BLANK %u", v65, 216, v90, v10[16]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  cnt_BLANK %u", v62, 216, v63, v64);
    }
  }
  sub_1AAD0(*v4, v10);
  memcpy(v8, v10, 0x108uLL);
  memcpy((char *)v8 + 264, v11, v6);
  for (int i = 0; i != 11; ++i)
  {
    if (sub_44EF8(0xD8u, 6))
    {
      int v67 = sub_44F3C(0xD8u);
      __uint64_t v68 = sub_4F1D8();
      uint64_t v69 = (const char *)sub_44F70(6);
      int v70 = *((_DWORD *)v8 + 371);
      uint64_t v71 = *(void *)((char *)v8 + 1492);
      uint64_t v72 = *(void *)((char *)v8 + 1508);
      uint64_t v73 = *(void *)((char *)v8 + 1516);
      uint64_t v74 = *(void *)((char *)v8 + 1524);
      double v75 = *(double *)((char *)v8 + 1532);
      double v76 = *(double *)((char *)v8 + 1540);
      double v77 = *((float *)v8 + 388);
      if (v67)
      {
        printf("%lld %d AVE %s: frame %u: cnt %d, bits %llu, %llu, %llu, %llu; QScale: %f, %f, %f, %f\n",
          v68,
          216,
          v69,
          i,
          v70,
          v71,
          v72,
          v73,
          v74,
          v75,
          v76,
          *((float *)v8 + 387),
          v77);
        __uint64_t v78 = sub_4F1D8();
        uint64_t v79 = (const char *)sub_44F70(6);
        syslog(3, "%lld %d AVE %s: frame %u: cnt %d, bits %llu, %llu, %llu, %llu; QScale: %f, %f, %f, %f",
          v78,
          216,
          v79,
          i,
          *((_DWORD *)v8 + 371),
          *(void *)((char *)v8 + 1492),
          *(void *)((char *)v8 + 1508),
          *(void *)((char *)v8 + 1516),
          *(void *)((char *)v8 + 1524),
          *(double *)((char *)v8 + 1532),
          *(double *)((char *)v8 + 1540),
          *((float *)v8 + 387),
          *((float *)v8 + 388));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: frame %u: cnt %d, bits %llu, %llu, %llu, %llu; QScale: %f, %f, %f, %f",
          v68,
          216,
          v69,
          i,
          v70,
          v71,
          v72,
          v73,
          v74,
          v75,
          v76,
          *((float *)v8 + 387),
          v77);
      }
    }
    uint64_t v8 = (__IOSurface *)((char *)v8 + 1574);
  }
}

uint64_t sub_33F00(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  if (*(_DWORD *)(a1 + 200) && sub_44EF8(0x2Au, 5))
  {
    if (sub_44F3C(0x2Au))
    {
      __uint64_t v2 = sub_4F1D8();
      int v3 = (const char *)sub_44F70(5);
      printf("%lld %d AVE %s: H264 Connection: WARNING! deleting connection %p with %d packets left\n", v2, 42, v3, (const void *)a1, *(_DWORD *)(a1 + 200));
    }
    __uint64_t v4 = sub_4F1D8();
    __uint64_t v5 = (const char *)sub_44F70(5);
    syslog(3, "%lld %d AVE %s: H264 Connection: WARNING! deleting connection %p with %d packets left", v4, 42, v5, (const void *)a1, *(_DWORD *)(a1 + 200));
  }
  if (*(void *)(a1 + 216)) {
    operator delete[]();
  }
  pthread_cond_destroy((pthread_cond_t *)(a1 + 112));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 64));
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  pthread_mutex_destroy((pthread_mutex_t *)a1);
  return a1;
}

char **sub_34010(int a1)
{
  if (a1 >= 40) {
    return 0;
  }
  else {
    return &(&off_8EE20)[2 * a1];
  }
}

uint64_t sub_34028(const void **a1, _DWORD *a2)
{
  *a1 = 0;
  if (sub_44EF8(0x1Cu, 6))
  {
    int v9 = sub_44F3C(0x1Cu);
    __uint64_t v10 = sub_4F1D8();
    __uint64_t v11 = (const char *)sub_44F70(6);
    if (v9)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", v10, 28, v11, "AVE_MCTF_Dump_CreateOutputFile", a2);
      __uint64_t v12 = sub_4F1D8();
      __uint64_t v30 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v12, 28, v30, "AVE_MCTF_Dump_CreateOutputFile", a2);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", v10, 28, v11, "AVE_MCTF_Dump_CreateOutputFile", a2);
    }
  }
  if (!a2 || *a1)
  {
    if (sub_44EF8(0x1Cu, 4))
    {
      int v17 = sub_44F3C(0x1Cu);
      __uint64_t v18 = sub_4F1D8();
      int v19 = (const char *)sub_44F70(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", v18, 28, v19, "AVE_MCTF_Dump_CreateOutputFile", 31, "*pOutFile == __null && pDim != __null", *a1, a2, 0);
        __uint64_t v20 = sub_4F1D8();
        int v31 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v20, 28, v31);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v18, 28, v19);
      }
    }
    uint64_t v24 = 4294966295;
  }
  else
  {
    sub_4D5BC(v33, 30, "-%dx%d-", v4, v5, v6, v7, v8, *a2);
    sub_4EFE8(0, (uint64_t)v33, (uint64_t)"-output.yuv", __filename, 128);
    __uint64_t v13 = fopen(__filename, "wb");
    *a1 = v13;
    if (v13)
    {
      if (sub_44EF8(0x1Cu, 7))
      {
        int v14 = sub_44F3C(0x1Cu);
        __uint64_t v15 = sub_4F1D8();
        int v16 = (const char *)sub_44F70(7);
        if (v14)
        {
          printf("%lld %d AVE %s: opened file %s to write output stream\n", v15, 28, v16, __filename);
          sub_4F1D8();
          sub_44F70(7);
        }
        syslog(3, "%lld %d AVE %s: opened file %s to write output stream");
      }
    }
    else if (sub_44EF8(0x1Cu, 4))
    {
      int v21 = sub_44F3C(0x1Cu);
      __uint64_t v22 = sub_4F1D8();
      __uint64_t v23 = (const char *)sub_44F70(4);
      if (v21)
      {
        printf("%lld %d AVE %s: could not open file %s\n", v22, 28, v23, __filename);
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: could not open file %s");
    }
    uint64_t v24 = 0;
  }
  if (sub_44EF8(0x1Cu, 6))
  {
    int v25 = sub_44F3C(0x1Cu);
    __uint64_t v26 = sub_4F1D8();
    __uint64_t v27 = (const char *)sub_44F70(6);
    if (v25)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v26, 28, v27, "AVE_MCTF_Dump_CreateOutputFile", a2, v24);
      __uint64_t v28 = sub_4F1D8();
      __uint64_t v32 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v28, 28, v32, "AVE_MCTF_Dump_CreateOutputFile", a2, v24);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v26, 28, v27, "AVE_MCTF_Dump_CreateOutputFile", a2, v24);
    }
  }
  return v24;
}

uint64_t sub_34434(FILE *a1)
{
  if (sub_44EF8(0x1Cu, 6))
  {
    int v2 = sub_44F3C(0x1Cu);
    __uint64_t v3 = sub_4F1D8();
    uint64_t v4 = (const char *)sub_44F70(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", v3, 28, v4, "AVE_MCTF_Dump_CloseOutputFile", a1);
      __uint64_t v5 = sub_4F1D8();
      __uint64_t v18 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 28, v18, "AVE_MCTF_Dump_CloseOutputFile", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", v3, 28, v4, "AVE_MCTF_Dump_CloseOutputFile", a1);
    }
  }
  if (a1)
  {
    if (fclose(a1))
    {
      if (sub_44EF8(0x1Cu, 4))
      {
        int v6 = sub_44F3C(0x1Cu);
        __uint64_t v7 = sub_4F1D8();
        uint64_t v8 = (const char *)sub_44F70(4);
        if (v6)
        {
          printf("%lld %d AVE %s: %s:%d %s | close file failed %p %d\n", v7, 28, v8, "AVE_MCTF_Dump_CloseOutputFile", 79, "res == 0", a1, 0);
          __uint64_t v7 = sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | close file failed %p %d", v7, 28);
      }
      uint64_t v12 = 4294966296;
    }
    else
    {
      uint64_t v12 = 0;
    }
  }
  else
  {
    if (sub_44EF8(0x1Cu, 4))
    {
      int v9 = sub_44F3C(0x1Cu);
      __uint64_t v10 = sub_4F1D8();
      __uint64_t v11 = (const char *)sub_44F70(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d\n", v10, 28, v11, "AVE_MCTF_Dump_CloseOutputFile", 72, "pOutFile != __null", 0, 0);
        __uint64_t v10 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d", v10, 28);
    }
    uint64_t v12 = 4294966295;
  }
  if (sub_44EF8(0x1Cu, 6))
  {
    int v13 = sub_44F3C(0x1Cu);
    __uint64_t v14 = sub_4F1D8();
    __uint64_t v15 = (const char *)sub_44F70(6);
    if (v13)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v14, 28, v15, "AVE_MCTF_Dump_CloseOutputFile", a1, v12);
      __uint64_t v16 = sub_4F1D8();
      int v19 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v16, 28, v19, "AVE_MCTF_Dump_CloseOutputFile", a1, v12);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v14, 28, v15, "AVE_MCTF_Dump_CloseOutputFile", a1, v12);
    }
  }
  return v12;
}

uint64_t sub_34768(FILE *a1, __CVBuffer *a2)
{
  if (sub_44EF8(0x1Cu, 6))
  {
    int v4 = sub_44F3C(0x1Cu);
    __uint64_t v5 = sub_4F1D8();
    int v6 = (const char *)sub_44F70(6);
    if (v4)
    {
      printf("%lld %d AVE %s: %s Enter %p %p\n", v5, 28, v6, "AVE_MCTF_Dump_WriteFrame", a1, a2);
      __uint64_t v7 = sub_4F1D8();
      int v17 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p %p", v7, 28, v17, "AVE_MCTF_Dump_WriteFrame", a1, a2);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p %p", v5, 28, v6, "AVE_MCTF_Dump_WriteFrame", a1, a2);
    }
  }
  uint64_t v8 = sub_42500(a2, 0, a1);
  if (v8)
  {
    if (sub_44EF8(0x1Cu, 4))
    {
      int v9 = sub_44F3C(0x1Cu);
      __uint64_t v10 = sub_4F1D8();
      __uint64_t v11 = (const char *)sub_44F70(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE_ImgBuf_Dump failed %p %p %d\n", v10, 28, v11, "AVE_MCTF_Dump_WriteFrame", 108, "ret == 0", a1, a2, v8);
        __uint64_t v12 = sub_4F1D8();
        __uint64_t v18 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE_ImgBuf_Dump failed %p %p %d", v12, 28, v18);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE_ImgBuf_Dump failed %p %p %d", v10, 28, v11);
      }
    }
    uint64_t v8 = 4294966296;
  }
  if (sub_44EF8(0x1Cu, 6))
  {
    int v13 = sub_44F3C(0x1Cu);
    __uint64_t v14 = sub_4F1D8();
    __uint64_t v15 = (const char *)sub_44F70(6);
    if (v13)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %d\n", v14, 28, v15, "AVE_MCTF_Dump_WriteFrame", a1, a2, v8);
      __uint64_t v14 = sub_4F1D8();
      sub_44F70(6);
    }
    syslog(3, "%lld %d AVE %s: %s Exit %p %p %d", v14);
  }
  return v8;
}

pthread_mutex_t *sub_349EC()
{
  int v0 = (pthread_mutex_t *)malloc_type_malloc(0x40uLL, 0x1000040FA0F61DDuLL);
  int v1 = v0;
  if (v0)
  {
    *(_OWORD *)&v0->__opaque[24] = 0u;
    *(_OWORD *)&v0->__opaque[40] = 0u;
    *(_OWORD *)&v0->__sig = 0u;
    *(_OWORD *)&v0->__opaque[8] = 0u;
    if (pthread_mutex_init(v0, 0))
    {
      free(v1);
      return 0;
    }
  }
  return v1;
}

uint64_t sub_34A54(pthread_mutex_t *a1)
{
  if (!a1) {
    return 4294966295;
  }
  if (pthread_mutex_destroy(a1)) {
    uint64_t v2 = 4294966296;
  }
  else {
    uint64_t v2 = 0;
  }
  free(a1);
  return v2;
}

uint64_t sub_34A9C(pthread_mutex_t *a1)
{
  if (!a1) {
    return 4294966295;
  }
  if (pthread_mutex_lock(a1)) {
    return 4294966296;
  }
  return 0;
}

uint64_t sub_34AD0(pthread_mutex_t *a1)
{
  if (!a1) {
    return 4294966295;
  }
  if (pthread_mutex_unlock(a1)) {
    return 4294966296;
  }
  return 0;
}

_DWORD *sub_34B04(_DWORD *result, int a2)
{
  if (result)
  {
    uint64_t v2 = *result;
    if ((int)v2 < 1)
    {
      return 0;
    }
    else
    {
      for (++result; *result != a2; result += 12)
      {
        if (!--v2) {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_34B38(uint64_t result, int a2)
{
  if (result)
  {
    if (*(_DWORD *)(result + 8) <= a2) {
      return 0;
    }
    else {
      result += 12 * a2 + 12;
    }
  }
  return result;
}

uint64_t sub_34B58(uint64_t result, int a2, _DWORD *a3)
{
  if (result)
  {
    uint64_t v3 = result;
    if (*(_DWORD *)(result + 8) <= a2)
    {
      return 4294966296;
    }
    else
    {
      double result = 0;
      *a3 = *(_DWORD *)(v3 + 12 * a2 + 20);
    }
  }
  return result;
}

uint64_t sub_34B8C(uint64_t a1)
{
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 4) = 0;
  sub_3BE0((void *)(a1 + 32));
  *(_DWORD *)(a1 + 48) = 0;
  return a1;
}

uint64_t sub_34BC4(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    uint64_t result = sub_3D48(v2);
    if (!result) {
      break;
    }
    int v4 = (void *)result;
    sub_3DD0((uint64_t)v2);
    uint64_t result = sub_421C(v4);
  }
  while (!result);
  if (*(void *)(a1 + 24))
  {
    uint64_t result = sub_34A54(*(pthread_mutex_t **)(a1 + 24));
    *(void *)(a1 + 24) = 0;
  }
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 4) = 0;
  return result;
}

uint64_t sub_34C38(uint64_t a1)
{
  return a1;
}

uint64_t sub_34C64(uint64_t a1, int a2, uint64_t a3, int a4, int a5, int a6, unsigned int a7, int8x8_t a8)
{
  int v21 = 0;
  uint64_t v8 = 4294966295;
  if (a4 >= 1 && a5 >= 1 && a6 >= 1 && a7 <= 0x40)
  {
    if (!a7 || (a8.i32[0] = a7, uint8x8_t v16 = (uint8x8_t)vcnt_s8(a8), v16.i16[0] = vaddlv_u8(v16), v16.i32[0] <= 1u))
    {
      if (a2)
      {
        __uint64_t v18 = sub_349EC();
        if (!v18) {
          return 4294966293;
        }
        int v17 = v18;
        uint64_t v19 = sub_40DC(a3, a4, a5, a6, a7, (uint64_t *)&v21);
        if (!v19) {
          goto LABEL_13;
        }
        uint64_t v8 = v19;
        sub_34A54(v17);
      }
      else
      {
        uint64_t v8 = sub_40DC(a3, a4, a5, a6, a7, (uint64_t *)&v21);
        if (!v8)
        {
          int v17 = 0;
LABEL_13:
          *(_DWORD *)a1 = a2;
          *(_DWORD *)(a1 + 4) = a5;
          *(_DWORD *)(a1 + 8) = a6;
          *(_DWORD *)(a1 + 12) = a7;
          *(_DWORD *)(a1 + 16) = 0;
          *(void *)(a1 + 24) = v17;
          sub_3D84((void *)(a1 + 32), v21);
          return 0;
        }
      }
    }
  }
  return v8;
}

uint64_t sub_34DA0(uint64_t a1, uint64_t *a2)
{
  *a2 = 0;
  uint64_t v3 = a1 + 32;
  for (uint64_t i = sub_3E18(a1 + 32); ; uint64_t i = sub_3CA8(v5))
  {
    uint64_t v5 = i;
    if (i == sub_3E38(v3)) {
      return 4294966289;
    }
    if (sub_4410(v5)) {
      break;
    }
  }
  uint64_t result = 0;
  *a2 = v5;
  return result;
}

uint64_t sub_34E14(uint64_t a1, void *a2, _DWORD *a3)
{
  int v9 = 0;
  if (!a2) {
    return 4294966295;
  }
  *a2 = 0;
  if (*(_DWORD *)a1) {
    sub_34A9C(*(pthread_mutex_t **)(a1 + 24));
  }
  uint64_t v6 = sub_34DA0(a1, (uint64_t *)&v9);
  if (!v6) {
    goto LABEL_8;
  }
  uint64_t v7 = v6;
  if (*(_DWORD *)(a1 + 48) < *(_DWORD *)(a1 + 16))
  {
    uint64_t v7 = sub_3F50(*(_DWORD *)(a1 + 4), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12), (uint64_t *)&v9);
    if (!v7)
    {
      sub_3D84((void *)(a1 + 32), v9);
      ++*(_DWORD *)(a1 + 48);
LABEL_8:
      uint64_t v7 = sub_42C0((uint64_t)v9, a2, a3);
    }
  }
  if (*(_DWORD *)a1) {
    sub_34AD0(*(pthread_mutex_t **)(a1 + 24));
  }
  return v7;
}

uint64_t sub_34EEC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  *a3 = 0;
  uint64_t v5 = a1 + 32;
  for (uint64_t i = sub_3E18(a1 + 32); ; uint64_t i = sub_3CA8(v7))
  {
    uint64_t v7 = i;
    if (i == sub_3E38(v5)) {
      return 4294966295;
    }
    if (sub_4290(v7, a2)) {
      break;
    }
  }
  uint64_t result = 0;
  *a3 = v7;
  return result;
}

uint64_t sub_34F68(uint64_t a1, unint64_t a2)
{
  uint64_t v9 = 0;
  if (*(_DWORD *)a1) {
    sub_34A9C(*(pthread_mutex_t **)(a1 + 24));
  }
  uint64_t v4 = sub_34EEC(a1, a2, &v9);
  if (!v4)
  {
    uint64_t v4 = sub_4370(v9, a2);
    if (!v4)
    {
      uint64_t v5 = sub_3E50(a1 + 32);
      if (*(_DWORD *)(a1 + 48))
      {
        uint64_t v6 = (uint64_t *)v5;
        while (v6 != (uint64_t *)sub_3E70(a1 + 32))
        {
          uint64_t v7 = sub_3C88((uint64_t)v6);
          if (sub_43FC((uint64_t)v6))
          {
            sub_3CC8(v6);
            sub_421C(v6);
            uint64_t v4 = 0;
            --*(_DWORD *)(a1 + 48);
            goto LABEL_13;
          }
          uint64_t v4 = 0;
          uint64_t v6 = (uint64_t *)v7;
          if (!*(_DWORD *)(a1 + 48)) {
            goto LABEL_13;
          }
        }
      }
      uint64_t v4 = 0;
    }
  }
LABEL_13:
  if (*(_DWORD *)a1) {
    sub_34AD0(*(pthread_mutex_t **)(a1 + 24));
  }
  return v4;
}

uint64_t sub_35074(uint64_t a1, int a2, void *a3)
{
  if (*(_DWORD *)a1) {
    sub_34A9C(*(pthread_mutex_t **)(a1 + 24));
  }
  if (*(_DWORD *)(a1 + 48))
  {
    uint64_t v6 = 4294966295;
  }
  else
  {
    uint64_t v7 = sub_3D0C((void *)(a1 + 32));
    uint64_t v6 = sub_443C(v7, a2, a3);
  }
  if (*(_DWORD *)a1) {
    sub_34AD0(*(pthread_mutex_t **)(a1 + 24));
  }
  return v6;
}

uint64_t sub_350F0(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (*(_DWORD *)a1) {
    sub_34A9C(*(pthread_mutex_t **)(a1 + 24));
  }
  if (*(_DWORD *)(a1 + 48))
  {
    uint64_t v6 = 4294966295;
  }
  else
  {
    uint64_t v7 = sub_3D0C((void *)(a1 + 32));
    uint64_t v6 = sub_4478(v7, a2, a3);
  }
  if (*(_DWORD *)a1) {
    sub_34AD0(*(pthread_mutex_t **)(a1 + 24));
  }
  return v6;
}

uint64_t sub_3516C(uint64_t a1, int a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    if (sub_44EF8(0x1Cu, 4))
    {
      int v10 = sub_44F3C(0x1Cu);
      __uint64_t v11 = sub_4F1D8();
      __uint64_t v12 = (const char *)sub_44F70(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create CFDict %p %d %d\n", v11, 28, v12, "AVE_MCTF_BuildDestPixelBufAttributes", 82, "pAttrDict != __null", (const void *)a1, a2, 0);
        __uint64_t v11 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDict %p %d %d", v11, 28);
    }
    return 4294966293;
  }
  CFMutableDictionaryRef v5 = Mutable;
  if (sub_44EF8(0x1Cu, 7))
  {
    int v6 = sub_44F3C(0x1Cu);
    __uint64_t v7 = sub_4F1D8();
    uint64_t v8 = (const char *)sub_44F70(7);
    if (v6)
    {
      printf("%lld %d AVE %s: pAttrDict :%p\n", v7, 28, v8, v5);
      __uint64_t v9 = sub_4F1D8();
      long long v48 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: pAttrDict :%p", v9, 28, v48, v5);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: pAttrDict :%p", v7, 28, v8, v5);
    }
  }
  if (sub_44EF8(0x1Cu, 8))
  {
    int v13 = sub_44F3C(0x1Cu);
    __uint64_t v14 = sub_4F1D8();
    __uint64_t v15 = (const char *)sub_44F70(8);
    if (v13)
    {
      printf("%lld %d AVE %s: %s sourceFormat CMOSType PixelFormatType = %d\n", v14, 28, v15, "AVE_MCTF_BuildDestPixelBufAttributes", a2);
      __uint64_t v16 = sub_4F1D8();
      uint64_t v49 = (const char *)sub_44F70(8);
      syslog(3, "%lld %d AVE %s: %s sourceFormat CMOSType PixelFormatType = %d", v16, 28, v49, "AVE_MCTF_BuildDestPixelBufAttributes", a2);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s sourceFormat CMOSType PixelFormatType = %d", v14, 28, v15, "AVE_MCTF_BuildDestPixelBufAttributes", a2);
    }
  }
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  CFDictionaryRef v17 = CFDictionaryCreate(kCFAllocatorDefault, 0, 0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!v17)
  {
    if (sub_44EF8(0x1Cu, 4))
    {
      int v23 = sub_44F3C(0x1Cu);
      __uint64_t v24 = sub_4F1D8();
      int v25 = (const char *)sub_44F70(4);
      if (v23)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create CFDict %p %d %d\n", v24, 28, v25, "AVE_MCTF_BuildDestPixelBufAttributes", 98, "pEmptyDict!= __null", (const void *)a1, a2, 0);
        __uint64_t v26 = sub_4F1D8();
        sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDict %p %d %d", v26, 28);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDict %p %d %d", v24, 28);
      }
    }
    CFRelease(v5);
    return 4294966293;
  }
  CFDictionaryRef v18 = v17;
  CFDictionarySetValue(v5, kCVPixelBufferIOSurfacePropertiesKey, v17);
  *(void *)(a1 + 104) = v5;
  if (sub_44EF8(0x1Cu, 7))
  {
    int v19 = sub_44F3C(0x1Cu);
    __uint64_t v20 = sub_4F1D8();
    int v21 = (const char *)sub_44F70(7);
    if (v19)
    {
      printf("%lld %d AVE %s: %s FigCreatePixelBufferAttributesWithIOSurfaceSupport err:%d\n", v20, 28, v21, "AVE_MCTF_BuildDestPixelBufAttributes", 0);
      __uint64_t v22 = sub_4F1D8();
      __uint64_t v50 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: %s FigCreatePixelBufferAttributesWithIOSurfaceSupport err:%d", v22, 28, v50, "AVE_MCTF_BuildDestPixelBufAttributes", 0);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s FigCreatePixelBufferAttributesWithIOSurfaceSupport err:%d", v20, 28, v21, "AVE_MCTF_BuildDestPixelBufAttributes", 0);
    }
  }
  if (sub_44EF8(0x1Cu, 7))
  {
    int v27 = sub_44F3C(0x1Cu);
    __uint64_t v28 = sub_4F1D8();
    uint64_t v29 = (const char *)sub_44F70(7);
    if (v27)
    {
      printf("%lld %d AVE %s: %s pMCTF->pOutPxlBufAttr %p\n", v28, 28, v29, "AVE_MCTF_BuildDestPixelBufAttributes", *(const void **)(a1 + 104));
      __uint64_t v28 = sub_4F1D8();
      uint64_t v29 = (const char *)sub_44F70(7);
    }
    syslog(3, "%lld %d AVE %s: %s pMCTF->pOutPxlBufAttr %p", v28, 28, v29, "AVE_MCTF_BuildDestPixelBufAttributes", *(const void **)(a1 + 104));
  }
  if (sub_44EF8(0x1Cu, 7))
  {
    int v30 = sub_44F3C(0x1Cu);
    __uint64_t v31 = sub_4F1D8();
    __uint64_t v32 = (const char *)sub_44F70(7);
    int v33 = *(_DWORD *)(a1 + 1980);
    if (v30)
    {
      printf("%lld %d AVE %s: %s source_width=%d source_height=%d\n", v31, 28, v32, "AVE_MCTF_BuildDestPixelBufAttributes", *(_DWORD *)(a1 + 1976), v33);
      __uint64_t v34 = sub_4F1D8();
      __uint64_t v35 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: %s source_width=%d source_height=%d", v34, 28, v35, "AVE_MCTF_BuildDestPixelBufAttributes", *(_DWORD *)(a1 + 1976), *(_DWORD *)(a1 + 1980));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s source_width=%d source_height=%d", v31, 28, v32, "AVE_MCTF_BuildDestPixelBufAttributes", *(_DWORD *)(a1 + 1976), v33);
    }
  }
  int v36 = VTTemporalFilterPluginSessionSetOutputPixelBufferAttributes();
  if (v36)
  {
    int v37 = v36;
    if (sub_44EF8(0x1Cu, 4))
    {
      int v38 = sub_44F3C(0x1Cu);
      __uint64_t v39 = sub_4F1D8();
      __uint64_t v40 = (const char *)sub_44F70(4);
      if (v38)
      {
        printf("%lld %d AVE %s: %s:%d %s | VTTemporalFilterPluginSessionSetOutputPixelBufferAttributes failed %p %d %d\n", v39, 28, v40, "AVE_MCTF_BuildDestPixelBufAttributes", 108, "err == noErr", (const void *)a1, a2, v37);
        __uint64_t v41 = sub_4F1D8();
        sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | VTTemporalFilterPluginSessionSetOutputPixelBufferAttributes failed %p %d %d", v41, 28);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | VTTemporalFilterPluginSessionSetOutputPixelBufferAttributes failed %p %d %d", v39, 28);
      }
    }
    uint64_t v46 = 4294966296;
  }
  else
  {
    if (sub_44EF8(0x1Cu, 7))
    {
      int v42 = sub_44F3C(0x1Cu);
      __uint64_t v43 = sub_4F1D8();
      int v44 = (const char *)sub_44F70(7);
      if (v42)
      {
        printf("%lld %d AVE %s:  VTTemporalFilterPluginSessionSetOutputPixelBufferAttributes err:%d\n", v43, 28, v44, 0);
        __uint64_t v45 = sub_4F1D8();
        int v51 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s:  VTTemporalFilterPluginSessionSetOutputPixelBufferAttributes err:%d", v45, 28, v51, 0);
      }
      else
      {
        syslog(3, "%lld %d AVE %s:  VTTemporalFilterPluginSessionSetOutputPixelBufferAttributes err:%d", v43, 28, v44, 0);
      }
    }
    uint64_t v46 = 0;
  }
  CFRelease(v5);
  CFRelease(v18);
  return v46;
}

uint64_t sub_35910(uint64_t a1, uint64_t a2, unsigned int *a3, _DWORD *a4)
{
  if (sub_44EF8(0x1Cu, 6))
  {
    int v8 = sub_44F3C(0x1Cu);
    __uint64_t v9 = sub_4F1D8();
    int v10 = (const char *)sub_44F70(6);
    if (v8)
    {
      printf("%lld %d AVE %s: %s Enter %p %p %p %p\n", v9, 28, v10, "AVE_MCTF_AdjustStrength", (const void *)a1, (const void *)a2, a3, a4);
      __uint64_t v9 = sub_4F1D8();
      sub_44F70(6);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %p %p %p", v9, 28);
  }
  if (a1 && a2 && a3)
  {
    __uint64_t v11 = sub_34B04(dword_83820, *(_DWORD *)(a2 + 64));
    if (v11)
    {
      __uint64_t v12 = v11;
      double v13 = *(double *)(a2 + 40) * *(double *)(a2 + 24) * *(double *)(a2 + 32) / (*(double *)(a2 + 48) * 16777216.0);
      uint64_t v14 = (int)v13;
      if (sub_36000((_DWORD *)a1, v11, *a3, (int)v13, (int *)a3))
      {
        if (sub_44EF8(0x1Cu, 4))
        {
          int v15 = sub_44F3C(0x1Cu);
          __uint64_t v16 = sub_4F1D8();
          CFDictionaryRef v17 = (const char *)sub_44F70(4);
          if (v15)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to find range idx %p %d %p %d %d\n", v16, 28, v17, "AVE_MCTF_AdjustStrength", 167, "ret == 0", (const void *)a1, *(_DWORD *)(a1 + 76), v12, *a3, v14);
            __uint64_t v16 = sub_4F1D8();
            CFDictionaryRef v17 = (const char *)sub_44F70(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to find range idx %p %d %p %d %d", v16, 28, v17, "AVE_MCTF_AdjustStrength", 167, "ret == 0", a1, *(unsigned int *)(a1 + 76), v12, *a3, v14);
        }
LABEL_34:
        uint64_t v28 = 4294966296;
        goto LABEL_35;
      }
      if (sub_34B58((uint64_t)v12, *a3, a4))
      {
        if (sub_44EF8(0x1Cu, 4))
        {
          int v25 = sub_44F3C(0x1Cu);
          __uint64_t v26 = sub_4F1D8();
          int v27 = (const char *)sub_44F70(4);
          if (v25)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to get strength level for rangeIdx %p %d %p %d\n", v26, 28, v27, "AVE_MCTF_AdjustStrength", 172, "ret == 0", (const void *)a1, *(_DWORD *)(a1 + 76), v12, *a3);
            __uint64_t v26 = sub_4F1D8();
            int v27 = (const char *)sub_44F70(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get strength level for rangeIdx %p %d %p %d", v26, 28, v27, "AVE_MCTF_AdjustStrength", 172, "ret == 0", a1, *(unsigned int *)(a1 + 76), v12, *a3);
        }
        goto LABEL_34;
      }
      if (sub_44EF8(0x1Cu, 8))
      {
        int v29 = sub_44F3C(0x1Cu);
        __uint64_t v30 = sub_4F1D8();
        __uint64_t v31 = (const char *)sub_44F70(8);
        if (v29)
        {
          printf("%lld %d AVE %s: %s:%d %p %p %d %p sID %d gain %d rIdx %d s %d\n", v30, 28, v31, "AVE_MCTF_AdjustStrength", 175, (const void *)a1, *(const void **)(a1 + 64), *(_DWORD *)(a1 + 76), (const void *)a2, *(_DWORD *)(a2 + 64), v14, *a3, *a4);
          __uint64_t v32 = sub_4F1D8();
          __uint64_t v39 = sub_44F70(8);
          syslog(3, "%lld %d AVE %s: %s:%d %p %p %d %p sID %d gain %d rIdx %d s %d", v32, 28, v39, "AVE_MCTF_AdjustStrength", 175);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %p %p %d %p sID %d gain %d rIdx %d s %d", v30, 28, v31, "AVE_MCTF_AdjustStrength", 175);
        }
      }
      uint64_t v28 = 0;
    }
    else
    {
      if (sub_44EF8(0x1Cu, 4))
      {
        int v22 = sub_44F3C(0x1Cu);
        __uint64_t v23 = sub_4F1D8();
        __uint64_t v24 = (const char *)sub_44F70(4);
        if (v22)
        {
          printf("%lld %d AVE %s: %s:%d %s | sensorID not supported %p %d %d\n", v23, 28, v24, "AVE_MCTF_AdjustStrength", 158, "pMap != __null", (const void *)a1, *(_DWORD *)(a1 + 76), *(_DWORD *)(a2 + 64));
          __uint64_t v23 = sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | sensorID not supported %p %d %d", v23, 28);
      }
      uint64_t v28 = 4294966294;
    }
  }
  else
  {
    if (sub_44EF8(0x1Cu, 4))
    {
      int v18 = sub_44F3C(0x1Cu);
      __uint64_t v19 = sub_4F1D8();
      __uint64_t v20 = (const char *)sub_44F70(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong params, pMCTF = %p %p %p %p\n", v19, 28, v20, "AVE_MCTF_AdjustStrength", 151, "(pMCTF != __null) && (psData != __null) && (pRangeIdx != __null)", (const void *)a1, (const void *)a2, a3, a4);
        __uint64_t v21 = sub_4F1D8();
        int v38 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong params, pMCTF = %p %p %p %p", v21, 28, v38, "AVE_MCTF_AdjustStrength");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong params, pMCTF = %p %p %p %p", v19, 28, v20, "AVE_MCTF_AdjustStrength");
      }
    }
    uint64_t v28 = 4294966295;
  }
LABEL_35:
  if (sub_44EF8(0x1Cu, 6))
  {
    int v33 = sub_44F3C(0x1Cu);
    __uint64_t v34 = sub_4F1D8();
    __uint64_t v35 = (const char *)sub_44F70(6);
    if (v33)
    {
      printf("%lld %d AVE %s: %s Enter %p %p %p %p %d\n", v34, 28, v35, "AVE_MCTF_AdjustStrength", (const void *)a1, (const void *)a2, a3, a4, v28);
      __uint64_t v36 = sub_4F1D8();
      __uint64_t v40 = sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p %p %p %p %d", v36, 28, v40);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p %p %p %p %d", v34, 28, v35);
    }
  }
  return v28;
}

uint64_t sub_36000(_DWORD *a1, _DWORD *a2, int a3, int a4, int *a5)
{
  if (sub_44EF8(0x1Cu, 6))
  {
    int v10 = sub_44F3C(0x1Cu);
    __uint64_t v11 = sub_4F1D8();
    __uint64_t v12 = (const char *)sub_44F70(6);
    if (v10)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %p %d %d %p\n", v11, 28, v12, "AVE_MCTF_FindRangeIdx", a1, a1[19], a2, a3, a4, a5);
      __uint64_t v13 = sub_4F1D8();
      uint64_t v28 = sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p %d %p %d %d %p", v13, 28, v28);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p %d %p %d %d %p", v11, 28, v12);
    }
  }
  if (a1 && a2 && a5)
  {
    if (a3 >= 1)
    {
      unsigned int v14 = a3 + 1;
      do
      {
        uint64_t v15 = sub_34B38((uint64_t)a2, v14 - 2);
        if (!v15) {
          break;
        }
        if (*(_DWORD *)(v15 + 4) <= a4) {
          break;
        }
        *a5 = v14 - 2;
        --v14;
      }
      while (v14 > 1);
    }
    if (*a5 == a3)
    {
      for (int i = a3 + 1; i < a2[2]; ++i)
      {
        CFDictionaryRef v17 = (int *)sub_34B38((uint64_t)a2, i);
        if (!v17 || *v17 >= a4) {
          break;
        }
        *a5 = i;
      }
    }
    uint64_t v22 = 0;
  }
  else
  {
    if (sub_44EF8(0x1Cu, 4))
    {
      int v18 = sub_44F3C(0x1Cu);
      __uint64_t v19 = sub_4F1D8();
      __uint64_t v20 = (const char *)sub_44F70(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong params, pMCTF = %p %d %p %d %d\n", v19, 28, v20, "AVE_MCTF_FindRangeIdx", 206, "(pMCTF != __null) && (pMap != __null) && (pNewRangeIdx != __null)", a1, a1[19], a2, a3, a4);
        __uint64_t v21 = sub_4F1D8();
        int v29 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong params, pMCTF = %p %d %p %d %d", v21, 28, v29, "AVE_MCTF_FindRangeIdx");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong params, pMCTF = %p %d %p %d %d", v19, 28, v20, "AVE_MCTF_FindRangeIdx");
      }
    }
    uint64_t v22 = 4294966295;
  }
  if (sub_44EF8(0x1Cu, 6))
  {
    int v23 = sub_44F3C(0x1Cu);
    __uint64_t v24 = sub_4F1D8();
    int v25 = (const char *)sub_44F70(6);
    if (v23)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %p %d %d %p %d\n", v24, 28, v25, "AVE_MCTF_FindRangeIdx", a1, a1[19], a2, a3, a4, a5, v22);
      __uint64_t v26 = sub_4F1D8();
      __uint64_t v30 = sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d %d %p %d", v26, 28, v30, "AVE_MCTF_FindRangeIdx");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d %d %p %d", v24, 28, v25, "AVE_MCTF_FindRangeIdx");
    }
  }
  return v22;
}

uint64_t sub_363A0(uint64_t a1, CVPixelBufferRef *a2, unsigned char *a3, _DWORD *a4, _DWORD *a5, int a6)
{
  __uint64_t v11 = (_DWORD *)(a1 + 165956);
  uint64_t v12 = a1 + 17976;
  memset(v42, 0, sizeof(v42));
  long long v41 = 0u;
  long long v40 = 0u;
  long long v39 = 0u;
  long long v38 = 0u;
  long long v37 = 0u;
  long long v36 = 0u;
  unsigned int v13 = *(_DWORD *)(a1 + 165992);
  if (!v13) {
    unsigned int v13 = *(_DWORD *)(a1 + 1976);
  }
  unsigned int v30 = v13;
  int v14 = *(_DWORD *)(a1 + 165996);
  if (!v14) {
    int v14 = *(_DWORD *)(a1 + 1980);
  }
  int v15 = *(_DWORD *)(a1 + 72);
  int v31 = v14;
  int v32 = v15;
  int v16 = *(_DWORD *)(a1 + 18856);
  int v17 = *(_DWORD *)(a1 + 1972);
  int v33 = *(_DWORD *)(a1 + 84);
  int v34 = v17;
  int v35 = v16;
  uint64_t v18 = sub_BC58(&v30, a2, (CVPixelBufferPoolRef *)(a1 + 166000));
  if (!v18)
  {
    *a3 = v42[6];
    int v20 = HIDWORD(v41);
    *a4 = DWORD2(v41);
    *a5 = v20;
    int v21 = *(_DWORD *)(a1 + 84);
    if (v21 <= 15 && (v21 < 11 || *(unsigned char *)(v12 + 458)))
    {
      *(_WORD *)(v12 + 456) = BYTE1(v42[6]);
      goto LABEL_14;
    }
    *(_WORD *)(v12 + 456) = 0;
    unsigned int v22 = v30;
    char v23 = BYTE8(v38) - 1;
    char v24 = 1;
    *(_WORD *)(v12 + 460) = 1 << (BYTE8(v38) - 1);
    *(_DWORD *)(v12 + 464) = 65537 << v23;
    if (v22 == *(_DWORD *)(a1 + 1976))
    {
      if (v31 == *(_DWORD *)(a1 + 1980))
      {
LABEL_14:
        char v24 = BYTE2(v42[6]);
        goto LABEL_15;
      }
      char v24 = 1;
    }
LABEL_15:
    *(unsigned char *)(v12 + 974) = v24;
    int v25 = HIDWORD(v39);
    *(unsigned char *)(v12 + 132) = (HIDWORD(v39) & 0xFFFFFFFE) == 2;
    if (v25 == 3) {
      *(unsigned char *)(v12 + 459) = BYTE4(v40);
    }
    if (a6)
    {
      int v26 = DWORD2(v38);
      *(_DWORD *)(v12 + 876) = DWORD1(v38);
      *(_DWORD *)(a1 + 103188) = v39;
      *(_DWORD *)(v12 + 40) = v26;
      *(unsigned char *)uint64_t v12 = v25 != 1;
      *(unsigned char *)(v12 + 889) = 1;
    }
    if (*v11)
    {
      if (*(_DWORD *)(v12 + 2484) != DWORD1(v38) && sub_44EF8(0x1Cu, 4))
      {
        int v27 = sub_44F3C(0x1Cu);
        __uint64_t v28 = sub_4F1D8();
        int v29 = (const char *)sub_44F70(4);
        if (v27)
        {
          printf("%lld %d AVE %s: %s:%d pixel format change %d %d 0x%x 0x%x\n", v28, 28, v29, "AVE_MCTF_VerifyImageBuffer", 323, *(_DWORD *)(a1 + 76), *v11, *(_DWORD *)(v12 + 2484), DWORD1(v38));
          __uint64_t v28 = sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d pixel format change %d %d 0x%x 0x%x", v28, 28);
      }
    }
    else
    {
      *(_DWORD *)(v12 + 2484) = DWORD1(v38);
    }
  }
  return v18;
}

void sub_3666C(uint64_t a1)
{
  if (sub_44EF8(0x1Cu, 7))
  {
    int v2 = sub_44F3C(0x1Cu);
    __uint64_t v3 = sub_4F1D8();
    uint64_t v4 = (const char *)sub_44F70(7);
    if (v2)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_SetEncoderDefault\n", v3, 28, v4);
      __uint64_t v5 = sub_4F1D8();
      int v10 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetEncoderDefault", v5, 28, v10);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetEncoderDefault", v3, 28, v4);
    }
  }
  if (a1)
  {
    *(unsigned char *)(a1 + 18780) = 1;
    *(void *)(a1 + 18532) = 0x100000001;
    *(_DWORD *)(a1 + 18148) = 1;
    *(unsigned char *)(a1 + 18152) = 0;
    *(void *)(a1 + 18156) = 1;
    *(_DWORD *)(a1 + 18164) = *(_DWORD *)(a1 + 1980);
    *(_DWORD *)(a1 + 18420) = *(_DWORD *)(a1 + 18420) & 0xFFFFFFE3 | 0x10;
    *(unsigned char *)(a1 + 18109) = 1;
    *(_DWORD *)(a1 + 292) = 1;
    *(unsigned char *)(a1 + 18864) = 1;
    *(_OWORD *)(a1 + 360) = xmmword_83810;
    *(_OWORD *)(a1 + 376) = xmmword_83800;
    *(unsigned char *)(a1 + 20306) = 0;
    *(void *)(a1 + 1968) = 0xE000000000;
    *(unsigned char *)(a1 + 17977) = 1;
    *(_WORD *)(a1 + 18444) = 769;
    *(unsigned char *)(a1 + 17978) = 1;
  }
  else if (sub_44EF8(0x1Cu, 4))
  {
    int v6 = sub_44F3C(0x1Cu);
    __uint64_t v7 = sub_4F1D8();
    int v8 = (const char *)sub_44F70(4);
    if (v6)
    {
      printf("%lld %d AVE %s: FIG: pMCTF == NULL\n", v7, 28, v8);
      __uint64_t v9 = sub_4F1D8();
      __uint64_t v11 = (const char *)sub_44F70(4);
      syslog(3, "%lld %d AVE %s: FIG: pMCTF == NULL", v9, 28, v11);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: pMCTF == NULL", v7, 28, v8);
    }
  }
}

uint64_t sub_3682C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1)
  {
    if (sub_44EF8(3u, 4))
    {
      int v6 = sub_44F3C(3u);
      __uint64_t v7 = sub_4F1D8();
      int v8 = (const char *)sub_44F70(4);
      if (v6)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_GetPerFrameData pMCTF = NULL.\n", v7, 3, v8, "AVE_GetPerFrameData", 399, "pMCTF != __null");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_GetPerFrameData pMCTF = NULL.");
    }
    return 4294954384;
  }
  if (!a3)
  {
    if (sub_44EF8(3u, 4))
    {
      int v9 = sub_44F3C(3u);
      __uint64_t v10 = sub_4F1D8();
      __uint64_t v11 = (const char *)sub_44F70(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_GetPerFrameData PerFrameCFDataRef Data = NULL.\n", v10, 3, v11, "AVE_GetPerFrameData", 400, "PerFrameData != __null");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_GetPerFrameData PerFrameCFDataRef Data = NULL.");
    }
    return 4294954384;
  }
  *(unsigned char *)(a3 + 1537) = *(unsigned char *)(a1 + 18108);
  *(unsigned char *)(a3 + 1538) = 1;
  *(void *)(a3 + 1584) = 0x3FF0000000000000;
  int v3 = *(_DWORD *)(a1 + 165992);
  if (!v3) {
    int v3 = *(_DWORD *)(a1 + 1976);
  }
  *(_DWORD *)(a3 + 724) = v3;
  int v4 = *(_DWORD *)(a1 + 165996);
  if (!v4) {
    int v4 = *(_DWORD *)(a1 + 1980);
  }
  uint64_t result = 0;
  *(_DWORD *)(a3 + 728) = v4;
  return result;
}

void sub_36A28(uint64_t a1, uint64_t a2)
{
  if (sub_44EF8(0x1Cu, 7))
  {
    int v4 = sub_44F3C(0x1Cu);
    __uint64_t v5 = sub_4F1D8();
    int v6 = (const char *)sub_44F70(7);
    if (v4)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_PrepareVideoAndSequenceHeader\n", v5, 28, v6);
      __uint64_t v7 = sub_4F1D8();
      __uint64_t v19 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PrepareVideoAndSequenceHeader", v7, 28, v19);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PrepareVideoAndSequenceHeader", v5, 28, v6);
    }
  }
  if (a1)
  {
    if (a2)
    {
      int32x2_t v8 = *(int32x2_t *)(a1 + 1976);
      *(int32x2_t *)(a1 + 103196) = v8;
      *(uint32x2_t *)(a1 + 103204) = vshr_n_u32((uint32x2_t)vadd_s32(v8, (int32x2_t)0x1F0000001FLL), 5uLL);
      *(_DWORD *)(a1 + 103188) = 1;
    }
    else if (sub_44EF8(3u, 4))
    {
      int v12 = sub_44F3C(3u);
      __uint64_t v13 = sub_4F1D8();
      int v14 = (const char *)sub_44F70(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: imageBuffer = NULL.\n", v13, 3, v14, "AVE_PrepareVideoAndSequenceHeader", 478, "imageBuffer != __null");
        sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: imageBuffer = NULL.");
    }
  }
  else if (sub_44EF8(3u, 4))
  {
    int v9 = sub_44F3C(3u);
    __uint64_t v10 = sub_4F1D8();
    __uint64_t v11 = (const char *)sub_44F70(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: pMCTF = NULL.\n", v10, 3, v11, "AVE_PrepareVideoAndSequenceHeader", 477, "pMCTF != __null");
      sub_4F1D8();
      sub_44F70(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: pMCTF = NULL.");
  }
  if (sub_44EF8(0x1Cu, 7))
  {
    int v15 = sub_44F3C(0x1Cu);
    __uint64_t v16 = sub_4F1D8();
    int v17 = (const char *)sub_44F70(7);
    if (v15)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_PrepareVideoAndSequenceHeader\n", v16, 28, v17);
      __uint64_t v18 = sub_4F1D8();
      int v20 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_PrepareVideoAndSequenceHeader", v18, 28, v20);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_PrepareVideoAndSequenceHeader", v16, 28, v17);
    }
  }
}

uint64_t sub_36CF8(int a1, uint64_t a2, unsigned int a3)
{
  if (a1 == 1) {
    return a3;
  }
  else {
    return 0;
  }
}

uint64_t sub_36D04(int a1, int a2, int a3)
{
  unsigned int v3 = ((a2 + 31) & 0xFFFFFFE0) * ((a3 + 31) >> 5);
  unsigned int v4 = ((a2 + 15) & 0xFFFFFFF0) * ((a3 + 15) >> 4);
  if (a1) {
    unsigned int v4 = 0;
  }
  if (a1 != 1) {
    unsigned int v3 = v4;
  }
  return (v3 + 4095) & 0xFFFFF000;
}

BOOL sub_36D48(int a1, int a2, int a3)
{
  return a2 > 1 && a3 > 0 && a1 == 1;
}

uint64_t sub_36D5C(int a1, int a2)
{
  if (a1) {
    unsigned int v2 = 17314;
  }
  else {
    unsigned int v2 = 1574;
  }
  if (a2) {
    return v2 + 264;
  }
  else {
    return v2;
  }
}

uint64_t sub_36D7C(int a1, int a2)
{
  unsigned int v2 = a2 << 10;
  if (a1 != 1) {
    unsigned int v2 = 0;
  }
  if (a1) {
    return v2;
  }
  else {
    return 512;
  }
}

uint64_t sub_36D98(const void *a1, int a2, uint64_t a3, void *a4)
{
  if (a2 >= 1 && a4)
  {
    *a4 = 0;
    operator new();
  }
  if (sub_44EF8(0x4Cu, 4))
  {
    int v8 = sub_44F3C(0x4Cu);
    __uint64_t v9 = sub_4F1D8();
    __uint64_t v10 = (const char *)sub_44F70(4);
    if (v8)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d 0x%llx %p\n", v9, 76, v10, "AVE_USL_CreateSurface", 119, "size > 0 && ppSurface != __null", a1, a2, a3, a4);
      __uint64_t v11 = sub_4F1D8();
      __uint64_t v13 = sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d 0x%llx %p", v11, 76, v13, "AVE_USL_CreateSurface");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d 0x%llx %p", v9, 76, v10, "AVE_USL_CreateSurface");
    }
  }
  return 4294966295;
}

void sub_37150()
{
}

uint64_t sub_37174(unsigned char *a1)
{
  if (a1)
  {
    sub_4E624(a1);
    nullsub_2(a1);
    operator delete();
  }
  if (sub_44EF8(0x4Cu, 4))
  {
    int v2 = sub_44F3C(0x4Cu);
    __uint64_t v3 = sub_4F1D8();
    unsigned int v4 = (const char *)sub_44F70(4);
    if (v2)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p\n", v3, 76, v4, "AVE_USL_DestroySurface", 170, "pSurface != __null", 0);
      __uint64_t v3 = sub_4F1D8();
      sub_44F70(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p", v3);
  }
  return 4294966295;
}

uint64_t sub_372A4(_DWORD *a1, int a2, uint64_t *a3)
{
  memset(v27, 0, sizeof(v27));
  if (a1 && a3)
  {
    int v6 = sub_34010(5);
    int v8 = a1[4];
    int v7 = a1[5];
    uint64_t v9 = (uint64_t)v6[1];
    sub_4D5BC((char *)v27, 64, "%s-%d", v10, v11, v12, v13, v14, (char)*v6);
    if (v8 >= 1)
    {
      if (!*a3)
      {
LABEL_15:
        uint64_t v21 = sub_36D98(v27, v7, v9, a3);
        if (!v21) {
          return v21;
        }
        if (sub_44EF8(0x4Cu, 4))
        {
          int v22 = sub_44F3C(0x4Cu);
          __uint64_t v23 = sub_4F1D8();
          char v24 = (const char *)sub_44F70(4);
          if (v22)
          {
            printf("%lld %d AVE %s: %s:%d %s | failed to create surface %s %d\n", v23, 76, v24, "AVE_USL_CreateInSurfaces", 241, "ret == 0", (const char *)v27, v21);
            __uint64_t v23 = sub_4F1D8();
            sub_44F70(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create surface %s %d", v23, 76);
        }
        goto LABEL_12;
      }
      int v15 = sub_4EFD0(*a3);
      __uint64_t v16 = (unsigned char *)*a3;
      if (v15 < v7)
      {
        sub_37174(v16);
        *a3 = 0;
        goto LABEL_15;
      }
      if (!v16) {
        goto LABEL_15;
      }
    }
    return 0;
  }
  if (sub_44EF8(0x4Cu, 4))
  {
    int v17 = sub_44F3C(0x4Cu);
    __uint64_t v18 = sub_4F1D8();
    __uint64_t v19 = (const char *)sub_44F70(4);
    if (v17)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p\n", v18, 76, v19, "AVE_USL_CreateInSurfaces", 220, "pSInfoSet != __null && pSet != __null", a1, a2, a3);
      __uint64_t v20 = sub_4F1D8();
      int v26 = sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v20, 76, v26);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v18, 76, v19);
    }
  }
  uint64_t v21 = 4294966295;
LABEL_12:
  sub_3757C(a3);
  return v21;
}

uint64_t sub_3757C(uint64_t *a1)
{
  if (a1)
  {
    uint64_t result = *a1;
    if (result)
    {
      uint64_t result = sub_37174((unsigned char *)result);
      *a1 = 0;
    }
  }
  else
  {
    if (sub_44EF8(0x4Cu, 4))
    {
      int v3 = sub_44F3C(0x4Cu);
      __uint64_t v4 = sub_4F1D8();
      __uint64_t v5 = (const char *)sub_44F70(4);
      if (v3)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p\n", v4, 76, v5, "AVE_USL_DestroyInSurfaces", 266, "pSet != __null", 0);
        __uint64_t v4 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p", v4);
    }
    return 4294966295;
  }
  return result;
}

uint64_t sub_37694(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    *a2 = sub_4EE34(v4);
  }
  uint64_t v5 = a1[1];
  if (v5) {
    a2[1] = sub_4EE34(v5);
  }
  uint64_t v6 = a1[2];
  if (v6) {
    a2[2] = sub_4EE34(v6);
  }
  uint64_t v7 = a1[3];
  if (v7) {
    a2[3] = sub_4EE34(v7);
  }
  uint64_t v8 = a1[4];
  if (v8) {
    a2[5] = sub_4EE34(v8);
  }
  uint64_t v9 = a1[5];
  if (v9) {
    a2[6] = sub_4EE34(v9);
  }
  return 0;
}

uint64_t sub_3771C(_DWORD *a1, int a2, void *a3, void *a4)
{
  memset(v30, 0, sizeof(v30));
  if (a1 && a4)
  {
    *a4 = *a3;
    uint64_t v7 = sub_34010(4);
    int v9 = a1[10];
    int v8 = a1[11];
    uint64_t v10 = (uint64_t)v7[1];
    sub_4D5BC((char *)v30, 64, "%s-%d", v11, v12, v13, v14, v15, (char)*v7);
    if (v9 >= 1)
    {
      int v17 = (unsigned char **)(a4 + 1);
      uint64_t v16 = a4[1];
      if (!v16)
      {
LABEL_15:
        uint64_t v24 = sub_36D98(v30, v8, v10, a4 + 1);
        if (!v24) {
          return v24;
        }
        if (sub_44EF8(0x4Cu, 4))
        {
          int v25 = sub_44F3C(0x4Cu);
          __uint64_t v26 = sub_4F1D8();
          int v27 = (const char *)sub_44F70(4);
          if (v25)
          {
            printf("%lld %d AVE %s: %s:%d %s | failed to create surface %s %d\n", v26, 76, v27, "AVE_USL_CreateDataSurfaces", 369, "ret == 0", (const char *)v30, v24);
            __uint64_t v26 = sub_4F1D8();
            sub_44F70(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create surface %s %d", v26, 76);
        }
        goto LABEL_12;
      }
      int v18 = sub_4EFD0(v16);
      __uint64_t v19 = *v17;
      if (v18 < v8)
      {
        sub_37174(v19);
        *int v17 = 0;
        goto LABEL_15;
      }
      if (!v19) {
        goto LABEL_15;
      }
    }
    return 0;
  }
  if (sub_44EF8(0x4Cu, 4))
  {
    int v20 = sub_44F3C(0x4Cu);
    __uint64_t v21 = sub_4F1D8();
    int v22 = (const char *)sub_44F70(4);
    if (v20)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p\n", v21, 76, v22, "AVE_USL_CreateDataSurfaces", 346, "pSInfoSet != __null && pSet != __null", a1, a2, a4);
      __uint64_t v23 = sub_4F1D8();
      int v29 = sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v23, 76, v29);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v21, 76, v22);
    }
  }
  uint64_t v24 = 4294966295;
LABEL_12:
  sub_37A00((uint64_t)a4);
  return v24;
}

uint64_t sub_37A00(uint64_t a1)
{
  if (a1)
  {
    uint64_t result = *(void *)(a1 + 8);
    if (result)
    {
      uint64_t result = sub_37174((unsigned char *)result);
      *(void *)(a1 + 8) = 0;
    }
    if (*(void *)(a1 + 16))
    {
      uint64_t result = sub_37174(*(unsigned char **)(a1 + 16));
      *(void *)(a1 + 16) = 0;
    }
    if (*(void *)(a1 + 24))
    {
      uint64_t result = sub_37174(*(unsigned char **)(a1 + 24));
      *(void *)(a1 + 24) = 0;
    }
    if (*(void *)(a1 + 32))
    {
      uint64_t result = sub_37174(*(unsigned char **)(a1 + 32));
      *(void *)(a1 + 32) = 0;
    }
    if (*(void *)(a1 + 40))
    {
      uint64_t result = sub_37174(*(unsigned char **)(a1 + 40));
      *(void *)(a1 + 40) = 0;
    }
  }
  else
  {
    if (sub_44EF8(0x4Cu, 4))
    {
      int v3 = sub_44F3C(0x4Cu);
      __uint64_t v4 = sub_4F1D8();
      uint64_t v5 = (const char *)sub_44F70(4);
      if (v3)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p\n", v4, 76, v5, "AVE_USL_DestroyDataSurfaces", 395, "pSet != __null", 0);
        __uint64_t v4 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p", v4);
    }
    return 4294966295;
  }
  return result;
}

uint64_t sub_37B68(int a1, __CFArray *a2)
{
  int valuePtr = a1;
  if (a2)
  {
    CFNumberRef v3 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v3)
    {
      CFNumberRef v4 = v3;
      CFArrayAppendValue(a2, v3);
      CFRelease(v4);
      return 0;
    }
    else
    {
      if (sub_44EF8(0xFu, 4))
      {
        int v10 = sub_44F3C(0xFu);
        __uint64_t v11 = sub_4F1D8();
        uint64_t v12 = (const char *)sub_44F70(4);
        if (v10)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CFNumber %d %p\n", v11, 15, v12, "AVE_CFArray_AddSInt32", 88, "pNum != __null", valuePtr, a2);
          __uint64_t v11 = sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %d %p", v11, 15);
      }
      return 4294966293;
    }
  }
  else
  {
    if (sub_44EF8(0xFu, 4))
    {
      int v7 = sub_44F3C(0xFu);
      __uint64_t v8 = sub_4F1D8();
      int v9 = (const char *)sub_44F70(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %d %p\n", v8, 15, v9, "AVE_CFArray_AddSInt32", 84, "pArray != __null", a1, 0);
        __uint64_t v8 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %d %p", v8, 15);
    }
    return 4294966295;
  }
}

uint64_t sub_37D8C(uint64_t a1, __CFArray *a2)
{
  uint64_t valuePtr = a1;
  if (a2)
  {
    CFNumberRef v3 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
    if (v3)
    {
      CFNumberRef v4 = v3;
      CFArrayAppendValue(a2, v3);
      CFRelease(v4);
      return 0;
    }
    else
    {
      if (sub_44EF8(0xFu, 4))
      {
        int v10 = sub_44F3C(0xFu);
        __uint64_t v11 = sub_4F1D8();
        uint64_t v12 = (const char *)sub_44F70(4);
        if (v10)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CFNumber %lld %p\n", v11, 15, v12, "AVE_CFArray_AddSInt64", 115, "pNum != __null", valuePtr, a2);
          __uint64_t v11 = sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %lld %p", v11, 15);
      }
      return 4294966293;
    }
  }
  else
  {
    if (sub_44EF8(0xFu, 4))
    {
      int v7 = sub_44F3C(0xFu);
      __uint64_t v8 = sub_4F1D8();
      int v9 = (const char *)sub_44F70(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %lld %p\n", v8, 15, v9, "AVE_CFArray_AddSInt64", 111, "pArray != __null", a1, 0);
        __uint64_t v8 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %lld %p", v8, 15);
    }
    return 4294966295;
  }
}

uint64_t sub_37FB0(__CFArray *a1, double a2)
{
  double valuePtr = a2;
  if (a1)
  {
    CFNumberRef v3 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
    if (v3)
    {
      CFNumberRef v4 = v3;
      CFArrayAppendValue(a1, v3);
      CFRelease(v4);
      return 0;
    }
    else
    {
      if (sub_44EF8(0xFu, 4))
      {
        int v10 = sub_44F3C(0xFu);
        __uint64_t v11 = sub_4F1D8();
        uint64_t v12 = (const char *)sub_44F70(4);
        if (v10)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CFNumber %lf %p\n", v11, 15, v12, "AVE_CFArray_AddDouble", 170, "pNum != __null", valuePtr, a1);
          __uint64_t v11 = sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %lf %p", v11);
      }
      return 4294966293;
    }
  }
  else
  {
    if (sub_44EF8(0xFu, 4))
    {
      int v7 = sub_44F3C(0xFu);
      __uint64_t v8 = sub_4F1D8();
      int v9 = (const char *)sub_44F70(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %lf %p\n", v8, 15, v9, "AVE_CFArray_AddDouble", 166, "pArray != __null", a2, 0);
        __uint64_t v8 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %lf %p", v8);
    }
    return 4294966295;
  }
}

uint64_t sub_381F4(void *key, int a2, CFMutableDictionaryRef theDict)
{
  if (key && theDict)
  {
    uint64_t v6 = (const void **)&kCFBooleanTrue;
    if (!a2) {
      uint64_t v6 = (const void **)&kCFBooleanFalse;
    }
    CFDictionaryAddValue(theDict, key, *v6);
    return 0;
  }
  else
  {
    if (sub_44EF8(0xFu, 4))
    {
      int v8 = sub_44F3C(0xFu);
      __uint64_t v9 = sub_4F1D8();
      int v10 = (const char *)sub_44F70(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p\n", v9, 15, v10, "AVE_CFDict_AddBool", 383, "pKey != __null && pDict != __null", key, a2, theDict);
        __uint64_t v11 = sub_4F1D8();
        uint64_t v12 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v11, 15, v12);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v9, 15, v10);
      }
    }
    return 4294966295;
  }
}

uint64_t sub_38348(const void *a1, __CFDictionary *a2, double a3)
{
  double valuePtr = a3;
  if (a1 && a2)
  {
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
    if (v6)
    {
      CFNumberRef v7 = v6;
      CFDictionaryAddValue(a2, a1, v6);
      CFRelease(v7);
      return 0;
    }
    else
    {
      if (sub_44EF8(0xFu, 4))
      {
        int v12 = sub_44F3C(0xFu);
        __uint64_t v13 = sub_4F1D8();
        uint64_t v14 = (const char *)sub_44F70(4);
        if (v12)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %lf %p\n", v13, 15, v14, "AVE_CFDict_AddDouble", 470, "pNum != __null", a1, valuePtr, a2);
          __uint64_t v13 = sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %lf %p", v13, 15);
      }
      return 4294966293;
    }
  }
  else
  {
    if (sub_44EF8(0xFu, 4))
    {
      int v9 = sub_44F3C(0xFu);
      __uint64_t v10 = sub_4F1D8();
      __uint64_t v11 = (const char *)sub_44F70(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %lf %p\n", v10, 15, v11, "AVE_CFDict_AddDouble", 466, "pKey != __null && pDict != __null", a1, a3, a2);
        __uint64_t v10 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %lf %p", v10, 15);
    }
    return 4294966295;
  }
}

uint64_t sub_385A8(const void *a1, int a2, __CFDictionary *a3)
{
  int valuePtr = a2;
  if (a1 && a3)
  {
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v6)
    {
      CFNumberRef v7 = v6;
      CFDictionaryAddValue(a3, a1, v6);
      CFRelease(v7);
      return 0;
    }
    else
    {
      if (sub_44EF8(0xFu, 4))
      {
        int v13 = sub_44F3C(0xFu);
        __uint64_t v14 = sub_4F1D8();
        uint64_t v15 = (const char *)sub_44F70(4);
        if (v13)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %d %p\n", v14, 15, v15, "AVE_CFDict_AddSInt32", 561, "pNum != __null", a1, valuePtr, a3);
          __uint64_t v16 = sub_4F1D8();
          int v18 = sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %d %p", v16, 15, v18);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %d %p", v14, 15, v15);
        }
      }
      return 4294966293;
    }
  }
  else
  {
    if (sub_44EF8(0xFu, 4))
    {
      int v9 = sub_44F3C(0xFu);
      __uint64_t v10 = sub_4F1D8();
      __uint64_t v11 = (const char *)sub_44F70(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p\n", v10, 15, v11, "AVE_CFDict_AddSInt32", 557, "pKey != __null && pDict != __null", a1, a2, a3);
        __uint64_t v12 = sub_4F1D8();
        int v17 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v12, 15, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v10, 15, v11);
      }
    }
    return 4294966295;
  }
}

uint64_t sub_387E8(const void *a1, uint64_t a2, __CFDictionary *a3)
{
  uint64_t valuePtr = a2;
  if (a1 && a3)
  {
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
    if (v6)
    {
      CFNumberRef v7 = v6;
      CFDictionaryAddValue(a3, a1, v6);
      CFRelease(v7);
      return 0;
    }
    else
    {
      if (sub_44EF8(0xFu, 4))
      {
        int v13 = sub_44F3C(0xFu);
        __uint64_t v14 = sub_4F1D8();
        uint64_t v15 = (const char *)sub_44F70(4);
        if (v13)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %lld %p\n", v14, 15, v15, "AVE_CFDict_AddSInt64", 591, "pNum != __null", a1, valuePtr, a3);
          __uint64_t v16 = sub_4F1D8();
          int v18 = sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %lld %p", v16, 15, v18);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %lld %p", v14, 15, v15);
        }
      }
      return 4294966293;
    }
  }
  else
  {
    if (sub_44EF8(0xFu, 4))
    {
      int v9 = sub_44F3C(0xFu);
      __uint64_t v10 = sub_4F1D8();
      __uint64_t v11 = (const char *)sub_44F70(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %lld %p\n", v10, 15, v11, "AVE_CFDict_AddSInt64", 587, "pKey != __null && pDict != __null", a1, a2, a3);
        __uint64_t v12 = sub_4F1D8();
        int v17 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %lld %p", v12, 15, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %lld %p", v10, 15, v11);
      }
    }
    return 4294966295;
  }
}

uint64_t sub_38A28(CFDictionaryRef theDict, void *key, BOOL *a3)
{
  if (theDict && key && a3)
  {
    *a3 = 0;
    if (!CFDictionaryContainsKey(theDict, key)) {
      return 4294966288;
    }
    CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(theDict, key);
    if (Value)
    {
      CFTypeID TypeID = CFBooleanGetTypeID();
      if (TypeID == CFGetTypeID(Value))
      {
        int v8 = CFBooleanGetValue(Value);
        uint64_t result = 0;
        *a3 = v8 != 0;
        return result;
      }
    }
    if (!sub_44EF8(0xFu, 4)) {
      return 4294966296;
    }
    int v14 = sub_44F3C(0xFu);
    __uint64_t v15 = sub_4F1D8();
    __uint64_t v16 = (const char *)sub_44F70(4);
    if (v14)
    {
      if (Value) {
        CFTypeID v17 = CFGetTypeID(Value);
      }
      else {
        CFTypeID v17 = -1;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFBoolean %p %p %p %p %ld\n", v15, 15, v16, "AVE_CFDict_GetBool", 631, "pBool != __null && CFBooleanGetTypeID() == CFGetTypeID(pBool)", theDict, key, a3, Value, v17);
      __uint64_t v15 = sub_4F1D8();
      __uint64_t v16 = (const char *)sub_44F70(4);
      if (!Value)
      {
        CFTypeID v18 = -1;
        goto LABEL_24;
      }
    }
    else if (!Value)
    {
      CFTypeID v18 = -1;
      goto LABEL_24;
    }
    CFTypeID v18 = CFGetTypeID(Value);
LABEL_24:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFBoolean %p %p %p %p %ld", v15, 15, v16, "AVE_CFDict_GetBool", 631, "pBool != __null && CFBooleanGetTypeID() == CFGetTypeID(pBool)", theDict, key, a3, Value, v18);
    return 4294966296;
  }
  if (sub_44EF8(0xFu, 4))
  {
    int v10 = sub_44F3C(0xFu);
    __uint64_t v11 = sub_4F1D8();
    __uint64_t v12 = (const char *)sub_44F70(4);
    if (v10)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v11, 15, v12, "AVE_CFDict_GetBool", 617, "pDict != __null && pKey != __null && pVal != __null", theDict, key, a3);
      __uint64_t v13 = sub_4F1D8();
      __uint64_t v19 = sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 15, v19);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v11, 15, v12);
    }
  }
  return 4294966295;
}

uint64_t sub_38CD8(CFDictionaryRef theDict, void *key, void *a3)
{
  if (theDict && key && a3)
  {
    *a3 = 0;
    if (!CFDictionaryContainsKey(theDict, key)) {
      return 4294966288;
    }
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, key);
    if (Value)
    {
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(Value))
      {
        if (CFNumberGetValue(Value, kCFNumberDoubleType, a3)) {
          return 0;
        }
        else {
          return 4294966288;
        }
      }
    }
    if (!sub_44EF8(0xFu, 4)) {
      return 4294966296;
    }
    int v13 = sub_44F3C(0xFu);
    __uint64_t v14 = sub_4F1D8();
    __uint64_t v15 = (const char *)sub_44F70(4);
    if (v13)
    {
      if (Value) {
        CFTypeID v16 = CFGetTypeID(Value);
      }
      else {
        CFTypeID v16 = -1;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld\n", v14, 15, v15, "AVE_CFDict_GetDouble", 743, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v16);
      __uint64_t v14 = sub_4F1D8();
      __uint64_t v15 = (const char *)sub_44F70(4);
      if (!Value)
      {
        CFTypeID v17 = -1;
        goto LABEL_26;
      }
    }
    else if (!Value)
    {
      CFTypeID v17 = -1;
      goto LABEL_26;
    }
    CFTypeID v17 = CFGetTypeID(Value);
LABEL_26:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld", v14, 15, v15, "AVE_CFDict_GetDouble", 743, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v17);
    return 4294966296;
  }
  if (sub_44EF8(0xFu, 4))
  {
    int v9 = sub_44F3C(0xFu);
    __uint64_t v10 = sub_4F1D8();
    __uint64_t v11 = (const char *)sub_44F70(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v10, 15, v11, "AVE_CFDict_GetDouble", 729, "pDict != __null && pKey != __null && pVal != __null", theDict, key, a3);
      __uint64_t v12 = sub_4F1D8();
      CFTypeID v18 = sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

uint64_t sub_38F88(CFDictionaryRef theDict, void *key, _DWORD *a3)
{
  if (theDict && key && a3)
  {
    *a3 = 0;
    if (!CFDictionaryContainsKey(theDict, key)) {
      return 4294966288;
    }
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, key);
    if (Value)
    {
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(Value))
      {
        if (CFNumberGetValue(Value, kCFNumberSInt32Type, a3)) {
          return 0;
        }
        else {
          return 4294966288;
        }
      }
    }
    if (!sub_44EF8(0xFu, 4)) {
      return 4294966296;
    }
    int v13 = sub_44F3C(0xFu);
    __uint64_t v14 = sub_4F1D8();
    __uint64_t v15 = (const char *)sub_44F70(4);
    if (v13)
    {
      if (Value) {
        CFTypeID v16 = CFGetTypeID(Value);
      }
      else {
        CFTypeID v16 = -1;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld\n", v14, 15, v15, "AVE_CFDict_GetSInt32", 856, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v16);
      __uint64_t v14 = sub_4F1D8();
      __uint64_t v15 = (const char *)sub_44F70(4);
      if (!Value)
      {
        CFTypeID v17 = -1;
        goto LABEL_26;
      }
    }
    else if (!Value)
    {
      CFTypeID v17 = -1;
      goto LABEL_26;
    }
    CFTypeID v17 = CFGetTypeID(Value);
LABEL_26:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld", v14, 15, v15, "AVE_CFDict_GetSInt32", 856, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v17);
    return 4294966296;
  }
  if (sub_44EF8(0xFu, 4))
  {
    int v9 = sub_44F3C(0xFu);
    __uint64_t v10 = sub_4F1D8();
    __uint64_t v11 = (const char *)sub_44F70(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v10, 15, v11, "AVE_CFDict_GetSInt32", 842, "pDict != __null && pKey != __null && pVal != __null", theDict, key, a3);
      __uint64_t v12 = sub_4F1D8();
      CFTypeID v18 = sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

uint64_t sub_39238(CFDictionaryRef theDict, void *key, void *a3)
{
  if (theDict && key && a3)
  {
    *a3 = 0;
    if (!CFDictionaryContainsKey(theDict, key)) {
      return 4294966288;
    }
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, key);
    if (Value)
    {
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(Value))
      {
        if (CFNumberGetValue(Value, kCFNumberSInt64Type, a3)) {
          return 0;
        }
        else {
          return 4294966288;
        }
      }
    }
    if (!sub_44EF8(0xFu, 4)) {
      return 4294966296;
    }
    int v13 = sub_44F3C(0xFu);
    __uint64_t v14 = sub_4F1D8();
    __uint64_t v15 = (const char *)sub_44F70(4);
    if (v13)
    {
      if (Value) {
        CFTypeID v16 = CFGetTypeID(Value);
      }
      else {
        CFTypeID v16 = -1;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld\n", v14, 15, v15, "AVE_CFDict_GetSInt64", 894, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v16);
      __uint64_t v14 = sub_4F1D8();
      __uint64_t v15 = (const char *)sub_44F70(4);
      if (!Value)
      {
        CFTypeID v17 = -1;
        goto LABEL_26;
      }
    }
    else if (!Value)
    {
      CFTypeID v17 = -1;
      goto LABEL_26;
    }
    CFTypeID v17 = CFGetTypeID(Value);
LABEL_26:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld", v14, 15, v15, "AVE_CFDict_GetSInt64", 894, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v17);
    return 4294966296;
  }
  if (sub_44EF8(0xFu, 4))
  {
    int v9 = sub_44F3C(0xFu);
    __uint64_t v10 = sub_4F1D8();
    __uint64_t v11 = (const char *)sub_44F70(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v10, 15, v11, "AVE_CFDict_GetSInt64", 880, "pDict != __null && pKey != __null && pVal != __null", theDict, key, a3);
      __uint64_t v12 = sub_4F1D8();
      CFTypeID v18 = sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

const char *sub_394E8(const __CFString *a1, char *a2, int a3)
{
  if (a1)
  {
    uint64_t result = CFStringGetCStringPtr(a1, 0);
    if (a3 >= 1 && a2 && !result)
    {
      CFStringGetCString(a1, a2, a3, 0);
      return a2;
    }
  }
  else
  {
    if (sub_44EF8(0xFu, 4))
    {
      int v7 = sub_44F3C(0xFu);
      __uint64_t v8 = sub_4F1D8();
      int v9 = (const char *)sub_44F70(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", v8, 15, v9, "AVE_CFStr_GetStr", 916, "pStr != __null", 0, a2, a3);
        __uint64_t v10 = sub_4F1D8();
        __uint64_t v11 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v10, 15, v11);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v8, 15, v9);
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_3963C(CFStringRef applicationID, CFStringRef key, char *a3, int a4)
{
  if (applicationID && key && a3 && a4 > 0)
  {
    CFStringRef v8 = (const __CFString *)CFPreferencesCopyAppValue(key, applicationID);
    if (v8)
    {
      CFStringRef v9 = v8;
      CFTypeID v10 = CFGetTypeID(v8);
      if (v10 == CFStringGetTypeID())
      {
        __uint64_t v11 = sub_394E8(v9, a3, a4);
        if (v11 != a3) {
          sub_4D5BC(a3, a4, "%s", v12, v13, v14, v15, v16, (char)v11);
        }
        uint64_t v17 = 0;
      }
      else
      {
        uint64_t v17 = 4294966296;
      }
      CFRelease(v9);
    }
    else
    {
      return 4294966288;
    }
  }
  else
  {
    if (sub_44EF8(0xFu, 4))
    {
      int v18 = sub_44F3C(0xFu);
      __uint64_t v19 = sub_4F1D8();
      int v20 = (const char *)sub_44F70(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d\n", v19, 15, v20, "AVE_CFPref_GetStr", 947, "pAppID != __null && pKey != __null && pVal != __null && num > 0", applicationID, key, a3, a4);
        __uint64_t v21 = sub_4F1D8();
        __uint64_t v23 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d", v21, 15, v23, "AVE_CFPref_GetStr");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d", v19, 15, v20, "AVE_CFPref_GetStr");
      }
    }
    return 4294966295;
  }
  return v17;
}

uint64_t sub_397FC(CFStringRef applicationID, CFStringRef key, BOOL *a3)
{
  if (applicationID && key && a3)
  {
    CFStringRef v6 = (const __CFString *)CFPreferencesCopyAppValue(key, applicationID);
    if (v6)
    {
      CFStringRef v7 = v6;
      CFTypeID v8 = CFGetTypeID(v6);
      if (v8 == CFBooleanGetTypeID())
      {
        BOOL v9 = CFEqual(v7, kCFBooleanTrue) != 0;
      }
      else
      {
        CFTypeID v15 = CFGetTypeID(v7);
        if (v15 != CFStringGetTypeID()) {
          goto LABEL_19;
        }
        BOOL v9 = 1;
        if (CFStringCompare(v7, @"true", 1uLL) == kCFCompareEqualTo) {
          goto LABEL_7;
        }
        BOOL v9 = 1;
        if (CFStringCompare(v7, @"yes", 1uLL) == kCFCompareEqualTo) {
          goto LABEL_7;
        }
        BOOL v9 = 1;
        if (CFStringCompare(v7, @"1", 1uLL) == kCFCompareEqualTo) {
          goto LABEL_7;
        }
        if (CFStringCompare(v7, @"false", 1uLL)
          && CFStringCompare(v7, @"no", 1uLL)
          && CFStringCompare(v7, @"0", 1uLL))
        {
LABEL_19:
          uint64_t v10 = 4294966296;
          goto LABEL_20;
        }
        BOOL v9 = 0;
      }
LABEL_7:
      uint64_t v10 = 0;
      *a3 = v9;
LABEL_20:
      CFRelease(v7);
      return v10;
    }
    return 4294966288;
  }
  else
  {
    if (sub_44EF8(0xFu, 4))
    {
      int v11 = sub_44F3C(0xFu);
      __uint64_t v12 = sub_4F1D8();
      uint64_t v13 = (const char *)sub_44F70(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v12, 15, v13, "AVE_CFPref_GetBool", 988, "pAppID != __null && pKey != __null && pVal != __null", applicationID, key, a3);
        __uint64_t v14 = sub_4F1D8();
        uint64_t v17 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v14, 15, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v12, 15, v13);
      }
    }
    return 4294966295;
  }
}

uint64_t sub_39A50(CFStringRef applicationID, CFStringRef key, _DWORD *a3)
{
  if (applicationID && key && a3)
  {
    CFStringRef v6 = (const __CFString *)CFPreferencesCopyAppValue(key, applicationID);
    if (v6)
    {
      CFStringRef v7 = v6;
      CFTypeID v8 = CFGetTypeID(v6);
      if (v8 == CFNumberGetTypeID())
      {
        LODWORD(valuePtr) = 0;
        if (CFNumberGetValue((CFNumberRef)v7, kCFNumberSInt32Type, &valuePtr))
        {
          uint64_t v9 = 0;
          *a3 = valuePtr;
LABEL_16:
          CFRelease(v7);
          return v9;
        }
      }
      else
      {
        CFTypeID v14 = CFGetTypeID(v7);
        if (v14 == CFStringGetTypeID())
        {
          int v19 = 0;
          uint64_t valuePtr = 0;
          CFTypeID v15 = sub_394E8(v7, (char *)&valuePtr, 12);
          if (v15)
          {
            uint64_t v9 = 0;
            *a3 = strtoumax(v15, 0, 0);
            goto LABEL_16;
          }
        }
      }
      uint64_t v9 = 4294966296;
      goto LABEL_16;
    }
    return 4294966288;
  }
  else
  {
    if (sub_44EF8(0xFu, 4))
    {
      int v10 = sub_44F3C(0xFu);
      __uint64_t v11 = sub_4F1D8();
      __uint64_t v12 = (const char *)sub_44F70(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v11, 15, v12, "AVE_CFPref_GetUInt32", 1092, "pAppID != __null && pKey != __null && pVal != __null", applicationID, key, a3);
        __uint64_t v13 = sub_4F1D8();
        uint64_t v17 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 15, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v11, 15, v12);
      }
    }
    return 4294966295;
  }
}

uint64_t sub_39C5C(CFStringRef applicationID, CFStringRef key, uintmax_t *a3)
{
  if (applicationID && key && a3)
  {
    CFStringRef v6 = (const __CFString *)CFPreferencesCopyAppValue(key, applicationID);
    if (v6)
    {
      CFStringRef v7 = v6;
      CFTypeID v8 = CFGetTypeID(v6);
      if (v8 == CFNumberGetTypeID())
      {
        valuePtr[0] = 0;
        if (CFNumberGetValue((CFNumberRef)v7, kCFNumberSInt64Type, valuePtr))
        {
          uint64_t v9 = 0;
          *a3 = valuePtr[0];
LABEL_16:
          CFRelease(v7);
          return v9;
        }
      }
      else
      {
        CFTypeID v14 = CFGetTypeID(v7);
        if (v14 == CFStringGetTypeID())
        {
          valuePtr[0] = 0;
          valuePtr[1] = 0;
          int v19 = 0;
          CFTypeID v15 = sub_394E8(v7, (char *)valuePtr, 20);
          if (v15)
          {
            uint64_t v9 = 0;
            *a3 = strtoumax(v15, 0, 0);
            goto LABEL_16;
          }
        }
      }
      uint64_t v9 = 4294966296;
      goto LABEL_16;
    }
    return 4294966288;
  }
  else
  {
    if (sub_44EF8(0xFu, 4))
    {
      int v10 = sub_44F3C(0xFu);
      __uint64_t v11 = sub_4F1D8();
      __uint64_t v12 = (const char *)sub_44F70(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v11, 15, v12, "AVE_CFPref_GetUInt64", 1143, "pAppID != __null && pKey != __null && pVal != __null", applicationID, key, a3);
        __uint64_t v13 = sub_4F1D8();
        uint64_t v17 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 15, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v11, 15, v12);
      }
    }
    return 4294966295;
  }
}

uint64_t sub_39E68(CFStringRef applicationID, CFStringRef key, _DWORD *a3)
{
  if (applicationID && key && a3)
  {
    CFStringRef v6 = (const __CFString *)CFPreferencesCopyAppValue(key, applicationID);
    if (v6)
    {
      CFStringRef v7 = v6;
      CFTypeID v8 = CFGetTypeID(v6);
      if (v8 == CFNumberGetTypeID())
      {
        *(_DWORD *)uint64_t valuePtr = 0;
        if (CFNumberGetValue((CFNumberRef)v7, kCFNumberSInt32Type, valuePtr))
        {
          uint64_t v9 = 0;
          *a3 = *(_DWORD *)valuePtr;
LABEL_16:
          CFRelease(v7);
          return v9;
        }
      }
      else
      {
        CFTypeID v14 = CFGetTypeID(v7);
        if (v14 == CFStringGetTypeID())
        {
          memset(valuePtr, 0, 13);
          CFTypeID v15 = sub_394E8(v7, valuePtr, 13);
          if (v15)
          {
            uint64_t v9 = 0;
            *a3 = strtoumax(v15, 0, 0);
            goto LABEL_16;
          }
        }
      }
      uint64_t v9 = 4294966296;
      goto LABEL_16;
    }
    return 4294966288;
  }
  else
  {
    if (sub_44EF8(0xFu, 4))
    {
      int v10 = sub_44F3C(0xFu);
      __uint64_t v11 = sub_4F1D8();
      __uint64_t v12 = (const char *)sub_44F70(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v11, 15, v12, "AVE_CFPref_GetInt32", 1193, "pAppID != __null && pKey != __null && pVal != __null", applicationID, key, a3);
        __uint64_t v13 = sub_4F1D8();
        uint64_t v17 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 15, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v11, 15, v12);
      }
    }
    return 4294966295;
  }
}

uint64_t sub_3A074(CFStringRef applicationID, CFStringRef key, uintmax_t *a3)
{
  if (applicationID && key && a3)
  {
    CFStringRef v6 = (const __CFString *)CFPreferencesCopyAppValue(key, applicationID);
    if (v6)
    {
      CFStringRef v7 = v6;
      CFTypeID v8 = CFGetTypeID(v6);
      if (v8 == CFNumberGetTypeID())
      {
        uintmax_t valuePtr = 0;
        if (CFNumberGetValue((CFNumberRef)v7, kCFNumberSInt64Type, &valuePtr))
        {
          uint64_t v9 = 0;
          *a3 = valuePtr;
LABEL_16:
          CFRelease(v7);
          return v9;
        }
      }
      else
      {
        CFTypeID v14 = CFGetTypeID(v7);
        if (v14 == CFStringGetTypeID())
        {
          uintmax_t valuePtr = 0;
          v19[0] = 0;
          *(void *)((char *)v19 + 5) = 0;
          CFTypeID v15 = sub_394E8(v7, (char *)&valuePtr, 21);
          if (v15)
          {
            uint64_t v9 = 0;
            *a3 = strtoumax(v15, 0, 0);
            goto LABEL_16;
          }
        }
      }
      uint64_t v9 = 4294966296;
      goto LABEL_16;
    }
    return 4294966288;
  }
  else
  {
    if (sub_44EF8(0xFu, 4))
    {
      int v10 = sub_44F3C(0xFu);
      __uint64_t v11 = sub_4F1D8();
      __uint64_t v12 = (const char *)sub_44F70(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v11, 15, v12, "AVE_CFPref_GetInt64", 1244, "pAppID != __null && pKey != __null && pVal != __null", applicationID, key, a3);
        __uint64_t v13 = sub_4F1D8();
        uint64_t v17 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 15, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v11, 15, v12);
      }
    }
    return 4294966295;
  }
}

uint64_t sub_3A280(CFStringRef applicationID, CFStringRef key, double *a3)
{
  if (applicationID && key && a3)
  {
    CFStringRef v6 = (const __CFString *)CFPreferencesCopyAppValue(key, applicationID);
    if (v6)
    {
      CFStringRef v7 = v6;
      CFTypeID v8 = CFGetTypeID(v6);
      if (v8 == CFNumberGetTypeID())
      {
        uint64_t v19 = 0;
        valuePtr[0] = 0;
        if (CFNumberGetValue((CFNumberRef)v7, kCFNumberDoubleType, valuePtr))
        {
          double v9 = *(double *)valuePtr;
LABEL_19:
          uint64_t v14 = 0;
          *a3 = v9;
LABEL_21:
          CFRelease(v7);
          return v14;
        }
        if (CFNumberGetValue((CFNumberRef)v7, kCFNumberSInt64Type, &v19))
        {
          double v9 = (double)v19;
          goto LABEL_19;
        }
      }
      else
      {
        CFTypeID v15 = CFGetTypeID(v7);
        if (v15 == CFStringGetTypeID())
        {
          valuePtr[0] = 0;
          valuePtr[1] = 0;
          int v21 = 0;
          uint64_t v16 = sub_394E8(v7, (char *)valuePtr, 20);
          if (v16)
          {
            double v9 = strtod(v16, 0);
            goto LABEL_19;
          }
        }
      }
      uint64_t v14 = 4294966296;
      goto LABEL_21;
    }
    return 4294966288;
  }
  else
  {
    if (sub_44EF8(0xFu, 4))
    {
      int v10 = sub_44F3C(0xFu);
      __uint64_t v11 = sub_4F1D8();
      __uint64_t v12 = (const char *)sub_44F70(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v11, 15, v12, "AVE_CFPref_GetDouble", 1294, "pAppID != __null && pKey != __null && pVal != __null", applicationID, key, a3);
        __uint64_t v13 = sub_4F1D8();
        int v18 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 15, v18);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v11, 15, v12);
      }
    }
    return 4294966295;
  }
}

uint64_t sub_3A4A0(_DWORD *a1, int a2, uint64_t a3, _DWORD *a4)
{
  LODWORD(v4) = *a4;
  if (*a1 >= *a4) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = *a1;
  }
  if ((int)v4 < 1)
  {
    int v5 = 0;
  }
  else
  {
    int v5 = 0;
    CFStringRef v6 = a1 + 2;
    do
    {
      if ((a2 & ~*v6) == 0) {
        *(_DWORD *)(a3 + 4 * v5++) = *(v6 - 1);
      }
      v6 += 2;
      --v4;
    }
    while (v4);
  }
  *a4 = v5;
  return 0;
}

uint64_t sub_3A4F8(int a1, int a2, int a3, int a4, int a5)
{
  CFTypeID v8 = sub_73A0(a1, 1, a2);
  if (!v8) {
    return 4294966294;
  }
  unint64_t v9 = *(unsigned int *)v8;
  if ((int)v9 < 1)
  {
    BOOL v12 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    __uint64_t v11 = v8 + 12;
    BOOL v12 = 1;
    do
    {
      if (*(v11 - 1) <= a3 && *v11 <= a4) {
        break;
      }
      v11 += 3;
      BOOL v12 = ++v10 < v9;
    }
    while (v9 != v10);
  }
  uint64_t v13 = *((unsigned int *)v8 + 13);
  if ((int)v13 < 1) {
    return 4294966294;
  }
  for (int i = v8 + 64; ; i += 3)
  {
    if (*(i - 1) >= a3 && *i >= a4)
    {
      int v15 = *(i - 2);
      if (v15 == a5 || v15 < 0) {
        break;
      }
    }
    if (!--v13) {
      return 4294966294;
    }
  }
  if (v12) {
    return 0;
  }
  else {
    return 4294966294;
  }
}

uint64_t sub_3A5E0(CFDictionaryRef theDict, uint64_t a2)
{
  int v14 = 0;
  if (theDict && a2)
  {
    int v4 = sub_38A28(theDict, kVTEncodeFrameOptionKey_DPB_ReferenceFrames_SWRCMetaData_Acknowledged, (BOOL *)a2);
    int v5 = sub_38A28(theDict, kVTEncodeFrameOptionKey_DPB_ReferenceFrames_SWRCMetaData_Reserved, (BOOL *)(a2 + 1)) + v4;
    int v6 = sub_38F88(theDict, kVTEncodeFrameOptionKey_DPB_ReferenceFrames_SWRCMetaData_CadenceIndex, &v14);
    *(unsigned char *)(a2 + 2) = v14;
    int v7 = v5
       + v6
       + sub_38A28(theDict, kVTEncodeFrameOptionKey_DPB_ReferenceFrames_SWRCMetaData_CadenceAnchor, (BOOL *)(a2 + 3));
    return v7
         + sub_38F88(theDict, kVTEncodeFrameOptionKey_DPB_ReferenceFrames_SWRCMetaData_RefFrameNum, (_DWORD *)(a2 + 4));
  }
  else
  {
    if (sub_44EF8(0xE2u, 4))
    {
      int v9 = sub_44F3C(0xE2u);
      __uint64_t v10 = sub_4F1D8();
      __uint64_t v11 = (const char *)sub_44F70(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", v10, 226, v11, "AVE_DRC_RetrieveMetaData", 25, "pDict != __null && pMetaData != __null", theDict, (const void *)a2, 0);
        __uint64_t v12 = sub_4F1D8();
        uint64_t v13 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v12, 226, v13);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v10, 226, v11);
      }
    }
    return 4294966295;
  }
}

uint64_t sub_3A7A0(unsigned __int8 *a1, CFMutableDictionaryRef theDict)
{
  if (a1 && theDict)
  {
    int v4 = sub_381F4(kVTEncodeFrameOptionKey_DPB_ReferenceFrames_SWRCMetaData_Acknowledged, *a1, theDict);
    int v5 = sub_381F4(kVTEncodeFrameOptionKey_DPB_ReferenceFrames_SWRCMetaData_Reserved, a1[1], theDict) + v4;
    int v6 = sub_385A8(kVTEncodeFrameOptionKey_DPB_ReferenceFrames_SWRCMetaData_CadenceIndex, (char)a1[2], theDict);
    int v7 = v5 + v6 + sub_381F4(kVTEncodeFrameOptionKey_DPB_ReferenceFrames_SWRCMetaData_CadenceAnchor, a1[3], theDict);
    return v7
         + sub_385A8(kVTEncodeFrameOptionKey_DPB_ReferenceFrames_SWRCMetaData_RefFrameNum, *((_DWORD *)a1 + 1), theDict);
  }
  else
  {
    if (sub_44EF8(0xE2u, 4))
    {
      int v9 = sub_44F3C(0xE2u);
      __uint64_t v10 = sub_4F1D8();
      __uint64_t v11 = (const char *)sub_44F70(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", v10, 226, v11, "AVE_DRC_MakeMetaData", 60, "pMetaData != __null && pDict != __null", a1, theDict, 0);
        __uint64_t v12 = sub_4F1D8();
        uint64_t v13 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v12, 226, v13);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v10, 226, v11);
      }
    }
    return 4294966295;
  }
}

uint64_t sub_3A954(CFDictionaryRef theDict, _DWORD *a2)
{
  int v33 = 0;
  if (theDict && a2)
  {
    sub_38F88(theDict, kVTEncodeFrameOptionKey_DPB_ReferenceFrames_ReferenceType, &v33);
    *a2 = v33;
    sub_38F88(theDict, kVTEncodeFrameOptionKey_DPB_ReferenceFrames_FrameNumber, &v33);
    a2[1] = v33;
    sub_38F88(theDict, kVTEncodeFrameOptionKey_DPB_ReferenceFrames_FrameNumberFromIDR, &v33);
    a2[2] = v33;
    sub_39238(theDict, kVTEncodeFrameOptionKey_DPB_ReferenceFrames_PresentationTimestamp, (void *)a2 + 2);
    sub_38F88(theDict, kVTEncodeFrameOptionKey_DPB_ReferenceFrames_PTSTimescale, &v33);
    a2[6] = v33;
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_DPB_ReferenceFrames_OriginalBuffer);
    if (Value)
    {
      CFDictionaryRef v5 = Value;
      int v6 = (void *)kVTEncodeFrameOptionKey_DPB_ReferenceFrames_Buffers_Width;
      sub_38F88(Value, kVTEncodeFrameOptionKey_DPB_ReferenceFrames_Buffers_Width, &v33);
      a2[12] = v33;
      int v7 = (void *)kVTEncodeFrameOptionKey_DPB_ReferenceFrames_Buffers_Height;
      sub_38F88(v5, kVTEncodeFrameOptionKey_DPB_ReferenceFrames_Buffers_Height, &v33);
      a2[14] = v33;
      CFTypeID v8 = (void *)kVTEncodeFrameOptionKey_DPB_ReferenceFrames_Buffers_IOSurfaceID;
      sub_38F88(v5, kVTEncodeFrameOptionKey_DPB_ReferenceFrames_Buffers_IOSurfaceID, &v33);
      a2[16] = v33;
      CFDictionaryRef v9 = (const __CFDictionary *)CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_DPB_ReferenceFrames_RVRABuffer);
      if (v9)
      {
        CFDictionaryRef v10 = v9;
        sub_38F88(v9, v6, &v33);
        a2[13] = v33;
        sub_38F88(v10, v7, &v33);
        a2[15] = v33;
        sub_38F88(v10, v8, &v33);
        a2[17] = v33;
        CFDictionaryRef v11 = (const __CFDictionary *)CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_DPB_ReferenceFrames_SWRCMetaData);
        uint64_t v12 = sub_3A5E0(v11, (uint64_t)(a2 + 18));
        if (v12 && sub_44EF8(0xE2u, 4))
        {
          int v13 = sub_44F3C(0xE2u);
          __uint64_t v14 = sub_4F1D8();
          int v15 = (const char *)sub_44F70(4);
          if (v13)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to retrieve RC metadata %p %p %d\n", v14, 226, v15, "AVE_DPB_RetrieveSnapshotEntry", 150, "ret == 0", theDict, a2, v12);
            __uint64_t v16 = sub_4F1D8();
            int v29 = sub_44F70(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to retrieve RC metadata %p %p %d", v16, 226, v29);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to retrieve RC metadata %p %p %d", v14, 226, v15);
          }
        }
        return v12;
      }
      if (sub_44EF8(0xE2u, 4))
      {
        int v24 = sub_44F3C(0xE2u);
        __uint64_t v25 = sub_4F1D8();
        __uint64_t v26 = (const char *)sub_44F70(4);
        if (v24)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to get VRA reference buffer %p %p %d\n", v25, 226, v26, "AVE_DPB_RetrieveSnapshotEntry", 131, "pTmpDict != __null", theDict, a2, 0);
          __uint64_t v27 = sub_4F1D8();
          int v32 = sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get VRA reference buffer %p %p %d", v27, 226, v32);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get VRA reference buffer %p %p %d", v25, 226, v26);
        }
      }
    }
    else if (sub_44EF8(0xE2u, 4))
    {
      int v21 = sub_44F3C(0xE2u);
      __uint64_t v22 = sub_4F1D8();
      __uint64_t v23 = (const char *)sub_44F70(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to get original reference buffer %p %p %d\n", v22, 226, v23, "AVE_DPB_RetrieveSnapshotEntry", 113, "pTmpDict != __null", theDict, a2, 0);
        __uint64_t v22 = sub_4F1D8();
        int v31 = sub_44F70(4);
      }
      else
      {
        int v31 = (void *)v23;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get original reference buffer %p %p %d", v22, 226, v31);
    }
    return 4294966288;
  }
  if (sub_44EF8(0xE2u, 4))
  {
    int v17 = sub_44F3C(0xE2u);
    __uint64_t v18 = sub_4F1D8();
    uint64_t v19 = (const char *)sub_44F70(4);
    if (v17)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", v18, 226, v19, "AVE_DPB_RetrieveSnapshotEntry", 92, "pDict != __null && pEntry != __null", theDict, a2, 0);
      __uint64_t v20 = sub_4F1D8();
      unsigned int v30 = sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v20, 226, v30);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v18, 226, v19);
    }
  }
  return 4294966295;
}

uint64_t sub_3AE9C(uint64_t a1, __CFDictionary *a2)
{
  if (a1 && a2)
  {
    sub_385A8(kVTEncodeFrameOptionKey_DPB_ReferenceFrames_ReferenceType, *(_DWORD *)a1, a2);
    sub_385A8(kVTEncodeFrameOptionKey_DPB_ReferenceFrames_FrameNumber, *(_DWORD *)(a1 + 4), a2);
    sub_385A8(kVTEncodeFrameOptionKey_DPB_ReferenceFrames_FrameNumberFromIDR, *(_DWORD *)(a1 + 8), a2);
    sub_387E8(kVTEncodeFrameOptionKey_DPB_ReferenceFrames_PresentationTimestamp, *(void *)(a1 + 16), a2);
    sub_385A8(kVTEncodeFrameOptionKey_DPB_ReferenceFrames_PTSTimescale, *(_DWORD *)(a1 + 24), a2);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      CFDictionaryRef v5 = Mutable;
      int v6 = (const void *)kVTEncodeFrameOptionKey_DPB_ReferenceFrames_Buffers_Width;
      sub_385A8(kVTEncodeFrameOptionKey_DPB_ReferenceFrames_Buffers_Width, *(_DWORD *)(a1 + 48), Mutable);
      int v7 = (const void *)kVTEncodeFrameOptionKey_DPB_ReferenceFrames_Buffers_Height;
      sub_385A8(kVTEncodeFrameOptionKey_DPB_ReferenceFrames_Buffers_Height, *(_DWORD *)(a1 + 56), v5);
      CFTypeID v8 = (const void *)kVTEncodeFrameOptionKey_DPB_ReferenceFrames_Buffers_IOSurfaceID;
      sub_385A8(kVTEncodeFrameOptionKey_DPB_ReferenceFrames_Buffers_IOSurfaceID, *(_DWORD *)(a1 + 64), v5);
      CFDictionaryAddValue(a2, kVTEncodeFrameOptionKey_DPB_ReferenceFrames_OriginalBuffer, v5);
      CFRelease(v5);
      CFDictionaryRef v9 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (v9)
      {
        CFDictionaryRef v10 = v9;
        sub_385A8(v6, *(_DWORD *)(a1 + 52), v9);
        sub_385A8(v7, *(_DWORD *)(a1 + 60), v10);
        sub_385A8(v8, *(_DWORD *)(a1 + 68), v10);
        CFDictionaryAddValue(a2, kVTEncodeFrameOptionKey_DPB_ReferenceFrames_RVRABuffer, v10);
        CFRelease(v10);
        CFDictionaryRef v11 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        if (v11)
        {
          uint64_t v12 = v11;
          uint64_t v13 = sub_3A7A0((unsigned __int8 *)(a1 + 72), v11);
          if (v13)
          {
            if (sub_44EF8(0xE2u, 4))
            {
              int v14 = sub_44F3C(0xE2u);
              __uint64_t v15 = sub_4F1D8();
              __uint64_t v16 = (const char *)sub_44F70(4);
              if (v14)
              {
                printf("%lld %d AVE %s: %s:%d %s | fail to make DRC metadata %p %p %d\n", v15, 226, v16, "AVE_DPB_MakeSnapshotEntry", 227, "ret == 0", (const void *)a1, a2, v13);
                __uint64_t v17 = sub_4F1D8();
                int v29 = sub_44F70(4);
                syslog(3, "%lld %d AVE %s: %s:%d %s | fail to make DRC metadata %p %p %d", v17, 226, v29);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d %s | fail to make DRC metadata %p %p %d", v15, 226, v16);
              }
            }
          }
          else
          {
            CFDictionaryAddValue(a2, kVTEncodeFrameOptionKey_DPB_ReferenceFrames_SWRCMetaData, v12);
          }
          CFRelease(v12);
          return v13;
        }
        if (sub_44EF8(0xE2u, 4))
        {
          int v26 = sub_44F3C(0xE2u);
          __uint64_t v23 = sub_4F1D8();
          int v24 = (const char *)sub_44F70(4);
          if (v26)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to create CFDict %p %p %d\n", v23, 226, v24, "AVE_DPB_MakeSnapshotEntry", 223, "pTmpDict != __null", (const void *)a1, a2, 0);
            goto LABEL_24;
          }
LABEL_30:
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDict %p %p %d", v23, 226, v24);
        }
        return 4294966293;
      }
      if (!sub_44EF8(0xE2u, 4)) {
        return 4294966293;
      }
      int v25 = sub_44F3C(0xE2u);
      __uint64_t v23 = sub_4F1D8();
      int v24 = (const char *)sub_44F70(4);
      if (!v25) {
        goto LABEL_30;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to create CFDict %p %p %d\n", v23, 226, v24, "AVE_DPB_MakeSnapshotEntry", 206, "pTmpDict != __null", (const void *)a1, a2, 0);
    }
    else
    {
      if (!sub_44EF8(0xE2u, 4)) {
        return 4294966293;
      }
      int v22 = sub_44F3C(0xE2u);
      __uint64_t v23 = sub_4F1D8();
      int v24 = (const char *)sub_44F70(4);
      if (!v22) {
        goto LABEL_30;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to create CFDict %p %p %d\n", v23, 226, v24, "AVE_DPB_MakeSnapshotEntry", 189, "pTmpDict != __null", (const void *)a1, a2, 0);
    }
LABEL_24:
    __uint64_t v27 = sub_4F1D8();
    int v31 = sub_44F70(4);
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDict %p %p %d", v27, 226, v31);
    return 4294966293;
  }
  if (sub_44EF8(0xE2u, 4))
  {
    int v18 = sub_44F3C(0xE2u);
    __uint64_t v19 = sub_4F1D8();
    __uint64_t v20 = (const char *)sub_44F70(4);
    if (v18)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", v19, 226, v20, "AVE_DPB_MakeSnapshotEntry", 170, "pEntry != __null && pDict != __null", (const void *)a1, a2, 0);
      __uint64_t v21 = sub_4F1D8();
      unsigned int v30 = sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v21, 226, v30);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v19, 226, v20);
    }
  }
  return 4294966295;
}

uint64_t sub_3B41C(CFDictionaryRef theDict, _DWORD *a2)
{
  int v36 = 0;
  if (!theDict || !a2)
  {
    if (sub_44EF8(0xE2u, 4))
    {
      int v14 = sub_44F3C(0xE2u);
      __uint64_t v15 = sub_4F1D8();
      __uint64_t v16 = (const char *)sub_44F70(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", v15, 226, v16, "AVE_DPB_RetrieveSnapshot", 261, "pDict != __null && pSnapshot != __null", theDict, a2, 0);
        __uint64_t v17 = sub_4F1D8();
        int v33 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v17, 226, v33);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v15, 226, v16);
      }
    }
    return 4294966295;
  }
  sub_38F88(theDict, kVTEncodeFrameOptionKey_DPB_FrameNumberFromIDR, &v36);
  a2[340] = v36;
  sub_38F88(theDict, kVTEncodeFrameOptionKey_DPB_LongTermFrameNumberFromIDR, &v36);
  a2[341] = v36;
  sub_38F88(theDict, kVTEncodeFrameOptionKey_DPB_HowManyShortTermFromIDR, &v36);
  a2[342] = v36;
  sub_38F88(theDict, kVTEncodeFrameOptionKey_DPB_NumberOfReferenceFrames, &v36);
  int v4 = v36;
  a2[343] = v36;
  if (v4 >= 17)
  {
    if (sub_44EF8(0xE2u, 4))
    {
      int v18 = sub_44F3C(0xE2u);
      __uint64_t v19 = sub_4F1D8();
      __uint64_t v20 = (const char *)sub_44F70(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | number of reference is out of range %d %d\n", v19, 226, v20, "AVE_DPB_RetrieveSnapshot", 274, "pSnapshot->num_ref_frame <= ((16) > (16) ? (16) : (16))", a2[343], 16);
        __uint64_t v19 = sub_4F1D8();
        __uint64_t v20 = (const char *)sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | number of reference is out of range %d %d", v19, 226, v20, "AVE_DPB_RetrieveSnapshot", 274, "pSnapshot->num_ref_frame <= ((16) > (16) ? (16) : (16))", a2[343], 16);
    }
    return 4294966296;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, kVTEncodeFrameOptionKey_DPB_ReferenceFrames);
  if (!Value)
  {
    if (sub_44EF8(0xE2u, 4))
    {
      int v21 = sub_44F3C(0xE2u);
      __uint64_t v22 = sub_4F1D8();
      __uint64_t v23 = (const char *)sub_44F70(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to get reference buffers %p %p %d\n", v22, 226, v23, "AVE_DPB_RetrieveSnapshot", 278, "pTmpArray != __null", theDict, a2, 0);
        __uint64_t v24 = sub_4F1D8();
        int v34 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get reference buffers %p %p %d", v24, 226, v34);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get reference buffers %p %p %d", v22, 226, v23);
      }
    }
    return 4294966288;
  }
  CFArrayRef v6 = Value;
  int Count = CFArrayGetCount(Value);
  int v8 = Count;
  if (Count > 17)
  {
    if (sub_44EF8(0xE2u, 4))
    {
      int v25 = sub_44F3C(0xE2u);
      __uint64_t v26 = sub_4F1D8();
      __uint64_t v27 = (const char *)sub_44F70(4);
      if (v25)
      {
        printf("%lld %d AVE %s: %s:%d %s | number of reference buffer is out of range %d %d\n", v26, 226, v27, "AVE_DPB_RetrieveSnapshot", 284, "num <= (((16) > (16) ? (16) : (16)) + 1)", v8, 17);
        __uint64_t v26 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | number of reference buffer is out of range %d %d", v26);
    }
    return 4294966296;
  }
  if (Count < 1) {
    return 0;
  }
  CFIndex v9 = 0;
  uint64_t v10 = Count;
  for (int i = a2; ; i += 20)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, v9);
    uint64_t v13 = sub_3A954(ValueAtIndex, i);
    if (v13) {
      break;
    }
    if (v10 == ++v9) {
      return v13;
    }
  }
  if (sub_44EF8(0xE2u, 4))
  {
    int v28 = sub_44F3C(0xE2u);
    __uint64_t v29 = sub_4F1D8();
    unsigned int v30 = (const char *)sub_44F70(4);
    if (v28)
    {
      printf("%lld %d AVE %s: %s:%d %s | fail to retrieve one entry %p %p %p %d %d\n", v29, 226, v30, "AVE_DPB_RetrieveSnapshot", 293, "ret == 0", theDict, a2, ValueAtIndex, v9, v13);
      __uint64_t v31 = sub_4F1D8();
      int v35 = sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to retrieve one entry %p %p %p %d %d", v31, 226, v35, "AVE_DPB_RetrieveSnapshot");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to retrieve one entry %p %p %p %d %d", v29, 226, v30, "AVE_DPB_RetrieveSnapshot");
    }
  }
  return v13;
}

uint64_t sub_3B9C0(int *a1, __CFDictionary *a2)
{
  if (a1 && a2)
  {
    sub_385A8(kVTEncodeFrameOptionKey_DPB_FrameNumberFromIDR, a1[340], a2);
    sub_385A8(kVTEncodeFrameOptionKey_DPB_LongTermFrameNumberFromIDR, a1[341], a2);
    sub_385A8(kVTEncodeFrameOptionKey_DPB_HowManyShortTermFromIDR, a1[342], a2);
    sub_385A8(kVTEncodeFrameOptionKey_DPB_NumberOfReferenceFrames, a1[343], a2);
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    if (Mutable)
    {
      CFMutableArrayRef v5 = Mutable;
      if (a1[343] < 0)
      {
        uint64_t v10 = 0;
LABEL_17:
        CFDictionaryAddValue(a2, kVTEncodeFrameOptionKey_DPB_ReferenceFrames, v5);
        CFRelease(v5);
        return v10;
      }
      CFMutableDictionaryRef v6 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (v6)
      {
        int v7 = v6;
        uint64_t v8 = 0;
        CFIndex v9 = a1;
        while (1)
        {
          uint64_t v10 = sub_3AE9C((uint64_t)v9, v7);
          CFArrayAppendValue(v5, v7);
          CFRelease(v7);
          if (v8 >= a1[343]) {
            goto LABEL_17;
          }
          ++v8;
          int v7 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          v9 += 20;
          if (!v7) {
            goto LABEL_21;
          }
        }
      }
      LODWORD(v8) = 0;
      LODWORD(v10) = 0;
      CFIndex v9 = a1;
LABEL_21:
      if (sub_44EF8(0xE2u, 4))
      {
        int v19 = sub_44F3C(0xE2u);
        __uint64_t v20 = sub_4F1D8();
        int v21 = (const char *)sub_44F70(4);
        if (v19)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CFDictionary %p %p %p %d %d\n", v20, 226, v21, "AVE_DPB_MakeSnapshot", 339, "pTmpDict != __null", a1, a2, v9, v8, v10);
          __uint64_t v22 = sub_4F1D8();
          __uint64_t v26 = sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDictionary %p %p %p %d %d", v22, 226, v26, "AVE_DPB_MakeSnapshot");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDictionary %p %p %p %d %d", v20, 226, v21, "AVE_DPB_MakeSnapshot");
        }
      }
      CFRelease(v5);
    }
    else if (sub_44EF8(0xE2u, 4))
    {
      int v15 = sub_44F3C(0xE2u);
      __uint64_t v16 = sub_4F1D8();
      __uint64_t v17 = (const char *)sub_44F70(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create CFArray %p %p %d\n", v16, 226, v17, "AVE_DPB_MakeSnapshot", 329, "pTmpArray != __null", a1, a2, 0);
        __uint64_t v18 = sub_4F1D8();
        int v25 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray %p %p %d", v18, 226, v25);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray %p %p %d", v16, 226, v17);
      }
    }
    return 4294966293;
  }
  if (sub_44EF8(0xE2u, 4))
  {
    int v11 = sub_44F3C(0xE2u);
    __uint64_t v12 = sub_4F1D8();
    uint64_t v13 = (const char *)sub_44F70(4);
    if (v11)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", v12, 226, v13, "AVE_DPB_MakeSnapshot", 316, "pDict != __null && pSnapshot != __null", a2, a1, 0);
      __uint64_t v14 = sub_4F1D8();
      __uint64_t v24 = sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v14, 226, v24);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v12, 226, v13);
    }
  }
  return 4294966295;
}

uint64_t sub_3BE00(const char *a1, const char *a2, char *a3, int a4)
{
  if (!a2 || !a3 || a4 <= 0)
  {
    if (sub_44EF8(0x2Cu, 4))
    {
      int v22 = sub_44F3C(0x2Cu);
      __uint64_t v23 = sub_4F1D8();
      __uint64_t v24 = (const char *)sub_44F70(4);
      if (v22)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d\n", v23, 44, v24, "AVE_DW_GetStr", 68, "pKey != __null && pVal != __null && num > 0", a1, a2, a3, a4);
        __uint64_t v25 = sub_4F1D8();
        __uint64_t v31 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d", v25, 44, v31, "AVE_DW_GetStr");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d", v23, 44, v24, "AVE_DW_GetStr");
      }
    }
    return 4294966295;
  }
  if (a1) {
    uint64_t v8 = a1;
  }
  else {
    uint64_t v8 = "com.apple.coremedia";
  }
  CFStringRef v9 = CFStringCreateWithCString(0, v8, 0);
  CFStringRef v10 = CFStringCreateWithCString(0, a2, 0);
  CFStringRef v11 = v10;
  if (!v9 || !v10)
  {
    uint64_t v18 = 4294966293;
    if (!v9)
    {
      if (!v10) {
        return v18;
      }
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  uint64_t v12 = sub_3963C(v9, v10, a3, a4);
  if (!v12)
  {
    if (sub_44EF8(0x2Cu, 6))
    {
      uint64_t v18 = sub_44F3C(0x2Cu);
      __uint64_t v26 = sub_4F1D8();
      __uint64_t v27 = (const char *)sub_44F70(6);
      if (!v18)
      {
        syslog(3, "%lld %d AVE %s: defaults write %s = %s", v26, 44, v27, a2, a3);
        goto LABEL_30;
      }
      printf("%lld %d AVE %s: defaults write %s = %s\n", v26, 44, v27, a2, a3);
      __uint64_t v28 = sub_4F1D8();
      int v32 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s: defaults write %s = %s", v28, 44, v32, a2, a3);
    }
    goto LABEL_29;
  }
  uint64_t v18 = v12;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  *(_OWORD *)cStr = 0u;
  long long v35 = 0u;
  sub_4D5BC(cStr, 128, "AVEVideoEncoder%s", v13, v14, v15, v16, v17, (_BYTE)a2 + 3);
  CFRelease(v11);
  CFStringRef v11 = CFStringCreateWithCString(0, cStr, 0);
  if (v11)
  {
    uint64_t v18 = sub_3963C(v9, v11, a3, a4);
    if (!v18)
    {
      if (sub_44EF8(0x2Cu, 6))
      {
        int v19 = sub_44F3C(0x2Cu);
        __uint64_t v20 = sub_4F1D8();
        int v21 = (const char *)sub_44F70(6);
        if (v19)
        {
          printf("%lld %d AVE %s: defaults write %s = %s\n", v20, 44, v21, cStr, a3);
          __uint64_t v20 = sub_4F1D8();
          int v33 = a3;
          unsigned int v30 = (const char *)sub_44F70(6);
        }
        else
        {
          int v33 = a3;
          unsigned int v30 = v21;
        }
        syslog(3, "%lld %d AVE %s: defaults write %s = %s", v20, 44, v30, cStr, v33);
      }
LABEL_29:
      uint64_t v18 = 0;
    }
  }
LABEL_30:
  CFRelease(v9);
  if (v11) {
LABEL_31:
  }
    CFRelease(v11);
  return v18;
}

uint64_t sub_3C180(const char *a1, const char *a2, unsigned __int8 *a3)
{
  if (!a2 || !a3)
  {
    if (sub_44EF8(0x2Cu, 4))
    {
      int v21 = sub_44F3C(0x2Cu);
      __uint64_t v22 = sub_4F1D8();
      __uint64_t v23 = (const char *)sub_44F70(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v22, 44, v23, "AVE_DW_GetBool", 139, "pKey != __null && pVal != __null", a1, a2, a3);
        __uint64_t v24 = sub_4F1D8();
        __uint64_t v29 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v24, 44, v29);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v22, 44, v23);
      }
    }
    return 4294966295;
  }
  if (a1) {
    CFMutableDictionaryRef v6 = a1;
  }
  else {
    CFMutableDictionaryRef v6 = "com.apple.coremedia";
  }
  CFStringRef v7 = CFStringCreateWithCString(0, v6, 0);
  CFStringRef v8 = CFStringCreateWithCString(0, a2, 0);
  CFStringRef v9 = v8;
  if (!v7 || !v8)
  {
    uint64_t v16 = 4294966293;
    if (!v7)
    {
      if (!v8) {
        return v16;
      }
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v10 = sub_397FC(v7, v8, (BOOL *)a3);
  if (!v10)
  {
    if (sub_44EF8(0x2Cu, 6))
    {
      int v25 = sub_44F3C(0x2Cu);
      __uint64_t v26 = sub_4F1D8();
      __uint64_t v27 = (const char *)sub_44F70(6);
      if (v25)
      {
        printf("%lld %d AVE %s: defaults write %s = %d\n", v26, 44, v27, a2, *a3);
        __uint64_t v26 = sub_4F1D8();
        __uint64_t v27 = (const char *)sub_44F70(6);
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %d", v26, 44, v27, a2, *a3);
    }
    goto LABEL_26;
  }
  uint64_t v16 = v10;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  *(_OWORD *)cStr = 0u;
  long long v31 = 0u;
  sub_4D5BC(cStr, 128, "AVEVideoEncoder%s", v11, v12, v13, v14, v15, (_BYTE)a2 + 3);
  CFRelease(v9);
  CFStringRef v9 = CFStringCreateWithCString(0, cStr, 0);
  if (v9)
  {
    uint64_t v16 = sub_397FC(v7, v9, (BOOL *)a3);
    if (!v16)
    {
      if (!sub_44EF8(0x2Cu, 6))
      {
LABEL_26:
        uint64_t v16 = 0;
        goto LABEL_27;
      }
      uint64_t v16 = sub_44F3C(0x2Cu);
      __uint64_t v17 = sub_4F1D8();
      uint64_t v18 = (const char *)sub_44F70(6);
      if (v16)
      {
        printf("%lld %d AVE %s: defaults write %s = %d\n", v17, 44, v18, cStr, *a3);
        __uint64_t v19 = sub_4F1D8();
        __uint64_t v20 = (const char *)sub_44F70(6);
        syslog(3, "%lld %d AVE %s: defaults write %s = %d", v19, 44, v20, cStr, *a3);
        goto LABEL_26;
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %d", v17, 44, v18, cStr, *a3);
    }
  }
LABEL_27:
  CFRelease(v7);
  if (v9) {
LABEL_28:
  }
    CFRelease(v9);
  return v16;
}

uint64_t sub_3C4F4(const char *a1, const char *a2, _DWORD *a3)
{
  if (!a2 || !a3)
  {
    if (sub_44EF8(0x2Cu, 4))
    {
      int v21 = sub_44F3C(0x2Cu);
      __uint64_t v22 = sub_4F1D8();
      __uint64_t v23 = (const char *)sub_44F70(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v22, 44, v23, "AVE_DW_GetUInt32", 281, "pKey != __null && pVal != __null", a1, a2, a3);
        __uint64_t v24 = sub_4F1D8();
        __uint64_t v29 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v24, 44, v29);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v22, 44, v23);
      }
    }
    return 4294966295;
  }
  if (a1) {
    CFMutableDictionaryRef v6 = a1;
  }
  else {
    CFMutableDictionaryRef v6 = "com.apple.coremedia";
  }
  CFStringRef v7 = CFStringCreateWithCString(0, v6, 0);
  CFStringRef v8 = CFStringCreateWithCString(0, a2, 0);
  CFStringRef v9 = v8;
  if (!v7 || !v8)
  {
    uint64_t v16 = 4294966293;
    if (!v7)
    {
      if (!v8) {
        return v16;
      }
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v10 = sub_39A50(v7, v8, a3);
  if (!v10)
  {
    if (sub_44EF8(0x2Cu, 6))
    {
      int v25 = sub_44F3C(0x2Cu);
      __uint64_t v26 = sub_4F1D8();
      __uint64_t v27 = (const char *)sub_44F70(6);
      if (v25)
      {
        printf("%lld %d AVE %s: defaults write %s = 0x%x\n", v26, 44, v27, a2, *a3);
        __uint64_t v26 = sub_4F1D8();
        __uint64_t v27 = (const char *)sub_44F70(6);
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = 0x%x", v26, 44, v27, a2, *a3);
    }
    goto LABEL_26;
  }
  uint64_t v16 = v10;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  *(_OWORD *)cStr = 0u;
  long long v31 = 0u;
  sub_4D5BC(cStr, 128, "AVEVideoEncoder%s", v11, v12, v13, v14, v15, (_BYTE)a2 + 3);
  CFRelease(v9);
  CFStringRef v9 = CFStringCreateWithCString(0, cStr, 0);
  if (v9)
  {
    uint64_t v16 = sub_39A50(v7, v9, a3);
    if (!v16)
    {
      if (!sub_44EF8(0x2Cu, 6))
      {
LABEL_26:
        uint64_t v16 = 0;
        goto LABEL_27;
      }
      uint64_t v16 = sub_44F3C(0x2Cu);
      __uint64_t v17 = sub_4F1D8();
      uint64_t v18 = (const char *)sub_44F70(6);
      if (v16)
      {
        printf("%lld %d AVE %s: defaults write %s = 0x%x\n", v17, 44, v18, cStr, *a3);
        __uint64_t v19 = sub_4F1D8();
        __uint64_t v20 = (const char *)sub_44F70(6);
        syslog(3, "%lld %d AVE %s: defaults write %s = 0x%x", v19, 44, v20, cStr, *a3);
        goto LABEL_26;
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = 0x%x", v17, 44, v18, cStr, *a3);
    }
  }
LABEL_27:
  CFRelease(v7);
  if (v9) {
LABEL_28:
  }
    CFRelease(v9);
  return v16;
}

uint64_t sub_3C868(const char *a1, const char *a2, uintmax_t *a3)
{
  if (!a2 || !a3)
  {
    if (sub_44EF8(0x2Cu, 4))
    {
      int v21 = sub_44F3C(0x2Cu);
      __uint64_t v22 = sub_4F1D8();
      __uint64_t v23 = (const char *)sub_44F70(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v22, 44, v23, "AVE_DW_GetUInt64", 353, "pKey != __null && pVal != __null", a1, a2, a3);
        __uint64_t v24 = sub_4F1D8();
        __uint64_t v29 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v24, 44, v29);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v22, 44, v23);
      }
    }
    return 4294966295;
  }
  if (a1) {
    CFMutableDictionaryRef v6 = a1;
  }
  else {
    CFMutableDictionaryRef v6 = "com.apple.coremedia";
  }
  CFStringRef v7 = CFStringCreateWithCString(0, v6, 0);
  CFStringRef v8 = CFStringCreateWithCString(0, a2, 0);
  CFStringRef v9 = v8;
  if (!v7 || !v8)
  {
    uint64_t v16 = 4294966293;
    if (!v7)
    {
      if (!v8) {
        return v16;
      }
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v10 = sub_39C5C(v7, v8, a3);
  if (!v10)
  {
    if (sub_44EF8(0x2Cu, 6))
    {
      int v25 = sub_44F3C(0x2Cu);
      __uint64_t v26 = sub_4F1D8();
      __uint64_t v27 = (const char *)sub_44F70(6);
      if (v25)
      {
        printf("%lld %d AVE %s: defaults write %s = 0x%llx\n", v26, 44, v27, a2, *a3);
        __uint64_t v26 = sub_4F1D8();
        __uint64_t v27 = (const char *)sub_44F70(6);
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = 0x%llx", v26, 44, v27, a2, *a3);
    }
    goto LABEL_26;
  }
  uint64_t v16 = v10;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  *(_OWORD *)cStr = 0u;
  long long v31 = 0u;
  sub_4D5BC(cStr, 128, "AVEVideoEncoder%s", v11, v12, v13, v14, v15, (_BYTE)a2 + 3);
  CFRelease(v9);
  CFStringRef v9 = CFStringCreateWithCString(0, cStr, 0);
  if (v9)
  {
    uint64_t v16 = sub_39C5C(v7, v9, a3);
    if (!v16)
    {
      if (!sub_44EF8(0x2Cu, 6))
      {
LABEL_26:
        uint64_t v16 = 0;
        goto LABEL_27;
      }
      uint64_t v16 = sub_44F3C(0x2Cu);
      __uint64_t v17 = sub_4F1D8();
      uint64_t v18 = (const char *)sub_44F70(6);
      if (v16)
      {
        printf("%lld %d AVE %s: defaults write %s = 0x%llx\n", v17, 44, v18, cStr, *a3);
        __uint64_t v19 = sub_4F1D8();
        __uint64_t v20 = (const char *)sub_44F70(6);
        syslog(3, "%lld %d AVE %s: defaults write %s = 0x%llx", v19, 44, v20, cStr, *a3);
        goto LABEL_26;
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = 0x%llx", v17, 44, v18, cStr, *a3);
    }
  }
LABEL_27:
  CFRelease(v7);
  if (v9) {
LABEL_28:
  }
    CFRelease(v9);
  return v16;
}

uint64_t sub_3CBDC(const char *a1, const char *a2, _DWORD *a3)
{
  if (!a2 || !a3)
  {
    if (sub_44EF8(0x2Cu, 4))
    {
      int v21 = sub_44F3C(0x2Cu);
      __uint64_t v22 = sub_4F1D8();
      __uint64_t v23 = (const char *)sub_44F70(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v22, 44, v23, "AVE_DW_GetInt32", 424, "pKey != __null && pVal != __null", a1, a2, a3);
        __uint64_t v24 = sub_4F1D8();
        __uint64_t v29 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v24, 44, v29);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v22, 44, v23);
      }
    }
    return 4294966295;
  }
  if (a1) {
    CFMutableDictionaryRef v6 = a1;
  }
  else {
    CFMutableDictionaryRef v6 = "com.apple.coremedia";
  }
  CFStringRef v7 = CFStringCreateWithCString(0, v6, 0);
  CFStringRef v8 = CFStringCreateWithCString(0, a2, 0);
  CFStringRef v9 = v8;
  if (!v7 || !v8)
  {
    uint64_t v16 = 4294966293;
    if (!v7)
    {
      if (!v8) {
        return v16;
      }
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v10 = sub_39E68(v7, v8, a3);
  if (!v10)
  {
    if (sub_44EF8(0x2Cu, 6))
    {
      int v25 = sub_44F3C(0x2Cu);
      __uint64_t v26 = sub_4F1D8();
      __uint64_t v27 = (const char *)sub_44F70(6);
      if (v25)
      {
        printf("%lld %d AVE %s: defaults write %s = %d\n", v26, 44, v27, a2, *a3);
        __uint64_t v26 = sub_4F1D8();
        __uint64_t v27 = (const char *)sub_44F70(6);
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %d", v26, 44, v27, a2, *a3);
    }
    goto LABEL_26;
  }
  uint64_t v16 = v10;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  *(_OWORD *)cStr = 0u;
  long long v31 = 0u;
  sub_4D5BC(cStr, 128, "AVEVideoEncoder%s", v11, v12, v13, v14, v15, (_BYTE)a2 + 3);
  CFRelease(v9);
  CFStringRef v9 = CFStringCreateWithCString(0, cStr, 0);
  if (v9)
  {
    uint64_t v16 = sub_39E68(v7, v9, a3);
    if (!v16)
    {
      if (!sub_44EF8(0x2Cu, 6))
      {
LABEL_26:
        uint64_t v16 = 0;
        goto LABEL_27;
      }
      uint64_t v16 = sub_44F3C(0x2Cu);
      __uint64_t v17 = sub_4F1D8();
      uint64_t v18 = (const char *)sub_44F70(6);
      if (v16)
      {
        printf("%lld %d AVE %s: defaults write %s = %d\n", v17, 44, v18, cStr, *a3);
        __uint64_t v19 = sub_4F1D8();
        __uint64_t v20 = (const char *)sub_44F70(6);
        syslog(3, "%lld %d AVE %s: defaults write %s = %d", v19, 44, v20, cStr, *a3);
        goto LABEL_26;
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %d", v17, 44, v18, cStr, *a3);
    }
  }
LABEL_27:
  CFRelease(v7);
  if (v9) {
LABEL_28:
  }
    CFRelease(v9);
  return v16;
}

uint64_t sub_3CF50(const char *a1, const char *a2, uintmax_t *a3)
{
  if (!a2 || !a3)
  {
    if (sub_44EF8(0x2Cu, 4))
    {
      int v21 = sub_44F3C(0x2Cu);
      __uint64_t v22 = sub_4F1D8();
      __uint64_t v23 = (const char *)sub_44F70(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v22, 44, v23, "AVE_DW_GetInt64", 496, "pKey != __null && pVal != __null", a1, a2, a3);
        __uint64_t v24 = sub_4F1D8();
        __uint64_t v29 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v24, 44, v29);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v22, 44, v23);
      }
    }
    return 4294966295;
  }
  if (a1) {
    CFMutableDictionaryRef v6 = a1;
  }
  else {
    CFMutableDictionaryRef v6 = "com.apple.coremedia";
  }
  CFStringRef v7 = CFStringCreateWithCString(0, v6, 0);
  CFStringRef v8 = CFStringCreateWithCString(0, a2, 0);
  CFStringRef v9 = v8;
  if (!v7 || !v8)
  {
    uint64_t v16 = 4294966293;
    if (!v7)
    {
      if (!v8) {
        return v16;
      }
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v10 = sub_3A074(v7, v8, a3);
  if (!v10)
  {
    if (sub_44EF8(0x2Cu, 6))
    {
      int v25 = sub_44F3C(0x2Cu);
      __uint64_t v26 = sub_4F1D8();
      __uint64_t v27 = (const char *)sub_44F70(6);
      if (v25)
      {
        printf("%lld %d AVE %s: defaults write %s = %lld\n", v26, 44, v27, a2, *a3);
        __uint64_t v26 = sub_4F1D8();
        __uint64_t v27 = (const char *)sub_44F70(6);
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %lld", v26, 44, v27, a2, *a3);
    }
    goto LABEL_26;
  }
  uint64_t v16 = v10;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  *(_OWORD *)cStr = 0u;
  long long v31 = 0u;
  sub_4D5BC(cStr, 128, "AVEVideoEncoder%s", v11, v12, v13, v14, v15, (_BYTE)a2 + 3);
  CFRelease(v9);
  CFStringRef v9 = CFStringCreateWithCString(0, cStr, 0);
  if (v9)
  {
    uint64_t v16 = sub_3A074(v7, v9, a3);
    if (!v16)
    {
      if (!sub_44EF8(0x2Cu, 6))
      {
LABEL_26:
        uint64_t v16 = 0;
        goto LABEL_27;
      }
      uint64_t v16 = sub_44F3C(0x2Cu);
      __uint64_t v17 = sub_4F1D8();
      uint64_t v18 = (const char *)sub_44F70(6);
      if (v16)
      {
        printf("%lld %d AVE %s: defaults write %s = %lld\n", v17, 44, v18, cStr, *a3);
        __uint64_t v19 = sub_4F1D8();
        __uint64_t v20 = (const char *)sub_44F70(6);
        syslog(3, "%lld %d AVE %s: defaults write %s = %lld", v19, 44, v20, cStr, *a3);
        goto LABEL_26;
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %lld", v17, 44, v18, cStr, *a3);
    }
  }
LABEL_27:
  CFRelease(v7);
  if (v9) {
LABEL_28:
  }
    CFRelease(v9);
  return v16;
}

uint64_t sub_3D2C4(const char *a1, const char *a2, double *a3)
{
  if (!a2 || !a3)
  {
    if (sub_44EF8(0x2Cu, 4))
    {
      int v21 = sub_44F3C(0x2Cu);
      __uint64_t v22 = sub_4F1D8();
      __uint64_t v23 = (const char *)sub_44F70(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v22, 44, v23, "AVE_DW_GetDouble", 567, "pKey != __null && pVal != __null", a1, a2, a3);
        __uint64_t v24 = sub_4F1D8();
        __uint64_t v29 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v24, 44, v29);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v22, 44, v23);
      }
    }
    return 4294966295;
  }
  if (a1) {
    CFMutableDictionaryRef v6 = a1;
  }
  else {
    CFMutableDictionaryRef v6 = "com.apple.coremedia";
  }
  CFStringRef v7 = CFStringCreateWithCString(0, v6, 0);
  CFStringRef v8 = CFStringCreateWithCString(0, a2, 0);
  CFStringRef v9 = v8;
  if (!v7 || !v8)
  {
    uint64_t v16 = 4294966293;
    if (!v7)
    {
      if (!v8) {
        return v16;
      }
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v10 = sub_3A280(v7, v8, a3);
  if (!v10)
  {
    if (sub_44EF8(0x2Cu, 6))
    {
      int v25 = sub_44F3C(0x2Cu);
      __uint64_t v26 = sub_4F1D8();
      __uint64_t v27 = (const char *)sub_44F70(6);
      if (v25)
      {
        printf("%lld %d AVE %s: defaults write %s = %lf\n", v26, 44, v27, a2, *a3);
        __uint64_t v26 = sub_4F1D8();
        __uint64_t v27 = (const char *)sub_44F70(6);
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %lf", v26, 44, v27, a2, *a3);
    }
    goto LABEL_26;
  }
  uint64_t v16 = v10;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  *(_OWORD *)cStr = 0u;
  long long v31 = 0u;
  sub_4D5BC(cStr, 128, "AVEVideoEncoder%s", v11, v12, v13, v14, v15, (_BYTE)a2 + 3);
  CFRelease(v9);
  CFStringRef v9 = CFStringCreateWithCString(0, cStr, 0);
  if (v9)
  {
    uint64_t v16 = sub_3A280(v7, v9, a3);
    if (!v16)
    {
      if (!sub_44EF8(0x2Cu, 6))
      {
LABEL_26:
        uint64_t v16 = 0;
        goto LABEL_27;
      }
      uint64_t v16 = sub_44F3C(0x2Cu);
      __uint64_t v17 = sub_4F1D8();
      uint64_t v18 = (const char *)sub_44F70(6);
      if (v16)
      {
        printf("%lld %d AVE %s: defaults write %s = %lf\n", v17, 44, v18, cStr, *a3);
        __uint64_t v19 = sub_4F1D8();
        __uint64_t v20 = (const char *)sub_44F70(6);
        syslog(3, "%lld %d AVE %s: defaults write %s = %lf", v19, 44, v20, cStr, *a3);
        goto LABEL_26;
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %lf", v17, 44, v18, cStr, *a3);
    }
  }
LABEL_27:
  CFRelease(v7);
  if (v9) {
LABEL_28:
  }
    CFRelease(v9);
  return v16;
}

uint64_t sub_3D640(void *a1, const void *a2, const void *a3)
{
  if (sub_44EF8(0xDu, 8))
  {
    int v6 = sub_44F3C(0xDu);
    __uint64_t v7 = sub_4F1D8();
    CFStringRef v8 = (const char *)sub_44F70(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p\n", v7, 13, v8, "AVE_VCP", "ScaleRefFrames", a1, *a1, a2, a3);
      __uint64_t v9 = sub_4F1D8();
      __uint64_t v26 = sub_44F70(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p", v9, 13, v26);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p", v7, 13, v8);
    }
  }
  uint64_t v10 = (uint64_t (*)(uint64_t, const void *, const void *))a1[6];
  if (v10 && (uint64_t v11 = a1[4]) != 0)
  {
    uint64_t v12 = v10(v11, a2, a3);
    if (sub_44EF8(0xDu, 8))
    {
      int v13 = sub_44F3C(0xDu);
      __uint64_t v14 = sub_4F1D8();
      uint64_t v15 = (const char *)sub_44F70(8);
      if (v13)
      {
        printf("%lld %d AVE %s: %s::%s:%d %p %lld %p %p %p %d\n", v14, 13, v15, "AVE_VCP", "ScaleRefFrames", 224, a1, *a1, (const void *)a1[4], a2, a3, v12);
        __uint64_t v16 = sub_4F1D8();
        __uint64_t v27 = sub_44F70(8);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %lld %p %p %p %d", v16, 13, v27, "AVE_VCP", "ScaleRefFrames", 224);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %lld %p %p %p %d", v14, 13, v15, "AVE_VCP", "ScaleRefFrames", 224);
      }
    }
    if (v12)
    {
      if (sub_44EF8(0xDu, 5))
      {
        int v17 = sub_44F3C(0xDu);
        __uint64_t v18 = sub_4F1D8();
        __uint64_t v19 = (const char *)sub_44F70(5);
        if (v17)
        {
          printf("%lld %d AVE %s: %s::%s:%d fail to scale ref frame %p %lld %p %p %p %d\n", v18, 13, v19, "AVE_VCP", "ScaleRefFrames", 230, a1, *a1, (const void *)a1[4], a2, a3, v12);
          __uint64_t v20 = sub_4F1D8();
          __uint64_t v28 = sub_44F70(5);
          syslog(3, "%lld %d AVE %s: %s::%s:%d fail to scale ref frame %p %lld %p %p %p %d", v20, 13, v28, "AVE_VCP", "ScaleRefFrames", 230);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d fail to scale ref frame %p %lld %p %p %p %d", v18, 13, v19, "AVE_VCP", "ScaleRefFrames", 230);
        }
      }
      uint64_t v12 = 4294966296;
    }
  }
  else
  {
    uint64_t v12 = 4294966294;
  }
  if (sub_44EF8(0xDu, 8))
  {
    int v21 = sub_44F3C(0xDu);
    __uint64_t v22 = sub_4F1D8();
    __uint64_t v23 = (const char *)sub_44F70(8);
    if (v21)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %d\n", v22, 13, v23, "AVE_VCP", "ScaleRefFrames", a1, *a1, a2, a3, v12);
      __uint64_t v24 = sub_4F1D8();
      __uint64_t v29 = sub_44F70(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %d", v24, 13, v29, "AVE_VCP");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %d", v22, 13, v23, "AVE_VCP");
    }
  }
  return v12;
}

uint64_t sub_3DA5C(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  if (sub_44EF8(0xDu, 8))
  {
    int v8 = sub_44F3C(0xDu);
    __uint64_t v9 = sub_4F1D8();
    uint64_t v10 = (const char *)sub_44F70(8);
    if (v8)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %d %d\n", v9, 13, v10, "AVE_VCP", "ChromaFilter", a1, *a1, a2, a3, a4);
      __uint64_t v11 = sub_4F1D8();
      __uint64_t v29 = sub_44F70(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %d %d", v11, 13, v29);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %d %d", v9, 13, v10);
    }
  }
  uint64_t v12 = (uint64_t (*)(uint64_t, const void *, uint64_t, uint64_t))a1[7];
  if (v12 && (uint64_t v13 = a1[4]) != 0)
  {
    uint64_t v14 = v12(v13, a2, a3, a4);
    if (sub_44EF8(0xDu, 8))
    {
      int v15 = sub_44F3C(0xDu);
      __uint64_t v16 = sub_4F1D8();
      int v17 = (const char *)sub_44F70(8);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %p %lld %p %p %d %d %d\n", v16, 13, v17, "AVE_VCP", "ChromaFilter", 264, a1, *a1, (const void *)a1[4], a2, a3, a4, v14);
        __uint64_t v18 = sub_4F1D8();
        unsigned int v30 = sub_44F70(8);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %lld %p %p %d %d %d", v18, 13, v30, "AVE_VCP", "ChromaFilter", 264);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %lld %p %p %d %d %d", v16, 13, v17, "AVE_VCP", "ChromaFilter", 264);
      }
    }
    if (v14)
    {
      if (sub_44EF8(0xDu, 5))
      {
        int v19 = sub_44F3C(0xDu);
        __uint64_t v20 = sub_4F1D8();
        int v21 = (const char *)sub_44F70(5);
        if (v19)
        {
          printf("%lld %d AVE %s: %s::%s:%d fail to filter chroma %p %lld %p %p %d %d %d\n", v20, 13, v21, "AVE_VCP", "ChromaFilter", 270, a1, *a1, (const void *)a1[4], a2, a3, a4, v14);
          __uint64_t v22 = sub_4F1D8();
          __uint64_t v23 = sub_44F70(5);
          syslog(3, "%lld %d AVE %s: %s::%s:%d fail to filter chroma %p %lld %p %p %d %d %d", v22, 13, v23, "AVE_VCP", "ChromaFilter", 270);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d fail to filter chroma %p %lld %p %p %d %d %d", v20, 13, v21, "AVE_VCP", "ChromaFilter", 270);
        }
      }
      uint64_t v14 = 4294966296;
    }
  }
  else
  {
    uint64_t v14 = 4294966294;
  }
  if (sub_44EF8(0xDu, 8))
  {
    int v24 = sub_44F3C(0xDu);
    __uint64_t v25 = sub_4F1D8();
    __uint64_t v26 = (const char *)sub_44F70(8);
    if (v24)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %d %d\n", v25, 13, v26, "AVE_VCP", "ChromaFilter", a1, *a1, a2, a3, a4);
      __uint64_t v27 = sub_4F1D8();
      long long v31 = sub_44F70(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d %d", v27, 13, v31);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d %d", v25, 13, v26);
    }
  }
  return v14;
}

uint64_t sub_3DED4(void *a1, const void *a2, uint64_t a3, void *a4)
{
  if (sub_44EF8(0xDu, 8))
  {
    int v8 = sub_44F3C(0xDu);
    __uint64_t v9 = sub_4F1D8();
    uint64_t v10 = (const char *)sub_44F70(8);
    if (v8)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %d %p\n", v9, 13, v10, "AVE_VCP", "CalcChecksum", a1, *a1, a2, a3, a4);
      __uint64_t v11 = sub_4F1D8();
      long long v32 = sub_44F70(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %d %p", v11, 13, v32, "AVE_VCP");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %d %p", v9, 13, v10, "AVE_VCP");
    }
  }
  if (a1[8] && a1[4])
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      CFDictionaryRef v13 = Mutable;
      uint64_t v14 = ((uint64_t (*)(void, const void *, uint64_t, uint64_t, CFMutableDictionaryRef))a1[8])(a1[4], a2, a3, 1, Mutable);
      if (sub_44EF8(0xDu, 8))
      {
        int v15 = sub_44F3C(0xDu);
        __uint64_t v16 = sub_4F1D8();
        int v17 = (const char *)sub_44F70(8);
        if (v15)
        {
          printf("%lld %d AVE %s: %s::%s:%d %p %lld %p %p %d %p %d\n", v16, 13, v17, "AVE_VCP", "CalcChecksum", 311, a1, *a1, (const void *)a1[4], a2, a3, v13, v14);
          __uint64_t v18 = sub_4F1D8();
          long long v33 = sub_44F70(8);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %p %lld %p %p %d %p %d", v18, 13, v33, "AVE_VCP", "CalcChecksum", 311, a1);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %p %lld %p %p %d %p %d", v16, 13, v17, "AVE_VCP", "CalcChecksum", 311, a1);
        }
      }
      if (v14)
      {
        if (sub_44EF8(0xDu, 5))
        {
          int v22 = sub_44F3C(0xDu);
          __uint64_t v23 = sub_4F1D8();
          int v24 = (const char *)sub_44F70(5);
          if (v22)
          {
            printf("%lld %d AVE %s: %s::%s:%d fail to calculate checksum %p %lld %p %p %d %p %d\n", v23, 13, v24, "AVE_VCP", "CalcChecksum", 318, a1, *a1, (const void *)a1[4], a2, a3, v13, v14);
            __uint64_t v25 = sub_4F1D8();
            __uint64_t v26 = sub_44F70(5);
            syslog(3, "%lld %d AVE %s: %s::%s:%d fail to calculate checksum %p %lld %p %p %d %p %d", v25, 13, v26, "AVE_VCP", "CalcChecksum", 318, a1);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s::%s:%d fail to calculate checksum %p %lld %p %p %d %p %d", v23, 13, v24, "AVE_VCP", "CalcChecksum", 318, a1);
          }
        }
        uint64_t v14 = 4294966296;
      }
      else
      {
        CFDictionaryApplyFunction(v13, (CFDictionaryApplierFunction)sub_3E47C, a4);
      }
      CFRelease(v13);
    }
    else
    {
      if (sub_44EF8(0xDu, 4))
      {
        int v19 = sub_44F3C(0xDu);
        __uint64_t v20 = sub_4F1D8();
        int v21 = (const char *)sub_44F70(4);
        if (v19)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | fail to create dictionary\n", v20, 13, v21, "AVE_VCP", "CalcChecksum", 307, "pDict != __null");
          __uint64_t v20 = sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to create dictionary", v20);
      }
      uint64_t v14 = 4294966293;
    }
  }
  else
  {
    uint64_t v14 = 4294966294;
  }
  if (sub_44EF8(0xDu, 8))
  {
    int v27 = sub_44F3C(0xDu);
    __uint64_t v28 = sub_4F1D8();
    __uint64_t v29 = (const char *)sub_44F70(8);
    if (v27)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %d %p %d\n", v28, 13, v29, "AVE_VCP", "CalcChecksum", a1, *a1, a2, a3, a4, v14);
      __uint64_t v30 = sub_4F1D8();
      long long v34 = sub_44F70(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d %p %d", v30, 13, v34, "AVE_VCP", "CalcChecksum");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d %p %d", v28, 13, v29, "AVE_VCP", "CalcChecksum");
    }
  }
  return v14;
}

void sub_3E47C(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

char *sub_3E490(int a1)
{
  uint64_t result = sub_72A0(a1);
  if (result) {
    return (char *)*((unsigned int *)result + 1);
  }
  return result;
}

void *sub_3E4B0()
{
  return &unk_90110;
}

uint64_t sub_3E4BC(uint64_t a1)
{
  bzero((void *)a1, 0x588uLL);
  for (uint64_t i = 112; i != 784; i += 112)
    *(void *)(a1 + i) = -1;
  *(unsigned char *)(a1 + 792) = 0;
  *(void *)(a1 + 1104) = -1;
  *(void *)&long long v3 = 0xC0000000CLL;
  *((void *)&v3 + 1) = 0xC0000000CLL;
  *(_OWORD *)(a1 + 1128) = v3;
  *(void *)(a1 + 1144) = 0xC0000000CLL;
  *(_DWORD *)(a1 + 1152) = -13;
  *(_DWORD *)(a1 + 1184) = -1;
  *(void *)(a1 + 1192) = 0xBFF0000000000000;
  *(void *)(a1 + 1200) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1208) = -1;
  *(void *)(a1 + 1248) = -1;
  *(_DWORD *)(a1 + 1256) = -1;
  *(void *)(a1 + 1264) = -1;
  *(_DWORD *)(a1 + 1272) = -1;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 1280) = _Q0;
  *(void *)(a1 + 1304) = -1;
  *(void *)(a1 + 1312) = -1;
  *(_DWORD *)(a1 + 1320) = -1;
  *(void *)(a1 + 1348) = -1;
  *(void *)(a1 + 1356) = -1;
  *(void *)(a1 + 1364) = -1;
  *(void *)(a1 + 1372) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 1384) = -1;
  *(_DWORD *)(a1 + 1392) = -1;
  return 0;
}

uint64_t sub_3E584(_DWORD *a1)
{
  unsigned __int8 v9 = 0;
  int v8 = 0;
  if (!sub_3C180(0, "AVE_EnableLossless", &v9))
  {
    uint64_t v2 = 6;
    if (!v9) {
      uint64_t v2 = 8;
    }
    *(void *)&a1[v2] |= 0x200uLL;
  }
  if (!sub_3CBDC(0, "AVE_EnableLambdaMod", &v8))
  {
    uint64_t v3 = 290;
    if (!v8) {
      uint64_t v3 = 292;
    }
    *(void *)&a1[v3] |= 0x1000000uLL;
  }
  if (!sub_3CBDC(0, "AVE_EnableQPMod", &v8))
  {
    if (v8) {
      a1[308] |= 1u;
    }
    else {
      a1[309] |= 1u;
    }
  }
  if (!sub_3CBDC(0, "AVE_CodedBuffersOverride", &v8)) {
    a1[349] = v8;
  }
  if (!sub_3CBDC(0, "AVE_FrameQP", &v8))
  {
    int v4 = v8;
    a1[282] = v8;
    a1[283] = v4;
    a1[284] = v4;
  }
  if (!sub_3CBDC(0, "AVE_LookAheadFrames", &v8)) {
    a1[302] = v8;
  }
  if (!sub_3CBDC(0, "AVE_MaximizePowerEfficiency", &v8))
  {
    if (v8) {
      a1[14] |= 8u;
    }
    else {
      a1[15] |= 8u;
    }
  }
  if (!sub_3CBDC(0, "AVE_UseCAVLCBits", &v8))
  {
    if (v8) {
      a1[14] |= 1u;
    }
    else {
      a1[15] |= 1u;
    }
  }
  if (!sub_3CBDC(0, "AVE_EnableMCTF", &v8))
  {
    uint64_t v5 = 6;
    if (!v8) {
      uint64_t v5 = 8;
    }
    *(void *)&a1[v5] |= 0x20uLL;
  }
  if (!sub_3CBDC(0, "AVE_FigEncodeTime", &v8))
  {
    uint64_t v6 = 6;
    if (!v8) {
      uint64_t v6 = 8;
    }
    *(void *)&a1[v6] |= 0x400000uLL;
  }
  if (!sub_3CBDC(0, "AVE_AverageBitRate", &v8)) {
    a1[295] = v8;
  }
  if (!sub_3CBDC(0, "AVE_Bframes", &v8)) {
    a1[312] = v8;
  }
  if (!sub_3CBDC(0, "AVE_EnableInputYUVDump", &v8) && v8) {
    a1[196] |= 1u;
  }
  if (!sub_3CBDC(0, "AVE_EnableOutputDump", &v8) && v8) {
    a1[196] |= 2u;
  }
  if (!sub_3CBDC(0, "AVE_EnableISPMetadataDump", &v8) && v8) {
    a1[196] |= 4u;
  }
  if (!sub_3CBDC(0, "AVE_EnableMVStatsDump", &v8) && v8) {
    a1[196] |= 8u;
  }
  if (!sub_3CBDC(0, "AVE_EnableMultiPassStatsDump", &v8) && v8) {
    a1[196] |= 0x10u;
  }
  if (!sub_3CBDC(0, "AVE_EnableFrameStatsDump", &v8) && v8) {
    a1[196] |= 0x20u;
  }
  if (!sub_3CBDC(0, "AVE_EnableFWFrameStatsDump", &v8) && v8) {
    a1[196] |= 0x40u;
  }
  uint64_t result = sub_3CBDC(0, "AVE_EnableMCTFFrameStatsDump", &v8);
  if (!result)
  {
    if (v8) {
      a1[196] |= 0x80u;
    }
  }
  return result;
}

uint64_t sub_3E950(void *a1)
{
  uintmax_t v3 = 0;
  if (!sub_3C868(0, "AVE_CfgOn", &v3)) {
    a1[1] = v3;
  }
  if (!sub_3C868(0, "AVE_CfgOff", &v3)) {
    a1[2] = v3;
  }
  if (!sub_3C868(0, "AVE_FeatureOn", &v3)) {
    a1[3] = v3;
  }
  if (!sub_3C868(0, "AVE_FeatureOff", &v3)) {
    a1[4] = v3;
  }
  if (!sub_3C868(0, "AVE_HwFeatureOn", &v3)) {
    a1[5] = v3;
  }
  uint64_t result = sub_3C868(0, "AVE_HwFeatureOff", &v3);
  if (!result) {
    a1[6] = v3;
  }
  return result;
}

uint64_t sub_3EA3C(int *a1)
{
  int v9 = 0;
  if (!sub_3CBDC(0, "AVE_DPM_Mode", &v9)) {
    *a1 = v9 | 0x100;
  }
  if (!sub_3CBDC(0, "AVE_DPM_PL_IOPMin", &v9))
  {
    unsigned int v2 = v9;
    if (v9 <= 1) {
      unsigned int v2 = 1;
    }
    if (v2 >= 4) {
      unsigned int v2 = 4;
    }
    a1[1] |= 1u;
    a1[2] = v2;
  }
  if (!sub_3CBDC(0, "AVE_DPM_PL_IOPMax", &v9))
  {
    unsigned int v3 = v9;
    if (v9 <= 1) {
      unsigned int v3 = 1;
    }
    if (v3 >= 4) {
      unsigned int v3 = 4;
    }
    a1[3] = v3;
    a1[1] |= 0x10000u;
  }
  if (!sub_3CBDC(0, "AVE_DPM_PL_DCSMin", &v9))
  {
    unsigned int v4 = v9;
    if (v9 <= 1) {
      unsigned int v4 = 1;
    }
    if (v4 >= 4) {
      unsigned int v4 = 4;
    }
    a1[4] = v4;
    a1[1] |= 2u;
  }
  if (!sub_3CBDC(0, "AVE_DPM_PL_DCSMax", &v9))
  {
    unsigned int v5 = v9;
    if (v9 <= 1) {
      unsigned int v5 = 1;
    }
    if (v5 >= 4) {
      unsigned int v5 = 4;
    }
    a1[5] = v5;
    a1[1] |= 0x20000u;
  }
  if (!sub_3CBDC(0, "AVE_DPM_PL_FABMin", &v9))
  {
    unsigned int v6 = v9;
    if (v9 <= 1) {
      unsigned int v6 = 1;
    }
    if (v6 >= 4) {
      unsigned int v6 = 4;
    }
    a1[6] = v6;
    a1[1] |= 4u;
  }
  uint64_t result = sub_3CBDC(0, "AVE_DPM_PL_FABMax", &v9);
  if (!result)
  {
    unsigned int v8 = v9;
    if (v9 <= 1) {
      unsigned int v8 = 1;
    }
    if (v8 >= 4) {
      unsigned int v8 = 4;
    }
    a1[7] = v8;
    a1[1] |= 0x40000u;
  }
  return result;
}

uint64_t sub_3EC08(int *a1)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  *(_OWORD *)unsigned int v6 = 0u;
  long long v7 = 0u;
  int v5 = 0;
  if (!sub_3CBDC(0, "AVE_PreemptiveLoadBalancing", &v5))
  {
    if (v5) {
      int v2 = 2;
    }
    else {
      int v2 = 1;
    }
    a1[1] = v2;
  }
  if (!sub_3CBDC(0, "AVE_DLB_Type", &v5))
  {
    a1[2] = v5;
    *a1 = 1;
  }
  if (!sub_3CBDC(0, "AVE_DLB_SVESchedMode", &v5))
  {
    a1[3] = v5;
    *a1 = 1;
  }
  if (!sub_3CBDC(0, "AVE_DLB_SVENum", &v5))
  {
    a1[4] = v5;
    *a1 = 1;
  }
  if (!sub_3BE00(0, "AVE_DLB_SVEMap", v6, 128)) {
    sub_4F410(v6, a1);
  }
  uint64_t v3 = sub_3BE00(0, "AVE_DLB_Cfg", v6, 128);
  if (!v3) {
    sub_4F410(v6, a1);
  }
  return v3;
}

uint64_t sub_3ED70(_DWORD *a1)
{
  uint64_t v3 = 0;
  if (!sub_3C4F4(0, "AVE_PerfFeatureOn", (_DWORD *)&v3 + 1)) {
    a1[14] = HIDWORD(v3);
  }
  if (!sub_3C4F4(0, "AVE_PerfFeatureOff", (_DWORD *)&v3 + 1)) {
    a1[15] = HIDWORD(v3);
  }
  if (!sub_3CBDC(0, "AVE_InputQueueMaxCount", &v3)) {
    a1[16] = v3;
  }
  if (!sub_3CBDC(0, "AVE_MaximumRealTimeFrameRate", &v3)) {
    a1[17] = v3;
  }
  sub_3EA3C(a1 + 18);
  return sub_3EC08(a1 + 26);
}

uint64_t sub_3EE2C(uint64_t a1)
{
  int v4 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  *(_OWORD *)__src = 0u;
  long long v6 = 0u;
  if (!sub_3C4F4(0, "AVE_DumpFeature", &v4)) {
    *(_DWORD *)(a1 + 784) = v4;
  }
  if (!sub_3C4F4(0, "AVE_DumpMode", &v4)) {
    *(_DWORD *)(a1 + 788) = v4;
  }
  uint64_t v2 = sub_3BE00(0, "AVE_OutputPath", __src, 128);
  if (!v2) {
    strncpy((char *)(a1 + 792), __src, 0x7FuLL);
  }
  return v2;
}

uint64_t sub_3EF0C(uint64_t a1)
{
  uintmax_t v5 = 0;
  int v4 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  *(_OWORD *)__src = 0u;
  long long v7 = 0u;
  if (!sub_3C868(0, "AVE_Verbose", &v5))
  {
    *(void *)(a1 + 8) = v5;
    *(_DWORD *)a1 |= 0x100u;
  }
  if (!sub_3C868(0, "AVE_KernelVerbose", &v5))
  {
    *(void *)(a1 + 16) = v5;
    *(_DWORD *)a1 |= 0x200u;
  }
  if (!sub_3C868(0, "AVE_FirmwareVerbose", &v5))
  {
    *(void *)(a1 + 24) = v5;
    *(_DWORD *)a1 |= 0x300u;
  }
  if (!sub_3C868(0, "AVE_AlgVerbose", &v5))
  {
    *(void *)(a1 + 32) = v5;
    *(_DWORD *)a1 |= 0x400u;
  }
  if (!sub_3CBDC(0, "AVE_LogConsole", &v4)) {
    *(_DWORD *)(a1 + 40) = v4;
  }
  uint64_t v2 = sub_3BE00(0, "AVE_LogPath", __src, 128);
  if (!v2) {
    strncpy((char *)(a1 + 44), __src, 0x7FuLL);
  }
  return v2;
}

uint64_t sub_3F080(_DWORD *a1)
{
  int v3 = 0;
  if (!sub_3CBDC(0, "AVE_InitialQPI", &v3)) {
    a1[282] = v3;
  }
  if (!sub_3CBDC(0, "AVE_InitialQPP", &v3)) {
    a1[283] = v3;
  }
  if (!sub_3CBDC(0, "AVE_InitialQPB", &v3)) {
    a1[284] = v3;
  }
  if (!sub_3CBDC(0, "AVE_SoftMinQP", &v3)) {
    a1[285] = v3;
  }
  if (!sub_3CBDC(0, "AVE_SoftMaxQP", &v3)) {
    a1[286] = v3;
  }
  if (!sub_3CBDC(0, "AVE_HardMinQP", &v3)) {
    a1[287] = v3;
  }
  uint64_t result = sub_3CBDC(0, "AVE_HardMaxQP", &v3);
  if (!result) {
    a1[288] = v3;
  }
  return result;
}

uint64_t sub_3F18C(uint64_t a1)
{
  int v6 = 0;
  uintmax_t v4 = 0;
  uintmax_t v5 = 0;
  uint64_t v3 = 0;
  if (!sub_3C868(0, "AVE_RCFeatureOn", &v4)) {
    *(void *)(a1 + 1160) = v4;
  }
  if (!sub_3C868(0, "AVE_RCFeatureOff", &v4)) {
    *(void *)(a1 + 1168) = v4;
  }
  if (!sub_3CBDC(0, "AVE_RCMode", &v6)) {
    *(_DWORD *)(a1 + 1176) = v6;
  }
  if (!sub_3CBDC(0, "AVE_Bitrate", &v6)) {
    *(_DWORD *)(a1 + 1180) = v6;
  }
  if (!sub_3CBDC(0, "AVE_Quality", &v6)) {
    *(_DWORD *)(a1 + 1184) = v6;
  }
  if (!sub_3D2C4(0, "AVE_VBVBufferSize", (double *)&v3)) {
    *(void *)(a1 + 1192) = v3;
  }
  if (!sub_3D2C4(0, "AVE_VBVInitialDelay", (double *)&v3)) {
    *(void *)(a1 + 1200) = v3;
  }
  if (!sub_3CBDC(0, "AVE_LookAheadFrameCount", &v6)) {
    *(_DWORD *)(a1 + 1208) = v6;
  }
  if (!sub_3CBDC(0, "AVE_Parallel_Limit", &v6)) {
    *(_DWORD *)(a1 + 1212) = v6;
  }
  if (!sub_3CF50(0, "AVE_Parallel_MinFrameCnt", &v5)) {
    *(void *)(a1 + 1216) = v5;
  }
  uint64_t result = sub_3CF50(0, "AVE_Parallel_MinDuration", &v5);
  if (!result) {
    *(void *)(a1 + 1224) = v5;
  }
  return result;
}

uint64_t sub_3F320(uint64_t a1)
{
  int v3 = 0;
  if (!sub_3C4F4(0, "AVE_QPModFeatureOn", &v3)) {
    *(_DWORD *)(a1 + 1232) = v3;
  }
  uint64_t result = sub_3C4F4(0, "AVE_QPModFeatureOff", &v3);
  if (!result) {
    *(_DWORD *)(a1 + 1236) = v3;
  }
  return result;
}

double sub_3F38C(uint64_t a1)
{
  double v3 = 0.0;
  uint64_t v4 = 0;
  if (!sub_3C4F4(0, "AVE_GOPFeatureOn", (_DWORD *)&v4 + 1)) {
    *(_DWORD *)(a1 + 1240) = HIDWORD(v4);
  }
  if (!sub_3C4F4(0, "AVE_GOPFeatureOff", (_DWORD *)&v4 + 1)) {
    *(_DWORD *)(a1 + 1244) = HIDWORD(v4);
  }
  if (!sub_3CBDC(0, "AVE_BFrameNum", &v4)) {
    *(_DWORD *)(a1 + 1248) = v4;
  }
  if (!sub_3CBDC(0, "AVE_TemporalLayerNum", &v4)) {
    *(_DWORD *)(a1 + 1252) = v4;
  }
  if (!sub_3CBDC(0, "AVE_FrameRateTargetForAverageBitrate", &v4)) {
    *(_DWORD *)(a1 + 1256) = v4;
  }
  if (!sub_3CBDC(0, "AVE_ExpectedFrameRate", &v4)) {
    *(_DWORD *)(a1 + 1260) = v4;
  }
  if (!sub_3CBDC(0, "AVE_BaseFrameRate", &v4)) {
    *(_DWORD *)(a1 + 1264) = v4;
  }
  if (!sub_3CBDC(0, "AVE_MaxKeyFrameInterval", &v4)) {
    *(_DWORD *)(a1 + 1268) = v4;
  }
  if (!sub_3CBDC(0, "AVE_StrictKeyFrameInterval", &v4)) {
    *(_DWORD *)(a1 + 1272) = v4;
  }
  if (!sub_3D2C4(0, "AVE_MaxKeyFrameIntervalDuration", &v3)) {
    *(double *)(a1 + 1280) = v3;
  }
  if (!sub_3D2C4(0, "AVE_StrictKeyFrameIntervalDuration", &v3))
  {
    double result = v3;
    *(double *)(a1 + 1288) = v3;
  }
  return result;
}

uint64_t sub_3F518(uint64_t a1)
{
  int v3 = 0;
  if (!sub_3C4F4(0, "AVE_RefFeatureOn", &v3)) {
    *(_DWORD *)(a1 + 1296) = v3;
  }
  uint64_t result = sub_3C4F4(0, "AVE_RefFeatureOff", &v3);
  if (!result) {
    *(_DWORD *)(a1 + 1300) = v3;
  }
  return result;
}

uint64_t sub_3F584(_DWORD *a1)
{
  int v3 = 0;
  if (!sub_3CBDC(0, "AVE_MultiPassMaxQPModLevel", &v3)) {
    a1[326] = v3;
  }
  if (!sub_3CBDC(0, "AVE_MultiPassQPModLevel", &v3)) {
    a1[327] = v3;
  }
  if (!sub_3CBDC(0, "AVE_MultiPassConstantQp", &v3)) {
    a1[328] = v3;
  }
  uint64_t result = sub_3CBDC(0, "AVE_MultiPassOptions", &v3);
  if (!result) {
    a1[329] = v3;
  }
  return result;
}

uint64_t sub_3F630(_DWORD *a1)
{
  int v3 = 0;
  if (!sub_3CBDC(0, "AVE_MCTFStrengthLevel", &v3)) {
    a1[330] = v3;
  }
  if (!sub_3CBDC(0, "AVE_MCTFStrengthDelta", &v3)) {
    a1[331] = v3;
  }
  if (!sub_3CBDC(0, "AVE_MCTFTogglePeriod", &v3)) {
    a1[332] = v3;
  }
  if (!sub_3CBDC(0, "AVE_MCTFISPGainThreshold", &v3)) {
    a1[333] = v3;
  }
  if (!sub_3CBDC(0, "AVE_MCTFOnToOffPerfThreshold", &v3)) {
    a1[334] = v3;
  }
  uint64_t result = sub_3CBDC(0, "AVE_MCTFOffToOnPerfThreshold", &v3);
  if (!result) {
    a1[335] = v3;
  }
  return result;
}

uint64_t sub_3F71C(uint64_t a1)
{
  int v4 = 0;
  uintmax_t v3 = 0;
  if (!sub_3CBDC(0, "AVE_Profile", &v4)) {
    *(_DWORD *)(a1 + 1096) = v4;
  }
  if (!sub_3CBDC(0, "AVE_Level", &v4)) {
    *(_DWORD *)(a1 + 1100) = v4;
  }
  if (!sub_3CBDC(0, "AVE_Tier", &v4)) {
    *(_DWORD *)(a1 + 1104) = v4;
  }
  if (!sub_3CBDC(0, "AVE_ScalingMatrix", &v4)) {
    *(_DWORD *)(a1 + 1108) = v4;
  }
  if (!sub_3C868(0, "AVE_SEIFeatureOn", &v3)) {
    *(void *)(a1 + 1112) = v3;
  }
  if (!sub_3C868(0, "AVE_SEIFeatureOff", &v3)) {
    *(void *)(a1 + 1120) = v3;
  }
  sub_3F080((_DWORD *)a1);
  sub_3F18C(a1);
  sub_3F320(a1);
  sub_3F38C(a1);
  sub_3F518(a1);
  return sub_3F584((_DWORD *)a1);
}

uint64_t sub_3F83C(_DWORD *a1)
{
  int v3 = 0;
  if (!sub_3CBDC(0, "AVE_SliceNum", &v3)) {
    a1[336] = v3;
  }
  if (!sub_3CBDC(0, "AVE_MotionSearchRangeMode", &v3)) {
    a1[337] = v3;
  }
  if (!sub_3CBDC(0, "AVE_ThroughputMode", &v3)) {
    a1[338] = v3;
  }
  if (!sub_3CBDC(0, "AVE_MergeCandidateNum", &v3)) {
    a1[339] = v3;
  }
  if (!sub_3CBDC(0, "AVE_DeblockMode", &v3)) {
    a1[340] = v3;
  }
  if (!sub_3CBDC(0, "AVE_SAOMode", &v3)) {
    a1[341] = v3;
  }
  uint64_t result = sub_3CBDC(0, "AVE_EdgeReplication", &v3);
  if (!result) {
    a1[342] = v3;
  }
  return result;
}

uint64_t sub_3F948(uint64_t a1)
{
  int v4 = 0;
  if (!sub_3CBDC(0, "AVE_DWMode", &v4)) {
    *(_DWORD *)a1 = v4;
  }
  if (!sub_3CBDC(0, "AVE_DefaultCfg", &v4)) {
    *(unsigned char *)(a1 + 4) = v4 != 0;
  }
  sub_3E950((void *)a1);
  sub_3ED70((_DWORD *)a1);
  sub_3EE2C(a1);
  sub_3EF0C(a1 + 920);
  sub_3F71C(a1);
  sub_3F83C((_DWORD *)a1);
  sub_3F630((_DWORD *)a1);
  if (!sub_3CBDC(0, "AVE_Usage", &v4)) {
    *(_DWORD *)(a1 + 1372) = v4;
  }
  if (!sub_3CBDC(0, "AVE_PropertyMode", &v4)) {
    *(_DWORD *)(a1 + 1376) = v4;
  }
  if (!sub_3CBDC(0, "AVE_SourceFrameCount", &v4)) {
    *(_DWORD *)(a1 + 1380) = v4;
  }
  if (!sub_3CBDC(0, "AVE_CmdTimeOutMode", &v4)) {
    *(_DWORD *)(a1 + 1384) = v4;
  }
  if (!sub_3CBDC(0, "AVE_FwHeartBeatTimerPanic", &v4)) {
    *(_DWORD *)(a1 + 1388) = v4;
  }
  if (!sub_3CBDC(0, "AVE_SchedPolicy", &v4)) {
    *(_DWORD *)(a1 + 1392) = v4;
  }
  if (!sub_3CBDC(0, "AVE_OutputBufNum", &v4)) {
    *(_DWORD *)(a1 + 1396) = v4;
  }
  if (!sub_3CBDC(0, "AVE_OutputBufSize", &v4)) {
    *(_DWORD *)(a1 + 1400) = v4;
  }
  if (!sub_3CBDC(0, "AVE_SNR", &v4)) {
    *(_DWORD *)(a1 + 1404) = v4;
  }
  uint64_t v2 = sub_3CBDC(0, "AVE_TimeStats_MaxCnt", &v4);
  if (!v2) {
    *(_DWORD *)(a1 + 1408) = v4;
  }
  sub_3E584((_DWORD *)a1);
  return v2;
}

uint64_t sub_3FB44()
{
  if (sub_44EF8(0x2Cu, 7))
  {
    int v0 = sub_44F3C(0x2Cu);
    __uint64_t v1 = sub_4F1D8();
    uint64_t v2 = (const char *)sub_44F70(7);
    if (v0)
    {
      printf("%lld %d AVE %s: %s Enter\n", v1, 44, v2, "AVE_DW_Init");
      __uint64_t v3 = sub_4F1D8();
      long long v10 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: %s Enter", v3, 44, v10, "AVE_DW_Init");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter", v1, 44, v2, "AVE_DW_Init");
    }
  }
  sub_3E4BC((uint64_t)&unk_90110);
  uint64_t v4 = sub_3F948((uint64_t)&unk_90110);
  if (sub_44EF8(0x2Cu, 7))
  {
    int v5 = sub_44F3C(0x2Cu);
    __uint64_t v6 = sub_4F1D8();
    long long v7 = (const char *)sub_44F70(7);
    if (v5)
    {
      printf("%lld %d AVE %s: %s Exit %d\n", v6, 44, v7, "AVE_DW_Init", v4);
      __uint64_t v8 = sub_4F1D8();
      long long v11 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: %s Exit %d", v8, 44, v11, "AVE_DW_Init", v4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %d", v6, 44, v7, "AVE_DW_Init", v4);
    }
  }
  return v4;
}

uint64_t sub_3FCC4(CVPixelBufferRef pixelBuffer, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, _DWORD *a8, int a9)
{
  size_t extraRowsOnBottom = 0;
  extraColumnsOnRight[0] = 0;
  if ((int)a3 <= 10 && (a4 & 1) != 0 || !a8[1] && !a8[3])
  {
    int v16 = 0;
    uint64_t v17 = 0;
    int v18 = 0;
    int v19 = 0;
    goto LABEL_59;
  }
  if (a9 == -1)
  {
    if (a5)
    {
      int v16 = 1;
      if (a6 == 2 && !a7)
      {
        CFTypeRef v20 = CVBufferCopyAttachment(pixelBuffer, kCVPixelBufferExtendedPixelsFilledKey, 0);
        if (v20)
        {
          int v21 = v20;
          int v22 = CFEqual(v20, kCFBooleanTrue);
          if ((int)a3 <= 5 && v22)
          {
            int v16 = 0;
            int v18 = 0;
            int v19 = 0;
            uint64_t v17 = 16;
            goto LABEL_59;
          }
          CFRelease(v21);
        }
        int v16 = 0;
      }
    }
    else
    {
      int v16 = 2;
    }
  }
  else
  {
    int v16 = a9 + 3;
  }
  CVPixelBufferGetExtendedPixels(pixelBuffer, 0, extraColumnsOnRight, 0, &extraRowsOnBottom);
  int v23 = a2[6];
  if (v23)
  {
    int v18 = 0;
    BOOL v24 = 1;
    if (v23 != 1 || !extraRowsOnBottom) {
      goto LABEL_25;
    }
  }
  else if (!extraRowsOnBottom)
  {
    int v18 = 0;
    BOOL v24 = 1;
    goto LABEL_25;
  }
  int v25 = a8[3];
  int v26 = v25 != 0;
  BOOL v24 = v25 == 0;
  int v18 = v26 << 16;
LABEL_25:
  if ((int)a3 < 11)
  {
    if ((int)a3 < 3)
    {
      int v19 = 0;
    }
    else
    {
      if (a8[1] == 8u >> (a2[4] >> 1)) {
        int v34 = 3328;
      }
      else {
        int v34 = 0;
      }
      if (a8[3] == 8u >> (a2[5] >> 1)) {
        int v19 = v34 | 0x50000;
      }
      else {
        int v19 = v34;
      }
    }
  }
  else
  {
    int v27 = a8[1];
    int v28 = a2[4] >> 1;
    if (v27 > (int)(0xEu >> v28) || v27 < (int)(2u >> v28)) {
      int v30 = 0;
    }
    else {
      int v30 = 3328;
    }
    int v31 = a8[3];
    int v32 = a2[5] >> 1;
    if (v31 > (int)(0xEu >> v32) || v31 < (int)(2u >> v32)) {
      int v19 = v30;
    }
    else {
      int v19 = v30 | 0x50000;
    }
  }
  int v35 = 0;
  switch(v16)
  {
    case 0:
      if (v24) {
        int v36 = 0;
      }
      else {
        int v36 = v18;
      }
      int v37 = v19 & 0xFF00 | v36;
      int v35 = v19 & 0x7FF00;
      if ((v19 & 0x70000) == 0) {
        int v35 = v37;
      }
      break;
    case 1:
    case 2:
    case 7:
      int v35 = v19 & 0x7FF00;
      break;
    case 4:
      int v35 = v19 & 0xFF00;
      break;
    case 5:
      int v35 = v19 & 0x70000;
      break;
    case 6:
      int v35 = v18 | 2;
      if (v24) {
        int v35 = 0;
      }
      break;
    default:
      break;
  }
  uint64_t v17 = v35 | ((v35 & 0x10100) != 0);
LABEL_59:
  if (sub_44EF8(0xAu, 7))
  {
    int v38 = sub_44F3C(0xAu);
    __uint64_t v44 = sub_4F1D8();
    long long v39 = (const char *)sub_44F70(7);
    if (v38)
    {
      uint64_t v43 = a4;
      printf("%lld %d AVE %s: %s:%d | %d | %d %d %d %d %d | (%d %d %d %d) (%d %d) | %d %x %x %x\n\n", v44, 10, v39, "AVE_EdgeReplication_DetermineMode", 232, a3, a4, a5, a6, a7, a9, *a8, a8[1], a8[2], a8[3], LODWORD(extraColumnsOnRight[0]), extraRowsOnBottom, v16,
        v18,
        v19,
        v17);
      __uint64_t v40 = sub_4F1D8();
      int v42 = sub_44F70(7);
      syslog(3, "%lld %d AVE %s: %s:%d | %d | %d %d %d %d %d | (%d %d %d %d) (%d %d) | %d %x %x %x\n", v40, 10, v42, "AVE_EdgeReplication_DetermineMode", 232, a3, v43, a5);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d | %d | %d %d %d %d %d | (%d %d %d %d) (%d %d) | %d %x %x %x\n", v44, 10, v39, "AVE_EdgeReplication_DetermineMode", 232, a3, a4, a5);
    }
  }
  return v17;
}

uint64_t sub_40128(__CVBuffer *a1, unsigned int a2)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v5 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferGetBaseAddressOfPlane(a1, a2);
  CVPixelBufferGetWidthOfPlane(a1, a2);
  CVPixelBufferGetHeightOfPlane(a1, a2);
  CVPixelBufferGetBytesPerRowOfPlane(a1, a2);
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &v5);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  return 4294966296;
}

uint64_t sub_401C0(__CVBuffer *a1, unsigned int a2, int a3, uint64_t a4)
{
  size_t v17 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, a2);
  CVPixelBufferGetWidthOfPlane(a1, a2);
  unsigned int HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, a2);
  unsigned int BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, a2);
  CVPixelBufferGetExtendedPixels(a1, 0, 0, &extraRowsOnTop, &v17);
  if (a2)
  {
    if (*(_DWORD *)(a4 + 12))
    {
      int v11 = *(int *)(a4 + 20) >> 1;
      v17 >>= v11;
      extraRowsOnTop >>= v11;
    }
    else
    {
      size_t v17 = 0;
    }
  }
  long long v12 = &BaseAddressOfPlane[(extraRowsOnTop + HeightOfPlane - 1) * BytesPerRowOfPlane];
  long long v13 = &v12[BytesPerRowOfPlane];
  if (a3)
  {
    if (v17)
    {
      for (size_t i = 0; i < v17; ++i)
      {
        memcpy(v13, v12, BytesPerRowOfPlane);
        v13 += BytesPerRowOfPlane;
        v12 -= BytesPerRowOfPlane;
      }
    }
  }
  else if (v17)
  {
    for (size_t j = 0; j < v17; ++j)
    {
      memcpy(v13, v12, BytesPerRowOfPlane);
      v13 += BytesPerRowOfPlane;
    }
  }
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  return 0;
}

uint64_t sub_40330(__CVBuffer *a1, unsigned int a2, uint64_t a3)
{
  __int16 v4 = a2;
  if ((a2 & 0x50000) == 0x10000 && *(int *)(a3 + 8) >= 1)
  {
    signed int v6 = 0;
    int v7 = HIWORD(a2) & 8;
    do
      sub_401C0(a1, v6++, v7, a3);
    while (v6 < *(_DWORD *)(a3 + 8));
  }
  if ((v4 & 0x500) == 0x100 && *(int *)(a3 + 8) >= 1)
  {
    signed int v8 = 0;
    do
      sub_40128(a1, v8++);
    while (v8 < *(_DWORD *)(a3 + 8));
  }
  return 0;
}

uint64_t sub_403F4(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, unsigned int a10, uint64_t a11)
{
  return 0;
}

uint64_t sub_4043C(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, int a10, unsigned int a11, int a12, unsigned int a13, int a14, uint64_t a15)
{
  return 0;
}

uint64_t sub_4048C(_DWORD *a1, int a2, int a3, uint64_t a4, char a5, int a6, int a7, uint64_t a8)
{
  int v8 = a2;
  LODWORD(v10) = 2 * a2 / 3;
  int v11 = 2 * a2 % 3;
  if ((a5 & 1) == 0)
  {
    if (a3 < 1) {
      return 0;
    }
    uint64_t v27 = 0;
    int v28 = a7 * a3;
    if ((int)v10 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v10;
    }
    uint64_t v29 = a6;
    int v30 = a1;
    uint64_t v31 = a3;
    while (1)
    {
      uint64_t v32 = a8 + v27 * a7;
      if (v8 < 2)
      {
        int v42 = 0;
        unsigned int v35 = 0;
        int v34 = 0;
        if (!v11) {
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v33 = 0;
        int v34 = 0;
        unsigned int v35 = 0;
        do
        {
          unsigned int v36 = v30[v33];
          __int16 v37 = v36 & 0x3FF;
          if (v33)
          {
            unsigned int v41 = v34 + v28;
            *(_WORD *)(v32 + 2 * (v34 + v28)) = v37;
            int v39 = 2;
            int v40 = 1;
            unsigned int v38 = v35;
          }
          else
          {
            *(_WORD *)(v32 + 2 * v35) = v37;
            unsigned int v38 = v34 + v28;
            int v39 = 1;
            int v40 = 2;
            unsigned int v41 = v35;
          }
          *(_WORD *)(v32 + 2 * (int)v38) = (v36 >> 10) & 0x3FF;
          *(_WORD *)(v32 + 2 * (int)(v41 + 1)) = (v36 >> 20) & 0x3FF;
          v35 += v40;
          v34 += v39;
          ++v33;
        }
        while (v10 != v33);
        int v42 = v10;
        if (!v11) {
          goto LABEL_36;
        }
      }
      unsigned int v43 = *(_DWORD *)((char *)&a1[v42] + v27 * v29);
      __int16 v44 = v43 & 0x3FF;
      if (v42)
      {
        *(_WORD *)(v32 + 2 * (v34 + v28)) = v44;
        if (v11 == 2) {
          goto LABEL_35;
        }
      }
      else
      {
        *(_WORD *)(v32 + 2 * (int)v35) = v44;
        if (v11 == 2)
        {
          unsigned int v35 = v34 + v28;
LABEL_35:
          *(_WORD *)(v32 + 2 * (int)v35) = (v43 >> 10) & 0x3FF;
        }
      }
LABEL_36:
      ++v27;
      int v30 = (_DWORD *)((char *)v30 + v29);
      if (v27 == v31) {
        return 0;
      }
    }
  }
  if (a3 >= 1)
  {
    uint64_t v12 = 0;
    if ((int)v10 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v10;
    }
    size_t v47 = 2 * (2 * a2 % 3 - 1) + 2;
    uint64_t v14 = a6;
    uint64_t v15 = a7;
    uint64_t v16 = a3;
    size_t v17 = (_WORD *)(a8 + 4);
    int v18 = a1;
    do
    {
      if (v8 < 2)
      {
        unsigned int v23 = 0;
        if (v11) {
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t v19 = v13;
        CFTypeRef v20 = v18;
        int v21 = v17;
        do
        {
          unsigned int v22 = *v20++;
          *(v21 - 2) = v22 & 0x3FF;
          *(v21 - 1) = (v22 >> 10) & 0x3FF;
          _WORD *v21 = (v22 >> 20) & 0x3FF;
          v21 += 3;
          --v19;
        }
        while (v19);
        unsigned int v23 = v13;
        if (v11)
        {
LABEL_13:
          unsigned int v24 = *(_DWORD *)((char *)&a1[v23] + v12 * v14);
          __src[0] = v24 & 0x3FF;
          __src[1] = (v24 >> 10) & 0x3FF;
          __src[2] = (v24 >> 20) & 0x3FF;
          if (v11 >= 1)
          {
            uint64_t v25 = a8;
            uint64_t v26 = v15;
            memcpy((void *)(a8 + (int)v12 * a7 + 6 * v23), __src, v47);
            uint64_t v15 = v26;
            a8 = v25;
            int v8 = a2;
          }
        }
      }
      ++v12;
      size_t v17 = (_WORD *)((char *)v17 + v15);
      int v18 = (unsigned int *)((char *)v18 + v14);
    }
    while (v12 != v16);
  }
  return 0;
}

uint64_t sub_40718(unsigned int *a1, int a2, int a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  if (a3 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = (a2 / 3);
    int v11 = a2 % 3;
    size_t v23 = 2 * (a2 % 3 - 1) + 2;
    uint64_t v12 = a5;
    uint64_t v13 = a3;
    uint64_t v14 = (_WORD *)(a7 + 4);
    uint64_t v15 = a1;
    do
    {
      if (a2 < 3)
      {
        unsigned int v20 = 0;
        if (v11) {
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v16 = v10;
        size_t v17 = v15;
        int v18 = v14;
        do
        {
          unsigned int v19 = *v17++;
          *(v18 - 2) = v19 & 0x3FF;
          *(v18 - 1) = (v19 >> 10) & 0x3FF;
          _WORD *v18 = (v19 >> 20) & 0x3FF;
          v18 += 3;
          --v16;
        }
        while (v16);
        unsigned int v20 = v10;
        if (v11)
        {
LABEL_9:
          unsigned int v21 = *(unsigned int *)((char *)&a1[v20] + v9 * v12);
          __src[0] = v21 & 0x3FF;
          __src[1] = (v21 >> 10) & 0x3FF;
          __src[2] = (v21 >> 20) & 0x3FF;
          if (v11 >= 1) {
            memcpy((void *)(a7 + (int)v9 * a6 + 6 * v20), __src, v23);
          }
        }
      }
      ++v9;
      uint64_t v14 = (_WORD *)((char *)v14 + a6);
      uint64_t v15 = (unsigned int *)((char *)v15 + v12);
    }
    while (v9 != v13);
  }
  return 0;
}

uint64_t sub_40874(unsigned int *a1, int a2, int a3, uint64_t a4, int a5, char a6, int a7, int a8, uint64_t a9)
{
  if (a5) {
    sub_4048C(a1, a2, a3, a4, a6, a7, a8, a9);
  }
  else {
    sub_40718(a1, a2, a3, a4, a7, a8, a9);
  }
  return 0;
}

uint64_t sub_408BC(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result && a2)
  {
    if (a3)
    {
      int v10 = a4;
      int v11 = (unsigned char *)result;
      uint64_t v12 = *a3;
      LODWORD(v12) = sub_4D5BC((char *)(a2 + v12), (int)a4 - (int)v12, "%lld,", a4, a5, a6, a7, a8, v11[8] - *v11) + v12;
      LODWORD(v12) = sub_4D5BC((char *)(a2 + (int)v12), v10 - (int)v12, "%lld,", v13, v14, v15, v16, v17, v11[520] - v11[16])+ v12;
      LODWORD(v12) = sub_4D5BC((char *)(a2 + (int)v12), v10 - (int)v12, "%lld,", v18, v19, v20, v21, v22, v11[24] - v11[16])+ v12;
      LODWORD(v12) = sub_4D5BC((char *)(a2 + (int)v12), v10 - (int)v12, "%lld,", v23, v24, v25, v26, v27, v11[40] - v11[24])+ v12;
      LODWORD(v12) = sub_4D5BC((char *)(a2 + (int)v12), v10 - (int)v12, "%lld,", v28, v29, v30, v31, v32, v11[240] - v11[32])+ v12;
      LODWORD(v12) = sub_4D5BC((char *)(a2 + (int)v12), v10 - (int)v12, "%lld,", v33, v34, v35, v36, v37, v11[464] - v11[248])+ v12;
      LODWORD(v12) = sub_4D5BC((char *)(a2 + (int)v12), v10 - (int)v12, "%lld,", v38, v39, v40, v41, v42, v11[208] - v11[192])+ v12;
      LODWORD(v12) = sub_4D5BC((char *)(a2 + (int)v12), v10 - (int)v12, "%lld,", v43, v44, v45, v46, v47, v11[408] - v11[200])+ v12;
      LODWORD(v12) = sub_4D5BC((char *)(a2 + (int)v12), v10 - (int)v12, "%lld,", v48, v49, v50, v51, v52, v11[496] - v11[416])+ v12;
      LODWORD(v12) = sub_4D5BC((char *)(a2 + (int)v12), v10 - (int)v12, "%lld,", v53, v54, v55, v56, v57, v11[232] - v11[216])+ v12;
      LODWORD(v12) = sub_4D5BC((char *)(a2 + (int)v12), v10 - (int)v12, "%lld,", v58, v59, v60, v61, v62, v11[432] - v11[224])+ v12;
      uint64_t result = sub_4D5BC((char *)(a2 + (int)v12), v10 - (int)v12, "%lld,", v63, v64, v65, v66, v67, v11[512] - v11[440]);
      *a3 = result + v12;
    }
  }
  return result;
}

uint64_t sub_40AC8(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result && a2 && a3)
  {
    int v10 = a4;
    uint64_t v11 = result;
    uint64_t v12 = 0;
    int v13 = *a3;
    do
    {
      uint64_t result = sub_4D5BC((char *)(a2 + v13), v10 - v13, "%lld,", a4, a5, a6, a7, a8, *(void *)(v11 + v12));
      int v13 = *a3 + result;
      *a3 = v13;
      v12 += 8;
    }
    while (v12 != 544);
  }
  return result;
}

uint64_t sub_40B5C(const void *a1, const void *a2, const void *a3, int a4, int a5)
{
  if (sub_44EF8(0x3Au, 7))
  {
    int v8 = sub_44F3C(0x3Au);
    __uint64_t v9 = sub_4F1D8();
    int v10 = (const char *)sub_44F70(7);
    if (v8)
    {
      printf("%lld %d AVE %s: %s Enter %p %p %p %d %d\n", v9, 58, v10, "AVE_FwStats_PrintAll", a1, a2, a3, a4, a5);
      __uint64_t v9 = sub_4F1D8();
      sub_44F70(7);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %p %p %d %d", v9, 58);
  }
  if (a1 && a2)
  {
    if (a3) {
      operator new[]();
    }
    uint64_t v15 = 4294966288;
  }
  else
  {
    if (sub_44EF8(0x3Au, 4))
    {
      int v11 = sub_44F3C(0x3Au);
      __uint64_t v12 = sub_4F1D8();
      int v13 = (const char *)sub_44F70(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d %d\n", v12, 58, v13, "AVE_FwStats_PrintAll", 198, "(psFwStats != __null) && (pEUMap != __null)", a1, a2, a3, a4, a5);
        __uint64_t v14 = sub_4F1D8();
        uint64_t v21 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d %d", v14, 58, v21, "AVE_FwStats_PrintAll");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d %d", v12, 58, v13, "AVE_FwStats_PrintAll");
      }
    }
    uint64_t v15 = 4294966295;
  }
  if (sub_44EF8(0x3Au, 7))
  {
    int v16 = sub_44F3C(0x3Au);
    __uint64_t v17 = sub_4F1D8();
    uint64_t v18 = (const char *)sub_44F70(7);
    if (v16)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %p %d %d %d\n", v17, 58, v18, "AVE_FwStats_PrintAll", a1, a2, a3, a4, a5, v15);
      __uint64_t v19 = sub_4F1D8();
      uint64_t v22 = sub_44F70(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %p %d %d %d", v19, 58, v22);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %p %d %d %d", v17, 58, v18);
    }
  }
  return v15;
}

uint64_t sub_41450(const void *a1, FILE *a2, int a3)
{
  if (sub_44EF8(0x3Au, 7))
  {
    int v6 = sub_44F3C(0x3Au);
    __uint64_t v7 = sub_4F1D8();
    int v8 = (const char *)sub_44F70(7);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p %p %d\n", v7, 58, v8, "AVE_MCTFStats_PrintAll", a1, a2, a3);
      __uint64_t v7 = sub_4F1D8();
      sub_44F70(7);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %p %d", v7);
  }
  if (a1)
  {
    if (a2)
    {
      if (!a3) {
        fwrite("Frame#, FrameDiff, Fn_SetLrmeDiff, HW_LrmeDiff, Fn_SetLrrcDiff, HW_LrrcDiff, Fn_SetPipeDiff, HW_PipeDiff, Fn_PipeDoneDiff, FrameQIn, Fn_SetLrmeStart, HW_LrmeStart, Fn_SetLRMEDone, Fn_SetLrrcStart, HW_LrrcStart, Fn_SetLRRCDone, Fn_SetPipeStart, HW_PipeStart, Fn_SetPipeDone, HW_LrmeDone, HW_LrrcDone, HW_PipeDone, Fn_PipeDoneStart, Fn_PipeDoneEnd, LrmeStatsDone, LrrcStatsDone, PipeStatsDone, FrameOut\n", 0x191uLL, 1uLL, a2);
      }
      operator new[]();
    }
    uint64_t v13 = 4294966288;
  }
  else
  {
    if (sub_44EF8(0x3Au, 4))
    {
      int v9 = sub_44F3C(0x3Au);
      __uint64_t v10 = sub_4F1D8();
      int v11 = (const char *)sub_44F70(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", v10, 58, v11, "AVE_MCTFStats_PrintAll", 384, "pMctfStats != __null", 0, a2, a3);
        __uint64_t v12 = sub_4F1D8();
        __uint64_t v19 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v12, 58, v19);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v10, 58, v11);
      }
    }
    uint64_t v13 = 4294966295;
  }
  if (sub_44EF8(0x3Au, 7))
  {
    int v14 = sub_44F3C(0x3Au);
    __uint64_t v15 = sub_4F1D8();
    int v16 = (const char *)sub_44F70(7);
    if (v14)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %d %d\n", v15, 58, v16, "AVE_MCTFStats_PrintAll", a1, a2, a3, v13);
      __uint64_t v17 = sub_4F1D8();
      sub_44F70(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %d %d", v17);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %d %d", v15);
    }
  }
  return v13;
}

uint64_t sub_419D4(int a1, uint64_t a2, int a3, int a4, uint64_t a5, _DWORD *a6)
{
  uint64_t result = 4294966295;
  if (!a5 || !a6)
  {
LABEL_8:
    if (!a6) {
      return result;
    }
    goto LABEL_9;
  }
  uint64_t v13 = (int *)sub_72D8(a1);
  if (!v13)
  {
    uint64_t result = 4294966294;
    goto LABEL_8;
  }
  int v14 = sub_73F0(*v13, a2, a4);
  if (v14)
  {
    uint64_t result = sub_3A4A0(v14, a3, a5, a6);
    if (!a6) {
      return result;
    }
  }
  else
  {
    uint64_t result = 4294966288;
    if (!a6) {
      return result;
    }
  }
LABEL_9:
  if (result) {
    *a6 = 0;
  }
  return result;
}

uint64_t sub_41A78(int *a1, int a2, int a3)
{
  if (a2 < 1) {
    return 4294966295;
  }
  uint64_t v3 = a2;
  while (1)
  {
    int v4 = *a1++;
    if (v4 == a3) {
      break;
    }
    if (!--v3) {
      return 4294966295;
    }
  }
  return 0;
}

uint64_t sub_41AA8(__CVBuffer *a1, _DWORD *a2, FILE *a3)
{
  size_t extraRowsOnBottom = 0;
  size_t extraColumnsOnRight = 0;
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferGetExtendedPixels(a1, 0, &extraColumnsOnRight, 0, &extraRowsOnBottom);
  int v24 = a2[1];
  int WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  int v7 = extraColumnsOnRight;
  int HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  int v9 = extraRowsOnBottom + HeightOfPlane;
  int BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  if (a2[3])
  {
    int v11 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
    int v21 = WidthOfPlane;
    int v12 = v7;
    int v13 = ((int)extraColumnsOnRight >> ((int)a2[4] >> 1)) + v11;
    int v14 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
    int v15 = ((int)extraRowsOnBottom >> ((int)a2[5] >> 1)) + v14;
    LODWORD(v17) = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
    int v16 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
    int v22 = 2 * v13;
    int v7 = v12;
    int WidthOfPlane = v21;
    uint64_t v17 = (int)v17;
  }
  else
  {
    int v22 = 0;
    int v15 = 0;
    uint64_t v17 = 0;
    int v16 = 0;
  }
  if (v9 >= 1)
  {
    size_t v18 = (v7 + WidthOfPlane) << (v24 == 10);
    do
    {
      fwrite(BaseAddressOfPlane, 1uLL, v18, a3);
      BaseAddressOfPlane += BytesPerRowOfPlane;
      --v9;
    }
    while (v9);
  }
  if (a2[3]) {
    BOOL v19 = v15 < 1;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    do
    {
      fwrite(v16, 1uLL, v22 << (v24 == 10), a3);
      v16 += v17;
      --v15;
    }
    while (v15);
  }
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  return 0;
}

uint64_t sub_41CA4(__CVBuffer *a1, _DWORD *a2)
{
  size_t extraColumnsOnRight = 0;
  size_t extraRowsOnBottom = 0;
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferGetExtendedPixels(a1, 0, &extraColumnsOnRight, 0, &extraRowsOnBottom);
  int v4 = a2[1];
  int v6 = v4 + 7;
  BOOL v5 = v4 < -7;
  int v7 = v4 + 14;
  if (!v5) {
    int v7 = v6;
  }
  int v8 = v7 >> 3;
  int WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  int v10 = extraColumnsOnRight + WidthOfPlane;
  int HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  int v12 = extraRowsOnBottom + HeightOfPlane;
  CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  if (a2[3])
  {
    int v13 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
    int v14 = ((int)extraColumnsOnRight >> ((int)a2[4] >> 1)) + v13;
    int v15 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
    int v16 = ((int)extraRowsOnBottom >> ((int)a2[5] >> 1)) + v15;
    CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
    CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
    int v17 = v16;
  }
  else
  {
    int v14 = 0;
    int v17 = 0;
  }
  if (v10 * v8 * v12 + 2 * v8 * v14 * v17) {
    operator new[]();
  }
  if (sub_44EF8(3u, 4))
  {
    int v18 = sub_44F3C(3u);
    __uint64_t v19 = sub_4F1D8();
    uint64_t v20 = (const char *)sub_44F70(4);
    if (v18)
    {
      printf("%lld %d AVE %s: %s:%d %s | frame size can not be zero\n", v19, 3, v20, "AVE_PixelBuf_DumpPacked", 147, "frameSize != 0");
      __uint64_t v21 = sub_4F1D8();
      uint64_t v23 = (const char *)sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | frame size can not be zero", v21, 3, v23, "AVE_PixelBuf_DumpPacked", 147, "frameSize != 0");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | frame size can not be zero", v19, 3, v20, "AVE_PixelBuf_DumpPacked", 147, "frameSize != 0");
    }
  }
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  return 4294966295;
}

void sub_41F90(__CVBuffer *a1, uint64_t a2)
{
  size_t extraRowsOnBottom = 0;
  size_t extraColumnsOnRight = 0;
  CVPixelBufferGetIOSurface(a1);
  CVPixelBufferGetExtendedPixels(a1, 0, &extraColumnsOnRight, 0, &extraRowsOnBottom);
  CVPixelBufferGetWidthOfPlane(a1, 0);
  CVPixelBufferGetHeightOfPlane(a1, 0);
  IOSurfaceGetBytesPerRowOfCompressedTileHeaderGroupsOfPlane();
  IOSurfaceGetHTPCVerticalHeaderGroupingModeOfPlane();
  IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
  IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
  if (*(_DWORD *)(a2 + 12))
  {
    CVPixelBufferGetWidthOfPlane(a1, 1uLL);
    CVPixelBufferGetHeightOfPlane(a1, 1uLL);
    IOSurfaceGetBytesPerRowOfCompressedTileHeaderGroupsOfPlane();
    IOSurfaceGetHTPCVerticalHeaderGroupingModeOfPlane();
    IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
    IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
  }
  operator new[]();
}

void sub_4222C(__CVBuffer *a1, uint64_t a2)
{
  size_t extraRowsOnBottom = 0;
  size_t extraColumnsOnRight = 0;
  size_t extraRowsOnTop = 0;
  size_t extraColumnsOnLeft = 0;
  CVPixelBufferGetIOSurface(a1);
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
  CVPixelBufferGetWidthOfPlane(a1, 0);
  CVPixelBufferGetHeightOfPlane(a1, 0);
  IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
  IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
  IOSurfaceGetHorizontalPixelOffsetWithinCompressedTileArrayOfPlane();
  IOSurfaceGetVerticalPixelOffsetWithinCompressedTileArrayOfPlane();
  if (*(_DWORD *)(a2 + 12))
  {
    CVPixelBufferGetWidthOfPlane(a1, 1uLL);
    CVPixelBufferGetHeightOfPlane(a1, 1uLL);
    IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
    IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
    IOSurfaceGetHorizontalPixelOffsetWithinCompressedTileArrayOfPlane();
    IOSurfaceGetVerticalPixelOffsetWithinCompressedTileArrayOfPlane();
  }
  operator new[]();
}

uint64_t sub_42500(CVPixelBufferRef pixelBuffer, int a2, FILE *a3)
{
  if (pixelBuffer && a3)
  {
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
    int v7 = sub_4B0D0(PixelFormatType);
    if (v7)
    {
      switch(*((_DWORD *)v7 + 6))
      {
        case 0:
          sub_41AA8(pixelBuffer, v7, a3);
          return 0;
        case 1:
          return sub_41CA4(pixelBuffer, v7);
        case 2:
          sub_41F90(pixelBuffer, (uint64_t)v7);
        case 3:
          sub_4222C(pixelBuffer, (uint64_t)v7);
        default:
          return 4294966295;
      }
    }
    if (sub_44EF8(3u, 4))
    {
      int v12 = sub_44F3C(3u);
      __uint64_t v13 = sub_4F1D8();
      int v14 = (const char *)sub_44F70(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to get pixel format details %p %d %p 0x%x\n", v13, 3, v14, "AVE_PixelBuf_Dump", 391, "pPixelFmt != __null", pixelBuffer, a2, a3, PixelFormatType);
        __uint64_t v15 = sub_4F1D8();
        int v18 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get pixel format details %p %d %p 0x%x", v15, 3, v18, "AVE_PixelBuf_Dump");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get pixel format details %p %d %p 0x%x", v13, 3, v14, "AVE_PixelBuf_Dump");
      }
    }
    return 4294966296;
  }
  else
  {
    if (sub_44EF8(3u, 4))
    {
      int v8 = sub_44F3C(3u);
      __uint64_t v9 = sub_4F1D8();
      int v10 = (const char *)sub_44F70(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p\n", v9, 3, v10, "AVE_PixelBuf_Dump", 384, "pPixelBuf != __null && pFile != __null", pixelBuffer, a2, a3);
        __uint64_t v11 = sub_4F1D8();
        int v17 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v11, 3, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v9, 3, v10);
      }
    }
    return 4294966295;
  }
}

uint64_t sub_427CC(__CVBuffer *a1)
{
  if (a1)
  {
    IOSurface = CVPixelBufferGetIOSurface(a1);
    BaseAddress = IOSurfaceGetBaseAddress(IOSurface);
    int AllocSize = IOSurfaceGetAllocSize(IOSurface);
    bzero(BaseAddress, AllocSize);
    return 0;
  }
  else
  {
    if (sub_44EF8(3u, 4))
    {
      int v5 = sub_44F3C(3u);
      __uint64_t v6 = sub_4F1D8();
      int v7 = (const char *)sub_44F70(4);
      if (v5)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p\n", v6, 3, v7, "AVE_PixelBuf_SetValue", 433, "pPixelBuf != __null", 0);
        __uint64_t v6 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p", v6);
    }
    return 4294966295;
  }
}

uint64_t sub_428F8(CFDictionaryRef theDict, uint64_t a2)
{
  BOOL v19 = 0;
  memset(v20, 0, sizeof(v20));
  if (theDict && a2)
  {
    *(void *)(a2 + 80) = 0;
    *(_OWORD *)a2 = 0uLL;
    *(_OWORD *)(a2 + 64) = 0uLL;
    *(_OWORD *)(a2 + 48) = 0uLL;
    *(_OWORD *)(a2 + 32) = 0uLL;
    *(_OWORD *)(a2 + 16) = 0uLL;
    sub_38CD8(theDict, kFigCaptureStreamMetadata_SNR, (void *)a2);
    sub_38CD8(theDict, kFigCaptureStreamMetadata_NormalizedSNR, (void *)(a2 + 8));
    sub_38CD8(theDict, kFigCaptureStreamMetadata_ExposureTime, (void *)(a2 + 16));
    sub_38CD8(theDict, kFigCaptureStreamMetadata_AGC, (void *)(a2 + 24));
    sub_38CD8(theDict, kFigCaptureStreamMetadata_ispDGain, (void *)(a2 + 32));
    sub_38CD8(theDict, kFigCaptureStreamMetadata_sensorDGain, (void *)(a2 + 40));
    sub_38CD8(theDict, kFigCaptureStreamMetadata_ispDGainRangeExpansionFactor, (void *)(a2 + 48));
    int v4 = (double *)(a2 + 56);
    sub_38CD8(theDict, kFigCaptureStreamMetadata_ScalingFactor, (void *)(a2 + 56));
    sub_38F88(theDict, kFigCaptureStreamMetadata_SensorID, (_DWORD *)(a2 + 64));
    sub_38F88(theDict, kFigCaptureStreamMetadata_LuxLevel, (_DWORD *)(a2 + 68));
    if (sub_38F88(theDict, kFigCaptureStreamMetadata_TemporalNoiseReductionBand0Strength, (_DWORD *)(a2 + 72)) == -1008)*(_DWORD *)(a2 + 72) = -1; {
    uint64_t v5 = sub_38A28(theDict, kFigCaptureStreamMetadata_TemporalNoiseReductionBand0StrengthModulationEnabled, &v19);
    }
    int v6 = v19;
    if (v5 == -1008) {
      int v6 = -1;
    }
    *(_DWORD *)(a2 + 76) = v6;
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, kFigCaptureStreamMetadata_PortType);
    if (Value)
    {
      int v8 = sub_394E8(Value, (char *)v20, 32);
      if (v8)
      {
        __uint64_t v9 = v8;
        uint64_t v10 = 0;
        while (strcmp(v9, *(const char **)((char *)&off_8F0A0 + v10)))
        {
          v10 += 16;
          if (v10 == 80)
          {
            int v11 = 0;
            goto LABEL_21;
          }
        }
        int v11 = *(_DWORD *)((char *)&off_8F0A0 + v10 + 8);
LABEL_21:
        *(_DWORD *)(a2 + 80) = v11;
        if (sub_44EF8(0x37u, 6))
        {
          int v16 = sub_44F3C(0x37u);
          __uint64_t v17 = sub_4F1D8();
          int v18 = (const char *)sub_44F70(6);
          if (v16)
          {
            printf("%lld %d AVE %s: %s:%d SF: %f Port: %s %d\n", v17, 55, v18, "AVE_ISP_RetrieveMetadata", 123, *v4, v9, v11);
            __uint64_t v17 = sub_4F1D8();
            sub_44F70(6);
          }
          syslog(3, "%lld %d AVE %s: %s:%d SF: %f Port: %s %d", v17);
        }
      }
    }
  }
  else
  {
    if (sub_44EF8(0x37u, 4))
    {
      int v12 = sub_44F3C(0x37u);
      __uint64_t v13 = sub_4F1D8();
      int v14 = (const char *)sub_44F70(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p\n", v13, 55, v14, "AVE_ISP_RetrieveMetadata", 75, "pDict != __null && pData != __null", theDict, (const void *)a2);
        __uint64_t v13 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p", v13, 55);
    }
    return 4294966295;
  }
  return v5;
}

const void *sub_42CFC(__CVBuffer *a1)
{
  CFDictionaryRef v1 = CVBufferCopyAttachments(a1, kCVAttachmentMode_ShouldPropagate);
  if (!v1) {
    return 0;
  }
  CFDictionaryRef v2 = v1;
  CFStringRef Value = CFDictionaryGetValue(v1, kFigCaptureSampleBufferAttachmentKey_MetadataDictionary);
  int v4 = Value;
  if (Value) {
    CFRetain(Value);
  }
  CFRelease(v2);
  return v4;
}

uint64_t sub_42D5C(__CVBuffer *a1, const void *a2)
{
  if (a1 && a2)
  {
    CFDictionaryRef v4 = (const __CFDictionary *)sub_42CFC(a1);
    if (v4)
    {
      CFDictionaryRef v5 = v4;
      uint64_t v6 = sub_428F8(v4, (uint64_t)a2);
      CFRelease(v5);
      return v6;
    }
    else
    {
      return 4294966288;
    }
  }
  else
  {
    if (sub_44EF8(0x37u, 4))
    {
      int v8 = sub_44F3C(0x37u);
      __uint64_t v9 = sub_4F1D8();
      uint64_t v10 = (const char *)sub_44F70(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p\n", v9, 55, v10, "AVE_ISP_GetMetadata", 252, "pImgBuf != __null && pData != __null", a1, a2);
        __uint64_t v9 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p", v9, 55);
    }
    return 4294966295;
  }
}

uint64_t sub_42EAC(uint32_t a1, void *a2)
{
  kern_return_t v7;
  uint64_t v8;
  int v9;
  __uint64_t v10;
  const char *v11;
  __uint64_t v12;
  int v13;
  __uint64_t v14;
  const char *v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  BOOL v20;
  void *v22;
  io_connect_t connect;

  connect = 0;
  if (a2)
  {
    CFDictionaryRef v4 = IOServiceMatching("AppleAVE2Driver");
    io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v4);
    if (MatchingService)
    {
      io_service_t v6 = MatchingService;
      kdebug_trace();
      int v7 = IOServiceOpen(v6, mach_task_self_, a1, &connect);
      int v8 = sub_4F2A4(v7);
      kdebug_trace();
      if (v8)
      {
        if (sub_44EF8(0x23u, 4))
        {
          __uint64_t v9 = sub_44F3C(0x23u);
          uint64_t v10 = sub_4F1D8();
          int v11 = (const char *)sub_44F70(4);
          if (v9)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to open driver %d %p 0x%x %d\n", v10, 35, v11, "AVE_UC_Create", 67, "ret == 0", a1, a2, v7, v8);
            int v12 = sub_4F1D8();
            int v22 = sub_44F70(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to open driver %d %p 0x%x %d", v12, 35, v22);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to open driver %d %p 0x%x %d", v10, 35, v11);
          }
        }
      }
      else
      {
        *a2 = connect;
      }
      IOObjectRelease(v6);
      if (v8) {
        uint64_t v20 = connect == 0;
      }
      else {
        uint64_t v20 = 1;
      }
      if (!v20) {
        IOServiceClose(connect);
      }
    }
    else
    {
      if (sub_44EF8(0x23u, 4))
      {
        int v16 = sub_44F3C(0x23u);
        __uint64_t v17 = sub_4F1D8();
        int v18 = (const char *)sub_44F70(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | can not find matched driver %d %p\n", v17, 35, v18, "AVE_UC_Create", 57, "pService != 0", a1, a2);
          BOOL v19 = sub_4F1D8();
          sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | can not find matched driver %d %p", v19, 35);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | can not find matched driver %d %p", v17, 35);
        }
      }
      return 4294966291;
    }
  }
  else
  {
    if (sub_44EF8(0x23u, 4))
    {
      __uint64_t v13 = sub_44F3C(0x23u);
      int v14 = sub_4F1D8();
      __uint64_t v15 = (const char *)sub_44F70(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %d %p\n", v14, 35, v15, "AVE_UC_Create", 51, "ppUC != __null", a1, 0);
        int v14 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %d %p", v14, 35);
    }
    return 4294966295;
  }
  return v8;
}

uint64_t sub_43250(const void *a1)
{
  kern_return_t v2;
  uint64_t v3;
  int v4;
  __uint64_t v5;
  const char *v6;
  int v7;
  __uint64_t v8;
  const char *v9;

  if (a1)
  {
    kdebug_trace();
    CFDictionaryRef v2 = IOServiceClose((io_connect_t)a1);
    uint64_t v3 = sub_4F2A4(v2);
    if (v3)
    {
      if (sub_44EF8(0x23u, 4))
      {
        CFDictionaryRef v4 = sub_44F3C(0x23u);
        CFDictionaryRef v5 = sub_4F1D8();
        io_service_t v6 = (const char *)sub_44F70(4);
        if (v4)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to close driver %p 0x%x %d\n", v5, 35, v6, "AVE_UC_Destroy", 113, "ret == 0", a1, v2, v3);
          CFDictionaryRef v5 = sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to close driver %p 0x%x %d", v5, 35);
      }
    }
    else
    {
      kdebug_trace();
    }
  }
  else
  {
    if (sub_44EF8(0x23u, 4))
    {
      int v7 = sub_44F3C(0x23u);
      int v8 = sub_4F1D8();
      __uint64_t v9 = (const char *)sub_44F70(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p\n", v8, 35, v9, "AVE_UC_Destroy", 105, "pUC != __null", 0);
        int v8 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p", v8);
    }
    return 4294966295;
  }
  return v3;
}

uint64_t sub_43490(const void *a1, const void *a2, void *a3)
{
  kern_return_t v6;
  uint64_t v7;
  int v8;
  __uint64_t v9;
  const char *v10;
  __uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  void *v21;
  void *v22;
  void *v23;
  size_t outputStructCnt;

  outputStructCnt = 40;
  if (a1 && a2 && a3)
  {
    kdebug_trace();
    io_service_t v6 = IOConnectCallStructMethod((mach_port_t)a1, 1u, a2, 0x6E0uLL, a3, &outputStructCnt);
    int v7 = sub_4F2A4(v6);
    kdebug_trace();
    if (v7)
    {
      if (sub_44EF8(0x23u, 4))
      {
        int v8 = sub_44F3C(0x23u);
        __uint64_t v9 = sub_4F1D8();
        uint64_t v10 = (const char *)sub_44F70(4);
        if (v8)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to open client %p %p %p 0x%x\n", v9, 35, v10, "AVE_UC_Open", 155, "ret == 0", a1, a2, a3, v6);
          int v11 = sub_4F1D8();
          __uint64_t v21 = sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to open client %p %p %p 0x%x", v11, 35, v21, "AVE_UC_Open");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to open client %p %p %p 0x%x", v9, 35, v10, "AVE_UC_Open");
        }
      }
    }
    else if (outputStructCnt <= 0x27)
    {
      if (sub_44EF8(0x23u, 4))
      {
        int v16 = sub_44F3C(0x23u);
        __uint64_t v17 = sub_4F1D8();
        int v18 = (const char *)sub_44F70(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d\n", v17, 35, v18, "AVE_UC_Open", 159, "outSize >= sizeof(S_AVE_UCOutParam_Open)", a1, a2, a3, outputStructCnt, 40);
          BOOL v19 = sub_4F1D8();
          uint64_t v23 = sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v19, 35, v23, "AVE_UC_Open");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v17, 35, v18, "AVE_UC_Open");
        }
      }
      return 4294966281;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (sub_44EF8(0x23u, 4))
    {
      int v12 = sub_44F3C(0x23u);
      __uint64_t v13 = sub_4F1D8();
      int v14 = (const char *)sub_44F70(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v13, 35, v14, "AVE_UC_Open", 142, "pUC != __null && pIn != __null && pOut != __null", a1, a2, a3);
        __uint64_t v15 = sub_4F1D8();
        int v22 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v15, 35, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 35, v14);
      }
    }
    return 4294966295;
  }
  return v7;
}

uint64_t sub_43814(const void *a1, const void *a2, void *a3)
{
  kern_return_t v6;
  uint64_t v7;
  int v8;
  __uint64_t v9;
  const char *v10;
  __uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  void *v21;
  void *v22;
  void *v23;
  size_t outputStructCnt;

  outputStructCnt = 32;
  if (a1 && a2 && a3)
  {
    kdebug_trace();
    io_service_t v6 = IOConnectCallStructMethod((mach_port_t)a1, 2u, a2, 0x28uLL, a3, &outputStructCnt);
    int v7 = sub_4F2A4(v6);
    kdebug_trace();
    if (v7)
    {
      if (sub_44EF8(0x23u, 4))
      {
        int v8 = sub_44F3C(0x23u);
        __uint64_t v9 = sub_4F1D8();
        uint64_t v10 = (const char *)sub_44F70(4);
        if (v8)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to close client %p %p %p 0x%x %d\n", v9, 35, v10, "AVE_UC_Close", 197, "ret == 0", a1, a2, a3, v6, v7);
          int v11 = sub_4F1D8();
          __uint64_t v21 = sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to close client %p %p %p 0x%x %d", v11, 35, v21, "AVE_UC_Close");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to close client %p %p %p 0x%x %d", v9, 35, v10, "AVE_UC_Close");
        }
      }
    }
    else if (outputStructCnt <= 0x1F)
    {
      if (sub_44EF8(0x23u, 4))
      {
        int v16 = sub_44F3C(0x23u);
        __uint64_t v17 = sub_4F1D8();
        int v18 = (const char *)sub_44F70(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d\n", v17, 35, v18, "AVE_UC_Close", 201, "outSize >= sizeof(S_AVE_UCOutParam_Close)", a1, a2, a3, outputStructCnt, 32);
          BOOL v19 = sub_4F1D8();
          uint64_t v23 = sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v19, 35, v23, "AVE_UC_Close");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v17, 35, v18, "AVE_UC_Close");
        }
      }
      return 4294966281;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (sub_44EF8(0x23u, 4))
    {
      int v12 = sub_44F3C(0x23u);
      __uint64_t v13 = sub_4F1D8();
      int v14 = (const char *)sub_44F70(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v13, 35, v14, "AVE_UC_Close", 184, "pUC != __null && pIn != __null && pOut != __null", a1, a2, a3);
        __uint64_t v15 = sub_4F1D8();
        int v22 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v15, 35, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 35, v14);
      }
    }
    return 4294966295;
  }
  return v7;
}

uint64_t sub_43BA8(const void *a1, const void *a2, const void *a3, void *a4)
{
  kern_return_t v8;
  uint64_t v9;
  int v10;
  __uint64_t v11;
  const char *v12;
  __uint64_t v13;
  int v14;
  __uint64_t v15;
  const char *v16;
  __uint64_t v17;
  int v18;
  __uint64_t v19;
  const char *v20;
  __uint64_t v21;
  void *v23;
  void *v24;
  void *v25;
  size_t v26;
  uint64_t reference[2];
  long long v28;
  long long v29;
  long long v30;

  uint64_t v29 = 0u;
  uint64_t v30 = 0u;
  *(_OWORD *)reference = 0u;
  uint64_t v28 = 0u;
  uint64_t v26 = 32;
  if (a1 && a2 && a3 && a4)
  {
    kdebug_trace();
    int v8 = IOConnectCallAsyncMethod((mach_port_t)a1, 3u, (mach_port_t)a2, reference, 8u, 0, 0, a3, 0x38uLL, 0, 0, a4, &v26);
    __uint64_t v9 = sub_4F2A4(v8);
    kdebug_trace();
    if (v9)
    {
      if (sub_44EF8(0x23u, 4))
      {
        uint64_t v10 = sub_44F3C(0x23u);
        int v11 = sub_4F1D8();
        int v12 = (const char *)sub_44F70(4);
        if (v10)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to config %p %p %p 0x%x %d\n", v11, 35, v12, "AVE_UC_Config", 243, "ret == 0", a1, a3, a4, v8, v9);
          __uint64_t v13 = sub_4F1D8();
          uint64_t v23 = sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to config %p %p %p 0x%x %d", v13, 35, v23, "AVE_UC_Config");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to config %p %p %p 0x%x %d", v11, 35, v12, "AVE_UC_Config");
        }
      }
    }
    else if (v26 <= 0x1F)
    {
      if (sub_44EF8(0x23u, 4))
      {
        int v18 = sub_44F3C(0x23u);
        BOOL v19 = sub_4F1D8();
        uint64_t v20 = (const char *)sub_44F70(4);
        if (v18)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d\n", v19, 35, v20, "AVE_UC_Config", 247, "outSize >= sizeof(S_AVE_UCOutParam_Config)", a1, a3, a4, v26, 32);
          __uint64_t v21 = sub_4F1D8();
          uint64_t v25 = sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v21, 35, v25, "AVE_UC_Config");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v19, 35, v20, "AVE_UC_Config");
        }
      }
      return 4294966281;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (sub_44EF8(0x23u, 4))
    {
      int v14 = sub_44F3C(0x23u);
      __uint64_t v15 = sub_4F1D8();
      int v16 = (const char *)sub_44F70(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %p\n", v15, 35, v16, "AVE_UC_Config", 229, "pUC != __null && pRecvPort != __null && pIn != __null && pOut != __null", a1, a2, a3, a4);
        __uint64_t v17 = sub_4F1D8();
        int v24 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %p", v17, 35, v24, "AVE_UC_Config");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %p", v15, 35, v16, "AVE_UC_Config");
      }
    }
    return 4294966295;
  }
  return v9;
}

uint64_t sub_43FA0(const void *a1, const void *a2, void *a3)
{
  kern_return_t v6;
  uint64_t v7;
  int v8;
  __uint64_t v9;
  const char *v10;
  __uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  void *v21;
  void *v22;
  void *v23;
  size_t outputStructCnt;

  outputStructCnt = 720;
  if (a1 && a2 && a3)
  {
    kdebug_trace();
    io_service_t v6 = IOConnectCallStructMethod((mach_port_t)a1, 5u, a2, 0x2DFE8uLL, a3, &outputStructCnt);
    int v7 = sub_4F2A4(v6);
    kdebug_trace();
    if (v7)
    {
      if (sub_44EF8(0x23u, 4))
      {
        int v8 = sub_44F3C(0x23u);
        __uint64_t v9 = sub_4F1D8();
        uint64_t v10 = (const char *)sub_44F70(4);
        if (v8)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to start %p %p %p 0x%x %d\n", v9, 35, v10, "AVE_UC_Start", 327, "ret == 0", a1, a2, a3, v6, v7);
          int v11 = sub_4F1D8();
          __uint64_t v21 = sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to start %p %p %p 0x%x %d", v11, 35, v21, "AVE_UC_Start");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to start %p %p %p 0x%x %d", v9, 35, v10, "AVE_UC_Start");
        }
      }
    }
    else if (outputStructCnt <= 0x2CF)
    {
      if (sub_44EF8(0x23u, 4))
      {
        int v16 = sub_44F3C(0x23u);
        __uint64_t v17 = sub_4F1D8();
        int v18 = (const char *)sub_44F70(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d\n", v17, 35, v18, "AVE_UC_Start", 331, "outSize >= sizeof(S_AVE_UCOutParam_Start)", a1, a2, a3, outputStructCnt, 720);
          BOOL v19 = sub_4F1D8();
          uint64_t v23 = sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v19, 35, v23, "AVE_UC_Start");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v17, 35, v18, "AVE_UC_Start");
        }
      }
      return 4294966281;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (sub_44EF8(0x23u, 4))
    {
      int v12 = sub_44F3C(0x23u);
      __uint64_t v13 = sub_4F1D8();
      int v14 = (const char *)sub_44F70(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v13, 35, v14, "AVE_UC_Start", 314, "pUC != __null && pIn != __null && pOut != __null", a1, a2, a3);
        __uint64_t v15 = sub_4F1D8();
        int v22 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v15, 35, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 35, v14);
      }
    }
    return 4294966295;
  }
  return v7;
}

uint64_t sub_44338(const void *a1, const void *a2, void *a3)
{
  kern_return_t v6;
  uint64_t v7;
  int v8;
  __uint64_t v9;
  const char *v10;
  __uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  void *v21;
  void *v22;
  void *v23;
  size_t outputStructCnt;

  outputStructCnt = 32;
  if (a1 && a2 && a3)
  {
    kdebug_trace();
    io_service_t v6 = IOConnectCallStructMethod((mach_port_t)a1, 6u, a2, 0x30uLL, a3, &outputStructCnt);
    int v7 = sub_4F2A4(v6);
    kdebug_trace();
    if (v7)
    {
      if (sub_44EF8(0x23u, 4))
      {
        int v8 = sub_44F3C(0x23u);
        __uint64_t v9 = sub_4F1D8();
        uint64_t v10 = (const char *)sub_44F70(4);
        if (v8)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to stop %p %p %p 0x%x %d\n", v9, 35, v10, "AVE_UC_Stop", 369, "ret == 0", a1, a2, a3, v6, v7);
          int v11 = sub_4F1D8();
          __uint64_t v21 = sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to stop %p %p %p 0x%x %d", v11, 35, v21, "AVE_UC_Stop");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to stop %p %p %p 0x%x %d", v9, 35, v10, "AVE_UC_Stop");
        }
      }
    }
    else if (outputStructCnt <= 0x1F)
    {
      if (sub_44EF8(0x23u, 4))
      {
        int v16 = sub_44F3C(0x23u);
        __uint64_t v17 = sub_4F1D8();
        int v18 = (const char *)sub_44F70(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d\n", v17, 35, v18, "AVE_UC_Stop", 373, "outSize >= sizeof(S_AVE_UCOutParam_Stop)", a1, a2, a3, outputStructCnt, 32);
          BOOL v19 = sub_4F1D8();
          uint64_t v23 = sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v19, 35, v23, "AVE_UC_Stop");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v17, 35, v18, "AVE_UC_Stop");
        }
      }
      return 4294966281;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (sub_44EF8(0x23u, 4))
    {
      int v12 = sub_44F3C(0x23u);
      __uint64_t v13 = sub_4F1D8();
      int v14 = (const char *)sub_44F70(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v13, 35, v14, "AVE_UC_Stop", 356, "pUC != __null && pIn != __null && pOut != __null", a1, a2, a3);
        __uint64_t v15 = sub_4F1D8();
        int v22 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v15, 35, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 35, v14);
      }
    }
    return 4294966295;
  }
  return v7;
}

uint64_t sub_446CC(const void *a1, const void *a2, void *a3)
{
  kern_return_t v6;
  uint64_t v7;
  int v8;
  __uint64_t v9;
  const char *v10;
  __uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  void *v21;
  void *v22;
  void *v23;
  size_t outputStructCnt;

  outputStructCnt = 32;
  if (a1 && a2 && a3)
  {
    kdebug_trace();
    io_service_t v6 = IOConnectCallStructMethod((mach_port_t)a1, 7u, a2, 0x30uLL, a3, &outputStructCnt);
    int v7 = sub_4F2A4(v6);
    kdebug_trace();
    if (v7)
    {
      if (sub_44EF8(0x23u, 4))
      {
        int v8 = sub_44F3C(0x23u);
        __uint64_t v9 = sub_4F1D8();
        uint64_t v10 = (const char *)sub_44F70(4);
        if (v8)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to process %p %p %p 0x%x %d\n", v9, 35, v10, "AVE_UC_Process", 411, "ret == 0", a1, a2, a3, v6, v7);
          int v11 = sub_4F1D8();
          __uint64_t v21 = sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to process %p %p %p 0x%x %d", v11, 35, v21, "AVE_UC_Process");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to process %p %p %p 0x%x %d", v9, 35, v10, "AVE_UC_Process");
        }
      }
    }
    else if (outputStructCnt <= 0x1F)
    {
      if (sub_44EF8(0x23u, 4))
      {
        int v16 = sub_44F3C(0x23u);
        __uint64_t v17 = sub_4F1D8();
        int v18 = (const char *)sub_44F70(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d\n", v17, 35, v18, "AVE_UC_Process", 415, "outSize >= sizeof(S_AVE_UCOutParam_Process)", a1, a2, a3, outputStructCnt, 32);
          BOOL v19 = sub_4F1D8();
          uint64_t v23 = sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v19, 35, v23, "AVE_UC_Process");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v17, 35, v18, "AVE_UC_Process");
        }
      }
      return 4294966281;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (sub_44EF8(0x23u, 4))
    {
      int v12 = sub_44F3C(0x23u);
      __uint64_t v13 = sub_4F1D8();
      int v14 = (const char *)sub_44F70(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v13, 35, v14, "AVE_UC_Process", 398, "pUC != __null && pIn != __null && pOut != __null", a1, a2, a3);
        __uint64_t v15 = sub_4F1D8();
        int v22 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v15, 35, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 35, v14);
      }
    }
    return 4294966295;
  }
  return v7;
}

uint64_t sub_44A60(const void *a1, const void *a2, void *a3)
{
  kern_return_t v6;
  uint64_t v7;
  int v8;
  __uint64_t v9;
  const char *v10;
  __uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  void *v21;
  void *v22;
  void *v23;
  size_t outputStructCnt;

  outputStructCnt = 32;
  if (a1 && a2 && a3)
  {
    kdebug_trace();
    io_service_t v6 = IOConnectCallStructMethod((mach_port_t)a1, 8u, a2, 0x30uLL, a3, &outputStructCnt);
    int v7 = sub_4F2A4(v6);
    kdebug_trace();
    if (v7)
    {
      if (sub_44EF8(0x23u, 4))
      {
        int v8 = sub_44F3C(0x23u);
        __uint64_t v9 = sub_4F1D8();
        uint64_t v10 = (const char *)sub_44F70(4);
        if (v8)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to complete %p %p %p 0x%x %d\n", v9, 35, v10, "AVE_UC_Complete", 453, "ret == 0", a1, a2, a3, v6, v7);
          int v11 = sub_4F1D8();
          __uint64_t v21 = sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to complete %p %p %p 0x%x %d", v11, 35, v21, "AVE_UC_Complete");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to complete %p %p %p 0x%x %d", v9, 35, v10, "AVE_UC_Complete");
        }
      }
    }
    else if (outputStructCnt <= 0x1F)
    {
      if (sub_44EF8(0x23u, 4))
      {
        int v16 = sub_44F3C(0x23u);
        __uint64_t v17 = sub_4F1D8();
        int v18 = (const char *)sub_44F70(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d\n", v17, 35, v18, "AVE_UC_Complete", 457, "outSize >= sizeof(S_AVE_UCOutParam_Complete)", a1, a2, a3, outputStructCnt, 32);
          BOOL v19 = sub_4F1D8();
          uint64_t v23 = sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v19, 35, v23, "AVE_UC_Complete");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v17, 35, v18, "AVE_UC_Complete");
        }
      }
      return 4294966281;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (sub_44EF8(0x23u, 4))
    {
      int v12 = sub_44F3C(0x23u);
      __uint64_t v13 = sub_4F1D8();
      int v14 = (const char *)sub_44F70(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v13, 35, v14, "AVE_UC_Complete", 440, "pUC != __null && pIn != __null && pOut != __null", a1, a2, a3);
        __uint64_t v15 = sub_4F1D8();
        int v22 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v15, 35, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 35, v14);
      }
    }
    return 4294966295;
  }
  return v7;
}

uint64_t sub_44DF4(unsigned int a1, int a2)
{
  if (a1 > 0xFF) {
    return 4294966295;
  }
  char v5 = a2;
  if (!a2) {
    char v5 = *((unsigned char *)&xmmword_90698 + a1);
  }
  byte_907A0[a1] = v5;
  if ((byte_907E0 & 0xFu) >= 7)
  {
    char v6 = byte_907E0;
    __uint64_t v7 = sub_4F1D8();
    if ((v6 & 0x10) != 0)
    {
      printf("%lld %d AVE %s: %s:%d %d 0x%x\n", v7, 64, "VERB", "AVE_Log_UpdateConf", 116, a1, a2);
      __uint64_t v7 = sub_4F1D8();
    }
    syslog(3, "%lld %d AVE %s: %s:%d %d 0x%x", v7, 64, "VERB", "AVE_Log_UpdateConf", 116, a1, a2);
  }
  return 0;
}

BOOL sub_44EF8(unsigned int a1, int a2)
{
  if (a2 >= 0) {
    LOBYTE(v2) = a2;
  }
  else {
    int v2 = -a2;
  }
  return a1 < 5 || a1 <= 0xFF && (v2 & 0xFu) <= (byte_907A0[a1] & 0xFu);
}

uint64_t sub_44F3C(unsigned int a1)
{
  if (a1 < 2) {
    return 1;
  }
  if (a1 <= 0xFF) {
    return byte_907A0[a1] & 0x10;
  }
  return 0;
}

void *sub_44F70(int a1)
{
  if (a1 >= 0) {
    LOBYTE(v1) = a1;
  }
  else {
    int v1 = -a1;
  }
  unsigned int v2 = v1 & 0xF;
  if (v2 > 8) {
    return &unk_5EB27;
  }
  else {
    return *(&off_8F0F0 + v2);
  }
}

uint64_t sub_44FA0()
{
  if (!qword_908A8)
  {
    *(void *)&long long v0 = 0x505050505050505;
    *((void *)&v0 + 1) = 0x505050505050505;
    xmmword_906B8 = v0;
    unk_906C8 = v0;
    xmmword_90778 = v0;
    unk_90788 = v0;
    xmmword_90758 = v0;
    unk_90768 = v0;
    xmmword_90738 = v0;
    unk_90748 = v0;
    xmmword_90718 = v0;
    unk_90728 = v0;
    xmmword_906F8 = v0;
    unk_90708 = v0;
    xmmword_906D8 = v0;
    unk_906E8 = v0;
    xmmword_90698 = v0;
    unk_906A8 = v0;
    BYTE4(xmmword_90698) = 6;
    BYTE12(xmmword_906B8) = 6;
    byte_906D5 = 6;
    byte_906AC = 6;
    BYTE5(xmmword_906F8) = 6;
    BYTE1(xmmword_906D8) = 6;
    dword_9079C = 20;
    dword_90798 = 25;
    byte_906B0 = 6;
    sub_3B40(byte_907A0, (char *)&xmmword_90698, 256);
    dword_908A4 = dword_9079C;
    dword_908A0 = dword_90798;
    qword_908A8 = 1;
  }
  return 0;
}

uint64_t sub_45060(int a1)
{
  if ((byte_907E0 & 0xEu) > 5)
  {
    char v2 = byte_907E0;
    __uint64_t v3 = sub_4F1D8();
    if ((v2 & 0x10) != 0)
    {
      printf("%lld %d AVE %s: %s Enter %d\n", v3, 64, "INFO", "AVE_Log_UpdateConsole", a1);
      __uint64_t v3 = sub_4F1D8();
    }
    syslog(3, "%lld %d AVE %s: %s Enter %d", v3, 64, "INFO", "AVE_Log_UpdateConsole", a1);
  }
  for (uint64_t i = 0; i != 256; ++i)
    byte_907A0[i] = byte_907A0[i] & 0xEF | (16 * ((byte_907A0[i] & 0xF) <= a1));
  qword_908A8 = sub_4F210();
  sub_451B8();
  if ((byte_907E0 & 0xEu) >= 6)
  {
    char v5 = byte_907E0;
    __uint64_t v6 = sub_4F1D8();
    if ((v5 & 0x10) != 0)
    {
      printf("%lld %d AVE %s: %s Exit %d %d\n", v6, 64, "INFO", "AVE_Log_UpdateConsole", a1, 0);
      __uint64_t v6 = sub_4F1D8();
    }
    syslog(3, "%lld %d AVE %s: %s Exit %d %d", v6, 64, "INFO", "AVE_Log_UpdateConsole", a1, 0);
  }
  return 0;
}

void sub_451B8()
{
  if ((byte_907E0 & 0xFu) >= 7)
  {
    char v0 = byte_907E0;
    __uint64_t v1 = sub_4F1D8();
    if ((v0 & 0x10) != 0)
    {
      printf("%lld %d AVE %s: %s:%d %llu\n", v1, 64, "VERB", "AVE_Log_Print", 85, qword_908A8);
      __uint64_t v1 = sub_4F1D8();
    }
    syslog(3, "%lld %d AVE %s: %s:%d %llu", v1, 64, "VERB", "AVE_Log_Print", 85, qword_908A8);
  }
  for (uint64_t i = 0; i != 256; ++i)
  {
    if ((byte_907E0 & 0xFu) >= 7)
    {
      char v3 = byte_907E0;
      __uint64_t v4 = sub_4F1D8();
      int v5 = byte_907A0[i];
      if ((v3 & 0x10) != 0)
      {
        printf("%lld %d AVE %s: Log Cfg: %3d = 0x%02x\n", v4, 64, "VERB", i, v5);
        __uint64_t v4 = sub_4F1D8();
        int v5 = byte_907A0[i];
      }
      syslog(3, "%lld %d AVE %s: Log Cfg: %3d = 0x%02x", v4, 64, "VERB", i, v5);
    }
  }
  if ((byte_907E0 & 0xFu) >= 7)
  {
    char v6 = byte_907E0;
    __uint64_t v7 = sub_4F1D8();
    if ((v6 & 0x10) != 0)
    {
      printf("%lld %d AVE %s: Log Cfg: %d %d\n", v7, 64, "VERB", dword_908A4, dword_908A0);
      __uint64_t v7 = sub_4F1D8();
    }
    syslog(3, "%lld %d AVE %s: Log Cfg: %d %d", v7, 64, "VERB", dword_908A4, dword_908A0);
  }
}

uint64_t sub_4539C(void *a1, uint64_t a2)
{
  uint64_t result = 4294966295;
  if (a1)
  {
    if (a2)
    {
      *a1 = qword_908A8;
      sub_3B40((unsigned char *)a2, byte_907A0, 256);
      uint64_t result = 0;
      *(_DWORD *)(a2 + 256) = dword_908A0;
      *(_DWORD *)(a2 + 260) = dword_908A4;
    }
  }
  return result;
}

uint64_t sub_45408(uint64_t a1, int a2, int a3)
{
  for (unsigned int i = 5; i != 256; ++i)
  {
    unint64_t v7 = (unint64_t)i >> 3;
    if ((int)v7 >= a2) {
      break;
    }
    if ((*(unsigned __int8 *)(a1 + v7) >> (i & 7))) {
      sub_44DF4(i, a3);
    }
  }
  return 0;
}

uint64_t sub_45478(unsigned int a1, unint64_t a2)
{
  memset(v17, 0, sizeof(v17));
  if ((byte_907E0 & 0xEu) >= 6)
  {
    char v5 = byte_907E0;
    __uint64_t v6 = sub_4F1D8();
    if ((v5 & 0x10) != 0)
    {
      printf("%lld %d AVE %s: %s Enter 0x%x 0x%llx\n", v6, 64, "INFO", "AVE_Log_PresetCfg", a1, a2);
      __uint64_t v6 = sub_4F1D8();
    }
    syslog(3, "%lld %d AVE %s: %s Enter 0x%x 0x%llx", v6, 64, "INFO", "AVE_Log_PresetCfg", a1, a2);
  }
  unsigned int v7 = a1 >> 2;
  if (a2)
  {
    uint64_t v8 = 0;
    int v9 = (v7 & 0x3FFFFFC0) - 64;
    do
    {
      if (v9 + (int)v8 > 255) {
        break;
      }
      *((unsigned char *)v17 + (v9 + (int)v8) / 8) |= ((a2 >> v8) & 1) << (v9 + v8 - (v2 & 0xF8));
      ++v8;
    }
    while (v8 != 64);
    sub_45408((uint64_t)v17, 32, a1);
  }
  else
  {
    int v10 = v7 & 0x3FFFFFC0;
    int v11 = (v7 & 0x3FFFFFC0) - 64;
    int v12 = 320 - v10;
    if ((unint64_t)(v11 - 192) >= 0xFFFFFFFFFFFFFF00) {
      int v13 = 64;
    }
    else {
      int v13 = v12;
    }
    sub_3B40(&byte_907A0[v11], (char *)&xmmword_90698 + v11, v13);
  }
  if ((a1 & 0xFFFFFEFF) != 0) {
    qword_908A8 = sub_4F210();
  }
  sub_451B8();
  if ((byte_907E0 & 0xEu) >= 6)
  {
    char v14 = byte_907E0;
    __uint64_t v15 = sub_4F1D8();
    if ((v14 & 0x10) != 0)
    {
      printf("%lld %d AVE %s: %s Exit 0x%x 0x%llx %d\n", v15, 64, "INFO", "AVE_Log_PresetCfg", a1, a2, 0);
      __uint64_t v15 = sub_4F1D8();
    }
    syslog(3, "%lld %d AVE %s: %s Exit 0x%x 0x%llx %d", v15, 64, "INFO", "AVE_Log_PresetCfg", a1, a2, 0);
  }
  return 0;
}

uint64_t sub_45698(uint64_t a1)
{
  memset(v54, 0, 192);
  memset(&v53, 0, sizeof(v53));
  uint64_t v52 = 0;
  char v51 = 0;
  size_t v50 = 0;
  qword_90068[0] = 0;
  qword_90070 = 0;
  if (a1) {
    qword_90068[0] = a1;
  }
  int v1 = sub_9394(v54, 192);
  if (v1 >= 1)
  {
    sub_4D5BC(&v54[v1], 192 - v1, "%s", v2, v3, v4, v5, v6, (char)"ave_log.cfg");
    qword_90070 = (uint64_t)v54;
  }
  uint64_t v7 = 0;
  while (1)
  {
    uint64_t v8 = (const char *)qword_90068[v7];
    if (v8) {
      break;
    }
LABEL_27:
    if (++v7 == 4)
    {
      if ((byte_907E0 & 8) != 0)
      {
        char v22 = byte_907E0;
        __uint64_t v23 = sub_4F1D8();
        if ((v22 & 0x10) != 0)
        {
          printf("%lld %d AVE %s: cannot find available config file\n", v23, 64, "DBG");
          __uint64_t v23 = sub_4F1D8();
        }
        syslog(3, "%lld %d AVE %s: cannot find available config file", v23, 64, "DBG");
      }
      return 4294966288;
    }
  }
  if (stat((const char *)qword_90068[v7], &v53))
  {
    if ((byte_907E0 & 8) != 0)
    {
      char v9 = byte_907E0;
      __uint64_t v10 = sub_4F1D8();
      if ((v9 & 0x10) != 0)
      {
        printf("%lld %d AVE %s: log config file doesn't exist at %s\n", v10, 64, "DBG", v8);
        sub_4F1D8();
      }
      syslog(3, "%lld %d AVE %s: log config file doesn't exist at %s");
    }
    goto LABEL_27;
  }
  if ((byte_907E0 & 8) != 0)
  {
    char v11 = byte_907E0;
    __uint64_t v12 = sub_4F1D8();
    if ((v11 & 0x10) != 0)
    {
      printf("%lld %d AVE %s: log config file is at %s\n", v12, 64, "DBG", v8);
      __uint64_t v12 = sub_4F1D8();
    }
    syslog(3, "%lld %d AVE %s: log config file is at %s", v12, 64, "DBG", v8);
  }
  uint64_t v13 = v53.st_mtimespec.tv_nsec / 1000 + 1000000 * v53.st_mtimespec.tv_sec;
  if (v13 == qword_908A8 && qword_908A8)
  {
    if ((byte_907E0 & 8) != 0)
    {
      char v14 = byte_907E0;
      __uint64_t v15 = sub_4F1D8();
      if ((v14 & 0x10) != 0)
      {
        printf("%lld %d AVE %s: log config file has been updated %s %llu\n", v15, 64, "DBG", v8, qword_908A8);
        sub_4F1D8();
      }
      syslog(3, "%lld %d AVE %s: log config file has been updated %s %llu");
    }
    goto LABEL_27;
  }
  int v16 = fopen(v8, "r");
  if (!v16)
  {
    if ((byte_907E0 & 8) != 0)
    {
      char v17 = byte_907E0;
      __uint64_t v18 = sub_4F1D8();
      BOOL v19 = __error();
      uint64_t v20 = strerror(*v19);
      if ((v17 & 0x10) != 0)
      {
        printf("%lld %d AVE %s: log config file cannot be opened %s : %s\n", v18, 64, "DBG", v8, v20);
        sub_4F1D8();
        __uint64_t v21 = __error();
        strerror(*v21);
      }
      syslog(3, "%lld %d AVE %s: log config file cannot be opened %s : %s");
    }
    goto LABEL_27;
  }
  uint64_t v26 = v16;
  uint64_t v27 = (char *)malloc_type_malloc(0x108uLL, 0x10000400BDB4DB4uLL);
  if (v27)
  {
    uint64_t v28 = v27;
    if ((byte_907E0 & 0xFu) >= 5)
    {
      char v29 = byte_907E0;
      __uint64_t v30 = sub_4F1D8();
      if ((v29 & 0x10) != 0)
      {
        printf("%lld %d AVE %s: used log config file is at %s %llu\n", v30, 64, "WARN", v8, v13);
        __uint64_t v30 = sub_4F1D8();
      }
      syslog(3, "%lld %d AVE %s: used log config file is at %s %llu", v30, 64, "WARN", v8, v13);
    }
    qword_908A8 = v13;
    size_t v50 = 0;
    uint64_t v31 = fgetln(v26, &v50);
    if (v31)
    {
      uint64_t v32 = v31;
      uint64_t v33 = v28 + 256;
      uint64_t v34 = v28 + 260;
      do
      {
        unsigned int v35 = *v32;
        BOOL v36 = v35 > 0x23;
        uint64_t v37 = (1 << v35) & 0x800002400;
        if (v36 || v37 == 0)
        {
          LODWORD(v52) = 15;
          char v51 = 0;
          if (sscanf(v32, "LOG_ID_%d=%d%c", (char *)&v52 + 4, &v52, &v51) == 3)
          {
            char v39 = v52;
            if ((v51 & 0xDF) == 0x43) {
              char v39 = v52 | 0x10;
            }
            v28[SHIDWORD(v52)] = v39;
          }
          else if (sscanf(v32, "THRESHOLD=%d", v28 + 256) == 1)
          {
            uint64_t v40 = &dword_90798;
            if (*v33) {
              uint64_t v40 = (int *)(v28 + 256);
            }
            dword_908A0 = *v40;
            if ((byte_907E0 & 0xFu) >= 7)
            {
              char v41 = byte_907E0;
              __uint64_t v42 = sub_4F1D8();
              if ((v41 & 0x10) != 0)
              {
                printf("%lld %d AVE %s: %s:%d Read threshold %d\n", v42, 64, "VERB", "AVE_Log_ReadCfg", 717, *v33);
                sub_4F1D8();
              }
              syslog(3, "%lld %d AVE %s: %s:%d Read threshold %d");
            }
          }
          else if (sscanf(v32, "INTERVAL=%d", v28 + 260) == 1)
          {
            uint64_t v43 = &dword_9079C;
            if (*v34) {
              uint64_t v43 = (int *)(v28 + 260);
            }
            dword_908A4 = *v43;
            if ((byte_907E0 & 0xFu) >= 7)
            {
              char v44 = byte_907E0;
              __uint64_t v45 = sub_4F1D8();
              if ((v44 & 0x10) != 0)
              {
                printf("%lld %d AVE %s: %s:%d Read interval %d\n", v45, 64, "VERB", "AVE_Log_ReadCfg", 724, *v34);
                sub_4F1D8();
              }
              syslog(3, "%lld %d AVE %s: %s:%d Read interval %d");
            }
          }
        }
        size_t v50 = 0;
        uint64_t v32 = fgetln(v26, &v50);
      }
      while (v32);
    }
    for (uint64_t i = 0; i != 256; ++i)
    {
      uint64_t v47 = &v28[i];
      if (!v28[i]) {
        uint64_t v47 = v28;
      }
      sub_44DF4(i, *v47);
    }
    sub_451B8();
    free(v28);
    uint64_t v24 = 0;
  }
  else
  {
    if ((byte_907E0 & 8) != 0)
    {
      char v48 = byte_907E0;
      __uint64_t v49 = sub_4F1D8();
      if ((v48 & 0x10) != 0)
      {
        printf("%lld %d AVE %s: cannot allocate memory for log config\n", v49, 64, "DBG");
        __uint64_t v49 = sub_4F1D8();
      }
      syslog(3, "%lld %d AVE %s: cannot allocate memory for log config", v49, 64, "DBG");
    }
    uint64_t v24 = 4294966293;
  }
  fclose(v26);
  return v24;
}

uint64_t sub_45DC0(uint64_t result)
{
  if (result)
  {
    int v1 = (_DWORD *)result;
    if (*(unsigned char *)(result + 44)) {
      uint64_t v2 = result + 44;
    }
    else {
      uint64_t v2 = 0;
    }
    uint64_t result = sub_45698(v2);
    int v3 = 256;
    for (uint64_t i = 2; i != 10; i += 2)
    {
      if ((*v1 & v3) != 0)
      {
        sub_45478(v3 + 7, *(void *)&v1[i]);
        uint64_t result = 0;
      }
      v3 += 256;
    }
    int v5 = v1[10];
    if (v5)
    {
      sub_45060((char)v5);
      return 0;
    }
  }
  return result;
}

float sub_45E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  unsigned int v4 = 0;
  double v5 = 0.0;
  double v6 = 0.0;
  do
  {
    unsigned int v7 = *(_DWORD *)(a2 + 16 + v3);
    *(double *)&unint64_t v8 = (double)v7;
    v4 += v7;
    LODWORD(v8) = *(_DWORD *)(a3 + 16 + v3);
    double v6 = v6 + (double)v7 - (double)v8;
    double v9 = -v6;
    if (v6 >= 0.0) {
      double v9 = v6;
    }
    double v5 = v5 + v9;
    v3 += 4;
  }
  while (v3 != 1024);
  if (sub_44EF8(0xD8u, 7))
  {
    int v10 = sub_44F3C(0xD8u);
    __uint64_t v11 = sub_4F1D8();
    __uint64_t v12 = (const char *)sub_44F70(7);
    if (v10)
    {
      printf("%lld %d AVE %s: MP: histogram_diff() hdiff %lf sum_a %d\n", v11, 216, v12, v5, v4);
      __uint64_t v13 = sub_4F1D8();
      __uint64_t v15 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: MP: histogram_diff() hdiff %lf sum_a %d", v13, 216, v15, v5, v4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MP: histogram_diff() hdiff %lf sum_a %d", v11, 216, v12, v5, v4);
    }
  }
  return v5 / (double)v4;
}

BOOL sub_45F70(float a1, float a2, float a3, float a4)
{
  double v4 = a2;
  double v5 = a3;
  if (v4 <= 0.00272072)
  {
    BOOL v9 = a4 <= 0.96605313 && v5 > 1.34009841;
  }
  else
  {
    double v6 = a1;
    if (v6 <= 71.5876885)
    {
      BOOL v7 = v6 > 26.7539587;
      double v8 = 23.2484817;
    }
    else
    {
      BOOL v7 = v4 <= 0.03005953;
      double v8 = 4.51769352;
    }
    BOOL v9 = v5 > v8 && v7;
  }
  if (sub_44EF8(0xD8u, 7))
  {
    int v10 = sub_44F3C(0xD8u);
    __uint64_t v11 = sub_4F1D8();
    __uint64_t v12 = (const char *)sub_44F70(7);
    if (v10)
    {
      printf("%lld %d AVE %s: MP: scene_change_detect() returns %d\n", v11, 216, v12, v9);
      __uint64_t v13 = sub_4F1D8();
      __uint64_t v15 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: MP: scene_change_detect() returns %d", v13, 216, v15, v9);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MP: scene_change_detect() returns %d", v11, 216, v12, v9);
    }
  }
  return v9;
}

void sub_460B8(uint64_t a1, uint64_t a2)
{
  if (sub_44EF8(0xD8u, 7))
  {
    int v4 = sub_44F3C(0xD8u);
    __uint64_t v5 = sub_4F1D8();
    double v6 = (const char *)sub_44F70(7);
    int v7 = *(_DWORD *)(a2 + 44);
    if (v4)
    {
      printf("%lld %d AVE %s: MP: accumulate_scene_info() display_order %d\n", v5, 216, v6, v7);
      __uint64_t v8 = sub_4F1D8();
      __uint64_t v30 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: MP: accumulate_scene_info() display_order %d", v8, 216, v30, *(_DWORD *)(a2 + 44));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MP: accumulate_scene_info() display_order %d", v5, 216, v6, v7);
    }
  }
  if (*(_DWORD *)(a2 + 44) != -1)
  {
    unsigned int v9 = *(_DWORD *)(a1 + 25500) + 1;
    *(_DWORD *)(a1 + 25500) = v9;
    if (*(_DWORD *)(a2 + 1200)) {
      ++*(_DWORD *)(a1 + 25496);
    }
    uint64_t v10 = *(unsigned int *)(a2 + 64);
    *(void *)(a1 + 25504) += v10;
    if (*(_DWORD *)(a2 + 52) == 2)
    {
      *(void *)(a1 + 25516) += v10;
      ++*(_DWORD *)(a1 + 25512);
      double v11 = *(float *)(a2 + 1556);
      *(double *)(a1 + 25576) = *(double *)(a1 + 25576) + v11;
    }
    else
    {
      double v11 = *(float *)(a2 + 1556);
    }
    __uint64_t v12 = (int32x2_t *)(a2 + 1220);
    double v13 = *(double *)(a1 + 25760) + v11;
    *(double *)(a1 + 25760) = v13;
    *(float *)&double v13 = v13 / (double)v9;
    *(_DWORD *)(a1 + 25572) = LODWORD(v13);
    *(float64x2_t *)(a1 + 25584) = vaddq_f64(*(float64x2_t *)(a1 + 25584), vcvtq_f64_f32(*(float32x2_t *)(a2 + 1560)));
    char v14 = (float *)(a2 + 1460);
    __uint64_t v15 = (float *)(a1 + 25664);
    uint64_t v16 = 16;
    do
    {
      *((_DWORD *)v15 - 16) += *((_DWORD *)v14 - 16);
      float v17 = *v14++;
      *__uint64_t v15 = v17 + *v15;
      ++v15;
      --v16;
    }
    while (v16);
    switch(*(_WORD *)(a2 + 1572))
    {
      case 0:
        *(void *)(a1 + 25528) += *(unsigned int *)(a2 + 64);
        ++*(_DWORD *)(a1 + 25524);
        break;
      case 1:
        *(void *)(a1 + 25540) += *(unsigned int *)(a2 + 64);
        ++*(_DWORD *)(a1 + 25536);
        break;
      case 2:
        *(void *)(a1 + 25552) += *(unsigned int *)(a2 + 64);
        ++*(_DWORD *)(a1 + 25548);
        break;
      case 3:
        *(void *)(a1 + 25564) += *(unsigned int *)(a2 + 64);
        ++*(_DWORD *)(a1 + 25560);
        break;
      default:
        break;
    }
    if (!*(_DWORD *)(a2 + 1200))
    {
      uint64_t v18 = 0;
      uint64_t v19 = *(void *)(a1 + 25488);
      float v20 = (float)*(void *)(v19 + 1220);
      float v21 = (float)v12->u32[0];
      int32x2_t v22 = vadd_s32(*(int32x2_t *)(v19 + 1220), *v12);
      *(int32x2_t *)(v19 + 1220) = v22;
      *(int64x2_t *)(v19 + 1228) = vaddq_s64(*(int64x2_t *)(v19 + 1228), *(int64x2_t *)(a2 + 1228));
      *(int64x2_t *)(v19 + 1244) = vaddq_s64(*(int64x2_t *)(v19 + 1244), *(int64x2_t *)(a2 + 1244));
      *(void *)(v19 + 1260) += *(void *)(a2 + 1260);
      uint64_t v23 = *(void *)(v19 + 1292) + *(void *)(a2 + 1292);
      *(float *)(v19 + 1216) = (float)((float)(*(float *)(a2 + 1216) * v21) + (float)(*(float *)(v19 + 1216) * v20))
                             / (float)v22.u32[0];
      *(float64x2_t *)(v19 + 1268) = vaddq_f64(*(float64x2_t *)(a2 + 1268), *(float64x2_t *)(v19 + 1268));
      float v24 = *(float *)(a2 + 1284);
      if (v24 >= *(float *)(v19 + 1284)) {
        float v24 = *(float *)(v19 + 1284);
      }
      *(float *)(v19 + 1284) = v24;
      float v25 = *(float *)(v19 + 1288);
      if (v25 < *(float *)(a2 + 1288)) {
        float v25 = *(float *)(a2 + 1288);
      }
      *(float *)(v19 + 1288) = v25;
      *(void *)(v19 + 1292) = v23;
      int64x2_t v26 = vaddq_s64(*(int64x2_t *)(v19 + 1316), *(int64x2_t *)(a2 + 1316));
      *(int32x4_t *)(v19 + 1300) = vaddq_s32(*(int32x4_t *)(v19 + 1300), *(int32x4_t *)(a2 + 1300));
      *(int64x2_t *)(v19 + 1316) = v26;
      float64x2_t v27 = vaddq_f64(*(float64x2_t *)(a2 + 1348), *(float64x2_t *)(v19 + 1348));
      *(int64x2_t *)(v19 + 1332) = vaddq_s64(*(int64x2_t *)(v19 + 1332), *(int64x2_t *)(a2 + 1332));
      *(float64x2_t *)(v19 + 1348) = v27;
      float64x2_t v28 = vaddq_f64(*(float64x2_t *)(v19 + 1380), vcvtq_f64_f32(*(float32x2_t *)(a2 + 1560)));
      *(float64x2_t *)(v19 + 1364) = vaddq_f64(*(float64x2_t *)(a2 + 1364), *(float64x2_t *)(v19 + 1364));
      *(float64x2_t *)(v19 + 1380) = v28;
      do
      {
        uint64_t v29 = v19 + v18;
        *(_DWORD *)(v29 + 1396) = *(_DWORD *)(v19 + v18 + 1396) + *(_DWORD *)(a2 + v18 + 1396);
        *(float *)(v29 + 1460) = *(float *)(a2 + v18 + 1460) + *(float *)(v19 + v18 + 1460);
        v18 += 4;
      }
      while (v18 != 64);
    }
    sub_4648C(a1);
  }
}

void sub_4648C(uint64_t a1)
{
  uint64_t v2 = (int *)(a1 + 25496);
  if (sub_44EF8(0xD8u, 7))
  {
    int v3 = sub_44F3C(0xD8u);
    __uint64_t v4 = sub_4F1D8();
    __uint64_t v5 = (const char *)sub_44F70(7);
    if (v3)
    {
      printf("%lld %d AVE %s: MP: seq_rc_info()\n", v4, 216, v5);
      __uint64_t v6 = sub_4F1D8();
      uint64_t v71 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: MP: seq_rc_info()", v6, 216, v71);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MP: seq_rc_info()", v4, 216, v5);
    }
  }
  if (sub_44EF8(0xD8u, 7))
  {
    int v7 = sub_44F3C(0xD8u);
    __uint64_t v8 = sub_4F1D8();
    unsigned int v9 = (const char *)sub_44F70(7);
    int v10 = *v2;
    if (v7)
    {
      printf("%lld %d AVE %s:  total_scenes %u\n", v8, 216, v9, v10);
      __uint64_t v11 = sub_4F1D8();
      uint64_t v72 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s:  total_scenes %u", v11, 216, v72, *v2);
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  total_scenes %u", v8, 216, v9, v10);
    }
  }
  if (sub_44EF8(0xD8u, 7))
  {
    int v12 = sub_44F3C(0xD8u);
    __uint64_t v13 = sub_4F1D8();
    char v14 = (const char *)sub_44F70(7);
    int v15 = v2[1];
    if (v12)
    {
      printf("%lld %d AVE %s:  cnt_All %u\n", v13, 216, v14, v15);
      __uint64_t v16 = sub_4F1D8();
      uint64_t v73 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s:  cnt_All %u", v16, 216, v73, v2[1]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  cnt_All %u", v13, 216, v14, v15);
    }
  }
  if (sub_44EF8(0xD8u, 7))
  {
    int v17 = sub_44F3C(0xD8u);
    __uint64_t v18 = sub_4F1D8();
    uint64_t v19 = (const char *)sub_44F70(7);
    uint64_t v20 = *(void *)(a1 + 25504);
    if (v17)
    {
      printf("%lld %d AVE %s:  bits_All %llu\n", v18, 216, v19, v20);
      __uint64_t v21 = sub_4F1D8();
      uint64_t v74 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s:  bits_All %llu", v21, 216, v74, *(void *)(a1 + 25504));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  bits_All %llu", v18, 216, v19, v20);
    }
  }
  if (sub_44EF8(0xD8u, 7))
  {
    int v22 = sub_44F3C(0xD8u);
    __uint64_t v23 = sub_4F1D8();
    float v24 = (const char *)sub_44F70(7);
    int v25 = v2[7];
    if (v22)
    {
      printf("%lld %d AVE %s:  cnt_NORMAL %u\n", v23, 216, v24, v25);
      __uint64_t v26 = sub_4F1D8();
      double v75 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s:  cnt_NORMAL %u", v26, 216, v75, v2[7]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  cnt_NORMAL %u", v23, 216, v24, v25);
    }
  }
  if (sub_44EF8(0xD8u, 7))
  {
    int v27 = sub_44F3C(0xD8u);
    __uint64_t v28 = sub_4F1D8();
    uint64_t v29 = (const char *)sub_44F70(7);
    uint64_t v30 = *(void *)(a1 + 25528);
    if (v27)
    {
      printf("%lld %d AVE %s:  bits_NORMAL %llu\n", v28, 216, v29, v30);
      __uint64_t v31 = sub_4F1D8();
      double v76 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s:  bits_NORMAL %llu", v31, 216, v76, *(void *)(a1 + 25528));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  bits_NORMAL %llu", v28, 216, v29, v30);
    }
  }
  if (sub_44EF8(0xD8u, 7))
  {
    int v32 = sub_44F3C(0xD8u);
    __uint64_t v33 = sub_4F1D8();
    uint64_t v34 = (const char *)sub_44F70(7);
    int v35 = v2[10];
    if (v32)
    {
      printf("%lld %d AVE %s:  cnt_MIN %u\n", v33, 216, v34, v35);
      __uint64_t v36 = sub_4F1D8();
      double v77 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s:  cnt_MIN %u", v36, 216, v77, v2[10]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  cnt_MIN %u", v33, 216, v34, v35);
    }
  }
  if (sub_44EF8(0xD8u, 7))
  {
    int v37 = sub_44F3C(0xD8u);
    __uint64_t v38 = sub_4F1D8();
    char v39 = (const char *)sub_44F70(7);
    uint64_t v40 = *(void *)(v2 + 11);
    if (v37)
    {
      printf("%lld %d AVE %s:  bits_MIN %llu\n", v38, 216, v39, v40);
      __uint64_t v41 = sub_4F1D8();
      __uint64_t v78 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s:  bits_MIN %llu", v41, 216, v78, *(void *)(v2 + 11));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  bits_MIN %llu", v38, 216, v39, v40);
    }
  }
  if (sub_44EF8(0xD8u, 7))
  {
    int v42 = sub_44F3C(0xD8u);
    __uint64_t v43 = sub_4F1D8();
    char v44 = (const char *)sub_44F70(7);
    int v45 = v2[13];
    if (v42)
    {
      printf("%lld %d AVE %s:  cnt_MAX %u\n", v43, 216, v44, v45);
      __uint64_t v46 = sub_4F1D8();
      uint64_t v79 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s:  cnt_MAX %u", v46, 216, v79, v2[13]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  cnt_MAX %u", v43, 216, v44, v45);
    }
  }
  if (sub_44EF8(0xD8u, 7))
  {
    int v47 = sub_44F3C(0xD8u);
    __uint64_t v48 = sub_4F1D8();
    __uint64_t v49 = (const char *)sub_44F70(7);
    uint64_t v50 = *(void *)(a1 + 25552);
    if (v47)
    {
      printf("%lld %d AVE %s:  bits_MAX %llu\n", v48, 216, v49, v50);
      __uint64_t v51 = sub_4F1D8();
      char v80 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s:  bits_MAX %llu", v51, 216, v80, *(void *)(a1 + 25552));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  bits_MAX %llu", v48, 216, v49, v50);
    }
  }
  if (sub_44EF8(0xD8u, 7))
  {
    int v52 = sub_44F3C(0xD8u);
    __uint64_t v53 = sub_4F1D8();
    uint64_t v54 = (const char *)sub_44F70(7);
    int v55 = v2[16];
    if (v52)
    {
      printf("%lld %d AVE %s:  cnt_BLANK %u\n", v53, 216, v54, v55);
      __uint64_t v56 = sub_4F1D8();
      int v81 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s:  cnt_BLANK %u", v56, 216, v81, v2[16]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  cnt_BLANK %u", v53, 216, v54, v55);
    }
  }
  if (sub_44EF8(0xD8u, 7))
  {
    int v57 = sub_44F3C(0xD8u);
    __uint64_t v58 = sub_4F1D8();
    uint64_t v59 = (const char *)sub_44F70(7);
    uint64_t v60 = *(void *)(v2 + 17);
    if (v57)
    {
      printf("%lld %d AVE %s:  bits_BLANK %llu\n", v58, 216, v59, v60);
      __uint64_t v61 = sub_4F1D8();
      __uint64_t v82 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s:  bits_BLANK %llu", v61, 216, v82, *(void *)(v2 + 17));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  bits_BLANK %llu", v58, 216, v59, v60);
    }
  }
  if (sub_44EF8(0xD8u, 7))
  {
    int v62 = sub_44F3C(0xD8u);
    __uint64_t v63 = sub_4F1D8();
    uint64_t v64 = (const char *)sub_44F70(7);
    if (v62)
    {
      printf("%lld %d AVE %s:  avg_qscale %f\n", v63, 216, v64, *((float *)v2 + 19));
      __uint64_t v63 = sub_4F1D8();
      uint64_t v64 = (const char *)sub_44F70(7);
    }
    syslog(3, "%lld %d AVE %s:  avg_qscale %f", v63, 216, v64, *((float *)v2 + 19));
  }
  if (sub_44EF8(0xD8u, 7))
  {
    int v65 = sub_44F3C(0xD8u);
    __uint64_t v66 = sub_4F1D8();
    uint64_t v67 = (const char *)sub_44F70(7);
    if (v65)
    {
      printf("%lld %d AVE %s:  current_complexity %lf\n", v66, 216, v67, *(double *)(a1 + 25584));
      __uint64_t v66 = sub_4F1D8();
      uint64_t v67 = (const char *)sub_44F70(7);
    }
    syslog(3, "%lld %d AVE %s:  current_complexity %lf", v66, 216, v67, *(double *)(a1 + 25584));
  }
  if (sub_44EF8(0xD8u, 7))
  {
    int v68 = sub_44F3C(0xD8u);
    __uint64_t v69 = sub_4F1D8();
    int v70 = (const char *)sub_44F70(7);
    if (v68)
    {
      printf("%lld %d AVE %s:  totalcplxsum %lf\n", v69, 216, v70, *(double *)(a1 + 25592));
      __uint64_t v69 = sub_4F1D8();
      int v70 = (const char *)sub_44F70(7);
    }
    syslog(3, "%lld %d AVE %s:  totalcplxsum %lf", v69, 216, v70, *(double *)(a1 + 25592));
  }
}

_DWORD *sub_46CFC(void *a1, _DWORD *a2)
{
  __uint64_t v61 = a2;
  if (sub_44EF8(0xD8u, 7))
  {
    int v4 = sub_44F3C(0xD8u);
    __uint64_t v5 = sub_4F1D8();
    __uint64_t v6 = (const char *)sub_44F70(7);
    if (v4)
    {
      if (a2) {
        int v7 = a2[11];
      }
      else {
        int v7 = -1;
      }
      printf("%lld %d AVE %s: MP: scene_change_pipeline() Entry stats %p display_order %d\n", v5, 216, v6, a2, v7);
      __uint64_t v5 = sub_4F1D8();
      __uint64_t v6 = (const char *)sub_44F70(7);
      if (a2) {
        goto LABEL_9;
      }
    }
    else if (a2)
    {
LABEL_9:
      int v8 = a2[11];
      goto LABEL_10;
    }
    int v8 = -1;
LABEL_10:
    syslog(3, "%lld %d AVE %s: MP: scene_change_pipeline() Entry stats %p display_order %d", v5, 216, v6, a2, v8);
  }
  if (!a1[3186])
  {
    unsigned int v9 = v61;
    v61[300] = 1;
    a1[3186] = v9;
    sub_47330(a1 + 3179, a1 + 3186);
  }
  sub_47330(a1 + 3173, &v61);
  unint64_t v11 = a1[3178];
  int v12 = (float *)v61;
  if (v11 <= 1)
  {
    *((void *)v61 + 151) = 0;
LABEL_33:
    __uint64_t v61 = 0;
    goto LABEL_34;
  }
  unint64_t v13 = v11 - 2;
  unint64_t v14 = a1[3177];
  unint64_t v15 = v14 + v11 - 2;
  uint64_t v16 = a1[3174];
  unint64_t v17 = v15 >> 9;
  uint64_t v18 = *(void *)(v16 + 8 * (v15 >> 9));
  uint64_t v19 = v15 & 0x1FF;
  uint64_t v20 = *(void *)(v18 + 8 * v19);
  if (v61[11] == -1)
  {
    float v23 = *(float *)(v20 + 1208);
  }
  else
  {
    float v21 = *((float *)v61 + 304) + *(float *)(v20 + 1216);
    if (v21 >= 1.0) {
      float v22 = v21 * 0.0019531;
    }
    else {
      float v22 = 0.0019531;
    }
    float v23 = fmaxf(sub_45E4C(v10, (uint64_t)(v61 + 40), v20 + 160) / v22, 0.01);
    unint64_t v14 = a1[3177];
    uint64_t v16 = a1[3174];
    int v12 = (float *)v61;
    unint64_t v17 = (v14 + v13) >> 9;
    uint64_t v19 = (v14 + v13) & 0x1FF;
  }
  float v24 = *(float *)(*(void *)(*(void *)(v16 + 8 * v17) + 8 * v19) + 1208);
  if (v23 >= v24) {
    float v24 = v23;
  }
  v12[302] = v23;
  v12[303] = v24;
  if (v11 < 4)
  {
    if (v11 == 2)
    {
      uint64_t v34 = *(void *)(*(void *)(v16 + ((v14 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v14 & 0x1FF));
      *(void *)(v34 + 1208) = *(void *)(*(void *)(*(void *)(v16 + (((v14 + 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                                      + 8 * ((v14 + 1) & 0x1FF))
                                          + 1208);
      sub_460B8((uint64_t)a1, v34);
    }
    goto LABEL_33;
  }
  unint64_t v25 = v11 + v14;
  uint64_t v26 = *(void *)(*(void *)(v16 + (((v25 - 3) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v25 - 3) & 0x1FF));
  uint64_t v60 = v26;
  float v27 = *(float *)(*(void *)(*(void *)(v16 + (((v25 - 4) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v25 - 4) & 0x1FF))
                 + 1212);
  float v28 = *(float *)(v26 + 1208);
  float v29 = *(float *)(*(void *)(*(void *)(v16 + (((v25 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v25 - 1) & 0x1FF))
                 + 1212);
  float v30 = v28 / v27;
  float v31 = v29 / v28;
  float v32 = (float)(v29 / v28) / (float)(v28 / v27);
  if (*((_DWORD *)v12 + 11) == -1 || *(_DWORD *)(v26 + 44) < 3u)
  {
    *(_DWORD *)(v26 + 1200) = *(_DWORD *)(v26 + 80) & 1;
    sub_460B8((uint64_t)a1, v26);
    *(_DWORD *)(v26 + 1200) |= *(_DWORD *)(v26 + 44) == -1;
  }
  else
  {
    float v33 = *(float *)(v26 + 36);
    *(_DWORD *)(v26 + 1200) = 0;
    if ((*(unsigned char *)(v26 + 80) & 1) != 0
      || sub_45F70(v28, (float)(v29 / v28) / (float)(v28 / v27), v28 / v27, v29 / v28)
      || *(_DWORD *)(a1[3186] + 1220) >= ((float)(v33 * 6.0) + 0.5))
    {
      *(_DWORD *)(v26 + 1200) = 1;
    }
    sub_460B8((uint64_t)a1, v26);
  }
  if (sub_44EF8(0xD8u, 7))
  {
    int v40 = sub_44F3C(0xD8u);
    __uint64_t v41 = sub_4F1D8();
    int v42 = (const char *)sub_44F70(7);
    int v43 = *(_DWORD *)(v26 + 44);
    int v44 = *(_DWORD *)(v26 + 1200);
    if (v40)
    {
      printf("%lld %d AVE %s: MP: scene_change_pipeline() display_order %d forceKeyFrame %d scene_change %d\n", v41, 216, v42, v43, *(_DWORD *)(v26 + 80) & 1, v44);
      __uint64_t v45 = sub_4F1D8();
      __uint64_t v46 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: MP: scene_change_pipeline() display_order %d forceKeyFrame %d scene_change %d", v45, 216, v46, *(_DWORD *)(v26 + 44), *(_DWORD *)(v26 + 80) & 1, *(_DWORD *)(v26 + 1200));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MP: scene_change_pipeline() display_order %d forceKeyFrame %d scene_change %d", v41, 216, v42, v43, *(_DWORD *)(v26 + 80) & 1, v44);
    }
  }
  int v47 = (int64x2_t *)(a1 + 3177);
  if (sub_44EF8(0xD8u, 7))
  {
    int v48 = sub_44F3C(0xD8u);
    __uint64_t v49 = sub_4F1D8();
    uint64_t v50 = (const char *)sub_44F70(7);
    double v51 = v27;
    double v52 = v28;
    double v53 = v29;
    double v54 = v32;
    double v55 = v30;
    double v56 = v31;
    if (v48)
    {
      printf("%lld %d AVE %s: MP: scene_change_pipeline() m0 %f m1 %f m2 %f m0m2 %f mdpa_ratio_p %f mdpa_ratio_n %f\n", v49, 216, v50, v51, v52, v53, v54, v55, v56);
      sub_4F1D8();
      sub_44F70(7);
    }
    syslog(3, "%lld %d AVE %s: MP: scene_change_pipeline() m0 %f m1 %f m2 %f m0m2 %f mdpa_ratio_p %f mdpa_ratio_n %f");
  }
  if (*(_DWORD *)(v26 + 1200))
  {
    sub_47330(a1 + 3179, &v60);
    a1[3186] = v60;
  }
  int64x2_t v57 = vaddq_s64(*v47, (int64x2_t)xmmword_87810);
  __uint64_t v61 = *(_DWORD **)(*(void *)(a1[3174] + (((unint64_t)v47->i64[0] >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * (v47->i64[0] & 0x1FF));
  *int v47 = v57;
  sub_492FC((uint64_t)(a1 + 3173), 1);
  if (v61[300])
  {
    __uint64_t v61 = 0;
    unint64_t v58 = a1[3183];
    if (*(void *)(*(void *)(a1[3180] + ((v58 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v58 & 0x1FF)) != a1[3186])
    {
      __uint64_t v61 = *(_DWORD **)(*(void *)(a1[3180] + ((a1[3183] >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (a1[3183] & 0x1FFLL));
      --a1[3184];
      a1[3183] = v58 + 1;
      sub_492FC((uint64_t)(a1 + 3179), 1);
    }
  }
LABEL_34:
  if (sub_44EF8(0xD8u, 7))
  {
    int v35 = sub_44F3C(0xD8u);
    __uint64_t v36 = sub_4F1D8();
    int v37 = (const char *)sub_44F70(7);
    if (v35)
    {
      printf("%lld %d AVE %s: MP: scene_change_pipeline() returns stats %p\n", v36, 216, v37, v61);
      __uint64_t v38 = sub_4F1D8();
      uint64_t v59 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: MP: scene_change_pipeline() returns stats %p", v38, 216, v59, v61);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MP: scene_change_pipeline() returns stats %p", v36, 216, v37, v61);
    }
  }
  return v61;
}

void sub_47330(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_48B0C(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_473B8(uint64_t a1, uint64_t a2, int a3)
{
  if (a2)
  {
    if (sub_44EF8(0xD8u, 7))
    {
      int v5 = sub_44F3C(0xD8u);
      __uint64_t v6 = sub_4F1D8();
      uint64_t v7 = (const char *)sub_44F70(7);
      int v8 = *(_DWORD *)(a2 + 44);
      if (v5)
      {
        printf("%lld %d AVE %s: MP: F %d frame_bits %u correction_bits %d\n", v6, 216, v7, v8, *(_DWORD *)(a2 + 64), a3);
        __uint64_t v9 = sub_4F1D8();
        uint64_t v10 = (const char *)sub_44F70(7);
        syslog(3, "%lld %d AVE %s: MP: F %d frame_bits %u correction_bits %d", v9, 216, v10, *(_DWORD *)(a2 + 44), *(_DWORD *)(a2 + 64), a3);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: MP: F %d frame_bits %u correction_bits %d", v6, 216, v7, v8, *(_DWORD *)(a2 + 64), a3);
      }
    }
    if (a3)
    {
      uint64_t v11 = *(int *)(a2 + 64);
      if ((int)v11 + a3 >= 1)
      {
        uint64_t v12 = *(unsigned int *)(a2 + 68) * (uint64_t)a3 / v11;
        if (sub_44EF8(0xD8u, 7))
        {
          int v13 = sub_44F3C(0xD8u);
          __uint64_t v14 = sub_4F1D8();
          unint64_t v15 = (const char *)sub_44F70(7);
          int v16 = *(_DWORD *)(a2 + 44);
          if (v13)
          {
            printf("%lld %d AVE %s: MP: F %d hdr_bits %u hdr_correction %d\n", v14, 216, v15, v16, *(_DWORD *)(a2 + 68), v12);
            __uint64_t v17 = sub_4F1D8();
            uint64_t v18 = (const char *)sub_44F70(7);
            syslog(3, "%lld %d AVE %s: MP: F %d hdr_bits %u hdr_correction %d", v17, 216, v18, *(_DWORD *)(a2 + 44), *(_DWORD *)(a2 + 68), v12);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: MP: F %d hdr_bits %u hdr_correction %d", v14, 216, v15, v16, *(_DWORD *)(a2 + 68), v12);
          }
        }
        int v19 = *(_DWORD *)(a2 + 68);
        int v20 = *(_DWORD *)(a2 + 64) + a3;
        *(void *)(a2 + 1228) += a3;
        *(void *)(a2 + 1244) += (int)v12;
        *(_DWORD *)(a2 + 64) = v20;
        *(_DWORD *)(a2 + 68) = v19 + v12;
        int v21 = *(_DWORD *)(a2 + 52);
        if (v21)
        {
          if (v21 != 2)
          {
LABEL_17:
            uint64_t v23 = *(void *)(a2 + 1316);
            if (v23) {
              *(void *)(a2 + 1316) = v23 + a3;
            }
            uint64_t v24 = *(void *)(a2 + 1324);
            if (v24) {
              *(void *)(a2 + 1324) = v24 + a3;
            }
            uint64_t v25 = *(void *)(a2 + 1332);
            if (v25) {
              *(void *)(a2 + 1332) = v25 + a3;
            }
            uint64_t v26 = *(void *)(a2 + 1340);
            if (v26) {
              *(void *)(a2 + 1340) = v26 + a3;
            }
            return;
          }
          float v22 = (void *)(a2 + 1252);
        }
        else
        {
          float v22 = (void *)(a2 + 1260);
        }
        *v22 += (int)v12;
        goto LABEL_17;
      }
    }
  }
}

const void *sub_47610(void *a1, uint64_t a2, int a3)
{
  __uint64_t v6 = (int *)(a1 + 3165);
  BOOL v7 = sub_44EF8(0xD8u, 7);
  if (v7)
  {
    int v8 = sub_44F3C(0xD8u);
    __uint64_t v9 = sub_4F1D8();
    uint64_t v10 = (const char *)sub_44F70(7);
    if (v8)
    {
      if (a2) {
        int v11 = *(_DWORD *)(a2 + 44);
      }
      else {
        int v11 = -1;
      }
      printf("%lld %d AVE %s: MP: enqueue_first_pass() display_order %d flush %d fixup_fifo_len %d\n", v9, 216, v10, v11, a3, v6[6]);
      __uint64_t v9 = sub_4F1D8();
      uint64_t v10 = (const char *)sub_44F70(7);
      if (a2) {
        int v12 = *(_DWORD *)(a2 + 44);
      }
      else {
        int v12 = -1;
      }
    }
    else if (a2)
    {
      int v12 = *(_DWORD *)(a2 + 44);
    }
    else
    {
      int v12 = -1;
    }
    syslog(3, "%lld %d AVE %s: MP: enqueue_first_pass() display_order %d flush %d fixup_fifo_len %d", v9, 216, v10, v12, a3, v6[6]);
  }
  unsigned int v13 = v6[6];
  if ((a3 & 1) == 0)
  {
    if (v13 != 2)
    {
      if (v13 == 1)
      {
        __uint64_t v17 = 0;
        a1[(v6[7] == 0) + 3166] = a2;
        int v18 = 2;
      }
      else
      {
        if (v13) {
          goto LABEL_81;
        }
        __uint64_t v17 = 0;
        a1[v6[7] + 3166] = a2;
        int v18 = 1;
      }
      v6[6] = v18;
      goto LABEL_95;
    }
LABEL_23:
    sub_473B8(v7, a1[v6[7] + 3166], *(_DWORD *)(a2 + 72));
    int v19 = &a1[v6[7] + 3166];
    int v20 = (void *)a1[3170];
    unint64_t v21 = a1[3171];
    if ((unint64_t)v20 >= v21)
    {
      uint64_t v27 = a1[3169];
      uint64_t v28 = ((uint64_t)v20 - v27) >> 3;
      if ((unint64_t)(v28 + 1) >> 61) {
        sub_4935C();
      }
      uint64_t v29 = v21 - v27;
      uint64_t v30 = v29 >> 2;
      if (v29 >> 2 <= (unint64_t)(v28 + 1)) {
        uint64_t v30 = v28 + 1;
      }
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v30;
      }
      if (v31) {
        float v32 = (char *)sub_492C4((uint64_t)(a1 + 3171), v31);
      }
      else {
        float v32 = 0;
      }
      __uint64_t v45 = &v32[8 * v28];
      __uint64_t v46 = &v32[8 * v31];
      *(void *)__uint64_t v45 = *v19;
      uint64_t v22 = (uint64_t)(v45 + 8);
      int v47 = (char *)a1[3170];
      int v48 = (char *)a1[3169];
      if (v47 != v48)
      {
        do
        {
          uint64_t v49 = *((void *)v47 - 1);
          v47 -= 8;
          *((void *)v45 - 1) = v49;
          v45 -= 8;
        }
        while (v47 != v48);
        int v47 = (char *)a1[3169];
      }
      a1[3169] = v45;
      a1[3170] = v22;
      a1[3171] = v46;
      if (v47) {
        operator delete(v47);
      }
    }
    else
    {
      *int v20 = *v19;
      uint64_t v22 = (uint64_t)(v20 + 1);
    }
    a1[3170] = v22;
    sub_49404(a1[3169], v22, (uint64_t)&v83, (v22 - a1[3169]) >> 3);
    BOOL v50 = v6[7] == 0;
    if (a3) {
      --v6[6];
    }
    else {
      a1[v6[7] + 3166] = a2;
    }
    v6[7] = v50;
    goto LABEL_81;
  }
  if (v13 == 2) {
    goto LABEL_23;
  }
  if (v13 == 1)
  {
    uint64_t v23 = &a1[v6[7] + 3166];
    uint64_t v24 = (void *)a1[3170];
    unint64_t v25 = a1[3171];
    if ((unint64_t)v24 >= v25)
    {
      uint64_t v33 = a1[3169];
      uint64_t v34 = ((uint64_t)v24 - v33) >> 3;
      if ((unint64_t)(v34 + 1) >> 61) {
        goto LABEL_101;
      }
      uint64_t v35 = v25 - v33;
      uint64_t v36 = v35 >> 2;
      if (v35 >> 2 <= (unint64_t)(v34 + 1)) {
        uint64_t v36 = v34 + 1;
      }
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v36;
      }
      if (v37) {
        __uint64_t v38 = (char *)sub_492C4((uint64_t)(a1 + 3171), v37);
      }
      else {
        __uint64_t v38 = 0;
      }
      double v51 = &v38[8 * v34];
      double v52 = &v38[8 * v37];
      *(void *)double v51 = *v23;
      uint64_t v26 = (uint64_t)(v51 + 8);
      double v53 = (char *)a1[3170];
      double v54 = (char *)a1[3169];
      if (v53 != v54)
      {
        do
        {
          uint64_t v55 = *((void *)v53 - 1);
          v53 -= 8;
          *((void *)v51 - 1) = v55;
          v51 -= 8;
        }
        while (v53 != v54);
        double v53 = (char *)a1[3169];
      }
      a1[3169] = v51;
      a1[3170] = v26;
      a1[3171] = v52;
      if (v53) {
        operator delete(v53);
      }
    }
    else
    {
      *uint64_t v24 = *v23;
      uint64_t v26 = (uint64_t)(v24 + 1);
    }
    a1[3170] = v26;
    sub_49404(a1[3169], v26, (uint64_t)&v82, (v26 - a1[3169]) >> 3);
    BOOL v56 = v6[7] == 0;
    --v6[6];
    v6[7] = v56;
    if (a2)
    {
      uint64_t v57 = *v6;
      a1[v57 + 3149] = a2;
      if (v57 < 0x10) {
        int v58 = v57 + 1;
      }
      else {
        int v58 = 16;
      }
      *__uint64_t v6 = v58;
    }
    goto LABEL_81;
  }
  if (v13) {
    goto LABEL_81;
  }
  __uint64_t v14 = (void *)a1[3170];
  unint64_t v15 = a1[3171];
  if ((unint64_t)v14 >= v15)
  {
    uint64_t v39 = a1[3169];
    uint64_t v40 = ((uint64_t)v14 - v39) >> 3;
    if (!((unint64_t)(v40 + 1) >> 61))
    {
      uint64_t v41 = v15 - v39;
      uint64_t v42 = v41 >> 2;
      if (v41 >> 2 <= (unint64_t)(v40 + 1)) {
        uint64_t v42 = v40 + 1;
      }
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v43 = v42;
      }
      if (v43) {
        int v44 = (char *)sub_492C4((uint64_t)(a1 + 3171), v43);
      }
      else {
        int v44 = 0;
      }
      uint64_t v59 = &v44[8 * v40];
      uint64_t v60 = &v44[8 * v43];
      *(void *)uint64_t v59 = a2;
      uint64_t v16 = (uint64_t)(v59 + 8);
      __uint64_t v61 = (char *)a1[3170];
      int v62 = (char *)a1[3169];
      if (v61 != v62)
      {
        do
        {
          uint64_t v63 = *((void *)v61 - 1);
          v61 -= 8;
          *((void *)v59 - 1) = v63;
          v59 -= 8;
        }
        while (v61 != v62);
        __uint64_t v61 = (char *)a1[3169];
      }
      a1[3169] = v59;
      a1[3170] = v16;
      a1[3171] = v60;
      if (v61) {
        operator delete(v61);
      }
      goto LABEL_80;
    }
LABEL_101:
    sub_4935C();
  }
  *__uint64_t v14 = a2;
  uint64_t v16 = (uint64_t)(v14 + 1);
LABEL_80:
  a1[3170] = v16;
  sub_49404(a1[3169], v16, (uint64_t)&v81, (v16 - a1[3169]) >> 3);
LABEL_81:
  uint64_t v64 = (void *)a1[3169];
  int v65 = (_DWORD *)*v64;
  int v66 = *(_DWORD *)(*v64 + 44);
  unsigned int v67 = v6[40];
  if (v66 == -1 || v66 == v67)
  {
    v6[40] = v67 + 1;
    uint64_t v69 = a1[3170];
    if (v69 - (uint64_t)v64 >= 9)
    {
      int v70 = sub_49460(v64, (uint64_t)&v84, (unint64_t)(v69 - (void)v64) >> 3);
      uint64_t v71 = (void *)(v69 - 8);
      if ((void *)(v69 - 8) == v70)
      {
        *int v70 = v65;
      }
      else
      {
        *int v70 = *v71;
        *uint64_t v71 = v65;
        sub_49404((uint64_t)v64, (uint64_t)(v70 + 1), (uint64_t)&v84, v70 + 1 - v64);
      }
    }
    a1[3170] -= 8;
    uint64_t v72 = sub_46CFC(a1, v65);
    __uint64_t v17 = v72;
    if (v72)
    {
      uint64_t v73 = *v6;
      a1[v73 + 3149] = v72;
      if (v73 < 0x10) {
        int v74 = v73 + 1;
      }
      else {
        int v74 = 16;
      }
      *__uint64_t v6 = v74;
    }
  }
  else
  {
    __uint64_t v17 = 0;
  }
LABEL_95:
  if (sub_44EF8(0xD8u, 7))
  {
    int v75 = sub_44F3C(0xD8u);
    __uint64_t v76 = sub_4F1D8();
    double v77 = (const char *)sub_44F70(7);
    if (v75)
    {
      printf("%lld %d AVE %s: MP: enqueue_first_pass() returns stats %p\n", v76, 216, v77, v17);
      __uint64_t v78 = sub_4F1D8();
      char v80 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: MP: enqueue_first_pass() returns stats %p", v78, 216, v80, v17);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MP: enqueue_first_pass() returns stats %p", v76, 216, v77, v17);
    }
  }
  return v17;
}

void sub_47C14(uint64_t a1)
{
  uint64_t v2 = (_DWORD *)(a1 + 25728);
  if (sub_44EF8(0xD8u, 7))
  {
    int v3 = sub_44F3C(0xD8u);
    __uint64_t v4 = sub_4F1D8();
    int v5 = (const char *)sub_44F70(7);
    if (v3)
    {
      printf("%lld %d AVE %s: MP: FinalizeSeqRcInfo()\n", v4, 216, v5);
      __uint64_t v6 = sub_4F1D8();
      uint64_t v72 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: MP: FinalizeSeqRcInfo()", v6, 216, v72);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MP: FinalizeSeqRcInfo()", v4, 216, v5);
    }
  }
  uint64_t v73 = v2;
  BOOL v7 = 0;
  uint64_t v8 = 0;
  __uint64_t v86 = 0;
  int v87 = 0;
  v88[0] = 0;
  float v9 = 0.0;
  float v10 = 0.1875;
  do
  {
    uint64_t v11 = a1 + 4 * v8;
    unsigned int v12 = *(_DWORD *)(v11 + 25600);
    if (v12)
    {
      float v13 = *(float *)(v11 + 25664) / (float)v12;
      if ((unint64_t)v7 >= v88[0])
      {
        __uint64_t v14 = (__n128 *)v86;
        uint64_t v15 = ((char *)v7 - (char *)v86) >> 4;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 60) {
          sub_4935C();
        }
        uint64_t v17 = v88[0] - (void)v86;
        if ((uint64_t)(v88[0] - (void)v86) >> 3 > v16) {
          unint64_t v16 = v17 >> 3;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          int v19 = (char *)sub_494D0((uint64_t)v88, v18);
          __uint64_t v14 = (__n128 *)v86;
          BOOL v7 = (__n128 *)v87;
        }
        else
        {
          int v19 = 0;
        }
        int v20 = (__n128 *)&v19[16 * v15];
        v20->n128_u32[0] = v12;
        v20->n128_f32[1] = v13;
        v20->n128_f32[2] = v9;
        v20->n128_f32[3] = v10;
        unint64_t v21 = v20;
        if (v7 != v14)
        {
          do
          {
            v21[-1] = v7[-1];
            --v21;
            --v7;
          }
          while (v7 != v14);
          __uint64_t v14 = (__n128 *)v86;
        }
        BOOL v7 = v20 + 1;
        __uint64_t v86 = (float *)v21;
        int v87 = (float *)&v20[1];
        v88[0] = &v19[16 * v18];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        v7->n128_u32[0] = v12;
        v7->n128_f32[1] = v13;
        v7->n128_f32[2] = v9;
        v7->n128_f32[3] = v10;
        ++v7;
      }
      int v87 = (float *)v7;
    }
    float v9 = v10;
    float v10 = v10 + 0.1875;
    ++v8;
  }
  while (v8 != 16);
  uint64_t v22 = (__n128 *)v86;
  if (v86 == (float *)v7)
  {
    uint64_t v23 = v73;
    if ((unint64_t)v7 >= v88[0])
    {
      unint64_t v24 = (uint64_t)(v88[0] - (void)v7) >> 3;
      if (v24 <= 1) {
        unint64_t v24 = 1;
      }
      if (v88[0] - (void)v7 >= 0x7FFFFFFFFFFFFFF0uLL) {
        unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v24;
      }
      uint64_t v26 = (char *)sub_494D0((uint64_t)v88, v25);
      uint64_t v27 = v86;
      uint64_t v28 = v87;
      uint64_t v30 = &v26[16 * v29];
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 4) = 1069547520;
      *((_DWORD *)v26 + 3) = 1077936128;
      BOOL v7 = (__n128 *)(v26 + 16);
      if (v28 != v27)
      {
        do
        {
          *((_OWORD *)v26 - 1) = *((_OWORD *)v28 - 1);
          v26 -= 16;
          v28 -= 4;
        }
        while (v28 != v27);
        uint64_t v27 = v86;
      }
      __uint64_t v86 = (float *)v26;
      int v87 = (float *)v7;
      v88[0] = v30;
      if (v27) {
        operator delete(v27);
      }
    }
    else
    {
      v7->n128_u32[0] = 1;
      *(unint64_t *)((char *)v7->n128_u64 + 4) = 1069547520;
      v7->n128_u32[3] = 1077936128;
      ++v7;
    }
    int v87 = (float *)v7;
    uint64_t v22 = (__n128 *)v86;
  }
  else
  {
    uint64_t v23 = v73;
  }
  unint64_t v31 = v7 - v22;
  if ((unint64_t)((char *)v7 - (char *)v22) <= 0x3F)
  {
    do
    {
      unint64_t v32 = 126 - 2 * __clz(v31);
      if (v7 == v22) {
        uint64_t v33 = 0;
      }
      else {
        uint64_t v33 = v32;
      }
      sub_49508((unsigned int *)v22, (long long *)v7, (uint64_t)&v83, v33, 1);
      uint64_t v34 = v86;
      float v35 = v86[1];
      float v36 = v86[2];
      float v37 = (float)(v36 + v35) * 0.5;
      float v38 = *v86;
      unsigned __int32 v39 = *(_DWORD *)v86 >> 1;
      v86[1] = (float)(v35 + v86[3]) * 0.5;
      v34[2] = v35;
      *(_DWORD *)uint64_t v34 = LODWORD(v38) - (LODWORD(v38) >> 1);
      uint64_t v40 = v87;
      if ((unint64_t)v87 >= v88[0])
      {
        uint64_t v41 = ((char *)v87 - (char *)v34) >> 4;
        if ((unint64_t)(v41 + 1) >> 60) {
          sub_4935C();
        }
        uint64_t v42 = v88[0] - (void)v34;
        uint64_t v43 = v42 >> 3;
        if (v42 >> 3 <= (unint64_t)(v41 + 1)) {
          uint64_t v43 = v41 + 1;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v44 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v43;
        }
        if (v44)
        {
          __uint64_t v45 = (char *)sub_494D0((uint64_t)v88, v44);
          uint64_t v40 = v87;
        }
        else
        {
          __uint64_t v45 = 0;
        }
        __uint64_t v46 = (__n128 *)&v45[16 * v41];
        v46->n128_u32[0] = v39;
        v46->n128_f32[1] = v37;
        v46->n128_f32[2] = v36;
        v46->n128_f32[3] = v35;
        int v47 = v86;
        int v48 = v46;
        if (v40 != v86)
        {
          do
          {
            v48[-1] = *(__n128 *)(v40 - 4);
            --v48;
            v40 -= 4;
          }
          while (v40 != v47);
          uint64_t v40 = v86;
        }
        BOOL v7 = v46 + 1;
        __uint64_t v86 = (float *)v48;
        int v87 = (float *)&v46[1];
        v88[0] = &v45[16 * v44];
        if (v40) {
          operator delete(v40);
        }
      }
      else
      {
        *(_DWORD *)int v87 = v39;
        v40[1] = v37;
        v40[2] = v36;
        BOOL v7 = (__n128 *)(v40 + 4);
        v40[3] = v35;
      }
      int v87 = (float *)v7;
      uint64_t v22 = (__n128 *)v86;
      unint64_t v31 = ((char *)v7 - (char *)v86) >> 4;
    }
    while ((unint64_t)((char *)v7 - (char *)v86) < 0x40);
  }
  unint64_t v49 = 126 - 2 * __clz(v31);
  if (v7 == v22) {
    uint64_t v50 = 0;
  }
  else {
    uint64_t v50 = v49;
  }
  sub_4A1A8(v22, (long long *)v7, (uint64_t)&v83, v50, 1);
  char v83 = 0;
  char v84 = 0;
  uint64_t v85 = 0;
  float v51 = *(v87 - 1);
  float v52 = v86[2];
  sub_4842C((uint64_t)&v83, 4uLL);
  uint64_t v53 = 0;
  float v54 = (float)(v51 - v52) * 0.25;
  float v55 = v52 + v54;
  float v56 = (float)(v52 + (float)(v52 + v54)) * 0.5;
  do
  {
    uint64_t v57 = (float *)((char *)v83 + v53);
    v57[1] = v56;
    v57[2] = v52;
    v57[3] = v55;
    float *v57 = 0.0;
    if (sub_44EF8(0x2Eu, 8))
    {
      if (sub_44F3C(0x2Eu))
      {
        __uint64_t v58 = sub_4F1D8();
        uint64_t v59 = (const char *)sub_44F70(8);
        printf("%lld %d AVE %s: center %f left %f right %f count %u\n", v58, 46, v59, *(float *)((char *)v83 + v53 + 4), *(float *)((char *)v83 + v53 + 8), *(float *)((char *)v83 + v53 + 12), *(_DWORD *)((char *)v83 + v53));
      }
      __uint64_t v60 = sub_4F1D8();
      __uint64_t v61 = (const char *)sub_44F70(8);
      syslog(3, "%lld %d AVE %s: center %f left %f right %f count %u", v60, 46, v61, *(float *)((char *)v83 + v53 + 4), *(float *)((char *)v83 + v53 + 8), *(float *)((char *)v83 + v53 + 12), *(_DWORD *)((char *)v83 + v53));
    }
    float v56 = v54 + v56;
    float v52 = v54 + v52;
    float v55 = v54 + v55;
    v53 += 16;
  }
  while (v53 != 64);
  __p = 0;
  char v81 = 0;
  uint64_t v82 = 0;
  int v62 = sub_4B010(&__p, v86, (uint64_t)v87, ((char *)v87 - (char *)v86) >> 4);
  sub_4845C((uint64_t)v62, (unint64_t *)&__p, (unint64_t *)&v83);
  if (__p)
  {
    char v81 = __p;
    operator delete(__p);
  }
  double v77 = 0;
  __uint64_t v78 = 0;
  uint64_t v79 = 0;
  uint64_t v63 = sub_4B010(&v77, v86, (uint64_t)v87, ((char *)v87 - (char *)v86) >> 4);
  sub_4845C((uint64_t)v63, (unint64_t *)&v77, (unint64_t *)&v83);
  if (v77)
  {
    __uint64_t v78 = v77;
    operator delete(v77);
  }
  int v74 = 0;
  int v75 = 0;
  uint64_t v76 = 0;
  uint64_t v64 = sub_4B010(&v74, v86, (uint64_t)v87, ((char *)v87 - (char *)v86) >> 4);
  sub_4845C((uint64_t)v64, (unint64_t *)&v74, (unint64_t *)&v83);
  if (v74)
  {
    int v75 = v74;
    operator delete(v74);
  }
  uint64_t v65 = 0;
  int v66 = (char *)v83;
  unsigned int v67 = v23 + 4;
  do
  {
    *(v67 - 4) = *(_DWORD *)&v66[v65];
    *v67++ = *(_DWORD *)&v66[v65 + 4];
    v65 += 16;
  }
  while (v65 != 64);
  if (sub_44EF8(0x2Eu, 8))
  {
    if (sub_44F3C(0x2Eu))
    {
      __uint64_t v68 = sub_4F1D8();
      uint64_t v69 = (const char *)sub_44F70(8);
      printf("%lld %d AVE %s: log10_cplx quantized histogram : values %f %f %f %f counts %u %u %u %u\n", v68, 46, v69, *((float *)v23 + 4), *((float *)v23 + 5), *((float *)v23 + 6), *((float *)v23 + 7), *v23, v23[1], v23[2], v23[3]);
    }
    __uint64_t v70 = sub_4F1D8();
    uint64_t v71 = (const char *)sub_44F70(8);
    syslog(3, "%lld %d AVE %s: log10_cplx quantized histogram : values %f %f %f %f counts %u %u %u %u", v70, 46, v71, *((float *)v23 + 4), *((float *)v23 + 5), *((float *)v23 + 6), *((float *)v23 + 7), *v23, v23[1], v23[2], v23[3]);
  }
  if (v83)
  {
    char v84 = v83;
    operator delete(v83);
  }
  if (v86)
  {
    int v87 = v86;
    operator delete(v86);
  }
}

void sub_4839C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  uint64_t v33 = *(void **)(v31 - 144);
  if (v33)
  {
    *(void *)(v31 - 136) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

void sub_4842C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    sub_4AF04((char **)a1, a2 - v2);
  }
}

void sub_4845C(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (sub_44EF8(0xD8u, 7))
  {
    int v5 = sub_44F3C(0xD8u);
    __uint64_t v6 = sub_4F1D8();
    BOOL v7 = (const char *)sub_44F70(7);
    if (v5)
    {
      printf("%lld %d AVE %s: MP: QuantizeData()\n", v6, 216, v7);
      __uint64_t v8 = sub_4F1D8();
      uint64_t v43 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: MP: QuantizeData()", v8, 216, v43);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MP: QuantizeData()", v6, 216, v7);
    }
  }
  unint64_t v10 = *a3;
  unint64_t v9 = a3[1];
  if (*a3 < v9)
  {
    unint64_t v11 = a2[1];
    float v12 = 0.0;
    do
    {
      unint64_t v13 = *a2;
      if (*a2 >= v11)
      {
        float v15 = 0.0;
        unsigned int v40 = (float)((float)(v12 + 0.0) + 0.5);
        *(_DWORD *)unint64_t v10 = v40;
      }
      else
      {
        float v14 = 0.0;
        float v15 = 0.0;
        do
        {
          if (sub_44EF8(0x2Eu, 8))
          {
            int v16 = sub_44F3C(0x2Eu);
            __uint64_t v17 = sub_4F1D8();
            unint64_t v18 = (const char *)sub_44F70(8);
            double v19 = *(float *)(v13 + 8);
            double v20 = *(float *)(v13 + 4);
            double v21 = *(float *)(v13 + 12);
            double v22 = *(float *)(v10 + 8);
            double v23 = *(float *)(v10 + 4);
            double v24 = *(float *)(v10 + 12);
            if (v16)
            {
              printf("%lld %d AVE %s: it %f %f %f q_it %f %f %f\n", v17, 46, v18, v19, v20, v21, v22, *(float *)(v10 + 4), v24);
              __uint64_t v17 = sub_4F1D8();
              unint64_t v18 = (const char *)sub_44F70(8);
              double v19 = *(float *)(v13 + 8);
              double v20 = *(float *)(v13 + 4);
              double v21 = *(float *)(v13 + 12);
              double v22 = *(float *)(v10 + 8);
              double v23 = *(float *)(v10 + 4);
              double v24 = *(float *)(v10 + 12);
            }
            syslog(3, "%lld %d AVE %s: it %f %f %f q_it %f %f %f", v17, 46, v18, v19, v20, v21, v22, v23, v24);
          }
          float v25 = *(float *)(v13 + 12);
          float v26 = *(float *)(v10 + 8);
          if (v25 > v26)
          {
            float v27 = *(float *)(v13 + 8);
            float v28 = *(float *)(v10 + 12);
            if (v27 < v28)
            {
              float v29 = v27 >= v26 ? *(float *)(v13 + 8) : *(float *)(v10 + 8);
              float v30 = v28 >= v25 ? *(float *)(v13 + 12) : *(float *)(v10 + 12);
              float v31 = (float)((float)(v30 - v29) * (float)*(unsigned int *)v13) / (float)(v25 - v27);
              float v32 = (float)(v29 + v30) * 0.5;
              float v15 = v15 + v31;
              float v14 = v14 + (float)(v31 * v32);
              if (sub_44EF8(0x2Eu, 8))
              {
                int v33 = sub_44F3C(0x2Eu);
                __uint64_t v34 = sub_4F1D8();
                float v35 = (const char *)sub_44F70(8);
                double v36 = v29;
                double v37 = v30;
                double v38 = v31;
                double v39 = v32;
                if (v33)
                {
                  printf("%lld %d AVE %s: left_overlap %f right_overlap %f l_count %f center %f\n", v34, 46, v35, v36, v37, v38, v39);
                  __uint64_t v34 = sub_4F1D8();
                  float v35 = (const char *)sub_44F70(8);
                }
                syslog(3, "%lld %d AVE %s: left_overlap %f right_overlap %f l_count %f center %f", v34, 46, v35, v36, v37, v38, v39);
              }
            }
          }
          v13 += 16;
          unint64_t v11 = a2[1];
        }
        while (v13 < v11);
        unsigned int v40 = (float)((float)(v12 + v15) + 0.5);
        *(_DWORD *)unint64_t v10 = v40;
        if (v15 > 0.0) {
          *(float *)(v10 + 4) = v14 / v15;
        }
      }
      float v12 = v15 - (float)v40;
      v10 += 16;
      unint64_t v9 = a3[1];
    }
    while (v10 < v9);
    unint64_t v10 = *a3;
  }
  if (v10 < v9)
  {
    do
    {
      unint64_t v41 = v10 + 16;
      if (v10 + 16 != v9)
      {
        float v42 = (float)(*(float *)(v10 + 4) + *(float *)(v10 + 20)) * 0.5;
        *(float *)(v10 + 12) = v42;
        *(float *)(v10 + 24) = v42;
      }
      v10 += 16;
    }
    while (v41 < v9);
  }
}

void sub_487D8(void *a1, uint64_t a2, FILE *a3)
{
  if (sub_44EF8(0xD8u, 7))
  {
    int v6 = sub_44F3C(0xD8u);
    __uint64_t v7 = sub_4F1D8();
    __uint64_t v8 = (const char *)sub_44F70(7);
    if (v6)
    {
      printf("%lld %d AVE %s: MP: %s\n", v7, 216, v8, "FlushStats");
      __uint64_t v9 = sub_4F1D8();
      double v23 = (const char *)sub_44F70(7);
      syslog(3, "%lld %d AVE %s: MP: %s", v9, 216, v23, "FlushStats");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MP: %s", v7, 216, v8, "FlushStats");
    }
  }
  unint64_t v10 = 0;
  while (!v10 || *((_DWORD *)v10 + 11) != -1)
  {
    uint64_t v11 = sub_282F8((uint64_t)a1);
    if (!v11) {
      break;
    }
    *(_DWORD *)(v11 + 44) = -1;
    unint64_t v10 = (const UInt8 *)sub_47610(a1, v11, 0);
    if (!sub_44EF8(0xD8u, 7)) {
      goto LABEL_19;
    }
    int v12 = sub_44F3C(0xD8u);
    __uint64_t v13 = sub_4F1D8();
    float v14 = (const char *)sub_44F70(7);
    if (v12)
    {
      if (v10) {
        int v15 = *((_DWORD *)v10 + 11);
      }
      else {
        int v15 = -1;
      }
      printf("%lld %d AVE %s: MP: %s flushes stats %p display_order %d\n", v13, 216, v14, "FlushStats", v10, v15);
      __uint64_t v13 = sub_4F1D8();
      float v14 = (const char *)sub_44F70(7);
      if (v10)
      {
LABEL_17:
        int v16 = *((_DWORD *)v10 + 11);
        goto LABEL_18;
      }
    }
    else if (v10)
    {
      goto LABEL_17;
    }
    int v16 = -1;
LABEL_18:
    syslog(3, "%lld %d AVE %s: MP: %s flushes stats %p display_order %d", v13, 216, v14, "FlushStats", v10, v16);
LABEL_19:
    if (v10 && *((_DWORD *)v10 + 11) != -1)
    {
      if (a2)
      {
        CFMutableDictionaryRef Mutable = CFDataCreateMutable(kCFAllocatorDefault, 0);
        CFDataAppendBytes(Mutable, v10, 1574);
        int v18 = VTMultiPassStorageSetDataAtTimeStamp();
        if (Mutable) {
          CFRelease(Mutable);
        }
        if (v18 && sub_44EF8(0x2Eu, 4))
        {
          int v19 = sub_44F3C(0x2Eu);
          __uint64_t v20 = sub_4F1D8();
          double v21 = (const char *)sub_44F70(4);
          if (v19)
          {
            printf("%lld %d AVE %s: MP: %s ERROR: VTMultiPassStorageSetDataAtTimeStamp failed ...\n", v20, 46, v21, "FlushStats");
            __uint64_t v22 = sub_4F1D8();
            double v24 = (const char *)sub_44F70(4);
            syslog(3, "%lld %d AVE %s: MP: %s ERROR: VTMultiPassStorageSetDataAtTimeStamp failed ...", v22, 46, v24, "FlushStats");
          }
          else
          {
            syslog(3, "%lld %d AVE %s: MP: %s ERROR: VTMultiPassStorageSetDataAtTimeStamp failed ...", v20, 46, v21, "FlushStats");
          }
        }
      }
      if (a3)
      {
        fseeko(a3, 1574 * *((unsigned int *)v10 + 11) + 264, 0);
        fwrite(v10, 1uLL, 0x626uLL, a3);
      }
    }
  }
  sub_2DCDC((unint64_t)a1);
  sub_47C14((uint64_t)a1);
  if (a3)
  {
    fseek(a3, 0, 0);
    fwrite(a1 + 3187, 1uLL, 0x108uLL, a3);
  }
}

void sub_48B0C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    int v6 = (char *)a1[3];
    a1[4] = v4;
    __uint64_t v7 = (void *)a1[1];
    __uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    __uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)__uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __uint64_t v34 = (char *)sub_492C4(v5, v33);
      float v35 = &v34[8 * (v33 >> 2)];
      double v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      __uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        __uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      __uint64_t v9 = (char *)a1[1];
    }
    __uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_48E24(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_48F3C((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    __uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    __uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __uint64_t v34 = (char *)sub_492C4((uint64_t)(a1 + 3), v46);
      float v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      __uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        __uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        float v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)float v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        __uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  float v56 = a1 + 3;
  *(void *)&long long v54 = sub_492C4((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  sub_4905C(&v54, &v53);
  float v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_49174((uint64_t)&v54, v27);
  }
  float v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_48DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_48E24(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  int v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    __uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      int v19 = (char *)sub_492C4(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      int v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        int v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      float v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        int v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        int v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      int v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)int v6 = *a2;
  a1[2] += 8;
}

void sub_48F3C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    __uint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)sub_492C4(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void sub_4905C(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)sub_492C4(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void sub_49174(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)sub_492C4(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void sub_49290()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  int v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void *sub_492C4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_49290();
  }
  return operator new(8 * a2);
}

uint64_t sub_492FC(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x200) {
    a2 = 1;
  }
  if (v2 < 0x400) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

void sub_4935C()
{
}

void sub_49374(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_493D0(exception, a1);
}

void sub_493BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_493D0(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

uint64_t sub_49404(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v5 = (void *)(result + 8 * v4);
    uint64_t v6 = *v5;
    uint64_t v9 = *(void *)(a2 - 8);
    uint64_t v7 = (void *)(a2 - 8);
    uint64_t v8 = v9;
    unsigned int v10 = *(_DWORD *)(v9 + 44);
    if (*(_DWORD *)(*v5 + 44) > v10)
    {
      do
      {
        unint64_t v11 = v5;
        *uint64_t v7 = v6;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v5 = (void *)(result + 8 * v4);
        uint64_t v6 = *v5;
        uint64_t v7 = v11;
      }
      while (*(_DWORD *)(*v5 + 44) > v10);
      *unint64_t v11 = v8;
    }
  }
  return result;
}

void *sub_49460(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = &a1[v3];
    uint64_t v9 = v6[1];
    uint64_t v7 = v6 + 1;
    uint64_t v8 = v9;
    uint64_t v10 = (2 * v3) | 1;
    uint64_t v11 = 2 * v3 + 2;
    if (v11 < a3 && *(_DWORD *)(v8 + 44) > *(_DWORD *)(v7[1] + 44))
    {
      uint64_t v8 = v7[1];
      ++v7;
      uint64_t v10 = v11;
    }
    *a1 = v8;
    a1 = v7;
    uint64_t v3 = v10;
  }
  while (v10 <= v5);
  return v7;
}

void *sub_494D0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_49290();
  }
  return operator new(16 * a2);
}

void sub_49508(unsigned int *a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unsigned int v22 = *((_DWORD *)a2 - 4);
          uint64_t v21 = a2 - 1;
          if (v22 > *v11)
          {
            long long v30 = *(_OWORD *)v11;
            *(_OWORD *)uint64_t v11 = *v21;
            long long *v21 = v30;
          }
          break;
        case 3uLL:
          sub_49984((long long *)v11, v11 + 4, (unsigned int *)a2 - 4);
          break;
        case 4uLL:
          sub_49D74((long long *)v11, v11 + 4, v11 + 8, a2 - 1);
          break;
        case 5uLL:
          sub_49E18((long long *)v11, v11 + 4, v11 + 8, (__n128 *)v11 + 3, (__n128 *)a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (unsigned int *)a2)
      {
        sub_49EE8((long long *)v11, a2, a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[4 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      sub_49984((long long *)v11, &v11[4 * (v15 >> 1)], (unsigned int *)a2 - 4);
      sub_49984((long long *)v11 + 1, v17 - 4, (unsigned int *)a2 - 8);
      sub_49984((long long *)v11 + 2, &v11[4 * v16 + 4], (unsigned int *)a2 - 12);
      sub_49984((long long *)v17 - 1, v17, &v11[4 * v16 + 4]);
      long long v29 = *(_OWORD *)v11;
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)uint64_t v17 = v29;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_49984((long long *)&v11[4 * (v15 >> 1)], v11, (unsigned int *)a2 - 4);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (*(v11 - 4) <= *v11)
    {
      uint64_t v11 = sub_49A40(v11, (unsigned int *)a2);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v18 = sub_49B00((long long *)v11, a2);
    if ((v19 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v20 = sub_49BC8((uint64_t)v11, (__n128 *)v18);
    uint64_t v11 = (unsigned int *)(v18 + 1);
    if (sub_49BC8((uint64_t)(v18 + 1), (__n128 *)a2))
    {
      a4 = -v13;
      a2 = v18;
      if (v20) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v20)
    {
LABEL_16:
      sub_49508(a1, v18, a3, -v13, a5 & 1);
      uint64_t v11 = (unsigned int *)(v18 + 1);
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_49900(v11, a2);
  }
  else if (v11 != (unsigned int *)a2)
  {
    uint64_t v23 = (long long *)(v11 + 4);
    while (v23 != a2)
    {
      uint64_t v24 = v23;
      uint64_t v25 = *((void *)a1 + 2);
      if (v25 > *a1)
      {
        uint64_t v26 = *((void *)a1 + 3);
        float v27 = v24;
        do
        {
          *float v27 = *(v27 - 1);
          unsigned int v28 = *((_DWORD *)v27-- - 8);
        }
        while (v25 > v28);
        *(void *)float v27 = v25;
        *((void *)v27 + 1) = v26;
      }
      uint64_t v23 = v24 + 1;
      a1 = (unsigned int *)v24;
    }
  }
}

  uint64_t v11 = (__n128 *)(a2 - 1);
  uint64_t v12 = a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = v12;
    uint64_t v14 = v13;
    unint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = ((char *)a2 - (char *)v12) >> 4;
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (*((float *)a2 - 3) < v12->n128_f32[1])
          {
            uint64_t v23 = *v12;
            *uint64_t v12 = *v11;
            *uint64_t v11 = v23;
          }
          break;
        case 3uLL:
          sub_4A668((float *)v12, (float *)&v12[1], (float *)a2 - 4);
          break;
        case 4uLL:
          sub_4AAB0((float *)v12, (uint64_t)&v12[1], (uint64_t)&v12[2], (uint64_t)(a2 - 1));
          break;
        case 5uLL:
          sub_4AB54((float *)v12, v12 + 1, v12 + 2, v12 + 3, (__n128 *)a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 383) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != (__n128 *)a2)
      {
        sub_4AC24((uint64_t)v12, a2, a2, a3);
      }
      return;
    }
    uint64_t v17 = v16 >> 1;
    uint64_t v18 = (float *)&v12[v16 >> 1];
    if ((unint64_t)v15 >= 0x801)
    {
      sub_4A668((float *)v12, (float *)&v12[v16 >> 1], (float *)a2 - 4);
      sub_4A668((float *)&v12[1], v18 - 4, (float *)a2 - 8);
      sub_4A668((float *)&v12[2], (float *)&v12[v17 + 1], (float *)a2 - 12);
      sub_4A668(v18 - 4, v18, (float *)&v12[v17 + 1]);
      unsigned int v22 = *v12;
      *uint64_t v12 = *(__n128 *)v18;
      *(__n128 *)uint64_t v18 = v22;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_4A668((float *)&v12[v16 >> 1], (float *)v12, (float *)a2 - 4);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (v12[-1].n128_f32[1] >= v12->n128_f32[1])
    {
      uint64_t v12 = (__n128 *)sub_4A724((float *)v12, (float *)a2);
      goto LABEL_18;
    }
LABEL_13:
    char v19 = (__n128 *)sub_4A80C((long long *)v12, (float *)a2);
    if ((v20 & 1) == 0) {
      goto LABEL_16;
    }
    uint64_t v21 = sub_4A8F8(v12, v19);
    uint64_t v12 = v19 + 1;
    if (sub_4A8F8(v19 + 1, (__n128 *)a2))
    {
      a4 = -v14;
      a2 = (long long *)v19;
      if (v21) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v21)
    {
LABEL_16:
      sub_4A1A8(a1, v19, a3, -v14, a5 & 1);
      uint64_t v12 = v19 + 1;
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_4A578(v12, a2);
  }
  else
  {
    sub_4A604((uint64_t)v12, (uint64_t)a2);
  }
}

void *sub_49900(void *result, void *a2)
{
  if (result != a2)
  {
    unint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        char v5 = v2;
        uint64_t v6 = v4[2];
        if (v6 > *(_DWORD *)v4)
        {
          uint64_t v7 = v4[3];
          uint64_t v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8) {
              break;
            }
            unsigned int v9 = *(_DWORD *)((char *)result + v8 - 16);
            v8 -= 16;
            if (v6 <= v9)
            {
              uint64_t v10 = (void *)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          uint64_t v10 = result;
LABEL_10:
          *uint64_t v10 = v6;
          v10[1] = v7;
        }
        unint64_t v2 = v5 + 2;
        v3 += 16;
        uint64_t v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_49984(long long *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3 = *a2;
  unsigned int v4 = *a3;
  if (*a2 > *(_DWORD *)a1)
  {
    if (v4 > v3)
    {
      long long v5 = *a1;
      *a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    long long v8 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v8;
    if (*a3 <= *a2) {
      return 1;
    }
    long long v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v9;
    return 2;
  }
  if (v4 > v3)
  {
    long long v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v6;
    if (*a2 <= *(_DWORD *)a1) {
      return 1;
    }
    long long v7 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

unsigned int *sub_49A40(unsigned int *a1, unsigned int *a2)
{
  long long v2 = *(_OWORD *)a1;
  unsigned int v3 = *(_OWORD *)a1;
  if (v3 <= *(a2 - 4))
  {
    long long v6 = a1 + 4;
    do
    {
      unsigned int v4 = v6;
      if (v6 >= a2) {
        break;
      }
      v6 += 4;
    }
    while (v3 <= *v4);
  }
  else
  {
    unsigned int v4 = a1;
    do
    {
      unsigned int v5 = v4[4];
      v4 += 4;
    }
    while (v3 <= v5);
  }
  if (v4 < a2)
  {
    do
    {
      unsigned int v7 = *(a2 - 4);
      a2 -= 4;
    }
    while (v3 > v7);
  }
  while (v4 < a2)
  {
    long long v11 = *(_OWORD *)v4;
    *(_OWORD *)unsigned int v4 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v11;
    do
    {
      unsigned int v8 = v4[4];
      v4 += 4;
    }
    while (v3 <= v8);
    do
    {
      unsigned int v9 = *(a2 - 4);
      a2 -= 4;
    }
    while (v3 > v9);
  }
  if (v4 - 4 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v4 - 1);
  }
  *((_OWORD *)v4 - 1) = v2;
  return v4;
}

long long *sub_49B00(long long *a1, long long *a2)
{
  uint64_t v2 = 0;
  long long v3 = *a1;
  unsigned int v4 = *a1;
  do
    unsigned int v5 = a1[++v2];
  while (v4 < v5);
  long long v6 = &a1[v2];
  unsigned int v7 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v6 >= a2) {
        break;
      }
      unsigned int v9 = *((_DWORD *)a2-- - 4);
    }
    while (v4 >= v9);
  }
  else
  {
    do
      unsigned int v8 = *((_DWORD *)a2-- - 4);
    while (v4 >= v8);
  }
  if (v6 < a2)
  {
    uint64_t v10 = &a1[v2];
    long long v11 = a2;
    do
    {
      long long v12 = *v10;
      *uint64_t v10 = *v11;
      *long long v11 = v12;
      do
        unsigned int v13 = *((_DWORD *)v10++ + 4);
      while (v4 < v13);
      do
        unsigned int v14 = *((_DWORD *)v11-- - 4);
      while (v4 >= v14);
    }
    while (v10 < v11);
    unsigned int v7 = v10 - 1;
  }
  if (v7 != a1) {
    *a1 = *v7;
  }
  *unsigned int v7 = v3;
  return v7;
}

BOOL sub_49BC8(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      long long v6 = (long long *)&a2[-1];
      if (a2[-1].n128_u32[0] > *(_DWORD *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *long long v6 = v7;
      }
      return result;
    case 3:
      sub_49984((long long *)a1, (unsigned int *)(a1 + 16), (unsigned int *)&a2[-1]);
      return 1;
    case 4:
      sub_49D74((long long *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32), (__n128 *)a2[-1].n128_u64);
      return 1;
    case 5:
      sub_49E18((long long *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32), (__n128 *)(a1 + 48), a2 - 1);
      return 1;
    default:
      unsigned int v8 = (unsigned int *)(a1 + 32);
      sub_49984((long long *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32));
      unsigned int v9 = (unsigned int *)(a1 + 48);
      if ((__n128 *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    long long v12 = *(_OWORD *)v9;
    unsigned int v13 = *(_OWORD *)v9;
    if (v13 > *v8)
    {
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unsigned int v15 = *(_DWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v13 <= v15)
        {
          unint64_t v16 = (_OWORD *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unint64_t v16 = (_OWORD *)a1;
LABEL_12:
      *unint64_t v16 = v12;
      if (++v11 == 8) {
        return v9 + 4 == (unsigned int *)a2;
      }
    }
    unsigned int v8 = v9;
    v10 += 16;
    v9 += 4;
    if (v9 == (unsigned int *)a2) {
      return 1;
    }
  }
}

__n128 sub_49D74(long long *a1, unsigned int *a2, unsigned int *a3, _OWORD *a4)
{
  sub_49984(a1, a2, a3);
  if (*(_DWORD *)a4 > *a3)
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 > *a2)
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 > *(_DWORD *)a1)
      {
        __n128 result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 sub_49E18(long long *a1, unsigned int *a2, unsigned int *a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = sub_49D74(a1, a2, a3, a4).n128_u64[0];
  if (a5->n128_u32[0] > a4->n128_u32[0])
  {
    __n128 result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (a4->n128_u32[0] > *a3)
    {
      __n128 result = *(__n128 *)a3;
      *(__n128 *)a3 = *a4;
      *a4 = result;
      if (*a3 > *a2)
      {
        __n128 result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (*a2 > *(_DWORD *)a1)
        {
          __n128 result = (__n128)*a1;
          *a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

long long *sub_49EE8(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    long long v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      long long v12 = &a1[v10];
      do
      {
        sub_4A0E8((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    unsigned int v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if (*(_DWORD *)v14 > *(_DWORD *)a1)
        {
          long long v15 = *v14;
          *uint64_t v14 = *a1;
          *a1 = v15;
          sub_4A0E8((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      unsigned int v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v16 = (unint64_t)v8 >> 4;
      do
      {
        uint64_t v17 = 0;
        long long v30 = *a1;
        uint64_t v18 = a1;
        do
        {
          uint64_t v19 = (uint64_t)&v18[v17 + 1];
          uint64_t v20 = (2 * v17) | 1;
          uint64_t v21 = 2 * v17 + 2;
          if (v21 < v16 && *(_DWORD *)v19 > *(_DWORD *)(v19 + 16))
          {
            v19 += 16;
            uint64_t v20 = v21;
          }
          _OWORD *v18 = *(_OWORD *)v19;
          uint64_t v18 = (_OWORD *)v19;
          uint64_t v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if ((long long *)v19 == --v6)
        {
          *(_OWORD *)uint64_t v19 = v30;
        }
        else
        {
          *(_OWORD *)uint64_t v19 = *v6;
          *long long v6 = v30;
          uint64_t v22 = v19 - (void)a1 + 16;
          if (v22 >= 17)
          {
            unint64_t v23 = (((unint64_t)v22 >> 4) - 2) >> 1;
            uint64_t v24 = &a1[v23];
            uint64_t v25 = *(void *)v19;
            if (*(_DWORD *)v24 > *(void *)v19)
            {
              uint64_t v26 = *(void *)(v19 + 8);
              do
              {
                float v27 = v24;
                *(_OWORD *)uint64_t v19 = *v24;
                if (!v23) {
                  break;
                }
                unint64_t v23 = (v23 - 1) >> 1;
                uint64_t v24 = &a1[v23];
                uint64_t v19 = (uint64_t)v27;
              }
              while (*(_DWORD *)v24 > v25);
              *(void *)float v27 = v25;
              *((void *)v27 + 1) = v26;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_4A0E8(uint64_t result, uint64_t a2, uint64_t a3, long long *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (long long *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      uint64_t v10 = *(void *)v8;
      if (v9 < a3 && v10 > *((void *)v8 + 2))
      {
        uint64_t v10 = *((void *)v8++ + 2);
        uint64_t v7 = v9;
      }
      long long v11 = *a4;
      unsigned int v12 = *a4;
      if (v12 >= v10)
      {
        do
        {
          unsigned int v13 = v8;
          *a4 = *v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v14 = (2 * v7) | 1;
          uint64_t v8 = (long long *)(result + 16 * v14);
          uint64_t v15 = 2 * v7 + 2;
          uint64_t v16 = *(void *)v8;
          if (v15 < a3 && v16 > *((void *)v8 + 2))
          {
            uint64_t v16 = *((void *)v8++ + 2);
            uint64_t v14 = v15;
          }
          a4 = v13;
          uint64_t v7 = v14;
        }
        while (v12 >= v16);
        *unsigned int v13 = v11;
      }
    }
  }
  return result;
}

void sub_4A1A8(__n128 *a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
void *sub_4A578(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = (float *)result;
      do
      {
        char v5 = v2;
        uint64_t v6 = *((void *)v4 + 2);
        if (*((float *)&v6 + 1) < v4[1])
        {
          uint64_t v7 = *((void *)v4 + 3);
          uint64_t v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8) {
              break;
            }
            float v9 = *(float *)((char *)result + v8 - 12);
            v8 -= 16;
            if (*((float *)&v6 + 1) >= v9)
            {
              uint64_t v10 = (void *)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          uint64_t v10 = result;
LABEL_10:
          *uint64_t v10 = v6;
          v10[1] = v7;
        }
        uint64_t v2 = v5 + 2;
        v3 += 16;
        uint64_t v4 = (float *)v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_4A604(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 16;
    while (v2 != a2)
    {
      uint64_t v3 = v2;
      uint64_t v4 = *(void *)(result + 16);
      if (*((float *)&v4 + 1) < *(float *)(result + 4))
      {
        uint64_t v5 = *(void *)(result + 24);
        uint64_t v6 = v3;
        do
        {
          *(_OWORD *)uint64_t v6 = *(_OWORD *)(v6 - 16);
          float v7 = *(float *)(v6 - 28);
          v6 -= 16;
        }
        while (*((float *)&v4 + 1) < v7);
        *(void *)uint64_t v6 = v4;
        *(void *)(v6 + 8) = v5;
      }
      uint64_t v2 = v3 + 16;
      __n128 result = v3;
    }
  }
  return result;
}

uint64_t sub_4A668(float *a1, float *a2, float *a3)
{
  float v3 = a2[1];
  float v4 = a3[1];
  if (v3 < a1[1])
  {
    if (v4 < v3)
    {
      long long v5 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    long long v8 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v8;
    if (a3[1] >= a2[1]) {
      return 1;
    }
    long long v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    long long v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v6;
    if (a2[1] >= a1[1]) {
      return 1;
    }
    long long v7 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

unint64_t sub_4A724(float *a1, float *a2)
{
  long long v2 = *(_OWORD *)a1;
  LODWORD(v3) = HIDWORD(*(void *)a1);
  if (v3 >= *(a2 - 3))
  {
    long long v7 = a1 + 4;
    do
    {
      unint64_t v5 = (unint64_t)v7;
      if (v7 >= a2) {
        break;
      }
      float v8 = v7[1];
      v7 += 4;
    }
    while (v3 >= v8);
  }
  else
  {
    float v4 = a1;
    do
    {
      unint64_t v5 = (unint64_t)(v4 + 4);
      float v6 = v4[5];
      v4 += 4;
    }
    while (v3 >= v6);
  }
  if (v5 >= (unint64_t)a2)
  {
    long long v9 = a2;
  }
  else
  {
    do
    {
      long long v9 = a2 - 4;
      float v10 = *(a2 - 3);
      a2 -= 4;
    }
    while (v3 < v10);
  }
  while (v5 < (unint64_t)v9)
  {
    long long v14 = *(_OWORD *)v5;
    *(_OWORD *)unint64_t v5 = *(_OWORD *)v9;
    *(_OWORD *)long long v9 = v14;
    do
    {
      float v11 = *(float *)(v5 + 20);
      v5 += 16;
    }
    while (v3 >= v11);
    do
    {
      float v12 = *(v9 - 3);
      v9 -= 4;
    }
    while (v3 < v12);
  }
  if ((float *)(v5 - 16) != a1) {
    *(_OWORD *)a1 = *(_OWORD *)(v5 - 16);
  }
  *(_OWORD *)(v5 - 16) = v2;
  return v5;
}

long long *sub_4A80C(long long *a1, float *a2)
{
  uint64_t v2 = 0;
  long long v3 = *a1;
  LODWORD(v4) = HIDWORD(*(void *)a1);
  do
    float v5 = *((float *)&a1[++v2] + 1);
  while (v5 < v4);
  float v6 = (float *)&a1[v2];
  long long v7 = &a1[v2 - 1];
  if (v2 == 1)
  {
    while (v6 < a2)
    {
      float v8 = a2 - 4;
      float v10 = *(a2 - 3);
      a2 -= 4;
      if (v10 < v4) {
        goto LABEL_9;
      }
    }
    float v8 = a2;
  }
  else
  {
    do
    {
      float v8 = a2 - 4;
      float v9 = *(a2 - 3);
      a2 -= 4;
    }
    while (v9 >= v4);
  }
LABEL_9:
  if (v6 < v8)
  {
    unint64_t v11 = (unint64_t)v6;
    float v12 = v8;
    do
    {
      long long v13 = *(_OWORD *)v11;
      *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
      *(_OWORD *)float v12 = v13;
      do
      {
        float v14 = *(float *)(v11 + 20);
        v11 += 16;
      }
      while (v14 < v4);
      do
      {
        float v15 = *(v12 - 3);
        v12 -= 4;
      }
      while (v15 >= v4);
    }
    while (v11 < (unint64_t)v12);
    long long v7 = (long long *)(v11 - 16);
  }
  if (v7 != a1) {
    *a1 = *v7;
  }
  *long long v7 = v3;
  return v7;
}

BOOL sub_4A8F8(__n128 *a1, __n128 *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (a2[-1].n128_f32[1] < a1->n128_f32[1])
      {
        __n128 v6 = *a1;
        *a1 = a2[-1];
        a2[-1] = v6;
      }
      return result;
    case 3:
      sub_4A668((float *)a1, (float *)&a1[1], (float *)&a2[-1]);
      return 1;
    case 4:
      sub_4AAB0((float *)a1, (uint64_t)&a1[1], (uint64_t)&a1[2], (uint64_t)&a2[-1]);
      return 1;
    case 5:
      sub_4AB54((float *)a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      long long v7 = a1 + 2;
      sub_4A668((float *)a1, (float *)&a1[1], (float *)&a1[2]);
      float v8 = a1 + 3;
      if (&a1[3] == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    __n128 v11 = *v8;
    LODWORD(v12) = HIDWORD(v8->n128_u64[0]);
    if (v12 < v7->n128_f32[1])
    {
      uint64_t v13 = v9;
      while (1)
      {
        *(__n128 *)((char *)a1 + v13 + 48) = *(__n128 *)((char *)a1 + v13 + 32);
        if (v13 == -32) {
          break;
        }
        float v14 = *(float *)((char *)&a1[1].n128_f32[1] + v13);
        v13 -= 16;
        if (v12 >= v14)
        {
          float v15 = (__n128 *)((char *)a1 + v13 + 48);
          goto LABEL_12;
        }
      }
      float v15 = a1;
LABEL_12:
      *float v15 = v11;
      if (++v10 == 8) {
        return &v8[1] == a2;
      }
    }
    long long v7 = v8;
    v9 += 16;
    if (++v8 == a2) {
      return 1;
    }
  }
}

__n128 sub_4AAB0(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_4A668(a1, (float *)a2, (float *)a3);
  result.n128_u32[0] = *(_DWORD *)(a4 + 4);
  if (result.n128_f32[0] < *(float *)(a3 + 4))
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    result.n128_u32[0] = *(_DWORD *)(a3 + 4);
    if (result.n128_f32[0] < *(float *)(a2 + 4))
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      result.n128_u32[0] = *(_DWORD *)(a2 + 4);
      if (result.n128_f32[0] < a1[1])
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 sub_4AB54(float *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  __n128 result = sub_4AAB0(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
  result.n128_u32[0] = a5->n128_u32[1];
  if (result.n128_f32[0] < a4->n128_f32[1])
  {
    __n128 result = *a4;
    *a4 = *a5;
    *a5 = result;
    result.n128_u32[0] = a4->n128_u32[1];
    if (result.n128_f32[0] < a3->n128_f32[1])
    {
      __n128 result = *a3;
      *a3 = *a4;
      *a4 = result;
      result.n128_u32[0] = a3->n128_u32[1];
      if (result.n128_f32[0] < a2->n128_f32[1])
      {
        __n128 result = *a2;
        *a2 = *a3;
        *a3 = result;
        result.n128_u32[0] = a2->n128_u32[1];
        if (result.n128_f32[0] < a1[1])
        {
          __n128 result = *(__n128 *)a1;
          *(__n128 *)a1 = *a2;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

long long *sub_4AC24(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  if ((long long *)a1 != a2)
  {
    __n128 v6 = a2;
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) >> 4;
    if ((uint64_t)a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      float v12 = (long long *)(a1 + 16 * v10);
      do
      {
        sub_4ADD8(a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      float v14 = v6;
      do
      {
        if (*((float *)v14 + 1) < *(float *)(a1 + 4))
        {
          long long v15 = *v14;
          *float v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          sub_4ADD8(a1, a4, v9, (long long *)a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v16 = (unint64_t)v8 >> 4;
      do
      {
        uint64_t v17 = 0;
        long long v24 = *(_OWORD *)a1;
        uint64_t v18 = a1;
        do
        {
          uint64_t v19 = (_OWORD *)v18;
          v18 += 16 * v17 + 16;
          uint64_t v20 = 2 * v17;
          uint64_t v17 = (2 * v17) | 1;
          uint64_t v21 = v20 + 2;
          if (v21 < v16 && *(float *)(v18 + 4) < *(float *)(v18 + 20))
          {
            v18 += 16;
            uint64_t v17 = v21;
          }
          _OWORD *v19 = *(_OWORD *)v18;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if ((long long *)v18 == --v6)
        {
          *(_OWORD *)uint64_t v18 = v24;
        }
        else
        {
          *(_OWORD *)uint64_t v18 = *v6;
          *__n128 v6 = v24;
          sub_4AEA0(a1, v18 + 16, a4, (v18 + 16 - a1) >> 4);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_4ADD8(uint64_t result, uint64_t a2, uint64_t a3, long long *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = result + 16 * v7;
      uint64_t v9 = v6 + 2;
      if (v9 < a3 && *(float *)(v8 + 4) < *(float *)(v8 + 20))
      {
        v8 += 16;
        uint64_t v7 = v9;
      }
      long long v10 = *a4;
      LODWORD(v11) = HIDWORD(*(void *)a4);
      if (*(float *)(v8 + 4) >= v11)
      {
        do
        {
          float v12 = (long long *)v8;
          *a4 = *(_OWORD *)v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v13 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          uint64_t v8 = result + 16 * v7;
          uint64_t v14 = v13 + 2;
          if (v14 < a3 && *(float *)(v8 + 4) < *(float *)(v8 + 20))
          {
            v8 += 16;
            uint64_t v7 = v14;
          }
          a4 = v12;
        }
        while (*(float *)(v8 + 4) >= v11);
        *float v12 = v10;
      }
    }
  }
  return result;
}

uint64_t sub_4AEA0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v5 = result + 16 * v4;
    uint64_t v7 = (_OWORD *)(a2 - 16);
    uint64_t v6 = *(void *)(a2 - 16);
    if (*(float *)(v5 + 4) < *((float *)&v6 + 1))
    {
      uint64_t v8 = *(void *)(a2 - 8);
      do
      {
        uint64_t v9 = (void *)v5;
        *uint64_t v7 = *(_OWORD *)v5;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v5 = result + 16 * v4;
        uint64_t v7 = v9;
      }
      while (*(float *)(v5 + 4) < *((float *)&v6 + 1));
      *uint64_t v9 = v6;
      v9[1] = v8;
    }
  }
  return result;
}

void sub_4AF04(char **a1, unint64_t a2)
{
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[1];
  if (a2 <= (v5 - v6) >> 4)
  {
    a1[1] = &v6[16 * a2];
  }
  else
  {
    uint64_t v7 = *a1;
    uint64_t v8 = v6 - *a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      sub_4935C();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - v7;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_494D0(v4, v12);
      uint64_t v7 = *a1;
      uint64_t v6 = a1[1];
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[16 * v10];
    long long v15 = &v13[16 * v12];
    uint64_t v16 = &v14[16 * a2];
    if (v6 != v7)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
        v14 -= 16;
        v6 -= 16;
      }
      while (v6 != v7);
      uint64_t v7 = *a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void *sub_4B010(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = sub_4B08C(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_4B070(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_4B08C(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_4935C();
  }
  __n128 result = (char *)sub_494D0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

char *sub_4B0D0(int a1)
{
  uint64_t v1 = 0;
  while (*(_DWORD *)&aV024[v1] != a1)
  {
    v1 += 44;
    if (v1 == 3740) {
      return 0;
    }
  }
  return &aV024[v1];
}

uint64_t sub_4B104()
{
  return 85;
}

uint64_t sub_4B10C(int a1, unsigned int *a2, int a3, int a4)
{
  int v12 = 0;
  uint64_t v4 = *a2;
  if ((int)v4 < 1)
  {
    int v6 = 23;
  }
  else
  {
    uint64_t v5 = a2 + 2;
    int v6 = 23;
    do
    {
      int v7 = v5[2];
      if (v7)
      {
        if (*v5 == a1)
        {
          uint64_t v8 = *(v5 - 1);
          if ((v8 - 1) <= 2)
          {
            if (!*((unsigned char *)&v12 + v8))
            {
              v6 += 3;
              *((unsigned char *)&v12 + v8) = 1;
            }
            int v6 = v6 + (v7 >> 3) - 2;
          }
        }
      }
      v5 += 4;
      --v4;
    }
    while (v4);
  }
  if (a3) {
    int v9 = a3 + 1;
  }
  else {
    int v9 = 0;
  }
  int v10 = a4 + 5;
  if (!a4) {
    int v10 = 0;
  }
  return (v10 + v9 + v6);
}

uint64_t sub_4B1A4(int a1, int a2, uint64_t a3, int *a4, uint64_t a5)
{
  if ((a2 - 1) > 2) {
    return 4294966295;
  }
  *(unsigned char *)a5 = a2 - 97;
  int v6 = *a4;
  if (*a4 < 1) {
    return 4294966295;
  }
  uint64_t v9 = 0;
  int v10 = 0;
  uint64_t v36 = a3 + 4;
  uint64_t result = 3;
  int v12 = "%lld %d AVE %s: %p: 0x%x";
  uint64_t v39 = a5;
  int v37 = a1;
  int v38 = a2;
  do
  {
    uint64_t v13 = &a4[4 * v9];
    unsigned int v14 = v13[4];
    if (v14)
    {
      long long v15 = v13 + 2;
      if (v13[2] == a1)
      {
        uint64_t v16 = v12;
        uint64_t v17 = v13 + 1;
        if (v13[1] == a2)
        {
          int v43 = v10;
          uint64_t v18 = v13 + 3;
          unsigned int v19 = (v14 >> 3) - 4;
          *(_WORD *)(a5 + (int)result) = bswap32(v19) >> 16;
          uint64_t v41 = (int)result + 2;
          unsigned __int16 v42 = v19;
          unint64_t v20 = (unsigned __int16)v19;
          memcpy((void *)(a5 + v41), (const void *)(v36 + (v13[3] >> 3)), (unsigned __int16)v19);
          if (sub_44EF8(0xD4u, 8))
          {
            int v21 = sub_44F3C(0xD4u);
            __uint64_t v40 = sub_4F1D8();
            __n128 v22 = (const char *)sub_44F70(8);
            int v23 = *v15;
            if (v21)
            {
              printf("%lld %d AVE %s: type %d layer id %d\n", v40, 212, v22, *v17, v23);
              __uint64_t v24 = sub_4F1D8();
              uint64_t v25 = (const char *)sub_44F70(8);
              syslog(3, "%lld %d AVE %s: type %d layer id %d", v24, 212, v25, *v17, *v15);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: type %d layer id %d", v40, 212, v22, *v17, v23);
            }
          }
          int v12 = v16;
          if (v20)
          {
            for (unint64_t i = 0; i < v20; i += 2)
            {
              if (sub_44EF8(0xD4u, 8))
              {
                int v27 = sub_44F3C(0xD4u);
                __uint64_t v28 = sub_4F1D8();
                long long v29 = (const char *)sub_44F70(8);
                int v30 = *v18 >> 3;
                uint64_t v31 = a3 + v30;
                long long v32 = (const void *)(a3 + i + v30);
                uint64_t v33 = *(unsigned __int16 *)(v31 + i);
                if (v27)
                {
                  printf("%lld %d AVE %s: %p: 0x%x\n", v28, 212, v29, v32, v33);
                  __uint64_t v34 = sub_4F1D8();
                  float v35 = sub_44F70(8);
                  syslog(3, v12, v34, 212, v35, a3 + i + (*v18 >> 3), *(unsigned __int16 *)(a3 + (*v18 >> 3) + i));
                }
                else
                {
                  syslog(3, v12, v28, 212, v29, v32, v33);
                }
              }
            }
          }
          uint64_t result = v41 + v42;
          int v10 = v43 + 1;
          int v6 = *a4;
          a5 = v39;
          a1 = v37;
          a2 = v38;
        }
        else
        {
          int v12 = v16;
        }
      }
    }
    ++v9;
  }
  while (v9 < v6);
  if (!v10) {
    return 4294966295;
  }
  *(_WORD *)(a5 + 1) = BYTE1(v10) | (unsigned __int16)((_WORD)v10 << 8);
  return result;
}

uint64_t sub_4B46C(int a1, uint64_t a2, unsigned int *a3, uint64_t a4, int a5, const void *a6, int a7, uint64_t a8, uint64_t a9, int a10)
{
  *(unsigned char *)a9 = 1;
  *(unsigned char *)(a9 + 1) = (*(unsigned char *)(a8 + 24) << 6) | (32 * (*(_DWORD *)(a8 + 28) != 0)) | *(_DWORD *)(a8 + 32);
  sub_4CFBC(a8, a9 + 2, 4);
  sub_4D010(a8, (unsigned char *)(a9 + 6), 6);
  *(unsigned char *)(a9 + 12) = *(_DWORD *)(a8 + 84);
  *(_WORD *)(a9 + 13) = 240;
  *(unsigned char *)(a9 + 15) = -4;
  *(unsigned char *)(a9 + 16) = *(unsigned char *)(a8 + 572) | 0xFC;
  *(unsigned char *)(a9 + 17) = *(unsigned char *)(a8 + 616) | 0xF8;
  *(unsigned char *)(a9 + 18) = *(unsigned char *)(a8 + 620) | 0xF8;
  *(_WORD *)(a9 + 19) = 0;
  *(unsigned char *)(a9 + 21) = 11;
  char v18 = sub_4B754(a3, a1);
  char v19 = a4 != 0;
  if (a6) {
    ++v19;
  }
  *(unsigned char *)(a9 + 22) = v19 + v18;
  int v20 = sub_4B1A4(a1, 1, a2, (int *)a3, a9 + 23);
  if (v20 < 1) {
    return 4294966296;
  }
  uint64_t v21 = (v20 + 23);
  int v22 = sub_4B1A4(a1, 2, a2, (int *)a3, a9 + v21);
  if (v22 < 1) {
    return 4294966296;
  }
  uint64_t v23 = (v22 + v21);
  int v24 = sub_4B1A4(a1, 3, a2, (int *)a3, a9 + v23);
  if (v24 < 1) {
    return 4294966296;
  }
  unint64_t v25 = v24 + (unint64_t)v23;
  if (a4)
  {
    *(unsigned char *)(a9 + v25) = -89;
    uint64_t v26 = a9 + v25;
    *(_WORD *)(v26 + 1) = 256;
    int v27 = a5 - 4;
    *(_WORD *)(v26 + 3) = BYTE1(v27) | (unsigned __int16)((_WORD)v27 << 8);
    unint64_t v25 = (v25 + 5);
    memcpy((void *)(a9 + v25), (const void *)(a4 + 4), v27);
    LODWORD(v25) = v25 + v27;
  }
  if (a6)
  {
    uint64_t v28 = a9 + (int)v25;
    *(unsigned char *)uint64_t v28 = -89;
    *(_WORD *)(v28 + 1) = 256;
    *(_WORD *)(v28 + 3) = BYTE1(a7) | (unsigned __int16)((_WORD)a7 << 8);
    uint64_t v29 = (int)v25 + 5;
    memcpy((void *)(a9 + v29), a6, a7);
    LODWORD(v25) = v29 + a7;
  }
  if ((int)v25 <= a10) {
    return 0;
  }
  if (sub_44EF8(0xD4u, 4))
  {
    int v30 = sub_44F3C(0xD4u);
    __uint64_t v31 = sub_4F1D8();
    long long v32 = (const char *)sub_44F70(4);
    if (v30)
    {
      printf("%lld %d AVE %s: %s:%d offset > num %d > %d\n", v31, 212, v32, "AVE_PS_Compose_hvcC", 634, v25, a10);
      __uint64_t v31 = sub_4F1D8();
      sub_44F70(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d offset > num %d > %d", v31);
  }
  return 4294966277;
}

uint64_t sub_4B754(unsigned int *a1, int a2)
{
  if (a1)
  {
    uint64_t v4 = *a1;
    if ((int)v4 < 1)
    {
      return 0;
    }
    else
    {
      LODWORD(result) = 0;
      int v6 = (int *)(a1 + 2);
      do
      {
        int v7 = *v6;
        v6 += 4;
        if (v7 == a2) {
          uint64_t result = (result + 1);
        }
        else {
          uint64_t result = result;
        }
        --v4;
      }
      while (v4);
    }
  }
  else
  {
    if (sub_44EF8(0xD4u, 4))
    {
      int v8 = sub_44F3C(0xD4u);
      __uint64_t v9 = sub_4F1D8();
      int v10 = (const char *)sub_44F70(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d\n", v9, 212, v10, "AVE_PS_CalcNumOfNALU", 369, "pInfo != __null", 0, a2);
        __uint64_t v9 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d", v9, 212);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_4B898(int a1, unsigned int *a2)
{
  int v8 = 0;
  uint64_t v2 = *a2;
  if ((int)v2 < 1) {
    return 6;
  }
  long long v3 = a2 + 2;
  uint64_t v4 = 6;
  do
  {
    int v5 = v3[2];
    if (v5)
    {
      if (*v3 == a1)
      {
        uint64_t v6 = *(v3 - 1);
        if ((v6 & 0xFFFFFFFE) == 2)
        {
          if (!*((unsigned char *)&v8 + v6))
          {
            LODWORD(v4) = v4 + 3;
            *((unsigned char *)&v8 + v6) = 1;
          }
          uint64_t v4 = (v4 + (v5 >> 3) - 2);
        }
      }
    }
    v3 += 4;
    --v2;
  }
  while (v2);
  return v4;
}

uint64_t sub_4B918(int a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, int a6)
{
  *(_DWORD *)a5 = -67047423;
  *(unsigned char *)(a5 + 4) = -53;
  *(unsigned char *)(a5 + 5) = sub_4B754(a3, a1);
  int v11 = sub_4B1A4(a1, 2, a2, (int *)a3, a5 + 6);
  if (v11 < 1) {
    return 4294966296;
  }
  uint64_t v12 = (v11 + 6);
  int v13 = sub_4B1A4(a1, 3, a2, (int *)a3, a5 + v12);
  if (v13 < 1) {
    return 4294966296;
  }
  if (v13 + (int)v12 <= a6) {
    return 0;
  }
  return 4294966277;
}

uint64_t sub_4B9D8(uint64_t a1, const void *a2, unsigned int *a3, const void *a4, uint64_t a5, const void *a6, int a7, const void *a8, __CFData **a9)
{
  if (!a2 || !a3 || !a8 || !a9 || (a4 == 0) != (a5 == 0))
  {
    if (sub_44EF8(0xD4u, 4))
    {
      int v15 = sub_44F3C(0xD4u);
      __uint64_t v16 = sub_4F1D8();
      uint64_t v17 = (const char *)sub_44F70(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %d %p %p %p %d %p %p\n", v16, 212, v17, "AVE_PS_Make_hvcC", 961, "pInData != __null && pInfo != __null && pSPS != __null && ppCFData != __null && !((pSEIData == __null) ^ (SEISize == 0))", a1, a2, a3, a4, a5, a8, a9);
        __uint64_t v16 = sub_4F1D8();
        int v66 = a8;
        __uint64_t v68 = a9;
        int v62 = a4;
        uint64_t v64 = a5;
        __uint64_t v58 = a2;
        __uint64_t v60 = a3;
        uint64_t v56 = a1;
        uint64_t v53 = sub_44F70(4);
      }
      else
      {
        int v66 = a8;
        __uint64_t v68 = a9;
        int v62 = a4;
        uint64_t v64 = a5;
        __uint64_t v58 = a2;
        __uint64_t v60 = a3;
        uint64_t v56 = a1;
        uint64_t v53 = (void *)v17;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %d %p %p %p %d %p %p", v16, 212, v53, "AVE_PS_Make_hvcC", 961, "pInData != __null && pInfo != __null && pSPS != __null && ppCFData != __null && !((pSEIData == __null) ^ (SEISize == 0))", v56, v58, v60, v62, v64, v66, v68);
    }
    return 4294966296;
  }
  *a9 = 0;
  uint64_t v20 = sub_4B10C(a1, a3, a5, a7);
  uint64_t v21 = v20;
  if ((int)v20 <= 0)
  {
    if (sub_44EF8(0xD4u, 4))
    {
      uint64_t v33 = a1;
      int v34 = sub_44F3C(0xD4u);
      __uint64_t v35 = sub_4F1D8();
      uint64_t v36 = (const char *)sub_44F70(4);
      if (v34)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to calculate the size %d %p %p %p %d %p %d\n", v35, 212, v36, "AVE_PS_Make_hvcC", 968, "size > 0", v33, a2, a3, a4, a5, a8, v21);
        __uint64_t v35 = sub_4F1D8();
        unsigned int v67 = a8;
        uint64_t v69 = v21;
        uint64_t v63 = a4;
        uint64_t v65 = a5;
        uint64_t v59 = a2;
        __uint64_t v61 = a3;
        uint64_t v57 = v33;
        long long v55 = sub_44F70(4);
      }
      else
      {
        unsigned int v67 = a8;
        uint64_t v69 = v21;
        uint64_t v63 = a4;
        uint64_t v65 = a5;
        uint64_t v59 = a2;
        __uint64_t v61 = a3;
        uint64_t v57 = v33;
        long long v55 = (void *)v36;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to calculate the size %d %p %p %p %d %p %d", v35, 212, v55, "AVE_PS_Make_hvcC", 968, "size > 0", v57, v59, v61, v63, v65, v67, v69);
    }
    return 4294966296;
  }
  uint64_t v72 = a1;
  CFIndex v22 = v20;
  CFMutableDictionaryRef Mutable = CFDataCreateMutable(0, v20);
  if (Mutable)
  {
    int v70 = v21;
    int v24 = Mutable;
    CFDataSetLength(Mutable, v22);
    uint64_t v71 = v24;
    MutableBytePtr = CFDataGetMutableBytePtr(v24);
    if (MutableBytePtr)
    {
      uint64_t v26 = MutableBytePtr;
      uint64_t v27 = sub_4B46C(v72, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, (uint64_t)a8, (uint64_t)MutableBytePtr, v70);
      if (sub_44EF8(0xD4u, 8))
      {
        int v28 = sub_44F3C(0xD4u);
        __uint64_t v29 = sub_4F1D8();
        int v30 = (const char *)sub_44F70(8);
        if (v28)
        {
          printf("%lld %d AVE %s: hvcC data:\n", v29, 212, v30);
          __uint64_t v31 = sub_4F1D8();
          long long v54 = (const char *)sub_44F70(8);
          syslog(3, "%lld %d AVE %s: hvcC data:", v31, 212, v54);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: hvcC data:", v29, 212, v30);
        }
      }
      uint64_t v47 = 0;
      do
      {
        if (sub_44EF8(0xD4u, 8))
        {
          int v48 = sub_44F3C(0xD4u);
          __uint64_t v49 = sub_4F1D8();
          uint64_t v50 = (const char *)sub_44F70(8);
          int v51 = *(unsigned __int16 *)&v26[v47];
          if (v48)
          {
            printf("%lld %d AVE %s: %p: 0x%x\n", v49, 212, v50, &v26[v47], v51);
            __uint64_t v49 = sub_4F1D8();
            uint64_t v50 = (const char *)sub_44F70(8);
            int v51 = *(unsigned __int16 *)&v26[v47];
          }
          syslog(3, "%lld %d AVE %s: %p: 0x%x", v49, 212, v50, &v26[v47], v51);
        }
        v47 += 2;
      }
      while (v70 > (int)v47);
      uint64_t v52 = v24;
      *a9 = v24;
      if (!v27) {
        return v27;
      }
    }
    else if (sub_44EF8(0xD4u, 4))
    {
      int v42 = sub_44F3C(0xD4u);
      __uint64_t v43 = sub_4F1D8();
      unint64_t v44 = (const char *)sub_44F70(4);
      if (v42)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to get memory address %d %p %p %p %d %p %p %d\n", v43, 212, v44, "AVE_PS_Make_hvcC", 980, "pData != __null", v72, a2, a3, a4, a5, a8, v24, v70);
        __uint64_t v45 = sub_4F1D8();
        unint64_t v46 = (const char *)sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get memory address %d %p %p %p %d %p %p %d", v45, 212, v46, "AVE_PS_Make_hvcC", 980, "pData != __null", v72, a2, a3, a4, a5, a8, v71, v70);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get memory address %d %p %p %p %d %p %p %d", v43, 212, v44, "AVE_PS_Make_hvcC", 980, "pData != __null", v72, a2, a3, a4, a5, a8, v24, v70);
      }
      uint64_t v52 = v71;
      uint64_t v27 = 4294966293;
    }
    else
    {
      uint64_t v27 = 4294966293;
      uint64_t v52 = v24;
    }
    CFRelease(v52);
    return v27;
  }
  if (sub_44EF8(0xD4u, 4))
  {
    int v37 = sub_44F3C(0xD4u);
    __uint64_t v38 = sub_4F1D8();
    uint64_t v39 = (const char *)sub_44F70(4);
    if (v37)
    {
      printf("%lld %d AVE %s: %s:%d %s | failed to allocate memory %d %p %p %p %d %p %d\n", v38, 212, v39, "AVE_PS_Make_hvcC", 973, "pCFData != __null", v72, a2, a3, a4, a5, a8, v21);
      __uint64_t v40 = sub_4F1D8();
      uint64_t v41 = sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to allocate memory %d %p %p %p %d %p %d", v40, 212, v41, "AVE_PS_Make_hvcC", 973, "pCFData != __null", v72);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to allocate memory %d %p %p %p %d %p %d", v38, 212, v39, "AVE_PS_Make_hvcC", 973, "pCFData != __null", v72);
    }
  }
  return 4294966293;
}

uint64_t sub_4C09C(uint64_t a1, const void *a2, unsigned int *a3, const void *a4, uint64_t a5, const void *a6, int a7, const void *a8, __CFDictionary **a9)
{
  int v10 = a5;
  unint64_t v44 = 0;
  if (!a2 || !a3 || !a8 || !a9 || (a4 == 0) != (a5 == 0))
  {
    if (sub_44EF8(0xD4u, 4))
    {
      int v15 = sub_44F3C(0xD4u);
      __uint64_t v16 = sub_4F1D8();
      uint64_t v17 = (const char *)sub_44F70(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %d %p %p %p %d %p %p\n", v16, 212, v17, "AVE_PS_Make_hvcC_Dict", 1039, "pInData != __null && pInfo != __null && pSPS != __null && ppCFDict != __null && !((pSEIData == __null) ^ (SEISize == 0))", a1, a2, a3, a4, v10, a8, a9);
        __uint64_t v18 = sub_4F1D8();
        uint64_t v41 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %d %p %p %p %d %p %p", v18, 212, v41, "AVE_PS_Make_hvcC_Dict", 1039, "pInData != __null && pInfo != __null && pSPS != __null && ppCFDict != __null && !((pSEIData == __null) ^ (SEISize == 0))", a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %d %p %p %p %d %p %p", v16, 212, v17, "AVE_PS_Make_hvcC_Dict", 1039, "pInData != __null && pInfo != __null && pSPS != __null && ppCFDict != __null && !((pSEIData == __null) ^ (SEISize == 0))", a1);
      }
    }
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 4294966296;
    goto LABEL_29;
  }
  *a9 = 0;
  int v19 = sub_4B9D8(a1, a2, a3, a4, a5, a6, a7, a8, &v44);
  if (v19)
  {
    int v20 = v19;
    if (sub_44EF8(0xD4u, 4))
    {
      int v21 = sub_44F3C(0xD4u);
      __uint64_t v22 = sub_4F1D8();
      uint64_t v23 = (const char *)sub_44F70(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to compose %d %p %p %p %d %p %p %d\n", v22, 212, v23, "AVE_PS_Make_hvcC_Dict", 1047, "ret == 0", a1, a2, a3, a4, v10, a8, a9, v20);
        int v24 = a2;
        __uint64_t v25 = sub_4F1D8();
        int v42 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to compose %d %p %p %p %d %p %p %d", v25, 212, v42, "AVE_PS_Make_hvcC_Dict", 1047, "ret == 0", a1, v24);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to compose %d %p %p %p %d %p %p %d", v22, 212, v23, "AVE_PS_Make_hvcC_Dict", 1047, "ret == 0", a1, a2);
      }
    }
  }
  else
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      uint64_t v26 = Mutable;
      CFDictionaryAddValue(Mutable, @"hvcC", v44);
      int v30 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (v30)
      {
        uint64_t v27 = v30;
        CFDictionaryAddValue(v30, kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms, v26);
        CFDictionaryAddValue(v27, kCMFormatDescriptionExtension_FormatName, @"HEVC");
        char v31 = 0;
        uint64_t v28 = 0;
        *a9 = v27;
        goto LABEL_30;
      }
      if (sub_44EF8(0xD4u, 4))
      {
        int v35 = sub_44F3C(0xD4u);
        __uint64_t v36 = sub_4F1D8();
        int v37 = (const char *)sub_44F70(4);
        if (v35)
        {
          printf("%lld %d AVE %s: %s:%d %s | failed to create dictionary %d %p %p %p %d %p %p\n", v36, 212, v37, "AVE_PS_Make_hvcC_Dict", 1061, "pDict != __null", a1, a2, a3, a4, v10, a8, v26);
          __uint64_t v38 = sub_4F1D8();
          __uint64_t v43 = sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create dictionary %d %p %p %p %d %p %p", v38, 212, v43, "AVE_PS_Make_hvcC_Dict", 1061, "pDict != __null", a1);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create dictionary %d %p %p %p %d %p %p", v36, 212, v37, "AVE_PS_Make_hvcC_Dict", 1061, "pDict != __null", a1);
        }
      }
      goto LABEL_28;
    }
    if (sub_44EF8(0xD4u, 4))
    {
      int v32 = sub_44F3C(0xD4u);
      __uint64_t v33 = sub_4F1D8();
      int v34 = (const char *)sub_44F70(4);
      if (v32)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to create data dictionary %d %p %p %p %d %p %p\n", v33, 212, v34, "AVE_PS_Make_hvcC_Dict", 1053, "pDataDict != __null", a1, a2, a3, a4, v10, a8, v44);
        __uint64_t v33 = sub_4F1D8();
        int v34 = (const char *)sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create data dictionary %d %p %p %p %d %p %p", v33, 212, v34, "AVE_PS_Make_hvcC_Dict", 1053, "pDataDict != __null", a1);
    }
  }
  uint64_t v26 = 0;
LABEL_28:
  uint64_t v27 = 0;
  uint64_t v28 = 4294966293;
LABEL_29:
  char v31 = 1;
LABEL_30:
  if (v44)
  {
    CFRelease(v44);
    unint64_t v44 = 0;
  }
  if (v26) {
    CFRelease(v26);
  }
  char v39 = v31 ^ 1;
  if (!v27) {
    char v39 = 1;
  }
  if ((v39 & 1) == 0) {
    CFRelease(v27);
  }
  return v28;
}

uint64_t sub_4C68C(uint64_t a1, const void *a2, unsigned int *a3, const void *a4, __CFData **a5)
{
  if (!a2 || !a3 || !a4 || !a5)
  {
    if (sub_44EF8(0xD4u, 4))
    {
      int v21 = sub_44F3C(0xD4u);
      __uint64_t v22 = sub_4F1D8();
      uint64_t v23 = (const char *)sub_44F70(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %d %p %p %p %p\n", v22, 212, v23, "AVE_PS_Make_lhvC", 1118, "pInData != __null && pInfo != __null && pSPS != __null && ppCFData != __null", a1, a2, a3, a4, a5);
        __uint64_t v22 = sub_4F1D8();
        uint64_t v52 = a4;
        long long v54 = a5;
        int v48 = a2;
        uint64_t v50 = a3;
        uint64_t v46 = a1;
        int v42 = sub_44F70(4);
      }
      else
      {
        uint64_t v52 = a4;
        long long v54 = a5;
        int v48 = a2;
        uint64_t v50 = a3;
        uint64_t v46 = a1;
        int v42 = (void *)v23;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %d %p %p %p %p", v22, 212, v42, "AVE_PS_Make_lhvC", 1118, "pInData != __null && pInfo != __null && pSPS != __null && ppCFData != __null", v46, v48, v50, v52, v54);
    }
    return 4294966296;
  }
  *a5 = 0;
  uint64_t v10 = sub_4B898(a1, a3);
  if ((int)v10 <= 0)
  {
    if (sub_44EF8(0xD4u, 4))
    {
      int v24 = sub_44F3C(0xD4u);
      __uint64_t v25 = sub_4F1D8();
      uint64_t v26 = (const char *)sub_44F70(4);
      if (v24)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to calculate the size %d %p %p %p %d\n", v25, 212, v26, "AVE_PS_Make_lhvC", 1125, "size > 0", a1, a2, a3, a4, v10);
        __uint64_t v25 = sub_4F1D8();
        uint64_t v53 = a4;
        uint64_t v55 = v10;
        __uint64_t v49 = a2;
        int v51 = a3;
        uint64_t v47 = a1;
        __uint64_t v43 = sub_44F70(4);
      }
      else
      {
        uint64_t v53 = a4;
        uint64_t v55 = v10;
        __uint64_t v49 = a2;
        int v51 = a3;
        uint64_t v47 = a1;
        __uint64_t v43 = (void *)v26;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to calculate the size %d %p %p %p %d", v25, 212, v43, "AVE_PS_Make_lhvC", 1125, "size > 0", v47, v49, v51, v53, v55);
    }
    return 4294966296;
  }
  CFMutableDictionaryRef Mutable = CFDataCreateMutable(0, v10);
  if (Mutable)
  {
    uint64_t v12 = Mutable;
    CFDataSetLength(Mutable, v10);
    MutableBytePtr = CFDataGetMutableBytePtr(v12);
    if (MutableBytePtr)
    {
      int v15 = MutableBytePtr;
      uint64_t v56 = v12;
      uint64_t v16 = sub_4B918(a1, (uint64_t)a2, a3, v14, (uint64_t)MutableBytePtr, v10);
      if (sub_44EF8(0xD4u, 8))
      {
        int v17 = sub_44F3C(0xD4u);
        __uint64_t v18 = sub_4F1D8();
        int v19 = (const char *)sub_44F70(8);
        if (v17)
        {
          printf("%lld %d AVE %s: lhvC data:\n", v18, 212, v19);
          __uint64_t v20 = sub_4F1D8();
          uint64_t v41 = (const char *)sub_44F70(8);
          syslog(3, "%lld %d AVE %s: lhvC data:", v20, 212, v41);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: lhvC data:", v18, 212, v19);
        }
      }
      uint64_t v36 = 0;
      do
      {
        if (sub_44EF8(0xD4u, 8))
        {
          int v37 = sub_44F3C(0xD4u);
          __uint64_t v38 = sub_4F1D8();
          char v39 = (const char *)sub_44F70(8);
          int v40 = *(unsigned __int16 *)&v15[v36];
          if (v37)
          {
            printf("%lld %d AVE %s: %p: 0x%x\n", v38, 212, v39, &v15[v36], v40);
            __uint64_t v38 = sub_4F1D8();
            char v39 = (const char *)sub_44F70(8);
            int v40 = *(unsigned __int16 *)&v15[v36];
          }
          syslog(3, "%lld %d AVE %s: %p: 0x%x", v38, 212, v39, &v15[v36], v40);
        }
        v36 += 2;
      }
      while ((int)v10 > (int)v36);
      uint64_t v12 = v56;
      *a5 = v56;
      if (!v16) {
        return v16;
      }
    }
    else
    {
      if (sub_44EF8(0xD4u, 4))
      {
        int v31 = sub_44F3C(0xD4u);
        __uint64_t v32 = sub_4F1D8();
        __uint64_t v33 = (const char *)sub_44F70(4);
        if (v31)
        {
          printf("%lld %d AVE %s: %s:%d %s | failed to get memory address %d %p %p %p %p %d\n", v32, 212, v33, "AVE_PS_Make_lhvC", 1137, "pData != __null", a1, a2, a3, a4, v12, v10);
          __uint64_t v34 = sub_4F1D8();
          __uint64_t v45 = sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get memory address %d %p %p %p %p %d", v34, 212, v45, "AVE_PS_Make_lhvC", 1137, "pData != __null");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get memory address %d %p %p %p %p %d", v32, 212, v33, "AVE_PS_Make_lhvC", 1137, "pData != __null");
        }
      }
      uint64_t v16 = 4294966293;
    }
    CFRelease(v12);
    return v16;
  }
  if (sub_44EF8(0xD4u, 4))
  {
    int v27 = sub_44F3C(0xD4u);
    __uint64_t v28 = sub_4F1D8();
    __uint64_t v29 = (const char *)sub_44F70(4);
    if (v27)
    {
      printf("%lld %d AVE %s: %s:%d %s | failed to allocate memory %d %p %p %p %d\n", v28, 212, v29, "AVE_PS_Make_lhvC", 1130, "pCFData != __null", a1, a2, a3, a4, v10);
      __uint64_t v30 = sub_4F1D8();
      unint64_t v44 = sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to allocate memory %d %p %p %p %d", v30, 212, v44, "AVE_PS_Make_lhvC", 1130);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to allocate memory %d %p %p %p %d", v28, 212, v29, "AVE_PS_Make_lhvC", 1130);
    }
  }
  return 4294966293;
}

uint64_t sub_4CC34(uint64_t a1, const void *a2, unsigned int *a3, const void *a4, __CFData *a5)
{
  int v40 = 0;
  if (a2 && a3 && a4 && a5)
  {
    uint64_t v10 = sub_4C68C(a1, a2, a3, a4, &v40);
    if (v10)
    {
      uint64_t v11 = v10;
      if (!sub_44EF8(0xD4u, 4))
      {
LABEL_18:
        uint64_t v23 = 4294966293;
        goto LABEL_19;
      }
      int v12 = sub_44F3C(0xD4u);
      __uint64_t v13 = sub_4F1D8();
      uint64_t v14 = (const char *)sub_44F70(4);
      if (!v12)
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to compose %d %p %p %p %p %d", v13, 212, v14, "AVE_PS_Add_lhvC_Dict", 1270, "ret == 0");
        goto LABEL_18;
      }
      uint64_t v15 = a1;
      printf("%lld %d AVE %s: %s:%d %s | failed to compose %d %p %p %p %p %d\n", v13, 212, v14, "AVE_PS_Add_lhvC_Dict", 1270, "ret == 0", a1, a2, a3, a4, a5, v11);
      __uint64_t v16 = sub_4F1D8();
      __uint64_t v38 = a5;
      uint64_t v39 = v11;
      uint64_t v36 = a3;
      int v37 = a4;
      uint64_t v34 = v15;
      int v35 = a2;
      uint64_t v32 = 1270;
      __uint64_t v33 = "ret == 0";
      __uint64_t v30 = sub_44F70(4);
      int v17 = "%lld %d AVE %s: %s:%d %s | failed to compose %d %p %p %p %p %d";
    }
    else
    {
      CFStringRef Value = (__CFDictionary *)CFDictionaryGetValue(a5, kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms);
      if (Value)
      {
        CFDictionaryAddValue(Value, @"lhvC", v40);
        uint64_t v23 = 0;
        goto LABEL_19;
      }
      if (!sub_44EF8(0xD4u, 4)) {
        goto LABEL_18;
      }
      int v25 = sub_44F3C(0xD4u);
      __uint64_t v26 = sub_4F1D8();
      int v27 = (const char *)sub_44F70(4);
      if (!v25)
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get data dictionary %d %p %p %p %p", v26, 212, v27, "AVE_PS_Add_lhvC_Dict", 1276);
        goto LABEL_18;
      }
      uint64_t v28 = a1;
      printf("%lld %d AVE %s: %s:%d %s | failed to get data dictionary %d %p %p %p %p\n", v26, 212, v27, "AVE_PS_Add_lhvC_Dict", 1276, "pDataDict != __null", a1, a2, a3, a4, v40);
      __uint64_t v16 = sub_4F1D8();
      __uint64_t v29 = sub_44F70(4);
      int v37 = a4;
      __uint64_t v38 = v40;
      int v35 = a2;
      uint64_t v36 = a3;
      __uint64_t v33 = "pDataDict != __null";
      uint64_t v34 = v28;
      uint64_t v32 = 1276;
      __uint64_t v30 = v29;
      int v17 = "%lld %d AVE %s: %s:%d %s | failed to get data dictionary %d %p %p %p %p";
    }
    syslog(3, v17, v16, 212, v30, "AVE_PS_Add_lhvC_Dict", v32, v33, v34, v35, v36, v37, v38, v39);
    goto LABEL_18;
  }
  if (sub_44EF8(0xD4u, 4))
  {
    int v18 = sub_44F3C(0xD4u);
    __uint64_t v19 = sub_4F1D8();
    __uint64_t v20 = (const char *)sub_44F70(4);
    if (v18)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameters %d %p %p %p %p\n", v19, 212, v20, "AVE_PS_Add_lhvC_Dict", 1265, "pInData != __null && pInfo != __null && pSPS != __null && pCFDict != __null", a1, a2, a3, a4, a5);
      __uint64_t v21 = sub_4F1D8();
      int v31 = sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %d %p %p %p %p", v21, 212, v31, "AVE_PS_Add_lhvC_Dict", 1265);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %d %p %p %p %p", v19, 212, v20, "AVE_PS_Add_lhvC_Dict", 1265);
    }
  }
  uint64_t v23 = 4294966296;
LABEL_19:
  if (v40) {
    CFRelease(v40);
  }
  return v23;
}

uint64_t sub_4CFBC(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 < 4) {
    return 4294966277;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  do
  {
    *(unsigned char *)(a2 + v5) |= *(unsigned char *)(a1 + 36 + v4) << (v4 & 7 ^ 7);
    if ((v4 & 7) == 7) {
      ++v5;
    }
    ++v4;
  }
  while (v4 != 32);
  return 4;
}

uint64_t sub_4D010(uint64_t a1, unsigned char *a2, int a3)
{
  if (a3 < 6) {
    return 4294966277;
  }
  bzero(a2, a3);
  char v7 = (*(unsigned char *)(a1 + 69) << 6) | (*(unsigned char *)(a1 + 68) << 7) | (32 * *(unsigned char *)(a1 + 70)) | (16 * *(unsigned char *)(a1 + 71));
  *a2 = v7;
  int v8 = *(_DWORD *)(a1 + 32);
  if (v8 == 4
    || v8 == 5
    || *(unsigned char *)(a1 + 40)
    || v8 == 6
    || *(unsigned char *)(a1 + 41)
    || v8 == 7
    || *(unsigned char *)(a1 + 42)
    || v8 == 8
    || *(unsigned char *)(a1 + 43)
    || v8 == 9
    || *(unsigned char *)(a1 + 44)
    || v8 == 10
    || *(unsigned char *)(a1 + 45)
    || v8 == 11
    || *(unsigned char *)(a1 + 46)
    || *(unsigned char *)(a1 + 47))
  {
    *a2 = (8 * *(unsigned char *)(a1 + 72)) | (4 * *(unsigned char *)(a1 + 73)) | (2 * *(unsigned char *)(a1 + 74)) | *(unsigned char *)(a1 + 75) | v7;
    v6.i32[0] = *(_DWORD *)(a1 + 76);
    uint16x4_t v9 = vshl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v6), (uint16x4_t)0x4000500060007);
    int v10 = v9.i32[0] | v9.i32[1] | ((*(void *)&v9 | HIDWORD(*(void *)&v9)) >> 16) | (8 * *(unsigned __int8 *)(a1 + 80));
  }
  else
  {
    if (v8 != 2 && !*(unsigned char *)(a1 + 38)) {
      return 5;
    }
    LOBYTE(v10) = 16 * *(unsigned char *)(a1 + 79);
  }
  a2[1] = v10;
  return 5;
}

uint64_t sub_4D174(unsigned __int8 *a1, int a2, int a3, int *a4)
{
  if (a2 < 1)
  {
    int v4 = 0;
  }
  else
  {
    int v4 = 0;
    int v5 = 0;
    int v6 = -3;
    uint64_t v7 = a2;
    do
    {
      int v8 = *a1++;
      int v5 = v8 | (v5 << 8);
      if (v5 == 1)
      {
        if (v4 < a3) {
          int v9 = 2;
        }
        else {
          int v9 = 3;
        }
        int v10 = &a4[4 * v4];
        v10[1] = v9;
        v10[2] = v4 % a3;
        v10[3] = v6;
        if (v4 >= 1) {
          a4[4 * (v4 - 1) + 4] = v6 - a4[4 * (v4 - 1) + 3];
        }
        ++v4;
      }
      ++v6;
      --v7;
    }
    while (v7);
    if (v4 >= 1) {
      a4[4 * v4 + 4] = a2 - a4[4 * v4 + 3];
    }
  }
  *a4 = v4;
  return 0;
}

uint64_t sub_4D210(unsigned __int8 *a1, int a2, int a3, int *a4)
{
  if (a2 < 1)
  {
    int v4 = 0;
  }
  else
  {
    int v4 = 0;
    int v5 = 0;
    int v6 = -3;
    uint64_t v7 = a2;
    do
    {
      int v8 = *a1++;
      int v5 = v8 | (v5 << 8);
      if (v5 == 1)
      {
        if (v4)
        {
          if (v4 <= a3) {
            int v9 = 2;
          }
          else {
            int v9 = 3;
          }
          int v10 = (v4 - 1) % a3;
        }
        else
        {
          int v10 = 0;
          int v9 = 1;
        }
        uint64_t v11 = &a4[4 * v4];
        v11[1] = v9;
        v11[2] = v10;
        v11[3] = v6;
        if (v4 >= 1) {
          a4[4 * (v4 - 1) + 4] = v6 - a4[4 * (v4 - 1) + 3];
        }
        ++v4;
      }
      ++v6;
      --v7;
    }
    while (v7);
    if (v4 >= 1) {
      a4[4 * v4 + 4] = a2 - a4[4 * v4 + 3];
    }
  }
  *a4 = v4;
  return 0;
}

uint64_t sub_4D2C0(unsigned __int8 *a1, int a2, int a3, int a4, int *a5)
{
  if (a3 == 1)
  {
    sub_4D210(a1, a2, a4, a5);
    return 0;
  }
  if (!a3)
  {
    sub_4D174(a1, a2, a4, a5);
    return 0;
  }
  return 4294966295;
}

uint64_t sub_4D308(char *a1, int a2, __CFArray *a3)
{
  if (a1 && a2 >= 1 && a3)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 8 * a2;
    while (1)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (!Mutable) {
        break;
      }
      int v9 = Mutable;
      sub_385A8(@"ReferenceFrameNumDriver", *(_DWORD *)&a1[v6], Mutable);
      sub_385A8(@"ReferenceRVRAIndex", *(_DWORD *)&a1[v6 + 4], v9);
      CFArrayAppendValue(a3, v9);
      CFRelease(v9);
      v6 += 8;
      if (v7 == v6) {
        return 0;
      }
    }
    if (sub_44EF8(0xE1u, 4))
    {
      int v15 = sub_44F3C(0xE1u);
      __uint64_t v16 = sub_4F1D8();
      int v17 = (const char *)sub_44F70(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create CFDictionary %p %d %p\n", v16, 225, v17, "AVE_VCP_Ref_MakeArray", 73, "pDict != __null", a1, a2, a3);
        __uint64_t v18 = sub_4F1D8();
        __uint64_t v20 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDictionary %p %d %p", v18, 225, v20);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDictionary %p %d %p", v16, 225, v17);
      }
    }
    return 4294966293;
  }
  else
  {
    if (sub_44EF8(0xE1u, 4))
    {
      int v11 = sub_44F3C(0xE1u);
      __uint64_t v12 = sub_4F1D8();
      __uint64_t v13 = (const char *)sub_44F70(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p\n", v12, 225, v13, "AVE_VCP_Ref_MakeArray", 65, "pInfo != __null && iNum > 0 && pArray != __null", a1, a2, a3);
        __uint64_t v14 = sub_4F1D8();
        __uint64_t v19 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v14, 225, v19);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v12, 225, v13);
      }
    }
    return 4294966295;
  }
}

uint64_t sub_4D5BC(char *a1, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result = vsnprintf(a1, a2, a3, &a9);
  if (a1)
  {
    if ((int)result >= a2)
    {
      uint64_t result = a2 - 1;
      a1[result] = 0;
    }
  }
  return result;
}

char *sub_4D614(char *a1, const char *a2, int a3)
{
  uint64_t result = strncpy(a1, a2, a3);
  result[a3 - 1] = 0;
  return result;
}

double sub_4D644(uint64_t a1)
{
  *(void *)a1 = off_8F148;
  *(void *)(a1 + 32) = a1 + 40;
  *(unsigned char *)(a1 + 4136) = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = xmmword_886D0;
  *(_DWORD *)(a1 + 24) = 0xFFFF;
  return result;
}

void sub_4D690()
{
}

uint64_t sub_4D6A4(uint64_t a1, char a2)
{
  int v2 = *(_DWORD *)(a1 + 24);
  int v3 = a2 & 1 | (2 * v2);
  *(_DWORD *)(a1 + 24) = v3;
  int v4 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v4;
  if (v4 != 8) {
    return 0;
  }
  int v5 = v2 & 0x7FFFFE;
  if (*(unsigned char *)(a1 + 4136)) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t v7 = *(int *)(a1 + 12);
    if ((int)v7 >= *(_DWORD *)(a1 + 20)) {
      return 4294966277;
    }
    uint64_t v8 = *(void *)(a1 + 32);
    *(_DWORD *)(a1 + 12) = v7 + 1;
    *(unsigned char *)(v8 + v7) = 3;
    int v3 = *(_DWORD *)(a1 + 24) | 0x300;
    *(_DWORD *)(a1 + 24) = v3;
    *(_DWORD *)(a1 + 16) += 8;
  }
  uint64_t v9 = *(int *)(a1 + 12);
  if ((int)v9 >= *(_DWORD *)(a1 + 20)) {
    return 4294966277;
  }
  uint64_t v10 = 0;
  uint64_t v11 = *(void *)(a1 + 32);
  *(_DWORD *)(a1 + 12) = v9 + 1;
  *(unsigned char *)(v11 + v9) = v3;
  *(_DWORD *)(a1 + 8) = 0;
  return v10;
}

uint64_t sub_4D758(uint64_t a1, unsigned int a2, int a3)
{
  if (!a3) {
    return 0;
  }
  int v3 = *(_DWORD *)(a1 + 8);
  while (1)
  {
    int v4 = 8 - v3;
    if (a3 < 8 - v3) {
      int v4 = a3;
    }
    v3 += v4;
    *(_DWORD *)(a1 + 8) = v3;
    a3 -= v4;
    int v5 = (a2 >> a3) & ~(-1 << v4) | (*(_DWORD *)(a1 + 24) << v4);
    *(_DWORD *)(a1 + 24) = v5;
    if (v3 != 8) {
      goto LABEL_12;
    }
    if (*(unsigned char *)(a1 + 4136) && (v5 & 0xFFFFFC) == 0)
    {
      uint64_t v6 = *(int *)(a1 + 12);
      if ((int)v6 >= *(_DWORD *)(a1 + 20)) {
        return 4294966277;
      }
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)(a1 + 12) = v6 + 1;
      *(unsigned char *)(v7 + v6) = 3;
      int v5 = *(_DWORD *)(a1 + 24) | 0x300;
      *(_DWORD *)(a1 + 24) = v5;
      *(_DWORD *)(a1 + 16) += 8;
    }
    uint64_t v8 = *(int *)(a1 + 12);
    if ((int)v8 >= *(_DWORD *)(a1 + 20)) {
      return 4294966277;
    }
    int v3 = 0;
    uint64_t v9 = *(void *)(a1 + 32);
    *(_DWORD *)(a1 + 12) = v8 + 1;
    *(unsigned char *)(v9 + v8) = v5;
    *(_DWORD *)(a1 + 8) = 0;
LABEL_12:
    if (!a3) {
      return 0;
    }
  }
}

uint64_t sub_4D834(uint64_t a1, int a2, int a3)
{
  if (a2 < 0) {
    a2 = -a2 | 0x80000000;
  }
  return sub_4D758(a1, a2, a3);
}

uint64_t sub_4D84C(uint64_t a1, int a2)
{
  unsigned int v2 = __clz(a2 + 1);
  return sub_4D758(a1, (a2 + 1 - (0x80000000 >> v2)) | (0x80000000 >> v2), 63 - 2 * v2);
}

uint64_t sub_4D870(uint64_t a1)
{
  uint64_t result = sub_4D6A4(a1, 1);
  if (!result)
  {
    int v3 = *(_DWORD *)(a1 + 8);
    if (v3)
    {
      return sub_4D758(a1, 0, 8 - v3);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_4D8D8(int a1, int a2, int a3, int a4, __CFDictionary **a5)
{
  *a5 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    uint64_t v11 = Mutable;
    int v12 = sub_385A8(kIOSurfaceCacheMode, a1, Mutable);
    int v13 = sub_385A8(kIOSurfaceMapCacheAttribute, a2, v11) + v12;
    int v14 = v13 + sub_385A8(kIOSurfacePixelFormat, a3, v11);
    int v15 = vm_page_size;
    if (vm_page_size <= 0x4000) {
      int v15 = 0x4000;
    }
    int v16 = (a4 + v15 - 1) & -v15;
    if (!(v14 + sub_385A8(kIOSurfaceAllocSize, v16, v11)))
    {
      uint64_t result = 0;
      *a5 = v11;
      return result;
    }
    if (sub_44EF8(0x4Cu, 4))
    {
      int v21 = sub_44F3C(0x4Cu);
      __uint64_t v22 = sub_4F1D8();
      uint64_t v23 = (const char *)sub_44F70(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed to add keys %d %d 0x%x %d %p\n", v22, 76, v23, "AVE_USL_Surface", "CreateDict", 49, "ret == 0", a1, a2, a3, v16, v11);
        __uint64_t v24 = sub_4F1D8();
        int v25 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to add keys %d %d 0x%x %d %p", v24, 76, v25, "AVE_USL_Surface");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to add keys %d %d 0x%x %d %p", v22, 76, v23, "AVE_USL_Surface");
      }
    }
    CFRelease(v11);
  }
  else if (sub_44EF8(0x4Cu, 4))
  {
    int v18 = sub_44F3C(0x4Cu);
    __uint64_t v19 = sub_4F1D8();
    __uint64_t v20 = (const char *)sub_44F70(4);
    if (v18)
    {
      printf("%lld %d AVE %s: %s::%s:%d %s | failed to create CFDictionary\n", v19, 76, v20, "AVE_USL_Surface", "CreateDict", 36, "pDict != __null");
      __uint64_t v19 = sub_4F1D8();
      sub_44F70(4);
    }
    syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create CFDictionary", v19);
  }
  return 4294966293;
}

uint64_t sub_4DBE0(int a1, int a2, int a3, int a4, IOSurfaceRef *a5)
{
  __uint64_t v30 = 0;
  if (a4 >= 1 && a5)
  {
    *a5 = 0;
    uint64_t v10 = sub_4D8D8(a1, a2, a3, a4, &v30);
    if (v10)
    {
      uint64_t v11 = v10;
      if (sub_44EF8(0x4Cu, 4))
      {
        int v12 = sub_44F3C(0x4Cu);
        __uint64_t v13 = sub_4F1D8();
        int v14 = (const char *)sub_44F70(4);
        if (v12)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | failed to create surface dictionary %d %d %d %d %d\n", v13, 76, v14, "AVE_USL_Surface", "CreateIOSurface", 94, "ret == 0", a1, a2, a3, a4, v11);
          __uint64_t v15 = sub_4F1D8();
          int v27 = sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create surface dictionary %d %d %d %d %d", v15, 76, v27, "AVE_USL_Surface");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create surface dictionary %d %d %d %d %d", v13, 76, v14, "AVE_USL_Surface");
        }
      }
    }
    else
    {
      __uint64_t v20 = v30;
      IOSurfaceRef v21 = IOSurfaceCreate(v30);
      if (v21)
      {
        uint64_t v11 = 0;
        *a5 = v21;
        if (!v20) {
          return v11;
        }
        goto LABEL_22;
      }
      if (sub_44EF8(0x4Cu, 4))
      {
        int v22 = sub_44F3C(0x4Cu);
        __uint64_t v23 = sub_4F1D8();
        __uint64_t v24 = (const char *)sub_44F70(4);
        if (v22)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | failed to create surface %d %d %d %d\n", v23, 76, v24, "AVE_USL_Surface", "CreateIOSurface", 99, "pSurface != __null", a1, a2, a3, a4);
          __uint64_t v25 = sub_4F1D8();
          __uint64_t v29 = sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create surface %d %d %d %d", v25, 76, v29);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create surface %d %d %d %d", v23, 76, v24);
        }
      }
      uint64_t v11 = 4294966296;
    }
  }
  else
  {
    if (sub_44EF8(0x4Cu, 4))
    {
      int v16 = sub_44F3C(0x4Cu);
      __uint64_t v17 = sub_4F1D8();
      int v18 = (const char *)sub_44F70(4);
      if (v16)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %d %d %d %d %p\n", v17, 76, v18, "AVE_USL_Surface", "CreateIOSurface", 88, "size > 0 && ppSurface != __null", a1, a2, a3, a4, a5);
        __uint64_t v19 = sub_4F1D8();
        uint64_t v28 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %d %d %d %d %p", v19, 76, v28, "AVE_USL_Surface");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %d %d %d %d %p", v17, 76, v18, "AVE_USL_Surface");
      }
    }
    uint64_t v11 = 4294966295;
  }
  __uint64_t v20 = v30;
  if (v30) {
LABEL_22:
  }
    CFRelease(v20);
  return v11;
}

uint64_t sub_4DFAC(uint64_t result)
{
  *(unsigned char *)uint64_t result = 0;
  *(void *)(result + 64) = 0;
  *(_DWORD *)(result + 72) = 0;
  *(void *)(result + 80) = 0;
  *(void *)(result + 88) = 0;
  return result;
}

uint64_t sub_4DFC4(uint64_t a1, __IOSurface *a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v28 = 0u;
  long long v29 = 0u;
  *(_OWORD *)cStr = 0u;
  long long v27 = 0u;
  if (a2)
  {
    if ((a3 & 8) == 0)
    {
LABEL_5:
      if (a4) {
        LOBYTE(v15) = (_BYTE)a4;
      }
      else {
        __uint64_t v15 = &unk_5EB27;
      }
      sub_4D5BC((char *)a1, 64, "%s", (uint64_t)a4, a5, a6, a7, a8, (char)v15);
      int AllocSize = IOSurfaceGetAllocSize(a2);
      uint64_t result = 0;
      *(_DWORD *)(a1 + 72) = AllocSize;
      *(void *)(a1 + 64) = a2;
      *(void *)(a1 + 80) = a5;
      return result;
    }
    sub_4D5BC(cStr, 64, "%s%s%s", (uint64_t)a4, a5, a6, a7, a8, (char)"AVE2");
    CFStringRef v13 = CFStringCreateWithCString(0, cStr, 0);
    if (v13)
    {
      CFStringRef v14 = v13;
      IOSurfaceSetValue(a2, kIOSurfaceName, v13);
      CFRelease(v14);
      goto LABEL_5;
    }
    if (sub_44EF8(0x4Cu, 4))
    {
      int v22 = sub_44F3C(0x4Cu);
      __uint64_t v23 = sub_4F1D8();
      __uint64_t v24 = (const char *)sub_44F70(4);
      if (v22)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed to create CFString %s\n", v23, 76, v24, "AVE_USL_Surface", "Create", 169, "pNameStr != __null", cStr);
        __uint64_t v23 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create CFString %s", v23, 76);
    }
    return 4294966293;
  }
  else
  {
    if (sub_44EF8(0x4Cu, 4))
    {
      int v18 = sub_44F3C(0x4Cu);
      __uint64_t v19 = sub_4F1D8();
      __uint64_t v20 = (const char *)sub_44F70(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %p 0x%llx %p 0x%llx\n", v19, 76, v20, "AVE_USL_Surface", "Create", 160, "pSurface != __null", (const void *)a1, 0, a3, a4, a5);
        __uint64_t v21 = sub_4F1D8();
        __uint64_t v25 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %p 0x%llx %p 0x%llx", v21, 76, v25, "AVE_USL_Surface", "Create", 160);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %p 0x%llx %p 0x%llx", v19, 76, v20, "AVE_USL_Surface", "Create", 160);
      }
    }
    return 4294966295;
  }
}

uint64_t sub_4E2F8(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, const void *a7, uint64_t a8)
{
  IOSurfaceRef v34 = 0;
  if (a5 > 0)
  {
    int v16 = vm_page_size;
    if (vm_page_size <= 0x4000) {
      int v16 = 0x4000;
    }
    int v17 = (a5 + v16 - 1) & -v16;
    uint64_t v18 = sub_4DBE0(a2, a3, a4, v17, &v34);
    if (v18)
    {
      uint64_t v22 = v18;
      if (sub_44EF8(0x4Cu, 4))
      {
        int v23 = sub_44F3C(0x4Cu);
        __uint64_t v24 = sub_4F1D8();
        __uint64_t v25 = (const char *)sub_44F70(4);
        if (v23)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | failed to create surface %p %d %d %d %d %d\n", v24, 76, v25, "AVE_USL_Surface", "Create", 262, "ret == 0", (const void *)a1, a2, a3, a4, v17, v22);
          __uint64_t v26 = sub_4F1D8();
          long long v27 = sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create surface %p %d %d %d %d %d", v26, 76, v27, "AVE_USL_Surface", "Create");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create surface %p %d %d %d %d %d", v24, 76, v25, "AVE_USL_Surface", "Create");
        }
      }
    }
    else
    {
      uint64_t v22 = sub_4DFC4(a1, v34, a6, a7, a8, v19, v20, v21);
      *(void *)(a1 + 80) |= 4uLL;
      if (!v22) {
        return v22;
      }
    }
    goto LABEL_17;
  }
  if (sub_44EF8(0x4Cu, 4))
  {
    int v28 = sub_44F3C(0x4Cu);
    __uint64_t v29 = sub_4F1D8();
    __uint64_t v30 = (const char *)sub_44F70(4);
    if (v28)
    {
      printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %d %d %d %d 0x%llx 0x%llx\n", v29, 76, v30, "AVE_USL_Surface", "Create", 249, "size > 0", (const void *)a1, a2, a3, a4, a5, a6, a8);
      __uint64_t v31 = sub_4F1D8();
      __uint64_t v33 = sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %d %d %d %d 0x%llx 0x%llx", v31, 76, v33, "AVE_USL_Surface", "Create", 249);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %d %d %d %d 0x%llx 0x%llx", v29, 76, v30, "AVE_USL_Surface", "Create", 249);
    }
    uint64_t v22 = 4294966295;
LABEL_17:
    if (v34) {
      CFRelease(v34);
    }
    goto LABEL_19;
  }
  uint64_t v22 = 4294966295;
LABEL_19:
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return v22;
}

uint64_t sub_4E624(unsigned char *a1)
{
  if (*((void *)a1 + 8))
  {
    uint64_t v2 = sub_4E86C((uint64_t)a1);
    if (v2)
    {
      uint64_t v3 = v2;
      if (sub_44EF8(0x4Cu, 4))
      {
        int v4 = sub_44F3C(0x4Cu);
        __uint64_t v5 = sub_4F1D8();
        uint64_t v6 = (const char *)sub_44F70(4);
        if (v4)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | failed to do unlock %p %d\n", v5, 76, v6, "AVE_USL_Surface", "Destroy", 323, "ret == 0", a1, v3);
          __uint64_t v7 = sub_4F1D8();
          CFStringRef v13 = sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to do unlock %p %d", v7, 76, v13);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to do unlock %p %d", v5, 76, v6);
        }
      }
    }
    else
    {
      uint64_t v11 = (const void *)*((void *)a1 + 8);
      if (v11)
      {
        CFRelease(v11);
        *((void *)a1 + 8) = 0;
      }
      uint64_t v3 = 0;
      *a1 = 0;
      *((_DWORD *)a1 + 18) = 0;
      *((void *)a1 + 10) = 0;
    }
  }
  else
  {
    if (sub_44EF8(0x4Cu, 4))
    {
      int v8 = sub_44F3C(0x4Cu);
      __uint64_t v9 = sub_4F1D8();
      uint64_t v10 = (const char *)sub_44F70(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | surface is not created %p\n", v9, 76, v10, "AVE_USL_Surface", "Destroy", 297, "m_pcSurface != __null", a1);
        __uint64_t v9 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | surface is not created %p", v9, 76);
    }
    return 4294966285;
  }
  return v3;
}

uint64_t sub_4E86C(uint64_t a1)
{
  uint64_t v2 = *(__IOSurface **)(a1 + 64);
  if (v2)
  {
    if (*(unsigned char *)(a1 + 89))
    {
      IOSurfaceUnlock(v2, 0, 0);
      uint64_t result = 0;
      *(void *)(a1 + 88) &= ~0x100uLL;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (sub_44EF8(0x4Cu, 4))
    {
      int v4 = sub_44F3C(0x4Cu);
      __uint64_t v5 = sub_4F1D8();
      uint64_t v6 = (const char *)sub_44F70(4);
      if (v4)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | surface is not created %p %s\n", v5, 76, v6, "AVE_USL_Surface", "Unlock", 415, "m_pcSurface != __null", (const void *)a1, (const char *)a1);
        __uint64_t v7 = sub_4F1D8();
        int v8 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | surface is not created %p %s", v7, 76, v8);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | surface is not created %p %s", v5, 76, v6);
      }
    }
    return 4294966285;
  }
  return result;
}

uint64_t sub_4E9C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  memset(v47, 0, sizeof(v47));
  char v46 = 0;
  unsigned int v45 = 0;
  int v10 = (char)a3;
  if (sub_44EF8(a2, (char)a3))
  {
    sub_3B5C(a4, a5, (char *)v47, 32, v11, v12, v13, v14);
    __uint64_t v15 = *(__IOSurface **)(a1 + 64);
    if (v15)
    {
      unsigned int v45 = bswap32(IOSurfaceGetPixelFormat(v15));
      char v46 = 0;
    }
    if (sub_44EF8(a2, v10))
    {
      int v16 = sub_44F3C(a2);
      int v17 = v16;
      if (a3 < 0)
      {
        if (!v16 || (-a3 & 0x20) != 0)
        {
          uint64_t v34 = *(void *)(a1 + 64);
          if (v34)
          {
            IOSurfaceGetID(*(IOSurfaceRef *)(a1 + 64));
            int v35 = *(__IOSurface **)(a1 + 64);
            if (v35)
            {
              IOSurfaceGetUseCount(v35);
              uint64_t v36 = *(__IOSurface **)(a1 + 64);
              if (v36) {
                IOSurfaceGetBaseAddress(v36);
              }
            }
          }
        }
        else
        {
          __uint64_t v26 = *(const void **)(a1 + 64);
          if (v26)
          {
            IOSurfaceID ID = IOSurfaceGetID(*(IOSurfaceRef *)(a1 + 64));
            uint64_t v28 = *(void *)(a1 + 88);
            BaseAddress = *(__IOSurface **)(a1 + 64);
            int v30 = *(_DWORD *)(a1 + 72);
            if (BaseAddress)
            {
              Useint Count = IOSurfaceGetUseCount(BaseAddress);
              BaseAddress = *(__IOSurface **)(a1 + 64);
              if (BaseAddress) {
                BaseAddress = (__IOSurface *)IOSurfaceGetBaseAddress(BaseAddress);
              }
            }
            else
            {
              Useint Count = 0;
            }
          }
          else
          {
            Useint Count = 0;
            IOSurfaceID ID = 0;
            BaseAddress = 0;
            int v30 = *(_DWORD *)(a1 + 72);
            uint64_t v28 = *(void *)(a1 + 88);
          }
          printf("Surface %s | Name: %s %p Surf %p ID %d Size %d OpFlag 0x%llx Cnt %d Addr %p PixelFmt %s \n", (const char *)v47, (const char *)a1, (const void *)a1, v26, ID, v30, v28, UseCount, BaseAddress, (const char *)&v45);
          uint64_t v34 = *(void *)(a1 + 64);
          if (v34)
          {
            IOSurfaceGetID(*(IOSurfaceRef *)(a1 + 64));
            uint64_t v41 = *(__IOSurface **)(a1 + 64);
            if (v41)
            {
              IOSurfaceGetUseCount(v41);
              int v42 = *(__IOSurface **)(a1 + 64);
              if (v42) {
                IOSurfaceGetBaseAddress(v42);
              }
            }
          }
        }
        syslog(3, "Surface %s | Name: %s %p Surf %p ID %d Size %d OpFlag 0x%llx Cnt %d Addr %p PixelFmt %s ", v47, a1, a1, v34);
      }
      else
      {
        __uint64_t v18 = sub_4F1D8();
        uint64_t v19 = (const char *)sub_44F70(v10);
        uint64_t v20 = *(__IOSurface **)(a1 + 64);
        if ((a3 & 0x20) != 0 || !v17)
        {
          if (v20)
          {
            IOSurfaceGetID(*(IOSurfaceRef *)(a1 + 64));
            uint64_t v32 = *(__IOSurface **)(a1 + 64);
            if (v32)
            {
              IOSurfaceGetUseCount(v32);
              __uint64_t v33 = *(__IOSurface **)(a1 + 64);
              if (v33) {
                IOSurfaceGetBaseAddress(v33);
              }
            }
          }
          syslog(3, "%lld %d AVE %s: Surface %s | Name: %s %p Surf %p ID %d Size %d OpFlag 0x%llx Cnt %d Addr %p PixelFmt %s ", v18, a2, v19, v47, a1, a1);
        }
        else
        {
          if (v20)
          {
            IOSurfaceID v21 = IOSurfaceGetID(v20);
            uint64_t v22 = *(void *)(a1 + 88);
            int v23 = *(__IOSurface **)(a1 + 64);
            int v24 = *(_DWORD *)(a1 + 72);
            if (v23)
            {
              IOSurfaceID v44 = v21;
              int32_t v25 = IOSurfaceGetUseCount(v23);
              int v23 = *(__IOSurface **)(a1 + 64);
              if (v23) {
                int v23 = (__IOSurface *)IOSurfaceGetBaseAddress(v23);
              }
              IOSurfaceID v21 = v44;
            }
            else
            {
              int32_t v25 = 0;
            }
          }
          else
          {
            int32_t v25 = 0;
            IOSurfaceID v21 = 0;
            int v23 = 0;
            int v24 = *(_DWORD *)(a1 + 72);
            uint64_t v22 = *(void *)(a1 + 88);
          }
          printf("%lld %d AVE %s: Surface %s | Name: %s %p Surf %p ID %d Size %d OpFlag 0x%llx Cnt %d Addr %p PixelFmt %s \n", v18, a2, v19, (const char *)v47, (const char *)a1, (const void *)a1, v20, v21, v24, v22, v25, v23, (const char *)&v45);
          __uint64_t v37 = sub_4F1D8();
          __uint64_t v38 = sub_44F70(v10);
          if (*(void *)(a1 + 64))
          {
            IOSurfaceGetID(*(IOSurfaceRef *)(a1 + 64));
            uint64_t v39 = *(__IOSurface **)(a1 + 64);
            if (v39)
            {
              IOSurfaceGetUseCount(v39);
              int v40 = *(__IOSurface **)(a1 + 64);
              if (v40) {
                IOSurfaceGetBaseAddress(v40);
              }
            }
          }
          syslog(3, "%lld %d AVE %s: Surface %s | Name: %s %p Surf %p ID %d Size %d OpFlag 0x%llx Cnt %d Addr %p PixelFmt %s ", v37, a2, v38, v47, a1, a1);
        }
      }
    }
  }
  return 0;
}

__IOSurface *sub_4EE34(uint64_t a1)
{
  uint64_t result = *(__IOSurface **)(a1 + 64);
  if (result) {
    return (__IOSurface *)IOSurfaceGetID(result);
  }
  return result;
}

__IOSurface *sub_4EE44(uint64_t a1, int a2)
{
  uint64_t result = *(__IOSurface **)(a1 + 64);
  if (result) {
    return (__IOSurface *)((char *)IOSurfaceGetBaseAddress(result) + a2);
  }
  return result;
}

uint64_t sub_4EE74(uint64_t a1)
{
  uint64_t v2 = *(__IOSurface **)(a1 + 64);
  if (v2)
  {
    if (*(unsigned char *)(a1 + 89))
    {
      return 0;
    }
    else
    {
      IOSurfaceLock(v2, 0, 0);
      uint64_t result = 0;
      *(void *)(a1 + 88) |= 0x100uLL;
    }
  }
  else
  {
    if (sub_44EF8(0x4Cu, 4))
    {
      int v4 = sub_44F3C(0x4Cu);
      __uint64_t v5 = sub_4F1D8();
      uint64_t v6 = (const char *)sub_44F70(4);
      if (v4)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | surface is not created %p %s\n", v5, 76, v6, "AVE_USL_Surface", "Lock", 390, "m_pcSurface != __null", (const void *)a1, (const char *)a1);
        __uint64_t v7 = sub_4F1D8();
        int v8 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | surface is not created %p %s", v7, 76, v8);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | surface is not created %p %s", v5, 76, v6);
      }
    }
    return 4294966285;
  }
  return result;
}

uint64_t sub_4EFD0(uint64_t a1)
{
  if (*(void *)(a1 + 64)) {
    return *(unsigned int *)(a1 + 72);
  }
  else {
    return 0;
  }
}

uint64_t sub_4EFE8(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  *(_OWORD *)int v17 = 0u;
  memset(v18, 0, sizeof(v18));
  time_t v16 = 0;
  if (!a4) {
    return 4294966295;
  }
  *a4 = 0;
  setlocale(0, (const char *)&unk_5EB27);
  time(&v16);
  int v8 = localtime(&v16);
  strftime(v17, 0x2DuLL, "%Y-%m-%d_%H-%M-%S", v8);
  uint64_t v14 = "/var/mobile/Media/DCIM/";
  if (a1) {
    LOBYTE(v14) = a1;
  }
  sub_4D5BC(a4, a5, "%s%s%s%s%s", v9, v10, v11, v12, v13, (char)v14);
  return 0;
}

uint64_t sub_4F11C(uint64_t result)
{
  switch(result)
  {
    case 0xFFFFFC01:
    case 0xFFFFFC02:
    case 0xFFFFFC03:
    case 0xFFFFFC04:
    case 0xFFFFFC05:
    case 0xFFFFFC06:
    case 0xFFFFFC07:
    case 0xFFFFFC08:
    case 0xFFFFFC09:
    case 0xFFFFFC0A:
    case 0xFFFFFC0B:
    case 0xFFFFFC0C:
    case 0xFFFFFC0D:
    case 0xFFFFFC0E:
    case 0xFFFFFC0F:
    case 0xFFFFFC10:
    case 0xFFFFFC11:
    case 0xFFFFFC12:
    case 0xFFFFFC13:
    case 0xFFFFFC14:
    case 0xFFFFFC16:
    case 0xFFFFFC18:
      goto LABEL_2;
    case 0xFFFFFC15:
      uint64_t result = 4294954392;
      break;
    case 0xFFFFFC17:
      uint64_t result = 4294954394;
      break;
    default:
      if (result == -2001)
      {
        uint64_t result = 4294947942;
      }
      else if (result)
      {
LABEL_2:
        uint64_t result = 4294949605;
      }
      break;
  }
  return result;
}

__uint64_t sub_4F1D8()
{
  return clock_gettime_nsec_np(_CLOCK_UPTIME_RAW) / 0x3E8;
}

uint64_t sub_4F210()
{
  v1.tv_sec = 0;
  v1.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &v1);
  return (v1.tv_nsec + 1000000000 * v1.tv_sec) / 1000;
}

uint64_t sub_4F268(int a1)
{
  uint64_t v1 = 0;
  while (dword_886F4[v1] != a1)
  {
    v1 += 2;
    if (v1 == 52) {
      return 3758097084;
    }
  }
  return dword_886F4[v1 + 1];
}

uint64_t sub_4F2A4(int a1)
{
  uint64_t v1 = 0;
  while (dword_886F4[v1 + 1] != a1)
  {
    v1 += 2;
    if (v1 == 52) {
      return 4294966296;
    }
  }
  return dword_886F4[v1];
}

void sub_4F2DC()
{
  qword_908B0 = (uint64_t)kCVImageBufferColorPrimaries_ITU_R_709_2;
  *(void *)algn_908B8 = kCVImageBufferColorPrimaries_EBU_3213;
  qword_908C0 = (uint64_t)kCVImageBufferColorPrimaries_SMPTE_C;
  unk_908C8 = kCVImageBufferColorPrimaries_ITU_R_2020;
  qword_908D0 = (uint64_t)kCVImageBufferColorPrimaries_P3_D65;
  unk_908D8 = kCVImageBufferColorPrimaries_DCI_P3;
  qword_908E0 = (uint64_t)kCVImageBufferTransferFunction_ITU_R_709_2;
  *(void *)algn_908E8 = kCVImageBufferTransferFunction_SMPTE_240M_1995;
  qword_908F0 = (uint64_t)kCVImageBufferTransferFunction_Linear;
  unk_908F8 = kCVImageBufferTransferFunction_sRGB;
  qword_90900 = (uint64_t)kCVImageBufferTransferFunction_ITU_R_2020;
  unk_90908 = kCVImageBufferTransferFunction_SMPTE_ST_2084_PQ;
  qword_90910 = (uint64_t)kCVImageBufferTransferFunction_SMPTE_ST_428_1;
  unk_90918 = kCVImageBufferTransferFunction_ITU_R_2100_HLG;
  qword_90920 = kCVImageBufferYCbCrMatrix_Identity;
  *(void *)algn_90928 = kCVImageBufferYCbCrMatrix_ITU_R_709_2;
  qword_90930 = (uint64_t)kCVImageBufferYCbCrMatrix_ITU_R_601_4;
  unk_90938 = kCVImageBufferYCbCrMatrix_SMPTE_240M_1995;
  qword_90940 = (uint64_t)kCVImageBufferYCbCrMatrix_ITU_R_2020;
  unk_90948 = kCVImageBufferYCbCrMatrix_ITU_R_2100_ICtCp;
}

uint64_t sub_4F410(char *a1, int *a2)
{
  if (!a1) {
    return 4294966288;
  }
  uint64_t v3 = a1;
  uint64_t v4 = 0;
  __uint64_t v5 = a2 + 2;
  int v6 = -1;
  __uint64_t v7 = a2 + 2;
LABEL_3:
  uint64_t v8 = 0;
  uint64_t result = *v3;
  if (*v3 <= 0x63u)
  {
    switch(*v3)
    {
      case 'D':
        goto LABEL_33;
      case 'E':
      case 'F':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'O':
      case 'Q':
      case 'R':
        goto LABEL_14;
      case 'G':
        goto LABEL_6;
      case 'M':
        goto LABEL_7;
      case 'N':
        goto LABEL_8;
      case 'P':
        goto LABEL_9;
      case 'S':
        goto LABEL_10;
      case 'T':
        goto LABEL_11;
      default:
        if (result == 32) {
          goto LABEL_32;
        }
        if (*v3) {
          goto LABEL_14;
        }
        goto LABEL_40;
    }
  }
  switch(*v3)
  {
    case 'd':
      goto LABEL_33;
    case 'g':
LABEL_6:
      uint64_t v8 = 4;
      goto LABEL_33;
    case 'm':
LABEL_7:
      uint64_t v8 = 2;
      goto LABEL_33;
    case 'n':
LABEL_8:
      uint64_t v8 = 3;
      goto LABEL_33;
    case 'p':
LABEL_9:
      uint64_t v8 = 5;
      goto LABEL_33;
    case 's':
LABEL_10:
      uint64_t v8 = 6;
      goto LABEL_33;
    case 't':
LABEL_11:
      uint64_t v8 = 1;
      goto LABEL_33;
    default:
LABEL_14:
      if ((result - 48) > 9)
      {
        uint64_t result = 4294966296;
        if ((v6 & 0x80000000) == 0) {
          goto LABEL_41;
        }
        return 4294966288;
      }
      break;
  }
  switch((int)v4)
  {
    case 0:
      unsigned int v10 = atoi(v3);
      if (v10 <= 5)
      {
        __uint64_t v7 = &v5[28 * v10];
        int v6 = v10;
        goto LABEL_30;
      }
      uint64_t result = 4294966290;
      if (v6 < 0) {
        return 4294966288;
      }
      goto LABEL_41;
    case 1:
      v6 &= ~(v6 >> 31);
      *__uint64_t v7 = atoi(v3) != 0;
      goto LABEL_30;
    case 2:
      v6 &= ~(v6 >> 31);
      v7[1] = atoi(v3) != 0;
      goto LABEL_30;
    case 3:
      int v15 = atoi(v3);
      if ((v15 - 9) < 0xFFFFFFF8) {
        goto LABEL_39;
      }
      v6 &= ~(v6 >> 31);
      v7[2] = v15;
      goto LABEL_30;
    case 4:
      unsigned int v16 = atoi(v3);
      if (v16 > 7)
      {
LABEL_39:
        uint64_t result = 4294966278;
LABEL_40:
        if (v6 < 0) {
          return 4294966288;
        }
        goto LABEL_41;
      }
      int v17 = v7[3];
      v6 &= ~(v6 >> 31);
      uint64_t v18 = (uint64_t)&v7[3 * v17 + 3];
      *(_DWORD *)(v18 + 4) = v16;
      *(_DWORD *)(v18 + 8) = 1;
      v7[3] = v17 + 1;
      goto LABEL_30;
    default:
      int v11 = atoi(v3);
      uint64_t v12 = v7[3];
      if ((int)v12 < 1) {
        goto LABEL_35;
      }
      unint64_t v13 = 0;
      uint64_t v14 = 12 * v12;
      break;
  }
  do
  {
    if (v7[v13 / 4 + 4] == v11)
    {
      v7[v13 / 4 + 5] = v4 != 5;
LABEL_30:
      uint64_t result = (uint64_t)strchr(v3, 32);
      if (!result) {
        goto LABEL_40;
      }
      uint64_t v3 = (char *)result;
LABEL_32:
      uint64_t v8 = v4;
LABEL_33:
      ++v3;
      uint64_t v4 = v8;
      goto LABEL_3;
    }
    v13 += 12;
  }
  while (v14 != v13);
LABEL_35:
  uint64_t result = 4294966274;
  if (v6 < 0) {
    return 4294966288;
  }
LABEL_41:
  int v19 = *a2;
  if (*a2 <= v6 + 1) {
    int v19 = v6 + 1;
  }
  *a2 = v19;
  return result;
}

uint64_t AVE_MCTF_Plugin_CreateInstance(const void *a1, const void *a2, void *a3)
{
  v44.__sig = 0;
  *(void *)v44.__opaque = 0;
  if (sub_44EF8(0x1Bu, 0))
  {
    int v6 = sub_44F3C(0x1Bu);
    __uint64_t v7 = sub_4F1D8();
    uint64_t v8 = (const char *)sub_44F70(0);
    if (v6)
    {
      printf("%lld %d AVE %s: compiled %s in %s on %s %s\n", v7, 27, v8, "803.48.1", "prod", "Nov 14 2024", "22:50:22");
      __uint64_t v7 = sub_4F1D8();
      sub_44F70(0);
    }
    syslog(3, "%lld %d AVE %s: compiled %s in %s on %s %s", v7);
  }
  if (sub_44EF8(0x1Bu, 6))
  {
    int v9 = sub_44F3C(0x1Bu);
    __uint64_t v10 = sub_4F1D8();
    int v11 = (const char *)sub_44F70(6);
    if (v9)
    {
      printf("%lld %d AVE %s: %s Enter %p %p %p\n", v10, 27, v11, "AVE_MCTF_Plugin_CreateInstance", a1, a2, a3);
      __uint64_t v10 = sub_4F1D8();
      sub_44F70(6);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %p %p", v10);
  }
  if (a3)
  {
    *a3 = 0;
    VTTemporalFilterPluginGetClassID();
    int v12 = CMDerivedObjectCreate();
    if (v12)
    {
      int v13 = v12;
      if (sub_44EF8(0x1Bu, 4))
      {
        int v14 = sub_44F3C(0x1Bu);
        __uint64_t v15 = sub_4F1D8();
        unsigned int v16 = (const char *)sub_44F70(4);
        if (v14)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create MCTF Object %p %p %p %d\n", v15, 27, v16, "AVE_MCTF_Plugin_CreateInstance", 436, "res == noErr", a1, a2, a3, v13);
          __uint64_t v17 = sub_4F1D8();
          uint64_t v39 = sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create MCTF Object %p %p %p %d", v17, 27, v39, "AVE_MCTF_Plugin_CreateInstance");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create MCTF Object %p %p %p %d", v15, 27, v16, "AVE_MCTF_Plugin_CreateInstance");
        }
      }
      uint64_t v24 = 4294966292;
    }
    else
    {
      DerivedStorage = (pthread_mutex_t *)CMBaseObjectGetDerivedStorage();
      if (DerivedStorage)
      {
        int v23 = DerivedStorage;
        bzero(DerivedStorage, 0x28960uLL);
        uint64_t v24 = sub_C8A8((uint64_t)v23);
        if (v24)
        {
          if (sub_44EF8(0x1Bu, 4))
          {
            int v25 = sub_44F3C(0x1Bu);
            __uint64_t v26 = sub_4F1D8();
            long long v27 = (const char *)sub_44F70(4);
            if (v25)
            {
              printf("%lld %d AVE %s: %s:%d %s | fail to open MCTF %p %p %p %p %p %d\n", v26, 27, v27, "AVE_MCTF_Plugin_CreateInstance", 448, "ret == 0", a1, a2, a3, 0, v23, v24);
              __uint64_t v28 = sub_4F1D8();
              uint64_t v41 = sub_44F70(4);
              syslog(3, "%lld %d AVE %s: %s:%d %s | fail to open MCTF %p %p %p %p %p %d", v28, 27, v41, "AVE_MCTF_Plugin_CreateInstance", 448, "ret == 0");
            }
            else
            {
              syslog(3, "%lld %d AVE %s: %s:%d %s | fail to open MCTF %p %p %p %p %p %d", v26, 27, v27, "AVE_MCTF_Plugin_CreateInstance", 448, "ret == 0");
            }
          }
        }
        else
        {
          pthread_mutexattr_init(&v44);
          pthread_mutexattr_settype(&v44, 2);
          pthread_mutex_init(v23, &v44);
          pthread_mutexattr_destroy(&v44);
          *a3 = 0;
        }
      }
      else
      {
        if (sub_44EF8(0x1Bu, 4))
        {
          int v35 = sub_44F3C(0x1Bu);
          __uint64_t v36 = sub_4F1D8();
          __uint64_t v37 = (const char *)sub_44F70(4);
          if (v35)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to get MCTF %p %p %p %p %d\n", v36, 27, v37, "AVE_MCTF_Plugin_CreateInstance", 441, "pMCTF != __null", a1, a2, a3, 0, 0);
            __uint64_t v38 = sub_4F1D8();
            __uint64_t v43 = sub_44F70(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get MCTF %p %p %p %p %d", v38, 27, v43, "AVE_MCTF_Plugin_CreateInstance", 441);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get MCTF %p %p %p %p %d", v36, 27, v37, "AVE_MCTF_Plugin_CreateInstance", 441);
          }
        }
        uint64_t v24 = 4294966296;
      }
    }
  }
  else
  {
    if (sub_44EF8(0x1Bu, 4))
    {
      int v18 = sub_44F3C(0x1Bu);
      __uint64_t v19 = sub_4F1D8();
      uint64_t v20 = (const char *)sub_44F70(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d\n", v19, 27, v20, "AVE_MCTF_Plugin_CreateInstance", 428, "filterInstanceOut != __null", a1, a2, 0, 0);
        __uint64_t v21 = sub_4F1D8();
        int v40 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d", v21, 27, v40, "AVE_MCTF_Plugin_CreateInstance");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d", v19, 27, v20, "AVE_MCTF_Plugin_CreateInstance");
      }
    }
    uint64_t v24 = 4294966295;
  }
  uint64_t v29 = sub_4F11C(v24);
  if (sub_44EF8(0x1Bu, 6))
  {
    int v30 = sub_44F3C(0x1Bu);
    __uint64_t v31 = sub_4F1D8();
    uint64_t v32 = (const char *)sub_44F70(6);
    if (v30)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %p | %p %d\n", v31, 27, v32, "AVE_MCTF_Plugin_CreateInstance", a1, a2, a3, 0, v24);
      __uint64_t v33 = sub_4F1D8();
      int v42 = sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %p | %p %d", v33, 27, v42);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %p | %p %d", v31, 27, v32);
    }
  }
  return v29;
}

uint64_t sub_4FE4C(const void *a1)
{
  if (sub_44EF8(0x1Bu, 6))
  {
    int v2 = sub_44F3C(0x1Bu);
    __uint64_t v3 = sub_4F1D8();
    uint64_t v4 = (const char *)sub_44F70(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", v3, 27, v4, "AVE_MCTF_Plugin_Invalidate", a1);
      __uint64_t v5 = sub_4F1D8();
      __uint64_t v21 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 27, v21, "AVE_MCTF_Plugin_Invalidate", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", v3, 27, v4, "AVE_MCTF_Plugin_Invalidate", a1);
    }
  }
  if (a1)
  {
    DerivedStorage = (pthread_mutex_t *)CMBaseObjectGetDerivedStorage();
    __uint64_t v7 = DerivedStorage;
    if (DerivedStorage)
    {
      pthread_mutex_lock(DerivedStorage);
      uint64_t v8 = sub_E07C((uint64_t)v7);
    }
    else
    {
      if (sub_44EF8(0x1Bu, 4))
      {
        int v12 = sub_44F3C(0x1Bu);
        __uint64_t v13 = sub_4F1D8();
        int v14 = (const char *)sub_44F70(4);
        if (v12)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to get MCTF %p %d\n", v13, 27, v14, "AVE_MCTF_Plugin_Invalidate", 27, "pMCTF != __null", a1, 0);
          __uint64_t v13 = sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get MCTF %p %d", v13, 27);
      }
      uint64_t v8 = 4294966296;
    }
    pthread_mutex_unlock(v7);
  }
  else
  {
    if (sub_44EF8(0x1Bu, 4))
    {
      int v9 = sub_44F3C(0x1Bu);
      __uint64_t v10 = sub_4F1D8();
      int v11 = (const char *)sub_44F70(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d\n", v10, 27, v11, "AVE_MCTF_Plugin_Invalidate", 22, "instance != __null", 0, 0);
        __uint64_t v10 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d", v10, 27);
    }
    uint64_t v8 = 4294966295;
  }
  uint64_t v15 = sub_4F11C(v8);
  if (sub_44EF8(0x1Bu, 6))
  {
    int v16 = sub_44F3C(0x1Bu);
    __uint64_t v17 = sub_4F1D8();
    int v18 = (const char *)sub_44F70(6);
    if (v16)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v17, 27, v18, "AVE_MCTF_Plugin_Invalidate", a1, v8);
      __uint64_t v19 = sub_4F1D8();
      uint64_t v22 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v19, 27, v22, "AVE_MCTF_Plugin_Invalidate", a1, v8);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v17, 27, v18, "AVE_MCTF_Plugin_Invalidate", a1, v8);
    }
  }
  return v15;
}

void sub_5019C(const void *a1)
{
  if (sub_44EF8(0x1Bu, 6))
  {
    int v2 = sub_44F3C(0x1Bu);
    __uint64_t v3 = sub_4F1D8();
    uint64_t v4 = (const char *)sub_44F70(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", v3, 27, v4, "AVE_MCTF_Plugin_Finalize", a1);
      __uint64_t v5 = sub_4F1D8();
      __uint64_t v19 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 27, v19, "AVE_MCTF_Plugin_Finalize", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", v3, 27, v4, "AVE_MCTF_Plugin_Finalize", a1);
    }
  }
  if (a1)
  {
    DerivedStorage = (pthread_mutex_t *)CMBaseObjectGetDerivedStorage();
    __uint64_t v7 = DerivedStorage;
    if (DerivedStorage)
    {
      pthread_mutex_lock(DerivedStorage);
      int v8 = sub_D2AC((uint64_t)v7);
    }
    else
    {
      if (sub_44EF8(0x1Bu, 4))
      {
        int v12 = sub_44F3C(0x1Bu);
        __uint64_t v13 = sub_4F1D8();
        int v14 = (const char *)sub_44F70(4);
        if (v12)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to get MCTF %p %d\n", v13, 27, v14, "AVE_MCTF_Plugin_Finalize", 63, "pMCTF != __null", a1, 0);
          __uint64_t v13 = sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get MCTF %p %d", v13, 27);
      }
      int v8 = -1000;
    }
    pthread_mutex_unlock(v7);
    pthread_mutex_destroy(v7);
  }
  else
  {
    if (sub_44EF8(0x1Bu, 4))
    {
      int v9 = sub_44F3C(0x1Bu);
      __uint64_t v10 = sub_4F1D8();
      int v11 = (const char *)sub_44F70(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d\n", v10, 27, v11, "AVE_MCTF_Plugin_Finalize", 58, "instance != __null", 0, 0);
        __uint64_t v10 = sub_4F1D8();
        sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d", v10, 27);
    }
    int v8 = -1001;
  }
  if (sub_44EF8(0x1Bu, 6))
  {
    int v15 = sub_44F3C(0x1Bu);
    __uint64_t v16 = sub_4F1D8();
    __uint64_t v17 = (const char *)sub_44F70(6);
    if (v15)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v16, 27, v17, "AVE_MCTF_Plugin_Finalize", a1, v8);
      __uint64_t v18 = sub_4F1D8();
      uint64_t v20 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v18, 27, v20, "AVE_MCTF_Plugin_Finalize", a1, v8);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v16, 27, v17, "AVE_MCTF_Plugin_Finalize", a1, v8);
    }
  }
}

uint64_t sub_504F4(const void *a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  if (sub_44EF8(0x1Bu, 6))
  {
    int v8 = sub_44F3C(0x1Bu);
    __uint64_t v9 = sub_4F1D8();
    __uint64_t v10 = (const char *)sub_44F70(6);
    if (v8)
    {
      printf("%lld %d AVE %s: %s Enter %p %p %p %p\n", v9, 27, v10, "AVE_MCTF_Plugin_CopyProperty", a1, a2, a3, a4);
      __uint64_t v9 = sub_4F1D8();
      sub_44F70(6);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %p %p %p", v9, 27);
  }
  if (a1 && a2 && a4)
  {
    DerivedStorage = (pthread_mutex_t *)CMBaseObjectGetDerivedStorage();
    int v12 = DerivedStorage;
    if (DerivedStorage)
    {
      pthread_mutex_lock(DerivedStorage);
      uint64_t v13 = sub_102E8((uint64_t)v12, a3, a2, a4);
    }
    else
    {
      if (sub_44EF8(0x1Bu, 4))
      {
        int v18 = sub_44F3C(0x1Bu);
        __uint64_t v19 = sub_4F1D8();
        uint64_t v20 = (const char *)sub_44F70(4);
        if (v18)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to get MCTF %p %d\n", v19, 27, v20, "AVE_MCTF_Plugin_CopyProperty", 146, "pMCTF != __null", a1, 0);
          __uint64_t v19 = sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get MCTF %p %d", v19, 27);
      }
      uint64_t v13 = 4294966296;
    }
    pthread_mutex_unlock(v12);
  }
  else
  {
    if (sub_44EF8(0x1Bu, 4))
    {
      int v14 = sub_44F3C(0x1Bu);
      __uint64_t v15 = sub_4F1D8();
      __uint64_t v16 = (const char *)sub_44F70(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %p %d\n", v15, 27, v16, "AVE_MCTF_Plugin_CopyProperty", 141, "instance != __null && propertyKey != __null && propertyValueOut != __null", a1, a2, a3, a4, 0);
        __uint64_t v17 = sub_4F1D8();
        long long v27 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %p %d", v17, 27, v27, "AVE_MCTF_Plugin_CopyProperty", 141);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %p %d", v15, 27, v16, "AVE_MCTF_Plugin_CopyProperty", 141);
      }
    }
    uint64_t v13 = 4294966295;
  }
  uint64_t v21 = sub_4F11C(v13);
  if (sub_44EF8(0x1Bu, 6))
  {
    int v22 = sub_44F3C(0x1Bu);
    __uint64_t v23 = sub_4F1D8();
    uint64_t v24 = (const char *)sub_44F70(6);
    if (v22)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %p %p %d\n", v23, 27, v24, "AVE_MCTF_Plugin_CopyProperty", a1, a2, a3, a4, v13);
      __uint64_t v25 = sub_4F1D8();
      __uint64_t v28 = sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %p %p %d", v25, 27, v28);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %p %p %d", v23, 27, v24);
    }
  }
  return v21;
}

uint64_t sub_508C0(const void *a1, const void *a2, const __CFNumber *a3)
{
  if (sub_44EF8(0x1Bu, 6))
  {
    int v6 = sub_44F3C(0x1Bu);
    __uint64_t v7 = sub_4F1D8();
    int v8 = (const char *)sub_44F70(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p %p %p\n", v7, 27, v8, "AVE_MCTF_Plugin_SetProperty", a1, a2, a3);
      __uint64_t v7 = sub_4F1D8();
      sub_44F70(6);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %p %p", v7);
  }
  if (a1 && a2 && a3)
  {
    DerivedStorage = (pthread_mutex_t *)CMBaseObjectGetDerivedStorage();
    __uint64_t v10 = DerivedStorage;
    if (DerivedStorage)
    {
      pthread_mutex_lock(DerivedStorage);
      uint64_t v11 = sub_10840((uint64_t)v10, a2, a3);
    }
    else
    {
      if (sub_44EF8(0x1Bu, 4))
      {
        int v16 = sub_44F3C(0x1Bu);
        __uint64_t v17 = sub_4F1D8();
        int v18 = (const char *)sub_44F70(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to get MCTF %p %d\n", v17, 27, v18, "AVE_MCTF_Plugin_SetProperty", 104, "pMCTF != __null", a1, 0);
          __uint64_t v17 = sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get MCTF %p %d", v17, 27);
      }
      uint64_t v11 = 4294966296;
    }
    pthread_mutex_unlock(v10);
  }
  else
  {
    if (sub_44EF8(0x1Bu, 4))
    {
      int v12 = sub_44F3C(0x1Bu);
      __uint64_t v13 = sub_4F1D8();
      int v14 = (const char *)sub_44F70(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d\n", v13, 27, v14, "AVE_MCTF_Plugin_SetProperty", 99, "instance != __null && propertyKey != __null && propertyValue != __null", a1, a2, a3, 0);
        __uint64_t v15 = sub_4F1D8();
        __uint64_t v23 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d", v15, 27, v23, "AVE_MCTF_Plugin_SetProperty");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d", v13, 27, v14, "AVE_MCTF_Plugin_SetProperty");
      }
    }
    uint64_t v11 = 4294966295;
  }
  sub_4F11C(v11);
  if (sub_44EF8(0x1Bu, 6))
  {
    int v19 = sub_44F3C(0x1Bu);
    __uint64_t v20 = sub_4F1D8();
    uint64_t v21 = (const char *)sub_44F70(6);
    if (v19)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %p %d\n", v20, 27, v21, "AVE_MCTF_Plugin_SetProperty", a1, a2, a3, v11);
      __uint64_t v20 = sub_4F1D8();
      sub_44F70(6);
    }
    syslog(3, "%lld %d AVE %s: %s Exit %p %p %p %d", v20, 27);
  }
  return v11;
}

uint64_t sub_50C74(const void *a1, const void *a2, unint64_t a3)
{
  int v3 = a3;
  unint64_t v6 = HIDWORD(a3);
  unint64_t v27 = 0;
  if (sub_44EF8(0x1Bu, 6))
  {
    int v7 = sub_44F3C(0x1Bu);
    __uint64_t v8 = sub_4F1D8();
    __uint64_t v9 = (const char *)sub_44F70(6);
    if (v7)
    {
      printf("%lld %d AVE %s: %s Enter %p %p %d %d\n", v8, 27, v9, "AVE_MCTF_Plugin_StartSession", a1, a2, v3, v6);
      __uint64_t v8 = sub_4F1D8();
      sub_44F70(6);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %p %d %d", v8);
  }
  if (a1 && a2 && v3 >= 1 && (int)v6 > 0)
  {
    DerivedStorage = (pthread_mutex_t *)CMBaseObjectGetDerivedStorage();
    uint64_t v11 = DerivedStorage;
    if (DerivedStorage)
    {
      unint64_t v27 = __PAIR64__(v6, v3);
      pthread_mutex_lock(DerivedStorage);
      v11[1].__sig = (uint64_t)a2;
      uint64_t v12 = sub_D6C4((uint64_t)v11, (int *)&v27);
      if (!v12) {
        goto LABEL_25;
      }
    }
    else
    {
      if (sub_44EF8(0x1Bu, 4))
      {
        int v17 = sub_44F3C(0x1Bu);
        __uint64_t v18 = sub_4F1D8();
        int v19 = (const char *)sub_44F70(4);
        if (v17)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to get MCTF %p %d\n", v18, 27, v19, "AVE_MCTF_Plugin_StartSession", 191, "pMCTF != __null", a1, 0);
          __uint64_t v18 = sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get MCTF %p %d", v18, 27);
      }
      uint64_t v12 = 4294966296;
    }
    v11[1].__sig = 0;
LABEL_25:
    pthread_mutex_unlock(v11);
    goto LABEL_26;
  }
  if (sub_44EF8(0x1Bu, 4))
  {
    int v13 = sub_44F3C(0x1Bu);
    __uint64_t v14 = sub_4F1D8();
    __uint64_t v15 = (const char *)sub_44F70(4);
    if (v13)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d %d %d\n", v14, 27, v15, "AVE_MCTF_Plugin_StartSession", 186, "filter != __null && session != __null && dimensions.width > 0 && dimensions.height > 0", a1, a2, v3, v6, 0);
      __uint64_t v16 = sub_4F1D8();
      __uint64_t v26 = sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d %d %d", v16, 27, v26, "AVE_MCTF_Plugin_StartSession");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d %d %d", v14, 27, v15, "AVE_MCTF_Plugin_StartSession");
    }
  }
  uint64_t v12 = 4294966295;
LABEL_26:
  uint64_t v20 = sub_4F11C(v12);
  if (sub_44EF8(0x1Bu, 6))
  {
    int v21 = sub_44F3C(0x1Bu);
    __uint64_t v22 = sub_4F1D8();
    __uint64_t v23 = (const char *)sub_44F70(6);
    if (v21)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %d %d %d\n", v22, 27, v23, "AVE_MCTF_Plugin_StartSession", a1, a2, v3, v6, v12);
      __uint64_t v24 = sub_4F1D8();
      sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %d %d %d", v24, 27);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %d %d %d", v22, 27);
    }
  }
  return v20;
}

uint64_t sub_51088(const void *a1, const void *a2, const void *a3, void *a4, const void *a5)
{
  if (sub_44EF8(0x1Bu, 7))
  {
    int v10 = sub_44F3C(0x1Bu);
    __uint64_t v11 = sub_4F1D8();
    uint64_t v12 = (const char *)sub_44F70(7);
    if (v10)
    {
      printf("%lld %d AVE %s: %s Enter %p %p %p %lld %d %p\n", v11, 27, v12, "AVE_MCTF_Plugin_ProcessFrame", a1, a2, a3, *a4, *((_DWORD *)a4 + 2), a5);
      __uint64_t v13 = sub_4F1D8();
      int v30 = sub_44F70(7);
      syslog(3, "%lld %d AVE %s: %s Enter %p %p %p %lld %d %p", v13, 27, v30, "AVE_MCTF_Plugin_ProcessFrame");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p %p %p %lld %d %p", v11, 27, v12, "AVE_MCTF_Plugin_ProcessFrame");
    }
  }
  if (a1 && a2 && a3)
  {
    DerivedStorage = (pthread_mutex_t *)CMBaseObjectGetDerivedStorage();
    __uint64_t v15 = DerivedStorage;
    if (DerivedStorage)
    {
      pthread_mutex_lock(DerivedStorage);
      uint64_t v16 = sub_E42C();
    }
    else
    {
      if (sub_44EF8(0x1Bu, 4))
      {
        int v21 = sub_44F3C(0x1Bu);
        __uint64_t v22 = sub_4F1D8();
        __uint64_t v23 = (const char *)sub_44F70(4);
        if (v21)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to get MCTF %p %d\n", v22, 27, v23, "AVE_MCTF_Plugin_ProcessFrame", 251, "pMCTF != __null", a1, 0);
          __uint64_t v22 = sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get MCTF %p %d", v22, 27);
      }
      uint64_t v16 = 4294966296;
    }
    pthread_mutex_unlock(v15);
  }
  else
  {
    if (sub_44EF8(0x1Bu, 4))
    {
      int v17 = sub_44F3C(0x1Bu);
      __uint64_t v18 = sub_4F1D8();
      int v19 = (const char *)sub_44F70(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %lld %d %p %d\n", v18, 27, v19, "AVE_MCTF_Plugin_ProcessFrame", 246, "filter != __null && frame != __null && pixelBuffer != __null", a1, a2, a3, *a4, *((_DWORD *)a4 + 2), a5, 0);
        __uint64_t v20 = sub_4F1D8();
        __uint64_t v31 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %lld %d %p %d", v20, 27, v31, "AVE_MCTF_Plugin_ProcessFrame", 246, "filter != __null && frame != __null && pixelBuffer != __null", a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %lld %d %p %d", v18, 27, v19, "AVE_MCTF_Plugin_ProcessFrame", 246, "filter != __null && frame != __null && pixelBuffer != __null", a1);
      }
    }
    uint64_t v16 = 4294966295;
  }
  uint64_t v24 = sub_4F11C(v16);
  if (sub_44EF8(0x1Bu, 7))
  {
    int v25 = sub_44F3C(0x1Bu);
    __uint64_t v26 = sub_4F1D8();
    unint64_t v27 = (const char *)sub_44F70(7);
    if (v25)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %p %lld %d %p %d\n", v26, 27, v27, "AVE_MCTF_Plugin_ProcessFrame", a1, a2, a3, *a4, *((_DWORD *)a4 + 2), a5, v16);
      __uint64_t v28 = sub_4F1D8();
      uint64_t v32 = sub_44F70(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %p %lld %d %p %d", v28, 27, v32, "AVE_MCTF_Plugin_ProcessFrame", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %p %lld %d %p %d", v26, 27, v27, "AVE_MCTF_Plugin_ProcessFrame", a1);
    }
  }
  return v24;
}

uint64_t sub_514D8(const void *a1, void *a2)
{
  if (sub_44EF8(0x1Bu, 6))
  {
    int v4 = sub_44F3C(0x1Bu);
    __uint64_t v5 = sub_4F1D8();
    unint64_t v6 = (const char *)sub_44F70(6);
    if (v4)
    {
      printf("%lld %d AVE %s: %s Enter %p %lld %d\n", v5, 27, v6, "AVE_MCTF_Plugin_CompleteFrames", a1, *a2, *((_DWORD *)a2 + 2));
      __uint64_t v5 = sub_4F1D8();
      sub_44F70(6);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %lld %d", v5);
  }
  if (a1)
  {
    DerivedStorage = (pthread_mutex_t *)CMBaseObjectGetDerivedStorage();
    __uint64_t v8 = DerivedStorage;
    if (DerivedStorage)
    {
      pthread_mutex_lock(DerivedStorage);
      uint64_t v9 = sub_F9A4((uint64_t)v8);
    }
    else
    {
      if (sub_44EF8(0x1Bu, 4))
      {
        int v14 = sub_44F3C(0x1Bu);
        __uint64_t v15 = sub_4F1D8();
        uint64_t v16 = (const char *)sub_44F70(4);
        if (v14)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to get MCTF %p %d\n", v15, 27, v16, "AVE_MCTF_Plugin_CompleteFrames", 302, "pMCTF != __null", a1, 0);
          __uint64_t v15 = sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get MCTF %p %d", v15, 27);
      }
      uint64_t v9 = 4294966296;
    }
    pthread_mutex_unlock(v8);
  }
  else
  {
    if (sub_44EF8(0x1Bu, 4))
    {
      int v10 = sub_44F3C(0x1Bu);
      __uint64_t v11 = sub_4F1D8();
      uint64_t v12 = (const char *)sub_44F70(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %lld %d %d\n", v11, 27, v12, "AVE_MCTF_Plugin_CompleteFrames", 297, "filter != __null", 0, *a2, *((_DWORD *)a2 + 2), 0);
        __uint64_t v13 = sub_4F1D8();
        __uint64_t v22 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %lld %d %d", v13, 27, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %lld %d %d", v11, 27, v12);
      }
    }
    uint64_t v9 = 4294966295;
  }
  uint64_t v17 = sub_4F11C(v9);
  if (sub_44EF8(0x1Bu, 6))
  {
    int v18 = sub_44F3C(0x1Bu);
    __uint64_t v19 = sub_4F1D8();
    __uint64_t v20 = (const char *)sub_44F70(6);
    if (v18)
    {
      printf("%lld %d AVE %s: %s Exit %p %lld %d %d\n", v19, 27, v20, "AVE_MCTF_Plugin_CompleteFrames", a1, *a2, *((_DWORD *)a2 + 2), v9);
      __uint64_t v19 = sub_4F1D8();
      sub_44F70(6);
    }
    syslog(3, "%lld %d AVE %s: %s Exit %p %lld %d %d", v19);
  }
  return v17;
}

uint64_t sub_518A0(const void *a1, CFTypeRef *a2)
{
  if (sub_44EF8(0x1Bu, 6))
  {
    int v4 = sub_44F3C(0x1Bu);
    __uint64_t v5 = sub_4F1D8();
    unint64_t v6 = (const char *)sub_44F70(6);
    if (v4)
    {
      printf("%lld %d AVE %s: %s Enter %p %p\n", v5, 27, v6, "AVE_MCTF_Plugin_CopySupportedPropertyDictionary", a1, a2);
      __uint64_t v7 = sub_4F1D8();
      __uint64_t v23 = (const char *)sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p %p", v7, 27, v23, "AVE_MCTF_Plugin_CopySupportedPropertyDictionary", a1, a2);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p %p", v5, 27, v6, "AVE_MCTF_Plugin_CopySupportedPropertyDictionary", a1, a2);
    }
  }
  if (a1 && a2)
  {
    *a2 = 0;
    DerivedStorage = (pthread_mutex_t *)CMBaseObjectGetDerivedStorage();
    uint64_t v9 = DerivedStorage;
    if (DerivedStorage)
    {
      pthread_mutex_lock(DerivedStorage);
      uint64_t v10 = sub_FD98(v9, a2);
    }
    else
    {
      if (sub_44EF8(0x1Bu, 4))
      {
        int v15 = sub_44F3C(0x1Bu);
        __uint64_t v16 = sub_4F1D8();
        uint64_t v17 = (const char *)sub_44F70(4);
        if (v15)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to get MCTF %p %d\n", v16, 27, v17, "AVE_MCTF_Plugin_CopySupportedPropertyDictionary", 347, "pMCTF != __null", a1, 0);
          __uint64_t v16 = sub_4F1D8();
          sub_44F70(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get MCTF %p %d", v16, 27);
      }
      uint64_t v10 = 4294966296;
    }
    pthread_mutex_unlock(v9);
  }
  else
  {
    if (sub_44EF8(0x1Bu, 4))
    {
      int v11 = sub_44F3C(0x1Bu);
      __uint64_t v12 = sub_4F1D8();
      __uint64_t v13 = (const char *)sub_44F70(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", v12, 27, v13, "AVE_MCTF_Plugin_CopySupportedPropertyDictionary", 340, "filter != __null && supportedPropertyDictionaryOut != __null", a1, a2, 0);
        __uint64_t v14 = sub_4F1D8();
        uint64_t v24 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v14, 27, v24);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v12, 27, v13);
      }
    }
    uint64_t v10 = 4294966295;
  }
  uint64_t v18 = sub_4F11C(v10);
  if (sub_44EF8(0x1Bu, 6))
  {
    int v19 = sub_44F3C(0x1Bu);
    __uint64_t v20 = sub_4F1D8();
    int v21 = (const char *)sub_44F70(6);
    if (v19)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %d\n", v20, 27, v21, "AVE_MCTF_Plugin_CopySupportedPropertyDictionary", a1, a2, v10);
      __uint64_t v20 = sub_4F1D8();
      sub_44F70(6);
    }
    syslog(3, "%lld %d AVE %s: %s Exit %p %p %d", v20);
  }
  return v18;
}

double sub_51C28(uint64_t a1)
{
  *(void *)(a1 + 56) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_51C3C(void *a1)
{
  if (sub_44EF8(0x24u, 6))
  {
    int v2 = sub_44F3C(0x24u);
    __uint64_t v3 = sub_4F1D8();
    int v4 = (const char *)sub_44F70(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld\n", v3, 36, v4, "AVE_DAL", "Uninit", a1, *a1);
      __uint64_t v3 = sub_4F1D8();
      sub_44F70(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld", v3);
  }
  uint64_t v5 = a1[4];
  if (v5)
  {
    sub_34C38(v5);
    operator delete();
  }
  unint64_t v6 = (unsigned char *)a1[3];
  if (v6)
  {
    uint64_t v7 = sub_37174(v6);
    a1[3] = 0;
  }
  else
  {
    uint64_t v7 = 0;
  }
  __uint64_t v8 = (pthread_mutex_t *)a1[1];
  if (v8)
  {
    uint64_t v7 = sub_34A54(v8);
    a1[1] = 0;
  }
  a1[2] = 0;
  if (sub_44EF8(0x24u, 6))
  {
    int v9 = sub_44F3C(0x24u);
    __uint64_t v10 = sub_4F1D8();
    int v11 = (const char *)sub_44F70(6);
    if (v9)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %d\n", v10, 36, v11, "AVE_DAL", "Uninit", a1, *a1, v7);
      __uint64_t v10 = sub_4F1D8();
      sub_44F70(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d", v10, 36);
  }
  return v7;
}

void *sub_51E64(void *a1)
{
  return a1;
}

uint64_t sub_51E90(void *a1, int a2, int a3)
{
  __uint64_t v33 = 0;
  if (sub_44EF8(0x24u, 6))
  {
    int v6 = sub_44F3C(0x24u);
    __uint64_t v7 = sub_4F1D8();
    __uint64_t v8 = (const char *)sub_44F70(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %d %d\n", v7, 36, v8, "AVE_DAL", "Init", a1, *a1, a2, a3);
      __uint64_t v7 = sub_4F1D8();
      sub_44F70(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %d %d", v7, 36);
  }
  if (a2 < 1 || a3 <= 0)
  {
    if (sub_44EF8(0x24u, 4))
    {
      int v18 = sub_44F3C(0x24u);
      __uint64_t v19 = sub_4F1D8();
      __uint64_t v20 = (const char *)sub_44F70(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %d\n", v19, 36, v20, "AVE_DAL", "Init", 87, "num > 0 && size > 0", a1, *a1, a2, a3);
        __uint64_t v19 = sub_4F1D8();
        __uint64_t v20 = (const char *)sub_44F70(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %d", v19, 36, v20, "AVE_DAL");
    }
    goto LABEL_24;
  }
  int v9 = sub_349EC();
  if (!v9)
  {
    if (sub_44EF8(0x24u, 4))
    {
      int v21 = sub_44F3C(0x24u);
      __uint64_t v22 = sub_4F1D8();
      __uint64_t v23 = (const char *)sub_44F70(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to create mutex %p %lld %d %d\n", v22, 36, v23, "AVE_DAL", "Init", 92, "pMutex != __null", a1, *a1, a2, a3);
        __uint64_t v24 = sub_4F1D8();
        __uint64_t v31 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to create mutex %p %lld %d %d", v24, 36, v31, "AVE_DAL");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to create mutex %p %lld %d %d", v22, 36, v23, "AVE_DAL");
      }
    }
LABEL_24:
    __uint64_t v10 = 0;
    uint64_t v13 = 4294966295;
    goto LABEL_25;
  }
  __uint64_t v10 = v9;
  int v11 = sub_34010(3);
  uint64_t v12 = sub_36D98(0, a3 * a2, (uint64_t)v11[1], &v33);
  if (!v12) {
    operator new();
  }
  uint64_t v13 = v12;
  if (sub_44EF8(0x24u, 4))
  {
    int v14 = sub_44F3C(0x24u);
    __uint64_t v15 = sub_4F1D8();
    __uint64_t v16 = (const char *)sub_44F70(4);
    if (v14)
    {
      printf("%lld %d AVE %s: %s::%s:%d %s | fail to create surface %p %lld %s %llx %d %d %d\n", v15, 36, v16, "AVE_DAL", "Init", 99, "ret == 0", a1, *a1, *v11, v11[1], a2, a3, v13);
      __uint64_t v17 = sub_4F1D8();
      int v30 = sub_44F70(4);
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to create surface %p %lld %s %llx %d %d %d", v17, 36, v30, "AVE_DAL", "Init", 99, "ret == 0");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to create surface %p %lld %s %llx %d %d %d", v15, 36, v16, "AVE_DAL", "Init", 99, "ret == 0");
    }
  }
LABEL_25:
  if (v33)
  {
    sub_37174(v33);
    __uint64_t v33 = 0;
  }
  if (v10) {
    sub_34A54(v10);
  }
  if (sub_44EF8(0x24u, 6))
  {
    int v25 = sub_44F3C(0x24u);
    __uint64_t v26 = sub_4F1D8();
    unint64_t v27 = (const char *)sub_44F70(6);
    if (v25)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %d %d %d\n", v26, 36, v27, "AVE_DAL", "Init", a1, *a1, a2, a3, v13);
      __uint64_t v28 = sub_4F1D8();
      uint64_t v32 = sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %d %d", v28, 36, v32);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %d %d", v26, 36, v27);
    }
  }
  return v13;
}

void sub_52600()
{
}

uint64_t sub_52624(void *a1, int a2, void *a3)
{
  int v28 = a2;
  if (sub_44EF8(0x24u, 8))
  {
    int v6 = sub_44F3C(0x24u);
    __uint64_t v7 = sub_4F1D8();
    __uint64_t v8 = (const char *)sub_44F70(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %d %p\n", v7, 36, v8, "AVE_DAL", "Alloc", a1, *a1, a2, a3);
      __uint64_t v9 = sub_4F1D8();
      __uint64_t v24 = sub_44F70(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %d %p", v9, 36, v24);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %d %p", v7, 36, v8);
    }
  }
  if (a2 >= 1 && a3 && *((_DWORD *)a1 + 5) >= a2)
  {
    *a3 = 0;
    sub_34A9C((pthread_mutex_t *)a1[1]);
    uint64_t v10 = sub_34E14(a1[4], a3, &v28);
    if (v10 && sub_44EF8(0x24u, 4))
    {
      int v11 = sub_44F3C(0x24u);
      __uint64_t v12 = sub_4F1D8();
      uint64_t v13 = (const char *)sub_44F70(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to allocate memory from UC info pool %p %lld %p %d %d\n", v12, 36, v13, "AVE_DAL", "Alloc", 210, "ret == 0", a1, *a1, a3, v28, v10);
        __uint64_t v14 = sub_4F1D8();
        int v25 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to allocate memory from UC info pool %p %lld %p %d %d", v14, 36, v25, "AVE_DAL", "Alloc");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to allocate memory from UC info pool %p %lld %p %d %d", v12, 36, v13, "AVE_DAL", "Alloc");
      }
    }
    sub_34AD0((pthread_mutex_t *)a1[1]);
  }
  else
  {
    if (sub_44EF8(0x24u, 4))
    {
      int v15 = sub_44F3C(0x24u);
      __uint64_t v16 = sub_4F1D8();
      __uint64_t v17 = (const char *)sub_44F70(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %d %p\n", v16, 36, v17, "AVE_DAL", "Alloc", 202, "0 < size && size <= m_iSize && pAddr != __null", a1, *a1, *((_DWORD *)a1 + 5), a2, a3);
        __uint64_t v18 = sub_4F1D8();
        __uint64_t v26 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %d %p", v18, 36, v26, "AVE_DAL", "Alloc");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %d %p", v16, 36, v17, "AVE_DAL", "Alloc");
      }
    }
    uint64_t v10 = 4294966295;
  }
  if (sub_44EF8(0x5Du, 8))
  {
    int v19 = sub_44F3C(0x5Du);
    __uint64_t v20 = sub_4F1D8();
    int v21 = (const char *)sub_44F70(8);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d\n", v20, 93, v21, "AVE_DAL", "Alloc", a1, *a1, v28, a3, v10);
      __uint64_t v22 = sub_4F1D8();
      unint64_t v27 = sub_44F70(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d", v22, 93, v27, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d", v20, 93, v21, "AVE_DAL");
    }
  }
  return v10;
}

uint64_t sub_52A90(void *a1, const void *a2)
{
  if (sub_44EF8(0x24u, 8))
  {
    int v4 = sub_44F3C(0x24u);
    __uint64_t v5 = sub_4F1D8();
    int v6 = (const char *)sub_44F70(8);
    if (v4)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p\n", v5, 36, v6, "AVE_DAL", "Free", a1, *a1, a2);
      __uint64_t v5 = sub_4F1D8();
      sub_44F70(8);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p", v5, 36);
  }
  if (a2)
  {
    sub_34A9C((pthread_mutex_t *)a1[1]);
    uint64_t v7 = sub_34F68(a1[4], (unint64_t)a2);
    if (v7 && sub_44EF8(0x24u, 4))
    {
      int v8 = sub_44F3C(0x24u);
      __uint64_t v9 = sub_4F1D8();
      uint64_t v10 = (const char *)sub_44F70(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to free memory to UC info pool %p %lld %p %d\n", v9, 36, v10, "AVE_DAL", "Free", 245, "ret == 0", a1, *a1, a2, v7);
        __uint64_t v11 = sub_4F1D8();
        int v21 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to free memory to UC info pool %p %lld %p %d", v11, 36, v21, "AVE_DAL", "Free");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to free memory to UC info pool %p %lld %p %d", v9, 36, v10, "AVE_DAL", "Free");
      }
    }
    sub_34AD0((pthread_mutex_t *)a1[1]);
  }
  else
  {
    if (sub_44EF8(0x24u, 4))
    {
      int v12 = sub_44F3C(0x24u);
      __uint64_t v13 = sub_4F1D8();
      __uint64_t v14 = (const char *)sub_44F70(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %p\n", v13, 36, v14, "AVE_DAL", "Free", 238, "addr != 0", a1, *a1, 0);
        __uint64_t v15 = sub_4F1D8();
        __uint64_t v22 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %p", v15, 36, v22, "AVE_DAL");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %p", v13, 36, v14, "AVE_DAL");
      }
    }
    uint64_t v7 = 4294966295;
  }
  if (sub_44EF8(0x24u, 8))
  {
    int v16 = sub_44F3C(0x24u);
    __uint64_t v17 = sub_4F1D8();
    __uint64_t v18 = (const char *)sub_44F70(8);
    if (v16)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %d\n", v17, 36, v18, "AVE_DAL", "Free", a1, *a1, a2, v7);
      __uint64_t v19 = sub_4F1D8();
      __uint64_t v23 = sub_44F70(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d", v19, 36, v23);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d", v17, 36, v18);
    }
  }
  return v7;
}

uint64_t sub_52E9C(void *a1, int a2, void *a3)
{
  if (sub_44EF8(0x24u, 8))
  {
    int v6 = sub_44F3C(0x24u);
    __uint64_t v7 = sub_4F1D8();
    int v8 = (const char *)sub_44F70(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %d %p\n", v7, 36, v8, "AVE_DAL", "Idx2Addr", a1, *a1, a2, a3);
      __uint64_t v9 = sub_4F1D8();
      __uint64_t v24 = sub_44F70(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %d %p", v9, 36, v24);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %d %p", v7, 36, v8);
    }
  }
  if (a2 < 0 || !a3)
  {
    if (sub_44EF8(0x24u, 4))
    {
      int v15 = sub_44F3C(0x24u);
      __uint64_t v16 = sub_4F1D8();
      __uint64_t v17 = (const char *)sub_44F70(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %p\n", v16, 36, v17, "AVE_DAL", "Idx2Addr", 277, "idx >= 0 && pAddr != __null", a1, *a1, a2, a3);
        __uint64_t v18 = sub_4F1D8();
        __uint64_t v26 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %p", v18, 36, v26, "AVE_DAL", "Idx2Addr");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %p", v16, 36, v17, "AVE_DAL", "Idx2Addr");
      }
    }
    uint64_t v10 = 4294966295;
  }
  else
  {
    sub_34A9C((pthread_mutex_t *)a1[1]);
    uint64_t v10 = sub_35074(a1[4], a2, a3);
    if (v10 && sub_44EF8(0x24u, 4))
    {
      int v11 = sub_44F3C(0x24u);
      __uint64_t v12 = sub_4F1D8();
      __uint64_t v13 = (const char *)sub_44F70(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to convert index in UC info pool %p %lld %d %p %d\n", v12, 36, v13, "AVE_DAL", "Idx2Addr", 284, "ret == 0", a1, *a1, a2, a3, v10);
        __uint64_t v14 = sub_4F1D8();
        int v25 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to convert index in UC info pool %p %lld %d %p %d", v14, 36, v25, "AVE_DAL", "Idx2Addr", 284);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to convert index in UC info pool %p %lld %d %p %d", v12, 36, v13, "AVE_DAL", "Idx2Addr", 284);
      }
    }
    sub_34AD0((pthread_mutex_t *)a1[1]);
  }
  if (sub_44EF8(0x24u, 8))
  {
    int v19 = sub_44F3C(0x24u);
    __uint64_t v20 = sub_4F1D8();
    int v21 = (const char *)sub_44F70(8);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d\n", v20, 36, v21, "AVE_DAL", "Idx2Addr", a1, *a1, a2, a3, v10);
      __uint64_t v22 = sub_4F1D8();
      unint64_t v27 = sub_44F70(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d", v22, 36, v27, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d", v20, 36, v21, "AVE_DAL");
    }
  }
  return v10;
}

uint64_t sub_532E8(void *a1, const void *a2, _DWORD *a3)
{
  if (sub_44EF8(0x24u, 8))
  {
    int v6 = sub_44F3C(0x24u);
    __uint64_t v7 = sub_4F1D8();
    int v8 = (const char *)sub_44F70(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p\n", v7, 36, v8, "AVE_DAL", "Addr2Idx", a1, *a1, a2, a3);
      __uint64_t v9 = sub_4F1D8();
      __uint64_t v24 = sub_44F70(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p", v9, 36, v24);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p", v7, 36, v8);
    }
  }
  if (a3)
  {
    sub_34A9C((pthread_mutex_t *)a1[1]);
    uint64_t v10 = sub_350F0(a1[4], (unint64_t)a2, a3);
    if (v10 && sub_44EF8(0x24u, 4))
    {
      int v11 = sub_44F3C(0x24u);
      __uint64_t v12 = sub_4F1D8();
      __uint64_t v13 = (const char *)sub_44F70(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to convert address in UC info pool %p %lld %p %p %d\n", v12, 36, v13, "AVE_DAL", "Addr2Idx", 323, "ret == 0", a1, *a1, a2, a3, v10);
        __uint64_t v14 = sub_4F1D8();
        int v25 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to convert address in UC info pool %p %lld %p %p %d", v14, 36, v25, "AVE_DAL", "Addr2Idx", 323);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to convert address in UC info pool %p %lld %p %p %d", v12, 36, v13, "AVE_DAL", "Addr2Idx", 323);
      }
    }
    sub_34AD0((pthread_mutex_t *)a1[1]);
  }
  else
  {
    if (sub_44EF8(0x24u, 4))
    {
      int v15 = sub_44F3C(0x24u);
      __uint64_t v16 = sub_4F1D8();
      __uint64_t v17 = (const char *)sub_44F70(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %p %p\n", v16, 36, v17, "AVE_DAL", "Addr2Idx", 316, "pIdx != __null", a1, *a1, a2, 0);
        __uint64_t v18 = sub_4F1D8();
        __uint64_t v26 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %p %p", v18, 36, v26, "AVE_DAL", "Addr2Idx");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %p %p", v16, 36, v17, "AVE_DAL", "Addr2Idx");
      }
    }
    uint64_t v10 = 4294966295;
  }
  if (sub_44EF8(0x24u, 8))
  {
    int v19 = sub_44F3C(0x24u);
    __uint64_t v20 = sub_4F1D8();
    int v21 = (const char *)sub_44F70(8);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %d\n", v20, 36, v21, "AVE_DAL", "Addr2Idx", a1, *a1, a2, a3, v10);
      __uint64_t v22 = sub_4F1D8();
      unint64_t v27 = sub_44F70(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %d", v22, 36, v27, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %d", v20, 36, v21, "AVE_DAL");
    }
  }
  return v10;
}

uint64_t sub_53714(void *a1, uint32_t a2)
{
  uint64_t v24 = 0;
  if (sub_44EF8(0x24u, 6))
  {
    int v4 = sub_44F3C(0x24u);
    __uint64_t v5 = sub_4F1D8();
    int v6 = (const char *)sub_44F70(6);
    if (v4)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %d\n", v5, 36, v6, "AVE_DAL", "UCCreate", a1, *a1, a2);
      __uint64_t v5 = sub_4F1D8();
      sub_44F70(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %d", v5, 36);
  }
  if (a2 - 1 >= 4)
  {
    if (sub_44EF8(0x24u, 4))
    {
      int v12 = sub_44F3C(0x24u);
      __uint64_t v13 = sub_4F1D8();
      __uint64_t v14 = (const char *)sub_44F70(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %d\n", v13, 36, v14, "AVE_DAL", "UCCreate", 388, "AVE_ClientType_None < type && type < AVE_ClientType_Max", a1, *a1, a2);
        __uint64_t v15 = sub_4F1D8();
        __uint64_t v22 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %d", v15, 36, v22, "AVE_DAL");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %d", v13, 36, v14, "AVE_DAL");
      }
    }
    uint64_t v7 = 4294966295;
  }
  else
  {
    uint64_t v7 = sub_42EAC(a2, &v24);
    if (v7)
    {
      if (sub_44EF8(0x24u, 4))
      {
        int v8 = sub_44F3C(0x24u);
        __uint64_t v9 = sub_4F1D8();
        uint64_t v10 = (const char *)sub_44F70(4);
        if (v8)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | fail to create UC %p %lld %d %d\n", v9, 36, v10, "AVE_DAL", "UCCreate", 392, "ret == 0", a1, *a1, a2, v7);
          __uint64_t v11 = sub_4F1D8();
          int v21 = sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to create UC %p %lld %d %d", v11, 36, v21, "AVE_DAL");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to create UC %p %lld %d %d", v9, 36, v10, "AVE_DAL");
        }
      }
    }
    else
    {
      a1[5] = v24;
    }
  }
  if (sub_44EF8(0x24u, 6))
  {
    int v16 = sub_44F3C(0x24u);
    __uint64_t v17 = sub_4F1D8();
    __uint64_t v18 = (const char *)sub_44F70(6);
    if (v16)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d\n", v17, 36, v18, "AVE_DAL", "UCCreate", a1, *a1, a2, (const void *)a1[5], v7);
      __uint64_t v19 = sub_4F1D8();
      __uint64_t v23 = sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d", v19, 36, v23, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d", v17, 36, v18, "AVE_DAL");
    }
  }
  return v7;
}

uint64_t sub_53B50(const void **a1)
{
  if (sub_44EF8(0x24u, 6))
  {
    int v2 = sub_44F3C(0x24u);
    __uint64_t v3 = sub_4F1D8();
    int v4 = (const char *)sub_44F70(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p\n", v3, 36, v4, "AVE_DAL", "UCDestroy", a1, *a1, a1[5]);
      __uint64_t v3 = sub_4F1D8();
      sub_44F70(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p", v3, 36);
  }
  __uint64_t v5 = a1[5];
  if (v5)
  {
    uint64_t v6 = sub_43250(v5);
    a1[5] = 0;
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (sub_44EF8(0x24u, 6))
  {
    int v7 = sub_44F3C(0x24u);
    __uint64_t v8 = sub_4F1D8();
    __uint64_t v9 = (const char *)sub_44F70(6);
    if (v7)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %d\n", v8, 36, v9, "AVE_DAL", "UCDestroy", a1, *a1, a1[5], v6);
      __uint64_t v10 = sub_4F1D8();
      int v12 = sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d", v10, 36, v12);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d", v8, 36, v9);
    }
  }
  return v6;
}

uint64_t sub_53D58(void *a1, uint64_t a2, void *a3)
{
  if (sub_44EF8(0x24u, 6))
  {
    int v6 = sub_44F3C(0x24u);
    __uint64_t v7 = sub_4F1D8();
    __uint64_t v8 = (const char *)sub_44F70(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p\n", v7, 36, v8, "AVE_DAL", "UCOpen", a1, *a1, (const void *)a1[5], (const void *)a2, a3);
      __uint64_t v9 = sub_4F1D8();
      int v25 = sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v9, 36, v25, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v7, 36, v8, "AVE_DAL");
    }
  }
  if (a2 && a3)
  {
    sub_4D614((char *)(a2 + 40), "803.48.1", 16);
    *(_DWORD *)(a2 + 56) = sub_4EE34(a1[3]);
    __uint64_t v10 = sub_3E4B0();
    memcpy((void *)(a2 + 64), v10, 0x588uLL);
    *(void *)(a2 + 1480) = 0;
    sub_4539C((void *)(a2 + 1480), a2 + 1488);
    uint64_t v11 = sub_43490((const void *)a1[5], (const void *)a2, a3);
    if (v11)
    {
      if (sub_44EF8(0x24u, 4))
      {
        int v12 = sub_44F3C(0x24u);
        __uint64_t v13 = sub_4F1D8();
        __uint64_t v14 = (const char *)sub_44F70(4);
        if (v12)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | fail to open client %p %lld %p %p %d\n", v13, 36, v14, "AVE_DAL", "UCOpen", 455, "ret == 0", a1, *a1, (const void *)a2, a3, v11);
          __uint64_t v15 = sub_4F1D8();
          __uint64_t v26 = sub_44F70(4);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to open client %p %lld %p %p %d", v15, 36, v26, "AVE_DAL", "UCOpen", 455);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to open client %p %lld %p %p %d", v13, 36, v14, "AVE_DAL", "UCOpen", 455);
        }
      }
    }
    else
    {
      *(_DWORD *)(a2 + 56) = 0;
      *a1 = *a3;
    }
  }
  else
  {
    if (sub_44EF8(0x24u, 4))
    {
      int v16 = sub_44F3C(0x24u);
      __uint64_t v17 = sub_4F1D8();
      __uint64_t v18 = (const char *)sub_44F70(4);
      if (v16)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p\n", v17, 36, v18, "AVE_DAL", "UCOpen", 443, "pIn != __null && pOut != __null", a1, *a1, (const void *)a2, a3);
        __uint64_t v19 = sub_4F1D8();
        unint64_t v27 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v19, 36, v27, "AVE_DAL", "UCOpen");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v17, 36, v18, "AVE_DAL", "UCOpen");
      }
    }
    uint64_t v11 = 4294966295;
  }
  if (sub_44EF8(0x24u, 6))
  {
    int v20 = sub_44F3C(0x24u);
    __uint64_t v21 = sub_4F1D8();
    __uint64_t v22 = (const char *)sub_44F70(6);
    if (v20)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d\n", v21, 36, v22, "AVE_DAL", "UCOpen", a1, *a1, (const void *)a1[5], (const void *)a2, a3, v11);
      __uint64_t v23 = sub_4F1D8();
      int v28 = sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v23, 36, v28, "AVE_DAL", "UCOpen");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v21, 36, v22, "AVE_DAL", "UCOpen");
    }
  }
  return v11;
}

uint64_t sub_541E8(const void **a1, const void *a2, void *a3)
{
  if (sub_44EF8(0x24u, 6))
  {
    int v6 = sub_44F3C(0x24u);
    __uint64_t v7 = sub_4F1D8();
    __uint64_t v8 = (const char *)sub_44F70(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p\n", v7, 36, v8, "AVE_DAL", "UCClose", a1, *a1, a1[5], a2, a3);
      __uint64_t v9 = sub_4F1D8();
      uint64_t v24 = sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v9, 36, v24, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v7, 36, v8, "AVE_DAL");
    }
  }
  if (a2 && a3)
  {
    uint64_t v10 = sub_43814(a1[5], a2, a3);
    if (v10 && sub_44EF8(0x24u, 4))
    {
      int v11 = sub_44F3C(0x24u);
      __uint64_t v12 = sub_4F1D8();
      __uint64_t v13 = (const char *)sub_44F70(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to close client %p %lld %p %p %d\n", v12, 36, v13, "AVE_DAL", "UCClose", 490, "ret == 0", a1, *a1, a2, a3, v10);
        __uint64_t v14 = sub_4F1D8();
        int v25 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to close client %p %lld %p %p %d", v14, 36, v25, "AVE_DAL", "UCClose", 490);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to close client %p %lld %p %p %d", v12, 36, v13, "AVE_DAL", "UCClose", 490);
      }
    }
  }
  else
  {
    if (sub_44EF8(0x24u, 4))
    {
      int v15 = sub_44F3C(0x24u);
      __uint64_t v16 = sub_4F1D8();
      __uint64_t v17 = (const char *)sub_44F70(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p\n", v16, 36, v17, "AVE_DAL", "UCClose", 486, "pIn != __null && pOut != __null", a1, *a1, a2, a3);
        __uint64_t v18 = sub_4F1D8();
        __uint64_t v26 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v18, 36, v26, "AVE_DAL", "UCClose");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v16, 36, v17, "AVE_DAL", "UCClose");
      }
    }
    uint64_t v10 = 4294966295;
  }
  if (sub_44EF8(0x24u, 6))
  {
    int v19 = sub_44F3C(0x24u);
    __uint64_t v20 = sub_4F1D8();
    __uint64_t v21 = (const char *)sub_44F70(6);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d\n", v20, 36, v21, "AVE_DAL", "UCClose", a1, *a1, a1[5], a2, a3, v10);
      __uint64_t v22 = sub_4F1D8();
      unint64_t v27 = sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v22, 36, v27, "AVE_DAL", "UCClose");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v20, 36, v21, "AVE_DAL", "UCClose");
    }
  }
  return v10;
}

uint64_t sub_54624(const void **a1, const void *a2, const void *a3, void *a4)
{
  if (sub_44EF8(0x24u, 6))
  {
    int v8 = sub_44F3C(0x24u);
    __uint64_t v9 = sub_4F1D8();
    uint64_t v10 = (const char *)sub_44F70(6);
    if (v8)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p %p\n", v9, 36, v10, "AVE_DAL", "UCConfig", a1, *a1, a1[5], a2, a3, a4);
      __uint64_t v11 = sub_4F1D8();
      __uint64_t v26 = sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p %p", v11, 36, v26, "AVE_DAL", "UCConfig");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p %p", v9, 36, v10, "AVE_DAL", "UCConfig");
    }
  }
  if (a2 && a3 && a4)
  {
    uint64_t v12 = sub_43BA8(a1[5], a2, a3, a4);
    if (v12 && sub_44EF8(0x24u, 4))
    {
      int v13 = sub_44F3C(0x24u);
      __uint64_t v14 = sub_4F1D8();
      int v15 = (const char *)sub_44F70(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to config %p %lld %p %p %p %p %d\n", v14, 36, v15, "AVE_DAL", "UCConfig", 525, "ret == 0", a1, *a1, a1[5], a2, a3, a4, v12);
        __uint64_t v16 = sub_4F1D8();
        unint64_t v27 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to config %p %lld %p %p %p %p %d", v16, 36, v27, "AVE_DAL", "UCConfig", 525, "ret == 0", a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to config %p %lld %p %p %p %p %d", v14, 36, v15, "AVE_DAL", "UCConfig", 525, "ret == 0", a1);
      }
    }
  }
  else
  {
    if (sub_44EF8(0x24u, 4))
    {
      int v17 = sub_44F3C(0x24u);
      __uint64_t v18 = sub_4F1D8();
      int v19 = (const char *)sub_44F70(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p %p\n", v18, 36, v19, "AVE_DAL", "UCConfig", 520, "pRecvPort != __null && pIn != __null && pOut != __null", a1, *a1, a2, a3, a4);
        __uint64_t v20 = sub_4F1D8();
        int v28 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p %p", v20, 36, v28, "AVE_DAL", "UCConfig", 520);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p %p", v18, 36, v19, "AVE_DAL", "UCConfig", 520);
      }
    }
    uint64_t v12 = 4294966295;
  }
  if (sub_44EF8(0x24u, 6))
  {
    int v21 = sub_44F3C(0x24u);
    __uint64_t v22 = sub_4F1D8();
    __uint64_t v23 = (const char *)sub_44F70(6);
    if (v21)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %p %d\n", v22, 36, v23, "AVE_DAL", "UCConfig", a1, *a1, a1[5], a2, a3, a4, v12);
      __uint64_t v24 = sub_4F1D8();
      uint64_t v29 = sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %p %d", v24, 36, v29, "AVE_DAL", "UCConfig", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %p %d", v22, 36, v23, "AVE_DAL", "UCConfig", a1);
    }
  }
  return v12;
}

uint64_t sub_54A9C(const void **a1, const void *a2, void *a3)
{
  if (sub_44EF8(0x24u, 6))
  {
    int v6 = sub_44F3C(0x24u);
    __uint64_t v7 = sub_4F1D8();
    int v8 = (const char *)sub_44F70(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p\n", v7, 36, v8, "AVE_DAL", "UCStart", a1, *a1, a1[5], a2, a3);
      __uint64_t v9 = sub_4F1D8();
      __uint64_t v24 = sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v9, 36, v24, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v7, 36, v8, "AVE_DAL");
    }
  }
  if (a2 && a3)
  {
    uint64_t v10 = sub_43FA0(a1[5], a2, a3);
    if (v10 && sub_44EF8(0x24u, 4))
    {
      int v11 = sub_44F3C(0x24u);
      __uint64_t v12 = sub_4F1D8();
      int v13 = (const char *)sub_44F70(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to start %p %lld %p %p %d\n", v12, 36, v13, "AVE_DAL", "UCStart", 588, "ret == 0", a1, *a1, a2, a3, v10);
        __uint64_t v14 = sub_4F1D8();
        int v25 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to start %p %lld %p %p %d", v14, 36, v25, "AVE_DAL", "UCStart", 588);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to start %p %lld %p %p %d", v12, 36, v13, "AVE_DAL", "UCStart", 588);
      }
    }
  }
  else
  {
    if (sub_44EF8(0x24u, 4))
    {
      int v15 = sub_44F3C(0x24u);
      __uint64_t v16 = sub_4F1D8();
      int v17 = (const char *)sub_44F70(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p\n", v16, 36, v17, "AVE_DAL", "UCStart", 584, "pIn != __null && pOut != __null", a1, *a1, a2, a3);
        __uint64_t v18 = sub_4F1D8();
        __uint64_t v26 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v18, 36, v26, "AVE_DAL", "UCStart");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v16, 36, v17, "AVE_DAL", "UCStart");
      }
    }
    uint64_t v10 = 4294966295;
  }
  if (sub_44EF8(0x24u, 6))
  {
    int v19 = sub_44F3C(0x24u);
    __uint64_t v20 = sub_4F1D8();
    int v21 = (const char *)sub_44F70(6);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d\n", v20, 36, v21, "AVE_DAL", "UCStart", a1, *a1, a1[5], a2, a3, v10);
      __uint64_t v22 = sub_4F1D8();
      unint64_t v27 = sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v22, 36, v27, "AVE_DAL", "UCStart");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v20, 36, v21, "AVE_DAL", "UCStart");
    }
  }
  return v10;
}

uint64_t sub_54ED8(const void **a1, const void *a2, void *a3)
{
  if (sub_44EF8(0x24u, 6))
  {
    int v6 = sub_44F3C(0x24u);
    __uint64_t v7 = sub_4F1D8();
    int v8 = (const char *)sub_44F70(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p\n", v7, 36, v8, "AVE_DAL", "UCStop", a1, *a1, a1[5], a2, a3);
      __uint64_t v9 = sub_4F1D8();
      __uint64_t v24 = sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v9, 36, v24, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v7, 36, v8, "AVE_DAL");
    }
  }
  if (a2 && a3)
  {
    uint64_t v10 = sub_44338(a1[5], a2, a3);
    if (v10 && sub_44EF8(0x24u, 4))
    {
      int v11 = sub_44F3C(0x24u);
      __uint64_t v12 = sub_4F1D8();
      int v13 = (const char *)sub_44F70(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to stop %p %lld %p %p %d\n", v12, 36, v13, "AVE_DAL", "UCStop", 619, "ret == 0", a1, *a1, a2, a3, v10);
        __uint64_t v14 = sub_4F1D8();
        int v25 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to stop %p %lld %p %p %d", v14, 36, v25, "AVE_DAL", "UCStop", 619);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to stop %p %lld %p %p %d", v12, 36, v13, "AVE_DAL", "UCStop", 619);
      }
    }
  }
  else
  {
    if (sub_44EF8(0x24u, 4))
    {
      int v15 = sub_44F3C(0x24u);
      __uint64_t v16 = sub_4F1D8();
      int v17 = (const char *)sub_44F70(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p\n", v16, 36, v17, "AVE_DAL", "UCStop", 615, "pIn != __null && pOut != __null", a1, *a1, a2, a3);
        __uint64_t v18 = sub_4F1D8();
        __uint64_t v26 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v18, 36, v26, "AVE_DAL", "UCStop");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v16, 36, v17, "AVE_DAL", "UCStop");
      }
    }
    uint64_t v10 = 4294966295;
  }
  if (sub_44EF8(0x24u, 6))
  {
    int v19 = sub_44F3C(0x24u);
    __uint64_t v20 = sub_4F1D8();
    int v21 = (const char *)sub_44F70(6);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d\n", v20, 36, v21, "AVE_DAL", "UCStop", a1, *a1, a1[5], a2, a3, v10);
      __uint64_t v22 = sub_4F1D8();
      unint64_t v27 = sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v22, 36, v27, "AVE_DAL", "UCStop");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v20, 36, v21, "AVE_DAL", "UCStop");
    }
  }
  return v10;
}

uint64_t sub_55314(const void **a1, const void *a2, void *a3)
{
  if (sub_44EF8(0x24u, 8))
  {
    int v6 = sub_44F3C(0x24u);
    __uint64_t v7 = sub_4F1D8();
    int v8 = (const char *)sub_44F70(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p\n", v7, 36, v8, "AVE_DAL", "UCProcess", a1, *a1, a1[5], a2, a3);
      __uint64_t v9 = sub_4F1D8();
      __uint64_t v24 = sub_44F70(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v9, 36, v24, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v7, 36, v8, "AVE_DAL");
    }
  }
  if (a2 && a3)
  {
    uint64_t v10 = sub_446CC(a1[5], a2, a3);
    if (v10 && sub_44EF8(0x24u, 4))
    {
      int v11 = sub_44F3C(0x24u);
      __uint64_t v12 = sub_4F1D8();
      int v13 = (const char *)sub_44F70(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to process %p %lld %p %p %d\n", v12, 36, v13, "AVE_DAL", "UCProcess", 650, "ret == 0", a1, *a1, a2, a3, v10);
        __uint64_t v14 = sub_4F1D8();
        int v25 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to process %p %lld %p %p %d", v14, 36, v25, "AVE_DAL", "UCProcess", 650);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to process %p %lld %p %p %d", v12, 36, v13, "AVE_DAL", "UCProcess", 650);
      }
    }
  }
  else
  {
    if (sub_44EF8(0x24u, 4))
    {
      int v15 = sub_44F3C(0x24u);
      __uint64_t v16 = sub_4F1D8();
      int v17 = (const char *)sub_44F70(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p\n", v16, 36, v17, "AVE_DAL", "UCProcess", 646, "pIn != __null && pOut != __null", a1, *a1, a2, a3);
        __uint64_t v18 = sub_4F1D8();
        __uint64_t v26 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v18, 36, v26, "AVE_DAL", "UCProcess");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v16, 36, v17, "AVE_DAL", "UCProcess");
      }
    }
    uint64_t v10 = 4294966295;
  }
  if (sub_44EF8(0x24u, 8))
  {
    int v19 = sub_44F3C(0x24u);
    __uint64_t v20 = sub_4F1D8();
    int v21 = (const char *)sub_44F70(8);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d\n", v20, 36, v21, "AVE_DAL", "UCProcess", a1, *a1, a1[5], a2, a3, v10);
      __uint64_t v22 = sub_4F1D8();
      unint64_t v27 = sub_44F70(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v22, 36, v27, "AVE_DAL", "UCProcess");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v20, 36, v21, "AVE_DAL", "UCProcess");
    }
  }
  return v10;
}

uint64_t sub_55750(const void **a1, const void *a2, void *a3)
{
  if (sub_44EF8(0x24u, 6))
  {
    int v6 = sub_44F3C(0x24u);
    __uint64_t v7 = sub_4F1D8();
    int v8 = (const char *)sub_44F70(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p\n", v7, 36, v8, "AVE_DAL", "UCComplete", a1, *a1, a1[5], a2, a3);
      __uint64_t v9 = sub_4F1D8();
      __uint64_t v24 = sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v9, 36, v24, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v7, 36, v8, "AVE_DAL");
    }
  }
  if (a2 && a3)
  {
    uint64_t v10 = sub_44A60(a1[5], a2, a3);
    if (v10 && sub_44EF8(0x24u, 4))
    {
      int v11 = sub_44F3C(0x24u);
      __uint64_t v12 = sub_4F1D8();
      int v13 = (const char *)sub_44F70(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to complete %p %lld %p %p %d\n", v12, 36, v13, "AVE_DAL", "UCComplete", 681, "ret == 0", a1, *a1, a2, a3, v10);
        __uint64_t v14 = sub_4F1D8();
        int v25 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to complete %p %lld %p %p %d", v14, 36, v25, "AVE_DAL", "UCComplete", 681);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to complete %p %lld %p %p %d", v12, 36, v13, "AVE_DAL", "UCComplete", 681);
      }
    }
  }
  else
  {
    if (sub_44EF8(0x24u, 4))
    {
      int v15 = sub_44F3C(0x24u);
      __uint64_t v16 = sub_4F1D8();
      int v17 = (const char *)sub_44F70(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p\n", v16, 36, v17, "AVE_DAL", "UCComplete", 677, "pIn != __null && pOut != __null", a1, *a1, a2, a3);
        __uint64_t v18 = sub_4F1D8();
        __uint64_t v26 = sub_44F70(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v18, 36, v26, "AVE_DAL", "UCComplete");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v16, 36, v17, "AVE_DAL", "UCComplete");
      }
    }
    uint64_t v10 = 4294966295;
  }
  if (sub_44EF8(0x24u, 6))
  {
    int v19 = sub_44F3C(0x24u);
    __uint64_t v20 = sub_4F1D8();
    int v21 = (const char *)sub_44F70(6);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d\n", v20, 36, v21, "AVE_DAL", "UCComplete", a1, *a1, a1[5], a2, a3, v10);
      __uint64_t v22 = sub_4F1D8();
      unint64_t v27 = sub_44F70(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v22, 36, v27, "AVE_DAL", "UCComplete");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v20, 36, v21, "AVE_DAL", "UCComplete");
    }
  }
  return v10;
}

uint64_t sub_55B8C(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, unsigned int a8, char a9, int a10)
{
  uint64_t v42 = result;
  v64[128] = 4;
  v64[129] = a6;
  int v65 = 1 << (a6 - 1);
  uint64_t v66 = 0x1000000001;
  long long v67 = 0u;
  long long v68 = 0u;
  v60[64] = 4;
  v60[65] = a6;
  v60[66] = v65;
  uint64_t v61 = 0x1000000001;
  if (a6 <= 8) {
    int v10 = 3;
  }
  else {
    int v10 = 4;
  }
  int v39 = v10;
  long long v62 = 0uLL;
  long long v63 = 0uLL;
  v56[64] = 4;
  v56[65] = a6;
  v56[66] = 1 << (a6 - 1);
  uint64_t v57 = 0x1000000001;
  long long v58 = 0uLL;
  long long v59 = 0uLL;
  if (a5 >= 1)
  {
    uint64_t v37 = 0;
    unsigned int v36 = 0;
    unsigned int v48 = 0;
    if (a6 == 8) {
      char v11 = 1;
    }
    else {
      char v11 = 2;
    }
    if (a7) {
      uint64_t v12 = 8;
    }
    else {
      uint64_t v12 = 16;
    }
    int v13 = -1 << a6;
    if (!a7) {
      char v11 = a6 != 8;
    }
    unsigned int v14 = a8 >> v11;
    if (a7) {
      char v15 = 3;
    }
    else {
      char v15 = 4;
    }
    int v35 = 16 * v14;
    char v41 = v15;
    if (a7) {
      int v16 = 8;
    }
    else {
      int v16 = 4;
    }
    unsigned int v38 = v16;
    int v17 = ~v13;
    int v46 = 2 * v14;
    unsigned int v47 = v14;
    uint64_t v34 = 8 * v14;
    int v40 = ~v13;
    do
    {
      if (a4 < 1) {
        goto LABEL_59;
      }
      int v18 = 0;
      uint64_t v19 = v37;
      unsigned int v20 = v36;
      do
      {
        unsigned int v21 = *(_DWORD *)(v42
                        + (v48 >> 3 >> a9) * a10
                        + 4 * ((v18 >> v41 << a9) + (~(-1 << a9) & (v48 >> 3))));
        __uint64_t v22 = (unsigned __int8 *)(a2 + (v21 & 0xFFFFFFF));
        int v70 = v22;
        uint64_t v71 = 0;
        unint64_t v69 = 0;
        if (v21 >> 28)
        {
          double result = sub_5605C((uint64_t)&v69, v39, v38, (uint64_t)v72, 128, 16);
        }
        else
        {
          uint64_t v23 = 0;
          int v24 = 0;
          unsigned int v25 = 0;
          do
          {
            v24 -= a6;
            HIDWORD(v69) = v24;
            if (v24 < 0)
            {
              do
              {
                __uint64_t v26 = v22 + 1;
                int v70 = v22 + 1;
                unsigned int v25 = *v22 | (v25 << 8);
                v24 += 8;
                unint64_t v69 = __PAIR64__(v24, v25);
                ++v22;
              }
              while (v24 >= 8);
            }
            else
            {
              __uint64_t v26 = v22;
            }
            v72[v23++] = (v25 >> v24) & v17;
            __uint64_t v22 = v26;
          }
          while (v23 != 128);
        }
        LODWORD(v27) = 0;
        int v28 = 0;
        uint64_t v45 = v19;
        int v50 = v19;
        unsigned int v44 = v20;
        do
        {
          uint64_t v29 = 0;
          unsigned int v49 = v20;
          do
          {
            BOOL v31 = (int)(v28 + v48) < a5 && v18 + (int)v29 < a4;
            int v32 = v72[(int)v27];
            if (a7)
            {
              if (v21 >> 28)
              {
                double result = sub_56348(v60, v28, v29, v32);
                LOWORD(v32) = result;
              }
              if (v31)
              {
                if (a6 == 8) {
                  *(unsigned char *)(a3 + v20) = v32;
                }
                else {
                  *(_WORD *)(a3 + 2 * v20) = v32;
                }
              }
              uint64_t v27 = (int)v27 + 1;
              int v32 = v72[v27];
              if (v21 >> 28)
              {
                double result = sub_56348(v56, v28, v29, v32);
                LOWORD(v32) = result;
              }
              if (v31)
              {
                uint64_t v33 = v20 + 1;
LABEL_53:
                if (a6 == 8) {
                  *(unsigned char *)(a3 + v33) = v32;
                }
                else {
                  *(_WORD *)(a3 + 2 * v33) = v32;
                }
              }
            }
            else
            {
              if (v21 >> 28)
              {
                double result = sub_5627C(v64, v28, v29, v32);
                LOWORD(v32) = result;
              }
              if (v31)
              {
                uint64_t v33 = (v50 + v29);
                goto LABEL_53;
              }
            }
            LODWORD(v27) = v27 + 1;
            ++v29;
            v20 += 2;
          }
          while (v12 != v29);
          ++v28;
          unsigned int v20 = v49 + v46;
          v50 += v47;
        }
        while (v28 != 8);
        v18 += v12;
        int v17 = v40;
        unsigned int v20 = v44 + 2 * v12;
        uint64_t v19 = v45 + v12;
      }
      while (v18 < a4);
LABEL_59:
      v36 += v35;
      v37 += v34;
      v48 += 8;
    }
    while ((int)v48 < a5);
  }
  return result;
}

uint64_t sub_55FF0(uint64_t a1, int a2)
{
  unsigned int v2 = *(_DWORD *)a1;
  int v3 = *(_DWORD *)(a1 + 4) - a2;
  *(_DWORD *)(a1 + 4) = v3;
  if (v3 < 0)
  {
    int v6 = *(unsigned __int8 **)(a1 + 8);
    unint64_t v5 = *(void *)(a1 + 16);
    do
    {
      __uint64_t v7 = v6 + 1;
      *(void *)(a1 + 8) = v6 + 1;
      if (v5 && (unint64_t)v6 >= v5) {
        int v8 = 0;
      }
      else {
        int v8 = *v6;
      }
      unsigned int v2 = v8 | (v2 << 8);
      char v4 = v3 + 8;
      *(_DWORD *)a1 = v2;
      *(_DWORD *)(a1 + 4) = v3 + 8;
      int v6 = v7;
      BOOL v9 = v3 < -8;
      v3 += 8;
    }
    while (v9);
  }
  else
  {
    char v4 = v3;
  }
  return (v2 >> v4) & ~(-1 << a2);
}

uint64_t sub_5605C(uint64_t a1, int a2, unsigned int a3, uint64_t a4, int a5, int a6)
{
  if (*(_DWORD *)(a1 + 4)) {
    sub_59BF8();
  }
  uint64_t v8 = *(void *)(a1 + 8);
  int v33 = a5 - 1;
  if (a5 >= 1)
  {
    int v10 = a3;
    uint64_t v30 = *(void *)(a1 + 8);
    int v11 = 0;
    int v12 = 0;
    int v13 = a6 + 1;
    int v35 = -a3;
    uint64_t v36 = a3;
    int v31 = a6 + 1;
    do
    {
      int v14 = sub_55FF0(a1, a2) + 2;
      if (v14 >= v13) {
        int v15 = v13;
      }
      else {
        int v15 = v14;
      }
      if (v10 >= 1)
      {
        uint64_t v16 = 0;
        BOOL v17 = v14 > v13;
        if (v12 <= a5) {
          int v18 = a5;
        }
        else {
          int v18 = v12;
        }
        uint64_t v19 = (v18 - v12);
        unsigned int v20 = (_DWORD *)(a4 + 4 * v12);
        do
        {
          if (v19 == v16) {
            break;
          }
          *unsigned int v20 = sub_55FF0(a1, v15);
          if ((~(_BYTE)v16 & 3) == 0)
          {
            if (v17 || (unint64_t v21 = *(void *)(a1 + 16)) != 0 && *(void *)(a1 + 8) > v21)
            {
              BOOL v17 = 0;
              *unsigned int v20 = 0;
              *((void *)v20 - 1) = 0;
              *(v20 - 3) = 0;
            }
            else
            {
              BOOL v17 = 0;
            }
          }
          ++v16;
          ++v20;
        }
        while (v36 != v16);
        uint64_t v22 = 0;
        int v10 = a3;
        int v23 = v33;
        int v13 = v31;
        int v24 = v35;
        do
        {
          int v25 = v22 + v12;
          if ((int)v22 + v12 >= a5) {
            break;
          }
          if (v11)
          {
            uint64_t v26 = v22 + v12;
            if ((int)(v22 + v12 + a3 + a3 * (*(_DWORD *)(a4 + 4 * v26) & 0x1F)) >= a5) {
              unsigned int v27 = v23 - v12;
            }
            else {
              unsigned int v27 = a3 + a3 * (*(_DWORD *)(a4 + 4 * v26) & 0x1F);
            }
            *(_DWORD *)(a4 + 4 * v26) = 0;
            if (v27)
            {
              bzero((void *)(a4 + 4 * ((int)v22 + v12 + 1)), 4 * v27);
              v12 += v27;
              int v25 = v22 + v12;
            }
            int v24 = v35;
          }
          if (*(_DWORD *)(a4 + 4 * v25) == 1)
          {
            int v11 = 0;
            BOOL v28 = v24 + v22 == -2 || a3 == 1;
            if (v28 && v25 + 2 < a5)
            {
              *(_DWORD *)(a4 + 4 * v25) = 0;
              int v11 = 1;
            }
          }
          else
          {
            int v11 = 0;
          }
          ++v22;
          --v23;
        }
        while (v24 + v22);
      }
      v12 += v10;
    }
    while (v12 < a5);
    LODWORD(v8) = v30;
    if (*(int *)(a1 + 4) >= 8) {
      sub_59BCC();
    }
  }
  *(_DWORD *)(a1 + 4) = 0;
  return (*(_DWORD *)(a1 + 8) - v8);
}

uint64_t sub_5627C(_DWORD *a1, int a2, int a3, int a4)
{
  if (a1[131])
  {
    int v8 = sub_56414(a1, a2, a3);
  }
  else
  {
    BOOL v9 = a1 + 130;
    if (a2 >= 1) {
      BOOL v9 = &a1[16 * (unint64_t)(a2 - 1) + a3];
    }
    if (a3 >= 1) {
      BOOL v9 = &a1[16 * (uint64_t)a2 + (a3 - 1)];
    }
    int v8 = *v9;
    a1[133] = *v9;
  }
  int v10 = a4 >> 1;
  if (a4) {
    int v10 = -v10;
  }
  a1[139] = v10;
  int v11 = v8 + v10;
  if (v11 < 0 || v11 >> a1[129]) {
    a1[140] = 1;
  }
  uint64_t result = v11 & ~(-1 << a1[132]);
  a1[16 * (uint64_t)a2 + a3] = result;
  return result;
}

uint64_t sub_56348(_DWORD *a1, int a2, int a3, int a4)
{
  if (a1[67])
  {
    int v8 = sub_5651C(a1, a2, a3);
  }
  else
  {
    BOOL v9 = a1 + 66;
    if (a2 >= 1) {
      BOOL v9 = &a1[8 * (a2 - 1) + a3];
    }
    if (a3 >= 1) {
      BOOL v9 = &a1[8 * a2 + a3 - 1];
    }
    int v8 = *v9;
    a1[69] = *v9;
  }
  int v10 = a4 >> 1;
  if (a4) {
    int v10 = -v10;
  }
  a1[75] = v10;
  int v11 = v8 + v10;
  if (v11 < 0 || v11 >> a1[65]) {
    a1[76] = 1;
  }
  uint64_t result = v11 & ~(-1 << a1[68]);
  a1[8 * a2 + a3] = result;
  return result;
}

uint64_t sub_56414(_DWORD *a1, int a2, int a3)
{
  if (a2)
  {
    if (a3 % a1[128])
    {
      int v3 = a1[138] + a1[139];
      a1[138] = v3;
      signed int v4 = a1[136];
      signed int v5 = a1[137];
    }
    else
    {
      if (a3 <= 0)
      {
        uint64_t v9 = (a2 - 2);
        uint64_t v10 = (a2 - 1);
        if (a2 <= 1)
        {
          uint64_t v10 = (int)v10;
          uint64_t v9 = (int)v10;
        }
        signed int v5 = a1[16 * v9 + a3];
        a1[134] = v5;
        int v8 = &a1[16 * v10 + a3];
      }
      else
      {
        int v8 = &a1[16 * (uint64_t)a2 + (a3 - 1)];
        signed int v5 = *(v8 - 16);
        a1[134] = v5;
      }
      int v11 = *v8;
      a1[133] = *v8;
      int v3 = v11 - v5;
      if (v11 >= v5) {
        signed int v4 = v5;
      }
      else {
        signed int v4 = v11;
      }
      a1[136] = v4;
      if (v11 > v5) {
        signed int v5 = v11;
      }
      a1[137] = v5;
      a1[138] = v3;
    }
    int v12 = a1[16 * (uint64_t)a2 - 16 + a3];
    a1[135] = v12;
    if (v12 < v4) {
      signed int v4 = v12;
    }
    a1[136] = v4;
    if (v12 > v5) {
      signed int v5 = v12;
    }
    a1[137] = v5;
    int v13 = v3 + v12;
    if (v13 < v5) {
      signed int v5 = v13;
    }
    if (v13 >= v4) {
      return v5;
    }
    else {
      return v4;
    }
  }
  else
  {
    int v6 = &a1[a3 - 1];
    if (a3 <= 0) {
      int v6 = a1 + 130;
    }
    uint64_t v7 = *v6;
    a1[133] = v7;
  }
  return v7;
}

uint64_t sub_5651C(_DWORD *a1, int a2, int a3)
{
  if (a2)
  {
    if (a3 % a1[64])
    {
      int v3 = a1[74] + a1[75];
      a1[74] = v3;
      signed int v4 = a1[72];
      signed int v5 = a1[73];
    }
    else
    {
      if (a3 <= 0)
      {
        uint64_t v9 = (a2 - 2);
        uint64_t v10 = (a2 - 1);
        if (a2 <= 1)
        {
          uint64_t v10 = (int)v10;
          uint64_t v9 = (int)v10;
        }
        signed int v5 = a1[8 * v9 + a3];
        a1[70] = v5;
        int v8 = &a1[8 * v10 + a3];
      }
      else
      {
        int v8 = &a1[8 * a2 + a3 - 1];
        signed int v5 = *(v8 - 8);
        a1[70] = v5;
      }
      int v11 = *v8;
      a1[69] = *v8;
      int v3 = v11 - v5;
      if (v11 >= v5) {
        signed int v4 = v5;
      }
      else {
        signed int v4 = v11;
      }
      a1[72] = v4;
      if (v11 > v5) {
        signed int v5 = v11;
      }
      a1[73] = v5;
      a1[74] = v3;
    }
    int v12 = a1[8 * a2 - 8 + a3];
    a1[71] = v12;
    if (v12 < v4) {
      signed int v4 = v12;
    }
    a1[72] = v4;
    if (v12 > v5) {
      signed int v5 = v12;
    }
    a1[73] = v5;
    int v13 = v3 + v12;
    if (v13 < v5) {
      signed int v5 = v13;
    }
    if (v13 >= v4) {
      return v5;
    }
    else {
      return v4;
    }
  }
  else
  {
    int v6 = &a1[a3 - 1];
    if (a3 <= 0) {
      int v6 = a1 + 66;
    }
    uint64_t v7 = *v6;
    a1[69] = v7;
  }
  return v7;
}

BOOL sub_56624(int a1, unsigned int a2)
{
  unsigned int v2 = a1 - 1;
  BOOL result = 0;
  if (a2 || v2 >= 2)
  {
    BOOL v3 = a2 == 6 || a2 == 8;
    BOOL v4 = v3;
    if (a1 != 2 || !v4)
    {
      BOOL v5 = a2 != 25 && a2 - 9 >= 2;
      BOOL v6 = !v5;
      if ((a1 != 3 || !v6) && (a2 > 0x1A || ((1 << a2) & 0x4C00000) == 0 || v2 >= 2)) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_5669C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, uint64_t a8, unsigned int a9, int a10, unsigned int a11, int a12, int a13)
{
  if (a7) {
    uint64_t v13 = 16;
  }
  else {
    uint64_t v13 = 32;
  }
  uint64_t v107 = v13;
  if ((a6 | 2) != 0xA) {
    sub_59C24();
  }
  if (a7) {
    int v19 = 8;
  }
  else {
    int v19 = 1;
  }
  if (a7) {
    int v20 = 10;
  }
  else {
    int v20 = 3;
  }
  if (a7) {
    char v21 = 4;
  }
  else {
    char v21 = 5;
  }
  char v94 = v21;
  if (a6 == 8) {
    unsigned int v22 = v19;
  }
  else {
    unsigned int v22 = v20;
  }
  unsigned int v89 = dword_88EB0[28 * v22 + 4 + a13];
  uint64_t result = sub_5849C((uint64_t)v114, v22, a13, 0);
  memset(v115, 0, 512);
  unsigned int v24 = a11 + a5;
  if (a11 + a5)
  {
    unsigned int v99 = 0;
    unsigned int v25 = (v107 - 1 + a4) >> v94;
    unsigned int v26 = (v107 - 1 + a5) >> v94;
    unsigned int v27 = 32 - __clz(v26 - 1);
    if (v26 >= 2) {
      unsigned int v28 = v27;
    }
    else {
      unsigned int v28 = 0;
    }
    unsigned int v29 = 32 - __clz(v25 - 1);
    unsigned int v78 = (v107 - 1 + a4) >> v94;
    if (v25 < 2) {
      unsigned int v29 = 0;
    }
    unsigned int v30 = a9 + a4;
    if (v29 >= v28) {
      uint64_t v31 = v28;
    }
    else {
      uint64_t v31 = v29;
    }
    char v32 = 5;
    if (a7) {
      char v32 = 3;
    }
    char v86 = v32;
    char v87 = 2 * v31;
    uint64_t v76 = &dword_88EB0[28 * v22 + 8 + a13];
    double v77 = &dword_89AF0[11 * v22 + 7];
    uint64_t v83 = (v31 + 1) & 0x1FFFFFFFELL;
    uint64x2_t v82 = (uint64x2_t)vdupq_n_s64(v31 - 1);
    uint64_t v98 = (4 * a4);
    uint64_t v79 = (v107 * a4);
    int8x16_t v33 = (int8x16_t)vdupq_n_s64(1uLL);
    int64x2_t v34 = vdupq_n_s64(2uLL);
    uint64_t v81 = -a9 - a4 * a11;
    int v80 = -(2 * a4 * a11 + 2 * a9);
    int v97 = 8 * a4;
    int v35 = 2 * a4;
    int v36 = a4;
    int64x2_t v84 = v34;
    int8x16_t v85 = v33;
    int v88 = v31;
    unsigned int v104 = v24;
    do
    {
      if (!v30) {
        goto LABEL_74;
      }
      uint64_t v37 = 0;
      unint64_t v38 = v99 >> v94;
      int v93 = v38 * v78;
      int v106 = ~(-1 << *v77);
      unsigned int v105 = *v76;
      uint64x2_t v39 = (uint64x2_t)vdupq_n_s64(v38);
      int v40 = v80;
      uint64_t v41 = v81;
      uint64x2_t v92 = v39;
      do
      {
        unint64_t v42 = v37 >> v94;
        if (v31)
        {
          uint64x2_t v43 = (uint64x2_t)vdupq_n_s64(v42);
          int8x16_t v44 = 0uLL;
          uint64_t v45 = v83;
          int64x2_t v46 = (int64x2_t)xmmword_837C0;
          do
          {
            int8x16_t v47 = v44;
            int64x2_t v48 = v46;
            uint64x2_t v49 = (uint64x2_t)vnegq_s64(v46);
            int8x16_t v50 = (int8x16_t)vaddq_s64(v48, v48);
            int8x16_t v44 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)vshlq_u64(v43, v49), v33), (uint64x2_t)v50), (int8x16_t)vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)vshlq_u64(v39, v49), v33), (uint64x2_t)vorrq_s8(v50, v33))), v47);
            int64x2_t v46 = vaddq_s64(v46, v34);
            v45 -= 2;
          }
          while (v45);
          int8x16_t v51 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v48, v82), v47, v44);
          int8x8_t v52 = vorr_s8(*(int8x8_t *)v51.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL));
        }
        else
        {
          int8x8_t v52 = 0;
        }
        int v53 = 0;
        long long v54 = (char *)(a2 + (v42 + v93) * v89);
        uint64_t v55 = (unsigned char *)(a1 + ((*(void *)&v52 | ((v42 | (v99 >> v94)) >> v31 << v87)) << v86));
        int v96 = v40;
        uint64_t v95 = v41;
        uint64_t v100 = v37;
        do
        {
          int v56 = 0;
          int v103 = v53;
          int v57 = v53 + v99;
          int v102 = v40;
          int v58 = v40;
          uint64_t v101 = v41;
          do
          {
            int v110 = v58;
            int v111 = v56;
            uint64_t v112 = v55;
            uint64_t v113 = v54;
            uint64_t v59 = *v55;
            int v109 = v59 & 0xF0;
            if (*v55) {
              unsigned int v60 = (v59 & v106) + 1;
            }
            else {
              unsigned int v60 = 0;
            }
            unsigned int v108 = v60;
            uint64_t result = sub_56C5C((uint64_t)v114, v54, v59, (uint64_t)v115);
            unsigned int v24 = v104;
            uint64_t v61 = 0;
            unsigned int v62 = v110;
            int v63 = v41;
            uint64_t v64 = (int *)&v115[4];
            do
            {
              uint64_t v65 = 0;
              BOOL v67 = v57 + (int)v61 >= a11 && v57 + (int)v61 < v104;
              unsigned int v68 = v62;
              unint64_t v69 = v64;
              do
              {
                BOOL v70 = (int)v37 + (int)v65 >= a9 && v67;
                if ((int)v37 + (int)v65 < v30 && v70)
                {
                  int v72 = *(v69 - 1);
                  if (a7)
                  {
                    uint64_t result = v68;
                    uint64_t v73 = v68 + 1;
                    if (a6 == 8)
                    {
                      *(unsigned char *)(a3 + v68) = v72;
                      int v72 = *v69;
LABEL_60:
                      *(unsigned char *)(a3 + v73) = v72;
                      goto LABEL_63;
                    }
                    *(_WORD *)(a3 + 2 * v68) = v72;
                    int v72 = *v69;
                  }
                  else
                  {
                    uint64_t v73 = (v63 + v65);
                    if (a6 == 8) {
                      goto LABEL_60;
                    }
                  }
                  *(_WORD *)(a3 + 2 * v73) = v72;
                }
LABEL_63:
                ++v65;
                v69 += 4;
                v68 += 2;
              }
              while (v65 != 8);
              ++v61;
              v64 += 32;
              v63 += v36;
              v62 += v35;
            }
            while (v61 != 4);
            if (v109 != 240 || a13 == 0) {
              uint64_t v75 = v108;
            }
            else {
              uint64_t v75 = v105;
            }
            long long v54 = &v113[v75];
            uint64_t v55 = v112 + 1;
            int v56 = v111 + 8;
            LODWORD(v41) = v41 + 8;
            int v58 = v110 + 16;
            LODWORD(v37) = v37 + 8;
          }
          while (v111 + 8 < v107);
          int v53 = v103 + 4;
          LODWORD(v37) = v100;
          uint64_t v41 = v101 + v98;
          int v40 = v102 + v97;
        }
        while (v103 + 4 < v107);
        uint64_t v37 = v100 + v107;
        uint64_t v41 = v95 + v107;
        int v40 = v96 + 2 * v107;
        LODWORD(v31) = v88;
        int64x2_t v34 = v84;
        int8x16_t v33 = v85;
        uint64x2_t v39 = v92;
      }
      while ((int)v100 + (int)v107 < v30);
LABEL_74:
      v81 += v79;
      v80 += 2 * v79;
      v99 += v107;
    }
    while (v99 < v24);
  }
  return result;
}

uint64_t sub_56C5C(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (_DWORD *)a1;
  unsigned int v8 = dword_89AF0[11 * *(unsigned int *)(a1 + 340) + 7];
  if ((*(_DWORD *)(a1 + 348) - 1) <= 2)
  {
    unsigned int v9 = sub_58574(a1, a3);
    int v10 = v7[85];
    if (v9 > dword_88EB0[28 * v10 + 8 + v7[87]]
      || v9 < sub_58574((uint64_t)v7, LOBYTE(dword_89AF0[11 * v10 + 8])))
    {
      goto LABEL_233;
    }
    if ((~a3 & 0xF0) == 0)
    {
      uint64_t v11 = v7[87];
      if ((v11 - 1) <= 2)
      {
        uint64_t v12 = 0;
        uint64_t v13 = v7[85];
        unint64_t v177 = (unint64_t)dword_88EB0[28 * v13 + 8 + v11] >> 2;
        int16x8_t v14 = (int16x8_t)vtstq_s32(vdupq_n_s32(a3), (int32x4_t)xmmword_86850);
        *(int8x8_t *)v14.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v14), (int8x8_t)0x1000100010001);
        unsigned __int32 v196 = vmovn_s16(v14).u32[0];
        uint64_t v175 = a4;
        __uint64_t v176 = a2;
        long long v174 = v7;
        while (1)
        {
          uint64_t v15 = v7[87];
          uint64_t v178 = v12;
          uint64_t v16 = &a2[v12 * v177];
          int v17 = v7[88];
          uint64_t v187 = v13;
          int v195 = v17;
          if (!v197[v12 - 4]) {
            break;
          }
          uint64_t v18 = 0;
          unsigned int v19 = dword_88EB0[28 * v13 + 8 + v15] >> 2;
          int v215 = v16;
          int v214 = v19;
          char v218 = 1;
          unsigned int v217 = 0;
          unsigned int v216 = 8 * v19;
          int v20 = &dword_89FC0[13 * v13];
          LODWORD(v21) = v20[2];
          unsigned int v22 = v17 & 0xFFFFFFFE;
          if (v21 <= 1) {
            uint64_t v21 = 1;
          }
          else {
            uint64_t v21 = v21;
          }
          __uint64_t v181 = v20 + 3;
          uint64_t v184 = v21;
          unsigned int v179 = &dword_88EB0[28 * v13 + 12 + 4 * v15];
          int v23 = (unsigned int *)v197;
          do
          {
            uint64_t v192 = v18;
            unsigned int v25 = v179;
            unsigned int v24 = v181;
            CMTimeValue v188 = v23;
            uint64_t v26 = v184;
            if (v13 != 27)
            {
              do
              {
                int v28 = *v25++;
                int v27 = v28;
                int v30 = *v24++;
                int v29 = v30;
                int v31 = -1 << v30;
                if (v30 == 32) {
                  unsigned int v32 = -1;
                }
                else {
                  unsigned int v32 = ~v31;
                }
                int v33 = 1 << (v29 - 1);
                unsigned int v34 = (sub_58748((uint64_t)v213, v29 - v27) << v27) & v32;
                BOOL v36 = v22 != 2 || v34 != v33;
                if (v34 >> v27 == v32 >> v27) {
                  int v37 = v32;
                }
                else {
                  int v37 = ((1 << (v27 - 1)) - ((v34 >> v27) & 1)) | v34;
                }
                if (!v36 || v34 == 0) {
                  unsigned int v39 = v34;
                }
                else {
                  unsigned int v39 = v37;
                }
                if (!v27) {
                  unsigned int v39 = v34;
                }
                if (v195 != 1) {
                  unsigned int v34 = v39;
                }
                if (v22 == 2) {
                  int v40 = v33;
                }
                else {
                  int v40 = 0;
                }
                *v23++ = v34 ^ v40;
                --v26;
              }
              while (v26);
            }
            uint64_t v18 = v192 + 1;
            uint64_t v13 = v187;
            int v23 = v188 + 4;
          }
          while (v192 != 7);
          a4 = v175;
          a2 = v176;
          uint64_t v7 = v174;
LABEL_193:
          uint64_t v139 = 0;
          int v140 = v197;
          do
          {
            if (v7[85] == 27)
            {
              uint64_t v13 = 27;
            }
            else
            {
              unint64_t v141 = 0;
              uint32x4_t v142 = (uint32x4_t)vdupq_n_s32((int)v139 + 8 * (int)v178);
              v143.i64[0] = 0x100000001;
              v143.i64[1] = 0x100000001;
              int8x16_t v144 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v142, (uint32x4_t)xmmword_887F0), v143), (uint32x4_t)xmmword_88800);
              int8x16_t v145 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v142, (uint32x4_t)xmmword_88810), v143), (uint32x4_t)xmmword_88800);
              unint64_t v146 = a4
                   + ((unint64_t)(vorr_s8(*(int8x8_t *)v144.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v144, v144, 8uLL)).u32[0] | v144.i32[1]) << 7)
                   + 16
                   * (vorr_s8(*(int8x8_t *)v145.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v145, v145, 8uLL)).u32[0] | v145.i32[1]);
              do
              {
                *(_DWORD *)(v146 + 4 * v141) = *(_DWORD *)&v140[4 * v141];
                ++v141;
                uint64_t v13 = v7[85];
              }
              while (v141 < dword_89FC0[13 * v13 + 2]);
            }
            ++v139;
            v140 += 16;
          }
          while (v139 != 8);
          uint64_t v12 = v178 + 1;
          if (v178 == 3) {
            return 1;
          }
        }
        int v193 = 0;
        uint64_t v185 = &dword_89FC0[13 * v13];
        unsigned int v182 = v185[2];
        int v172 = v7[87];
        unsigned int v41 = dword_88EB0[28 * v13 + 8 + v15];
        int v215 = &a2[v12 * v177];
        v41 *= 2;
        int v214 = (v41 >> 3) & 0x7FFFFFF;
        char v218 = 1;
        unsigned int v217 = 0;
        unsigned int v180 = v41;
        unsigned int v216 = v41 & 0x3FFFFFF8;
        if (v13 == 27)
        {
LABEL_42:
          uint64_t v210 = 0;
          uint64_t v211 = 0;
          uint64_t v208 = 0;
          uint64_t v209 = 0;
          v207[0] = sub_57F80(v185[3]);
          unint64_t v42 = (int *)&dword_89FC0[13 * v187];
          v207[1] = sub_57F80(v42[4]);
          v207[2] = sub_57F80(v42[5]);
          v207[3] = sub_57F80(v42[6]);
          unsigned int v43 = v182;
          sub_58030(v182, (uint64_t)v207, (uint64_t)v220, (uint64_t)&v210, (uint64_t)&v208);
          uint64_t v205 = 0;
          uint64_t v206 = 0;
          uint64_t v203 = 0;
          uint64_t v204 = 0;
          if (v187 == 27)
          {
            uint64_t v201 = 0;
            uint64_t v202 = 0;
            uint64_t v199 = 0;
            uint64_t v200 = 0;
            int v44 = v195;
            int v45 = v193;
          }
          else
          {
            unint64_t v73 = 0;
            uint64_t v191 = (v172 - 1);
            if (v182 <= 1) {
              uint64_t v74 = 1;
            }
            else {
              uint64_t v74 = v182;
            }
            uint64_t v173 = v74;
            uint64_t v186 = 4 * v74;
            do
            {
              unsigned int v75 = dword_89FC0[13 * v187 + 3 + v73 / 4];
              uint64_t v76 = sub_57F80(v75);
              int v77 = v220[v73 / 4];
              unsigned int v78 = &dword_8A6C8[160 * v76 + 10 * v77];
              int v79 = dword_8A680[3 * v76 + v191];
              int v80 = v78[5];
              *(_DWORD *)((char *)&v205 + v73) = v79 + v78[4];
              uint64_t v81 = (unsigned int *)((char *)&v203 + v73);
              *(_DWORD *)((char *)&v203 + v73) = v80 + v79;
              sub_58414(v76, v77, *(_DWORD *)((char *)&v210 + v73), *(_DWORD *)((char *)&v208 + v73), (uint64_t *)((char *)&v205 + v73), (uint64_t *)((char *)&v203 + v73));
              unsigned int v82 = *(_DWORD *)((char *)&v205 + v73);
              if (v75 < v82) {
                unsigned int v82 = v75;
              }
              *(_DWORD *)((char *)&v205 + v73) = v82;
              if (v80) {
                unsigned int v83 = v75;
              }
              else {
                unsigned int v83 = 0;
              }
              if (v83 >= *v81) {
                unsigned int v83 = *v81;
              }
              unsigned int *v81 = v83;
              v73 += 4;
            }
            while (v186 != v73);
            if (v187 == 19 && v221 == 1 && HIDWORD(v209) - HIDWORD(v211) <= 1)
            {
              uint64_t v205 = 0;
              uint64_t v206 = 0;
              uint64_t v203 = 0;
              uint64_t v204 = 0;
            }
            uint64_t v84 = v173;
            int8x16_t v85 = &dword_89FC0[13 * v187 + 3];
            char v86 = &v201;
            uint64_t v201 = 0;
            uint64_t v202 = 0;
            char v87 = v219;
            int v88 = (unsigned int *)&v205;
            unsigned int v89 = (int *)v220;
            do
            {
              int v90 = *v89++;
              if (v90 || *v85 - 8 > 4)
              {
                unsigned int v91 = *v88;
                *(_DWORD *)char v86 = sub_58748((uint64_t)v213, *v88) << (*v85 - v91);
                v193 += v91;
              }
              else
              {
                *(_DWORD *)char v86 = *v87;
              }
              char v86 = (uint64_t *)((char *)v86 + 4);
              ++v87;
              ++v85;
              ++v88;
              --v84;
            }
            while (v84);
            uint64_t v199 = 0;
            uint64_t v200 = 0;
            uint64x2_t v92 = &v199;
            int v93 = &v203;
            int v44 = v195;
            int v45 = v193;
            unsigned int v43 = v182;
            uint64_t v94 = v173;
            do
            {
              int v95 = *(_DWORD *)v93;
              int v93 = (uint64_t *)((char *)v93 + 4);
              if (v95)
              {
                int v96 = sub_594AC((uint64_t)v213, v217, 3u);
                v217 += 3;
                *(_DWORD *)uint64x2_t v92 = v96;
                v45 += 3;
              }
              uint64x2_t v92 = (uint64_t *)((char *)v92 + 4);
              --v94;
            }
            while (v94);
          }
          unsigned int v97 = (v180 & 0x3FFFFFFE) - v45;
          unsigned int v98 = v97 / 7;
          unsigned int v99 = v217 + v97 - 7 * (v97 / 7);
          unsigned int v217 = v99;
          unsigned int v100 = v216;
          if (v99 > v216) {
            sub_59C50();
          }
          LODWORD(v101) = v43;
          uint64_t v102 = 0;
          unsigned int v194 = v44 & 0xFFFFFFFE;
          memset(&v198[1], 0, 96);
          if (v101 <= 1) {
            uint64_t v101 = 1;
          }
          else {
            uint64_t v101 = v101;
          }
          uint64_t v183 = v101;
          int v103 = v198;
          v198[0] = 0uLL;
          uint64_t v104 = v187;
          do
          {
            if (v104 == 27)
            {
              unsigned int v105 = 0;
            }
            else
            {
              unsigned int v105 = 0;
              int v106 = (unsigned int *)&v203;
              uint64_t v107 = v103;
              uint64_t v108 = v183;
              do
              {
                unsigned int v110 = *v106++;
                unsigned int v109 = v110;
                if (v110)
                {
                  _DWORD *v107 = sub_58748((uint64_t)v213, v109);
                  v105 += v109;
                }
                v107 += 7;
                --v108;
              }
              while (v108);
              if (v105 > v98) {
                sub_59CA8();
              }
              unsigned int v99 = v217;
              unsigned int v100 = v216;
              uint64_t v104 = v187;
            }
            v99 += v98 - v105;
            unsigned int v217 = v99;
            if (v99 > v100) {
              sub_59C50();
            }
            ++v102;
            int v103 = (_OWORD *)((char *)v103 + 4);
          }
          while (v102 != 7);
          if (v104 != 27)
          {
            uint64_t v111 = 0;
            uint64_t v112 = v197;
            do
            {
              int v113 = dword_89FC0[13 * v104 + 3 + v111];
              int v114 = sub_57F80(v113);
              uint64_t v115 = 0;
              unsigned int v116 = 0;
              unint64_t v117 = *(void *)&dword_8A6C8[160 * v114 + 2 + 10 * v220[v111]];
              int v118 = *((_DWORD *)&v203 + v111);
              unint64_t v119 = v117 >> v118;
              if (v117 >> v118 <= 1) {
                unint64_t v119 = 1;
              }
              if (v119 >> 1 >= (unint64_t)(1 << (v113
                                                         - *((_DWORD *)&v205 + v111))) >> 1)
                unint64_t v120 = (unint64_t)(1 << (v113 - *((_DWORD *)&v205 + v111))) >> 1;
              else {
                unint64_t v120 = v119 >> 1;
              }
              unint64_t v121 = (1 << (v113 - 1));
              uint64_t v122 = *((unsigned int *)&v201 + v111);
              unint64_t v123 = ~(-1 << v118);
              unint64_t v124 = v117 + v122;
              unint64_t v125 = 1 << v113;
              if (!v122) {
                unint64_t v120 = 0;
              }
              if (v113 == 16) {
                unint64_t v126 = 31744;
              }
              else {
                unint64_t v126 = 2139095040;
              }
              if (v113 == 16) {
                unint64_t v127 = 64512;
              }
              else {
                unint64_t v127 = 4286578688;
              }
              if (v113 == 16) {
                unint64_t v128 = 32256;
              }
              else {
                unint64_t v128 = 2143289344;
              }
              unint64_t v129 = 4290772992;
              if (v113 == 16) {
                unint64_t v129 = 65024;
              }
              BOOL v130 = v112;
              do
              {
                if (v118)
                {
                  if (v115 == *((_DWORD *)&v199 + v111))
                  {
                    unint64_t v131 = v120;
                    BOOL v132 = v122 == v121;
                  }
                  else
                  {
                    unint64_t v133 = *((unsigned int *)v198 + 7 * v111 + v116);
                    BOOL v132 = (v121 - v122) / v119 == v133;
                    if (v133 > v123) {
                      sub_59C7C();
                    }
                    if (v133 | v122)
                    {
                      if (v124 < v125 || (unint64_t v131 = v125 - 1, v133 != v123)) {
                        unint64_t v131 = (v119 >> 1) + v119 * v133;
                      }
                    }
                    else
                    {
                      unint64_t v131 = 0;
                    }
                    ++v116;
                  }
                }
                else
                {
                  unint64_t v131 = 0;
                  BOOL v132 = v119 > v121 - v122;
                }
                unint64_t v134 = v131 + v122;
                unint64_t v135 = v134;
                if (v195 == 1)
                {
                  if (v134 < v126 || (unint64_t v135 = (v126 - 1), v134 >= v128))
                  {
                    if (v134 < v128 || (unint64_t v135 = v121, v134 >= v121))
                    {
                      BOOL v136 = v134 < v129 && v134 >= v127;
                      unint64_t v135 = (v127 - 1);
                      if (!v136) {
                        unint64_t v135 = v134;
                      }
                    }
                  }
                }
                if (v135 >= v125) {
                  int v137 = v125 - 1;
                }
                else {
                  int v137 = v135;
                }
                if (v132) {
                  int v138 = 0;
                }
                else {
                  int v138 = v137 ^ v121;
                }
                if (v194 != 2) {
                  int v138 = v137;
                }
                *BOOL v130 = v138;
                v130 += 4;
                ++v115;
              }
              while (v115 != 8);
              ++v111;
              v112 += 4;
              uint64_t v104 = v187;
            }
            while (v111 != v183);
          }
          a2 = v176;
          goto LABEL_193;
        }
        int v46 = 0;
        if (v182 <= 1) {
          uint64_t v47 = 1;
        }
        else {
          uint64_t v47 = v182;
        }
        int64x2_t v48 = &dword_89FC0[13 * v13 + 3];
        uint64x2_t v49 = v212;
        int8x16_t v50 = v48;
        uint64_t v189 = v47;
        do
        {
          int v52 = *v50++;
          int v51 = v52;
          if (v52 == 2)
          {
            unsigned int v53 = 1;
          }
          else if ((v51 - 8) >= 5)
          {
            unsigned int v53 = 4;
            if (v51 != 16 && v51 != 32) {
              sub_59D00();
            }
          }
          else
          {
            unsigned int v53 = 3;
          }
          *v49++ = sub_58748((uint64_t)v213, v53);
          v46 += v53;
          --v47;
        }
        while (v47);
        int v193 = v46;
        uint64_t v54 = 0;
        uint64_t v55 = (int *)v220;
        int v56 = v219;
        int v57 = (int *)v212;
        uint64_t v58 = v189;
        while (1)
        {
          unsigned int v60 = *v48++;
          unsigned int v59 = v60;
          if (v60 == 2)
          {
            char v61 = *v57;
            *int v56 = 0;
            int v62 = v61 & 1;
            int v63 = v55;
LABEL_95:
            *int v63 = v62;
            goto LABEL_96;
          }
          CMTimeValue v190 = v48;
          uint64_t v64 = v58;
          BOOL v65 = v59 - 8 < 5 || v59 == 16;
          if (!v65 && v59 != 32) {
            sub_59CD4();
          }
          int v66 = *v57;
          unsigned int v67 = v59 & 0xFFFFFFFD;
          if (((v59 & 0xFFFFFFFD) == 8 || v59 == 12) && v66 == 0)
          {
            char v70 = sub_594AC((uint64_t)v213, v217, 2u);
            v217 += 2;
            v193 += 2;
            int v63 = (int *)&v220[v54];
            *int v56 = 0;
            int *v55 = 0;
            int v62 = v70 & 3;
            if (v67 == 8)
            {
              uint64_t v58 = v64;
              if (v62 != 2)
              {
                int64x2_t v48 = v190;
                if (v62 == 1)
                {
                  int v62 = 0;
                  *int v56 = ~(-1 << v59);
                  goto LABEL_95;
                }
                if ((v70 & 3) != 0)
                {
                  int v62 = 2;
                  goto LABEL_95;
                }
                int v63 = v55;
                uint64_t v71 = v56;
                goto LABEL_94;
              }
              int v62 = 1;
LABEL_90:
              int64x2_t v48 = v190;
              goto LABEL_95;
            }
            uint64_t v58 = v64;
            if (v59 == 12)
            {
              int64x2_t v48 = v190;
              if (v62 == 2 || v62 == 1) {
                goto LABEL_95;
              }
              if ((v70 & 3) != 0)
              {
                int v62 = 3;
                goto LABEL_95;
              }
              uint64_t v71 = v56;
              int v63 = v55;
              goto LABEL_94;
            }
          }
          else
          {
            int v63 = (int *)&v220[v54];
            *int v56 = 0;
            if (v59 > 0xF)
            {
              int v62 = v66 & 0xF;
              goto LABEL_90;
            }
            uint64_t v71 = &v219[v54];
            int v72 = v66 & 7;
            int *v55 = v72;
            if (v67 == 8)
            {
              if (!v72)
              {
                int64x2_t v48 = v190;
                goto LABEL_94;
              }
              int v62 = v72 + 2;
              goto LABEL_90;
            }
            if (v59 == 12)
            {
              int64x2_t v48 = v190;
              if (v72)
              {
                int v62 = v72 + 3;
                goto LABEL_95;
              }
LABEL_94:
              int v62 = 0;
              *uint64_t v71 = 0;
              goto LABEL_95;
            }
          }
          int64x2_t v48 = v190;
LABEL_96:
          ++v54;
          ++v55;
          ++v56;
          ++v57;
          if (!--v58) {
            goto LABEL_42;
          }
        }
      }
    }
  }
  uint64_t v147 = v7[85];
  if (dword_89AF0[11 * v147 + 8] == a3)
  {
    int v148 = (a3 & ~(-1 << dword_89AF0[11 * v147 + 7])) + 1;
    int v215 = a2;
    int v214 = v148 << (v147 == 26);
    char v218 = 1;
    unsigned int v217 = 0;
    unsigned int v216 = 8 * v214;
    if (v147 == 27)
    {
      int v149 = 27;
    }
    else
    {
      unint64_t v158 = 0;
      do
      {
        *(_DWORD *)(a4 + 4 * v158) = sub_58748((uint64_t)v213, dword_89FC0[13 * v147 + 3 + v158]);
        ++v158;
        uint64_t v147 = v7[85];
      }
      while (v158 < dword_89FC0[13 * v147 + 2]);
      int v149 = v7[85];
    }
    uint64_t v159 = 0;
    for (uint64_t i = 0; i != 4; ++i)
    {
      uint64_t v161 = 0;
      uint64_t v162 = v159;
      do
      {
        if (v149 == 27)
        {
          int v149 = 27;
        }
        else
        {
          unint64_t v163 = 0;
          do
          {
            *(_DWORD *)(a4 + v162 + 4 * v163) = *(_DWORD *)(a4 + 4 * v163);
            ++v163;
            int v149 = v7[85];
          }
          while (v163 < dword_89FC0[13 * v149 + 2]);
        }
        ++v161;
        v162 += 16;
      }
      while (v161 != 8);
      v159 += 128;
    }
    return 1;
  }
  if (dword_89AF0[11 * v147 + 9] == a3)
  {
    unsigned int v150 = 0;
    unsigned int v151 = dword_89AF0[11 * v147 + 5];
    int v215 = a2;
    int v214 = v151;
    char v218 = 1;
    unsigned int v217 = 0;
    unsigned int v216 = 8 * v151;
    do
    {
      if (v147 != 27)
      {
        unint64_t v152 = 0;
        uint32x4_t v153 = (uint32x4_t)vdupq_n_s32(v150);
        v154.i64[0] = 0x100000001;
        v154.i64[1] = 0x100000001;
        int8x16_t v155 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v153, (uint32x4_t)xmmword_88810), v154), (uint32x4_t)xmmword_88800);
        int8x16_t v156 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v153, (uint32x4_t)xmmword_887F0), v154), (uint32x4_t)xmmword_88800);
        unint64_t v157 = a4
             + ((unint64_t)(vorr_s8(*(int8x8_t *)v156.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v156, v156, 8uLL)).u32[0] | v156.i32[1]) << 7)
             + 16
             * (vorr_s8(*(int8x8_t *)v155.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v155, v155, 8uLL)).u32[0] | v155.i32[1]);
        do
        {
          *(_DWORD *)(v157 + 4 * v152) = sub_58748((uint64_t)v213, dword_89FC0[13 * v147 + 3 + v152]);
          ++v152;
          uint64_t v147 = v7[85];
        }
        while (v152 < dword_89FC0[13 * v147 + 2]);
      }
      ++v150;
    }
    while (v150 != 32);
    if (v7[87]) {
      sub_59D2C();
    }
    return 1;
  }
  if (dword_89AF0[11 * v147 + 10] == a3)
  {
    for (unsigned int j = 0; j != 32; ++j)
    {
      uint32x4_t v166 = (uint32x4_t)vdupq_n_s32(j);
      v167.i64[0] = 0x100000001;
      v167.i64[1] = 0x100000001;
      int8x16_t v168 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v166, (uint32x4_t)xmmword_88810), v167), (uint32x4_t)xmmword_88800);
      int8x16_t v169 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v166, (uint32x4_t)xmmword_887F0), v167), (uint32x4_t)xmmword_88800);
      sub_58790((uint64_t)&dword_89FC0[13 * v147], a2, a4+ ((unint64_t)(vorr_s8(*(int8x8_t *)v169.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v169, v169, 8uLL)).u32[0] | v169.i32[1]) << 7)+ 16 * (vorr_s8(*(int8x8_t *)v168.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v168, v168, 8uLL)).u32[0] | v168.i32[1]));
      uint64_t v147 = v7[85];
      a2 += dword_89FC0[13 * v147 + 1];
    }
    if (v7[87]) {
      sub_59D58();
    }
    return 1;
  }
  unsigned int v170 = ((a3 & ~(-1 << v8)) + 1) << (v147 == 26);
  unsigned int v171 = dword_89AF0[11 * v147 + 5];
  int v215 = a2;
  if (v171 >= v170) {
    unsigned int v171 = v170;
  }
  int v214 = v171;
  char v218 = 1;
  unsigned int v217 = 0;
  unsigned int v216 = 8 * v171;
  if (sub_58874((uint64_t)v7, (uint64_t)a2, a3, (uint64_t)v213))
  {
    sub_58C50(v7, (uint64_t)a2, a3, (uint64_t)v213, a4);
    sub_59384(v7, a4);
    return 1;
  }
LABEL_233:
  sub_58660((uint64_t)v7, a4);
  return 0;
}

uint64_t sub_57CF0(unsigned int *a1, unsigned int a2, int a3, unsigned int a4)
{
  unsigned int v6 = a3 + 4 * a2;
  uint64_t result = sub_57DF8(a1, a2, a3);
  a1[3 * v6 + 1] = result;
  if ((unint64_t)a4 >> result) {
    sub_59D84();
  }
  unsigned int v8 = &a1[3 * v6];
  v8[2] = a4;
  v8[3] = 1;
  return result;
}

uint64_t sub_57D50(unsigned int *a1)
{
  int v2 = *a1;
  uint64_t v3 = dword_88820[15 * *a1 + 14];
  for (unsigned int i = 3; i != 7; ++i)
  {
    if (v2 == 27)
    {
      int v2 = 27;
    }
    else
    {
      unsigned int v5 = 0;
      do
      {
        uint64_t v3 = sub_57DF8(a1, i, v5++) + v3;
        int v2 = *a1;
      }
      while (v5 < dword_89FC0[13 * *a1 + 2]);
    }
  }
  return v3;
}

uint64_t sub_57DF8(unsigned int *a1, unsigned int a2, int a3)
{
  if (a2 <= 1) {
    return dword_88820[15 * *a1 + 1 + 4 * a2 + a3];
  }
  if (a2 == 4)
  {
    if (!a1[3 * a3 + 3]) {
      sub_59E34();
    }
    if (!a1[3 * (a3 + 4) + 3]) {
      sub_59E60();
    }
    if ((a1[3 * a3 + 2] & 8) != 0) {
      return a1[3 * (a3 + 4) + 2] + 1;
    }
    return 0;
  }
  if (a2 != 3)
  {
    if (a2 == 2) {
      return dword_89FC0[13 * *a1 + 3 + a3];
    }
    if (a2 - 5 > 1) {
      sub_59DDC();
    }
    if (!a1[3 * a3 + 3]) {
      sub_59DB0();
    }
    if ((a1[3 * a3 + 2] & 3) == 2) {
      return dword_89FC0[13 * *a1 + 3 + a3] >> 1;
    }
    return 0;
  }
  if (!a1[3 * a3 + 3]) {
    sub_59E08();
  }
  if ((a1[3 * a3 + 2] & 4) == 0) {
    return 0;
  }
  if (dword_89FC0[13 * *a1 + 3 + a3] == 32) {
    return 16;
  }
  else {
    return 8;
  }
}

uint64_t sub_57F80(int a1)
{
  int v2 = a1 - 8;
  uint64_t result = 0;
  switch(v2)
  {
    case 0:
      return result;
    case 1:
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_5;
    case 2:
      uint64_t result = 1;
      break;
    case 4:
      uint64_t result = 2;
      break;
    case 8:
      uint64_t result = 3;
      break;
    default:
      if (a1 == 32)
      {
        uint64_t result = 4;
      }
      else
      {
LABEL_5:
        if (a1 == 2) {
          uint64_t result = 5;
        }
        else {
          uint64_t result = 6;
        }
        if ((a1 | 2) != 2) {
          sub_59E8C(a1);
        }
      }
      break;
  }
  return result;
}

uint64_t sub_58030(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5 = *(_DWORD *)(a2 + 12);
  if (v5 == 5)
  {
    unsigned int v6 = *(_DWORD *)(a3 + 12);
    if (v6 >= 2) {
      sub_59EF8();
    }
    if (v6) {
      int v7 = 8;
    }
    else {
      int v7 = 5;
    }
    *(_DWORD *)(a3 + 12) = v7;
    *(_DWORD *)(a2 + 12) = 1;
  }
  if (!result)
  {
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    goto LABEL_19;
  }
  uint64_t v8 = 0;
  unsigned int v9 = 0;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  unsigned int v12 = -1;
  do
  {
    unsigned int v13 = *(_DWORD *)(a3 + 4 * v8);
    if (v13 > v11 || v8 == 1 && v13 == v11)
    {
      unsigned int v11 = *(_DWORD *)(a3 + 4 * v8);
      unsigned int v10 = v8;
    }
    if (v13 < v12)
    {
      unsigned int v12 = *(_DWORD *)(a3 + 4 * v8);
      unsigned int v9 = v8;
    }
    int v14 = dword_8A6C8[160 * *(unsigned int *)(a2 + 4 * v8) + 6 + 10 * v13];
    *(_DWORD *)(a5 + 4 * v8) = v14;
    *(_DWORD *)(a4 + 4 * v8++) = v14;
  }
  while (result != v8);
  if (result != 1)
  {
LABEL_19:
    unsigned int v15 = (v10 + 1) % 3;
    if (v15 == v9) {
      unsigned int v15 = (v10 + 2) % 3;
    }
    unsigned int v16 = *(_DWORD *)(a3 + 4 * v15);
    unsigned int v17 = *(_DWORD *)(a3 + 4 * (int)(6 - (v10 + v9) - v15));
    BOOL v18 = v16 > v17;
    if (v16 <= v17) {
      signed int v19 = v15;
    }
    else {
      signed int v19 = 6 - (v10 + v9) - v15;
    }
    if (v18) {
      signed int v20 = v15;
    }
    else {
      signed int v20 = 6 - (v10 + v9) - v15;
    }
    uint64_t v21 = v10;
    int v22 = *(_DWORD *)(a3 + 4 * v10);
    uint64_t v23 = v9;
    unsigned int v24 = *(_DWORD *)(a3 + 4 * v9);
    if (result == 2)
    {
      if (v22 == v24 || *(int *)(a4 + 4 * v9) < 1)
      {
LABEL_52:
        if (v5 == 5)
        {
          *(_DWORD *)(a2 + 12) = 5;
          *(_DWORD *)(a3 + 12) = *(_DWORD *)(a3 + 12) != 5;
          if (*(int *)(a4 + 12) >= 1) {
            sub_59ECC();
          }
        }
        return result;
      }
      *(_DWORD *)(a5 + 4 * v9) = 0;
      int v25 = *(_DWORD *)(a4 + 4 * v9);
      int v26 = *(_DWORD *)(a5 + 4 * v21);
      goto LABEL_31;
    }
    uint64_t v28 = v19;
    int v29 = *(_DWORD *)(a3 + 4 * v19);
    uint64_t v30 = v20;
    if ((v22 - v29) <= 1 && v24 <= 1)
    {
      *(_DWORD *)(a5 + 4 * v23) = 0;
      unint64_t v35 = 1431655766 * *(int *)(a4 + 4 * v23);
      *(_DWORD *)(a5 + 4 * v28) += HIDWORD(v35) + (v35 >> 63);
      unint64_t v36 = 1431655766 * (*(_DWORD *)(a4 + 4 * v23) + 1);
      *(_DWORD *)(a5 + 4 * v20) += HIDWORD(v36) + (v36 >> 63);
      unint64_t v37 = 1431655766 * (*(_DWORD *)(a4 + 4 * v23) + 2);
      int v38 = HIDWORD(v37) + (v37 >> 63);
      int v39 = *(_DWORD *)(a5 + 4 * v21);
LABEL_46:
      int v27 = v38 + v39;
      goto LABEL_51;
    }
    int v32 = *(_DWORD *)(a3 + 4 * v20);
    if ((v22 - v32) <= 1 && v24 <= 1)
    {
      *(_DWORD *)(a5 + 4 * v23) = 0;
      int v40 = *(_DWORD *)(a4 + 4 * v28) & (*(int *)(a4 + 4 * v28) >> 31);
      *(_DWORD *)(a5 + 4 * v28) = v40;
      *(_DWORD *)(a5 + 4 * v30) += (*(_DWORD *)(a4 + 4 * v23) - v40 + *(_DWORD *)(a4 + 4 * v28)) / 2;
      int v41 = *(_DWORD *)(a4 + 4 * v23) + *(_DWORD *)(a4 + 4 * v28) - *(_DWORD *)(a5 + 4 * v28);
      if (v41 + 1 >= 0) {
        int v42 = v41 + 1;
      }
      else {
        int v42 = v41 + 2;
      }
      int v27 = *(_DWORD *)(a5 + 4 * v21) + (v42 >> 1);
      goto LABEL_51;
    }
    if (v32 - v24 > 1)
    {
      if (v32 - v24 != 2) {
        goto LABEL_62;
      }
      int v34 = *(_DWORD *)(a4 + 4 * v21);
    }
    else
    {
      int v34 = *(_DWORD *)(a4 + 4 * v21);
      if ((v34 & 0x80000000) == 0) {
        goto LABEL_62;
      }
      uint64_t result = *(unsigned int *)(a4 + 4 * v30);
      if ((int)result > 0)
      {
LABEL_59:
        int v43 = 0;
        *(_DWORD *)(a5 + 4 * v23) = 0;
        *(_DWORD *)(a5 + 4 * v28) = 0;
        if (*(_DWORD *)(a4 + 4 * v28) + *(_DWORD *)(a4 + 4 * v23) >= 6) {
          int v43 = *(_DWORD *)(a4 + 4 * v30);
        }
        *(_DWORD *)(a5 + 4 * v30) = v43;
        int v38 = *(_DWORD *)(a4 + 4 * v23) - v43 + *(_DWORD *)(a4 + 4 * v28);
        int v39 = *(_DWORD *)(a4 + 4 * v30) + *(_DWORD *)(a5 + 4 * v21);
        goto LABEL_46;
      }
    }
    if (v34 <= -2 && *(int *)(a4 + 4 * v30) >= 1) {
      goto LABEL_59;
    }
LABEL_62:
    if (!v24
      || *(int *)(a4 + 4 * v23) < 1
      || *(int *)(a4 + 4 * v28) < 1
      || (*(_DWORD *)(a4 + 4 * v30) & 0x80000000) != 0
      || *(int *)(a4 + 4 * v21) > -2)
    {
      if (v22 != v24 && *(int *)(a4 + 4 * v23) >= 1)
      {
        *(_DWORD *)(a5 + 4 * v23) = 0;
        *(_DWORD *)(a5 + 4 * v21) += *(_DWORD *)(a4 + 4 * v23);
      }
      if (v32 != v29 && *(int *)(a4 + 4 * v28) >= 1)
      {
        *(_DWORD *)(a5 + 4 * v28) = 0;
        *(_DWORD *)(a5 + 4 * v30) += *(_DWORD *)(a4 + 4 * v28);
      }
      goto LABEL_52;
    }
    *(_DWORD *)(a5 + 4 * v23) = 0;
    *(_DWORD *)(a5 + 4 * v28) = 0;
    *(_DWORD *)(a5 + 4 * v30) = *(_DWORD *)(a4 + 4 * v30);
    int v26 = *(_DWORD *)(a4 + 4 * v28);
    int v25 = *(_DWORD *)(a4 + 4 * v23) + *(_DWORD *)(a5 + 4 * v21);
LABEL_31:
    int v27 = v26 + v25;
LABEL_51:
    *(_DWORD *)(a5 + 4 * v21) = v27;
    goto LABEL_52;
  }
  return result;
}

uint64_t sub_58414(uint64_t result, int a2, int a3, int a4, _DWORD *a5, _DWORD *a6)
{
  int v6 = a4 - a3;
  if (a4 - a3 < 0)
  {
    if (dword_8A6C8[160 * result + 7 + 10 * a2] < a3 - a4)
    {
      --*a6;
      if (!dword_8A6C8[160 * result + 8 + 10 * a2])
      {
        int v6 = -1;
        goto LABEL_4;
      }
    }
  }
  else if (a4 != a3)
  {
    *a6 += v6;
LABEL_4:
    *a5 += v6;
  }
  return result;
}

uint64_t sub_5849C(uint64_t a1, unsigned int a2, int a3, unsigned int a4)
{
  *(_DWORD *)a1 = a2;
  if (dword_88820[15 * a2] != a2) {
    sub_59F7C();
  }
  *(_OWORD *)(a1 + 4) = 0u;
  *(_OWORD *)(a1 + 308) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  *(_OWORD *)(a1 + 244) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  *(_OWORD *)(a1 + 212) = 0u;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 180) = 0u;
  *(_OWORD *)(a1 + 196) = 0u;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_DWORD *)(a1 + 340) = a2;
  *(_DWORD *)(a1 + 348) = a3;
  *(_DWORD *)(a1 + 352) = a4;
  if (!sub_56624(a3, a2)) {
    sub_59F50();
  }
  if (a3 && a4 >= 4) {
    sub_59F24();
  }
  *(_DWORD *)(a1 + 344) = LOBYTE(dword_89FC0[13 * a2 + 12]);
  return a1;
}

uint64_t sub_58574(uint64_t a1, unsigned int a2)
{
  if (a2 >= 0xF0)
  {
    uint64_t v2 = *(unsigned int *)(a1 + 348);
    if ((v2 - 1) <= 2) {
      return dword_88EB0[28 * *(unsigned int *)(a1 + 340) + 8 + v2];
    }
  }
  int v4 = *(_DWORD *)(a1 + 340);
  if (dword_89AF0[11 * v4 + 8] == a2) {
    return ((a2 & ~(-1 << dword_89AF0[11 * v4 + 7])) + 1) << (v4 == 26);
  }
  if (dword_89AF0[11 * v4 + 9] == a2) {
    return dword_89AF0[11 * v4 + 5];
  }
  if (!a2) {
    return 0;
  }
  int v5 = (char *)&dword_89AF0[11 * v4];
  unsigned int v6 = ((a2 & ~(-1 << *((_DWORD *)v5 + 7))) + 1) << (v4 == 26);
  unsigned int v7 = *((_DWORD *)v5 + 5);
  if (v7 >= v6) {
    return v6;
  }
  else {
    return v7;
  }
}

uint64_t sub_58660(uint64_t result, uint64_t a2)
{
  unsigned int v2 = 0;
  v3.i64[0] = 0x100000001;
  v3.i64[1] = 0x100000001;
  do
  {
    uint64_t v4 = *(unsigned int *)(result + 340);
    if (v4 != 27)
    {
      unint64_t v5 = 0;
      uint32x4_t v6 = (uint32x4_t)vdupq_n_s32(v2);
      int8x16_t v7 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v6, (uint32x4_t)xmmword_88810), v3), (uint32x4_t)xmmword_88800);
      int8x16_t v8 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v6, (uint32x4_t)xmmword_887F0), v3), (uint32x4_t)xmmword_88800);
      uint64_t v9 = a2
         + ((unint64_t)(vorr_s8(*(int8x8_t *)v8.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)).u32[0] | v8.i32[1]) << 7)
         + 16 * (vorr_s8(*(int8x8_t *)v7.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)).u32[0] | v7.i32[1]);
      do
      {
        if (v5 == 1) {
          int v10 = 0;
        }
        else {
          int v10 = ~(-1 << dword_89FC0[13 * v4 + 3 + v5]);
        }
        *(_DWORD *)(v9 + 4 * v5++) = v10;
        uint64_t v4 = *(unsigned int *)(result + 340);
      }
      while (v5 < dword_89FC0[13 * v4 + 2]);
    }
    ++v2;
  }
  while (v2 != 32);
  return result;
}

uint64_t sub_58748(uint64_t a1, unsigned int a2)
{
  if (a2 >= 0x21) {
    sub_59FA8();
  }
  uint64_t result = sub_594AC(a1, *(_DWORD *)(a1 + 540), a2);
  *(_DWORD *)(a1 + 540) += a2;
  return result;
}

void *sub_58790(uint64_t a1, const void *a2, uint64_t a3)
{
  size_t v6 = *(unsigned int *)(a1 + 4);
  if (v6 <= 0xF) {
    size_t v7 = 16 - v6;
  }
  else {
    size_t v7 = 0;
  }
  bzero(&__dst[v6], v7);
  uint64_t result = memcpy(__dst, a2, v6);
  if (*(_DWORD *)(a1 + 8))
  {
    unint64_t v9 = 0;
    do
    {
      *(_DWORD *)(a3 + 4 * v9) = (*(void *)&__dst[((unint64_t)*(unsigned int *)(a1 + 4 * v9 + 28) >> 3) & 0x1FFFFFF8] >> *(_DWORD *)(a1 + 4 * v9 + 28)) & ~(-1 << *(_DWORD *)(a1 + 4 * v9 + 12));
      ++v9;
    }
    while (v9 < *(unsigned int *)(a1 + 8));
  }
  return result;
}

BOOL sub_58874(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v4 = *(_DWORD *)(a1 + 340);
  unsigned int v5 = dword_89AF0[11 * v4 + 7];
  unsigned int v6 = 8 - v5;
  unsigned int v7 = dword_88820[15 * v4 + 1];
  unsigned int v8 = v7 - (8 - v5);
  if (v7 <= 8 - v5) {
    sub_5A000();
  }
  int v10 = *(_DWORD *)(a4 + 512);
  unsigned int v11 = v6 + 8 * v10;
  if (v11 < dword_88820[15 * v4 + 14]) {
    return 0;
  }
  unsigned int v14 = v5 - 8;
  int v15 = (a3 >> v5) & ~(-1 << v6);
  int v16 = 8 * v10;
  int v17 = sub_58748(a4, v8);
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 180) = 0u;
  *(_OWORD *)(a1 + 196) = 0u;
  *(_OWORD *)(a1 + 212) = 0u;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_OWORD *)(a1 + 244) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  *(_OWORD *)(a1 + 308) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  sub_57CF0((unsigned int *)a1, 0, 0, (v17 << v6) | v15);
  for (unsigned int i = 1; i != 28; ++i)
  {
    if (i == 12)
    {
      if (v11 < sub_57D50((unsigned int *)a1)) {
        return 0;
      }
    }
    else
    {
      if (i != 8)
      {
        unsigned int v19 = i >> 2;
        if (i >> 2 == 6) {
          continue;
        }
        goto LABEL_11;
      }
      sub_58748(a4, dword_88820[15 * *(unsigned int *)(a1 + 340) + 13] + v14 - *(_DWORD *)(a4 + 540));
    }
    unsigned int v19 = i >> 2;
LABEL_11:
    unsigned int v20 = sub_57DF8((unsigned int *)a1, v19, i & 3);
    unsigned int v21 = sub_58748(a4, v20);
    sub_57CF0((unsigned int *)a1, v19, i & 3, v21);
    if (v19 == 5)
    {
      unsigned int v22 = sub_57DF8((unsigned int *)a1, 6u, i & 3);
      unsigned int v23 = sub_58748(a4, v22);
      sub_57CF0((unsigned int *)a1, 6u, i & 3, v23);
    }
  }
  int v24 = sub_57D50((unsigned int *)a1);
  sub_58748(a4, v24 + v14 - *(_DWORD *)(a4 + 540));
  int v25 = *(_DWORD *)(a1 + 340);
  if (v25 == 21)
  {
    if (!*(_DWORD *)(a1 + 24)) {
      sub_59FD4();
    }
    if (!*(_DWORD *)(a1 + 36)) {
      sub_59FD4();
    }
    int v26 = *(_DWORD *)(a1 + 20);
    if ((v26 & 0x10) != 0)
    {
      unsigned int v27 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)(a1 + 344) = 2;
      sub_57CF0((unsigned int *)a1, 0, 1, v26 & 0xFFFFFFEF | (16 * ((v27 >> 4) & 1)));
      sub_57CF0((unsigned int *)a1, 0, 2, v27 & 0xFFFFFFEF);
      int v25 = *(_DWORD *)(a1 + 340);
    }
    else
    {
      int v25 = 21;
    }
  }
  uint64_t v28 = 0;
  int v29 = 0;
  uint64_t v30 = &dword_89FC0[13 * v25];
  LODWORD(v31) = v30[2];
  if (v31 <= 1) {
    uint64_t v31 = 1;
  }
  else {
    uint64_t v31 = v31;
  }
  int v32 = v30 + 3;
  do
  {
    if (v25 != 27)
    {
      uint64_t v33 = 0;
      int v34 = (_DWORD *)(a1 + 12);
      unint64_t v35 = (_DWORD *)(a1 + 12);
      do
      {
        int v36 = *v35;
        v35 += 3;
        if (!v36) {
          sub_59FD4();
        }
        int v37 = *((unsigned __int8 *)v34 - 4);
        if ((v37 & 4) != 0)
        {
          if (!*(_DWORD *)(a1 + 12 * (v33 + 12) + 12)) {
            sub_59FD4();
          }
          unsigned int v38 = *(_DWORD *)(a1 + 12 * (v33 + 12) + 8);
        }
        else
        {
          unsigned int v38 = 0;
        }
        if ((~v37 & 3) != 0)
        {
          if (!*(_DWORD *)(a1 + 12 * (v33 + 4) + 12)) {
            sub_59FD4();
          }
          unsigned int v40 = v32[v33];
          if (v40 == 32) {
            char v41 = 2;
          }
          else {
            char v41 = 1;
          }
          unsigned int v42 = v38 >> (v28 << v41);
          if (v40 == 32) {
            int v43 = 15;
          }
          else {
            int v43 = 3;
          }
          unsigned int v39 = *(_DWORD *)(a1 + 12 * (v33 + 4) + 8) - (v42 & v43) + 1;
          if (v39 > v40) {
            return 0;
          }
        }
        else
        {
          unsigned int v39 = 0;
        }
        v29 += dword_8A670[v28] * v39;
        ++v33;
        int v34 = v35;
      }
      while (v31 != v33);
    }
    ++v28;
  }
  while (v28 != 4);
  if (v25 == 26) {
    int v44 = 15;
  }
  else {
    int v44 = 7;
  }
  if (((*(_DWORD *)(a4 + 540) + v29 + v44) & ~v44) != v16) {
    return 0;
  }
  return sub_59580((unsigned int *)a1) == 0;
}

_DWORD *sub_58C50(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v6 = result;
  unint64_t v7 = 0;
  uint64_t v8 = 0;
  unsigned int v75 = result + 3;
  uint64_t v85 = a5;
  do
  {
    unsigned int v9 = 0;
    unint64_t v74 = v7;
    unint64_t v10 = v7 >> 2;
    uint64_t v89 = v10 << 6;
    uint64_t v77 = a5 + ((unint64_t)(v8 & 1) << 8) + (v10 << 6);
    int v84 = 4 * v10;
    if (dword_8A670[v8] <= 1u) {
      int v11 = 1;
    }
    else {
      int v11 = dword_8A670[v8];
    }
    uint64_t v12 = v6[85];
    uint64_t v13 = v12;
    int v87 = v11;
    do
    {
      if (v13 == 27)
      {
        unsigned int v14 = v9 + 1;
      }
      else
      {
        uint64_t v15 = 0;
        unsigned int v14 = v9 + 1;
        int v16 = v75;
        int v17 = v75;
        do
        {
          int v18 = *v17;
          v17 += 3;
          if (!v18) {
            sub_59FD4();
          }
          char v19 = *((unsigned char *)v16 - 4);
          if ((v19 & 4) != 0)
          {
            if (!v6[3 * (v15 + 12) + 3]) {
              sub_59FD4();
            }
            unsigned int v20 = v6[3 * (v15 + 12) + 2];
          }
          else
          {
            unsigned int v20 = 0;
          }
          int v21 = v19 & 3;
          if (v21 == 3)
          {
            unsigned int v22 = 0;
          }
          else
          {
            if (!v6[3 * (v15 + 4) + 3]) {
              sub_59FD4();
            }
            BOOL v23 = dword_89FC0[13 * v13 + 3 + v15] == 32;
            if (dword_89FC0[13 * v13 + 3 + v15] == 32) {
              char v24 = 2;
            }
            else {
              char v24 = 1;
            }
            unsigned int v25 = v20 >> (v8 << v24);
            if (v23) {
              int v26 = 15;
            }
            else {
              int v26 = 3;
            }
            unsigned int v22 = v6[3 * (v15 + 4) + 2] - (v25 & v26) + 1;
          }
          uint64_t result = (_DWORD *)sub_58748(a4, v22);
          if (v22 >= 0x21) {
            sub_5A02C();
          }
          if (v21 == 1) {
            unsigned int v27 = 0;
          }
          else {
            unsigned int v27 = 7;
          }
          if (v9 != 6) {
            unsigned int v27 = v9 + 1;
          }
          if (v8) {
            unsigned int v27 = v9;
          }
          uint32x4_t v28 = (uint32x4_t)vdupq_n_s32(v27);
          v29.i64[0] = 0x100000001;
          v29.i64[1] = 0x100000001;
          int8x16_t v30 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v28, (uint32x4_t)xmmword_88810), v29), (uint32x4_t)xmmword_88800);
          int8x16_t v31 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v28, (uint32x4_t)xmmword_887F0), v29), (uint32x4_t)xmmword_88800);
          *(_DWORD *)&v90[64
                        * (unint64_t)(vorr_s8(*(int8x8_t *)v31.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)).u32[0] | v31.i32[1])+ 16* (vorr_s8(*(int8x8_t *)v30.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)).u32[0] | v30.i32[1])+ 4 * v15] = (int)(result << -(char)v22) >> -(char)v22;
          uint64_t v13 = v6[85];
          ++v15;
          int v16 = v17;
        }
        while (v15 < dword_89FC0[13 * v13 + 2]);
        uint64_t v12 = v6[85];
        a5 = v85;
        int v11 = v87;
      }
      unsigned int v9 = v14;
    }
    while (v14 != v11);
    if (v12 != 27)
    {
      unsigned int v32 = 0;
      uint64_t v33 = (2 * v8) & 2;
      uint64_t v76 = v90;
      do
      {
        if (!v6[3 * v32 + 3]) {
          sub_59FD4();
        }
        uint64_t v34 = v32;
        int v35 = v6[3 * v32 + 2];
        if ((v35 & 4) != 0)
        {
          if (!v6[3 * v32 + 39]) {
            sub_59FD4();
          }
          unsigned int v36 = v6[3 * v32 + 38];
        }
        else
        {
          unsigned int v36 = 0;
        }
        unsigned int v37 = v6[3 * v32 + 2];
        BOOL v38 = dword_89FC0[13 * v12 + 3 + v34] == 32;
        if (dword_89FC0[13 * v12 + 3 + v34] == 32) {
          char v39 = 2;
        }
        else {
          char v39 = 1;
        }
        unsigned int v40 = v36 >> (v8 << v39);
        if (v38) {
          int v41 = 15;
        }
        else {
          int v41 = 3;
        }
        int v42 = v40 & v41;
        int v43 = v35 & 3;
        if (v43 == 3)
        {
          unsigned int v44 = 0;
          uint64_t v45 = 0;
          uint64_t v46 = 0;
        }
        else
        {
          if (!v6[3 * (v34 + 4) + 3]) {
            sub_59FD4();
          }
          unsigned int v44 = v6[3 * (v34 + 4) + 2] - v42 + 1;
          BOOL v23 = (v35 & 1 | 2) == 2;
          uint64_t v45 = 3;
          if (v23)
          {
            uint64_t v45 = 0;
            uint64_t v46 = 0;
          }
          else
          {
            uint64_t v46 = 1;
          }
        }
        uint64_t v47 = &v6[3 * (v34 + 8)];
        int v49 = v47[3];
        int64x2_t v48 = v47 + 3;
        if (!v49) {
          sub_59FD4();
        }
        uint64_t v50 = 0;
        uint64_t v51 = (uint64_t)&v6[3 * (v34 + 8) + 1];
        int v53 = *(_DWORD *)(v51 + 4);
        int v52 = (_DWORD *)(v51 + 4);
        *(_DWORD *)(a5 + (v46 << 7) + 16 * v45 + 4 * v34) = v53;
        int v54 = (v42 == 0) & (v37 >> 3);
        uint64_t v55 = (uint64_t)&v6[3 * (v34 + 16) + 1];
        uint64_t result = (_DWORD *)(v55 + 8);
        int v56 = (int *)(v55 + 4);
        uint64_t v57 = (uint64_t)&v6[3 * (v34 + 20) + 1];
        unsigned int v83 = (_DWORD *)(v57 + 8);
        uint64_t v58 = (uint64_t)&v6[3 * (v34 + 24) + 1];
        uint64_t v81 = (_DWORD *)(v58 + 4);
        unsigned int v82 = (_DWORD *)(v58 + 8);
        int v80 = (_DWORD *)(v57 + 4);
        char v59 = 1;
        do
        {
          uint64_t v60 = 0;
          unsigned int v61 = 0;
          char v78 = v59;
          uint64_t v62 = -v50;
          uint64_t v88 = v8 & 1 ^ v50 ^ 1;
          int v86 = v50 | v33;
          uint64_t v64 = v77 + (v50 << 7);
          int v65 = 3;
          int v66 = &v76[64 * v50];
          do
          {
            if (v62 != v33 || v89 + v60)
            {
              if (v54)
              {
                if (!*result) {
                  sub_59FD4();
                }
                int v67 = *v56;
              }
              else
              {
                int v67 = 0;
              }
              if (v44 >= 0x21) {
                sub_5A02C();
              }
              int v68 = v67 << (-(char)v44 & 0x1F) >> (-(char)v44 & 0x1F);
              if (v43 == 2)
              {
                if (!*v83) {
                  sub_59FD4();
                }
                unsigned int v72 = dword_89FC0[13 * v6[85] + 3 + v34];
                if (v72 >= 0x42) {
                  sub_5A02C();
                }
                if (!*v82) {
                  sub_59FD4();
                }
                if (!*v48) {
                  sub_59FD4();
                }
                if (v72 >= 0x21) {
                  sub_5A058();
                }
                a5 = v85;
                int v73 = (int)(((*v52
                            - v68
                            + *(_DWORD *)&v66[v60]
                            + ((int)(*v81 << -(v72 >> 1)) >> -(v72 >> 1)) * v86
                            + ((int)(*v80 << -(v72 >> 1)) >> -(v72 >> 1)) * (v84 + v61)) & ~(-1 << v72)) << -(char)v72) >> -(char)v72;
                goto LABEL_84;
              }
              if (v43 == 1)
              {
                unsigned int v70 = dword_89FC0[13 * v6[85] + 3 + v34];
                if (v70 >= 0x21) {
                  sub_5A058();
                }
                if ((v8 & 2) != 0) {
                  unsigned int v71 = v61;
                }
                else {
                  unsigned int v71 = v65;
                }
                uint64_t v63 = v88 | v33;
                int v79 = (2 * v8) & 0x3FFFFFFC;
                *(_DWORD *)(a5 + (v63 << 7) + 16 * (v71 + v79) + 4 * v34) = (int)(((*(_DWORD *)(a5
                                                                                                + ((unint64_t)dword_8A570[16 * v63 + 1 + 2 * v71 + 2 * v79] << 7)
                                                                                                + 16
                                                                                                * dword_8A570[16 * v63 + 2 * v71 + 2 * v79]
                                                                                                + 4 * v34)
                                                                                    - v68
                                                                                    + *(_DWORD *)&v90[64 * v88 + 16 * v71 + 4 * v34]) & ~(-1 << v70)) << -(char)v70) >> -(char)v70;
              }
              else
              {
                if (v43)
                {
                  int v73 = *(_DWORD *)(a5 + 4 * v34);
LABEL_84:
                  *(_DWORD *)(v64 + v60) = v73;
                  goto LABEL_85;
                }
                if (!*v48) {
                  sub_59FD4();
                }
                unsigned int v69 = dword_89FC0[13 * v6[85] + 3 + v34];
                if (v69 >= 0x21) {
                  sub_5A058();
                }
                *(_DWORD *)(v64 + v60) = (int)(((*v52 - v68 + *(_DWORD *)&v66[v60]) & ~(-1 << v69)) << -(char)v69) >> -(char)v69;
              }
            }
LABEL_85:
            ++v61;
            --v65;
            v60 += 16;
          }
          while (v60 != 64);
          char v59 = 0;
          uint64_t v50 = 1;
        }
        while ((v78 & 1) != 0);
        unsigned int v32 = v34 + 1;
        uint64_t v12 = v6[85];
        v76 += 4;
        v77 += 4;
      }
      while ((int)v34 + 1 < dword_89FC0[13 * v12 + 2]);
    }
    ++v8;
    unint64_t v7 = v74 + 2;
  }
  while (v8 != 4);
  return result;
}

_DWORD *sub_59384(_DWORD *result, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = result[85];
  uint64_t v4 = a2;
  do
  {
    uint64_t v5 = 0;
    uint64_t v6 = v4;
    uint64_t v7 = v3;
    do
    {
      if (v7 != 27)
      {
        uint64_t v8 = 0;
        unsigned int v9 = result + 3;
        do
        {
          if (!*v9) {
            sub_59FD4();
          }
          if ((*(unsigned char *)(v9 - 1) & 0x10) != 0)
          {
            uint64_t v10 = result[86];
            if (v8 != v10)
            {
              unsigned int v11 = dword_89FC0[13 * v7 + 3 + v8];
              if (v11 >= 0x21) {
                sub_5A058();
              }
              *(_DWORD *)(v6 + 4 * v8) = (int)((((*(_DWORD *)(a2 + (v2 << 7) + 16 * v5 + 4 * v10) >> (dword_89FC0[13 * v7 + 3 + v10] - v11))
                                               + *(_DWORD *)(v6 + 4 * v8)) & ~(-1 << v11)) << -(char)v11) >> -(char)v11;
              uint64_t v3 = result[85];
            }
          }
          *(_DWORD *)(v6 + 4 * v8) &= ~(-1 << dword_89FC0[13 * v3 + 3 + v8]);
          uint64_t v3 = result[85];
          ++v8;
          v9 += 3;
          uint64_t v7 = v3;
        }
        while (v8 < dword_89FC0[13 * v3 + 2]);
      }
      ++v5;
      v6 += 16;
    }
    while (v5 != 8);
    ++v2;
    v4 += 128;
  }
  while (v2 != 4);
  return result;
}

uint64_t sub_594AC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a3 >= 0x21) {
    sub_5A084();
  }
  char v3 = a2;
  unsigned int v4 = *(_DWORD *)(a1 + 536);
  if (a3 + a2 > v4)
  {
    printf("read overflow:  read bit=%d size=%d, total=%d\n", a2, a3, v4);
    __assert_rtn("get", "interchange_bit_pack.h", 85, "0");
  }
  int v5 = *(_DWORD *)(a1 + 512);
  unint64_t __dst = 0;
  uint64_t v6 = 528;
  if (!*(unsigned char *)(a1 + 544)) {
    uint64_t v6 = 520;
  }
  uint64_t v7 = *(void *)(a1 + v6);
  LODWORD(v8) = v5 - (a2 >> 3);
  if (v8 >= 8) {
    size_t v8 = 8;
  }
  else {
    size_t v8 = v8;
  }
  uint64_t v9 = -1 << a3;
  memcpy(&__dst, (const void *)(v7 + (a2 >> 3)), v8);
  return (__dst >> (v3 & 7)) & ~v9;
}

uint64_t sub_59580(unsigned int *a1)
{
  unsigned int v1 = *a1;
  if (!a1[3 * LOBYTE(dword_89FC0[13 * *a1 + 12]) + 3]) {
    sub_59FD4();
  }
  LODWORD(v2) = (LOBYTE(a1[3 * LOBYTE(dword_89FC0[13 * *a1 + 12]) + 2]) >> 4) & 1;
  if (v1 == 21) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = v2;
  }
  if (v1 != 27)
  {
    uint64_t v4 = 0;
    int v5 = &dword_89FC0[13 * v1];
    LODWORD(v6) = v5[2];
    if (v6 <= 1) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = v6;
    }
    uint64_t v7 = a1 + 3;
    size_t v8 = v5 + 3;
    uint64_t v9 = a1 + 3;
    do
    {
      unsigned int v10 = *v9;
      v9 += 3;
      if (!v10) {
        sub_59FD4();
      }
      char v11 = *((unsigned char *)v7 - 4);
      if ((v11 & 3u) - 1 >= 2) {
        int v12 = v2;
      }
      else {
        int v12 = v2 | 2;
      }
      if ((v11 & 0x10) != 0) {
        LODWORD(v2) = v12;
      }
      if ((v1 > 0x16 || ((1 << v1) & 0x4000C3) == 0) && (v11 & 3) == 2) {
        LODWORD(v2) = v2 | 4;
      }
      int v13 = v11 & 3;
      if (v13 == 3)
      {
        if (!a1[3 * (v4 + 4) + 3]) {
          sub_59FD4();
        }
        if (v11 & 4 | a1[3 * (v4 + 4) + 2]) {
          LODWORD(v2) = v2 | 0x10;
        }
      }
      else
      {
        int v14 = v2 | 8;
        if (v1 != 26) {
          int v14 = v2;
        }
        if (v13 == 1) {
          LODWORD(v2) = v14;
        }
      }
      if (!a1[3 * (v4 + 4) + 3]) {
        sub_59FD4();
      }
      if (a1[3 * (v4 + 4) + 2] + 1 <= v8[v4]) {
        uint64_t v2 = v2;
      }
      else {
        uint64_t v2 = v2 | 0x20;
      }
      ++v4;
      uint64_t v7 = v9;
    }
    while (v6 != v4);
  }
  return v2;
}

void sub_596FC()
{
  __assert_rtn("AVE_DLList_Init", "AVE_DLList.c", 70, "psNode != ((void *)0)");
}

void sub_59728()
{
  __assert_rtn("AVE_DLList_Empty", "AVE_DLList.c", 85, "psNode != ((void *)0)");
}

void sub_59754()
{
  __assert_rtn("AVE_DLList_Empty", "AVE_DLList.c", 86, "psNode->psPrev != ((void *)0)");
}

void sub_59780()
{
  __assert_rtn("AVE_DLList_Empty", "AVE_DLList.c", 87, "psNode->psNext != ((void *)0)");
}

void sub_597AC()
{
  __assert_rtn("AVE_DLList_PopFront", "AVE_DLList.c", 344, "psList != ((void *)0)");
}

void sub_597D8()
{
  __assert_rtn("AVE_DLList_PopFront", "AVE_DLList.c", 346, "psList->psPrev != ((void *)0)");
}

void sub_59804()
{
  __assert_rtn("AVE_DLList_PopFront", "AVE_DLList.c", 347, "psList->psNext != ((void *)0)");
}

void sub_59830()
{
  __assert_rtn("AVE_DLList_Prev", "AVE_DLList.c", 159, "psNode != ((void *)0)");
}

void sub_5985C()
{
  __assert_rtn("AVE_DLList_Next", "AVE_DLList.c", 171, "psNode != ((void *)0)");
}

void sub_59888()
{
  __assert_rtn("AVE_DLList_Erase", "AVE_DLList.c", 222, "psNode != ((void *)0)");
}

void sub_598B4()
{
  __assert_rtn("AVE_DLList_Erase", "AVE_DLList.c", 224, "psNode->psPrev != ((void *)0)");
}

void sub_598E0()
{
  __assert_rtn("AVE_DLList_Erase", "AVE_DLList.c", 225, "psNode->psNext != ((void *)0)");
}

void sub_5990C()
{
  __assert_rtn("AVE_DLList_Front", "AVE_DLList.c", 271, "psList != ((void *)0)");
}

void sub_59938()
{
  __assert_rtn("AVE_DLList_Back", "AVE_DLList.c", 287, "psList != ((void *)0)");
}

void sub_59964()
{
  __assert_rtn("AVE_DLList_PushBack", "AVE_DLList.c", 323, "psList != ((void *)0)");
}

void sub_59990()
{
  __assert_rtn("AVE_DLList_PushBack", "AVE_DLList.c", 324, "psNewNode != ((void *)0)");
}

void sub_599BC()
{
  __assert_rtn("AVE_DLList_PushBack", "AVE_DLList.c", 326, "psList->psPrev != ((void *)0)");
}

void sub_599E8()
{
  __assert_rtn("AVE_DLList_PushBack", "AVE_DLList.c", 327, "psList->psNext != ((void *)0)");
}

void sub_59A14()
{
  __assert_rtn("AVE_DLList_PopBack", "AVE_DLList.c", 365, "psList != ((void *)0)");
}

void sub_59A40()
{
  __assert_rtn("AVE_DLList_PopBack", "AVE_DLList.c", 367, "psList->psPrev != ((void *)0)");
}

void sub_59A6C()
{
  __assert_rtn("AVE_DLList_PopBack", "AVE_DLList.c", 368, "psList->psNext != ((void *)0)");
}

void sub_59A98()
{
  __assert_rtn("AVE_DLList_Begin", "AVE_DLList.c", 449, "psList != ((void *)0)");
}

void sub_59AC4()
{
  __assert_rtn("AVE_DLList_End", "AVE_DLList.c", 461, "psList != ((void *)0)");
}

void sub_59AF0()
{
  __assert_rtn("AVE_DLList_RBegin", "AVE_DLList.c", 473, "psList != ((void *)0)");
}

void sub_59B1C()
{
  __assert_rtn("AVE_DLList_REnd", "AVE_DLList.c", 485, "psList != ((void *)0)");
}

void sub_59B48()
{
  __assert_rtn("AVE_DevCap_Find", "AVE_DevCap.cpp", 1758, "pDevCap->psCEntry != __null");
}

void sub_59B74()
{
  __assert_rtn("AVE_DevCap_FindByType", "AVE_DevCap.cpp", 1788, "pDevCap->psCEntry != __null");
}

void sub_59BA0()
{
  __assert_rtn("AVE_DevCap_Type2Idx", "AVE_DevCap.cpp", 1853, "idx >= 0");
}

void sub_59BCC()
{
}

void sub_59BF8()
{
  __assert_rtn("dec_symbols", "htpc_entropy.h", 155, "bb_avail == 0");
}

void sub_59C24()
{
  __assert_rtn("interchange_decompress_plane", "interchange.cpp", 99, "depth == 8 || depth == 10");
}

void sub_59C50()
{
  __assert_rtn("skip", "interchange_bit_pack.h", 103, "read_ptr <= size_bits()");
}

void sub_59C7C()
{
  __assert_rtn("lossy_decompress_dquad", "interchange_lossy.h", 1063, "delta_quant <= ((1ull << delta_bits[c]) - 1)");
}

void sub_59CA8()
{
  __assert_rtn("lossy_decompress_dquad", "interchange_lossy.h", 1013, "pixel_unpacked <= legal_pixel_size");
}

void sub_59CD4()
{
  __assert_rtn("lossy_decompress_dquad", "interchange_lossy.h", 911, "mode_sz != 0");
}

void sub_59D00()
{
  __assert_rtn("lossy_decompress_dquad", "interchange_lossy.h", 901, "mode_sz != 0");
}

void sub_59D2C()
{
  __assert_rtn("decompress", "interchange_decompressor.h", 203, "lossy_level == 0");
}

void sub_59D58()
{
  __assert_rtn("decompress", "interchange_decompressor.h", 212, "lossy_level == 0");
}

void sub_59D84()
{
}

void sub_59DB0()
{
}

void sub_59DDC()
{
}

void sub_59E08()
{
}

void sub_59E34()
{
}

void sub_59E60()
{
}

void sub_59E8C(int a1)
{
  printf("comp_width = %d\n", a1);
  __assert_rtn("get_id", "interchange_lossy.h", 195, "fmt_id != 6");
}

void sub_59ECC()
{
  __assert_rtn("derive_sharing", "interchange_lossy.h", 357, "start_level[3] <= 0");
}

void sub_59EF8()
{
  __assert_rtn("derive_sharing", "interchange_lossy.h", 270, "mode[3] == 0 || mode[3] == 1");
}

void sub_59F24()
{
  __assert_rtn("decompressor", "interchange_decompressor.h", 41, "lossy_level == 0 || comp_type < COMP_TYPE_INVALID");
}

void sub_59F50()
{
}

void sub_59F7C()
{
  __assert_rtn("set_format", "interchange_header.h", 205, "header_layout_table[id].format == id");
}

void sub_59FA8()
{
  __assert_rtn("unpack", "interchange_bit_pack.h", 96, "size <= 32");
}

void sub_59FD4()
{
}

void sub_5A000()
{
}

void sub_5A02C()
{
  __assert_rtn("sign_extend", "interchange_constants.h", 90, "width <= 32");
}

void sub_5A058()
{
  __assert_rtn("wrap_to_range", "interchange_constants.h", 85, "width <= 32");
}

void sub_5A084()
{
  __assert_rtn("get", "interchange_bit_pack.h", 82, "size <= 32");
}

void *__cdecl CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint)
{
  return _CFAllocatorAllocate(allocator, size, hint);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return _CFArrayCreateMutable(allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return _CFArrayGetCount(theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return _CFArrayGetValueAtIndex(theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return _CFBooleanGetTypeID();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return _CFBooleanGetValue(BOOLean);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return _CFDataCreate(allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return _CFDataCreateMutable(allocator, capacity);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return _CFDataGetBytePtr(theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return _CFDataGetLength(theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return _CFDataGetMutableBytePtr(theData);
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return _CFDictionaryContainsKey(theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreate(allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreateMutable(allocator, capacity, keyCallBacks, valueCallBacks);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return _CFDictionaryGetValue(theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return _CFEqual(cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return _CFGetTypeID(cf);
}

CFRunLoopSourceRef CFMachPortCreateRunLoopSource(CFAllocatorRef allocator, CFMachPortRef port, CFIndex order)
{
  return _CFMachPortCreateRunLoopSource(allocator, port, order);
}

CFMachPortRef CFMachPortCreateWithPort(CFAllocatorRef allocator, mach_port_t portNum, CFMachPortCallBack callout, CFMachPortContext *context, Boolean *shouldFreeInfo)
{
  return _CFMachPortCreateWithPort(allocator, portNum, callout, context, shouldFreeInfo);
}

void CFMachPortInvalidate(CFMachPortRef port)
{
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return _CFNumberCreate(allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return _CFNumberGetTypeID();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return _CFNumberGetValue(number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return _CFPreferencesCopyAppValue(key, applicationID);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return _CFPropertyListCreateData(allocator, propertyList, format, options, error);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return _CFRetain(cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return _CFRunLoopGetCurrent();
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

void CFRunLoopRun(void)
{
}

void CFRunLoopStop(CFRunLoopRef rl)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return _CFStringCompare(theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return _CFStringCreateWithCString(alloc, cStr, encoding);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return _CFStringGetCString(theString, buffer, bufferSize, encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return _CFStringGetCStringPtr(theString, encoding);
}

CFStringEncoding CFStringGetSystemEncoding(void)
{
  return _CFStringGetSystemEncoding();
}

CFTypeID CFStringGetTypeID(void)
{
  return _CFStringGetTypeID();
}

uint64_t CMBaseObjectGetDerivedStorage()
{
  return _CMBaseObjectGetDerivedStorage();
}

OSStatus CMBlockBufferCreateWithMemoryBlock(CFAllocatorRef structureAllocator, void *memoryBlock, size_t blockLength, CFAllocatorRef blockAllocator, const CMBlockBufferCustomBlockSource *customBlockSource, size_t offsetToData, size_t dataLength, CMBlockBufferFlags flags, CMBlockBufferRef *blockBufferOut)
{
  return _CMBlockBufferCreateWithMemoryBlock(structureAllocator, memoryBlock, blockLength, blockAllocator, customBlockSource, offsetToData, dataLength, flags, blockBufferOut);
}

OSStatus CMBlockBufferGetDataPointer(CMBlockBufferRef theBuffer, size_t offset, size_t *lengthAtOffsetOut, size_t *totalLengthOut, char **dataPointerOut)
{
  return _CMBlockBufferGetDataPointer(theBuffer, offset, lengthAtOffsetOut, totalLengthOut, dataPointerOut);
}

uint64_t CMDerivedObjectCreate()
{
  return _CMDerivedObjectCreate();
}

OSStatus CMSampleBufferCreate(CFAllocatorRef allocator, CMBlockBufferRef dataBuffer, Boolean dataReady, CMSampleBufferMakeDataReadyCallback makeDataReadyCallback, void *makeDataReadyRefcon, CMFormatDescriptionRef formatDescription, CMItemCount numSamples, CMItemCount numSampleTimingEntries, const CMSampleTimingInfo *sampleTimingArray, CMItemCount numSampleSizeEntries, const size_t *sampleSizeArray, CMSampleBufferRef *sampleBufferOut)
{
  return _CMSampleBufferCreate(allocator, dataBuffer, dataReady, makeDataReadyCallback, makeDataReadyRefcon, formatDescription, numSamples, numSampleTimingEntries, sampleTimingArray, numSampleSizeEntries, sampleSizeArray, sampleBufferOut);
}

CFArrayRef CMSampleBufferGetSampleAttachmentsArray(CMSampleBufferRef sbuf, Boolean createIfNecessary)
{
  return _CMSampleBufferGetSampleAttachmentsArray(sbuf, createIfNecessary);
}

int32_t CMTimeCompare(CMTime *time1, CMTime *time2)
{
  return _CMTimeCompare(time1, time2);
}

CFTypeRef CVBufferCopyAttachment(CVBufferRef buffer, CFStringRef key, CVAttachmentMode *attachmentMode)
{
  return _CVBufferCopyAttachment(buffer, key, attachmentMode);
}

CFDictionaryRef CVBufferCopyAttachments(CVBufferRef buffer, CVAttachmentMode attachmentMode)
{
  return _CVBufferCopyAttachments(buffer, attachmentMode);
}

void CVBufferSetAttachments(CVBufferRef buffer, CFDictionaryRef theAttachments, CVAttachmentMode attachmentMode)
{
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return _CVPixelBufferGetBaseAddress(pixelBuffer);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return _CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return _CVPixelBufferGetBytesPerRow(pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return _CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, planeIndex);
}

void CVPixelBufferGetExtendedPixels(CVPixelBufferRef pixelBuffer, size_t *extraColumnsOnLeft, size_t *extraColumnsOnRight, size_t *extraRowsOnTop, size_t *extraRowsOnBottom)
{
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return _CVPixelBufferGetHeight(pixelBuffer);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return _CVPixelBufferGetHeightOfPlane(pixelBuffer, planeIndex);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return _CVPixelBufferGetIOSurface(pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return _CVPixelBufferGetPixelFormatType(pixelBuffer);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return _CVPixelBufferGetPlaneCount(pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return _CVPixelBufferGetWidth(pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return _CVPixelBufferGetWidthOfPlane(pixelBuffer, planeIndex);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return _CVPixelBufferLockBaseAddress(pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferPoolCreate(CFAllocatorRef allocator, CFDictionaryRef poolAttributes, CFDictionaryRef pixelBufferAttributes, CVPixelBufferPoolRef *poolOut)
{
  return _CVPixelBufferPoolCreate(allocator, poolAttributes, pixelBufferAttributes, poolOut);
}

CVReturn CVPixelBufferPoolCreatePixelBuffer(CFAllocatorRef allocator, CVPixelBufferPoolRef pixelBufferPool, CVPixelBufferRef *pixelBufferOut)
{
  return _CVPixelBufferPoolCreatePixelBuffer(allocator, pixelBufferPool, pixelBufferOut);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return _CVPixelBufferRetain(texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return _CVPixelBufferUnlockBaseAddress(pixelBuffer, unlockFlags);
}

uint64_t FigCFDictionarySetInt32()
{
  return _FigCFDictionarySetInt32();
}

uint64_t FigFormatDescriptionRelease()
{
  return _FigFormatDescriptionRelease();
}

kern_return_t IOConnectCallAsyncMethod(mach_port_t connection, uint32_t selector, mach_port_t wake_port, uint64_t *reference, uint32_t referenceCnt, const uint64_t *input, uint32_t inputCnt, const void *inputStruct, size_t inputStructCnt, uint64_t *output, uint32_t *outputCnt, void *outputStruct, size_t *outputStructCnt)
{
  return _IOConnectCallAsyncMethod(connection, selector, wake_port, reference, referenceCnt, input, inputCnt, inputStruct, inputStructCnt, output, outputCnt, outputStruct, outputStructCnt);
}

kern_return_t IOConnectCallStructMethod(mach_port_t connection, uint32_t selector, const void *inputStruct, size_t inputStructCnt, void *outputStruct, size_t *outputStructCnt)
{
  return _IOConnectCallStructMethod(connection, selector, inputStruct, inputStructCnt, outputStruct, outputStructCnt);
}

kern_return_t IOCreateReceivePort(uint32_t msgType, mach_port_t *recvPort)
{
  return _IOCreateReceivePort(msgType, recvPort);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return _IOObjectRelease(object);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return _IOServiceClose(connect);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return _IOServiceGetMatchingService(mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return _IOServiceMatching(name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return _IOServiceOpen(service, owningTask, type, connect);
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return _IOSurfaceCreate(properties);
}

size_t IOSurfaceGetAllocSize(IOSurfaceRef buffer)
{
  return _IOSurfaceGetAllocSize(buffer);
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return _IOSurfaceGetBaseAddress(buffer);
}

uint64_t IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane()
{
  return _IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
}

uint64_t IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane()
{
  return _IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
}

void *__cdecl IOSurfaceGetBaseAddressOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return _IOSurfaceGetBaseAddressOfPlane(buffer, planeIndex);
}

uint64_t IOSurfaceGetBytesPerCompressedTileHeaderOfPlane()
{
  return _IOSurfaceGetBytesPerCompressedTileHeaderOfPlane();
}

uint64_t IOSurfaceGetBytesPerRowOfCompressedTileHeaderGroupsOfPlane()
{
  return _IOSurfaceGetBytesPerRowOfCompressedTileHeaderGroupsOfPlane();
}

uint64_t IOSurfaceGetHTPCVerticalHeaderGroupingModeOfPlane()
{
  return _IOSurfaceGetHTPCVerticalHeaderGroupingModeOfPlane();
}

uint64_t IOSurfaceGetHeightInCompressedTilesOfPlane()
{
  return _IOSurfaceGetHeightInCompressedTilesOfPlane();
}

uint64_t IOSurfaceGetHorizontalPixelOffsetWithinCompressedTileArrayOfPlane()
{
  return _IOSurfaceGetHorizontalPixelOffsetWithinCompressedTileArrayOfPlane();
}

IOSurfaceID IOSurfaceGetID(IOSurfaceRef buffer)
{
  return _IOSurfaceGetID(buffer);
}

OSType IOSurfaceGetPixelFormat(IOSurfaceRef buffer)
{
  return _IOSurfaceGetPixelFormat(buffer);
}

int32_t IOSurfaceGetUseCount(IOSurfaceRef buffer)
{
  return _IOSurfaceGetUseCount(buffer);
}

uint64_t IOSurfaceGetVerticalPixelOffsetWithinCompressedTileArrayOfPlane()
{
  return _IOSurfaceGetVerticalPixelOffsetWithinCompressedTileArrayOfPlane();
}

uint64_t IOSurfaceGetWidthInCompressedTilesOfPlane()
{
  return _IOSurfaceGetWidthInCompressedTilesOfPlane();
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return _IOSurfaceLock(buffer, options, seed);
}

IOSurfaceRef IOSurfaceLookup(IOSurfaceID csid)
{
  return _IOSurfaceLookup(csid);
}

void IOSurfaceSetValue(IOSurfaceRef buffer, CFStringRef key, CFTypeRef value)
{
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return _IOSurfaceUnlock(buffer, options, seed);
}

NSString *NSTemporaryDirectory(void)
{
  return _NSTemporaryDirectory();
}

uint64_t VTEncoderSessionCreateCMBlockBuffer()
{
  return _VTEncoderSessionCreateCMBlockBuffer();
}

uint64_t VTEncoderSessionCreateMVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults()
{
  return _VTEncoderSessionCreateMVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults();
}

uint64_t VTEncoderSessionCreateVideoFormatDescription()
{
  return _VTEncoderSessionCreateVideoFormatDescription();
}

uint64_t VTEncoderSessionEmitEncodedFrame()
{
  return _VTEncoderSessionEmitEncodedFrame();
}

uint64_t VTEncoderSessionEmitEncodedTile()
{
  return _VTEncoderSessionEmitEncodedTile();
}

uint64_t VTMotionEstimationProcessorSessionCreateMotionVectorPixelBuffer()
{
  return _VTMotionEstimationProcessorSessionCreateMotionVectorPixelBuffer();
}

uint64_t VTMultiPassStorageSetDataAtTimeStamp()
{
  return _VTMultiPassStorageSetDataAtTimeStamp();
}

uint64_t VTTemporalFilterPluginGetClassID()
{
  return _VTTemporalFilterPluginGetClassID();
}

uint64_t VTTemporalFilterPluginSessionConcludeInputFrame()
{
  return _VTTemporalFilterPluginSessionConcludeInputFrame();
}

uint64_t VTTemporalFilterPluginSessionEmitOutputFrame()
{
  return _VTTemporalFilterPluginSessionEmitOutputFrame();
}

uint64_t VTTemporalFilterPluginSessionGetOutputPixelBufferPool()
{
  return _VTTemporalFilterPluginSessionGetOutputPixelBufferPool();
}

uint64_t VTTemporalFilterPluginSessionSetInputPixelBufferAttributes()
{
  return _VTTemporalFilterPluginSessionSetInputPixelBufferAttributes();
}

uint64_t VTTemporalFilterPluginSessionSetOutputPixelBufferAttributes()
{
  return _VTTemporalFilterPluginSessionSetOutputPixelBufferAttributes();
}

uint64_t VTTileEncoderSessionCreateVideoFormatDescription()
{
  return _VTTileEncoderSessionCreateVideoFormatDescription();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return std::logic_error::logic_error(this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return std::bad_array_new_length::bad_array_new_length(this);
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return ___cxa_allocate_exception(thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return ___cxa_begin_catch(a1);
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int *__error(void)
{
  return ___error();
}

int atoi(const char *a1)
{
  return _atoi(a1);
}

void bzero(void *a1, size_t a2)
{
}

int clock_gettime(clockid_t __clock_id, timespec *__tp)
{
  return _clock_gettime(__clock_id, __tp);
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return _clock_gettime_nsec_np(__clock_id);
}

int fclose(FILE *a1)
{
  return _fclose(a1);
}

char *__cdecl fgetln(FILE *a1, size_t *a2)
{
  return _fgetln(a1, a2);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return _fopen(__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return _fprintf(a1, a2);
}

void free(void *a1)
{
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return _fseek(a1, a2, a3);
}

int fseeko(FILE *__stream, off_t a2, int __whence)
{
  return _fseeko(__stream, a2, __whence);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return _fwrite(__ptr, __size, __nitems, __stream);
}

int gettimeofday(timeval *a1, void *a2)
{
  return _gettimeofday(a1, a2);
}

uint64_t kdebug_trace()
{
  return _kdebug_trace();
}

tm *__cdecl localtime(const time_t *a1)
{
  return _localtime(a1);
}

kern_return_t mach_port_mod_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta)
{
  return _mach_port_mod_refs(task, name, right, delta);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return _mach_timebase_info(info);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return _memset(__b, __c, __len);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

void os_release(void *object)
{
}

void *__cdecl os_retain(void *object)
{
  return _os_retain(object);
}

int printf(const char *a1, ...)
{
  return _printf(a1);
}

int pthread_attr_destroy(pthread_attr_t *a1)
{
  return _pthread_attr_destroy(a1);
}

int pthread_attr_getschedparam(const pthread_attr_t *a1, sched_param *a2)
{
  return _pthread_attr_getschedparam(a1, a2);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return _pthread_attr_init(a1);
}

int pthread_attr_setschedparam(pthread_attr_t *a1, const sched_param *a2)
{
  return _pthread_attr_setschedparam(a1, a2);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return _pthread_cond_destroy(a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return _pthread_cond_init(a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return _pthread_cond_signal(a1);
}

int pthread_cond_timedwait(pthread_cond_t *a1, pthread_mutex_t *a2, const timespec *a3)
{
  return _pthread_cond_timedwait(a1, a2, a3);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return _pthread_create(a1, a2, a3, a4);
}

void pthread_exit(void *a1)
{
}

int pthread_join(pthread_t a1, void **a2)
{
  return _pthread_join(a1, a2);
}

mach_port_t pthread_mach_thread_np(pthread_t a1)
{
  return _pthread_mach_thread_np(a1);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return _pthread_mutex_destroy(a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return _pthread_mutex_init(a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return _pthread_mutex_lock(a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return _pthread_mutex_unlock(a1);
}

int pthread_mutexattr_destroy(pthread_mutexattr_t *a1)
{
  return _pthread_mutexattr_destroy(a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return _pthread_mutexattr_init(a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return _pthread_mutexattr_settype(a1, a2);
}

pthread_t pthread_self(void)
{
  return _pthread_self();
}

int pthread_setname_np(const char *a1)
{
  return _pthread_setname_np(a1);
}

int rand(void)
{
  return _rand();
}

char *__cdecl setlocale(int a1, const char *a2)
{
  return _setlocale(a1, a2);
}

int setpriority(int a1, id_t a2, int a3)
{
  return _setpriority(a1, a2, a3);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return _sscanf(a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return _stat(a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return _strchr(__s, __c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return _strcmp(__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return _strcpy(__dst, __src);
}

char *__cdecl strerror(int __errnum)
{
  return _strerror(__errnum);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return _strftime(a1, a2, a3, a4);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return _strncpy(__dst, __src, __n);
}

double strtod(const char *a1, char **a2)
{
  return _strtod(a1, a2);
}

uintmax_t strtoumax(const char *__nptr, char **__endptr, int __base)
{
  return _strtoumax(__nptr, __endptr, __base);
}

void syslog(int a1, const char *a2, ...)
{
}

kern_return_t thread_policy_set(thread_act_t thread, thread_policy_flavor_t flavor, thread_policy_t policy_info, mach_msg_type_number_t policy_infoCnt)
{
  return _thread_policy_set(thread, flavor, policy_info, policy_infoCnt);
}

time_t time(time_t *a1)
{
  return _time(a1);
}

int usleep(useconds_t a1)
{
  return _usleep(a1);
}

uint64_t voucher_adopt()
{
  return _voucher_adopt();
}

uint64_t voucher_copy()
{
  return _voucher_copy();
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return _vsnprintf(__str, __size, __format, a4);
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return [a1 UTF8String];
}