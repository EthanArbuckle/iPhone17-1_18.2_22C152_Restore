uint64_t AVE_DW_Init(void)
{
  int v0;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v3;
  uint64_t v4;
  int v5;
  __uint64_t v6;
  const char *v7;
  __uint64_t v8;
  const char *v10;
  const char *v11;

  if (AVE_Log_CheckLevel(0x2Cu, 7))
  {
    v0 = AVE_Log_CheckConsole(0x2Cu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v0)
    {
      printf("%lld %d AVE %s: %s Enter\n", CurrTime, 44, LevelStr, "AVE_DW_Init");
      v3 = AVE_GetCurrTime();
      v10 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Enter", v3, 44, v10, "AVE_DW_Init");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter", CurrTime, 44, LevelStr, "AVE_DW_Init");
    }
  }
  AVE_DW_Default((uint64_t)&gs_sAVE_DW_Cfg);
  v4 = AVE_DW_Retrieve((uint64_t)&gs_sAVE_DW_Cfg);
  if (AVE_Log_CheckLevel(0x2Cu, 7))
  {
    v5 = AVE_Log_CheckConsole(0x2Cu);
    v6 = AVE_GetCurrTime();
    v7 = AVE_Log_GetLevelStr(7);
    if (v5)
    {
      printf("%lld %d AVE %s: %s Exit %d\n", v6, 44, v7, "AVE_DW_Init", v4);
      v8 = AVE_GetCurrTime();
      v11 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Exit %d", v8, 44, v11, "AVE_DW_Init", v4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %d", v6, 44, v7, "AVE_DW_Init", v4);
    }
  }
  return v4;
}

uint64_t AVE_DW_Retrieve(uint64_t a1)
{
  int v4 = 0;
  if (!AVE_DW_GetInt32(0, "AVE_DWMode", &v4)) {
    *(_DWORD *)a1 = v4;
  }
  if (!AVE_DW_GetInt32(0, "AVE_DefaultCfg", &v4)) {
    *(unsigned char *)(a1 + 4) = v4 != 0;
  }
  AVE_DW_RetrieveFeature((void *)a1);
  AVE_DW_RetrievePerf((_DWORD *)a1);
  AVE_DW_RetrieveDump(a1);
  AVE_DW_RetrieveLog(a1 + 920);
  AVE_DW_RetrieveAlg(a1);
  AVE_DW_RetrieveHw((_DWORD *)a1);
  AVE_DW_RetrieveMCTF((_DWORD *)a1);
  if (!AVE_DW_GetInt32(0, "AVE_Usage", &v4)) {
    *(_DWORD *)(a1 + 1372) = v4;
  }
  if (!AVE_DW_GetInt32(0, "AVE_PropertyMode", &v4)) {
    *(_DWORD *)(a1 + 1376) = v4;
  }
  if (!AVE_DW_GetInt32(0, "AVE_SourceFrameCount", &v4)) {
    *(_DWORD *)(a1 + 1380) = v4;
  }
  if (!AVE_DW_GetInt32(0, "AVE_CmdTimeOutMode", &v4)) {
    *(_DWORD *)(a1 + 1384) = v4;
  }
  if (!AVE_DW_GetInt32(0, "AVE_FwHeartBeatTimerPanic", &v4)) {
    *(_DWORD *)(a1 + 1388) = v4;
  }
  if (!AVE_DW_GetInt32(0, "AVE_SchedPolicy", &v4)) {
    *(_DWORD *)(a1 + 1392) = v4;
  }
  if (!AVE_DW_GetInt32(0, "AVE_OutputBufNum", &v4)) {
    *(_DWORD *)(a1 + 1396) = v4;
  }
  if (!AVE_DW_GetInt32(0, "AVE_OutputBufSize", &v4)) {
    *(_DWORD *)(a1 + 1400) = v4;
  }
  if (!AVE_DW_GetInt32(0, "AVE_SNR", &v4)) {
    *(_DWORD *)(a1 + 1404) = v4;
  }
  uint64_t Int32 = AVE_DW_GetInt32(0, "AVE_TimeStats_MaxCnt", &v4);
  if (!Int32) {
    *(_DWORD *)(a1 + 1408) = v4;
  }
  AVE_DW_RetrieveDeprecatedKeys((_DWORD *)a1);
  return Int32;
}

uint64_t AVE_DW_GetInt32(const char *a1, const char *a2, int *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (!a2 || !a3)
  {
    if (AVE_Log_CheckLevel(0x2Cu, 4))
    {
      int v21 = AVE_Log_CheckConsole(0x2Cu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", CurrTime, 44, LevelStr, "AVE_DW_GetInt32", 424, "pKey != __null && pVal != __null", a1, a2, a3);
        __uint64_t v24 = AVE_GetCurrTime();
        v29 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v24, 44, v29);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", CurrTime, 44, LevelStr);
      }
    }
    return 4294966295;
  }
  if (a1) {
    v6 = a1;
  }
  else {
    v6 = "com.apple.coremedia";
  }
  CFStringRef v7 = CFStringCreateWithCString(0, v6, 0);
  CFStringRef v8 = CFStringCreateWithCString(0, a2, 0);
  CFStringRef v9 = v8;
  if (!v7 || !v8)
  {
    uint64_t v16 = 4294966293;
    if (!v7)
    {
      if (!v8) {
        return v16;
      }
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t Int32 = AVE_CFPref_GetInt32(v7, v8, a3);
  if (!Int32)
  {
    if (AVE_Log_CheckLevel(0x2Cu, 6))
    {
      int v25 = AVE_Log_CheckConsole(0x2Cu);
      __uint64_t v26 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(6);
      if (v25)
      {
        printf("%lld %d AVE %s: defaults write %s = %d\n", v26, 44, v27, a2, *a3);
        __uint64_t v26 = AVE_GetCurrTime();
        v27 = AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %d", v26, 44, v27, a2, *a3);
    }
    goto LABEL_26;
  }
  uint64_t v16 = Int32;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  *(_OWORD *)cStr = 0u;
  long long v31 = 0u;
  AVE_SNPrintf(cStr, 128, "AVEVideoEncoder%s", v11, v12, v13, v14, v15, (_BYTE)a2 + 3);
  CFRelease(v9);
  CFStringRef v9 = CFStringCreateWithCString(0, cStr, 0);
  if (v9)
  {
    uint64_t v16 = AVE_CFPref_GetInt32(v7, v9, a3);
    if (!v16)
    {
      if (!AVE_Log_CheckLevel(0x2Cu, 6))
      {
LABEL_26:
        uint64_t v16 = 0;
        goto LABEL_27;
      }
      uint64_t v16 = AVE_Log_CheckConsole(0x2Cu);
      __uint64_t v17 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr(6);
      if (v16)
      {
        printf("%lld %d AVE %s: defaults write %s = %d\n", v17, 44, v18, cStr, *a3);
        __uint64_t v19 = AVE_GetCurrTime();
        v20 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: defaults write %s = %d", v19, 44, v20, cStr, *a3);
        goto LABEL_26;
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %d", v17, 44, v18, cStr, *a3);
    }
  }
LABEL_27:
  CFRelease(v7);
  if (v9) {
LABEL_28:
  }
    CFRelease(v9);
  return v16;
}

uint64_t AVE_CFPref_GetInt32(CFStringRef applicationID, CFStringRef key, int *a3)
{
  valuePtr[2] = *MEMORY[0x1E4F143B8];
  if (applicationID && key && a3)
  {
    CFStringRef v6 = (const __CFString *)CFPreferencesCopyAppValue(key, applicationID);
    if (v6)
    {
      CFStringRef v7 = v6;
      CFTypeID v8 = CFGetTypeID(v6);
      if (v8 == CFNumberGetTypeID())
      {
        LODWORD(valuePtr[0]) = 0;
        if (CFNumberGetValue((CFNumberRef)v7, kCFNumberSInt32Type, valuePtr))
        {
          uint64_t v9 = 0;
          *a3 = valuePtr[0];
LABEL_16:
          CFRelease(v7);
          return v9;
        }
      }
      else
      {
        CFTypeID v14 = CFGetTypeID(v7);
        if (v14 == CFStringGetTypeID())
        {
          memset(valuePtr, 0, 13);
          Str = AVE_CFStr_GetStr(v7, (char *)valuePtr, 13);
          if (Str)
          {
            uint64_t v9 = 0;
            *a3 = strtoumax(Str, 0, 0);
            goto LABEL_16;
          }
        }
      }
      uint64_t v9 = 4294966296;
      goto LABEL_16;
    }
    return 4294966288;
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      int v10 = AVE_Log_CheckConsole(0xFu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", CurrTime, 15, LevelStr, "AVE_CFPref_GetInt32", 1193, "pAppID != __null && pKey != __null && pVal != __null", applicationID, key, a3);
        __uint64_t v13 = AVE_GetCurrTime();
        __uint64_t v17 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 15, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", CurrTime, 15, LevelStr);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_DW_RetrieveDeprecatedKeys(_DWORD *a1)
{
  BOOL v9 = 0;
  int v8 = 0;
  if (!AVE_DW_GetBool(0, "AVE_EnableLossless", &v9))
  {
    uint64_t v2 = 6;
    if (!v9) {
      uint64_t v2 = 8;
    }
    *(void *)&a1[v2] |= 0x200uLL;
  }
  if (!AVE_DW_GetInt32(0, "AVE_EnableLambdaMod", &v8))
  {
    uint64_t v3 = 290;
    if (!v8) {
      uint64_t v3 = 292;
    }
    *(void *)&a1[v3] |= 0x1000000uLL;
  }
  if (!AVE_DW_GetInt32(0, "AVE_EnableQPMod", &v8))
  {
    if (v8) {
      a1[308] |= 1u;
    }
    else {
      a1[309] |= 1u;
    }
  }
  if (!AVE_DW_GetInt32(0, "AVE_CodedBuffersOverride", &v8)) {
    a1[349] = v8;
  }
  if (!AVE_DW_GetInt32(0, "AVE_FrameQP", &v8))
  {
    int v4 = v8;
    a1[282] = v8;
    a1[283] = v4;
    a1[284] = v4;
  }
  if (!AVE_DW_GetInt32(0, "AVE_LookAheadFrames", &v8)) {
    a1[302] = v8;
  }
  if (!AVE_DW_GetInt32(0, "AVE_MaximizePowerEfficiency", &v8))
  {
    if (v8) {
      a1[14] |= 8u;
    }
    else {
      a1[15] |= 8u;
    }
  }
  if (!AVE_DW_GetInt32(0, "AVE_UseCAVLCBits", &v8))
  {
    if (v8) {
      a1[14] |= 1u;
    }
    else {
      a1[15] |= 1u;
    }
  }
  if (!AVE_DW_GetInt32(0, "AVE_EnableMCTF", &v8))
  {
    uint64_t v5 = 6;
    if (!v8) {
      uint64_t v5 = 8;
    }
    *(void *)&a1[v5] |= 0x20uLL;
  }
  if (!AVE_DW_GetInt32(0, "AVE_FigEncodeTime", &v8))
  {
    uint64_t v6 = 6;
    if (!v8) {
      uint64_t v6 = 8;
    }
    *(void *)&a1[v6] |= 0x400000uLL;
  }
  if (!AVE_DW_GetInt32(0, "AVE_AverageBitRate", &v8)) {
    a1[295] = v8;
  }
  if (!AVE_DW_GetInt32(0, "AVE_Bframes", &v8)) {
    a1[312] = v8;
  }
  if (!AVE_DW_GetInt32(0, "AVE_EnableInputYUVDump", &v8) && v8) {
    a1[196] |= 1u;
  }
  if (!AVE_DW_GetInt32(0, "AVE_EnableOutputDump", &v8) && v8) {
    a1[196] |= 2u;
  }
  if (!AVE_DW_GetInt32(0, "AVE_EnableISPMetadataDump", &v8) && v8) {
    a1[196] |= 4u;
  }
  if (!AVE_DW_GetInt32(0, "AVE_EnableMVStatsDump", &v8) && v8) {
    a1[196] |= 8u;
  }
  if (!AVE_DW_GetInt32(0, "AVE_EnableMultiPassStatsDump", &v8) && v8) {
    a1[196] |= 0x10u;
  }
  if (!AVE_DW_GetInt32(0, "AVE_EnableFrameStatsDump", &v8) && v8) {
    a1[196] |= 0x20u;
  }
  if (!AVE_DW_GetInt32(0, "AVE_EnableFWFrameStatsDump", &v8) && v8) {
    a1[196] |= 0x40u;
  }
  uint64_t result = AVE_DW_GetInt32(0, "AVE_EnableMCTFFrameStatsDump", &v8);
  if (!result)
  {
    if (v8) {
      a1[196] |= 0x80u;
    }
  }
  return result;
}

uint64_t AVE_DW_RetrieveFeature(void *a1)
{
  unint64_t v3 = 0;
  if (!AVE_DW_GetUInt64(0, "AVE_CfgOn", &v3)) {
    a1[1] = v3;
  }
  if (!AVE_DW_GetUInt64(0, "AVE_CfgOff", &v3)) {
    a1[2] = v3;
  }
  if (!AVE_DW_GetUInt64(0, "AVE_FeatureOn", &v3)) {
    a1[3] = v3;
  }
  if (!AVE_DW_GetUInt64(0, "AVE_FeatureOff", &v3)) {
    a1[4] = v3;
  }
  if (!AVE_DW_GetUInt64(0, "AVE_HwFeatureOn", &v3)) {
    a1[5] = v3;
  }
  uint64_t result = AVE_DW_GetUInt64(0, "AVE_HwFeatureOff", &v3);
  if (!result) {
    a1[6] = v3;
  }
  return result;
}

uint64_t AVE_DW_GetUInt64(const char *a1, const char *a2, unint64_t *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (!a2 || !a3)
  {
    if (AVE_Log_CheckLevel(0x2Cu, 4))
    {
      int v21 = AVE_Log_CheckConsole(0x2Cu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", CurrTime, 44, LevelStr, "AVE_DW_GetUInt64", 353, "pKey != __null && pVal != __null", a1, a2, a3);
        __uint64_t v24 = AVE_GetCurrTime();
        v29 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v24, 44, v29);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", CurrTime, 44, LevelStr);
      }
    }
    return 4294966295;
  }
  if (a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = "com.apple.coremedia";
  }
  CFStringRef v7 = CFStringCreateWithCString(0, v6, 0);
  CFStringRef v8 = CFStringCreateWithCString(0, a2, 0);
  CFStringRef v9 = v8;
  if (!v7 || !v8)
  {
    uint64_t v16 = 4294966293;
    if (!v7)
    {
      if (!v8) {
        return v16;
      }
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t UInt64 = AVE_CFPref_GetUInt64(v7, v8, a3);
  if (!UInt64)
  {
    if (AVE_Log_CheckLevel(0x2Cu, 6))
    {
      int v25 = AVE_Log_CheckConsole(0x2Cu);
      __uint64_t v26 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(6);
      if (v25)
      {
        printf("%lld %d AVE %s: defaults write %s = 0x%llx\n", v26, 44, v27, a2, *a3);
        __uint64_t v26 = AVE_GetCurrTime();
        v27 = AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = 0x%llx", v26, 44, v27, a2, *a3);
    }
    goto LABEL_26;
  }
  uint64_t v16 = UInt64;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  *(_OWORD *)cStr = 0u;
  long long v31 = 0u;
  AVE_SNPrintf(cStr, 128, "AVEVideoEncoder%s", v11, v12, v13, v14, v15, (_BYTE)a2 + 3);
  CFRelease(v9);
  CFStringRef v9 = CFStringCreateWithCString(0, cStr, 0);
  if (v9)
  {
    uint64_t v16 = AVE_CFPref_GetUInt64(v7, v9, a3);
    if (!v16)
    {
      if (!AVE_Log_CheckLevel(0x2Cu, 6))
      {
LABEL_26:
        uint64_t v16 = 0;
        goto LABEL_27;
      }
      uint64_t v16 = AVE_Log_CheckConsole(0x2Cu);
      __uint64_t v17 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr(6);
      if (v16)
      {
        printf("%lld %d AVE %s: defaults write %s = 0x%llx\n", v17, 44, v18, cStr, *a3);
        __uint64_t v19 = AVE_GetCurrTime();
        v20 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: defaults write %s = 0x%llx", v19, 44, v20, cStr, *a3);
        goto LABEL_26;
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = 0x%llx", v17, 44, v18, cStr, *a3);
    }
  }
LABEL_27:
  CFRelease(v7);
  if (v9) {
LABEL_28:
  }
    CFRelease(v9);
  return v16;
}

uint64_t AVE_DW_RetrieveDPM(int *a1)
{
  int v9 = 0;
  if (!AVE_DW_GetInt32(0, "AVE_DPM_Mode", &v9)) {
    *a1 = v9 | 0x100;
  }
  if (!AVE_DW_GetInt32(0, "AVE_DPM_PL_IOPMin", &v9))
  {
    unsigned int v2 = v9;
    if (v9 <= 1) {
      unsigned int v2 = 1;
    }
    if (v2 >= 4) {
      unsigned int v2 = 4;
    }
    a1[1] |= 1u;
    a1[2] = v2;
  }
  if (!AVE_DW_GetInt32(0, "AVE_DPM_PL_IOPMax", &v9))
  {
    unsigned int v3 = v9;
    if (v9 <= 1) {
      unsigned int v3 = 1;
    }
    if (v3 >= 4) {
      unsigned int v3 = 4;
    }
    a1[3] = v3;
    a1[1] |= 0x10000u;
  }
  if (!AVE_DW_GetInt32(0, "AVE_DPM_PL_DCSMin", &v9))
  {
    unsigned int v4 = v9;
    if (v9 <= 1) {
      unsigned int v4 = 1;
    }
    if (v4 >= 4) {
      unsigned int v4 = 4;
    }
    a1[4] = v4;
    a1[1] |= 2u;
  }
  if (!AVE_DW_GetInt32(0, "AVE_DPM_PL_DCSMax", &v9))
  {
    unsigned int v5 = v9;
    if (v9 <= 1) {
      unsigned int v5 = 1;
    }
    if (v5 >= 4) {
      unsigned int v5 = 4;
    }
    a1[5] = v5;
    a1[1] |= 0x20000u;
  }
  if (!AVE_DW_GetInt32(0, "AVE_DPM_PL_FABMin", &v9))
  {
    unsigned int v6 = v9;
    if (v9 <= 1) {
      unsigned int v6 = 1;
    }
    if (v6 >= 4) {
      unsigned int v6 = 4;
    }
    a1[6] = v6;
    a1[1] |= 4u;
  }
  uint64_t result = AVE_DW_GetInt32(0, "AVE_DPM_PL_FABMax", &v9);
  if (!result)
  {
    unsigned int v8 = v9;
    if (v9 <= 1) {
      unsigned int v8 = 1;
    }
    if (v8 >= 4) {
      unsigned int v8 = 4;
    }
    a1[7] = v8;
    a1[1] |= 0x40000u;
  }
  return result;
}

uint64_t AVE_DW_GetUInt32(const char *a1, const char *a2, unsigned int *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (!a2 || !a3)
  {
    if (AVE_Log_CheckLevel(0x2Cu, 4))
    {
      int v21 = AVE_Log_CheckConsole(0x2Cu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", CurrTime, 44, LevelStr, "AVE_DW_GetUInt32", 281, "pKey != __null && pVal != __null", a1, a2, a3);
        __uint64_t v24 = AVE_GetCurrTime();
        v29 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v24, 44, v29);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", CurrTime, 44, LevelStr);
      }
    }
    return 4294966295;
  }
  if (a1) {
    unsigned int v6 = a1;
  }
  else {
    unsigned int v6 = "com.apple.coremedia";
  }
  CFStringRef v7 = CFStringCreateWithCString(0, v6, 0);
  CFStringRef v8 = CFStringCreateWithCString(0, a2, 0);
  CFStringRef v9 = v8;
  if (!v7 || !v8)
  {
    uint64_t v16 = 4294966293;
    if (!v7)
    {
      if (!v8) {
        return v16;
      }
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  Uuint64_t Int32 = AVE_CFPref_GetUInt32(v7, v8, a3);
  if (!UInt32)
  {
    if (AVE_Log_CheckLevel(0x2Cu, 6))
    {
      int v25 = AVE_Log_CheckConsole(0x2Cu);
      __uint64_t v26 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(6);
      if (v25)
      {
        printf("%lld %d AVE %s: defaults write %s = 0x%x\n", v26, 44, v27, a2, *a3);
        __uint64_t v26 = AVE_GetCurrTime();
        v27 = AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = 0x%x", v26, 44, v27, a2, *a3);
    }
    goto LABEL_26;
  }
  uint64_t v16 = UInt32;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  *(_OWORD *)cStr = 0u;
  long long v31 = 0u;
  AVE_SNPrintf(cStr, 128, "AVEVideoEncoder%s", v11, v12, v13, v14, v15, (_BYTE)a2 + 3);
  CFRelease(v9);
  CFStringRef v9 = CFStringCreateWithCString(0, cStr, 0);
  if (v9)
  {
    uint64_t v16 = AVE_CFPref_GetUInt32(v7, v9, a3);
    if (!v16)
    {
      if (!AVE_Log_CheckLevel(0x2Cu, 6))
      {
LABEL_26:
        uint64_t v16 = 0;
        goto LABEL_27;
      }
      uint64_t v16 = AVE_Log_CheckConsole(0x2Cu);
      __uint64_t v17 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr(6);
      if (v16)
      {
        printf("%lld %d AVE %s: defaults write %s = 0x%x\n", v17, 44, v18, cStr, *a3);
        __uint64_t v19 = AVE_GetCurrTime();
        v20 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: defaults write %s = 0x%x", v19, 44, v20, cStr, *a3);
        goto LABEL_26;
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = 0x%x", v17, 44, v18, cStr, *a3);
    }
  }
LABEL_27:
  CFRelease(v7);
  if (v9) {
LABEL_28:
  }
    CFRelease(v9);
  return v16;
}

uint64_t AVE_DW_GetInt64(const char *a1, const char *a2, uint64_t *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (!a2 || !a3)
  {
    if (AVE_Log_CheckLevel(0x2Cu, 4))
    {
      int v21 = AVE_Log_CheckConsole(0x2Cu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", CurrTime, 44, LevelStr, "AVE_DW_GetInt64", 496, "pKey != __null && pVal != __null", a1, a2, a3);
        __uint64_t v24 = AVE_GetCurrTime();
        v29 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v24, 44, v29);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", CurrTime, 44, LevelStr);
      }
    }
    return 4294966295;
  }
  if (a1) {
    unsigned int v6 = a1;
  }
  else {
    unsigned int v6 = "com.apple.coremedia";
  }
  CFStringRef v7 = CFStringCreateWithCString(0, v6, 0);
  CFStringRef v8 = CFStringCreateWithCString(0, a2, 0);
  CFStringRef v9 = v8;
  if (!v7 || !v8)
  {
    uint64_t v16 = 4294966293;
    if (!v7)
    {
      if (!v8) {
        return v16;
      }
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t Int64 = AVE_CFPref_GetInt64(v7, v8, (uintmax_t *)a3);
  if (!Int64)
  {
    if (AVE_Log_CheckLevel(0x2Cu, 6))
    {
      int v25 = AVE_Log_CheckConsole(0x2Cu);
      __uint64_t v26 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(6);
      if (v25)
      {
        printf("%lld %d AVE %s: defaults write %s = %lld\n", v26, 44, v27, a2, *a3);
        __uint64_t v26 = AVE_GetCurrTime();
        v27 = AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %lld", v26, 44, v27, a2, *a3);
    }
    goto LABEL_26;
  }
  uint64_t v16 = Int64;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  *(_OWORD *)cStr = 0u;
  long long v31 = 0u;
  AVE_SNPrintf(cStr, 128, "AVEVideoEncoder%s", v11, v12, v13, v14, v15, (_BYTE)a2 + 3);
  CFRelease(v9);
  CFStringRef v9 = CFStringCreateWithCString(0, cStr, 0);
  if (v9)
  {
    uint64_t v16 = AVE_CFPref_GetInt64(v7, v9, (uintmax_t *)a3);
    if (!v16)
    {
      if (!AVE_Log_CheckLevel(0x2Cu, 6))
      {
LABEL_26:
        uint64_t v16 = 0;
        goto LABEL_27;
      }
      uint64_t v16 = AVE_Log_CheckConsole(0x2Cu);
      __uint64_t v17 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr(6);
      if (v16)
      {
        printf("%lld %d AVE %s: defaults write %s = %lld\n", v17, 44, v18, cStr, *a3);
        __uint64_t v19 = AVE_GetCurrTime();
        v20 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: defaults write %s = %lld", v19, 44, v20, cStr, *a3);
        goto LABEL_26;
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %lld", v17, 44, v18, cStr, *a3);
    }
  }
LABEL_27:
  CFRelease(v7);
  if (v9) {
LABEL_28:
  }
    CFRelease(v9);
  return v16;
}

uint64_t AVE_DW_GetStr(const char *a1, const char *a2, char *a3, int a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (!a2 || !a3 || a4 <= 0)
  {
    if (AVE_Log_CheckLevel(0x2Cu, 4))
    {
      int v22 = AVE_Log_CheckConsole(0x2Cu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v22)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d\n", CurrTime, 44, LevelStr, "AVE_DW_GetStr", 68, "pKey != __null && pVal != __null && num > 0", a1, a2, a3, a4);
        __uint64_t v25 = AVE_GetCurrTime();
        long long v31 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d", v25, 44, v31, "AVE_DW_GetStr");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d", CurrTime, 44, LevelStr, "AVE_DW_GetStr");
      }
    }
    return 4294966295;
  }
  if (a1) {
    CFStringRef v8 = a1;
  }
  else {
    CFStringRef v8 = "com.apple.coremedia";
  }
  CFStringRef v9 = CFStringCreateWithCString(0, v8, 0);
  CFStringRef v10 = CFStringCreateWithCString(0, a2, 0);
  CFStringRef v11 = v10;
  if (!v9 || !v10)
  {
    uint64_t v18 = 4294966293;
    if (!v9)
    {
      if (!v10) {
        return v18;
      }
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  uint64_t Str = AVE_CFPref_GetStr(v9, v10, a3, a4);
  if (!Str)
  {
    if (AVE_Log_CheckLevel(0x2Cu, 6))
    {
      uint64_t v18 = AVE_Log_CheckConsole(0x2Cu);
      __uint64_t v26 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(6);
      if (!v18)
      {
        syslog(3, "%lld %d AVE %s: defaults write %s = %s", v26, 44, v27, a2, a3);
        goto LABEL_30;
      }
      printf("%lld %d AVE %s: defaults write %s = %s\n", v26, 44, v27, a2, a3);
      __uint64_t v28 = AVE_GetCurrTime();
      long long v32 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: defaults write %s = %s", v28, 44, v32, a2, a3);
    }
    goto LABEL_29;
  }
  uint64_t v18 = Str;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  *(_OWORD *)cuint64_t Str = 0u;
  long long v35 = 0u;
  AVE_SNPrintf(cStr, 128, "AVEVideoEncoder%s", v13, v14, v15, v16, v17, (_BYTE)a2 + 3);
  CFRelease(v11);
  CFStringRef v11 = CFStringCreateWithCString(0, cStr, 0);
  if (v11)
  {
    uint64_t v18 = AVE_CFPref_GetStr(v9, v11, a3, a4);
    if (!v18)
    {
      if (AVE_Log_CheckLevel(0x2Cu, 6))
      {
        int v19 = AVE_Log_CheckConsole(0x2Cu);
        __uint64_t v20 = AVE_GetCurrTime();
        int v21 = AVE_Log_GetLevelStr(6);
        if (v19)
        {
          printf("%lld %d AVE %s: defaults write %s = %s\n", v20, 44, v21, cStr, a3);
          __uint64_t v20 = AVE_GetCurrTime();
          long long v33 = a3;
          v30 = AVE_Log_GetLevelStr(6);
        }
        else
        {
          long long v33 = a3;
          v30 = v21;
        }
        syslog(3, "%lld %d AVE %s: defaults write %s = %s", v20, 44, v30, cStr, v33);
      }
LABEL_29:
      uint64_t v18 = 0;
    }
  }
LABEL_30:
  CFRelease(v9);
  if (v11) {
LABEL_31:
  }
    CFRelease(v11);
  return v18;
}

uint64_t AVE_CFPref_GetUInt64(CFStringRef applicationID, CFStringRef key, unint64_t *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (applicationID && key && a3)
  {
    CFStringRef v6 = (const __CFString *)CFPreferencesCopyAppValue(key, applicationID);
    if (v6)
    {
      CFStringRef v7 = v6;
      CFTypeID v8 = CFGetTypeID(v6);
      if (v8 == CFNumberGetTypeID())
      {
        valuePtr[0] = 0;
        if (CFNumberGetValue((CFNumberRef)v7, kCFNumberSInt64Type, valuePtr))
        {
          uint64_t v9 = 0;
          *a3 = valuePtr[0];
LABEL_16:
          CFRelease(v7);
          return v9;
        }
      }
      else
      {
        CFTypeID v14 = CFGetTypeID(v7);
        if (v14 == CFStringGetTypeID())
        {
          valuePtr[0] = 0;
          valuePtr[1] = 0;
          int v19 = 0;
          uint64_t Str = AVE_CFStr_GetStr(v7, (char *)valuePtr, 20);
          if (Str)
          {
            uint64_t v9 = 0;
            *a3 = strtoumax(Str, 0, 0);
            goto LABEL_16;
          }
        }
      }
      uint64_t v9 = 4294966296;
      goto LABEL_16;
    }
    return 4294966288;
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      int v10 = AVE_Log_CheckConsole(0xFu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", CurrTime, 15, LevelStr, "AVE_CFPref_GetUInt64", 1143, "pAppID != __null && pKey != __null && pVal != __null", applicationID, key, a3);
        __uint64_t v13 = AVE_GetCurrTime();
        uint64_t v17 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 15, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", CurrTime, 15, LevelStr);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_DW_RetrieveDLB(int *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  *(_OWORD *)CFStringRef v6 = 0u;
  long long v7 = 0u;
  int v5 = 0;
  if (!AVE_DW_GetInt32(0, "AVE_PreemptiveLoadBalancing", &v5))
  {
    if (v5) {
      int v2 = 2;
    }
    else {
      int v2 = 1;
    }
    a1[1] = v2;
  }
  if (!AVE_DW_GetInt32(0, "AVE_DLB_Type", &v5))
  {
    a1[2] = v5;
    *a1 = 1;
  }
  if (!AVE_DW_GetInt32(0, "AVE_DLB_SVESchedMode", &v5))
  {
    a1[3] = v5;
    *a1 = 1;
  }
  if (!AVE_DW_GetInt32(0, "AVE_DLB_SVENum", &v5))
  {
    a1[4] = v5;
    *a1 = 1;
  }
  if (!AVE_DW_GetStr(0, "AVE_DLB_SVEMap", v6, 128)) {
    AVE_ParseDLBCfg(v6, a1);
  }
  uint64_t Str = AVE_DW_GetStr(0, "AVE_DLB_Cfg", v6, 128);
  if (!Str) {
    AVE_ParseDLBCfg(v6, a1);
  }
  return Str;
}

uint64_t AVE_DW_GetDouble(const char *a1, const char *a2, double *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (!a2 || !a3)
  {
    if (AVE_Log_CheckLevel(0x2Cu, 4))
    {
      int v21 = AVE_Log_CheckConsole(0x2Cu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", CurrTime, 44, LevelStr, "AVE_DW_GetDouble", 567, "pKey != __null && pVal != __null", a1, a2, a3);
        __uint64_t v24 = AVE_GetCurrTime();
        v29 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v24, 44, v29);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", CurrTime, 44, LevelStr);
      }
    }
    return 4294966295;
  }
  if (a1) {
    CFStringRef v6 = a1;
  }
  else {
    CFStringRef v6 = "com.apple.coremedia";
  }
  CFStringRef v7 = CFStringCreateWithCString(0, v6, 0);
  CFStringRef v8 = CFStringCreateWithCString(0, a2, 0);
  CFStringRef v9 = v8;
  if (!v7 || !v8)
  {
    uint64_t v16 = 4294966293;
    if (!v7)
    {
      if (!v8) {
        return v16;
      }
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t Double = AVE_CFPref_GetDouble(v7, v8, a3);
  if (!Double)
  {
    if (AVE_Log_CheckLevel(0x2Cu, 6))
    {
      int v25 = AVE_Log_CheckConsole(0x2Cu);
      __uint64_t v26 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(6);
      if (v25)
      {
        printf("%lld %d AVE %s: defaults write %s = %lf\n", v26, 44, v27, a2, *a3);
        __uint64_t v26 = AVE_GetCurrTime();
        v27 = AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %lf", v26, 44, v27, a2, *a3);
    }
    goto LABEL_26;
  }
  uint64_t v16 = Double;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  *(_OWORD *)cuint64_t Str = 0u;
  long long v31 = 0u;
  AVE_SNPrintf(cStr, 128, "AVEVideoEncoder%s", v11, v12, v13, v14, v15, (_BYTE)a2 + 3);
  CFRelease(v9);
  CFStringRef v9 = CFStringCreateWithCString(0, cStr, 0);
  if (v9)
  {
    uint64_t v16 = AVE_CFPref_GetDouble(v7, v9, a3);
    if (!v16)
    {
      if (!AVE_Log_CheckLevel(0x2Cu, 6))
      {
LABEL_26:
        uint64_t v16 = 0;
        goto LABEL_27;
      }
      uint64_t v16 = AVE_Log_CheckConsole(0x2Cu);
      __uint64_t v17 = AVE_GetCurrTime();
      uint64_t v18 = AVE_Log_GetLevelStr(6);
      if (v16)
      {
        printf("%lld %d AVE %s: defaults write %s = %lf\n", v17, 44, v18, cStr, *a3);
        __uint64_t v19 = AVE_GetCurrTime();
        uint64_t v20 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: defaults write %s = %lf", v19, 44, v20, cStr, *a3);
        goto LABEL_26;
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %lf", v17, 44, v18, cStr, *a3);
    }
  }
LABEL_27:
  CFRelease(v7);
  if (v9) {
LABEL_28:
  }
    CFRelease(v9);
  return v16;
}

uint64_t AVE_CFPref_GetUInt32(CFStringRef applicationID, CFStringRef key, unsigned int *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (applicationID && key && a3)
  {
    CFStringRef v6 = (const __CFString *)CFPreferencesCopyAppValue(key, applicationID);
    if (v6)
    {
      CFStringRef v7 = v6;
      CFTypeID v8 = CFGetTypeID(v6);
      if (v8 == CFNumberGetTypeID())
      {
        LODWORD(valuePtr) = 0;
        if (CFNumberGetValue((CFNumberRef)v7, kCFNumberSInt32Type, &valuePtr))
        {
          uint64_t v9 = 0;
          *a3 = valuePtr;
LABEL_16:
          CFRelease(v7);
          return v9;
        }
      }
      else
      {
        CFTypeID v14 = CFGetTypeID(v7);
        if (v14 == CFStringGetTypeID())
        {
          int v19 = 0;
          uint64_t valuePtr = 0;
          uint64_t Str = AVE_CFStr_GetStr(v7, (char *)&valuePtr, 12);
          if (Str)
          {
            uint64_t v9 = 0;
            *a3 = strtoumax(Str, 0, 0);
            goto LABEL_16;
          }
        }
      }
      uint64_t v9 = 4294966296;
      goto LABEL_16;
    }
    return 4294966288;
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      int v10 = AVE_Log_CheckConsole(0xFu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", CurrTime, 15, LevelStr, "AVE_CFPref_GetUInt32", 1092, "pAppID != __null && pKey != __null && pVal != __null", applicationID, key, a3);
        __uint64_t v13 = AVE_GetCurrTime();
        __uint64_t v17 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 15, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", CurrTime, 15, LevelStr);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_DW_GetBool(const char *a1, const char *a2, BOOL *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (!a2 || !a3)
  {
    if (AVE_Log_CheckLevel(0x2Cu, 4))
    {
      int v21 = AVE_Log_CheckConsole(0x2Cu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", CurrTime, 44, LevelStr, "AVE_DW_GetBool", 139, "pKey != __null && pVal != __null", a1, a2, a3);
        __uint64_t v24 = AVE_GetCurrTime();
        v29 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v24, 44, v29);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", CurrTime, 44, LevelStr);
      }
    }
    return 4294966295;
  }
  if (a1) {
    CFStringRef v6 = a1;
  }
  else {
    CFStringRef v6 = "com.apple.coremedia";
  }
  CFStringRef v7 = CFStringCreateWithCString(0, v6, 0);
  CFStringRef v8 = CFStringCreateWithCString(0, a2, 0);
  CFStringRef v9 = v8;
  if (!v7 || !v8)
  {
    uint64_t v16 = 4294966293;
    if (!v7)
    {
      if (!v8) {
        return v16;
      }
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t Bool = AVE_CFPref_GetBool(v7, v8, a3);
  if (!Bool)
  {
    if (AVE_Log_CheckLevel(0x2Cu, 6))
    {
      int v25 = AVE_Log_CheckConsole(0x2Cu);
      __uint64_t v26 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(6);
      if (v25)
      {
        printf("%lld %d AVE %s: defaults write %s = %d\n", v26, 44, v27, a2, *a3);
        __uint64_t v26 = AVE_GetCurrTime();
        v27 = AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %d", v26, 44, v27, a2, *a3);
    }
    goto LABEL_26;
  }
  uint64_t v16 = Bool;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  *(_OWORD *)cuint64_t Str = 0u;
  long long v31 = 0u;
  AVE_SNPrintf(cStr, 128, "AVEVideoEncoder%s", v11, v12, v13, v14, v15, (_BYTE)a2 + 3);
  CFRelease(v9);
  CFStringRef v9 = CFStringCreateWithCString(0, cStr, 0);
  if (v9)
  {
    uint64_t v16 = AVE_CFPref_GetBool(v7, v9, a3);
    if (!v16)
    {
      if (!AVE_Log_CheckLevel(0x2Cu, 6))
      {
LABEL_26:
        uint64_t v16 = 0;
        goto LABEL_27;
      }
      uint64_t v16 = AVE_Log_CheckConsole(0x2Cu);
      __uint64_t v17 = AVE_GetCurrTime();
      uint64_t v18 = AVE_Log_GetLevelStr(6);
      if (v16)
      {
        printf("%lld %d AVE %s: defaults write %s = %d\n", v17, 44, v18, cStr, *a3);
        __uint64_t v19 = AVE_GetCurrTime();
        uint64_t v20 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: defaults write %s = %d", v19, 44, v20, cStr, *a3);
        goto LABEL_26;
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %d", v17, 44, v18, cStr, *a3);
    }
  }
LABEL_27:
  CFRelease(v7);
  if (v9) {
LABEL_28:
  }
    CFRelease(v9);
  return v16;
}

uint64_t AVE_CFPref_GetInt64(CFStringRef applicationID, CFStringRef key, uintmax_t *a3)
{
  v19[2] = *MEMORY[0x1E4F143B8];
  if (applicationID && key && a3)
  {
    CFStringRef v6 = (const __CFString *)CFPreferencesCopyAppValue(key, applicationID);
    if (v6)
    {
      CFStringRef v7 = v6;
      CFTypeID v8 = CFGetTypeID(v6);
      if (v8 == CFNumberGetTypeID())
      {
        uint64_t valuePtr = 0;
        if (CFNumberGetValue((CFNumberRef)v7, kCFNumberSInt64Type, &valuePtr))
        {
          uint64_t v9 = 0;
          *a3 = valuePtr;
LABEL_16:
          CFRelease(v7);
          return v9;
        }
      }
      else
      {
        CFTypeID v14 = CFGetTypeID(v7);
        if (v14 == CFStringGetTypeID())
        {
          uint64_t valuePtr = 0;
          v19[0] = 0;
          *(void *)((char *)v19 + 5) = 0;
          uint64_t Str = AVE_CFStr_GetStr(v7, (char *)&valuePtr, 21);
          if (Str)
          {
            uint64_t v9 = 0;
            *a3 = strtoumax(Str, 0, 0);
            goto LABEL_16;
          }
        }
      }
      uint64_t v9 = 4294966296;
      goto LABEL_16;
    }
    return 4294966288;
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      int v10 = AVE_Log_CheckConsole(0xFu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", CurrTime, 15, LevelStr, "AVE_CFPref_GetInt64", 1244, "pAppID != __null && pKey != __null && pVal != __null", applicationID, key, a3);
        __uint64_t v13 = AVE_GetCurrTime();
        __uint64_t v17 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 15, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", CurrTime, 15, LevelStr);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_CFPref_GetStr(CFStringRef applicationID, CFStringRef key, char *a3, int a4)
{
  if (applicationID && key && a3 && a4 > 0)
  {
    CFStringRef v8 = (const __CFString *)CFPreferencesCopyAppValue(key, applicationID);
    if (v8)
    {
      CFStringRef v9 = v8;
      CFTypeID v10 = CFGetTypeID(v8);
      if (v10 == CFStringGetTypeID())
      {
        uint64_t Str = (char *)AVE_CFStr_GetStr(v9, a3, a4);
        if (Str != a3) {
          AVE_SNPrintf(a3, a4, "%s", v12, v13, v14, v15, v16, (char)Str);
        }
        uint64_t v17 = 0;
      }
      else
      {
        uint64_t v17 = 4294966296;
      }
      CFRelease(v9);
    }
    else
    {
      return 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      int v18 = AVE_Log_CheckConsole(0xFu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d\n", CurrTime, 15, LevelStr, "AVE_CFPref_GetStr", 947, "pAppID != __null && pKey != __null && pVal != __null && num > 0", applicationID, key, a3, a4);
        __uint64_t v21 = AVE_GetCurrTime();
        v23 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d", v21, 15, v23, "AVE_CFPref_GetStr");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d", CurrTime, 15, LevelStr, "AVE_CFPref_GetStr");
      }
    }
    return 4294966295;
  }
  return v17;
}

uint64_t AVE_CFPref_GetDouble(CFStringRef applicationID, CFStringRef key, double *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (applicationID && key && a3)
  {
    CFStringRef v6 = (const __CFString *)CFPreferencesCopyAppValue(key, applicationID);
    if (v6)
    {
      CFStringRef v7 = v6;
      CFTypeID v8 = CFGetTypeID(v6);
      if (v8 == CFNumberGetTypeID())
      {
        uint64_t v19 = 0;
        valuePtr[0] = 0;
        if (CFNumberGetValue((CFNumberRef)v7, kCFNumberDoubleType, valuePtr))
        {
          double v9 = *(double *)valuePtr;
LABEL_19:
          uint64_t v14 = 0;
          *a3 = v9;
LABEL_21:
          CFRelease(v7);
          return v14;
        }
        if (CFNumberGetValue((CFNumberRef)v7, kCFNumberSInt64Type, &v19))
        {
          double v9 = (double)v19;
          goto LABEL_19;
        }
      }
      else
      {
        CFTypeID v15 = CFGetTypeID(v7);
        if (v15 == CFStringGetTypeID())
        {
          valuePtr[0] = 0;
          valuePtr[1] = 0;
          int v21 = 0;
          uint64_t Str = AVE_CFStr_GetStr(v7, (char *)valuePtr, 20);
          if (Str)
          {
            double v9 = strtod(Str, 0);
            goto LABEL_19;
          }
        }
      }
      uint64_t v14 = 4294966296;
      goto LABEL_21;
    }
    return 4294966288;
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      int v10 = AVE_Log_CheckConsole(0xFu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", CurrTime, 15, LevelStr, "AVE_CFPref_GetDouble", 1294, "pAppID != __null && pKey != __null && pVal != __null", applicationID, key, a3);
        __uint64_t v13 = AVE_GetCurrTime();
        int v18 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 15, v18);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", CurrTime, 15, LevelStr);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_CFPref_GetBool(CFStringRef applicationID, CFStringRef key, BOOL *a3)
{
  if (applicationID && key && a3)
  {
    CFStringRef v6 = (const __CFString *)CFPreferencesCopyAppValue(key, applicationID);
    if (v6)
    {
      CFStringRef v7 = v6;
      CFTypeID v8 = CFGetTypeID(v6);
      if (v8 == CFBooleanGetTypeID())
      {
        BOOL v9 = CFEqual(v7, (CFTypeRef)*MEMORY[0x1E4F1CFD0]) != 0;
      }
      else
      {
        CFTypeID v15 = CFGetTypeID(v7);
        if (v15 != CFStringGetTypeID()) {
          goto LABEL_19;
        }
        BOOL v9 = 1;
        if (CFStringCompare(v7, @"true", 1uLL) == kCFCompareEqualTo) {
          goto LABEL_7;
        }
        BOOL v9 = 1;
        if (CFStringCompare(v7, @"yes", 1uLL) == kCFCompareEqualTo) {
          goto LABEL_7;
        }
        BOOL v9 = 1;
        if (CFStringCompare(v7, @"1", 1uLL) == kCFCompareEqualTo) {
          goto LABEL_7;
        }
        if (CFStringCompare(v7, @"false", 1uLL)
          && CFStringCompare(v7, @"no", 1uLL)
          && CFStringCompare(v7, @"0", 1uLL))
        {
LABEL_19:
          uint64_t v10 = 4294966296;
          goto LABEL_20;
        }
        BOOL v9 = 0;
      }
LABEL_7:
      uint64_t v10 = 0;
      *a3 = v9;
LABEL_20:
      CFRelease(v7);
      return v10;
    }
    return 4294966288;
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      int v11 = AVE_Log_CheckConsole(0xFu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", CurrTime, 15, LevelStr, "AVE_CFPref_GetBool", 988, "pAppID != __null && pKey != __null && pVal != __null", applicationID, key, a3);
        __uint64_t v14 = AVE_GetCurrTime();
        uint64_t v17 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v14, 15, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", CurrTime, 15, LevelStr);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_CFDict_AddSInt32(const __CFString *a1, int a2, __CFDictionary *a3)
{
  int valuePtr = a2;
  if (a1 && a3)
  {
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v6)
    {
      CFNumberRef v7 = v6;
      CFDictionaryAddValue(a3, a1, v6);
      CFRelease(v7);
      return 0;
    }
    else
    {
      if (AVE_Log_CheckLevel(0xFu, 4))
      {
        int v13 = AVE_Log_CheckConsole(0xFu);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v13)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %d %p\n", CurrTime, 15, LevelStr, "AVE_CFDict_AddSInt32", 561, "pNum != __null", a1, valuePtr, a3);
          __uint64_t v16 = AVE_GetCurrTime();
          int v18 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %d %p", v16, 15, v18);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %d %p", CurrTime, 15, LevelStr);
        }
      }
      return 4294966293;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      int v9 = AVE_Log_CheckConsole(0xFu);
      __uint64_t v10 = AVE_GetCurrTime();
      int v11 = AVE_Log_GetLevelStr(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p\n", v10, 15, v11, "AVE_CFDict_AddSInt32", 557, "pKey != __null && pDict != __null", a1, a2, a3);
        __uint64_t v12 = AVE_GetCurrTime();
        uint64_t v17 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v12, 15, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v10, 15, v11);
      }
    }
    return 4294966295;
  }
}

void *AVE_DW_Get(void)
{
  return &gs_sAVE_DW_Cfg;
}

uint64_t *AVE_AlignMem(uint64_t *result, _DWORD *a2, int a3, int a4)
{
  uint64_t v4 = (*result + a3 - 1) & -(uint64_t)a3;
  *a2 = (*result + *a2 - v4) & -a4;
  *uint64_t result = v4;
  return result;
}

unsigned char *AVE_MemCpyV2V(unsigned char *result, char *a2, int a3)
{
  if (a3 >= 1)
  {
    do
    {
      char v3 = *a2++;
      *result++ = v3;
      --a3;
    }
    while (a3);
  }
  return result;
}

uint64_t AVE_ComposePosStr(uint64_t a1, int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 0;
  }
  int v8 = a4;
  uint64_t v11 = AVE_SNPrintf(a3, a4, " in %s", a4, a5, a6, a7, a8, a1);
  uint64_t v17 = v11;
  if (a2) {
    return AVE_SNPrintf(&a3[(int)v11], v8 - (int)v11, ":%d", v12, v13, v14, v15, v16, a2)
  }
         + v11;
  return v17;
}

uint64_t AVE_Dump_FindFile(uint64_t a1, unsigned int a2, int a3)
{
  if (a2 > 0xB) {
    return 0;
  }
  else {
    return *(void *)(a1 + 96 * (a3 > 0) + 8 * a2 + 48);
  }
}

uint64_t AVE_Dump_Create(int a1, void *a2)
{
  if (AVE_Log_CheckLevel(0x3Du, 7))
  {
    int v4 = AVE_Log_CheckConsole(0x3Du);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v4)
    {
      printf("%lld %d AVE %s: %s Enter %d %p\n", CurrTime, 61, LevelStr, "AVE_Dump_Create", a1, a2);
      __uint64_t v7 = AVE_GetCurrTime();
      int v21 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Enter %d %p", v7, 61, v21, "AVE_Dump_Create", a1, a2);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %d %p", CurrTime, 61, LevelStr, "AVE_Dump_Create", a1, a2);
    }
  }
  if (a2)
  {
    int v8 = malloc_type_malloc(0xF0uLL, 0x1020040B865D711uLL);
    if (v8)
    {
      uint64_t v9 = 0;
      v8[13] = 0u;
      v8[14] = 0u;
      v8[11] = 0u;
      v8[12] = 0u;
      v8[9] = 0u;
      v8[10] = 0u;
      v8[7] = 0u;
      v8[8] = 0u;
      v8[5] = 0u;
      v8[6] = 0u;
      v8[3] = 0u;
      v8[4] = 0u;
      v8[1] = 0u;
      v8[2] = 0u;
      *int v8 = 0u;
      *(_DWORD *)int v8 = a1;
      *a2 = v8;
    }
    else
    {
      if (AVE_Log_CheckLevel(0x3Du, 4))
      {
        int v13 = AVE_Log_CheckConsole(0x3Du);
        __uint64_t v14 = AVE_GetCurrTime();
        uint64_t v15 = AVE_Log_GetLevelStr(4);
        if (v13)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create dump %d %p\n", v14, 61, v15, "AVE_Dump_Create", 89, "pDump != __null", a1, a2);
          __uint64_t v14 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create dump %d %p", v14, 61);
      }
      uint64_t v9 = 4294966293;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x3Du, 4))
    {
      int v10 = AVE_Log_CheckConsole(0x3Du);
      __uint64_t v11 = AVE_GetCurrTime();
      uint64_t v12 = AVE_Log_GetLevelStr(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %d %p\n", v11, 61, v12, "AVE_Dump_Create", 85, "ppDump != __null", a1, 0);
        __uint64_t v11 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %d %p", v11, 61);
    }
    uint64_t v9 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x3Du, 7))
  {
    int v16 = AVE_Log_CheckConsole(0x3Du);
    __uint64_t v17 = AVE_GetCurrTime();
    int v18 = AVE_Log_GetLevelStr(7);
    if (v16)
    {
      printf("%lld %d AVE %s: %s Exit %d %p %d\n", v17, 61, v18, "AVE_Dump_Create", a1, a2, v9);
      __uint64_t v19 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Exit %d %p %d", v19);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %d %p %d", v17);
    }
  }
  return v9;
}

uint64_t AVE_Dump_Destroy(void *a1)
{
  if (AVE_Log_CheckLevel(0x3Du, 7))
  {
    int v2 = AVE_Log_CheckConsole(0x3Du);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", CurrTime, 61, LevelStr, "AVE_Dump_Destroy", a1);
      __uint64_t v5 = AVE_GetCurrTime();
      __uint64_t v11 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 61, v11, "AVE_Dump_Destroy", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", CurrTime, 61, LevelStr, "AVE_Dump_Destroy", a1);
    }
  }
  if (a1) {
    free(a1);
  }
  if (AVE_Log_CheckLevel(0x3Du, 7))
  {
    int v6 = AVE_Log_CheckConsole(0x3Du);
    __uint64_t v7 = AVE_GetCurrTime();
    int v8 = AVE_Log_GetLevelStr(7);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v7, 61, v8, "AVE_Dump_Destroy", 0, 0);
      __uint64_t v9 = AVE_GetCurrTime();
      uint64_t v12 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v9, 61, v12, "AVE_Dump_Destroy", 0, 0);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v7, 61, v8, "AVE_Dump_Destroy", 0, 0);
    }
  }
  return 0;
}

uint64_t AVE_Dump_ComposeFilePath(_DWORD *a1, unsigned int a2, int a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a6;
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  *(_OWORD *)uint64_t v38 = 0u;
  long long v39 = 0u;
  int v13 = AVE_SNPrintf(v38, 128, "%d-%s-%dx%d-%s-%d", a4, (uint64_t)a5, a6, a7, a8, *a1);
  int v19 = v13;
  if ((a3 & 0x80000000) == 0) {
    int v19 = AVE_SNPrintf(&v38[v13], 128 - v13, "-MP%d", v14, v15, v16, v17, v18, a3) + v13;
  }
  if (a1[3] == 1) {
    v19 += AVE_SNPrintf(&v38[v19], 128 - v19, "-%s-%d", v14, v15, v16, v17, v18, (char)gc_piaAVE_CodecType[a1[4]]);
  }
  char v20 = pthread_self();
  rand();
  int v26 = AVE_SNPrintf(&v38[v19], 128 - v19, "-%lu-%d-%s", v21, v22, v23, v24, v25, v20);
  if (a2 == 1)
  {
    int v32 = a1[3];
    long long v33 = (const char *)a4;
    if (v32 == 1) {
      long long v34 = &off_1E6224800[a1[4]];
    }
    else {
      long long v34 = &off_1E6224800[v32 + 1];
    }
    long long v35 = v34 + 1;
  }
  else
  {
    if ((a2 & 0xFFFFFFFD) == 1 && (a1[2] & (1 << a2)) != 0) {
      long long v35 = &gsc_saAVE_DumpInfo[9 * a2 + 2];
    }
    else {
      long long v35 = &gsc_saAVE_DumpInfo[9 * a2 + 1];
    }
    long long v33 = (const char *)a4;
  }
  AVE_SNPrintf(&v38[v19 + (uint64_t)v26], 128 - (v19 + v26), ".%s", v27, v28, v29, v30, v31, (char)*v35);
  return AVE_ComposeFilePath(v33, 0, v38, a5, v8);
}

uint64_t AVE_Dump_OpenFiles(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  *(_OWORD *)__filename = 0u;
  long long v35 = 0u;
  if ((int)a1[9] < 1) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  __uint64_t v11 = a1 + 12;
  do
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v32 = v9;
    do
    {
      if ((a1[1] & (1 << v13)) != 0 && !*(void *)&v11[2 * v13])
      {
        if ((int)a1[9] <= 1) {
          int v14 = -1;
        }
        else {
          int v14 = v9;
        }
        uint64_t v10 = AVE_Dump_ComposeFilePath(a1, v13, v14, a2, __filename, 256, a7, a8);
        BOOL v15 = (a1[2] & (1 << v13)) != 0 && v12 == 27;
        uint64_t v16 = 5;
        if (v15) {
          uint64_t v16 = 6;
        }
        uint64_t v17 = (&gsc_saAVE_DumpInfo[v12])[v16];
        uint64_t v18 = fopen(__filename, v17);
        *(void *)&v11[2 * v13] = v18;
        if (v18)
        {
          if (AVE_Log_CheckLevel(0x3Du, 6))
          {
            int v19 = AVE_Log_CheckConsole(0x3Du);
            __uint64_t CurrTime = AVE_GetCurrTime();
            Leveluint64_t Str = AVE_Log_GetLevelStr(6);
            if (v19)
            {
              printf("%lld %d AVE %s: %s:%d open dump file %p %d | %d %d %s %s\n", CurrTime, 61, LevelStr, "AVE_Dump_OpenFiles", 262, a1, *a1, v9, v13, __filename, v17);
              __uint64_t v22 = AVE_GetCurrTime();
              uint64_t v30 = AVE_Log_GetLevelStr(6);
              __uint64_t v28 = v22;
            }
            else
            {
              uint64_t v30 = LevelStr;
              __uint64_t v28 = CurrTime;
            }
            syslog(3, "%lld %d AVE %s: %s:%d open dump file %p %d | %d %d %s %s", v28, 61, v30, "AVE_Dump_OpenFiles");
          }
        }
        else if (AVE_Log_CheckLevel(0x3Du, 4))
        {
          int v23 = AVE_Log_CheckConsole(0x3Du);
          __uint64_t v24 = AVE_GetCurrTime();
          uint64_t v25 = AVE_Log_GetLevelStr(4);
          if (v23)
          {
            printf("%lld %d AVE %s: %s:%d fail to open dump file %p %d | %d %d %s %s\n", v24, 61, v25, "AVE_Dump_OpenFiles", 257, a1, *a1, v9, v13, __filename, v17);
            __uint64_t v26 = AVE_GetCurrTime();
            uint64_t v31 = AVE_Log_GetLevelStr(4);
            __uint64_t v29 = v26;
          }
          else
          {
            uint64_t v31 = v25;
            __uint64_t v29 = v24;
          }
          syslog(3, "%lld %d AVE %s: %s:%d fail to open dump file %p %d | %d %d %s %s", v29, 61, v31, "AVE_Dump_OpenFiles");
        }
      }
      ++v13;
      v12 += 9;
    }
    while (v12 != 108);
    ++v9;
    v11 += 24;
  }
  while (v32 + 1 < (int)a1[9]);
  return v10;
}

uint64_t AVE_Dump_WriteHeader(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t result = 0;
  uint64_t v4 = a1 + 48;
  char v5 = 1;
  do
  {
    char v6 = v5;
    __uint64_t v7 = (FILE **)(v4 + 96 * v2);
    for (uint64_t i = -2; i != 10; ++i)
    {
      if (*v7) {
        BOOL v9 = i > 8;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9 && ((0x1C1u >> i) & 1) != 0)
      {
        if (fprintf(*v7, off_1E6224B18[i]) <= 0) {
          uint64_t result = 4294965296;
        }
        else {
          uint64_t result = 0;
        }
      }
      ++v7;
    }
    char v5 = 0;
    uint64_t v2 = 1;
  }
  while ((v6 & 1) != 0);
  return result;
}

uint64_t AVE_Dump_Init(uint64_t a1, const void *a2, int a3, int a4, int a5, int a6, void *a7, int a8, int a9, int a10, int a11)
{
  if (AVE_Log_CheckLevel(0x3Du, 7))
  {
    int v19 = AVE_Log_CheckConsole(0x3Du);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v19)
    {
      printf("%lld %d AVE %s: %s Enter %p %p %d %d 0x%x 0x%x %p %d %d %d %d\n", CurrTime, 61, LevelStr, "AVE_Dump_Init", (const void *)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
      __uint64_t v40 = AVE_GetCurrTime();
      __uint64_t v22 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Enter %p %p %d %d 0x%x 0x%x %p %d %d %d %d", v40, 61, v22, "AVE_Dump_Init", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p %p %d %d 0x%x 0x%x %p %d %d %d %d", CurrTime, 61, LevelStr, "AVE_Dump_Init", a1);
    }
  }
  if (a1 && a7)
  {
    *(_DWORD *)(a1 + 4) = a5;
    *(_DWORD *)(a1 + 8) = a6;
    *(_DWORD *)(a1 + 12) = a3;
    *(_DWORD *)(a1 + 16) = a4;
    *(void *)(a1 + 20) = *a7;
    *(_DWORD *)(a1 + 28) = a9;
    *(_DWORD *)(a1 + 32) = a10;
    *(_DWORD *)(a1 + 36) = a8;
    *(_DWORD *)(a1 + 40) = a11;
    uint64_t v23 = AVE_Dump_OpenFiles((_DWORD *)a1, (uint64_t)a2, v13, v14, v15, v16, v17, v18);
    if (!v23)
    {
      AVE_Dump_WriteHeader(a1);
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  if (AVE_Log_CheckLevel(0x3Du, 4))
  {
    int v24 = AVE_Log_CheckConsole(0x3Du);
    __uint64_t v25 = AVE_GetCurrTime();
    __uint64_t v26 = AVE_Log_GetLevelStr(4);
    if (v24)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %p %d %d 0x%x 0x%x %p %d %d %d %d\n", v25, 61, v26, "AVE_Dump_Init", 457, "pDump != __null && pResolution != __null", (const void *)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
      __uint64_t v41 = AVE_GetCurrTime();
      long long v39 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %p %d %d 0x%x 0x%x %p %d %d %d %d", v41, 61, v39, "AVE_Dump_Init", 457, "pDump != __null && pResolution != __null", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %p %d %d 0x%x 0x%x %p %d %d %d %d", v25, 61, v26, "AVE_Dump_Init", 457, "pDump != __null && pResolution != __null", a1);
    }
  }
  uint64_t v23 = 4294966295;
  if (a1)
  {
LABEL_14:
    uint64_t v27 = 0;
    char v28 = 1;
    do
    {
      uint64_t v29 = 0;
      char v30 = v28;
      uint64_t v31 = a1 + 48 + 96 * v27;
      do
      {
        uint64_t v32 = *(FILE **)(v31 + v29);
        if (v32)
        {
          fclose(v32);
          *(void *)(v31 + v29) = 0;
        }
        v29 += 8;
      }
      while (v29 != 96);
      char v28 = 0;
      uint64_t v27 = 1;
    }
    while ((v30 & 1) != 0);
  }
LABEL_20:
  if (AVE_Log_CheckLevel(0x3Du, 7))
  {
    int v33 = AVE_Log_CheckConsole(0x3Du);
    __uint64_t v34 = AVE_GetCurrTime();
    long long v35 = AVE_Log_GetLevelStr(7);
    if (v33)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %d %d 0x%x 0x%x %p %d %d %d %d %d\n", v34, 61, v35, "AVE_Dump_Init", (const void *)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v23);
      __uint64_t v36 = AVE_GetCurrTime();
      long long v37 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %d %d 0x%x 0x%x %p %d %d %d %d %d", v36, 61, v37, "AVE_Dump_Init", a1, a2);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %d %d 0x%x 0x%x %p %d %d %d %d %d", v34, 61, v35, "AVE_Dump_Init", a1, a2);
    }
  }
  return v23;
}

uint64_t AVE_Dump_Uninit(const void *a1)
{
  if (AVE_Log_CheckLevel(0x3Du, 7))
  {
    int v2 = AVE_Log_CheckConsole(0x3Du);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", CurrTime, 61, LevelStr, "AVE_Dump_Uninit", a1);
      __uint64_t v5 = AVE_GetCurrTime();
      uint64_t v17 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 61, v17, "AVE_Dump_Uninit", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", CurrTime, 61, LevelStr, "AVE_Dump_Uninit", a1);
    }
  }
  if (a1)
  {
    uint64_t v6 = 0;
    char v7 = 1;
    do
    {
      uint64_t v8 = 0;
      char v9 = v7;
      uint64_t v10 = (uint64_t)a1 + 96 * v6 + 48;
      do
      {
        __uint64_t v11 = *(FILE **)(v10 + v8);
        if (v11)
        {
          fclose(v11);
          *(void *)(v10 + v8) = 0;
        }
        v8 += 8;
      }
      while (v8 != 96);
      char v7 = 0;
      uint64_t v6 = 1;
    }
    while ((v9 & 1) != 0);
  }
  if (AVE_Log_CheckLevel(0x3Du, 7))
  {
    int v12 = AVE_Log_CheckConsole(0x3Du);
    __uint64_t v13 = AVE_GetCurrTime();
    uint64_t v14 = AVE_Log_GetLevelStr(7);
    if (v12)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v13, 61, v14, "AVE_Dump_Uninit", a1, 0);
      __uint64_t v15 = AVE_GetCurrTime();
      uint64_t v18 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v15, 61, v18, "AVE_Dump_Uninit", a1, 0);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v13, 61, v14, "AVE_Dump_Uninit", a1, 0);
    }
  }
  return 0;
}

uint64_t AVE_Dump_WriteInput(_DWORD *a1, int a2, __CVBuffer *a3)
{
  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    int v6 = AVE_Log_CheckConsole(0x3Du);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %p\n", CurrTime, 61, LevelStr, "AVE_Dump_WriteInput", a1, a2, a3);
      __uint64_t CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %p", CurrTime);
  }
  if (a1)
  {
    char v9 = *(__sFILE **)&a1[24 * (a2 > 0) + 12];
    if (v9)
    {
      if (a3) {
        uint64_t v10 = AVE_PixelBuf_Dump(a3, a1[2] & 1, v9);
      }
      else {
        uint64_t v10 = 4294966287;
      }
    }
    else
    {
      uint64_t v10 = 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x3Du, 4))
    {
      int v11 = AVE_Log_CheckConsole(0x3Du);
      __uint64_t v12 = AVE_GetCurrTime();
      __uint64_t v13 = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p\n", v12, 61, v13, "AVE_Dump_WriteInput", 533, "pDump != __null", 0, a2, a3);
        __uint64_t v14 = AVE_GetCurrTime();
        char v20 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v14, 61, v20);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v12, 61, v13);
      }
    }
    uint64_t v10 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    int v15 = AVE_Log_CheckConsole(0x3Du);
    __uint64_t v16 = AVE_GetCurrTime();
    uint64_t v17 = AVE_Log_GetLevelStr(8);
    if (v15)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %p %d\n", v16, 61, v17, "AVE_Dump_WriteInput", a1, a2, a3, v10);
      __uint64_t v18 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d", v18, 61);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d", v16, 61);
    }
  }
  return v10;
}

uint64_t AVE_Dump_WriteOutput(void *a1, int a2, const void *a3, int a4)
{
  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    int v8 = AVE_Log_CheckConsole(0x3Du);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(8);
    if (v8)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %p %d\n", CurrTime, 61, LevelStr, "AVE_Dump_WriteOutput", a1, a2, a3, a4);
      __uint64_t CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %p %d", CurrTime, 61);
  }
  if (a1)
  {
    int v11 = (FILE *)a1[12 * (a2 > 0) + 7];
    if (v11)
    {
      uint64_t v12 = 4294966287;
      if (a3 && a4 >= 1)
      {
        int v13 = fwrite(a3, 1uLL, a4, v11);
        uint64_t v12 = v13 == a4 ? 0 : 4294965296;
        if (AVE_Log_CheckLevel(0x3Du, 8))
        {
          int v14 = AVE_Log_CheckConsole(0x3Du);
          __uint64_t v15 = AVE_GetCurrTime();
          __uint64_t v16 = AVE_Log_GetLevelStr(8);
          if (v14)
          {
            printf("%lld %d AVE %s: %s:%d %p %d %p %d %d\n", v15, 61, v16, "AVE_Dump_WriteOutput", 596, a1, a2, a3, a4, v13);
            __uint64_t v17 = AVE_GetCurrTime();
            uint64_t v27 = AVE_Log_GetLevelStr(8);
            syslog(3, "%lld %d AVE %s: %s:%d %p %d %p %d %d", v17, 61, v27);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %p %d %p %d %d", v15, 61, v16);
          }
        }
      }
    }
    else
    {
      uint64_t v12 = 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x3Du, 4))
    {
      int v18 = AVE_Log_CheckConsole(0x3Du);
      __uint64_t v19 = AVE_GetCurrTime();
      char v20 = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p %d\n", v19, 61, v20, "AVE_Dump_WriteOutput", 578, "pDump != __null", 0, a2, a3, a4);
        __uint64_t v21 = AVE_GetCurrTime();
        char v28 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p %d", v21, 61, v28, "AVE_Dump_WriteOutput");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p %d", v19, 61, v20, "AVE_Dump_WriteOutput");
      }
    }
    uint64_t v12 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    int v22 = AVE_Log_CheckConsole(0x3Du);
    __uint64_t v23 = AVE_GetCurrTime();
    int v24 = AVE_Log_GetLevelStr(8);
    if (v22)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %p %d %d\n", v23, 61, v24, "AVE_Dump_WriteOutput", a1, a2, a3, a4, v12);
      __uint64_t v25 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d %d", v25, 61);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d %d", v23, 61);
    }
  }
  return v12;
}

uint64_t AVE_Dump_WriteISPMetadata(void *a1, int a2, int a3, double *a4)
{
  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    int v8 = AVE_Log_CheckConsole(0x3Du);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(8);
    if (v8)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %d %p\n", CurrTime, 61, LevelStr, "AVE_Dump_WriteISPMetadata", a1, a2, a3, a4);
      __uint64_t CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %d %p", CurrTime, 61);
  }
  if (a1)
  {
    int v11 = (FILE *)a1[12 * (a2 > 0) + 8];
    if (v11)
    {
      if (a4)
      {
        if (fprintf(v11, "%5d, %4.6f, %4.6f, %4.6f, %f, %f, %d, %d, %d, %d\n", a3, *a4, a4[1], a4[2], a4[3], a4[4], *((_DWORD *)a4 + 16), *((_DWORD *)a4 + 17), *((_DWORD *)a4 + 18), *((_DWORD *)a4 + 20)) <= 0)uint64_t v12 = 4294965296; {
        else
        }
          uint64_t v12 = 0;
      }
      else
      {
        uint64_t v12 = 4294966287;
      }
    }
    else
    {
      uint64_t v12 = 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x3Du, 4))
    {
      int v13 = AVE_Log_CheckConsole(0x3Du);
      __uint64_t v14 = AVE_GetCurrTime();
      __uint64_t v15 = AVE_Log_GetLevelStr(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p\n", v14, 61, v15, "AVE_Dump_WriteISPMetadata", 625, "pDump != __null", 0, a2, a3, a4);
        __uint64_t v16 = AVE_GetCurrTime();
        int v22 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p", v16, 61, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p", v14, 61, v15);
      }
    }
    uint64_t v12 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    int v17 = AVE_Log_CheckConsole(0x3Du);
    __uint64_t v18 = AVE_GetCurrTime();
    __uint64_t v19 = AVE_Log_GetLevelStr(8);
    if (v17)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %d %p %d\n", v18, 61, v19, "AVE_Dump_WriteISPMetadata", a1, a2, a3, a4, v12);
      __uint64_t v20 = AVE_GetCurrTime();
      __uint64_t v23 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %d %p %d", v20, 61, v23);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %d %p %d", v18, 61, v19);
    }
  }
  return v12;
}

uint64_t AVE_Dump_WriteMBStats(void *a1, int a2, const void *a3, int a4)
{
  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    int v8 = AVE_Log_CheckConsole(0x3Du);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(8);
    if (v8)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %p %d\n", CurrTime, 61, LevelStr, "AVE_Dump_WriteMBStats", a1, a2, a3, a4);
      __uint64_t CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %p %d", CurrTime, 61);
  }
  if (a1)
  {
    int v11 = (FILE *)a1[12 * (a2 > 0) + 9];
    if (v11)
    {
      uint64_t v12 = 4294966287;
      if (a3 && a4 >= 1)
      {
        int v13 = fwrite(a3, 1uLL, a4, v11);
        uint64_t v12 = v13 == a4 ? 0 : 4294965296;
        if (AVE_Log_CheckLevel(0x3Du, 8))
        {
          int v14 = AVE_Log_CheckConsole(0x3Du);
          __uint64_t v15 = AVE_GetCurrTime();
          __uint64_t v16 = AVE_Log_GetLevelStr(8);
          if (v14)
          {
            printf("%lld %d AVE %s: %s:%d %p %d %p %d %d\n", v15, 61, v16, "AVE_Dump_WriteMBStats", 692, a1, a2, a3, a4, v13);
            __uint64_t v17 = AVE_GetCurrTime();
            uint64_t v27 = AVE_Log_GetLevelStr(8);
            syslog(3, "%lld %d AVE %s: %s:%d %p %d %p %d %d", v17, 61, v27);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %p %d %p %d %d", v15, 61, v16);
          }
        }
      }
    }
    else
    {
      uint64_t v12 = 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x3Du, 4))
    {
      int v18 = AVE_Log_CheckConsole(0x3Du);
      __uint64_t v19 = AVE_GetCurrTime();
      __uint64_t v20 = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p %d\n", v19, 61, v20, "AVE_Dump_WriteMBStats", 674, "pDump != __null", 0, a2, a3, a4);
        __uint64_t v21 = AVE_GetCurrTime();
        char v28 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p %d", v21, 61, v28, "AVE_Dump_WriteMBStats");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p %d", v19, 61, v20, "AVE_Dump_WriteMBStats");
      }
    }
    uint64_t v12 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    int v22 = AVE_Log_CheckConsole(0x3Du);
    __uint64_t v23 = AVE_GetCurrTime();
    int v24 = AVE_Log_GetLevelStr(8);
    if (v22)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %p %d %d\n", v23, 61, v24, "AVE_Dump_WriteMBStats", a1, a2, a3, a4, v12);
      __uint64_t v25 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d %d", v25, 61);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d %d", v23, 61);
    }
  }
  return v12;
}

uint64_t AVE_Dump_WriteHwEventTrace(void *a1, int a2, int *a3)
{
  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    int v6 = AVE_Log_CheckConsole(0x3Du);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %p\n", CurrTime, 61, LevelStr, "AVE_Dump_WriteHwEventTrace", a1, a2, a3);
      __uint64_t CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %p", CurrTime);
  }
  if (a1)
  {
    char v9 = (FILE *)a1[12 * (a2 > 0) + 14];
    if (v9)
    {
      if (a3)
      {
        if (*a3 < 2)
        {
          uint64_t v13 = 0;
        }
        else
        {
          uint64_t v10 = (unsigned __int8 *)(a3 + 5);
          uint64_t v11 = 1;
          do
          {
            int v12 = fprintf(v9, "%6d, %d, %d, %6d, %6d, 0x%x, 0x%x, 0x%x, 0x%x\n", v11++, v10[1], *v10, v10[2], v10[3], *((_DWORD *)v10 + 1), *((_DWORD *)v10 + 2), *((_DWORD *)v10 + 3), *((_DWORD *)v10 + 4));
            v10 += 20;
          }
          while (v11 < *a3);
          if (v12 <= 0) {
            uint64_t v13 = 4294965296;
          }
          else {
            uint64_t v13 = 0;
          }
        }
      }
      else
      {
        uint64_t v13 = 4294966287;
      }
    }
    else
    {
      uint64_t v13 = 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x3Du, 4))
    {
      int v14 = AVE_Log_CheckConsole(0x3Du);
      __uint64_t v15 = AVE_GetCurrTime();
      __uint64_t v16 = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p\n", v15, 61, v16, "AVE_Dump_WriteHwEventTrace", 720, "pDump != __null", 0, a2, a3);
        __uint64_t v17 = AVE_GetCurrTime();
        __uint64_t v23 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v17, 61, v23);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v15, 61, v16);
      }
    }
    uint64_t v13 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    int v18 = AVE_Log_CheckConsole(0x3Du);
    __uint64_t v19 = AVE_GetCurrTime();
    __uint64_t v20 = AVE_Log_GetLevelStr(8);
    if (v18)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %p %d\n", v19, 61, v20, "AVE_Dump_WriteHwEventTrace", a1, a2, a3, v13);
      __uint64_t v21 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d", v21, 61);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d", v19, 61);
    }
  }
  return v13;
}

uint64_t AVE_Dump_WriteVQMetrics(void *a1, int a2, int a3, float *a4)
{
  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    int v8 = AVE_Log_CheckConsole(0x3Du);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(8);
    if (v8)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %d %p\n", CurrTime, 61, LevelStr, "AVE_Dump_WriteVQMetrics", a1, a2, a3, a4);
      __uint64_t CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %d %p", CurrTime, 61);
  }
  if (a1)
  {
    uint64_t v11 = (FILE *)a1[12 * (a2 > 0) + 15];
    if (v11)
    {
      if (a4)
      {
        if (fprintf(v11, "%d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f\n", a3, a4[4], a4[5], a4[6], *a4, a4[1], a4[2]) <= 0) {
          uint64_t v12 = 4294965296;
        }
        else {
          uint64_t v12 = 0;
        }
      }
      else
      {
        uint64_t v12 = 4294966287;
      }
    }
    else
    {
      uint64_t v12 = 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x3Du, 4))
    {
      int v13 = AVE_Log_CheckConsole(0x3Du);
      __uint64_t v14 = AVE_GetCurrTime();
      __uint64_t v15 = AVE_Log_GetLevelStr(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p\n", v14, 61, v15, "AVE_Dump_WriteVQMetrics", 772, "pDump != __null", 0, a2, a3, a4);
        __uint64_t v16 = AVE_GetCurrTime();
        int v22 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p", v16, 61, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p", v14, 61, v15);
      }
    }
    uint64_t v12 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    int v17 = AVE_Log_CheckConsole(0x3Du);
    __uint64_t v18 = AVE_GetCurrTime();
    __uint64_t v19 = AVE_Log_GetLevelStr(8);
    if (v17)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %d %p %d\n", v18, 61, v19, "AVE_Dump_WriteVQMetrics", a1, a2, a3, a4, v12);
      __uint64_t v20 = AVE_GetCurrTime();
      __uint64_t v23 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %d %p %d", v20, 61, v23);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %d %p %d", v18, 61, v19);
    }
  }
  return v12;
}

uint64_t AVE_Dump_WriteFPS(void *a1, int a2, int a3, double *a4)
{
  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    int v8 = AVE_Log_CheckConsole(0x3Du);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(8);
    if (v8)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %d %p\n", CurrTime, 61, LevelStr, "AVE_Dump_WriteFPS", a1, a2, a3, a4);
      __uint64_t CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %d %p", CurrTime, 61);
  }
  if (a1)
  {
    uint64_t v11 = (FILE *)a1[12 * (a2 > 0) + 16];
    if (v11)
    {
      if (a4)
      {
        if (fprintf(v11, "%d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f\n", a3, a4[2], a4[1], *a4, a4[5], a4[4], a4[3], a4[8], a4[7], a4[6]) <= 0)uint64_t v12 = 4294965296; {
        else
        }
          uint64_t v12 = 0;
      }
      else
      {
        uint64_t v12 = 4294966287;
      }
    }
    else
    {
      uint64_t v12 = 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x3Du, 4))
    {
      int v13 = AVE_Log_CheckConsole(0x3Du);
      __uint64_t v14 = AVE_GetCurrTime();
      __uint64_t v15 = AVE_Log_GetLevelStr(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p\n", v14, 61, v15, "AVE_Dump_WriteFPS", 820, "pDump != __null", 0, a2, a3, a4);
        __uint64_t v16 = AVE_GetCurrTime();
        int v22 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p", v16, 61, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p", v14, 61, v15);
      }
    }
    uint64_t v12 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    int v17 = AVE_Log_CheckConsole(0x3Du);
    __uint64_t v18 = AVE_GetCurrTime();
    __uint64_t v19 = AVE_Log_GetLevelStr(8);
    if (v17)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %d %p %d\n", v18, 61, v19, "AVE_Dump_WriteFPS", a1, a2, a3, a4, v12);
      __uint64_t v20 = AVE_GetCurrTime();
      __uint64_t v23 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %d %p %d", v20, 61, v23);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %d %p %d", v18, 61, v19);
    }
  }
  return v12;
}

uint64_t AVE_Dump_WriteRecon(uint64_t a1, __CVBuffer *a2)
{
  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    int v4 = AVE_Log_CheckConsole(0x3Du);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(8);
    if (v4)
    {
      printf("%lld %d AVE %s: %s Enter %p %p\n", CurrTime, 61, LevelStr, "AVE_Dump_WriteRecon", (const void *)a1, a2);
      __uint64_t v7 = AVE_GetCurrTime();
      int v17 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s Enter %p %p", v7, 61, v17, "AVE_Dump_WriteRecon", (const void *)a1, a2);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p %p", CurrTime, 61, LevelStr, "AVE_Dump_WriteRecon", (const void *)a1, a2);
    }
  }
  if (a1)
  {
    int v8 = *(__sFILE **)(a1 + 136);
    if (v8)
    {
      if (a2) {
        uint64_t v9 = AVE_PixelBuf_Dump(a2, (*(_DWORD *)(a1 + 8) >> 11) & 1, v8);
      }
      else {
        uint64_t v9 = 4294966287;
      }
    }
    else
    {
      uint64_t v9 = 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x3Du, 4))
    {
      int v10 = AVE_Log_CheckConsole(0x3Du);
      __uint64_t v11 = AVE_GetCurrTime();
      uint64_t v12 = AVE_Log_GetLevelStr(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %p\n", v11, 61, v12, "AVE_Dump_WriteRecon", 864, "pDump != __null", 0, a2);
        __uint64_t v11 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %p", v11, 61);
    }
    uint64_t v9 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    int v13 = AVE_Log_CheckConsole(0x3Du);
    __uint64_t v14 = AVE_GetCurrTime();
    __uint64_t v15 = AVE_Log_GetLevelStr(8);
    if (v13)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %d\n", v14, 61, v15, "AVE_Dump_WriteRecon", (const void *)a1, a2, v9);
      __uint64_t v14 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(8);
    }
    syslog(3, "%lld %d AVE %s: %s Exit %p %p %d", v14);
  }
  return v9;
}

uint64_t AVE_Enc_CheckResolution(int a1, int a2, int a3, int a4, int a5)
{
  Resolution = AVE_DevCap_FindResolution(a1, 1, a2);
  if (!Resolution) {
    return 4294966294;
  }
  unint64_t v9 = *(unsigned int *)Resolution;
  if ((int)v9 < 1)
  {
    BOOL v12 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    __uint64_t v11 = Resolution + 12;
    BOOL v12 = 1;
    do
    {
      if (*(v11 - 1) <= a3 && *v11 <= a4) {
        break;
      }
      v11 += 3;
      BOOL v12 = ++v10 < v9;
    }
    while (v9 != v10);
  }
  uint64_t v13 = *((unsigned int *)Resolution + 13);
  if ((int)v13 < 1) {
    return 4294966294;
  }
  for (uint64_t i = Resolution + 64; ; i += 3)
  {
    if (*(i - 1) >= a3 && *i >= a4)
    {
      int v15 = *(i - 2);
      if (v15 == a5 || v15 < 0) {
        break;
      }
    }
    if (!--v13) {
      return 4294966294;
    }
  }
  if (v12) {
    return 0;
  }
  else {
    return 4294966294;
  }
}

uint64_t AVE_FrameStats_PrintStatFrame(const void *a1, const void *a2, const void *a3)
{
  int v19 = 0;
  if (AVE_Log_CheckLevel(0x2Eu, 7))
  {
    int v6 = AVE_Log_CheckConsole(0x2Eu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p %p %p\n", CurrTime, 46, LevelStr, "AVE_FrameStats_PrintStatFrame", a2, a1, a3);
      __uint64_t CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %p %p", CurrTime);
  }
  if (a1 && a2)
  {
    if (a3) {
      operator new[]();
    }
    uint64_t v13 = 4294966288;
  }
  else
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      int v9 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v10 = AVE_GetCurrTime();
      __uint64_t v11 = AVE_Log_GetLevelStr(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v10, 46, v11, "AVE_FrameStats_PrintStatFrame", 779, "(psFrame != __null) && (psMgr != __null)", a2, a1, a3);
        __uint64_t v12 = AVE_GetCurrTime();
        __uint64_t v18 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v12, 46, v18);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v10, 46, v11);
      }
    }
    uint64_t v13 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x74u, 7))
  {
    int v14 = AVE_Log_CheckConsole(0x74u);
    __uint64_t v15 = AVE_GetCurrTime();
    __uint64_t v16 = AVE_Log_GetLevelStr(7);
    if (v14)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %p %d\n", v15, 116, v16, "AVE_FrameStats_PrintStatFrame", a2, a1, a3, v13);
      __uint64_t v15 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: %s Exit %p %p %p %d", v15, 116);
  }
  return v13;
}

uint64_t AVE_USL_Enc_PropCfg_Init(_OWORD *a1)
{
  if (AVE_Log_CheckLevel(0x1Eu, 7))
  {
    int v2 = AVE_Log_CheckConsole(0x1Eu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", CurrTime, 30, LevelStr, "AVE_USL_Enc_PropCfg_Init", a1);
      __uint64_t v5 = AVE_GetCurrTime();
      __uint64_t v12 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 30, v12, "AVE_USL_Enc_PropCfg_Init", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", CurrTime, 30, LevelStr, "AVE_USL_Enc_PropCfg_Init", a1);
    }
  }
  a1[28] = 0u;
  a1[29] = 0u;
  a1[26] = 0u;
  a1[27] = 0u;
  a1[24] = 0u;
  a1[25] = 0u;
  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  *((_DWORD *)a1 + 32) = -1;
  *((void *)a1 + 17) = 0xBFF0000000000000;
  *((void *)a1 + 18) = -1;
  *((void *)a1 + 19) = -1;
  *((void *)a1 + 20) = 0xBFF0000000000000;
  *((_DWORD *)a1 + 42) = -1;
  *((void *)a1 + 22) = 0xBFF0000000000000;
  *((_DWORD *)a1 + 46) = -1;
  *((void *)a1 + 24) = -1;
  *((void *)a1 + 30) = -1;
  *((_DWORD *)a1 + 110) = -1;
  *((_DWORD *)a1 + 87) = -1;
  *((void *)a1 + 31) = 0xBFF0000000000000;
  *((void *)a1 + 32) = -1;
  *((void *)a1 + 33) = -1;
  *((_DWORD *)a1 + 70) = -2;
  *((void *)a1 + 36) = -1;
  *((void *)a1 + 37) = -1;
  *((void *)a1 + 38) = -1;
  memset_pattern16((char *)a1 + 312, &unk_1BA78F610, 8uLL);
  memset_pattern16(a1 + 20, &unk_1BA78F610, 8uLL);
  *(void *)&long long v6 = -1;
  *((void *)&v6 + 1) = -1;
  *(_OWORD *)((char *)a1 + 328) = v6;
  if (AVE_Log_CheckLevel(0x1Eu, 7))
  {
    int v7 = AVE_Log_CheckConsole(0x1Eu);
    __uint64_t v8 = AVE_GetCurrTime();
    int v9 = AVE_Log_GetLevelStr(7);
    if (v7)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v8, 30, v9, "AVE_USL_Enc_PropCfg_Init", a1, 0);
      __uint64_t v10 = AVE_GetCurrTime();
      uint64_t v13 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v10, 30, v13, "AVE_USL_Enc_PropCfg_Init", a1, 0);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v8, 30, v9, "AVE_USL_Enc_PropCfg_Init", a1, 0);
    }
  }
  return 0;
}

uint64_t AVE_USL_Enc_PropCfg_Uninit(const void *a1)
{
  if (AVE_Log_CheckLevel(0x1Eu, 7))
  {
    int v2 = AVE_Log_CheckConsole(0x1Eu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", CurrTime, 30, LevelStr, "AVE_USL_Enc_PropCfg_Uninit", a1);
      __uint64_t v5 = AVE_GetCurrTime();
      __uint64_t v11 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 30, v11, "AVE_USL_Enc_PropCfg_Uninit", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", CurrTime, 30, LevelStr, "AVE_USL_Enc_PropCfg_Uninit", a1);
    }
  }
  if (AVE_Log_CheckLevel(0x1Eu, 7))
  {
    int v6 = AVE_Log_CheckConsole(0x1Eu);
    __uint64_t v7 = AVE_GetCurrTime();
    __uint64_t v8 = AVE_Log_GetLevelStr(7);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v7, 30, v8, "AVE_USL_Enc_PropCfg_Uninit", a1, 0);
      __uint64_t v9 = AVE_GetCurrTime();
      __uint64_t v12 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v9, 30, v12, "AVE_USL_Enc_PropCfg_Uninit", a1, 0);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v7, 30, v8, "AVE_USL_Enc_PropCfg_Uninit", a1, 0);
    }
  }
  return 0;
}

void AVE_PixelBufAttr_AppendPixelFormat()
{
}

void AVE_PixelBufAttr_AppendPixelFormatByProfile()
{
  int v0 = 0;
  AVE_PixelFmt_GetNumberOfTypes();
  operator new[]();
}

uint64_t AVE_PixelBufAttr_AppendIOSurface(int a1, int *a2, __CFDictionary *a3)
{
  __uint64_t v5 = AVE_PixelFmt_FindByType(a1);
  if (!v5) {
    return 4294954394;
  }
  if ((*((_DWORD *)v5 + 6) & 0xFFFFFFFE) != 2) {
    return 0;
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  __uint64_t v7 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  __uint64_t v8 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  __uint64_t v9 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v10 = CFDictionaryCreateMutable(0, 0, v7, v8);
  __uint64_t v11 = v10;
  if (Mutable) {
    BOOL v12 = v9 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12 && v10 != 0)
  {
    CFStringRef v19 = (const __CFString *)*MEMORY[0x1E4F2F208];
    AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E4F2F208], 1, v9);
    AVE_CFDict_AddSInt32(v19, 1, v11);
    __uint64_t v20 = (const __CFString **)MEMORY[0x1E4F2F230];
    if (*a2 >= 1) {
      AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E4F2F230], *a2, v9);
    }
    int v21 = a2[2];
    int v22 = (const __CFString **)MEMORY[0x1E4F2F250];
    if (v21 >= 1) {
      AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E4F2F250], v21, v9);
    }
    int v23 = a2[4];
    if (v23 >= 1) {
      AVE_CFDict_AddSInt32(*v20, v23, v11);
    }
    int v24 = a2[6];
    if (v24 >= 1) {
      AVE_CFDict_AddSInt32(*v22, v24, v11);
    }
    CFArrayAppendValue(Mutable, v9);
    CFArrayAppendValue(Mutable, v11);
    CFDictionarySetValue(a3, (const void *)*MEMORY[0x1E4F24EE0], Mutable);
    CFRelease(v9);
    CFRelease(v11);
    CFRelease(Mutable);
    return 0;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    int v14 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (v14)
    {
      printf("%lld %d AVE %s: %s:%d %s | failed to create CF objects %p %p %p\n", CurrTime, 3, LevelStr, "AVE_PixelBufAttr_AppendIOSurface", 262, "pArray != __null && pDict0 != __null && pDict1 != __null", Mutable, v9, v11);
      __uint64_t v17 = AVE_GetCurrTime();
      __uint64_t v25 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create CF objects %p %p %p", v17, 3, v25);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create CF objects %p %p %p", CurrTime, 3, LevelStr);
    }
  }
  return 4294954392;
}

uint64_t AVE_PixelBufAttr_CreateDictFromProfile()
{
  if (CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]))
  {
    if (CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510])) {
      AVE_PixelBufAttr_AppendPixelFormatByProfile();
    }
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v3 = AVE_Log_CheckConsole(3u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v3)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to create CFArray\n", CurrTime, 3, LevelStr, "AVE_PixelBufAttr_CreateDictFromProfile", 349, "pTempArray != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create CFArray");
    }
  }
  else if (AVE_Log_CheckLevel(3u, 4))
  {
    int v0 = AVE_Log_CheckConsole(3u);
    __uint64_t v1 = AVE_GetCurrTime();
    int v2 = AVE_Log_GetLevelStr(4);
    if (v0)
    {
      printf("%lld %d AVE %s: %s:%d %s | failed to create CFDictionary\n", v1, 3, v2, "AVE_PixelBufAttr_CreateDictFromProfile", 344, "pDict != __null");
      AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create CFDictionary");
  }
  return 4294954392;
}

uint64_t AVE_PixelBufAttr_CreateDict()
{
  if (CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]))
  {
    if (CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510])) {
      AVE_PixelBufAttr_AppendPixelFormat();
    }
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v3 = AVE_Log_CheckConsole(3u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v3)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to create CFArray\n", CurrTime, 3, LevelStr, "AVE_PixelBufAttr_CreateDict", 469, "pTempArray != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create CFArray");
    }
  }
  else if (AVE_Log_CheckLevel(3u, 4))
  {
    int v0 = AVE_Log_CheckConsole(3u);
    __uint64_t v1 = AVE_GetCurrTime();
    int v2 = AVE_Log_GetLevelStr(4);
    if (v0)
    {
      printf("%lld %d AVE %s: %s:%d %s | failed to create CFDictionary\n", v1, 3, v2, "AVE_PixelBufAttr_CreateDict", 464, "pDict != __null");
      AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create CFDictionary");
  }
  return 4294954392;
}

uint64_t AVE_AlignDimension(int a1, signed int *a2, signed int *a3)
{
  if (a1 == 1)
  {
    signed int v7 = (*a2 + 15) & 0xFFFFFFF0;
    if (v7 <= 160) {
      signed int v7 = 160;
    }
    *a2 = v7;
    signed int v4 = (*a3 + 15) & 0xFFFFFFF0;
    BOOL v5 = v4 <= 64;
    int v6 = 64;
  }
  else
  {
    if (a1) {
      return 4294954394;
    }
    signed int v3 = (*a2 + 15) & 0xFFFFFFF0;
    if (v3 <= 192) {
      signed int v3 = 192;
    }
    *a2 = v3;
    signed int v4 = (*a3 + 15) & 0xFFFFFFF0;
    BOOL v5 = v4 <= 96;
    int v6 = 96;
  }
  if (v5) {
    signed int v4 = v6;
  }
  uint64_t result = 0;
  *a3 = v4;
  return result;
}

uint64_t AVE_ImgBuf_CreatePool(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, CVPixelBufferPoolRef *poolOut)
{
  uint64_t Dict = AVE_PixelBufAttr_CreateDict();
  if (Dict)
  {
    uint64_t v11 = Dict;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v12 = AVE_Log_CheckConsole(3u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to create pixel buffer attributes %d\n", CurrTime, 3, LevelStr, "AVE_ImgBuf_CreatePool", 606, "rc == noErr", v11);
        __uint64_t CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create pixel buffer attributes %d", CurrTime);
    }
  }
  else
  {
    uint64_t v11 = CVPixelBufferPoolCreate(0, 0, 0, poolOut);
    if (v11)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v15 = AVE_Log_CheckConsole(3u);
        __uint64_t v16 = AVE_GetCurrTime();
        __uint64_t v17 = AVE_Log_GetLevelStr(4);
        if (v15)
        {
          printf("%lld %d AVE %s: %s:%d %s | failed to create a pixel buffer pool %d\n", v16, 3, v17, "AVE_ImgBuf_CreatePool", 610, "cvrc == kCVReturnSuccess", v11);
          __uint64_t v16 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create a pixel buffer pool %d", v16);
      }
      return 4294954392;
    }
  }
  return v11;
}

uint64_t AVE_ImgBuf_Copy(__CVBuffer *a1, __CVBuffer *a2)
{
  int PlaneCount = CVPixelBufferGetPlaneCount(a1);
  if (PlaneCount >= 1)
  {
    size_t v5 = 0;
    uint64_t v6 = PlaneCount;
    do
    {
      int HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, v5);
      IOSurface = CVPixelBufferGetIOSurface(a1);
      BaseAddressOfPlane = (char *)IOSurfaceGetBaseAddressOfPlane(IOSurface, v5);
      CFMutableDictionaryRef v10 = CVPixelBufferGetIOSurface(a2);
      uint64_t v11 = (char *)IOSurfaceGetBaseAddressOfPlane(v10, v5);
      unsigned int BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, v5);
      unsigned int v13 = CVPixelBufferGetBytesPerRowOfPlane(a2, v5);
      if (HeightOfPlane)
      {
        if (BytesPerRowOfPlane >= v13) {
          size_t v14 = v13;
        }
        else {
          size_t v14 = BytesPerRowOfPlane;
        }
        uint64_t v15 = v13;
        do
        {
          memcpy(v11, BaseAddressOfPlane, v14);
          BaseAddressOfPlane += BytesPerRowOfPlane;
          v11 += v15;
          --HeightOfPlane;
        }
        while (HeightOfPlane);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  return 0;
}

uint64_t AVE_ImgBuf_VerifyUncompressed(__CVBuffer *a1, uint64_t a2, uint64_t a3, _DWORD *a4, char a5)
{
  size_t extraColumnsOnLeft = 0;
  size_t extraRowsOnTop = 0;
  size_t extraColumnsOnRight = 0;
  size_t extraRowsOnBottom = 0;
  IOSurface = CVPixelBufferGetIOSurface(a1);
  BaseAddressOfPlane = IOSurfaceGetBaseAddressOfPlane(IOSurface, 0);
  int v12 = BaseAddressOfPlane;
  if (!BaseAddressOfPlane || (BaseAddressOfPlane & 0x3F) != 0)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v14 = AVE_Log_CheckConsole(3u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | invalid buffer base address 0x%lx\n", CurrTime, 3, LevelStr, "AVE_ImgBuf_VerifyUncompressed", 710, "baseAddr != 0 && (baseAddr & 0x3F) == 0", v12);
        __uint64_t CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer base address 0x%lx", CurrTime);
    }
    return 4294954394;
  }
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
  if (a5)
  {
    LODWORD(v13) = 0;
    goto LABEL_11;
  }
  int WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  int HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  size_t v13 = (extraColumnsOnLeft + WidthOfPlane + extraColumnsOnRight);
  size_t v19 = (extraRowsOnTop + HeightOfPlane + extraRowsOnBottom);
  if (v13 >= a2 && v19 >= a3)
  {
LABEL_11:
    unsigned int BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
    int v21 = BytesPerRowOfPlane;
    if (a4[6] == 1)
    {
      unsigned int v22 = (2 * ((2863311531u * (unint64_t)(v13 + 2)) >> 32)) & 0xFFFFFFFC;
      if (!BytesPerRowOfPlane) {
        goto LABEL_23;
      }
    }
    else
    {
      unsigned int v22 = v13 << (a4[1] != 8);
      if (!BytesPerRowOfPlane) {
        goto LABEL_23;
      }
    }
    if ((BytesPerRowOfPlane & 0x3F) != 0 || v22 > BytesPerRowOfPlane)
    {
LABEL_23:
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v33 = AVE_Log_CheckConsole(3u);
        __uint64_t v34 = AVE_GetCurrTime();
        long long v35 = AVE_Log_GetLevelStr(4);
        if (v33)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid buffer stride 0x%x 0x%x\n", v34, 3, v35, "AVE_ImgBuf_VerifyUncompressed", 730, "stride != 0 && (stride & 0x3F) == 0 && stride >= neededStride", v21, v22);
          __uint64_t v34 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer stride 0x%x 0x%x", v34);
      }
      return 4294954394;
    }
    if (a4[3])
    {
      if ((a5 & 1) != 0
        || (int v23 = CVPixelBufferGetWidthOfPlane(a1, 1uLL),
            int v24 = CVPixelBufferGetHeightOfPlane(a1, 1uLL),
            int v25 = (int)a4[4] >> 1,
            size_t v26 = (extraColumnsOnRight >> v25) + v23 + (extraColumnsOnLeft >> v25),
            int v27 = (int)a4[5] >> 1,
            size_t v28 = (extraRowsOnBottom >> v27) + v24 + (extraRowsOnTop >> v27),
            a2 >> v25 <= v26)
        && (LODWORD(v13) = v26, a3 >> v27 <= v28))
      {
        unsigned int v29 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
        unsigned int v30 = v29;
        unsigned int v31 = (2 * v13) >> ((int)a4[4] >> 1);
        if (a4[6] == 1) {
          unsigned int v32 = (2 * ((2863311531u * (unint64_t)(v31 + 2)) >> 32)) & 0xFFFFFFFC;
        }
        else {
          unsigned int v32 = v31 << (a4[1] != 8);
        }
        if (!v29 || (v29 & 0x3F) != 0 || v32 > v29)
        {
          if (AVE_Log_CheckLevel(3u, 4))
          {
            int v46 = AVE_Log_CheckConsole(3u);
            __uint64_t v47 = AVE_GetCurrTime();
            long long v48 = AVE_Log_GetLevelStr(4);
            if (v46)
            {
              printf("%lld %d AVE %s: %s:%d %s | invalid buffer stride 0x%x 0x%x\n", v47, 3, v48, "AVE_ImgBuf_VerifyUncompressed", 773, "stride != 0 && (stride & 0x3F) == 0 && stride >= neededStride", v30, v32);
              __uint64_t v49 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
              syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer stride 0x%x 0x%x", v49);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer stride 0x%x 0x%x", v47);
            }
          }
          return 4294954394;
        }
        return 0;
      }
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v50 = AVE_Log_CheckConsole(3u);
        __uint64_t v37 = AVE_GetCurrTime();
        long long v38 = AVE_Log_GetLevelStr(4);
        if (v50)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d\n", v37, 3, v38, "AVE_ImgBuf_VerifyUncompressed", 763, "(width >= (videoWidth >> ((pFmt->iSubWidthC) >> 1))) && (height >= (videoHeight >> ((pFmt->iSubHeightC) >> 1)))", v26, v28, a2, a3);
          __uint64_t v51 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
LABEL_57:
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d", v51, 3);
          return 4294954394;
        }
        uint64_t v60 = a2;
        uint64_t v61 = a3;
        size_t v58 = v26;
        size_t v59 = v28;
        v52 = "(width >= (videoWidth >> ((pFmt->iSubWidthC) >> 1))) && (height >= (videoHeight >> ((pFmt->iSubHeightC) >> 1)))";
        uint64_t v53 = 763;
        goto LABEL_52;
      }
    }
    else
    {
      if ((a5 & 1) != 0
        || (size_t v39 = CVPixelBufferGetWidthOfPlane(a1, 1uLL),
            size_t v40 = CVPixelBufferGetHeightOfPlane(a1, 1uLL),
            !(v39 | v40)))
      {
        int v41 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
        if (v41)
        {
          if (AVE_Log_CheckLevel(3u, 4))
          {
            int v42 = AVE_Log_CheckConsole(3u);
            __uint64_t v43 = AVE_GetCurrTime();
            long long v44 = AVE_Log_GetLevelStr(4);
            if (v42)
            {
              printf("%lld %d AVE %s: %s:%d %s | invalid buffer stride %x\n", v43, 3, v44, "AVE_ImgBuf_VerifyUncompressed", 749, "stride == 0", v41);
              __uint64_t v43 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer stride %x", v43);
          }
          return 4294954394;
        }
        return 0;
      }
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v54 = AVE_Log_CheckConsole(3u);
        __uint64_t v37 = AVE_GetCurrTime();
        long long v38 = AVE_Log_GetLevelStr(4);
        if (v54)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d\n", v37, 3, v38, "AVE_ImgBuf_VerifyUncompressed", 743, "width == 0 && height == 0", v39, v40, a2, a3);
          __uint64_t v51 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
          goto LABEL_57;
        }
        uint64_t v60 = a2;
        uint64_t v61 = a3;
        size_t v58 = v39;
        size_t v59 = v40;
        v52 = "width == 0 && height == 0";
        uint64_t v53 = 743;
        goto LABEL_52;
      }
    }
    return 4294954394;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    int v36 = AVE_Log_CheckConsole(3u);
    __uint64_t v37 = AVE_GetCurrTime();
    long long v38 = AVE_Log_GetLevelStr(4);
    if (v36)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d\n", v37, 3, v38, "AVE_ImgBuf_VerifyUncompressed", 722, "width >= videoWidth && height >= videoHeight", v13, v19, a2, a3);
      __uint64_t v37 = AVE_GetCurrTime();
      uint64_t v60 = a2;
      uint64_t v61 = a3;
      size_t v58 = v13;
      size_t v59 = v19;
      uint64_t v56 = 722;
      v57 = "width >= videoWidth && height >= videoHeight";
      v55 = AVE_Log_GetLevelStr(4);
LABEL_53:
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d", v37, 3, v55, "AVE_ImgBuf_VerifyUncompressed", v56, v57, v58, v59, v60, v61);
      return 4294954394;
    }
    uint64_t v60 = a2;
    uint64_t v61 = a3;
    size_t v58 = v13;
    size_t v59 = v19;
    v52 = "width >= videoWidth && height >= videoHeight";
    uint64_t v53 = 722;
LABEL_52:
    uint64_t v56 = v53;
    v57 = v52;
    v55 = v38;
    goto LABEL_53;
  }
  return 4294954394;
}

uint64_t AVE_ImgBuf_VerifyHTPC(__CVBuffer *a1, _DWORD *a2)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t extraRowsOnBottom = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetIOSurface(a1);
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
  uint64_t BaseAddressOfCompressedTileHeaderRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
  uint64_t v5 = BaseAddressOfCompressedTileHeaderRegionOfPlane;
  if (!BaseAddressOfCompressedTileHeaderRegionOfPlane || (BaseAddressOfCompressedTileHeaderRegionOfPlane & 0x3F) != 0)
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      return 4294954394;
    }
    int v23 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (v23)
    {
      uint64_t v26 = 813;
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer header base address 0x%lx\n", CurrTime, 3, LevelStr, "AVE_ImgBuf_VerifyHTPC", 813, "baseAddr != 0 && (baseAddr & 0x3F) == 0", v5);
LABEL_21:
      __uint64_t CurrTime = AVE_GetCurrTime();
      uint64_t v63 = v5;
      uint64_t v61 = v26;
      size_t v59 = AVE_Log_GetLevelStr(4);
LABEL_31:
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer header base address 0x%lx", CurrTime, 3, v59, "AVE_ImgBuf_VerifyHTPC", v61, "baseAddr != 0 && (baseAddr & 0x3F) == 0", v63);
      return 4294954394;
    }
    uint64_t v63 = v5;
    uint64_t v35 = 813;
LABEL_30:
    uint64_t v61 = v35;
    size_t v59 = LevelStr;
    goto LABEL_31;
  }
  uint64_t BaseAddressOfCompressedTileDataRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
  unint64_t v7 = BaseAddressOfCompressedTileDataRegionOfPlane;
  if (!BaseAddressOfCompressedTileDataRegionOfPlane || (BaseAddressOfCompressedTileDataRegionOfPlane & 0x3F) != 0)
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      return 4294954394;
    }
    int v27 = AVE_Log_CheckConsole(3u);
    __uint64_t v28 = AVE_GetCurrTime();
    unsigned int v29 = AVE_Log_GetLevelStr(4);
    if (v27)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx\n", v28, 3, v29, "AVE_ImgBuf_VerifyHTPC", 817, "dataBaseAddr != 0 && (dataBaseAddr & 0x3F) == 0", v7);
LABEL_25:
      __uint64_t v30 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx", v30);
      return 4294954394;
    }
LABEL_48:
    syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx", v28);
    return 4294954394;
  }
  uint64_t BytesPerCompressedTileHeaderOfPlane = IOSurfaceGetBytesPerCompressedTileHeaderOfPlane();
  uint64_t WidthInCompressedTilesOfPlane = IOSurfaceGetWidthInCompressedTilesOfPlane();
  uint64_t HeightInCompressedTilesOfPlane = IOSurfaceGetHeightInCompressedTilesOfPlane();
  int WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  int HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  unsigned int v13 = extraColumnsOnLeft + WidthOfPlane + extraColumnsOnRight;
  unsigned int v14 = extraRowsOnTop + HeightOfPlane + extraRowsOnBottom;
  BOOL v15 = (v13 & 0xF) == 0;
  unsigned int v16 = v13 >> 4;
  if (v15) {
    int v17 = v16;
  }
  else {
    int v17 = v16 + 1;
  }
  if ((v14 & 7) != 0) {
    int v18 = (v14 >> 3) + 1;
  }
  else {
    int v18 = v14 >> 3;
  }
  if (v17 != WidthInCompressedTilesOfPlane || v18 != HeightInCompressedTilesOfPlane)
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      return 4294954394;
    }
    int v31 = AVE_Log_CheckConsole(3u);
    __uint64_t v32 = AVE_GetCurrTime();
    int v33 = AVE_Log_GetLevelStr(4);
    if (v31)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d\n", v32, 3, v33, "AVE_ImgBuf_VerifyHTPC", 841, "width == neededWidth && height == neededHeight", WidthInCompressedTilesOfPlane, HeightInCompressedTilesOfPlane, v17, v18);
      __uint64_t v34 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d", v34, 3);
      return 4294954394;
    }
    goto LABEL_49;
  }
  if ((unint64_t)(WidthInCompressedTilesOfPlane
                                      * BytesPerCompressedTileHeaderOfPlane
                                      * HeightInCompressedTilesOfPlane)
     + v5 > v7)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v19 = AVE_Log_CheckConsole(3u);
      __uint64_t v20 = AVE_GetCurrTime();
      int v21 = AVE_Log_GetLevelStr(4);
      if (v19)
      {
        printf("%lld %d AVE %s: %s:%d %s | invalid buffer base address/size 0x%lx 0x%lx %d %d %d\n", v20, 3, v21, "AVE_ImgBuf_VerifyHTPC", 845, "dataBaseAddr >= (baseAddr + width * height * size)", v7, v5, WidthInCompressedTilesOfPlane, HeightInCompressedTilesOfPlane, BytesPerCompressedTileHeaderOfPlane);
        __uint64_t v20 = AVE_GetCurrTime();
        unsigned int v22 = AVE_Log_GetLevelStr(4);
        uint64_t v66 = HeightInCompressedTilesOfPlane;
        uint64_t v67 = BytesPerCompressedTileHeaderOfPlane;
        uint64_t v64 = v5;
        uint64_t v65 = WidthInCompressedTilesOfPlane;
        unint64_t v62 = v7;
        uint64_t v60 = 845;
LABEL_17:
        size_t v58 = v22;
LABEL_57:
        syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer base address/size 0x%lx 0x%lx %d %d %d", v20, 3, v58, "AVE_ImgBuf_VerifyHTPC", v60, "dataBaseAddr >= (baseAddr + width * height * size)", v62, v64, v65, v66, v67);
        return 4294954394;
      }
      uint64_t v66 = HeightInCompressedTilesOfPlane;
      uint64_t v67 = BytesPerCompressedTileHeaderOfPlane;
      uint64_t v64 = v5;
      uint64_t v65 = WidthInCompressedTilesOfPlane;
      unint64_t v62 = v7;
      uint64_t v52 = 845;
      goto LABEL_56;
    }
    return 4294954394;
  }
  if (a2[3])
  {
    uint64_t v36 = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
    uint64_t v5 = v36;
    if (v36 && (v36 & 0x3F) == 0)
    {
      uint64_t v37 = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
      unint64_t v38 = v37;
      if (v37 && (v37 & 0x3F) == 0)
      {
        uint64_t v39 = IOSurfaceGetBytesPerCompressedTileHeaderOfPlane();
        uint64_t v40 = IOSurfaceGetWidthInCompressedTilesOfPlane();
        uint64_t v41 = IOSurfaceGetHeightInCompressedTilesOfPlane();
        int v42 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
        int v43 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
        unsigned int v44 = (extraColumnsOnLeft >> ((int)a2[4] >> 1))
            + v42
            + (extraColumnsOnRight >> ((int)a2[4] >> 1));
        unsigned int v45 = (extraRowsOnTop >> ((int)a2[5] >> 1))
            + v43
            + (extraRowsOnBottom >> ((int)a2[5] >> 1));
        BOOL v15 = (v44 & 7) == 0;
        unsigned int v46 = v44 >> 3;
        if (v15) {
          unsigned int v47 = v46;
        }
        else {
          unsigned int v47 = v46 + 1;
        }
        if ((v45 & 7) != 0) {
          int v48 = (v45 >> 3) + 1;
        }
        else {
          int v48 = v45 >> 3;
        }
        if (v47 == v40)
        {
          if ((unint64_t)(v40 * v39 * v41) + v5 > v38)
          {
            if (AVE_Log_CheckLevel(3u, 4))
            {
              int v49 = AVE_Log_CheckConsole(3u);
              __uint64_t v20 = AVE_GetCurrTime();
              int v21 = AVE_Log_GetLevelStr(4);
              if (v49)
              {
                printf("%lld %d AVE %s: %s:%d %s | invalid buffer base address/size 0x%lx 0x%lx %d %d %d\n", v20, 3, v21, "AVE_ImgBuf_VerifyHTPC", 893, "dataBaseAddr >= (baseAddr + width * height * size)", v38, v5, v40, v41, v39);
                __uint64_t v20 = AVE_GetCurrTime();
                unsigned int v22 = AVE_Log_GetLevelStr(4);
                uint64_t v66 = v41;
                uint64_t v67 = v39;
                uint64_t v64 = v5;
                uint64_t v65 = v40;
                unint64_t v62 = v38;
                uint64_t v60 = 893;
                goto LABEL_17;
              }
              uint64_t v66 = v41;
              uint64_t v67 = v39;
              uint64_t v64 = v5;
              uint64_t v65 = v40;
              unint64_t v62 = v38;
              uint64_t v52 = 893;
LABEL_56:
              uint64_t v60 = v52;
              size_t v58 = v21;
              goto LABEL_57;
            }
            return 4294954394;
          }
          return 0;
        }
        if (!AVE_Log_CheckLevel(3u, 4)) {
          return 4294954394;
        }
        int v55 = AVE_Log_CheckConsole(3u);
        __uint64_t v32 = AVE_GetCurrTime();
        uint64_t v56 = AVE_Log_GetLevelStr(4);
        if (v55)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d\n", v32, 3, v56, "AVE_ImgBuf_VerifyHTPC", 888, "width == neededWidth", v40, v41, v47, v48);
          __uint64_t v57 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d", v57, 3);
          return 4294954394;
        }
LABEL_49:
        syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d", v32, 3);
        return 4294954394;
      }
      if (!AVE_Log_CheckLevel(3u, 4)) {
        return 4294954394;
      }
      int v53 = AVE_Log_CheckConsole(3u);
      __uint64_t v28 = AVE_GetCurrTime();
      int v54 = AVE_Log_GetLevelStr(4);
      if (v53)
      {
        printf("%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx\n", v28, 3, v54, "AVE_ImgBuf_VerifyHTPC", 858, "dataBaseAddr != 0 && (dataBaseAddr & 0x3F) == 0", v38);
        goto LABEL_25;
      }
      goto LABEL_48;
    }
    if (!AVE_Log_CheckLevel(3u, 4)) {
      return 4294954394;
    }
    int v51 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (v51)
    {
      uint64_t v26 = 854;
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer header base address 0x%lx\n", CurrTime, 3, LevelStr, "AVE_ImgBuf_VerifyHTPC", 854, "baseAddr != 0 && (baseAddr & 0x3F) == 0", v5);
      goto LABEL_21;
    }
    uint64_t v63 = v5;
    uint64_t v35 = 854;
    goto LABEL_30;
  }
  return 0;
}

uint64_t AVE_ImgBuf_VerifyInterchange(__CVBuffer *a1, _DWORD *a2)
{
  size_t extraColumnsOnLeft = 0;
  size_t extraRowsOnTop = 0;
  size_t extraColumnsOnRight = 0;
  size_t extraRowsOnBottom = 0;
  CVPixelBufferGetIOSurface(a1);
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
  uint64_t BaseAddressOfCompressedTileHeaderRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
  uint64_t v5 = BaseAddressOfCompressedTileHeaderRegionOfPlane;
  if (!BaseAddressOfCompressedTileHeaderRegionOfPlane || (BaseAddressOfCompressedTileHeaderRegionOfPlane & 0x3F) != 0)
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      return 4294954394;
    }
    int v32 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (v32)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer header base address 0x%lx\n", CurrTime, 3, LevelStr, "AVE_ImgBuf_VerifyInterchange", 933, "hdrBaseAddr != 0 && (hdrBaseAddr & 0x3F) == 0", v5);
LABEL_29:
      __uint64_t v35 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer header base address 0x%lx", v35);
      return 4294954394;
    }
LABEL_38:
    syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer header base address 0x%lx", CurrTime);
    return 4294954394;
  }
  uint64_t BaseAddressOfCompressedTileDataRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
  uint64_t v7 = BaseAddressOfCompressedTileDataRegionOfPlane;
  if (!BaseAddressOfCompressedTileDataRegionOfPlane || (BaseAddressOfCompressedTileDataRegionOfPlane & 0x3F) != 0)
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      return 4294954394;
    }
    int v36 = AVE_Log_CheckConsole(3u);
    __uint64_t v37 = AVE_GetCurrTime();
    unint64_t v38 = AVE_Log_GetLevelStr(4);
    if (v36)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx\n", v37, 3, v38, "AVE_ImgBuf_VerifyInterchange", 937, "dataBaseAddr != 0 && (dataBaseAddr & 0x3F) == 0", v7);
LABEL_33:
      __uint64_t v39 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx", v39);
      return 4294954394;
    }
LABEL_39:
    syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx", v37);
    return 4294954394;
  }
  int WidthInCompressedTilesOfPlane = IOSurfaceGetWidthInCompressedTilesOfPlane();
  int HeightInCompressedTilesOfPlane = IOSurfaceGetHeightInCompressedTilesOfPlane();
  int WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  int HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  unsigned int v12 = extraColumnsOnLeft + WidthOfPlane + extraColumnsOnRight;
  unsigned int v13 = extraRowsOnTop + HeightOfPlane + extraRowsOnBottom;
  BOOL v14 = (v12 & 0x1F) == 0;
  unsigned int v15 = v12 >> 5;
  if (v14) {
    int v16 = v15;
  }
  else {
    int v16 = v15 + 1;
  }
  if ((v13 & 0x1F) != 0) {
    int v17 = (v13 >> 5) + 1;
  }
  else {
    int v17 = v13 >> 5;
  }
  if (v16 != WidthInCompressedTilesOfPlane || v17 != HeightInCompressedTilesOfPlane)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v40 = AVE_Log_CheckConsole(3u);
      __uint64_t v41 = AVE_GetCurrTime();
      int v42 = AVE_Log_GetLevelStr(4);
      if (v40)
      {
        printf("%lld %d AVE %s: %s:%d %s | invalid Luma buffer dimension %d %d %d %d.\n", v41, 3, v42, "AVE_ImgBuf_VerifyInterchange", 957, "width == neededWidth && height == neededHeight", WidthInCompressedTilesOfPlane, HeightInCompressedTilesOfPlane, v16, v17);
        __uint64_t v41 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid Luma buffer dimension %d %d %d %d.", v41, 3);
    }
    return 4294954394;
  }
  if (!a2[3]) {
    return 0;
  }
  uint64_t v18 = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
  uint64_t v19 = v18;
  if (!v18 || (v18 & 0x3F) != 0)
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      return 4294954394;
    }
    int v43 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    unsigned int v44 = AVE_Log_GetLevelStr(4);
    if (v43)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer header base address 0x%lx\n", CurrTime, 3, v44, "AVE_ImgBuf_VerifyInterchange", 966, "hdrBaseAddr != 0 && (hdrBaseAddr & 0x3F) == 0", v19);
      goto LABEL_29;
    }
    goto LABEL_38;
  }
  uint64_t v20 = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
  uint64_t v21 = v20;
  if (!v20 || (v20 & 0x3F) != 0)
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      return 4294954394;
    }
    int v45 = AVE_Log_CheckConsole(3u);
    __uint64_t v37 = AVE_GetCurrTime();
    unsigned int v46 = AVE_Log_GetLevelStr(4);
    if (v45)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx\n", v37, 3, v46, "AVE_ImgBuf_VerifyInterchange", 970, "dataBaseAddr != 0 && (dataBaseAddr & 0x3F) == 0", v21);
      goto LABEL_33;
    }
    goto LABEL_39;
  }
  int v22 = IOSurfaceGetWidthInCompressedTilesOfPlane();
  int v23 = IOSurfaceGetHeightInCompressedTilesOfPlane();
  int v24 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  int v25 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  unsigned int v26 = (extraColumnsOnLeft >> ((int)a2[4] >> 1))
      + v24
      + (extraColumnsOnRight >> ((int)a2[4] >> 1));
  unsigned int v27 = (extraRowsOnTop >> ((int)a2[5] >> 1))
      + v25
      + (extraRowsOnBottom >> ((int)a2[5] >> 1));
  BOOL v14 = (v26 & 0xF) == 0;
  unsigned int v28 = v26 >> 4;
  if (v14) {
    unsigned int v29 = v28;
  }
  else {
    unsigned int v29 = v28 + 1;
  }
  if ((v27 & 0xF) != 0) {
    int v30 = (v27 >> 4) + 1;
  }
  else {
    int v30 = v27 >> 4;
  }
  if (v29 == v22) {
    return 0;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    int v47 = AVE_Log_CheckConsole(3u);
    __uint64_t v48 = AVE_GetCurrTime();
    int v49 = AVE_Log_GetLevelStr(4);
    if (v47)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid Chroma buffer dimension %d %d %d %d\n", v48, 3, v49, "AVE_ImgBuf_VerifyInterchange", 996, "width == neededWidth", v22, v23, v29, v30);
      __uint64_t v48 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | invalid Chroma buffer dimension %d %d %d %d", v48, 3);
  }
  return 4294954394;
}

void AVE_ImgBuf_Verify()
{
  int v0 = 0;
  AVE_PixelFmt_GetNumberOfTypes();
  operator new[]();
}

uint64_t AVE_VerifyImageBuffer(unsigned int *a1, CVPixelBufferRef *a2, CVPixelBufferPoolRef *a3)
{
  CVPixelBufferRef pixelBufferOut = 0;
  CVPixelBufferPoolRef poolOut = 0;
  if (!a3 || !*a2)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v14 = AVE_Log_CheckConsole(3u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %p\n", CurrTime, 3, LevelStr, "AVE_VerifyImageBuffer", 1100, "pImgBuf != __null && ppImgBufPool != __null", *a2, a3);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %p", CurrTime, 3, LevelStr, "AVE_VerifyImageBuffer", 1100, "pImgBuf != __null && ppImgBufPool != __null", *a2, a3);
    }
    goto LABEL_60;
  }
  CVPixelBufferRetain(*a2);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(*a2);
  uint64_t v7 = (int *)AVE_PixelFmt_FindByType(PixelFormatType);
  if (!v7)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v17 = AVE_Log_CheckConsole(3u);
      __uint64_t v18 = AVE_GetCurrTime();
      uint64_t v19 = AVE_Log_GetLevelStr(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | pixel format is not supported %d\n", v18, 3, v19, "AVE_VerifyImageBuffer", 1107, "pPixelFmt != __null", PixelFormatType);
        __uint64_t v18 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | pixel format is not supported %d", v18);
    }
    goto LABEL_60;
  }
  uint64_t v8 = (uint64_t)v7;
  unsigned int v9 = AVE_EdgeReplication_DetermineMode(*a2, v7, a1[3], *((unsigned __int8 *)a1 + 24), *((unsigned __int8 *)a1 + 52), a1[14], a1[7], a1 + 8, a1[12]);
  if (AVE_Log_CheckLevel(0xCu, 7))
  {
    int v10 = AVE_Log_CheckConsole(0xCu);
    __uint64_t v11 = AVE_GetCurrTime();
    unsigned int v12 = AVE_Log_GetLevelStr(7);
    if (v10)
    {
      printf("%lld %d AVE %s: PixelFormat %x | %d %d (%d %d %d) %d %d\n", v11, 12, v12, PixelFormatType, *(_DWORD *)(v8 + 4), *(_DWORD *)(v8 + 8), *(_DWORD *)(v8 + 12), *(_DWORD *)(v8 + 16), *(_DWORD *)(v8 + 20), *(_DWORD *)(v8 + 24), *(_DWORD *)(v8 + 28));
      __uint64_t v13 = AVE_GetCurrTime();
      v78 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: PixelFormat %x | %d %d (%d %d %d) %d %d", v13, 12, v78);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: PixelFormat %x | %d %d (%d %d %d) %d %d", v11, 12, v12);
    }
  }
  if (AVE_Log_CheckLevel(0xCu, 7))
  {
    int v20 = AVE_Log_CheckConsole(0xCu);
    __uint64_t v21 = AVE_GetCurrTime();
    int v22 = AVE_Log_GetLevelStr(7);
    int WidthOfPlane = CVPixelBufferGetWidthOfPlane(*a2, 0);
    int HeightOfPlane = CVPixelBufferGetHeightOfPlane(*a2, 0);
    if (v20)
    {
      printf("%lld %d AVE %s: Pixel Buffer Width %d Height %d\n", v21, 12, v22, WidthOfPlane, HeightOfPlane);
      __uint64_t v25 = AVE_GetCurrTime();
      unsigned int v26 = AVE_Log_GetLevelStr(7);
      int v27 = CVPixelBufferGetWidthOfPlane(*a2, 0);
      int v79 = CVPixelBufferGetHeightOfPlane(*a2, 0);
      syslog(3, "%lld %d AVE %s: Pixel Buffer Width %d Height %d", v25, 12, v26, v27, v79);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Pixel Buffer Width %d Height %d", v21, 12, v22, WidthOfPlane, HeightOfPlane);
    }
  }
  if ((v9 & 2) == 0) {
    AVE_ImgBuf_Verify();
  }
  unsigned int v28 = *a3;
  if (!*a3)
  {
    int v35 = CVPixelBufferGetWidthOfPlane(*a2, 0);
    int v36 = CVPixelBufferGetHeightOfPlane(*a2, 0);
    uint64_t v37 = AVE_ImgBuf_CreatePool(a1[3], a1[2], a1[4], a1[5], v35, v36, *a1, a1[1], PixelFormatType, &poolOut);
    if (v37)
    {
      uint64_t v38 = v37;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v39 = AVE_Log_CheckConsole(3u);
        __uint64_t v40 = AVE_GetCurrTime();
        __uint64_t v41 = AVE_Log_GetLevelStr(4);
        if (v39)
        {
          printf("%lld %d AVE %s: %s:%d %s | failed to create a buffer pool %d\n", v40, 3, v41, "AVE_VerifyImageBuffer", 1135, "rc == noErr", v38);
          __uint64_t v40 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create a buffer pool %d", v40);
      }
      goto LABEL_61;
    }
    unsigned int v28 = *a3;
  }
  if (v28) {
    unsigned int v29 = v28;
  }
  else {
    unsigned int v29 = poolOut;
  }
  CVReturn v30 = CVPixelBufferPoolCreatePixelBuffer(0, v29, &pixelBufferOut);
  if (v30)
  {
    CVReturn v31 = v30;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v32 = AVE_Log_CheckConsole(3u);
      __uint64_t v33 = AVE_GetCurrTime();
      __uint64_t v34 = AVE_Log_GetLevelStr(4);
      if (v32)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to crete pixel buffer from a pool %d\n", v33, 3, v34, "AVE_VerifyImageBuffer", 1141, "cvrc == kCVReturnSuccess", v31);
        __uint64_t v33 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to crete pixel buffer from a pool %d", v33);
    }
LABEL_60:
    uint64_t v38 = 4294954394;
LABEL_61:
    if (pixelBufferOut)
    {
      CVPixelBufferRelease(pixelBufferOut);
      CVPixelBufferRef pixelBufferOut = 0;
    }
    if (poolOut)
    {
      CFRelease(poolOut);
      CVPixelBufferPoolRef poolOut = 0;
    }
    goto LABEL_65;
  }
  AVE_ImgBuf_Copy(*a2, pixelBufferOut);
  CVPixelBufferRelease(*a2);
  int v42 = pixelBufferOut;
  *a2 = pixelBufferOut;
  CVPixelBufferRef pixelBufferOut = 0;
  unsigned int v43 = v9 & 2;
  AVE_EdgeReplication_Fill(v42, v9, v8);
  if (AVE_Log_CheckLevel(0xCu, 7))
  {
    int v44 = AVE_Log_CheckConsole(0xCu);
    __uint64_t v82 = AVE_GetCurrTime();
    int v45 = AVE_Log_GetLevelStr(7);
    uint64_t v46 = a1[1];
    uint64_t v80 = *a1;
    uint64_t v48 = a1[2];
    uint64_t v47 = a1[3];
    uint64_t v49 = a1[4];
    uint64_t v50 = a1[5];
    uint64_t v51 = *((unsigned __int8 *)a1 + 24);
    if (v44)
    {
      printf("%lld %d AVE %s: VIB IN %s:%d | %d %d | %d %d 0x%x %d | %d %d %d %d %d || %d %d | %d %d %d %d | %d %d | %d %d | %d %d %d | %x\n", v82, 12, v45, "AVE_VerifyImageBuffer", 1165, v80, v46, v47, v48, v49, v50, v51, a1[7], a1[12], *((unsigned __int8 *)a1 + 52), a1[14], a1[26], a1[27],
        a1[32],
        a1[33],
        a1[34],
        a1[35],
        a1[30],
        a1[31],
        a1[28],
        a1[29],
        *((unsigned __int8 *)a1 + 146),
        *((unsigned __int8 *)a1 + 144),
        *((unsigned __int8 *)a1 + 145),
        v9);
      __uint64_t v83 = AVE_GetCurrTime();
      v81 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: VIB IN %s:%d | %d %d | %d %d 0x%x %d | %d %d %d %d %d || %d %d | %d %d %d %d | %d %d | %d %d | %d %d %d | %x", v83, 12, v81, "AVE_VerifyImageBuffer", 1165, *a1, a1[1], a1[3], a1[2], a1[4], a1[5], *((unsigned __int8 *)a1 + 24));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: VIB IN %s:%d | %d %d | %d %d 0x%x %d | %d %d %d %d %d || %d %d | %d %d %d %d | %d %d | %d %d | %d %d %d | %x", v82, 12, v45, "AVE_VerifyImageBuffer", 1165, v80, v46, v47, v48, v49, v50, v51);
    }
    unsigned int v43 = v9 & 2;
  }
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t extraRowsOnBottom = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(*a2, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
  int v52 = CVPixelBufferGetWidthOfPlane(*a2, 0);
  int v53 = CVPixelBufferGetHeightOfPlane(*a2, 0);
  unsigned int v54 = extraColumnsOnLeft;
  unsigned int v55 = extraColumnsOnRight;
  unsigned int v56 = extraColumnsOnLeft + extraColumnsOnRight + v52;
  unsigned int v57 = extraRowsOnTop;
  unsigned int v58 = extraRowsOnBottom;
  unsigned int v59 = extraRowsOnTop + extraRowsOnBottom + v53;
  long long v60 = *(_OWORD *)(v8 + 28);
  long long v61 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)(a1 + 15) = *(_OWORD *)v8;
  *(_OWORD *)(a1 + 19) = v61;
  *(_OWORD *)(a1 + 22) = v60;
  a1[26] = v56;
  a1[27] = v59;
  a1[32] = v54;
  a1[33] = v55;
  a1[34] = v57;
  a1[35] = v58;
  a1[30] = CVPixelBufferGetBytesPerRowOfPlane(*a2, 0);
  unsigned int BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(*a2, 1uLL);
  a1[31] = BytesPerRowOfPlane;
  a1[28] = a1[30];
  if (*(_DWORD *)(v8 + 12)) {
    unsigned int v63 = BytesPerRowOfPlane;
  }
  else {
    unsigned int v63 = 0;
  }
  a1[29] = v63;
  char v64 = v9 & 1;
  if ((v9 & 0x10) != 0) {
    char v64 = 1;
  }
  *((unsigned char *)a1 + 146) = v64;
  *((unsigned char *)a1 + 144) = v43 >> 1;
  if ((~v9 & 0x500) != 0) {
    char v65 = 0;
  }
  else {
    char v65 = 5;
  }
  if ((~v9 & 0x50000) == 0) {
    v65 |= 0xAu;
  }
  *((unsigned char *)a1 + 145) = v65;
  if (poolOut) {
    *a3 = poolOut;
  }
  if (AVE_Log_CheckLevel(0xCu, 7))
  {
    int v66 = AVE_Log_CheckConsole(0xCu);
    __uint64_t v84 = AVE_GetCurrTime();
    uint64_t v67 = AVE_Log_GetLevelStr(7);
    uint64_t v68 = *a1;
    uint64_t v69 = a1[1];
    uint64_t v71 = a1[2];
    uint64_t v70 = a1[3];
    uint64_t v72 = a1[4];
    uint64_t v73 = a1[5];
    uint64_t v74 = *((unsigned __int8 *)a1 + 24);
    if (v66)
    {
      printf("%lld %d AVE %s: VIB OUT %s:%d | %d %d | %d %d 0x%x %d | %d %d %d %d %d || %d %d | %d %d %d %d | %d %d | %d %d | %d %d %d | %x\n", v84, 12, v67, "AVE_VerifyImageBuffer", 1240, v68, v69, v70, v71, v72, v73, v74, a1[7], a1[12], *((unsigned __int8 *)a1 + 52), a1[14], a1[26], a1[27],
        a1[32],
        a1[33],
        a1[34],
        a1[35],
        a1[30],
        a1[31],
        a1[28],
        a1[29],
        *((unsigned __int8 *)a1 + 146),
        *((unsigned __int8 *)a1 + 144),
        *((unsigned __int8 *)a1 + 145),
        v9);
      __uint64_t v75 = AVE_GetCurrTime();
      v76 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: VIB OUT %s:%d | %d %d | %d %d 0x%x %d | %d %d %d %d %d || %d %d | %d %d %d %d | %d %d | %d %d | %d %d %d | %x", v75, 12, v76, "AVE_VerifyImageBuffer", 1240, *a1, a1[1], a1[3], a1[2], a1[4], a1[5], *((unsigned __int8 *)a1 + 24));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: VIB OUT %s:%d | %d %d | %d %d 0x%x %d | %d %d %d %d %d || %d %d | %d %d %d %d | %d %d | %d %d | %d %d %d | %x", v84, 12, v67, "AVE_VerifyImageBuffer", 1240, v68, v69, v70, v71, v72, v73, v74);
    }
  }
  uint64_t v38 = 0;
LABEL_65:
  if (!*((unsigned char *)a1 + 144)) {
    CVPixelBufferRelease(*a2);
  }
  return v38;
}

uint64_t AVE_UpdatePixelBufferDict(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, uint64_t a12)
{
  if (a10)
  {
    uint64_t DictFromProfile = AVE_PixelBufAttr_CreateDictFromProfile();
    if (DictFromProfile)
    {
      uint64_t v13 = DictFromProfile;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v14 = AVE_Log_CheckConsole(3u);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v14)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: %s:%d AVE_PixelBufAttr_CreateDictFromProfile failed.\n", CurrTime, 3, LevelStr, "AVE_UpdatePixelBufferDict", 1325, "rc == noErr", "AVE_UpdatePixelBufferDict", 1325);
          __uint64_t CurrTime = AVE_GetCurrTime();
          uint64_t v32 = 1325;
          uint64_t v31 = 1325;
          unsigned int v29 = AVE_Log_GetLevelStr(4);
        }
        else
        {
          uint64_t v32 = 1325;
          uint64_t v31 = 1325;
          unsigned int v29 = LevelStr;
        }
        int v17 = "%lld %d AVE %s: %s:%d %s | FIG: %s:%d AVE_PixelBufAttr_CreateDictFromProfile failed.";
LABEL_22:
        syslog(3, v17, CurrTime, 3, v29, "AVE_UpdatePixelBufferDict", v31, "rc == noErr", "AVE_UpdatePixelBufferDict", v32);
        return v13;
      }
      return v13;
    }
LABEL_12:
    if (a12 == 1)
    {
      if (AVE_Log_CheckLevel(0xCu, 7))
      {
        int v24 = AVE_Log_CheckConsole(0xCu);
        __uint64_t v25 = AVE_GetCurrTime();
        unsigned int v26 = AVE_Log_GetLevelStr(7);
        if (v24)
        {
          printf("%lld %d AVE %s: %s:%d session = FIGINTERNALSESSIONMARK\n", v25, 12, v26, "AVE_UpdatePixelBufferDict", 1333);
          __uint64_t v27 = AVE_GetCurrTime();
          CVReturn v30 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: %s:%d session = FIGINTERNALSESSIONMARK", v27, 12, v30, "AVE_UpdatePixelBufferDict", 1333);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d session = FIGINTERNALSESSIONMARK", v25, 12, v26, "AVE_UpdatePixelBufferDict", 1333);
        }
      }
      return 0;
    }
    else
    {
      uint64_t v13 = VTEncoderSessionSetPixelBufferAttributes();
      if (v13 && AVE_Log_CheckLevel(3u, 4))
      {
        int v21 = AVE_Log_CheckConsole(3u);
        __uint64_t v22 = AVE_GetCurrTime();
        int v23 = AVE_Log_GetLevelStr(4);
        if (v21)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: VTEncoderSessionSetPixelBufferAttributes failed.\n", v22, 3, v23, "AVE_UpdatePixelBufferDict", 1342, "rc == noErr");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTEncoderSessionSetPixelBufferAttributes failed.");
      }
    }
    return v13;
  }
  uint64_t Dict = AVE_PixelBufAttr_CreateDict();
  if (!Dict) {
    goto LABEL_12;
  }
  uint64_t v13 = Dict;
  if (AVE_Log_CheckLevel(3u, 4))
  {
    int v19 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    int v20 = AVE_Log_GetLevelStr(4);
    if (v19)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: %s:%d AVE_PixelBufAttr_CreateDict failed.\n", CurrTime, 3, v20, "AVE_UpdatePixelBufferDict", 1315, "rc == noErr", "AVE_UpdatePixelBufferDict", 1315);
      __uint64_t CurrTime = AVE_GetCurrTime();
      uint64_t v32 = 1315;
      uint64_t v31 = 1315;
      unsigned int v29 = AVE_Log_GetLevelStr(4);
    }
    else
    {
      uint64_t v32 = 1315;
      uint64_t v31 = 1315;
      unsigned int v29 = v20;
    }
    int v17 = "%lld %d AVE %s: %s:%d %s | FIG: %s:%d AVE_PixelBufAttr_CreateDict failed.";
    goto LABEL_22;
  }
  return v13;
}

uint64_t CopySPSPPSHeader(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, unsigned int *a4, int a5)
{
  if (!a1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v11 = AVE_Log_CheckConsole(3u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: in NULL\n", CurrTime, 3, LevelStr, "CopySPSPPSHeader", 185, "in != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: in NULL");
    }
    goto LABEL_61;
  }
  if (!a2)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v14 = AVE_Log_CheckConsole(3u);
      __uint64_t v15 = AVE_GetCurrTime();
      int v16 = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: out NULL\n", v15, 3, v16, "CopySPSPPSHeader", 186, "out != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: out NULL");
    }
    goto LABEL_61;
  }
  uint64_t v5 = a3;
  if (a3)
  {
    int v66 = 0;
    v65[0] = (int32x2_t)(bswap32(*(_DWORD *)a1) | 0x2000000000);
    v65[1] = (int32x2_t)(a1 + 4);
    v64[1] = a2;
    v64[0] = 0x2000000000;
    v64[2] = 0xFFFFFFFF00000000;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      int v7 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v8 = AVE_GetCurrTime();
      unsigned int v9 = AVE_Log_GetLevelStr(7);
      if (v7)
      {
        printf("%lld %d AVE %s: H264 - CopySPSPPSHeader: buffsize %d\n", v8, 221, v9, v5);
        __uint64_t v10 = AVE_GetCurrTime();
        unsigned int v57 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: buffsize %d", v10, 221, v57, v5);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: buffsize %d", v8, 221, v9, v5);
      }
    }
    unsigned int v21 = 0;
    int v22 = 0;
    int v23 = 0;
    uint64_t v63 = v5;
    unsigned int v24 = 1;
    do
    {
      unsigned int v25 = flushBitstream(v65);
      int v26 = v23 + 1;
      writeBitstream((int *)v64, v25, 8u);
      int v22 = v25 | (v22 << 8);
      if (AVE_Log_CheckLevel(0xDDu, 7))
      {
        int v27 = AVE_Log_CheckConsole(0xDDu);
        __uint64_t v28 = AVE_GetCurrTime();
        unsigned int v29 = AVE_Log_GetLevelStr(7);
        if (v27)
        {
          printf("%lld %d AVE %s: H264 - CopySPSPPSHeader: startcode %x startcodeCount %d bytesRead %d temp %x\n", v28, 221, v29, v22, v21, v23 + 1, v25);
          __uint64_t v30 = AVE_GetCurrTime();
          unsigned int v59 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: startcode %x startcodeCount %d bytesRead %d temp %x", v30, 221, v59, v22, v21, v23 + 1, v25);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: startcode %x startcodeCount %d bytesRead %d temp %x", v28, 221, v29, v22, v21, v23 + 1, v25);
        }
        uint64_t v5 = v63;
      }
      if (v22 == 1)
      {
        if (v21 == 1) {
          a4[1] = v23 - 3;
        }
        if (v21 == v24 + 1)
        {
          unsigned int v31 = v23 - 3;
          a4[v21] = v23 - 3;
          if (v24)
          {
            uint64_t v32 = a4 + 1;
            uint64_t v33 = v24;
            do
            {
              int v34 = *v32++;
              v31 -= v34;
              a4[v21] = v31;
              --v33;
            }
            while (v33);
          }
          unsigned int v24 = v21;
        }
        if (AVE_Log_CheckLevel(0xDDu, 7))
        {
          int v35 = AVE_Log_CheckConsole(0xDDu);
          __uint64_t v36 = AVE_GetCurrTime();
          uint64_t v37 = AVE_Log_GetLevelStr(7);
          if (v35)
          {
            printf("%lld %d AVE %s: H264 - CopySPSPPSHeader: startcode %x = H264VIDEOENCODER_STARTCODE startcodeCount %d bytesRead %d expectedPPSs %d\n", v36, 221, v37, 1, v21 + 1, v23 + 1, v24);
            __uint64_t v38 = AVE_GetCurrTime();
            long long v60 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: startcode %x = H264VIDEOENCODER_STARTCODE startcodeCount %d bytesRead %d expectedPPSs %d", v38, 221, v60, 1, v21 + 1, v26, v24);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: startcode %x = H264VIDEOENCODER_STARTCODE startcodeCount %d bytesRead %d expectedPPSs %d", v36, 221, v37, 1, v21 + 1, v23 + 1, v24);
          }
          ++v21;
          uint64_t v5 = v63;
        }
        else
        {
          ++v21;
        }
      }
      ++v23;
    }
    while (v26 != v5);
    if (v21 == v24 + 1)
    {
      a4[v21] = v5;
      if (v24)
      {
        int v39 = a4 + 1;
        unsigned int v40 = v5;
        uint64_t v41 = v24;
        do
        {
          int v42 = *v39++;
          v40 -= v42;
          a4[v21] = v40;
          --v41;
        }
        while (v41);
      }
      if (v24 == a5)
      {
        closeWriteBitstream((uint64_t)v64);
        if (AVE_Log_CheckLevel(0xDDu, 7))
        {
          int v43 = AVE_Log_CheckConsole(0xDDu);
          __uint64_t v44 = AVE_GetCurrTime();
          int v45 = AVE_Log_GetLevelStr(7);
          if (v43)
          {
            printf("%lld %d AVE %s: H264 - CopySPSPPSHeader: SPSPPSSizes[VPS] %d, SPSPPSSizes[SPS] %d, SPSPPSSizes[PPS1] %d, SPSPPSSizes[PPS2] %d\n", v44, 221, v45, *a4, a4[1], a4[2], a4[3]);
            __uint64_t v44 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(7);
          }
          syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: SPSPPSSizes[VPS] %d, SPSPPSSizes[SPS] %d, SPSPPSSizes[PPS1] %d, SPSPPSSizes[PPS2] %d", v44);
        }
        goto LABEL_62;
      }
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v49 = AVE_Log_CheckConsole(3u);
        __uint64_t v50 = AVE_GetCurrTime();
        uint64_t v51 = AVE_Log_GetLevelStr(4);
        if (v49)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: expectedPPSs == %d, i32PPSsCount = %d\n", v50, 3, v51, "CopySPSPPSHeader", 245, "(expectedPPSs == i32PPSsCount)", v21, a5);
          __uint64_t v50 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: expectedPPSs == %d, i32PPSsCount = %d", v50);
      }
    }
    else if (AVE_Log_CheckLevel(3u, 4))
    {
      int v46 = AVE_Log_CheckConsole(3u);
      __uint64_t v47 = AVE_GetCurrTime();
      uint64_t v48 = AVE_Log_GetLevelStr(4);
      if (v46)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: startCodeCount == %d\n", v47, 3, v48, "CopySPSPPSHeader", 237, "(startCodeCount == expectedStartCodes)", v21);
        __uint64_t v47 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: startCodeCount == %d", v47);
    }
LABEL_61:
    uint64_t v5 = 0;
LABEL_62:
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      int v52 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v53 = AVE_GetCurrTime();
      unsigned int v54 = AVE_Log_GetLevelStr(7);
      if (v52)
      {
        printf("%lld %d AVE %s: H264 - CopySPSPPSHeader: return bytesRead %d\n", v53, 221, v54, v5);
        __uint64_t v55 = AVE_GetCurrTime();
        long long v61 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: return bytesRead %d", v55, 221, v61, v5);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: return bytesRead %d", v53, 221, v54, v5);
      }
    }
    return v5;
  }
  if (AVE_Log_CheckLevel(0xDDu, 4))
  {
    int v17 = AVE_Log_CheckConsole(0xDDu);
    __uint64_t v18 = AVE_GetCurrTime();
    int v19 = AVE_Log_GetLevelStr(4);
    if (v17)
    {
      printf("%lld %d AVE %s: H264 ERROR - CopySPSPPSHeader: buffsize %d\n", v18, 221, v19, 0);
      __uint64_t v20 = AVE_GetCurrTime();
      unsigned int v58 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: H264 ERROR - CopySPSPPSHeader: buffsize %d", v20, 221, v58, 0);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264 ERROR - CopySPSPPSHeader: buffsize %d", v18, 221, v19, 0);
    }
  }
  return 0;
}

uint64_t flushBitstream(int32x2_t *a1)
{
  if (AVE_Log_CheckLevel(0xDDu, 8))
  {
    int v2 = AVE_Log_CheckConsole(0xDDu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(8);
    if (v2)
    {
      printf("%lld %d AVE %s: flushBitstream: bits = %d bitstream->bits %d\n", CurrTime, 221, LevelStr, 8, a1->i32[1]);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(8);
    }
    syslog(3, "%lld %d AVE %s: flushBitstream: bits = %d bitstream->bits %d", CurrTime, 221, LevelStr, 8, a1->i32[1]);
  }
  unsigned int v5 = a1->u32[1];
  if (v5 < 9)
  {
    uint64_t v12 = (unsigned __int32)a1->i32[0] >> -(char)v5 << (8 - v5);
    if (AVE_Log_CheckLevel(0xDDu, 8))
    {
      int v13 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v14 = AVE_GetCurrTime();
      __uint64_t v15 = AVE_Log_GetLevelStr(8);
      if (v13)
      {
        printf("%lld %d AVE %s: flushBitstream: new_bits %x result %x\n", v14, 221, v15, 8 - v5, v12);
        __uint64_t v16 = AVE_GetCurrTime();
        __uint64_t v28 = AVE_Log_GetLevelStr(8);
        syslog(3, "%lld %d AVE %s: flushBitstream: new_bits %x result %x", v16, 221, v28, 8 - v5, v12);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: flushBitstream: new_bits %x result %x", v14, 221, v15, 8 - v5, v12);
      }
    }
    unsigned int v25 = (unsigned int *)a1[1];
    unsigned int v26 = bswap32(*v25);
    a1[1] = (int32x2_t)(v25 + 1);
    a1->i32[0] = v26;
    a1->i32[1] = 32;
    uint64_t v18 = v12;
    if (v5 != 8)
    {
      uint64_t v18 = (v26 >> (v5 + 24)) | v12;
      a1->i32[0] = v26 << (8 - v5);
      a1->i32[1] = v5 + 24;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xDDu, 8))
    {
      int v6 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v7 = AVE_GetCurrTime();
      __uint64_t v8 = AVE_Log_GetLevelStr(8);
      __int32 v9 = a1->i32[1];
      if (v6)
      {
        printf("%lld %d AVE %s: flushBitstream: bitstream->data %x bitstream->bits %d\n", v7, 221, v8, a1->i32[0], v9);
        __uint64_t v10 = AVE_GetCurrTime();
        int v11 = AVE_Log_GetLevelStr(8);
        syslog(3, "%lld %d AVE %s: flushBitstream: bitstream->data %x bitstream->bits %d", v10, 221, v11, a1->i32[0], a1->i32[1]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: flushBitstream: bitstream->data %x bitstream->bits %d", v7, 221, v8, a1->i32[0], v9);
      }
    }
    v17.i32[0] = vshl_n_s32(*a1, 8uLL).u32[0];
    uint64_t v18 = HIBYTE(a1->u32[0]);
    v17.i32[1] = vadd_s32(*a1, (int32x2_t)0x700000007).i32[1];
    *a1 = v17;
    if (AVE_Log_CheckLevel(0xDDu, 8))
    {
      int v19 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v20 = AVE_GetCurrTime();
      unsigned int v21 = AVE_Log_GetLevelStr(8);
      __int32 v22 = a1->i32[1];
      if (v19)
      {
        printf("%lld %d AVE %s: flushBitstream: result %x bitstream->data %x bitstream->bits %d\n", v20, 221, v21, v18, a1->i32[0], v22);
        __uint64_t v23 = AVE_GetCurrTime();
        unsigned int v24 = AVE_Log_GetLevelStr(8);
        syslog(3, "%lld %d AVE %s: flushBitstream: result %x bitstream->data %x bitstream->bits %d", v23, 221, v24, v18, a1->i32[0], a1->i32[1]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: flushBitstream: result %x bitstream->data %x bitstream->bits %d", v20, 221, v21, v18, a1->i32[0], v22);
      }
    }
  }
  a1[2].i32[0] += 8;
  return v18;
}

void writeBitstream(int *a1, unsigned int a2, unsigned int a3)
{
  if (AVE_Log_CheckLevel(0xDDu, 8))
  {
    int v6 = AVE_Log_CheckConsole(0xDDu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(8);
    if (v6)
    {
      printf("%lld %d AVE %s: H2HeaderParser: write requested = %u bits %u\n", CurrTime, 221, LevelStr, a2, a3);
      __uint64_t v9 = AVE_GetCurrTime();
      unsigned int v24 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: H2HeaderParser: write requested = %u bits %u", v9, 221, v24, a2, a3);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H2HeaderParser: write requested = %u bits %u", CurrTime, 221, LevelStr, a2, a3);
    }
  }
  unsigned int v10 = a1[1];
  unsigned int v11 = v10 - a3;
  if (v10 <= a3)
  {
    unsigned int v12 = a3 - v10;
    *a1 = (*a1 << v10) | (a2 >> (a3 - v10));
    if (AVE_Log_CheckLevel(0xDDu, 8))
    {
      int v13 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v14 = AVE_GetCurrTime();
      __uint64_t v15 = AVE_Log_GetLevelStr(8);
      int v16 = *a1;
      if (v13)
      {
        printf("%lld %d AVE %s: H2HeaderParser: write data = 0x%08x\n", v14, 221, v15, v16);
        __uint64_t v17 = AVE_GetCurrTime();
        unsigned int v25 = AVE_Log_GetLevelStr(8);
        syslog(3, "%lld %d AVE %s: H2HeaderParser: write data = 0x%08x", v17, 221, v25, *a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H2HeaderParser: write data = 0x%08x", v14, 221, v15, v16);
      }
    }
    uint64_t v18 = (_DWORD *)*((void *)a1 + 1);
    _DWORD *v18 = bswap32(*a1);
    *((void *)a1 + 1) = v18 + 1;
    *a1 = a2 & ~(-1 << v12);
    unsigned int v11 = 32 - v12;
  }
  else
  {
    *a1 = (*a1 << a3) | a2;
  }
  a1[1] = v11;
  a1[4] += a3;
  if (AVE_Log_CheckLevel(0xDDu, 8))
  {
    int v19 = AVE_Log_CheckConsole(0xDDu);
    __uint64_t v20 = AVE_GetCurrTime();
    unsigned int v21 = AVE_Log_GetLevelStr(8);
    int v22 = a1[4];
    if (v19)
    {
      printf("%lld %d AVE %s: bitstream->total_bits = %u\n", v20, 221, v21, v22);
      __uint64_t v23 = AVE_GetCurrTime();
      unsigned int v26 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: bitstream->total_bits = %u", v23, 221, v26, a1[4]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: bitstream->total_bits = %u", v20, 221, v21, v22);
    }
  }
}

void closeWriteBitstream(uint64_t a1)
{
  while ((*(unsigned char *)(a1 + 16) & 0x1F) != 0)
    writeBitstream((int *)a1, 0, 1u);
}

uint64_t CopyVPSSPSPPSHeader(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, unsigned int *a4, int a5, int a6)
{
  if (!a1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v12 = AVE_Log_CheckConsole(3u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: in NULL\n", CurrTime, 3, LevelStr, "CopyVPSSPSPPSHeader", 270, "in != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: in NULL");
    }
    goto LABEL_49;
  }
  if (!a2)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v15 = AVE_Log_CheckConsole(3u);
      __uint64_t v16 = AVE_GetCurrTime();
      __uint64_t v17 = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: out NULL\n", v16, 3, v17, "CopyVPSSPSPPSHeader", 271, "out != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: out NULL");
    }
    goto LABEL_49;
  }
  uint64_t v6 = a3;
  if (a3)
  {
    int v74 = 0;
    v73[0] = (int32x2_t)(bswap32(*(_DWORD *)a1) | 0x2000000000);
    v73[1] = (int32x2_t)(a1 + 4);
    v72[1] = a2;
    v72[0] = 0x2000000000;
    v72[2] = 0xFFFFFFFF00000000;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      int v8 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v9 = AVE_GetCurrTime();
      unsigned int v10 = AVE_Log_GetLevelStr(7);
      if (v8)
      {
        printf("%lld %d AVE %s: H264 - CopySPSPPSHeader: buffsize %d\n", v9, 221, v10, v6);
        __uint64_t v11 = AVE_GetCurrTime();
        unint64_t v62 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: buffsize %d", v11, 221, v62, v6);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: buffsize %d", v9, 221, v10, v6);
      }
    }
    uint64_t v22 = 0;
    int v23 = 0;
    int v24 = 0;
    uint64_t v69 = a4 + 1;
    uint64_t v25 = 1;
    uint64_t v71 = a4;
    do
    {
      unsigned int v26 = flushBitstream(v73);
      int v27 = v24 + 1;
      writeBitstream((int *)v72, v26, 8u);
      int v23 = v26 | (v23 << 8);
      if (AVE_Log_CheckLevel(0xDDu, 7))
      {
        int v28 = v23;
        uint64_t v29 = v22;
        uint64_t v30 = v25;
        uint64_t v31 = v6;
        int v32 = AVE_Log_CheckConsole(0xDDu);
        __uint64_t v33 = AVE_GetCurrTime();
        int v34 = AVE_Log_GetLevelStr(7);
        if (v32)
        {
          printf("%lld %d AVE %s: H264 - CopyVPSSPSPPSHeader: startcode %x startcodeCount %d bytesRead %d temp %x\n", v33, 221, v34, v28, v29, v24 + 1, v26);
          __uint64_t v35 = AVE_GetCurrTime();
          __uint64_t v36 = AVE_Log_GetLevelStr(7);
          uint64_t v6 = a3;
          syslog(3, "%lld %d AVE %s: H264 - CopyVPSSPSPPSHeader: startcode %x startcodeCount %d bytesRead %d temp %x", v35, 221, v36, v28, v29, v24 + 1, v26);
          uint64_t v25 = v30;
          uint64_t v22 = v29;
          int v23 = v28;
        }
        else
        {
          uint64_t v37 = v29;
          int v66 = v29;
          int v23 = v28;
          syslog(3, "%lld %d AVE %s: H264 - CopyVPSSPSPPSHeader: startcode %x startcodeCount %d bytesRead %d temp %x", v33, 221, v34, v28, v66, v24 + 1, v26);
          uint64_t v6 = v31;
          uint64_t v25 = v30;
          uint64_t v22 = v37;
        }
        a4 = v71;
      }
      if (v23 == 1)
      {
        if (v22 == 2)
        {
          a4[1] = v24 - *a4 - 3;
        }
        else if (v22 == 1)
        {
          *a4 = v24 - 3;
        }
        if (v22 == v25 + 2)
        {
          unsigned int v38 = v24 - *a4 - 3;
          uint64_t v39 = (v25 + 1);
          a4[v39] = v38;
          if (v25)
          {
            uint64_t v40 = v25;
            uint64_t v41 = v69;
            do
            {
              int v42 = *v41++;
              v38 -= v42;
              a4[v39] = v38;
              --v40;
            }
            while (v40);
            uint64_t v25 = (v25 + 1);
          }
          else
          {
            uint64_t v25 = 1;
          }
        }
        uint64_t v22 = (v22 + 1);
        if (AVE_Log_CheckLevel(0xDDu, 7))
        {
          int v43 = AVE_Log_CheckConsole(0xDDu);
          __uint64_t v44 = AVE_GetCurrTime();
          int v45 = AVE_Log_GetLevelStr(7);
          if (v43)
          {
            printf("%lld %d AVE %s: H264 - CopyVPSSPSPPSHeader: startcode %x = H264VIDEOENCODER_STARTCODE startcodeCount %d bytesRead %d expectedPPSs %d\n", v44, 221, v45, 1, v22, v24 + 1, v25);
            __uint64_t v46 = AVE_GetCurrTime();
            char v64 = AVE_Log_GetLevelStr(7);
            a4 = v71;
            syslog(3, "%lld %d AVE %s: H264 - CopyVPSSPSPPSHeader: startcode %x = H264VIDEOENCODER_STARTCODE startcodeCount %d bytesRead %d expectedPPSs %d", v46, 221, v64, 1, v22, v27, v25);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264 - CopyVPSSPSPPSHeader: startcode %x = H264VIDEOENCODER_STARTCODE startcodeCount %d bytesRead %d expectedPPSs %d", v44, 221, v45, 1, v22, v24 + 1, v25);
          }
        }
      }
      ++v24;
    }
    while (v27 != v6);
    int v47 = a6 + 2 * a5;
    if (v22 == v47)
    {
      unsigned int v48 = v6 - *a4;
      uint64_t v49 = (v25 + 1);
      a4[v49] = v48;
      if (v25)
      {
        uint64_t v50 = v25;
        uint64_t v51 = a4 + 1;
        do
        {
          int v52 = *v51++;
          v48 -= v52;
          a4[v49] = v48;
          --v50;
        }
        while (v50);
      }
      closeWriteBitstream((uint64_t)v72);
      goto LABEL_50;
    }
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v53 = AVE_Log_CheckConsole(3u);
      __uint64_t v54 = AVE_GetCurrTime();
      __uint64_t v55 = AVE_Log_GetLevelStr(4);
      if (v53)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - CopyVPSSPSPPSHeader ERROR: %d startCodeCount == %d\n", v54, 3, v55, "CopyVPSSPSPPSHeader", 327, "(startCodeCount == expectedStartCodes)", v47, v22);
        __uint64_t v56 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopyVPSSPSPPSHeader ERROR: %d startCodeCount == %d", v56);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopyVPSSPSPPSHeader ERROR: %d startCodeCount == %d", v54);
      }
    }
LABEL_49:
    uint64_t v6 = 0;
LABEL_50:
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      int v57 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v58 = AVE_GetCurrTime();
      unsigned int v59 = AVE_Log_GetLevelStr(7);
      if (v57)
      {
        printf("%lld %d AVE %s: H264 - CopySPSPPSHeader: return bytesRead %d\n", v58, 221, v59, v6);
        __uint64_t v60 = AVE_GetCurrTime();
        char v65 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: return bytesRead %d", v60, 221, v65, v6);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: return bytesRead %d", v58, 221, v59, v6);
      }
    }
    return v6;
  }
  if (AVE_Log_CheckLevel(0xDDu, 4))
  {
    int v18 = AVE_Log_CheckConsole(0xDDu);
    __uint64_t v19 = AVE_GetCurrTime();
    __uint64_t v20 = AVE_Log_GetLevelStr(4);
    if (v18)
    {
      printf("%lld %d AVE %s: H264 ERROR - CopySPSPPSHeader: buffsize %d\n", v19, 221, v20, 0);
      __uint64_t v21 = AVE_GetCurrTime();
      uint64_t v63 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: H264 ERROR - CopySPSPPSHeader: buffsize %d", v21, 221, v63, 0);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264 ERROR - CopySPSPPSHeader: buffsize %d", v19, 221, v20, 0);
    }
  }
  return 0;
}

uint64_t AddSEIDebugMetadata(_DWORD *a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4, uint64_t a5, int a6, int *a7)
{
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    int v14 = AVE_Log_CheckConsole(0xDDu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v14)
    {
      printf("%lld %d AVE %s: \nAddSEIDebugMetadata: ENTER WITH useEPB = %d\n", CurrTime, 221, LevelStr, a6);
      __uint64_t v17 = AVE_GetCurrTime();
      v117 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: \nAddSEIDebugMetadata: ENTER WITH useEPB = %d", v17, 221, v117, a6);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: \nAddSEIDebugMetadata: ENTER WITH useEPB = %d", CurrTime, 221, LevelStr, a6);
    }
  }
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    int v18 = AVE_Log_CheckConsole(0xDDu);
    __uint64_t v19 = AVE_GetCurrTime();
    __uint64_t v20 = AVE_Log_GetLevelStr(7);
    if (v18)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: frame = %d - SEI size %d\n", v19, 221, v20, *(_DWORD *)(a5 + 160), a4);
      __uint64_t v19 = AVE_GetCurrTime();
      __uint64_t v20 = AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: frame = %d - SEI size %d", v19, 221, v20, *(_DWORD *)(a5 + 160), a4);
  }
  if (!a1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v26 = AVE_Log_CheckConsole(3u);
      __uint64_t v27 = AVE_GetCurrTime();
      int v28 = AVE_Log_GetLevelStr(4);
      if (v26)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: input buffer NULL. FAIL\n", v27, 3, v28, "AddSEIDebugMetadata", 459, "in != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: input buffer NULL. FAIL");
    }
    return 4294966293;
  }
  if (!a3)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v29 = AVE_Log_CheckConsole(3u);
      __uint64_t v30 = AVE_GetCurrTime();
      uint64_t v31 = AVE_Log_GetLevelStr(4);
      if (v29)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: SEIData buffer NULL. FAIL\n", v30, 3, v31, "AddSEIDebugMetadata", 461, "SEIData != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: SEIData buffer NULL. FAIL");
    }
    return 4294966293;
  }
  if (!a5)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v32 = AVE_Log_CheckConsole(3u);
      __uint64_t v33 = AVE_GetCurrTime();
      int v34 = AVE_Log_GetLevelStr(4);
      if (v32)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: Frame NULL. FAIL\n", v33, 3, v34, "AddSEIDebugMetadata", 463, "Frame != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: Frame NULL. FAIL");
    }
    return 4294966293;
  }
  BOOL v21 = AVE_Log_CheckLevel(0xDDu, 7);
  if (a6)
  {
    if (v21)
    {
      int v22 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v23 = AVE_GetCurrTime();
      int v24 = AVE_Log_GetLevelStr(7);
      if (v22)
      {
        printf("%lld %d AVE %s: WILL DO EPB\n", v23, 221, v24);
        __uint64_t v25 = AVE_GetCurrTime();
        v118 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: WILL DO EPB", v25, 221, v118);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: WILL DO EPB", v23, 221, v24);
      }
    }
    uint64_t v41 = (unsigned __int8 *)malloc_type_malloc(a4 + (a4 >> 1), 0x510880CFuLL);
    a4 = AddEPB(a3, a4, v41);
    a3 = v41;
  }
  else if (v21)
  {
    int v35 = AVE_Log_CheckConsole(0xDDu);
    __uint64_t v36 = AVE_GetCurrTime();
    uint64_t v37 = AVE_Log_GetLevelStr(7);
    if (v35)
    {
      printf("%lld %d AVE %s: WILL NOT DO EPB\n", v36, 221, v37);
      __uint64_t v38 = AVE_GetCurrTime();
      v119 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: WILL NOT DO EPB", v38, 221, v119);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: WILL NOT DO EPB", v36, 221, v37);
    }
  }
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    int v42 = AVE_Log_CheckConsole(0xDDu);
    __uint64_t v43 = AVE_GetCurrTime();
    __uint64_t v44 = AVE_Log_GetLevelStr(7);
    if (v42)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: payloadSize EPB %d\n", v43, 221, v44, a4);
      __uint64_t v45 = AVE_GetCurrTime();
      v120 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadSize EPB %d", v45, 221, v120, a4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadSize EPB %d", v43, 221, v44, a4);
    }
  }
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    int v46 = AVE_Log_CheckConsole(0xDDu);
    __uint64_t v47 = AVE_GetCurrTime();
    unsigned int v48 = AVE_Log_GetLevelStr(7);
    if (v46)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: payloadSize UUID %d\n", v47, 221, v48, a4 + 16);
      __uint64_t v49 = AVE_GetCurrTime();
      v121 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadSize UUID %d", v49, 221, v121, a4 + 16);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadSize UUID %d", v47, 221, v48, a4 + 16);
    }
  }
  unsigned int v50 = a4 + 20;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    int v51 = AVE_Log_CheckConsole(0xDDu);
    __uint64_t v52 = AVE_GetCurrTime();
    int v53 = AVE_Log_GetLevelStr(7);
    if (v51)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: payloadSize meta %d\n", v52, 221, v53, a4 + 20);
      __uint64_t v54 = AVE_GetCurrTime();
      v122 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadSize meta %d", v54, 221, v122, a4 + 20);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadSize meta %d", v52, 221, v53, a4 + 20);
    }
  }
  v134 = a7;
  *a1 = 0x1000000;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    int v55 = AVE_Log_CheckConsole(0xDDu);
    __uint64_t v56 = AVE_GetCurrTime();
    int v57 = AVE_Log_GetLevelStr(7);
    if (v55)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: start code blockBufferData %p (%ld)\n", v56, 221, v57, a1 + 1, 4);
      __uint64_t v58 = AVE_GetCurrTime();
      v123 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: start code blockBufferData %p (%ld)", v58, 221, v123, a1 + 1, 4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: start code blockBufferData %p (%ld)", v56, 221, v57, a1 + 1, 4);
    }
  }
  int v59 = *(_DWORD *)(a2 + 120);
  if (v59 == 1)
  {
    *((_WORD *)a1 + 2) = 334;
    uint64_t v60 = 6;
  }
  else
  {
    if (v59)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v66 = AVE_Log_CheckConsole(3u);
        __uint64_t v67 = AVE_GetCurrTime();
        uint64_t v68 = AVE_Log_GetLevelStr(4);
        if (v66)
        {
          printf("%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL\n", v67, 3, v68, "AddSEIDebugMetadata", 516, "false");
          __uint64_t v69 = AVE_GetCurrTime();
          v125 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL", v69, 3, v125, "AddSEIDebugMetadata", 516, "false");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL", v67, 3, v68, "AddSEIDebugMetadata", 516, "false");
        }
      }
      uint64_t v39 = 4294966295;
      if (a3) {
        goto LABEL_113;
      }
      return v39;
    }
    *((unsigned char *)a1 + 4) = 6;
    uint64_t v60 = 5;
  }
  long long v61 = (char *)a1 + v60;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    int v62 = AVE_Log_CheckConsole(0xDDu);
    __uint64_t v63 = AVE_GetCurrTime();
    char v64 = AVE_Log_GetLevelStr(7);
    if (v62)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: nal_unit_type blockBufferData %p (%ld)\n", v63, 221, v64, (char *)a1 + v60, v60);
      __uint64_t v65 = AVE_GetCurrTime();
      v124 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: nal_unit_type blockBufferData %p (%ld)", v65, 221, v124, (char *)a1 + v60, v60);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: nal_unit_type blockBufferData %p (%ld)", v63, 221, v64, (char *)a1 + v60, v60);
    }
  }
  *long long v61 = 5;
  uint64_t v70 = (uint64_t)(v61 + 1);
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    int v71 = AVE_Log_CheckConsole(0xDDu);
    __uint64_t v72 = AVE_GetCurrTime();
    uint64_t v73 = AVE_Log_GetLevelStr(7);
    if (v71)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: payloadType blockBufferData %p (%ld)\n", v72, 221, v73, (const void *)v70, v70 - (void)a1);
      __uint64_t v74 = AVE_GetCurrTime();
      v126 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadType blockBufferData %p (%ld)", v74, 221, v126, (const void *)v70, v70 - (void)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadType blockBufferData %p (%ld)", v72, 221, v73, (const void *)v70, v70 - (void)a1);
    }
  }
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    int v75 = AVE_Log_CheckConsole(0xDDu);
    __uint64_t v76 = AVE_GetCurrTime();
    v77 = AVE_Log_GetLevelStr(7);
    if (v75)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: start payloadSize sizeTemp %d blockBufferData %p (%ld)\n", v76, 221, v77, a4 + 20, (const void *)v70, v70 - (void)a1);
      __uint64_t v78 = AVE_GetCurrTime();
      v127 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v78, 221, v127, a4 + 20, (const void *)v70, v70 - (void)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v76, 221, v77, a4 + 20, (const void *)v70, v70 - (void)a1);
    }
  }
  if (v50 < 0xFF)
  {
    int v80 = 0;
  }
  else
  {
    unint64_t v79 = (a4 - 235) / 0xFFuLL;
    memset((void *)v70, 255, v79 + 1);
    LOBYTE(v50) = v79 + a4 + 21;
    uint64_t v70 = (uint64_t)a1 + v60 + v79 + 2;
    int v80 = v79 + 1;
  }
  *(unsigned char *)uint64_t v70 = v50;
  uint64_t v81 = v70 + 1;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    int v82 = AVE_Log_CheckConsole(0xDDu);
    __uint64_t v83 = AVE_GetCurrTime();
    __uint64_t v84 = AVE_Log_GetLevelStr(7);
    int v85 = v80 + 1;
    if (v82)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: end payloadSize bytes %d blockBufferData %p (%ld)\n", v83, 221, v84, v85, (const void *)(v70 + 1), v81 - (void)a1);
      __uint64_t v86 = AVE_GetCurrTime();
      v128 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: end payloadSize bytes %d blockBufferData %p (%ld)", v86, 221, v128, v85, (const void *)(v70 + 1), v81 - (void)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: end payloadSize bytes %d blockBufferData %p (%ld)", v83, 221, v84, v85, (const void *)(v70 + 1), v81 - (void)a1);
    }
  }
  *(_OWORD *)(v70 + 1) = xmmword_1BA78F670;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    uint64_t v87 = v70 + 17;
    int v88 = AVE_Log_CheckConsole(0xDDu);
    __uint64_t v89 = AVE_GetCurrTime();
    v90 = AVE_Log_GetLevelStr(7);
    if (v88)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: UUID blockBufferData %p (%ld)\n", v89, 221, v90, (const void *)(v70 + 17), v87 - (void)a1);
      __uint64_t v91 = AVE_GetCurrTime();
      v129 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: UUID blockBufferData %p (%ld)", v91, 221, v129, (const void *)(v70 + 17), v87 - (void)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: UUID blockBufferData %p (%ld)", v89, 221, v90, (const void *)(v70 + 17), v87 - (void)a1);
    }
  }
  *(_DWORD *)(v70 + 17) = 1635018093;
  v92 = (unsigned char *)(v70 + 21);
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    int v93 = AVE_Log_CheckConsole(0xDDu);
    __uint64_t v94 = AVE_GetCurrTime();
    v95 = AVE_Log_GetLevelStr(7);
    int v96 = v92 - a1;
    if (v93)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: meta blockBufferData %p (%ld)\n", v94, 221, v95, v92, v92 - (unsigned char *)a1);
      __uint64_t v97 = AVE_GetCurrTime();
      v130 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: meta blockBufferData %p (%ld)", v97, 221, v130, v92, v92 - (unsigned char *)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: meta blockBufferData %p (%ld)", v94, 221, v95, v92, v92 - (unsigned char *)a1);
    }
  }
  else
  {
    int v96 = v92 - a1;
  }
  if (*v134 < a4 + v96 + 1)
  {
    if (AVE_Log_CheckLevel(0xDDu, 4))
    {
      int v98 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v99 = AVE_GetCurrTime();
      v100 = AVE_Log_GetLevelStr(4);
      if (v98)
      {
        printf("%lld %d AVE %s: %s:%d %s | AddSEIDebugMetadata: SEI buffer overflow. pSEISize:%d\n", v99, 221, v100, "AddSEIDebugMetadata", 603, "ret == 0", *v134);
        __uint64_t v99 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AddSEIDebugMetadata: SEI buffer overflow. pSEISize:%d", v99);
    }
    uint64_t v39 = 4294966293;
    if (!a3) {
      return v39;
    }
LABEL_113:
    if (a6) {
      free(a3);
    }
    return v39;
  }
  memcpy(v92, a3, a4);
  v101 = &v92[a4];
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    int v102 = AVE_Log_CheckConsole(0xDDu);
    __uint64_t v103 = AVE_GetCurrTime();
    v104 = AVE_Log_GetLevelStr(7);
    if (v102)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: data blockBufferData %p (%ld)\n", v103, 221, v104, v101, v101 - (unsigned char *)a1);
      __uint64_t v105 = AVE_GetCurrTime();
      v131 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: data blockBufferData %p (%ld)", v105, 221, v131, v101, v101 - (unsigned char *)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: data blockBufferData %p (%ld)", v103, 221, v104, v101, v101 - (unsigned char *)a1);
    }
  }
  unsigned char *v101 = 0x80;
  v106 = v101 + 1;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    int v107 = AVE_Log_CheckConsole(0xDDu);
    __uint64_t v108 = AVE_GetCurrTime();
    v109 = AVE_Log_GetLevelStr(7);
    int64_t v110 = v106 - (unsigned char *)a1;
    if (v107)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: rbsp_trailing_bits blockBufferData %p (%ld)\n", v108, 221, v109, v106, v106 - (unsigned char *)a1);
      __uint64_t v111 = AVE_GetCurrTime();
      v132 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: rbsp_trailing_bits blockBufferData %p (%ld)", v111, 221, v132, v106, v110);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: rbsp_trailing_bits blockBufferData %p (%ld)", v108, 221, v109, v106, v106 - (unsigned char *)a1);
    }
  }
  else
  {
    LODWORD(v110) = v106 - a1;
  }
  int *v134 = v110;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    int v112 = AVE_Log_CheckConsole(0xDDu);
    __uint64_t v113 = AVE_GetCurrTime();
    v114 = AVE_Log_GetLevelStr(7);
    int v115 = *v134;
    if (v112)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: final SEISize %d\n", v113, 221, v114, v115);
      __uint64_t v116 = AVE_GetCurrTime();
      v133 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: final SEISize %d", v116, 221, v133, *v134);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: final SEISize %d", v113, 221, v114, v115);
    }
  }
  uint64_t v39 = 0;
  if (a3) {
    goto LABEL_113;
  }
  return v39;
}

uint64_t AddEPB(unsigned __int8 *a1, unsigned int a2, unsigned __int8 *a3)
{
  if (a2 <= 2)
  {
    uint64_t result = AVE_Log_CheckLevel(3u, 4);
    if (!result) {
      return result;
    }
    int v17 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (v17)
    {
      __uint64_t v20 = "length >= 3";
      int v21 = 378;
LABEL_20:
      printf("%lld %d AVE %s: %s:%d %s | H264 - AddEPB: output buffer NULL. FAIL\n", CurrTime, 3, LevelStr, "AddEPB", v21, v20);
      __uint64_t v23 = AVE_GetCurrTime();
      int v35 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - AddEPB: output buffer NULL. FAIL", v23, 3, v35, "AddEPB", v21, v20);
      return 0;
    }
    __uint64_t v27 = "length >= 3";
    int v28 = 378;
LABEL_34:
    syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - AddEPB: output buffer NULL. FAIL", CurrTime, 3, LevelStr, "AddEPB", v28, v27);
    return 0;
  }
  int v3 = (int)a3;
  if (!a3)
  {
    uint64_t result = AVE_Log_CheckLevel(3u, 4);
    if (!result) {
      return result;
    }
    int v22 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (v22)
    {
      __uint64_t v20 = "outbuffer != __null";
      int v21 = 379;
      goto LABEL_20;
    }
    __uint64_t v27 = "outbuffer != __null";
    int v28 = 379;
    goto LABEL_34;
  }
  unsigned int v6 = a2 - 3;
  int v37 = (int)a3;
  unsigned int v7 = 0;
  if (a2 == 3)
  {
    unsigned int v10 = a3;
  }
  else
  {
    int v8 = a3;
    do
    {
      int v9 = *(_DWORD *)a1;
      if ((*(_DWORD *)a1 & 0xFCFFFF) != 0)
      {
        ++a1;
        *int v8 = v9;
        ++v7;
        unsigned int v10 = v8 + 1;
      }
      else
      {
        *(_WORD *)int v8 = 0;
        unsigned int v10 = v8 + 3;
        v8[2] = 3;
        a1 += 2;
        v7 += 2;
        if (AVE_Log_CheckLevel(0xDDu, 7))
        {
          int v11 = AVE_Log_CheckConsole(0xDDu);
          __uint64_t v12 = AVE_GetCurrTime();
          int v13 = AVE_Log_GetLevelStr(7);
          int v14 = v10 - v3;
          if (v11)
          {
            printf("%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!\n", v12, 221, v13, v14, v7);
            __uint64_t v15 = AVE_GetCurrTime();
            int v34 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!", v15, 221, v34, v14, v7);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!", v12, 221, v13, v14, v7);
          }
          int v3 = v37;
        }
      }
      int v8 = v10;
    }
    while (v7 < v6);
  }
  if (*a1 || a1[1] || (unsigned int v29 = a1[2], v29 > 3))
  {
    unsigned int v24 = a2 - v7;
    if (a2 > v7)
    {
      int v25 = v37;
      do
      {
        unsigned __int8 v26 = *a1++;
        *v10++ = v26;
        --v24;
      }
      while (v24);
      return (v10 - v25);
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      int v30 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v31 = AVE_GetCurrTime();
      int v32 = AVE_Log_GetLevelStr(7);
      if (v30)
      {
        printf("%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!\n", v31, 221, v32, v10 - v37, v7);
        __uint64_t v33 = AVE_GetCurrTime();
        __uint64_t v36 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!", v33, 221, v36, v10 - v37, v7);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!", v31, 221, v32, v10 - v37, v7);
      }
    }
    *(_WORD *)unsigned int v10 = 0;
    v10[2] = 3;
    v10[3] = v29;
    LODWORD(v10) = v10 + 4;
  }
  int v25 = v37;
  return (v10 - v25);
}

uint64_t AddRegisteredITUTT35SEI(_DWORD *a1, uint64_t a2, uint64_t a3, int a4, int *a5)
{
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    int v10 = AVE_Log_CheckConsole(0xDDu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    int v13 = *(_DWORD *)(a3 + 160);
    if (v10)
    {
      printf("%lld %d AVE %s: \nAdd Lux SEI: frame = %d - SEI size %d useEPB = %d\n", CurrTime, 221, LevelStr, v13, 0, a4);
      __uint64_t v14 = AVE_GetCurrTime();
      int v93 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: \nAdd Lux SEI: frame = %d - SEI size %d useEPB = %d", v14, 221, v93, *(_DWORD *)(a3 + 160), 0, a4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: \nAdd Lux SEI: frame = %d - SEI size %d useEPB = %d", CurrTime, 221, LevelStr, v13, 0, a4);
    }
  }
  if (!a1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v23 = AVE_Log_CheckConsole(3u);
      __uint64_t v24 = AVE_GetCurrTime();
      int v25 = AVE_Log_GetLevelStr(4);
      if (v23)
      {
        printf("%lld %d AVE %s: %s:%d %s | AddRegisteredITUTT35SEI: input buffer NULL. FAIL\n", v24, 3, v25, "AddRegisteredITUTT35SEI", 650, "in != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AddRegisteredITUTT35SEI: input buffer NULL. FAIL");
    }
    return 4294966293;
  }
  if (!a2)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v26 = AVE_Log_CheckConsole(3u);
      __uint64_t v27 = AVE_GetCurrTime();
      int v28 = AVE_Log_GetLevelStr(4);
      if (v26)
      {
        printf("%lld %d AVE %s: %s:%d %s | AddRegisteredITUTT35SEI: video_params_drivers NULL. FAIL\n", v27, 3, v28, "AddRegisteredITUTT35SEI", 652, "video_params_drivers != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AddRegisteredITUTT35SEI: video_params_drivers NULL. FAIL");
    }
    return 4294966293;
  }
  if (!a3)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v29 = AVE_Log_CheckConsole(3u);
      __uint64_t v30 = AVE_GetCurrTime();
      __uint64_t v31 = AVE_Log_GetLevelStr(4);
      if (v29)
      {
        printf("%lld %d AVE %s: %s:%d %s | AddRegisteredITUTT35SEI: Frame NULL. FAIL\n", v30, 3, v31, "AddRegisteredITUTT35SEI", 654, "Frame != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AddRegisteredITUTT35SEI: Frame NULL. FAIL");
    }
    return 4294966293;
  }
  __uint64_t v15 = (unsigned __int8 *)malloc_type_malloc(9uLL, 0x16A1676CuLL);
  if (v15)
  {
    __uint64_t v16 = v15;
    int v17 = *(_DWORD *)(a3 + 2436);
    *(_DWORD *)__uint64_t v15 = 1441775285;
    v15[4] = -86;
    v15[5] = HIBYTE(v17);
    v15[6] = BYTE2(v17);
    v15[7] = BYTE1(v17);
    v15[8] = v17;
    BOOL v18 = AVE_Log_CheckLevel(0xDDu, 7);
    if (a4)
    {
      if (v18)
      {
        int v19 = AVE_Log_CheckConsole(0xDDu);
        __uint64_t v20 = AVE_GetCurrTime();
        int v21 = AVE_Log_GetLevelStr(7);
        if (v19)
        {
          printf("%lld %d AVE %s: AddSEI: WILL DO EPB\n", v20, 221, v21);
          __uint64_t v22 = AVE_GetCurrTime();
          __uint64_t v94 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: AddSEI: WILL DO EPB", v22, 221, v94);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: AddSEI: WILL DO EPB", v20, 221, v21);
        }
      }
      int v42 = (unsigned __int8 *)malloc_type_malloc(0xDuLL, 0x33439C02uLL);
      unsigned int __n = AddEPB(v16, 9u, v42);
    }
    else
    {
      if (v18)
      {
        int v36 = AVE_Log_CheckConsole(0xDDu);
        __uint64_t v37 = AVE_GetCurrTime();
        __uint64_t v38 = AVE_Log_GetLevelStr(7);
        if (v36)
        {
          printf("%lld %d AVE %s: AddSEI: WILL NOT DO EPB\n", v37, 221, v38);
          __uint64_t v39 = AVE_GetCurrTime();
          int v96 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: AddSEI: WILL NOT DO EPB", v39, 221, v96);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: AddSEI: WILL NOT DO EPB", v37, 221, v38);
        }
      }
      unsigned int __n = 9;
      int v42 = v16;
    }
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      int v43 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v44 = AVE_GetCurrTime();
      __uint64_t v45 = AVE_Log_GetLevelStr(7);
      if (v43)
      {
        printf("%lld %d AVE %s: AddSEI: payloadSize EPB %d\n", v44, 221, v45, 9);
        __uint64_t v46 = AVE_GetCurrTime();
        __uint64_t v97 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: payloadSize EPB %d", v46, 221, v97, 9);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: payloadSize EPB %d", v44, 221, v45, 9);
      }
    }
    size_t __n_4 = (size_t)v42;
    *a1 = 0x1000000;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      int v47 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v48 = AVE_GetCurrTime();
      __uint64_t v49 = AVE_Log_GetLevelStr(7);
      if (v47)
      {
        printf("%lld %d AVE %s: AddSEI: start code blockBufferData %p (%ld)\n", v48, 221, v49, a1 + 1, 4);
        __uint64_t v50 = AVE_GetCurrTime();
        int v98 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: start code blockBufferData %p (%ld)", v50, 221, v98, a1 + 1, 4);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: start code blockBufferData %p (%ld)", v48, 221, v49, a1 + 1, 4);
      }
    }
    int v51 = *(_DWORD *)(a2 + 120);
    if (v51 == 1)
    {
      *((_WORD *)a1 + 2) = 334;
      uint64_t v52 = 6;
    }
    else
    {
      if (v51)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v58 = AVE_Log_CheckConsole(3u);
          __uint64_t v59 = AVE_GetCurrTime();
          uint64_t v60 = AVE_Log_GetLevelStr(4);
          if (v58)
          {
            printf("%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL\n", v59, 3, v60, "AddRegisteredITUTT35SEI", 750, "false");
            __uint64_t v61 = AVE_GetCurrTime();
            v100 = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL", v61, 3, v100, "AddRegisteredITUTT35SEI", 750, "false");
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL", v59, 3, v60, "AddRegisteredITUTT35SEI", 750, "false");
          }
        }
        uint64_t v40 = 4294966295;
        __uint64_t v72 = v42;
        if (!v42) {
          goto LABEL_89;
        }
LABEL_87:
        if (a4) {
          free(v72);
        }
LABEL_89:
        free(v16);
        return v40;
      }
      *((unsigned char *)a1 + 4) = 6;
      uint64_t v52 = 5;
    }
    int v53 = (char *)a1 + v52;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      int v54 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v55 = AVE_GetCurrTime();
      __uint64_t v56 = AVE_Log_GetLevelStr(7);
      if (v54)
      {
        printf("%lld %d AVE %s: AddSEI: nal_unit_type blockBufferData %p (%ld)\n", v55, 221, v56, (char *)a1 + v52, v52);
        __uint64_t v57 = AVE_GetCurrTime();
        __uint64_t v99 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: nal_unit_type blockBufferData %p (%ld)", v57, 221, v99, (char *)a1 + v52, v52);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: nal_unit_type blockBufferData %p (%ld)", v55, 221, v56, (char *)a1 + v52, v52);
      }
    }
    *int v53 = 4;
    int v62 = v53 + 1;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      int v63 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v64 = AVE_GetCurrTime();
      __uint64_t v65 = AVE_Log_GetLevelStr(7);
      if (v63)
      {
        printf("%lld %d AVE %s: AddSEI: payloadType blockBufferData %p (%ld)\n", v64, 221, v65, v53 + 1, v62 - (unsigned char *)a1);
        __uint64_t v66 = AVE_GetCurrTime();
        v101 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: payloadType blockBufferData %p (%ld)", v66, 221, v101, v53 + 1, v62 - (unsigned char *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: payloadType blockBufferData %p (%ld)", v64, 221, v65, v53 + 1, v62 - (unsigned char *)a1);
      }
    }
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      int v67 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v68 = AVE_GetCurrTime();
      __uint64_t v69 = AVE_Log_GetLevelStr(7);
      if (v67)
      {
        printf("%lld %d AVE %s: AddSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)\n", v68, 221, v69, 9, v53 + 1, v62 - (unsigned char *)a1);
        __uint64_t v70 = AVE_GetCurrTime();
        int v102 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v70, 221, v102, 9, v53 + 1, v62 - (unsigned char *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v68, 221, v69, 9, v53 + 1, v62 - (unsigned char *)a1);
      }
    }
    v53[1] = 9;
    int v71 = v53 + 2;
    __uint64_t v72 = v42;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      int v73 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v74 = AVE_GetCurrTime();
      int v75 = AVE_Log_GetLevelStr(7);
      if (v73)
      {
        printf("%lld %d AVE %s: AddSEI: end payloadSize bytes %d blockBufferData %p (%ld)\n", v74, 221, v75, 1, v71, v71 - (unsigned char *)a1);
        __uint64_t v76 = AVE_GetCurrTime();
        __uint64_t v103 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: end payloadSize bytes %d blockBufferData %p (%ld)", v76, 221, v103, 1, v71, v71 - (unsigned char *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: end payloadSize bytes %d blockBufferData %p (%ld)", v74, 221, v75, 1, v71, v71 - (unsigned char *)a1);
      }
    }
    memcpy(v71, v42, __n);
    v77 = &v71[__n];
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      int v78 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v79 = AVE_GetCurrTime();
      int v80 = AVE_Log_GetLevelStr(7);
      if (v78)
      {
        printf("%lld %d AVE %s: AddSEI: data blockBufferData %p (%ld)\n", v79, 221, v80, v77, v77 - (unsigned char *)a1);
        __uint64_t v81 = AVE_GetCurrTime();
        v104 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: data blockBufferData %p (%ld)", v81, 221, v104, v77, v77 - (unsigned char *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: data blockBufferData %p (%ld)", v79, 221, v80, v77, v77 - (unsigned char *)a1);
      }
    }
    unsigned char *v77 = 0x80;
    int v82 = v77 + 1;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      int v83 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v84 = AVE_GetCurrTime();
      int v85 = AVE_Log_GetLevelStr(7);
      int64_t v86 = v82 - (unsigned char *)a1;
      if (v83)
      {
        printf("%lld %d AVE %s: AddSEI: rbsp_trailing_bits blockBufferData %p (%ld)\n", v84, 221, v85, v82, v82 - (unsigned char *)a1);
        __uint64_t v87 = AVE_GetCurrTime();
        __uint64_t v105 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: rbsp_trailing_bits blockBufferData %p (%ld)", v87, 221, v105, v82, v86);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: rbsp_trailing_bits blockBufferData %p (%ld)", v84, 221, v85, v82, v82 - (unsigned char *)a1);
      }
    }
    else
    {
      LODWORD(v86) = v82 - a1;
    }
    *a5 = v86;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      int v88 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v89 = AVE_GetCurrTime();
      v90 = AVE_Log_GetLevelStr(7);
      int v91 = *a5;
      if (v88)
      {
        printf("%lld %d AVE %s: AddSEI: final SEISize %d\n", v89, 221, v90, v91);
        __uint64_t v92 = AVE_GetCurrTime();
        v106 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: final SEISize %d", v92, 221, v106, *a5);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: final SEISize %d", v89, 221, v90, v91);
      }
    }
    uint64_t v40 = 0;
    if (!__n_4) {
      goto LABEL_89;
    }
    goto LABEL_87;
  }
  if (AVE_Log_CheckLevel(0xDDu, 4))
  {
    int v32 = AVE_Log_CheckConsole(0xDDu);
    __uint64_t v33 = AVE_GetCurrTime();
    int v34 = AVE_Log_GetLevelStr(4);
    if (v32)
    {
      printf("%lld %d AVE %s: malloc for SEI failed.\n", v33, 221, v34);
      __uint64_t v35 = AVE_GetCurrTime();
      v95 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: malloc for SEI failed.", v35, 221, v95);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: malloc for SEI failed.", v33, 221, v34);
    }
  }
  return 0;
}

uint64_t AddUnregisteredSEI(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int *a6)
{
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    int v12 = AVE_Log_CheckConsole(0xDDu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    int v15 = *(_DWORD *)(a4 + 160);
    if (v12)
    {
      printf("%lld %d AVE %s: \nAddSEI: frame = %d - SEI size %d useEPB = %d\n", CurrTime, 221, LevelStr, v15, 0, a5);
      __uint64_t v16 = AVE_GetCurrTime();
      v124 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: \nAddSEI: frame = %d - SEI size %d useEPB = %d", v16, 221, v124, *(_DWORD *)(a4 + 160), 0, a5);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: \nAddSEI: frame = %d - SEI size %d useEPB = %d", CurrTime, 221, LevelStr, v15, 0, a5);
    }
  }
  if (!a1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v19 = AVE_Log_CheckConsole(3u);
      __uint64_t v20 = AVE_GetCurrTime();
      int v21 = AVE_Log_GetLevelStr(4);
      if (v19)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: input buffer NULL. FAIL\n", v20, 3, v21, "AddUnregisteredSEI", 830, "in != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: input buffer NULL. FAIL");
    }
    return 4294966293;
  }
  if (!a2)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v22 = AVE_Log_CheckConsole(3u);
      __uint64_t v23 = AVE_GetCurrTime();
      __uint64_t v24 = AVE_Log_GetLevelStr(4);
      if (v22)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: video_params_drivers NULL. FAIL\n", v23, 3, v24, "AddUnregisteredSEI", 832, "video_params_drivers != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: video_params_drivers NULL. FAIL");
    }
    return 4294966293;
  }
  if (!a3)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v25 = AVE_Log_CheckConsole(3u);
      __uint64_t v26 = AVE_GetCurrTime();
      __uint64_t v27 = AVE_Log_GetLevelStr(4);
      if (v25)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: bRCEnableDriver NULL. FAIL\n", v26, 3, v27, "AddUnregisteredSEI", 834, "bRCEnableDriver != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: bRCEnableDriver NULL. FAIL");
    }
    return 4294966293;
  }
  if (!a4)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v28 = AVE_Log_CheckConsole(3u);
      __uint64_t v29 = AVE_GetCurrTime();
      __uint64_t v30 = AVE_Log_GetLevelStr(4);
      if (v28)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: Frame NULL. FAIL\n", v29, 3, v30, "AddUnregisteredSEI", 836, "Frame != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: Frame NULL. FAIL");
    }
    return 4294966293;
  }
  int v17 = (_DWORD *)(a4 + 23468);
  unsigned int v18 = *(unsigned __int8 *)(a2 + 45);
  if (*(unsigned char *)(a2 + 45))
  {
    if (*(double *)(a4 + 2384) != 0.0 && (*v17 == 3 || *(_DWORD *)(a4 + 23768) == 21)) {
      unsigned int v18 = 9;
    }
    else {
      unsigned int v18 = 0;
    }
  }
  if (*(unsigned char *)(a2 + 49) && *(double *)(a4 + 2368) != 0.0) {
    v18 += 9;
  }
  if (*(unsigned char *)(a2 + 46) && !*(_DWORD *)(a4 + 160)) {
    v18 += 5;
  }
  if (*(unsigned char *)(a2 + 47) && !*(_DWORD *)(a4 + 160)) {
    v18 += 5;
  }
  if (*(unsigned char *)(a2 + 48) && !*(_DWORD *)(a4 + 160)) {
    v18 += 5;
  }
  if (*(unsigned char *)(a2 + 50) && *(unsigned char *)(a2 + 55)) {
    v18 += 25;
  }
  if (*(unsigned char *)(a2 + 51) && *(unsigned char *)(a2 + 56)) {
    v18 += 5;
  }
  if (*(unsigned char *)(a2 + 52) && *(unsigned char *)(a2 + 85)) {
    v18 += 18;
  }
  if (*(unsigned char *)(a2 + 53)) {
    size_t v31 = v18 + 7;
  }
  else {
    size_t v31 = v18;
  }
  if (!v31) {
    return 0;
  }
  int v32 = (char *)malloc_type_malloc(v31, 0x487433EDuLL);
  if (!v32)
  {
    if (AVE_Log_CheckLevel(0xDDu, 4))
    {
      uint64_t v37 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v38 = AVE_GetCurrTime();
      __uint64_t v39 = AVE_Log_GetLevelStr(4);
      if (!v37)
      {
        syslog(3, "%lld %d AVE %s: malloc for SEI failed.", v38, 221, v39);
        return v37;
      }
      printf("%lld %d AVE %s: malloc for SEI failed.\n", v38, 221, v39);
      __uint64_t v40 = AVE_GetCurrTime();
      uint64_t v41 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: malloc for SEI failed.", v40, 221, v41);
    }
    return 0;
  }
  __uint64_t v33 = (unsigned __int8 *)v32;
  int v34 = v32;
  if (*(unsigned char *)(a2 + 45))
  {
    int v34 = v32;
    if (*(double *)(a4 + 2384) != 0.0)
    {
      if (*v17 == 3 || (int v34 = v32, *(_DWORD *)(a4 + 23768) == 21))
      {
        *int v32 = 0;
        *(void *)(v32 + 1) = bswap64(vcvtd_n_u64_f64(*(double *)(a4 + 2384), 0x20uLL));
        int v34 = v32 + 9;
      }
    }
  }
  if (*(unsigned char *)(a2 + 49) && *(double *)(a4 + 2368) != 0.0)
  {
    *int v34 = 4;
    *(void *)(v34 + 1) = bswap64(vcvtd_n_u64_f64(*(double *)(a4 + 2368), 0x20uLL));
    v34 += 9;
  }
  if (*(unsigned char *)(a2 + 46) && !*(_DWORD *)(a4 + 160))
  {
    LODWORD(v36) = *(_DWORD *)(a3 + 4);
    if (v36)
    {
      if (v36 == 20)
      {
        LOBYTE(v36) = -52;
        char v43 = -35;
      }
      else
      {
        LOBYTE(v36) = -52;
        char v43 = -1;
      }
    }
    else
    {
      char v43 = 0;
    }
    char v44 = 1;
    goto LABEL_86;
  }
  if (*(unsigned char *)(a2 + 47) && !*(_DWORD *)(a4 + 160))
  {
    unsigned int v35 = *(_DWORD *)(a2 + 136);
    if (v35 > 6) {
      LOBYTE(v36) = 0;
    }
    else {
      unint64_t v36 = 0x66553322114400uLL >> (8 * v35);
    }
    char v43 = -18;
    char v44 = 3;
LABEL_86:
    *int v34 = v44;
    v34[1] = v43;
    v34[2] = v36;
    v34[3] = v36;
    v34[4] = v43;
    v34 += 5;
  }
  if (*(unsigned char *)(a2 + 48) && !*(_DWORD *)(a4 + 160))
  {
    *int v34 = 2;
    v34[1] = *(unsigned char *)(a3 + 3);
    v34[2] = *(_WORD *)(a3 + 2);
    v34[3] = BYTE1(*(_DWORD *)a3);
    v34[4] = *(_DWORD *)a3;
    v34 += 5;
  }
  if (*(unsigned char *)(a2 + 50) && *(unsigned char *)(a2 + 55))
  {
    *int v34 = 5;
    long long v45 = *(_OWORD *)(a2 + 57);
    *(void *)(v34 + 17) = *(void *)(a2 + 73);
    *(_OWORD *)(v34 + 1) = v45;
    v34 += 25;
  }
  if (*(unsigned char *)(a2 + 51) && *(unsigned char *)(a2 + 56))
  {
    *int v34 = 6;
    *(_DWORD *)(v34 + 1) = *(_DWORD *)(a2 + 81);
    v34 += 5;
  }
  if (*(unsigned char *)(a2 + 52) && *(unsigned char *)(a2 + 85))
  {
    *int v34 = 7;
    long long v46 = *(_OWORD *)(a2 + 86);
    v34[17] = *(unsigned char *)(a2 + 102);
    *(_OWORD *)(v34 + 1) = v46;
    v34 += 18;
  }
  if (*(unsigned char *)(a2 + 53))
  {
    double v47 = *(double *)(a4 + 2408);
    if (v47 == 0.0
      || (double v48 = *(double *)(a4 + 2392), v48 == 0.0)
      || (double v49 = *(double *)(a4 + 2400), v49 == 0.0)
      || (double v50 = *(double *)(a4 + 2416), v50 == 0.0))
    {
      char v52 = 0;
      unsigned int v51 = 0;
    }
    else
    {
      unsigned int v51 = (int)(v47 * v48 * v49 / (v50 * 16777216.0));
      char v52 = 32;
    }
    int v53 = *(_DWORD *)(a4 + 2444);
    if (v53 == -1) {
      char v54 = -64;
    }
    else {
      char v54 = (_BYTE)v53 << 6;
    }
    *(_DWORD *)int v34 = 1380865032;
    v34[4] = *(_DWORD *)(a4 + 2440);
    if (v51 >= 0xFF) {
      LOBYTE(v51) = -1;
    }
    v34[5] = v51;
    v34[6] = v54 | v52 | *(unsigned char *)(a4 + 4036) & 0x1F;
  }
  BOOL v55 = AVE_Log_CheckLevel(0xDDu, 7);
  if (a5)
  {
    if (v55)
    {
      int v56 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v57 = AVE_GetCurrTime();
      int v58 = AVE_Log_GetLevelStr(7);
      if (v56)
      {
        printf("%lld %d AVE %s: AddSEI: WILL DO EPB\n", v57, 221, v58);
        __uint64_t v59 = AVE_GetCurrTime();
        v125 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: WILL DO EPB", v59, 221, v125);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: WILL DO EPB", v57, 221, v58);
      }
    }
    size_t __n_4 = (unsigned __int8 *)malloc_type_malloc(v31 + (v31 >> 1), 0x812E27F0uLL);
    unsigned int __n = AddEPB(v33, v31, __n_4);
  }
  else
  {
    if (v55)
    {
      int v60 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v61 = AVE_GetCurrTime();
      int v62 = AVE_Log_GetLevelStr(7);
      if (v60)
      {
        printf("%lld %d AVE %s: AddSEI: WILL NOT DO EPB\n", v61, 221, v62);
        __uint64_t v63 = AVE_GetCurrTime();
        v126 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: WILL NOT DO EPB", v63, 221, v126);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: WILL NOT DO EPB", v61, 221, v62);
      }
    }
    unsigned int __n = v31;
    size_t __n_4 = v33;
  }
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    int v64 = AVE_Log_CheckConsole(0xDDu);
    __uint64_t v65 = AVE_GetCurrTime();
    __uint64_t v66 = AVE_Log_GetLevelStr(7);
    if (v64)
    {
      printf("%lld %d AVE %s: AddSEI: payloadSize EPB %d\n", v65, 221, v66, v31);
      __uint64_t v67 = AVE_GetCurrTime();
      v127 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEI: payloadSize EPB %d", v67, 221, v127, v31);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEI: payloadSize EPB %d", v65, 221, v66, v31);
    }
  }
  int v68 = v31 + 16;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    int v69 = AVE_Log_CheckConsole(0xDDu);
    __uint64_t v70 = AVE_GetCurrTime();
    int v71 = AVE_Log_GetLevelStr(7);
    if (v69)
    {
      printf("%lld %d AVE %s: AddSEI: payloadSize UUID %d\n", v70, 221, v71, v68);
      __uint64_t v72 = AVE_GetCurrTime();
      v128 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEI: payloadSize UUID %d", v72, 221, v128, v68);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEI: payloadSize UUID %d", v70, 221, v71, v68);
    }
  }
  *a1 = 0x1000000;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    int v73 = AVE_Log_CheckConsole(0xDDu);
    __uint64_t v74 = AVE_GetCurrTime();
    int v75 = AVE_Log_GetLevelStr(7);
    if (v73)
    {
      printf("%lld %d AVE %s: AddSEI: start code blockBufferData %p (%ld)\n", v74, 221, v75, a1 + 1, 4);
      __uint64_t v76 = AVE_GetCurrTime();
      v129 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEI: start code blockBufferData %p (%ld)", v76, 221, v129, a1 + 1, 4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEI: start code blockBufferData %p (%ld)", v74, 221, v75, a1 + 1, 4);
    }
  }
  int v77 = *(_DWORD *)(a2 + 120);
  if (v77 == 1)
  {
    *((_WORD *)a1 + 2) = 334;
    uint64_t v78 = 6;
    goto LABEL_139;
  }
  if (!v77)
  {
    *((unsigned char *)a1 + 4) = 6;
    uint64_t v78 = 5;
LABEL_139:
    __uint64_t v79 = (char *)a1 + v78;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      int v80 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v81 = AVE_GetCurrTime();
      int v82 = AVE_Log_GetLevelStr(7);
      if (v80)
      {
        printf("%lld %d AVE %s: AddSEI: nal_unit_type blockBufferData %p (%ld)\n", v81, 221, v82, (char *)a1 + v78, v78);
        __uint64_t v83 = AVE_GetCurrTime();
        v130 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: nal_unit_type blockBufferData %p (%ld)", v83, 221, v130, (char *)a1 + v78, v78);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: nal_unit_type blockBufferData %p (%ld)", v81, 221, v82, (char *)a1 + v78, v78);
      }
    }
    *__uint64_t v79 = 5;
    __uint64_t v89 = v79 + 1;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      int v90 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v91 = AVE_GetCurrTime();
      __uint64_t v92 = AVE_Log_GetLevelStr(7);
      if (v90)
      {
        printf("%lld %d AVE %s: AddSEI: payloadType blockBufferData %p (%ld)\n", v91, 221, v92, v79 + 1, v89 - (unsigned char *)a1);
        __uint64_t v93 = AVE_GetCurrTime();
        v132 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: payloadType blockBufferData %p (%ld)", v93, 221, v132, v79 + 1, v89 - (unsigned char *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: payloadType blockBufferData %p (%ld)", v91, 221, v92, v79 + 1, v89 - (unsigned char *)a1);
      }
    }
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      int v94 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v95 = AVE_GetCurrTime();
      int v96 = AVE_Log_GetLevelStr(7);
      if (v94)
      {
        printf("%lld %d AVE %s: AddSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)\n", v95, 221, v96, v68, v79 + 1, v89 - (unsigned char *)a1);
        __uint64_t v97 = AVE_GetCurrTime();
        v133 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v97, 221, v133, v68, v79 + 1, v89 - (unsigned char *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v95, 221, v96, v68, v79 + 1, v89 - (unsigned char *)a1);
      }
    }
    v79[1] = v68;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      int v98 = v79 + 2;
      int v99 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v100 = AVE_GetCurrTime();
      v101 = AVE_Log_GetLevelStr(7);
      if (v99)
      {
        printf("%lld %d AVE %s: AddSEI: end payloadSize bytes %d blockBufferData %p (%ld)\n", v100, 221, v101, 1, v79 + 2, v98 - (unsigned char *)a1);
        __uint64_t v102 = AVE_GetCurrTime();
        v134 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: end payloadSize bytes %d blockBufferData %p (%ld)", v102, 221, v134, 1, v79 + 2, v98 - (unsigned char *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: end payloadSize bytes %d blockBufferData %p (%ld)", v100, 221, v101, 1, v79 + 2, v98 - (unsigned char *)a1);
      }
    }
    *(_OWORD *)(v79 + 2) = xmmword_1BA78F680;
    __uint64_t v103 = v79 + 18;
    __uint64_t v87 = __n_4;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      int v104 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v105 = AVE_GetCurrTime();
      v106 = AVE_Log_GetLevelStr(7);
      if (v104)
      {
        printf("%lld %d AVE %s: AddSEI: UUID blockBufferData %p (%ld)\n", v105, 221, v106, v79 + 18, v103 - (unsigned char *)a1);
        __uint64_t v107 = AVE_GetCurrTime();
        v135 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: UUID blockBufferData %p (%ld)", v107, 221, v135, v103, v103 - (unsigned char *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: UUID blockBufferData %p (%ld)", v105, 221, v106, v79 + 18, v103 - (unsigned char *)a1);
      }
    }
    memcpy(v103, __n_4, __n);
    __uint64_t v108 = &v103[__n];
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      int v109 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v110 = AVE_GetCurrTime();
      __uint64_t v111 = AVE_Log_GetLevelStr(7);
      if (v109)
      {
        printf("%lld %d AVE %s: AddSEI: data blockBufferData %p (%ld)\n", v110, 221, v111, v108, v108 - (unsigned char *)a1);
        __uint64_t v112 = AVE_GetCurrTime();
        v136 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: data blockBufferData %p (%ld)", v112, 221, v136, v108, v108 - (unsigned char *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: data blockBufferData %p (%ld)", v110, 221, v111, v108, v108 - (unsigned char *)a1);
      }
    }
    *__uint64_t v108 = 0x80;
    __uint64_t v113 = v108 + 1;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      int v114 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v115 = AVE_GetCurrTime();
      __uint64_t v116 = AVE_Log_GetLevelStr(7);
      int64_t v117 = v113 - (unsigned char *)a1;
      if (v114)
      {
        printf("%lld %d AVE %s: AddSEI: rbsp_trailing_bits blockBufferData %p (%ld)\n", v115, 221, v116, v113, v113 - (unsigned char *)a1);
        __uint64_t v118 = AVE_GetCurrTime();
        v137 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: rbsp_trailing_bits blockBufferData %p (%ld)", v118, 221, v137, v113, v117);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: rbsp_trailing_bits blockBufferData %p (%ld)", v115, 221, v116, v113, v113 - (unsigned char *)a1);
      }
    }
    else
    {
      LODWORD(v117) = v113 - a1;
    }
    *a6 = v117;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      int v119 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v120 = AVE_GetCurrTime();
      v121 = AVE_Log_GetLevelStr(7);
      int v122 = *a6;
      if (v119)
      {
        printf("%lld %d AVE %s: AddSEI: final SEISize %d\n", v120, 221, v121, v122);
        __uint64_t v123 = AVE_GetCurrTime();
        v138 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: final SEISize %d", v123, 221, v138, *a6);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: final SEISize %d", v120, 221, v121, v122);
      }
    }
    uint64_t v37 = 0;
    goto LABEL_179;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    int v84 = AVE_Log_CheckConsole(3u);
    __uint64_t v85 = AVE_GetCurrTime();
    int64_t v86 = AVE_Log_GetLevelStr(4);
    __uint64_t v87 = __n_4;
    if (v84)
    {
      printf("%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL\n", v85, 3, v86, "AddUnregisteredSEI", 1158, "false");
      __uint64_t v88 = AVE_GetCurrTime();
      v131 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL", v88, 3, v131, "AddUnregisteredSEI", 1158, "false");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL", v85, 3, v86, "AddUnregisteredSEI", 1158, "false");
    }
    uint64_t v37 = 4294966295;
  }
  else
  {
    uint64_t v37 = 4294966295;
    __uint64_t v87 = __n_4;
  }
LABEL_179:
  if (v87 && a5) {
    free(v87);
  }
  free(v33);
  return v37;
}

void AddBufferingPeriodSEI()
{
}

void sub_1BA6F99F4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9F01B0](v1, 0x1091C406BACDF82);
  _Unwind_Resume(a1);
}

void AddActiveParameterSetsSEI()
{
}

void sub_1BA6FA42C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9F01B0](v1, 0x1091C406BACDF82);
  _Unwind_Resume(a1);
}

void AddContentColourVolumeSEI()
{
  uint64_t v0 = 0;
  v13[3] = *MEMORY[0x1E4F143B8];
  memset(v13, 0, 24);
  v12[0] = xmmword_1BA78F690;
  v12[1] = xmmword_1BA78F6A0;
  v12[2] = xmmword_1BA78F6B0;
  float64x2_t v10 = (float64x2_t)vdupq_n_s64(0x40E86A0000000000uLL);
  while (1)
  {
    int32x2_t v11 = vmovn_s64(vcvtq_s64_f64(vmulq_f64((float64x2_t)v12[v0], v10)));
    v13[v0] = v11;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      int v1 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(7);
      if (v1)
      {
        printf("%lld %d AVE %s: AddContentColourVolumeSEI: ccv primaries\n", CurrTime, 221, LevelStr);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(7);
      }
      syslog(3, "%lld %d AVE %s: AddContentColourVolumeSEI: ccv primaries", CurrTime, 221, LevelStr);
    }
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      int v4 = AVE_Log_CheckConsole(0xDDu);
      __uint64_t v5 = AVE_GetCurrTime();
      unsigned int v6 = AVE_Log_GetLevelStr(7);
      if (v4)
      {
        printf("%lld %d AVE %s: ccv_primaries %d (x, y) (%d, %d)\n", v5, 221, v6, v0, v11.i32[0], v11.i32[1]);
        __uint64_t v5 = AVE_GetCurrTime();
        unsigned int v6 = AVE_Log_GetLevelStr(7);
      }
      syslog(3, "%lld %d AVE %s: ccv_primaries %d (x, y) (%d, %d)", v5, 221, v6, v0, v11.i32[0], v11.i32[1]);
    }
    if (++v0 == 3)
    {
      if (AVE_Log_CheckLevel(0xDDu, 7))
      {
        int v7 = AVE_Log_CheckConsole(0xDDu);
        __uint64_t v8 = AVE_GetCurrTime();
        int v9 = AVE_Log_GetLevelStr(7);
        if (v7)
        {
          printf("%lld %d AVE %s: \n", v8, 221, v9);
          __uint64_t v8 = AVE_GetCurrTime();
          int v9 = AVE_Log_GetLevelStr(7);
        }
        syslog(3, "%lld %d AVE %s: ", v8, 221, v9);
      }
      operator new();
    }
  }
}

void sub_1BA6FB348(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9F01B0](v1, 0x1091C406BACDF82);
  _Unwind_Resume(a1);
}

void AddAmbientViewingEnvironmentSEI()
{
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    int v0 = AVE_Log_CheckConsole(0xDDu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v0)
    {
      printf("%lld %d AVE %s: \n", CurrTime, 221, LevelStr);
      __uint64_t v3 = AVE_GetCurrTime();
      int v4 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: ", v3, 221, v4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: ", CurrTime, 221, LevelStr);
    }
  }
  operator new();
}

void sub_1BA6FBEB8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9F01B0](v1, 0x1091C406BACDF82);
  _Unwind_Resume(a1);
}

void AddPictureTimingSEI()
{
}

void sub_1BA6FC9E4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9F01B0](v1, 0x1091C406BACDF82);
  _Unwind_Resume(a1);
}

void AddAccessUnitDelimiter()
{
}

void sub_1BA6FD3D0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9F01B0](v1, 0x1091C406BACDF82);
  _Unwind_Resume(a1);
}

uint64_t AVE_DEBUG_SetCallback(uint64_t a1, _OWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = DerivedStorage;
  if (DerivedStorage)
  {
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
    if (AVE_Log_CheckLevel(0x14u, 7))
    {
      int v5 = AVE_Log_CheckConsole(0x14u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(7);
      if (v5)
      {
        printf("%lld %d AVE %s: FIG: ENTER AVE_DEBUG_SetCallback\n", CurrTime, 20, LevelStr);
        __uint64_t v8 = AVE_GetCurrTime();
        __uint64_t v24 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_DEBUG_SetCallback", v8, 20, v24);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_DEBUG_SetCallback", CurrTime, 20, LevelStr);
      }
    }
    if (a2)
    {
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        int v13 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v14 = AVE_GetCurrTime();
        int v15 = AVE_Log_GetLevelStr(7);
        if (v13)
        {
          printf("%lld %d AVE %s: FIG: AVEFIG_DEBUG_SetCallback called %p -> %p sz %lu \n", v14, 46, v15, (const void *)(v4 + 32), a2, 32);
          __uint64_t v16 = AVE_GetCurrTime();
          __uint64_t v26 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: FIG: AVEFIG_DEBUG_SetCallback called %p -> %p sz %lu ", v16, 46, v26, (const void *)(v4 + 32), a2, 32);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: AVEFIG_DEBUG_SetCallback called %p -> %p sz %lu ", v14, 46, v15, (const void *)(v4 + 32), a2, 32);
        }
      }
      uint64_t v17 = 0;
      long long v18 = a2[1];
      *(_OWORD *)(v4 + 32) = *a2;
      *(_OWORD *)(v4 + 48) = v18;
    }
    else
    {
      uint64_t v17 = 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v9 = AVE_Log_CheckConsole(3u);
      __uint64_t v10 = AVE_GetCurrTime();
      int32x2_t v11 = AVE_Log_GetLevelStr(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v10, 3, v11, "AVE_DEBUG_SetCallback", 568, "encoderPrivateStorage");
        __uint64_t v12 = AVE_GetCurrTime();
        int v25 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v12, 3, v25, "AVE_DEBUG_SetCallback", 568, "encoderPrivateStorage");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v10, 3, v11, "AVE_DEBUG_SetCallback", 568, "encoderPrivateStorage");
      }
    }
    uint64_t v17 = 4294954384;
  }
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v19 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v20 = AVE_GetCurrTime();
    int v21 = AVE_Log_GetLevelStr(7);
    if (v19)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_DEBUG_SetCallback err %d\n", v20, 20, v21, v17);
      __uint64_t v22 = AVE_GetCurrTime();
      __uint64_t v27 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_DEBUG_SetCallback err %d", v22, 20, v27, v17);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_DEBUG_SetCallback err %d", v20, 20, v21, v17);
    }
  }
  if (v4) {
    pthread_mutex_unlock((pthread_mutex_t *)(v4 + 183448));
  }
  return v17;
}

uint64_t AVE_RemoteSession_HEVCSetCallback()
{
  return 4294954381;
}

uint64_t AVE_Plugin_HEVC_CreateInstance(int a1, const void *a2, void *a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  *(_OWORD *)__uint64_t v27 = 0u;
  long long v28 = 0u;
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    int v6 = AVE_Log_CheckConsole(0x14u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v6)
    {
      printf("%lld %d AVE %s: Enter %s %d %p %p\n", CurrTime, 20, LevelStr, "AVE_Plugin_HEVC_CreateInstance", a1, a2, a3);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: Enter %s %d %p %p", CurrTime, 20, LevelStr, "AVE_Plugin_HEVC_CreateInstance", a1, a2, a3);
  }
  if (AVE_Log_CheckLevel(0x14u, 0))
  {
    int v9 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v10 = AVE_GetCurrTime();
    int32x2_t v11 = AVE_Log_GetLevelStr(0);
    if (v9)
    {
      printf("%lld %d AVE %s: Compiled %s in %s on %s %s\n", v10, 20, v11, "803.48.1", "prod", "Nov 14 2024", "22:51:22");
      __uint64_t v10 = AVE_GetCurrTime();
      int32x2_t v11 = AVE_Log_GetLevelStr(0);
    }
    syslog(3, "%lld %d AVE %s: Compiled %s in %s on %s %s", v10, 20, v11, "803.48.1", "prod", "Nov 14 2024", "22:51:22");
  }
  if ((int)AVE_GetTemporayPath(v27, 128) >= 1 && AVE_Log_CheckLevel(0x14u, 0))
  {
    BOOL v12 = AVE_Log_CheckConsole(0x14u) == 0;
    __uint64_t v13 = AVE_GetCurrTime();
    __uint64_t v14 = AVE_Log_GetLevelStr(0);
    if (!v12)
    {
      printf("%lld %d AVE %s: Temporary Path: %s\n", v13, 20, v14, v27);
      __uint64_t v13 = AVE_GetCurrTime();
      __uint64_t v14 = AVE_Log_GetLevelStr(0);
    }
    syslog(3, "%lld %d AVE %s: Temporary Path: %s", v13, 20, v14, v27);
  }
  AVE_GetCurrTime();
  AVE_Log_Init();
  AVE_DW_Init();
  int v15 = AVE_DW_Get();
  AVE_Log_Config((uint64_t)v15 + 920);
  if (a1 == 1752589105 || a1 == 1869117027)
  {
    kdebug_trace();
    VTVideoEncoderGetClassID();
    CMDerivedObjectCreate();
    if (AVE_Log_CheckLevel(3u, 4))
    {
      BOOL v19 = AVE_Log_CheckConsole(3u) == 0;
      __uint64_t v20 = AVE_GetCurrTime();
      int v21 = AVE_Log_GetLevelStr(4);
      if (!v19)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigDerivedObjectCreate failed\n", v20, 3, v21, "AVE_Plugin_HEVC_CreateInstance", 4592, "encoderInstance != __null");
        __uint64_t v20 = AVE_GetCurrTime();
        int v21 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigDerivedObjectCreate failed", v20, 3, v21, "AVE_Plugin_HEVC_CreateInstance", 4592, "encoderInstance != __null");
    }
    uint64_t v22 = 4294954389;
  }
  else
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      BOOL v16 = AVE_Log_CheckConsole(3u) == 0;
      __uint64_t v17 = AVE_GetCurrTime();
      long long v18 = AVE_Log_GetLevelStr(4);
      if (!v16)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: codecType not supported\n", v17, 3, v18, "AVE_Plugin_HEVC_CreateInstance", 4581, "(codecType == kCMVideoCodecType_HEVC || codecType == kFigVideoCodecType_HEVC_WirelessDisplayEncrypted)");
        __uint64_t v17 = AVE_GetCurrTime();
        long long v18 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: codecType not supported", v17, 3, v18, "AVE_Plugin_HEVC_CreateInstance", 4581, "(codecType == kCMVideoCodecType_HEVC || codecType == kFigVideoCodecType_HEVC_WirelessDisplayEncrypted)");
    }
    uint64_t v22 = 4294954394;
  }
  *a3 = 0;
  kdebug_trace();
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    BOOL v23 = AVE_Log_CheckConsole(0x14u) == 0;
    __uint64_t v24 = AVE_GetCurrTime();
    int v25 = AVE_Log_GetLevelStr(6);
    if (!v23)
    {
      printf("%lld %d AVE %s: Exit %s %d %p %p%d\n", v24, 20, v25, "AVE_Plugin_HEVC_CreateInstance", a1, a2, a3, v22);
      __uint64_t v24 = AVE_GetCurrTime();
      int v25 = AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: Exit %s %d %p %p%d", v24, 20, v25, "AVE_Plugin_HEVC_CreateInstance", a1, a2, a3, v22);
  }
  return v22;
}

void sub_1BA6FE564(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9F01B0](v1, 0x1020C402E7EA3AFLL);
  _Unwind_Resume(a1);
}

uint64_t AVE_CreateSupportedPropertyDictionary(uint64_t a1, __CFDictionary **a2, __CFDictionary **a3)
{
  int v6 = AVE_DW_Get();
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v32 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v32)
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryCreateMutable failed.", CurrTime, 3, LevelStr, "AVE_CreateSupportedPropertyDictionary", 4096, "PropertyDictionaryHEIF");
      goto LABEL_269;
    }
    uint64_t v35 = "PropertyDictionaryHEIF";
    int v36 = 4096;
LABEL_259:
    printf("%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryCreateMutable failed.\n", CurrTime, 3, LevelStr, "AVE_CreateSupportedPropertyDictionary", v36, v35);
    AVE_GetCurrTime();
    AVE_Log_GetLevelStr(4);
    goto LABEL_268;
  }
  int v9 = Mutable;
  CFStringRef v10 = (const __CFString *)*MEMORY[0x1E4F45340];
  CFStringRef v11 = (const __CFString *)*MEMORY[0x1E4F449C8];
  if (!AVE_AddSupportedProperty(Mutable, (const __CFString *)*MEMORY[0x1E4F45340], (const __CFString *)*MEMORY[0x1E4F449C8], 0))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v37 = AVE_Log_CheckConsole(3u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (!v37) {
        goto LABEL_268;
      }
      uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxKeyFra"
            "meInterval, false)";
      int v36 = 4098;
      goto LABEL_259;
    }
    goto LABEL_269;
  }
  if (!AVE_AddSupportedProperty(v9, v10, @"StrictKeyFrameInterval", 0))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v38 = AVE_Log_CheckConsole(3u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (!v38) {
        goto LABEL_268;
      }
      uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFString"
            "MakeConstantString (\"\" \"StrictKeyFrameInterval\" \"\")), false)";
      int v36 = 4099;
      goto LABEL_259;
    }
    goto LABEL_269;
  }
  CFStringRef v12 = (const __CFString *)*MEMORY[0x1E4F45330];
  CFStringRef v13 = (const __CFString *)*MEMORY[0x1E4F447E8];
  if (!AVE_AddSupportedProperty(v9, (const __CFString *)*MEMORY[0x1E4F45330], (const __CFString *)*MEMORY[0x1E4F447E8], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v39 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v39)
    {
LABEL_268:
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryCreateMutable failed.");
      goto LABEL_269;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowTempo"
          "ralCompression, false)";
    int v36 = 4100;
    goto LABEL_259;
  }
  __uint64_t v14 = (int *)(a1 + 183564);
  if (*v14 >= 6)
  {
    if (!AVE_AddSupportedProperty(v9, (const __CFString *)*MEMORY[0x1E4F45338], @"ReconstructedPixelBufferAttributes", 1))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v40 = AVE_Log_CheckConsole(3u);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (!v40) {
          goto LABEL_268;
        }
        uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___C"
              "FStringMakeConstantString (\"\" \"ReconstructedPixelBufferAttributes\" \"\")), true)";
        int v36 = 4104;
        goto LABEL_259;
      }
      goto LABEL_269;
    }
    if (!AVE_AddSupportedProperty(v9, v10, @"ReconstructedPixelBuffer", 0))
    {
      if (!AVE_Log_CheckLevel(3u, 4)) {
        goto LABEL_269;
      }
      int v48 = AVE_Log_CheckConsole(3u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (!v48) {
        goto LABEL_268;
      }
      uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFString"
            "MakeConstantString (\"\" \"ReconstructedPixelBuffer\" \"\")), false)";
      int v36 = 4106;
      goto LABEL_259;
    }
  }
  CFStringRef v298 = v12;
  int v15 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v15)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v41 = AVE_Log_CheckConsole(3u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (!v41) {
        goto LABEL_268;
      }
      uint64_t v35 = "Dictionary";
      int v36 = 4112;
      goto LABEL_259;
    }
    goto LABEL_269;
  }
  BOOL v16 = v15;
  v290 = a3;
  v289 = (const void *)*MEMORY[0x1E4F45328];
  CFStringRef v296 = (const __CFString *)*MEMORY[0x1E4F45338];
  CFDictionarySetValue(v15, (const void *)*MEMORY[0x1E4F45328], (const void *)*MEMORY[0x1E4F45338]);
  v291 = (const void *)*MEMORY[0x1E4F452E8];
  v292 = (const void *)*MEMORY[0x1E4F452F8];
  CFDictionarySetValue(v16, (const void *)*MEMORY[0x1E4F452E8], (const void *)*MEMORY[0x1E4F452F8]);
  v293 = (const void *)*MEMORY[0x1E4F45300];
  v294 = (const void *)*MEMORY[0x1E4F1CFC8];
  CFDictionarySetValue(v16, (const void *)*MEMORY[0x1E4F45300], (const void *)*MEMORY[0x1E4F1CFC8]);
  __uint64_t v17 = v14;
  long long v18 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
  v288 = (const void *)*MEMORY[0x1E4F452D0];
  CFArrayAppendValue(v18, (const void *)*MEMORY[0x1E4F452D0]);
  v287 = (const void *)*MEMORY[0x1E4F452A8];
  CFArrayAppendValue(v18, (const void *)*MEMORY[0x1E4F452A8]);
  value = (void *)*MEMORY[0x1E4F452C8];
  CFArrayAppendValue(v18, (const void *)*MEMORY[0x1E4F452C8]);
  v285 = (void *)*MEMORY[0x1E4F452C0];
  CFArrayAppendValue(v18, (const void *)*MEMORY[0x1E4F452C0]);
  v284 = (void *)*MEMORY[0x1E4F452B8];
  CFArrayAppendValue(v18, (const void *)*MEMORY[0x1E4F452B8]);
  v297 = v17;
  if (v17[1] == 6 || *v17 >= 7) {
    CFArrayAppendValue(v18, (const void *)*MEMORY[0x1E4F452B0]);
  }
  BOOL v19 = (const void *)*MEMORY[0x1E4F452D8];
  CFArrayAppendValue(v18, (const void *)*MEMORY[0x1E4F452D8]);
  v283 = (void *)*MEMORY[0x1E4F452E0];
  CFArrayAppendValue(v18, (const void *)*MEMORY[0x1E4F452E0]);
  CFStringRef v295 = (const __CFString *)*MEMORY[0x1E4F45310];
  CFDictionarySetValue(v16, (const void *)*MEMORY[0x1E4F45310], v18);
  if (v18) {
    CFRelease(v18);
  }
  __uint64_t v20 = (void *)*MEMORY[0x1E4F44AA0];
  CFDictionarySetValue(v9, (const void *)*MEMORY[0x1E4F44AA0], v16);
  CFRelease(v16);
  CFStringRef v21 = (const __CFString *)*MEMORY[0x1E4F449D0];
  if (!AVE_AddSupportedProperty(v9, v10, (const __CFString *)*MEMORY[0x1E4F449D0], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v47 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v47) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxKeyFrame"
          "IntervalDuration, false)";
    int v36 = 4152;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v10, @"StrictKeyFrameIntervalDuration", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v49 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v49) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"StrictKeyFrameIntervalDuration\" \"\")), false)";
    int v36 = 4153;
    goto LABEL_259;
  }
  if (!v6[344]) {
    goto LABEL_41;
  }
  if (!AVE_AddSupportedProperty(v9, v10, @"InitialQPI", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v50 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v50) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"InitialQPI\" \"\")), false)";
    int v36 = 4157;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v10, @"InitialQPP", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v52 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v52) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"InitialQPP\" \"\")), false)";
    int v36 = 4158;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v10, @"InitialQPB", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v54 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v54) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"InitialQPB\" \"\")), false)";
    int v36 = 4159;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v10, (const __CFString *)*MEMORY[0x1E4F44A48], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v56 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v56) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_OutputBitDepth, false)";
    int v36 = 4160;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v10, @"EnableMBInputCtrl", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v58 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v58) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"EnableMBInputCtrl\" \"\")), false)";
    int v36 = 4161;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v10, (const __CFString *)*MEMORY[0x1E4F44B68], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v60 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v60) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_Usage, false)";
    int v36 = 4162;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v10, @"EnableRCDriver", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v62 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v62) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"EnableRCDriver\" \"\")), false)";
    int v36 = 4163;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v10, @"EnableRCFW", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v64 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v64) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"EnableRCFW\" \"\")), false)";
    int v36 = 4164;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v298, @"UseCAVLCBits", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v66 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v66) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"UseCAVLCBits\" \"\")), false)";
    int v36 = 4165;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v10, @"EnableQPMod", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v68 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v68) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"EnableQPMod\" \"\")), false)";
    int v36 = 4166;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v298, (const __CFString *)*MEMORY[0x1E4F448B8], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v70 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v70) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_EnableQPMo"
          "dulation, false)";
    int v36 = 4167;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v10, @"EnableLambdaMod", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v72 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v72) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"EnableLambdaMod\" \"\")), false)";
    int v36 = 4168;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v10, @"ThroughputRateMode", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v74 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v74) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"ThroughputRateMode\" \"\")), false)";
    int v36 = 4169;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v10, @"SAOMode", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v76 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v76) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"SAOMode\" \"\")), false)";
    int v36 = 4170;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v298, @"UseHWTileOffsets", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v78 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v78) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"UseHWTileOffsets\" \"\")), false)";
    int v36 = 4171;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v296, @"SessionName", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v80 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v80) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStr"
          "ingMakeConstantString (\"\" \"SessionName\" \"\")), false)";
    int v36 = 4172;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v10, @"BPictures", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v82 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v82) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"BPictures\" \"\")), false)";
    int v36 = 4174;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v298, @"EnableAdaptB", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v84 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v84) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"EnableAdaptB\" \"\")), false)";
    int v36 = 4175;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v298, @"EnableCompleteGOP", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v86 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v86) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"EnableCompleteGOP\" \"\")), false)";
    int v36 = 4176;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v10, @"EdgeReplication", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v88 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v88) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"EdgeReplication\" \"\")), false)";
    int v36 = 4177;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v10, @"EnableStatsCollect", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v90 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v90) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"EnableStatsCollect\" \"\")), false)";
    int v36 = 4178;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v10, (const __CFString *)*MEMORY[0x1E4F44A30], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v91 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v91) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_NumberOfSlices, false)";
    int v36 = 4179;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v298, @"RCMode", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v94 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v94) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"RCMode\" \"\")), false)";
    int v36 = 4180;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v10, @"SVENum", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v96 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v96) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"SVENum\" \"\")), false)";
    int v36 = 4181;
    goto LABEL_259;
  }
LABEL_41:
  key = v20;
  v282 = (__CFString *)*MEMORY[0x1E4F447D0];
  if (!AVE_AddSupportedProperty(v9, v298, (const __CFString *)*MEMORY[0x1E4F447D0], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v51 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v51) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowFrame"
          "Reordering, false)";
    int v36 = 4184;
    goto LABEL_259;
  }
  v280 = (__CFString *)*MEMORY[0x1E4F44B18];
  if (!AVE_AddSupportedProperty(v9, v10, (const __CFString *)*MEMORY[0x1E4F44B18], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v53 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v53) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_SourceFrameCount, false)";
    int v36 = 4185;
    goto LABEL_259;
  }
  v279 = (__CFString *)*MEMORY[0x1E4F448F0];
  if (!AVE_AddSupportedProperty(v9, v10, (const __CFString *)*MEMORY[0x1E4F448F0], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v55 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v55) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_ExpectedFrameRate, false)";
    int v36 = 4186;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v10, @"MaximumRealTimeFrameRate", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v57 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v57) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"MaximumRealTimeFrameRate\" \"\")), false)";
    int v36 = 4188;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v298, (const __CFString *)*MEMORY[0x1E4F447D8], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v59 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v59) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowOpenGOP, false)";
    int v36 = 4189;
    goto LABEL_259;
  }
  CFAllocatorRef allocator = v7;
  CFStringRef v22 = (const __CFString *)*MEMORY[0x1E4F44810];
  if (!AVE_AddSupportedProperty(v9, v10, (const __CFString *)*MEMORY[0x1E4F44810], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v61 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v61) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_AverageBitRate, false)";
    int v36 = 4190;
    goto LABEL_259;
  }
  CFStringRef v23 = (const __CFString *)*MEMORY[0x1E4F44A98];
  if (!AVE_AddSupportedProperty(v9, v10, (const __CFString *)*MEMORY[0x1E4F44A98], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v63 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v63) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_Priority, false)";
    int v36 = 4191;
    goto LABEL_259;
  }
  v277 = (__CFString *)*MEMORY[0x1E4F44988];
  if (!AVE_AddSupportedProperty(v9, v10, (const __CFString *)*MEMORY[0x1E4F44988], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v65 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v65) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_InputQueueMaxCount, false)";
    int v36 = 4192;
    goto LABEL_259;
  }
  v276 = (__CFString *)*MEMORY[0x1E4F44B80];
  if (!AVE_AddSupportedProperty(v9, v298, (const __CFString *)*MEMORY[0x1E4F44B80], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v67 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v67) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_UsingHardw"
          "areAcceleratedVideoEncoder, false)";
    int v36 = 4193;
    goto LABEL_259;
  }
  v275 = (__CFString *)*MEMORY[0x1E4F44980];
  if (!AVE_AddSupportedProperty(v9, v10, (const __CFString *)*MEMORY[0x1E4F44980], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v69 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v69) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_InputPixelFormat, false)";
    int v36 = 4194;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v10, @"CodedBuffersOverride", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v71 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v71) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"CodedBuffersOverride\" \"\")), false)";
    int v36 = 4195;
    goto LABEL_259;
  }
  AVE_VUI_AddAllToCFDict(v9);
  v274 = (__CFString *)*MEMORY[0x1E4F44AB8];
  if (!AVE_AddSupportedProperty(v9, v10, (const __CFString *)*MEMORY[0x1E4F44AB8], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v73 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v73) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_Quantizatio"
          "nScalingMatrixPreset, false)";
    int v36 = 4199;
    goto LABEL_259;
  }
  v273 = (__CFString *)*MEMORY[0x1E4F44930];
  if (!AVE_AddSupportedProperty(v9, v296, (const __CFString *)*MEMORY[0x1E4F44930], 1))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v75 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v75) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Enumeration, kVTCompressionPropertyKey_HEVCSy"
          "ncSampleNALUnitTypes, true)";
    int v36 = 4200;
    goto LABEL_259;
  }
  v272 = (__CFString *)*MEMORY[0x1E4F44938];
  if (!AVE_AddSupportedProperty(v9, v296, (const __CFString *)*MEMORY[0x1E4F44938], 1))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v77 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v77) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Enumeration, kVTCompressionPropertyKey_HEVCTe"
          "mporalLevelInfoCombinations, true)";
    int v36 = 4201;
    goto LABEL_259;
  }
  v271 = (__CFString *)*MEMORY[0x1E4F44AB0];
  if (!AVE_AddSupportedProperty(v9, v10, (const __CFString *)*MEMORY[0x1E4F44AB0], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v79 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v79) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_Quality, false)";
    int v36 = 4202;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v298, (const __CFString *)*MEMORY[0x1E4F448B8], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v81 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v81) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_EnableQPMo"
          "dulation, false)";
    int v36 = 4203;
    goto LABEL_259;
  }
  CFStringRef v270 = (const __CFString *)*MEMORY[0x1E4F44AC0];
  if (!AVE_AddSupportedProperty(v9, v298, (const __CFString *)*MEMORY[0x1E4F44AC0], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v83 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v83) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_RealTime, false)";
    int v36 = 4204;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v295, (const __CFString *)*MEMORY[0x1E4F449B0], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v85 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v85) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_M"
          "asteringDisplayColorVolume, false)";
    int v36 = 4206;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v295, (const __CFString *)*MEMORY[0x1E4F44880], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v87 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v87) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_C"
          "ontentLightLevelInfo, false)";
    int v36 = 4207;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(v9, v298, @"CalculateMeanSquaredError", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v89 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v89) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"CalculateMeanSquaredError\" \"\")), false)";
    int v36 = 4208;
    goto LABEL_259;
  }
  theuint64_t Dict = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!theDict)
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v92 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v92) {
      goto LABEL_268;
    }
    uint64_t v35 = "PropertyDictionary";
    int v36 = 4214;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, v11, 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v93 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v93) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxKeyFrameInterval, false)";
    int v36 = 4216;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"StrictKeyFrameInterval", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v95 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v95) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"StrictKeyFrameInterval\" \"\")), false)";
    int v36 = 4217;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, v282, 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v97 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v97) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowFrameReordering, false)";
    int v36 = 4218;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, v13, 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v98 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v98) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowTemporalC"
          "ompression, false)";
    int v36 = 4219;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, v22, 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v99 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v99) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_AverageBitRate, false)";
    int v36 = 4220;
    goto LABEL_259;
  }
  __uint64_t v24 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v24)
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v100 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v100) {
      goto LABEL_268;
    }
    uint64_t v35 = "Dictionary";
    int v36 = 4225;
    goto LABEL_259;
  }
  int v25 = v24;
  CFDictionarySetValue(v24, v289, v296);
  CFDictionarySetValue(v25, v291, v292);
  CFDictionarySetValue(v25, v293, v294);
  __uint64_t v26 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
  CFArrayAppendValue(v26, v288);
  CFArrayAppendValue(v26, v287);
  CFArrayAppendValue(v26, value);
  CFArrayAppendValue(v26, v285);
  CFArrayAppendValue(v26, v284);
  if (v297[1] == 6 || *v297 >= 7) {
    CFArrayAppendValue(v26, (const void *)*MEMORY[0x1E4F452B0]);
  }
  CFArrayAppendValue(v26, v19);
  CFArrayAppendValue(v26, v283);
  CFDictionarySetValue(v25, v295, v26);
  if (v26) {
    CFRelease(v26);
  }
  CFDictionarySetValue(theDict, key, v25);
  CFRelease(v25);
  if (!AVE_AddSupportedProperty(theDict, v298, @"EnableWeightedPrediction", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v101 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v101) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableWeightedPrediction\" \"\")), false)";
    int v36 = 4264;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, v280, 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v102 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v102) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_SourceFrameCount, false)";
    int v36 = 4265;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, v279, 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v103 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v103) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_ExpectedFrameRate, false)";
    int v36 = 4266;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"MaximumRealTimeFrameRate", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v104 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v104) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MaximumRealTimeFrameRate\" \"\")), false)";
    int v36 = 4268;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E4F44898], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v105 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v105) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_DataRateLimits, false)";
    int v36 = 4269;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E4F44878], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v106 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v106) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_ConstantBitRate, false)";
    int v36 = 4270;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"VariableBitRate", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v107 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v107) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"VariableBitRate\" \"\")), false)";
    int v36 = 4271;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E4F44888], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v108 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v108) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_ConvergenceDura"
          "tionForAverageDataRate, false)";
    int v36 = 4272;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E4F44910], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v109 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v109) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_FrameRateTarget"
          "ForAverageBitrate, false)";
    int v36 = 4273;
    goto LABEL_259;
  }
  uint64_t v27 = AVE_VUI_AddAllToCFDict(theDict);
  CFDictionaryRef v28 = CFDictionaryCreate(allocator, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v28)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v110 = AVE_Log_CheckConsole(3u);
      __uint64_t v111 = AVE_GetCurrTime();
      __uint64_t v112 = AVE_Log_GetLevelStr(4);
      if (v110)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryCreate failed.\n", v111, 3, v112, "AVE_CreateSupportedPropertyDictionary", 4279, "Dictionary");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryCreate failed.");
    }
    goto LABEL_269;
  }
  CFDictionaryRef v29 = v28;
  CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F44A60], v28);
  CFRelease(v29);
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E4F448E8], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v113 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v113) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_ExpectedDuration, false)";
    int v36 = 4290;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, v21, 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v114 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v114) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxKeyFrameInte"
          "rvalDuration, false)";
    int v36 = 4291;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"StrictKeyFrameIntervalDuration", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v115 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v115) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"StrictKeyFrameIntervalDuration\" \"\")), false)";
    int v36 = 4292;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E4F44B68], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v116 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v116) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_Usage, false)";
    int v36 = 4293;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, (const __CFString *)*MEMORY[0x1E4F44B40], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v117 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v117) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_ThrottleForBackground, false)";
    int v36 = 4294;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"AllowOpenGOP", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v118 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v118) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"AllowOpenGOP\" \"\")), false)";
    int v36 = 4295;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"SpatialAdaptiveQPLevel", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v119 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v119) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SpatialAdaptiveQPLevel\" \"\")), false)";
    int v36 = 4296;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"LookAheadFrames", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v120 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v120) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"LookAheadFrames\" \"\")), false)";
    int v36 = 4297;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"PreemptiveLoadBalancing", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v121 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v121) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"PreemptiveLoadBalancing\" \"\")), false)";
    int v36 = 4298;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"EncoderEncryptionData", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v122 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v122) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EncoderEncryptionData\" \"\")), false)";
    int v36 = 4300;
    goto LABEL_259;
  }
  if (!v6[344]) {
    goto LABEL_140;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"InitialQPI", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v123 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v123) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"InitialQPI\" \"\")), false)";
    int v36 = 4304;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"InitialQPP", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v124 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v124) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"InitialQPP\" \"\")), false)";
    int v36 = 4305;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"InitialQPB", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v127 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v127) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"InitialQPB\" \"\")), false)";
    int v36 = 4306;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E4F44818], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v129 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v129) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_AverageNonDropp"
          "ableFrameRate, false)";
    int v36 = 4307;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"EnableRCFW", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v131 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v131) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableRCFW\" \"\")), false)";
    int v36 = 4308;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"EnableRCDriver", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v133 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v133) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableRCDriver\" \"\")), false)";
    int v36 = 4309;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"SetDbgInternalParams", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v135 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v135) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SetDbgInternalParams\" \"\")), false)";
    int v36 = 4310;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"EnableQPMod", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v137 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v137) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableQPMod\" \"\")), false)";
    int v36 = 4311;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"EnableLambdaMod", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v139 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v139) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableLambdaMod\" \"\")), false)";
    int v36 = 4312;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"EnableVarianceQPMod", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v142 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v142) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableVarianceQPMod\" \"\")), false)";
    int v36 = 4313;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"FlatAreaLowQp", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v143 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v143) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"FlatAreaLowQp\" \"\")), false)";
    int v36 = 4314;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"EnableLowVarianceQPMod", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v144 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v144) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableLowVarianceQPMod\" \"\")), false)";
    int v36 = 4315;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"UseCAVLCBits", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v145 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v145) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"UseCAVLCBits\" \"\")), false)";
    int v36 = 4316;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"EnableStaticAreasLowQP", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v146 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v146) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableStaticAreasLowQP\" \"\")), false)";
    int v36 = 4317;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"UseAsyncFWScheduling", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v147 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v147) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"UseAsyncFWScheduling\" \"\")), false)";
    int v36 = 4318;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"BPictures", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v148 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v148) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"BPictures\" \"\")), false)";
    int v36 = 4319;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"EnableAdaptB", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v149 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v149) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableAdaptB\" \"\")), false)";
    int v36 = 4320;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"EnableCompleteGOP", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v150 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v150) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableCompleteGOP\" \"\")), false)";
    int v36 = 4321;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"LowDelay", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v151 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v151) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"LowDelay\" \"\")), false)";
    int v36 = 4322;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"UltraFlatAreaLowQp", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v152 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v152) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"UltraFlatAreaLowQp\" \"\")), false)";
    int v36 = 4323;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"HevcSplitDecision", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v153 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v153) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"HevcSplitDecision\" \"\")), false)";
    int v36 = 4324;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"EnableHevcDeRingingQPMod", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v154 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v154) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableHevcDeRingingQPMod\" \"\")), false)";
    int v36 = 4325;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"ChromaQpOffset", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v155 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v155) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"ChromaQpOffset\" \"\")), false)";
    int v36 = 4326;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"ThroughputRateMode", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v156 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v156) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"ThroughputRateMode\" \"\")), false)";
    int v36 = 4327;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"EnableHdrPqRC", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v157 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v157) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableHdrPqRC\" \"\")), false)";
    int v36 = 4328;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"LRMEScaledSrcEn", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v158 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v158) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"LRMEScaledSrcEn\" \"\")), false)";
    int v36 = 4329;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"LRMEOutputType", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v159 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v159) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"LRMEOutputType\" \"\")), false)";
    int v36 = 4330;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"AdaptBPocDelay", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v160 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v160) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"AdaptBPocDelay\" \"\")), false)";
    int v36 = 4331;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"SetMultiPassNum", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v161 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v161) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SetMultiPassNum\" \"\")), false)";
    int v36 = 4332;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"MultiPassConstantQP", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v162 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v162) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MultiPassConstantQP\" \"\")), false)";
    int v36 = 4333;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"MultiPassQPModLevel", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v163 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v163) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MultiPassQPModLevel\" \"\")), false)";
    int v36 = 4334;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"MultiPassMaxQPModLevel", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v164 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v164) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MultiPassMaxQPModLevel\" \"\")), false)";
    int v36 = 4335;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"MultiPassOptions", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v165 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v165) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MultiPassOptions\" \"\")), false)";
    int v36 = 4336;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"MCTFStrengthLevel", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v166 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v166) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MCTFStrengthLevel\" \"\")), false)";
    int v36 = 4337;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"LatencyMode", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v167 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v167) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"LatencyMode\" \"\")), false)";
    int v36 = 4338;
    goto LABEL_259;
  }
  if (*v297 >= 3)
  {
    if (!AVE_AddSupportedProperty(theDict, v298, @"UseReferenceCompressedBuffers", 0))
    {
      if (!AVE_Log_CheckLevel(3u, 4)) {
        goto LABEL_269;
      }
      int v168 = AVE_Log_CheckConsole(3u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (!v168) {
        goto LABEL_268;
      }
      uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"UseReferenceCompressedBuffers\" \"\")), false)";
      int v36 = 4342;
      goto LABEL_259;
    }
    if (!AVE_AddSupportedProperty(theDict, v10, @"EdgeReplication", 0))
    {
      if (!AVE_Log_CheckLevel(3u, 4)) {
        goto LABEL_269;
      }
      int v169 = AVE_Log_CheckConsole(3u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (!v169) {
        goto LABEL_268;
      }
      uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"EdgeReplication\" \"\")), false)";
      int v36 = 4343;
      goto LABEL_259;
    }
  }
  if (!AVE_AddSupportedProperty(theDict, v296, @"SessionName", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v170 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v170) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"SessionName\" \"\")), false)";
    int v36 = 4346;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"HierarchicalB", 1))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v171 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v171) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"HierarchicalB\" \"\")), true)";
    int v36 = 4347;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"RCMode", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v172 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v172) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"RCMode\" \"\")), false)";
    int v36 = 4348;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"EnableMultipleScalingMatrices", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v173 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v173) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableMultipleScalingMatrices\" \"\")), false)";
    int v36 = 4349;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"SVENum", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v174 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v174) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SVENum\" \"\")), false)";
    int v36 = 4350;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"LrmePipeSyncMode", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v175 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v175) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"LrmePipeSyncMode\" \"\")), false)";
    int v36 = 4351;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"EnableSEITagInsertion", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v176 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v176) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableSEITagInsertion\" \"\")), false)";
    int v36 = 4352;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"EnableSliceEncodingMode", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v177 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v177) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableSliceEncodingMode\" \"\")), false)";
    int v36 = 4353;
    goto LABEL_259;
  }
LABEL_140:
  if (*v297 >= 3 && !AVE_AddSupportedProperty(theDict, v298, @"ForceRefUncompressed", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v126 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v126) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"ForceRefUncompressed\" \"\")), false)";
    int v36 = 4357;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"CalculateMeanSquaredError", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v125 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v125) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"CalculateMeanSquaredError\" \"\")), false)";
    int v36 = 4360;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, (const __CFString *)*MEMORY[0x1E4F44A90], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v128 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v128) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_PrioritizeEnco"
          "dingSpeedOverQuality, false)";
    int v36 = 4361;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E4F44A48], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v130 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v130) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_OutputBitDepth, false)";
    int v36 = 4362;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"SAOMode", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v132 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v132) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SAOMode\" \"\")), false)";
    int v36 = 4363;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E4F44A30], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v134 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v134) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_NumberOfSlices, false)";
    int v36 = 4364;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, v23, 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v136 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v136) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_Priority, false)";
    int v36 = 4365;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"DeblockingFiltering", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v138 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v138) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"DeblockingFiltering\" \"\")), false)";
    int v36 = 4366;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"DebugMetadataSEI", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v140 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v140) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"DebugMetadataSEI\" \"\")), false)";
    int v36 = 4367;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"DebugMetadataSEIuseEPB", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v178 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v178) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"DebugMetadataSEIuseEPB\" \"\")), false)";
    int v36 = 4368;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, v277, 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v179 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v179) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_InputQueueMaxCount, false)";
    int v36 = 4369;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"EnableUserQPForFacetime", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v180 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v180) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableUserQPForFacetime\" \"\")), false)";
    int v36 = 4370;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v296, (const __CFString *)*MEMORY[0x1E4F44B70], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v181 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v181) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, kVTCompressionPropertyKey_UserDPBFra"
          "mesForFaceTime, false)";
    int v36 = 4371;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v296, @"DPBRequirements", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v182 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v182) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"DPBRequirements\" \"\")), false)";
    int v36 = 4372;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"EnableUserRefForFacetime", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v183 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v183) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableUserRefForFacetime\" \"\")), false)";
    int v36 = 4373;
    goto LABEL_259;
  }
  long long v30 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v30)
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v141 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v141) {
      goto LABEL_268;
    }
    uint64_t v35 = "Dictionary";
    int v36 = 4380;
    goto LABEL_259;
  }
  long long v31 = v30;
  CFDictionarySetValue(v30, v291, v292);
  CFDictionarySetValue(v31, v293, v294);
  CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F44A10], v31);
  CFRelease(v31);
  if (!AVE_AddSupportedProperty(theDict, v10, v271, 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v184 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v184) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_Quality, false)";
    int v36 = 4393;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, v270, 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v185 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v185) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_RealTime, false)";
    int v36 = 4396;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, v276, 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v186 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v186) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_UsingHardwareA"
          "cceleratedVideoEncoder, false)";
    int v36 = 4397;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"EnableStatsCollect", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v187 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v187) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableStatsCollect\" \"\")), false)";
    int v36 = 4398;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"EnableMultiReferenceP", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v188 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v188) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableMultiReferenceP\" \"\")), false)";
    int v36 = 4399;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"MultiReferencePSpacing", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v189 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v189) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MultiReferencePSpacing\" \"\")), false)";
    int v36 = 4400;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"log2_max_minus4", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v190 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v190) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"log2_max_minus4\" \"\")), false)";
    int v36 = 4401;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, v275, 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v191 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v191) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_InputPixelFormat, false)";
    int v36 = 4402;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, (const __CFString *)*MEMORY[0x1E4F44A58], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v192 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v192) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_PerceptualQual"
          "ityOptimization, false)";
    int v36 = 4403;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"CodedBuffersOverride", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v193 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v193) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"CodedBuffersOverride\" \"\")), false)";
    int v36 = 4404;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"EnableMBInputCtrl", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v194 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v194) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableMBInputCtrl\" \"\")), false)";
    int v36 = 4405;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v296, @"UserRPSForFaceTime", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v195 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v195) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"UserRPSForFaceTime\" \"\")), false)";
    int v36 = 4406;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, (const __CFString *)*MEMORY[0x1E4F44B90], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v196 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v196) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_VideoResolutio"
          "nAdaptation, false)";
    int v36 = 4407;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, (const __CFString *)*MEMORY[0x1E4F44B98], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v197 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v197) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_VideoResolutio"
          "nAdaptationType, false)";
    int v36 = 4408;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"ChromaQPIndexOffsetMultiPPS", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v198 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v198) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"ChromaQPIndexOffsetMultiPPS\" \"\")), false)";
    int v36 = 4409;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"iChatUsageString", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v199 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v199) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"iChatUsageString\" \"\")), false)";
    int v36 = 4410;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E4F44B78], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v200 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v200) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_UserParameterSetsIds, false)";
    int v36 = 4411;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"BaseLayerFrameRate", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v201 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v201) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"BaseLayerFrameRate\" \"\")), false)";
    int v36 = 4412;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"IntraRefreshFrames", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v202 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v202) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"IntraRefreshFrames\" \"\")), false)";
    int v36 = 4413;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, v274, 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v203 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v203) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_QuantizationSca"
          "lingMatrixPreset, false)";
    int v36 = 4414;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E4F449B8], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v204 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v204) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxAllowedFrameQP, false)";
    int v36 = 4415;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E4F449E0], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v205 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v205) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_MinAllowedFrameQP, false)";
    int v36 = 4416;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E4F44BC0], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v206 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v206) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionProperty_SoftMinQuantizatio"
          "nParameter, false)";
    int v36 = 4417;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E4F44BB8], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v207 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v207) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionProperty_SoftMaxQuantizatio"
          "nParameter, false)";
    int v36 = 4418;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"ForceSliceRPS", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v208 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v208) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"ForceSliceRPS\" \"\")), false)";
    int v36 = 4419;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, (const __CFString *)*MEMORY[0x1E4F449C0], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v209 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v209) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_MaxFrameDelayCount, false)";
    int v36 = 4420;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"MaximizePowerEfficiency", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v210 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v210) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"MaximizePowerEfficiency\" \"\")), false)";
    int v36 = 4421;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, (const __CFString *)*MEMORY[0x1E4F449F8], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v211 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v211) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_MinimizeMemoryUsage, false)";
    int v36 = 4422;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, (const __CFString *)*MEMORY[0x1E4F44990], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v212 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v212) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_Inser"
          "tTrailingBytes, false)";
    int v36 = 4423;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, (const __CFString *)*MEMORY[0x1E4F44800], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v213 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v213) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_Ambie"
          "ntViewingEnvironment, false)";
    int v36 = 4424;
    goto LABEL_259;
  }
  if (*v297 >= 3 && !AVE_AddSupportedProperty(theDict, v298, @"RelaxAverageBitRateTarget", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v214 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v214) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"RelaxAverageBitRateTarget\" \"\")), false)";
    int v36 = 4427;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E4F44AF0], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v215 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v215) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_RequiredHEVCSeq"
          "uenceParameterSetID, false)";
    int v36 = 4430;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E4F44AE8], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v216 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v216) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_RequiredHEVCPic"
          "tureParameterSetID, false)";
    int v36 = 4431;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, (const __CFString *)*MEMORY[0x1E4F44AE0], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v217 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v217) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_RequireDetermi"
          "nisticDependencyAndReordering, false)";
    int v36 = 4432;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v296, v273, 1))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v218 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v218) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, kVTCompressionPropertyKey_HEVCSyncSa"
          "mpleNALUnitTypes, true)";
    int v36 = 4433;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v296, v272, 1))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v219 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v219) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, kVTCompressionPropertyKey_HEVCTempor"
          "alLevelInfoCombinations, true)";
    int v36 = 4434;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, (const __CFString *)*MEMORY[0x1E4F448D0], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v220 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v220) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_EncodesAlpha, false)";
    int v36 = 4435;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, @"RequiredHEVCVideoParameterSetRepFormatBitDepths", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v221 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v221) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertySupportedValueListKey, ((CFStringRef) __builtin___CFSt"
          "ringMakeConstantString (\"\" \"RequiredHEVCVideoParameterSetRepFormatBitDepths\" \"\")), false)";
    int v36 = 4437;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, @"RequiredHEVCVideoParameterSetRepFormatChromaFormatIdcs", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v222 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v222) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertySupportedValueListKey, ((CFStringRef) __builtin___CFSt"
          "ringMakeConstantString (\"\" \"RequiredHEVCVideoParameterSetRepFormatChromaFormatIdcs\" \"\")), false)";
    int v36 = 4439;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"RequiredHEVCSequenceParameterSetRepFormatIndex", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v223 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v223) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"RequiredHEVCSequenceParameterSetRepFormatIndex\" \"\")), false)";
    int v36 = 4441;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"EnableTimingInfoMetadata", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v224 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v224) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableTimingInfoMetadata\" \"\")), false)";
    int v36 = 4442;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"EnableContentColourVolumeSEI", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v225 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v225) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableContentColourVolumeSEI\" \"\")), false)";
    int v36 = 4443;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E4F44AF8], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v226 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v226) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_RequiredHEVCVid"
          "eoParameterSetAlphaLayerID, false)";
    int v36 = 4444;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, v271, 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v227 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v227) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_Quality, false)";
    int v36 = 4445;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"DroppablePFramesOnly", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v228 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v228) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"DroppablePFramesOnly\" \"\")), false)";
    int v36 = 4446;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"AllocCodedBufferHalfSize", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v229 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v229) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"AllocCodedBufferHalfSize\" \"\")), false)";
    int v36 = 4448;
    goto LABEL_259;
  }
  if (*v297 >= 8 && !AVE_AddSupportedProperty(theDict, v10, @"lrmeRCPassNum", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v230 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v230) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"lrmeRCPassNum\" \"\")), false)";
    int v36 = 4451;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"EncodesDisparity", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v231 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v231) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EncodesDisparity\" \"\")), false)";
    int v36 = 4453;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"EncodesDepth", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v232 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v232) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EncodesDepth\" \"\")), false)";
    int v36 = 4454;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"EnableVUI", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v233 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v233) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableVUI\" \"\")), false)";
    int v36 = 4456;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"EnableVUIBitstreamRestriction", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v234 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v234) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableVUIBitstreamRestriction\" \"\")), false)";
    int v36 = 4457;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"EnableMultiSliceStats", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v235 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v235) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableMultiSliceStats\" \"\")), false)";
    int v36 = 4458;
    goto LABEL_259;
  }
  if (*v297 < 16) {
    goto LABEL_228;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, (const __CFString *)*MEMORY[0x1E4F44B38], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v236 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v236) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_TemporalNoiseR"
          "eduction, false)";
    int v36 = 4462;
    goto LABEL_259;
  }
  if (*v297 < 22) {
    goto LABEL_228;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"SubjectiveDistortion32Weight0", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v237 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v237) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SubjectiveDistortion32Weight0\" \"\")), false)";
    int v36 = 4466;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"SubjectiveDistortion32Weight1", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v238 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v238) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SubjectiveDistortion32Weight1\" \"\")), false)";
    int v36 = 4467;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"SubjectiveDistortion32Weight2", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v239 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v239) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SubjectiveDistortion32Weight2\" \"\")), false)";
    int v36 = 4468;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"SubjectiveDistortion32Offset", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v240 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v240) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SubjectiveDistortion32Offset\" \"\")), false)";
    int v36 = 4469;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"SubjectiveDistortion32Scale", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v241 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v241) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SubjectiveDistortion32Scale\" \"\")), false)";
    int v36 = 4470;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"MultipleFTQNum", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v242 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v242) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MultipleFTQNum\" \"\")), false)";
    int v36 = 4471;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"MultipleFTQType", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v243 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v243) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MultipleFTQType\" \"\")), false)";
    int v36 = 4472;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"MultipleFTQSameLambda", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v244 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v244) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"MultipleFTQSameLambda\" \"\")), false)";
    int v36 = 4473;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"ForceZeroMVEn0", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v245 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v245) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"ForceZeroMVEn0\" \"\")), false)";
    int v36 = 4474;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, @"ForceZeroResEn", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v246 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v246) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"ForceZeroResEn\" \"\")), false)";
    int v36 = 4475;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"LRMEFSMVCostMode", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v247 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v247) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"LRMEFSMVCostMode\" \"\")), false)";
    int v36 = 4476;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"LRMEFSLambdaLinear", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v248 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v248) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"LRMEFSLambdaLinear\" \"\")), false)";
    int v36 = 4477;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"MCTFEdgeCount", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v249 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v249) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MCTFEdgeCount\" \"\")), false)";
    int v36 = 4478;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"MCTFEdgeThresh", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v250 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v250) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MCTFEdgeThresh\" \"\")), false)";
    int v36 = 4479;
    goto LABEL_259;
  }
LABEL_228:
  if (!AVE_AddSupportedProperty(theDict, v295, (const __CFString *)*MEMORY[0x1E4F449A0], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v251 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v251) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_MVHEV"
          "CVideoLayerIDs, false)";
    int v36 = 4483;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, (const __CFString *)*MEMORY[0x1E4F449A8], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v252 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v252) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_MVHEV"
          "CViewIDs, false)";
    int v36 = 4484;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, (const __CFString *)*MEMORY[0x1E4F44998], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v253 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v253) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_MVHEV"
          "CLeftAndRightViewIDs, false)";
    int v36 = 4485;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, (const __CFString *)*MEMORY[0x1E4F44B00], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v254 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v254) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_Requi"
          "redMVHEVCPictureParameterSetIDs, false)";
    int v36 = 4488;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, (const __CFString *)*MEMORY[0x1E4F44B08], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v255 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v255) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_Requi"
          "redMVHEVCSequenceParameterSetIDs, false)";
    int v36 = 4491;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, (const __CFString *)*MEMORY[0x1E4F44B10], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v256 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v256) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_Requi"
          "redMVHEVCVideoParameterSetAlphaVideoLayerIDs, false)";
    int v36 = 4494;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, (const __CFString *)*MEMORY[0x1E4F44A00], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v257 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v257) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_MoreFramesAfterEnd, false)";
    int v36 = 4498;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, (const __CFString *)*MEMORY[0x1E4F44A08], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v258 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v258) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_MoreFramesBeforeStart, false)";
    int v36 = 4500;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"RecommendedParallelizationLimit", 1))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v259 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v259) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"RecommendedParallelizationLimit\" \"\")), true)";
    int v36 = 4503;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v296, @"RecommendedParallelizedSubdivisionMinimumDuration", 1))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v260 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v260) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"RecommendedParallelizedSubdivisionMinimumDuration\" \"\")), true)";
    int v36 = 4506;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"RecommendedParallelizedSubdivisionMinimumFrameCount", 1))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v261 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v261) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"RecommendedParallelizedSubdivisionMinimumFrameCount\" \"\")), true)";
    int v36 = 4508;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"MotionEstimationSearchMode", 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v262 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v262) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MotionEstimationSearchMode\" \"\")), false)";
    int v36 = 4511;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v296, @"SupportedMotionSearchModes", 1))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v263 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v263) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"SupportedMotionSearchModes\" \"\")), true)";
    int v36 = 4513;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, @"MaxEncoderPixelRate", 1))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v264 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v264) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MaxEncoderPixelRate\" \"\")), true)";
    int v36 = 4516;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v296, @"NumberOfCores", 1))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v265 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v265) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"NumberOfCores\" \"\")), true)";
    int v36 = 4518;
    goto LABEL_259;
  }
  if (!AVE_AddSupportedProperty(theDict, v298, (const __CFString *)*MEMORY[0x1E4F44A50], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_269;
    }
    int v266 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v266) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_Paravirtualized, false)";
    int v36 = 4521;
    goto LABEL_259;
  }
  if (AVE_AddSupportedProperty(theDict, v10, @"DebugFeature", 0))
  {
    *a2 = theDict;
    *v290 = v9;
    goto LABEL_270;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    int v267 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (!v267) {
      goto LABEL_268;
    }
    uint64_t v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"DebugFeature\" \"\")), false)";
    int v36 = 4523;
    goto LABEL_259;
  }
LABEL_269:
  uint64_t v27 = 4294954392;
LABEL_270:
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v42 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v43 = AVE_GetCurrTime();
    char v44 = AVE_Log_GetLevelStr(7);
    if (v42)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_CreateSupportedPropertyDictionary err %d \n", v43, 20, v44, v27);
      __uint64_t v45 = AVE_GetCurrTime();
      v268 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_CreateSupportedPropertyDictionary err %d ", v45, 20, v268, v27);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_CreateSupportedPropertyDictionary err %d ", v43, 20, v44, v27);
    }
  }
  return v27;
}

uint64_t AVE_HEVCInvalidate(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    int v3 = AVE_Log_CheckConsole(0x14u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v3)
    {
      printf("%lld %d AVE %s: Enter %s %p\n", CurrTime, 20, LevelStr, "AVE_HEVCInvalidate", a1);
      __uint64_t v6 = AVE_GetCurrTime();
      int v36 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: Enter %s %p", v6, 20, v36, "AVE_HEVCInvalidate", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Enter %s %p", CurrTime, 20, LevelStr, "AVE_HEVCInvalidate", a1);
    }
  }
  if (DerivedStorage)
  {
    uint64_t v7 = DerivedStorage + 183440;
    __uint64_t v8 = (pthread_mutex_t *)(DerivedStorage + 183448);
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
    if (AVE_Log_CheckLevel(0x14u, 7))
    {
      int v9 = AVE_Log_CheckConsole(0x14u);
      __uint64_t v10 = AVE_GetCurrTime();
      CFStringRef v11 = AVE_Log_GetLevelStr(7);
      if (v9)
      {
        printf("%lld %d AVE %s: FIG: ENTER AVE_HEVCFinalize\n", v10, 20, v11);
        __uint64_t v12 = AVE_GetCurrTime();
        int v37 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCFinalize", v12, 20, v37);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCFinalize", v10, 20, v11);
      }
    }
    uint64_t v17 = *(void *)(DerivedStorage + 183648);
    __uint64_t v18 = AVE_GetCurrTime();
    AVE_TimeStats_AddStartTime(v17, 4u, v18);
    if (*(_DWORD *)(DerivedStorage + 183512)) {
      *(void *)(DerivedStorage + 183520) = AVE_GetCurrTime();
    }
    __uint64_t v41 = AVE_GetCurrTime();
    if (*(_DWORD *)v7 == 30568 && (uint64_t v19 = AVE_USL_Drv_Complete(*(void *)(DerivedStorage + 24), &v41), v19))
    {
      uint64_t v20 = v19;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v21 = AVE_Log_CheckConsole(3u);
        __uint64_t v22 = AVE_GetCurrTime();
        CFStringRef v23 = AVE_Log_GetLevelStr(4);
        if (v21)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Complete failed 0x%x\n", v22, 3, v23, "AVE_HEVCInvalidate", 4799, "err == noErr", v20);
          __uint64_t v22 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Complete failed 0x%x", v22);
      }
    }
    else
    {
      if (*(_DWORD *)(DerivedStorage + 183512))
      {
        *(void *)(DerivedStorage + 183528) = AVE_GetCurrTime();
        if (AVE_Log_CheckLevel(0x18u, 6))
        {
          int v24 = AVE_Log_CheckConsole(0x18u);
          __uint64_t v25 = AVE_GetCurrTime();
          __uint64_t v26 = AVE_Log_GetLevelStr(6);
          uint64_t v27 = *(void *)(v7 + 88) - *(void *)(v7 + 80);
          if (v24)
          {
            printf("%lld %d AVE %s: FIG: Invalidate took %lld us\n", v25, 24, v26, v27);
            __uint64_t v28 = AVE_GetCurrTime();
            int v39 = AVE_Log_GetLevelStr(6);
            syslog(3, "%lld %d AVE %s: FIG: Invalidate took %lld us", v28, 24, v39, *(void *)(v7 + 88) - *(void *)(v7 + 80));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: Invalidate took %lld us", v25, 24, v26, v27);
          }
        }
      }
      uint64_t v29 = *(void *)(v7 + 208);
      __uint64_t v30 = AVE_GetCurrTime();
      AVE_TimeStats_AddEndTime(v29, 4u, v30);
      uint64_t v20 = 0;
    }
    pthread_mutex_unlock(v8);
  }
  else
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v13 = AVE_Log_CheckConsole(3u);
      __uint64_t v14 = AVE_GetCurrTime();
      int v15 = AVE_Log_GetLevelStr(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v14, 3, v15, "AVE_HEVCInvalidate", 4777, "encoderPrivateStorage");
        __uint64_t v16 = AVE_GetCurrTime();
        int v38 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v16, 3, v38, "AVE_HEVCInvalidate", 4777, "encoderPrivateStorage");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v14, 3, v15, "AVE_HEVCInvalidate", 4777, "encoderPrivateStorage");
      }
    }
    uint64_t v20 = 4294954384;
  }
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    int v31 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v32 = AVE_GetCurrTime();
    long long v33 = AVE_Log_GetLevelStr(6);
    if (v31)
    {
      printf("%lld %d AVE %s: Exit %s %p %d\n", v32, 20, v33, "AVE_HEVCInvalidate", a1, v20);
      __uint64_t v34 = AVE_GetCurrTime();
      int v40 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v34, 20, v40, "AVE_HEVCInvalidate", a1, v20);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v32, 20, v33, "AVE_HEVCInvalidate", a1, v20);
    }
  }
  return v20;
}

void AVE_HEVCFinalize(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    int v3 = AVE_Log_CheckConsole(0x14u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v3)
    {
      printf("%lld %d AVE %s: Enter %s %p\n", CurrTime, 20, LevelStr, "AVE_HEVCFinalize", a1);
      __uint64_t v6 = AVE_GetCurrTime();
      __uint64_t v41 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: Enter %s %p", v6, 20, v41, "AVE_HEVCFinalize", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Enter %s %p", CurrTime, 20, LevelStr, "AVE_HEVCFinalize", a1);
    }
  }
  if (DerivedStorage)
  {
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
    uint64_t v7 = *(void *)(DerivedStorage + 183648);
    __uint64_t v8 = AVE_GetCurrTime();
    AVE_TimeStats_AddStartTime(v7, 1u, v8);
    if (*(_DWORD *)(DerivedStorage + 183512)) {
      *(void *)(DerivedStorage + 183520) = AVE_GetCurrTime();
    }
    __uint64_t v9 = AVE_GetCurrTime();
    __uint64_t v10 = *(AVE_FPS **)(DerivedStorage + 183640);
    if (v10)
    {
      AVE_FPS::~AVE_FPS(v10);
      MEMORY[0x1BA9F01B0]();
      *(void *)(DerivedStorage + 183640) = 0;
    }
    if ((*(_DWORD *)(DerivedStorage + 183440) - 30567) <= 1)
    {
      __uint64_t v46 = v9;
      AVE_USL_Drv_Stop(*(void *)(DerivedStorage + 24), (uint64_t *)&v46, 1);
    }
    int v11 = AVE_USL_Drv_Destroy(*(const void ****)(DerivedStorage + 24));
    *(void *)(DerivedStorage + 24) = 0;
    if (v11)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v12 = AVE_Log_CheckConsole(3u);
        __uint64_t v13 = AVE_GetCurrTime();
        __uint64_t v14 = AVE_Log_GetLevelStr(4);
        if (v12)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Destroy failed.\n", v13, 3, v14, "AVE_HEVCFinalize", 4883, "err == noErr");
          __uint64_t v15 = AVE_GetCurrTime();
          int v42 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Destroy failed.", v15, 3, v42, "AVE_HEVCFinalize", 4883, "err == noErr");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Destroy failed.", v13, 3, v14, "AVE_HEVCFinalize", 4883, "err == noErr");
        }
      }
      int v25 = -12912;
    }
    else
    {
      if (*(_DWORD *)(DerivedStorage + 183512))
      {
        *(void *)(DerivedStorage + 183528) = AVE_GetCurrTime();
        if (AVE_Log_CheckLevel(0x18u, 6))
        {
          int v20 = AVE_Log_CheckConsole(0x18u);
          __uint64_t v21 = AVE_GetCurrTime();
          __uint64_t v22 = AVE_Log_GetLevelStr(6);
          uint64_t v23 = *(void *)(DerivedStorage + 183528) - *(void *)(DerivedStorage + 183520);
          if (v20)
          {
            printf("%lld %d AVE %s: FIG: Finalize took %lld us\n", v21, 24, v22, v23);
            __uint64_t v24 = AVE_GetCurrTime();
            char v44 = AVE_Log_GetLevelStr(6);
            syslog(3, "%lld %d AVE %s: FIG: Finalize took %lld us", v24, 24, v44, *(void *)(DerivedStorage + 183528) - *(void *)(DerivedStorage + 183520));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: Finalize took %lld us", v21, 24, v22, v23);
          }
        }
      }
      uint64_t v26 = *(void *)(DerivedStorage + 183648);
      __uint64_t v27 = AVE_GetCurrTime();
      AVE_TimeStats_AddEndTime(v26, 1u, v27);
      AVE_TimeStats_Calc(*(void *)(DerivedStorage + 183648));
      AVE_TimeStats_Print(*(unsigned int **)(DerivedStorage + 183648), 22, 6, 0, 0);
      int v25 = 0;
    }
    AVE_DW_Uninit();
    __uint64_t v28 = *(_OWORD **)(DerivedStorage + 183648);
    if (v28)
    {
      AVE_TimeStats_Destroy(v28);
      *(void *)(DerivedStorage + 183648) = 0;
    }
    uint64_t v29 = *(const void **)(DerivedStorage + 183656);
    if (v29)
    {
      AVE_Dump_Uninit(v29);
      AVE_Dump_Destroy(*(void **)(DerivedStorage + 183656));
      *(void *)(DerivedStorage + 183656) = 0;
    }
    __uint64_t v30 = *(AVE_VCP **)(DerivedStorage + 183664);
    if (v30)
    {
      AVE_VCP_Destroy(v30);
      *(void *)(DerivedStorage + 183664) = 0;
    }
    int v31 = *(const void **)(DerivedStorage + 183584);
    if (v31)
    {
      CFRelease(v31);
      *(void *)(DerivedStorage + 183584) = 0;
    }
    __uint64_t v32 = *(const void **)(DerivedStorage + 183552);
    if (v32)
    {
      CFRelease(v32);
      *(void *)(DerivedStorage + 183552) = 0;
    }
    long long v33 = *(const void **)(DerivedStorage + 183688);
    if (v33)
    {
      CFRelease(v33);
      *(void *)(DerivedStorage + 183688) = 0;
    }
    __uint64_t v34 = *(const void **)(DerivedStorage + 185504);
    if (v34)
    {
      CFRelease(v34);
      *(void *)(DerivedStorage + 185504) = 0;
    }
    uint64_t v35 = *(const void **)(DerivedStorage + 16);
    if (v35)
    {
      CFRelease(v35);
      *(void *)(DerivedStorage + 16) = 0;
    }
    int v36 = *(const void **)(DerivedStorage + 183696);
    if (v36)
    {
      CFRelease(v36);
      *(void *)(DerivedStorage + 183696) = 0;
    }
    AVE_USL_Enc_PropCfg_Uninit((const void *)(DerivedStorage + 185024));
    pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 183448));
    pthread_mutex_destroy((pthread_mutex_t *)(DerivedStorage + 183448));
  }
  else
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v16 = AVE_Log_CheckConsole(3u);
      __uint64_t v17 = AVE_GetCurrTime();
      __uint64_t v18 = AVE_Log_GetLevelStr(4);
      if (v16)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v17, 3, v18, "AVE_HEVCFinalize", 4844, "encoderPrivateStorage");
        __uint64_t v19 = AVE_GetCurrTime();
        __uint64_t v43 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v19, 3, v43, "AVE_HEVCFinalize", 4844, "encoderPrivateStorage");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v17, 3, v18, "AVE_HEVCFinalize", 4844, "encoderPrivateStorage");
      }
    }
    AVE_DW_Uninit();
    int v25 = -12912;
  }
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    int v37 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v38 = AVE_GetCurrTime();
    int v39 = AVE_Log_GetLevelStr(6);
    if (v37)
    {
      printf("%lld %d AVE %s: Exit %s %p %d\n", v38, 20, v39, "AVE_HEVCFinalize", a1, v25);
      __uint64_t v40 = AVE_GetCurrTime();
      __uint64_t v45 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v40, 20, v45, "AVE_HEVCFinalize", a1, v25);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v38, 20, v39, "AVE_HEVCFinalize", a1, v25);
    }
  }
}

uint64_t AVE_HEVCCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t v1066 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  __uint64_t v8 = (const void **)DerivedStorage;
  if (!DerivedStorage)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v14 = AVE_Log_CheckConsole(3u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", CurrTime, 3, LevelStr, "AVE_HEVCCopyProperty", 13321, "encoderPrivateStorage");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.");
    }
    goto LABEL_22;
  }
  __uint64_t v9 = (int *)(DerivedStorage + 183420);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
  if (AVE_Log_CheckLevel(0x1Eu, 8))
  {
    int v10 = AVE_Log_CheckConsole(0x1Eu);
    __uint64_t v11 = AVE_GetCurrTime();
    int v12 = AVE_Log_GetLevelStr(8);
    if (v10)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_HEVCCopyProperty\n", v11, 30, v12);
      __uint64_t v13 = AVE_GetCurrTime();
      v946 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCCopyProperty", v13, 30, v946);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCCopyProperty", v11, 30, v12);
    }
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44B40]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v17 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v18 = AVE_GetCurrTime();
      __uint64_t v19 = AVE_Log_GetLevelStr(6);
      int v20 = *((unsigned __int8 *)v8 + 183544);
      if (v17)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ThrottleForBackground return %u\n", v18, 30, v19, v20);
        __uint64_t v21 = AVE_GetCurrTime();
        v947 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ThrottleForBackground return %u", v21, 30, v947, *((unsigned __int8 *)v8 + 183544));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ThrottleForBackground return %u", v18, 30, v19, v20);
      }
    }
    int v27 = *((unsigned __int8 *)v8 + 183544);
    goto LABEL_19;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44B18]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v22 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v23 = AVE_GetCurrTime();
      __uint64_t v24 = AVE_Log_GetLevelStr(6);
      int v25 = *((_DWORD *)v8 + 55);
      if (v22)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_SourceFrameCount return %u\n", v23, 30, v24, v25);
        __uint64_t v26 = AVE_GetCurrTime();
        v948 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_SourceFrameCount return %u", v26, 30, v948, *((_DWORD *)v8 + 55));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_SourceFrameCount return %u", v23, 30, v24, v25);
      }
    }
    long long v33 = (void **)((char *)v8 + 220);
    goto LABEL_29;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44AA0]))
  {
    *a4 = CFStringCreateWithCString(0, (const char *)v8 + 185024, 0);
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v30 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v31 = AVE_GetCurrTime();
      __uint64_t v32 = AVE_Log_GetLevelStr(6);
      if (v30)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ProfileLevel return %s\n", v31, 30, v32, (const char *)v8 + 185024);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ProfileLevel return %s");
    }
    goto LABEL_38;
  }
  int v37 = v8 + 2330;
  if (CFEqual(a2, @"EnableWeightedPrediction"))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v38 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v39 = AVE_GetCurrTime();
      __uint64_t v40 = AVE_Log_GetLevelStr(6);
      int v41 = *((unsigned __int8 *)v8 + 18743);
      if (v38)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableWeightedPrediction return %u\n", v39, 30, v40, v41);
        __uint64_t v42 = AVE_GetCurrTime();
        v949 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableWeightedPrediction return %u", v42, 30, v949, *((unsigned __int8 *)v8 + 18743));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableWeightedPrediction return %u", v39, 30, v40, v41);
      }
    }
    int v27 = *((unsigned __int8 *)v8 + 18743);
    goto LABEL_19;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44810]))
  {
    int v43 = *((_DWORD *)v8 + 48);
    LODWORD(keys[0]) = v43;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v44 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v45 = AVE_GetCurrTime();
      __uint64_t v46 = AVE_Log_GetLevelStr(6);
      if (v44)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AverageBitRate return %d\n", v45, 30, v46, v43);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AverageBitRate return %d");
    }
    goto LABEL_50;
  }
  int v47 = (unsigned __int8 *)v8 + 109737;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44868]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v48 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v49 = AVE_GetCurrTime();
      int v50 = AVE_Log_GetLevelStr(6);
      int v51 = *((_DWORD *)v8 + 27442);
      if (v48)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ColorPrimaries return %d\n", v49, 30, v50, v51);
        __uint64_t v52 = AVE_GetCurrTime();
        v950 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ColorPrimaries return %d", v52, 30, v950, *((_DWORD *)v8 + 27442));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ColorPrimaries return %d", v49, 30, v50, v51);
      }
    }
    StringForIntegerCodePoint = (void *)CVColorPrimariesGetStringForIntegerCodePoint(*((_DWORD *)v8 + 27442));
    goto LABEL_32;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44B58]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v53 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v54 = AVE_GetCurrTime();
      int v55 = AVE_Log_GetLevelStr(6);
      int v56 = *((_DWORD *)v8 + 27443);
      if (v53)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_TransferFunction return %d\n", v54, 30, v55, v56);
        __uint64_t v57 = AVE_GetCurrTime();
        v951 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_TransferFunction return %d", v57, 30, v951, *((_DWORD *)v8 + 27443));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_TransferFunction return %d", v54, 30, v55, v56);
      }
    }
    StringForIntegerCodePoint = (void *)CVTransferFunctionGetStringForIntegerCodePoint(*((_DWORD *)v8 + 27443));
    goto LABEL_32;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44BB0]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v58 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v59 = AVE_GetCurrTime();
      int v60 = AVE_Log_GetLevelStr(6);
      int v61 = *((_DWORD *)v8 + 27444);
      if (v58)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_YCbCrMatrix return %d\n", v59, 30, v60, v61);
        __uint64_t v62 = AVE_GetCurrTime();
        v952 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_YCbCrMatrix return %d", v62, 30, v952, *((_DWORD *)v8 + 27444));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_YCbCrMatrix return %d", v59, 30, v60, v61);
      }
    }
    StringForIntegerCodePoint = (void *)CVYCbCrMatrixGetStringForIntegerCodePoint(*((_DWORD *)v8 + 27444));
    goto LABEL_32;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44A60]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v63 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v64 = AVE_GetCurrTime();
      int v65 = AVE_Log_GetLevelStr(6);
      if (v63)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_PixelAspectRatio return %d %d %d %d\n", v64, 30, v65, *v47, *((_DWORD *)v8 + 27435), *((_DWORD *)v8 + 27436), *((_DWORD *)v8 + 27437));
        __uint64_t v64 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_PixelAspectRatio return %d %d %d %d", v64);
    }
    if (*v47)
    {
      int v70 = (void *)*MEMORY[0x1E4F24BA0];
      keys[0] = *(void **)MEMORY[0x1E4F24B90];
      keys[1] = v70;
      LODWORD(valuePtr) = 0;
      unsigned int v1058 = 0;
      AVE_getVuiAspectRatio((int *)&valuePtr, (int *)&v1058, (uint64_t)(v8 + 13717));
      CFAllocatorRef v71 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
      values[1] = CFNumberCreate(v71, kCFNumberSInt32Type, &v1058);
      *a4 = CFDictionaryCreate(v71, (const void **)keys, (const void **)values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (values[0])
      {
        CFRelease(values[0]);
        values[0] = 0;
      }
      if (values[1]) {
        CFRelease(values[1]);
      }
      goto LABEL_38;
    }
    goto LABEL_1375;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F447D0]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v66 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v67 = AVE_GetCurrTime();
      int v68 = AVE_Log_GetLevelStr(6);
      if (*((unsigned char *)v8 + 216)) {
        int v69 = "true";
      }
      else {
        int v69 = "false";
      }
      if (v66)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AllowFrameReordering return %s\n", v67, 30, v68, v69);
        __uint64_t v67 = AVE_GetCurrTime();
        int v68 = AVE_Log_GetLevelStr(6);
        if (*((unsigned char *)v8 + 216)) {
          int v69 = "true";
        }
        else {
          int v69 = "false";
        }
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AllowFrameReordering return %s", v67, 30, v68, v69);
    }
    int v27 = *((unsigned __int8 *)v8 + 216);
    goto LABEL_19;
  }
  int v72 = (int *)v8 + 4581;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F447E8]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v73 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v74 = AVE_GetCurrTime();
      int v75 = AVE_Log_GetLevelStr(6);
      if (*((_DWORD *)v8 + 507) == 1) {
        int v76 = "FALSE";
      }
      else {
        int v76 = "TRUE";
      }
      if (v73)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AllowTemporalCompression return %s\n", v74, 30, v75, v76);
        __uint64_t v74 = AVE_GetCurrTime();
        int v75 = AVE_Log_GetLevelStr(6);
        if (*((_DWORD *)v8 + 507) == 1) {
          int v76 = "FALSE";
        }
        else {
          int v76 = "TRUE";
        }
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AllowTemporalCompression return %s", v74, 30, v75, v76);
    }
    if (*((_DWORD *)v8 + 507) != 1 || *((_DWORD *)v8 + 4610) != 1) {
      goto LABEL_20;
    }
    goto LABEL_103;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F449C8]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v77 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v78 = AVE_GetCurrTime();
      int v79 = AVE_Log_GetLevelStr(6);
      int v80 = *((_DWORD *)v8 + 507);
      if (v77)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxKeyFrameInterval return %u\n", v78, 30, v79, v80);
        __uint64_t v81 = AVE_GetCurrTime();
        v953 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxKeyFrameInterval return %u", v81, 30, v953, *((_DWORD *)v8 + 507));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxKeyFrameInterval return %u", v78, 30, v79, v80);
      }
    }
    long long v33 = (void **)((char *)v8 + 2028);
    goto LABEL_29;
  }
  if (CFEqual(a2, @"StrictKeyFrameInterval"))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v88 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v89 = AVE_GetCurrTime();
      int v90 = AVE_Log_GetLevelStr(6);
      int v91 = *((_DWORD *)v8 + 508);
      if (v88)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_StrictKeyFrameInterval return %u\n", v89, 30, v90, v91);
        __uint64_t v92 = AVE_GetCurrTime();
        v955 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_StrictKeyFrameInterval return %u", v92, 30, v955, *((_DWORD *)v8 + 508));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_StrictKeyFrameInterval return %u", v89, 30, v90, v91);
      }
    }
    long long v33 = (void **)(v8 + 254);
    goto LABEL_29;
  }
  v1054 = (double *)(v8 + 23145);
  int v93 = (int *)(v8 + 12886);
  if (CFEqual(a2, @"ReconstructedPixelBufferAttributes"))
  {
    int valuePtr = 0;
    int v94 = *((_DWORD *)v8 + 46249);
    if (!v94) {
      int v94 = *((_DWORD *)v8 + 470);
    }
    int v95 = *((_DWORD *)v8 + 46250);
    if (!v95) {
      int v95 = *((_DWORD *)v8 + 471);
    }
    int v96 = v94 + 31;
    if (v94 < -31) {
      int v96 = v94 + 62;
    }
    unsigned int v1058 = v96 & 0xFFFFFFE0;
    int v97 = v95 + 31;
    if (v95 < -31) {
      int v97 = v95 + 62;
    }
    unsigned int v1056 = v97 & 0xFFFFFFE0;
    *(_OWORD *)values = xmmword_1BA78F938;
    long long v1061 = *(_OWORD *)algn_1BA78F948;
    int v98 = AVE_PixelFmt_FindByType(*((_DWORD *)v8 + 46378));
    if (v98)
    {
      long long v99 = *(_OWORD *)v98;
      long long v100 = *((_OWORD *)v98 + 1);
      uint64_t v1065 = *(void *)(v98 + 36);
      *(_OWORD *)keys = v99;
      long long v1063 = v100;
      int v1064 = 0;
      DWORD2(v1063) = 3;
      HIDWORD(keys[0]) = *((_DWORD *)v8 + 25784) + 8;
      int Type = AVE_PixelFmt_FindType(keys);
      if (Type)
      {
        int v102 = Type;
        AVE_AlignDimension(1, (signed int *)&v1058, (signed int *)&v1056);
        if (!AVE_PixelBufAttr_CreateDict() && valuePtr)
        {
          if (AVE_Log_CheckLevel(0x1Eu, 6))
          {
            int v103 = AVE_Log_CheckConsole(0x1Eu);
            __uint64_t v104 = AVE_GetCurrTime();
            int v105 = AVE_Log_GetLevelStr(6);
            if (v103)
            {
              printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ReconstructedPixelBufferAttributes\n", v104, 30, v105);
              __uint64_t v106 = AVE_GetCurrTime();
              v956 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ReconstructedPixelBufferAttributes", v106, 30, v956);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ReconstructedPixelBufferAttributes", v104, 30, v105);
            }
          }
          uint64_t v28 = 0;
          int v82 = valuePtr;
          goto LABEL_105;
        }
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v127 = AVE_Log_CheckConsole(3u);
          __uint64_t v128 = AVE_GetCurrTime();
          int v129 = AVE_Log_GetLevelStr(4);
          if (v127)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to create recon buffer dictionary %p %d 0x%x 0x%x %d %d %d %d %p\n", v128, 3, v129, "AVE_HEVCCopyProperty", 13536, "rc == noErr && pDict != __null", v8, *((_DWORD *)v8 + 45893), *((_DWORD *)v8 + 46378), v102, v94, v95, v1058, v1056, valuePtr);
            __uint64_t v130 = AVE_GetCurrTime();
            v960 = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create recon buffer dictionary %p %d 0x%x 0x%x %d %d %d %d %p", v130, 3, v960, "AVE_HEVCCopyProperty", 13536, "rc == noErr && pDict != __null");
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create recon buffer dictionary %p %d 0x%x 0x%x %d %d %d %d %p", v128, 3, v129, "AVE_HEVCCopyProperty", 13536, "rc == noErr && pDict != __null");
          }
        }
        goto LABEL_166;
      }
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v118 = AVE_Log_CheckConsole(3u);
        __uint64_t v119 = AVE_GetCurrTime();
        int v120 = AVE_Log_GetLevelStr(4);
        if (!v118)
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to find pixel format type %p %d 0x%x", v119, 3);
          goto LABEL_166;
        }
        printf("%lld %d AVE %s: %s:%d %s | fail to find pixel format type %p %d 0x%x\n", v119, 3, v120, "AVE_HEVCCopyProperty", 13521, "type != 0", v8, *((_DWORD *)v8 + 45893), *((_DWORD *)v8 + 46378));
        __uint64_t v115 = AVE_GetCurrTime();
        int v121 = AVE_Log_GetLevelStr(4);
        uint64_t v1048 = *((unsigned int *)v8 + 45893);
        uint64_t v1049 = *((unsigned int *)v8 + 46378);
        v1043 = "type != 0";
        v1045 = v8;
        uint64_t v1041 = 13521;
        v958 = v121;
        int v117 = "%lld %d AVE %s: %s:%d %s | fail to find pixel format type %p %d 0x%x";
LABEL_147:
        syslog(3, v117, v115, 3, v958, "AVE_HEVCCopyProperty", v1041, v1043, v1045, v1048, v1049);
      }
    }
    else if (AVE_Log_CheckLevel(3u, 4))
    {
      int v112 = AVE_Log_CheckConsole(3u);
      __uint64_t v113 = AVE_GetCurrTime();
      int v114 = AVE_Log_GetLevelStr(4);
      if (!v112)
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to find pixel format %p %d 0x%x", v113, 3);
        goto LABEL_166;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to find pixel format %p %d 0x%x\n", v113, 3, v114, "AVE_HEVCCopyProperty", 13512, "pPixelFmt != __null", v8, *((_DWORD *)v8 + 45893), *((_DWORD *)v8 + 46378));
      __uint64_t v115 = AVE_GetCurrTime();
      int v116 = AVE_Log_GetLevelStr(4);
      uint64_t v1048 = *((unsigned int *)v8 + 45893);
      uint64_t v1049 = *((unsigned int *)v8 + 46378);
      v1043 = "pPixelFmt != __null";
      v1045 = v8;
      uint64_t v1041 = 13512;
      v958 = v116;
      int v117 = "%lld %d AVE %s: %s:%d %s | fail to find pixel format %p %d 0x%x";
      goto LABEL_147;
    }
LABEL_166:
    uint64_t v28 = 4294954394;
    goto LABEL_106;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F448F0]))
  {
    LODWORD(keys[0]) = 0;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v107 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v108 = AVE_GetCurrTime();
      int v109 = AVE_Log_GetLevelStr(6);
      int v110 = *((_DWORD *)v8 + 57);
      if (v107)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ExpectedFrameRate return %u\n", v108, 30, v109, v110);
        __uint64_t v111 = AVE_GetCurrTime();
        v957 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ExpectedFrameRate return %u", v111, 30, v957, *((_DWORD *)v8 + 57));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ExpectedFrameRate return %u", v108, 30, v109, v110);
      }
    }
    int v131 = *((_DWORD *)v8 + 57);
LABEL_157:
    if (v131 < 1)
    {
LABEL_50:
      long long v33 = keys;
LABEL_29:
      CFAllocatorRef v34 = a3;
LABEL_30:
      CFNumberType v35 = kCFNumberSInt32Type;
LABEL_31:
      StringForIntegerCodePoint = CFNumberCreate(v34, v35, v33);
LABEL_32:
      uint64_t v28 = 0;
      *a4 = StringForIntegerCodePoint;
      goto LABEL_106;
    }
LABEL_158:
    LODWORD(keys[0]) = v131;
    goto LABEL_50;
  }
  v1053 = (int *)v8 + 4725;
  if (CFEqual(a2, @"MaximumRealTimeFrameRate"))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v122 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v123 = AVE_GetCurrTime();
      int v124 = AVE_Log_GetLevelStr(6);
      int v125 = *((_DWORD *)v8 + 5090);
      if (v122)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaximumRealTimeFrameRate return %d\n", v123, 30, v124, v125);
        __uint64_t v126 = AVE_GetCurrTime();
        v959 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaximumRealTimeFrameRate return %d", v126, 30, v959, *((_DWORD *)v8 + 5090));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaximumRealTimeFrameRate return %d", v123, 30, v124, v125);
      }
    }
    uint64_t v135 = 20360;
LABEL_171:
    long long v33 = (void **)((char *)v8 + v135);
    goto LABEL_29;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44878]))
  {
    LODWORD(keys[0]) = 0;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v132 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v133 = AVE_GetCurrTime();
      int v134 = AVE_Log_GetLevelStr(6);
      if (v132)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ConstantBitRate return %d\n", v133, 30, v134, *((_DWORD *)v8 + 48));
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ConstantBitRate return %d");
    }
LABEL_182:
    int v131 = *((_DWORD *)v8 + 48);
    goto LABEL_157;
  }
  if (CFEqual(a2, @"VariableBitRate"))
  {
    LODWORD(keys[0]) = 0;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v136 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v137 = AVE_GetCurrTime();
      int v138 = AVE_Log_GetLevelStr(6);
      if (v136)
      {
        printf("%lld %d AVE %s: asked for AVE_kVTCompressionPropertyKey_VariableBitRate return %d\n", v137, 30, v138, *((_DWORD *)v8 + 48));
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: asked for AVE_kVTCompressionPropertyKey_VariableBitRate return %d");
    }
    goto LABEL_182;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F448E8]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v139 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v140 = AVE_GetCurrTime();
      int v141 = AVE_Log_GetLevelStr(6);
      float v142 = *((double *)v8 + 23159);
      double v143 = v142;
      if (v139)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ExpectedDuration return %f\n", v140, 30, v141, v143);
        __uint64_t v144 = AVE_GetCurrTime();
        int v145 = AVE_Log_GetLevelStr(6);
        float v146 = *((double *)v8 + 23159);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ExpectedDuration return %f", v144, 30, v145, v146);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ExpectedDuration return %f", v140, 30, v141, v143);
      }
    }
    long long v33 = (void **)(v8 + 23159);
LABEL_189:
    CFAllocatorRef v34 = a3;
    CFNumberType v35 = kCFNumberDoubleType;
    goto LABEL_31;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44898]))
  {
    Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E4F1D510]);
    AVE_DRL_Make((int *)v8 + 444, Mutable);
LABEL_185:
    uint64_t v28 = 0;
LABEL_186:
    *a4 = Mutable;
    goto LABEL_106;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44888]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v148 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v149 = AVE_GetCurrTime();
      int v150 = AVE_Log_GetLevelStr(6);
      int v151 = *((_DWORD *)v8 + 46320);
      if (v148)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ConvergenceDurationForAverageDataRate return %u\n", v149, 30, v150, v151);
        __uint64_t v152 = AVE_GetCurrTime();
        v961 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ConvergenceDurationForAverageDataRate return %u", v152, 30, v961, *((_DWORD *)v8 + 46320));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ConvergenceDurationForAverageDataRate return %u", v149, 30, v150, v151);
      }
    }
    long long v33 = (void **)(v8 + 23160);
    goto LABEL_29;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F449D0]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v153 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v154 = AVE_GetCurrTime();
      int v155 = AVE_Log_GetLevelStr(6);
      float v156 = *((double *)v8 + 255);
      double v157 = v156;
      if (v153)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration return %f\n", v154, 30, v155, v157);
        __uint64_t v158 = AVE_GetCurrTime();
        int v159 = AVE_Log_GetLevelStr(6);
        float v160 = *((double *)v8 + 255);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration return %f", v158, 30, v159, v160);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration return %f", v154, 30, v155, v157);
      }
    }
    long long v33 = (void **)(v8 + 255);
    goto LABEL_189;
  }
  if (CFEqual(a2, @"StrictKeyFrameIntervalDuration"))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v161 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v162 = AVE_GetCurrTime();
      int v163 = AVE_Log_GetLevelStr(6);
      float v164 = *((double *)v8 + 256);
      double v165 = v164;
      if (v161)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_StrictKeyFrameIntervalDuration return %f\n", v162, 30, v163, v165);
        __uint64_t v166 = AVE_GetCurrTime();
        int v167 = AVE_Log_GetLevelStr(6);
        float v168 = *((double *)v8 + 256);
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_StrictKeyFrameIntervalDuration return %f", v166, 30, v167, v168);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_StrictKeyFrameIntervalDuration return %f", v162, 30, v163, v165);
      }
    }
    long long v33 = (void **)(v8 + 256);
    goto LABEL_189;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44B68]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v169 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v170 = AVE_GetCurrTime();
      int v171 = AVE_Log_GetLevelStr(6);
      int v172 = *((_DWORD *)v8 + 73);
      if (v169)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Usage return %u\n", v170, 30, v171, v172);
        __uint64_t v173 = AVE_GetCurrTime();
        v962 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Usage return %u", v173, 30, v962, *((_DWORD *)v8 + 73));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Usage return %u", v170, 30, v171, v172);
      }
    }
    long long v33 = (void **)((char *)v8 + 292);
    goto LABEL_29;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44A00]))
  {
    int v174 = *((_DWORD *)v8 + 46304);
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v175 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v176 = AVE_GetCurrTime();
      int v177 = AVE_Log_GetLevelStr(6);
      if (v174 <= 0) {
        int v178 = "false";
      }
      else {
        int v178 = "true";
      }
      if (v175)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MoreFramesAfterEnd return %s\n", v176, 30, v177, v178);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MoreFramesAfterEnd return %s");
    }
LABEL_236:
    uint64_t v28 = 0;
    uint64_t v29 = (__CFString **)MEMORY[0x1E4F1CFD0];
    if (v174 <= 0) {
      uint64_t v29 = (__CFString **)MEMORY[0x1E4F1CFC8];
    }
    goto LABEL_104;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44A08]))
  {
    int v174 = *((_DWORD *)v8 + 46305);
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v179 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v180 = AVE_GetCurrTime();
      int v181 = AVE_Log_GetLevelStr(6);
      if (v174 <= 0) {
        int v182 = "false";
      }
      else {
        int v182 = "true";
      }
      if (v179)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MoreFramesBeforeStart return %s\n", v180, 30, v181, v182);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MoreFramesBeforeStart return %s");
    }
    goto LABEL_236;
  }
  if (CFEqual(a2, @"RecommendedParallelizationLimit"))
  {
    int v183 = *((_DWORD *)AVE_DW_Get() + 303);
    int v184 = AVE_DevCap_Find(*((_DWORD *)v8 + 45892));
    if (!v183) {
      int v183 = *(_DWORD *)(*((void *)v184 + 2) + 4);
    }
    LODWORD(keys[0]) = v183;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v185 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v186 = AVE_GetCurrTime();
      int v187 = AVE_Log_GetLevelStr(6);
      if (v185)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RecommendedParallelizationLimit return %d\n", v186, 30, v187, v183);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RecommendedParallelizationLimit return %d");
    }
    goto LABEL_50;
  }
  if (CFEqual(a2, @"RecommendedParallelizedSubdivisionMinimumDuration"))
  {
    uint64_t v188 = *((void *)AVE_DW_Get() + 153);
    if (v188) {
      CMTimeValue v189 = 1000 * v188;
    }
    else {
      CMTimeValue v189 = 30000;
    }
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v190 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v191 = AVE_GetCurrTime();
      int v192 = AVE_Log_GetLevelStr(6);
      if (v190)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RecommendedParallelizedSubdivisionMinimumDuration return value: %lld, timescale: %d, flags: 0x%x, epoch: %lld\n", v191, 30, v192, v189, 1000, 1, 0);
        __uint64_t v191 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RecommendedParallelizedSubdivisionMinimumDuration return value: %lld, timescale: %d, flags: 0x%x, epoch: %lld", v191);
    }
    time.value = v189;
    *(void *)&time.timescale = 0x1000003E8;
    time.epoch = 0;
    StringForIntegerCodePoint = CMTimeCopyAsDictionary(&time, a3);
    goto LABEL_32;
  }
  if (CFEqual(a2, @"RecommendedParallelizedSubdivisionMinimumFrameCount"))
  {
    int v193 = AVE_DW_Get();
    if (v193[152]) {
      uint64_t v194 = v193[152];
    }
    else {
      uint64_t v194 = 900;
    }
    keys[0] = (void *)v194;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v195 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v196 = AVE_GetCurrTime();
      int v197 = AVE_Log_GetLevelStr(6);
      if (v195)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RecommendedParallelizedSubdivisionMinimumFrameCount return %lld\n", v196, 30, v197, v194);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RecommendedParallelizedSubdivisionMinimumFrameCount return %lld");
    }
LABEL_264:
    long long v33 = keys;
    CFAllocatorRef v34 = a3;
    CFNumberType v35 = kCFNumberSInt64Type;
    goto LABEL_31;
  }
  if (CFEqual(a2, @"BPictures"))
  {
    int v198 = *((_DWORD *)v8 + 45858);
    if (v198 < 0) {
      int v198 = *((_DWORD *)v8 + 486);
    }
    LODWORD(keys[0]) = v198;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v199 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v200 = AVE_GetCurrTime();
      int v201 = AVE_Log_GetLevelStr(6);
      if (v199)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_BPictures return %d\n", v200, 30, v201, v198);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_BPictures return %d");
    }
    goto LABEL_50;
  }
  if (CFEqual(a2, @"EnableAdaptB"))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v202 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v203 = AVE_GetCurrTime();
      int v204 = AVE_Log_GetLevelStr(6);
      if (((_BYTE)v8[253] & 4) != 0) {
        int v205 = "true";
      }
      else {
        int v205 = "false";
      }
      if (v202)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableAdaptB return %s\n", v203, 30, v204, v205);
        __uint64_t v203 = AVE_GetCurrTime();
        int v204 = AVE_Log_GetLevelStr(6);
        if ((v8[253] & 4) != 0) {
          int v205 = "true";
        }
        else {
          int v205 = "false";
        }
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableAdaptB return %s", v203, 30, v204, v205);
    }
    if (((_BYTE)v8[253] & 4) != 0) {
      goto LABEL_20;
    }
    goto LABEL_103;
  }
  if (CFEqual(a2, @"EnableCompleteGOP"))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v206 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v207 = AVE_GetCurrTime();
      int v208 = AVE_Log_GetLevelStr(6);
      if (((_BYTE)v8[253] & 2) != 0) {
        int v209 = "true";
      }
      else {
        int v209 = "false";
      }
      if (v206)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableCompleteGOP return %s\n", v207, 30, v208, v209);
        __uint64_t v207 = AVE_GetCurrTime();
        int v208 = AVE_Log_GetLevelStr(6);
        if ((v8[253] & 2) != 0) {
          int v209 = "true";
        }
        else {
          int v209 = "false";
        }
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableCompleteGOP return %s", v207, 30, v208, v209);
    }
    if (((_BYTE)v8[253] & 2) != 0) {
      goto LABEL_20;
    }
    goto LABEL_103;
  }
  if (CFEqual(a2, @"InitialQPI"))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v210 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v211 = AVE_GetCurrTime();
      int v212 = AVE_Log_GetLevelStr(6);
      int v213 = *((_DWORD *)v8 + 456);
      if (v210)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQPI return %d\n", v211, 30, v212, v213);
        __uint64_t v214 = AVE_GetCurrTime();
        v963 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQPI return %d", v214, 30, v963, *((_DWORD *)v8 + 456));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQPI return %d", v211, 30, v212, v213);
      }
    }
    long long v33 = (void **)(v8 + 228);
    goto LABEL_29;
  }
  if (CFEqual(a2, @"InitialQPP"))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v215 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v216 = AVE_GetCurrTime();
      int v217 = AVE_Log_GetLevelStr(6);
      int v218 = *((_DWORD *)v8 + 457);
      if (v215)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQPP return %d\n", v216, 30, v217, v218);
        __uint64_t v219 = AVE_GetCurrTime();
        v964 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQPP return %d", v219, 30, v964, *((_DWORD *)v8 + 457));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQPP return %d", v216, 30, v217, v218);
      }
    }
    long long v33 = (void **)((char *)v8 + 1828);
    goto LABEL_29;
  }
  if (CFEqual(a2, @"InitialQPB"))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v220 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v221 = AVE_GetCurrTime();
      int v222 = AVE_Log_GetLevelStr(6);
      int v223 = *((_DWORD *)v8 + 458);
      if (v220)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQP return %d\n", v221, 30, v222, v223);
        __uint64_t v224 = AVE_GetCurrTime();
        v965 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQP return %d", v224, 30, v965, *((_DWORD *)v8 + 458));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQP return %d", v221, 30, v222, v223);
      }
    }
    long long v33 = (void **)(v8 + 229);
    goto LABEL_29;
  }
  if (CFEqual(a2, @"EdgeReplication"))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v225 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v226 = AVE_GetCurrTime();
      int v227 = AVE_Log_GetLevelStr(6);
      int v228 = *((_DWORD *)v8 + 4717);
      if (v225)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EdgeReplication return %d\n", v226, 30, v227, v228);
        __uint64_t v229 = AVE_GetCurrTime();
        v966 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EdgeReplication return %d", v229, 30, v966, *((_DWORD *)v8 + 4717));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EdgeReplication return %d", v226, 30, v227, v228);
      }
    }
    uint64_t v135 = 18868;
    goto LABEL_171;
  }
  v1052 = (char *)v8 + 17881;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44A30]))
  {
    LODWORD(keys[0]) = *((_DWORD *)v8 + 4515);
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v230 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v231 = AVE_GetCurrTime();
      int v232 = AVE_Log_GetLevelStr(6);
      if (v230)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_NumberOfSlices return %d\n", v231, 30, v232, *((_DWORD *)v8 + 4515));
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_NumberOfSlices return %d");
    }
    goto LABEL_50;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44A98]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v233 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v234 = AVE_GetCurrTime();
      int v235 = AVE_Log_GetLevelStr(6);
      int v236 = *((_DWORD *)v8 + 468);
      if (v233)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Priority return %d\n", v234, 30, v235, v236);
        __uint64_t v237 = AVE_GetCurrTime();
        v967 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Priority return %d", v237, 30, v967, *((_DWORD *)v8 + 468));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Priority return %d", v234, 30, v235, v236);
      }
    }
    long long v33 = (void **)(v8 + 234);
    goto LABEL_29;
  }
  v1051 = (int *)v8 + 34625;
  if (CFEqual(a2, @"DeblockingFiltering"))
  {
    int v238 = *((unsigned __int8 *)v8 + 138594);
    LODWORD(keys[0]) = v238;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v239 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v240 = AVE_GetCurrTime();
      int v241 = AVE_Log_GetLevelStr(6);
      if (v239)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_DeblockingFiltering return %d\n", v240, 30, v241, v238);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_DeblockingFiltering return %d");
    }
    goto LABEL_50;
  }
  if (CFEqual(a2, @"DebugMetadataSEI"))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v242 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v243 = AVE_GetCurrTime();
      int v244 = AVE_Log_GetLevelStr(6);
      if (*((unsigned char *)v8 + 183546)) {
        int v245 = "TRUE";
      }
      else {
        int v245 = "FALSE";
      }
      if (v242)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_DebugMetadataSEI return %s\n", v243, 30, v244, v245);
        __uint64_t v243 = AVE_GetCurrTime();
        int v244 = AVE_Log_GetLevelStr(6);
        if (*((unsigned char *)v8 + 183546)) {
          int v245 = "TRUE";
        }
        else {
          int v245 = "FALSE";
        }
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_DebugMetadataSEI return %s", v243, 30, v244, v245);
    }
    int v27 = *((unsigned __int8 *)v8 + 183546);
    goto LABEL_19;
  }
  if (CFEqual(a2, @"DebugMetadataSEIuseEPB"))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v246 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v247 = AVE_GetCurrTime();
      int v248 = AVE_Log_GetLevelStr(6);
      if (*((unsigned char *)v8 + 183547)) {
        int v249 = "TRUE";
      }
      else {
        int v249 = "FALSE";
      }
      if (v246)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_DebugMetadataSEIuseEPB return %s\n", v247, 30, v248, v249);
        __uint64_t v247 = AVE_GetCurrTime();
        int v248 = AVE_Log_GetLevelStr(6);
        if (*((unsigned char *)v8 + 183547)) {
          int v249 = "TRUE";
        }
        else {
          int v249 = "FALSE";
        }
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_DebugMetadataSEIuseEPB return %s", v247, 30, v248, v249);
    }
    int v27 = *((unsigned __int8 *)v8 + 183547);
    goto LABEL_19;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44988]))
  {
    int v250 = *((_DWORD *)v8 + 5044);
    LODWORD(keys[0]) = v250;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v251 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v252 = AVE_GetCurrTime();
      int v253 = AVE_Log_GetLevelStr(6);
      if (v251)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_InputQueueMaxCount return %d\n", v252, 30, v253, v250);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_InputQueueMaxCount return %d");
    }
    goto LABEL_50;
  }
  if (CFEqual(a2, @"EnableUserQPForFacetime"))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v254 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v255 = AVE_GetCurrTime();
      int v256 = AVE_Log_GetLevelStr(6);
      if (*((unsigned char *)v8 + 1864)) {
        int v257 = "true";
      }
      else {
        int v257 = "false";
      }
      if (v254)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableUserQPForFacetime return %s\n", v255, 30, v256, v257);
        __uint64_t v255 = AVE_GetCurrTime();
        int v256 = AVE_Log_GetLevelStr(6);
        if (*((unsigned char *)v8 + 1864)) {
          int v257 = "true";
        }
        else {
          int v257 = "false";
        }
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableUserQPForFacetime return %s", v255, 30, v256, v257);
    }
    int v27 = *((unsigned __int8 *)v8 + 1864);
    goto LABEL_19;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44B70]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v258 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v259 = AVE_GetCurrTime();
      int v260 = AVE_Log_GetLevelStr(6);
      if (v258)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserDPBFramesForFaceTime\n", v259, 30, v260);
        __uint64_t v261 = AVE_GetCurrTime();
        v968 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserDPBFramesForFaceTime", v261, 30, v968);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserDPBFramesForFaceTime", v259, 30, v260);
      }
    }
    Mutable = CFArrayCreateMutable(a3, 2 * *((int *)v8 + 5053), MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      if (*((int *)v8 + 5053) >= 1)
      {
        uint64_t v270 = 0;
        v271 = v8 + 2527;
        do
        {
          CFNumberRef v272 = CFNumberCreate(0, kCFNumberSInt32Type, v271);
          CFNumberRef v273 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)v271 + 68);
          CFArrayAppendValue(Mutable, v272);
          CFArrayAppendValue(Mutable, v273);
          if (v272) {
            CFRelease(v272);
          }
          if (v273) {
            CFRelease(v273);
          }
          ++v270;
          v271 = (const void **)((char *)v271 + 4);
        }
        while (v270 < *((int *)v8 + 5053));
      }
      goto LABEL_185;
    }
    goto LABEL_1232;
  }
  if (CFEqual(a2, @"DPBRequirements"))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v262 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v263 = AVE_GetCurrTime();
      int v264 = AVE_Log_GetLevelStr(6);
      if (v262)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_DPBRequirements\n", v263, 30, v264);
        __uint64_t v265 = AVE_GetCurrTime();
        v969 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_DPBRequirements", v265, 30, v969);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_DPBRequirements", v263, 30, v264);
      }
    }
    Mutable = CFArrayCreateMutable(a3, (int)(*((_DWORD *)v8 + 46294) << (*((_DWORD *)v8 + 46293) != 0)), MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      LODWORD(v825) = *((_DWORD *)v8 + 46294);
      if ((int)v825 >= 1)
      {
        uint64_t v826 = 0;
        v827 = (char *)(v8 + 2527);
        do
        {
          CFNumberRef v828 = CFNumberCreate(0, kCFNumberSInt32Type, v827);
          CFArrayAppendValue(Mutable, v828);
          if (v828) {
            CFRelease(v828);
          }
          ++v826;
          uint64_t v825 = *((int *)v8 + 46294);
          v827 += 4;
        }
        while (v826 < v825);
      }
      uint64_t v28 = 0;
      if (!*((_DWORD *)v8 + 46293) || (int)v825 < 1) {
        goto LABEL_186;
      }
      uint64_t v829 = 0;
      v830 = (char *)v8 + 20284;
      do
      {
        CFNumberRef v831 = CFNumberCreate(0, kCFNumberSInt32Type, v830);
        CFArrayAppendValue(Mutable, v831);
        if (v831) {
          CFRelease(v831);
        }
        ++v829;
        v830 += 4;
      }
      while (v829 < *((int *)v8 + 46294));
      goto LABEL_185;
    }
    if (AVE_Log_CheckLevel(0x1Eu, 4))
    {
      int v832 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v833 = AVE_GetCurrTime();
      v834 = AVE_Log_GetLevelStr(4);
      if (v832)
      {
        printf("%lld %d AVE %s: FIG: kVTCompressionPropertyKey_DPBRequirements CFArrayCreateMutable failed\n", v833, 30, v834);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: FIG: kVTCompressionPropertyKey_DPBRequirements CFArrayCreateMutable failed");
    }
LABEL_1448:
    uint64_t v28 = 4294954392;
    goto LABEL_186;
  }
  if (CFEqual(a2, @"EnableUserRefForFacetime"))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v266 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v267 = AVE_GetCurrTime();
      v268 = AVE_Log_GetLevelStr(6);
      if (*((unsigned char *)v8 + 20352)) {
        v269 = "true";
      }
      else {
        v269 = "false";
      }
      if (v266)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableUserRefForFacetime return %s\n", v267, 30, v268, v269);
        __uint64_t v267 = AVE_GetCurrTime();
        v268 = AVE_Log_GetLevelStr(6);
        if (*((unsigned char *)v8 + 20352)) {
          v269 = "true";
        }
        else {
          v269 = "false";
        }
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableUserRefForFacetime return %s", v267, 30, v268, v269);
    }
    int v27 = *((unsigned __int8 *)v8 + 20352);
    goto LABEL_19;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44AC0]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v274 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v275 = AVE_GetCurrTime();
      v276 = AVE_Log_GetLevelStr(6);
      int v277 = *((_DWORD *)v8 + 66);
      if (v274)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RealTime return %d\n", v275, 30, v276, v277);
        __uint64_t v278 = AVE_GetCurrTime();
        v970 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RealTime return %d", v278, 30, v970, *((_DWORD *)v8 + 66));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RealTime return %d", v275, 30, v276, v277);
      }
    }
    int v27 = *((_DWORD *)v8 + 66);
    if (v27 < 0) {
      goto LABEL_38;
    }
LABEL_19:
    if (v27)
    {
LABEL_20:
      uint64_t v28 = 0;
      uint64_t v29 = (__CFString **)MEMORY[0x1E4F1CFD0];
LABEL_104:
      int v82 = *v29;
LABEL_105:
      *a4 = v82;
      goto LABEL_106;
    }
LABEL_103:
    uint64_t v28 = 0;
    uint64_t v29 = (__CFString **)MEMORY[0x1E4F1CFC8];
    goto LABEL_104;
  }
  if (CFEqual(a2, @"EnableRCDriver"))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v279 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v280 = AVE_GetCurrTime();
      v281 = AVE_Log_GetLevelStr(6);
      if (v279)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableRCDriver return %d\n", v280, 30, v281, *((_DWORD *)v8 + 49));
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableRCDriver return %d");
    }
LABEL_1101:
    long long v33 = (void **)((char *)v8 + 196);
    goto LABEL_29;
  }
  if (CFEqual(a2, @"EnableRCFW"))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v282 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v283 = AVE_GetCurrTime();
      v284 = AVE_Log_GetLevelStr(6);
      if (v282)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableRCFW return %d\n", v283, 30, v284, *((_DWORD *)v8 + 49));
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableRCFW return %d");
    }
    goto LABEL_1101;
  }
  if (CFEqual(a2, @"RCMode"))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v285 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v286 = AVE_GetCurrTime();
      v287 = AVE_Log_GetLevelStr(6);
      if (v285)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RCMode return %d\n", v286, 30, v287, *((_DWORD *)v8 + 49));
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RCMode return %d");
    }
    goto LABEL_1101;
  }
  if (CFEqual(a2, @"SpatialAdaptiveQPLevel"))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v288 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v289 = AVE_GetCurrTime();
      v290 = AVE_Log_GetLevelStr(6);
      int v291 = *((_DWORD *)v8 + 503);
      if (v288)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SpatialAdaptiveQPLevel return %d\n", v289, 30, v290, v291);
        __uint64_t v292 = AVE_GetCurrTime();
        v971 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SpatialAdaptiveQPLevel return %d", v292, 30, v971, *((_DWORD *)v8 + 503));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SpatialAdaptiveQPLevel return %d", v289, 30, v290, v291);
      }
    }
    long long v33 = (void **)((char *)v8 + 2012);
    goto LABEL_29;
  }
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F448B8]))
  {
    if (CFEqual(a2, @"EnableQPMod"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v299 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v300 = AVE_GetCurrTime();
        v301 = AVE_Log_GetLevelStr(6);
        int v302 = *((unsigned __int8 *)v8 + 244);
        if (v299)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableQPMod return %d\n", v300, 30, v301, v302);
          __uint64_t v303 = AVE_GetCurrTime();
          v972 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableQPMod return %d", v303, 30, v972, *((unsigned __int8 *)v8 + 244));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableQPMod return %d", v300, 30, v301, v302);
        }
      }
      int v27 = *((unsigned __int8 *)v8 + 244);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"EnableLambdaMod"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v304 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v305 = AVE_GetCurrTime();
        v306 = AVE_Log_GetLevelStr(6);
        int v307 = *((unsigned __int8 *)v8 + 246);
        if (v304)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableLambdaMod return %d\n", v305, 30, v306, v307);
          __uint64_t v308 = AVE_GetCurrTime();
          v973 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableLambdaMod return %d", v308, 30, v973, *((unsigned __int8 *)v8 + 246));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableLambdaMod return %d", v305, 30, v306, v307);
        }
      }
      int v27 = *((unsigned __int8 *)v8 + 246);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"EnableVarianceQPMod"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v309 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v310 = AVE_GetCurrTime();
        v311 = AVE_Log_GetLevelStr(6);
        if (*((unsigned char *)v8 + 247)) {
          v312 = "TRUE";
        }
        else {
          v312 = "FALSE";
        }
        if (v309)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableVarianceQPMod return %s\n", v310, 30, v311, v312);
          __uint64_t v310 = AVE_GetCurrTime();
          v311 = AVE_Log_GetLevelStr(6);
          if (*((unsigned char *)v8 + 247)) {
            v312 = "TRUE";
          }
          else {
            v312 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableVarianceQPMod return %s", v310, 30, v311, v312);
      }
      int v27 = *((unsigned __int8 *)v8 + 247);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"EnableLowVarianceQPMod"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v313 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v314 = AVE_GetCurrTime();
        v315 = AVE_Log_GetLevelStr(6);
        if (*((unsigned char *)v8 + 248)) {
          v316 = "TRUE";
        }
        else {
          v316 = "FALSE";
        }
        if (v313)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableLowVarianceQPMod return %s\n", v314, 30, v315, v316);
          __uint64_t v314 = AVE_GetCurrTime();
          v315 = AVE_Log_GetLevelStr(6);
          if (*((unsigned char *)v8 + 248)) {
            v316 = "TRUE";
          }
          else {
            v316 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableLowVarianceQPMod return %s", v314, 30, v315, v316);
      }
      int v27 = *((unsigned __int8 *)v8 + 248);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"EnableHevcDeRingingQPMod"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v317 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v318 = AVE_GetCurrTime();
        v319 = AVE_Log_GetLevelStr(6);
        if (*((unsigned char *)v8 + 249)) {
          v320 = "TRUE";
        }
        else {
          v320 = "FALSE";
        }
        if (v317)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableHevcDeRingingQPMod return %s\n", v318, 30, v319, v320);
          __uint64_t v318 = AVE_GetCurrTime();
          v319 = AVE_Log_GetLevelStr(6);
          if (*((unsigned char *)v8 + 249)) {
            v320 = "TRUE";
          }
          else {
            v320 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableHevcDeRingingQPMod return %s", v318, 30, v319, v320);
      }
      int v27 = *((unsigned __int8 *)v8 + 249);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"UseCAVLCBits"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v321 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v322 = AVE_GetCurrTime();
        v323 = AVE_Log_GetLevelStr(6);
        if (*((unsigned char *)v8 + 253)) {
          v324 = "TRUE";
        }
        else {
          v324 = "FALSE";
        }
        if (v321)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseCAVLCBits return %s\n", v322, 30, v323, v324);
          __uint64_t v322 = AVE_GetCurrTime();
          v323 = AVE_Log_GetLevelStr(6);
          if (*((unsigned char *)v8 + 253)) {
            v324 = "TRUE";
          }
          else {
            v324 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseCAVLCBits return %s", v322, 30, v323, v324);
      }
      if (!*((_DWORD *)v8 + 4690))
      {
        int v27 = *((unsigned __int8 *)v8 + 253);
        goto LABEL_19;
      }
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v837 = AVE_Log_CheckConsole(3u);
        __uint64_t v838 = AVE_GetCurrTime();
        v839 = AVE_Log_GetLevelStr(4);
        if (v837)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: Property supported only on H.264 codec. Failed.\n", v838, 3, v839, "AVE_HEVCCopyProperty", 14069, "(encoderPrivateStorage->VideoParamsDriver.codecID == AVE_CodecType_AVC)");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: Property supported only on H.264 codec. Failed.");
      }
      goto LABEL_22;
    }
    if (CFEqual(a2, @"EnableStaticAreasLowQP"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v325 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v326 = AVE_GetCurrTime();
        v327 = AVE_Log_GetLevelStr(6);
        int v328 = *((_DWORD *)v8 + 65);
        if (v325)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableStaticAreasLowQP return 0x%08x\n", v326, 30, v327, v328);
          __uint64_t v329 = AVE_GetCurrTime();
          v974 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableStaticAreasLowQP return 0x%08x", v329, 30, v974, *((_DWORD *)v8 + 65));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableStaticAreasLowQP return 0x%08x", v326, 30, v327, v328);
        }
      }
      long long v33 = (void **)((char *)v8 + 260);
      goto LABEL_29;
    }
    if (CFEqual(a2, @"LookAheadFrames"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v330 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v331 = AVE_GetCurrTime();
        v332 = AVE_Log_GetLevelStr(6);
        int v333 = *((_DWORD *)v8 + 58);
        if (v330)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SuggestedLookAheadFrameCount return %d\n", v331, 30, v332, v333);
          __uint64_t v334 = AVE_GetCurrTime();
          v975 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SuggestedLookAheadFrameCount return %d", v334, 30, v975, *((_DWORD *)v8 + 58));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SuggestedLookAheadFrameCount return %d", v331, 30, v332, v333);
        }
      }
      CFAllocatorRef v34 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      long long v33 = (void **)(v8 + 29);
      goto LABEL_30;
    }
    if (CFEqual(a2, @"PreemptiveLoadBalancing"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v335 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v336 = AVE_GetCurrTime();
        v337 = AVE_Log_GetLevelStr(6);
        int v338 = *((_DWORD *)v8 + 4870);
        if (v335)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_PreemptiveLoadBalancing return %d\n", v336, 30, v337, v338);
          __uint64_t v339 = AVE_GetCurrTime();
          v976 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_PreemptiveLoadBalancing return %d", v339, 30, v976, *((_DWORD *)v8 + 4870));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_PreemptiveLoadBalancing return %d", v336, 30, v337, v338);
        }
      }
      if (*((_DWORD *)v8 + 4870) == 2) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, @"UseAsyncFWScheduling"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v340 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v341 = AVE_GetCurrTime();
        v342 = AVE_Log_GetLevelStr(6);
        if (*((unsigned char *)v8 + 18684)) {
          v343 = "TRUE";
        }
        else {
          v343 = "FALSE";
        }
        if (v340)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseAsyncFWScheduling return %s\n", v341, 30, v342, v343);
          __uint64_t v341 = AVE_GetCurrTime();
          v342 = AVE_Log_GetLevelStr(6);
          if (*((unsigned char *)v8 + 18684)) {
            v343 = "TRUE";
          }
          else {
            v343 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseAsyncFWScheduling return %s", v341, 30, v342, v343);
      }
      int v27 = *((unsigned __int8 *)v8 + 18684);
      goto LABEL_19;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44B80]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v344 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v345 = AVE_GetCurrTime();
        v346 = AVE_Log_GetLevelStr(6);
        if (v344)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UsingHardwareAcceleratedVideoEncoder return TRUE\n", v345, 30, v346);
          __uint64_t v347 = AVE_GetCurrTime();
          v977 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UsingHardwareAcceleratedVideoEncoder return TRUE", v347, 30, v977);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UsingHardwareAcceleratedVideoEncoder return TRUE", v345, 30, v346);
        }
      }
      goto LABEL_20;
    }
    if (CFEqual(a2, @"EnableStatsCollect"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v348 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v349 = AVE_GetCurrTime();
        v350 = AVE_Log_GetLevelStr(6);
        int v351 = *((_DWORD *)v8 + 480);
        if (v348)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableStatsCollect return %d\n", v349, 30, v350, v351);
          __uint64_t v352 = AVE_GetCurrTime();
          v978 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableStatsCollect return %d", v352, 30, v978, *((_DWORD *)v8 + 480));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableStatsCollect return %d", v349, 30, v350, v351);
        }
      }
      long long v33 = (void **)(v8 + 240);
      goto LABEL_29;
    }
    if (CFEqual(a2, @"EnableContextSwitchInTheMiddle"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v353 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v354 = AVE_GetCurrTime();
        v355 = AVE_Log_GetLevelStr(6);
        if (*((unsigned char *)v8 + 1925)) {
          v356 = "TRUE";
        }
        else {
          v356 = "FALSE";
        }
        if (v353)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableContextSwitchInTheMiddle return %s\n", v354, 30, v355, v356);
          __uint64_t v354 = AVE_GetCurrTime();
          v355 = AVE_Log_GetLevelStr(6);
          if (*((unsigned char *)v8 + 1925)) {
            v356 = "TRUE";
          }
          else {
            v356 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableContextSwitchInTheMiddle return %s", v354, 30, v355, v356);
      }
      int v27 = *((unsigned __int8 *)v8 + 1925);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"EnableMultiReferenceP"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v357 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v358 = AVE_GetCurrTime();
        v359 = AVE_Log_GetLevelStr(6);
        if (*((unsigned char *)v8 + 18676)) {
          v360 = "TRUE";
        }
        else {
          v360 = "FALSE";
        }
        if (v357)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMultiReferenceP return %s\n", v358, 30, v359, v360);
          __uint64_t v358 = AVE_GetCurrTime();
          v359 = AVE_Log_GetLevelStr(6);
          if (*((unsigned char *)v8 + 18676)) {
            v360 = "TRUE";
          }
          else {
            v360 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMultiReferenceP return %s", v358, 30, v359, v360);
      }
      int v27 = *((unsigned __int8 *)v8 + 18676);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"MultiReferencePSpacing"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v361 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v362 = AVE_GetCurrTime();
        v363 = AVE_Log_GetLevelStr(6);
        int v364 = *((_DWORD *)v8 + 4670);
        if (v361)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiReferencePSpacing return %d\n", v362, 30, v363, v364);
          __uint64_t v365 = AVE_GetCurrTime();
          v979 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiReferencePSpacing return %d", v365, 30, v979, *((_DWORD *)v8 + 4670));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiReferencePSpacing return %d", v362, 30, v363, v364);
        }
      }
      uint64_t v135 = 18680;
      goto LABEL_171;
    }
    if (CFEqual(a2, @"EnableSEITagInsertion"))
    {
      if (!AVE_Log_CheckLevel(0x1Eu, 6)) {
        goto LABEL_1456;
      }
      int v366 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v367 = AVE_GetCurrTime();
      v368 = AVE_Log_GetLevelStr(6);
      if (v366)
      {
        if (*((unsigned char *)v8 + 18685) || *((unsigned char *)v8 + 18687))
        {
          v369 = "TRUE";
        }
        else
        {
          v369 = "TRUE";
          if (!*((unsigned char *)v8 + 18688) && !*((unsigned char *)v8 + 18689)) {
            v369 = "FALSE";
          }
        }
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableSEITagInsertion return %s\n", v367, 30, v368, v369);
        __uint64_t v367 = AVE_GetCurrTime();
        v368 = AVE_Log_GetLevelStr(6);
        if (*((unsigned char *)v8 + 18685)) {
          goto LABEL_1150;
        }
      }
      else if (*((unsigned char *)v8 + 18685))
      {
        goto LABEL_1150;
      }
      if (!*((unsigned char *)v8 + 18687))
      {
        v840 = "TRUE";
        if (!*((unsigned char *)v8 + 18688) && !*((unsigned char *)v8 + 18689)) {
          v840 = "FALSE";
        }
        goto LABEL_1455;
      }
LABEL_1150:
      v840 = "TRUE";
LABEL_1455:
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableSEITagInsertion return %s", v367, 30, v368, v840);
LABEL_1456:
      if (*((unsigned char *)v8 + 18685)
        || *((unsigned char *)v8 + 18687)
        || *((unsigned char *)v8 + 18688)
        || *((unsigned char *)v8 + 18689)
        || *((unsigned char *)v8 + 18690)
        || *((unsigned char *)v8 + 18691)
        || *((unsigned char *)v8 + 18692))
      {
        goto LABEL_20;
      }
      int v27 = *((unsigned __int8 *)v8 + 18693);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"EnableT35SEITagInsertion"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v370 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v371 = AVE_GetCurrTime();
        v372 = AVE_Log_GetLevelStr(6);
        if (*((unsigned char *)v8 + 18694)) {
          v373 = "TRUE";
        }
        else {
          v373 = "FALSE";
        }
        if (v370)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableT35SEITagInsertion return %s\n", v371, 30, v372, v373);
          __uint64_t v371 = AVE_GetCurrTime();
          v372 = AVE_Log_GetLevelStr(6);
          if (*((unsigned char *)v8 + 18694)) {
            v373 = "TRUE";
          }
          else {
            v373 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableT35SEITagInsertion return %s", v371, 30, v372, v373);
      }
      int v27 = *((unsigned __int8 *)v8 + 18694);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"log2_max_minus4"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v374 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v375 = AVE_GetCurrTime();
        v376 = AVE_Log_GetLevelStr(6);
        int v377 = *((_DWORD *)v8 + 25786);
        if (v374)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_log2_max_minus4 return %d\n", v375, 30, v376, v377);
          __uint64_t v378 = AVE_GetCurrTime();
          v980 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_log2_max_minus4 return %d", v378, 30, v980, *((_DWORD *)v8 + 25786));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_log2_max_minus4 return %d", v375, 30, v376, v377);
        }
      }
      long long v33 = (void **)(v8 + 12893);
      goto LABEL_29;
    }
    if (CFEqual(a2, @"LowDelay"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v379 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v380 = AVE_GetCurrTime();
        v381 = AVE_Log_GetLevelStr(6);
        if (*((_DWORD *)v8 + 516)) {
          v382 = "true";
        }
        else {
          v382 = "false";
        }
        if (v379)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LowDelay return %s\n", v380, 30, v381, v382);
          __uint64_t v380 = AVE_GetCurrTime();
          v381 = AVE_Log_GetLevelStr(6);
          if (*((_DWORD *)v8 + 516)) {
            v382 = "true";
          }
          else {
            v382 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LowDelay return %s", v380, 30, v381, v382);
      }
      int v27 = *((_DWORD *)v8 + 516);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"AllowOpenGOP"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v383 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v384 = AVE_GetCurrTime();
        v385 = AVE_Log_GetLevelStr(6);
        if ((_BYTE)v8[253]) {
          v386 = "true";
        }
        else {
          v386 = "false";
        }
        if (v383)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllowOpenGOP return %s\n", v384, 30, v385, v386);
          __uint64_t v384 = AVE_GetCurrTime();
          v385 = AVE_Log_GetLevelStr(6);
          if (v8[253]) {
            v386 = "true";
          }
          else {
            v386 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllowOpenGOP return %s", v384, 30, v385, v386);
      }
      if ((_BYTE)v8[253]) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44A48]))
    {
      int v387 = *((_DWORD *)v8 + 25784) + 8;
      LODWORD(keys[0]) = v387;
      if (*((_DWORD *)v8 + 4690) == 1)
      {
        if (AVE_Log_CheckLevel(0x1Eu, 6))
        {
          int v388 = AVE_Log_CheckConsole(0x1Eu);
          __uint64_t v389 = AVE_GetCurrTime();
          v390 = AVE_Log_GetLevelStr(6);
          if (v388)
          {
            printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_OutputBitDepth return %d\n", v389, 30, v390, v387);
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(6);
          }
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_OutputBitDepth return %d");
        }
        goto LABEL_50;
      }
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v841 = AVE_Log_CheckConsole(3u);
        __uint64_t v842 = AVE_GetCurrTime();
        v843 = AVE_Log_GetLevelStr(4);
        if (v841)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: Property OutputBitDepth supported only on H.265 codec. Failed.\n", v842, 3, v843, "AVE_HEVCCopyProperty", 14210, "(encoderPrivateStorage->VideoParamsDriver.codecID == AVE_CodecType_HEVC)");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: Property OutputBitDepth supported only on H.265 codec. Failed.");
      }
      goto LABEL_22;
    }
    if (CFEqual(a2, @"ThroughputRateMode"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v391 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v392 = AVE_GetCurrTime();
        v393 = AVE_Log_GetLevelStr(6);
        int v394 = *((_DWORD *)v8 + 4694);
        unsigned int v395 = v394 - 1;
        if (v391)
        {
          if (v395 < 6 && ((0x37u >> v395) & 1) != 0)
          {
            v396 = off_1E6225040[v395];
          }
          else if (v394 == 4)
          {
            v396 = "TURBO";
          }
          else
          {
            v396 = "DISABLED";
          }
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ThroughputRateMode return %s\n", v392, 30, v393, v396);
          __uint64_t v392 = AVE_GetCurrTime();
          v393 = AVE_Log_GetLevelStr(6);
          int v845 = *((_DWORD *)v8 + 4694);
          int v846 = v845 - 1;
          if (v845 - 1) < 6 && ((0x37u >> v846))
          {
            v844 = off_1E6225040[v846];
          }
          else if (v845 == 4)
          {
            v844 = "TURBO";
          }
          else
          {
            v844 = "DISABLED";
          }
        }
        else if (v395 < 6 && ((0x37u >> v395) & 1) != 0)
        {
          v844 = off_1E6225040[v395];
        }
        else if (v394 == 4)
        {
          v844 = "TURBO";
        }
        else
        {
          v844 = "DISABLED";
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ThroughputRateMode return %s", v392, 30, v393, v844);
      }
      int v131 = *((_DWORD *)v8 + 4694);
      goto LABEL_158;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44A90]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v397 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v398 = AVE_GetCurrTime();
        v399 = AVE_Log_GetLevelStr(6);
        if (*((unsigned char *)v8 + 18781)) {
          v400 = "true";
        }
        else {
          v400 = "false";
        }
        if (v397)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_PrioritizeEncodingSpeedOverQuality return %s\n", v398, 30, v399, v400);
          __uint64_t v398 = AVE_GetCurrTime();
          v399 = AVE_Log_GetLevelStr(6);
          if (*((unsigned char *)v8 + 18781)) {
            v400 = "true";
          }
          else {
            v400 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_PrioritizeEncodingSpeedOverQuality return %s", v398, 30, v399, v400);
      }
      int v27 = *((unsigned __int8 *)v8 + 18781);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"HevcSplitDecision"))
    {
      if (*((_DWORD *)v8 + 4690) == 1)
      {
        if (AVE_Log_CheckLevel(0x1Eu, 6))
        {
          int v401 = AVE_Log_CheckConsole(0x1Eu);
          __uint64_t v402 = AVE_GetCurrTime();
          v403 = AVE_Log_GetLevelStr(6);
          int v404 = *((_DWORD *)v8 + 4696);
          if (v401)
          {
            printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_HevcSplitDecision return %d\n", v402, 30, v403, v404);
            __uint64_t v405 = AVE_GetCurrTime();
            v981 = AVE_Log_GetLevelStr(6);
            syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_HevcSplitDecision return %d", v405, 30, v981, *((_DWORD *)v8 + 4696));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_HevcSplitDecision return %d", v402, 30, v403, v404);
          }
        }
        int v131 = *((_DWORD *)v8 + 4696);
        goto LABEL_158;
      }
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v847 = AVE_Log_CheckConsole(3u);
        __uint64_t v848 = AVE_GetCurrTime();
        v849 = AVE_Log_GetLevelStr(4);
        if (v847)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: Property HevcSplitDecisionMode supported only on H.265 codec. Failed.\n", v848, 3, v849, "AVE_HEVCCopyProperty", 14251, "(encoderPrivateStorage->VideoParamsDriver.codecID == AVE_CodecType_HEVC)");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: Property HevcSplitDecisionMode supported only on H.265 codec. Failed.");
      }
LABEL_22:
      uint64_t v28 = 4294954384;
      goto LABEL_106;
    }
    v1050 = (int *)v8 + 29595;
    if (CFEqual(a2, @"EnableQPModChroma"))
    {
      if (*((_DWORD *)v8 + 4690) == 1)
      {
        if (AVE_Log_CheckLevel(0x1Eu, 6))
        {
          int v406 = AVE_Log_CheckConsole(0x1Eu);
          __uint64_t v407 = AVE_GetCurrTime();
          v408 = AVE_Log_GetLevelStr(6);
          int v409 = *((_DWORD *)v8 + 31726);
          if (v406)
          {
            printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableQPModChroma return 0x%08x\n", v407, 30, v408, v409);
            __uint64_t v410 = AVE_GetCurrTime();
            v982 = AVE_Log_GetLevelStr(6);
            syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableQPModChroma return 0x%08x", v410, 30, v982, *((_DWORD *)v8 + 31726));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableQPModChroma return 0x%08x", v407, 30, v408, v409);
          }
        }
        long long v33 = (void **)(v8 + 15863);
        goto LABEL_29;
      }
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v850 = AVE_Log_CheckConsole(3u);
        __uint64_t v851 = AVE_GetCurrTime();
        v852 = AVE_Log_GetLevelStr(4);
        if (v850)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: Property EnableQPModChroma supported only on H.265 codec. Failed.\n", v851, 3, v852, "AVE_HEVCCopyProperty", 14265, "(encoderPrivateStorage->VideoParamsDriver.codecID == AVE_CodecType_HEVC)");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: Property EnableQPModChroma supported only on H.265 codec. Failed.");
      }
      goto LABEL_22;
    }
    if (CFEqual(a2, @"MotionEstimationSearchMode"))
    {
      *a4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, v8 + 23144);
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v411 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v412 = AVE_GetCurrTime();
        v413 = AVE_Log_GetLevelStr(6);
        if (v411)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MotionEstimationSearchMode return %d\n", v412, 30, v413, *((_DWORD *)v8 + 46288));
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MotionEstimationSearchMode return %d");
      }
      goto LABEL_38;
    }
    if (CFEqual(a2, @"SupportedMotionSearchModes"))
    {
      SearchRange = AVE_DevCap_FindSearchRange(*((_DWORD *)v8 + 45892), 1, 1);
      if (SearchRange)
      {
        v415 = (int *)SearchRange;
        v416 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
        if (v416)
        {
          Mutable = v416;
          uint64_t Array = AVE_SearchRange_MakeArray(v415 + 1, *v415, v416);
          uint64_t v28 = AVE_RetCode2OSStatus(Array);
          if (AVE_Log_CheckLevel(0x1Eu, 6))
          {
            int v418 = AVE_Log_CheckConsole(0x1Eu);
            __uint64_t v419 = AVE_GetCurrTime();
            v420 = AVE_Log_GetLevelStr(6);
            if (v418)
            {
              printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SupportedMotionSearchModes\n", v419, 30, v420);
              __uint64_t v421 = AVE_GetCurrTime();
              v983 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SupportedMotionSearchModes", v421, 30, v983);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SupportedMotionSearchModes", v419, 30, v420);
            }
          }
          goto LABEL_186;
        }
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v856 = AVE_Log_CheckConsole(3u);
          __uint64_t v857 = AVE_GetCurrTime();
          v858 = AVE_Log_GetLevelStr(4);
          if (v856)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to create CFArray\n", v857, 3, v858, "AVE_HEVCCopyProperty", 14295, "pArray != __null");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray");
        }
      }
      else if (AVE_Log_CheckLevel(3u, 4))
      {
        int v853 = AVE_Log_CheckConsole(3u);
        __uint64_t v854 = AVE_GetCurrTime();
        v855 = AVE_Log_GetLevelStr(4);
        if (v853)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to find matched search range\n", v854, 3, v855, "AVE_HEVCCopyProperty", 14291, "pSR != __null");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to find matched search range");
      }
      uint64_t v28 = 4294954392;
      goto LABEL_106;
    }
    if (CFEqual(a2, @"UseElementaryStreamOutput"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v422 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v423 = AVE_GetCurrTime();
        v424 = AVE_Log_GetLevelStr(6);
        if (*v37) {
          v425 = "TRUE";
        }
        else {
          v425 = "FALSE";
        }
        if (v422)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseElementaryStreamOutput return %s\n", v423, 30, v424, v425);
          __uint64_t v423 = AVE_GetCurrTime();
          v424 = AVE_Log_GetLevelStr(6);
          if (*v37) {
            v425 = "TRUE";
          }
          else {
            v425 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseElementaryStreamOutput return %s", v423, 30, v424, v425);
      }
      int v27 = *v37;
      goto LABEL_19;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44980]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v426 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v427 = AVE_GetCurrTime();
        v428 = AVE_Log_GetLevelStr(6);
        int v429 = *((_DWORD *)v8 + 25773);
        if (v426)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_InputPixelFormat return %d\n", v427, 30, v428, v429);
          __uint64_t v430 = AVE_GetCurrTime();
          v984 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_InputPixelFormat return %d", v430, 30, v984, *((_DWORD *)v8 + 25773));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_InputPixelFormat return %d", v427, 30, v428, v429);
        }
      }
      int v859 = *((_DWORD *)v8 + 25773);
      switch(v859)
      {
        case 3:
          if (*((_DWORD *)v8 + 27440) == 1) {
            int v860 = 875836518;
          }
          else {
            int v860 = 875836534;
          }
          goto LABEL_1480;
        case 2:
          if (*((_DWORD *)v8 + 27440) == 1) {
            int v860 = 875704934;
          }
          else {
            int v860 = 875704950;
          }
          goto LABEL_1480;
        case 1:
          if (*((_DWORD *)v8 + 27440) == 1) {
            int v860 = 875704422;
          }
          else {
            int v860 = 875704438;
          }
LABEL_1480:
          LODWORD(keys[0]) = v860;
          CFAllocatorRef v34 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          long long v33 = keys;
          goto LABEL_30;
      }
LABEL_1302:
      StringForIntegerCodePoint = 0;
      goto LABEL_32;
    }
    if (CFEqual(a2, @"FlatAreaLowQp"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v431 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v432 = AVE_GetCurrTime();
        v433 = AVE_Log_GetLevelStr(6);
        if (*((unsigned char *)v8 + 255)) {
          v434 = "TRUE";
        }
        else {
          v434 = "FALSE";
        }
        if (v431)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_FlatAreaLowQp return %s\n", v432, 30, v433, v434);
          __uint64_t v432 = AVE_GetCurrTime();
          v433 = AVE_Log_GetLevelStr(6);
          if (*((unsigned char *)v8 + 255)) {
            v434 = "TRUE";
          }
          else {
            v434 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_FlatAreaLowQp return %s", v432, 30, v433, v434);
      }
      int v27 = *((unsigned __int8 *)v8 + 255);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"UltraFlatAreaLowQp"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v435 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v436 = AVE_GetCurrTime();
        v437 = AVE_Log_GetLevelStr(6);
        if (*((unsigned char *)v8 + 256)) {
          v438 = "TRUE";
        }
        else {
          v438 = "FALSE";
        }
        if (v435)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UltraFlatAreaLowQp return %s\n", v436, 30, v437, v438);
          __uint64_t v436 = AVE_GetCurrTime();
          v437 = AVE_Log_GetLevelStr(6);
          if (*((unsigned char *)v8 + 256)) {
            v438 = "TRUE";
          }
          else {
            v438 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UltraFlatAreaLowQp return %s", v436, 30, v437, v438);
      }
      int v27 = *((unsigned __int8 *)v8 + 256);
      goto LABEL_19;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44A58]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v439 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v440 = AVE_GetCurrTime();
        v441 = AVE_Log_GetLevelStr(6);
        if (*((unsigned char *)v8 + 257)) {
          v442 = "true";
        }
        else {
          v442 = "false";
        }
        if (v439)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_PerceptualQualityOptimization return %s\n", v440, 30, v441, v442);
          __uint64_t v440 = AVE_GetCurrTime();
          v441 = AVE_Log_GetLevelStr(6);
          if (*((unsigned char *)v8 + 257)) {
            v442 = "true";
          }
          else {
            v442 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_PerceptualQualityOptimization return %s", v440, 30, v441, v442);
      }
      int v27 = *((unsigned __int8 *)v8 + 257);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"LrmePipeSyncMode"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v443 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v444 = AVE_GetCurrTime();
        v445 = AVE_Log_GetLevelStr(6);
        if (*v1052) {
          v446 = "TRUE";
        }
        else {
          v446 = "FALSE";
        }
        if (v443)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LrmePipeSyncMode return %s\n", v444, 30, v445, v446);
          __uint64_t v444 = AVE_GetCurrTime();
          v445 = AVE_Log_GetLevelStr(6);
          if (*v1052) {
            v446 = "TRUE";
          }
          else {
            v446 = "FALSE";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LrmePipeSyncMode return %s", v444, 30, v445, v446);
      }
      int v27 = *v1052;
      goto LABEL_19;
    }
    if (CFEqual(a2, @"LRMEScaledSrcEn"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v447 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v448 = AVE_GetCurrTime();
        v449 = AVE_Log_GetLevelStr(6);
        int v450 = *((unsigned __int8 *)v8 + 18338);
        if (v447)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LRMEScaledSrcEn return 0x%08x\n", v448, 30, v449, v450);
          __uint64_t v451 = AVE_GetCurrTime();
          v985 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LRMEScaledSrcEn return 0x%08x", v451, 30, v985, *((unsigned __int8 *)v8 + 18338));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LRMEScaledSrcEn return 0x%08x", v448, 30, v449, v450);
        }
      }
      uint64_t v135 = 18338;
      goto LABEL_171;
    }
    if (CFEqual(a2, @"LRMEOutputType"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v452 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v453 = AVE_GetCurrTime();
        v454 = AVE_Log_GetLevelStr(6);
        int v455 = *((_DWORD *)v8 + 5040);
        if (v452)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LRMEOutputType return 0x%08x\n", v453, 30, v454, v455);
          __uint64_t v456 = AVE_GetCurrTime();
          v986 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LRMEOutputType return 0x%08x", v456, 30, v986, *((_DWORD *)v8 + 5040));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LRMEOutputType return 0x%08x", v453, 30, v454, v455);
        }
      }
      uint64_t v135 = 20160;
      goto LABEL_171;
    }
    if (CFEqual(a2, @"CodedBuffersOverride"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v457 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v458 = AVE_GetCurrTime();
        v459 = AVE_Log_GetLevelStr(6);
        int v460 = *((_DWORD *)v8 + 5048);
        if (v457)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_CodedBuffersOverride return %d\n", v458, 30, v459, v460);
          __uint64_t v461 = AVE_GetCurrTime();
          v987 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_CodedBuffersOverride return %d", v461, 30, v987, *((_DWORD *)v8 + 5048));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_CodedBuffersOverride return %d", v458, 30, v459, v460);
        }
      }
      uint64_t v135 = 20192;
      goto LABEL_171;
    }
    if (CFEqual(a2, @"EnableMBInputCtrl"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v462 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v463 = AVE_GetCurrTime();
        v464 = AVE_Log_GetLevelStr(6);
        if (*((unsigned char *)v8 + 1924)) {
          v465 = "true";
        }
        else {
          v465 = "false";
        }
        if (v462)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMBInputCtrl return %s\n", v463, 30, v464, v465);
          __uint64_t v463 = AVE_GetCurrTime();
          v464 = AVE_Log_GetLevelStr(6);
          if (*((unsigned char *)v8 + 1924)) {
            v465 = "true";
          }
          else {
            v465 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMBInputCtrl return %s", v463, 30, v464, v465);
      }
      int v27 = *((unsigned __int8 *)v8 + 1924);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"HierarchicalB"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v466 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v467 = AVE_GetCurrTime();
        v468 = AVE_Log_GetLevelStr(6);
        int v469 = *((_DWORD *)v8 + 4487);
        if (v466)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_HierarchicalB return %u\n", v467, 30, v468, v469);
          __uint64_t v470 = AVE_GetCurrTime();
          v988 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_HierarchicalB return %u", v470, 30, v988, *((_DWORD *)v8 + 4487));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_HierarchicalB return %u", v467, 30, v468, v469);
        }
      }
      int v861 = *((_DWORD *)v8 + 4487);
      goto LABEL_1361;
    }
    if (CFEqual(a2, @"UserRPSForFaceTime"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v471 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v472 = AVE_GetCurrTime();
        v473 = AVE_Log_GetLevelStr(6);
        if (v471)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UserRPSForFaceTime\n", v472, 30, v473);
          __uint64_t v474 = AVE_GetCurrTime();
          v989 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UserRPSForFaceTime", v474, 30, v989);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UserRPSForFaceTime", v472, 30, v473);
        }
      }
      Mutable = CFArrayCreateMutable(a3, 2 * *((int *)v8 + 5053), MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        if (*((int *)v8 + 5053) >= 1)
        {
          uint64_t v862 = 0;
          v863 = v8 + 2527;
          do
          {
            CFNumberRef v864 = CFNumberCreate(0, kCFNumberSInt32Type, v863);
            CFNumberRef v865 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)v863 + 68);
            CFArrayAppendValue(Mutable, v864);
            CFArrayAppendValue(Mutable, v865);
            if (v864) {
              CFRelease(v864);
            }
            if (v865) {
              CFRelease(v865);
            }
            ++v862;
            v863 = (const void **)((char *)v863 + 4);
          }
          while (v862 < *((int *)v8 + 5053));
        }
        goto LABEL_185;
      }
LABEL_1232:
      if (AVE_Log_CheckLevel(0x1Eu, 4))
      {
        int v866 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v867 = AVE_GetCurrTime();
        v868 = AVE_Log_GetLevelStr(4);
        if (v866)
        {
          printf("%lld %d AVE %s: FIG: CFArrayCreateMutable failed\n", v867, 30, v868);
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: FIG: CFArrayCreateMutable failed");
      }
      goto LABEL_1448;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44B90]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v475 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v476 = AVE_GetCurrTime();
        v477 = AVE_Log_GetLevelStr(6);
        int v478 = (*((_DWORD *)v8 + 50) >> 5) & 1;
        if (v475)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_VideoResolutionAdaptation return %d\n", v476, 30, v477, v478);
          __uint64_t v479 = AVE_GetCurrTime();
          v990 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_VideoResolutionAdaptation return %d", v479, 30, v990, (*((_DWORD *)v8 + 50) >> 5) & 1);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_VideoResolutionAdaptation return %d", v476, 30, v477, v478);
        }
      }
      if (((_BYTE)v8[25] & 0x20) != 0) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44B98]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v480 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v481 = AVE_GetCurrTime();
        v482 = AVE_Log_GetLevelStr(6);
        int v483 = *((_DWORD *)v8 + 5089);
        if (v480)
        {
          printf("%lld %d AVE %s: asked for kVTCompressionPropertyKey_VideoResolutionAdaptationType return %d\n", v481, 30, v482, v483);
          __uint64_t v484 = AVE_GetCurrTime();
          v991 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: asked for kVTCompressionPropertyKey_VideoResolutionAdaptationType return %d", v484, 30, v991, *((_DWORD *)v8 + 5089));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: asked for kVTCompressionPropertyKey_VideoResolutionAdaptationType return %d", v481, 30, v482, v483);
        }
      }
      uint64_t v135 = 20356;
      goto LABEL_171;
    }
    if (CFEqual(a2, @"SAOMode"))
    {
      int v485 = *((_DWORD *)v8 + 4697);
      LODWORD(keys[0]) = v485;
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v486 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v487 = AVE_GetCurrTime();
        v488 = AVE_Log_GetLevelStr(6);
        if (v486)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SAOMode return %d\n", v487, 30, v488, v485);
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SAOMode return %d");
      }
      goto LABEL_50;
    }
    if (CFEqual(a2, @"AllocMaxOpBuffer"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v489 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v490 = AVE_GetCurrTime();
        v491 = AVE_Log_GetLevelStr(6);
        int v492 = *((unsigned __int8 *)v8 + 20200);
        if (v489)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllocMaxOpBuffer return %u\n", v490, 30, v491, v492);
          __uint64_t v493 = AVE_GetCurrTime();
          v992 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllocMaxOpBuffer return %u", v493, 30, v992, *((unsigned __int8 *)v8 + 20200));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllocMaxOpBuffer return %u", v490, 30, v491, v492);
        }
      }
      int v27 = *((unsigned __int8 *)v8 + 20200);
      goto LABEL_19;
    }
    if (CFEqual(a2, @"AllocCodedBufferHalfSize"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v494 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v495 = AVE_GetCurrTime();
        v496 = AVE_Log_GetLevelStr(6);
        int v497 = *((_DWORD *)v8 + 5051);
        if (v494)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllocCodedBufferHalfSize return %u\n", v495, 30, v496, v497);
          __uint64_t v498 = AVE_GetCurrTime();
          v993 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllocCodedBufferHalfSize return %u", v498, 30, v993, *((_DWORD *)v8 + 5051));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllocCodedBufferHalfSize return %u", v495, 30, v496, v497);
        }
      }
      if (*((_DWORD *)v8 + 5051) == 50) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, @"ChromaQpOffset"))
    {
      Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E4F1D510]);
      CFNumberRef v499 = CFNumberCreate(a3, kCFNumberSInt32Type, (char *)v8 + 118420);
      CFNumberRef v500 = CFNumberCreate(a3, kCFNumberSInt32Type, (char *)v8 + 118452);
      CFArrayAppendValue(Mutable, v499);
      CFArrayAppendValue(Mutable, v500);
      if (v499) {
        CFRelease(v499);
      }
      if (v500) {
        CFRelease(v500);
      }
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v501 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v502 = AVE_GetCurrTime();
        v503 = AVE_Log_GetLevelStr(6);
        if (v501)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ChromaQpOffset return %d %d\n", v502, 30, v503, *((_DWORD *)v8 + 29605), *((_DWORD *)v8 + 29613));
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ChromaQpOffset return %d %d");
      }
      goto LABEL_185;
    }
    if (CFEqual(a2, @"ChromaQPIndexOffsetMultiPPS"))
    {
      Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E4F1D510]);
      if (2 * *((_DWORD *)v8 + 4513) - 2 >= 1)
      {
        uint64_t v504 = 0;
        v505 = v8 + 14807;
        do
        {
          CFNumberRef v506 = CFNumberCreate(a3, kCFNumberSInt32Type, v505 - 8);
          CFNumberRef v507 = CFNumberCreate(a3, kCFNumberSInt32Type, v505);
          CFArrayAppendValue(Mutable, v506);
          CFArrayAppendValue(Mutable, v507);
          if (v506) {
            CFRelease(v506);
          }
          if (v507) {
            CFRelease(v507);
          }
          if (AVE_Log_CheckLevel(0x1Eu, 6))
          {
            int v508 = AVE_Log_CheckConsole(0x1Eu);
            __uint64_t v509 = AVE_GetCurrTime();
            v510 = AVE_Log_GetLevelStr(6);
            int v511 = *(v505 - 8);
            int v512 = *v505;
            if (v508)
            {
              printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ChromaQPIndexOffsetMultiPPS return %d %d\n", v509, 30, v510, *(v505 - 8), v512);
              __uint64_t v509 = AVE_GetCurrTime();
              v510 = AVE_Log_GetLevelStr(6);
              int v511 = *(v505 - 8);
              int v512 = *v505;
            }
            syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ChromaQPIndexOffsetMultiPPS return %d %d", v509, 30, v510, v511, v512);
          }
          ++v504;
          ++v505;
        }
        while (v504 < 2 * *((_DWORD *)v8 + 4513) - 2);
      }
      goto LABEL_185;
    }
    if (CFEqual(a2, @"iChatUsageString"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v513 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v514 = AVE_GetCurrTime();
        v515 = AVE_Log_GetLevelStr(6);
        int v516 = *((_DWORD *)v8 + 4698);
        if (v513)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_iChatUsageString return %u\n", v514, 30, v515, v516);
          __uint64_t v517 = AVE_GetCurrTime();
          v994 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_iChatUsageString return %u", v517, 30, v994, *((_DWORD *)v8 + 4698));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_iChatUsageString return %u", v514, 30, v515, v516);
        }
      }
      switch(*((_DWORD *)v8 + 4698))
      {
        case 0:
          uint64_t v28 = 0;
          int v82 = @"FaceTime";
          goto LABEL_105;
        case 1:
          uint64_t v28 = 0;
          int v82 = @"CarPlay";
          goto LABEL_105;
        case 2:
          uint64_t v28 = 0;
          int v82 = @"AirPlay";
          goto LABEL_105;
        case 3:
          uint64_t v28 = 0;
          int v82 = @"SafeView";
          goto LABEL_105;
        case 4:
          uint64_t v28 = 0;
          int v82 = @"ScreenSharing";
          goto LABEL_105;
        case 5:
          uint64_t v28 = 0;
          int v82 = @"MediaAnalysis";
          goto LABEL_105;
        case 7:
          uint64_t v28 = 0;
          int v82 = @"SideCar";
          goto LABEL_105;
        default:
          goto LABEL_1375;
      }
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44B78]))
    {
      Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E4F1D510]);
      v518 = (int *)v8 + 5093;
      CFNumberRef v519 = CFNumberCreate(a3, kCFNumberSInt32Type, (char *)v8 + 20372);
      CFArrayAppendValue(Mutable, v519);
      if (v519) {
        CFRelease(v519);
      }
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v520 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v521 = AVE_GetCurrTime();
        v522 = AVE_Log_GetLevelStr(6);
        int v523 = *v518;
        if (v520)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserParameterSetsIds return %d\n", v521, 30, v522, v523);
          __uint64_t v524 = AVE_GetCurrTime();
          v995 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserParameterSetsIds return %d", v524, 30, v995, *v518);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserParameterSetsIds return %d", v521, 30, v522, v523);
        }
      }
      CFNumberRef v869 = CFNumberCreate(a3, kCFNumberSInt32Type, v8 + 12886);
      CFArrayAppendValue(Mutable, v869);
      if (v869) {
        CFRelease(v869);
      }
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v870 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v871 = AVE_GetCurrTime();
        v872 = AVE_Log_GetLevelStr(6);
        int v873 = *v93;
        if (v870)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserParameterSetsIds return %d\n", v871, 30, v872, v873);
          __uint64_t v874 = AVE_GetCurrTime();
          v1038 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserParameterSetsIds return %d", v874, 30, v1038, *v93);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserParameterSetsIds return %d", v871, 30, v872, v873);
        }
      }
      if (*((int *)v8 + 4513) >= 1)
      {
        uint64_t v939 = 0;
        v940 = v8 + 2252;
        do
        {
          CFNumberRef v941 = CFNumberCreate(a3, kCFNumberSInt32Type, v940);
          CFArrayAppendValue(Mutable, v941);
          if (v941) {
            CFRelease(v941);
          }
          if (AVE_Log_CheckLevel(0x1Eu, 6))
          {
            int v942 = AVE_Log_CheckConsole(0x1Eu);
            __uint64_t v943 = AVE_GetCurrTime();
            v944 = AVE_Log_GetLevelStr(6);
            int v945 = *v940;
            if (v942)
            {
              printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserParameterSetsIds return %d\n", v943, 30, v944, v945);
              __uint64_t v943 = AVE_GetCurrTime();
              v944 = AVE_Log_GetLevelStr(6);
              int v945 = *v940;
            }
            syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserParameterSetsIds return %d", v943, 30, v944, v945);
          }
          ++v939;
          ++v940;
        }
        while (v939 < *((int *)v8 + 4513));
      }
      goto LABEL_185;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44AF0]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v525 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v526 = AVE_GetCurrTime();
        v527 = AVE_Log_GetLevelStr(6);
        int v528 = *v93;
        if (v525)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RequiredHEVCSequenceParameterSetID return %d\n", v526, 30, v527, v528);
          __uint64_t v529 = AVE_GetCurrTime();
          v996 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RequiredHEVCSequenceParameterSetID return %d", v529, 30, v996, *v93);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RequiredHEVCSequenceParameterSetID return %d", v526, 30, v527, v528);
        }
      }
      long long v33 = (void **)(v8 + 12886);
      goto LABEL_29;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44AE8]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v530 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v531 = AVE_GetCurrTime();
        v532 = AVE_Log_GetLevelStr(6);
        int v533 = *v1050;
        if (v530)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RequiredHEVCPictureParameterSetID return %d\n", v531, 30, v532, v533);
          __uint64_t v534 = AVE_GetCurrTime();
          v997 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RequiredHEVCPictureParameterSetID return %d", v534, 30, v997, *v1050);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RequiredHEVCPictureParameterSetID return %d", v531, 30, v532, v533);
        }
      }
      long long v33 = (void **)((char *)v8 + 118380);
      goto LABEL_29;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44AE0]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v535 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v536 = AVE_GetCurrTime();
        v537 = AVE_Log_GetLevelStr(6);
        int v538 = *((unsigned __int8 *)v8 + 18859);
        if (v535)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RequireDeterministicDependencyAndReordering return %u\n", v536, 30, v537, v538);
          __uint64_t v539 = AVE_GetCurrTime();
          v998 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RequireDeterministicDependencyAndReordering return %u", v539, 30, v998, *((unsigned __int8 *)v8 + 18859));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RequireDeterministicDependencyAndReordering return %u", v536, 30, v537, v538);
        }
      }
      if (*((unsigned char *)v8 + 18859)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, @"EnableSliceEncodingMode"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v540 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v541 = AVE_GetCurrTime();
        v542 = AVE_Log_GetLevelStr(6);
        int v543 = *((unsigned __int8 *)v8 + 103260);
        if (v540)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableSliceEncodingMode return %u\n", v541, 30, v542, v543);
          __uint64_t v544 = AVE_GetCurrTime();
          v999 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableSliceEncodingMode return %u", v544, 30, v999, *((unsigned __int8 *)v8 + 103260));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableSliceEncodingMode return %u", v541, 30, v542, v543);
        }
      }
      if (*((unsigned char *)v8 + 18056)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, @"EnableMultiSliceStats"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v545 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v546 = AVE_GetCurrTime();
        v547 = AVE_Log_GetLevelStr(6);
        int v548 = *((unsigned __int8 *)v8 + 18320);
        if (v545)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMultiSliceStats return %u\n", v546, 30, v547, v548);
          __uint64_t v549 = AVE_GetCurrTime();
          v1000 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMultiSliceStats return %u", v549, 30, v1000, *((unsigned __int8 *)v8 + 18320));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMultiSliceStats return %u", v546, 30, v547, v548);
        }
      }
      if (*((unsigned char *)v8 + 18320)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, @"UseReferenceCompressedBuffers"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v550 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v551 = AVE_GetCurrTime();
        v552 = AVE_Log_GetLevelStr(6);
        int v553 = *((unsigned __int8 *)v8 + 18013);
        if (v550)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseReferenceCompressedBuffers return %u\n", v551, 30, v552, v553);
          __uint64_t v554 = AVE_GetCurrTime();
          v1001 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseReferenceCompressedBuffers return %u", v554, 30, v1001, *((unsigned __int8 *)v8 + 18013));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseReferenceCompressedBuffers return %u", v551, 30, v552, v553);
        }
      }
      if (*((unsigned char *)v8 + 18013)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, @"ForceRefUncompressed"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v555 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v556 = AVE_GetCurrTime();
        v557 = AVE_Log_GetLevelStr(6);
        int v558 = *((unsigned __int8 *)v8 + 18014);
        if (v555)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ForceRefUncompressed return %u\n", v556, 30, v557, v558);
          __uint64_t v559 = AVE_GetCurrTime();
          v1002 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ForceRefUncompressed return %u", v559, 30, v1002, *((unsigned __int8 *)v8 + 18014));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ForceRefUncompressed return %u", v556, 30, v557, v558);
        }
      }
      if (*((unsigned char *)v8 + 18014)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, @"SetDbgInternalParams"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v560 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v561 = AVE_GetCurrTime();
        v562 = AVE_Log_GetLevelStr(6);
        int v563 = *v72;
        if (v560)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SetDbgInternalParams return %d\n", v561, 30, v562, v563);
          __uint64_t v564 = AVE_GetCurrTime();
          v1003 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SetDbgInternalParams return %d", v564, 30, v1003, *v72);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SetDbgInternalParams return %d", v561, 30, v562, v563);
        }
      }
      uint64_t v135 = 18324;
      goto LABEL_171;
    }
    if (CFEqual(a2, @"TemporalIDNestingFlag"))
    {
      int v565 = *((unsigned __int8 *)v8 + 20388);
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v566 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v567 = AVE_GetCurrTime();
        v568 = AVE_Log_GetLevelStr(6);
        if (v565) {
          v569 = "TRUE";
        }
        else {
          v569 = "FALSE";
        }
        if (v566)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_TemporalIDNestingFlag return %s\n", v567, 30, v568, v569);
          __uint64_t v570 = AVE_GetCurrTime();
          v1004 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_TemporalIDNestingFlag return %s", v570, 30, v1004, v569);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_TemporalIDNestingFlag return %s", v567, 30, v568, v569);
        }
      }
      uint64_t v28 = 0;
      uint64_t v29 = (__CFString **)MEMORY[0x1E4F1CFC8];
      if (v565) {
        uint64_t v29 = (__CFString **)MEMORY[0x1E4F1CFD0];
      }
      goto LABEL_104;
    }
    if (CFEqual(a2, @"NumberOfTemporalLayers"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v571 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v572 = AVE_GetCurrTime();
        v573 = AVE_Log_GetLevelStr(6);
        int v574 = *((unsigned __int16 *)v8 + 9164);
        if (v571)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumberOfTemporalLayers return %u\n", v572, 30, v573, v574);
          __uint64_t v575 = AVE_GetCurrTime();
          v1005 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumberOfTemporalLayers return %u", v575, 30, v1005, *((unsigned __int16 *)v8 + 9164));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumberOfTemporalLayers return %u", v572, 30, v573, v574);
        }
      }
      int v875 = *((unsigned __int16 *)v8 + 9164);
      LODWORD(keys[0]) = v875;
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v876 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v877 = AVE_GetCurrTime();
        v878 = AVE_Log_GetLevelStr(6);
        if (v876)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumberOfTemporalLayers return %d\n", v877, 30, v878, v875);
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumberOfTemporalLayers return %d");
      }
      goto LABEL_50;
    }
    if (CFEqual(a2, @"NumBTemporalLayers"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v576 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v577 = AVE_GetCurrTime();
        v578 = AVE_Log_GetLevelStr(6);
        int v579 = *((unsigned __int16 *)v8 + 9165);
        if (v576)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumBTemporalLayers return %u\n", v577, 30, v578, v579);
          __uint64_t v580 = AVE_GetCurrTime();
          v1006 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumBTemporalLayers return %u", v580, 30, v1006, *((unsigned __int16 *)v8 + 9165));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumBTemporalLayers return %u", v577, 30, v578, v579);
        }
      }
      int v879 = *((unsigned __int16 *)v8 + 9165);
      LODWORD(keys[0]) = v879;
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v880 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v881 = AVE_GetCurrTime();
        v882 = AVE_Log_GetLevelStr(6);
        if (v880)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumBTemporalLayers return %d\n", v881, 30, v882, v879);
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumBTemporalLayers return %d");
      }
      goto LABEL_50;
    }
    if (CFEqual(a2, @"BaseLayerFrameRate"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v581 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v582 = AVE_GetCurrTime();
        v583 = AVE_Log_GetLevelStr(6);
        int v584 = *((unsigned __int16 *)v8 + 9165);
        if (v581)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_BaseLayerFrameRate return %u\n", v582, 30, v583, v584);
          __uint64_t v585 = AVE_GetCurrTime();
          v1007 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_BaseLayerFrameRate return %u", v585, 30, v1007, *((unsigned __int16 *)v8 + 9165));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_BaseLayerFrameRate return %u", v582, 30, v583, v584);
        }
      }
      int v883 = *((_DWORD *)v8 + 56);
      LODWORD(keys[0]) = v883;
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v884 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v885 = AVE_GetCurrTime();
        v886 = AVE_Log_GetLevelStr(6);
        if (v884)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_BaseLayerFrameRate return %d\n", v885, 30, v886, v883);
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_BaseLayerFrameRate return %d");
      }
      goto LABEL_50;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44910]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v586 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v587 = AVE_GetCurrTime();
        v588 = AVE_Log_GetLevelStr(6);
        int v589 = *((_DWORD *)v8 + 4866);
        if (v586)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_FrameRateTargetForAverageBitrate return %d\n", v587, 30, v588, v589);
          __uint64_t v590 = AVE_GetCurrTime();
          v1008 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_FrameRateTargetForAverageBitrate return %d", v590, 30, v1008, *((_DWORD *)v8 + 4866));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_FrameRateTargetForAverageBitrate return %d", v587, 30, v588, v589);
        }
      }
      LODWORD(keys[0]) = 0;
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v887 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v888 = AVE_GetCurrTime();
        v889 = AVE_Log_GetLevelStr(6);
        int v890 = *((_DWORD *)v8 + 4866);
        if (v887)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_FrameRateTargetForAverageBitrate return %u\n", v888, 30, v889, v890);
          __uint64_t v891 = AVE_GetCurrTime();
          v1039 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_FrameRateTargetForAverageBitrate return %u", v891, 30, v1039, *((_DWORD *)v8 + 4866));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_FrameRateTargetForAverageBitrate return %u", v888, 30, v889, v890);
        }
      }
      int v131 = *((_DWORD *)v8 + 4866);
      if (!v131) {
        goto LABEL_50;
      }
      goto LABEL_158;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44AB8]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v591 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v592 = AVE_GetCurrTime();
        v593 = AVE_Log_GetLevelStr(6);
        int v594 = *((_DWORD *)v8 + 4702);
        if (v591)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_QuantizationScalingMatrixPreset return %d\n", v592, 30, v593, v594);
          __uint64_t v595 = AVE_GetCurrTime();
          v1009 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_QuantizationScalingMatrixPreset return %d", v595, 30, v1009, *((_DWORD *)v8 + 4702));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_QuantizationScalingMatrixPreset return %d", v592, 30, v593, v594);
        }
      }
      int v131 = *((_DWORD *)v8 + 4702);
      if (v131 == 1) {
        goto LABEL_158;
      }
      if (!v131)
      {
        int v131 = 2;
        goto LABEL_158;
      }
      goto LABEL_1302;
    }
    if (CFEqual(a2, @"NumMergeCandidates"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v596 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v597 = AVE_GetCurrTime();
        v598 = AVE_Log_GetLevelStr(6);
        int v599 = *v1051;
        if (v596)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumMergeCandidates return %d\n", v597, 30, v598, v599);
          __uint64_t v600 = AVE_GetCurrTime();
          v1010 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumMergeCandidates return %d", v600, 30, v1010, *v1051);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumMergeCandidates return %d", v597, 30, v598, v599);
        }
      }
      int v131 = *v1051 + 5;
      goto LABEL_158;
    }
    if (CFEqual(a2, @"EnableMultipleScalingMatrices"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v601 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v602 = AVE_GetCurrTime();
        v603 = AVE_Log_GetLevelStr(6);
        int v604 = *((unsigned __int8 *)v8 + 18851);
        if (v601)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMultipleScalingMatrices return %u\n", v602, 30, v603, v604);
          __uint64_t v605 = AVE_GetCurrTime();
          v1011 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMultipleScalingMatrices return %u", v605, 30, v1011, *((unsigned __int8 *)v8 + 18851));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMultipleScalingMatrices return %u", v602, 30, v603, v604);
        }
      }
      if (*((unsigned char *)v8 + 18851)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44BC0]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v606 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v607 = AVE_GetCurrTime();
        v608 = AVE_Log_GetLevelStr(6);
        int v609 = *((_DWORD *)v8 + 460);
        if (v606)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionProperty_SoftMinQuantizationParameter return %d\n", v607, 30, v608, v609);
          __uint64_t v610 = AVE_GetCurrTime();
          v1012 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionProperty_SoftMinQuantizationParameter return %d", v610, 30, v1012, *((_DWORD *)v8 + 460));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionProperty_SoftMinQuantizationParameter return %d", v607, 30, v608, v609);
        }
      }
      long long v33 = (void **)(v8 + 230);
      goto LABEL_29;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44BB8]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v611 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v612 = AVE_GetCurrTime();
        v613 = AVE_Log_GetLevelStr(6);
        int v614 = *((_DWORD *)v8 + 461);
        if (v611)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionProperty_SoftMaxQuantizationParameter return %d\n", v612, 30, v613, v614);
          __uint64_t v615 = AVE_GetCurrTime();
          v1013 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionProperty_SoftMaxQuantizationParameter return %d", v615, 30, v1013, *((_DWORD *)v8 + 461));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionProperty_SoftMaxQuantizationParameter return %d", v612, 30, v613, v614);
        }
      }
      long long v33 = (void **)((char *)v8 + 1844);
      goto LABEL_29;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F449B8]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v616 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v617 = AVE_GetCurrTime();
        v618 = AVE_Log_GetLevelStr(6);
        int v619 = *((_DWORD *)v8 + 463);
        if (v616)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxAllowedFrameQP return %d\n", v617, 30, v618, v619);
          __uint64_t v620 = AVE_GetCurrTime();
          v1014 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxAllowedFrameQP return %d", v620, 30, v1014, *((_DWORD *)v8 + 463));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxAllowedFrameQP return %d", v617, 30, v618, v619);
        }
      }
      long long v33 = (void **)((char *)v8 + 1852);
      goto LABEL_29;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F449E0]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v621 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v622 = AVE_GetCurrTime();
        v623 = AVE_Log_GetLevelStr(6);
        int v624 = *((_DWORD *)v8 + 462);
        if (v621)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MinAllowedFrameQP return %d\n", v622, 30, v623, v624);
          __uint64_t v625 = AVE_GetCurrTime();
          v1015 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MinAllowedFrameQP return %d", v625, 30, v1015, *((_DWORD *)v8 + 462));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MinAllowedFrameQP return %d", v622, 30, v623, v624);
        }
      }
      long long v33 = (void **)(v8 + 231);
      goto LABEL_29;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44930]))
    {
      Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E4F1D510]);
      LODWORD(keys[0]) = 20;
      LODWORD(values[0]) = 21;
      CFNumberRef v626 = CFNumberCreate(a3, kCFNumberSInt32Type, keys);
      CFNumberRef v627 = CFNumberCreate(a3, kCFNumberSInt32Type, values);
      CFArrayAppendValue(Mutable, v626);
      CFArrayAppendValue(Mutable, v627);
      if (v626) {
        CFRelease(v626);
      }
      if (v627) {
        CFRelease(v627);
      }
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v628 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v629 = AVE_GetCurrTime();
        v630 = AVE_Log_GetLevelStr(6);
        if (v628)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_HEVCSyncSampleNALUnitTypes return %d %d\n", v629, 30, v630, LODWORD(keys[0]), LODWORD(values[0]));
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_HEVCSyncSampleNALUnitTypes return %d %d");
      }
      goto LABEL_185;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44938]))
    {
      Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E4F1D510]);
      unsigned int v631 = -1;
      do
      {
        ++v631;
        memcpy(__dst, v8 + 12818, sizeof(__dst));
        TemporalLevelInfoDictionary = CreateTemporalLevelInfoDictionary((uint64_t)__dst, v631);
        CFArrayAppendValue(Mutable, TemporalLevelInfoDictionary);
        if (TemporalLevelInfoDictionary) {
          CFRelease(TemporalLevelInfoDictionary);
        }
      }
      while (v631 < *((unsigned __int16 *)v8 + 9164));
      goto LABEL_185;
    }
    if (CFEqual(a2, @"ForceSliceRPS"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v633 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v634 = AVE_GetCurrTime();
        v635 = AVE_Log_GetLevelStr(6);
        int v636 = *((unsigned __int8 *)v8 + 18332);
        if (v633)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ForceSliceRPS return %u\n", v634, 30, v635, v636);
          __uint64_t v637 = AVE_GetCurrTime();
          v1016 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ForceSliceRPS return %u", v637, 30, v1016, *((unsigned __int8 *)v8 + 18332));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ForceSliceRPS return %u", v634, 30, v635, v636);
        }
      }
      if (*((unsigned char *)v8 + 18332)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, @"IntraRefreshFrames"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v638 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v639 = AVE_GetCurrTime();
        v640 = AVE_Log_GetLevelStr(6);
        int v641 = *((_DWORD *)v8 + 4596);
        if (v638)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_IntraRefreshFrames return %u\n", v639, 30, v640, v641);
          __uint64_t v642 = AVE_GetCurrTime();
          v1017 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_IntraRefreshFrames return %u", v642, 30, v1017, *((_DWORD *)v8 + 4596));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_IntraRefreshFrames return %u", v639, 30, v640, v641);
        }
      }
      uint64_t v135 = 18384;
      goto LABEL_171;
    }
    if (CFEqual(a2, @"UseHWTileOffsets"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v643 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v644 = AVE_GetCurrTime();
        v645 = AVE_Log_GetLevelStr(6);
        if (*((unsigned char *)v8 + 18860)) {
          v646 = "true";
        }
        else {
          v646 = "false";
        }
        if (v643)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseHWTileOffsets return %s\n", v644, 30, v645, v646);
          __uint64_t v644 = AVE_GetCurrTime();
          v645 = AVE_Log_GetLevelStr(6);
          if (*((unsigned char *)v8 + 18860)) {
            v646 = "true";
          }
          else {
            v646 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseHWTileOffsets return %s", v644, 30, v645, v646);
      }
      if (*((unsigned char *)v8 + 18860)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F449C0]))
    {
      int v647 = *((_DWORD *)v8 + 486);
      if ((*((_DWORD *)v8 + 469) & 0xE0) != 0) {
        int v648 = 3;
      }
      else {
        int v648 = 0;
      }
      int v649 = v648 + v647;
      LODWORD(keys[0]) = v648 + v647;
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v650 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v651 = AVE_GetCurrTime();
        v652 = AVE_Log_GetLevelStr(6);
        if (v650)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxFrameDelayCount return %d\n", v651, 30, v652, v649);
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxFrameDelayCount return %d");
      }
      goto LABEL_50;
    }
    if (CFEqual(a2, @"MaximizePowerEfficiency"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v653 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v654 = AVE_GetCurrTime();
        v655 = AVE_Log_GetLevelStr(6);
        if (*((unsigned char *)v8 + 18861)) {
          v656 = "true";
        }
        else {
          v656 = "false";
        }
        if (v653)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MaximizePowerEfficiency return %s\n", v654, 30, v655, v656);
          __uint64_t v654 = AVE_GetCurrTime();
          v655 = AVE_Log_GetLevelStr(6);
          if (*((unsigned char *)v8 + 18861)) {
            v656 = "true";
          }
          else {
            v656 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MaximizePowerEfficiency return %s", v654, 30, v655, v656);
      }
      if (*((unsigned char *)v8 + 18861)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, @"RelaxAverageBitRateTarget"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v657 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v658 = AVE_GetCurrTime();
        v659 = AVE_Log_GetLevelStr(6);
        if (*((unsigned char *)v8 + 18858)) {
          v660 = "true";
        }
        else {
          v660 = "false";
        }
        if (v657)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RelaxAverageBitRateTarget return %s\n", v658, 30, v659, v660);
          __uint64_t v658 = AVE_GetCurrTime();
          v659 = AVE_Log_GetLevelStr(6);
          if (*((unsigned char *)v8 + 18858)) {
            v660 = "true";
          }
          else {
            v660 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RelaxAverageBitRateTarget return %s", v658, 30, v659, v660);
      }
      if (*((unsigned char *)v8 + 18858)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F449F8]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v661 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v662 = AVE_GetCurrTime();
        v663 = AVE_Log_GetLevelStr(6);
        int v664 = *((unsigned __int8 *)v8 + 18935);
        if (v661)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MinimizeMemoryUsage return %u\n", v662, 30, v663, v664);
          __uint64_t v665 = AVE_GetCurrTime();
          v1018 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MinimizeMemoryUsage return %u", v665, 30, v1018, *((unsigned __int8 *)v8 + 18935));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MinimizeMemoryUsage return %u", v662, 30, v663, v664);
        }
      }
      if (*((unsigned char *)v8 + 18935)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F449B0]))
    {
      if (*((unsigned char *)v8 + 18695))
      {
        v666 = (const UInt8 *)v8 + 18697;
        CFAllocatorRef v667 = a3;
        CFIndex v668 = 24;
LABEL_883:
        StringForIntegerCodePoint = CFDataCreate(v667, v666, v668);
        goto LABEL_32;
      }
      goto LABEL_1375;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44990]))
    {
      if (*((unsigned char *)v8 + 18944))
      {
        v666 = (const UInt8 *)v8 + 18945;
        CFIndex v668 = *((unsigned int *)v8 + 4865);
        CFAllocatorRef v667 = a3;
        goto LABEL_883;
      }
LABEL_1375:
      uint64_t v28 = 0;
      *a4 = 0;
      goto LABEL_106;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44880]))
    {
      if (*((unsigned char *)v8 + 18696))
      {
        v666 = (const UInt8 *)v8 + 18721;
        CFAllocatorRef v667 = a3;
        CFIndex v668 = 4;
        goto LABEL_883;
      }
      goto LABEL_1375;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44800]))
    {
      if (*((unsigned char *)v8 + 18725))
      {
        v666 = (const UInt8 *)v8 + 18726;
        CFAllocatorRef v667 = a3;
        CFIndex v668 = 17;
        goto LABEL_883;
      }
      goto LABEL_1375;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F448D0]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v669 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v670 = AVE_GetCurrTime();
        v671 = AVE_Log_GetLevelStr(6);
        if (*((unsigned char *)v8 + 18908)) {
          v672 = "true";
        }
        else {
          v672 = "false";
        }
        if (v669)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_EncodesAlpha return %s\n", v670, 30, v671, v672);
          __uint64_t v670 = AVE_GetCurrTime();
          v671 = AVE_Log_GetLevelStr(6);
          if (*((unsigned char *)v8 + 18908)) {
            v672 = "true";
          }
          else {
            v672 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_EncodesAlpha return %s", v670, 30, v671, v672);
      }
      if (*((unsigned char *)v8 + 18908)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, @"RequiredHEVCVideoParameterSetRepFormatBitDepths"))
    {
      CFMutableArrayRef v673 = CFArrayCreateMutable(0, 2, MEMORY[0x1E4F1D510]);
      if (v673)
      {
        Mutable = v673;
        uint64_t v674 = 0;
        char v675 = 1;
        while (1)
        {
          char v676 = v675;
          if (AVE_Log_CheckLevel(0x1Eu, 6))
          {
            int v677 = AVE_Log_CheckConsole(0x1Eu);
            __uint64_t v678 = AVE_GetCurrTime();
            v679 = AVE_Log_GetLevelStr(6);
            v680 = (_DWORD *)v8 + v674 + 4728;
            if (v677)
            {
              printf("%lld %d AVE %s: asked for RequiredHEVCVideoParameterSetRepFormatBitDepths, return [%d] = %d\n", v678, 30, v679, v674, *v680);
              __uint64_t v678 = AVE_GetCurrTime();
              v679 = AVE_Log_GetLevelStr(6);
            }
            syslog(3, "%lld %d AVE %s: asked for RequiredHEVCVideoParameterSetRepFormatBitDepths, return [%d] = %d", v678, 30, v679, v674, *v680);
          }
          CFNumberRef v681 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)v8 + 4 * v674 + 18912);
          if (!v681) {
            break;
          }
          CFNumberRef v682 = v681;
          CFArrayAppendValue(Mutable, v681);
          CFRelease(v682);
          char v675 = 0;
          uint64_t v674 = 1;
          if ((v676 & 1) == 0) {
            goto LABEL_185;
          }
        }
        if (!AVE_Log_CheckLevel(0x1Eu, 4)) {
          goto LABEL_166;
        }
        int v898 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v899 = AVE_GetCurrTime();
        v900 = AVE_Log_GetLevelStr(4);
        if (!v898)
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | %p: asked for RequiredHEVCVideoParameterSetRepFormatBitDepths[%d]: pNum is NULL", v899, 30);
          goto LABEL_166;
        }
        printf("%lld %d AVE %s: %s:%d %s | %p: asked for RequiredHEVCVideoParameterSetRepFormatBitDepths[%d]: pNum is NULL\n", v899, 30, v900, "AVE_HEVCCopyProperty", 15015, "pNum != __null", *v8, v674);
        __uint64_t v895 = AVE_GetCurrTime();
        v901 = AVE_Log_GetLevelStr(4);
        v1046 = *v8;
        uint64_t v1047 = v674;
        uint64_t v1042 = 15015;
        v1044 = "pNum != __null";
        v1040 = v901;
        v897 = "%lld %d AVE %s: %s:%d %s | %p: asked for RequiredHEVCVideoParameterSetRepFormatBitDepths[%d]: pNum is NULL";
      }
      else
      {
        if (!AVE_Log_CheckLevel(0x1Eu, 4)) {
          goto LABEL_166;
        }
        int v892 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v893 = AVE_GetCurrTime();
        v894 = AVE_Log_GetLevelStr(4);
        if (!v892)
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | %p: asked for RequiredHEVCVideoParameterSetRepFormatBitDepths: pArray is NULL", v893);
          goto LABEL_166;
        }
        printf("%lld %d AVE %s: %s:%d %s | %p: asked for RequiredHEVCVideoParameterSetRepFormatBitDepths: pArray is NULL\n", v893, 30, v894, "AVE_HEVCCopyProperty", 15003, "pArray != __null", *v8);
        __uint64_t v895 = AVE_GetCurrTime();
        v896 = AVE_Log_GetLevelStr(4);
        v1044 = "pArray != __null";
        v1046 = *v8;
        uint64_t v1042 = 15003;
        v1040 = v896;
        v897 = "%lld %d AVE %s: %s:%d %s | %p: asked for RequiredHEVCVideoParameterSetRepFormatBitDepths: pArray is NULL";
      }
LABEL_1350:
      syslog(3, v897, v895, 30, v1040, "AVE_HEVCCopyProperty", v1042, v1044, v1046, v1047);
      goto LABEL_166;
    }
    if (CFEqual(a2, @"RequiredHEVCVideoParameterSetRepFormatChromaFormatIdcs"))
    {
      CFMutableArrayRef v683 = CFArrayCreateMutable(0, 2, MEMORY[0x1E4F1D510]);
      if (v683)
      {
        Mutable = v683;
        uint64_t v684 = 0;
        char v685 = 1;
        while (1)
        {
          char v686 = v685;
          if (AVE_Log_CheckLevel(0x1Eu, 6))
          {
            int v687 = AVE_Log_CheckConsole(0x1Eu);
            __uint64_t v688 = AVE_GetCurrTime();
            v689 = AVE_Log_GetLevelStr(6);
            v690 = (_DWORD *)v8 + v684 + 4730;
            if (v687)
            {
              printf("%lld %d AVE %s: asked for RequiredHEVCVideoParameterSetRepFormatChromaFormatIdcs, return [%d] = %d\n", v688, 30, v689, v684, *v690);
              __uint64_t v688 = AVE_GetCurrTime();
              v689 = AVE_Log_GetLevelStr(6);
            }
            syslog(3, "%lld %d AVE %s: asked for RequiredHEVCVideoParameterSetRepFormatChromaFormatIdcs, return [%d] = %d", v688, 30, v689, v684, *v690);
          }
          CFNumberRef v691 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)v8 + 4 * v684 + 18920);
          if (!v691) {
            break;
          }
          CFNumberRef v692 = v691;
          CFArrayAppendValue(Mutable, v691);
          CFRelease(v692);
          char v685 = 0;
          uint64_t v684 = 1;
          if ((v686 & 1) == 0) {
            goto LABEL_185;
          }
        }
        if (!AVE_Log_CheckLevel(0x1Eu, 4)) {
          goto LABEL_166;
        }
        int v906 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v907 = AVE_GetCurrTime();
        v908 = AVE_Log_GetLevelStr(4);
        if (!v906)
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | %p: asked for RequiredHEVCVideoParameterSetRepFormatChromaFormatIdcs[%d]: pNum is NULL", v907, 30);
          goto LABEL_166;
        }
        printf("%lld %d AVE %s: %s:%d %s | %p: asked for RequiredHEVCVideoParameterSetRepFormatChromaFormatIdcs[%d]: pNum is NULL\n", v907, 30, v908, "AVE_HEVCCopyProperty", 15045, "pNum != __null", *v8, v684);
        __uint64_t v895 = AVE_GetCurrTime();
        v909 = AVE_Log_GetLevelStr(4);
        v1046 = *v8;
        uint64_t v1047 = v684;
        uint64_t v1042 = 15045;
        v1044 = "pNum != __null";
        v1040 = v909;
        v897 = "%lld %d AVE %s: %s:%d %s | %p: asked for RequiredHEVCVideoParameterSetRepFormatChromaFormatIdcs[%d]: pNum is NULL";
      }
      else
      {
        if (!AVE_Log_CheckLevel(0x1Eu, 4)) {
          goto LABEL_166;
        }
        int v902 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v903 = AVE_GetCurrTime();
        v904 = AVE_Log_GetLevelStr(4);
        if (!v902)
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | %p: asked for RequiredHEVCVideoParameterSetRepFormatChromaFormatIdcs: pArray is NULL", v903);
          goto LABEL_166;
        }
        printf("%lld %d AVE %s: %s:%d %s | %p: asked for RequiredHEVCVideoParameterSetRepFormatChromaFormatIdcs: pArray is NULL\n", v903, 30, v904, "AVE_HEVCCopyProperty", 15033, "pArray != __null", *v8);
        __uint64_t v895 = AVE_GetCurrTime();
        v905 = AVE_Log_GetLevelStr(4);
        v1044 = "pArray != __null";
        v1046 = *v8;
        uint64_t v1042 = 15033;
        v1040 = v905;
        v897 = "%lld %d AVE %s: %s:%d %s | %p: asked for RequiredHEVCVideoParameterSetRepFormatChromaFormatIdcs: pArray is NULL";
      }
      goto LABEL_1350;
    }
    if (CFEqual(a2, @"RequiredHEVCSequenceParameterSetRepFormatIndex"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v693 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v694 = AVE_GetCurrTime();
        v695 = AVE_Log_GetLevelStr(6);
        int v696 = *((_DWORD *)v8 + 4732);
        if (v693)
        {
          printf("%lld %d AVE %s: asked for RequiredHEVCSequenceParameterSetRepFormatIndex, return %d\n", v694, 30, v695, v696);
          __uint64_t v697 = AVE_GetCurrTime();
          v1019 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: asked for RequiredHEVCSequenceParameterSetRepFormatIndex, return %d", v697, 30, v1019, *((_DWORD *)v8 + 4732));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: asked for RequiredHEVCSequenceParameterSetRepFormatIndex, return %d", v694, 30, v695, v696);
        }
      }
      uint64_t v135 = 18928;
      goto LABEL_171;
    }
    if (CFEqual(a2, @"EnableTimingInfoMetadata"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v698 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v699 = AVE_GetCurrTime();
        v700 = AVE_Log_GetLevelStr(6);
        if (*((unsigned char *)v8 + 18932)) {
          v701 = "true";
        }
        else {
          v701 = "false";
        }
        if (v698)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableTimingInfoMetadata return %s\n", v699, 30, v700, v701);
          __uint64_t v699 = AVE_GetCurrTime();
          v700 = AVE_Log_GetLevelStr(6);
          if (*((unsigned char *)v8 + 18932)) {
            v701 = "true";
          }
          else {
            v701 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableTimingInfoMetadata return %s", v699, 30, v700, v701);
      }
      if (*((unsigned char *)v8 + 18932)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, @"EnableContentColourVolumeSEI"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v702 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v703 = AVE_GetCurrTime();
        v704 = AVE_Log_GetLevelStr(6);
        if (*((unsigned char *)v8 + 18933)) {
          v705 = "true";
        }
        else {
          v705 = "false";
        }
        if (v702)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableContentColourVolumeSEI return %s\n", v703, 30, v704, v705);
          __uint64_t v703 = AVE_GetCurrTime();
          v704 = AVE_Log_GetLevelStr(6);
          if (*((unsigned char *)v8 + 18933)) {
            v705 = "true";
          }
          else {
            v705 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableContentColourVolumeSEI return %s", v703, 30, v704, v705);
      }
      if (*((unsigned char *)v8 + 18933)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, @"DroppablePFramesOnly"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v706 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v707 = AVE_GetCurrTime();
        v708 = AVE_Log_GetLevelStr(6);
        if (*((_DWORD *)v8 + 56) == 1) {
          v709 = "true";
        }
        else {
          v709 = "false";
        }
        if (v706)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_DroppablePFramesOnly return %s\n", v707, 30, v708, v709);
          __uint64_t v707 = AVE_GetCurrTime();
          v708 = AVE_Log_GetLevelStr(6);
          if (*((_DWORD *)v8 + 56) == 1) {
            v709 = "true";
          }
          else {
            v709 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_DroppablePFramesOnly return %s", v707, 30, v708, v709);
      }
      int v861 = *((_DWORD *)v8 + 56);
LABEL_1361:
      if (v861 == 1) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44AF8]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v710 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v711 = AVE_GetCurrTime();
        v712 = AVE_Log_GetLevelStr(6);
        int v713 = *v1053;
        if (v710)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RequiredHEVCVideoParameterSetAlphaLayerID return %d\n", v711, 30, v712, v713);
          __uint64_t v714 = AVE_GetCurrTime();
          v1020 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RequiredHEVCVideoParameterSetAlphaLayerID return %d", v714, 30, v1020, *v1053);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RequiredHEVCVideoParameterSetAlphaLayerID return %d", v711, 30, v712, v713);
        }
      }
      uint64_t v135 = 18900;
      goto LABEL_171;
    }
    if (CFEqual(a2, @"EnableHdrPqRC"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v715 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v716 = AVE_GetCurrTime();
        v717 = AVE_Log_GetLevelStr(6);
        if (*((unsigned char *)v8 + 18350)) {
          v718 = "true";
        }
        else {
          v718 = "false";
        }
        if (v715)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableHdrPqRC return %s\n", v716, 30, v717, v718);
          __uint64_t v716 = AVE_GetCurrTime();
          v717 = AVE_Log_GetLevelStr(6);
          if (*((unsigned char *)v8 + 18350)) {
            v718 = "true";
          }
          else {
            v718 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableHdrPqRC return %s", v716, 30, v717, v718);
      }
      if (*((unsigned char *)v8 + 18350)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, @"lrmeRCPassNum"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v719 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v720 = AVE_GetCurrTime();
        v721 = AVE_Log_GetLevelStr(6);
        int v722 = *((unsigned __int8 *)v8 + 18349);
        if (v719)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_lrmeRCPassNum return %d\n", v720, 30, v721, v722);
          __uint64_t v723 = AVE_GetCurrTime();
          v1021 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_lrmeRCPassNum return %d", v723, 30, v1021, *((unsigned __int8 *)v8 + 18349));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_lrmeRCPassNum return %d", v720, 30, v721, v722);
        }
      }
      uint64_t v135 = 18349;
      goto LABEL_171;
    }
    if (CFEqual(a2, @"EncodesDepth"))
    {
      if (*((unsigned char *)v8 + 18389)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, @"EncodesDisparity"))
    {
      if (*((unsigned char *)v8 + 18388)) {
        goto LABEL_20;
      }
      goto LABEL_103;
    }
    if (CFEqual(a2, @"AdaptBPocDelay"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v724 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v725 = AVE_GetCurrTime();
        v726 = AVE_Log_GetLevelStr(6);
        int v727 = *((_DWORD *)v8 + 46292);
        if (v724)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AdaptBPocDelay return %d\n", v725, 30, v726, v727);
          __uint64_t v728 = AVE_GetCurrTime();
          v1022 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AdaptBPocDelay return %d", v728, 30, v1022, *((_DWORD *)v8 + 46292));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AdaptBPocDelay return %d", v725, 30, v726, v727);
        }
      }
      long long v33 = (void **)(v8 + 23146);
      goto LABEL_29;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44A10]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v729 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v730 = AVE_GetCurrTime();
        v731 = AVE_Log_GetLevelStr(6);
        v732 = v8[22948];
        if (v729)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MultiPassStorage return %p\n", v730, 30, v731, v732);
          __uint64_t v733 = AVE_GetCurrTime();
          v1023 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MultiPassStorage return %p", v733, 30, v1023, v8[22948]);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MultiPassStorage return %p", v730, 30, v731, v732);
        }
      }
      v910 = v8[22948];
      if (v910)
      {
        StringForIntegerCodePoint = (void *)CFRetain(v910);
        goto LABEL_32;
      }
      goto LABEL_1375;
    }
    if (CFEqual(a2, @"SetMultiPassNum"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v734 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v735 = AVE_GetCurrTime();
        v736 = AVE_Log_GetLevelStr(6);
        int v737 = *((_DWORD *)v8 + 4600);
        if (v734)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SetMultiPassNum return %d\n", v735, 30, v736, v737);
          __uint64_t v738 = AVE_GetCurrTime();
          v1024 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SetMultiPassNum return %d", v738, 30, v1024, *((_DWORD *)v8 + 4600));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SetMultiPassNum return %d", v735, 30, v736, v737);
        }
      }
      uint64_t v135 = 18400;
      goto LABEL_171;
    }
    if (CFEqual(a2, @"MultiPassConstantQP"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v739 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v740 = AVE_GetCurrTime();
        v741 = AVE_Log_GetLevelStr(6);
        int v742 = *((_DWORD *)v8 + 4601);
        if (v739)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassConstantQP return %d\n", v740, 30, v741, v742);
          __uint64_t v743 = AVE_GetCurrTime();
          v1025 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassConstantQP return %d", v743, 30, v1025, *((_DWORD *)v8 + 4601));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassConstantQP return %d", v740, 30, v741, v742);
        }
      }
      uint64_t v135 = 18404;
      goto LABEL_171;
    }
    if (CFEqual(a2, @"MultiPassQPModLevel"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v744 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v745 = AVE_GetCurrTime();
        v746 = AVE_Log_GetLevelStr(6);
        int v747 = *((_DWORD *)v8 + 4602);
        if (v744)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassQPModLevel return %d\n", v745, 30, v746, v747);
          __uint64_t v748 = AVE_GetCurrTime();
          v1026 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassQPModLevel return %d", v748, 30, v1026, *((_DWORD *)v8 + 4602));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassQPModLevel return %d", v745, 30, v746, v747);
        }
      }
      uint64_t v135 = 18408;
      goto LABEL_171;
    }
    if (CFEqual(a2, @"MultiPassMaxQPModLevel"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v749 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v750 = AVE_GetCurrTime();
        v751 = AVE_Log_GetLevelStr(6);
        int v752 = *((_DWORD *)v8 + 4603);
        if (v749)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassMaxQPModLevel return %d\n", v750, 30, v751, v752);
          __uint64_t v753 = AVE_GetCurrTime();
          v1027 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassMaxQPModLevel return %d", v753, 30, v1027, *((_DWORD *)v8 + 4603));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassMaxQPModLevel return %d", v750, 30, v751, v752);
        }
      }
      uint64_t v135 = 18412;
      goto LABEL_171;
    }
    if (CFEqual(a2, @"MultiPassOptions"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v754 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v755 = AVE_GetCurrTime();
        v756 = AVE_Log_GetLevelStr(6);
        int v757 = *((_DWORD *)v8 + 4604);
        if (v754)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassOptions return %d\n", v755, 30, v756, v757);
          __uint64_t v758 = AVE_GetCurrTime();
          v1028 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassOptions return %d", v758, 30, v1028, *((_DWORD *)v8 + 4604));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassOptions return %d", v755, 30, v756, v757);
        }
      }
      uint64_t v135 = 18416;
      goto LABEL_171;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44B38]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v759 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v760 = AVE_GetCurrTime();
        v761 = AVE_Log_GetLevelStr(6);
        if ((*((unsigned char *)v8 + 1876) & 0xE0) != 0) {
          v762 = "true";
        }
        else {
          v762 = "false";
        }
        if (v759)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_TemporalNoiseReduction return %s\n", v760, 30, v761, v762);
          __uint64_t v760 = AVE_GetCurrTime();
          v761 = AVE_Log_GetLevelStr(6);
          if ((*((_DWORD *)v8 + 469) & 0xE0) != 0) {
            v762 = "true";
          }
          else {
            v762 = "false";
          }
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_TemporalNoiseReduction return %s", v760, 30, v761, v762);
      }
      uint64_t v28 = 0;
      v911 = (__CFString **)MEMORY[0x1E4F1CFD0];
      v912 = (__CFString **)MEMORY[0x1E4F1CFC8];
      BOOL v913 = (*((_DWORD *)v8 + 469) & 0xE0) == 0;
      goto LABEL_1442;
    }
    if (CFEqual(a2, @"LatencyMode"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v763 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v764 = AVE_GetCurrTime();
        v765 = AVE_Log_GetLevelStr(6);
        int v766 = *((_DWORD *)v8 + 4606);
        if (v763)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTTemporalFilterPropertyKey_LatencyMode return %d\n", v764, 30, v765, v766);
          __uint64_t v767 = AVE_GetCurrTime();
          v1029 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTTemporalFilterPropertyKey_LatencyMode return %d", v767, 30, v1029, *((_DWORD *)v8 + 4606));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTTemporalFilterPropertyKey_LatencyMode return %d", v764, 30, v765, v766);
        }
      }
      uint64_t v135 = 18424;
      goto LABEL_171;
    }
    if (CFEqual(a2, @"MCTFStrengthLevel"))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v768 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v769 = AVE_GetCurrTime();
        v770 = AVE_Log_GetLevelStr(6);
        int v771 = *((unsigned __int8 *)v8 + 18420);
        if (v768)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTEncodeFrameOptionKey_MCTFStrengthLevel return %u\n", v769, 30, v770, v771);
          __uint64_t v772 = AVE_GetCurrTime();
          v1030 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTEncodeFrameOptionKey_MCTFStrengthLevel return %u", v772, 30, v1030, *((unsigned __int8 *)v8 + 18420));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTEncodeFrameOptionKey_MCTFStrengthLevel return %u", v769, 30, v770, v771);
        }
      }
      uint64_t v135 = 18420;
      goto LABEL_171;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F449A0]))
    {
      Mutable = CFArrayCreateMutable(0, *((unsigned int *)v8 + 4609), MEMORY[0x1E4F1D510]);
      if (*((_DWORD *)v8 + 4609))
      {
        unint64_t v773 = 0;
        do
        {
          CFNumberRef v774 = CFNumberCreate(0, kCFNumberSInt8Type, (char *)v8 + v773 + 93859);
          CFArrayAppendValue(Mutable, v774);
          if (v774) {
            CFRelease(v774);
          }
          ++v773;
        }
        while (v773 < *((unsigned int *)v8 + 4609));
      }
      goto LABEL_185;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F449A8]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v775 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v776 = AVE_GetCurrTime();
        v777 = AVE_Log_GetLevelStr(6);
        if (v775)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MVHEVCViewIDs \n", v776, 30, v777);
          __uint64_t v778 = AVE_GetCurrTime();
          v1031 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MVHEVCViewIDs ", v778, 30, v1031);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MVHEVCViewIDs ", v776, 30, v777);
        }
      }
      Mutable = CFArrayCreateMutable(0, *((unsigned int *)v8 + 4609), MEMORY[0x1E4F1D510]);
      if (*((_DWORD *)v8 + 4609))
      {
        unint64_t v914 = 0;
        do
        {
          CFNumberRef v915 = CFNumberCreate(0, kCFNumberSInt8Type, (char *)v8 + v914 + 93924);
          CFArrayAppendValue(Mutable, v915);
          if (v915) {
            CFRelease(v915);
          }
          ++v914;
        }
        while (v914 < *((unsigned int *)v8 + 4609));
      }
      goto LABEL_185;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44998]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v779 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v780 = AVE_GetCurrTime();
        v781 = AVE_Log_GetLevelStr(6);
        if (v779)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MVHEVCLeftAndRightViewIDs \n", v780, 30, v781);
          __uint64_t v782 = AVE_GetCurrTime();
          v1032 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MVHEVCLeftAndRightViewIDs ", v782, 30, v1032);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MVHEVCLeftAndRightViewIDs ", v780, 30, v781);
        }
      }
      Mutable = CFArrayCreateMutable(0, *((unsigned int *)v8 + 4609), MEMORY[0x1E4F1D510]);
      uint64_t v916 = 0;
      char v917 = 1;
      do
      {
        char v918 = v917;
        CFNumberRef v919 = CFNumberCreate(0, kCFNumberSInt8Type, (char *)v8 + v916 + 20208);
        CFArrayAppendValue(Mutable, v919);
        if (v919) {
          CFRelease(v919);
        }
        char v917 = 0;
        uint64_t v916 = 1;
      }
      while ((v918 & 1) != 0);
      goto LABEL_185;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44B08]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v783 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v784 = AVE_GetCurrTime();
        v785 = AVE_Log_GetLevelStr(6);
        v786 = *v8;
        if (v783)
        {
          printf("%lld %d AVE %s: %p: FIG: asked for kVTCompressionPropertyKey_RequiredMVHEVCSequenceParameterSetIDs\n", v784, 30, v785, v786);
          __uint64_t v787 = AVE_GetCurrTime();
          v1033 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: %p: FIG: asked for kVTCompressionPropertyKey_RequiredMVHEVCSequenceParameterSetIDs", v787, 30, v1033, *v8);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %p: FIG: asked for kVTCompressionPropertyKey_RequiredMVHEVCSequenceParameterSetIDs", v784, 30, v785, v786);
        }
      }
      Mutable = CFArrayCreateMutable(0, *((unsigned int *)v8 + 4609), MEMORY[0x1E4F1D510]);
      unsigned int v920 = *((unsigned __int8 *)v8 + 18908);
      unsigned int v921 = *((_DWORD *)v8 + 4609);
      if (*((unsigned char *)v8 + 18908)) {
        v921 += 2;
      }
      if (v921 > 2 * v920)
      {
        unsigned int v922 = v920;
        v923 = &v8[3962 * v922 / 8 + 12886];
        unsigned int v924 = v921 - v922 * 2;
        do
        {
          CFNumberRef v925 = CFNumberCreate(0, kCFNumberSInt8Type, v923);
          CFArrayAppendValue(Mutable, v925);
          if (v925) {
            CFRelease(v925);
          }
          v923 = (const void **)((char *)v923 + 7924);
          --v924;
        }
        while (v924);
      }
      goto LABEL_185;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44B00]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v788 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v789 = AVE_GetCurrTime();
        v790 = AVE_Log_GetLevelStr(6);
        v791 = *v8;
        if (v788)
        {
          printf("%lld %d AVE %s: %p: FIG: asked for kVTCompressionPropertyKey_RequiredMVHEVCPictureParameterSetIDs\n", v789, 30, v790, v791);
          __uint64_t v792 = AVE_GetCurrTime();
          v1034 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: %p: FIG: asked for kVTCompressionPropertyKey_RequiredMVHEVCPictureParameterSetIDs", v792, 30, v1034, *v8);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %p: FIG: asked for kVTCompressionPropertyKey_RequiredMVHEVCPictureParameterSetIDs", v789, 30, v790, v791);
        }
      }
      Mutable = CFArrayCreateMutable(0, *((unsigned int *)v8 + 4609), MEMORY[0x1E4F1D510]);
      unsigned int v926 = *((unsigned __int8 *)v8 + 18908);
      unsigned int v927 = *((_DWORD *)v8 + 4609);
      if (*((unsigned char *)v8 + 18908)) {
        v927 += 2;
      }
      if (v927 > 2 * v926)
      {
        unsigned int v928 = v926;
        v929 = (char *)&v8[4818 * v928 / 8 + 14797] + 4;
        unsigned int v930 = v927 - v928 * 2;
        do
        {
          CFNumberRef v931 = CFNumberCreate(0, kCFNumberSInt8Type, v929);
          CFArrayAppendValue(Mutable, v931);
          if (v931) {
            CFRelease(v931);
          }
          v929 += 9636;
          --v930;
        }
        while (v930);
      }
      goto LABEL_185;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44B10]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v793 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v794 = AVE_GetCurrTime();
        v795 = AVE_Log_GetLevelStr(6);
        v796 = *v8;
        if (v793)
        {
          printf("%lld %d AVE %s: %p: FIG: asked for kVTCompressionPropertyKey_RequiredMVHEVCVideoParameterSetAlphaVideoLayerIDs\n", v794, 30, v795, v796);
          __uint64_t v797 = AVE_GetCurrTime();
          v1035 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: %p: FIG: asked for kVTCompressionPropertyKey_RequiredMVHEVCVideoParameterSetAlphaVideoLayerIDs", v797, 30, v1035, *v8);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %p: FIG: asked for kVTCompressionPropertyKey_RequiredMVHEVCVideoParameterSetAlphaVideoLayerIDs", v794, 30, v795, v796);
        }
      }
      Mutable = CFArrayCreateMutable(0, *((unsigned int *)v8 + 4609), MEMORY[0x1E4F1D510]);
      if (*((_DWORD *)v8 + 4609))
      {
        unint64_t v932 = 0;
        v933 = (char *)v8 + 18900;
        do
        {
          CFNumberRef v934 = CFNumberCreate(0, kCFNumberSInt8Type, v933);
          CFArrayAppendValue(Mutable, v934);
          if (v934) {
            CFRelease(v934);
          }
          ++v932;
          v933 += 4;
        }
        while (v932 < *((unsigned int *)v8 + 4609));
      }
      goto LABEL_185;
    }
    if (CFEqual(a2, @"EncoderEncryptionData"))
    {
      *a4 = CFNumberCreate(a3, kCFNumberSInt64Type, v8 + 23162);
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        uint64_t v28 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v798 = AVE_GetCurrTime();
        v799 = AVE_Log_GetLevelStr(6);
        if (!v28)
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_EncoderEncryptionData return 0x%llx");
          goto LABEL_106;
        }
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_EncoderEncryptionData return 0x%llx\n", v798, 30, v799, v8[23162]);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_EncoderEncryptionData return 0x%llx");
      }
    }
    else
    {
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44AB0]))
      {
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44A50]))
        {
          uint64_t v28 = 0;
          if (*((int *)v8 + 46302) <= 0) {
            uint64_t v29 = (__CFString **)MEMORY[0x1E4F1CFC8];
          }
          else {
            uint64_t v29 = (__CFString **)MEMORY[0x1E4F1CFD0];
          }
          goto LABEL_104;
        }
        if (CFEqual(a2, @"MaxEncoderPixelRate"))
        {
          Profile = HEVC_FindProfile(*v9);
          if (Profile)
          {
            int v803 = Profile[1];
            int v804 = Profile[2];
          }
          else
          {
            int v804 = 1;
            int v803 = 8;
          }
          PixelPerf = AVE_DevCap_FindPixelPerf(*((_DWORD *)v8 + 45892), 1, 1, v803, v804, 1);
          keys[0] = PixelPerf;
          if (AVE_Log_CheckLevel(0x1Eu, 6))
          {
            int v936 = AVE_Log_CheckConsole(0x1Eu);
            __uint64_t v937 = AVE_GetCurrTime();
            v938 = AVE_Log_GetLevelStr(6);
            if (v936)
            {
              printf("%lld %d AVE %s: %s:%d kVTCompressionPropertyKey_MaxEncoderPixelRate %lld\n", v937, 30, v938, "AVE_HEVCCopyProperty", 15398, PixelPerf);
              AVE_GetCurrTime();
              AVE_Log_GetLevelStr(6);
            }
            syslog(3, "%lld %d AVE %s: %s:%d kVTCompressionPropertyKey_MaxEncoderPixelRate %lld");
          }
          goto LABEL_264;
        }
        if (CFEqual(a2, @"NumberOfCores"))
        {
          v805 = AVE_DevCap_Find(*((_DWORD *)v8 + 45892));
          if (AVE_Log_CheckLevel(0x1Eu, 6))
          {
            int v806 = AVE_Log_CheckConsole(0x1Eu);
            __uint64_t v807 = AVE_GetCurrTime();
            v808 = AVE_Log_GetLevelStr(6);
            int v809 = *(_DWORD *)(*((void *)v805 + 2) + 4);
            if (v806)
            {
              printf("%lld %d AVE %s: %s:%d kVTCompressionPropertyKey_NumberOfCores %d\n", v807, 30, v808, "AVE_HEVCCopyProperty", 15408, v809);
              __uint64_t v810 = AVE_GetCurrTime();
              v811 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: %s:%d kVTCompressionPropertyKey_NumberOfCores %d", v810, 30, v811, "AVE_HEVCCopyProperty", 15408, *(_DWORD *)(*((void *)v805 + 2) + 4));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: %s:%d kVTCompressionPropertyKey_NumberOfCores %d", v807, 30, v808, "AVE_HEVCCopyProperty", 15408, v809);
            }
          }
          long long v33 = (void **)(*((void *)v805 + 2) + 4);
          goto LABEL_29;
        }
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44818]))
        {
          if (AVE_Log_CheckLevel(0x1Eu, 6))
          {
            int v812 = AVE_Log_CheckConsole(0x1Eu);
            __uint64_t v813 = AVE_GetCurrTime();
            v814 = AVE_Log_GetLevelStr(6);
            int v815 = *((_DWORD *)v8 + 56);
            if (v812)
            {
              printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AverageNonDroppableFrameRate return %d\n", v813, 30, v814, v815);
              __uint64_t v816 = AVE_GetCurrTime();
              v1036 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AverageNonDroppableFrameRate return %d", v816, 30, v1036, *((_DWORD *)v8 + 56));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AverageNonDroppableFrameRate return %d", v813, 30, v814, v815);
            }
          }
          long long v33 = (void **)(v8 + 28);
          goto LABEL_29;
        }
        if (!CFEqual(a2, @"CalculateMeanSquaredError"))
        {
          if (AVE_Log_CheckLevel(0x1Eu, 4))
          {
            int v821 = AVE_Log_CheckConsole(0x1Eu);
            __uint64_t v822 = AVE_GetCurrTime();
            v823 = AVE_Log_GetLevelStr(4);
            if (v821)
            {
              printf("%lld %d AVE %s: FIG: CopyProperty Property not supported\n", v822, 30, v823);
              __uint64_t v824 = AVE_GetCurrTime();
              v1037 = AVE_Log_GetLevelStr(4);
              syslog(3, "%lld %d AVE %s: FIG: CopyProperty Property not supported", v824, 30, v1037);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: CopyProperty Property not supported", v822, 30, v823);
            }
          }
          CFShow(a2);
          uint64_t v28 = 4294954396;
          goto LABEL_106;
        }
        if (AVE_Log_CheckLevel(0x1Eu, 6))
        {
          int v817 = AVE_Log_CheckConsole(0x1Eu);
          __uint64_t v818 = AVE_GetCurrTime();
          v819 = AVE_Log_GetLevelStr(6);
          if ((*((unsigned char *)v8 + 1891) & 8) != 0) {
            v820 = "true";
          }
          else {
            v820 = "false";
          }
          if (v817)
          {
            printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_CalculateMeanSquaredError return %s\n", v818, 30, v819, v820);
            __uint64_t v818 = AVE_GetCurrTime();
            v819 = AVE_Log_GetLevelStr(6);
            if (((unint64_t)v8[236] & 0x8000000) != 0) {
              v820 = "true";
            }
            else {
              v820 = "false";
            }
          }
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_CalculateMeanSquaredError return %s", v818, 30, v819, v820);
        }
        uint64_t v28 = 0;
        v911 = (__CFString **)MEMORY[0x1E4F1CFD0];
        v912 = (__CFString **)MEMORY[0x1E4F1CFC8];
        BOOL v913 = ((unint64_t)v8[236] & 0x8000000) == 0;
LABEL_1442:
        if (v913) {
          uint64_t v29 = v912;
        }
        else {
          uint64_t v29 = v911;
        }
        goto LABEL_104;
      }
      *a4 = CFNumberCreate(a3, kCFNumberDoubleType, v1054);
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        uint64_t v28 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v800 = AVE_GetCurrTime();
        v801 = AVE_Log_GetLevelStr(6);
        if (!v28)
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Quality return %.6f");
          goto LABEL_106;
        }
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Quality return %.6f\n", v800, 30, v801, *v1054);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Quality return %.6f");
      }
    }
LABEL_38:
    uint64_t v28 = 0;
    goto LABEL_106;
  }
  int v293 = *((unsigned __int8 *)v8 + 18849);
  BOOL v294 = AVE_Log_CheckLevel(0x1Eu, 6);
  if (v293)
  {
    if (v294)
    {
      int v295 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v296 = AVE_GetCurrTime();
      v297 = AVE_Log_GetLevelStr(6);
      if (*((_DWORD *)v8 + 49) == 3) {
        CFStringRef v298 = "TRUE";
      }
      else {
        CFStringRef v298 = "FALSE";
      }
      if (v295)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_EnableQPModulation return %s\n", v296, 30, v297, v298);
        __uint64_t v296 = AVE_GetCurrTime();
        v297 = AVE_Log_GetLevelStr(6);
        if (*((_DWORD *)v8 + 49) == 3) {
          CFStringRef v298 = "TRUE";
        }
        else {
          CFStringRef v298 = "FALSE";
        }
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_EnableQPModulation return %s", v296, 30, v297, v298);
    }
    if (*((_DWORD *)v8 + 49) != 3) {
      goto LABEL_20;
    }
    goto LABEL_103;
  }
  if (!v294) {
    goto LABEL_38;
  }
  uint64_t v28 = AVE_Log_CheckConsole(0x1Eu);
  __uint64_t v835 = AVE_GetCurrTime();
  v836 = AVE_Log_GetLevelStr(6);
  if (v28)
  {
    printf("%lld %d AVE %s: FIG: asked for unsupported property kVTCompressionPropertyKey_EnableQPModulation\n", v835, 30, v836);
    AVE_GetCurrTime();
    AVE_Log_GetLevelStr(6);
    syslog(3, "%lld %d AVE %s: FIG: asked for unsupported property kVTCompressionPropertyKey_EnableQPModulation");
    goto LABEL_38;
  }
  syslog(3, "%lld %d AVE %s: FIG: asked for unsupported property kVTCompressionPropertyKey_EnableQPModulation");
LABEL_106:
  if (AVE_Log_CheckLevel(0x1Eu, 8))
  {
    int v83 = AVE_Log_CheckConsole(0x1Eu);
    __uint64_t v84 = AVE_GetCurrTime();
    int v85 = AVE_Log_GetLevelStr(8);
    if (v83)
    {
      printf("%lld %d AVE %s: H3H264VideoEncoder FIG: EXIT AVE_HEVCCopyProperty err %d \n", v84, 30, v85, v28);
      __uint64_t v86 = AVE_GetCurrTime();
      v954 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: H3H264VideoEncoder FIG: EXIT AVE_HEVCCopyProperty err %d ", v86, 30, v954, v28);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H3H264VideoEncoder FIG: EXIT AVE_HEVCCopyProperty err %d ", v84, 30, v85, v28);
    }
  }
  if (v8) {
    pthread_mutex_unlock((pthread_mutex_t *)(v8 + 22931));
  }
  return v28;
}

uint64_t AVE_HEVCSetProperty(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    int v4 = DerivedStorage;
    if (AVE_Log_CheckLevel(0x1Eu, 8))
    {
      int v5 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(8);
      if (v5)
      {
        printf("%lld %d AVE %s: FIG: ENTER AVE_HEVCSetProperty\n", CurrTime, 30, LevelStr);
        __uint64_t v8 = AVE_GetCurrTime();
        __uint64_t v19 = AVE_Log_GetLevelStr(8);
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCSetProperty", v8, 30, v19);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCSetProperty", CurrTime, 30, LevelStr);
      }
    }
    uint64_t v13 = AVE_SetProperty_internal(v4, a2);
  }
  else
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v9 = AVE_Log_CheckConsole(3u);
      __uint64_t v10 = AVE_GetCurrTime();
      __uint64_t v11 = AVE_Log_GetLevelStr(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v10, 3, v11, "AVE_HEVCSetProperty", 13160, "encoderPrivateStorage");
        __uint64_t v12 = AVE_GetCurrTime();
        int v20 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v12, 3, v20, "AVE_HEVCSetProperty", 13160, "encoderPrivateStorage");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v10, 3, v11, "AVE_HEVCSetProperty", 13160, "encoderPrivateStorage");
      }
    }
    uint64_t v13 = 4294954384;
  }
  if (AVE_Log_CheckLevel(0x1Eu, 8))
  {
    int v14 = AVE_Log_CheckConsole(0x1Eu);
    __uint64_t v15 = AVE_GetCurrTime();
    int v16 = AVE_Log_GetLevelStr(8);
    if (v14)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_HEVCSetProperty err %d \n", v15, 30, v16, v13);
      __uint64_t v17 = AVE_GetCurrTime();
      __uint64_t v21 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_HEVCSetProperty err %d ", v17, 30, v21, v13);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_HEVCSetProperty err %d ", v15, 30, v16, v13);
    }
  }
  return v13;
}

int *AVE_getVuiAspectRatio(int *result, int *a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 1))
  {
    int v3 = *(_DWORD *)(a3 + 4);
    switch(v3)
    {
      case 2:
        int v4 = 12;
        goto LABEL_15;
      case 3:
        int v4 = 10;
        goto LABEL_15;
      case 4:
        int v4 = 16;
        goto LABEL_15;
      case 5:
        int v6 = 40;
        goto LABEL_17;
      case 6:
        int v4 = 24;
        goto LABEL_15;
      case 7:
        goto LABEL_6;
      case 8:
        int v4 = 32;
        goto LABEL_15;
      case 9:
        int v6 = 80;
        goto LABEL_17;
      case 10:
        int v4 = 18;
        goto LABEL_15;
      case 11:
        int v4 = 15;
LABEL_15:
        *uint64_t result = v4;
        int v5 = 11;
        break;
      case 12:
        int v6 = 64;
LABEL_17:
        *uint64_t result = v6;
        int v5 = 33;
        break;
      case 13:
        *uint64_t result = 160;
        int v5 = 99;
        break;
      case 14:
        *uint64_t result = 4;
        int v5 = 3;
        break;
      case 15:
        *uint64_t result = 3;
        int v5 = 2;
        break;
      case 16:
        *uint64_t result = 2;
        int v5 = 1;
        break;
      default:
        if (v3 != 255) {
          goto LABEL_6;
        }
        *uint64_t result = *(_DWORD *)(a3 + 8);
        int v5 = *(_DWORD *)(a3 + 12);
        break;
    }
  }
  else
  {
LABEL_6:
    int v5 = 1;
    *uint64_t result = 1;
  }
  *a2 = v5;
  return result;
}

__CFDictionary *CreateTemporalLevelInfoDictionary(uint64_t a1, int a2)
{
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      int v12 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | TemporalLevelInfoDict == NULL\n", CurrTime, 46, LevelStr, "CreateTemporalLevelInfoDictionary", 13240, "TemporalLevelInfoDict != __null");
        __uint64_t v15 = AVE_GetCurrTime();
        __uint64_t v26 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | TemporalLevelInfoDict == NULL", v15, 46, v26, "CreateTemporalLevelInfoDictionary", 13240, "TemporalLevelInfoDict != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | TemporalLevelInfoDict == NULL", CurrTime, 46, LevelStr, "CreateTemporalLevelInfoDictionary", 13240, "TemporalLevelInfoDict != __null");
      }
    }
    return 0;
  }
  int v5 = Mutable;
  AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E4F1EF88], a2, Mutable);
  AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E4F1EF80], *(_DWORD *)a1, v5);
  AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E4F1EF90], *(_DWORD *)(a1 + 4) != 0, v5);
  AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E4F1EF78], *(_DWORD *)(a1 + 8), v5);
  for (uint64_t i = 43; i != 11; --i)
    int v6 = *(unsigned __int8 *)(a1 + i) | (2 * v6);
  *(_DWORD *)bytes = v6;
  CFDataRef v8 = CFDataCreate(0, bytes, 4);
  if (!v8)
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      int v16 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v17 = AVE_GetCurrTime();
      __uint64_t v18 = AVE_Log_GetLevelStr(4);
      if (v16)
      {
        printf("%lld %d AVE %s: %s:%d %s | cf_profileCompatibilityFlags == NULL\n", v17, 46, v18, "CreateTemporalLevelInfoDictionary", 13256, "cf_profileCompatibilityFlags != __null");
        __uint64_t v19 = AVE_GetCurrTime();
        int v27 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | cf_profileCompatibilityFlags == NULL", v19, 46, v27, "CreateTemporalLevelInfoDictionary", 13256, "cf_profileCompatibilityFlags != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | cf_profileCompatibilityFlags == NULL", v17, 46, v18, "CreateTemporalLevelInfoDictionary", 13256, "cf_profileCompatibilityFlags != __null");
      }
    }
    __uint64_t v24 = v5;
    goto LABEL_22;
  }
  CFDataRef v9 = v8;
  CFDictionaryAddValue(v5, (const void *)*MEMORY[0x1E4F1EF70], v8);
  int v30 = 0;
  v29[0] = (*(unsigned char *)(a1 + 45) << 6) | (*(unsigned char *)(a1 + 44) << 7) | (32 * *(unsigned char *)(a1 + 46)) | (16
                                                                                                 * *(unsigned char *)(a1 + 47)) | (8 * *(unsigned char *)(a1 + 48)) | (4 * *(unsigned char *)(a1 + 49)) | (2 * *(unsigned char *)(a1 + 50)) | *(unsigned char *)(a1 + 51);
  v29[1] = (*(unsigned char *)(a1 + 53) << 6) | (*(unsigned char *)(a1 + 52) << 7) | (32 * *(unsigned char *)(a1 + 54)) | (16
                                                                                                 * *(unsigned char *)(a1 + 55)) | (8 * *(unsigned char *)(a1 + 56));
  CFDataRef v10 = CFDataCreate(0, v29, 6);
  if (!v10)
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      int v20 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v21 = AVE_GetCurrTime();
      int v22 = AVE_Log_GetLevelStr(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | cf_constraintIndicatorFlags == NULL\n", v21, 46, v22, "CreateTemporalLevelInfoDictionary", 13274, "cf_constraintIndicatorFlags != __null");
        __uint64_t v23 = AVE_GetCurrTime();
        uint64_t v28 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | cf_constraintIndicatorFlags == NULL", v23, 46, v28, "CreateTemporalLevelInfoDictionary", 13274, "cf_constraintIndicatorFlags != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | cf_constraintIndicatorFlags == NULL", v21, 46, v22, "CreateTemporalLevelInfoDictionary", 13274, "cf_constraintIndicatorFlags != __null");
      }
    }
    CFRelease(v5);
    __uint64_t v24 = v9;
LABEL_22:
    CFRelease(v24);
    return 0;
  }
  CFDataRef v11 = v10;
  CFDictionaryAddValue(v5, (const void *)*MEMORY[0x1E4F1EF60], v10);
  AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E4F1EF68], *(_DWORD *)(a1 + 60), v5);
  CFRelease(v9);
  CFRelease(v11);
  return v5;
}

#error "1BA70EF7C: too big function (funcsize=0)"

uint64_t AVE_setVuiAspectRatio(uint64_t result, int a2, uint64_t a3)
{
  int v3 = result;
  int v4 = a2;
  do
  {
    if (v3 <= v4) {
      v4 %= v3;
    }
    else {
      v3 %= v4;
    }
  }
  while (v3 && v4);
  if (v3) {
    int v4 = v3;
  }
  int v5 = (int)result / v4;
  int v6 = a2 / v4;
  if (v5 == 1 && v6 == 1)
  {
    int v7 = 1;
LABEL_12:
    *(unsigned char *)(a3 + 1) = 1;
    *(_DWORD *)(a3 + 4) = v7;
    return result;
  }
  if (v6 == 33)
  {
    switch(v5)
    {
      case '(':
        int v7 = 5;
        goto LABEL_12;
      case '@':
        int v7 = 12;
        goto LABEL_12;
      case 'P':
        int v7 = 9;
        goto LABEL_12;
    }
LABEL_35:
    *(unsigned char *)(a3 + 1) = 1;
    *(_DWORD *)(a3 + 4) = 255;
LABEL_36:
    *(_DWORD *)(a3 + 8) = v5;
    *(_DWORD *)(a3 + 12) = v6;
    return result;
  }
  if (v6 == 11)
  {
    int v7 = 2;
    switch(v5)
    {
      case 10:
        int v7 = 3;
        goto LABEL_12;
      case 11:
      case 13:
      case 14:
      case 17:
      case 19:
      case 21:
      case 22:
      case 23:
        goto LABEL_35;
      case 12:
        goto LABEL_12;
      case 15:
        int v7 = 11;
        goto LABEL_12;
      case 16:
        int v7 = 4;
        goto LABEL_12;
      case 18:
        int v7 = 10;
        goto LABEL_12;
      case 20:
        int v7 = 7;
        goto LABEL_12;
      case 24:
        int v7 = 6;
        goto LABEL_12;
      default:
        if (v5 != 32) {
          goto LABEL_35;
        }
        int v7 = 8;
        break;
    }
    goto LABEL_12;
  }
  if (v5 == 160 && v6 == 99)
  {
    int v7 = 13;
    goto LABEL_12;
  }
  if (v5 == 4 && v6 == 3)
  {
    int v7 = 14;
    goto LABEL_12;
  }
  if (v5 == 3 && v6 == 2)
  {
    int v7 = 15;
    goto LABEL_12;
  }
  if (v5 == 2 && v6 == 1) {
    int v8 = 16;
  }
  else {
    int v8 = 255;
  }
  *(unsigned char *)(a3 + 1) = 1;
  *(_DWORD *)(a3 + 4) = v8;
  if (v5 != 2 || v6 != 1) {
    goto LABEL_36;
  }
  return result;
}

uint64_t AVE_HEVC_SetQuality(uint64_t a1, double a2)
{
  uint64_t v4 = a1 + 18484;
  uint64_t v5 = (int)(a2 + 0.5);
  if (AVE_Log_CheckLevel(0x1Eu, 6))
  {
    int v6 = AVE_Log_CheckConsole(0x1Eu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %f %p\n", CurrTime, 30, LevelStr, "AVE_HEVC_SetQuality", a2, (const void *)a1);
      __uint64_t v9 = AVE_GetCurrTime();
      __uint64_t v21 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s Enter %f %p", v9, 30, v21, "AVE_HEVC_SetQuality", a2, (const void *)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %f %p", CurrTime, 30, LevelStr, "AVE_HEVC_SetQuality", a2, (const void *)a1);
    }
  }
  if (v5 > 0x63)
  {
    if (v5 == 100)
    {
      uint64_t v13 = 0;
      *(_DWORD *)(a1 + 1832) = 0;
      *(_OWORD *)(a1 + 1816) = 0u;
      *(unsigned char *)(a1 + 118487) = 1;
      *(unsigned char *)(v4 + 380) = 1;
      *(_DWORD *)uint64_t v4 = 0;
    }
    else
    {
      uint64_t v13 = 4294966295;
    }
    goto LABEL_27;
  }
  int v10 = *(_DWORD *)(a1 + 103136);
  if (!v10)
  {
    if (*(unsigned char *)(v4 + 365))
    {
      int v11 = 0;
      int v12 = Quality2QPHEIF[v5];
      goto LABEL_17;
    }
    int v12 = Quality2QPHEVC[v5];
LABEL_16:
    int v11 = 1;
    goto LABEL_17;
  }
  if (!*(unsigned char *)(v4 + 365))
  {
    int v12 = Quality2QPHEVC10Bit[v5];
    goto LABEL_16;
  }
  int v11 = 0;
  int v12 = Quality2QPHEIF10Bit[v5];
LABEL_17:
  *(double *)(a1 + 1816) = (double)(v12 + 6 * v10);
  *(_DWORD *)(a1 + 1824) = v12;
  *(_DWORD *)(a1 + 1828) = v12;
  *(_DWORD *)(a1 + 1832) = v12;
  *(unsigned char *)(v4 + 379) = 1;
  if (v11)
  {
    if (!*(unsigned char *)(v4 + 288))
    {
      uint64_t v13 = 0;
      *(unsigned char *)(v4 + 288) = 1;
      *(_DWORD *)(a1 + 196) = 8;
      goto LABEL_27;
    }
    if (*(_DWORD *)(a1 + 196) != 8 && AVE_Log_CheckLevel(0x1Eu, 5))
    {
      int v14 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v15 = AVE_GetCurrTime();
      int v16 = AVE_Log_GetLevelStr(5);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d Quality set with wrong RC mode %f %p %d\n", v15, 30, v16, "AVE_HEVC_SetQuality", 868, a2, (const void *)a1, *(_DWORD *)(a1 + 196));
        __uint64_t v15 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(5);
      }
      syslog(3, "%lld %d AVE %s: %s:%d Quality set with wrong RC mode %f %p %d", v15);
    }
  }
  uint64_t v13 = 0;
LABEL_27:
  if (AVE_Log_CheckLevel(0x1Eu, 6))
  {
    int v17 = AVE_Log_CheckConsole(0x1Eu);
    __uint64_t v18 = AVE_GetCurrTime();
    __uint64_t v19 = AVE_Log_GetLevelStr(6);
    if (v17)
    {
      printf("%lld %d AVE %s: %s Exit %f %p %d\n", v18, 30, v19, "AVE_HEVC_SetQuality", a2, (const void *)a1, v13);
      AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s Exit %f %p %d");
  }
  return v13;
}

uint64_t AVE_HEVCStartSession(const void *a1, const void *a2, unint64_t a3, const void *a4)
{
  int v4 = a3;
  unint64_t v7 = HIDWORD(a3);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  __uint64_t v9 = AVE_DW_Get();
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    int v10 = AVE_Log_CheckConsole(0x14u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v10)
    {
      printf("%lld %d AVE %s: Enter %s %p %p %dx%d %p\n", CurrTime, 20, LevelStr, "AVE_HEVCStartSession", a1, a2, v4, v7, a4);
      __uint64_t CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: Enter %s %p %p %dx%d %p", CurrTime, 20);
  }
  if (DerivedStorage)
  {
    uint64_t v13 = DerivedStorage + 183440;
    int v14 = (pthread_mutex_t *)(DerivedStorage + 183448);
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
    uint64_t v15 = *(void *)(DerivedStorage + 183648);
    __uint64_t v16 = AVE_GetCurrTime();
    AVE_TimeStats_AddStartTime(v15, 3u, v16);
    kdebug_trace();
    if (*(_DWORD *)(DerivedStorage + 183512)) {
      *(void *)(DerivedStorage + 183520) = AVE_GetCurrTime();
    }
    if (a1)
    {
      if (a2)
      {
        if (v4 <= 1)
        {
          if (AVE_Log_CheckLevel(3u, 4))
          {
            int v30 = AVE_Log_CheckConsole(3u);
            __uint64_t v31 = AVE_GetCurrTime();
            __uint64_t v32 = AVE_Log_GetLevelStr(4);
            if (v30)
            {
              printf("%lld %d AVE %s: %s:%d %s | FIG: dimensions.width (%dx%d) not supported.\n", v31, 3, v32, "AVE_HEVCStartSession", 11505, "dimensions.width >= 2", v4, v7);
              __uint64_t v31 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
              int v14 = (pthread_mutex_t *)(DerivedStorage + 183448);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: dimensions.width (%dx%d) not supported.", v31);
          }
        }
        else if ((int)v7 <= 1)
        {
          if (AVE_Log_CheckLevel(3u, 4))
          {
            int v34 = AVE_Log_CheckConsole(3u);
            __uint64_t v35 = AVE_GetCurrTime();
            int v36 = AVE_Log_GetLevelStr(4);
            if (v34)
            {
              printf("%lld %d AVE %s: %s:%d %s | FIG: dimensions.height (%dx%d) not supported.\n", v35, 3, v36, "AVE_HEVCStartSession", 11506, "dimensions.height >= 2", v4, v7);
              __uint64_t v35 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
              int v14 = (pthread_mutex_t *)(DerivedStorage + 183448);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: dimensions.height (%dx%d) not supported.", v35);
          }
        }
        else
        {
          *(void *)uint64_t DerivedStorage = a2;
          *(_DWORD *)(DerivedStorage + 1880) = v4;
          *(_DWORD *)(DerivedStorage + 1884) = v7;
          *(_DWORD *)(DerivedStorage + 19468) = v4;
          *(_DWORD *)(DerivedStorage + 19472) = v7;
          AVE_PrepareCropParams(DerivedStorage);
          if (!AVE_Enc_CheckResolution(*(_DWORD *)(DerivedStorage + 183568), 1, *(_DWORD *)(DerivedStorage + 1880), *(_DWORD *)(DerivedStorage + 1884), 0))
          {
            *(void *)(DerivedStorage + 16) = a4;
            if (a4) {
              CFRetain(a4);
            }
            AVE_SetEncoderDefault(DerivedStorage);
            unsigned int v37 = *(_DWORD *)(DerivedStorage + 103136) + 8;
            if (v37 <= *(_DWORD *)(DerivedStorage + 103140) + 8) {
              unsigned int v37 = *(_DWORD *)(DerivedStorage + 103140) + 8;
            }
            uint64_t updated = AVE_UpdatePixelBufferDict(*(unsigned int *)(DerivedStorage + 183564), *(unsigned int *)(DerivedStorage + 183560), 30, 1, *(unsigned int *)(DerivedStorage + 19468), *(unsigned int *)(DerivedStorage + 19472), *(unsigned int *)(DerivedStorage + 1880), *(unsigned int *)(DerivedStorage + 1884), v37, 0, 0x1414C4C20, *(void *)DerivedStorage);
            if (!updated)
            {
              *(void *)uint64_t v13 = 30566;
              *(_DWORD *)(DerivedStorage + 184984) = 0;
              *(_DWORD *)(DerivedStorage + 184992) = -1;
              *(_DWORD *)(DerivedStorage + 18384) = 0;
              *(_DWORD *)(DerivedStorage + 185520) = 0;
              if (*(int *)(DerivedStorage + 228) >= 1) {
                int v55 = *(_DWORD *)(DerivedStorage + 228);
              }
              else {
                int v55 = 30;
              }
              AVE_FPS::Update(*(AVE_FPS **)(DerivedStorage + 183640), v55, 0, 0);
              *(_DWORD *)(DerivedStorage + 18632) = v9[196];
              AVE_VCP_Create(*(unsigned int *)(DerivedStorage + 183572), *(_DWORD *)(DerivedStorage + 18760), *(_DWORD *)(DerivedStorage + 1880), *(_DWORD *)(DerivedStorage + 1884));
            }
            uint64_t v33 = updated;
            if (!AVE_Log_CheckLevel(3u, 4)) {
              goto LABEL_49;
            }
            __uint64_t v59 = (pthread_mutex_t *)(DerivedStorage + 183448);
            int v39 = AVE_Log_CheckConsole(3u);
            __uint64_t v40 = AVE_GetCurrTime();
            int v41 = AVE_Log_GetLevelStr(4);
            if (v39)
            {
              printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_UpdatePixelBufferDict failed.\n", v40, 3, v41, "AVE_HEVCStartSession", 11554, "err == noErr");
              __uint64_t v42 = AVE_GetCurrTime();
              __uint64_t v57 = AVE_Log_GetLevelStr(4);
              syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_UpdatePixelBufferDict failed.", v42, 3, v57, "AVE_HEVCStartSession", 11554, "err == noErr");
            }
            else
            {
              syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_UpdatePixelBufferDict failed.", v40, 3, v41, "AVE_HEVCStartSession", 11554, "err == noErr");
            }
            goto LABEL_67;
          }
          if (AVE_Log_CheckLevel(0x16u, 4))
          {
            __uint64_t v59 = (pthread_mutex_t *)(DerivedStorage + 183448);
            int v17 = AVE_Log_CheckConsole(0x16u);
            __uint64_t v18 = AVE_GetCurrTime();
            __uint64_t v19 = AVE_Log_GetLevelStr(4);
            if (v17)
            {
              printf("%lld %d AVE %s: %s:%d %s | resolution is not out of range %d %d\n", v18, 22, v19, "AVE_HEVCStartSession", 11530, "ret == 0", *(_DWORD *)(DerivedStorage + 1880), *(_DWORD *)(DerivedStorage + 1884));
              __uint64_t v18 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | resolution is not out of range %d %d", v18);
            uint64_t v33 = 4294954394;
LABEL_67:
            int v14 = v59;
LABEL_49:
            if (*(_DWORD *)(DerivedStorage + 183512))
            {
              *(void *)(DerivedStorage + 183528) = AVE_GetCurrTime();
              if (AVE_Log_CheckLevel(0x18u, 6))
              {
                int v43 = v14;
                int v44 = AVE_Log_CheckConsole(0x18u);
                __uint64_t v45 = AVE_GetCurrTime();
                __uint64_t v46 = AVE_Log_GetLevelStr(6);
                uint64_t v47 = *(void *)(v13 + 88) - *(void *)(v13 + 80);
                if (v44)
                {
                  printf("%lld %d AVE %s: FIG: %d AVE_HEVCStartSession took %lld ms\n", v45, 24, v46, *(_DWORD *)(v13 + 132), v47);
                  __uint64_t v48 = AVE_GetCurrTime();
                  __uint64_t v49 = AVE_Log_GetLevelStr(6);
                  syslog(3, "%lld %d AVE %s: FIG: %d AVE_HEVCStartSession took %lld ms", v48, 24, v49, *(_DWORD *)(v13 + 132), *(void *)(v13 + 88) - *(void *)(v13 + 80));
                }
                else
                {
                  syslog(3, "%lld %d AVE %s: FIG: %d AVE_HEVCStartSession took %lld ms", v45, 24, v46, *(_DWORD *)(v13 + 132), v47);
                }
                int v14 = v43;
              }
            }
            kdebug_trace();
            pthread_mutex_unlock(v14);
            goto LABEL_56;
          }
        }
      }
      else if (AVE_Log_CheckLevel(3u, 4))
      {
        int v27 = AVE_Log_CheckConsole(3u);
        __uint64_t v28 = AVE_GetCurrTime();
        uint64_t v29 = AVE_Log_GetLevelStr(4);
        if (v27)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: session NULL.\n", v28, 3, v29, "AVE_HEVCStartSession", 11504, "session");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
          int v14 = (pthread_mutex_t *)(DerivedStorage + 183448);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: session NULL.");
      }
    }
    else if (AVE_Log_CheckLevel(3u, 4))
    {
      int v24 = AVE_Log_CheckConsole(3u);
      __uint64_t v25 = AVE_GetCurrTime();
      __uint64_t v26 = AVE_Log_GetLevelStr(4);
      if (v24)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: encoder NULL.\n", v25, 3, v26, "AVE_HEVCStartSession", 11503, "encoder");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
        int v14 = (pthread_mutex_t *)(DerivedStorage + 183448);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: encoder NULL.");
    }
    uint64_t v33 = 4294954394;
    goto LABEL_49;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    int v20 = AVE_Log_CheckConsole(3u);
    __uint64_t v21 = AVE_GetCurrTime();
    int v22 = AVE_Log_GetLevelStr(4);
    if (v20)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v21, 3, v22, "AVE_HEVCStartSession", 11488, "encoderPrivateStorage");
      __uint64_t v23 = AVE_GetCurrTime();
      int v56 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v23, 3, v56, "AVE_HEVCStartSession", 11488, "encoderPrivateStorage");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v21, 3, v22, "AVE_HEVCStartSession", 11488, "encoderPrivateStorage");
    }
  }
  kdebug_trace();
  uint64_t v33 = 4294954384;
LABEL_56:
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    int v50 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v51 = AVE_GetCurrTime();
    __uint64_t v52 = AVE_Log_GetLevelStr(6);
    if (v50)
    {
      printf("%lld %d AVE %s: Exit %s %p %p %dx%d %p %d\n", v51, 20, v52, "AVE_HEVCStartSession", a1, a2, v4, v7, a4, v33);
      __uint64_t v53 = AVE_GetCurrTime();
      int v58 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: Exit %s %p %p %dx%d %p %d", v53, 20, v58);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p %p %dx%d %p %d", v51, 20, v52);
    }
  }
  return v33;
}

uint64_t AVE_HEVC_EncodeFrame(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v9 = AVE_Log_CheckConsole(0x14u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v9)
    {
      printf("%lld %d AVE %s: %s Enter\n", CurrTime, 20, LevelStr, "AVE_HEVC_EncodeFrame");
      __uint64_t v12 = AVE_GetCurrTime();
      int v22 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Enter", v12, 20, v22, "AVE_HEVC_EncodeFrame");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter", CurrTime, 20, LevelStr, "AVE_HEVC_EncodeFrame");
    }
  }
  if (DerivedStorage)
  {
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
    kdebug_trace();
    if (a6 && CFDictionaryContainsKey(a6, @"SessionIndicator")) {
      AVE_TimeStats_Restart(*(void *)(DerivedStorage + 183648));
    }
    if (!*(_DWORD *)(DerivedStorage + 183444))
    {
      uint64_t v13 = *(void *)(DerivedStorage + 183648);
      __uint64_t v14 = AVE_GetCurrTime();
      AVE_TimeStats_AddStartTime(v13, 5u, v14);
      if (*(int *)(DerivedStorage + 228) >= 1) {
        int v15 = *(_DWORD *)(DerivedStorage + 228);
      }
      else {
        int v15 = 30;
      }
      AVE_FPS::Update(*(AVE_FPS **)(DerivedStorage + 183640), v15, 0, 0);
    }
    uint64_t v16 = AVE_HEVC_Encode();
  }
  else
  {
    if (AVE_Log_CheckLevel(0x14u, 4))
    {
      int v17 = AVE_Log_CheckConsole(0x14u);
      __uint64_t v18 = AVE_GetCurrTime();
      __uint64_t v19 = AVE_Log_GetLevelStr(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to get encoder %p\n", v18, 20, v19, "AVE_HEVC_EncodeFrame", 12888, "pEnc", a1);
        __uint64_t v20 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get encoder %p", v20);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get encoder %p", v18);
      }
    }
    uint64_t v16 = 4294954384;
  }
  kdebug_trace();
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 183448));
  return v16;
}

uint64_t AVE_HEVCCompleteFrames(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v3 = AVE_Log_CheckConsole(0x14u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v3)
    {
      printf("%lld %d AVE %s: Enter %s %p\n", CurrTime, 20, LevelStr, "AVE_HEVCCompleteFrames", a1);
      __uint64_t v6 = AVE_GetCurrTime();
      __uint64_t v31 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: Enter %s %p", v6, 20, v31, "AVE_HEVCCompleteFrames", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Enter %s %p", CurrTime, 20, LevelStr, "AVE_HEVCCompleteFrames", a1);
    }
  }
  if (!DerivedStorage)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v20 = AVE_Log_CheckConsole(3u);
      __uint64_t v21 = AVE_GetCurrTime();
      int v22 = AVE_Log_GetLevelStr(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v21, 3, v22, "AVE_HEVCCompleteFrames", 13093, "encoderPrivateStorage");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.");
    }
    goto LABEL_24;
  }
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
  uint64_t v7 = *(void *)(DerivedStorage + 183648);
  __uint64_t v8 = AVE_GetCurrTime();
  AVE_TimeStats_AddStartTime(v7, 6u, v8);
  kdebug_trace();
  if (*(_DWORD *)(DerivedStorage + 183512)) {
    *(void *)(DerivedStorage + 183520) = AVE_GetCurrTime();
  }
  __uint64_t v9 = AVE_GetCurrTime();
  if (*(_DWORD *)(DerivedStorage + 183440) == 30568)
  {
    __uint64_t v33 = v9;
    if (AVE_USL_Drv_Complete(*(void *)(DerivedStorage + 24), &v33))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v10 = AVE_Log_CheckConsole(3u);
        __uint64_t v11 = AVE_GetCurrTime();
        __uint64_t v12 = AVE_Log_GetLevelStr(4);
        if (v10)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: H264VideoEncoderVA_DriverEncodeCompleteFrames failed.\n", v11, 3, v12, "AVE_HEVCCompleteFrames", 13118, "err == noErr");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: H264VideoEncoderVA_DriverEncodeCompleteFrames failed.");
      }
LABEL_24:
      uint64_t v25 = 4294954384;
      goto LABEL_25;
    }
  }
  if (*(_DWORD *)(DerivedStorage + 183512))
  {
    *(void *)(DerivedStorage + 183528) = AVE_GetCurrTime();
    if (AVE_Log_CheckLevel(0x18u, 6))
    {
      int v13 = AVE_Log_CheckConsole(0x18u);
      __uint64_t v14 = AVE_GetCurrTime();
      int v15 = AVE_Log_GetLevelStr(6);
      int v16 = *(_DWORD *)(DerivedStorage + 183572);
      uint64_t v17 = *(void *)(DerivedStorage + 183528) - *(void *)(DerivedStorage + 183520);
      if (v13)
      {
        printf("%lld %d AVE %s: FIG: %d (%d) Complete took %lld us\n", v14, 24, v15, v16, *(_DWORD *)(DerivedStorage + 183444) - 1, v17);
        __uint64_t v18 = AVE_GetCurrTime();
        __uint64_t v19 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) Complete took %lld us", v18, 24, v19, *(_DWORD *)(DerivedStorage + 183572), *(_DWORD *)(DerivedStorage + 183444) - 1, *(void *)(DerivedStorage + 183528) - *(void *)(DerivedStorage + 183520));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) Complete took %lld us", v14, 24, v15, v16, *(_DWORD *)(DerivedStorage + 183444) - 1, v17);
      }
    }
  }
  uint64_t v23 = *(void *)(DerivedStorage + 183648);
  __uint64_t v24 = AVE_GetCurrTime();
  AVE_TimeStats_AddEndTime(v23, 6u, v24);
  uint64_t v25 = 0;
LABEL_25:
  kdebug_trace();
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 183448));
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v26 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v27 = AVE_GetCurrTime();
    __uint64_t v28 = AVE_Log_GetLevelStr(7);
    if (v26)
    {
      printf("%lld %d AVE %s: Exit %s %p %d\n", v27, 20, v28, "AVE_HEVCCompleteFrames", a1, v25);
      __uint64_t v29 = AVE_GetCurrTime();
      __uint64_t v32 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v29, 20, v32, "AVE_HEVCCompleteFrames", a1, v25);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v27, 20, v28, "AVE_HEVCCompleteFrames", a1, v25);
    }
  }
  return v25;
}

uint64_t AVE_HEVCCopySupportedPropertyDictionary(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    int v4 = (CFTypeRef *)(DerivedStorage + 183552);
    uint64_t v5 = (unsigned char *)(DerivedStorage + 18849);
    if (AVE_Log_CheckLevel(0x1Eu, 8))
    {
      int v6 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(8);
      if (v6)
      {
        printf("%lld %d AVE %s: FIG: ENTER AVE_HEVCCopySupportedPropertyDictionary\n", CurrTime, 30, LevelStr);
        __uint64_t v9 = AVE_GetCurrTime();
        int v36 = AVE_Log_GetLevelStr(8);
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCCopySupportedPropertyDictionary", v9, 30, v36);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCCopySupportedPropertyDictionary", CurrTime, 30, LevelStr);
      }
    }
    if (*v5)
    {
      CFTypeRef v14 = v4[17];
      if (v14)
      {
        CFIndex v15 = CFGetRetainCount(v14);
        if (v15 != 1)
        {
          int v16 = v15;
          if (AVE_Log_CheckLevel(0x1Eu, 5))
          {
            int v17 = AVE_Log_CheckConsole(0x1Eu);
            __uint64_t v18 = AVE_GetCurrTime();
            __uint64_t v19 = AVE_Log_GetLevelStr(5);
            if (v17)
            {
              int v20 = v16;
              printf("%lld %d AVE %s: FIG: count for supportedPropertyDictionaryHEIF = %d\n", v18, 30, v19, v16);
              __uint64_t v21 = AVE_GetCurrTime();
              int v38 = AVE_Log_GetLevelStr(5);
              syslog(3, "%lld %d AVE %s: FIG: count for supportedPropertyDictionaryHEIF = %d", v21, 30, v38, v20);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: count for supportedPropertyDictionaryHEIF = %d", v18, 30, v19, v16);
            }
          }
        }
        CFRetain(v4[17]);
        CFTypeRef v29 = v4[17];
        goto LABEL_27;
      }
    }
    else if (*v4)
    {
      CFIndex v22 = CFGetRetainCount(*v4);
      if (v22 != 1)
      {
        int v23 = v22;
        if (AVE_Log_CheckLevel(0x1Eu, 5))
        {
          int v24 = AVE_Log_CheckConsole(0x1Eu);
          __uint64_t v25 = AVE_GetCurrTime();
          int v26 = AVE_Log_GetLevelStr(5);
          if (v24)
          {
            int v27 = v23;
            printf("%lld %d AVE %s: FIG: count for supportedPropertyDictionary = %d\n", v25, 30, v26, v23);
            __uint64_t v28 = AVE_GetCurrTime();
            int v39 = AVE_Log_GetLevelStr(5);
            syslog(3, "%lld %d AVE %s: FIG: count for supportedPropertyDictionary = %d", v28, 30, v39, v27);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: count for supportedPropertyDictionary = %d", v25, 30, v26, v23);
          }
        }
      }
      CFRetain(*v4);
      CFTypeRef v29 = *v4;
      goto LABEL_27;
    }
    CFTypeRef v29 = 0;
LABEL_27:
    uint64_t v30 = 0;
    *a2 = v29;
    goto LABEL_28;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    int v10 = AVE_Log_CheckConsole(3u);
    __uint64_t v11 = AVE_GetCurrTime();
    __uint64_t v12 = AVE_Log_GetLevelStr(4);
    if (v10)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v11, 3, v12, "AVE_HEVCCopySupportedPropertyDictionary", 13181, "encoderPrivateStorage");
      __uint64_t v13 = AVE_GetCurrTime();
      unsigned int v37 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v13, 3, v37, "AVE_HEVCCopySupportedPropertyDictionary", 13181, "encoderPrivateStorage");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v11, 3, v12, "AVE_HEVCCopySupportedPropertyDictionary", 13181, "encoderPrivateStorage");
    }
  }
  uint64_t v30 = 4294954384;
LABEL_28:
  if (AVE_Log_CheckLevel(0x1Eu, 8))
  {
    int v31 = AVE_Log_CheckConsole(0x1Eu);
    __uint64_t v32 = AVE_GetCurrTime();
    __uint64_t v33 = AVE_Log_GetLevelStr(8);
    if (v31)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_HEVCCopySupportedPropertyDictionary err %d \n", v32, 30, v33, v30);
      __uint64_t v34 = AVE_GetCurrTime();
      __uint64_t v40 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_HEVCCopySupportedPropertyDictionary err %d ", v34, 30, v40, v30);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_HEVCCopySupportedPropertyDictionary err %d ", v32, 30, v33, v30);
    }
  }
  return v30;
}

uint64_t AVE_HEVCSetProperties(uint64_t a1, const __CFDictionary *a2)
{
  v45[133] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = DerivedStorage;
  if (DerivedStorage)
  {
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
    if (AVE_Log_CheckLevel(0x1Eu, 8))
    {
      int v5 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(8);
      if (v5)
      {
        printf("%lld %d AVE %s: FIG: ENTER %s\n", CurrTime, 30, LevelStr, "AVE_HEVCSetProperties");
        __uint64_t v8 = AVE_GetCurrTime();
        int v41 = AVE_Log_GetLevelStr(8);
        syslog(3, "%lld %d AVE %s: FIG: ENTER %s", v8, 30, v41, "AVE_HEVCSetProperties");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: ENTER %s", CurrTime, 30, LevelStr, "AVE_HEVCSetProperties");
      }
    }
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(a2))
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      v45[0] = *MEMORY[0x1E4F449C8];
      v45[1] = @"StrictKeyFrameInterval";
      uint64_t v16 = *MEMORY[0x1E4F447E8];
      v45[2] = *MEMORY[0x1E4F447D0];
      v45[3] = v16;
      uint64_t v17 = *MEMORY[0x1E4F44AA0];
      v45[4] = *MEMORY[0x1E4F44810];
      v45[5] = v17;
      uint64_t v18 = *MEMORY[0x1E4F44B18];
      v45[6] = @"EnableWeightedPrediction";
      v45[7] = v18;
      v45[8] = *MEMORY[0x1E4F448F0];
      v45[9] = @"MaximumRealTimeFrameRate";
      uint64_t v19 = *MEMORY[0x1E4F44888];
      v45[10] = *MEMORY[0x1E4F44898];
      v45[11] = v19;
      uint64_t v20 = *MEMORY[0x1E4F44868];
      v45[12] = *MEMORY[0x1E4F44910];
      v45[13] = v20;
      uint64_t v21 = *MEMORY[0x1E4F44BB0];
      v45[14] = *MEMORY[0x1E4F44B58];
      v45[15] = v21;
      uint64_t v22 = *MEMORY[0x1E4F448E8];
      v45[16] = *MEMORY[0x1E4F44A60];
      v45[17] = v22;
      v45[18] = *MEMORY[0x1E4F449D0];
      v45[19] = @"StrictKeyFrameIntervalDuration";
      uint64_t v23 = *MEMORY[0x1E4F44B40];
      v45[20] = *MEMORY[0x1E4F44B68];
      v45[21] = v23;
      v45[22] = @"BPictures";
      v45[23] = @"AllowOpenGOP";
      v45[24] = @"LookAheadFrames";
      v45[25] = @"PreemptiveLoadBalancing";
      v45[26] = @"SpatialAdaptiveQPLevel";
      v45[27] = @"InitialQPI";
      v45[28] = @"InitialQPP";
      v45[29] = @"InitialQPB";
      uint64_t v24 = *MEMORY[0x1E4F44A98];
      v45[30] = *MEMORY[0x1E4F44A30];
      v45[31] = v24;
      v45[32] = @"DeblockingFiltering";
      v45[33] = @"DebugMetadataSEI";
      uint64_t v25 = *MEMORY[0x1E4F44988];
      v45[34] = @"DebugMetadataSEIuseEPB";
      v45[35] = v25;
      v45[36] = *MEMORY[0x1E4F44B38];
      v45[37] = @"LatencyMode";
      uint64_t v26 = *MEMORY[0x1E4F44818];
      v45[38] = @"MCTFStrengthLevel";
      v45[39] = v26;
      uint64_t v27 = *MEMORY[0x1E4F44B70];
      v45[40] = @"EnableUserQPForFacetime";
      v45[41] = v27;
      v45[42] = @"DPBRequirements";
      v45[43] = @"EnableUserRefForFacetime";
      uint64_t v28 = *MEMORY[0x1E4F44B80];
      v45[44] = *MEMORY[0x1E4F44AC0];
      v45[45] = v28;
      v45[46] = @"EnableStatsCollect";
      v45[47] = @"EnableMultiReferenceP";
      v45[48] = @"MultiReferencePSpacing";
      v45[49] = @"log2_max_minus4";
      uint64_t v29 = *MEMORY[0x1E4F44980];
      v45[50] = *MEMORY[0x1E4F44A48];
      v45[51] = v29;
      v45[52] = *MEMORY[0x1E4F44A58];
      v45[53] = @"CodedBuffersOverride";
      v45[54] = @"EnableMBInputCtrl";
      v45[55] = @"UserRPSForFaceTime";
      uint64_t v30 = *MEMORY[0x1E4F44B98];
      v45[56] = *MEMORY[0x1E4F44B90];
      v45[57] = v30;
      v45[58] = @"ChromaQPIndexOffsetMultiPPS";
      v45[59] = @"iChatUsageString";
      v45[60] = @"UseReferenceCompressedBuffers";
      v45[61] = @"ChromaQpOffset";
      v45[62] = @"EnableHdrPqRC";
      v45[63] = @"ForceRefUncompressed";
      v45[64] = @"BaseLayerFrameRate";
      v45[65] = *MEMORY[0x1E4F44AB8];
      v45[66] = *MEMORY[0x1E4F44BC0];
      v45[67] = *MEMORY[0x1E4F44BB8];
      v45[68] = *MEMORY[0x1E4F449B8];
      v45[69] = *MEMORY[0x1E4F449E0];
      v45[70] = *MEMORY[0x1E4F44AB0];
      v45[71] = *MEMORY[0x1E4F448B8];
      v45[72] = @"EnableRCFW";
      v45[73] = @"EnableRCDriver";
      v45[74] = @"RCMode";
      v45[75] = @"SetDbgInternalParams";
      v45[76] = @"ForceSliceRPS";
      v45[77] = @"EdgeReplication";
      v45[78] = @"UseHWTileOffsets";
      v45[79] = *MEMORY[0x1E4F449C0];
      v45[80] = @"MaximizePowerEfficiency";
      v45[81] = @"RelaxAverageBitRateTarget";
      v45[82] = @"IntraRefreshFrames";
      v45[83] = @"AllocCodedBufferHalfSize";
      v45[84] = *MEMORY[0x1E4F449B0];
      v45[85] = *MEMORY[0x1E4F44880];
      v45[86] = *MEMORY[0x1E4F448D0];
      v45[87] = @"RequiredHEVCVideoParameterSetRepFormatBitDepths";
      v45[88] = @"RequiredHEVCVideoParameterSetRepFormatChromaFormatIdcs";
      v45[89] = @"RequiredHEVCSequenceParameterSetRepFormatIndex";
      v45[90] = @"EnableTimingInfoMetadata";
      v45[91] = @"EnableContentColourVolumeSEI";
      v45[92] = *MEMORY[0x1E4F44AF8];
      v45[93] = @"DroppablePFramesOnly";
      v45[94] = *MEMORY[0x1E4F449F8];
      v45[95] = @"SVEMap";
      v45[96] = @"SVENum";
      v45[97] = @"SVESchedMode";
      v45[98] = @"DLBType";
      v45[99] = @"CmdTimeOutMode";
      v45[100] = @"RCFeatureOn";
      v45[101] = @"RCFeatureOff";
      v45[102] = *MEMORY[0x1E4F44990];
      v45[103] = *MEMORY[0x1E4F44A90];
      v45[104] = @"lrmeRCPassNum";
      v45[105] = @"EncodesDisparity";
      v45[106] = @"EncodesDepth";
      v45[107] = *MEMORY[0x1E4F44A10];
      v45[108] = @"EnableVUI";
      v45[109] = @"EnableVUIBitstreamRestriction";
      v45[110] = @"EnableMultiSliceStats";
      v45[111] = @"SessionName";
      v45[112] = *MEMORY[0x1E4F449A0];
      v45[113] = *MEMORY[0x1E4F449A8];
      v45[114] = *MEMORY[0x1E4F44998];
      v45[115] = *MEMORY[0x1E4F44B00];
      v45[116] = *MEMORY[0x1E4F44B08];
      v45[117] = *MEMORY[0x1E4F44B10];
      v45[118] = @"EncoderEncryptionData";
      v45[119] = *MEMORY[0x1E4F44878];
      v45[120] = @"VariableBitRate";
      v45[121] = *MEMORY[0x1E4F44A00];
      v45[122] = *MEMORY[0x1E4F44A08];
      v45[123] = @"RecommendedParallelizationLimit";
      v45[124] = @"RecommendedParallelizedSubdivisionMinimumDuration";
      v45[125] = @"RecommendedParallelizedSubdivisionMinimumFrameCount";
      v45[126] = @"ReconstructedPixelBufferAttributes";
      v45[127] = @"ReconstructedPixelBuffer";
      v45[128] = @"MotionEstimationSearchMode";
      v45[129] = @"SupportedMotionSearchModes";
      v45[130] = *MEMORY[0x1E4F44A50];
      v45[131] = @"CalculateMeanSquaredError";
      v45[132] = @"DebugFeature";
      do
      {
        int v31 = (const void *)v45[v14];
        if (CFDictionaryContainsKey(a2, v31))
        {
          CFDictionaryGetValue(a2, v31);
          uint64_t v15 = AVE_SetProperty_internal(v4, v31);
        }
        ++v14;
      }
      while (v14 != 133);
    }
    else
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v32 = AVE_Log_CheckConsole(3u);
        __uint64_t v33 = AVE_GetCurrTime();
        __uint64_t v34 = AVE_Log_GetLevelStr(4);
        if (v32)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryGetTypeID failed\n", v33, 3, v34, "AVE_HEVCSetProperties", 15467, "CFDictionaryGetTypeID() == CFGetTypeID( propertyDictionary)");
          __uint64_t v35 = AVE_GetCurrTime();
          int v43 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryGetTypeID failed", v35, 3, v43, "AVE_HEVCSetProperties", 15467, "CFDictionaryGetTypeID() == CFGetTypeID( propertyDictionary)");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryGetTypeID failed", v33, 3, v34, "AVE_HEVCSetProperties", 15467, "CFDictionaryGetTypeID() == CFGetTypeID( propertyDictionary)");
        }
      }
      uint64_t v15 = 4294954394;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v9 = AVE_Log_CheckConsole(3u);
      __uint64_t v10 = AVE_GetCurrTime();
      __uint64_t v11 = AVE_Log_GetLevelStr(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v10, 3, v11, "AVE_HEVCSetProperties", 15462, "encoderPrivateStorage");
        __uint64_t v12 = AVE_GetCurrTime();
        __uint64_t v42 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v12, 3, v42, "AVE_HEVCSetProperties", 15462, "encoderPrivateStorage");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v10, 3, v11, "AVE_HEVCSetProperties", 15462, "encoderPrivateStorage");
      }
    }
    uint64_t v15 = 4294954384;
  }
  if (AVE_Log_CheckLevel(0x1Eu, 8))
  {
    int v36 = AVE_Log_CheckConsole(0x1Eu);
    __uint64_t v37 = AVE_GetCurrTime();
    int v38 = AVE_Log_GetLevelStr(8);
    if (v36)
    {
      printf("%lld %d AVE %s: FIG: EXIT %s err %d \n", v37, 30, v38, "AVE_HEVCSetProperties", v15);
      __uint64_t v39 = AVE_GetCurrTime();
      int v44 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: FIG: EXIT %s err %d ", v39, 30, v44, "AVE_HEVCSetProperties", v15);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT %s err %d ", v37, 30, v38, "AVE_HEVCSetProperties", v15);
    }
  }
  if (v4) {
    pthread_mutex_unlock((pthread_mutex_t *)(v4 + 183448));
  }
  return v15;
}

uint64_t AVE_HEVCPrepareToEncodeFrames()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = DerivedStorage;
  int v2 = (unsigned int *)(DerivedStorage + 183440);
  if (!DerivedStorage)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v7 = AVE_Log_CheckConsole(3u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", CurrTime, 3, LevelStr, "AVE_HEVCPrepareToEncodeFrames", 15652, "encoderPrivateStorage");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.");
    }
    goto LABEL_24;
  }
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v3 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v4 = AVE_GetCurrTime();
    int v5 = AVE_Log_GetLevelStr(7);
    if (v3)
    {
      printf("%lld %d AVE %s: AVE ENTER AVE_HEVCPrepareToEncodeFrames\n", v4, 20, v5);
      __uint64_t v6 = AVE_GetCurrTime();
      __uint64_t v42 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AVE ENTER AVE_HEVCPrepareToEncodeFrames", v6, 20, v42);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AVE ENTER AVE_HEVCPrepareToEncodeFrames", v4, 20, v5);
    }
  }
  uint64_t v10 = *((void *)v2 + 26);
  __uint64_t v11 = AVE_GetCurrTime();
  AVE_TimeStats_AddStartTime(v10, 2u, v11);
  kdebug_trace();
  if (v2[18]) {
    *((void *)v2 + 10) = AVE_GetCurrTime();
  }
  AVE_GetCurrTime();
  if (*v2 != 30566)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v18 = AVE_Log_CheckConsole(3u);
      __uint64_t v19 = AVE_GetCurrTime();
      uint64_t v20 = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_H264PrepareToEncodeFrames with encoderPrivateStorage->SessionStatus %x.\n", v19, 3, v20, "AVE_HEVCPrepareToEncodeFrames", 15717, "false", *v2);
        __uint64_t v19 = AVE_GetCurrTime();
        uint64_t v20 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_H264PrepareToEncodeFrames with encoderPrivateStorage->SessionStatus %x.", v19, 3, v20, "AVE_HEVCPrepareToEncodeFrames", 15717, "false", *v2);
    }
    goto LABEL_24;
  }
  uint64_t v12 = AVE_ManageSessionSettings(v1);
  if (v12)
  {
    uint64_t v13 = v12;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v14 = AVE_Log_CheckConsole(3u);
      __uint64_t v15 = AVE_GetCurrTime();
      uint64_t v16 = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed\n", v15, 3, v16, "AVE_HEVCPrepareToEncodeFrames", 15675, "err == noErr");
        __uint64_t v17 = AVE_GetCurrTime();
        int v43 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed", v17, 3, v43, "AVE_HEVCPrepareToEncodeFrames", 15675, "err == noErr");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed", v15, 3, v16, "AVE_HEVCPrepareToEncodeFrames", 15675, "err == noErr");
      }
    }
    goto LABEL_25;
  }
  *(_DWORD *)(v1 + 18672) = 1;
  if (AVE_Log_CheckLevel(0x1Eu, 6))
  {
    int v21 = AVE_Log_CheckConsole(0x1Eu);
    __uint64_t v22 = AVE_GetCurrTime();
    uint64_t v23 = AVE_Log_GetLevelStr(6);
    if (v21)
    {
      printf("%lld %d AVE %s: FIG: received PrepareToEncodeFrames\n", v22, 30, v23);
      __uint64_t v24 = AVE_GetCurrTime();
      int v44 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: FIG: received PrepareToEncodeFrames", v24, 30, v44);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: received PrepareToEncodeFrames", v22, 30, v23);
    }
  }
  if (AVE_USL_Drv_Prepare())
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v30 = AVE_Log_CheckConsole(3u);
      __uint64_t v31 = AVE_GetCurrTime();
      int v32 = AVE_Log_GetLevelStr(4);
      if (v30)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Prepare failed.\n", v31, 3, v32, "AVE_HEVCPrepareToEncodeFrames", 15709, "err == noErr");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Prepare failed.");
    }
LABEL_24:
    uint64_t v13 = 4294954384;
    goto LABEL_25;
  }
  *int v2 = 30567;
  if (v2[18])
  {
    *((void *)v2 + 11) = AVE_GetCurrTime();
    if (AVE_Log_CheckLevel(0x18u, 6))
    {
      int v33 = AVE_Log_CheckConsole(0x18u);
      __uint64_t v34 = AVE_GetCurrTime();
      __uint64_t v35 = AVE_Log_GetLevelStr(6);
      unsigned int v36 = v2[33];
      uint64_t v37 = *((void *)v2 + 11) - *((void *)v2 + 10);
      if (v33)
      {
        printf("%lld %d AVE %s: FIG: %d (%d) AVE_HEVCPrepareToEncodeFrames took %lld us\n", v34, 24, v35, v36, 0, v37);
        __uint64_t v38 = AVE_GetCurrTime();
        __uint64_t v39 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_HEVCPrepareToEncodeFrames took %lld us", v38, 24, v39, v2[33], 0, *((void *)v2 + 11) - *((void *)v2 + 10));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_HEVCPrepareToEncodeFrames took %lld us", v34, 24, v35, v36, 0, v37);
      }
    }
  }
  uint64_t v40 = *((void *)v2 + 26);
  __uint64_t v41 = AVE_GetCurrTime();
  AVE_TimeStats_AddEndTime(v40, 2u, v41);
  uint64_t v13 = 0;
LABEL_25:
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v25 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v26 = AVE_GetCurrTime();
    uint64_t v27 = AVE_Log_GetLevelStr(7);
    if (v25)
    {
      printf("%lld %d AVE %s: AVE EXIT AVE_HEVCPrepareToEncodeFrames err = 0x%08x\n", v26, 20, v27, v13);
      __uint64_t v28 = AVE_GetCurrTime();
      __uint64_t v45 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AVE EXIT AVE_HEVCPrepareToEncodeFrames err = 0x%08x", v28, 20, v45, v13);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AVE EXIT AVE_HEVCPrepareToEncodeFrames err = 0x%08x", v26, 20, v27, v13);
    }
  }
  kdebug_trace();
  pthread_mutex_unlock((pthread_mutex_t *)(v1 + 183448));
  return v13;
}

uint64_t AVE_HEVCBeginPass(const void *a1, int a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    int v7 = AVE_Log_CheckConsole(0x14u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v7)
    {
      printf("%lld %d AVE %s: Enter %s %p 0x%x %p\n", CurrTime, 20, LevelStr, "AVE_HEVCBeginPass", a1, a2, a3);
      __uint64_t CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: Enter %s %p 0x%x %p", CurrTime);
  }
  if (DerivedStorage)
  {
    uint64_t v10 = (_DWORD *)(DerivedStorage + 183440);
    __uint64_t v11 = (pthread_mutex_t *)(DerivedStorage + 183448);
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
    if (AVE_Log_CheckLevel(0xD8u, 7))
    {
      int v12 = AVE_Log_CheckConsole(0xD8u);
      __uint64_t v13 = AVE_GetCurrTime();
      int v14 = AVE_Log_GetLevelStr(7);
      int v15 = *(_DWORD *)(DerivedStorage + 183596);
      if (v12)
      {
        printf("%lld %d AVE %s: AVE FIG AVE_BeginPass called. beginPassFlags = %d (begin %d end %d)\n", v13, 216, v14, a2, *(_DWORD *)(DerivedStorage + 183592), v15);
        __uint64_t v16 = AVE_GetCurrTime();
        __uint64_t v17 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AVE FIG AVE_BeginPass called. beginPassFlags = %d (begin %d end %d)", v16, 216, v17, a2, *(_DWORD *)(DerivedStorage + 183592), *(_DWORD *)(DerivedStorage + 183596));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AVE FIG AVE_BeginPass called. beginPassFlags = %d (begin %d end %d)", v13, 216, v14, a2, *(_DWORD *)(DerivedStorage + 183592), v15);
      }
    }
    if (!*(void *)(DerivedStorage + 183584))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v27 = AVE_Log_CheckConsole(3u);
        __uint64_t v28 = AVE_GetCurrTime();
        uint64_t v29 = AVE_Log_GetLevelStr(4);
        if (v27)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_BeginPass called with multiPassStorage = NULL.\n", v28, 3, v29, "AVE_HEVCBeginPass", 11779, "encoderPrivateStorage->multiPassStorage != __null");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_BeginPass called with multiPassStorage = NULL.");
      }
      goto LABEL_44;
    }
    int v22 = *(_DWORD *)(DerivedStorage + 183592);
    if (v22 != *(_DWORD *)(DerivedStorage + 183596))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v30 = AVE_Log_CheckConsole(3u);
        __uint64_t v31 = AVE_GetCurrTime();
        int v32 = AVE_Log_GetLevelStr(4);
        if (v30)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_BeginPass called with multiPassBeginPassCounter = %d, multiPassEndPassCounter = %d\n", v31, 3, v32, "AVE_HEVCBeginPass", 11780, "encoderPrivateStorage->multiPassBeginPassCounter == encoderPrivateStorage->multiPassEndPassCounter", v10[38], v10[39]);
          __uint64_t v31 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_BeginPass called with multiPassBeginPassCounter = %d, multiPassEndPassCounter = %d", v31);
      }
      goto LABEL_44;
    }
    if (v22)
    {
      unsigned int v23 = v22 + 1;
      *(_DWORD *)(DerivedStorage + 183592) = v23;
      if (v23 >= 3)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v24 = AVE_Log_CheckConsole(3u);
          __uint64_t v25 = AVE_GetCurrTime();
          __uint64_t v26 = AVE_Log_GetLevelStr(4);
          if (v24)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: encoderPrivateStorage->multiPassBeginPassCounter reached max %d\n", v25, 3, v26, "AVE_HEVCBeginPass", 11789, "false", v10[38]);
            __uint64_t v25 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: encoderPrivateStorage->multiPassBeginPassCounter reached max %d", v25);
        }
LABEL_44:
        uint64_t v33 = 4294954394;
LABEL_45:
        pthread_mutex_unlock(v11);
        goto LABEL_46;
      }
    }
    else
    {
      if (*v10 == 30568)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v34 = AVE_Log_CheckConsole(3u);
          __uint64_t v35 = AVE_GetCurrTime();
          unsigned int v36 = AVE_Log_GetLevelStr(4);
          if (v34)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_BeginPass called with SessionStatus == AVE_CommonWrapper_SessionStatus_Run\n", v35, 3, v36, "AVE_HEVCBeginPass", 11783, "encoderPrivateStorage->SessionStatus != AVE_CommonWrapper_SessionStatus_Run");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_BeginPass called with SessionStatus == AVE_CommonWrapper_SessionStatus_Run");
        }
        goto LABEL_44;
      }
      unsigned int v23 = 1;
      *(_DWORD *)(DerivedStorage + 183592) = 1;
    }
    *(_DWORD *)(DerivedStorage + 18400) = v23;
    *(_DWORD *)(DerivedStorage + 183600) = a2;
    if (AVE_Log_CheckLevel(0xD8u, 7))
    {
      int v37 = AVE_Log_CheckConsole(0xD8u);
      __uint64_t v38 = AVE_GetCurrTime();
      __uint64_t v39 = AVE_Log_GetLevelStr(7);
      int v40 = v10[38];
      if (v37)
      {
        printf("%lld %d AVE %s: AVE FIG AVE_BeginPass encoderPrivateStorage->multiPassBeginPassCounter = %d\n", v38, 216, v39, v40);
        __uint64_t v41 = AVE_GetCurrTime();
        __uint64_t v48 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AVE FIG AVE_BeginPass encoderPrivateStorage->multiPassBeginPassCounter = %d", v41, 216, v48, v10[38]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AVE FIG AVE_BeginPass encoderPrivateStorage->multiPassBeginPassCounter = %d", v38, 216, v39, v40);
      }
    }
    uint64_t v33 = 0;
    goto LABEL_45;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    int v18 = AVE_Log_CheckConsole(3u);
    __uint64_t v19 = AVE_GetCurrTime();
    uint64_t v20 = AVE_Log_GetLevelStr(4);
    if (v18)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v19, 3, v20, "AVE_HEVCBeginPass", 11771, "encoderPrivateStorage");
      __uint64_t v21 = AVE_GetCurrTime();
      uint64_t v47 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v21, 3, v47, "AVE_HEVCBeginPass", 11771, "encoderPrivateStorage");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v19, 3, v20, "AVE_HEVCBeginPass", 11771, "encoderPrivateStorage");
    }
  }
  uint64_t v33 = 4294954384;
LABEL_46:
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    int v42 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v43 = AVE_GetCurrTime();
    int v44 = AVE_Log_GetLevelStr(6);
    if (v42)
    {
      printf("%lld %d AVE %s: Exit %s %p 0x%x %p %d\n", v43, 20, v44, "AVE_HEVCBeginPass", a1, a2, a3, v33);
      __uint64_t v45 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: Exit %s %p 0x%x %p %d", v45, 20);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p 0x%x %p %d", v43, 20);
    }
  }
  return v33;
}

uint64_t AVE_HEVCEndPass(const void *a1, unsigned char *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    int v7 = AVE_Log_CheckConsole(0x14u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v7)
    {
      printf("%lld %d AVE %s: Enter %s %p %p %p\n", CurrTime, 20, LevelStr, "AVE_HEVCEndPass", a1, a2, a3);
      __uint64_t CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: Enter %s %p %p %p", CurrTime);
  }
  if (DerivedStorage)
  {
    uint64_t v10 = (_DWORD *)(DerivedStorage + 183440);
    __uint64_t v11 = (pthread_mutex_t *)(DerivedStorage + 183448);
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
    if (AVE_Log_CheckLevel(0xD8u, 7))
    {
      int v12 = AVE_Log_CheckConsole(0xD8u);
      __uint64_t v13 = AVE_GetCurrTime();
      int v14 = AVE_Log_GetLevelStr(7);
      if (v12)
      {
        printf("%lld %d AVE %s: FIG: ENTER %s. beginPassFlags %d (begin %d end %d)\n", v13, 216, v14, "AVE_HEVCEndPass", *(_DWORD *)(DerivedStorage + 183600), *(_DWORD *)(DerivedStorage + 183592), *(_DWORD *)(DerivedStorage + 183596));
        __uint64_t v13 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(7);
      }
      syslog(3, "%lld %d AVE %s: FIG: ENTER %s. beginPassFlags %d (begin %d end %d)", v13);
    }
    if (*v10 != 30568)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v29 = AVE_Log_CheckConsole(3u);
        __uint64_t v30 = AVE_GetCurrTime();
        __uint64_t v31 = AVE_Log_GetLevelStr(4);
        if (v29)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_EndPass called with SessionStatus != AVE_CommonWrapper_SessionStatus_Run\n", v30, 3, v31, "AVE_HEVCEndPass", 11836, "encoderPrivateStorage->SessionStatus == AVE_CommonWrapper_SessionStatus_Run");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_EndPass called with SessionStatus != AVE_CommonWrapper_SessionStatus_Run");
      }
      goto LABEL_46;
    }
    if (!*(void *)(DerivedStorage + 183584))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v32 = AVE_Log_CheckConsole(3u);
        __uint64_t v33 = AVE_GetCurrTime();
        int v34 = AVE_Log_GetLevelStr(4);
        if (v32)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: called with multiPassStorage = NULL.\n", v33, 3, v34, "AVE_HEVCEndPass", 11838, "encoderPrivateStorage->multiPassStorage != __null");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: called with multiPassStorage = NULL.");
      }
      goto LABEL_46;
    }
    int v19 = *(_DWORD *)(DerivedStorage + 183592);
    int v20 = *(_DWORD *)(DerivedStorage + 183596);
    if (v19 != v20 + 1)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v35 = AVE_Log_CheckConsole(3u);
        __uint64_t v36 = AVE_GetCurrTime();
        int v37 = AVE_Log_GetLevelStr(4);
        if (v35)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: called with multiPassBeginPassCounter = %d, multiPassEndPassCounter = %d\n", v36, 3, v37, "AVE_HEVCEndPass", 11844, "encoderPrivateStorage->multiPassBeginPassCounter == (encoderPrivateStorage->multiPassEndPassCounter + 1)", v10[38], v10[39]);
          __uint64_t v36 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: called with multiPassBeginPassCounter = %d, multiPassEndPassCounter = %d", v36);
      }
      goto LABEL_46;
    }
    BOOL v22 = *(_DWORD *)(DerivedStorage + 183600) != 1 && v20 == 0;
    *(_DWORD *)(DerivedStorage + 183596) = v19;
    if (a2) {
      *a2 = v22;
    }
    if (!v22)
    {
      uint64_t v38 = 0;
LABEL_47:
      pthread_mutex_unlock(v11);
      goto LABEL_48;
    }
    if (AVE_Log_CheckLevel(0xD8u, 6))
    {
      int v23 = AVE_Log_CheckConsole(0xD8u);
      __uint64_t v24 = AVE_GetCurrTime();
      __uint64_t v25 = AVE_Log_GetLevelStr(6);
      int v26 = *(_DWORD *)(DerivedStorage + 183444);
      if (v23)
      {
        printf("%lld %d AVE %s: FIG: %s furtherPassesRequested. Pass %d TotalFrames %d\n", v24, 216, v25, "AVE_HEVCEndPass", *(_DWORD *)(DerivedStorage + 183596), v26);
        __uint64_t v27 = AVE_GetCurrTime();
        __uint64_t v28 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: %s furtherPassesRequested. Pass %d TotalFrames %d", v27, 216, v28, "AVE_HEVCEndPass", *(_DWORD *)(DerivedStorage + 183596), *(_DWORD *)(DerivedStorage + 183444));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: %s furtherPassesRequested. Pass %d TotalFrames %d", v24, 216, v25, "AVE_HEVCEndPass", *(_DWORD *)(DerivedStorage + 183596), v26);
      }
    }
    AVE_FPS::Reset(*(AVE_FPS **)(DerivedStorage + 183640));
    if (AVE_USL_Drv_Reset(*(unsigned int **)(DerivedStorage + 24), *(_DWORD *)(DerivedStorage + 183596)))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v43 = AVE_Log_CheckConsole(3u);
        __uint64_t v44 = AVE_GetCurrTime();
        __uint64_t v45 = AVE_Log_GetLevelStr(4);
        if (v43)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Reset failed.\n", v44, 3, v45, "AVE_HEVCEndPass", 11881, "err == noErr");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Reset failed.");
      }
LABEL_65:
      uint64_t v38 = 4294954384;
      goto LABEL_47;
    }
    if (AVE_Log_CheckLevel(0xD8u, 7))
    {
      *(_OWORD *)&v118.start.value = *MEMORY[0x1E4F1F9F8];
      v118.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      theData.start.value = 0;
      long long v130 = *(_OWORD *)&v118.start.value;
      CMTimeEpoch epoch = v118.start.epoch;
      if (VTMultiPassStorageGetTimeStamp())
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v46 = AVE_Log_CheckConsole(3u);
          __uint64_t v47 = AVE_GetCurrTime();
          __uint64_t v48 = AVE_Log_GetLevelStr(4);
          if (v46)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStamp failed.\n", v47, 3, v48, "AVE_HEVCEndPass", 11889, "err == noErr");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStamp failed.");
        }
LABEL_46:
        uint64_t v38 = 4294954394;
        goto LABEL_47;
      }
      if ((v118.start.flags & 0x1D) == 1)
      {
        if (AVE_Log_CheckLevel(0xD8u, 7))
        {
          int v49 = AVE_Log_CheckConsole(0xD8u);
          __uint64_t v50 = AVE_GetCurrTime();
          __uint64_t v51 = AVE_Log_GetLevelStr(7);
          if (v49)
          {
            printf("%lld %d AVE %s: FIG: %s VTMultiPassStorageGetTimeStamp value %lld timescale %d flags %d\n", v50, 216, v51, "AVE_HEVCEndPass", v118.start.value, v118.start.timescale, v118.start.flags);
            __uint64_t v50 = AVE_GetCurrTime();
            __uint64_t v51 = AVE_Log_GetLevelStr(7);
          }
          syslog(3, "%lld %d AVE %s: FIG: %s VTMultiPassStorageGetTimeStamp value %lld timescale %d flags %d", v50, 216, v51, "AVE_HEVCEndPass", v118.start.value, v118.start.timescale, v118.start.flags);
        }
        long long v128 = *(_OWORD *)&v118.start.value;
        CMTimeEpoch v129 = v118.start.epoch;
        if (VTMultiPassStorageCopyDataAtTimeStamp())
        {
          if (AVE_Log_CheckLevel(3u, 4))
          {
            int v65 = AVE_Log_CheckConsole(3u);
            __uint64_t v66 = AVE_GetCurrTime();
            __uint64_t v67 = AVE_Log_GetLevelStr(4);
            if (v65)
            {
              printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp failed.\n", v66, 3, v67, "AVE_HEVCEndPass", 11902, "err == noErr");
              AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp failed.");
          }
        }
        else if (AVE_Log_CheckLevel(3u, 4))
        {
          int v68 = AVE_Log_CheckConsole(3u);
          __uint64_t v69 = AVE_GetCurrTime();
          int v70 = AVE_Log_GetLevelStr(4);
          if (v68)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp data == NULL.\n", v69, 3, v70, "AVE_HEVCEndPass", 11903, "data != __null");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp data == NULL.");
        }
        goto LABEL_46;
      }
    }
    if (*(void *)DerivedStorage != 1)
    {
      __uint64_t v52 = (long long *)MEMORY[0x1E4F1F9F8];
      CMTime v127 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      CMTime v126 = v127;
      CMTime v125 = v127;
      CFAllocatorRef v53 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      if (!Mutable)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v59 = AVE_Log_CheckConsole(3u);
          __uint64_t v60 = AVE_GetCurrTime();
          int v61 = AVE_Log_GetLevelStr(4);
          if (v59)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: CFArrayCreateMutable failed.\n", v60, 3, v61, "AVE_HEVCEndPass", 11935, "timeRangeArray != __null");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFArrayCreateMutable failed.");
        }
        goto LABEL_65;
      }
      int v55 = Mutable;
      long long v123 = *v52;
      uint64_t v124 = *((void *)v52 + 2);
      if (VTMultiPassStorageGetTimeStamp())
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v56 = AVE_Log_CheckConsole(3u);
          __uint64_t v57 = AVE_GetCurrTime();
          int v58 = AVE_Log_GetLevelStr(4);
          if (v56)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStamp kVTMultiPassStorageStep_GetFirstTimeStamp failed.\n", v57, 3, v58, "AVE_HEVCEndPass", 11938, "err == noErr");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStamp kVTMultiPassStorageStep_GetFirstTimeStamp failed.");
        }
        goto LABEL_46;
      }
      CFAllocatorRef v112 = v53;
      if (AVE_Log_CheckLevel(0xD8u, 7))
      {
        int v62 = AVE_Log_CheckConsole(0xD8u);
        __uint64_t v63 = AVE_GetCurrTime();
        __uint64_t v64 = AVE_Log_GetLevelStr(7);
        if (v62)
        {
          printf("%lld %d AVE %s: %s firstTimeInTimeRange value %lld timescale %d flags %d\n", v63, 216, v64, "AVE_HEVCEndPass", v127.value, v127.timescale, v127.flags);
          __uint64_t v63 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(7);
        }
        syslog(3, "%lld %d AVE %s: %s firstTimeInTimeRange value %lld timescale %d flags %d", v63);
        CFAllocatorRef v53 = v112;
      }
      long long v121 = *v52;
      uint64_t v122 = *((void *)v52 + 2);
      if (VTMultiPassStorageGetTimeStampAndDuration())
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v71 = AVE_Log_CheckConsole(3u);
          __uint64_t v72 = AVE_GetCurrTime();
          int v73 = AVE_Log_GetLevelStr(4);
          if (v71)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStampAndDuration kVTMultiPassStorageStep_GetLastTimeStamp failed.\n", v72, 3, v73, "AVE_HEVCEndPass", 11954, "err == noErr");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStampAndDuration kVTMultiPassStorageStep_GetLastTimeStamp failed.");
        }
        goto LABEL_46;
      }
      if (AVE_Log_CheckLevel(0xD8u, 7))
      {
        int v74 = AVE_Log_CheckConsole(0xD8u);
        __uint64_t v75 = AVE_GetCurrTime();
        int v76 = AVE_Log_GetLevelStr(7);
        if (v74)
        {
          printf("%lld %d AVE %s: %s lastTimeInTimeRange value %lld timescale %d flags %d\n", v75, 216, v76, "AVE_HEVCEndPass", v126.value, v126.timescale, v126.flags);
          __uint64_t v75 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(7);
        }
        syslog(3, "%lld %d AVE %s: %s lastTimeInTimeRange value %lld timescale %d flags %d", v75);
        CFAllocatorRef v53 = v112;
      }
      if (AVE_Log_CheckLevel(0xD8u, 7))
      {
        int v77 = AVE_Log_CheckConsole(0xD8u);
        __uint64_t v78 = AVE_GetCurrTime();
        int v79 = AVE_Log_GetLevelStr(7);
        if (v77)
        {
          printf("%lld %d AVE %s: %s duration value %lld timescale %d flags %d\n", v78, 216, v79, "AVE_HEVCEndPass", v125.value, v125.timescale, v125.flags);
          __uint64_t v78 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(7);
        }
        syslog(3, "%lld %d AVE %s: %s duration value %lld timescale %d flags %d", v78);
        CFAllocatorRef v53 = v112;
      }
      CMTime lhs = v126;
      CMTime rhs = v125;
      CMTimeAdd(&v118.start, &lhs, &rhs);
      CMTime v126 = v118.start;
      if (AVE_Log_CheckLevel(0xD8u, 7))
      {
        int v80 = AVE_Log_CheckConsole(0xD8u);
        __uint64_t v81 = AVE_GetCurrTime();
        int v82 = AVE_Log_GetLevelStr(7);
        if (v80)
        {
          printf("%lld %d AVE %s: %s modified lastTimeInTimeRange value %lld timescale %d flags %d\n", v81, 216, v82, "AVE_HEVCEndPass", v126.value, v126.timescale, v126.flags);
          __uint64_t v81 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(7);
        }
        syslog(3, "%lld %d AVE %s: %s modified lastTimeInTimeRange value %lld timescale %d flags %d", v81);
        CFAllocatorRef v53 = v112;
      }
      if (*(_DWORD *)(DerivedStorage + 183444) <= 1u && !v126.flags)
      {
        int v83 = *(_DWORD *)(DerivedStorage + 228);
        if (v83 < 1) {
          int v83 = 30;
        }
        *(void *)&v126.timescale = *(void *)&v127.timescale;
        v126.CMTimeEpoch epoch = v127.epoch;
        v126.value = v127.value + v127.timescale / v83;
      }
      if (!v127.flags)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v87 = AVE_Log_CheckConsole(3u);
          __uint64_t v88 = AVE_GetCurrTime();
          __uint64_t v89 = AVE_Log_GetLevelStr(4);
          if (v87)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: firstTimeInTimeRange invalid.\n", v88, 3, v89, "AVE_HEVCEndPass", 11982, "firstTimeInTimeRange.flags != 0");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: firstTimeInTimeRange invalid.");
        }
        goto LABEL_46;
      }
      if (!v126.flags)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v90 = AVE_Log_CheckConsole(3u);
          __uint64_t v91 = AVE_GetCurrTime();
          __uint64_t v92 = AVE_Log_GetLevelStr(4);
          if (v90)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: lastTimeInTimeRange invalid.\n", v91, 3, v92, "AVE_HEVCEndPass", 11984, "lastTimeInTimeRange.flags != 0");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: lastTimeInTimeRange invalid.");
        }
        goto LABEL_46;
      }
      memset(&v118, 0, sizeof(v118));
      CMTime start = v127;
      CMTime end = v126;
      CMTimeRangeFromTimeToTime(&v118, &start, &end);
      if (AVE_Log_CheckLevel(0xD8u, 6))
      {
        int v84 = AVE_Log_CheckConsole(0xD8u);
        __uint64_t v85 = AVE_GetCurrTime();
        __uint64_t v86 = AVE_Log_GetLevelStr(6);
        if (v84)
        {
          printf("%lld %d AVE %s: Start %lld, %d, %d; Duration %lld, %d, %d\n",
            v85,
            216,
            v86,
            v118.start.value,
            v118.start.timescale,
            v118.start.flags,
            v118.duration.value,
            v118.duration.timescale,
            v118.duration.flags);
          __uint64_t v85 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(6);
        }
        syslog(3, "%lld %d AVE %s: Start %lld, %d, %d; Duration %lld, %d, %d", v85, 216);
        CFAllocatorRef v53 = v112;
      }
      CMTimeRange range = v118;
      CFDictionaryRef v93 = CMTimeRangeCopyAsDictionary(&range, v53);
      if (!v93)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v105 = AVE_Log_CheckConsole(3u);
          __uint64_t v106 = AVE_GetCurrTime();
          int v107 = AVE_Log_GetLevelStr(4);
          if (v105)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: CMTimeRangeCopyAsDictionary failed.\n", v106, 3, v107, "AVE_HEVCEndPass", 11993, "currentTimeRangeDictionary != __null");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CMTimeRangeCopyAsDictionary failed.");
        }
        goto LABEL_65;
      }
      CFDictionaryRef v94 = v93;
      CFArrayAppendValue(v55, v93);
      CFRelease(v94);
      CFIndex Count = CFArrayGetCount(v55);
      __uint64_t v113 = malloc_type_malloc(48 * Count, 0x1000040EED21634uLL);
      if (!v113)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v108 = AVE_Log_CheckConsole(3u);
          __uint64_t v109 = AVE_GetCurrTime();
          int v110 = AVE_Log_GetLevelStr(4);
          if (v108)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: malloc timeRanges failed.\n", v109, 3, v110, "AVE_HEVCEndPass", 12005, "timeRanges != __null");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: malloc timeRanges failed.");
        }
        goto LABEL_65;
      }
      if (Count >= 1)
      {
        CFIndex v96 = 0;
        int v97 = v113;
        do
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v55, v96);
          CMTimeRangeMakeFromDictionary(&theData, ValueAtIndex);
          long long v99 = *(_OWORD *)&theData.start.value;
          long long v100 = *(_OWORD *)&theData.duration.timescale;
          v97[1] = *(_OWORD *)&theData.start.epoch;
          v97[2] = v100;
          *int v97 = v99;
          v97 += 3;
          ++v96;
        }
        while (Count != v96);
      }
      int Pass = VTEncoderSessionSetTimeRangesForNextPass();
      free(v113);
      CFRelease(v55);
      if (Pass)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v102 = AVE_Log_CheckConsole(3u);
          __uint64_t v103 = AVE_GetCurrTime();
          __uint64_t v104 = AVE_Log_GetLevelStr(4);
          if (v102)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: VTEncoderSessionSetTimeRangesForNextPass failed.\n", v103, 3, v104, "AVE_HEVCEndPass", 12027, "err == noErr");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTEncoderSessionSetTimeRangesForNextPass failed.");
        }
        goto LABEL_46;
      }
    }
    uint64_t v38 = 0;
    v10[47] = v10[1];
    v10[1] = 0;
    goto LABEL_47;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    int v15 = AVE_Log_CheckConsole(3u);
    __uint64_t v16 = AVE_GetCurrTime();
    __uint64_t v17 = AVE_Log_GetLevelStr(4);
    if (v15)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v16, 3, v17, "AVE_HEVCEndPass", 11825, "encoderPrivateStorage");
      __uint64_t v18 = AVE_GetCurrTime();
      __uint64_t v111 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v18, 3, v111, "AVE_HEVCEndPass", 11825, "encoderPrivateStorage");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v16, 3, v17, "AVE_HEVCEndPass", 11825, "encoderPrivateStorage");
    }
  }
  uint64_t v38 = 4294954384;
LABEL_48:
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    int v39 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v40 = AVE_GetCurrTime();
    __uint64_t v41 = AVE_Log_GetLevelStr(6);
    if (v39)
    {
      printf("%lld %d AVE %s: Exit %s %p %p %p %d\n", v40, 20, v41, "AVE_HEVCEndPass", a1, a2, a3, v38);
      __uint64_t v40 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: Exit %s %p %p %p %d", v40, 20);
  }
  return v38;
}

uint64_t AVE_HEVCStartTileSession(const void *a1, const void *a2, const void *a3, unint64_t a4, const void *a5)
{
  int v6 = a4;
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = HIDWORD(a4);
  CFTypeRef v100 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = DerivedStorage + 183440;
  long long v101 = 0u;
  long long v102 = 0u;
  uint64_t v94 = DerivedStorage;
  uint64_t v96 = DerivedStorage + 183440;
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    int v11 = AVE_Log_CheckConsole(0x14u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v11)
    {
      printf("%lld %d AVE %s: Enter %s %p %p %p %dx%d %p\n", CurrTime, 20, LevelStr, "AVE_HEVCStartTileSession", a1, a2, a3, v6, v8, a5);
      __uint64_t v14 = AVE_GetCurrTime();
      __uint64_t v85 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: Enter %s %p %p %p %dx%d %p", v14, 20, v85);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Enter %s %p %p %p %dx%d %p", CurrTime, 20, LevelStr);
    }
    uint64_t v10 = DerivedStorage + 183440;
  }
  if (!DerivedStorage)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v25 = AVE_Log_CheckConsole(3u);
      __uint64_t v26 = AVE_GetCurrTime();
      __uint64_t v27 = AVE_Log_GetLevelStr(4);
      if (v25)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v26, 3, v27, "AVE_HEVCStartTileSession", 16133, "encoderPrivateStorage");
        __uint64_t v28 = AVE_GetCurrTime();
        int v87 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v28, 3, v87, "AVE_HEVCStartTileSession", 16133, "encoderPrivateStorage");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v26, 3, v27, "AVE_HEVCStartTileSession", 16133, "encoderPrivateStorage");
      }
    }
    CFMutableArrayRef Mutable = 0;
    uint64_t v39 = 4294954384;
    goto LABEL_47;
  }
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
  uint64_t v15 = *(void *)(v10 + 208);
  __uint64_t v16 = AVE_GetCurrTime();
  AVE_TimeStats_AddStartTime(v15, 3u, v16);
  kdebug_trace();
  if (*(_DWORD *)(v10 + 72)) {
    *(void *)(v10 + 80) = AVE_GetCurrTime();
  }
  if (!a1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v29 = AVE_Log_CheckConsole(3u);
      __uint64_t v30 = AVE_GetCurrTime();
      __uint64_t v31 = AVE_Log_GetLevelStr(4);
      if (v29)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: encoder NULL.\n", v30, 3, v31, "AVE_HEVCStartTileSession", 16148, "encoder");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: encoder NULL.");
    }
    goto LABEL_46;
  }
  if (!a2)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v32 = AVE_Log_CheckConsole(3u);
      __uint64_t v33 = AVE_GetCurrTime();
      int v34 = AVE_Log_GetLevelStr(4);
      if (v32)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: session NULL.\n", v33, 3, v34, "AVE_HEVCStartTileSession", 16149, "session");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: session NULL.");
    }
    goto LABEL_46;
  }
  if (v6 <= 1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v35 = AVE_Log_CheckConsole(3u);
      __uint64_t v36 = AVE_GetCurrTime();
      int v37 = AVE_Log_GetLevelStr(4);
      if (v35)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: dimensions.width (%dx%d) not supported.\n", v36, 3, v37, "AVE_HEVCStartTileSession", 16150, "tileDimensions.width >= 2", v6, v8);
        __uint64_t v36 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: dimensions.width (%dx%d) not supported.", v36);
    }
    goto LABEL_46;
  }
  if ((int)v8 <= 1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v40 = AVE_Log_CheckConsole(3u);
      __uint64_t v41 = AVE_GetCurrTime();
      int v42 = AVE_Log_GetLevelStr(4);
      if (v40)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: dimensions.height (%dx%d) not supported.\n", v41, 3, v42, "AVE_HEVCStartTileSession", 16151, "tileDimensions.height >= 2", v6, v8);
        __uint64_t v41 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: dimensions.height (%dx%d) not supported.", v41);
    }
LABEL_46:
    CFMutableArrayRef Mutable = 0;
    uint64_t v39 = 4294954394;
    goto LABEL_47;
  }
  *(void *)(DerivedStorage + 8) = a2;
  uint64_t v17 = DerivedStorage + 137925;
  uint64_t v93 = DerivedStorage + 118414;
  *(_DWORD *)(DerivedStorage + 1880) = v6;
  *(_DWORD *)(DerivedStorage + 1884) = v8;
  uint64_t v18 = DerivedStorage + 18808;
  uint64_t v19 = DerivedStorage;
  uint64_t v20 = DerivedStorage + 17884;
  *(_DWORD *)(v18 + 660) = v6;
  *(_DWORD *)(v18 + 664) = v8;
  AVE_PrepareCropParams(v19);
  *(void *)(v19 + 16) = a5;
  if (a5) {
    CFRetain(a5);
  }
  AVE_SetEncoderDefault(v94);
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v21 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v22 = AVE_GetCurrTime();
    int v23 = AVE_Log_GetLevelStr(7);
    if (v21)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_SetEncoderTileDefault\n", v22, 20, v23);
      __uint64_t v24 = AVE_GetCurrTime();
      __uint64_t v86 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetEncoderTileDefault", v24, 20, v86);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetEncoderTileDefault", v22, 20, v23);
    }
    uint64_t v10 = v96;
  }
  *(unsigned char *)(v18 + 41) = 1;
  *(unsigned char *)(v20 + 800) = 1;
  *(unsigned char *)(v18 + 52) = *(_DWORD *)(v10 + 124) > 2;
  *(_WORD *)uint64_t v17 = 257;
  *(_DWORD *)(v93 + 6) = 2;
  *(_DWORD *)(v93 + 38) = 2;
  *(_DWORD *)uint64_t v18 = 1;
  *(_DWORD *)(v94 + 1920) = 0;
  *(_DWORD *)(v94 + 1944) = 0;
  int v43 = *(_DWORD *)(v94 + 2024);
  *(_DWORD *)uint64_t v20 = 2;
  *(_DWORD *)(v20 + 52) = 7;
  *(_DWORD *)(v94 + 196) = 3;
  *(void *)(v94 + 1816) = 0x402E000000000000;
  *(void *)(v94 + 1824) = 0xF0000000FLL;
  *(_DWORD *)(v94 + 1832) = 15;
  *(_DWORD *)(v94 + 228) = 0;
  *(_DWORD *)(v94 + 2012) = -1;
  *(unsigned char *)(v94 + 244) = 1;
  *(_WORD *)(v94 + 252) = 256;
  *(unsigned char *)(v94 + 216) = 0;
  *(unsigned char *)(v94 + 251) = 1;
  *(_WORD *)(v94 + 255) = 0;
  *(unsigned char *)(v94 + 257) = 0;
  *(_DWORD *)(v94 + 246) = 1;
  *(void *)(v94 + 18784) = 0x400000000;
  *(_DWORD *)(v94 + 260) = 0;
  *(_DWORD *)(v94 + 1768) = 0;
  *(void *)(v20 + 801) = 0;
  *(_OWORD *)(v94 + 18694) = 0u;
  *(_OWORD *)(v94 + 18710) = 0u;
  *(_OWORD *)(v94 + 18726) = 0u;
  *(unsigned char *)(v94 + 18742) = 0;
  *(unsigned char *)(v17 + 669) = 1;
  *(unsigned char *)uint64_t v93 = 1;
  *(_WORD *)(v20 + 452) = 0;
  *(_DWORD *)(v94 + 2024) = v43 & 0xFFFFFFFA;
  *(void *)(v20 + 912) = 0x100000000;
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v44 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v45 = AVE_GetCurrTime();
    int v46 = AVE_Log_GetLevelStr(7);
    if (v44)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_SetEncoderTileDefault\n", v45, 20, v46);
      __uint64_t v47 = AVE_GetCurrTime();
      __uint64_t v88 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_SetEncoderTileDefault", v47, 20, v88);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_SetEncoderTileDefault", v45, 20, v46);
    }
    uint64_t v10 = v96;
  }
  uint64_t Dict = AVE_PixelBufAttr_CreateDict();
  if (Dict)
  {
    uint64_t v39 = Dict;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v61 = AVE_Log_CheckConsole(3u);
      __uint64_t v62 = AVE_GetCurrTime();
      __uint64_t v63 = AVE_Log_GetLevelStr(4);
      if (v61)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: %s:%d failed.\n", v62, 3, v63, "AVE_HEVCStartTileSession", 16193, "err == noErr", "AVE_HEVCStartTileSession", 16193);
        __uint64_t v62 = AVE_GetCurrTime();
        int v90 = AVE_Log_GetLevelStr(4);
      }
      else
      {
        int v90 = v63;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: %s:%d failed.", v62, 3, v90, "AVE_HEVCStartTileSession", 16193, "err == noErr", "AVE_HEVCStartTileSession", 16193);
    }
LABEL_78:
    CFMutableArrayRef Mutable = 0;
LABEL_79:
    uint64_t DerivedStorage = v94;
    goto LABEL_47;
  }
  uint64_t DerivedStorage = v94;
  if (a2 == (const void *)1)
  {
    if (AVE_Log_CheckLevel(0x14u, 7))
    {
      int v68 = AVE_Log_CheckConsole(0x14u);
      __uint64_t v69 = AVE_GetCurrTime();
      int v70 = AVE_Log_GetLevelStr(7);
      if (v68)
      {
        printf("%lld %d AVE %s: FIG: session = FIGINTERNALSESSIONMARK\n", v69, 20, v70);
        __uint64_t v71 = AVE_GetCurrTime();
        __uint64_t v91 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: FIG: session = FIGINTERNALSESSIONMARK", v71, 20, v91);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: session = FIGINTERNALSESSIONMARK", v69, 20, v70);
      }
    }
    goto LABEL_98;
  }
  uint64_t v64 = VTTileEncoderSessionSetTileAttributes();
  if (!v64)
  {
    if (*(int *)(v10 + 124) >= 3)
    {
      int valuePtr = 2;
      int v98 = 2;
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!Mutable)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v81 = AVE_Log_CheckConsole(3u);
          __uint64_t v82 = AVE_GetCurrTime();
          int v83 = AVE_Log_GetLevelStr(4);
          if (v81)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryCreateMutable failed.\n", v82, 3, v83, "AVE_HEVCStartTileSession", 16220, "TileRequirements");
            __uint64_t v84 = AVE_GetCurrTime();
            __uint64_t v92 = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryCreateMutable failed.", v84, 3, v92, "AVE_HEVCStartTileSession", 16220, "TileRequirements");
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryCreateMutable failed.", v82, 3, v83, "AVE_HEVCStartTileSession", 16220, "TileRequirements");
          }
          uint64_t v39 = 4294954392;
          goto LABEL_79;
        }
        uint64_t v39 = 4294954392;
        goto LABEL_47;
      }
      CFNumberRef v72 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F45550], v72);
      if (v72) {
        CFRelease(v72);
      }
      CFNumberRef v73 = CFNumberCreate(0, kCFNumberSInt32Type, &v98);
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F455A8], v73);
      if (v73) {
        CFRelease(v73);
      }
      if (*(int *)(v96 + 124) >= 11) {
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F45548], (const void *)*MEMORY[0x1E4F1CFD0]);
      }
      uint64_t v74 = VTTileEncoderSessionSetTileEncodeRequirements();
      if (v74)
      {
        uint64_t v39 = v74;
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v75 = AVE_Log_CheckConsole(3u);
          __uint64_t v76 = AVE_GetCurrTime();
          int v77 = AVE_Log_GetLevelStr(4);
          if (v75)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: %s:%d failed.\n", v76, 3, v77, "AVE_HEVCStartTileSession", 16246, "err == noErr", "AVE_HEVCStartTileSession", 16246);
            __uint64_t v78 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: %s:%d failed.", v78, 3);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: %s:%d failed.", v76, 3);
          }
          goto LABEL_79;
        }
        goto LABEL_47;
      }
LABEL_99:
      *(void *)uint64_t v96 = 30566;
      uint64_t v79 = *(void *)(v96 + 208);
      __uint64_t v80 = AVE_GetCurrTime();
      AVE_TimeStats_AddEndTime(v79, 3u, v80);
      uint64_t v39 = 0;
      goto LABEL_47;
    }
LABEL_98:
    CFMutableArrayRef Mutable = 0;
    goto LABEL_99;
  }
  uint64_t v39 = v64;
  if (AVE_Log_CheckLevel(3u, 4))
  {
    int v65 = AVE_Log_CheckConsole(3u);
    __uint64_t v66 = AVE_GetCurrTime();
    __uint64_t v67 = AVE_Log_GetLevelStr(4);
    if (v65)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: VTTileEncoderSessionSetTileAttributes failed.\n", v66, 3, v67, "AVE_HEVCStartTileSession", 16210, "err == noErr");
      AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTTileEncoderSessionSetTileAttributes failed.");
    goto LABEL_78;
  }
  CFMutableArrayRef Mutable = 0;
LABEL_47:
  if (v100)
  {
    CFRelease(v100);
    CFTypeRef v100 = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (DerivedStorage)
  {
    if (*(_DWORD *)(v96 + 72))
    {
      *(void *)(v96 + 88) = AVE_GetCurrTime();
      if (AVE_Log_CheckLevel(0x18u, 6))
      {
        int v48 = AVE_Log_CheckConsole(0x18u);
        __uint64_t v49 = AVE_GetCurrTime();
        __uint64_t v50 = AVE_Log_GetLevelStr(6);
        uint64_t v51 = *(void *)(v96 + 88) - *(void *)(v96 + 80);
        if (v48)
        {
          printf("%lld %d AVE %s: FIG: %d AVE_HEVCStartTileSession took %lld us\n", v49, 24, v50, *(_DWORD *)(v96 + 132), v51);
          __uint64_t v52 = AVE_GetCurrTime();
          CFAllocatorRef v53 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: %d AVE_HEVCStartTileSession took %lld us", v52, 24, v53, *(_DWORD *)(v96 + 132), *(void *)(v96 + 88) - *(void *)(v96 + 80));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: %d AVE_HEVCStartTileSession took %lld us", v49, 24, v50, *(_DWORD *)(v96 + 132), v51);
        }
        uint64_t DerivedStorage = v94;
      }
    }
    kdebug_trace();
    pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 183448));
  }
  else
  {
    kdebug_trace();
  }
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    int v54 = v8;
    int v55 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v56 = AVE_GetCurrTime();
    __uint64_t v57 = AVE_Log_GetLevelStr(6);
    if (v55)
    {
      printf("%lld %d AVE %s: Exit %s %p %p %p %dx%d %p %d\n", v56, 20, v57, "AVE_HEVCStartTileSession", a1, a2, a3, v6, v54, a5, v39);
      __uint64_t v58 = AVE_GetCurrTime();
      __uint64_t v89 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: Exit %s %p %p %p %dx%d %p %d", v58, 20, v89, "AVE_HEVCStartTileSession");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p %p %p %dx%d %p %d", v56, 20, v57, "AVE_HEVCStartTileSession");
    }
  }
  return v39;
}

uint64_t AVE_HEVCPrepareToEncodeTiles(const void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v5 = (unsigned int *)(DerivedStorage + 183440);
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    int v6 = AVE_Log_CheckConsole(0x14u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v6)
    {
      printf("%lld %d AVE %s: Enter %s %p %d\n", CurrTime, 20, LevelStr, "AVE_HEVCPrepareToEncodeTiles", a1, a2);
      __uint64_t v9 = AVE_GetCurrTime();
      __uint64_t v57 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: Enter %s %p %d", v9, 20, v57, "AVE_HEVCPrepareToEncodeTiles", a1, a2);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Enter %s %p %d", CurrTime, 20, LevelStr, "AVE_HEVCPrepareToEncodeTiles", a1, a2);
    }
  }
  if (!DerivedStorage)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v14 = AVE_Log_CheckConsole(3u);
      __uint64_t v15 = AVE_GetCurrTime();
      __uint64_t v16 = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v15, 3, v16, "AVE_HEVCPrepareToEncodeTiles", 16304, "encoderPrivateStorage");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.");
    }
    goto LABEL_34;
  }
  if (a2)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v10 = AVE_Log_CheckConsole(3u);
      __uint64_t v11 = AVE_GetCurrTime();
      int v12 = AVE_Log_GetLevelStr(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: expectPartialTiles = true. Not supported yet -> Fail\n", v11, 3, v12, "AVE_HEVCPrepareToEncodeTiles", 16306, "expectPartialTiles == false");
        __uint64_t v13 = AVE_GetCurrTime();
        __uint64_t v58 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: expectPartialTiles = true. Not supported yet -> Fail", v13, 3, v58, "AVE_HEVCPrepareToEncodeTiles", 16306, "expectPartialTiles == false");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: expectPartialTiles = true. Not supported yet -> Fail", v11, 3, v12, "AVE_HEVCPrepareToEncodeTiles", 16306, "expectPartialTiles == false");
      }
    }
LABEL_17:
    uint64_t v21 = 0;
    goto LABEL_35;
  }
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v17 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v18 = AVE_GetCurrTime();
    uint64_t v19 = AVE_Log_GetLevelStr(7);
    if (v17)
    {
      printf("%lld %d AVE %s: AVE ENTER AVE_HEVCPrepareToEncodeTiles\n", v18, 20, v19);
      __uint64_t v20 = AVE_GetCurrTime();
      int v59 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AVE ENTER AVE_HEVCPrepareToEncodeTiles", v20, 20, v59);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AVE ENTER AVE_HEVCPrepareToEncodeTiles", v18, 20, v19);
    }
  }
  uint64_t v22 = *(void *)(DerivedStorage + 183648);
  __uint64_t v23 = AVE_GetCurrTime();
  AVE_TimeStats_AddStartTime(v22, 2u, v23);
  kdebug_trace();
  if (*(_DWORD *)(DerivedStorage + 183512)) {
    *(void *)(DerivedStorage + 183520) = AVE_GetCurrTime();
  }
  AVE_GetCurrTime();
  if (*v5 != 30566)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v29 = AVE_Log_CheckConsole(3u);
      __uint64_t v30 = AVE_GetCurrTime();
      __uint64_t v31 = AVE_Log_GetLevelStr(4);
      if (v29)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_H264PrepareToEncodeFrames with encoderPrivateStorage->SessionStatus %x.\n", v30, 3, v31, "AVE_HEVCPrepareToEncodeTiles", 16371, "false", *v5);
        __uint64_t v30 = AVE_GetCurrTime();
        __uint64_t v31 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_H264PrepareToEncodeFrames with encoderPrivateStorage->SessionStatus %x.", v30, 3, v31, "AVE_HEVCPrepareToEncodeTiles", 16371, "false", *v5);
    }
LABEL_34:
    uint64_t v21 = 4294954384;
    goto LABEL_35;
  }
  uint64_t v24 = AVE_ManageSessionSettings(DerivedStorage);
  if (!v24)
  {
    *(_DWORD *)(DerivedStorage + 18672) = 1;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v32 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v33 = AVE_GetCurrTime();
      int v34 = AVE_Log_GetLevelStr(6);
      if (v32)
      {
        printf("%lld %d AVE %s: FIG: received PrepareToEncodeFrames\n", v33, 30, v34);
        __uint64_t v35 = AVE_GetCurrTime();
        int v61 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: received PrepareToEncodeFrames", v35, 30, v61);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: received PrepareToEncodeFrames", v33, 30, v34);
      }
    }
    if (!AVE_USL_Drv_Prepare())
    {
      *int v5 = 30567;
      if (*(_DWORD *)(DerivedStorage + 183512))
      {
        *(void *)(DerivedStorage + 183528) = AVE_GetCurrTime();
        if (AVE_Log_CheckLevel(0x18u, 6))
        {
          int v48 = AVE_Log_CheckConsole(0x18u);
          __uint64_t v49 = AVE_GetCurrTime();
          __uint64_t v50 = AVE_Log_GetLevelStr(6);
          int v51 = *(_DWORD *)(DerivedStorage + 183572);
          uint64_t v52 = *(void *)(DerivedStorage + 183528) - *(void *)(DerivedStorage + 183520);
          if (v48)
          {
            printf("%lld %d AVE %s: FIG: %d (%d) AVE_HEVCPrepareToEncodeTiles took %lld us\n", v49, 24, v50, v51, 0, v52);
            __uint64_t v53 = AVE_GetCurrTime();
            int v54 = AVE_Log_GetLevelStr(6);
            syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_HEVCPrepareToEncodeTiles took %lld us", v53, 24, v54, *(_DWORD *)(DerivedStorage + 183572), 0, *(void *)(DerivedStorage + 183528) - *(void *)(DerivedStorage + 183520));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_HEVCPrepareToEncodeTiles took %lld us", v49, 24, v50, v51, 0, v52);
          }
        }
      }
      uint64_t v55 = *(void *)(DerivedStorage + 183648);
      __uint64_t v56 = AVE_GetCurrTime();
      AVE_TimeStats_AddEndTime(v55, 2u, v56);
      goto LABEL_17;
    }
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v45 = AVE_Log_CheckConsole(3u);
      __uint64_t v46 = AVE_GetCurrTime();
      __uint64_t v47 = AVE_Log_GetLevelStr(4);
      if (v45)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Prepare failed.\n", v46, 3, v47, "AVE_HEVCPrepareToEncodeTiles", 16363, "err == noErr");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Prepare failed.");
    }
    goto LABEL_34;
  }
  uint64_t v21 = v24;
  if (AVE_Log_CheckLevel(3u, 4))
  {
    int v25 = AVE_Log_CheckConsole(3u);
    __uint64_t v26 = AVE_GetCurrTime();
    __uint64_t v27 = AVE_Log_GetLevelStr(4);
    if (v25)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed\n", v26, 3, v27, "AVE_HEVCPrepareToEncodeTiles", 16329, "err == noErr");
      __uint64_t v28 = AVE_GetCurrTime();
      __uint64_t v60 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed", v28, 3, v60, "AVE_HEVCPrepareToEncodeTiles", 16329, "err == noErr");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed", v26, 3, v27, "AVE_HEVCPrepareToEncodeTiles", 16329, "err == noErr");
    }
  }
LABEL_35:
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v36 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v37 = AVE_GetCurrTime();
    uint64_t v38 = AVE_Log_GetLevelStr(7);
    if (v36)
    {
      printf("%lld %d AVE %s: AVE EXIT AVE_HEVCPrepareToEncodeTiles err = 0x%08x\n", v37, 20, v38, v21);
      __uint64_t v39 = AVE_GetCurrTime();
      __uint64_t v62 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AVE EXIT AVE_HEVCPrepareToEncodeTiles err = 0x%08x", v39, 20, v62, v21);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AVE EXIT AVE_HEVCPrepareToEncodeTiles err = 0x%08x", v37, 20, v38, v21);
    }
  }
  kdebug_trace();
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 183448));
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    int v40 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v41 = AVE_GetCurrTime();
    int v42 = AVE_Log_GetLevelStr(6);
    if (v40)
    {
      printf("%lld %d AVE %s: Exit %s %p %d %d\n", v41, 20, v42, "AVE_HEVCPrepareToEncodeTiles", a1, a2, v21);
      __uint64_t v43 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: Exit %s %p %d %d", v43);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p %d %d", v41);
    }
  }
  return v21;
}

uint64_t AVE_HEVCEncodeTile()
{
  MEMORY[0x1F4188790]();
  uint64_t v1 = v0;
  CFDictionaryRef v3 = v2;
  unint64_t v153 = v4;
  unint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v194 = *MEMORY[0x1E4F143B8];
  CVPixelBufferRef texture = v9;
  char v170 = 0;
  int v169 = 0;
  int v168 = 0;
  int v10 = (char *)AVE_DW_Get();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v12 = DerivedStorage;
  __uint64_t v13 = (unsigned int *)(DerivedStorage + 183440);
  if (!DerivedStorage)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v18 = AVE_Log_CheckConsole(3u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", CurrTime, 3, LevelStr, "AVE_HEVCEncodeTile", 16423, "encoderPrivateStorage");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.");
    }
    goto LABEL_37;
  }
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v14 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v15 = AVE_GetCurrTime();
    __uint64_t v16 = AVE_Log_GetLevelStr(7);
    if (v14)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_HEVCEncodeTile\n", v15, 20, v16);
      __uint64_t v17 = AVE_GetCurrTime();
      __uint64_t v140 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCEncodeTile", v17, 20, v140);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCEncodeTile", v15, 20, v16);
    }
  }
  kdebug_trace();
  if (v3 && CFDictionaryContainsKey(v3, @"SessionIndicator")) {
    AVE_TimeStats_Restart(*((void *)v13 + 26));
  }
  if (!v13[1])
  {
    uint64_t v21 = *((void *)v13 + 26);
    __uint64_t v22 = AVE_GetCurrTime();
    AVE_TimeStats_AddStartTime(v21, 5u, v22);
  }
  if (v13[18]) {
    *((void *)v13 + 10) = AVE_GetCurrTime();
  }
  if (!texture)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v33 = AVE_Log_CheckConsole(3u);
      __uint64_t v34 = AVE_GetCurrTime();
      __uint64_t v35 = AVE_Log_GetLevelStr(4);
      if (v33)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: imageBuffer = NULL.\n", v34, 3, v35, "AVE_HEVCEncodeTile", 16449, "imageBuffer");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: imageBuffer = NULL.");
      goto LABEL_84;
    }
    goto LABEL_78;
  }
  __uint64_t v152 = v1;
  __uint64_t v23 = AVE_GetCurrTime();
  if (*(int *)(v12 + 228) >= 1) {
    int v24 = *(_DWORD *)(v12 + 228);
  }
  else {
    int v24 = 30;
  }
  AVE_Time_Gen(v24, v12 + 185008);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(texture);
  v13[518] = PixelFormatType;
  if (!v13[1])
  {
    uint64_t v172 = *(void *)(v12 + 1880);
    __uint64_t v26 = AVE_PixelFmt_FindByType(PixelFormatType);
    if (!v26)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v46 = AVE_Log_CheckConsole(3u);
        __uint64_t v47 = AVE_GetCurrTime();
        int v48 = AVE_Log_GetLevelStr(4);
        if (v46)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to find pixel format %p %d 0x%x\n", v47, 3, v48, "AVE_HEVCEncodeTile", 16467, "pPixelFmt != __null", (const void *)v12, v13[33], v13[518]);
          __uint64_t v47 = AVE_GetCurrTime();
          int v48 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to find pixel format %p %d 0x%x", v47, 3, v48, "AVE_HEVCEncodeTile", 16467, "pPixelFmt != __null", v12, v13[33], v13[518]);
      }
      goto LABEL_84;
    }
    if (v10[792]) {
      __uint64_t v27 = v10 + 792;
    }
    else {
      __uint64_t v27 = 0;
    }
    AVE_Dump_Init(*((void *)v13 + 27), v27, v13[30], *(_DWORD *)(v12 + 18760), *((_DWORD *)v10 + 196), *((_DWORD *)v10 + 197), &v172, 1, *((_DWORD *)v26 + 3), *((_DWORD *)v26 + 1), *(_DWORD *)(v12 + 192));
    AVE_Dump_WriteInput(*((_DWORD **)v13 + 27), -1, texture);
  }
  unsigned int v28 = *v13;
  if (*v13 == 30566)
  {
    if (AVE_ISP_CheckMetadata(texture)) {
      int v37 = 1;
    }
    else {
      int v37 = 2;
    }
    *(_DWORD *)(v12 + 18804) = v37;
    if (AVE_ManageSessionSettings(v12))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v38 = AVE_Log_CheckConsole(3u);
        __uint64_t v39 = AVE_GetCurrTime();
        int v40 = AVE_Log_GetLevelStr(4);
        if (v38)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed\n", v39, 3, v40, "AVE_HEVCEncodeTile", 16604, "err == noErr");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed");
        goto LABEL_84;
      }
      goto LABEL_78;
    }
    AVE_UpdateCropParams(v12, texture);
    if (AVE_HEVC_VerifyImageBuffer(v12, &texture, &v170, &v169, &v168, 1))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v49 = AVE_Log_CheckConsole(3u);
        __uint64_t v30 = AVE_GetCurrTime();
        __uint64_t v31 = AVE_Log_GetLevelStr(4);
        if (v49)
        {
          int v32 = 16614;
          goto LABEL_63;
        }
LABEL_83:
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_HEVC_VerifyImageBuffer failed.");
        goto LABEL_84;
      }
LABEL_78:
      uint64_t v36 = 4294954394;
      goto LABEL_85;
    }
    AVE_SetEncoderBasedOnFirstFrame(v12, *(_DWORD *)(v12 + 18804) == 2);
    if (AVE_ValidateEncoderParameters((const void **)v12))
    {
      if (!AVE_Log_CheckLevel(3u, 4)) {
        goto LABEL_78;
      }
      int v54 = AVE_Log_CheckConsole(3u);
      __uint64_t v51 = AVE_GetCurrTime();
      uint64_t v52 = AVE_Log_GetLevelStr(4);
      if (v54)
      {
        int v53 = 16624;
        goto LABEL_77;
      }
LABEL_98:
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ValidateEncoderParameters failed");
      goto LABEL_84;
    }
    AVE_PrepareVideoAndSequenceHeader(v12, texture);
    AVE_PreparePictureHeader((_DWORD *)v12);
    if (v13[18])
    {
      *((void *)v13 + 11) = AVE_GetCurrTime();
      if (AVE_Log_CheckLevel(0x18u, 6))
      {
        int v147 = AVE_Log_CheckConsole(0x18u);
        __uint64_t v150 = AVE_GetCurrTime();
        uint64_t v64 = AVE_Log_GetLevelStr(6);
        unsigned int v65 = v13[33];
        uint64_t v66 = *((void *)v13 + 11) - *((void *)v13 + 10);
        if (v147)
        {
          printf("%lld %d AVE %s: FIG: %d (%d) Init setup  took %lld us\n", v150, 24, v64, v65, v13[1], v66);
          __uint64_t v151 = AVE_GetCurrTime();
          __uint64_t v67 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: %d (%d) Init setup  took %lld us", v151, 24, v67, v13[33], v13[1], *((void *)v13 + 11) - *((void *)v13 + 10));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: %d (%d) Init setup  took %lld us", v150, 24, v64, v65, v13[1], v66);
        }
      }
      *((void *)v13 + 10) = AVE_GetCurrTime();
    }
    long long v181 = 0u;
    long long v180 = 0u;
    long long v179 = 0u;
    long long v178 = 0u;
    uint64_t v172 = v12 + 1872;
    uint64_t v173 = v12 + 1880;
    uint64_t v174 = v12 + 18640;
    uint64_t v175 = v12 + 192;
    long long v176 = *((_OWORD *)v13 + 13);
    uint64_t v177 = *((void *)v13 + 28);
    *((void *)&v179 + 1) = v12 + 20368;
    *(void *)&long long v180 = v12 + 102520;
    *((void *)&v180 + 1) = v12 + 110444;
    *(void *)&long long v181 = v12 + 118368;
    *((void *)&v181 + 1) = v12 + 128004;
    uint64_t v182 = v12 + 137640;
    uint64_t v183 = v12 + 159392;
    __uint64_t v184 = v23;
    if (v3 && CFDictionaryContainsKey(v3, @"ReconstructedPixelBuffer")) {
      *(_DWORD *)(v173 + 176) |= 8u;
    }
    if (AVE_USL_Drv_Start(*(void *)(v12 + 24), (uint64_t)&v172, v12 + 32, 0, *(void *)(v12 + 8), *(void *)(v12 + 16), *((unsigned __int8 *)v13 + 104), *((void *)v13 + 18), v12 + 64, (unsigned int *)(v12 + 20176), (void *)(v12 + 19476)))
    {
      if (!AVE_Log_CheckLevel(3u, 4)) {
        goto LABEL_37;
      }
      int v72 = AVE_Log_CheckConsole(3u);
      __uint64_t v69 = AVE_GetCurrTime();
      int v70 = AVE_Log_GetLevelStr(4);
      if (v72)
      {
        int v71 = 16691;
        goto LABEL_118;
      }
LABEL_193:
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Start failed.");
      goto LABEL_37;
    }
  }
  else
  {
    if (v28 != 30567)
    {
      if (v28 != 30568)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v43 = AVE_Log_CheckConsole(3u);
          __uint64_t v44 = AVE_GetCurrTime();
          int v45 = AVE_Log_GetLevelStr(4);
          if (v43)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_H264EncodeFrame encoderPrivateStorage->SessionStatus = 0x%08x.\n", v44, 3, v45, "AVE_HEVCEncodeTile", 16709, "false", *v13);
            __uint64_t v44 = AVE_GetCurrTime();
            int v45 = AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_H264EncodeFrame encoderPrivateStorage->SessionStatus = 0x%08x.", v44, 3, v45, "AVE_HEVCEncodeTile", 16709, "false", *v13);
        }
        goto LABEL_37;
      }
      if (AVE_HEVC_VerifyImageBuffer(v12, &texture, &v170, &v169, &v168, 0))
      {
        if (!AVE_Log_CheckLevel(3u, 4))
        {
LABEL_84:
          uint64_t v36 = 4294954394;
          goto LABEL_85;
        }
        int v29 = AVE_Log_CheckConsole(3u);
        __uint64_t v30 = AVE_GetCurrTime();
        __uint64_t v31 = AVE_Log_GetLevelStr(4);
        if (v29)
        {
          int v32 = 16486;
LABEL_63:
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_HEVC_VerifyImageBuffer failed.\n", v30, 3, v31, "AVE_HEVCEncodeTile", v32, "err == noErr");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
          goto LABEL_83;
        }
        goto LABEL_83;
      }
      goto LABEL_125;
    }
    if (AVE_ISP_CheckMetadata(texture)) {
      int v41 = 1;
    }
    else {
      int v41 = 2;
    }
    *(_DWORD *)(v12 + 18804) = v41;
    AVE_UpdateCropParams(v12, texture);
    if (AVE_HEVC_VerifyImageBuffer(v12, &texture, &v170, &v169, &v168, 1))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v42 = AVE_Log_CheckConsole(3u);
        __uint64_t v30 = AVE_GetCurrTime();
        __uint64_t v31 = AVE_Log_GetLevelStr(4);
        if (!v42) {
          goto LABEL_83;
        }
        int v32 = 16503;
        goto LABEL_63;
      }
      goto LABEL_78;
    }
    AVE_SetEncoderBasedOnFirstFrame(v12, *(_DWORD *)(v12 + 18804) == 2);
    if (AVE_ValidateEncoderParameters((const void **)v12))
    {
      if (!AVE_Log_CheckLevel(3u, 4)) {
        goto LABEL_78;
      }
      int v50 = AVE_Log_CheckConsole(3u);
      __uint64_t v51 = AVE_GetCurrTime();
      uint64_t v52 = AVE_Log_GetLevelStr(4);
      if (v50)
      {
        int v53 = 16511;
LABEL_77:
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_ValidateEncoderParameters failed\n", v51, 3, v52, "AVE_HEVCEncodeTile", v53, "err == noErr");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
        goto LABEL_98;
      }
      goto LABEL_98;
    }
    AVE_PrepareVideoAndSequenceHeader(v12, texture);
    AVE_PreparePictureHeader((_DWORD *)v12);
    if (v13[18])
    {
      *((void *)v13 + 11) = AVE_GetCurrTime();
      if (AVE_Log_CheckLevel(0x18u, 6))
      {
        int v148 = AVE_Log_CheckConsole(0x18u);
        __uint64_t v146 = AVE_GetCurrTime();
        uint64_t v55 = AVE_Log_GetLevelStr(6);
        unsigned int v56 = v13[33];
        uint64_t v57 = *((void *)v13 + 11) - *((void *)v13 + 10);
        if (v148)
        {
          printf("%lld %d AVE %s: FIG: %d (%d) Pre Init setup  took %lld us\n", v146, 24, v55, v56, v13[1], v57);
          __uint64_t v149 = AVE_GetCurrTime();
          __uint64_t v58 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: %d (%d) Pre Init setup  took %lld us", v149, 24, v58, v13[33], v13[1], *((void *)v13 + 11) - *((void *)v13 + 10));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: %d (%d) Pre Init setup  took %lld us", v146, 24, v55, v56, v13[1], v57);
        }
      }
      *((void *)v13 + 10) = AVE_GetCurrTime();
    }
    long long v181 = 0u;
    long long v180 = 0u;
    long long v179 = 0u;
    long long v178 = 0u;
    uint64_t v172 = v12 + 1872;
    uint64_t v173 = v12 + 1880;
    uint64_t v174 = v12 + 18640;
    uint64_t v175 = v12 + 192;
    long long v176 = *((_OWORD *)v13 + 13);
    uint64_t v177 = *((void *)v13 + 28);
    *((void *)&v179 + 1) = v12 + 20368;
    *(void *)&long long v180 = v12 + 102520;
    *((void *)&v180 + 1) = v12 + 110444;
    *(void *)&long long v181 = v12 + 118368;
    *((void *)&v181 + 1) = v12 + 128004;
    uint64_t v182 = v12 + 137640;
    uint64_t v183 = v12 + 159392;
    __uint64_t v184 = v23;
    if (v3 && CFDictionaryContainsKey(v3, @"ReconstructedPixelBuffer")) {
      *(_DWORD *)(v173 + 176) |= 8u;
    }
    if (AVE_USL_Drv_Start(*(void *)(v12 + 24), (uint64_t)&v172, v12 + 32, 0, *(void *)(v12 + 8), *(void *)(v12 + 16), *((unsigned __int8 *)v13 + 104), *((void *)v13 + 18), v12 + 64, (unsigned int *)(v12 + 20176), (void *)(v12 + 19476)))
    {
      if (!AVE_Log_CheckLevel(3u, 4)) {
        goto LABEL_37;
      }
      int v68 = AVE_Log_CheckConsole(3u);
      __uint64_t v69 = AVE_GetCurrTime();
      int v70 = AVE_Log_GetLevelStr(4);
      if (v68)
      {
        int v71 = 16579;
LABEL_118:
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Start failed.\n", v69, 3, v70, "AVE_HEVCEncodeTile", v71, "err == noErr");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
        goto LABEL_193;
      }
      goto LABEL_193;
    }
  }
  *__uint64_t v13 = 30568;
  if (!v13[18]) {
    goto LABEL_132;
  }
  *((void *)v13 + 11) = AVE_GetCurrTime();
  if (AVE_Log_CheckLevel(0x18u, 6))
  {
    int v73 = AVE_Log_CheckConsole(0x18u);
    __uint64_t v74 = AVE_GetCurrTime();
    int v75 = AVE_Log_GetLevelStr(6);
    unsigned int v76 = v13[33];
    uint64_t v77 = *((void *)v13 + 11) - *((void *)v13 + 10);
    if (v73)
    {
      printf("%lld %d AVE %s: FIG: %d (%d) AVE_USL_Drv_Start took %lld us\n", v74, 24, v75, v76, v13[1], v77);
      __uint64_t v78 = AVE_GetCurrTime();
      uint64_t v79 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_USL_Drv_Start took %lld us", v78, 24, v79, v13[33], v13[1], *((void *)v13 + 11) - *((void *)v13 + 10));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_USL_Drv_Start took %lld us", v74, 24, v75, v76, v13[1], v77);
    }
  }
  *((void *)v13 + 10) = AVE_GetCurrTime();
LABEL_125:
  if (v13[18] && *v13 == 30568)
  {
    *((void *)v13 + 11) = AVE_GetCurrTime();
    if (AVE_Log_CheckLevel(0x18u, 6))
    {
      int v80 = AVE_Log_CheckConsole(0x18u);
      __uint64_t v81 = AVE_GetCurrTime();
      __uint64_t v82 = AVE_Log_GetLevelStr(6);
      unsigned int v83 = v13[33];
      uint64_t v84 = *((void *)v13 + 11) - *((void *)v13 + 10);
      if (v80)
      {
        printf("%lld %d AVE %s: FIG: %d (%d) AVE_HEVC_VerifyImageBuffer took %lld us\n", v81, 24, v82, v83, v13[1], v84);
        __uint64_t v85 = AVE_GetCurrTime();
        __uint64_t v86 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_HEVC_VerifyImageBuffer took %lld us", v85, 24, v86, v13[33], v13[1], *((void *)v13 + 11) - *((void *)v13 + 10));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_HEVC_VerifyImageBuffer took %lld us", v81, 24, v82, v83, v13[1], v84);
      }
    }
    *((void *)v13 + 10) = AVE_GetCurrTime();
  }
LABEL_132:
  *__uint64_t v13 = 30568;
  v156[1] = 0;
  long long v157 = 0u;
  long long v158 = 0u;
  long long v159 = 0u;
  long long v160 = 0u;
  long long v161 = 0u;
  long long v162 = 0u;
  memset(v163, 0, sizeof(v163));
  long long v164 = 0u;
  long long v165 = 0u;
  long long v166 = 0u;
  long long v167 = 0u;
  memset(v154, 0, sizeof(v154));
  uint64_t v155 = 0;
  bzero(&v172, 0x4AF8uLL);
  v156[0] = 0;
  v156[2] = v8;
  *(void *)&long long v157 = texture;
  BYTE8(v164) = *((unsigned char *)v13 + 105);
  *(void *)&long long v165 = v23;
  DWORD2(v165) = v13[39];
  *(_OWORD *)&v163[1] = *(_OWORD *)(v12 + 185008);
  if (*(_DWORD *)(v12 + 18804) == 2)
  {
    AVE_ISP_GetMetadata(texture, (double *)v154);
    AVE_Dump_WriteISPMetadata(*((void **)v13 + 27), v13[39], v13[1], (double *)v154);
  }
  v163[3] = v154;
  *(void *)&long long v159 = 0;
  BYTE8(v159) = *((unsigned char *)v13 + 107);
  if (*((unsigned char *)v13 + 106))
  {
    CFDictionaryRef v87 = (const __CFDictionary *)CMGetAttachment(texture, (CFStringRef)*MEMORY[0x1E4F53070], 0);
    if (v87) {
      *(void *)&long long v159 = CFDictionaryCreateCopy(0, v87);
    }
  }
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v88 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v89 = AVE_GetCurrTime();
    int v90 = AVE_Log_GetLevelStr(7);
    if (v88)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_GetPerTileData\n", v89, 20, v90);
      __uint64_t v91 = AVE_GetCurrTime();
      float v142 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_GetPerTileData", v91, 20, v142);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_GetPerTileData", v89, 20, v90);
    }
  }
  int v186 = *(_DWORD *)(v12 + 18776);
  BOOL v187 = *(_DWORD *)(v12 + 18784) == 1;
  BOOL v188 = *(_DWORD *)(v12 + 18788) == 4;
  int v192 = *(_DWORD *)(v12 + 18808);
  char v189 = *(unsigned char *)(v12 + 18845);
  *(unsigned char *)(v12 + 18845) = 0;
  char v190 = *(unsigned char *)(v12 + 18012);
  BytePtr = 0;
  char v191 = 0;
  if (!v3) {
    goto LABEL_163;
  }
  if (CFDictionaryContainsKey(v3, @"SessionIndicator")) {
    AVE_TimeStats_Restart(*((void *)v13 + 26));
  }
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v3, (const void *)*MEMORY[0x1E4F44F80]);
  if (Value) {
    BytePtr = CFDataGetBytePtr(Value);
  }
  uint64_t v93 = CFDictionaryGetValue(v3, @"ForceNonRefFrame");
  uint64_t v94 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
  if (v93 && CFEqual(v93, (CFTypeRef)*MEMORY[0x1E4F1CFD0]))
  {
    BYTE4(v172) = 1;
    goto LABEL_160;
  }
  int v95 = CFDictionaryGetValue(v3, (const void *)*MEMORY[0x1E4F44ED8]);
  if (v95 && CFEqual(v95, *v94))
  {
    if (*(_DWORD *)(v12 + 18384))
    {
      int v96 = 3;
    }
    else
    {
      if (*(unsigned char *)(v12 + 2024))
      {
        int v96 = 1;
        LODWORD(v172) = 1;
        uint64_t v97 = 1;
LABEL_156:
        uint64_t v174 = v97;
        if (AVE_Log_CheckLevel(0x1Du, 6))
        {
          int v98 = AVE_Log_CheckConsole(0x1Du);
          __uint64_t v99 = AVE_GetCurrTime();
          CFTypeRef v100 = AVE_Log_GetLevelStr(6);
          if (v98)
          {
            printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceKeyFrame = %d %llx\n", v99, 29, v100, v96, v97);
            __uint64_t v101 = AVE_GetCurrTime();
            double v143 = AVE_Log_GetLevelStr(6);
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceKeyFrame = %d %llx", v101, 29, v143, v96, v97);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceKeyFrame = %d %llx", v99, 29, v100, v96, v97);
          }
        }
        goto LABEL_160;
      }
      int v96 = 2;
    }
    LODWORD(v172) = v96;
    uint64_t v97 = 256;
    goto LABEL_156;
  }
LABEL_160:
  if ((*(unsigned char *)(v12 + 2056) & 8) == 0)
  {
LABEL_163:
    char v103 = 1;
    goto LABEL_164;
  }
  long long v102 = CFDictionaryGetValue(v3, @"ReconstructedPixelBuffer");
  if (v102)
  {
    int v193 = v102;
    goto LABEL_163;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    int v119 = AVE_Log_CheckConsole(3u);
    __uint64_t v120 = AVE_GetCurrTime();
    long long v121 = AVE_Log_GetLevelStr(4);
    if (v119)
    {
      printf("%lld %d AVE %s: %s:%d %s | AVE ERR: failed to get ReconstructedPixelBuffer %p\n", v120, 3, v121, "AVE_GetPerTileData", 15835, "pUseReconBuffer != __null", 0);
      __uint64_t v120 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERR: failed to get ReconstructedPixelBuffer %p", v120);
  }
  char v103 = 0;
LABEL_164:
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v104 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v105 = AVE_GetCurrTime();
    __uint64_t v106 = AVE_Log_GetLevelStr(7);
    if (v104)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_GetPerTileData\n", v105, 20, v106);
      __uint64_t v107 = AVE_GetCurrTime();
      __uint64_t v144 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_GetPerTileData", v107, 20, v144);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_GetPerTileData", v105, 20, v106);
    }
  }
  if ((v103 & 1) == 0)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v111 = AVE_Log_CheckConsole(3u);
      __uint64_t v112 = AVE_GetCurrTime();
      __uint64_t v113 = AVE_Log_GetLevelStr(4);
      if (v111)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_GetPerTileData failed.\n", v112, 3, v113, "AVE_HEVCEncodeTile", 16781, "err == noErr");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_GetPerTileData failed.");
    }
    goto LABEL_84;
  }
  if (AVE_GetTileInfo((_DWORD *)v12, (uint64_t)&v172, v6, v153))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v108 = AVE_Log_CheckConsole(3u);
      __uint64_t v109 = AVE_GetCurrTime();
      int v110 = AVE_Log_GetLevelStr(4);
      if (v108)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_GetTileInfo failed.\n", v109, 3, v110, "AVE_HEVCEncodeTile", 16786, "err == noErr");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_GetTileInfo failed.");
    }
    goto LABEL_84;
  }
  *(void *)&long long v164 = &v172;
  *((void *)&v167 + 1) = v13[1];
  uint64_t v114 = AVE_USL_Drv_Process(*(void *)(v12 + 24), (uint64_t)v156);
  uint64_t v36 = v114;
  if (v114)
  {
    if (v114 == -536870173)
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        int v115 = AVE_Log_CheckConsole(0x16u);
        __uint64_t v116 = AVE_GetCurrTime();
        int v117 = AVE_Log_GetLevelStr(5);
        if (v115)
        {
          printf("%lld %d AVE %s: FIG: device returned kIOReturnNoPower. reject the frame\n", v116, 22, v117);
          __uint64_t v118 = AVE_GetCurrTime();
          int v145 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: device returned kIOReturnNoPower. reject the frame", v118, 22, v145);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: device returned kIOReturnNoPower. reject the frame", v116, 22, v117);
        }
      }
      goto LABEL_195;
    }
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v122 = AVE_Log_CheckConsole(3u);
      __uint64_t v123 = AVE_GetCurrTime();
      uint64_t v124 = AVE_Log_GetLevelStr(4);
      if (v122)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Process failed.\n", v123, 3, v124, "AVE_HEVCEncodeTile", 16803, "err == noErr");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Process failed.");
    }
LABEL_37:
    uint64_t v36 = 4294954384;
    goto LABEL_85;
  }
LABEL_195:
  if (v152) {
    *v152 |= 1u;
  }
  if (v13[18])
  {
    *((void *)v13 + 11) = AVE_GetCurrTime();
    unsigned int v125 = v13[1];
    BOOL v126 = AVE_Log_CheckLevel(0x18u, 6);
    if (v125)
    {
      if (v126)
      {
        int v127 = AVE_Log_CheckConsole(0x18u);
        __uint64_t v128 = AVE_GetCurrTime();
        CMTimeEpoch v129 = AVE_Log_GetLevelStr(6);
        uint64_t v130 = *((void *)v13 + 11);
        uint64_t v131 = v130 - *((void *)v13 + 10);
        uint64_t v132 = v130 - *((void *)v13 + 12);
        if (v127)
        {
          printf("%lld %d AVE %s: FIG: %d (%d) EncodeTile took %lld us (%lld us since tile #0)\n", v128, 24, v129, v13[33], v13[1], v131, v132);
          __uint64_t v128 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) EncodeTile took %lld us (%lld us since tile #0)", v128);
      }
    }
    else
    {
      if (v126)
      {
        int v133 = AVE_Log_CheckConsole(0x18u);
        __uint64_t v134 = AVE_GetCurrTime();
        uint64_t v135 = AVE_Log_GetLevelStr(6);
        unsigned int v136 = v13[33];
        uint64_t v137 = *((void *)v13 + 11) - *((void *)v13 + 10);
        if (v133)
        {
          printf("%lld %d AVE %s: FIG: %d (%d) EncodeTile took %lld us\n", v134, 24, v135, v136, v13[1], v137);
          __uint64_t v138 = AVE_GetCurrTime();
          int v139 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: %d (%d) EncodeTile took %lld us", v138, 24, v139, v13[33], v13[1], *((void *)v13 + 11) - *((void *)v13 + 10));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: %d (%d) EncodeTile took %lld us", v134, 24, v135, v136, v13[1], v137);
        }
      }
      *((void *)v13 + 12) = *((void *)v13 + 10);
    }
  }
LABEL_85:
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v59 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v60 = AVE_GetCurrTime();
    int v61 = AVE_Log_GetLevelStr(7);
    if (v59)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_HEVCEncodeTile err 0x%08x\n", v60, 20, v61, v36);
      __uint64_t v62 = AVE_GetCurrTime();
      int v141 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_HEVCEncodeTile err 0x%08x", v62, 20, v141, v36);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_HEVCEncodeTile err 0x%08x", v60, 20, v61, v36);
    }
  }
  if (v170 && texture) {
    CVPixelBufferRelease(texture);
  }
  kdebug_trace();
  ++v13[1];
  pthread_mutex_unlock((pthread_mutex_t *)(v12 + 183448));
  return v36;
}

uint64_t AVE_HEVCCompleteTiles(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v3 = AVE_Log_CheckConsole(0x14u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v3)
    {
      printf("%lld %d AVE %s: Enter %s %p\n", CurrTime, 20, LevelStr, "AVE_HEVCCompleteTiles", a1);
      __uint64_t v6 = AVE_GetCurrTime();
      __uint64_t v35 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: Enter %s %p", v6, 20, v35, "AVE_HEVCCompleteTiles", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Enter %s %p", CurrTime, 20, LevelStr, "AVE_HEVCCompleteTiles", a1);
    }
  }
  if (!DerivedStorage)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v11 = AVE_Log_CheckConsole(3u);
      __uint64_t v12 = AVE_GetCurrTime();
      __uint64_t v13 = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v12, 3, v13, "AVE_HEVCCompleteTiles", 16873, "encoderPrivateStorage");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.");
    }
    goto LABEL_28;
  }
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v7 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v8 = AVE_GetCurrTime();
    __uint64_t v9 = AVE_Log_GetLevelStr(7);
    if (v7)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_HEVCCompleteTiles\n", v8, 20, v9);
      __uint64_t v10 = AVE_GetCurrTime();
      uint64_t v36 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCCompleteTiles", v10, 20, v36);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCCompleteTiles", v8, 20, v9);
    }
  }
  uint64_t v14 = *(void *)(DerivedStorage + 183648);
  __uint64_t v15 = AVE_GetCurrTime();
  AVE_TimeStats_AddStartTime(v14, 6u, v15);
  kdebug_trace();
  if (*(_DWORD *)(DerivedStorage + 183512)) {
    *(void *)(DerivedStorage + 183520) = AVE_GetCurrTime();
  }
  __uint64_t v16 = AVE_GetCurrTime();
  if (*(_DWORD *)(DerivedStorage + 183440) == 30568)
  {
    __uint64_t v38 = v16;
    if (AVE_USL_Drv_Complete(*(void *)(DerivedStorage + 24), &v38))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v17 = AVE_Log_CheckConsole(3u);
        __uint64_t v18 = AVE_GetCurrTime();
        uint64_t v19 = AVE_Log_GetLevelStr(4);
        if (v17)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: H264VideoEncoderVA_DriverEncodeCompleteFrames failed.\n", v18, 3, v19, "AVE_HEVCCompleteTiles", 16899, "err == noErr");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: H264VideoEncoderVA_DriverEncodeCompleteFrames failed.");
      }
LABEL_28:
      uint64_t v29 = 4294954384;
      goto LABEL_29;
    }
  }
  if (*(_DWORD *)(DerivedStorage + 183512))
  {
    *(void *)(DerivedStorage + 183528) = AVE_GetCurrTime();
    if (AVE_Log_CheckLevel(0x18u, 6))
    {
      int v20 = AVE_Log_CheckConsole(0x18u);
      __uint64_t v21 = AVE_GetCurrTime();
      __uint64_t v22 = AVE_Log_GetLevelStr(6);
      int v23 = *(_DWORD *)(DerivedStorage + 183572);
      uint64_t v24 = *(void *)(DerivedStorage + 183528) - *(void *)(DerivedStorage + 183520);
      if (v20)
      {
        printf("%lld %d AVE %s: FIG: %d (%d) Complete took %lld us\n", v21, 24, v22, v23, *(_DWORD *)(DerivedStorage + 183444) - 1, v24);
        __uint64_t v25 = AVE_GetCurrTime();
        __uint64_t v26 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) Complete took %lld us", v25, 24, v26, *(_DWORD *)(DerivedStorage + 183572), *(_DWORD *)(DerivedStorage + 183444) - 1, *(void *)(DerivedStorage + 183528) - *(void *)(DerivedStorage + 183520));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) Complete took %lld us", v21, 24, v22, v23, *(_DWORD *)(DerivedStorage + 183444) - 1, v24);
      }
    }
  }
  uint64_t v27 = *(void *)(DerivedStorage + 183648);
  __uint64_t v28 = AVE_GetCurrTime();
  AVE_TimeStats_AddEndTime(v27, 6u, v28);
  uint64_t v29 = 0;
LABEL_29:
  kdebug_trace();
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 183448));
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v30 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v31 = AVE_GetCurrTime();
    int v32 = AVE_Log_GetLevelStr(7);
    if (v30)
    {
      printf("%lld %d AVE %s: Exit %s %p %d\n", v31, 20, v32, "AVE_HEVCCompleteTiles", a1, v29);
      __uint64_t v33 = AVE_GetCurrTime();
      int v37 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v33, 20, v37, "AVE_HEVCCompleteTiles", a1, v29);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v31, 20, v32, "AVE_HEVCCompleteTiles", a1, v29);
    }
  }
  return v29;
}

uint64_t AVE_HEVC_EncodeMultiFrame(const void *a1, uint64_t a2, OpaqueCMTaggedBufferGroup *a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v10 = AVE_Log_CheckConsole(0x14u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v10)
    {
      printf("%lld %d AVE %s: %s Enter\n", CurrTime, 20, LevelStr, "AVE_HEVC_EncodeMultiFrame");
      __uint64_t v13 = AVE_GetCurrTime();
      __uint64_t v63 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Enter", v13, 20, v63, "AVE_HEVC_EncodeMultiFrame");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter", CurrTime, 20, LevelStr, "AVE_HEVC_EncodeMultiFrame");
    }
  }
  if (DerivedStorage)
  {
    uint64_t v14 = (unsigned int *)(DerivedStorage + 18436);
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183448));
    kdebug_trace();
    if (a6 && CFDictionaryContainsKey(a6, @"SessionIndicator")) {
      AVE_TimeStats_Restart(*(void *)(DerivedStorage + 183648));
    }
    if (!*(_DWORD *)(DerivedStorage + 183444))
    {
      uint64_t v15 = *(void *)(DerivedStorage + 183648);
      __uint64_t v16 = AVE_GetCurrTime();
      AVE_TimeStats_AddStartTime(v15, 5u, v16);
      if (*(int *)(DerivedStorage + 228) >= 1) {
        int v17 = *(_DWORD *)(DerivedStorage + 228);
      }
      else {
        int v17 = 30;
      }
      AVE_FPS::Update(*(AVE_FPS **)(DerivedStorage + 183640), v17, 0, 0);
    }
    if (*v14 == 2)
    {
      unsigned int Count = CMTaggedBufferGroupGetCount(a3);
      int v19 = Count;
      if (*v14 <= Count)
      {
        if (!Count)
        {
          uint64_t v44 = 0;
          goto LABEL_72;
        }
        uint64_t v29 = 0;
        unint64_t v30 = Count;
        __uint64_t v31 = (CMTag *)MEMORY[0x1E4F1F3D8];
        while (1)
        {
          unint64_t v32 = 0;
          CMTag v67 = *v31;
          CMTag tagBuffer = v67;
          CMItemCount numberOfTagsCopied = 0;
          uint64_t v65 = v29;
          __uint64_t v33 = (unsigned __int8 *)(DerivedStorage + v29 + 93859);
          do
          {
            TagCollectionAtIndex = CMTaggedBufferGroupGetTagCollectionAtIndex(a3, v32);
            OSStatus TagsWithCategory = CMTagCollectionGetTagsWithCategory(TagCollectionAtIndex, kCMTagCategory_VideoLayerID, &tagBuffer, 1, &numberOfTagsCopied);
            if (TagsWithCategory || numberOfTagsCopied != 1)
            {
              if (AVE_Log_CheckLevel(0x14u, 4))
              {
                int v45 = AVE_Log_CheckConsole(0x14u);
                __uint64_t v46 = AVE_GetCurrTime();
                __uint64_t v47 = AVE_Log_GetLevelStr(4);
                if (v45)
                {
                  printf("%lld %d AVE %s: %s:%d %s | invalid VideoLayerID in taggedBuffer %d %d %p\n", v46, 20, v47, "AVE_HEVC_EncodeMultiFrame", 12997, "ret == 0 && numOfTags == 1", TagsWithCategory, numberOfTagsCopied, &tagBuffer);
                  __uint64_t v46 = AVE_GetCurrTime();
                  AVE_Log_GetLevelStr(4);
                }
                syslog(3, "%lld %d AVE %s: %s:%d %s | invalid VideoLayerID in taggedBuffer %d %d %p", v46, 20);
              }
              goto LABEL_71;
            }
            ++v32;
          }
          while (CMTagGetSInt64Value(tagBuffer) != *v33 && v32 < v30);
          if (!*v14) {
            break;
          }
          uint64_t v37 = 0;
          while (1)
          {
            unsigned int v38 = *(_DWORD *)(DerivedStorage + 18904) ? v37 << (*(unsigned char *)(DerivedStorage + 94054) == 1) : v37;
            uint64_t v39 = *(unsigned __int8 *)(DerivedStorage + v38 + 93859);
            if (CMTagGetSInt64Value(tagBuffer) == v39) {
              break;
            }
            if (++v37 >= *v14) {
              goto LABEL_65;
            }
          }
          int v40 = *(unsigned __int8 *)(DerivedStorage + 93924 + v37);
          if (!CMTagCollectionGetTagsWithCategory(TagCollectionAtIndex, kCMTagCategory_StereoView, &v67, 1, &numberOfTagsCopied)&& numberOfTagsCopied == 1)
          {
            FlagsCFDataRef Value = CMTagGetFlagsValue(v67);
            uint64_t v42 = 1772;
            if (FlagsValue != 1) {
              uint64_t v42 = 1773;
            }
            int v43 = *((unsigned __int8 *)v14 + v42);
            if (v40 != v43)
            {
              if (AVE_Log_CheckLevel(0x14u, 4))
              {
                int v60 = AVE_Log_CheckConsole(0x14u);
                __uint64_t v61 = AVE_GetCurrTime();
                __uint64_t v62 = AVE_Log_GetLevelStr(4);
                if (v60)
                {
                  printf("%lld %d AVE %s: %s:%d %s | left/right ViewID not matching in taggedBuffer %d %d %d\n", v61, 20, v62, "AVE_HEVC_EncodeMultiFrame", 13046, "storedViewID == curViewID", 0, v40, v43);
                  __uint64_t v61 = AVE_GetCurrTime();
                  AVE_Log_GetLevelStr(4);
                }
                syslog(3, "%lld %d AVE %s: %s:%d %s | left/right ViewID not matching in taggedBuffer %d %d %d", v61, 20);
              }
              uint64_t v44 = 4294948262;
              goto LABEL_72;
            }
          }
          if (!CMTaggedBufferGroupGetCVPixelBufferForTag(a3, tagBuffer, 0))
          {
            if (AVE_Log_CheckLevel(0x14u, 4))
            {
              int v57 = AVE_Log_CheckConsole(0x14u);
              __uint64_t v58 = AVE_GetCurrTime();
              int v59 = AVE_Log_GetLevelStr(4);
              if (v57)
              {
                printf("%lld %d AVE %s: %s:%d %s | failed to get CVPixelBuffer in taggedBuffer\n", v58, 20, v59, "AVE_HEVC_EncodeMultiFrame", 13054, "pBuf != __null");
                AVE_GetCurrTime();
                AVE_Log_GetLevelStr(4);
              }
              syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get CVPixelBuffer in taggedBuffer");
            }
            goto LABEL_69;
          }
          uint64_t v44 = AVE_HEVC_Encode();
          if (!v44)
          {
            uint64_t v29 = v65 + 1;
            __uint64_t v31 = (CMTag *)MEMORY[0x1E4F1F3D8];
            if (v65 + 1 != v30) {
              continue;
            }
          }
          goto LABEL_72;
        }
LABEL_65:
        if (!AVE_Log_CheckLevel(0x14u, 4))
        {
LABEL_71:
          uint64_t v44 = 4294949598;
          goto LABEL_72;
        }
        int v48 = AVE_Log_CheckConsole(0x14u);
        __uint64_t v49 = AVE_GetCurrTime();
        int v50 = AVE_Log_GetLevelStr(4);
        SInt64CFDataRef Value = CMTagGetSInt64Value(tagBuffer);
        if (v48)
        {
          printf("%lld %d AVE %s: %s:%d %s | mismatch VideoLayerID %lld in taggedBuffer\n", v49, 20, v50, "AVE_HEVC_EncodeMultiFrame", 13031, "storedLayerID != -1", SInt64Value);
          __uint64_t v49 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
          CMTagGetSInt64Value(tagBuffer);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | mismatch VideoLayerID %lld in taggedBuffer", v49);
      }
      else if (AVE_Log_CheckLevel(0x14u, 4))
      {
        int v20 = AVE_Log_CheckConsole(0x14u);
        __uint64_t v21 = AVE_GetCurrTime();
        __uint64_t v22 = AVE_Log_GetLevelStr(4);
        if (v20)
        {
          printf("%lld %d AVE %s: %s:%d %s | no enough buffers %d %d\n", v21, 20, v22, "AVE_HEVC_EncodeMultiFrame", 12977, "num >= pEnc->VideoParams.iLayerNum", v19, *v14);
          __uint64_t v21 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | no enough buffers %d %d", v21);
      }
LABEL_69:
      uint64_t v44 = 4294949598;
      goto LABEL_72;
    }
    if (AVE_Log_CheckLevel(0x14u, 4))
    {
      int v26 = AVE_Log_CheckConsole(0x14u);
      __uint64_t v27 = AVE_GetCurrTime();
      __uint64_t v28 = AVE_Log_GetLevelStr(4);
      if (v26)
      {
        printf("%lld %d AVE %s: %s:%d %s | invalid number of video layers %d\n", v27, 20, v28, "AVE_HEVC_EncodeMultiFrame", 12972, "pEnc->VideoParams.iLayerNum > 1 && pEnc->VideoParams.iLayerNum <= ((2) < ((63 + 1)) ? (2) : ((63 + 1)))", *v14);
        __uint64_t v27 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid number of video layers %d", v27);
    }
    uint64_t v44 = 4294948264;
  }
  else
  {
    if (AVE_Log_CheckLevel(0x14u, 4))
    {
      int v23 = AVE_Log_CheckConsole(0x14u);
      __uint64_t v24 = AVE_GetCurrTime();
      __uint64_t v25 = AVE_Log_GetLevelStr(4);
      if (v23)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to get encoder %p\n", v24, 20, v25, "AVE_HEVC_EncodeMultiFrame", 12945, "pEnc", a1);
        __uint64_t v24 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get encoder %p", v24);
    }
    uint64_t v44 = 4294954384;
  }
LABEL_72:
  kdebug_trace();
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 183448));
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v52 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v53 = AVE_GetCurrTime();
    int v54 = AVE_Log_GetLevelStr(7);
    if (v52)
    {
      printf("%lld %d AVE %s: %s Exit 0x%x\n", v53, 20, v54, "AVE_HEVC_EncodeMultiFrame", v44);
      __uint64_t v55 = AVE_GetCurrTime();
      uint64_t v64 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Exit 0x%x", v55, 20, v64, "AVE_HEVC_EncodeMultiFrame", v44);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit 0x%x", v53, 20, v54, "AVE_HEVC_EncodeMultiFrame", v44);
    }
  }
  return v44;
}

void AVE_PrepareCropParams(uint64_t a1)
{
  CFDictionaryRef v2 = (int *)(a1 + 183564);
  uint64_t v3 = a1 + 103116;
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v4 = AVE_Log_CheckConsole(0x14u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v4)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_PrepareCropParams\n", CurrTime, 20, LevelStr);
      __uint64_t v7 = AVE_GetCurrTime();
      uint64_t v29 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PrepareCropParams", v7, 20, v29);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PrepareCropParams", CurrTime, 20, LevelStr);
    }
  }
  unsigned int v8 = *(_DWORD *)(a1 + 1880);
  unsigned int v9 = *(_DWORD *)(a1 + 1884);
  *(unsigned char *)uint64_t v3 = 0;
  *(void *)(a1 + 103128) = 0;
  *(void *)(a1 + 103120) = 0;
  if (v9 < 0x40 || (v9 & 0xF) != 0)
  {
    if (*v2 >= 11) {
      v2[359] = v9;
    }
    unsigned int v11 = (v9 + 15) & 0xFFFFFFF0;
    if (v11 <= 0x40) {
      unsigned int v11 = 64;
    }
    *(_DWORD *)(a1 + 1884) = v11;
    *(unsigned char *)uint64_t v3 = 1;
    *(_DWORD *)(v3 + 16) = v11 - v9;
  }
  if (v8 < 0xA0 || (v8 & 0xF) != 0)
  {
    if (*v2 >= 11) {
      v2[358] = v8;
    }
    unsigned int v12 = (v8 + 15) & 0xFFFFFFF0;
    if (v12 <= 0xA0) {
      unsigned int v12 = 160;
    }
    *(_DWORD *)(a1 + 1880) = v12;
    *(unsigned char *)uint64_t v3 = 1;
    *(_DWORD *)(v3 + 8) = v12 - v8;
  }
  if (AVE_Log_CheckLevel(0x16u, 7))
  {
    int v13 = AVE_Log_CheckConsole(0x16u);
    __uint64_t v14 = AVE_GetCurrTime();
    uint64_t v15 = AVE_Log_GetLevelStr(7);
    if (v13)
    {
      printf("%lld %d AVE %s: FIG: input -> %dx%d\n", v14, 22, v15, v8, v9);
      __uint64_t v16 = AVE_GetCurrTime();
      unint64_t v30 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: input -> %dx%d", v16, 22, v30, v8, v9);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: input -> %dx%d", v14, 22, v15, v8, v9);
    }
  }
  if (AVE_Log_CheckLevel(0x16u, 7))
  {
    int v17 = AVE_Log_CheckConsole(0x16u);
    __uint64_t v18 = AVE_GetCurrTime();
    int v19 = AVE_Log_GetLevelStr(7);
    int v20 = *(_DWORD *)(a1 + 1884);
    if (v17)
    {
      printf("%lld %d AVE %s: FIG: input multiple -> %dx%d\n", v18, 22, v19, *(_DWORD *)(a1 + 1880), v20);
      __uint64_t v21 = AVE_GetCurrTime();
      __uint64_t v22 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: input multiple -> %dx%d", v21, 22, v22, *(_DWORD *)(a1 + 1880), *(_DWORD *)(a1 + 1884));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: input multiple -> %dx%d", v18, 22, v19, *(_DWORD *)(a1 + 1880), v20);
    }
  }
  if (AVE_Log_CheckLevel(0x16u, 7))
  {
    int v23 = AVE_Log_CheckConsole(0x16u);
    __uint64_t v24 = AVE_GetCurrTime();
    __uint64_t v25 = AVE_Log_GetLevelStr(7);
    int v26 = *(_DWORD *)(v3 + 8);
    if (v23)
    {
      printf("%lld %d AVE %s: FIG: frame_crop_bottom_offset %d frame_crop_right_offset %d\n", v24, 22, v25, *(_DWORD *)(v3 + 16), v26);
      __uint64_t v27 = AVE_GetCurrTime();
      __uint64_t v28 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: frame_crop_bottom_offset %d frame_crop_right_offset %d", v27, 22, v28, *(_DWORD *)(v3 + 16), *(_DWORD *)(v3 + 8));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: frame_crop_bottom_offset %d frame_crop_right_offset %d", v24, 22, v25, *(_DWORD *)(v3 + 16), v26);
    }
  }
}

double AVE_SetEncoderDefault(uint64_t a1)
{
  int v23 = (_DWORD *)(a1 + 183564);
  uint64_t v2 = a1 + 137652;
  uint64_t v26 = a1 + 118396;
  uint64_t v27 = a1 + 126884;
  uint64_t v3 = a1 + 109576;
  uint64_t v4 = a1 + 102544;
  uint64_t v24 = a1 + 87668;
  __uint64_t v25 = (unsigned char *)(a1 + 92812);
  uint64_t v5 = a1 + 19476;
  uint64_t v6 = a1 + 18808;
  uint64_t v7 = a1 + 18448;
  uint64_t v8 = a1 + 17868;
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v9 = AVE_Log_CheckConsole(0x14u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v9)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_SetEncoderDefault\n", CurrTime, 20, LevelStr);
      __uint64_t v12 = AVE_GetCurrTime();
      __uint64_t v21 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetEncoderDefault", v12, 20, v21);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetEncoderDefault", CurrTime, 20, LevelStr);
    }
  }
  *(unsigned char *)(v7 + 192) = 0;
  *(_OWORD *)(v7 + 200) = xmmword_1BA78F6F0;
  *(void *)(a1 + 18664) = 31;
  *(unsigned char *)(v7 + 228) = 0;
  *(_DWORD *)(v7 + 232) = 1;
  *(_DWORD *)(v7 + 236) = 16777473;
  *(unsigned char *)(v7 + 240) = 1;
  *(void *)(a1 + 18736) = 0;
  *(_OWORD *)(a1 + 18689) = 0u;
  *(_OWORD *)(a1 + 18705) = 0u;
  *(_OWORD *)(a1 + 18721) = 0u;
  *(unsigned char *)(v7 + 304) = 1;
  *(void *)(a1 + 18744) = 0xC800000002;
  *(_WORD *)(v7 + 321) = 0;
  *(unsigned char *)(v7 + 326) = 0;
  int v22 = *(_DWORD *)(a1 + 1884);
  *(_DWORD *)(v7 + 328) = 2
                        * (((v22 + 31) >> 5) * ((*(_DWORD *)(a1 + 1880) + 31) >> 5) > 0x398);
  *(_WORD *)(v7 + 332) = 0;
  *(_OWORD *)(a1 + 18784) = xmmword_1BA78F700;
  *(void *)(a1 + 18888) = 0;
  *(_DWORD *)(a1 + 18896) = 0;
  *(void *)(a1 + 18872) = 0;
  *(void *)(a1 + 18880) = 0;
  *(_DWORD *)(v6 + 60) = -1;
  *(_DWORD *)(v6 + 46) = 0x10000;
  *(unsigned char *)(v6 + 50) = 0;
  *(void *)(v6 + 38) = 0x100000100;
  *(_WORD *)(v6 + 52) = 0;
  *(_DWORD *)(v7 + 352) = 1;
  *(unsigned char *)(v6 + 54) = 0;
  *(_DWORD *)(v6 + 124) = 0x10000;
  *(void *)(v6 + 652) = 0;
  *(_DWORD *)(v5 + 684) = 0;
  bzero((void *)(a1 + 19484), 0x2A0uLL);
  bzero((void *)(a1 + 18944), 0x201uLL);
  for (uint64_t i = 0; i != 672; i += 112)
    *(void *)(a1 + 19484 + i) = 0xFFFFFFFF00000001;
  *(void *)uint64_t v5 = 0x100000006;
  *(_DWORD *)(v5 + 680) = 1;
  *(unsigned char *)(v5 + 689) = 1;
  *(unsigned char *)(v8 + 452) = 0;
  *(unsigned char *)(v5 + 734) = 1;
  *(_DWORD *)(v6 + 132) = 0;
  *(_DWORD *)(v5 + 700) = 0;
  *(_DWORD *)(v5 + 716) = 0;
  *(unsigned char *)(v5 + 724) = 0;
  *(_DWORD *)(v5 + 728) = 0;
  *(void *)(a1 + 18912) = -1;
  *(void *)(a1 + 18920) = -1;
  *(_DWORD *)(a1 + 18928) = -1;
  *(void *)(a1 + 1928) = 0;
  *(_DWORD *)(a1 + 1920) = 0;
  *(unsigned char *)(a1 + 1924) = 0;
  *(_DWORD *)(a1 + 1944) = 0;
  int v14 = *(_DWORD *)(a1 + 2024);
  *(_DWORD *)(v8 + 524) = 0;
  *(_DWORD *)(a1 + 2024) = v14 | 7;
  *(_DWORD *)(a1 + 2012) = -1;
  *(_DWORD *)uint64_t v8 = 0;
  *(_WORD *)(v8 + 4) = 4 * (*v23 > 5);
  *(_WORD *)(v8 + 6) = 0;
  *(unsigned char *)(v8 + 8) = 0;
  *(_DWORD *)(v8 + 16) = 2;
  *(unsigned char *)(v8 + 10) = 0;
  *(_WORD *)(a1 + 1925) = 0;
  *(unsigned char *)(v8 + 14) = 0;
  *(_DWORD *)(v8 + 184) = 1;
  *(unsigned char *)(v8 + 188) = 0;
  *(void *)(v8 + 192) = 1;
  *(_DWORD *)(v8 + 200) = v22;
  *(_DWORD *)(v8 + 456) = 16;
  *(_WORD *)(v8 + 460) = 0;
  *(_WORD *)(v8 + 144) = 256;
  *(_WORD *)(v8 + 468) = 0;
  *(unsigned char *)(v8 + 481) = 0;
  *(_WORD *)(v8 + 520) = 0;
  *(unsigned char *)(v8 + 528) = 0;
  *(_DWORD *)(v8 + 532) = 0;
  *(void *)(a1 + 18404) = -1;
  *(void *)(a1 + 18412) = -1;
  *(_DWORD *)(v8 + 564) = 0;
  *(void *)(a1 + 1936) = 0;
  *(unsigned char *)(v8 + 577) = 5;
  *(_DWORD *)uint64_t v7 = 1;
  *(void *)(a1 + 18460) = 0;
  *(void *)(a1 + 18452) = 0;
  *(void *)(a1 + 18474) = 0;
  *(void *)(a1 + 18468) = 0;
  *(void *)(v7 + 36) = 0x1000000001;
  *(void *)(a1 + 18624) = 8;
  *(_DWORD *)(v8 + 556) = 2;
  *(unsigned char *)(v7 + 172) = 0;
  *(_WORD *)(v8 + 20) = 3;
  *(_WORD *)(v8 + 24) = 0;
  *(unsigned char *)(v8 + 12) = 1;
  *(void *)(v8 + 48) = 0x8FFFFFFFFLL;
  *(_DWORD *)(v8 + 36) = 0xFFFF;
  *(unsigned char *)(v8 + 482) = 0;
  *(unsigned char *)(v8 + 552) = 21;
  *(_DWORD *)(a1 + 192) = ((double)(*(_DWORD *)(a1 + 1884) * *(_DWORD *)(a1 + 1880))
                                       * 1.5
                                       * 0.075
                                       * 30.0);
  *(_DWORD *)uint64_t v6 = 1;
  *(_DWORD *)(a1 + 228) = 0;
  *(_DWORD *)(v5 + 884) = 0;
  *(void *)(a1 + 2028) = 0;
  *(void *)(a1 + 2040) = 0xBFF0000000000000;
  *(void *)(a1 + 2048) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 196) = 1;
  *(_DWORD *)(a1 + 240) = 1065353216;
  *(void *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 244) = 1;
  *(_WORD *)(a1 + 252) = 0;
  *(_DWORD *)(a1 + 246) = 16843009;
  *(_DWORD *)(a1 + 260) = 1;
  *(unsigned char *)(a1 + 254) = 0;
  *(void *)&long long v15 = 0x40000000400;
  *((void *)&v15 + 1) = 0x40000000400;
  *(_OWORD *)(a1 + 268) = v15;
  *(void *)(a1 + 284) = 1024;
  *(unsigned char *)(a1 + 216) = 1;
  *(_DWORD *)(a1 + 220) = 0;
  if (!*(unsigned char *)(v7 + 320)) {
    *(_DWORD *)(a1 + 292) = 0;
  }
  *(_DWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  *(void *)(a1 + 1824) = 0x1A0000001ALL;
  *(_OWORD *)(a1 + 440) = unk_1BA78FAB4;
  *(_OWORD *)(a1 + 376) = unk_1BA78FA74;
  *(_OWORD *)(a1 + 392) = xmmword_1BA78FA84;
  *(_OWORD *)(a1 + 408) = unk_1BA78FA94;
  *(_OWORD *)(a1 + 424) = xmmword_1BA78FAA4;
  *(_OWORD *)(a1 + 312) = unk_1BA78FA34;
  *(_OWORD *)(a1 + 328) = xmmword_1BA78FA44;
  *(_OWORD *)(a1 + 344) = unk_1BA78FA54;
  *(_OWORD *)(a1 + 360) = xmmword_1BA78FA64;
  *(_OWORD *)(a1 + 296) = qp2Lambda;
  *(_OWORD *)(a1 + 456) = xmmword_1BA78FAC4;
  *(_OWORD *)(a1 + 472) = unk_1BA78FAD4;
  *(_OWORD *)(a1 + 648) = unk_1BA78FB84;
  *(_OWORD *)(a1 + 664) = xmmword_1BA78FB94;
  *(_OWORD *)(a1 + 680) = unk_1BA78FBA4;
  *(_OWORD *)(a1 + 696) = xmmword_1BA78FBB4;
  *(_OWORD *)(a1 + 584) = unk_1BA78FB44;
  *(_OWORD *)(a1 + 600) = xmmword_1BA78FB54;
  *(_OWORD *)(a1 + 616) = unk_1BA78FB64;
  *(_OWORD *)(a1 + 632) = xmmword_1BA78FB74;
  *(_OWORD *)(a1 + 520) = *(_OWORD *)algn_1BA78FB04;
  *(_OWORD *)(a1 + 536) = xmmword_1BA78FB14;
  *(void *)&long long v16 = 0xC0000000CLL;
  *((void *)&v16 + 1) = 0xC0000000CLL;
  *(_OWORD *)(a1 + 1840) = v16;
  *(_WORD *)(a1 + 255) = 257;
  *(unsigned char *)(a1 + 257) = 0;
  *(void *)(a1 + 1816) = 0x403A000000000000;
  *(_DWORD *)(a1 + 1832) = 26;
  *(_OWORD *)(a1 + 552) = unk_1BA78FB24;
  *(_OWORD *)(a1 + 568) = xmmword_1BA78FB34;
  *(_OWORD *)(a1 + 488) = xmmword_1BA78FAE4;
  *(_OWORD *)(a1 + 504) = qp2LambdaArray;
  memcpy((void *)(a1 + 712), &lambdaArray, 0x414uLL);
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(void *)(a1 + 1808) = 0;
  *(unsigned char *)(a1 + 250) = 0;
  *(_OWORD *)(a1 + 1756) = xmmword_1BA78F710;
  *(unsigned char *)(a1 + 1772) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_DWORD *)(v6 + 656) = 30;
  *(unsigned char *)(v8 + 576) = 0;
  *(void *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 1864) = 0;
  *(_DWORD *)(v5 + 880) = 0;
  *(unsigned char *)(v5 + 735) = 0;
  *(_WORD *)(v8 + 20) = 0;
  *(_DWORD *)(v5 + 896) = 0;
  *(_WORD *)(v5 + 900) = 257;
  *(_DWORD *)(v5 + 908) = 0;
  *(unsigned char *)(v5 + 912) = 0;
  *(_OWORD *)(a1 + 22108) = 0u;
  *(_OWORD *)(a1 + 22096) = 0u;
  *(_OWORD *)(a1 + 22080) = 0u;
  *(_OWORD *)(a1 + 22064) = 0u;
  *(_OWORD *)(a1 + 22048) = 0u;
  *(_OWORD *)(a1 + 22032) = 0u;
  *(_DWORD *)(v5 + 2552) = 4;
  double result = 0.0;
  *(void *)(v5 + 2648) = 0;
  *(unsigned char *)(v5 + 2548) = 0;
  *(unsigned char *)uint64_t v24 = 0;
  unint64_t v18 = *(void *)(a1 + 20168) & 0xFFFFFFFFFFFFFFCFLL | 0x20;
  *(void *)(v24 + 4) = 0x5DC0000003E9;
  *(unsigned char *)(v24 + 12) = 0;
  *(_DWORD *)(v24 + 20) = 0;
  *__uint64_t v25 = 0;
  *(void *)(a1 + 20392) = 0;
  *(_DWORD *)(v5 + 924) = 1;
  *(_WORD *)(v5 + 960) = 1;
  *(_DWORD *)(v5 + 962) = 16843009;
  *(_DWORD *)(v5 + 966) = 65793;
  *(_DWORD *)(v5 + 976) = 0;
  *(void *)(a1 + 20896) = 0x101010101010101;
  *(void *)(a1 + 20864) = 0x101010101010101;
  *(void *)&long long v19 = 0x101010101010101;
  *((void *)&v19 + 1) = 0x101010101010101;
  *(_OWORD *)(a1 + 20848) = v19;
  *(_OWORD *)(a1 + 20832) = v19;
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(a1 + 102540) = 0;
  *(void *)(a1 + 102532) = 0;
  *(_DWORD *)(v4 + 8) = 1;
  *(_DWORD *)(v4 + 44) = 16842753;
  *(_DWORD *)(v4 + 50) = 65793;
  *(_DWORD *)(v4 + 60) = 0;
  *(void *)(v4 + 544) = 0x100000000;
  *(_DWORD *)(v4 + 552) = 0;
  *(void *)(v4 + 592) = 0;
  *(_DWORD *)(v4 + 600) = 7;
  *(unsigned char *)(v4 + 604) = 0;
  *(_OWORD *)(a1 + 103204) = 0u;
  *(_OWORD *)(a1 + 103220) = 0u;
  *(_OWORD *)(a1 + 103172) = 0u;
  *(_OWORD *)(a1 + 103188) = 0u;
  *(_OWORD *)(a1 + 103156) = 0u;
  *(_DWORD *)(v4 + 608) = 4;
  *(_OWORD *)(v4 + 692) = xmmword_1BA78F720;
  *(void *)(v4 + 708) = 1;
  *(unsigned char *)(v4 + 716) = 0;
  *(_WORD *)uint64_t v3 = 256;
  *(unsigned char *)(v3 + 2) = 0;
  *(void *)(v3 + 4) = 0x700000007;
  *(_DWORD *)(v3 + 12) = 1;
  *(_WORD *)(v3 + 20) = 1;
  *(_WORD *)(v3 + 156) = 1;
  *(_WORD *)(v3 + 160) = 0;
  *(_DWORD *)(v3 + 164) = 0;
  *(_WORD *)(v3 + 176) = 256;
  *(_DWORD *)(v3 + 180) = 5;
  *(unsigned char *)(v3 + 188) = 1;
  *(void *)(v3 + 192) = 0x200000002;
  *(_DWORD *)(v3 + 200) = 2;
  *(unsigned char *)(v3 + 204) = 0;
  *(unsigned char *)(v3 + 236) = 0;
  *(void *)(v3 + 240) = 0x5DC0000003E9;
  *(void *)(a1 + 20168) = v18;
  *(unsigned char *)(v3 + 248) = 0;
  *(_DWORD *)(v3 + 256) = 257;
  *(unsigned char *)(v3 + 260) = 1;
  *(_OWORD *)(v3 + 264) = xmmword_1BA78F730;
  *(_OWORD *)(v3 + 280) = xmmword_1BA78F740;
  *(_DWORD *)(v3 + 296) = 48827;
  *(unsigned char *)(v3 + 300) = 0;
  *(unsigned char *)(v3 + 219) = 0;
  *(unsigned char *)(v3 + 328) = 0;
  *(_DWORD *)(v3 + 8816) = 0;
  *(_WORD *)uint64_t v26 = 0;
  *(_WORD *)(a1 + 118388) = 0;
  *(void *)(a1 + 118380) = 0;
  *(void *)(a1 + 118406) = 0;
  *(void *)(a1 + 118400) = 0;
  *(_OWORD *)(v26 + 24) = xmmword_1BA78F750;
  *(_OWORD *)(v26 + 56) = xmmword_1BA78F750;
  *(void *)&long long v20 = 0xC0000000CLL;
  *((void *)&v20 + 1) = 0xC0000000CLL;
  *(_OWORD *)(v26 + 40) = v20;
  *(_OWORD *)(v26 + 72) = v20;
  *(_DWORD *)(v26 + 89) = 0;
  *(unsigned char *)(v26 + 93) = 1;
  *(_DWORD *)(v26 + 2157) = 256;
  *(unsigned char *)(v26 + 2172) = 0;
  *(unsigned char *)(v26 + 18) = 1;
  *(_DWORD *)(v26 + 20) = 2;
  *(unsigned char *)(v27 + 17) = 0;
  *(unsigned char *)(v26 + 88) = 0;
  *(_DWORD *)(v27 + 20) = 0;
  *(_DWORD *)uint64_t v27 = 0;
  *(unsigned char *)(v27 + 4) = 0;
  *(unsigned char *)uint64_t v2 = 1;
  *(_DWORD *)(v2 + 4) = 0;
  *(unsigned char *)(v2 + 1) = 0;
  *(_DWORD *)(v2 + 16) = 2;
  *(_WORD *)(v2 + 273) = 257;
  *(_DWORD *)(v2 + 928) = 0;
  *(unsigned char *)(v2 + 952) = 0;
  *(_DWORD *)(v2 + 28) = 0;
  *(unsigned char *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 36) = 0;
  *(unsigned char *)(v2 + 272) = 0;
  *(_WORD *)(v2 + 412) = 0;
  *(unsigned char *)(a1 + 137935) = 0;
  *(void *)(a1 + 137927) = 0;
  *(_WORD *)(v2 + 941) = 0;
  *(_DWORD *)(v2 + 848) = 3;
  *(void *)(v2 + 1224) = -1;
  *(unsigned char *)(v2 + 414) = 1;
  *(void *)(a1 + 1872) = 0;
  return result;
}

uint64_t AVE_HEVC_Encode()
{
  MEMORY[0x1F4188790]();
  uint64_t v1 = v0;
  int v3 = v2;
  uint64_t v205 = v4;
  theuint64_t Dict = v5;
  uint64_t v7 = v6;
  int v9 = v8;
  uint64_t v250 = *MEMORY[0x1E4F143B8];
  CVPixelBufferRef v234 = v10;
  char v233 = 0;
  int v232 = 0;
  int v231 = 0;
  long long v228 = 0uLL;
  unsigned int v11 = (char *)AVE_DW_Get();
  uint64_t DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  int v13 = (unsigned int *)(DerivedStorage + 22930);
  if (!DerivedStorage)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v18 = AVE_Log_CheckConsole(3u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", CurrTime, 3, LevelStr, "AVE_HEVC_Encode", 12128, "encoderPrivateStorage");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.");
    }
    goto LABEL_36;
  }
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v14 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v15 = AVE_GetCurrTime();
    long long v16 = AVE_Log_GetLevelStr(7);
    if (v14)
    {
      printf("%lld %d AVE %s: %s Enter\n", v15, 20, v16, "AVE_HEVC_Encode");
      __uint64_t v17 = AVE_GetCurrTime();
      int v193 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Enter", v17, 20, v193, "AVE_HEVC_Encode");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter", v15, 20, v16, "AVE_HEVC_Encode");
    }
  }
  if (*((_DWORD *)DerivedStorage + 45878)) {
    DerivedStorage[22940] = (const void *)AVE_GetCurrTime();
  }
  if (!v234)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v33 = AVE_Log_CheckConsole(3u);
      __uint64_t v34 = AVE_GetCurrTime();
      __uint64_t v35 = AVE_Log_GetLevelStr(4);
      if (v33)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: imageBuffer = NULL.\n", v34, 3, v35, "AVE_HEVC_Encode", 12136, "imageBuffer");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: imageBuffer = NULL.");
    }
    goto LABEL_88;
  }
  __uint64_t v21 = (char *)DerivedStorage + 18420;
  __uint64_t v22 = AVE_GetCurrTime();
  long long v229 = *v9;
  uint64_t v230 = *((void *)v9 + 2);
  uint64_t v201 = *v7;
  __uint64_t v203 = v22;
  uint64_t v23 = v7[1];
  uint64_t v199 = v7[2];
  *(void *)&long long v228 = v229;
  DWORD2(v228) = DWORD2(v229);
  AVE_Time_Conv(0, (uint64_t)&v228);
  if (AVE_Log_CheckLevel(0x33u, 7))
  {
    int v24 = AVE_Log_CheckConsole(0x33u);
    __uint64_t v25 = AVE_GetCurrTime();
    uint64_t v26 = AVE_Log_GetLevelStr(7);
    uint64_t v27 = *((unsigned int *)DerivedStorage + 45893);
    uint64_t v28 = *((unsigned int *)DerivedStorage + 45861);
    uint64_t v29 = *(void *)v9;
    uint64_t v30 = *((unsigned int *)v9 + 2);
    if (v24)
    {
      printf("%lld %d AVE %s: %s:%d %d %d timestamp %lld %d 0x%x %lld -> %lld %d | duration %lld %d 0x%x %lld\n", v25, 51, v26, "AVE_HEVC_Encode", 12159, v27, v28, v29, v30, *((_DWORD *)v9 + 3), *((void *)v9 + 2), (void)v228, DWORD2(v228), *v7, *((_DWORD *)v7 + 2), *((_DWORD *)v7 + 3), v7[2]);
      __uint64_t v31 = AVE_GetCurrTime();
      unint64_t v32 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s:%d %d %d timestamp %lld %d 0x%x %lld -> %lld %d | duration %lld %d 0x%x %lld", v31, 51, v32, "AVE_HEVC_Encode", 12159, *((unsigned int *)DerivedStorage + 45893), *((unsigned int *)DerivedStorage + 45861), *(void *)v9, *((unsigned int *)v9 + 2));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %d %d timestamp %lld %d 0x%x %lld -> %lld %d | duration %lld %d 0x%x %lld", v25, 51, v26, "AVE_HEVC_Encode", 12159, v27, v28, v29, v30);
    }
  }
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v234);
  *((_DWORD *)DerivedStorage + 46378) = PixelFormatType;
  if (!*((_DWORD *)DerivedStorage + 45861))
  {
    __uint64_t v237 = (const void **)DerivedStorage[235];
    uint64_t v37 = AVE_PixelFmt_FindByType(PixelFormatType);
    if (!v37)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v55 = AVE_Log_CheckConsole(3u);
        __uint64_t v56 = AVE_GetCurrTime();
        int v57 = AVE_Log_GetLevelStr(4);
        if (v55)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to find pixel format %p %d 0x%x\n", v56, 3, v57, "AVE_HEVC_Encode", 12175, "pPixelFmt != __null", DerivedStorage, *((_DWORD *)DerivedStorage + 45893), *((_DWORD *)DerivedStorage + 46378));
          __uint64_t v56 = AVE_GetCurrTime();
          int v57 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to find pixel format %p %d 0x%x", v56, 3, v57, "AVE_HEVC_Encode", 12175, "pPixelFmt != __null", DerivedStorage, *((unsigned int *)DerivedStorage + 45893), *((unsigned int *)DerivedStorage + 46378));
      }
      goto LABEL_88;
    }
    if (v11[792]) {
      unsigned int v38 = v11 + 792;
    }
    else {
      unsigned int v38 = 0;
    }
    if (DerivedStorage[22948]) {
      int v39 = 2;
    }
    else {
      int v39 = 1;
    }
    AVE_Dump_Init((uint64_t)DerivedStorage[22957], v38, *((_DWORD *)DerivedStorage + 45890), *((_DWORD *)DerivedStorage + 4690), *((_DWORD *)v11 + 196), *((_DWORD *)v11 + 197), &v237, v39, *((_DWORD *)v37 + 3), *((_DWORD *)v37 + 1), *((_DWORD *)DerivedStorage + 48));
    CVPixelBufferGetIOSurface(v234);
    DerivedStorage[239] = (const void *)IOSurfaceGetProtectionOptions();
  }
  AVE_Dump_WriteInput(DerivedStorage[22957], *((_DWORD *)DerivedStorage + 45899), v234);
  unsigned int v40 = *v13;
  if (*v13 == 30566)
  {
    if (AVE_ISP_CheckMetadata(v234)) {
      int v46 = 1;
    }
    else {
      int v46 = 2;
    }
    *((_DWORD *)DerivedStorage + 4701) = v46;
    if (AVE_ManageSessionSettings((uint64_t)DerivedStorage))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v47 = AVE_Log_CheckConsole(3u);
        __uint64_t v48 = AVE_GetCurrTime();
        __uint64_t v49 = AVE_Log_GetLevelStr(4);
        if (v47)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed\n", v48, 3, v49, "AVE_HEVC_Encode", 12335, "err == noErr");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed");
      }
      goto LABEL_88;
    }
    AVE_UpdateCropParams((uint64_t)DerivedStorage, v234);
    if (AVE_HEVC_VerifyImageBuffer((uint64_t)DerivedStorage, &v234, &v233, &v232, &v231, 1))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v58 = AVE_Log_CheckConsole(3u);
        __uint64_t v42 = AVE_GetCurrTime();
        int v43 = AVE_Log_GetLevelStr(4);
        if (!v58)
        {
LABEL_87:
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_HEVC_VerifyImageBuffer failed.");
          goto LABEL_88;
        }
        int v44 = 12345;
LABEL_62:
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_HEVC_VerifyImageBuffer failed.\n", v42, 3, v43, "AVE_HEVC_Encode", v44, "err == noErr");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
        goto LABEL_87;
      }
LABEL_88:
      uint64_t v45 = 4294954394;
      goto LABEL_89;
    }
    AVE_SetEncoderBasedOnFirstFrame((uint64_t)DerivedStorage, *((_DWORD *)DerivedStorage + 4701) == 2);
    if (*((_DWORD *)DerivedStorage + 4701) == 2)
    {
      int v63 = *((_DWORD *)DerivedStorage + 57);
      if (v63 < 1) {
        int v63 = 30;
      }
      if (!*((unsigned char *)DerivedStorage + 1772)
        && (int)(((*((_DWORD *)DerivedStorage + 471) + 15) >> 4)
               * v63
               * ((*((_DWORD *)DerivedStorage + 470) + 15) >> 4)) > 1943999)
      {
        *((_DWORD *)DerivedStorage + 469) &= 0xFFFFFF1F;
        *((unsigned char *)DerivedStorage + 20210) = 0;
      }
    }
    if (AVE_ValidateEncoderParameters(DerivedStorage))
    {
      if (!AVE_Log_CheckLevel(3u, 4)) {
        goto LABEL_88;
      }
      int v64 = AVE_Log_CheckConsole(3u);
      __uint64_t v60 = AVE_GetCurrTime();
      __uint64_t v61 = AVE_Log_GetLevelStr(4);
      if (v64)
      {
        int v62 = 12373;
        goto LABEL_82;
      }
LABEL_104:
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ValidateEncoderParameters failed");
      goto LABEL_88;
    }
    AVE_PrepareVideoAndSequenceHeader((uint64_t)DerivedStorage, v234);
    AVE_PreparePictureHeader(DerivedStorage);
    if (*((_DWORD *)DerivedStorage + 45878))
    {
      DerivedStorage[22941] = (const void *)AVE_GetCurrTime();
      if (AVE_Log_CheckLevel(0x18u, 6))
      {
        int v77 = AVE_Log_CheckConsole(0x18u);
        __uint64_t v78 = AVE_GetCurrTime();
        uint64_t v79 = AVE_Log_GetLevelStr(6);
        int v80 = *((_DWORD *)DerivedStorage + 45893);
        int64_t v81 = (unsigned char *)DerivedStorage[22941] - (unsigned char *)DerivedStorage[22940];
        if (v77)
        {
          printf("%lld %d AVE %s: FIG: %d (%d) Init setup  took %0lld us\n", v78, 24, v79, v80, *((_DWORD *)DerivedStorage + 45861), v81);
          __uint64_t v82 = AVE_GetCurrTime();
          unsigned int v83 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: %d (%d) Init setup  took %0lld us", v82, 24, v83, *((_DWORD *)DerivedStorage + 45893), *((_DWORD *)DerivedStorage + 45861), (unsigned char *)DerivedStorage[22941] - (unsigned char *)DerivedStorage[22940]);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: %d (%d) Init setup  took %0lld us", v78, 24, v79, v80, *((_DWORD *)DerivedStorage + 45861), v81);
        }
      }
      DerivedStorage[22940] = (const void *)AVE_GetCurrTime();
    }
    long long v246 = 0u;
    long long v245 = 0u;
    long long v244 = 0u;
    long long v243 = 0u;
    __uint64_t v237 = DerivedStorage + 234;
    int v238 = DerivedStorage + 235;
    int v239 = DerivedStorage + 2330;
    __uint64_t v240 = DerivedStorage + 24;
    long long v241 = *((_OWORD *)DerivedStorage + 11478);
    int v242 = DerivedStorage[22958];
    *((void *)&v244 + 1) = DerivedStorage + 2546;
    *(void *)&long long v245 = DerivedStorage + 12815;
    *((void *)&v245 + 1) = (char *)DerivedStorage + 110444;
    *(void *)&long long v246 = DerivedStorage + 14796;
    *((void *)&v246 + 1) = (char *)DerivedStorage + 128004;
    __uint64_t v247 = DerivedStorage + 17205;
    int v248 = DerivedStorage + 19924;
    __uint64_t v249 = v203;
    __uint64_t v85 = v203;
    if (AVE_USL_Drv_Start((uint64_t)DerivedStorage[3], (uint64_t)&v237, (uint64_t)(DerivedStorage + 4), (uint64_t)*DerivedStorage, 0, (uint64_t)DerivedStorage[2], *((unsigned __int8 *)DerivedStorage + 183544), (uint64_t)DerivedStorage[22948], (uint64_t)(DerivedStorage + 8), (unsigned int *)DerivedStorage + 5044, (char *)DerivedStorage + 19476))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v90 = AVE_Log_CheckConsole(3u);
        __uint64_t v87 = AVE_GetCurrTime();
        int v88 = AVE_Log_GetLevelStr(4);
        if (!v90)
        {
LABEL_228:
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Start failed.");
          goto LABEL_36;
        }
        int v89 = 12435;
LABEL_124:
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Start failed.\n", v87, 3, v88, "AVE_HEVC_Encode", v89, "err == noErr");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
        goto LABEL_228;
      }
LABEL_36:
      uint64_t v45 = 4294954384;
      goto LABEL_89;
    }
  }
  else
  {
    if (v40 != 30567)
    {
      if (v40 != 30568)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v52 = AVE_Log_CheckConsole(3u);
          __uint64_t v53 = AVE_GetCurrTime();
          int v54 = AVE_Log_GetLevelStr(4);
          if (v52)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_H264EncodeFrame encoderPrivateStorage->SessionStatus = 0x%08x.\n", v53, 3, v54, "AVE_HEVC_Encode", 12453, "false", *v13);
            __uint64_t v53 = AVE_GetCurrTime();
            int v54 = AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_H264EncodeFrame encoderPrivateStorage->SessionStatus = 0x%08x.", v53, 3, v54, "AVE_HEVC_Encode", 12453, "false", *v13);
        }
        goto LABEL_36;
      }
      if (AVE_HEVC_VerifyImageBuffer((uint64_t)DerivedStorage, &v234, &v233, &v232, &v231, 0))
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v41 = AVE_Log_CheckConsole(3u);
          __uint64_t v42 = AVE_GetCurrTime();
          int v43 = AVE_Log_GetLevelStr(4);
          if (!v41) {
            goto LABEL_87;
          }
          int v44 = 12202;
          goto LABEL_62;
        }
        goto LABEL_88;
      }
      goto LABEL_131;
    }
    if (AVE_ISP_CheckMetadata(v234)) {
      int v50 = 1;
    }
    else {
      int v50 = 2;
    }
    *((_DWORD *)DerivedStorage + 4701) = v50;
    AVE_UpdateCropParams((uint64_t)DerivedStorage, v234);
    if (AVE_HEVC_VerifyImageBuffer((uint64_t)DerivedStorage, &v234, &v233, &v232, &v231, 1))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v51 = AVE_Log_CheckConsole(3u);
        __uint64_t v42 = AVE_GetCurrTime();
        int v43 = AVE_Log_GetLevelStr(4);
        if (!v51) {
          goto LABEL_87;
        }
        int v44 = 12219;
        goto LABEL_62;
      }
      goto LABEL_88;
    }
    AVE_SetEncoderBasedOnFirstFrame((uint64_t)DerivedStorage, *((_DWORD *)DerivedStorage + 4701) == 2);
    if (AVE_ValidateEncoderParameters(DerivedStorage))
    {
      if (!AVE_Log_CheckLevel(3u, 4)) {
        goto LABEL_88;
      }
      int v59 = AVE_Log_CheckConsole(3u);
      __uint64_t v60 = AVE_GetCurrTime();
      __uint64_t v61 = AVE_Log_GetLevelStr(4);
      if (v59)
      {
        int v62 = 12229;
LABEL_82:
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_ValidateEncoderParameters failed\n", v60, 3, v61, "AVE_HEVC_Encode", v62, "err == noErr");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
        goto LABEL_104;
      }
      goto LABEL_104;
    }
    AVE_PrepareVideoAndSequenceHeader((uint64_t)DerivedStorage, v234);
    AVE_PreparePictureHeader(DerivedStorage);
    if (*((_DWORD *)DerivedStorage + 45878))
    {
      DerivedStorage[22941] = (const void *)AVE_GetCurrTime();
      if (AVE_Log_CheckLevel(0x18u, 6))
      {
        int v65 = AVE_Log_CheckConsole(0x18u);
        __uint64_t v66 = AVE_GetCurrTime();
        CMTag v67 = AVE_Log_GetLevelStr(6);
        int v68 = *((_DWORD *)DerivedStorage + 45893);
        int64_t v69 = (unsigned char *)DerivedStorage[22941] - (unsigned char *)DerivedStorage[22940];
        if (v65)
        {
          printf("%lld %d AVE %s: FIG: %d (%d) Pre Init setup  took %lld us\n", v66, 24, v67, v68, *((_DWORD *)DerivedStorage + 45861), v69);
          __uint64_t v70 = AVE_GetCurrTime();
          int v71 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: %d (%d) Pre Init setup  took %lld us", v70, 24, v71, *((_DWORD *)DerivedStorage + 45893), *((_DWORD *)DerivedStorage + 45861), (unsigned char *)DerivedStorage[22941] - (unsigned char *)DerivedStorage[22940]);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: %d (%d) Pre Init setup  took %lld us", v66, 24, v67, v68, *((_DWORD *)DerivedStorage + 45861), v69);
        }
      }
      DerivedStorage[22940] = (const void *)AVE_GetCurrTime();
    }
    if (*((_DWORD *)DerivedStorage + 4701) == 2)
    {
      int v84 = *((_DWORD *)DerivedStorage + 57);
      if (v84 < 1) {
        int v84 = 30;
      }
      if (!*((unsigned char *)DerivedStorage + 1772)
        && (int)(((*((_DWORD *)DerivedStorage + 471) + 15) >> 4)
               * v84
               * ((*((_DWORD *)DerivedStorage + 470) + 15) >> 4)) > 1943999)
      {
        *((_DWORD *)DerivedStorage + 469) &= 0xFFFFFF1F;
        *((unsigned char *)DerivedStorage + 20210) = 0;
      }
    }
    long long v246 = 0u;
    long long v245 = 0u;
    long long v244 = 0u;
    long long v243 = 0u;
    __uint64_t v237 = DerivedStorage + 234;
    int v238 = DerivedStorage + 235;
    int v239 = DerivedStorage + 2330;
    __uint64_t v240 = DerivedStorage + 24;
    long long v241 = *((_OWORD *)DerivedStorage + 11478);
    int v242 = DerivedStorage[22958];
    *((void *)&v244 + 1) = DerivedStorage + 2546;
    *(void *)&long long v245 = DerivedStorage + 12815;
    *((void *)&v245 + 1) = (char *)DerivedStorage + 110444;
    *(void *)&long long v246 = DerivedStorage + 14796;
    *((void *)&v246 + 1) = (char *)DerivedStorage + 128004;
    __uint64_t v247 = DerivedStorage + 17205;
    int v248 = DerivedStorage + 19924;
    __uint64_t v249 = v203;
    __uint64_t v85 = v203;
    if (AVE_USL_Drv_Start((uint64_t)DerivedStorage[3], (uint64_t)&v237, (uint64_t)(DerivedStorage + 4), (uint64_t)*DerivedStorage, 0, (uint64_t)DerivedStorage[2], *((unsigned __int8 *)DerivedStorage + 183544), (uint64_t)DerivedStorage[22948], (uint64_t)(DerivedStorage + 8), (unsigned int *)DerivedStorage + 5044, (char *)DerivedStorage + 19476))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v86 = AVE_Log_CheckConsole(3u);
        __uint64_t v87 = AVE_GetCurrTime();
        int v88 = AVE_Log_GetLevelStr(4);
        if (!v86) {
          goto LABEL_228;
        }
        int v89 = 12310;
        goto LABEL_124;
      }
      goto LABEL_36;
    }
  }
  *int v13 = 30568;
  if (!*((_DWORD *)DerivedStorage + 45878)) {
    goto LABEL_138;
  }
  DerivedStorage[22941] = (const void *)AVE_GetCurrTime();
  if (AVE_Log_CheckLevel(0x18u, 6))
  {
    int v91 = AVE_Log_CheckConsole(0x18u);
    __uint64_t v92 = AVE_GetCurrTime();
    uint64_t v93 = AVE_Log_GetLevelStr(6);
    int v94 = *((_DWORD *)DerivedStorage + 45893);
    int64_t v95 = (unsigned char *)DerivedStorage[22941] - (unsigned char *)DerivedStorage[22940];
    if (v91)
    {
      printf("%lld %d AVE %s: FIG: %d (%d) AVE_USL_Drv_Start took %lld us\n", v92, 24, v93, v94, *((_DWORD *)DerivedStorage + 45861), v95);
      __uint64_t v96 = AVE_GetCurrTime();
      uint64_t v97 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_USL_Drv_Start took %lld us", v96, 24, v97, *((_DWORD *)DerivedStorage + 45893), *((_DWORD *)DerivedStorage + 45861), (unsigned char *)DerivedStorage[22941] - (unsigned char *)DerivedStorage[22940]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_USL_Drv_Start took %lld us", v92, 24, v93, v94, *((_DWORD *)DerivedStorage + 45861), v95);
    }
  }
  DerivedStorage[22940] = (const void *)AVE_GetCurrTime();
LABEL_131:
  __uint64_t v85 = v203;
  if (*((_DWORD *)DerivedStorage + 45878) && *v13 == 30568)
  {
    DerivedStorage[22941] = (const void *)AVE_GetCurrTime();
    if (AVE_Log_CheckLevel(0x18u, 6))
    {
      int v98 = AVE_Log_CheckConsole(0x18u);
      __uint64_t v99 = AVE_GetCurrTime();
      CFTypeRef v100 = AVE_Log_GetLevelStr(6);
      int v101 = *((_DWORD *)DerivedStorage + 45893);
      int64_t v102 = (unsigned char *)DerivedStorage[22941] - (unsigned char *)DerivedStorage[22940];
      if (v98)
      {
        printf("%lld %d AVE %s: FIG: %d (%d) AVE_HEVC_VerifyImageBuffer took %lld us\n", v99, 24, v100, v101, *((_DWORD *)DerivedStorage + 45861), v102);
        __uint64_t v103 = AVE_GetCurrTime();
        int v104 = AVE_Log_GetLevelStr(6);
        __uint64_t v85 = v203;
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_HEVC_VerifyImageBuffer took %lld us", v103, 24, v104, *((_DWORD *)DerivedStorage + 45893), *((_DWORD *)DerivedStorage + 45861), (unsigned char *)DerivedStorage[22941] - (unsigned char *)DerivedStorage[22940]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_HEVC_VerifyImageBuffer took %lld us", v99, 24, v100, v101, *((_DWORD *)DerivedStorage + 45861), v102);
      }
    }
    DerivedStorage[22940] = (const void *)AVE_GetCurrTime();
  }
LABEL_138:
  *int v13 = 30568;
  int v208 = 0;
  long long v217 = 0u;
  long long v218 = 0u;
  long long v219 = 0u;
  long long v220 = 0u;
  memset(v221, 0, sizeof(v221));
  long long v222 = 0u;
  memset(v223, 0, sizeof(v223));
  long long v224 = 0u;
  long long v225 = 0u;
  long long v226 = 0u;
  long long v227 = 0u;
  long long v210 = 0u;
  long long v211 = 0u;
  long long v212 = 0u;
  long long v213 = 0u;
  long long v214 = 0u;
  uint64_t v215 = 0;
  bzero(&v237, 0x4AF8uLL);
  if (theDict)
  {
    CFDataRef Value = CFDictionaryGetValue(theDict, @"ResetRCState");
    if (*((_DWORD *)DerivedStorage + 45891) == 26 && (*((unsigned char *)DerivedStorage + 1876) & 0xE0) == 0)
    {
      __uint64_t v106 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44F30]);
      if (v106 && AVE_Log_CheckLevel(0x16u, 6))
      {
        int v119 = AVE_Log_CheckConsole(0x16u);
        __uint64_t v120 = AVE_GetCurrTime();
        long long v121 = AVE_Log_GetLevelStr(6);
        if (v119)
        {
          printf("%lld %d AVE %s: FIG: %p: use scaled source for LRME, %p\n", v120, 22, v121, *DerivedStorage, v106);
          __uint64_t v122 = AVE_GetCurrTime();
          __uint64_t v123 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: %p: use scaled source for LRME, %p", v122, 22, v123, *DerivedStorage, v106);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: %p: use scaled source for LRME, %p", v120, 22, v121, *DerivedStorage, v106);
        }
      }
    }
    else
    {
      __uint64_t v106 = 0;
    }
    if (Value && CFEqual(Value, (CFTypeRef)*MEMORY[0x1E4F1CFD0]))
    {
      __uint64_t v85 = AVE_GetCurrTime();
      __uint64_t v209 = v85;
      AVE_USL_Drv_Complete((uint64_t)DerivedStorage[3], &v209);
    }
    else
    {
      __uint64_t v85 = v203;
    }
  }
  else
  {
    __uint64_t v106 = 0;
  }
  uint64_t v216 = v205;
  *((void *)&v217 + 1) = 0;
  *(void *)&long long v218 = v234;
  *((void *)&v218 + 1) = v106;
  *(_OWORD *)&v221[1] = v229;
  v221[3] = v230;
  *(void *)&long long v222 = v201;
  *((void *)&v222 + 1) = v23;
  v223[0] = v199;
  *(_OWORD *)&v223[1] = v228;
  BYTE8(v224) = *((unsigned char *)DerivedStorage + 183545);
  *(void *)&long long v225 = v85;
  DWORD2(v225) = *((_DWORD *)DerivedStorage + 45899);
  if (*((_DWORD *)DerivedStorage + 4701) == 2)
  {
    AVE_FPS::Add(DerivedStorage[22955], (int *)&v228);
    AVE_ISP_GetMetadata(v234, (double *)&v210);
    AVE_Dump_WriteISPMetadata(DerivedStorage[22957], *((_DWORD *)DerivedStorage + 45899), *((_DWORD *)DerivedStorage + 45861), (double *)&v210);
    if (*((int *)DerivedStorage + 45891) >= 16 && (*((unsigned char *)DerivedStorage + 1876) & 0xE0) != 0)
    {
      int v204 = DerivedStorage;
      int v206 = v1;
      if (*((void *)&v214 + 1) == 0x1FFFFFFFFLL && AVE_Log_CheckLevel(0x16u, 5))
      {
        int v107 = AVE_Log_CheckConsole(0x16u);
        __uint64_t v108 = AVE_GetCurrTime();
        __uint64_t v109 = AVE_Log_GetLevelStr(5);
        if (v107)
        {
          printf("%lld %d AVE %s: FIG: MCTF Ban0Modulation Enabled, but Band0Strength is missing!\n", v108, 22, v109);
          __uint64_t v110 = AVE_GetCurrTime();
          int v195 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: MCTF Ban0Modulation Enabled, but Band0Strength is missing!", v110, 22, v195);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: MCTF Ban0Modulation Enabled, but Band0Strength is missing!", v108, 22, v109);
        }
      }
      if ((HIDWORD(v214) + 1) < 2 || DWORD2(v214) == -1)
      {
        int v150 = *((unsigned __int8 *)v13 + 2076);
        if (*((double *)&v212 + 1) == 0.0 || *((double *)&v211 + 1) == 0.0 || *(double *)&v212 == 0.0)
        {
          if (AVE_Log_CheckLevel(0x1Cu, 7))
          {
            int v162 = AVE_Log_CheckConsole(0x1Cu);
            __uint64_t v163 = AVE_GetCurrTime();
            long long v164 = AVE_Log_GetLevelStr(7);
            unsigned int v165 = v13[1];
            if (v162)
            {
              printf("%lld %d AVE %s: FIG: F %d ISP meta data is missing!\n", v163, 28, v164, v165);
              __uint64_t v166 = AVE_GetCurrTime();
              int v198 = AVE_Log_GetLevelStr(7);
              syslog(3, "%lld %d AVE %s: FIG: F %d ISP meta data is missing!", v166, 28, v198, v13[1]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: F %d ISP meta data is missing!", v163, 28, v164, v165);
            }
          }
          DWORD2(v214) = 255;
          char v170 = *((unsigned char *)v13 + 2076);
        }
        else
        {
          __uint64_t v151 = AVE_DW_Get();
          BOOL v152 = v13[31] == 26 && v214 == 1587;
          double v153 = *((double *)&v212 + 1) * *((double *)&v211 + 1) * *(double *)&v212 / (*(double *)&v213 * 16777216.0);
          int v154 = v152;
          BOOL v155 = v215 == 2;
          if ((v154 & v155) != 0) {
            double v156 = 21.0;
          }
          else {
            double v156 = 32.0;
          }
          if ((v154 & v155) != 0) {
            double v157 = 16.0;
          }
          else {
            double v157 = 24.0;
          }
          if (AVE_Log_CheckLevel(0x16u, 8))
          {
            int v158 = AVE_Log_CheckConsole(0x16u);
            __uint64_t v159 = AVE_GetCurrTime();
            long long v160 = AVE_Log_GetLevelStr(8);
            if (v158)
            {
              printf("%lld %d AVE %s: %s:%d %d %d %d %d, %d.%d %d.%d\n", v159, 22, v160, "AVE_HEVC_Encode", 12596, v13[1], v13[31], v214, v215, (int)v156, (int)(v156 * 100.0) % 100, (int)v157, (int)(v157 * 100.0) % 100);
              __uint64_t v161 = AVE_GetCurrTime();
              int v197 = AVE_Log_GetLevelStr(8);
              syslog(3, "%lld %d AVE %s: %s:%d %d %d %d %d, %d.%d %d.%d", v161, 22, v197, "AVE_HEVC_Encode");
            }
            else
            {
              syslog(3, "%lld %d AVE %s: %s:%d %d %d %d %d, %d.%d %d.%d", v159, 22, v160, "AVE_HEVC_Encode");
            }
          }
          int v167 = v151[333];
          double v168 = (double)v167;
          if (v167 <= 0) {
            double v168 = v156;
          }
          int v169 = 127;
          if (v153 >= v168)
          {
            char v170 = 1;
          }
          else
          {
            char v170 = *((unsigned char *)v13 + 2076) != 0 && v153 >= v157;
            if (v170) {
              int v169 = 127;
            }
            else {
              int v169 = 255;
            }
          }
          DWORD2(v214) = v169;
          *((unsigned char *)v13 + 2076) = v170;
        }
        if (v170)
        {
          int v171 = *((_DWORD *)v204 + 470);
          int v172 = *((_DWORD *)v204 + 471);
          uint64_t v173 = AVE_DW_Get();
          if (*((unsigned char *)v204 + 1772) || (int Slide = *((_DWORD *)v204 + 57), Slide <= 0)) {
            int Slide = (int)AVE_FPS::GetSlide(*((AVE_FPS **)v13 + 25));
          }
          if (v150)
          {
            signed int v175 = v173[334];
            BOOL v176 = v175 <= 0;
            int v177 = 285600;
          }
          else
          {
            signed int v175 = v173[335];
            BOOL v176 = v175 <= 0;
            int v177 = 244800;
          }
          if (v176) {
            signed int v178 = v177;
          }
          else {
            signed int v178 = v175;
          }
          signed int v179 = ((v172 + 31) >> 5) * ((v171 + 31) >> 5) * Slide;
          if (v179 > v178)
          {
            DWORD2(v214) = 255;
            *((unsigned char *)v13 + 2076) = 0;
          }
          if (AVE_Log_CheckLevel(0x1Cu, 8))
          {
            int v180 = v150;
            int v181 = AVE_Log_CheckConsole(0x1Cu);
            __uint64_t v202 = AVE_GetCurrTime();
            __uint64_t v200 = AVE_Log_GetLevelStr(8);
            if (*((unsigned char *)v13 + 2076)) {
              uint64_t v182 = "Enable ";
            }
            else {
              uint64_t v182 = "Disable";
            }
            int TotalCnt = AVE_FPS::GetTotalCnt(*((AVE_FPS **)v13 + 25));
            double Rt = AVE_FPS::GetRt(*((AVE_FPS **)v13 + 25));
            if (v181)
            {
              printf("%lld %d AVE %s: %s MCTF. frameRate: %d cnt %d (%.2f), pixel rate %d threshold %d (prev set: %d)\n", v202, 28, v200, v182, Slide, TotalCnt, Rt, v179, v178, v180);
              __uint64_t v185 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(8);
              AVE_FPS::GetTotalCnt(*((AVE_FPS **)v13 + 25));
              AVE_FPS::GetRt(*((AVE_FPS **)v13 + 25));
              syslog(3, "%lld %d AVE %s: %s MCTF. frameRate: %d cnt %d (%.2f), pixel rate %d threshold %d (prev set: %d)", v185, 28);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: %s MCTF. frameRate: %d cnt %d (%.2f), pixel rate %d threshold %d (prev set: %d)", v202, 28);
            }
          }
        }
      }
      uint64_t DerivedStorage = v204;
      uint64_t v1 = v206;
      if (*((int *)v204 + 57) >= 1 && HIDWORD(v214) && SDWORD2(v214) <= 254)
      {
        int v186 = *((_DWORD *)v204 + 470);
        int v187 = *((_DWORD *)v204 + 471);
        unsigned int v188 = AVE_FPS::GetRt(*((AVE_FPS **)v13 + 25));
        unsigned int v189 = ((v187 + 31) >> 5) * ((v186 + 31) >> 5) * v188;
        if (*((unsigned char *)v204 + 1772))
        {
          if (v189 < 0x68971) {
            goto LABEL_160;
          }
        }
        else if (v189 <= 0x45BA0)
        {
          goto LABEL_160;
        }
        if (AVE_Log_CheckLevel(0x16u, 5))
        {
          int v190 = AVE_Log_CheckConsole(0x16u);
          __uint64_t v191 = AVE_GetCurrTime();
          int v192 = AVE_Log_GetLevelStr(5);
          if (v190)
          {
            printf("%lld %d AVE %s: FIG: MCTF unsupported fps %d for %dx%d. VFR %d. Band0Mod %d, %d\n", v191, 22, v192, v188, v186, v187, *((unsigned __int8 *)v204 + 1772), HIDWORD(v214), DWORD2(v214));
            __uint64_t v191 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(5);
          }
          syslog(3, "%lld %d AVE %s: FIG: MCTF unsupported fps %d for %dx%d. VFR %d. Band0Mod %d, %d", v191, 22);
          uint64_t DerivedStorage = v204;
        }
      }
    }
  }
  else
  {
    unsigned int v111 = ((*((_DWORD *)DerivedStorage + 471) + 31) >> 5)
         * ((*((_DWORD *)DerivedStorage + 470) + 31) >> 5);
    if (v111 >> 5 < 0xFF)
    {
      if (v111 < 0x7F8) {
        char v112 = 11;
      }
      else {
        char v112 = 16;
      }
    }
    else
    {
      char v112 = 21;
    }
    *__uint64_t v21 = v112;
    DWORD2(v214) = 127;
  }
LABEL_160:
  v223[3] = &v210;
  if (v21[514] && (int)v13[31] >= 3 && (*((_DWORD *)DerivedStorage + 57) - 1) <= 0x3B)
  {
    int v208 = 10;
    if (AVE_ANFD_GetInfo(theDict, &DerivedStorage[80 * v13[386] + 22963], &v208))
    {
      if (*((_DWORD *)DerivedStorage + 57) == 60)
      {
        unsigned int v118 = v13[388];
        if (v118 != -1 && v118 + 1 == v13[1])
        {
          *(void *)&long long v226 = &DerivedStorage[80 * (v13[386] == 0) + 22963];
          DWORD2(v226) = v13[387];
        }
      }
    }
    else
    {
      __int16 v236 = 0;
      uint64_t v235 = 0;
      AVE_SNPrintf((char *)&v235, 10, "%d %d", v113, v114, v115, v116, v117, v13[33]);
      AVE_ANFD_PrintInfo((unsigned int *)&DerivedStorage[80 * v13[386] + 22963], v208, 47, 6, (uint64_t)&v235, 0, v124, v125);
      unsigned int v126 = v13[386];
      *(void *)&long long v226 = &DerivedStorage[80 * v126 + 22963];
      int v127 = v208;
      DWORD2(v226) = v208;
      if (*((_DWORD *)DerivedStorage + 57) == 60)
      {
        v13[386] = v126 == 0;
        v13[387] = v127;
        v13[388] = v13[1];
      }
    }
  }
  *(void *)&long long v220 = 0;
  BYTE8(v220) = *((unsigned char *)v13 + 107);
  if (*((unsigned char *)v13 + 106))
  {
    CFDictionaryRef v128 = (const __CFDictionary *)CMGetAttachment(v234, (CFStringRef)*MEMORY[0x1E4F53070], 0);
    if (v128) {
      *(void *)&long long v220 = CFDictionaryCreateCopy(0, v128);
    }
  }
  AVE_GetPerFrameData((uint64_t)DerivedStorage, theDict, (int *)&v237, (uint64_t)&v216);
  if (!*((_DWORD *)v21 + 267)) {
    AVE_UpdateSettingsBasedOnSNR((uint64_t)DerivedStorage, (uint64_t)&v237, *(double *)v223[3]);
  }
  *(void *)&long long v224 = &v237;
  if (v13[39] && *((void *)v13 + 18) && AVE_MultipassDataFetch((uint64_t)DerivedStorage, &v229))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v129 = AVE_Log_CheckConsole(3u);
      __uint64_t v130 = AVE_GetCurrTime();
      uint64_t v131 = AVE_Log_GetLevelStr(4);
      if (v129)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_MultipassDataFetch failed.\n", v130, 3, v131, "AVE_HEVC_Encode", 12818, "err == noErr");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_MultipassDataFetch failed.");
    }
    goto LABEL_36;
  }
  DWORD2(v227) = v13[1];
  HIDWORD(v227) = v3;
  uint64_t v132 = AVE_USL_Drv_Process((uint64_t)DerivedStorage[3], (uint64_t)&v216);
  uint64_t v45 = v132;
  if (v132)
  {
    if (v132 != -536870173)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v140 = AVE_Log_CheckConsole(3u);
        __uint64_t v141 = AVE_GetCurrTime();
        float v142 = AVE_Log_GetLevelStr(4);
        if (v140)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Process failed.\n", v141, 3, v142, "AVE_HEVC_Encode", 12835, "err == noErr");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Process failed.");
      }
      goto LABEL_36;
    }
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      int v133 = v1;
      __uint64_t v134 = v13;
      uint64_t v135 = DerivedStorage;
      int v136 = AVE_Log_CheckConsole(0x16u);
      __uint64_t v137 = AVE_GetCurrTime();
      __uint64_t v138 = AVE_Log_GetLevelStr(5);
      if (v136)
      {
        printf("%lld %d AVE %s: FIG: device returned kIOReturnNoPower. reject the frame\n", v137, 22, v138);
        __uint64_t v139 = AVE_GetCurrTime();
        __uint64_t v196 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: FIG: device returned kIOReturnNoPower. reject the frame", v139, 22, v196);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: device returned kIOReturnNoPower. reject the frame", v137, 22, v138);
      }
      uint64_t DerivedStorage = v135;
      int v13 = v134;
      uint64_t v1 = v133;
    }
  }
  if (v1) {
    *v1 |= 1u;
  }
  if (v13[18])
  {
    *((void *)v13 + 11) = AVE_GetCurrTime();
    if (AVE_Log_CheckLevel(0x18u, 6))
    {
      int v143 = AVE_Log_CheckConsole(0x18u);
      __uint64_t v144 = AVE_GetCurrTime();
      int v145 = AVE_Log_GetLevelStr(6);
      unsigned int v146 = v13[33];
      uint64_t v147 = *((void *)v13 + 11) - *((void *)v13 + 10);
      if (v143)
      {
        printf("%lld %d AVE %s: FIG: %d (%d) EncodeFrame took %lld us\n", v144, 24, v145, v146, v13[1], v147);
        __uint64_t v148 = AVE_GetCurrTime();
        __uint64_t v149 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) EncodeFrame took %lld us", v148, 24, v149, v13[33], v13[1], *((void *)v13 + 11) - *((void *)v13 + 10));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) EncodeFrame took %lld us", v144, 24, v145, v146, v13[1], v147);
      }
    }
  }
LABEL_89:
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v72 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v73 = AVE_GetCurrTime();
    __uint64_t v74 = AVE_Log_GetLevelStr(7);
    if (v72)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_HEVCEncodeFrame err 0x%08x\n", v73, 20, v74, v45);
      __uint64_t v75 = AVE_GetCurrTime();
      uint64_t v194 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_HEVCEncodeFrame err 0x%08x", v75, 20, v194, v45);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_HEVCEncodeFrame err 0x%08x", v73, 20, v74, v45);
    }
  }
  if (v233 && v234) {
    CVPixelBufferRelease(v234);
  }
  if (DerivedStorage) {
    ++v13[1];
  }
  return v45;
}

uint64_t AVE_HEVC_VerifyImageBuffer(uint64_t a1, CVPixelBufferRef *a2, unsigned char *a3, _DWORD *a4, _DWORD *a5, int a6)
{
  unsigned int v11 = (int *)(a1 + 183420);
  __uint64_t v12 = (_DWORD *)(a1 + 103092);
  uint64_t v13 = a1 + 17880;
  memset(v54, 0, sizeof(v54));
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  memset(v49, 0, sizeof(v49));
  unsigned int v14 = *(_DWORD *)(a1 + 184996);
  if (!v14) {
    unsigned int v14 = *(_DWORD *)(a1 + 1880);
  }
  unsigned int v43 = v14;
  int v15 = *(_DWORD *)(a1 + 185000);
  if (!v15) {
    int v15 = *(_DWORD *)(a1 + 1884);
  }
  int v16 = *(_DWORD *)(a1 + 183560);
  int v17 = *(_DWORD *)(a1 + 183564);
  int v44 = v15;
  int v45 = v16;
  int v18 = *(_DWORD *)(a1 + 18760);
  int v19 = *(_DWORD *)(a1 + 1876);
  int v46 = v17;
  int v47 = v19;
  int v48 = v18;
  LOBYTE(v49[0]) = *(unsigned char *)(a1 + 18849);
  int v20 = *(_DWORD *)(a1 + 18868);
  DWORD1(v49[0]) = *(_DWORD *)(a1 + 292);
  DWORD2(v49[1]) = v20;
  BYTE12(v49[1]) = *(_DWORD *)(a1 + 264) > 0;
  LODWORD(v50) = *(_DWORD *)(a1 + 18804);
  v54[27] = v17 > 10;
  if (*(unsigned char *)(a1 + 103116)) {
    *(_OWORD *)((char *)v49 + 8) = *(_OWORD *)(a1 + 103120);
  }
  uint64_t v21 = AVE_VerifyImageBuffer(&v43, a2, (CVPixelBufferPoolRef *)(a1 + 183696));
  if (v21) {
    return v21;
  }
  *a3 = v54[24];
  int v22 = HIDWORD(v53);
  *a4 = DWORD2(v53);
  *a5 = v22;
  uint64_t v23 = v11[36];
  if ((int)v23 < 11)
  {
    *(_WORD *)(v13 + 456) = v54[25];
    goto LABEL_13;
  }
  *(_WORD *)(v13 + 456) = v54[25];
  unsigned int v24 = v43;
  char v25 = BYTE8(v50) - 1;
  char v26 = 1;
  *(_WORD *)(v13 + 460) = 1 << (BYTE8(v50) - 1);
  *(_DWORD *)(v13 + 464) = 65537 << v25;
  if (v24 == *(_DWORD *)(a1 + 1880))
  {
    if (v44 != *(_DWORD *)(a1 + 1884))
    {
      char v26 = 1;
      goto LABEL_14;
    }
LABEL_13:
    char v26 = v54[26];
  }
LABEL_14:
  uint64_t v27 = (_DWORD *)(a1 + 18872);
  *(unsigned char *)(v13 + 974) = v26;
  int v28 = HIDWORD(v51);
  *(unsigned char *)(v13 + 132) = (HIDWORD(v51) & 0xFFFFFFFE) == 2;
  if (v28 == 3) {
    *(unsigned char *)(v13 + 459) = BYTE4(v52);
  }
  if (LOBYTE(v49[0]))
  {
    int v29 = v53;
    _DWORD *v27 = *(_DWORD *)v54;
    *(_DWORD *)(a1 + 18876) = v29;
    *(void *)&long long v30 = __PAIR64__(*(unsigned int *)&v54[16], DWORD1(v53));
    *((void *)&v30 + 1) = *(void *)&v54[8];
    *(_OWORD *)(a1 + 18880) = v30;
    *(_DWORD *)(a1 + 18896) = *(_DWORD *)&v54[20];
  }
  if (!a6) {
    goto LABEL_33;
  }
  unsigned int v31 = DWORD1(v50);
  *(_DWORD *)(v13 + 876) = DWORD1(v50);
  if (*(unsigned char *)(v13 + 969))
  {
LABEL_20:
    int v32 = v51;
    int v33 = DWORD2(v50);
    *__uint64_t v12 = v51;
    *(_DWORD *)(v13 + 40) = v33;
    *(unsigned char *)uint64_t v13 = v28 != 1;
    *(unsigned char *)(v13 + 889) = 1;
    if (v33 == 10)
    {
      *(unsigned char *)(a1 + 20442) = 0;
      *(unsigned char *)(a1 + 102594) = 0;
    }
    if (v32 == 2)
    {
      *(unsigned char *)(a1 + 20443) = 1;
      *(unsigned char *)(a1 + 102595) = 1;
    }
    else if (v32 == 3)
    {
      *(_WORD *)(a1 + 20443) = 0;
      *(_WORD *)(a1 + 102595) = 0;
      if (*(_DWORD *)(a1 + 292) == 37)
      {
        *(unsigned char *)(v13 + 982) = 1;
        *(unsigned char *)(a1 + 254) = 0;
      }
    }
LABEL_33:
    if (v11[6])
    {
      if (*(_DWORD *)(a1 + 20364) != DWORD1(v50) && AVE_Log_CheckLevel(0x16u, 4))
      {
        int v39 = AVE_Log_CheckConsole(0x16u);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v39)
        {
          printf("%lld %d AVE %s: %s:%d pixel format change %d %d 0x%x 0x%x\n", CurrTime, 22, LevelStr, "AVE_HEVC_VerifyImageBuffer", 9367, v11[38], v11[6], v27[373], DWORD1(v50));
          __uint64_t CurrTime = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d pixel format change %d %d 0x%x 0x%x", CurrTime, 22);
      }
      return 0;
    }
    else
    {
      uint64_t v21 = 0;
      *(_DWORD *)(a1 + 20364) = DWORD1(v50);
    }
    return v21;
  }
  unsigned int v34 = v12[11] + 8;
  if (v34 <= v12[12] + 8) {
    unsigned int v34 = v12[12] + 8;
  }
  uint64_t updated = AVE_UpdatePixelBufferDict(v23, v11[35], *(unsigned int *)(a1 + 1876), 1, *(unsigned int *)(a1 + 19468), *(unsigned int *)(a1 + 19472), *(unsigned int *)(a1 + 1880), *(unsigned int *)(a1 + 1884), v34, *v11, v31 | 0x100000000, *(void *)a1);
  if (!updated)
  {
    int v28 = HIDWORD(v51);
    goto LABEL_20;
  }
  uint64_t v21 = updated;
  if (AVE_Log_CheckLevel(3u, 4))
  {
    int v36 = AVE_Log_CheckConsole(3u);
    __uint64_t v37 = AVE_GetCurrTime();
    unsigned int v38 = AVE_Log_GetLevelStr(4);
    if (v36)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: %s:%d AVE_UpdatePixelBufferDict failed.\n", v37, 3, v38, "AVE_HEVC_VerifyImageBuffer", 9322, "err == noErr", "AVE_HEVC_VerifyImageBuffer", 9322);
      __uint64_t v37 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: %s:%d AVE_UpdatePixelBufferDict failed.", v37, 3);
  }
  return v21;
}

void AVE_UpdateCropParams(uint64_t a1, __CVBuffer *a2)
{
  uint64_t v4 = a1 + 103116;
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v5 = AVE_Log_CheckConsole(0x14u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v5)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_UpdateCropParams\n", CurrTime, 20, LevelStr);
      __uint64_t v8 = AVE_GetCurrTime();
      char v26 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_UpdateCropParams", v8, 20, v26);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_UpdateCropParams", CurrTime, 20, LevelStr);
    }
  }
  if (*(unsigned char *)v4)
  {
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
    int v10 = AVE_PixelFmt_FindByType(PixelFormatType);
    if (v10)
    {
      int v11 = *((_DWORD *)v10 + 3);
      *(_DWORD *)(a1 + 103092) = v11;
    }
    else
    {
      int v11 = *(_DWORD *)(a1 + 103092);
    }
    int v13 = v11 != 3 && v11 != 0;
    int v14 = v11 == 1;
    int v15 = *(_DWORD *)(v4 + 12);
    if (v15)
    {
      if (v11 == 1) {
        int v16 = 2;
      }
      else {
        int v16 = 1;
      }
      unsigned int v17 = ((v15 + v16 - 1) & ~v14) >> v14;
      *(_DWORD *)(v4 + 12) = v17;
    }
    else
    {
      unsigned int v17 = 0;
    }
    int v18 = *(_DWORD *)(v4 + 16);
    if (v18)
    {
      unsigned int v19 = ((v18 + v14) & ~v14) >> v14;
      *(_DWORD *)(v4 + 16) = v19;
    }
    else
    {
      unsigned int v19 = 0;
    }
    unsigned int v20 = *(_DWORD *)(v4 + 4);
    if (v20)
    {
      unsigned int v20 = ((v20 + v13) & ~v13) >> v13;
      *(_DWORD *)(v4 + 4) = v20;
    }
    int v21 = *(_DWORD *)(v4 + 8);
    if (v21)
    {
      unsigned int v22 = ((v21 + v13) & ~v13) >> v13;
      *(_DWORD *)(v4 + 8) = v22;
    }
    else
    {
      unsigned int v22 = 0;
    }
    if (*(_DWORD *)(a1 + 18900) || *(_DWORD *)(a1 + 18436) >= 2u)
    {
      *(unsigned char *)(a1 + 102232) = *(unsigned char *)v4;
      *(_DWORD *)(a1 + 102244) = v17;
      *(_DWORD *)(a1 + 102248) = v19;
      *(_DWORD *)(a1 + 102236) = v20;
      *(_DWORD *)(a1 + 102240) = v22;
    }
    if (AVE_Log_CheckLevel(0x16u, 7))
    {
      int v23 = AVE_Log_CheckConsole(0x16u);
      __uint64_t v24 = AVE_GetCurrTime();
      char v25 = AVE_Log_GetLevelStr(7);
      if (v23)
      {
        printf("%lld %d AVE %s: FIG: conf_win_top_offset = %d conf_win_bottom_offset %d conf_win_left_offset = %d conf_win_right_offset %d\n", v24, 22, v25, *(_DWORD *)(v4 + 12), *(_DWORD *)(v4 + 16), *(_DWORD *)(v4 + 4), *(_DWORD *)(v4 + 8));
        __uint64_t v24 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(7);
      }
      syslog(3, "%lld %d AVE %s: FIG: conf_win_top_offset = %d conf_win_bottom_offset %d conf_win_left_offset = %d conf_win_right_offset %d", v24);
    }
  }
}

double AVE_SetEncoderBasedOnFirstFrame(uint64_t a1, int a2)
{
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v5 = AVE_Log_CheckConsole(0x14u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v5)
    {
      printf("%lld %d AVE %s: AVE ENTER AVE_SetEncoderBasedOnFirstFrame\n", CurrTime, 20, LevelStr);
      __uint64_t v8 = AVE_GetCurrTime();
      __uint64_t v12 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AVE ENTER AVE_SetEncoderBasedOnFirstFrame", v8, 20, v12);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AVE ENTER AVE_SetEncoderBasedOnFirstFrame", CurrTime, 20, LevelStr);
    }
  }
  unsigned int v9 = *(_DWORD *)(a1 + 292);
  BOOL v11 = v9 <= 0x25 && ((1 << v9) & 0x2000100002) != 0 || v9 == 10000;
  if (!v11 && *(_DWORD *)(a1 + 264) == 1 && a2 && !*(unsigned char *)(a1 + 18849))
  {
    if (*(unsigned char *)(a1 + 18851))
    {
      *(_DWORD *)(a1 + 20372) = 0;
      *(_DWORD *)(a1 + 103088) = 0;
      *(void *)(a1 + 18016) = 0x100000000;
      *(_DWORD *)(a1 + 18052) = 2;
      *(void *)&double result = 0x900000001;
      *(void *)(a1 + 18808) = 0x900000001;
      *(unsigned char *)(a1 + 103260) = 1;
    }
  }
  return result;
}

uint64_t AVE_ValidateEncoderParameters(const void **a1)
{
  int v431 = a1 + 23145;
  int v2 = (char *)a1 + 183420;
  int v3 = (unsigned __int16 *)(a1 + 2234);
  __uint64_t v430 = AVE_DW_Get();
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v4 = AVE_Log_CheckConsole(0x14u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v4)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_ValidateEncoderParameters\n", CurrTime, 20, LevelStr);
      __uint64_t v7 = AVE_GetCurrTime();
      v386 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_ValidateEncoderParameters", v7, 20, v386);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_ValidateEncoderParameters", CurrTime, 20, LevelStr);
    }
  }
  __uint64_t v8 = (_WORD *)((char *)a1 + 137925);
  unsigned int v9 = (unsigned int *)(a1 + 12817);
  if (*((int *)v2 + 36) < 16 || *((unsigned char *)v3 + 977) || *(void *)(v2 + 164) || !*((_DWORD *)v431 + 27))
  {
    *((_DWORD *)a1 + 469) &= 0xFFFFFF1F;
    *((unsigned char *)v3 + 2338) = 0;
    if (*(void *)(v2 + 164))
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        int v10 = AVE_Log_CheckConsole(0x16u);
        __uint64_t v11 = AVE_GetCurrTime();
        __uint64_t v12 = AVE_Log_GetLevelStr(5);
        if (v10)
        {
          printf("%lld %d AVE %s: FIG: MCTF is not supported for Multipass\n", v11, 22, v12);
          __uint64_t v13 = AVE_GetCurrTime();
          int v387 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: MCTF is not supported for Multipass", v13, 22, v387);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: MCTF is not supported for Multipass", v11, 22, v12);
        }
      }
    }
  }
  if (*((unsigned char *)v3 + 517))
  {
    if (*((unsigned char *)v3 + 516))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v14 = AVE_Log_CheckConsole(3u);
        __uint64_t v15 = AVE_GetCurrTime();
        int v16 = AVE_Log_GetLevelStr(4);
        if (v14)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: encoderPrivateStorage->VideoParams.bMultiViewDepth = %d and encoderPrivateStorage->VideoParams.bMultiViewDisparity = %d -> fail.\n", v15, 3, v16, "AVE_ValidateEncoderParameters", 7699, "false", *((unsigned __int8 *)v3 + 517), *((unsigned __int8 *)v3 + 516));
          __uint64_t v15 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: encoderPrivateStorage->VideoParams.bMultiViewDepth = %d and encoderPrivateStorage->VideoParams.bMultiViewDisparity = %d -> fail.", v15);
      }
      return 4294954394;
    }
  }
  else if (!*((unsigned char *)v3 + 516))
  {
    goto LABEL_28;
  }
  *((unsigned char *)a1 + 245) = 0;
  *((unsigned char *)a1 + 247) = 0;
  *((_DWORD *)a1 + 442) = 0;
  *((_DWORD *)a1 + 65) = 0;
  *((unsigned char *)v3 + 478) = 0;
  *((_DWORD *)v3 + 229) = 0;
  *((unsigned char *)a1 + 109577) = 0;
  *__uint64_t v8 = 0;
  *((unsigned char *)a1 + 120556) = 0;
  *((unsigned char *)a1 + 138594) = 0;
  *(_DWORD *)((char *)a1 + 249) = 0;
  *(_DWORD *)((char *)a1 + 255) = 0;
  if (*((int *)a1 + 462) <= -13) {
    *((_DWORD *)a1 + 462) = -6 * *((_DWORD *)a1 + 25784);
  }
  if (*((int *)a1 + 463) <= -13) {
    *((_DWORD *)a1 + 463) = 48;
  }
  if (*((int *)a1 + 460) <= -13) {
    *((_DWORD *)a1 + 460) = -6 * *((_DWORD *)a1 + 25784);
  }
  if (*((int *)a1 + 461) <= -13) {
    *((_DWORD *)a1 + 461) = 48;
  }
LABEL_28:
  int v17 = *((_DWORD *)a1 + 49);
  if (!v17) {
    goto LABEL_42;
  }
  if (v17 == 4)
  {
    if (*(void *)(v2 + 164))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v22 = AVE_Log_CheckConsole(3u);
        __uint64_t v23 = AVE_GetCurrTime();
        __uint64_t v24 = AVE_Log_GetLevelStr(4);
        if (v22)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: multiPassStorage and RC UsageMode = %d... not supported. fail\n", v23, 3, v24, "AVE_ValidateEncoderParameters", 7763, "false", *((_DWORD *)a1 + 73));
          __uint64_t v23 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: multiPassStorage and RC UsageMode = %d... not supported. fail", v23);
      }
      return 4294954384;
    }
    goto LABEL_41;
  }
  if (v17 != 20)
  {
LABEL_41:
    *((unsigned char *)a1 + 252) = 0;
    *((unsigned char *)v3 + 880) = 0;
    goto LABEL_42;
  }
  if (*((_DWORD *)a1 + 73) != 1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v18 = AVE_Log_CheckConsole(3u);
      __uint64_t v19 = AVE_GetCurrTime();
      unsigned int v20 = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: Usage mode %d does not support eRCMode = 0x%x. Fail.\n", v19, 3, v20, "AVE_ValidateEncoderParameters", 7753, "false", *((_DWORD *)a1 + 73), *((_DWORD *)a1 + 49));
        __uint64_t v19 = AVE_GetCurrTime();
        unsigned int v20 = AVE_Log_GetLevelStr(4);
      }
      int v426 = (const void *)*((unsigned int *)a1 + 73);
      uint64_t v427 = *((unsigned int *)a1 + 49);
      uint64_t v425 = 7753;
      int v388 = v20;
      int v21 = "%lld %d AVE %s: %s:%d %s | FIG: Usage mode %d does not support eRCMode = 0x%x. Fail.";
LABEL_210:
      syslog(3, v21, v19, 3, v388, "AVE_ValidateEncoderParameters", v425, "false", v426, v427, v428);
      return 4294954394;
    }
    return 4294954394;
  }
LABEL_42:
  if ((*((_DWORD *)v2 + 433) & 0x80000000) != 0)
  {
    unsigned int v25 = *((_DWORD *)a1 + 73);
    if (v25 <= 0x26 && ((1 << v25) & 0x4000100002) != 0) {
      *int v3 = 0;
    }
  }
  unint64_t v26 = (unint64_t)a1[25];
  if ((v26 & 0x80000000) != 0)
  {
    a1[25] = (const void *)(v26 | 4);
    int v27 = *((_DWORD *)a1 + 486);
    if (v27 == 2)
    {
      int v28 = (int *)(a1 + 243);
      goto LABEL_58;
    }
  }
  else
  {
    int v27 = *((_DWORD *)a1 + 486);
  }
  int v28 = (int *)(a1 + 243);
  if (v27 <= 3) {
    goto LABEL_59;
  }
  if (AVE_Log_CheckLevel(0x16u, 5))
  {
    int v29 = AVE_Log_CheckConsole(0x16u);
    __uint64_t v30 = AVE_GetCurrTime();
    unsigned int v31 = AVE_Log_GetLevelStr(5);
    if (v29)
    {
      printf("%lld %d AVE %s: FIG: too many B frames (%d) max is %d. -> will gracefully default to the internal max!\n", v30, 22, v31, *v28, 3);
      __uint64_t v30 = AVE_GetCurrTime();
      unsigned int v31 = AVE_Log_GetLevelStr(5);
    }
    syslog(3, "%lld %d AVE %s: FIG: too many B frames (%d) max is %d. -> will gracefully default to the internal max!", v30, 22, v31, *v28, 3);
    __uint64_t v8 = (_WORD *)((char *)a1 + 137925);
  }
LABEL_58:
  int v27 = 3;
  *int v28 = 3;
LABEL_59:
  int v32 = *((_DWORD *)a1 + 506);
  if (*((int *)v2 + 36) < 3)
  {
    unsigned int v33 = v32 & 0xFFFFFFFB;
  }
  else
  {
    if ((v32 & 4) == 0) {
      goto LABEL_65;
    }
    if (v27)
    {
      *((unsigned char *)v3 + 460) = 1;
      goto LABEL_65;
    }
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      int v50 = AVE_Log_CheckConsole(0x16u);
      __uint64_t v51 = AVE_GetCurrTime();
      long long v52 = AVE_Log_GetLevelStr(5);
      if (v50)
      {
        printf("%lld %d AVE %s: FIG: AdaptiveB is set when BFrames not enabled -> will disable AdaptiveB\n", v51, 22, v52);
        __uint64_t v53 = AVE_GetCurrTime();
        __uint64_t v389 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: FIG: AdaptiveB is set when BFrames not enabled -> will disable AdaptiveB", v53, 22, v389);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: AdaptiveB is set when BFrames not enabled -> will disable AdaptiveB", v51, 22, v52);
      }
    }
    unsigned int v33 = a1[253] & 0xFFFFFFFB;
  }
  *((_DWORD *)a1 + 506) = v33;
LABEL_65:
  if (!*((_DWORD *)v3 + 222))
  {
    double v34 = (double)*((int *)a1 + 48)
        / (double)(((*((_DWORD *)a1 + 470) + 15) >> 4) * ((*((_DWORD *)a1 + 471) + 15) >> 4))
        * 0.0133333333
        + -6.66666667;
    if (v34 < 0.0) {
      double v34 = 0.0;
    }
    double v35 = v34 + 0.5;
    BOOL v36 = v34 <= 20.0;
    double v37 = 20.5;
    if (v36) {
      double v37 = v35;
    }
    *((_DWORD *)v3 + 197) = v37;
    *((_DWORD *)v3 + 199) = v37;
  }
  int v38 = *((_DWORD *)v3 + 47);
  if (v38 >= 33)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v40 = AVE_Log_CheckConsole(3u);
      __uint64_t v41 = AVE_GetCurrTime();
      __uint64_t v42 = AVE_Log_GetLevelStr(4);
      if (v40)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: too many slices (%d) max is %d for now (can be changed)\n", v41, 3, v42, "AVE_ValidateEncoderParameters", 7874, "encoderPrivateStorage->VideoParams.sSliceMap.iNum <= ((32) < (256) ? (32) : (256))", *((_DWORD *)v3 + 47), 32);
        __uint64_t v41 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: too many slices (%d) max is %d for now (can be changed)", v41);
    }
    return 4294954394;
  }
  if (!v38)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v43 = AVE_Log_CheckConsole(3u);
      __uint64_t v44 = AVE_GetCurrTime();
      int v45 = AVE_Log_GetLevelStr(4);
      if (v43)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: Slices Per Frame = %d\n", v44, 3, v45, "AVE_ValidateEncoderParameters", 7875, "encoderPrivateStorage->VideoParams.sSliceMap.iNum != 0", *((_DWORD *)v3 + 47));
        __uint64_t v44 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: Slices Per Frame = %d", v44);
    }
    return 4294954394;
  }
  int v39 = *(_DWORD *)v2;
  if (*(int *)v2 > 1007)
  {
    if (v39 != 1308 && v39 != 1008) {
      goto LABEL_93;
    }
  }
  else if (v39 != 1 && v39 != 3)
  {
    goto LABEL_93;
  }
  if (*((unsigned char *)v3 + 898) && *((_DWORD *)a1 + 25784) >= 2u)
  {
    if (AVE_Log_CheckLevel(0x16u, 4))
    {
      int v46 = AVE_Log_CheckConsole(0x16u);
      __uint64_t v47 = AVE_GetCurrTime();
      int v48 = AVE_Log_GetLevelStr(4);
      if (v46)
      {
        printf("%lld %d AVE %s: %s:%d %s | Unable to set bitdepth 10 for HEVC Profile that only supports bitdepth 8\n", v47, 22, v48, "AVE_ValidateEncoderParameters", 7886, "false");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | Unable to set bitdepth 10 for HEVC Profile that only supports bitdepth 8");
    }
    return 4294954394;
  }
LABEL_93:
  if (*((_DWORD *)a1 + 25638) > 1u) {
    goto LABEL_116;
  }
  if (*((unsigned char *)v3 + 898)) {
    int v49 = *((_DWORD *)a1 + 25784) + 8;
  }
  else {
    int v49 = *((_DWORD *)v3 + 12);
  }
  int v55 = *((_DWORD *)a1 + 25773);
  switch(v55)
  {
    case 0:
      int v56 = 1010;
LABEL_115:
      *((_DWORD *)a1 + 25638) = v56;
      *((_DWORD *)v3 + 632) = v56;
      break;
    case 2:
      int v56 = 1210;
      goto LABEL_115;
    case 3:
      if (v49 == 10) {
        int v56 = 1310;
      }
      else {
        int v56 = 1308;
      }
      goto LABEL_115;
  }
LABEL_116:
  if (*((unsigned char *)v3 + 804))
  {
    int v57 = *((_DWORD *)a1 + 73);
    if (v57 == 20 || v57 == 10000 || v57 == 37)
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        int v58 = AVE_Log_CheckConsole(0x16u);
        __uint64_t v59 = AVE_GetCurrTime();
        __uint64_t v60 = AVE_Log_GetLevelStr(5);
        int v61 = *((_DWORD *)a1 + 73);
        if (v58)
        {
          printf("%lld %d AVE %s: FIG: usageMode = %d and bMultiReferenceP is true. cannot, set it to false.\n", v59, 22, v60, v61);
          __uint64_t v62 = AVE_GetCurrTime();
          v390 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: usageMode = %d and bMultiReferenceP is true. cannot, set it to false.", v62, 22, v390, *((_DWORD *)a1 + 73));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: usageMode = %d and bMultiReferenceP is true. cannot, set it to false.", v59, 22, v60, v61);
        }
      }
      *((unsigned char *)v3 + 804) = 0;
    }
  }
  if (*((unsigned char *)v3 + 987)) {
    *((_DWORD *)a1 + 506) &= ~4u;
  }
  if (*((unsigned char *)a1 + 118487))
  {
    unsigned int v63 = *((_DWORD *)a1 + 73);
    if (v63 <= 0x25 && ((1 << v63) & 0x2000100002) != 0 || v63 == 10000)
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        int v64 = AVE_Log_CheckConsole(0x16u);
        __uint64_t v65 = AVE_GetCurrTime();
        __uint64_t v66 = AVE_Log_GetLevelStr(5);
        int v67 = *((_DWORD *)a1 + 73);
        if (v64)
        {
          printf("%lld %d AVE %s: FIG: usageMode = %d and bIsLossless is true not supported. Set it to false.\n", v65, 22, v66, v67);
          __uint64_t v68 = AVE_GetCurrTime();
          int v391 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: usageMode = %d and bIsLossless is true not supported. Set it to false.", v68, 22, v391, *((_DWORD *)a1 + 73));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: usageMode = %d and bIsLossless is true not supported. Set it to false.", v65, 22, v66, v67);
        }
      }
      *((unsigned char *)a1 + 118487) = 0;
    }
    if (*((_DWORD *)a1 + 49) != 3)
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        int v69 = AVE_Log_CheckConsole(0x16u);
        __uint64_t v70 = AVE_GetCurrTime();
        int v71 = AVE_Log_GetLevelStr(5);
        int v72 = *((_DWORD *)a1 + 49);
        if (v69)
        {
          printf("%lld %d AVE %s: FIG: eRCMode = %d and bIsLossless is true not supported. Set eRCMode to FIXQP.\n", v70, 22, v71, v72);
          __uint64_t v73 = AVE_GetCurrTime();
          __uint64_t v392 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: eRCMode = %d and bIsLossless is true not supported. Set eRCMode to FIXQP.", v73, 22, v392, *((_DWORD *)a1 + 49));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: eRCMode = %d and bIsLossless is true not supported. Set eRCMode to FIXQP.", v70, 22, v71, v72);
        }
      }
      *((_DWORD *)a1 + 49) = 3;
    }
    if (*((unsigned char *)a1 + 244) || *((unsigned char *)a1 + 252))
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        int v74 = AVE_Log_CheckConsole(0x16u);
        __uint64_t v75 = AVE_GetCurrTime();
        unsigned int v76 = AVE_Log_GetLevelStr(5);
        if (v74)
        {
          printf("%lld %d AVE %s: FIG: bEnableQPMod / bEnableQPModRefresh set and bIsLossless is true not supported. Set bEnableQPMod, bEnableQPModRefresh to false.\n", v75, 22, v76);
          __uint64_t v77 = AVE_GetCurrTime();
          v393 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: bEnableQPMod / bEnableQPModRefresh set and bIsLossless is true not supported. Set bEnableQPMod, bEnableQPModRefresh to false.", v77, 22, v393);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: bEnableQPMod / bEnableQPModRefresh set and bIsLossless is true not supported. Set bEnableQPMod, bEnableQPModRefresh to false.", v75, 22, v76);
        }
      }
      *((unsigned char *)a1 + 244) = 0;
      *((unsigned char *)a1 + 252) = 0;
      *((unsigned char *)a1 + 118414) = 0;
    }
    if (*((unsigned char *)a1 + 246))
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        int v78 = AVE_Log_CheckConsole(0x16u);
        __uint64_t v79 = AVE_GetCurrTime();
        int v80 = AVE_Log_GetLevelStr(5);
        int v81 = *((unsigned __int8 *)a1 + 246);
        if (v78)
        {
          printf("%lld %d AVE %s: FIG: bEnableLamdaMod = %d and bIsLossless is true not supported. Set bEnableLamdaMod to false.\n", v79, 22, v80, v81);
          __uint64_t v82 = AVE_GetCurrTime();
          int v394 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: bEnableLamdaMod = %d and bIsLossless is true not supported. Set bEnableLamdaMod to false.", v82, 22, v394, *((unsigned __int8 *)a1 + 246));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: bEnableLamdaMod = %d and bIsLossless is true not supported. Set bEnableLamdaMod to false.", v79, 22, v80, v81);
        }
      }
      *((unsigned char *)a1 + 246) = 0;
    }
    a1[227] = 0;
    int v83 = -6 * *((_DWORD *)a1 + 25784);
    *((_DWORD *)a1 + 463) = v83;
    *((_DWORD *)a1 + 462) = v83;
    *((_DWORD *)a1 + 458) = v83;
    *((_DWORD *)a1 + 457) = v83;
    *((_DWORD *)a1 + 456) = v83;
    a1[230] = a1[231];
    if (*((_DWORD *)a1 + 480))
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        int v84 = AVE_Log_CheckConsole(0x16u);
        __uint64_t v85 = AVE_GetCurrTime();
        int v86 = AVE_Log_GetLevelStr(5);
        int v87 = *((_DWORD *)a1 + 480);
        if (v84)
        {
          printf("%lld %d AVE %s: FIG: EnableSelStatsFlags = %d and bIsLossless is true not supported. Forcing EnableSelStatsFlags to STATISTICS_DISABLED.\n", v85, 22, v86, v87);
          __uint64_t v88 = AVE_GetCurrTime();
          unsigned int v395 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: EnableSelStatsFlags = %d and bIsLossless is true not supported. Forcing EnableSelStatsFlags to STATISTICS_DISABLED.", v88, 22, v395, *((_DWORD *)a1 + 480));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: EnableSelStatsFlags = %d and bIsLossless is true not supported. Forcing EnableSelStatsFlags to STATISTICS_DISABLED.", v85, 22, v86, v87);
        }
      }
      *((_DWORD *)a1 + 480) = 0;
    }
    if (*((_DWORD *)a1 + 65))
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        int v89 = AVE_Log_CheckConsole(0x16u);
        __uint64_t v90 = AVE_GetCurrTime();
        int v91 = AVE_Log_GetLevelStr(5);
        int v92 = *((_DWORD *)a1 + 65);
        if (v89)
        {
          printf("%lld %d AVE %s: FIG: eStaticAreasLowQpSel = %d and bIsLossless is true not supported. Forcing eStaticAreasLowQpSel to STATICAREAS_LOWQP_DISABLE.\n", v90, 22, v91, v92);
          __uint64_t v93 = AVE_GetCurrTime();
          v396 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: eStaticAreasLowQpSel = %d and bIsLossless is true not supported. Forcing eStaticAreasLowQpSel to STATICAREAS_LOWQP_DISABLE.", v93, 22, v396, *((_DWORD *)a1 + 65));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: eStaticAreasLowQpSel = %d and bIsLossless is true not supported. Forcing eStaticAreasLowQpSel to STATICAREAS_LOWQP_DISABLE.", v90, 22, v91, v92);
        }
      }
      *((_DWORD *)a1 + 65) = 0;
    }
    *((unsigned char *)a1 + 120556) = 1;
    *((unsigned char *)a1 + 109577) = 0;
    *__uint64_t v8 = 0;
  }
  if (*v28 && *((int *)a1 + 56) >= 1 && !*((unsigned char *)v3 + 974))
  {
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      int v94 = AVE_Log_CheckConsole(0x16u);
      __uint64_t v95 = AVE_GetCurrTime();
      __uint64_t v96 = AVE_Log_GetLevelStr(5);
      int v97 = *v28;
      if (v94)
      {
        printf("%lld %d AVE %s: FIG: BFrames = %d and iAverageNonDroppableFrameRate is true. not supported yet, gracefully set it to false.\n", v95, 22, v96, v97);
        __uint64_t v98 = AVE_GetCurrTime();
        int v397 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: FIG: BFrames = %d and iAverageNonDroppableFrameRate is true. not supported yet, gracefully set it to false.", v98, 22, v397, *v28);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: BFrames = %d and iAverageNonDroppableFrameRate is true. not supported yet, gracefully set it to false.", v95, 22, v96, v97);
      }
    }
    *((_DWORD *)a1 + 56) = 0;
  }
  if (!*((_DWORD *)a1 + 503))
  {
    *((_WORD *)a1 + 122) = 0;
    *((unsigned char *)a1 + 118414) = 0;
    *(_WORD *)((char *)a1 + 255) = 0;
    *(_DWORD *)((char *)a1 + 247) = 0;
  }
  if (*((int *)a1 + 460) <= -13) {
    *((_DWORD *)a1 + 460) = -6 * *((_DWORD *)a1 + 25784);
  }
  if (*((int *)a1 + 461) <= -13) {
    *((_DWORD *)a1 + 461) = 48;
  }
  if (*((int *)a1 + 462) <= -13) {
    *((_DWORD *)a1 + 462) = -6 * *((_DWORD *)a1 + 25784);
  }
  __uint64_t v99 = a1 + 231;
  if (*((int *)a1 + 463) <= -13) {
    *((_DWORD *)a1 + 463) = 48;
  }
  if (AVE_CheckQPRange((int *)a1 + 462, *((_DWORD *)a1 + 25784) + 8))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v100 = AVE_Log_CheckConsole(3u);
      __uint64_t v19 = AVE_GetCurrTime();
      int v101 = AVE_Log_GetLevelStr(4);
      if (v100)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: Incorrect sHardQPRange [%d %d]\n", v19, 3, v101, "AVE_ValidateEncoderParameters", 8083, "false", *((_DWORD *)a1 + 462), *((_DWORD *)a1 + 463));
        __uint64_t v19 = AVE_GetCurrTime();
        int v101 = AVE_Log_GetLevelStr(4);
      }
      int v426 = (const void *)*((unsigned int *)a1 + 462);
      uint64_t v427 = *((unsigned int *)a1 + 463);
      uint64_t v425 = 8083;
      int v388 = v101;
      int v21 = "%lld %d AVE %s: %s:%d %s | FIG: Incorrect sHardQPRange [%d %d]";
      goto LABEL_210;
    }
    return 4294954394;
  }
  int64_t v102 = a1 + 230;
  if (AVE_CheckQPRange((int *)a1 + 460, *((_DWORD *)a1 + 25784) + 8))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v103 = AVE_Log_CheckConsole(3u);
      __uint64_t v19 = AVE_GetCurrTime();
      int v104 = AVE_Log_GetLevelStr(4);
      if (v103)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: Incorrect sSoftQPRange [%d %d]\n", v19, 3, v104, "AVE_ValidateEncoderParameters", 8091, "false", *((_DWORD *)a1 + 460), *((_DWORD *)a1 + 461));
        __uint64_t v19 = AVE_GetCurrTime();
        int v104 = AVE_Log_GetLevelStr(4);
      }
      int v426 = (const void *)*((unsigned int *)a1 + 460);
      uint64_t v427 = *((unsigned int *)a1 + 461);
      uint64_t v425 = 8091;
      int v388 = v104;
      int v21 = "%lld %d AVE %s: %s:%d %s | FIG: Incorrect sSoftQPRange [%d %d]";
      goto LABEL_210;
    }
    return 4294954394;
  }
  if (*v102 < *v99) {
    *int64_t v102 = *v99;
  }
  int v105 = *((_DWORD *)a1 + 463);
  if (*((_DWORD *)a1 + 461) > v105) {
    *((_DWORD *)a1 + 461) = v105;
  }
  int v106 = *((_DWORD *)a1 + 49);
  if (*((unsigned char *)v3 + 812))
  {
    if (v106 != 20) {
      goto LABEL_221;
    }
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      int v107 = AVE_Log_CheckConsole(0x16u);
      __uint64_t v108 = AVE_GetCurrTime();
      __uint64_t v109 = AVE_Log_GetLevelStr(5);
      int v110 = *((_DWORD *)a1 + 49);
      if (v107)
      {
        printf("%lld %d AVE %s: FIG: eRCMode 0x%x bUseAsyncFWScheduling = true -> not supported. set bUseAsyncFWScheduling to false\n", v108, 22, v109, v110);
        __uint64_t v111 = AVE_GetCurrTime();
        __uint64_t v398 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: FIG: eRCMode 0x%x bUseAsyncFWScheduling = true -> not supported. set bUseAsyncFWScheduling to false", v111, 22, v398, *((_DWORD *)a1 + 49));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: eRCMode 0x%x bUseAsyncFWScheduling = true -> not supported. set bUseAsyncFWScheduling to false", v108, 22, v109, v110);
      }
    }
    char v118 = 0;
    goto LABEL_220;
  }
  if (v106 != 20 && *v28)
  {
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      int v112 = AVE_Log_CheckConsole(0x16u);
      __uint64_t v113 = AVE_GetCurrTime();
      uint64_t v114 = AVE_Log_GetLevelStr(5);
      int v115 = *((_DWORD *)a1 + 486);
      if (v112)
      {
        printf("%lld %d AVE %s: FIG: eRCMode 0x%x bUseAsyncFWScheduling = false Bframes 0x%x -> not supported. set bUseAsyncFWScheduling to true\n", v113, 22, v114, *((_DWORD *)a1 + 49), v115);
        __uint64_t v116 = AVE_GetCurrTime();
        uint64_t v117 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: FIG: eRCMode 0x%x bUseAsyncFWScheduling = false Bframes 0x%x -> not supported. set bUseAsyncFWScheduling to true", v116, 22, v117, *((_DWORD *)a1 + 49), *((_DWORD *)a1 + 486));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: eRCMode 0x%x bUseAsyncFWScheduling = false Bframes 0x%x -> not supported. set bUseAsyncFWScheduling to true", v113, 22, v114, *((_DWORD *)a1 + 49), v115);
      }
    }
    char v118 = 1;
LABEL_220:
    *((unsigned char *)v3 + 812) = v118;
  }
LABEL_221:
  if (*(void *)(v2 + 164))
  {
    *((unsigned char *)v3 + 524) = 1;
    *((_DWORD *)v3 + 132) = 1;
  }
  if (*v28 && *((_DWORD *)a1 + 516) == 1)
  {
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      int v119 = AVE_Log_CheckConsole(0x16u);
      __uint64_t v120 = AVE_GetCurrTime();
      long long v121 = AVE_Log_GetLevelStr(5);
      int v122 = *v28;
      if (v119)
      {
        printf("%lld %d AVE %s: FIG: BFrames = %d and LowDelay is true. Default to regular BFrames case.\n", v120, 22, v121, v122);
        __uint64_t v123 = AVE_GetCurrTime();
        v399 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: FIG: BFrames = %d and LowDelay is true. Default to regular BFrames case.", v123, 22, v399, *v28);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: BFrames = %d and LowDelay is true. Default to regular BFrames case.", v120, 22, v121, v122);
      }
    }
    *((_DWORD *)a1 + 516) = 0;
  }
  int v124 = *((_DWORD *)v3 + 12);
  if (v124 == 8)
  {
    char v125 = 1;
  }
  else
  {
    if (v124 != 10)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v131 = AVE_Log_CheckConsole(3u);
        __uint64_t v132 = AVE_GetCurrTime();
        int v133 = AVE_Log_GetLevelStr(4);
        if (v131)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: input_bitdepth = %d... not supported. Fail\n", v132, 3, v133, "AVE_ValidateEncoderParameters", 8167, "(encoderPrivateStorage->VideoParams.input_bitdepth == 8) || (encoderPrivateStorage->VideoParams.input_bitdepth == 10)", *((_DWORD *)v3 + 12));
          __uint64_t v132 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: input_bitdepth = %d... not supported. Fail", v132);
      }
      return 4294954394;
    }
    char v125 = *((unsigned char *)v3 + 986);
  }
  *((unsigned char *)v3 + 556) = v125;
  if (!AVE_DevCap_FindSearchRangeMode(*((_DWORD *)v2 + 37), 1, 1, *v3))
  {
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      int v126 = AVE_Log_CheckConsole(0x16u);
      __uint64_t v127 = AVE_GetCurrTime();
      CFDictionaryRef v128 = AVE_Log_GetLevelStr(5);
      int v129 = *v3;
      if (v126)
      {
        printf("%lld %d AVE %s: FIG: SearchRangeMode %d not supported. Default to 0\n", v127, 22, v128, v129);
        __uint64_t v130 = AVE_GetCurrTime();
        v400 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: FIG: SearchRangeMode %d not supported. Default to 0", v130, 22, v400, *v3);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: SearchRangeMode %d not supported. Default to 0", v127, 22, v128, v129);
      }
    }
    *int v3 = 0;
  }
  if (*((int *)v2 + 36) <= 7 && (*v3 & 0xFFFE) == 4 && (*((unsigned char *)v3 + 804) || *((_DWORD *)v3 + 141) >= 2u)) {
    *int v3 = 0;
  }
  if ((*((_DWORD *)a1 + 471) * *((_DWORD *)a1 + 470)) >= 0x7E9000
    && *((int *)a1 + 57) >= 100
    && (v430[337] & 0x80000000) != 0
    && (*((_DWORD *)v2 + 433) & 0x80000000) != 0)
  {
    *int v3 = 0;
    goto LABEL_255;
  }
  if (*v3 != 7)
  {
LABEL_255:
    if (*((_DWORD *)v2 + 35) != 2 && !*((unsigned char *)v3 + 477)) {
      goto LABEL_263;
    }
  }
  if (!*((unsigned char *)v3 + 9))
  {
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      int v134 = AVE_Log_CheckConsole(0x16u);
      __uint64_t v135 = AVE_GetCurrTime();
      int v136 = AVE_Log_GetLevelStr(5);
      if (v134)
      {
        printf("%lld %d AVE %s: FIG: SearchRangeMode = 7 or LRMEStandAlone or LRMERC -> must run in LRME-pipe async.\n", v135, 22, v136);
        __uint64_t v137 = AVE_GetCurrTime();
        int v401 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: FIG: SearchRangeMode = 7 or LRMEStandAlone or LRMERC -> must run in LRME-pipe async.", v137, 22, v401);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: SearchRangeMode = 7 or LRMEStandAlone or LRMERC -> must run in LRME-pipe async.", v135, 22, v136);
      }
    }
    *((unsigned char *)v3 + 9) = 1;
  }
LABEL_263:
  int v429 = v28;
  if (*((unsigned char *)v3 + 991))
  {
    __uint64_t v138 = (char *)a1 + 109577;
    if (*((unsigned char *)v3 + 517) || *((unsigned char *)v3 + 516))
    {
      int v139 = -6 * *((_DWORD *)a1 + 25784);
      int v140 = *((_DWORD *)a1 + 456);
      if (v140 <= 47) {
        int v141 = v140 + 4;
      }
      else {
        int v141 = 51;
      }
      if (v140 + 4 >= v139) {
        int v142 = v141;
      }
      else {
        int v142 = -6 * *((_DWORD *)a1 + 25784);
      }
      *((_DWORD *)a1 + 457) = v142;
      if (v142 < 51) {
        int v143 = v142 + 1;
      }
      else {
        int v143 = 51;
      }
      if (v142 + 1 >= v139) {
        int v139 = v143;
      }
      *((_DWORD *)a1 + 458) = v139;
LABEL_278:
      *((_DWORD *)a1 + 49) = 3;
      goto LABEL_288;
    }
    if (*((unsigned char *)v3 + 899) || *((_DWORD *)a1 + 49) == 4 || *((unsigned char *)v3 + 992))
    {
      a1[227] = (const void *)0x403A000000000000;
      a1[228] = (const void *)0x1A0000001ALL;
      *((_DWORD *)a1 + 458) = 26;
      *((_DWORD *)a1 + 462) = -6 * *((_DWORD *)a1 + 25784);
      *((_DWORD *)a1 + 463) = 48;
      a1[230] = a1[231];
      *((unsigned char *)a1 + 118487) = *((unsigned char *)v3 + 992);
      *((unsigned char *)v3 + 991) = 0;
      goto LABEL_288;
    }
    if (*((unsigned char *)v3 + 1036))
    {
      *((_DWORD *)a1 + 480) = 0;
      *((unsigned char *)v3 + 880) = 0;
      *((unsigned char *)a1 + 118414) = 0;
      *((unsigned char *)a1 + 244) = 0;
      *((_WORD *)a1 + 123) = 0;
      *((unsigned char *)a1 + 252) = 0;
      *((_DWORD *)a1 + 65) = 0;
      *((unsigned char *)a1 + 249) = 0;
      *(_WORD *)((char *)a1 + 255) = 0;
      *((unsigned char *)a1 + 257) = 0;
      *((_DWORD *)a1 + 442) = 0;
    }
    if ((*((unsigned char *)a1 + 203) & 0x80) == 0) {
      goto LABEL_278;
    }
  }
  else
  {
    __uint64_t v138 = (char *)a1 + 109577;
    if (*((unsigned char *)v3 + 1036) && !*((unsigned char *)v3 + 899) && *((_DWORD *)a1 + 49) != 4 && !*((unsigned char *)v3 + 992))
    {
      *((_DWORD *)a1 + 480) = 0;
      *((unsigned char *)v3 + 880) = 0;
      *((unsigned char *)a1 + 118414) = 0;
      *((unsigned char *)a1 + 244) = 0;
      *((_WORD *)a1 + 123) = 0;
      *((unsigned char *)a1 + 252) = 0;
      *((_DWORD *)a1 + 65) = 0;
      *((unsigned char *)a1 + 249) = 0;
      *(_WORD *)((char *)a1 + 255) = 0;
      *((unsigned char *)a1 + 257) = 0;
      *((_DWORD *)a1 + 49) = 3;
      a1[227] = (const void *)0x403E000000000000;
      a1[228] = (const void *)0x1E0000001ELL;
      *((_DWORD *)a1 + 458) = 30;
      *((_DWORD *)a1 + 442) = 0;
    }
  }
LABEL_288:
  if ((int)(*(double *)v431 * 100.0 + 0.5) != 100
    && !*((unsigned char *)v3 + 1036)
    && !*((unsigned char *)v3 + 987)
    && (*((unsigned char *)a1 + 1876) & 0xE0) == 0
    && !*(void *)(v2 + 164)
    && *((_DWORD *)v3 + 141) <= 1u
    && !*((_DWORD *)v3 + 577))
  {
    if ((a1[25] & 0x80000000) == 0) {
      goto LABEL_297;
    }
    goto LABEL_296;
  }
  *((_DWORD *)a1 + 58) = 0;
  unint64_t v144 = (unint64_t)a1[25] & 0xFFFFFFFF7FFFFFFFLL;
  a1[25] = (const void *)v144;
  if ((v144 & 0x80000000) != 0)
  {
LABEL_296:
    *((_DWORD *)a1 + 56) = 0;
    a1[2521] = (const void *)((unint64_t)a1[2521] & 0xFFFFFFFFFFFFFFCFLL | 0x10);
  }
LABEL_297:
  if (*((unsigned char *)a1 + 244) && !*((unsigned char *)a1 + 118414))
  {
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      int v145 = AVE_Log_CheckConsole(0x16u);
      __uint64_t v146 = AVE_GetCurrTime();
      uint64_t v147 = AVE_Log_GetLevelStr(5);
      int v148 = *((unsigned __int8 *)a1 + 244);
      if (v145)
      {
        printf("%lld %d AVE %s: FIG: bEnableQPMod = %d and cu_qp_delta_enabled_flag is false. Set cu_qp_delta_enabled_flag to true.\n", v146, 22, v147, v148);
        __uint64_t v149 = AVE_GetCurrTime();
        __uint64_t v402 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: FIG: bEnableQPMod = %d and cu_qp_delta_enabled_flag is false. Set cu_qp_delta_enabled_flag to true.", v149, 22, v402, *((unsigned __int8 *)a1 + 244));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: bEnableQPMod = %d and cu_qp_delta_enabled_flag is false. Set cu_qp_delta_enabled_flag to true.", v146, 22, v147, v148);
      }
    }
    *((unsigned char *)a1 + 118414) = 1;
  }
  __uint64_t v432 = (_DWORD *)a1 + 34625;
  if (*((_DWORD *)v3 + 12) != 10)
  {
    if (*((unsigned char *)v3 + 977)) {
      goto LABEL_342;
    }
    goto LABEL_316;
  }
  if (*((unsigned char *)v3 + 977)) {
    goto LABEL_342;
  }
  int v150 = *(_DWORD *)(v138 + 195);
  if (v150 == 18)
  {
    int v151 = -12;
    goto LABEL_312;
  }
  if (v150 == 16)
  {
    int v151 = -6;
LABEL_312:
    *((_DWORD *)a1 + 29613) = v151;
    *((_DWORD *)a1 + 29614) = v151;
  }
  if (*((int *)v2 + 36) >= 22 && (v150 | 2) == 0x12) {
    *((unsigned char *)a1 + 118484) = 0;
  }
LABEL_316:
  if (!*((unsigned char *)a1 + 244))
  {
    if (*((_DWORD *)a1 + 65))
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        int v152 = AVE_Log_CheckConsole(0x16u);
        __uint64_t v153 = AVE_GetCurrTime();
        int v154 = AVE_Log_GetLevelStr(5);
        int v155 = *((_DWORD *)a1 + 65);
        if (v152)
        {
          printf("%lld %d AVE %s: FIG: eStaticAreasLowQpSel = %d and bEnableQPMod set to false is not supported. Forcing eStaticAreasLowQpSel to STATICAREAS_LOWQP_DISABLE.\n", v153, 22, v154, v155);
          __uint64_t v156 = AVE_GetCurrTime();
          v403 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: eStaticAreasLowQpSel = %d and bEnableQPMod set to false is not supported. Forcing eStaticAreasLowQpSel to STATICAREAS_LOWQP_DISABLE.", v156, 22, v403, *((_DWORD *)a1 + 65));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: eStaticAreasLowQpSel = %d and bEnableQPMod set to false is not supported. Forcing eStaticAreasLowQpSel to STATICAREAS_LOWQP_DISABLE.", v153, 22, v154, v155);
        }
      }
      *((_DWORD *)a1 + 65) = 0;
    }
    if (*((unsigned char *)a1 + 247))
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        int v157 = AVE_Log_CheckConsole(0x16u);
        __uint64_t v158 = AVE_GetCurrTime();
        __uint64_t v159 = AVE_Log_GetLevelStr(5);
        int v160 = *((unsigned __int8 *)a1 + 247);
        if (v157)
        {
          printf("%lld %d AVE %s: FIG: bEnableVarianceQPMod = %d and bEnableQPMod set to false is not supported. Forcing bEnableVarianceQPMod off.\n", v158, 22, v159, v160);
          __uint64_t v161 = AVE_GetCurrTime();
          int v404 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: bEnableVarianceQPMod = %d and bEnableQPMod set to false is not supported. Forcing bEnableVarianceQPMod off.", v161, 22, v404, *((unsigned __int8 *)a1 + 247));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: bEnableVarianceQPMod = %d and bEnableQPMod set to false is not supported. Forcing bEnableVarianceQPMod off.", v158, 22, v159, v160);
        }
      }
      *((unsigned char *)a1 + 247) = 0;
    }
    if (*((unsigned char *)a1 + 248))
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        int v162 = AVE_Log_CheckConsole(0x16u);
        __uint64_t v163 = AVE_GetCurrTime();
        long long v164 = AVE_Log_GetLevelStr(5);
        int v165 = *((unsigned __int8 *)a1 + 248);
        if (v162)
        {
          printf("%lld %d AVE %s: FIG: bEnableLowVarianceQPMod = %d and bEnableQPMod set to false is not supported. Forcing bEnableLowVarianceQPMod off.\n", v163, 22, v164, v165);
          __uint64_t v166 = AVE_GetCurrTime();
          __uint64_t v405 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: bEnableLowVarianceQPMod = %d and bEnableQPMod set to false is not supported. Forcing bEnableLowVarianceQPMod off.", v166, 22, v405, *((unsigned __int8 *)a1 + 248));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: bEnableLowVarianceQPMod = %d and bEnableQPMod set to false is not supported. Forcing bEnableLowVarianceQPMod off.", v163, 22, v164, v165);
        }
      }
      *((unsigned char *)a1 + 248) = 0;
    }
    if (*((unsigned char *)a1 + 249))
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        int v167 = AVE_Log_CheckConsole(0x16u);
        __uint64_t v168 = AVE_GetCurrTime();
        int v169 = AVE_Log_GetLevelStr(5);
        int v170 = *((unsigned __int8 *)a1 + 249);
        if (v167)
        {
          printf("%lld %d AVE %s: FIG: bEnableHevcDeRingingQPMod = %d and bEnableQPMod set to false is not supported. Forcing bEnableHevcDeRingingQPMod off.\n", v168, 22, v169, v170);
          __uint64_t v171 = AVE_GetCurrTime();
          int v406 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: bEnableHevcDeRingingQPMod = %d and bEnableQPMod set to false is not supported. Forcing bEnableHevcDeRingingQPMod off.", v171, 22, v406, *((unsigned __int8 *)a1 + 249));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: bEnableHevcDeRingingQPMod = %d and bEnableQPMod set to false is not supported. Forcing bEnableHevcDeRingingQPMod off.", v168, 22, v169, v170);
        }
      }
      *((unsigned char *)a1 + 249) = 0;
    }
  }
LABEL_342:
  if (*((_DWORD *)a1 + 65))
  {
    unsigned int v172 = *((_DWORD *)a1 + 470) + 15;
    unsigned int v173 = *((_DWORD *)a1 + 471) + 15;
    unsigned int v174 = v173 >> 4;
    unsigned int v175 = (v172 >> 4) + 31;
    unsigned int v176 = v175 & 0x1FFFFFE0;
    if (v172 > 0x78F || v173 >= 0x450) {
      unsigned int v177 = (((((v172 >> 4) + 1) >> 1) + 31) >> 5) * ((v174 + 1) >> 1);
    }
    else {
      unsigned int v177 = (v175 >> 5) * v174;
    }
    if (v176 > 0x100 || v173 > 0xC0F || v177 >= 0x121)
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        int v178 = AVE_Log_CheckConsole(0x16u);
        __uint64_t v179 = AVE_GetCurrTime();
        int v180 = AVE_Log_GetLevelStr(5);
        if (v178)
        {
          printf("%lld %d AVE %s: AVE_FIG: align32MbW <= MAX_STATICAREASLOWQP_NMB_FRAME_HORIZONTAL && picHeightInMb <= MAX_STATICAREASLOWQP_NMB_FRAME_VERTICAL %d %d %d %d\n", v179, 22, v180, v176, 256, v174, 192);
          __uint64_t v179 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(5);
        }
        syslog(3, "%lld %d AVE %s: AVE_FIG: align32MbW <= MAX_STATICAREASLOWQP_NMB_FRAME_HORIZONTAL && picHeightInMb <= MAX_STATICAREASLOWQP_NMB_FRAME_VERTICAL %d %d %d %d", v179);
      }
      *((_DWORD *)a1 + 65) = 0;
    }
  }
  int v181 = (_DWORD *)a1 + 34625;
  uint64_t v182 = v429;
  if (*((_DWORD *)v3 + 580) >= 0x1Fu)
  {
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      int v183 = AVE_Log_CheckConsole(0x16u);
      __uint64_t v184 = AVE_GetCurrTime();
      __uint64_t v185 = AVE_Log_GetLevelStr(5);
      if (v183)
      {
        printf("%lld %d AVE %s: AVE_FIG: ui32NumCodedBuffers exceeds max allowed value of AVE_CODED_BUF_MAX_NUM (%d) Forcing to AVE_CODED_BUF_MAX_NUM\n", v184, 22, v185, 30);
        __uint64_t v186 = AVE_GetCurrTime();
        int v181 = (_DWORD *)a1 + 34625;
        __uint64_t v407 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: AVE_FIG: ui32NumCodedBuffers exceeds max allowed value of AVE_CODED_BUF_MAX_NUM (%d) Forcing to AVE_CODED_BUF_MAX_NUM", v186, 22, v407, 30);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AVE_FIG: ui32NumCodedBuffers exceeds max allowed value of AVE_CODED_BUF_MAX_NUM (%d) Forcing to AVE_CODED_BUF_MAX_NUM", v184, 22, v185, 30);
      }
    }
    *((_DWORD *)v3 + 580) = 30;
  }
  if (*((unsigned char *)a1 + 255))
  {
    unsigned int v187 = *((_DWORD *)a1 + 49);
    if ((v187 > 0x14 || ((1 << v187) & 0x100009) == 0) && *((unsigned char *)a1 + 244) && !*((unsigned char *)a1 + 252)) {
      goto LABEL_380;
    }
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      int v188 = AVE_Log_CheckConsole(0x16u);
      __uint64_t v189 = AVE_GetCurrTime();
      int v190 = AVE_Log_GetLevelStr(5);
      if (v188)
      {
        printf("%lld %d AVE %s: FIG: eRCMode 0x%x bFlatAreaLowQpEn %d bEnableQPMod %d bEnableQPModRefresh %d -> not supported. set bFlatAreaLowQpEn to false\n", v189, 22, v190, *((_DWORD *)a1 + 49), *((unsigned __int8 *)a1 + 255), *((unsigned __int8 *)a1 + 244), *((unsigned __int8 *)a1 + 252));
        __uint64_t v189 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(5);
        int v181 = (_DWORD *)a1 + 34625;
      }
      syslog(3, "%lld %d AVE %s: FIG: eRCMode 0x%x bFlatAreaLowQpEn %d bEnableQPMod %d bEnableQPModRefresh %d -> not supported. set bFlatAreaLowQpEn to false", v189);
    }
    *((unsigned char *)a1 + 255) = 0;
  }
  if (*((unsigned char *)a1 + 257))
  {
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      int v191 = AVE_Log_CheckConsole(0x16u);
      __uint64_t v192 = AVE_GetCurrTime();
      int v193 = AVE_Log_GetLevelStr(5);
      int v194 = *((unsigned __int8 *)a1 + 255);
      if (v191)
      {
        printf("%lld %d AVE %s: FIG: bFlatAreaLowQpEn %d -> not supported. set bPerceptualQualityOptimization to false\n", v192, 22, v193, v194);
        __uint64_t v195 = AVE_GetCurrTime();
        v408 = AVE_Log_GetLevelStr(5);
        int v181 = (_DWORD *)a1 + 34625;
        syslog(3, "%lld %d AVE %s: FIG: bFlatAreaLowQpEn %d -> not supported. set bPerceptualQualityOptimization to false", v195, 22, v408, *((unsigned __int8 *)a1 + 255));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: bFlatAreaLowQpEn %d -> not supported. set bPerceptualQualityOptimization to false", v192, 22, v193, v194);
      }
    }
    *((unsigned char *)a1 + 257) = 0;
  }
LABEL_380:
  if (*((unsigned char *)a1 + 256) && !*((unsigned char *)a1 + 255))
  {
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      int v196 = AVE_Log_CheckConsole(0x16u);
      __uint64_t v197 = AVE_GetCurrTime();
      int v198 = AVE_Log_GetLevelStr(5);
      int v199 = *((unsigned __int8 *)a1 + 255);
      if (v196)
      {
        printf("%lld %d AVE %s: FIG: bFlatAreaLowQpEn %d -> not supported. set bUltraFlatAreaLowQpEn to false\n", v197, 22, v198, v199);
        __uint64_t v200 = AVE_GetCurrTime();
        int v409 = AVE_Log_GetLevelStr(5);
        int v181 = (_DWORD *)a1 + 34625;
        syslog(3, "%lld %d AVE %s: FIG: bFlatAreaLowQpEn %d -> not supported. set bUltraFlatAreaLowQpEn to false", v200, 22, v409, *((unsigned __int8 *)a1 + 255));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: bFlatAreaLowQpEn %d -> not supported. set bUltraFlatAreaLowQpEn to false", v197, 22, v198, v199);
      }
    }
    *((unsigned char *)a1 + 256) = 0;
  }
  if (*((unsigned char *)a1 + 248) && (!*((unsigned char *)a1 + 247) || !*((unsigned char *)a1 + 255)))
  {
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      int v201 = AVE_Log_CheckConsole(0x16u);
      __uint64_t v202 = AVE_GetCurrTime();
      __uint64_t v203 = AVE_Log_GetLevelStr(5);
      int v204 = *((unsigned __int8 *)a1 + 248);
      int v205 = *((unsigned __int8 *)a1 + 255);
      if (v201)
      {
        printf("%lld %d AVE %s: FIG: bEnableLowVarianceQPMod = %d and requires both bEnableVarianceQPMod %d and bFlatAreaLowQpEn %d. Forcing bEnableLowVarianceQPMod off.\n", v202, 22, v203, v204, *((unsigned __int8 *)a1 + 247), v205);
        __uint64_t v206 = AVE_GetCurrTime();
        __uint64_t v207 = AVE_Log_GetLevelStr(5);
        int v181 = (_DWORD *)a1 + 34625;
        syslog(3, "%lld %d AVE %s: FIG: bEnableLowVarianceQPMod = %d and requires both bEnableVarianceQPMod %d and bFlatAreaLowQpEn %d. Forcing bEnableLowVarianceQPMod off.", v206, 22, v207, *((unsigned __int8 *)a1 + 248), *((unsigned __int8 *)a1 + 247), *((unsigned __int8 *)a1 + 255));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: bEnableLowVarianceQPMod = %d and requires both bEnableVarianceQPMod %d and bFlatAreaLowQpEn %d. Forcing bEnableLowVarianceQPMod off.", v202, 22, v203, v204, *((unsigned __int8 *)a1 + 247), v205);
      }
    }
    *((unsigned char *)a1 + 248) = 0;
  }
  if (*((unsigned char *)a1 + 250) && *((_DWORD *)a1 + 65))
  {
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      int v208 = AVE_Log_CheckConsole(0x16u);
      __uint64_t v209 = AVE_GetCurrTime();
      long long v210 = AVE_Log_GetLevelStr(5);
      if (v208)
      {
        printf("%lld %d AVE %s: FIG: enableCrcQpModMode set and EnableSelStatsFlags set is not supported. Forcing EnableSelStatsFlags to disabled\n", v209, 22, v210);
        __uint64_t v211 = AVE_GetCurrTime();
        __uint64_t v410 = AVE_Log_GetLevelStr(5);
        int v181 = (_DWORD *)a1 + 34625;
        syslog(3, "%lld %d AVE %s: FIG: enableCrcQpModMode set and EnableSelStatsFlags set is not supported. Forcing EnableSelStatsFlags to disabled", v211, 22, v410);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: enableCrcQpModMode set and EnableSelStatsFlags set is not supported. Forcing EnableSelStatsFlags to disabled", v209, 22, v210);
      }
    }
    *((_DWORD *)a1 + 65) = 0;
  }
  if ((*((unsigned char *)a1 + 203) & 0x80) != 0)
  {
    int v212 = v430[310];
    if ((v212 & 0x20) != 0) {
      *((_DWORD *)a1 + 506) |= 0x20u;
    }
    int v213 = v430[311];
    if ((v213 & 0x20) != 0)
    {
      *((_DWORD *)a1 + 506) &= ~0x20u;
      if ((v212 & 0x40) == 0)
      {
LABEL_407:
        if ((v213 & 0x40) == 0) {
          goto LABEL_409;
        }
        goto LABEL_408;
      }
    }
    else if ((v212 & 0x40) == 0)
    {
      goto LABEL_407;
    }
    *((_DWORD *)a1 + 506) |= 0x40u;
    if ((v213 & 0x40) == 0)
    {
LABEL_409:
      *((unsigned char *)a1 + 255) = 0;
      *((_DWORD *)a1 + 65) = 0;
      if (AVE_Log_CheckLevel(0x16u, 6))
      {
        int v214 = AVE_Log_CheckConsole(0x16u);
        __uint64_t v215 = AVE_GetCurrTime();
        uint64_t v216 = AVE_Log_GetLevelStr(6);
        if (v214)
        {
          printf("%lld %d AVE %s: FlatArea and Static QP mod is disabled when lookahead RC feature is enabled\n", v215, 22, v216);
          __uint64_t v217 = AVE_GetCurrTime();
          int v411 = AVE_Log_GetLevelStr(6);
          int v181 = (_DWORD *)a1 + 34625;
          syslog(3, "%lld %d AVE %s: FlatArea and Static QP mod is disabled when lookahead RC feature is enabled", v217, 22, v411);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FlatArea and Static QP mod is disabled when lookahead RC feature is enabled", v215, 22, v216);
        }
      }
      goto LABEL_416;
    }
LABEL_408:
    *((_DWORD *)a1 + 506) &= ~0x40u;
    goto LABEL_409;
  }
LABEL_416:
  int v218 = *((_DWORD *)v3 + 45);
  if (v218 >= 2)
  {
    int v219 = *((_DWORD *)a1 + 49);
    if (v219 && v219 != 20 && !*((unsigned char *)a1 + 103260))
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        int v220 = AVE_Log_CheckConsole(0x16u);
        __uint64_t v221 = AVE_GetCurrTime();
        long long v222 = AVE_Log_GetLevelStr(5);
        int v223 = *((_DWORD *)a1 + 49);
        if (v220)
        {
          printf("%lld %d AVE %s: FIG: i32PPSsCount (%d), eRCMode %d and scaling_list_enabled_flag is false. Not supported. Forcing i32PPSsCount to 1\n", v221, 22, v222, *((_DWORD *)v3 + 45), v223);
          __uint64_t v224 = AVE_GetCurrTime();
          long long v225 = AVE_Log_GetLevelStr(5);
          int v181 = (_DWORD *)a1 + 34625;
          syslog(3, "%lld %d AVE %s: FIG: i32PPSsCount (%d), eRCMode %d and scaling_list_enabled_flag is false. Not supported. Forcing i32PPSsCount to 1", v224, 22, v225, *((_DWORD *)v3 + 45), *((_DWORD *)a1 + 49));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: i32PPSsCount (%d), eRCMode %d and scaling_list_enabled_flag is false. Not supported. Forcing i32PPSsCount to 1", v221, 22, v222, *((_DWORD *)v3 + 45), v223);
        }
      }
      int v218 = 1;
      *((_DWORD *)v3 + 45) = 1;
    }
    if (*((_DWORD *)a1 + 73) == 1)
    {
      uint64_t v226 = 0;
      int32x4_t v227 = 0uLL;
      v228.i64[0] = 0xC0000000CLL;
      v228.i64[1] = 0xC0000000CLL;
      do
      {
        int32x4_t v227 = vsubq_s32(v227, (int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)((char *)&a1[v226 + 14802] + 4), v228)));
        v226 += 2;
      }
      while (v226 != 4);
      int v229 = vaddvq_s32(v227);
      if (v218 != v229)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v234 = AVE_Log_CheckConsole(3u);
          __uint64_t v235 = AVE_GetCurrTime();
          __int16 v236 = AVE_Log_GetLevelStr(4);
          if (v234)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: PPS count = %d and ch_qp_index_offset_cnt = %d... are not compatible. fail\n", v235, 3, v236, "AVE_ValidateEncoderParameters", 8565, "encoderPrivateStorage->VideoParams.i32PPSsCount == ch_qp_index_offset_cnt", *((_DWORD *)v3 + 45), v229);
            __uint64_t v235 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: PPS count = %d and ch_qp_index_offset_cnt = %d... are not compatible. fail", v235);
        }
        return 4294954394;
      }
    }
  }
  if (!*((unsigned char *)v3 + 804))
  {
LABEL_440:
    if (!*v429
      && (*v3 & 0xFFFE) != 4
      && (*((unsigned char *)a1 + 1876) & 0xE0) == 0
      && *((_DWORD *)v3 + 141) <= 1u
      && !*((unsigned char *)v3 + 871))
    {
      goto LABEL_447;
    }
    goto LABEL_445;
  }
  if (*((unsigned char *)v3 + 871))
  {
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      int v230 = AVE_Log_CheckConsole(0x16u);
      __uint64_t v231 = AVE_GetCurrTime();
      int v232 = AVE_Log_GetLevelStr(5);
      if (v230)
      {
        printf("%lld %d AVE %s: MultiRef and WP not supported together. Disabling MultiRef.\n", v231, 22, v232);
        __uint64_t v233 = AVE_GetCurrTime();
        __uint64_t v412 = AVE_Log_GetLevelStr(5);
        int v181 = (_DWORD *)a1 + 34625;
        syslog(3, "%lld %d AVE %s: MultiRef and WP not supported together. Disabling MultiRef.", v233, 22, v412);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: MultiRef and WP not supported together. Disabling MultiRef.", v231, 22, v232);
      }
    }
    *((unsigned char *)v3 + 804) = 0;
    goto LABEL_440;
  }
LABEL_445:
  if (!*((unsigned char *)v3 + 10)) {
    *((unsigned char *)v3 + 10) = 1;
  }
LABEL_447:
  if (*((_DWORD *)a1 + 507) == 1)
  {
    int v237 = *((_DWORD *)a1 + 506);
    if (*((_DWORD *)v3 + 142) == 1)
    {
      *((_DWORD *)a1 + 508) = 0;
      a1[255] = (const void *)0xBFF0000000000000;
      a1[256] = (const void *)0xBFF0000000000000;
      *((unsigned char *)a1 + 216) = 0;
      v3[487] = 0;
      *((_DWORD *)a1 + 486) = 0;
      v237 &= ~4u;
      *((_DWORD *)a1 + 506) = v237;
      *((_DWORD *)v3 + 114) = 0;
    }
  }
  else
  {
    int v237 = *((_DWORD *)a1 + 506);
  }
  if ((v237 & 1) != 0 && !*v429)
  {
    *((_DWORD *)a1 + 506) = v237 & 0xFFFFFFFE;
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      int v238 = AVE_Log_CheckConsole(0x16u);
      __uint64_t v239 = AVE_GetCurrTime();
      __uint64_t v240 = AVE_Log_GetLevelStr(5);
      if (v238)
      {
        printf("%lld %d AVE %s: FIG: CRA not supported with no B Frames. Forcing bClosedGOP to true\n", v239, 22, v240);
        __uint64_t v241 = AVE_GetCurrTime();
        v413 = AVE_Log_GetLevelStr(5);
        int v181 = (_DWORD *)a1 + 34625;
        syslog(3, "%lld %d AVE %s: FIG: CRA not supported with no B Frames. Forcing bClosedGOP to true", v241, 22, v413);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: CRA not supported with no B Frames. Forcing bClosedGOP to true", v239, 22, v240);
      }
    }
  }
  if (*((_DWORD *)v3 + 141) >= 2u)
  {
    if (*((int *)a1 + 57) <= 0 && AVE_Log_CheckLevel(0x16u, 5))
    {
      int v242 = AVE_Log_CheckConsole(0x16u);
      __uint64_t v243 = AVE_GetCurrTime();
      long long v244 = AVE_Log_GetLevelStr(5);
      if (v242)
      {
        printf("%lld %d AVE %s: FIG: iLayerNum > 1 and ExpectedFR is not set, behavior is undefined\n", v243, 22, v244);
        __uint64_t v245 = AVE_GetCurrTime();
        v414 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: FIG: iLayerNum > 1 and ExpectedFR is not set, behavior is undefined", v245, 22, v414);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: iLayerNum > 1 and ExpectedFR is not set, behavior is undefined", v243, 22, v244);
      }
    }
    if (*((unsigned char *)a1 + 254))
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        int v246 = AVE_Log_CheckConsole(0x16u);
        __uint64_t v247 = AVE_GetCurrTime();
        int v248 = AVE_Log_GetLevelStr(5);
        if (v246)
        {
          printf("%lld %d AVE %s: FIG: MV-HEVC force to disable FrameDrop\n", v247, 22, v248);
          __uint64_t v249 = AVE_GetCurrTime();
          v415 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: MV-HEVC force to disable FrameDrop", v249, 22, v415);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: MV-HEVC force to disable FrameDrop", v247, 22, v248);
        }
      }
      *((unsigned char *)a1 + 254) = 0;
    }
    if (*((unsigned char *)v3 + 184))
    {
      *((unsigned char *)v3 + 184) = 0;
      *((_DWORD *)v3 + 47) = 1;
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        int v250 = AVE_Log_CheckConsole(0x16u);
        __uint64_t v251 = AVE_GetCurrTime();
        __uint64_t v252 = AVE_Log_GetLevelStr(5);
        if (v250)
        {
          printf("%lld %d AVE %s: FIG: MV-HEVC force to Frame Encoding mode\n", v251, 22, v252);
          __uint64_t v253 = AVE_GetCurrTime();
          v416 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: MV-HEVC force to Frame Encoding mode", v253, 22, v416);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: MV-HEVC force to Frame Encoding mode", v251, 22, v252);
        }
      }
    }
    if (*(void *)(v2 + 164))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v254 = AVE_Log_CheckConsole(3u);
        __uint64_t v255 = AVE_GetCurrTime();
        int v256 = AVE_Log_GetLevelStr(4);
        if (v254)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: MV-HEVC does not support Multipass\n", v255, 3, v256, "AVE_ValidateEncoderParameters", 8642, "false");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: MV-HEVC does not support Multipass");
      }
      return 4294954396;
    }
    if (*((_DWORD *)v3 + 577) == 1)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v257 = AVE_Log_CheckConsole(3u);
        __uint64_t v258 = AVE_GetCurrTime();
        __uint64_t v259 = AVE_Log_GetLevelStr(4);
        if (v257)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: MV-HEVC does not support Parallelization\n", v258, 3, v259, "AVE_ValidateEncoderParameters", 8649, "false");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: MV-HEVC does not support Parallelization");
      }
      return 4294954396;
    }
    int v260 = *((_DWORD *)a1 + 49);
    if (v260 == 4 || v260 == 2 && (*((unsigned char *)a1 + 203) & 0x80) == 0)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v261 = AVE_Log_CheckConsole(3u);
        __uint64_t v262 = AVE_GetCurrTime();
        __uint64_t v263 = AVE_Log_GetLevelStr(4);
        if (v261)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: MV-HEVC does not support DRL/CBR\n", v262, 3, v263, "AVE_ValidateEncoderParameters", 8657, "false");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: MV-HEVC does not support DRL/CBR");
      }
      return 4294954396;
    }
    if (*((int *)a1 + 56) >= 1)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v264 = AVE_Log_CheckConsole(3u);
        __uint64_t v265 = AVE_GetCurrTime();
        int v266 = AVE_Log_GetLevelStr(4);
        if (v264)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: MV-HEVC does not support BaseLayerFrameRate\n", v265, 3, v266, "AVE_ValidateEncoderParameters", 8663, "false");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: MV-HEVC does not support BaseLayerFrameRate");
      }
      return 4294954396;
    }
    if (*((_DWORD *)a1 + 25773) != 1)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v272 = AVE_Log_CheckConsole(3u);
        __uint64_t v273 = AVE_GetCurrTime();
        int v274 = AVE_Log_GetLevelStr(4);
        if (v272)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: MV-HEVC does not support ChromaFmt_400, ChromaFmt_422, or ChromaFmt_444\n", v273, 3, v274, "AVE_ValidateEncoderParameters", 8670, "false");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: MV-HEVC does not support ChromaFmt_400, ChromaFmt_422, or ChromaFmt_444");
      }
      return 4294954396;
    }
    __uint64_t v267 = (unsigned __int8 *)a1 + 93859;
    unsigned int v268 = a1[253] & 0xFFFFFFFB;
    *((unsigned char *)v3 + 460) = 1;
    *((unsigned char *)v3 + 572) = 1;
    *((_DWORD *)a1 + 506) = v268 | 1;
    if (*((unsigned char *)a1 + 93859))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 4))
      {
        int v269 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v270 = AVE_GetCurrTime();
        v271 = AVE_Log_GetLevelStr(4);
        if (v269)
        {
          printf("%lld %d AVE %s: %s:%d %s | non-zero layer ID at base layer %d\n", v270, 30, v271, "AVE_ValidateEncoderParameters", 8685, "encoderPrivateStorage->VPSHevcParams.layer_id_in_nuh[0] == 0", *v267);
          __uint64_t v270 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | non-zero layer ID at base layer %d", v270);
      }
      return 4294948265;
    }
    __uint64_t v275 = v3;
    if (*((_DWORD *)v3 + 141) >= 3u)
    {
      if (AVE_Log_CheckLevel(0x1Eu, 4))
      {
        int v281 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v282 = AVE_GetCurrTime();
        __uint64_t v283 = AVE_Log_GetLevelStr(4);
        if (v281)
        {
          printf("%lld %d AVE %s: %s:%d %s | video layer number %d is larger than MAX %d\n", v282, 30, v283, "AVE_ValidateEncoderParameters", 8690, "encoderPrivateStorage->VideoParams.iLayerNum <= ((2) < ((63 + 1)) ? (2) : ((63 + 1)))", *((_DWORD *)v3 + 141), 2);
          __uint64_t v282 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | video layer number %d is larger than MAX %d", v282);
      }
      return 4294948264;
    }
    unsigned int v276 = *((unsigned __int8 *)a1 + 93923);
    if (!*((unsigned char *)a1 + 93923))
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        int v277 = AVE_Log_CheckConsole(0x16u);
        __uint64_t v278 = AVE_GetCurrTime();
        int v279 = AVE_Log_GetLevelStr(5);
        if (v277)
        {
          printf("%lld %d AVE %s: kVTCompressionPropertyKey_MVHEVCViewIDs never received, setting default values\n", v278, 22, v279);
          __uint64_t v280 = AVE_GetCurrTime();
          v417 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: kVTCompressionPropertyKey_MVHEVCViewIDs never received, setting default values", v280, 22, v417);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: kVTCompressionPropertyKey_MVHEVCViewIDs never received, setting default values", v278, 22, v279);
        }
      }
      unsigned int v284 = *((_DWORD *)v275 + 141);
      *((_DWORD *)v275 + 142) = v284;
      unsigned int v276 = 1;
      *((unsigned char *)a1 + 93923) = 1;
      if (v284)
      {
        int v285 = 0;
        do
        {
          __uint64_t v286 = (char *)a1 + v285;
          v286[93924] = v285;
          v286[20208] = v285++;
        }
        while (v284 > v285);
        unsigned int v276 = 1;
      }
    }
    uint64_t v287 = 0;
    while (2)
    {
      unsigned __int8 v288 = 0;
      while (*((unsigned __int8 *)a1 + v287 + 20208) != *((unsigned __int8 *)a1 + v288 + 93924))
      {
        if (v276 < ++v288)
        {
          if (AVE_Log_CheckLevel(3u, 4))
          {
            int v382 = AVE_Log_CheckConsole(3u);
            __uint64_t v383 = AVE_GetCurrTime();
            __uint64_t v384 = AVE_Log_GetLevelStr(4);
            if (v382)
            {
              printf("%lld %d AVE %s: %s:%d %s | FIG: LeftRightID %d not found in viewID list\n", v383, 3, v384, "AVE_ValidateEncoderParameters", 8719, "bFound", *((unsigned __int8 *)a1 + v287 + 20208));
              __uint64_t v385 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
              syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: LeftRightID %d not found in viewID list", v385);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: LeftRightID %d not found in viewID list", v383);
            }
          }
          return 4294948263;
        }
      }
      if (++v287 != 2) {
        continue;
      }
      break;
    }
    if (*((_DWORD *)a1 + 65) == 2) {
      *((_DWORD *)a1 + 65) = 0;
    }
    int v3 = v275;
    *((unsigned char *)v275 + 987) = 1;
    int v181 = (_DWORD *)a1 + 34625;
    uint64_t v182 = v429;
  }
  int v289 = *((unsigned __int8 *)v3 + 975);
  *((_DWORD *)a1 + 485) = v289;
  int v290 = *((unsigned __int8 *)v3 + 974);
  *((_DWORD *)a1 + 484) = v290;
  if (!(v290 | v289)) {
    goto LABEL_613;
  }
  int v291 = *((_DWORD *)a1 + 56);
  if (v291 < 1)
  {
    unsigned int v293 = 0;
LABEL_559:
    __uint64_t v308 = v3 + 228;
    unsigned int v309 = v3[228];
    if (!v3[228]) {
      goto LABEL_572;
    }
    if (v291 <= 0)
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        int v310 = AVE_Log_CheckConsole(0x16u);
        __uint64_t v311 = AVE_GetCurrTime();
        v312 = AVE_Log_GetLevelStr(5);
        int v313 = *v308;
        if (v310)
        {
          printf("%lld %d AVE %s: FIG: numTemporalLayers set to %d but BaseLayerFrameRate not specified. Encoder has to turn off hierarchical encoding\n", v311, 22, v312, v313);
          __uint64_t v314 = AVE_GetCurrTime();
          int v418 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: numTemporalLayers set to %d but BaseLayerFrameRate not specified. Encoder has to turn off hierarchical encoding", v314, 22, v418, *v308);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: numTemporalLayers set to %d but BaseLayerFrameRate not specified. Encoder has to turn off hierarchical encoding", v311, 22, v312, v313);
        }
      }
      unsigned int v309 = 0;
      v3[228] = 0;
      *((unsigned char *)v3 + 974) = 0;
    }
    goto LABEL_566;
  }
  int v292 = *((_DWORD *)a1 + 57);
  if (v292 >= 1)
  {
    unsigned int v293 = -1;
    do
      int v294 = v292 >> (v293++ + 2);
    while (v294 >= v291);
    if (v291 << v293 != v292)
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        int v295 = AVE_Log_CheckConsole(0x16u);
        __uint64_t v296 = AVE_GetCurrTime();
        v297 = AVE_Log_GetLevelStr(5);
        CFStringRef v298 = *a1;
        int v299 = *((_DWORD *)a1 + 56);
        if (v295)
        {
          printf("%lld %d AVE %s: FIG: %p: ExpectedFrameRate %d is not multiple of BaseLayerFrameRate %d\n", v296, 22, v297, v298, *((_DWORD *)a1 + 57), v299);
          __uint64_t v300 = AVE_GetCurrTime();
          v301 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: %p: ExpectedFrameRate %d is not multiple of BaseLayerFrameRate %d", v300, 22, v301, *a1, *((_DWORD *)a1 + 57), *((_DWORD *)a1 + 56));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: %p: ExpectedFrameRate %d is not multiple of BaseLayerFrameRate %d", v296, 22, v297, v298, *((_DWORD *)a1 + 57), v299);
        }
      }
      int v291 = *((int *)a1 + 57) >> v293;
      *((_DWORD *)a1 + 56) = v291;
    }
    goto LABEL_559;
  }
  if (AVE_Log_CheckLevel(0x16u, 5))
  {
    int v302 = AVE_Log_CheckConsole(0x16u);
    __uint64_t v303 = AVE_GetCurrTime();
    int v304 = AVE_Log_GetLevelStr(5);
    int v305 = *((_DWORD *)a1 + 57);
    if (v302)
    {
      printf("%lld %d AVE %s: FIG: %p: ExpectedFrameRate %d is not correct\n", v303, 22, v304, *a1, v305);
      __uint64_t v306 = AVE_GetCurrTime();
      int v307 = AVE_Log_GetLevelStr(5);
      syslog(3, "%lld %d AVE %s: FIG: %p: ExpectedFrameRate %d is not correct", v306, 22, v307, *a1, *((_DWORD *)a1 + 57));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: %p: ExpectedFrameRate %d is not correct", v303, 22, v304, *a1, v305);
    }
  }
  *((_DWORD *)a1 + 56) = 15;
  __uint64_t v308 = v3 + 228;
  unsigned int v309 = v3[228];
  unsigned int v293 = 1;
  if (v3[228])
  {
LABEL_566:
    if (v293 != v309)
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        int v315 = AVE_Log_CheckConsole(0x16u);
        __uint64_t v316 = AVE_GetCurrTime();
        int v317 = AVE_Log_GetLevelStr(5);
        if (v315)
        {
          printf("%lld %d AVE %s: FIG: NumberOfTemporalLayers value is not optimal. Overriding with optimal value. calculatedNumTemporalLayers %d\n", v316, 22, v317, v293);
          __uint64_t v318 = AVE_GetCurrTime();
          __uint64_t v419 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: NumberOfTemporalLayers value is not optimal. Overriding with optimal value. calculatedNumTemporalLayers %d", v318, 22, v419, v293);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: NumberOfTemporalLayers value is not optimal. Overriding with optimal value. calculatedNumTemporalLayers %d", v316, 22, v317, v293);
        }
      }
      unsigned int v309 = (unsigned __int16)v293;
      *__uint64_t v308 = v293;
    }
  }
LABEL_572:
  if (v293 <= v309) {
    unsigned __int16 v319 = v309;
  }
  else {
    unsigned __int16 v319 = v293;
  }
  unsigned int v320 = v319;
  v3[228] = v319;
  if (*((_DWORD *)v3 + 141) >= 2u && v319)
  {
    uint64_t v182 = v429;
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      int v321 = AVE_Log_CheckConsole(0x16u);
      __uint64_t v322 = AVE_GetCurrTime();
      v323 = AVE_Log_GetLevelStr(5);
      int v324 = *v308;
      if (v321)
      {
        printf("%lld %d AVE %s: FIG: NumberOfTemporalLayers is %d and we are encoding multiple layers. Setting NumberOfTemporalLayers to 0\n", v322, 22, v323, v324);
        __uint64_t v325 = AVE_GetCurrTime();
        v420 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: FIG: NumberOfTemporalLayers is %d and we are encoding multiple layers. Setting NumberOfTemporalLayers to 0", v325, 22, v420, *v308);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: NumberOfTemporalLayers is %d and we are encoding multiple layers. Setting NumberOfTemporalLayers to 0", v322, 22, v323, v324);
      }
    }
    unsigned int v320 = 0;
    *__uint64_t v308 = 0;
    int v326 = *((_DWORD *)a1 + 506);
  }
  else
  {
    int v326 = *((_DWORD *)a1 + 506);
    uint64_t v182 = v429;
    if ((v326 & 4) != 0 && v320 > 1 && !*((unsigned char *)v3 + 901))
    {
      v326 &= ~4u;
      *((_DWORD *)a1 + 506) = v326;
    }
  }
  if ((*((_DWORD *)a1 + 471) * *((_DWORD *)a1 + 470)) <= 0x7E8FFF)
  {
    if (v320 >= 4)
    {
      unsigned int v320 = 3;
      goto LABEL_591;
    }
  }
  else if (v320 > 2)
  {
    unsigned int v320 = 2;
LABEL_591:
    *__uint64_t v308 = v320;
  }
  int v181 = (_DWORD *)a1 + 34625;
  if (!*((unsigned char *)v3 + 976))
  {
    int v327 = *((_DWORD *)a1 + 57);
    if (v327 < 1)
    {
      __int16 v329 = 2;
    }
    else
    {
      int v328 = v327 / *((_DWORD *)a1 + 56) - 2;
      if (v328 > 6) {
        __int16 v329 = 0;
      }
      else {
        __int16 v329 = word_1BA78FFFC[v328];
      }
    }
    v3[229] = v329;
  }
  *((_DWORD *)a1 + 29600) = 1;
  *((_DWORD *)a1 + 486) = 3;
  *__uint64_t v432 = 0;
  if (*((unsigned char *)a1 + 216))
  {
    if (v3[229] > v320)
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        int v330 = AVE_Log_CheckConsole(0x16u);
        __uint64_t v331 = AVE_GetCurrTime();
        v332 = AVE_Log_GetLevelStr(5);
        if (v330)
        {
          printf("%lld %d AVE %s: FIG: numBTemporalLayers set to invalid value defaulting to 0\n", v331, 22, v332);
          __uint64_t v333 = AVE_GetCurrTime();
          __uint64_t v421 = AVE_Log_GetLevelStr(5);
          int v181 = (_DWORD *)a1 + 34625;
          syslog(3, "%lld %d AVE %s: FIG: numBTemporalLayers set to invalid value defaulting to 0", v333, 22, v421);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: numBTemporalLayers set to invalid value defaulting to 0", v331, 22, v332);
        }
      }
      v3[229] = 0;
      unsigned int v320 = v3[228];
    }
  }
  else
  {
    *((_DWORD *)a1 + 486) = 0;
    *((_DWORD *)a1 + 506) = v326 & 0xFFFFFFFB;
    v3[229] = 0;
    *((unsigned char *)v3 + 975) = 0;
    if (*((int *)v2 + 36) <= 2 && *((_DWORD *)a1 + 66) == 1) {
      *__uint64_t v432 = 3;
    }
    if (*((_DWORD *)a1 + 57) == *((_DWORD *)a1 + 56))
    {
      *((unsigned char *)v3 + 974) = 0;
      *((_DWORD *)v3 + 114) = 0;
      *((_DWORD *)a1 + 56) = 0;
      goto LABEL_613;
    }
  }
  if (v320)
  {
    *((_DWORD *)v3 + 628) = v320;
    *unsigned int v9 = v320;
  }
LABEL_613:
  int v334 = *((_DWORD *)v2 + 36);
  if (v334 >= 28)
  {
    *((_DWORD *)a1 + 25810) = 3;
    *int v181 = 4;
  }
  if (*((int *)a1 + 507) <= 0
    && *((int *)a1 + 508) <= 0
    && *((double *)a1 + 255) <= 0.0
    && *((double *)a1 + 256) <= 0.0)
  {
    *((_DWORD *)a1 + 507) = 30;
  }
  if (!v3[228])
  {
    *((unsigned char *)v3 + 2516) = 1;
    *((unsigned char *)a1 + 102540) = 1;
  }
  if (!*((unsigned char *)a1 + 216))
  {
    *((_DWORD *)a1 + 486) = 0;
    *((_DWORD *)a1 + 506) &= ~4u;
    v3[229] = 0;
    *((unsigned char *)v3 + 975) = 0;
  }
  if (!*((unsigned char *)v3 + 901))
  {
    int v335 = *((_DWORD *)a1 + 506);
    if ((v335 & 4) != 0 && (*((unsigned char *)a1 + 203) & 0x80) != 0) {
      *((_DWORD *)a1 + 506) = v335 & 0xFFFFFFFB;
    }
  }
  unsigned int v336 = v430[339];
  if (v336 <= 5) {
    *int v181 = 5 - v336;
  }
  if (v334 <= 2)
  {
    if (*((unsigned char *)v3 + 141)) {
      *((unsigned char *)v3 + 141) = 0;
    }
    *((unsigned char *)v3 + 140) = 0;
  }
  else
  {
    *((unsigned char *)v3 + 141) = 1;
  }
  if (*((_DWORD *)a1 + 66) == 1 && *((unsigned char *)v3 + 989)) {
    *((unsigned char *)v3 + 989) = 0;
  }
  if (*((_DWORD *)v3 + 233) == 1 && *((unsigned char *)v3 + 981)) {
    *((unsigned char *)v3 + 981) = 0;
  }
  if (!*((unsigned char *)v3 + 977) && *((_DWORD *)a1 + 56) == 1 && *((int *)a1 + 57) <= 0)
  {
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      int v337 = AVE_Log_CheckConsole(0x16u);
      __uint64_t v338 = AVE_GetCurrTime();
      __uint64_t v339 = AVE_Log_GetLevelStr(5);
      int v340 = *((_DWORD *)a1 + 57);
      if (v337)
      {
        printf("%lld %d AVE %s: FIG: NonDroppableFrameRate = 1 and ExpectedFrameRate = %d. Not Supported\n", v338, 22, v339, v340);
        __uint64_t v341 = AVE_GetCurrTime();
        int v422 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: FIG: NonDroppableFrameRate = 1 and ExpectedFrameRate = %d. Not Supported", v341, 22, v422, *((_DWORD *)a1 + 57));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: NonDroppableFrameRate = 1 and ExpectedFrameRate = %d. Not Supported", v338, 22, v339, v340);
      }
    }
    *((_DWORD *)a1 + 56) = 0;
  }
  if (*((unsigned char *)a1 + 1772))
  {
    *((_DWORD *)a1 + 57) = *((_DWORD *)v3 + 398);
    *((_DWORD *)a1 + 506) &= ~4u;
  }
  if ((*((unsigned char *)a1 + 1876) & 0xE0) != 0)
  {
    *((unsigned char *)a1 + 253) = 1;
    *((unsigned char *)v3 + 821) = 1;
    if (!*((unsigned char *)v3 + 477)) {
      *((unsigned char *)v3 + 477) = 3;
    }
    *((unsigned char *)a1 + 120556) = 0;
    *((unsigned char *)v3 + 9) = 1;
    *((unsigned char *)v3 + 476) = 1;
    if (*((_DWORD *)v3 + 138) == 1) {
      *uint64_t v182 = 0;
    }
    if (*((_DWORD *)v3 + 141) >= 2u)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v342 = AVE_Log_CheckConsole(3u);
        __uint64_t v343 = AVE_GetCurrTime();
        int v344 = AVE_Log_GetLevelStr(4);
        if (v342)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: MCTF unsupported for MV-HEVC. Fail\n", v343, 3, v344, "AVE_ValidateEncoderParameters", 9077, "false");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: MCTF unsupported for MV-HEVC. Fail");
      }
      return 4294954394;
    }
    if (*((_DWORD *)a1 + 25773) != 1)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v351 = AVE_Log_CheckConsole(3u);
        __uint64_t v352 = AVE_GetCurrTime();
        int v353 = AVE_Log_GetLevelStr(4);
        if (v351)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: MCTF for ChromaFmt %d... not supported. Fail\n", v352, 3, v353, "AVE_ValidateEncoderParameters", 9080, "(encoderPrivateStorage->saSPS[0].chroma_format_idc == ChromaFmt_420)", v9[139]);
          __uint64_t v352 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: MCTF for ChromaFmt %d... not supported. Fail", v352);
      }
      return 4294954394;
    }
  }
  else if (!*((unsigned char *)v3 + 9))
  {
    unint64_t v345 = (unint64_t)a1[25] & 0xFFFFFFFFFFFFFFFELL;
    char v346 = 1;
    goto LABEL_664;
  }
  char v346 = 0;
  unint64_t v345 = (unint64_t)a1[25] | 1;
LABEL_664:
  a1[25] = (const void *)v345;
  if (*((unsigned char *)v3 + 871))
  {
    if (*((int *)v3 + 404) > 0) {
      char v346 = 1;
    }
    if ((v346 & 1) != 0
      || *((_DWORD *)v3 + 141) > 1u
      || *((unsigned char *)v3 + 909)
      || (v345 & 0x80000000) != 0
      || *(void *)(v2 + 164)
      || *((int *)v3 + 226) >= 4)
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        int v347 = AVE_Log_CheckConsole(0x16u);
        __uint64_t v348 = AVE_GetCurrTime();
        __uint64_t v349 = AVE_Log_GetLevelStr(5);
        if (v347)
        {
          printf("%lld %d AVE %s: FIG: Force to disable Weighted Prediction\n", v348, 22, v349);
          __uint64_t v350 = AVE_GetCurrTime();
          __uint64_t v423 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: Force to disable Weighted Prediction", v350, 22, v423);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: Force to disable Weighted Prediction", v348, 22, v349);
        }
      }
      *((_DWORD *)v3 + 18) = 0;
      *((unsigned char *)v3 + 871) = 0;
      *(_WORD *)((char *)a1 + 118485) = 0;
      *((unsigned char *)a1 + 126884) = 0;
    }
  }
  if (*((unsigned char *)v3 + 184))
  {
    int v354 = *((_DWORD *)v3 + 47);
    if (v354 == 1)
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        int v355 = AVE_Log_CheckConsole(0x16u);
        __uint64_t v356 = AVE_GetCurrTime();
        int v357 = AVE_Log_GetLevelStr(5);
        if (v355)
        {
          printf("%lld %d AVE %s: FIG: Only one slice. Force to Frame Encoding Mode\n", v356, 22, v357);
          __uint64_t v358 = AVE_GetCurrTime();
          v424 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: Only one slice. Force to Frame Encoding Mode", v358, 22, v424);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: Only one slice. Force to Frame Encoding Mode", v356, 22, v357);
        }
      }
      *((unsigned char *)v3 + 184) = 0;
      int v354 = *((_DWORD *)v3 + 47);
    }
    if (v354)
    {
      uint64_t v359 = 0;
      uint64_t v360 = (v354 - 1);
      int v361 = (int *)(v3 + 98);
      while (1)
      {
        if (v360 == v359)
        {
          int v362 = HIDWORD(a1[v360 + 2258]);
          if (v362 < 96) {
            break;
          }
        }
        else
        {
          int v362 = *v361;
          if (*v361 < 128) {
            break;
          }
        }
        if ((v362 + *(v361 - 1)) > *((_DWORD *)a1 + 471)) {
          break;
        }
        ++v359;
        v361 += 2;
        if (v354 == v359) {
          goto LABEL_706;
        }
      }
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        int v363 = AVE_Log_CheckConsole(0x16u);
        __uint64_t v364 = AVE_GetCurrTime();
        __uint64_t v365 = AVE_Log_GetLevelStr(5);
        if (v363)
        {
          printf("%lld %d AVE %s: FIG: Slice Parameters Invalid. slice[%d] iY: %d, iHeight: %d, frame height: %d, Force to Frame Encoding\n", v364, 22, v365, v359, *(v361 - 1), *v361, *((_DWORD *)a1 + 471));
          __uint64_t v364 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(5);
        }
        syslog(3, "%lld %d AVE %s: FIG: Slice Parameters Invalid. slice[%d] iY: %d, iHeight: %d, frame height: %d, Force to Frame Encoding", v364);
      }
      *((unsigned char *)v3 + 184) = 0;
      *(void *)(v3 + 94) = 1;
      *((_DWORD *)v3 + 49) = *((_DWORD *)a1 + 471);
    }
  }
LABEL_706:
  int v366 = *((_DWORD *)v2 + 36);
  if (v366 >= 8)
  {
    char v367 = 2;
    if (v366 <= 0x1C && ((1 << v366) & 0x14410800) != 0)
    {
      if (*((_DWORD *)a1 + 73)) {
        char v367 = 2;
      }
      else {
        char v367 = 5;
      }
    }
  }
  else
  {
    char v367 = 5;
  }
  *((unsigned char *)v3 + 573) = v367;
  int v368 = *((_DWORD *)a1 + 469) | 0x1E;
  *((_DWORD *)a1 + 469) = v368;
  if (!*((unsigned char *)v3 + 477)) {
    *((_DWORD *)a1 + 469) = v368 & 0xFFFFFFF7;
  }
  int v369 = *((_DWORD *)a1 + 25784);
  if (*((_DWORD *)a1 + 49) != 8)
  {
    if (AVE_CheckQuality(*((double *)a1 + 227), v369 + 8))
    {
      if (!AVE_Log_CheckLevel(3u, 4)) {
        return 4294954394;
      }
      int v370 = AVE_Log_CheckConsole(3u);
      __uint64_t v19 = AVE_GetCurrTime();
      __uint64_t v371 = AVE_Log_GetLevelStr(4);
      if (v370)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: Invalid Quality %f\n", v19, 3, v371, "AVE_ValidateEncoderParameters", 9190, "false", *((double *)a1 + 227));
        __uint64_t v19 = AVE_GetCurrTime();
        __uint64_t v371 = AVE_Log_GetLevelStr(4);
      }
      int v426 = a1[227];
      uint64_t v425 = 9190;
      int v388 = v371;
      int v21 = "%lld %d AVE %s: %s:%d %s | FIG: Invalid Quality %f";
      goto LABEL_210;
    }
    int v369 = *((_DWORD *)a1 + 25784);
  }
  if (AVE_CheckQPValue(*((_DWORD *)a1 + 456), v369 + 8))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      return 4294954394;
    }
    int v372 = AVE_Log_CheckConsole(3u);
    __uint64_t v19 = AVE_GetCurrTime();
    v373 = AVE_Log_GetLevelStr(4);
    if (v372)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: Invalid InitialQpI %d\n", v19, 3, v373, "AVE_ValidateEncoderParameters", 9195, "false", *((_DWORD *)a1 + 456));
      __uint64_t v19 = AVE_GetCurrTime();
      v373 = AVE_Log_GetLevelStr(4);
    }
    int v426 = (const void *)*((unsigned int *)a1 + 456);
    uint64_t v425 = 9195;
    int v388 = v373;
    int v21 = "%lld %d AVE %s: %s:%d %s | FIG: Invalid InitialQpI %d";
    goto LABEL_210;
  }
  if (AVE_CheckQPValue(*((_DWORD *)a1 + 457), *((_DWORD *)a1 + 25784) + 8))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      return 4294954394;
    }
    int v374 = AVE_Log_CheckConsole(3u);
    __uint64_t v19 = AVE_GetCurrTime();
    __uint64_t v375 = AVE_Log_GetLevelStr(4);
    if (v374)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: Invalid InitialQpP %d\n", v19, 3, v375, "AVE_ValidateEncoderParameters", 9200, "false", *((_DWORD *)a1 + 457));
      __uint64_t v19 = AVE_GetCurrTime();
      __uint64_t v375 = AVE_Log_GetLevelStr(4);
    }
    int v426 = (const void *)*((unsigned int *)a1 + 457);
    uint64_t v425 = 9200;
    int v388 = v375;
    int v21 = "%lld %d AVE %s: %s:%d %s | FIG: Invalid InitialQpP %d";
    goto LABEL_210;
  }
  if (AVE_CheckQPValue(*((_DWORD *)a1 + 458), *((_DWORD *)a1 + 25784) + 8))
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      return 4294954394;
    }
    int v376 = AVE_Log_CheckConsole(3u);
    __uint64_t v19 = AVE_GetCurrTime();
    int v377 = AVE_Log_GetLevelStr(4);
    if (v376)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: Invalid InitialQpB %d\n", v19, 3, v377, "AVE_ValidateEncoderParameters", 9205, "false", *((_DWORD *)a1 + 458));
      __uint64_t v19 = AVE_GetCurrTime();
      int v377 = AVE_Log_GetLevelStr(4);
    }
    int v426 = (const void *)*((unsigned int *)a1 + 458);
    uint64_t v425 = 9205;
    int v388 = v377;
    int v21 = "%lld %d AVE %s: %s:%d %s | FIG: Invalid InitialQpB %d";
    goto LABEL_210;
  }
  int v378 = *((_DWORD *)a1 + 507) != 1 || *((_DWORD *)v3 + 142) != 1;
  uint64_t result = AVE_Enc_CheckResolution(*((_DWORD *)v2 + 37), 1, *((_DWORD *)a1 + 470), *((_DWORD *)a1 + 471), v378);
  if (result)
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      return 4294954394;
    }
    int v379 = AVE_Log_CheckConsole(3u);
    __uint64_t v19 = AVE_GetCurrTime();
    __uint64_t v380 = AVE_Log_GetLevelStr(4);
    if (v379)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: dimensions (%dx%d) not supported %d.\n", v19, 3, v380, "AVE_ValidateEncoderParameters", 9219, "false", *((_DWORD *)a1 + 470), *((_DWORD *)a1 + 471), *((_DWORD *)a1 + 507));
      __uint64_t v19 = AVE_GetCurrTime();
      __uint64_t v380 = AVE_Log_GetLevelStr(4);
    }
    uint64_t v427 = *((unsigned int *)a1 + 471);
    uint64_t v428 = *((unsigned int *)a1 + 507);
    int v426 = (const void *)*((unsigned int *)a1 + 470);
    uint64_t v425 = 9219;
    int v388 = v380;
    int v21 = "%lld %d AVE %s: %s:%d %s | FIG: dimensions (%dx%d) not supported %d.";
    goto LABEL_210;
  }
  return result;
}

void AVE_PrepareVideoAndSequenceHeader(uint64_t a1, __CVBuffer *a2)
{
  uint64_t v314 = *MEMORY[0x1E4F143B8];
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v4 = AVE_Log_CheckConsole(0x14u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v4)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_PrepareVideoAndSequenceHeader\n", CurrTime, 20, LevelStr);
      __uint64_t v7 = AVE_GetCurrTime();
      int v277 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PrepareVideoAndSequenceHeader", v7, 20, v277);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PrepareVideoAndSequenceHeader", CurrTime, 20, LevelStr);
    }
  }
  if (!a2)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v11 = AVE_Log_CheckConsole(3u);
      __uint64_t v12 = AVE_GetCurrTime();
      __uint64_t v13 = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: imageBuffer = NULL.\n", v12, 3, v13, "AVE_PrepareVideoAndSequenceHeader", 6463, "imageBuffer != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: imageBuffer = NULL.");
    }
    goto LABEL_344;
  }
  pixelBuffer = a2;
  __uint64_t v8 = (BOOL *)(a1 + 109736);
  unsigned int v9 = (_DWORD *)(a1 + 102536);
  uint64_t v298 = a1 + 18808;
  __src = (_DWORD *)(a1 + 102520);
  __uint64_t v296 = (_DWORD *)(a1 + 17920);
  int v299 = (_DWORD *)(a1 + 102536);
  switch(*(_DWORD *)(a1 + 18808))
  {
    case 1:
      *(_WORD *)(a1 + 103260) = 1;
      goto LABEL_103;
    case 2:
    case 9:
      long long v309 = xmmword_1BA79D780;
      long long v310 = unk_1BA79D790;
      long long v311 = xmmword_1BA79D7A0;
      long long v312 = unk_1BA79D7B0;
      long long v305 = xmmword_1BA79D740;
      long long v306 = unk_1BA79D750;
      long long v307 = xmmword_1BA79D760;
      long long v308 = unk_1BA79D770;
      long long v301 = ExplicitScalingList4x4;
      long long v302 = unk_1BA79D710;
      long long v303 = xmmword_1BA79D720;
      long long v304 = unk_1BA79D730;
      int v10 = &ExplicitScalingList;
      goto LABEL_17;
    case 8:
      if (*(unsigned char *)(a1 + 18350))
      {
        long long v309 = xmmword_1BA79C400;
        long long v310 = unk_1BA79C410;
        long long v311 = xmmword_1BA79C420;
        long long v312 = unk_1BA79C430;
        long long v305 = xmmword_1BA79C3C0;
        long long v306 = unk_1BA79C3D0;
        long long v307 = xmmword_1BA79C3E0;
        long long v308 = unk_1BA79C3F0;
        long long v301 = ExplicitStillHEVCHighGainScalingList4x4_PQ;
        long long v302 = unk_1BA79C390;
        long long v303 = xmmword_1BA79C3A0;
        long long v304 = unk_1BA79C3B0;
        int v10 = &ExplicitStillHEVCHighGainScalingList_PQ;
      }
      else
      {
        long long v309 = xmmword_1BA79CDC0;
        long long v310 = unk_1BA79CDD0;
        long long v311 = xmmword_1BA79CDE0;
        long long v312 = unk_1BA79CDF0;
        long long v305 = xmmword_1BA79CD80;
        long long v306 = unk_1BA79CD90;
        long long v307 = xmmword_1BA79CDA0;
        long long v308 = unk_1BA79CDB0;
        long long v301 = ExplicitStillHEVCHighGainScalingList4x4;
        long long v302 = unk_1BA79CD50;
        long long v303 = xmmword_1BA79CD60;
        long long v304 = unk_1BA79CD70;
        int v10 = &ExplicitStillHEVCHighGainScalingList;
      }
LABEL_17:
      memcpy(__dst, v10, sizeof(__dst));
      uint64_t v14 = 0;
      *(_WORD *)(a1 + 103260) = 257;
      uint64_t v15 = a1 + 103408;
      uint64_t v16 = a1 + 103312;
      do
      {
        for (uint64_t i = 0; i != 6; ++i)
        {
          *(_DWORD *)(v16 + 4 * i) = 0;
          *(unsigned char *)(v15 + i) = 1;
        }
        ++v14;
        v15 += 6;
        v16 += 24;
      }
      while (v14 != 4);
      uint64_t v18 = 0;
      char v19 = 1;
      break;
    default:
      *(_WORD *)(a1 + 103260) = 0;
      goto LABEL_103;
  }
  do
  {
    uint64_t v20 = 0;
    char v21 = v19;
    uint64_t v22 = a1 + 103432 + (v18 << 7);
    do
    {
      uint64_t v23 = 0;
      uint64_t v24 = v20 + v18;
      do
      {
        v313[v23] = *((_WORD *)&v301 + 16 * v24 + 4 * scan_order4x4[v23 * 2 + 1] + scan_order4x4[v23 * 2]);
        ++v23;
      }
      while (v23 != 16);
      uint64_t v25 = 0;
      int v26 = 8;
      do
      {
        unsigned int v27 = v313[v25];
        unsigned __int16 v28 = v27 - v26;
        if ((int)(v27 - v26) <= 0) {
          __int16 v29 = 256;
        }
        else {
          __int16 v29 = -256;
        }
        unsigned __int16 v30 = v29 + v28;
        if ((unsigned __int16)(char)(v27 - v26) != v28) {
          unsigned __int16 v28 = v30;
        }
        *(_WORD *)(v22 + 2 * v25) = v28;
        int v31 = (v26 + v28);
        if (v31 != v27)
        {
          if (AVE_Log_CheckLevel(3u, 4))
          {
            int v71 = AVE_Log_CheckConsole(3u);
            __uint64_t v72 = AVE_GetCurrTime();
            __uint64_t v73 = AVE_Log_GetLevelStr(4);
            if (v71)
            {
              printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingList[%d] %d\n", v72, 3, v73, "AVE_HEVC_set_default_scaling_lists", 6222, "nextCoef == ScalingList[i]", v31, v25, v27);
              __uint64_t v72 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
              unsigned int v9 = (_DWORD *)(a1 + 102536);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingList[%d] %d", v72, 3);
          }
          goto LABEL_103;
        }
        if (v27 <= 5)
        {
          if (AVE_Log_CheckLevel(3u, 4))
          {
            int v74 = AVE_Log_CheckConsole(3u);
            __uint64_t v75 = AVE_GetCurrTime();
            unsigned int v76 = AVE_Log_GetLevelStr(4);
            if (v74)
            {
              printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)\n", v75, 3, v76, "AVE_HEVC_set_default_scaling_lists", 6223, "(nextCoef >= 6 && nextCoef <= 255)", v27);
              __uint64_t v75 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
              unsigned int v9 = (_DWORD *)(a1 + 102536);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)", v75);
          }
          goto LABEL_103;
        }
        if ((unsigned __int16)(char)v28 != v28)
        {
          if (AVE_Log_CheckLevel(3u, 4))
          {
            int v77 = AVE_Log_CheckConsole(3u);
            __uint64_t v78 = AVE_GetCurrTime();
            __uint64_t v79 = AVE_Log_GetLevelStr(4);
            if (v77)
            {
              printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix scaling_list_delta_coef[%d][%d][%d] = (%d)\n", v78, 3, v79, "AVE_HEVC_set_default_scaling_lists", 6224, "(sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] >= -128 && sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] <= 127)", 0, v24, v25, *(__int16 *)(v22 + 2 * v25));
              __uint64_t v78 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
              unsigned int v9 = (_DWORD *)(a1 + 102536);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix scaling_list_delta_coef[%d][%d][%d] = (%d)", v78, 3);
          }
          goto LABEL_103;
        }
        ++v25;
        int v26 = v27;
      }
      while (v25 != 16);
      ++v20;
      v22 += 128;
    }
    while (v20 != 3);
    char v19 = 0;
    uint64_t v18 = 3;
  }
  while ((v21 & 1) != 0);
  uint64_t v32 = 0;
  char v33 = 1;
  do
  {
    uint64_t v34 = 0;
    char v35 = v33;
    uint64_t v36 = a1 + 104200 + (v32 << 7);
    do
    {
      uint64_t v37 = 0;
      uint64_t v38 = v34 + v32;
      do
      {
        v313[v37] = *(_WORD *)&__dst[128 * v38 + 16 * scan_order8x8[v37 * 2 + 1] + 2 * scan_order8x8[v37 * 2]];
        ++v37;
      }
      while (v37 != 64);
      uint64_t v39 = 0;
      int v40 = 8;
      do
      {
        unsigned int v41 = v313[v39];
        unsigned __int16 v42 = v41 - v40;
        if ((int)(v41 - v40) <= 0) {
          __int16 v43 = 256;
        }
        else {
          __int16 v43 = -256;
        }
        unsigned __int16 v44 = v43 + v42;
        if ((unsigned __int16)(char)(v41 - v40) != v42) {
          unsigned __int16 v42 = v44;
        }
        *(_WORD *)(v36 + 2 * v39) = v42;
        int v45 = (v40 + v42);
        if (v45 != v41)
        {
          unsigned int v9 = (_DWORD *)(a1 + 102536);
          if (!AVE_Log_CheckLevel(3u, 4)) {
            goto LABEL_103;
          }
          int v238 = AVE_Log_CheckConsole(3u);
          __uint64_t v239 = AVE_GetCurrTime();
          __uint64_t v240 = AVE_Log_GetLevelStr(4);
          if (v238)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingList[%d] %d\n", v239, 3, v240, "AVE_HEVC_set_default_scaling_lists", 6261, "nextCoef == ScalingList[i]", v45, v39, v41);
            __uint64_t v239 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
LABEL_367:
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingList[%d] %d", v239, 3);
          goto LABEL_377;
        }
        if (v41 <= 5)
        {
          unsigned int v9 = (_DWORD *)(a1 + 102536);
          if (!AVE_Log_CheckLevel(3u, 4)) {
            goto LABEL_103;
          }
          int v241 = AVE_Log_CheckConsole(3u);
          __uint64_t v242 = AVE_GetCurrTime();
          __uint64_t v243 = AVE_Log_GetLevelStr(4);
          if (v241)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)\n", v242, 3, v243, "AVE_HEVC_set_default_scaling_lists", 6262, "(nextCoef >= 6 && nextCoef <= 255)", v41);
            __uint64_t v244 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)", v244);
            goto LABEL_377;
          }
          goto LABEL_386;
        }
        if ((unsigned __int16)(char)v42 != v42)
        {
          unsigned int v9 = (_DWORD *)(a1 + 102536);
          if (AVE_Log_CheckLevel(3u, 4))
          {
            int v245 = AVE_Log_CheckConsole(3u);
            __uint64_t v246 = AVE_GetCurrTime();
            __uint64_t v247 = AVE_Log_GetLevelStr(4);
            if (!v245) {
              goto LABEL_376;
            }
            printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix scaling_list_delta_coef[%d][%d][%d] = (%d)\n", v246, 3, v247, "AVE_HEVC_set_default_scaling_lists", 6263, "(sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] >= -128 && sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] <= 127)", 1, v38, v39, *(__int16 *)(v36 + 2 * v39));
            __uint64_t v248 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix scaling_list_delta_coef[%d][%d][%d] = (%d)", v248, 3);
LABEL_377:
            unsigned int v9 = (_DWORD *)(a1 + 102536);
          }
          goto LABEL_103;
        }
        ++v39;
        int v40 = v41;
      }
      while (v39 != 64);
      ++v34;
      v36 += 128;
    }
    while (v34 != 3);
    char v33 = 0;
    uint64_t v32 = 3;
  }
  while ((v35 & 1) != 0);
  uint64_t v46 = 0;
  char v47 = 1;
  while (2)
  {
    uint64_t v48 = 0;
    char v49 = v47;
    uint64_t v50 = a1 + 104968 + (v46 << 7);
    while (2)
    {
      uint64_t v51 = v48 + v46;
      int v52 = *(__int16 *)&__dst[128 * v48 + 768 + 128 * v46];
      int v53 = *(unsigned __int16 *)&__dst[128 * v48 + 768 + 128 * v46];
      *(_DWORD *)(a1 + 103264 + 4 * (v48 + v46)) = v53 - 8;
      if (v52 != (unsigned __int16)v52)
      {
        unsigned int v9 = (_DWORD *)(a1 + 102536);
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v258 = AVE_Log_CheckConsole(3u);
          __uint64_t v259 = AVE_GetCurrTime();
          int v260 = AVE_Log_GetLevelStr(4);
          if (v258)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingListDefault[%d][%d][0] %d\n", v259, 3, v260, "AVE_HEVC_set_default_scaling_lists", 6285, "nextCoef == LocalExplicitScalingList[sizeId-1][matrixId][0]", v52, 1, v51, v53);
            __uint64_t v261 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingListDefault[%d][%d][0] %d", v261, 3);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingListDefault[%d][%d][0] %d", v259, 3);
          }
          goto LABEL_377;
        }
        goto LABEL_103;
      }
      if ((v53 - 6) > 0xF9)
      {
        unsigned int v9 = (_DWORD *)(a1 + 102536);
        if (!AVE_Log_CheckLevel(3u, 4)) {
          goto LABEL_103;
        }
        int v262 = AVE_Log_CheckConsole(3u);
        __uint64_t v242 = AVE_GetCurrTime();
        __uint64_t v263 = AVE_Log_GetLevelStr(4);
        if (v262)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)\n", v242, 3, v263, "AVE_HEVC_set_default_scaling_lists", 6286, "(nextCoef >= 6 && nextCoef <= 255)", v53);
          __uint64_t v242 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
LABEL_386:
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)", v242);
        goto LABEL_377;
      }
      for (uint64_t j = 0; j != 64; ++j)
        v313[j] = *(_WORD *)&__dst[128 * v51 + 768 + 16 * scan_order8x8[j * 2 + 1] + 2 * scan_order8x8[j * 2]];
      for (uint64_t k = 0; k != 64; ++k)
      {
        unsigned int v56 = v313[k];
        unsigned __int16 v57 = v56 - v53;
        if ((int)(v56 - (__int16)v53) <= 0) {
          __int16 v58 = 256;
        }
        else {
          __int16 v58 = -256;
        }
        if ((unsigned __int16)(char)(v56 - v53) != v57) {
          unsigned __int16 v57 = v58 + v56 - v53;
        }
        *(_WORD *)(v50 + 2 * k) = v57;
        int v59 = (v57 + v53);
        if (v59 != v56)
        {
          unsigned int v9 = (_DWORD *)(a1 + 102536);
          if (!AVE_Log_CheckLevel(3u, 4)) {
            goto LABEL_103;
          }
          int v249 = AVE_Log_CheckConsole(3u);
          __uint64_t v239 = AVE_GetCurrTime();
          int v250 = AVE_Log_GetLevelStr(4);
          if (v249)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingList[%d] %d\n", v239, 3, v250, "AVE_HEVC_set_default_scaling_lists", 6309, "nextCoef == ScalingList[i]", v59, k, v56);
LABEL_381:
            __uint64_t v239 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          goto LABEL_367;
        }
        if (v56 <= 5)
        {
          unsigned int v9 = (_DWORD *)(a1 + 102536);
          if (!AVE_Log_CheckLevel(3u, 4)) {
            goto LABEL_103;
          }
          int v251 = AVE_Log_CheckConsole(3u);
          __uint64_t v242 = AVE_GetCurrTime();
          __uint64_t v252 = AVE_Log_GetLevelStr(4);
          if (v251)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)\n", v242, 3, v252, "AVE_HEVC_set_default_scaling_lists", 6310, "(nextCoef >= 6 && nextCoef <= 255)", v56);
LABEL_385:
            __uint64_t v242 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          goto LABEL_386;
        }
        if ((unsigned __int16)(char)v57 != v57)
        {
          unsigned int v9 = (_DWORD *)(a1 + 102536);
          if (!AVE_Log_CheckLevel(3u, 4)) {
            goto LABEL_103;
          }
          int v253 = AVE_Log_CheckConsole(3u);
          __uint64_t v254 = AVE_GetCurrTime();
          __uint64_t v255 = AVE_Log_GetLevelStr(4);
          if (v253)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix scaling_list_delta_coef[%d][%d][%d] = (%d)\n", v254, 3, v255, "AVE_HEVC_set_default_scaling_lists", 6311, "(sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] >= -128 && sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] <= 127)", 2, v51, k, *(__int16 *)(v50 + 2 * k));
            __uint64_t v256 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix scaling_list_delta_coef[%d][%d][%d] = (%d)", v256, 3);
            goto LABEL_377;
          }
          uint64_t v293 = k;
          uint64_t v294 = *(__int16 *)(v50 + 2 * k);
          uint64_t v290 = 2;
          uint64_t v292 = v51;
          uint64_t v286 = 6311;
          unsigned __int8 v288 = "(sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] >= -128 && sps->scaling_list_data."
                 "scaling_list_delta_coef[sizeId][matrixId][i] <= 127)";
          unsigned int v284 = v255;
          int v257 = "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix scaling_list_delta_coef[%d][%d][%d] = (%d)";
          goto LABEL_393;
        }
        LOWORD(v53) = v56;
      }
      ++v48;
      v50 += 128;
      if (v48 != 3) {
        continue;
      }
      break;
    }
    char v47 = 0;
    uint64_t v46 = 3;
    if (v49) {
      continue;
    }
    break;
  }
  uint64_t v60 = 0;
  char v61 = 1;
  unsigned int v9 = (_DWORD *)(a1 + 102536);
LABEL_72:
  char v62 = v61;
  uint64_t v63 = *(__int16 *)&__dst[128 * v60 + 1536];
  uint64_t v64 = *(unsigned __int16 *)&__dst[128 * v60 + 1536];
  __src[v60 + 192] = v64 - 8;
  if (v63 == (unsigned __int16)v63)
  {
    if ((v64 - 6) <= 0xF9)
    {
      for (uint64_t m = 0; m != 64; ++m)
        v313[m] = *(_WORD *)&__dst[128 * v60 + 1536 + 16 * scan_order8x8[m * 2 + 1] + 2 * scan_order8x8[m * 2]];
      uint64_t v66 = 0;
      while (1)
      {
        unsigned int v67 = v313[v66];
        unsigned __int16 v68 = v67 - v64;
        if ((int)(v67 - (__int16)v64) <= 0) {
          __int16 v69 = 256;
        }
        else {
          __int16 v69 = -256;
        }
        if ((unsigned __int16)(char)(v67 - v64) != v68) {
          unsigned __int16 v68 = v69 + v67 - v64;
        }
        *(_WORD *)(a1 + 105736 + (v60 << 7) + 2 * v66) = v68;
        int v70 = (v68 + v64);
        if (v70 != v67)
        {
          unsigned int v9 = (_DWORD *)(a1 + 102536);
          if (!AVE_Log_CheckLevel(3u, 4)) {
            goto LABEL_103;
          }
          int v264 = AVE_Log_CheckConsole(3u);
          __uint64_t v239 = AVE_GetCurrTime();
          __uint64_t v265 = AVE_Log_GetLevelStr(4);
          if (v264)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingList[%d] %d\n", v239, 3, v265, "AVE_HEVC_set_default_scaling_lists", 6356, "nextCoef == ScalingList[i]", v70, v66, v67);
            goto LABEL_381;
          }
          goto LABEL_367;
        }
        if (v67 <= 5)
        {
          unsigned int v9 = (_DWORD *)(a1 + 102536);
          if (!AVE_Log_CheckLevel(3u, 4)) {
            goto LABEL_103;
          }
          int v266 = AVE_Log_CheckConsole(3u);
          __uint64_t v242 = AVE_GetCurrTime();
          __uint64_t v267 = AVE_Log_GetLevelStr(4);
          if (v266)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)\n", v242, 3, v267, "AVE_HEVC_set_default_scaling_lists", 6357, "(nextCoef >= 6 && nextCoef <= 255)", v67);
            goto LABEL_385;
          }
          goto LABEL_386;
        }
        if ((unsigned __int16)(char)v68 != v68) {
          break;
        }
        ++v66;
        LOWORD(v64) = v67;
        if (v66 == 64)
        {
          char v61 = 0;
          uint64_t v60 = 3;
          if (v62) {
            goto LABEL_72;
          }
          goto LABEL_103;
        }
      }
      unsigned int v9 = (_DWORD *)(a1 + 102536);
      if (!AVE_Log_CheckLevel(3u, 4)) {
        goto LABEL_103;
      }
      int v268 = AVE_Log_CheckConsole(3u);
      __uint64_t v246 = AVE_GetCurrTime();
      int v269 = AVE_Log_GetLevelStr(4);
      if (v268)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix scaling_list_delta_coef[%d][%d][%d] = (%d)\n", v246, 3, v269, "AVE_HEVC_set_default_scaling_lists", 6358, "(sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] >= -128 && sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] <= 127)", 3, v60, v66, *(__int16 *)(a1 + (v60 << 7) + 105736 + 2 * v66));
        __uint64_t v270 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix scaling_list_delta_coef[%d][%d][%d] = (%d)", v270, 3);
        goto LABEL_377;
      }
LABEL_376:
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix scaling_list_delta_coef[%d][%d][%d] = (%d)", v246, 3);
      goto LABEL_377;
    }
    unsigned int v9 = (_DWORD *)(a1 + 102536);
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v275 = AVE_Log_CheckConsole(3u);
      __uint64_t v254 = AVE_GetCurrTime();
      unsigned int v276 = AVE_Log_GetLevelStr(4);
      if (v275)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)\n", v254, 3, v276, "AVE_HEVC_set_default_scaling_lists", 6333, "(nextCoef >= 6 && nextCoef <= 255)", v64);
        __uint64_t v273 = AVE_GetCurrTime();
        int v289 = "(nextCoef >= 6 && nextCoef <= 255)";
        uint64_t v291 = v64;
        uint64_t v287 = 6333;
        int v285 = AVE_Log_GetLevelStr(4);
        int v274 = "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)";
        goto LABEL_420;
      }
      unsigned __int8 v288 = "(nextCoef >= 6 && nextCoef <= 255)";
      uint64_t v290 = v64;
      uint64_t v286 = 6333;
      unsigned int v284 = v276;
      int v257 = "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)";
      goto LABEL_393;
    }
  }
  else
  {
    unsigned int v9 = (_DWORD *)(a1 + 102536);
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v271 = AVE_Log_CheckConsole(3u);
      __uint64_t v254 = AVE_GetCurrTime();
      int v272 = AVE_Log_GetLevelStr(4);
      if (v271)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingListDefault[%d][%d][0] %d\n", v254, 3, v272, "AVE_HEVC_set_default_scaling_lists", 6332, "nextCoef == LocalExplicitScalingList[sizeId-1][matrixId][0]", v63, 2, v60, v64);
        __uint64_t v273 = AVE_GetCurrTime();
        uint64_t v293 = v60;
        uint64_t v294 = v64;
        uint64_t v291 = v63;
        uint64_t v292 = 2;
        uint64_t v287 = 6332;
        int v289 = "nextCoef == LocalExplicitScalingList[sizeId-1][matrixId][0]";
        int v285 = AVE_Log_GetLevelStr(4);
        int v274 = "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingListDefault[%d][%d][0] %d";
LABEL_420:
        syslog(3, v274, v273, 3, v285, "AVE_HEVC_set_default_scaling_lists", v287, v289, v291, v292, v293, v294);
        goto LABEL_377;
      }
      uint64_t v293 = v60;
      uint64_t v294 = v64;
      uint64_t v290 = v63;
      uint64_t v292 = 2;
      uint64_t v286 = 6332;
      unsigned __int8 v288 = "nextCoef == LocalExplicitScalingList[sizeId-1][matrixId][0]";
      unsigned int v284 = v272;
      int v257 = "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingListDefault[%d][%d][0] %d";
LABEL_393:
      syslog(3, v257, v254, 3, v284, "AVE_HEVC_set_default_scaling_lists", v286, v288, v290, v292, v293, v294);
      goto LABEL_377;
    }
  }
LABEL_103:
  int v80 = (unsigned char *)(a1 + 87668);
  int v81 = *(_DWORD *)(a1 + 1880);
  v9[141] = v81;
  int v82 = *(_DWORD *)(a1 + 1884);
  v9[142] = v82;
  if (*(_DWORD *)(a1 + 103240) == 3) {
    int v83 = 63;
  }
  else {
    int v83 = 31;
  }
  if (*(_DWORD *)(a1 + 103240) == 3) {
    char v84 = 6;
  }
  else {
    char v84 = 5;
  }
  v9[143] = (v81 + v83) >> v84;
  v9[144] = (v82 + v83) >> v84;
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  int v86 = AVE_PixelFmt_FindByType(PixelFormatType);
  if (v86)
  {
    int v87 = v86;
    int v88 = *((_DWORD *)v86 + 7);
    BOOL v89 = 1;
    if (v88 != 1) {
      BOOL v89 = *v8;
    }
    *__uint64_t v8 = v89;
    *(_DWORD *)(a1 + 109760) = v88 == 1;
    *(unsigned char *)(a1 + 109753) = 1;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v90 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v91 = AVE_GetCurrTime();
      int v92 = AVE_Log_GetLevelStr(6);
      if (v90)
      {
        printf("%lld %d AVE %s: FIG: video_full_range_flag %d\n", v91, 30, v92, *((_DWORD *)v87 + 7) == 1);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: video_full_range_flag %d");
    }
  }
  else if (AVE_Log_CheckLevel(0x1Eu, 6))
  {
    int v93 = AVE_Log_CheckConsole(0x1Eu);
    __uint64_t v94 = AVE_GetCurrTime();
    __uint64_t v95 = AVE_Log_GetLevelStr(6);
    if (v93)
    {
      printf("%lld %d AVE %s: FIG: Unknown dynamic range\n", v94, 30, v95);
      AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: FIG: Unknown dynamic range");
  }
  uint64_t v96 = *(void *)(a1 + 20168);
  if ((v96 & 0x10) != 0)
  {
    int v97 = *(_DWORD *)(a1 + 228);
    if (v97 < 1) {
      int v97 = 30;
    }
    *int v80 = 1;
    unsigned int v98 = 0x19BFCC0u / v97;
    *(_DWORD *)(a1 + 87672) = v98;
    *(_DWORD *)(a1 + 87676) = 27000000;
    *(unsigned char *)(a1 + 109812) = 1;
    *(_DWORD *)(a1 + 109816) = v98;
    *(_DWORD *)(a1 + 109820) = 27000000;
  }
  if ((v96 & 0x20) != 0)
  {
    *int v80 = 0;
    *(unsigned char *)(a1 + 109812) = 0;
  }
  else if (*v80)
  {
    BOOL v99 = 1;
    goto LABEL_129;
  }
  BOOL v99 = *v8;
LABEL_129:
  *(unsigned char *)(a1 + 109736) = *(unsigned char *)(a1 + 109877) | *(unsigned char *)(a1 + 109780) | *(unsigned char *)(a1 + 109737) | v99;
  CFTypeRef v100 = CVBufferCopyAttachment(pixelBuffer, (CFStringRef)*MEMORY[0x1E4F24A10], 0);
  int v101 = (CFTypeRef *)MEMORY[0x1E4F24A38];
  if (v100)
  {
    int64_t v102 = v100;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v103 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v104 = AVE_GetCurrTime();
      int v105 = AVE_Log_GetLevelStr(6);
      if (v103)
      {
        printf("%lld %d AVE %s: FIG: kCVImageBufferChromaLocationTopFieldKey found!\n", v104, 30, v105);
        __uint64_t v106 = AVE_GetCurrTime();
        __uint64_t v278 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: kCVImageBufferChromaLocationTopFieldKey found!", v106, 30, v278);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: kCVImageBufferChromaLocationTopFieldKey found!", v104, 30, v105);
      }
    }
    if (CFEqual(v102, *v101))
    {
LABEL_135:
      int v107 = 0;
    }
    else if (CFEqual(v102, (CFTypeRef)*MEMORY[0x1E4F24A28]))
    {
      int v107 = 1;
    }
    else if (CFEqual(v102, (CFTypeRef)*MEMORY[0x1E4F24A48]))
    {
      int v107 = 2;
    }
    else if (CFEqual(v102, (CFTypeRef)*MEMORY[0x1E4F24A40]))
    {
      int v107 = 3;
    }
    else if (CFEqual(v102, (CFTypeRef)*MEMORY[0x1E4F24A20]))
    {
      int v107 = 4;
    }
    else
    {
      if (!CFEqual(v102, (CFTypeRef)*MEMORY[0x1E4F24A18]))
      {
        if (AVE_Log_CheckLevel(0x1Eu, 5))
        {
          int v230 = AVE_Log_CheckConsole(0x1Eu);
          __uint64_t v231 = AVE_GetCurrTime();
          int v232 = AVE_Log_GetLevelStr(5);
          if (v230)
          {
            printf("%lld %d AVE %s: AVE FIG WARNING: kCVImageBufferChromaLocationTopFieldKey with invalid value -> use default\n", v231, 30, v232);
            __uint64_t v233 = AVE_GetCurrTime();
            __uint64_t v282 = AVE_Log_GetLevelStr(5);
            syslog(3, "%lld %d AVE %s: AVE FIG WARNING: kCVImageBufferChromaLocationTopFieldKey with invalid value -> use default", v233, 30, v282);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: AVE FIG WARNING: kCVImageBufferChromaLocationTopFieldKey with invalid value -> use default", v231, 30, v232);
          }
        }
        goto LABEL_135;
      }
      int v107 = 5;
    }
    *(_DWORD *)(a1 + 109784) = v107;
    *(_DWORD *)(a1 + 109788) = v107;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v108 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v109 = AVE_GetCurrTime();
      int v110 = AVE_Log_GetLevelStr(6);
      int v111 = *(_DWORD *)(a1 + 109788);
      if (v108)
      {
        printf("%lld %d AVE %s: FIG: chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d\n", v109, 30, v110, *(_DWORD *)(a1 + 109784), v111);
        __uint64_t v112 = AVE_GetCurrTime();
        __uint64_t v113 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d", v112, 30, v113, *(_DWORD *)(a1 + 109784), *(_DWORD *)(a1 + 109788));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d", v109, 30, v110, *(_DWORD *)(a1 + 109784), v111);
      }
    }
    CFRelease(v102);
  }
  CFTypeRef v114 = CVBufferCopyAttachment(pixelBuffer, (CFStringRef)*MEMORY[0x1E4F24A08], 0);
  if (v114)
  {
    int v115 = v114;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v116 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v117 = AVE_GetCurrTime();
      char v118 = AVE_Log_GetLevelStr(6);
      if (v116)
      {
        printf("%lld %d AVE %s: FIG: kCVImageBufferChromaLocationBottomFieldKey found!\n", v117, 30, v118);
        __uint64_t v119 = AVE_GetCurrTime();
        int v279 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: kCVImageBufferChromaLocationBottomFieldKey found!", v119, 30, v279);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: kCVImageBufferChromaLocationBottomFieldKey found!", v117, 30, v118);
      }
    }
    if (CFEqual(v115, *v101))
    {
LABEL_157:
      int v120 = 0;
    }
    else if (CFEqual(v115, (CFTypeRef)*MEMORY[0x1E4F24A28]))
    {
      int v120 = 1;
    }
    else if (CFEqual(v115, (CFTypeRef)*MEMORY[0x1E4F24A48]))
    {
      int v120 = 2;
    }
    else if (CFEqual(v115, (CFTypeRef)*MEMORY[0x1E4F24A40]))
    {
      int v120 = 3;
    }
    else if (CFEqual(v115, (CFTypeRef)*MEMORY[0x1E4F24A20]))
    {
      int v120 = 4;
    }
    else
    {
      if (!CFEqual(v115, (CFTypeRef)*MEMORY[0x1E4F24A18]))
      {
        if (AVE_Log_CheckLevel(0x1Eu, 5))
        {
          int v234 = AVE_Log_CheckConsole(0x1Eu);
          __uint64_t v235 = AVE_GetCurrTime();
          __int16 v236 = AVE_Log_GetLevelStr(5);
          if (v234)
          {
            printf("%lld %d AVE %s: AVE FIG WARNING: kCVImageBufferChromaLocationTopFieldKey with invalid value -> use default\n", v235, 30, v236);
            __uint64_t v237 = AVE_GetCurrTime();
            __uint64_t v283 = AVE_Log_GetLevelStr(5);
            syslog(3, "%lld %d AVE %s: AVE FIG WARNING: kCVImageBufferChromaLocationTopFieldKey with invalid value -> use default", v237, 30, v283);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: AVE FIG WARNING: kCVImageBufferChromaLocationTopFieldKey with invalid value -> use default", v235, 30, v236);
          }
        }
        goto LABEL_157;
      }
      int v120 = 5;
    }
    *(_DWORD *)(a1 + 109788) = v120;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v121 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v122 = AVE_GetCurrTime();
      __uint64_t v123 = AVE_Log_GetLevelStr(6);
      int v124 = *(_DWORD *)(a1 + 109788);
      if (v121)
      {
        printf("%lld %d AVE %s: FIG: chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d\n", v122, 30, v123, *(_DWORD *)(a1 + 109784), v124);
        __uint64_t v125 = AVE_GetCurrTime();
        int v126 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d", v125, 30, v126, *(_DWORD *)(a1 + 109784), *(_DWORD *)(a1 + 109788));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d", v122, 30, v123, *(_DWORD *)(a1 + 109784), v124);
      }
    }
    CFRelease(v115);
  }
  if (*(_DWORD *)(a1 + 109784) || *(_DWORD *)(a1 + 109788))
  {
    *__uint64_t v8 = 1;
    *(unsigned char *)(a1 + 109780) = 1;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v127 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v128 = AVE_GetCurrTime();
      int v129 = AVE_Log_GetLevelStr(6);
      if (v127)
      {
        printf("%lld %d AVE %s: FIG: chroma_loc_info_present_flag TRUE\n", v128, 30, v129);
        __uint64_t v130 = AVE_GetCurrTime();
        __uint64_t v280 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: chroma_loc_info_present_flag TRUE", v130, 30, v280);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: chroma_loc_info_present_flag TRUE", v128, 30, v129);
      }
    }
  }
  if (AVE_Log_CheckLevel(0x1Eu, 6))
  {
    int v131 = AVE_Log_CheckConsole(0x1Eu);
    __uint64_t v132 = AVE_GetCurrTime();
    int v133 = AVE_Log_GetLevelStr(6);
    int v134 = *(unsigned __int8 *)(a1 + 109780);
    int v135 = *(_DWORD *)(a1 + 109788);
    if (v131)
    {
      printf("%lld %d AVE %s: FIG: chroma_loc_info_present_flag %d , chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d\n", v132, 30, v133, v134, *(_DWORD *)(a1 + 109784), v135);
      __uint64_t v136 = AVE_GetCurrTime();
      __uint64_t v137 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: FIG: chroma_loc_info_present_flag %d , chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d", v136, 30, v137, *(unsigned __int8 *)(a1 + 109780), *(_DWORD *)(a1 + 109784), *(_DWORD *)(a1 + 109788));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: chroma_loc_info_present_flag %d , chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d", v132, 30, v133, v134, *(_DWORD *)(a1 + 109784), v135);
    }
  }
  if ((*(unsigned char *)(a1 + 20168) & 2) != 0) {
    *__uint64_t v8 = 0;
  }
  int v138 = *(_DWORD *)(a1 + 183420);
  if (!v138) {
    int v138 = *(_DWORD *)(a1 + 20400);
  }
  if (v138 > 1009)
  {
    if (v138 <= 1307)
    {
      if (v138 == 1010)
      {
LABEL_201:
        *(unsigned char *)(a1 + 20408) = 1;
        *(unsigned char *)(a1 + 102560) = 1;
        *(unsigned char *)(a1 + 20448) = 1;
        *(unsigned char *)(a1 + 102600) = 1;
        *(_DWORD *)(a1 + 20400) = 4;
        *(_DWORD *)(a1 + 102552) = 4;
        int v139 = *(_DWORD *)(a1 + 103092);
        if (v139)
        {
          if (AVE_Log_CheckLevel(3u, 4))
          {
            int v142 = AVE_Log_CheckConsole(3u);
            __uint64_t v143 = AVE_GetCurrTime();
            unint64_t v144 = AVE_Log_GetLevelStr(4);
            if (v142)
            {
              printf("%lld %d AVE %s: %s:%d %s | FIG: chroma_format_idc (%d) and profile_idc (%d) combination not supported\n", v143, 3, v144, "AVE_PrepareVideoAndSequenceHeader", 6939, "false", v299[139], *(_DWORD *)(v298 + 1592));
              goto LABEL_249;
            }
            goto LABEL_343;
          }
          goto LABEL_344;
        }
        *(unsigned char *)(a1 + 20440) = 1;
        BOOL v151 = v138 == 1008;
        BOOL v152 = v138 == 1010 || v138 == 1008;
        *(unsigned char *)(a1 + 20441) = v152;
        *(unsigned char *)(a1 + 20442) = v151;
        *(_DWORD *)(a1 + 20443) = 65793;
        *(unsigned char *)(a1 + 20447) = 0;
        *(unsigned char *)(a1 + 102592) = 1;
        *(unsigned char *)(a1 + 102593) = v152;
        *(unsigned char *)(a1 + 102594) = v151;
        *(_DWORD *)(a1 + 102595) = 65793;
        *(unsigned char *)(a1 + 102599) = 0;
        goto LABEL_256;
      }
      if (v138 != 1210) {
        goto LABEL_222;
      }
      *(unsigned char *)(a1 + 20408) = 1;
      *(unsigned char *)(a1 + 102560) = 1;
      *(unsigned char *)(a1 + 20448) = 1;
      *(unsigned char *)(a1 + 102600) = 1;
      *(_DWORD *)(a1 + 20400) = 4;
      *(_DWORD *)(a1 + 102552) = 4;
      int v139 = *(_DWORD *)(a1 + 103092);
      if ((v139 - 1) < 2)
      {
        *(_WORD *)(a1 + 20440) = 257;
        int v140 = *(unsigned __int8 *)(a1 + 18849);
        if (*(unsigned char *)(a1 + 18849)) {
          BOOL v141 = 0;
        }
        else {
          BOOL v141 = *v296 == 8;
        }
        BOOL v165 = 0;
        *(unsigned char *)(a1 + 20442) = v141;
        *(unsigned char *)(a1 + 20443) = 1;
        *(_DWORD *)(a1 + 20444) = 0;
        *(_WORD *)(a1 + 102592) = 257;
        if (!v140) {
          BOOL v165 = *v296 == 8;
        }
        *(unsigned char *)(a1 + 102594) = v165;
        *(unsigned char *)(a1 + 102595) = 1;
        *(_DWORD *)(a1 + 102596) = 0;
        goto LABEL_256;
      }
      if (!v139)
      {
LABEL_244:
        *(void *)(a1 + 20440) = 0x10101000001;
        *(void *)(a1 + 102592) = 0x10101000001;
        goto LABEL_256;
      }
      if (!AVE_Log_CheckLevel(3u, 4)) {
        goto LABEL_344;
      }
      int v162 = AVE_Log_CheckConsole(3u);
      __uint64_t v143 = AVE_GetCurrTime();
      __uint64_t v163 = AVE_Log_GetLevelStr(4);
      if (!v162) {
        goto LABEL_343;
      }
      printf("%lld %d AVE %s: %s:%d %s | FIG: chroma_format_idc (%d) and profile_idc (%d) combination not supported\n", v143, 3, v163, "AVE_PrepareVideoAndSequenceHeader", 6898, "false", v299[139], *(_DWORD *)(v298 + 1592));
LABEL_249:
      __uint64_t v164 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: chroma_format_idc (%d) and profile_idc (%d) combination not supported", v164);
      goto LABEL_344;
    }
    if (v138 == 1308)
    {
      if (!*(_DWORD *)(a1 + 103136) && !*(_DWORD *)(a1 + 103140))
      {
        *(unsigned char *)(a1 + 20408) = 1;
        *(unsigned char *)(a1 + 102560) = 1;
        *(unsigned char *)(a1 + 20448) = 1;
        *(unsigned char *)(a1 + 102600) = 1;
        *(_DWORD *)(a1 + 20400) = 4;
        *(_DWORD *)(a1 + 102552) = 4;
        int v139 = *(_DWORD *)(a1 + 103092);
        if ((v139 - 1) < 3)
        {
          *(_WORD *)(a1 + 20440) = 257;
          *(unsigned char *)(a1 + 20442) = 1;
          *(_DWORD *)(a1 + 20443) = 0;
          *(unsigned char *)(a1 + 20447) = 0;
          *(_WORD *)(a1 + 102592) = 257;
          *(unsigned char *)(a1 + 102594) = 1;
          *(_DWORD *)(a1 + 102595) = 0;
          *(unsigned char *)(a1 + 102599) = 0;
          goto LABEL_256;
        }
        if (!v139)
        {
          *(_WORD *)(a1 + 20444) = 257;
          *(_DWORD *)(a1 + 20440) = 16843009;
          *(_WORD *)(a1 + 20446) = 0;
          *(_DWORD *)(a1 + 102592) = 16843009;
          *(_WORD *)(a1 + 102596) = 257;
          *(_WORD *)(a1 + 102598) = 0;
          goto LABEL_256;
        }
        if (!AVE_Log_CheckLevel(3u, 4)) {
          goto LABEL_344;
        }
        int v228 = AVE_Log_CheckConsole(3u);
        __uint64_t v143 = AVE_GetCurrTime();
        int v229 = AVE_Log_GetLevelStr(4);
        if (!v228) {
          goto LABEL_343;
        }
        printf("%lld %d AVE %s: %s:%d %s | FIG: chroma_format_idc (%d) and profile_idc (%d) combination not supported\n", v143, 3, v229, "AVE_PrepareVideoAndSequenceHeader", 6766, "false", v299[139], *(_DWORD *)(v298 + 1592));
        goto LABEL_249;
      }
      if (!AVE_Log_CheckLevel(3u, 4)) {
        goto LABEL_344;
      }
      int v145 = AVE_Log_CheckConsole(3u);
      __uint64_t v146 = AVE_GetCurrTime();
      uint64_t v147 = AVE_Log_GetLevelStr(4);
      if (v145)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: profile_idc (%d) bit_depth_luma_minus8 (%d) and bit_depth_chroma_minus8 (%d)\n", v146, 3, v147, "AVE_PrepareVideoAndSequenceHeader", 6707, "((encoderPrivateStorage->saSPS[0].bit_depth_luma_minus8 == 0) && (encoderPrivateStorage->saSPS[0].bit_depth_chroma_minus8 == 0))", *(_DWORD *)(v298 + 1592), v299[150], v299[151]);
LABEL_233:
        __uint64_t v155 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: profile_idc (%d) bit_depth_luma_minus8 (%d) and bit_depth_chroma_minus8 (%d)", v155, 3);
        goto LABEL_344;
      }
    }
    else
    {
      if (v138 != 1310) {
        goto LABEL_222;
      }
      if (*(_DWORD *)(a1 + 103136) == 2 && *(_DWORD *)(a1 + 103140) == 2)
      {
        *(unsigned char *)(a1 + 20408) = 1;
        *(unsigned char *)(a1 + 102560) = 1;
        *(unsigned char *)(a1 + 20448) = 1;
        *(unsigned char *)(a1 + 102600) = 1;
        *(_DWORD *)(a1 + 20400) = 4;
        *(_DWORD *)(a1 + 102552) = 4;
        int v139 = *(_DWORD *)(a1 + 103092);
        if (!v139) {
          goto LABEL_244;
        }
        if (v139 == 3 || v139 == 1)
        {
          *(_WORD *)(a1 + 20440) = 257;
          *(_DWORD *)(a1 + 20442) = 0;
          *(_WORD *)(a1 + 20446) = 0;
          *(_WORD *)(a1 + 102592) = 257;
          *(_DWORD *)(a1 + 102594) = 0;
          *(_WORD *)(a1 + 102598) = 0;
          goto LABEL_256;
        }
        if (!AVE_Log_CheckLevel(3u, 4)) {
          goto LABEL_344;
        }
        int v222 = AVE_Log_CheckConsole(3u);
        __uint64_t v143 = AVE_GetCurrTime();
        int v223 = AVE_Log_GetLevelStr(4);
        if (!v222) {
          goto LABEL_343;
        }
        printf("%lld %d AVE %s: %s:%d %s | FIG: chroma_format_idc (%d) and profile_idc (%d) combination not supported\n", v143, 3, v223, "AVE_PrepareVideoAndSequenceHeader", 6833, "false", v299[139], *(_DWORD *)(v298 + 1592));
        goto LABEL_249;
      }
      if (!AVE_Log_CheckLevel(3u, 4)) {
        goto LABEL_344;
      }
      int v153 = AVE_Log_CheckConsole(3u);
      __uint64_t v146 = AVE_GetCurrTime();
      int v154 = AVE_Log_GetLevelStr(4);
      if (v153)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: profile_idc (%d) bit_depth_luma_minus8 (%d) and bit_depth_chroma_minus8 (%d)\n", v146, 3, v154, "AVE_PrepareVideoAndSequenceHeader", 6775, "((encoderPrivateStorage->saSPS[0].bit_depth_luma_minus8 == 2) && (encoderPrivateStorage->saSPS[0].bit_depth_chroma_minus8 == 2))", *(_DWORD *)(v298 + 1592), v299[150], v299[151]);
        goto LABEL_233;
      }
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: profile_idc (%d) bit_depth_luma_minus8 (%d) and bit_depth_chroma_minus8 (%d)", v146, 3);
    goto LABEL_344;
  }
  if (v138 <= 2)
  {
    if (v138 != 1)
    {
      if (v138 == 2)
      {
        int v139 = *(_DWORD *)(a1 + 103092);
        if (v139 == 1)
        {
          *(unsigned char *)(a1 + 20406) = 1;
          *(unsigned char *)(a1 + 102558) = 1;
          goto LABEL_256;
        }
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v160 = AVE_Log_CheckConsole(3u);
          __uint64_t v143 = AVE_GetCurrTime();
          __uint64_t v161 = AVE_Log_GetLevelStr(4);
          if (v160)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: chroma_format_idc (%d) and profile_idc (%d) combination not supported\n", v143, 3, v161, "AVE_PrepareVideoAndSequenceHeader", 6677, "false", v299[139], *(_DWORD *)(v298 + 1592));
            goto LABEL_249;
          }
LABEL_343:
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: chroma_format_idc (%d) and profile_idc (%d) combination not supported", v143);
        }
        goto LABEL_344;
      }
LABEL_222:
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v148 = AVE_Log_CheckConsole(3u);
        __uint64_t v149 = AVE_GetCurrTime();
        int v150 = AVE_Log_GetLevelStr(4);
        if (v148)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: general_profile_idc (%d) nit supported\n", v149, 3, v150, "AVE_PrepareVideoAndSequenceHeader", 6946, "false", *(_DWORD *)(v298 + 1592));
          __uint64_t v149 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: general_profile_idc (%d) nit supported", v149);
      }
      goto LABEL_344;
    }
    if (*(_DWORD *)(a1 + 103092) != 1)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v156 = AVE_Log_CheckConsole(3u);
        __uint64_t v143 = AVE_GetCurrTime();
        int v157 = AVE_Log_GetLevelStr(4);
        if (v156)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: chroma_format_idc (%d) and profile_idc (%d) combination not supported\n", v143, 3, v157, "AVE_PrepareVideoAndSequenceHeader", 6663, "false", v299[139], *(_DWORD *)(v298 + 1592));
          goto LABEL_249;
        }
        goto LABEL_343;
      }
      goto LABEL_344;
    }
    *(_WORD *)(a1 + 20405) = 257;
    *(_WORD *)(a1 + 102557) = 257;
    int v139 = 1;
LABEL_256:
    __uint64_t v166 = (unsigned char *)(a1 + 93859);
    int v167 = (unsigned char *)(a1 + 92812);
    if (*(unsigned char *)(a1 + 18932))
    {
      int v168 = *(_DWORD *)(a1 + 192);
      if (v168)
      {
        unsigned int v169 = -1;
        int v170 = 33;
        do
        {
          int v171 = v168 & (v169 >> 1);
          v169 >>= 1;
          --v170;
        }
        while (v171);
        if (v170 < 8)
        {
          int v172 = 0;
          LOBYTE(v173) = 6;
          goto LABEL_267;
        }
        unsigned int v174 = -1;
        int v173 = 32;
        do
        {
          --v173;
          BOOL v175 = (v168 & (v174 >> 1)) == 0;
          v174 >>= 1;
        }
        while (!v175);
      }
      else
      {
        int v173 = 32;
      }
      int v172 = v173 - 6;
LABEL_267:
      *(_DWORD *)(a1 + 109840) = v172;
      if (v168)
      {
        unsigned int v176 = -1;
        int v177 = 33;
        do
        {
          int v178 = v168 & (v176 >> 1);
          v176 >>= 1;
          --v177;
        }
        while (v178);
        if (v177 < 6)
        {
          int v179 = 0;
          LOBYTE(v180) = 4;
          goto LABEL_277;
        }
        unsigned int v181 = -1;
        int v180 = 32;
        do
        {
          --v180;
          BOOL v175 = (v168 & (v181 >> 1)) == 0;
          v181 >>= 1;
        }
        while (!v175);
      }
      else
      {
        int v180 = 32;
      }
      int v179 = v180 - 4;
LABEL_277:
      *(_DWORD *)(a1 + 109844) = v179;
      *(_DWORD *)(a1 + 109868) = v168 / (1 << v173) - 1;
      *(_DWORD *)(a1 + 109872) = v168 / (1 << v180) - 1;
    }
    unsigned int v182 = *(_DWORD *)(a1 + 18436);
    if (v182 < 2)
    {
      int v196 = *(_DWORD *)(a1 + 18900);
      if (v196 && !*(_DWORD *)(a1 + 18904))
      {
        *(_DWORD *)(a1 + 20380) = 1;
        *int v167 = 1;
        *(unsigned char *)(a1 + 92815) = 0;
        *(_WORD *)(a1 + 92816) |= 8u;
        *(unsigned char *)(a1 + 92818) = 0;
        *(unsigned char *)(a1 + 92850) = 1;
        *(unsigned char *)(a1 + 93858) = 1;
        *__uint64_t v166 = 0;
        *(unsigned char *)(a1 + 93860) = v196;
        *(unsigned char *)(a1 + 93923) = 0;
        *(unsigned char *)(a1 + 98022) = 1;
        *(unsigned char *)(a1 + 98024) = 1;
        *(void *)(a1 + 102119) = 0x100000001000000;
        *(unsigned char *)(a1 + 102127) = 1;
        *(_DWORD *)(a1 + 102192) = 0;
        *(_WORD *)(a1 + 102196) = 0;
        *(_WORD *)(a1 + 102198) = *(_DWORD *)(a1 + 1880);
        *(_WORD *)(a1 + 102200) = *(_DWORD *)(a1 + 1884);
        *(unsigned char *)(a1 + 102202) = 1;
        if (*(_DWORD *)(a1 + 18920) != -1) {
          int v139 = *(_DWORD *)(a1 + 18920);
        }
        *(_DWORD *)(a1 + 102204) = v139;
        *(unsigned char *)(a1 + 102212) = 0;
        int v197 = *(_DWORD *)(a1 + 18912);
        if (v197 == -1)
        {
          int v198 = *(_DWORD *)(a1 + 103136);
          int v199 = *(_DWORD *)(a1 + 103140);
        }
        else
        {
          int v198 = v197 - 8;
          int v199 = v198;
        }
        *(_DWORD *)(a1 + 102216) = v198;
        *(_DWORD *)(a1 + 102224) = v199;
      }
      goto LABEL_344;
    }
    int v183 = *(_DWORD *)(a1 + 18904);
    unsigned int v184 = v182 - 1;
    if (v183) {
      int v185 = 3;
    }
    else {
      int v185 = v182 - 1;
    }
    *(_DWORD *)(a1 + 20380) = v185;
    *(_DWORD *)(a1 + 20384) = 0;
    *(unsigned char *)(a1 + 20388) = 1;
    memcpy((void *)(a1 + 20936), (const void *)(a1 + 20392), 0x220uLL);
    memcpy((void *)(a1 + 21480), (const void *)(a1 + 20392), 0x220uLL);
    *(_DWORD *)(a1 + 21488) = 6;
    *(_WORD *)(a1 + 21493) = 0;
    *(unsigned char *)(a1 + 21498) = 1;
    if (v183)
    {
      uint64_t v186 = *v166;
      uint64_t v187 = *(unsigned __int8 *)(a1 + 93860);
      int v188 = *(_DWORD *)(a1 + 18900);
      if (v186 <= v187) {
        unsigned int v189 = *(unsigned __int8 *)(a1 + 93860);
      }
      else {
        unsigned int v189 = *v166;
      }
      uint64_t v190 = a1 + 22196;
      *(unsigned char *)(v190 + v186) = 1;
      *(unsigned char *)(v190 + v187) = 1;
      uint64_t v191 = a1 + 22260;
      *(unsigned char *)(v191 + v188) = 1;
      *(unsigned char *)(v191 + v183) = 1;
      uint64_t v192 = a1 + 22324;
      *(unsigned char *)(a1 + 22324 + v186) = 1;
      if (v188 <= v183) {
        LOBYTE(v193) = v183;
      }
      else {
        LOBYTE(v193) = v188;
      }
      *(unsigned char *)(v192 + v187) = 1;
      if (v189 <= v193) {
        unsigned int v193 = v193;
      }
      else {
        unsigned int v193 = v189;
      }
      *(_DWORD *)(a1 + 22124) = v193;
      *(_DWORD *)(a1 + 22128) = 3;
      *(unsigned char *)(v192 + v188) = 1;
      *(unsigned char *)(v192 + v183) = 1;
      int v194 = v183;
      uint64_t v195 = a1 + 102119;
    }
    else
    {
      uint64_t v200 = 0;
      uint64_t v201 = *(unsigned __int8 *)(a1 + v184 + 93859);
      *(_DWORD *)(a1 + 22124) = v201;
      *(_DWORD *)(a1 + 22128) = v184;
      uint64_t v202 = v201 + 1;
      if ((v185 + 1) > 1) {
        uint64_t v203 = (v185 + 1);
      }
      else {
        uint64_t v203 = 1;
      }
      int v194 = 0;
      uint64_t v195 = a1 + 102119;
      do
      {
        uint64_t v204 = 0;
        do
        {
          if (v204 == *(unsigned __int8 *)(a1 + v200 + 93859)) {
            *(unsigned char *)(a1 + 22196 + v204) = 1;
          }
          ++v204;
        }
        while (v202 != v204);
        ++v200;
      }
      while (v200 != v203);
    }
    *int v167 = 1;
    __int16 v205 = *(_WORD *)(a1 + 92816);
    *(_WORD *)(a1 + 92816) = v205 | 2;
    *(unsigned char *)(a1 + 92818) = 2;
    *(unsigned char *)(a1 + 93858) = 1;
    *(unsigned char *)(a1 + 92850) = 1;
    *(unsigned char *)(a1 + 93990) = 1;
    if (v194)
    {
      int v206 = *(unsigned __int8 *)(a1 + 93860);
      uint64_t v207 = a1 + 18808;
      int v208 = (unsigned char *)(a1 + 117677);
      if (*v166)
      {
        int v209 = *(_DWORD *)(a1 + 18900);
        long long v210 = (unsigned char *)(a1 + 98022);
        goto LABEL_314;
      }
      int v209 = *(_DWORD *)(a1 + 18900);
      long long v210 = (unsigned char *)(a1 + 98022);
      if (v206 == 1)
      {
        *(unsigned char *)(a1 + 93861) = v209;
        *(unsigned char *)(a1 + 93862) = v194;
        *(_WORD *)(a1 + 92866) = 256;
        *(_WORD *)(a1 + 92882) = 257;
        *(unsigned char *)(a1 + 92851) = 0;
        LOBYTE(v209) = 1;
        *(unsigned char *)(a1 + 94120) = 1;
      }
      else
      {
LABEL_314:
        *(unsigned char *)(a1 + 93861) = v206;
        *(unsigned char *)(a1 + 93860) = v209;
        *(unsigned char *)(a1 + 93862) = v194;
        *(_WORD *)(a1 + 92850) = 256;
        *(_WORD *)(a1 + 92866) = 1;
        *(_WORD *)(a1 + 92882) = 257;
        *(unsigned char *)(a1 + 93990) = 0;
        *(unsigned char *)(a1 + 94054) = 1;
        *(unsigned char *)(a1 + 94119) = 1;
      }
      *(_WORD *)(a1 + 92816) = v205 | 0xA;
      *(unsigned char *)(a1 + 92819) = 2;
      *long long v210 = 0;
      *(unsigned char *)(v195 + 4) = 0;
    }
    else
    {
      LOBYTE(v209) = *(unsigned char *)(a1 + 93860);
      uint64_t v207 = a1 + 18808;
      int v208 = (unsigned char *)(a1 + 117677);
    }
    *(_WORD *)(v195 + 2) = 513;
    *(unsigned char *)(a1 + 92814) = 1;
    *(_WORD *)(v195 + 79) = *(_DWORD *)(a1 + 1880);
    *(_WORD *)(v195 + 81) = *(_DWORD *)(a1 + 1884);
    *(unsigned char *)(v195 + 83) = 1;
    *(_DWORD *)(v195 + 85) = *(_DWORD *)(a1 + 103092);
    *(_DWORD *)(v195 + 97) = *(_DWORD *)(a1 + 103136);
    *(_DWORD *)(v195 + 105) = *(_DWORD *)(a1 + 103140);
    *(_WORD *)(v195 + 7) = 257;
    *(_DWORD *)(v195 + 75) = 16777472;
    *int v299 = 0;
    *(unsigned char *)(a1 + 102540) = 1;
    unsigned int v211 = *(_DWORD *)(a1 + 111012);
    memcpy((void *)(a1 + 110444), __src, 0x1EF4uLL);
    *(unsigned char *)(a1 + 110448) = v209;
    *(_WORD *)(a1 + 110449) = 7;
    if (v211 <= 1) {
      int v212 = 1;
    }
    else {
      int v212 = v211;
    }
    *(_DWORD *)(a1 + 111012) = v212;
    *(_WORD *)(a1 + 110452) = 0;
    v208[151] = 1;
    v208[153] = 1;
    *int v208 = 0;
    if (*(unsigned char *)(v207 + 100))
    {
      int v213 = *(_DWORD *)(v207 + 120);
      if (v213 != -1)
      {
        *(unsigned char *)(a1 + 110450) = 1;
        *(unsigned char *)(a1 + 110451) = v213;
      }
    }
    if (v194)
    {
      uint64_t v214 = 0;
      char v215 = 1;
      do
      {
        char v216 = v215;
        __uint64_t v217 = (_DWORD *)(a1 + 4 * v214);
        int v218 = v217[4730];
        if (v218 != -1) {
          v217[25551] = v218;
        }
        int v219 = v217[4728];
        if (v219 != -1)
        {
          int v220 = v219 - 8;
          uint64_t v221 = a1 + 4 * v214;
          *(_DWORD *)(v221 + 102216) = v220;
          *(_DWORD *)(v221 + 102224) = v220;
        }
        char v215 = 0;
        uint64_t v214 = 1;
      }
      while ((v216 & 1) != 0);
      if (*(_DWORD *)(v207 + 116) != -1 && *(_DWORD *)(v207 + 108) != -1) {
        *(unsigned char *)(v195 + 6) = 1;
      }
    }
    goto LABEL_344;
  }
  if (v138 != 3)
  {
    if (v138 != 1008) {
      goto LABEL_222;
    }
    goto LABEL_201;
  }
  *(_DWORD *)(a1 + 22028) = 0;
  *(_DWORD *)(a1 + 103152) = 0;
  int v139 = *(_DWORD *)(a1 + 103092);
  if (v139 == 1)
  {
    *(unsigned char *)(a1 + 102559) = 1;
    *(unsigned char *)(a1 + 20405) = 1;
    *(_WORD *)(a1 + 102557) = 257;
    *(_WORD *)(a1 + 20406) = 257;
    goto LABEL_256;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    int v158 = AVE_Log_CheckConsole(3u);
    __uint64_t v143 = AVE_GetCurrTime();
    __uint64_t v159 = AVE_Log_GetLevelStr(4);
    if (v158)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: chroma_format_idc (%d) and profile_idc (%d) combination not supported\n", v143, 3, v159, "AVE_PrepareVideoAndSequenceHeader", 6699, "false", v299[139], *(_DWORD *)(v298 + 1592));
      goto LABEL_249;
    }
    goto LABEL_343;
  }
LABEL_344:
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v224 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v225 = AVE_GetCurrTime();
    uint64_t v226 = AVE_Log_GetLevelStr(7);
    if (v224)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_PrepareVideoAndSequenceHeader\n", v225, 20, v226);
      __uint64_t v227 = AVE_GetCurrTime();
      int v281 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_PrepareVideoAndSequenceHeader", v227, 20, v281);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_PrepareVideoAndSequenceHeader", v225, 20, v226);
    }
  }
}

void AVE_PreparePictureHeader(_DWORD *a1)
{
  int v2 = a1 + 4609;
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v3 = AVE_Log_CheckConsole(0x14u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v3)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_PreparePictureHeader\n", CurrTime, 20, LevelStr);
      __uint64_t v6 = AVE_GetCurrTime();
      char v21 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PreparePictureHeader", v6, 20, v21);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PreparePictureHeader", CurrTime, 20, LevelStr);
    }
  }
  unsigned int v7 = v2[81];
  if (!v7) {
    goto LABEL_8;
  }
  if (v7 == 1)
  {
    a1[29602] = a1[456] - 26;
LABEL_8:
    unsigned int v8 = *v2;
    if (v8 >= 2)
    {
      unsigned int v9 = 1;
      int v10 = 1;
      do
      {
        int v11 = &a1[2409 * v10];
        int32x2_t v12 = *(int32x2_t *)(v11 + 29595);
        memcpy(v11 + 29592, a1 + 29592, 0x25A4uLL);
        *((unsigned char *)v11 + 118372) = *((unsigned char *)a1 + v10 + 93859);
        *((unsigned char *)v11 + 126884) = 1;
        *((unsigned char *)v11 + 126887) = 1;
        *((unsigned char *)v11 + 126889) = 1;
        *(int8x8_t *)(v11 + 29595) = vbsl_s8((int8x8_t)vceqz_s32(v12), (int8x8_t)vdup_n_s32(v9), (int8x8_t)v12);
        unsigned int v9 = ++v10;
        *(_DWORD *)((char *)v11 + 118373) = 0;
        *((unsigned char *)v11 + 118377) = 0;
      }
      while (v8 > v10);
    }
    goto LABEL_16;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    int v13 = AVE_Log_CheckConsole(3u);
    __uint64_t v14 = AVE_GetCurrTime();
    uint64_t v15 = AVE_Log_GetLevelStr(4);
    if (v13)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: codec type unrecognized\n", v14, 3, v15, "AVE_PreparePictureHeader", 6085, "false");
      __uint64_t v16 = AVE_GetCurrTime();
      uint64_t v22 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: codec type unrecognized", v16, 3, v22, "AVE_PreparePictureHeader", 6085, "false");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: codec type unrecognized", v14, 3, v15, "AVE_PreparePictureHeader", 6085, "false");
    }
  }
LABEL_16:
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v17 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v18 = AVE_GetCurrTime();
    char v19 = AVE_Log_GetLevelStr(7);
    if (v17)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_PreparePictureHeader\n", v18, 20, v19);
      __uint64_t v20 = AVE_GetCurrTime();
      uint64_t v23 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_PreparePictureHeader", v20, 20, v23);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_PreparePictureHeader", v18, 20, v19);
    }
  }
}

uint64_t AVE_ManageSessionSettings(uint64_t a1)
{
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v2 = AVE_Log_CheckConsole(0x14u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v2)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_ManageSessionSettings\n", CurrTime, 20, LevelStr);
      __uint64_t v5 = AVE_GetCurrTime();
      int v249 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_ManageSessionSettings", v5, 20, v249);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_ManageSessionSettings", CurrTime, 20, LevelStr);
    }
  }
  if (*(_DWORD *)(a1 + 196) == 4 && !*(_DWORD *)(a1 + 292)) {
    *(_DWORD *)(a1 + 292) = 10000;
  }
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v6 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v7 = AVE_GetCurrTime();
    unsigned int v8 = AVE_Log_GetLevelStr(7);
    if (v6)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_PrepareRealTimeParameters\n", v7, 20, v8);
      __uint64_t v9 = AVE_GetCurrTime();
      int v250 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PrepareRealTimeParameters", v9, 20, v250);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PrepareRealTimeParameters", v7, 20, v8);
    }
  }
  int v10 = AVE_DW_Get();
  int v11 = v10;
  if (v10[57]) {
    *(_DWORD *)(a1 + 264) = 1;
  }
  if (v10[61]) {
    *(_DWORD *)(a1 + 264) = 0;
  }
  if ((v10[1161] & 4) != 0) {
    *(unsigned char *)(a1 + 216) = 1;
  }
  if ((v10[1169] & 4) != 0) {
    *(unsigned char *)(a1 + 216) = 0;
  }
  if (AVE_Log_CheckLevel(0x16u, 8))
  {
    int v12 = AVE_Log_CheckConsole(0x16u);
    __uint64_t v13 = AVE_GetCurrTime();
    __uint64_t v14 = AVE_Log_GetLevelStr(8);
    if (v12)
    {
      printf("%lld %d AVE %s: %s:%d usageMode %d RealTimeClient %d bRCModeSet %d eRCMode %d\n", v13, 22, v14, "AVE_PrepareRealTimeParameters", 7291, *(_DWORD *)(a1 + 292), *(_DWORD *)(a1 + 264), *(unsigned __int8 *)(a1 + 18772), *(_DWORD *)(a1 + 196));
      __uint64_t v13 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(8);
    }
    syslog(3, "%lld %d AVE %s: %s:%d usageMode %d RealTimeClient %d bRCModeSet %d eRCMode %d", v13, 22);
  }
  uint64_t v15 = (_DWORD *)(a1 + 18808);
  if ((*(unsigned char *)(a1 + 203) & 0x80) == 0 && *(_DWORD *)(a1 + 196) == 8) {
    *(unsigned char *)(a1 + 18772) = 0;
  }
  if (*(_DWORD *)(a1 + 264) == 1)
  {
    if (!*(unsigned char *)(a1 + 216) && (int v16 = *(_DWORD *)(a1 + 196), v16 != 20) && v16 != 3
      || *(unsigned char *)(a1 + 18846)
      || *(unsigned char *)(a1 + 18847))
    {
      if (!*(unsigned char *)(a1 + 18849) && !*(_DWORD *)(a1 + 292))
      {
        if (!*(unsigned char *)(a1 + 18772)) {
          *(_DWORD *)(a1 + 196) = 1;
        }
        *(unsigned char *)(a1 + 18684) = 1;
        *(_DWORD *)(a1 + 1920) = 0;
        *(unsigned char *)(a1 + 18752) = 0;
        *(_WORD *)(a1 + 255) = 257;
        *(unsigned char *)(a1 + 18861) = 0;
        int v53 = *(_DWORD *)(a1 + 228);
        if (v53 < 1)
        {
          *(unsigned char *)(a1 + 253) = 1;
        }
        else
        {
          int v54 = *(_DWORD *)(a1 + 1884);
          unsigned int v55 = v54 + 15;
          unsigned int v56 = (v54 + 15) >> 4;
          int v57 = *(_DWORD *)(a1 + 1880);
          unsigned int v58 = (v57 + 15) >> 4;
          unsigned int v59 = (v58 + 31) & 0x1FFFFFE0;
          if (v56 * v53 * v58 <= 0xAFC80) {
            int v60 = 1;
          }
          else {
            int v60 = 2;
          }
          *(unsigned char *)(a1 + 253) = v56 * v53 * v58 > 0xAFC80;
          *(_DWORD *)(a1 + 260) = v60;
          if (v59 > 0x80 || v59 * v56 >= 0x2D01)
          {
            if (v55 > 0x44F || (v57 + 15) >= 0x790)
            {
              unsigned int v61 = (((v58 + 1) >> 1) + 31) >> 5;
              unsigned int v56 = (v56 + 1) >> 1;
            }
            else
            {
              unsigned int v61 = (v58 + 31) >> 5;
            }
            unsigned int v247 = v61 * v56;
            if (v55 > 0xC0F || v59 > 0x100 || v247 > 0x120)
            {
              *(_DWORD *)(a1 + 260) = 0;
            }
            else
            {
              *(unsigned char *)(a1 + 253) = 1;
              if (v53 > 0x78
                || ((v54 + 31) >> 5) * v53 * ((v57 + 31) >> 5) > 0x77880)
              {
                int v248 = 2;
              }
              else
              {
                int v248 = 1;
              }
              *(_DWORD *)(a1 + 260) = v248;
            }
          }
        }
      }
    }
  }
  int v17 = *((_DWORD *)v11 + 17);
  if (v17 >= 1) {
    *(_DWORD *)(a1 + 20360) = v17;
  }
  int v18 = *((_DWORD *)v11 + 308);
  if ((v18 & 0x40) != 0) {
    *(unsigned char *)(a1 + 255) = 1;
  }
  int v19 = *((_DWORD *)v11 + 309);
  if ((v19 & 0x40) != 0)
  {
    *(unsigned char *)(a1 + 255) = 0;
    if ((v18 & 0x80) == 0)
    {
LABEL_43:
      if ((v19 & 0x80) == 0) {
        goto LABEL_45;
      }
      goto LABEL_44;
    }
  }
  else if ((v18 & 0x80) == 0)
  {
    goto LABEL_43;
  }
  *(unsigned char *)(a1 + 256) = 1;
  if ((v19 & 0x80) != 0) {
LABEL_44:
  }
    *(unsigned char *)(a1 + 256) = 0;
LABEL_45:
  if ((v11[1161] & 0x80) != 0) {
    *(unsigned char *)(a1 + 257) = 1;
  }
  if ((v11[1169] & 0x80) != 0) {
    *(unsigned char *)(a1 + 257) = 0;
  }
  int v20 = *((_DWORD *)v11 + 296);
  if (v20 != -1 && AVE_HEVC_SetQuality(a1, (double)v20) && AVE_Log_CheckLevel(0x16u, 5))
  {
    int v21 = AVE_Log_CheckConsole(0x16u);
    __uint64_t v22 = AVE_GetCurrTime();
    uint64_t v23 = AVE_Log_GetLevelStr(5);
    if (v21)
    {
      printf("%lld %d AVE %s: FIG: Unsupported value coremedia_Quality = %d\n", v22, 22, v23, v20);
      __uint64_t v24 = AVE_GetCurrTime();
      int v251 = AVE_Log_GetLevelStr(5);
      syslog(3, "%lld %d AVE %s: FIG: Unsupported value coremedia_Quality = %d", v24, 22, v251, v20);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: Unsupported value coremedia_Quality = %d", v22, 22, v23, v20);
    }
  }
  if (*(_DWORD *)(a1 + 264) != 1) {
    *(_DWORD *)(a1 + 18748) = 500;
  }
  uint64_t v25 = (unsigned int *)(a1 + 183416);
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v26 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v27 = AVE_GetCurrTime();
    unsigned __int16 v28 = AVE_Log_GetLevelStr(7);
    if (v26)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_SetNewEncoderDefaultBasedOnProfileAndLevel\n", v27, 20, v28);
      __uint64_t v29 = AVE_GetCurrTime();
      __uint64_t v252 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetNewEncoderDefaultBasedOnProfileAndLevel", v29, 20, v252);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetNewEncoderDefaultBasedOnProfileAndLevel", v27, 20, v28);
    }
  }
  unsigned __int16 v30 = AVE_DW_Get();
  int v31 = v30;
  int v32 = v30[274];
  if (v32 <= 1009)
  {
    if ((v32 - 1) >= 3 && v32 != 1008) {
      goto LABEL_75;
    }
LABEL_74:
    *(_DWORD *)(a1 + 183420) = v32;
    goto LABEL_75;
  }
  if (v32 > 1307)
  {
    if (v32 == 1310 || v32 == 1308) {
      goto LABEL_74;
    }
  }
  else if (v32 == 1010 || v32 == 1210)
  {
    goto LABEL_74;
  }
LABEL_75:
  int v33 = v30[275];
  if (v33 <= 149)
  {
    if (((v33 - 60) > 0x3F || ((1 << (v33 - 60)) & 0x9000000240000009) == 0)
      && v33 != 30)
    {
      goto LABEL_83;
    }
LABEL_82:
    *(_DWORD *)(a1 + 183424) = v33;
    goto LABEL_83;
  }
  if ((v33 - 150) <= 0x24 && ((1 << (v33 + 106)) & 0x1240000049) != 0 || v33 == 255) {
    goto LABEL_82;
  }
LABEL_83:
  __uint64_t v256 = (unsigned char *)(a1 + 126884);
  int v257 = (unsigned char *)(a1 + 118412);
  uint64_t v34 = (unsigned char *)(a1 + 109736);
  __uint64_t v259 = (unsigned char *)(a1 + 102540);
  unsigned int v35 = v30[276];
  if (v35 <= 1) {
    *uint64_t v25 = v35;
  }
  int v36 = *(_DWORD *)(a1 + 183420);
  if (v36)
  {
    *(_DWORD *)(a1 + 18800) = v36;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v37 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v38 = AVE_GetCurrTime();
      uint64_t v39 = AVE_Log_GetLevelStr(6);
      int v40 = *(_DWORD *)(a1 + 102552);
      if (v37)
      {
        printf("%lld %d AVE %s: FIG: FIGHevcProfile = %d -> change the default %d\n", v38, 30, v39, *(_DWORD *)(a1 + 183420), v40);
        __uint64_t v41 = AVE_GetCurrTime();
        unsigned __int16 v42 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: FIGHevcProfile = %d -> change the default %d", v41, 30, v42, *(_DWORD *)(a1 + 183420), *(_DWORD *)(a1 + 102552));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: FIGHevcProfile = %d -> change the default %d", v38, 30, v39, *(_DWORD *)(a1 + 183420), v40);
      }
    }
    int v43 = *(_DWORD *)(a1 + 183420);
    if (v43 <= 1009)
    {
      if ((v43 - 1) < 3)
      {
LABEL_101:
        *(_DWORD *)(a1 + 20400) = v43;
        *(_DWORD *)(a1 + 102552) = v43;
        goto LABEL_102;
      }
      if (v43 != 1008) {
        goto LABEL_109;
      }
LABEL_100:
      int v43 = 4;
      goto LABEL_101;
    }
    if (v43 > 1307)
    {
      if (v43 == 1310 || v43 == 1308) {
        goto LABEL_100;
      }
    }
    else if (v43 == 1010 || v43 == 1210)
    {
      goto LABEL_100;
    }
LABEL_109:
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v50 = AVE_Log_CheckConsole(3u);
      __uint64_t v51 = AVE_GetCurrTime();
      int v52 = AVE_Log_GetLevelStr(4);
      if (v50)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_NewDefaultsBasedOnProfileUsageDefault failed. FIGHevcProfile (%d) unrecognized\n", v51, 3, v52, "AVE_SetNewEncoderDefaultBasedOnProfileUsagePropertiesPassed", 10262, "false", *(_DWORD *)(a1 + 183420));
        __uint64_t v51 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_NewDefaultsBasedOnProfileUsageDefault failed. FIGHevcProfile (%d) unrecognized", v51);
    }
    goto LABEL_199;
  }
LABEL_102:
  if (*(_DWORD *)(a1 + 18760) == 1)
  {
    if (*v25 != 2)
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        int v44 = AVE_Log_CheckConsole(0x1Eu);
        __uint64_t v45 = AVE_GetCurrTime();
        uint64_t v46 = AVE_Log_GetLevelStr(6);
        int v47 = *(_DWORD *)(a1 + 102548);
        if (v44)
        {
          printf("%lld %d AVE %s: FIG: FIGHevcTier = %d -> change the default %d\n", v45, 30, v46, *v25, v47);
          __uint64_t v48 = AVE_GetCurrTime();
          char v49 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: FIGHevcTier = %d -> change the default %d", v48, 30, v49, *v25, *(_DWORD *)(a1 + 102548));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: FIGHevcTier = %d -> change the default %d", v45, 30, v46, *v25, v47);
        }
      }
      *(_DWORD *)(a1 + 102548) = *v25;
    }
    if (*(_DWORD *)(a1 + 228)
       * ((*(_DWORD *)(a1 + 1880) + 15) >> 4)
       * ((*(_DWORD *)(a1 + 1884) + 15) >> 4) >= 0x1DA9C0)
    {
      *(_DWORD *)(a1 + 20396) = 1;
      *(_DWORD *)(a1 + 102548) = 1;
    }
  }
  BOOL v62 = *(unsigned char *)(a1 + 18676)
     || *(_DWORD *)(a1 + 1944)
     || (*(_WORD *)(a1 + 17872) & 0xFFFE) == 4
     || *(int *)(a1 + 18680) > 1
     || *(_DWORD *)(a1 + 1756) > 1u
     || (*(unsigned char *)(a1 + 1876) & 0xE0) != 0;
  *(unsigned char *)(a1 + 17882) = v62;
  int v63 = *(_DWORD *)(a1 + 196);
  if (v63 == 4 || v63 == 2)
  {
    int v64 = *(_DWORD *)(a1 + 292);
    if (v64 == 37 || !v64)
    {
      *(_DWORD *)(a1 + 292) = 10000;
      *(unsigned char *)(a1 + 253) = 0;
      *(unsigned char *)(a1 + 18332) = 1;
      *(_DWORD *)(a1 + 1920) = 0;
      *(_DWORD *)(a1 + 260) = 0;
    }
  }
  int v65 = v31[343];
  if (v65 <= 19)
  {
    if (!v65)
    {
      *(_DWORD *)(a1 + 292) = 0;
      goto LABEL_192;
    }
    if (v65 == 1)
    {
      *(_DWORD *)(a1 + 292) = 1;
      goto LABEL_166;
    }
  }
  else
  {
    switch(v65)
    {
      case 20:
        *(_DWORD *)(a1 + 292) = 20;
        goto LABEL_176;
      case 37:
        *(_DWORD *)(a1 + 292) = 37;
        goto LABEL_189;
      case 10000:
        *(_DWORD *)(a1 + 292) = 10000;
LABEL_143:
        AVE_NewDefaultsBasedOnProfileUsageDefault(a1);
        *(void *)(a1 + 200) &= ~0x10uLL;
        *(_DWORD *)(a1 + 1920) = 0;
        *(_DWORD *)(a1 + 260) = 0;
        *(unsigned char *)(a1 + 18332) = 1;
        *(_DWORD *)(a1 + 2024) &= ~1u;
        *(unsigned char *)(a1 + 254) = *(_DWORD *)(a1 + 264) == 1;
        if (*(int *)(a1 + 1852) <= -13) {
          *(_DWORD *)(a1 + 1852) = 51;
        }
        if (*(int *)(a1 + 1844) <= -13) {
          *(_DWORD *)(a1 + 1844) = 51;
        }
        if (*(int *)(a1 + 185180) <= 0 && *(double *)(a1 + 185184) <= 0.0)
        {
          *(void *)(a1 + 2028) = 120;
          *(void *)(a1 + 2040) = 0xBFF0000000000000;
          *(void *)(a1 + 2048) = 0xBFF0000000000000;
        }
        if (!*(unsigned char *)(a1 + 183436))
        {
          if (*(unsigned char *)(a1 + 183438))
          {
            int v66 = *(_DWORD *)(a1 + 1808);
            if (v66 >= 1)
            {
              uint64_t v67 = 0;
              unsigned __int16 v68 = (double *)(a1 + 1784);
              unsigned int v69 = 0x7FFFFFFF;
              do
              {
                if (v69 > (*(v68 - 1) * 8.0 / *v68))
                {
                  if (AVE_Log_CheckLevel(0x1Eu, 6))
                  {
                    int v70 = AVE_Log_CheckConsole(0x1Eu);
                    __uint64_t v71 = AVE_GetCurrTime();
                    __uint64_t v72 = AVE_Log_GetLevelStr(6);
                    double v73 = *(v68 - 1);
                    double v74 = *v68;
                    if (v70)
                    {
                      printf("%lld %d AVE %s: FIG: uint64_t i = %d DataRateLimitsSize %f DataRateLimitsSeconds %f\n", v71, 30, v72, v67, *(v68 - 1), v74);
                      __uint64_t v71 = AVE_GetCurrTime();
                      __uint64_t v72 = AVE_Log_GetLevelStr(6);
                      double v73 = *(v68 - 1);
                      double v74 = *v68;
                    }
                    syslog(3, "%lld %d AVE %s: FIG: uint64_t i = %d DataRateLimitsSize %f DataRateLimitsSeconds %f", v71, 30, v72, v67, v73, v74);
                  }
                  unsigned int v69 = (*(v68 - 1) * 8.0 / 1.5 / *v68);
                  int v66 = *(_DWORD *)(a1 + 1808);
                }
                ++v67;
                v68 += 2;
              }
              while (v67 < v66);
              if (v69 != 0x7FFFFFFF) {
                *(_DWORD *)(a1 + 192) = v69;
              }
            }
          }
        }
        goto LABEL_199;
    }
  }
  int v131 = *(_DWORD *)(a1 + 292);
  if (v131 <= 36)
  {
    if (v131 != 1)
    {
      if (v131 != 20) {
        goto LABEL_192;
      }
LABEL_176:
      *uint64_t v34 = 1;
      *(unsigned char *)(a1 + 109877) = 1;
      *(unsigned char *)(a1 + 109879) = 1;
      *(_OWORD *)(a1 + 109888) = xmmword_1BA78F760;
      *(_DWORD *)(a1 + 228) = 60;
      *(void *)(a1 + 2028) = 0x7FFFFFFFLL;
      *(void *)(a1 + 2040) = 0xBFF0000000000000;
      *(void *)(a1 + 2048) = 0xBFF0000000000000;
      *(unsigned char *)(a1 + 254) = 1;
      *(_DWORD *)(a1 + 260) = 0;
      *(void *)(a1 + 200) |= 0x10uLL;
      *(_DWORD *)(a1 + 1868) = 3;
      if (!*(unsigned char *)(a1 + 183436))
      {
        if (*(unsigned char *)(a1 + 183438))
        {
          int v76 = *(_DWORD *)(a1 + 1808);
          if (v76 >= 1)
          {
            uint64_t v77 = 0;
            __uint64_t v78 = (double *)(a1 + 1784);
            unsigned int v79 = 0x7FFFFFFF;
            do
            {
              if (v79 > (*(v78 - 1) * 8.0 / *v78))
              {
                if (AVE_Log_CheckLevel(0x1Eu, 6))
                {
                  int v80 = AVE_Log_CheckConsole(0x1Eu);
                  __uint64_t v81 = AVE_GetCurrTime();
                  int v82 = AVE_Log_GetLevelStr(6);
                  double v83 = *(v78 - 1);
                  double v84 = *v78;
                  if (v80)
                  {
                    printf("%lld %d AVE %s: FIG: uint64_t i = %d DataRateLimitsSize %f DataRateLimitsSeconds %f\n", v81, 30, v82, v77, *(v78 - 1), v84);
                    __uint64_t v81 = AVE_GetCurrTime();
                    int v82 = AVE_Log_GetLevelStr(6);
                    double v83 = *(v78 - 1);
                    double v84 = *v78;
                  }
                  syslog(3, "%lld %d AVE %s: FIG: uint64_t i = %d DataRateLimitsSize %f DataRateLimitsSeconds %f", v81, 30, v82, v77, v83, v84);
                }
                unsigned int v79 = (*(v78 - 1) * 8.0 / *v78);
                int v76 = *(_DWORD *)(a1 + 1808);
              }
              ++v77;
              v78 += 2;
            }
            while (v77 < v76);
LABEL_348:
            uint64_t v25 = (unsigned int *)(a1 + 183416);
            if (v79 != 0x7FFFFFFF) {
              *(_DWORD *)(a1 + 192) = v79;
            }
            goto LABEL_190;
          }
        }
      }
      goto LABEL_190;
    }
LABEL_166:
    *(_DWORD *)(a1 + 208) |= 0x20u;
    *(unsigned char *)(a1 + 1924) = 1;
    *(unsigned char *)(a1 + 244) = 0;
    *(unsigned char *)(a1 + 252) = 0;
    *(_DWORD *)(a1 + 260) = 0;
    *(_DWORD *)(a1 + 196) = 20;
    *(unsigned char *)(a1 + 18684) = 0;
    *(_WORD *)(a1 + 255) = 0;
    *(unsigned char *)(a1 + 257) = 0;
    *(unsigned char *)(a1 + 18013) = 0;
    *(_DWORD *)(a1 + 2024) &= ~1u;
    *(_DWORD *)(a1 + 18776) = 2;
    if (*(unsigned char *)(a1 + 216))
    {
      *(_DWORD *)(a1 + 1944) = 1;
      *(_DWORD *)(a1 + 22060) = 1;
      *(_DWORD *)(a1 + 103180) = 1;
      *__uint64_t v256 = 1;
    }
    *uint64_t v15 = 0;
    *(unsigned char *)(a1 + 120555) = 1;
    *(unsigned char *)(a1 + 138593) = 1;
    if (*(unsigned char *)(a1 + 18743)) {
      *(_WORD *)(a1 + 118485) = 1;
    }
    uint64_t v75 = *(void *)(a1 + 20168);
    if ((v75 & 4) != 0)
    {
      *uint64_t v34 = 1;
      *(_DWORD *)(a1 + 109877) = 16843009;
      *(_OWORD *)(a1 + 109884) = xmmword_1BA78F770;
      *(_DWORD *)(a1 + 109900) = 15;
    }
    if ((v75 & 8) != 0)
    {
      *uint64_t v34 = 1;
      *(unsigned char *)(a1 + 109877) = 0;
    }
    *(unsigned char *)(a1 + 18752) = 0;
    *(void *)(a1 + 18685) = 0;
    *(unsigned char *)(a1 + 118414) = 1;
    goto LABEL_199;
  }
  if (v131 != 37)
  {
    if (v131 == 10000) {
      goto LABEL_143;
    }
LABEL_192:
    unsigned int v85 = *(_DWORD *)(a1 + 183564);
    if (v85 <= 0x19 && ((1 << v85) & 0x33CE600) != 0)
    {
      int v86 = *(unsigned __int8 *)(a1 + 18056);
      *(unsigned char *)(a1 + 17881) = v86 ^ 1;
      if (!v86)
      {
        *(unsigned char *)(a1 + 253) = 1;
        if (!*(unsigned char *)(a1 + 18743) && (*(unsigned char *)(a1 + 203) & 0x80) == 0)
        {
          *(_DWORD *)(a1 + 17944) = 1;
          *(unsigned char *)(a1 + 18743) = 1;
          *(_WORD *)(a1 + 118485) = 1;
          *__uint64_t v256 = 1;
        }
      }
    }
    AVE_NewDefaultsBasedOnProfileUsageDefault(a1);
    goto LABEL_199;
  }
LABEL_189:
  *uint64_t v34 = 1;
  *(unsigned char *)(a1 + 109877) = 1;
  *(unsigned char *)(a1 + 109879) = 1;
  *(_OWORD *)(a1 + 109888) = xmmword_1BA78F760;
  *(_DWORD *)(a1 + 228) = 60;
  *(void *)(a1 + 2028) = 0x7FFFFFFFLL;
  *(void *)(a1 + 2040) = 0xBFF0000000000000;
  *(void *)(a1 + 2048) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 254) = 1;
  *(_DWORD *)(a1 + 260) = 0;
  *(void *)(a1 + 200) |= 0x10uLL;
  *(_DWORD *)(a1 + 1868) = 3;
  if (!*(unsigned char *)(a1 + 183436))
  {
    if (*(unsigned char *)(a1 + 183438))
    {
      int v132 = *(_DWORD *)(a1 + 1808);
      if (v132 >= 1)
      {
        uint64_t v133 = 0;
        int v134 = (double *)(a1 + 1784);
        unsigned int v79 = 0x7FFFFFFF;
        do
        {
          if (v79 > (*(v134 - 1) * 8.0 / *v134))
          {
            if (AVE_Log_CheckLevel(0x1Eu, 6))
            {
              int v135 = AVE_Log_CheckConsole(0x1Eu);
              __uint64_t v136 = AVE_GetCurrTime();
              __uint64_t v137 = AVE_Log_GetLevelStr(6);
              double v138 = *(v134 - 1);
              double v139 = *v134;
              if (v135)
              {
                printf("%lld %d AVE %s: FIG: uint64_t i = %d DataRateLimitsSize %f DataRateLimitsSeconds %f\n", v136, 30, v137, v133, *(v134 - 1), v139);
                __uint64_t v136 = AVE_GetCurrTime();
                __uint64_t v137 = AVE_Log_GetLevelStr(6);
                double v138 = *(v134 - 1);
                double v139 = *v134;
              }
              syslog(3, "%lld %d AVE %s: FIG: uint64_t i = %d DataRateLimitsSize %f DataRateLimitsSeconds %f", v136, 30, v137, v133, v138, v139);
            }
            unsigned int v79 = (*(v134 - 1) * 8.0 / *v134);
            int v132 = *(_DWORD *)(a1 + 1808);
          }
          ++v133;
          v134 += 2;
        }
        while (v133 < v132);
        goto LABEL_348;
      }
    }
  }
LABEL_190:
  *(_DWORD *)(a1 + 2024) &= ~1u;
LABEL_199:
  int v87 = *(_DWORD *)(a1 + 1884);
  int v88 = *(_DWORD *)(a1 + 1880);
  int v89 = *(_DWORD *)(a1 + 228);
  if (v89 <= 0)
  {
    if ((((v88 + 15) >> 4) * ((v87 + 15) >> 4)) >> 5 <= 0xFE) {
      int v89 = 240;
    }
    else {
      int v89 = 60;
    }
  }
  if (AVE_Log_CheckLevel(0xD1u, 7))
  {
    int v90 = AVE_Log_CheckConsole(0xD1u);
    __uint64_t v91 = AVE_GetCurrTime();
    int v92 = AVE_Log_GetLevelStr(7);
    int v93 = *(_DWORD *)(a1 + 102604);
    if (v90)
    {
      printf("%lld %d AVE %s: FIG: starting with: SPSHevcParams.PTL.general_profile_idc = %d - SPSHevcParams.PTL.general_level_idc = %d\n", v91, 209, v92, *(_DWORD *)(a1 + 102552), v93);
      __uint64_t v94 = AVE_GetCurrTime();
      __uint64_t v95 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: starting with: SPSHevcParams.PTL.general_profile_idc = %d - SPSHevcParams.PTL.general_level_idc = %d", v94, 209, v95, *(_DWORD *)(a1 + 102552), *(_DWORD *)(a1 + 102604));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: starting with: SPSHevcParams.PTL.general_profile_idc = %d - SPSHevcParams.PTL.general_level_idc = %d", v91, 209, v92, *(_DWORD *)(a1 + 102552), v93);
    }
  }
  unsigned int v96 = v88 * v87;
  if (AVE_Log_CheckLevel(0xD1u, 7))
  {
    int v97 = AVE_Log_CheckConsole(0xD1u);
    __uint64_t v98 = AVE_GetCurrTime();
    BOOL v99 = AVE_Log_GetLevelStr(7);
    unsigned int v100 = v25[2];
    if (v97)
    {
      printf("%lld %d AVE %s: FIG: starting with: FIGProfile = %d - FIGLevel = %d\n", v98, 209, v99, v25[1], v100);
      __uint64_t v101 = AVE_GetCurrTime();
      int64_t v102 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: starting with: FIGProfile = %d - FIGLevel = %d", v101, 209, v102, v25[1], v25[2]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: starting with: FIGProfile = %d - FIGLevel = %d", v98, 209, v99, v25[1], v100);
    }
  }
  unsigned int v258 = v89 * v96;
  if (AVE_Log_CheckLevel(0xD1u, 7))
  {
    int v103 = AVE_Log_CheckConsole(0xD1u);
    __uint64_t v104 = AVE_GetCurrTime();
    int v105 = AVE_Log_GetLevelStr(7);
    if (v103)
    {
      printf("%lld %d AVE %s: FIG: starting with: ui32MBf %d, ui32MBs %d, bitrate %d (eRCMode is %d), iExpectedFrameRate %d\n", v104, 209, v105, v96, v258, *(_DWORD *)(a1 + 192), *(_DWORD *)(a1 + 196), *(_DWORD *)(a1 + 228));
      __uint64_t v104 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: FIG: starting with: ui32MBf %d, ui32MBs %d, bitrate %d (eRCMode is %d), iExpectedFrameRate %d", v104);
  }
  if (AVE_Log_CheckLevel(0xD1u, 7))
  {
    int v106 = AVE_Log_CheckConsole(0xD1u);
    __uint64_t v107 = AVE_GetCurrTime();
    int v108 = AVE_Log_GetLevelStr(7);
    int v109 = *(_DWORD *)(a1 + 1868);
    if (v106)
    {
      printf("%lld %d AVE %s: FIG: starting with: USAGE %d ui32MaxNumLTR %d\n", v107, 209, v108, *(_DWORD *)(a1 + 292), v109);
      __uint64_t v110 = AVE_GetCurrTime();
      int v111 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: starting with: USAGE %d ui32MaxNumLTR %d", v110, 209, v111, *(_DWORD *)(a1 + 292), *(_DWORD *)(a1 + 1868));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: starting with: USAGE %d ui32MaxNumLTR %d", v107, 209, v108, *(_DWORD *)(a1 + 292), v109);
    }
  }
  if (v96 >= 0x2200001) {
    int v112 = 255;
  }
  else {
    int v112 = 180;
  }
  if (v96 < 0x880001) {
    int v112 = 150;
  }
  if (v96 <= 0x220000) {
    int v112 = 120;
  }
  if (v96 <= 0xF0000) {
    int v112 = 93;
  }
  if (v96 <= 0x87000) {
    int v112 = 90;
  }
  if (v96 <= 0x3C000) {
    int v112 = 63;
  }
  if (v96 <= 0x1E000) {
    int v112 = 60;
  }
  if (v96 >= 0x8F4D) {
    unsigned int v113 = v112;
  }
  else {
    unsigned int v113 = 30;
  }
  if (AVE_Log_CheckLevel(0xD1u, 7))
  {
    int v114 = AVE_Log_CheckConsole(0xD1u);
    __uint64_t v115 = AVE_GetCurrTime();
    int v116 = AVE_Log_GetLevelStr(7);
    if (v114)
    {
      printf("%lld %d AVE %s: FIG: restrict based on Luma size (%d): ui32Level = %d\n", v115, 209, v116, v96, v113);
      __uint64_t v115 = AVE_GetCurrTime();
      int v116 = AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: FIG: restrict based on Luma size (%d): ui32Level = %d", v115, 209, v116, v96, v113);
  }
  unsigned int v117 = *(_DWORD *)(a1 + 1880);
  if (v117 >= 0x41F9) {
    int v118 = 255;
  }
  else {
    int v118 = 180;
  }
  if (v117 < 0x20FD) {
    int v118 = 150;
  }
  if (v117 < 0x107F) {
    int v118 = 120;
  }
  if (v117 < 0xAF5) {
    int v118 = 93;
  }
  if (v117 < 0x838) {
    int v118 = 90;
  }
  if (v117 < 0x57B) {
    int v118 = 63;
  }
  if (v117 < 0x3E0) {
    int v118 = 60;
  }
  if (v117 >= 0x21E) {
    unsigned int v119 = v118;
  }
  else {
    unsigned int v119 = 30;
  }
  if (v113 > v119) {
    unsigned int v119 = v113;
  }
  unsigned int v120 = *(_DWORD *)(a1 + 1884);
  if (v120 >= 0x41F9) {
    unsigned int v121 = 255;
  }
  else {
    unsigned int v121 = 180;
  }
  if (v120 < 0x20FD) {
    unsigned int v121 = 150;
  }
  if (v120 < 0x107F) {
    unsigned int v121 = 120;
  }
  if (v120 < 0xAF5) {
    unsigned int v121 = 93;
  }
  if (v120 < 0x838) {
    unsigned int v121 = 90;
  }
  if (v120 < 0x57B) {
    unsigned int v121 = 63;
  }
  if (v120 < 0x3E0) {
    unsigned int v121 = 60;
  }
  if (v120 < 0x21E) {
    unsigned int v121 = 30;
  }
  if (v119 <= v121) {
    unsigned int v122 = v121;
  }
  else {
    unsigned int v122 = v119;
  }
  if ((*(_DWORD *)(a1 + 102552) - 1) <= 1)
  {
    if (v258 >= 0xFF000001) {
      int v123 = 255;
    }
    else {
      int v123 = 186;
    }
    if (v258 < 0x7F800001) {
      int v123 = 183;
    }
    if (v258 < 0x3FC00001) {
      int v123 = 156;
    }
    if (v258 < 0x1FE00001) {
      int v123 = 153;
    }
    if (v258 < 0xFF00001) {
      int v123 = 150;
    }
    if (v258 < 0x7F80001) {
      int v123 = 123;
    }
    if (v258 < 0x3FC0001) {
      int v123 = 120;
    }
    if (v258 < 0x1FA4001) {
      int v123 = 93;
    }
    if (v258 <= 0xFD2000) {
      int v123 = 90;
    }
    if (v258 < 0x708001) {
      int v123 = 63;
    }
    if (v258 <= 0x384000) {
      int v123 = 60;
    }
    if (v258 >= 0x87001) {
      unsigned int v124 = v123;
    }
    else {
      unsigned int v124 = 30;
    }
    if (v122 <= v124) {
      unsigned int v122 = v124;
    }
    int v125 = *(_DWORD *)(a1 + 196);
    if (v125 >= 1 && v125 != 3 && v125 != 8)
    {
      int v126 = *(_DWORD *)(a1 + 192);
      if (*(_DWORD *)(a1 + 102548))
      {
        if (v126 >= 800000001) {
          int v127 = 255;
        }
        else {
          int v127 = 186;
        }
        if (v126 < 480000001) {
          int v127 = 183;
        }
        if (v126 >= 240000001) {
          int v128 = v127;
        }
        else {
          int v128 = 156;
        }
        if (v126 < 160000001) {
          int v128 = 153;
        }
        if (v126 < 100000001) {
          int v128 = 150;
        }
        if (v126 < 50000001) {
          int v128 = 123;
        }
        BOOL v129 = v126 < 30000001;
        int v130 = 120;
      }
      else
      {
        if (v126 >= 240000001) {
          int v128 = 255;
        }
        else {
          int v128 = 186;
        }
        if (v126 < 120000001) {
          int v128 = 183;
        }
        if (v126 < 60000001) {
          int v128 = 156;
        }
        if (v126 < 40000001) {
          int v128 = 153;
        }
        if (v126 < 25000001) {
          int v128 = 150;
        }
        if (v126 < 20000001) {
          int v128 = 123;
        }
        if (v126 < 12000001) {
          int v128 = 120;
        }
        if (v126 < 10000001) {
          int v128 = 93;
        }
        if (v126 < 6000001) {
          int v128 = 90;
        }
        if (v126 < 3000001) {
          int v128 = 63;
        }
        if (v126 < 1500001) {
          int v128 = 60;
        }
        BOOL v129 = v126 < 128001;
        int v130 = 30;
      }
      if (v129) {
        unsigned int v140 = v130;
      }
      else {
        unsigned int v140 = v128;
      }
      if (AVE_Log_CheckLevel(0xD1u, 7))
      {
        int v141 = AVE_Log_CheckConsole(0xD1u);
        __uint64_t v142 = AVE_GetCurrTime();
        __uint64_t v143 = AVE_Log_GetLevelStr(7);
        int v144 = *(_DWORD *)(a1 + 192);
        if (v141)
        {
          printf("%lld %d AVE %s: FIG: restrict based on bitrate (%d) ui32Level = %d, ui32TempLevel = %d will use the MAX\n", v142, 209, v143, v144, v122, v140);
          __uint64_t v145 = AVE_GetCurrTime();
          int v253 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: FIG: restrict based on bitrate (%d) ui32Level = %d, ui32TempLevel = %d will use the MAX", v145, 209, v253, *(_DWORD *)(a1 + 192), v122, v140);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: restrict based on bitrate (%d) ui32Level = %d, ui32TempLevel = %d will use the MAX", v142, 209, v143, v144, v122, v140);
        }
      }
      if (v122 <= v140) {
        unsigned int v122 = v140;
      }
    }
  }
  unsigned int v146 = *(_DWORD *)(a1 + 102604);
  if (v146 <= v122) {
    unsigned int v146 = v122;
  }
  *(_DWORD *)(a1 + 102604) = v146;
  *(_DWORD *)(a1 + 20452) = v146;
  unsigned int v147 = *(_DWORD *)(a1 + 183424);
  if (!v147) {
    goto LABEL_392;
  }
  if (v147 < v146 && *(int *)(a1 + 228) >= 1)
  {
    if (AVE_Log_CheckLevel(0xD1u, 4))
    {
      int v148 = AVE_Log_CheckConsole(0xD1u);
      __uint64_t v149 = AVE_GetCurrTime();
      int v150 = AVE_Log_GetLevelStr(4);
      int v151 = *(_DWORD *)(a1 + 102604);
      if (v148)
      {
        printf("%lld %d AVE %s: FIG: HEVCLevel %d incompatible with other settings (min should be %d)\n", v149, 209, v150, *(_DWORD *)(a1 + 183424), v151);
        __uint64_t v152 = AVE_GetCurrTime();
        int v153 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: FIG: HEVCLevel %d incompatible with other settings (min should be %d)", v152, 209, v153, *(_DWORD *)(a1 + 183424), *(_DWORD *)(a1 + 102604));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: HEVCLevel %d incompatible with other settings (min should be %d)", v149, 209, v150, *(_DWORD *)(a1 + 183424), v151);
      }
    }
    if (AVE_Log_CheckLevel(0xD1u, 4))
    {
      int v165 = AVE_Log_CheckConsole(0xD1u);
      __uint64_t v166 = AVE_GetCurrTime();
      int v167 = AVE_Log_GetLevelStr(4);
      if (v165)
      {
        printf("%lld %d AVE %s: FIG: Luma size = %d, Luma samples per second = %d, FrameRate = %d, BitRate = %d\n", v166, 209, v167, v96, v258, *(_DWORD *)(a1 + 228), *(_DWORD *)(a1 + 192));
        __uint64_t v166 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: FIG: Luma size = %d, Luma samples per second = %d, FrameRate = %d, BitRate = %d", v166);
    }
    uint64_t v154 = 4294954394;
    goto LABEL_410;
  }
  if (v146 == v147)
  {
LABEL_392:
    uint64_t v154 = 0;
LABEL_410:
    int v164 = *(_DWORD *)(a1 + 102604);
    goto LABEL_411;
  }
  if (AVE_Log_CheckLevel(0xD1u, 7))
  {
    int v155 = AVE_Log_CheckConsole(0xD1u);
    __uint64_t v156 = AVE_GetCurrTime();
    int v157 = AVE_Log_GetLevelStr(7);
    int v158 = *(_DWORD *)(a1 + 102604);
    if (v155)
    {
      printf("%lld %d AVE %s: FIG: HEVCLevel received (%d) is too high... consider lowering it with these settings (min should be %d)\n", v156, 209, v157, *(_DWORD *)(a1 + 183424), v158);
      __uint64_t v159 = AVE_GetCurrTime();
      int v160 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: HEVCLevel received (%d) is too high... consider lowering it with these settings (min should be %d)", v159, 209, v160, *(_DWORD *)(a1 + 183424), *(_DWORD *)(a1 + 102604));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: HEVCLevel received (%d) is too high... consider lowering it with these settings (min should be %d)", v156, 209, v157, *(_DWORD *)(a1 + 183424), v158);
    }
  }
  if (AVE_Log_CheckLevel(0xD1u, 7))
  {
    int v161 = AVE_Log_CheckConsole(0xD1u);
    __uint64_t v162 = AVE_GetCurrTime();
    __uint64_t v163 = AVE_Log_GetLevelStr(7);
    if (v161)
    {
      printf("%lld %d AVE %s: FIG: Luma size = %d (%dx%d), Luma samples per second = %d, ExpectedFrameRate = %d, BitRate = %d\n", v162, 209, v163, v96, *(_DWORD *)(a1 + 1880), *(_DWORD *)(a1 + 1884), v258, *(_DWORD *)(a1 + 228), *(_DWORD *)(a1 + 192));
      __uint64_t v162 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: FIG: Luma size = %d (%dx%d), Luma samples per second = %d, ExpectedFrameRate = %d, BitRate = %d", v162, 209);
  }
  uint64_t v154 = 0;
  int v164 = *(_DWORD *)(a1 + 183424);
  *(_DWORD *)(a1 + 102604) = v164;
  *(_DWORD *)(a1 + 20452) = v164;
LABEL_411:
  if (v164 == 255)
  {
    *(_DWORD *)(a1 + 20396) = 1;
    *(_DWORD *)(a1 + 102548) = 1;
    *(void *)(a1 + 20504) = 0x101010101010101;
    *(void *)(a1 + 102656) = 0x101010101010101;
  }
  if (AVE_Log_CheckLevel(0xD1u, 7))
  {
    int v168 = AVE_Log_CheckConsole(0xD1u);
    __uint64_t v169 = AVE_GetCurrTime();
    int v170 = AVE_Log_GetLevelStr(7);
    if (v168)
    {
      printf("%lld %d AVE %s: FIG: end with encoderPrivateStorage->SPSHevcParams.PTL.general_level_idc %d (min %d), ui32LPs %d, ui32LSr %d, bitrate %d (eRCMode is %d), iExpectedFrameRate %d\n", v169, 209, v170, *(_DWORD *)(a1 + 102604), v122, v96, v258, *(_DWORD *)(a1 + 192), *(_DWORD *)(a1 + 196), *(_DWORD *)(a1 + 228));
      __uint64_t v169 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: FIG: end with encoderPrivateStorage->SPSHevcParams.PTL.general_level_idc %d (min %d), ui32LPs %d, ui32LSr %d, bitrate %d (eRCMode is %d), iExpectedFrameRate %d", v169, 209);
  }
  if (v154)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v171 = AVE_Log_CheckConsole(3u);
      __uint64_t v172 = AVE_GetCurrTime();
      int v173 = AVE_Log_GetLevelStr(4);
      if (v171)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_PrepareHEVCLevel failed\n", v172, 3, v173, "AVE_ManageSessionSettings", 12082, "err == noErr");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_PrepareHEVCLevel failed");
    }
    return v154;
  }
  unsigned int v174 = (double *)AVE_DW_Get();
  BOOL v175 = v174;
  int v176 = *((_DWORD *)v174 + 317);
  if ((v176 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 2028) = v176;
  }
  int v177 = *((_DWORD *)v174 + 318);
  if ((v177 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 2032) = v177;
  }
  double v178 = v174[160];
  if (v178 >= 0.0) {
    *(double *)(a1 + 2040) = v178;
  }
  double v179 = v174[161];
  if (v179 >= 0.0) {
    *(double *)(a1 + 2048) = v179;
  }
  uint64_t v180 = *((void *)v174 + 3);
  uint64_t v181 = *((void *)v174 + 4);
  *(void *)(a1 + 1888) = (*(void *)(a1 + 1888) | v180) & ~v181;
  *(void *)(a1 + 1896) = (*(void *)(a1 + 1896) | *((void *)v174 + 5)) & ~*((void *)v174 + 6);
  if (v180)
  {
    *(void *)(a1 + 2028) = 1;
    *(void *)(a1 + 2040) = 0xBFF0000000000000;
    *(void *)(a1 + 2048) = 0xBFF0000000000000;
    if ((v180 & 2) == 0)
    {
LABEL_432:
      if ((v180 & 4) == 0) {
        goto LABEL_433;
      }
      goto LABEL_438;
    }
  }
  else if ((v180 & 2) == 0)
  {
    goto LABEL_432;
  }
  *(void *)(a1 + 2028) = 0x7FFFFFFFLL;
  *(void *)(a1 + 2040) = 0xBFF0000000000000;
  *(void *)(a1 + 2048) = 0xBFF0000000000000;
  if ((v180 & 4) == 0)
  {
LABEL_433:
    if ((v181 & 4) == 0) {
      goto LABEL_434;
    }
LABEL_439:
    *(unsigned char *)(a1 + 18676) = 0;
    if ((v180 & 0x20) == 0) {
      goto LABEL_452;
    }
    goto LABEL_440;
  }
LABEL_438:
  *(unsigned char *)(a1 + 18676) = 1;
  if ((v181 & 4) != 0) {
    goto LABEL_439;
  }
LABEL_434:
  if ((v180 & 0x20) == 0) {
    goto LABEL_452;
  }
LABEL_440:
  if (*(_DWORD *)v174 == 1)
  {
    int v182 = AVE_MCTF_Validate(*(_DWORD *)(a1 + 183564), *(unsigned int *)(a1 + 183560), *(_DWORD *)(a1 + 1876), *(_DWORD *)(a1 + 18760), *(_DWORD *)(a1 + 185512));
    int v183 = *(_DWORD *)(a1 + 1876);
    if (v182)
    {
      unsigned int v184 = v183 & 0xFFFFFF1F;
      goto LABEL_446;
    }
  }
  else
  {
    int v183 = *(_DWORD *)(a1 + 1876);
  }
  unsigned int v184 = v183 | 0xE0;
LABEL_446:
  *(_DWORD *)(a1 + 1876) = v184;
  uint64_t v180 = *((void *)v175 + 3);
  if ((v180 & 0x1000000) != 0) {
    *(unsigned char *)(a1 + 20210) = 1;
  }
  uint64_t v181 = *((void *)v175 + 4);
  if ((v181 & 0x1000000) != 0)
  {
    *(unsigned char *)(a1 + 20210) = 0;
    if ((v180 & 0x4000000) == 0)
    {
LABEL_450:
      if ((v181 & 0x4000000) == 0) {
        goto LABEL_452;
      }
      goto LABEL_451;
    }
  }
  else if ((v180 & 0x4000000) == 0)
  {
    goto LABEL_450;
  }
  *(_DWORD *)(a1 + 18424) = 1;
  if ((v181 & 0x4000000) != 0) {
LABEL_451:
  }
    *(_DWORD *)(a1 + 18424) = 2;
LABEL_452:
  if ((v181 & 0x20) != 0)
  {
    *(_DWORD *)(a1 + 1876) &= 0xFFFFFF1F;
    if ((v180 & 0x40) == 0)
    {
LABEL_454:
      if ((v181 & 0x40) == 0) {
        goto LABEL_455;
      }
      goto LABEL_544;
    }
  }
  else if ((v180 & 0x40) == 0)
  {
    goto LABEL_454;
  }
  *int v257 = 1;
  if ((v181 & 0x40) == 0)
  {
LABEL_455:
    if ((v180 & 0x200) == 0) {
      goto LABEL_456;
    }
    goto LABEL_545;
  }
LABEL_544:
  *int v257 = 0;
  if ((v180 & 0x200) == 0)
  {
LABEL_456:
    if ((v181 & 0x200) == 0) {
      goto LABEL_457;
    }
    goto LABEL_546;
  }
LABEL_545:
  *(unsigned char *)(a1 + 118487) = 1;
  if ((v181 & 0x200) == 0)
  {
LABEL_457:
    if ((v180 & 0x400) == 0) {
      goto LABEL_458;
    }
    goto LABEL_547;
  }
LABEL_546:
  *(unsigned char *)(a1 + 118487) = 0;
  if ((v180 & 0x400) == 0)
  {
LABEL_458:
    if ((v181 & 0x400) == 0) {
      goto LABEL_459;
    }
    goto LABEL_548;
  }
LABEL_547:
  *(unsigned char *)(a1 + 20388) = 1;
  *__uint64_t v259 = 1;
  if ((v181 & 0x400) == 0)
  {
LABEL_459:
    if ((v180 & 0x1000) == 0) {
      goto LABEL_460;
    }
    goto LABEL_549;
  }
LABEL_548:
  *(unsigned char *)(a1 + 20388) = 0;
  *__uint64_t v259 = 0;
  if ((v180 & 0x1000) == 0)
  {
LABEL_460:
    if ((v181 & 0x1000) == 0) {
      goto LABEL_461;
    }
    goto LABEL_550;
  }
LABEL_549:
  *(_WORD *)(a1 + 18685) = 257;
  *(_WORD *)(a1 + 18688) = 257;
  *(unsigned char *)(a1 + 18693) = 1;
  if ((v181 & 0x1000) == 0)
  {
LABEL_461:
    if ((v180 & 0x2000000) == 0) {
      goto LABEL_462;
    }
    goto LABEL_551;
  }
LABEL_550:
  *(_WORD *)(a1 + 18685) = 0;
  *(_WORD *)(a1 + 18688) = 0;
  *(unsigned char *)(a1 + 18693) = 0;
  if ((v180 & 0x2000000) == 0)
  {
LABEL_462:
    if ((v181 & 0x2000000) == 0) {
      goto LABEL_463;
    }
    goto LABEL_552;
  }
LABEL_551:
  *(unsigned char *)(a1 + 18694) = 1;
  if ((v181 & 0x2000000) == 0)
  {
LABEL_463:
    if ((v180 & 0x2000) == 0) {
      goto LABEL_464;
    }
    goto LABEL_553;
  }
LABEL_552:
  *(unsigned char *)(a1 + 18694) = 0;
  if ((v180 & 0x2000) == 0)
  {
LABEL_464:
    if ((v181 & 0x2000) == 0) {
      goto LABEL_465;
    }
    goto LABEL_554;
  }
LABEL_553:
  *(unsigned char *)(a1 + 183546) = 1;
  if ((v181 & 0x2000) == 0)
  {
LABEL_465:
    if ((v180 & 0x4000) == 0) {
      goto LABEL_466;
    }
    goto LABEL_555;
  }
LABEL_554:
  *(unsigned char *)(a1 + 183546) = 0;
  if ((v180 & 0x4000) == 0)
  {
LABEL_466:
    if ((v181 & 0x4000) == 0) {
      goto LABEL_467;
    }
    goto LABEL_556;
  }
LABEL_555:
  *(unsigned char *)(a1 + 183547) = 1;
  if ((v181 & 0x4000) == 0)
  {
LABEL_467:
    if ((v180 & 0x8000) == 0) {
      goto LABEL_468;
    }
    goto LABEL_557;
  }
LABEL_556:
  *(unsigned char *)(a1 + 183547) = 0;
  if ((v180 & 0x8000) == 0)
  {
LABEL_468:
    if ((v181 & 0x8000) == 0) {
      goto LABEL_469;
    }
    goto LABEL_558;
  }
LABEL_557:
  *(unsigned char *)(a1 + 18933) = 1;
  if ((v181 & 0x8000) == 0)
  {
LABEL_469:
    if ((v180 & 0x10000) == 0) {
      goto LABEL_470;
    }
    goto LABEL_559;
  }
LABEL_558:
  *(unsigned char *)(a1 + 18933) = 0;
  if ((v180 & 0x10000) == 0)
  {
LABEL_470:
    if ((v181 & 0x10000) == 0) {
      goto LABEL_471;
    }
    goto LABEL_560;
  }
LABEL_559:
  *(unsigned char *)(a1 + 18932) = 1;
  *(unsigned char *)(a1 + 87668) = 1;
  *(unsigned char *)(a1 + 109812) = 1;
  if ((v181 & 0x10000) == 0)
  {
LABEL_471:
    if ((v180 & 0x20000) == 0) {
      goto LABEL_472;
    }
    goto LABEL_561;
  }
LABEL_560:
  *(unsigned char *)(a1 + 18932) = 0;
  if ((v180 & 0x20000) == 0)
  {
LABEL_472:
    if ((v181 & 0x20000) == 0) {
      goto LABEL_473;
    }
    goto LABEL_562;
  }
LABEL_561:
  *(unsigned char *)(a1 + 18013) = 1;
  if ((v181 & 0x20000) == 0)
  {
LABEL_473:
    if ((v180 & 0x40000) == 0) {
      goto LABEL_474;
    }
    goto LABEL_563;
  }
LABEL_562:
  *(unsigned char *)(a1 + 18013) = 0;
  if ((v180 & 0x40000) == 0)
  {
LABEL_474:
    if ((v181 & 0x40000) == 0) {
      goto LABEL_475;
    }
    goto LABEL_564;
  }
LABEL_563:
  *(unsigned char *)(a1 + 18014) = 1;
  if ((v181 & 0x40000) == 0)
  {
LABEL_475:
    if ((v180 & 0x80000) == 0) {
      goto LABEL_476;
    }
    goto LABEL_565;
  }
LABEL_564:
  *(unsigned char *)(a1 + 18014) = 0;
  if ((v180 & 0x80000) == 0)
  {
LABEL_476:
    if ((v181 & 0x80000) == 0) {
      goto LABEL_477;
    }
    goto LABEL_566;
  }
LABEL_565:
  *(unsigned char *)(a1 + 18934) = 1;
  if ((v181 & 0x80000) == 0)
  {
LABEL_477:
    if ((v180 & 0x100000) == 0) {
      goto LABEL_478;
    }
    goto LABEL_567;
  }
LABEL_566:
  *(unsigned char *)(a1 + 18934) = 0;
  if ((v180 & 0x100000) == 0)
  {
LABEL_478:
    if ((v181 & 0x100000) == 0) {
      goto LABEL_479;
    }
    goto LABEL_568;
  }
LABEL_567:
  *(unsigned char *)(a1 + 18860) = 1;
  if ((v181 & 0x100000) == 0)
  {
LABEL_479:
    if ((v180 & 0x200000) == 0) {
      goto LABEL_480;
    }
    goto LABEL_569;
  }
LABEL_568:
  *(unsigned char *)(a1 + 18860) = 0;
  if ((v180 & 0x200000) == 0)
  {
LABEL_480:
    if ((v181 & 0x200000) == 0) {
      goto LABEL_482;
    }
    goto LABEL_481;
  }
LABEL_569:
  *(unsigned char *)(a1 + 20165) = 1;
  if ((v181 & 0x200000) != 0) {
LABEL_481:
  }
    *(unsigned char *)(a1 + 20165) = 0;
LABEL_482:
  uint64_t v185 = *((void *)v175 + 145);
  uint64_t v186 = *((void *)v175 + 146);
  *(void *)(a1 + 200) = (*(void *)(a1 + 200) | v185) & ~v186;
  if ((v185 & 2) != 0)
  {
    *(unsigned char *)(a1 + 254) = 1;
    if ((v186 & 2) == 0)
    {
LABEL_484:
      if ((v185 & 0x40) == 0) {
        goto LABEL_485;
      }
      goto LABEL_573;
    }
  }
  else if ((v186 & 2) == 0)
  {
    goto LABEL_484;
  }
  *(unsigned char *)(a1 + 254) = 0;
  if ((v185 & 0x40) == 0)
  {
LABEL_485:
    if ((v186 & 0x40) == 0) {
      goto LABEL_486;
    }
    goto LABEL_574;
  }
LABEL_573:
  *(_DWORD *)(a1 + 2064) = 1;
  if ((v186 & 0x40) == 0)
  {
LABEL_486:
    if ((v185 & 0x10000) == 0) {
      goto LABEL_487;
    }
    goto LABEL_575;
  }
LABEL_574:
  *(_DWORD *)(a1 + 2064) = 0;
  if ((v185 & 0x10000) == 0)
  {
LABEL_487:
    if ((v186 & 0x10000) == 0) {
      goto LABEL_488;
    }
    goto LABEL_576;
  }
LABEL_575:
  *(unsigned char *)(a1 + 18851) = 1;
  if ((v186 & 0x10000) == 0)
  {
LABEL_488:
    if ((v185 & 0x20000) == 0) {
      goto LABEL_489;
    }
    goto LABEL_577;
  }
LABEL_576:
  *(unsigned char *)(a1 + 18851) = 0;
  if ((v185 & 0x20000) == 0)
  {
LABEL_489:
    if ((v186 & 0x20000) == 0) {
      goto LABEL_490;
    }
    goto LABEL_578;
  }
LABEL_577:
  *(unsigned char *)(a1 + 18350) = 1;
  if ((v186 & 0x20000) == 0)
  {
LABEL_490:
    if ((v185 & 0x40000) == 0) {
      goto LABEL_491;
    }
    goto LABEL_579;
  }
LABEL_578:
  *(unsigned char *)(a1 + 18350) = 0;
  if ((v185 & 0x40000) == 0)
  {
LABEL_491:
    if ((v186 & 0x40000) == 0) {
      goto LABEL_492;
    }
    goto LABEL_580;
  }
LABEL_579:
  *(unsigned char *)(a1 + 18856) = 1;
  if ((v186 & 0x40000) == 0)
  {
LABEL_492:
    if ((v185 & 0x80000) == 0) {
      goto LABEL_493;
    }
    goto LABEL_581;
  }
LABEL_580:
  *(unsigned char *)(a1 + 18856) = 0;
  if ((v185 & 0x80000) == 0)
  {
LABEL_493:
    if ((v186 & 0x80000) == 0) {
      goto LABEL_494;
    }
    goto LABEL_582;
  }
LABEL_581:
  *(unsigned char *)(a1 + 18857) = 1;
  if ((v186 & 0x80000) == 0)
  {
LABEL_494:
    if ((v185 & 0x100000) == 0) {
      goto LABEL_495;
    }
    goto LABEL_583;
  }
LABEL_582:
  *(unsigned char *)(a1 + 18857) = 0;
  if ((v185 & 0x100000) == 0)
  {
LABEL_495:
    if ((v186 & 0x100000) == 0) {
      goto LABEL_496;
    }
    goto LABEL_584;
  }
LABEL_583:
  *(unsigned char *)(a1 + 18858) = 1;
  *(unsigned char *)(a1 + 18853) = 1;
  if ((v186 & 0x100000) == 0)
  {
LABEL_496:
    if ((v185 & 0x800000) == 0) {
      goto LABEL_497;
    }
    goto LABEL_585;
  }
LABEL_584:
  *(unsigned char *)(a1 + 18858) = 0;
  *(unsigned char *)(a1 + 18853) = 0;
  if ((v185 & 0x800000) == 0)
  {
LABEL_497:
    if ((v186 & 0x800000) == 0) {
      goto LABEL_498;
    }
    goto LABEL_586;
  }
LABEL_585:
  *(_WORD *)(a1 + 18388) = 257;
  if ((v186 & 0x800000) == 0)
  {
LABEL_498:
    if ((v185 & 0x1000000) == 0) {
      goto LABEL_499;
    }
    goto LABEL_587;
  }
LABEL_586:
  *(_WORD *)(a1 + 18388) = 0;
  if ((v185 & 0x1000000) == 0)
  {
LABEL_499:
    if ((v186 & 0x1000000) == 0) {
      goto LABEL_500;
    }
    goto LABEL_588;
  }
LABEL_587:
  *(unsigned char *)(a1 + 246) = 1;
  if ((v186 & 0x1000000) == 0)
  {
LABEL_500:
    if ((v185 & 0x2000000) == 0) {
      goto LABEL_501;
    }
    goto LABEL_589;
  }
LABEL_588:
  *(unsigned char *)(a1 + 246) = 0;
  if ((v185 & 0x2000000) == 0)
  {
LABEL_501:
    if ((v186 & 0x2000000) == 0) {
      goto LABEL_502;
    }
    goto LABEL_590;
  }
LABEL_589:
  *(unsigned char *)(a1 + 18850) = 1;
  if ((v186 & 0x2000000) == 0)
  {
LABEL_502:
    if ((v185 & 0x100000000) == 0) {
      goto LABEL_503;
    }
LABEL_591:
    *(_DWORD *)(a1 + 17944) = 1;
    *(unsigned char *)(a1 + 18743) = 1;
    *(_WORD *)(a1 + 118485) = 1;
    *__uint64_t v256 = 1;
    if ((v186 & 0x100000000) == 0) {
      goto LABEL_505;
    }
    goto LABEL_504;
  }
LABEL_590:
  *(unsigned char *)(a1 + 18850) = 0;
  if ((v185 & 0x100000000) != 0) {
    goto LABEL_591;
  }
LABEL_503:
  if ((v186 & 0x100000000) != 0)
  {
LABEL_504:
    *(_DWORD *)(a1 + 17944) = 0;
    *(unsigned char *)(a1 + 18743) = 0;
    *(_WORD *)(a1 + 118485) = 0;
    *__uint64_t v256 = 0;
  }
LABEL_505:
  int v187 = *((_DWORD *)v175 + 308);
  int v188 = *((_DWORD *)v175 + 309);
  *(_DWORD *)(a1 + 208) = (*(_DWORD *)(a1 + 208) | v187) & ~v188;
  if (v187)
  {
    *(unsigned char *)(a1 + 244) = 1;
    if (*(_DWORD *)(a1 + 18760) == 1) {
      *(unsigned char *)(a1 + 118414) = 1;
    }
  }
  if (v188)
  {
    *(unsigned char *)(a1 + 244) = 0;
    if (*(_DWORD *)(a1 + 18760) == 1) {
      *(unsigned char *)(a1 + 118414) = 0;
    }
  }
  if ((v187 & 2) != 0)
  {
    *(unsigned char *)(a1 + 247) = 1;
    if ((v188 & 2) == 0)
    {
LABEL_513:
      if ((v187 & 4) == 0) {
        goto LABEL_514;
      }
      goto LABEL_595;
    }
  }
  else if ((v188 & 2) == 0)
  {
    goto LABEL_513;
  }
  *(unsigned char *)(a1 + 247) = 0;
  if ((v187 & 4) == 0)
  {
LABEL_514:
    if ((v188 & 4) == 0) {
      goto LABEL_515;
    }
    goto LABEL_596;
  }
LABEL_595:
  *(unsigned char *)(a1 + 248) = 1;
  if ((v188 & 4) == 0)
  {
LABEL_515:
    if ((v187 & 8) == 0) {
      goto LABEL_516;
    }
    goto LABEL_597;
  }
LABEL_596:
  *(unsigned char *)(a1 + 248) = 0;
  if ((v187 & 8) == 0)
  {
LABEL_516:
    if ((v188 & 8) == 0) {
      goto LABEL_518;
    }
    goto LABEL_517;
  }
LABEL_597:
  *(unsigned char *)(a1 + 249) = 1;
  if ((v188 & 8) != 0) {
LABEL_517:
  }
    *(unsigned char *)(a1 + 249) = 0;
LABEL_518:
  *(_DWORD *)(a1 + 2024) = (*(_DWORD *)(a1 + 2024) | *((_DWORD *)v175 + 310)) & ~*((_DWORD *)v175 + 311);
  *(_DWORD *)(a1 + 212) = (*(_DWORD *)(a1 + 212) | *((_DWORD *)v175 + 324)) & ~*((_DWORD *)v175 + 325);
  int v190 = *((_DWORD *)v175 + 14);
  int v189 = *((_DWORD *)v175 + 15);
  *(_DWORD *)(a1 + 1904) = (*(_DWORD *)(a1 + 1904) | v190) & ~v189;
  if (v190)
  {
    *(unsigned char *)(a1 + 253) = 1;
    if ((v189 & 1) == 0)
    {
LABEL_520:
      if ((v190 & 2) == 0) {
        goto LABEL_521;
      }
      goto LABEL_601;
    }
  }
  else if ((v189 & 1) == 0)
  {
    goto LABEL_520;
  }
  *(unsigned char *)(a1 + 253) = 0;
  if ((v190 & 2) == 0)
  {
LABEL_521:
    if ((v189 & 2) == 0) {
      goto LABEL_522;
    }
    goto LABEL_602;
  }
LABEL_601:
  *(unsigned char *)(a1 + 183545) = 1;
  if ((v189 & 2) == 0)
  {
LABEL_522:
    if ((v190 & 0x10) == 0) {
      goto LABEL_523;
    }
    goto LABEL_603;
  }
LABEL_602:
  *(unsigned char *)(a1 + 183545) = 0;
  if ((v190 & 0x10) == 0)
  {
LABEL_523:
    if ((v189 & 0x10) == 0) {
      goto LABEL_524;
    }
    goto LABEL_604;
  }
LABEL_603:
  *(_DWORD *)(a1 + 18776) = 4;
  *(_WORD *)(a1 + 18780) = 257;
  if ((v189 & 0x10) == 0)
  {
LABEL_524:
    if ((v190 & 8) == 0) {
      goto LABEL_525;
    }
    goto LABEL_605;
  }
LABEL_604:
  *(_DWORD *)(a1 + 18776) = 2;
  *(_WORD *)(a1 + 18780) = 1;
  if ((v190 & 8) == 0)
  {
LABEL_525:
    if ((v189 & 8) == 0) {
      goto LABEL_526;
    }
    goto LABEL_606;
  }
LABEL_605:
  *(unsigned char *)(a1 + 18861) = 1;
  if ((v189 & 8) == 0)
  {
LABEL_526:
    if ((v190 & 0x20) == 0) {
      goto LABEL_527;
    }
    goto LABEL_607;
  }
LABEL_606:
  *(unsigned char *)(a1 + 18861) = 0;
  if ((v190 & 0x20) == 0)
  {
LABEL_527:
    if ((v189 & 0x20) == 0) {
      goto LABEL_528;
    }
    goto LABEL_608;
  }
LABEL_607:
  *(unsigned char *)(a1 + 18935) = 1;
  if ((v189 & 0x20) == 0)
  {
LABEL_528:
    if ((v190 & 0x40) == 0) {
      goto LABEL_529;
    }
    goto LABEL_609;
  }
LABEL_608:
  *(unsigned char *)(a1 + 18935) = 0;
  if ((v190 & 0x40) == 0)
  {
LABEL_529:
    if ((v189 & 0x40) == 0) {
      goto LABEL_531;
    }
    goto LABEL_530;
  }
LABEL_609:
  *(unsigned char *)(a1 + 17881) = 1;
  if ((v189 & 0x40) != 0) {
LABEL_530:
  }
    *(unsigned char *)(a1 + 17881) = 0;
LABEL_531:
  if (((_BYTE)v175[98] & 8) != 0) {
    *(_DWORD *)(a1 + 1920) = 0x8000000;
  }
  int v191 = *((_DWORD *)v175 + 295);
  if (v191 >= 1)
  {
    *(_DWORD *)(a1 + 192) = v191;
    *(_WORD *)(a1 + 183436) = 257;
  }
  int v192 = *((_DWORD *)v175 + 16);
  if ((v192 - 1) <= 0x1F) {
    *(_DWORD *)(a1 + 20176) = v192;
  }
  int v193 = *((_DWORD *)v175 + 338);
  if ((v193 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 18776) = v193;
    *(unsigned char *)(a1 + 18780) = 1;
  }
  unsigned int v194 = *((_DWORD *)v175 + 341);
  if ((v194 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 18788) = v194;
    if (v194 >= 5)
    {
      if (AVE_Log_CheckLevel(0x16u, 4))
      {
        int v197 = AVE_Log_CheckConsole(0x16u);
        __uint64_t v198 = AVE_GetCurrTime();
        int v199 = AVE_Log_GetLevelStr(4);
        if (v197)
        {
          printf("%lld %d AVE %s: FIG: SetProperty AVE_kVTCompressionPropertyKey_SAOMode not supported (%d)\n", v198, 22, v199, v194);
          __uint64_t v200 = AVE_GetCurrTime();
          __uint64_t v254 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: FIG: SetProperty AVE_kVTCompressionPropertyKey_SAOMode not supported (%d)", v200, 22, v254, v194);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: SetProperty AVE_kVTCompressionPropertyKey_SAOMode not supported (%d)", v198, 22, v199, v194);
        }
      }
      LOBYTE(v195) = 0;
      LOBYTE(v196) = 0;
    }
    else
    {
      unint64_t v195 = 0x101000100uLL >> (8 * v194);
      unint64_t v196 = 0x101010000uLL >> (8 * v194);
    }
    *(unsigned char *)(a1 + 137925) = v195;
    *(unsigned char *)(a1 + 137926) = v196;
  }
  int v201 = *((_DWORD *)v175 + 337);
  if (AVE_DevCap_FindSearchRangeMode(*(_DWORD *)(a1 + 183568), 1, 1, v201)) {
    *(_WORD *)(a1 + 17872) = v201;
  }
  int v202 = *((_DWORD *)v175 + 326);
  if ((v202 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 18412) = v202;
  }
  int v203 = *((_DWORD *)v175 + 327);
  if ((v203 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 18408) = v203;
  }
  int v204 = *((_DWORD *)v175 + 328);
  if ((v204 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 18404) = v204;
  }
  int v205 = *((_DWORD *)v175 + 329);
  if ((v205 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 18416) = v205;
  }
  int v206 = *((_DWORD *)v175 + 313);
  if ((v206 & 0x80000000) == 0) {
    *(_WORD *)(a1 + 18328) = v206;
  }
  int v207 = *((_DWORD *)v175 + 316);
  if (v207 <= 0)
  {
    if (v207) {
      goto LABEL_636;
    }
    char v208 = 0;
  }
  else
  {
    char v208 = 1;
  }
  *(_DWORD *)(a1 + 224) = v207;
  *(unsigned char *)(a1 + 18846) = v208;
LABEL_636:
  int v209 = *((_DWORD *)v175 + 285);
  if (v209 != -13) {
    *(_DWORD *)(a1 + 1840) = v209;
  }
  int v210 = *((_DWORD *)v175 + 286);
  if (v210 != -13) {
    *(_DWORD *)(a1 + 1844) = v210;
  }
  int v211 = *((_DWORD *)v175 + 287);
  if (v211 != -13) {
    *(_DWORD *)(a1 + 1848) = v211;
  }
  int v212 = *((_DWORD *)v175 + 288);
  if (v212 != -13) {
    *(_DWORD *)(a1 + 1852) = v212;
  }
  int v213 = *((_DWORD *)v175 + 282);
  if (v213 != -13) {
    *(_DWORD *)(a1 + 1824) = v213;
  }
  int v214 = *((_DWORD *)v175 + 283);
  if (v214 != -13) {
    *(_DWORD *)(a1 + 1828) = v214;
  }
  int v215 = *((_DWORD *)v175 + 284);
  if (v215 != -13) {
    *(_DWORD *)(a1 + 1832) = v215;
  }
  unsigned int v216 = *((_DWORD *)v175 + 342);
  if (v216 <= 4) {
    *(_DWORD *)(a1 + 18868) = v216;
  }
  int v217 = *((_DWORD *)v175 + 331);
  if (v217)
  {
    double v218 = (double)v217 / 100.0 + 1.0;
    unsigned int v219 = *(unsigned __int8 *)(a1 + 18420);
    float v220 = v218 * (double)v219;
    if (v220 >= 25.0 || v220 < 0.0) {
      float v220 = (float)v219;
    }
    *(unsigned char *)(a1 + 18420) = v220;
  }
  int v222 = *((_DWORD *)v175 + 330);
  if ((v222 & 0x80000000) == 0) {
    *(unsigned char *)(a1 + 18420) = v222;
  }
  int v223 = *((_DWORD *)v175 + 349);
  if (v223 >= 1) {
    *(_DWORD *)(a1 + 20192) = v223;
  }
  int v224 = *((_DWORD *)v175 + 350);
  if (v224 >= 1) {
    *(_DWORD *)(a1 + 20196) = v224;
  }
  int v225 = *((_DWORD *)v175 + 277);
  if ((v225 & 0x80000000) == 0)
  {
    *uint64_t v15 = v225;
    *(unsigned char *)(a1 + 18845) = 1;
  }
  int v226 = *((_DWORD *)v175 + 336);
  if (v226 >= 1) {
    *(_DWORD *)(a1 + 18060) = v226;
  }
  unsigned int v227 = *((_DWORD *)v175 + 340);
  if (v227 <= 2) {
    *(unsigned char *)(a1 + 138594) = v227 != 0;
  }
  int v228 = *((_DWORD *)v175 + 314);
  if ((v228 & 0x80000000) == 0)
  {
    *(unsigned char *)(a1 + 1772) = v228 != 0;
    *(_DWORD *)(a1 + 19464) = v228;
  }
  int v229 = *((_DWORD *)v175 + 294);
  if (v229 >= 1) {
    *(_DWORD *)(a1 + 196) = v229;
  }
  int v230 = *((_DWORD *)v175 + 295);
  if (v230 >= 1) {
    *(_DWORD *)(a1 + 192) = v230;
  }
  int v231 = *((_DWORD *)v175 + 302);
  if ((v231 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 232) = v231;
    *(void *)(a1 + 200) |= 0x80000000uLL;
  }
  double v232 = v175[149];
  if (v232 >= 0.0)
  {
    float v233 = v232;
    *(float *)(a1 + 240) = v233;
  }
  int v234 = *((_DWORD *)v175 + 345);
  if (v234 >= 1) {
    *(_DWORD *)(a1 + 220) = v234;
  }
  if (*(unsigned char *)(a1 + 18935))
  {
    int v235 = *(_DWORD *)(a1 + 228);
    if (v235 >= 1) {
      double v236 = (double)v235;
    }
    else {
      double v236 = 30.0;
    }
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v237 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v238 = AVE_GetCurrTime();
      __uint64_t v239 = AVE_Log_GetLevelStr(6);
      int v240 = *(_DWORD *)(a1 + 1884);
      int v241 = *(_DWORD *)(a1 + 192);
      if (v237)
      {
        printf("%lld %d AVE %s: FIG: PrepareMemoryUsage - br %d, thr %f\n", v238, 30, v239, v241, v236 * ((double)(v240 * *(_DWORD *)(a1 + 1880)) * 1.5) * 0.2);
        __uint64_t v242 = AVE_GetCurrTime();
        __uint64_t v255 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: PrepareMemoryUsage - br %d, thr %f", v242, 30, v255, *(_DWORD *)(a1 + 192), v236 * ((double)(*(_DWORD *)(a1 + 1884) * *(_DWORD *)(a1 + 1880)) * 1.5) * 0.2);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: PrepareMemoryUsage - br %d, thr %f", v238, 30, v239, v241, v236 * ((double)(v240 * *(_DWORD *)(a1 + 1880)) * 1.5) * 0.2);
      }
    }
    if (v236 * ((double)(*(_DWORD *)(a1 + 1884) * *(_DWORD *)(a1 + 1880)) * 1.5) * 0.2 <= (double)*(int *)(a1 + 192)) {
      *(unsigned char *)(a1 + 18935) = 0;
    }
    else {
      *(_DWORD *)(a1 + 20204) = 50;
    }
  }
  uint64_t v154 = AVE_ValidateEncoderParameters((const void **)a1);
  if (v154 && AVE_Log_CheckLevel(3u, 4))
  {
    int v243 = AVE_Log_CheckConsole(3u);
    __uint64_t v244 = AVE_GetCurrTime();
    int v245 = AVE_Log_GetLevelStr(4);
    if (v243)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_ValidateEncoderParameters failed\n", v244, 3, v245, "AVE_ManageSessionSettings", 12103, "err == noErr");
      AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ValidateEncoderParameters failed");
  }
  return v154;
}

void AVE_GetPerFrameData(uint64_t a1, CFDictionaryRef theDict, int *a3, uint64_t a4)
{
  uint64_t v346 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v20 = AVE_Log_CheckConsole(3u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_GetPerFrameData PerFrameData = NULL.\n", CurrTime, 3, LevelStr, "AVE_GetPerFrameData", 4987, "PerFrameData != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_GetPerFrameData PerFrameData = NULL.");
    }
    return;
  }
  uint64_t v8 = a1 + 184996;
  uint64_t v9 = a1 + 183437;
  uint64_t v10 = a1 + 18012;
  *((unsigned char *)a3 + 136) = *(unsigned char *)(a1 + 183437);
  *(unsigned char *)(a1 + 183437) = 0;
  a3[35] = *(_DWORD *)(a1 + 192);
  *((unsigned char *)a3 + 128) = *(unsigned char *)(a1 + 183439);
  *(unsigned char *)(a1 + 183439) = 0;
  a3[33] = *(_DWORD *)(a1 + 228);
  long long v11 = *(_OWORD *)(a1 + 1776);
  long long v12 = *(_OWORD *)(a1 + 1792);
  *((void *)a3 + 23) = *(void *)(a1 + 1808);
  *(_OWORD *)(a3 + 42) = v12;
  *(_OWORD *)(a3 + 38) = v11;
  *(unsigned char *)(a1 + 183438) = 0;
  a3[381] = *(_DWORD *)(a1 + 18776);
  *((unsigned char *)a3 + 1528) = *(_DWORD *)(a1 + 18784) == 1;
  *((unsigned char *)a3 + 1530) = *(_DWORD *)(a1 + 18788) == 4;
  *((unsigned char *)a3 + 1531) = *(unsigned char *)(a1 + 18852);
  *((unsigned char *)a3 + 1532) = *(unsigned char *)(a1 + 18853);
  *((unsigned char *)a3 + 1536) = *(unsigned char *)(a1 + 18861);
  *((unsigned char *)a3 + 1533) = *(unsigned char *)(a1 + 18854);
  a3[386] = *(_DWORD *)(a1 + 18808);
  *((unsigned char *)a3 + 1537) = *(unsigned char *)(a1 + 18012);
  int v13 = *(_DWORD *)(a1 + 184996);
  if (!v13) {
    int v13 = *(_DWORD *)(a1 + 1880);
  }
  a3[181] = v13;
  int v14 = *(_DWORD *)(a1 + 185000);
  if (!v14) {
    int v14 = *(_DWORD *)(a1 + 1884);
  }
  a3[182] = v14;
  *((unsigned char *)a3 + 1535) = 0;
  *((unsigned char *)a3 + 1529) = 0;
  if ((*(unsigned char *)(a1 + 1876) & 0xE0) == 0)
  {
    *((unsigned char *)a3 + 1538) = 0;
    goto LABEL_47;
  }
  int v15 = *(_DWORD *)(a1 + 1884);
  int v16 = *(_DWORD *)(a1 + 1880);
  if (!*(unsigned char *)(a1 + 20210))
  {
    char v23 = 1;
    goto LABEL_19;
  }
  int v17 = *((_DWORD *)AVE_DW_Get() + 332);
  if (v17 < 1)
  {
    char v23 = *(_DWORD *)(*(void *)(a4 + 144) + 72) < 255;
    goto LABEL_19;
  }
  unsigned int v18 = *(_DWORD *)(v9 + 7);
  if (v18 > 3)
  {
    int v24 = v18 % v17;
    char v23 = *(unsigned char *)(v8 + 521);
    if (!v24)
    {
      char v19 = v23 ^ 1;
      goto LABEL_21;
    }
LABEL_19:
    *((unsigned char *)a3 + 1538) = v23;
    goto LABEL_22;
  }
  char v19 = 1;
LABEL_21:
  *((unsigned char *)a3 + 1538) = v19;
  *(unsigned char *)(v8 + 521) = v19;
LABEL_22:
  uint64_t v25 = *(void *)(a4 + 144);
  double v26 = *(double *)(v25 + 56);
  double v27 = 1.0;
  if (v26 == 0.0) {
    double v26 = 1.0;
  }
  *((double *)a3 + 198) = v26;
  int v28 = *(_DWORD *)(v25 + 80);
  a3[398] = v28;
  if (*(int *)(v9 + 127) < 26 || ((int v29 = *(_DWORD *)(v25 + 64), v28 == 2) ? (v30 = v29 == 2418) : (v30 = 0), !v30))
  {
    if (v28 != 1) {
      goto LABEL_37;
    }
  }
  signed int v31 = ((v16 + 15) >> 4) * ((v15 + 15) >> 4);
  if (v31 <= 3600)
  {
    if (v26 >= 0.39) {
      goto LABEL_37;
    }
    goto LABEL_35;
  }
  if (v31 > 0x1FE0)
  {
LABEL_36:
    *((double *)a3 + 198) = v27;
    goto LABEL_37;
  }
  if (v26 <= 0.5)
  {
LABEL_35:
    double v27 = v26 + v26;
    goto LABEL_36;
  }
LABEL_37:
  if (*(_DWORD *)(v9 + 7) <= 5u) {
    *((unsigned char *)a3 + 1538) = 1;
  }
  if (AVE_Log_CheckLevel(0x1Cu, 8))
  {
    int v32 = AVE_Log_CheckConsole(0x1Cu);
    __uint64_t v33 = AVE_GetCurrTime();
    uint64_t v34 = AVE_Log_GetLevelStr(8);
    int v35 = *(_DWORD *)(v9 + 7);
    int v36 = *((unsigned __int8 *)a3 + 1538);
    if (v32)
    {
      printf("%lld %d AVE %s: MCTF F %d iBand0Strength %d NoiseFrame %d\n", v33, 28, v34, v35, *(_DWORD *)(*(void *)(a4 + 144) + 72), v36);
      __uint64_t v37 = AVE_GetCurrTime();
      __uint64_t v38 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: MCTF F %d iBand0Strength %d NoiseFrame %d", v37, 28, v38, *(_DWORD *)(v9 + 7), *(_DWORD *)(*(void *)(a4 + 144) + 72), *((unsigned __int8 *)a3 + 1538));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MCTF F %d iBand0Strength %d NoiseFrame %d", v33, 28, v34, v35, *(_DWORD *)(*(void *)(a4 + 144) + 72), v36);
    }
  }
  int v39 = *(_DWORD *)(v8 + 524);
  if (!*((unsigned char *)a3 + 1538))
  {
    if ((v39 - 1) > 4)
    {
      *(_DWORD *)(v8 + 524) = 0;
      goto LABEL_47;
    }
    *((unsigned char *)a3 + 1538) = 1;
  }
  *(_DWORD *)(v8 + 524) = v39 + 1;
LABEL_47:
  *(void *)a3 = 0;
  *(void *)(a4 + 72) = 0;
  *(void *)&long long v40 = -1;
  *((void *)&v40 + 1) = -1;
  *(_OWORD *)(a3 + 58) = v40;
  *((_WORD *)a3 + 100) = 0;
  *((unsigned char *)a3 + 1576) = 0;
  *((void *)a3 + 24) = 0;
  *((void *)a3 + 2397) = 0;
  *((unsigned char *)a3 + 212) = 0;
  a3[54] = -1;
  *((void *)a3 + 28) = 0;
  *(void *)(a3 + 51) = 0xFFFFFFF3FFFFFFFFLL;
  *(_OWORD *)(a3 + 62) = v40;
  *((void *)a3 + 87) = 0;
  *((unsigned char *)a3 + 732) = 0;
  a3[387] = -1;
  a3[176] = -1;
  *(_OWORD *)(a3 + 389) = v40;
  if (*(_DWORD *)(v10 + 388) == 2 && !*(void *)(v9 + 147))
  {
    CFDataRef Value = (const __CFData *)CFDictionaryGetValue(theDict, @"ReadFirstPassStats");
    if (Value) {
      *((void *)a3 + 2397) = CFDataGetBytePtr(Value);
    }
  }
  if (theDict)
  {
    if (AVE_Log_CheckLevel(0x1Du, 6))
    {
      int v42 = AVE_Log_CheckConsole(0x1Du);
      __uint64_t v43 = AVE_GetCurrTime();
      int v44 = AVE_Log_GetLevelStr(6);
      int v45 = *(_DWORD *)(v9 + 7);
      if (v42)
      {
        printf("%lld %d AVE %s: FIG: frameProperties is NOT NULL -> start parsing - Buffer F %d\n", v43, 29, v44, v45);
        __uint64_t v46 = AVE_GetCurrTime();
        long long v312 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: frameProperties is NOT NULL -> start parsing - Buffer F %d", v46, 29, v312, *(_DWORD *)(v9 + 7));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: frameProperties is NOT NULL -> start parsing - Buffer F %d", v43, 29, v44, v45);
      }
    }
    int v47 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44ED8]);
    if (v47 && CFEqual(v47, (CFTypeRef)*MEMORY[0x1E4F1CFD0]))
    {
      if (*(_DWORD *)(v10 + 372)) {
        int v48 = 3;
      }
      else {
        int v48 = (*(unsigned char *)(a1 + 2024) & 1) != 0 ? 1 : 2;
      }
      *a3 = v48;
      *((void *)a3 + 2) |= 0x100uLL;
      if (AVE_Log_CheckLevel(0x1Du, 6))
      {
        int v49 = AVE_Log_CheckConsole(0x1Du);
        __uint64_t v50 = AVE_GetCurrTime();
        __uint64_t v51 = AVE_Log_GetLevelStr(6);
        uint64_t v52 = *((void *)a3 + 2);
        if (v49)
        {
          printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceKeyFrame = %d %llx\n", v50, 29, v51, *a3, v52);
          __uint64_t v53 = AVE_GetCurrTime();
          int v54 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceKeyFrame = %d %llx", v53, 29, v54, *a3, *((void *)a3 + 2));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceKeyFrame = %d %llx", v50, 29, v51, *a3, v52);
        }
      }
    }
    unsigned int v55 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44EC8]);
    if (v55)
    {
      unsigned int v56 = v55;
      CFTypeID TypeID = CFDataGetTypeID();
      if (TypeID == CFGetTypeID(v56))
      {
        *((unsigned char *)a3 + 5) = 1;
        if (AVE_Log_CheckLevel(0x1Du, 6))
        {
          int v58 = AVE_Log_CheckConsole(0x1Du);
          __uint64_t v59 = AVE_GetCurrTime();
          int v60 = AVE_Log_GetLevelStr(6);
          if (v58)
          {
            printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FirstMbInRecvSlices\n", v59, 29, v60);
            __uint64_t v61 = AVE_GetCurrTime();
            int v313 = AVE_Log_GetLevelStr(6);
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FirstMbInRecvSlices", v61, 29, v313);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FirstMbInRecvSlices", v59, 29, v60);
          }
        }
      }
    }
    BOOL v62 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44EE8]);
    if (v62)
    {
      if (CFEqual(v62, (CFTypeRef)*MEMORY[0x1E4F1CFD0]))
      {
        *((unsigned char *)a3 + 5) = 1;
        if (AVE_Log_CheckLevel(0x1Du, 6))
        {
          int v63 = AVE_Log_CheckConsole(0x1Du);
          __uint64_t v64 = AVE_GetCurrTime();
          int v65 = AVE_Log_GetLevelStr(6);
          int v66 = *((unsigned __int8 *)a3 + 5);
          if (v63)
          {
            printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceRefresh = %d\n", v64, 29, v65, v66);
            __uint64_t v67 = AVE_GetCurrTime();
            uint64_t v314 = AVE_Log_GetLevelStr(6);
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceRefresh = %d", v67, 29, v314, *((unsigned __int8 *)a3 + 5));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceRefresh = %d", v64, 29, v65, v66);
          }
        }
      }
    }
    uint64_t v343 = a4;
    CFNumberRef v68 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44F00]);
    if (v68)
    {
      CFNumberRef v69 = v68;
      CFTypeID v70 = CFNumberGetTypeID();
      if (v70 == CFGetTypeID(v69))
      {
        __uint64_t v71 = a3 + 7;
        CFNumberGetValue(v69, kCFNumberSInt32Type, a3 + 7);
        if (AVE_Log_CheckLevel(0x1Du, 6))
        {
          int v72 = AVE_Log_CheckConsole(0x1Du);
          __uint64_t v73 = AVE_GetCurrTime();
          double v74 = AVE_Log_GetLevelStr(6);
          int v75 = *v71;
          if (v72)
          {
            printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_NumBitsInTransmissionBuffer = %d\n", v73, 29, v74, v75);
            __uint64_t v76 = AVE_GetCurrTime();
            int v315 = AVE_Log_GetLevelStr(6);
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_NumBitsInTransmissionBuffer = %d", v76, 29, v315, *v71);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_NumBitsInTransmissionBuffer = %d", v73, 29, v74, v75);
          }
        }
      }
    }
    CFNumberRef v77 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44EB0]);
    if (v77)
    {
      CFNumberRef v78 = v77;
      CFTypeID v79 = CFNumberGetTypeID();
      if (v79 == CFGetTypeID(v78))
      {
        int v80 = a3 + 8;
        CFNumberGetValue(v78, kCFNumberSInt32Type, a3 + 8);
        if (AVE_Log_CheckLevel(0x1Du, 6))
        {
          int v81 = AVE_Log_CheckConsole(0x1Du);
          __uint64_t v82 = AVE_GetCurrTime();
          double v83 = AVE_Log_GetLevelStr(6);
          int v84 = *v80;
          if (v81)
          {
            printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FECNumBitsAdded = %d\n", v82, 29, v83, v84);
            __uint64_t v85 = AVE_GetCurrTime();
            __uint64_t v316 = AVE_Log_GetLevelStr(6);
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FECNumBitsAdded = %d", v85, 29, v316, *v80);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FECNumBitsAdded = %d", v82, 29, v83, v84);
          }
        }
      }
    }
    CFNumberRef v86 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44F10]);
    if (v86)
    {
      CFNumberRef v87 = v86;
      CFTypeID v88 = CFNumberGetTypeID();
      if (v88 == CFGetTypeID(v87))
      {
        int v89 = a3 + 9;
        CFNumberGetValue(v87, kCFNumberSInt32Type, a3 + 9);
        if (AVE_Log_CheckLevel(0x1Du, 6))
        {
          int v90 = AVE_Log_CheckConsole(0x1Du);
          __uint64_t v91 = AVE_GetCurrTime();
          int v92 = AVE_Log_GetLevelStr(6);
          int v93 = *v89;
          if (v90)
          {
            printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_PacketHeaderBitsAdded = %d\n", v91, 29, v92, v93);
            __uint64_t v94 = AVE_GetCurrTime();
            int v317 = AVE_Log_GetLevelStr(6);
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_PacketHeaderBitsAdded = %d", v94, 29, v317, *v89);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_PacketHeaderBitsAdded = %d", v91, 29, v92, v93);
          }
        }
      }
    }
    uint64_t v341 = v9;
    uint64_t v340 = a1;
    int v342 = a3 + 389;
    __uint64_t v95 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44DC0]);
    if (!v95) {
      goto LABEL_113;
    }
    unsigned int v96 = v95;
    CFTypeID v97 = CFArrayGetTypeID();
    if (v97 != CFGetTypeID(v96)) {
      goto LABEL_113;
    }
    a3[12] = CFArrayGetCount((CFArrayRef)v96);
    if (AVE_Log_CheckLevel(0x1Du, 6))
    {
      int v98 = AVE_Log_CheckConsole(0x1Du);
      __uint64_t v99 = AVE_GetCurrTime();
      unsigned int v100 = AVE_Log_GetLevelStr(6);
      int v101 = a3[12];
      if (v98)
      {
        printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_AcknowledgedTokens, count = %d\n", v99, 29, v100, v101);
        __uint64_t v102 = AVE_GetCurrTime();
        __uint64_t v318 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_AcknowledgedTokens, count = %d", v102, 29, v318, a3[12]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_AcknowledgedTokens, count = %d", v99, 29, v100, v101);
      }
    }
    unsigned int v103 = a3[12];
    if (v103 < 0x11)
    {
      if (!v103)
      {
LABEL_113:
        CFDictionaryRef v113 = theDict;
        CFNumberRef v114 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44F50]);
        uint64_t v115 = v343;
        if (v114)
        {
          int v116 = a3 + 29;
          CFNumberGetValue(v114, kCFNumberSInt32Type, a3 + 29);
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            int v117 = AVE_Log_CheckConsole(0x1Du);
            __uint64_t v118 = AVE_GetCurrTime();
            unsigned int v119 = AVE_Log_GetLevelStr(6);
            int v120 = *v116;
            if (v117)
            {
              printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_RoundTripDelay = %d\n", v118, 29, v119, v120);
              __uint64_t v121 = AVE_GetCurrTime();
              unsigned __int16 v319 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_RoundTripDelay = %d", v121, 29, v319, *v116);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_RoundTripDelay = %d", v118, 29, v119, v120);
            }
            uint64_t v115 = v343;
          }
        }
        CFNumberRef v122 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44F18]);
        if (v122)
        {
          int v123 = a3 + 31;
          CFNumberGetValue(v122, kCFNumberSInt32Type, a3 + 31);
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            int v124 = AVE_Log_CheckConsole(0x1Du);
            __uint64_t v125 = AVE_GetCurrTime();
            int v126 = AVE_Log_GetLevelStr(6);
            int v127 = *v123;
            if (v124)
            {
              printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_PadFrameToMinimumSize = %d\n", v125, 29, v126, v127);
              __uint64_t v128 = AVE_GetCurrTime();
              unsigned int v320 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_PadFrameToMinimumSize = %d", v128, 29, v320, *v123);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_PadFrameToMinimumSize = %d", v125, 29, v126, v127);
            }
            uint64_t v115 = v343;
          }
        }
        BOOL v129 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44F40]);
        if (v129)
        {
          if (CFEqual(v129, (CFTypeRef)*MEMORY[0x1E4F1CFD0]))
          {
            *((unsigned char *)a3 + 6) = 1;
            if (AVE_Log_CheckLevel(0x1Du, 6))
            {
              int v130 = AVE_Log_CheckConsole(0x1Du);
              __uint64_t v131 = AVE_GetCurrTime();
              int v132 = AVE_Log_GetLevelStr(6);
              int v133 = *((unsigned __int8 *)a3 + 6);
              if (v130)
              {
                printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_RepeatedFrame = %d\n", v131, 29, v132, v133);
                __uint64_t v134 = AVE_GetCurrTime();
                int v321 = AVE_Log_GetLevelStr(6);
                syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_RepeatedFrame = %d", v134, 29, v321, *((unsigned __int8 *)a3 + 6));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_RepeatedFrame = %d", v131, 29, v132, v133);
              }
            }
          }
        }
        CFDataRef v135 = (const __CFData *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44F80]);
        if (v135) {
          *((void *)a3 + 24) = CFDataGetBytePtr(v135);
        }
        CFNumberRef v136 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44F88]);
        if (v136)
        {
          LODWORD(valuePtr) = 0;
          CFNumberGetValue(v136, kCFNumberSInt32Type, &valuePtr);
          int v137 = (unsigned __int16)valuePtr;
          a3[10] = WORD1(valuePtr);
          a3[11] = v137;
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            int v138 = AVE_Log_CheckConsole(0x1Du);
            __uint64_t v139 = AVE_GetCurrTime();
            unsigned int v140 = AVE_Log_GetLevelStr(6);
            int v141 = a3[11];
            if (v138)
            {
              printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_VRAUsedDimension = %d x %d\n", v139, 29, v140, a3[10], v141);
              __uint64_t v142 = AVE_GetCurrTime();
              __uint64_t v143 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_VRAUsedDimension = %d x %d", v142, 29, v143, a3[10], a3[11]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_VRAUsedDimension = %d x %d", v139, 29, v140, a3[10], v141);
            }
          }
        }
        int v144 = CFDictionaryGetValue(theDict, @"AttachDPB");
        if (v144 && CFEqual(v144, (CFTypeRef)*MEMORY[0x1E4F1CFD0]))
        {
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            int v145 = AVE_Log_CheckConsole(0x1Du);
            __uint64_t v146 = AVE_GetCurrTime();
            unsigned int v147 = AVE_Log_GetLevelStr(6);
            int v148 = *(_DWORD *)(v341 + 7);
            if (v145)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncodeFrameOptionKey_AttachDPB found (%d)\n", v146, 29, v147, v148);
              __uint64_t v149 = AVE_GetCurrTime();
              __uint64_t v322 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncodeFrameOptionKey_AttachDPB found (%d)", v149, 29, v322, *(_DWORD *)(v341 + 7));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncodeFrameOptionKey_AttachDPB found (%d)", v146, 29, v147, v148);
            }
          }
          *((unsigned char *)a3 + 200) = 1;
        }
        int v150 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44F68]);
        if (v150)
        {
          if (*(_DWORD *)(v341 + 7))
          {
            int v151 = v150;
            if (AVE_Log_CheckLevel(0x1Du, 6))
            {
              int v152 = AVE_Log_CheckConsole(0x1Du);
              __uint64_t v153 = AVE_GetCurrTime();
              uint64_t v154 = AVE_Log_GetLevelStr(6);
              int v155 = *(_DWORD *)(v341 + 7);
              if (v152)
              {
                printf("%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SetDPB found (%d)\n", v153, 29, v154, v155);
                __uint64_t v156 = AVE_GetCurrTime();
                v323 = AVE_Log_GetLevelStr(6);
                syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SetDPB found (%d)", v156, 29, v323, *(_DWORD *)(v341 + 7));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SetDPB found (%d)", v153, 29, v154, v155);
              }
              uint64_t v115 = v343;
            }
            *((unsigned char *)a3 + 201) = 1;
            *(void *)(v115 + 72) = v151;
          }
          else
          {
            if (AVE_Log_CheckLevel(0x16u, 5))
            {
              int v157 = AVE_Log_CheckConsole(0x16u);
              __uint64_t v158 = AVE_GetCurrTime();
              __uint64_t v159 = AVE_Log_GetLevelStr(5);
              if (v157)
              {
                printf("%lld %d AVE %s: FIG: frameNumber = 0 and updateDPB = true\n", v158, 22, v159);
                __uint64_t v160 = AVE_GetCurrTime();
                int v324 = AVE_Log_GetLevelStr(5);
                syslog(3, "%lld %d AVE %s: FIG: frameNumber = 0 and updateDPB = true", v160, 22, v324);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: FIG: frameNumber = 0 and updateDPB = true", v158, 22, v159);
              }
            }
            if (AVE_Log_CheckLevel(0x16u, 5))
            {
              int v161 = AVE_Log_CheckConsole(0x16u);
              __uint64_t v162 = AVE_GetCurrTime();
              __uint64_t v163 = AVE_Log_GetLevelStr(5);
              if (v161)
              {
                printf("%lld %d AVE %s: FIG: you need to encode at least one picture to prime AVE before using this feature. -> will disregard updateDPB flag\n", v162, 22, v163);
                __uint64_t v164 = AVE_GetCurrTime();
                __uint64_t v325 = AVE_Log_GetLevelStr(5);
                syslog(3, "%lld %d AVE %s: FIG: you need to encode at least one picture to prime AVE before using this feature. -> will disregard updateDPB flag", v164, 22, v325);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: FIG: you need to encode at least one picture to prime AVE before using this feature. -> will disregard updateDPB flag", v162, 22, v163);
              }
            }
          }
        }
        int v165 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44EA8]);
        if (v165 && CFEqual(v165, (CFTypeRef)*MEMORY[0x1E4F1CFD0])) {
          *((void *)a3 + 2) |= 0x8000uLL;
        }
        CFNumberRef v166 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44DF0]);
        if (v166)
        {
          LODWORD(valuePtr) = 0;
          CFNumberGetValue(v166, kCFNumberSInt32Type, &valuePtr);
          if (valuePtr) {
            *((void *)a3 + 2) |= 0x10000uLL;
          }
        }
        int v167 = CFDictionaryGetValue(theDict, @"MarkCurrentFrameAsLTR");
        if (v167)
        {
          if (CFEqual(v167, (CFTypeRef)*MEMORY[0x1E4F1CFD0]))
          {
            *((unsigned char *)a3 + 212) = 1;
            if (AVE_Log_CheckLevel(0x1Du, 6))
            {
              int v168 = AVE_Log_CheckConsole(0x1Du);
              __uint64_t v169 = AVE_GetCurrTime();
              int v170 = AVE_Log_GetLevelStr(6);
              if (v168)
              {
                printf("%lld %d AVE %s: FIG: received AVE_kVTEncoderFrameOptionKey_MarkCurrentFrameAsLTR = TRUE\n", v169, 29, v170);
                __uint64_t v171 = AVE_GetCurrTime();
                int v326 = AVE_Log_GetLevelStr(6);
                syslog(3, "%lld %d AVE %s: FIG: received AVE_kVTEncoderFrameOptionKey_MarkCurrentFrameAsLTR = TRUE", v171, 29, v326);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: FIG: received AVE_kVTEncoderFrameOptionKey_MarkCurrentFrameAsLTR = TRUE", v169, 29, v170);
              }
            }
          }
        }
        CFNumberRef v172 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"RVRADimension");
        if (v172)
        {
          LODWORD(valuePtr) = 0;
          CFNumberGetValue(v172, kCFNumberSInt32Type, &valuePtr);
          int v173 = (unsigned __int16)valuePtr;
          a3[56] = WORD1(valuePtr);
          a3[57] = v173;
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            int v174 = AVE_Log_CheckConsole(0x1Du);
            __uint64_t v175 = AVE_GetCurrTime();
            int v176 = AVE_Log_GetLevelStr(6);
            int v177 = a3[57];
            if (v174)
            {
              printf("%lld %d AVE %s: FIG: received AVE_kVTEncoderFrameOptionKey_RVRADimension = %d x %d\n", v175, 29, v176, a3[56], v177);
              __uint64_t v178 = AVE_GetCurrTime();
              double v179 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: received AVE_kVTEncoderFrameOptionKey_RVRADimension = %d x %d", v178, 29, v179, a3[56], a3[57]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: received AVE_kVTEncoderFrameOptionKey_RVRADimension = %d x %d", v175, 29, v176, a3[56], v177);
            }
          }
        }
        CFNumberRef v180 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"FrameNumForLTRToReplace");
        if (v180)
        {
          LODWORD(valuePtr) = 0;
          CFNumberGetValue(v180, kCFNumberSInt32Type, &valuePtr);
          a3[54] = valuePtr;
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            int v181 = AVE_Log_CheckConsole(0x1Du);
            __uint64_t v182 = AVE_GetCurrTime();
            int v183 = AVE_Log_GetLevelStr(6);
            int v184 = a3[54];
            if (v181)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_FrameNumForLTRToReplace found (%d)\n", v182, 29, v183, v184);
              __uint64_t v185 = AVE_GetCurrTime();
              int v327 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_FrameNumForLTRToReplace found (%d)", v185, 29, v327, a3[54]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_FrameNumForLTRToReplace found (%d)", v182, 29, v183, v184);
            }
          }
        }
        CFNumberRef v186 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"UserFrameType");
        if (v186)
        {
          LODWORD(valuePtr) = 0;
          CFNumberGetValue(v186, kCFNumberSInt32Type, &valuePtr);
          a3[51] = valuePtr;
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            int v187 = AVE_Log_CheckConsole(0x1Du);
            __uint64_t v188 = AVE_GetCurrTime();
            int v189 = AVE_Log_GetLevelStr(6);
            int v190 = a3[51];
            if (v187)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_UserFrameType found (%d)\n", v188, 29, v189, v190);
              __uint64_t v191 = AVE_GetCurrTime();
              int v328 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_UserFrameType found (%d)", v191, 29, v328, a3[51]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_UserFrameType found (%d)", v188, 29, v189, v190);
            }
          }
        }
        CFArrayRef v192 = (const __CFArray *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44F38]);
        if (v192)
        {
          CFArrayRef v193 = v192;
          CFTypeID v194 = CFArrayGetTypeID();
          if (v194 == CFGetTypeID(v193))
          {
            LODWORD(valuePtr) = 4;
            AVE_VCP_Ref_RetrieveArray(v193, a3 + 58, (int *)&valuePtr);
            *((unsigned char *)a3 + 220) = valuePtr;
            if (AVE_Log_CheckLevel(0x1Du, 6))
            {
              int v195 = AVE_Log_CheckConsole(0x1Du);
              __uint64_t v196 = AVE_GetCurrTime();
              int v197 = AVE_Log_GetLevelStr(6);
              int v198 = *((unsigned __int8 *)a3 + 220);
              if (v195)
              {
                printf("%lld %d AVE %s: FIG: received kVTEncoderFrameOptionKey_ReferenceL0, count = %d\n", v196, 29, v197, v198);
                __uint64_t v199 = AVE_GetCurrTime();
                __int16 v329 = AVE_Log_GetLevelStr(6);
                syslog(3, "%lld %d AVE %s: FIG: received kVTEncoderFrameOptionKey_ReferenceL0, count = %d", v199, 29, v329, *((unsigned __int8 *)a3 + 220));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: FIG: received kVTEncoderFrameOptionKey_ReferenceL0, count = %d", v196, 29, v197, v198);
              }
            }
            if (*((unsigned char *)a3 + 220))
            {
              unint64_t v200 = 0;
              int v201 = a3 + 58;
              do
              {
                if ((*v201 & 0x80000000) == 0 && AVE_Log_CheckLevel(0x1Eu, 6))
                {
                  int v202 = AVE_Log_CheckConsole(0x1Eu);
                  __uint64_t v203 = AVE_GetCurrTime();
                  int v204 = AVE_Log_GetLevelStr(6);
                  int v205 = *v201;
                  if (v202)
                  {
                    printf("%lld %d AVE %s: AVE Fig: userRefInfo_[%d].userRefFrameNumDriver = %d\n", v203, 30, v204, v200, v205);
                    __uint64_t v206 = AVE_GetCurrTime();
                    int v207 = AVE_Log_GetLevelStr(6);
                    syslog(3, "%lld %d AVE %s: AVE Fig: userRefInfo_[%d].userRefFrameNumDriver = %d", v206, 30, v207, v200, *v201);
                  }
                  else
                  {
                    syslog(3, "%lld %d AVE %s: AVE Fig: userRefInfo_[%d].userRefFrameNumDriver = %d", v203, 30, v204, v200, v205);
                  }
                }
                ++v200;
                v201 += 2;
              }
              while (v200 < *((unsigned __int8 *)a3 + 220));
            }
            CFDictionaryRef v113 = theDict;
          }
        }
        CFNumberRef v208 = (const __CFNumber *)CFDictionaryGetValue(v113, @"SliceTcOffsetDiv2");
        if (v208)
        {
          int v209 = a3 + 175;
          CFNumberGetValue(v208, kCFNumberSInt32Type, a3 + 175);
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            int v210 = AVE_Log_CheckConsole(0x1Du);
            __uint64_t v211 = AVE_GetCurrTime();
            int v212 = AVE_Log_GetLevelStr(6);
            int v213 = *v209;
            if (v210)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_SliceTcOffsetDiv2 found (%d)\n", v211, 29, v212, v213);
              __uint64_t v214 = AVE_GetCurrTime();
              int v330 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_SliceTcOffsetDiv2 found (%d)", v214, 29, v330, *v209);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_SliceTcOffsetDiv2 found (%d)", v211, 29, v212, v213);
            }
          }
        }
        CFNumberRef v215 = (const __CFNumber *)CFDictionaryGetValue(v113, @"SliceBetaOffsetDiv2");
        if (v215)
        {
          unsigned int v216 = a3 + 174;
          CFNumberGetValue(v215, kCFNumberSInt32Type, a3 + 174);
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            int v217 = AVE_Log_CheckConsole(0x1Du);
            __uint64_t v218 = AVE_GetCurrTime();
            unsigned int v219 = AVE_Log_GetLevelStr(6);
            int v220 = *v216;
            if (v217)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_SliceBetaOffsetDiv2 found (%d)\n", v218, 29, v219, v220);
              __uint64_t v221 = AVE_GetCurrTime();
              __uint64_t v331 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_SliceBetaOffsetDiv2 found (%d)", v221, 29, v331, *v216);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_SliceBetaOffsetDiv2 found (%d)", v218, 29, v219, v220);
            }
          }
        }
        if (*(unsigned char *)(v10 + 731)
          && a3[51] == 1
          && !AVE_WtPred_GetInfo(v113, *((unsigned __int8 *)a3 + 220), a3 + 66))
        {
          __int16 v345 = 0;
          uint64_t valuePtr = 0;
          AVE_SNPrintf((char *)&valuePtr, 10, "%d %d", v222, v223, v224, v225, v226, *(_DWORD *)(v341 + 135));
          AVE_WtPred_PrintInfo(a3 + 66, 215, 6, (uint64_t)&valuePtr, 0, v227, v228, v229);
        }
        int v230 = CFDictionaryGetValue(v113, (const void *)*MEMORY[0x1E4F44EB8]);
        if (v230)
        {
          if (CFEqual(v230, (CFTypeRef)*MEMORY[0x1E4F1CFD0]))
          {
            *((unsigned char *)a3 + 732) = 1;
            if (AVE_Log_CheckLevel(0x1Du, 6))
            {
              int v231 = AVE_Log_CheckConsole(0x1Du);
              __uint64_t v232 = AVE_GetCurrTime();
              float v233 = AVE_Log_GetLevelStr(6);
              if (v231)
              {
                printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FinalFrame = TRUE\n", v232, 29, v233);
                __uint64_t v234 = AVE_GetCurrTime();
                v332 = AVE_Log_GetLevelStr(6);
                syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FinalFrame = TRUE", v234, 29, v332);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FinalFrame = TRUE", v232, 29, v233);
              }
            }
          }
        }
        int v235 = CFDictionaryGetValue(v113, @"ResetRCState");
        if (v235)
        {
          int v236 = CFEqual(v235, (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
          *((unsigned char *)a3 + 8) = v236 != 0;
          if (v236)
          {
            int v237 = *(_DWORD *)(v340 + 196);
            if (v237 == 1)
            {
              AVE_FPS::Reset(*(AVE_FPS **)(v341 + 203));
              *a3 = 2;
              if (AVE_Log_CheckLevel(0x1Du, 6))
              {
                int v241 = AVE_Log_CheckConsole(0x1Du);
                __uint64_t v242 = AVE_GetCurrTime();
                int v243 = AVE_Log_GetLevelStr(6);
                if (v241)
                {
                  printf("%lld %d AVE %s: FIG: received AVE_kVTEncodeFrameOptionKey_ResetRCState = %d, set forceKeyFrame to IDR\n", v242, 29, v243, *((unsigned __int8 *)a3 + 8));
                  AVE_GetCurrTime();
                  AVE_Log_GetLevelStr(6);
                }
                syslog(3, "%lld %d AVE %s: FIG: received AVE_kVTEncodeFrameOptionKey_ResetRCState = %d, set forceKeyFrame to IDR");
              }
            }
            else if (v237 == 20)
            {
              *((unsigned char *)a3 + 8) = 0;
              if (AVE_Log_CheckLevel(0x1Du, 5))
              {
                int v238 = AVE_Log_CheckConsole(0x1Du);
                __uint64_t v239 = AVE_GetCurrTime();
                int v240 = AVE_Log_GetLevelStr(5);
                if (v238)
                {
                  printf("%lld %d AVE %s: AVE FIG WARNING: Cannot reset rc state for Direct RC.\n", v239, 29, v240);
                  AVE_GetCurrTime();
                  AVE_Log_GetLevelStr(5);
                }
                syslog(3, "%lld %d AVE %s: AVE FIG WARNING: Cannot reset rc state for Direct RC.");
              }
            }
            else
            {
              *((unsigned char *)a3 + 8) = 0;
              if (AVE_Log_CheckLevel(0x1Du, 5))
              {
                int v244 = AVE_Log_CheckConsole(0x1Du);
                __uint64_t v245 = AVE_GetCurrTime();
                __uint64_t v246 = AVE_Log_GetLevelStr(5);
                if (v244)
                {
                  printf("%lld %d AVE %s: AVE FIG WARNING: Cannot reset rc state if RC is NOT On.\n", v245, 29, v246);
                  AVE_GetCurrTime();
                  AVE_Log_GetLevelStr(5);
                }
                syslog(3, "%lld %d AVE %s: AVE FIG WARNING: Cannot reset rc state if RC is NOT On.");
              }
            }
          }
        }
        unsigned int v247 = a3 + 52;
        CFDictionaryRef v248 = (const __CFDictionary *)CFDictionaryGetValue(v113, @"RPSInfo");
        if (v248)
        {
          CFDictionaryRef v249 = v248;
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            int v250 = AVE_Log_CheckConsole(0x1Du);
            __uint64_t v251 = AVE_GetCurrTime();
            __uint64_t v252 = AVE_Log_GetLevelStr(6);
            if (v250)
            {
              printf("%lld %d AVE %s: FIG: AVE_kRPSInfo found \n", v251, 29, v252);
              __uint64_t v253 = AVE_GetCurrTime();
              __uint64_t v333 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kRPSInfo found ", v253, 29, v333);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kRPSInfo found ", v251, 29, v252);
            }
          }
          unsigned int v254 = a3[51];
          if (v254 <= 7 && ((1 << v254) & 0x87) != 0) {
            AVE_HEVC_Slice_ST_RPS_Retrieve(v249, (BOOL *)a3 + 736);
          }
        }
        __uint64_t v255 = (const void *)*MEMORY[0x1E4F44F70];
        CFNumberRef v256 = (const __CFNumber *)CFDictionaryGetValue(v113, (const void *)*MEMORY[0x1E4F44F70]);
        if (v256 && (CFNumberRef v257 = v256, v258 = CFNumberGetTypeID(), v258 == CFGetTypeID(v257)))
        {
          CFNumberGetValue(v257, kCFNumberSInt32Type, v247);
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            int v259 = AVE_Log_CheckConsole(0x1Du);
            __uint64_t v260 = AVE_GetCurrTime();
            __uint64_t v261 = AVE_Log_GetLevelStr(6);
            int v262 = *v247;
            if (v259)
            {
              printf("%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SliceQP found (%d)\n", v260, 29, v261, v262);
              __uint64_t v263 = AVE_GetCurrTime();
              int v334 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SliceQP found (%d)", v263, 29, v334, *v247);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SliceQP found (%d)", v260, 29, v261, v262);
            }
          }
        }
        else
        {
          CFArrayRef v264 = (const __CFArray *)CFDictionaryGetValue(v113, v255);
          if (v264)
          {
            CFArrayRef v265 = v264;
            CFTypeID v266 = CFArrayGetTypeID();
            if (v266 == CFGetTypeID(v265))
            {
              CFIndex Count = CFArrayGetCount(v265);
              LODWORD(valuePtr) = 0;
              if (Count >= 1)
              {
                CFIndex v268 = Count;
                for (CFIndex i = 0; i < v268; CFIndex i = (i + 1))
                {
                  AVE_CFArray_GetSInt32(v265, i, (int *)&valuePtr);
                  if (!i) {
                    *unsigned int v247 = valuePtr;
                  }
                  if (AVE_Log_CheckLevel(0x1Du, 6))
                  {
                    int v270 = AVE_Log_CheckConsole(0x1Du);
                    __uint64_t v271 = AVE_GetCurrTime();
                    int v272 = AVE_Log_GetLevelStr(6);
                    if (v270)
                    {
                      printf("%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SliceQP[%d] found (%d)\n", v271, 29, v272, i, valuePtr);
                      __uint64_t v273 = AVE_GetCurrTime();
                      int v274 = AVE_Log_GetLevelStr(6);
                      syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SliceQP[%d] found (%d)", v273, 29, v274, i, valuePtr);
                    }
                    else
                    {
                      syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SliceQP[%d] found (%d)", v271, 29, v272, i, valuePtr);
                    }
                  }
                }
              }
              CFDictionaryRef v113 = theDict;
            }
          }
        }
        CFNumberRef v275 = (const __CFNumber *)CFDictionaryGetValue(v113, @"POCLsb");
        if (v275)
        {
          unsigned int v276 = a3 + 387;
          CFNumberGetValue(v275, kCFNumberSInt32Type, a3 + 387);
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            int v277 = AVE_Log_CheckConsole(0x1Du);
            __uint64_t v278 = AVE_GetCurrTime();
            int v279 = AVE_Log_GetLevelStr(6);
            int v280 = *v276;
            if (v277)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_POCLsb found (%d)\n", v278, 29, v279, v280);
              __uint64_t v281 = AVE_GetCurrTime();
              int v335 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_POCLsb found (%d)", v281, 29, v335, *v276);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_POCLsb found (%d)", v278, 29, v279, v280);
            }
          }
        }
        CFNumberRef v282 = (const __CFNumber *)CFDictionaryGetValue(v113, (const void *)*MEMORY[0x1E4F44F20]);
        if (v282)
        {
          __uint64_t v283 = a3 + 176;
          CFNumberGetValue(v282, kCFNumberSInt32Type, a3 + 176);
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            int v284 = AVE_Log_CheckConsole(0x1Du);
            __uint64_t v285 = AVE_GetCurrTime();
            uint64_t v286 = AVE_Log_GetLevelStr(6);
            int v287 = *v283;
            if (v284)
            {
              printf("%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_PicParameterSetId found (%d)\n", v285, 29, v286, v287);
              __uint64_t v288 = AVE_GetCurrTime();
              unsigned int v336 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_PicParameterSetId found (%d)", v288, 29, v336, *v283);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_PicParameterSetId found (%d)", v285, 29, v286, v287);
            }
          }
        }
        int v289 = CFDictionaryGetValue(v113, @"UserSaoMap");
        if (v289)
        {
          *((unsigned char *)a3 + 1529) = CFEqual(v289, (CFTypeRef)*MEMORY[0x1E4F1CFD0]) != 0;
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            int v290 = AVE_Log_CheckConsole(0x1Du);
            __uint64_t v291 = AVE_GetCurrTime();
            uint64_t v292 = AVE_Log_GetLevelStr(6);
            int v293 = *((unsigned __int8 *)a3 + 1529);
            if (v290)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncodeFrameOptionKey_UserSaoMap found (%d)\n", v291, 29, v292, v293);
              __uint64_t v294 = AVE_GetCurrTime();
              int v337 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncodeFrameOptionKey_UserSaoMap found (%d)", v294, 29, v337, *((unsigned __int8 *)a3 + 1529));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncodeFrameOptionKey_UserSaoMap found (%d)", v291, 29, v292, v293);
            }
          }
        }
        CFNumberRef v295 = (const __CFNumber *)CFDictionaryGetValue(v113, @"NaluType");
        if (v295)
        {
          CFNumberGetValue(v295, kCFNumberSInt32Type, v342);
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            int v296 = AVE_Log_CheckConsole(0x1Du);
            __uint64_t v297 = AVE_GetCurrTime();
            uint64_t v298 = AVE_Log_GetLevelStr(6);
            int v299 = *v342;
            if (v296)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_NaluType found (%d)\n", v297, 29, v298, v299);
              __uint64_t v300 = AVE_GetCurrTime();
              __uint64_t v338 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_NaluType found (%d)", v300, 29, v338, *v342);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_NaluType found (%d)", v297, 29, v298, v299);
            }
          }
        }
        CFNumberRef v301 = (const __CFNumber *)CFDictionaryGetValue(v113, @"TemporalID");
        if (v301)
        {
          long long v302 = a3 + 390;
          CFNumberGetValue(v301, kCFNumberSInt32Type, a3 + 390);
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            int v303 = AVE_Log_CheckConsole(0x1Du);
            __uint64_t v304 = AVE_GetCurrTime();
            long long v305 = AVE_Log_GetLevelStr(6);
            int v306 = *v302;
            if (v303)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_TemporalID found (%d)\n", v304, 29, v305, v306);
              __uint64_t v307 = AVE_GetCurrTime();
              __uint64_t v339 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_TemporalID found (%d)", v307, 29, v339, *v302);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_TemporalID found (%d)", v304, 29, v305, v306);
            }
          }
        }
        long long v308 = CFDictionaryGetValue(v113, (const void *)*MEMORY[0x1E4F44F48]);
        if (v308)
        {
          if (CFEqual(v308, (CFTypeRef)*MEMORY[0x1E4F1CFD0]))
          {
            *((unsigned char *)a3 + 1576) = 1;
            if (AVE_Log_CheckLevel(0x1Du, 6))
            {
              int v309 = AVE_Log_CheckConsole(0x1Du);
              __uint64_t v310 = AVE_GetCurrTime();
              long long v311 = AVE_Log_GetLevelStr(6);
              if (v309)
              {
                printf("%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_RequestNonReferenceFrame found (%d)\n", v310, 29, v311, *((unsigned __int8 *)a3 + 1576));
                AVE_GetCurrTime();
                AVE_Log_GetLevelStr(6);
              }
              syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_RequestNonReferenceFrame found (%d)");
            }
          }
        }
        return;
      }
    }
    else
    {
      a3[12] = 16;
    }
    unint64_t v104 = 0;
    int v105 = a3 + 13;
    do
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v96, v104);
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, v105);
      if (AVE_Log_CheckLevel(0x1Du, 6))
      {
        int v107 = AVE_Log_CheckConsole(0x1Du);
        __uint64_t v108 = AVE_GetCurrTime();
        int v109 = AVE_Log_GetLevelStr(6);
        int v110 = *v105;
        if (v107)
        {
          printf("%lld %d AVE %s: FIG: index %d: token = %d\n", v108, 29, v109, v104, v110);
          __uint64_t v111 = AVE_GetCurrTime();
          int v112 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: index %d: token = %d", v111, 29, v112, v104, *v105);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: index %d: token = %d", v108, 29, v109, v104, v110);
        }
      }
      ++v104;
      ++v105;
    }
    while (v104 < a3[12]);
    goto LABEL_113;
  }
}

void AVE_UpdateSettingsBasedOnSNR(uint64_t a1, uint64_t a2, double a3)
{
  int v6 = AVE_DW_Get();
  if (*(_DWORD *)(a1 + 292)) {
    return;
  }
  __uint64_t v7 = (int *)(a1 + 183444);
  if (*(int *)(a1 + 183564) >= 3)
  {
    int v8 = v6[351];
    if (*(_DWORD *)(a1 + 18804) == 2)
    {
      if (*(unsigned char *)(a1 + 18858)) {
        BOOL v9 = 0;
      }
      else {
        BOOL v9 = v8 <= 0;
      }
      if (!v9)
      {
LABEL_11:
        unsigned int v10 = *(_DWORD *)(a2 + 140);
        if (!*(_DWORD *)(a1 + 183680)) {
          *(_DWORD *)(a1 + 183680) = v10;
        }
        double Rt = AVE_FPS::GetRt(*(AVE_FPS **)(a1 + 183640));
        double v12 = a3;
        if (*v7) {
          double v12 = (a3 + *(double *)(a1 + 183672) * 3.0) * 0.25;
        }
        *(double *)(a1 + 183672) = v12;
        if (v8 >= 1)
        {
          double v12 = (double)v8;
          *(double *)(a1 + 183672) = (double)v8;
          if (v8 <= 0x19) {
            *(unsigned char *)(a2 + 1535) = 1;
          }
        }
        unsigned int v13 = *(_DWORD *)(a1 + 1880);
        unsigned int v14 = *(_DWORD *)(a1 + 1884);
        int v15 = *(_DWORD *)(a1 + 228);
        double v16 = (double)v15;
        if (v15 >= 1) {
          double v17 = (double)v15;
        }
        else {
          double v17 = Rt;
        }
        unsigned int v18 = v14 * v13;
        BOOL v19 = (v14 * v13) >> 12 > 0x7E8;
        BOOL v20 = v17 > 120.0 || (v14 * v13) >> 12 > 0x7E8;
        if (v17 <= 90.0) {
          BOOL v19 = 0;
        }
        float v21 = (float)v13;
        float v22 = (float)v14;
        if (v18 > 0x8CA00)
        {
          double v27 = (float)(v21 * v22);
          if (v18 > 0x15F900)
          {
            if (v18 > 0x473100)
            {
              double v23 = v27 / 8294400.0;
              if (v17 <= 27.0)
              {
                double v28 = 24.0;
                double v29 = 18000000.0;
                goto LABEL_53;
              }
              if (v17 <= 45.0)
              {
                double v28 = 30.0;
                double v29 = 22500000.0;
                goto LABEL_53;
              }
              BOOL v24 = v17 > 90.0;
              double v29 = dbl_1BA78F780[v17 > 90.0];
              double v28 = 60.0;
              double v30 = 120.0;
LABEL_40:
              if (v24) {
                double v28 = v30;
              }
LABEL_53:
              unsigned int v31 = (v17 * v29 / v28);
              if (*(_DWORD *)(a1 + 18760) == 1)
              {
                BOOL v32 = *(_DWORD *)(a1 + 103136) == 2;
                double v33 = 1.1;
                if (*(_DWORD *)(a1 + 103136) != 2) {
                  double v33 = 1.0;
                }
              }
              else
              {
                BOOL v32 = 0;
                double v33 = 1.0;
              }
              double v34 = v23 * (double)v31 * v33;
              if (v20)
              {
                if (v19)
                {
                  if (v12 <= 8.0)
                  {
                    double v43 = 125.0;
                  }
                  else
                  {
                    if (v12 > 18.0)
                    {
                      if (v12 <= 22.0)
                      {
                        double v35 = v34 * 125.0;
LABEL_112:
                        double v57 = v35 / 100.0;
                        if (v57 <= (double)v10) {
                          double v57 = (double)v10;
                        }
                        unsigned int v39 = v57;
                        int v38 = 1;
                        goto LABEL_87;
                      }
                      goto LABEL_72;
                    }
                    double v43 = 150.0;
                  }
                  double v44 = v34 * v43;
                }
                else
                {
                  if (v12 > 18.0)
                  {
                    if (v12 <= 23.0)
                    {
                      double v56 = 125.0;
                      if (v32) {
                        double v56 = 150.0;
                      }
                      double v35 = v56 * v34;
                      goto LABEL_112;
                    }
LABEL_72:
                    int v38 = 0;
                    unsigned int v39 = v10;
LABEL_87:
                    if (v39 >= 2 * v10) {
                      unsigned int v39 = 2 * v10;
                    }
                    *(_DWORD *)(a2 + 140) = v39;
                    *(_DWORD *)(a2 + 144) = v38;
                    *(_DWORD *)(a1 + 183680) = v39;
                    if (AVE_Log_CheckLevel(0x30u, 6))
                    {
                      int v47 = AVE_Log_CheckConsole(0x30u);
                      __uint64_t CurrTime = AVE_GetCurrTime();
                      Leveluint64_t Str = AVE_Log_GetLevelStr(6);
                      if (v47)
                      {
                        printf("%lld %d AVE %s: FIG: F %d SNR %f filteredSNR %f instantaneousFPS %lf targetBitrate %d NewtargetBitrate %d\n", CurrTime, 48, LevelStr, *v7, a3, *(double *)(a1 + 183672), Rt, v10, *(_DWORD *)(a2 + 140));
                        AVE_GetCurrTime();
                        AVE_Log_GetLevelStr(6);
                      }
                      syslog(3, "%lld %d AVE %s: FIG: F %d SNR %f filteredSNR %f instantaneousFPS %lf targetBitrate %d NewtargetBitrate %d");
                    }
                    goto LABEL_94;
                  }
                  double v45 = 175.0;
                  if (v32) {
                    double v45 = 200.0;
                  }
                  double v44 = v45 * v34;
                }
              }
              else
              {
                LODWORD(v16) = *(_DWORD *)(a1 + 18440);
                double v36 = (double)*(unint64_t *)&v16;
                if (v12 <= 20.0)
                {
                  BOOL v40 = !v32;
                  double v41 = 175.0;
                  double v42 = 200.0;
                }
                else
                {
                  if (v12 > 23.0)
                  {
                    if (v12 <= 25.0)
                    {
                      double v37 = 125.0;
                      if (v32) {
                        double v37 = 150.0;
                      }
                      double v35 = v37 * (v34 * v36);
                      goto LABEL_112;
                    }
                    goto LABEL_72;
                  }
                  BOOL v40 = !v32;
                  double v41 = 150.0;
                  double v42 = 175.0;
                }
                if (!v40) {
                  double v41 = v42;
                }
                double v44 = v41 * (v34 * v36);
              }
              double v46 = v44 / 100.0;
              if (v46 <= (double)v10) {
                double v46 = (double)v10;
              }
              unsigned int v39 = v46;
              int v38 = 2;
              goto LABEL_87;
            }
            double v23 = v27 / 2073600.0;
            if (v17 <= 45.0)
            {
              double v28 = 30.0;
              double v29 = 7700000.0;
              goto LABEL_53;
            }
            if (v17 <= 90.0)
            {
              double v28 = 60.0;
              double v29 = 11700000.0;
              goto LABEL_53;
            }
            BOOL v24 = v17 > 180.0;
            BOOL v25 = v17 > 180.0;
            double v26 = (double *)&unk_1BA78F790;
          }
          else
          {
            double v23 = v27 / 921600.0;
            if (v17 <= 45.0)
            {
              double v28 = 30.0;
              double v29 = 4900000.0;
              goto LABEL_53;
            }
            if (v17 <= 90.0)
            {
              double v28 = 60.0;
              double v29 = 8600000.0;
              goto LABEL_53;
            }
            BOOL v24 = v17 > 180.0;
            BOOL v25 = v17 > 180.0;
            double v26 = (double *)&unk_1BA78F7A0;
          }
        }
        else
        {
          double v23 = (float)(v21 * v22) / 307200.0;
          if (v17 <= 45.0)
          {
            double v28 = 30.0;
            double v29 = 2500000.0;
            goto LABEL_53;
          }
          if (v17 <= 90.0)
          {
            double v28 = 60.0;
            double v29 = 4400000.0;
            goto LABEL_53;
          }
          BOOL v24 = v17 > 180.0;
          BOOL v25 = v17 > 180.0;
          double v26 = (double *)&unk_1BA78F7B0;
        }
        double v29 = v26[v25];
        double v28 = 120.0;
        double v30 = 240.0;
        goto LABEL_40;
      }
    }
    else if (v8 >= 1)
    {
      goto LABEL_11;
    }
  }
LABEL_94:
  if (AVE_Log_CheckLevel(0x30u, 6))
  {
    int v50 = AVE_Log_CheckConsole(0x30u);
    __uint64_t v51 = AVE_GetCurrTime();
    uint64_t v52 = AVE_Log_GetLevelStr(6);
    int v53 = *v7;
    if (v50)
    {
      printf("%lld %d AVE %s: FIG: F %d lowLightSNRThreashold %f SNR %f\n", v51, 48, v52, v53, 25.0, a3);
      __uint64_t v54 = AVE_GetCurrTime();
      unsigned int v55 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: FIG: F %d lowLightSNRThreashold %f SNR %f", v54, 48, v55, *v7, 25.0, a3);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: F %d lowLightSNRThreashold %f SNR %f", v51, 48, v52, v53, 25.0, a3);
    }
  }
  if (*(_DWORD *)(a1 + 264) && *(_DWORD *)(a1 + 18804) == 2 && *(unsigned char *)(a1 + 18851))
  {
    *(_DWORD *)(a2 + 704) = a3 <= 25.0;
    *(_DWORD *)(a2 + 1544) = *(_DWORD *)(a1 + 4 * (a3 <= 25.0) + 18808);
  }
  if ((*(_DWORD *)(a1 + 18804) == 2 && *(unsigned char *)(a1 + 18856) || *(unsigned char *)(a1 + 18857))
    && (a3 <= 25.0 || *(unsigned char *)(a1 + 18857)))
  {
    *(unsigned char *)(a2 + 1535) = 1;
  }
}

uint64_t AVE_MultipassDataFetch(uint64_t a1, void *a2)
{
  int v2 = (unsigned int *)(a1 + 183444);
  if (!*(_DWORD *)(a1 + 183444))
  {
    uint64_t v8 = a2[2];
    *(void *)(a1 + 183604) = *a2;
    *(void *)(a1 + 183612) = a2[1];
    *(void *)(a1 + 183620) = v8;
    if (AVE_Log_CheckLevel(0xD8u, 6))
    {
      int v9 = AVE_Log_CheckConsole(0xD8u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(6);
      unsigned int v12 = *v2;
      if (v9)
      {
        printf("%lld %d AVE %s: AVE_MultipassDataFetch : Frame %d\n", CurrTime, 216, LevelStr, v12);
        __uint64_t v13 = AVE_GetCurrTime();
        double v35 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: AVE_MultipassDataFetch : Frame %d", v13, 216, v35, *v2);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AVE_MultipassDataFetch : Frame %d", CurrTime, 216, LevelStr, v12);
      }
    }
    if (AVE_Log_CheckLevel(0xD8u, 6))
    {
      int v19 = AVE_Log_CheckConsole(0xD8u);
      __uint64_t v20 = AVE_GetCurrTime();
      float v21 = AVE_Log_GetLevelStr(6);
      if (v19)
      {
        printf("%lld %d AVE %s: PTS: val %lld, timeScale %d, flags 0x%x, epoch %lld\n", v20, 216, v21, *a2, *((_DWORD *)a2 + 2), *((_DWORD *)a2 + 3), a2[2]);
        __uint64_t v20 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: PTS: val %lld, timeScale %d, flags 0x%x, epoch %lld", v20);
    }
    if (VTMultiPassStorageCopyDataAtTimeStamp())
    {
      if (!AVE_Log_CheckLevel(3u, 4)) {
        return 4294954394;
      }
      int v22 = AVE_Log_CheckConsole(3u);
      __uint64_t v23 = AVE_GetCurrTime();
      BOOL v24 = AVE_Log_GetLevelStr(4);
      if (v22)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp failed. F %d PTS %lld ts %d\n", v23, 3, v24, "AVE_MultipassDataFetch", 11651, "err == noErr", *v2, *a2, *((_DWORD *)a2 + 2));
        __uint64_t v23 = AVE_GetCurrTime();
        BOOL v24 = AVE_Log_GetLevelStr(4);
        uint64_t v40 = *a2;
        uint64_t v41 = *((unsigned int *)a2 + 2);
        int v38 = "err == noErr";
        uint64_t v39 = *v2;
        uint64_t v37 = 11651;
      }
      else
      {
        uint64_t v40 = *a2;
        uint64_t v41 = *((unsigned int *)a2 + 2);
        uint64_t v39 = *v2;
        uint64_t v37 = 11651;
        int v38 = "err == noErr";
      }
      double v36 = v24;
      BOOL v25 = "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp failed. F %d PTS %lld ts %d";
    }
    else
    {
      if (!AVE_Log_CheckLevel(3u, 4)) {
        return 4294954394;
      }
      int v26 = AVE_Log_CheckConsole(3u);
      __uint64_t v23 = AVE_GetCurrTime();
      double v27 = AVE_Log_GetLevelStr(4);
      if (v26)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp data == NULL. F %d PTS %lld ts %d\n", v23, 3, v27, "AVE_MultipassDataFetch", 11652, "data != __null", *v2, *a2, *((_DWORD *)a2 + 2));
        __uint64_t v23 = AVE_GetCurrTime();
        double v27 = AVE_Log_GetLevelStr(4);
        uint64_t v40 = *a2;
        uint64_t v41 = *((unsigned int *)a2 + 2);
        int v38 = "data != __null";
        uint64_t v39 = *v2;
        uint64_t v37 = 11652;
      }
      else
      {
        uint64_t v40 = *a2;
        uint64_t v41 = *((unsigned int *)a2 + 2);
        uint64_t v39 = *v2;
        uint64_t v37 = 11652;
        int v38 = "data != __null";
      }
      double v36 = v27;
      BOOL v25 = "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp data == NULL. F %d PTS %lld ts %d";
    }
    syslog(3, v25, v23, 3, v36, "AVE_MultipassDataFetch", v37, v38, v39, v40, v41);
    return 4294954394;
  }
  if (VTMultiPassStorageGetTimeStamp())
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v3 = AVE_Log_CheckConsole(3u);
      __uint64_t v4 = AVE_GetCurrTime();
      __uint64_t v5 = AVE_Log_GetLevelStr(4);
      if (!v3)
      {
LABEL_20:
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStamp failed.");
        return 4294954394;
      }
      int v6 = 11706;
LABEL_6:
      printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStamp failed.\n", v4, 3, v5, "AVE_MultipassDataFetch", v6, "err == noErr");
      AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
      goto LABEL_20;
    }
    return 4294954394;
  }
  if ((v2[43] & 0x1D) == 1)
  {
    if (VTMultiPassStorageCopyDataAtTimeStamp())
    {
      if (!AVE_Log_CheckLevel(3u, 4)) {
        return 4294954394;
      }
      int v14 = AVE_Log_CheckConsole(3u);
      __uint64_t v15 = AVE_GetCurrTime();
      double v16 = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        int v17 = 11711;
LABEL_15:
        printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp failed.\n", v15, 3, v16, "AVE_MultipassDataFetch", v17, "err == noErr");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
        goto LABEL_45;
      }
      goto LABEL_45;
    }
    if (!AVE_Log_CheckLevel(3u, 4)) {
      return 4294954394;
    }
    int v29 = AVE_Log_CheckConsole(3u);
    __uint64_t v30 = AVE_GetCurrTime();
    unsigned int v31 = AVE_Log_GetLevelStr(4);
    if (v29)
    {
      int v32 = 11712;
LABEL_50:
      printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp d == NULL.\n", v30, 3, v31, "AVE_MultipassDataFetch", v32, "d != __null");
      AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
      goto LABEL_54;
    }
    goto LABEL_54;
  }
  if (!VTMultiPassStorageGetTimeStamp())
  {
    if ((v2[43] & 0x1D) != 1) {
      return 0;
    }
    if (VTMultiPassStorageCopyDataAtTimeStamp())
    {
      if (!AVE_Log_CheckLevel(3u, 4)) {
        return 4294954394;
      }
      int v28 = AVE_Log_CheckConsole(3u);
      __uint64_t v15 = AVE_GetCurrTime();
      double v16 = AVE_Log_GetLevelStr(4);
      if (v28)
      {
        int v17 = 11736;
        goto LABEL_15;
      }
LABEL_45:
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp failed.");
      return 4294954394;
    }
    if (!AVE_Log_CheckLevel(3u, 4)) {
      return 4294954394;
    }
    int v34 = AVE_Log_CheckConsole(3u);
    __uint64_t v30 = AVE_GetCurrTime();
    unsigned int v31 = AVE_Log_GetLevelStr(4);
    if (v34)
    {
      int v32 = 11737;
      goto LABEL_50;
    }
LABEL_54:
    syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp d == NULL.");
    return 4294954394;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    int v18 = AVE_Log_CheckConsole(3u);
    __uint64_t v4 = AVE_GetCurrTime();
    __uint64_t v5 = AVE_Log_GetLevelStr(4);
    if (!v18) {
      goto LABEL_20;
    }
    int v6 = 11731;
    goto LABEL_6;
  }
  return 4294954394;
}

void AVE_NewDefaultsBasedOnProfileUsageDefault(uint64_t a1)
{
  int v2 = (int *)(a1 + 183432);
  uint64_t v3 = a1 + 18484;
  unsigned int v4 = *((_DWORD *)AVE_DW_Get() + 312);
  if (v4 <= 3)
  {
    *int v2 = v4;
    if (v4 != 3) {
      *(unsigned char *)(v3 + 363) = 0;
    }
  }
  __uint64_t v5 = AVE_DW_Get();
  if ((v5[24] & 8) != 0) {
    *(unsigned char *)(v3 + 363) = 1;
  }
  if ((v5[32] & 8) != 0) {
    *(unsigned char *)(v3 + 363) = 0;
  }
  int v6 = (unsigned char *)(a1 + 118414);
  if (*(unsigned char *)(a1 + 216))
  {
    int v7 = *v2;
    if (*v2 < 0)
    {
      if (*(unsigned char *)(v3 + 363)) {
        int v7 = 3;
      }
      else {
        int v7 = 1;
      }
    }
    *(_DWORD *)(a1 + 1944) = v7;
    if (*(_DWORD *)(a1 + 196) != 20) {
      *(unsigned char *)(v3 + 200) = 1;
    }
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v8 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(6);
      if (v8)
      {
        printf("%lld %d AVE %s: FIG: FIGAllowFrameReordering ON -> B will be = %d (FIGNumberOfBFrames %d)\n", CurrTime, 30, LevelStr, *(_DWORD *)(a1 + 1944), *v2);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: FIGAllowFrameReordering ON -> B will be = %d (FIGNumberOfBFrames %d)");
    }
  }
  else
  {
    *(_DWORD *)(a1 + 1944) = 0;
    *(_DWORD *)(a1 + 2024) &= ~4u;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      int v11 = AVE_Log_CheckConsole(0x1Eu);
      __uint64_t v12 = AVE_GetCurrTime();
      __uint64_t v13 = AVE_Log_GetLevelStr(6);
      if (v11)
      {
        printf("%lld %d AVE %s: FIG: FIGAllowFrameReordering OFF\n", v12, 30, v13);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: FIGAllowFrameReordering OFF");
    }
  }
  *(_DWORD *)(a1 + 118408) = *(_DWORD *)(a1 + 1824) - 26;
  if (*(unsigned char *)(a1 + 1924))
  {
    unsigned char *v6 = 1;
    *(unsigned char *)(a1 + 18013) = 0;
  }
  if (*(_DWORD *)(a1 + 196) == 3)
  {
    *(unsigned char *)(v3 + 200) = 1;
    *(_DWORD *)(a1 + 1920) = 0;
    *(unsigned char *)(v3 + 268) = 0;
    if (!*(unsigned char *)(v3 + 365))
    {
      *(unsigned char *)(a1 + 244) = 0;
      unsigned char *v6 = 0;
      *(unsigned char *)(a1 + 252) = 0;
      *(unsigned char *)(a1 + 246) = 0;
    }
    *(_WORD *)(a1 + 255) = 0;
    *(unsigned char *)(a1 + 257) = 0;
    *(_DWORD *)(a1 + 260) = 0;
    *(_DWORD *)(a1 + 1768) = 0;
  }
  if (*(unsigned char *)(a1 + 118487))
  {
    *(_DWORD *)(a1 + 196) = 3;
    *(unsigned char *)(v3 + 200) = 1;
    *(_DWORD *)(a1 + 1920) = 0;
    *(unsigned char *)(v3 + 268) = 0;
    *(unsigned char *)(a1 + 244) = 0;
    *(unsigned char *)(a1 + 252) = 0;
    *(unsigned char *)(a1 + 246) = 0;
    *(_DWORD *)(a1 + 2024) &= ~4u;
    unsigned char *v6 = 0;
    *(void *)(a1 + 1816) = 0;
    int v14 = -6 * *(_DWORD *)(a1 + 103136);
    *(_DWORD *)(a1 + 1852) = v14;
    *(_DWORD *)(a1 + 1848) = v14;
    *(_DWORD *)(a1 + 1832) = v14;
    *(_DWORD *)(a1 + 1828) = v14;
    *(_DWORD *)(a1 + 1824) = v14;
    *(void *)(a1 + 1840) = *(void *)(a1 + 1848);
    *(_WORD *)(a1 + 255) = 0;
    *(_DWORD *)(a1 + 1768) = 0;
    *(_DWORD *)uint64_t v3 = 0;
  }
}

uint64_t AVE_GetTileInfo(_DWORD *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  int v5 = a3;
  CFDictionaryRef v113 = a1 + 4718;
  int v8 = a1 + 4470;
  unint64_t v9 = HIDWORD(a3);
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v10 = AVE_Log_CheckConsole(0x14u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    int v13 = v113[1];
    int v14 = v113[2];
    if (v10)
    {
      printf("%lld %d AVE %s: FIG: Pixelbuffer width %d height %d\n", CurrTime, 20, LevelStr, v13, v14);
      __uint64_t v15 = AVE_GetCurrTime();
      double v16 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: Pixelbuffer width %d height %d", v15, 20, v16, v113[1], v113[2]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: Pixelbuffer width %d height %d", CurrTime, 20, LevelStr, v13, v14);
    }
  }
  if (!*((unsigned char *)v8 + 980))
  {
    if (((v5 + 63) & 0xFFFFFFC0) != v5)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v27 = AVE_Log_CheckConsole(3u);
        __uint64_t v28 = AVE_GetCurrTime();
        int v29 = AVE_Log_GetLevelStr(4);
        if (v27)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERR: x = %d not aligned\n", v28, 3, v29, "AVE_GetTileInfo", 15864, "tileOffset.x == (((tileOffset.x) + (64) - 1) & ~((64) - 1))", v5);
          __uint64_t v28 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERR: x = %d not aligned", v28);
      }
      return 4294954394;
    }
    if (((v9 + 15) & 0xFFFFFFF0) != v9)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v24 = AVE_Log_CheckConsole(3u);
        __uint64_t v25 = AVE_GetCurrTime();
        int v26 = AVE_Log_GetLevelStr(4);
        if (v24)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERR: y = %d not aligned\n", v25, 3, v26, "AVE_GetTileInfo", 15867, "tileOffset.y == (((tileOffset.y) + (16) - 1) & ~((16) - 1))", v9);
          __uint64_t v25 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERR: y = %d not aligned", v25);
      }
      return 4294954394;
    }
  }
  int v110 = v8;
  unint64_t v17 = HIDWORD(a4);
  int v109 = a1 + 45891;
  int v18 = a4 + 15;
  unsigned int v19 = a4;
  *(_DWORD *)(a2 + 716) = v5;
  uint64_t v111 = a2;
  *(_DWORD *)(a2 + 720) = v9;
  int v112 = v5;
  LODWORD(a4) = v9;
  int v108 = v17;
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v20 = v19;
    int v21 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v22 = AVE_GetCurrTime();
    __uint64_t v23 = AVE_Log_GetLevelStr(7);
    if (v21)
    {
      unsigned int v19 = v20;
      printf("%lld %d AVE %s: FIG: Tile Offset (%d, %d), Tile Aperture (%d, %d)\n", v22, 20, v23, v5, a4, v20, v17);
      __uint64_t v22 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
    }
    else
    {
      unsigned int v19 = v20;
    }
    syslog(3, "%lld %d AVE %s: FIG: Tile Offset (%d, %d), Tile Aperture (%d, %d)", v22);
  }
  int v106 = v19;
  int v107 = a4;
  unsigned int v30 = v19 + v5;
  unsigned int v31 = v17 + a4;
  unsigned int v32 = v18 & 0xFFFFFFF0;
  unsigned int v33 = (HIDWORD(a4) + 15) & 0xFFFFFFF0;
  if (*v109 < 11)
  {
    int v34 = v8;
    double v35 = (_DWORD *)v111;
    *(void *)(v111 + 724) = *(void *)(v113 + 1);
  }
  else
  {
    int v34 = v8;
    double v35 = (_DWORD *)v111;
    if (*((unsigned char *)v110 + 980))
    {
      if (v30 >= v113[1]) {
        unsigned int v36 = v113[1];
      }
      else {
        unsigned int v36 = v30;
      }
      if (a1[470] == v32) {
        unsigned int v37 = v113[1];
      }
      else {
        unsigned int v37 = v36;
      }
      *(_DWORD *)(v111 + 724) = v37;
      if (v31 >= v113[2]) {
        unsigned int v38 = v113[2];
      }
      else {
        unsigned int v38 = v31;
      }
      if (a1[471] == v33) {
        unsigned int v39 = v113[2];
      }
      else {
        unsigned int v39 = v38;
      }
      *(_DWORD *)(v111 + 728) = v39;
      unsigned int v30 = v113[1];
      unsigned int v31 = v113[2];
    }
    else
    {
      unsigned int v40 = v113[1];
      unsigned int v41 = v113[2];
      if (v30 <= v40) {
        unsigned int v42 = v19;
      }
      else {
        unsigned int v42 = v40 - v112;
      }
      *(_DWORD *)(v111 + 724) = v42;
      unsigned int v30 = v42 + v112;
      int v43 = v41 - v107;
      if (v31 <= v41) {
        int v43 = v108;
      }
      *(_DWORD *)(v111 + 728) = v43;
      unsigned int v31 = v43 + v107;
    }
  }
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v44 = AVE_Log_CheckConsole(0x14u);
    __uint64_t v45 = AVE_GetCurrTime();
    double v46 = AVE_Log_GetLevelStr(7);
    uint64_t v47 = a1[470];
    if (v44)
    {
      printf("%lld %d AVE %s: FIG: Tile: %d %d | %u %u | %d %d | %d %d | %d %d\n\n", v45, 20, v46, v47, a1[471], v113[1], v113[2], v32, v33, v35[181], v35[182], v30, v31);
      __uint64_t v48 = AVE_GetCurrTime();
      int v49 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: Tile: %d %d | %u %u | %d %d | %d %d | %d %d\n", v48, 20, v49, a1[470]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: Tile: %d %d | %u %u | %d %d | %d %d | %d %d\n", v45, 20, v46, v47);
    }
  }
  if (!*((unsigned char *)v34 + 132))
  {
    if (*(unsigned char *)v34)
    {
      char v62 = v34[10] == 10;
      if (v30 << v62 > *v113)
      {
        if (!AVE_Log_CheckLevel(3u, 4)) {
          return 4294954394;
        }
        int v63 = AVE_Log_CheckConsole(3u);
        __uint64_t v64 = AVE_GetCurrTime();
        int v65 = AVE_Log_GetLevelStr(4);
        if (v63)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERR: x(%d) + width(%d) > buffer stride(%u)\n", v64, 3, v65, "AVE_GetTileInfo", 15990, "stride <= encoderPrivateStorage->VideoParamsDriver.pixelBuffer.Stride", v112, v106, *v113);
LABEL_65:
          __uint64_t v72 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERR: x(%d) + width(%d) > buffer stride(%u)", v72, 3);
          return 4294954394;
        }
        goto LABEL_97;
      }
      if (v31 > v113[2])
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v73 = AVE_Log_CheckConsole(3u);
          __uint64_t v74 = AVE_GetCurrTime();
          int v75 = AVE_Log_GetLevelStr(4);
          if (v73)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERR: y(%d) + height(%d) > buffer height (%u)\n", v74, 3, v75, "AVE_GetTileInfo", 15995, "height <= encoderPrivateStorage->VideoParamsDriver.pixelBuffer.Height", v107, v108, v113[2]);
            __uint64_t v74 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERR: y(%d) + height(%d) > buffer height (%u)", v74, 3);
        }
        return 4294954394;
      }
      uint64_t result = 0;
      int v80 = v112 << v62;
    }
    else
    {
      if (((2 * ((2863311531u * (unint64_t)(v30 + 2)) >> 32)) & 0xFFFFFFFC) > *v113)
      {
        if (!AVE_Log_CheckLevel(3u, 4)) {
          return 4294954394;
        }
        int v70 = AVE_Log_CheckConsole(3u);
        __uint64_t v64 = AVE_GetCurrTime();
        __uint64_t v71 = AVE_Log_GetLevelStr(4);
        if (v70)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERR: x(%d) + width(%d) > buffer stride(%u)\n", v64, 3, v71, "AVE_GetTileInfo", 15970, "stride <= encoderPrivateStorage->VideoParamsDriver.pixelBuffer.Stride", v112, v106, *v113);
          goto LABEL_65;
        }
LABEL_97:
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERR: x(%d) + width(%d) > buffer stride(%u)", v64, 3);
        return 4294954394;
      }
      if (v31 > v113[2])
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v76 = AVE_Log_CheckConsole(3u);
          __uint64_t v77 = AVE_GetCurrTime();
          CFNumberRef v78 = AVE_Log_GetLevelStr(4);
          if (v76)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERR: y(%d) + height(%d) > buffer height(%u)\n", v77, 3, v78, "AVE_GetTileInfo", 15975, "height <= encoderPrivateStorage->VideoParamsDriver.pixelBuffer.Height", v107, v108, v113[2]);
            __uint64_t v77 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERR: y(%d) + height(%d) > buffer height(%u)", v77, 3);
        }
        return 4294954394;
      }
      uint64_t result = 0;
      int v80 = (v112 / 48) << 6;
    }
    v35[177] = v80;
    v35[178] = v107;
    return result;
  }
  if (*v109 < 11)
  {
LABEL_93:
    uint64_t result = 0;
    *(void *)(v35 + 177) = 0;
    return result;
  }
  v50.i32[0] = v113[1];
  v51.i32[0] = v113[2];
  v50.i32[1] = v35[181];
  uint32x2_t v52 = (uint32x2_t)vadd_s32(v50, (int32x2_t)0x1F0000001FLL);
  v51.i32[1] = v35[182];
  uint32x2_t v53 = (uint32x2_t)vadd_s32(v51, (int32x2_t)0x1F0000001FLL);
  int8x8_t v54 = vand_s8((int8x8_t)vmin_u32((uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v53, 5uLL))), (uint32x2_t)vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v52, 5uLL))), (int8x8_t)vcgt_u32((uint32x2_t)0x4000000040, v52))), (int8x8_t)vcgt_u32(v53, (uint32x2_t)0x3F0000003FLL));
  uint64_t v55 = v54.u32[1];
  uint64_t v56 = v54.u32[0];
  if (v54.i32[0] == v54.i32[1])
  {
    double v57 = a1 + 25773;
    if (AVE_Log_CheckLevel(0x14u, 7))
    {
      int v58 = AVE_Log_CheckConsole(0x14u);
      __uint64_t v59 = AVE_GetCurrTime();
      int v60 = AVE_Log_GetLevelStr(7);
      if (v58)
      {
        printf("%lld %d AVE %s: uiPixelBufferTwiddleBitsLuma %d uiEncodedRegionTwiddleBitsLuma %d\n", v59, 20, v60, v56, v56);
        __uint64_t v61 = AVE_GetCurrTime();
        __uint64_t v95 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: uiPixelBufferTwiddleBitsLuma %d uiEncodedRegionTwiddleBitsLuma %d", v61, 20, v95, v56, v56);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: uiPixelBufferTwiddleBitsLuma %d uiEncodedRegionTwiddleBitsLuma %d", v59, 20, v60, v56, v56);
      }
    }
    v81.i32[0] = v113[1];
    v82.i32[0] = v113[2];
    v81.i32[1] = v35[181];
    uint32x2_t v83 = (uint32x2_t)vadd_s32((int32x2_t)vshl_u32(v81, (uint32x2_t)vneg_s32(vdup_n_s32((*v57 - 1) < 2))), (int32x2_t)0xF0000000FLL);
    v82.i32[1] = v35[182];
    uint32x2_t v84 = (uint32x2_t)vadd_s32((int32x2_t)vshl_u32(v82, (uint32x2_t)vneg_s32(vdup_n_s32(*v57 == 1))), (int32x2_t)0xF0000000FLL);
    int8x8_t v85 = vand_s8((int8x8_t)vmin_u32((uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v84, 4uLL))), (uint32x2_t)vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v83, 4uLL))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v83))), (int8x8_t)vcgt_u32(v84, (uint32x2_t)0x1F0000001FLL));
    uint64_t v86 = v85.u32[1];
    uint64_t v87 = v85.u32[0];
    if (v85.i32[0] == v85.i32[1])
    {
      if (AVE_Log_CheckLevel(0x14u, 7))
      {
        int v88 = AVE_Log_CheckConsole(0x14u);
        __uint64_t v89 = AVE_GetCurrTime();
        int v90 = AVE_Log_GetLevelStr(7);
        if (v88)
        {
          printf("%lld %d AVE %s: uiPixelBufferTwiddleBitsChroma %d uiEncodedRegionTwiddleBitsChroma %d\n", v89, 20, v90, v87, v87);
          __uint64_t v91 = AVE_GetCurrTime();
          unsigned int v96 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: uiPixelBufferTwiddleBitsChroma %d uiEncodedRegionTwiddleBitsChroma %d", v91, 20, v96, v87, v87);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: uiPixelBufferTwiddleBitsChroma %d uiEncodedRegionTwiddleBitsChroma %d", v89, 20, v90, v87, v87);
        }
      }
      goto LABEL_93;
    }
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v92 = AVE_Log_CheckConsole(3u);
      __uint64_t v67 = AVE_GetCurrTime();
      CFNumberRef v68 = AVE_Log_GetLevelStr(4);
      if (v92)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERR: Encoded region of compressed buffer is not within correct size. (%d ,%d)%d | (%d, %d)%d \n", v67, 3, v68, "AVE_GetTileInfo", 15955, "uiPixelBufferTwiddleBitsChroma == uiEncodedRegionTwiddleBitsChroma", v113[1], v113[2], v87, v35[181], v35[182], v86);
        __uint64_t v67 = AVE_GetCurrTime();
        CFNumberRef v69 = AVE_Log_GetLevelStr(4);
        uint64_t v104 = v35[182];
        uint64_t v105 = v86;
        uint64_t v102 = v87;
        uint64_t v103 = v35[181];
        uint64_t v100 = v113[1];
        uint64_t v101 = v113[2];
        uint64_t v98 = 15955;
        __uint64_t v99 = "uiPixelBufferTwiddleBitsChroma == uiEncodedRegionTwiddleBitsChroma";
        goto LABEL_86;
      }
      uint64_t v104 = v35[182];
      uint64_t v105 = v86;
      uint64_t v102 = v87;
      uint64_t v103 = v35[181];
      uint64_t v100 = v113[1];
      uint64_t v101 = v113[2];
      int v93 = "uiPixelBufferTwiddleBitsChroma == uiEncodedRegionTwiddleBitsChroma";
      uint64_t v94 = 15955;
      goto LABEL_95;
    }
  }
  else if (AVE_Log_CheckLevel(3u, 4))
  {
    int v66 = AVE_Log_CheckConsole(3u);
    __uint64_t v67 = AVE_GetCurrTime();
    CFNumberRef v68 = AVE_Log_GetLevelStr(4);
    if (v66)
    {
      printf("%lld %d AVE %s: %s:%d %s | AVE ERR: Encoded region of compressed buffer is not within correct size. (%d ,%d)%d | (%d, %d)%d \n", v67, 3, v68, "AVE_GetTileInfo", 15941, "uiPixelBufferTwiddleBitsLuma == uiEncodedRegionTwiddleBitsLuma", v113[1], v113[2], v56, v35[181], v35[182], v55);
      __uint64_t v67 = AVE_GetCurrTime();
      CFNumberRef v69 = AVE_Log_GetLevelStr(4);
      uint64_t v104 = v35[182];
      uint64_t v105 = v55;
      uint64_t v102 = v56;
      uint64_t v103 = v35[181];
      uint64_t v100 = v113[1];
      uint64_t v101 = v113[2];
      uint64_t v98 = 15941;
      __uint64_t v99 = "uiPixelBufferTwiddleBitsLuma == uiEncodedRegionTwiddleBitsLuma";
LABEL_86:
      CFTypeID v97 = v69;
LABEL_96:
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERR: Encoded region of compressed buffer is not within correct size. (%d ,%d)%d | (%d, %d)%d ", v67, 3, v97, "AVE_GetTileInfo", v98, v99, v100, v101, v102, v103, v104, v105);
      return 4294954394;
    }
    uint64_t v104 = v35[182];
    uint64_t v105 = v55;
    uint64_t v102 = v56;
    uint64_t v103 = v35[181];
    uint64_t v100 = v113[1];
    uint64_t v101 = v113[2];
    int v93 = "uiPixelBufferTwiddleBitsLuma == uiEncodedRegionTwiddleBitsLuma";
    uint64_t v94 = 15941;
LABEL_95:
    uint64_t v98 = v94;
    __uint64_t v99 = v93;
    CFTypeID v97 = v68;
    goto LABEL_96;
  }
  return 4294954394;
}

BOOL AVE_AddSupportedProperty(__CFDictionary *a1, const __CFString *a2, const __CFString *a3, int a4)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  unint64_t v9 = Mutable;
  if (Mutable)
  {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F45328], a2);
    int v10 = (const void **)MEMORY[0x1E4F452F8];
    if (a4) {
      int v10 = (const void **)MEMORY[0x1E4F452F0];
    }
    CFDictionarySetValue(v9, (const void *)*MEMORY[0x1E4F452E8], *v10);
    CFDictionarySetValue(v9, (const void *)*MEMORY[0x1E4F45300], (const void *)*MEMORY[0x1E4F1CFC8]);
    CFDictionarySetValue(a1, a3, v9);
    CFRelease(v9);
  }
  return v9 != 0;
}

void _GLOBAL__sub_I_AppleAVEHEVCFIGWrapper_cpp()
{
  kHEVCProfileAutoLevelTable = *MEMORY[0x1E4F452D0];
  dword_1EB9F41F0 = 1;
  qword_1EB9F41F8 = *MEMORY[0x1E4F452A8];
  dword_1EB9F4200 = 2;
  qword_1EB9F4208 = *MEMORY[0x1E4F452C0];
  dword_1EB9F4210 = 1308;
  qword_1EB9F4218 = *MEMORY[0x1E4F452B8];
  dword_1EB9F4220 = 1310;
  qword_1EB9F4228 = *MEMORY[0x1E4F452B0];
  dword_1EB9F4230 = 1210;
  qword_1EB9F4238 = *MEMORY[0x1E4F452E0];
  dword_1EB9F4240 = 1008;
  qword_1EB9F4248 = *MEMORY[0x1E4F452D8];
  dword_1EB9F4250 = 1010;
  qword_1EB9F4258 = *MEMORY[0x1E4F452C8];
  dword_1EB9F4260 = 3;
}

void H9EncoderRegister()
{
  int v0 = AVE_UC_Verify();
  if (!v0)
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFDictionaryRef v2 = Mutable;
      uint64_t v3 = (const void *)*MEMORY[0x1E4F1CFD0];
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F45680], (const void *)*MEMORY[0x1E4F1CFD0]);
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v2);
      if (MutableCopy)
      {
        int v5 = MutableCopy;
        CFDictionaryAddValue(v2, @"CMClassImplementationID", @"com.apple.videotoolbox.videoencoder.hevc");
        int v0 = VTRegisterVideoEncoderWithInfo();
        if (!v0)
        {
          CFDictionaryAddValue(v5, @"CMClassImplementationID", @"com.apple.videotoolbox.videoencoder.ohvc");
          CFDictionaryAddValue(v5, (const void *)*MEMORY[0x1E4F45678], v3);
          int v0 = VTRegisterVideoEncoderWithInfo();
        }
        CFRelease(v2);
      }
      else
      {
        int v0 = 0;
        int v5 = v2;
      }
      CFRelease(v5);
    }
    else
    {
      int v0 = 0;
    }
  }
  if (AVE_Log_CheckLevel(2u, 5))
  {
    int v6 = AVE_Log_CheckConsole(2u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(5);
    if (v6)
    {
      printf("%lld %d AVE %s: Register HEVC video encoder of AVE %d\n", CurrTime, 2, LevelStr, v0);
      __uint64_t v9 = AVE_GetCurrTime();
      int v10 = AVE_Log_GetLevelStr(5);
      syslog(3, "%lld %d AVE %s: Register HEVC video encoder of AVE %d", v9, 2, v10, v0);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Register HEVC video encoder of AVE %d", CurrTime, 2, LevelStr, v0);
    }
  }
}

uint64_t AVE_MCTF_Validate(int a1, uint64_t a2, int a3, int a4, int a5)
{
  return AVE_PixelFmt_CheckSupportedType(a1, a2, a3 | 0xE0u, a4, a5);
}

uint64_t AVE_MCTF_Print(unsigned int *a1, unsigned int *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  memset(v44, 0, sizeof(v44));
  AVE_ComposePosStr(a4, a5, (char *)v44, 32, a5, a6, a7, a8);
  int v11 = (char)a3;
  if (AVE_Log_CheckLevel(a2, (char)a3))
  {
    int v12 = AVE_Log_CheckConsole(a2);
    int v13 = v12;
    if (a3 < 0)
    {
      if (!v12 || (-a3 & 0x20) != 0)
      {
        syslog(3, "MCTF %s | %p %d | %d %d %d - %d %d %d - %d %d %d %d %d %d %d %d %d", v44, a1, *a1, a1[1], a1[2], a1[3]);
        return 0;
      }
      int v20 = v44;
      printf("MCTF %s | %p %d | %d %d %d - %d %d %d - %d %d %d %d %d %d %d %d %d\n", (const char *)v44, a1, *a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15]);
      uint64_t v39 = a1[14];
      uint64_t v40 = a1[15];
      uint64_t v37 = a1[12];
      uint64_t v38 = a1[13];
      uint64_t v35 = a1[10];
      uint64_t v36 = a1[11];
      uint64_t v33 = a1[8];
      uint64_t v34 = a1[9];
      uint64_t v31 = a1[6];
      uint64_t v32 = a1[7];
      uint64_t v29 = a1[4];
      uint64_t v30 = a1[5];
      int v27 = (unsigned int *)a1[2];
      uint64_t v28 = a1[3];
      __uint64_t v25 = (const char *)*a1;
      int v26 = (_OWORD *)a1[1];
      __uint64_t v22 = "MCTF %s | %p %d | %d %d %d - %d %d %d - %d %d %d %d %d %d %d %d %d";
      int v24 = a1;
    }
    else
    {
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr((char)a3);
      uint64_t v16 = *a1;
      uint64_t v17 = a1[1];
      uint64_t v18 = a1[2];
      if ((a3 & 0x20) != 0 || !v13)
      {
        syslog(3, "%lld %d AVE %s: MCTF %s | %p %d | %d %d %d - %d %d %d - %d %d %d %d %d %d %d %d %d", CurrTime, a2, LevelStr, v44, a1, v16, v17, v18);
        return 0;
      }
      unsigned int v19 = a2;
      printf("%lld %d AVE %s: MCTF %s | %p %d | %d %d %d - %d %d %d - %d %d %d %d %d %d %d %d %d\n", CurrTime, a2, LevelStr, (const char *)v44, a1, v16, v17, v18, a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12],
        a1[13],
        a1[14],
        a1[15]);
      int v20 = (_OWORD *)AVE_GetCurrTime();
      int v21 = AVE_Log_GetLevelStr(v11);
      uint64_t v42 = a1[14];
      uint64_t v43 = a1[15];
      uint64_t v40 = a1[12];
      uint64_t v41 = a1[13];
      uint64_t v38 = a1[10];
      uint64_t v39 = a1[11];
      uint64_t v36 = a1[8];
      uint64_t v37 = a1[9];
      uint64_t v34 = a1[6];
      uint64_t v35 = a1[7];
      uint64_t v32 = a1[4];
      uint64_t v33 = a1[5];
      uint64_t v30 = a1[2];
      uint64_t v31 = a1[3];
      uint64_t v28 = *a1;
      uint64_t v29 = a1[1];
      int v26 = v44;
      int v27 = a1;
      int v24 = v19;
      __uint64_t v25 = v21;
      __uint64_t v22 = "%lld %d AVE %s: MCTF %s | %p %d | %d %d %d - %d %d %d - %d %d %d %d %d %d %d %d %d";
    }
    syslog(3, v22, v20, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39,
      v40,
      v41,
      v42,
      v43);
  }
  return 0;
}

uint64_t AVE_MCTF_Retrieve(const __CFArray *a1, _OWORD *a2)
{
  v37[0] = 0;
  __int16 v36 = 0;
  char v35 = 0;
  int Count = CFArrayGetCount(a1);
  if (a1 && a2)
  {
    int v5 = 0;
    int v6 = Count >> 1;
    a2[6] = 0u;
    a2[7] = 0u;
    a2[4] = 0u;
    a2[5] = 0u;
    a2[3] = 0u;
    char v7 = 1;
    *a2 = 0u;
    a2[1] = 0u;
    a2[2] = 0u;
    int v8 = (int *)(a2 + 2);
    do
    {
      char v9 = v7;
      AVE_CFArray_GetChar(a1, (v5 * v6), &v35);
      *(v8 - 8) = v35;
      AVE_CFArray_GetChar(a1, (v5 * v6 + 1), &v35);
      *(v8 - 7) = v35;
      AVE_CFArray_GetChar(a1, (v5 * v6 + 2), &v35);
      *(v8 - 6) = v35;
      AVE_CFArray_GetChar(a1, (v5 * v6 + 3), &v35);
      *(v8 - 5) = v35;
      AVE_CFArray_GetChar(a1, (v5 * v6 + 4), &v35);
      *(v8 - 4) = v35;
      AVE_CFArray_GetChar(a1, (v5 * v6 + 5), &v35);
      *(v8 - 3) = v35;
      AVE_CFArray_GetChar(a1, (v5 * v6 + 6), &v35);
      *(v8 - 2) = v35;
      AVE_CFArray_GetChar(a1, (v5 * v6 + 7), &v35);
      *(v8 - 1) = v35;
      AVE_CFArray_GetSInt16(a1, (v5 * v6 + 8), &v36);
      *int v8 = v36;
      AVE_CFArray_GetChar(a1, (v5 * v6 + 9), &v35);
      v8[1] = v35;
      AVE_CFArray_GetChar(a1, (v5 * v6 + 10), &v35);
      v8[2] = v35;
      AVE_CFArray_GetChar(a1, (v5 * v6 + 11), &v35);
      v8[3] = v35;
      AVE_CFArray_GetChar(a1, (v5 * v6 + 12), &v35);
      v8[4] = v35;
      AVE_CFArray_GetSInt32(a1, (v5 * v6 + 13), v37);
      v8[5] = v37[0];
      AVE_CFArray_GetSInt32(a1, (v5 * v6 + 14), v37);
      v8[6] = v37[0];
      Suint64_t Int32 = AVE_CFArray_GetSInt32(a1, (v5 * v6 + 15), v37);
      v8[7] = v37[0];
      if (AVE_Log_CheckLevel(0x1Cu, 7))
      {
        int v11 = AVE_Log_CheckConsole(0x1Cu);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(7);
        int v14 = *(v8 - 8);
        int v15 = *(v8 - 7);
        int v16 = *(v8 - 6);
        int v17 = *(v8 - 5);
        int v18 = *(v8 - 4);
        int v19 = *(v8 - 3);
        int v20 = *(v8 - 2);
        int v21 = *(v8 - 1);
        int v22 = *v8;
        int v23 = v8[1];
        int v24 = v8[2];
        int v25 = v8[3];
        int v26 = v8[4];
        int v27 = v8[5];
        int v28 = v8[7];
        if (v11)
        {
          printf("%lld %d AVE %s: MCTF Pop [%d]: %d | %d %d %d - %d %d %d - %d %d %d %d %d %d %d %d %d\n", CurrTime, 28, LevelStr, v5, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27,
            v8[6],
            v28);
          __uint64_t v29 = AVE_GetCurrTime();
          uint64_t v30 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: MCTF Pop [%d]: %d | %d %d %d - %d %d %d - %d %d %d %d %d %d %d %d %d", v29, 28, v30, v5, *(v8 - 8), *(v8 - 7), *(v8 - 6), *(v8 - 5), *(v8 - 4), *(v8 - 3), *(v8 - 2), *(v8 - 1), *v8, v8[1], v8[2], v8[3], v8[4],
            v8[5],
            v8[6],
            v8[7]);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: MCTF Pop [%d]: %d | %d %d %d - %d %d %d - %d %d %d %d %d %d %d %d %d", CurrTime, 28, LevelStr, v5, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26,
            v27,
            v8[6],
            v28);
        }
      }
      char v7 = 0;
      v8 += 16;
      int v5 = 1;
    }
    while ((v9 & 1) != 0);
  }
  else
  {
    if (AVE_Log_CheckLevel(0x1Cu, 4))
    {
      int v31 = AVE_Log_CheckConsole(0x1Cu);
      __uint64_t v32 = AVE_GetCurrTime();
      uint64_t v33 = AVE_Log_GetLevelStr(4);
      if (v31)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p\n", v32, 28, v33, "AVE_MCTF_Retrieve", 81, "pArray != __null && pMCTF != __null", a1, a2);
        __uint64_t v32 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p", v32, 28);
    }
    return 4294966295;
  }
  return SInt32;
}

uint64_t H264VideoEncoderFrameReceiver::MakeCurrentThreadTimeConstraintThread(H264VideoEncoderFrameReceiver *this)
{
  double v1 = 33.0;
  if (*((int *)this + 17475) > 59) {
    double v1 = 15.0;
  }
  double v13 = v1;
  mach_timebase_info(&info);
  LODWORD(v3) = info.numer;
  LODWORD(v2) = info.denom;
  double v4 = (double)v2 / (double)v3 * 1000000.0;
  __asm { FMOV            V1.2D, #3.0 }
  _Q1.f64[0] = v13;
  *(int32x2_t *)policy_mach_timebase_info info = vmovn_s64((int64x2_t)vcvtq_u64_f64(vmulq_n_f64(_Q1, v4)));
  integer_t v16 = policy_info[0];
  int v17 = 1;
  int v10 = pthread_self();
  thread_act_t v11 = pthread_mach_thread_np(v10);
  return thread_policy_set(v11, 2u, policy_info, 4u);
}

uint64_t H264VideoEncoderFrameReceiver::H264VideoEncoderFrameReceiver(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 245280;
  uint64_t v5 = a1 + 239336;
  uint64_t v6 = a1 + 51224;
  AVE_MultiPass::AVE_MultiPass((AVE_MultiPass *)(a1 + 8));
  *(_OWORD *)(v6 + 96) = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 112) = *(_OWORD *)(a2 + 16);
  *(void *)(v6 + 128) = *(void *)(a2 + 32);
  *(void *)(v6 + 80) = *(void *)(a2 + 72);
  *(unsigned char *)(v5 + 9) = *(unsigned char *)(a2 + 208);
  *(_DWORD *)(v5 + 16) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(v5 + 12) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(v5 + 20) = *(_DWORD *)(a2 + 220);
  *(void *)uint64_t v5 = *(void *)(a2 + 224);
  *(unsigned char *)uint64_t v4 = *(unsigned char *)(a2 + 232);
  long long v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 51272) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 51288) = v7;
  int v8 = *(void **)(a2 + 80);
  if (v8) {
    *(void *)(v6 + 144) = *v8;
  }
  char v9 = *(const void **)(a2 + 88);
  if (v9) {
    memcpy((void *)(a1 + 51376), v9, 0x4178uLL);
  }
  int v10 = *(const void **)(a2 + 96);
  if (v10) {
    memcpy((void *)(a1 + 68136), v10, 0x6C0uLL);
  }
  thread_act_t v11 = *(const void **)(a2 + 104);
  if (v11) {
    memcpy((void *)(a1 + 69864), v11, 0x690uLL);
  }
  *(_OWORD *)(v6 + 20320) = *(_OWORD *)(a2 + 112);
  int v12 = *(_DWORD *)(*(void *)(a2 + 96) + 120);
  if (v12 == 1)
  {
    uint64_t v31 = v5;
    uint64_t v32 = v4;
    int v18 = *(const void **)(a2 + 152);
    if (v18) {
      memcpy((void *)(a1 + 76272), v18, 0x140E8uLL);
    }
    uint64_t v19 = 0;
    char v20 = 1;
    do
    {
      char v21 = v20;
      uint64_t v22 = a2 + 8 * v19;
      int v23 = *(const void **)(v22 + 160);
      if (v23) {
        memcpy((void *)(a1 + 7924 * v19 + 158424), v23, 0x1EF4uLL);
      }
      int v24 = *(const void **)(v22 + 176);
      if (v24) {
        memcpy((void *)(a1 + 9636 * v19 + 174272), v24, 0x25A4uLL);
      }
      char v20 = 0;
      uint64_t v19 = 1;
    }
    while ((v21 & 1) != 0);
    int v25 = *(const void **)(a2 + 192);
    if (v25) {
      memcpy((void *)(a1 + 193544), v25, 0x54F8uLL);
    }
    int v15 = *(const void **)(a2 + 200);
    uint64_t v5 = v31;
    uint64_t v4 = v32;
    if (v15)
    {
      integer_t v16 = (void *)(a1 + 215296);
      size_t v17 = 24024;
      goto LABEL_29;
    }
  }
  else if (v12)
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      if (AVE_Log_CheckConsole(0x2Eu))
      {
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        printf("%lld %d AVE %s: codectype not recognized! %d\n", CurrTime, 46, LevelStr, *(_DWORD *)(*(void *)(a2 + 96) + 120));
      }
      __uint64_t v28 = AVE_GetCurrTime();
      __uint64_t v29 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: codectype not recognized! %d", v28, 46, v29, *(_DWORD *)(*(void *)(a2 + 96) + 120));
    }
  }
  else
  {
    double v13 = *(const void **)(a2 + 128);
    if (v13) {
      memcpy((void *)(a1 + 71560), v13, 0x6B8uLL);
    }
    int v14 = *(const void **)(a2 + 136);
    if (v14) {
      memcpy((void *)(a1 + 73280), v14, 0x184uLL);
    }
    int v15 = *(const void **)(a2 + 144);
    if (v15)
    {
      integer_t v16 = (void *)(a1 + 73668);
      size_t v17 = 2604;
LABEL_29:
      memcpy(v16, v15, v17);
    }
  }
  *(void *)(a1 + 51100) = 0;
  *(_OWORD *)(a1 + 51084) = 0u;
  *(_OWORD *)(a1 + 51112) = 0u;
  *(_DWORD *)uint64_t v6 = -1;
  *(unsigned char *)(v6 + 4) = 0;
  *(unsigned char *)a1 = 0;
  *(void *)(v6 + 136) = 0;
  *(void *)(v6 + 40) = 0;
  *(unsigned char *)(a1 + 25784) = 0;
  *(unsigned char *)(v5 + 10) = 0;
  *(void *)(v4 + 8) = 0;
  *(_OWORD *)(a1 + 25792) = 0u;
  *(_OWORD *)(a1 + 25808) = 0u;
  *(_OWORD *)(a1 + 25824) = 0u;
  *(_OWORD *)(a1 + 25840) = 0u;
  *(_OWORD *)(a1 + 25856) = 0u;
  *(_OWORD *)(a1 + 25872) = 0u;
  *(_OWORD *)(a1 + 25888) = 0u;
  *(_OWORD *)(a1 + 25904) = 0u;
  *(_OWORD *)(a1 + 25920) = 0u;
  *(_OWORD *)(a1 + 25936) = 0u;
  *(_OWORD *)(a1 + 25952) = 0u;
  *(_OWORD *)(a1 + 25968) = 0u;
  *(_OWORD *)(a1 + 25984) = 0u;
  *(_OWORD *)(a1 + 26000) = 0u;
  *(_OWORD *)(a1 + 26016) = 0u;
  *(_OWORD *)(a1 + 26032) = 0u;
  *(_OWORD *)(a1 + 26048) = 0u;
  *(_OWORD *)(a1 + 26064) = 0u;
  *(_OWORD *)(a1 + 26080) = 0u;
  *(_OWORD *)(a1 + 26096) = 0u;
  *(_OWORD *)(a1 + 26112) = 0u;
  *(_OWORD *)(a1 + 26128) = 0u;
  *(_OWORD *)(a1 + 26144) = 0u;
  *(_OWORD *)(a1 + 26160) = 0u;
  *(_OWORD *)(a1 + 26176) = 0u;
  *(_OWORD *)(a1 + 26192) = 0u;
  *(_OWORD *)(a1 + 26208) = 0u;
  *(_OWORD *)(a1 + 26224) = 0u;
  *(_OWORD *)(a1 + 26240) = 0u;
  *(_OWORD *)(a1 + 26256) = 0u;
  *(_OWORD *)(a1 + 26920) = 0u;
  *(_OWORD *)(a1 + 26936) = 0u;
  *(_OWORD *)(a1 + 26888) = 0u;
  *(_OWORD *)(a1 + 26904) = 0u;
  *(_OWORD *)(a1 + 26856) = 0u;
  *(_OWORD *)(a1 + 26872) = 0u;
  *(_OWORD *)(a1 + 26824) = 0u;
  *(_OWORD *)(a1 + 26840) = 0u;
  *(_OWORD *)(a1 + 26792) = 0u;
  *(_OWORD *)(a1 + 26808) = 0u;
  *(_OWORD *)(a1 + 26760) = 0u;
  *(_OWORD *)(a1 + 26776) = 0u;
  *(_OWORD *)(a1 + 26728) = 0u;
  *(_OWORD *)(a1 + 26744) = 0u;
  *(_OWORD *)(a1 + 26696) = 0u;
  *(_OWORD *)(a1 + 26712) = 0u;
  *(_OWORD *)(a1 + 26664) = 0u;
  *(_OWORD *)(a1 + 26680) = 0u;
  *(_OWORD *)(a1 + 26632) = 0u;
  *(_OWORD *)(a1 + 26648) = 0u;
  *(_OWORD *)(a1 + 26600) = 0u;
  *(_OWORD *)(a1 + 26616) = 0u;
  *(_OWORD *)(a1 + 26568) = 0u;
  *(_OWORD *)(a1 + 26584) = 0u;
  *(_OWORD *)(a1 + 26536) = 0u;
  *(_OWORD *)(a1 + 26552) = 0u;
  *(_OWORD *)(a1 + 26504) = 0u;
  *(_OWORD *)(a1 + 26520) = 0u;
  *(_OWORD *)(a1 + 26472) = 0u;
  *(_OWORD *)(a1 + 26488) = 0u;
  bzero((void *)(a1 + 27072), 0x3C0uLL);
  *(_OWORD *)(a1 + 51240) = 0u;
  *(_OWORD *)(a1 + 245264) = 0u;
  return a1;
}

void sub_1BA7466EC(_Unwind_Exception *a1)
{
  AVE_MultiPass::~AVE_MultiPass(v1);
  _Unwind_Resume(a1);
}

void AVE_MultiPass::~AVE_MultiPass(AVE_MultiPass *this)
{
  std::deque<_S_AVE_MultiPassStats *>::~deque[abi:ne180100]((void *)this + 3179);
  std::deque<_S_AVE_MultiPassStats *>::~deque[abi:ne180100]((void *)this + 3173);
  unint64_t v2 = (void *)*((void *)this + 3169);
  if (v2)
  {
    *((void *)this + 3170) = v2;
    operator delete(v2);
  }
}

uint64_t H264VideoEncoderFrameReceiver::UpdateSettings(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = a1 + 51304;
    *(_OWORD *)(a1 + 51320) = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 51336) = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 51352) = *(void *)(a2 + 32);
    *(void *)(a1 + 51304) = *(void *)(a2 + 72);
    *(unsigned char *)(a1 + 239345) = *(unsigned char *)(a2 + 208);
    *(_DWORD *)(a1 + 239352) = *(_DWORD *)(a2 + 216);
    *(_DWORD *)(a1 + 239348) = *(_DWORD *)(a2 + 212);
    *(_DWORD *)(a1 + 239356) = *(_DWORD *)(a2 + 220);
    *(void *)(a1 + 239336) = *(void *)(a2 + 224);
    *(unsigned char *)(a1 + 245280) = *(unsigned char *)(a2 + 232);
    *(void *)(a1 + 245288) = *(void *)(a2 + 240);
    long long v5 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 51272) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 51288) = v5;
    uint64_t v6 = *(void **)(a2 + 80);
    if (v6) {
      *(void *)(a1 + 51368) = *v6;
    }
    long long v7 = *(const void **)(a2 + 88);
    if (v7) {
      memcpy((void *)(a1 + 51376), v7, 0x4178uLL);
    }
    int v8 = *(const void **)(a2 + 96);
    if (v8) {
      memcpy((void *)(a1 + 68136), v8, 0x6C0uLL);
    }
    char v9 = *(const void **)(a2 + 104);
    if (v9) {
      memcpy((void *)(a1 + 69864), v9, 0x690uLL);
    }
    *(_OWORD *)(v4 + 20240) = *(_OWORD *)(a2 + 112);
    int v10 = *(_DWORD *)(*(void *)(a2 + 96) + 120);
    if (v10 == 1)
    {
      char v21 = *(const void **)(a2 + 152);
      if (v21) {
        memcpy((void *)(a1 + 76272), v21, 0x140E8uLL);
      }
      uint64_t v22 = 0;
      char v23 = 1;
      do
      {
        char v24 = v23;
        uint64_t v25 = a2 + 8 * v22;
        int v26 = *(const void **)(v25 + 160);
        if (v26) {
          memcpy((void *)(a1 + 7924 * v22 + 158424), v26, 0x1EF4uLL);
        }
        int v27 = *(const void **)(v25 + 176);
        if (v27) {
          memcpy((void *)(a1 + 9636 * v22 + 174272), v27, 0x25A4uLL);
        }
        char v23 = 0;
        uint64_t v22 = 1;
      }
      while ((v24 & 1) != 0);
      __uint64_t v28 = *(const void **)(a2 + 192);
      if (v28) {
        memcpy((void *)(a1 + 193544), v28, 0x54F8uLL);
      }
      double v13 = *(const void **)(a2 + 200);
      if (!v13) {
        return 0;
      }
      int v14 = (void *)(a1 + 215296);
      size_t v15 = 24024;
    }
    else
    {
      if (v10)
      {
        if (AVE_Log_CheckLevel(0x2Eu, 4))
        {
          int v29 = AVE_Log_CheckConsole(0x2Eu);
          __uint64_t CurrTime = AVE_GetCurrTime();
          Leveluint64_t Str = AVE_Log_GetLevelStr(4);
          int v32 = *(_DWORD *)(*(void *)(a2 + 96) + 120);
          if (v29)
          {
            printf("%lld %d AVE %s: codectype not recognized! %d\n", CurrTime, 46, LevelStr, v32);
            __uint64_t v33 = AVE_GetCurrTime();
            __int16 v36 = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: codectype not recognized! %d", v33, 46, v36, *(_DWORD *)(*(void *)(a2 + 96) + 120));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: codectype not recognized! %d", CurrTime, 46, LevelStr, v32);
          }
        }
        return 0;
      }
      thread_act_t v11 = *(const void **)(a2 + 128);
      if (v11) {
        memcpy((void *)(a1 + 71560), v11, 0x6B8uLL);
      }
      int v12 = *(const void **)(a2 + 136);
      if (v12) {
        memcpy((void *)(a1 + 73280), v12, 0x184uLL);
      }
      double v13 = *(const void **)(a2 + 144);
      if (!v13) {
        return 0;
      }
      int v14 = (void *)(a1 + 73668);
      size_t v15 = 2604;
    }
    memcpy(v14, v13, v15);
    return 0;
  }
  uint64_t v16 = 3758097084;
  if (AVE_Log_CheckLevel(3u, 4))
  {
    int v17 = AVE_Log_CheckConsole(3u);
    __uint64_t v18 = AVE_GetCurrTime();
    uint64_t v19 = AVE_Log_GetLevelStr(4);
    if (v17)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: UpdateSettings failed.\n", v18, 3, v19, "UpdateSettings", 307, "interface != __null");
      __uint64_t v20 = AVE_GetCurrTime();
      char v35 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: UpdateSettings failed.", v20, 3, v35, "UpdateSettings", 307, "interface != __null");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: UpdateSettings failed.", v18, 3, v19, "UpdateSettings", 307, "interface != __null");
    }
  }
  return v16;
}

void *H264VideoEncoderFrameReceiver::GetMpGlobalRcInfo(uint64_t a1, void *__dst)
{
  return memcpy(__dst, (const void *)(a1 + 25504), 0x108uLL);
}

uint64_t H264VideoEncoderFrameReceiver::SetMultiPassOptions(uint64_t this, int a2)
{
  *(_DWORD *)(this + 25776) = a2;
  return this;
}

void H264VideoEncoderFrameReceiver::~H264VideoEncoderFrameReceiver(H264VideoEncoderFrameReceiver *this)
{
  unint64_t v2 = (char *)this + 51112;
  uint64_t v3 = -240;
  do
  {
    uint64_t v4 = (char *)this + v3;
    long long v5 = *(__IOSurface **)((char *)this + v3 + 26272);
    if (v5)
    {
      IOSurfaceUnlock(v5, 0, 0);
      CFRelease(*((CFTypeRef *)v4 + 3284));
      *((void *)v4 + 3284) = 0;
    }
    uint64_t v6 = (__IOSurface *)*((void *)v4 + 3369);
    if (v6)
    {
      IOSurfaceUnlock(v6, 0, 0);
      CFRelease(*((CFTypeRef *)v4 + 3369));
      *((void *)v4 + 3369) = 0;
    }
    long long v7 = (char *)this + v3;
    int v8 = *(__IOSurface **)((char *)this + v3 + 27552);
    if (v8)
    {
      IOSurfaceUnlock(v8, 0, 0);
      CFRelease(*((CFTypeRef *)v7 + 3444));
      *((void *)v7 + 3444) = 0;
    }
    char v9 = (__IOSurface *)*((void *)v7 + 3504);
    if (v9)
    {
      IOSurfaceUnlock(v9, 0, 0);
      CFRelease(*((CFTypeRef *)v7 + 3504));
      *((void *)v7 + 3504) = 0;
    }
    v3 += 8;
  }
  while (v3);
  if (*((void *)v2 + 31))
  {
    FigFormatDescriptionRelease();
    *((void *)v2 + 31) = 0;
  }
  if (*(void *)v2)
  {
    free(*(void **)v2);
    *(void *)unint64_t v2 = 0;
    *((_DWORD *)v2 + 2) = 0;
  }
  std::deque<_S_AVE_MultiPassStats *>::~deque[abi:ne180100]((void *)this + 3180);
  std::deque<_S_AVE_MultiPassStats *>::~deque[abi:ne180100]((void *)this + 3174);
  int v10 = (void *)*((void *)this + 3170);
  if (v10)
  {
    *((void *)this + 3171) = v10;
    operator delete(v10);
  }
}

void __clang_call_terminate(void *a1)
{
}

uint64_t H264VideoEncoderFrameReceiver::Setup(H264VideoEncoderFrameReceiver *this)
{
  unint64_t v2 = (const void **)((char *)this + 51232);
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  *unint64_t v2 = Current;
  if (Current)
  {
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      int v4 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(7);
      long long v7 = *v2;
      if (v4)
      {
        printf("%lld %d AVE %s: H264FrameRec: CFRunLoopGetCFRunLoopRef Current = %p\n", CurrTime, 46, LevelStr, v7);
        __uint64_t v8 = AVE_GetCurrTime();
        int v27 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: CFRunLoopGetCFRunLoopRef Current = %p", v8, 46, v27, *v2);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: CFRunLoopGetCFRunLoopRef Current = %p", CurrTime, 46, LevelStr, v7);
      }
    }
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      int v13 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v14 = AVE_GetCurrTime();
      size_t v15 = AVE_Log_GetLevelStr(7);
      if (v13)
      {
        printf("%lld %d AVE %s: H264FrameRec: AddIODispatcherToRunLoop to CFRunLoopRun.\n", v14, 46, v15);
        __uint64_t v16 = AVE_GetCurrTime();
        int v29 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: AddIODispatcherToRunLoop to CFRunLoopRun.", v16, 46, v29);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: AddIODispatcherToRunLoop to CFRunLoopRun.", v14, 46, v15);
      }
    }
    if (H264VideoEncoderFrameReceiver::AddIODispatcherToRunLoop(this))
    {
      uint64_t v17 = 3758097084;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v18 = AVE_Log_CheckConsole(3u);
        __uint64_t v19 = AVE_GetCurrTime();
        __uint64_t v20 = AVE_Log_GetLevelStr(4);
        if (v18)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: AddIODispatcherToRunLoop failed.\n", v19, 3, v20, "Setup", 479, "err == 0");
          __uint64_t v21 = AVE_GetCurrTime();
          uint64_t v30 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: AddIODispatcherToRunLoop failed.", v21, 3, v30, "Setup", 479, "err == 0");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: AddIODispatcherToRunLoop failed.", v19, 3, v20, "Setup", 479, "err == 0");
        }
      }
    }
    else
    {
      if (*((unsigned char *)this + 239345))
      {
        if (AVE_Log_CheckLevel(0x2Eu, 4))
        {
          int v22 = AVE_Log_CheckConsole(0x2Eu);
          __uint64_t v23 = AVE_GetCurrTime();
          char v24 = AVE_Log_GetLevelStr(4);
          if (v22)
          {
            printf("%lld %d AVE %s: H264VideoEncoder: setpriority to BACKGROUND\n", v23, 46, v24);
            __uint64_t v25 = AVE_GetCurrTime();
            uint64_t v31 = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: H264VideoEncoder: setpriority to BACKGROUND", v25, 46, v31);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264VideoEncoder: setpriority to BACKGROUND", v23, 46, v24);
          }
        }
        setpriority(3, 0, 4096);
      }
      else
      {
        H264VideoEncoderFrameReceiver::MakeCurrentThreadTimeConstraintThread(this);
      }
      return 0;
    }
  }
  else if (AVE_Log_CheckLevel(3u, 4))
  {
    int v9 = AVE_Log_CheckConsole(3u);
    __uint64_t v10 = AVE_GetCurrTime();
    thread_act_t v11 = AVE_Log_GetLevelStr(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CFRunLoopGetCurrent failed.\n", v10, 3, v11, "Setup", 472, "m_CFRunLoopRef != __null");
      __uint64_t v12 = AVE_GetCurrTime();
      __uint64_t v28 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CFRunLoopGetCurrent failed.", v12, 3, v28, "Setup", 472, "m_CFRunLoopRef != __null");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CFRunLoopGetCurrent failed.", v10, 3, v11, "Setup", 472, "m_CFRunLoopRef != __null");
    }
    return 3758097085;
  }
  else
  {
    return 3758097085;
  }
  return v17;
}

uint64_t H264VideoEncoderFrameReceiver::AddIODispatcherToRunLoop(H264VideoEncoderFrameReceiver *this)
{
  Boolean shouldFreeInfo = 0;
  if (IOCreateReceivePort(0x39u, (mach_port_t *)this + 12814))
  {
    uint64_t v2 = 3758097084;
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      int v3 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v3)
      {
        printf("%lld %d AVE %s: H264FrameRec ERROR: IOCreateReceivePort failed -> Dispatcher cannot be installed\n", CurrTime, 46, LevelStr);
        __uint64_t v6 = AVE_GetCurrTime();
        __uint64_t v23 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: IOCreateReceivePort failed -> Dispatcher cannot be installed", v6, 46, v23);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: IOCreateReceivePort failed -> Dispatcher cannot be installed", CurrTime, 46, LevelStr);
      }
    }
    return v2;
  }
  context.version = 1;
  context.mach_timebase_info info = this;
  memset(&context.retain, 0, 24);
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  __uint64_t v8 = CFMachPortCreateWithPort((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *((_DWORD *)this + 12814), MEMORY[0x1E4F2EEA8], &context, &shouldFreeInfo);
  *((void *)this + 6408) = v8;
  if (v8) {
    BOOL v9 = shouldFreeInfo == 1;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      int v10 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v11 = AVE_GetCurrTime();
      __uint64_t v12 = AVE_Log_GetLevelStr(4);
      if (v10)
      {
        printf("%lld %d AVE %s: H264FrameRec ERROR: CFMachPortCreateWithPort failed m_CFAsyncPort %p shouldFreeInfo %d\n", v11, 46, v12, *((const void **)this + 6408), shouldFreeInfo);
        __uint64_t v11 = AVE_GetCurrTime();
        __uint64_t v12 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: CFMachPortCreateWithPort failed m_CFAsyncPort %p shouldFreeInfo %d", v11, 46, v12, *((const void **)this + 6408), shouldFreeInfo);
    }
    *((void *)this + 6408) = 0;
    goto LABEL_25;
  }
  RunLoopSource = CFMachPortCreateRunLoopSource(v7, v8, 0);
  *((void *)this + 6406) = RunLoopSource;
  if (!RunLoopSource)
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      int v18 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v19 = AVE_GetCurrTime();
      __uint64_t v20 = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: H264FrameRec ERROR: CFMachPortCreateRunLoopSource failed -> Dispatcher cannot be installed\n", v19, 46, v20);
        __uint64_t v21 = AVE_GetCurrTime();
        __uint64_t v25 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: CFMachPortCreateRunLoopSource failed -> Dispatcher cannot be installed", v21, 46, v25);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: CFMachPortCreateRunLoopSource failed -> Dispatcher cannot be installed", v19, 46, v20);
      }
    }
LABEL_25:
    H264VideoEncoderFrameReceiver::RemoveIODispatcherFromRunLoop(this);
    return 3758097085;
  }
  CFRunLoopAddSource(*((CFRunLoopRef *)this + 6404), RunLoopSource, (CFRunLoopMode)*MEMORY[0x1E4F1D418]);
  long long v28 = 0u;
  long long v29 = 0u;
  memset(v26, 0, sizeof(v26));
  uint64_t v27 = *((unsigned int *)this + 59839);
  uint64_t v30 = H264VideoEncoderFrameReceiver::FrameDone;
  uint64_t v31 = this;
  if (!AVE_DAL::UCConfig(*((const void ***)this + 6415), (const void *)*((unsigned int *)this + 12814), &v27, v26))return 0; {
  if (AVE_Log_CheckLevel(0x2Eu, 4))
  }
  {
    int v14 = AVE_Log_CheckConsole(0x2Eu);
    __uint64_t v15 = AVE_GetCurrTime();
    __uint64_t v16 = AVE_Log_GetLevelStr(4);
    if (v14)
    {
      printf("%lld %d AVE %s: H264FrameRec ERROR: kH264VideoEncoderUserClientSetCallback failed -> Dispatcher cannot be installed\n", v15, 46, v16);
      __uint64_t v17 = AVE_GetCurrTime();
      char v24 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: kH264VideoEncoderUserClientSetCallback failed -> Dispatcher cannot be installed", v17, 46, v24);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: kH264VideoEncoderUserClientSetCallback failed -> Dispatcher cannot be installed", v15, 46, v16);
    }
  }
  uint64_t v2 = 3758097084;
  H264VideoEncoderFrameReceiver::RemoveIODispatcherFromRunLoop(this);
  return v2;
}

uint64_t H264VideoEncoderFrameReceiver::ChangeBackgroundPolicy(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 239345) != a2)
  {
    *(unsigned char *)(this + 239345) = a2;
    *(unsigned char *)(this + 239346) = 1;
  }
  return this;
}

uint64_t H264VideoEncoderFrameReceiver::RemoveIODispatcherFromRunLoop(H264VideoEncoderFrameReceiver *this)
{
  double v1 = (char *)this + 51232;
  uint64_t v2 = (__CFRunLoopSource *)*((void *)this + 6406);
  if (v2)
  {
    CFRunLoopRemoveSource(*(CFRunLoopRef *)v1, v2, (CFRunLoopMode)*MEMORY[0x1E4F1D418]);
    CFRelease(*((CFTypeRef *)v1 + 2));
    *((void *)v1 + 2) = 0;
  }
  int v3 = (__CFMachPort *)*((void *)v1 + 4);
  if (v3)
  {
    CFMachPortInvalidate(v3);
    CFRelease(*((CFTypeRef *)v1 + 4));
    *((void *)v1 + 4) = 0;
  }
  ipc_space_t v4 = *MEMORY[0x1E4F14960];
  mach_port_name_t v5 = *((_DWORD *)v1 + 6);

  return mach_port_mod_refs(v4, v5, 1u, -1);
}

void H264VideoEncoderFrameReceiver::FrameDone(H264VideoEncoderFrameReceiver *this, void *a2, int *a3, unint64_t *a4)
{
  int v4 = (int)a4;
  int v5 = (int)a2;
  if (AVE_Log_CheckLevel(0x2Eu, 8))
  {
    int v6 = AVE_Log_CheckConsole(0x2Eu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p 0x%x %p %d\n", CurrTime, 46, LevelStr, "FrameDone", this, v5, a3, v4);
      __uint64_t CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p 0x%x %p %d", CurrTime, 46);
  }
  if (!this || !a3 || v4 <= 0)
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      int v14 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v15 = AVE_GetCurrTime();
      __uint64_t v16 = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p 0x%x %p %d\n", v15, 46, v16, "FrameDone", 5172, "pRefCon != __null && args != __null && numArgs > 0", this, v5, a3, v4);
        __uint64_t v17 = AVE_GetCurrTime();
        long long v312 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p 0x%x %p %d", v17, 46, v312, "FrameDone");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p 0x%x %p %d", v15, 46, v16, "FrameDone");
      }
    }
    goto LABEL_26;
  }
  BOOL v9 = (char *)this + 239345;
  if (!*((void *)this + 6415) || !*((_DWORD *)this + 59838))
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      int v18 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v19 = AVE_GetCurrTime();
      __uint64_t v20 = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        int v21 = v4;
        uint64_t v22 = 46;
        printf("%lld %d AVE %s: %s:%d %s | wrong state %p %d\n", v19, 46, v20, "FrameDone", 5177, "context->m_pcDAL != __null && context->m_DeviceType != AVE_DevType_None", *((const void **)this + 6415), *((_DWORD *)this + 59838));
        __uint64_t v23 = AVE_GetCurrTime();
        char v24 = AVE_Log_GetLevelStr(4);
        uint64_t v330 = *((void *)this + 6415);
        uint64_t v331 = *((unsigned int *)this + 59838);
        uint64_t v328 = 5177;
        __int16 v329 = "context->m_pcDAL != __null && context->m_DeviceType != AVE_DevType_None";
        int v313 = v24;
        __uint64_t v25 = "%lld %d AVE %s: %s:%d %s | wrong state %p %d";
LABEL_23:
        uint64_t v310 = v22;
        int v4 = v21;
        syslog(3, v25, v23, v310, v313, "FrameDone", v328, v329, v330, v331, v332);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong state %p %d", v19, 46);
      }
    }
    goto LABEL_26;
  }
  if (v5 == -536870210) {
    goto LABEL_14;
  }
  if (v5)
  {
    if (v5 != -536870165)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v30 = AVE_Log_CheckConsole(3u);
        __uint64_t v31 = AVE_GetCurrTime();
        int v32 = AVE_Log_GetLevelStr(4);
        if (v30)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: commandResult != kIOReturnSuccess.\n", v31, 3, v32, "FrameDone", 5187, "commandResult == 0");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: commandResult != kIOReturnSuccess.");
      }
      goto LABEL_26;
    }
LABEL_14:
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      int v10 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v11 = AVE_GetCurrTime();
      __uint64_t v12 = AVE_Log_GetLevelStr(4);
      if (v10)
      {
        printf("%lld %d AVE %s: FIG: H264FrameRec: commandResult = kIOReturnNoResources\n", v11, 46, v12);
        __uint64_t v13 = AVE_GetCurrTime();
        long long v311 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: FIG: H264FrameRec: commandResult = kIOReturnNoResources", v13, 46, v311);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: H264FrameRec: commandResult = kIOReturnNoResources", v11, 46, v12);
      }
    }
  }
  int v33 = *a3;
  if (AVE_Log_CheckLevel(0x2Eu, 7))
  {
    int v34 = AVE_Log_CheckConsole(0x2Eu);
    __uint64_t v35 = AVE_GetCurrTime();
    __int16 v36 = AVE_Log_GetLevelStr(7);
    if (v34)
    {
      printf("%lld %d AVE %s: \nH264FrameRec: counter received = %d\n", v35, 46, v36, v33);
      __uint64_t v37 = AVE_GetCurrTime();
      uint64_t v314 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: \nH264FrameRec: counter received = %d", v37, 46, v314, v33);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: \nH264FrameRec: counter received = %d", v35, 46, v36, v33);
    }
  }
  __uint64_t v338 = (OpaqueVTMultiPassStorage **)((char *)this + 239336);
  uint64_t v38 = (char *)this + 25784;
  if (*((unsigned char *)this + 239346))
  {
    if (*v9)
    {
      if (AVE_Log_CheckLevel(0x2Eu, 4))
      {
        int v39 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v40 = AVE_GetCurrTime();
        uint64_t v41 = AVE_Log_GetLevelStr(4);
        if (v39)
        {
          printf("%lld %d AVE %s: H264VideoEncoder: setpriority to BACKGROUND\n", v40, 46, v41);
          __uint64_t v42 = AVE_GetCurrTime();
          int v315 = AVE_Log_GetLevelStr(4);
          uint64_t v38 = (char *)this + 25784;
          syslog(3, "%lld %d AVE %s: H264VideoEncoder: setpriority to BACKGROUND", v42, 46, v315);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264VideoEncoder: setpriority to BACKGROUND", v40, 46, v41);
        }
      }
      setpriority(3, 0, 4096);
    }
    else
    {
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        int v43 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v44 = AVE_GetCurrTime();
        uint64_t v45 = AVE_Log_GetLevelStr(7);
        if (v43)
        {
          printf("%lld %d AVE %s: H264VideoEncoder: setpriority to FOREGROUND\n", v44, 46, v45);
          __uint64_t v46 = AVE_GetCurrTime();
          __uint64_t v316 = AVE_Log_GetLevelStr(7);
          uint64_t v38 = (char *)this + 25784;
          syslog(3, "%lld %d AVE %s: H264VideoEncoder: setpriority to FOREGROUND", v46, 46, v316);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264VideoEncoder: setpriority to FOREGROUND", v44, 46, v45);
        }
      }
      setpriority(3, 0, 0);
      H264VideoEncoderFrameReceiver::MakeCurrentThreadTimeConstraintThread(this);
    }
    *((unsigned char *)this + 239346) = 0;
  }
  v346[0] = 0;
  AVE_DAL::Idx2Addr(*((AVE_DAL **)this + 6415), v33, v346);
  uint64_t v47 = v346[0];
  kdebug_trace();
  int v342 = v4;
  unint64_t v343 = v47;
  int v339 = v5;
  switch(*(_DWORD *)(v47 + 4))
  {
    case 4:
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        int v48 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v49 = AVE_GetCurrTime();
        int32x2_t v50 = AVE_Log_GetLevelStr(7);
        if (v48)
        {
          printf("%lld %d AVE %s: H264FrameRec: DataType_PREPARE frame %d\n", v49, 46, v50, *(_DWORD *)(v47 + 160));
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(7);
          uint64_t v38 = (char *)this + 25784;
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_PREPARE frame %d");
      }
      goto LABEL_171;
    case 5:
      if (v5 != -536870210 && v5 != -536870165)
      {
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          int v51 = AVE_Log_CheckConsole(0x2Eu);
          __uint64_t v52 = AVE_GetCurrTime();
          uint32x2_t v53 = AVE_Log_GetLevelStr(7);
          if (v51)
          {
            printf("%lld %d AVE %s: %s:%d DataType_INIT counter %d frame %d\n", v52, 46, v53, "FrameDone", 5428, v33, *(_DWORD *)(v47 + 160));
            __uint64_t v54 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: %s:%d DataType_INIT counter %d frame %d", v54);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d DataType_INIT counter %d frame %d", v52);
          }
        }
        uint64_t v99 = 0;
        uint64_t v100 = v47 + 356;
        uint64_t v101 = (const void **)((char *)this + 26712);
        *((_DWORD *)this + 6447) = *(_DWORD *)(v47 + 352);
        do
        {
          IOSurfaceID v102 = *(_DWORD *)(v100 + 4 * v99);
          if (v102)
          {
            uint64_t v103 = IOSurfaceLookup(v102);
            CFTypeRef *v101 = v103;
            IOSurfaceLock(v103, 0, 0);
            *(v101 - 30) = IOSurfaceGetBaseAddress((IOSurfaceRef)*v101);
            *((_DWORD *)this + v99 + 6738) = IOSurfaceGetAllocSize((IOSurfaceRef)*v101);
            if (AVE_Log_CheckLevel(0x2Eu, 7))
            {
              int v104 = AVE_Log_CheckConsole(0x2Eu);
              __uint64_t v105 = AVE_GetCurrTime();
              int v106 = AVE_Log_GetLevelStr(7);
              int v107 = *(_DWORD *)(v100 + 4 * v99);
              int v108 = *(v101 - 30);
              if (v104)
              {
                printf("%lld %d AVE %s: %s:%d CodedData %d %d %p %p\n", v105, 46, v106, "FrameDone", 5444, v99, v107, *v101, v108);
                __uint64_t v109 = AVE_GetCurrTime();
                int v110 = AVE_Log_GetLevelStr(7);
                syslog(3, "%lld %d AVE %s: %s:%d CodedData %d %d %p %p", v109, 46, v110, "FrameDone", 5444, v99, *(_DWORD *)(v100 + 4 * v99), *v101, *(v101 - 30));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d CodedData %d %d %p %p", v105, 46, v106, "FrameDone", 5444, v99, v107, *v101, v108);
              }
            }
          }
          ++v99;
          ++v101;
        }
        while (v99 != 30);
        uint64_t v111 = (IOSurfaceID *)(v47 + 476);
        int v112 = (const void **)((char *)this + 27312);
        uint64_t v113 = -30;
        do
        {
          if (*v111)
          {
            CFNumberRef v114 = IOSurfaceLookup(*v111);
            *int v112 = v114;
            IOSurfaceLock(v114, 0, 0);
            *(v112 - 30) = IOSurfaceGetBaseAddress((IOSurfaceRef)*v112);
            if (AVE_Log_CheckLevel(0x2Eu, 7))
            {
              int v115 = AVE_Log_CheckConsole(0x2Eu);
              __uint64_t v116 = AVE_GetCurrTime();
              int v117 = AVE_Log_GetLevelStr(7);
              IOSurfaceID v118 = *v111;
              unsigned int v119 = *(v112 - 30);
              if (v115)
              {
                printf("%lld %d AVE %s: %s:%d CodedHeader %d %d %p %p\n", v116, 46, v117, "FrameDone", 5460, v113 + 30, v118, *v112, v119);
                __uint64_t v120 = AVE_GetCurrTime();
                __uint64_t v121 = AVE_Log_GetLevelStr(7);
                syslog(3, "%lld %d AVE %s: %s:%d CodedHeader %d %d %p %p", v120, 46, v121, "FrameDone", 5460, v113 + 30, *v111, *v112, *(v112 - 30));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d CodedHeader %d %d %p %p", v116, 46, v117, "FrameDone", 5460, v113 + 30, v118, *v112, v119);
              }
            }
          }
          ++v111;
          ++v112;
          BOOL v122 = __CFADD__(v113++, 1);
        }
        while (!v122);
        int v123 = (IOSurfaceID *)(v47 + 596);
        int v124 = (const void **)((char *)this + 27792);
        uint64_t v125 = -30;
        do
        {
          if (*v123)
          {
            int v126 = IOSurfaceLookup(*v123);
            const char *v124 = v126;
            IOSurfaceLock(v126, 0, 0);
            *(v124 - 30) = IOSurfaceGetBaseAddress((IOSurfaceRef)*v124);
            if (AVE_Log_CheckLevel(0x2Eu, 7))
            {
              int v127 = AVE_Log_CheckConsole(0x2Eu);
              __uint64_t v128 = AVE_GetCurrTime();
              BOOL v129 = AVE_Log_GetLevelStr(7);
              IOSurfaceID v130 = *v123;
              __uint64_t v131 = *(v124 - 30);
              if (v127)
              {
                printf("%lld %d AVE %s: %s:%d SliceHeader %d %d %p %p\n", v128, 46, v129, "FrameDone", 5476, v125 + 30, v130, *v124, v131);
                __uint64_t v132 = AVE_GetCurrTime();
                int v133 = AVE_Log_GetLevelStr(7);
                syslog(3, "%lld %d AVE %s: %s:%d SliceHeader %d %d %p %p", v132, 46, v133, "FrameDone", 5476, v125 + 30, *v123, *v124, *(v124 - 30));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d SliceHeader %d %d %p %p", v128, 46, v129, "FrameDone", 5476, v125 + 30, v130, *v124, v131);
              }
            }
          }
          ++v123;
          ++v124;
          BOOL v122 = __CFADD__(v125++, 1);
        }
        while (!v122);
        __uint64_t v134 = (IOSurfaceID *)(v47 + 716);
        CFDataRef v135 = (const void **)((char *)this + 26032);
        uint64_t v136 = -30;
        do
        {
          if (*v134)
          {
            int v137 = IOSurfaceLookup(*v134);
            const char *v135 = v137;
            IOSurfaceLock(v137, 0, 0);
            *(v135 - 30) = IOSurfaceGetBaseAddress((IOSurfaceRef)*v135);
            if (AVE_Log_CheckLevel(0x2Eu, 7))
            {
              int v138 = AVE_Log_CheckConsole(0x2Eu);
              __uint64_t v139 = AVE_GetCurrTime();
              unsigned int v140 = AVE_Log_GetLevelStr(7);
              IOSurfaceID v141 = *v134;
              __uint64_t v142 = *(v135 - 30);
              if (v138)
              {
                printf("%lld %d AVE %s: %s:%d MBStats %d %d %p %p\n", v139, 46, v140, "FrameDone", 5492, v136 + 30, v141, *v135, v142);
                __uint64_t v143 = AVE_GetCurrTime();
                int v144 = AVE_Log_GetLevelStr(7);
                syslog(3, "%lld %d AVE %s: %s:%d MBStats %d %d %p %p", v143, 46, v144, "FrameDone", 5492, v136 + 30, *v134, *v135, *(v135 - 30));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d MBStats %d %d %p %p", v139, 46, v140, "FrameDone", 5492, v136 + 30, v141, *v135, v142);
              }
            }
          }
          ++v134;
          ++v135;
          BOOL v122 = __CFADD__(v136++, 1);
        }
        while (!v122);
        uint64_t v145 = 0;
        uint64_t v146 = v47 + 836;
        do
        {
          int v147 = *(_DWORD *)(v146 + 4 * v145);
          if (v147)
          {
            *((_DWORD *)this + v145 + 6598) = v147;
            if (AVE_Log_CheckLevel(0x2Eu, 7))
            {
              int v148 = AVE_Log_CheckConsole(0x2Eu);
              __uint64_t v149 = AVE_GetCurrTime();
              int v150 = AVE_Log_GetLevelStr(7);
              int v151 = *(_DWORD *)(v146 + 4 * v145);
              if (v148)
              {
                printf("%lld %d AVE %s: %s:%d iaLFSResult %d %d\n", v149, 46, v150, "FrameDone", 5506, v145, v151);
                __uint64_t v152 = AVE_GetCurrTime();
                __uint64_t v153 = AVE_Log_GetLevelStr(7);
                syslog(3, "%lld %d AVE %s: %s:%d iaLFSResult %d %d", v152, 46, v153, "FrameDone", 5506, v145, *(_DWORD *)(v146 + 4 * v145));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d iaLFSResult %d %d", v149, 46, v150, "FrameDone", 5506, v145, v151);
              }
            }
          }
          ++v145;
        }
        while (v145 != 10);
        uint64_t v154 = 0;
        uint64_t v155 = v47 + 876;
        do
        {
          int v156 = *(_DWORD *)(v155 + 4 * v154);
          if (v156)
          {
            *((_DWORD *)this + v154 + 6608) = v156;
            if (AVE_Log_CheckLevel(0x2Eu, 7))
            {
              int v157 = AVE_Log_CheckConsole(0x2Eu);
              __uint64_t v158 = AVE_GetCurrTime();
              __uint64_t v159 = AVE_Log_GetLevelStr(7);
              int v160 = *(_DWORD *)(v155 + 4 * v154);
              if (v157)
              {
                printf("%lld %d AVE %s: %s:%d iaLRSResult %d %d\n", v158, 46, v159, "FrameDone", 5518, v154, v160);
                __uint64_t v161 = AVE_GetCurrTime();
                __uint64_t v162 = AVE_Log_GetLevelStr(7);
                syslog(3, "%lld %d AVE %s: %s:%d iaLRSResult %d %d", v161, 46, v162, "FrameDone", 5518, v154, *(_DWORD *)(v155 + 4 * v154));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d iaLRSResult %d %d", v158, 46, v159, "FrameDone", 5518, v154, v160);
              }
            }
          }
          ++v154;
        }
        while (v154 != 10);
        BOOL v9 = (char *)this + 239345;
        *((_DWORD *)this + 16887) = *(_DWORD *)(v47 + 2360);
        uint64_t v38 = (char *)this + 25784;
      }
      goto LABEL_171;
    case 6:
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        int v55 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v56 = AVE_GetCurrTime();
        double v57 = AVE_Log_GetLevelStr(7);
        int v58 = *((_DWORD *)this + 59839);
        if (v55)
        {
          printf("%lld %d AVE %s: H264FrameRec: DataType_STOP frame %d ClientID %d \n", v56, 46, v57, *(_DWORD *)(v47 + 160), v58);
          __uint64_t v59 = AVE_GetCurrTime();
          int v60 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_STOP frame %d ClientID %d ", v59, 46, v60, *(_DWORD *)(v47 + 160), *((_DWORD *)this + 59839));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_STOP frame %d ClientID %d ", v56, 46, v57, *(_DWORD *)(v47 + 160), v58);
        }
      }
      uint64_t v79 = 0;
      int v80 = (char *)this + 26032;
      do
      {
        uint32x2_t v81 = *(__IOSurface **)&v80[v79];
        if (v81)
        {
          IOSurfaceUnlock(v81, 0, 0);
          CFRelease(*(CFTypeRef *)&v80[v79]);
          *(void *)&v80[v79] = 0;
        }
        uint32x2_t v82 = &v80[v79];
        uint32x2_t v83 = *(__IOSurface **)&v80[v79 + 680];
        if (v83)
        {
          IOSurfaceUnlock(v83, 0, 0);
          CFRelease(*((CFTypeRef *)v82 + 85));
          *((void *)v82 + 85) = 0;
        }
        uint32x2_t v84 = (__IOSurface *)*((void *)v82 + 160);
        if (v84)
        {
          IOSurfaceUnlock(v84, 0, 0);
          CFRelease(*((CFTypeRef *)v82 + 160));
          *((void *)v82 + 160) = 0;
        }
        int8x8_t v85 = &v80[v79];
        uint64_t v86 = *(__IOSurface **)&v80[v79 + 1760];
        if (v86)
        {
          IOSurfaceUnlock(v86, 0, 0);
          CFRelease(*((CFTypeRef *)v85 + 220));
          *((void *)v85 + 220) = 0;
        }
        v79 += 8;
      }
      while (v79 != 240);
      AVE_DAL::Free(*((AVE_DAL **)this + 6415), (const void *)v47);
      unsigned int v87 = -1;
      BOOL v9 = (char *)this + 239345;
      uint64_t v38 = (char *)this + 25784;
      goto LABEL_173;
    case 7:
      *(void *)(v47 + 27704) = AVE_GetCurrTime();
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        int v61 = v4;
        int v62 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v63 = AVE_GetCurrTime();
        __uint64_t v64 = AVE_Log_GetLevelStr(7);
        if (v62)
        {
          printf("%lld %d AVE %s: H264FrameRec: DataType_YUV frame %d type %d ClientID %d counter %d\n", v63, 46, v64, *(_DWORD *)(v47 + 160), *(_DWORD *)(v47 + 23468), *((_DWORD *)this + 59839), v33);
          __uint64_t v65 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_YUV frame %d type %d ClientID %d counter %d", v65);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_YUV frame %d type %d ClientID %d counter %d", v63);
        }
        int v4 = v61;
        uint64_t v38 = (char *)this + 25784;
      }
      if (!*(_DWORD *)(v47 + 160)) {
        *((void *)this + 6414) = *(void *)(v47 + 2344);
      }
      if (*((_DWORD *)this + 16983) >= 2u && *(_DWORD *)(v47 + 168) && *((unsigned char *)this + 51229)) {
        *(_DWORD *)(v47 + 23468) = 4;
      }
      int v88 = *((_DWORD *)this + 59837);
      if (v88 != 3)
      {
        unsigned int v336 = (int *)(v47 + 23468);
        unsigned int v93 = *(_DWORD *)(v47 + 23468);
        if (v93 >= 4)
        {
          if (v93 == 4)
          {
            if (AVE_Log_CheckLevel(0x2Eu, 5))
            {
              int v278 = AVE_Log_CheckConsole(0x2Eu);
              __uint64_t v279 = AVE_GetCurrTime();
              int v280 = AVE_Log_GetLevelStr(5);
              int v281 = *v336;
              if (v278)
              {
                printf("%lld %d AVE %s: H264FrameRec: DROPPING frame %d type %d\n", v279, 46, v280, *(_DWORD *)(v47 + 160), v281);
                __uint64_t v282 = AVE_GetCurrTime();
                __uint64_t v283 = AVE_Log_GetLevelStr(5);
                uint64_t v38 = (char *)this + 25784;
                syslog(3, "%lld %d AVE %s: H264FrameRec: DROPPING frame %d type %d", v282, 46, v283, *(_DWORD *)(v47 + 160), *v336);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: H264FrameRec: DROPPING frame %d type %d", v279, 46, v280, *(_DWORD *)(v47 + 160), v281);
              }
            }
            int v334 = (char *)this + 67552;
            int v176 = H264VideoEncoderFrameReceiver::DropFrame((uint64_t)this, v47);
            BOOL v291 = 0;
            int v299 = 0;
          }
          else
          {
            if (v93 == 7) {
              goto LABEL_106;
            }
            int v334 = (char *)this + 67552;
            if (AVE_Log_CheckLevel(0x2Eu, 4))
            {
              int v284 = AVE_Log_CheckConsole(0x2Eu);
              __uint64_t v285 = AVE_GetCurrTime();
              uint64_t v286 = AVE_Log_GetLevelStr(4);
              int v287 = *v336;
              if (v284)
              {
                printf("%lld %d AVE %s: H264FrameRec ERROR: FrameType NOT RECOGNIZED = %d. cannot process frame.\n", v285, 46, v286, v287);
                __uint64_t v288 = AVE_GetCurrTime();
                int v326 = AVE_Log_GetLevelStr(4);
                uint64_t v38 = (char *)this + 25784;
                syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: FrameType NOT RECOGNIZED = %d. cannot process frame.", v288, 46, v326, *v336);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: FrameType NOT RECOGNIZED = %d. cannot process frame.", v285, 46, v286, v287);
              }
              BOOL v291 = 0;
              int v299 = 0;
              int v176 = 0;
              unsigned int v87 = -1;
              goto LABEL_361;
            }
            BOOL v291 = 0;
            int v299 = 0;
            int v176 = 0;
          }
          unsigned int v87 = -1;
          goto LABEL_361;
        }
LABEL_106:
        uint64_t v94 = *((void *)this + 6420);
        if (v94 || *v38)
        {
          if (*((unsigned char *)this + 68345) && *(unsigned char *)(v47 + 3990))
          {
            if (v94)
            {
              FigFormatDescriptionRelease();
              *((void *)this + 6420) = 0;
            }
            if (H264VideoEncoderFrameReceiver::SendSPSandPPS((uint64_t)this, (int *)v47, 0))
            {
              if (!AVE_Log_CheckLevel(3u, 4)) {
                goto LABEL_26;
              }
              int v95 = AVE_Log_CheckConsole(3u);
              __uint64_t v96 = AVE_GetCurrTime();
              CFTypeID v97 = AVE_Log_GetLevelStr(4);
              if (!v95) {
                goto LABEL_355;
              }
              int v98 = 5292;
LABEL_116:
              printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendSPSandPPS failed.\n", v96, 3, v97, "FrameDone", v98, "err == noErr");
              AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
LABEL_355:
              syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendSPSandPPS failed.");
              goto LABEL_26;
            }
          }
        }
        else if (v88 == 1 {
               && H264VideoEncoderFrameReceiver::SendSPSandPPS((uint64_t)this, (int *)v47, *((unsigned __int8 *)this + 67552)))
        }
        {
          if (!AVE_Log_CheckLevel(3u, 4)) {
            goto LABEL_26;
          }
          int v289 = AVE_Log_CheckConsole(3u);
          __uint64_t v96 = AVE_GetCurrTime();
          CFTypeID v97 = AVE_Log_GetLevelStr(4);
          if (!v289) {
            goto LABEL_355;
          }
          int v98 = 5299;
          goto LABEL_116;
        }
        unsigned int v87 = a3[2];
        int v290 = *((_DWORD *)this + 16889) - 1;
        BOOL v291 = v290 == v87;
        int v334 = (char *)this + 67552;
        if (!*((unsigned char *)this + 67552) || (v87 & 0x80000000) != 0)
        {
          if (*((_DWORD *)this + 59837) == 2)
          {
            uint64_t v38 = (char *)this + 25784;
            if (H264VideoEncoderFrameReceiver::ProcessAndEmitLrmeStats((uint64_t)this, v47))
            {
              if (AVE_Log_CheckLevel(3u, 4))
              {
                int v296 = AVE_Log_CheckConsole(3u);
                __uint64_t v297 = AVE_GetCurrTime();
                uint64_t v298 = AVE_Log_GetLevelStr(4);
                if (v296)
                {
                  printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: ProcessAndEmitLrmeStats failed\n", v297, 3, v298, "FrameDone", 5330, "err == noErr");
                  AVE_GetCurrTime();
                  AVE_Log_GetLevelStr(4);
                }
                syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: ProcessAndEmitLrmeStats failed");
              }
              goto LABEL_26;
            }
          }
          else
          {
            uint64_t v38 = (char *)this + 25784;
            if (!*((unsigned char *)this + 67552))
            {
              if (H264VideoEncoderFrameReceiver::CollectSlicesSizes((uint64_t)this, v47))
              {
                if (!AVE_Log_CheckLevel(3u, 4)) {
                  goto LABEL_26;
                }
                int v300 = AVE_Log_CheckConsole(3u);
                __uint64_t v293 = AVE_GetCurrTime();
                __uint64_t v294 = AVE_Log_GetLevelStr(4);
                if (!v300) {
                  goto LABEL_354;
                }
                int v295 = 5339;
                goto LABEL_337;
              }
              Connection::peekPacket(*((void *)this + 6416), (uint64_t)v346);
              int v176 = H264VideoEncoderFrameReceiver::SendFrame((uint64_t)this, v47, v346, 0xFFFFFFFF);
              int v299 = 0;
              goto LABEL_361;
            }
          }
          int v299 = 0;
          int v176 = 0;
        }
        else
        {
          if (H264VideoEncoderFrameReceiver::CollectSlicesSizes((uint64_t)this, v47))
          {
            if (!AVE_Log_CheckLevel(3u, 4)) {
              goto LABEL_26;
            }
            int v292 = AVE_Log_CheckConsole(3u);
            __uint64_t v293 = AVE_GetCurrTime();
            __uint64_t v294 = AVE_Log_GetLevelStr(4);
            if (!v292) {
              goto LABEL_354;
            }
            int v295 = 5318;
LABEL_337:
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CollectSlicesSizes failed.\n", v293, 3, v294, "FrameDone", v295, "err == noErr");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
LABEL_354:
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CollectSlicesSizes failed.");
            goto LABEL_26;
          }
          Connection::peekPacket(*((void *)this + 6416), (uint64_t)v346);
          int v176 = H264VideoEncoderFrameReceiver::SendFrame((uint64_t)this, v47, v346, v87);
          int v299 = 1;
          if (v290 != v87)
          {
            BOOL v291 = 0;
            uint64_t v38 = (char *)this + 25784;
            goto LABEL_372;
          }
          BOOL v291 = 1;
          uint64_t v38 = (char *)this + 25784;
        }
LABEL_361:
        CFNumberRef v301 = *(const void **)(v47 + 336);
        if (v301)
        {
          CFRelease(v301);
          *(void *)(v47 + 336) = 0;
        }
        if (*((_DWORD *)this + 59837) == 1)
        {
          int v333 = v299;
          BOOL v302 = v291;
          uint64_t v303 = *((void *)v334 + 499);
          __uint64_t v304 = AVE_GetCurrTime();
          uint64_t v305 = v303;
          BOOL v291 = v302;
          int v299 = v333;
          AVE_TimeStats_AddEndTime(v305, 5u, v304);
        }
        if (v176 && AVE_Log_CheckLevel(0x2Eu, 4))
        {
          BOOL v335 = v291;
          int v306 = AVE_Log_CheckConsole(0x2Eu);
          __uint64_t v307 = AVE_GetCurrTime();
          long long v308 = AVE_Log_GetLevelStr(4);
          if (v306)
          {
            printf("%lld %d AVE %s: H264FrameRec ERROR: SendFrame failed. continue.\n", v307, 46, v308);
            __uint64_t v309 = AVE_GetCurrTime();
            int v327 = AVE_Log_GetLevelStr(4);
            uint64_t v38 = (char *)this + 25784;
            syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: SendFrame failed. continue.", v309, 46, v327);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: SendFrame failed. continue.", v307, 46, v308);
          }
          BOOL v291 = v335;
        }
        AVE_DAL::Free(*((AVE_DAL **)this + 6415), (const void *)v47);
LABEL_372:
        if (v299 && !v291 && *v336 != 4)
        {
LABEL_189:
          int v4 = v342;
          switch(*(_DWORD *)(v47 + 4))
          {
            case 4:
              LODWORD(v346[0]) = v33;
              int v347 = v339;
              int v177 = Connection::writePacketBlock(*((void *)v38 + 3194), (long long *)v346);
              if (v176)
              {
                int v5 = v339;
                if (AVE_Log_CheckLevel(3u, 4))
                {
                  int v178 = AVE_Log_CheckConsole(3u);
                  __uint64_t v179 = AVE_GetCurrTime();
                  CFNumberRef v180 = AVE_Log_GetLevelStr(4);
                  if (!v178) {
                    goto LABEL_324;
                  }
                  int v181 = 5660;
                  goto LABEL_235;
                }
              }
              else
              {
                if (!v177) {
                  goto LABEL_242;
                }
                int v5 = v339;
                if (AVE_Log_CheckLevel(3u, 4))
                {
                  int v197 = AVE_Log_CheckConsole(3u);
                  __uint64_t v198 = AVE_GetCurrTime();
                  __uint64_t v199 = AVE_Log_GetLevelStr(4);
                  if (!v197) {
                    goto LABEL_348;
                  }
                  int v200 = 5661;
                  goto LABEL_240;
                }
              }
              goto LABEL_26;
            case 5:
              LODWORD(v346[0]) = v33;
              int v347 = v339;
              int v182 = Connection::writePacketBlock(*((void *)v38 + 3194), (long long *)v346);
              if (v176)
              {
                int v5 = v339;
                if (AVE_Log_CheckLevel(3u, 4))
                {
                  int v183 = AVE_Log_CheckConsole(3u);
                  __uint64_t v179 = AVE_GetCurrTime();
                  CFNumberRef v180 = AVE_Log_GetLevelStr(4);
                  if (!v183) {
                    goto LABEL_324;
                  }
                  int v181 = 5676;
                  goto LABEL_235;
                }
              }
              else
              {
                if (!v182) {
                  goto LABEL_242;
                }
                int v5 = v339;
                if (AVE_Log_CheckLevel(3u, 4))
                {
                  int v201 = AVE_Log_CheckConsole(3u);
                  __uint64_t v198 = AVE_GetCurrTime();
                  __uint64_t v199 = AVE_Log_GetLevelStr(4);
                  if (!v201) {
                    goto LABEL_348;
                  }
                  int v200 = 5677;
                  goto LABEL_240;
                }
              }
              goto LABEL_26;
            case 6:
              LODWORD(v346[0]) = v33;
              int v347 = v339;
              int v184 = Connection::writePacketBlock(*((void *)v38 + 3194), (long long *)v346);
              if (v176)
              {
                int v5 = v339;
                if (AVE_Log_CheckLevel(3u, 4))
                {
                  int v185 = AVE_Log_CheckConsole(3u);
                  __uint64_t v179 = AVE_GetCurrTime();
                  CFNumberRef v180 = AVE_Log_GetLevelStr(4);
                  if (!v185) {
                    goto LABEL_324;
                  }
                  int v181 = 5692;
                  goto LABEL_235;
                }
              }
              else
              {
                if (!v184) {
                  goto LABEL_242;
                }
                int v5 = v339;
                if (AVE_Log_CheckLevel(3u, 4))
                {
                  int v202 = AVE_Log_CheckConsole(3u);
                  __uint64_t v198 = AVE_GetCurrTime();
                  __uint64_t v199 = AVE_Log_GetLevelStr(4);
                  if (!v202) {
                    goto LABEL_348;
                  }
                  int v200 = 5693;
                  goto LABEL_240;
                }
              }
              goto LABEL_26;
            case 7:
              goto LABEL_242;
            case 8:
              LODWORD(v346[0]) = v33;
              int v347 = v339;
              if (AVE_Log_CheckLevel(0x2Eu, 7))
              {
                int v186 = AVE_Log_CheckConsole(0x2Eu);
                __uint64_t v187 = AVE_GetCurrTime();
                __uint64_t v188 = AVE_Log_GetLevelStr(7);
                if (v186)
                {
                  printf("%lld %d AVE %s: H264FrameRec: writePacketBlocuint64_t k = %d\n", v187, 46, v188, v33);
                  __uint64_t v189 = AVE_GetCurrTime();
                  unsigned int v320 = AVE_Log_GetLevelStr(7);
                  syslog(3, "%lld %d AVE %s: H264FrameRec: writePacketBlocuint64_t k = %d", v189, 46, v320, v33);
                }
                else
                {
                  syslog(3, "%lld %d AVE %s: H264FrameRec: writePacketBlocuint64_t k = %d", v187, 46, v188, v33);
                }
                int v4 = v342;
              }
              int v204 = Connection::writePacketBlock(*((void *)this + 6417), (long long *)v346);
              if (v176)
              {
                int v5 = v339;
                if (!AVE_Log_CheckLevel(3u, 4)) {
                  goto LABEL_26;
                }
                int v205 = AVE_Log_CheckConsole(3u);
                __uint64_t v179 = AVE_GetCurrTime();
                CFNumberRef v180 = AVE_Log_GetLevelStr(4);
                if (v205)
                {
                  int v181 = 5644;
                  goto LABEL_235;
                }
                goto LABEL_324;
              }
              if (!v204) {
                goto LABEL_242;
              }
              int v5 = v339;
              if (!AVE_Log_CheckLevel(3u, 4)) {
                goto LABEL_26;
              }
              int v206 = AVE_Log_CheckConsole(3u);
              __uint64_t v198 = AVE_GetCurrTime();
              __uint64_t v199 = AVE_Log_GetLevelStr(4);
              if (!v206) {
                goto LABEL_348;
              }
              int v200 = 5645;
              goto LABEL_240;
            case 0xA:
              LODWORD(v346[0]) = v33;
              int v347 = v339;
              int v195 = Connection::writePacketBlock(*((void *)v38 + 3194), (long long *)v346);
              if (v176)
              {
                int v5 = v339;
                if (AVE_Log_CheckLevel(3u, 4))
                {
                  int v196 = AVE_Log_CheckConsole(3u);
                  __uint64_t v179 = AVE_GetCurrTime();
                  CFNumberRef v180 = AVE_Log_GetLevelStr(4);
                  if (v196)
                  {
                    int v181 = 5708;
LABEL_235:
                    printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: writePacketBlock failed.\n", v179, 3, v180, "FrameDone", v181, "err == noErr");
                    AVE_GetCurrTime();
                    AVE_Log_GetLevelStr(4);
                  }
LABEL_324:
                  syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: writePacketBlock failed.");
                }
              }
              else
              {
                if (!v195)
                {
LABEL_242:
                  int v5 = v339;
                  if ((*((unsigned char *)AVE_DW_Get() + 784) & 0x20) == 0) {
                    goto LABEL_26;
                  }
                  unint64_t v207 = *((void *)this + 2 * *(unsigned __int8 *)(v47 + 160) + 30147);
                  if (AVE_Log_CheckLevel(0x2Eu, 8))
                  {
                    int v208 = AVE_Log_CheckConsole(0x2Eu);
                    __uint64_t v209 = AVE_GetCurrTime();
                    int v210 = AVE_Log_GetLevelStr(8);
                    if (v208)
                    {
                      printf("%lld %d AVE %s: \n", v209, 46, v210);
                      __uint64_t v211 = AVE_GetCurrTime();
                      __uint64_t v322 = AVE_Log_GetLevelStr(8);
                      syslog(3, "%lld %d AVE %s: ", v211, 46, v322);
                    }
                    else
                    {
                      syslog(3, "%lld %d AVE %s: ", v209, 46, v210);
                    }
                  }
                  unsigned int v341 = v87;
                  double v212 = (double)v207;
                  int v213 = *(_DWORD *)(v47 + 160) - 1;
                  int v337 = v9;
                  if (v213 < 0)
                  {
                    int v214 = 0;
                    LODWORD(v216) = 0;
                    int v223 = 0;
                    *(void *)(v47 + 29368) = 0;
                    double v217 = 0.0;
                  }
                  else
                  {
                    int v214 = *(_DWORD *)(v47 + 160);
                    int v215 = 0;
                    LODWORD(v216) = 0;
                    while (1)
                    {
                      double v217 = (v212 - (double)*((uint64_t *)this + 2 * v213 + 30147))
                           / (double)*(int *)(v47 + 2352);
                      if (AVE_Log_CheckLevel(0x2Eu, 8))
                      {
                        int v218 = AVE_Log_CheckConsole(0x2Eu);
                        __uint64_t v219 = AVE_GetCurrTime();
                        int v220 = AVE_Log_GetLevelStr(8);
                        int v221 = *(_DWORD *)(v47 + 160);
                        if (v218)
                        {
                          printf("%lld %d AVE %s: H264FrameRec: DROP F %d 1/10 -> i %d, bits %d, timePassed %4.3f, framesUsed %d\n", v219, 46, v220, v221, v213, v216, v217, v215);
                          __uint64_t v222 = AVE_GetCurrTime();
                          v323 = AVE_Log_GetLevelStr(8);
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1/10 -> i %d, bits %d, timePassed %4.3f, framesUsed %d", v222, 46, v323, *(_DWORD *)(v47 + 160), v213, v216, v217, v215);
                        }
                        else
                        {
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1/10 -> i %d, bits %d, timePassed %4.3f, framesUsed %d", v219, 46, v220, v221, v213, v216, v217, v215);
                        }
                      }
                      uint64_t v216 = *((int *)this + 4 * v213 + 60292) + (uint64_t)(int)v216;
                      if (v217 >= 0.1) {
                        break;
                      }
                      --v213;
                      ++v215;
                      if (v213 == -1) {
                        goto LABEL_258;
                      }
                    }
                    int v214 = v215 + 1;
LABEL_258:
                    *(void *)(v47 + 29368) = v216;
                    if (v217 == 0.0) {
                      int v223 = 0;
                    }
                    else {
                      int v223 = (int)((double)(int)v216 / v217);
                    }
                  }
                  if (AVE_Log_CheckLevel(0x2Eu, 8))
                  {
                    int v224 = AVE_Log_CheckConsole(0x2Eu);
                    __uint64_t v225 = AVE_GetCurrTime();
                    uint64_t v226 = AVE_Log_GetLevelStr(8);
                    if (v224)
                    {
                      printf("%lld %d AVE %s: H264FrameRec: DROP F %d, 1/10 -> frames %d, bits %d, timepassed %04.3f, -> bitrate %d\n", v225, 46, v226, *(_DWORD *)(v47 + 160), v214, v216, v217, v223);
                      __uint64_t v227 = AVE_GetCurrTime();
                      AVE_Log_GetLevelStr(8);
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d, 1/10 -> frames %d, bits %d, timepassed %04.3f, -> bitrate %d", v227);
                    }
                    else
                    {
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d, 1/10 -> frames %d, bits %d, timepassed %04.3f, -> bitrate %d", v225);
                    }
                  }
                  int v228 = *(_DWORD *)(v47 + 160);
                  int v229 = v228 - 1;
                  if (v228 - 1 < 0)
                  {
                    int v231 = 0;
                    LODWORD(v230) = 0;
                    int v238 = 0;
                    int v4 = v342;
                    *(void *)(v343 + 29376) = 0;
                    double v232 = 0.0;
                  }
                  else
                  {
                    LODWORD(v230) = 0;
                    int v231 = 1;
                    int v4 = v342;
                    do
                    {
                      double v232 = (v212 - (double)*((uint64_t *)this + 2 * v229 + 30147))
                           / (double)*(int *)(v343 + 2352);
                      uint64_t v230 = *((int *)this + 4 * v229 + 60292) + (uint64_t)(int)v230;
                      if (AVE_Log_CheckLevel(0x2Eu, 8))
                      {
                        int v233 = AVE_Log_CheckConsole(0x2Eu);
                        __uint64_t v234 = AVE_GetCurrTime();
                        int v235 = AVE_Log_GetLevelStr(8);
                        int v236 = *(_DWORD *)(v343 + 160);
                        if (v233)
                        {
                          printf("%lld %d AVE %s: H264FrameRec: DROP F %d 1/2 -> i %d, bits %d, timePassed %4.3f, framesUsed %d\n", v234, 46, v235, v236, v229, v230, v232, v231);
                          __uint64_t v237 = AVE_GetCurrTime();
                          int v4 = v342;
                          int v324 = AVE_Log_GetLevelStr(8);
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1/2 -> i %d, bits %d, timePassed %4.3f, framesUsed %d", v237, 46, v324, *(_DWORD *)(v343 + 160), v229, v230, v232, v231);
                        }
                        else
                        {
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1/2 -> i %d, bits %d, timePassed %4.3f, framesUsed %d", v234, 46, v235, v236, v229, v230, v232, v231);
                        }
                      }
                      if (v232 >= 0.5) {
                        goto LABEL_274;
                      }
                      --v229;
                      ++v231;
                    }
                    while (v229 != -1);
                    int v231 = v228;
LABEL_274:
                    *(void *)(v343 + 29376) = v230;
                    if (v232 == 0.0) {
                      int v238 = 0;
                    }
                    else {
                      int v238 = (int)((double)(int)v230 / v232);
                    }
                  }
                  if (AVE_Log_CheckLevel(0x2Eu, 8))
                  {
                    int v239 = AVE_Log_CheckConsole(0x2Eu);
                    __uint64_t v240 = AVE_GetCurrTime();
                    int v241 = AVE_Log_GetLevelStr(8);
                    if (v239)
                    {
                      printf("%lld %d AVE %s: H264FrameRec: DROP F %d 1/2 -> frames %d bits %d timepassed %04.3f -> bitrate %d\n", v240, 46, v241, *(_DWORD *)(v343 + 160), v231, v230, v232, v238);
                      __uint64_t v242 = AVE_GetCurrTime();
                      AVE_Log_GetLevelStr(8);
                      int v4 = v342;
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1/2 -> frames %d bits %d timepassed %04.3f -> bitrate %d", v242);
                    }
                    else
                    {
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1/2 -> frames %d bits %d timepassed %04.3f -> bitrate %d", v240);
                    }
                  }
                  if (*(_DWORD *)(v343 + 160) - 1 <= 0)
                  {
                    int v244 = 0;
                    LODWORD(v243) = 0;
                    int v255 = 0;
                    *(void *)(v343 + 29384) = 0;
                    double v247 = 0.0;
                  }
                  else
                  {
                    LODWORD(v243) = 0;
                    int v244 = 1;
                    int v340 = *(_DWORD *)(v343 + 160) - 1;
                    int v245 = v340;
                    do
                    {
                      __uint64_t v246 = (int *)((char *)this + 16 * v245 + 241168);
                      double v247 = (v212 - (double)*((uint64_t *)this + 2 * v245 + 30147))
                           / (double)*(int *)(v343 + 2352);
                      uint64_t v243 = *v246 + (uint64_t)(int)v243;
                      if (AVE_Log_CheckLevel(0x2Eu, 8))
                      {
                        int v248 = AVE_Log_CheckConsole(0x2Eu);
                        __uint64_t v249 = AVE_GetCurrTime();
                        int v250 = AVE_Log_GetLevelStr(8);
                        int v251 = *(_DWORD *)(v343 + 160);
                        int v252 = *v246;
                        if (v248)
                        {
                          printf("%lld %d AVE %s: H264FrameRec: DROP F %d 1 -> i %d, bits %d (frame %d), timePassed %4.3f, framesUsed %d\n", v249, 46, v250, v251, v245, v243, v252, v247, v244);
                          __uint64_t v253 = AVE_GetCurrTime();
                          unsigned int v254 = AVE_Log_GetLevelStr(8);
                          int v4 = v342;
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1 -> i %d, bits %d (frame %d), timePassed %4.3f, framesUsed %d", v253, 46, v254, *(_DWORD *)(v343 + 160), v245, v243, *v246, v247, v244);
                        }
                        else
                        {
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1 -> i %d, bits %d (frame %d), timePassed %4.3f, framesUsed %d", v249, 46, v250, v251, v245, v243, v252, v247, v244);
                        }
                      }
                      if (v247 >= 1.0) {
                        goto LABEL_291;
                      }
                      ++v244;
                      --v245;
                    }
                    while (v245);
                    int v244 = v340;
LABEL_291:
                    *(void *)(v343 + 29384) = v243;
                    if (v247 == 0.0) {
                      int v255 = 0;
                    }
                    else {
                      int v255 = (int)((double)(int)v243 / v247);
                    }
                  }
                  if (AVE_Log_CheckLevel(0x2Eu, 8))
                  {
                    int v256 = AVE_Log_CheckConsole(0x2Eu);
                    __uint64_t v257 = AVE_GetCurrTime();
                    CFTypeID v258 = AVE_Log_GetLevelStr(8);
                    if (v256)
                    {
                      printf("%lld %d AVE %s: H264FrameRec: DROP F %d 1 -> frames %d bits %d timepassed %04.3f -> ###### bitrate %d ######\n", v257, 46, v258, *(_DWORD *)(v343 + 160), v244, v243, v247, v255);
                      __uint64_t v259 = AVE_GetCurrTime();
                      AVE_Log_GetLevelStr(8);
                      int v4 = v342;
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1 -> frames %d bits %d timepassed %04.3f -> ###### bitrate %d ######", v259);
                    }
                    else
                    {
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1 -> frames %d bits %d timepassed %04.3f -> ###### bitrate %d ######", v257);
                    }
                  }
                  int v260 = *(_DWORD *)(v343 + 160);
                  int v261 = v260 - 1;
                  if (v260 - 1 < 0)
                  {
                    int v263 = 0;
                    LODWORD(v262) = 0;
                    int v270 = 0;
                    *(void *)(v343 + 29392) = 0;
                    double v264 = 0.0;
                  }
                  else
                  {
                    LODWORD(v262) = 0;
                    int v263 = 1;
                    do
                    {
                      double v264 = (v212 - (double)*((uint64_t *)this + 2 * v261 + 30147))
                           / (double)*(int *)(v343 + 2352);
                      uint64_t v262 = *((int *)this + 4 * v261 + 60292) + (uint64_t)(int)v262;
                      if (AVE_Log_CheckLevel(0x2Eu, 8))
                      {
                        int v265 = AVE_Log_CheckConsole(0x2Eu);
                        __uint64_t v266 = AVE_GetCurrTime();
                        __uint64_t v267 = AVE_Log_GetLevelStr(8);
                        int v268 = *(_DWORD *)(v343 + 160);
                        if (v265)
                        {
                          printf("%lld %d AVE %s: H264FrameRec: DROP F %d 2 -> i %d, bits %d, timePassed %4.3f, framesUsed %d\n", v266, 46, v267, v268, v261, v262, v264, v263);
                          __uint64_t v269 = AVE_GetCurrTime();
                          int v4 = v342;
                          __uint64_t v325 = AVE_Log_GetLevelStr(8);
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 2 -> i %d, bits %d, timePassed %4.3f, framesUsed %d", v269, 46, v325, *(_DWORD *)(v343 + 160), v261, v262, v264, v263);
                        }
                        else
                        {
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 2 -> i %d, bits %d, timePassed %4.3f, framesUsed %d", v266, 46, v267, v268, v261, v262, v264, v263);
                        }
                      }
                      if (v264 >= 2.0) {
                        goto LABEL_308;
                      }
                      --v261;
                      ++v263;
                    }
                    while (v261 != -1);
                    int v263 = v260;
LABEL_308:
                    *(void *)(v343 + 29392) = v262;
                    if (v264 == 0.0) {
                      int v270 = 0;
                    }
                    else {
                      int v270 = (int)((double)(int)v262 / v264);
                    }
                  }
                  if (AVE_Log_CheckLevel(0x2Eu, 8))
                  {
                    int v271 = AVE_Log_CheckConsole(0x2Eu);
                    __uint64_t v272 = AVE_GetCurrTime();
                    __uint64_t v273 = AVE_Log_GetLevelStr(8);
                    if (v271)
                    {
                      printf("%lld %d AVE %s: H264FrameRec: DROP F %d 2 -> frames %d bits %d timepassed %04.3f -> bitrate %d\n", v272, 46, v273, *(_DWORD *)(v343 + 160), v263, v262, v264, v270);
                      __uint64_t v274 = AVE_GetCurrTime();
                      AVE_Log_GetLevelStr(8);
                      int v4 = v342;
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 2 -> frames %d bits %d timepassed %04.3f -> bitrate %d", v274);
                    }
                    else
                    {
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 2 -> frames %d bits %d timepassed %04.3f -> bitrate %d", v272);
                    }
                  }
                  int v275 = *((_DWORD *)this + 17491);
                  *((unsigned char *)this + 239452) = (*((unsigned char *)this + 69872) & 0x10) != 0;
                  int v276 = *(_DWORD *)(v337 + 7);
                  *((_DWORD *)this + 59861) = v275;
                  *((_DWORD *)this + 59862) = v276;
                  *((_DWORD *)this + 59860) = *((_DWORD *)AVE_DW_Get() + 197) & 0x20;
                  *((unsigned char *)this + 239453) = *((unsigned char *)this + 67552);
                  *((_DWORD *)this + 59864) = v341;
                  File = (const void *)AVE_Dump_FindFile(*((void *)this + 8944), 5u, *(_DWORD *)(v343 + 16));
                  AVE_FrameStats_PrintStatFrame((char *)this + 239440, (const void *)v343, File);
                  memcpy((char *)this + 239464, (const void *)(v343 + 27672), 0x698uLL);
                  *((_OWORD *)this + 15072) = *(_OWORD *)(v343 + 2344);
                  int v5 = v339;
                  goto LABEL_26;
                }
                int v5 = v339;
                if (AVE_Log_CheckLevel(3u, 4))
                {
                  int v203 = AVE_Log_CheckConsole(3u);
                  __uint64_t v198 = AVE_GetCurrTime();
                  __uint64_t v199 = AVE_Log_GetLevelStr(4);
                  if (v203)
                  {
                    int v200 = 5709;
LABEL_240:
                    printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: Timed Out waiting for space to write packet to main thread\n", v198, 3, v199, "FrameDone", v200, "ret == 0");
                    AVE_GetCurrTime();
                    AVE_Log_GetLevelStr(4);
                  }
LABEL_348:
                  syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: Timed Out waiting for space to write packet to main thread");
                }
              }
              break;
            default:
              if (AVE_Log_CheckLevel(0x2Eu, 4))
              {
                int v190 = AVE_Log_CheckConsole(0x2Eu);
                __uint64_t v191 = AVE_GetCurrTime();
                CFArrayRef v192 = AVE_Log_GetLevelStr(4);
                int v193 = *(_DWORD *)(v47 + 4);
                if (v190)
                {
                  printf("%lld %d AVE %s: H264FrameRec ERROR: OutputDataFromKernel.type NOT RECOGNIZED = %d. cannot process frame\n", v191, 46, v192, v193);
                  __uint64_t v194 = AVE_GetCurrTime();
                  int v321 = AVE_Log_GetLevelStr(4);
                  syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: OutputDataFromKernel.type NOT RECOGNIZED = %d. cannot process frame", v194, 46, v321, *(_DWORD *)(v47 + 4));
                }
                else
                {
                  syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: OutputDataFromKernel.type NOT RECOGNIZED = %d. cannot process frame", v191, 46, v192, v193);
                }
              }
              goto LABEL_242;
          }
          goto LABEL_26;
        }
        goto LABEL_173;
      }
      int v89 = H264VideoEncoderFrameReceiver::SendFrameMCTF((uint64_t)this, v47);
      AVE_DAL::Free(*((AVE_DAL **)this + 6415), (const void *)v47);
      if (v89)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v90 = AVE_Log_CheckConsole(3u);
          __uint64_t v91 = AVE_GetCurrTime();
          int v92 = AVE_Log_GetLevelStr(4);
          if (v90)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrameMCTF failed.\n", v91, 3, v92, "FrameDone", 5264, "err == noErr");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrameMCTF failed.");
        }
        goto LABEL_26;
      }
LABEL_172:
      unsigned int v87 = -1;
LABEL_173:
      uint64_t v163 = *((void *)v38 + 3193);
      pthread_mutex_lock((pthread_mutex_t *)v163);
      do
      {
        int v164 = *(_DWORD *)(v163 + 200);
        if (v164)
        {
          int v169 = *(_DWORD *)(v163 + 204);
          unsigned int v170 = *(_DWORD *)(v163 + 196);
          if (v169 + 1 < v170) {
            int v171 = v169 + 1;
          }
          else {
            int v171 = 0;
          }
          *(_DWORD *)(v163 + 200) = v164 - 1;
          *(_DWORD *)(v163 + 204) = v171;
          if (v164 == v170) {
            pthread_cond_signal((pthread_cond_t *)(v163 + 112));
          }
          pthread_mutex_unlock((pthread_mutex_t *)v163);
          uint64_t v38 = (char *)this + 25784;
          if (AVE_Log_CheckLevel(0x2Eu, 7))
          {
            int v172 = AVE_Log_CheckConsole(0x2Eu);
            __uint64_t v173 = AVE_GetCurrTime();
            int v174 = AVE_Log_GetLevelStr(7);
            if (v172)
            {
              printf("%lld %d AVE %s: H264FrameRec: readPacketBlocuint64_t k = %d\n", v173, 46, v174, v33);
              __uint64_t v175 = AVE_GetCurrTime();
              unsigned __int16 v319 = AVE_Log_GetLevelStr(7);
              uint64_t v38 = (char *)this + 25784;
              syslog(3, "%lld %d AVE %s: H264FrameRec: readPacketBlocuint64_t k = %d", v175, 46, v319, v33);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: readPacketBlocuint64_t k = %d", v173, 46, v174, v33);
            }
          }
          int v176 = 0;
          goto LABEL_189;
        }
        gettimeofday((timeval *)(v163 + 176), 0);
        uint64_t v165 = (1000 * *(_DWORD *)(v163 + 184));
        *(void *)(v163 + 160) = *(void *)(v163 + 176) + 120;
        *(void *)(v163 + 168) = v165;
      }
      while (pthread_cond_timedwait((pthread_cond_t *)(v163 + 64), (pthread_mutex_t *)v163, (const timespec *)(v163 + 160)) != 60);
      pthread_mutex_unlock((pthread_mutex_t *)v163);
      int v5 = v339;
      int v4 = v342;
      if (!AVE_Log_CheckLevel(3u, 4)) {
        goto LABEL_26;
      }
      int v166 = AVE_Log_CheckConsole(3u);
      __uint64_t v167 = AVE_GetCurrTime();
      int v168 = AVE_Log_GetLevelStr(4);
      if (v166)
      {
        int v21 = v342;
        uint64_t v22 = 3;
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: readPacketBlock failed. %d\n", v167, 3, v168, "FrameDone", 5620, "err == noErr", -1);
        __uint64_t v23 = AVE_GetCurrTime();
        __int16 v329 = "err == noErr";
        uint64_t v330 = 0xFFFFFFFFLL;
        uint64_t v328 = 5620;
        int v313 = AVE_Log_GetLevelStr(4);
        __uint64_t v25 = "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: readPacketBlock failed. %d";
        goto LABEL_23;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: readPacketBlock failed. %d", v167);
LABEL_26:
      if (AVE_Log_CheckLevel(0x2Eu, 8))
      {
        int v26 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v27 = AVE_GetCurrTime();
        long long v28 = AVE_Log_GetLevelStr(8);
        if (v26)
        {
          printf("%lld %d AVE %s: %s Exit %p 0x%x %p %d\n", v27, 46, v28, "FrameDone", this, v5, a3, v4);
          __uint64_t v29 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(8);
          syslog(3, "%lld %d AVE %s: %s Exit %p 0x%x %p %d", v29, 46);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s Exit %p 0x%x %p %d", v27, 46);
        }
      }
      return;
    case 8:
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        int v66 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v67 = AVE_GetCurrTime();
        CFNumberRef v68 = AVE_Log_GetLevelStr(7);
        if (v66)
        {
          printf("%lld %d AVE %s: H264FrameRec: DataType_COMPLETE frame %d counter %d ClientID %d\n", v67, 46, v68, *(_DWORD *)(v47 + 160), v33, *((_DWORD *)this + 59839));
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(7);
          uint64_t v38 = (char *)this + 25784;
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_COMPLETE frame %d counter %d ClientID %d");
      }
      goto LABEL_171;
    case 0xA:
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        int v74 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v75 = AVE_GetCurrTime();
        int v76 = AVE_Log_GetLevelStr(7);
        int v77 = *(_DWORD *)(v47 + 160);
        if (v74)
        {
          printf("%lld %d AVE %s: H264FrameRec: DataType_RESETMULTIPASS frame %d\n", v75, 46, v76, v77);
          __uint64_t v78 = AVE_GetCurrTime();
          __uint64_t v318 = AVE_Log_GetLevelStr(7);
          uint64_t v38 = (char *)this + 25784;
          syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_RESETMULTIPASS frame %d", v78, 46, v318, *(_DWORD *)(v47 + 160));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_RESETMULTIPASS frame %d", v75, 46, v76, v77);
        }
      }
      if (*v338) {
        AVE_MultiPass::FlushStats((H264VideoEncoderFrameReceiver *)((char *)this + 8), *v338, 0);
      }
      *uint64_t v38 = 0;
      if (*((void *)v38 + 3197))
      {
        FigFormatDescriptionRelease();
        *((void *)v38 + 3197) = 0;
      }
LABEL_171:
      AVE_DAL::Free(*((AVE_DAL **)this + 6415), (const void *)v47);
      goto LABEL_172;
    default:
      if (AVE_Log_CheckLevel(0x2Eu, 4))
      {
        int v69 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v70 = AVE_GetCurrTime();
        __uint64_t v71 = AVE_Log_GetLevelStr(4);
        int v72 = *(_DWORD *)(v47 + 4);
        if (v69)
        {
          printf("%lld %d AVE %s: H264FrameRec ERROR: OutputDataFromKernel.type NOT RECOGNIZED = %d. cannot process frame\n", v70, 46, v71, v72);
          __uint64_t v73 = AVE_GetCurrTime();
          int v317 = AVE_Log_GetLevelStr(4);
          uint64_t v38 = (char *)this + 25784;
          syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: OutputDataFromKernel.type NOT RECOGNIZED = %d. cannot process frame", v73, 46, v317, *(_DWORD *)(v47 + 4));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: OutputDataFromKernel.type NOT RECOGNIZED = %d. cannot process frame", v70, 46, v71, v72);
        }
      }
      goto LABEL_172;
  }
}

uint64_t H264VideoEncoderFrameReceiver::removeEPB(H264VideoEncoderFrameReceiver *this, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4)
{
  if (!a2)
  {
    uint64_t result = AVE_Log_CheckLevel(3u, 4);
    if (!result) {
      return result;
    }
    int v15 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (v15)
    {
      printf("%lld %d AVE %s: %s:%d %s | AVE - removeEPB: input buffer NULL. FAIL\n", CurrTime, 3, LevelStr, "removeEPB", 617, "p_buf_start != __null");
      AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | AVE - removeEPB: input buffer NULL. FAIL");
    return 0;
  }
  if (a3 <= 2)
  {
    uint64_t result = AVE_Log_CheckLevel(3u, 4);
    if (!result) {
      return result;
    }
    int v18 = AVE_Log_CheckConsole(3u);
    __uint64_t v19 = AVE_GetCurrTime();
    __uint64_t v20 = AVE_Log_GetLevelStr(4);
    if (v18)
    {
      printf("%lld %d AVE %s: %s:%d %s | AVE - removeEPB: lenght < 3. FAIL\n", v19, 3, v20, "removeEPB", 618, "length >= 3");
      AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | AVE - removeEPB: lenght < 3. FAIL");
    return 0;
  }
  int v4 = (int)a4;
  if (!a4)
  {
    uint64_t result = AVE_Log_CheckLevel(3u, 4);
    if (!result) {
      return result;
    }
    int v21 = AVE_Log_CheckConsole(3u);
    __uint64_t v22 = AVE_GetCurrTime();
    __uint64_t v23 = AVE_Log_GetLevelStr(4);
    if (v21)
    {
      printf("%lld %d AVE %s: %s:%d %s | AVE - removeEPB: output buffer NULL. FAIL\n", v22, 3, v23, "removeEPB", 619, "outbuffer != __null");
      AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | AVE - removeEPB: output buffer NULL. FAIL");
    return 0;
  }
  uint64_t v6 = 0;
  int v7 = 0;
  BOOL v9 = a4;
  do
  {
    int v10 = a2[v6];
    int v7 = v10 | (v7 << 8);
    if ((v7 & 0xFFFFFF) == 3)
    {
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        int v11 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v12 = AVE_GetCurrTime();
        __uint64_t v13 = AVE_Log_GetLevelStr(7);
        if (v11)
        {
          printf("%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!\n", v12, 46, v13, v9 - v4, v6);
          __uint64_t v12 = AVE_GetCurrTime();
          __uint64_t v13 = AVE_Log_GetLevelStr(7);
        }
        syslog(3, "%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!", v12, 46, v13, v9 - v4, v6);
      }
    }
    else
    {
      *v9++ = v10;
    }
    ++v6;
  }
  while (a3 != v6);
  return (v9 - v4);
}

uint64_t H264VideoEncoderFrameReceiver::CreatevideoFormatDesc(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned int *a4)
{
  uint64_t v160 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a1 + 71564;
  __uint64_t v8 = (unsigned char *)(a1 + 68221);
  BOOL v9 = (_DWORD *)(a1 + 51376);
  values = 0;
  CFTypeRef cf = 0;
  int v153 = 0;
  int v10 = *(_DWORD *)(a1 + 68256);
  if (v10 == 1)
  {
    size_t v18 = *a4 - 4;
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      int v19 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(7);
      unsigned int v22 = *a4;
      if (v19)
      {
        printf("%lld %d AVE %s: H264FrameRec: VPSLengthNoStartCode %d (%d)\n", CurrTime, 46, LevelStr, v18, v22);
        __uint64_t v23 = AVE_GetCurrTime();
        char v24 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: VPSLengthNoStartCode %d (%d)", v23, 46, v24, v18, *a4);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: VPSLengthNoStartCode %d (%d)", CurrTime, 46, LevelStr, v18, v22);
      }
    }
    int v151 = v9;
    size_t v46 = a4[1] - 4;
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      int v47 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v48 = AVE_GetCurrTime();
      __uint64_t v49 = AVE_Log_GetLevelStr(7);
      unsigned int v50 = a4[1];
      if (v47)
      {
        printf("%lld %d AVE %s: H264FrameRec: SPSLengthNoStartCode %d (%d)\n", v48, 46, v49, v46, v50);
        __uint64_t v51 = AVE_GetCurrTime();
        __uint64_t v52 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: SPSLengthNoStartCode %d (%d)", v51, 46, v52, v46, a4[1]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: SPSLengthNoStartCode %d (%d)", v48, 46, v49, v46, v50);
      }
    }
    uint64_t v148 = v7;
    int v150 = v8;
    uint64_t v146 = a1;
    long long v158 = 0u;
    long long v159 = 0u;
    long long v156 = 0u;
    long long v157 = 0u;
    size_t v143 = v46;
    size_t __n = v18;
    CFIndex v75 = v18 + v46 + 36;
    if ((int)v151[4043] >= 1)
    {
      uint64_t v76 = 0;
      int v77 = a4 + 2;
      do
      {
        uint64_t v78 = v77[v76] - 4;
        *((void *)&v156 + v76) = v78;
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          int v79 = AVE_Log_CheckConsole(0x2Eu);
          __uint64_t v80 = AVE_GetCurrTime();
          uint32x2_t v81 = AVE_Log_GetLevelStr(7);
          unsigned int v82 = v77[v76];
          if (v79)
          {
            printf("%lld %d AVE %s: H264FrameRec: PPSLengthNoStartCode0[%d] %d (%d)\n", v80, 46, v81, v76, v78, v82);
            __uint64_t v80 = AVE_GetCurrTime();
            uint32x2_t v81 = AVE_Log_GetLevelStr(7);
            unsigned int v82 = v77[v76];
          }
          syslog(3, "%lld %d AVE %s: H264FrameRec: PPSLengthNoStartCode0[%d] %d (%d)", v80, 46, v81, v76, v78, v82);
        }
        v75 += v78 + 2;
        ++v76;
      }
      while (v76 < (int)v151[4043]);
    }
    if (*v150)
    {
      if (malloc_type_malloc(0x11uLL, 0x11244186uLL)) {
        AddAmbientViewingEnvironmentSEI();
      }
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v83 = AVE_Log_CheckConsole(3u);
        __uint64_t v84 = AVE_GetCurrTime();
        int8x8_t v85 = AVE_Log_GetLevelStr(4);
        if (v83)
        {
          printf("%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec allocate SEI Data Buffer.\n", v84, 3, v85, "CreatevideoFormatDesc", 976, "SEI_Data != __null");
          __uint64_t v86 = AVE_GetCurrTime();
          __uint64_t v139 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec allocate SEI Data Buffer.", v86, 3, v139, "CreatevideoFormatDesc", 976, "SEI_Data != __null");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec allocate SEI Data Buffer.", v84, 3, v85, "CreatevideoFormatDesc", 976, "SEI_Data != __null");
        }
      }
    }
    else
    {
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        int v89 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v90 = AVE_GetCurrTime();
        __uint64_t v91 = AVE_Log_GetLevelStr(7);
        if (v89)
        {
          printf("%lld %d AVE %s: H264FrameRec: hevccSize %d\n", v90, 46, v91, v75);
          __uint64_t v92 = AVE_GetCurrTime();
          unsigned int v140 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: hevccSize %d", v92, 46, v140, v75);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: hevccSize %d", v90, 46, v91, v75);
        }
      }
      CFAllocatorRef v93 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v75);
      CFTypeRef cf = Mutable;
      if (Mutable)
      {
        int v95 = Mutable;
        CFDataSetLength(Mutable, v75);
        MutableBytePtr = CFDataGetMutableBytePtr(v95);
        CFTypeID v97 = (H264VideoEncoderFrameReceiver *)malloc_type_malloc(0x22uLL, 0x99A3ADE8uLL);
        if (v97)
        {
          unsigned int v87 = v97;
          H264VideoEncoderFrameReceiver::removeEPB(v97, a3, 0x22u, (unsigned __int8 *)v97);
          uint64_t v98 = 0;
          UInt8 *MutableBytePtr = 1;
          MutableBytePtr[1] = *((unsigned char *)v87 + 10);
          do
          {
            UInt8 v99 = *((unsigned char *)v87 + v98 + 11);
            MutableBytePtr[v98 + 2] = v99;
            *(unsigned char *)(v146 + 239320 + v98++) = v99;
          }
          while (v98 != 4);
          for (uint64_t i = 0; i != 6; ++i)
          {
            UInt8 v101 = *((unsigned char *)v87 + i + 15);
            MutableBytePtr[i + 6] = v101;
            *(unsigned char *)(v146 + 239324 + i) = v101;
          }
          MutableBytePtr[12] = *((unsigned char *)v87 + 21);
          *(_WORD *)(MutableBytePtr + 13) = 240;
          MutableBytePtr[15] = -4;
          MutableBytePtr[16] = *(unsigned char *)(v146 + 158996) | 0xFC;
          MutableBytePtr[17] = *(unsigned char *)(v146 + 159040) | 0xF8;
          MutableBytePtr[18] = *(unsigned char *)(v146 + 159044) | 0xF8;
          *(_WORD *)(MutableBytePtr + 19) = 0;
          MutableBytePtr[21] = 11;
          if (*v150) {
            char v102 = 4;
          }
          else {
            char v102 = 3;
          }
          MutableBytePtr[22] = v102;
          MutableBytePtr[23] = -96;
          *((_WORD *)MutableBytePtr + 12) = 256;
          *((_WORD *)MutableBytePtr + 13) = bswap32(__n) >> 16;
          memcpy(MutableBytePtr + 28, a3 + 4, __n);
          uint64_t v103 = &MutableBytePtr[__n];
          v103[28] = -95;
          *(_WORD *)(v103 + 29) = 256;
          *(_WORD *)(v103 + 31) = bswap32(v143) >> 16;
          memcpy(&MutableBytePtr[__n + 33], &a3[*a4 + 4], v143);
          uint64_t v104 = *a4;
          __uint64_t v105 = &MutableBytePtr[__n + 33 + v143];
          *__uint64_t v105 = -94;
          signed int v106 = v151[4043];
          *(_WORD *)(v105 + 1) = bswap32(v106) >> 16;
          uint64_t v107 = __n + 33 + v143 + 3;
          if (v106 >= 1)
          {
            uint64_t v108 = 0;
            __uint64_t v109 = &a3[v104 + 4];
            do
            {
              size_t v110 = *((void *)&v156 + v108);
              *(_WORD *)&MutableBytePtr[v107] = bswap32(v110) >> 16;
              uint64_t v111 = v107 + 2;
              uint64_t v112 = v108 + 1;
              v109 += a4[v108 + 1];
              memcpy(&MutableBytePtr[v107 + 2], v109, v110);
              uint64_t v107 = v110 + v111;
              uint64_t v108 = v112;
            }
            while (v112 < (int)v151[4043]);
          }
          if (*v150)
          {
            uint64_t v113 = &MutableBytePtr[v107];
            *uint64_t v113 = -89;
            *(_WORD *)(v113 + 1) = 256;
            uint64_t v114 = v153 - 4;
            *(_WORD *)(v113 + 3) = bswap32(v114) >> 16;
            memcpy(v113 + 5, (const void *)4, v114);
          }
          keys = @"hvcC";
          int v115 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
          __uint64_t v116 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
          CFDictionaryRef v62 = CFDictionaryCreate(v93, (const void **)&keys, &cf, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          __uint64_t v63 = CFDictionaryCreateMutable(v93, 0, v115, v116);
          CFDictionaryAddValue(v63, (const void *)*MEMORY[0x1E4F1EE20], v62);
          CFDictionaryAddValue(v63, (const void *)*MEMORY[0x1E4F1EDA8], @"HEVC");
          uint64_t v117 = v146 + 158996;
          uint64_t v118 = *(int *)(v146 + 158996);
          if (v118 >= 4)
          {
            uint64_t v71 = 3758097084;
            if (AVE_Log_CheckLevel(3u, 4))
            {
              int v132 = AVE_Log_CheckConsole(3u);
              __uint64_t v133 = AVE_GetCurrTime();
              __uint64_t v134 = AVE_Log_GetLevelStr(4);
              if (v132)
              {
                printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreatevideoFormatDesc chroma_format_idc (%d) not supported.\n", v133, 3, v134, "CreatevideoFormatDesc", 1197, "false", *(_DWORD *)(v148 + 36));
                __uint64_t v133 = AVE_GetCurrTime();
                AVE_Log_GetLevelStr(4);
              }
              syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreatevideoFormatDesc chroma_format_idc (%d) not supported.", v133);
            }
          }
          else
          {
            int v119 = *v151 + *(_DWORD *)(v146 + 159028) * dword_1BA790030[v118];
            int v120 = v151[1] + *(_DWORD *)(v146 + 159036) * dword_1BA790040[v118];
            if (AVE_Log_CheckLevel(0x2Eu, 7))
            {
              int v121 = AVE_Log_CheckConsole(0x2Eu);
              __uint64_t v122 = AVE_GetCurrTime();
              int v123 = AVE_Log_GetLevelStr(7);
              if (v121)
              {
                printf("%lld %d AVE %s: H264FrameRec: for FIG coded: %d - %d, passed %d - %d, crop %d - %d\n", v122, 46, v123, *v151, v151[1], v119, v120, *(_DWORD *)(v146 + 159028), *(_DWORD *)(v146 + 159036));
                __uint64_t v124 = AVE_GetCurrTime();
                AVE_Log_GetLevelStr(7);
                uint64_t v117 = v146 + 158996;
                syslog(3, "%lld %d AVE %s: H264FrameRec: for FIG coded: %d - %d, passed %d - %d, crop %d - %d", v124, 46);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: H264FrameRec: for FIG coded: %d - %d, passed %d - %d, crop %d - %d", v122, 46);
              }
            }
            if (*(_DWORD *)(v117 + 6668)) {
              CFDictionarySetValue(v63, (const void *)*MEMORY[0x1E4F1EDB0], (const void *)*MEMORY[0x1E4F1CFD0]);
            }
            if (v150[124]) {
              uint64_t VideoFormatDescription = VTTileEncoderSessionCreateVideoFormatDescription();
            }
            else {
              uint64_t VideoFormatDescription = VTEncoderSessionCreateVideoFormatDescription();
            }
            uint64_t v71 = VideoFormatDescription;
          }
          goto LABEL_100;
        }
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v128 = AVE_Log_CheckConsole(3u);
          __uint64_t v129 = AVE_GetCurrTime();
          IOSurfaceID v130 = AVE_Log_GetLevelStr(4);
          if (v128)
          {
            printf("%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec allocate PS EPB Data Buffer.\n", v129, 3, v130, "CreatevideoFormatDesc", 1003, "EPB_PSData != __null");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec allocate PS EPB Data Buffer.");
        }
      }
      else if (AVE_Log_CheckLevel(3u, 4))
      {
        int v125 = AVE_Log_CheckConsole(3u);
        __uint64_t v126 = AVE_GetCurrTime();
        int v127 = AVE_Log_GetLevelStr(4);
        if (v125)
        {
          printf("%lld %d AVE %s: %s:%d %s | failed to call CFDataCreateMutable %ld\n", v126, 3, v127, "CreatevideoFormatDesc", 993, "hevccData != __null", v75);
          __uint64_t v126 = AVE_GetCurrTime();
          CFIndex v142 = v75;
          IOSurfaceID v141 = AVE_Log_GetLevelStr(4);
        }
        else
        {
          CFIndex v142 = v75;
          IOSurfaceID v141 = v127;
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to call CFDataCreateMutable %ld", v126, 3, v141, "CreatevideoFormatDesc", 993, "hevccData != __null", v142);
      }
    }
    uint64_t v71 = 4294954384;
    unsigned int v87 = 0;
    goto LABEL_113;
  }
  if (!v10)
  {
    size_t v11 = a4[1] - 4;
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      int v12 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v13 = AVE_GetCurrTime();
      int v14 = AVE_Log_GetLevelStr(7);
      unsigned int v15 = a4[1];
      if (v12)
      {
        printf("%lld %d AVE %s: H264FrameRec: SPSLengthNoStartCode %d (%d)\n", v13, 46, v14, v11, v15);
        __uint64_t v16 = AVE_GetCurrTime();
        __uint64_t v17 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: SPSLengthNoStartCode %d (%d)", v16, 46, v17, v11, a4[1]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: SPSLengthNoStartCode %d (%d)", v13, 46, v14, v11, v15);
      }
    }
    uint64_t v147 = v7;
    CFAllocatorRef allocator = (CFAllocatorRef)a4;
    __uint64_t v149 = v8;
    long long v158 = 0u;
    long long v159 = 0u;
    long long v156 = 0u;
    long long v157 = 0u;
    size_t v29 = v11 + 9;
    CFIndex v30 = v11 + 9;
    if ((int)v9[4043] >= 1)
    {
      uint64_t v31 = 0;
      int v32 = (char *)allocator + 8;
      CFIndex v30 = v11 + 9;
      do
      {
        uint64_t v33 = (*(_DWORD *)&v32[4 * v31] - 4);
        *((void *)&v156 + v31) = v33;
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          int v34 = v9;
          int v35 = AVE_Log_CheckConsole(0x2Eu);
          __uint64_t v36 = AVE_GetCurrTime();
          __uint64_t v37 = AVE_Log_GetLevelStr(7);
          int v38 = *(_DWORD *)&v32[4 * v31];
          if (v35)
          {
            printf("%lld %d AVE %s: H264FrameRec: PPSLengthNoStartCode0[%d] %d (%d)\n", v36, 46, v37, v31, v33, v38);
            __uint64_t v39 = AVE_GetCurrTime();
            __uint64_t v40 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: PPSLengthNoStartCode0[%d] %d (%d)", v39, 46, v40, v31, v33, *(_DWORD *)&v32[4 * v31]);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: PPSLengthNoStartCode0[%d] %d (%d)", v36, 46, v37, v31, v33, v38);
          }
          BOOL v9 = v34;
        }
        v30 += v33 + 2;
        ++v31;
      }
      while (v31 < (int)v9[4043]);
    }
    if (*(_DWORD *)v147 == 100 || *(_DWORD *)v147 == 122) {
      v30 += 4;
    }
    size_t v41 = v11;
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      int v42 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v43 = AVE_GetCurrTime();
      __uint64_t v44 = AVE_Log_GetLevelStr(7);
      if (v42)
      {
        printf("%lld %d AVE %s: H264FrameRec: avccSize %d\n", v43, 46, v44, v30);
        __uint64_t v45 = AVE_GetCurrTime();
        int v138 = AVE_Log_GetLevelStr(7);
        size_t v41 = v11;
        syslog(3, "%lld %d AVE %s: H264FrameRec: avccSize %d", v45, 46, v138, v30);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: avccSize %d", v43, 46, v44, v30);
      }
    }
    CFAllocatorRef v53 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    values = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v30);
    CFDataSetLength((CFMutableDataRef)values, v30);
    __uint64_t v54 = CFDataGetMutableBytePtr((CFMutableDataRef)values);
    *__uint64_t v54 = 1;
    v54[1] = a3[5];
    v54[2] = a3[6];
    v54[3] = a3[7];
    *((_WORD *)v54 + 2) = -7681;
    *((_WORD *)v54 + 3) = bswap32(v41) >> 16;
    int v55 = (char *)(a3 + 4);
    memcpy(v54 + 8, a3 + 4, v41);
    v54[v41 + 8] = v9[4043];
    if ((int)v9[4043] >= 1)
    {
      uint64_t v56 = 0;
      do
      {
        size_t v57 = *((void *)&v156 + v56);
        *(_WORD *)&v54[v29] = bswap32(v57) >> 16;
        uint64_t v58 = v56 + 1;
        v55 += *((unsigned int *)allocator + v56 + 1);
        memcpy(&v54[v29 + 2], v55, v57);
        v29 += v57 + 2;
        uint64_t v56 = v58;
      }
      while (v58 < (int)v9[4043]);
    }
    if (*(_DWORD *)v147 == 100 || *(_DWORD *)v147 == 122)
    {
      __uint64_t v59 = &v54[v29];
      *__uint64_t v59 = *(unsigned char *)(v147 + 36) | 0xFC;
      v59[1] = *(unsigned char *)(v147 + 44) | 0xF8;
      v59[2] = *(unsigned char *)(v147 + 48) | 0xF8;
      v59[3] = 0;
    }
    keys = @"avcC";
    int v60 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    int v61 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    CFDictionaryRef v62 = CFDictionaryCreate(v53, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    __uint64_t v63 = CFDictionaryCreateMutable(v53, 0, v60, v61);
    CFDictionaryAddValue(v63, (const void *)*MEMORY[0x1E4F1EE20], v62);
    CFDictionaryAddValue(v63, (const void *)*MEMORY[0x1E4F1EDA8], @"H.264");
    uint64_t v64 = *(int *)(v147 + 36);
    if (v64 >= 4)
    {
      uint64_t v71 = 3758097084;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v72 = AVE_Log_CheckConsole(3u);
        __uint64_t v73 = AVE_GetCurrTime();
        int v74 = AVE_Log_GetLevelStr(4);
        if (v72)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreatevideoFormatDesc chroma_format_idc (%d) not supported.\n", v73, 3, v74, "CreatevideoFormatDesc", 856, "false", *(_DWORD *)(v147 + 36));
          __uint64_t v73 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreatevideoFormatDesc chroma_format_idc (%d) not supported.", v73);
      }
    }
    else
    {
      int v65 = *v9 + *(_DWORD *)(v147 + 1184) * dword_1BA790030[v64];
      int v66 = v9[1] + *(_DWORD *)(v147 + 1192) * dword_1BA790040[v64];
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        int v67 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v68 = AVE_GetCurrTime();
        int v69 = AVE_Log_GetLevelStr(7);
        if (v67)
        {
          printf("%lld %d AVE %s: H264FrameRec: for FIG coded: %d - %d, passed %d - %d, crop %d - %d\n", v68, 46, v69, *v9, v9[1], v65, v66, *(_DWORD *)(v147 + 1184), *(_DWORD *)(v147 + 1192));
          __uint64_t v70 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: for FIG coded: %d - %d, passed %d - %d, crop %d - %d", v70, 46);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: for FIG coded: %d - %d, passed %d - %d, crop %d - %d", v68, 46);
        }
      }
      if (*(_DWORD *)(v147 + 1096)) {
        CFDictionarySetValue(v63, (const void *)*MEMORY[0x1E4F1EDB0], (const void *)*MEMORY[0x1E4F1CFD0]);
      }
      if (v149[124]) {
        uint64_t v131 = VTTileEncoderSessionCreateVideoFormatDescription();
      }
      else {
        uint64_t v131 = VTEncoderSessionCreateVideoFormatDescription();
      }
      uint64_t v71 = v131;
    }
    unsigned int v87 = 0;
LABEL_100:
    if (v63) {
      CFRelease(v63);
    }
    if (v62) {
      CFRelease(v62);
    }
    goto LABEL_113;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    int v25 = AVE_Log_CheckConsole(3u);
    __uint64_t v26 = AVE_GetCurrTime();
    __uint64_t v27 = AVE_Log_GetLevelStr(4);
    if (v25)
    {
      printf("%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec Type not recognized.\n", v26, 3, v27, "CreatevideoFormatDesc", 1248, "false");
      __uint64_t v28 = AVE_GetCurrTime();
      int v137 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec Type not recognized.", v28, 3, v137, "CreatevideoFormatDesc", 1248, "false");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec Type not recognized.", v26, 3, v27, "CreatevideoFormatDesc", 1248, "false");
    }
  }
  unsigned int v87 = 0;
  uint64_t v71 = 4294954384;
LABEL_113:
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (values)
  {
    CFRelease(values);
    values = 0;
  }
  if (v87) {
    free(v87);
  }
  return v71;
}

uint64_t H264VideoEncoderFrameReceiver::CreatevideoFormatDesc_MVHEVC(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a1 + 67932;
  unsigned int v51 = 0;
  theuint64_t Dict = 0;
  if (*(unsigned char *)(a1 + 68221))
  {
    if (malloc_type_malloc(0x11uLL, 0xC8E11BDFuLL)) {
      AddAmbientViewingEnvironmentSEI();
    }
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      int v12 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed to allocate SEI memory %d\n", CurrTime, 46, LevelStr, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", 1311, "pSEIData != __null", 17);
        __uint64_t CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to allocate SEI memory %d", CurrTime, 46);
    }
    goto LABEL_50;
  }
  if (*(_DWORD *)v8 >= 2u)
  {
    uint64_t MVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults = VTEncoderSessionCreateMVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults();
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      int v25 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v26 = AVE_GetCurrTime();
      __uint64_t v27 = AVE_Log_GetLevelStr(4);
      if (v25)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed VTEncoderSessionCreateMVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults %d\n", v26, 46, v27, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", 1324, "pSEI3D != __null", MVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults);
        __uint64_t v26 = AVE_GetCurrTime();
        uint64_t v46 = MVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults;
        size_t v41 = AVE_Log_GetLevelStr(4);
      }
      else
      {
        uint64_t v46 = MVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults;
        size_t v41 = v27;
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed VTEncoderSessionCreateMVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults %d", v26, 46, v41, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", 1324, "pSEI3D != __null", v46);
    }
    goto LABEL_50;
  }
  if (!*(_DWORD *)(a5 + 172))
  {
    AVE_PS_Parse(a3, a4, 1, 2, (int *)v49);
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      int v31 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v32 = AVE_GetCurrTime();
      uint64_t v33 = AVE_Log_GetLevelStr(4);
      if (v31)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed to parse PS %p %d\n", v32, 46, v33, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", 1335, "pSEIData != __null", a3, a4);
        __uint64_t v34 = AVE_GetCurrTime();
        int v42 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to parse PS %p %d", v34, 46, v42);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to parse PS %p %d", v32, 46, v33);
      }
    }
    goto LABEL_50;
  }
  long long v10 = *(_OWORD *)(a5 + 220);
  _OWORD v49[2] = *(_OWORD *)(a5 + 204);
  v49[3] = v10;
  v49[4] = *(_OWORD *)(a5 + 236);
  int v50 = *(_DWORD *)(a5 + 252);
  long long v11 = *(_OWORD *)(a5 + 188);
  v49[0] = *(_OWORD *)(a5 + 172);
  v49[1] = v11;
  AVE_PS_Make_hvcC_Dict(0, a3, (unsigned int *)v49, 0, v51, 0, 0, (const void *)(a1 + 158424), &theDict);
  if (!theDict)
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      int v21 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v22 = AVE_GetCurrTime();
      __uint64_t v23 = AVE_Log_GetLevelStr(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed to make hvcC dictionary %p %d\n", v22, 46, v23, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", 1347, "pCFDict != __null", a3, a4);
        __uint64_t v22 = AVE_GetCurrTime();
        __uint64_t v45 = a3;
        uint64_t v47 = a4;
        uint64_t v44 = 1347;
        __uint64_t v40 = AVE_Log_GetLevelStr(4);
      }
      else
      {
        __uint64_t v45 = a3;
        uint64_t v47 = a4;
        uint64_t v44 = 1347;
        __uint64_t v40 = v23;
      }
      char v24 = "%lld %d AVE %s: %s::%s:%d %s | failed to make hvcC dictionary %p %d";
      goto LABEL_46;
    }
LABEL_50:
    uint64_t v15 = 4294966293;
    goto LABEL_51;
  }
  uint64_t v15 = AVE_PS_Add_lhvC_Dict(1, a3, (unsigned int *)v49, (const void *)(a1 + 158424), theDict);
  if (!theDict)
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      int v28 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v22 = AVE_GetCurrTime();
      size_t v29 = AVE_Log_GetLevelStr(4);
      if (v28)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed to add lhvC dictionary %p %d\n", v22, 46, v29, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", 1353, "pCFDict != __null", a3, a4);
        __uint64_t v22 = AVE_GetCurrTime();
        __uint64_t v45 = a3;
        uint64_t v47 = a4;
        uint64_t v44 = 1353;
        __uint64_t v40 = AVE_Log_GetLevelStr(4);
      }
      else
      {
        __uint64_t v45 = a3;
        uint64_t v47 = a4;
        uint64_t v44 = 1353;
        __uint64_t v40 = v29;
      }
      char v24 = "%lld %d AVE %s: %s::%s:%d %s | failed to add lhvC dictionary %p %d";
LABEL_46:
      syslog(3, v24, v22, 46, v40, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", v44, "pCFDict != __null", v45, v47);
      goto LABEL_50;
    }
    goto LABEL_50;
  }
  if (*(_DWORD *)(a1 + 165664)) {
    CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F1EDB0], (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  int v16 = *(_DWORD *)(a1 + 51376);
  uint64_t v17 = *(int *)(a1 + 158996);
  if ((int)v17 > 3)
  {
    int v19 = 0;
  }
  else
  {
    size_t v18 = (int *)((char *)&gc_iaAVE_SubC + 8 * v17);
    int v20 = *v18;
    int v19 = v18[1];
    v16 -= v20 * *(_DWORD *)(a1 + 159028);
  }
  int v30 = *(_DWORD *)(a1 + 51380) - *(_DWORD *)(a1 + 159036) * v19;
  if (*(unsigned char *)(v8 + 413))
  {
    if (!VTTileEncoderSessionCreateVideoFormatDescription()) {
      goto LABEL_51;
    }
  }
  else if (!VTEncoderSessionCreateVideoFormatDescription())
  {
    goto LABEL_51;
  }
  if (AVE_Log_CheckLevel(0x2Eu, 4))
  {
    int v35 = AVE_Log_CheckConsole(0x2Eu);
    __uint64_t v36 = AVE_GetCurrTime();
    __uint64_t v37 = AVE_Log_GetLevelStr(4);
    if (v35)
    {
      printf("%lld %d AVE %s: %s::%s:%d %s | failed to create format descriptor %d %d %p\n", v36, 46, v37, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", 1390, "res == noErr", v16, v30, theDict);
      __uint64_t v38 = AVE_GetCurrTime();
      __uint64_t v43 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create format descriptor %d %d %p", v38, 46, v43);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create format descriptor %d %d %p", v36, 46, v37);
    }
  }
  uint64_t v15 = 4294966296;
LABEL_51:
  if (theDict)
  {
    CFRelease(theDict);
    theuint64_t Dict = 0;
  }
  return v15;
}

uint64_t H264VideoEncoderFrameReceiver::DoneWithThisFrameFromTheHW(uint64_t a1, uint64_t a2, int a3)
{
  if (a2)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 916);
    if (v4 >= 0x1F)
    {
      uint64_t v11 = 3758097084;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v15 = AVE_Log_CheckConsole(3u);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v15)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: DoneWithThisFrameFromTheHW Frame->PlaneNumber = %d\n", CurrTime, 3, LevelStr, "DoneWithThisFrameFromTheHW", 1424, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(_DWORD *)(a2 + 916));
          __uint64_t CurrTime = AVE_GetCurrTime();
          Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: DoneWithThisFrameFromTheHW Frame->PlaneNumber = %d", CurrTime, 3, LevelStr, "DoneWithThisFrameFromTheHW", 1424, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(unsigned int *)(a2 + 916));
      }
    }
    else
    {
      uint64_t v6 = *(void *)(a1 + 8 * v4 + 27072);
      if (v6)
      {
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          int v8 = AVE_Log_CheckConsole(0x2Eu);
          __uint64_t v9 = AVE_GetCurrTime();
          long long v10 = AVE_Log_GetLevelStr(7);
          if (v8)
          {
            printf("%lld %d AVE %s: %s:%d H264FrameRec: DoneWithThis PlaneNumber %d size %d\n", v9, 46, v10, "DoneWithThisFrameFromTheHW", 1430, *(_DWORD *)(a2 + 916), *(_DWORD *)(v6 + 384));
            __uint64_t v9 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(7);
          }
          syslog(3, "%lld %d AVE %s: %s:%d H264FrameRec: DoneWithThis PlaneNumber %d size %d", v9);
        }
        AVE_Dump_WriteVQMetrics(*(void **)(a1 + 71552), *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 160), (float *)(v6 + 182920));
        AVE_Dump_WriteFPS(*(void **)(a1 + 71552), *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 160), (double *)(a2 + 67288));
        File = (FILE *)AVE_Dump_FindFile(*(void *)(a1 + 71552), 7u, *(_DWORD *)(a2 + 12));
        AVE_MCTFStats_PrintAll((const void *)(v6 + 181488), File, *(_DWORD *)(a2 + 160));
        __uint64_t v23 = (const void *)AVE_Dump_FindFile(*(void *)(a1 + 71552), 6u, *(_DWORD *)(a2 + 12));
        AVE_FwStats_PrintAll((const void *)(v6 + 143600), (const void *)(a2 + 27568), v23, *(_DWORD *)(a2 + 160), a3);
        AVE_Dump_WriteHwEventTrace(*(void **)(a1 + 71552), *(_DWORD *)(a2 + 12), (int *)(v6 + 181640));
        bzero((void *)v6, 0x2CAB8uLL);
      }
      else if (AVE_Log_CheckLevel(3u, 4))
      {
        uint64_t v11 = AVE_Log_CheckConsole(3u);
        __uint64_t v18 = AVE_GetCurrTime();
        int v19 = AVE_Log_GetLevelStr(4);
        if (!v11)
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader == NULL");
          return v11;
        }
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader == NULL\n", v18, 3, v19, "DoneWithThisFrameFromTheHW", 1428, "codedHeader != __null");
        __uint64_t v20 = AVE_GetCurrTime();
        int v21 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader == NULL", v20, 3, v21, "DoneWithThisFrameFromTheHW", 1428, "codedHeader != __null");
      }
      return 0;
    }
  }
  else
  {
    uint64_t v11 = 3758097084;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v12 = AVE_Log_CheckConsole(3u);
      __uint64_t v13 = AVE_GetCurrTime();
      int v14 = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: DoneWithThisFrameFromTheHW Frame == NULL\n", v13, 3, v14, "DoneWithThisFrameFromTheHW", 1423, "Frame != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: DoneWithThisFrameFromTheHW Frame == NULL");
    }
  }
  return v11;
}

uint64_t H264VideoEncoderFrameReceiver::CollectSlicesSizes(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v17 = 3758097084;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v18 = AVE_Log_CheckConsole(3u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CollectSlicesSizes Frame == NULL ???\n", CurrTime, 3, LevelStr, "CollectSlicesSizes", 1456, "Frame != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CollectSlicesSizes Frame == NULL ???");
    }
    return v17;
  }
  if (*(_DWORD *)(a2 + 916) > 0x1Eu)
  {
    uint64_t v17 = 3758097084;
    if (!AVE_Log_CheckLevel(3u, 4)) {
      return v17;
    }
    int v21 = AVE_Log_CheckConsole(3u);
    __uint64_t v22 = AVE_GetCurrTime();
    __uint64_t v23 = AVE_Log_GetLevelStr(4);
    if (v21)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CollectSlicesSizes Frame->PlaneNumber = %d\n", v22, 3, v23, "CollectSlicesSizes", 1457, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(_DWORD *)(a2 + 916));
      __uint64_t v22 = AVE_GetCurrTime();
      __uint64_t v23 = AVE_Log_GetLevelStr(4);
      __uint64_t v122 = "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))";
      uint64_t v123 = *(unsigned int *)(a2 + 916);
      uint64_t v121 = 1457;
    }
    else
    {
      uint64_t v123 = *(unsigned int *)(a2 + 916);
      uint64_t v121 = 1457;
      __uint64_t v122 = "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))";
    }
    int v119 = v23;
    char v24 = "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CollectSlicesSizes Frame->PlaneNumber = %d";
LABEL_79:
    syslog(3, v24, v22, 3, v119, "CollectSlicesSizes", v121, v122, v123);
    return v17;
  }
  uint64_t v4 = 0;
  int v5 = (_DWORD *)(a1 + 239348);
  __uint64_t v126 = (unsigned char *)(a1 + 67552);
  uint64_t v129 = a1 + 51072;
  uint64_t v6 = (_DWORD *)(a1 + 28032);
  do
  {
    uint64_t v7 = 0;
    int v8 = v6;
    do
    {
      uint64_t v9 = 3;
      long long v10 = v8;
      do
      {
        *long long v10 = 0;
        v10[2880] = 0;
        ++v10;
        --v9;
      }
      while (v9);
      ++v7;
      v8 += 3;
    }
    while (v7 != 32);
    ++v4;
    v6 += 96;
  }
  while (v4 != 30);
  *(_DWORD *)(a1 + 51080) = 0;
  *(void *)uint64_t v129 = 0;
  uint64_t v11 = a1 + 12 * *(unsigned int *)(a2 + 168) + 51084;
  *(_DWORD *)(v11 + 8) = 0;
  *(void *)uint64_t v11 = 0;
  if (AVE_Log_CheckLevel(0x2Eu, 7))
  {
    int v12 = AVE_Log_CheckConsole(0x2Eu);
    __uint64_t v13 = AVE_GetCurrTime();
    int v14 = AVE_Log_GetLevelStr(7);
    int v15 = *(_DWORD *)(a2 + 916);
    if (v12)
    {
      printf("%lld %d AVE %s: H264FrameRec: CollectSlicesSizes ONLY ONE TO LOOK AT PlaneNumber = %d\n", v13, 46, v14, v15);
      __uint64_t v16 = AVE_GetCurrTime();
      uint64_t v118 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: H264FrameRec: CollectSlicesSizes ONLY ONE TO LOOK AT PlaneNumber = %d", v16, 46, v118, *(_DWORD *)(a2 + 916));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264FrameRec: CollectSlicesSizes ONLY ONE TO LOOK AT PlaneNumber = %d", v13, 46, v14, v15);
    }
  }
  uint64_t v25 = *(void *)(a1 + 8 * *(int *)(a2 + 916) + 27072);
  if (!v25)
  {
    uint64_t v17 = 3758097084;
    if (!AVE_Log_CheckLevel(3u, 4)) {
      return v17;
    }
    int v37 = AVE_Log_CheckConsole(3u);
    __uint64_t v22 = AVE_GetCurrTime();
    __uint64_t v38 = AVE_Log_GetLevelStr(4);
    if (v37)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_CodedBuffPointerDataHeader[%d] == NULL\n", v22, 3, v38, "CollectSlicesSizes", 1481, "codedHeader != __null", *(_DWORD *)(a2 + 916));
      __uint64_t v22 = AVE_GetCurrTime();
      __uint64_t v38 = AVE_Log_GetLevelStr(4);
      __uint64_t v122 = "codedHeader != __null";
      uint64_t v123 = *(unsigned int *)(a2 + 916);
      uint64_t v121 = 1481;
    }
    else
    {
      uint64_t v123 = *(unsigned int *)(a2 + 916);
      uint64_t v121 = 1481;
      __uint64_t v122 = "codedHeader != __null";
    }
    int v119 = v38;
    char v24 = "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_CodedBuffPointerDataHeader[%d] == NULL";
    goto LABEL_79;
  }
  __uint64_t v124 = v5;
  uint64_t v26 = *(void *)(a1 + 8 * *(int *)(a2 + 916) + 27072);
  uint64_t v127 = v26;
  uint64_t v27 = v25 + 12 * *(unsigned int *)(a2 + 168);
  uint64_t v28 = *(void *)(v27 + 244);
  uint64_t v29 = a1 + 12 * *(unsigned int *)(a2 + 168) + 51084;
  *(_DWORD *)(v29 + 8) = *(_DWORD *)(v27 + 252);
  *(void *)uint64_t v29 = v28;
  if (AVE_Log_CheckLevel(0x2Eu, 7))
  {
    int v30 = AVE_Log_CheckConsole(0x2Eu);
    __uint64_t v31 = AVE_GetCurrTime();
    __uint64_t v32 = AVE_Log_GetLevelStr(7);
    unsigned int v33 = *(_DWORD *)(a2 + 168);
    int v34 = *(_DWORD *)(a1 + 12 * v33 + 51092);
    if (v30)
    {
      printf("%lld %d AVE %s: H264FrameRec: CollectSlicesSizes Filler[%d] %d %d\n", v31, 46, v32, v33, *(char *)(a1 + 12 * v33 + 51091), v34);
      __uint64_t v35 = AVE_GetCurrTime();
      __uint64_t v36 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: H264FrameRec: CollectSlicesSizes Filler[%d] %d %d", v35, 46, v36, *(_DWORD *)(a2 + 168), *(char *)(a1 + 12 * *(unsigned int *)(a2 + 168) + 51091), *(_DWORD *)(a1 + 12 * *(unsigned int *)(a2 + 168) + 51092));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264FrameRec: CollectSlicesSizes Filler[%d] %d %d", v31, 46, v32, v33, *(char *)(a1 + 12 * v33 + 51091), v34);
    }
  }
  unsigned int v39 = 0;
  *(_DWORD *)(v129 + 8) = 3 * *(_DWORD *)(v26 + 240);
  uint64_t v40 = a1 + 28032;
  uint64_t v128 = a1 + 28036;
  uint64_t v41 = -3072;
  while (1)
  {
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      int v42 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v43 = AVE_GetCurrTime();
      uint64_t v44 = AVE_Log_GetLevelStr(7);
      int v45 = *(unsigned __int8 *)(v26 + 908);
      if (v42)
      {
        printf("%lld %d AVE %s: H264FrameRec: codedHeader->SliceData[%d].ui32BytesWritten = %d ui32BytesToRemoveAtTheEndOfTheSliceForContextSwitch %d\n", v43, 46, v44, v39, *(_DWORD *)(v26 + 384), v45);
        __uint64_t v46 = AVE_GetCurrTime();
        uint64_t v47 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader->SliceData[%d].ui32BytesWritten = %d ui32BytesToRemoveAtTheEndOfTheSliceForContextSwitch %d", v46, 46, v47, v39, *(_DWORD *)(v26 + 384), *(unsigned __int8 *)(v26 + 908));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader->SliceData[%d].ui32BytesWritten = %d ui32BytesToRemoveAtTheEndOfTheSliceForContextSwitch %d", v43, 46, v44, v39, *(_DWORD *)(v26 + 384), v45);
      }
    }
    if (!*(_DWORD *)(v26 + 384)) {
      break;
    }
    if (*(char *)(v26 + 908) < 0)
    {
      uint64_t v17 = 3758097084;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v90 = AVE_Log_CheckConsole(3u);
        __uint64_t v91 = AVE_GetCurrTime();
        __uint64_t v92 = AVE_Log_GetLevelStr(4);
        if (v90)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader->SliceData[%d].ui32BytesToRemoveAtTheEndOfTheSliceForContextSwitch = %d\n", v91, 3, v92, "CollectSlicesSizes", 1499, "codedHeader->SliceData[i].ui32BytesToRemoveAtTheEndOfTheSliceForContextSwitch < 128", v39, *(unsigned __int8 *)(v26 + 908));
          __uint64_t v91 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader->SliceData[%d].ui32BytesToRemoveAtTheEndOfTheSliceForContextSwitch = %d", v91);
      }
      return v17;
    }
    if (*(_DWORD *)(v26 + 920) && *(void *)(v26 + 912))
    {
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        int v48 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v49 = AVE_GetCurrTime();
        int v50 = AVE_Log_GetLevelStr(7);
        int v51 = *(_DWORD *)(v26 + 920);
        if (v48)
        {
          printf("%lld %d AVE %s: H264FrameRec: codedHeader->SliceData[%d].ui32SliceHeaderSize = %d\n", v49, 46, v50, v39, v51);
          __uint64_t v52 = AVE_GetCurrTime();
          CFAllocatorRef v53 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader->SliceData[%d].ui32SliceHeaderSize = %d", v52, 46, v53, v39, *(_DWORD *)(v26 + 920));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader->SliceData[%d].ui32SliceHeaderSize = %d", v49, 46, v50, v39, v51);
        }
      }
      *(_DWORD *)(a1 + 39552 + v41 + 384 * *(int *)(a2 + 916) + 3072) = *(_DWORD *)(v26 + 920);
      if (v41 != -3072) {
        *(_DWORD *)(a1 + 39556 + v41 + 384 * *(int *)(a2 + 916) + 3072) = *(_DWORD *)(a1
      }
                                                                                      + 384 * *(int *)(a2 + 916)
                                                                                      + 12 * (v39 - 1)
                                                                                      + 39552)
                                                                          + *(_DWORD *)(a1
                                                                                      + 384 * *(int *)(a2 + 916)
                                                                                      + 12 * (v39 - 1)
                                                                                      + 39556);
    }
    int v54 = *(unsigned __int8 *)(v26 + 908);
    *(_DWORD *)(v40 + v41 + 384 * *(int *)(a2 + 916) + 3072) = *(_DWORD *)(v26 + 384) - v54;
    *(_DWORD *)(a1 + 28040 + v41 + 384 * *(int *)(a2 + 916) + 3072) = v54;
    uint64_t v55 = *(int *)(a2 + 916);
    *(void *)uint64_t v129 = v40 + v41 + 384 * (int)v55 + 3072;
    if (v41 != -3072)
    {
      if (*v126)
      {
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          int v56 = AVE_Log_CheckConsole(0x2Eu);
          __uint64_t v57 = AVE_GetCurrTime();
          uint64_t v58 = AVE_Log_GetLevelStr(7);
          uint64_t v59 = v39 - 1;
          int v60 = *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28032);
          int v61 = *(_DWORD *)(v128 + v41 + 384 * *(int *)(a2 + 916) + 3072);
          int v62 = *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28040);
          uint64_t v63 = v127 + 544 * v59;
          int v64 = *(unsigned __int8 *)(v63 + 908);
          if (v56)
          {
            int v65 = (_DWORD *)(v63 + 384);
            int v66 = (unsigned __int8 *)(v63 + 908);
            printf("%lld %d AVE %s: H264FrameRec: Slice %d. Updating values Size %d Offset %d Bytes to Remove %d -- ui32BytesWritten %d ui32BytesToRemove %d\n", v57, 46, v58, v39, v60, v61, v62, *(_DWORD *)(v63 + 384), v64);
            __uint64_t v67 = AVE_GetCurrTime();
            __uint64_t v68 = AVE_Log_GetLevelStr(7);
            uint64_t v40 = a1 + 28032;
            syslog(3, "%lld %d AVE %s: H264FrameRec: Slice %d. Updating values Size %d Offset %d Bytes to Remove %d -- ui32BytesWritten %d ui32BytesToRemove %d", v67, 46, v68, v39, *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28032), *(_DWORD *)(v128 + v41 + 384 * *(int *)(a2 + 916) + 3072), *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28040), *v65, *v66);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: Slice %d. Updating values Size %d Offset %d Bytes to Remove %d -- ui32BytesWritten %d ui32BytesToRemove %d", v57, 46, v58, v39, v60, v61, v62, *(_DWORD *)(v63 + 384), v64);
          }
          uint64_t v69 = a1 + 28036;
          uint64_t v70 = v127;
        }
        else
        {
          uint64_t v59 = v39 - 1;
          uint64_t v70 = v127;
          uint64_t v69 = a1 + 28036;
        }
        uint64_t v71 = v70 + 544 * v59;
        int v72 = *(_DWORD *)(v71 + 384);
        LODWORD(v71) = *(unsigned __int8 *)(v71 + 908);
        *(_DWORD *)(a1 + 28032 + 384 * *(int *)(a2 + 916) + 12 * v59) = v72 - v71;
        *(_DWORD *)(a1 + 28032 + 384 * *(int *)(a2 + 916) + 12 * v59 + 8) = v71;
        uint64_t v55 = *(int *)(a2 + 916);
      }
      else
      {
        LODWORD(v59) = v39 - 1;
        uint64_t v69 = a1 + 28036;
      }
      uint64_t v73 = 3 * v55;
      int v74 = (_DWORD *)(a1 + (v73 << 7) + 12 * v59 + 28032);
      *(_DWORD *)(v69 + v41 + (v73 << 7) + 3072) = *v74 + v74[1] + v74[2];
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        int v75 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v76 = AVE_GetCurrTime();
        int v77 = AVE_Log_GetLevelStr(7);
        int v78 = *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28032);
        int v79 = *(_DWORD *)(v128 + v41 + 384 * *(int *)(a2 + 916) + 3072);
        int v80 = *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28040);
        uint64_t v81 = v127 + 544 * v59;
        int v82 = *(unsigned __int8 *)(v81 + 908);
        if (v75)
        {
          int v125 = (_DWORD *)(v81 + 384);
          int v83 = (unsigned __int8 *)(v81 + 908);
          printf("%lld %d AVE %s: H264FrameRec: Slice %d. UpdatED values Size %d Offset %d Bytes to Remove %d -- ui32BytesWritten %d ui32BytesToRemove %d\n", v76, 46, v77, v39, v78, v79, v80, *(_DWORD *)(v81 + 384), v82);
          __uint64_t v84 = AVE_GetCurrTime();
          int8x8_t v85 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: Slice %d. UpdatED values Size %d Offset %d Bytes to Remove %d -- ui32BytesWritten %d ui32BytesToRemove %d", v84, 46, v85, v39, *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28032), *(_DWORD *)(v128 + v41 + 384 * *(int *)(a2 + 916) + 3072), *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28040), *v125, *v83);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: Slice %d. UpdatED values Size %d Offset %d Bytes to Remove %d -- ui32BytesWritten %d ui32BytesToRemove %d", v76, 46, v77, v39, v78, v79, v80, *(_DWORD *)(v81 + 384), v82);
        }
        uint64_t v40 = a1 + 28032;
      }
    }
    v26 += 544;
    ++v39;
    v41 += 12;
    if (!v41)
    {
      unsigned int v39 = 256;
      if (*v124 != 2)
      {
LABEL_74:
        uint64_t v17 = 3758097084;
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v93 = AVE_Log_CheckConsole(3u);
          __uint64_t v94 = AVE_GetCurrTime();
          int v95 = AVE_Log_GetLevelStr(4);
          if (v93)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: TotalSlices = %d\n", v94, 3, v95, "CollectSlicesSizes", 1552, "TotalSlices <= ((32) < (256) ? (32) : (256))", v39);
            __uint64_t v94 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: TotalSlices = %d", v94);
        }
        return v17;
      }
LABEL_67:
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        int v86 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v87 = AVE_GetCurrTime();
        int v88 = AVE_Log_GetLevelStr(7);
        if (v86)
        {
          printf("%lld %d AVE %s: H264FrameRec: CollectSlicesSizes TotalSlices = %d\n", v87, 46, v88, v39);
          __uint64_t v89 = AVE_GetCurrTime();
          int v120 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: CollectSlicesSizes TotalSlices = %d", v89, 46, v120, v39);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: CollectSlicesSizes TotalSlices = %d", v87, 46, v88, v39);
        }
      }
      uint64_t v96 = 0;
      CFTypeID v97 = (int *)(a1 + 28032);
      do
      {
        uint64_t v98 = 0;
        UInt8 v99 = v97;
        do
        {
          if (!*v99) {
            break;
          }
          if (v99[2880] && AVE_Log_CheckLevel(0x2Eu, 7))
          {
            int v100 = AVE_Log_CheckConsole(0x2Eu);
            __uint64_t v101 = AVE_GetCurrTime();
            char v102 = AVE_Log_GetLevelStr(7);
            int v103 = v99[2880];
            int v104 = v99[2882];
            if (v100)
            {
              printf("%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSliceHeadersSizes \t= [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d\n", v101, 46, v102, v96, v98, v96, v98, v103, v99[2881], v104);
              __uint64_t v105 = AVE_GetCurrTime();
              signed int v106 = AVE_Log_GetLevelStr(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSliceHeadersSizes \t= [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v105, 46, v106, v96, v98, v96, v98, v99[2880], v99[2881], v99[2882]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSliceHeadersSizes \t= [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v101, 46, v102, v96, v98, v96, v98, v103, v99[2881], v104);
            }
          }
          if (AVE_Log_CheckLevel(0x2Eu, 7))
          {
            int v107 = AVE_Log_CheckConsole(0x2Eu);
            __uint64_t v108 = AVE_GetCurrTime();
            __uint64_t v109 = AVE_Log_GetLevelStr(7);
            int v110 = *v99;
            int v111 = v99[2];
            if (v107)
            {
              printf("%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes \t\t= [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d\n", v108, 46, v109, v96, v98, v96, v98, v110, v99[1], v111);
              __uint64_t v112 = AVE_GetCurrTime();
              uint64_t v113 = AVE_Log_GetLevelStr(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes \t\t= [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v112, 46, v113, v96, v98, v96, v98, *v99, v99[1], v99[2]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes \t\t= [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v108, 46, v109, v96, v98, v96, v98, v110, v99[1], v111);
            }
          }
          ++v98;
          v99 += 3;
        }
        while (v98 != 32);
        ++v96;
        v97 += 96;
      }
      while (v96 != 30);
      return 0;
    }
  }
  if (*v124 == 2) {
    goto LABEL_67;
  }
  if (v39 >= 0x21) {
    goto LABEL_74;
  }
  if (*(void *)v129) {
    goto LABEL_67;
  }
  uint64_t v17 = 3758097084;
  if (AVE_Log_CheckLevel(3u, 4))
  {
    int v115 = AVE_Log_CheckConsole(3u);
    __uint64_t v116 = AVE_GetCurrTime();
    uint64_t v117 = AVE_Log_GetLevelStr(4);
    if (v115)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_pLastOutputSlicesSizes = NULL\n", v116, 3, v117, "CollectSlicesSizes", 1553, "m_pLastOutputSlicesSizes != __null");
      AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_pLastOutputSlicesSizes = NULL");
  }
  return v17;
}

void H264VideoEncoderFrameReceiver::PrintBufferInfo(H264VideoEncoderFrameReceiver *this, uint64_t a2, uint64_t a3, unsigned __int8 *a4, int a5, unsigned __int8 *a6, unsigned __int8 *a7, uint64_t a8, unsigned __int8 *a9)
{
  if (AVE_Log_CheckLevel(0x2Eu, 4))
  {
    int v17 = AVE_Log_CheckConsole(0x2Eu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (v17)
    {
      printf("%lld %d AVE %s: AVE %s:%d %d %d Src %p >= %p + %d | Dst %p >= %p + %zu\n", CurrTime, 46, LevelStr, "PrintBufferInfo", 1694, a2, a3, a6, a4, a5, a9, a7, a8);
      __uint64_t v19 = AVE_GetCurrTime();
      __uint64_t v20 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: AVE %s:%d %d %d Src %p >= %p + %d | Dst %p >= %p + %zu", v19, 46, v20, "PrintBufferInfo", 1694, a2, a3);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AVE %s:%d %d %d Src %p >= %p + %d | Dst %p >= %p + %zu", CurrTime, 46, LevelStr, "PrintBufferInfo", 1694, a2, a3);
    }
  }
  uint64_t v21 = 0;
  __uint64_t v22 = (int *)((char *)this + 384 * a2 + 28032);
  do
  {
    if (!*v22) {
      break;
    }
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      int v23 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v24 = AVE_GetCurrTime();
      uint64_t v25 = AVE_Log_GetLevelStr(4);
      int v26 = *v22;
      int v27 = v22[1];
      int v28 = v22[2880];
      if (v23)
      {
        printf("%lld %d AVE %s: AVE %s:%d %d %d %d %d\n", v24, 46, v25, "PrintBufferInfo", 1703, v21, v26, v22[1], v28);
        __uint64_t v24 = AVE_GetCurrTime();
        uint64_t v25 = AVE_Log_GetLevelStr(4);
        int v26 = *v22;
        int v27 = v22[1];
        int v28 = v22[2880];
      }
      syslog(3, "%lld %d AVE %s: AVE %s:%d %d %d %d %d", v24, 46, v25, "PrintBufferInfo", 1703, v21, v26, v27, v28);
    }
    ++v21;
    v22 += 3;
  }
  while (v21 != 32);
}

uint64_t H264VideoEncoderFrameReceiver::AddAllSEIs(uint64_t a1, uint64_t a2, char *a3, int a4, char a5, int a6, CFDataRef theData)
{
  if (!a2)
  {
    uint64_t v13 = 3758097084;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v20 = AVE_Log_CheckConsole(3u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame == NULL\n", CurrTime, 3, LevelStr, "AddAllSEIs", 1717, "Frame != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame == NULL");
    }
    return v13;
  }
  uint64_t v7 = a3;
  if (!a3)
  {
    uint64_t v13 = 3758097084;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v23 = AVE_Log_CheckConsole(3u);
      __uint64_t v24 = AVE_GetCurrTime();
      uint64_t v25 = AVE_Log_GetLevelStr(4);
      if (v23)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer StreamBufferCopy == NULL\n", v24, 3, v25, "AddAllSEIs", 1718, "StreamBufferCopy != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer StreamBufferCopy == NULL");
    }
    return v13;
  }
  if (*(_DWORD *)(a2 + 916) >= 0x1Fu)
  {
    uint64_t v13 = 3758097084;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v26 = AVE_Log_CheckConsole(3u);
      __uint64_t v27 = AVE_GetCurrTime();
      int v28 = AVE_Log_GetLevelStr(4);
      if (v26)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame->PlaneNumber = %d\n", v27, 3, v28, "AddAllSEIs", 1719, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(_DWORD *)(a2 + 916));
        __uint64_t v27 = AVE_GetCurrTime();
        int v28 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame->PlaneNumber = %d", v27, 3, v28, "AddAllSEIs", 1719, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(unsigned int *)(a2 + 916));
    }
    return v13;
  }
  uint64_t v12 = a1 + 239360;
  *(void *)(a1 + 239360) = 0;
  if (a6)
  {
    uint64_t v13 = 0;
    if (a5) {
      return v13;
    }
  }
  uint64_t v14 = a1 + 68136;
  if (*(unsigned char *)(a1 + 68136) && !*(_DWORD *)(a2 + 160))
  {
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      int v30 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v31 = AVE_GetCurrTime();
      __uint64_t v32 = AVE_Log_GetLevelStr(7);
      int v33 = *(_DWORD *)(v12 + 5912);
      if (v30)
      {
        printf("%lld %d AVE %s: H264FrameRec: CopyEncodedFrameIntoExternalBuffer bUseElementaryStreamOutput %p %d\n\n", v31, 46, v32, *(const void **)(v12 + 5904), v33);
        __uint64_t v34 = AVE_GetCurrTime();
        __uint64_t v35 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: CopyEncodedFrameIntoExternalBuffer bUseElementaryStreamOutput %p %d\n", v34, 46, v35, *(const void **)(v12 + 5904), *(void *)(v12 + 5912));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: CopyEncodedFrameIntoExternalBuffer bUseElementaryStreamOutput %p %d\n", v31, 46, v32, *(const void **)(v12 + 5904), v33);
      }
    }
    uint64_t v44 = *(const void **)(v12 + 5904);
    if (!v44)
    {
      uint64_t v13 = 3758097084;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v46 = AVE_Log_CheckConsole(3u);
        __uint64_t v47 = AVE_GetCurrTime();
        int v48 = AVE_Log_GetLevelStr(4);
        if (v46)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_SPSPPSFinalOutputbUseElementaryStreamOutput = NULL\n", v47, 3, v48, "AddAllSEIs", 1733, "m_SPSPPSFinalOutputbUseElementaryStreamOutput != __null");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_SPSPPSFinalOutputbUseElementaryStreamOutput = NULL");
      }
      return v13;
    }
    size_t v45 = *(void *)(v12 + 5912);
    if (!v45)
    {
      uint64_t v13 = 3758097084;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v49 = AVE_Log_CheckConsole(3u);
        __uint64_t v50 = AVE_GetCurrTime();
        int v51 = AVE_Log_GetLevelStr(4);
        if (v49)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_SPSPPSFinalOutputSizebUseElementaryStreamOutput = 0\n", v50, 3, v51, "AddAllSEIs", 1734, "m_SPSPPSFinalOutputSizebUseElementaryStreamOutput != 0");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_SPSPPSFinalOutputSizebUseElementaryStreamOutput = 0");
      }
      return v13;
    }
    memcpy(v7, v44, v45);
    v7 += *(void *)(v12 + 5912);
    H264VideoEncoderFrameReceiver::DeleteBuffer((H264VideoEncoderFrameReceiver *)a1, *(unsigned __int8 **)(v12 + 5904));
    *(void *)(v12 + 5904) = 0;
  }
  if (*(void *)(a2 + 336))
  {
    int v86 = a4;
    if (!theData)
    {
      uint64_t v13 = 3758097084;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v36 = AVE_Log_CheckConsole(3u);
        __uint64_t v37 = AVE_GetCurrTime();
        __uint64_t v38 = AVE_Log_GetLevelStr(4);
        if (v36)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer serialMetadata == NULL\n", v37, 3, v38, "AddAllSEIs", 1750, "serialMetadata != __null");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer serialMetadata == NULL");
      }
      return v13;
    }
    BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
    unsigned int Length = CFDataGetLength(theData);
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      int v17 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v18 = AVE_GetCurrTime();
      __uint64_t v19 = AVE_Log_GetLevelStr(7);
      if (v17)
      {
        printf("%lld %d AVE %s: H264FrameRec: CFDebugMetadataSEI is ON buff %p size %d\n", v18, 46, v19, BytePtr, Length);
        __uint64_t v18 = AVE_GetCurrTime();
        __uint64_t v19 = AVE_Log_GetLevelStr(7);
      }
      syslog(3, "%lld %d AVE %s: H264FrameRec: CFDebugMetadataSEI is ON buff %p size %d", v18, 46, v19, BytePtr, Length);
    }
    int v39 = AddSEIDebugMetadata(v7, a1 + 68136, BytePtr, Length, a2, *(unsigned __int8 *)(a2 + 344), &v86);
    if (v39) {
      return AVE_RetCode2IOReturn(v39);
    }
    if (!v86)
    {
      uint64_t v13 = 3758097084;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v52 = AVE_Log_CheckConsole(3u);
        __uint64_t v53 = AVE_GetCurrTime();
        int v54 = AVE_Log_GetLevelStr(4);
        if (v52)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: AddSEIDebugMetadata failed.\n", v53, 3, v54, "AddAllSEIs", 1765, "SEISize != 0");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: AddSEIDebugMetadata failed.");
      }
      return v13;
    }
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      int v40 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v41 = AVE_GetCurrTime();
      int v42 = AVE_Log_GetLevelStr(7);
      if (v40)
      {
        printf("%lld %d AVE %s: H264FrameRec: AddSEIDebugMetadata added %d bytes\n", v41, 46, v42, v86);
        __uint64_t v43 = AVE_GetCurrTime();
        int v83 = AVE_Log_GetLevelStr(7);
        uint64_t v14 = a1 + 68136;
        syslog(3, "%lld %d AVE %s: H264FrameRec: AddSEIDebugMetadata added %d bytes", v43, 46, v83, v86);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: AddSEIDebugMetadata added %d bytes", v41, 46, v42, v86);
      }
    }
    uint64_t v55 = v86;
    uint64_t v56 = *(int *)(v12 + 4);
    *(_DWORD *)v12 += v86;
    *(_DWORD *)(a1 + 4 * v56 + 239368) = v55;
    int v57 = *(_DWORD *)(v12 + 4);
    *(_DWORD *)(v12 + 4) = v57 + 1;
    if (v57 >= 15)
    {
      uint64_t v13 = 3758097084;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v62 = AVE_Log_CheckConsole(3u);
        __uint64_t v63 = AVE_GetCurrTime();
        int v64 = AVE_Log_GetLevelStr(4);
        if (!v62) {
          goto LABEL_127;
        }
        int v65 = 1772;
        goto LABEL_124;
      }
      return v13;
    }
    v7 += v55;
    CFRelease(theData);
  }
  int v58 = *(_DWORD *)(v14 + 120);
  if (!v58) {
    goto LABEL_80;
  }
  if (v58 == 1)
  {
    if (*(unsigned char *)(v14 + 292))
    {
      int v86 = 0;
      AddAccessUnitDelimiter();
    }
    if (*(unsigned char *)(v14 + 293))
    {
      int v86 = 0;
      if (!*(_DWORD *)(a2 + 160)) {
        AddContentColourVolumeSEI();
      }
    }
    if (*(unsigned char *)(v14 + 85))
    {
      int v86 = 0;
      uint64_t v66 = *(unsigned char *)(v14 + 209) ? *(void *)(a1 + 51352) : *(void *)(a1 + 51344);
      if (v66 == 1 && !*(_DWORD *)(a2 + 160)) {
        AddAmbientViewingEnvironmentSEI();
      }
    }
LABEL_80:
    if (*(unsigned char *)(v14 + 54))
    {
      int v86 = 0;
      int v39 = AddRegisteredITUTT35SEI(v7, v14, a2, 1, &v86);
      if (v39) {
        return AVE_RetCode2IOReturn(v39);
      }
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        int v67 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v68 = AVE_GetCurrTime();
        uint64_t v69 = AVE_Log_GetLevelStr(7);
        if (v67)
        {
          printf("%lld %d AVE %s: H264FrameRec: Add Registered SEI added %d bytes\n", v68, 46, v69, v86);
          __uint64_t v70 = AVE_GetCurrTime();
          __uint64_t v84 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: Add Registered SEI added %d bytes", v70, 46, v84, v86);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: Add Registered SEI added %d bytes", v68, 46, v69, v86);
        }
      }
      uint64_t v71 = v86;
      uint64_t v72 = *(int *)(v12 + 4);
      *(_DWORD *)v12 += v86;
      *(_DWORD *)(a1 + 4 * v72 + 239368) = v71;
      int v73 = *(_DWORD *)(v12 + 4);
      *(_DWORD *)(v12 + 4) = v73 + 1;
      if (v73 >= 15)
      {
        uint64_t v13 = 3758097084;
        if (!AVE_Log_CheckLevel(3u, 4)) {
          return v13;
        }
        int v78 = AVE_Log_CheckConsole(3u);
        __uint64_t v63 = AVE_GetCurrTime();
        int v64 = AVE_Log_GetLevelStr(4);
        if (v78)
        {
          int v65 = 1967;
LABEL_124:
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: Exceed the max supported SEI, failed.\n", v63, 3, v64, "AddAllSEIs", v65, "m_SEI_num < 16");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
LABEL_127:
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: Exceed the max supported SEI, failed.");
        return v13;
      }
      v7 += v71;
      *(_DWORD *)(a2 + 2436) = 0;
    }
    if ((!*(unsigned char *)(v14 + 45)
       || *(double *)(a2 + 2384) == 0.0
       || *(_DWORD *)(a2 + 23468) != 3 && *(_DWORD *)(a2 + 23768) != 21)
      && (!*(unsigned char *)(v14 + 49) || *(double *)(a2 + 2368) == 0.0)
      && (!*(unsigned char *)(v14 + 46) || *(_DWORD *)(a2 + 160))
      && (!*(unsigned char *)(v14 + 47) || *(_DWORD *)(a2 + 160))
      && (!*(unsigned char *)(v14 + 48) || *(_DWORD *)(a2 + 160))
      && (!*(unsigned char *)(v14 + 50) || !*(unsigned char *)(v14 + 55) || *(_DWORD *)(a2 + 160))
      && (!*(unsigned char *)(v14 + 51) || !*(unsigned char *)(v14 + 56) || *(_DWORD *)(a2 + 160))
      && (!*(unsigned char *)(v14 + 52) || !*(unsigned char *)(v14 + 85) || *(_DWORD *)(a2 + 160))
      && !*(unsigned char *)(v14 + 53))
    {
      return 0;
    }
    int v86 = 0;
    int v39 = AddUnregisteredSEI(v7, v14, a1 + 69864, a2, 1, &v86);
    if (v39) {
      return AVE_RetCode2IOReturn(v39);
    }
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      int v74 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v75 = AVE_GetCurrTime();
      __uint64_t v76 = AVE_Log_GetLevelStr(7);
      if (v74)
      {
        printf("%lld %d AVE %s: H264FrameRec: Add UnRegistered SEI added %d bytes\n", v75, 46, v76, v86);
        __uint64_t v77 = AVE_GetCurrTime();
        int8x8_t v85 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: Add UnRegistered SEI added %d bytes", v77, 46, v85, v86);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: Add UnRegistered SEI added %d bytes", v75, 46, v76, v86);
      }
    }
    int v79 = v86;
    uint64_t v80 = *(int *)(v12 + 4);
    *(_DWORD *)v12 += v86;
    *(_DWORD *)(a1 + 4 * v80 + 239368) = v79;
    int v81 = *(_DWORD *)(v12 + 4);
    *(_DWORD *)(v12 + 4) = v81 + 1;
    if (v81 < 15) {
      return 0;
    }
    uint64_t v13 = 3758097084;
    if (!AVE_Log_CheckLevel(3u, 4)) {
      return v13;
    }
    int v82 = AVE_Log_CheckConsole(3u);
    __uint64_t v63 = AVE_GetCurrTime();
    int v64 = AVE_Log_GetLevelStr(4);
    if (v82)
    {
      int v65 = 1997;
      goto LABEL_124;
    }
    goto LABEL_127;
  }
  uint64_t v13 = 3758097084;
  if (AVE_Log_CheckLevel(3u, 4))
  {
    int v59 = AVE_Log_CheckConsole(3u);
    __uint64_t v60 = AVE_GetCurrTime();
    int v61 = AVE_Log_GetLevelStr(4);
    if (v59)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR - codecID not recognized. FAIL\n", v60, 3, v61, "AddAllSEIs", 1946, "false");
      AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR - codecID not recognized. FAIL");
  }
  return v13;
}

void H264VideoEncoderFrameReceiver::DeleteBuffer(H264VideoEncoderFrameReceiver *this, unsigned __int8 *a2)
{
  if (a2)
  {
    int v3 = (_DWORD *)((char *)this + 239348);
    uint64_t v4 = (char *)this + 68345;
    int v5 = (char *)this + 51304;
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      int v6 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(7);
      if (v6)
      {
        printf("%lld %d AVE %s: H264FrameRec: DeleteBuffer %p\n", CurrTime, 46, LevelStr, a2);
        __uint64_t v9 = AVE_GetCurrTime();
        int v15 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: DeleteBuffer %p", v9, 46, v15, a2);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: DeleteBuffer %p", CurrTime, 46, LevelStr, a2);
      }
    }
    if (*v4)
    {
      if (*((void *)v5 + 6) != 1 && *v3 != 2)
      {
        CFAllocatorRef v14 = *(const __CFAllocator **)v5;
        CFAllocatorDeallocate(v14, a2);
        return;
      }
    }
    else if (*((void *)v5 + 5) != 1 && *v3 != 2)
    {
      return;
    }
    if (*v3 == 2)
    {
      if (!CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)a2, 0))
      {
        CVPixelBufferRelease((CVPixelBufferRef)a2);
      }
    }
    else
    {
      free(a2);
    }
  }
  else if (AVE_Log_CheckLevel(0x2Eu, 4))
  {
    int v10 = AVE_Log_CheckConsole(0x2Eu);
    __uint64_t v11 = AVE_GetCurrTime();
    uint64_t v12 = AVE_Log_GetLevelStr(4);
    if (v10)
    {
      printf("%lld %d AVE %s: H264FrameRec ERROR: Trying to free a buffer that is NULL.\n", v11, 46, v12);
      __uint64_t v13 = AVE_GetCurrTime();
      __uint64_t v16 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: Trying to free a buffer that is NULL.", v13, 46, v16);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: Trying to free a buffer that is NULL.", v11, 46, v12);
    }
  }
}

uint64_t H264VideoEncoderFrameReceiver::CopyEncodedFrameIntoExternalBuffer(_DWORD *a1, uint64_t a2, char *a3, const void *a4, unint64_t a5, int a6, uint64_t a7)
{
  if (!a2)
  {
    uint64_t v16 = 3758097084;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v17 = AVE_Log_CheckConsole(3u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame == NULL\n", CurrTime, 3, LevelStr, "CopyEncodedFrameIntoExternalBuffer", 2016, "Frame != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame == NULL");
    }
    return v16;
  }
  if (!a3)
  {
    uint64_t v16 = 3758097084;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v20 = AVE_Log_CheckConsole(3u);
      __uint64_t v21 = AVE_GetCurrTime();
      __uint64_t v22 = AVE_Log_GetLevelStr(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer StreamBufferCopy == NULL\n", v21, 3, v22, "CopyEncodedFrameIntoExternalBuffer", 2017, "StreamBufferCopy != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer StreamBufferCopy == NULL");
    }
    return v16;
  }
  signed int v8 = *(_DWORD *)(a2 + 916);
  if (v8 >= 0x1F)
  {
    uint64_t v16 = 3758097084;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v23 = AVE_Log_CheckConsole(3u);
      __uint64_t v24 = AVE_GetCurrTime();
      uint64_t v25 = AVE_Log_GetLevelStr(4);
      if (v23)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame->PlaneNumber = %d\n", v24, 3, v25, "CopyEncodedFrameIntoExternalBuffer", 2018, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(_DWORD *)(a2 + 916));
        __uint64_t v24 = AVE_GetCurrTime();
        uint64_t v25 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame->PlaneNumber = %d", v24, 3, v25, "CopyEncodedFrameIntoExternalBuffer", 2018, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(unsigned int *)(a2 + 916));
    }
    return v16;
  }
  __uint64_t v13 = a1;
  CFAllocatorRef v14 = a1 + 59839;
  int v15 = a1 + 16889;
  int v201 = a1[16889];
  if (a6)
  {
    if (!a4 || a7) {
      goto LABEL_7;
    }
LABEL_18:
    __uint64_t v209 = (unsigned __int8 *)a3;
    if (a1[59840])
    {
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        int v26 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v27 = AVE_GetCurrTime();
        int v28 = AVE_Log_GetLevelStr(7);
        int v29 = v14[1];
        if (v26)
        {
          printf("%lld %d AVE %s: H264FrameRec: memcpy SEI size %u\n", v27, 46, v28, v29);
          __uint64_t v30 = AVE_GetCurrTime();
          __uint64_t v189 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: memcpy SEI size %u", v30, 46, v189, v14[1]);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: memcpy SEI size %u", v27, 46, v28, v29);
        }
        __uint64_t v13 = a1;
      }
      size_t v31 = v14[1];
      if ((int)v31 <= 0)
      {
        uint64_t v16 = 3758097084;
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v42 = AVE_Log_CheckConsole(3u);
          __uint64_t v43 = AVE_GetCurrTime();
          uint64_t v44 = AVE_Log_GetLevelStr(4);
          if (v42)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer - SEI buffer size too big\n", v43, 3, v44, "CopyEncodedFrameIntoExternalBuffer", 2031, "false");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer - SEI buffer size too big");
        }
        return v16;
      }
      memcpy(a3, a4, v31);
      __uint64_t v209 = (unsigned __int8 *)&a3[v14[1]];
      signed int v8 = *(_DWORD *)(a2 + 916);
    }
    goto LABEL_29;
  }
  if (a4) {
    goto LABEL_18;
  }
LABEL_7:
  __uint64_t v209 = (unsigned __int8 *)a3;
LABEL_29:
  unint64_t v207 = *(unsigned __int8 **)&v13[2 * v8 + 6618];
  if (v207)
  {
    uint64_t v32 = v13[v8 + 6738];
    unint64_t v203 = a5;
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      int v33 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v34 = AVE_GetCurrTime();
      __uint64_t v35 = AVE_Log_GetLevelStr(7);
      int v36 = *v14;
      if (v33)
      {
        printf("%lld %d AVE %s: ClientID %d buf %p, buf_size %d\n", v34, 46, v35, v36, v207, v32);
        __uint64_t v37 = AVE_GetCurrTime();
        __uint64_t v38 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: ClientID %d buf %p, buf_size %d", v37, 46, v38, *v14, v207, v32);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: ClientID %d buf %p, buf_size %d", v34, 46, v35, v36, v207, v32);
      }
    }
    int v45 = *(_DWORD *)(a2 + 916);
    if (v13[96 * v45 + 9888])
    {
      int v200 = *(unsigned __int8 **)&v13[2 * v45 + 6888];
      if (!v200)
      {
        uint64_t v16 = 3758097084;
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v46 = AVE_Log_CheckConsole(3u);
          __uint64_t v47 = AVE_GetCurrTime();
          int v48 = AVE_Log_GetLevelStr(4);
          if (v46)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer buf_header == NULL\n", v47, 3, v48, "CopyEncodedFrameIntoExternalBuffer", 2048, "buf_header != __null");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer buf_header == NULL");
        }
        return v16;
      }
    }
    else
    {
      int v200 = 0;
    }
    __uint64_t v199 = v15;
    if (a6)
    {
      if (v13[96 * v45 + 7008 + 3 * (int)a7])
      {
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          int v49 = AVE_Log_CheckConsole(0x2Eu);
          __uint64_t v50 = AVE_GetCurrTime();
          int v51 = AVE_Log_GetLevelStr(7);
          if (v49)
          {
            printf("%lld %d AVE %s: H264FrameRec: copy PlaneNumber = %d, slice %d size %d, from offset %d \n", v50, 46, v51, *(_DWORD *)(a2 + 916), a7, v13[96 * *(int *)(a2 + 916) + 7008 + 3 * (int)a7], v13[96 * *(int *)(a2 + 916) + 7009 + 3 * (int)a7]);
            __uint64_t v52 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(7);
            __uint64_t v13 = a1;
            syslog(3, "%lld %d AVE %s: H264FrameRec: copy PlaneNumber = %d, slice %d size %d, from offset %d ", v52);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: copy PlaneNumber = %d, slice %d size %d, from offset %d ", v50);
          }
        }
        *(void *)__uint64_t v198 = v32;
        if (v13[96 * *(int *)(a2 + 916) + 9888 + 3 * (int)a7])
        {
          if (AVE_Log_CheckLevel(0x2Eu, 7))
          {
            int v91 = AVE_Log_CheckConsole(0x2Eu);
            __uint64_t v92 = AVE_GetCurrTime();
            int v93 = AVE_Log_GetLevelStr(7);
            int v94 = v13[96 * *(int *)(a2 + 916) + 9888 + 3 * (int)a7];
            if (v91)
            {
              printf("%lld %d AVE %s: slice header memcpy: %p -> %p %d\n", v92, 46, v93, &v200[1024 * (uint64_t)(int)a7], v209, v94);
              __uint64_t v95 = AVE_GetCurrTime();
              uint64_t v96 = AVE_Log_GetLevelStr(7);
              __uint64_t v13 = a1;
              syslog(3, "%lld %d AVE %s: slice header memcpy: %p -> %p %d", v95, 46, v96, &v200[1024 * (uint64_t)(int)a7], v209, a1[96 * *(int *)(a2 + 916) + 9888 + 3 * (int)a7]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: slice header memcpy: %p -> %p %d", v92, 46, v93, &v200[1024 * (uint64_t)(int)a7], v209, v94);
            }
          }
          uint64_t v97 = v203;
          if (v209 >= (unsigned __int8 *)&a3[v203])
          {
            uint64_t v16 = 3758097084;
            H264VideoEncoderFrameReceiver::PrintBufferInfo((H264VideoEncoderFrameReceiver *)v13, *(unsigned int *)(a2 + 916), a7, v200, -1, &v200[1024 * (uint64_t)(int)a7], (unsigned __int8 *)a3, v203, v209);
            if (!AVE_Log_CheckLevel(3u, 4)) {
              return v16;
            }
            int v106 = AVE_Log_CheckConsole(3u);
            __uint64_t v88 = AVE_GetCurrTime();
            __uint64_t v89 = AVE_Log_GetLevelStr(4);
            if (v106)
            {
              int v90 = 2128;
LABEL_107:
              printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer - buffer size too big\n", v88, 3, v89, "CopyEncodedFrameIntoExternalBuffer", v90, "false");
              AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
            }
LABEL_187:
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer - buffer size too big");
            return v16;
          }
          UInt8 v99 = v13 + 9888;
          memcpy(v209, &v200[1024 * (uint64_t)(int)a7], v13[96 * *(int *)(a2 + 916) + 9888 + 3 * (int)a7]);
          __uint64_t v13 = a1;
          v209 += v99[96 * *(int *)(a2 + 916) + 3 * (int)a7];
        }
        else
        {
          uint64_t v97 = v203;
        }
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          int v100 = AVE_Log_CheckConsole(0x2Eu);
          __uint64_t v101 = AVE_GetCurrTime();
          char v102 = AVE_Log_GetLevelStr(7);
          int v103 = (char *)&v207[v13[96 * *(int *)(a2 + 916) + 7009 + 3 * (int)a7]];
          if (v100)
          {
            printf("%lld %d AVE %s: memcpy: %p -> %p %d\n", v101, 46, v102, v103, v209, v13[96 * *(int *)(a2 + 916) + 7008 + 3 * (int)a7]);
            __uint64_t v104 = AVE_GetCurrTime();
            __uint64_t v105 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: memcpy: %p -> %p %d", v104, 46, v105, &v207[v13[96 * *(int *)(a2 + 916) + 7009 + 3 * (int)a7]], v209, v13[96 * *(int *)(a2 + 916) + 7008 + 3 * (int)a7]);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: memcpy: %p -> %p %d", v101, 46, v102, v103, v209, v13[96 * *(int *)(a2 + 916) + 7008 + 3 * (int)a7]);
          }
          uint64_t v97 = v203;
        }
        uint64_t v107 = *(int *)(a2 + 916);
        size_t v108 = v13[96 * (int)v107 + 7008 + 3 * (int)a7];
        uint64_t v109 = v13[96 * (int)v107 + 7009 + 3 * (int)a7];
        if (&v209[v108] > (unsigned __int8 *)&a3[v97] || &v207[v109 + v108] > &v207[*(void *)v198])
        {
          uint64_t v16 = 3758097084;
          H264VideoEncoderFrameReceiver::PrintBufferInfo((H264VideoEncoderFrameReceiver *)v13, v107, a7, v207, v198[0], &v207[v109], (unsigned __int8 *)a3, v97, v209);
          if (!AVE_Log_CheckLevel(3u, 4)) {
            return v16;
          }
          int v110 = AVE_Log_CheckConsole(3u);
          __uint64_t v88 = AVE_GetCurrTime();
          __uint64_t v89 = AVE_Log_GetLevelStr(4);
          if (v110)
          {
            int v90 = 2148;
            goto LABEL_107;
          }
          goto LABEL_187;
        }
        int v195 = a6;
        int v196 = a7;
        memcpy(v209, &v207[v109], v108);
        int v57 = &v209[v13[96 * *(int *)(a2 + 916) + 7008 + 3 * (int)a7]];
      }
      else
      {
        int v195 = a6;
        int v196 = a7;
        int v57 = v209;
      }
    }
    else
    {
      int v195 = a6;
      int v196 = a7;
      uint64_t v53 = 0;
      int v204 = (unsigned __int8 *)&a3[v203];
      int v197 = v32;
      int v202 = &v207[v32];
      uint64_t v54 = 7008;
      uint64_t v55 = 9888;
      uint64_t v56 = v200;
      int v57 = v209;
      while (v13[96 * v45 + v54])
      {
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          int v58 = AVE_Log_CheckConsole(0x2Eu);
          __uint64_t v59 = AVE_GetCurrTime();
          __uint64_t v60 = AVE_Log_GetLevelStr(7);
          int v61 = *(_DWORD *)(a2 + 916);
          int v62 = &v13[96 * v61 + v54];
          int v63 = *v62;
          int v64 = v62[1];
          if (v58)
          {
            printf("%lld %d AVE %s: H264FrameRec: copy PlaneNumber = %d, slice %d size %d, from offset %d \n", v59, 46, v60, v61, v53, v63, v64);
            __uint64_t v65 = AVE_GetCurrTime();
            uint64_t v66 = AVE_Log_GetLevelStr(7);
            int v67 = &v13[96 * *(int *)(a2 + 916) + v54];
            syslog(3, "%lld %d AVE %s: H264FrameRec: copy PlaneNumber = %d, slice %d size %d, from offset %d ", v65, 46, v66, *(_DWORD *)(a2 + 916), v53, *v67, v67[1]);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: copy PlaneNumber = %d, slice %d size %d, from offset %d ", v59, 46, v60, v61, v53, v63, v64);
          }
        }
        if (v13[96 * *(int *)(a2 + 916) + v55])
        {
          if (AVE_Log_CheckLevel(0x2Eu, 7))
          {
            int v68 = AVE_Log_CheckConsole(0x2Eu);
            __uint64_t v69 = AVE_GetCurrTime();
            __uint64_t v70 = AVE_Log_GetLevelStr(7);
            int v71 = v13[96 * *(int *)(a2 + 916) + v55];
            if (v68)
            {
              printf("%lld %d AVE %s: slice header memcpy: %p -> %p %d\n", v69, 46, v70, v56, v57, v71);
              __uint64_t v72 = AVE_GetCurrTime();
              int v73 = AVE_Log_GetLevelStr(7);
              syslog(3, "%lld %d AVE %s: slice header memcpy: %p -> %p %d", v72, 46, v73, v56, v57, v13[96 * *(int *)(a2 + 916) + v55]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: slice header memcpy: %p -> %p %d", v69, 46, v70, v56, v57, v71);
            }
          }
          if (v57 >= v204)
          {
            uint64_t v16 = 3758097084;
            H264VideoEncoderFrameReceiver::PrintBufferInfo((H264VideoEncoderFrameReceiver *)v13, *(unsigned int *)(a2 + 916), v53, v200, -1, v56, (unsigned __int8 *)a3, v203, v57);
            if (!AVE_Log_CheckLevel(3u, 4)) {
              return v16;
            }
            int v98 = AVE_Log_CheckConsole(3u);
            __uint64_t v88 = AVE_GetCurrTime();
            __uint64_t v89 = AVE_Log_GetLevelStr(4);
            if (v98)
            {
              int v90 = 2074;
              goto LABEL_107;
            }
            goto LABEL_187;
          }
          memcpy(v57, v56, v13[96 * *(int *)(a2 + 916) + v55]);
          v57 += v13[96 * *(int *)(a2 + 916) + v55];
        }
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          int v74 = AVE_Log_CheckConsole(0x2Eu);
          __uint64_t v75 = AVE_GetCurrTime();
          __uint64_t v76 = AVE_Log_GetLevelStr(7);
          __uint64_t v77 = &v13[96 * *(int *)(a2 + 916) + v54];
          int v78 = *v77;
          int v79 = (char *)&v207[v77[1]];
          if (v74)
          {
            printf("%lld %d AVE %s: memcpy: %p -> %p %d, StreamBufferCopy %p FinalOutput_FRAME_Size %lu\n", v75, 46, v76, v79, v57, v78, a3, v203);
            __uint64_t v80 = AVE_GetCurrTime();
            int v81 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: memcpy: %p -> %p %d, StreamBufferCopy %p FinalOutput_FRAME_Size %lu", v80, 46, v81, &v207[v13[96 * *(int *)(a2 + 916) + 1 + v54]], v57, v13[96 * *(int *)(a2 + 916) + v54], a3, v203);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: memcpy: %p -> %p %d, StreamBufferCopy %p FinalOutput_FRAME_Size %lu", v75, 46, v76, v79, v57, v78, a3, v203);
          }
        }
        uint64_t v82 = *(int *)(a2 + 916);
        int v83 = &v13[96 * (int)v82 + v54];
        size_t v84 = *v83;
        int8x8_t v85 = &v207[v83[1]];
        if (&v57[v84] > v204 || &v85[v84] > v202)
        {
          uint64_t v16 = 3758097084;
          H264VideoEncoderFrameReceiver::PrintBufferInfo((H264VideoEncoderFrameReceiver *)v13, v82, v53, v207, v197, v85, (unsigned __int8 *)a3, v203, v57);
          if (!AVE_Log_CheckLevel(3u, 4)) {
            return v16;
          }
          int v87 = AVE_Log_CheckConsole(3u);
          __uint64_t v88 = AVE_GetCurrTime();
          __uint64_t v89 = AVE_Log_GetLevelStr(4);
          if (v87)
          {
            int v90 = 2094;
            goto LABEL_107;
          }
          goto LABEL_187;
        }
        memcpy(v57, v85, v84);
        int v45 = *(_DWORD *)(a2 + 916);
        v57 += v13[96 * v45 + v54];
        ++v53;
        v56 += 1024;
        v55 += 3;
        v54 += 3;
        if (v53 == 32) {
          break;
        }
      }
    }
    int v210 = v57;
    int v111 = v201 - 1;
    __uint64_t v112 = v199;
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      int v113 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v114 = AVE_GetCurrTime();
      int v115 = AVE_Log_GetLevelStr(7);
      if (v113)
      {
        printf("%lld %d AVE %s: H264FrameRec: isLastSlice %d\n", v114, 46, v115, v111 == v196);
        __uint64_t v116 = AVE_GetCurrTime();
        int v190 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: isLastSlice %d", v116, 46, v190, v111 == v196);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: isLastSlice %d", v114, 46, v115, v111 == v196);
      }
      __uint64_t v13 = a1;
    }
    if (!v195 || v111 == v196)
    {
      int v208 = (_DWORD **)(v13 + 12768);
      if (v199[94] < 2u || *(_DWORD *)(a2 + 168))
      {
        uint64_t v117 = 0;
        char v118 = 1;
        int v119 = v13 + 12768;
        v13[12777] = 0;
        do
        {
          char v120 = v118;
          uint64_t v121 = &v13[3 * v117 + 12771];
          __uint64_t v122 = v13;
          uint64_t v123 = v121 + 2;
          if (v121[2])
          {
            __uint64_t v124 = (char *)&v122[3 * v117 + 12772] + 3;
            memcpy(v210, v121, *v124 - 1);
            memset(&v210[*v124 - 1], 255, *v123);
            v210[*v123 - 1 + *v124] = 0x80;
            uint64_t v125 = *v123 + (uint64_t)*v124;
            v119[9] += v125;
            **(_DWORD **)v119 += v125;
            if (AVE_Log_CheckLevel(0x2Eu, 7))
            {
              int v126 = AVE_Log_CheckConsole(0x2Eu);
              __uint64_t v127 = AVE_GetCurrTime();
              uint64_t v128 = AVE_Log_GetLevelStr(7);
              int v129 = *v123;
              if (v126)
              {
                printf("%lld %d AVE %s: H264FrameRec: Filler[%d] done %d %d\n", v127, 46, v128, v117, *v124, v129);
                __uint64_t v130 = AVE_GetCurrTime();
                uint64_t v131 = AVE_Log_GetLevelStr(7);
                syslog(3, "%lld %d AVE %s: H264FrameRec: Filler[%d] done %d %d", v130, 46, v131, v117, *v124, *v123);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: H264FrameRec: Filler[%d] done %d %d", v127, 46, v128, v117, *v124, v129);
              }
              int v119 = v208;
            }
            v210 += v125;
            v121[2] = 0;
            *(void *)uint64_t v121 = 0;
          }
          char v118 = 0;
          uint64_t v117 = 1;
          __uint64_t v13 = a1;
        }
        while ((v120 & 1) != 0);
      }
      else
      {
        int v119 = v13 + 12768;
      }
      if (v119[2])
      {
        uint64_t v132 = 0;
        __uint64_t v133 = v13 + 7010;
        do
        {
          uint64_t v134 = 0;
          CFDataRef v135 = v133;
          do
          {
            if (!*(v135 - 2)) {
              break;
            }
            if (AVE_Log_CheckLevel(0x2Eu, 7))
            {
              int v136 = AVE_Log_CheckConsole(0x2Eu);
              __uint64_t v137 = AVE_GetCurrTime();
              int v138 = AVE_Log_GetLevelStr(7);
              int v139 = *(v135 - 2);
              int v140 = *v135;
              if (v136)
              {
                printf("%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes = [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d\n", v137, 46, v138, v132, v134, v132, v134, v139, *(v135 - 1), v140);
                __uint64_t v141 = AVE_GetCurrTime();
                CFIndex v142 = AVE_Log_GetLevelStr(7);
                syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes = [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v141, 46, v142, v132, v134, v132, v134, *(v135 - 2), *(v135 - 1), *v135);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes = [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v137, 46, v138, v132, v134, v132, v134, v139, *(v135 - 1), v140);
              }
            }
            ++v134;
            v135 += 3;
          }
          while (v134 != 32);
          ++v132;
          v133 += 96;
        }
        while (v132 != 30);
        size_t v143 = (char *)v210;
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          int v144 = AVE_Log_CheckConsole(0x2Eu);
          __uint64_t v145 = AVE_GetCurrTime();
          uint64_t v146 = AVE_Log_GetLevelStr(7);
          int v147 = *((_DWORD *)v208 + 2);
          if (v144)
          {
            printf("%lld %d AVE %s: H264FrameRec: m_numCABACzeroWordToBeInserted %d bytes\n", v145, 46, v146, v147);
            __uint64_t v148 = AVE_GetCurrTime();
            __uint64_t v191 = AVE_Log_GetLevelStr(7);
            size_t v143 = (char *)v210;
            syslog(3, "%lld %d AVE %s: H264FrameRec: m_numCABACzeroWordToBeInserted %d bytes", v148, 46, v191, *((_DWORD *)v208 + 2));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: m_numCABACzeroWordToBeInserted %d bytes", v145, 46, v146, v147);
          }
        }
        if (*((_DWORD *)v208 + 2))
        {
          unint64_t v149 = 0;
          do
          {
            int v150 = &v143[v149];
            *(_WORD *)int v150 = 0;
            v150[2] = 3;
            v149 += 3;
          }
          while (v149 < *((unsigned int *)v208 + 2));
        }
        if (!*v208)
        {
          uint64_t v16 = 3758097084;
          if (AVE_Log_CheckLevel(3u, 4))
          {
            int v156 = AVE_Log_CheckConsole(3u);
            __uint64_t v157 = AVE_GetCurrTime();
            long long v158 = AVE_Log_GetLevelStr(4);
            if (v156)
            {
              printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer m_pLastOutputSlicesSizes = NULL\n", v157, 3, v158, "CopyEncodedFrameIntoExternalBuffer", 2217, "m_pLastOutputSlicesSizes != __null");
              AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer m_pLastOutputSlicesSizes = NULL");
          }
          return v16;
        }
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          int v151 = AVE_Log_CheckConsole(0x2Eu);
          __uint64_t v152 = AVE_GetCurrTime();
          int v153 = AVE_Log_GetLevelStr(7);
          int v154 = **v208;
          if (v151)
          {
            printf("%lld %d AVE %s: H264FrameRec: previous *m_pLastOutputSlicesSizes %d bytes\n", v152, 46, v153, v154);
            __uint64_t v155 = AVE_GetCurrTime();
            CFArrayRef v192 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: previous *m_pLastOutputSlicesSizes %d bytes", v155, 46, v192, **v208);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: previous *m_pLastOutputSlicesSizes %d bytes", v152, 46, v153, v154);
          }
        }
        **v208 += *((_DWORD *)v208 + 2);
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          int v159 = AVE_Log_CheckConsole(0x2Eu);
          __uint64_t v160 = AVE_GetCurrTime();
          __uint64_t v161 = AVE_Log_GetLevelStr(7);
          int v162 = **v208;
          if (v159)
          {
            printf("%lld %d AVE %s: H264FrameRec: after *m_pLastOutputSlicesSizes %d bytes\n", v160, 46, v161, v162);
            __uint64_t v163 = AVE_GetCurrTime();
            int v193 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: after *m_pLastOutputSlicesSizes %d bytes", v163, 46, v193, **v208);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: after *m_pLastOutputSlicesSizes %d bytes", v160, 46, v161, v162);
          }
        }
        uint64_t v164 = 0;
        uint64_t v165 = a1 + 7010;
        do
        {
          uint64_t v166 = 0;
          __uint64_t v167 = v165;
          do
          {
            if (!*(v167 - 2)) {
              break;
            }
            if (AVE_Log_CheckLevel(0x2Eu, 7))
            {
              int v168 = AVE_Log_CheckConsole(0x2Eu);
              __uint64_t v169 = AVE_GetCurrTime();
              unsigned int v170 = AVE_Log_GetLevelStr(7);
              int v171 = *(v167 - 2);
              int v172 = *v167;
              if (v168)
              {
                printf("%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes = [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d\n", v169, 46, v170, v164, v166, v164, v166, v171, *(v167 - 1), v172);
                __uint64_t v173 = AVE_GetCurrTime();
                int v174 = AVE_Log_GetLevelStr(7);
                syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes = [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v173, 46, v174, v164, v166, v164, v166, *(v167 - 2), *(v167 - 1), *v167);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes = [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v169, 46, v170, v164, v166, v164, v166, v171, *(v167 - 1), v172);
              }
            }
            ++v166;
            v167 += 3;
          }
          while (v166 != 32);
          ++v164;
          v165 += 96;
        }
        while (v164 != 30);
        __uint64_t v13 = a1;
      }
      __uint64_t v112 = v199;
    }
    uint64_t v16 = *((unsigned int *)v112 + 175);
    __uint64_t v175 = v210;
    if (!v16) {
      return v16;
    }
    if (v16 == 1)
    {
      if (!v112[884]) {
        return 0;
      }
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        int v176 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v177 = AVE_GetCurrTime();
        int v178 = AVE_Log_GetLevelStr(7);
        int v179 = *((_DWORD *)v112 + 350);
        if (v176)
        {
          printf("%lld %d AVE %s: H264FrameRec: CopyEncodedFrameIntoExternalBuffer bRPUNutPresent - size %d\n", v177, 46, v178, v179);
          __uint64_t v180 = AVE_GetCurrTime();
          __uint64_t v194 = AVE_Log_GetLevelStr(7);
          __uint64_t v175 = v210;
          syslog(3, "%lld %d AVE %s: H264FrameRec: CopyEncodedFrameIntoExternalBuffer bRPUNutPresent - size %d", v180, 46, v194, *((_DWORD *)v112 + 350));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: CopyEncodedFrameIntoExternalBuffer bRPUNutPresent - size %d", v177, 46, v178, v179);
        }
      }
      size_t v184 = *((unsigned int *)v112 + 350);
      if (v184)
      {
        memcpy(v175, (char *)v13 + 68441, v184);
        return 0;
      }
      uint64_t v16 = 3758097084;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v185 = AVE_Log_CheckConsole(3u);
        __uint64_t v186 = AVE_GetCurrTime();
        __uint64_t v187 = AVE_Log_GetLevelStr(4);
        if (v185)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: RPUNutSize = 0\n", v186, 3, v187, "CopyEncodedFrameIntoExternalBuffer", 2252, "m_VideoParamsDriver.RPUNutSize != 0");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: RPUNutSize = 0");
      }
    }
    else
    {
      uint64_t v16 = 3758097084;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v181 = AVE_Log_CheckConsole(3u);
        __uint64_t v182 = AVE_GetCurrTime();
        int v183 = AVE_Log_GetLevelStr(4);
        if (v181)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR - codecID not recognized. FAIL\n", v182, 3, v183, "CopyEncodedFrameIntoExternalBuffer", 2269, "false");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR - codecID not recognized. FAIL");
      }
    }
  }
  else
  {
    uint64_t v16 = 3758097084;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v39 = AVE_Log_CheckConsole(3u);
      __uint64_t v40 = AVE_GetCurrTime();
      __uint64_t v41 = AVE_Log_GetLevelStr(4);
      if (v39)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer buf == NULL\n", v40, 3, v41, "CopyEncodedFrameIntoExternalBuffer", 2041, "buf != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer buf == NULL");
    }
  }
  return v16;
}

uint64_t H264VideoEncoderFrameReceiver::SendSPSandPPS(uint64_t a1, int *a2, int a3)
{
  uint64_t v180 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1 + 67932;
  uint64_t v7 = a1 + 51272;
  unsigned int v8 = AVE_CalcBufSizeOfParameterSet(*(_DWORD *)(a1 + 68256), 2);
  *(_OWORD *)int v178 = 0u;
  memset(v179, 0, sizeof(v179));
  CFTypeRef cf = 0;
  if (*(unsigned char *)(v6 + 413))
  {
    if (!*(void *)(v7 + 80))
    {
      if (AVE_Log_CheckLevel(0x2Eu, 4))
      {
        int v9 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v9)
        {
          printf("%lld %d AVE %s: H264FrameRec WARNING: HEIF -> nobody wants this SPS PPS header. dump it.\n", CurrTime, 46, LevelStr);
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: HEIF -> nobody wants this SPS PPS header. dump it.");
      }
      return 0;
    }
  }
  else if (!*(void *)(v7 + 72))
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      int v31 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v32 = AVE_GetCurrTime();
      int v33 = AVE_Log_GetLevelStr(4);
      if (v31)
      {
        printf("%lld %d AVE %s: H264FrameRec WARNING: nobody wants this SPS PPS header. dump it.\n", v32, 46, v33);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this SPS PPS header. dump it.");
    }
    return 0;
  }
  if (AVE_Log_CheckLevel(0x2Eu, 7))
  {
    int v12 = AVE_Log_CheckConsole(0x2Eu);
    __uint64_t v13 = AVE_GetCurrTime();
    CFAllocatorRef v14 = AVE_Log_GetLevelStr(7);
    if (v12)
    {
      printf("%lld %d AVE %s: H264FrameRec: Sending SPS PPS\n", v13, 46, v14);
      __uint64_t v15 = AVE_GetCurrTime();
      __uint64_t v157 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: H264FrameRec: Sending SPS PPS", v15, 46, v157);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264FrameRec: Sending SPS PPS", v13, 46, v14);
    }
  }
  if (!a2)
  {
    uint64_t v20 = 3758097084;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v25 = AVE_Log_CheckConsole(3u);
      __uint64_t v26 = AVE_GetCurrTime();
      __uint64_t v27 = AVE_Log_GetLevelStr(4);
      if (v25)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendSPSandPPS Frame == NULL\n", v26, 3, v27, "SendSPSandPPS", 2316, "Frame != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendSPSandPPS Frame == NULL");
    }
    goto LABEL_36;
  }
  if (a2[229] >= 0x1F)
  {
    uint64_t v20 = 3758097084;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v28 = AVE_Log_CheckConsole(3u);
      __uint64_t v29 = AVE_GetCurrTime();
      __uint64_t v30 = AVE_Log_GetLevelStr(4);
      if (v28)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendSPSandPPS Frame->PlaneNumber = %d\n", v29, 3, v30, "SendSPSandPPS", 2317, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", a2[229]);
        __uint64_t v29 = AVE_GetCurrTime();
        __uint64_t v30 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendSPSandPPS Frame->PlaneNumber = %d", v29, 3, v30, "SendSPSandPPS", 2317, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", a2[229]);
    }
LABEL_36:
    int v17 = 0;
    goto LABEL_37;
  }
  Buffer = H264VideoEncoderFrameReceiver::CreateBuffer((CFAllocatorRef *)a1, v8, (OpaqueCMBlockBuffer **)&cf);
  if (Buffer)
  {
    int v17 = (unsigned __int8 *)Buffer;
    int v176 = (const void **)(a1 + 245264);
    if (!*(unsigned char *)(v6 + 204) || a2[40]) {
      goto LABEL_16;
    }
    __uint64_t v43 = H264VideoEncoderFrameReceiver::CreateBuffer((CFAllocatorRef *)a1, v8, (OpaqueCMBlockBuffer **)&cf);
    *int v176 = v43;
    if (v43)
    {
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        int v44 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v45 = AVE_GetCurrTime();
        int v46 = AVE_Log_GetLevelStr(7);
        int v47 = *(_DWORD *)(a1 + 245272);
        if (v44)
        {
          printf("%lld %d AVE %s: H264FrameRec: SendSPSandPPS bUseElementaryStreamOutput CreateBuffer %p %d\n", v45, 46, v46, *v176, v47);
          __uint64_t v48 = AVE_GetCurrTime();
          int v49 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: SendSPSandPPS bUseElementaryStreamOutput CreateBuffer %p %d", v48, 46, v49, *(const void **)(a1 + 245264), *(void *)(a1 + 245272));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: SendSPSandPPS bUseElementaryStreamOutput CreateBuffer %p %d", v45, 46, v46, *v176, v47);
        }
      }
LABEL_16:
      __uint64_t v18 = IOSurfaceLookup(*(_DWORD *)(a1 + 25788));
      if (!v18)
      {
        uint64_t v20 = 3758097084;
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v38 = AVE_Log_CheckConsole(3u);
          __uint64_t v39 = AVE_GetCurrTime();
          __uint64_t v40 = AVE_Log_GetLevelStr(4);
          if (v38)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SPSPPSBufferFromFWSurface IOSurfaceLookup failed.\n", v39, 3, v40, "SendSPSandPPS", 2333, "SPSPPSBufferFromFWSurface != __null");
            __uint64_t v41 = AVE_GetCurrTime();
            __uint64_t v160 = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SPSPPSBufferFromFWSurface IOSurfaceLookup failed.", v41, 3, v160, "SendSPSandPPS", 2333, "SPSPPSBufferFromFWSurface != __null");
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SPSPPSBufferFromFWSurface IOSurfaceLookup failed.", v39, 3, v40, "SendSPSandPPS", 2333, "SPSPPSBufferFromFWSurface != __null");
          }
        }
        goto LABEL_37;
      }
      __uint64_t v19 = v18;
      if (IOSurfaceLock(v18, 0, 0))
      {
        uint64_t v20 = 3758097084;
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v21 = AVE_Log_CheckConsole(3u);
          __uint64_t v22 = AVE_GetCurrTime();
          int v23 = AVE_Log_GetLevelStr(4);
          if (v21)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: IOSurfaceLock SPSPPSBufferFromFWSurface failed.\n", v22, 3, v23, "SendSPSandPPS", 2336, "err2 == 0");
            __uint64_t v24 = AVE_GetCurrTime();
            long long v158 = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: IOSurfaceLock SPSPPSBufferFromFWSurface failed.", v24, 3, v158, "SendSPSandPPS", 2336, "err2 == 0");
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: IOSurfaceLock SPSPPSBufferFromFWSurface failed.", v22, 3, v23, "SendSPSandPPS", 2336, "err2 == 0");
          }
        }
        goto LABEL_117;
      }
      BaseAddress = (unsigned __int8 *)IOSurfaceGetBaseAddress(v19);
      if (!BaseAddress)
      {
        uint64_t v20 = 3758097084;
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v62 = AVE_Log_CheckConsole(3u);
          __uint64_t v63 = AVE_GetCurrTime();
          int v64 = AVE_Log_GetLevelStr(4);
          if (v62)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SPSPPSBufferFromFW = NULL.\n", v63, 3, v64, "SendSPSandPPS", 2339, "SPSPPSBufferFromFW != __null");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SPSPPSBufferFromFW = NULL.");
        }
        goto LABEL_116;
      }
      __uint64_t v175 = v17;
      if (a3)
      {
        __uint64_t v173 = v19;
        uint64_t v51 = *(void *)(a1 + 8 * a2[229] + 27072);
        if (!v51)
        {
          uint64_t v20 = 3758097084;
          __uint64_t v19 = v173;
          if (AVE_Log_CheckLevel(3u, 4))
          {
            int v71 = AVE_Log_CheckConsole(3u);
            __uint64_t v72 = AVE_GetCurrTime();
            int v73 = AVE_Log_GetLevelStr(4);
            if (v71)
            {
              printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_CodedBuffPointerDataHeader[%d] == NULL\n", v72, 3, v73, "SendSPSandPPS", 2348, "codedHeader != __null", a2[229]);
              __uint64_t v72 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
              __uint64_t v19 = v173;
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_CodedBuffPointerDataHeader[%d] == NULL", v72);
          }
          goto LABEL_116;
        }
        int v174 = BaseAddress;
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          int v52 = AVE_Log_CheckConsole(0x2Eu);
          __uint64_t v53 = AVE_GetCurrTime();
          uint64_t v54 = AVE_Log_GetLevelStr(7);
          int v55 = *(_DWORD *)(v51 + 152);
          if (v52)
          {
            printf("%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_SPSPPSHeaderBits %d\n", v53, 46, v54, a2[229], v55);
            __uint64_t v56 = AVE_GetCurrTime();
            int v57 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_SPSPPSHeaderBits %d", v56, 46, v57, a2[229], *(_DWORD *)(v51 + 152));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_SPSPPSHeaderBits %d", v53, 46, v54, a2[229], v55);
          }
        }
        for (uint64_t i = 0; i != 16; i += 4)
        {
          if (AVE_Log_CheckLevel(0x2Eu, 7))
          {
            int v79 = AVE_Log_CheckConsole(0x2Eu);
            __uint64_t v80 = AVE_GetCurrTime();
            int v81 = AVE_Log_GetLevelStr(7);
            int v82 = *(_DWORD *)(v51 + i);
            if (v79)
            {
              printf("%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_I_MbCnt %d\n", v80, 46, v81, a2[229], v82);
              __uint64_t v83 = AVE_GetCurrTime();
              size_t v84 = AVE_Log_GetLevelStr(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_I_MbCnt %d", v83, 46, v84, a2[229], *(_DWORD *)(v51 + i));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_I_MbCnt %d", v80, 46, v81, a2[229], v82);
            }
          }
          if (AVE_Log_CheckLevel(0x2Eu, 7))
          {
            int v85 = AVE_Log_CheckConsole(0x2Eu);
            __uint64_t v86 = AVE_GetCurrTime();
            int v87 = AVE_Log_GetLevelStr(7);
            int v88 = *(_DWORD *)(v51 + i + 16);
            if (v85)
            {
              printf("%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_P_MbCnt %d\n", v86, 46, v87, a2[229], v88);
              __uint64_t v89 = AVE_GetCurrTime();
              int v90 = AVE_Log_GetLevelStr(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_P_MbCnt %d", v89, 46, v90, a2[229], *(_DWORD *)(v51 + i + 16));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_P_MbCnt %d", v86, 46, v87, a2[229], v88);
            }
          }
        }
        unsigned int v74 = *(_DWORD *)(v51 + 152);
        __uint64_t v19 = v173;
        if (v74 < 8)
        {
          uint64_t v20 = 3758097084;
          if (AVE_Log_CheckLevel(3u, 4))
          {
            int v91 = AVE_Log_CheckConsole(3u);
            __uint64_t v76 = AVE_GetCurrTime();
            __uint64_t v92 = AVE_Log_GetLevelStr(4);
            if (v91)
            {
              printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader->ui32_SPSPPSHeaderBits = 0 (m_CodedBuffPointerDataHeader[%d])\n", v76, 3, v92, "SendSPSandPPS", 2359, "SPSPPSHeaderSize != 0", a2[229]);
              __uint64_t v76 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
              __uint64_t v19 = v173;
            }
LABEL_115:
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader->ui32_SPSPPSHeaderBits = 0 (m_CodedBuffPointerDataHeader[%d])", v76);
            goto LABEL_116;
          }
          goto LABEL_116;
        }
      }
      else
      {
        int v174 = BaseAddress;
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          int v65 = AVE_Log_CheckConsole(0x2Eu);
          __uint64_t v66 = AVE_GetCurrTime();
          int v67 = AVE_Log_GetLevelStr(7);
          int v68 = a2[5480];
          if (v65)
          {
            printf("%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_SPSPPSHeaderBits %d\n", v66, 46, v67, a2[229], v68);
            __uint64_t v69 = AVE_GetCurrTime();
            __uint64_t v70 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_SPSPPSHeaderBits %d", v69, 46, v70, a2[229], a2[5480]);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_SPSPPSHeaderBits %d", v66, 46, v67, a2[229], v68);
          }
        }
        unsigned int v74 = a2[5480];
        if (v74 <= 7)
        {
          uint64_t v20 = 3758097084;
          if (AVE_Log_CheckLevel(3u, 4))
          {
            int v75 = AVE_Log_CheckConsole(3u);
            __uint64_t v76 = AVE_GetCurrTime();
            __uint64_t v77 = AVE_Log_GetLevelStr(4);
            if (v75)
            {
              printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader->ui32_SPSPPSHeaderBits = 0 (m_CodedBuffPointerDataHeader[%d])\n", v76, 3, v77, "SendSPSandPPS", 2365, "SPSPPSHeaderSize != 0", a2[229]);
              __uint64_t v76 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
            }
            goto LABEL_115;
          }
LABEL_116:
          IOSurfaceUnlock(v19, 0, 0);
LABEL_117:
          CFRelease(v19);
          goto LABEL_37;
        }
      }
      uint64_t v93 = v74 >> 3;
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        int v94 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v95 = AVE_GetCurrTime();
        uint64_t v96 = AVE_Log_GetLevelStr(7);
        if (v94)
        {
          printf("%lld %d AVE %s: H264FrameRec: m_SPSPPSHeaderSize from FW = %d\n", v95, 46, v96, v93);
          __uint64_t v97 = AVE_GetCurrTime();
          int v162 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: m_SPSPPSHeaderSize from FW = %d", v97, 46, v162, v93);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: m_SPSPPSHeaderSize from FW = %d", v95, 46, v96, v93);
        }
      }
      int v98 = *(_DWORD *)(v6 + 324);
      if (v98 == 1)
      {
        int v17 = v175;
        CopyVPSSPSPPSHeader(v174, v175, v93, v178, *(_DWORD *)v6, *(_DWORD *)(v7 + 16276));
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          int v104 = AVE_Log_CheckConsole(0x2Eu);
          __uint64_t v105 = AVE_GetCurrTime();
          int v106 = AVE_Log_GetLevelStr(7);
          if (v104)
          {
            printf("%lld %d AVE %s: H264FrameRec: CopySPSPPSHeader m_SPSPPSHeaderSize %d (SPS %d + PPS %d)\n", v105, 46, v106, v93, v178[1], v178[2]);
            __uint64_t v107 = AVE_GetCurrTime();
            size_t v108 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: CopySPSPPSHeader m_SPSPPSHeaderSize %d (SPS %d + PPS %d)", v107, 46, v108, v93, v178[1], v178[2]);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: CopySPSPPSHeader m_SPSPPSHeaderSize %d (SPS %d + PPS %d)", v105, 46, v106, v93, v178[1], v178[2]);
          }
          int v17 = v175;
        }
        if (*(unsigned char *)(v6 + 204))
        {
          if (!a2[40])
          {
            CopyVPSSPSPPSHeader(v174, (unsigned __int8 *)*v176, v93, v178, *(_DWORD *)v6, *(_DWORD *)(v7 + 16276));
            *(void *)(a1 + 245272) = v93;
            if (AVE_Log_CheckLevel(0x2Eu, 7))
            {
              int v115 = AVE_Log_CheckConsole(0x2Eu);
              __uint64_t v116 = AVE_GetCurrTime();
              uint64_t v117 = AVE_Log_GetLevelStr(7);
              if (v115)
              {
                printf("%lld %d AVE %s: H264FrameRec: SendSPSandPPS bUseElementaryStreamOutput CopyVPSSPSPPSHeader %p %d\n", v116, 46, v117, *v176, *(_DWORD *)(a1 + 245272));
                AVE_GetCurrTime();
                AVE_Log_GetLevelStr(7);
              }
              syslog(3, "%lld %d AVE %s: H264FrameRec: SendSPSandPPS bUseElementaryStreamOutput CopyVPSSPSPPSHeader %p %d");
              goto LABEL_135;
            }
          }
        }
      }
      else
      {
        int v17 = v175;
        if (v98)
        {
          uint64_t v20 = 3758097084;
          if (AVE_Log_CheckLevel(3u, 4))
          {
            int v109 = AVE_Log_CheckConsole(3u);
            __uint64_t v110 = AVE_GetCurrTime();
            int v111 = AVE_Log_GetLevelStr(4);
            if (v109)
            {
              printf("%lld %d AVE %s: %s:%d %s | SendSPSAndPPS ERROR: codecType not recognized)\n", v110, 3, v111, "SendSPSandPPS", 2402, "false");
              AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | SendSPSAndPPS ERROR: codecType not recognized)");
          }
          goto LABEL_116;
        }
        CopySPSPPSHeader(v174, v175, v93, v178, *(_DWORD *)(v7 + 16276));
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          int v99 = AVE_Log_CheckConsole(0x2Eu);
          __uint64_t v100 = AVE_GetCurrTime();
          __uint64_t v101 = AVE_Log_GetLevelStr(7);
          if (v99)
          {
            printf("%lld %d AVE %s: H264FrameRec: CopySPSPPSHeader m_SPSPPSHeaderSize %d (SPS %d + PPS %d)\n", v100, 46, v101, v93, v178[1], v178[2]);
            __uint64_t v102 = AVE_GetCurrTime();
            int v103 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: CopySPSPPSHeader m_SPSPPSHeaderSize %d (SPS %d + PPS %d)", v102, 46, v103, v93, v178[1], v178[2]);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: CopySPSPPSHeader m_SPSPPSHeaderSize %d (SPS %d + PPS %d)", v100, 46, v101, v93, v178[1], v178[2]);
          }
          int v17 = v175;
        }
        if (*(unsigned char *)(v6 + 204))
        {
          if (!a2[40])
          {
            CopySPSPPSHeader(v174, (unsigned __int8 *)*v176, v93, v178, *(_DWORD *)(v7 + 16276));
            *(void *)(a1 + 245272) = v93;
            if (AVE_Log_CheckLevel(0x2Eu, 7))
            {
              int v112 = AVE_Log_CheckConsole(0x2Eu);
              __uint64_t v113 = AVE_GetCurrTime();
              __uint64_t v114 = AVE_Log_GetLevelStr(7);
              if (v112)
              {
                printf("%lld %d AVE %s: H264FrameRec: SendSPSandPPS bUseElementaryStreamOutput CopySPSPPSHeader %p %d\n", v113, 46, v114, *v176, *(_DWORD *)(a1 + 245272));
                AVE_GetCurrTime();
                AVE_Log_GetLevelStr(7);
              }
              syslog(3, "%lld %d AVE %s: H264FrameRec: SendSPSandPPS bUseElementaryStreamOutput CopySPSPPSHeader %p %d");
LABEL_135:
              int v17 = v175;
            }
          }
        }
      }
      if (*(unsigned char *)(v6 + 413))
      {
        uint64_t v118 = *(void *)(v7 + 80);
        if (v118 != 1)
        {
          if (*(_DWORD *)v6 <= 1u)
          {
            uint64_t v119 = H264VideoEncoderFrameReceiver::CreatevideoFormatDesc(a1, v118, v17, v178);
            if (v119)
            {
              uint64_t v20 = v119;
              if (!AVE_Log_CheckLevel(3u, 4)) {
                goto LABEL_116;
              }
              int v120 = AVE_Log_CheckConsole(3u);
              __uint64_t v121 = AVE_GetCurrTime();
              __uint64_t v122 = AVE_Log_GetLevelStr(4);
              if (v120)
              {
                uint64_t v123 = v19;
                int v124 = 2425;
LABEL_149:
                printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreatevideoFormatDesc failed.\n", v121, 3, v122, "SendSPSandPPS", v124, "err == noErr");
                AVE_GetCurrTime();
                __uint64_t v19 = v123;
                AVE_Log_GetLevelStr(4);
                goto LABEL_187;
              }
              goto LABEL_187;
            }
            goto LABEL_164;
          }
          AVE_PS_Compose_general_profile_compatibility_flag(a1 + 158424, a1 + 239320, 4);
          AVE_PS_Compose_general_constraint_indicator_flags(a1 + 158424, (unsigned char *)(a1 + 239324), 6);
          uint64_t v132 = H264VideoEncoderFrameReceiver::CreatevideoFormatDesc_MVHEVC(a1, *(void *)(v7 + 80), v17, v93, (uint64_t)a2);
          if (v132)
          {
            uint64_t v20 = v132;
            if (!AVE_Log_CheckLevel(0x2Eu, 4)) {
              goto LABEL_116;
            }
            int v133 = AVE_Log_CheckConsole(0x2Eu);
            __uint64_t v134 = AVE_GetCurrTime();
            CFDataRef v135 = AVE_Log_GetLevelStr(4);
            if (v133)
            {
              int v17 = v175;
              printf("%lld %d AVE %s: %s::%s:%d %s | failed to create MV-HEVC format descriptor %p %d %p\n", v134, 46, v135, "AVE_FrameRecv", "SendSPSandPPS", 2436, "err == noErr", v175, v93, a2);
              __uint64_t v134 = AVE_GetCurrTime();
              int v136 = AVE_Log_GetLevelStr(4);
              uint64_t v171 = v93;
              int v172 = a2;
              unsigned int v170 = v175;
              uint64_t v137 = 2436;
LABEL_163:
              uint64_t v169 = v137;
              uint64_t v164 = v136;
LABEL_190:
              syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create MV-HEVC format descriptor %p %d %p", v134, 46, v164, "AVE_FrameRecv", "SendSPSandPPS", v169, "err == noErr", v170, v171, v172);
              goto LABEL_116;
            }
            uint64_t v171 = v93;
            int v172 = a2;
            int v17 = v175;
            unsigned int v170 = v175;
            uint64_t v156 = 2436;
            goto LABEL_189;
          }
          goto LABEL_164;
        }
      }
      else
      {
        uint64_t v125 = *(void *)(v7 + 72);
        if (v125 != 1)
        {
          if (*(_DWORD *)v6 <= 1u)
          {
            uint64_t v126 = H264VideoEncoderFrameReceiver::CreatevideoFormatDesc(a1, v125, v17, v178);
            if (v126)
            {
              uint64_t v20 = v126;
              if (!AVE_Log_CheckLevel(3u, 4)) {
                goto LABEL_116;
              }
              int v127 = AVE_Log_CheckConsole(3u);
              __uint64_t v121 = AVE_GetCurrTime();
              __uint64_t v122 = AVE_Log_GetLevelStr(4);
              if (v127)
              {
                uint64_t v123 = v19;
                int v124 = 2472;
                goto LABEL_149;
              }
LABEL_187:
              syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreatevideoFormatDesc failed.");
              goto LABEL_116;
            }
            goto LABEL_164;
          }
          AVE_PS_Compose_general_profile_compatibility_flag(a1 + 158424, a1 + 239320, 4);
          AVE_PS_Compose_general_constraint_indicator_flags(a1 + 158424, (unsigned char *)(a1 + 239324), 6);
          uint64_t v138 = H264VideoEncoderFrameReceiver::CreatevideoFormatDesc_MVHEVC(a1, *(void *)(v7 + 72), v17, v93, (uint64_t)a2);
          if (v138)
          {
            uint64_t v20 = v138;
            if (!AVE_Log_CheckLevel(0x2Eu, 4)) {
              goto LABEL_116;
            }
            int v139 = AVE_Log_CheckConsole(0x2Eu);
            __uint64_t v134 = AVE_GetCurrTime();
            CFDataRef v135 = AVE_Log_GetLevelStr(4);
            if (v139)
            {
              int v17 = v175;
              printf("%lld %d AVE %s: %s::%s:%d %s | failed to create MV-HEVC format descriptor %p %d %p\n", v134, 46, v135, "AVE_FrameRecv", "SendSPSandPPS", 2483, "err == noErr", v175, v93, a2);
              __uint64_t v134 = AVE_GetCurrTime();
              int v136 = AVE_Log_GetLevelStr(4);
              uint64_t v171 = v93;
              int v172 = a2;
              unsigned int v170 = v175;
              uint64_t v137 = 2483;
              goto LABEL_163;
            }
            uint64_t v171 = v93;
            int v172 = a2;
            int v17 = v175;
            unsigned int v170 = v175;
            uint64_t v156 = 2483;
LABEL_189:
            uint64_t v169 = v156;
            uint64_t v164 = v135;
            goto LABEL_190;
          }
LABEL_164:
          if (AVE_Log_CheckLevel(0x2Eu, 7))
          {
            int v140 = AVE_Log_CheckConsole(0x2Eu);
            __uint64_t v141 = AVE_GetCurrTime();
            CFIndex v142 = AVE_Log_GetLevelStr(7);
            if (v140)
            {
              printf("%lld %d AVE %s: H264FrameRec: VPS  size %d\n", v141, 46, v142, v178[0]);
              __uint64_t v143 = AVE_GetCurrTime();
              uint64_t v165 = AVE_Log_GetLevelStr(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: VPS  size %d", v143, 46, v165, v178[0]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: VPS  size %d", v141, 46, v142, v178[0]);
            }
          }
          if (AVE_Log_CheckLevel(0x2Eu, 7))
          {
            int v144 = AVE_Log_CheckConsole(0x2Eu);
            __uint64_t v145 = AVE_GetCurrTime();
            uint64_t v146 = AVE_Log_GetLevelStr(7);
            if (v144)
            {
              printf("%lld %d AVE %s: H264FrameRec: SPS  size %d\n", v145, 46, v146, v178[1]);
              __uint64_t v147 = AVE_GetCurrTime();
              uint64_t v166 = AVE_Log_GetLevelStr(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: SPS  size %d", v147, 46, v166, v178[1]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: SPS  size %d", v145, 46, v146, v178[1]);
            }
          }
          if (AVE_Log_CheckLevel(0x2Eu, 7))
          {
            int v148 = AVE_Log_CheckConsole(0x2Eu);
            __uint64_t v149 = AVE_GetCurrTime();
            int v150 = AVE_Log_GetLevelStr(7);
            if (v148)
            {
              printf("%lld %d AVE %s: H264FrameRec: PPS1 size %d\n", v149, 46, v150, v178[2]);
              __uint64_t v151 = AVE_GetCurrTime();
              __uint64_t v167 = AVE_Log_GetLevelStr(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: PPS1 size %d", v151, 46, v167, v178[2]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: PPS1 size %d", v149, 46, v150, v178[2]);
            }
          }
          if (AVE_Log_CheckLevel(0x2Eu, 7))
          {
            int v152 = AVE_Log_CheckConsole(0x2Eu);
            __uint64_t v153 = AVE_GetCurrTime();
            int v154 = AVE_Log_GetLevelStr(7);
            if (v152)
            {
              printf("%lld %d AVE %s: H264FrameRec: PPS2 size %d\n", v153, 46, v154, v178[3]);
              __uint64_t v155 = AVE_GetCurrTime();
              int v168 = AVE_Log_GetLevelStr(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: PPS2 size %d", v155, 46, v168, v178[3]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: PPS2 size %d", v153, 46, v154, v178[3]);
            }
          }
LABEL_184:
          AVE_Dump_WriteOutput(*(void **)(a1 + 71552), a2[3], v17, v93);
          uint64_t v20 = 0;
          goto LABEL_116;
        }
      }
      if (*(void *)(v7 + 8) && *(void *)v7)
      {
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          int v128 = AVE_Log_CheckConsole(0x2Eu);
          __uint64_t v129 = AVE_GetCurrTime();
          __uint64_t v130 = AVE_Log_GetLevelStr(7);
          if (v128)
          {
            printf("%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame on %d bytes (SPS PPS)\n", v129, 46, v130, v93);
            __uint64_t v131 = AVE_GetCurrTime();
            __uint64_t v163 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame on %d bytes (SPS PPS)", v131, 46, v163, v93);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame on %d bytes (SPS PPS)", v129, 46, v130, v93);
          }
          int v17 = v175;
        }
        (*(void (**)(void, unsigned __int8 *, uint64_t, void, void))(v7 + 8))(*(void *)v7, v17, v93, 0, *(unsigned int *)(v6 + 324));
      }
      *(unsigned char *)(a1 + 25784) = 1;
      goto LABEL_184;
    }
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v58 = AVE_Log_CheckConsole(3u);
      __uint64_t v59 = AVE_GetCurrTime();
      __uint64_t v60 = AVE_Log_GetLevelStr(4);
      if (v58)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreateBuffer failed 2.\n", v59, 3, v60, "SendSPSandPPS", 2327, "m_SPSPPSFinalOutputbUseElementaryStreamOutput != __null");
        __uint64_t v61 = AVE_GetCurrTime();
        __uint64_t v161 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreateBuffer failed 2.", v61, 3, v161, "SendSPSandPPS", 2327, "m_SPSPPSFinalOutputbUseElementaryStreamOutput != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreateBuffer failed 2.", v59, 3, v60, "SendSPSandPPS", 2327, "m_SPSPPSFinalOutputbUseElementaryStreamOutput != __null");
      }
      uint64_t v20 = 3758097085;
    }
    else
    {
      uint64_t v20 = 3758097085;
    }
  }
  else if (AVE_Log_CheckLevel(3u, 4))
  {
    int v34 = AVE_Log_CheckConsole(3u);
    __uint64_t v35 = AVE_GetCurrTime();
    int v36 = AVE_Log_GetLevelStr(4);
    if (v34)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreateBuffer failed.\n", v35, 3, v36, "SendSPSandPPS", 2322, "FinalOutput != __null");
      __uint64_t v37 = AVE_GetCurrTime();
      int v159 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreateBuffer failed.", v37, 3, v159, "SendSPSandPPS", 2322, "FinalOutput != __null");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreateBuffer failed.", v35, 3, v36, "SendSPSandPPS", 2322, "FinalOutput != __null");
    }
    int v17 = 0;
    uint64_t v20 = 3758097085;
  }
  else
  {
    int v17 = 0;
    uint64_t v20 = 3758097085;
  }
LABEL_37:
  H264VideoEncoderFrameReceiver::DeleteBuffer((H264VideoEncoderFrameReceiver *)a1, v17);
  if (cf) {
    CFRelease(cf);
  }
  return v20;
}

char *H264VideoEncoderFrameReceiver::CreateBuffer(CFAllocatorRef *this, size_t size, OpaqueCMBlockBuffer **a3)
{
  dataPointerOut = 0;
  if (size)
  {
    uint64_t v4 = (_DWORD *)this + 59837;
    if (*((unsigned char *)this + 68345))
    {
      if (this[6419] != (CFAllocatorRef)1 && *v4 != 2)
      {
        int v5 = (char *)CFAllocatorAllocate(this[6413], size, 0);
LABEL_15:
        dataPointerOut = v5;
        goto LABEL_16;
      }
    }
    else if (this[6418] != (CFAllocatorRef)1 && *v4 != 2)
    {
      VTEncoderSessionCreateCMBlockBuffer();
      CMBlockBufferGetDataPointer(*a3, 0, 0, 0, &dataPointerOut);
LABEL_16:
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        int v9 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(7);
        if (v9)
        {
          printf("%lld %d AVE %s: H264FrameRec: CreateBuffer %p size %ld\n", CurrTime, 46, LevelStr, dataPointerOut, size);
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(7);
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec: CreateBuffer %p size %ld");
      }
      return dataPointerOut;
    }
    if (*v4 == 2 && this[6412])
    {
      VTMotionEstimationProcessorSessionCreateMotionVectorPixelBuffer();
      goto LABEL_16;
    }
    int v5 = (char *)malloc_type_malloc(size, 0x1B9D6B20uLL);
    goto LABEL_15;
  }
  if (AVE_Log_CheckLevel(0x2Eu, 4))
  {
    int v6 = AVE_Log_CheckConsole(0x2Eu);
    __uint64_t v7 = AVE_GetCurrTime();
    unsigned int v8 = AVE_Log_GetLevelStr(4);
    if (v6)
    {
      printf("%lld %d AVE %s: FIG: H264FrameRec: CreateBuffer with size 0\n", v7, 46, v8);
      AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: FIG: H264FrameRec: CreateBuffer with size 0");
  }
  return dataPointerOut;
}

__uint64_t H264VideoEncoderFrameReceiver::ProcessAndEmitLrmeStats(uint64_t a1, uint64_t a2)
{
  v233[4] = *MEMORY[0x1E4F143B8];
  double v232 = 0;
  if (!a2)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v16 = AVE_Log_CheckConsole(3u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v16)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: ProcessAndEmitLrmeStats with Frame == NULL.\n", CurrTime, 3, LevelStr, "ProcessAndEmitLrmeStats", 2652, "false");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: ProcessAndEmitLrmeStats with Frame == NULL.");
    }
    goto LABEL_25;
  }
  if (*(_DWORD *)(a1 + 239348) != 2)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v19 = AVE_Log_CheckConsole(3u);
      __uint64_t v20 = AVE_GetCurrTime();
      int v21 = AVE_Log_GetLevelStr(4);
      if (v19)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec WARNING: ProcessAndEmitLrmeStats called with AVE_ClientType_LRME == false.\n", v20, 3, v21, "ProcessAndEmitLrmeStats", 2654, "false");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec WARNING: ProcessAndEmitLrmeStats called with AVE_ClientType_LRME == false.");
    }
LABEL_25:
    H264VideoEncoderFrameReceiver::DoneWithThisFrameFromTheHW(a1, a2, 0);
    return 0;
  }
  __uint64_t v4 = 3758097084;
  int v5 = (_DWORD *)(a2 + 23468);
  if (*(_DWORD *)(a2 + 23468) == 3)
  {
    int v228 = 0;
    uint64_t v230 = (uint64_t *)(a1 + 51272);
    uint64_t v6 = 0;
    int v231 = 0;
    __uint64_t v7 = 0;
    int v8 = -536870212;
LABEL_5:
    uint64_t v9 = v6;
    AVE_Dump_WriteOutput(*(void **)(a1 + 71552), *(_DWORD *)(a2 + 12), v7, v6);
    int v10 = v228;
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      int v11 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v12 = AVE_GetCurrTime();
      __uint64_t v13 = AVE_Log_GetLevelStr(7);
      int v14 = *(_DWORD *)(a2 + 160);
      if (v11)
      {
        printf("%lld %d AVE %s: ARK H264FrameRec:ProcessAndEmitLrmeStats %d\n", v12, 46, v13, v14);
        __uint64_t v15 = AVE_GetCurrTime();
        int v204 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: ARK H264FrameRec:ProcessAndEmitLrmeStats %d", v15, 46, v204, *(_DWORD *)(a2 + 160));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: ARK H264FrameRec:ProcessAndEmitLrmeStats %d", v12, 46, v13, v14);
      }
    }
    if (*v5 == 3) {
      goto LABEL_34;
    }
    __uint64_t v40 = (void (*)(uint64_t, unsigned __int8 *, uint64_t, void *, void))v230[1];
    if (v40)
    {
      uint64_t v41 = *v230;
      if (*v230)
      {
        v233[0] = *(unsigned int *)(a2 + 160);
        v233[1] = -1;
        uint64_t v42 = *(int *)(a2 + 2304);
        v233[2] = *(void *)(a2 + 2296);
        v233[3] = v42;
        v40(v41, v228, v9, v233, *(unsigned int *)(a1 + 68256));
LABEL_34:
        __uint64_t v4 = 0;
LABEL_35:
        int v36 = v231;
        goto LABEL_36;
      }
    }
    if (!AVE_Log_CheckLevel(3u, 4)) {
      goto LABEL_35;
    }
    int v43 = AVE_Log_CheckConsole(3u);
    __uint64_t v44 = AVE_GetCurrTime();
    __uint64_t v45 = AVE_Log_GetLevelStr(4);
    int v36 = v231;
    if (v43)
    {
      printf("%lld %d AVE %s: %s:%d %s | OF: Session callbacks are not set properly, output will be dropped\n", v44, 3, v45, "ProcessAndEmitLrmeStats", 3137, "false");
      __uint64_t v46 = AVE_GetCurrTime();
      int v206 = AVE_Log_GetLevelStr(4);
      int v36 = v231;
      __uint64_t v4 = 3758097084;
      syslog(3, "%lld %d AVE %s: %s:%d %s | OF: Session callbacks are not set properly, output will be dropped", v46, 3, v206, "ProcessAndEmitLrmeStats", 3137, "false");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | OF: Session callbacks are not set properly, output will be dropped", v44, 3, v45, "ProcessAndEmitLrmeStats", 3137, "false");
    }
LABEL_36:
    H264VideoEncoderFrameReceiver::DoneWithThisFrameFromTheHW(a1, a2, 0);
    if (v10) {
      H264VideoEncoderFrameReceiver::DeleteBuffer((H264VideoEncoderFrameReceiver *)a1, v10);
    }
    goto LABEL_57;
  }
  __uint64_t v227 = (_DWORD *)(a2 + 23468);
  __uint64_t v22 = (char *)(a1 + 67834);
  uint64_t v23 = a1 + 4 * *(int *)(a2 + 916);
  __uint64_t v24 = (IOSurfaceID *)(v23 + 26392);
  int v25 = (IOSurfaceID *)(v23 + 26432);
  if (*(unsigned char *)(a1 + 67845)) {
    __uint64_t v26 = v25;
  }
  else {
    __uint64_t v26 = v24;
  }
  if (!*v26)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      uint64_t v32 = AVE_Log_CheckConsole(3u);
      __uint64_t v38 = AVE_GetCurrTime();
      __uint64_t v39 = AVE_Log_GetLevelStr(4);
      if (!v32)
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: ProcessAndEmitLrmeStats with statsMapCSID == NULL.");
        goto LABEL_55;
      }
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: ProcessAndEmitLrmeStats with statsMapCSID == NULL.\n", v38, 3, v39, "ProcessAndEmitLrmeStats", 2661, "statsMapCSID != 0");
      AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: ProcessAndEmitLrmeStats with statsMapCSID == NULL.");
    }
LABEL_44:
    int v36 = 0;
    goto LABEL_45;
  }
  char v27 = *v22;
  int v28 = *(_DWORD *)(a1 + 51376);
  int v29 = *(_DWORD *)(a1 + 51380);
  uint64_t v230 = (uint64_t *)(a1 + 51272);
  __uint64_t v30 = IOSurfaceLookup(*v26);
  if (!v30)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      uint64_t v32 = AVE_Log_CheckConsole(3u);
      __uint64_t v47 = AVE_GetCurrTime();
      __uint64_t v48 = AVE_Log_GetLevelStr(4);
      if (v32)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: statSurfaceRef IOSurfaceLookup failed.\n", v47, 3, v48, "ProcessAndEmitLrmeStats", 2664, "LrmeStatSurfaceRef != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: statSurfaceRef IOSurfaceLookup failed.");
        goto LABEL_44;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: statSurfaceRef IOSurfaceLookup failed.");
LABEL_55:
      int v36 = 0;
      goto LABEL_56;
    }
    goto LABEL_44;
  }
  int v231 = v30;
  uint64_t v31 = IOSurfaceLock(v30, 0, 0);
  if (v31)
  {
    uint64_t v32 = v31;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v33 = AVE_Log_CheckConsole(3u);
      __uint64_t v34 = AVE_GetCurrTime();
      __uint64_t v35 = AVE_Log_GetLevelStr(4);
      int v36 = v231;
      if (v33)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: IOSurfaceLock statSurfaceRef failed.\n", v34, 3, v35, "ProcessAndEmitLrmeStats", 2667, "lockErr == 0");
        __uint64_t v37 = AVE_GetCurrTime();
        int v205 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: IOSurfaceLock statSurfaceRef failed.", v37, 3, v205, "ProcessAndEmitLrmeStats", 2667, "lockErr == 0");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: IOSurfaceLock statSurfaceRef failed.", v34, 3, v35, "ProcessAndEmitLrmeStats", 2667, "lockErr == 0");
      }
      LODWORD(v4) = v32;
      goto LABEL_56;
    }
    LODWORD(v4) = v32;
    goto LABEL_49;
  }
  if (*(unsigned char *)(a1 + 67845))
  {
    __uint64_t v50 = v231;
    char v49 = *(unsigned char *)(a1 + 67845);
    size_t v51 = (IOSurfaceGetAllocSize(v231) >> 1) * ((v49 & 1) == 0);
  }
  else
  {
    LODWORD(v51) = 0;
    __uint64_t v50 = v231;
  }
  BaseAddress = (char *)IOSurfaceGetBaseAddress(v50);
  if (BaseAddress)
  {
    int v54 = v28 << (2 * v27);
    int v229 = v29 << (2 * v27);
    unsigned int v222 = v54 + 15;
    unsigned int v224 = v54 + 31;
    unsigned int v226 = (v54 + 15) >> 4;
    unsigned int v55 = (v229 + 15) >> 4;
    __uint64_t v56 = &BaseAddress[v51];
    unsigned int AllocSize = IOSurfaceGetAllocSize(v50);
    if (*(int *)(a1 + 239352) > 7)
    {
      __uint64_t v4 = 3758097084;
      if (!*(unsigned char *)(a1 + 67845))
      {
        switch(*(_DWORD *)(a1 + 69656))
        {
          case 0:
            unsigned int v220 = v229 + 15;
            BOOL v225 = *v22 == 0;
            uint64_t v221 = 4 * v226 * v55;
            int v127 = H264VideoEncoderFrameReceiver::CreateBuffer((CFAllocatorRef *)a1, v221, &v232);
            int v128 = (char *)CVPixelBufferGetBaseAddress((CVPixelBufferRef)v127);
            if (!v128)
            {
              int v10 = (unsigned __int8 *)v127;
              if (AVE_Log_CheckLevel(0x14u, 4))
              {
                int v178 = AVE_Log_CheckConsole(0x14u);
                __uint64_t v179 = AVE_GetCurrTime();
                uint64_t v180 = AVE_Log_GetLevelStr(4);
                if (v178)
                {
                  printf("%lld %d AVE %s: %s:%d %s | OF: %s: MvStatsBuffer is NULL\n", v179, 20, v180, "ProcessAndEmitLrmeStats", 2999, "MvStatsBuffer != __null", "ProcessAndEmitLrmeStats");
                  __uint64_t v179 = AVE_GetCurrTime();
                  AVE_Log_GetLevelStr(4);
                }
                syslog(3, "%lld %d AVE %s: %s:%d %s | OF: %s: MvStatsBuffer is NULL", v179);
              }
              goto LABEL_243;
            }
            __uint64_t v129 = v128;
            int v228 = (unsigned __int8 *)v127;
            size_t v130 = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)v127) >> 2;
            if (AVE_Log_CheckLevel(0x14u, 7))
            {
              int v215 = AVE_Log_CheckConsole(0x14u);
              __uint64_t v217 = AVE_GetCurrTime();
              __uint64_t v131 = AVE_Log_GetLevelStr(7);
              if (v215)
              {
                printf("%lld %d AVE %s: OF: %s: Copy LRME Best MV data: %d x %d MBs, FinalOutputSize %lu, iMBsPerRowForOutput %d\n\n", v217, 20, v131, "ProcessAndEmitLrmeStats", v226, v55, v221, v130);
                __uint64_t v217 = AVE_GetCurrTime();
                AVE_Log_GetLevelStr(7);
              }
              syslog(3, "%lld %d AVE %s: OF: %s: Copy LRME Best MV data: %d x %d MBs, FinalOutputSize %lu, iMBsPerRowForOutput %d\n", v217, 20);
            }
            if (*(int *)(a1 + 239352) >= 22)
            {
              AVE_LRME_FillFSResultsBestMV(v56, v129, v221, v226, v55, v130, *v22);
              uint64_t v6 = 4 * v226 * v55;
              int v8 = 0;
              goto LABEL_135;
            }
            bzero(v129, v221);
            if (v220 >= 0x10)
            {
              int v184 = 0;
              uint64_t v183 = 0;
              uint64_t v182 = 0;
              char v185 = 2 * v225;
              unsigned int v186 = (v55 + 3) >> 2;
              unsigned int v187 = v55 * v130;
              uint64_t v181 = 0;
              if (v226 <= 1) {
                int v188 = 1;
              }
              else {
                int v188 = v226;
              }
              if (v186 <= 1) {
                unsigned int v186 = 1;
              }
              do
              {
                if (v222 >= 0x10)
                {
                  for (int i = 0; i != v188; ++i)
                  {
                    uint64_t v190 = 0;
                    unsigned int v191 = i + 4 * v130 * v184;
                    CFArrayRef v192 = v56;
                    do
                    {
                      for (uint64_t j = 0; j != 7; ++j)
                      {
                        if (*(__int16 *)&v192[2 * j] < 0) {
                          break;
                        }
                      }
                      __uint64_t v194 = (unsigned __int16 *)&v56[16 * v190 + 2 * j];
                      int v195 = (__int16)*v194;
                      if (v195 < 0 && v191 < v187)
                      {
                        _S0 = (float)((char)v195 << v185);
                        __asm { FCVT            H0, S0 }
                        int v197 = &v129[4 * v191];
                        *(_WORD *)int v197 = LOWORD(_S0);
                        _S1 = (float)(*v194 << 17 >> 25 << v185);
                        __asm { FCVT            H1, S1 }
                        *((_WORD *)v197 + 1) = LOWORD(_S1);
                        uint64_t v182 = (v182 + 1);
                        __asm { FCMP            H0, #0 }
                        if (_ZF) {
                          int v199 = 0;
                        }
                        else {
                          int v199 = 1;
                        }
                        __asm { FCMP            H1, #0 }
                        if (!_ZF) {
                          int v199 = 1;
                        }
                        uint64_t v183 = (v183 + v199);
                      }
                      v191 += v130;
                      ++v190;
                      v192 += 16;
                    }
                    while (v190 != 4);
                    v56 += 64;
                  }
                  uint64_t v181 = (4 * v188 + v181);
                }
                ++v184;
              }
              while (v184 != v186);
            }
            else
            {
              uint64_t v181 = 0;
              uint64_t v182 = 0;
              uint64_t v183 = 0;
            }
            if (AVE_Log_CheckLevel(0x14u, 7))
            {
              int v201 = AVE_Log_CheckConsole(0x14u);
              __uint64_t v202 = AVE_GetCurrTime();
              unint64_t v203 = AVE_Log_GetLevelStr(7);
              if (v201)
              {
                printf("%lld %d AVE %s: OF: %s: total_mbs = %d, total_valid = %d, total_nonzero = %d\n\n", v202, 20, v203, "ProcessAndEmitLrmeStats", v181, v182, v183);
                __uint64_t v202 = AVE_GetCurrTime();
                uint64_t v210 = v182;
                uint64_t v211 = v183;
                uint64_t v209 = v181;
                int v208 = AVE_Log_GetLevelStr(7);
              }
              else
              {
                uint64_t v210 = v182;
                uint64_t v211 = v183;
                uint64_t v209 = v181;
                int v208 = v203;
              }
              syslog(3, "%lld %d AVE %s: OF: %s: total_mbs = %d, total_valid = %d, total_nonzero = %d\n", v202, 20, v208, "ProcessAndEmitLrmeStats", v209, v210, v211);
            }
            goto LABEL_174;
          case 1:
            if (!AVE_Log_CheckLevel(0x14u, 4))
            {
LABEL_189:
              LODWORD(v4) = 0;
              uint64_t v32 = 4294954394;
              goto LABEL_49;
            }
            int v174 = AVE_Log_CheckConsole(0x14u);
            __uint64_t v142 = AVE_GetCurrTime();
            __uint64_t v143 = AVE_Log_GetLevelStr(4);
            int v36 = v231;
            if (v174)
            {
              int v144 = 3054;
LABEL_188:
              printf("%lld %d AVE %s: %s:%d %s | OF: LRME_OUTPUT_ALL_MV_RESULTS is not supported in video toolbox path\n", v142, 20, v143, "ProcessAndEmitLrmeStats", v144, "bVTOF == false");
              AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
            }
LABEL_207:
            syslog(3, "%lld %d AVE %s: %s:%d %s | OF: LRME_OUTPUT_ALL_MV_RESULTS is not supported in video toolbox path");
LABEL_208:
            LODWORD(v4) = 0;
            uint64_t v32 = 4294954394;
            break;
          case 2:
            int v5 = v227;
            if (AVE_Log_CheckLevel(0x2Eu, 5))
            {
              int v165 = AVE_Log_CheckConsole(0x2Eu);
              __uint64_t v166 = AVE_GetCurrTime();
              __uint64_t v167 = AVE_Log_GetLevelStr(5);
              if (v165)
              {
                printf("%lld %d AVE %s: LRME_OUTPUT_STATISTICS_ONLY is not supported\n\n", v166, 46, v167);
                AVE_GetCurrTime();
                AVE_Log_GetLevelStr(5);
                int v5 = v227;
              }
              syslog(3, "%lld %d AVE %s: LRME_OUTPUT_STATISTICS_ONLY is not supported\n");
            }
            goto LABEL_210;
          case 3:
            int v5 = v227;
            if (AVE_Log_CheckLevel(0x2Eu, 5))
            {
              int v175 = AVE_Log_CheckConsole(0x2Eu);
              __uint64_t v176 = AVE_GetCurrTime();
              __uint64_t v177 = AVE_Log_GetLevelStr(5);
              if (v175)
              {
                printf("%lld %d AVE %s: LRME_OUTPUT_BEST_MV_AND_STATISTICS is not supported\n\n", v176, 46, v177);
                AVE_GetCurrTime();
                AVE_Log_GetLevelStr(5);
                int v5 = v227;
              }
              syslog(3, "%lld %d AVE %s: LRME_OUTPUT_BEST_MV_AND_STATISTICS is not supported\n");
            }
            goto LABEL_210;
          case 4:
            int v5 = v227;
            if (AVE_Log_CheckLevel(0x2Eu, 5))
            {
              int v168 = AVE_Log_CheckConsole(0x2Eu);
              __uint64_t v169 = AVE_GetCurrTime();
              unsigned int v170 = AVE_Log_GetLevelStr(5);
              if (v168)
              {
                printf("%lld %d AVE %s: LRME_OUTPUT_ALL_MV_AND_STATISTICS is not supported\n\n", v169, 46, v170);
                AVE_GetCurrTime();
                AVE_Log_GetLevelStr(5);
                int v5 = v227;
              }
              syslog(3, "%lld %d AVE %s: LRME_OUTPUT_ALL_MV_AND_STATISTICS is not supported\n");
            }
LABEL_210:
            int v8 = 0;
            uint64_t v6 = 0;
            int v228 = 0;
            __uint64_t v7 = 0;
            goto LABEL_5;
          default:
LABEL_134:
            int v8 = 0;
            uint64_t v6 = 0;
            int v228 = 0;
LABEL_135:
            __uint64_t v7 = 0;
            int v5 = v227;
            goto LABEL_5;
        }
        goto LABEL_56;
      }
      unsigned int v219 = v229 + 15;
      uint64_t v118 = 4 * v226 * v55;
      int v214 = *v22;
      if (*(unsigned char *)(a1 + 69660)) {
        uint64_t v119 = 2 * v226 * v55;
      }
      else {
        uint64_t v119 = 0;
      }
      size_t v120 = v119 + v118;
      int v10 = (unsigned __int8 *)H264VideoEncoderFrameReceiver::CreateBuffer((CFAllocatorRef *)a1, v119 + v118, &v232);
      __uint64_t v121 = (char *)CVPixelBufferGetBaseAddress((CVPixelBufferRef)v10);
      if (v121)
      {
        __uint64_t v122 = v121;
        uint64_t v221 = v120;
        bzero(v121, v120);
        size_t v123 = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)v10) >> 2;
        int v228 = v10;
        if (*(unsigned char *)(a1 + 69660)) {
          int v124 = &v10[v118];
        }
        else {
          int v124 = 0;
        }
        if (AVE_Log_CheckLevel(0x14u, 7))
        {
          int v125 = AVE_Log_CheckConsole(0x14u);
          __uint64_t v212 = AVE_GetCurrTime();
          uint64_t v126 = AVE_Log_GetLevelStr(7);
          if (v125)
          {
            printf("%lld %d AVE %s: Copy LRME Best MV data: %d x %d MBs, FinalOutputSize %lu, iMBsPerRowForOutput %d\n\n", v212, 20, v126, v226, v55, v221, v123);
            __uint64_t v212 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(7);
          }
          syslog(3, "%lld %d AVE %s: Copy LRME Best MV data: %d x %d MBs, FinalOutputSize %lu, iMBsPerRowForOutput %d\n", v212);
        }
        if (v219 >= 0x10)
        {
          int v149 = 0;
          uint64_t v150 = 0;
          int v148 = 0;
          LODWORD(v151) = (v55 + 3) >> 2;
          float v152 = 4.0;
          if (!v214) {
            float v152 = 1.0;
          }
          if (v226 <= 1) {
            int v153 = 1;
          }
          else {
            int v153 = v226;
          }
          if (v151 <= 1) {
            uint64_t v151 = 1;
          }
          else {
            uint64_t v151 = v151;
          }
          do
          {
            if (v222 >= 0x10)
            {
              int v154 = 0;
              __uint64_t v155 = &v56[(((v224 & 0xFFFFFFE0) + 63) & 0x1FFFFFFC0) * v150];
              int v156 = 4 * v150 * v123;
              do
              {
                int v157 = 0;
                int v158 = v156;
                do
                {
                  if (v149 + v157 < v55)
                  {
                    _S1 = (float)((int)(*(_DWORD *)v155 << 21) >> 21) / v152;
                    __asm { FCVT            H1, S1 }
                    __uint64_t v160 = &v122[4 * v158];
                    *(_WORD *)__uint64_t v160 = LOWORD(_S1);
                    _S1 = (float)((int)(*(_DWORD *)v155 << 11) >> 22) / v152;
                    __asm { FCVT            H1, S1 }
                    *((_WORD *)v160 + 1) = LOWORD(_S1);
                    if (*(unsigned char *)(a1 + 69660)) {
                      *(_WORD *)&v124[2 * v158] = *(_DWORD *)v155 >> 21;
                    }
                    if ((*(_DWORD *)v155 & 0x1FFFFF) != 0) {
                      ++v148;
                    }
                  }
                  v155 += 4;
                  v158 += v123;
                  ++v157;
                }
                while (v157 != 4);
                ++v154;
                ++v156;
              }
              while (v154 != v153);
            }
            ++v150;
            v149 += 4;
          }
          while (v150 != v151);
        }
        else
        {
          int v148 = 0;
        }
        if (AVE_Log_CheckLevel(0x14u, 7))
        {
          int v162 = AVE_Log_CheckConsole(0x14u);
          __uint64_t v163 = AVE_GetCurrTime();
          uint64_t v164 = AVE_Log_GetLevelStr(7);
          if (v162)
          {
            printf("%lld %d AVE %s: OF: %s: total_mbs = %d, total_nonzero = %d\n\n", v163, 20, v164, "ProcessAndEmitLrmeStats", v226 * v55, v148);
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(7);
          }
          syslog(3, "%lld %d AVE %s: OF: %s: total_mbs = %d, total_nonzero = %d\n");
        }
LABEL_174:
        int v8 = 0;
        __uint64_t v7 = 0;
LABEL_175:
        int v5 = v227;
        uint64_t v6 = v221;
        goto LABEL_5;
      }
      if (!AVE_Log_CheckLevel(0x14u, 4))
      {
LABEL_243:
        int v8 = 0;
        goto LABEL_35;
      }
      int v132 = AVE_Log_CheckConsole(0x14u);
      __uint64_t v133 = AVE_GetCurrTime();
      __uint64_t v134 = AVE_Log_GetLevelStr(4);
      int v36 = v231;
      if (v132)
      {
        printf("%lld %d AVE %s: %s:%d %s | OF: %s: MvStatsBuffer is NULL\n", v133, 20, v134, "ProcessAndEmitLrmeStats", 2935, "MvStatsBuffer != __null", "ProcessAndEmitLrmeStats");
        __uint64_t v133 = AVE_GetCurrTime();
        unint64_t v207 = AVE_Log_GetLevelStr(4);
      }
      else
      {
        unint64_t v207 = v134;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | OF: %s: MvStatsBuffer is NULL", v133, 20, v207, "ProcessAndEmitLrmeStats", 2935, "MvStatsBuffer != __null", "ProcessAndEmitLrmeStats");
    }
    else
    {
      __uint64_t v4 = 3758097084;
      switch(*(_DWORD *)(a1 + 69656))
      {
        case 0:
          unsigned int v216 = AllocSize;
          int v58 = H264VideoEncoderFrameReceiver::CreateBuffer((CFAllocatorRef *)a1, 4 * v226 * v55, &v232);
          __uint64_t v59 = (char *)CVPixelBufferGetBaseAddress((CVPixelBufferRef)v58);
          if (v59)
          {
            __uint64_t v7 = v59;
            unsigned int v223 = v229 + 31;
            uint64_t v221 = 4 * v226 * v55;
            bzero(v59, v221);
            int v228 = (unsigned __int8 *)v58;
            size_t BytesPerRow = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)v58);
            if (v223 >= 0x20)
            {
              int v61 = 0;
              int v62 = 0;
              int v63 = 0;
              unsigned int v64 = v224 >> 5;
              size_t v213 = BytesPerRow >> 3;
              unsigned int v65 = (96 * (v224 >> 5) + 63) & 0xFFFFFFC0;
              unsigned int v66 = v226 * v55 - 1;
              uint64_t v67 = (BytesPerRow >> 3) & 0x7FFFFFFF;
              char v68 = 2 * (*v22 == 0);
              int v69 = 2 * (v224 >> 5);
              int v70 = 2 * v67;
              if (v224 >> 5 <= 1) {
                int v71 = 1;
              }
              else {
                int v71 = v224 >> 5;
              }
              if (((v223 >> 5) + 1) >> 1 <= 1) {
                unsigned int v72 = 1;
              }
              else {
                unsigned int v72 = ((v223 >> 5) + 1) >> 1;
              }
              int v73 = 2 * v71;
              int v74 = 8 * v67;
              int v75 = 8 * v64;
              int v218 = v70;
              unsigned int v76 = v226;
              do
              {
                if (v224 >= 0x20)
                {
                  unsigned int v77 = 0;
                  unsigned int v78 = v63 * v65;
                  do
                  {
                    if (v61 + v77 <= v66)
                    {
                      int v79 = (unsigned __int16 *)&v56[v78];
                      if (v77 < v226)
                      {
                        _S0 = (float)(*v79 << 25 >> 25 << v68);
                        __asm { FCVT            H0, S0 }
                        int v85 = &v7[4 * v62 + 4 * v77];
                        *(_WORD *)int v85 = LOWORD(_S0);
                        _S0 = (float)(*v79 << 19 >> 26 << v68);
                        __asm { FCVT            H0, S0 }
                        *((_WORD *)v85 + 1) = LOWORD(_S0);
                      }
                      if (v77 + 1 < v226)
                      {
                        _S0 = (float)(v79[9] << 25 >> 25 << v68);
                        __asm { FCVT            H0, S0 }
                        int v88 = &v7[4 * v62 + 4 + 4 * v77];
                        *(_WORD *)int v88 = LOWORD(_S0);
                        _S0 = (float)(v79[9] << 19 >> 26 << v68);
                        __asm { FCVT            H0, S0 }
                        *((_WORD *)v88 + 1) = LOWORD(_S0);
                      }
                      if (v69 + v77 <= v66 && ((4 * v63) | 1u) < v55)
                      {
                        if (v77 < v226)
                        {
                          _S0 = (float)(v79[18] << 25 >> 25 << v68);
                          __asm { FCVT            H0, S0 }
                          int v91 = &v7[4 * v70 + 4 * v77];
                          *(_WORD *)int v91 = LOWORD(_S0);
                          _S0 = (float)(v79[18] << 19 >> 26 << v68);
                          __asm { FCVT            H0, S0 }
                          *((_WORD *)v91 + 1) = LOWORD(_S0);
                        }
                        if (v77 + 1 < v226)
                        {
                          _S0 = (float)(v79[27] << 25 >> 25 << v68);
                          __asm { FCVT            H0, S0 }
                          int v94 = &v7[4 * v70 + 4 + 4 * v77];
                          *(_WORD *)int v94 = LOWORD(_S0);
                          _S0 = (float)(v79[27] << 19 >> 26 << v68);
                          __asm { FCVT            H0, S0 }
                          *((_WORD *)v94 + 1) = LOWORD(_S0);
                        }
                      }
                    }
                    v78 += 96;
                    v77 += 2;
                  }
                  while (v73 != v77);
                }
                ++v63;
                v70 += v74;
                v62 += v74;
                v69 += v75;
                v61 += v75;
              }
              while (v63 != v72);
              if (v223 >= 0x40)
              {
                int v96 = 0;
                int v97 = 4 * v213;
                int v98 = 6 * v64;
                int v99 = 4 * v64;
                int v100 = v218 + 4 * v213;
                do
                {
                  if (v224 >= 0x20)
                  {
                    unsigned int v101 = 0;
                    unsigned int v102 = v96 * v65;
                    do
                    {
                      if (v99 + v101 <= v66)
                      {
                        int v103 = (unsigned __int16 *)&v56[(v216 >> 1) + v102];
                        if (v101 < v76)
                        {
                          _S0 = (float)(*v103 << 25 >> 25 << v68);
                          __asm { FCVT            H0, S0 }
                          __uint64_t v105 = &v7[4 * v97 + 4 * v101];
                          *(_WORD *)__uint64_t v105 = LOWORD(_S0);
                          _S0 = (float)(*v103 << 19 >> 26 << v68);
                          unsigned int v76 = v226;
                          __asm { FCVT            H0, S0 }
                          *((_WORD *)v105 + 1) = LOWORD(_S0);
                        }
                        if (v101 + 1 < v76)
                        {
                          _S0 = (float)(v103[9] << 25 >> 25 << v68);
                          __asm { FCVT            H0, S0 }
                          size_t v108 = &v7[4 * v97 + 4 + 4 * v101];
                          *(_WORD *)size_t v108 = LOWORD(_S0);
                          _S0 = (float)(v103[9] << 19 >> 26 << v68);
                          __asm { FCVT            H0, S0 }
                          *((_WORD *)v108 + 1) = LOWORD(_S0);
                        }
                        unsigned int v76 = v226;
                        if (v98 + v101 <= v66 && ((4 * v96) | 3u) < v55)
                        {
                          if (v101 < v226)
                          {
                            _S0 = (float)(v103[18] << 25 >> 25 << v68);
                            __asm { FCVT            H0, S0 }
                            int v111 = &v7[4 * v100 + 4 * v101];
                            *(_WORD *)int v111 = LOWORD(_S0);
                            _S0 = (float)(v103[18] << 19 >> 26 << v68);
                            __asm { FCVT            H0, S0 }
                            *((_WORD *)v111 + 1) = LOWORD(_S0);
                            unsigned int v76 = v226;
                          }
                          if (v101 + 1 < v76)
                          {
                            _S0 = (float)(v103[27] << 25 >> 25 << v68);
                            __asm { FCVT            H0, S0 }
                            __uint64_t v114 = &v7[4 * v100 + 4 + 4 * v101];
                            *(_WORD *)__uint64_t v114 = LOWORD(_S0);
                            _S0 = (float)(v103[27] << 19 >> 26 << v68);
                            __asm { FCVT            H0, S0 }
                            *((_WORD *)v114 + 1) = LOWORD(_S0);
                          }
                        }
                      }
                      v102 += 96;
                      v101 += 2;
                    }
                    while (v73 != v101);
                  }
                  ++v96;
                  v100 += v74;
                  v97 += v74;
                  v98 += v75;
                  v99 += v75;
                }
                while (v96 != v223 >> 6);
              }
            }
            int v8 = 0;
            goto LABEL_175;
          }
          int v10 = (unsigned __int8 *)v58;
          if (!AVE_Log_CheckLevel(3u, 4)) {
            goto LABEL_243;
          }
          int v171 = AVE_Log_CheckConsole(3u);
          __uint64_t v172 = AVE_GetCurrTime();
          __uint64_t v173 = AVE_Log_GetLevelStr(4);
          int v36 = v231;
          if (v171)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: MvStatsBuffer = NULL.\n", v172, 3, v173, "ProcessAndEmitLrmeStats", 2721, "MvStatsBuffer != __null");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: MvStatsBuffer = NULL.");
          break;
        case 1:
          int v36 = v231;
          if (!AVE_Log_CheckLevel(0x14u, 4)) {
            goto LABEL_208;
          }
          int v141 = AVE_Log_CheckConsole(0x14u);
          __uint64_t v142 = AVE_GetCurrTime();
          __uint64_t v143 = AVE_Log_GetLevelStr(4);
          if (!v141) {
            goto LABEL_207;
          }
          int v144 = 2836;
          goto LABEL_188;
        case 2:
          if (!AVE_Log_CheckLevel(0x14u, 4)) {
            goto LABEL_189;
          }
          int v135 = AVE_Log_CheckConsole(0x14u);
          __uint64_t v136 = AVE_GetCurrTime();
          uint64_t v137 = AVE_Log_GetLevelStr(4);
          int v36 = v231;
          if (v135)
          {
            printf("%lld %d AVE %s: %s:%d %s | OF: LRME_OUTPUT_STATISTICS_ONLY is not supported in video toolbox path\n", v136, 20, v137, "ProcessAndEmitLrmeStats", 2878, "bVTOF == false");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | OF: LRME_OUTPUT_STATISTICS_ONLY is not supported in video toolbox path");
          goto LABEL_208;
        case 3:
          int v5 = v227;
          if (AVE_Log_CheckLevel(0x2Eu, 5))
          {
            int v145 = AVE_Log_CheckConsole(0x2Eu);
            __uint64_t v146 = AVE_GetCurrTime();
            __uint64_t v147 = AVE_Log_GetLevelStr(5);
            if (v145)
            {
              printf("%lld %d AVE %s: LRME_OUTPUT_BEST_MV_AND_STATISTICS is not supported yet \n\n", v146, 46, v147);
              AVE_GetCurrTime();
              AVE_Log_GetLevelStr(5);
              int v5 = v227;
            }
            syslog(3, "%lld %d AVE %s: LRME_OUTPUT_BEST_MV_AND_STATISTICS is not supported yet \n");
          }
          goto LABEL_210;
        case 4:
          int v5 = v227;
          if (AVE_Log_CheckLevel(0x2Eu, 5))
          {
            int v138 = AVE_Log_CheckConsole(0x2Eu);
            __uint64_t v139 = AVE_GetCurrTime();
            int v140 = AVE_Log_GetLevelStr(5);
            if (v138)
            {
              printf("%lld %d AVE %s: LRME_OUTPUT_ALL_MV_AND_STATISTICS is not supported yet \n\n", v139, 46, v140);
              AVE_GetCurrTime();
              AVE_Log_GetLevelStr(5);
              int v5 = v227;
            }
            syslog(3, "%lld %d AVE %s: LRME_OUTPUT_ALL_MV_AND_STATISTICS is not supported yet \n");
          }
          goto LABEL_210;
        default:
          goto LABEL_134;
      }
    }
    int v8 = 0;
    goto LABEL_36;
  }
  if (!AVE_Log_CheckLevel(3u, 4))
  {
    LODWORD(v4) = 0;
    uint64_t v32 = 0;
LABEL_49:
    int v36 = v231;
    goto LABEL_56;
  }
  uint64_t v32 = AVE_Log_CheckConsole(3u);
  __uint64_t v4 = AVE_GetCurrTime();
  __uint64_t v116 = AVE_Log_GetLevelStr(4);
  int v36 = v231;
  if (!v32)
  {
    syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: lrmeStat = NULL.", v4, 3, v116, "ProcessAndEmitLrmeStats", 2676, "lrmeStat != __null");
    LODWORD(v4) = 0;
    goto LABEL_56;
  }
  printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: lrmeStat = NULL.\n", v4, 3, v116, "ProcessAndEmitLrmeStats", 2676, "lrmeStat != __null");
  __uint64_t v4 = AVE_GetCurrTime();
  uint64_t v117 = AVE_Log_GetLevelStr(4);
  syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: lrmeStat = NULL.", v4, 3, v117, "ProcessAndEmitLrmeStats", 2676, "lrmeStat != __null");
  LODWORD(v4) = 0;
LABEL_45:
  uint64_t v32 = 0;
LABEL_56:
  int v8 = v4;
  H264VideoEncoderFrameReceiver::DoneWithThisFrameFromTheHW(a1, a2, 0);
  __uint64_t v4 = v32;
LABEL_57:
  if (v36)
  {
    if (!v8) {
      IOSurfaceUnlock(v36, 0, 0);
    }
    CFRelease(v36);
  }
  return v4;
}

void AVE_LRME_FillFSResultsBestMV(char *a1, char *a2, size_t a3, int a4, int a5, int a6, int a7)
{
  bzero(a2, a3);
  if (a5)
  {
    int v13 = 0;
    int v14 = 0;
    int v15 = 0;
    int v16 = 0;
    if (a7) {
      char v17 = 0;
    }
    else {
      char v17 = 2;
    }
    do
    {
      if (a4)
      {
        int v18 = 0;
        do
        {
          uint64_t v19 = 0;
          unsigned int v20 = v18 + 4 * a6 * v13;
          int v21 = a1;
          do
          {
            uint64_t v22 = 0;
            uint64_t v23 = &a1[20 * v19];
            do
            {
              if (*(__int16 *)&v21[2 * v22] < 0) {
                break;
              }
              ++v22;
            }
            while (v22 != 7);
            int v24 = *(__int16 *)&v23[2 * v22];
            if (v24 < 0 && v20 < a6 * a5)
            {
              _S0 = (float)((char)v24 << v17);
              __asm { FCVT            H0, S0 }
              __uint64_t v30 = &a2[4 * v20];
              *(_WORD *)__uint64_t v30 = LOWORD(_S0);
              _S1 = (float)(*(unsigned __int16 *)&v23[2 * v22] << 17 >> 25 << v17);
              __asm { FCVT            H1, S1 }
              *((_WORD *)v30 + 1) = LOWORD(_S1);
              ++v15;
              __asm { FCMP            H0, #0 }
              if (_ZF) {
                int v32 = 0;
              }
              else {
                int v32 = 1;
              }
              __asm { FCMP            H1, #0 }
              if (!_ZF) {
                int v32 = 1;
              }
              v14 += v32;
            }
            v20 += a6;
            ++v19;
            v21 += 20;
          }
          while (v19 != 4);
          a1 += 80;
          ++v18;
        }
        while (v18 != a4);
        v16 += 4 * a4;
      }
      ++v13;
    }
    while (v13 != (a5 + 3) >> 2);
  }
  else
  {
    int v16 = 0;
    int v15 = 0;
    int v14 = 0;
  }
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    int v34 = AVE_Log_CheckConsole(0x14u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v34)
    {
      printf("%lld %d AVE %s: OF: %s: total_mbs = %d, total_valid = %d, total_nonzero = %d\n\n", CurrTime, 20, LevelStr, "AVE_LRME_FillFSResultsBestMV", v16, v15, v14);
      __uint64_t CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: OF: %s: total_mbs = %d, total_valid = %d, total_nonzero = %d\n", CurrTime);
  }
}

void *H264VideoEncoderFrameReceiver::MultiPass_EnqueueStats(uint64_t a1, const void *a2)
{
  int v3 = (void *)(a1 + 8);
  uint64_t result = (void *)AVE_MultiPass::new_stats((AVE_MultiPass *)(a1 + 8));
  if (result)
  {
    uint64_t v5 = (uint64_t)result;
    memcpy(result, a2, 0x626uLL);
    return (void *)AVE_MultiPass::enqueue_first_pass(v3, v5, 0);
  }
  return result;
}

uint64_t AVE_MultiPass::new_stats(AVE_MultiPass *this)
{
  int v1 = *((_DWORD *)this + 6330);
  if (v1)
  {
    unsigned int v2 = v1 - 1;
    *((_DWORD *)this + 6330) = v2;
    return *((void *)this + v2 + 3149);
  }
  else
  {
    if (AVE_Log_CheckLevel(0xD8u, 4))
    {
      int v4 = AVE_Log_CheckConsole(0xD8u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v4)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to get free spot \n", CurrTime, 216, LevelStr, "new_stats", 56, "free_pool_available > 0");
        __uint64_t v7 = AVE_GetCurrTime();
        int v8 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get free spot ", v7, 216, v8, "new_stats", 56, "free_pool_available > 0");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get free spot ", CurrTime, 216, LevelStr, "new_stats", 56, "free_pool_available > 0");
      }
    }
    return 0;
  }
}

uint64_t H264VideoEncoderFrameReceiver::DropFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 51112;
  if ((*(void *)(a1 + 51344) || *(void *)(a1 + 51352)) && *(_DWORD *)(a1 + 239348) != 2)
  {
    uint64_t v9 = a1 + 16 * *(unsigned __int8 *)(a2 + 160) + 241168;
    *(void *)(v9 + 8) = *(void *)(a2 + 2344);
    int v10 = *(_DWORD *)(a2 + 23736);
    int v11 = (_DWORD *)(a1 + 67932);
    *(_DWORD *)uint64_t v9 = 0;
    *(_DWORD *)(v9 + 4) = v10;
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      int v12 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(7);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %d %d %d %p %d %d %d\n", CurrTime, 46, LevelStr, "DropFrame", 3335, *v11, *(_DWORD *)(a2 + 168), *(_DWORD *)(a2 + 160), *(const void **)v4, *(_DWORD *)(v4 + 8), *(_DWORD *)(v4 + 112), *(unsigned __int8 *)(v4 + 116));
        __uint64_t v15 = AVE_GetCurrTime();
        __uint64_t v40 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: %s:%d %d %d %d %p %d %d %d", v15, 46, v40, "DropFrame");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %d %d %d %p %d %d %d", CurrTime, 46, LevelStr, "DropFrame");
      }
    }
    *(_DWORD *)(v4 + 112) = -1;
    *(unsigned char *)(v4 + 116) = 0;
    if (*v11 >= 2u && !*(_DWORD *)(a2 + 168)) {
      *(unsigned char *)(v4 + 117) = 1;
    }
    if (*(unsigned char *)(a1 + 68345)) {
      uint64_t v17 = *(void *)(v4 + 240);
    }
    else {
      uint64_t v17 = *(void *)(v4 + 232);
    }
    if (v17 == 1)
    {
      kdebug_trace();
      if (*(void *)(v4 + 168) && *(void *)(v4 + 160))
      {
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          int v21 = AVE_Log_CheckConsole(0x2Eu);
          __uint64_t v22 = AVE_GetCurrTime();
          uint64_t v23 = AVE_Log_GetLevelStr(7);
          if (v21)
          {
            printf("%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame on %d bytes\n", v22, 46, v23, 0);
            __uint64_t v24 = AVE_GetCurrTime();
            uint64_t v41 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame on %d bytes", v24, 46, v41, 0);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame on %d bytes", v22, 46, v23, 0);
          }
        }
        (*(void (**)(void, void, void, void, void))(v4 + 168))(*(void *)(v4 + 160), 0, 0, 0, *(unsigned int *)(a1 + 68256));
      }
      else if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        int v25 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v26 = AVE_GetCurrTime();
        char v27 = AVE_Log_GetLevelStr(7);
        if (v25)
        {
          printf("%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it\n", v26, 46, v27);
          __uint64_t v28 = AVE_GetCurrTime();
          uint64_t v42 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v28, 46, v42);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v26, 46, v27);
        }
      }
      uint64_t v16 = 0;
    }
    else
    {
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        int v18 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v19 = AVE_GetCurrTime();
        unsigned int v20 = AVE_Log_GetLevelStr(7);
        if (v18)
        {
          printf("%lld %d AVE %s: H264FrameRec: DROP F %d infoFlagsOut %d\n", v19, 46, v20, *(_DWORD *)(a2 + 160), 3);
          __uint64_t v19 = AVE_GetCurrTime();
          unsigned int v20 = AVE_Log_GetLevelStr(7);
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d infoFlagsOut %d", v19, 46, v20, *(_DWORD *)(a2 + 160), 3);
      }
      kdebug_trace();
      if (*(unsigned char *)(a1 + 68345)) {
        uint64_t v29 = VTEncoderSessionEmitEncodedTile();
      }
      else {
        uint64_t v29 = VTEncoderSessionEmitEncodedFrame();
      }
      uint64_t v16 = v29;
    }
    kdebug_trace();
    *(void *)(a2 + 27680) = AVE_GetCurrTime();
    uint64_t v30 = *(unsigned int *)(a2 + 916);
    if ((v30 & 0x80000000) == 0)
    {
      if (v30 >= 0x1F)
      {
        uint64_t v16 = 3758097084;
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v32 = AVE_Log_CheckConsole(3u);
          __uint64_t v33 = AVE_GetCurrTime();
          int v34 = AVE_Log_GetLevelStr(4);
          if (v32)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: DropFrame Frame->PlaneNumber = %d\n", v33, 3, v34, "DropFrame", 3501, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(_DWORD *)(a2 + 916));
            __uint64_t v33 = AVE_GetCurrTime();
            int v34 = AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: DropFrame Frame->PlaneNumber = %d", v33, 3, v34, "DropFrame", 3501, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(unsigned int *)(a2 + 916));
        }
      }
      else
      {
        uint64_t v31 = *(void **)(a1 + 8 * v30 + 27072);
        if (v31)
        {
          bzero(v31, 0x2CAB8uLL);
        }
        else if (AVE_Log_CheckLevel(3u, 4))
        {
          int v35 = AVE_Log_CheckConsole(3u);
          __uint64_t v36 = AVE_GetCurrTime();
          __uint64_t v37 = AVE_Log_GetLevelStr(4);
          if (v35)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader == NULL\n", v36, 3, v37, "DropFrame", 3503, "codedHeader != __null");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader == NULL");
        }
      }
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      int v5 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v6 = AVE_GetCurrTime();
      __uint64_t v7 = AVE_Log_GetLevelStr(7);
      if (v5)
      {
        printf("%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it\n", v6, 46, v7);
        __uint64_t v8 = AVE_GetCurrTime();
        __uint64_t v39 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v8, 46, v39);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v6, 46, v7);
      }
    }
    return 0;
  }
  return v16;
}

__CFDictionary *H264VideoEncoderFrameReceiver::CreateTemporalLevelInfoDictionary(uint64_t a1, int *a2, int a3)
{
  CFMutableDataRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      int v12 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | TemporalLevelInfoDict == NULL\n", CurrTime, 46, LevelStr, "AVE_FrameRecv", "CreateTemporalLevelInfoDictionary", 3747, "TemporalLevelInfoDict != __null");
        __uint64_t CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | TemporalLevelInfoDict == NULL", CurrTime);
    }
    return 0;
  }
  __uint64_t v7 = Mutable;
  AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E4F1EF88], a3, Mutable);
  AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E4F1EF80], *a2, v7);
  AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E4F1EF90], a2[1] != 0, v7);
  AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E4F1EF78], a2[2], v7);
  CFDataRef v8 = CFDataCreate(0, (const UInt8 *)(a1 + 239320), 4);
  if (!v8)
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      int v15 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v16 = AVE_GetCurrTime();
      uint64_t v17 = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | cf_profileCompatibilityFlags == NULL\n", v16, 46, v17, "AVE_FrameRecv", "CreateTemporalLevelInfoDictionary", 3756, "cf_profileCompatibilityFlags != __null");
        __uint64_t v16 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | cf_profileCompatibilityFlags == NULL", v16);
    }
    int v21 = v7;
    goto LABEL_21;
  }
  CFDataRef v9 = v8;
  CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E4F1EF70], v8);
  CFDataRef v10 = CFDataCreate(0, (const UInt8 *)(a1 + 239324), 6);
  if (!v10)
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      int v18 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v19 = AVE_GetCurrTime();
      unsigned int v20 = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | cf_constraintIndicatorFlags == NULL\n", v19, 46, v20, "AVE_FrameRecv", "CreateTemporalLevelInfoDictionary", 3763, "cf_constraintIndicatorFlags != __null");
        __uint64_t v19 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | cf_constraintIndicatorFlags == NULL", v19);
    }
    CFRelease(v7);
    int v21 = v9;
LABEL_21:
    CFRelease(v21);
    return 0;
  }
  CFDataRef v11 = v10;
  CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E4F1EF60], v10);
  AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E4F1EF68], a2[15], v7);
  CFRelease(v9);
  CFRelease(v11);
  return v7;
}

uint64_t H264VideoEncoderFrameReceiver::SendFrameMCTF(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(_DWORD *)(a2 + 916) >= 0x1Fu)
    {
      uint64_t v7 = 3758097084;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v11 = AVE_Log_CheckConsole(3u);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v11)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrameMCTF pFrame->PlaneNumber = %d\n", CurrTime, 3, LevelStr, "SendFrameMCTF", 3802, "(uint32_t)(pFrame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(_DWORD *)(a2 + 916));
          __uint64_t CurrTime = AVE_GetCurrTime();
          Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrameMCTF pFrame->PlaneNumber = %d", CurrTime, 3, LevelStr, "SendFrameMCTF", 3802, "(uint32_t)(pFrame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(unsigned int *)(a2 + 916));
      }
    }
    else
    {
      uint64_t v3 = a1 + 51272;
      if (AVE_Log_CheckLevel(0x2Eu, 6))
      {
        int v4 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v5 = AVE_GetCurrTime();
        __uint64_t v6 = AVE_Log_GetLevelStr(6);
        if (v4)
        {
          printf("%lld %d AVE %s: Send MCTF PlaneNumber:%d framenumber:%d %p %p\n", v5, 46, v6, *(_DWORD *)(a2 + 916), *(_DWORD *)(a2 + 160), *(const void **)v3, *(const void **)(a2 + 320));
          __uint64_t v5 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(6);
        }
        syslog(3, "%lld %d AVE %s: Send MCTF PlaneNumber:%d framenumber:%d %p %p", v5);
      }
      int v14 = *(void (**)(void))(v3 + 16);
      if (v14 && *(void *)v3 && *(void *)(a2 + 320)) {
        v14();
      }
      return 0;
    }
  }
  else
  {
    uint64_t v7 = 3758097084;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v8 = AVE_Log_CheckConsole(3u);
      __uint64_t v9 = AVE_GetCurrTime();
      CFDataRef v10 = AVE_Log_GetLevelStr(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrameMCTF pFrame == NULL\n", v9, 3, v10, "SendFrameMCTF", 3800, "pFrame != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrameMCTF pFrame == NULL");
    }
  }
  return v7;
}

uint64_t H264VideoEncoderFrameReceiver::SendFrame(uint64_t a1, uint64_t a2, void *a3, unsigned int a4)
{
  uint64_t v468 = *MEMORY[0x1E4F143B8];
  CMBlockBufferRef dataBuffer = 0;
  dataCFIndex Length = 0;
  if (!a2)
  {
    uint64_t v12 = 3758097084;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v13 = AVE_Log_CheckConsole(3u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrame Frame == NULL\n", CurrTime, 3, LevelStr, "SendFrame", 3836, "Frame != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrame Frame == NULL");
    }
    return v12;
  }
  uint64_t v4 = a2;
  unsigned int v5 = *(_DWORD *)(a2 + 916);
  if (v5 >= 0x1F)
  {
    uint64_t v12 = 3758097084;
    if (!AVE_Log_CheckLevel(3u, 4)) {
      return v12;
    }
    int v16 = AVE_Log_CheckConsole(3u);
    __uint64_t v17 = AVE_GetCurrTime();
    int v18 = AVE_Log_GetLevelStr(4);
    if (v16)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrame Frame->PlaneNumber = %d\n", v17, 3, v18, "SendFrame", 3837, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(_DWORD *)(v4 + 916));
      __uint64_t v17 = AVE_GetCurrTime();
      __uint64_t v19 = AVE_Log_GetLevelStr(4);
      uint64_t v438 = (uint64_t)"(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))";
      int v439 = (const char *)*(unsigned int *)(v4 + 916);
      sampleBufferOut = "SendFrame";
      uint64_t v437 = 3837;
      sampleSizeuint64_t Array = (size_t *)v19;
      unsigned int v20 = "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrame Frame->PlaneNumber = %d";
LABEL_20:
      CMItemCount numSampleSizeEntries = 3;
LABEL_34:
      syslog(3, v20, v17, numSampleSizeEntries, sampleSizeArray, sampleBufferOut, v437, v438, v439, v440, v441);
      return v12;
    }
    int v439 = (const char *)*(unsigned int *)(v4 + 916);
    uint64_t v437 = 3837;
    uint64_t v438 = (uint64_t)"(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))";
    sampleSizeuint64_t Array = (size_t *)v18;
    sampleBufferOut = "SendFrame";
    uint64_t v34 = 3;
    unsigned int v20 = "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrame Frame->PlaneNumber = %d";
LABEL_33:
    CMItemCount numSampleSizeEntries = v34;
    goto LABEL_34;
  }
  uint64_t v6 = a1;
  if (!*(unsigned char *)a1)
  {
    uint64_t v12 = 3758097084;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v21 = AVE_Log_CheckConsole(3u);
      __uint64_t v22 = AVE_GetCurrTime();
      uint64_t v23 = AVE_Log_GetLevelStr(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec Error, CFRunloop Closing\n", v22, 3, v23, "SendFrame", 3838, "m_moreWorkToDo");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec Error, CFRunloop Closing");
    }
    return v12;
  }
  uint64_t v7 = (unsigned int *)(a1 + 51080);
  if (!*(void *)(a1 + 51344) && !*(void *)(a1 + 51352))
  {
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      int v38 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v39 = AVE_GetCurrTime();
      __uint64_t v40 = AVE_Log_GetLevelStr(7);
      if (v38)
      {
        printf("%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it\n", v39, 46, v40);
        __uint64_t v41 = AVE_GetCurrTime();
        sampleSizeArrayb = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v41, 46, sampleSizeArrayb);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v39, 46, v40);
      }
    }
    H264VideoEncoderFrameReceiver::DoneWithThisFrameFromTheHW(v6, v4, 0);
    return 0;
  }
  BOOL v8 = (a4 & 0x80000000) != 0 || *(unsigned char *)(a1 + 67552) == 0;
  int v9 = !v8;
  if (v8)
  {
    unint64_t v11 = 0;
    uint64_t v24 = a1 + 384 * v5 + 28032;
    uint64_t v25 = 32;
    __uint64_t v26 = (unsigned int *)v24;
    do
    {
      unsigned int v28 = *v26;
      v26 += 3;
      uint64_t v27 = v28;
      if (!v28) {
        break;
      }
      v11 += v27 + *(unsigned int *)(v24 + 11520);
      uint64_t v24 = (uint64_t)v26;
      --v25;
    }
    while (v25);
  }
  else
  {
    uint64_t v10 = a1 + 384 * v5 + 12 * a4;
    unint64_t v11 = *(unsigned int *)(v10 + 28032) + (unint64_t)*(unsigned int *)(v10 + 39552);
  }
  if (!v11)
  {
    uint64_t v12 = 3758097084;
    if (!AVE_Log_CheckLevel(3u, 4)) {
      return v12;
    }
    int v35 = AVE_Log_CheckConsole(3u);
    __uint64_t v17 = AVE_GetCurrTime();
    __uint64_t v36 = AVE_Log_GetLevelStr(4);
    if (v35)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: frame %d; FinalOutput_FRAME_Size %ld\n",
        v17,
        3,
        v36,
        "SendFrame",
        3877,
        "FinalOutput_FRAME_Size != 0",
        *(_DWORD *)(v4 + 160),
        0);
      __uint64_t v17 = AVE_GetCurrTime();
      __uint64_t v37 = AVE_Log_GetLevelStr(4);
      int v439 = (const char *)*(unsigned int *)(v4 + 160);
      uint64_t v440 = 0;
      uint64_t v437 = 3877;
      uint64_t v438 = (uint64_t)"FinalOutput_FRAME_Size != 0";
      sampleSizeuint64_t Array = (size_t *)v37;
      sampleBufferOut = "SendFrame";
      unsigned int v20 = "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: frame %d; FinalOutput_FRAME_Size %ld";
      goto LABEL_20;
    }
    int v439 = (const char *)*(unsigned int *)(v4 + 160);
    uint64_t v440 = 0;
    uint64_t v437 = 3877;
    uint64_t v438 = (uint64_t)"FinalOutput_FRAME_Size != 0";
    sampleSizeuint64_t Array = (size_t *)v36;
    sampleBufferOut = "SendFrame";
    uint64_t v34 = 3;
    unsigned int v20 = "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: frame %d; FinalOutput_FRAME_Size %ld";
    goto LABEL_33;
  }
  int v457 = v9;
  uint64_t v455 = a1 + 67552;
  int v29 = *(_DWORD *)(a1 + 67556) - 1;
  if (AVE_Log_CheckLevel(0x2Eu, 7))
  {
    int v30 = AVE_Log_CheckConsole(0x2Eu);
    __uint64_t v31 = AVE_GetCurrTime();
    int v32 = AVE_Log_GetLevelStr(7);
    if (v30)
    {
      printf("%lld %d AVE %s: H264FrameRec: start FinalOutput_FRAME_Size %ld\n", v31, 46, v32, v11);
      __uint64_t v33 = AVE_GetCurrTime();
      sampleSizeArraya = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: H264FrameRec: start FinalOutput_FRAME_Size %ld", v33, 46, sampleSizeArraya, v11);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264FrameRec: start FinalOutput_FRAME_Size %ld", v31, 46, v32, v11);
    }
  }
  uint64_t v43 = v4 + 21664;
  uint64_t v44 = v6 + 239336;
  uint64_t v45 = v6 + 68136;
  BOOL v8 = v29 == a4;
  uint64_t v46 = a4;
  char v47 = v457;
  if (v8) {
    char v48 = 0;
  }
  else {
    char v48 = v457;
  }
  char v448 = v48;
  if ((v48 & 1) == 0)
  {
    uint64_t v49 = *v7;
    v11 += v49;
    if (v49)
    {
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        int v50 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v51 = AVE_GetCurrTime();
        int v52 = AVE_Log_GetLevelStr(7);
        if (v50)
        {
          printf("%lld %d AVE %s: H264FrameRec: CABACzeroWord = %d - FinalOutput_FRAME_Size %ld\n", v51, 46, v52, *v7, v11);
          __uint64_t v51 = AVE_GetCurrTime();
          int v52 = AVE_Log_GetLevelStr(7);
          uint64_t v46 = a4;
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec: CABACzeroWord = %d - FinalOutput_FRAME_Size %ld", v51, 46, v52, *v7, v11);
      }
      char v47 = v457;
    }
  }
  if (v46) {
    char v53 = v47;
  }
  else {
    char v53 = 0;
  }
  if (v53)
  {
    int v54 = 0;
    goto LABEL_61;
  }
  unsigned int v64 = *(const void **)(v4 + 336);
  if (v64)
  {
    CFDataRef Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v64, kCFPropertyListXMLFormat_v1_0, 0, 0);
    if (Data)
    {
      CFDataRef v66 = Data;
      CFIndex Length = CFDataGetLength(Data);
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        int v452 = (H264VideoEncoderFrameReceiver *)v6;
        int v68 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v69 = AVE_GetCurrTime();
        int v70 = AVE_Log_GetLevelStr(7);
        if (v68)
        {
          printf("%lld %d AVE %s: H264FrameRec: CFDebugMetadataSEI is ON (%#llx) size %d\n", v69, 46, v70, *(void *)(v4 + 336), Length);
          __uint64_t v69 = AVE_GetCurrTime();
          int v70 = AVE_Log_GetLevelStr(7);
          uint64_t v46 = a4;
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec: CFDebugMetadataSEI is ON (%#llx) size %d", v69, 46, v70, *(void *)(v4 + 336), Length);
        uint64_t v43 = v4 + 21664;
        uint64_t v6 = (uint64_t)v452;
      }
      if (Length >= 0) {
        uint64_t v108 = Length;
      }
      else {
        uint64_t v108 = Length + 1;
      }
      uint64_t v75 = Length + (v108 >> 1) + 512;
      goto LABEL_116;
    }
    uint64_t v12 = 3758097084;
    if (!AVE_Log_CheckLevel(0x2Eu, 4)) {
      return v12;
    }
    int v76 = AVE_Log_CheckConsole(0x2Eu);
    __uint64_t v17 = AVE_GetCurrTime();
    unsigned int v77 = AVE_Log_GetLevelStr(4);
    if (v76)
    {
      printf("%lld %d AVE %s: %s::%s:%d %s | H264FrameRec ERROR: meta date creation failed. frame %d; SEI 0x%llx\n",
        v17,
        46,
        v77,
        "AVE_FrameRecv",
        "SendFrame",
        3902,
        "serialMetadata != __null",
        *(_DWORD *)(v4 + 160),
        *(void *)(v4 + 336));
      __uint64_t v17 = AVE_GetCurrTime();
      unsigned int v78 = AVE_Log_GetLevelStr(4);
      uint64_t v440 = *(unsigned int *)(v4 + 160);
      uint64_t v441 = *(void *)(v4 + 336);
      uint64_t v438 = 3902;
      int v439 = "serialMetadata != __null";
      sampleBufferOut = "AVE_FrameRecv";
      uint64_t v437 = (uint64_t)"SendFrame";
      CMItemCount numSampleSizeEntries = 46;
      sampleSizeuint64_t Array = (size_t *)v78;
      unsigned int v20 = "%lld %d AVE %s: %s::%s:%d %s | H264FrameRec ERROR: meta date creation failed. frame %d; SEI 0x%llx";
      goto LABEL_34;
    }
    uint64_t v440 = *(unsigned int *)(v4 + 160);
    uint64_t v441 = *(void *)(v4 + 336);
    uint64_t v438 = 3902;
    int v439 = "serialMetadata != __null";
    sampleBufferOut = "AVE_FrameRecv";
    uint64_t v437 = (uint64_t)"SendFrame";
    sampleSizeuint64_t Array = (size_t *)v77;
    uint64_t v34 = 46;
    unsigned int v20 = "%lld %d AVE %s: %s::%s:%d %s | H264FrameRec ERROR: meta date creation failed. frame %d; SEI 0x%llx";
    goto LABEL_33;
  }
  CFDataRef v66 = 0;
  uint64_t v75 = 0;
LABEL_116:
  int v109 = *(unsigned __int8 *)(v45 + 45);
  if (*(unsigned char *)(v45 + 45))
  {
    if (*(double *)(v4 + 2384) == 0.0) {
      int v109 = 0;
    }
    else {
      int v109 = *(_DWORD *)(v43 + 1804) == 3 || *(_DWORD *)(v43 + 2104) == 21;
    }
  }
  int v110 = *(unsigned __int8 *)(v45 + 46);
  if (*(unsigned char *)(v45 + 46)) {
    int v110 = *(_DWORD *)(v4 + 160) == 0;
  }
  int v111 = *(unsigned __int8 *)(v45 + 47);
  if (*(unsigned char *)(v45 + 47)) {
    int v111 = *(_DWORD *)(v4 + 160) == 0;
  }
  int v112 = *(unsigned __int8 *)(v45 + 48);
  if (*(unsigned char *)(v45 + 48)) {
    int v112 = *(_DWORD *)(v4 + 160) == 0;
  }
  if (*(unsigned char *)(v45 + 49)) {
    BOOL v113 = *(double *)(v4 + 2368) != 0.0;
  }
  else {
    BOOL v113 = 0;
  }
  if (*(unsigned char *)(v45 + 50)) {
    BOOL v114 = *(unsigned char *)(v45 + 55) != 0;
  }
  else {
    BOOL v114 = 0;
  }
  if (*(unsigned char *)(v45 + 51)) {
    BOOL v115 = *(unsigned char *)(v45 + 56) != 0;
  }
  else {
    BOOL v115 = 0;
  }
  int v116 = *(_DWORD *)(v4 + 2436);
  if (*(unsigned __int8 *)(v45 + 293) | *(unsigned __int8 *)(v45 + 292)) {
    int v117 = 1;
  }
  else {
    int v117 = v110;
  }
  if (*(unsigned char *)(v45 + 53) || v116 > 0 || v115 || ((v114 | v113 | v112 | v111 | v109 | v117) & 1) != 0)
  {
    BOOL v119 = v109 == 0;
    if (v109) {
      unsigned int v120 = 9;
    }
    else {
      unsigned int v120 = 0;
    }
    if (v119) {
      int v121 = 23;
    }
    else {
      int v121 = 32;
    }
    if (v113) {
      v120 += 9;
    }
    int v122 = v121 + 9;
    if (!v113) {
      int v122 = v121;
    }
    if (v110) {
      v120 += 5;
    }
    int v123 = v122 + 5;
    if (!v110) {
      int v123 = v122;
    }
    BOOL v124 = v111 == 0;
    if (v111) {
      v120 += 5;
    }
    int v125 = v123 + 5;
    if (v124) {
      int v125 = v123;
    }
    if (v112)
    {
      v120 += 5;
      v125 += 5;
    }
    if (v114)
    {
      v120 += 25;
      v125 += 25;
    }
    if (v115)
    {
      v120 += 5;
      v125 += 5;
    }
    if (*(unsigned char *)(v45 + 292))
    {
      v120 += 56;
      v125 += 56;
    }
    if (*(unsigned char *)(v45 + 293))
    {
      v120 += 10;
      v125 += 10;
    }
    if (*(unsigned char *)(v45 + 85))
    {
      v120 += 17;
      v125 += 17;
    }
    if (v116 > 0)
    {
      v120 += 9;
      v125 += 9;
    }
    if (*(unsigned char *)(v45 + 53)) {
      v120 += 6;
    }
    int v126 = v125 + 6;
    if (!*(unsigned char *)(v45 + 53)) {
      int v126 = v125;
    }
    unsigned int v118 = v120 + v126 + (v120 >> 1) + 1;
  }
  else
  {
    unsigned int v118 = 0;
  }
  size_t v127 = v75 + v118;
  int v128 = (char *)malloc_type_malloc(v127, 0x557F7C4EuLL);
  if (!v128)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v135 = AVE_Log_CheckConsole(3u);
      __uint64_t v136 = AVE_GetCurrTime();
      uint64_t v137 = AVE_Log_GetLevelStr(4);
      if (v135)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SEIBuffer malloc failed. frame %d; SEI_FRAME_Size %ld\n",
          v136,
          3,
          v137,
          "SendFrame",
          3963,
          "SEIBuffer != __null",
          *(_DWORD *)(v4 + 160),
          v127);
        __uint64_t v136 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SEIBuffer malloc failed. frame %d; SEI_FRAME_Size %ld",
        v136,
        3);
    }
    return 0;
  }
  __uint64_t v129 = v128;
  int v130 = H264VideoEncoderFrameReceiver::AddAllSEIs(v6, v4, v128, v127, v457, v46, v66);
  if (v130)
  {
    int v131 = v130;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v132 = AVE_Log_CheckConsole(3u);
      __uint64_t v133 = AVE_GetCurrTime();
      __uint64_t v134 = AVE_Log_GetLevelStr(4);
      if (v132)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: AddAllSEIs failed. frame %d err = %d\n", v133, 3, v134, "SendFrame", 3966, "err == 0", *(_DWORD *)(v4 + 160), v131);
        __uint64_t v133 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: AddAllSEIs failed. frame %d err = %d", v133);
    }
    return 0;
  }
  v11 += *(int *)(v44 + 24);
  if (*(unsigned char *)v45)
  {
    int v54 = v129;
    uint64_t v43 = v4 + 21664;
    if (!*(_DWORD *)(v4 + 160))
    {
      v11 += *(void *)(v44 + 5936);
      *(void *)(v44 + 5936) = 0;
    }
  }
  else
  {
    int v54 = v129;
    uint64_t v43 = v4 + 21664;
  }
  if (*(unsigned char *)(v45 + 304)) {
    v11 += *(unsigned int *)(v45 + 820);
  }
LABEL_61:
  uint64_t v55 = *(void *)(v6 + 8 * *(int *)(v4 + 916) + 27072);
  if (!v55)
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      return 0;
    }
    int v71 = AVE_Log_CheckConsole(3u);
    __uint64_t v72 = AVE_GetCurrTime();
    int v73 = AVE_Log_GetLevelStr(4);
    if (!v71)
    {
LABEL_110:
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader == NULL");
      return 0;
    }
    int v74 = 3990;
LABEL_73:
    printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader == NULL\n", v72, 3, v73, "SendFrame", v74, "codedHeader != __null");
    AVE_GetCurrTime();
    AVE_Log_GetLevelStr(4);
    goto LABEL_110;
  }
  v445 = v54;
  __uint64_t v56 = (long long *)(v55 + 182920);
  int v443 = (float *)(v6 + 51128);
  int v57 = (_OWORD *)(v6 + 51128 + 48 * *(unsigned int *)(v4 + 168));
  long long v58 = *v56;
  long long v59 = v56[2];
  v57[1] = v56[1];
  v57[2] = v59;
  _OWORD *v57 = v58;
  v454 = v7;
  if (AVE_Log_CheckLevel(0x2Eu, 7))
  {
    int v60 = AVE_Log_CheckConsole(0x2Eu);
    __uint64_t v61 = AVE_GetCurrTime();
    int v62 = AVE_Log_GetLevelStr(7);
    if (v60)
    {
      printf("%lld %d AVE %s: %s:%d %d %d %d %p %d %d %d\n", v61, 46, v62, "SendFrame", 3995, *(_DWORD *)(v455 + 380), *(_DWORD *)(v4 + 168), *(_DWORD *)(v4 + 160), *((const void **)v7 + 4), v7[10], v7[36], *((unsigned __int8 *)v7 + 148));
      __uint64_t v63 = AVE_GetCurrTime();
      sampleSizeArrayc = (size_t *)AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s:%d %d %d %d %p %d %d %d", v63, 46, sampleSizeArrayc, "SendFrame");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %d %d %d %p %d %d %d", v61, 46, v62, "SendFrame");
    }
    uint64_t v46 = a4;
  }
  uint64_t v446 = v4;
  uint64_t v450 = v44;
  uint64_t v444 = v45;
  if (*(_DWORD *)(v455 + 380) <= 1u || *(_DWORD *)(v4 + 168))
  {
    uint64_t v451 = v43;
    uint64_t v79 = 0;
    char v80 = 1;
    do
    {
      char v81 = v80;
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        int v82 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v83 = AVE_GetCurrTime();
        size_t v84 = AVE_Log_GetLevelStr(7);
        uint64_t v85 = v6;
        uint64_t v86 = v6 + 12 * v79 + 51084;
        int v89 = *(_DWORD *)(v86 + 8);
        int v88 = (_DWORD *)(v86 + 8);
        int v87 = v89;
        if (v82)
        {
          printf("%lld %d AVE %s: H264FrameRec: Filler[%d] %d %d\n", v83, 46, v84, v79, *((char *)v88 - 1), v87);
          __uint64_t v90 = AVE_GetCurrTime();
          int v91 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: Filler[%d] %d %d", v90, 46, v91, v79, *((char *)v88 - 1), *v88);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: Filler[%d] %d %d", v83, 46, v84, v79, *((char *)v88 - 1), v87);
        }
        uint64_t v6 = v85;
      }
      char v80 = 0;
      v11 += *(int *)(v6 + 12 * v79 + 51092) + (uint64_t)*(char *)(v6 + 12 * v79 + 51091);
      uint64_t v79 = 1;
    }
    while ((v81 & 1) != 0);
    uint64_t v4 = v446;
    uint64_t v7 = v454;
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      int v92 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v93 = AVE_GetCurrTime();
      int v94 = AVE_Log_GetLevelStr(7);
      if (v92)
      {
        printf("%lld %d AVE %s: H264FrameRec: FinalOutput_FRAME_Size = %ld\n", v93, 46, v94, v11);
        __uint64_t v95 = AVE_GetCurrTime();
        sampleSizeArrayd = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: FinalOutput_FRAME_Size = %ld", v95, 46, sampleSizeArrayd, v11);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: FinalOutput_FRAME_Size = %ld", v93, 46, v94, v11);
      }
    }
    dataCFIndex Length = v11;
    unsigned int v96 = v454[36];
    size_t v97 = v11;
    if ((v96 & 0x80000000) == 0)
    {
      size_t v97 = v11;
      if (v96 == *(_DWORD *)(v446 + 160) - 1)
      {
        size_t v97 = v11 + (int)v454[10];
        dataCFIndex Length = v97;
      }
    }
    int v98 = H264VideoEncoderFrameReceiver::CreateBuffer((CFAllocatorRef *)v6, v97, &dataBuffer);
    int v99 = v98;
    unsigned int v100 = v454[36];
    uint64_t v43 = v451;
    uint64_t v46 = a4;
    if ((v100 & 0x80000000) == 0
      && v100 == *(_DWORD *)(v446 + 160) - 1
      && (unsigned int v101 = (const void *)*((void *)v454 + 4)) != 0)
    {
      memcpy(v98, v101, (int)v454[10]);
      unsigned int v102 = v454[10];
    }
    else
    {
      unsigned int v102 = 0;
    }
    v454[10] = 0;
    v454[36] = -1;
    if (*(_DWORD *)(v455 + 380) <= 1u) {
      *((unsigned char *)v454 + 148) = 0;
    }
  }
  else
  {
    if (!*((void *)v7 + 4))
    {
      int v103 = malloc_type_malloc(*(unsigned int *)(v6 + 26952), 0x1187280DuLL);
      *((void *)v7 + 4) = v103;
      if (!v103)
      {
        if (AVE_Log_CheckLevel(0x2Eu, 4))
        {
          int v206 = AVE_Log_CheckConsole(0x2Eu);
          __uint64_t v207 = AVE_GetCurrTime();
          int v208 = AVE_Log_GetLevelStr(4);
          if (v206)
          {
            printf("%lld %d AVE %s: %s::%s:%d %s | wrong multi view buffer %p %d\n", v207, 46, v208, "AVE_FrameRecv", "SendFrame", 4038, "m_sMVBuf.pBuf != __null", *((const void **)v7 + 4), *(_DWORD *)(v4 + 160));
            __uint64_t v209 = AVE_GetCurrTime();
            sampleSizeArrayuint64_t k = (size_t *)AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong multi view buffer %p %d", v209, 46, sampleSizeArrayk);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong multi view buffer %p %d", v207, 46, v208);
          }
        }
        return 4294954394;
      }
    }
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      int v104 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v105 = AVE_GetCurrTime();
      int v106 = AVE_Log_GetLevelStr(7);
      if (v104)
      {
        printf("%lld %d AVE %s: H264FrameRec: FinalOutput_FRAME_Size = %ld\n", v105, 46, v106, v11);
        __uint64_t v107 = AVE_GetCurrTime();
        sampleSizeArraye = AVE_Log_GetLevelStr(7);
        uint64_t v46 = a4;
        syslog(3, "%lld %d AVE %s: H264FrameRec: FinalOutput_FRAME_Size = %ld", v107, 46, sampleSizeArraye, v11);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: FinalOutput_FRAME_Size = %ld", v105, 46, v106, v11);
      }
    }
    dataCFIndex Length = v11;
    int v99 = (char *)*((void *)v7 + 4);
    v7[10] = v11;
    v7[36] = *(_DWORD *)(v4 + 160);
    BOOL v138 = *(_DWORD *)(v43 + 1804) == 3 || *(_DWORD *)(v43 + 2104) == 21;
    unsigned int v102 = 0;
    *((unsigned char *)v7 + 148) = v138;
  }
  if (!v99)
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      return 3758097085;
    }
    int v151 = AVE_Log_CheckConsole(3u);
    __uint64_t v152 = AVE_GetCurrTime();
    int v153 = AVE_Log_GetLevelStr(4);
    if (v151)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: FinalOutputFrameBuffer malloc failed. frame %d; FinalOutput_FRAME_Size %ld\n",
        v152,
        3,
        v153,
        "SendFrame",
        4048,
        "FinalOutputFrameBuffer != __null",
        *(_DWORD *)(v4 + 160),
        v11);
      __uint64_t v152 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: FinalOutputFrameBuffer malloc failed. frame %d; FinalOutput_FRAME_Size %ld",
      v152,
      3);
    return 3758097085;
  }
  __uint64_t v139 = (_DWORD *)v43;
  __uint64_t v453 = (H264VideoEncoderFrameReceiver *)v6;
  if (*(_DWORD *)(v455 + 380) >= 2u) {
    *((unsigned char *)v7 + 149) = 0;
  }
  memoryBlocuint64_t k = (unsigned __int8 *)v99;
  int v140 = &v99[v102];
  int v141 = v453;
  H264VideoEncoderFrameReceiver::CopyEncodedFrameIntoExternalBuffer(v453, v4, v140, v445, v11, v457, v46);
  if (!*(void *)v450) {
    goto LABEL_214;
  }
  uint64_t v142 = *((void *)v453 + *(int *)(v4 + 916) + 3384);
  if (!v142)
  {
    if (!AVE_Log_CheckLevel(3u, 4)) {
      return 0;
    }
    int v168 = AVE_Log_CheckConsole(3u);
    __uint64_t v72 = AVE_GetCurrTime();
    int v73 = AVE_Log_GetLevelStr(4);
    if (!v168) {
      goto LABEL_110;
    }
    int v74 = 4066;
    goto LABEL_73;
  }
  *(unsigned char *)(v450 + 8) = 0;
  long long v143 = *(_OWORD *)(v4 + 2296);
  *(void *)(v142 + 140880) = *(void *)(v4 + 2312);
  *(_OWORD *)(v142 + 140864) = v143;
  int v141 = v453;
  if (!*(_DWORD *)(v4 + 12))
  {
    __uint64_t v173 = H264VideoEncoderFrameReceiver::MultiPass_EnqueueStats((uint64_t)v453, (const void *)(v142 + 140860));
    if (v173)
    {
      int v174 = v173;
      memcpy((void *)(v4 + 25350), v173, 0x626uLL);
      *(unsigned char *)(v450 + 8) = 1;
      File = (FILE *)AVE_Dump_FindFile(*(void *)(v45 + 3416), 4u, *(_DWORD *)(v4 + 12));
      int v141 = v453;
      if (File)
      {
        __uint64_t v176 = File;
        fseeko(File, 1574 * v174[11] + 264, 0);
        fwrite(v174, 1uLL, 0x626uLL, v176);
      }
    }
    else
    {
      int v141 = v453;
      if (AVE_Log_CheckLevel(0xD8u, 6))
      {
        int v196 = AVE_Log_CheckConsole(0xD8u);
        __uint64_t v197 = AVE_GetCurrTime();
        __uint64_t v198 = AVE_Log_GetLevelStr(6);
        int v199 = *(_DWORD *)(v4 + 160);
        if (v196)
        {
          printf("%lld %d AVE %s:   F %d pMpStats NULL \n", v197, 216, v198, v199);
          __uint64_t v200 = AVE_GetCurrTime();
          sampleSizeArrayuint64_t i = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s:   F %d pMpStats NULL ", v200, 216, sampleSizeArrayi, *(_DWORD *)(v4 + 160));
        }
        else
        {
          syslog(3, "%lld %d AVE %s:   F %d pMpStats NULL ", v197, 216, v198, v199);
        }
        int v141 = v453;
      }
    }
  }
LABEL_214:
  int v144 = (_DWORD *)((char *)v141 + 51376);
  if ((v448 & 1) == 0)
  {
    if (v457) {
      int v145 = a4;
    }
    else {
      int v145 = 0;
    }
    H264VideoEncoderFrameReceiver::DoneWithThisFrameFromTheHW((uint64_t)v453, v4, v145);
  }
  uint64_t v146 = v450;
  if (v445) {
    free(v445);
  }
  AVE_Dump_WriteMBStats(*(void **)(v45 + 3416), *(_DWORD *)(v4 + 16), *((const void **)v453 + *(int *)(v4 + 916) + 3224), 432 * ((*v144 + 15) >> 4) * ((v144[1] + 15) >> 4));
  __uint64_t v147 = *(__CVBuffer **)(v4 + 21640);
  if (v147) {
    AVE_Dump_WriteRecon(*(void *)(v45 + 3416), v147);
  }
  v449 = v144;
  if (*(_DWORD *)(v455 + 380) >= 2u && *(_DWORD *)(v4 + 168))
  {
    uint64_t v148 = (uint64_t)v453 + 16 * *(unsigned __int8 *)(v4 + 160) + 241168;
    int v149 = *((_DWORD *)v453 + 4 * *(unsigned __int8 *)(v4 + 160) + 60293);
    *(_DWORD *)v148 += 8 * v11;
    *(void *)(v148 + 8) = *(void *)(v4 + 2344);
    uint64_t v150 = v139;
    *(_DWORD *)(v148 + 4) = v149 + v139[518];
  }
  else
  {
    uint64_t v154 = (uint64_t)v453 + 16 * *(unsigned __int8 *)(v4 + 160) + 241168;
    *(_DWORD *)uint64_t v154 = 8 * v11;
    *(void *)(v154 + 8) = *(void *)(v4 + 2344);
    uint64_t v150 = v139;
    *(_DWORD *)(v154 + 4) = v139[518];
  }
  __uint64_t v155 = (uint64_t *)(v7 + 66);
  AVE_Dump_WriteOutput(*(void **)(v45 + 3416), *(_DWORD *)(v4 + 16), v140, v11);
  *(void *)(v4 + 27688) = AVE_GetCurrTime();
  if (*(unsigned char *)(v45 + 209)) {
    uint64_t v156 = *((void *)v7 + 34);
  }
  else {
    uint64_t v156 = *v155;
  }
  if (v156 == 1)
  {
    if (*((void *)v7 + 25) && *((void *)v7 + 24))
    {
      memset(&sampleTimingArray, 0, 32);
      int v157 = v453;
      int v158 = memoryBlock;
      if (*(_DWORD *)(v455 + 380) >= 2u && !*(_DWORD *)(v4 + 168)) {
        return 0;
      }
      if (v457)
      {
        uint64_t v159 = 0;
        CMTimeEpoch v160 = -1;
        CMTimeValue v161 = -1;
        uint64_t v162 = a4;
      }
      else
      {
        CMTimeEpoch v160 = *(void *)(v4 + 2296);
        CMTimeValue v161 = *(int *)(v4 + 2304);
        uint64_t v162 = -1;
        uint64_t v159 = *(void *)(v4 + 21640);
      }
      sampleTimingArray.duration.value = *(unsigned int *)(v4 + 160);
      *(void *)&sampleTimingArray.duration.timescale = v162;
      sampleTimingArray.duration.CMTimeEpoch epoch = v160;
      sampleTimingArray.presentationTimeStamp.value = v161;
      *(void *)&sampleTimingArray.presentationTimeStamp.timescale = v159;
      if (*(void *)v450
        && *(unsigned char *)(v450 + 8)
        && !*(_DWORD *)(v4 + 12)
        && (CFMutableDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0)) != 0)
      {
        int v241 = Mutable;
        CFDataAppendBytes(Mutable, (const UInt8 *)(v4 + 25350), 1574);
        __uint64_t v242 = *(opaqueCMSampleBuffer **)(v4 + 25370);
        sbuf[1] = *(CMSampleBufferRef *)(v4 + 25354);
        sbuf[2] = *(CMSampleBufferRef *)(v4 + 25362);
        sbuf[3] = v242;
        uint64_t v12 = VTMultiPassStorageSetDataAtTimeStamp();
        CFRelease(v241);
        if (v12)
        {
          uint64_t v243 = v45;
          if (AVE_Log_CheckLevel(0x2Eu, 4))
          {
            int v244 = AVE_Log_CheckConsole(0x2Eu);
            __uint64_t v245 = AVE_GetCurrTime();
            __uint64_t v246 = AVE_Log_GetLevelStr(4);
            if (v244)
            {
              printf("%lld %d AVE %s: H264FrameRec ERROR: VTMultiPassStorageSetDataAtTimeStamp failed. need to set up a recovery here...\n", v245, 46, v246);
              __uint64_t v247 = AVE_GetCurrTime();
              sampleSizeArrayl = AVE_Log_GetLevelStr(4);
              syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: VTMultiPassStorageSetDataAtTimeStamp failed. need to set up a recovery here...", v247, 46, sampleSizeArrayl);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: VTMultiPassStorageSetDataAtTimeStamp failed. need to set up a recovery here...", v245, 46, v246);
            }
          }
          uint64_t v45 = v243;
          int v158 = memoryBlock;
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        uint64_t v201 = v45;
        int v202 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v203 = AVE_GetCurrTime();
        int v204 = AVE_Log_GetLevelStr(7);
        int v158 = memoryBlock;
        if (v202)
        {
          printf("%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame %p on %ld bytes\n", v203, 46, v204, memoryBlock, v11);
          __uint64_t v205 = AVE_GetCurrTime();
          sampleSizeArrayuint64_t j = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame %p on %ld bytes", v205, 46, sampleSizeArrayj, memoryBlock, v11);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame %p on %ld bytes", v203, 46, v204, memoryBlock, v11);
        }
        uint64_t v45 = v201;
      }
      kdebug_trace();
      (*((void (**)(void, unsigned __int8 *, size_t, CMSampleTimingInfo *, void))v454 + 25))(*((void *)v454 + 24), v158, dataLength, &sampleTimingArray, *(unsigned int *)(v45 + 120));
      kdebug_trace();
    }
    else
    {
      int v157 = v453;
      int v158 = memoryBlock;
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        int v169 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v170 = AVE_GetCurrTime();
        int v171 = AVE_Log_GetLevelStr(7);
        if (v169)
        {
          printf("%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it\n", v170, 46, v171);
          __uint64_t v172 = AVE_GetCurrTime();
          sampleSizeArrayg = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v172, 46, sampleSizeArrayg);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v170, 46, v171);
        }
      }
      uint64_t v12 = 0;
    }
    H264VideoEncoderFrameReceiver::DeleteBuffer(v157, v158);
    goto LABEL_537;
  }
  if (v457)
  {
    uint64_t v12 = 0;
LABEL_537:
    if (dataBuffer)
    {
      CFRelease(dataBuffer);
      CMBlockBufferRef dataBuffer = 0;
    }
    *(void *)(v4 + 27680) = AVE_GetCurrTime();
    return v12;
  }
  sbuf[0] = 0;
  if (*(unsigned char *)v45)
  {
LABEL_243:
    if (*(_DWORD *)(v455 + 380) < 2u || *(_DWORD *)(v4 + 168))
    {
      if (*(unsigned char *)(v45 + 209))
      {
        uint64_t v163 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], memoryBlock, dataLength, *((CFAllocatorRef *)v454 + 28), 0, 0, dataLength, 1u, &dataBuffer);
        if (v163)
        {
          uint64_t v12 = v163;
          if (AVE_Log_CheckLevel(0x2Eu, 4))
          {
            int v164 = AVE_Log_CheckConsole(0x2Eu);
            __uint64_t v165 = AVE_GetCurrTime();
            __uint64_t v166 = AVE_Log_GetLevelStr(4);
            if (v164)
            {
              printf("%lld %d AVE %s: H264FrameRec ERROR: FigBlockBufferCreateWithMemoryBlock failed.\n", v165, 46, v166);
              __uint64_t v167 = AVE_GetCurrTime();
              sampleSizeArrayf = AVE_Log_GetLevelStr(4);
              syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: FigBlockBufferCreateWithMemoryBlock failed.", v167, 46, sampleSizeArrayf);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: FigBlockBufferCreateWithMemoryBlock failed.", v165, 46, v166);
            }
          }
          kdebug_trace();
          if (*(unsigned char *)(v45 + 209)) {
            uint64_t v12 = VTEncoderSessionEmitEncodedTile();
          }
          kdebug_trace();
          if (!v12) {
            goto LABEL_535;
          }
          if (v12 == -12903)
          {
            if (AVE_Log_CheckLevel(0x2Eu, 5))
            {
              int v248 = AVE_Log_CheckConsole(0x2Eu);
              __uint64_t v249 = AVE_GetCurrTime();
              int v250 = AVE_Log_GetLevelStr(5);
              if (v248)
              {
                printf("%lld %d AVE %s: %s:%d m_VTEncoderSession has already been invalidated. Dropping frame %d %d\n", v249, 46, v250, "SendFrame", 5110, *(_DWORD *)(v146 + 20), *(_DWORD *)(v4 + 160));
LABEL_528:
                __uint64_t v380 = AVE_GetCurrTime();
                AVE_Log_GetLevelStr(5);
                syslog(3, "%lld %d AVE %s: %s:%d m_VTEncoderSession has already been invalidated. Dropping frame %d %d", v380);
                goto LABEL_533;
              }
              goto LABEL_532;
            }
            goto LABEL_533;
          }
          if (!AVE_Log_CheckLevel(0x2Eu, 4)) {
            goto LABEL_535;
          }
          int v251 = AVE_Log_CheckConsole(0x2Eu);
          __uint64_t v252 = AVE_GetCurrTime();
          __uint64_t v253 = AVE_Log_GetLevelStr(4);
          if (v251)
          {
            printf("%lld %d AVE %s: %s:%d ERROR: VTEncoderSessionEmitEncodedFrame failed. %d %d %d\n", v252, 46, v253, "SendFrame", 5119, v12, *(_DWORD *)(v146 + 20), *(_DWORD *)(v4 + 160));
LABEL_385:
            __uint64_t v285 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d ERROR: VTEncoderSessionEmitEncodedFrame failed. %d %d %d", v285);
            goto LABEL_535;
          }
          goto LABEL_534;
        }
      }
      sampleTimingArray.duration.value = *(void *)(v4 + 2320);
      CMTimeEpoch v187 = *(void *)(v4 + 2336);
      *(void *)&sampleTimingArray.duration.timescale = *(void *)(v4 + 2328);
      CMTimeValue v188 = *(void *)(v4 + 2296);
      sampleTimingArray.duration.CMTimeEpoch epoch = v187;
      sampleTimingArray.presentationTimeStamp.value = v188;
      CMTimeEpoch v189 = *(void *)(v4 + 2312);
      *(void *)&sampleTimingArray.presentationTimeStamp.timescale = *(void *)(v4 + 2304);
      CMTimeValue v190 = a3[1];
      sampleTimingArray.presentationTimeStamp.CMTimeEpoch epoch = v189;
      sampleTimingArray.decodeTimeStamp.value = v190;
      *(void *)&sampleTimingArray.decodeTimeStamp.timescale = a3[2];
      sampleTimingArray.decodeTimeStamp.CMTimeEpoch epoch = a3[3];
      time1.CMTimeEpoch epoch = v189;
      *(_OWORD *)&time1.value = *(_OWORD *)&sampleTimingArray.presentationTimeStamp.value;
      CMTime time2 = sampleTimingArray.decodeTimeStamp;
      unsigned int v191 = (CMFormatDescriptionRef *)v454;
      if (!CMTimeCompare(&time1, &time2) && !*(unsigned char *)(v45 + 1752))
      {
        sampleTimingArray.decodeTimeStamp = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
        if (AVE_Log_CheckLevel(0x2Eu, 8))
        {
          int v192 = AVE_Log_CheckConsole(0x2Eu);
          __uint64_t v193 = AVE_GetCurrTime();
          __uint64_t v194 = AVE_Log_GetLevelStr(8);
          if (v192)
          {
            printf("%lld %d AVE %s: H264FrameRec: final decodeTimeStamp INVALID\n", v193, 46, v194);
            __uint64_t v195 = AVE_GetCurrTime();
            sampleSizeArrayh = AVE_Log_GetLevelStr(8);
            syslog(3, "%lld %d AVE %s: H264FrameRec: final decodeTimeStamp INVALID", v195, 46, sampleSizeArrayh);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: final decodeTimeStamp INVALID", v193, 46, v194);
          }
        }
      }
      *(void *)v459 = v155;
      if (AVE_Log_CheckLevel(0x33u, 7))
      {
        int v258 = AVE_Log_CheckConsole(0x33u);
        __uint64_t v259 = AVE_GetCurrTime();
        int v260 = AVE_Log_GetLevelStr(7);
        uint64_t v261 = *(unsigned int *)(v146 + 20);
        uint64_t v262 = *(unsigned int *)(v4 + 160);
        if (v258)
        {
          printf("%lld %d AVE %s: %s:%d %d %d DTS %lld %d 0x%x %lld | PTS %lld %d 0x%x %lld -> %lld %d | duration %lld %d 0x%x %lld\n", v259, 51, v260, "SendFrame", 4526, v261, v262, sampleTimingArray.decodeTimeStamp.value, sampleTimingArray.decodeTimeStamp.timescale, sampleTimingArray.decodeTimeStamp.flags, sampleTimingArray.decodeTimeStamp.epoch, sampleTimingArray.presentationTimeStamp.value, sampleTimingArray.presentationTimeStamp.timescale, sampleTimingArray.presentationTimeStamp.flags, sampleTimingArray.presentationTimeStamp.epoch, *(void *)(v4 + 2344), *(_DWORD *)(v4 + 2352), sampleTimingArray.duration.value,
            sampleTimingArray.duration.timescale,
            sampleTimingArray.duration.flags,
            sampleTimingArray.duration.epoch);
          __uint64_t v263 = AVE_GetCurrTime();
          double v264 = AVE_Log_GetLevelStr(7);
          unsigned int v191 = (CMFormatDescriptionRef *)v454;
          syslog(3, "%lld %d AVE %s: %s:%d %d %d DTS %lld %d 0x%x %lld | PTS %lld %d 0x%x %lld -> %lld %d | duration %lld %d 0x%x %lld", v263, 51, v264, "SendFrame", 4526, *(unsigned int *)(v146 + 20), *(unsigned int *)(v4 + 160), sampleTimingArray.decodeTimeStamp.value, sampleTimingArray.decodeTimeStamp.timescale, sampleTimingArray.decodeTimeStamp.flags, sampleTimingArray.decodeTimeStamp.epoch, sampleTimingArray.presentationTimeStamp.value);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %d %d DTS %lld %d 0x%x %lld | PTS %lld %d 0x%x %lld -> %lld %d | duration %lld %d 0x%x %lld", v259, 51, v260, "SendFrame", 4526, v261, v262, sampleTimingArray.decodeTimeStamp.value, sampleTimingArray.decodeTimeStamp.timescale, sampleTimingArray.decodeTimeStamp.flags, sampleTimingArray.decodeTimeStamp.epoch, sampleTimingArray.presentationTimeStamp.value);
        }
      }
      CFAllocatorRef v265 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      OSStatus v266 = CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], dataBuffer, 1u, 0, 0, v191[35], 1, 1, &sampleTimingArray, 1, &dataLength, sbuf);
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        __uint64_t v267 = v191;
        int v268 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v269 = AVE_GetCurrTime();
        int v270 = AVE_Log_GetLevelStr(7);
        CMFormatDescriptionRef v271 = v267[35];
        if (v268)
        {
          printf("%lld %d AVE %s: CMSampleBufferCreate err %d sbuf %p m_videoFormatDesc %p\n", v269, 46, v270, v266, sbuf[0], v271);
          __uint64_t v272 = AVE_GetCurrTime();
          __uint64_t v273 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: CMSampleBufferCreate err %d sbuf %p m_videoFormatDesc %p", v272, 46, v273, v266, sbuf[0], v267[35]);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: CMSampleBufferCreate err %d sbuf %p m_videoFormatDesc %p", v269, 46, v270, v266, sbuf[0], v271);
        }
        unsigned int v191 = v267;
      }
      if (v266)
      {
        __uint64_t v155 = *(uint64_t **)v459;
        if (AVE_Log_CheckLevel(0x2Eu, 4))
        {
          int v274 = AVE_Log_CheckConsole(0x2Eu);
          __uint64_t v275 = AVE_GetCurrTime();
          int v276 = AVE_Log_GetLevelStr(4);
          if (v274)
          {
            printf("%lld %d AVE %s: H264FrameRec ERROR: FigSampleBufferCreate failed.\n", v275, 46, v276);
            __uint64_t v277 = AVE_GetCurrTime();
            sampleSizeArrayuint64_t m = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: FigSampleBufferCreate failed.", v277, 46, sampleSizeArraym);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: FigSampleBufferCreate failed.", v275, 46, v276);
          }
        }
        if (*(unsigned char *)(v444 + 209)) {
          uint64_t v280 = VTEncoderSessionEmitEncodedTile();
        }
        else {
          uint64_t v280 = VTEncoderSessionEmitEncodedFrame();
        }
        uint64_t v12 = v280;
        if (!v280) {
          goto LABEL_535;
        }
        if (v280 == -12903)
        {
          if (AVE_Log_CheckLevel(0x2Eu, 5))
          {
            int v281 = AVE_Log_CheckConsole(0x2Eu);
            __uint64_t v249 = AVE_GetCurrTime();
            __uint64_t v282 = AVE_Log_GetLevelStr(5);
            if (v281)
            {
              printf("%lld %d AVE %s: %s:%d m_VTEncoderSession has already been invalidated. Dropping frame %d %d\n", v249, 46, v282, "SendFrame", 5069, *(_DWORD *)(v146 + 20), *(_DWORD *)(v4 + 160));
              goto LABEL_528;
            }
LABEL_532:
            syslog(3, "%lld %d AVE %s: %s:%d m_VTEncoderSession has already been invalidated. Dropping frame %d %d", v249);
          }
LABEL_533:
          *__uint64_t v155 = 0;
          v155[1] = 0;
          uint64_t v12 = 4294954393;
          goto LABEL_535;
        }
        if (!AVE_Log_CheckLevel(0x2Eu, 4)) {
          goto LABEL_535;
        }
        int v283 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v252 = AVE_GetCurrTime();
        int v284 = AVE_Log_GetLevelStr(4);
        if (v283)
        {
          printf("%lld %d AVE %s: %s:%d ERROR: VTEncoderSessionEmitEncodedFrame failed. %d %d %d\n", v252, 46, v284, "SendFrame", 5078, v12, *(_DWORD *)(v146 + 20), *(_DWORD *)(v4 + 160));
          goto LABEL_385;
        }
LABEL_534:
        syslog(3, "%lld %d AVE %s: %s:%d ERROR: VTEncoderSessionEmitEncodedFrame failed. %d %d %d", v252);
LABEL_535:
        if (sbuf[0]) {
          CFRelease(sbuf[0]);
        }
        goto LABEL_537;
      }
      int v278 = v150[451];
      if (v278 == 3)
      {
        BOOL v279 = 1;
      }
      else
      {
        if (v150[526] == 21) {
          BOOL v279 = 1;
        }
        else {
          BOOL v279 = *(_DWORD *)(v455 + 380) >= 2u && *((unsigned char *)v191 + 148) != 0;
        }
        if (v278 == 2) {
          goto LABEL_393;
        }
      }
      if (!*(unsigned char *)(v446 + 4032))
      {
        BOOL v286 = 0;
        if (v278 == 1 && *(unsigned char *)(v444 + 206))
        {
          if (*(_WORD *)(v455 + 272))
          {
            BOOL v286 = v150[525] == *(unsigned __int16 *)(v455 + 272);
            if (v279) {
              goto LABEL_395;
            }
            goto LABEL_400;
          }
          BOOL v286 = 0;
        }
LABEL_394:
        if (v279)
        {
LABEL_395:
          char v287 = 1;
          BOOL v288 = 1;
          goto LABEL_401;
        }
LABEL_400:
        char v287 = 0;
        BOOL v288 = v278 == 0;
LABEL_401:
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          int v289 = AVE_Log_CheckConsole(0x2Eu);
          __uint64_t v290 = AVE_GetCurrTime();
          BOOL v291 = AVE_Log_GetLevelStr(7);
          int v292 = v150[451];
          if (v289)
          {
            printf("%lld %d AVE %s: H264FrameRec: FrameType %d isSyncSample %d isIFrame %d\n", v290, 46, v291, v292, v279, v288);
            __uint64_t v293 = AVE_GetCurrTime();
            sampleSizeArrayn = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: FrameType %d isSyncSample %d isIFrame %d", v293, 46, sampleSizeArrayn, v150[451], v279, v288);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: FrameType %d isSyncSample %d isIFrame %d", v290, 46, v291, v292, v279, v288);
          }
        }
        SampleAttachmentsuint64_t Array = CMSampleBufferGetSampleAttachmentsArray(sbuf[0], 1u);
        CFNumberRef ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
        uint64_t v4 = v446;
        if (!ValueAtIndex) {
          goto LABEL_477;
        }
        int v296 = ValueAtIndex;
        __uint64_t v297 = (const void **)MEMORY[0x1E4F1CFD0];
        if ((v287 & 1) == 0) {
          CFDictionarySetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F1F200], (const void *)*MEMORY[0x1E4F1CFD0]);
        }
        uint64_t v298 = (const void **)MEMORY[0x1E4F1CFC8];
        if (v288) {
          int v299 = (const void **)MEMORY[0x1E4F1CFC8];
        }
        else {
          int v299 = v297;
        }
        CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E4F1F1A8], *v299);
        if (v286) {
          CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E4F1F1F8], *v298);
        }
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          int v300 = AVE_Log_CheckConsole(0x2Eu);
          __uint64_t v301 = AVE_GetCurrTime();
          BOOL v302 = AVE_Log_GetLevelStr(7);
          int v303 = *(unsigned __int8 *)(v444 + 206);
          if (v300)
          {
            printf("%lld %d AVE %s: H264FrameRec: bIsHierarchical %d\n", v301, 46, v302, v303);
            __uint64_t v304 = AVE_GetCurrTime();
            sampleSizeArrayo = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: bIsHierarchical %d", v304, 46, sampleSizeArrayo, *(unsigned __int8 *)(v444 + 206));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: bIsHierarchical %d", v301, 46, v302, v303);
          }
        }
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          int v305 = AVE_Log_CheckConsole(0x2Eu);
          __uint64_t v306 = AVE_GetCurrTime();
          __uint64_t v307 = AVE_Log_GetLevelStr(7);
          int v308 = *(_DWORD *)(v446 + 160);
          int v309 = v150[526];
          if (v305)
          {
            printf("%lld %d AVE %s: H264FrameRec: F %d FrameType %d nalUnitType %d\n", v306, 46, v307, v308, v150[451], v309);
            __uint64_t v310 = AVE_GetCurrTime();
            long long v311 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: F %d FrameType %d nalUnitType %d", v310, 46, v311, *(_DWORD *)(v446 + 160), v150[451], v150[526]);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: F %d FrameType %d nalUnitType %d", v306, 46, v307, v308, v150[451], v309);
          }
        }
        if (*(unsigned char *)(v444 + 206))
        {
          memcpy(__dst, (char *)v453 + 158448, sizeof(__dst));
          TemporalLevelInfoDictionary = H264VideoEncoderFrameReceiver::CreateTemporalLevelInfoDictionary((uint64_t)v453, __dst, v150[525]);
          if (TemporalLevelInfoDictionary)
          {
            int v313 = TemporalLevelInfoDictionary;
            CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E4F1F1E0], TemporalLevelInfoDictionary);
            CFRelease(v313);
          }
          unsigned int v314 = v150[526] & 0xFFFFFFFE;
          int v315 = (const void *)*MEMORY[0x1E4F1CFD0];
          __uint64_t v316 = v150;
          int v317 = *v298;
          if (v314 == 2) {
            __uint64_t v318 = (const void *)*MEMORY[0x1E4F1CFD0];
          }
          else {
            __uint64_t v318 = *v298;
          }
          CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E4F1F1E8], v318);
          if ((v316[526] & 0xFFFFFFFE) == 4) {
            unsigned __int16 v319 = v315;
          }
          else {
            unsigned __int16 v319 = v317;
          }
          uint64_t v150 = v316;
          CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E4F1F1D0], v319);
        }
        unsigned int v320 = v150;
        int v321 = v449;
        if (*(_DWORD *)(v444 + 120) == 1 && (v320[526] - 19) <= 2)
        {
          CFNumberRef v322 = CFNumberCreate(v265, kCFNumberSInt32Type, v320 + 526);
          if (v322)
          {
            CFNumberRef v323 = v322;
            if (AVE_Log_CheckLevel(0x2Eu, 7))
            {
              int v324 = AVE_Log_CheckConsole(0x2Eu);
              __uint64_t v325 = AVE_GetCurrTime();
              int v326 = AVE_Log_GetLevelStr(7);
              int v327 = *(_DWORD *)(v446 + 160);
              if (v324)
              {
                printf("%lld %d AVE %s: H264FrameRec: F %d NUT CRA\n", v325, 46, v326, v327);
                __uint64_t v328 = AVE_GetCurrTime();
                sampleSizeArrayp = AVE_Log_GetLevelStr(7);
                syslog(3, "%lld %d AVE %s: H264FrameRec: F %d NUT CRA", v328, 46, sampleSizeArrayp, *(_DWORD *)(v446 + 160));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: H264FrameRec: F %d NUT CRA", v325, 46, v326, v327);
              }
              int v321 = v449;
            }
            CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E4F1F1D8], v323);
            CFRelease(v323);
          }
        }
        uint64_t v4 = v446;
        if ((*(unsigned char *)(v444 + 1736) & 0x10) != 0)
        {
          if (*v320 == 1)
          {
            CFNumberRef v332 = CFNumberCreate(v265, kCFNumberIntType, (const void *)(v446 + 160));
            if (v332)
            {
              CFNumberRef v333 = v332;
              CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E4F453B8], v332);
              CFRelease(v333);
            }
          }
          if (*((unsigned char *)v320 + 40) && *(_DWORD *)(v444 + 1828) != 1) {
            CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E4F453B0], (const void *)*MEMORY[0x1E4F1CFD0]);
          }
        }
        if ((*((unsigned char *)v321 + 11) & 8) != 0)
        {
          QualityMetricsDictionary = CreateQualityMetricsDictionary(v443, *(_DWORD *)(v455 + 380));
          if (QualityMetricsDictionary)
          {
            BOOL v335 = QualityMetricsDictionary;
            CFDictionarySetValue(v296, @"QualityMetrics", QualityMetricsDictionary);
            CFRelease(v335);
          }
        }
        if (*(int *)(v146 + 16) >= 16 && (v454[73] & 0xE0) != 0)
        {
          CFNumberRef v336 = CFNumberCreate(v265, kCFNumberSInt32Type, (const void *)(v446 + 4036));
          if (v336)
          {
            CFNumberRef v337 = v336;
            CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E4F453D0], v336);
            CFRelease(v337);
          }
        }
        int v338 = *(_DWORD *)(v444 + 1828);
        if (v338 > 36)
        {
          int v339 = v320;
          if ((v338 - 37) >= 2 && v338 != 10000) {
            goto LABEL_477;
          }
          goto LABEL_475;
        }
        if (v338)
        {
          int v339 = v320;
          if (v338 != 1)
          {
            if (v338 != 20)
            {
LABEL_477:
              __uint64_t v155 = *(uint64_t **)v459;
              if (*(void *)v146)
              {
                if (*(unsigned char *)(v146 + 8))
                {
                  int v342 = CFDataCreateMutable(v265, 0);
                  if (v342)
                  {
                    unint64_t v343 = v342;
                    CFDataAppendBytes(v342, (const UInt8 *)(v4 + 25350), 1574);
                    if (AVE_Log_CheckLevel(0x2Eu, 7))
                    {
                      int v344 = AVE_Log_CheckConsole(0x2Eu);
                      __uint64_t v345 = AVE_GetCurrTime();
                      uint64_t v346 = AVE_Log_GetLevelStr(7);
                      unsigned int v347 = *(_DWORD *)(v4 + 12);
                      if (v347 >= 2) {
                        unsigned int v347 = 2;
                      }
                      if (v344)
                      {
                        printf("%lld %d AVE %s: H264FrameRec: m_multiPassStorage multiPassEndPassCounter %d\n", v345, 46, v346, v347);
                        __uint64_t v345 = AVE_GetCurrTime();
                        uint64_t v346 = AVE_Log_GetLevelStr(7);
                        unsigned int v347 = *(_DWORD *)(v4 + 12);
                        if (v347 >= 2) {
                          unsigned int v347 = 2;
                        }
                      }
                      syslog(3, "%lld %d AVE %s: H264FrameRec: m_multiPassStorage multiPassEndPassCounter %d", v345, 46, v346, v347);
                    }
                    if (AVE_Log_CheckLevel(0xD8u, 7))
                    {
                      int v370 = AVE_Log_CheckConsole(0xD8u);
                      __uint64_t v371 = AVE_GetCurrTime();
                      int v372 = AVE_Log_GetLevelStr(7);
                      if (v370)
                      {
                        printf("%lld %d AVE %s: RECV_PTS: val %lld, timeScale %d, flags 0x%x, epoch %lld\n", v371, 216, v372, *(void *)(v4 + 2296), *(_DWORD *)(v4 + 2304), *(_DWORD *)(v4 + 2308), *(void *)(v4 + 2312));
                        __uint64_t v371 = AVE_GetCurrTime();
                        AVE_Log_GetLevelStr(7);
                      }
                      syslog(3, "%lld %d AVE %s: RECV_PTS: val %lld, timeScale %d, flags 0x%x, epoch %lld", v371);
                    }
                    if (VTMultiPassStorageSetDataAtTimeStamp() && AVE_Log_CheckLevel(0x2Eu, 4))
                    {
                      int v373 = AVE_Log_CheckConsole(0x2Eu);
                      __uint64_t v374 = AVE_GetCurrTime();
                      __uint64_t v375 = AVE_Log_GetLevelStr(4);
                      if (v373)
                      {
                        printf("%lld %d AVE %s: H264FrameRec ERROR: VTMultiPassStorageSetDataAtTimeStamp failed. need to set up a recovery here...\n", v374, 46, v375);
                        __uint64_t v376 = AVE_GetCurrTime();
                        sampleSizeArrayq = AVE_Log_GetLevelStr(4);
                        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: VTMultiPassStorageSetDataAtTimeStamp failed. need to set up a recovery here...", v376, 46, sampleSizeArrayq);
                      }
                      else
                      {
                        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: VTMultiPassStorageSetDataAtTimeStamp failed. need to set up a recovery here...", v374, 46, v375);
                      }
                    }
                    CFRelease(v343);
                  }
                }
              }
              kdebug_trace();
              if (*(unsigned char *)(v444 + 209)) {
                uint64_t v377 = VTEncoderSessionEmitEncodedTile();
              }
              else {
                uint64_t v377 = VTEncoderSessionEmitEncodedFrame();
              }
              uint64_t v12 = v377;
              kdebug_trace();
              if (!v12) {
                goto LABEL_535;
              }
              if (v12 == -12903)
              {
                if (AVE_Log_CheckLevel(0x2Eu, 5))
                {
                  int v378 = AVE_Log_CheckConsole(0x2Eu);
                  __uint64_t v249 = AVE_GetCurrTime();
                  int v379 = AVE_Log_GetLevelStr(5);
                  if (v378)
                  {
                    printf("%lld %d AVE %s: %s:%d m_VTEncoderSession has already been invalidated. Dropping frame %d %d\n", v249, 46, v379, "SendFrame", 5027, *(_DWORD *)(v146 + 20), *(_DWORD *)(v4 + 160));
                    goto LABEL_528;
                  }
                  goto LABEL_532;
                }
                goto LABEL_533;
              }
              if (!AVE_Log_CheckLevel(0x2Eu, 4)) {
                goto LABEL_535;
              }
              int v381 = AVE_Log_CheckConsole(0x2Eu);
              __uint64_t v252 = AVE_GetCurrTime();
              int v382 = AVE_Log_GetLevelStr(4);
              if (v381)
              {
                printf("%lld %d AVE %s: %s:%d ERROR: VTEncoderSessionEmitEncodedFrame failed. %d %d %d\n", v252, 46, v382, "SendFrame", 5036, v12, *(_DWORD *)(v146 + 20), *(_DWORD *)(v4 + 160));
                __uint64_t v383 = AVE_GetCurrTime();
                AVE_Log_GetLevelStr(4);
                syslog(3, "%lld %d AVE %s: %s:%d ERROR: VTEncoderSessionEmitEncodedFrame failed. %d %d %d", v383);
                goto LABEL_535;
              }
              goto LABEL_534;
            }
LABEL_475:
            int valuePtr = *((unsigned __int8 *)v339 + 380);
            CFNumberRef v340 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
            if (v340)
            {
              CFNumberRef v341 = v340;
              CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E4F45378], v340);
              CFRelease(v341);
            }
            goto LABEL_477;
          }
          int v357 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
          __uint64_t v358 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
          uint64_t v359 = CFArrayCreateMutable(0, 0, v357);
          uint64_t v360 = v320 + 17;
          uint64_t v361 = 4;
          do
          {
            AVE_CFArray_AddSInt64(*v360, v358);
            AVE_CFArray_AddSInt64(*(v360 - 4), v359);
            ++v360;
            --v361;
          }
          while (v361);
          CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E4F45400], v358);
          if (v358) {
            CFRelease(v358);
          }
          CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E4F45408], v359);
          if (v359) {
            CFRelease(v359);
          }
          int v362 = *(_DWORD *)(v444 + 120);
          if (v362 == 1)
          {
            __uint64_t v384 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
            __uint64_t v385 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
            v386 = CFArrayCreateMutable(0, 0, v384);
            __uint64_t v365 = CFArrayCreateMutable(0, 0, v384);
            int v387 = v320 + 57;
            uint64_t v388 = 4;
            do
            {
              AVE_CFArray_AddSInt64(*(v387 - 8), v385);
              AVE_CFArray_AddSInt64(*(v387 - 4), v386);
              unsigned int v389 = *v387++;
              AVE_CFArray_AddSInt64(v389, v365);
              --v388;
            }
            while (v388);
            CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E4F45420], v385);
            if (v385) {
              CFRelease(v385);
            }
            CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E4F45418], v386);
            if (v386) {
              CFRelease(v386);
            }
            int v369 = @"NumberOfSkipped8x8Blocks";
          }
          else
          {
            if (v362)
            {
              if (AVE_Log_CheckLevel(3u, 4))
              {
                int v398 = AVE_Log_CheckConsole(3u);
                __uint64_t v399 = AVE_GetCurrTime();
                v400 = AVE_Log_GetLevelStr(4);
                if (v398)
                {
                  printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codec type (%d) not recognized.\n", v399, 3, v400, "SendFrame", 4826, "false", *(_DWORD *)(v444 + 120));
                  __uint64_t v399 = AVE_GetCurrTime();
                  v400 = AVE_Log_GetLevelStr(4);
                }
                syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codec type (%d) not recognized.", v399, 3, v400, "SendFrame", 4826, "false", *(unsigned int *)(v444 + 120));
              }
              return 3758097084;
            }
            int v363 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
            __uint64_t v364 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
            __uint64_t v365 = CFArrayCreateMutable(0, 0, v363);
            int v366 = v320 + 57;
            uint64_t v367 = 4;
            do
            {
              AVE_CFArray_AddSInt64(*(v366 - 8), v364);
              unsigned int v368 = *v366++;
              AVE_CFArray_AddSInt64(v368, v365);
              --v367;
            }
            while (v367);
            CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E4F45428], v364);
            if (v364) {
              CFRelease(v364);
            }
            int v369 = (__CFString *)*MEMORY[0x1E4F45430];
          }
          CFDictionarySetValue(v296, v369, v365);
          if (v365) {
            CFRelease(v365);
          }
          v390 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
          for (uint64_t i = 0; i != 16; i += 4)
            AVE_CFArray_AddSInt64(*(unsigned int *)(v446 + 21944 + i), v390);
          if (v390)
          {
            CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E4F453F0], v390);
            CFRelease(v390);
          }
          __uint64_t v392 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
          for (uint64_t j = 0; j != 16; j += 4)
            AVE_CFArray_AddSInt64(*(unsigned int *)(v446 + 21960 + j), v392);
          if (v392)
          {
            CFDictionarySetValue(v296, @"SliceDataLength", v392);
            CFRelease(v392);
          }
          if (!v449[10] || *(_DWORD *)(v444 + 120)) {
            goto LABEL_559;
          }
          int v401 = (const UInt8 *)*((void *)v453 + *(int *)(v446 + 916) + 3224);
          if (v401)
          {
            int v403 = *v449;
            int v402 = v449[1];
            int v404 = CFDataCreateMutable(v265, 0);
            if (v404)
            {
              __uint64_t v405 = v404;
              CFIndex v406 = 432 * ((v403 + 15) >> 4) * ((v402 + 15) >> 4);
              CFDataAppendBytes(v404, v401, v406);
              if (AVE_Log_CheckLevel(0x2Eu, 7))
              {
                int v407 = AVE_Log_CheckConsole(0x2Eu);
                __uint64_t v408 = AVE_GetCurrTime();
                int v409 = AVE_Log_GetLevelStr(7);
                if (v407)
                {
                  printf("%lld %d AVE %s: H264FrameRec: EnableSelStatsFlags sending %d bytes out\n", v408, 46, v409, v406);
                  __uint64_t v410 = AVE_GetCurrTime();
                  sampleSizeArrayr = AVE_Log_GetLevelStr(7);
                  syslog(3, "%lld %d AVE %s: H264FrameRec: EnableSelStatsFlags sending %d bytes out", v410, 46, sampleSizeArrayr, v406);
                }
                else
                {
                  syslog(3, "%lld %d AVE %s: H264FrameRec: EnableSelStatsFlags sending %d bytes out", v408, 46, v409, v406);
                }
              }
              CFDictionarySetValue(v296, @"MBStatistics", v405);
              CFRelease(v405);
            }
LABEL_559:
            uint64_t v4 = v446;
            if (!*(unsigned char *)(v446 + 2656)) {
              goto LABEL_477;
            }
            int v394 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            if (!v394) {
              goto LABEL_477;
            }
            __uint64_t v352 = v394;
            if (!AVE_DPB_MakeSnapshot((int *)(v446 + 920), v394))
            {
              CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E4F45448], v352);
              uint64_t v395 = *(void *)(v446 + 2472);
              if ((v395 & 0x8000) != 0)
              {
                v396 = *(AVE_VCP **)(v146 + 5952);
                if (v396)
                {
                  AVE_VCP::ChromaFilter(v396, v352, *(unsigned int *)(v446 + 160), *(unsigned int *)(v446 + 2664));
                  uint64_t v395 = *(void *)(v446 + 2472);
                }
              }
              if ((v395 & 0x10000) != 0)
              {
                int v397 = *(AVE_VCP **)(v146 + 5952);
                if (v397) {
                  AVE_VCP::CalcChecksum(v397, v352, *(unsigned int *)(v446 + 160), v296);
                }
              }
            }
LABEL_589:
            CFRelease(v352);
            uint64_t v4 = v446;
            goto LABEL_477;
          }
          if (AVE_Log_CheckLevel(3u, 4))
          {
            int v411 = AVE_Log_CheckConsole(3u);
            __uint64_t v412 = AVE_GetCurrTime();
            v413 = AVE_Log_GetLevelStr(4);
            if (!v411) {
              goto LABEL_590;
            }
            int v414 = 4859;
            goto LABEL_583;
          }
        }
        else
        {
          if (!v321[10] || *(_DWORD *)(v444 + 120) || *(_DWORD *)(v444 + 124) != 1) {
            goto LABEL_477;
          }
          __uint64_t v348 = (const UInt8 *)*((void *)v453 + *(int *)(v446 + 916) + 3224);
          if (v348)
          {
            int v350 = *v449;
            int v349 = v449[1];
            int v351 = CFDataCreateMutable(v265, 0);
            uint64_t v4 = v446;
            if (!v351) {
              goto LABEL_477;
            }
            __uint64_t v352 = v351;
            CFIndex v353 = 432 * ((v350 + 15) >> 4) * ((v349 + 15) >> 4);
            CFDataAppendBytes(v351, v348, v353);
            if (AVE_Log_CheckLevel(0x2Eu, 7))
            {
              int v354 = AVE_Log_CheckConsole(0x2Eu);
              __uint64_t v355 = AVE_GetCurrTime();
              __uint64_t v356 = AVE_Log_GetLevelStr(7);
              if (v354)
              {
                printf("%lld %d AVE %s: H264FrameRec: AttachMVStats %d - EnableSelStatsFlags sending %d bytes out\n\n", v355, 46, v356, *(_DWORD *)(v444 + 124), v353);
                __uint64_t v355 = AVE_GetCurrTime();
                __uint64_t v356 = AVE_Log_GetLevelStr(7);
              }
              syslog(3, "%lld %d AVE %s: H264FrameRec: AttachMVStats %d - EnableSelStatsFlags sending %d bytes out\n", v355, 46, v356, *(_DWORD *)(v444 + 124), v353);
            }
            CFDictionarySetValue(v296, @"MBStatistics", v352);
            goto LABEL_589;
          }
          if (AVE_Log_CheckLevel(3u, 4))
          {
            int v415 = AVE_Log_CheckConsole(3u);
            __uint64_t v412 = AVE_GetCurrTime();
            v413 = AVE_Log_GetLevelStr(4);
            if (!v415)
            {
LABEL_590:
              syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: stat = NULL.");
              return 3758097084;
            }
            int v414 = 4918;
LABEL_583:
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: stat = NULL.\n", v412, 3, v413, "SendFrame", v414, "stat != __null");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
            goto LABEL_590;
          }
        }
        return 3758097084;
      }
LABEL_393:
      BOOL v286 = 1;
      goto LABEL_394;
    }
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      int v213 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v214 = AVE_GetCurrTime();
      int v215 = AVE_Log_GetLevelStr(7);
      if (v213)
      {
        printf("%lld %d AVE %s: BAIL for first layer\n", v214, 46, v215);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(7);
      }
      syslog(3, "%lld %d AVE %s: BAIL for first layer");
    }
    return 0;
  }
  if (*(int *)(v450 + 28) >= 1)
  {
    uint64_t v177 = 0;
    int v178 = (char *)v453 + 239368;
    while (*(_DWORD *)v140 == 0x1000000)
    {
      unsigned int v179 = *(_DWORD *)&v178[4 * v177] - 4;
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        int v180 = AVE_Log_CheckConsole(0x2Eu);
        __uint64_t v181 = AVE_GetCurrTime();
        uint64_t v182 = AVE_Log_GetLevelStr(7);
        int v183 = *(_DWORD *)(v450 + 24);
        int v184 = *(_DWORD *)v140;
        if (v180)
        {
          printf("%lld %d AVE %s: H264FrameRec: insert m_SEI_size %d slice_size_fig %d &p_in[0] 0x%x\n", v181, 46, v182, v183, v179, v184);
          __uint64_t v181 = AVE_GetCurrTime();
          uint64_t v182 = AVE_Log_GetLevelStr(7);
          int v183 = *(_DWORD *)(v450 + 24);
          int v184 = *(_DWORD *)v140;
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec: insert m_SEI_size %d slice_size_fig %d &p_in[0] 0x%x", v181, 46, v182, v183, v179, v184);
        uint64_t v4 = v446;
      }
      *(_DWORD *)int v140 = bswap32(v179);
      uint64_t v185 = *(int *)&v178[4 * v177];
      v140 += v185;
      int v186 = *(_DWORD *)(v450 + 24) - v185;
      *(_DWORD *)(v450 + 24) = v186;
      *(_DWORD *)&v178[4 * v177++] = 0;
      if (v177 >= *(int *)(v450 + 28))
      {
        __uint64_t v155 = (uint64_t *)(v7 + 66);
        uint64_t v146 = v450;
        goto LABEL_293;
      }
    }
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v216 = AVE_Log_CheckConsole(3u);
      __uint64_t v217 = AVE_GetCurrTime();
      int v218 = AVE_Log_GetLevelStr(4);
      if (v216)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (0): *(uint32_t *)&p_in[0] != 0x01000000 (= 0x%x)\n", v217, 3, v218, "SendFrame", 4395, "*(uint32_t *)&p_in[0] == 0x01000000", *(_DWORD *)v140);
        __uint64_t v217 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (0): *(uint32_t *)&p_in[0] != 0x01000000 (= 0x%x)", v217);
      return 3758097085;
    }
    return 3758097085;
  }
  int v186 = *(_DWORD *)(v450 + 24);
LABEL_293:
  if (v186)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v210 = AVE_Log_CheckConsole(3u);
      __uint64_t v211 = AVE_GetCurrTime();
      __uint64_t v212 = AVE_Log_GetLevelStr(4);
      if (v210)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (0): SEI buffer error\n", v211, 3, v212, "SendFrame", 4405, "m_SEI_size == 0");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (0): SEI buffer error");
      return 3758097085;
    }
    return 3758097085;
  }
  *(void *)__uint64_t v458 = v155;
  unsigned int v219 = (char *)v453 + 28032;
  *(_DWORD *)(v146 + 28) = 0;
  uint64_t v220 = 32;
  do
  {
    uint64_t v221 = &v219[384 * *(int *)(v4 + 916)];
    unsigned int v222 = *((_DWORD *)v221 + 2880) + *(_DWORD *)v221;
    if (!v222) {
      break;
    }
    unsigned int v223 = v222 - 4;
    if (*(_DWORD *)(v455 + 380) < 2u || *(_DWORD *)(v4 + 168))
    {
      unsigned int v224 = v150;
      v223 -= v454[7];
    }
    else
    {
      unsigned int v224 = v150;
    }
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      int v225 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v226 = AVE_GetCurrTime();
      __uint64_t v227 = AVE_Log_GetLevelStr(7);
      int v228 = *(_DWORD *)v140;
      if (v225)
      {
        printf("%lld %d AVE %s: H264FrameRec: insert slice_size %d slice_size_fig %d slice # %d &p_in[0] 0x%x\n", v226, 46, v227, v222, v223, *(_DWORD *)(v446 + 916), v228);
        __uint64_t v229 = AVE_GetCurrTime();
        uint64_t v230 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: insert slice_size %d slice_size_fig %d slice # %d &p_in[0] 0x%x", v229, 46, v230, v222, v223, *(_DWORD *)(v446 + 916), *(_DWORD *)v140);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: insert slice_size %d slice_size_fig %d slice # %d &p_in[0] 0x%x", v226, 46, v227, v222, v223, *(_DWORD *)(v446 + 916), v228);
      }
    }
    if (*(_DWORD *)v140 != 0x1000000)
    {
      if (!AVE_Log_CheckLevel(3u, 4)) {
        return 3758097085;
      }
      int v254 = AVE_Log_CheckConsole(3u);
      __uint64_t v255 = AVE_GetCurrTime();
      int v256 = AVE_Log_GetLevelStr(4);
      if (v254)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (1): *(uint32_t *)&p_in[0] != 0x01000000 (= 0x%x)\n", v255, 3, v256, "SendFrame", 4429, "*(uint32_t *)&p_in[0] == 0x01000000", *(_DWORD *)v140);
        __uint64_t v257 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (1): *(uint32_t *)&p_in[0] != 0x01000000 (= 0x%x)", v257);
        return 3758097085;
      }
LABEL_449:
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (1): *(uint32_t *)&p_in[0] != 0x01000000 (= 0x%x)", v255);
      return 3758097085;
    }
    v219 += 12;
    *(_DWORD *)int v140 = bswap32(v223);
    v140 += v222;
    --v220;
    uint64_t v4 = v446;
    uint64_t v150 = v224;
  }
  while (v220);
  uint64_t v231 = v454[7];
  uint64_t v45 = v444;
  __uint64_t v155 = *(uint64_t **)v458;
  if ((int)v231 < 1) {
    goto LABEL_243;
  }
  double v232 = v150;
  if (*(_DWORD *)(v455 + 380) >= 2u && !*(_DWORD *)(v4 + 168))
  {
LABEL_440:
    v454[7] = 0;
    uint64_t v150 = v232;
    goto LABEL_243;
  }
  uint64_t v233 = v146;
  unsigned int v234 = v231 - 4;
  uint64_t v235 = -v231;
  if (AVE_Log_CheckLevel(0x2Eu, 7))
  {
    int v236 = v232;
    int v237 = AVE_Log_CheckConsole(0x2Eu);
    __uint64_t v238 = AVE_GetCurrTime();
    int v239 = AVE_Log_GetLevelStr(7);
    if (v237)
    {
      printf("%lld %d AVE %s: H264FrameRec: insert filler size %d slice_size_fig %d slice # %d &p_in[0] 0x%x\n", v238, 46, v239, v454[7], v234, *(_DWORD *)(v4 + 916), *(_DWORD *)&v140[v235]);
      __uint64_t v238 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: H264FrameRec: insert filler size %d slice_size_fig %d slice # %d &p_in[0] 0x%x", v238);
    uint64_t v45 = v444;
    double v232 = v236;
  }
  if (*(_DWORD *)&v140[v235] == 0x1000000)
  {
    *(_DWORD *)&v140[v235] = bswap32(v234);
    uint64_t v146 = v233;
    goto LABEL_440;
  }
  if (!AVE_Log_CheckLevel(3u, 4)) {
    return 3758097085;
  }
  int v329 = AVE_Log_CheckConsole(3u);
  __uint64_t v255 = AVE_GetCurrTime();
  uint64_t v330 = AVE_Log_GetLevelStr(4);
  if (!v329) {
    goto LABEL_449;
  }
  printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (1): *(uint32_t *)&p_in[0] != 0x01000000 (= 0x%x)\n", v255, 3, v330, "SendFrame", 4455, "*(uint32_t *)&p_in[0] == 0x01000000", *(_DWORD *)&v140[v235]);
  __uint64_t v331 = AVE_GetCurrTime();
  AVE_Log_GetLevelStr(4);
  syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (1): *(uint32_t *)&p_in[0] != 0x01000000 (= 0x%x)", v331);
  return 3758097085;
}

__CFDictionary *CreateQualityMetricsDictionary(float *a1, int a2)
{
  LODWORD(v2) = a2;
  CFMutableDataRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    if (AVE_Log_CheckLevel(0xE2u, 4))
    {
      int v6 = AVE_Log_CheckConsole(0xE2u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v6)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create CFDictionary\n", CurrTime, 226, LevelStr, "CreateQualityMetricsDictionary", 3539, "pQualityMetricsDict != __null");
        __uint64_t v9 = AVE_GetCurrTime();
        int v32 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDictionary", v9, 226, v32, "CreateQualityMetricsDictionary", 3539, "pQualityMetricsDict != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDictionary", CurrTime, 226, LevelStr, "CreateQualityMetricsDictionary", 3539, "pQualityMetricsDict != __null");
      }
    }
    return 0;
  }
  unsigned int v5 = Mutable;
  if ((int)v2 <= 1)
  {
    AVE_CFDict_AddDouble(@"LumaMeanSquaredError", a1[4], Mutable);
    AVE_CFDict_AddDouble(@"ChromaBlueMeanSquaredError", a1[5], v5);
    AVE_CFDict_AddDouble(@"ChromaRedMeanSquaredError", a1[6], v5);
    return v5;
  }
  CFMutableArrayRef v10 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (!v10)
  {
    if (AVE_Log_CheckLevel(0xE2u, 4))
    {
      int v18 = AVE_Log_CheckConsole(0xE2u);
      __uint64_t v19 = AVE_GetCurrTime();
      unsigned int v20 = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create CFArray\n", v19, 226, v20, "CreateQualityMetricsDictionary", 3556, "pLumaMeanSquaredErrorArr != __null");
        __uint64_t v21 = AVE_GetCurrTime();
        __uint64_t v33 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v21, 226, v33, "CreateQualityMetricsDictionary", 3556, "pLumaMeanSquaredErrorArr != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v19, 226, v20, "CreateQualityMetricsDictionary", 3556, "pLumaMeanSquaredErrorArr != __null");
      }
    }
    goto LABEL_31;
  }
  CFMutableArrayRef v11 = v10;
  CFMutableArrayRef v12 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (!v12)
  {
    if (AVE_Log_CheckLevel(0xE2u, 4))
    {
      int v22 = AVE_Log_CheckConsole(0xE2u);
      __uint64_t v23 = AVE_GetCurrTime();
      uint64_t v24 = AVE_Log_GetLevelStr(4);
      if (v22)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create CFArray\n", v23, 226, v24, "CreateQualityMetricsDictionary", 3559, "pChromaBlueMeanSquaredErrorArr != __null");
        __uint64_t v25 = AVE_GetCurrTime();
        uint64_t v34 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v25, 226, v34, "CreateQualityMetricsDictionary", 3559, "pChromaBlueMeanSquaredErrorArr != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v23, 226, v24, "CreateQualityMetricsDictionary", 3559, "pChromaBlueMeanSquaredErrorArr != __null");
      }
    }
    int v30 = v11;
    goto LABEL_30;
  }
  int v13 = v12;
  CFMutableArrayRef v14 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (!v14)
  {
    if (AVE_Log_CheckLevel(0xE2u, 4))
    {
      int v26 = AVE_Log_CheckConsole(0xE2u);
      __uint64_t v27 = AVE_GetCurrTime();
      unsigned int v28 = AVE_Log_GetLevelStr(4);
      if (v26)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create CFArray\n", v27, 226, v28, "CreateQualityMetricsDictionary", 3562, "pChromaRedMeanSquaredErrorArr != __null");
        __uint64_t v29 = AVE_GetCurrTime();
        int v35 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v29, 226, v35, "CreateQualityMetricsDictionary", 3562, "pChromaRedMeanSquaredErrorArr != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v27, 226, v28, "CreateQualityMetricsDictionary", 3562, "pChromaRedMeanSquaredErrorArr != __null");
      }
    }
    CFRelease(v11);
    int v30 = v13;
LABEL_30:
    CFRelease(v30);
LABEL_31:
    CFRelease(v5);
    return 0;
  }
  int v15 = v14;
  uint64_t v2 = v2;
  int v16 = a1 + 6;
  do
  {
    AVE_CFArray_AddDouble(*(v16 - 2), v11);
    AVE_CFArray_AddDouble(*(v16 - 1), v13);
    float v17 = *v16;
    v16 += 12;
    AVE_CFArray_AddDouble(v17, v15);
    --v2;
  }
  while (v2);
  CFDictionaryAddValue(v5, @"LumaMeanSquaredError", v11);
  CFDictionaryAddValue(v5, @"ChromaBlueMeanSquaredError", v13);
  CFDictionaryAddValue(v5, @"ChromaRedMeanSquaredError", v15);
  CFRelease(v11);
  CFRelease(v13);
  CFRelease(v15);
  return v5;
}

uint64_t Connection::peekPacket(uint64_t a1, uint64_t a2)
{
  uint64_t result = pthread_mutex_lock((pthread_mutex_t *)a1);
  if (*(_DWORD *)(a1 + 200))
  {
    uint64_t v5 = *(void *)(a1 + 216) + 40 * *(unsigned int *)(a1 + 204);
    long long v6 = *(_OWORD *)v5;
    long long v7 = *(_OWORD *)(v5 + 16);
    *(void *)(a2 + 32) = *(void *)(v5 + 32);
    *(_OWORD *)a2 = v6;
    *(_OWORD *)(a2 + 16) = v7;
    return pthread_mutex_unlock((pthread_mutex_t *)a1);
  }
  return result;
}

uint64_t Connection::writePacketBlock(uint64_t a1, long long *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  while (*(_DWORD *)(a1 + 200) == *(_DWORD *)(a1 + 196))
  {
    gettimeofday((timeval *)(a1 + 176), 0);
    uint64_t v4 = 1000 * *(int *)(a1 + 184);
    *(void *)(a1 + 160) = *(void *)(a1 + 176) + 120;
    *(void *)(a1 + 168) = v4;
    if (pthread_cond_timedwait((pthread_cond_t *)(a1 + 112), (pthread_mutex_t *)a1, (const timespec *)(a1 + 160)) == 60)
    {
      if (AVE_Log_CheckLevel(0x2Au, 4))
      {
        int v5 = AVE_Log_CheckConsole(0x2Au);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        int v8 = *(_DWORD *)(a1 + 200);
        if (v5)
        {
          printf("%lld %d AVE %s: H264 Connection: connection full %d\n", CurrTime, 42, LevelStr, v8);
          __uint64_t v9 = AVE_GetCurrTime();
          __uint64_t v19 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: H264 Connection: connection full %d", v9, 42, v19, *(_DWORD *)(a1 + 200));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264 Connection: connection full %d", CurrTime, 42, LevelStr, v8);
        }
      }
      uint64_t v10 = 0xFFFFFFFFLL;
      goto LABEL_14;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = *(void *)(a1 + 216) + 40 * *(unsigned int *)(a1 + 208);
  long long v12 = *a2;
  long long v13 = a2[1];
  *(void *)(v11 + 32) = *((void *)a2 + 4);
  *(_OWORD *)uint64_t v11 = v12;
  *(_OWORD *)(v11 + 16) = v13;
  int v14 = *(_DWORD *)(a1 + 208);
  unsigned int v16 = *(_DWORD *)(a1 + 196);
  int v15 = *(_DWORD *)(a1 + 200);
  *(_DWORD *)(a1 + 200) = v15 + 1;
  if (v14 + 1 < v16) {
    int v17 = v14 + 1;
  }
  else {
    int v17 = 0;
  }
  *(_DWORD *)(a1 + 208) = v17;
  if (!v15)
  {
    pthread_cond_signal((pthread_cond_t *)(a1 + 64));
    uint64_t v10 = 0;
  }
LABEL_14:
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v10;
}

uint64_t H264VideoEncoderFrameReceiver::StopRunLoop(H264VideoEncoderFrameReceiver *this)
{
  *(unsigned char *)this = 0;
  uint64_t v2 = (CFRunLoopRef *)((char *)this + 51232);
  uint64_t v3 = (const void *)*((void *)this + 6404);
  if (v3)
  {
    CFRetain(v3);
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      int v4 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(7);
      if (v4)
      {
        printf("%lld %d AVE %s: H264FrameRec: RemoveIODispatcherFromRunLoop to CFRunLoopRun.\n", CurrTime, 46, LevelStr);
        __uint64_t v7 = AVE_GetCurrTime();
        int v14 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: RemoveIODispatcherFromRunLoop to CFRunLoopRun.", v7, 46, v14);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: RemoveIODispatcherFromRunLoop to CFRunLoopRun.", CurrTime, 46, LevelStr);
      }
    }
    H264VideoEncoderFrameReceiver::RemoveIODispatcherFromRunLoop(this);
    CFRunLoopStop(*v2);
    CFRelease(*v2);
    uint64_t v8 = 0;
    *uint64_t v2 = 0;
  }
  else
  {
    uint64_t v8 = 3758097084;
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      int v9 = AVE_Log_CheckConsole(0x2Eu);
      __uint64_t v10 = AVE_GetCurrTime();
      uint64_t v11 = AVE_Log_GetLevelStr(4);
      if (v9)
      {
        printf("%lld %d AVE %s: H264FrameRec ERROR: runLoopRef NULL\n", v10, 46, v11);
        __uint64_t v12 = AVE_GetCurrTime();
        int v15 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: runLoopRef NULL", v12, 46, v15);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: runLoopRef NULL", v10, 46, v11);
      }
    }
  }
  return v8;
}

uint64_t CreateH264VideoEncoderFrameReceiver(void *a1, uint64_t a2, pthread_attr_t *a3, pthread_t *a4)
{
  v15[0] = 0;
  uint64_t v16 = 0;
  uint64_t v17 = a2;
  pthread_attr_init(a3);
  if (pthread_attr_getschedparam(a3, &v14))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v7 = AVE_Log_CheckConsole(3u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: pthread_attr_getschedparam failed.\n", CurrTime, 3, LevelStr, "CreateH264VideoEncoderFrameReceiver", 5886, "err == noErr");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: pthread_attr_getschedparam failed.");
    }
  }
  else
  {
    v14.sched_priority = 47;
    if (pthread_attr_setschedparam(a3, &v14))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v10 = AVE_Log_CheckConsole(3u);
        __uint64_t v11 = AVE_GetCurrTime();
        __uint64_t v12 = AVE_Log_GetLevelStr(4);
        if (v10)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: pthread_attr_setschedparam failed.\n", v11, 3, v12, "CreateH264VideoEncoderFrameReceiver", 5889, "err == noErr");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: pthread_attr_setschedparam failed.");
      }
    }
    else
    {
      pthread_create(a4, a3, (void *(__cdecl *)(void *))H264VideoEncoderFrameReceiverEntry, v15);
      while (!v15[0])
        usleep(0x3E8u);
      *a1 = v16;
    }
  }
  if (*a1) {
    return 0;
  }
  else {
    return 3758097084;
  }
}

void H264VideoEncoderFrameReceiverEntry(void *a1)
{
  a1[1] = 0;
  operator new();
}

void sub_1BA759A30(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9F01B0](v1, 0x10F0C405F25F4F4);
  _Unwind_Resume(a1);
}

uint64_t DestroyH264VideoEncoderFrameReceiver(H264VideoEncoderFrameReceiver *a1, _opaque_pthread_attr_t *a2, _opaque_pthread_t **a3)
{
  H264VideoEncoderFrameReceiver::StopRunLoop(a1);
  pthread_join(*a3, 0);
  if (!*(unsigned char *)a1)
  {
    uint64_t v6 = 0;
LABEL_6:
    if (!a2) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v6 = 3758097084;
  if (!AVE_Log_CheckLevel(3u, 4)) {
    goto LABEL_6;
  }
  int v7 = AVE_Log_CheckConsole(3u);
  __uint64_t CurrTime = AVE_GetCurrTime();
  Leveluint64_t Str = AVE_Log_GetLevelStr(4);
  if (v7)
  {
    printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: wait for H264VideoEncoderFrameReceiver thread failed.\n", CurrTime, 3, LevelStr, "DestroyH264VideoEncoderFrameReceiver", 5917, "pFrameReceiver->m_moreWorkToDo == false");
    __uint64_t v10 = AVE_GetCurrTime();
    uint64_t v16 = AVE_Log_GetLevelStr(4);
    syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: wait for H264VideoEncoderFrameReceiver thread failed.", v10, 3, v16, "DestroyH264VideoEncoderFrameReceiver", 5917, "pFrameReceiver->m_moreWorkToDo == false");
  }
  else
  {
    syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: wait for H264VideoEncoderFrameReceiver thread failed.", CurrTime, 3, LevelStr, "DestroyH264VideoEncoderFrameReceiver", 5917, "pFrameReceiver->m_moreWorkToDo == false");
  }
  if (!a2) {
    goto LABEL_8;
  }
LABEL_7:
  pthread_attr_destroy(a2);
LABEL_8:
  if (AVE_Log_CheckLevel(0x2Eu, 7))
  {
    int v11 = AVE_Log_CheckConsole(0x2Eu);
    __uint64_t v12 = AVE_GetCurrTime();
    long long v13 = AVE_Log_GetLevelStr(7);
    if (v11)
    {
      printf("%lld %d AVE %s: H264FrameRec: Destroy pFrameReciever %p sz %lu\n", v12, 46, v13, a1, 245296);
      __uint64_t v14 = AVE_GetCurrTime();
      uint64_t v17 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: H264FrameRec: Destroy pFrameReciever %p sz %lu", v14, 46, v17, a1, 245296);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264FrameRec: Destroy pFrameReciever %p sz %lu", v12, 46, v13, a1, 245296);
    }
  }
  H264VideoEncoderFrameReceiver::~H264VideoEncoderFrameReceiver(a1);
  MEMORY[0x1BA9F01B0]();
  return v6;
}

void AVE_MultiPass::AVE_MultiPass(AVE_MultiPass *this)
{
  *(_OWORD *)((char *)this + 25352) = 0u;
  *((void *)this + 3171) = 0;
  *(_OWORD *)((char *)this + 25384) = 0u;
  *(_OWORD *)((char *)this + 25400) = 0u;
  *(_OWORD *)((char *)this + 25416) = 0u;
  *(_OWORD *)((char *)this + 25432) = 0u;
  *(_OWORD *)((char *)this + 25448) = 0u;
  *(_OWORD *)((char *)this + 25464) = 0u;
  AVE_MultiPass::reset(this);
}

void sub_1BA759C98(_Unwind_Exception *a1)
{
  std::deque<_S_AVE_MultiPassStats *>::~deque[abi:ne180100](v1 + 3179);
  std::deque<_S_AVE_MultiPassStats *>::~deque[abi:ne180100](v2);
  int v4 = (void *)v1[3169];
  if (v4)
  {
    v1[3170] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

double AVE_MultiPass::reset(AVE_MultiPass *this)
{
  uint64_t v2 = (_DWORD *)((char *)this + 25480);
  AVE_MultiPass::empty_queues(this);
  *uint64_t v2 = 0;
  *((void *)this + 3186) = 0;
  *((void *)this + 3220) = 0;
  bzero((char *)this + 25496, 0x108uLL);
  v2[23] = 0;
  double result = 0.0;
  *((void *)this + 3168) = 0;
  v2[72] = 0;
  return result;
}

void AVE_MultiPass::empty_queues(AVE_MultiPass *this)
{
  uint64_t v2 = (void *)((char *)this + 25352);
  uint64_t v3 = (void *)*((void *)this + 3169);
  if (v3)
  {
    *((void *)this + 3170) = v3;
    operator delete(v3);
  }
  *uint64_t v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  int v4 = (void **)*((void *)this + 3174);
  uint64_t v5 = *((void *)this + 3175);
  *((void *)this + 3178) = 0;
  unint64_t v6 = v5 - (void)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      int v4 = (void **)(*((void *)this + 3174) + 8);
      *((void *)this + 3174) = v4;
      unint64_t v6 = *((void *)this + 3175) - (void)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    uint64_t v7 = 256;
  }
  else
  {
    if (v6 >> 3 != 2) {
      goto LABEL_10;
    }
    uint64_t v7 = 512;
  }
  *((void *)this + 3177) = v7;
LABEL_10:
  uint64_t v8 = (void **)*((void *)this + 3180);
  uint64_t v9 = *((void *)this + 3181);
  *((void *)this + 3184) = 0;
  unint64_t v10 = v9 - (void)v8;
  if (v10 >= 0x11)
  {
    do
    {
      operator delete(*v8);
      uint64_t v8 = (void **)(*((void *)this + 3180) + 8);
      *((void *)this + 3180) = v8;
      unint64_t v10 = *((void *)this + 3181) - (void)v8;
    }
    while (v10 > 0x10);
  }
  if (v10 >> 3 == 1)
  {
    uint64_t v11 = 256;
    goto LABEL_16;
  }
  if (v10 >> 3 == 2)
  {
    uint64_t v11 = 512;
LABEL_16:
    *((void *)this + 3183) = v11;
  }
  uint64_t v12 = 0;
  int64x2_t v13 = (int64x2_t)xmmword_1BA78F600;
  int64x2_t v14 = vdupq_n_s64(2uLL);
  int64x2_t v15 = vaddq_s64(vdupq_n_s64((unint64_t)this), v14);
  do
  {
    v16.i64[0] = 1574 * v13.i64[0];
    v16.i64[1] = 1574 * v13.i64[1];
    *(int64x2_t *)((char *)this + v12 + 25192) = vaddq_s64(v15, v16);
    int64x2_t v13 = vaddq_s64(v13, v14);
    v12 += 16;
  }
  while (v12 != 128);
  *((_DWORD *)this + 6330) = 16;
}

uint64_t std::deque<_S_AVE_MultiPassStats *>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<_S_AVE_MultiPassStats **>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<_S_AVE_MultiPassStats **>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t AVE_USL_CalcSurfaceInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = *(_DWORD *)(a2 + 18568);
  int v5 = *(_DWORD *)(a2 + 1688);
  int v6 = *(_DWORD *)(a2 + 1692);
  *(_DWORD *)(a3 + 16) = AVE_CalcBufNumOfMBInputCtrl(*(_DWORD *)(a1 + 188164), v4, *(unsigned __int8 *)(a2 + 1732));
  *(_DWORD *)(a3 + 20) = AVE_CalcBufSizeOfMBInputCtrl(v4, v5, v6);
  return 0;
}

uint64_t AVE_USL_CalcDataSurfaceInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + 188164;
  int v6 = *(_DWORD *)(a1 + 188164);
  int v7 = *(_DWORD *)(v5 + 12);
  if (v7) {
    int v8 = 2;
  }
  else {
    int v8 = *(_DWORD *)(a2 + 18208);
  }
  BOOL v9 = *(_DWORD *)(a3 + 160) == 0;
  BOOL v10 = *(void *)(a3 + 21632) != 0;
  *(_DWORD *)(a4 + 40) = AVE_CalcBufNumOfMultiPassStats(v6, v8, v7);
  *(_DWORD *)(a4 + 44) = AVE_CalcBufSizeOfMultiPassStats(v9, v10);
  return 0;
}

uint64_t AVE_USL_Drv_Create(int a1, int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  bzero(v15, 0x6E0uLL);
  if (AVE_Log_CheckLevel(0x28u, 6))
  {
    int v4 = AVE_Log_CheckConsole(0x28u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v4)
    {
      printf("%lld %d AVE %s: %s Enter %d %d\n", CurrTime, 40, LevelStr, "AVE_USL_Drv_Create", a1, a2);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %d %d", CurrTime, 40, LevelStr, "AVE_USL_Drv_Create", a1, a2);
  }
  int v7 = malloc_type_malloc(0x2DF20uLL, 0x10200405B383B17uLL);
  if (v7)
  {
    bzero(v7, 0x2DF20uLL);
    operator new();
  }
  if (AVE_Log_CheckLevel(0x28u, 4))
  {
    int v8 = AVE_Log_CheckConsole(0x28u);
    __uint64_t v9 = AVE_GetCurrTime();
    BOOL v10 = AVE_Log_GetLevelStr(4);
    if (v8)
    {
      printf("%lld %d AVE %s: %s:%d %s | fail to allocate %d %d\n", v9, 40, v10, "AVE_USL_Drv_Create", 329, "pINS != __null", a1, a2);
      __uint64_t v9 = AVE_GetCurrTime();
      BOOL v10 = AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to allocate %d %d", v9, 40, v10, "AVE_USL_Drv_Create", 329, "pINS != __null", a1, a2);
  }
  if (AVE_Log_CheckLevel(0x28u, 6))
  {
    BOOL v11 = AVE_Log_CheckConsole(0x28u) == 0;
    __uint64_t v12 = AVE_GetCurrTime();
    int64x2_t v13 = AVE_Log_GetLevelStr(6);
    if (!v11)
    {
      printf("%lld %d AVE %s: %s Exit %d %d %d\n", v12, 40, v13, "AVE_USL_Drv_Create", a1, a2, -1003);
      __uint64_t v12 = AVE_GetCurrTime();
      int64x2_t v13 = AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s Exit %d %d %d", v12, 40, v13, "AVE_USL_Drv_Create", a1, a2, -1003);
  }
  return 4294966293;
}

void sub_1BA75A7A0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9F01B0](v1, 0x10A0C40A49DBD8BLL);
  _Unwind_Resume(a1);
}

uint64_t AVE_USL_Drv_GetDevID(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 188156);
  }
  return result;
}

uint64_t AVE_USL_Drv_GetClientID(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 188160);
  }
  return result;
}

uint64_t AVE_USL_Drv_Destroy(const void ***a1)
{
  uint64_t v33 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  memset(v30, 0, sizeof(v30));
  if (AVE_Log_CheckLevel(0x28u, 6))
  {
    int v2 = AVE_Log_CheckConsole(0x28u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", CurrTime, 40, LevelStr, "AVE_USL_Drv_Destroy", a1);
      __uint64_t v5 = AVE_GetCurrTime();
      __uint64_t v25 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 40, v25, "AVE_USL_Drv_Destroy", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", CurrTime, 40, LevelStr, "AVE_USL_Drv_Destroy", a1);
    }
  }
  if (a1)
  {
    AppleAVEVA_CleanMem((uint64_t)a1);
    if (*a1)
    {
      *(void *)&long long v31 = *((unsigned int *)a1 + 47040);
      DWORD2(v32) = 118000;
      uint64_t v33 = (uint64_t)AVE_GetCurrTime() / 1000;
      uint64_t v6 = AVE_DAL::UCClose(*a1, &v31, v30);
      if (v6)
      {
        uint64_t v7 = v6;
        if (!AVE_Log_CheckLevel(0x28u, 4))
        {
LABEL_27:
          free(a1);
          goto LABEL_28;
        }
        int v8 = AVE_Log_CheckConsole(0x28u);
        __uint64_t v9 = AVE_GetCurrTime();
        BOOL v10 = AVE_Log_GetLevelStr(4);
        if (v8)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to close client %d\n", v9, 40, v10, "AVE_USL_Drv_Destroy", 468, "ret == 0", v7);
          __uint64_t v11 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to close client %d", v11);
          goto LABEL_27;
        }
        uint64_t v29 = v7;
        uint64_t v28 = 468;
        int v26 = v10;
        __uint64_t v19 = "%lld %d AVE %s: %s:%d %s | fail to close client %d";
LABEL_26:
        syslog(3, v19, v9, 40, v26, "AVE_USL_Drv_Destroy", v28, "ret == 0", v29);
        goto LABEL_27;
      }
      uint64_t v15 = AVE_DAL::UCDestroy((AVE_DAL *)*a1);
      if (v15)
      {
        uint64_t v7 = v15;
        if (!AVE_Log_CheckLevel(0x28u, 4)) {
          goto LABEL_27;
        }
        int v16 = AVE_Log_CheckConsole(0x28u);
        __uint64_t v9 = AVE_GetCurrTime();
        uint64_t v17 = AVE_Log_GetLevelStr(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to close driver %d\n", v9, 40, v17, "AVE_USL_Drv_Destroy", 472, "ret == 0", v7);
          __uint64_t v18 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to close driver %d", v18);
          goto LABEL_27;
        }
        uint64_t v29 = v7;
        uint64_t v28 = 472;
        int v26 = v17;
        __uint64_t v19 = "%lld %d AVE %s: %s:%d %s | fail to close driver %d";
        goto LABEL_26;
      }
      if (*a1)
      {
        AVE_DAL::~AVE_DAL((AVE_DAL *)*a1);
        MEMORY[0x1BA9F01B0]();
      }
    }
    uint64_t v7 = 0;
    goto LABEL_27;
  }
  if (AVE_Log_CheckLevel(0x28u, 4))
  {
    int v12 = AVE_Log_CheckConsole(0x28u);
    __uint64_t v13 = AVE_GetCurrTime();
    int64x2_t v14 = AVE_Log_GetLevelStr(4);
    if (v12)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p\n", v13, 40, v14, "AVE_USL_Drv_Destroy", 453, "pDrv != __null", 0);
      __uint64_t v13 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p", v13);
  }
  uint64_t v7 = 4294966295;
LABEL_28:
  if (AVE_Log_CheckLevel(0x28u, 6))
  {
    int v20 = AVE_Log_CheckConsole(0x28u);
    __uint64_t v21 = AVE_GetCurrTime();
    int v22 = AVE_Log_GetLevelStr(6);
    if (v20)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v21, 40, v22, "AVE_USL_Drv_Destroy", a1, v7);
      __uint64_t v23 = AVE_GetCurrTime();
      __uint64_t v27 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v23, 40, v27, "AVE_USL_Drv_Destroy", a1, v7);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v21, 40, v22, "AVE_USL_Drv_Destroy", a1, v7);
    }
  }
  return v7;
}

uint64_t AppleAVEVA_CleanMem(uint64_t a1)
{
  int v2 = (void *)(a1 + 188056);
  uint64_t v3 = *(H264VideoEncoderFrameReceiver **)(a1 + 188056);
  if (v3)
  {
    DestroyH264VideoEncoderFrameReceiver(v3, (_opaque_pthread_attr_t *)(a1 + 188080), (_opaque_pthread_t **)(a1 + 188144));
    *int v2 = 0;
    *(unsigned char *)(a1 + 18702) = 0;
  }
  int v4 = (Connection *)v2[1];
  if (v4)
  {
    Connection::~Connection(v4);
    MEMORY[0x1BA9F01B0]();
    v2[1] = 0;
  }
  __uint64_t v5 = (Connection *)v2[2];
  if (v5)
  {
    Connection::~Connection(v5);
    MEMORY[0x1BA9F01B0]();
    v2[2] = 0;
  }
  AVE_USL_DestroyDataSurfaces(a1 + 72);

  return AVE_USL_DestroyInSurfaces((uint64_t *)(a1 + 64));
}

uint64_t AVE_USL_Drv_Prepare()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  int v109 = -1;
  if (AVE_Log_CheckLevel(0x28u, 7))
  {
    int v6 = AVE_Log_CheckConsole(0x28u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v6)
    {
      printf("%lld %d AVE %s: ENTER AVE_USL_Drv_Prepare.\n", CurrTime, 40, LevelStr);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: ENTER AVE_USL_Drv_Prepare.", CurrTime, 40, LevelStr);
  }
  if (!v5)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v14 = AVE_Log_CheckConsole(3u);
      __uint64_t v15 = AVE_GetCurrTime();
      int v16 = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: AVE_USL_Drv_Prepare, Null pointer for driver data.\n", v15, 3, v16, "AVE_USL_Drv_Prepare", 502, "pDriverInstance");
        __uint64_t v15 = AVE_GetCurrTime();
        int v16 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: AVE_USL_Drv_Prepare, Null pointer for driver data.", v15, 3, v16, "AVE_USL_Drv_Prepare", 502, "pDriverInstance");
    }
    goto LABEL_43;
  }
  if (!v4)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v17 = AVE_Log_CheckConsole(3u);
      __uint64_t v18 = AVE_GetCurrTime();
      __uint64_t v19 = AVE_Log_GetLevelStr(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for AppleAVEVA_InitSettings.\n", v18, 3, v19, "AVE_USL_Drv_Prepare", 503, "pInitSettings");
        __uint64_t v18 = AVE_GetCurrTime();
        __uint64_t v19 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for AppleAVEVA_InitSettings.", v18, 3, v19, "AVE_USL_Drv_Prepare", 503, "pInitSettings");
    }
LABEL_43:
    uint64_t v29 = 4294966295;
    goto LABEL_44;
  }
  if (!*(void *)v4)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v20 = AVE_Log_CheckConsole(3u);
      __uint64_t v21 = AVE_GetCurrTime();
      int v22 = AVE_Log_GetLevelStr(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for pClientParams.\n", v21, 3, v22, "AVE_USL_Drv_Prepare", 505, "pInitSettings->pClientParams");
        __uint64_t v21 = AVE_GetCurrTime();
        int v22 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for pClientParams.", v21, 3, v22, "AVE_USL_Drv_Prepare", 505, "pInitSettings->pClientParams");
    }
    goto LABEL_150;
  }
  if (!*(void *)(v4 + 8))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v23 = AVE_Log_CheckConsole(3u);
      __uint64_t v24 = AVE_GetCurrTime();
      __uint64_t v25 = AVE_Log_GetLevelStr(4);
      if (v23)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for pVideoParams.\n", v24, 3, v25, "AVE_USL_Drv_Prepare", 506, "pInitSettings->pVideoParams");
        __uint64_t v24 = AVE_GetCurrTime();
        __uint64_t v25 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for pVideoParams.", v24, 3, v25, "AVE_USL_Drv_Prepare", 506, "pInitSettings->pVideoParams");
    }
    goto LABEL_150;
  }
  uint64_t v9 = *(void *)(v4 + 16);
  if (!v9)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v26 = AVE_Log_CheckConsole(3u);
      __uint64_t v27 = AVE_GetCurrTime();
      uint64_t v28 = AVE_Log_GetLevelStr(4);
      if (v26)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for pVideoParamsDriver.\n", v27, 3, v28, "AVE_USL_Drv_Prepare", 507, "pInitSettings->pVideoParamsDriver");
        __uint64_t v27 = AVE_GetCurrTime();
        uint64_t v28 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for pVideoParamsDriver.", v27, 3, v28, "AVE_USL_Drv_Prepare", 507, "pInitSettings->pVideoParamsDriver");
    }
    goto LABEL_150;
  }
  if (!*(void *)(v4 + 24))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v31 = AVE_Log_CheckConsole(3u);
      __uint64_t v32 = AVE_GetCurrTime();
      uint64_t v33 = AVE_Log_GetLevelStr(4);
      if (v31)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for pRCParams.\n", v32, 3, v33, "AVE_USL_Drv_Prepare", 508, "pInitSettings->pRCParams");
        __uint64_t v32 = AVE_GetCurrTime();
        uint64_t v33 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for pRCParams.", v32, 3, v33, "AVE_USL_Drv_Prepare", 508, "pInitSettings->pRCParams");
    }
    goto LABEL_150;
  }
  int v10 = *(_DWORD *)(v9 + 120);
  if (v10 == 1)
  {
    if (!*(void *)(v4 + 80))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v44 = AVE_Log_CheckConsole(3u);
        __uint64_t v45 = AVE_GetCurrTime();
        uint64_t v46 = AVE_Log_GetLevelStr(4);
        if (v44)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for VPSHevcParams.\n", v45, 3, v46, "AVE_USL_Drv_Prepare", 522, "pInitSettings->VPSHevcParams");
          __uint64_t v45 = AVE_GetCurrTime();
          uint64_t v46 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for VPSHevcParams.", v45, 3, v46, "AVE_USL_Drv_Prepare", 522, "pInitSettings->VPSHevcParams");
      }
      goto LABEL_150;
    }
    if (!*(void *)(v4 + 88))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v50 = AVE_Log_CheckConsole(3u);
        __uint64_t v51 = AVE_GetCurrTime();
        int v52 = AVE_Log_GetLevelStr(4);
        if (v50)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for SPSHevcParams.\n", v51, 3, v52, "AVE_USL_Drv_Prepare", 523, "pInitSettings->psaHEVC_SPS[0]");
          __uint64_t v51 = AVE_GetCurrTime();
          int v52 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for SPSHevcParams.", v51, 3, v52, "AVE_USL_Drv_Prepare", 523, "pInitSettings->psaHEVC_SPS[0]");
      }
      goto LABEL_150;
    }
    if (!*(void *)(v4 + 104))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v53 = AVE_Log_CheckConsole(3u);
        __uint64_t v54 = AVE_GetCurrTime();
        uint64_t v55 = AVE_Log_GetLevelStr(4);
        if (v53)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for PPSHevcParams.\n", v54, 3, v55, "AVE_USL_Drv_Prepare", 524, "pInitSettings->psaHEVC_PPS[0]");
          __uint64_t v54 = AVE_GetCurrTime();
          uint64_t v55 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for PPSHevcParams.", v54, 3, v55, "AVE_USL_Drv_Prepare", 524, "pInitSettings->psaHEVC_PPS[0]");
      }
      goto LABEL_150;
    }
    if (!*(void *)(v4 + 120))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v56 = AVE_Log_CheckConsole(3u);
        __uint64_t v57 = AVE_GetCurrTime();
        long long v58 = AVE_Log_GetLevelStr(4);
        if (v56)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for SHHevcParams.\n", v57, 3, v58, "AVE_USL_Drv_Prepare", 525, "pInitSettings->SHHevcParams");
          __uint64_t v57 = AVE_GetCurrTime();
          long long v58 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for SHHevcParams.", v57, 3, v58, "AVE_USL_Drv_Prepare", 525, "pInitSettings->SHHevcParams");
      }
      goto LABEL_150;
    }
    if (!*(void *)(v4 + 128))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v59 = AVE_Log_CheckConsole(3u);
        __uint64_t v60 = AVE_GetCurrTime();
        __uint64_t v61 = AVE_Log_GetLevelStr(4);
        if (v59)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for RPSHevcParams.\n", v60, 3, v61, "AVE_USL_Drv_Prepare", 526, "pInitSettings->RPSHevcParams");
          __uint64_t v60 = AVE_GetCurrTime();
          __uint64_t v61 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for RPSHevcParams.", v60, 3, v61, "AVE_USL_Drv_Prepare", 526, "pInitSettings->RPSHevcParams");
      }
      goto LABEL_150;
    }
  }
  else
  {
    if (v10)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v38 = AVE_Log_CheckConsole(3u);
        __uint64_t v39 = AVE_GetCurrTime();
        __uint64_t v40 = AVE_Log_GetLevelStr(4);
        if (v38)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, codectype not recognized = %d\n", v39, 3, v40, "AVE_USL_Drv_Prepare", 531, "false", *(_DWORD *)(*(void *)(v4 + 16) + 120));
          __uint64_t v39 = AVE_GetCurrTime();
          __uint64_t v40 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, codectype not recognized = %d", v39, 3, v40, "AVE_USL_Drv_Prepare", 531, "false", *(_DWORD *)(*(void *)(v4 + 16) + 120));
      }
      goto LABEL_150;
    }
    if (!*(void *)(v4 + 56))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v41 = AVE_Log_CheckConsole(3u);
        __uint64_t v42 = AVE_GetCurrTime();
        uint64_t v43 = AVE_Log_GetLevelStr(4);
        if (v41)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for SPSParams.\n", v42, 3, v43, "AVE_USL_Drv_Prepare", 514, "pInitSettings->SPSParams");
          __uint64_t v42 = AVE_GetCurrTime();
          uint64_t v43 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for SPSParams.", v42, 3, v43, "AVE_USL_Drv_Prepare", 514, "pInitSettings->SPSParams");
      }
      goto LABEL_150;
    }
    if (!*(void *)(v4 + 64))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v47 = AVE_Log_CheckConsole(3u);
        __uint64_t v48 = AVE_GetCurrTime();
        uint64_t v49 = AVE_Log_GetLevelStr(4);
        if (v47)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for PPSParams.\n", v48, 3, v49, "AVE_USL_Drv_Prepare", 515, "pInitSettings->PPSParams");
          __uint64_t v48 = AVE_GetCurrTime();
          uint64_t v49 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for PPSParams.", v48, 3, v49, "AVE_USL_Drv_Prepare", 515, "pInitSettings->PPSParams");
      }
      goto LABEL_150;
    }
    if (!*(void *)(v4 + 72))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v11 = AVE_Log_CheckConsole(3u);
        __uint64_t v12 = AVE_GetCurrTime();
        __uint64_t v13 = AVE_Log_GetLevelStr(4);
        if (v11)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for SHParams.\n", v12, 3, v13, "AVE_USL_Drv_Prepare", 516, "pInitSettings->SHParams");
          __uint64_t v12 = AVE_GetCurrTime();
          __uint64_t v13 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for SHParams.", v12, 3, v13, "AVE_USL_Drv_Prepare", 516, "pInitSettings->SHParams");
      }
LABEL_150:
      uint64_t v29 = 4294966295;
      goto LABEL_151;
    }
  }
  *(void *)(v5 + 1800) = **(void **)v4;
  memcpy((void *)(v5 + 1808), *(const void **)(v4 + 8), 0x4178uLL);
  memcpy((void *)(v5 + 18568), *(const void **)(v4 + 16), 0x6C0uLL);
  memcpy((void *)(v5 + 120), *(const void **)(v4 + 24), 0x690uLL);
  if ((*(_DWORD *)(v5 + 188164) & 0xFFFFFFFE) != 2)
  {
    int v34 = *(_DWORD *)(*(void *)(v4 + 16) + 120);
    if (v34 == 1)
    {
      memcpy((void *)(v5 + 25008), *(const void **)(v4 + 80), 0x140E8uLL);
      memcpy((void *)(v5 + 107160), *(const void **)(v4 + 88), 0x1EF4uLL);
      memcpy((void *)(v5 + 123008), *(const void **)(v4 + 104), 0x25A4uLL);
      memcpy((void *)(v5 + 115084), *(const void **)(v4 + 96), 0x1EF4uLL);
      memcpy((void *)(v5 + 132644), *(const void **)(v4 + 112), 0x25A4uLL);
      memcpy((void *)(v5 + 142280), *(const void **)(v4 + 120), 0x54F8uLL);
      int v35 = (void *)(v5 + 164032);
      __uint64_t v36 = *(const void **)(v4 + 128);
      size_t v37 = 24024;
    }
    else
    {
      if (v34)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v69 = AVE_Log_CheckConsole(3u);
          __uint64_t v70 = AVE_GetCurrTime();
          int v71 = AVE_Log_GetLevelStr(4);
          if (v69)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, codectype not recognized = %d\n", v70, 3, v71, "AVE_USL_Drv_Prepare", 569, "false", *(_DWORD *)(*(void *)(v4 + 16) + 120));
            __uint64_t v70 = AVE_GetCurrTime();
            int v71 = AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, codectype not recognized = %d", v70, 3, v71, "AVE_USL_Drv_Prepare", 569, "false", *(_DWORD *)(*(void *)(v4 + 16) + 120));
        }
        goto LABEL_150;
      }
      memcpy((void *)(v5 + 20296), *(const void **)(v4 + 56), 0x6B8uLL);
      memcpy((void *)(v5 + 22016), *(const void **)(v4 + 64), 0x184uLL);
      int v35 = (void *)(v5 + 22404);
      __uint64_t v36 = *(const void **)(v4 + 72);
      size_t v37 = 2604;
    }
    memcpy(v35, v36, v37);
  }
  *(void *)(v5 + 188184) = *(void *)(v4 + 48);
  if (!*(unsigned char *)(v5 + 18702))
  {
    memset(v112, 0, 224);
    *(_OWORD *)int v110 = 0u;
    long long v111 = 0u;
    operator new();
  }
  v110[0] = 0;
  AVE_DAL::Alloc(*(AVE_DAL **)v5, 67360, v110);
  AVE_DAL::Addr2Idx(*(AVE_DAL **)v5, (const void *)v110[0], &v109);
  unint64_t v62 = v110[0];
  if (v110[0])
  {
    bzero((void *)(v110[0] + 8), 0x10718uLL);
    *(_DWORD *)unint64_t v62 = v109;
    *(_DWORD *)(v62 + 4) = 4;
    *(_DWORD *)(v62 + 160) = *(_DWORD *)(v5 + 12);
    *(void *)(v62 + 27672) = *(void *)(v4 + 136);
    *(unsigned char *)(v62 + 8) = *(void *)(v5 + 188168) != 0;
    *(_DWORD *)(v62 + 12) = *(_DWORD *)(v5 + 188176);
    LODWORD(v110[0]) = v109;
    if (Connection::writePacketBlock(*(void *)(v5 + 188072), (long long *)v110))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        BOOL v63 = AVE_Log_CheckConsole(3u) == 0;
        __uint64_t v64 = AVE_GetCurrTime();
        unsigned int v65 = AVE_Log_GetLevelStr(4);
        if (!v63)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread\n", v64, 3, v65, "AVE_USL_Drv_Prepare", 680, "res == 0");
          __uint64_t v64 = AVE_GetCurrTime();
          unsigned int v65 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread", v64, 3, v65, "AVE_USL_Drv_Prepare", 680, "res == 0");
      }
LABEL_132:
      uint64_t v29 = 4294966296;
LABEL_44:
      v110[0] = *(void *)(v4 + 136);
      AVE_USL_Drv_Stop(v5, (uint64_t *)v110, 1);
      uint64_t v30 = *(void *)(v4 + 16);
      if (v30) {
        *(unsigned char *)(v30 + 134) = 0;
      }
      goto LABEL_151;
    }
    bzero(&v110[1], 0x2DFE0uLL);
    long long v107 = 0u;
    long long v108 = 0u;
    v110[0] = *(unsigned int *)(v5 + 188160);
    unsigned int v77 = "";
    if (v2) {
      LOBYTE(v77) = v2;
    }
    AVE_SNPrintf((char *)&v112[2], 128, "%s", v72, v73, v74, v75, v76, (char)v77);
    int v114 = v109;
    if (*(unsigned char *)(v5 + 18777)) {
      int v78 = 2;
    }
    else {
      int v78 = 1;
    }
    *(_OWORD *)&v112[39] = *(_OWORD *)(v5 + 20160);
    *(_OWORD *)&v112[43] = *(_OWORD *)(v5 + 20176);
    *(_OWORD *)&v112[47] = *(_OWORD *)(v5 + 20192);
    *(_OWORD *)&v112[35] = *(_OWORD *)(v5 + 20144);
    long long v79 = *(_OWORD *)(v5 + 20212);
    long long v80 = *(_OWORD *)(v5 + 20228);
    long long v81 = *(_OWORD *)(v5 + 20260);
    *(_OWORD *)&v112[77] = *(_OWORD *)(v5 + 20244);
    *(_OWORD *)&v112[81] = v81;
    *(_OWORD *)&v112[69] = v79;
    *(_OWORD *)&v112[73] = v80;
    int v82 = *(_DWORD *)(v5 + 20276);
    v112[51] = *(_DWORD *)(v5 + 20208);
    v112[85] = v82;
    v112[34] = v78;
    DWORD2(v111) = 118000;
    *(void *)int v112 = (uint64_t)AVE_GetCurrTime() / 1000;
    memcpy(v113, (const void *)(v5 + 120), sizeof(v113));
    long long v107 = 0u;
    long long v108 = 0u;
    uint64_t v29 = AVE_DAL::UCPrepare(*(const void ***)v5, v110, &v107);
    if (v29)
    {
      Connection::dropLastPacketBlock(*(pthread_mutex_t **)(v5 + 188072));
      if (AVE_Log_CheckLevel(0x28u, 4))
      {
        BOOL v83 = AVE_Log_CheckConsole(0x28u) == 0;
        __uint64_t v84 = AVE_GetCurrTime();
        uint64_t v85 = AVE_Log_GetLevelStr(4);
        if (!v83)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to prepare %d\n", v84, 40, v85, "AVE_USL_Drv_Prepare", 710, "ret == 0", v29);
          __uint64_t v84 = AVE_GetCurrTime();
          uint64_t v85 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to prepare %d", v84, 40, v85, "AVE_USL_Drv_Prepare", 710, "ret == 0", v29);
      }
    }
    else
    {
      uint64_t v86 = 0;
      uint64_t v87 = *(void *)(v4 + 16) + 1576;
      char v88 = 1;
      do
      {
        uint64_t v89 = 0;
        uint64_t v90 = 17 * v86;
        char v91 = v88;
        uint64_t v92 = v5 + 20144 + 68 * v86;
        do
        {
          *(_DWORD *)(v87 + 4 * v90 + v89) = *(_DWORD *)(v92 + v89);
          v89 += 4;
        }
        while (v89 != 68);
        char v88 = 0;
        uint64_t v86 = 1;
      }
      while ((v91 & 1) != 0);
      PacketBlocuint64_t k = Connection::readPacketBlock(*(void *)(v5 + 188064), (uint64_t)v110, 0x1D4C0u);
      if (LODWORD(v110[0]) != v109)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          BOOL v97 = AVE_Log_CheckConsole(3u) == 0;
          __uint64_t v98 = AVE_GetCurrTime();
          int v99 = AVE_Log_GetLevelStr(4);
          if (!v97)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: status.counter != counter.\n", v98, 3, v99, "AVE_USL_Drv_Prepare", 730, "status.counter == counter");
            __uint64_t v98 = AVE_GetCurrTime();
            int v99 = AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: status.counter != counter.", v98, 3, v99, "AVE_USL_Drv_Prepare", 730, "status.counter == counter");
        }
        goto LABEL_132;
      }
      if (v112[0])
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          BOOL v94 = AVE_Log_CheckConsole(3u) == 0;
          __uint64_t v95 = AVE_GetCurrTime();
          unsigned int v96 = AVE_Log_GetLevelStr(4);
          if (!v94)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: errorCode = 0x%08x.\n", v95, 3, v96, "AVE_USL_Drv_Prepare", 731, "status.errorCode == 0", v112[0]);
            __uint64_t v95 = AVE_GetCurrTime();
            unsigned int v96 = AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: errorCode = 0x%08x.", v95, 3, v96, "AVE_USL_Drv_Prepare", 731, "status.errorCode == 0", v112[0]);
        }
        goto LABEL_132;
      }
      if (PacketBlock)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          BOOL v104 = AVE_Log_CheckConsole(3u) == 0;
          __uint64_t v105 = AVE_GetCurrTime();
          int v106 = AVE_Log_GetLevelStr(4);
          if (!v104)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread\n", v105, 3, v106, "AVE_USL_Drv_Prepare", 732, "res == 0");
            __uint64_t v105 = AVE_GetCurrTime();
            int v106 = AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread", v105, 3, v106, "AVE_USL_Drv_Prepare", 732, "res == 0");
        }
        goto LABEL_132;
      }
      *(unsigned char *)(v5 + 9) = 1;
    }
    if (v29 == -1003 || !v29) {
      goto LABEL_151;
    }
    goto LABEL_44;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    BOOL v66 = AVE_Log_CheckConsole(3u) == 0;
    __uint64_t v67 = AVE_GetCurrTime();
    int v68 = AVE_Log_GetLevelStr(4);
    if (!v66)
    {
      printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.\n", v67, 3, v68, "AVE_USL_Drv_Prepare", 658, "Frame");
      __uint64_t v67 = AVE_GetCurrTime();
      int v68 = AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.", v67, 3, v68, "AVE_USL_Drv_Prepare", 658, "Frame");
  }
  uint64_t v29 = 4294966293;
LABEL_151:
  if (AVE_Log_CheckLevel(0x28u, 7))
  {
    BOOL v100 = AVE_Log_CheckConsole(0x28u) == 0;
    __uint64_t v101 = AVE_GetCurrTime();
    unsigned int v102 = AVE_Log_GetLevelStr(7);
    if (!v100)
    {
      printf("%lld %d AVE %s: EXIT AVE_USL_Drv_Prepare F %d %d\n", v101, 40, v102, *(_DWORD *)(v5 + 12), v29);
      __uint64_t v101 = AVE_GetCurrTime();
      unsigned int v102 = AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: EXIT AVE_USL_Drv_Prepare F %d %d", v101, 40, v102, *(_DWORD *)(v5 + 12), v29);
  }
  return v29;
}

void sub_1BA75C8BC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9F01B0](v1, 0x1020C40ADC61684);
  _Unwind_Resume(a1);
}

void Connection::Connection(Connection *this, int a2)
{
  pthread_mutex_init((pthread_mutex_t *)this, 0);
  pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0);
  pthread_cond_init((pthread_cond_t *)((char *)this + 112), 0);
  if ((a2 - 129) >= 0xFFFFFF80) {
    int v4 = a2;
  }
  else {
    int v4 = 128;
  }
  *((_DWORD *)this + 48) = v4;
  *((_DWORD *)this + 49) = v4;
  *((void *)this + 25) = 0;
  *((_DWORD *)this + 52) = 0;
  operator new[]();
}

uint64_t Connection::dropLastPacketBlock(pthread_mutex_t *this)
{
  pthread_mutex_lock(this);
  int v2 = *(_DWORD *)this[3].__opaque;
  if (v2)
  {
    *(_DWORD *)this[3].__opaque = v2 - 1;
    int sig_high = *(_DWORD *)&this[3].__opaque[8];
    if (!sig_high) {
      int sig_high = HIDWORD(this[3].__sig);
    }
    *(_DWORD *)&this[3].__opaque[8] = sig_high - 1;
  }
  pthread_mutex_unlock(this);
  return 0;
}

uint64_t Connection::readPacketBlock(uint64_t a1, uint64_t a2, unsigned int a3)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  while (!*(_DWORD *)(a1 + 200))
  {
    gettimeofday((timeval *)(a1 + 176), 0);
    uint64_t v6 = 1000000 * (a3 % 0x3E8) + 1000 * *(_DWORD *)(a1 + 184);
    *(void *)(a1 + 160) = *(void *)(a1 + 176) + a3 / 0x3E8uLL;
    *(void *)(a1 + 168) = v6;
    if (pthread_cond_timedwait((pthread_cond_t *)(a1 + 64), (pthread_mutex_t *)a1, (const timespec *)(a1 + 160)) == 60)
    {
      uint64_t v7 = 0xFFFFFFFFLL;
      goto LABEL_10;
    }
  }
  uint64_t v7 = 0;
  uint64_t v8 = *(void *)(a1 + 216) + 40 * *(unsigned int *)(a1 + 204);
  long long v9 = *(_OWORD *)v8;
  long long v10 = *(_OWORD *)(v8 + 16);
  *(void *)(a2 + 32) = *(void *)(v8 + 32);
  *(_OWORD *)a2 = v9;
  *(_OWORD *)(a2 + 16) = v10;
  int v12 = *(_DWORD *)(a1 + 200);
  int v11 = *(_DWORD *)(a1 + 204);
  unsigned int v13 = *(_DWORD *)(a1 + 196);
  if (v11 + 1 < v13) {
    int v14 = v11 + 1;
  }
  else {
    int v14 = 0;
  }
  *(_DWORD *)(a1 + 200) = v12 - 1;
  *(_DWORD *)(a1 + 204) = v14;
  if (v12 == v13)
  {
    pthread_cond_signal((pthread_cond_t *)(a1 + 112));
    uint64_t v7 = 0;
  }
LABEL_10:
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v7;
}

uint64_t AVE_USL_Drv_Stop(uint64_t a1, uint64_t *a2, int a3)
{
  int v52 = -1;
  if (AVE_Log_CheckLevel(0x28u, 7))
  {
    int v6 = AVE_Log_CheckConsole(0x28u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v6)
    {
      printf("%lld %d AVE %s: ENTER AVE_USL_Drv_Stop.\n", CurrTime, 40, LevelStr);
      __uint64_t v9 = AVE_GetCurrTime();
      uint64_t v43 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: ENTER AVE_USL_Drv_Stop.", v9, 40, v43);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: ENTER AVE_USL_Drv_Stop.", CurrTime, 40, LevelStr);
    }
  }
  if (a1)
  {
    uint64_t v51 = *a2;
    if (AVE_USL_Drv_Complete(a1, &v51) == -1004 && !*(unsigned char *)(a1 + 9))
    {
      uint64_t v23 = 4294966292;
    }
    else
    {
      unint64_t v47 = 0;
      AVE_DAL::Alloc(*(AVE_DAL **)a1, 67360, &v47);
      AVE_DAL::Addr2Idx(*(AVE_DAL **)a1, (const void *)v47, &v52);
      unint64_t v10 = v47;
      if (!v47)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v18 = AVE_Log_CheckConsole(3u);
          __uint64_t v19 = AVE_GetCurrTime();
          int v20 = AVE_Log_GetLevelStr(4);
          if (v18)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.\n", v19, 3, v20, "AVE_USL_Drv_Stop", 1185, "Frame");
            __uint64_t v21 = AVE_GetCurrTime();
            __uint64_t v45 = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.", v21, 3, v45, "AVE_USL_Drv_Stop", 1185, "Frame");
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.", v19, 3, v20, "AVE_USL_Drv_Stop", 1185, "Frame");
          }
        }
        uint64_t v23 = 4294966293;
        goto LABEL_34;
      }
      bzero((void *)(v47 + 8), 0x10718uLL);
      *(_DWORD *)unint64_t v10 = v52;
      *(_DWORD *)(v10 + 4) = 6;
      *(_DWORD *)(v10 + 160) = *(_DWORD *)(a1 + 12);
      *(void *)(v10 + 27672) = *a2;
      *(unsigned char *)(v10 + 8) = *(void *)(a1 + 188168) != 0;
      *(_DWORD *)(v10 + 12) = *(_DWORD *)(a1 + 188176);
      LODWORD(v47) = v52;
      if (Connection::writePacketBlock(*(void *)(a1 + 188072), (long long *)&v47))
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v11 = AVE_Log_CheckConsole(3u);
          __uint64_t v12 = AVE_GetCurrTime();
          unsigned int v13 = AVE_Log_GetLevelStr(4);
          if (v11)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread\n", v12, 3, v13, "AVE_USL_Drv_Stop", 1207, "res == 0");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread");
        }
      }
      else
      {
        uint64_t v50 = 0;
        long long v49 = 0u;
        long long v48 = 0u;
        memset(v46, 0, sizeof(v46));
        unint64_t v47 = *(unsigned int *)(a1 + 188160);
        LODWORD(v50) = v52;
        LODWORD(v49) = 118000;
        *((void *)&v49 + 1) = (uint64_t)AVE_GetCurrTime() / 1000;
        uint64_t v22 = AVE_DAL::UCStop(*(const void ***)a1, &v47, v46);
        if (v22)
        {
          uint64_t v23 = v22;
          uint64_t v24 = *(void *)(a1 + 188072);
          pthread_mutex_lock((pthread_mutex_t *)v24);
          int v25 = *(_DWORD *)(v24 + 200);
          if (v25)
          {
            *(_DWORD *)(v24 + 200) = v25 - 1;
            int v26 = *(_DWORD *)(v24 + 208);
            if (!v26) {
              int v26 = *(_DWORD *)(v24 + 196);
            }
            *(_DWORD *)(v24 + 208) = v26 - 1;
          }
          pthread_mutex_unlock((pthread_mutex_t *)v24);
          if (AVE_Log_CheckLevel(0x28u, 4))
          {
            int v27 = AVE_Log_CheckConsole(0x28u);
            __uint64_t v28 = AVE_GetCurrTime();
            uint64_t v29 = AVE_Log_GetLevelStr(4);
            if (v27)
            {
              printf("%lld %d AVE %s: %s:%d %s | fail to process %d\n", v28, 40, v29, "AVE_USL_Drv_Stop", 1224, "ret == 0", v23);
              __uint64_t v28 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to process %d", v28);
          }
          goto LABEL_34;
        }
        PacketBlocuint64_t k = Connection::readPacketBlock(*(void *)(a1 + 188064), (uint64_t)&v47, 0x1D4C0u);
        if (v47 == v52)
        {
          if (!PacketBlock)
          {
            uint64_t v23 = 0;
            goto LABEL_34;
          }
          if (AVE_Log_CheckLevel(3u, 4))
          {
            int v37 = AVE_Log_CheckConsole(3u);
            __uint64_t v38 = AVE_GetCurrTime();
            __uint64_t v39 = AVE_Log_GetLevelStr(4);
            if (v37)
            {
              printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread\n", v38, 3, v39, "AVE_USL_Drv_Stop", 1236, "res == 0");
              AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread");
          }
        }
        else if (AVE_Log_CheckLevel(3u, 4))
        {
          int v40 = AVE_Log_CheckConsole(3u);
          __uint64_t v41 = AVE_GetCurrTime();
          __uint64_t v42 = AVE_Log_GetLevelStr(4);
          if (v40)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder ERROR: status.counter != counter.\n", v41, 3, v42, "AVE_USL_Drv_Stop", 1235, "status.counter == counter");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder ERROR: status.counter != counter.");
        }
      }
      uint64_t v23 = 4294966296;
    }
LABEL_34:
    if (a3) {
      AppleAVEVA_CleanMem(a1);
    }
    *(_WORD *)(a1 + 8) = 0;
    goto LABEL_37;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    int v14 = AVE_Log_CheckConsole(3u);
    __uint64_t v15 = AVE_GetCurrTime();
    int v16 = AVE_Log_GetLevelStr(4);
    if (v14)
    {
      printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Stop, Null pointer for driver data.\n", v15, 3, v16, "AVE_USL_Drv_Stop", 1162, "pDriverInstance");
      __uint64_t v17 = AVE_GetCurrTime();
      int v44 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Stop, Null pointer for driver data.", v17, 3, v44, "AVE_USL_Drv_Stop", 1162, "pDriverInstance");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Stop, Null pointer for driver data.", v15, 3, v16, "AVE_USL_Drv_Stop", 1162, "pDriverInstance");
    }
  }
  uint64_t v23 = 4294966295;
LABEL_37:
  if (AVE_Log_CheckLevel(0x28u, 7))
  {
    int v30 = AVE_Log_CheckConsole(0x28u);
    __uint64_t v31 = AVE_GetCurrTime();
    __uint64_t v32 = AVE_Log_GetLevelStr(7);
    if (v30)
    {
      if (a1) {
        int v33 = *(_DWORD *)(a1 + 12);
      }
      else {
        int v33 = 0;
      }
      printf("%lld %d AVE %s: EXIT AVE_USL_Drv_Stop F %d %d\n", v31, 40, v32, v33, v23);
      __uint64_t v31 = AVE_GetCurrTime();
      __uint64_t v32 = AVE_Log_GetLevelStr(7);
      if (a1) {
        goto LABEL_45;
      }
    }
    else if (a1)
    {
LABEL_45:
      int v34 = *(_DWORD *)(a1 + 12);
      goto LABEL_46;
    }
    int v34 = 0;
LABEL_46:
    syslog(3, "%lld %d AVE %s: EXIT AVE_USL_Drv_Stop F %d %d", v31, 40, v32, v34, v23);
  }
  return v23;
}

uint64_t AVE_USL_Drv_Start(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int *a10, void *a11)
{
  uint64_t v11 = MEMORY[0x1F4188790]();
  unint64_t v13 = v12;
  char v15 = v14;
  unint64_t v17 = v16;
  unint64_t v19 = v18;
  unint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v26 = v11;
  uint64_t v178 = *MEMORY[0x1E4F143B8];
  int v160 = -1;
  bzero(v161, 0x2DFE8uLL);
  bzero(v157, 0x2D0uLL);
  if (AVE_Log_CheckLevel(0x28u, 7))
  {
    int v27 = AVE_Log_CheckConsole(0x28u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v27)
    {
      printf("%lld %d AVE %s: ENTER AVE_USL_Drv_Start.\n", CurrTime, 40, LevelStr);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: ENTER AVE_USL_Drv_Start.", CurrTime, 40, LevelStr);
  }
  if (!v26)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v36 = AVE_Log_CheckConsole(3u);
      __uint64_t v37 = AVE_GetCurrTime();
      __uint64_t v38 = AVE_Log_GetLevelStr(4);
      if (v36)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for driver data.\n", v37, 3, v38, "AVE_USL_Drv_Start", 792, "pDriverInstance");
        __uint64_t v37 = AVE_GetCurrTime();
        __uint64_t v38 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for driver data.", v37, 3, v38, "AVE_USL_Drv_Start", 792, "pDriverInstance");
    }
    goto LABEL_157;
  }
  if (!v25)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v39 = AVE_Log_CheckConsole(3u);
      __uint64_t v40 = AVE_GetCurrTime();
      __uint64_t v41 = AVE_Log_GetLevelStr(4);
      if (v39)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for AppleAVEVA_InitSettings.\n", v40, 3, v41, "AVE_USL_Drv_Start", 793, "pInitSettings");
        __uint64_t v40 = AVE_GetCurrTime();
        __uint64_t v41 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for AppleAVEVA_InitSettings.", v40, 3, v41, "AVE_USL_Drv_Start", 793, "pInitSettings");
    }
    goto LABEL_157;
  }
  int v30 = *(void **)v25;
  if (!*(void *)v25)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v42 = AVE_Log_CheckConsole(3u);
      __uint64_t v43 = AVE_GetCurrTime();
      int v44 = AVE_Log_GetLevelStr(4);
      if (v42)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pClientParams.\n", v43, 3, v44, "AVE_USL_Drv_Start", 795, "pInitSettings->pClientParams");
        __uint64_t v43 = AVE_GetCurrTime();
        int v44 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pClientParams.", v43, 3, v44, "AVE_USL_Drv_Start", 795, "pInitSettings->pClientParams");
    }
    goto LABEL_157;
  }
  if (!*(void *)(v25 + 8))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v45 = AVE_Log_CheckConsole(3u);
      __uint64_t v46 = AVE_GetCurrTime();
      unint64_t v47 = AVE_Log_GetLevelStr(4);
      if (v45)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pVideoParams.\n", v46, 3, v47, "AVE_USL_Drv_Start", 796, "pInitSettings->pVideoParams");
        __uint64_t v46 = AVE_GetCurrTime();
        unint64_t v47 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pVideoParams.", v46, 3, v47, "AVE_USL_Drv_Start", 796, "pInitSettings->pVideoParams");
    }
    goto LABEL_157;
  }
  uint64_t v31 = *(void *)(v25 + 16);
  if (!v31)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v48 = AVE_Log_CheckConsole(3u);
      __uint64_t v49 = AVE_GetCurrTime();
      uint64_t v50 = AVE_Log_GetLevelStr(4);
      if (v48)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pVideoParamsDriver.\n", v49, 3, v50, "AVE_USL_Drv_Start", 797, "pInitSettings->pVideoParamsDriver");
        __uint64_t v49 = AVE_GetCurrTime();
        uint64_t v50 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pVideoParamsDriver.", v49, 3, v50, "AVE_USL_Drv_Start", 797, "pInitSettings->pVideoParamsDriver");
    }
    goto LABEL_157;
  }
  if (!*(void *)(v25 + 24))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v51 = AVE_Log_CheckConsole(3u);
      __uint64_t v52 = AVE_GetCurrTime();
      int v53 = AVE_Log_GetLevelStr(4);
      if (v51)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pRCParams.\n", v52, 3, v53, "AVE_USL_Drv_Start", 798, "pInitSettings->pRCParams");
        __uint64_t v52 = AVE_GetCurrTime();
        int v53 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pRCParams.", v52, 3, v53, "AVE_USL_Drv_Start", 798, "pInitSettings->pRCParams");
    }
    goto LABEL_157;
  }
  int v32 = *(_DWORD *)(v31 + 120);
  if (v32 == 1)
  {
    if (!*(void *)(v25 + 80))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v62 = AVE_Log_CheckConsole(3u);
        __uint64_t v63 = AVE_GetCurrTime();
        __uint64_t v64 = AVE_Log_GetLevelStr(4);
        if (v62)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for VPSHevcParams.\n", v63, 3, v64, "AVE_USL_Drv_Start", 812, "pInitSettings->VPSHevcParams");
          __uint64_t v63 = AVE_GetCurrTime();
          __uint64_t v64 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for VPSHevcParams.", v63, 3, v64, "AVE_USL_Drv_Start", 812, "pInitSettings->VPSHevcParams");
      }
      goto LABEL_157;
    }
    if (!*(void *)(v25 + 88))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v68 = AVE_Log_CheckConsole(3u);
        __uint64_t v69 = AVE_GetCurrTime();
        __uint64_t v70 = AVE_Log_GetLevelStr(4);
        if (v68)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SPSHevcParams.\n", v69, 3, v70, "AVE_USL_Drv_Start", 813, "pInitSettings->psaHEVC_SPS[0]");
          __uint64_t v69 = AVE_GetCurrTime();
          __uint64_t v70 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SPSHevcParams.", v69, 3, v70, "AVE_USL_Drv_Start", 813, "pInitSettings->psaHEVC_SPS[0]");
      }
      goto LABEL_157;
    }
    if (!*(void *)(v25 + 104))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v71 = AVE_Log_CheckConsole(3u);
        __uint64_t v72 = AVE_GetCurrTime();
        uint64_t v73 = AVE_Log_GetLevelStr(4);
        if (v71)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for PPSHevcParams.\n", v72, 3, v73, "AVE_USL_Drv_Start", 814, "pInitSettings->psaHEVC_PPS[0]");
          __uint64_t v72 = AVE_GetCurrTime();
          uint64_t v73 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for PPSHevcParams.", v72, 3, v73, "AVE_USL_Drv_Start", 814, "pInitSettings->psaHEVC_PPS[0]");
      }
      goto LABEL_157;
    }
    if (!*(void *)(v25 + 120))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v90 = AVE_Log_CheckConsole(3u);
        __uint64_t v91 = AVE_GetCurrTime();
        uint64_t v92 = AVE_Log_GetLevelStr(4);
        if (v90)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SHHevcParams.\n", v91, 3, v92, "AVE_USL_Drv_Start", 815, "pInitSettings->SHHevcParams");
          __uint64_t v91 = AVE_GetCurrTime();
          uint64_t v92 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SHHevcParams.", v91, 3, v92, "AVE_USL_Drv_Start", 815, "pInitSettings->SHHevcParams");
      }
      goto LABEL_157;
    }
    if (!*(void *)(v25 + 128))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v96 = AVE_Log_CheckConsole(3u);
        __uint64_t v97 = AVE_GetCurrTime();
        __uint64_t v98 = AVE_Log_GetLevelStr(4);
        if (v96)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for RPSHevcParams.\n", v97, 3, v98, "AVE_USL_Drv_Start", 816, "pInitSettings->RPSHevcParams");
          __uint64_t v97 = AVE_GetCurrTime();
          __uint64_t v98 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for RPSHevcParams.", v97, 3, v98, "AVE_USL_Drv_Start", 816, "pInitSettings->RPSHevcParams");
      }
      goto LABEL_157;
    }
  }
  else
  {
    if (v32)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v56 = AVE_Log_CheckConsole(3u);
        __uint64_t v57 = AVE_GetCurrTime();
        long long v58 = AVE_Log_GetLevelStr(4);
        if (v56)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, codec type not recognized = %d\n", v57, 3, v58, "AVE_USL_Drv_Start", 820, "false", *(_DWORD *)(*(void *)(v25 + 16) + 120));
          __uint64_t v57 = AVE_GetCurrTime();
          long long v58 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, codec type not recognized = %d", v57, 3, v58, "AVE_USL_Drv_Start", 820, "false", *(_DWORD *)(*(void *)(v25 + 16) + 120));
      }
      goto LABEL_157;
    }
    if (!*(void *)(v25 + 56))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v59 = AVE_Log_CheckConsole(3u);
        __uint64_t v60 = AVE_GetCurrTime();
        __uint64_t v61 = AVE_Log_GetLevelStr(4);
        if (v59)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SPSParams.\n", v60, 3, v61, "AVE_USL_Drv_Start", 804, "pInitSettings->SPSParams");
          __uint64_t v60 = AVE_GetCurrTime();
          __uint64_t v61 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SPSParams.", v60, 3, v61, "AVE_USL_Drv_Start", 804, "pInitSettings->SPSParams");
      }
      goto LABEL_157;
    }
    if (!*(void *)(v25 + 64))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v65 = AVE_Log_CheckConsole(3u);
        __uint64_t v66 = AVE_GetCurrTime();
        __uint64_t v67 = AVE_Log_GetLevelStr(4);
        if (v65)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for PPSParams.\n", v66, 3, v67, "AVE_USL_Drv_Start", 805, "pInitSettings->PPSParams");
          __uint64_t v66 = AVE_GetCurrTime();
          __uint64_t v67 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for PPSParams.", v66, 3, v67, "AVE_USL_Drv_Start", 805, "pInitSettings->PPSParams");
      }
      goto LABEL_157;
    }
    if (!*(void *)(v25 + 72))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v33 = AVE_Log_CheckConsole(3u);
        __uint64_t v34 = AVE_GetCurrTime();
        int v35 = AVE_Log_GetLevelStr(4);
        if (v33)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SHParams.\n", v34, 3, v35, "AVE_USL_Drv_Start", 806, "pInitSettings->SHParams");
          __uint64_t v34 = AVE_GetCurrTime();
          int v35 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SHParams.", v34, 3, v35, "AVE_USL_Drv_Start", 806, "pInitSettings->SHParams");
      }
LABEL_157:
      uint64_t v83 = 4294966295;
      goto LABEL_158;
    }
  }
  uint64_t v54 = v26 + 188056;
  *(void *)(v26 + 188168) = v13;
  *(void *)(v26 + 1800) = *v30;
  unint64_t v151 = v26 + 1808;
  memcpy((void *)(v26 + 1808), *(const void **)(v25 + 8), 0x4178uLL);
  unint64_t v150 = v26 + 18568;
  memcpy((void *)(v26 + 18568), *(const void **)(v25 + 16), 0x6C0uLL);
  memcpy((void *)(v26 + 120), *(const void **)(v25 + 24), 0x690uLL);
  int v55 = *(_DWORD *)(*(void *)(v25 + 16) + 120);
  if (v55 == 1)
  {
    uint64_t v152 = v26 + 188056;
    __src = (void *)(v26 + 120);
    uint64_t v155 = v25;
    memcpy((void *)(v26 + 25008), *(const void **)(v25 + 80), 0x140E8uLL);
    uint64_t v74 = 0;
    char v75 = 1;
    do
    {
      uint64_t v76 = v26;
      char v77 = v75;
      uint64_t v78 = v155 + 8 * v74;
      long long v79 = *(const void **)(v78 + 88);
      if (v79) {
        memcpy((void *)(v76 + 7924 * v74 + 107160), v79, 0x1EF4uLL);
      }
      long long v80 = *(const void **)(v78 + 104);
      uint64_t v26 = v76;
      if (v80) {
        memcpy((void *)(v76 + 9636 * v74 + 123008), v80, 0x25A4uLL);
      }
      char v75 = 0;
      uint64_t v74 = 1;
    }
    while ((v77 & 1) != 0);
    long long v81 = (void *)(v76 + 142280);
    uint64_t v25 = v155;
    memcpy(v81, *(const void **)(v155 + 120), 0x54F8uLL);
    memcpy((void *)(v26 + 164032), *(const void **)(v155 + 128), 0x5DD8uLL);
    uint64_t v54 = v152;
  }
  else
  {
    if (v55)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v87 = AVE_Log_CheckConsole(3u);
        __uint64_t v88 = AVE_GetCurrTime();
        uint64_t v89 = AVE_Log_GetLevelStr(4);
        if (v87)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, codec type not recognized = %d\n", v88, 3, v89, "AVE_USL_Drv_Start", 865, "false", *(_DWORD *)(*(void *)(v25 + 16) + 120));
          __uint64_t v88 = AVE_GetCurrTime();
          uint64_t v89 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, codec type not recognized = %d", v88, 3, v89, "AVE_USL_Drv_Start", 865, "false", *(_DWORD *)(*(void *)(v25 + 16) + 120));
      }
      goto LABEL_157;
    }
    __src = (void *)(v26 + 120);
    memcpy((void *)(v26 + 20296), *(const void **)(v25 + 56), 0x6B8uLL);
    memcpy((void *)(v26 + 22016), *(const void **)(v25 + 64), 0x184uLL);
    memcpy((void *)(v26 + 22404), *(const void **)(v25 + 72), 0xA2CuLL);
  }
  *(void *)(v54 + 128) = *(void *)(v25 + 48);
  AVE_USL_CalcSurfaceInfo(v26, (uint64_t)__src, v26 + 16);
  uint64_t v82 = AVE_USL_CreateInSurfaces((_DWORD *)(v26 + 16), *(_DWORD *)(v54 + 104), (AVE_USL_Surface **)(v26 + 64));
  if (v82)
  {
    uint64_t v83 = v82;
    if (AVE_Log_CheckLevel(0x28u, 4))
    {
      int v84 = AVE_Log_CheckConsole(0x28u);
      __uint64_t v85 = AVE_GetCurrTime();
      uint64_t v86 = AVE_Log_GetLevelStr(4);
      if (v84)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create surfaces %d %d\n", v85, 40, v86, "AVE_USL_Drv_Start", 876, "ret == 0", *(_DWORD *)(v54 + 104), v83);
        __uint64_t v85 = AVE_GetCurrTime();
        uint64_t v86 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create surfaces %d %d", v85, 40, v86, "AVE_USL_Drv_Start", 876, "ret == 0", *(_DWORD *)(v54 + 104), v83);
    }
    goto LABEL_158;
  }
  uint64_t v153 = v54;
  if (!*(unsigned char *)(v26 + 18702))
  {
    memset(v156, 0, 256);
    operator new();
  }
  memset(&v156[9], 0, 184);
  memset(&v156[5], 0, 32);
  v156[0] = *(void *)v26;
  *(int8x16_t *)&v156[1] = vextq_s8(*(int8x16_t *)(v54 + 8), *(int8x16_t *)(v54 + 8), 8uLL);
  void v156[3] = v21;
  v156[4] = v19;
  v156[9] = v17;
  if (v23)
  {
    long long v93 = v23[1];
    *(_OWORD *)&v156[5] = *v23;
    *(_OWORD *)&v156[7] = v93;
  }
  v156[10] = v26 + 1800;
  v156[11] = v151;
  v156[12] = v150;
  v156[13] = (unint64_t)__src;
  *(_OWORD *)&v156[14] = *(_OWORD *)(v25 + 32);
  int v94 = *(_DWORD *)(*(void *)(v25 + 16) + 120);
  if (v94 == 1)
  {
    uint64_t v95 = v26 + 18702;
    memset(&v156[16], 0, 24);
    v156[19] = v26 + 25008;
    v156[20] = v26 + 107160;
    v156[21] = v26 + 115084;
    v156[22] = v26 + 123008;
    v156[23] = v26 + 132644;
    v156[24] = v26 + 142280;
    v156[25] = v26 + 164032;
  }
  else
  {
    if (v94)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v106 = AVE_Log_CheckConsole(3u);
        __uint64_t v107 = AVE_GetCurrTime();
        long long v108 = AVE_Log_GetLevelStr(4);
        if (v106)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, codec type not recognized = %d\n", v107, 3, v108, "AVE_USL_Drv_Start", 1019, "false", *(_DWORD *)(*(void *)(v25 + 16) + 120));
          __uint64_t v107 = AVE_GetCurrTime();
          long long v108 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, codec type not recognized = %d", v107, 3, v108, "AVE_USL_Drv_Start", 1019, "false", *(_DWORD *)(*(void *)(v25 + 16) + 120));
      }
      goto LABEL_157;
    }
    uint64_t v95 = v26 + 18702;
    v156[16] = v26 + 20296;
    v156[17] = v26 + 22016;
    v156[18] = v26 + 22404;
  }
  LOBYTE(v156[26]) = v15;
  int v99 = *(_DWORD *)(v54 + 96);
  int v100 = *(_DWORD *)(v54 + 108);
  HIDWORD(v156[27]) = *(_DWORD *)(v54 + 104);
  LODWORD(v156[27]) = v99;
  HIDWORD(v156[26]) = v100;
  unint64_t v101 = *(void *)(v54 + 128);
  v156[28] = v13;
  v156[30] = v101;
  uint64_t v102 = v54;
  if (H264VideoEncoderFrameReceiver::UpdateSettings(*(void *)v54, (uint64_t)v156))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      BOOL v103 = AVE_Log_CheckConsole(3u) == 0;
      __uint64_t v104 = AVE_GetCurrTime();
      __uint64_t v105 = AVE_Log_GetLevelStr(4);
      if (!v103)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: CreateH264VideoEncoderFrameReceiver failed.\n", v104, 3, v105, "AVE_USL_Drv_Start", 1032, "ret == 0");
        __uint64_t v104 = AVE_GetCurrTime();
        __uint64_t v105 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: CreateH264VideoEncoderFrameReceiver failed.", v104, 3, v105, "AVE_USL_Drv_Start", 1032, "ret == 0");
    }
LABEL_180:
    uint64_t v83 = 4294966293;
    goto LABEL_158;
  }
  v156[0] = 0;
  AVE_DAL::Alloc(*(AVE_DAL **)v26, 67360, v156);
  AVE_DAL::Addr2Idx(*(AVE_DAL **)v26, (const void *)v156[0], &v160);
  unint64_t v109 = v156[0];
  if (!v156[0])
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      BOOL v118 = AVE_Log_CheckConsole(3u) == 0;
      __uint64_t v119 = AVE_GetCurrTime();
      unsigned int v120 = AVE_Log_GetLevelStr(4);
      if (!v118)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.\n", v119, 3, v120, "AVE_USL_Drv_Start", 1045, "Frame");
        __uint64_t v119 = AVE_GetCurrTime();
        unsigned int v120 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.", v119, 3, v120, "AVE_USL_Drv_Start", 1045, "Frame");
    }
    goto LABEL_180;
  }
  bzero((void *)(v156[0] + 8), 0x10718uLL);
  *(_DWORD *)unint64_t v109 = v160;
  *(_DWORD *)(v109 + 4) = 5;
  *(_DWORD *)(v109 + 160) = *(_DWORD *)(v26 + 12);
  *(void *)(v109 + 27672) = *(void *)(v25 + 136);
  *(unsigned char *)(v109 + 8) = *(void *)(v153 + 112) != 0;
  *(_DWORD *)(v109 + 12) = *(_DWORD *)(v153 + 120);
  LODWORD(v156[0]) = v160;
  if (Connection::writePacketBlock(*(void *)(v153 + 16), (long long *)v156))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      BOOL v115 = AVE_Log_CheckConsole(3u) == 0;
      __uint64_t v116 = AVE_GetCurrTime();
      int v117 = AVE_Log_GetLevelStr(4);
      if (!v115)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread\n", v116, 3, v117, "AVE_USL_Drv_Start", 1069, "res == 0");
        __uint64_t v116 = AVE_GetCurrTime();
        int v117 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread", v116, 3, v117, "AVE_USL_Drv_Start", 1069, "res == 0");
    }
LABEL_165:
    uint64_t v83 = 4294966296;
    goto LABEL_166;
  }
  LOBYTE(v121) = a9;
  v161[0] = *(unsigned int *)(v153 + 104);
  if (!a9) {
    int v121 = "";
  }
  AVE_SNPrintf(v164, 128, "%s", v110, v111, v112, v113, v114, (char)v121);
  int v177 = v160;
  if (*(unsigned char *)(v95 + 75)) {
    int v122 = 2;
  }
  else {
    int v122 = 1;
  }
  long long v123 = *(_OWORD *)(v26 + 20212);
  long long v124 = *(_OWORD *)(v26 + 20228);
  long long v125 = *(_OWORD *)(v26 + 20260);
  long long v173 = *(_OWORD *)(v26 + 20244);
  long long v174 = v125;
  long long v171 = v123;
  long long v172 = v124;
  long long v167 = *(_OWORD *)(v26 + 20160);
  long long v168 = *(_OWORD *)(v26 + 20176);
  long long v169 = *(_OWORD *)(v26 + 20192);
  long long v166 = *(_OWORD *)(v26 + 20144);
  int v126 = *(_DWORD *)(v26 + 20276);
  int v170 = *(_DWORD *)(v26 + 20208);
  int v175 = v126;
  int v165 = v122;
  int v162 = 118000;
  uint64_t v163 = (uint64_t)AVE_GetCurrTime() / 1000;
  memcpy(v176, __src, sizeof(v176));
  *(void *)(v109 + 27696) = AVE_GetCurrTime();
  uint64_t v83 = AVE_DAL::UCStart(*(const void ***)v26, v161, v157);
  if (v83)
  {
    Connection::dropLastPacketBlock(*(pthread_mutex_t **)(v102 + 16));
    if (AVE_Log_CheckLevel(0x28u, 4))
    {
      BOOL v127 = AVE_Log_CheckConsole(0x28u) == 0;
      __uint64_t v128 = AVE_GetCurrTime();
      __uint64_t v129 = AVE_Log_GetLevelStr(4);
      if (!v127)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to start %d\n", v128, 40, v129, "AVE_USL_Drv_Start", 1097, "ret == 0", v83);
        __uint64_t v128 = AVE_GetCurrTime();
        __uint64_t v129 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to start %d", v128, 40, v129, "AVE_USL_Drv_Start", 1097, "ret == 0", v83);
    }
    if (v83 == -1003) {
      goto LABEL_180;
    }
LABEL_166:
    v156[0] = *(void *)(v25 + 136);
    AVE_USL_Drv_Stop(v26, (uint64_t *)v156, 0);
    goto LABEL_158;
  }
  PacketBlocuint64_t k = Connection::readPacketBlock(*(void *)(v102 + 8), (uint64_t)v156, 0x1D4C0u);
  if (LODWORD(v156[0]) != v160)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      BOOL v138 = AVE_Log_CheckConsole(3u) == 0;
      __uint64_t v139 = AVE_GetCurrTime();
      int v140 = AVE_Log_GetLevelStr(4);
      if (!v138)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: status.counter != counter.\n", v139, 3, v140, "AVE_USL_Drv_Start", 1108, "status.counter == counter");
        __uint64_t v139 = AVE_GetCurrTime();
        int v140 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: status.counter != counter.", v139, 3, v140, "AVE_USL_Drv_Start", 1108, "status.counter == counter");
    }
    goto LABEL_165;
  }
  if (LODWORD(v156[4]))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      BOOL v135 = AVE_Log_CheckConsole(3u) == 0;
      __uint64_t v136 = AVE_GetCurrTime();
      uint64_t v137 = AVE_Log_GetLevelStr(4);
      if (!v135)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: errorCode = 0x%08x.\n", v136, 3, v137, "AVE_USL_Drv_Start", 1109, "status.errorCode == 0", LODWORD(v156[4]));
        __uint64_t v136 = AVE_GetCurrTime();
        uint64_t v137 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: errorCode = 0x%08x.", v136, 3, v137, "AVE_USL_Drv_Start", 1109, "status.errorCode == 0", LODWORD(v156[4]));
    }
    goto LABEL_165;
  }
  if (PacketBlock)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      BOOL v141 = AVE_Log_CheckConsole(3u) == 0;
      __uint64_t v142 = AVE_GetCurrTime();
      long long v143 = AVE_Log_GetLevelStr(4);
      if (!v141)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread\n", v142, 3, v143, "AVE_USL_Drv_Start", 1110, "res == 0");
        __uint64_t v142 = AVE_GetCurrTime();
        long long v143 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread", v142, 3, v143, "AVE_USL_Drv_Start", 1110, "res == 0");
    }
    goto LABEL_165;
  }
  if (Connection::connectionSize(*(pthread_mutex_t **)(v102 + 16), v158))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      BOOL v144 = AVE_Log_CheckConsole(3u) == 0;
      __uint64_t v145 = AVE_GetCurrTime();
      uint64_t v146 = AVE_Log_GetLevelStr(4);
      if (!v144)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Set FrameReceiverInput connection size fail %d\n", v145, 3, v146, "AVE_USL_Drv_Start", 1115, "ret == 0", v158);
        __uint64_t v145 = AVE_GetCurrTime();
        uint64_t v146 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Set FrameReceiverInput connection size fail %d", v145, 3, v146, "AVE_USL_Drv_Start", 1115, "ret == 0", v158);
      goto LABEL_165;
    }
LABEL_199:
    uint64_t v83 = 4294966296;
    goto LABEL_166;
  }
  if (Connection::connectionSize(*(pthread_mutex_t **)(v102 + 8), v158))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      BOOL v147 = AVE_Log_CheckConsole(3u) == 0;
      __uint64_t v148 = AVE_GetCurrTime();
      int v149 = AVE_Log_GetLevelStr(4);
      if (!v147)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Set FrameReceiverOutput connection size fail %d\n", v148, 3, v149, "AVE_USL_Drv_Start", 1117, "ret == 0", v158);
        __uint64_t v148 = AVE_GetCurrTime();
        int v149 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Set FrameReceiverOutput connection size fail %d", v148, 3, v149, "AVE_USL_Drv_Start", 1117, "ret == 0", v158);
      goto LABEL_165;
    }
    goto LABEL_199;
  }
  if (a10) {
    *a10 = v158;
  }
  if (a11) {
    memcpy(a11, v159, 0x2A8uLL);
  }
  uint64_t v83 = 0;
  *(unsigned char *)(v26 + 8) = 1;
LABEL_158:
  if (AVE_Log_CheckLevel(0x28u, 7))
  {
    BOOL v130 = AVE_Log_CheckConsole(0x28u) == 0;
    __uint64_t v131 = AVE_GetCurrTime();
    int v132 = AVE_Log_GetLevelStr(7);
    if (!v130)
    {
      printf("%lld %d AVE %s: EXIT H264VideoEncoderVA_DriverInit err %d.\n", v131, 40, v132, v83);
      __uint64_t v131 = AVE_GetCurrTime();
      int v132 = AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: EXIT H264VideoEncoderVA_DriverInit err %d.", v131, 40, v132, v83);
  }
  return v83;
}

void sub_1BA75F498(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9F01B0](v1, 0x1020C40ADC61684);
  _Unwind_Resume(a1);
}

uint64_t Connection::connectionSize(pthread_mutex_t *this, unsigned int a2)
{
  pthread_mutex_lock(this);
  if (*(_DWORD *)this[3].__opaque || LODWORD(this[3].__sig) < a2)
  {
    if (AVE_Log_CheckLevel(0x2Au, 4))
    {
      int v4 = AVE_Log_CheckConsole(0x2Au);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v4)
      {
        printf("%lld %d AVE %s: configure connection size fail %d %d %d %d\n", CurrTime, 42, LevelStr, *(_DWORD *)this[3].__opaque, LODWORD(this[3].__sig), HIDWORD(this[3].__sig), a2);
        __uint64_t CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: configure connection size fail %d %d %d %d", CurrTime);
    }
    uint64_t v7 = 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = 0;
    HIDWORD(this[3].__sig) = a2;
    *(_DWORD *)&this[3].__opaque[4] = 0;
    *(_DWORD *)&this[3].__opaque[8] = 0;
  }
  pthread_mutex_unlock(this);
  return v7;
}

uint64_t AVE_USL_Drv_Complete(uint64_t a1, void *a2)
{
  int v55 = -1;
  if (AVE_Log_CheckLevel(0x28u, 7))
  {
    int v4 = AVE_Log_CheckConsole(0x28u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v4)
    {
      printf("%lld %d AVE %s: ENTER H264VideoEncoderVA_DriverEncodeCompleteFrames.\n", CurrTime, 40, LevelStr);
      __uint64_t v7 = AVE_GetCurrTime();
      __uint64_t v46 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: ENTER H264VideoEncoderVA_DriverEncodeCompleteFrames.", v7, 40, v46);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: ENTER H264VideoEncoderVA_DriverEncodeCompleteFrames.", CurrTime, 40, LevelStr);
    }
  }
  if (a1)
  {
    if (!*(unsigned char *)(a1 + 8))
    {
      uint64_t v17 = 4294966292;
      goto LABEL_33;
    }
    unint64_t v51 = 0;
    AVE_DAL::Alloc(*(AVE_DAL **)a1, 67360, &v51);
    AVE_DAL::Addr2Idx(*(AVE_DAL **)a1, (const void *)v51, &v55);
    unint64_t v8 = v51;
    if (v51)
    {
      __uint64_t v9 = (pthread_mutex_t **)(a1 + 188064);
      bzero((void *)(v51 + 8), 0x10718uLL);
      *(_DWORD *)unint64_t v8 = v55;
      *(_DWORD *)(v8 + 4) = 8;
      *(_DWORD *)(v8 + 160) = *(_DWORD *)(a1 + 12);
      *(void *)(v8 + 27672) = *a2;
      *(unsigned char *)(v8 + 8) = *(void *)(a1 + 188168) != 0;
      *(_DWORD *)(v8 + 12) = *(_DWORD *)(a1 + 188176);
      LODWORD(v51) = v55;
      if (Connection::writePacketBlock(*(void *)(a1 + 188072), (long long *)&v51))
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v10 = AVE_Log_CheckConsole(3u);
          __uint64_t v11 = AVE_GetCurrTime();
          unint64_t v12 = AVE_Log_GetLevelStr(4);
          if (v10)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread\n", v11, 3, v12, "AVE_USL_Drv_Complete", 1302, "res == 0");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread");
        }
LABEL_30:
        uint64_t v17 = 4294966296;
        goto LABEL_33;
      }
      uint64_t v54 = 0;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      unint64_t v51 = *(unsigned int *)(a1 + 188160);
      LODWORD(v54) = v55;
      LODWORD(v53) = 118000;
      *((void *)&v53 + 1) = (uint64_t)AVE_GetCurrTime() / 1000;
      uint64_t v22 = AVE_DAL::UCComplete(*(const void ***)a1, &v51, &v49);
      if (!v22)
      {
        int v33 = *v9;
        pthread_mutex_lock(*v9);
        while (1)
        {
          int v34 = *(_DWORD *)v33[3].__opaque;
          if (v34) {
            break;
          }
          gettimeofday((timeval *)&v33[2].__opaque[40], 0);
          uint64_t v35 = (1000 * *(_DWORD *)&v33[2].__opaque[48]);
          *(void *)&v33[2].__opaque[24] = *(void *)&v33[2].__opaque[40] + 120;
          *(void *)&v33[2].__opaque[32] = v35;
          if (pthread_cond_timedwait((pthread_cond_t *)&v33[1], v33, (const timespec *)&v33[2].__opaque[24]) == 60)
          {
            pthread_mutex_unlock(v33);
            if (AVE_Log_CheckLevel(3u, 4))
            {
              int v36 = AVE_Log_CheckConsole(3u);
              __uint64_t v37 = AVE_GetCurrTime();
              __uint64_t v38 = AVE_Log_GetLevelStr(4);
              if (v36)
              {
                printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread\n", v37, 3, v38, "AVE_USL_Drv_Complete", 1331, "res == 0");
                AVE_GetCurrTime();
                AVE_Log_GetLevelStr(4);
              }
              syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread");
            }
            goto LABEL_30;
          }
        }
        unsigned int v39 = *(_DWORD *)&v33[3].__opaque[4];
        uint64_t v40 = *(unsigned int *)(*(void *)&v33[3].__opaque[16] + 40 * v39);
        unsigned int sig_high = HIDWORD(v33[3].__sig);
        if (v39 + 1 < sig_high) {
          unsigned int v42 = v39 + 1;
        }
        else {
          unsigned int v42 = 0;
        }
        *(_DWORD *)v33[3].__opaque = v34 - 1;
        *(_DWORD *)&v33[3].__opaque[4] = v42;
        if (v34 == sig_high) {
          pthread_cond_signal((pthread_cond_t *)&v33[1].__opaque[40]);
        }
        pthread_mutex_unlock(v33);
        if (v40 == v55)
        {
          uint64_t v17 = 0;
          goto LABEL_33;
        }
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v43 = AVE_Log_CheckConsole(3u);
          __uint64_t v44 = AVE_GetCurrTime();
          int v45 = AVE_Log_GetLevelStr(4);
          if (v43)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: status.counter (%d) != counter (%d).\n", v44, 3, v45, "AVE_USL_Drv_Complete", 1330, "status.counter == counter", v40, v55);
            __uint64_t v44 = AVE_GetCurrTime();
            int v45 = AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: status.counter (%d) != counter (%d).", v44, 3, v45, "AVE_USL_Drv_Complete", 1330, "status.counter == counter", v40, v55, v49, v50);
        }
        goto LABEL_30;
      }
      uint64_t v17 = v22;
      uint64_t v23 = *(void *)(a1 + 188072);
      pthread_mutex_lock((pthread_mutex_t *)v23);
      int v24 = *(_DWORD *)(v23 + 200);
      if (v24)
      {
        *(_DWORD *)(v23 + 200) = v24 - 1;
        int v25 = *(_DWORD *)(v23 + 208);
        if (!v25) {
          int v25 = *(_DWORD *)(v23 + 196);
        }
        *(_DWORD *)(v23 + 208) = v25 - 1;
      }
      pthread_mutex_unlock((pthread_mutex_t *)v23);
      if (AVE_Log_CheckLevel(0x28u, 4))
      {
        int v26 = AVE_Log_CheckConsole(0x28u);
        __uint64_t v27 = AVE_GetCurrTime();
        __uint64_t v28 = AVE_Log_GetLevelStr(4);
        if (v26)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to complete %d\n", v27, 40, v28, "AVE_USL_Drv_Complete", 1319, "ret == 0", v17);
          __uint64_t v27 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to complete %d", v27);
      }
    }
    else
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v18 = AVE_Log_CheckConsole(3u);
        __uint64_t v19 = AVE_GetCurrTime();
        unint64_t v20 = AVE_Log_GetLevelStr(4);
        if (v18)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.\n", v19, 3, v20, "AVE_USL_Drv_Complete", 1280, "Frame");
          __uint64_t v21 = AVE_GetCurrTime();
          int v48 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.", v21, 3, v48, "AVE_USL_Drv_Complete", 1280, "Frame");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.", v19, 3, v20, "AVE_USL_Drv_Complete", 1280, "Frame");
        }
      }
      uint64_t v17 = 4294966293;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v13 = AVE_Log_CheckConsole(3u);
      __uint64_t v14 = AVE_GetCurrTime();
      char v15 = AVE_Log_GetLevelStr(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: H264VideoEncoderVA_DriverEncodeCompleteFrames, Null pointer for driver data.\n", v14, 3, v15, "AVE_USL_Drv_Complete", 1268, "pDriverInstance");
        __uint64_t v16 = AVE_GetCurrTime();
        unint64_t v47 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: H264VideoEncoderVA_DriverEncodeCompleteFrames, Null pointer for driver data.", v16, 3, v47, "AVE_USL_Drv_Complete", 1268, "pDriverInstance");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: H264VideoEncoderVA_DriverEncodeCompleteFrames, Null pointer for driver data.", v14, 3, v15, "AVE_USL_Drv_Complete", 1268, "pDriverInstance");
      }
    }
    uint64_t v17 = 4294966295;
  }
LABEL_33:
  if (AVE_Log_CheckLevel(0x28u, 7))
  {
    int v29 = AVE_Log_CheckConsole(0x28u);
    __uint64_t v30 = AVE_GetCurrTime();
    uint64_t v31 = AVE_Log_GetLevelStr(7);
    if (v29)
    {
      printf("%lld %d AVE %s: EXIT H264VideoEncoderVA_DriverEncodeCompleteFrames F %d %d\n", v30, 40, v31, *(_DWORD *)(a1 + 12), v17);
      __uint64_t v30 = AVE_GetCurrTime();
      uint64_t v31 = AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: EXIT H264VideoEncoderVA_DriverEncodeCompleteFrames F %d %d", v30, 40, v31, *(_DWORD *)(a1 + 12), v17);
  }
  return v17;
}

uint64_t AVE_USL_Drv_Process(uint64_t a1, uint64_t a2)
{
  uint64_t v173 = *MEMORY[0x1E4F143B8];
  int v168 = -1;
  if (AVE_Log_CheckLevel(0x28u, 7))
  {
    int v4 = AVE_Log_CheckConsole(0x28u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v4)
    {
      printf("%lld %d AVE %s: ENTER H264VideoEncoderVA_DriverEncodeFrame\n", CurrTime, 40, LevelStr);
      __uint64_t v7 = AVE_GetCurrTime();
      uint64_t v146 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: ENTER H264VideoEncoderVA_DriverEncodeFrame", v7, 40, v146);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: ENTER H264VideoEncoderVA_DriverEncodeFrame", CurrTime, 40, LevelStr);
    }
  }
  if (!a1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v14 = AVE_Log_CheckConsole(3u);
      __uint64_t v15 = AVE_GetCurrTime();
      __uint64_t v16 = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: H264VideoEncoderVA_DriverEncodeFrame, Null pointer for driver data.\n", v15, 3, v16, "AVE_USL_Drv_Process", 1352, "pDriverInstance");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: H264VideoEncoderVA_DriverEncodeFrame, Null pointer for driver data.");
    }
    goto LABEL_70;
  }
  if (!a2)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v17 = AVE_Log_CheckConsole(3u);
      __uint64_t v18 = AVE_GetCurrTime();
      __uint64_t v19 = AVE_Log_GetLevelStr(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: H264VideoEncoderVA_DriverEncodeFrame, Null pointer for pSettings.\n", v18, 3, v19, "AVE_USL_Drv_Process", 1353, "pSettings");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: H264VideoEncoderVA_DriverEncodeFrame, Null pointer for pSettings.");
    }
    goto LABEL_70;
  }
  if (!*(unsigned char *)(a1 + 8))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v20 = AVE_Log_CheckConsole(3u);
      __uint64_t v21 = AVE_GetCurrTime();
      uint64_t v22 = AVE_Log_GetLevelStr(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: H264VideoEncoderVA_DriverEncodeFrame, encoder has not been init-ed.\n", v21, 3, v22, "AVE_USL_Drv_Process", 1354, "pDriverInstance->EncoderInited == true");
        __uint64_t v23 = AVE_GetCurrTime();
        __uint64_t v148 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: H264VideoEncoderVA_DriverEncodeFrame, encoder has not been init-ed.", v23, 3, v148, "AVE_USL_Drv_Process", 1354, "pDriverInstance->EncoderInited == true");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: H264VideoEncoderVA_DriverEncodeFrame, encoder has not been init-ed.", v21, 3, v22, "AVE_USL_Drv_Process", 1354, "pDriverInstance->EncoderInited == true");
      }
    }
    uint64_t v27 = 4294966285;
    goto LABEL_71;
  }
  if (!*(void *)(a2 + 24))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v24 = AVE_Log_CheckConsole(3u);
      __uint64_t v25 = AVE_GetCurrTime();
      int v26 = AVE_Log_GetLevelStr(4);
      if (v24)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: pSettings->CVImageBuffer == NULL\n", v25, 3, v26, "AVE_USL_Drv_Process", 1355, "pSettings->CVImageBuffer");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: pSettings->CVImageBuffer == NULL");
    }
    goto LABEL_70;
  }
  uint64_t v8 = a1 + 188072;
  if (*(_DWORD *)(a1 + 188164) != 3) {
    goto LABEL_35;
  }
  if (!*(void *)(a2 + 40))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v28 = AVE_Log_CheckConsole(3u);
      __uint64_t v29 = AVE_GetCurrTime();
      __uint64_t v30 = AVE_Log_GetLevelStr(4);
      if (v28)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: pSettings->CVImageBufferOutput == NULL\n", v29, 3, v30, "AVE_USL_Drv_Process", 1359, "pSettings->CVImageBufferOutput");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: pSettings->CVImageBufferOutput == NULL");
    }
LABEL_70:
    uint64_t v27 = 4294966295;
    goto LABEL_71;
  }
  if (AVE_Log_CheckLevel(0x28u, 7))
  {
    int v9 = AVE_Log_CheckConsole(0x28u);
    __uint64_t v10 = AVE_GetCurrTime();
    __uint64_t v11 = AVE_Log_GetLevelStr(7);
    unint64_t v12 = *(const void **)(a2 + 40);
    if (v9)
    {
      printf("%lld %d AVE %s: pSettings->CVImageBufferOutput = %p\n", v10, 40, v11, v12);
      __uint64_t v13 = AVE_GetCurrTime();
      BOOL v147 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: pSettings->CVImageBufferOutput = %p", v13, 40, v147, *(const void **)(a2 + 40));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: pSettings->CVImageBufferOutput = %p", v10, 40, v11, v12);
    }
  }
LABEL_35:
  unint64_t v169 = 0;
  AVE_DAL::Alloc(*(AVE_DAL **)a1, 67360, &v169);
  AVE_DAL::Addr2Idx(*(AVE_DAL **)a1, (const void *)v169, &v168);
  unint64_t v31 = v169;
  if (v169)
  {
    bzero((void *)(v169 + 8), 0x10718uLL);
    *(_DWORD *)unint64_t v31 = v168;
    *(_DWORD *)(v31 + 4) = 7;
    *(_DWORD *)(v31 + 160) = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(v31 + 168) = *(_DWORD *)(a2 + 212);
    *(unsigned char *)(v31 + 8) = *(void *)(a1 + 188168) != 0;
    *(_DWORD *)(v31 + 12) = *(_DWORD *)(a1 + 188176);
    *(_OWORD *)(v31 + 296) = *(_OWORD *)a2;
    *(void *)(v31 + 312) = *(void *)(a2 + 16);
    IOSurface = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(a2 + 24));
    *(_DWORD *)(v31 + 272) = IOSurfaceGetID(IOSurface);
    int v33 = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(a2 + 32));
    *(_DWORD *)(v31 + 276) = IOSurfaceGetID(v33);
    int v34 = *(__CVBuffer **)(*(void *)(a2 + 152) + 19184);
    if (v34)
    {
      uint64_t v35 = CVPixelBufferGetIOSurface(v34);
      *(_DWORD *)(v31 + 280) = IOSurfaceGetID(v35);
    }
    if (*(_DWORD *)(a1 + 188164) == 3)
    {
      long long v36 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(v31 + 320) = v36;
      __uint64_t v37 = CVPixelBufferGetIOSurface((CVPixelBufferRef)v36);
      *(_DWORD *)(v31 + 284) = IOSurfaceGetID(v37);
      __uint64_t v38 = *(__CVBuffer **)(a2 + 48);
      if (v38)
      {
        unsigned int v39 = CVPixelBufferGetIOSurface(v38);
        *(_DWORD *)(v31 + 288) = IOSurfaceGetID(v39);
      }
    }
    uint64_t v40 = a1 + 18364;
    *(void *)(v31 + 336) = *(void *)(a2 + 56);
    *(unsigned char *)(v31 + 344) = *(unsigned char *)(a2 + 64);
    unint64_t v41 = v31 + 2296;
    long long v42 = *(_OWORD *)(a2 + 80);
    *(void *)(v31 + 2312) = *(void *)(a2 + 96);
    *(_OWORD *)(v31 + 2296) = v42;
    long long v43 = *(_OWORD *)(a2 + 104);
    *(void *)(v31 + 2336) = *(void *)(a2 + 120);
    *(_OWORD *)(v31 + 2320) = v43;
    *(_OWORD *)(v31 + 2344) = *(_OWORD *)(a2 + 128);
    *(void *)(v31 + 27672) = *(void *)(a2 + 168);
    uint64_t v44 = *(void *)(a2 + 144);
    uint64_t v45 = *(void *)(v44 + 80);
    long long v46 = *(_OWORD *)(v44 + 64);
    long long v47 = *(_OWORD *)(v44 + 32);
    *(_OWORD *)(v31 + 2416) = *(_OWORD *)(v44 + 48);
    *(_OWORD *)(v31 + 2432) = v46;
    *(void *)(v31 + 2448) = v45;
    long long v48 = *(_OWORD *)(v44 + 16);
    *(_OWORD *)(v31 + 2368) = *(_OWORD *)v44;
    *(_OWORD *)(v31 + 2384) = v48;
    *(_OWORD *)(v31 + 2400) = v47;
    *(_DWORD *)(v31 + 26924) = 0;
    uint64_t v49 = *(unsigned int *)(a2 + 192);
    if ((int)v49 >= 1)
    {
      memcpy((void *)(v31 + 26928), *(const void **)(a2 + 184), v49 << 6);
      *(_DWORD *)(v31 + 26924) = *(_DWORD *)(a2 + 192);
    }
    memcpy((void *)(v31 + 2456), *(const void **)(a2 + 152), 0x4AF8uLL);
    if (*(_DWORD *)(a1 + 220) == 1)
    {
      if (*(unsigned char *)(a1 + 20139))
      {
        CFDictionaryRef v50 = *(const __CFDictionary **)(a2 + 72);
        if (v50)
        {
          if (*(_DWORD *)(a1 + 20284))
          {
            if (!*(void *)(a1 + 188184))
            {
              if (AVE_Log_CheckLevel(0x28u, 4))
              {
                int v81 = AVE_Log_CheckConsole(0x28u);
                __uint64_t v82 = AVE_GetCurrTime();
                uint64_t v83 = AVE_Log_GetLevelStr(4);
                if (v81)
                {
                  printf("%lld %d AVE %s: %s:%d %s | fail to get VCP %p\n", v82, 40, v83, "AVE_USL_Drv_Process", 1464, "pDriverInstance->pcVCP != __null", (const void *)a1);
                  __uint64_t v82 = AVE_GetCurrTime();
                  AVE_Log_GetLevelStr(4);
                }
                syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get VCP %p", v82);
              }
              uint64_t v27 = 4294966281;
              goto LABEL_148;
            }
            CFMutableDataRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
            if (!Mutable)
            {
              if (AVE_Log_CheckLevel(0x28u, 4))
              {
                int v90 = AVE_Log_CheckConsole(0x28u);
                __uint64_t v91 = AVE_GetCurrTime();
                uint64_t v92 = AVE_Log_GetLevelStr(4);
                if (v90)
                {
                  printf("%lld %d AVE %s: %s:%d %s | fail to create CFArray\n", v91, 40, v92, "AVE_USL_Drv_Process", 1468, "refInfo != __null");
                  __uint64_t v93 = AVE_GetCurrTime();
                  uint64_t v152 = AVE_Log_GetLevelStr(4);
                  syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v93, 40, v152, "AVE_USL_Drv_Process", 1468, "refInfo != __null");
                }
                else
                {
                  syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v91, 40, v92, "AVE_USL_Drv_Process", 1468, "refInfo != __null");
                }
              }
              uint64_t v27 = 4294966293;
              goto LABEL_148;
            }
            CFArrayRef v52 = Mutable;
            AVE_VCP_Ref_MakeArray((char *)(v31 + 2688), *(unsigned __int8 *)(v31 + 2676), Mutable);
            AVE_VCP::ScaleRefFrames(*(AVE_VCP **)(a1 + 188184), *(const __CFDictionary **)(a2 + 72), v52);
            CFRelease(v52);
            CFDictionaryRef v50 = *(const __CFDictionary **)(a2 + 72);
          }
          AVE_DPB_RetrieveSnapshot(v50, (char *)(v31 + 920));
        }
      }
    }
    AVE_USL_CalcDataSurfaceInfo(a1, a1 + 120, v31, a1 + 16);
    long long v53 = (AVE_USL_Surface **)(a1 + 72);
    uint64_t DataSurfaces = AVE_USL_CreateDataSurfaces((_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 188160), (void *)(a1 + 64), (char *)(a1 + 72));
    if (DataSurfaces)
    {
      uint64_t v27 = DataSurfaces;
      if (AVE_Log_CheckLevel(0x28u, 4))
      {
        int v55 = AVE_Log_CheckConsole(0x28u);
        __uint64_t v56 = AVE_GetCurrTime();
        __uint64_t v57 = AVE_Log_GetLevelStr(4);
        if (v55)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create surfaces %d %d\n", v56, 40, v57, "AVE_USL_Drv_Process", 1491, "ret == 0", *(_DWORD *)(a1 + 188160), *(_DWORD *)(v31 + 160));
          __uint64_t v56 = AVE_GetCurrTime();
          __uint64_t v57 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create surfaces %d %d", v56, 40, v57, "AVE_USL_Drv_Process", 1491, "ret == 0", *(unsigned int *)(a1 + 188160), *(unsigned int *)(v31 + 160));
      }
LABEL_148:
      int v140 = *(const void **)(a2 + 56);
      if (v140)
      {
        CFRelease(v140);
        *(void *)(a2 + 56) = 0;
      }
      goto LABEL_71;
    }
    int v62 = *v53;
    if (*v53 && *(void *)(v31 + 2648))
    {
      int v63 = *(_DWORD *)(a1 + 18688);
      if (v63 == 1)
      {
        Addr = AVE_USL_Surface::GetAddr(v62, 0);
        memcpy(Addr, *(const void **)(v31 + 2648), 32 * ((*(_DWORD *)(a1 + 1812) + 31) >> 5) * ((*(_DWORD *)(a1 + 1808) + 31) >> 5));
      }
      else
      {
        if (v63)
        {
          if (AVE_Log_CheckLevel(0x28u, 4))
          {
            int v85 = AVE_Log_CheckConsole(0x28u);
            __uint64_t v86 = AVE_GetCurrTime();
            int v87 = AVE_Log_GetLevelStr(4);
            int v88 = *(_DWORD *)(a1 + 18688);
            if (v85)
            {
              printf("%lld %d AVE %s: wrong codec type %d\n", v86, 40, v87, v88);
              __uint64_t v89 = AVE_GetCurrTime();
              unint64_t v151 = AVE_Log_GetLevelStr(4);
              syslog(3, "%lld %d AVE %s: wrong codec type %d", v89, 40, v151, *(_DWORD *)(a1 + 18688));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: wrong codec type %d", v86, 40, v87, v88);
            }
          }
          if (AVE_Log_CheckLevel(0x28u, 4))
          {
            int v94 = AVE_Log_CheckConsole(0x28u);
            __uint64_t v95 = AVE_GetCurrTime();
            int v96 = AVE_Log_GetLevelStr(4);
            if (v94)
            {
              printf("%lld %d AVE %s: %s:%d %s | fail to prepare MB input control %d %d\n", v95, 40, v96, "AVE_USL_Drv_Process", 1496, "ret == 0", *(_DWORD *)(a1 + 188160), *(_DWORD *)(v31 + 160));
              __uint64_t v95 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to prepare MB input control %d %d", v95);
          }
          uint64_t v27 = 4294966295;
          goto LABEL_148;
        }
        __uint64_t v64 = AVE_USL_Surface::GetAddr(v62, 0);
        unsigned int v165 = *(_DWORD *)(a1 + 1808) + 15;
        unsigned int v65 = *(_DWORD *)(a1 + 1812) + 15;
        unsigned int v66 = v65 >> 4;
        unsigned int v166 = v165 >> 4;
        int v164 = v64;
        memcpy(v64, *(const void **)(v31 + 2648), 16 * (v65 >> 4) * (v165 >> 4));
        if (AVE_Log_CheckLevel(0xBu, 7))
        {
          if (AVE_Log_CheckLevel(0xBu, 7))
          {
            unsigned int v72 = v65;
            int v73 = AVE_Log_CheckConsole(0xBu);
            __uint64_t v74 = AVE_GetCurrTime();
            char v75 = AVE_Log_GetLevelStr(7);
            if (v73)
            {
              printf("%lld %d AVE %s: QPMap:\n", v74, 11, v75);
              __uint64_t v76 = AVE_GetCurrTime();
              unint64_t v150 = AVE_Log_GetLevelStr(7);
              syslog(3, "%lld %d AVE %s: QPMap:", v76, 11, v150);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: QPMap:", v74, 11, v75);
            }
            unsigned int v65 = v72;
          }
          unsigned int v160 = v65;
          unsigned int v161 = v66;
          if (v65 >= 0x10)
          {
            unsigned int v97 = 0;
            uint64_t v98 = 0;
            if (v166 <= 1) {
              uint64_t v99 = 1;
            }
            else {
              uint64_t v99 = v166;
            }
            if (v161 <= 1) {
              uint64_t v100 = 1;
            }
            else {
              uint64_t v100 = v161;
            }
            uint64_t v162 = v100;
            uint64_t v101 = v99 + 2 * v99;
            do
            {
              if (v165 >= 0x10)
              {
                uint64_t v102 = 0;
                BOOL v103 = (unsigned __int16 *)((char *)v164 + 16 * v97);
                __uint64_t v104 = &v169;
                do
                {
                  unsigned int v105 = *v103;
                  v103 += 8;
                  AVE_SNPrintf((char *)v104, v102 + 512, "%2d ", v67, v68, v69, v70, v71, v105 >> 10);
                  v102 -= 3;
                  __uint64_t v104 = (unint64_t *)((char *)v104 + 3);
                }
                while (v101 + v102);
              }
              if (AVE_Log_CheckLevel(0xBu, 7))
              {
                int v106 = AVE_Log_CheckConsole(0xBu);
                __uint64_t v107 = AVE_GetCurrTime();
                long long v108 = AVE_Log_GetLevelStr(7);
                if (v106)
                {
                  printf("%lld %d AVE %s: mbrow %2d: %s\n", v107, 11, v108, v98, (const char *)&v169);
                  __uint64_t v109 = AVE_GetCurrTime();
                  uint64_t v153 = AVE_Log_GetLevelStr(7);
                  syslog(3, "%lld %d AVE %s: mbrow %2d: %s", v109, 11, v153, v98, (const char *)&v169);
                }
                else
                {
                  syslog(3, "%lld %d AVE %s: mbrow %2d: %s", v107, 11, v108, v98, (const char *)&v169);
                }
              }
              ++v98;
              v97 += v166;
            }
            while (v98 != v162);
          }
          if (AVE_Log_CheckLevel(0xBu, 7))
          {
            int v115 = AVE_Log_CheckConsole(0xBu);
            __uint64_t v116 = AVE_GetCurrTime();
            int v117 = AVE_Log_GetLevelStr(7);
            if (v115)
            {
              printf("%lld %d AVE %s: MDBias:\n", v116, 11, v117);
              __uint64_t v118 = AVE_GetCurrTime();
              uint64_t v154 = AVE_Log_GetLevelStr(7);
              syslog(3, "%lld %d AVE %s: MDBias:", v118, 11, v154);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: MDBias:", v116, 11, v117);
            }
          }
          if (v160 >= 0x10)
          {
            unsigned int v119 = 0;
            uint64_t v120 = 0;
            if (v166 <= 1) {
              uint64_t v121 = 1;
            }
            else {
              uint64_t v121 = v166;
            }
            if (v161 <= 1) {
              uint64_t v122 = 1;
            }
            else {
              uint64_t v122 = v161;
            }
            uint64_t v163 = v122;
            uint64_t v123 = v121 + 2 * v121;
            do
            {
              if (v165 >= 0x10)
              {
                uint64_t v124 = 0;
                long long v125 = (__int16 *)((char *)v164 + 16 * v119);
                int v126 = &v169;
                do
                {
                  __int16 v127 = *v125;
                  v125 += 8;
                  AVE_SNPrintf((char *)v126, v124 + 512, "%2x ", v110, v111, v112, v113, v114, v127 & 3);
                  v124 -= 3;
                  int v126 = (unint64_t *)((char *)v126 + 3);
                }
                while (v123 + v124);
              }
              if (AVE_Log_CheckLevel(0xBu, 7))
              {
                int v128 = AVE_Log_CheckConsole(0xBu);
                __uint64_t v129 = AVE_GetCurrTime();
                BOOL v130 = AVE_Log_GetLevelStr(7);
                if (v128)
                {
                  printf("%lld %d AVE %s: mbrow %2d: %s\n", v129, 11, v130, v120, (const char *)&v169);
                  __uint64_t v131 = AVE_GetCurrTime();
                  uint64_t v155 = AVE_Log_GetLevelStr(7);
                  syslog(3, "%lld %d AVE %s: mbrow %2d: %s", v131, 11, v155, v120, (const char *)&v169);
                }
                else
                {
                  syslog(3, "%lld %d AVE %s: mbrow %2d: %s", v129, 11, v130, v120, (const char *)&v169);
                }
              }
              ++v120;
              v119 += v166;
            }
            while (v120 != v163);
          }
          uint64_t v40 = a1 + 18364;
          uint64_t v8 = a1 + 188072;
          long long v53 = (AVE_USL_Surface **)(a1 + 72);
          unint64_t v41 = v31 + 2296;
        }
      }
    }
    PrepareMultiPassStats(a1, v31);
    AVE_USL_RetrieveDataSurfaces(v53, (_DWORD *)(v31 + 264));
    LODWORD(v169) = v168;
    long long v170 = *(_OWORD *)v41;
    *(void *)&long long v171 = *(void *)(v41 + 16);
    if (Connection::writePacketBlock(*(void *)v8, (long long *)&v169))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v132 = AVE_Log_CheckConsole(3u);
        __uint64_t v133 = AVE_GetCurrTime();
        __uint64_t v134 = AVE_Log_GetLevelStr(4);
        if (v132)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread\n", v133, 3, v134, "AVE_USL_Drv_Process", 1516, "res == 0");
          __uint64_t v135 = AVE_GetCurrTime();
          uint64_t v156 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread", v135, 3, v156, "AVE_USL_Drv_Process", 1516, "res == 0");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread", v133, 3, v134, "AVE_USL_Drv_Process", 1516, "res == 0");
        }
      }
      uint64_t v27 = 4294966296;
      goto LABEL_148;
    }
    uint64_t v172 = 0;
    long long v171 = 0u;
    long long v170 = 0u;
    memset(v167, 0, sizeof(v167));
    unint64_t v169 = *(unsigned int *)(v8 + 88);
    LODWORD(v172) = v168;
    *((void *)&v170 + 1) = *(unsigned int *)(v31 + 160);
    LODWORD(v171) = 58000;
    *((void *)&v171 + 1) = (uint64_t)AVE_GetCurrTime() / 1000;
    *(void *)(v31 + 27696) = AVE_GetCurrTime();
    uint64_t v136 = AVE_DAL::UCProcess(*(const void ***)a1, &v169, v167);
    if (v136)
    {
      uint64_t v27 = v136;
      Connection::dropLastPacketBlock(*(pthread_mutex_t **)v8);
      if (AVE_Log_CheckLevel(0x28u, 4))
      {
        int v137 = AVE_Log_CheckConsole(0x28u);
        __uint64_t v138 = AVE_GetCurrTime();
        __uint64_t v139 = AVE_Log_GetLevelStr(4);
        if (v137)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to process %d\n", v138, 40, v139, "AVE_USL_Drv_Process", 1537, "ret == 0", v27);
          __uint64_t v138 = AVE_GetCurrTime();
          uint64_t v159 = v27;
          int v157 = AVE_Log_GetLevelStr(4);
        }
        else
        {
          uint64_t v159 = v27;
          int v157 = v139;
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to process %d", v138, 40, v157, "AVE_USL_Drv_Process", 1537, "ret == 0", v159);
      }
      goto LABEL_148;
    }
    int v141 = *(_DWORD *)(a1 + 12) + 1;
    *(_DWORD *)(a1 + 12) = v141;
    if (!*(unsigned char *)(a2 + 160) && v141 != *(_DWORD *)v40
      || *(unsigned char *)(v40 + 413)
      || (*(unsigned char *)(a1 + 1804) & 0xE0) != 0
      || (*(_DWORD *)(v8 + 92) & 0xFFFFFFFE) == 2)
    {
      uint64_t v27 = 0;
    }
    else
    {
      unint64_t v169 = AVE_GetCurrTime();
      uint64_t v27 = AVE_USL_Drv_Complete(a1, &v169);
      if (v27 && AVE_Log_CheckLevel(3u, 4))
      {
        int v142 = AVE_Log_CheckConsole(3u);
        __uint64_t v143 = AVE_GetCurrTime();
        BOOL v144 = AVE_Log_GetLevelStr(4);
        if (v142)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Complete call FAILED.\n", v143, 3, v144, "AVE_USL_Drv_Process", 1565, "ret == 0");
          __uint64_t v145 = AVE_GetCurrTime();
          unsigned int v158 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Complete call FAILED.", v145, 3, v158, "AVE_USL_Drv_Process", 1565, "ret == 0");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Complete call FAILED.", v143, 3, v144, "AVE_USL_Drv_Process", 1565, "ret == 0");
        }
      }
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v58 = AVE_Log_CheckConsole(3u);
      __uint64_t v59 = AVE_GetCurrTime();
      __uint64_t v60 = AVE_Log_GetLevelStr(4);
      if (v58)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: mach_timebase_info info = NULL.\n", v59, 3, v60, "AVE_USL_Drv_Process", 1376, "Frame");
        __uint64_t v61 = AVE_GetCurrTime();
        int v149 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: mach_timebase_info info = NULL.", v61, 3, v149, "AVE_USL_Drv_Process", 1376, "Frame");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: mach_timebase_info info = NULL.", v59, 3, v60, "AVE_USL_Drv_Process", 1376, "Frame");
      }
    }
    uint64_t v27 = 4294966293;
  }
LABEL_71:
  AVE_USL_DestroyDataSurfaces(a1 + 72);
  if (AVE_Log_CheckLevel(0x28u, 7))
  {
    int v77 = AVE_Log_CheckConsole(0x28u);
    __uint64_t v78 = AVE_GetCurrTime();
    long long v79 = AVE_Log_GetLevelStr(7);
    if (v77)
    {
      printf("%lld %d AVE %s: EXIT H264VideoEncoderVA_DriverEncodeFrame frame number %d. %d\n", v78, 40, v79, *(_DWORD *)(a1 + 12) - 1, v27);
      __uint64_t v78 = AVE_GetCurrTime();
      long long v79 = AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: EXIT H264VideoEncoderVA_DriverEncodeFrame frame number %d. %d", v78, 40, v79, *(_DWORD *)(a1 + 12) - 1, v27);
  }
  return v27;
}

void PrepareMultiPassStats(uint64_t a1, uint64_t a2)
{
  int v4 = (uint64_t *)(a1 + 188056);
  uint64_t v5 = (_DWORD *)(a1 + 18328);
  if (!*(_DWORD *)(a1 + 188176) && *v5 != 2) {
    return;
  }
  *uint64_t v5 = 2;
  *(_DWORD *)(a2 + 16) = 2;
  H264VideoEncoderFrameReceiver::SetMultiPassOptions(*v4, *(_DWORD *)(a1 + 18344));
  size_t v6 = *(unsigned int *)(a1 + 60);
  Addr = AVE_USL_Surface::GetAddr(*(AVE_USL_Surface **)(a1 + 80), 0);
  uint64_t v8 = Addr;
  int v9 = *(const void **)(a2 + 21632);
  if (v9)
  {
    *(unsigned char *)(a2 + 8) = 1;
LABEL_7:
    memcpy(Addr, v9, v6);
    return;
  }
  __uint64_t v10 = (_DWORD *)(a2 + 21366);
  H264VideoEncoderFrameReceiver::GetMpGlobalRcInfo(*v4, (void *)(a2 + 21366));
  __uint64_t v11 = (const void *)(a2 + 4052);
  if (*(_DWORD *)(a1 + 12))
  {
    *(unsigned char *)(a2 + 2464) = 0;
    memcpy(v8, (const void *)(a2 + 21366), 0x108uLL);
    Addr = (__IOSurface *)((char *)v8 + 264);
    int v9 = (const void *)(a2 + 4052);
    goto LABEL_7;
  }
  if (AVE_Log_CheckLevel(0xD8u, 6))
  {
    int v12 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v12)
    {
      printf("%lld %d AVE %s: ------ Sequence RC Info ------\n", CurrTime, 216, LevelStr);
      __uint64_t v15 = AVE_GetCurrTime();
      long long v80 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: ------ Sequence RC Info ------", v15, 216, v80);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: ------ Sequence RC Info ------", CurrTime, 216, LevelStr);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 6))
  {
    int v16 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t v17 = AVE_GetCurrTime();
    __uint64_t v18 = AVE_Log_GetLevelStr(6);
    int v19 = *v10;
    if (v16)
    {
      printf("%lld %d AVE %s:  total_scenes %u\n", v17, 216, v18, v19);
      __uint64_t v20 = AVE_GetCurrTime();
      int v81 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s:  total_scenes %u", v20, 216, v81, *v10);
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  total_scenes %u", v17, 216, v18, v19);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 6))
  {
    int v21 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t v22 = AVE_GetCurrTime();
    __uint64_t v23 = AVE_Log_GetLevelStr(6);
    int v24 = v10[1];
    if (v21)
    {
      printf("%lld %d AVE %s:  cnt_All %u\n", v22, 216, v23, v24);
      __uint64_t v25 = AVE_GetCurrTime();
      __uint64_t v82 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s:  cnt_All %u", v25, 216, v82, v10[1]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  cnt_All %u", v22, 216, v23, v24);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 6))
  {
    int v26 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t v27 = AVE_GetCurrTime();
    int v28 = AVE_Log_GetLevelStr(6);
    uint64_t v29 = *((void *)v10 + 1);
    if (v26)
    {
      printf("%lld %d AVE %s:  bits_All %llu\n", v27, 216, v28, v29);
      __uint64_t v30 = AVE_GetCurrTime();
      uint64_t v83 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s:  bits_All %llu", v30, 216, v83, *((void *)v10 + 1));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  bits_All %llu", v27, 216, v28, v29);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 6))
  {
    int v31 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t v32 = AVE_GetCurrTime();
    int v33 = AVE_Log_GetLevelStr(6);
    int v34 = v10[7];
    if (v31)
    {
      printf("%lld %d AVE %s:  cnt_NORMAL %u\n", v32, 216, v33, v34);
      __uint64_t v35 = AVE_GetCurrTime();
      int v84 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s:  cnt_NORMAL %u", v35, 216, v84, v10[7]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  cnt_NORMAL %u", v32, 216, v33, v34);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 6))
  {
    int v36 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t v37 = AVE_GetCurrTime();
    __uint64_t v38 = AVE_Log_GetLevelStr(6);
    uint64_t v39 = *((void *)v10 + 4);
    if (v36)
    {
      printf("%lld %d AVE %s:  bits_NORMAL %llu\n", v37, 216, v38, v39);
      __uint64_t v40 = AVE_GetCurrTime();
      int v85 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s:  bits_NORMAL %llu", v40, 216, v85, *((void *)v10 + 4));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  bits_NORMAL %llu", v37, 216, v38, v39);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 6))
  {
    int v41 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t v42 = AVE_GetCurrTime();
    long long v43 = AVE_Log_GetLevelStr(6);
    int v44 = v10[10];
    if (v41)
    {
      printf("%lld %d AVE %s:  cnt_MIN %u\n", v42, 216, v43, v44);
      __uint64_t v45 = AVE_GetCurrTime();
      __uint64_t v86 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s:  cnt_MIN %u", v45, 216, v86, v10[10]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  cnt_MIN %u", v42, 216, v43, v44);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 6))
  {
    int v46 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t v47 = AVE_GetCurrTime();
    long long v48 = AVE_Log_GetLevelStr(6);
    uint64_t v49 = *(void *)(v10 + 11);
    if (v46)
    {
      printf("%lld %d AVE %s:  bits_MIN %llu\n", v47, 216, v48, v49);
      __uint64_t v50 = AVE_GetCurrTime();
      int v87 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s:  bits_MIN %llu", v50, 216, v87, *(void *)(v10 + 11));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  bits_MIN %llu", v47, 216, v48, v49);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 6))
  {
    int v51 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t v52 = AVE_GetCurrTime();
    long long v53 = AVE_Log_GetLevelStr(6);
    int v54 = v10[13];
    if (v51)
    {
      printf("%lld %d AVE %s:  cnt_MAX %u\n", v52, 216, v53, v54);
      __uint64_t v55 = AVE_GetCurrTime();
      int v88 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s:  cnt_MAX %u", v55, 216, v88, v10[13]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  cnt_MAX %u", v52, 216, v53, v54);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 6))
  {
    int v56 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t v57 = AVE_GetCurrTime();
    int v58 = AVE_Log_GetLevelStr(6);
    uint64_t v59 = *((void *)v10 + 7);
    if (v56)
    {
      printf("%lld %d AVE %s:  bits_MAX %llu\n", v57, 216, v58, v59);
      __uint64_t v60 = AVE_GetCurrTime();
      __uint64_t v89 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s:  bits_MAX %llu", v60, 216, v89, *((void *)v10 + 7));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  bits_MAX %llu", v57, 216, v58, v59);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 6))
  {
    int v61 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t v62 = AVE_GetCurrTime();
    int v63 = AVE_Log_GetLevelStr(6);
    int v64 = v10[16];
    if (v61)
    {
      printf("%lld %d AVE %s:  cnt_BLANK %u\n", v62, 216, v63, v64);
      __uint64_t v65 = AVE_GetCurrTime();
      int v90 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s:  cnt_BLANK %u", v65, 216, v90, v10[16]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  cnt_BLANK %u", v62, 216, v63, v64);
    }
  }
  H264VideoEncoderFrameReceiver::GetMpGlobalRcInfo(*v4, v10);
  memcpy(v8, v10, 0x108uLL);
  memcpy((char *)v8 + 264, v11, v6);
  for (int i = 0; i != 11; ++i)
  {
    if (AVE_Log_CheckLevel(0xD8u, 6))
    {
      int v67 = AVE_Log_CheckConsole(0xD8u);
      __uint64_t v68 = AVE_GetCurrTime();
      uint64_t v69 = AVE_Log_GetLevelStr(6);
      int v70 = *((_DWORD *)v8 + 371);
      uint64_t v71 = *(void *)((char *)v8 + 1492);
      uint64_t v72 = *(void *)((char *)v8 + 1508);
      uint64_t v73 = *(void *)((char *)v8 + 1516);
      uint64_t v74 = *(void *)((char *)v8 + 1524);
      double v75 = *(double *)((char *)v8 + 1532);
      double v76 = *(double *)((char *)v8 + 1540);
      double v77 = *((float *)v8 + 388);
      if (v67)
      {
        printf("%lld %d AVE %s: frame %u: cnt %d, bits %llu, %llu, %llu, %llu; QScale: %f, %f, %f, %f\n",
          v68,
          216,
          v69,
          i,
          v70,
          v71,
          v72,
          v73,
          v74,
          v75,
          v76,
          *((float *)v8 + 387),
          v77);
        __uint64_t v78 = AVE_GetCurrTime();
        long long v79 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: frame %u: cnt %d, bits %llu, %llu, %llu, %llu; QScale: %f, %f, %f, %f",
          v78,
          216,
          v79,
          i,
          *((_DWORD *)v8 + 371),
          *(void *)((char *)v8 + 1492),
          *(void *)((char *)v8 + 1508),
          *(void *)((char *)v8 + 1516),
          *(void *)((char *)v8 + 1524),
          *(double *)((char *)v8 + 1532),
          *(double *)((char *)v8 + 1540),
          *((float *)v8 + 387),
          *((float *)v8 + 388));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: frame %u: cnt %d, bits %llu, %llu, %llu, %llu; QScale: %f, %f, %f, %f",
          v68,
          216,
          v69,
          i,
          v70,
          v71,
          v72,
          v73,
          v74,
          v75,
          v76,
          *((float *)v8 + 387),
          v77);
      }
    }
    uint64_t v8 = (__IOSurface *)((char *)v8 + 1574);
  }
}

uint64_t AVE_USL_Drv_SetInternalThreadPriority(void *a1, int a2)
{
  if (AVE_Log_CheckLevel(0x28u, 7))
  {
    int v4 = AVE_Log_CheckConsole(0x28u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v4)
    {
      printf("%lld %d AVE %s: ENTER AVE_USL_Drv_SetInternalThreadPriority.\n", CurrTime, 40, LevelStr);
      __uint64_t v7 = AVE_GetCurrTime();
      __uint64_t v17 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: ENTER AVE_USL_Drv_SetInternalThreadPriority.", v7, 40, v17);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: ENTER AVE_USL_Drv_SetInternalThreadPriority.", CurrTime, 40, LevelStr);
    }
  }
  if (a1)
  {
    if (*((unsigned char *)a1 + 8)) {
      H264VideoEncoderFrameReceiver::ChangeBackgroundPolicy(a1[23507], a2);
    }
    uint64_t v8 = 0;
  }
  else
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v9 = AVE_Log_CheckConsole(3u);
      __uint64_t v10 = AVE_GetCurrTime();
      __uint64_t v11 = AVE_Log_GetLevelStr(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: AVE_USL_Drv_SetInternalThreadPriority, Null pointer for driver data.\n", v10, 3, v11, "AVE_USL_Drv_SetInternalThreadPriority", 1597, "pDriverInstance");
        __uint64_t v12 = AVE_GetCurrTime();
        __uint64_t v18 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: AVE_USL_Drv_SetInternalThreadPriority, Null pointer for driver data.", v12, 3, v18, "AVE_USL_Drv_SetInternalThreadPriority", 1597, "pDriverInstance");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: AVE_USL_Drv_SetInternalThreadPriority, Null pointer for driver data.", v10, 3, v11, "AVE_USL_Drv_SetInternalThreadPriority", 1597, "pDriverInstance");
      }
    }
    uint64_t v8 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x28u, 7))
  {
    int v13 = AVE_Log_CheckConsole(0x28u);
    __uint64_t v14 = AVE_GetCurrTime();
    __uint64_t v15 = AVE_Log_GetLevelStr(7);
    if (v13)
    {
      printf("%lld %d AVE %s: EXIT AVE_USL_Drv_SetInternalThreadPriority frame number %d. %d\n", v14, 40, v15, *((_DWORD *)a1 + 3), v8);
      __uint64_t v14 = AVE_GetCurrTime();
      __uint64_t v15 = AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: EXIT AVE_USL_Drv_SetInternalThreadPriority frame number %d. %d", v14, 40, v15, *((_DWORD *)a1 + 3), v8);
  }
  return v8;
}

uint64_t AVE_USL_Drv_Reset(unsigned int *a1, unsigned int a2)
{
  int v56 = -1;
  if (AVE_Log_CheckLevel(0x28u, 7))
  {
    int v4 = AVE_Log_CheckConsole(0x28u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v4)
    {
      printf("%lld %d AVE %s: ENTER AVE_USL_Drv_Reset.\n", CurrTime, 40, LevelStr);
      __uint64_t v7 = AVE_GetCurrTime();
      __uint64_t v45 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: ENTER AVE_USL_Drv_Reset.", v7, 40, v45);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: ENTER AVE_USL_Drv_Reset.", CurrTime, 40, LevelStr);
    }
  }
  if (!a1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v13 = AVE_Log_CheckConsole(3u);
      __uint64_t v14 = AVE_GetCurrTime();
      __uint64_t v15 = AVE_Log_GetLevelStr(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Reset, Null pointer for driver data.\n", v14, 3, v15, "AVE_USL_Drv_Reset", 1627, "pDriverInstance");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Reset, Null pointer for driver data.");
    }
    goto LABEL_26;
  }
  if (!a2)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v16 = AVE_Log_CheckConsole(3u);
      __uint64_t v17 = AVE_GetCurrTime();
      __uint64_t v18 = AVE_Log_GetLevelStr(4);
      if (v16)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Reset multiPassEndPassCounter = %d.\n", v17, 3, v18, "AVE_USL_Drv_Reset", 1628, "multiPassEndPassCounter > 0", 0);
        __uint64_t v17 = AVE_GetCurrTime();
        int v46 = AVE_Log_GetLevelStr(4);
      }
      else
      {
        int v46 = v18;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Reset multiPassEndPassCounter = %d.", v17, 3, v46, "AVE_USL_Drv_Reset", 1628, "multiPassEndPassCounter > 0", 0);
    }
LABEL_26:
    uint64_t v9 = 4294966295;
    goto LABEL_27;
  }
  __uint64_t v55 = AVE_GetCurrTime();
  uint64_t v8 = AVE_USL_Drv_Complete((uint64_t)a1, &v55);
  if (v8)
  {
    uint64_t v9 = v8;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v10 = AVE_Log_CheckConsole(3u);
      __uint64_t v11 = AVE_GetCurrTime();
      __uint64_t v12 = AVE_Log_GetLevelStr(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: H264VideoEncoderVA_DriverEncodeCompleteFrames failed.\n", v11, 3, v12, "AVE_USL_Drv_Reset", 1637, "ret == 0");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: H264VideoEncoderVA_DriverEncodeCompleteFrames failed.");
    }
    goto LABEL_27;
  }
  a1[3] = 0;
  a1[47044] = a2;
  unint64_t v51 = 0;
  AVE_DAL::Alloc(*(AVE_DAL **)a1, 67360, &v51);
  AVE_DAL::Addr2Idx(*(AVE_DAL **)a1, (const void *)v51, &v56);
  unint64_t v19 = v51;
  if (v51)
  {
    bzero((void *)(v51 + 8), 0x10718uLL);
    *(_DWORD *)unint64_t v19 = v56;
    *(_DWORD *)(v19 + 4) = 10;
    *(_DWORD *)(v19 + 160) = a1[3];
    *(unsigned char *)(v19 + 8) = *((void *)a1 + 23521) != 0;
    *(_DWORD *)(v19 + 12) = a1[47044];
    LODWORD(v51) = v56;
    if (Connection::writePacketBlock(*((void *)a1 + 23509), (long long *)&v51))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        int v20 = AVE_Log_CheckConsole(3u);
        __uint64_t v21 = AVE_GetCurrTime();
        __uint64_t v22 = AVE_Log_GetLevelStr(4);
        if (v20)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread\n", v21, 3, v22, "AVE_USL_Drv_Reset", 1674, "res == 0");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread");
      }
      goto LABEL_45;
    }
    uint64_t v54 = 0;
    long long v53 = 0u;
    long long v52 = 0u;
    memset(v50, 0, sizeof(v50));
    unint64_t v51 = a1[47040];
    LODWORD(v54) = v56;
    LODWORD(v53) = 118000;
    *((void *)&v53 + 1) = (uint64_t)AVE_GetCurrTime() / 1000;
    uint64_t v31 = AVE_DAL::UCReset(*(const void ***)a1, &v51, v50);
    if (!v31)
    {
      PacketBlocuint64_t k = Connection::readPacketBlock(*((void *)a1 + 23508), (uint64_t)&v51, 0x1D4C0u);
      if (v51 == v56)
      {
        if (!PacketBlock)
        {
          uint64_t v9 = 0;
          goto LABEL_27;
        }
        if (AVE_Log_CheckLevel(3u, 4))
        {
          int v39 = AVE_Log_CheckConsole(3u);
          __uint64_t v40 = AVE_GetCurrTime();
          int v41 = AVE_Log_GetLevelStr(4);
          if (v39)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread\n", v40, 3, v41, "AVE_USL_Drv_Reset", 1705, "res == 0");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread");
        }
      }
      else if (AVE_Log_CheckLevel(3u, 4))
      {
        int v42 = AVE_Log_CheckConsole(3u);
        __uint64_t v43 = AVE_GetCurrTime();
        int v44 = AVE_Log_GetLevelStr(4);
        if (v42)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder ERROR: status.counter != counter.\n", v43, 3, v44, "AVE_USL_Drv_Reset", 1704, "status.counter == counter");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder ERROR: status.counter != counter.");
      }
LABEL_45:
      uint64_t v9 = 4294966296;
      goto LABEL_27;
    }
    uint64_t v9 = v31;
    uint64_t v32 = *((void *)a1 + 23509);
    pthread_mutex_lock((pthread_mutex_t *)v32);
    int v33 = *(_DWORD *)(v32 + 200);
    if (v33)
    {
      *(_DWORD *)(v32 + 200) = v33 - 1;
      int v34 = *(_DWORD *)(v32 + 208);
      if (!v34) {
        int v34 = *(_DWORD *)(v32 + 196);
      }
      *(_DWORD *)(v32 + 208) = v34 - 1;
    }
    pthread_mutex_unlock((pthread_mutex_t *)v32);
    if (AVE_Log_CheckLevel(0x28u, 4))
    {
      int v35 = AVE_Log_CheckConsole(0x28u);
      __uint64_t v36 = AVE_GetCurrTime();
      __uint64_t v37 = AVE_Log_GetLevelStr(4);
      if (v35)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to process %d\n", v36, 40, v37, "AVE_USL_Drv_Reset", 1691, "ret == 0", v9);
        __uint64_t v36 = AVE_GetCurrTime();
        uint64_t v49 = v9;
        long long v48 = AVE_Log_GetLevelStr(4);
      }
      else
      {
        uint64_t v49 = v9;
        long long v48 = v37;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to process %d", v36, 40, v48, "AVE_USL_Drv_Reset", 1691, "ret == 0", v49);
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v27 = AVE_Log_CheckConsole(3u);
      __uint64_t v28 = AVE_GetCurrTime();
      uint64_t v29 = AVE_Log_GetLevelStr(4);
      if (v27)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.\n", v28, 3, v29, "AVE_USL_Drv_Reset", 1653, "Frame");
        __uint64_t v30 = AVE_GetCurrTime();
        __uint64_t v47 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.", v30, 3, v47, "AVE_USL_Drv_Reset", 1653, "Frame");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.", v28, 3, v29, "AVE_USL_Drv_Reset", 1653, "Frame");
      }
    }
    uint64_t v9 = 4294966293;
  }
LABEL_27:
  if (AVE_Log_CheckLevel(0x28u, 7))
  {
    int v23 = AVE_Log_CheckConsole(0x28u);
    __uint64_t v24 = AVE_GetCurrTime();
    __uint64_t v25 = AVE_Log_GetLevelStr(7);
    if (v23)
    {
      printf("%lld %d AVE %s: EXIT AVE_USL_Drv_Reset frame number %d. err 0x%08x\n", v24, 40, v25, a1[3], v9);
      __uint64_t v24 = AVE_GetCurrTime();
      __uint64_t v25 = AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: EXIT AVE_USL_Drv_Reset frame number %d. err 0x%08x", v24, 40, v25, a1[3], v9);
  }
  return v9;
}

void Connection::~Connection(Connection *this)
{
  pthread_mutex_lock((pthread_mutex_t *)this);
  if (*((_DWORD *)this + 50) && AVE_Log_CheckLevel(0x2Au, 5))
  {
    if (AVE_Log_CheckConsole(0x2Au))
    {
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(5);
      printf("%lld %d AVE %s: H264 Connection: WARNING! deleting connection %p with %d packets left\n", CurrTime, 42, LevelStr, this, *((_DWORD *)this + 50));
    }
    __uint64_t v4 = AVE_GetCurrTime();
    uint64_t v5 = AVE_Log_GetLevelStr(5);
    syslog(3, "%lld %d AVE %s: H264 Connection: WARNING! deleting connection %p with %d packets left", v4, 42, v5, this, *((_DWORD *)this + 50));
  }
  uint64_t v6 = *((void *)this + 27);
  if (v6)
  {
    MEMORY[0x1BA9F0190](v6, 0x1000C807607B2BCLL);
    *((void *)this + 27) = 0;
  }
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 112));
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 64));
  pthread_mutex_unlock((pthread_mutex_t *)this);
  pthread_mutex_destroy((pthread_mutex_t *)this);
}

uint64_t AVE_DevCap_PixelFmt_FindList(_DWORD *a1, int a2, uint64_t a3, _DWORD *a4)
{
  LODWORD(v4) = *a4;
  if (*a1 >= *a4) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = *a1;
  }
  if ((int)v4 < 1)
  {
    int v5 = 0;
  }
  else
  {
    int v5 = 0;
    uint64_t v6 = a1 + 2;
    do
    {
      if ((a2 & ~*v6) == 0) {
        *(_DWORD *)(a3 + 4 * v5++) = *(v6 - 1);
      }
      v6 += 2;
      --v4;
    }
    while (v4);
  }
  *a4 = v5;
  return 0;
}

_DWORD *AVE_DevCap_Perf_Find(unsigned int *a1, int a2, int a3, int a4)
{
  uint64_t v4 = *a1;
  if ((int)v4 < 1) {
    return 0;
  }
  for (int i = a1 + 5; *(i - 1) != a2 || *i != a3 || *(i - 2) != a4; i += 6)
  {
    if (!--v4) {
      return 0;
    }
  }
  return i - 3;
}

uint64_t AVE_DRL_Print(double *a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  memset(v16, 0, sizeof(v16));
  AVE_ComposePosStr(a4, a5, (char *)v16, 32, a5, a6, a7, a8);
  if (AVE_Log_CheckLevel(a2, (char)a3))
  {
    int v11 = AVE_Log_CheckConsole(a2);
    int v12 = v11;
    if (a3 < 0)
    {
      if (v11 && (-a3 & 0x20) == 0) {
        printf("DRL %s | %p %d | %f %f - %f %f\n", (const char *)v16, a1, *((_DWORD *)a1 + 8), *a1, a1[1], a1[2], a1[3]);
      }
      syslog(3, "DRL %s | %p %d | %f %f - %f %f");
    }
    else
    {
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr((char)a3);
      if ((a3 & 0x20) != 0 || !v12)
      {
        syslog(3, "%lld %d AVE %s: DRL %s | %p %d | %f %f - %f %f");
      }
      else
      {
        printf("%lld %d AVE %s: DRL %s | %p %d | %f %f - %f %f\n", CurrTime, a2, LevelStr, (const char *)v16, a1, *((_DWORD *)a1 + 8), *a1, a1[1], a1[2], a1[3]);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr((char)a3);
        syslog(3, "%lld %d AVE %s: DRL %s | %p %d | %f %f - %f %f");
      }
    }
  }
  return 0;
}

uint64_t AVE_DRL_Retrieve(CFArrayRef theArray, void *a2)
{
  uint64_t v15 = 0;
  double v16 = 0.0;
  if (theArray && a2)
  {
    a2[4] = 0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
    int Count = CFArrayGetCount(theArray);
    int v5 = Count >> 1;
    if (Count >= 2)
    {
      CFIndex v6 = 0;
      if (v5 <= 1) {
        unsigned int v7 = 1;
      }
      else {
        unsigned int v7 = Count >> 1;
      }
      uint64_t v8 = 2 * v7;
      do
      {
        if (AVE_CFArray_GetFloat64(theArray, v6, &v16))
        {
          uint64_t result = AVE_CFArray_GetSInt64(theArray, v6, &v15);
          if (result) {
            return result;
          }
          double v10 = (double)v15;
        }
        else
        {
          double v10 = v16;
        }
        *(double *)&a2[v6] = v10;
        if (AVE_CFArray_GetFloat64(theArray, v6 + 1, &v16))
        {
          uint64_t result = AVE_CFArray_GetSInt64(theArray, v6 + 1, &v15);
          if (result) {
            return result;
          }
          double v11 = (double)v15;
        }
        else
        {
          double v11 = v16;
        }
        *(double *)&a2[v6 + 1] = v11;
        v6 += 2;
      }
      while (v8 != v6);
    }
    uint64_t result = 0;
    *((_DWORD *)a2 + 8) = v5;
  }
  else
  {
    if (AVE_Log_CheckLevel(0x35u, 4))
    {
      int v12 = AVE_Log_CheckConsole(0x35u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p\n", CurrTime, 53, LevelStr, "AVE_DRL_Retrieve", 52, "pArray != __null && pDRL != __null", theArray, a2);
        __uint64_t CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p", CurrTime, 53);
    }
    return 4294966295;
  }
  return result;
}

uint64_t AVE_DRL_Make(int *a1, __CFArray *a2)
{
  if (a1 && a2)
  {
    if (a1[8] < 1)
    {
      return 0;
    }
    else
    {
      uint64_t v4 = 0;
      for (int i = (double *)(a1 + 2); ; i += 2)
      {
        int v6 = AVE_CFArray_AddFloat64(*(i - 1), a2);
        uint64_t result = AVE_CFArray_AddFloat64(*i, a2) + v6;
        if (result) {
          break;
        }
        if (++v4 >= a1[8]) {
          return 0;
        }
      }
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x35u, 4))
    {
      int v8 = AVE_Log_CheckConsole(0x35u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p\n", CurrTime, 53, LevelStr, "AVE_DRL_Make", 119, "pDRL != __null && pArray != __null", a1, a2);
        __uint64_t CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p", CurrTime, 53);
    }
    return 4294966295;
  }
  return result;
}

uint64_t AVE_SearchRange_Make(int *a1, __CFDictionary *a2)
{
  if (a1 && a2)
  {
    uint64_t v4 = AVE_CFDict_AddSInt32(@"MotionEstimationModeID", *a1, a2);
    if (!v4)
    {
      uint64_t v13 = AVE_CFDict_AddSInt32(@"MotionEstimationHorizontalSearchRange", a1[1], a2);
      if (v13)
      {
        uint64_t v5 = v13;
        if (!AVE_Log_CheckLevel(0x36u, 4)) {
          return v5;
        }
        int v14 = AVE_Log_CheckConsole(0x36u);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (!v14) {
          goto LABEL_29;
        }
        printf("%lld %d AVE %s: %s:%d %s | fail to add data %p %p %d\n", CurrTime, 54, LevelStr, "AVE_SearchRange_Make", 82, "ret == 0", a1, a2, v5);
      }
      else
      {
        uint64_t v15 = AVE_CFDict_AddSInt32(@"MotionEstimationVerticalSearchRange", a1[2], a2);
        if (v15)
        {
          uint64_t v5 = v15;
          if (!AVE_Log_CheckLevel(0x36u, 4)) {
            return v5;
          }
          int v16 = AVE_Log_CheckConsole(0x36u);
          __uint64_t CurrTime = AVE_GetCurrTime();
          Leveluint64_t Str = AVE_Log_GetLevelStr(4);
          if (!v16) {
            goto LABEL_29;
          }
          printf("%lld %d AVE %s: %s:%d %s | fail to add data %p %p %d\n", CurrTime, 54, LevelStr, "AVE_SearchRange_Make", 87, "ret == 0", a1, a2, v5);
        }
        else
        {
          uint64_t v5 = AVE_CFDict_AddSInt32(@"MotionEstimationCacheMode", a1[3], a2);
          if (!v5 || !AVE_Log_CheckLevel(0x36u, 4)) {
            return v5;
          }
          int v17 = AVE_Log_CheckConsole(0x36u);
          __uint64_t CurrTime = AVE_GetCurrTime();
          Leveluint64_t Str = AVE_Log_GetLevelStr(4);
          if (!v17) {
            goto LABEL_29;
          }
          printf("%lld %d AVE %s: %s:%d %s | fail to add data %p %p %d\n", CurrTime, 54, LevelStr, "AVE_SearchRange_Make", 92, "ret == 0", a1, a2, v5);
        }
      }
      __uint64_t v9 = AVE_GetCurrTime();
      unint64_t v19 = AVE_Log_GetLevelStr(4);
      goto LABEL_28;
    }
    uint64_t v5 = v4;
    if (AVE_Log_CheckLevel(0x36u, 4))
    {
      int v6 = AVE_Log_CheckConsole(0x36u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v6)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to add data %p %p %d\n", CurrTime, 54, LevelStr, "AVE_SearchRange_Make", 77, "ret == 0", a1, a2, v5);
        __uint64_t v9 = AVE_GetCurrTime();
        unint64_t v19 = AVE_Log_GetLevelStr(4);
LABEL_28:
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to add data %p %p %d", v9, 54, v19);
        return v5;
      }
LABEL_29:
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to add data %p %p %d", CurrTime, 54, LevelStr);
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x36u, 4))
    {
      int v10 = AVE_Log_CheckConsole(0x36u);
      __uint64_t v11 = AVE_GetCurrTime();
      int v12 = AVE_Log_GetLevelStr(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p\n", v11, 54, v12, "AVE_SearchRange_Make", 72, "pEntry != __null && pDict != __null", a1, a2);
        __uint64_t v11 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p", v11, 54);
    }
    return 4294966295;
  }
  return v5;
}

uint64_t AVE_SearchRange_MakeArray(int *a1, int a2, __CFArray *a3)
{
  if (a1 && a2 >= 1 && a3)
  {
    uint64_t v6 = 0;
    unsigned int v7 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    int v8 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    for (int i = a1; ; i += 4)
    {
      CFMutableDataRef Mutable = CFDictionaryCreateMutable(0, 0, v7, v8);
      if (!Mutable) {
        break;
      }
      __uint64_t v11 = Mutable;
      uint64_t v12 = AVE_SearchRange_Make(i, Mutable);
      if (v12)
      {
        uint64_t v13 = v12;
        CFRelease(v11);
        return v13;
      }
      CFArrayAppendValue(a3, v11);
      CFRelease(v11);
      if (a2 == ++v6) {
        return 0;
      }
    }
    if (AVE_Log_CheckLevel(0x36u, 4))
    {
      int v18 = AVE_Log_CheckConsole(0x36u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create CFDictionary %p %d %p %d\n", CurrTime, 54, LevelStr, "AVE_SearchRange_MakeArray", 168, "pDict != __null", a1, a2, a3, v6);
        __uint64_t v21 = AVE_GetCurrTime();
        __uint64_t v24 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDictionary %p %d %p %d", v21, 54, v24, "AVE_SearchRange_MakeArray");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDictionary %p %d %p %d", CurrTime, 54, LevelStr, "AVE_SearchRange_MakeArray");
      }
    }
    return 4294966293;
  }
  else
  {
    if (AVE_Log_CheckLevel(0x36u, 4))
    {
      int v14 = AVE_Log_CheckConsole(0x36u);
      __uint64_t v15 = AVE_GetCurrTime();
      int v16 = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p\n", v15, 54, v16, "AVE_SearchRange_MakeArray", 160, "pEntry != __null && num > 0 && pArray != __null", a1, a2, a3);
        __uint64_t v17 = AVE_GetCurrTime();
        int v23 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v17, 54, v23);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v15, 54, v16);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_ANFD_Retrieve(CFDictionaryRef theDict, int *a2)
{
  double v42 = 0.0;
  if (!theDict || !a2)
  {
    if (AVE_Log_CheckLevel(0x2Fu, 4))
    {
      int v10 = AVE_Log_CheckConsole(0x2Fu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p\n", CurrTime, 47, LevelStr, "AVE_ANFD_Retrieve", 30, "pDict != __null && pInfo != __null", theDict, a2);
        __uint64_t CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p", CurrTime, 47);
    }
    return 4294966295;
  }
  *((_OWORD *)a2 + 2) = 0u;
  *((_OWORD *)a2 + 3) = 0u;
  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  Suint64_t Int32 = AVE_CFDict_GetSInt32(theDict, @"AnfdModality", a2);
  if (!SInt32)
  {
    uint64_t v13 = AVE_CFDict_GetSInt32(theDict, @"FaceID", a2 + 1);
    if (v13)
    {
      uint64_t v5 = v13;
      if (!AVE_Log_CheckLevel(0x2Fu, 4)) {
        return v5;
      }
      int v14 = AVE_Log_CheckConsole(0x2Fu);
      __uint64_t v7 = AVE_GetCurrTime();
      int v8 = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v7, 47, v8, "AVE_ANFD_Retrieve", 42, "ret == 0", theDict, a2, v5);
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v15 = AVE_CFDict_GetSInt32(theDict, @"ConfidenceLevel", a2 + 2);
      if (v15)
      {
        uint64_t v5 = v15;
        if (AVE_Log_CheckLevel(0x2Fu, 4))
        {
          int v16 = AVE_Log_CheckConsole(0x2Fu);
          __uint64_t v9 = AVE_GetCurrTime();
          __uint64_t v17 = AVE_Log_GetLevelStr(4);
          if (v16)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v9, 47, v17, "AVE_ANFD_Retrieve", 47, "ret == 0", theDict, a2, v5);
            __uint64_t v9 = AVE_GetCurrTime();
            __uint64_t v40 = AVE_Log_GetLevelStr(4);
          }
          else
          {
            __uint64_t v40 = v17;
          }
          goto LABEL_30;
        }
        return v5;
      }
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"Rect");
      if (!Value)
      {
        if (AVE_Log_CheckLevel(0x2Fu, 4))
        {
          int v23 = AVE_Log_CheckConsole(0x2Fu);
          __uint64_t v24 = AVE_GetCurrTime();
          __uint64_t v25 = AVE_Log_GetLevelStr(4);
          if (v23)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v24, 47, v25, "AVE_ANFD_Retrieve", 52, "pRect != __null", theDict, a2, 0);
            __uint64_t v26 = AVE_GetCurrTime();
            int v41 = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d", v26, 47, v41);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d", v24, 47, v25);
          }
        }
        return 4294966288;
      }
      CFDictionaryRef v19 = Value;
      uint64_t Double = AVE_CFDict_GetDouble(Value, @"X", &v42);
      if (Double)
      {
        uint64_t v5 = Double;
        if (!AVE_Log_CheckLevel(0x2Fu, 4)) {
          return v5;
        }
        int v21 = AVE_Log_CheckConsole(0x2Fu);
        __uint64_t v7 = AVE_GetCurrTime();
        int v8 = AVE_Log_GetLevelStr(4);
        if (!v21) {
          goto LABEL_23;
        }
        printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v7, 47, v8, "AVE_ANFD_Retrieve", 56, "ret == 0", theDict, a2, v5);
LABEL_15:
        __uint64_t v9 = AVE_GetCurrTime();
        __uint64_t v40 = AVE_Log_GetLevelStr(4);
        goto LABEL_30;
      }
      a2[4] = vcvtd_n_s64_f64(v42, 0x13uLL);
      uint64_t v27 = AVE_CFDict_GetDouble(v19, @"Y", &v42);
      if (v27)
      {
        uint64_t v5 = v27;
        if (!AVE_Log_CheckLevel(0x2Fu, 4)) {
          return v5;
        }
        int v28 = AVE_Log_CheckConsole(0x2Fu);
        __uint64_t v7 = AVE_GetCurrTime();
        int v8 = AVE_Log_GetLevelStr(4);
        if (v28)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v7, 47, v8, "AVE_ANFD_Retrieve", 62, "ret == 0", theDict, a2, v5);
          goto LABEL_15;
        }
      }
      else
      {
        a2[5] = vcvtd_n_s64_f64(v42, 0x13uLL);
        uint64_t v29 = AVE_CFDict_GetDouble(v19, @"Width", &v42);
        if (v29)
        {
          uint64_t v5 = v29;
          if (!AVE_Log_CheckLevel(0x2Fu, 4)) {
            return v5;
          }
          int v30 = AVE_Log_CheckConsole(0x2Fu);
          __uint64_t v7 = AVE_GetCurrTime();
          int v8 = AVE_Log_GetLevelStr(4);
          if (v30)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v7, 47, v8, "AVE_ANFD_Retrieve", 68, "ret == 0", theDict, a2, v5);
            goto LABEL_15;
          }
        }
        else
        {
          a2[6] = vcvtd_n_s64_f64(v42, 0x13uLL);
          uint64_t v31 = AVE_CFDict_GetDouble(v19, @"Height", &v42);
          if (v31)
          {
            uint64_t v5 = v31;
            if (!AVE_Log_CheckLevel(0x2Fu, 4)) {
              return v5;
            }
            int v32 = AVE_Log_CheckConsole(0x2Fu);
            __uint64_t v7 = AVE_GetCurrTime();
            int v8 = AVE_Log_GetLevelStr(4);
            if (v32)
            {
              printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v7, 47, v8, "AVE_ANFD_Retrieve", 74, "ret == 0", theDict, a2, v5);
              goto LABEL_15;
            }
          }
          else
          {
            a2[7] = vcvtd_n_s64_f64(v42, 0x13uLL);
            a2[3] = 0x80000;
            uint64_t v33 = AVE_CFDict_GetSInt32(theDict, @"AngleInfoRoll", a2 + 8);
            if (v33)
            {
              uint64_t v5 = v33;
              if (!AVE_Log_CheckLevel(0x2Fu, 4)) {
                return v5;
              }
              int v34 = AVE_Log_CheckConsole(0x2Fu);
              __uint64_t v7 = AVE_GetCurrTime();
              int v8 = AVE_Log_GetLevelStr(4);
              if (v34)
              {
                printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v7, 47, v8, "AVE_ANFD_Retrieve", 84, "ret == 0", theDict, a2, v5);
                goto LABEL_15;
              }
            }
            else
            {
              uint64_t v35 = AVE_CFDict_GetSInt32(theDict, @"AngleInfoYaw", a2 + 9);
              if (v35)
              {
                uint64_t v5 = v35;
                if (!AVE_Log_CheckLevel(0x2Fu, 4)) {
                  return v5;
                }
                int v36 = AVE_Log_CheckConsole(0x2Fu);
                __uint64_t v7 = AVE_GetCurrTime();
                int v8 = AVE_Log_GetLevelStr(4);
                if (v36)
                {
                  printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v7, 47, v8, "AVE_ANFD_Retrieve", 89, "ret == 0", theDict, a2, v5);
                  goto LABEL_15;
                }
              }
              else
              {
                Suint64_t Int64 = AVE_CFDict_GetSInt64(theDict, @"OriginalTimestamp", (uint64_t *)a2 + 5);
                if (SInt64)
                {
                  uint64_t v5 = SInt64;
                  if (!AVE_Log_CheckLevel(0x2Fu, 4)) {
                    return v5;
                  }
                  int v38 = AVE_Log_CheckConsole(0x2Fu);
                  __uint64_t v7 = AVE_GetCurrTime();
                  int v8 = AVE_Log_GetLevelStr(4);
                  if (v38)
                  {
                    printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v7, 47, v8, "AVE_ANFD_Retrieve", 94, "ret == 0", theDict, a2, v5);
                    goto LABEL_15;
                  }
                }
                else
                {
                  uint64_t v5 = AVE_CFDict_GetSInt64(theDict, @"Timestamp", (uint64_t *)a2 + 6);
                  if (!v5 || !AVE_Log_CheckLevel(0x2Fu, 4)) {
                    return v5;
                  }
                  int v39 = AVE_Log_CheckConsole(0x2Fu);
                  __uint64_t v7 = AVE_GetCurrTime();
                  int v8 = AVE_Log_GetLevelStr(4);
                  if (v39)
                  {
                    printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v7, 47, v8, "AVE_ANFD_Retrieve", 98, "ret == 0", theDict, a2, v5);
                    goto LABEL_15;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_23:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d", v7, 47, v8);
    return v5;
  }
  uint64_t v5 = SInt32;
  if (AVE_Log_CheckLevel(0x2Fu, 4))
  {
    int v6 = AVE_Log_CheckConsole(0x2Fu);
    __uint64_t v7 = AVE_GetCurrTime();
    int v8 = AVE_Log_GetLevelStr(4);
    if (v6)
    {
      printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v7, 47, v8, "AVE_ANFD_Retrieve", 37, "ret == 0", theDict, a2, v5);
      __uint64_t v9 = AVE_GetCurrTime();
      __uint64_t v40 = AVE_Log_GetLevelStr(4);
LABEL_30:
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d", v9, 47, v40);
      return v5;
    }
    goto LABEL_23;
  }
  return v5;
}

uint64_t AVE_ANFD_RetrieveArray(const __CFArray *a1, void *a2, _DWORD *a3)
{
  if (a1 && a2 && a3 && (uint64_t v6 = *a3, (int)v6 > 0))
  {
    bzero(a2, v6 << 6);
    unsigned int Count = CFArrayGetCount(a1);
    if (*a3 >= (signed int)Count) {
      uint64_t v8 = Count;
    }
    else {
      uint64_t v8 = *a3;
    }
    *a3 = 0;
    if ((int)v8 < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v9 = 0;
      for (int i = (int *)a2; ; i += 16)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v9);
        if (!ValueAtIndex) {
          break;
        }
        uint64_t result = AVE_ANFD_Retrieve(ValueAtIndex, i);
        if (result) {
          return result;
        }
        ++*a3;
        if (v8 == ++v9) {
          return 0;
        }
      }
      if (AVE_Log_CheckLevel(0x2Fu, 4))
      {
        int v17 = AVE_Log_CheckConsole(0x2Fu);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v17)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %p %p %d %d\n", CurrTime, 47, LevelStr, "AVE_ANFD_RetrieveArray", 227, "pDict != __null", a1, a2, a3, a1, v8, v9);
          __uint64_t v20 = AVE_GetCurrTime();
          __uint64_t v22 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get data %p %p %p %p %d %d", v20, 47, v22, "AVE_ANFD_RetrieveArray", 227);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get data %p %p %p %p %d %d", CurrTime, 47, LevelStr, "AVE_ANFD_RetrieveArray", 227);
        }
      }
      return 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x2Fu, 4))
    {
      int v13 = AVE_Log_CheckConsole(0x2Fu);
      __uint64_t v14 = AVE_GetCurrTime();
      uint64_t v15 = AVE_Log_GetLevelStr(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v14, 47, v15, "AVE_ANFD_RetrieveArray", 215, "pArray != __null && pInfo != __null && pNum != __null && *pNum > 0", a1, a2, a3);
        __uint64_t v16 = AVE_GetCurrTime();
        int v21 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v16, 47, v21);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v14, 47, v15);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_ANFD_Print(unsigned int *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  memset(v45, 0, sizeof(v45));
  AVE_ComposePosStr(a4, a5, (char *)v45, 32, a5, a6, a7, a8);
  int v11 = (char)a3;
  if (AVE_Log_CheckLevel(a2, (char)a3))
  {
    int v12 = AVE_Log_CheckConsole(a2);
    int v13 = v12;
    if (a3 < 0)
    {
      if (!v12 || (-a3 & 0x20) != 0)
      {
        syslog(3, "ANFD %s | %d %d | %d | %f %f %f %f | %d %d | %lld %lld %d", v45, *a1, a1[1]);
        return 0;
      }
      double v27 = (double)(int)a1[3];
      int v23 = v45;
      printf("ANFD %s | %d %d | %d | %f %f %f %f | %d %d | %lld %lld %d\n", (const char *)v45, *a1, a1[1], a1[2], (double)(int)a1[4] / v27, (double)(int)a1[5] / v27, (double)(int)a1[6] / v27, (double)(int)a1[7] / v27, a1[8], a1[9], *((void *)a1 + 5), *((void *)a1 + 6), a1[14]);
      double v28 = (double)(int)a1[3];
      uint64_t v40 = *((void *)a1 + 6);
      uint64_t v41 = a1[14];
      *(void *)&double v38 = a1[9];
      double v39 = *((double *)a1 + 5);
      *(void *)&double v37 = a1[8];
      double v35 = (double)(int)a1[6] / v28;
      double v36 = (double)(int)a1[7] / v28;
      double v33 = (double)(int)a1[4] / v28;
      double v34 = (double)(int)a1[5] / v28;
      uint64_t v31 = (const char *)a1[1];
      int v32 = (_OWORD *)a1[2];
      __uint64_t v26 = "ANFD %s | %d %d | %d | %f %f %f %f | %d %d | %lld %lld %d";
      uint64_t v30 = *a1;
    }
    else
    {
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr((char)a3);
      double v16 = (double)(int)a1[3];
      uint64_t v17 = *a1;
      double v18 = (double)(int)a1[4] / v16;
      double v19 = (double)(int)a1[5] / v16;
      double v20 = (double)(int)a1[6] / v16;
      double v21 = (double)(int)a1[7] / v16;
      if ((a3 & 0x20) != 0 || !v13)
      {
        syslog(3, "%lld %d AVE %s: ANFD %s | %d %d | %d | %f %f %f %f | %d %d | %lld %lld %d", CurrTime, a2, LevelStr, v45, v17);
        return 0;
      }
      uint64_t v22 = a2;
      printf("%lld %d AVE %s: ANFD %s | %d %d | %d | %f %f %f %f | %d %d | %lld %lld %d\n", CurrTime, a2, LevelStr, (const char *)v45, v17, a1[1], a1[2], v18, v19, v20, v21, a1[8], a1[9], *((void *)a1 + 5), *((void *)a1 + 6), a1[14]);
      int v23 = (_OWORD *)AVE_GetCurrTime();
      __uint64_t v24 = AVE_Log_GetLevelStr(v11);
      double v25 = (double)(int)a1[3];
      uint64_t v43 = *((void *)a1 + 6);
      uint64_t v44 = a1[14];
      uint64_t v41 = a1[9];
      uint64_t v42 = *((void *)a1 + 5);
      uint64_t v40 = a1[8];
      double v38 = (double)(int)a1[6] / v25;
      double v39 = (double)(int)a1[7] / v25;
      double v36 = (double)(int)a1[4] / v25;
      double v37 = (double)(int)a1[5] / v25;
      *(void *)&double v34 = a1[1];
      *(void *)&double v35 = a1[2];
      int v32 = v45;
      *(void *)&double v33 = *a1;
      uint64_t v30 = v22;
      uint64_t v31 = v24;
      __uint64_t v26 = "%lld %d AVE %s: ANFD %s | %d %d | %d | %f %f %f %f | %d %d | %lld %lld %d";
    }
    syslog(3, v26, v23, v30, v31, v32, *(void *)&v33, *(void *)&v34, *(void *)&v35, *(void *)&v36, *(void *)&v37, *(void *)&v38, *(void *)&v39, v40, v41, v42, v43, v44);
  }
  return 0;
}

uint64_t AVE_ANFD_PrintInfo(unsigned int *a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 4294966295;
  }
  if (a2 < 1) {
    return 0;
  }
  int v12 = a1;
  uint64_t v13 = a2;
  do
  {
    AVE_ANFD_Print(v12, a3, a4, a5, a6, a6, a7, a8);
    v12 += 16;
    --v13;
  }
  while (v13);
  return 0;
}

uint64_t AVE_ANFD_GetInfo(const __CFDictionary *a1, void *a2, _DWORD *a3)
{
  if (a1 && a2 && a3 && (uint64_t v6 = *a3, (int)v6 > 0))
  {
    bzero(a2, v6 << 6);
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, @"StabilizedDetectedFacesArray");
    if (Value)
    {
      return AVE_ANFD_RetrieveArray(Value, a2, a3);
    }
    else
    {
      return 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x2Fu, 6))
    {
      int v9 = AVE_Log_CheckConsole(0x2Fu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(6);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", CurrTime, 47, LevelStr, "AVE_ANFD_GetInfo", 362, "pProperty != NULL && pInfo != NULL && pNum != NULL && *pNum > 0", a1, a2, a3);
        __uint64_t v12 = AVE_GetCurrTime();
        uint64_t v13 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v12, 47, v13);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", CurrTime, 47, LevelStr);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_CalcBufNumOfMBInputCtrl(int a1, uint64_t a2, unsigned int a3)
{
  if (a1 == 1) {
    return a3;
  }
  else {
    return 0;
  }
}

uint64_t AVE_CalcBufSizeOfMBInputCtrl(int a1, int a2, int a3)
{
  unsigned int v3 = ((a2 + 31) & 0xFFFFFFE0) * ((a3 + 31) >> 5);
  unsigned int v4 = ((a2 + 15) & 0xFFFFFFF0) * ((a3 + 15) >> 4);
  if (a1) {
    unsigned int v4 = 0;
  }
  if (a1 != 1) {
    unsigned int v3 = v4;
  }
  return (v3 + 4095) & 0xFFFFF000;
}

BOOL AVE_CalcBufNumOfMultiPassStats(int a1, int a2, int a3)
{
  return a2 > 1 && a3 > 0 && a1 == 1;
}

uint64_t AVE_CalcBufSizeOfMultiPassStats(int a1, int a2)
{
  if (a1) {
    unsigned int v2 = 17314;
  }
  else {
    unsigned int v2 = 1574;
  }
  if (a2) {
    return v2 + 264;
  }
  else {
    return v2;
  }
}

uint64_t AVE_CalcBufSizeOfParameterSet(int a1, int a2)
{
  unsigned int v2 = a2 << 10;
  if (a1 != 1) {
    unsigned int v2 = 0;
  }
  if (a1) {
    return v2;
  }
  else {
    return 512;
  }
}

uint64_t AVE_CFArray_AddSInt32(int a1, __CFArray *a2)
{
  int valuePtr = a1;
  if (a2)
  {
    CFNumberRef v3 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v3)
    {
      CFNumberRef v4 = v3;
      CFArrayAppendValue(a2, v3);
      CFRelease(v4);
      return 0;
    }
    else
    {
      if (AVE_Log_CheckLevel(0xFu, 4))
      {
        int v10 = AVE_Log_CheckConsole(0xFu);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v10)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CFNumber %d %p\n", CurrTime, 15, LevelStr, "AVE_CFArray_AddSInt32", 88, "pNum != __null", valuePtr, a2);
          __uint64_t CurrTime = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %d %p", CurrTime, 15);
      }
      return 4294966293;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      int v7 = AVE_Log_CheckConsole(0xFu);
      __uint64_t v8 = AVE_GetCurrTime();
      int v9 = AVE_Log_GetLevelStr(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %d %p\n", v8, 15, v9, "AVE_CFArray_AddSInt32", 84, "pArray != __null", a1, 0);
        __uint64_t v8 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %d %p", v8, 15);
    }
    return 4294966295;
  }
}

uint64_t AVE_CFArray_AddSInt64(uint64_t a1, __CFArray *a2)
{
  uint64_t valuePtr = a1;
  if (a2)
  {
    CFNumberRef v3 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
    if (v3)
    {
      CFNumberRef v4 = v3;
      CFArrayAppendValue(a2, v3);
      CFRelease(v4);
      return 0;
    }
    else
    {
      if (AVE_Log_CheckLevel(0xFu, 4))
      {
        int v10 = AVE_Log_CheckConsole(0xFu);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v10)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CFNumber %lld %p\n", CurrTime, 15, LevelStr, "AVE_CFArray_AddSInt64", 115, "pNum != __null", valuePtr, a2);
          __uint64_t CurrTime = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %lld %p", CurrTime, 15);
      }
      return 4294966293;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      int v7 = AVE_Log_CheckConsole(0xFu);
      __uint64_t v8 = AVE_GetCurrTime();
      int v9 = AVE_Log_GetLevelStr(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %lld %p\n", v8, 15, v9, "AVE_CFArray_AddSInt64", 111, "pArray != __null", a1, 0);
        __uint64_t v8 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %lld %p", v8, 15);
    }
    return 4294966295;
  }
}

uint64_t AVE_CFArray_AddFloat64(double a1, __CFArray *a2)
{
  double valuePtr = a1;
  if (a2)
  {
    CFNumberRef v4 = CFNumberCreate(0, kCFNumberFloat64Type, &valuePtr);
    if (v4)
    {
      CFNumberRef v5 = v4;
      CFArrayAppendValue(a2, v4);
      CFRelease(v5);
      return 0;
    }
    else
    {
      if (AVE_Log_CheckLevel(0xFu, 4))
      {
        int v10 = AVE_Log_CheckConsole(0xFu);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v10)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CFNumber %lf %p\n", CurrTime, 15, LevelStr, "AVE_CFArray_AddFloat64", 143, "pNum != __null", a1, a2);
          __uint64_t CurrTime = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %lf %p", CurrTime);
      }
      return 4294966293;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      int v7 = AVE_Log_CheckConsole(0xFu);
      __uint64_t v8 = AVE_GetCurrTime();
      int v9 = AVE_Log_GetLevelStr(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %lf %p\n", v8, 15, v9, "AVE_CFArray_AddFloat64", 139, "pArray != __null", a1, 0);
        __uint64_t v8 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %lf %p", v8);
    }
    return 4294966295;
  }
}

uint64_t AVE_CFArray_AddDouble(double a1, __CFArray *a2)
{
  double valuePtr = a1;
  if (a2)
  {
    CFNumberRef v3 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
    if (v3)
    {
      CFNumberRef v4 = v3;
      CFArrayAppendValue(a2, v3);
      CFRelease(v4);
      return 0;
    }
    else
    {
      if (AVE_Log_CheckLevel(0xFu, 4))
      {
        int v10 = AVE_Log_CheckConsole(0xFu);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v10)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CFNumber %lf %p\n", CurrTime, 15, LevelStr, "AVE_CFArray_AddDouble", 170, "pNum != __null", valuePtr, a2);
          __uint64_t CurrTime = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %lf %p", CurrTime);
      }
      return 4294966293;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      int v7 = AVE_Log_CheckConsole(0xFu);
      __uint64_t v8 = AVE_GetCurrTime();
      int v9 = AVE_Log_GetLevelStr(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %lf %p\n", v8, 15, v9, "AVE_CFArray_AddDouble", 166, "pArray != __null", a1, 0);
        __uint64_t v8 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %lf %p", v8);
    }
    return 4294966295;
  }
}

uint64_t AVE_CFArray_GetChar(CFArrayRef theArray, CFIndex idx, char *a3)
{
  int v4 = idx;
  if (theArray && (idx & 0x80000000) == 0 && a3)
  {
    *a3 = 0;
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, idx);
    if (ValueAtIndex)
    {
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(ValueAtIndex))
      {
        if (CFNumberGetValue(ValueAtIndex, kCFNumberCharType, a3)) {
          return 0;
        }
        else {
          return 4294966288;
        }
      }
    }
    if (!AVE_Log_CheckLevel(0xFu, 4)) {
      return 4294966296;
    }
    int v13 = AVE_Log_CheckConsole(0xFu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (v13)
    {
      if (ValueAtIndex) {
        CFTypeID v16 = CFGetTypeID(ValueAtIndex);
      }
      else {
        CFTypeID v16 = -1;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %d %p %p %ld\n", CurrTime, 15, LevelStr, "AVE_CFArray_GetChar", 203, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theArray, v4, a3, ValueAtIndex, v16);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (!ValueAtIndex)
      {
        CFTypeID v17 = -1;
        goto LABEL_24;
      }
    }
    else if (!ValueAtIndex)
    {
      CFTypeID v17 = -1;
      goto LABEL_24;
    }
    CFTypeID v17 = CFGetTypeID(ValueAtIndex);
LABEL_24:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %d %p %p %ld", CurrTime, 15, LevelStr, "AVE_CFArray_GetChar", 203, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theArray, v4, a3, ValueAtIndex, v17);
    return 4294966296;
  }
  if (AVE_Log_CheckLevel(0xFu, 4))
  {
    int v9 = AVE_Log_CheckConsole(0xFu);
    __uint64_t v10 = AVE_GetCurrTime();
    int v11 = AVE_Log_GetLevelStr(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p\n", v10, 15, v11, "AVE_CFArray_GetChar", 196, "pArray != __null && idx >= 0 && pVal != __null", theArray, v4, a3);
      __uint64_t v12 = AVE_GetCurrTime();
      double v18 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

uint64_t AVE_CFArray_GetSInt16(CFArrayRef theArray, CFIndex idx, __int16 *a3)
{
  int v4 = idx;
  if (theArray && (idx & 0x80000000) == 0 && a3)
  {
    *a3 = 0;
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, idx);
    if (ValueAtIndex)
    {
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(ValueAtIndex))
      {
        if (CFNumberGetValue(ValueAtIndex, kCFNumberSInt16Type, a3)) {
          return 0;
        }
        else {
          return 4294966288;
        }
      }
    }
    if (!AVE_Log_CheckLevel(0xFu, 4)) {
      return 4294966296;
    }
    int v13 = AVE_Log_CheckConsole(0xFu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (v13)
    {
      if (ValueAtIndex) {
        CFTypeID v16 = CFGetTypeID(ValueAtIndex);
      }
      else {
        CFTypeID v16 = -1;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %d %p %p %ld\n", CurrTime, 15, LevelStr, "AVE_CFArray_GetSInt16", 234, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theArray, v4, a3, ValueAtIndex, v16);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (!ValueAtIndex)
      {
        CFTypeID v17 = -1;
        goto LABEL_24;
      }
    }
    else if (!ValueAtIndex)
    {
      CFTypeID v17 = -1;
      goto LABEL_24;
    }
    CFTypeID v17 = CFGetTypeID(ValueAtIndex);
LABEL_24:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %d %p %p %ld", CurrTime, 15, LevelStr, "AVE_CFArray_GetSInt16", 234, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theArray, v4, a3, ValueAtIndex, v17);
    return 4294966296;
  }
  if (AVE_Log_CheckLevel(0xFu, 4))
  {
    int v9 = AVE_Log_CheckConsole(0xFu);
    __uint64_t v10 = AVE_GetCurrTime();
    int v11 = AVE_Log_GetLevelStr(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p\n", v10, 15, v11, "AVE_CFArray_GetSInt16", 227, "pArray != __null && idx >= 0 && pVal != __null", theArray, v4, a3);
      __uint64_t v12 = AVE_GetCurrTime();
      double v18 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

uint64_t AVE_CFArray_GetSInt32(CFArrayRef theArray, CFIndex idx, int *a3)
{
  int v4 = idx;
  if (theArray && (idx & 0x80000000) == 0 && a3)
  {
    *a3 = 0;
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, idx);
    if (ValueAtIndex)
    {
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(ValueAtIndex))
      {
        if (CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, a3)) {
          return 0;
        }
        else {
          return 4294966288;
        }
      }
    }
    if (!AVE_Log_CheckLevel(0xFu, 4)) {
      return 4294966296;
    }
    int v13 = AVE_Log_CheckConsole(0xFu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (v13)
    {
      if (ValueAtIndex) {
        CFTypeID v16 = CFGetTypeID(ValueAtIndex);
      }
      else {
        CFTypeID v16 = -1;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %d %p %p %ld\n", CurrTime, 15, LevelStr, "AVE_CFArray_GetSInt32", 265, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theArray, v4, a3, ValueAtIndex, v16);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (!ValueAtIndex)
      {
        CFTypeID v17 = -1;
        goto LABEL_24;
      }
    }
    else if (!ValueAtIndex)
    {
      CFTypeID v17 = -1;
      goto LABEL_24;
    }
    CFTypeID v17 = CFGetTypeID(ValueAtIndex);
LABEL_24:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %d %p %p %ld", CurrTime, 15, LevelStr, "AVE_CFArray_GetSInt32", 265, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theArray, v4, a3, ValueAtIndex, v17);
    return 4294966296;
  }
  if (AVE_Log_CheckLevel(0xFu, 4))
  {
    int v9 = AVE_Log_CheckConsole(0xFu);
    __uint64_t v10 = AVE_GetCurrTime();
    int v11 = AVE_Log_GetLevelStr(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p\n", v10, 15, v11, "AVE_CFArray_GetSInt32", 258, "pArray != __null && idx >= 0 && pVal != __null", theArray, v4, a3);
      __uint64_t v12 = AVE_GetCurrTime();
      double v18 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

uint64_t AVE_CFArray_GetSInt64(CFArrayRef theArray, CFIndex idx, uint64_t *a3)
{
  int v4 = idx;
  if (theArray && (idx & 0x80000000) == 0 && a3)
  {
    *a3 = 0;
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, idx);
    if (ValueAtIndex)
    {
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(ValueAtIndex))
      {
        if (CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, a3)) {
          return 0;
        }
        else {
          return 4294966288;
        }
      }
    }
    if (!AVE_Log_CheckLevel(0xFu, 4)) {
      return 4294966296;
    }
    int v13 = AVE_Log_CheckConsole(0xFu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (v13)
    {
      if (ValueAtIndex) {
        CFTypeID v16 = CFGetTypeID(ValueAtIndex);
      }
      else {
        CFTypeID v16 = -1;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %d %p %p %ld\n", CurrTime, 15, LevelStr, "AVE_CFArray_GetSInt64", 296, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theArray, v4, a3, ValueAtIndex, v16);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (!ValueAtIndex)
      {
        CFTypeID v17 = -1;
        goto LABEL_24;
      }
    }
    else if (!ValueAtIndex)
    {
      CFTypeID v17 = -1;
      goto LABEL_24;
    }
    CFTypeID v17 = CFGetTypeID(ValueAtIndex);
LABEL_24:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %d %p %p %ld", CurrTime, 15, LevelStr, "AVE_CFArray_GetSInt64", 296, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theArray, v4, a3, ValueAtIndex, v17);
    return 4294966296;
  }
  if (AVE_Log_CheckLevel(0xFu, 4))
  {
    int v9 = AVE_Log_CheckConsole(0xFu);
    __uint64_t v10 = AVE_GetCurrTime();
    int v11 = AVE_Log_GetLevelStr(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p\n", v10, 15, v11, "AVE_CFArray_GetSInt64", 289, "pArray != __null && idx >= 0 && pVal != __null", theArray, v4, a3);
      __uint64_t v12 = AVE_GetCurrTime();
      double v18 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

uint64_t AVE_CFArray_GetFloat64(CFArrayRef theArray, CFIndex idx, double *a3)
{
  int v4 = idx;
  uint64_t valuePtr = 0;
  if (theArray && (idx & 0x80000000) == 0 && a3)
  {
    *a3 = 0.0;
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, idx);
    if (ValueAtIndex)
    {
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(ValueAtIndex))
      {
        if (CFNumberGetValue(ValueAtIndex, kCFNumberFloat64Type, &valuePtr)) {
          uint64_t result = 0;
        }
        else {
          uint64_t result = 4294966288;
        }
        *(void *)a3 = valuePtr;
        return result;
      }
    }
    if (!AVE_Log_CheckLevel(0xFu, 4)) {
      return 4294966296;
    }
    int v13 = AVE_Log_CheckConsole(0xFu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (v13)
    {
      if (ValueAtIndex) {
        CFTypeID v16 = CFGetTypeID(ValueAtIndex);
      }
      else {
        CFTypeID v16 = -1;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %d %p %p %ld\n", CurrTime, 15, LevelStr, "AVE_CFArray_GetFloat64", 328, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theArray, v4, a3, ValueAtIndex, v16);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (!ValueAtIndex)
      {
        CFTypeID v17 = -1;
        goto LABEL_25;
      }
    }
    else if (!ValueAtIndex)
    {
      CFTypeID v17 = -1;
      goto LABEL_25;
    }
    CFTypeID v17 = CFGetTypeID(ValueAtIndex);
LABEL_25:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %d %p %p %ld", CurrTime, 15, LevelStr, "AVE_CFArray_GetFloat64", 328, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theArray, v4, a3, ValueAtIndex, v17);
    return 4294966296;
  }
  if (AVE_Log_CheckLevel(0xFu, 4))
  {
    int v9 = AVE_Log_CheckConsole(0xFu);
    __uint64_t v10 = AVE_GetCurrTime();
    int v11 = AVE_Log_GetLevelStr(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p\n", v10, 15, v11, "AVE_CFArray_GetFloat64", 321, "pArray != __null && idx >= 0 && pVal != __null", theArray, v4, a3);
      __uint64_t v12 = AVE_GetCurrTime();
      double v18 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

uint64_t AVE_CFDict_AddBool(const __CFString *key, int a2, CFMutableDictionaryRef theDict)
{
  if (key && theDict)
  {
    uint64_t v6 = (const void **)MEMORY[0x1E4F1CFD0];
    if (!a2) {
      uint64_t v6 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    CFDictionaryAddValue(theDict, key, *v6);
    return 0;
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      int v8 = AVE_Log_CheckConsole(0xFu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p\n", CurrTime, 15, LevelStr, "AVE_CFDict_AddBool", 383, "pKey != __null && pDict != __null", key, a2, theDict);
        __uint64_t v11 = AVE_GetCurrTime();
        __uint64_t v12 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v11, 15, v12);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", CurrTime, 15, LevelStr);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_CFDict_AddDouble(const __CFString *a1, double a2, __CFDictionary *a3)
{
  double valuePtr = a2;
  if (a1 && a3)
  {
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
    if (v6)
    {
      CFNumberRef v7 = v6;
      CFDictionaryAddValue(a3, a1, v6);
      CFRelease(v7);
      return 0;
    }
    else
    {
      if (AVE_Log_CheckLevel(0xFu, 4))
      {
        int v12 = AVE_Log_CheckConsole(0xFu);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v12)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %lf %p\n", CurrTime, 15, LevelStr, "AVE_CFDict_AddDouble", 470, "pNum != __null", a1, valuePtr, a3);
          __uint64_t CurrTime = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %lf %p", CurrTime, 15);
      }
      return 4294966293;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      int v9 = AVE_Log_CheckConsole(0xFu);
      __uint64_t v10 = AVE_GetCurrTime();
      __uint64_t v11 = AVE_Log_GetLevelStr(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %lf %p\n", v10, 15, v11, "AVE_CFDict_AddDouble", 466, "pKey != __null && pDict != __null", a1, a2, a3);
        __uint64_t v10 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %lf %p", v10, 15);
    }
    return 4294966295;
  }
}

uint64_t AVE_CFDict_AddSInt64(const __CFString *a1, uint64_t a2, __CFDictionary *a3)
{
  uint64_t valuePtr = a2;
  if (a1 && a3)
  {
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
    if (v6)
    {
      CFNumberRef v7 = v6;
      CFDictionaryAddValue(a3, a1, v6);
      CFRelease(v7);
      return 0;
    }
    else
    {
      if (AVE_Log_CheckLevel(0xFu, 4))
      {
        int v13 = AVE_Log_CheckConsole(0xFu);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v13)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %lld %p\n", CurrTime, 15, LevelStr, "AVE_CFDict_AddSInt64", 591, "pNum != __null", a1, valuePtr, a3);
          __uint64_t v16 = AVE_GetCurrTime();
          double v18 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %lld %p", v16, 15, v18);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %lld %p", CurrTime, 15, LevelStr);
        }
      }
      return 4294966293;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      int v9 = AVE_Log_CheckConsole(0xFu);
      __uint64_t v10 = AVE_GetCurrTime();
      __uint64_t v11 = AVE_Log_GetLevelStr(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %lld %p\n", v10, 15, v11, "AVE_CFDict_AddSInt64", 587, "pKey != __null && pDict != __null", a1, a2, a3);
        __uint64_t v12 = AVE_GetCurrTime();
        CFTypeID v17 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %lld %p", v12, 15, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %lld %p", v10, 15, v11);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_CFDict_GetBool(CFDictionaryRef theDict, const __CFString *key, BOOL *a3)
{
  if (theDict && key && a3)
  {
    *a3 = 0;
    if (!CFDictionaryContainsKey(theDict, key)) {
      return 4294966288;
    }
    CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(theDict, key);
    if (Value)
    {
      CFTypeID TypeID = CFBooleanGetTypeID();
      if (TypeID == CFGetTypeID(Value))
      {
        int v8 = CFBooleanGetValue(Value);
        uint64_t result = 0;
        *a3 = v8 != 0;
        return result;
      }
    }
    if (!AVE_Log_CheckLevel(0xFu, 4)) {
      return 4294966296;
    }
    int v14 = AVE_Log_CheckConsole(0xFu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (v14)
    {
      if (Value) {
        CFTypeID v17 = CFGetTypeID(Value);
      }
      else {
        CFTypeID v17 = -1;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFBoolean %p %p %p %p %ld\n", CurrTime, 15, LevelStr, "AVE_CFDict_GetBool", 631, "pBool != __null && CFBooleanGetTypeID() == CFGetTypeID(pBool)", theDict, key, a3, Value, v17);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (!Value)
      {
        CFTypeID v18 = -1;
        goto LABEL_24;
      }
    }
    else if (!Value)
    {
      CFTypeID v18 = -1;
      goto LABEL_24;
    }
    CFTypeID v18 = CFGetTypeID(Value);
LABEL_24:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFBoolean %p %p %p %p %ld", CurrTime, 15, LevelStr, "AVE_CFDict_GetBool", 631, "pBool != __null && CFBooleanGetTypeID() == CFGetTypeID(pBool)", theDict, key, a3, Value, v18);
    return 4294966296;
  }
  if (AVE_Log_CheckLevel(0xFu, 4))
  {
    int v10 = AVE_Log_CheckConsole(0xFu);
    __uint64_t v11 = AVE_GetCurrTime();
    __uint64_t v12 = AVE_Log_GetLevelStr(4);
    if (v10)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v11, 15, v12, "AVE_CFDict_GetBool", 617, "pDict != __null && pKey != __null && pVal != __null", theDict, key, a3);
      __uint64_t v13 = AVE_GetCurrTime();
      double v19 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 15, v19);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v11, 15, v12);
    }
  }
  return 4294966295;
}

uint64_t AVE_CFDict_GetChar(CFDictionaryRef theDict, const __CFString *key, char *a3)
{
  if (theDict && key && a3)
  {
    *a3 = 0;
    if (!CFDictionaryContainsKey(theDict, key)) {
      return 4294966288;
    }
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, key);
    if (Value)
    {
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(Value))
      {
        if (CFNumberGetValue(Value, kCFNumberCharType, a3)) {
          return 0;
        }
        else {
          return 4294966288;
        }
      }
    }
    if (!AVE_Log_CheckLevel(0xFu, 4)) {
      return 4294966296;
    }
    int v13 = AVE_Log_CheckConsole(0xFu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (v13)
    {
      if (Value) {
        CFTypeID v16 = CFGetTypeID(Value);
      }
      else {
        CFTypeID v16 = -1;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld\n", CurrTime, 15, LevelStr, "AVE_CFDict_GetChar", 667, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v16);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (!Value)
      {
        CFTypeID v17 = -1;
        goto LABEL_26;
      }
    }
    else if (!Value)
    {
      CFTypeID v17 = -1;
      goto LABEL_26;
    }
    CFTypeID v17 = CFGetTypeID(Value);
LABEL_26:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld", CurrTime, 15, LevelStr, "AVE_CFDict_GetChar", 667, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v17);
    return 4294966296;
  }
  if (AVE_Log_CheckLevel(0xFu, 4))
  {
    int v9 = AVE_Log_CheckConsole(0xFu);
    __uint64_t v10 = AVE_GetCurrTime();
    __uint64_t v11 = AVE_Log_GetLevelStr(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v10, 15, v11, "AVE_CFDict_GetChar", 653, "pDict != __null && pKey != __null && pVal != __null", theDict, key, a3);
      __uint64_t v12 = AVE_GetCurrTime();
      CFTypeID v18 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

uint64_t AVE_CFDict_GetDouble(CFDictionaryRef theDict, const __CFString *key, double *a3)
{
  if (theDict && key && a3)
  {
    *a3 = 0.0;
    if (!CFDictionaryContainsKey(theDict, key)) {
      return 4294966288;
    }
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, key);
    if (Value)
    {
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(Value))
      {
        if (CFNumberGetValue(Value, kCFNumberDoubleType, a3)) {
          return 0;
        }
        else {
          return 4294966288;
        }
      }
    }
    if (!AVE_Log_CheckLevel(0xFu, 4)) {
      return 4294966296;
    }
    int v13 = AVE_Log_CheckConsole(0xFu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (v13)
    {
      if (Value) {
        CFTypeID v16 = CFGetTypeID(Value);
      }
      else {
        CFTypeID v16 = -1;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld\n", CurrTime, 15, LevelStr, "AVE_CFDict_GetDouble", 743, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v16);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (!Value)
      {
        CFTypeID v17 = -1;
        goto LABEL_26;
      }
    }
    else if (!Value)
    {
      CFTypeID v17 = -1;
      goto LABEL_26;
    }
    CFTypeID v17 = CFGetTypeID(Value);
LABEL_26:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld", CurrTime, 15, LevelStr, "AVE_CFDict_GetDouble", 743, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v17);
    return 4294966296;
  }
  if (AVE_Log_CheckLevel(0xFu, 4))
  {
    int v9 = AVE_Log_CheckConsole(0xFu);
    __uint64_t v10 = AVE_GetCurrTime();
    __uint64_t v11 = AVE_Log_GetLevelStr(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v10, 15, v11, "AVE_CFDict_GetDouble", 729, "pDict != __null && pKey != __null && pVal != __null", theDict, key, a3);
      __uint64_t v12 = AVE_GetCurrTime();
      CFTypeID v18 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

uint64_t AVE_CFDict_GetSInt16(CFDictionaryRef theDict, const __CFString *key, __int16 *a3)
{
  if (theDict && key && a3)
  {
    *a3 = 0;
    if (!CFDictionaryContainsKey(theDict, key)) {
      return 4294966288;
    }
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, key);
    if (Value)
    {
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(Value))
      {
        if (CFNumberGetValue(Value, kCFNumberSInt16Type, a3)) {
          return 0;
        }
        else {
          return 4294966288;
        }
      }
    }
    if (!AVE_Log_CheckLevel(0xFu, 4)) {
      return 4294966296;
    }
    int v13 = AVE_Log_CheckConsole(0xFu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (v13)
    {
      if (Value) {
        CFTypeID v16 = CFGetTypeID(Value);
      }
      else {
        CFTypeID v16 = -1;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld\n", CurrTime, 15, LevelStr, "AVE_CFDict_GetSInt16", 818, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v16);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (!Value)
      {
        CFTypeID v17 = -1;
        goto LABEL_26;
      }
    }
    else if (!Value)
    {
      CFTypeID v17 = -1;
      goto LABEL_26;
    }
    CFTypeID v17 = CFGetTypeID(Value);
LABEL_26:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld", CurrTime, 15, LevelStr, "AVE_CFDict_GetSInt16", 818, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v17);
    return 4294966296;
  }
  if (AVE_Log_CheckLevel(0xFu, 4))
  {
    int v9 = AVE_Log_CheckConsole(0xFu);
    __uint64_t v10 = AVE_GetCurrTime();
    __uint64_t v11 = AVE_Log_GetLevelStr(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v10, 15, v11, "AVE_CFDict_GetSInt16", 804, "pDict != __null && pKey != __null && pVal != __null", theDict, key, a3);
      __uint64_t v12 = AVE_GetCurrTime();
      CFTypeID v18 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

uint64_t AVE_CFDict_GetSInt32(CFDictionaryRef theDict, const __CFString *key, int *a3)
{
  if (theDict && key && a3)
  {
    *a3 = 0;
    if (!CFDictionaryContainsKey(theDict, key)) {
      return 4294966288;
    }
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, key);
    if (Value)
    {
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(Value))
      {
        if (CFNumberGetValue(Value, kCFNumberSInt32Type, a3)) {
          return 0;
        }
        else {
          return 4294966288;
        }
      }
    }
    if (!AVE_Log_CheckLevel(0xFu, 4)) {
      return 4294966296;
    }
    int v13 = AVE_Log_CheckConsole(0xFu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (v13)
    {
      if (Value) {
        CFTypeID v16 = CFGetTypeID(Value);
      }
      else {
        CFTypeID v16 = -1;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld\n", CurrTime, 15, LevelStr, "AVE_CFDict_GetSInt32", 856, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v16);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (!Value)
      {
        CFTypeID v17 = -1;
        goto LABEL_26;
      }
    }
    else if (!Value)
    {
      CFTypeID v17 = -1;
      goto LABEL_26;
    }
    CFTypeID v17 = CFGetTypeID(Value);
LABEL_26:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld", CurrTime, 15, LevelStr, "AVE_CFDict_GetSInt32", 856, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v17);
    return 4294966296;
  }
  if (AVE_Log_CheckLevel(0xFu, 4))
  {
    int v9 = AVE_Log_CheckConsole(0xFu);
    __uint64_t v10 = AVE_GetCurrTime();
    __uint64_t v11 = AVE_Log_GetLevelStr(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v10, 15, v11, "AVE_CFDict_GetSInt32", 842, "pDict != __null && pKey != __null && pVal != __null", theDict, key, a3);
      __uint64_t v12 = AVE_GetCurrTime();
      CFTypeID v18 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

uint64_t AVE_CFDict_GetSInt64(CFDictionaryRef theDict, const __CFString *key, uint64_t *a3)
{
  if (theDict && key && a3)
  {
    *a3 = 0;
    if (!CFDictionaryContainsKey(theDict, key)) {
      return 4294966288;
    }
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, key);
    if (Value)
    {
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(Value))
      {
        if (CFNumberGetValue(Value, kCFNumberSInt64Type, a3)) {
          return 0;
        }
        else {
          return 4294966288;
        }
      }
    }
    if (!AVE_Log_CheckLevel(0xFu, 4)) {
      return 4294966296;
    }
    int v13 = AVE_Log_CheckConsole(0xFu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (v13)
    {
      if (Value) {
        CFTypeID v16 = CFGetTypeID(Value);
      }
      else {
        CFTypeID v16 = -1;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld\n", CurrTime, 15, LevelStr, "AVE_CFDict_GetSInt64", 894, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v16);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (!Value)
      {
        CFTypeID v17 = -1;
        goto LABEL_26;
      }
    }
    else if (!Value)
    {
      CFTypeID v17 = -1;
      goto LABEL_26;
    }
    CFTypeID v17 = CFGetTypeID(Value);
LABEL_26:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld", CurrTime, 15, LevelStr, "AVE_CFDict_GetSInt64", 894, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v17);
    return 4294966296;
  }
  if (AVE_Log_CheckLevel(0xFu, 4))
  {
    int v9 = AVE_Log_CheckConsole(0xFu);
    __uint64_t v10 = AVE_GetCurrTime();
    __uint64_t v11 = AVE_Log_GetLevelStr(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v10, 15, v11, "AVE_CFDict_GetSInt64", 880, "pDict != __null && pKey != __null && pVal != __null", theDict, key, a3);
      __uint64_t v12 = AVE_GetCurrTime();
      CFTypeID v18 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

const char *AVE_CFStr_GetStr(const __CFString *a1, char *a2, int a3)
{
  if (a1)
  {
    uint64_t result = CFStringGetCStringPtr(a1, 0);
    if (a3 >= 1 && a2 && !result)
    {
      CFStringGetCString(a1, a2, a3, 0);
      return a2;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      int v7 = AVE_Log_CheckConsole(0xFu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", CurrTime, 15, LevelStr, "AVE_CFStr_GetStr", 916, "pStr != __null", 0, a2, a3);
        __uint64_t v10 = AVE_GetCurrTime();
        __uint64_t v11 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v10, 15, v11);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", CurrTime, 15, LevelStr);
      }
    }
    return 0;
  }
  return result;
}

char **AVE_GetSurfaceCfg(int a1)
{
  if (a1 >= 40) {
    return 0;
  }
  else {
    return &(&gs_saAVE_SurfaceCfg)[2 * a1];
  }
}

char *AVE_DevID2Type(int a1)
{
  uint64_t result = AVE_DevCap_Find(a1);
  if (result) {
    return (char *)*((unsigned int *)result + 1);
  }
  return result;
}

uint64_t AVE_TimeStats_Create(int a1, unsigned int a2, void *a3)
{
  if (AVE_Log_CheckLevel(0x3Cu, 6))
  {
    int v6 = AVE_Log_CheckConsole(0x3Cu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %d %d %p\n", CurrTime, 60, LevelStr, "AVE_TimeStats_Create", a1, a2, 0);
      __uint64_t CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %d %d %p", CurrTime);
  }
  if ((a2 & 0x80000000) != 0 || !a3)
  {
    if (AVE_Log_CheckLevel(0x3Cu, 4))
    {
      int v16 = AVE_Log_CheckConsole(0x3Cu);
      __uint64_t v17 = AVE_GetCurrTime();
      CFTypeID v18 = AVE_Log_GetLevelStr(4);
      if (v16)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %d %d %p\n", v17, 60, v18, "AVE_TimeStats_Create", 29, "num >= 0 && ppTS != __null", a1, a2, a3);
        __uint64_t v17 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %d %d %p", v17, 60);
    }
    __uint64_t v10 = 0;
    uint64_t v11 = 4294966295;
  }
  else
  {
    int v9 = malloc_type_malloc(0xE8uLL, 0x1020040B8ADF5CEuLL);
    if (v9)
    {
      __uint64_t v10 = v9;
      uint64_t v11 = AVE_TimeStats_Init(v9, a1, a2);
      if (v11)
      {
        if (AVE_Log_CheckLevel(0x3Cu, 4))
        {
          int v12 = AVE_Log_CheckConsole(0x3Cu);
          __uint64_t v13 = AVE_GetCurrTime();
          int v14 = AVE_Log_GetLevelStr(4);
          if (v12)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to initialize time stats %p %d %d %d\n", v13, 60, v14, "AVE_TimeStats_Create", 37, "ret == 0", v10, a1, a2, v11);
            __uint64_t v15 = AVE_GetCurrTime();
            double v27 = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to initialize time stats %p %d %d %d", v15, 60, v27);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to initialize time stats %p %d %d %d", v13, 60, v14);
          }
        }
        AVE_TimeStats_Uninit(v10);
        free(v10);
      }
      else
      {
        *a3 = v10;
      }
    }
    else
    {
      if (AVE_Log_CheckLevel(0x3Cu, 4))
      {
        int v19 = AVE_Log_CheckConsole(0x3Cu);
        __uint64_t v20 = AVE_GetCurrTime();
        double v21 = AVE_Log_GetLevelStr(4);
        if (v19)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create time stats %d %d %p\n", v20, 60, v21, "AVE_TimeStats_Create", 33, "pTS != __null", a1, a2, a3);
          __uint64_t v20 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create time stats %d %d %p", v20, 60);
      }
      __uint64_t v10 = 0;
      uint64_t v11 = 4294966293;
    }
  }
  if (AVE_Log_CheckLevel(0x3Cu, 6))
  {
    int v22 = AVE_Log_CheckConsole(0x3Cu);
    __uint64_t v23 = AVE_GetCurrTime();
    __uint64_t v24 = AVE_Log_GetLevelStr(6);
    if (v22)
    {
      printf("%lld %d AVE %s: %s Exit %d %d %p %d\n", v23, 60, v24, "AVE_TimeStats_Create", a1, a2, v10, v11);
      __uint64_t v25 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s Exit %d %d %p %d", v25, 60);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %d %d %p %d", v23, 60);
    }
  }
  return v11;
}

uint64_t AVE_TimeStats_Init(_OWORD *a1, int a2, unsigned int a3)
{
  if (AVE_Log_CheckLevel(0x3Cu, 6))
  {
    int v6 = AVE_Log_CheckConsole(0x3Cu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %d\n", CurrTime, 60, LevelStr, "AVE_TimeStats_Init", a1, a2, a3);
      __uint64_t CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %d", CurrTime);
  }
  if (!a1 || (a3 & 0x80000000) != 0)
  {
    if (AVE_Log_CheckLevel(0x3Cu, 4))
    {
      int v11 = AVE_Log_CheckConsole(0x3Cu);
      __uint64_t v12 = AVE_GetCurrTime();
      __uint64_t v13 = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d\n", v12, 60, v13, "AVE_TimeStats_Init", 103, "pTS != __null && num >= 0", a1, a2, a3);
        __uint64_t v12 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d", v12, 60);
    }
    uint64_t v10 = 4294966295;
  }
  else
  {
    *((void *)a1 + 28) = 0;
    a1[12] = 0u;
    a1[13] = 0u;
    a1[10] = 0u;
    a1[11] = 0u;
    a1[8] = 0u;
    a1[9] = 0u;
    a1[6] = 0u;
    a1[7] = 0u;
    a1[4] = 0u;
    a1[5] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    *a1 = 0u;
    a1[1] = 0u;
    pthread_mutex_init((pthread_mutex_t *)((char *)a1 + 136), 0);
    if (!a3) {
      a3 = 2;
    }
    int v9 = malloc_type_malloc(16 * a3, 0x1000040451B5BE8uLL);
    if (v9)
    {
      uint64_t v10 = 0;
      *(_DWORD *)a1 = a2;
      *((_DWORD *)a1 + 1) = a3;
      *((void *)a1 + 1) = v9;
    }
    else
    {
      if (AVE_Log_CheckLevel(0x3Cu, 4))
      {
        int v14 = AVE_Log_CheckConsole(0x3Cu);
        __uint64_t v15 = AVE_GetCurrTime();
        int v16 = AVE_Log_GetLevelStr(4);
        if (v14)
        {
          printf("%lld %d AVE %s: %s:%d %s | failed to allocate memory of time pair %p %d %d\n", v15, 60, v16, "AVE_TimeStats_Init", 116, "pTP != __null", a1, a2, a3);
          __uint64_t v15 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to allocate memory of time pair %p %d %d", v15, 60);
      }
      pthread_mutex_destroy((pthread_mutex_t *)((char *)a1 + 136));
      uint64_t v10 = 4294966293;
    }
  }
  if (AVE_Log_CheckLevel(0x3Cu, 6))
  {
    int v17 = AVE_Log_CheckConsole(0x3Cu);
    __uint64_t v18 = AVE_GetCurrTime();
    int v19 = AVE_Log_GetLevelStr(6);
    if (v17)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %d %d\n", v18, 60, v19, "AVE_TimeStats_Init", a1, a2, a3, v10);
      __uint64_t v20 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %d %d", v20);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %d %d", v18);
    }
  }
  return v10;
}

uint64_t AVE_TimeStats_Uninit(_OWORD *a1)
{
  if (AVE_Log_CheckLevel(0x3Cu, 6))
  {
    int v2 = AVE_Log_CheckConsole(0x3Cu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", CurrTime, 60, LevelStr, "AVE_TimeStats_Uninit", a1);
      __uint64_t v5 = AVE_GetCurrTime();
      int v16 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 60, v16, "AVE_TimeStats_Uninit", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", CurrTime, 60, LevelStr, "AVE_TimeStats_Uninit", a1);
    }
  }
  if (a1)
  {
    int v6 = (void *)*((void *)a1 + 1);
    if (v6)
    {
      free(v6);
      *((void *)a1 + 1) = 0;
    }
    pthread_mutex_destroy((pthread_mutex_t *)((char *)a1 + 136));
    uint64_t v7 = 0;
    *a1 = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    a1[4] = 0u;
    a1[5] = 0u;
    a1[6] = 0u;
    a1[7] = 0u;
    a1[8] = 0u;
    a1[9] = 0u;
    a1[10] = 0u;
    a1[11] = 0u;
    a1[12] = 0u;
    a1[13] = 0u;
    *((void *)a1 + 28) = 0;
  }
  else
  {
    if (AVE_Log_CheckLevel(0x3Cu, 4))
    {
      int v8 = AVE_Log_CheckConsole(0x3Cu);
      __uint64_t v9 = AVE_GetCurrTime();
      uint64_t v10 = AVE_Log_GetLevelStr(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p\n", v9, 60, v10, "AVE_TimeStats_Uninit", 157, "pTS != __null", 0);
        __uint64_t v9 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p", v9);
    }
    uint64_t v7 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x3Cu, 6))
  {
    int v11 = AVE_Log_CheckConsole(0x3Cu);
    __uint64_t v12 = AVE_GetCurrTime();
    __uint64_t v13 = AVE_Log_GetLevelStr(6);
    if (v11)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v12, 60, v13, "AVE_TimeStats_Uninit", a1, v7);
      __uint64_t v14 = AVE_GetCurrTime();
      int v17 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v14, 60, v17, "AVE_TimeStats_Uninit", a1, v7);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v12, 60, v13, "AVE_TimeStats_Uninit", a1, v7);
    }
  }
  return v7;
}

uint64_t AVE_TimeStats_Destroy(_OWORD *a1)
{
  if (AVE_Log_CheckLevel(0x3Cu, 6))
  {
    int v2 = AVE_Log_CheckConsole(0x3Cu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", CurrTime, 60, LevelStr, "AVE_TimeStats_Destroy", a1);
      __uint64_t v5 = AVE_GetCurrTime();
      __uint64_t v15 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 60, v15, "AVE_TimeStats_Destroy", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", CurrTime, 60, LevelStr, "AVE_TimeStats_Destroy", a1);
    }
  }
  if (a1)
  {
    uint64_t v6 = AVE_TimeStats_Uninit(a1);
    free(a1);
  }
  else
  {
    if (AVE_Log_CheckLevel(0x3Cu, 4))
    {
      int v7 = AVE_Log_CheckConsole(0x3Cu);
      __uint64_t v8 = AVE_GetCurrTime();
      __uint64_t v9 = AVE_Log_GetLevelStr(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p\n", v8, 60, v9, "AVE_TimeStats_Destroy", 73, "pTS != __null", 0);
        __uint64_t v8 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p", v8);
    }
    uint64_t v6 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x3Cu, 6))
  {
    int v10 = AVE_Log_CheckConsole(0x3Cu);
    __uint64_t v11 = AVE_GetCurrTime();
    __uint64_t v12 = AVE_Log_GetLevelStr(6);
    if (v10)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v11, 60, v12, "AVE_TimeStats_Destroy", a1, v6);
      __uint64_t v13 = AVE_GetCurrTime();
      int v16 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v13, 60, v16, "AVE_TimeStats_Destroy", a1, v6);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v11, 60, v12, "AVE_TimeStats_Destroy", a1, v6);
    }
  }
  return v6;
}

uint64_t AVE_TimeStats_Restart(uint64_t a1)
{
  if (AVE_Log_CheckLevel(0x3Cu, 6))
  {
    int v2 = AVE_Log_CheckConsole(0x3Cu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", CurrTime, 60, LevelStr, "AVE_TimeStats_Restart", (const void *)a1);
      __uint64_t v5 = AVE_GetCurrTime();
      __uint64_t v15 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 60, v15, "AVE_TimeStats_Restart", (const void *)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", CurrTime, 60, LevelStr, "AVE_TimeStats_Restart", (const void *)a1);
    }
  }
  if (a1)
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 136));
    ++*(_DWORD *)(a1 + 16);
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 136));
    uint64_t v6 = 0;
  }
  else
  {
    if (AVE_Log_CheckLevel(0x3Cu, 4))
    {
      int v7 = AVE_Log_CheckConsole(0x3Cu);
      __uint64_t v8 = AVE_GetCurrTime();
      __uint64_t v9 = AVE_Log_GetLevelStr(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p\n", v8, 60, v9, "AVE_TimeStats_Restart", 190, "pTS != __null", 0);
        __uint64_t v8 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p", v8);
    }
    uint64_t v6 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x3Cu, 6))
  {
    int v10 = AVE_Log_CheckConsole(0x3Cu);
    __uint64_t v11 = AVE_GetCurrTime();
    __uint64_t v12 = AVE_Log_GetLevelStr(6);
    if (v10)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v11, 60, v12, "AVE_TimeStats_Restart", (const void *)a1, v6);
      __uint64_t v13 = AVE_GetCurrTime();
      int v16 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v13, 60, v16, "AVE_TimeStats_Restart", (const void *)a1, v6);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v11, 60, v12, "AVE_TimeStats_Restart", (const void *)a1, v6);
    }
  }
  return v6;
}

uint64_t AVE_TimeStats_AddStartTime(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (AVE_Log_CheckLevel(0x3Cu, 7))
  {
    int v6 = AVE_Log_CheckConsole(0x3Cu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %lld\n", CurrTime, 60, LevelStr, "AVE_TimeStats_AddStartTime", (const void *)a1, a2, a3);
      __uint64_t CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %lld", CurrTime);
  }
  if (!a1 || a2 > 6 || a3 < 0)
  {
    if (AVE_Log_CheckLevel(0x3Cu, 4))
    {
      int v12 = AVE_Log_CheckConsole(0x3Cu);
      __uint64_t v13 = AVE_GetCurrTime();
      __uint64_t v14 = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %lld\n", v13, 60, v14, "AVE_TimeStats_AddStartTime", 222, "pTS != __null && 0 <= pos && pos < AVE_TimeStats_Pos_Max && ts >= 0", (const void *)a1, a2, a3);
        __uint64_t v15 = AVE_GetCurrTime();
        __uint64_t v25 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %lld", v15, 60, v25);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %lld", v13, 60, v14);
      }
    }
    uint64_t v11 = 4294966295;
  }
  else
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 136));
    uint64_t v9 = *(void *)(a1 + 8);
    if (v9)
    {
      int v10 = *(_DWORD *)(a1 + 16);
      if (a2 == 5) {
        *(void *)(v9 + 16 * (v10 % *(_DWORD *)(a1 + 4))) = a3;
      }
      uint64_t v11 = 0;
      if (!v10) {
        *(void *)(a1 + 16 * a2 + 24) = a3;
      }
    }
    else
    {
      if (AVE_Log_CheckLevel(0x3Cu, 4))
      {
        int v16 = AVE_Log_CheckConsole(0x3Cu);
        __uint64_t v17 = AVE_GetCurrTime();
        __uint64_t v18 = AVE_Log_GetLevelStr(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | wrong state %p %d %lld\n", v17, 60, v18, "AVE_TimeStats_AddStartTime", 227, "pTS->psTP != __null", (const void *)a1, a2, a3);
          __uint64_t v19 = AVE_GetCurrTime();
          __uint64_t v26 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | wrong state %p %d %lld", v19, 60, v26);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | wrong state %p %d %lld", v17, 60, v18);
        }
      }
      uint64_t v11 = 4294966285;
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 136));
  }
  if (AVE_Log_CheckLevel(0x3Cu, 7))
  {
    int v20 = AVE_Log_CheckConsole(0x3Cu);
    __uint64_t v21 = AVE_GetCurrTime();
    int v22 = AVE_Log_GetLevelStr(7);
    if (v20)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %lld %d\n", v21, 60, v22, "AVE_TimeStats_AddStartTime", (const void *)a1, a2, a3, v11);
      __uint64_t v23 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %lld %d", v23, 60);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %lld %d", v21, 60);
    }
  }
  return v11;
}

uint64_t AVE_TimeStats_AddEndTime(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (AVE_Log_CheckLevel(0x3Cu, 7))
  {
    int v6 = AVE_Log_CheckConsole(0x3Cu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %lld\n", CurrTime, 60, LevelStr, "AVE_TimeStats_AddEndTime", (const void *)a1, a2, a3);
      __uint64_t CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %lld", CurrTime);
  }
  if (!a1 || a2 > 6 || a3 < 0)
  {
    if (AVE_Log_CheckLevel(0x3Cu, 4))
    {
      int v11 = AVE_Log_CheckConsole(0x3Cu);
      __uint64_t v12 = AVE_GetCurrTime();
      __uint64_t v13 = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %lld\n", v12, 60, v13, "AVE_TimeStats_AddEndTime", 269, "pTS != __null && 0 <= pos && pos < AVE_TimeStats_Pos_Max && ts >= 0", (const void *)a1, a2, a3);
        __uint64_t v14 = AVE_GetCurrTime();
        __uint64_t v24 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %lld", v14, 60, v24);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %lld", v12, 60, v13);
      }
    }
    uint64_t v10 = 4294966295;
  }
  else
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 136));
    uint64_t v9 = *(void *)(a1 + 8);
    if (v9)
    {
      if (a2 == 5) {
        *(void *)(v9 + 16 * (*(_DWORD *)(a1 + 16) % *(_DWORD *)(a1 + 4)) + 8) = a3;
      }
      uint64_t v10 = 0;
      *(void *)(a1 + 16 * a2 + 32) = a3;
    }
    else
    {
      if (AVE_Log_CheckLevel(0x3Cu, 4))
      {
        int v15 = AVE_Log_CheckConsole(0x3Cu);
        __uint64_t v16 = AVE_GetCurrTime();
        __uint64_t v17 = AVE_Log_GetLevelStr(4);
        if (v15)
        {
          printf("%lld %d AVE %s: %s:%d %s | wrong state %p %d %lld\n", v16, 60, v17, "AVE_TimeStats_AddEndTime", 274, "pTS->psTP != __null", (const void *)a1, a2, a3);
          __uint64_t v18 = AVE_GetCurrTime();
          __uint64_t v25 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | wrong state %p %d %lld", v18, 60, v25);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | wrong state %p %d %lld", v16, 60, v17);
        }
      }
      uint64_t v10 = 4294966285;
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 136));
  }
  if (AVE_Log_CheckLevel(0x3Cu, 7))
  {
    int v19 = AVE_Log_CheckConsole(0x3Cu);
    __uint64_t v20 = AVE_GetCurrTime();
    __uint64_t v21 = AVE_Log_GetLevelStr(7);
    if (v19)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %lld %d\n", v20, 60, v21, "AVE_TimeStats_AddEndTime", (const void *)a1, a2, a3, v10);
      __uint64_t v22 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %lld %d", v22, 60);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %lld %d", v20, 60);
    }
  }
  return v10;
}

uint64_t AVE_TimeStats_Calc(uint64_t a1)
{
  if (AVE_Log_CheckLevel(0x3Cu, 7))
  {
    int v2 = AVE_Log_CheckConsole(0x3Cu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", CurrTime, 60, LevelStr, "AVE_TimeStats_Calc", (const void *)a1);
      __uint64_t v5 = AVE_GetCurrTime();
      uint64_t v29 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 60, v29, "AVE_TimeStats_Calc", (const void *)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", CurrTime, 60, LevelStr, "AVE_TimeStats_Calc", (const void *)a1);
    }
  }
  if (!a1)
  {
    if (AVE_Log_CheckLevel(0x3Cu, 4))
    {
      int v18 = AVE_Log_CheckConsole(0x3Cu);
      __uint64_t v19 = AVE_GetCurrTime();
      __uint64_t v20 = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p\n", v19, 60, v20, "AVE_TimeStats_Calc", 313, "pTS != __null", 0);
        __uint64_t v19 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p", v19);
    }
    uint64_t v17 = 4294966295;
    goto LABEL_38;
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 136));
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6)
  {
    if (AVE_Log_CheckLevel(0x3Cu, 4))
    {
      int v21 = AVE_Log_CheckConsole(0x3Cu);
      __uint64_t v22 = AVE_GetCurrTime();
      __uint64_t v23 = AVE_Log_GetLevelStr(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong state %p\n", v22, 60, v23, "AVE_TimeStats_Calc", 318, "pTS->psTP != __null", (const void *)a1);
        __uint64_t v22 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong state %p", v22);
    }
    uint64_t v17 = 4294966285;
    goto LABEL_37;
  }
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  int v7 = (uint64_t *)(a1 + 200);
  *(void *)(a1 + 216) = 0;
  int v8 = *(_DWORD *)(a1 + 16);
  unsigned int v9 = *(_DWORD *)(a1 + 4);
  if (v8 < (int)v9) {
    uint64_t v10 = (v8 + 1);
  }
  else {
    uint64_t v10 = v9;
  }
  if ((int)v10 < 1) {
    goto LABEL_32;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v14 = 0;
  int v15 = (void *)(v6 + 8);
  do
  {
    uint64_t v16 = *v15 - *(v15 - 1);
    if (v16 < 1) {
      goto LABEL_21;
    }
    if (v13)
    {
      if (v16 < v12)
      {
        *int v7 = v16;
        uint64_t v12 = v16;
      }
      if (v16 <= v11) {
        goto LABEL_20;
      }
    }
    else
    {
      *int v7 = v16;
      uint64_t v12 = v16;
    }
    *(void *)(a1 + 216) = v16;
    uint64_t v11 = v16;
LABEL_20:
    v14 += v16;
    ++v13;
LABEL_21:
    v15 += 2;
    --v10;
  }
  while (v10);
  if (v13)
  {
    uint64_t v17 = 0;
    *(void *)(a1 + 208) = v14 / v13;
    *(_DWORD *)(a1 + 224) = v13;
    goto LABEL_37;
  }
LABEL_32:
  uint64_t v17 = 0;
LABEL_37:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 136));
LABEL_38:
  if (AVE_Log_CheckLevel(0x3Cu, 7))
  {
    int v24 = AVE_Log_CheckConsole(0x3Cu);
    __uint64_t v25 = AVE_GetCurrTime();
    __uint64_t v26 = AVE_Log_GetLevelStr(7);
    if (v24)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v25, 60, v26, "AVE_TimeStats_Calc", (const void *)a1, v17);
      __uint64_t v27 = AVE_GetCurrTime();
      uint64_t v30 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v27, 60, v30, "AVE_TimeStats_Calc", (const void *)a1, v17);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v25, 60, v26, "AVE_TimeStats_Calc", (const void *)a1, v17);
    }
  }
  return v17;
}

uint64_t AVE_TimeStats_Print(unsigned int *a1, uint64_t a2, int a3, const void *a4, int a5)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  memset(v45, 0, sizeof(v45));
  if (a1)
  {
    int v10 = (char)a3;
    uint64_t result = AVE_Log_CheckLevel(a2, (char)a3);
    if (result)
    {
      AVE_ComposePosStr((uint64_t)a4, a5, (char *)v45, 32, v12, v13, v14, v15);
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 34));
      if (AVE_Log_CheckLevel(a2, (char)a3))
      {
        int v16 = AVE_Log_CheckConsole(a2);
        int v17 = v16;
        if (a3 < 0)
        {
          if (v16 && (-a3 & 0x20) == 0) {
            printf("TimeStats ID: %d %s | Session: %lld Process: %lld\n", *a1, (const char *)v45, *((void *)a1 + 6) - *((void *)a1 + 3), *((void *)a1 + 14) - *((void *)a1 + 13));
          }
          syslog(3, "TimeStats ID: %d %s | Session: %lld Process: %lld");
        }
        else
        {
          __uint64_t CurrTime = AVE_GetCurrTime();
          Leveluint64_t Str = AVE_Log_GetLevelStr((char)a3);
          if ((a3 & 0x20) == 0 && v17)
          {
            printf("%lld %d AVE %s: TimeStats ID: %d %s | Session: %lld Process: %lld\n", CurrTime, a2, LevelStr, *a1, (const char *)v45, *((void *)a1 + 6) - *((void *)a1 + 3), *((void *)a1 + 14) - *((void *)a1 + 13));
            __uint64_t CurrTime = AVE_GetCurrTime();
            AVE_Log_GetLevelStr((char)a3);
          }
          syslog(3, "%lld %d AVE %s: TimeStats ID: %d %s | Session: %lld Process: %lld", CurrTime);
        }
      }
      if (AVE_Log_CheckLevel(a2, (char)a3))
      {
        int v24 = AVE_Log_CheckConsole(a2);
        int v25 = v24;
        if (a3 < 0)
        {
          if (!v24 || (-a3 & 0x20) != 0)
          {
            syslog(3, "TimeStats ID: %d %s | Open: %lld Close: %lld Prepare: %lld Start: %lld Stop: %lld Complete: %lld", *a1, v45);
          }
          else
          {
            printf("TimeStats ID: %d %s | Open: %lld Close: %lld Prepare: %lld Start: %lld Stop: %lld Complete: %lld\n", *a1, (const char *)v45, *((void *)a1 + 4) - *((void *)a1 + 3), *((void *)a1 + 6) - *((void *)a1 + 5), *((void *)a1 + 8) - *((void *)a1 + 7), *((void *)a1 + 10) - *((void *)a1 + 9), *((void *)a1 + 12) - *((void *)a1 + 11), *((void *)a1 + 16) - *((void *)a1 + 15));
            syslog(3, "TimeStats ID: %d %s | Open: %lld Close: %lld Prepare: %lld Start: %lld Stop: %lld Complete: %lld", *a1, v45);
          }
        }
        else
        {
          __uint64_t v26 = AVE_GetCurrTime();
          __uint64_t v27 = AVE_Log_GetLevelStr((char)a3);
          if ((a3 & 0x20) != 0 || !v25)
          {
            uint64_t v43 = *((void *)a1 + 12) - *((void *)a1 + 11);
            uint64_t v44 = *((void *)a1 + 16) - *((void *)a1 + 15);
            uint64_t v41 = *((void *)a1 + 8) - *((void *)a1 + 7);
            uint64_t v42 = *((void *)a1 + 10) - *((void *)a1 + 9);
            uint64_t v39 = *((void *)a1 + 4) - *((void *)a1 + 3);
            uint64_t v40 = *((void *)a1 + 6) - *((void *)a1 + 5);
            uint64_t v38 = *a1;
            uint64_t v34 = a2;
            double v36 = v27;
          }
          else
          {
            printf("%lld %d AVE %s: TimeStats ID: %d %s | Open: %lld Close: %lld Prepare: %lld Start: %lld Stop: %lld Complete: %lld\n", v26, a2, v27, *a1, (const char *)v45, *((void *)a1 + 4) - *((void *)a1 + 3), *((void *)a1 + 6) - *((void *)a1 + 5), *((void *)a1 + 8) - *((void *)a1 + 7), *((void *)a1 + 10) - *((void *)a1 + 9), *((void *)a1 + 12) - *((void *)a1 + 11), *((void *)a1 + 16) - *((void *)a1 + 15));
            __uint64_t v26 = AVE_GetCurrTime();
            double v28 = AVE_Log_GetLevelStr((char)a3);
            uint64_t v43 = *((void *)a1 + 12) - *((void *)a1 + 11);
            uint64_t v44 = *((void *)a1 + 16) - *((void *)a1 + 15);
            uint64_t v41 = *((void *)a1 + 8) - *((void *)a1 + 7);
            uint64_t v42 = *((void *)a1 + 10) - *((void *)a1 + 9);
            uint64_t v39 = *((void *)a1 + 4) - *((void *)a1 + 3);
            uint64_t v40 = *((void *)a1 + 6) - *((void *)a1 + 5);
            uint64_t v38 = *a1;
            uint64_t v34 = a2;
            double v36 = v28;
          }
          syslog(3, "%lld %d AVE %s: TimeStats ID: %d %s | Open: %lld Close: %lld Prepare: %lld Start: %lld Stop: %lld Complete: %lld", v26, v34, v36, v38, v45, v39, v40, v41, v42, v43, v44);
        }
      }
      if (AVE_Log_CheckLevel(a2, (char)a3))
      {
        int v29 = AVE_Log_CheckConsole(a2);
        int v30 = v29;
        if (a3 < 0)
        {
          if (v29 && (-a3 & 0x20) == 0) {
            printf("TimeStats ID: %d %s | Process: %lld - %lld - %lld Count: %d\n", *a1, (const char *)v45, *((void *)a1 + 25), *((void *)a1 + 26), *((void *)a1 + 27), a1[56]);
          }
          syslog(3, "TimeStats ID: %d %s | Process: %lld - %lld - %lld Count: %d");
        }
        else
        {
          __uint64_t v31 = AVE_GetCurrTime();
          int v32 = AVE_Log_GetLevelStr((char)a3);
          if ((a3 & 0x20) != 0 || !v30)
          {
            syslog(3, "%lld %d AVE %s: TimeStats ID: %d %s | Process: %lld - %lld - %lld Count: %d", v31, a2, v32);
          }
          else
          {
            printf("%lld %d AVE %s: TimeStats ID: %d %s | Process: %lld - %lld - %lld Count: %d\n", v31, a2, v32, *a1, (const char *)v45, *((void *)a1 + 25), *((void *)a1 + 26), *((void *)a1 + 27), a1[56]);
            __uint64_t v33 = AVE_GetCurrTime();
            double v37 = AVE_Log_GetLevelStr(v10);
            syslog(3, "%lld %d AVE %s: TimeStats ID: %d %s | Process: %lld - %lld - %lld Count: %d", v33, a2, v37);
          }
        }
      }
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 34));
      return 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x3Cu, 4))
    {
      int v20 = AVE_Log_CheckConsole(0x3Cu);
      __uint64_t v21 = AVE_GetCurrTime();
      __uint64_t v22 = AVE_Log_GetLevelStr(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p %d\n", v21, 60, v22, "AVE_TimeStats_Print", 391, "pTS != __null", 0, a2, a3, a4, a5);
        __uint64_t v23 = AVE_GetCurrTime();
        double v35 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p %d", v23, 60, v35, "AVE_TimeStats_Print");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p %d", v21, 60, v22, "AVE_TimeStats_Print");
      }
    }
    return 4294966295;
  }
  return result;
}

uint64_t AVE_DW_Default(uint64_t a1)
{
  bzero((void *)a1, 0x588uLL);
  for (uint64_t i = 112; i != 784; i += 112)
    *(void *)(a1 + i) = -1;
  *(unsigned char *)(a1 + 792) = 0;
  *(void *)(a1 + 1104) = -1;
  *(void *)&long long v3 = 0xC0000000CLL;
  *((void *)&v3 + 1) = 0xC0000000CLL;
  *(_OWORD *)(a1 + 1128) = v3;
  *(void *)(a1 + 1144) = 0xC0000000CLL;
  *(_DWORD *)(a1 + 1152) = -13;
  *(_DWORD *)(a1 + 1184) = -1;
  *(void *)(a1 + 1192) = 0xBFF0000000000000;
  *(void *)(a1 + 1200) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1208) = -1;
  *(void *)(a1 + 1248) = -1;
  *(_DWORD *)(a1 + 1256) = -1;
  *(void *)(a1 + 1264) = -1;
  *(_DWORD *)(a1 + 1272) = -1;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 1280) = _Q0;
  *(void *)(a1 + 1304) = -1;
  *(void *)(a1 + 1312) = -1;
  *(_DWORD *)(a1 + 1320) = -1;
  *(void *)(a1 + 1348) = -1;
  *(void *)(a1 + 1356) = -1;
  *(void *)(a1 + 1364) = -1;
  *(void *)(a1 + 1372) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 1384) = -1;
  *(_DWORD *)(a1 + 1392) = -1;
  return 0;
}

uint64_t AVE_DW_RetrievePerf(_DWORD *a1)
{
  *(void *)long long v3 = 0;
  if (!AVE_DW_GetUInt32(0, "AVE_PerfFeatureOn", &v3[1])) {
    a1[14] = v3[1];
  }
  if (!AVE_DW_GetUInt32(0, "AVE_PerfFeatureOff", &v3[1])) {
    a1[15] = v3[1];
  }
  if (!AVE_DW_GetInt32(0, "AVE_InputQueueMaxCount", (int *)v3)) {
    a1[16] = v3[0];
  }
  if (!AVE_DW_GetInt32(0, "AVE_MaximumRealTimeFrameRate", (int *)v3)) {
    a1[17] = v3[0];
  }
  AVE_DW_RetrieveDPM(a1 + 18);
  return AVE_DW_RetrieveDLB(a1 + 26);
}

uint64_t AVE_DW_RetrieveDump(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  *(_OWORD *)__src = 0u;
  long long v6 = 0u;
  if (!AVE_DW_GetUInt32(0, "AVE_DumpFeature", &v4)) {
    *(_DWORD *)(a1 + 784) = v4;
  }
  if (!AVE_DW_GetUInt32(0, "AVE_DumpMode", &v4)) {
    *(_DWORD *)(a1 + 788) = v4;
  }
  uint64_t Str = AVE_DW_GetStr(0, "AVE_OutputPath", __src, 128);
  if (!Str) {
    strncpy((char *)(a1 + 792), __src, 0x7FuLL);
  }
  return Str;
}

uint64_t AVE_DW_RetrieveLog(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = 0;
  int v4 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  *(_OWORD *)__src = 0u;
  long long v7 = 0u;
  if (!AVE_DW_GetUInt64(0, "AVE_Verbose", &v5))
  {
    *(void *)(a1 + 8) = v5;
    *(_DWORD *)a1 |= 0x100u;
  }
  if (!AVE_DW_GetUInt64(0, "AVE_KernelVerbose", &v5))
  {
    *(void *)(a1 + 16) = v5;
    *(_DWORD *)a1 |= 0x200u;
  }
  if (!AVE_DW_GetUInt64(0, "AVE_FirmwareVerbose", &v5))
  {
    *(void *)(a1 + 24) = v5;
    *(_DWORD *)a1 |= 0x300u;
  }
  if (!AVE_DW_GetUInt64(0, "AVE_AlgVerbose", &v5))
  {
    *(void *)(a1 + 32) = v5;
    *(_DWORD *)a1 |= 0x400u;
  }
  if (!AVE_DW_GetInt32(0, "AVE_LogConsole", &v4)) {
    *(_DWORD *)(a1 + 40) = v4;
  }
  uint64_t Str = AVE_DW_GetStr(0, "AVE_LogPath", __src, 128);
  if (!Str) {
    strncpy((char *)(a1 + 44), __src, 0x7FuLL);
  }
  return Str;
}

uint64_t AVE_DW_RetrieveQP(_DWORD *a1)
{
  int v3 = 0;
  if (!AVE_DW_GetInt32(0, "AVE_InitialQPI", &v3)) {
    a1[282] = v3;
  }
  if (!AVE_DW_GetInt32(0, "AVE_InitialQPP", &v3)) {
    a1[283] = v3;
  }
  if (!AVE_DW_GetInt32(0, "AVE_InitialQPB", &v3)) {
    a1[284] = v3;
  }
  if (!AVE_DW_GetInt32(0, "AVE_SoftMinQP", &v3)) {
    a1[285] = v3;
  }
  if (!AVE_DW_GetInt32(0, "AVE_SoftMaxQP", &v3)) {
    a1[286] = v3;
  }
  if (!AVE_DW_GetInt32(0, "AVE_HardMinQP", &v3)) {
    a1[287] = v3;
  }
  uint64_t result = AVE_DW_GetInt32(0, "AVE_HardMaxQP", &v3);
  if (!result) {
    a1[288] = v3;
  }
  return result;
}

uint64_t AVE_DW_RetrieveRC(uint64_t a1)
{
  int v6 = 0;
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v3 = 0;
  if (!AVE_DW_GetUInt64(0, "AVE_RCFeatureOn", &v4)) {
    *(void *)(a1 + 1160) = v4;
  }
  if (!AVE_DW_GetUInt64(0, "AVE_RCFeatureOff", &v4)) {
    *(void *)(a1 + 1168) = v4;
  }
  if (!AVE_DW_GetInt32(0, "AVE_RCMode", &v6)) {
    *(_DWORD *)(a1 + 1176) = v6;
  }
  if (!AVE_DW_GetInt32(0, "AVE_Bitrate", &v6)) {
    *(_DWORD *)(a1 + 1180) = v6;
  }
  if (!AVE_DW_GetInt32(0, "AVE_Quality", &v6)) {
    *(_DWORD *)(a1 + 1184) = v6;
  }
  if (!AVE_DW_GetDouble(0, "AVE_VBVBufferSize", (double *)&v3)) {
    *(void *)(a1 + 1192) = v3;
  }
  if (!AVE_DW_GetDouble(0, "AVE_VBVInitialDelay", (double *)&v3)) {
    *(void *)(a1 + 1200) = v3;
  }
  if (!AVE_DW_GetInt32(0, "AVE_LookAheadFrameCount", &v6)) {
    *(_DWORD *)(a1 + 1208) = v6;
  }
  if (!AVE_DW_GetInt32(0, "AVE_Parallel_Limit", &v6)) {
    *(_DWORD *)(a1 + 1212) = v6;
  }
  if (!AVE_DW_GetInt64(0, "AVE_Parallel_MinFrameCnt", &v5)) {
    *(void *)(a1 + 1216) = v5;
  }
  uint64_t result = AVE_DW_GetInt64(0, "AVE_Parallel_MinDuration", &v5);
  if (!result) {
    *(void *)(a1 + 1224) = v5;
  }
  return result;
}

uint64_t AVE_DW_RetrieveQPMod(uint64_t a1)
{
  unsigned int v3 = 0;
  if (!AVE_DW_GetUInt32(0, "AVE_QPModFeatureOn", &v3)) {
    *(_DWORD *)(a1 + 1232) = v3;
  }
  uint64_t result = AVE_DW_GetUInt32(0, "AVE_QPModFeatureOff", &v3);
  if (!result) {
    *(_DWORD *)(a1 + 1236) = v3;
  }
  return result;
}

double AVE_DW_RetrieveGOP(uint64_t a1)
{
  double v3 = 0.0;
  *(void *)unint64_t v4 = 0;
  if (!AVE_DW_GetUInt32(0, "AVE_GOPFeatureOn", &v4[1])) {
    *(_DWORD *)(a1 + 1240) = v4[1];
  }
  if (!AVE_DW_GetUInt32(0, "AVE_GOPFeatureOff", &v4[1])) {
    *(_DWORD *)(a1 + 1244) = v4[1];
  }
  if (!AVE_DW_GetInt32(0, "AVE_BFrameNum", (int *)v4)) {
    *(_DWORD *)(a1 + 1248) = v4[0];
  }
  if (!AVE_DW_GetInt32(0, "AVE_TemporalLayerNum", (int *)v4)) {
    *(_DWORD *)(a1 + 1252) = v4[0];
  }
  if (!AVE_DW_GetInt32(0, "AVE_FrameRateTargetForAverageBitrate", (int *)v4)) {
    *(_DWORD *)(a1 + 1256) = v4[0];
  }
  if (!AVE_DW_GetInt32(0, "AVE_ExpectedFrameRate", (int *)v4)) {
    *(_DWORD *)(a1 + 1260) = v4[0];
  }
  if (!AVE_DW_GetInt32(0, "AVE_BaseFrameRate", (int *)v4)) {
    *(_DWORD *)(a1 + 1264) = v4[0];
  }
  if (!AVE_DW_GetInt32(0, "AVE_MaxKeyFrameInterval", (int *)v4)) {
    *(_DWORD *)(a1 + 1268) = v4[0];
  }
  if (!AVE_DW_GetInt32(0, "AVE_StrictKeyFrameInterval", (int *)v4)) {
    *(_DWORD *)(a1 + 1272) = v4[0];
  }
  if (!AVE_DW_GetDouble(0, "AVE_MaxKeyFrameIntervalDuration", &v3)) {
    *(double *)(a1 + 1280) = v3;
  }
  if (!AVE_DW_GetDouble(0, "AVE_StrictKeyFrameIntervalDuration", &v3))
  {
    double result = v3;
    *(double *)(a1 + 1288) = v3;
  }
  return result;
}

uint64_t AVE_DW_RetrieveRef(uint64_t a1)
{
  unsigned int v3 = 0;
  if (!AVE_DW_GetUInt32(0, "AVE_RefFeatureOn", &v3)) {
    *(_DWORD *)(a1 + 1296) = v3;
  }
  uint64_t result = AVE_DW_GetUInt32(0, "AVE_RefFeatureOff", &v3);
  if (!result) {
    *(_DWORD *)(a1 + 1300) = v3;
  }
  return result;
}

uint64_t AVE_DW_RetrieveMultipass(_DWORD *a1)
{
  int v3 = 0;
  if (!AVE_DW_GetInt32(0, "AVE_MultiPassMaxQPModLevel", &v3)) {
    a1[326] = v3;
  }
  if (!AVE_DW_GetInt32(0, "AVE_MultiPassQPModLevel", &v3)) {
    a1[327] = v3;
  }
  if (!AVE_DW_GetInt32(0, "AVE_MultiPassConstantQp", &v3)) {
    a1[328] = v3;
  }
  uint64_t result = AVE_DW_GetInt32(0, "AVE_MultiPassOptions", &v3);
  if (!result) {
    a1[329] = v3;
  }
  return result;
}

uint64_t AVE_DW_RetrieveMCTF(_DWORD *a1)
{
  int v3 = 0;
  if (!AVE_DW_GetInt32(0, "AVE_MCTFStrengthLevel", &v3)) {
    a1[330] = v3;
  }
  if (!AVE_DW_GetInt32(0, "AVE_MCTFStrengthDelta", &v3)) {
    a1[331] = v3;
  }
  if (!AVE_DW_GetInt32(0, "AVE_MCTFTogglePeriod", &v3)) {
    a1[332] = v3;
  }
  if (!AVE_DW_GetInt32(0, "AVE_MCTFISPGainThreshold", &v3)) {
    a1[333] = v3;
  }
  if (!AVE_DW_GetInt32(0, "AVE_MCTFOnToOffPerfThreshold", &v3)) {
    a1[334] = v3;
  }
  uint64_t result = AVE_DW_GetInt32(0, "AVE_MCTFOffToOnPerfThreshold", &v3);
  if (!result) {
    a1[335] = v3;
  }
  return result;
}

uint64_t AVE_DW_RetrieveAlg(uint64_t a1)
{
  int v4 = 0;
  unint64_t v3 = 0;
  if (!AVE_DW_GetInt32(0, "AVE_Profile", &v4)) {
    *(_DWORD *)(a1 + 1096) = v4;
  }
  if (!AVE_DW_GetInt32(0, "AVE_Level", &v4)) {
    *(_DWORD *)(a1 + 1100) = v4;
  }
  if (!AVE_DW_GetInt32(0, "AVE_Tier", &v4)) {
    *(_DWORD *)(a1 + 1104) = v4;
  }
  if (!AVE_DW_GetInt32(0, "AVE_ScalingMatrix", &v4)) {
    *(_DWORD *)(a1 + 1108) = v4;
  }
  if (!AVE_DW_GetUInt64(0, "AVE_SEIFeatureOn", &v3)) {
    *(void *)(a1 + 1112) = v3;
  }
  if (!AVE_DW_GetUInt64(0, "AVE_SEIFeatureOff", &v3)) {
    *(void *)(a1 + 1120) = v3;
  }
  AVE_DW_RetrieveQP((_DWORD *)a1);
  AVE_DW_RetrieveRC(a1);
  AVE_DW_RetrieveQPMod(a1);
  AVE_DW_RetrieveGOP(a1);
  AVE_DW_RetrieveRef(a1);
  return AVE_DW_RetrieveMultipass((_DWORD *)a1);
}

uint64_t AVE_DW_RetrieveHw(_DWORD *a1)
{
  int v3 = 0;
  if (!AVE_DW_GetInt32(0, "AVE_SliceNum", &v3)) {
    a1[336] = v3;
  }
  if (!AVE_DW_GetInt32(0, "AVE_MotionSearchRangeMode", &v3)) {
    a1[337] = v3;
  }
  if (!AVE_DW_GetInt32(0, "AVE_ThroughputMode", &v3)) {
    a1[338] = v3;
  }
  if (!AVE_DW_GetInt32(0, "AVE_MergeCandidateNum", &v3)) {
    a1[339] = v3;
  }
  if (!AVE_DW_GetInt32(0, "AVE_DeblockMode", &v3)) {
    a1[340] = v3;
  }
  if (!AVE_DW_GetInt32(0, "AVE_SAOMode", &v3)) {
    a1[341] = v3;
  }
  uint64_t result = AVE_DW_GetInt32(0, "AVE_EdgeReplication", &v3);
  if (!result) {
    a1[342] = v3;
  }
  return result;
}

uint64_t AVE_DW_Uninit(void)
{
  if (AVE_Log_CheckLevel(0x2Cu, 7))
  {
    int v0 = AVE_Log_CheckConsole(0x2Cu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v0)
    {
      printf("%lld %d AVE %s: %s Enter\n", CurrTime, 44, LevelStr, "AVE_DW_Uninit");
      __uint64_t v3 = AVE_GetCurrTime();
      long long v9 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Enter", v3, 44, v9, "AVE_DW_Uninit");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter", CurrTime, 44, LevelStr, "AVE_DW_Uninit");
    }
  }
  if (AVE_Log_CheckLevel(0x2Cu, 7))
  {
    int v4 = AVE_Log_CheckConsole(0x2Cu);
    __uint64_t v5 = AVE_GetCurrTime();
    int v6 = AVE_Log_GetLevelStr(7);
    if (v4)
    {
      printf("%lld %d AVE %s: %s Exit %d\n", v5, 44, v6, "AVE_DW_Uninit", 0);
      __uint64_t v7 = AVE_GetCurrTime();
      long long v10 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Exit %d", v7, 44, v10, "AVE_DW_Uninit", 0);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %d", v5, 44, v6, "AVE_DW_Uninit", 0);
    }
  }
  return 0;
}

uint64_t AVE_EdgeReplication_DetermineMode(CVPixelBufferRef pixelBuffer, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, _DWORD *a8, int a9)
{
  size_t extraRowsOnBottom = 0;
  extraColumnsOnRight[0] = 0;
  if ((int)a3 <= 10 && (a4 & 1) != 0 || !a8[1] && !a8[3])
  {
    int v16 = 0;
    uint64_t v17 = 0;
    int v18 = 0;
    int v19 = 0;
    goto LABEL_59;
  }
  if (a9 == -1)
  {
    if (a5)
    {
      int v16 = 1;
      if (a6 == 2 && !a7)
      {
        CFTypeRef v20 = CVBufferCopyAttachment(pixelBuffer, (CFStringRef)*MEMORY[0x1E4F24CD8], 0);
        if (v20)
        {
          __uint64_t v21 = v20;
          int v22 = CFEqual(v20, (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
          if ((int)a3 <= 5 && v22)
          {
            int v16 = 0;
            int v18 = 0;
            int v19 = 0;
            uint64_t v17 = 16;
            goto LABEL_59;
          }
          CFRelease(v21);
        }
        int v16 = 0;
      }
    }
    else
    {
      int v16 = 2;
    }
  }
  else
  {
    int v16 = a9 + 3;
  }
  CVPixelBufferGetExtendedPixels(pixelBuffer, 0, extraColumnsOnRight, 0, &extraRowsOnBottom);
  int v23 = a2[6];
  if (v23)
  {
    int v18 = 0;
    BOOL v24 = 1;
    if (v23 != 1 || !extraRowsOnBottom) {
      goto LABEL_25;
    }
  }
  else if (!extraRowsOnBottom)
  {
    int v18 = 0;
    BOOL v24 = 1;
    goto LABEL_25;
  }
  int v25 = a8[3];
  int v26 = v25 != 0;
  BOOL v24 = v25 == 0;
  int v18 = v26 << 16;
LABEL_25:
  if ((int)a3 < 11)
  {
    if ((int)a3 < 3)
    {
      int v19 = 0;
    }
    else
    {
      if (a8[1] == 8u >> (a2[4] >> 1)) {
        int v34 = 3328;
      }
      else {
        int v34 = 0;
      }
      if (a8[3] == 8u >> (a2[5] >> 1)) {
        int v19 = v34 | 0x50000;
      }
      else {
        int v19 = v34;
      }
    }
  }
  else
  {
    int v27 = a8[1];
    int v28 = a2[4] >> 1;
    if (v27 > (int)(0xEu >> v28) || v27 < (int)(2u >> v28)) {
      int v30 = 0;
    }
    else {
      int v30 = 3328;
    }
    int v31 = a8[3];
    int v32 = a2[5] >> 1;
    if (v31 > (int)(0xEu >> v32) || v31 < (int)(2u >> v32)) {
      int v19 = v30;
    }
    else {
      int v19 = v30 | 0x50000;
    }
  }
  int v35 = 0;
  switch(v16)
  {
    case 0:
      if (v24) {
        int v36 = 0;
      }
      else {
        int v36 = v18;
      }
      int v37 = v19 & 0xFF00 | v36;
      int v35 = v19 & 0x7FF00;
      if ((v19 & 0x70000) == 0) {
        int v35 = v37;
      }
      break;
    case 1:
    case 2:
    case 7:
      int v35 = v19 & 0x7FF00;
      break;
    case 4:
      int v35 = v19 & 0xFF00;
      break;
    case 5:
      int v35 = v19 & 0x70000;
      break;
    case 6:
      int v35 = v18 | 2;
      if (v24) {
        int v35 = 0;
      }
      break;
    default:
      break;
  }
  uint64_t v17 = v35 | ((v35 & 0x10100) != 0);
LABEL_59:
  if (AVE_Log_CheckLevel(0xAu, 7))
  {
    int v38 = AVE_Log_CheckConsole(0xAu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v38)
    {
      uint64_t v43 = a4;
      printf("%lld %d AVE %s: %s:%d | %d | %d %d %d %d %d | (%d %d %d %d) (%d %d) | %d %x %x %x\n\n", CurrTime, 10, LevelStr, "AVE_EdgeReplication_DetermineMode", 232, a3, a4, a5, a6, a7, a9, *a8, a8[1], a8[2], a8[3], LODWORD(extraColumnsOnRight[0]), extraRowsOnBottom, v16,
        v18,
        v19,
        v17);
      __uint64_t v40 = AVE_GetCurrTime();
      uint64_t v42 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s:%d | %d | %d %d %d %d %d | (%d %d %d %d) (%d %d) | %d %x %x %x\n", v40, 10, v42, "AVE_EdgeReplication_DetermineMode", 232, a3, v43, a5);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d | %d | %d %d %d %d %d | (%d %d %d %d) (%d %d) | %d %x %x %x\n", CurrTime, 10, LevelStr, "AVE_EdgeReplication_DetermineMode", 232, a3, a4, a5);
    }
  }
  return v17;
}

uint64_t AVE_EdgeReplication_FillPlaneRight(__CVBuffer *a1, unsigned int a2)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v5 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferGetBaseAddressOfPlane(a1, a2);
  CVPixelBufferGetWidthOfPlane(a1, a2);
  CVPixelBufferGetHeightOfPlane(a1, a2);
  CVPixelBufferGetBytesPerRowOfPlane(a1, a2);
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &v5);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  return 4294966296;
}

uint64_t AVE_EdgeReplication_FillPlaneBottom(__CVBuffer *a1, unsigned int a2, int a3, uint64_t a4)
{
  size_t v17 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, a2);
  CVPixelBufferGetWidthOfPlane(a1, a2);
  unsigned int HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, a2);
  unsigned int BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, a2);
  CVPixelBufferGetExtendedPixels(a1, 0, 0, &extraRowsOnTop, &v17);
  if (a2)
  {
    if (*(_DWORD *)(a4 + 12))
    {
      int v11 = *(int *)(a4 + 20) >> 1;
      v17 >>= v11;
      extraRowsOnTop >>= v11;
    }
    else
    {
      size_t v17 = 0;
    }
  }
  long long v12 = &BaseAddressOfPlane[(extraRowsOnTop + HeightOfPlane - 1) * BytesPerRowOfPlane];
  long long v13 = &v12[BytesPerRowOfPlane];
  if (a3)
  {
    if (v17)
    {
      for (size_t i = 0; i < v17; ++i)
      {
        memcpy(v13, v12, BytesPerRowOfPlane);
        v13 += BytesPerRowOfPlane;
        v12 -= BytesPerRowOfPlane;
      }
    }
  }
  else if (v17)
  {
    for (size_t j = 0; j < v17; ++j)
    {
      memcpy(v13, v12, BytesPerRowOfPlane);
      v13 += BytesPerRowOfPlane;
    }
  }
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  return 0;
}

uint64_t AVE_EdgeReplication_Fill(__CVBuffer *a1, unsigned int a2, uint64_t a3)
{
  __int16 v4 = a2;
  if ((a2 & 0x50000) == 0x10000 && *(int *)(a3 + 8) >= 1)
  {
    signed int v6 = 0;
    int v7 = HIWORD(a2) & 8;
    do
      AVE_EdgeReplication_FillPlaneBottom(a1, v6++, v7, a3);
    while (v6 < *(_DWORD *)(a3 + 8));
  }
  if ((v4 & 0x500) == 0x100 && *(int *)(a3 + 8) >= 1)
  {
    signed int v8 = 0;
    do
      AVE_EdgeReplication_FillPlaneRight(a1, v8++);
    while (v8 < *(_DWORD *)(a3 + 8));
  }
  return 0;
}

char *AVE_DevCap_Find(int a1)
{
  if (a1 >= 31) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = (char *)&gsc_saAVE_DevCap + 64 * (uint64_t)a1;
  }
  if (!*((void *)result + 2)) {
    AVE_DevCap_Find_cold_1();
  }
  return result;
}

char *AVE_DevCap_FindByType(int a1)
{
  uint64_t v1 = 0;
  while (1)
  {
    int v2 = (char *)&gsc_saAVE_DevCap + v1;
    if (*(_DWORD *)((char *)&gsc_saAVE_DevCap + v1 + 4) == a1) {
      break;
    }
    v1 += 64;
    if (v1 == 1984)
    {
      int v2 = 0;
      break;
    }
  }
  if (!*((void *)v2 + 2)) {
    AVE_DevCap_FindByType_cold_1();
  }
  return v2;
}

uint64_t AVE_DevCap_Type2Idx(uint64_t result, int a2)
{
  switch((int)result)
  {
    case 1:
      if (!a2) {
        return 3;
      }
      if (a2 != 1) {
LABEL_8:
      }
        AVE_DevCap_Type2Idx();
      return 4;
    case 2:
      return result;
    case 3:
      return 1;
    case 4:
      return 0;
    default:
      goto LABEL_8;
  }
}

char *AVE_DevCap_FindResolution(int a1, uint64_t a2, int a3)
{
  uint64_t result = AVE_DevCap_Find(a1);
  if (result) {
    return *(char **)(*(void *)&result[8 * (int)AVE_DevCap_Type2Idx(a2, a3) + 24] + 16);
  }
  return result;
}

char *AVE_DevCap_FindPixelFmt(int a1, uint64_t a2, int a3)
{
  uint64_t result = AVE_DevCap_Find(a1);
  if (result) {
    return *(char **)(*(void *)&result[8 * (int)AVE_DevCap_Type2Idx(a2, a3) + 24] + 24);
  }
  return result;
}

char *AVE_DevCap_FindSearchRange(int a1, uint64_t a2, int a3)
{
  uint64_t result = AVE_DevCap_Find(a1);
  if (result) {
    return *(char **)(*(void *)&result[8 * (int)AVE_DevCap_Type2Idx(a2, a3) + 24] + 32);
  }
  return result;
}

char *AVE_DevCap_FindPerf(int a1, uint64_t a2, int a3)
{
  uint64_t result = AVE_DevCap_Find(a1);
  if (result) {
    return *(char **)(*(void *)&result[8 * (int)AVE_DevCap_Type2Idx(a2, a3) + 24] + 40);
  }
  return result;
}

uint64_t AVE_USL_Surface::CreateDict(AVE_USL_Surface *this, int a2, int a3, int a4, __CFDictionary **a5, __CFDictionary **a6)
{
  int v10 = (int)this;
  *a5 = 0;
  CFMutableDataRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    long long v12 = Mutable;
    int v13 = AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E4F2EFE8], v10, Mutable);
    int v14 = AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E4F2F100], a2, v12) + v13;
    int v15 = v14 + AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E4F2F150], a3, v12);
    uint64_t v16 = *MEMORY[0x1E4F14B00];
    if (*MEMORY[0x1E4F14B00] <= 0x4000uLL) {
      LODWORD(v16) = 0x4000;
    }
    int v17 = (a4 + v16 - 1) & -(int)v16;
    if (!(v15 + AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E4F2EFB8], v17, v12)))
    {
      uint64_t result = 0;
      *a5 = v12;
      return result;
    }
    if (AVE_Log_CheckLevel(0x4Cu, 4))
    {
      int v22 = AVE_Log_CheckConsole(0x4Cu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v22)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed to add keys %d %d 0x%x %d %p\n", CurrTime, 76, LevelStr, "AVE_USL_Surface", "CreateDict", 49, "ret == 0", v10, a2, a3, v17, v12);
        __uint64_t v25 = AVE_GetCurrTime();
        int v26 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to add keys %d %d 0x%x %d %p", v25, 76, v26, "AVE_USL_Surface");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to add keys %d %d 0x%x %d %p", CurrTime, 76, LevelStr, "AVE_USL_Surface");
      }
    }
    CFRelease(v12);
  }
  else if (AVE_Log_CheckLevel(0x4Cu, 4))
  {
    int v19 = AVE_Log_CheckConsole(0x4Cu);
    __uint64_t v20 = AVE_GetCurrTime();
    __uint64_t v21 = AVE_Log_GetLevelStr(4);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s:%d %s | failed to create CFDictionary\n", v20, 76, v21, "AVE_USL_Surface", "CreateDict", 36, "pDict != __null");
      __uint64_t v20 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create CFDictionary", v20);
  }
  return 4294966293;
}

uint64_t AVE_USL_Surface::CreateIOSurface(AVE_USL_Surface *this, int a2, int a3, int a4, IOSurfaceRef *a5, __IOSurface **a6)
{
  int v10 = (int)this;
  int v31 = 0;
  if (a4 >= 1 && a5)
  {
    *a5 = 0;
    uint64_t v11 = AVE_USL_Surface::CreateDict(this, a2, a3, a4, &v31, a6);
    if (v11)
    {
      uint64_t v12 = v11;
      if (AVE_Log_CheckLevel(0x4Cu, 4))
      {
        int v13 = AVE_Log_CheckConsole(0x4Cu);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v13)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | failed to create surface dictionary %d %d %d %d %d\n", CurrTime, 76, LevelStr, "AVE_USL_Surface", "CreateIOSurface", 94, "ret == 0", v10, a2, a3, a4, v12);
          __uint64_t v16 = AVE_GetCurrTime();
          int v28 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create surface dictionary %d %d %d %d %d", v16, 76, v28, "AVE_USL_Surface");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create surface dictionary %d %d %d %d %d", CurrTime, 76, LevelStr, "AVE_USL_Surface");
        }
      }
    }
    else
    {
      __uint64_t v21 = v31;
      IOSurfaceRef v22 = IOSurfaceCreate(v31);
      if (v22)
      {
        uint64_t v12 = 0;
        *a5 = v22;
        if (!v21) {
          return v12;
        }
        goto LABEL_22;
      }
      if (AVE_Log_CheckLevel(0x4Cu, 4))
      {
        int v23 = AVE_Log_CheckConsole(0x4Cu);
        __uint64_t v24 = AVE_GetCurrTime();
        __uint64_t v25 = AVE_Log_GetLevelStr(4);
        if (v23)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | failed to create surface %d %d %d %d\n", v24, 76, v25, "AVE_USL_Surface", "CreateIOSurface", 99, "pSurface != __null", v10, a2, a3, a4);
          __uint64_t v26 = AVE_GetCurrTime();
          int v30 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create surface %d %d %d %d", v26, 76, v30);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create surface %d %d %d %d", v24, 76, v25);
        }
      }
      uint64_t v12 = 4294966296;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x4Cu, 4))
    {
      int v17 = AVE_Log_CheckConsole(0x4Cu);
      __uint64_t v18 = AVE_GetCurrTime();
      int v19 = AVE_Log_GetLevelStr(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %d %d %d %d %p\n", v18, 76, v19, "AVE_USL_Surface", "CreateIOSurface", 88, "size > 0 && ppSurface != __null", v10, a2, a3, a4, a5);
        __uint64_t v20 = AVE_GetCurrTime();
        int v29 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %d %d %d %d %p", v20, 76, v29, "AVE_USL_Surface");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %d %d %d %d %p", v18, 76, v19, "AVE_USL_Surface");
      }
    }
    uint64_t v12 = 4294966295;
  }
  __uint64_t v21 = v31;
  if (v31) {
LABEL_22:
  }
    CFRelease(v21);
  return v12;
}

void AVE_USL_Surface::AVE_USL_Surface(AVE_USL_Surface *this)
{
  *(unsigned char *)this = 0;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
}

uint64_t AVE_USL_Surface::Create(AVE_USL_Surface *this, __IOSurface *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  long long v28 = 0u;
  long long v29 = 0u;
  *(_OWORD *)cuint64_t Str = 0u;
  long long v27 = 0u;
  if (a2)
  {
    if ((a3 & 8) == 0)
    {
LABEL_5:
      if (a4) {
        LOBYTE(v15) = (_BYTE)a4;
      }
      else {
        int v15 = "";
      }
      AVE_SNPrintf((char *)this, 64, "%s", (uint64_t)a4, a5, a6, a7, a8, (char)v15);
      int AllocSize = IOSurfaceGetAllocSize(a2);
      uint64_t result = 0;
      *((_DWORD *)this + 18) = AllocSize;
      *((void *)this + 8) = a2;
      *((void *)this + 10) = a5;
      return result;
    }
    AVE_SNPrintf(cStr, 64, "%s%s%s", (uint64_t)a4, a5, a6, a7, a8, (char)"AVE2");
    CFStringRef v13 = CFStringCreateWithCString(0, cStr, 0);
    if (v13)
    {
      CFStringRef v14 = v13;
      IOSurfaceSetValue(a2, (CFStringRef)*MEMORY[0x1E4F2F128], v13);
      CFRelease(v14);
      goto LABEL_5;
    }
    if (AVE_Log_CheckLevel(0x4Cu, 4))
    {
      int v22 = AVE_Log_CheckConsole(0x4Cu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v22)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed to create CFString %s\n", CurrTime, 76, LevelStr, "AVE_USL_Surface", "Create", 169, "pNameStr != __null", cStr);
        __uint64_t CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create CFString %s", CurrTime, 76);
    }
    return 4294966293;
  }
  else
  {
    if (AVE_Log_CheckLevel(0x4Cu, 4))
    {
      int v18 = AVE_Log_CheckConsole(0x4Cu);
      __uint64_t v19 = AVE_GetCurrTime();
      __uint64_t v20 = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %p 0x%llx %p 0x%llx\n", v19, 76, v20, "AVE_USL_Surface", "Create", 160, "pSurface != __null", this, 0, a3, a4, a5);
        __uint64_t v21 = AVE_GetCurrTime();
        __uint64_t v25 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %p 0x%llx %p 0x%llx", v21, 76, v25, "AVE_USL_Surface", "Create", 160);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %p 0x%llx %p 0x%llx", v19, 76, v20, "AVE_USL_Surface", "Create", 160);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_USL_Surface::Create(AVE_USL_Surface *this, AVE_USL_Surface *a2, int a3, int a4, int a5, __IOSurface **a6, const char *a7, uint64_t a8)
{
  int v13 = (int)a2;
  IOSurfaceRef v34 = 0;
  if (a5 > 0)
  {
    uint64_t v16 = *MEMORY[0x1E4F14B00];
    if (*MEMORY[0x1E4F14B00] <= 0x4000uLL) {
      LODWORD(v16) = 0x4000;
    }
    int v17 = (a5 + v16 - 1) & -(int)v16;
    uint64_t v18 = AVE_USL_Surface::CreateIOSurface(a2, a3, a4, v17, &v34, a6);
    if (v18)
    {
      uint64_t v22 = v18;
      if (AVE_Log_CheckLevel(0x4Cu, 4))
      {
        int v23 = AVE_Log_CheckConsole(0x4Cu);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v23)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | failed to create surface %p %d %d %d %d %d\n", CurrTime, 76, LevelStr, "AVE_USL_Surface", "Create", 262, "ret == 0", this, v13, a3, a4, v17, v22);
          __uint64_t v26 = AVE_GetCurrTime();
          long long v27 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create surface %p %d %d %d %d %d", v26, 76, v27, "AVE_USL_Surface", "Create");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create surface %p %d %d %d %d %d", CurrTime, 76, LevelStr, "AVE_USL_Surface", "Create");
        }
      }
    }
    else
    {
      uint64_t v22 = AVE_USL_Surface::Create(this, v34, (uint64_t)a6, a7, a8, v19, v20, v21);
      *((void *)this + 10) |= 4uLL;
      if (!v22) {
        return v22;
      }
    }
    goto LABEL_17;
  }
  if (AVE_Log_CheckLevel(0x4Cu, 4))
  {
    int v28 = AVE_Log_CheckConsole(0x4Cu);
    __uint64_t v29 = AVE_GetCurrTime();
    uint64_t v30 = AVE_Log_GetLevelStr(4);
    if (v28)
    {
      printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %d %d %d %d 0x%llx 0x%llx\n", v29, 76, v30, "AVE_USL_Surface", "Create", 249, "size > 0", this, v13, a3, a4, a5, a6, a8);
      __uint64_t v31 = AVE_GetCurrTime();
      __uint64_t v33 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %d %d %d %d 0x%llx 0x%llx", v31, 76, v33, "AVE_USL_Surface", "Create", 249);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %d %d %d %d 0x%llx 0x%llx", v29, 76, v30, "AVE_USL_Surface", "Create", 249);
    }
    uint64_t v22 = 4294966295;
LABEL_17:
    if (v34) {
      CFRelease(v34);
    }
    goto LABEL_19;
  }
  uint64_t v22 = 4294966295;
LABEL_19:
  *((void *)this + 10) = 0;
  *((_DWORD *)this + 18) = 0;
  return v22;
}

uint64_t AVE_USL_Surface::Destroy(AVE_USL_Surface *this)
{
  if (*((void *)this + 8))
  {
    uint64_t v2 = AVE_USL_Surface::Unlock(this);
    if (v2)
    {
      uint64_t v3 = v2;
      if (AVE_Log_CheckLevel(0x4Cu, 4))
      {
        int v4 = AVE_Log_CheckConsole(0x4Cu);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v4)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | failed to do unlock %p %d\n", CurrTime, 76, LevelStr, "AVE_USL_Surface", "Destroy", 323, "ret == 0", this, v3);
          __uint64_t v7 = AVE_GetCurrTime();
          int v13 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to do unlock %p %d", v7, 76, v13);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to do unlock %p %d", CurrTime, 76, LevelStr);
        }
      }
    }
    else
    {
      uint64_t v11 = (const void *)*((void *)this + 8);
      if (v11)
      {
        CFRelease(v11);
        *((void *)this + 8) = 0;
      }
      uint64_t v3 = 0;
      *(unsigned char *)this = 0;
      *((_DWORD *)this + 18) = 0;
      *((void *)this + 10) = 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x4Cu, 4))
    {
      int v8 = AVE_Log_CheckConsole(0x4Cu);
      __uint64_t v9 = AVE_GetCurrTime();
      int v10 = AVE_Log_GetLevelStr(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | surface is not created %p\n", v9, 76, v10, "AVE_USL_Surface", "Destroy", 297, "m_pcSurface != __null", this);
        __uint64_t v9 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | surface is not created %p", v9, 76);
    }
    return 4294966285;
  }
  return v3;
}

uint64_t AVE_USL_Surface::Unlock(AVE_USL_Surface *this)
{
  uint64_t v2 = (__IOSurface *)*((void *)this + 8);
  if (v2)
  {
    if (*((unsigned char *)this + 89))
    {
      IOSurfaceUnlock(v2, 0, 0);
      uint64_t result = 0;
      *((void *)this + 11) &= ~0x100uLL;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x4Cu, 4))
    {
      int v4 = AVE_Log_CheckConsole(0x4Cu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v4)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | surface is not created %p %s\n", CurrTime, 76, LevelStr, "AVE_USL_Surface", "Unlock", 415, "m_pcSurface != __null", this, (const char *)this);
        __uint64_t v7 = AVE_GetCurrTime();
        int v8 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | surface is not created %p %s", v7, 76, v8);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | surface is not created %p %s", CurrTime, 76, LevelStr);
      }
    }
    return 4294966285;
  }
  return result;
}

uint64_t AVE_USL_Surface::Print(AVE_USL_Surface *this, uint64_t a2, int a3, const char *a4, int a5)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  memset(v47, 0, sizeof(v47));
  char v46 = 0;
  unsigned int v45 = 0;
  int v10 = (char)a3;
  if (AVE_Log_CheckLevel(a2, (char)a3))
  {
    AVE_ComposePosStr((uint64_t)a4, a5, (char *)v47, 32, v11, v12, v13, v14);
    int v15 = (__IOSurface *)*((void *)this + 8);
    if (v15)
    {
      unsigned int v45 = bswap32(IOSurfaceGetPixelFormat(v15));
      char v46 = 0;
    }
    if (AVE_Log_CheckLevel(a2, v10))
    {
      int v16 = AVE_Log_CheckConsole(a2);
      int v17 = v16;
      if (a3 < 0)
      {
        if (!v16 || (-a3 & 0x20) != 0)
        {
          uint64_t v34 = *((void *)this + 8);
          if (v34)
          {
            IOSurfaceGetID(*((IOSurfaceRef *)this + 8));
            int v35 = (__IOSurface *)*((void *)this + 8);
            if (v35)
            {
              IOSurfaceGetUseCount(v35);
              int v36 = (__IOSurface *)*((void *)this + 8);
              if (v36) {
                IOSurfaceGetBaseAddress(v36);
              }
            }
          }
        }
        else
        {
          __uint64_t v26 = (const void *)*((void *)this + 8);
          if (v26)
          {
            IOSurfaceID ID = IOSurfaceGetID(*((IOSurfaceRef *)this + 8));
            uint64_t v28 = *((void *)this + 11);
            BaseAddress = (__IOSurface *)*((void *)this + 8);
            int v30 = *((_DWORD *)this + 18);
            if (BaseAddress)
            {
              Useunsigned int Count = IOSurfaceGetUseCount(BaseAddress);
              BaseAddress = (__IOSurface *)*((void *)this + 8);
              if (BaseAddress) {
                BaseAddress = (__IOSurface *)IOSurfaceGetBaseAddress(BaseAddress);
              }
            }
            else
            {
              Useunsigned int Count = 0;
            }
          }
          else
          {
            Useunsigned int Count = 0;
            IOSurfaceID ID = 0;
            BaseAddress = 0;
            int v30 = *((_DWORD *)this + 18);
            uint64_t v28 = *((void *)this + 11);
          }
          printf("Surface %s | Name: %s %p Surf %p ID %d Size %d OpFlag 0x%llx Cnt %d Addr %p PixelFmt %s \n", (const char *)v47, (const char *)this, this, v26, ID, v30, v28, UseCount, BaseAddress, (const char *)&v45);
          uint64_t v34 = *((void *)this + 8);
          if (v34)
          {
            IOSurfaceGetID(*((IOSurfaceRef *)this + 8));
            uint64_t v41 = (__IOSurface *)*((void *)this + 8);
            if (v41)
            {
              IOSurfaceGetUseCount(v41);
              uint64_t v42 = (__IOSurface *)*((void *)this + 8);
              if (v42) {
                IOSurfaceGetBaseAddress(v42);
              }
            }
          }
        }
        syslog(3, "Surface %s | Name: %s %p Surf %p ID %d Size %d OpFlag 0x%llx Cnt %d Addr %p PixelFmt %s ", v47, this, this, v34);
      }
      else
      {
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(v10);
        uint64_t v20 = (__IOSurface *)*((void *)this + 8);
        if ((a3 & 0x20) != 0 || !v17)
        {
          if (v20)
          {
            IOSurfaceGetID(*((IOSurfaceRef *)this + 8));
            int v32 = (__IOSurface *)*((void *)this + 8);
            if (v32)
            {
              IOSurfaceGetUseCount(v32);
              __uint64_t v33 = (__IOSurface *)*((void *)this + 8);
              if (v33) {
                IOSurfaceGetBaseAddress(v33);
              }
            }
          }
          syslog(3, "%lld %d AVE %s: Surface %s | Name: %s %p Surf %p ID %d Size %d OpFlag 0x%llx Cnt %d Addr %p PixelFmt %s ", CurrTime, a2, LevelStr, v47, this, this);
        }
        else
        {
          if (v20)
          {
            IOSurfaceID v21 = IOSurfaceGetID(v20);
            uint64_t v22 = *((void *)this + 11);
            int v23 = (__IOSurface *)*((void *)this + 8);
            int v24 = *((_DWORD *)this + 18);
            if (v23)
            {
              IOSurfaceID v44 = v21;
              int32_t v25 = IOSurfaceGetUseCount(v23);
              int v23 = (__IOSurface *)*((void *)this + 8);
              if (v23) {
                int v23 = (__IOSurface *)IOSurfaceGetBaseAddress(v23);
              }
              IOSurfaceID v21 = v44;
            }
            else
            {
              int32_t v25 = 0;
            }
          }
          else
          {
            int32_t v25 = 0;
            IOSurfaceID v21 = 0;
            int v23 = 0;
            int v24 = *((_DWORD *)this + 18);
            uint64_t v22 = *((void *)this + 11);
          }
          printf("%lld %d AVE %s: Surface %s | Name: %s %p Surf %p ID %d Size %d OpFlag 0x%llx Cnt %d Addr %p PixelFmt %s \n", CurrTime, a2, LevelStr, (const char *)v47, (const char *)this, this, v20, v21, v24, v22, v25, v23, (const char *)&v45);
          __uint64_t v37 = AVE_GetCurrTime();
          int v38 = AVE_Log_GetLevelStr(v10);
          if (*((void *)this + 8))
          {
            IOSurfaceGetID(*((IOSurfaceRef *)this + 8));
            uint64_t v39 = (__IOSurface *)*((void *)this + 8);
            if (v39)
            {
              IOSurfaceGetUseCount(v39);
              __uint64_t v40 = (__IOSurface *)*((void *)this + 8);
              if (v40) {
                IOSurfaceGetBaseAddress(v40);
              }
            }
          }
          syslog(3, "%lld %d AVE %s: Surface %s | Name: %s %p Surf %p ID %d Size %d OpFlag 0x%llx Cnt %d Addr %p PixelFmt %s ", v37, a2, v38, v47, this, this);
        }
      }
    }
  }
  return 0;
}

__IOSurface *AVE_USL_Surface::GetID(AVE_USL_Surface *this)
{
  uint64_t result = (__IOSurface *)*((void *)this + 8);
  if (result) {
    return (__IOSurface *)IOSurfaceGetID(result);
  }
  return result;
}

__IOSurface *AVE_USL_Surface::GetAddr(AVE_USL_Surface *this, int a2)
{
  uint64_t result = (__IOSurface *)*((void *)this + 8);
  if (result) {
    return (__IOSurface *)((char *)IOSurfaceGetBaseAddress(result) + a2);
  }
  return result;
}

uint64_t AVE_USL_Surface::Lock(AVE_USL_Surface *this)
{
  uint64_t v2 = (__IOSurface *)*((void *)this + 8);
  if (v2)
  {
    if (*((unsigned char *)this + 89))
    {
      return 0;
    }
    else
    {
      IOSurfaceLock(v2, 0, 0);
      uint64_t result = 0;
      *((void *)this + 11) |= 0x100uLL;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x4Cu, 4))
    {
      int v4 = AVE_Log_CheckConsole(0x4Cu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v4)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | surface is not created %p %s\n", CurrTime, 76, LevelStr, "AVE_USL_Surface", "Lock", 390, "m_pcSurface != __null", this, (const char *)this);
        __uint64_t v7 = AVE_GetCurrTime();
        int v8 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | surface is not created %p %s", v7, 76, v8);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | surface is not created %p %s", CurrTime, 76, LevelStr);
      }
    }
    return 4294966285;
  }
  return result;
}

uint64_t AVE_USL_Surface::GetSize(AVE_USL_Surface *this)
{
  if (*((void *)this + 8)) {
    return *((unsigned int *)this + 18);
  }
  else {
    return 0;
  }
}

uint64_t AVE_FmtConv_PlaneHTPC2Linear(unsigned __int8 *a1, unsigned __int8 *a2, int a3, int a4, int a5, int a6, int a7, unsigned int a8, char a9, unsigned int a10, unsigned __int8 *a11)
{
  return 0;
}

uint64_t AVE_FmtConv_PlaneInterchange2Linear(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, interchange_compression *a8, int a9, int a10, unsigned int a11, int a12, uint64_t a13, uint64_t a14)
{
  LODWORD(v15) = a8;
  interchange_decompress_plane(a1, a2, a14, a3, a4, a5, a6 & a7, a9, a11, a12, a13, v15);
  return 0;
}

uint64_t AVE_FmtConv_PlaneChromaPacked2Linear(unsigned __int8 *a1, int a2, int a3, int a4, char a5, int a6, int a7, unsigned __int8 *a8)
{
  int v8 = a2;
  LODWORD(v10) = 2 * a2 / 3;
  int v11 = 2 * a2 % 3;
  if ((a5 & 1) == 0)
  {
    if (a3 < 1) {
      return 0;
    }
    uint64_t v27 = 0;
    int v28 = a7 * a3;
    if ((int)v10 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v10;
    }
    uint64_t v29 = a6;
    int v30 = a1;
    uint64_t v31 = a3;
    while (1)
    {
      int v32 = &a8[v27 * a7];
      if (v8 < 2)
      {
        unsigned int v42 = 0;
        int v35 = 0;
        int v34 = 0;
        if (!v11) {
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v33 = 0;
        int v34 = 0;
        int v35 = 0;
        do
        {
          unsigned int v36 = *(_DWORD *)&v30[4 * v33];
          __int16 v37 = v36 & 0x3FF;
          if (v33)
          {
            int v41 = v34 + v28;
            *(_WORD *)&v32[2 * v34 + 2 * v28] = v37;
            int v39 = 2;
            int v40 = 1;
            int v38 = v35;
          }
          else
          {
            *(_WORD *)&v32[2 * v35] = v37;
            int v38 = v34 + v28;
            int v39 = 1;
            int v40 = 2;
            int v41 = v35;
          }
          *(_WORD *)&v32[2 * v38] = (v36 >> 10) & 0x3FF;
          *(_WORD *)&v32[2 * v41 + 2] = (v36 >> 20) & 0x3FF;
          v35 += v40;
          v34 += v39;
          ++v33;
        }
        while (v10 != v33);
        unsigned int v42 = v10;
        if (!v11) {
          goto LABEL_36;
        }
      }
      unsigned int v43 = *(_DWORD *)&a1[4 * v42 + v27 * v29];
      __int16 v44 = v43 & 0x3FF;
      if (v42)
      {
        *(_WORD *)&v32[2 * v34 + 2 * v28] = v44;
        if (v11 == 2) {
          goto LABEL_35;
        }
      }
      else
      {
        *(_WORD *)&v32[2 * v35] = v44;
        if (v11 == 2)
        {
          int v35 = v34 + v28;
LABEL_35:
          *(_WORD *)&v32[2 * v35] = (v43 >> 10) & 0x3FF;
        }
      }
LABEL_36:
      ++v27;
      v30 += v29;
      if (v27 == v31) {
        return 0;
      }
    }
  }
  if (a3 >= 1)
  {
    uint64_t v12 = 0;
    if ((int)v10 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v10;
    }
    size_t v47 = 2 * (2 * a2 % 3 - 1) + 2;
    uint64_t v14 = a6;
    uint64_t v15 = a7;
    uint64_t v16 = a3;
    int v17 = a8 + 4;
    uint64_t v18 = a1;
    do
    {
      if (v8 < 2)
      {
        unsigned int v23 = 0;
        if (v11) {
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t v19 = v13;
        uint64_t v20 = v18;
        IOSurfaceID v21 = v17;
        do
        {
          unsigned int v22 = *(_DWORD *)v20;
          v20 += 4;
          *((_WORD *)v21 - 2) = v22 & 0x3FF;
          *((_WORD *)v21 - 1) = (v22 >> 10) & 0x3FF;
          *(_WORD *)IOSurfaceID v21 = (v22 >> 20) & 0x3FF;
          v21 += 6;
          --v19;
        }
        while (v19);
        unsigned int v23 = v13;
        if (v11)
        {
LABEL_13:
          unsigned int v24 = *(_DWORD *)&a1[4 * v23 + v12 * v14];
          __src[0] = v24 & 0x3FF;
          __src[1] = (v24 >> 10) & 0x3FF;
          __src[2] = (v24 >> 20) & 0x3FF;
          if (v11 >= 1)
          {
            int32_t v25 = a8;
            uint64_t v26 = v15;
            memcpy(&a8[6 * v23 + (int)v12 * a7], __src, v47);
            uint64_t v15 = v26;
            a8 = v25;
            int v8 = a2;
          }
        }
      }
      ++v12;
      v17 += v15;
      v18 += v14;
    }
    while (v12 != v16);
  }
  return 0;
}

uint64_t AVE_FmtConv_PlaneLumaPacked2Linear(unsigned __int8 *a1, int a2, int a3, int a4, int a5, int a6, unsigned __int8 *a7)
{
  if (a3 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = (a2 / 3);
    int v11 = a2 % 3;
    size_t v23 = 2 * (a2 % 3 - 1) + 2;
    uint64_t v12 = a5;
    uint64_t v13 = a3;
    uint64_t v14 = a7 + 4;
    uint64_t v15 = a1;
    do
    {
      if (a2 < 3)
      {
        unsigned int v20 = 0;
        if (v11) {
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v16 = v10;
        int v17 = v15;
        uint64_t v18 = v14;
        do
        {
          unsigned int v19 = *(_DWORD *)v17;
          v17 += 4;
          *((_WORD *)v18 - 2) = v19 & 0x3FF;
          *((_WORD *)v18 - 1) = (v19 >> 10) & 0x3FF;
          *(_WORD *)uint64_t v18 = (v19 >> 20) & 0x3FF;
          v18 += 6;
          --v16;
        }
        while (v16);
        unsigned int v20 = v10;
        if (v11)
        {
LABEL_9:
          unsigned int v21 = *(_DWORD *)&a1[4 * v20 + v9 * v12];
          __src[0] = v21 & 0x3FF;
          __src[1] = (v21 >> 10) & 0x3FF;
          __src[2] = (v21 >> 20) & 0x3FF;
          if (v11 >= 1) {
            memcpy(&a7[6 * v20 + (int)v9 * a6], __src, v23);
          }
        }
      }
      ++v9;
      v14 += a6;
      v15 += v12;
    }
    while (v9 != v13);
  }
  return 0;
}

uint64_t AVE_FmtConv_PlanePacked2Linear(unsigned __int8 *a1, int a2, int a3, int a4, int a5, char a6, int a7, int a8, unsigned __int8 *a9)
{
  if (a5) {
    AVE_FmtConv_PlaneChromaPacked2Linear(a1, a2, a3, a4, a6, a7, a8, a9);
  }
  else {
    AVE_FmtConv_PlaneLumaPacked2Linear(a1, a2, a3, a4, a7, a8, a9);
  }
  return 0;
}

void AVE_FPS::AVE_FPS(AVE_FPS *this)
{
  *(_DWORD *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
}

uint64_t AVE_FPS::Uninit(AVE_FPS *this)
{
  if (AVE_Log_CheckLevel(0x49u, 6))
  {
    int v2 = AVE_Log_CheckConsole(0x49u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p\n", CurrTime, 73, LevelStr, "AVE_FPS", "Uninit", this);
      __uint64_t v5 = AVE_GetCurrTime();
      int v11 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p", v5, 73, v11, "AVE_FPS", "Uninit", this);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p", CurrTime, 73, LevelStr, "AVE_FPS", "Uninit", this);
    }
  }
  signed int v6 = (void *)*((void *)this + 1);
  if (v6)
  {
    free(v6);
    *((void *)this + 1) = 0;
  }
  *(_DWORD *)this = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 8) = 0;
  if (AVE_Log_CheckLevel(0x49u, 6))
  {
    int v7 = AVE_Log_CheckConsole(0x49u);
    __uint64_t v8 = AVE_GetCurrTime();
    uint64_t v9 = AVE_Log_GetLevelStr(6);
    if (v7)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %d\n", v8, 73, v9, "AVE_FPS", "Uninit", this, 0);
      __uint64_t v8 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Exit %p %d", v8);
  }
  return 0;
}

void AVE_FPS::~AVE_FPS(AVE_FPS *this)
{
}

uint64_t AVE_FPS::Init(AVE_FPS *this, int a2, unsigned int a3, int a4)
{
  if (AVE_Log_CheckLevel(0x49u, 6))
  {
    int v8 = AVE_Log_CheckConsole(0x49u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v8)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %d %d %d\n", CurrTime, 73, LevelStr, "AVE_FPS", "Init", this, a2, a3, a4);
      __uint64_t CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %d %d %d", CurrTime, 73);
  }
  if ((a2 - 1) > 0x1869E || (a3 & 0x80000000) != 0)
  {
    if (AVE_Log_CheckLevel(0x49u, 4))
    {
      int v14 = AVE_Log_CheckConsole(0x49u);
      __uint64_t v15 = AVE_GetCurrTime();
      uint64_t v16 = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %d %d %d\n", v15, 73, v16, "AVE_FPS", "Init", 56, "0 < fps && fps < 100000 && num >= 0", this, a2, a3, a4);
        __uint64_t v17 = AVE_GetCurrTime();
        uint64_t v27 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %d %d %d", v17, 73, v27, "AVE_FPS");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %d %d %d", v15, 73, v16, "AVE_FPS");
      }
    }
    uint64_t v13 = 4294966295;
  }
  else
  {
    int v11 = 2 * a2;
    if (a3) {
      int v11 = a3;
    }
    if (v11 <= 2) {
      a3 = 2;
    }
    else {
      a3 = v11;
    }
    uint64_t v12 = malloc_type_malloc(16 * a3, 0x1000040D9A13B51uLL);
    *((void *)this + 1) = v12;
    if (v12)
    {
      uint64_t v13 = 0;
      *(_DWORD *)this = a3;
      *((_DWORD *)this + 8) = a4;
      *((double *)this + 5) = (double)a2;
      *((double *)this + 6) = (double)a2;
      *((double *)this + 7) = (double)a2;
      *((double *)this + 8) = (double)a2;
    }
    else
    {
      if (AVE_Log_CheckLevel(0x49u, 4))
      {
        int v18 = AVE_Log_CheckConsole(0x49u);
        __uint64_t v19 = AVE_GetCurrTime();
        unsigned int v20 = AVE_Log_GetLevelStr(4);
        if (v18)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | failed to allocate memory of timestamp %p %d %d %d\n", v19, 73, v20, "AVE_FPS", "Init", 66, "m_psTime != __null", this, a2, a3, a4);
          __uint64_t v21 = AVE_GetCurrTime();
          int v28 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to allocate memory of timestamp %p %d %d %d", v21, 73, v28, "AVE_FPS");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to allocate memory of timestamp %p %d %d %d", v19, 73, v20, "AVE_FPS");
        }
      }
      uint64_t v13 = 4294966293;
    }
  }
  if (AVE_Log_CheckLevel(0x49u, 6))
  {
    int v22 = AVE_Log_CheckConsole(0x49u);
    __uint64_t v23 = AVE_GetCurrTime();
    unsigned int v24 = AVE_Log_GetLevelStr(6);
    if (v22)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %d %d %d %d\n", v23, 73, v24, "AVE_FPS", "Init", this, a2, a3, a4, v13);
      __uint64_t v25 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %d %d %d %d", v25, 73);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %d %d %d %d", v23, 73);
    }
  }
  return v13;
}

uint64_t AVE_FPS::Update(AVE_FPS *this, int a2, int a3, int a4)
{
  if (AVE_Log_CheckLevel(0x49u, 6))
  {
    int v8 = AVE_Log_CheckConsole(0x49u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v8)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %d %d %d\n", CurrTime, 73, LevelStr, "AVE_FPS", "Update", this, a2, a3, a4);
      __uint64_t CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %d %d %d", CurrTime, 73);
  }
  if ((a2 - 1) > 0x1869E || a3 < 0)
  {
    if (AVE_Log_CheckLevel(0x49u, 4))
    {
      int v16 = AVE_Log_CheckConsole(0x49u);
      __uint64_t v17 = AVE_GetCurrTime();
      int v18 = AVE_Log_GetLevelStr(4);
      if (v16)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %d %d %d\n", v17, 73, v18, "AVE_FPS", "Update", 136, "0 < fps && fps < 100000 && num >= 0", this, a2, a3, a4);
        __uint64_t v19 = AVE_GetCurrTime();
        unsigned int v20 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %d %d %d", v19, 73, v20, "AVE_FPS");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %d %d %d", v17, 73, v18, "AVE_FPS");
      }
    }
    uint64_t v21 = 4294966295;
  }
  else
  {
    int v11 = 2 * a2;
    if (a3) {
      int v11 = a3;
    }
    if (v11 <= 2) {
      a3 = 2;
    }
    else {
      a3 = v11;
    }
    if (a3 > *(_DWORD *)this)
    {
      if (AVE_Log_CheckLevel(0x49u, 6))
      {
        int v12 = AVE_Log_CheckConsole(0x49u);
        __uint64_t v13 = AVE_GetCurrTime();
        int v14 = AVE_Log_GetLevelStr(6);
        if (v12)
        {
          printf("%lld %d AVE %s: %s::%s:%d allocate bigger memory of timestamp %p %d %d <- %d\n", v13, 73, v14, "AVE_FPS", "Update", 151, this, a2, a3, *(_DWORD *)this);
          __uint64_t v15 = AVE_GetCurrTime();
          int v32 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: %s::%s:%d allocate bigger memory of timestamp %p %d %d <- %d", v15, 73, v32);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d allocate bigger memory of timestamp %p %d %d <- %d", v13, 73, v14);
        }
      }
      *((_DWORD *)this + 9) = 0;
      int v22 = (void *)*((void *)this + 1);
      __uint64_t v23 = malloc_type_malloc(16 * a3, 0x1000040D9A13B51uLL);
      *((void *)this + 1) = v23;
      if (v23)
      {
        *(_DWORD *)this = a3;
        free(v22);
      }
      else
      {
        *((void *)this + 1) = v22;
        if (AVE_Log_CheckLevel(0x49u, 5))
        {
          int v24 = AVE_Log_CheckConsole(0x49u);
          __uint64_t v25 = AVE_GetCurrTime();
          uint64_t v26 = AVE_Log_GetLevelStr(5);
          if (v24)
          {
            printf("%lld %d AVE %s: %s::%s:%d failed to allocate memory of timestamp %p %d\n", v25, 73, v26, "AVE_FPS", "Update", 163, this, a3);
            __uint64_t v25 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(5);
          }
          syslog(3, "%lld %d AVE %s: %s::%s:%d failed to allocate memory of timestamp %p %d", v25, 73);
        }
      }
    }
    uint64_t v21 = 0;
    *((_DWORD *)this + 8) = a4;
    *((double *)this + 5) = (double)a2;
    *((double *)this + 6) = (double)a2;
    *((double *)this + 7) = (double)a2;
    *((double *)this + 8) = (double)a2;
  }
  if (AVE_Log_CheckLevel(0x49u, 6))
  {
    int v27 = AVE_Log_CheckConsole(0x49u);
    __uint64_t v28 = AVE_GetCurrTime();
    uint64_t v29 = AVE_Log_GetLevelStr(6);
    if (v27)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %d %d %d\n", v28, 73, v29, "AVE_FPS", "Update", this, a2, a3, v21);
      __uint64_t v30 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %d %d %d", v30, 73);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %d %d %d", v28, 73);
    }
  }
  return v21;
}

uint64_t AVE_FPS::Reset(AVE_FPS *this)
{
  if (AVE_Log_CheckLevel(0x49u, 6))
  {
    int v2 = AVE_Log_CheckConsole(0x49u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p\n", CurrTime, 73, LevelStr, "AVE_FPS", "Reset", this);
      __uint64_t v5 = AVE_GetCurrTime();
      uint64_t v10 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p", v5, 73, v10, "AVE_FPS", "Reset", this);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p", CurrTime, 73, LevelStr, "AVE_FPS", "Reset", this);
    }
  }
  *((_DWORD *)this + 9) = 0;
  if (AVE_Log_CheckLevel(0x49u, 6))
  {
    int v6 = AVE_Log_CheckConsole(0x49u);
    __uint64_t v7 = AVE_GetCurrTime();
    int v8 = AVE_Log_GetLevelStr(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %d\n", v7, 73, v8, "AVE_FPS", "Reset", this, 0);
      __uint64_t v7 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Exit %p %d", v7);
  }
  return 0;
}

double AVE_FPS::Calc(uint64_t *a1, void *a2, int a3)
{
  int v6 = *((_DWORD *)a1 + 2);
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v8 = *a2;
  if (v6 == v7)
  {
    double v9 = (double)(v8 - *a1);
    double v10 = (double)a3;
    double v11 = (double)v6;
  }
  else
  {
    double v11 = (double)v6;
    double v9 = (double)v8 * (double)v6 - (double)*a1 * (double)v7;
    double v10 = (double)a3 * (double)v7;
  }
  double v12 = v10 * v11;
  double v13 = -1.0;
  if (v9 > 0.0)
  {
    double v14 = v12 / v9;
    if (v12 / v9 <= 0.0 || v14 >= 100000.0)
    {
      if (AVE_Log_CheckLevel(0x49u, 5))
      {
        int v15 = AVE_Log_CheckConsole(0x49u);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(5);
        uint64_t v18 = *a1;
        uint64_t v19 = *((unsigned int *)a1 + 2);
        if (v15)
        {
          printf("%lld %d AVE %s: %s::%s:%d %lld %d - %lld %d %d | %lld.%03lld %lld.%03lld \n", CurrTime, 73, LevelStr, "AVE_FPS", "Calc", 245, v18, v19, *a2, *((_DWORD *)a2 + 2), a3, (uint64_t)v9, (uint64_t)(v9 * 1000.0) - 1000 * (uint64_t)v9, (uint64_t)v14, (uint64_t)(v14 * 1000.0) - 1000 * (uint64_t)v14);
          __uint64_t v20 = AVE_GetCurrTime();
          uint64_t v21 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %lld %d - %lld %d %d | %lld.%03lld %lld.%03lld ", v20, 73, v21, "AVE_FPS", "Calc", 245, *a1, *((unsigned int *)a1 + 2));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %lld %d - %lld %d %d | %lld.%03lld %lld.%03lld ", CurrTime, 73, LevelStr, "AVE_FPS", "Calc", 245, v18, v19);
        }
      }
    }
    else
    {
      return v12 / v9;
    }
  }
  return v13;
}

uint64_t AVE_FPS::CalcRt(AVE_FPS *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    int v3 = *((_DWORD *)this + 9);
    if (v3 < 2) {
      return 0;
    }
    uint64_t v4 = ((v3 - 2) % *(_DWORD *)this);
    uint64_t v5 = ((v3 - 1) % *(_DWORD *)this);
    double v6 = AVE_FPS::Calc((uint64_t *)(v2 + 16 * v4), (void *)(v2 + 16 * v5), 1);
    double v7 = v6;
    if (v6 >= 0.0)
    {
      *((double *)this + 5) = v6;
      int v8 = 7;
    }
    else
    {
      int v8 = 5;
    }
    uint64_t result = AVE_Log_CheckLevel(0x49u, v8);
    if (result)
    {
      int v13 = AVE_Log_CheckConsole(0x49u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(v8);
      uint64_t v16 = *((unsigned int *)this + 9);
      uint64_t v17 = *(unsigned int *)this;
      uint64_t v18 = *((void *)this + 1);
      uint64_t v19 = (uint64_t *)(v18 + 16 * v4);
      uint64_t v20 = *v19;
      int v21 = *((_DWORD *)v19 + 2);
      int v22 = (uint64_t *)(v18 + 16 * v5);
      uint64_t v23 = *v22;
      int v24 = *((_DWORD *)v22 + 2);
      if (v13)
      {
        printf("%lld %d AVE %s: %s::%s:%d %p %d %d | %d %lld %d - %d %lld %d | %d.%03d  %d.%03d\n", CurrTime, 73, LevelStr, "AVE_FPS", "CalcRt", 298, this, v16, v17, v4, v20, v21, v5, v23, v24, (int)*((double *)this + 5), (int)(*((double *)this + 5) * 1000.0) - 1000 * (int)*((double *)this + 5), (int)v7,
          (int)(v7 * 1000.0) - 1000 * (int)v7);
        __uint64_t v25 = AVE_GetCurrTime();
        uint64_t v26 = AVE_Log_GetLevelStr(v8);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %d %d | %d %lld %d - %d %lld %d | %d.%03d  %d.%03d", v25, 73, v26, "AVE_FPS", "CalcRt", 298, this, *((unsigned int *)this + 9), *(unsigned int *)this);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %d %d | %d %lld %d - %d %lld %d | %d.%03d  %d.%03d", CurrTime, 73, LevelStr, "AVE_FPS", "CalcRt", 298, this, v16, v17);
      }
      return 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x49u, 4))
    {
      int v9 = AVE_Log_CheckConsole(0x49u);
      __uint64_t v10 = AVE_GetCurrTime();
      double v11 = AVE_Log_GetLevelStr(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong state %p\n", v10, 73, v11, "AVE_FPS", "CalcRt", 272, "m_psTime != __null", this);
        __uint64_t v10 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong state %p", v10, 73);
    }
    return 4294966285;
  }
  return result;
}

uint64_t AVE_FPS::CalcSlide(AVE_FPS *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    int v3 = *((_DWORD *)this + 9);
    if (v3 < 2) {
      return 0;
    }
    int v4 = v3 - 1;
    int v5 = *((_DWORD *)this + 8);
    BOOL v6 = __OFSUB__(v3, v5);
    int v7 = v3 - v5;
    if (v7 < 0 != v6) {
      int v7 = 0;
    }
    int v8 = v4 - v7;
    uint64_t v9 = (v4 % *(_DWORD *)this);
    int v10 = v7 % *(_DWORD *)this;
    double v11 = AVE_FPS::Calc((uint64_t *)(v2 + 16 * v10), (void *)(v2 + 16 * v9), v4 - v7);
    double v12 = v11;
    if (v11 <= 0.0)
    {
      int v13 = 5;
    }
    else
    {
      *((double *)this + 6) = v11;
      int v13 = 7;
    }
    uint64_t result = AVE_Log_CheckLevel(0x49u, v13);
    if (result)
    {
      uint64_t v18 = v10;
      int v19 = AVE_Log_CheckConsole(0x49u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(v13);
      uint64_t v22 = *(unsigned int *)this;
      uint64_t v23 = *((unsigned int *)this + 9);
      uint64_t v24 = *((void *)this + 1);
      __uint64_t v25 = (uint64_t *)(v24 + 16 * v18);
      uint64_t v26 = *v25;
      int v27 = *((_DWORD *)v25 + 2);
      __uint64_t v28 = (uint64_t *)(v24 + 16 * v9);
      uint64_t v29 = *v28;
      int v30 = *((_DWORD *)v28 + 2);
      if (v19)
      {
        printf("%lld %d AVE %s: %s::%s:%d %p %d %d %d | %d %lld %d - %d %lld %d | %d.%03d %d.%03d\n", CurrTime, 73, LevelStr, "AVE_FPS", "CalcSlide", 353, this, v22, v23, v8, v18, v26, v27, v9, v29, v30, (int)*((double *)this + 7), (int)(*((double *)this + 7) * 1000.0) - 1000 * (int)*((double *)this + 7),
          (int)v12,
          (int)(v12 * 1000.0) - 1000 * (int)v12);
        __uint64_t v31 = AVE_GetCurrTime();
        int v32 = AVE_Log_GetLevelStr(v13);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %d %d %d | %d %lld %d - %d %lld %d | %d.%03d %d.%03d", v31, 73, v32, "AVE_FPS", "CalcSlide", 353, this, *(unsigned int *)this, *((unsigned int *)this + 9));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %d %d %d | %d %lld %d - %d %lld %d | %d.%03d %d.%03d", CurrTime, 73, LevelStr, "AVE_FPS", "CalcSlide", 353, this, v22, v23);
      }
      return 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x49u, 4))
    {
      int v14 = AVE_Log_CheckConsole(0x49u);
      __uint64_t v15 = AVE_GetCurrTime();
      uint64_t v16 = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong state %p\n", v15, 73, v16, "AVE_FPS", "CalcSlide", 323, "m_psTime != __null", this);
        __uint64_t v15 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong state %p", v15, 73);
    }
    return 4294966285;
  }
  return result;
}

uint64_t AVE_FPS::CalcAvg(AVE_FPS *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    int v3 = *((_DWORD *)this + 9);
    if (v3 < 2) {
      return 0;
    }
    int v4 = v3 - 1;
    int v5 = *(_DWORD *)this;
    BOOL v6 = __OFSUB__(v3, *(_DWORD *)this);
    int v7 = v3 - *(_DWORD *)this;
    if (v7 < 0 != v6) {
      int v7 = 0;
    }
    int v8 = v4 - v7;
    uint64_t v9 = (v4 % v5);
    int v10 = v7 % v5;
    double v11 = AVE_FPS::Calc((uint64_t *)(v2 + 16 * (v7 % v5)), (void *)(v2 + 16 * v9), v4 - v7);
    double v12 = v11;
    if (v11 <= 0.0)
    {
      int v13 = 5;
    }
    else
    {
      *((double *)this + 7) = v11;
      int v13 = 7;
    }
    uint64_t result = AVE_Log_CheckLevel(0x49u, v13);
    if (result)
    {
      uint64_t v18 = v10;
      int v19 = AVE_Log_CheckConsole(0x49u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(v13);
      uint64_t v22 = *(unsigned int *)this;
      uint64_t v23 = *((unsigned int *)this + 9);
      uint64_t v24 = *((void *)this + 1);
      __uint64_t v25 = (uint64_t *)(v24 + 16 * v18);
      uint64_t v26 = *v25;
      int v27 = *((_DWORD *)v25 + 2);
      __uint64_t v28 = (uint64_t *)(v24 + 16 * v9);
      uint64_t v29 = *v28;
      int v30 = *((_DWORD *)v28 + 2);
      if (v19)
      {
        printf("%lld %d AVE %s: %s::%s:%d %p %d %d %d | %d %lld %d - %d %lld %d | %d.%03d %d.%03d\n", CurrTime, 73, LevelStr, "AVE_FPS", "CalcAvg", 407, this, v22, v23, v8, v18, v26, v27, v9, v29, v30, (int)*((double *)this + 7), (int)(*((double *)this + 7) * 1000.0) - 1000 * (int)*((double *)this + 7),
          (int)v12,
          (int)(v12 * 1000.0) - 1000 * (int)v12);
        __uint64_t v31 = AVE_GetCurrTime();
        int v32 = AVE_Log_GetLevelStr(v13);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %d %d %d | %d %lld %d - %d %lld %d | %d.%03d %d.%03d", v31, 73, v32, "AVE_FPS", "CalcAvg", 407, this, *(unsigned int *)this, *((unsigned int *)this + 9));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %d %d %d | %d %lld %d - %d %lld %d | %d.%03d %d.%03d", CurrTime, 73, LevelStr, "AVE_FPS", "CalcAvg", 407, this, v22, v23);
      }
      return 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x49u, 4))
    {
      int v14 = AVE_Log_CheckConsole(0x49u);
      __uint64_t v15 = AVE_GetCurrTime();
      uint64_t v16 = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong state %p\n", v15, 73, v16, "AVE_FPS", "CalcAvg", 377, "m_psTime != __null", this);
        __uint64_t v15 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong state %p", v15, 73);
    }
    return 4294966285;
  }
  return result;
}

uint64_t AVE_FPS::CalcOverall(AVE_FPS *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    int v3 = *((_DWORD *)this + 9);
    if (v3 < 2) {
      return 0;
    }
    int v4 = v3 - 1;
    uint64_t v5 = ((v3 - 1) % *(_DWORD *)this);
    double v6 = AVE_FPS::Calc((uint64_t *)this + 2, (void *)(v2 + 16 * v5), v3 - 1);
    double v7 = v6;
    if (v6 <= 0.0)
    {
      int v8 = 5;
    }
    else
    {
      *((double *)this + 8) = v6;
      int v8 = 7;
    }
    uint64_t result = AVE_Log_CheckLevel(0x49u, v8);
    if (result)
    {
      int v13 = AVE_Log_CheckConsole(0x49u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(v8);
      uint64_t v16 = *(unsigned int *)this;
      uint64_t v17 = *((unsigned int *)this + 9);
      uint64_t v18 = *((void *)this + 1) + 16 * v5;
      uint64_t v19 = *(void *)v18;
      int v20 = *(_DWORD *)(v18 + 8);
      if (v13)
      {
        printf("%lld %d AVE %s: %s::%s:%d %p %d %d %d | %d %lld %d - %d %lld %d | %d.%03d %d.%03d\n", CurrTime, 73, LevelStr, "AVE_FPS", "CalcOverall", 457, this, v16, v17, v4, 0, *((void *)this + 2), *((_DWORD *)this + 6), v5, v19, v20, (int)*((double *)this + 8), (int)(*((double *)this + 8) * 1000.0) - 1000 * (int)*((double *)this + 8),
          (int)v7,
          (int)(v7 * 1000.0) - 1000 * (int)v7);
        __uint64_t v21 = AVE_GetCurrTime();
        uint64_t v22 = AVE_Log_GetLevelStr(v8);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %d %d %d | %d %lld %d - %d %lld %d | %d.%03d %d.%03d", v21, 73, v22, "AVE_FPS", "CalcOverall", 457, this, *(unsigned int *)this, *((unsigned int *)this + 9));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %d %d %d | %d %lld %d - %d %lld %d | %d.%03d %d.%03d", CurrTime, 73, LevelStr, "AVE_FPS", "CalcOverall", 457, this, v16, v17);
      }
      return 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x49u, 4))
    {
      int v9 = AVE_Log_CheckConsole(0x49u);
      __uint64_t v10 = AVE_GetCurrTime();
      double v11 = AVE_Log_GetLevelStr(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong state %p\n", v10, 73, v11, "AVE_FPS", "CalcOverall", 429, "m_psTime != __null", this);
        __uint64_t v10 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong state %p", v10, 73);
    }
    return 4294966285;
  }
  return result;
}

uint64_t AVE_FPS::Add(_DWORD *a1, int *a2)
{
  if (AVE_Log_CheckLevel(0x49u, 7))
  {
    int v4 = AVE_Log_CheckConsole(0x49u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v4)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %p\n", CurrTime, 73, LevelStr, "AVE_FPS", "Add", a1, a2);
      __uint64_t CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %p", CurrTime);
  }
  if (!a2 || (*(void *)a2 & 0x8000000000000000) != 0 || a2[2] < 1) {
    goto LABEL_42;
  }
  uint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    *(_OWORD *)(v7 + 16 * (a1[9] % *a1)) = *(_OWORD *)a2;
    int v8 = a1[9];
    if (!v8) {
      *((_OWORD *)a1 + 1) = *(_OWORD *)a2;
    }
    a1[9] = v8 + 1;
    if (AVE_FPS::CalcRt((AVE_FPS *)a1))
    {
      if (AVE_Log_CheckLevel(0x49u, 4))
      {
        int v9 = AVE_Log_CheckConsole(0x49u);
        __uint64_t v10 = AVE_GetCurrTime();
        double v11 = AVE_Log_GetLevelStr(4);
        if (v9)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | failed to calculate realtime FPS %p %p\n", v10, 73, v11, "AVE_FPS", "Add", 501, "ret == 0", a1, a2);
          __uint64_t v10 = AVE_GetCurrTime();
          uint64_t v29 = AVE_Log_GetLevelStr(4);
        }
        else
        {
          uint64_t v29 = v11;
        }
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to calculate realtime FPS %p %p", v10, 73, v29);
      }
      goto LABEL_42;
    }
    if ((int)a1[8] >= 1 && AVE_FPS::CalcSlide((AVE_FPS *)a1))
    {
      if (AVE_Log_CheckLevel(0x49u, 4))
      {
        int v16 = AVE_Log_CheckConsole(0x49u);
        __uint64_t v17 = AVE_GetCurrTime();
        uint64_t v18 = AVE_Log_GetLevelStr(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | failed to calculate sliding average FPS %p %p\n", v17, 73, v18, "AVE_FPS", "Add", 507, "ret == 0", a1, a2);
          __uint64_t v17 = AVE_GetCurrTime();
          __uint64_t v31 = AVE_Log_GetLevelStr(4);
        }
        else
        {
          __uint64_t v31 = v18;
        }
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to calculate sliding average FPS %p %p", v17, 73, v31);
      }
      goto LABEL_42;
    }
    if (AVE_FPS::CalcAvg((AVE_FPS *)a1))
    {
      if (!AVE_Log_CheckLevel(0x49u, 4))
      {
LABEL_42:
        uint64_t v22 = 4294966295;
        goto LABEL_43;
      }
      int v19 = AVE_Log_CheckConsole(0x49u);
      __uint64_t v20 = AVE_GetCurrTime();
      __uint64_t v21 = AVE_Log_GetLevelStr(4);
      if (v19)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed to calculate average FPS %p %p\n", v20, 73, v21, "AVE_FPS", "Add", 512, "ret == 0", a1, a2);
LABEL_37:
        __uint64_t v24 = AVE_GetCurrTime();
        int v32 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to calculate average FPS %p %p", v24, 73, v32);
        goto LABEL_42;
      }
    }
    else
    {
      if (!AVE_FPS::CalcOverall((AVE_FPS *)a1))
      {
        uint64_t v22 = 0;
        goto LABEL_43;
      }
      if (!AVE_Log_CheckLevel(0x49u, 4)) {
        goto LABEL_42;
      }
      int v23 = AVE_Log_CheckConsole(0x49u);
      __uint64_t v20 = AVE_GetCurrTime();
      __uint64_t v21 = AVE_Log_GetLevelStr(4);
      if (v23)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed to calculate average FPS %p %p\n", v20, 73, v21, "AVE_FPS", "Add", 516, "ret == 0", a1, a2);
        goto LABEL_37;
      }
    }
    syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to calculate average FPS %p %p", v20, 73, v21);
    goto LABEL_42;
  }
  if (AVE_Log_CheckLevel(0x49u, 4))
  {
    int v12 = AVE_Log_CheckConsole(0x49u);
    __uint64_t v13 = AVE_GetCurrTime();
    int v14 = AVE_Log_GetLevelStr(4);
    if (v12)
    {
      printf("%lld %d AVE %s: %s::%s:%d %s | wrong state %p %p\n", v13, 73, v14, "AVE_FPS", "Add", 488, "m_psTime != __null", a1, a2);
      __uint64_t v15 = AVE_GetCurrTime();
      int v30 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong state %p %p", v15, 73, v30);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong state %p %p", v13, 73, v14);
    }
  }
  uint64_t v22 = 4294966285;
LABEL_43:
  if (AVE_Log_CheckLevel(0x49u, 7))
  {
    int v25 = AVE_Log_CheckConsole(0x49u);
    __uint64_t v26 = AVE_GetCurrTime();
    int v27 = AVE_Log_GetLevelStr(7);
    if (v25)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %p %d\n", v26, 73, v27, "AVE_FPS", "Add", a1, a2, v22);
      __uint64_t v26 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Exit %p %p %d", v26, 73);
  }
  return v22;
}

double AVE_FPS::GetRt(AVE_FPS *this)
{
  return *((double *)this + 5);
}

double AVE_FPS::GetSlide(AVE_FPS *this)
{
  uint64_t v1 = 56;
  if (*((int *)this + 8) > 0) {
    uint64_t v1 = 48;
  }
  return *(double *)((char *)this + v1);
}

uint64_t AVE_FPS::GetTotalCnt(AVE_FPS *this)
{
  return *((unsigned int *)this + 9);
}

void AVE_BlkPool::AVE_BlkPool(AVE_BlkPool *this)
{
  *(void *)((char *)this + 12) = 0;
  *(void *)((char *)this + 4) = 0;
  AVE_DLList_Init((void *)this + 4);
  *((_DWORD *)this + 12) = 0;
}

void *AVE_BlkPool::Destroy(AVE_BlkPool *this)
{
  uint64_t v2 = (void *)((char *)this + 32);
  do
  {
    uint64_t result = (void *)AVE_DLList_Back(v2);
    if (!result) {
      break;
    }
    int v4 = result;
    AVE_DLList_PopBack((uint64_t)v2);
    uint64_t result = (void *)AVE_BlkBuf_Destroy(v4);
  }
  while (!result);
  if (*((void *)this + 3))
  {
    uint64_t result = (void *)AVE_Mutex_Destroy(*((pthread_mutex_t **)this + 3));
    *((void *)this + 3) = 0;
  }
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 12) = 0;
  *(void *)((char *)this + 12) = 0;
  *(void *)((char *)this + 4) = 0;
  return result;
}

void AVE_BlkPool::~AVE_BlkPool(AVE_BlkPool *this)
{
}

uint64_t AVE_BlkPool::CreateWithMem(AVE_BlkPool *this, int a2, uint64_t a3, int a4, int a5, int a6, unsigned int a7, int8x8_t a8)
{
  __uint64_t v21 = 0;
  uint64_t v8 = 4294966295;
  if (a4 >= 1 && a5 >= 1 && a6 >= 1 && a7 <= 0x40)
  {
    if (!a7 || (a8.i32[0] = a7, uint8x8_t v16 = (uint8x8_t)vcnt_s8(a8), v16.i16[0] = vaddlv_u8(v16), v16.i32[0] <= 1u))
    {
      if (a2)
      {
        uint64_t v18 = AVE_Mutex_Create();
        if (!v18) {
          return 4294966293;
        }
        __uint64_t v17 = v18;
        uint64_t v19 = AVE_BlkBuf_CreateWithMem(a3, a4, a5, a6, a7, (uint64_t *)&v21);
        if (!v19) {
          goto LABEL_13;
        }
        uint64_t v8 = v19;
        AVE_Mutex_Destroy(v17);
      }
      else
      {
        uint64_t v8 = AVE_BlkBuf_CreateWithMem(a3, a4, a5, a6, a7, (uint64_t *)&v21);
        if (!v8)
        {
          __uint64_t v17 = 0;
LABEL_13:
          *(_DWORD *)this = a2;
          *((_DWORD *)this + 1) = a5;
          *((_DWORD *)this + 2) = a6;
          *((_DWORD *)this + 3) = a7;
          *((_DWORD *)this + 4) = 0;
          *((void *)this + 3) = v17;
          AVE_DLList_PushBack((void *)this + 4, v21);
          return 0;
        }
      }
    }
  }
  return v8;
}

uint64_t AVE_BlkPool::SearchAllocBuf(uint64_t a1, uint64_t *a2)
{
  *a2 = 0;
  uint64_t v3 = a1 + 32;
  for (uint64_t i = AVE_DLList_Begin(a1 + 32); ; uint64_t i = AVE_DLList_Next(v5))
  {
    uint64_t v5 = i;
    if (i == AVE_DLList_End(v3)) {
      return 4294966289;
    }
    if (AVE_BlkBuf_Avail(v5)) {
      break;
    }
  }
  uint64_t result = 0;
  *a2 = v5;
  return result;
}

uint64_t AVE_BlkPool::Alloc(AVE_BlkPool *this, unint64_t *a2, int *a3)
{
  int v9 = 0;
  if (!a2) {
    return 4294966295;
  }
  *a2 = 0;
  if (*(_DWORD *)this) {
    AVE_Mutex_Lock(*((pthread_mutex_t **)this + 3));
  }
  uint64_t v6 = AVE_BlkPool::SearchAllocBuf((uint64_t)this, (uint64_t *)&v9);
  if (!v6) {
    goto LABEL_8;
  }
  uint64_t v7 = v6;
  if (*((_DWORD *)this + 12) < *((_DWORD *)this + 4))
  {
    uint64_t v7 = AVE_BlkBuf_Create(*((_DWORD *)this + 1), *((_DWORD *)this + 2), *((_DWORD *)this + 3), (uint64_t *)&v9);
    if (!v7)
    {
      AVE_DLList_PushBack((void *)this + 4, v9);
      ++*((_DWORD *)this + 12);
LABEL_8:
      uint64_t v7 = AVE_BlkBuf_Alloc((uint64_t)v9, a2, a3);
    }
  }
  if (*(_DWORD *)this) {
    AVE_Mutex_Unlock(*((pthread_mutex_t **)this + 3));
  }
  return v7;
}

uint64_t AVE_BlkPool::SearchFreeBuf(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  *a3 = 0;
  uint64_t v5 = a1 + 32;
  for (uint64_t i = AVE_DLList_Begin(a1 + 32); ; uint64_t i = AVE_DLList_Next(v7))
  {
    uint64_t v7 = i;
    if (i == AVE_DLList_End(v5)) {
      return 4294966295;
    }
    if (AVE_BlkBuf_CheckAddr(v7, a2)) {
      break;
    }
  }
  uint64_t result = 0;
  *a3 = v7;
  return result;
}

uint64_t AVE_BlkPool::Free(pthread_mutex_t **this, unint64_t a2)
{
  uint64_t v9 = 0;
  if (*(_DWORD *)this) {
    AVE_Mutex_Lock(this[3]);
  }
  uint64_t v4 = AVE_BlkPool::SearchFreeBuf((uint64_t)this, a2, &v9);
  if (!v4)
  {
    uint64_t v4 = AVE_BlkBuf_Free(v9, a2);
    if (!v4)
    {
      uint64_t v5 = AVE_DLList_RBegin((uint64_t)(this + 4));
      if (*((_DWORD *)this + 12))
      {
        uint64_t v6 = (uint64_t *)v5;
        while (v6 != (uint64_t *)AVE_DLList_REnd((uint64_t)(this + 4)))
        {
          uint64_t v7 = AVE_DLList_Prev((uint64_t)v6);
          if (AVE_BlkBuf_Empty((uint64_t)v6))
          {
            AVE_DLList_Erase(v6);
            AVE_BlkBuf_Destroy(v6);
            uint64_t v4 = 0;
            --*((_DWORD *)this + 12);
            goto LABEL_13;
          }
          uint64_t v4 = 0;
          uint64_t v6 = (uint64_t *)v7;
          if (!*((_DWORD *)this + 12)) {
            goto LABEL_13;
          }
        }
      }
      uint64_t v4 = 0;
    }
  }
LABEL_13:
  if (*(_DWORD *)this) {
    AVE_Mutex_Unlock(this[3]);
  }
  return v4;
}

uint64_t AVE_BlkPool::Idx2Addr(pthread_mutex_t **this, int a2, unint64_t *a3)
{
  if (*(_DWORD *)this) {
    AVE_Mutex_Lock(this[3]);
  }
  if (*((_DWORD *)this + 12))
  {
    uint64_t v6 = 4294966295;
  }
  else
  {
    uint64_t v7 = AVE_DLList_Front(this + 4);
    uint64_t v6 = AVE_BlkBuf_Idx2Addr(v7, a2, a3);
  }
  if (*(_DWORD *)this) {
    AVE_Mutex_Unlock(this[3]);
  }
  return v6;
}

uint64_t AVE_BlkPool::Addr2Idx(pthread_mutex_t **this, unint64_t a2, int *a3)
{
  if (*(_DWORD *)this) {
    AVE_Mutex_Lock(this[3]);
  }
  if (*((_DWORD *)this + 12))
  {
    uint64_t v6 = 4294966295;
  }
  else
  {
    uint64_t v7 = AVE_DLList_Front(this + 4);
    uint64_t v6 = AVE_BlkBuf_Addr2Idx(v7, a2, a3);
  }
  if (*(_DWORD *)this) {
    AVE_Mutex_Unlock(this[3]);
  }
  return v6;
}

unsigned char *AVE_FwStats_PrintDiff(unsigned char *result, char *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result && a2)
  {
    if (a3)
    {
      int v10 = a4;
      double v11 = result;
      uint64_t v12 = *a3;
      LODWORD(v12) = AVE_SNPrintf(&a2[v12], (int)a4 - (int)v12, "%lld,", a4, a5, a6, a7, a8, v11[8] - *v11) + v12;
      LODWORD(v12) = AVE_SNPrintf(&a2[(int)v12], v10 - (int)v12, "%lld,", v13, v14, v15, v16, v17, v11[520] - v11[16])
                   + v12;
      LODWORD(v12) = AVE_SNPrintf(&a2[(int)v12], v10 - (int)v12, "%lld,", v18, v19, v20, v21, v22, v11[24] - v11[16])
                   + v12;
      LODWORD(v12) = AVE_SNPrintf(&a2[(int)v12], v10 - (int)v12, "%lld,", v23, v24, v25, v26, v27, v11[40] - v11[24])
                   + v12;
      LODWORD(v12) = AVE_SNPrintf(&a2[(int)v12], v10 - (int)v12, "%lld,", v28, v29, v30, v31, v32, v11[240] - v11[32])
                   + v12;
      LODWORD(v12) = AVE_SNPrintf(&a2[(int)v12], v10 - (int)v12, "%lld,", v33, v34, v35, v36, v37, v11[464] - v11[248])
                   + v12;
      LODWORD(v12) = AVE_SNPrintf(&a2[(int)v12], v10 - (int)v12, "%lld,", v38, v39, v40, v41, v42, v11[208] - v11[192])
                   + v12;
      LODWORD(v12) = AVE_SNPrintf(&a2[(int)v12], v10 - (int)v12, "%lld,", v43, v44, v45, v46, v47, v11[408] - v11[200])
                   + v12;
      LODWORD(v12) = AVE_SNPrintf(&a2[(int)v12], v10 - (int)v12, "%lld,", v48, v49, v50, v51, v52, v11[496] - v11[416])
                   + v12;
      LODWORD(v12) = AVE_SNPrintf(&a2[(int)v12], v10 - (int)v12, "%lld,", v53, v54, v55, v56, v57, v11[232] - v11[216])
                   + v12;
      LODWORD(v12) = AVE_SNPrintf(&a2[(int)v12], v10 - (int)v12, "%lld,", v58, v59, v60, v61, v62, v11[432] - v11[224])
                   + v12;
      uint64_t result = (unsigned char *)AVE_SNPrintf(&a2[(int)v12], v10 - (int)v12, "%lld,", v63, v64, v65, v66, v67, v11[512] - v11[440]);
      *a3 = result + v12;
    }
  }
  return result;
}

uint64_t AVE_FwStats_PrintSet(uint64_t result, char *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result && a2 && a3)
  {
    int v10 = a4;
    uint64_t v11 = result;
    uint64_t v12 = 0;
    int v13 = *a3;
    do
    {
      uint64_t result = AVE_SNPrintf(&a2[v13], v10 - v13, "%lld,", a4, a5, a6, a7, a8, *(void *)(v11 + v12));
      int v13 = *a3 + result;
      *a3 = v13;
      v12 += 8;
    }
    while (v12 != 544);
  }
  return result;
}

uint64_t AVE_FwStats_PrintAll(const void *a1, const void *a2, const void *a3, int a4, int a5)
{
  if (AVE_Log_CheckLevel(0x3Au, 7))
  {
    int v8 = AVE_Log_CheckConsole(0x3Au);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v8)
    {
      printf("%lld %d AVE %s: %s Enter %p %p %p %d %d\n", CurrTime, 58, LevelStr, "AVE_FwStats_PrintAll", a1, a2, a3, a4, a5);
      __uint64_t CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %p %p %d %d", CurrTime, 58);
  }
  if (a1 && a2)
  {
    if (a3) {
      operator new[]();
    }
    uint64_t v15 = 4294966288;
  }
  else
  {
    if (AVE_Log_CheckLevel(0x3Au, 4))
    {
      int v11 = AVE_Log_CheckConsole(0x3Au);
      __uint64_t v12 = AVE_GetCurrTime();
      int v13 = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d %d\n", v12, 58, v13, "AVE_FwStats_PrintAll", 198, "(psFwStats != __null) && (pEUMap != __null)", a1, a2, a3, a4, a5);
        __uint64_t v14 = AVE_GetCurrTime();
        uint64_t v21 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d %d", v14, 58, v21, "AVE_FwStats_PrintAll");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d %d", v12, 58, v13, "AVE_FwStats_PrintAll");
      }
    }
    uint64_t v15 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x3Au, 7))
  {
    int v16 = AVE_Log_CheckConsole(0x3Au);
    __uint64_t v17 = AVE_GetCurrTime();
    uint64_t v18 = AVE_Log_GetLevelStr(7);
    if (v16)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %p %d %d %d\n", v17, 58, v18, "AVE_FwStats_PrintAll", a1, a2, a3, a4, a5, v15);
      __uint64_t v19 = AVE_GetCurrTime();
      uint64_t v22 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %p %d %d %d", v19, 58, v22);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %p %d %d %d", v17, 58, v18);
    }
  }
  return v15;
}

uint64_t AVE_MCTFStats_PrintAll(const void *a1, FILE *a2, int a3)
{
  if (AVE_Log_CheckLevel(0x3Au, 7))
  {
    int v6 = AVE_Log_CheckConsole(0x3Au);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p %p %d\n", CurrTime, 58, LevelStr, "AVE_MCTFStats_PrintAll", a1, a2, a3);
      __uint64_t CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %p %d", CurrTime);
  }
  if (a1)
  {
    if (a2)
    {
      if (!a3) {
        fwrite("Frame#, FrameDiff, Fn_SetLrmeDiff, HW_LrmeDiff, Fn_SetLrrcDiff, HW_LrrcDiff, Fn_SetPipeDiff, HW_PipeDiff, Fn_PipeDoneDiff, FrameQIn, Fn_SetLrmeStart, HW_LrmeStart, Fn_SetLRMEDone, Fn_SetLrrcStart, HW_LrrcStart, Fn_SetLRRCDone, Fn_SetPipeStart, HW_PipeStart, Fn_SetPipeDone, HW_LrmeDone, HW_LrrcDone, HW_PipeDone, Fn_PipeDoneStart, Fn_PipeDoneEnd, LrmeStatsDone, LrrcStatsDone, PipeStatsDone, FrameOut\n", 0x191uLL, 1uLL, a2);
      }
      operator new[]();
    }
    uint64_t v13 = 4294966288;
  }
  else
  {
    if (AVE_Log_CheckLevel(0x3Au, 4))
    {
      int v9 = AVE_Log_CheckConsole(0x3Au);
      __uint64_t v10 = AVE_GetCurrTime();
      int v11 = AVE_Log_GetLevelStr(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", v10, 58, v11, "AVE_MCTFStats_PrintAll", 384, "pMctfStats != __null", 0, a2, a3);
        __uint64_t v12 = AVE_GetCurrTime();
        __uint64_t v19 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v12, 58, v19);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v10, 58, v11);
      }
    }
    uint64_t v13 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x3Au, 7))
  {
    int v14 = AVE_Log_CheckConsole(0x3Au);
    __uint64_t v15 = AVE_GetCurrTime();
    int v16 = AVE_Log_GetLevelStr(7);
    if (v14)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %d %d\n", v15, 58, v16, "AVE_MCTFStats_PrintAll", a1, a2, a3, v13);
      __uint64_t v17 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %d %d", v17);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %d %d", v15);
    }
  }
  return v13;
}

uint64_t AVE_HEVC_ST_RPS_Retrieve(CFDictionaryRef theDict, _OWORD *a2)
{
  *(_WORD *)uint64_t v28 = 0;
  __int16 v27 = 0;
  if (!theDict || !a2)
  {
    if (AVE_Log_CheckLevel(0xCCu, 4))
    {
      int v9 = AVE_Log_CheckConsole(0xCCu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p\n", CurrTime, 204, LevelStr, "AVE_HEVC_ST_RPS_Retrieve", 28, "pDict != __null && pInfo != __null", theDict, a2);
        __uint64_t CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p", CurrTime, 204);
    }
    return 4294966295;
  }
  *((_DWORD *)a2 + 88) = 0;
  a2[20] = 0u;
  a2[21] = 0u;
  a2[18] = 0u;
  a2[19] = 0u;
  a2[16] = 0u;
  a2[17] = 0u;
  a2[14] = 0u;
  a2[15] = 0u;
  a2[12] = 0u;
  a2[13] = 0u;
  a2[10] = 0u;
  a2[11] = 0u;
  a2[8] = 0u;
  a2[9] = 0u;
  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  if (AVE_CFDict_GetBool(theDict, @"InterRefPicSetPredictionFlag", &v28[1]))
  {
    if (*(unsigned char *)a2)
    {
LABEL_5:
      AVE_CFDict_GetSInt32(theDict, @"DeltaIdxMinus1", (int *)a2 + 1);
      if (!AVE_CFDict_GetChar(theDict, @"DeltaRPSSign", (char *)v28)) {
        *((unsigned char *)a2 + 8) = v28[0];
      }
      AVE_CFDict_GetSInt32(theDict, @"AbsDeltaRPSMinus1", (int *)a2 + 3);
      if (!AVE_CFDict_GetSInt16(theDict, @"UsedByCurrPicFlag", &v27))
      {
        int8x16_t v4 = (int8x16_t)vdupq_n_s32((unsigned __int16)v27);
        v5.i64[0] = 0x101010101010101;
        v5.i64[1] = 0x101010101010101;
        a2[1] = vbicq_s8(v5, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v4, (int8x16_t)xmmword_1BA79C2A0)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v4, (int8x16_t)xmmword_1BA79C2B0))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v4, (int8x16_t)xmmword_1BA79C2C0)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v4, (int8x16_t)xmmword_1BA79C2D0)))));
      }
      uint64_t result = AVE_CFDict_GetSInt16(theDict, @"UsedDeltaFlag", &v27);
      if (!result)
      {
        int8x16_t v7 = (int8x16_t)vdupq_n_s32((unsigned __int16)v27);
        v8.i64[0] = 0x101010101010101;
        v8.i64[1] = 0x101010101010101;
        a2[2] = vbicq_s8(v8, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v7, (int8x16_t)xmmword_1BA79C2A0)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v7, (int8x16_t)xmmword_1BA79C2B0))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v7, (int8x16_t)xmmword_1BA79C2C0)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v7, (int8x16_t)xmmword_1BA79C2D0)))));
      }
      return result;
    }
  }
  else
  {
    BOOL v12 = v28[1];
    *(unsigned char *)a2 = v28[1];
    if (v12) {
      goto LABEL_5;
    }
  }
  AVE_CFDict_GetSInt32(theDict, @"NumNegativePics", (int *)a2 + 12);
  uint64_t result = AVE_CFDict_GetSInt32(theDict, @"NumPositivePics", (int *)a2 + 13);
  if (!*((_DWORD *)a2 + 12))
  {
LABEL_24:
    if (!*((_DWORD *)a2 + 13)) {
      return result;
    }
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"DeltaPOCS1Minus1");
    if (Value)
    {
      CFArrayRef v21 = Value;
      int Count = CFArrayGetCount(Value);
      if (Count < 1)
      {
LABEL_30:
        uint64_t result = AVE_CFDict_GetSInt16(theDict, @"UsedByCurrPicS1Flag", &v27);
        if (!result)
        {
          int8x16_t v25 = (int8x16_t)vdupq_n_s32((unsigned __int16)v27);
          v26.i64[0] = 0x101010101010101;
          v26.i64[1] = 0x101010101010101;
          *(int8x16_t *)((char *)a2 + 168) = vbicq_s8(v26, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v25, (int8x16_t)xmmword_1BA79C2A0)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v25, (int8x16_t)xmmword_1BA79C2B0))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v25, (int8x16_t)xmmword_1BA79C2C0)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v25, (int8x16_t)xmmword_1BA79C2D0)))));
        }
      }
      else
      {
        CFIndex v23 = 0;
        uint64_t v24 = Count;
        while (1)
        {
          uint64_t result = AVE_CFArray_GetSInt16(v21, v23, &v27);
          if (result) {
            break;
          }
          *((_DWORD *)a2 + v23++ + 26) = v27;
          if (v24 == v23) {
            goto LABEL_30;
          }
        }
      }
      return result;
    }
    return 4294966288;
  }
  CFArrayRef v13 = (const __CFArray *)CFDictionaryGetValue(theDict, @"DeltaPOCS0Minus1");
  if (!v13) {
    return 4294966288;
  }
  CFArrayRef v14 = v13;
  int v15 = CFArrayGetCount(v13);
  if (v15 < 1)
  {
LABEL_22:
    uint64_t result = AVE_CFDict_GetSInt16(theDict, @"UsedByCurrPicS0Flag", &v27);
    if (!result)
    {
      int8x16_t v18 = (int8x16_t)vdupq_n_s32((unsigned __int16)v27);
      v19.i64[0] = 0x101010101010101;
      v19.i64[1] = 0x101010101010101;
      *(int8x16_t *)((char *)a2 + 88) = vbicq_s8(v19, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v18, (int8x16_t)xmmword_1BA79C2A0)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v18, (int8x16_t)xmmword_1BA79C2B0))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v18, (int8x16_t)xmmword_1BA79C2C0)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v18, (int8x16_t)xmmword_1BA79C2D0)))));
    }
    goto LABEL_24;
  }
  CFIndex v16 = 0;
  uint64_t v17 = v15;
  while (1)
  {
    uint64_t result = AVE_CFArray_GetSInt16(v14, v16, &v27);
    if (result) {
      return result;
    }
    *((_WORD *)a2 + v16++ + 28) = v27;
    if (v17 == v16) {
      goto LABEL_22;
    }
  }
}

uint64_t AVE_HEVC_ST_RPS_RetrieveArray(const __CFArray *a1, _OWORD *a2, int *a3)
{
  int8x16_t v4 = a2;
  if (a1 && a2 && a3 && *a3 > 0)
  {
    bzero(a2, 356 * *a3);
    int Count = CFArrayGetCount(a1);
    if (*a3 >= Count) {
      uint64_t v7 = Count;
    }
    else {
      uint64_t v7 = *a3;
    }
    *a3 = 0;
    if ((int)v7 < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v8 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v8);
        if (!ValueAtIndex) {
          break;
        }
        uint64_t result = AVE_HEVC_ST_RPS_Retrieve(ValueAtIndex, v4);
        if (result) {
          return result;
        }
        ++*a3;
        ++v8;
        int8x16_t v4 = (_OWORD *)((char *)v4 + 356);
        if (v7 == v8) {
          return 0;
        }
      }
      return 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xCCu, 4))
    {
      int v11 = AVE_Log_CheckConsole(0xCCu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", CurrTime, 204, LevelStr, "AVE_HEVC_ST_RPS_RetrieveArray", 326, "pArray != __null && pInfo != __null && pNum != __null && *pNum > 0", a1, v4, a3);
        __uint64_t v14 = AVE_GetCurrTime();
        int v15 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v14, 204, v15);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", CurrTime, 204, LevelStr);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_HEVC_Slice_ST_RPS_Retrieve(CFDictionaryRef theDict, BOOL *a2)
{
  if (theDict && a2)
  {
    *((_OWORD *)a2 + 20) = 0u;
    *((_OWORD *)a2 + 21) = 0u;
    *((_OWORD *)a2 + 18) = 0u;
    *((_OWORD *)a2 + 19) = 0u;
    *((_OWORD *)a2 + 16) = 0u;
    *((_OWORD *)a2 + 17) = 0u;
    *((_OWORD *)a2 + 14) = 0u;
    *((_OWORD *)a2 + 15) = 0u;
    *((_OWORD *)a2 + 12) = 0u;
    *((_OWORD *)a2 + 13) = 0u;
    *((_OWORD *)a2 + 10) = 0u;
    *((_OWORD *)a2 + 11) = 0u;
    *((_OWORD *)a2 + 8) = 0u;
    *((_OWORD *)a2 + 9) = 0u;
    *((_OWORD *)a2 + 6) = 0u;
    *((_OWORD *)a2 + 7) = 0u;
    *((_OWORD *)a2 + 4) = 0u;
    *((_OWORD *)a2 + 5) = 0u;
    *((_OWORD *)a2 + 2) = 0u;
    *((_OWORD *)a2 + 3) = 0u;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
    *(_OWORD *)(a2 + 348) = 0u;
    AVE_CFDict_GetBool(theDict, @"ShortTermRefPicSetSPSFlag", a2);
    if (*a2)
    {
      return AVE_CFDict_GetSInt32(theDict, @"ShortTermRefPicSetIdx", (int *)a2 + 1);
    }
    else
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"RPSData");
      if (Value)
      {
        return AVE_HEVC_ST_RPS_Retrieve(Value, a2 + 8);
      }
      else
      {
        return 4294966288;
      }
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xCCu, 4))
    {
      int v5 = AVE_Log_CheckConsole(0xCCu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v5)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p\n", CurrTime, 204, LevelStr, "AVE_HEVC_Slice_ST_RPS_Retrieve", 492, "pDict != __null && pInfo != __null", theDict, a2);
        __uint64_t CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p", CurrTime, 204);
    }
    return 4294966295;
  }
}

uint64_t AVE_BlkBuf_Make(uint64_t a1, void *a2, uint64_t a3, int a4, int a5)
{
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  bzero(a2, 16 * a4);
  AVE_DLList_Init((void *)a1);
  *(void *)(a1 + 56) = a3;
  *(_DWORD *)(a1 + 64) = a5 * a4;
  *(_DWORD *)(a1 + 68) = a4;
  *(_DWORD *)(a1 + 72) = a5;
  *(void *)(a1 + 80) = a2;
  AVE_DLList_Init((void *)(a1 + 88));
  AVE_DLList_Init((void *)(a1 + 104));
  if (a4 >= 1)
  {
    uint64_t v10 = 0;
    do
    {
      AVE_DLList_PushBack((void *)(a1 + 88), (void *)(*(void *)(a1 + 80) + v10));
      v10 += 16;
    }
    while (16 * a4 != v10);
  }
  *(_DWORD *)(a1 + 124) = a4;
  return 0;
}

uint64_t AVE_BlkBuf_Create(int a1, int a2, unsigned int a3, uint64_t *a4)
{
  uint64_t result = 4294966295;
  if (a1 >= 1 && a2 >= 1)
  {
    unsigned int v6 = a3;
    if (a3 <= 0x40)
    {
      if (a3)
      {
        if ((a3 & (a3 - 1)) != 0 || !a4) {
          return result;
        }
      }
      else
      {
        if (!a4) {
          return result;
        }
        unsigned int v6 = 64;
      }
      *a4 = 0;
      int v8 = (v6 - 1 + a2) & -v6;
      int v9 = (v6 - 1 + v8) & -v6;
      int v10 = v9 * a1;
      if (0x7FFFFFFF / v9 <= a1 || v10 == 0) {
        return 4294966281;
      }
      BOOL v12 = malloc_type_malloc(0x80uLL, 0x10300408F93010DuLL);
      if (v12)
      {
        uint64_t v13 = (uint64_t)v12;
        __uint64_t v14 = malloc_type_malloc(16 * a1, 0x20040A4A59CD2uLL);
        if (v14)
        {
          int v15 = v14;
          signed int v16 = v6 - 1 + v10;
          uint64_t v17 = malloc_type_malloc(v16, 0x100004077774924uLL);
          if (v17)
          {
            int8x16_t v18 = v17;
            AVE_BlkBuf_Make(v13, v15, ((unint64_t)v17 + v6 - 1) & -(uint64_t)v6, a1, v8);
            uint64_t result = 0;
            *(void *)(v13 + 16) = v13;
            *(void *)(v13 + 24) = v15;
            *(_DWORD *)(v13 + 40) = 128;
            *(_DWORD *)(v13 + 44) = 16 * a1;
            *(void *)(v13 + 32) = v18;
            *(_DWORD *)(v13 + 48) = v16;
            *a4 = v13;
            return result;
          }
          free((void *)v13);
          int8x16_t v19 = v15;
        }
        else
        {
          int8x16_t v19 = (void *)v13;
        }
        free(v19);
      }
      return 4294966293;
    }
  }
  return result;
}

uint64_t AVE_BlkBuf_CreateWithMem(uint64_t a1, int a2, int a3, int a4, unsigned int a5, uint64_t *a6)
{
  uint64_t v16 = a1;
  int v15 = a2;
  uint64_t result = 4294966295;
  if (a2 >= 1 && a3 >= 1 && a4 >= 1 && a5 <= 0x40)
  {
    if (a5)
    {
      if ((a5 & (a5 - 1)) != 0 || !a6) {
        return result;
      }
    }
    else
    {
      if (!a6) {
        return result;
      }
      a5 = 64;
    }
    *a6 = 0;
    int v9 = (a4 + a5 - 1) & -a5;
    AVE_AlignMem(&v16, &v15, a5, a5);
    if (v15 / v9 >= a3) {
      int v10 = a3;
    }
    else {
      int v10 = v15 / v9;
    }
    int v11 = malloc_type_malloc(0x80uLL, 0x10300408F93010DuLL);
    if (v11)
    {
      uint64_t v12 = (uint64_t)v11;
      uint64_t v13 = malloc_type_malloc(16 * v10, 0x20040A4A59CD2uLL);
      if (v13)
      {
        __uint64_t v14 = v13;
        AVE_BlkBuf_Make(v12, v13, v16, v10, v9);
        uint64_t result = 0;
        *(void *)(v12 + 16) = v12;
        *(void *)(v12 + 24) = v14;
        *(_DWORD *)(v12 + 40) = 128;
        *(_DWORD *)(v12 + 44) = 16 * v10;
        *a6 = v12;
        return result;
      }
      free((void *)v12);
    }
    return 4294966293;
  }
  return result;
}

uint64_t AVE_BlkBuf_Destroy(void *a1)
{
  if (!a1) {
    return 4294966295;
  }
  if (!AVE_DLList_Empty(a1 + 13)) {
    return 4294966280;
  }
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    free(v2);
    a1[4] = 0;
  }
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    free(v3);
    a1[3] = 0;
  }
  uint64_t result = a1[2];
  if (result)
  {
    free((void *)result);
    return 0;
  }
  return result;
}

BOOL AVE_BlkBuf_CheckAddr(uint64_t a1, unint64_t a2)
{
  BOOL result = 0;
  if (a1)
  {
    unint64_t v2 = *(void *)(a1 + 56);
    if (v2 <= a2 && v2 + *(int *)(a1 + 64) > a2) {
      return 1;
    }
  }
  return result;
}

uint64_t AVE_BlkBuf_Alloc(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t result = 4294966295;
  if (a1 && a2)
  {
    *a2 = 0;
    uint64_t v7 = AVE_DLList_Front((void *)(a1 + 88));
    if (v7)
    {
      int v8 = (void *)v7;
      AVE_DLList_PopFront((void *)(a1 + 88));
      AVE_DLList_PushBack((void *)(a1 + 104), v8);
      int v9 = *(_DWORD *)(a1 + 72);
      *a2 = *(void *)(a1 + 56) + (int)(v9 * (((unint64_t)v8 - *(void *)(a1 + 80)) >> 4));
      if (a3) {
        *a3 = v9;
      }
      uint64_t result = 0;
      --*(_DWORD *)(a1 + 124);
    }
    else
    {
      return 4294966289;
    }
  }
  return result;
}

uint64_t AVE_BlkBuf_Free(uint64_t a1, unint64_t a2)
{
  if (!a1) {
    return 4294966295;
  }
  unint64_t v3 = *(void *)(a1 + 56);
  if (a2 < v3 || v3 + *(int *)(a1 + 64) <= a2) {
    return 4294966295;
  }
  int8x16_t v4 = (uint64_t *)(*(void *)(a1 + 80) + ((uint64_t)(((a2 - v3) / *(int *)(a1 + 72)) << 32) >> 28));
  AVE_DLList_Erase(v4);
  AVE_DLList_PushBack((void *)(a1 + 88), v4);
  uint64_t result = 0;
  ++*(_DWORD *)(a1 + 124);
  return result;
}

BOOL AVE_BlkBuf_Empty(uint64_t a1)
{
  return !a1 || AVE_DLList_Empty((void *)(a1 + 104));
}

BOOL AVE_BlkBuf_Avail(BOOL result)
{
  if (result) {
    return !AVE_DLList_Empty((void *)(result + 88));
  }
  return result;
}

uint64_t AVE_BlkBuf_Idx2Addr(uint64_t a1, int a2, void *a3)
{
  if (!a1) {
    return 4294966295;
  }
  uint64_t result = 4294966295;
  if (a3)
  {
    if (*(_DWORD *)(a1 + 68) > a2)
    {
      uint64_t result = 0;
      *a3 = *(void *)(a1 + 56) + *(int *)(a1 + 72) * (uint64_t)a2;
    }
  }
  return result;
}

uint64_t AVE_BlkBuf_Addr2Idx(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t result = 4294966295;
  if (a1)
  {
    if (a3)
    {
      unint64_t v5 = *(void *)(a1 + 56);
      if (a2 >= v5 && v5 + *(int *)(a1 + 64) > a2)
      {
        uint64_t result = 0;
        *a3 = (a2 - v5) / *(int *)(a1 + 72);
      }
    }
  }
  return result;
}

uint64_t AVE_PixelBuf_DumpLinear(__CVBuffer *a1, _DWORD *a2, FILE *a3)
{
  size_t extraRowsOnBottom = 0;
  size_t extraColumnsOnRight = 0;
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferGetExtendedPixels(a1, 0, &extraColumnsOnRight, 0, &extraRowsOnBottom);
  int v24 = a2[1];
  int WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  int v7 = extraColumnsOnRight;
  int HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  int v9 = extraRowsOnBottom + HeightOfPlane;
  int BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  if (a2[3])
  {
    int v11 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
    int v21 = WidthOfPlane;
    int v12 = v7;
    int v13 = ((int)extraColumnsOnRight >> ((int)a2[4] >> 1)) + v11;
    int v14 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
    int v15 = ((int)extraRowsOnBottom >> ((int)a2[5] >> 1)) + v14;
    LODWORD(v17) = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
    uint64_t v16 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
    int v22 = 2 * v13;
    int v7 = v12;
    int WidthOfPlane = v21;
    uint64_t v17 = (int)v17;
  }
  else
  {
    int v22 = 0;
    int v15 = 0;
    uint64_t v17 = 0;
    uint64_t v16 = 0;
  }
  if (v9 >= 1)
  {
    size_t v18 = (v7 + WidthOfPlane) << (v24 == 10);
    do
    {
      fwrite(BaseAddressOfPlane, 1uLL, v18, a3);
      BaseAddressOfPlane += BytesPerRowOfPlane;
      --v9;
    }
    while (v9);
  }
  if (a2[3]) {
    BOOL v19 = v15 < 1;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    do
    {
      fwrite(v16, 1uLL, v22 << (v24 == 10), a3);
      v16 += v17;
      --v15;
    }
    while (v15);
  }
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  return 0;
}

uint64_t AVE_PixelBuf_DumpPacked(__CVBuffer *a1, _DWORD *a2)
{
  size_t extraColumnsOnRight = 0;
  size_t extraRowsOnBottom = 0;
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferGetExtendedPixels(a1, 0, &extraColumnsOnRight, 0, &extraRowsOnBottom);
  int v4 = a2[1];
  int v6 = v4 + 7;
  BOOL v5 = v4 < -7;
  int v7 = v4 + 14;
  if (!v5) {
    int v7 = v6;
  }
  int v8 = v7 >> 3;
  int WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  int v10 = extraColumnsOnRight + WidthOfPlane;
  int HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  int v12 = extraRowsOnBottom + HeightOfPlane;
  CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  if (a2[3])
  {
    int v13 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
    int v14 = ((int)extraColumnsOnRight >> ((int)a2[4] >> 1)) + v13;
    int v15 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
    int v16 = ((int)extraRowsOnBottom >> ((int)a2[5] >> 1)) + v15;
    CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
    CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
    int v17 = v16;
  }
  else
  {
    int v14 = 0;
    int v17 = 0;
  }
  if (v10 * v8 * v12 + 2 * v8 * v14 * v17) {
    operator new[]();
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    int v18 = AVE_Log_CheckConsole(3u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (v18)
    {
      printf("%lld %d AVE %s: %s:%d %s | frame size can not be zero\n", CurrTime, 3, LevelStr, "AVE_PixelBuf_DumpPacked", 147, "frameSize != 0");
      __uint64_t v21 = AVE_GetCurrTime();
      CFIndex v23 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | frame size can not be zero", v21, 3, v23, "AVE_PixelBuf_DumpPacked", 147, "frameSize != 0");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | frame size can not be zero", CurrTime, 3, LevelStr, "AVE_PixelBuf_DumpPacked", 147, "frameSize != 0");
    }
  }
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  return 4294966295;
}

void AVE_PixelBuf_DumpHTPC(__CVBuffer *a1, uint64_t a2)
{
  size_t extraRowsOnBottom = 0;
  size_t extraColumnsOnRight = 0;
  CVPixelBufferGetIOSurface(a1);
  CVPixelBufferGetExtendedPixels(a1, 0, &extraColumnsOnRight, 0, &extraRowsOnBottom);
  CVPixelBufferGetWidthOfPlane(a1, 0);
  CVPixelBufferGetHeightOfPlane(a1, 0);
  IOSurfaceGetBytesPerRowOfCompressedTileHeaderGroupsOfPlane();
  IOSurfaceGetHTPCVerticalHeaderGroupingModeOfPlane();
  IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
  IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
  if (*(_DWORD *)(a2 + 12))
  {
    CVPixelBufferGetWidthOfPlane(a1, 1uLL);
    CVPixelBufferGetHeightOfPlane(a1, 1uLL);
    IOSurfaceGetBytesPerRowOfCompressedTileHeaderGroupsOfPlane();
    IOSurfaceGetHTPCVerticalHeaderGroupingModeOfPlane();
    IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
    IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
  }
  operator new[]();
}

void AVE_PixelBuf_DumpInterchange(__CVBuffer *a1, uint64_t a2)
{
  size_t extraRowsOnBottom = 0;
  size_t extraColumnsOnRight = 0;
  size_t extraRowsOnTop = 0;
  size_t extraColumnsOnLeft = 0;
  CVPixelBufferGetIOSurface(a1);
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
  CVPixelBufferGetWidthOfPlane(a1, 0);
  CVPixelBufferGetHeightOfPlane(a1, 0);
  IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
  IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
  IOSurfaceGetHorizontalPixelOffsetWithinCompressedTileArrayOfPlane();
  IOSurfaceGetVerticalPixelOffsetWithinCompressedTileArrayOfPlane();
  if (*(_DWORD *)(a2 + 12))
  {
    CVPixelBufferGetWidthOfPlane(a1, 1uLL);
    CVPixelBufferGetHeightOfPlane(a1, 1uLL);
    IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
    IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
    IOSurfaceGetHorizontalPixelOffsetWithinCompressedTileArrayOfPlane();
    IOSurfaceGetVerticalPixelOffsetWithinCompressedTileArrayOfPlane();
  }
  operator new[]();
}

uint64_t AVE_PixelBuf_Dump(CVPixelBufferRef pixelBuffer, int a2, __sFILE *a3)
{
  if (pixelBuffer && a3)
  {
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
    int v7 = AVE_PixelFmt_FindByType(PixelFormatType);
    if (v7)
    {
      switch(*((_DWORD *)v7 + 6))
      {
        case 0:
          AVE_PixelBuf_DumpLinear(pixelBuffer, v7, a3);
          return 0;
        case 1:
          return AVE_PixelBuf_DumpPacked(pixelBuffer, v7);
        case 2:
          AVE_PixelBuf_DumpHTPC(pixelBuffer, (uint64_t)v7);
        case 3:
          AVE_PixelBuf_DumpInterchange(pixelBuffer, (uint64_t)v7);
        default:
          return 4294966295;
      }
    }
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v12 = AVE_Log_CheckConsole(3u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to get pixel format details %p %d %p 0x%x\n", CurrTime, 3, LevelStr, "AVE_PixelBuf_Dump", 391, "pPixelFmt != __null", pixelBuffer, a2, a3, PixelFormatType);
        __uint64_t v15 = AVE_GetCurrTime();
        int v18 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get pixel format details %p %d %p 0x%x", v15, 3, v18, "AVE_PixelBuf_Dump");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get pixel format details %p %d %p 0x%x", CurrTime, 3, LevelStr, "AVE_PixelBuf_Dump");
      }
    }
    return 4294966296;
  }
  else
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      int v8 = AVE_Log_CheckConsole(3u);
      __uint64_t v9 = AVE_GetCurrTime();
      int v10 = AVE_Log_GetLevelStr(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p\n", v9, 3, v10, "AVE_PixelBuf_Dump", 384, "pPixelBuf != __null && pFile != __null", pixelBuffer, a2, a3);
        __uint64_t v11 = AVE_GetCurrTime();
        int v17 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v11, 3, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v9, 3, v10);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_WtPred_RetrieveArray(CFDictionaryRef theDict, int a2, int *a3)
{
  if (a2 <= 4 && theDict && a3)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"WeightData_WeightFlagArray");
    CFArrayRef v7 = (const __CFArray *)CFDictionaryGetValue(theDict, @"WeightData_Weight");
    CFArrayRef v8 = (const __CFArray *)CFDictionaryGetValue(theDict, @"WeightData_Weight");
    CFArrayRef v9 = v8;
    if (Value && v7 && v8)
    {
      CFIndex Count = CFArrayGetCount(Value);
      CFIndex v11 = CFArrayGetCount(v7);
      CFIndex v12 = CFArrayGetCount(v9);
      if (a2 < 1)
      {
        return 0;
      }
      else
      {
        CFIndex v13 = 0;
        uint64_t v14 = 0;
        CFIndex v54 = v11;
        CFIndex v55 = Count;
        if ((int)Count >= (int)v11) {
          int v15 = v11;
        }
        else {
          int v15 = Count;
        }
        CFIndex v53 = v12;
        if (v15 >= (int)v12) {
          int v15 = v12;
        }
        CFIndex v16 = v15;
        uint64_t v56 = a2;
        CFIndex v60 = v15;
        while (2)
        {
          uint64_t v17 = 0;
          uint64_t v63 = v14;
          int v18 = &a3[v14];
          BOOL v19 = v18 + 11;
          uint64_t v20 = v18 + 3;
          uint64_t v58 = v18 + 67;
          uint64_t v59 = v18 + 19;
          uint64_t v57 = v18 + 27;
          uint64_t v61 = v18 + 3;
          CFIndex v62 = v13;
          do
          {
            v65[0] = 0;
            int v64 = 0;
            CFIndex v21 = v13 + v17;
            if (v13 + v17 >= v16)
            {
              if (AVE_Log_CheckLevel(0xD7u, 4))
              {
                int v43 = AVE_Log_CheckConsole(0xD7u);
                __uint64_t CurrTime = AVE_GetCurrTime();
                Leveluint64_t Str = AVE_Log_GetLevelStr(4);
                if (v43)
                {
                  printf("%lld %d AVE %s: %s:%d %s | Wrong WP array size %d %d %d %d\n", CurrTime, 215, LevelStr, "AVE_WtPred_RetrieveArray", 56, "arrayIdx < iFlagCnt && arrayIdx < iWeightCnt && arrayIdx < iOffsetCnt", v55, v54, v53, v13 + v17);
                  __uint64_t CurrTime = AVE_GetCurrTime();
                  CFIndex v51 = v53;
                  CFIndex v52 = v13 + v17;
                  CFIndex v49 = v55;
                  CFIndex v50 = v54;
                  uint64_t v48 = AVE_Log_GetLevelStr(4);
                }
                else
                {
                  CFIndex v51 = v53;
                  CFIndex v52 = v13 + v17;
                  CFIndex v49 = v55;
                  CFIndex v50 = v54;
                  uint64_t v48 = LevelStr;
                }
                syslog(3, "%lld %d AVE %s: %s:%d %s | Wrong WP array size %d %d %d %d", CurrTime, 215, v48, "AVE_WtPred_RetrieveArray", 56, "arrayIdx < iFlagCnt && arrayIdx < iWeightCnt && arrayIdx < iOffsetCnt", v49, v50, v51, v52);
              }
              return 4294966295;
            }
            uint64_t result = AVE_CFArray_GetChar(Value, v13 + v17, v65);
            if (result) {
              return result;
            }
            if (v17)
            {
              *BOOL v19 = v65[0];
              uint64_t result = AVE_CFArray_GetSInt32(v7, v13 + v17, &v64);
              if (result) {
                return result;
              }
              if (*v19)
              {
                int v23 = v64;
                int v24 = a3[1];
              }
              else
              {
                int v24 = a3[1];
                int v23 = 1 << v24;
              }
              uint64_t v27 = (v17 - 1);
              uint64_t v28 = &a3[2 * v63];
              uint64_t v29 = &v28[v27];
              v29[35] = v23;
              uint64_t v30 = v29 + 35;
              v30[40] = (-1 << v24) + v23;
              uint64_t result = AVE_CFArray_GetSInt32(v9, v21, &v64);
              if (result) {
                return result;
              }
              if (*v19) {
                int v31 = v64;
              }
              else {
                int v31 = 0;
              }
              uint64_t v32 = &v28[v27];
              v32[51] = v31;
              int v33 = v31 + ((int)(*v30 << 7) >> a3[1]) - 128;
              if (v33 >= 511) {
                int v33 = 511;
              }
              if (v33 <= -512) {
                int v33 = -512;
              }
              v32[91] = v33;
              uint64_t v20 = v61;
              CFIndex v13 = v62;
              CFIndex v16 = v60;
            }
            else
            {
              _DWORD *v20 = v65[0];
              uint64_t result = AVE_CFArray_GetSInt32(v7, v21, &v64);
              if (result) {
                return result;
              }
              if (*v20)
              {
                int v25 = v64;
                int v26 = *a3;
              }
              else
              {
                int v26 = *a3;
                int v25 = 1 << *a3;
              }
              *uint64_t v59 = v25;
              *uint64_t v58 = (-1 << v26) + v25;
              uint64_t result = AVE_CFArray_GetSInt32(v9, v13, &v64);
              if (result) {
                return result;
              }
              if (*v20) {
                int v34 = v64;
              }
              else {
                int v34 = 0;
              }
              int *v57 = v34;
            }
            ++v17;
          }
          while (v17 != 3);
          uint64_t result = 0;
          uint64_t v14 = v63 + 1;
          v13 += 3;
          if (v63 + 1 != v56) {
            continue;
          }
          break;
        }
      }
    }
    else
    {
      if (AVE_Log_CheckLevel(0xD7u, 4))
      {
        int v39 = AVE_Log_CheckConsole(0xD7u);
        __uint64_t v40 = AVE_GetCurrTime();
        uint64_t v41 = AVE_Log_GetLevelStr(4);
        if (v39)
        {
          printf("%lld %d AVE %s: %s:%d %s | CFArray not existing %p %p %p\n", v40, 215, v41, "AVE_WtPred_RetrieveArray", 39, "pFlagArray != __null && pWeightArray != __null && pOffsetArray != __null", Value, v7, v9);
          __uint64_t v42 = AVE_GetCurrTime();
          uint64_t v47 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | CFArray not existing %p %p %p", v42, 215, v47);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | CFArray not existing %p %p %p", v40, 215, v41);
        }
      }
      return 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xD7u, 4))
    {
      int v35 = AVE_Log_CheckConsole(0xD7u);
      __uint64_t v36 = AVE_GetCurrTime();
      uint64_t v37 = AVE_Log_GetLevelStr(4);
      if (v35)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", v36, 215, v37, "AVE_WtPred_RetrieveArray", 30, "pDict != __null && pInfo != __null && iFrameCount <= 4", theDict, a3, a2);
        __uint64_t v38 = AVE_GetCurrTime();
        uint64_t v46 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v38, 215, v46);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v36, 215, v37);
      }
    }
    return 4294966295;
  }
  return result;
}

uint64_t AVE_WtPred_GetInfo(CFDictionaryRef theDict, int a2, _OWORD *a3)
{
  if (!theDict || !a3)
  {
    if (AVE_Log_CheckLevel(0xD7u, 4))
    {
      int v12 = AVE_Log_CheckConsole(0xD7u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p\n", CurrTime, 215, LevelStr, "AVE_WtPred_GetInfo", 246, "pDict != __null && pInfo != __null", theDict, a3);
        __uint64_t CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p", CurrTime, 215);
    }
    return 4294966295;
  }
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  *(_OWORD *)((char *)a3 + 412) = 0u;
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"WeightedPredictionInfo");
  if (!Value)
  {
    if (AVE_Log_CheckLevel(0xD7u, 4))
    {
      int v15 = AVE_Log_CheckConsole(0xD7u);
      __uint64_t v16 = AVE_GetCurrTime();
      uint64_t v17 = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to get dictionary %p %p\n", v16, 215, v17, "AVE_WtPred_GetInfo", 254, "pWPInfoDict != __null", theDict, 0);
        __uint64_t v16 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get dictionary %p %p", v16, 215);
    }
    return 4294966288;
  }
  CFDictionaryRef v7 = Value;
  if (AVE_Log_CheckLevel(0x1Du, 6))
  {
    int v8 = AVE_Log_CheckConsole(0x1Du);
    __uint64_t v9 = AVE_GetCurrTime();
    int v10 = AVE_Log_GetLevelStr(6);
    if (v8)
    {
      printf("%lld %d AVE %s: FIG: AVE_KEY_WP_INFO found \n", v9, 29, v10);
      __uint64_t v11 = AVE_GetCurrTime();
      uint64_t v27 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: FIG: AVE_KEY_WP_INFO found ", v11, 29, v27);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: AVE_KEY_WP_INFO found ", v9, 29, v10);
    }
  }
  Suint64_t Int32 = AVE_CFDict_GetSInt32(v7, @"WeightData_LumaLog2WeightDenom", (int *)a3);
  if (SInt32)
  {
    uint64_t v18 = SInt32;
    if (AVE_Log_CheckLevel(0xD7u, 4))
    {
      int v20 = AVE_Log_CheckConsole(0xD7u);
      __uint64_t v21 = AVE_GetCurrTime();
      int v22 = AVE_Log_GetLevelStr(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v21, 215, v22, "AVE_WtPred_GetInfo", 261, "ret == 0", v7, a3, v18);
        __uint64_t v23 = AVE_GetCurrTime();
        uint64_t v28 = AVE_Log_GetLevelStr(4);
LABEL_26:
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d", v23, 215, v28);
        return v18;
      }
      goto LABEL_33;
    }
    return v18;
  }
  uint64_t v24 = AVE_CFDict_GetSInt32(v7, @"WeightData_ChromaLog2WeightDenom", (int *)a3 + 1);
  if (v24)
  {
    uint64_t v18 = v24;
    if (AVE_Log_CheckLevel(0xD7u, 4))
    {
      int v25 = AVE_Log_CheckConsole(0xD7u);
      __uint64_t v21 = AVE_GetCurrTime();
      int v22 = AVE_Log_GetLevelStr(4);
      if (v25)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v21, 215, v22, "AVE_WtPred_GetInfo", 266, "ret == 0", v7, a3, v18);
        __uint64_t v23 = AVE_GetCurrTime();
        uint64_t v28 = AVE_Log_GetLevelStr(4);
        goto LABEL_26;
      }
LABEL_33:
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d", v21, 215, v22);
    }
    return v18;
  }

  return AVE_WtPred_RetrieveArray(v7, a2, (int *)a3);
}

uint64_t AVE_WtPred_PrintInfo(_DWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  memset(v76, 0, sizeof(v76));
  if (!a1) {
    return 4294966295;
  }
  __uint64_t v9 = a1;
  AVE_ComposePosStr(a4, a5, (char *)v76, 32, a5, a6, a7, a8);
  if (AVE_Log_CheckLevel(a2, (char)a3))
  {
    int v10 = AVE_Log_CheckConsole(a2);
    int v11 = v10;
    if (a3 < 0)
    {
      if (v10 && (-a3 & 0x20) == 0) {
        printf("WP %s luma_log2_weight_denouint64_t m = %d\n", (const char *)v76, *v9);
      }
      syslog(3, "WP %s luma_log2_weight_denouint64_t m = %d");
    }
    else
    {
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr((char)a3);
      if ((a3 & 0x20) == 0 && v11)
      {
        printf("%lld %d AVE %s: WP %s luma_log2_weight_denouint64_t m = %d\n", CurrTime, a2, LevelStr, (const char *)v76, *v9);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr((char)a3);
      }
      syslog(3, "%lld %d AVE %s: WP %s luma_log2_weight_denouint64_t m = %d");
    }
  }
  if (AVE_Log_CheckLevel(a2, (char)a3))
  {
    int v15 = AVE_Log_CheckConsole(a2);
    int v16 = v15;
    if (a3 < 0)
    {
      if (v15 && (-a3 & 0x20) == 0) {
        printf("WP %s chroma_log2_weight_denouint64_t m = %d\n", (const char *)v76, v9[1]);
      }
      syslog(3, "WP %s chroma_log2_weight_denouint64_t m = %d");
    }
    else
    {
      __uint64_t v17 = AVE_GetCurrTime();
      uint64_t v18 = AVE_Log_GetLevelStr((char)a3);
      if ((a3 & 0x20) == 0 && v16)
      {
        printf("%lld %d AVE %s: WP %s chroma_log2_weight_denouint64_t m = %d\n", v17, a2, v18, (const char *)v76, v9[1]);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr((char)a3);
      }
      syslog(3, "%lld %d AVE %s: WP %s chroma_log2_weight_denouint64_t m = %d");
    }
  }
  if (AVE_Log_CheckLevel(a2, (char)a3))
  {
    int v19 = AVE_Log_CheckConsole(a2);
    int v20 = v19;
    if (a3 < 0)
    {
      if (v19 && (-a3 & 0x20) == 0) {
        printf("WP %s delta_chroma_log2_weight_denouint64_t m = %d\n", (const char *)v76, v9[2]);
      }
      syslog(3, "WP %s delta_chroma_log2_weight_denouint64_t m = %d");
    }
    else
    {
      __uint64_t v21 = AVE_GetCurrTime();
      int v22 = AVE_Log_GetLevelStr((char)a3);
      if ((a3 & 0x20) == 0 && v20)
      {
        printf("%lld %d AVE %s: WP %s delta_chroma_log2_weight_denouint64_t m = %d\n", v21, a2, v22, (const char *)v76, v9[2]);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr((char)a3);
      }
      syslog(3, "%lld %d AVE %s: WP %s delta_chroma_log2_weight_denouint64_t m = %d");
    }
  }
  uint64_t v23 = 0;
  int v74 = -a3;
  uint64_t v73 = v9 + 51;
  uint64_t v71 = v9;
  do
  {
    if (AVE_Log_CheckLevel(a2, (char)a3))
    {
      int v24 = AVE_Log_CheckConsole(a2);
      int v25 = v24;
      if (a3 < 0)
      {
        if (v24 && (v74 & 0x20) == 0) {
          printf("WP %s luma_weight_l0_flag[%d] = %d\n", (const char *)v76, v23, v9[v23 + 3]);
        }
        syslog(3, "WP %s luma_weight_l0_flag[%d] = %d");
      }
      else
      {
        __uint64_t v26 = AVE_GetCurrTime();
        uint64_t v27 = AVE_Log_GetLevelStr((char)a3);
        if ((a3 & 0x20) == 0 && v25)
        {
          printf("%lld %d AVE %s: WP %s luma_weight_l0_flag[%d] = %d\n", v26, a2, v27, (const char *)v76, v23, v9[v23 + 3]);
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr((char)a3);
        }
        syslog(3, "%lld %d AVE %s: WP %s luma_weight_l0_flag[%d] = %d");
      }
    }
    if (AVE_Log_CheckLevel(a2, (char)a3))
    {
      int v28 = AVE_Log_CheckConsole(a2);
      int v29 = v28;
      if (a3 < 0)
      {
        if (v28 && (v74 & 0x20) == 0) {
          printf("WP %s luma_weight_l0[%d] = %d\n", (const char *)v76, v23, v9[v23 + 19]);
        }
        syslog(3, "WP %s luma_weight_l0[%d] = %d");
      }
      else
      {
        __uint64_t v30 = AVE_GetCurrTime();
        int v31 = AVE_Log_GetLevelStr((char)a3);
        if ((a3 & 0x20) == 0 && v29)
        {
          printf("%lld %d AVE %s: WP %s luma_weight_l0[%d] = %d\n", v30, a2, v31, (const char *)v76, v23, v9[v23 + 19]);
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr((char)a3);
        }
        syslog(3, "%lld %d AVE %s: WP %s luma_weight_l0[%d] = %d");
      }
    }
    if (AVE_Log_CheckLevel(a2, (char)a3))
    {
      int v32 = AVE_Log_CheckConsole(a2);
      int v33 = v32;
      if (a3 < 0)
      {
        if (v32 && (v74 & 0x20) == 0) {
          printf("WP %s luma_offset_l0[%d] = %d\n", (const char *)v76, v23, v9[v23 + 27]);
        }
        syslog(3, "WP %s luma_offset_l0[%d] = %d");
      }
      else
      {
        __uint64_t v34 = AVE_GetCurrTime();
        int v35 = AVE_Log_GetLevelStr((char)a3);
        if ((a3 & 0x20) == 0 && v33)
        {
          printf("%lld %d AVE %s: WP %s luma_offset_l0[%d] = %d\n", v34, a2, v35, (const char *)v76, v23, v9[v23 + 27]);
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr((char)a3);
        }
        syslog(3, "%lld %d AVE %s: WP %s luma_offset_l0[%d] = %d");
      }
    }
    if (AVE_Log_CheckLevel(a2, (char)a3))
    {
      int v36 = AVE_Log_CheckConsole(a2);
      int v37 = v36;
      if (a3 < 0)
      {
        if (v36 && (v74 & 0x20) == 0) {
          printf("WP %s delta_luma_weight_l0[%d] = %d\n", (const char *)v76, v23, v9[v23 + 67]);
        }
        syslog(3, "WP %s delta_luma_weight_l0[%d] = %d");
      }
      else
      {
        __uint64_t v38 = AVE_GetCurrTime();
        int v39 = AVE_Log_GetLevelStr((char)a3);
        if ((a3 & 0x20) == 0 && v37)
        {
          printf("%lld %d AVE %s: WP %s delta_luma_weight_l0[%d] = %d\n", v38, a2, v39, (const char *)v76, v23, v9[v23 + 67]);
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr((char)a3);
        }
        syslog(3, "%lld %d AVE %s: WP %s delta_luma_weight_l0[%d] = %d");
      }
    }
    if (AVE_Log_CheckLevel(a2, (char)a3))
    {
      int v40 = AVE_Log_CheckConsole(a2);
      int v41 = v40;
      if (a3 < 0)
      {
        if (v40 && (v74 & 0x20) == 0) {
          printf("WP %s chroma_weight_l0_flag[%d] = %d\n", (const char *)v76, v23, v9[v23 + 11]);
        }
        syslog(3, "WP %s chroma_weight_l0_flag[%d] = %d");
      }
      else
      {
        __uint64_t v42 = AVE_GetCurrTime();
        int v43 = AVE_Log_GetLevelStr((char)a3);
        if ((a3 & 0x20) == 0 && v41)
        {
          printf("%lld %d AVE %s: WP %s chroma_weight_l0_flag[%d] = %d\n", v42, a2, v43, (const char *)v76, v23, v9[v23 + 11]);
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr((char)a3);
        }
        syslog(3, "%lld %d AVE %s: WP %s chroma_weight_l0_flag[%d] = %d");
      }
    }
    uint64_t v44 = v23;
    uint64_t v45 = 0;
    uint64_t v72 = v44;
    uint64_t v46 = v73;
    do
    {
      if (AVE_Log_CheckLevel(a2, (char)a3))
      {
        int v47 = AVE_Log_CheckConsole(a2);
        int v48 = v47;
        if (a3 < 0)
        {
          if (v47 && (v74 & 0x20) == 0) {
            printf("WP %s chroma_weight_l0[%d][%d] = %d\n", (const char *)v76, v44, v45, *(v46 - 16));
          }
          syslog(3, "WP %s chroma_weight_l0[%d][%d] = %d");
        }
        else
        {
          __uint64_t v49 = AVE_GetCurrTime();
          CFIndex v50 = AVE_Log_GetLevelStr((char)a3);
          if ((a3 & 0x20) != 0 || !v48)
          {
            __uint64_t v68 = v49;
          }
          else
          {
            printf("%lld %d AVE %s: WP %s chroma_weight_l0[%d][%d] = %d\n", v49, a2, v50, (const char *)v76, v44, v45, *(v46 - 16));
            __uint64_t v51 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr((char)a3);
            __uint64_t v68 = v51;
          }
          syslog(3, "%lld %d AVE %s: WP %s chroma_weight_l0[%d][%d] = %d", v68);
        }
      }
      if (AVE_Log_CheckLevel(a2, (char)a3))
      {
        int v52 = AVE_Log_CheckConsole(a2);
        int v53 = v52;
        if (a3 < 0)
        {
          if (v52 && (v74 & 0x20) == 0) {
            printf("WP %s chroma_offset_l0[%d][%d] = %d\n", (const char *)v76, v44, v45, *v46);
          }
          syslog(3, "WP %s chroma_offset_l0[%d][%d] = %d");
        }
        else
        {
          __uint64_t v54 = AVE_GetCurrTime();
          CFIndex v55 = AVE_Log_GetLevelStr((char)a3);
          if ((a3 & 0x20) != 0 || !v53)
          {
            syslog(3, "%lld %d AVE %s: WP %s chroma_offset_l0[%d][%d] = %d", v54, a2, v55);
          }
          else
          {
            printf("%lld %d AVE %s: WP %s chroma_offset_l0[%d][%d] = %d\n", v54, a2, v55, (const char *)v76, v44, v45, *v46);
            __uint64_t v56 = AVE_GetCurrTime();
            uint64_t v57 = AVE_Log_GetLevelStr((char)a3);
            syslog(3, "%lld %d AVE %s: WP %s chroma_offset_l0[%d][%d] = %d", v56, a2, v57);
          }
        }
      }
      if (AVE_Log_CheckLevel(a2, (char)a3))
      {
        int v58 = AVE_Log_CheckConsole(a2);
        int v59 = v58;
        if (a3 < 0)
        {
          if (v58 && (v74 & 0x20) == 0) {
            printf("WP %s delta_chroma_weight_l0[%d][%d] = %d\n", (const char *)v76, v44, v45, v46[24]);
          }
          syslog(3, "WP %s delta_chroma_weight_l0[%d][%d] = %d");
        }
        else
        {
          __uint64_t v60 = AVE_GetCurrTime();
          uint64_t v61 = AVE_Log_GetLevelStr((char)a3);
          if ((a3 & 0x20) != 0 || !v59)
          {
            __uint64_t v69 = v60;
          }
          else
          {
            printf("%lld %d AVE %s: WP %s delta_chroma_weight_l0[%d][%d] = %d\n", v60, a2, v61, (const char *)v76, v44, v45, v46[24]);
            __uint64_t v62 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr((char)a3);
            __uint64_t v69 = v62;
          }
          syslog(3, "%lld %d AVE %s: WP %s delta_chroma_weight_l0[%d][%d] = %d", v69);
        }
      }
      if (AVE_Log_CheckLevel(a2, (char)a3))
      {
        int v63 = AVE_Log_CheckConsole(a2);
        int v64 = v63;
        if (a3 < 0)
        {
          if (v63 && (v74 & 0x20) == 0) {
            printf("WP %s delta_chroma_offset_l0[%d][%d] = %d\n", (const char *)v76, v44, v45, v46[40]);
          }
          syslog(3, "WP %s delta_chroma_offset_l0[%d][%d] = %d");
        }
        else
        {
          __uint64_t v65 = AVE_GetCurrTime();
          uint64_t v66 = AVE_Log_GetLevelStr((char)a3);
          if ((a3 & 0x20) != 0 || !v64)
          {
            __uint64_t v70 = v65;
          }
          else
          {
            printf("%lld %d AVE %s: WP %s delta_chroma_offset_l0[%d][%d] = %d\n", v65, a2, v66, (const char *)v76, v44, v45, v46[40]);
            __uint64_t v67 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr((char)a3);
            __uint64_t v70 = v67;
          }
          syslog(3, "%lld %d AVE %s: WP %s delta_chroma_offset_l0[%d][%d] = %d", v70);
        }
      }
      ++v45;
      ++v46;
    }
    while (v45 != 2);
    uint64_t v23 = v44 + 1;
    v73 += 2;
    __uint64_t v9 = v71;
  }
  while (v72 != 3);
  return 0;
}

uint64_t AVE_ParseDLBCfg(char *a1, int *a2)
{
  if (!a1) {
    return 4294966288;
  }
  unint64_t v3 = a1;
  uint64_t v4 = 0;
  BOOL v5 = a2 + 2;
  int v6 = -1;
  CFDictionaryRef v7 = a2 + 2;
LABEL_3:
  uint64_t v8 = 0;
  uint64_t result = *v3;
  if (*v3 <= 0x63u)
  {
    switch(*v3)
    {
      case 'D':
        goto LABEL_33;
      case 'E':
      case 'F':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'O':
      case 'Q':
      case 'R':
        goto LABEL_14;
      case 'G':
        goto LABEL_6;
      case 'M':
        goto LABEL_7;
      case 'N':
        goto LABEL_8;
      case 'P':
        goto LABEL_9;
      case 'S':
        goto LABEL_10;
      case 'T':
        goto LABEL_11;
      default:
        if (result == 32) {
          goto LABEL_32;
        }
        if (*v3) {
          goto LABEL_14;
        }
        goto LABEL_40;
    }
  }
  switch(*v3)
  {
    case 'd':
      goto LABEL_33;
    case 'g':
LABEL_6:
      uint64_t v8 = 4;
      goto LABEL_33;
    case 'm':
LABEL_7:
      uint64_t v8 = 2;
      goto LABEL_33;
    case 'n':
LABEL_8:
      uint64_t v8 = 3;
      goto LABEL_33;
    case 'p':
LABEL_9:
      uint64_t v8 = 5;
      goto LABEL_33;
    case 's':
LABEL_10:
      uint64_t v8 = 6;
      goto LABEL_33;
    case 't':
LABEL_11:
      uint64_t v8 = 1;
      goto LABEL_33;
    default:
LABEL_14:
      if ((result - 48) > 9)
      {
        uint64_t result = 4294966296;
        if ((v6 & 0x80000000) == 0) {
          goto LABEL_41;
        }
        return 4294966288;
      }
      break;
  }
  switch((int)v4)
  {
    case 0:
      unsigned int v10 = atoi(v3);
      if (v10 <= 5)
      {
        CFDictionaryRef v7 = &v5[28 * v10];
        int v6 = v10;
        goto LABEL_30;
      }
      uint64_t result = 4294966290;
      if (v6 < 0) {
        return 4294966288;
      }
      goto LABEL_41;
    case 1:
      v6 &= ~(v6 >> 31);
      *CFDictionaryRef v7 = atoi(v3) != 0;
      goto LABEL_30;
    case 2:
      v6 &= ~(v6 >> 31);
      v7[1] = atoi(v3) != 0;
      goto LABEL_30;
    case 3:
      int v15 = atoi(v3);
      if ((v15 - 9) < 0xFFFFFFF8) {
        goto LABEL_39;
      }
      v6 &= ~(v6 >> 31);
      v7[2] = v15;
      goto LABEL_30;
    case 4:
      unsigned int v16 = atoi(v3);
      if (v16 > 7)
      {
LABEL_39:
        uint64_t result = 4294966278;
LABEL_40:
        if (v6 < 0) {
          return 4294966288;
        }
        goto LABEL_41;
      }
      int v17 = v7[3];
      v6 &= ~(v6 >> 31);
      uint64_t v18 = (uint64_t)&v7[3 * v17 + 3];
      *(_DWORD *)(v18 + 4) = v16;
      *(_DWORD *)(v18 + 8) = 1;
      v7[3] = v17 + 1;
      goto LABEL_30;
    default:
      int v11 = atoi(v3);
      uint64_t v12 = v7[3];
      if ((int)v12 < 1) {
        goto LABEL_35;
      }
      unint64_t v13 = 0;
      uint64_t v14 = 12 * v12;
      break;
  }
  do
  {
    if (v7[v13 / 4 + 4] == v11)
    {
      v7[v13 / 4 + 5] = v4 != 5;
LABEL_30:
      uint64_t result = (uint64_t)strchr(v3, 32);
      if (!result) {
        goto LABEL_40;
      }
      unint64_t v3 = (char *)result;
LABEL_32:
      uint64_t v8 = v4;
LABEL_33:
      ++v3;
      uint64_t v4 = v8;
      goto LABEL_3;
    }
    v13 += 12;
  }
  while (v14 != v13);
LABEL_35:
  uint64_t result = 4294966274;
  if (v6 < 0) {
    return 4294966288;
  }
LABEL_41:
  int v19 = *a2;
  if (*a2 <= v6 + 1) {
    int v19 = v6 + 1;
  }
  *a2 = v19;
  return result;
}

uint64_t AVE_ISP_RetrieveMetadata(CFDictionaryRef theDict, double *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  BOOL v19 = 0;
  *(_OWORD *)int v20 = 0u;
  long long v21 = 0u;
  if (theDict && a2)
  {
    a2[10] = 0.0;
    *(_OWORD *)a2 = 0uLL;
    *((_OWORD *)a2 + 4) = 0uLL;
    *((_OWORD *)a2 + 3) = 0uLL;
    *((_OWORD *)a2 + 2) = 0uLL;
    *((_OWORD *)a2 + 1) = 0uLL;
    AVE_CFDict_GetDouble(theDict, (const __CFString *)*MEMORY[0x1E4F541C0], a2);
    AVE_CFDict_GetDouble(theDict, (const __CFString *)*MEMORY[0x1E4F540F8], a2 + 1);
    AVE_CFDict_GetDouble(theDict, (const __CFString *)*MEMORY[0x1E4F53E48], a2 + 2);
    AVE_CFDict_GetDouble(theDict, (const __CFString *)*MEMORY[0x1E4F53C08], a2 + 3);
    AVE_CFDict_GetDouble(theDict, (const __CFString *)*MEMORY[0x1E4F54388], a2 + 4);
    AVE_CFDict_GetDouble(theDict, (const __CFString *)*MEMORY[0x1E4F543A0], a2 + 5);
    AVE_CFDict_GetDouble(theDict, (const __CFString *)*MEMORY[0x1E4F54390], a2 + 6);
    uint64_t v4 = a2 + 7;
    AVE_CFDict_GetDouble(theDict, (const __CFString *)*MEMORY[0x1E4F541C8], a2 + 7);
    AVE_CFDict_GetSInt32(theDict, (const __CFString *)*MEMORY[0x1E4F54210], (int *)a2 + 16);
    AVE_CFDict_GetSInt32(theDict, (const __CFString *)*MEMORY[0x1E4F54068], (int *)a2 + 17);
    if (AVE_CFDict_GetSInt32(theDict, (const __CFString *)*MEMORY[0x1E4F54318], (int *)a2 + 18) == -1008) {
      *((_DWORD *)a2 + 18) = -1;
    }
    uint64_t Bool = AVE_CFDict_GetBool(theDict, (const __CFString *)*MEMORY[0x1E4F54320], &v19);
    int v6 = v19;
    if (Bool == -1008) {
      int v6 = -1;
    }
    *((_DWORD *)a2 + 19) = v6;
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F54128]);
    if (Value)
    {
      uint64_t Str = AVE_CFStr_GetStr(Value, v20, 32);
      if (Str)
      {
        __uint64_t v9 = Str;
        uint64_t v10 = 0;
        while (strcmp(v9, *(const char **)((char *)&gs_saAVE_CamPortMap + v10)))
        {
          v10 += 16;
          if (v10 == 80)
          {
            int v11 = 0;
            goto LABEL_21;
          }
        }
        int v11 = *(_DWORD *)((char *)&gs_saAVE_CamPortMap + v10 + 8);
LABEL_21:
        *((_DWORD *)a2 + 20) = v11;
        if (AVE_Log_CheckLevel(0x37u, 6))
        {
          int v16 = AVE_Log_CheckConsole(0x37u);
          __uint64_t CurrTime = AVE_GetCurrTime();
          Leveluint64_t Str = AVE_Log_GetLevelStr(6);
          if (v16)
          {
            printf("%lld %d AVE %s: %s:%d SF: %f Port: %s %d\n", CurrTime, 55, LevelStr, "AVE_ISP_RetrieveMetadata", 123, *v4, v9, v11);
            __uint64_t CurrTime = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(6);
          }
          syslog(3, "%lld %d AVE %s: %s:%d SF: %f Port: %s %d", CurrTime);
        }
      }
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x37u, 4))
    {
      int v12 = AVE_Log_CheckConsole(0x37u);
      __uint64_t v13 = AVE_GetCurrTime();
      uint64_t v14 = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p\n", v13, 55, v14, "AVE_ISP_RetrieveMetadata", 75, "pDict != __null && pData != __null", theDict, a2);
        __uint64_t v13 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p", v13, 55);
    }
    return 4294966295;
  }
  return Bool;
}

uint64_t AVE_ISP_CheckMetadata(__CVBuffer *a1)
{
  if (a1)
  {
    CFDictionaryRef v1 = (const __CFDictionary *)AVE_ISP_CopyCFMetadata(a1);
    uint64_t v2 = 4294966288;
    if (v1)
    {
      CFDictionaryRef v3 = v1;
      if (CFDictionaryContainsKey(v1, (const void *)*MEMORY[0x1E4F54210])) {
        uint64_t v2 = 0;
      }
      else {
        uint64_t v2 = 4294966288;
      }
      CFRelease(v3);
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x37u, 4))
    {
      int v4 = AVE_Log_CheckConsole(0x37u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v4)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p\n", CurrTime, 55, LevelStr, "AVE_ISP_CheckMetadata", 216, "pImgBuf != __null", 0);
        __uint64_t CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p", CurrTime);
    }
    return 4294966295;
  }
  return v2;
}

const void *AVE_ISP_CopyCFMetadata(__CVBuffer *a1)
{
  CFDictionaryRef v1 = CVBufferCopyAttachments(a1, kCVAttachmentMode_ShouldPropagate);
  if (!v1) {
    return 0;
  }
  CFDictionaryRef v2 = v1;
  CFStringRef Value = CFDictionaryGetValue(v1, (const void *)*MEMORY[0x1E4F53070]);
  int v4 = Value;
  if (Value) {
    CFRetain(Value);
  }
  CFRelease(v2);
  return v4;
}

uint64_t AVE_ISP_GetMetadata(__CVBuffer *a1, double *a2)
{
  if (a1 && a2)
  {
    CFDictionaryRef v4 = (const __CFDictionary *)AVE_ISP_CopyCFMetadata(a1);
    if (v4)
    {
      CFDictionaryRef v5 = v4;
      uint64_t Metadata = AVE_ISP_RetrieveMetadata(v4, a2);
      CFRelease(v5);
      return Metadata;
    }
    else
    {
      return 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x37u, 4))
    {
      int v8 = AVE_Log_CheckConsole(0x37u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p\n", CurrTime, 55, LevelStr, "AVE_ISP_GetMetadata", 252, "pImgBuf != __null && pData != __null", a1, a2);
        __uint64_t CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p", CurrTime, 55);
    }
    return 4294966295;
  }
}

uint64_t AVE_Log_UpdateConf(unsigned int a1, int a2)
{
  if (a1 > 0xFF) {
    return 4294966295;
  }
  char v5 = a2;
  if (!a2) {
    char v5 = *((unsigned char *)&gs_sAVE_Log_Default + a1);
  }
  gs_sAVE_Log[a1] = v5;
  if ((byte_1EB9F3B90 & 0xFu) >= 7)
  {
    char v6 = byte_1EB9F3B90;
    __uint64_t CurrTime = AVE_GetCurrTime();
    if ((v6 & 0x10) != 0)
    {
      printf("%lld %d AVE %s: %s:%d %d 0x%x\n", CurrTime, 64, "VERB", "AVE_Log_UpdateConf", 116, a1, a2);
      __uint64_t CurrTime = AVE_GetCurrTime();
    }
    syslog(3, "%lld %d AVE %s: %s:%d %d 0x%x", CurrTime, 64, "VERB", "AVE_Log_UpdateConf", 116, a1, a2);
  }
  return 0;
}

BOOL AVE_Log_CheckLevel(unsigned int a1, int a2)
{
  if (a2 >= 0) {
    LOBYTE(v2) = a2;
  }
  else {
    int v2 = -a2;
  }
  return a1 < 5 || a1 <= 0xFF && (v2 & 0xFu) <= (gs_sAVE_Log[a1] & 0xFu);
}

uint64_t AVE_Log_CheckConsole(unsigned int a1)
{
  if (a1 < 2) {
    return 1;
  }
  if (a1 <= 0xFF) {
    return gs_sAVE_Log[a1] & 0x10;
  }
  return 0;
}

const char *AVE_Log_GetLevelStr(int a1)
{
  if (a1 >= 0) {
    LOBYTE(v1) = a1;
  }
  else {
    int v1 = -a1;
  }
  unsigned int v2 = v1 & 0xF;
  if (v2 > 8) {
    return "";
  }
  else {
    return (const char *)*((void *)&gsc_piaAVE_Log_LevelStr + v2);
  }
}

uint64_t AVE_Log_Init(void)
{
  if (!gs_iAVE_Timestamp)
  {
    *(void *)&long long v0 = 0x505050505050505;
    *((void *)&v0 + 1) = 0x505050505050505;
    xmmword_1EB9F3A68 = v0;
    unk_1EB9F3A78 = v0;
    xmmword_1EB9F3B28 = v0;
    unk_1EB9F3B38 = v0;
    xmmword_1EB9F3B08 = v0;
    unk_1EB9F3B18 = v0;
    xmmword_1EB9F3AE8 = v0;
    unk_1EB9F3AF8 = v0;
    xmmword_1EB9F3AC8 = v0;
    unk_1EB9F3AD8 = v0;
    xmmword_1EB9F3AA8 = v0;
    unk_1EB9F3AB8 = v0;
    xmmword_1EB9F3A88 = v0;
    unk_1EB9F3A98 = v0;
    gs_sAVE_Log_Default = v0;
    unk_1EB9F3A58 = v0;
    BYTE4(gs_sAVE_Log_Default) = 6;
    BYTE12(xmmword_1EB9F3A68) = 6;
    byte_1EB9F3A85 = 6;
    byte_1EB9F3A5C = 6;
    BYTE5(xmmword_1EB9F3AA8) = 6;
    BYTE1(xmmword_1EB9F3A88) = 6;
    dword_1EB9F3B4C = 20;
    dword_1EB9F3B48 = 25;
    byte_1EB9F3A60 = 6;
    AVE_MemCpyV2V(gs_sAVE_Log, (char *)&gs_sAVE_Log_Default, 256);
    dword_1EB9F3C54 = dword_1EB9F3B4C;
    dword_1EB9F3C50 = dword_1EB9F3B48;
    gs_iAVE_Timestamp = 1;
  }
  return 0;
}

uint64_t AVE_Log_UpdateConsole(int a1)
{
  if ((byte_1EB9F3B90 & 0xEu) > 5)
  {
    char v2 = byte_1EB9F3B90;
    __uint64_t CurrTime = AVE_GetCurrTime();
    if ((v2 & 0x10) != 0)
    {
      printf("%lld %d AVE %s: %s Enter %d\n", CurrTime, 64, "INFO", "AVE_Log_UpdateConsole", a1);
      __uint64_t CurrTime = AVE_GetCurrTime();
    }
    syslog(3, "%lld %d AVE %s: %s Enter %d", CurrTime, 64, "INFO", "AVE_Log_UpdateConsole", a1);
  }
  for (uint64_t i = 0; i != 256; ++i)
    gs_sAVE_Log[i] = gs_sAVE_Log[i] & 0xEF | (16 * ((gs_sAVE_Log[i] & 0xF) <= a1));
  gs_iAVE_Timestamp = AVE_GetAbsTime();
  AVE_Log_Print();
  if ((byte_1EB9F3B90 & 0xEu) >= 6)
  {
    char v5 = byte_1EB9F3B90;
    __uint64_t v6 = AVE_GetCurrTime();
    if ((v5 & 0x10) != 0)
    {
      printf("%lld %d AVE %s: %s Exit %d %d\n", v6, 64, "INFO", "AVE_Log_UpdateConsole", a1, 0);
      __uint64_t v6 = AVE_GetCurrTime();
    }
    syslog(3, "%lld %d AVE %s: %s Exit %d %d", v6, 64, "INFO", "AVE_Log_UpdateConsole", a1, 0);
  }
  return 0;
}

void AVE_Log_Print()
{
  if ((byte_1EB9F3B90 & 0xFu) >= 7)
  {
    char v0 = byte_1EB9F3B90;
    __uint64_t CurrTime = AVE_GetCurrTime();
    if ((v0 & 0x10) != 0)
    {
      printf("%lld %d AVE %s: %s:%d %llu\n", CurrTime, 64, "VERB", "AVE_Log_Print", 85, gs_iAVE_Timestamp);
      __uint64_t CurrTime = AVE_GetCurrTime();
    }
    syslog(3, "%lld %d AVE %s: %s:%d %llu", CurrTime, 64, "VERB", "AVE_Log_Print", 85, gs_iAVE_Timestamp);
  }
  for (uint64_t i = 0; i != 256; ++i)
  {
    if ((byte_1EB9F3B90 & 0xFu) >= 7)
    {
      char v3 = byte_1EB9F3B90;
      __uint64_t v4 = AVE_GetCurrTime();
      int v5 = gs_sAVE_Log[i];
      if ((v3 & 0x10) != 0)
      {
        printf("%lld %d AVE %s: Log Cfg: %3d = 0x%02x\n", v4, 64, "VERB", i, v5);
        __uint64_t v4 = AVE_GetCurrTime();
        int v5 = gs_sAVE_Log[i];
      }
      syslog(3, "%lld %d AVE %s: Log Cfg: %3d = 0x%02x", v4, 64, "VERB", i, v5);
    }
  }
  if ((byte_1EB9F3B90 & 0xFu) >= 7)
  {
    char v6 = byte_1EB9F3B90;
    __uint64_t v7 = AVE_GetCurrTime();
    if ((v6 & 0x10) != 0)
    {
      printf("%lld %d AVE %s: Log Cfg: %d %d\n", v7, 64, "VERB", dword_1EB9F3C54, dword_1EB9F3C50);
      __uint64_t v7 = AVE_GetCurrTime();
    }
    syslog(3, "%lld %d AVE %s: Log Cfg: %d %d", v7, 64, "VERB", dword_1EB9F3C54, dword_1EB9F3C50);
  }
}

uint64_t AVE_Log_Load(void *a1, uint64_t a2)
{
  uint64_t result = 4294966295;
  if (a1)
  {
    if (a2)
    {
      *a1 = gs_iAVE_Timestamp;
      AVE_MemCpyV2V((unsigned char *)a2, gs_sAVE_Log, 256);
      uint64_t result = 0;
      *(_DWORD *)(a2 + 256) = dword_1EB9F3C50;
      *(_DWORD *)(a2 + 260) = dword_1EB9F3C54;
    }
  }
  return result;
}

uint64_t AVE_Log_PresetConf(unsigned __int8 *a1, int a2, int a3)
{
  for (unsigned int i = 5; i != 256; ++i)
  {
    unint64_t v7 = (unint64_t)i >> 3;
    if ((int)v7 >= a2) {
      break;
    }
    if ((a1[v7] >> (i & 7))) {
      AVE_Log_UpdateConf(i, a3);
    }
  }
  return 0;
}

uint64_t AVE_Log_PresetCfg(unsigned int a1, unint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)int v17 = 0u;
  long long v18 = 0u;
  if ((byte_1EB9F3B90 & 0xEu) >= 6)
  {
    char v5 = byte_1EB9F3B90;
    __uint64_t CurrTime = AVE_GetCurrTime();
    if ((v5 & 0x10) != 0)
    {
      printf("%lld %d AVE %s: %s Enter 0x%x 0x%llx\n", CurrTime, 64, "INFO", "AVE_Log_PresetCfg", a1, a2);
      __uint64_t CurrTime = AVE_GetCurrTime();
    }
    syslog(3, "%lld %d AVE %s: %s Enter 0x%x 0x%llx", CurrTime, 64, "INFO", "AVE_Log_PresetCfg", a1, a2);
  }
  unsigned int v7 = a1 >> 2;
  if (a2)
  {
    uint64_t v8 = 0;
    int v9 = (v7 & 0x3FFFFFC0) - 64;
    do
    {
      if (v9 + (int)v8 > 255) {
        break;
      }
      v17[(v9 + (int)v8) / 8] |= ((a2 >> v8) & 1) << (v9 + v8 - (v2 & 0xF8));
      ++v8;
    }
    while (v8 != 64);
    AVE_Log_PresetConf(v17, 32, a1);
  }
  else
  {
    int v10 = v7 & 0x3FFFFFC0;
    int v11 = (v7 & 0x3FFFFFC0) - 64;
    int v12 = 320 - v10;
    if ((unint64_t)(v11 - 192) >= 0xFFFFFFFFFFFFFF00) {
      int v13 = 64;
    }
    else {
      int v13 = v12;
    }
    AVE_MemCpyV2V(&gs_sAVE_Log[v11], (char *)&gs_sAVE_Log_Default + v11, v13);
  }
  if ((a1 & 0xFFFFFEFF) != 0) {
    gs_iAVE_Timestamp = AVE_GetAbsTime();
  }
  AVE_Log_Print();
  if ((byte_1EB9F3B90 & 0xEu) >= 6)
  {
    char v14 = byte_1EB9F3B90;
    __uint64_t v15 = AVE_GetCurrTime();
    if ((v14 & 0x10) != 0)
    {
      printf("%lld %d AVE %s: %s Exit 0x%x 0x%llx %d\n", v15, 64, "INFO", "AVE_Log_PresetCfg", a1, a2, 0);
      __uint64_t v15 = AVE_GetCurrTime();
    }
    syslog(3, "%lld %d AVE %s: %s Exit 0x%x 0x%llx %d", v15, 64, "INFO", "AVE_Log_PresetCfg", a1, a2, 0);
  }
  return 0;
}

uint64_t AVE_Log_ReadCfg(const char *a1)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  *(_OWORD *)__uint64_t v54 = 0u;
  long long v55 = 0u;
  memset(&v53, 0, sizeof(v53));
  uint64_t v52 = 0;
  char v51 = 0;
  size_t v50 = 0;
  gsc_piaAVE_Log_DefaultCfgFilePath[0] = 0;
  qword_1EB9F3A30 = 0;
  if (a1) {
    gsc_piaAVE_Log_DefaultCfgFilePath[0] = (uint64_t)a1;
  }
  int TemporayPath = AVE_GetTemporayPath(v54, 192);
  if (TemporayPath >= 1)
  {
    AVE_SNPrintf(&v54[TemporayPath], 192 - TemporayPath, "%s", v2, v3, v4, v5, v6, (char)"ave_log.cfg");
    qword_1EB9F3A30 = (uint64_t)v54;
  }
  uint64_t v7 = 0;
  while (1)
  {
    uint64_t v8 = (const char *)gsc_piaAVE_Log_DefaultCfgFilePath[v7];
    if (v8) {
      break;
    }
LABEL_27:
    if (++v7 == 4)
    {
      if ((byte_1EB9F3B90 & 8) != 0)
      {
        char v22 = byte_1EB9F3B90;
        __uint64_t CurrTime = AVE_GetCurrTime();
        if ((v22 & 0x10) != 0)
        {
          printf("%lld %d AVE %s: cannot find available config file\n", CurrTime, 64, "DBG");
          __uint64_t CurrTime = AVE_GetCurrTime();
        }
        syslog(3, "%lld %d AVE %s: cannot find available config file", CurrTime, 64, "DBG");
      }
      return 4294966288;
    }
  }
  if (stat((const char *)gsc_piaAVE_Log_DefaultCfgFilePath[v7], &v53))
  {
    if ((byte_1EB9F3B90 & 8) != 0)
    {
      char v9 = byte_1EB9F3B90;
      __uint64_t v10 = AVE_GetCurrTime();
      if ((v9 & 0x10) != 0)
      {
        printf("%lld %d AVE %s: log config file doesn't exist at %s\n", v10, 64, "DBG", v8);
        AVE_GetCurrTime();
      }
      syslog(3, "%lld %d AVE %s: log config file doesn't exist at %s");
    }
    goto LABEL_27;
  }
  if ((byte_1EB9F3B90 & 8) != 0)
  {
    char v11 = byte_1EB9F3B90;
    __uint64_t v12 = AVE_GetCurrTime();
    if ((v11 & 0x10) != 0)
    {
      printf("%lld %d AVE %s: log config file is at %s\n", v12, 64, "DBG", v8);
      __uint64_t v12 = AVE_GetCurrTime();
    }
    syslog(3, "%lld %d AVE %s: log config file is at %s", v12, 64, "DBG", v8);
  }
  uint64_t v13 = v53.st_mtimespec.tv_nsec / 1000 + 1000000 * v53.st_mtimespec.tv_sec;
  if (v13 == gs_iAVE_Timestamp && gs_iAVE_Timestamp)
  {
    if ((byte_1EB9F3B90 & 8) != 0)
    {
      char v14 = byte_1EB9F3B90;
      __uint64_t v15 = AVE_GetCurrTime();
      if ((v14 & 0x10) != 0)
      {
        printf("%lld %d AVE %s: log config file has been updated %s %llu\n", v15, 64, "DBG", v8, gs_iAVE_Timestamp);
        AVE_GetCurrTime();
      }
      syslog(3, "%lld %d AVE %s: log config file has been updated %s %llu");
    }
    goto LABEL_27;
  }
  int v16 = fopen(v8, "r");
  if (!v16)
  {
    if ((byte_1EB9F3B90 & 8) != 0)
    {
      char v17 = byte_1EB9F3B90;
      __uint64_t v18 = AVE_GetCurrTime();
      uint64_t v19 = __error();
      int v20 = strerror(*v19);
      if ((v17 & 0x10) != 0)
      {
        printf("%lld %d AVE %s: log config file cannot be opened %s : %s\n", v18, 64, "DBG", v8, v20);
        AVE_GetCurrTime();
        long long v21 = __error();
        strerror(*v21);
      }
      syslog(3, "%lld %d AVE %s: log config file cannot be opened %s : %s");
    }
    goto LABEL_27;
  }
  __uint64_t v26 = v16;
  uint64_t v27 = (char *)malloc_type_malloc(0x108uLL, 0x10000400BDB4DB4uLL);
  if (v27)
  {
    int v28 = v27;
    if ((byte_1EB9F3B90 & 0xFu) >= 5)
    {
      char v29 = byte_1EB9F3B90;
      __uint64_t v30 = AVE_GetCurrTime();
      if ((v29 & 0x10) != 0)
      {
        printf("%lld %d AVE %s: used log config file is at %s %llu\n", v30, 64, "WARN", v8, v13);
        __uint64_t v30 = AVE_GetCurrTime();
      }
      syslog(3, "%lld %d AVE %s: used log config file is at %s %llu", v30, 64, "WARN", v8, v13);
    }
    gs_iAVE_Timestamp = v13;
    size_t v50 = 0;
    int v31 = fgetln(v26, &v50);
    if (v31)
    {
      int v32 = v31;
      int v33 = v28 + 256;
      __uint64_t v34 = v28 + 260;
      do
      {
        unsigned int v35 = *v32;
        BOOL v36 = v35 > 0x23;
        uint64_t v37 = (1 << v35) & 0x800002400;
        if (v36 || v37 == 0)
        {
          LODWORD(v52) = 15;
          char v51 = 0;
          if (sscanf(v32, "LOG_ID_%d=%d%c", (char *)&v52 + 4, &v52, &v51) == 3)
          {
            char v39 = v52;
            if ((v51 & 0xDF) == 0x43) {
              char v39 = v52 | 0x10;
            }
            v28[SHIDWORD(v52)] = v39;
          }
          else if (sscanf(v32, "THRESHOLD=%d", v28 + 256) == 1)
          {
            int v40 = &dword_1EB9F3B48;
            if (*v33) {
              int v40 = (int *)(v28 + 256);
            }
            dword_1EB9F3C50 = *v40;
            if ((byte_1EB9F3B90 & 0xFu) >= 7)
            {
              char v41 = byte_1EB9F3B90;
              __uint64_t v42 = AVE_GetCurrTime();
              if ((v41 & 0x10) != 0)
              {
                printf("%lld %d AVE %s: %s:%d Read threshold %d\n", v42, 64, "VERB", "AVE_Log_ReadCfg", 717, *v33);
                AVE_GetCurrTime();
              }
              syslog(3, "%lld %d AVE %s: %s:%d Read threshold %d");
            }
          }
          else if (sscanf(v32, "INTERVAL=%d", v28 + 260) == 1)
          {
            int v43 = &dword_1EB9F3B4C;
            if (*v34) {
              int v43 = (int *)(v28 + 260);
            }
            dword_1EB9F3C54 = *v43;
            if ((byte_1EB9F3B90 & 0xFu) >= 7)
            {
              char v44 = byte_1EB9F3B90;
              __uint64_t v45 = AVE_GetCurrTime();
              if ((v44 & 0x10) != 0)
              {
                printf("%lld %d AVE %s: %s:%d Read interval %d\n", v45, 64, "VERB", "AVE_Log_ReadCfg", 724, *v34);
                AVE_GetCurrTime();
              }
              syslog(3, "%lld %d AVE %s: %s:%d Read interval %d");
            }
          }
        }
        size_t v50 = 0;
        int v32 = fgetln(v26, &v50);
      }
      while (v32);
    }
    for (uint64_t i = 0; i != 256; ++i)
    {
      int v47 = &v28[i];
      if (!v28[i]) {
        int v47 = v28;
      }
      AVE_Log_UpdateConf(i, *v47);
    }
    AVE_Log_Print();
    free(v28);
    uint64_t v24 = 0;
  }
  else
  {
    if ((byte_1EB9F3B90 & 8) != 0)
    {
      char v48 = byte_1EB9F3B90;
      __uint64_t v49 = AVE_GetCurrTime();
      if ((v48 & 0x10) != 0)
      {
        printf("%lld %d AVE %s: cannot allocate memory for log config\n", v49, 64, "DBG");
        __uint64_t v49 = AVE_GetCurrTime();
      }
      syslog(3, "%lld %d AVE %s: cannot allocate memory for log config", v49, 64, "DBG");
    }
    uint64_t v24 = 4294966293;
  }
  fclose(v26);
  return v24;
}

uint64_t AVE_Log_Config(uint64_t result)
{
  if (result)
  {
    int v1 = (_DWORD *)result;
    if (*(unsigned char *)(result + 44)) {
      uint64_t v2 = (const char *)(result + 44);
    }
    else {
      uint64_t v2 = 0;
    }
    uint64_t result = AVE_Log_ReadCfg(v2);
    int v3 = 256;
    for (uint64_t i = 2; i != 10; i += 2)
    {
      if ((*v1 & v3) != 0)
      {
        AVE_Log_PresetCfg(v3 + 7, *(void *)&v1[i]);
        uint64_t result = 0;
      }
      v3 += 256;
    }
    int v5 = v1[10];
    if (v5)
    {
      AVE_Log_UpdateConsole((char)v5);
      return 0;
    }
  }
  return result;
}

unsigned int *AVE_DevCap_SearchRange_Find(unsigned int *a1, int a2)
{
  uint64_t v2 = *a1;
  if ((int)v2 < 1) {
    return 0;
  }
  uint64_t result = 0;
  int v5 = a1 + 1;
  uint64_t v6 = a1 + 1;
  do
  {
    unsigned int v7 = *v6;
    v6 += 4;
    if (v7 == a2) {
      uint64_t result = v5;
    }
    int v5 = v6;
    --v2;
  }
  while (v2);
  return result;
}

uint64_t AVE_USL_CreateSurface(const char *a1, int a2, uint64_t a3, AVE_USL_Surface **a4)
{
  if (a2 >= 1 && a4)
  {
    *a4 = 0;
    operator new();
  }
  if (AVE_Log_CheckLevel(0x4Cu, 4))
  {
    int v8 = AVE_Log_CheckConsole(0x4Cu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (v8)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d 0x%llx %p\n", CurrTime, 76, LevelStr, "AVE_USL_CreateSurface", 119, "size > 0 && ppSurface != __null", a1, a2, a3, a4);
      __uint64_t v11 = AVE_GetCurrTime();
      uint64_t v13 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d 0x%llx %p", v11, 76, v13, "AVE_USL_CreateSurface");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d 0x%llx %p", CurrTime, 76, LevelStr, "AVE_USL_CreateSurface");
    }
  }
  return 4294966295;
}

void sub_1BA775570(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9F01B0](v1, 0x1020C40EBA818EDLL);
  _Unwind_Resume(a1);
}

uint64_t AVE_USL_DestroySurface(AVE_USL_Surface *a1)
{
  if (a1)
  {
    uint64_t v2 = AVE_USL_Surface::Destroy(a1);
    AVE_USL_Surface::~AVE_USL_Surface(a1);
    MEMORY[0x1BA9F01B0]();
    return v2;
  }
  else
  {
    if (AVE_Log_CheckLevel(0x4Cu, 4))
    {
      int v4 = AVE_Log_CheckConsole(0x4Cu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v4)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p\n", CurrTime, 76, LevelStr, "AVE_USL_DestroySurface", 170, "pSurface != __null", 0);
        __uint64_t CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p", CurrTime);
    }
    return 4294966295;
  }
}

uint64_t AVE_USL_CreateInSurfaces(_DWORD *a1, int a2, AVE_USL_Surface **a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  long long v29 = 0u;
  long long v30 = 0u;
  *(_OWORD *)uint64_t v27 = 0u;
  long long v28 = 0u;
  if (a1 && a3)
  {
    SurfaceCfg = AVE_GetSurfaceCfg(5);
    int v8 = a1[4];
    int v7 = a1[5];
    uint64_t v9 = (uint64_t)SurfaceCfg[1];
    AVE_SNPrintf(v27, 64, "%s-%d", v10, v11, v12, v13, v14, (char)*SurfaceCfg);
    if (v8 >= 1)
    {
      if (!*a3)
      {
LABEL_15:
        uint64_t Surface = AVE_USL_CreateSurface(v27, v7, v9, a3);
        if (!Surface) {
          return Surface;
        }
        if (AVE_Log_CheckLevel(0x4Cu, 4))
        {
          int v22 = AVE_Log_CheckConsole(0x4Cu);
          __uint64_t CurrTime = AVE_GetCurrTime();
          Leveluint64_t Str = AVE_Log_GetLevelStr(4);
          if (v22)
          {
            printf("%lld %d AVE %s: %s:%d %s | failed to create surface %s %d\n", CurrTime, 76, LevelStr, "AVE_USL_CreateInSurfaces", 241, "ret == 0", v27, Surface);
            __uint64_t CurrTime = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create surface %s %d", CurrTime, 76);
        }
        goto LABEL_12;
      }
      int Size = AVE_USL_Surface::GetSize(*a3);
      int v16 = *a3;
      if (Size < v7)
      {
        AVE_USL_DestroySurface(v16);
        *a3 = 0;
        goto LABEL_15;
      }
      if (!v16) {
        goto LABEL_15;
      }
    }
    return 0;
  }
  if (AVE_Log_CheckLevel(0x4Cu, 4))
  {
    int v17 = AVE_Log_CheckConsole(0x4Cu);
    __uint64_t v18 = AVE_GetCurrTime();
    uint64_t v19 = AVE_Log_GetLevelStr(4);
    if (v17)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p\n", v18, 76, v19, "AVE_USL_CreateInSurfaces", 220, "pSInfoSet != __null && pSet != __null", a1, a2, a3);
      __uint64_t v20 = AVE_GetCurrTime();
      __uint64_t v26 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v20, 76, v26);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v18, 76, v19);
    }
  }
  uint64_t Surface = 4294966295;
LABEL_12:
  AVE_USL_DestroyInSurfaces((uint64_t *)a3);
  return Surface;
}

uint64_t AVE_USL_DestroyInSurfaces(uint64_t *a1)
{
  if (a1)
  {
    uint64_t result = *a1;
    if (result)
    {
      uint64_t result = AVE_USL_DestroySurface((AVE_USL_Surface *)result);
      *a1 = 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x4Cu, 4))
    {
      int v3 = AVE_Log_CheckConsole(0x4Cu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v3)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p\n", CurrTime, 76, LevelStr, "AVE_USL_DestroyInSurfaces", 266, "pSet != __null", 0);
        __uint64_t CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p", CurrTime);
    }
    return 4294966295;
  }
  return result;
}

uint64_t AVE_USL_RetrieveDataSurfaces(AVE_USL_Surface **a1, _DWORD *a2)
{
  int v4 = *a1;
  if (v4) {
    *a2 = AVE_USL_Surface::GetID(v4);
  }
  int v5 = a1[1];
  if (v5) {
    a2[1] = AVE_USL_Surface::GetID(v5);
  }
  uint64_t v6 = a1[2];
  if (v6) {
    a2[2] = AVE_USL_Surface::GetID(v6);
  }
  int v7 = a1[3];
  if (v7) {
    a2[3] = AVE_USL_Surface::GetID(v7);
  }
  int v8 = a1[4];
  if (v8) {
    a2[5] = AVE_USL_Surface::GetID(v8);
  }
  uint64_t v9 = a1[5];
  if (v9) {
    a2[6] = AVE_USL_Surface::GetID(v9);
  }
  return 0;
}

uint64_t AVE_USL_CreateDataSurfaces(_DWORD *a1, int a2, void *a3, char *a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  long long v32 = 0u;
  long long v33 = 0u;
  *(_OWORD *)long long v30 = 0u;
  long long v31 = 0u;
  if (a1 && a4)
  {
    *(void *)a4 = *a3;
    SurfaceCfg = AVE_GetSurfaceCfg(4);
    int v9 = a1[10];
    int v8 = a1[11];
    uint64_t v10 = (uint64_t)SurfaceCfg[1];
    AVE_SNPrintf(v30, 64, "%s-%d", v11, v12, v13, v14, v15, (char)*SurfaceCfg);
    if (v9 >= 1)
    {
      int v17 = (AVE_USL_Surface **)(a4 + 8);
      int v16 = (AVE_USL_Surface *)*((void *)a4 + 1);
      if (!v16)
      {
LABEL_15:
        uint64_t Surface = AVE_USL_CreateSurface(v30, v8, v10, (AVE_USL_Surface **)a4 + 1);
        if (!Surface) {
          return Surface;
        }
        if (AVE_Log_CheckLevel(0x4Cu, 4))
        {
          int v25 = AVE_Log_CheckConsole(0x4Cu);
          __uint64_t CurrTime = AVE_GetCurrTime();
          Leveluint64_t Str = AVE_Log_GetLevelStr(4);
          if (v25)
          {
            printf("%lld %d AVE %s: %s:%d %s | failed to create surface %s %d\n", CurrTime, 76, LevelStr, "AVE_USL_CreateDataSurfaces", 369, "ret == 0", v30, Surface);
            __uint64_t CurrTime = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create surface %s %d", CurrTime, 76);
        }
        goto LABEL_12;
      }
      int Size = AVE_USL_Surface::GetSize(v16);
      uint64_t v19 = *v17;
      if (Size < v8)
      {
        AVE_USL_DestroySurface(v19);
        *int v17 = 0;
        goto LABEL_15;
      }
      if (!v19) {
        goto LABEL_15;
      }
    }
    return 0;
  }
  if (AVE_Log_CheckLevel(0x4Cu, 4))
  {
    int v20 = AVE_Log_CheckConsole(0x4Cu);
    __uint64_t v21 = AVE_GetCurrTime();
    int v22 = AVE_Log_GetLevelStr(4);
    if (v20)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p\n", v21, 76, v22, "AVE_USL_CreateDataSurfaces", 346, "pSInfoSet != __null && pSet != __null", a1, a2, a4);
      __uint64_t v23 = AVE_GetCurrTime();
      long long v29 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v23, 76, v29);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v21, 76, v22);
    }
  }
  uint64_t Surface = 4294966295;
LABEL_12:
  AVE_USL_DestroyDataSurfaces((uint64_t)a4);
  return Surface;
}

uint64_t AVE_USL_DestroyDataSurfaces(uint64_t a1)
{
  if (a1)
  {
    uint64_t result = *(void *)(a1 + 8);
    if (result)
    {
      uint64_t result = AVE_USL_DestroySurface((AVE_USL_Surface *)result);
      *(void *)(a1 + 8) = 0;
    }
    if (*(void *)(a1 + 16))
    {
      uint64_t result = AVE_USL_DestroySurface(*(AVE_USL_Surface **)(a1 + 16));
      *(void *)(a1 + 16) = 0;
    }
    if (*(void *)(a1 + 24))
    {
      uint64_t result = AVE_USL_DestroySurface(*(AVE_USL_Surface **)(a1 + 24));
      *(void *)(a1 + 24) = 0;
    }
    if (*(void *)(a1 + 32))
    {
      uint64_t result = AVE_USL_DestroySurface(*(AVE_USL_Surface **)(a1 + 32));
      *(void *)(a1 + 32) = 0;
    }
    if (*(void *)(a1 + 40))
    {
      uint64_t result = AVE_USL_DestroySurface(*(AVE_USL_Surface **)(a1 + 40));
      *(void *)(a1 + 40) = 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x4Cu, 4))
    {
      int v3 = AVE_Log_CheckConsole(0x4Cu);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v3)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p\n", CurrTime, 76, LevelStr, "AVE_USL_DestroyDataSurfaces", 395, "pSet != __null", 0);
        __uint64_t CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p", CurrTime);
    }
    return 4294966295;
  }
  return result;
}

uint64_t AVE_UC_Verify(void)
{
  CFDictionaryRef v0 = IOServiceMatching("AppleAVE2Driver");
  io_service_t MatchingService = IOServiceGetMatchingService(*MEMORY[0x1E4F2EEF0], v0);
  if (MatchingService)
  {
    IOObjectRelease(MatchingService);
    return 0;
  }
  else
  {
    if (AVE_Log_CheckLevel(0x23u, 4))
    {
      int v3 = AVE_Log_CheckConsole(0x23u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v3)
      {
        printf("%lld %d AVE %s: %s:%d %s | can not find matched driver\n", CurrTime, 35, LevelStr, "AVE_UC_Verify", 23, "pService != 0");
        __uint64_t v6 = AVE_GetCurrTime();
        int v7 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | can not find matched driver", v6, 35, v7, "AVE_UC_Verify", 23, "pService != 0");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | can not find matched driver", CurrTime, 35, LevelStr, "AVE_UC_Verify", 23, "pService != 0");
      }
    }
    return 4294966291;
  }
}

uint64_t AVE_UC_Create(uint32_t a1, void *a2)
{
  kern_return_t v7;
  uint64_t v8;
  int v9;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v12;
  int v13;
  __uint64_t v14;
  const char *v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  BOOL v20;
  const char *v22;
  io_connect_t connect;

  connect = 0;
  if (a2)
  {
    CFDictionaryRef v4 = IOServiceMatching("AppleAVE2Driver");
    io_service_t MatchingService = IOServiceGetMatchingService(*MEMORY[0x1E4F2EEF0], v4);
    if (MatchingService)
    {
      io_service_t v6 = MatchingService;
      kdebug_trace();
      int v7 = IOServiceOpen(v6, *MEMORY[0x1E4F14960], a1, &connect);
      int v8 = AVE_IOReturn2RetCode(v7);
      kdebug_trace();
      if (v8)
      {
        if (AVE_Log_CheckLevel(0x23u, 4))
        {
          int v9 = AVE_Log_CheckConsole(0x23u);
          __uint64_t CurrTime = AVE_GetCurrTime();
          Leveluint64_t Str = AVE_Log_GetLevelStr(4);
          if (v9)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to open driver %d %p 0x%x %d\n", CurrTime, 35, LevelStr, "AVE_UC_Create", 67, "ret == 0", a1, a2, v7, v8);
            uint64_t v12 = AVE_GetCurrTime();
            int v22 = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to open driver %d %p 0x%x %d", v12, 35, v22);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to open driver %d %p 0x%x %d", CurrTime, 35, LevelStr);
          }
        }
      }
      else
      {
        *a2 = connect;
      }
      IOObjectRelease(v6);
      if (v8) {
        int v20 = connect == 0;
      }
      else {
        int v20 = 1;
      }
      if (!v20) {
        IOServiceClose(connect);
      }
    }
    else
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        int v16 = AVE_Log_CheckConsole(0x23u);
        int v17 = AVE_GetCurrTime();
        __uint64_t v18 = AVE_Log_GetLevelStr(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | can not find matched driver %d %p\n", v17, 35, v18, "AVE_UC_Create", 57, "pService != 0", a1, a2);
          uint64_t v19 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | can not find matched driver %d %p", v19, 35);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | can not find matched driver %d %p", v17, 35);
        }
      }
      return 4294966291;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x23u, 4))
    {
      uint64_t v13 = AVE_Log_CheckConsole(0x23u);
      uint64_t v14 = AVE_GetCurrTime();
      uint64_t v15 = AVE_Log_GetLevelStr(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %d %p\n", v14, 35, v15, "AVE_UC_Create", 51, "ppUC != __null", a1, 0);
        uint64_t v14 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %d %p", v14, 35);
    }
    return 4294966295;
  }
  return v8;
}

uint64_t AVE_UC_Destroy(void *a1)
{
  kern_return_t v2;
  uint64_t v3;
  int v4;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v7;
  __uint64_t v8;
  const char *v9;

  if (a1)
  {
    kdebug_trace();
    uint64_t v2 = IOServiceClose((io_connect_t)a1);
    int v3 = AVE_IOReturn2RetCode(v2);
    if (v3)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        CFDictionaryRef v4 = AVE_Log_CheckConsole(0x23u);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v4)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to close driver %p 0x%x %d\n", CurrTime, 35, LevelStr, "AVE_UC_Destroy", 113, "ret == 0", a1, v2, v3);
          __uint64_t CurrTime = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to close driver %p 0x%x %d", CurrTime, 35);
      }
    }
    else
    {
      kdebug_trace();
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x23u, 4))
    {
      int v7 = AVE_Log_CheckConsole(0x23u);
      int v8 = AVE_GetCurrTime();
      int v9 = AVE_Log_GetLevelStr(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p\n", v8, 35, v9, "AVE_UC_Destroy", 105, "pUC != __null", 0);
        int v8 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p", v8);
    }
    return 4294966295;
  }
  return v3;
}

uint64_t AVE_UC_Open(const void *a1, const void *a2, void *a3)
{
  kern_return_t v6;
  uint64_t v7;
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  const char *v21;
  const char *v22;
  const char *v23;
  size_t outputStructCnt;

  outputStructCnt = 40;
  if (a1 && a2 && a3)
  {
    kdebug_trace();
    io_service_t v6 = IOConnectCallStructMethod((mach_port_t)a1, 1u, a2, 0x6E0uLL, a3, &outputStructCnt);
    int v7 = AVE_IOReturn2RetCode(v6);
    kdebug_trace();
    if (v7)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        int v8 = AVE_Log_CheckConsole(0x23u);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v8)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to open client %p %p %p 0x%x\n", CurrTime, 35, LevelStr, "AVE_UC_Open", 155, "ret == 0", a1, a2, a3, v6);
          uint64_t v11 = AVE_GetCurrTime();
          __uint64_t v21 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to open client %p %p %p 0x%x", v11, 35, v21, "AVE_UC_Open");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to open client %p %p %p 0x%x", CurrTime, 35, LevelStr, "AVE_UC_Open");
        }
      }
    }
    else if (outputStructCnt <= 0x27)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        int v16 = AVE_Log_CheckConsole(0x23u);
        int v17 = AVE_GetCurrTime();
        __uint64_t v18 = AVE_Log_GetLevelStr(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d\n", v17, 35, v18, "AVE_UC_Open", 159, "outSize >= sizeof(S_AVE_UCOutParam_Open)", a1, a2, a3, outputStructCnt, 40);
          uint64_t v19 = AVE_GetCurrTime();
          __uint64_t v23 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v19, 35, v23, "AVE_UC_Open");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v17, 35, v18, "AVE_UC_Open");
        }
      }
      return 4294966281;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x23u, 4))
    {
      uint64_t v12 = AVE_Log_CheckConsole(0x23u);
      uint64_t v13 = AVE_GetCurrTime();
      uint64_t v14 = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v13, 35, v14, "AVE_UC_Open", 142, "pUC != __null && pIn != __null && pOut != __null", a1, a2, a3);
        uint64_t v15 = AVE_GetCurrTime();
        int v22 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v15, 35, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 35, v14);
      }
    }
    return 4294966295;
  }
  return v7;
}

uint64_t AVE_UC_Close(const void *a1, const void *a2, void *a3)
{
  kern_return_t v6;
  uint64_t v7;
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  const char *v21;
  const char *v22;
  const char *v23;
  size_t outputStructCnt;

  outputStructCnt = 32;
  if (a1 && a2 && a3)
  {
    kdebug_trace();
    io_service_t v6 = IOConnectCallStructMethod((mach_port_t)a1, 2u, a2, 0x28uLL, a3, &outputStructCnt);
    int v7 = AVE_IOReturn2RetCode(v6);
    kdebug_trace();
    if (v7)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        int v8 = AVE_Log_CheckConsole(0x23u);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v8)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to close client %p %p %p 0x%x %d\n", CurrTime, 35, LevelStr, "AVE_UC_Close", 197, "ret == 0", a1, a2, a3, v6, v7);
          uint64_t v11 = AVE_GetCurrTime();
          __uint64_t v21 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to close client %p %p %p 0x%x %d", v11, 35, v21, "AVE_UC_Close");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to close client %p %p %p 0x%x %d", CurrTime, 35, LevelStr, "AVE_UC_Close");
        }
      }
    }
    else if (outputStructCnt <= 0x1F)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        int v16 = AVE_Log_CheckConsole(0x23u);
        int v17 = AVE_GetCurrTime();
        __uint64_t v18 = AVE_Log_GetLevelStr(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d\n", v17, 35, v18, "AVE_UC_Close", 201, "outSize >= sizeof(S_AVE_UCOutParam_Close)", a1, a2, a3, outputStructCnt, 32);
          uint64_t v19 = AVE_GetCurrTime();
          __uint64_t v23 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v19, 35, v23, "AVE_UC_Close");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v17, 35, v18, "AVE_UC_Close");
        }
      }
      return 4294966281;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x23u, 4))
    {
      uint64_t v12 = AVE_Log_CheckConsole(0x23u);
      uint64_t v13 = AVE_GetCurrTime();
      uint64_t v14 = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v13, 35, v14, "AVE_UC_Close", 184, "pUC != __null && pIn != __null && pOut != __null", a1, a2, a3);
        uint64_t v15 = AVE_GetCurrTime();
        int v22 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v15, 35, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 35, v14);
      }
    }
    return 4294966295;
  }
  return v7;
}

uint64_t AVE_UC_Config(const void *a1, const void *a2, const void *a3, void *a4)
{
  kern_return_t v8;
  uint64_t v9;
  int v10;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v13;
  int v14;
  __uint64_t v15;
  const char *v16;
  __uint64_t v17;
  int v18;
  __uint64_t v19;
  const char *v20;
  __uint64_t v21;
  const char *v23;
  const char *v24;
  const char *v25;
  size_t v26;
  uint64_t reference[2];
  long long v28;
  long long v29;
  long long v30;
  uint64_t v31;

  long long v31 = *MEMORY[0x1E4F143B8];
  long long v29 = 0u;
  long long v30 = 0u;
  *(_OWORD *)reference = 0u;
  long long v28 = 0u;
  __uint64_t v26 = 32;
  if (a1 && a2 && a3 && a4)
  {
    kdebug_trace();
    int v8 = IOConnectCallAsyncMethod((mach_port_t)a1, 3u, (mach_port_t)a2, reference, 8u, 0, 0, a3, 0x38uLL, 0, 0, a4, &v26);
    int v9 = AVE_IOReturn2RetCode(v8);
    kdebug_trace();
    if (v9)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        uint64_t v10 = AVE_Log_CheckConsole(0x23u);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v10)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to config %p %p %p 0x%x %d\n", CurrTime, 35, LevelStr, "AVE_UC_Config", 243, "ret == 0", a1, a3, a4, v8, v9);
          uint64_t v13 = AVE_GetCurrTime();
          __uint64_t v23 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to config %p %p %p 0x%x %d", v13, 35, v23, "AVE_UC_Config");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to config %p %p %p 0x%x %d", CurrTime, 35, LevelStr, "AVE_UC_Config");
        }
      }
    }
    else if (v26 <= 0x1F)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        __uint64_t v18 = AVE_Log_CheckConsole(0x23u);
        uint64_t v19 = AVE_GetCurrTime();
        int v20 = AVE_Log_GetLevelStr(4);
        if (v18)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d\n", v19, 35, v20, "AVE_UC_Config", 247, "outSize >= sizeof(S_AVE_UCOutParam_Config)", a1, a3, a4, v26, 32);
          __uint64_t v21 = AVE_GetCurrTime();
          int v25 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v21, 35, v25, "AVE_UC_Config");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v19, 35, v20, "AVE_UC_Config");
        }
      }
      return 4294966281;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x23u, 4))
    {
      uint64_t v14 = AVE_Log_CheckConsole(0x23u);
      uint64_t v15 = AVE_GetCurrTime();
      int v16 = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %p\n", v15, 35, v16, "AVE_UC_Config", 229, "pUC != __null && pRecvPort != __null && pIn != __null && pOut != __null", a1, a2, a3, a4);
        int v17 = AVE_GetCurrTime();
        uint64_t v24 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %p", v17, 35, v24, "AVE_UC_Config");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %p", v15, 35, v16, "AVE_UC_Config");
      }
    }
    return 4294966295;
  }
  return v9;
}

uint64_t AVE_UC_Prepare(const void *a1, const void *a2, void *a3)
{
  kern_return_t v6;
  uint64_t v7;
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  const char *v21;
  const char *v22;
  const char *v23;
  size_t outputStructCnt;

  outputStructCnt = 32;
  if (a1 && a2 && a3)
  {
    kdebug_trace();
    io_service_t v6 = IOConnectCallStructMethod((mach_port_t)a1, 4u, a2, 0x2DFE8uLL, a3, &outputStructCnt);
    int v7 = AVE_IOReturn2RetCode(v6);
    kdebug_trace();
    if (v7)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        int v8 = AVE_Log_CheckConsole(0x23u);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v8)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to prepare %p %p %p 0x%x %d\n", CurrTime, 35, LevelStr, "AVE_UC_Prepare", 285, "ret == 0", a1, a2, a3, v6, v7);
          uint64_t v11 = AVE_GetCurrTime();
          __uint64_t v21 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to prepare %p %p %p 0x%x %d", v11, 35, v21, "AVE_UC_Prepare");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to prepare %p %p %p 0x%x %d", CurrTime, 35, LevelStr, "AVE_UC_Prepare");
        }
      }
    }
    else if (outputStructCnt <= 0x1F)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        int v16 = AVE_Log_CheckConsole(0x23u);
        int v17 = AVE_GetCurrTime();
        __uint64_t v18 = AVE_Log_GetLevelStr(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d\n", v17, 35, v18, "AVE_UC_Prepare", 289, "outSize >= sizeof(S_AVE_UCOutParam_Prepare)", a1, a2, a3, outputStructCnt, 32);
          uint64_t v19 = AVE_GetCurrTime();
          __uint64_t v23 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v19, 35, v23, "AVE_UC_Prepare");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v17, 35, v18, "AVE_UC_Prepare");
        }
      }
      return 4294966281;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x23u, 4))
    {
      uint64_t v12 = AVE_Log_CheckConsole(0x23u);
      uint64_t v13 = AVE_GetCurrTime();
      uint64_t v14 = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v13, 35, v14, "AVE_UC_Prepare", 272, "pUC != __null && pIn != __null && pOut != __null", a1, a2, a3);
        uint64_t v15 = AVE_GetCurrTime();
        int v22 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v15, 35, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 35, v14);
      }
    }
    return 4294966295;
  }
  return v7;
}

uint64_t AVE_UC_Start(const void *a1, const void *a2, void *a3)
{
  kern_return_t v6;
  uint64_t v7;
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  const char *v21;
  const char *v22;
  const char *v23;
  size_t outputStructCnt;

  outputStructCnt = 720;
  if (a1 && a2 && a3)
  {
    kdebug_trace();
    io_service_t v6 = IOConnectCallStructMethod((mach_port_t)a1, 5u, a2, 0x2DFE8uLL, a3, &outputStructCnt);
    int v7 = AVE_IOReturn2RetCode(v6);
    kdebug_trace();
    if (v7)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        int v8 = AVE_Log_CheckConsole(0x23u);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v8)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to start %p %p %p 0x%x %d\n", CurrTime, 35, LevelStr, "AVE_UC_Start", 327, "ret == 0", a1, a2, a3, v6, v7);
          uint64_t v11 = AVE_GetCurrTime();
          __uint64_t v21 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to start %p %p %p 0x%x %d", v11, 35, v21, "AVE_UC_Start");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to start %p %p %p 0x%x %d", CurrTime, 35, LevelStr, "AVE_UC_Start");
        }
      }
    }
    else if (outputStructCnt <= 0x2CF)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        int v16 = AVE_Log_CheckConsole(0x23u);
        int v17 = AVE_GetCurrTime();
        __uint64_t v18 = AVE_Log_GetLevelStr(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d\n", v17, 35, v18, "AVE_UC_Start", 331, "outSize >= sizeof(S_AVE_UCOutParam_Start)", a1, a2, a3, outputStructCnt, 720);
          uint64_t v19 = AVE_GetCurrTime();
          __uint64_t v23 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v19, 35, v23, "AVE_UC_Start");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v17, 35, v18, "AVE_UC_Start");
        }
      }
      return 4294966281;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x23u, 4))
    {
      uint64_t v12 = AVE_Log_CheckConsole(0x23u);
      uint64_t v13 = AVE_GetCurrTime();
      uint64_t v14 = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v13, 35, v14, "AVE_UC_Start", 314, "pUC != __null && pIn != __null && pOut != __null", a1, a2, a3);
        uint64_t v15 = AVE_GetCurrTime();
        int v22 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v15, 35, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 35, v14);
      }
    }
    return 4294966295;
  }
  return v7;
}

uint64_t AVE_UC_Stop(const void *a1, const void *a2, void *a3)
{
  kern_return_t v6;
  uint64_t v7;
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  const char *v21;
  const char *v22;
  const char *v23;
  size_t outputStructCnt;

  outputStructCnt = 32;
  if (a1 && a2 && a3)
  {
    kdebug_trace();
    io_service_t v6 = IOConnectCallStructMethod((mach_port_t)a1, 6u, a2, 0x30uLL, a3, &outputStructCnt);
    int v7 = AVE_IOReturn2RetCode(v6);
    kdebug_trace();
    if (v7)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        int v8 = AVE_Log_CheckConsole(0x23u);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v8)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to stop %p %p %p 0x%x %d\n", CurrTime, 35, LevelStr, "AVE_UC_Stop", 369, "ret == 0", a1, a2, a3, v6, v7);
          uint64_t v11 = AVE_GetCurrTime();
          __uint64_t v21 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to stop %p %p %p 0x%x %d", v11, 35, v21, "AVE_UC_Stop");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to stop %p %p %p 0x%x %d", CurrTime, 35, LevelStr, "AVE_UC_Stop");
        }
      }
    }
    else if (outputStructCnt <= 0x1F)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        int v16 = AVE_Log_CheckConsole(0x23u);
        int v17 = AVE_GetCurrTime();
        __uint64_t v18 = AVE_Log_GetLevelStr(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d\n", v17, 35, v18, "AVE_UC_Stop", 373, "outSize >= sizeof(S_AVE_UCOutParam_Stop)", a1, a2, a3, outputStructCnt, 32);
          uint64_t v19 = AVE_GetCurrTime();
          __uint64_t v23 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v19, 35, v23, "AVE_UC_Stop");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v17, 35, v18, "AVE_UC_Stop");
        }
      }
      return 4294966281;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x23u, 4))
    {
      uint64_t v12 = AVE_Log_CheckConsole(0x23u);
      uint64_t v13 = AVE_GetCurrTime();
      uint64_t v14 = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v13, 35, v14, "AVE_UC_Stop", 356, "pUC != __null && pIn != __null && pOut != __null", a1, a2, a3);
        uint64_t v15 = AVE_GetCurrTime();
        int v22 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v15, 35, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 35, v14);
      }
    }
    return 4294966295;
  }
  return v7;
}

uint64_t AVE_UC_Process(const void *a1, const void *a2, void *a3)
{
  kern_return_t v6;
  uint64_t v7;
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  const char *v21;
  const char *v22;
  const char *v23;
  size_t outputStructCnt;

  outputStructCnt = 32;
  if (a1 && a2 && a3)
  {
    kdebug_trace();
    io_service_t v6 = IOConnectCallStructMethod((mach_port_t)a1, 7u, a2, 0x30uLL, a3, &outputStructCnt);
    int v7 = AVE_IOReturn2RetCode(v6);
    kdebug_trace();
    if (v7)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        int v8 = AVE_Log_CheckConsole(0x23u);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v8)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to process %p %p %p 0x%x %d\n", CurrTime, 35, LevelStr, "AVE_UC_Process", 411, "ret == 0", a1, a2, a3, v6, v7);
          uint64_t v11 = AVE_GetCurrTime();
          __uint64_t v21 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to process %p %p %p 0x%x %d", v11, 35, v21, "AVE_UC_Process");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to process %p %p %p 0x%x %d", CurrTime, 35, LevelStr, "AVE_UC_Process");
        }
      }
    }
    else if (outputStructCnt <= 0x1F)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        int v16 = AVE_Log_CheckConsole(0x23u);
        int v17 = AVE_GetCurrTime();
        __uint64_t v18 = AVE_Log_GetLevelStr(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d\n", v17, 35, v18, "AVE_UC_Process", 415, "outSize >= sizeof(S_AVE_UCOutParam_Process)", a1, a2, a3, outputStructCnt, 32);
          uint64_t v19 = AVE_GetCurrTime();
          __uint64_t v23 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v19, 35, v23, "AVE_UC_Process");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v17, 35, v18, "AVE_UC_Process");
        }
      }
      return 4294966281;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x23u, 4))
    {
      uint64_t v12 = AVE_Log_CheckConsole(0x23u);
      uint64_t v13 = AVE_GetCurrTime();
      uint64_t v14 = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v13, 35, v14, "AVE_UC_Process", 398, "pUC != __null && pIn != __null && pOut != __null", a1, a2, a3);
        uint64_t v15 = AVE_GetCurrTime();
        int v22 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v15, 35, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 35, v14);
      }
    }
    return 4294966295;
  }
  return v7;
}

uint64_t AVE_UC_Complete(const void *a1, const void *a2, void *a3)
{
  kern_return_t v6;
  uint64_t v7;
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  const char *v21;
  const char *v22;
  const char *v23;
  size_t outputStructCnt;

  outputStructCnt = 32;
  if (a1 && a2 && a3)
  {
    kdebug_trace();
    io_service_t v6 = IOConnectCallStructMethod((mach_port_t)a1, 8u, a2, 0x30uLL, a3, &outputStructCnt);
    int v7 = AVE_IOReturn2RetCode(v6);
    kdebug_trace();
    if (v7)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        int v8 = AVE_Log_CheckConsole(0x23u);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v8)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to complete %p %p %p 0x%x %d\n", CurrTime, 35, LevelStr, "AVE_UC_Complete", 453, "ret == 0", a1, a2, a3, v6, v7);
          uint64_t v11 = AVE_GetCurrTime();
          __uint64_t v21 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to complete %p %p %p 0x%x %d", v11, 35, v21, "AVE_UC_Complete");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to complete %p %p %p 0x%x %d", CurrTime, 35, LevelStr, "AVE_UC_Complete");
        }
      }
    }
    else if (outputStructCnt <= 0x1F)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        int v16 = AVE_Log_CheckConsole(0x23u);
        int v17 = AVE_GetCurrTime();
        __uint64_t v18 = AVE_Log_GetLevelStr(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d\n", v17, 35, v18, "AVE_UC_Complete", 457, "outSize >= sizeof(S_AVE_UCOutParam_Complete)", a1, a2, a3, outputStructCnt, 32);
          uint64_t v19 = AVE_GetCurrTime();
          __uint64_t v23 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v19, 35, v23, "AVE_UC_Complete");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v17, 35, v18, "AVE_UC_Complete");
        }
      }
      return 4294966281;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x23u, 4))
    {
      uint64_t v12 = AVE_Log_CheckConsole(0x23u);
      uint64_t v13 = AVE_GetCurrTime();
      uint64_t v14 = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v13, 35, v14, "AVE_UC_Complete", 440, "pUC != __null && pIn != __null && pOut != __null", a1, a2, a3);
        uint64_t v15 = AVE_GetCurrTime();
        int v22 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v15, 35, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 35, v14);
      }
    }
    return 4294966295;
  }
  return v7;
}

uint64_t AVE_UC_Reset(const void *a1, const void *a2, void *a3)
{
  kern_return_t v6;
  uint64_t v7;
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  const char *v21;
  const char *v22;
  const char *v23;
  size_t outputStructCnt;

  outputStructCnt = 32;
  if (a1 && a2 && a3)
  {
    kdebug_trace();
    io_service_t v6 = IOConnectCallStructMethod((mach_port_t)a1, 0xAu, a2, 0x30uLL, a3, &outputStructCnt);
    int v7 = AVE_IOReturn2RetCode(v6);
    kdebug_trace();
    if (v7)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        int v8 = AVE_Log_CheckConsole(0x23u);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v8)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to reset %p %p %p 0x%x %d\n", CurrTime, 35, LevelStr, "AVE_UC_Reset", 537, "ret == 0", a1, a2, a3, v6, v7);
          uint64_t v11 = AVE_GetCurrTime();
          __uint64_t v21 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to reset %p %p %p 0x%x %d", v11, 35, v21, "AVE_UC_Reset");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to reset %p %p %p 0x%x %d", CurrTime, 35, LevelStr, "AVE_UC_Reset");
        }
      }
    }
    else if (outputStructCnt <= 0x1F)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        int v16 = AVE_Log_CheckConsole(0x23u);
        int v17 = AVE_GetCurrTime();
        __uint64_t v18 = AVE_Log_GetLevelStr(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d\n", v17, 35, v18, "AVE_UC_Reset", 541, "outSize >= sizeof(S_AVE_UCOutParam_Reset)", a1, a2, a3, outputStructCnt, 32);
          uint64_t v19 = AVE_GetCurrTime();
          __uint64_t v23 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v19, 35, v23, "AVE_UC_Reset");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v17, 35, v18, "AVE_UC_Reset");
        }
      }
      return 4294966281;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x23u, 4))
    {
      uint64_t v12 = AVE_Log_CheckConsole(0x23u);
      uint64_t v13 = AVE_GetCurrTime();
      uint64_t v14 = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v13, 35, v14, "AVE_UC_Reset", 524, "pUC != __null && pIn != __null && pOut != __null", a1, a2, a3);
        uint64_t v15 = AVE_GetCurrTime();
        int v22 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v15, 35, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 35, v14);
      }
    }
    return 4294966295;
  }
  return v7;
}

float AVE_MultiPass::histogram_diff(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  unsigned int v4 = 0;
  double v5 = 0.0;
  double v6 = 0.0;
  do
  {
    unsigned int v7 = *(_DWORD *)(a2 + 16 + v3);
    *(double *)&unint64_t v8 = (double)v7;
    v4 += v7;
    LODWORD(v8) = *(_DWORD *)(a3 + 16 + v3);
    double v6 = v6 + (double)v7 - (double)v8;
    double v9 = -v6;
    if (v6 >= 0.0) {
      double v9 = v6;
    }
    double v5 = v5 + v9;
    v3 += 4;
  }
  while (v3 != 1024);
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    int v10 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v10)
    {
      printf("%lld %d AVE %s: MP: histogram_diff() hdiff %lf sum_a %d\n", CurrTime, 216, LevelStr, v5, v4);
      __uint64_t v13 = AVE_GetCurrTime();
      uint64_t v15 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: MP: histogram_diff() hdiff %lf sum_a %d", v13, 216, v15, v5, v4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MP: histogram_diff() hdiff %lf sum_a %d", CurrTime, 216, LevelStr, v5, v4);
    }
  }
  return v5 / (double)v4;
}

BOOL AVE_MultiPass::scene_change_detect(AVE_MultiPass *this, float a2, float a3, float a4, float a5)
{
  double v5 = a3;
  double v6 = a4;
  if (v5 <= 0.00272072)
  {
    BOOL v10 = a5 <= 0.96605313 && v6 > 1.34009841;
  }
  else
  {
    double v7 = a2;
    if (v7 <= 71.5876885)
    {
      BOOL v8 = v7 > 26.7539587;
      double v9 = 23.2484817;
    }
    else
    {
      BOOL v8 = v5 <= 0.03005953;
      double v9 = 4.51769352;
    }
    BOOL v10 = v6 > v9 && v8;
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    int v11 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v11)
    {
      printf("%lld %d AVE %s: MP: scene_change_detect() returns %d\n", CurrTime, 216, LevelStr, v10);
      __uint64_t v14 = AVE_GetCurrTime();
      int v16 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: MP: scene_change_detect() returns %d", v14, 216, v16, v10);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MP: scene_change_detect() returns %d", CurrTime, 216, LevelStr, v10);
    }
  }
  return v10;
}

void AVE_MultiPass::accumulate_scene_info(uint64_t a1, uint64_t a2)
{
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    int v4 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    int v7 = *(_DWORD *)(a2 + 44);
    if (v4)
    {
      printf("%lld %d AVE %s: MP: accumulate_scene_info() display_order %d\n", CurrTime, 216, LevelStr, v7);
      __uint64_t v8 = AVE_GetCurrTime();
      long long v30 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: MP: accumulate_scene_info() display_order %d", v8, 216, v30, *(_DWORD *)(a2 + 44));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MP: accumulate_scene_info() display_order %d", CurrTime, 216, LevelStr, v7);
    }
  }
  if (*(_DWORD *)(a2 + 44) != -1)
  {
    unsigned int v9 = *(_DWORD *)(a1 + 25500) + 1;
    *(_DWORD *)(a1 + 25500) = v9;
    if (*(_DWORD *)(a2 + 1200)) {
      ++*(_DWORD *)(a1 + 25496);
    }
    uint64_t v10 = *(unsigned int *)(a2 + 64);
    *(void *)(a1 + 25504) += v10;
    if (*(_DWORD *)(a2 + 52) == 2)
    {
      *(void *)(a1 + 25516) += v10;
      ++*(_DWORD *)(a1 + 25512);
      double v11 = *(float *)(a2 + 1556);
      *(double *)(a1 + 25576) = *(double *)(a1 + 25576) + v11;
    }
    else
    {
      double v11 = *(float *)(a2 + 1556);
    }
    uint64_t v12 = (int32x2_t *)(a2 + 1220);
    double v13 = *(double *)(a1 + 25760) + v11;
    *(double *)(a1 + 25760) = v13;
    *(float *)&double v13 = v13 / (double)v9;
    *(_DWORD *)(a1 + 25572) = LODWORD(v13);
    *(float64x2_t *)(a1 + 25584) = vaddq_f64(*(float64x2_t *)(a1 + 25584), vcvtq_f64_f32(*(float32x2_t *)(a2 + 1560)));
    __uint64_t v14 = (float *)(a2 + 1460);
    uint64_t v15 = (float *)(a1 + 25664);
    uint64_t v16 = 16;
    do
    {
      *((_DWORD *)v15 - 16) += *((_DWORD *)v14 - 16);
      float v17 = *v14++;
      *uint64_t v15 = v17 + *v15;
      ++v15;
      --v16;
    }
    while (v16);
    switch(*(_WORD *)(a2 + 1572))
    {
      case 0:
        *(void *)(a1 + 25528) += *(unsigned int *)(a2 + 64);
        ++*(_DWORD *)(a1 + 25524);
        break;
      case 1:
        *(void *)(a1 + 25540) += *(unsigned int *)(a2 + 64);
        ++*(_DWORD *)(a1 + 25536);
        break;
      case 2:
        *(void *)(a1 + 25552) += *(unsigned int *)(a2 + 64);
        ++*(_DWORD *)(a1 + 25548);
        break;
      case 3:
        *(void *)(a1 + 25564) += *(unsigned int *)(a2 + 64);
        ++*(_DWORD *)(a1 + 25560);
        break;
      default:
        break;
    }
    if (!*(_DWORD *)(a2 + 1200))
    {
      uint64_t v18 = 0;
      uint64_t v19 = *(void *)(a1 + 25488);
      float v20 = (float)*(void *)(v19 + 1220);
      float v21 = (float)v12->u32[0];
      int32x2_t v22 = vadd_s32(*(int32x2_t *)(v19 + 1220), *v12);
      *(int32x2_t *)(v19 + 1220) = v22;
      *(int64x2_t *)(v19 + 1228) = vaddq_s64(*(int64x2_t *)(v19 + 1228), *(int64x2_t *)(a2 + 1228));
      *(int64x2_t *)(v19 + 1244) = vaddq_s64(*(int64x2_t *)(v19 + 1244), *(int64x2_t *)(a2 + 1244));
      *(void *)(v19 + 1260) += *(void *)(a2 + 1260);
      uint64_t v23 = *(void *)(v19 + 1292) + *(void *)(a2 + 1292);
      *(float *)(v19 + 1216) = (float)((float)(*(float *)(a2 + 1216) * v21) + (float)(*(float *)(v19 + 1216) * v20))
                             / (float)v22.u32[0];
      *(float64x2_t *)(v19 + 1268) = vaddq_f64(*(float64x2_t *)(a2 + 1268), *(float64x2_t *)(v19 + 1268));
      float v24 = *(float *)(a2 + 1284);
      if (v24 >= *(float *)(v19 + 1284)) {
        float v24 = *(float *)(v19 + 1284);
      }
      *(float *)(v19 + 1284) = v24;
      float v25 = *(float *)(v19 + 1288);
      if (v25 < *(float *)(a2 + 1288)) {
        float v25 = *(float *)(a2 + 1288);
      }
      *(float *)(v19 + 1288) = v25;
      *(void *)(v19 + 1292) = v23;
      int64x2_t v26 = vaddq_s64(*(int64x2_t *)(v19 + 1316), *(int64x2_t *)(a2 + 1316));
      *(int32x4_t *)(v19 + 1300) = vaddq_s32(*(int32x4_t *)(v19 + 1300), *(int32x4_t *)(a2 + 1300));
      *(int64x2_t *)(v19 + 1316) = v26;
      float64x2_t v27 = vaddq_f64(*(float64x2_t *)(a2 + 1348), *(float64x2_t *)(v19 + 1348));
      *(int64x2_t *)(v19 + 1332) = vaddq_s64(*(int64x2_t *)(v19 + 1332), *(int64x2_t *)(a2 + 1332));
      *(float64x2_t *)(v19 + 1348) = v27;
      float64x2_t v28 = vaddq_f64(*(float64x2_t *)(v19 + 1380), vcvtq_f64_f32(*(float32x2_t *)(a2 + 1560)));
      *(float64x2_t *)(v19 + 1364) = vaddq_f64(*(float64x2_t *)(a2 + 1364), *(float64x2_t *)(v19 + 1364));
      *(float64x2_t *)(v19 + 1380) = v28;
      do
      {
        uint64_t v29 = v19 + v18;
        *(_DWORD *)(v29 + 1396) = *(_DWORD *)(v19 + v18 + 1396) + *(_DWORD *)(a2 + v18 + 1396);
        *(float *)(v29 + 1460) = *(float *)(a2 + v18 + 1460) + *(float *)(v19 + v18 + 1460);
        v18 += 4;
      }
      while (v18 != 64);
    }
    AVE_MultiPass::print_sc_info((AVE_MultiPass *)a1);
  }
}

void AVE_MultiPass::print_sc_info(AVE_MultiPass *this)
{
  uint64_t v2 = (char *)this + 25496;
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    int v3 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v3)
    {
      printf("%lld %d AVE %s: MP: seq_rc_info()\n", CurrTime, 216, LevelStr);
      __uint64_t v6 = AVE_GetCurrTime();
      uint64_t v71 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: MP: seq_rc_info()", v6, 216, v71);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MP: seq_rc_info()", CurrTime, 216, LevelStr);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    int v7 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t v8 = AVE_GetCurrTime();
    unsigned int v9 = AVE_Log_GetLevelStr(7);
    int v10 = *(_DWORD *)v2;
    if (v7)
    {
      printf("%lld %d AVE %s:  total_scenes %u\n", v8, 216, v9, v10);
      __uint64_t v11 = AVE_GetCurrTime();
      uint64_t v72 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s:  total_scenes %u", v11, 216, v72, *(_DWORD *)v2);
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  total_scenes %u", v8, 216, v9, v10);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    int v12 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t v13 = AVE_GetCurrTime();
    __uint64_t v14 = AVE_Log_GetLevelStr(7);
    int v15 = *((_DWORD *)v2 + 1);
    if (v12)
    {
      printf("%lld %d AVE %s:  cnt_All %u\n", v13, 216, v14, v15);
      __uint64_t v16 = AVE_GetCurrTime();
      uint64_t v73 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s:  cnt_All %u", v16, 216, v73, *((_DWORD *)v2 + 1));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  cnt_All %u", v13, 216, v14, v15);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    int v17 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t v18 = AVE_GetCurrTime();
    uint64_t v19 = AVE_Log_GetLevelStr(7);
    uint64_t v20 = *((void *)this + 3188);
    if (v17)
    {
      printf("%lld %d AVE %s:  bits_All %llu\n", v18, 216, v19, v20);
      __uint64_t v21 = AVE_GetCurrTime();
      int v74 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s:  bits_All %llu", v21, 216, v74, *((void *)this + 3188));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  bits_All %llu", v18, 216, v19, v20);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    int v22 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t v23 = AVE_GetCurrTime();
    float v24 = AVE_Log_GetLevelStr(7);
    int v25 = *((_DWORD *)v2 + 7);
    if (v22)
    {
      printf("%lld %d AVE %s:  cnt_NORMAL %u\n", v23, 216, v24, v25);
      __uint64_t v26 = AVE_GetCurrTime();
      double v75 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s:  cnt_NORMAL %u", v26, 216, v75, *((_DWORD *)v2 + 7));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  cnt_NORMAL %u", v23, 216, v24, v25);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    int v27 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t v28 = AVE_GetCurrTime();
    uint64_t v29 = AVE_Log_GetLevelStr(7);
    uint64_t v30 = *((void *)this + 3191);
    if (v27)
    {
      printf("%lld %d AVE %s:  bits_NORMAL %llu\n", v28, 216, v29, v30);
      __uint64_t v31 = AVE_GetCurrTime();
      double v76 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s:  bits_NORMAL %llu", v31, 216, v76, *((void *)this + 3191));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  bits_NORMAL %llu", v28, 216, v29, v30);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    int v32 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t v33 = AVE_GetCurrTime();
    uint64_t v34 = AVE_Log_GetLevelStr(7);
    int v35 = *((_DWORD *)v2 + 10);
    if (v32)
    {
      printf("%lld %d AVE %s:  cnt_MIN %u\n", v33, 216, v34, v35);
      __uint64_t v36 = AVE_GetCurrTime();
      uint64_t v77 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s:  cnt_MIN %u", v36, 216, v77, *((_DWORD *)v2 + 10));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  cnt_MIN %u", v33, 216, v34, v35);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    int v37 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t v38 = AVE_GetCurrTime();
    char v39 = AVE_Log_GetLevelStr(7);
    uint64_t v40 = *(void *)(v2 + 44);
    if (v37)
    {
      printf("%lld %d AVE %s:  bits_MIN %llu\n", v38, 216, v39, v40);
      __uint64_t v41 = AVE_GetCurrTime();
      __uint64_t v78 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s:  bits_MIN %llu", v41, 216, v78, *(void *)(v2 + 44));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  bits_MIN %llu", v38, 216, v39, v40);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    int v42 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t v43 = AVE_GetCurrTime();
    char v44 = AVE_Log_GetLevelStr(7);
    int v45 = *((_DWORD *)v2 + 13);
    if (v42)
    {
      printf("%lld %d AVE %s:  cnt_MAX %u\n", v43, 216, v44, v45);
      __uint64_t v46 = AVE_GetCurrTime();
      long long v79 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s:  cnt_MAX %u", v46, 216, v79, *((_DWORD *)v2 + 13));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  cnt_MAX %u", v43, 216, v44, v45);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    int v47 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t v48 = AVE_GetCurrTime();
    __uint64_t v49 = AVE_Log_GetLevelStr(7);
    uint64_t v50 = *((void *)this + 3194);
    if (v47)
    {
      printf("%lld %d AVE %s:  bits_MAX %llu\n", v48, 216, v49, v50);
      __uint64_t v51 = AVE_GetCurrTime();
      long long v80 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s:  bits_MAX %llu", v51, 216, v80, *((void *)this + 3194));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  bits_MAX %llu", v48, 216, v49, v50);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    int v52 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t v53 = AVE_GetCurrTime();
    __uint64_t v54 = AVE_Log_GetLevelStr(7);
    int v55 = *((_DWORD *)v2 + 16);
    if (v52)
    {
      printf("%lld %d AVE %s:  cnt_BLANK %u\n", v53, 216, v54, v55);
      __uint64_t v56 = AVE_GetCurrTime();
      int v81 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s:  cnt_BLANK %u", v56, 216, v81, *((_DWORD *)v2 + 16));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  cnt_BLANK %u", v53, 216, v54, v55);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    int v57 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t v58 = AVE_GetCurrTime();
    long long v59 = AVE_Log_GetLevelStr(7);
    uint64_t v60 = *(void *)(v2 + 68);
    if (v57)
    {
      printf("%lld %d AVE %s:  bits_BLANK %llu\n", v58, 216, v59, v60);
      __uint64_t v61 = AVE_GetCurrTime();
      __uint64_t v82 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s:  bits_BLANK %llu", v61, 216, v82, *(void *)(v2 + 68));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  bits_BLANK %llu", v58, 216, v59, v60);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    int v62 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t v63 = AVE_GetCurrTime();
    long long v64 = AVE_Log_GetLevelStr(7);
    if (v62)
    {
      printf("%lld %d AVE %s:  avg_qscale %f\n", v63, 216, v64, *((float *)v2 + 19));
      __uint64_t v63 = AVE_GetCurrTime();
      long long v64 = AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s:  avg_qscale %f", v63, 216, v64, *((float *)v2 + 19));
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    int v65 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t v66 = AVE_GetCurrTime();
    __uint64_t v67 = AVE_Log_GetLevelStr(7);
    if (v65)
    {
      printf("%lld %d AVE %s:  current_complexity %lf\n", v66, 216, v67, *((double *)this + 3198));
      __uint64_t v66 = AVE_GetCurrTime();
      __uint64_t v67 = AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s:  current_complexity %lf", v66, 216, v67, *((double *)this + 3198));
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    int v68 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t v69 = AVE_GetCurrTime();
    __uint64_t v70 = AVE_Log_GetLevelStr(7);
    if (v68)
    {
      printf("%lld %d AVE %s:  totalcplxsum %lf\n", v69, 216, v70, *((double *)this + 3199));
      __uint64_t v69 = AVE_GetCurrTime();
      __uint64_t v70 = AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s:  totalcplxsum %lf", v69, 216, v70, *((double *)this + 3199));
  }
}

_DWORD *AVE_MultiPass::scene_change_pipeline(void *a1, _DWORD *a2)
{
  __uint64_t v61 = a2;
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    int v4 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v4)
    {
      if (a2) {
        int v7 = a2[11];
      }
      else {
        int v7 = -1;
      }
      printf("%lld %d AVE %s: MP: scene_change_pipeline() Entry stats %p display_order %d\n", CurrTime, 216, LevelStr, a2, v7);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(7);
      if (a2) {
        goto LABEL_9;
      }
    }
    else if (a2)
    {
LABEL_9:
      int v8 = a2[11];
      goto LABEL_10;
    }
    int v8 = -1;
LABEL_10:
    syslog(3, "%lld %d AVE %s: MP: scene_change_pipeline() Entry stats %p display_order %d", CurrTime, 216, LevelStr, a2, v8);
  }
  if (!a1[3186])
  {
    unsigned int v9 = v61;
    v61[300] = 1;
    a1[3186] = v9;
    std::deque<_S_AVE_MultiPassStats *>::push_back(a1 + 3179, a1 + 3186);
  }
  std::deque<_S_AVE_MultiPassStats *>::push_back(a1 + 3173, &v61);
  unint64_t v11 = a1[3178];
  int v12 = (float *)v61;
  if (v11 <= 1)
  {
    *((void *)v61 + 151) = 0;
LABEL_33:
    __uint64_t v61 = 0;
    goto LABEL_34;
  }
  unint64_t v13 = v11 - 2;
  unint64_t v14 = a1[3177];
  unint64_t v15 = v14 + v11 - 2;
  uint64_t v16 = a1[3174];
  unint64_t v17 = v15 >> 9;
  uint64_t v18 = *(void *)(v16 + 8 * (v15 >> 9));
  uint64_t v19 = v15 & 0x1FF;
  uint64_t v20 = *(void *)(v18 + 8 * v19);
  if (v61[11] == -1)
  {
    float v23 = *(float *)(v20 + 1208);
  }
  else
  {
    float v21 = *((float *)v61 + 304) + *(float *)(v20 + 1216);
    if (v21 >= 1.0) {
      float v22 = v21 * 0.0019531;
    }
    else {
      float v22 = 0.0019531;
    }
    float v23 = fmaxf(AVE_MultiPass::histogram_diff((uint64_t)v10, (uint64_t)(v61 + 40), v20 + 160) / v22, 0.01);
    unint64_t v14 = a1[3177];
    uint64_t v16 = a1[3174];
    int v12 = (float *)v61;
    unint64_t v17 = (v14 + v13) >> 9;
    uint64_t v19 = (v14 + v13) & 0x1FF;
  }
  float v24 = *(float *)(*(void *)(*(void *)(v16 + 8 * v17) + 8 * v19) + 1208);
  if (v23 >= v24) {
    float v24 = v23;
  }
  v12[302] = v23;
  v12[303] = v24;
  if (v11 < 4)
  {
    if (v11 == 2)
    {
      uint64_t v34 = *(void *)(*(void *)(v16 + ((v14 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v14 & 0x1FF));
      *(void *)(v34 + 1208) = *(void *)(*(void *)(*(void *)(v16 + (((v14 + 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                                      + 8 * ((v14 + 1) & 0x1FF))
                                          + 1208);
      AVE_MultiPass::accumulate_scene_info((uint64_t)a1, v34);
    }
    goto LABEL_33;
  }
  unint64_t v25 = v11 + v14;
  uint64_t v26 = *(void *)(*(void *)(v16 + (((v25 - 3) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v25 - 3) & 0x1FF));
  uint64_t v60 = v26;
  float v27 = *(float *)(*(void *)(*(void *)(v16 + (((v25 - 4) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v25 - 4) & 0x1FF))
                 + 1212);
  float v28 = *(float *)(v26 + 1208);
  float v29 = *(float *)(*(void *)(*(void *)(v16 + (((v25 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v25 - 1) & 0x1FF))
                 + 1212);
  float v30 = v28 / v27;
  float v31 = v29 / v28;
  float v32 = (float)(v29 / v28) / (float)(v28 / v27);
  if (*((_DWORD *)v12 + 11) == -1 || *(_DWORD *)(v26 + 44) < 3u)
  {
    *(_DWORD *)(v26 + 1200) = *(_DWORD *)(v26 + 80) & 1;
    AVE_MultiPass::accumulate_scene_info((uint64_t)a1, v26);
    *(_DWORD *)(v26 + 1200) |= *(_DWORD *)(v26 + 44) == -1;
  }
  else
  {
    float v33 = *(float *)(v26 + 36);
    *(_DWORD *)(v26 + 1200) = 0;
    if ((*(unsigned char *)(v26 + 80) & 1) != 0
      || AVE_MultiPass::scene_change_detect(v10, v28, (float)(v29 / v28) / (float)(v28 / v27), v28 / v27, v29 / v28)
      || *(_DWORD *)(a1[3186] + 1220) >= ((float)(v33 * 6.0) + 0.5))
    {
      *(_DWORD *)(v26 + 1200) = 1;
    }
    AVE_MultiPass::accumulate_scene_info((uint64_t)a1, v26);
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    int v40 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t v41 = AVE_GetCurrTime();
    int v42 = AVE_Log_GetLevelStr(7);
    int v43 = *(_DWORD *)(v26 + 44);
    int v44 = *(_DWORD *)(v26 + 1200);
    if (v40)
    {
      printf("%lld %d AVE %s: MP: scene_change_pipeline() display_order %d forceKeyFrame %d scene_change %d\n", v41, 216, v42, v43, *(_DWORD *)(v26 + 80) & 1, v44);
      __uint64_t v45 = AVE_GetCurrTime();
      __uint64_t v46 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: MP: scene_change_pipeline() display_order %d forceKeyFrame %d scene_change %d", v45, 216, v46, *(_DWORD *)(v26 + 44), *(_DWORD *)(v26 + 80) & 1, *(_DWORD *)(v26 + 1200));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MP: scene_change_pipeline() display_order %d forceKeyFrame %d scene_change %d", v41, 216, v42, v43, *(_DWORD *)(v26 + 80) & 1, v44);
    }
  }
  int v47 = (int64x2_t *)(a1 + 3177);
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    int v48 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t v49 = AVE_GetCurrTime();
    uint64_t v50 = AVE_Log_GetLevelStr(7);
    double v51 = v27;
    double v52 = v28;
    double v53 = v29;
    double v54 = v32;
    double v55 = v30;
    double v56 = v31;
    if (v48)
    {
      printf("%lld %d AVE %s: MP: scene_change_pipeline() m0 %f m1 %f m2 %f m0m2 %f mdpa_ratio_p %f mdpa_ratio_n %f\n", v49, 216, v50, v51, v52, v53, v54, v55, v56);
      AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: MP: scene_change_pipeline() m0 %f m1 %f m2 %f m0m2 %f mdpa_ratio_p %f mdpa_ratio_n %f");
  }
  if (*(_DWORD *)(v26 + 1200))
  {
    std::deque<_S_AVE_MultiPassStats *>::push_back(a1 + 3179, &v60);
    a1[3186] = v60;
  }
  int64x2_t v57 = vaddq_s64(*v47, (int64x2_t)xmmword_1BA79F830);
  __uint64_t v61 = *(_DWORD **)(*(void *)(a1[3174] + (((unint64_t)v47->i64[0] >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * (v47->i64[0] & 0x1FF));
  *int v47 = v57;
  std::deque<_S_AVE_MultiPassStats *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)(a1 + 3173), 1);
  if (v61[300])
  {
    __uint64_t v61 = 0;
    unint64_t v58 = a1[3183];
    if (*(void *)(*(void *)(a1[3180] + ((v58 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v58 & 0x1FF)) != a1[3186])
    {
      __uint64_t v61 = *(_DWORD **)(*(void *)(a1[3180] + ((a1[3183] >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (a1[3183] & 0x1FFLL));
      --a1[3184];
      a1[3183] = v58 + 1;
      std::deque<_S_AVE_MultiPassStats *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)(a1 + 3179), 1);
    }
  }
LABEL_34:
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    int v35 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t v36 = AVE_GetCurrTime();
    int v37 = AVE_Log_GetLevelStr(7);
    if (v35)
    {
      printf("%lld %d AVE %s: MP: scene_change_pipeline() returns stats %p\n", v36, 216, v37, v61);
      __uint64_t v38 = AVE_GetCurrTime();
      long long v59 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: MP: scene_change_pipeline() returns stats %p", v38, 216, v59, v61);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MP: scene_change_pipeline() returns stats %p", v36, 216, v37, v61);
    }
  }
  return v61;
}

void std::deque<_S_AVE_MultiPassStats *>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<_S_AVE_MultiPassStats *>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void AVE_MultiPass::fixup_frame_bits(uint64_t a1, uint64_t a2, int a3)
{
  if (a2)
  {
    if (AVE_Log_CheckLevel(0xD8u, 7))
    {
      int v5 = AVE_Log_CheckConsole(0xD8u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(7);
      int v8 = *(_DWORD *)(a2 + 44);
      if (v5)
      {
        printf("%lld %d AVE %s: MP: F %d frame_bits %u correction_bits %d\n", CurrTime, 216, LevelStr, v8, *(_DWORD *)(a2 + 64), a3);
        __uint64_t v9 = AVE_GetCurrTime();
        int v10 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: MP: F %d frame_bits %u correction_bits %d", v9, 216, v10, *(_DWORD *)(a2 + 44), *(_DWORD *)(a2 + 64), a3);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: MP: F %d frame_bits %u correction_bits %d", CurrTime, 216, LevelStr, v8, *(_DWORD *)(a2 + 64), a3);
      }
    }
    if (a3)
    {
      uint64_t v11 = *(int *)(a2 + 64);
      if ((int)v11 + a3 >= 1)
      {
        uint64_t v12 = *(unsigned int *)(a2 + 68) * (uint64_t)a3 / v11;
        if (AVE_Log_CheckLevel(0xD8u, 7))
        {
          int v13 = AVE_Log_CheckConsole(0xD8u);
          __uint64_t v14 = AVE_GetCurrTime();
          unint64_t v15 = AVE_Log_GetLevelStr(7);
          int v16 = *(_DWORD *)(a2 + 44);
          if (v13)
          {
            printf("%lld %d AVE %s: MP: F %d hdr_bits %u hdr_correction %d\n", v14, 216, v15, v16, *(_DWORD *)(a2 + 68), v12);
            __uint64_t v17 = AVE_GetCurrTime();
            uint64_t v18 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: MP: F %d hdr_bits %u hdr_correction %d", v17, 216, v18, *(_DWORD *)(a2 + 44), *(_DWORD *)(a2 + 68), v12);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: MP: F %d hdr_bits %u hdr_correction %d", v14, 216, v15, v16, *(_DWORD *)(a2 + 68), v12);
          }
        }
        int v19 = *(_DWORD *)(a2 + 68);
        int v20 = *(_DWORD *)(a2 + 64) + a3;
        *(void *)(a2 + 1228) += a3;
        *(void *)(a2 + 1244) += (int)v12;
        *(_DWORD *)(a2 + 64) = v20;
        *(_DWORD *)(a2 + 68) = v19 + v12;
        int v21 = *(_DWORD *)(a2 + 52);
        if (v21)
        {
          if (v21 != 2)
          {
LABEL_17:
            uint64_t v23 = *(void *)(a2 + 1316);
            if (v23) {
              *(void *)(a2 + 1316) = v23 + a3;
            }
            uint64_t v24 = *(void *)(a2 + 1324);
            if (v24) {
              *(void *)(a2 + 1324) = v24 + a3;
            }
            uint64_t v25 = *(void *)(a2 + 1332);
            if (v25) {
              *(void *)(a2 + 1332) = v25 + a3;
            }
            uint64_t v26 = *(void *)(a2 + 1340);
            if (v26) {
              *(void *)(a2 + 1340) = v26 + a3;
            }
            return;
          }
          float v22 = (void *)(a2 + 1252);
        }
        else
        {
          float v22 = (void *)(a2 + 1260);
        }
        *v22 += (int)v12;
        goto LABEL_17;
      }
    }
  }
}

const void *AVE_MultiPass::enqueue_first_pass(void *a1, uint64_t a2, int a3)
{
  uint64_t v6 = (int *)(a1 + 3165);
  BOOL v7 = AVE_Log_CheckLevel(0xD8u, 7);
  if (v7)
  {
    int v8 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v8)
    {
      if (a2) {
        int v11 = *(_DWORD *)(a2 + 44);
      }
      else {
        int v11 = -1;
      }
      printf("%lld %d AVE %s: MP: enqueue_first_pass() display_order %d flush %d fixup_fifo_len %d\n", CurrTime, 216, LevelStr, v11, a3, v6[6]);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(7);
      if (a2) {
        int v12 = *(_DWORD *)(a2 + 44);
      }
      else {
        int v12 = -1;
      }
    }
    else if (a2)
    {
      int v12 = *(_DWORD *)(a2 + 44);
    }
    else
    {
      int v12 = -1;
    }
    syslog(3, "%lld %d AVE %s: MP: enqueue_first_pass() display_order %d flush %d fixup_fifo_len %d", CurrTime, 216, LevelStr, v12, a3, v6[6]);
  }
  unsigned int v13 = v6[6];
  if ((a3 & 1) == 0)
  {
    if (v13 != 2)
    {
      if (v13 == 1)
      {
        __uint64_t v17 = 0;
        a1[(v6[7] == 0) + 3166] = a2;
        int v18 = 2;
      }
      else
      {
        if (v13) {
          goto LABEL_81;
        }
        __uint64_t v17 = 0;
        a1[v6[7] + 3166] = a2;
        int v18 = 1;
      }
      v6[6] = v18;
      goto LABEL_95;
    }
LABEL_23:
    AVE_MultiPass::fixup_frame_bits(v7, a1[v6[7] + 3166], *(_DWORD *)(a2 + 72));
    int v19 = &a1[v6[7] + 3166];
    int v20 = (void *)a1[3170];
    unint64_t v21 = a1[3171];
    if ((unint64_t)v20 >= v21)
    {
      uint64_t v27 = a1[3169];
      uint64_t v28 = ((uint64_t)v20 - v27) >> 3;
      if ((unint64_t)(v28 + 1) >> 61) {
        std::vector<_S_AVE_MultiPassStats *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v29 = v21 - v27;
      uint64_t v30 = v29 >> 2;
      if (v29 >> 2 <= (unint64_t)(v28 + 1)) {
        uint64_t v30 = v28 + 1;
      }
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v30;
      }
      if (v31) {
        float v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_S_AVE_MultiPassStats **>>((uint64_t)(a1 + 3171), v31);
      }
      else {
        float v32 = 0;
      }
      __uint64_t v45 = &v32[8 * v28];
      __uint64_t v46 = &v32[8 * v31];
      *(void *)__uint64_t v45 = *v19;
      uint64_t v22 = (uint64_t)(v45 + 8);
      int v47 = (char *)a1[3170];
      int v48 = (char *)a1[3169];
      if (v47 != v48)
      {
        do
        {
          uint64_t v49 = *((void *)v47 - 1);
          v47 -= 8;
          *((void *)v45 - 1) = v49;
          v45 -= 8;
        }
        while (v47 != v48);
        int v47 = (char *)a1[3169];
      }
      a1[3169] = v45;
      a1[3170] = v22;
      a1[3171] = v46;
      if (v47) {
        operator delete(v47);
      }
    }
    else
    {
      void *v20 = *v19;
      uint64_t v22 = (uint64_t)(v20 + 1);
    }
    a1[3170] = v22;
    std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPStatsSort &,std::__wrap_iter<_S_AVE_MultiPassStats **>>(a1[3169], v22, (uint64_t)&v83, (v22 - a1[3169]) >> 3);
    BOOL v50 = v6[7] == 0;
    if (a3) {
      --v6[6];
    }
    else {
      a1[v6[7] + 3166] = a2;
    }
    v6[7] = v50;
    goto LABEL_81;
  }
  if (v13 == 2) {
    goto LABEL_23;
  }
  if (v13 == 1)
  {
    uint64_t v23 = &a1[v6[7] + 3166];
    uint64_t v24 = (void *)a1[3170];
    unint64_t v25 = a1[3171];
    if ((unint64_t)v24 >= v25)
    {
      uint64_t v33 = a1[3169];
      uint64_t v34 = ((uint64_t)v24 - v33) >> 3;
      if ((unint64_t)(v34 + 1) >> 61) {
        goto LABEL_101;
      }
      uint64_t v35 = v25 - v33;
      uint64_t v36 = v35 >> 2;
      if (v35 >> 2 <= (unint64_t)(v34 + 1)) {
        uint64_t v36 = v34 + 1;
      }
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v36;
      }
      if (v37) {
        __uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_S_AVE_MultiPassStats **>>((uint64_t)(a1 + 3171), v37);
      }
      else {
        __uint64_t v38 = 0;
      }
      double v51 = &v38[8 * v34];
      double v52 = &v38[8 * v37];
      *(void *)double v51 = *v23;
      uint64_t v26 = (uint64_t)(v51 + 8);
      double v53 = (char *)a1[3170];
      double v54 = (char *)a1[3169];
      if (v53 != v54)
      {
        do
        {
          uint64_t v55 = *((void *)v53 - 1);
          v53 -= 8;
          *((void *)v51 - 1) = v55;
          v51 -= 8;
        }
        while (v53 != v54);
        double v53 = (char *)a1[3169];
      }
      a1[3169] = v51;
      a1[3170] = v26;
      a1[3171] = v52;
      if (v53) {
        operator delete(v53);
      }
    }
    else
    {
      *uint64_t v24 = *v23;
      uint64_t v26 = (uint64_t)(v24 + 1);
    }
    a1[3170] = v26;
    std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPStatsSort &,std::__wrap_iter<_S_AVE_MultiPassStats **>>(a1[3169], v26, (uint64_t)&v82, (v26 - a1[3169]) >> 3);
    BOOL v56 = v6[7] == 0;
    --v6[6];
    v6[7] = v56;
    if (a2)
    {
      uint64_t v57 = *v6;
      a1[v57 + 3149] = a2;
      if (v57 < 0x10) {
        int v58 = v57 + 1;
      }
      else {
        int v58 = 16;
      }
      int *v6 = v58;
    }
    goto LABEL_81;
  }
  if (v13) {
    goto LABEL_81;
  }
  __uint64_t v14 = (void *)a1[3170];
  unint64_t v15 = a1[3171];
  if ((unint64_t)v14 >= v15)
  {
    uint64_t v39 = a1[3169];
    uint64_t v40 = ((uint64_t)v14 - v39) >> 3;
    if (!((unint64_t)(v40 + 1) >> 61))
    {
      uint64_t v41 = v15 - v39;
      uint64_t v42 = v41 >> 2;
      if (v41 >> 2 <= (unint64_t)(v40 + 1)) {
        uint64_t v42 = v40 + 1;
      }
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v43 = v42;
      }
      if (v43) {
        int v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_S_AVE_MultiPassStats **>>((uint64_t)(a1 + 3171), v43);
      }
      else {
        int v44 = 0;
      }
      long long v59 = &v44[8 * v40];
      uint64_t v60 = &v44[8 * v43];
      *(void *)long long v59 = a2;
      uint64_t v16 = (uint64_t)(v59 + 8);
      __uint64_t v61 = (char *)a1[3170];
      int v62 = (char *)a1[3169];
      if (v61 != v62)
      {
        do
        {
          uint64_t v63 = *((void *)v61 - 1);
          v61 -= 8;
          *((void *)v59 - 1) = v63;
          v59 -= 8;
        }
        while (v61 != v62);
        __uint64_t v61 = (char *)a1[3169];
      }
      a1[3169] = v59;
      a1[3170] = v16;
      a1[3171] = v60;
      if (v61) {
        operator delete(v61);
      }
      goto LABEL_80;
    }
LABEL_101:
    std::vector<_S_AVE_MultiPassStats *>::__throw_length_error[abi:ne180100]();
  }
  *__uint64_t v14 = a2;
  uint64_t v16 = (uint64_t)(v14 + 1);
LABEL_80:
  a1[3170] = v16;
  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPStatsSort &,std::__wrap_iter<_S_AVE_MultiPassStats **>>(a1[3169], v16, (uint64_t)&v81, (v16 - a1[3169]) >> 3);
LABEL_81:
  long long v64 = (void *)a1[3169];
  int v65 = (_DWORD *)*v64;
  int v66 = *(_DWORD *)(*v64 + 44);
  unsigned int v67 = v6[40];
  if (v66 == -1 || v66 == v67)
  {
    v6[40] = v67 + 1;
    uint64_t v69 = a1[3170];
    if (v69 - (uint64_t)v64 >= 9)
    {
      __uint64_t v70 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPStatsSort &,std::__wrap_iter<_S_AVE_MultiPassStats **>>(v64, (uint64_t)&v84, (unint64_t)(v69 - (void)v64) >> 3);
      uint64_t v71 = (void *)(v69 - 8);
      if ((void *)(v69 - 8) == v70)
      {
        *__uint64_t v70 = v65;
      }
      else
      {
        *__uint64_t v70 = *v71;
        *uint64_t v71 = v65;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPStatsSort &,std::__wrap_iter<_S_AVE_MultiPassStats **>>((uint64_t)v64, (uint64_t)(v70 + 1), (uint64_t)&v84, v70 + 1 - v64);
      }
    }
    a1[3170] -= 8;
    uint64_t v72 = AVE_MultiPass::scene_change_pipeline(a1, v65);
    __uint64_t v17 = v72;
    if (v72)
    {
      uint64_t v73 = *v6;
      a1[v73 + 3149] = v72;
      if (v73 < 0x10) {
        int v74 = v73 + 1;
      }
      else {
        int v74 = 16;
      }
      int *v6 = v74;
    }
  }
  else
  {
    __uint64_t v17 = 0;
  }
LABEL_95:
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    int v75 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t v76 = AVE_GetCurrTime();
    uint64_t v77 = AVE_Log_GetLevelStr(7);
    if (v75)
    {
      printf("%lld %d AVE %s: MP: enqueue_first_pass() returns stats %p\n", v76, 216, v77, v17);
      __uint64_t v78 = AVE_GetCurrTime();
      long long v80 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: MP: enqueue_first_pass() returns stats %p", v78, 216, v80, v17);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MP: enqueue_first_pass() returns stats %p", v76, 216, v77, v17);
    }
  }
  return v17;
}

void AVE_MultiPass::FinalizeSeqRcInfo(AVE_MultiPass *this)
{
  uint64_t v2 = (char *)this + 25728;
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    int v3 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v3)
    {
      printf("%lld %d AVE %s: MP: FinalizeSeqRcInfo()\n", CurrTime, 216, LevelStr);
      __uint64_t v6 = AVE_GetCurrTime();
      uint64_t v72 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: MP: FinalizeSeqRcInfo()", v6, 216, v72);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MP: FinalizeSeqRcInfo()", CurrTime, 216, LevelStr);
    }
  }
  uint64_t v73 = v2;
  BOOL v7 = 0;
  uint64_t v8 = 0;
  __uint64_t v86 = 0;
  int v87 = 0;
  v88[0] = 0;
  float v9 = 0.0;
  float v10 = 0.1875;
  do
  {
    int v11 = (char *)this + 4 * v8;
    unsigned int v12 = *((_DWORD *)v11 + 6400);
    if (v12)
    {
      float v13 = *((float *)v11 + 6416) / (float)v12;
      if ((unint64_t)v7 >= v88[0])
      {
        __uint64_t v14 = (__n128 *)v86;
        uint64_t v15 = ((char *)v7 - (char *)v86) >> 4;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 60) {
          std::vector<_S_AVE_MultiPassStats *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v88[0] - (void)v86;
        if ((uint64_t)(v88[0] - (void)v86) >> 3 > v16) {
          unint64_t v16 = v17 >> 3;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          int v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AVE_MultiPass::_S_AVE_MPCluster>>((uint64_t)v88, v18);
          __uint64_t v14 = (__n128 *)v86;
          BOOL v7 = (__n128 *)v87;
        }
        else
        {
          int v19 = 0;
        }
        int v20 = (__n128 *)&v19[16 * v15];
        v20->n128_u32[0] = v12;
        v20->n128_f32[1] = v13;
        v20->n128_f32[2] = v9;
        v20->n128_f32[3] = v10;
        unint64_t v21 = v20;
        if (v7 != v14)
        {
          do
          {
            v21[-1] = v7[-1];
            --v21;
            --v7;
          }
          while (v7 != v14);
          __uint64_t v14 = (__n128 *)v86;
        }
        BOOL v7 = v20 + 1;
        __uint64_t v86 = (float *)v21;
        int v87 = (float *)&v20[1];
        v88[0] = &v19[16 * v18];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        v7->n128_u32[0] = v12;
        v7->n128_f32[1] = v13;
        v7->n128_f32[2] = v9;
        v7->n128_f32[3] = v10;
        ++v7;
      }
      int v87 = (float *)v7;
    }
    float v9 = v10;
    float v10 = v10 + 0.1875;
    ++v8;
  }
  while (v8 != 16);
  uint64_t v22 = (__n128 *)v86;
  if (v86 == (float *)v7)
  {
    uint64_t v23 = v73;
    if ((unint64_t)v7 >= v88[0])
    {
      unint64_t v24 = (uint64_t)(v88[0] - (void)v7) >> 3;
      if (v24 <= 1) {
        unint64_t v24 = 1;
      }
      if (v88[0] - (void)v7 >= 0x7FFFFFFFFFFFFFF0uLL) {
        unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v24;
      }
      uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AVE_MultiPass::_S_AVE_MPCluster>>((uint64_t)v88, v25);
      uint64_t v27 = v86;
      uint64_t v28 = v87;
      uint64_t v30 = &v26[16 * v29];
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 4) = 1069547520;
      *((_DWORD *)v26 + 3) = 1077936128;
      BOOL v7 = (__n128 *)(v26 + 16);
      if (v28 != v27)
      {
        do
        {
          *((_OWORD *)v26 - 1) = *((_OWORD *)v28 - 1);
          v26 -= 16;
          v28 -= 4;
        }
        while (v28 != v27);
        uint64_t v27 = v86;
      }
      __uint64_t v86 = (float *)v26;
      int v87 = (float *)v7;
      v88[0] = v30;
      if (v27) {
        operator delete(v27);
      }
    }
    else
    {
      v7->n128_u32[0] = 1;
      *(unint64_t *)((char *)v7->n128_u64 + 4) = 1069547520;
      v7->n128_u32[3] = 1077936128;
      ++v7;
    }
    int v87 = (float *)v7;
    uint64_t v22 = (__n128 *)v86;
  }
  else
  {
    uint64_t v23 = v73;
  }
  unint64_t v31 = v7 - v22;
  if ((unint64_t)((char *)v7 - (char *)v22) <= 0x3F)
  {
    do
    {
      unint64_t v32 = 126 - 2 * __clz(v31);
      if (v7 == v22) {
        uint64_t v33 = 0;
      }
      else {
        uint64_t v33 = v32;
      }
      std::__introsort<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *,false>((unsigned int *)v22, (long long *)v7, (uint64_t)&v83, v33, 1);
      uint64_t v34 = v86;
      float v35 = v86[1];
      float v36 = v86[2];
      float v37 = (float)(v36 + v35) * 0.5;
      float v38 = *v86;
      unsigned __int32 v39 = *(_DWORD *)v86 >> 1;
      v86[1] = (float)(v35 + v86[3]) * 0.5;
      v34[2] = v35;
      *(_DWORD *)uint64_t v34 = LODWORD(v38) - (LODWORD(v38) >> 1);
      uint64_t v40 = v87;
      if ((unint64_t)v87 >= v88[0])
      {
        uint64_t v41 = ((char *)v87 - (char *)v34) >> 4;
        if ((unint64_t)(v41 + 1) >> 60) {
          std::vector<_S_AVE_MultiPassStats *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v42 = v88[0] - (void)v34;
        uint64_t v43 = v42 >> 3;
        if (v42 >> 3 <= (unint64_t)(v41 + 1)) {
          uint64_t v43 = v41 + 1;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v44 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v43;
        }
        if (v44)
        {
          __uint64_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AVE_MultiPass::_S_AVE_MPCluster>>((uint64_t)v88, v44);
          uint64_t v40 = v87;
        }
        else
        {
          __uint64_t v45 = 0;
        }
        __uint64_t v46 = (__n128 *)&v45[16 * v41];
        v46->n128_u32[0] = v39;
        v46->n128_f32[1] = v37;
        v46->n128_f32[2] = v36;
        v46->n128_f32[3] = v35;
        int v47 = v86;
        int v48 = v46;
        if (v40 != v86)
        {
          do
          {
            v48[-1] = *(__n128 *)(v40 - 4);
            --v48;
            v40 -= 4;
          }
          while (v40 != v47);
          uint64_t v40 = v86;
        }
        BOOL v7 = v46 + 1;
        __uint64_t v86 = (float *)v48;
        int v87 = (float *)&v46[1];
        v88[0] = &v45[16 * v44];
        if (v40) {
          operator delete(v40);
        }
      }
      else
      {
        *(_DWORD *)int v87 = v39;
        v40[1] = v37;
        v40[2] = v36;
        BOOL v7 = (__n128 *)(v40 + 4);
        v40[3] = v35;
      }
      int v87 = (float *)v7;
      uint64_t v22 = (__n128 *)v86;
      unint64_t v31 = ((char *)v7 - (char *)v86) >> 4;
    }
    while ((unint64_t)((char *)v7 - (char *)v86) < 0x40);
  }
  unint64_t v49 = 126 - 2 * __clz(v31);
  if (v7 == v22) {
    uint64_t v50 = 0;
  }
  else {
    uint64_t v50 = v49;
  }
  std::__introsort<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *,false>(v22, (long long *)v7, (uint64_t)&v83, v50, 1);
  char v83 = 0;
  char v84 = 0;
  uint64_t v85 = 0;
  float v51 = *(v87 - 1);
  float v52 = v86[2];
  std::vector<AVE_MultiPass::_S_AVE_MPCluster>::resize((uint64_t)&v83, 4uLL);
  uint64_t v53 = 0;
  float v54 = (float)(v51 - v52) * 0.25;
  float v55 = v52 + v54;
  float v56 = (float)(v52 + (float)(v52 + v54)) * 0.5;
  do
  {
    uint64_t v57 = (float *)((char *)v83 + v53);
    v57[1] = v56;
    v57[2] = v52;
    v57[3] = v55;
    float *v57 = 0.0;
    if (AVE_Log_CheckLevel(0x2Eu, 8))
    {
      if (AVE_Log_CheckConsole(0x2Eu))
      {
        __uint64_t v58 = AVE_GetCurrTime();
        long long v59 = AVE_Log_GetLevelStr(8);
        printf("%lld %d AVE %s: center %f left %f right %f count %u\n", v58, 46, v59, *(float *)((char *)v83 + v53 + 4), *(float *)((char *)v83 + v53 + 8), *(float *)((char *)v83 + v53 + 12), *(_DWORD *)((char *)v83 + v53));
      }
      __uint64_t v60 = AVE_GetCurrTime();
      __uint64_t v61 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: center %f left %f right %f count %u", v60, 46, v61, *(float *)((char *)v83 + v53 + 4), *(float *)((char *)v83 + v53 + 8), *(float *)((char *)v83 + v53 + 12), *(_DWORD *)((char *)v83 + v53));
    }
    float v56 = v54 + v56;
    float v52 = v54 + v52;
    float v55 = v54 + v55;
    v53 += 16;
  }
  while (v53 != 64);
  __p = 0;
  char v81 = 0;
  uint64_t v82 = 0;
  int v62 = std::vector<AVE_MultiPass::_S_AVE_MPCluster>::__init_with_size[abi:ne180100]<AVE_MultiPass::_S_AVE_MPCluster*,AVE_MultiPass::_S_AVE_MPCluster*>(&__p, v86, (uint64_t)v87, ((char *)v87 - (char *)v86) >> 4);
  AVE_MultiPass::QuantizeData((uint64_t)v62, (unint64_t *)&__p, (unint64_t *)&v83);
  if (__p)
  {
    char v81 = __p;
    operator delete(__p);
  }
  uint64_t v77 = 0;
  __uint64_t v78 = 0;
  uint64_t v79 = 0;
  uint64_t v63 = std::vector<AVE_MultiPass::_S_AVE_MPCluster>::__init_with_size[abi:ne180100]<AVE_MultiPass::_S_AVE_MPCluster*,AVE_MultiPass::_S_AVE_MPCluster*>(&v77, v86, (uint64_t)v87, ((char *)v87 - (char *)v86) >> 4);
  AVE_MultiPass::QuantizeData((uint64_t)v63, (unint64_t *)&v77, (unint64_t *)&v83);
  if (v77)
  {
    __uint64_t v78 = v77;
    operator delete(v77);
  }
  int v74 = 0;
  int v75 = 0;
  uint64_t v76 = 0;
  long long v64 = std::vector<AVE_MultiPass::_S_AVE_MPCluster>::__init_with_size[abi:ne180100]<AVE_MultiPass::_S_AVE_MPCluster*,AVE_MultiPass::_S_AVE_MPCluster*>(&v74, v86, (uint64_t)v87, ((char *)v87 - (char *)v86) >> 4);
  AVE_MultiPass::QuantizeData((uint64_t)v64, (unint64_t *)&v74, (unint64_t *)&v83);
  if (v74)
  {
    int v75 = v74;
    operator delete(v74);
  }
  uint64_t v65 = 0;
  int v66 = (char *)v83;
  unsigned int v67 = v23 + 4;
  do
  {
    *(v67 - 4) = *(_DWORD *)&v66[v65];
    *v67++ = *(_DWORD *)&v66[v65 + 4];
    v65 += 16;
  }
  while (v65 != 64);
  if (AVE_Log_CheckLevel(0x2Eu, 8))
  {
    if (AVE_Log_CheckConsole(0x2Eu))
    {
      __uint64_t v68 = AVE_GetCurrTime();
      uint64_t v69 = AVE_Log_GetLevelStr(8);
      printf("%lld %d AVE %s: log10_cplx quantized histogram : values %f %f %f %f counts %u %u %u %u\n", v68, 46, v69, *((float *)v23 + 4), *((float *)v23 + 5), *((float *)v23 + 6), *((float *)v23 + 7), *v23, v23[1], v23[2], v23[3]);
    }
    __uint64_t v70 = AVE_GetCurrTime();
    uint64_t v71 = AVE_Log_GetLevelStr(8);
    syslog(3, "%lld %d AVE %s: log10_cplx quantized histogram : values %f %f %f %f counts %u %u %u %u", v70, 46, v71, *((float *)v23 + 4), *((float *)v23 + 5), *((float *)v23 + 6), *((float *)v23 + 7), *v23, v23[1], v23[2], v23[3]);
  }
  if (v83)
  {
    char v84 = v83;
    operator delete(v83);
  }
  if (v86)
  {
    int v87 = v86;
    operator delete(v86);
  }
}

void sub_1BA77AC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  uint64_t v33 = *(void **)(v31 - 144);
  if (v33)
  {
    *(void *)(v31 - 136) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<AVE_MultiPass::_S_AVE_MPCluster>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<AVE_MultiPass::_S_AVE_MPCluster>::__append((char **)a1, a2 - v2);
  }
}

void AVE_MultiPass::QuantizeData(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    int v5 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v5)
    {
      printf("%lld %d AVE %s: MP: QuantizeData()\n", CurrTime, 216, LevelStr);
      __uint64_t v8 = AVE_GetCurrTime();
      uint64_t v43 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: MP: QuantizeData()", v8, 216, v43);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MP: QuantizeData()", CurrTime, 216, LevelStr);
    }
  }
  unint64_t v10 = *a3;
  unint64_t v9 = a3[1];
  if (*a3 < v9)
  {
    unint64_t v11 = a2[1];
    float v12 = 0.0;
    do
    {
      unint64_t v13 = *a2;
      if (*a2 >= v11)
      {
        float v15 = 0.0;
        unsigned int v40 = (float)((float)(v12 + 0.0) + 0.5);
        *(_DWORD *)unint64_t v10 = v40;
      }
      else
      {
        float v14 = 0.0;
        float v15 = 0.0;
        do
        {
          if (AVE_Log_CheckLevel(0x2Eu, 8))
          {
            int v16 = AVE_Log_CheckConsole(0x2Eu);
            __uint64_t v17 = AVE_GetCurrTime();
            unint64_t v18 = AVE_Log_GetLevelStr(8);
            double v19 = *(float *)(v13 + 8);
            double v20 = *(float *)(v13 + 4);
            double v21 = *(float *)(v13 + 12);
            double v22 = *(float *)(v10 + 8);
            double v23 = *(float *)(v10 + 4);
            double v24 = *(float *)(v10 + 12);
            if (v16)
            {
              printf("%lld %d AVE %s: it %f %f %f q_it %f %f %f\n", v17, 46, v18, v19, v20, v21, v22, *(float *)(v10 + 4), v24);
              __uint64_t v17 = AVE_GetCurrTime();
              unint64_t v18 = AVE_Log_GetLevelStr(8);
              double v19 = *(float *)(v13 + 8);
              double v20 = *(float *)(v13 + 4);
              double v21 = *(float *)(v13 + 12);
              double v22 = *(float *)(v10 + 8);
              double v23 = *(float *)(v10 + 4);
              double v24 = *(float *)(v10 + 12);
            }
            syslog(3, "%lld %d AVE %s: it %f %f %f q_it %f %f %f", v17, 46, v18, v19, v20, v21, v22, v23, v24);
          }
          float v25 = *(float *)(v13 + 12);
          float v26 = *(float *)(v10 + 8);
          if (v25 > v26)
          {
            float v27 = *(float *)(v13 + 8);
            float v28 = *(float *)(v10 + 12);
            if (v27 < v28)
            {
              float v29 = v27 >= v26 ? *(float *)(v13 + 8) : *(float *)(v10 + 8);
              float v30 = v28 >= v25 ? *(float *)(v13 + 12) : *(float *)(v10 + 12);
              float v31 = (float)((float)(v30 - v29) * (float)*(unsigned int *)v13) / (float)(v25 - v27);
              float v32 = (float)(v29 + v30) * 0.5;
              float v15 = v15 + v31;
              float v14 = v14 + (float)(v31 * v32);
              if (AVE_Log_CheckLevel(0x2Eu, 8))
              {
                int v33 = AVE_Log_CheckConsole(0x2Eu);
                __uint64_t v34 = AVE_GetCurrTime();
                float v35 = AVE_Log_GetLevelStr(8);
                double v36 = v29;
                double v37 = v30;
                double v38 = v31;
                double v39 = v32;
                if (v33)
                {
                  printf("%lld %d AVE %s: left_overlap %f right_overlap %f l_count %f center %f\n", v34, 46, v35, v36, v37, v38, v39);
                  __uint64_t v34 = AVE_GetCurrTime();
                  float v35 = AVE_Log_GetLevelStr(8);
                }
                syslog(3, "%lld %d AVE %s: left_overlap %f right_overlap %f l_count %f center %f", v34, 46, v35, v36, v37, v38, v39);
              }
            }
          }
          v13 += 16;
          unint64_t v11 = a2[1];
        }
        while (v13 < v11);
        unsigned int v40 = (float)((float)(v12 + v15) + 0.5);
        *(_DWORD *)unint64_t v10 = v40;
        if (v15 > 0.0) {
          *(float *)(v10 + 4) = v14 / v15;
        }
      }
      float v12 = v15 - (float)v40;
      v10 += 16;
      unint64_t v9 = a3[1];
    }
    while (v10 < v9);
    unint64_t v10 = *a3;
  }
  if (v10 < v9)
  {
    do
    {
      unint64_t v41 = v10 + 16;
      if (v10 + 16 != v9)
      {
        float v42 = (float)(*(float *)(v10 + 4) + *(float *)(v10 + 20)) * 0.5;
        *(float *)(v10 + 12) = v42;
        *(float *)(v10 + 24) = v42;
      }
      v10 += 16;
    }
    while (v41 < v9);
  }
}

void AVE_MultiPass::FlushStats(AVE_MultiPass *this, OpaqueVTMultiPassStorage *a2, __sFILE *a3)
{
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    int v6 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(7);
    if (v6)
    {
      printf("%lld %d AVE %s: MP: %s\n", CurrTime, 216, LevelStr, "FlushStats");
      __uint64_t v9 = AVE_GetCurrTime();
      double v23 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: MP: %s", v9, 216, v23, "FlushStats");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MP: %s", CurrTime, 216, LevelStr, "FlushStats");
    }
  }
  pass = 0;
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  while (!pass || *((_DWORD *)pass + 11) != -1)
  {
    uint64_t v11 = AVE_MultiPass::new_stats(this);
    if (!v11) {
      break;
    }
    *(_DWORD *)(v11 + 44) = -1;
    pass = (const UInt8 *)AVE_MultiPass::enqueue_first_pass(this, v11, 0);
    if (!AVE_Log_CheckLevel(0xD8u, 7)) {
      goto LABEL_19;
    }
    int v12 = AVE_Log_CheckConsole(0xD8u);
    __uint64_t v13 = AVE_GetCurrTime();
    float v14 = AVE_Log_GetLevelStr(7);
    if (v12)
    {
      if (pass) {
        int v15 = *((_DWORD *)pass + 11);
      }
      else {
        int v15 = -1;
      }
      printf("%lld %d AVE %s: MP: %s flushes stats %p display_order %d\n", v13, 216, v14, "FlushStats", pass, v15);
      __uint64_t v13 = AVE_GetCurrTime();
      float v14 = AVE_Log_GetLevelStr(7);
      if (pass)
      {
LABEL_17:
        int v16 = *((_DWORD *)pass + 11);
        goto LABEL_18;
      }
    }
    else if (pass)
    {
      goto LABEL_17;
    }
    int v16 = -1;
LABEL_18:
    syslog(3, "%lld %d AVE %s: MP: %s flushes stats %p display_order %d", v13, 216, v14, "FlushStats", pass, v16);
LABEL_19:
    if (pass && *((_DWORD *)pass + 11) != -1)
    {
      if (a2)
      {
        CFMutableDataRef Mutable = CFDataCreateMutable(allocator, 0);
        CFDataAppendBytes(Mutable, pass, 1574);
        int v18 = VTMultiPassStorageSetDataAtTimeStamp();
        if (Mutable) {
          CFRelease(Mutable);
        }
        if (v18 && AVE_Log_CheckLevel(0x2Eu, 4))
        {
          int v19 = AVE_Log_CheckConsole(0x2Eu);
          __uint64_t v20 = AVE_GetCurrTime();
          double v21 = AVE_Log_GetLevelStr(4);
          if (v19)
          {
            printf("%lld %d AVE %s: MP: %s ERROR: VTMultiPassStorageSetDataAtTimeStamp failed ...\n", v20, 46, v21, "FlushStats");
            __uint64_t v22 = AVE_GetCurrTime();
            double v24 = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: MP: %s ERROR: VTMultiPassStorageSetDataAtTimeStamp failed ...", v22, 46, v24, "FlushStats");
          }
          else
          {
            syslog(3, "%lld %d AVE %s: MP: %s ERROR: VTMultiPassStorageSetDataAtTimeStamp failed ...", v20, 46, v21, "FlushStats");
          }
        }
      }
      if (a3)
      {
        fseeko(a3, 1574 * *((unsigned int *)pass + 11) + 264, 0);
        fwrite(pass, 1uLL, 0x626uLL, a3);
      }
    }
  }
  AVE_MultiPass::empty_queues(this);
  AVE_MultiPass::FinalizeSeqRcInfo(this);
  if (a3)
  {
    fseek(a3, 0, 0);
    fwrite((char *)this + 25496, 1uLL, 0x108uLL, a3);
  }
}

void std::deque<_S_AVE_MultiPassStats *>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    int v6 = (char *)a1[3];
    a1[4] = v4;
    BOOL v7 = (void *)a1[1];
    __uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    __uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)__uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_S_AVE_MultiPassStats **>>(v5, v33);
      float v35 = &v34[8 * (v33 >> 2)];
      double v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      __uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        __uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      __uint64_t v9 = (char *)a1[1];
    }
    __uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<_S_AVE_MultiPassStats **>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<_S_AVE_MultiPassStats **>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    __uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    __uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_S_AVE_MultiPassStats **>>((uint64_t)(a1 + 3), v46);
      float v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      __uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        __uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        float v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)float v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        __uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  float v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<_S_AVE_MultiPassStats **>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<_S_AVE_MultiPassStats **>::push_back(&v54, &v53);
  float v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<_S_AVE_MultiPassStats **>::push_front((uint64_t)&v54, v27);
  }
  float v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1BA77B6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<_S_AVE_MultiPassStats **>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  int v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    BOOL v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      int v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_S_AVE_MultiPassStats **>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      int v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        int v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      float v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        int v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        int v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      int v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)int v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    int v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        int64_t v16 = 1;
      }
      else {
        int64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_S_AVE_MultiPassStats **>>(a1[4], v16);
      int v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      BOOL v7 = v6 >> 3;
      uint64_t v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        BOOL v10 = v9;
      }
      else {
        BOOL v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      uint64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<_S_AVE_MultiPassStats **>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    BOOL v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_S_AVE_MultiPassStats **>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  unsigned char *v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    BOOL v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = (v7 - v4) >> 2;
      }
      unint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_S_AVE_MultiPassStats **>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      int64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        int64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<_S_AVE_MultiPassStats **>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

uint64_t std::deque<_S_AVE_MultiPassStats *>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x200) {
    a2 = 1;
  }
  if (v2 < 0x400) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

void std::vector<_S_AVE_MultiPassStats *>::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E6224020, MEMORY[0x1E4FBA1C8]);
}

void sub_1BA77BC8C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPStatsSort &,std::__wrap_iter<_S_AVE_MultiPassStats **>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v5 = (void *)(result + 8 * v4);
    uint64_t v6 = *v5;
    uint64_t v9 = *(void *)(a2 - 8);
    BOOL v7 = (void *)(a2 - 8);
    uint64_t v8 = v9;
    unsigned int v10 = *(_DWORD *)(v9 + 44);
    if (*(_DWORD *)(*v5 + 44) > v10)
    {
      do
      {
        uint64_t v11 = v5;
        *BOOL v7 = v6;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v5 = (void *)(result + 8 * v4);
        uint64_t v6 = *v5;
        BOOL v7 = v11;
      }
      while (*(_DWORD *)(*v5 + 44) > v10);
      *uint64_t v11 = v8;
    }
  }
  return result;
}

void *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPStatsSort &,std::__wrap_iter<_S_AVE_MultiPassStats **>>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = &a1[v3];
    uint64_t v9 = v6[1];
    BOOL v7 = v6 + 1;
    uint64_t v8 = v9;
    uint64_t v10 = (2 * v3) | 1;
    uint64_t v11 = 2 * v3 + 2;
    if (v11 < a3 && *(_DWORD *)(v8 + 44) > *(_DWORD *)(v7[1] + 44))
    {
      uint64_t v8 = v7[1];
      ++v7;
      uint64_t v10 = v11;
    }
    *a1 = v8;
    a1 = v7;
    uint64_t v3 = v10;
  }
  while (v10 <= v5);
  return v7;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<AVE_MultiPass::_S_AVE_MPCluster>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

void std::__introsort<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *,false>(unsigned int *a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unsigned int v22 = *((_DWORD *)a2 - 4);
          uint64_t v21 = a2 - 1;
          if (v22 > *v11)
          {
            long long v30 = *(_OWORD *)v11;
            *(_OWORD *)uint64_t v11 = *v21;
            *uint64_t v21 = v30;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((long long *)v11, v11 + 4, (unsigned int *)a2 - 4);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((long long *)v11, v11 + 4, v11 + 8, a2 - 1);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((long long *)v11, v11 + 4, v11 + 8, (__n128 *)v11 + 3, (__n128 *)a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (unsigned int *)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *,AVE_MultiPass::_S_AVE_MPCluster *>((long long *)v11, a2, a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[4 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((long long *)v11, &v11[4 * (v15 >> 1)], (unsigned int *)a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((long long *)v11 + 1, v17 - 4, (unsigned int *)a2 - 8);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((long long *)v11 + 2, &v11[4 * v16 + 4], (unsigned int *)a2 - 12);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((long long *)v17 - 1, v17, &v11[4 * v16 + 4]);
      long long v29 = *(_OWORD *)v11;
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)uint64_t v17 = v29;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((long long *)&v11[4 * (v15 >> 1)], v11, (unsigned int *)a2 - 4);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (*(v11 - 4) <= *v11)
    {
      uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPCluster *,AVE_MultiPass::_S_AVE_MPClusterSortCount &>(v11, (unsigned int *)a2);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPCluster *,AVE_MultiPass::_S_AVE_MPClusterSortCount &>((long long *)v11, a2);
    if ((v19 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((uint64_t)v11, (__n128 *)v18);
    uint64_t v11 = (unsigned int *)(v18 + 1);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((uint64_t)(v18 + 1), (__n128 *)a2))
    {
      a4 = -v13;
      a2 = v18;
      if (v20) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v20)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *,false>(a1, v18, a3, -v13, a5 & 1);
      uint64_t v11 = (unsigned int *)(v18 + 1);
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>(v11, a2);
  }
  else if (v11 != (unsigned int *)a2)
  {
    uint64_t v23 = (long long *)(v11 + 4);
    while (v23 != a2)
    {
      uint64_t v24 = v23;
      uint64_t v25 = *((void *)a1 + 2);
      if (v25 > *a1)
      {
        uint64_t v26 = *((void *)a1 + 3);
        float v27 = v24;
        do
        {
          long long *v27 = *(v27 - 1);
          unsigned int v28 = *((_DWORD *)v27-- - 8);
        }
        while (v25 > v28);
        *(void *)float v27 = v25;
        *((void *)v27 + 1) = v26;
      }
      uint64_t v23 = v24 + 1;
      a1 = (unsigned int *)v24;
    }
  }
}

  uint64_t v11 = (__n128 *)(a2 - 1);
  uint64_t v12 = a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = v12;
    uint64_t v14 = v13;
    unint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = ((char *)a2 - (char *)v12) >> 4;
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (*((float *)a2 - 3) < v12->n128_f32[1])
          {
            uint64_t v23 = *v12;
            *uint64_t v12 = *v11;
            *uint64_t v11 = v23;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>((float *)v12, (float *)&v12[1], (float *)a2 - 4);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>((float *)v12, (uint64_t)&v12[1], (uint64_t)&v12[2], (uint64_t)(a2 - 1));
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>((float *)v12, v12 + 1, v12 + 2, v12 + 3, (__n128 *)a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 383) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != (__n128 *)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *,AVE_MultiPass::_S_AVE_MPCluster *>((uint64_t)v12, a2, a2, a3);
      }
      return;
    }
    uint64_t v17 = v16 >> 1;
    uint64_t v18 = (float *)&v12[v16 >> 1];
    if ((unint64_t)v15 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>((float *)v12, (float *)&v12[v16 >> 1], (float *)a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>((float *)&v12[1], v18 - 4, (float *)a2 - 8);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>((float *)&v12[2], (float *)&v12[v17 + 1], (float *)a2 - 12);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(v18 - 4, v18, (float *)&v12[v17 + 1]);
      unsigned int v22 = *v12;
      *uint64_t v12 = *(__n128 *)v18;
      *(__n128 *)uint64_t v18 = v22;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>((float *)&v12[v16 >> 1], (float *)v12, (float *)a2 - 4);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (v12[-1].n128_f32[1] >= v12->n128_f32[1])
    {
      uint64_t v12 = (__n128 *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPCluster *,AVE_MultiPass::_S_AVE_MPClusterSortCenter &>((float *)v12, (float *)a2);
      goto LABEL_18;
    }
LABEL_13:
    char v19 = (__n128 *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPCluster *,AVE_MultiPass::_S_AVE_MPClusterSortCenter &>((long long *)v12, (float *)a2);
    if ((v20 & 1) == 0) {
      goto LABEL_16;
    }
    uint64_t v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(v12, v19);
    uint64_t v12 = v19 + 1;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(v19 + 1, (__n128 *)a2))
    {
      a4 = -v14;
      a2 = (long long *)v19;
      if (v21) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v21)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *,false>(a1, v19, a3, -v14, a5 & 1);
      uint64_t v12 = v19 + 1;
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(v12, a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>((uint64_t)v12, (uint64_t)a2);
  }
}

void *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>(void *result, void *a2)
{
  if (result != a2)
  {
    unint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        char v5 = v2;
        uint64_t v6 = v4[2];
        if (v6 > *(_DWORD *)v4)
        {
          uint64_t v7 = v4[3];
          uint64_t v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8) {
              break;
            }
            unsigned int v9 = *(_DWORD *)((char *)result + v8 - 16);
            v8 -= 16;
            if (v6 <= v9)
            {
              uint64_t v10 = (void *)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          uint64_t v10 = result;
LABEL_10:
          *uint64_t v10 = v6;
          v10[1] = v7;
        }
        unint64_t v2 = v5 + 2;
        v3 += 16;
        uint64_t v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>(long long *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3 = *a2;
  unsigned int v4 = *a3;
  if (*a2 > *(_DWORD *)a1)
  {
    if (v4 > v3)
    {
      long long v5 = *a1;
      *a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    long long v8 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v8;
    if (*a3 <= *a2) {
      return 1;
    }
    long long v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v9;
    return 2;
  }
  if (v4 > v3)
  {
    long long v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v6;
    if (*a2 <= *(_DWORD *)a1) {
      return 1;
    }
    long long v7 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPCluster *,AVE_MultiPass::_S_AVE_MPClusterSortCount &>(unsigned int *a1, unsigned int *a2)
{
  long long v2 = *(_OWORD *)a1;
  unsigned int v3 = *(_OWORD *)a1;
  if (v3 <= *(a2 - 4))
  {
    long long v6 = a1 + 4;
    do
    {
      unsigned int v4 = v6;
      if (v6 >= a2) {
        break;
      }
      v6 += 4;
    }
    while (v3 <= *v4);
  }
  else
  {
    unsigned int v4 = a1;
    do
    {
      unsigned int v5 = v4[4];
      v4 += 4;
    }
    while (v3 <= v5);
  }
  if (v4 < a2)
  {
    do
    {
      unsigned int v7 = *(a2 - 4);
      a2 -= 4;
    }
    while (v3 > v7);
  }
  while (v4 < a2)
  {
    long long v11 = *(_OWORD *)v4;
    *(_OWORD *)unsigned int v4 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v11;
    do
    {
      unsigned int v8 = v4[4];
      v4 += 4;
    }
    while (v3 <= v8);
    do
    {
      unsigned int v9 = *(a2 - 4);
      a2 -= 4;
    }
    while (v3 > v9);
  }
  if (v4 - 4 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v4 - 1);
  }
  *((_OWORD *)v4 - 1) = v2;
  return v4;
}

long long *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPCluster *,AVE_MultiPass::_S_AVE_MPClusterSortCount &>(long long *a1, long long *a2)
{
  uint64_t v2 = 0;
  long long v3 = *a1;
  unsigned int v4 = *a1;
  do
    unsigned int v5 = a1[++v2];
  while (v4 < v5);
  long long v6 = &a1[v2];
  unsigned int v7 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v6 >= a2) {
        break;
      }
      unsigned int v9 = *((_DWORD *)a2-- - 4);
    }
    while (v4 >= v9);
  }
  else
  {
    do
      unsigned int v8 = *((_DWORD *)a2-- - 4);
    while (v4 >= v8);
  }
  if (v6 < a2)
  {
    uint64_t v10 = &a1[v2];
    long long v11 = a2;
    do
    {
      long long v12 = *v10;
      *uint64_t v10 = *v11;
      *long long v11 = v12;
      do
        unsigned int v13 = *((_DWORD *)v10++ + 4);
      while (v4 < v13);
      do
        unsigned int v14 = *((_DWORD *)v11-- - 4);
      while (v4 >= v14);
    }
    while (v10 < v11);
    unsigned int v7 = v10 - 1;
  }
  if (v7 != a1) {
    *a1 = *v7;
  }
  *unsigned int v7 = v3;
  return v7;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      long long v6 = (long long *)&a2[-1];
      if (a2[-1].n128_u32[0] > *(_DWORD *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((long long *)a1, (unsigned int *)(a1 + 16), (unsigned int *)&a2[-1]);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((long long *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32), (__n128 *)a2[-1].n128_u64);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((long long *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32), (__n128 *)(a1 + 48), a2 - 1);
      return 1;
    default:
      unsigned int v8 = (unsigned int *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((long long *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32));
      unsigned int v9 = (unsigned int *)(a1 + 48);
      if ((__n128 *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    long long v12 = *(_OWORD *)v9;
    unsigned int v13 = *(_OWORD *)v9;
    if (v13 > *v8)
    {
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unsigned int v15 = *(_DWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v13 <= v15)
        {
          unint64_t v16 = (_OWORD *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unint64_t v16 = (_OWORD *)a1;
LABEL_12:
      *unint64_t v16 = v12;
      if (++v11 == 8) {
        return v9 + 4 == (unsigned int *)a2;
      }
    }
    unsigned int v8 = v9;
    v10 += 16;
    v9 += 4;
    if (v9 == (unsigned int *)a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>(long long *a1, unsigned int *a2, unsigned int *a3, _OWORD *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>(a1, a2, a3);
  if (*(_DWORD *)a4 > *a3)
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 > *a2)
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 > *(_DWORD *)a1)
      {
        __n128 result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>(long long *a1, unsigned int *a2, unsigned int *a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>(a1, a2, a3, a4).n128_u64[0];
  if (a5->n128_u32[0] > a4->n128_u32[0])
  {
    __n128 result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (a4->n128_u32[0] > *a3)
    {
      __n128 result = *(__n128 *)a3;
      *(__n128 *)a3 = *a4;
      *a4 = result;
      if (*a3 > *a2)
      {
        __n128 result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (*a2 > *(_DWORD *)a1)
        {
          __n128 result = (__n128)*a1;
          *a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

long long *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *,AVE_MultiPass::_S_AVE_MPCluster *>(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    long long v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      long long v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    unsigned int v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if (*(_DWORD *)v14 > *(_DWORD *)a1)
        {
          long long v15 = *v14;
          *uint64_t v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      unsigned int v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v16 = (unint64_t)v8 >> 4;
      do
      {
        uint64_t v17 = 0;
        long long v30 = *a1;
        uint64_t v18 = a1;
        do
        {
          uint64_t v19 = (uint64_t)&v18[v17 + 1];
          uint64_t v20 = (2 * v17) | 1;
          uint64_t v21 = 2 * v17 + 2;
          if (v21 < v16 && *(_DWORD *)v19 > *(_DWORD *)(v19 + 16))
          {
            v19 += 16;
            uint64_t v20 = v21;
          }
          _OWORD *v18 = *(_OWORD *)v19;
          uint64_t v18 = (_OWORD *)v19;
          uint64_t v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if ((long long *)v19 == --v6)
        {
          *(_OWORD *)uint64_t v19 = v30;
        }
        else
        {
          *(_OWORD *)uint64_t v19 = *v6;
          long long *v6 = v30;
          uint64_t v22 = v19 - (void)a1 + 16;
          if (v22 >= 17)
          {
            unint64_t v23 = (((unint64_t)v22 >> 4) - 2) >> 1;
            uint64_t v24 = &a1[v23];
            uint64_t v25 = *(void *)v19;
            if (*(_DWORD *)v24 > *(void *)v19)
            {
              uint64_t v26 = *(void *)(v19 + 8);
              do
              {
                float v27 = v24;
                *(_OWORD *)uint64_t v19 = *v24;
                if (!v23) {
                  break;
                }
                unint64_t v23 = (v23 - 1) >> 1;
                uint64_t v24 = &a1[v23];
                uint64_t v19 = (uint64_t)v27;
              }
              while (*(_DWORD *)v24 > v25);
              *(void *)float v27 = v25;
              *((void *)v27 + 1) = v26;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>(uint64_t result, uint64_t a2, uint64_t a3, long long *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (long long *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      uint64_t v10 = *(void *)v8;
      if (v9 < a3 && v10 > *((void *)v8 + 2))
      {
        uint64_t v10 = *((void *)v8++ + 2);
        uint64_t v7 = v9;
      }
      long long v11 = *a4;
      unsigned int v12 = *a4;
      if (v12 >= v10)
      {
        do
        {
          unsigned int v13 = v8;
          *a4 = *v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v14 = (2 * v7) | 1;
          uint64_t v8 = (long long *)(result + 16 * v14);
          uint64_t v15 = 2 * v7 + 2;
          uint64_t v16 = *(void *)v8;
          if (v15 < a3 && v16 > *((void *)v8 + 2))
          {
            uint64_t v16 = *((void *)v8++ + 2);
            uint64_t v14 = v15;
          }
          a4 = v13;
          uint64_t v7 = v14;
        }
        while (v12 >= v16);
        *unsigned int v13 = v11;
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *,false>(__n128 *a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
void *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = (float *)result;
      do
      {
        char v5 = v2;
        uint64_t v6 = *((void *)v4 + 2);
        if (*((float *)&v6 + 1) < v4[1])
        {
          uint64_t v7 = *((void *)v4 + 3);
          uint64_t v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8) {
              break;
            }
            float v9 = *(float *)((char *)result + v8 - 12);
            v8 -= 16;
            if (*((float *)&v6 + 1) >= v9)
            {
              uint64_t v10 = (void *)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          uint64_t v10 = result;
LABEL_10:
          *uint64_t v10 = v6;
          v10[1] = v7;
        }
        uint64_t v2 = v5 + 2;
        v3 += 16;
        uint64_t v4 = (float *)v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 16;
    while (v2 != a2)
    {
      uint64_t v3 = v2;
      uint64_t v4 = *(void *)(result + 16);
      if (*((float *)&v4 + 1) < *(float *)(result + 4))
      {
        uint64_t v5 = *(void *)(result + 24);
        uint64_t v6 = v3;
        do
        {
          *(_OWORD *)uint64_t v6 = *(_OWORD *)(v6 - 16);
          float v7 = *(float *)(v6 - 28);
          v6 -= 16;
        }
        while (*((float *)&v4 + 1) < v7);
        *(void *)uint64_t v6 = v4;
        *(void *)(v6 + 8) = v5;
      }
      uint64_t v2 = v3 + 16;
      __n128 result = v3;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(float *a1, float *a2, float *a3)
{
  float v3 = a2[1];
  float v4 = a3[1];
  if (v3 < a1[1])
  {
    if (v4 < v3)
    {
      long long v5 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    long long v8 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v8;
    if (a3[1] >= a2[1]) {
      return 1;
    }
    long long v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    long long v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v6;
    if (a2[1] >= a1[1]) {
      return 1;
    }
    long long v7 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPCluster *,AVE_MultiPass::_S_AVE_MPClusterSortCenter &>(float *a1, float *a2)
{
  long long v2 = *(_OWORD *)a1;
  LODWORD(v3) = HIDWORD(*(void *)a1);
  if (v3 >= *(a2 - 3))
  {
    long long v7 = a1 + 4;
    do
    {
      unint64_t v5 = (unint64_t)v7;
      if (v7 >= a2) {
        break;
      }
      float v8 = v7[1];
      v7 += 4;
    }
    while (v3 >= v8);
  }
  else
  {
    float v4 = a1;
    do
    {
      unint64_t v5 = (unint64_t)(v4 + 4);
      float v6 = v4[5];
      v4 += 4;
    }
    while (v3 >= v6);
  }
  if (v5 >= (unint64_t)a2)
  {
    long long v9 = a2;
  }
  else
  {
    do
    {
      long long v9 = a2 - 4;
      float v10 = *(a2 - 3);
      a2 -= 4;
    }
    while (v3 < v10);
  }
  while (v5 < (unint64_t)v9)
  {
    long long v14 = *(_OWORD *)v5;
    *(_OWORD *)unint64_t v5 = *(_OWORD *)v9;
    *(_OWORD *)long long v9 = v14;
    do
    {
      float v11 = *(float *)(v5 + 20);
      v5 += 16;
    }
    while (v3 >= v11);
    do
    {
      float v12 = *(v9 - 3);
      v9 -= 4;
    }
    while (v3 < v12);
  }
  if ((float *)(v5 - 16) != a1) {
    *(_OWORD *)a1 = *(_OWORD *)(v5 - 16);
  }
  *(_OWORD *)(v5 - 16) = v2;
  return v5;
}

long long *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPCluster *,AVE_MultiPass::_S_AVE_MPClusterSortCenter &>(long long *a1, float *a2)
{
  uint64_t v2 = 0;
  long long v3 = *a1;
  LODWORD(v4) = HIDWORD(*(void *)a1);
  do
    float v5 = *((float *)&a1[++v2] + 1);
  while (v5 < v4);
  float v6 = (float *)&a1[v2];
  long long v7 = &a1[v2 - 1];
  if (v2 == 1)
  {
    while (v6 < a2)
    {
      float v8 = a2 - 4;
      float v10 = *(a2 - 3);
      a2 -= 4;
      if (v10 < v4) {
        goto LABEL_9;
      }
    }
    float v8 = a2;
  }
  else
  {
    do
    {
      float v8 = a2 - 4;
      float v9 = *(a2 - 3);
      a2 -= 4;
    }
    while (v9 >= v4);
  }
LABEL_9:
  if (v6 < v8)
  {
    unint64_t v11 = (unint64_t)v6;
    float v12 = v8;
    do
    {
      long long v13 = *(_OWORD *)v11;
      *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
      *(_OWORD *)float v12 = v13;
      do
      {
        float v14 = *(float *)(v11 + 20);
        v11 += 16;
      }
      while (v14 < v4);
      do
      {
        float v15 = *(v12 - 3);
        v12 -= 4;
      }
      while (v15 >= v4);
    }
    while (v11 < (unint64_t)v12);
    long long v7 = (long long *)(v11 - 16);
  }
  if (v7 != a1) {
    *a1 = *v7;
  }
  *long long v7 = v3;
  return v7;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(__n128 *a1, __n128 *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (a2[-1].n128_f32[1] < a1->n128_f32[1])
      {
        __n128 v6 = *a1;
        *a1 = a2[-1];
        a2[-1] = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>((float *)a1, (float *)&a1[1], (float *)&a2[-1]);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>((float *)a1, (uint64_t)&a1[1], (uint64_t)&a1[2], (uint64_t)&a2[-1]);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>((float *)a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      long long v7 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>((float *)a1, (float *)&a1[1], (float *)&a1[2]);
      float v8 = a1 + 3;
      if (&a1[3] == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    __n128 v11 = *v8;
    LODWORD(v12) = HIDWORD(v8->n128_u64[0]);
    if (v12 < v7->n128_f32[1])
    {
      uint64_t v13 = v9;
      while (1)
      {
        *(__n128 *)((char *)a1 + v13 + 48) = *(__n128 *)((char *)a1 + v13 + 32);
        if (v13 == -32) {
          break;
        }
        float v14 = *(float *)((char *)&a1[1].n128_f32[1] + v13);
        v13 -= 16;
        if (v12 >= v14)
        {
          float v15 = (__n128 *)((char *)a1 + v13 + 48);
          goto LABEL_12;
        }
      }
      float v15 = a1;
LABEL_12:
      *float v15 = v11;
      if (++v10 == 8) {
        return &v8[1] == a2;
      }
    }
    long long v7 = v8;
    v9 += 16;
    if (++v8 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(a1, (float *)a2, (float *)a3);
  result.n128_u32[0] = *(_DWORD *)(a4 + 4);
  if (result.n128_f32[0] < *(float *)(a3 + 4))
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    result.n128_u32[0] = *(_DWORD *)(a3 + 4);
    if (result.n128_f32[0] < *(float *)(a2 + 4))
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      result.n128_u32[0] = *(_DWORD *)(a2 + 4);
      if (result.n128_f32[0] < a1[1])
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(float *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  __n128 result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
  result.n128_u32[0] = a5->n128_u32[1];
  if (result.n128_f32[0] < a4->n128_f32[1])
  {
    __n128 result = *a4;
    *a4 = *a5;
    *a5 = result;
    result.n128_u32[0] = a4->n128_u32[1];
    if (result.n128_f32[0] < a3->n128_f32[1])
    {
      __n128 result = *a3;
      *a3 = *a4;
      *a4 = result;
      result.n128_u32[0] = a3->n128_u32[1];
      if (result.n128_f32[0] < a2->n128_f32[1])
      {
        __n128 result = *a2;
        *a2 = *a3;
        *a3 = result;
        result.n128_u32[0] = a2->n128_u32[1];
        if (result.n128_f32[0] < a1[1])
        {
          __n128 result = *(__n128 *)a1;
          *(__n128 *)a1 = *a2;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

long long *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *,AVE_MultiPass::_S_AVE_MPCluster *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  if ((long long *)a1 != a2)
  {
    __n128 v6 = a2;
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) >> 4;
    if ((uint64_t)a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      float v12 = (long long *)(a1 + 16 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      float v14 = v6;
      do
      {
        if (*((float *)v14 + 1) < *(float *)(a1 + 4))
        {
          long long v15 = *v14;
          *float v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(a1, a4, v9, (long long *)a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v16 = (unint64_t)v8 >> 4;
      do
      {
        uint64_t v17 = 0;
        long long v24 = *(_OWORD *)a1;
        uint64_t v18 = a1;
        do
        {
          uint64_t v19 = (_OWORD *)v18;
          v18 += 16 * v17 + 16;
          uint64_t v20 = 2 * v17;
          uint64_t v17 = (2 * v17) | 1;
          uint64_t v21 = v20 + 2;
          if (v21 < v16 && *(float *)(v18 + 4) < *(float *)(v18 + 20))
          {
            v18 += 16;
            uint64_t v17 = v21;
          }
          *uint64_t v19 = *(_OWORD *)v18;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if ((long long *)v18 == --v6)
        {
          *(_OWORD *)uint64_t v18 = v24;
        }
        else
        {
          *(_OWORD *)uint64_t v18 = *v6;
          long long *v6 = v24;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(a1, v18 + 16, a4, (v18 + 16 - a1) >> 4);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(uint64_t result, uint64_t a2, uint64_t a3, long long *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = result + 16 * v7;
      uint64_t v9 = v6 + 2;
      if (v9 < a3 && *(float *)(v8 + 4) < *(float *)(v8 + 20))
      {
        v8 += 16;
        uint64_t v7 = v9;
      }
      long long v10 = *a4;
      LODWORD(v11) = HIDWORD(*(void *)a4);
      if (*(float *)(v8 + 4) >= v11)
      {
        do
        {
          float v12 = (long long *)v8;
          *a4 = *(_OWORD *)v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v13 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          uint64_t v8 = result + 16 * v7;
          uint64_t v14 = v13 + 2;
          if (v14 < a3 && *(float *)(v8 + 4) < *(float *)(v8 + 20))
          {
            v8 += 16;
            uint64_t v7 = v14;
          }
          a4 = v12;
        }
        while (*(float *)(v8 + 4) >= v11);
        *float v12 = v10;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v5 = result + 16 * v4;
    uint64_t v7 = (_OWORD *)(a2 - 16);
    uint64_t v6 = *(void *)(a2 - 16);
    if (*(float *)(v5 + 4) < *((float *)&v6 + 1))
    {
      uint64_t v8 = *(void *)(a2 - 8);
      do
      {
        uint64_t v9 = (void *)v5;
        *uint64_t v7 = *(_OWORD *)v5;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v5 = result + 16 * v4;
        uint64_t v7 = v9;
      }
      while (*(float *)(v5 + 4) < *((float *)&v6 + 1));
      *uint64_t v9 = v6;
      v9[1] = v8;
    }
  }
  return result;
}

void std::vector<AVE_MultiPass::_S_AVE_MPCluster>::__append(char **a1, unint64_t a2)
{
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[1];
  if (a2 <= (v5 - v6) >> 4)
  {
    a1[1] = &v6[16 * a2];
  }
  else
  {
    uint64_t v7 = *a1;
    uint64_t v8 = v6 - *a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<_S_AVE_MultiPassStats *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - v7;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AVE_MultiPass::_S_AVE_MPCluster>>(v4, v12);
      uint64_t v7 = *a1;
      uint64_t v6 = a1[1];
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[16 * v10];
    long long v15 = &v13[16 * v12];
    uint64_t v16 = &v14[16 * a2];
    if (v6 != v7)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
        v14 -= 16;
        v6 -= 16;
      }
      while (v6 != v7);
      uint64_t v7 = *a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void *std::vector<AVE_MultiPass::_S_AVE_MPCluster>::__init_with_size[abi:ne180100]<AVE_MultiPass::_S_AVE_MPCluster*,AVE_MultiPass::_S_AVE_MPCluster*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<AVE_MultiPass::_S_AVE_MPCluster>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BA77D940(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<AVE_MultiPass::_S_AVE_MPCluster>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<_S_AVE_MultiPassStats *>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AVE_MultiPass::_S_AVE_MPCluster>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

char *AVE_PixelFmt_FindByType(int a1)
{
  uint64_t v1 = 0;
  while (*(_DWORD *)&gs_sAVE_PixelFormatConversion[v1] != a1)
  {
    v1 += 44;
    if (v1 == 3740) {
      return 0;
    }
  }
  return &gs_sAVE_PixelFormatConversion[v1];
}

uint64_t AVE_PixelFmt_GetNumberOfTypes(void)
{
  return 85;
}

uint64_t AVE_PixelFmt_FindType(_DWORD *a1)
{
  uint64_t v1 = 0;
  int v2 = a1[8];
  while (v2 != -1 && v2 != *(_DWORD *)&gs_sAVE_PixelFormatConversion[v1 + 32]
       || a1[6] != *(_DWORD *)&gs_sAVE_PixelFormatConversion[v1 + 24]
       || a1[3] != *(_DWORD *)&gs_sAVE_PixelFormatConversion[v1 + 12]
       || a1[1] != *(_DWORD *)&gs_sAVE_PixelFormatConversion[v1 + 4]
       || a1[2] != *(_DWORD *)&gs_sAVE_PixelFormatConversion[v1 + 8]
       || a1[4] != *(_DWORD *)&gs_sAVE_PixelFormatConversion[v1 + 16]
       || a1[5] != *(_DWORD *)&gs_sAVE_PixelFormatConversion[v1 + 20])
  {
    v1 += 44;
    if (v1 == 3740) {
      return 0;
    }
  }
  return *(unsigned int *)&gs_sAVE_PixelFormatConversion[v1];
}

uint64_t AVE_PS_CalcSizeOfhvcC(int a1, unsigned int *a2, int a3, int a4)
{
  int v12 = 0;
  uint64_t v4 = *a2;
  if ((int)v4 < 1)
  {
    int v6 = 23;
  }
  else
  {
    uint64_t v5 = a2 + 2;
    int v6 = 23;
    do
    {
      int v7 = v5[2];
      if (v7)
      {
        if (*v5 == a1)
        {
          uint64_t v8 = *(v5 - 1);
          if ((v8 - 1) <= 2)
          {
            if (!*((unsigned char *)&v12 + v8))
            {
              v6 += 3;
              *((unsigned char *)&v12 + v8) = 1;
            }
            int v6 = v6 + (v7 >> 3) - 2;
          }
        }
      }
      v5 += 4;
      --v4;
    }
    while (v4);
  }
  if (a3) {
    int v9 = a3 + 1;
  }
  else {
    int v9 = 0;
  }
  int v10 = a4 + 5;
  if (!a4) {
    int v10 = 0;
  }
  return (v10 + v9 + v6);
}

uint64_t AVE_PS_ComposeNALUArray(int a1, int a2, uint64_t a3, int *a4, uint64_t a5)
{
  if ((a2 - 1) > 2) {
    return 4294966295;
  }
  *(unsigned char *)a5 = a2 - 97;
  int v6 = *a4;
  if (*a4 < 1) {
    return 4294966295;
  }
  uint64_t v9 = 0;
  int v10 = 0;
  uint64_t v36 = a3 + 4;
  uint64_t result = 3;
  int v12 = "%lld %d AVE %s: %p: 0x%x";
  uint64_t v39 = a5;
  int v37 = a1;
  int v38 = a2;
  do
  {
    uint64_t v13 = &a4[4 * v9];
    unsigned int v14 = v13[4];
    if (v14)
    {
      long long v15 = v13 + 2;
      if (v13[2] == a1)
      {
        uint64_t v16 = v12;
        uint64_t v17 = v13 + 1;
        if (v13[1] == a2)
        {
          int v43 = v10;
          uint64_t v18 = v13 + 3;
          unsigned int v19 = (v14 >> 3) - 4;
          *(_WORD *)(a5 + (int)result) = bswap32(v19) >> 16;
          uint64_t v41 = (int)result + 2;
          unsigned __int16 v42 = v19;
          unint64_t v20 = (unsigned __int16)v19;
          memcpy((void *)(a5 + v41), (const void *)(v36 + (v13[3] >> 3)), (unsigned __int16)v19);
          if (AVE_Log_CheckLevel(0xD4u, 8))
          {
            int v21 = AVE_Log_CheckConsole(0xD4u);
            __uint64_t CurrTime = AVE_GetCurrTime();
            Leveluint64_t Str = AVE_Log_GetLevelStr(8);
            int v23 = *v15;
            if (v21)
            {
              printf("%lld %d AVE %s: type %d layer id %d\n", CurrTime, 212, LevelStr, *v17, v23);
              __uint64_t v24 = AVE_GetCurrTime();
              uint64_t v25 = AVE_Log_GetLevelStr(8);
              syslog(3, "%lld %d AVE %s: type %d layer id %d", v24, 212, v25, *v17, *v15);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: type %d layer id %d", CurrTime, 212, LevelStr, *v17, v23);
            }
          }
          int v12 = v16;
          if (v20)
          {
            for (unint64_t i = 0; i < v20; i += 2)
            {
              if (AVE_Log_CheckLevel(0xD4u, 8))
              {
                int v27 = AVE_Log_CheckConsole(0xD4u);
                __uint64_t v28 = AVE_GetCurrTime();
                long long v29 = AVE_Log_GetLevelStr(8);
                int v30 = *v18 >> 3;
                uint64_t v31 = a3 + v30;
                long long v32 = (const void *)(a3 + i + v30);
                uint64_t v33 = *(unsigned __int16 *)(v31 + i);
                if (v27)
                {
                  printf("%lld %d AVE %s: %p: 0x%x\n", v28, 212, v29, v32, v33);
                  __uint64_t v34 = AVE_GetCurrTime();
                  float v35 = AVE_Log_GetLevelStr(8);
                  syslog(3, v12, v34, 212, v35, a3 + i + (*v18 >> 3), *(unsigned __int16 *)(a3 + (*v18 >> 3) + i));
                }
                else
                {
                  syslog(3, v12, v28, 212, v29, v32, v33);
                }
              }
            }
          }
          uint64_t result = v41 + v42;
          int v10 = v43 + 1;
          int v6 = *a4;
          a5 = v39;
          a1 = v37;
          a2 = v38;
        }
        else
        {
          int v12 = v16;
        }
      }
    }
    ++v9;
  }
  while (v9 < v6);
  if (!v10) {
    return 4294966295;
  }
  *(_WORD *)(a5 + 1) = BYTE1(v10) | (unsigned __int16)((_WORD)v10 << 8);
  return result;
}

uint64_t AVE_PS_Compose_hvcC(int a1, uint64_t a2, unsigned int *a3, uint64_t a4, int a5, const void *a6, int a7, uint64_t a8, uint64_t a9, int a10)
{
  *(unsigned char *)a9 = 1;
  *(unsigned char *)(a9 + 1) = (*(unsigned char *)(a8 + 24) << 6) | (32 * (*(_DWORD *)(a8 + 28) != 0)) | *(_DWORD *)(a8 + 32);
  AVE_PS_Compose_general_profile_compatibility_flag(a8, a9 + 2, 4);
  AVE_PS_Compose_general_constraint_indicator_flags(a8, (unsigned char *)(a9 + 6), 6);
  *(unsigned char *)(a9 + 12) = *(_DWORD *)(a8 + 84);
  *(_WORD *)(a9 + 13) = 240;
  *(unsigned char *)(a9 + 15) = -4;
  *(unsigned char *)(a9 + 16) = *(unsigned char *)(a8 + 572) | 0xFC;
  *(unsigned char *)(a9 + 17) = *(unsigned char *)(a8 + 616) | 0xF8;
  *(unsigned char *)(a9 + 18) = *(unsigned char *)(a8 + 620) | 0xF8;
  *(_WORD *)(a9 + 19) = 0;
  *(unsigned char *)(a9 + 21) = 11;
  char v18 = AVE_PS_CalcNumOfNALU(a3, a1);
  char v19 = a4 != 0;
  if (a6) {
    ++v19;
  }
  *(unsigned char *)(a9 + 22) = v19 + v18;
  int v20 = AVE_PS_ComposeNALUArray(a1, 1, a2, (int *)a3, a9 + 23);
  if (v20 < 1) {
    return 4294966296;
  }
  uint64_t v21 = (v20 + 23);
  int v22 = AVE_PS_ComposeNALUArray(a1, 2, a2, (int *)a3, a9 + v21);
  if (v22 < 1) {
    return 4294966296;
  }
  uint64_t v23 = (v22 + v21);
  int v24 = AVE_PS_ComposeNALUArray(a1, 3, a2, (int *)a3, a9 + v23);
  if (v24 < 1) {
    return 4294966296;
  }
  unint64_t v25 = v24 + (unint64_t)v23;
  if (a4)
  {
    *(unsigned char *)(a9 + v25) = -89;
    uint64_t v26 = a9 + v25;
    *(_WORD *)(v26 + 1) = 256;
    int v27 = a5 - 4;
    *(_WORD *)(v26 + 3) = BYTE1(v27) | (unsigned __int16)((_WORD)v27 << 8);
    unint64_t v25 = (v25 + 5);
    memcpy((void *)(a9 + v25), (const void *)(a4 + 4), v27);
    LODWORD(v25) = v25 + v27;
  }
  if (a6)
  {
    uint64_t v28 = a9 + (int)v25;
    *(unsigned char *)uint64_t v28 = -89;
    *(_WORD *)(v28 + 1) = 256;
    *(_WORD *)(v28 + 3) = BYTE1(a7) | (unsigned __int16)((_WORD)a7 << 8);
    uint64_t v29 = (int)v25 + 5;
    memcpy((void *)(a9 + v29), a6, a7);
    LODWORD(v25) = v29 + a7;
  }
  if ((int)v25 <= a10) {
    return 0;
  }
  if (AVE_Log_CheckLevel(0xD4u, 4))
  {
    int v30 = AVE_Log_CheckConsole(0xD4u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(4);
    if (v30)
    {
      printf("%lld %d AVE %s: %s:%d offset > num %d > %d\n", CurrTime, 212, LevelStr, "AVE_PS_Compose_hvcC", 634, v25, a10);
      __uint64_t CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d offset > num %d > %d", CurrTime);
  }
  return 4294966277;
}

uint64_t AVE_PS_CalcNumOfNALU(unsigned int *a1, int a2)
{
  if (a1)
  {
    uint64_t v4 = *a1;
    if ((int)v4 < 1)
    {
      return 0;
    }
    else
    {
      LODWORD(result) = 0;
      int v6 = (int *)(a1 + 2);
      do
      {
        int v7 = *v6;
        v6 += 4;
        if (v7 == a2) {
          uint64_t result = (result + 1);
        }
        else {
          uint64_t result = result;
        }
        --v4;
      }
      while (v4);
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xD4u, 4))
    {
      int v8 = AVE_Log_CheckConsole(0xD4u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d\n", CurrTime, 212, LevelStr, "AVE_PS_CalcNumOfNALU", 369, "pInfo != __null", 0, a2);
        __uint64_t CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d", CurrTime, 212);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t AVE_PS_CalcSizeOflhvC(int a1, unsigned int *a2)
{
  int v8 = 0;
  uint64_t v2 = *a2;
  if ((int)v2 < 1) {
    return 6;
  }
  long long v3 = a2 + 2;
  uint64_t v4 = 6;
  do
  {
    int v5 = v3[2];
    if (v5)
    {
      if (*v3 == a1)
      {
        uint64_t v6 = *(v3 - 1);
        if ((v6 & 0xFFFFFFFE) == 2)
        {
          if (!*((unsigned char *)&v8 + v6))
          {
            LODWORD(v4) = v4 + 3;
            *((unsigned char *)&v8 + v6) = 1;
          }
          uint64_t v4 = (v4 + (v5 >> 3) - 2);
        }
      }
    }
    v3 += 4;
    --v2;
  }
  while (v2);
  return v4;
}

uint64_t AVE_PS_Compose_lhvC(int a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, int a6)
{
  *(_DWORD *)a5 = -67047423;
  *(unsigned char *)(a5 + 4) = -53;
  *(unsigned char *)(a5 + 5) = AVE_PS_CalcNumOfNALU(a3, a1);
  int v11 = AVE_PS_ComposeNALUArray(a1, 2, a2, (int *)a3, a5 + 6);
  if (v11 < 1) {
    return 4294966296;
  }
  uint64_t v12 = (v11 + 6);
  int v13 = AVE_PS_ComposeNALUArray(a1, 3, a2, (int *)a3, a5 + v12);
  if (v13 < 1) {
    return 4294966296;
  }
  if (v13 + (int)v12 <= a6) {
    return 0;
  }
  return 4294966277;
}

uint64_t AVE_PS_Make_hvcC(uint64_t a1, const void *a2, unsigned int *a3, const void *a4, uint64_t a5, const void *a6, int a7, const void *a8, __CFData **a9)
{
  if (!a2 || !a3 || !a8 || !a9 || (a4 == 0) != (a5 == 0))
  {
    if (AVE_Log_CheckLevel(0xD4u, 4))
    {
      int v15 = AVE_Log_CheckConsole(0xD4u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %d %p %p %p %d %p %p\n", CurrTime, 212, LevelStr, "AVE_PS_Make_hvcC", 961, "pInData != __null && pInfo != __null && pSPS != __null && ppCFData != __null && !((pSEIData == __null) ^ (SEISize == 0))", a1, a2, a3, a4, a5, a8, a9);
        __uint64_t CurrTime = AVE_GetCurrTime();
        int v66 = a8;
        __uint64_t v68 = a9;
        int v62 = a4;
        uint64_t v64 = a5;
        __uint64_t v58 = a2;
        __uint64_t v60 = a3;
        uint64_t v56 = a1;
        uint64_t v53 = AVE_Log_GetLevelStr(4);
      }
      else
      {
        int v66 = a8;
        __uint64_t v68 = a9;
        int v62 = a4;
        uint64_t v64 = a5;
        __uint64_t v58 = a2;
        __uint64_t v60 = a3;
        uint64_t v56 = a1;
        uint64_t v53 = LevelStr;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %d %p %p %p %d %p %p", CurrTime, 212, v53, "AVE_PS_Make_hvcC", 961, "pInData != __null && pInfo != __null && pSPS != __null && ppCFData != __null && !((pSEIData == __null) ^ (SEISize == 0))", v56, v58, v60, v62, v64, v66, v68);
    }
    return 4294966296;
  }
  *a9 = 0;
  uint64_t v20 = AVE_PS_CalcSizeOfhvcC(a1, a3, a5, a7);
  uint64_t v21 = v20;
  if ((int)v20 <= 0)
  {
    if (AVE_Log_CheckLevel(0xD4u, 4))
    {
      uint64_t v33 = a1;
      int v34 = AVE_Log_CheckConsole(0xD4u);
      __uint64_t v35 = AVE_GetCurrTime();
      uint64_t v36 = AVE_Log_GetLevelStr(4);
      if (v34)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to calculate the size %d %p %p %p %d %p %d\n", v35, 212, v36, "AVE_PS_Make_hvcC", 968, "size > 0", v33, a2, a3, a4, a5, a8, v21);
        __uint64_t v35 = AVE_GetCurrTime();
        unsigned int v67 = a8;
        uint64_t v69 = v21;
        uint64_t v63 = a4;
        uint64_t v65 = a5;
        long long v59 = a2;
        __uint64_t v61 = a3;
        uint64_t v57 = v33;
        long long v55 = AVE_Log_GetLevelStr(4);
      }
      else
      {
        unsigned int v67 = a8;
        uint64_t v69 = v21;
        uint64_t v63 = a4;
        uint64_t v65 = a5;
        long long v59 = a2;
        __uint64_t v61 = a3;
        uint64_t v57 = v33;
        long long v55 = v36;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to calculate the size %d %p %p %p %d %p %d", v35, 212, v55, "AVE_PS_Make_hvcC", 968, "size > 0", v57, v59, v61, v63, v65, v67, v69);
    }
    return 4294966296;
  }
  uint64_t v72 = a1;
  CFIndex v22 = v20;
  CFMutableDataRef Mutable = CFDataCreateMutable(0, v20);
  if (Mutable)
  {
    int v70 = v21;
    int v24 = Mutable;
    CFDataSetLength(Mutable, v22);
    uint64_t v71 = v24;
    MutableBytePtr = CFDataGetMutableBytePtr(v24);
    if (MutableBytePtr)
    {
      uint64_t v26 = MutableBytePtr;
      uint64_t v27 = AVE_PS_Compose_hvcC(v72, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, (uint64_t)a8, (uint64_t)MutableBytePtr, v70);
      if (AVE_Log_CheckLevel(0xD4u, 8))
      {
        int v28 = AVE_Log_CheckConsole(0xD4u);
        __uint64_t v29 = AVE_GetCurrTime();
        int v30 = AVE_Log_GetLevelStr(8);
        if (v28)
        {
          printf("%lld %d AVE %s: hvcC data:\n", v29, 212, v30);
          __uint64_t v31 = AVE_GetCurrTime();
          long long v54 = AVE_Log_GetLevelStr(8);
          syslog(3, "%lld %d AVE %s: hvcC data:", v31, 212, v54);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: hvcC data:", v29, 212, v30);
        }
      }
      uint64_t v47 = 0;
      do
      {
        if (AVE_Log_CheckLevel(0xD4u, 8))
        {
          int v48 = AVE_Log_CheckConsole(0xD4u);
          __uint64_t v49 = AVE_GetCurrTime();
          uint64_t v50 = AVE_Log_GetLevelStr(8);
          int v51 = *(unsigned __int16 *)&v26[v47];
          if (v48)
          {
            printf("%lld %d AVE %s: %p: 0x%x\n", v49, 212, v50, &v26[v47], v51);
            __uint64_t v49 = AVE_GetCurrTime();
            uint64_t v50 = AVE_Log_GetLevelStr(8);
            int v51 = *(unsigned __int16 *)&v26[v47];
          }
          syslog(3, "%lld %d AVE %s: %p: 0x%x", v49, 212, v50, &v26[v47], v51);
        }
        v47 += 2;
      }
      while (v70 > (int)v47);
      uint64_t v52 = v24;
      *a9 = v24;
      if (!v27) {
        return v27;
      }
    }
    else if (AVE_Log_CheckLevel(0xD4u, 4))
    {
      int v42 = AVE_Log_CheckConsole(0xD4u);
      __uint64_t v43 = AVE_GetCurrTime();
      unint64_t v44 = AVE_Log_GetLevelStr(4);
      if (v42)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to get memory address %d %p %p %p %d %p %p %d\n", v43, 212, v44, "AVE_PS_Make_hvcC", 980, "pData != __null", v72, a2, a3, a4, a5, a8, v24, v70);
        __uint64_t v45 = AVE_GetCurrTime();
        unint64_t v46 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get memory address %d %p %p %p %d %p %p %d", v45, 212, v46, "AVE_PS_Make_hvcC", 980, "pData != __null", v72, a2, a3, a4, a5, a8, v71, v70);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get memory address %d %p %p %p %d %p %p %d", v43, 212, v44, "AVE_PS_Make_hvcC", 980, "pData != __null", v72, a2, a3, a4, a5, a8, v24, v70);
      }
      uint64_t v52 = v71;
      uint64_t v27 = 4294966293;
    }
    else
    {
      uint64_t v27 = 4294966293;
      uint64_t v52 = v24;
    }
    CFRelease(v52);
    return v27;
  }
  if (AVE_Log_CheckLevel(0xD4u, 4))
  {
    int v37 = AVE_Log_CheckConsole(0xD4u);
    __uint64_t v38 = AVE_GetCurrTime();
    uint64_t v39 = AVE_Log_GetLevelStr(4);
    if (v37)
    {
      printf("%lld %d AVE %s: %s:%d %s | failed to allocate memory %d %p %p %p %d %p %d\n", v38, 212, v39, "AVE_PS_Make_hvcC", 973, "pCFData != __null", v72, a2, a3, a4, a5, a8, v21);
      __uint64_t v40 = AVE_GetCurrTime();
      uint64_t v41 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to allocate memory %d %p %p %p %d %p %d", v40, 212, v41, "AVE_PS_Make_hvcC", 973, "pCFData != __null", v72);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to allocate memory %d %p %p %p %d %p %d", v38, 212, v39, "AVE_PS_Make_hvcC", 973, "pCFData != __null", v72);
    }
  }
  return 4294966293;
}

uint64_t AVE_PS_Make_hvcC_Dict(uint64_t a1, const void *a2, unsigned int *a3, const void *a4, uint64_t a5, const void *a6, int a7, const void *a8, __CFDictionary **a9)
{
  int v10 = a5;
  __uint64_t v45 = 0;
  if (!a2 || !a3 || !a8 || !a9 || (a4 == 0) != (a5 == 0))
  {
    if (AVE_Log_CheckLevel(0xD4u, 4))
    {
      int v15 = AVE_Log_CheckConsole(0xD4u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %d %p %p %p %d %p %p\n", CurrTime, 212, LevelStr, "AVE_PS_Make_hvcC_Dict", 1039, "pInData != __null && pInfo != __null && pSPS != __null && ppCFDict != __null && !((pSEIData == __null) ^ (SEISize == 0))", a1, a2, a3, a4, v10, a8, a9);
        __uint64_t v18 = AVE_GetCurrTime();
        int v42 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %d %p %p %p %d %p %p", v18, 212, v42, "AVE_PS_Make_hvcC_Dict", 1039, "pInData != __null && pInfo != __null && pSPS != __null && ppCFDict != __null && !((pSEIData == __null) ^ (SEISize == 0))", a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %d %p %p %p %d %p %p", CurrTime, 212, LevelStr, "AVE_PS_Make_hvcC_Dict", 1039, "pInData != __null && pInfo != __null && pSPS != __null && ppCFDict != __null && !((pSEIData == __null) ^ (SEISize == 0))", a1);
      }
    }
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 4294966296;
    goto LABEL_29;
  }
  *a9 = 0;
  int hvcC = AVE_PS_Make_hvcC(a1, a2, a3, a4, a5, a6, a7, a8, &v45);
  if (hvcC)
  {
    int v20 = hvcC;
    if (AVE_Log_CheckLevel(0xD4u, 4))
    {
      int v21 = AVE_Log_CheckConsole(0xD4u);
      __uint64_t v22 = AVE_GetCurrTime();
      uint64_t v23 = AVE_Log_GetLevelStr(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to compose %d %p %p %p %d %p %p %d\n", v22, 212, v23, "AVE_PS_Make_hvcC_Dict", 1047, "ret == 0", a1, a2, a3, a4, v10, a8, a9, v20);
        int v24 = a2;
        __uint64_t v25 = AVE_GetCurrTime();
        __uint64_t v43 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to compose %d %p %p %p %d %p %p %d", v25, 212, v43, "AVE_PS_Make_hvcC_Dict", 1047, "ret == 0", a1, v24);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to compose %d %p %p %p %d %p %p %d", v22, 212, v23, "AVE_PS_Make_hvcC_Dict", 1047, "ret == 0", a1, a2);
      }
    }
  }
  else
  {
    CFAllocatorRef v29 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDataRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      uint64_t v26 = Mutable;
      CFDictionaryAddValue(Mutable, @"hvcC", v45);
      __uint64_t v31 = CFDictionaryCreateMutable(v29, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v31)
      {
        uint64_t v27 = v31;
        CFDictionaryAddValue(v31, (const void *)*MEMORY[0x1E4F1EE20], v26);
        CFDictionaryAddValue(v27, (const void *)*MEMORY[0x1E4F1EDA8], @"HEVC");
        char v32 = 0;
        uint64_t v28 = 0;
        *a9 = v27;
        goto LABEL_30;
      }
      if (AVE_Log_CheckLevel(0xD4u, 4))
      {
        int v36 = AVE_Log_CheckConsole(0xD4u);
        __uint64_t v37 = AVE_GetCurrTime();
        __uint64_t v38 = AVE_Log_GetLevelStr(4);
        if (v36)
        {
          printf("%lld %d AVE %s: %s:%d %s | failed to create dictionary %d %p %p %p %d %p %p\n", v37, 212, v38, "AVE_PS_Make_hvcC_Dict", 1061, "pDict != __null", a1, a2, a3, a4, v10, a8, v26);
          __uint64_t v39 = AVE_GetCurrTime();
          unint64_t v44 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create dictionary %d %p %p %p %d %p %p", v39, 212, v44, "AVE_PS_Make_hvcC_Dict", 1061, "pDict != __null", a1);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create dictionary %d %p %p %p %d %p %p", v37, 212, v38, "AVE_PS_Make_hvcC_Dict", 1061, "pDict != __null", a1);
        }
      }
      goto LABEL_28;
    }
    if (AVE_Log_CheckLevel(0xD4u, 4))
    {
      int v33 = AVE_Log_CheckConsole(0xD4u);
      __uint64_t v34 = AVE_GetCurrTime();
      __uint64_t v35 = AVE_Log_GetLevelStr(4);
      if (v33)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to create data dictionary %d %p %p %p %d %p %p\n", v34, 212, v35, "AVE_PS_Make_hvcC_Dict", 1053, "pDataDict != __null", a1, a2, a3, a4, v10, a8, v45);
        __uint64_t v34 = AVE_GetCurrTime();
        __uint64_t v35 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create data dictionary %d %p %p %p %d %p %p", v34, 212, v35, "AVE_PS_Make_hvcC_Dict", 1053, "pDataDict != __null", a1);
    }
  }
  uint64_t v26 = 0;
LABEL_28:
  uint64_t v27 = 0;
  uint64_t v28 = 4294966293;
LABEL_29:
  char v32 = 1;
LABEL_30:
  if (v45)
  {
    CFRelease(v45);
    __uint64_t v45 = 0;
  }
  if (v26) {
    CFRelease(v26);
  }
  char v40 = v32 ^ 1;
  if (!v27) {
    char v40 = 1;
  }
  if ((v40 & 1) == 0) {
    CFRelease(v27);
  }
  return v28;
}

uint64_t AVE_PS_Make_lhvC(uint64_t a1, const void *a2, unsigned int *a3, const void *a4, __CFData **a5)
{
  if (!a2 || !a3 || !a4 || !a5)
  {
    if (AVE_Log_CheckLevel(0xD4u, 4))
    {
      int v21 = AVE_Log_CheckConsole(0xD4u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %d %p %p %p %p\n", CurrTime, 212, LevelStr, "AVE_PS_Make_lhvC", 1118, "pInData != __null && pInfo != __null && pSPS != __null && ppCFData != __null", a1, a2, a3, a4, a5);
        __uint64_t CurrTime = AVE_GetCurrTime();
        uint64_t v52 = a4;
        long long v54 = a5;
        int v48 = a2;
        uint64_t v50 = a3;
        uint64_t v46 = a1;
        int v42 = AVE_Log_GetLevelStr(4);
      }
      else
      {
        uint64_t v52 = a4;
        long long v54 = a5;
        int v48 = a2;
        uint64_t v50 = a3;
        uint64_t v46 = a1;
        int v42 = LevelStr;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %d %p %p %p %p", CurrTime, 212, v42, "AVE_PS_Make_lhvC", 1118, "pInData != __null && pInfo != __null && pSPS != __null && ppCFData != __null", v46, v48, v50, v52, v54);
    }
    return 4294966296;
  }
  *a5 = 0;
  uint64_t v10 = AVE_PS_CalcSizeOflhvC(a1, a3);
  if ((int)v10 <= 0)
  {
    if (AVE_Log_CheckLevel(0xD4u, 4))
    {
      int v24 = AVE_Log_CheckConsole(0xD4u);
      __uint64_t v25 = AVE_GetCurrTime();
      uint64_t v26 = AVE_Log_GetLevelStr(4);
      if (v24)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to calculate the size %d %p %p %p %d\n", v25, 212, v26, "AVE_PS_Make_lhvC", 1125, "size > 0", a1, a2, a3, a4, v10);
        __uint64_t v25 = AVE_GetCurrTime();
        uint64_t v53 = a4;
        uint64_t v55 = v10;
        __uint64_t v49 = a2;
        int v51 = a3;
        uint64_t v47 = a1;
        __uint64_t v43 = AVE_Log_GetLevelStr(4);
      }
      else
      {
        uint64_t v53 = a4;
        uint64_t v55 = v10;
        __uint64_t v49 = a2;
        int v51 = a3;
        uint64_t v47 = a1;
        __uint64_t v43 = v26;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to calculate the size %d %p %p %p %d", v25, 212, v43, "AVE_PS_Make_lhvC", 1125, "size > 0", v47, v49, v51, v53, v55);
    }
    return 4294966296;
  }
  CFMutableDataRef Mutable = CFDataCreateMutable(0, v10);
  if (Mutable)
  {
    uint64_t v12 = Mutable;
    CFDataSetLength(Mutable, v10);
    MutableBytePtr = CFDataGetMutableBytePtr(v12);
    if (MutableBytePtr)
    {
      int v15 = MutableBytePtr;
      uint64_t v56 = v12;
      uint64_t v16 = AVE_PS_Compose_lhvC(a1, (uint64_t)a2, a3, v14, (uint64_t)MutableBytePtr, v10);
      if (AVE_Log_CheckLevel(0xD4u, 8))
      {
        int v17 = AVE_Log_CheckConsole(0xD4u);
        __uint64_t v18 = AVE_GetCurrTime();
        char v19 = AVE_Log_GetLevelStr(8);
        if (v17)
        {
          printf("%lld %d AVE %s: lhvC data:\n", v18, 212, v19);
          __uint64_t v20 = AVE_GetCurrTime();
          uint64_t v41 = AVE_Log_GetLevelStr(8);
          syslog(3, "%lld %d AVE %s: lhvC data:", v20, 212, v41);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: lhvC data:", v18, 212, v19);
        }
      }
      uint64_t v36 = 0;
      do
      {
        if (AVE_Log_CheckLevel(0xD4u, 8))
        {
          int v37 = AVE_Log_CheckConsole(0xD4u);
          __uint64_t v38 = AVE_GetCurrTime();
          __uint64_t v39 = AVE_Log_GetLevelStr(8);
          int v40 = *(unsigned __int16 *)&v15[v36];
          if (v37)
          {
            printf("%lld %d AVE %s: %p: 0x%x\n", v38, 212, v39, &v15[v36], v40);
            __uint64_t v38 = AVE_GetCurrTime();
            __uint64_t v39 = AVE_Log_GetLevelStr(8);
            int v40 = *(unsigned __int16 *)&v15[v36];
          }
          syslog(3, "%lld %d AVE %s: %p: 0x%x", v38, 212, v39, &v15[v36], v40);
        }
        v36 += 2;
      }
      while ((int)v10 > (int)v36);
      uint64_t v12 = v56;
      *a5 = v56;
      if (!v16) {
        return v16;
      }
    }
    else
    {
      if (AVE_Log_CheckLevel(0xD4u, 4))
      {
        int v31 = AVE_Log_CheckConsole(0xD4u);
        __uint64_t v32 = AVE_GetCurrTime();
        int v33 = AVE_Log_GetLevelStr(4);
        if (v31)
        {
          printf("%lld %d AVE %s: %s:%d %s | failed to get memory address %d %p %p %p %p %d\n", v32, 212, v33, "AVE_PS_Make_lhvC", 1137, "pData != __null", a1, a2, a3, a4, v12, v10);
          __uint64_t v34 = AVE_GetCurrTime();
          __uint64_t v45 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get memory address %d %p %p %p %p %d", v34, 212, v45, "AVE_PS_Make_lhvC", 1137, "pData != __null");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get memory address %d %p %p %p %p %d", v32, 212, v33, "AVE_PS_Make_lhvC", 1137, "pData != __null");
        }
      }
      uint64_t v16 = 4294966293;
    }
    CFRelease(v12);
    return v16;
  }
  if (AVE_Log_CheckLevel(0xD4u, 4))
  {
    int v27 = AVE_Log_CheckConsole(0xD4u);
    __uint64_t v28 = AVE_GetCurrTime();
    CFAllocatorRef v29 = AVE_Log_GetLevelStr(4);
    if (v27)
    {
      printf("%lld %d AVE %s: %s:%d %s | failed to allocate memory %d %p %p %p %d\n", v28, 212, v29, "AVE_PS_Make_lhvC", 1130, "pCFData != __null", a1, a2, a3, a4, v10);
      __uint64_t v30 = AVE_GetCurrTime();
      unint64_t v44 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to allocate memory %d %p %p %p %d", v30, 212, v44, "AVE_PS_Make_lhvC", 1130);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to allocate memory %d %p %p %p %d", v28, 212, v29, "AVE_PS_Make_lhvC", 1130);
    }
  }
  return 4294966293;
}

uint64_t AVE_PS_Add_lhvC_Dict(uint64_t a1, const void *a2, unsigned int *a3, const void *a4, __CFData *a5)
{
  int v40 = 0;
  if (a2 && a3 && a4 && a5)
  {
    uint64_t lhvC = AVE_PS_Make_lhvC(a1, a2, a3, a4, &v40);
    if (lhvC)
    {
      uint64_t v11 = lhvC;
      if (!AVE_Log_CheckLevel(0xD4u, 4))
      {
LABEL_18:
        uint64_t v23 = 4294966293;
        goto LABEL_19;
      }
      int v12 = AVE_Log_CheckConsole(0xD4u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (!v12)
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to compose %d %p %p %p %p %d", CurrTime, 212, LevelStr, "AVE_PS_Add_lhvC_Dict", 1270, "ret == 0");
        goto LABEL_18;
      }
      uint64_t v15 = a1;
      printf("%lld %d AVE %s: %s:%d %s | failed to compose %d %p %p %p %p %d\n", CurrTime, 212, LevelStr, "AVE_PS_Add_lhvC_Dict", 1270, "ret == 0", a1, a2, a3, a4, a5, v11);
      __uint64_t v16 = AVE_GetCurrTime();
      __uint64_t v38 = a5;
      uint64_t v39 = v11;
      uint64_t v36 = a3;
      int v37 = a4;
      uint64_t v34 = v15;
      __uint64_t v35 = a2;
      uint64_t v32 = 1270;
      int v33 = "ret == 0";
      __uint64_t v30 = AVE_Log_GetLevelStr(4);
      int v17 = "%lld %d AVE %s: %s:%d %s | failed to compose %d %p %p %p %p %d";
    }
    else
    {
      CFStringRef Value = (__CFDictionary *)CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E4F1EE20]);
      if (Value)
      {
        CFDictionaryAddValue(Value, @"lhvC", v40);
        uint64_t v23 = 0;
        goto LABEL_19;
      }
      if (!AVE_Log_CheckLevel(0xD4u, 4)) {
        goto LABEL_18;
      }
      int v25 = AVE_Log_CheckConsole(0xD4u);
      __uint64_t v26 = AVE_GetCurrTime();
      int v27 = AVE_Log_GetLevelStr(4);
      if (!v25)
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get data dictionary %d %p %p %p %p", v26, 212, v27, "AVE_PS_Add_lhvC_Dict", 1276);
        goto LABEL_18;
      }
      uint64_t v28 = a1;
      printf("%lld %d AVE %s: %s:%d %s | failed to get data dictionary %d %p %p %p %p\n", v26, 212, v27, "AVE_PS_Add_lhvC_Dict", 1276, "pDataDict != __null", a1, a2, a3, a4, v40);
      __uint64_t v16 = AVE_GetCurrTime();
      CFAllocatorRef v29 = AVE_Log_GetLevelStr(4);
      int v37 = a4;
      __uint64_t v38 = v40;
      __uint64_t v35 = a2;
      uint64_t v36 = a3;
      int v33 = "pDataDict != __null";
      uint64_t v34 = v28;
      uint64_t v32 = 1276;
      __uint64_t v30 = v29;
      int v17 = "%lld %d AVE %s: %s:%d %s | failed to get data dictionary %d %p %p %p %p";
    }
    syslog(3, v17, v16, 212, v30, "AVE_PS_Add_lhvC_Dict", v32, v33, v34, v35, v36, v37, v38, v39);
    goto LABEL_18;
  }
  if (AVE_Log_CheckLevel(0xD4u, 4))
  {
    int v18 = AVE_Log_CheckConsole(0xD4u);
    __uint64_t v19 = AVE_GetCurrTime();
    __uint64_t v20 = AVE_Log_GetLevelStr(4);
    if (v18)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameters %d %p %p %p %p\n", v19, 212, v20, "AVE_PS_Add_lhvC_Dict", 1265, "pInData != __null && pInfo != __null && pSPS != __null && pCFDict != __null", a1, a2, a3, a4, a5);
      __uint64_t v21 = AVE_GetCurrTime();
      int v31 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %d %p %p %p %p", v21, 212, v31, "AVE_PS_Add_lhvC_Dict", 1265);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %d %p %p %p %p", v19, 212, v20, "AVE_PS_Add_lhvC_Dict", 1265);
    }
  }
  uint64_t v23 = 4294966296;
LABEL_19:
  if (v40) {
    CFRelease(v40);
  }
  return v23;
}

uint64_t AVE_PS_Compose_general_profile_compatibility_flag(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 < 4) {
    return 4294966277;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  do
  {
    *(unsigned char *)(a2 + v5) |= *(unsigned char *)(a1 + 36 + v4) << (v4 & 7 ^ 7);
    if ((v4 & 7) == 7) {
      ++v5;
    }
    ++v4;
  }
  while (v4 != 32);
  return 4;
}

uint64_t AVE_PS_Compose_general_constraint_indicator_flags(uint64_t a1, unsigned char *a2, int a3)
{
  if (a3 < 6) {
    return 4294966277;
  }
  bzero(a2, a3);
  char v7 = (*(unsigned char *)(a1 + 69) << 6) | (*(unsigned char *)(a1 + 68) << 7) | (32 * *(unsigned char *)(a1 + 70)) | (16 * *(unsigned char *)(a1 + 71));
  *a2 = v7;
  int v8 = *(_DWORD *)(a1 + 32);
  if (v8 == 4
    || v8 == 5
    || *(unsigned char *)(a1 + 40)
    || v8 == 6
    || *(unsigned char *)(a1 + 41)
    || v8 == 7
    || *(unsigned char *)(a1 + 42)
    || v8 == 8
    || *(unsigned char *)(a1 + 43)
    || v8 == 9
    || *(unsigned char *)(a1 + 44)
    || v8 == 10
    || *(unsigned char *)(a1 + 45)
    || v8 == 11
    || *(unsigned char *)(a1 + 46)
    || *(unsigned char *)(a1 + 47))
  {
    *a2 = (8 * *(unsigned char *)(a1 + 72)) | (4 * *(unsigned char *)(a1 + 73)) | (2 * *(unsigned char *)(a1 + 74)) | *(unsigned char *)(a1 + 75) | v7;
    v6.i32[0] = *(_DWORD *)(a1 + 76);
    uint16x4_t v9 = vshl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v6), (uint16x4_t)0x4000500060007);
    int v10 = v9.i32[0] | v9.i32[1] | ((*(void *)&v9 | HIDWORD(*(void *)&v9)) >> 16) | (8 * *(unsigned __int8 *)(a1 + 80));
  }
  else
  {
    if (v8 != 2 && !*(unsigned char *)(a1 + 38)) {
      return 5;
    }
    LOBYTE(v10) = 16 * *(unsigned char *)(a1 + 79);
  }
  a2[1] = v10;
  return 5;
}

uint64_t AVE_PS_ParseAVC(unsigned __int8 *a1, int a2, int a3, int *a4)
{
  if (a2 < 1)
  {
    int v4 = 0;
  }
  else
  {
    int v4 = 0;
    int v5 = 0;
    int v6 = -3;
    uint64_t v7 = a2;
    do
    {
      int v8 = *a1++;
      int v5 = v8 | (v5 << 8);
      if (v5 == 1)
      {
        if (v4 < a3) {
          int v9 = 2;
        }
        else {
          int v9 = 3;
        }
        int v10 = &a4[4 * v4];
        v10[1] = v9;
        v10[2] = v4 % a3;
        v10[3] = v6;
        if (v4 >= 1) {
          a4[4 * (v4 - 1) + 4] = v6 - a4[4 * (v4 - 1) + 3];
        }
        ++v4;
      }
      ++v6;
      --v7;
    }
    while (v7);
    if (v4 >= 1) {
      a4[4 * v4 + 4] = a2 - a4[4 * v4 + 3];
    }
  }
  *a4 = v4;
  return 0;
}

uint64_t AVE_PS_ParseHEVC(unsigned __int8 *a1, int a2, int a3, int *a4)
{
  if (a2 < 1)
  {
    int v4 = 0;
  }
  else
  {
    int v4 = 0;
    int v5 = 0;
    int v6 = -3;
    uint64_t v7 = a2;
    do
    {
      int v8 = *a1++;
      int v5 = v8 | (v5 << 8);
      if (v5 == 1)
      {
        if (v4)
        {
          if (v4 <= a3) {
            int v9 = 2;
          }
          else {
            int v9 = 3;
          }
          int v10 = (v4 - 1) % a3;
        }
        else
        {
          int v10 = 0;
          int v9 = 1;
        }
        uint64_t v11 = &a4[4 * v4];
        v11[1] = v9;
        v11[2] = v10;
        v11[3] = v6;
        if (v4 >= 1) {
          a4[4 * (v4 - 1) + 4] = v6 - a4[4 * (v4 - 1) + 3];
        }
        ++v4;
      }
      ++v6;
      --v7;
    }
    while (v7);
    if (v4 >= 1) {
      a4[4 * v4 + 4] = a2 - a4[4 * v4 + 3];
    }
  }
  *a4 = v4;
  return 0;
}

uint64_t AVE_PS_Parse(unsigned __int8 *a1, int a2, int a3, int a4, int *a5)
{
  if (a3 == 1)
  {
    AVE_PS_ParseHEVC(a1, a2, a4, a5);
    return 0;
  }
  if (!a3)
  {
    AVE_PS_ParseAVC(a1, a2, a4, a5);
    return 0;
  }
  return 4294966295;
}

uint64_t AVE_PixelFmt_GetSupportedList(int a1, uint64_t a2, int a3, int a4, uint64_t a5, _DWORD *a6)
{
  uint64_t result = 4294966295;
  if (!a5 || !a6)
  {
LABEL_8:
    if (!a6) {
      return result;
    }
    goto LABEL_9;
  }
  int v13 = (int *)AVE_DevCap_FindByType(a1);
  if (!v13)
  {
    uint64_t result = 4294966294;
    goto LABEL_8;
  }
  PixelFmt = AVE_DevCap_FindPixelFmt(*v13, a2, a4);
  if (PixelFmt)
  {
    uint64_t result = AVE_DevCap_PixelFmt_FindList(PixelFmt, a3, a5, a6);
    if (!a6) {
      return result;
    }
  }
  else
  {
    uint64_t result = 4294966288;
    if (!a6) {
      return result;
    }
  }
LABEL_9:
  if (result) {
    *a6 = 0;
  }
  return result;
}

uint64_t AVE_PixelFmt_GetSupportedListByProfile(int a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, int *a8)
{
  int v9 = 1;
  uint64_t v10 = 4294966295;
  if (a7 && a8)
  {
    int NumberOfTypes = AVE_PixelFmt_GetNumberOfTypes();
    unint64_t v44 = malloc_type_malloc(4 * NumberOfTypes, 0x100004052888210uLL);
    if (v44)
    {
      if (a4 == 1)
      {
        uint64_t v19 = 0;
        __uint64_t v20 = gs_sAVE_ProfileMap_HEVC;
        while (gs_sAVE_ProfileMap_HEVC[v19] != a5)
        {
          v19 += 8;
          if (v19 == 72) {
            goto LABEL_15;
          }
        }
      }
      else
      {
        uint64_t v19 = 0;
        __uint64_t v20 = gs_sAVE_ProfileMap_AVC;
        while (gs_sAVE_ProfileMap_AVC[v19] != a5)
        {
          v19 += 8;
          if (v19 == 72) {
            goto LABEL_15;
          }
        }
      }
      int v21 = a4;
      __uint64_t v22 = &v20[v19];
      int v46 = NumberOfTypes;
      if (AVE_PixelFmt_GetSupportedList(a1, a2, a3, v21, (uint64_t)v44, &v46))
      {
LABEL_15:
        uint64_t v10 = 4294966288;
        int v9 = 1;
      }
      else
      {
        if (v46 < 1)
        {
          int v25 = 0;
        }
        else
        {
          uint64_t v24 = 0;
          int v25 = 0;
          int v43 = a6;
          do
          {
            uint64_t v45 = v24;
            __uint64_t v26 = AVE_PixelFmt_FindByType(v44[v24]);
            uint64_t v27 = 40;
            if (v21 == 1) {
              uint64_t v27 = 36;
            }
            int v28 = *(_DWORD *)&v26[v27];
            for (uint64_t i = 2; i != 8; ++i)
            {
              int v30 = v22[i];
              if (!v30) {
                break;
              }
              if (v30 == v28 && (!*((unsigned char *)v22 + 4) || *((_DWORD *)v26 + 1) == a6)) {
                *(_DWORD *)(a7 + 4 * v25++) = *(_DWORD *)v26;
              }
            }
            if (AVE_Log_CheckLevel(0x4Bu, 8))
            {
              int v31 = AVE_Log_CheckConsole(0x4Bu);
              __uint64_t CurrTime = AVE_GetCurrTime();
              Leveluint64_t Str = AVE_Log_GetLevelStr(8);
              if (v31)
              {
                printf("%lld %d AVE %s: %s:%d number of supported pixel format: %d\n", CurrTime, 75, LevelStr, "AVE_PixelFmt_GetSupportedListByProfile", 255, v25);
                __uint64_t v34 = AVE_GetCurrTime();
                int v42 = AVE_Log_GetLevelStr(8);
                syslog(3, "%lld %d AVE %s: %s:%d number of supported pixel format: %d", v34, 75, v42, "AVE_PixelFmt_GetSupportedListByProfile", 255, v25);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d number of supported pixel format: %d", CurrTime, 75, LevelStr, "AVE_PixelFmt_GetSupportedListByProfile", 255, v25);
              }
            }
            if (v25 >= 1)
            {
              for (uint64_t j = 0; j != v25; ++j)
              {
                if (AVE_Log_CheckLevel(0x4Bu, 8))
                {
                  int v36 = AVE_Log_CheckConsole(0x4Bu);
                  __uint64_t v37 = AVE_GetCurrTime();
                  __uint64_t v38 = AVE_Log_GetLevelStr(8);
                  int v39 = *(_DWORD *)(a7 + 4 * j);
                  if (v36)
                  {
                    printf("%lld %d AVE %s: %s:%d list of supported pixel format[%d] 0x%x\n", v37, 75, v38, "AVE_PixelFmt_GetSupportedListByProfile", 260, j, v39);
                    __uint64_t v40 = AVE_GetCurrTime();
                    uint64_t v41 = AVE_Log_GetLevelStr(8);
                    syslog(3, "%lld %d AVE %s: %s:%d list of supported pixel format[%d] 0x%x", v40, 75, v41, "AVE_PixelFmt_GetSupportedListByProfile", 260, j, *(_DWORD *)(a7 + 4 * j));
                  }
                  else
                  {
                    syslog(3, "%lld %d AVE %s: %s:%d list of supported pixel format[%d] 0x%x", v37, 75, v38, "AVE_PixelFmt_GetSupportedListByProfile", 260, j, v39);
                  }
                }
              }
            }
            uint64_t v24 = v45 + 1;
            a6 = v43;
          }
          while (v45 + 1 < v46);
        }
        int v9 = 0;
        uint64_t v10 = 0;
        *a8 = v25;
      }
      free(v44);
    }
    else
    {
      uint64_t v10 = 4294966293;
    }
  }
  if (a8 && v9) {
    *a8 = 0;
  }
  return v10;
}

uint64_t AVE_PixelFmt_CheckSupportedType(int a1, uint64_t a2, int a3, int a4, int a5)
{
  int NumberOfTypes = AVE_PixelFmt_GetNumberOfTypes();
  uint64_t v11 = (int *)malloc_type_malloc(4 * NumberOfTypes, 0x100004052888210uLL);
  if (!v11) {
    return 4294966293;
  }
  int v12 = v11;
  int v18 = NumberOfTypes;
  uint64_t SupportedList = AVE_PixelFmt_GetSupportedList(a1, a2, a3, a4, (uint64_t)v11, &v18);
  if (!SupportedList)
  {
    uint64_t v14 = v18;
    if (v18 < 1)
    {
LABEL_7:
      uint64_t SupportedList = 4294966295;
    }
    else
    {
      uint64_t v15 = v12;
      while (1)
      {
        int v16 = *v15++;
        if (v16 == a5) {
          break;
        }
        if (!--v14) {
          goto LABEL_7;
        }
      }
      uint64_t SupportedList = 0;
    }
  }
  free(v12);
  return SupportedList;
}

uint64_t AVE_PixelFmt_Check(const unsigned int *a1, int a2, int a3)
{
  if (a2 < 1) {
    return 4294966295;
  }
  uint64_t v3 = a2;
  while (1)
  {
    int v4 = *a1++;
    if (v4 == a3) {
      break;
    }
    if (!--v3) {
      return 4294966295;
    }
  }
  return 0;
}

uint64_t AVE_VCP_Ref_RetrieveArray(CFArrayRef theArray, int *a2, int *a3)
{
  if (theArray && a2 && a3 && *a3 > 0)
  {
    int Count = CFArrayGetCount(theArray);
    int v7 = *a3;
    if (Count < *a3) {
      int v7 = Count;
    }
    if (v7 >= 4) {
      int v8 = 4;
    }
    else {
      int v8 = v7;
    }
    if (v7 < 1)
    {
LABEL_17:
      uint64_t result = 0;
      *a3 = v8;
    }
    else
    {
      CFIndex v9 = 0;
      if (v8 <= 1) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = v8;
      }
      uint64_t v11 = a2;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v9);
        if (!ValueAtIndex) {
          break;
        }
        CFDictionaryRef v13 = ValueAtIndex;
        AVE_CFDict_GetSInt32(ValueAtIndex, @"ReferenceFrameNumDriver", v11);
        AVE_CFDict_GetSInt32(v13, @"ReferenceRVRAIndex", v11 + 1);
        ++v9;
        v11 += 2;
        if (v10 == v9) {
          goto LABEL_17;
        }
      }
      if (AVE_Log_CheckLevel(0xE1u, 4))
      {
        int v19 = AVE_Log_CheckConsole(0xE1u);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v19)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %p\n", CurrTime, 225, LevelStr, "AVE_VCP_Ref_RetrieveArray", 36, "pDict != __null", theArray, a2, a3);
          __uint64_t v22 = AVE_GetCurrTime();
          uint64_t v24 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get data %p %p %p", v22, 225, v24);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get data %p %p %p", CurrTime, 225, LevelStr);
        }
      }
      return 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xE1u, 4))
    {
      int v15 = AVE_Log_CheckConsole(0xE1u);
      __uint64_t v16 = AVE_GetCurrTime();
      int v17 = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v16, 225, v17, "AVE_VCP_Ref_RetrieveArray", 25, "pArray != __null && pInfo != __null && pNum != __null && *pNum > 0", theArray, a2, a3);
        __uint64_t v18 = AVE_GetCurrTime();
        uint64_t v23 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v18, 225, v23);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v16, 225, v17);
      }
    }
    return 4294966295;
  }
  return result;
}

uint64_t AVE_VCP_Ref_MakeArray(char *a1, int a2, __CFArray *a3)
{
  if (a1 && a2 >= 1 && a3)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 8 * a2;
    int v8 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    CFIndex v9 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    while (1)
    {
      CFMutableDataRef Mutable = CFDictionaryCreateMutable(0, 0, v8, v9);
      if (!Mutable) {
        break;
      }
      uint64_t v11 = Mutable;
      AVE_CFDict_AddSInt32(@"ReferenceFrameNumDriver", *(_DWORD *)&a1[v6], Mutable);
      AVE_CFDict_AddSInt32(@"ReferenceRVRAIndex", *(_DWORD *)&a1[v6 + 4], v11);
      CFArrayAppendValue(a3, v11);
      CFRelease(v11);
      v6 += 8;
      if (v7 == v6) {
        return 0;
      }
    }
    if (AVE_Log_CheckLevel(0xE1u, 4))
    {
      int v17 = AVE_Log_CheckConsole(0xE1u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create CFDictionary %p %d %p\n", CurrTime, 225, LevelStr, "AVE_VCP_Ref_MakeArray", 73, "pDict != __null", a1, a2, a3);
        __uint64_t v20 = AVE_GetCurrTime();
        __uint64_t v22 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDictionary %p %d %p", v20, 225, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDictionary %p %d %p", CurrTime, 225, LevelStr);
      }
    }
    return 4294966293;
  }
  else
  {
    if (AVE_Log_CheckLevel(0xE1u, 4))
    {
      int v13 = AVE_Log_CheckConsole(0xE1u);
      __uint64_t v14 = AVE_GetCurrTime();
      int v15 = AVE_Log_GetLevelStr(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p\n", v14, 225, v15, "AVE_VCP_Ref_MakeArray", 65, "pInfo != __null && iNum > 0 && pArray != __null", a1, a2, a3);
        __uint64_t v16 = AVE_GetCurrTime();
        int v21 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v16, 225, v21);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v14, 225, v15);
      }
    }
    return 4294966295;
  }
}

pthread_mutex_t *AVE_Mutex_Create(void)
{
  CFDictionaryRef v0 = (pthread_mutex_t *)malloc_type_malloc(0x40uLL, 0x1000040FA0F61DDuLL);
  uint64_t v1 = v0;
  if (v0)
  {
    *(_OWORD *)&v0->__opaque[24] = 0u;
    *(_OWORD *)&v0->__opaque[40] = 0u;
    *(_OWORD *)&v0->__sig = 0u;
    *(_OWORD *)&v0->__opaque[8] = 0u;
    if (pthread_mutex_init(v0, 0))
    {
      free(v1);
      return 0;
    }
  }
  return v1;
}

uint64_t AVE_Mutex_Destroy(pthread_mutex_t *a1)
{
  if (!a1) {
    return 4294966295;
  }
  if (pthread_mutex_destroy(a1)) {
    uint64_t v2 = 4294966296;
  }
  else {
    uint64_t v2 = 0;
  }
  free(a1);
  return v2;
}

uint64_t AVE_Mutex_Lock(pthread_mutex_t *a1)
{
  if (!a1) {
    return 4294966295;
  }
  if (pthread_mutex_lock(a1)) {
    return 4294966296;
  }
  return 0;
}

uint64_t AVE_Mutex_Unlock(pthread_mutex_t *a1)
{
  if (!a1) {
    return 4294966295;
  }
  if (pthread_mutex_unlock(a1)) {
    return 4294966296;
  }
  return 0;
}

uint64_t AVE_SNPrintf(char *a1, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result = vsnprintf(a1, a2, a3, &a9);
  if (a1)
  {
    if ((int)result >= a2)
    {
      uint64_t result = a2 - 1;
      a1[result] = 0;
    }
  }
  return result;
}

char *AVE_StrNCpy(char *a1, const char *a2, int a3)
{
  uint64_t result = strncpy(a1, a2, a3);
  result[a3 - 1] = 0;
  return result;
}

void AVE_SyntaxWriter::AVE_SyntaxWriter(AVE_SyntaxWriter *this)
{
  *(void *)this = &unk_1F1427A48;
  *((void *)this + 4) = (char *)this + 40;
  *((unsigned char *)this + 4136) = 1;
  *(_OWORD *)((char *)this + 8) = xmmword_1BA7A0930;
  *((_DWORD *)this + 6) = 0xFFFF;
}

void AVE_SyntaxWriter::~AVE_SyntaxWriter(AVE_SyntaxWriter *this)
{
}

uint64_t AVE_SyntaxWriter::WriteBit(AVE_SyntaxWriter *this, char a2)
{
  int v2 = *((_DWORD *)this + 6);
  int v3 = a2 & 1 | (2 * v2);
  *((_DWORD *)this + 6) = v3;
  int v4 = *((_DWORD *)this + 2) + 1;
  *((_DWORD *)this + 2) = v4;
  if (v4 != 8) {
    return 0;
  }
  int v5 = v2 & 0x7FFFFE;
  if (*((unsigned char *)this + 4136)) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t v7 = *((int *)this + 3);
    if ((int)v7 >= *((_DWORD *)this + 5)) {
      return 4294966277;
    }
    uint64_t v8 = *((void *)this + 4);
    *((_DWORD *)this + 3) = v7 + 1;
    *(unsigned char *)(v8 + v7) = 3;
    int v3 = *((_DWORD *)this + 6) | 0x300;
    *((_DWORD *)this + 6) = v3;
    *((_DWORD *)this + 4) += 8;
  }
  uint64_t v9 = *((int *)this + 3);
  if ((int)v9 >= *((_DWORD *)this + 5)) {
    return 4294966277;
  }
  uint64_t v10 = 0;
  uint64_t v11 = *((void *)this + 4);
  *((_DWORD *)this + 3) = v9 + 1;
  *(unsigned char *)(v11 + v9) = v3;
  *((_DWORD *)this + 2) = 0;
  return v10;
}

uint64_t AVE_SyntaxWriter::WriteBits(AVE_SyntaxWriter *this, unsigned int a2, int a3)
{
  if (!a3) {
    return 0;
  }
  int v3 = *((_DWORD *)this + 2);
  while (1)
  {
    int v4 = 8 - v3;
    if (a3 < 8 - v3) {
      int v4 = a3;
    }
    v3 += v4;
    *((_DWORD *)this + 2) = v3;
    a3 -= v4;
    int v5 = (a2 >> a3) & ~(-1 << v4) | (*((_DWORD *)this + 6) << v4);
    *((_DWORD *)this + 6) = v5;
    if (v3 != 8) {
      goto LABEL_12;
    }
    if (*((unsigned char *)this + 4136) && (v5 & 0xFFFFFC) == 0)
    {
      uint64_t v6 = *((int *)this + 3);
      if ((int)v6 >= *((_DWORD *)this + 5)) {
        return 4294966277;
      }
      uint64_t v7 = *((void *)this + 4);
      *((_DWORD *)this + 3) = v6 + 1;
      *(unsigned char *)(v7 + v6) = 3;
      int v5 = *((_DWORD *)this + 6) | 0x300;
      *((_DWORD *)this + 6) = v5;
      *((_DWORD *)this + 4) += 8;
    }
    uint64_t v8 = *((int *)this + 3);
    if ((int)v8 >= *((_DWORD *)this + 5)) {
      return 4294966277;
    }
    int v3 = 0;
    uint64_t v9 = *((void *)this + 4);
    *((_DWORD *)this + 3) = v8 + 1;
    *(unsigned char *)(v9 + v8) = v5;
    *((_DWORD *)this + 2) = 0;
LABEL_12:
    if (!a3) {
      return 0;
    }
  }
}

uint64_t AVE_SyntaxWriter::WriteI(AVE_SyntaxWriter *this, int a2, int a3)
{
  if (a2 < 0) {
    a2 = -a2 | 0x80000000;
  }
  return AVE_SyntaxWriter::WriteBits(this, a2, a3);
}

uint64_t AVE_SyntaxWriter::WriteUE(AVE_SyntaxWriter *this, int a2)
{
  unsigned int v2 = __clz(a2 + 1);
  return AVE_SyntaxWriter::WriteBits(this, (a2 + 1 - (0x80000000 >> v2)) | (0x80000000 >> v2), 63 - 2 * v2);
}

uint64_t AVE_SyntaxWriter::AlignToByte(AVE_SyntaxWriter *this)
{
  uint64_t result = AVE_SyntaxWriter::WriteBit(this, 1);
  if (!result)
  {
    int v3 = *((_DWORD *)this + 2);
    if (v3)
    {
      return AVE_SyntaxWriter::WriteBits(this, 0, 8 - v3);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

double AVE_Time_Conv(int a1, uint64_t a2)
{
  int v2 = a1;
  if ((a1 & 0x80000000) == 0)
  {
    if (a2)
    {
      int v3 = *(_DWORD *)(a2 + 8);
      if (v3 >= 1)
      {
        if (!a1) {
          int v2 = 14400000;
        }
        double result = (double)v2 * (double)*(uint64_t *)a2 / (double)v3;
        *(void *)a2 = (uint64_t)result;
        *(_DWORD *)(a2 + 8) = v2;
      }
    }
  }
  return result;
}

uint64_t AVE_Time_Gen(int a1, uint64_t a2)
{
  uint64_t v2 = 4294966296;
  if (a1 && a2)
  {
    if (14400000 % a1) {
      int v3 = a1;
    }
    else {
      int v3 = 14400000;
    }
    int v4 = *(_DWORD *)(a2 + 8);
    if (v4) {
      uint64_t v5 = (uint64_t)((double)v3 * (double)(*(void *)a2 + v4 / a1) / (double)v4);
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v2 = 0;
    *(void *)a2 = v5;
    *(_DWORD *)(a2 + 8) = v3;
  }
  return v2;
}

uint64_t AVE_ComposeFilePath(const char *a1, const char *a2, const char *a3, char *a4, int a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)int v17 = 0u;
  memset(v18, 0, sizeof(v18));
  time_t v16 = 0;
  if (!a4) {
    return 4294966295;
  }
  *a4 = 0;
  setlocale(0, "");
  time(&v16);
  uint64_t v8 = localtime(&v16);
  strftime(v17, 0x2DuLL, "%Y-%m-%d_%H-%M-%S", v8);
  __uint64_t v14 = "/var/mobile/Media/DCIM/";
  if (a1) {
    LOBYTE(v14) = (_BYTE)a1;
  }
  AVE_SNPrintf(a4, a5, "%s%s%s%s%s", v9, v10, v11, v12, v13, (char)v14);
  return 0;
}

uint64_t AVE_RetCode2OSStatus(uint64_t result)
{
  switch(result)
  {
    case 0xFFFFFC01:
    case 0xFFFFFC02:
    case 0xFFFFFC03:
    case 0xFFFFFC04:
    case 0xFFFFFC05:
    case 0xFFFFFC06:
    case 0xFFFFFC07:
    case 0xFFFFFC08:
    case 0xFFFFFC09:
    case 0xFFFFFC0A:
    case 0xFFFFFC0B:
    case 0xFFFFFC0C:
    case 0xFFFFFC0D:
    case 0xFFFFFC0E:
    case 0xFFFFFC0F:
    case 0xFFFFFC10:
    case 0xFFFFFC11:
    case 0xFFFFFC12:
    case 0xFFFFFC13:
    case 0xFFFFFC14:
    case 0xFFFFFC16:
    case 0xFFFFFC18:
      goto LABEL_2;
    case 0xFFFFFC15:
      double result = 4294954392;
      break;
    case 0xFFFFFC17:
      double result = 4294954394;
      break;
    default:
      if (result == -2001)
      {
        double result = 4294947942;
      }
      else if (result)
      {
LABEL_2:
        double result = 4294949605;
      }
      break;
  }
  return result;
}

uint64_t AVE_GetTemporayPath(char *a1, int a2)
{
  char v4 = (char)[(NSString *)NSTemporaryDirectory() UTF8String];
  return AVE_SNPrintf(a1, a2, "%s", v5, v6, v7, v8, v9, v4);
}

void AVE_DAL::AVE_DAL(AVE_DAL *this)
{
  *((void *)this + 7) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((void *)this + 4) = 0;
}

uint64_t AVE_DAL::Uninit(AVE_DAL *this)
{
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    int v2 = AVE_Log_CheckConsole(0x24u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld\n", CurrTime, 36, LevelStr, "AVE_DAL", "Uninit", this, *(void *)this);
      __uint64_t CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld", CurrTime);
  }
  uint64_t v5 = (AVE_BlkPool *)*((void *)this + 4);
  if (v5)
  {
    AVE_BlkPool::~AVE_BlkPool(v5);
    MEMORY[0x1BA9F01B0]();
    *((void *)this + 4) = 0;
  }
  uint64_t v6 = (AVE_USL_Surface *)*((void *)this + 3);
  if (v6)
  {
    uint64_t v7 = AVE_USL_DestroySurface(v6);
    *((void *)this + 3) = 0;
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (pthread_mutex_t *)*((void *)this + 1);
  if (v8)
  {
    uint64_t v7 = AVE_Mutex_Destroy(v8);
    *((void *)this + 1) = 0;
  }
  *((void *)this + 2) = 0;
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    int v9 = AVE_Log_CheckConsole(0x24u);
    __uint64_t v10 = AVE_GetCurrTime();
    uint64_t v11 = AVE_Log_GetLevelStr(6);
    if (v9)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %d\n", v10, 36, v11, "AVE_DAL", "Uninit", this, *(void *)this, v7);
      __uint64_t v10 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d", v10, 36);
  }
  return v7;
}

void AVE_DAL::~AVE_DAL(AVE_DAL *this)
{
}

uint64_t AVE_DAL::Init(AVE_DAL *this, int a2, int a3)
{
  int v33 = 0;
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    int v6 = AVE_Log_CheckConsole(0x24u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %d %d\n", CurrTime, 36, LevelStr, "AVE_DAL", "Init", this, *(void *)this, a2, a3);
      __uint64_t CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %d %d", CurrTime, 36);
  }
  if (a2 < 1 || a3 <= 0)
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      int v18 = AVE_Log_CheckConsole(0x24u);
      __uint64_t v19 = AVE_GetCurrTime();
      __uint64_t v20 = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %d\n", v19, 36, v20, "AVE_DAL", "Init", 87, "num > 0 && size > 0", this, *(void *)this, a2, a3);
        __uint64_t v19 = AVE_GetCurrTime();
        __uint64_t v20 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %d", v19, 36, v20, "AVE_DAL");
    }
    goto LABEL_24;
  }
  int v9 = AVE_Mutex_Create();
  if (!v9)
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      int v21 = AVE_Log_CheckConsole(0x24u);
      __uint64_t v22 = AVE_GetCurrTime();
      uint64_t v23 = AVE_Log_GetLevelStr(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to create mutex %p %lld %d %d\n", v22, 36, v23, "AVE_DAL", "Init", 92, "pMutex != __null", this, *(void *)this, a2, a3);
        __uint64_t v24 = AVE_GetCurrTime();
        int v31 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to create mutex %p %lld %d %d", v24, 36, v31, "AVE_DAL");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to create mutex %p %lld %d %d", v22, 36, v23, "AVE_DAL");
      }
    }
LABEL_24:
    __uint64_t v10 = 0;
    uint64_t v13 = 4294966295;
    goto LABEL_25;
  }
  __uint64_t v10 = v9;
  SurfaceCfg = AVE_GetSurfaceCfg(3);
  uint64_t v12 = AVE_USL_CreateSurface(0, a3 * a2, (uint64_t)SurfaceCfg[1], &v33);
  if (!v12) {
    operator new();
  }
  uint64_t v13 = v12;
  if (AVE_Log_CheckLevel(0x24u, 4))
  {
    int v14 = AVE_Log_CheckConsole(0x24u);
    __uint64_t v15 = AVE_GetCurrTime();
    time_t v16 = AVE_Log_GetLevelStr(4);
    if (v14)
    {
      printf("%lld %d AVE %s: %s::%s:%d %s | fail to create surface %p %lld %s %llx %d %d %d\n", v15, 36, v16, "AVE_DAL", "Init", 99, "ret == 0", this, *(void *)this, *SurfaceCfg, SurfaceCfg[1], a2, a3, v13);
      __uint64_t v17 = AVE_GetCurrTime();
      int v30 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to create surface %p %lld %s %llx %d %d %d", v17, 36, v30, "AVE_DAL", "Init", 99, "ret == 0");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to create surface %p %lld %s %llx %d %d %d", v15, 36, v16, "AVE_DAL", "Init", 99, "ret == 0");
    }
  }
LABEL_25:
  if (v33)
  {
    AVE_USL_DestroySurface(v33);
    int v33 = 0;
  }
  if (v10) {
    AVE_Mutex_Destroy(v10);
  }
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    int v25 = AVE_Log_CheckConsole(0x24u);
    __uint64_t v26 = AVE_GetCurrTime();
    uint64_t v27 = AVE_Log_GetLevelStr(6);
    if (v25)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %d %d %d\n", v26, 36, v27, "AVE_DAL", "Init", this, *(void *)this, a2, a3, v13);
      __uint64_t v28 = AVE_GetCurrTime();
      uint64_t v32 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %d %d", v28, 36, v32);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %d %d", v26, 36, v27);
    }
  }
  return v13;
}

void sub_1BA781804(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9F01B0](v1, 0x10A0C40FF6A6CB6);
  _Unwind_Resume(a1);
}

uint64_t AVE_DAL::Alloc(AVE_DAL *this, int a2, unint64_t *a3)
{
  int v28 = a2;
  if (AVE_Log_CheckLevel(0x24u, 8))
  {
    int v6 = AVE_Log_CheckConsole(0x24u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %d %p\n", CurrTime, 36, LevelStr, "AVE_DAL", "Alloc", this, *(void *)this, a2, a3);
      __uint64_t v9 = AVE_GetCurrTime();
      __uint64_t v24 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %d %p", v9, 36, v24);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %d %p", CurrTime, 36, LevelStr);
    }
  }
  if (a2 >= 1 && a3 && *((_DWORD *)this + 5) >= a2)
  {
    *a3 = 0;
    AVE_Mutex_Lock(*((pthread_mutex_t **)this + 1));
    uint64_t v10 = AVE_BlkPool::Alloc(*((AVE_BlkPool **)this + 4), a3, &v28);
    if (v10 && AVE_Log_CheckLevel(0x24u, 4))
    {
      int v11 = AVE_Log_CheckConsole(0x24u);
      __uint64_t v12 = AVE_GetCurrTime();
      uint64_t v13 = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to allocate memory from UC info pool %p %lld %p %d %d\n", v12, 36, v13, "AVE_DAL", "Alloc", 210, "ret == 0", this, *(void *)this, a3, v28, v10);
        __uint64_t v14 = AVE_GetCurrTime();
        int v25 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to allocate memory from UC info pool %p %lld %p %d %d", v14, 36, v25, "AVE_DAL", "Alloc");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to allocate memory from UC info pool %p %lld %p %d %d", v12, 36, v13, "AVE_DAL", "Alloc");
      }
    }
    AVE_Mutex_Unlock(*((pthread_mutex_t **)this + 1));
  }
  else
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      int v15 = AVE_Log_CheckConsole(0x24u);
      __uint64_t v16 = AVE_GetCurrTime();
      __uint64_t v17 = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %d %p\n", v16, 36, v17, "AVE_DAL", "Alloc", 202, "0 < size && size <= m_iSize && pAddr != __null", this, *(void *)this, *((_DWORD *)this + 5), a2, a3);
        __uint64_t v18 = AVE_GetCurrTime();
        __uint64_t v26 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %d %p", v18, 36, v26, "AVE_DAL", "Alloc");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %d %p", v16, 36, v17, "AVE_DAL", "Alloc");
      }
    }
    uint64_t v10 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x5Du, 8))
  {
    int v19 = AVE_Log_CheckConsole(0x5Du);
    __uint64_t v20 = AVE_GetCurrTime();
    int v21 = AVE_Log_GetLevelStr(8);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d\n", v20, 93, v21, "AVE_DAL", "Alloc", this, *(void *)this, v28, a3, v10);
      __uint64_t v22 = AVE_GetCurrTime();
      uint64_t v27 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d", v22, 93, v27, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d", v20, 93, v21, "AVE_DAL");
    }
  }
  return v10;
}

uint64_t AVE_DAL::Free(AVE_DAL *this, const void *a2)
{
  if (AVE_Log_CheckLevel(0x24u, 8))
  {
    int v4 = AVE_Log_CheckConsole(0x24u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(8);
    if (v4)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p\n", CurrTime, 36, LevelStr, "AVE_DAL", "Free", this, *(void *)this, a2);
      __uint64_t CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(8);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p", CurrTime, 36);
  }
  if (a2)
  {
    AVE_Mutex_Lock(*((pthread_mutex_t **)this + 1));
    uint64_t v7 = AVE_BlkPool::Free(*((pthread_mutex_t ***)this + 4), (unint64_t)a2);
    if (v7 && AVE_Log_CheckLevel(0x24u, 4))
    {
      int v8 = AVE_Log_CheckConsole(0x24u);
      __uint64_t v9 = AVE_GetCurrTime();
      uint64_t v10 = AVE_Log_GetLevelStr(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to free memory to UC info pool %p %lld %p %d\n", v9, 36, v10, "AVE_DAL", "Free", 245, "ret == 0", this, *(void *)this, a2, v7);
        __uint64_t v11 = AVE_GetCurrTime();
        int v21 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to free memory to UC info pool %p %lld %p %d", v11, 36, v21, "AVE_DAL", "Free");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to free memory to UC info pool %p %lld %p %d", v9, 36, v10, "AVE_DAL", "Free");
      }
    }
    AVE_Mutex_Unlock(*((pthread_mutex_t **)this + 1));
  }
  else
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      int v12 = AVE_Log_CheckConsole(0x24u);
      __uint64_t v13 = AVE_GetCurrTime();
      __uint64_t v14 = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %p\n", v13, 36, v14, "AVE_DAL", "Free", 238, "addr != 0", this, *(void *)this, 0);
        __uint64_t v15 = AVE_GetCurrTime();
        __uint64_t v22 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %p", v15, 36, v22, "AVE_DAL");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %p", v13, 36, v14, "AVE_DAL");
      }
    }
    uint64_t v7 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x24u, 8))
  {
    int v16 = AVE_Log_CheckConsole(0x24u);
    __uint64_t v17 = AVE_GetCurrTime();
    __uint64_t v18 = AVE_Log_GetLevelStr(8);
    if (v16)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %d\n", v17, 36, v18, "AVE_DAL", "Free", this, *(void *)this, a2, v7);
      __uint64_t v19 = AVE_GetCurrTime();
      uint64_t v23 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d", v19, 36, v23);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d", v17, 36, v18);
    }
  }
  return v7;
}

uint64_t AVE_DAL::Idx2Addr(AVE_DAL *this, int a2, unint64_t *a3)
{
  if (AVE_Log_CheckLevel(0x24u, 8))
  {
    int v6 = AVE_Log_CheckConsole(0x24u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %d %p\n", CurrTime, 36, LevelStr, "AVE_DAL", "Idx2Addr", this, *(void *)this, a2, a3);
      __uint64_t v9 = AVE_GetCurrTime();
      __uint64_t v24 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %d %p", v9, 36, v24);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %d %p", CurrTime, 36, LevelStr);
    }
  }
  if (a2 < 0 || !a3)
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      int v15 = AVE_Log_CheckConsole(0x24u);
      __uint64_t v16 = AVE_GetCurrTime();
      __uint64_t v17 = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %p\n", v16, 36, v17, "AVE_DAL", "Idx2Addr", 277, "idx >= 0 && pAddr != __null", this, *(void *)this, a2, a3);
        __uint64_t v18 = AVE_GetCurrTime();
        __uint64_t v26 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %p", v18, 36, v26, "AVE_DAL", "Idx2Addr");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %p", v16, 36, v17, "AVE_DAL", "Idx2Addr");
      }
    }
    uint64_t v10 = 4294966295;
  }
  else
  {
    AVE_Mutex_Lock(*((pthread_mutex_t **)this + 1));
    uint64_t v10 = AVE_BlkPool::Idx2Addr(*((pthread_mutex_t ***)this + 4), a2, a3);
    if (v10 && AVE_Log_CheckLevel(0x24u, 4))
    {
      int v11 = AVE_Log_CheckConsole(0x24u);
      __uint64_t v12 = AVE_GetCurrTime();
      __uint64_t v13 = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to convert index in UC info pool %p %lld %d %p %d\n", v12, 36, v13, "AVE_DAL", "Idx2Addr", 284, "ret == 0", this, *(void *)this, a2, a3, v10);
        __uint64_t v14 = AVE_GetCurrTime();
        int v25 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to convert index in UC info pool %p %lld %d %p %d", v14, 36, v25, "AVE_DAL", "Idx2Addr", 284);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to convert index in UC info pool %p %lld %d %p %d", v12, 36, v13, "AVE_DAL", "Idx2Addr", 284);
      }
    }
    AVE_Mutex_Unlock(*((pthread_mutex_t **)this + 1));
  }
  if (AVE_Log_CheckLevel(0x24u, 8))
  {
    int v19 = AVE_Log_CheckConsole(0x24u);
    __uint64_t v20 = AVE_GetCurrTime();
    int v21 = AVE_Log_GetLevelStr(8);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d\n", v20, 36, v21, "AVE_DAL", "Idx2Addr", this, *(void *)this, a2, a3, v10);
      __uint64_t v22 = AVE_GetCurrTime();
      uint64_t v27 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d", v22, 36, v27, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d", v20, 36, v21, "AVE_DAL");
    }
  }
  return v10;
}

uint64_t AVE_DAL::Addr2Idx(AVE_DAL *this, const void *a2, int *a3)
{
  if (AVE_Log_CheckLevel(0x24u, 8))
  {
    int v6 = AVE_Log_CheckConsole(0x24u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p\n", CurrTime, 36, LevelStr, "AVE_DAL", "Addr2Idx", this, *(void *)this, a2, a3);
      __uint64_t v9 = AVE_GetCurrTime();
      __uint64_t v24 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p", v9, 36, v24);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p", CurrTime, 36, LevelStr);
    }
  }
  if (a3)
  {
    AVE_Mutex_Lock(*((pthread_mutex_t **)this + 1));
    uint64_t v10 = AVE_BlkPool::Addr2Idx(*((pthread_mutex_t ***)this + 4), (unint64_t)a2, a3);
    if (v10 && AVE_Log_CheckLevel(0x24u, 4))
    {
      int v11 = AVE_Log_CheckConsole(0x24u);
      __uint64_t v12 = AVE_GetCurrTime();
      __uint64_t v13 = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to convert address in UC info pool %p %lld %p %p %d\n", v12, 36, v13, "AVE_DAL", "Addr2Idx", 323, "ret == 0", this, *(void *)this, a2, a3, v10);
        __uint64_t v14 = AVE_GetCurrTime();
        int v25 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to convert address in UC info pool %p %lld %p %p %d", v14, 36, v25, "AVE_DAL", "Addr2Idx", 323);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to convert address in UC info pool %p %lld %p %p %d", v12, 36, v13, "AVE_DAL", "Addr2Idx", 323);
      }
    }
    AVE_Mutex_Unlock(*((pthread_mutex_t **)this + 1));
  }
  else
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      int v15 = AVE_Log_CheckConsole(0x24u);
      __uint64_t v16 = AVE_GetCurrTime();
      __uint64_t v17 = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %p %p\n", v16, 36, v17, "AVE_DAL", "Addr2Idx", 316, "pIdx != __null", this, *(void *)this, a2, 0);
        __uint64_t v18 = AVE_GetCurrTime();
        __uint64_t v26 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %p %p", v18, 36, v26, "AVE_DAL", "Addr2Idx");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %p %p", v16, 36, v17, "AVE_DAL", "Addr2Idx");
      }
    }
    uint64_t v10 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x24u, 8))
  {
    int v19 = AVE_Log_CheckConsole(0x24u);
    __uint64_t v20 = AVE_GetCurrTime();
    int v21 = AVE_Log_GetLevelStr(8);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %d\n", v20, 36, v21, "AVE_DAL", "Addr2Idx", this, *(void *)this, a2, a3, v10);
      __uint64_t v22 = AVE_GetCurrTime();
      uint64_t v27 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %d", v22, 36, v27, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %d", v20, 36, v21, "AVE_DAL");
    }
  }
  return v10;
}

uint64_t AVE_DAL::UCCreate(void *a1, uint32_t a2)
{
  uint64_t v24 = 0;
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    int v4 = AVE_Log_CheckConsole(0x24u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v4)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %d\n", CurrTime, 36, LevelStr, "AVE_DAL", "UCCreate", a1, *a1, a2);
      __uint64_t CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %d", CurrTime, 36);
  }
  if (a2 - 1 >= 4)
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      int v12 = AVE_Log_CheckConsole(0x24u);
      __uint64_t v13 = AVE_GetCurrTime();
      __uint64_t v14 = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %d\n", v13, 36, v14, "AVE_DAL", "UCCreate", 388, "AVE_ClientType_None < type && type < AVE_ClientType_Max", a1, *a1, a2);
        __uint64_t v15 = AVE_GetCurrTime();
        __uint64_t v22 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %d", v15, 36, v22, "AVE_DAL");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %d", v13, 36, v14, "AVE_DAL");
      }
    }
    uint64_t v7 = 4294966295;
  }
  else
  {
    uint64_t v7 = AVE_UC_Create(a2, &v24);
    if (v7)
    {
      if (AVE_Log_CheckLevel(0x24u, 4))
      {
        int v8 = AVE_Log_CheckConsole(0x24u);
        __uint64_t v9 = AVE_GetCurrTime();
        uint64_t v10 = AVE_Log_GetLevelStr(4);
        if (v8)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | fail to create UC %p %lld %d %d\n", v9, 36, v10, "AVE_DAL", "UCCreate", 392, "ret == 0", a1, *a1, a2, v7);
          __uint64_t v11 = AVE_GetCurrTime();
          int v21 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to create UC %p %lld %d %d", v11, 36, v21, "AVE_DAL");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to create UC %p %lld %d %d", v9, 36, v10, "AVE_DAL");
        }
      }
    }
    else
    {
      a1[5] = v24;
    }
  }
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    int v16 = AVE_Log_CheckConsole(0x24u);
    __uint64_t v17 = AVE_GetCurrTime();
    __uint64_t v18 = AVE_Log_GetLevelStr(6);
    if (v16)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d\n", v17, 36, v18, "AVE_DAL", "UCCreate", a1, *a1, a2, (const void *)a1[5], v7);
      __uint64_t v19 = AVE_GetCurrTime();
      uint64_t v23 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d", v19, 36, v23, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d", v17, 36, v18, "AVE_DAL");
    }
  }
  return v7;
}

uint64_t AVE_DAL::UCDestroy(AVE_DAL *this)
{
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    int v2 = AVE_Log_CheckConsole(0x24u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p\n", CurrTime, 36, LevelStr, "AVE_DAL", "UCDestroy", this, *(void *)this, *((const void **)this + 5));
      __uint64_t CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p", CurrTime, 36);
  }
  uint64_t v5 = (void *)*((void *)this + 5);
  if (v5)
  {
    uint64_t v6 = AVE_UC_Destroy(v5);
    *((void *)this + 5) = 0;
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    int v7 = AVE_Log_CheckConsole(0x24u);
    __uint64_t v8 = AVE_GetCurrTime();
    __uint64_t v9 = AVE_Log_GetLevelStr(6);
    if (v7)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %d\n", v8, 36, v9, "AVE_DAL", "UCDestroy", this, *(void *)this, *((const void **)this + 5), v6);
      __uint64_t v10 = AVE_GetCurrTime();
      int v12 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d", v10, 36, v12);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d", v8, 36, v9);
    }
  }
  return v6;
}

uint64_t AVE_DAL::UCOpen(void *a1, uint64_t a2, void *a3)
{
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    int v6 = AVE_Log_CheckConsole(0x24u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p\n", CurrTime, 36, LevelStr, "AVE_DAL", "UCOpen", a1, *a1, (const void *)a1[5], (const void *)a2, a3);
      __uint64_t v9 = AVE_GetCurrTime();
      int v25 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v9, 36, v25, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", CurrTime, 36, LevelStr, "AVE_DAL");
    }
  }
  if (a2 && a3)
  {
    AVE_StrNCpy((char *)(a2 + 40), "803.48.1", 16);
    *(_DWORD *)(a2 + 56) = AVE_USL_Surface::GetID((AVE_USL_Surface *)a1[3]);
    __uint64_t v10 = AVE_DW_Get();
    memcpy((void *)(a2 + 64), v10, 0x588uLL);
    *(void *)(a2 + 1480) = 0;
    AVE_Log_Load((void *)(a2 + 1480), a2 + 1488);
    uint64_t v11 = AVE_UC_Open((const void *)a1[5], (const void *)a2, a3);
    if (v11)
    {
      if (AVE_Log_CheckLevel(0x24u, 4))
      {
        int v12 = AVE_Log_CheckConsole(0x24u);
        __uint64_t v13 = AVE_GetCurrTime();
        __uint64_t v14 = AVE_Log_GetLevelStr(4);
        if (v12)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | fail to open client %p %lld %p %p %d\n", v13, 36, v14, "AVE_DAL", "UCOpen", 455, "ret == 0", a1, *a1, (const void *)a2, a3, v11);
          __uint64_t v15 = AVE_GetCurrTime();
          __uint64_t v26 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to open client %p %lld %p %p %d", v15, 36, v26, "AVE_DAL", "UCOpen", 455);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to open client %p %lld %p %p %d", v13, 36, v14, "AVE_DAL", "UCOpen", 455);
        }
      }
    }
    else
    {
      *(_DWORD *)(a2 + 56) = 0;
      *a1 = *a3;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      int v16 = AVE_Log_CheckConsole(0x24u);
      __uint64_t v17 = AVE_GetCurrTime();
      __uint64_t v18 = AVE_Log_GetLevelStr(4);
      if (v16)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p\n", v17, 36, v18, "AVE_DAL", "UCOpen", 443, "pIn != __null && pOut != __null", a1, *a1, (const void *)a2, a3);
        __uint64_t v19 = AVE_GetCurrTime();
        uint64_t v27 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v19, 36, v27, "AVE_DAL", "UCOpen");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v17, 36, v18, "AVE_DAL", "UCOpen");
      }
    }
    uint64_t v11 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    int v20 = AVE_Log_CheckConsole(0x24u);
    __uint64_t v21 = AVE_GetCurrTime();
    __uint64_t v22 = AVE_Log_GetLevelStr(6);
    if (v20)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d\n", v21, 36, v22, "AVE_DAL", "UCOpen", a1, *a1, (const void *)a1[5], (const void *)a2, a3, v11);
      __uint64_t v23 = AVE_GetCurrTime();
      int v28 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v23, 36, v28, "AVE_DAL", "UCOpen");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v21, 36, v22, "AVE_DAL", "UCOpen");
    }
  }
  return v11;
}

uint64_t AVE_DAL::UCClose(const void **a1, const void *a2, void *a3)
{
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    int v6 = AVE_Log_CheckConsole(0x24u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p\n", CurrTime, 36, LevelStr, "AVE_DAL", "UCClose", a1, *a1, a1[5], a2, a3);
      __uint64_t v9 = AVE_GetCurrTime();
      uint64_t v24 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v9, 36, v24, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", CurrTime, 36, LevelStr, "AVE_DAL");
    }
  }
  if (a2 && a3)
  {
    uint64_t v10 = AVE_UC_Close(a1[5], a2, a3);
    if (v10 && AVE_Log_CheckLevel(0x24u, 4))
    {
      int v11 = AVE_Log_CheckConsole(0x24u);
      __uint64_t v12 = AVE_GetCurrTime();
      __uint64_t v13 = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to close client %p %lld %p %p %d\n", v12, 36, v13, "AVE_DAL", "UCClose", 490, "ret == 0", a1, *a1, a2, a3, v10);
        __uint64_t v14 = AVE_GetCurrTime();
        int v25 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to close client %p %lld %p %p %d", v14, 36, v25, "AVE_DAL", "UCClose", 490);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to close client %p %lld %p %p %d", v12, 36, v13, "AVE_DAL", "UCClose", 490);
      }
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      int v15 = AVE_Log_CheckConsole(0x24u);
      __uint64_t v16 = AVE_GetCurrTime();
      __uint64_t v17 = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p\n", v16, 36, v17, "AVE_DAL", "UCClose", 486, "pIn != __null && pOut != __null", a1, *a1, a2, a3);
        __uint64_t v18 = AVE_GetCurrTime();
        __uint64_t v26 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v18, 36, v26, "AVE_DAL", "UCClose");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v16, 36, v17, "AVE_DAL", "UCClose");
      }
    }
    uint64_t v10 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    int v19 = AVE_Log_CheckConsole(0x24u);
    __uint64_t v20 = AVE_GetCurrTime();
    __uint64_t v21 = AVE_Log_GetLevelStr(6);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d\n", v20, 36, v21, "AVE_DAL", "UCClose", a1, *a1, a1[5], a2, a3, v10);
      __uint64_t v22 = AVE_GetCurrTime();
      uint64_t v27 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v22, 36, v27, "AVE_DAL", "UCClose");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v20, 36, v21, "AVE_DAL", "UCClose");
    }
  }
  return v10;
}

uint64_t AVE_DAL::UCConfig(const void **a1, const void *a2, const void *a3, void *a4)
{
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    int v8 = AVE_Log_CheckConsole(0x24u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v8)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p %p\n", CurrTime, 36, LevelStr, "AVE_DAL", "UCConfig", a1, *a1, a1[5], a2, a3, a4);
      __uint64_t v11 = AVE_GetCurrTime();
      __uint64_t v26 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p %p", v11, 36, v26, "AVE_DAL", "UCConfig");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p %p", CurrTime, 36, LevelStr, "AVE_DAL", "UCConfig");
    }
  }
  if (a2 && a3 && a4)
  {
    uint64_t v12 = AVE_UC_Config(a1[5], a2, a3, a4);
    if (v12 && AVE_Log_CheckLevel(0x24u, 4))
    {
      int v13 = AVE_Log_CheckConsole(0x24u);
      __uint64_t v14 = AVE_GetCurrTime();
      int v15 = AVE_Log_GetLevelStr(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to config %p %lld %p %p %p %p %d\n", v14, 36, v15, "AVE_DAL", "UCConfig", 525, "ret == 0", a1, *a1, a1[5], a2, a3, a4, v12);
        __uint64_t v16 = AVE_GetCurrTime();
        uint64_t v27 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to config %p %lld %p %p %p %p %d", v16, 36, v27, "AVE_DAL", "UCConfig", 525, "ret == 0", a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to config %p %lld %p %p %p %p %d", v14, 36, v15, "AVE_DAL", "UCConfig", 525, "ret == 0", a1);
      }
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      int v17 = AVE_Log_CheckConsole(0x24u);
      __uint64_t v18 = AVE_GetCurrTime();
      int v19 = AVE_Log_GetLevelStr(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p %p\n", v18, 36, v19, "AVE_DAL", "UCConfig", 520, "pRecvPort != __null && pIn != __null && pOut != __null", a1, *a1, a2, a3, a4);
        __uint64_t v20 = AVE_GetCurrTime();
        int v28 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p %p", v20, 36, v28, "AVE_DAL", "UCConfig", 520);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p %p", v18, 36, v19, "AVE_DAL", "UCConfig", 520);
      }
    }
    uint64_t v12 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    int v21 = AVE_Log_CheckConsole(0x24u);
    __uint64_t v22 = AVE_GetCurrTime();
    __uint64_t v23 = AVE_Log_GetLevelStr(6);
    if (v21)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %p %d\n", v22, 36, v23, "AVE_DAL", "UCConfig", a1, *a1, a1[5], a2, a3, a4, v12);
      __uint64_t v24 = AVE_GetCurrTime();
      CFAllocatorRef v29 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %p %d", v24, 36, v29, "AVE_DAL", "UCConfig", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %p %d", v22, 36, v23, "AVE_DAL", "UCConfig", a1);
    }
  }
  return v12;
}

uint64_t AVE_DAL::UCPrepare(const void **a1, const void *a2, void *a3)
{
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    int v6 = AVE_Log_CheckConsole(0x24u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p\n", CurrTime, 36, LevelStr, "AVE_DAL", "UCPrepare", a1, *a1, a1[5], a2, a3);
      __uint64_t v9 = AVE_GetCurrTime();
      __uint64_t v24 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v9, 36, v24, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", CurrTime, 36, LevelStr, "AVE_DAL");
    }
  }
  if (a2 && a3)
  {
    uint64_t v10 = AVE_UC_Prepare(a1[5], a2, a3);
    if (v10 && AVE_Log_CheckLevel(0x24u, 4))
    {
      int v11 = AVE_Log_CheckConsole(0x24u);
      __uint64_t v12 = AVE_GetCurrTime();
      int v13 = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to prepare %p %lld %p %p %d\n", v12, 36, v13, "AVE_DAL", "UCPrepare", 557, "ret == 0", a1, *a1, a2, a3, v10);
        __uint64_t v14 = AVE_GetCurrTime();
        int v25 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to prepare %p %lld %p %p %d", v14, 36, v25, "AVE_DAL", "UCPrepare", 557);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to prepare %p %lld %p %p %d", v12, 36, v13, "AVE_DAL", "UCPrepare", 557);
      }
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      int v15 = AVE_Log_CheckConsole(0x24u);
      __uint64_t v16 = AVE_GetCurrTime();
      int v17 = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p\n", v16, 36, v17, "AVE_DAL", "UCPrepare", 553, "pIn != __null && pOut != __null", a1, *a1, a2, a3);
        __uint64_t v18 = AVE_GetCurrTime();
        __uint64_t v26 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v18, 36, v26, "AVE_DAL", "UCPrepare");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v16, 36, v17, "AVE_DAL", "UCPrepare");
      }
    }
    uint64_t v10 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    int v19 = AVE_Log_CheckConsole(0x24u);
    __uint64_t v20 = AVE_GetCurrTime();
    int v21 = AVE_Log_GetLevelStr(6);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d\n", v20, 36, v21, "AVE_DAL", "UCPrepare", a1, *a1, a1[5], a2, a3, v10);
      __uint64_t v22 = AVE_GetCurrTime();
      uint64_t v27 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v22, 36, v27, "AVE_DAL", "UCPrepare");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v20, 36, v21, "AVE_DAL", "UCPrepare");
    }
  }
  return v10;
}

uint64_t AVE_DAL::UCStart(const void **a1, const void *a2, void *a3)
{
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    int v6 = AVE_Log_CheckConsole(0x24u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p\n", CurrTime, 36, LevelStr, "AVE_DAL", "UCStart", a1, *a1, a1[5], a2, a3);
      __uint64_t v9 = AVE_GetCurrTime();
      __uint64_t v24 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v9, 36, v24, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", CurrTime, 36, LevelStr, "AVE_DAL");
    }
  }
  if (a2 && a3)
  {
    uint64_t v10 = AVE_UC_Start(a1[5], a2, a3);
    if (v10 && AVE_Log_CheckLevel(0x24u, 4))
    {
      int v11 = AVE_Log_CheckConsole(0x24u);
      __uint64_t v12 = AVE_GetCurrTime();
      int v13 = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to start %p %lld %p %p %d\n", v12, 36, v13, "AVE_DAL", "UCStart", 588, "ret == 0", a1, *a1, a2, a3, v10);
        __uint64_t v14 = AVE_GetCurrTime();
        int v25 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to start %p %lld %p %p %d", v14, 36, v25, "AVE_DAL", "UCStart", 588);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to start %p %lld %p %p %d", v12, 36, v13, "AVE_DAL", "UCStart", 588);
      }
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      int v15 = AVE_Log_CheckConsole(0x24u);
      __uint64_t v16 = AVE_GetCurrTime();
      int v17 = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p\n", v16, 36, v17, "AVE_DAL", "UCStart", 584, "pIn != __null && pOut != __null", a1, *a1, a2, a3);
        __uint64_t v18 = AVE_GetCurrTime();
        __uint64_t v26 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v18, 36, v26, "AVE_DAL", "UCStart");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v16, 36, v17, "AVE_DAL", "UCStart");
      }
    }
    uint64_t v10 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    int v19 = AVE_Log_CheckConsole(0x24u);
    __uint64_t v20 = AVE_GetCurrTime();
    int v21 = AVE_Log_GetLevelStr(6);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d\n", v20, 36, v21, "AVE_DAL", "UCStart", a1, *a1, a1[5], a2, a3, v10);
      __uint64_t v22 = AVE_GetCurrTime();
      uint64_t v27 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v22, 36, v27, "AVE_DAL", "UCStart");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v20, 36, v21, "AVE_DAL", "UCStart");
    }
  }
  return v10;
}

uint64_t AVE_DAL::UCStop(const void **a1, const void *a2, void *a3)
{
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    int v6 = AVE_Log_CheckConsole(0x24u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p\n", CurrTime, 36, LevelStr, "AVE_DAL", "UCStop", a1, *a1, a1[5], a2, a3);
      __uint64_t v9 = AVE_GetCurrTime();
      __uint64_t v24 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v9, 36, v24, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", CurrTime, 36, LevelStr, "AVE_DAL");
    }
  }
  if (a2 && a3)
  {
    uint64_t v10 = AVE_UC_Stop(a1[5], a2, a3);
    if (v10 && AVE_Log_CheckLevel(0x24u, 4))
    {
      int v11 = AVE_Log_CheckConsole(0x24u);
      __uint64_t v12 = AVE_GetCurrTime();
      int v13 = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to stop %p %lld %p %p %d\n", v12, 36, v13, "AVE_DAL", "UCStop", 619, "ret == 0", a1, *a1, a2, a3, v10);
        __uint64_t v14 = AVE_GetCurrTime();
        int v25 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to stop %p %lld %p %p %d", v14, 36, v25, "AVE_DAL", "UCStop", 619);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to stop %p %lld %p %p %d", v12, 36, v13, "AVE_DAL", "UCStop", 619);
      }
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      int v15 = AVE_Log_CheckConsole(0x24u);
      __uint64_t v16 = AVE_GetCurrTime();
      int v17 = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p\n", v16, 36, v17, "AVE_DAL", "UCStop", 615, "pIn != __null && pOut != __null", a1, *a1, a2, a3);
        __uint64_t v18 = AVE_GetCurrTime();
        __uint64_t v26 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v18, 36, v26, "AVE_DAL", "UCStop");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v16, 36, v17, "AVE_DAL", "UCStop");
      }
    }
    uint64_t v10 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    int v19 = AVE_Log_CheckConsole(0x24u);
    __uint64_t v20 = AVE_GetCurrTime();
    int v21 = AVE_Log_GetLevelStr(6);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d\n", v20, 36, v21, "AVE_DAL", "UCStop", a1, *a1, a1[5], a2, a3, v10);
      __uint64_t v22 = AVE_GetCurrTime();
      uint64_t v27 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v22, 36, v27, "AVE_DAL", "UCStop");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v20, 36, v21, "AVE_DAL", "UCStop");
    }
  }
  return v10;
}

uint64_t AVE_DAL::UCProcess(const void **a1, const void *a2, void *a3)
{
  if (AVE_Log_CheckLevel(0x24u, 8))
  {
    int v6 = AVE_Log_CheckConsole(0x24u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p\n", CurrTime, 36, LevelStr, "AVE_DAL", "UCProcess", a1, *a1, a1[5], a2, a3);
      __uint64_t v9 = AVE_GetCurrTime();
      __uint64_t v24 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v9, 36, v24, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", CurrTime, 36, LevelStr, "AVE_DAL");
    }
  }
  if (a2 && a3)
  {
    uint64_t v10 = AVE_UC_Process(a1[5], a2, a3);
    if (v10 && AVE_Log_CheckLevel(0x24u, 4))
    {
      int v11 = AVE_Log_CheckConsole(0x24u);
      __uint64_t v12 = AVE_GetCurrTime();
      int v13 = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to process %p %lld %p %p %d\n", v12, 36, v13, "AVE_DAL", "UCProcess", 650, "ret == 0", a1, *a1, a2, a3, v10);
        __uint64_t v14 = AVE_GetCurrTime();
        int v25 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to process %p %lld %p %p %d", v14, 36, v25, "AVE_DAL", "UCProcess", 650);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to process %p %lld %p %p %d", v12, 36, v13, "AVE_DAL", "UCProcess", 650);
      }
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      int v15 = AVE_Log_CheckConsole(0x24u);
      __uint64_t v16 = AVE_GetCurrTime();
      int v17 = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p\n", v16, 36, v17, "AVE_DAL", "UCProcess", 646, "pIn != __null && pOut != __null", a1, *a1, a2, a3);
        __uint64_t v18 = AVE_GetCurrTime();
        __uint64_t v26 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v18, 36, v26, "AVE_DAL", "UCProcess");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v16, 36, v17, "AVE_DAL", "UCProcess");
      }
    }
    uint64_t v10 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x24u, 8))
  {
    int v19 = AVE_Log_CheckConsole(0x24u);
    __uint64_t v20 = AVE_GetCurrTime();
    int v21 = AVE_Log_GetLevelStr(8);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d\n", v20, 36, v21, "AVE_DAL", "UCProcess", a1, *a1, a1[5], a2, a3, v10);
      __uint64_t v22 = AVE_GetCurrTime();
      uint64_t v27 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v22, 36, v27, "AVE_DAL", "UCProcess");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v20, 36, v21, "AVE_DAL", "UCProcess");
    }
  }
  return v10;
}

uint64_t AVE_DAL::UCComplete(const void **a1, const void *a2, void *a3)
{
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    int v6 = AVE_Log_CheckConsole(0x24u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p\n", CurrTime, 36, LevelStr, "AVE_DAL", "UCComplete", a1, *a1, a1[5], a2, a3);
      __uint64_t v9 = AVE_GetCurrTime();
      __uint64_t v24 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v9, 36, v24, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", CurrTime, 36, LevelStr, "AVE_DAL");
    }
  }
  if (a2 && a3)
  {
    uint64_t v10 = AVE_UC_Complete(a1[5], a2, a3);
    if (v10 && AVE_Log_CheckLevel(0x24u, 4))
    {
      int v11 = AVE_Log_CheckConsole(0x24u);
      __uint64_t v12 = AVE_GetCurrTime();
      int v13 = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to complete %p %lld %p %p %d\n", v12, 36, v13, "AVE_DAL", "UCComplete", 681, "ret == 0", a1, *a1, a2, a3, v10);
        __uint64_t v14 = AVE_GetCurrTime();
        int v25 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to complete %p %lld %p %p %d", v14, 36, v25, "AVE_DAL", "UCComplete", 681);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to complete %p %lld %p %p %d", v12, 36, v13, "AVE_DAL", "UCComplete", 681);
      }
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      int v15 = AVE_Log_CheckConsole(0x24u);
      __uint64_t v16 = AVE_GetCurrTime();
      int v17 = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p\n", v16, 36, v17, "AVE_DAL", "UCComplete", 677, "pIn != __null && pOut != __null", a1, *a1, a2, a3);
        __uint64_t v18 = AVE_GetCurrTime();
        __uint64_t v26 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v18, 36, v26, "AVE_DAL", "UCComplete");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v16, 36, v17, "AVE_DAL", "UCComplete");
      }
    }
    uint64_t v10 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    int v19 = AVE_Log_CheckConsole(0x24u);
    __uint64_t v20 = AVE_GetCurrTime();
    int v21 = AVE_Log_GetLevelStr(6);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d\n", v20, 36, v21, "AVE_DAL", "UCComplete", a1, *a1, a1[5], a2, a3, v10);
      __uint64_t v22 = AVE_GetCurrTime();
      uint64_t v27 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v22, 36, v27, "AVE_DAL", "UCComplete");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v20, 36, v21, "AVE_DAL", "UCComplete");
    }
  }
  return v10;
}

uint64_t AVE_DAL::UCReset(const void **a1, const void *a2, void *a3)
{
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    int v6 = AVE_Log_CheckConsole(0x24u);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p\n", CurrTime, 36, LevelStr, "AVE_DAL", "UCReset", a1, *a1, a1[5], a2, a3);
      __uint64_t v9 = AVE_GetCurrTime();
      __uint64_t v24 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v9, 36, v24, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", CurrTime, 36, LevelStr, "AVE_DAL");
    }
  }
  if (a2 && a3)
  {
    uint64_t v10 = AVE_UC_Reset(a1[5], a2, a3);
    if (v10 && AVE_Log_CheckLevel(0x24u, 4))
    {
      int v11 = AVE_Log_CheckConsole(0x24u);
      __uint64_t v12 = AVE_GetCurrTime();
      int v13 = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to reset %p %lld %p %p %d\n", v12, 36, v13, "AVE_DAL", "UCReset", 743, "ret == 0", a1, *a1, a2, a3, v10);
        __uint64_t v14 = AVE_GetCurrTime();
        int v25 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to reset %p %lld %p %p %d", v14, 36, v25, "AVE_DAL", "UCReset", 743);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to reset %p %lld %p %p %d", v12, 36, v13, "AVE_DAL", "UCReset", 743);
      }
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      int v15 = AVE_Log_CheckConsole(0x24u);
      __uint64_t v16 = AVE_GetCurrTime();
      int v17 = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p\n", v16, 36, v17, "AVE_DAL", "UCReset", 739, "pIn != __null && pOut != __null", a1, *a1, a2, a3);
        __uint64_t v18 = AVE_GetCurrTime();
        __uint64_t v26 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v18, 36, v26, "AVE_DAL", "UCReset");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v16, 36, v17, "AVE_DAL", "UCReset");
      }
    }
    uint64_t v10 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    int v19 = AVE_Log_CheckConsole(0x24u);
    __uint64_t v20 = AVE_GetCurrTime();
    int v21 = AVE_Log_GetLevelStr(6);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d\n", v20, 36, v21, "AVE_DAL", "UCReset", a1, *a1, a1[5], a2, a3, v10);
      __uint64_t v22 = AVE_GetCurrTime();
      uint64_t v27 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v22, 36, v27, "AVE_DAL", "UCReset");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v20, 36, v21, "AVE_DAL", "UCReset");
    }
  }
  return v10;
}

__uint64_t AVE_GetCurrTime(void)
{
  return clock_gettime_nsec_np(_CLOCK_UPTIME_RAW) / 0x3E8;
}

uint64_t AVE_GetAbsTime(void)
{
  v1.tv_sec = 0;
  v1.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &v1);
  return (v1.tv_nsec + 1000000000 * v1.tv_sec) / 1000;
}

uint64_t AVE_RetCode2IOReturn(int a1)
{
  uint64_t v1 = 0;
  while (gsc_saAVE_CodeMap[v1] != a1)
  {
    v1 += 2;
    if (v1 == 52) {
      return 3758097084;
    }
  }
  return gsc_saAVE_CodeMap[v1 + 1];
}

uint64_t AVE_IOReturn2RetCode(int a1)
{
  uint64_t v1 = 0;
  while (gsc_saAVE_CodeMap[v1 + 1] != a1)
  {
    v1 += 2;
    if (v1 == 52) {
      return 4294966296;
    }
  }
  return gsc_saAVE_CodeMap[v1];
}

uint64_t AVE_VUI_AddAllTransCharToCFArray(CFMutableArrayRef theArray)
{
  for (uint64_t i = 0; i != 8; ++i)
    CFArrayAppendValue(theArray, (const void *)gsc_psaAVE_TransferCharacteristics_Supported[i]);
  CFArrayAppendValue(theArray, (const void *)*MEMORY[0x1E4F24C08]);
  return 0;
}

uint64_t AVE_VUI_AddAllColorPrimToCFDict(__CFDictionary *a1)
{
  if (a1)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableArrayRef v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    int v4 = v3;
    if (Mutable) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      if (AVE_Log_CheckLevel(0xD2u, 4))
      {
        int v6 = AVE_Log_CheckConsole(0xD2u);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v6)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CF %p %p %p\n", CurrTime, 210, LevelStr, "AVE_VUI_AddAllColorPrimToCFDict", 161, "pTmpDict != __null && pTmpArray != __null", a1, Mutable, v4);
          __uint64_t v9 = AVE_GetCurrTime();
          __uint64_t v16 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CF %p %p %p", v9, 210, v16);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CF %p %p %p", CurrTime, 210, LevelStr);
        }
      }
      uint64_t v14 = 4294966293;
      if (!Mutable) {
        goto LABEL_22;
      }
    }
    else
    {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F45328], (const void *)*MEMORY[0x1E4F45338]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F452E8], (const void *)*MEMORY[0x1E4F452F8]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F45300], (const void *)*MEMORY[0x1E4F1CFC8]);
      for (uint64_t i = 0; i != 6; ++i)
        CFArrayAppendValue(v4, (const void *)gsc_psaAVE_ColorPrimaries_Supported[i]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F45310], v4);
      CFDictionarySetValue(a1, (const void *)*MEMORY[0x1E4F44868], Mutable);
      uint64_t v14 = 0;
      if (!Mutable)
      {
LABEL_22:
        if (v4) {
          CFRelease(v4);
        }
        return v14;
      }
    }
    CFRelease(Mutable);
    goto LABEL_22;
  }
  if (AVE_Log_CheckLevel(0xD2u, 4))
  {
    int v10 = AVE_Log_CheckConsole(0xD2u);
    __uint64_t v11 = AVE_GetCurrTime();
    __uint64_t v12 = AVE_Log_GetLevelStr(4);
    if (v10)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p\n", v11, 210, v12, "AVE_VUI_AddAllColorPrimToCFDict", 154, "pDict != __null", 0);
      __uint64_t v11 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p", v11);
  }
  return 4294966295;
}

uint64_t AVE_VUI_AddAllTransCharToCFDict(__CFDictionary *a1)
{
  if (a1)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableArrayRef v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    int v4 = v3;
    if (Mutable) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      if (AVE_Log_CheckLevel(0xD2u, 4))
      {
        int v6 = AVE_Log_CheckConsole(0xD2u);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v6)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CF %p %p %p\n", CurrTime, 210, LevelStr, "AVE_VUI_AddAllTransCharToCFDict", 209, "pTmpDict != __null && pTmpArray != __null", a1, Mutable, v4);
          __uint64_t v9 = AVE_GetCurrTime();
          int v15 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CF %p %p %p", v9, 210, v15);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CF %p %p %p", CurrTime, 210, LevelStr);
        }
      }
      uint64_t v13 = 4294966293;
      if (!Mutable) {
        goto LABEL_19;
      }
    }
    else
    {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F45328], (const void *)*MEMORY[0x1E4F45338]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F452E8], (const void *)*MEMORY[0x1E4F452F8]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F45300], (const void *)*MEMORY[0x1E4F1CFC8]);
      AVE_VUI_AddAllTransCharToCFArray(v4);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F45310], v4);
      CFDictionarySetValue(a1, (const void *)*MEMORY[0x1E4F44B58], Mutable);
      uint64_t v13 = 0;
    }
    CFRelease(Mutable);
LABEL_19:
    if (v4) {
      CFRelease(v4);
    }
    return v13;
  }
  if (AVE_Log_CheckLevel(0xD2u, 4))
  {
    int v10 = AVE_Log_CheckConsole(0xD2u);
    __uint64_t v11 = AVE_GetCurrTime();
    __uint64_t v12 = AVE_Log_GetLevelStr(4);
    if (v10)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p\n", v11, 210, v12, "AVE_VUI_AddAllTransCharToCFDict", 202, "pDict != __null", 0);
      __uint64_t v11 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p", v11);
  }
  return 4294966295;
}

uint64_t AVE_VUI_AddAllMatrixCoeffToCFDict(__CFDictionary *a1)
{
  if (a1)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableArrayRef v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    int v4 = v3;
    if (Mutable) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      if (AVE_Log_CheckLevel(0xD2u, 4))
      {
        int v6 = AVE_Log_CheckConsole(0xD2u);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v6)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CF %p %p %p\n", CurrTime, 210, LevelStr, "AVE_VUI_AddAllMatrixCoeffToCFDict", 256, "pTmpDict != __null && pTmpArray != __null", a1, Mutable, v4);
          __uint64_t v9 = AVE_GetCurrTime();
          __uint64_t v16 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CF %p %p %p", v9, 210, v16);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CF %p %p %p", CurrTime, 210, LevelStr);
        }
      }
      uint64_t v14 = 4294966293;
      if (!Mutable) {
        goto LABEL_22;
      }
    }
    else
    {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F45328], (const void *)*MEMORY[0x1E4F45338]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F452E8], (const void *)*MEMORY[0x1E4F452F8]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F45300], (const void *)*MEMORY[0x1E4F1CFC8]);
      for (uint64_t i = 0; i != 6; ++i)
        CFArrayAppendValue(v4, (const void *)gsc_psaAVE_MatrixCoefficients_Supported[i]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F45310], v4);
      CFDictionarySetValue(a1, (const void *)*MEMORY[0x1E4F44BB0], Mutable);
      uint64_t v14 = 0;
      if (!Mutable)
      {
LABEL_22:
        if (v4) {
          CFRelease(v4);
        }
        return v14;
      }
    }
    CFRelease(Mutable);
    goto LABEL_22;
  }
  if (AVE_Log_CheckLevel(0xD2u, 4))
  {
    int v10 = AVE_Log_CheckConsole(0xD2u);
    __uint64_t v11 = AVE_GetCurrTime();
    __uint64_t v12 = AVE_Log_GetLevelStr(4);
    if (v10)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p\n", v11, 210, v12, "AVE_VUI_AddAllMatrixCoeffToCFDict", 249, "pDict != __null", 0);
      __uint64_t v11 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p", v11);
  }
  return 4294966295;
}

uint64_t AVE_VUI_AddAllToCFDict(__CFDictionary *a1)
{
  if (a1)
  {
    int v2 = AVE_VUI_AddAllColorPrimToCFDict(a1);
    int v3 = AVE_VUI_AddAllTransCharToCFDict(a1) + v2;
    return v3 + AVE_VUI_AddAllMatrixCoeffToCFDict(a1);
  }
  else
  {
    if (AVE_Log_CheckLevel(0xD2u, 4))
    {
      int v5 = AVE_Log_CheckConsole(0xD2u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v5)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p\n", CurrTime, 210, LevelStr, "AVE_VUI_AddAllToCFDict", 294, "pDict != __null", 0);
        __uint64_t CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p", CurrTime);
    }
    return 4294966295;
  }
}

void _GLOBAL__sub_I_AVE_USL_VUI_Helper_cpp()
{
  uint64_t v0 = *MEMORY[0x1E4F24AA0];
  gsc_psaAVE_ColorPrimaries_Supported = *MEMORY[0x1E4F24AB0];
  unk_1EB9F4270 = v0;
  uint64_t v1 = *MEMORY[0x1E4F24AA8];
  qword_1EB9F4278 = *MEMORY[0x1E4F24AC8];
  unk_1EB9F4280 = v1;
  uint64_t v2 = *MEMORY[0x1E4F24A98];
  qword_1EB9F4288 = *MEMORY[0x1E4F24AC0];
  unk_1EB9F4290 = v2;
  uint64_t v3 = *MEMORY[0x1E4F24BF0];
  gsc_psaAVE_TransferCharacteristics_Supported = *MEMORY[0x1E4F24BE0];
  unk_1EB9F42D0 = v3;
  uint64_t v4 = *MEMORY[0x1E4F24C10];
  qword_1EB9F42D8 = *MEMORY[0x1E4F24BE8];
  unk_1EB9F42E0 = v4;
  uint64_t v5 = *MEMORY[0x1E4F24BF8];
  qword_1EB9F42E8 = *MEMORY[0x1E4F24BD0];
  unk_1EB9F42F0 = v5;
  uint64_t v6 = *MEMORY[0x1E4F24BD8];
  qword_1EB9F42F8 = *MEMORY[0x1E4F24C00];
  unk_1EB9F4300 = v6;
  uint64_t v7 = *MEMORY[0x1E4F24C48];
  gsc_psaAVE_MatrixCoefficients_Supported = *MEMORY[0x1E4F24C50];
  unk_1EB9F42A0 = v7;
  uint64_t v8 = *MEMORY[0x1E4F24C60];
  qword_1EB9F42A8 = *MEMORY[0x1E4F24C40];
  unk_1EB9F42B0 = v8;
  uint64_t v9 = *MEMORY[0x1E4F24C38];
  qword_1EB9F42B8 = *MEMORY[0x1E4F24C30];
  unk_1EB9F42C0 = v9;
}

unsigned int *AVE_DevCap_FindSearchRangeMode(int a1, uint64_t a2, int a3, int a4)
{
  double result = (unsigned int *)AVE_DevCap_FindSearchRange(a1, a2, a3);
  if (result)
  {
    return AVE_DevCap_SearchRange_Find(result, a4);
  }
  return result;
}

unsigned int *AVE_DevCap_FindPixelPerf(int a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  double result = (unsigned int *)AVE_DevCap_FindPerf(a1, a2, a3);
  if (result)
  {
    double result = AVE_DevCap_Perf_Find(result, a4, a5, a6);
    if (result) {
      return (unsigned int *)*((void *)result + 2);
    }
  }
  return result;
}

uint64_t AVE_DRC_RetrieveMetaData(CFDictionaryRef theDict, BOOL *a2)
{
  int v14 = 0;
  if (theDict && a2)
  {
    int Bool = AVE_CFDict_GetBool(theDict, (const __CFString *)*MEMORY[0x1E4F44E80], a2);
    int v5 = AVE_CFDict_GetBool(theDict, (const __CFString *)*MEMORY[0x1E4F44EA0], a2 + 1) + Bool;
    Suint64_t Int32 = AVE_CFDict_GetSInt32(theDict, (const __CFString *)*MEMORY[0x1E4F44E90], &v14);
    a2[2] = v14;
    int v7 = v5 + SInt32 + AVE_CFDict_GetBool(theDict, (const __CFString *)*MEMORY[0x1E4F44E88], a2 + 3);
    return v7 + AVE_CFDict_GetSInt32(theDict, (const __CFString *)*MEMORY[0x1E4F44E98], (int *)a2 + 1);
  }
  else
  {
    if (AVE_Log_CheckLevel(0xE2u, 4))
    {
      int v9 = AVE_Log_CheckConsole(0xE2u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", CurrTime, 226, LevelStr, "AVE_DRC_RetrieveMetaData", 25, "pDict != __null && pMetaData != __null", theDict, a2, 0);
        __uint64_t v12 = AVE_GetCurrTime();
        uint64_t v13 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v12, 226, v13);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", CurrTime, 226, LevelStr);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_DRC_MakeMetaData(unsigned __int8 *a1, CFMutableDictionaryRef theDict)
{
  if (a1 && theDict)
  {
    int v4 = AVE_CFDict_AddBool((const __CFString *)*MEMORY[0x1E4F44E80], *a1, theDict);
    int v5 = AVE_CFDict_AddBool((const __CFString *)*MEMORY[0x1E4F44EA0], a1[1], theDict) + v4;
    int v6 = AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E4F44E90], (char)a1[2], theDict);
    int v7 = v5 + v6 + AVE_CFDict_AddBool((const __CFString *)*MEMORY[0x1E4F44E88], a1[3], theDict);
    return v7
         + AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E4F44E98], *((_DWORD *)a1 + 1), theDict);
  }
  else
  {
    if (AVE_Log_CheckLevel(0xE2u, 4))
    {
      int v9 = AVE_Log_CheckConsole(0xE2u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", CurrTime, 226, LevelStr, "AVE_DRC_MakeMetaData", 60, "pMetaData != __null && pDict != __null", a1, theDict, 0);
        __uint64_t v12 = AVE_GetCurrTime();
        uint64_t v13 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v12, 226, v13);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", CurrTime, 226, LevelStr);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_DPB_RetrieveSnapshotEntry(CFDictionaryRef theDict, void *a2)
{
  int v33 = 0;
  if (theDict && a2)
  {
    AVE_CFDict_GetSInt32(theDict, (const __CFString *)*MEMORY[0x1E4F44E70], &v33);
    *(_DWORD *)a2 = v33;
    AVE_CFDict_GetSInt32(theDict, (const __CFString *)*MEMORY[0x1E4F44E40], &v33);
    *((_DWORD *)a2 + 1) = v33;
    AVE_CFDict_GetSInt32(theDict, (const __CFString *)*MEMORY[0x1E4F44E48], &v33);
    *((_DWORD *)a2 + 2) = v33;
    AVE_CFDict_GetSInt64(theDict, (const __CFString *)*MEMORY[0x1E4F44E60], (uint64_t *)a2 + 2);
    AVE_CFDict_GetSInt32(theDict, (const __CFString *)*MEMORY[0x1E4F44E58], &v33);
    *((_DWORD *)a2 + 6) = v33;
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44E50]);
    if (Value)
    {
      CFDictionaryRef v5 = Value;
      CFStringRef v6 = (const __CFString *)*MEMORY[0x1E4F44E38];
      AVE_CFDict_GetSInt32(Value, (const __CFString *)*MEMORY[0x1E4F44E38], &v33);
      *((_DWORD *)a2 + 12) = v33;
      CFStringRef v7 = (const __CFString *)*MEMORY[0x1E4F44E20];
      AVE_CFDict_GetSInt32(v5, (const __CFString *)*MEMORY[0x1E4F44E20], &v33);
      *((_DWORD *)a2 + 14) = v33;
      CFStringRef v8 = (const __CFString *)*MEMORY[0x1E4F44E28];
      AVE_CFDict_GetSInt32(v5, (const __CFString *)*MEMORY[0x1E4F44E28], &v33);
      *((_DWORD *)a2 + 16) = v33;
      CFDictionaryRef v9 = (const __CFDictionary *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44E68]);
      if (v9)
      {
        CFDictionaryRef v10 = v9;
        AVE_CFDict_GetSInt32(v9, v6, &v33);
        *((_DWORD *)a2 + 13) = v33;
        AVE_CFDict_GetSInt32(v10, v7, &v33);
        *((_DWORD *)a2 + 15) = v33;
        AVE_CFDict_GetSInt32(v10, v8, &v33);
        *((_DWORD *)a2 + 17) = v33;
        CFDictionaryRef v11 = (const __CFDictionary *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44E78]);
        MetaCFDataRef Data = AVE_DRC_RetrieveMetaData(v11, (BOOL *)a2 + 72);
        if (MetaData && AVE_Log_CheckLevel(0xE2u, 4))
        {
          int v13 = AVE_Log_CheckConsole(0xE2u);
          __uint64_t CurrTime = AVE_GetCurrTime();
          Leveluint64_t Str = AVE_Log_GetLevelStr(4);
          if (v13)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to retrieve RC metadata %p %p %d\n", CurrTime, 226, LevelStr, "AVE_DPB_RetrieveSnapshotEntry", 150, "ret == 0", theDict, a2, MetaData);
            __uint64_t v16 = AVE_GetCurrTime();
            CFAllocatorRef v29 = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to retrieve RC metadata %p %p %d", v16, 226, v29);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to retrieve RC metadata %p %p %d", CurrTime, 226, LevelStr);
          }
        }
        return MetaData;
      }
      if (AVE_Log_CheckLevel(0xE2u, 4))
      {
        int v24 = AVE_Log_CheckConsole(0xE2u);
        __uint64_t v25 = AVE_GetCurrTime();
        __uint64_t v26 = AVE_Log_GetLevelStr(4);
        if (v24)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to get VRA reference buffer %p %p %d\n", v25, 226, v26, "AVE_DPB_RetrieveSnapshotEntry", 131, "pTmpDict != __null", theDict, a2, 0);
          __uint64_t v27 = AVE_GetCurrTime();
          uint64_t v32 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get VRA reference buffer %p %p %d", v27, 226, v32);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get VRA reference buffer %p %p %d", v25, 226, v26);
        }
      }
    }
    else if (AVE_Log_CheckLevel(0xE2u, 4))
    {
      int v21 = AVE_Log_CheckConsole(0xE2u);
      __uint64_t v22 = AVE_GetCurrTime();
      __uint64_t v23 = AVE_Log_GetLevelStr(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to get original reference buffer %p %p %d\n", v22, 226, v23, "AVE_DPB_RetrieveSnapshotEntry", 113, "pTmpDict != __null", theDict, a2, 0);
        __uint64_t v22 = AVE_GetCurrTime();
        int v31 = AVE_Log_GetLevelStr(4);
      }
      else
      {
        int v31 = v23;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get original reference buffer %p %p %d", v22, 226, v31);
    }
    return 4294966288;
  }
  if (AVE_Log_CheckLevel(0xE2u, 4))
  {
    int v17 = AVE_Log_CheckConsole(0xE2u);
    __uint64_t v18 = AVE_GetCurrTime();
    int v19 = AVE_Log_GetLevelStr(4);
    if (v17)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", v18, 226, v19, "AVE_DPB_RetrieveSnapshotEntry", 92, "pDict != __null && pEntry != __null", theDict, a2, 0);
      __uint64_t v20 = AVE_GetCurrTime();
      int v30 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v20, 226, v30);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v18, 226, v19);
    }
  }
  return 4294966295;
}

uint64_t AVE_DPB_MakeSnapshotEntry(uint64_t a1, __CFDictionary *a2)
{
  if (a1 && a2)
  {
    AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E4F44E70], *(_DWORD *)a1, a2);
    AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E4F44E40], *(_DWORD *)(a1 + 4), a2);
    AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E4F44E48], *(_DWORD *)(a1 + 8), a2);
    AVE_CFDict_AddSInt64((const __CFString *)*MEMORY[0x1E4F44E60], *(void *)(a1 + 16), a2);
    AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E4F44E58], *(_DWORD *)(a1 + 24), a2);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFDictionaryRef v5 = Mutable;
      CFStringRef v6 = (const __CFString *)*MEMORY[0x1E4F44E38];
      AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E4F44E38], *(_DWORD *)(a1 + 48), Mutable);
      CFStringRef v7 = (const __CFString *)*MEMORY[0x1E4F44E20];
      AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E4F44E20], *(_DWORD *)(a1 + 56), v5);
      CFStringRef v8 = (const __CFString *)*MEMORY[0x1E4F44E28];
      AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E4F44E28], *(_DWORD *)(a1 + 64), v5);
      CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E4F44E50], v5);
      CFRelease(v5);
      CFDictionaryRef v9 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v9)
      {
        CFDictionaryRef v10 = v9;
        AVE_CFDict_AddSInt32(v6, *(_DWORD *)(a1 + 52), v9);
        AVE_CFDict_AddSInt32(v7, *(_DWORD *)(a1 + 60), v10);
        AVE_CFDict_AddSInt32(v8, *(_DWORD *)(a1 + 68), v10);
        CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E4F44E68], v10);
        CFRelease(v10);
        CFDictionaryRef v11 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (v11)
        {
          __uint64_t v12 = v11;
          MetaCFDataRef Data = AVE_DRC_MakeMetaData((unsigned __int8 *)(a1 + 72), v11);
          if (MetaData)
          {
            if (AVE_Log_CheckLevel(0xE2u, 4))
            {
              int v14 = AVE_Log_CheckConsole(0xE2u);
              __uint64_t CurrTime = AVE_GetCurrTime();
              Leveluint64_t Str = AVE_Log_GetLevelStr(4);
              if (v14)
              {
                printf("%lld %d AVE %s: %s:%d %s | fail to make DRC metadata %p %p %d\n", CurrTime, 226, LevelStr, "AVE_DPB_MakeSnapshotEntry", 227, "ret == 0", (const void *)a1, a2, MetaData);
                __uint64_t v17 = AVE_GetCurrTime();
                CFAllocatorRef v29 = AVE_Log_GetLevelStr(4);
                syslog(3, "%lld %d AVE %s: %s:%d %s | fail to make DRC metadata %p %p %d", v17, 226, v29);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d %s | fail to make DRC metadata %p %p %d", CurrTime, 226, LevelStr);
              }
            }
          }
          else
          {
            CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E4F44E78], v12);
          }
          CFRelease(v12);
          return MetaData;
        }
        if (AVE_Log_CheckLevel(0xE2u, 4))
        {
          int v26 = AVE_Log_CheckConsole(0xE2u);
          __uint64_t v23 = AVE_GetCurrTime();
          int v24 = AVE_Log_GetLevelStr(4);
          if (v26)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to create CFDict %p %p %d\n", v23, 226, v24, "AVE_DPB_MakeSnapshotEntry", 223, "pTmpDict != __null", (const void *)a1, a2, 0);
            goto LABEL_24;
          }
LABEL_30:
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDict %p %p %d", v23, 226, v24);
        }
        return 4294966293;
      }
      if (!AVE_Log_CheckLevel(0xE2u, 4)) {
        return 4294966293;
      }
      int v25 = AVE_Log_CheckConsole(0xE2u);
      __uint64_t v23 = AVE_GetCurrTime();
      int v24 = AVE_Log_GetLevelStr(4);
      if (!v25) {
        goto LABEL_30;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to create CFDict %p %p %d\n", v23, 226, v24, "AVE_DPB_MakeSnapshotEntry", 206, "pTmpDict != __null", (const void *)a1, a2, 0);
    }
    else
    {
      if (!AVE_Log_CheckLevel(0xE2u, 4)) {
        return 4294966293;
      }
      int v22 = AVE_Log_CheckConsole(0xE2u);
      __uint64_t v23 = AVE_GetCurrTime();
      int v24 = AVE_Log_GetLevelStr(4);
      if (!v22) {
        goto LABEL_30;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to create CFDict %p %p %d\n", v23, 226, v24, "AVE_DPB_MakeSnapshotEntry", 189, "pTmpDict != __null", (const void *)a1, a2, 0);
    }
LABEL_24:
    __uint64_t v27 = AVE_GetCurrTime();
    int v31 = AVE_Log_GetLevelStr(4);
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDict %p %p %d", v27, 226, v31);
    return 4294966293;
  }
  if (AVE_Log_CheckLevel(0xE2u, 4))
  {
    int v18 = AVE_Log_CheckConsole(0xE2u);
    __uint64_t v19 = AVE_GetCurrTime();
    __uint64_t v20 = AVE_Log_GetLevelStr(4);
    if (v18)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", v19, 226, v20, "AVE_DPB_MakeSnapshotEntry", 170, "pEntry != __null && pDict != __null", (const void *)a1, a2, 0);
      __uint64_t v21 = AVE_GetCurrTime();
      int v30 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v21, 226, v30);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v19, 226, v20);
    }
  }
  return 4294966295;
}

uint64_t AVE_DPB_RetrieveSnapshot(CFDictionaryRef theDict, char *a2)
{
  int v36 = 0;
  if (!theDict || !a2)
  {
    if (AVE_Log_CheckLevel(0xE2u, 4))
    {
      int v14 = AVE_Log_CheckConsole(0xE2u);
      __uint64_t CurrTime = AVE_GetCurrTime();
      Leveluint64_t Str = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", CurrTime, 226, LevelStr, "AVE_DPB_RetrieveSnapshot", 261, "pDict != __null && pSnapshot != __null", theDict, a2, 0);
        __uint64_t v17 = AVE_GetCurrTime();
        int v33 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v17, 226, v33);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", CurrTime, 226, LevelStr);
      }
    }
    return 4294966295;
  }
  AVE_CFDict_GetSInt32(theDict, (const __CFString *)*MEMORY[0x1E4F44DF8], &v36);
  *((_DWORD *)a2 + 340) = v36;
  AVE_CFDict_GetSInt32(theDict, (const __CFString *)*MEMORY[0x1E4F44E08], &v36);
  *((_DWORD *)a2 + 341) = v36;
  AVE_CFDict_GetSInt32(theDict, (const __CFString *)*MEMORY[0x1E4F44E00], &v36);
  *((_DWORD *)a2 + 342) = v36;
  AVE_CFDict_GetSInt32(theDict, (const __CFString *)*MEMORY[0x1E4F44E10], &v36);
  int v4 = v36;
  *((_DWORD *)a2 + 343) = v36;
  if (v4 >= 17)
  {
    if (AVE_Log_CheckLevel(0xE2u, 4))
    {
      int v18 = AVE_Log_CheckConsole(0xE2u);
      __uint64_t v19 = AVE_GetCurrTime();
      __uint64_t v20 = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | number of reference is out of range %d %d\n", v19, 226, v20, "AVE_DPB_RetrieveSnapshot", 274, "pSnapshot->num_ref_frame <= ((16) > (16) ? (16) : (16))", *((_DWORD *)a2 + 343), 16);
        __uint64_t v19 = AVE_GetCurrTime();
        __uint64_t v20 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | number of reference is out of range %d %d", v19, 226, v20, "AVE_DPB_RetrieveSnapshot", 274, "pSnapshot->num_ref_frame <= ((16) > (16) ? (16) : (16))", *((unsigned int *)a2 + 343), 16);
    }
    return 4294966296;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44E18]);
  if (!Value)
  {
    if (AVE_Log_CheckLevel(0xE2u, 4))
    {
      int v21 = AVE_Log_CheckConsole(0xE2u);
      __uint64_t v22 = AVE_GetCurrTime();
      __uint64_t v23 = AVE_Log_GetLevelStr(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to get reference buffers %p %p %d\n", v22, 226, v23, "AVE_DPB_RetrieveSnapshot", 278, "pTmpArray != __null", theDict, a2, 0);
        __uint64_t v24 = AVE_GetCurrTime();
        __uint64_t v34 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get reference buffers %p %p %d", v24, 226, v34);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get reference buffers %p %p %d", v22, 226, v23);
      }
    }
    return 4294966288;
  }
  CFArrayRef v6 = Value;
  int Count = CFArrayGetCount(Value);
  int v8 = Count;
  if (Count > 17)
  {
    if (AVE_Log_CheckLevel(0xE2u, 4))
    {
      int v25 = AVE_Log_CheckConsole(0xE2u);
      __uint64_t v26 = AVE_GetCurrTime();
      __uint64_t v27 = AVE_Log_GetLevelStr(4);
      if (v25)
      {
        printf("%lld %d AVE %s: %s:%d %s | number of reference buffer is out of range %d %d\n", v26, 226, v27, "AVE_DPB_RetrieveSnapshot", 284, "num <= (((16) > (16) ? (16) : (16)) + 1)", v8, 17);
        __uint64_t v26 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | number of reference buffer is out of range %d %d", v26);
    }
    return 4294966296;
  }
  if (Count < 1) {
    return 0;
  }
  CFIndex v9 = 0;
  uint64_t v10 = Count;
  for (uint64_t i = a2; ; i += 80)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, v9);
    uint64_t SnapshotEntry = AVE_DPB_RetrieveSnapshotEntry(ValueAtIndex, i);
    if (SnapshotEntry) {
      break;
    }
    if (v10 == ++v9) {
      return SnapshotEntry;
    }
  }
  if (AVE_Log_CheckLevel(0xE2u, 4))
  {
    int v28 = AVE_Log_CheckConsole(0xE2u);
    __uint64_t v29 = AVE_GetCurrTime();
    int v30 = AVE_Log_GetLevelStr(4);
    if (v28)
    {
      printf("%lld %d AVE %s: %s:%d %s | fail to retrieve one entry %p %p %p %d %d\n", v29, 226, v30, "AVE_DPB_RetrieveSnapshot", 293, "ret == 0", theDict, a2, ValueAtIndex, v9, SnapshotEntry);
      __uint64_t v31 = AVE_GetCurrTime();
      __uint64_t v35 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to retrieve one entry %p %p %p %d %d", v31, 226, v35, "AVE_DPB_RetrieveSnapshot");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to retrieve one entry %p %p %p %d %d", v29, 226, v30, "AVE_DPB_RetrieveSnapshot");
    }
  }
  return SnapshotEntry;
}

uint64_t AVE_DPB_MakeSnapshot(int *a1, __CFDictionary *a2)
{
  if (a1 && a2)
  {
    AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E4F44DF8], a1[340], a2);
    AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E4F44E08], a1[341], a2);
    AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E4F44E00], a1[342], a2);
    AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E4F44E10], a1[343], a2);
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      CFMutableArrayRef v5 = Mutable;
      if (a1[343] < 0)
      {
        uint64_t SnapshotEntry = 0;
LABEL_17:
        CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E4F44E18], v5);
        CFRelease(v5);
        return SnapshotEntry;
      }
      CFMutableDictionaryRef v6 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v6)
      {
        CFStringRef v7 = v6;
        uint64_t v8 = 0;
        CFIndex v9 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
        uint64_t v10 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
        CFDictionaryRef v11 = a1;
        while (1)
        {
          uint64_t SnapshotEntry = AVE_DPB_MakeSnapshotEntry((uint64_t)v11, v7);
          CFArrayAppendValue(v5, v7);
          CFRelease(v7);
          if (v8 >= a1[343]) {
            goto LABEL_17;
          }
          ++v8;
          CFStringRef v7 = CFDictionaryCreateMutable(0, 0, v9, v10);
          v11 += 20;
          if (!v7) {
            goto LABEL_21;
          }
        }
      }
      LODWORD(v8) = 0;
      LODWORD(SnapshotEntry) = 0;
      CFDictionaryRef v11 = a1;
LABEL_21:
      if (AVE_Log_CheckLevel(0xE2u, 4))
      {
        int v21 = AVE_Log_CheckConsole(0xE2u);
        __uint64_t CurrTime = AVE_GetCurrTime();
        Leveluint64_t Str = AVE_Log_GetLevelStr(4);
        if (v21)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CFDictionary %p %p %p %d %d\n", CurrTime, 226, LevelStr, "AVE_DPB_MakeSnapshot", 339, "pTmpDict != __null", a1, a2, v11, v8, SnapshotEntry);
          __uint64_t v24 = AVE_GetCurrTime();
          int v28 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDictionary %p %p %p %d %d", v24, 226, v28, "AVE_DPB_MakeSnapshot");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDictionary %p %p %p %d %d", CurrTime, 226, LevelStr, "AVE_DPB_MakeSnapshot");
        }
      }
      CFRelease(v5);
    }
    else if (AVE_Log_CheckLevel(0xE2u, 4))
    {
      int v17 = AVE_Log_CheckConsole(0xE2u);
      __uint64_t v18 = AVE_GetCurrTime();
      __uint64_t v19 = AVE_Log_GetLevelStr(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create CFArray %p %p %d\n", v18, 226, v19, "AVE_DPB_MakeSnapshot", 329, "pTmpArray != __null", a1, a2, 0);
        __uint64_t v20 = AVE_GetCurrTime();
        __uint64_t v27 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray %p %p %d", v20, 226, v27);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray %p %p %d", v18, 226, v19);
      }
    }
    return 4294966293;
  }
  if (AVE_Log_CheckLevel(0xE2u, 4))
  {
    int v13 = AVE_Log_CheckConsole(0xE2u);
    __uint64_t v14 = AVE_GetCurrTime();
    int v15 = AVE_Log_GetLevelStr(4);
    if (v13)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", v14, 226, v15, "AVE_DPB_MakeSnapshot", 316, "pDict != __null && pSnapshot != __null", a2, a1, 0);
      __uint64_t v16 = AVE_GetCurrTime();
      __uint64_t v26 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v16, 226, v26);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v14, 226, v15);
    }
  }
  return 4294966295;
}

uint64_t AVE_CheckQPValue(int a1, int a2)
{
  if (-6 * a2 + 48 <= a1 && a1 <= 51) {
    return 0;
  }
  else {
    return 4294966295;
  }
}

uint64_t AVE_CheckQPRange(int *a1, int a2)
{
  int v2 = -6 * a2 + 48;
  int v3 = a1[1];
  if (v2 <= *a1 && *a1 <= 51) {
    int v5 = 0;
  }
  else {
    int v5 = -1001;
  }
  if (v2 <= v3 && v3 <= 51) {
    int v7 = 0;
  }
  else {
    int v7 = -1001;
  }
  return (v7 + v5);
}

uint64_t AVE_CheckQuality(double a1, int a2)
{
  if (a1 >= 0.0 && (double)(6 * a2 + 3) >= a1) {
    return 0;
  }
  else {
    return 4294966295;
  }
}

int *HEVC_FindProfile(int a1)
{
  uint64_t v1 = 0;
  while (gsc_sHEVC_Profiles[v1] != a1)
  {
    v1 += 3;
    if (v1 == 24) {
      return 0;
    }
  }
  return &gsc_sHEVC_Profiles[v1];
}

uint64_t htpc_decompress_plane(uint64_t result, const unsigned __int8 *a2, unsigned char *a3, int a4, int a5, int a6, int a7, unsigned int a8, char a9, unsigned int a10)
{
  uint64_t v42 = result;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  v64[128] = 4;
  v64[129] = a6;
  int v65 = 1 << (a6 - 1);
  uint64_t v66 = 0x1000000001;
  long long v67 = 0u;
  long long v68 = 0u;
  v60[64] = 4;
  v60[65] = a6;
  v60[66] = v65;
  uint64_t v61 = 0x1000000001;
  if (a6 <= 8) {
    int v10 = 3;
  }
  else {
    int v10 = 4;
  }
  int v39 = v10;
  long long v62 = 0uLL;
  long long v63 = 0uLL;
  v56[64] = 4;
  v56[65] = a6;
  v56[66] = 1 << (a6 - 1);
  uint64_t v57 = 0x1000000001;
  long long v58 = 0uLL;
  long long v59 = 0uLL;
  if (a5 >= 1)
  {
    uint64_t v37 = 0;
    int v36 = 0;
    unsigned int v48 = 0;
    if (a6 == 8) {
      char v11 = 1;
    }
    else {
      char v11 = 2;
    }
    if (a7) {
      uint64_t v12 = 8;
    }
    else {
      uint64_t v12 = 16;
    }
    int v13 = -1 << a6;
    if (!a7) {
      char v11 = a6 != 8;
    }
    unsigned int v14 = a8 >> v11;
    if (a7) {
      char v15 = 3;
    }
    else {
      char v15 = 4;
    }
    int v35 = 16 * v14;
    char v41 = v15;
    if (a7) {
      int v16 = 8;
    }
    else {
      int v16 = 4;
    }
    unsigned int v38 = v16;
    int v17 = ~v13;
    int v46 = 2 * v14;
    unsigned int v47 = v14;
    uint64_t v34 = 8 * v14;
    int v40 = ~v13;
    do
    {
      if (a4 < 1) {
        goto LABEL_59;
      }
      int v18 = 0;
      uint64_t v19 = v37;
      int v20 = v36;
      do
      {
        unsigned int v21 = *(_DWORD *)(v42
                        + (v48 >> 3 >> a9) * a10
                        + 4 * ((v18 >> v41 << a9) + (~(-1 << a9) & (v48 >> 3))));
        __uint64_t v22 = &a2[v21 & 0xFFFFFFF];
        int v70 = v22;
        uint64_t v71 = 0;
        unint64_t v69 = 0;
        if (v21 >> 28)
        {
          double result = htpc_entropy::dec_symbols((htpc_entropy *)&v69, v39, v38, v72, 128, 16);
        }
        else
        {
          uint64_t v23 = 0;
          int v24 = 0;
          unsigned int v25 = 0;
          do
          {
            v24 -= a6;
            HIDWORD(v69) = v24;
            if (v24 < 0)
            {
              do
              {
                __uint64_t v26 = v22 + 1;
                int v70 = v22 + 1;
                unsigned int v25 = *v22 | (v25 << 8);
                v24 += 8;
                unint64_t v69 = __PAIR64__(v24, v25);
                ++v22;
              }
              while (v24 >= 8);
            }
            else
            {
              __uint64_t v26 = v22;
            }
            v72[v23++] = (v25 >> v24) & v17;
            __uint64_t v22 = v26;
          }
          while (v23 != 128);
        }
        LODWORD(v27) = 0;
        int v28 = 0;
        uint64_t v45 = v19;
        int v50 = v19;
        int v44 = v20;
        do
        {
          uint64_t v29 = 0;
          int v49 = v20;
          do
          {
            BOOL v31 = (int)(v28 + v48) < a5 && v18 + (int)v29 < a4;
            int v32 = v72[(int)v27];
            if (a7)
            {
              if (v21 >> 28)
              {
                double result = htpc_codec<8,8>::dec_sample(v60, v28, v29, v32);
                LOWORD(v32) = result;
              }
              if (v31)
              {
                if (a6 == 8) {
                  a3[v20] = v32;
                }
                else {
                  *(_WORD *)&a3[2 * v20] = v32;
                }
              }
              uint64_t v27 = (int)v27 + 1;
              int v32 = v72[v27];
              if (v21 >> 28)
              {
                double result = htpc_codec<8,8>::dec_sample(v56, v28, v29, v32);
                LOWORD(v32) = result;
              }
              if (v31)
              {
                uint64_t v33 = (v20 + 1);
LABEL_53:
                if (a6 == 8) {
                  a3[v33] = v32;
                }
                else {
                  *(_WORD *)&a3[2 * v33] = v32;
                }
              }
            }
            else
            {
              if (v21 >> 28)
              {
                double result = htpc_codec<16,8>::dec_sample(v64, v28, v29, v32);
                LOWORD(v32) = result;
              }
              if (v31)
              {
                uint64_t v33 = (v50 + v29);
                goto LABEL_53;
              }
            }
            LODWORD(v27) = v27 + 1;
            ++v29;
            v20 += 2;
          }
          while (v12 != v29);
          ++v28;
          int v20 = v49 + v46;
          v50 += v47;
        }
        while (v28 != 8);
        v18 += v12;
        int v17 = v40;
        int v20 = v44 + 2 * v12;
        uint64_t v19 = v45 + v12;
      }
      while (v18 < a4);
LABEL_59:
      v36 += v35;
      v37 += v34;
      v48 += 8;
    }
    while ((int)v48 < a5);
  }
  return result;
}

uint64_t htpc_entropy::get_bits(htpc_entropy *this, int a2)
{
  unsigned int v2 = *(_DWORD *)this;
  int v3 = *((_DWORD *)this + 1) - a2;
  *((_DWORD *)this + 1) = v3;
  if (v3 < 0)
  {
    CFMutableDictionaryRef v6 = (unsigned __int8 *)*((void *)this + 1);
    unint64_t v5 = *((void *)this + 2);
    do
    {
      int v7 = v6 + 1;
      *((void *)this + 1) = v6 + 1;
      if (v5 && (unint64_t)v6 >= v5) {
        int v8 = 0;
      }
      else {
        int v8 = *v6;
      }
      unsigned int v2 = v8 | (v2 << 8);
      char v4 = v3 + 8;
      *(_DWORD *)this = v2;
      *((_DWORD *)this + 1) = v3 + 8;
      CFMutableDictionaryRef v6 = v7;
      BOOL v9 = v3 < -8;
      v3 += 8;
    }
    while (v9);
  }
  else
  {
    char v4 = v3;
  }
  return (v2 >> v4) & ~(-1 << a2);
}

uint64_t htpc_entropy::dec_symbols(htpc_entropy *this, int a2, unsigned int a3, int *a4, int a5, int a6)
{
  if (*((_DWORD *)this + 1)) {
    htpc_entropy::dec_symbols();
  }
  uint64_t v8 = *((void *)this + 1);
  int v33 = a5 - 1;
  if (a5 >= 1)
  {
    int v10 = a3;
    uint64_t v30 = *((void *)this + 1);
    int v11 = 0;
    int v12 = 0;
    int v13 = a6 + 1;
    int v35 = -a3;
    uint64_t v36 = a3;
    int v31 = a6 + 1;
    do
    {
      int v14 = htpc_entropy::get_bits(this, a2) + 2;
      if (v14 >= v13) {
        int v15 = v13;
      }
      else {
        int v15 = v14;
      }
      if (v10 >= 1)
      {
        uint64_t v16 = 0;
        BOOL v17 = v14 > v13;
        if (v12 <= a5) {
          int v18 = a5;
        }
        else {
          int v18 = v12;
        }
        uint64_t v19 = (v18 - v12);
        int v20 = &a4[v12];
        do
        {
          if (v19 == v16) {
            break;
          }
          int *v20 = htpc_entropy::get_bits(this, v15);
          if ((~(_BYTE)v16 & 3) == 0)
          {
            if (v17 || (unint64_t v21 = *((void *)this + 2)) != 0 && *((void *)this + 1) > v21)
            {
              BOOL v17 = 0;
              int *v20 = 0;
              *((void *)v20 - 1) = 0;
              *(v20 - 3) = 0;
            }
            else
            {
              BOOL v17 = 0;
            }
          }
          ++v16;
          ++v20;
        }
        while (v36 != v16);
        uint64_t v22 = 0;
        int v10 = a3;
        int v23 = v33;
        int v13 = v31;
        int v24 = v35;
        do
        {
          int v25 = v22 + v12;
          if ((int)v22 + v12 >= a5) {
            break;
          }
          if (v11)
          {
            uint64_t v26 = v22 + v12;
            if ((int)(v22 + v12 + a3 + a3 * (a4[v26] & 0x1F)) >= a5) {
              unsigned int v27 = v23 - v12;
            }
            else {
              unsigned int v27 = a3 + a3 * (a4[v26] & 0x1F);
            }
            a4[v26] = 0;
            if (v27)
            {
              bzero(&a4[(int)v22 + 1 + v12], 4 * v27);
              v12 += v27;
              int v25 = v22 + v12;
            }
            int v24 = v35;
          }
          if (a4[v25] == 1)
          {
            int v11 = 0;
            BOOL v28 = v24 + v22 == -2 || a3 == 1;
            if (v28 && v25 + 2 < a5)
            {
              a4[v25] = 0;
              int v11 = 1;
            }
          }
          else
          {
            int v11 = 0;
          }
          ++v22;
          --v23;
        }
        while (v24 + v22);
      }
      v12 += v10;
    }
    while (v12 < a5);
    LODWORD(v8) = v30;
    if (*((int *)this + 1) >= 8) {
      htpc_entropy::dec_symbols();
    }
  }
  *((_DWORD *)this + 1) = 0;
  return (*((_DWORD *)this + 2) - v8);
}

uint64_t htpc_codec<16,8>::dec_sample(_DWORD *a1, int a2, int a3, int a4)
{
  if (a1[131])
  {
    int v8 = htpc_codec<16,8>::pred_mmap(a1, a2, a3);
  }
  else
  {
    BOOL v9 = a1 + 130;
    if (a2 >= 1) {
      BOOL v9 = &a1[16 * (unint64_t)(a2 - 1) + a3];
    }
    if (a3 >= 1) {
      BOOL v9 = &a1[16 * (uint64_t)a2 + (a3 - 1)];
    }
    int v8 = *v9;
    a1[133] = *v9;
  }
  int v10 = a4 >> 1;
  if (a4) {
    int v10 = -v10;
  }
  a1[139] = v10;
  int v11 = v8 + v10;
  if (v11 < 0 || v11 >> a1[129]) {
    a1[140] = 1;
  }
  uint64_t result = v11 & ~(-1 << a1[132]);
  a1[16 * (uint64_t)a2 + a3] = result;
  return result;
}

uint64_t htpc_codec<8,8>::dec_sample(_DWORD *a1, int a2, int a3, int a4)
{
  if (a1[67])
  {
    int v8 = htpc_codec<8,8>::pred_mmap(a1, a2, a3);
  }
  else
  {
    BOOL v9 = a1 + 66;
    if (a2 >= 1) {
      BOOL v9 = &a1[8 * (a2 - 1) + a3];
    }
    if (a3 >= 1) {
      BOOL v9 = &a1[8 * a2 + a3 - 1];
    }
    int v8 = *v9;
    a1[69] = *v9;
  }
  int v10 = a4 >> 1;
  if (a4) {
    int v10 = -v10;
  }
  a1[75] = v10;
  int v11 = v8 + v10;
  if (v11 < 0 || v11 >> a1[65]) {
    a1[76] = 1;
  }
  uint64_t result = v11 & ~(-1 << a1[68]);
  a1[8 * a2 + a3] = result;
  return result;
}

uint64_t htpc_codec<16,8>::pred_mmap(_DWORD *a1, int a2, int a3)
{
  if (a2)
  {
    if (a3 % a1[128])
    {
      int v3 = a1[138] + a1[139];
      a1[138] = v3;
      signed int v4 = a1[136];
      signed int v5 = a1[137];
    }
    else
    {
      if (a3 <= 0)
      {
        uint64_t v9 = (a2 - 2);
        uint64_t v10 = (a2 - 1);
        if (a2 <= 1)
        {
          uint64_t v10 = (int)v10;
          uint64_t v9 = (int)v10;
        }
        signed int v5 = a1[16 * v9 + a3];
        a1[134] = v5;
        int v8 = &a1[16 * v10 + a3];
      }
      else
      {
        int v8 = &a1[16 * (uint64_t)a2 + (a3 - 1)];
        signed int v5 = *(v8 - 16);
        a1[134] = v5;
      }
      int v11 = *v8;
      a1[133] = *v8;
      int v3 = v11 - v5;
      if (v11 >= v5) {
        signed int v4 = v5;
      }
      else {
        signed int v4 = v11;
      }
      a1[136] = v4;
      if (v11 > v5) {
        signed int v5 = v11;
      }
      a1[137] = v5;
      a1[138] = v3;
    }
    int v12 = a1[16 * (uint64_t)a2 - 16 + a3];
    a1[135] = v12;
    if (v12 < v4) {
      signed int v4 = v12;
    }
    a1[136] = v4;
    if (v12 > v5) {
      signed int v5 = v12;
    }
    a1[137] = v5;
    int v13 = v3 + v12;
    if (v13 < v5) {
      signed int v5 = v13;
    }
    if (v13 >= v4) {
      return v5;
    }
    else {
      return v4;
    }
  }
  else
  {
    CFMutableDictionaryRef v6 = &a1[a3 - 1];
    if (a3 <= 0) {
      CFMutableDictionaryRef v6 = a1 + 130;
    }
    uint64_t v7 = *v6;
    a1[133] = v7;
  }
  return v7;
}

uint64_t htpc_codec<8,8>::pred_mmap(_DWORD *a1, int a2, int a3)
{
  if (a2)
  {
    if (a3 % a1[64])
    {
      int v3 = a1[74] + a1[75];
      a1[74] = v3;
      signed int v4 = a1[72];
      signed int v5 = a1[73];
    }
    else
    {
      if (a3 <= 0)
      {
        uint64_t v9 = (a2 - 2);
        uint64_t v10 = (a2 - 1);
        if (a2 <= 1)
        {
          uint64_t v10 = (int)v10;
          uint64_t v9 = (int)v10;
        }
        signed int v5 = a1[8 * v9 + a3];
        a1[70] = v5;
        int v8 = &a1[8 * v10 + a3];
      }
      else
      {
        int v8 = &a1[8 * a2 + a3 - 1];
        signed int v5 = *(v8 - 8);
        a1[70] = v5;
      }
      int v11 = *v8;
      a1[69] = *v8;
      int v3 = v11 - v5;
      if (v11 >= v5) {
        signed int v4 = v5;
      }
      else {
        signed int v4 = v11;
      }
      a1[72] = v4;
      if (v11 > v5) {
        signed int v5 = v11;
      }
      a1[73] = v5;
      a1[74] = v3;
    }
    int v12 = a1[8 * a2 - 8 + a3];
    a1[71] = v12;
    if (v12 < v4) {
      signed int v4 = v12;
    }
    a1[72] = v4;
    if (v12 > v5) {
      signed int v5 = v12;
    }
    a1[73] = v5;
    int v13 = v3 + v12;
    if (v13 < v5) {
      signed int v5 = v13;
    }
    if (v13 >= v4) {
      return v5;
    }
    else {
      return v4;
    }
  }
  else
  {
    CFMutableDictionaryRef v6 = &a1[a3 - 1];
    if (a3 <= 0) {
      CFMutableDictionaryRef v6 = a1 + 66;
    }
    uint64_t v7 = *v6;
    a1[69] = v7;
  }
  return v7;
}

uint64_t AVE_VCP::Init(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (AVE_Log_CheckLevel(0xDu, 6))
  {
    int v10 = AVE_Log_CheckConsole(0xDu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v10)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %d %d %d\n", CurrTime, 13, LevelStr, "AVE_VCP", "Init", a1, a2, a3, a4, a5);
      __uint64_t v13 = AVE_GetCurrTime();
      long long v58 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %d %d %d", v13, 13, v58);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %d %d %d", CurrTime, 13, LevelStr);
    }
  }
  uint64_t v14 = *(unsigned int *)&AVE_VCP::Init(unsigned long long,_E_AVE_CodecType,int,int)::sc_iaEncType[4 * a3];
  int v15 = dlopen("/System/Library/PrivateFrameworks/VideoProcessing.framework/VideoProcessing", 1);
  a1[3] = (uint64_t)v15;
  if (v15)
  {
    uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))dlsym(v15, "VCPAVEContextCreate");
    if (v16)
    {
      uint64_t v17 = v16(v14, a4, a5);
      a1[4] = v17;
      if (!v17 && AVE_Log_CheckLevel(0xDu, 5))
      {
        int v18 = AVE_Log_CheckConsole(0xDu);
        __uint64_t v19 = AVE_GetCurrTime();
        int v20 = AVE_Log_GetLevelStr(5);
        if (v18)
        {
          printf("%lld %d AVE %s: %s::%s:%d VCP context create fail %p %lld %d %d %d\n", v19, 13, v20, "AVE_VCP", "Init", 74, a1, a2, a3, a4, a5);
          __uint64_t v19 = AVE_GetCurrTime();
          long long v59 = AVE_Log_GetLevelStr(5);
        }
        else
        {
          long long v59 = v20;
        }
        syslog(3, "%lld %d AVE %s: %s::%s:%d VCP context create fail %p %lld %d %d %d", v19, 13, v59, "AVE_VCP");
      }
    }
    else if (AVE_Log_CheckLevel(0xDu, 5))
    {
      int v25 = AVE_Log_CheckConsole(0xDu);
      __uint64_t v26 = AVE_GetCurrTime();
      unsigned int v27 = AVE_Log_GetLevelStr(5);
      BOOL v28 = dlerror();
      if (v25)
      {
        printf("%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d | %s\n", v26, 13, v27, "AVE_VCP", "Init", 66, a1, a2, a3, a4, a5, v28);
        __uint64_t v26 = AVE_GetCurrTime();
        unsigned int v27 = AVE_Log_GetLevelStr(5);
        dlerror();
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d | %s", v26, 13, v27, "AVE_VCP", "Init");
    }
    uint64_t v29 = dlsym((void *)a1[3], "VCPCompressionAllocateDPB");
    a1[5] = (uint64_t)v29;
    if (!v29 && AVE_Log_CheckLevel(0xDu, 5))
    {
      int v30 = AVE_Log_CheckConsole(0xDu);
      __uint64_t v31 = AVE_GetCurrTime();
      int v32 = AVE_Log_GetLevelStr(5);
      int v33 = dlerror();
      if (v30)
      {
        printf("%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d | %s\n", v31, 13, v32, "AVE_VCP", "Init", 83, a1, a2, a3, a4, a5, v33);
        __uint64_t v61 = AVE_GetCurrTime();
        uint64_t v34 = AVE_Log_GetLevelStr(5);
        dlerror();
        syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d | %s", v61, 13, v34, "AVE_VCP", "Init");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d | %s", v31, 13, v32, "AVE_VCP", "Init");
      }
    }
    int v35 = dlsym((void *)a1[3], "VCPAVEScaleReferenceFrames");
    a1[6] = (uint64_t)v35;
    if (!v35 && AVE_Log_CheckLevel(0xDu, 5))
    {
      int v36 = AVE_Log_CheckConsole(0xDu);
      __uint64_t v37 = AVE_GetCurrTime();
      unsigned int v38 = AVE_Log_GetLevelStr(5);
      int v39 = dlerror();
      if (v36)
      {
        printf("%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d | %s\n", v37, 13, v38, "AVE_VCP", "Init", 91, a1, a2, a3, a4, a5, v39);
        __uint64_t v62 = AVE_GetCurrTime();
        int v40 = AVE_Log_GetLevelStr(5);
        dlerror();
        syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d | %s", v62, 13, v40, "AVE_VCP", "Init");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d | %s", v37, 13, v38, "AVE_VCP", "Init");
      }
    }
    char v41 = dlsym((void *)a1[3], "VCPAVEExtraInloopChromaFilter");
    a1[7] = (uint64_t)v41;
    if (!v41 && AVE_Log_CheckLevel(0xDu, 5))
    {
      int v42 = AVE_Log_CheckConsole(0xDu);
      __uint64_t v43 = AVE_GetCurrTime();
      int v44 = AVE_Log_GetLevelStr(5);
      uint64_t v45 = dlerror();
      if (v42)
      {
        printf("%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d | %s\n", v43, 13, v44, "AVE_VCP", "Init", 99, a1, a2, a3, a4, a5, v45);
        __uint64_t v63 = AVE_GetCurrTime();
        int v46 = AVE_Log_GetLevelStr(5);
        dlerror();
        syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d | %s", v63, 13, v46, "AVE_VCP", "Init");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d | %s", v43, 13, v44, "AVE_VCP", "Init");
      }
    }
    unsigned int v47 = dlsym((void *)a1[3], "VCPAVECalculateFrameChecksum");
    a1[8] = (uint64_t)v47;
    if (!v47 && AVE_Log_CheckLevel(0xDu, 5))
    {
      int v48 = AVE_Log_CheckConsole(0xDu);
      __uint64_t v49 = AVE_GetCurrTime();
      int v50 = AVE_Log_GetLevelStr(5);
      int v51 = dlerror();
      if (v48)
      {
        printf("%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d | %s\n", v49, 13, v50, "AVE_VCP", "Init", 107, a1, a2, a3, a4, a5, v51);
        __uint64_t v64 = AVE_GetCurrTime();
        uint64_t v52 = AVE_Log_GetLevelStr(5);
        dlerror();
        syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d | %s", v64, 13, v52, "AVE_VCP", "Init");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d | %s", v49, 13, v50, "AVE_VCP", "Init");
      }
    }
    *a1 = a2;
    *((_DWORD *)a1 + 2) = a3;
    *((_DWORD *)a1 + 3) = a4;
    *((_DWORD *)a1 + 4) = a5;
    *((_DWORD *)a1 + 5) = v14;
  }
  else if (AVE_Log_CheckLevel(0xDu, 5))
  {
    int v21 = AVE_Log_CheckConsole(0xDu);
    __uint64_t v22 = AVE_GetCurrTime();
    int v23 = AVE_Log_GetLevelStr(5);
    int v24 = dlerror();
    if (v21)
    {
      printf("%lld %d AVE %s: %s::%s:%d Unable to open VCP lib %p %lld %d %d %d | %s\n", v22, 13, v23, "AVE_VCP", "Init", 57, a1, a2, a3, a4, a5, v24);
      __uint64_t v22 = AVE_GetCurrTime();
      int v23 = AVE_Log_GetLevelStr(5);
      dlerror();
    }
    syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to open VCP lib %p %lld %d %d %d | %s", v22, 13, v23, "AVE_VCP", "Init");
  }
  if (AVE_Log_CheckLevel(0xDu, 6))
  {
    int v53 = AVE_Log_CheckConsole(0xDu);
    __uint64_t v54 = AVE_GetCurrTime();
    uint64_t v55 = AVE_Log_GetLevelStr(6);
    if (v53)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %d %d %d %d\n", v54, 13, v55, "AVE_VCP", "Init", a1, a2, a3, a4, a5, 0);
      __uint64_t v56 = AVE_GetCurrTime();
      __uint64_t v60 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %d %d %d", v56, 13, v60);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %d %d %d", v54, 13, v55);
    }
  }
  return 0;
}

uint64_t AVE_VCP::Uninit(AVE_VCP *this)
{
  uint64_t v2 = *(void *)this;
  if (AVE_Log_CheckLevel(0xDu, 6))
  {
    int v3 = AVE_Log_CheckConsole(0xDu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v3)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld\n", CurrTime, 13, LevelStr, "AVE_VCP", "Uninit", this, v2);
      __uint64_t CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld", CurrTime);
  }
  CFMutableDictionaryRef v6 = (void *)*((void *)this + 3);
  if (v6 && *((void *)this + 4))
  {
    uint64_t v7 = (void (*)(void))dlsym(v6, "VCPAVEContextRelease");
    if (v7)
    {
      v7(*((void *)this + 4));
    }
    else if (AVE_Log_CheckLevel(0xDu, 5))
    {
      int v8 = AVE_Log_CheckConsole(0xDu);
      __uint64_t v9 = AVE_GetCurrTime();
      int v10 = AVE_Log_GetLevelStr(5);
      uint64_t v11 = *(void *)this;
      int v12 = dlerror();
      if (v8)
      {
        printf("%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld | %s\n", v9, 13, v10, "AVE_VCP", "Uninit", 150, this, v11, v12);
        __uint64_t v9 = AVE_GetCurrTime();
        int v10 = AVE_Log_GetLevelStr(5);
        dlerror();
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld | %s", v9, 13, v10);
    }
  }
  *((void *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (AVE_Log_CheckLevel(0xDu, 6))
  {
    int v13 = AVE_Log_CheckConsole(0xDu);
    __uint64_t v14 = AVE_GetCurrTime();
    int v15 = AVE_Log_GetLevelStr(6);
    if (v13)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %d\n", v14, 13, v15, "AVE_VCP", "Uninit", this, v2, 0);
      __uint64_t v14 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d", v14, 13);
  }
  return 0;
}

uint64_t AVE_VCP::AllocDPB(AVE_VCP *this, const __CFDictionary *a2, uint64_t a3, const __CFArray **a4)
{
  if (AVE_Log_CheckLevel(0xDu, 8))
  {
    int v8 = AVE_Log_CheckConsole(0xDu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(8);
    if (v8)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p 0x%x %p\n", CurrTime, 13, LevelStr, "AVE_VCP", "AllocDPB", this, *(void *)this, a2, a3, a4);
      __uint64_t v11 = AVE_GetCurrTime();
      int v24 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p 0x%x %p", v11, 13, v24, "AVE_VCP");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p 0x%x %p", CurrTime, 13, LevelStr, "AVE_VCP");
    }
  }
  int v12 = (uint64_t (*)(const __CFDictionary *, void, void, void, uint64_t))*((void *)this + 5);
  if (v12)
  {
    CFArrayRef v13 = (const __CFArray *)v12(a2, *((unsigned int *)this + 5), *((unsigned int *)this + 3), *((unsigned int *)this + 4), a3);
    if (v13)
    {
      uint64_t v14 = 0;
    }
    else
    {
      if (AVE_Log_CheckLevel(0xDu, 5))
      {
        int v15 = AVE_Log_CheckConsole(0xDu);
        __uint64_t v16 = AVE_GetCurrTime();
        uint64_t v17 = AVE_Log_GetLevelStr(5);
        if (v15)
        {
          printf("%lld %d AVE %s: %s::%s:%d fail to allocate DPB %p %lld %p %d %d %d 0x%x\n", v16, 13, v17, "AVE_VCP", "AllocDPB", 189, this, *(void *)this, a2, *((_DWORD *)this + 5), *((_DWORD *)this + 3), *((_DWORD *)this + 4), a3);
          __uint64_t v18 = AVE_GetCurrTime();
          int v25 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: %s::%s:%d fail to allocate DPB %p %lld %p %d %d %d 0x%x", v18, 13, v25, "AVE_VCP", "AllocDPB");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d fail to allocate DPB %p %lld %p %d %d %d 0x%x", v16, 13, v17, "AVE_VCP", "AllocDPB");
        }
      }
      CFArrayRef v13 = 0;
      uint64_t v14 = 4294966293;
    }
  }
  else
  {
    CFArrayRef v13 = 0;
    uint64_t v14 = 4294966294;
  }
  *a4 = v13;
  if (AVE_Log_CheckLevel(0xDu, 8))
  {
    int v19 = AVE_Log_CheckConsole(0xDu);
    __uint64_t v20 = AVE_GetCurrTime();
    int v21 = AVE_Log_GetLevelStr(8);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p 0x%x %p %d\n", v20, 13, v21, "AVE_VCP", "AllocDPB", this, *(void *)this, a2, a3, a4, v14);
      __uint64_t v22 = AVE_GetCurrTime();
      __uint64_t v26 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p 0x%x %p %d", v22, 13, v26, "AVE_VCP", "AllocDPB");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p 0x%x %p %d", v20, 13, v21, "AVE_VCP", "AllocDPB");
    }
  }
  return v14;
}

uint64_t AVE_VCP::ScaleRefFrames(AVE_VCP *this, const __CFDictionary *a2, const __CFArray *a3)
{
  if (AVE_Log_CheckLevel(0xDu, 8))
  {
    int v6 = AVE_Log_CheckConsole(0xDu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p\n", CurrTime, 13, LevelStr, "AVE_VCP", "ScaleRefFrames", this, *(void *)this, a2, a3);
      __uint64_t v9 = AVE_GetCurrTime();
      __uint64_t v26 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p", v9, 13, v26);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p", CurrTime, 13, LevelStr);
    }
  }
  int v10 = (uint64_t (*)(uint64_t, const __CFDictionary *, const __CFArray *))*((void *)this + 6);
  if (v10 && (uint64_t v11 = *((void *)this + 4)) != 0)
  {
    uint64_t v12 = v10(v11, a2, a3);
    if (AVE_Log_CheckLevel(0xDu, 8))
    {
      int v13 = AVE_Log_CheckConsole(0xDu);
      __uint64_t v14 = AVE_GetCurrTime();
      int v15 = AVE_Log_GetLevelStr(8);
      if (v13)
      {
        printf("%lld %d AVE %s: %s::%s:%d %p %lld %p %p %p %d\n", v14, 13, v15, "AVE_VCP", "ScaleRefFrames", 224, this, *(void *)this, *((const void **)this + 4), a2, a3, v12);
        __uint64_t v16 = AVE_GetCurrTime();
        unsigned int v27 = AVE_Log_GetLevelStr(8);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %lld %p %p %p %d", v16, 13, v27, "AVE_VCP", "ScaleRefFrames", 224);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %lld %p %p %p %d", v14, 13, v15, "AVE_VCP", "ScaleRefFrames", 224);
      }
    }
    if (v12)
    {
      if (AVE_Log_CheckLevel(0xDu, 5))
      {
        int v17 = AVE_Log_CheckConsole(0xDu);
        __uint64_t v18 = AVE_GetCurrTime();
        int v19 = AVE_Log_GetLevelStr(5);
        if (v17)
        {
          printf("%lld %d AVE %s: %s::%s:%d fail to scale ref frame %p %lld %p %p %p %d\n", v18, 13, v19, "AVE_VCP", "ScaleRefFrames", 230, this, *(void *)this, *((const void **)this + 4), a2, a3, v12);
          __uint64_t v20 = AVE_GetCurrTime();
          BOOL v28 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: %s::%s:%d fail to scale ref frame %p %lld %p %p %p %d", v20, 13, v28, "AVE_VCP", "ScaleRefFrames", 230);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d fail to scale ref frame %p %lld %p %p %p %d", v18, 13, v19, "AVE_VCP", "ScaleRefFrames", 230);
        }
      }
      uint64_t v12 = 4294966296;
    }
  }
  else
  {
    uint64_t v12 = 4294966294;
  }
  if (AVE_Log_CheckLevel(0xDu, 8))
  {
    int v21 = AVE_Log_CheckConsole(0xDu);
    __uint64_t v22 = AVE_GetCurrTime();
    int v23 = AVE_Log_GetLevelStr(8);
    if (v21)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %d\n", v22, 13, v23, "AVE_VCP", "ScaleRefFrames", this, *(void *)this, a2, a3, v12);
      __uint64_t v24 = AVE_GetCurrTime();
      uint64_t v29 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %d", v24, 13, v29, "AVE_VCP");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %d", v22, 13, v23, "AVE_VCP");
    }
  }
  return v12;
}

uint64_t AVE_VCP::ChromaFilter(AVE_VCP *this, const __CFDictionary *a2, uint64_t a3, uint64_t a4)
{
  if (AVE_Log_CheckLevel(0xDu, 8))
  {
    int v8 = AVE_Log_CheckConsole(0xDu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(8);
    if (v8)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %d %d\n", CurrTime, 13, LevelStr, "AVE_VCP", "ChromaFilter", this, *(void *)this, a2, a3, a4);
      __uint64_t v11 = AVE_GetCurrTime();
      uint64_t v29 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %d %d", v11, 13, v29);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %d %d", CurrTime, 13, LevelStr);
    }
  }
  uint64_t v12 = (uint64_t (*)(uint64_t, const __CFDictionary *, uint64_t, uint64_t))*((void *)this + 7);
  if (v12 && (uint64_t v13 = *((void *)this + 4)) != 0)
  {
    uint64_t v14 = v12(v13, a2, a3, a4);
    if (AVE_Log_CheckLevel(0xDu, 8))
    {
      int v15 = AVE_Log_CheckConsole(0xDu);
      __uint64_t v16 = AVE_GetCurrTime();
      int v17 = AVE_Log_GetLevelStr(8);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %p %lld %p %p %d %d %d\n", v16, 13, v17, "AVE_VCP", "ChromaFilter", 264, this, *(void *)this, *((const void **)this + 4), a2, a3, a4, v14);
        __uint64_t v18 = AVE_GetCurrTime();
        int v30 = AVE_Log_GetLevelStr(8);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %lld %p %p %d %d %d", v18, 13, v30, "AVE_VCP", "ChromaFilter", 264);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %lld %p %p %d %d %d", v16, 13, v17, "AVE_VCP", "ChromaFilter", 264);
      }
    }
    if (v14)
    {
      if (AVE_Log_CheckLevel(0xDu, 5))
      {
        int v19 = AVE_Log_CheckConsole(0xDu);
        __uint64_t v20 = AVE_GetCurrTime();
        int v21 = AVE_Log_GetLevelStr(5);
        if (v19)
        {
          printf("%lld %d AVE %s: %s::%s:%d fail to filter chroma %p %lld %p %p %d %d %d\n", v20, 13, v21, "AVE_VCP", "ChromaFilter", 270, this, *(void *)this, *((const void **)this + 4), a2, a3, a4, v14);
          __uint64_t v22 = AVE_GetCurrTime();
          int v23 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: %s::%s:%d fail to filter chroma %p %lld %p %p %d %d %d", v22, 13, v23, "AVE_VCP", "ChromaFilter", 270);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d fail to filter chroma %p %lld %p %p %d %d %d", v20, 13, v21, "AVE_VCP", "ChromaFilter", 270);
        }
      }
      uint64_t v14 = 4294966296;
    }
  }
  else
  {
    uint64_t v14 = 4294966294;
  }
  if (AVE_Log_CheckLevel(0xDu, 8))
  {
    int v24 = AVE_Log_CheckConsole(0xDu);
    __uint64_t v25 = AVE_GetCurrTime();
    __uint64_t v26 = AVE_Log_GetLevelStr(8);
    if (v24)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %d %d\n", v25, 13, v26, "AVE_VCP", "ChromaFilter", this, *(void *)this, a2, a3, a4);
      __uint64_t v27 = AVE_GetCurrTime();
      __uint64_t v31 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d %d", v27, 13, v31);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d %d", v25, 13, v26);
    }
  }
  return v14;
}

uint64_t AVE_VCP::CalcChecksum(AVE_VCP *this, const __CFDictionary *a2, uint64_t a3, __CFDictionary *a4)
{
  if (AVE_Log_CheckLevel(0xDu, 8))
  {
    int v8 = AVE_Log_CheckConsole(0xDu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(8);
    if (v8)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %d %p\n", CurrTime, 13, LevelStr, "AVE_VCP", "CalcChecksum", this, *(void *)this, a2, a3, a4);
      __uint64_t v11 = AVE_GetCurrTime();
      int v32 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %d %p", v11, 13, v32, "AVE_VCP");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %d %p", CurrTime, 13, LevelStr, "AVE_VCP");
    }
  }
  if (*((void *)this + 8) && *((void *)this + 4))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFDictionaryRef v13 = Mutable;
      uint64_t v14 = (*((uint64_t (**)(void, const __CFDictionary *, uint64_t, uint64_t, CFMutableDictionaryRef))this
             + 8))(*((void *)this + 4), a2, a3, 1, Mutable);
      if (AVE_Log_CheckLevel(0xDu, 8))
      {
        int v15 = AVE_Log_CheckConsole(0xDu);
        __uint64_t v16 = AVE_GetCurrTime();
        int v17 = AVE_Log_GetLevelStr(8);
        if (v15)
        {
          printf("%lld %d AVE %s: %s::%s:%d %p %lld %p %p %d %p %d\n", v16, 13, v17, "AVE_VCP", "CalcChecksum", 311, this, *(void *)this, *((const void **)this + 4), a2, a3, v13, v14);
          __uint64_t v18 = AVE_GetCurrTime();
          int v33 = AVE_Log_GetLevelStr(8);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %p %lld %p %p %d %p %d", v18, 13, v33, "AVE_VCP", "CalcChecksum", 311, this);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %p %lld %p %p %d %p %d", v16, 13, v17, "AVE_VCP", "CalcChecksum", 311, this);
        }
      }
      if (v14)
      {
        if (AVE_Log_CheckLevel(0xDu, 5))
        {
          int v22 = AVE_Log_CheckConsole(0xDu);
          __uint64_t v23 = AVE_GetCurrTime();
          int v24 = AVE_Log_GetLevelStr(5);
          if (v22)
          {
            printf("%lld %d AVE %s: %s::%s:%d fail to calculate checksum %p %lld %p %p %d %p %d\n", v23, 13, v24, "AVE_VCP", "CalcChecksum", 318, this, *(void *)this, *((const void **)this + 4), a2, a3, v13, v14);
            __uint64_t v25 = AVE_GetCurrTime();
            __uint64_t v26 = AVE_Log_GetLevelStr(5);
            syslog(3, "%lld %d AVE %s: %s::%s:%d fail to calculate checksum %p %lld %p %p %d %p %d", v25, 13, v26, "AVE_VCP", "CalcChecksum", 318, this);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s::%s:%d fail to calculate checksum %p %lld %p %p %d %p %d", v23, 13, v24, "AVE_VCP", "CalcChecksum", 318, this);
          }
        }
        uint64_t v14 = 4294966296;
      }
      else
      {
        CFDictionaryApplyFunction(v13, (CFDictionaryApplierFunction)AVE_VCP::CalcChecksum(__CFDictionary const*,unsigned int,__CFDictionary*)::$_0::__invoke, a4);
      }
      CFRelease(v13);
    }
    else
    {
      if (AVE_Log_CheckLevel(0xDu, 4))
      {
        int v19 = AVE_Log_CheckConsole(0xDu);
        __uint64_t v20 = AVE_GetCurrTime();
        int v21 = AVE_Log_GetLevelStr(4);
        if (v19)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | fail to create dictionary\n", v20, 13, v21, "AVE_VCP", "CalcChecksum", 307, "pDict != __null");
          __uint64_t v20 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to create dictionary", v20);
      }
      uint64_t v14 = 4294966293;
    }
  }
  else
  {
    uint64_t v14 = 4294966294;
  }
  if (AVE_Log_CheckLevel(0xDu, 8))
  {
    int v27 = AVE_Log_CheckConsole(0xDu);
    __uint64_t v28 = AVE_GetCurrTime();
    uint64_t v29 = AVE_Log_GetLevelStr(8);
    if (v27)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %d %p %d\n", v28, 13, v29, "AVE_VCP", "CalcChecksum", this, *(void *)this, a2, a3, a4, v14);
      __uint64_t v30 = AVE_GetCurrTime();
      uint64_t v34 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d %p %d", v30, 13, v34, "AVE_VCP", "CalcChecksum");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d %p %d", v28, 13, v29, "AVE_VCP", "CalcChecksum");
    }
  }
  return v14;
}

void AVE_VCP_Create(uint64_t a1, int a2, int a3, int a4)
{
  if (AVE_Log_CheckLevel(0xDu, 6))
  {
    int v8 = AVE_Log_CheckConsole(0xDu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v8)
    {
      printf("%lld %d AVE %s: %s Enter %lld %d %d %d\n", CurrTime, 13, LevelStr, "AVE_VCP_Create", a1, a2, a3, a4);
      __uint64_t CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %lld %d %d %d", CurrTime);
  }
  operator new();
}

uint64_t AVE_VCP_Destroy(AVE_VCP *a1)
{
  if (AVE_Log_CheckLevel(0xDu, 6))
  {
    int v2 = AVE_Log_CheckConsole(0xDu);
    __uint64_t CurrTime = AVE_GetCurrTime();
    Leveluint64_t Str = AVE_Log_GetLevelStr(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", CurrTime, 13, LevelStr, "AVE_VCP_Destroy", a1);
      __uint64_t v5 = AVE_GetCurrTime();
      int v15 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 13, v15, "AVE_VCP_Destroy", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", CurrTime, 13, LevelStr, "AVE_VCP_Destroy", a1);
    }
  }
  if (a1)
  {
    AVE_VCP::Uninit(a1);
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    *((void *)a1 + 8) = 0;
    MEMORY[0x1BA9F01B0](a1, 0x1080C4079F274C8);
    uint64_t v6 = 0;
  }
  else
  {
    if (AVE_Log_CheckLevel(0xDu, 4))
    {
      int v7 = AVE_Log_CheckConsole(0xDu);
      __uint64_t v8 = AVE_GetCurrTime();
      __uint64_t v9 = AVE_Log_GetLevelStr(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p\n", v8, 13, v9, "AVE_VCP_Destroy", 398, "pcVCP != __null", 0);
        __uint64_t v8 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p", v8);
    }
    uint64_t v6 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0xDu, 6))
  {
    int v10 = AVE_Log_CheckConsole(0xDu);
    __uint64_t v11 = AVE_GetCurrTime();
    uint64_t v12 = AVE_Log_GetLevelStr(6);
    if (v10)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v11, 13, v12, "AVE_VCP_Destroy", 0, v6);
      __uint64_t v13 = AVE_GetCurrTime();
      __uint64_t v16 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v13, 13, v16, "AVE_VCP_Destroy", 0, v6);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v11, 13, v12, "AVE_VCP_Destroy", 0, v6);
    }
  }
  return v6;
}

void AVE_VCP::CalcChecksum(__CFDictionary const*,unsigned int,__CFDictionary*)::$_0::__invoke(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

BOOL interchange_compression::check_valid_lossy_level(interchange_compression *this, unsigned int a2)
{
  unsigned int v2 = this - 1;
  BOOL result = 0;
  if (a2 || v2 >= 2)
  {
    BOOL v3 = a2 == 6 || a2 == 8;
    BOOL v4 = v3;
    if (this != 2 || !v4)
    {
      BOOL v5 = a2 != 25 && a2 - 9 >= 2;
      BOOL v6 = !v5;
      if ((this != 3 || !v6) && (a2 > 0x1A || ((1 << a2) & 0x4C00000) == 0 || v2 >= 2)) {
        return 1;
      }
    }
  }
  return result;
}

interchange_compression::decompressor *interchange_decompress_plane(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, int a10, unsigned int a11, interchange_compression *a12)
{
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  if (a7) {
    uint64_t v12 = 16;
  }
  else {
    uint64_t v12 = 32;
  }
  uint64_t v106 = v12;
  if ((a6 | 2) != 0xA) {
    interchange_decompress_plane();
  }
  if (a7) {
    int v18 = 8;
  }
  else {
    int v18 = 1;
  }
  if (a7) {
    int v19 = 10;
  }
  else {
    int v19 = 3;
  }
  if (a7) {
    char v20 = 4;
  }
  else {
    char v20 = 5;
  }
  char v93 = v20;
  if (a6 == 8) {
    unsigned int v21 = v18;
  }
  else {
    unsigned int v21 = v19;
  }
  unsigned int v88 = interchange_compression::lossy_parameters[28 * v21 + 4 + a12];
  BOOL result = interchange_compression::decompressor::decompressor((interchange_compression::decompressor *)v113, v21, (interchange_compression *)a12, 0);
  memset(v114, 0, sizeof(v114));
  unsigned int v23 = a11 + a5;
  if (a11 + a5)
  {
    unsigned int v98 = 0;
    unsigned int v24 = (v106 - 1 + a4) >> v93;
    unsigned int v25 = (v106 - 1 + a5) >> v93;
    unsigned int v26 = 32 - __clz(v25 - 1);
    if (v25 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    unsigned int v28 = 32 - __clz(v24 - 1);
    unsigned int v77 = (v106 - 1 + a4) >> v93;
    if (v24 < 2) {
      unsigned int v28 = 0;
    }
    unsigned int v29 = a9 + a4;
    if (v28 >= v27) {
      uint64_t v30 = v27;
    }
    else {
      uint64_t v30 = v28;
    }
    char v31 = 5;
    if (a7) {
      char v31 = 3;
    }
    char v85 = v31;
    char v86 = 2 * v30;
    int v75 = &interchange_compression::lossy_parameters[28 * v21 + 8 + a12];
    uint64_t v76 = &interchange_compression::memory_parameters[11 * v21 + 7];
    uint64_t v82 = (v30 + 1) & 0x1FFFFFFFELL;
    uint64x2_t v81 = (uint64x2_t)vdupq_n_s64(v30 - 1);
    uint64_t v97 = (4 * a4);
    uint64_t v78 = (v106 * a4);
    int8x16_t v32 = (int8x16_t)vdupq_n_s64(1uLL);
    int64x2_t v33 = vdupq_n_s64(2uLL);
    uint64_t v80 = -a9 - a4 * a11;
    int v79 = -(2 * a4 * a11 + 2 * a9);
    int v96 = 8 * a4;
    int v34 = 2 * a4;
    int v35 = a4;
    int64x2_t v83 = v33;
    int8x16_t v84 = v32;
    int v87 = v30;
    unsigned int v103 = v23;
    do
    {
      if (!v29) {
        goto LABEL_74;
      }
      uint64_t v36 = 0;
      unint64_t v37 = v98 >> v93;
      int v92 = v37 * v77;
      int v105 = ~(-1 << *v76);
      unsigned int v104 = *v75;
      uint64x2_t v38 = (uint64x2_t)vdupq_n_s64(v37);
      int v39 = v79;
      uint64_t v40 = v80;
      uint64x2_t v91 = v38;
      do
      {
        unint64_t v41 = v36 >> v93;
        if (v30)
        {
          uint64x2_t v42 = (uint64x2_t)vdupq_n_s64(v41);
          int8x16_t v43 = 0uLL;
          uint64_t v44 = v82;
          int64x2_t v45 = (int64x2_t)xmmword_1BA78F600;
          do
          {
            int8x16_t v46 = v43;
            int64x2_t v47 = v45;
            uint64x2_t v48 = (uint64x2_t)vnegq_s64(v45);
            int8x16_t v49 = (int8x16_t)vaddq_s64(v47, v47);
            int8x16_t v43 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)vshlq_u64(v42, v48), v32), (uint64x2_t)v49), (int8x16_t)vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)vshlq_u64(v38, v48), v32), (uint64x2_t)vorrq_s8(v49, v32))), v46);
            int64x2_t v45 = vaddq_s64(v45, v33);
            v44 -= 2;
          }
          while (v44);
          int8x16_t v50 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v47, v81), v46, v43);
          int8x8_t v51 = vorr_s8(*(int8x8_t *)v50.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL));
        }
        else
        {
          int8x8_t v51 = 0;
        }
        int v52 = 0;
        int v53 = (const unsigned __int8 *)(a2 + (v41 + v92) * v88);
        __uint64_t v54 = (unsigned char *)(a1 + ((*(void *)&v51 | ((v41 | (v98 >> v93)) >> v30 << v86)) << v85));
        int v95 = v39;
        uint64_t v94 = v40;
        uint64_t v99 = v36;
        do
        {
          int v55 = 0;
          int v102 = v52;
          int v56 = v52 + v98;
          int v101 = v39;
          int v57 = v39;
          uint64_t v100 = v40;
          do
          {
            int v109 = v57;
            int v110 = v55;
            uint64_t v111 = v54;
            uint64_t v112 = v53;
            unsigned int v58 = *v54;
            int v108 = v58 & 0xF0;
            if (*v54) {
              int v59 = (v58 & v105) + 1;
            }
            else {
              int v59 = 0;
            }
            unsigned int v107 = v59;
            BOOL result = (interchange_compression::decompressor *)interchange_compression::decompressor::decompress((interchange_compression::decompressor *)v113, v53, v58, (unsigned int (*)[4][8][4])v114);
            unsigned int v23 = v103;
            uint64_t v60 = 0;
            unsigned int v61 = v109;
            int v62 = v40;
            __uint64_t v63 = &v114[0][0][1];
            do
            {
              uint64_t v64 = 0;
              BOOL v66 = v56 + (int)v60 >= a11 && v56 + (int)v60 < v103;
              unsigned int v67 = v61;
              long long v68 = v63;
              do
              {
                BOOL v69 = (int)v36 + (int)v64 >= a9 && v66;
                if ((int)v36 + (int)v64 < v29 && v69)
                {
                  unsigned int v71 = *(v68 - 1);
                  if (a7)
                  {
                    BOOL result = (interchange_compression::decompressor *)v67;
                    uint64_t v72 = v67 + 1;
                    if (a6 == 8)
                    {
                      *(unsigned char *)(a3 + v67) = v71;
                      unsigned int v71 = *v68;
LABEL_60:
                      *(unsigned char *)(a3 + v72) = v71;
                      goto LABEL_63;
                    }
                    *(_WORD *)(a3 + 2 * v67) = v71;
                    unsigned int v71 = *v68;
                  }
                  else
                  {
                    uint64_t v72 = (v62 + v64);
                    if (a6 == 8) {
                      goto LABEL_60;
                    }
                  }
                  *(_WORD *)(a3 + 2 * v72) = v71;
                }
LABEL_63:
                ++v64;
                v68 += 4;
                v67 += 2;
              }
              while (v64 != 8);
              ++v60;
              v63 += 32;
              v62 += v35;
              v61 += v34;
            }
            while (v60 != 4);
            if (v108 != 240 || a12 == 0) {
              uint64_t v74 = v107;
            }
            else {
              uint64_t v74 = v104;
            }
            int v53 = &v112[v74];
            __uint64_t v54 = v111 + 1;
            int v55 = v110 + 8;
            LODWORD(v40) = v40 + 8;
            int v57 = v109 + 16;
            LODWORD(v36) = v36 + 8;
          }
          while (v110 + 8 < v106);
          int v52 = v102 + 4;
          LODWORD(v36) = v99;
          uint64_t v40 = v100 + v97;
          int v39 = v101 + v96;
        }
        while (v102 + 4 < v106);
        uint64_t v36 = v99 + v106;
        uint64_t v40 = v94 + v106;
        int v39 = v95 + 2 * v106;
        LODWORD(v30) = v87;
        int64x2_t v33 = v83;
        int8x16_t v32 = v84;
        uint64x2_t v38 = v91;
      }
      while ((int)v99 + (int)v106 < v29);
LABEL_74:
      v80 += v78;
      v79 += 2 * v78;
      v98 += v106;
    }
    while (v98 < v23);
  }
  return result;
}

uint64_t interchange_compression::decompressor::decompress(interchange_compression::decompressor *this, const unsigned __int8 *a2, unsigned int a3, unsigned int (*a4)[4][8][4])
{
  int v7 = this;
  uint64_t v222 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = interchange_compression::memory_parameters[11 * *((unsigned int *)this + 85) + 7];
  if ((*((_DWORD *)this + 87) - 1) <= 2)
  {
    unsigned int subblock_size = interchange_compression::decompressor::get_subblock_size(this, a3);
    int v10 = *((_DWORD *)v7 + 85);
    if (subblock_size > interchange_compression::lossy_parameters[28 * v10 + 8 + *((unsigned int *)v7 + 87)]
      || subblock_size < interchange_compression::decompressor::get_subblock_size(v7, LOBYTE(interchange_compression::memory_parameters[11 * v10 + 8])))
    {
      goto LABEL_233;
    }
    if ((~a3 & 0xF0) == 0)
    {
      uint64_t v11 = *((unsigned int *)v7 + 87);
      if ((v11 - 1) <= 2)
      {
        uint64_t v12 = 0;
        uint64_t v13 = *((unsigned int *)v7 + 85);
        unint64_t v179 = (unint64_t)interchange_compression::lossy_parameters[28 * v13 + 8 + v11] >> 2;
        int16x8_t v14 = (int16x8_t)vtstq_s32(vdupq_n_s32(a3), (int32x4_t)xmmword_1BA79C2A0);
        *(int8x8_t *)v14.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v14), (int8x8_t)0x1000100010001);
        unsigned __int32 v198 = vmovn_s16(v14).u32[0];
        int v177 = a4;
        uint64_t v178 = a2;
        __uint64_t v176 = v7;
        while (1)
        {
          uint64_t v15 = *((unsigned int *)v7 + 87);
          uint64_t v180 = v12;
          __uint64_t v16 = &a2[v12 * v179];
          int v17 = *((_DWORD *)v7 + 88);
          uint64_t v189 = v13;
          int v197 = v17;
          if (!v199[v12 - 4]) {
            break;
          }
          uint64_t v18 = 0;
          unsigned int v19 = interchange_compression::lossy_parameters[28 * v13 + 8 + v15] >> 2;
          int v216 = v16;
          int v215 = v19;
          char v219 = 1;
          unsigned int v218 = 0;
          unsigned int v217 = 8 * v19;
          char v20 = &interchange_compression::format_table[13 * v13];
          LODWORD(v21) = v20[2];
          unsigned int v22 = v17 & 0xFFFFFFFE;
          if (v21 <= 1) {
            uint64_t v21 = 1;
          }
          else {
            uint64_t v21 = v21;
          }
          int v183 = (interchange_compression *)(v20 + 3);
          uint64_t v186 = v21;
          __uint64_t v181 = &interchange_compression::lossy_parameters[28 * v13 + 12 + 4 * v15];
          unsigned int v23 = (unsigned int *)v199;
          do
          {
            uint64_t v194 = v18;
            unsigned int v25 = v181;
            unsigned int v24 = v183;
            CMTimeValue v190 = v23;
            uint64_t v26 = v186;
            if (v13 != 27)
            {
              do
              {
                int v28 = *v25++;
                int v27 = v28;
                int v30 = *(_DWORD *)v24;
                unsigned int v24 = (interchange_compression *)((char *)v24 + 4);
                int v29 = v30;
                int v31 = -1 << v30;
                if (v30 == 32) {
                  unsigned int v32 = -1;
                }
                else {
                  unsigned int v32 = ~v31;
                }
                int v33 = 1 << (v29 - 1);
                unsigned int v34 = (bit_pack::unpack((bit_pack *)v214, v29 - v27) << v27) & v32;
                BOOL v36 = v22 != 2 || v34 != v33;
                if (v34 >> v27 == v32 >> v27) {
                  int v37 = v32;
                }
                else {
                  int v37 = ((1 << (v27 - 1)) - ((v34 >> v27) & 1)) | v34;
                }
                if (!v36 || v34 == 0) {
                  unsigned int v39 = v34;
                }
                else {
                  unsigned int v39 = v37;
                }
                if (!v27) {
                  unsigned int v39 = v34;
                }
                if (v197 != 1) {
                  unsigned int v34 = v39;
                }
                if (v22 == 2) {
                  int v40 = v33;
                }
                else {
                  int v40 = 0;
                }
                *v23++ = v34 ^ v40;
                --v26;
              }
              while (v26);
            }
            uint64_t v18 = v194 + 1;
            uint64_t v13 = v189;
            unsigned int v23 = v190 + 4;
          }
          while (v194 != 7);
          a4 = v177;
          a2 = v178;
          int v7 = v176;
LABEL_193:
          uint64_t v141 = 0;
          int v142 = v199;
          do
          {
            if (*((_DWORD *)v7 + 85) == 27)
            {
              uint64_t v13 = 27;
            }
            else
            {
              unint64_t v143 = 0;
              uint32x4_t v144 = (uint32x4_t)vdupq_n_s32((int)v141 + 8 * (int)v180);
              v145.i64[0] = 0x100000001;
              v145.i64[1] = 0x100000001;
              int8x16_t v146 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v144, (uint32x4_t)xmmword_1BA7A0AB0), v145), (uint32x4_t)xmmword_1BA7A0AC0);
              int8x16_t v147 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v144, (uint32x4_t)xmmword_1BA7A0AD0), v145), (uint32x4_t)xmmword_1BA7A0AC0);
              __uint64_t v148 = (*a4)[(unint64_t)(vorr_s8(*(int8x8_t *)v146.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v146, v146, 8uLL)).u32[0] | v146.i32[1])][vorr_s8(*(int8x8_t *)v147.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v147, v147, 8uLL)).u32[0] | v147.i32[1]];
              do
              {
                v148[v143] = *(_DWORD *)&v142[4 * v143];
                ++v143;
                uint64_t v13 = *((unsigned int *)v7 + 85);
              }
              while (v143 < interchange_compression::format_table[13 * v13 + 2]);
            }
            ++v141;
            v142 += 16;
          }
          while (v141 != 8);
          uint64_t v12 = v180 + 1;
          if (v180 == 3) {
            return 1;
          }
        }
        int v195 = 0;
        CMTimeEpoch v187 = &interchange_compression::format_table[13 * v13];
        unsigned int v184 = v187[2];
        int v174 = *((_DWORD *)v7 + 87);
        unsigned int v41 = interchange_compression::lossy_parameters[28 * v13 + 8 + v15];
        int v216 = &a2[v12 * v179];
        v41 *= 2;
        int v215 = (v41 >> 3) & 0x7FFFFFF;
        char v219 = 1;
        unsigned int v218 = 0;
        unsigned int v182 = v41;
        unsigned int v217 = v41 & 0x3FFFFFF8;
        if (v13 == 27)
        {
LABEL_42:
          *(void *)__uint64_t v211 = 0;
          uint64_t v212 = 0;
          memset(v210, 0, sizeof(v210));
          v209[0] = interchange_compression::get_id((interchange_compression *)v187[3]);
          uint64x2_t v42 = &interchange_compression::format_table[13 * v189];
          v209[1] = interchange_compression::get_id((interchange_compression *)v42[4]);
          v209[2] = interchange_compression::get_id((interchange_compression *)v42[5]);
          v209[3] = interchange_compression::get_id((interchange_compression *)v42[6]);
          unsigned int v43 = v184;
          interchange_compression::derive_sharing(v184, (uint64_t)v209, v221, v211, (int (*)[4])v210, v44);
          uint64_t v207 = 0;
          uint64_t v208 = 0;
          uint64_t v205 = 0;
          uint64_t v206 = 0;
          if (v189 == 27)
          {
            uint64_t v203 = 0;
            uint64_t v204 = 0;
            uint64_t v201 = 0;
            uint64_t v202 = 0;
            int v45 = v197;
            int v46 = v195;
          }
          else
          {
            unint64_t v74 = 0;
            uint64_t v193 = (v174 - 1);
            if (v184 <= 1) {
              uint64_t v75 = 1;
            }
            else {
              uint64_t v75 = v184;
            }
            uint64_t v175 = v75;
            uint64_t v188 = 4 * v75;
            do
            {
              unsigned int v76 = interchange_compression::format_table[13 * v189 + 3 + v74 / 4];
              uint64_t id = interchange_compression::get_id((interchange_compression *)v76);
              int v78 = v221[v74 / 4];
              int v79 = &interchange_compression::dq_consts[160 * id + 10 * v78];
              int v80 = interchange_compression::dq_lossy_level[3 * id + v193];
              int v81 = v79[5];
              *(_DWORD *)((char *)&v207 + v74) = v80 + v79[4];
              uint64_t v82 = (unsigned int *)((char *)&v205 + v74);
              *(_DWORD *)((char *)&v205 + v74) = v81 + v80;
              interchange_compression::adjust_level(id, v78, v211[v74 / 4], v210[v74 / 4], (uint64_t *)((char *)&v207 + v74), (unsigned int *)((char *)&v205 + v74), v83);
              unsigned int v84 = *(_DWORD *)((char *)&v207 + v74);
              if (v76 < v84) {
                unsigned int v84 = v76;
              }
              *(_DWORD *)((char *)&v207 + v74) = v84;
              if (v81) {
                unsigned int v85 = v76;
              }
              else {
                unsigned int v85 = 0;
              }
              if (v85 >= *v82) {
                unsigned int v85 = *v82;
              }
              *uint64_t v82 = v85;
              v74 += 4;
            }
            while (v188 != v74);
            if (v189 == 19 && v221[3] == 1 && v210[3] - HIDWORD(v212) <= 1)
            {
              uint64_t v207 = 0;
              uint64_t v208 = 0;
              uint64_t v205 = 0;
              uint64_t v206 = 0;
            }
            uint64_t v86 = v175;
            int v87 = &interchange_compression::format_table[13 * v189 + 3];
            unsigned int v88 = (unsigned int *)&v203;
            uint64_t v203 = 0;
            uint64_t v204 = 0;
            __uint64_t v89 = v220;
            int v90 = (unsigned int *)&v207;
            uint64x2_t v91 = v221;
            do
            {
              int v92 = *v91++;
              if (v92 || *v87 - 8 > 4)
              {
                unsigned int v93 = *v90;
                *unsigned int v88 = bit_pack::unpack((bit_pack *)v214, *v90) << (*v87 - v93);
                v195 += v93;
              }
              else
              {
                *unsigned int v88 = *v89;
              }
              ++v88;
              ++v89;
              ++v87;
              ++v90;
              --v86;
            }
            while (v86);
            uint64_t v201 = 0;
            uint64_t v202 = 0;
            uint64_t v94 = &v201;
            int v95 = &v205;
            int v45 = v197;
            int v46 = v195;
            unsigned int v43 = v184;
            uint64_t v96 = v175;
            do
            {
              int v97 = *(_DWORD *)v95;
              int v95 = (uint64_t *)((char *)v95 + 4);
              if (v97)
              {
                int v98 = bit_pack::get((bit_pack *)v214, v218, 3u);
                v218 += 3;
                *(_DWORD *)uint64_t v94 = v98;
                v46 += 3;
              }
              uint64_t v94 = (uint64_t *)((char *)v94 + 4);
              --v96;
            }
            while (v96);
          }
          unsigned int v99 = (v182 & 0x3FFFFFFE) - v46;
          unsigned int v100 = v99 / 7;
          unsigned int v101 = v218 + v99 - 7 * (v99 / 7);
          unsigned int v218 = v101;
          unsigned int v102 = v217;
          if (v101 > v217) {
            interchange_compression::decompressor::decompress();
          }
          LODWORD(v103) = v43;
          uint64_t v104 = 0;
          unsigned int v196 = v45 & 0xFFFFFFFE;
          memset(&v200[1], 0, 96);
          if (v103 <= 1) {
            uint64_t v103 = 1;
          }
          else {
            uint64_t v103 = v103;
          }
          uint64_t v185 = (interchange_compression *)v103;
          int v105 = v200;
          v200[0] = 0uLL;
          uint64_t v106 = v189;
          do
          {
            if (v106 == 27)
            {
              unsigned int v107 = 0;
            }
            else
            {
              unsigned int v107 = 0;
              int v108 = (unsigned int *)&v205;
              int v109 = v105;
              int v110 = v185;
              do
              {
                unsigned int v112 = *v108++;
                unsigned int v111 = v112;
                if (v112)
                {
                  _DWORD *v109 = bit_pack::unpack((bit_pack *)v214, v111);
                  v107 += v111;
                }
                v109 += 7;
                int v110 = (interchange_compression *)((char *)v110 - 1);
              }
              while (v110);
              if (v107 > v100) {
                interchange_compression::decompressor::decompress();
              }
              unsigned int v101 = v218;
              unsigned int v102 = v217;
              uint64_t v106 = v189;
            }
            v101 += v100 - v107;
            unsigned int v218 = v101;
            if (v101 > v102) {
              interchange_compression::decompressor::decompress();
            }
            ++v104;
            int v105 = (_OWORD *)((char *)v105 + 4);
          }
          while (v104 != 7);
          if (v106 != 27)
          {
            uint64_t v113 = 0;
            uint64_t v114 = v199;
            do
            {
              unsigned int v115 = interchange_compression::format_table[13 * v106 + 3 + (void)v113];
              int v116 = interchange_compression::get_id((interchange_compression *)v115);
              uint64_t v117 = 0;
              unsigned int v118 = 0;
              unint64_t v119 = *(void *)&interchange_compression::dq_consts[160 * v116 + 2 + 10 * v221[(void)v113]];
              int v120 = *((_DWORD *)&v205 + (void)v113);
              unint64_t v121 = v119 >> v120;
              if (v119 >> v120 <= 1) {
                unint64_t v121 = 1;
              }
              if (v121 >> 1 >= (unint64_t)(1 << (v115
                                                         - *((_DWORD *)&v207 + (void)v113))) >> 1)
                unint64_t v122 = (unint64_t)(1 << (v115
                                                - *((_DWORD *)&v207 + (void)v113))) >> 1;
              else {
                unint64_t v122 = v121 >> 1;
              }
              unint64_t v123 = (1 << (v115 - 1));
              uint64_t v124 = *((unsigned int *)&v203 + (void)v113);
              unint64_t v125 = ~(-1 << v120);
              unint64_t v126 = v119 + v124;
              unint64_t v127 = 1 << v115;
              if (!v124) {
                unint64_t v122 = 0;
              }
              if (v115 == 16) {
                unint64_t v128 = 31744;
              }
              else {
                unint64_t v128 = 2139095040;
              }
              if (v115 == 16) {
                unint64_t v129 = 64512;
              }
              else {
                unint64_t v129 = 4286578688;
              }
              if (v115 == 16) {
                unint64_t v130 = 32256;
              }
              else {
                unint64_t v130 = 2143289344;
              }
              unint64_t v131 = 4290772992;
              if (v115 == 16) {
                unint64_t v131 = 65024;
              }
              int v132 = v114;
              do
              {
                if (v120)
                {
                  if (v117 == *((_DWORD *)&v201 + (void)v113))
                  {
                    unint64_t v133 = v122;
                    BOOL v134 = v124 == v123;
                  }
                  else
                  {
                    unint64_t v135 = *((unsigned int *)v200 + 7 * (void)v113 + v118);
                    BOOL v134 = (v123 - v124) / v121 == v135;
                    if (v135 > v125) {
                      interchange_compression::decompressor::decompress();
                    }
                    if (v135 | v124)
                    {
                      if (v126 < v127 || (unint64_t v133 = v127 - 1, v135 != v125)) {
                        unint64_t v133 = (v121 >> 1) + v121 * v135;
                      }
                    }
                    else
                    {
                      unint64_t v133 = 0;
                    }
                    ++v118;
                  }
                }
                else
                {
                  unint64_t v133 = 0;
                  BOOL v134 = v121 > v123 - v124;
                }
                unint64_t v136 = v133 + v124;
                unint64_t v137 = v136;
                if (v197 == 1)
                {
                  if (v136 < v128 || (unint64_t v137 = (v128 - 1), v136 >= v130))
                  {
                    if (v136 < v130 || (unint64_t v137 = v123, v136 >= v123))
                    {
                      BOOL v138 = v136 < v131 && v136 >= v129;
                      unint64_t v137 = (v129 - 1);
                      if (!v138) {
                        unint64_t v137 = v136;
                      }
                    }
                  }
                }
                if (v137 >= v127) {
                  int v139 = v127 - 1;
                }
                else {
                  int v139 = v137;
                }
                if (v134) {
                  int v140 = 0;
                }
                else {
                  int v140 = v139 ^ v123;
                }
                if (v196 != 2) {
                  int v140 = v139;
                }
                _DWORD *v132 = v140;
                v132 += 4;
                ++v117;
              }
              while (v117 != 8);
              uint64_t v113 = (interchange_compression *)((char *)v113 + 1);
              v114 += 4;
              uint64_t v106 = v189;
            }
            while (v113 != v185);
          }
          a2 = v178;
          goto LABEL_193;
        }
        int v47 = 0;
        if (v184 <= 1) {
          uint64_t v48 = 1;
        }
        else {
          uint64_t v48 = v184;
        }
        int8x16_t v49 = &interchange_compression::format_table[13 * v13 + 3];
        int8x16_t v50 = v213;
        int8x8_t v51 = v49;
        uint64_t v191 = v48;
        do
        {
          int v53 = *v51++;
          int v52 = v53;
          if (v53 == 2)
          {
            unsigned int v54 = 1;
          }
          else if ((v52 - 8) >= 5)
          {
            unsigned int v54 = 4;
            if (v52 != 16 && v52 != 32) {
              interchange_compression::decompressor::decompress();
            }
          }
          else
          {
            unsigned int v54 = 3;
          }
          *v50++ = bit_pack::unpack((bit_pack *)v214, v54);
          v47 += v54;
          --v48;
        }
        while (v48);
        int v195 = v47;
        uint64_t v55 = 0;
        int v56 = v221;
        int v57 = v220;
        unsigned int v58 = (int *)v213;
        uint64_t v59 = v191;
        while (1)
        {
          unsigned int v61 = *v49++;
          unsigned int v60 = v61;
          if (v61 == 2)
          {
            char v62 = *v58;
            unsigned int *v57 = 0;
            int v63 = v62 & 1;
            uint64_t v64 = v56;
LABEL_95:
            *uint64_t v64 = v63;
            goto LABEL_96;
          }
          int v192 = v49;
          uint64_t v65 = v59;
          BOOL v66 = v60 - 8 < 5 || v60 == 16;
          if (!v66 && v60 != 32) {
            interchange_compression::decompressor::decompress();
          }
          int v67 = *v58;
          unsigned int v68 = v60 & 0xFFFFFFFD;
          if (((v60 & 0xFFFFFFFD) == 8 || v60 == 12) && v67 == 0)
          {
            char v71 = bit_pack::get((bit_pack *)v214, v218, 2u);
            v218 += 2;
            v195 += 2;
            uint64_t v64 = &v221[v55];
            unsigned int *v57 = 0;
            *int v56 = 0;
            int v63 = v71 & 3;
            if (v68 == 8)
            {
              uint64_t v59 = v65;
              if (v63 != 2)
              {
                int8x16_t v49 = v192;
                if (v63 == 1)
                {
                  int v63 = 0;
                  unsigned int *v57 = ~(-1 << v60);
                  goto LABEL_95;
                }
                if ((v71 & 3) != 0)
                {
                  int v63 = 2;
                  goto LABEL_95;
                }
                uint64_t v64 = v56;
                uint64_t v72 = v57;
                goto LABEL_94;
              }
              int v63 = 1;
LABEL_90:
              int8x16_t v49 = v192;
              goto LABEL_95;
            }
            uint64_t v59 = v65;
            if (v60 == 12)
            {
              int8x16_t v49 = v192;
              if (v63 == 2 || v63 == 1) {
                goto LABEL_95;
              }
              if ((v71 & 3) != 0)
              {
                int v63 = 3;
                goto LABEL_95;
              }
              uint64_t v72 = v57;
              uint64_t v64 = v56;
              goto LABEL_94;
            }
          }
          else
          {
            uint64_t v64 = &v221[v55];
            unsigned int *v57 = 0;
            if (v60 > 0xF)
            {
              int v63 = v67 & 0xF;
              goto LABEL_90;
            }
            uint64_t v72 = &v220[v55];
            int v73 = v67 & 7;
            *int v56 = v73;
            if (v68 == 8)
            {
              if (!v73)
              {
                int8x16_t v49 = v192;
                goto LABEL_94;
              }
              int v63 = v73 + 2;
              goto LABEL_90;
            }
            if (v60 == 12)
            {
              int8x16_t v49 = v192;
              if (v73)
              {
                int v63 = v73 + 3;
                goto LABEL_95;
              }
LABEL_94:
              int v63 = 0;
              *uint64_t v72 = 0;
              goto LABEL_95;
            }
          }
          int8x16_t v49 = v192;
LABEL_96:
          ++v55;
          ++v56;
          ++v57;
          ++v58;
          if (!--v59) {
            goto LABEL_42;
          }
        }
      }
    }
  }
  uint64_t v149 = *((unsigned int *)v7 + 85);
  if (interchange_compression::memory_parameters[11 * v149 + 8] == a3)
  {
    int v150 = (a3 & ~(-1 << interchange_compression::memory_parameters[11 * v149 + 7])) + 1;
    int v216 = a2;
    int v215 = v150 << (v149 == 26);
    char v219 = 1;
    unsigned int v218 = 0;
    unsigned int v217 = 8 * v215;
    if (v149 == 27)
    {
      int v151 = 27;
    }
    else
    {
      unint64_t v160 = 0;
      do
      {
        (*a4)[0][0][v160] = bit_pack::unpack((bit_pack *)v214, interchange_compression::format_table[13 * v149 + 3 + v160]);
        ++v160;
        uint64_t v149 = *((unsigned int *)v7 + 85);
      }
      while (v160 < interchange_compression::format_table[13 * v149 + 2]);
      int v151 = *((_DWORD *)v7 + 85);
    }
    uint64_t v161 = 0;
    for (uint64_t i = 0; i != 4; ++i)
    {
      uint64_t v163 = 0;
      uint64_t v164 = v161;
      do
      {
        if (v151 == 27)
        {
          int v151 = 27;
        }
        else
        {
          unint64_t v165 = 0;
          do
          {
            *(unsigned int *)((char *)&(*a4)[0][0][v165] + v164) = (*a4)[0][0][v165];
            ++v165;
            int v151 = *((_DWORD *)v7 + 85);
          }
          while (v165 < interchange_compression::format_table[13 * v151 + 2]);
        }
        ++v163;
        v164 += 16;
      }
      while (v163 != 8);
      v161 += 128;
    }
    return 1;
  }
  if (interchange_compression::memory_parameters[11 * v149 + 9] == a3)
  {
    unsigned int v152 = 0;
    unsigned int v153 = interchange_compression::memory_parameters[11 * v149 + 5];
    int v216 = a2;
    int v215 = v153;
    char v219 = 1;
    unsigned int v218 = 0;
    unsigned int v217 = 8 * v153;
    do
    {
      if (v149 != 27)
      {
        unint64_t v154 = 0;
        uint32x4_t v155 = (uint32x4_t)vdupq_n_s32(v152);
        v156.i64[0] = 0x100000001;
        v156.i64[1] = 0x100000001;
        int8x16_t v157 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v155, (uint32x4_t)xmmword_1BA7A0AD0), v156), (uint32x4_t)xmmword_1BA7A0AC0);
        int8x16_t v158 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v155, (uint32x4_t)xmmword_1BA7A0AB0), v156), (uint32x4_t)xmmword_1BA7A0AC0);
        uint64_t v159 = (*a4)[(unint64_t)(vorr_s8(*(int8x8_t *)v158.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v158, v158, 8uLL)).u32[0] | v158.i32[1])][vorr_s8(*(int8x8_t *)v157.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v157, v157, 8uLL)).u32[0] | v157.i32[1]];
        do
        {
          v159[v154] = bit_pack::unpack((bit_pack *)v214, interchange_compression::format_table[13 * v149 + 3 + v154]);
          ++v154;
          uint64_t v149 = *((unsigned int *)v7 + 85);
        }
        while (v154 < interchange_compression::format_table[13 * v149 + 2]);
      }
      ++v152;
    }
    while (v152 != 32);
    if (*((_DWORD *)v7 + 87)) {
      interchange_compression::decompressor::decompress();
    }
    return 1;
  }
  if (interchange_compression::memory_parameters[11 * v149 + 10] == a3)
  {
    for (unsigned int j = 0; j != 32; ++j)
    {
      uint32x4_t v168 = (uint32x4_t)vdupq_n_s32(j);
      v169.i64[0] = 0x100000001;
      v169.i64[1] = 0x100000001;
      int8x16_t v170 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v168, (uint32x4_t)xmmword_1BA7A0AD0), v169), (uint32x4_t)xmmword_1BA7A0AC0);
      int8x16_t v171 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v168, (uint32x4_t)xmmword_1BA7A0AB0), v169), (uint32x4_t)xmmword_1BA7A0AC0);
      interchange_compression::format_info::unpack_pixel((interchange_compression::format_info *)&interchange_compression::format_table[13 * v149], a2, (*a4)[(unint64_t)(vorr_s8(*(int8x8_t *)v171.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v171, v171, 8uLL)).u32[0] | v171.i32[1])][vorr_s8(*(int8x8_t *)v170.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v170, v170, 8uLL)).u32[0] | v170.i32[1]]);
      uint64_t v149 = *((unsigned int *)v7 + 85);
      a2 += interchange_compression::format_table[13 * v149 + 1];
    }
    if (*((_DWORD *)v7 + 87)) {
      interchange_compression::decompressor::decompress();
    }
    return 1;
  }
  unsigned int v172 = ((a3 & ~(-1 << v8)) + 1) << (v149 == 26);
  unsigned int v173 = interchange_compression::memory_parameters[11 * v149 + 5];
  int v216 = a2;
  if (v173 >= v172) {
    unsigned int v173 = v172;
  }
  int v215 = v173;
  char v219 = 1;
  unsigned int v218 = 0;
  unsigned int v217 = 8 * v173;
  if (interchange_compression::decompressor::unpack_header(v7, a2, a3, (bit_pack *)v214))
  {
    interchange_compression::decompressor::decompress_pixels(v7, a2, a3, (bit_pack *)v214, a4);
    interchange_compression::decompressor::decorrelate(v7, a4);
    return 1;
  }
LABEL_233:
  interchange_compression::decompressor::fill_subblock_error_color((uint64_t)v7, a4);
  return 0;
}

uint64_t interchange_compression::header::set(interchange_compression::header *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v6 = a3 + 4 * a2;
  uint64_t result = interchange_compression::header::get_size(this, a2, a3);
  *((_DWORD *)this + 3 * v6 + 1) = result;
  if ((unint64_t)a4 >> result) {
    interchange_compression::header::set();
  }
  unsigned int v8 = (char *)this + 12 * v6;
  *((_DWORD *)v8 + 2) = a4;
  *((_DWORD *)v8 + 3) = 1;
  return result;
}

uint64_t interchange_compression::header::get_size(interchange_compression::header *this)
{
  int v2 = *(_DWORD *)this;
  uint64_t v3 = interchange_compression::header::header_layout_table[15 * *(unsigned int *)this + 14];
  for (unsigned int i = 3; i != 7; ++i)
  {
    if (v2 == 27)
    {
      int v2 = 27;
    }
    else
    {
      unsigned int v5 = 0;
      do
      {
        uint64_t v3 = interchange_compression::header::get_size(this, i, v5++) + v3;
        int v2 = *(_DWORD *)this;
      }
      while (v5 < interchange_compression::format_table[13 * *(unsigned int *)this + 2]);
    }
  }
  return v3;
}

uint64_t interchange_compression::header::get_size(interchange_compression::header *this, unsigned int a2, unsigned int a3)
{
  if (a2 <= 1) {
    return interchange_compression::header::header_layout_table[15 * *(unsigned int *)this + 1 + 4 * a2 + a3];
  }
  if (a2 == 4)
  {
    if (!*((_DWORD *)this + 3 * a3 + 3)) {
      interchange_compression::header::get_size();
    }
    if (!*((_DWORD *)this + 3 * a3 + 15)) {
      interchange_compression::header::get_size();
    }
    if ((*((unsigned char *)this + 12 * a3 + 8) & 8) != 0) {
      return (*((_DWORD *)this + 3 * a3 + 14) + 1);
    }
    return 0;
  }
  if (a2 != 3)
  {
    if (a2 == 2) {
      return interchange_compression::format_table[13 * *(unsigned int *)this + 3 + a3];
    }
    if (a2 - 5 > 1) {
      interchange_compression::header::get_size();
    }
    if (!*((_DWORD *)this + 3 * a3 + 3)) {
      interchange_compression::header::get_size();
    }
    if ((*((_DWORD *)this + 3 * a3 + 2) & 3) == 2) {
      return interchange_compression::format_table[13 * *(unsigned int *)this + 3 + a3] >> 1;
    }
    return 0;
  }
  if (!*((_DWORD *)this + 3 * a3 + 3)) {
    interchange_compression::header::get_size();
  }
  if ((*((unsigned char *)this + 12 * a3 + 8) & 4) == 0) {
    return 0;
  }
  if (interchange_compression::format_table[13 * *(unsigned int *)this + 3 + a3] == 32) {
    return 16;
  }
  else {
    return 8;
  }
}

uint64_t interchange_compression::get_id(interchange_compression *this)
{
  int v1 = (int)this;
  int v2 = this - 8;
  uint64_t result = 0;
  switch(v2)
  {
    case 0:
      return result;
    case 1:
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_5;
    case 2:
      uint64_t result = 1;
      break;
    case 4:
      uint64_t result = 2;
      break;
    case 8:
      uint64_t result = 3;
      break;
    default:
      if (v1 == 32)
      {
        uint64_t result = 4;
      }
      else
      {
LABEL_5:
        if (v1 == 2) {
          uint64_t result = 5;
        }
        else {
          uint64_t result = 6;
        }
        if ((v1 | 2) != 2) {
          interchange_compression::get_id(v1);
        }
      }
      break;
  }
  return result;
}

uint64_t interchange_compression::derive_sharing(uint64_t this, uint64_t a2, unsigned int *a3, unsigned int *a4, int (*a5)[4], int (*a6)[4])
{
  int v6 = *(_DWORD *)(a2 + 12);
  if (v6 == 5)
  {
    unsigned int v7 = a3[3];
    if (v7 >= 2) {
      interchange_compression::derive_sharing();
    }
    if (v7) {
      unsigned int v8 = 8;
    }
    else {
      unsigned int v8 = 5;
    }
    a3[3] = v8;
    *(_DWORD *)(a2 + 12) = 1;
  }
  if (!this)
  {
    unsigned int v10 = 0;
    unsigned int v11 = 0;
    goto LABEL_19;
  }
  uint64_t v9 = 0;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = -1;
  do
  {
    unsigned int v14 = a3[v9];
    if (v14 > v12 || v9 == 1 && v14 == v12)
    {
      unsigned int v12 = a3[v9];
      unsigned int v11 = v9;
    }
    if (v14 < v13)
    {
      unsigned int v13 = a3[v9];
      unsigned int v10 = v9;
    }
    int v15 = interchange_compression::dq_consts[160 * *(unsigned int *)(a2 + 4 * v9) + 6 + 10 * v14];
    (*a5)[v9] = v15;
    a4[v9++] = v15;
  }
  while (this != v9);
  if (this != 1)
  {
LABEL_19:
    unsigned int v16 = (v11 + 1) % 3;
    if (v16 == v10) {
      unsigned int v16 = (v11 + 2) % 3;
    }
    unsigned int v17 = a3[v16];
    unsigned int v18 = a3[6 - (v11 + v10) - v16];
    BOOL v19 = v17 > v18;
    if (v17 <= v18) {
      signed int v20 = v16;
    }
    else {
      signed int v20 = 6 - (v11 + v10) - v16;
    }
    if (v19) {
      signed int v21 = v16;
    }
    else {
      signed int v21 = 6 - (v11 + v10) - v16;
    }
    uint64_t v22 = v11;
    unsigned int v23 = a3[v11];
    uint64_t v24 = v10;
    unsigned int v25 = a3[v10];
    if (this == 2)
    {
      if (v23 == v25 || (int)a4[v10] < 1)
      {
LABEL_52:
        if (v6 == 5)
        {
          *(_DWORD *)(a2 + 12) = 5;
          a3[3] = a3[3] != 5;
          if ((int)a4[3] >= 1) {
            interchange_compression::derive_sharing();
          }
        }
        return this;
      }
      (*a5)[v10] = 0;
      unsigned int v26 = a4[v10];
      int v27 = (*a5)[v22];
      goto LABEL_31;
    }
    uint64_t v29 = v20;
    unsigned int v30 = a3[v20];
    uint64_t v31 = v21;
    if (v23 - v30 <= 1 && v25 <= 1)
    {
      (*a5)[v24] = 0;
      unint64_t v36 = 1431655766 * (int)a4[v24];
      (*a5)[v29] += HIDWORD(v36) + (v36 >> 63);
      unint64_t v37 = 1431655766 * (int)(a4[v24] + 1);
      (*a5)[v21] += HIDWORD(v37) + (v37 >> 63);
      unint64_t v38 = 1431655766 * (int)(a4[v24] + 2);
      unsigned int v39 = HIDWORD(v38) + (v38 >> 63);
      unsigned int v40 = (*a5)[v22];
LABEL_46:
      int v28 = v39 + v40;
      goto LABEL_51;
    }
    unsigned int v33 = a3[v21];
    if (v23 - v33 <= 1 && v25 <= 1)
    {
      (*a5)[v24] = 0;
      unsigned int v41 = a4[v29] & ((int)a4[v29] >> 31);
      (*a5)[v29] = v41;
      (*a5)[v31] += (int)(a4[v24] - v41 + a4[v29]) / 2;
      unsigned int v42 = a4[v24] + a4[v29] - (*a5)[v29];
      if ((int)(v42 + 1) >= 0) {
        int v43 = v42 + 1;
      }
      else {
        int v43 = v42 + 2;
      }
      int v28 = (*a5)[v22] + (v43 >> 1);
      goto LABEL_51;
    }
    if (v33 - v25 > 1)
    {
      if (v33 - v25 != 2) {
        goto LABEL_62;
      }
      int v35 = a4[v22];
    }
    else
    {
      int v35 = a4[v22];
      if ((v35 & 0x80000000) == 0) {
        goto LABEL_62;
      }
      this = a4[v31];
      if ((int)this > 0)
      {
LABEL_59:
        int v44 = 0;
        (*a5)[v24] = 0;
        (*a5)[v29] = 0;
        if ((int)(a4[v29] + a4[v24]) >= 6) {
          int v44 = a4[v31];
        }
        (*a5)[v31] = v44;
        unsigned int v39 = a4[v24] - v44 + a4[v29];
        unsigned int v40 = a4[v31] + (*a5)[v22];
        goto LABEL_46;
      }
    }
    if (v35 <= -2 && (int)a4[v31] >= 1) {
      goto LABEL_59;
    }
LABEL_62:
    if (!v25 || (int)a4[v24] < 1 || (int)a4[v29] < 1 || (a4[v31] & 0x80000000) != 0 || (int)a4[v22] > -2)
    {
      if (v23 != v25 && (int)a4[v24] >= 1)
      {
        (*a5)[v24] = 0;
        (*a5)[v22] += a4[v24];
      }
      if (v33 != v30 && (int)a4[v29] >= 1)
      {
        (*a5)[v29] = 0;
        (*a5)[v31] += a4[v29];
      }
      goto LABEL_52;
    }
    (*a5)[v24] = 0;
    (*a5)[v29] = 0;
    (*a5)[v31] = a4[v31];
    int v27 = a4[v29];
    unsigned int v26 = a4[v24] + (*a5)[v22];
LABEL_31:
    int v28 = v27 + v26;
LABEL_51:
    (*a5)[v22] = v28;
    goto LABEL_52;
  }
  return this;
}

uint64_t interchange_compression::adjust_level(uint64_t this, int a2, int a3, int a4, _DWORD *a5, unsigned int *a6, unsigned int *a7)
{
  int v7 = a4 - a3;
  if (a4 - a3 < 0)
  {
    if (interchange_compression::dq_consts[160 * this + 7 + 10 * a2] < a3 - a4)
    {
      --*a6;
      if (!interchange_compression::dq_consts[160 * this + 8 + 10 * a2])
      {
        int v7 = -1;
        goto LABEL_4;
      }
    }
  }
  else if (a4 != a3)
  {
    *a6 += v7;
LABEL_4:
    *a5 += v7;
  }
  return this;
}

interchange_compression::decompressor *interchange_compression::decompressor::decompressor(interchange_compression::decompressor *this, unsigned int a2, interchange_compression *a3, unsigned int a4)
{
  *(_DWORD *)this = a2;
  if (interchange_compression::header::header_layout_table[15 * a2] != a2) {
    interchange_compression::decompressor::decompressor();
  }
  int v5 = (int)a3;
  *(_OWORD *)((char *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 308) = 0u;
  *(_OWORD *)((char *)this + 324) = 0u;
  *(_OWORD *)((char *)this + 276) = 0u;
  *(_OWORD *)((char *)this + 292) = 0u;
  *(_OWORD *)((char *)this + 244) = 0u;
  *(_OWORD *)((char *)this + 260) = 0u;
  *(_OWORD *)((char *)this + 212) = 0u;
  *(_OWORD *)((char *)this + 228) = 0u;
  *(_OWORD *)((char *)this + 180) = 0u;
  *(_OWORD *)((char *)this + 196) = 0u;
  *(_OWORD *)((char *)this + 148) = 0u;
  *(_OWORD *)((char *)this + 164) = 0u;
  *(_OWORD *)((char *)this + 116) = 0u;
  *(_OWORD *)((char *)this + 132) = 0u;
  *(_OWORD *)((char *)this + 84) = 0u;
  *(_OWORD *)((char *)this + 100) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
  *(_OWORD *)((char *)this + 68) = 0u;
  *(_OWORD *)((char *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  *((_DWORD *)this + 85) = a2;
  *((_DWORD *)this + 87) = a3;
  *((_DWORD *)this + 88) = a4;
  if (!interchange_compression::check_valid_lossy_level(a3, a2)) {
    interchange_compression::decompressor::decompressor();
  }
  if (v5 && a4 >= 4) {
    interchange_compression::decompressor::decompressor();
  }
  *((_DWORD *)this + 86) = LOBYTE(interchange_compression::format_table[13 * a2 + 12]);
  return this;
}

uint64_t interchange_compression::decompressor::get_subblock_size(interchange_compression::decompressor *this, unsigned int a2)
{
  if (a2 >= 0xF0)
  {
    uint64_t v2 = *((unsigned int *)this + 87);
    if ((v2 - 1) <= 2) {
      return interchange_compression::lossy_parameters[28 * *((unsigned int *)this + 85) + 8 + v2];
    }
  }
  int v4 = *((_DWORD *)this + 85);
  if (interchange_compression::memory_parameters[11 * v4 + 8] == a2) {
    return ((a2 & ~(-1 << interchange_compression::memory_parameters[11 * v4 + 7])) + 1) << (v4 == 26);
  }
  if (interchange_compression::memory_parameters[11 * v4 + 9] == a2) {
    return interchange_compression::memory_parameters[11 * v4 + 5];
  }
  if (!a2) {
    return 0;
  }
  int v5 = (char *)&interchange_compression::memory_parameters[11 * v4];
  unsigned int v6 = ((a2 & ~(-1 << *((_DWORD *)v5 + 7))) + 1) << (v4 == 26);
  unsigned int v7 = *((_DWORD *)v5 + 5);
  if (v7 >= v6) {
    return v6;
  }
  else {
    return v7;
  }
}

uint64_t interchange_compression::decompressor::fill_subblock_error_color(uint64_t this, unsigned int (*a2)[4][8][4])
{
  unsigned int v2 = 0;
  v3.i64[0] = 0x100000001;
  v3.i64[1] = 0x100000001;
  do
  {
    uint64_t v4 = *(unsigned int *)(this + 340);
    if (v4 != 27)
    {
      unint64_t v5 = 0;
      uint32x4_t v6 = (uint32x4_t)vdupq_n_s32(v2);
      int8x16_t v7 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v6, (uint32x4_t)xmmword_1BA7A0AD0), v3), (uint32x4_t)xmmword_1BA7A0AC0);
      int8x16_t v8 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v6, (uint32x4_t)xmmword_1BA7A0AB0), v3), (uint32x4_t)xmmword_1BA7A0AC0);
      uint64_t v9 = (*a2)[(unint64_t)(vorr_s8(*(int8x8_t *)v8.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)).u32[0] | v8.i32[1])][vorr_s8(*(int8x8_t *)v7.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)).u32[0] | v7.i32[1]];
      do
      {
        if (v5 == 1) {
          int v10 = 0;
        }
        else {
          int v10 = ~(-1 << interchange_compression::format_table[13 * v4 + 3 + v5]);
        }
        v9[v5++] = v10;
        uint64_t v4 = *(unsigned int *)(this + 340);
      }
      while (v5 < interchange_compression::format_table[13 * v4 + 2]);
    }
    ++v2;
  }
  while (v2 != 32);
  return this;
}

uint64_t bit_pack::unpack(bit_pack *this, unsigned int a2)
{
  if (a2 >= 0x21) {
    bit_pack::unpack();
  }
  uint64_t result = bit_pack::get(this, *((_DWORD *)this + 135), a2);
  *((_DWORD *)this + 135) += a2;
  return result;
}

void *interchange_compression::format_info::unpack_pixel(interchange_compression::format_info *this, const unsigned __int8 *a2, unsigned int *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  size_t v6 = *((unsigned int *)this + 1);
  if (v6 <= 0xF) {
    size_t v7 = 16 - v6;
  }
  else {
    size_t v7 = 0;
  }
  bzero(&__dst[v6], v7);
  uint64_t result = memcpy(__dst, a2, v6);
  if (*((_DWORD *)this + 2))
  {
    unint64_t v9 = 0;
    do
    {
      a3[v9] = (*(void *)&__dst[((unint64_t)*((unsigned int *)this + v9 + 7) >> 3) & 0x1FFFFFF8] >> *((_DWORD *)this + v9 + 7)) & ~(-1 << *((_DWORD *)this + v9 + 3));
      ++v9;
    }
    while (v9 < *((unsigned int *)this + 2));
  }
  return result;
}

BOOL interchange_compression::decompressor::unpack_header(interchange_compression::decompressor *this, const unsigned __int8 *a2, unsigned int a3, bit_pack *a4)
{
  int v4 = *((_DWORD *)this + 85);
  unsigned int v5 = interchange_compression::memory_parameters[11 * v4 + 7];
  unsigned int v6 = 8 - v5;
  unsigned int v7 = interchange_compression::header::header_layout_table[15 * v4 + 1];
  unsigned int v8 = v7 - (8 - v5);
  if (v7 <= 8 - v5) {
    interchange_compression::decompressor::unpack_header();
  }
  int v10 = *((_DWORD *)a4 + 128);
  unsigned int v11 = v6 + 8 * v10;
  if (v11 < interchange_compression::header::header_layout_table[15 * v4 + 14]) {
    return 0;
  }
  unsigned int v14 = v5 - 8;
  int v15 = (a3 >> v5) & ~(-1 << v6);
  int v16 = 8 * v10;
  int v17 = bit_pack::unpack(a4, v8);
  *(_OWORD *)((char *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
  *(_OWORD *)((char *)this + 68) = 0u;
  *(_OWORD *)((char *)this + 84) = 0u;
  *(_OWORD *)((char *)this + 100) = 0u;
  *(_OWORD *)((char *)this + 116) = 0u;
  *(_OWORD *)((char *)this + 132) = 0u;
  *(_OWORD *)((char *)this + 148) = 0u;
  *(_OWORD *)((char *)this + 164) = 0u;
  *(_OWORD *)((char *)this + 180) = 0u;
  *(_OWORD *)((char *)this + 196) = 0u;
  *(_OWORD *)((char *)this + 212) = 0u;
  *(_OWORD *)((char *)this + 228) = 0u;
  *(_OWORD *)((char *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 244) = 0u;
  *(_OWORD *)((char *)this + 260) = 0u;
  *(_OWORD *)((char *)this + 276) = 0u;
  *(_OWORD *)((char *)this + 292) = 0u;
  *(_OWORD *)((char *)this + 308) = 0u;
  *(_OWORD *)((char *)this + 324) = 0u;
  interchange_compression::header::set(this, 0, 0, (v17 << v6) | v15);
  for (unsigned int i = 1; i != 28; ++i)
  {
    if (i == 12)
    {
      if (v11 < interchange_compression::header::get_size(this)) {
        return 0;
      }
    }
    else
    {
      if (i != 8)
      {
        unsigned int v19 = i >> 2;
        if (i >> 2 == 6) {
          continue;
        }
        goto LABEL_11;
      }
      bit_pack::unpack(a4, interchange_compression::header::header_layout_table[15 * *((unsigned int *)this + 85) + 13]+ v14- *((_DWORD *)a4 + 135));
    }
    unsigned int v19 = i >> 2;
LABEL_11:
    unsigned int size = interchange_compression::header::get_size(this, v19, i & 3);
    unsigned int v21 = bit_pack::unpack(a4, size);
    interchange_compression::header::set(this, v19, i & 3, v21);
    if (v19 == 5)
    {
      unsigned int v22 = interchange_compression::header::get_size(this, 6u, i & 3);
      unsigned int v23 = bit_pack::unpack(a4, v22);
      interchange_compression::header::set(this, 6u, i & 3, v23);
    }
  }
  int v24 = interchange_compression::header::get_size(this);
  bit_pack::unpack(a4, v24 + v14 - *((_DWORD *)a4 + 135));
  int v25 = *((_DWORD *)this + 85);
  if (v25 == 21)
  {
    if (!*((_DWORD *)this + 6)) {
      interchange_compression::decompressor::unpack_header();
    }
    if (!*((_DWORD *)this + 9)) {
      interchange_compression::decompressor::unpack_header();
    }
    int v26 = *((_DWORD *)this + 5);
    if ((v26 & 0x10) != 0)
    {
      unsigned int v27 = *((_DWORD *)this + 8);
      *((_DWORD *)this + 86) = 2;
      interchange_compression::header::set(this, 0, 1u, v26 & 0xFFFFFFEF | (16 * ((v27 >> 4) & 1)));
      interchange_compression::header::set(this, 0, 2u, v27 & 0xFFFFFFEF);
      int v25 = *((_DWORD *)this + 85);
    }
    else
    {
      int v25 = 21;
    }
  }
  uint64_t v28 = 0;
  int v29 = 0;
  unsigned int v30 = &interchange_compression::format_table[13 * v25];
  LODWORD(v31) = v30[2];
  if (v31 <= 1) {
    uint64_t v31 = 1;
  }
  else {
    uint64_t v31 = v31;
  }
  unsigned int v32 = v30 + 3;
  do
  {
    if (v25 != 27)
    {
      uint64_t v33 = 0;
      unsigned int v34 = (char *)this + 12;
      int v35 = (char *)this + 12;
      do
      {
        int v36 = *(_DWORD *)v35;
        v35 += 12;
        if (!v36) {
          interchange_compression::decompressor::unpack_header();
        }
        int v37 = *(v34 - 4);
        if ((v37 & 4) != 0)
        {
          if (!*((_DWORD *)this + 3 * (v33 + 12) + 3)) {
            interchange_compression::decompressor::unpack_header();
          }
          unsigned int v38 = *((_DWORD *)this + 3 * (v33 + 12) + 2);
        }
        else
        {
          unsigned int v38 = 0;
        }
        if ((~v37 & 3) != 0)
        {
          if (!*((_DWORD *)this + 3 * (v33 + 4) + 3)) {
            interchange_compression::decompressor::unpack_header();
          }
          unsigned int v40 = v32[v33];
          if (v40 == 32) {
            char v41 = 2;
          }
          else {
            char v41 = 1;
          }
          unsigned int v42 = v38 >> (v28 << v41);
          if (v40 == 32) {
            int v43 = 15;
          }
          else {
            int v43 = 3;
          }
          unsigned int v39 = *((_DWORD *)this + 3 * (v33 + 4) + 2) - (v42 & v43) + 1;
          if (v39 > v40) {
            return 0;
          }
        }
        else
        {
          unsigned int v39 = 0;
        }
        v29 += interchange_compression::NUM_PIXELS_REGION[v28] * v39;
        ++v33;
        unsigned int v34 = v35;
      }
      while (v31 != v33);
    }
    ++v28;
  }
  while (v28 != 4);
  if (v25 == 26) {
    int v44 = 15;
  }
  else {
    int v44 = 7;
  }
  if (((*((_DWORD *)a4 + 135) + v29 + v44) & ~v44) != v16) {
    return 0;
  }
  return interchange_compression::header::error_check(this) == 0;
}

_DWORD *interchange_compression::decompressor::decompress_pixels(_DWORD *this, const unsigned __int8 *a2, unsigned int a3, bit_pack *a4, unsigned int (*a5)[4][8][4])
{
  unsigned int v6 = this;
  unint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  uint64_t v75 = this + 3;
  unsigned int v85 = a5;
  do
  {
    unsigned int v9 = 0;
    unint64_t v74 = v7;
    unint64_t v10 = v7 >> 2;
    uint64_t v89 = v10 << 6;
    unsigned int v77 = (*a5)[2 * (unint64_t)(v8 & 1)][4 * v10];
    int v84 = 4 * v10;
    if (interchange_compression::NUM_PIXELS_REGION[v8] <= 1u) {
      int v11 = 1;
    }
    else {
      int v11 = interchange_compression::NUM_PIXELS_REGION[v8];
    }
    uint64_t v12 = v6[85];
    uint64_t v13 = v12;
    int v87 = v11;
    do
    {
      if (v13 == 27)
      {
        unsigned int v14 = v9 + 1;
      }
      else
      {
        uint64_t v15 = 0;
        unsigned int v14 = v9 + 1;
        int v16 = v75;
        int v17 = v75;
        do
        {
          int v18 = *v17;
          v17 += 3;
          if (!v18) {
            interchange_compression::decompressor::unpack_header();
          }
          char v19 = *((unsigned char *)v16 - 4);
          if ((v19 & 4) != 0)
          {
            if (!v6[3 * (v15 + 12) + 3]) {
              interchange_compression::decompressor::unpack_header();
            }
            unsigned int v20 = v6[3 * (v15 + 12) + 2];
          }
          else
          {
            unsigned int v20 = 0;
          }
          int v21 = v19 & 3;
          if (v21 == 3)
          {
            unsigned int v22 = 0;
          }
          else
          {
            if (!v6[3 * (v15 + 4) + 3]) {
              interchange_compression::decompressor::unpack_header();
            }
            BOOL v23 = interchange_compression::format_table[13 * v13 + 3 + v15] == 32;
            if (interchange_compression::format_table[13 * v13 + 3 + v15] == 32) {
              char v24 = 2;
            }
            else {
              char v24 = 1;
            }
            unsigned int v25 = v20 >> (v8 << v24);
            if (v23) {
              int v26 = 15;
            }
            else {
              int v26 = 3;
            }
            unsigned int v22 = v6[3 * (v15 + 4) + 2] - (v25 & v26) + 1;
          }
          this = (_DWORD *)bit_pack::unpack(a4, v22);
          if (v22 >= 0x21) {
            interchange_compression::decompressor::decompress_pixels();
          }
          if (v21 == 1) {
            unsigned int v27 = 0;
          }
          else {
            unsigned int v27 = 7;
          }
          if (v9 != 6) {
            unsigned int v27 = v9 + 1;
          }
          if (v8) {
            unsigned int v27 = v9;
          }
          uint32x4_t v28 = (uint32x4_t)vdupq_n_s32(v27);
          v29.i64[0] = 0x100000001;
          v29.i64[1] = 0x100000001;
          int8x16_t v30 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v28, (uint32x4_t)xmmword_1BA7A0AD0), v29), (uint32x4_t)xmmword_1BA7A0AC0);
          int8x16_t v31 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v28, (uint32x4_t)xmmword_1BA7A0AB0), v29), (uint32x4_t)xmmword_1BA7A0AC0);
          *(_DWORD *)&v90[64
                        * (unint64_t)(vorr_s8(*(int8x8_t *)v31.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)).u32[0] | v31.i32[1])+ 16* (vorr_s8(*(int8x8_t *)v30.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)).u32[0] | v30.i32[1])+ 4 * v15] = (int)(this << -(char)v22) >> -(char)v22;
          uint64_t v13 = v6[85];
          ++v15;
          int v16 = v17;
        }
        while (v15 < interchange_compression::format_table[13 * v13 + 2]);
        uint64_t v12 = v6[85];
        a5 = v85;
        int v11 = v87;
      }
      unsigned int v9 = v14;
    }
    while (v14 != v11);
    if (v12 != 27)
    {
      unsigned int v32 = 0;
      uint64_t v33 = (2 * v8) & 2;
      unsigned int v76 = v90;
      do
      {
        if (!v6[3 * v32 + 3]) {
          interchange_compression::decompressor::unpack_header();
        }
        uint64_t v34 = v32;
        int v35 = v6[3 * v32 + 2];
        if ((v35 & 4) != 0)
        {
          if (!v6[3 * v32 + 39]) {
            interchange_compression::decompressor::unpack_header();
          }
          unsigned int v36 = v6[3 * v32 + 38];
        }
        else
        {
          unsigned int v36 = 0;
        }
        unsigned int v37 = v6[3 * v32 + 2];
        BOOL v38 = interchange_compression::format_table[13 * v12 + 3 + v34] == 32;
        if (interchange_compression::format_table[13 * v12 + 3 + v34] == 32) {
          char v39 = 2;
        }
        else {
          char v39 = 1;
        }
        unsigned int v40 = v36 >> (v8 << v39);
        if (v38) {
          int v41 = 15;
        }
        else {
          int v41 = 3;
        }
        int v42 = v40 & v41;
        int v43 = v35 & 3;
        if (v43 == 3)
        {
          unsigned int v44 = 0;
          uint64_t v45 = 0;
          uint64_t v46 = 0;
        }
        else
        {
          if (!v6[3 * (v34 + 4) + 3]) {
            interchange_compression::decompressor::unpack_header();
          }
          unsigned int v44 = v6[3 * (v34 + 4) + 2] - v42 + 1;
          BOOL v23 = (v35 & 1 | 2) == 2;
          uint64_t v45 = 3;
          if (v23)
          {
            uint64_t v45 = 0;
            uint64_t v46 = 0;
          }
          else
          {
            uint64_t v46 = 1;
          }
        }
        int v47 = &v6[3 * (v34 + 8)];
        int v49 = v47[3];
        uint64_t v48 = v47 + 3;
        if (!v49) {
          interchange_compression::decompressor::unpack_header();
        }
        uint64_t v50 = 0;
        uint64_t v51 = (uint64_t)&v6[3 * (v34 + 8) + 1];
        unsigned int v53 = *(_DWORD *)(v51 + 4);
        int v52 = (_DWORD *)(v51 + 4);
        (*a5)[v46][v45][v34] = v53;
        int v54 = (v42 == 0) & (v37 >> 3);
        uint64_t v55 = (uint64_t)&v6[3 * (v34 + 16) + 1];
        this = (_DWORD *)(v55 + 8);
        int v56 = (int *)(v55 + 4);
        uint64_t v57 = (uint64_t)&v6[3 * (v34 + 20) + 1];
        int64x2_t v83 = (_DWORD *)(v57 + 8);
        uint64_t v58 = (uint64_t)&v6[3 * (v34 + 24) + 1];
        int v81 = (_DWORD *)(v58 + 4);
        uint64_t v82 = (_DWORD *)(v58 + 8);
        int v80 = (_DWORD *)(v57 + 4);
        char v59 = 1;
        do
        {
          uint64_t v60 = 0;
          unsigned int v61 = 0;
          char v78 = v59;
          uint64_t v62 = -v50;
          uint64_t v88 = v8 & 1 ^ v50 ^ 1;
          int v86 = v50 | v33;
          uint64_t v64 = &v77[32 * v50];
          int v65 = 3;
          BOOL v66 = &v76[64 * v50];
          do
          {
            if (v62 != v33 || v89 + v60 * 4)
            {
              if (v54)
              {
                if (!*this) {
                  interchange_compression::decompressor::unpack_header();
                }
                int v67 = *v56;
              }
              else
              {
                int v67 = 0;
              }
              if (v44 >= 0x21) {
                interchange_compression::decompressor::decompress_pixels();
              }
              int v68 = v67 << (-(char)v44 & 0x1F) >> (-(char)v44 & 0x1F);
              if (v43 == 2)
              {
                if (!*v83) {
                  interchange_compression::decompressor::unpack_header();
                }
                unsigned int v72 = interchange_compression::format_table[13 * v6[85] + 3 + v34];
                if (v72 >= 0x42) {
                  interchange_compression::decompressor::decompress_pixels();
                }
                if (!*v82) {
                  interchange_compression::decompressor::unpack_header();
                }
                if (!*v48) {
                  interchange_compression::decompressor::unpack_header();
                }
                if (v72 >= 0x21) {
                  interchange_compression::decompressor::decompress_pixels();
                }
                a5 = v85;
                int v73 = (int)(((*v52
                            - v68
                            + *(_DWORD *)&v66[v60 * 4]
                            + ((int)(*v81 << -(v72 >> 1)) >> -(v72 >> 1)) * v86
                            + ((int)(*v80 << -(v72 >> 1)) >> -(v72 >> 1)) * (v84 + v61)) & ~(-1 << v72)) << -(char)v72) >> -(char)v72;
                goto LABEL_84;
              }
              if (v43 == 1)
              {
                unsigned int v70 = interchange_compression::format_table[13 * v6[85] + 3 + v34];
                if (v70 >= 0x21) {
                  interchange_compression::decompressor::decompress_pixels();
                }
                if ((v8 & 2) != 0) {
                  unsigned int v71 = v61;
                }
                else {
                  unsigned int v71 = v65;
                }
                uint64_t v63 = v88 | v33;
                int v79 = (2 * v8) & 0x3FFFFFFC;
                (*a5)[v63][v79][4 * v71 + v34] = (int)((((*a5)[(unint64_t)dword_1BA7A2830[16 * v63
                                                                                               + 1
                                                                                               + 2 * v71
                                                                                               + 2 * v79]][dword_1BA7A2830[16 * v63 + 2 * v71 + 2 * v79]][v34]
                                                       - v68
                                                       + *(_DWORD *)&v90[64 * v88 + 16 * v71 + 4 * v34]) & ~(-1 << v70)) << -(char)v70) >> -(char)v70;
              }
              else
              {
                if (v43)
                {
                  int v73 = (*a5)[0][0][v34];
LABEL_84:
                  v64[v60] = v73;
                  goto LABEL_85;
                }
                if (!*v48) {
                  interchange_compression::decompressor::unpack_header();
                }
                unsigned int v69 = interchange_compression::format_table[13 * v6[85] + 3 + v34];
                if (v69 >= 0x21) {
                  interchange_compression::decompressor::decompress_pixels();
                }
                v64[v60] = (int)(((*v52 - v68 + *(_DWORD *)&v66[v60 * 4]) & ~(-1 << v69)) << -(char)v69) >> -(char)v69;
              }
            }
LABEL_85:
            ++v61;
            --v65;
            v60 += 4;
          }
          while (v60 != 16);
          char v59 = 0;
          uint64_t v50 = 1;
        }
        while ((v78 & 1) != 0);
        unsigned int v32 = v34 + 1;
        uint64_t v12 = v6[85];
        v76 += 4;
        ++v77;
      }
      while ((int)v34 + 1 < interchange_compression::format_table[13 * v12 + 2]);
    }
    ++v8;
    unint64_t v7 = v74 + 2;
  }
  while (v8 != 4);
  return this;
}

_DWORD *interchange_compression::decompressor::decorrelate(_DWORD *this, unsigned int (*a2)[4][8][4])
{
  uint64_t v2 = 0;
  uint64_t v3 = this[85];
  int v4 = a2;
  do
  {
    uint64_t v5 = 0;
    unsigned int v6 = v4;
    uint64_t v7 = v3;
    do
    {
      if (v7 != 27)
      {
        uint64_t v8 = 0;
        unsigned int v9 = this + 3;
        do
        {
          if (!*v9) {
            interchange_compression::decompressor::unpack_header();
          }
          if ((*(unsigned char *)(v9 - 1) & 0x10) != 0)
          {
            uint64_t v10 = this[86];
            if (v8 != v10)
            {
              unsigned int v11 = interchange_compression::format_table[13 * v7 + 3 + v8];
              if (v11 >= 0x21) {
                interchange_compression::decompressor::decompress_pixels();
              }
              (*v6)[0][0][v8] = (int)(((((*a2)[v2][v5][v10] >> (interchange_compression::format_table[13 * v7 + 3 + v10]
                                                              - v11))
                                      + (*v6)[0][0][v8]) & ~(-1 << v11)) << -(char)v11) >> -(char)v11;
              uint64_t v3 = this[85];
            }
          }
          (*v6)[0][0][v8] &= ~(-1 << interchange_compression::format_table[13 * v3 + 3 + v8]);
          uint64_t v3 = this[85];
          ++v8;
          v9 += 3;
          uint64_t v7 = v3;
        }
        while (v8 < interchange_compression::format_table[13 * v3 + 2]);
      }
      ++v5;
      unsigned int v6 = (unsigned int (*)[4][8][4])((char *)v6 + 16);
    }
    while (v5 != 8);
    ++v2;
    int v4 = (unsigned int (*)[4][8][4])((char *)v4 + 128);
  }
  while (v2 != 4);
  return this;
}

uint64_t bit_pack::get(bit_pack *this, unsigned int a2, unsigned int a3)
{
  if (a3 >= 0x21) {
    bit_pack::get();
  }
  char v3 = a2;
  unsigned int v4 = *((_DWORD *)this + 134);
  if (a3 + a2 > v4)
  {
    printf("read overflow:  read bit=%d size=%d, total=%d\n", a2, a3, v4);
    __assert_rtn("get", "interchange_bit_pack.h", 85, "0");
  }
  int v5 = *((_DWORD *)this + 128);
  unint64_t __dst = 0;
  uint64_t v6 = 528;
  if (!*((unsigned char *)this + 544)) {
    uint64_t v6 = 520;
  }
  uint64_t v7 = *(void *)((char *)this + v6);
  LODWORD(v8) = v5 - (a2 >> 3);
  if (v8 >= 8) {
    size_t v8 = 8;
  }
  else {
    size_t v8 = v8;
  }
  uint64_t v9 = -1 << a3;
  memcpy(&__dst, (const void *)(v7 + (a2 >> 3)), v8);
  return (__dst >> (v3 & 7)) & ~v9;
}

uint64_t interchange_compression::header::error_check(interchange_compression::header *this)
{
  unsigned int v1 = *(_DWORD *)this;
  if (!*((_DWORD *)this + 3 * LOBYTE(interchange_compression::format_table[13 * *(unsigned int *)this + 12]) + 3)) {
    interchange_compression::decompressor::unpack_header();
  }
  LODWORD(v2) = (*((unsigned __int8 *)this
                 + 12 * LOBYTE(interchange_compression::format_table[13 * *(unsigned int *)this + 12])
                 + 8) >> 4) & 1;
  if (v1 == 21) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = v2;
  }
  if (v1 != 27)
  {
    uint64_t v4 = 0;
    int v5 = &interchange_compression::format_table[13 * v1];
    LODWORD(v6) = v5[2];
    if (v6 <= 1) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = v6;
    }
    uint64_t v7 = (char *)this + 12;
    size_t v8 = v5 + 3;
    uint64_t v9 = (char *)this + 12;
    do
    {
      int v10 = *(_DWORD *)v9;
      v9 += 12;
      if (!v10) {
        interchange_compression::decompressor::unpack_header();
      }
      char v11 = *(v7 - 4);
      if ((v11 & 3u) - 1 >= 2) {
        int v12 = v2;
      }
      else {
        int v12 = v2 | 2;
      }
      if ((v11 & 0x10) != 0) {
        LODWORD(v2) = v12;
      }
      if ((v1 > 0x16 || ((1 << v1) & 0x4000C3) == 0) && (v11 & 3) == 2) {
        LODWORD(v2) = v2 | 4;
      }
      int v13 = v11 & 3;
      if (v13 == 3)
      {
        if (!*((_DWORD *)this + 3 * (v4 + 4) + 3)) {
          interchange_compression::decompressor::unpack_header();
        }
        if (v11 & 4 | *((_DWORD *)this + 3 * (v4 + 4) + 2)) {
          LODWORD(v2) = v2 | 0x10;
        }
      }
      else
      {
        int v14 = v2 | 8;
        if (v1 != 26) {
          int v14 = v2;
        }
        if (v13 == 1) {
          LODWORD(v2) = v14;
        }
      }
      if (!*((_DWORD *)this + 3 * (v4 + 4) + 3)) {
        interchange_compression::decompressor::unpack_header();
      }
      if (*((_DWORD *)this + 3 * (v4 + 4) + 2) + 1 <= v8[v4]) {
        uint64_t v2 = v2;
      }
      else {
        uint64_t v2 = v2 | 0x20;
      }
      ++v4;
      uint64_t v7 = v9;
    }
    while (v6 != v4);
  }
  return v2;
}

void *AVE_DLList_Init(void *result)
{
  if (!result) {
    AVE_DLList_Init_cold_1();
  }
  *uint64_t result = result;
  result[1] = result;
  return result;
}

BOOL AVE_DLList_Empty(void *a1)
{
  if (!a1) {
    AVE_DLList_Empty_cold_1();
  }
  if (!*a1) {
    AVE_DLList_Empty_cold_2();
  }
  unsigned int v1 = (void *)a1[1];
  if (!v1) {
    AVE_DLList_Empty_cold_3();
  }
  return (void *)*a1 == a1 || v1 == a1;
}

void *AVE_DLList_PopFront(void *result)
{
  if (!result) {
    AVE_DLList_PopFront_cold_1();
  }
  if (!*result) {
    AVE_DLList_PopFront_cold_2();
  }
  unsigned int v1 = (void *)result[1];
  if (!v1) {
    AVE_DLList_PopFront_cold_3();
  }
  result[1] = v1[1];
  *(void *)v1[1] = result;
  *unsigned int v1 = v1;
  v1[1] = v1;
  return result;
}

uint64_t AVE_DLList_Prev(uint64_t a1)
{
  if (!a1) {
    AVE_DLList_Prev_cold_1();
  }
  return *(void *)a1;
}

uint64_t AVE_DLList_Next(uint64_t a1)
{
  if (!a1) {
    AVE_DLList_Next_cold_1();
  }
  return *(void *)(a1 + 8);
}

uint64_t *AVE_DLList_Erase(uint64_t *result)
{
  if (!result) {
    AVE_DLList_Erase_cold_1();
  }
  uint64_t v1 = *result;
  if (!*result) {
    AVE_DLList_Erase_cold_2();
  }
  uint64_t v2 = result[1];
  if (!v2) {
    AVE_DLList_Erase_cold_3();
  }
  *(void *)(v1 + 8) = v2;
  *(void *)result[1] = v1;
  *uint64_t result = (uint64_t)result;
  result[1] = (uint64_t)result;
  return result;
}

uint64_t AVE_DLList_Front(void *a1)
{
  if (!a1) {
    AVE_DLList_Front_cold_1();
  }
  if (AVE_DLList_Empty(a1)) {
    return 0;
  }
  else {
    return a1[1];
  }
}

uint64_t AVE_DLList_Back(void *a1)
{
  if (!a1) {
    AVE_DLList_Back_cold_1();
  }
  if (AVE_DLList_Empty(a1)) {
    return 0;
  }
  else {
    return *a1;
  }
}

void *AVE_DLList_PushBack(void *result, void *a2)
{
  if (!result) {
    AVE_DLList_PushBack_cold_1();
  }
  if (!a2) {
    AVE_DLList_PushBack_cold_2();
  }
  if (!*result) {
    AVE_DLList_PushBack_cold_3();
  }
  if (!result[1]) {
    AVE_DLList_PushBack_cold_4();
  }
  *a2 = *result;
  a2[1] = result;
  *(void *)(*result + 8) = a2;
  *uint64_t result = a2;
  return result;
}

uint64_t AVE_DLList_PopBack(uint64_t result)
{
  if (!result) {
    AVE_DLList_PopBack_cold_1();
  }
  uint64_t v1 = *(void **)result;
  if (!*(void *)result) {
    AVE_DLList_PopBack_cold_2();
  }
  if (!*(void *)(result + 8)) {
    AVE_DLList_PopBack_cold_3();
  }
  *(void *)uint64_t result = *v1;
  *(void *)(*v1 + 8) = result;
  *uint64_t v1 = v1;
  v1[1] = v1;
  return result;
}

uint64_t AVE_DLList_Begin(uint64_t a1)
{
  if (!a1) {
    AVE_DLList_Begin_cold_1();
  }
  return *(void *)(a1 + 8);
}

uint64_t AVE_DLList_End(uint64_t result)
{
  if (!result) {
    AVE_DLList_End_cold_1();
  }
  return result;
}

uint64_t AVE_DLList_RBegin(uint64_t a1)
{
  if (!a1) {
    AVE_DLList_RBegin_cold_1();
  }
  return *(void *)a1;
}

uint64_t AVE_DLList_REnd(uint64_t result)
{
  if (!result) {
    AVE_DLList_REnd_cold_1();
  }
  return result;
}

void AVE_DevCap_Find_cold_1()
{
  __assert_rtn("AVE_DevCap_Find", "AVE_DevCap.cpp", 1758, "pDevCap->psCEntry != __null");
}

void AVE_DevCap_FindByType_cold_1()
{
  __assert_rtn("AVE_DevCap_FindByType", "AVE_DevCap.cpp", 1788, "pDevCap->psCEntry != __null");
}

void AVE_DevCap_Type2Idx()
{
  __assert_rtn("AVE_DevCap_Type2Idx", "AVE_DevCap.cpp", 1853, "idx >= 0");
}

void htpc_entropy::dec_symbols()
{
}

{
  __assert_rtn("dec_symbols", "htpc_entropy.h", 155, "bb_avail == 0");
}

void interchange_decompress_plane()
{
  __assert_rtn("interchange_decompress_plane", "interchange.cpp", 99, "depth == 8 || depth == 10");
}

void interchange_compression::decompressor::decompress()
{
  __assert_rtn("skip", "interchange_bit_pack.h", 103, "read_ptr <= size_bits()");
}

{
  __assert_rtn("lossy_decompress_dquad", "interchange_lossy.h", 1063, "delta_quant <= ((1ull << delta_bits[c]) - 1)");
}

{
  __assert_rtn("lossy_decompress_dquad", "interchange_lossy.h", 1013, "pixel_unpacked <= legal_pixel_size");
}

{
  __assert_rtn("lossy_decompress_dquad", "interchange_lossy.h", 911, "mode_sz != 0");
}

{
  __assert_rtn("lossy_decompress_dquad", "interchange_lossy.h", 901, "mode_sz != 0");
}

{
  __assert_rtn("decompress", "interchange_decompressor.h", 203, "lossy_level == 0");
}

{
  __assert_rtn("decompress", "interchange_decompressor.h", 212, "lossy_level == 0");
}

void interchange_compression::header::set()
{
}

void interchange_compression::header::get_size()
{
}

{
  __assert_rtn("get_size", "interchange_header.h", 142, "0");
}

{
  __assert_rtn("get_size", "interchange_header.h", 127, "fields[field_id(MODE, comp)].init");
}

{
  __assert_rtn("get_size", "interchange_header.h", 132, "fields[field_id(MODE, comp)].init");
}

{
  __assert_rtn("get_size", "interchange_header.h", 133, "fields[field_id(BITS, comp)].init");
}

void interchange_compression::get_id(int a1)
{
  printf("comp_width = %d\n", a1);
  __assert_rtn("get_id", "interchange_lossy.h", 195, "fmt_id != 6");
}

void interchange_compression::derive_sharing()
{
  __assert_rtn("derive_sharing", "interchange_lossy.h", 357, "start_level[3] <= 0");
}

{
  __assert_rtn("derive_sharing", "interchange_lossy.h", 270, "mode[3] == 0 || mode[3] == 1");
}

void interchange_compression::decompressor::decompressor()
{
  __assert_rtn("decompressor", "interchange_decompressor.h", 41, "lossy_level == 0 || comp_type < COMP_TYPE_INVALID");
}

{
  __assert_rtn("decompressor", "interchange_decompressor.h", 40, "check_valid_lossy_level(lossy_level, format)");
}

{
  __assert_rtn("set_format", "interchange_header.h", 205, "header_layout_table[id].format == id");
}

void bit_pack::unpack()
{
  __assert_rtn("unpack", "interchange_bit_pack.h", 96, "size <= 32");
}

void interchange_compression::decompressor::unpack_header()
{
}

{
  __assert_rtn("unpack_header", "interchange_decompressor.h", 238, "header::header_layout_table[format].field_size[0] > shift");
}

void interchange_compression::decompressor::decompress_pixels()
{
  __assert_rtn("sign_extend", "interchange_constants.h", 90, "width <= 32");
}

{
  __assert_rtn("wrap_to_range", "interchange_constants.h", 85, "width <= 32");
}

void bit_pack::get()
{
  __assert_rtn("get", "interchange_bit_pack.h", 82, "size <= 32");
}

void AVE_DLList_Init_cold_1()
{
  __assert_rtn("AVE_DLList_Init", "AVE_DLList.c", 70, "psNode != ((void *)0)");
}

void AVE_DLList_Empty_cold_1()
{
  __assert_rtn("AVE_DLList_Empty", "AVE_DLList.c", 85, "psNode != ((void *)0)");
}

void AVE_DLList_Empty_cold_2()
{
  __assert_rtn("AVE_DLList_Empty", "AVE_DLList.c", 86, "psNode->psPrev != ((void *)0)");
}

void AVE_DLList_Empty_cold_3()
{
  __assert_rtn("AVE_DLList_Empty", "AVE_DLList.c", 87, "psNode->psNext != ((void *)0)");
}

void AVE_DLList_PopFront_cold_1()
{
  __assert_rtn("AVE_DLList_PopFront", "AVE_DLList.c", 344, "psList != ((void *)0)");
}

void AVE_DLList_PopFront_cold_2()
{
  __assert_rtn("AVE_DLList_PopFront", "AVE_DLList.c", 346, "psList->psPrev != ((void *)0)");
}

void AVE_DLList_PopFront_cold_3()
{
  __assert_rtn("AVE_DLList_PopFront", "AVE_DLList.c", 347, "psList->psNext != ((void *)0)");
}

void AVE_DLList_Prev_cold_1()
{
  __assert_rtn("AVE_DLList_Prev", "AVE_DLList.c", 159, "psNode != ((void *)0)");
}

void AVE_DLList_Next_cold_1()
{
  __assert_rtn("AVE_DLList_Next", "AVE_DLList.c", 171, "psNode != ((void *)0)");
}

void AVE_DLList_Erase_cold_1()
{
  __assert_rtn("AVE_DLList_Erase", "AVE_DLList.c", 222, "psNode != ((void *)0)");
}

void AVE_DLList_Erase_cold_2()
{
  __assert_rtn("AVE_DLList_Erase", "AVE_DLList.c", 224, "psNode->psPrev != ((void *)0)");
}

void AVE_DLList_Erase_cold_3()
{
  __assert_rtn("AVE_DLList_Erase", "AVE_DLList.c", 225, "psNode->psNext != ((void *)0)");
}

void AVE_DLList_Front_cold_1()
{
  __assert_rtn("AVE_DLList_Front", "AVE_DLList.c", 271, "psList != ((void *)0)");
}

void AVE_DLList_Back_cold_1()
{
  __assert_rtn("AVE_DLList_Back", "AVE_DLList.c", 287, "psList != ((void *)0)");
}

void AVE_DLList_PushBack_cold_1()
{
  __assert_rtn("AVE_DLList_PushBack", "AVE_DLList.c", 323, "psList != ((void *)0)");
}

void AVE_DLList_PushBack_cold_2()
{
  __assert_rtn("AVE_DLList_PushBack", "AVE_DLList.c", 324, "psNewNode != ((void *)0)");
}

void AVE_DLList_PushBack_cold_3()
{
  __assert_rtn("AVE_DLList_PushBack", "AVE_DLList.c", 326, "psList->psPrev != ((void *)0)");
}

void AVE_DLList_PushBack_cold_4()
{
  __assert_rtn("AVE_DLList_PushBack", "AVE_DLList.c", 327, "psList->psNext != ((void *)0)");
}

void AVE_DLList_PopBack_cold_1()
{
  __assert_rtn("AVE_DLList_PopBack", "AVE_DLList.c", 365, "psList != ((void *)0)");
}

void AVE_DLList_PopBack_cold_2()
{
  __assert_rtn("AVE_DLList_PopBack", "AVE_DLList.c", 367, "psList->psPrev != ((void *)0)");
}

void AVE_DLList_PopBack_cold_3()
{
  __assert_rtn("AVE_DLList_PopBack", "AVE_DLList.c", 368, "psList->psNext != ((void *)0)");
}

void AVE_DLList_Begin_cold_1()
{
  __assert_rtn("AVE_DLList_Begin", "AVE_DLList.c", 449, "psList != ((void *)0)");
}

void AVE_DLList_End_cold_1()
{
  __assert_rtn("AVE_DLList_End", "AVE_DLList.c", 461, "psList != ((void *)0)");
}

void AVE_DLList_RBegin_cold_1()
{
  __assert_rtn("AVE_DLList_RBegin", "AVE_DLList.c", 473, "psList != ((void *)0)");
}

void AVE_DLList_REnd_cold_1()
{
  __assert_rtn("AVE_DLList_REnd", "AVE_DLList.c", 485, "psList != ((void *)0)");
}

void *__cdecl CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint)
{
  return (void *)MEMORY[0x1F40D70E8](allocator, size, hint);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1F40D7808](allocator, capacity);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1F40D7858](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1F40D7860]();
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7990](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D79A8](allocator, capacity, theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFIndex CFGetRetainCount(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B68](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFRunLoopSourceRef CFMachPortCreateRunLoopSource(CFAllocatorRef allocator, CFMachPortRef port, CFIndex order)
{
  return (CFRunLoopSourceRef)MEMORY[0x1F40D7C60](allocator, port, order);
}

CFMachPortRef CFMachPortCreateWithPort(CFAllocatorRef allocator, mach_port_t portNum, CFMachPortCallBack callout, CFMachPortContext *context, Boolean *shouldFreeInfo)
{
  return (CFMachPortRef)MEMORY[0x1F40D7C68](allocator, *(void *)&portNum, callout, context, shouldFreeInfo);
}

void CFMachPortInvalidate(CFMachPortRef port)
{
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return MEMORY[0x1F40D7E30](number);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7EA0](key, applicationID);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1F40D7F18](allocator, propertyList, format, options, error);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B0]();
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

void CFRunLoopRun(void)
{
}

void CFRunLoopStop(CFRunLoopRef rl)
{
}

void CFShow(CFTypeRef obj)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8520](theString, *(void *)&encoding);
}

CFStringEncoding CFStringGetSystemEncoding(void)
{
  return MEMORY[0x1F40D85E0]();
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

uint64_t CMBaseObjectGetDerivedStorage()
{
  return MEMORY[0x1F40DB910]();
}

OSStatus CMBlockBufferCreateWithMemoryBlock(CFAllocatorRef structureAllocator, void *memoryBlock, size_t blockLength, CFAllocatorRef blockAllocator, const CMBlockBufferCustomBlockSource *customBlockSource, size_t offsetToData, size_t dataLength, CMBlockBufferFlags flags, CMBlockBufferRef *blockBufferOut)
{
  return MEMORY[0x1F40DB988](structureAllocator, memoryBlock, blockLength, blockAllocator, customBlockSource, offsetToData, dataLength, *(void *)&flags);
}

OSStatus CMBlockBufferGetDataPointer(CMBlockBufferRef theBuffer, size_t offset, size_t *lengthAtOffsetOut, size_t *totalLengthOut, char **dataPointerOut)
{
  return MEMORY[0x1F40DB9A0](theBuffer, offset, lengthAtOffsetOut, totalLengthOut, dataPointerOut);
}

uint64_t CMDerivedObjectCreate()
{
  return MEMORY[0x1F40DBB80]();
}

CFTypeRef CMGetAttachment(CMAttachmentBearerRef target, CFStringRef key, CMAttachmentMode *attachmentModeOut)
{
  return (CFTypeRef)MEMORY[0x1F40DBBF0](target, key, attachmentModeOut);
}

OSStatus CMSampleBufferCreate(CFAllocatorRef allocator, CMBlockBufferRef dataBuffer, Boolean dataReady, CMSampleBufferMakeDataReadyCallback makeDataReadyCallback, void *makeDataReadyRefcon, CMFormatDescriptionRef formatDescription, CMItemCount numSamples, CMItemCount numSampleTimingEntries, const CMSampleTimingInfo *sampleTimingArray, CMItemCount numSampleSizeEntries, const size_t *sampleSizeArray, CMSampleBufferRef *sampleBufferOut)
{
  return MEMORY[0x1F40DBD30](allocator, dataBuffer, dataReady, makeDataReadyCallback, makeDataReadyRefcon, formatDescription, numSamples, numSampleTimingEntries);
}

CFArrayRef CMSampleBufferGetSampleAttachmentsArray(CMSampleBufferRef sbuf, Boolean createIfNecessary)
{
  return (CFArrayRef)MEMORY[0x1F40DBE00](sbuf, createIfNecessary);
}

OSStatus CMTagCollectionGetTagsWithCategory(CMTagCollectionRef tagCollection, CMTagCategory category, CMTag *tagBuffer, CMItemCount tagBufferCount, CMItemCount *numberOfTagsCopied)
{
  return MEMORY[0x1F40DBF90](tagCollection, *(void *)&category, tagBuffer, tagBufferCount, numberOfTagsCopied);
}

uint64_t CMTagGetFlagsValue(CMTag tag)
{
  return MEMORY[0x1F40DBFC0](*(void *)&tag.category, tag.value);
}

int64_t CMTagGetSInt64Value(CMTag tag)
{
  return MEMORY[0x1F40DBFD8](*(void *)&tag.category, tag.value);
}

CVPixelBufferRef CMTaggedBufferGroupGetCVPixelBufferForTag(CMTaggedBufferGroupRef group, CMTag tag, CFIndex *indexOut)
{
  return (CVPixelBufferRef)MEMORY[0x1F40DC030](group, *(void *)&tag.category, tag.value, indexOut);
}

CMItemCount CMTaggedBufferGroupGetCount(CMTaggedBufferGroupRef group)
{
  return MEMORY[0x1F40DC038](group);
}

CMTagCollectionRef CMTaggedBufferGroupGetTagCollectionAtIndex(CMTaggedBufferGroupRef group, CFIndex index)
{
  return (CMTagCollectionRef)MEMORY[0x1F40DC040](group, index);
}

CMTime *__cdecl CMTimeAdd(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x1F40DC088](retstr, lhs, rhs);
}

int32_t CMTimeCompare(CMTime *time1, CMTime *time2)
{
  return MEMORY[0x1F40DC0C8](time1, time2);
}

CFDictionaryRef CMTimeCopyAsDictionary(CMTime *time, CFAllocatorRef allocator)
{
  return (CFDictionaryRef)MEMORY[0x1F40DC0E0](time, allocator);
}

CFDictionaryRef CMTimeRangeCopyAsDictionary(CMTimeRange *range, CFAllocatorRef allocator)
{
  return (CFDictionaryRef)MEMORY[0x1F40DC1A0](range, allocator);
}

CMTimeRange *__cdecl CMTimeRangeFromTimeToTime(CMTimeRange *__return_ptr retstr, CMTime *start, CMTime *end)
{
  return (CMTimeRange *)MEMORY[0x1F40DC1B8](retstr, start, end);
}

CMTimeRange *__cdecl CMTimeRangeMakeFromDictionary(CMTimeRange *__return_ptr retstr, CFDictionaryRef dictionaryRepresentation)
{
  return (CMTimeRange *)MEMORY[0x1F40DC1E0](retstr, dictionaryRepresentation);
}

CFTypeRef CVBufferCopyAttachment(CVBufferRef buffer, CFStringRef key, CVAttachmentMode *attachmentMode)
{
  return (CFTypeRef)MEMORY[0x1F40DFB48](buffer, key, attachmentMode);
}

CFDictionaryRef CVBufferCopyAttachments(CVBufferRef buffer, CVAttachmentMode attachmentMode)
{
  return (CFDictionaryRef)MEMORY[0x1F40DFB50](buffer, *(void *)&attachmentMode);
}

int CVColorPrimariesGetIntegerCodePointForString(CFStringRef colorPrimariesString)
{
  return MEMORY[0x1F40DFBA8](colorPrimariesString);
}

CFStringRef CVColorPrimariesGetStringForIntegerCodePoint(int colorPrimariesCodePoint)
{
  return (CFStringRef)MEMORY[0x1F40DFBB0](*(void *)&colorPrimariesCodePoint);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x1F40DFD28](pixelBuffer);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x1F40DFD30](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD40](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1F40DFD48](pixelBuffer, planeIndex);
}

void CVPixelBufferGetExtendedPixels(CVPixelBufferRef pixelBuffer, size_t *extraColumnsOnLeft, size_t *extraColumnsOnRight, size_t *extraRowsOnTop, size_t *extraRowsOnBottom)
{
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1F40DFD70](pixelBuffer, planeIndex);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x1F40DFD78](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD80](pixelBuffer);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD88](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1F40DFDA0](pixelBuffer, planeIndex);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x1F40DFDB8](pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferPoolCreate(CFAllocatorRef allocator, CFDictionaryRef poolAttributes, CFDictionaryRef pixelBufferAttributes, CVPixelBufferPoolRef *poolOut)
{
  return MEMORY[0x1F40DFDC0](allocator, poolAttributes, pixelBufferAttributes, poolOut);
}

CVReturn CVPixelBufferPoolCreatePixelBuffer(CFAllocatorRef allocator, CVPixelBufferPoolRef pixelBufferPool, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1F40DFDC8](allocator, pixelBufferPool, pixelBufferOut);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x1F40DFE40](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x1F40DFE48](pixelBuffer, unlockFlags);
}

int CVTransferFunctionGetIntegerCodePointForString(CFStringRef transferFunctionString)
{
  return MEMORY[0x1F40DFE78](transferFunctionString);
}

CFStringRef CVTransferFunctionGetStringForIntegerCodePoint(int transferFunctionCodePoint)
{
  return (CFStringRef)MEMORY[0x1F40DFE80](*(void *)&transferFunctionCodePoint);
}

int CVYCbCrMatrixGetIntegerCodePointForString(CFStringRef yCbCrMatrixString)
{
  return MEMORY[0x1F40DFE88](yCbCrMatrixString);
}

CFStringRef CVYCbCrMatrixGetStringForIntegerCodePoint(int yCbCrMatrixCodePoint)
{
  return (CFStringRef)MEMORY[0x1F40DFE90](*(void *)&yCbCrMatrixCodePoint);
}

uint64_t FigFormatDescriptionRelease()
{
  return MEMORY[0x1F40DD700]();
}

kern_return_t IOConnectCallAsyncMethod(mach_port_t connection, uint32_t selector, mach_port_t wake_port, uint64_t *reference, uint32_t referenceCnt, const uint64_t *input, uint32_t inputCnt, const void *inputStruct, size_t inputStructCnt, uint64_t *output, uint32_t *outputCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x1F40E86B8](*(void *)&connection, *(void *)&selector, *(void *)&wake_port, reference, *(void *)&referenceCnt, input, *(void *)&inputCnt, inputStruct);
}

kern_return_t IOConnectCallStructMethod(mach_port_t connection, uint32_t selector, const void *inputStruct, size_t inputStructCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x1F40E86D8](*(void *)&connection, *(void *)&selector, inputStruct, inputStructCnt, outputStruct, outputStructCnt);
}

kern_return_t IOCreateReceivePort(uint32_t msgType, mach_port_t *recvPort)
{
  return MEMORY[0x1F40E8758](*(void *)&msgType, recvPort);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x1F40E8F60](*(void *)&object);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return MEMORY[0x1F40E9240](*(void *)&connect);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x1F40E9250](*(void *)&mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40E9268](name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return MEMORY[0x1F40E9280](*(void *)&service, *(void *)&owningTask, *(void *)&type, connect);
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return (IOSurfaceRef)MEMORY[0x1F40E9308](properties);
}

size_t IOSurfaceGetAllocSize(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E9350](buffer);
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return (void *)MEMORY[0x1F40E9358](buffer);
}

uint64_t IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane()
{
  return MEMORY[0x1F40E9360]();
}

uint64_t IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane()
{
  return MEMORY[0x1F40E9370]();
}

void *__cdecl IOSurfaceGetBaseAddressOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return (void *)MEMORY[0x1F40E9380](buffer, planeIndex);
}

uint64_t IOSurfaceGetBytesPerCompressedTileHeaderOfPlane()
{
  return MEMORY[0x1F40E9390]();
}

uint64_t IOSurfaceGetBytesPerRowOfCompressedTileHeaderGroupsOfPlane()
{
  return MEMORY[0x1F40E93B0]();
}

uint64_t IOSurfaceGetHTPCVerticalHeaderGroupingModeOfPlane()
{
  return MEMORY[0x1F40E9438]();
}

uint64_t IOSurfaceGetHeightInCompressedTilesOfPlane()
{
  return MEMORY[0x1F40E9448]();
}

uint64_t IOSurfaceGetHorizontalPixelOffsetWithinCompressedTileArrayOfPlane()
{
  return MEMORY[0x1F40E9458]();
}

IOSurfaceID IOSurfaceGetID(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E9460](buffer);
}

OSType IOSurfaceGetPixelFormat(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E9480](buffer);
}

uint64_t IOSurfaceGetProtectionOptions()
{
  return MEMORY[0x1F40E94A8]();
}

int32_t IOSurfaceGetUseCount(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E94E8](buffer);
}

uint64_t IOSurfaceGetVerticalPixelOffsetWithinCompressedTileArrayOfPlane()
{
  return MEMORY[0x1F40E94F0]();
}

uint64_t IOSurfaceGetWidthInCompressedTilesOfPlane()
{
  return MEMORY[0x1F40E9500]();
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1F40E9540](buffer, *(void *)&options, seed);
}

IOSurfaceRef IOSurfaceLookup(IOSurfaceID csid)
{
  return (IOSurfaceRef)MEMORY[0x1F40E9550](*(void *)&csid);
}

void IOSurfaceSetValue(IOSurfaceRef buffer, CFStringRef key, CFTypeRef value)
{
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1F40E9630](buffer, *(void *)&options, seed);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1F40E72C8]();
}

uint64_t VTEncoderSessionCreateCMBlockBuffer()
{
  return MEMORY[0x1F4103258]();
}

uint64_t VTEncoderSessionCreateMVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults()
{
  return MEMORY[0x1F4103260]();
}

uint64_t VTEncoderSessionCreateVideoFormatDescription()
{
  return MEMORY[0x1F4103268]();
}

uint64_t VTEncoderSessionEmitEncodedFrame()
{
  return MEMORY[0x1F4103278]();
}

uint64_t VTEncoderSessionEmitEncodedTile()
{
  return MEMORY[0x1F4103280]();
}

uint64_t VTEncoderSessionSetPixelBufferAttributes()
{
  return MEMORY[0x1F4103290]();
}

uint64_t VTEncoderSessionSetTimeRangesForNextPass()
{
  return MEMORY[0x1F4103298]();
}

uint64_t VTMotionEstimationProcessorSessionCreateMotionVectorPixelBuffer()
{
  return MEMORY[0x1F41033A8]();
}

uint64_t VTMultiPassStorageCopyDataAtTimeStamp()
{
  return MEMORY[0x1F41033C0]();
}

uint64_t VTMultiPassStorageGetTimeStamp()
{
  return MEMORY[0x1F41033D0]();
}

uint64_t VTMultiPassStorageGetTimeStampAndDuration()
{
  return MEMORY[0x1F41033D8]();
}

CFTypeID VTMultiPassStorageGetTypeID(void)
{
  return MEMORY[0x1F41033E0]();
}

uint64_t VTMultiPassStorageSetDataAtTimeStamp()
{
  return MEMORY[0x1F41033E8]();
}

uint64_t VTMultiPassStorageSetIdentifier()
{
  return MEMORY[0x1F41033F0]();
}

uint64_t VTRegisterVideoEncoderWithInfo()
{
  return MEMORY[0x1F4103500]();
}

uint64_t VTTileEncoderSessionCreateVideoFormatDescription()
{
  return MEMORY[0x1F41035C8]();
}

uint64_t VTTileEncoderSessionSetTileAttributes()
{
  return MEMORY[0x1F41035D0]();
}

uint64_t VTTileEncoderSessionSetTileEncodeRequirements()
{
  return MEMORY[0x1F41035D8]();
}

uint64_t VTVideoEncoderGetClassID()
{
  return MEMORY[0x1F4103618]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

int atoi(const char *a1)
{
  return MEMORY[0x1F40CA4A8](a1);
}

void bzero(void *a1, size_t a2)
{
}

int clock_gettime(clockid_t __clock_id, timespec *__tp)
{
  return MEMORY[0x1F40CB3D0](*(void *)&__clock_id, __tp);
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x1F40CB3D8](*(void *)&__clock_id);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

char *__cdecl fgetln(FILE *a1, size_t *a2)
{
  return (char *)MEMORY[0x1F40CC0F0](a1, a2);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

void free(void *a1)
{
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x1F40CC290](a1, a2, *(void *)&a3);
}

int fseeko(FILE *__stream, off_t a2, int __whence)
{
  return MEMORY[0x1F40CC298](__stream, a2, *(void *)&__whence);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1F40CC568](a1, a2);
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1F40CC700]();
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x1F40CC868](a1);
}

kern_return_t mach_port_mod_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta)
{
  return MEMORY[0x1F40CCA10](*(void *)&task, *(void *)&name, *(void *)&right, *(void *)&delta);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1F40CCA60](info);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

void os_release(void *object)
{
}

void *__cdecl os_retain(void *object)
{
  return (void *)MEMORY[0x1F40CD548](object);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1F40CD838](a1);
}

int pthread_attr_destroy(pthread_attr_t *a1)
{
  return MEMORY[0x1F40CD918](a1);
}

int pthread_attr_getschedparam(const pthread_attr_t *a1, sched_param *a2)
{
  return MEMORY[0x1F40CD920](a1, a2);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x1F40CD930](a1);
}

int pthread_attr_setschedparam(pthread_attr_t *a1, const sched_param *a2)
{
  return MEMORY[0x1F40CD950](a1, a2);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD980](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x1F40CD988](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD990](a1);
}

int pthread_cond_timedwait(pthread_cond_t *a1, pthread_mutex_t *a2, const timespec *a3)
{
  return MEMORY[0x1F40CD998](a1, a2, a3);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1F40CD9B8](a1, a2, a3, a4);
}

void pthread_exit(void *a1)
{
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x1F40CDA38](a1, a2);
}

mach_port_t pthread_mach_thread_np(pthread_t a1)
{
  return MEMORY[0x1F40CDA60](a1);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA78](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1F40CDAA8](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x1F40CDAC0](a1, *(void *)&a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1F40CDB30]();
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x1F40CDB60](a1);
}

int rand(void)
{
  return MEMORY[0x1F40CDC08]();
}

char *__cdecl setlocale(int a1, const char *a2)
{
  return (char *)MEMORY[0x1F40CDF90](*(void *)&a1, a2);
}

int setpriority(int a1, id_t a2, int a3)
{
  return MEMORY[0x1F40CDF98](*(void *)&a1, *(void *)&a2, *(void *)&a3);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0D0](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE150](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x1F40CE198](a1, a2, a3, a4);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1F40CE1F8](__dst, __src, __n);
}

double strtod(const char *a1, char **a2)
{
  MEMORY[0x1F40CE260](a1, a2);
  return result;
}

uintmax_t strtoumax(const char *__nptr, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE300](__nptr, __endptr, *(void *)&__base);
}

void syslog(int a1, const char *a2, ...)
{
}

kern_return_t thread_policy_set(thread_act_t thread, thread_policy_flavor_t flavor, thread_policy_t policy_info, mach_msg_type_number_t policy_infoCnt)
{
  return MEMORY[0x1F40CE540](*(void *)&thread, *(void *)&flavor, policy_info, *(void *)&policy_infoCnt);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1F40CE588](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1F40CE608](*(void *)&a1);
}

uint64_t voucher_adopt()
{
  return MEMORY[0x1F40CE708]();
}

uint64_t voucher_copy()
{
  return MEMORY[0x1F40CE710]();
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1F40CE790](__str, __size, __format, a4);
}